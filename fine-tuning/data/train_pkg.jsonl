{"index": 854, "repo": "calcite-core-1.34.0", "code": "Package: runtime\n\nClasses and Interfaces: \nInterface ArrayBindable; // Extension to Bindable that returns rows that are arrays of objects.\nInterface Bindable<T>; // Statement that can be bound to a DataContext and then executed.\nInterface CalciteResource; // Compiler-checked resources for the Calcite project.\nInterface Enumerables.Emitter<E,TResult>; // Given a match (a list of rows, and their states) produces a list of rows to be output.\nInterface FlatLists.ComparableList<T>; // List that is also comparable.\nInterface Hook.Closeable; // Removes a Hook after use.\nInterface Pattern; // Regular expression, to be compiled into an Automaton.\nInterface ResultSetEnumerable.PreparedStatementEnricher; // Consumer for decorating a PreparedStatement, that is, setting its parameters.\nInterface SpaceFillingCurve2D; // Utilities for space-filling curves.\nInterface SpaceFillingCurve2D.IndexRange; // Range.\nInterface Typed; // Adds type information to a Enumerable.\nClass ArrayComparator; // Compares arrays.\nClass ArrayEnumeratorCursor; // Implementation of Cursor on top of an Enumerator that returns an array of Object for each row.\nClass Automaton; // A nondeterministic finite-state automaton (NFA).\nClass AutomatonBuilder; // Builds a state-transition graph for deterministic finite automaton.\nClass BinarySearch; // Binary search for the implementation of RANGE BETWEEN XXX PRECEDING/FOLLOWING clause.\nClass CompressionFunctions; // A collection of functions used in compression and decompression.\nClass ConsList<E>; // List that consists of a head element and an immutable non-empty list.\nClass CoordinateTransformer; // Transforms the coordinates of a geometry.\nClass DeterministicAutomaton; // A deterministic finite automaton (DFA).\nClass Enumerables; // Utilities for processing Enumerable collections.\nClass EnumeratorCursor<T>; // Implementation of Cursor on top of an Enumerator that returns a record for each row.\nClass Feature; // SQL language feature.\nClass FlatLists; // Space-efficient, comparable, immutable lists.\nClass FlatLists.AbstractFlatList<T>; // Base class for flat lists.\n", "des": "Utilities required at runtime."}
{"index": 435, "repo": "kafka-streams-3.5.0", "code": "Package: state\n\nClasses and Interfaces: \nInterface KeyValueBytesStoreSupplier; // A store supplier that can be used to create one or more KeyValueStore<Bytes, byte[]> instances of type <Bytes, byte[]>.\nInterface KeyValueIterator<K,V>; // Iterator interface of KeyValue.\nInterface KeyValueStore<K,V>; // A key-value store that supports put/get/delete and range queries.\nInterface QueryableStoreType<T>; // Used to enable querying of custom StateStore types via the KafkaStreams API.\nInterface ReadOnlyKeyValueStore<K,V>; // A key-value store that only supports read operations.\nInterface ReadOnlySessionStore<K,AGG>; // A session store that only supports read operations.\nInterface ReadOnlyWindowStore<K,V>; // A window store that only supports read operations.\nInterface RocksDBConfigSetter; // An interface to that allows developers to customize the RocksDB settings for a given Store.\nInterface SessionBytesStoreSupplier; // A store supplier that can be used to create one or more SessionStore<Byte, byte[]> instances.\nInterface SessionStore<K,AGG>; // Interface for storing the aggregated values of sessions.\nInterface StoreBuilder<T extends StateStore>; // Build a StateStore wrapped with optional caching and logging.\nInterface StoreSupplier<T extends StateStore>; // A state store supplier which can create one or more StateStore instances.\nInterface TimestampedBytesStore;\nInterface TimestampedKeyValueStore<K,V>; // A key-(value/timestamp) store that supports put/get/delete and range queries.\nInterface TimestampedWindowStore<K,V>; // Interface for storing the aggregated values of fixed-size time windows.\nInterface VersionedBytesStore; // A representation of a versioned key-value store as a KeyValueStore of type <Bytes, byte[]>.\nInterface VersionedBytesStoreSupplier; // A store supplier that can be used to create one or more versioned key-value stores, specifically, VersionedBytesStore instances.\nInterface VersionedKeyValueStore<K,V>; // A key-value store that stores multiple record versions per key, and supports timestamp-based retrieval operations to return the latest record (per key) as of a specified timestamp.\n", "des": "Provides interfaces for managing the intermediate state of a stateful streams application."}
{"index": 200, "repo": "nutch-2.4", "code": "Package: extractor\n\nSub Packages: \npackage extractor.normalizer; // Normalizers for jsoup-extractor\n\nClasses and Interfaces: \nClass JsoupDocument;\nClass JsoupDocument.DocumentField;\nClass JsoupDocumentReader;\nClass JsoupExtractorConstants;\n", "des": "core package of jsoup-extractor containing XML configuration parser, document structure"}
{"index": 2598, "repo": "spring-rabbit-3.0.6", "code": "Package: support\n\nSub Packages: \npackage support.micrometer; // Provides classes for Micrometer support.\n\nClasses and Interfaces: \npublic class ActiveObjectCounter<T> extends Object; // A mechanism to keep track of active objects.\npublic class ArgumentBuilder extends org.springframework.amqp.utils.MapBuilder<ArgumentBuilder,String,Object>; // A builder for argument maps.\npublic class ConsumerCancelledException extends RuntimeException; // Thrown when the broker cancels the consumer and the message queue is drained.\npublic class DefaultMessagePropertiesConverter extends Object implements MessagePropertiesConverter; // Default implementation of the MessagePropertiesConverter strategy.\npublic class Delivery extends Object; // Encapsulates an arbitrary message - simple \"bean\" holder structure.\npublic class ExpressionFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<org.springframework.expression.Expression>; // FactoryBean for creating Expression instances.\n@FunctionalInterface public interface ListenerContainerAware; // MessageListeners that also implement this interface can have configuration verified during initialization.\npublic class ListenerExecutionFailedException extends org.springframework.amqp.AmqpException; // Exception to be thrown when the execution of a listener method failed.\npublic interface MessagePropertiesConverter; // Strategy interface for converting between Spring AMQP MessageProperties and RabbitMQ BasicProperties.\npublic final class RabbitExceptionTranslator extends Object; // Translates Rabbit Exceptions to the AmqpException class hierarchy.\npublic class ValueExpression<V> extends Object implements org.springframework.expression.Expression; // A very simple hardcoded implementation of the Expression interface that represents an immutable value.\n", "des": "Provides support classes for Spring Rabbit."}
{"index": 77, "repo": "ignite-core-2.15.0", "code": "Package: indexing\n\nSub Packages: \npackage indexing.noop; // Contains default no-op indexing SPI implementation.\n\nClasses and Interfaces: \nInterface IndexingQueryFilter; // Cache entry filter.\nInterface IndexingSpi; // Indexing SPI allows user to index cache content.\nClass IndexingQueryCacheFilter; // Indexing query filter for specific cache.\nClass IndexingQueryFilterImpl; // Indexing query filter.\n", "des": "Contains APIs for indexing SPI."}
{"index": 683, "repo": "jackson-databind-2.15.2", "code": "Package: impl\n\nClasses and Interfaces: \nClass BeanAsArrayBuilderDeserializer;\nClass BeanAsArrayDeserializer; // Variant of BeanDeserializer used for handling deserialization of POJOs when serialized as JSON Arrays, instead of JSON Objects.\nClass BeanPropertyMap; // Helper class used for storing mapping from property name to SettableBeanProperty instances.\nClass CreatorCandidate;\nClass CreatorCandidate.Param;\nClass CreatorCollector; // Container class for storing information on creators (based on annotations, visibility), to be able to build actual ValueInstantiator later on.\nClass ErrorThrowingDeserializer; // A deserializer that stores an Error caught during constructing of the deserializer, which needs to be deferred and only during actual attempt to deserialize a value of given type.\nClass ExternalTypeHandler; // Helper class that is used to flatten JSON structure when using \"external type id\" (see JsonTypeInfo.As.EXTERNAL_PROPERTY).\nClass ExternalTypeHandler.Builder;\nClass FailingDeserializer; // Special bogus \"serializer\" that will throw MismatchedInputException if an attempt is made to deserialize a value.\nClass FieldProperty; // This concrete sub-class implements property that is set directly assigning to a Field.\nClass InnerClassProperty; // This sub-class is used to handle special case of value being a non-static inner class.\nClass JavaUtilCollectionsDeserializers; // Helper class used to contain logic for deserializing \"special\" containers from java.util.Collections and java.util.Arrays.\nClass JDKValueInstantiators; // Container for a set of ValueInstantiators used for certain critical JDK value types, either as performance optimization for initialization time observed by profiling, or due to difficulty in otherwise finding constructors.\nClass ManagedReferenceProperty; // Wrapper property that is used to handle managed (forward) properties Basically just needs to delegate first to actual forward property, and then to back property.\nClass MergingSettableBeanProperty; // SettableBeanProperty implementation that will try to access value of the property first, and if non-null value found, pass that for update (using JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, Object)) instead of constructing a new value.\nClass MethodProperty; // This concrete sub-class implements property that is set using regular \"setter\" method.\n", "des": "Contains those implementation classes of deserialization part of data binding that are not considered part of public or semi-public interfaces."}
{"index": 2401, "repo": "spring-batch-core-5.0.2", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractJobRepositoryFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobRepository>, org.springframework.beans.factory.InitializingBean; // A FactoryBean that automates the creation of a SimpleJobRepository.\npublic class JobRepositoryFactoryBean extends AbstractJobRepositoryFactoryBean implements org.springframework.beans.factory.InitializingBean; // A FactoryBean that automates the creation of a SimpleJobRepository using JDBC DAO implementations which persist batch metadata in database.\npublic class SimpleJobRepository extends Object implements JobRepository; // Implementation of JobRepository that stores job instances, job executions, and step executions using the injected DAOs.\n", "des": "Specific implementations of repository concerns."}
{"index": 94, "repo": "ignite-core-2.15.0", "code": "Package: jdbc\n\nClasses and Interfaces: \nInterface JdbcIpFinderDialect; // SQL dialect to use with TcpDiscoveryJdbcIpFinder.\nClass BasicJdbcIpFinderDialect; // Basic JDBC dialect to use along with TcpDiscoveryJdbcIpFinder.\nClass OracleJdbcIpFinderDialect; // Oracle JDBC dialect to use along with TcpDiscoveryJdbcIpFinder.\nClass TcpDiscoveryJdbcIpFinder; // JDBC-based IP finder.\n", "des": "Contains JDBC IP finder implementation."}
{"index": 136, "repo": "ignite-core-2.15.0", "code": "Package: checkpoint\n\nClasses and Interfaces: \nClass GridCheckpointManager; // This class defines a checkpoint manager.\nClass GridCheckpointRequest; // This class defines checkpoint request.\n", "des": "TODO."}
{"index": 3733, "repo": "lucene-queryparser-9.7.0", "code": "Package: nodes\n\nClasses and Interfaces: \nInterface FieldableNode; // A query node implements FieldableNode interface to indicate that its children and itself are associated to a specific field.\nInterface FieldValuePairQueryNode<T>; // This interface should be implemented by QueryNode that holds a field and an arbitrary value.\nInterface QueryNode; // A QueryNode is a interface implemented by all nodes on a QueryNode tree.\nInterface RangeQueryNode<T extends FieldValuePairQueryNode<?>>; // This interface should be implemented by a QueryNode that represents some kind of range query.\nInterface TextableQueryNode; // Interface for a node that has text as a CharSequence\nInterface ValueQueryNode<T>; // This interface should be implemented by QueryNode that holds an arbitrary value.\nClass AndQueryNode; // A AndQueryNode represents an AND boolean operation performed on a list of nodes.\nClass AnyQueryNode; // A AnyQueryNode represents an ANY operator performed on a list of nodes.\nClass BooleanQueryNode; // A BooleanQueryNode represents a list of elements which do not have an explicit boolean operator defined between them.\nClass BoostQueryNode; // A BoostQueryNode boosts the QueryNode tree which is under this node.\nClass DeletedQueryNode; // A DeletedQueryNode represents a node that was deleted from the query node tree.\nClass FieldQueryNode; // A FieldQueryNode represents a element that contains field/text tuple\nClass FuzzyQueryNode; // A FuzzyQueryNode represents a element that contains field/text/similarity tuple\nClass GroupQueryNode; // A GroupQueryNode represents a location where the original user typed real parenthesis on the query string.\nClass MatchAllDocsQueryNode; // A MatchAllDocsQueryNode indicates that a query node tree or subtree will match all documents if executed in the index.\nClass MatchNoDocsQueryNode; // A MatchNoDocsQueryNode indicates that a query node tree or subtree will not match any documents if executed in the index.\nClass ModifierQueryNode; // A ModifierQueryNode indicates the modifier value (+,-,?,NONE) for each term on the query string.\nClass NoTokenFoundQueryNode; // A NoTokenFoundQueryNode is used if a term is convert into no tokens by the tokenizer/lemmatizer/analyzer (null).\n", "des": "Query nodes commonly used by query parser implementations."}
{"index": 398, "repo": "amqp-client-5.18.0", "code": "Package: utility\n\nClasses and Interfaces: \nInterface SensibleClone<T extends SensibleClone<T>>; // This interface exists as a workaround for the annoyingness of java.lang.Cloneable.\nClass BlockingCell<T>; // Simple one-shot IPC mechanism.\nClass BlockingValueOrException<V,E extends Throwable & SensibleClone<E>>;\nClass IntAllocator; // A class for allocating integers from a given range that uses a BitSet representation of the free integers.\nClass Utility; // Catch-all holder class for static helper methods.\nClass ValueOrException<V,E extends Throwable & SensibleClone<E>>;\n", "des": "Utility package of helper classes, mostly used in the implementation code."}
{"index": 2662, "repo": "spring-data-cassandra-4.1.2", "code": "Package: repository\n\nSub Packages: \npackage repository.cdi; // CDI support for Apache Cassandra specific repository implementation.\npackage repository.config; // Support infrastructure for the configuration of Apache Cassandra specific repositories.\npackage repository.query; // Query derivation mechanism for Apache Cassandra specific repositories.\npackage repository.support; // Support infrastructure for query derivation of Apache Cassandra specific repositories.\n\nClasses and Interfaces: \n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Query(allowFiltering=true) public @interface AllowFiltering; // Annotation to declare filtering for a derived query.\n@NoRepositoryBean public interface CassandraRepository<T,ID> extends ListCrudRepository<T,ID>; // Cassandra-specific extension of the CrudRepository interface that allows the specification of a type for the identity of the @Table (or @Persistable) type.\n@Documented @Target({ANNOTATION_TYPE,METHOD}) @Retention(RUNTIME) public @interface Consistency; // Annotation to declare a ConsistencyLevel for CQL queries executed through query methods.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Query(count=true) public @interface CountQuery; // Annotation to declare count queries directly on repository methods.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Query(exists=true) public @interface ExistsQuery; // Annotation to declare exists queries directly on repository methods.\n@NoRepositoryBean public interface MapIdCassandraRepository<T> extends CassandraRepository<T,MapId>; // Cassandra repository interface using MapId to represent Ids.\n@Documented @Target({ANNOTATION_TYPE,METHOD}) @Retention(RUNTIME) public @interface Query; // Annotation to declare finder queries directly on repository methods.\npublic static enum Query.Idempotency extends Enum<Query.Idempotency>; // Enumeration to define statement idempotency.\n@NoRepositoryBean public interface ReactiveCassandraRepository<T,ID> extends ReactiveCrudRepository<T,ID>; // Cassandra specific Repository interface with reactive support.\n", "des": "Apache Cassandra specific repository implementation."}
{"index": 2570, "repo": "pulsar-common-3.0.0", "code": "Package: keystoretls\n\nClasses and Interfaces: \npublic class KeyStoreSSLContext extends Object; // KeyStoreSSLContext that mainly wrap a SSLContext to provide SSL context for both webservice and netty.\npublic static enum KeyStoreSSLContext.Mode extends Enum<KeyStoreSSLContext.Mode>; // Connection Mode for TLS.\npublic class NetSslContextBuilder extends SslContextAutoRefreshBuilder<SSLContext>; // Similar to `DefaultSslContextBuilder`, which build `javax.net.ssl.SSLContext` for web service.\npublic class NettySSLContextAutoRefreshBuilder extends SslContextAutoRefreshBuilder<KeyStoreSSLContext>; // SSL context builder for Netty.\npublic class SSLContextValidatorEngine extends Object; // SSLContextValidatorEngine to validate 2 SSlContext.\n@FunctionalInterface public static interface SSLContextValidatorEngine.SSLEngineProvider;\n", "des": "Helpers to work with events from the non-blocking I/O client-server framework."}
{"index": 1529, "repo": "spring-context-6.0.11", "code": "Package: jmx\n\nSub Packages: \npackage jmx.access; // Provides support for accessing remote MBean resources.\npackage jmx.export; // This package provides declarative creation and registration of Spring-managed beans as JMX MBeans.\npackage jmx.support; // Contains support classes for connecting to local and remote MBeanServers and for exposing an MBeanServer to remote clients.\n\nClasses and Interfaces: \npublic class JmxException extends org.springframework.core.NestedRuntimeException; // General base exception to be thrown on JMX errors.\npublic class MBeanServerNotFoundException extends JmxException; // Exception thrown when we cannot locate an instance of an MBeanServer, or when more than one instance is found.\n", "des": "This package contains Spring's JMX support, which includes registration of Spring-managed beans as JMX MBeans as well as access to remote JMX MBeans."}
{"index": 3856, "repo": "lucene-core-9.7.0", "code": "Package: fst\n\nClasses and Interfaces: \nInterface FSTStore; // Abstraction for reading/writing bytes necessary for FST.\nClass ByteSequenceOutputs; // An FST Outputs implementation where each output is a sequence of bytes.\nClass BytesRefFSTEnum<T>; // Enumerates all input (BytesRef) + output pairs in an FST.\nClass BytesRefFSTEnum.InputOutput<T>; // Holds a single input (BytesRef) + output pair.\nClass CharSequenceOutputs; // An FST Outputs implementation where each output is a sequence of characters.\nClass FST<T>; // Represents an finite state machine (FST), using a compact byte[] format.\nClass FST.Arc<T>; // Represents a single arc.\nClass FST.BytesReader; // Reads bytes stored in an FST.\nClass FSTCompiler<T>; // Builds a minimal FST (maps an IntsRef term to an arbitrary output) from pre-sorted terms with outputs.\nClass FSTCompiler.Builder<T>; // Fluent-style constructor for FST FSTCompiler.\nClass IntSequenceOutputs; // An FST Outputs implementation where each output is a sequence of ints.\nClass IntsRefFSTEnum<T>; // Enumerates all input (IntsRef) + output pairs in an FST.\nClass IntsRefFSTEnum.InputOutput<T>; // Holds a single input (IntsRef) + output pair.\nClass NoOutputs; // A null FST Outputs implementation; use this if you just want to build an FSA.\nClass OffHeapFSTStore; // Provides off heap storage of finite state machine (FST), using underlying index input instead of byte store on heap\nClass OnHeapFSTStore; // Provides storage of finite state machine (FST), using byte array or byte store allocated on heap.\nClass Outputs<T>; // Represents the outputs for an FST, providing the basic algebra required for building and traversing the FST.\nClass PairOutputs<A,​B>; // An FST Outputs implementation, holding two other outputs.\nClass PairOutputs.Pair<A,​B>; // Holds a single pair of two outputs.\n", "des": "Finite state transducers"}
{"index": 128, "repo": "ignite-core-2.15.0", "code": "Package: view\n\nClasses and Interfaces: \nInterface FiltrableSystemView<R>; // System view with filtering capabilities.\nInterface SystemView<R>; // Implementation provides data for some internal Ignite objects.\nInterface SystemViewRowAttributeWalker<R>; // Utility class for quick iteration over row properties.\nInterface SystemViewRowAttributeWalker.AttributeVisitor; // Attribute visitor.\nInterface SystemViewRowAttributeWalker.AttributeWithValueVisitor; // Attribute visitor.\nClass BaselineNodeAttributeView; // Baseline node attribute representation for a SystemView.\nClass BaselineNodeView; // Baseline topology node representation for a SystemView.\nClass BinaryMetadataView; // BinaryMetadata representation for the SystemView.\nClass CacheGroupIoView; // Cache group IO statistics representation for a SystemView.\nClass CacheGroupView; // Cache group representation for the SystemView.\nClass CachePagesListView; // Pages-list representation for a SystemView.\nClass CacheView; // Cache representation for a SystemView.\nClass ClientConnectionView; // Client connection system view row.\nClass ClusterNodeView; // Cluster node representation for a SystemView.\nClass ComputeJobView; // Compute job representation for a SystemView.\nClass ComputeTaskView; // Compute task representation for a SystemView.\nClass ConfigurationView; // Configuration value representation for a SystemView.\nClass ContinuousQueryView; // Continuous query representation for a SystemView.\nClass MetastorageView; // Metastorage key representation for a SystemView.\nClass MetricsView; // Metrics representation for a SystemView.\nClass NodeAttributeView; // Node attribute representation for a SystemView.\nClass NodeMetricsView; // Node metrics representation for a SystemView.\nClass PagesListView; // Pages-list representation for a SystemView.\nClass PagesTimestampHistogramView; // Pages timestamp histogramm representation for a SystemView.\nClass PartitionStateView; // Partition state representation for a SystemView.\nClass ScanQueryView; // Scan query iterator representation for a SystemView.\nClass ServiceView; // Service representation for a SystemView.\nClass SnapshotView; // Snapshot representation for a SystemView.\nClass SqlQueryHistoryView; // SQL query history representation for a SystemView.\nClass SqlQueryView; // SQL query representation for a SystemView.\n", "des": "Contains SystemView clases that exists in Ignite."}
{"index": 1826, "repo": "pulsar-client-original-3.0.0", "code": "Package: util\n\nClasses and Interfaces: \npublic class ConsumerName extends Object;\npublic class ExecutorProvider extends Object;\npublic static class ExecutorProvider.ExtendedThreadFactory extends io.netty.util.concurrent.DefaultThreadFactory;\npublic class MathUtils extends Object;\npublic class MessageIdUtils extends Object;\npublic class NoOpLock extends Object implements Lock;\npublic class ObjectCache<T> extends Object implements Supplier<T>;\npublic class RetryMessageUtil extends Object;\npublic class RetryUtil extends Object;\npublic class ScheduledExecutorProvider extends ExecutorProvider;\n@Target({ANNOTATION_TYPE,FIELD,METHOD}) @Retention(RUNTIME) public @interface Secret;\npublic class SecretsSerializer extends com.fasterxml.jackson.databind.JsonSerializer<Object>;\npublic class TimedCompletableFuture<T> extends CompletableFuture<T>;\npublic class TypeCheckUtil extends Object;\npublic class WithSNISslEngineFactory extends org.asynchttpclient.netty.ssl.DefaultSslEngineFactory;\n", "des": "Pulsar Client Utils."}
{"index": 2850, "repo": "spring-integration-core-6.1.2", "code": "Package: xml\n\nClasses and Interfaces: \npublic abstract class AbstractChannelAdapterParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser; // Base parser for Channel Adapters.\npublic abstract class AbstractChannelParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser; // Base class for channel parsers.\npublic abstract class AbstractConsumerEndpointParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser; // Base class parser for elements that create Message Endpoints.\npublic abstract class AbstractCorrelatingMessageHandlerParser extends AbstractConsumerEndpointParser; // Base class for parsers that create an instance of AbstractCorrelatingMessageHandler.\npublic abstract class AbstractInboundGatewayParser extends org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser; // Base class for inbound gateway parsers.\npublic abstract class AbstractIntegrationNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // Base class for NamespaceHandlers that registers a BeanFactoryPostProcessor for configuring default bean definitions.\npublic abstract class AbstractOutboundChannelAdapterParser extends AbstractChannelAdapterParser; // Base class for outbound Channel Adapter parsers.\npublic abstract class AbstractOutboundGatewayParser extends AbstractConsumerEndpointParser; // Base class for url-based outbound gateway parsers.\npublic abstract class AbstractPollingInboundChannelAdapterParser extends AbstractChannelAdapterParser; // Base parser for inbound Channel Adapters that poll a source.\npublic abstract class AbstractRouterParser extends AbstractConsumerEndpointParser; // Base parser for routers.\npublic abstract class AbstractTransformerParser extends AbstractConsumerEndpointParser;\npublic class AggregatorParser extends AbstractCorrelatingMessageHandlerParser; // Parser for the aggregator element of the integration namespace.\npublic class AnnotationConfigParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Parser for the <annotation-config> element of the integration namespace.\npublic class ApplicationEventMulticasterParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the <application-event-multicaster> element of the integration namespace.\npublic class BarrierParser extends AbstractConsumerEndpointParser; // Parser for <int:barrier/>.\n", "des": "Provides supporting XML-based configuration - parsers, namespace handlers."}
{"index": 1023, "repo": "hadoop-aws-3.3.6", "code": "Package: api\n\nClasses and Interfaces: \nInterface RequestFactory; // Factory for S3 objects.\nClass UnsupportedRequestException; // An operation is unsupported.\n", "des": "Where the interfaces for classes implemented in o.a.h.fs.s3a.impl should go."}
{"index": 1358, "repo": "spring-tx-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class LocalConnectionFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.InitializingBean; // FactoryBean that creates a local JCA connection factory in \"non-managed\" mode (as defined by the Java Connector Architecture specification).\npublic class ResourceAdapterFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ResourceAdapter>, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // FactoryBean that bootstraps the specified JCA 1.7 ResourceAdapter, starting it with a local BootstrapContext and exposing it for bean references.\npublic class SimpleBootstrapContext extends Object implements BootstrapContext; // Simple implementation of the JCA 1.7 BootstrapContext interface, used for bootstrapping a JCA ResourceAdapter in a local environment.\n", "des": "Provides generic support classes for JCA usage within Spring, mainly for local setup of a JCA ResourceAdapter and/or ConnectionFactory."}
{"index": 169, "repo": "ignite-core-2.15.0", "code": "Package: redis\n\nClasses and Interfaces: \nInterface GridRedisCommandHandler; // Command handler.\nClass GridRedisConnectionCommandHandler; // Redis connection handler.\nClass GridRedisRestCommandHandler; // Redis command handler done via REST.\n", "des": "Contains Redis protocol commands."}
{"index": 3863, "repo": "lucene-spatial-extras-9.7.0", "code": "Package: bbox\n\nClasses and Interfaces: \nClass BBoxOverlapRatioValueSource; // The algorithm is implemented as envelope on envelope (rect on rect) overlays rather than complex polygon on complex polygon overlays.\nClass BBoxSimilarityValueSource; // A base class for calculating a spatial relevance rank per document from a provided ShapeValuesSource returning a Rectangle per-document.\nClass BBoxStrategy; // A SpatialStrategy for indexing and searching Rectangles by storing its coordinates in numeric fields.\n", "des": "Bounding Box Spatial Strategy"}
{"index": 1989, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: validation\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnClass(jakarta.validation.executable.ExecutableValidator.class) @ConditionalOnResource(resources=\"classpath:META-INF/services/jakarta.validation.spi.ValidationProvider\") @Import(org.springframework.boot.autoconfigure.validation.PrimaryDefaultValidatorPostProcessor.class) public class ValidationAutoConfiguration extends Object; // Auto-configuration to configure the validation infrastructure.\n@FunctionalInterface public interface ValidationConfigurationCustomizer; // Callback interface that can be used to customize Configuration.\npublic class ValidatorAdapter extends Object implements org.springframework.validation.SmartValidator, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Validator implementation that delegates calls to another Validator.\n", "des": "Auto-configuration for (JSR-303) Validation."}
{"index": 647, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: impl\n\nClasses and Interfaces: \nClass MemoryFederationStateStore; // In-memory implementation of FederationStateStore.\nClass SQLFederationStateStore; // SQL implementation of FederationStateStore.\nClass ZookeeperFederationStateStore; // ZooKeeper implementation of FederationStateStore.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 2988, "repo": "spring-ldap-core-3.1.0", "code": "Package: annotations\n\nClasses and Interfaces: \n@Target(FIELD) @Retention(RUNTIME) public @interface Attribute; // Maps a Java field to an LDAP attribute.\npublic static enum Attribute.Type extends Enum<Attribute.Type>; // The Type attribute indicates whether a field is regarded as binary based or string based by the LDAP JNDI provider.\n@Target(FIELD) @Retention(RUNTIME) public @interface DnAttribute; // Maps a Java field to a component of an entry's distinguished name.\n@Target(TYPE) @Retention(RUNTIME) @Documented public @interface Entry; // This annotation marks a Java class to be persisted in an LDAP directory.\n@Target(FIELD) @Retention(RUNTIME) public @interface Id; // This annotation marks a Java field as containing the Distinguished Name of an LDAP Entry.\n@Target(FIELD) @Retention(RUNTIME) public @interface Transient; // This annotation identifies a field in an Entry annotated class that should not be persisted to LDAP.\n", "des": "Provides a set of annotations to describe the mapping of a Java class to an LDAP entry."}
{"index": 2635, "repo": "spring-integration-sftp-6.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic class SftpInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileInboundChannelAdapterParser; // Parser for 'sftp:inbound-channel-adapter'\npublic class SftpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Provides namespace support for using SFTP.\npublic class SftpOutboundChannelAdapterParser extends org.springframework.integration.file.config.RemoteFileOutboundChannelAdapterParser; // Parser for SFTP Outbound Channel Adapters.\npublic class SftpOutboundGatewayParser extends org.springframework.integration.file.config.AbstractRemoteFileOutboundGatewayParser;\npublic class SftpStreamingInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileStreamingInboundChannelAdapterParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 2500, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: tracing\n\nSub Packages: \npackage tracing.otlp; // Auto-configuration for tracing with OTLP.\npackage tracing.prometheus; // Auto-configuration for Prometheus Exemplars with Micrometer Tracing.\npackage tracing.wavefront; // Auto-configuration for tracing with Wavefront.\npackage tracing.zipkin; // Auto-configuration for tracing with Zipkin.\n\nClasses and Interfaces: \n@AutoConfiguration(before=MicrometerTracingAutoConfiguration.class) @ConditionalOnClass({brave.Tracer.class,io.micrometer.tracing.brave.bridge.BraveTracer.class}) @EnableConfigurationProperties(TracingProperties.class) @ConditionalOnEnabledTracing public class BraveAutoConfiguration extends Object; // Auto-configuration for Brave.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @ConditionalOnProperty(prefix=\"management.tracing\", name=\"enabled\", matchIfMissing=true) public @interface ConditionalOnEnabledTracing; // @Conditional that checks whether tracing is enabled.\n@AutoConfiguration @ConditionalOnClass(io.micrometer.tracing.Tracer.class) @ConditionalOnEnabledTracing public class MicrometerTracingAutoConfiguration extends Object; // Auto-configuration for the Micrometer Tracing API.\n@AutoConfiguration(before=MicrometerTracingAutoConfiguration.class) @ConditionalOnEnabledTracing @ConditionalOnClass({io.micrometer.tracing.otel.bridge.OtelTracer.class,io.opentelemetry.sdk.trace.SdkTracerProvider.class,io.opentelemetry.api.OpenTelemetry.class}) @EnableConfigurationProperties(TracingProperties.class) public class OpenTelemetryAutoConfiguration extends Object; // Auto-configuration for OpenTelemetry.\n@FunctionalInterface public interface SdkTracerProviderBuilderCustomizer; // Callback interface that can be used to customize the SdkTracerProviderBuilder that is used to create the auto-configured SdkTracerProvider.\n@ConfigurationProperties(\"management.tracing\") public class TracingProperties extends Object; // Configuration properties for tracing.\npublic static class TracingProperties.Baggage extends Object;\npublic static class TracingProperties.Baggage.Correlation extends Object;\npublic static class TracingProperties.Brave extends Object;\npublic static class TracingProperties.Propagation extends Object;\n", "des": "Auto-configuration for Micrometer Tracing."}
{"index": 590, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: launch\n\nClasses and Interfaces: \nClass Equinox; // The System Bundle implementation for the Equinox Framework.\nClass EquinoxFactory; // The framework factory implementation for the Equinox framework.\n", "des": "Provides the Equinox framework launch API."}
{"index": 650, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: pb\n\nClasses and Interfaces: \nClass AddApplicationHomeSubClusterRequestPBImpl; // Protocol buffer based implementation of AddApplicationHomeSubClusterRequest.\nClass AddApplicationHomeSubClusterResponsePBImpl; // Protocol buffer based implementation of AddApplicationHomeSubClusterResponse.\nClass ApplicationHomeSubClusterPBImpl; // Protocol buffer based implementation of ApplicationHomeSubCluster.\nClass DeleteApplicationHomeSubClusterRequestPBImpl; // Protocol buffer based implementation of DeleteApplicationHomeSubClusterRequest.\nClass DeleteApplicationHomeSubClusterResponsePBImpl; // Protocol buffer based implementation of DeleteApplicationHomeSubClusterResponse.\nClass GetApplicationHomeSubClusterRequestPBImpl; // Protocol buffer based implementation of GetApplicationHomeSubClusterRequest.\nClass GetApplicationHomeSubClusterResponsePBImpl; // Protocol buffer based implementation of GetApplicationHomeSubClusterResponse.\nClass GetApplicationsHomeSubClusterRequestPBImpl; // Protocol buffer based implementation of GetApplicationsHomeSubClusterRequest.\nClass GetApplicationsHomeSubClusterResponsePBImpl; // Protocol buffer based implementation of GetApplicationsHomeSubClusterResponse.\nClass GetSubClusterInfoRequestPBImpl; // Protocol buffer based implementation of GetSubClusterInfoRequest.\nClass GetSubClusterInfoResponsePBImpl; // Protocol buffer based implementation of GetSubClusterInfoResponse.\nClass GetSubClusterPoliciesConfigurationsRequestPBImpl; // Protocol buffer based implementation of GetSubClusterPoliciesConfigurationsRequest.\nClass GetSubClusterPoliciesConfigurationsResponsePBImpl; // Protocol buffer based implementation of GetSubClusterPoliciesConfigurationsResponse.\nClass GetSubClusterPolicyConfigurationRequestPBImpl; // Protocol buffer based implementation of GetSubClusterPolicyConfigurationRequest.\nClass GetSubClusterPolicyConfigurationResponsePBImpl; // Protocol buffer based implementation of GetSubClusterPolicyConfigurationResponse.\nClass GetSubClustersInfoRequestPBImpl; // Protocol buffer based implementation of GetSubClustersInfoRequest.\nClass GetSubClustersInfoResponsePBImpl; // Protocol buffer based implementation of GetSubClustersInfoResponse.\nClass SetSubClusterPolicyConfigurationRequestPBImpl; // Protocol buffer based implementation of SetSubClusterPolicyConfigurationRequest.\nClass SetSubClusterPolicyConfigurationResponsePBImpl; // Protocol buffer based implementation of SetSubClusterPolicyConfigurationResponse.\nClass SubClusterDeregisterRequestPBImpl; // Protocol buffer based implementation of SubClusterDeregisterRequest.\nClass SubClusterDeregisterResponsePBImpl; // Protocol buffer based implementation of SubClusterDeregisterResponse.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1869, "repo": "spring-security-cas-6.1.2", "code": "Package: authentication\n\nClasses and Interfaces: \npublic interface ServiceAuthenticationDetails extends Serializable; // In order for the CasAuthenticationProvider to provide the correct service url to authenticate the ticket, the returned value of Authentication.getDetails() should implement this interface when tickets can be sent to any URL rather than only ServiceProperties.getService().\npublic class ServiceAuthenticationDetailsSource extends Object implements org.springframework.security.authentication.AuthenticationDetailsSource<jakarta.servlet.http.HttpServletRequest,ServiceAuthenticationDetails>; // The AuthenticationDetailsSource that is set on the CasAuthenticationFilter should return a value that implements ServiceAuthenticationDetails if the application needs to authenticate dynamic service urls.\n", "des": "Authentication processing mechanisms which respond to the submission of authentication credentials using CAS."}
{"index": 2764, "repo": "spring-beans-6.0.11", "code": "Package: propertyeditors\n\nClasses and Interfaces: \npublic class ByteArrayPropertyEditor extends PropertyEditorSupport; // Editor for byte arrays.\npublic class CharacterEditor extends PropertyEditorSupport; // Editor for a Character, to populate a property of type Character or char from a String value.\npublic class CharArrayPropertyEditor extends PropertyEditorSupport; // Editor for char arrays.\npublic class CharsetEditor extends PropertyEditorSupport; // Editor for java.nio.charset.Charset, translating charset String representations into Charset objects and back.\npublic class ClassArrayEditor extends PropertyEditorSupport; // Property editor for an array of Classes, to enable the direct population of a Class[] property without having to use a String class name property as bridge.\npublic class ClassEditor extends PropertyEditorSupport; // Property editor for java.lang.Class, to enable the direct population of a Class property without recourse to having to use a String class name property as bridge.\npublic class CurrencyEditor extends PropertyEditorSupport; // Editor for java.util.Currency, translating currency codes into Currency objects.\npublic class CustomBooleanEditor extends PropertyEditorSupport; // Property editor for Boolean/boolean properties.\npublic class CustomCollectionEditor extends PropertyEditorSupport; // Property editor for Collections, converting any source Collection to a given target Collection type.\npublic class CustomDateEditor extends PropertyEditorSupport; // Property editor for java.util.Date, supporting a custom java.text.DateFormat.\npublic class CustomMapEditor extends PropertyEditorSupport; // Property editor for Maps, converting any source Map to a given target Map type.\npublic class CustomNumberEditor extends PropertyEditorSupport; // Property editor for any Number subclass such as Short, Integer, Long, BigInteger, Float, Double, BigDecimal.\npublic class FileEditor extends PropertyEditorSupport; // Editor for java.io.File, to directly populate a File property from a Spring resource location.\npublic class InputSourceEditor extends PropertyEditorSupport; // Editor for org.xml.sax.InputSource, converting from a Spring resource location String to a SAX InputSource object.\npublic class InputStreamEditor extends PropertyEditorSupport; // One-way PropertyEditor which can convert from a text String to a java.io.InputStream, interpreting the given String as a Spring resource location (e.g.\npublic class LocaleEditor extends PropertyEditorSupport; // Editor for java.util.Locale, to directly populate a Locale property.\n", "des": "Properties editors used to convert from String values to object types such as java.util.Properties."}
{"index": 649, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: records\n\nClasses and Interfaces: \nClass AddApplicationHomeSubClusterRequest; // The request sent by the Router to Federation state store to map the home subcluster of a newly submitted application.\nClass AddApplicationHomeSubClusterResponse; // AddApplicationHomeSubClusterResponse contains the answer from the FederationApplicationHomeSubClusterStore to a request to insert a newly generated applicationId and its owner.\nClass ApplicationHomeSubCluster; // ApplicationHomeSubCluster is a report of the runtime information of the application that is running in the federated cluster.\nClass DeleteApplicationHomeSubClusterRequest; // The request to Federation state store to delete the mapping of home subcluster of a submitted application.\nClass DeleteApplicationHomeSubClusterResponse; // DeleteApplicationHomeSubClusterResponse contains the answer from the FederationApplicationHomeSubClusterStore to a request to delete the mapping of home subcluster of a submitted application.\nClass GetApplicationHomeSubClusterRequest; // Request class to obtain the home sub-cluster for the specified ApplicationId.\nClass GetApplicationHomeSubClusterResponse; // The response sent by Federation state store to a query for the home subcluster of a newly submitted application.\nClass GetApplicationsHomeSubClusterRequest; // Request class to obtain the home sub-cluster mapping of all active applications.\nClass GetApplicationsHomeSubClusterResponse; // The response sent by Federation state store to a query for the home subcluster of all submitted applications.\nClass GetSubClusterInfoRequest; // Request class to obtain information about a sub-cluster identified by its SubClusterId.\nClass GetSubClusterInfoResponse; // Response to a query with SubClusterInfo about a sub-cluster.\nClass GetSubClusterPoliciesConfigurationsRequest; // GetSubClusterPoliciesConfigurationsRequest is a request to the FederationPolicyStore to obtain all policy configurations.\nClass GetSubClusterPoliciesConfigurationsResponse; // GetSubClusterPolicyConfigurationResponse contains the answer from the FederationPolicyStore to a request to get all the policies configured in the system via a SubClusterPolicyConfiguration.\nClass GetSubClusterPolicyConfigurationRequest; // GetSubClusterPolicyConfigurationRequest is a request to the FederationPolicyStore to get the configuration of a policy for a given queue.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 622, "repo": "freemarker-2.3.32", "code": "Package: beans\n\nClasses and Interfaces: \nInterface ClassMemberAccessPolicy; // Returned by MemberAccessPolicy.forClass(Class).\nInterface MemberAccessPolicy; // Implement this to restrict what class members (methods, fields, constructors) are accessible from templates.\nInterface MethodAppearanceFineTuner; // Used for customizing how the methods are visible from templates, via BeansWrapper.setMethodAppearanceFineTuner(MethodAppearanceFineTuner).\nInterface SingletonCustomizer; // Marker interface useful when used together with MethodAppearanceFineTuner and such customizer objects, to indicate that it doesn't contain reference to the ObjectWrapper (so beware with non-static inner classes) and can be and should be used in call introspection cache keys.\nClass ArrayModel; // A class that will wrap an arbitrary array into TemplateCollectionModel and TemplateSequenceModel interfaces.\nClass BeanModel; // A class that will wrap an arbitrary object into TemplateHashModel interface allowing calls to arbitrary property getters and invocation of accessible methods on the object from a template using the object.foo to access properties and object.bar(arg1, arg2) to invoke methods on it.\nClass BeansModelCache;\nClass BeansWrapper; // ObjectWrapper that is able to expose the Java API of arbitrary Java objects.\nClass BeansWrapper.MethodAppearanceDecision; // Used for MethodAppearanceFineTuner.process(freemarker.ext.beans.BeansWrapper.MethodAppearanceDecisionInput, freemarker.ext.beans.BeansWrapper.MethodAppearanceDecision) to store the results; see there.\nClass BeansWrapper.MethodAppearanceDecisionInput; // Used for MethodAppearanceFineTuner.process(freemarker.ext.beans.BeansWrapper.MethodAppearanceDecisionInput, freemarker.ext.beans.BeansWrapper.MethodAppearanceDecision) as input parameter; see there.\nClass BeansWrapperBuilder; // Gets/creates a BeansWrapper singleton instance that's already configured as specified in the properties of this object; this is recommended over using the BeansWrapper constructors.\nClass BeansWrapperConfiguration; // Holds BeansWrapper configuration settings and defines their defaults.\n", "des": "The default object wrapper of FreeMarker uses this to expose Java Beans and POJO-s to templates."}
{"index": 234, "repo": "nutch-2.4", "code": "Package: crawls\n\nClasses and Interfaces: \nClass CrawlPanel;\nClass CrawlsPage; // This page is for crawls management\n", "des": "Contains crawl page classes for Web UI"}
{"index": 3433, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface BasicProxyFactory; // A proxy factory for \"basic proxy\" generation.\nInterface BytecodeEnhancementMetadata; // Encapsulates bytecode enhancement information about a particular entity.\nInterface BytecodeProvider; // Contract for providers of bytecode services to Hibernate.\nInterface ClassTransformer; // A persistence provider provides an instance of this interface to the PersistenceUnitInfo.addTransformer method.\nInterface ProxyFactoryFactory; // An interface for factories of proxy factory instances.\nInterface ReflectionOptimizer; // Represents reflection optimization for a particular class.\nInterface ReflectionOptimizer.AccessOptimizer; // Represents optimized entity property access.\nInterface ReflectionOptimizer.InstantiationOptimizer; // Represents optimized entity instantiation.\nClass ByteCodeHelper; // A helper for reading byte code from various input sources.\nClass ClassLoadingStrategyHelper;\nClass InstrumentedClassLoader; // A specialized ClassLoader which performs bytecode enhancement on class definitions as they are loaded into the ClassLoader scope.\nClass NotInstrumentedException; // Indicates a condition where an instrumented/enhanced class was expected, but the class was not instrumented/enhanced.\n", "des": "Package defining bytecode code enhancement (instrumentation) support."}
{"index": 123, "repo": "ignite-core-2.15.0", "code": "Package: metric\n\nSub Packages: \npackage metric.jmx; // Contains JMX based implementation of MetricExporterSpi.\npackage metric.log; // Contains push to log implementation of MetricExporterSpi.\npackage metric.noop; // Contains no-op implementation of MetricExporterSpi.\n\nClasses and Interfaces: \nInterface BooleanMetric; // Interface for the metrics that holds boolean primitive.\nInterface DoubleMetric; // Interface for the metrics that holds double primitive.\nInterface HistogramMetric; // Histogram metric calculates counts of measurements that gets into each bounds interval.\nInterface IntMetric; // Interface for the metrics that holds int primitive.\nInterface LongMetric; // Interface for the metrics that holds long primitive.\nInterface Metric; // Base interface for all metrics.\nInterface MetricExporterSpi; // Exporter of metric information to the external recipient.\nInterface ObjectMetric<T>; // Interface for the metrics that holds typed value.\nInterface ReadOnlyMetricManager; // Read only metric manager.\nInterface ReadOnlyMetricRegistry; // Read only metric registry.\n", "des": "Contains common classes and interfaces for metric SPI implementations."}
{"index": 1591, "repo": "spring-websocket-6.0.11", "code": "Package: standard\n\nClasses and Interfaces: \npublic class AnnotatedEndpointConnectionManager extends ConnectionManagerSupport implements org.springframework.beans.factory.BeanFactoryAware; // WebSocket connection manager that connects to the server via WebSocketContainer and handles the session with an @ClientEndpoint endpoint.\npublic class EndpointConnectionManager extends ConnectionManagerSupport implements org.springframework.beans.factory.BeanFactoryAware; // WebSocket connection manager that connects to the server via WebSocketContainer and handles the session with an Endpoint.\npublic class StandardWebSocketClient extends AbstractWebSocketClient; // A WebSocketClient based on the standard Jakarta WebSocket API.\npublic class WebSocketContainerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<WebSocketContainer>; // A FactoryBean for creating and configuring a WebSocketContainer through Spring XML configuration.\n", "des": "Client-side classes for use with standard Jakarta WebSocket endpoints."}
{"index": 617, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: tracker\n\nClasses and Interfaces: \nInterface BundleTrackerCustomizer<T>; // The BundleTrackerCustomizer interface allows a BundleTracker to customize the Bundles that are tracked.\nInterface ServiceTrackerCustomizer<S,T>; // The ServiceTrackerCustomizer interface allows a ServiceTracker to customize the service objects that are tracked.\nClass BundleTracker<T>; // The BundleTracker class simplifies tracking bundles much like the ServiceTracker simplifies tracking services.\nClass ServiceTracker<S,T>; // The ServiceTracker class simplifies using services from the Framework's service registry.\n", "des": "Tracker Package Version 1.5."}
{"index": 3546, "repo": "opennlp-tools-2.2.0", "code": "Package: util\n\nSub Packages: \npackage util.ext; // Package containing extension loading code.\npackage util.featuregen; // This package contains classes for generating sequence features.\n\nClasses and Interfaces: \nInterface BeamSearchContextGenerator<T>; // Interface for context generators used with a sequence beam search.\nInterface InputStreamFactory; // Allows repeated reads through a stream for certain model building types.\nInterface ObjectStream<T>; // Reads objects from a stream.\nInterface ResetableIterator<E>; // This interface makes an Iterator resettable.\nInterface SequenceCodec<T>; // A codec for sequences of type SequenceCodec.\nInterface SequenceValidator<T>;\nClass AbstractEventStream<T>; // A base ObjectStream implementation for events.\nClass AbstractObjectStream<T>; // A base ObjectStream implementation.\nClass BaseToolFactory; // Base class for all tool factories.\nClass Cache<K,​V>; // Provides fixed size, pre-allocated, least recently used replacement cache.\nClass CollectionObjectStream<E>; // An ObjectStream implementation that works on a Collection of CollectionObjectStream as source for elements.\nClass DownloadUtil; // This class facilitates the downloading of pretrained OpenNLP models.\nClass EventTraceStream;\nClass FilterObjectStream<S,​T>; // Abstract base class for filtering streams.\nClass MarkableFileInputStreamFactory; // A factory that creates MarkableFileInputStream from a File\nClass MutableInt; // This is a non-thread safe mutable int.\nClass ObjectStreamUtils;\nClass ParagraphStream; // A FilterObjectStream which merges text lines into paragraphs.\nClass PlainTextByLineStream; // Reads a plain text file and returns each line as a String object.\nClass ReverseListIterator<T>; // An iterator for a list which returns values in the opposite order as the typical list iterator.\nClass Sequence; // Represents a weighted sequence of outcomes.\nClass Span; // Class for storing start and end integer offsets.\nClass StringList; // A StringList is an immutable list of Strings.\nClass StringUtil;\nClass TokenTag;\nClass TrainingParameters; // Declares and handles default parameters used for or during training models.\nClass Version; // The Version class represents the OpenNLP Tools library version.\nClass XmlUtil;\n", "des": "Package containing utility data structures and algorithms used by multiple other packages."}
{"index": 2476, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: jersey\n\nClasses and Interfaces: \n@AutoConfiguration(after={MetricsAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({org.glassfish.jersey.server.ResourceConfig.class,io.micrometer.core.instrument.binder.jersey.server.MetricsApplicationEventListener.class}) @ConditionalOnBean({io.micrometer.core.instrument.MeterRegistry.class,org.glassfish.jersey.server.ResourceConfig.class}) @EnableConfigurationProperties(MetricsProperties.class) public class JerseyServerMetricsAutoConfiguration extends Object; // Auto-configuration for Jersey server instrumentation.\n", "des": "Auto-configuration for Jersey actuator metrics."}
{"index": 3706, "repo": "solr-core-9.3.0", "code": "Package: servlet\n\nSub Packages: \npackage servlet.cache; // Caching related classes used in the Solr HTTP API\n\nClasses and Interfaces: \nInterface PathExcluder; // Denotes an object, usually a servlet that denies access to some paths based on the supplied patterns.\nInterface SolrDispatchFilter.HttpSolrCallFactory; // internal API\nClass CoordinatorHttpSolrCall;\nClass CoordinatorHttpSolrCall.Factory;\nClass CoreContainerProvider; // A service that can provide access to solr cores.\nClass DirectSolrConnection; // DirectSolrConnection provides an interface to Solr that is similar to the HTTP interface, but does not require an HTTP connection.\nClass HttpSolrCall; // This class represents a call made to Solr\nClass LoadAdminUiServlet; // A simple servlet to load the Solr Admin UI\nClass QueryRateLimiter; // Implementation of RequestRateLimiter specific to query request types.\nClass RateLimitManager; // This class is responsible for managing rate limiting per request type.\nClass RateLimitManager.Builder;\nClass RedirectServlet; // A Simple redirection servlet to help us deprecate old UI elements\nClass RequestRateLimiter; // Handles rate limiting for a specific request type.\nClass ResponseUtils; // Response helper methods.\nClass ServletInputStreamWrapper; // Provides a convenient extension of the ServletInputStream class that can be subclassed by developers wishing to adapt the behavior of a Stream.\nClass ServletOutputStreamWrapper; // Provides a convenient extension of the ServletOutputStream class that can be subclassed by developers wishing to adapt the behavior of a Stream.\nClass ServletUtils; // Various Util methods for interaction on servlet level, i.e.\nClass ServletUtils.ClosedServletInputStream;\nClass ServletUtils.ClosedServletOutputStream;\nClass SolrDispatchFilter; // This filter looks at the incoming URL maps them to handlers defined in solrconfig.xml\nClass SolrRequestParsers;\nEnum SolrDispatchFilter.Action; // Enum to define action that needs to be processed.\nClass ExceptionWhileTracing;\nClass SolrAuthenticationException;\n", "des": "Servlet related classes for powering the Solr HTTP API"}
{"index": 68, "repo": "ignite-core-2.15.0", "code": "Package: cache\n\nClasses and Interfaces: \nInterface CacheCheckpointSpiMBean; // Management bean that provides general administrative and configuration information about cache checkpoint SPI.\nClass CacheCheckpointSpi; // This class defines cache-based implementation for checkpoint SPI.\n", "des": "Contains cache-based implementation for checkpoint SPI."}
{"index": 577, "repo": "commons-collections-3.2.2", "code": "Package: buffer\n\nClasses and Interfaces: \nClass AbstractBufferDecorator; // Decorates another Buffer to provide additional behaviour.\nClass BlockingBuffer; // Decorates another Buffer to make BlockingBuffer.get() and BlockingBuffer.remove() block when the Buffer is empty.\nClass BoundedBuffer; // Decorates another Buffer to ensure a fixed maximum size.\nClass BoundedFifoBuffer; // The BoundedFifoBuffer is a very efficient implementation of Buffer that is of a fixed size.\nClass CircularFifoBuffer; // CircularFifoBuffer is a first in first out buffer with a fixed size that replaces its oldest element if full.\nClass PredicatedBuffer; // Decorates another Buffer to validate that additions match a specified predicate.\nClass PriorityBuffer; // Binary heap implementation of Buffer that provides for removal based on Comparator ordering.\nClass SynchronizedBuffer; // Decorates another Buffer to synchronize its behaviour for a multi-threaded environment.\nClass TransformedBuffer; // Decorates another Buffer to transform objects that are added.\nClass TypedBuffer; // Decorates another Buffer to validate that elements added are of a specific type.\nClass UnboundedFifoBuffer; // UnboundedFifoBuffer is a very efficient implementation of Buffer that can grow to any size.\nClass UnmodifiableBuffer; // Decorates another Buffer to ensure it can't be altered.\n", "des": "This package contains implementations of the Buffer interface."}
{"index": 1503, "repo": "spring-context-6.0.11", "code": "Package: concurrent\n\nClasses and Interfaces: \npublic class ConcurrentMapCache extends AbstractValueAdaptingCache; // Simple Cache implementation based on the core JDK java.util.concurrent package.\npublic class ConcurrentMapCacheFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ConcurrentMapCache>, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // FactoryBean for easy configuration of a ConcurrentMapCache when used within a Spring container.\npublic class ConcurrentMapCacheManager extends Object implements CacheManager, org.springframework.beans.factory.BeanClassLoaderAware; // CacheManager implementation that lazily builds ConcurrentMapCache instances for each ConcurrentMapCacheManager.getCache(java.lang.String) request.\n", "des": "Implementation package for java.util.concurrent based caches."}
{"index": 2296, "repo": "spring-boot-3.1.1", "code": "Package: event\n\nClasses and Interfaces: \npublic class ApplicationContextInitializedEvent extends SpringApplicationEvent; // Event published when a SpringApplication is starting up and the ApplicationContext is prepared and ApplicationContextInitializers have been called but before any bean definitions are loaded.\npublic class ApplicationEnvironmentPreparedEvent extends SpringApplicationEvent; // Event published when a SpringApplication is starting up and the Environment is first available for inspection and modification.\npublic class ApplicationFailedEvent extends SpringApplicationEvent; // Event published by a SpringApplication when it fails to start.\npublic class ApplicationPreparedEvent extends SpringApplicationEvent; // Event published as when a SpringApplication is starting up and the ApplicationContext is fully prepared but not refreshed.\npublic class ApplicationReadyEvent extends SpringApplicationEvent; // Event published as late as conceivably possible to indicate that the application is ready to service requests.\npublic class ApplicationStartedEvent extends SpringApplicationEvent; // Event published once the application context has been refreshed but before any application and command line runners have been called.\npublic class ApplicationStartingEvent extends SpringApplicationEvent; // Event published as early as conceivably possible as soon as a SpringApplication has been started - before the Environment or ApplicationContext is available, but after the ApplicationListeners have been registered.\npublic abstract class SpringApplicationEvent extends org.springframework.context.ApplicationEvent; // Base class for ApplicationEvent related to a SpringApplication.\n", "des": "ApplicationEvents triggered by Spring Boot."}
{"index": 3715, "repo": "solr-core-9.3.0", "code": "Package: processor\n\nClasses and Interfaces: \nInterface DistributingUpdateProcessorFactory; // A marker interface for denoting that a factory is responsible for handling distributed communication of updates across a SolrCloud cluster.\nInterface FieldMutatingUpdateProcessor.FieldNameSelector; // Interface for identifying which fields should be mutated\nInterface UpdateRequestProcessorFactory.RunAlways; // A marker interface for UpdateRequestProcessorFactory implementations indicating that the factory should be used even if the update.distrib parameter would otherwise cause it to not be run.\nClass AbstractDefaultValueUpdateProcessorFactory; // Base class that can be extended by any UpdateRequestProcessorFactory designed to add a default value to the document in an AddUpdateCommand when that field is not already specified.\nClass AddSchemaFieldsUpdateProcessorFactory; // This processor will dynamically add fields to the schema if an input document contains one or more fields that don't match any field or dynamic field in the schema.\nClass AllValuesOrNoneFieldMutatingUpdateProcessor; // Abstract subclass of FieldMutatingUpdateProcessor for implementing UpdateProcessors that will mutate all individual values of a selected field independently.\nClass AtomicUpdateDocumentMerger;\nClass AtomicUpdateProcessorFactory; // An update processor that will convert conventional field-value document to atomic update document\nClass ClassificationUpdateProcessorFactory; // This class implements an UpdateProcessorFactory for the Classification Update Processor.\nClass ClassificationUpdateProcessorParams;\nClass CloneFieldUpdateProcessorFactory; // Clones the values found in any matching source field into a configured dest field.\nClass ConcatFieldUpdateProcessorFactory; // Concatenates multiple values for fields matching the specified conditions using a configurable delimiter which defaults to \", \".\nClass CountFieldValuesUpdateProcessorFactory; // Replaces any list of values for a field matching the specified conditions with the count of the number of values for that field.\nClass DefaultValueUpdateProcessorFactory; // An update processor that adds a constant default value to any document being added that does not already have a value in the specified field.\nClass DistributedUpdateProcessor;\nClass DistributedUpdateProcessor.LeaderRequestReplicationTracker;\nClass DistributedUpdateProcessor.RollupRequestReplicationTracker;\nClass DistributedUpdateProcessorFactory; // Factory for DistributedUpdateProcessor.\nClass DistributedZkUpdateProcessor;\nClass DocBasedVersionConstraintsProcessor;\n", "des": "UpdateRequestProcessorFactory APIs and implementations for use in UpdateRequestProcessorChains"}
{"index": 2028, "repo": "spring-messaging-6.0.11", "code": "Package: reactive\n\nClasses and Interfaces: \npublic abstract class AbstractNamedValueMethodArgumentResolver extends Object implements SyncHandlerMethodArgumentResolver; // Abstract base class to resolve method arguments from a named value, e.g.\nprotected static class AbstractNamedValueMethodArgumentResolver.NamedValueInfo extends Object; // Represents a named value declaration.\npublic class ContinuationHandlerMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // No-op resolver for method arguments of type Continuation.\npublic class DestinationVariableMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver; // Resolve for @DestinationVariable method parameters.\npublic class HeaderMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver; // Resolver for @Header arguments.\npublic class HeadersMethodArgumentResolver extends Object implements SyncHandlerMethodArgumentResolver; // Argument resolver for headers.\npublic class MessageMappingMessageHandler extends AbstractMethodMessageHandler<CompositeMessageCondition> implements org.springframework.context.EmbeddedValueResolverAware; // Extension of AbstractMethodMessageHandler for reactive, non-blocking handling of messages via @MessageMapping methods.\npublic class PayloadMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // A resolver to extract and decode the payload of a message using a Decoder, where the payload is expected to be a Publisher of DataBuffer.\n", "des": "Support classes for working with annotated message-handling methods with non-blocking, reactive contracts."}
{"index": 500, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: resourcehints\n\nClasses and Interfaces: \nInterface ResourceHintsOptions; // Options that are used to control configuration of the remote environment.\nClass ResourceHint; // Provides a definition of a resource hint known to the SDK.\nClass ResourceHints; // Pipeline authors can use resource hints to provide additional information to runners about the desired aspects of the execution environment.\nClass ResourceHintsOptions.EmptyListDefault;\nClass ResourceHintsOptions.Options; // Register the ResourceHintsOptions.\n", "des": "Defines ResourceHints for configuring pipeline execution."}
{"index": 1580, "repo": "spring-security-oauth2-client-6.1.2", "code": "Package: authentication\n\nClasses and Interfaces: \npublic class OidcAuthorizationCodeAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider; // An implementation of an AuthenticationProvider for the OpenID Connect Core 1.0 Authorization Code Grant Flow.\npublic class OidcAuthorizationCodeReactiveAuthenticationManager extends Object implements org.springframework.security.authentication.ReactiveAuthenticationManager; // An implementation of an AuthenticationProvider for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.\npublic final class OidcIdTokenDecoderFactory extends Object implements org.springframework.security.oauth2.jwt.JwtDecoderFactory<ClientRegistration>; // A factory that provides a JwtDecoder used for OidcIdToken signature verification.\npublic final class OidcIdTokenValidator extends Object implements org.springframework.security.oauth2.core.OAuth2TokenValidator<org.springframework.security.oauth2.jwt.Jwt>; // An OAuth2TokenValidator responsible for validating the claims in an ID Token.\npublic final class ReactiveOidcIdTokenDecoderFactory extends Object implements org.springframework.security.oauth2.jwt.ReactiveJwtDecoderFactory<ClientRegistration>; // A factory that provides a ReactiveJwtDecoder used for OidcIdToken signature verification.\n", "des": "Support classes and interfaces for authenticating and authorizing a client with an OpenID Connect 1.0 Provider using a specific authorization grant flow."}
{"index": 3721, "repo": "solr-core-9.3.0", "code": "Package: plugin\n\nClasses and Interfaces: \nInterface MapInitializedPlugin; // A plugin that can be initialized with a Map<String,String>\nInterface NamedListInitializedPlugin; // A plugin that can be initialized with a NamedList\nInterface PluginInfoInitialized; // A plugin that can be initialized with a PluginInfo\nInterface SolrCoreAware;\nClass AbstractPluginLoader<T>; // An abstract super class that manages standard solr-style plugin configuration.\nClass MapPluginLoader<T extends MapInitializedPlugin>;\nClass NamedListPluginLoader<T extends NamedListInitializedPlugin>;\n", "des": "Common APIs related to implementing Solr plugins"}
{"index": 3393, "repo": "commons-imaging-1.0-alpha3", "code": "Package: ico\n\nClasses and Interfaces: \nClass IcoImageParser;\nClass IcoImagingParameters; // Ico format parameters.\n", "des": "The ICO/CUR image formats."}
{"index": 2569, "repo": "pulsar-common-3.0.0", "code": "Package: collections\n\nClasses and Interfaces: \npublic class BitSetRecyclable extends Object implements Cloneable, Serializable; // This this copy of BitSet.\npublic class ConcurrentBitSet extends BitSet; // Safe multithreaded version of BitSet.\npublic class ConcurrentBitSetRecyclable extends ConcurrentBitSet; // Safe multithreaded version of BitSet and leverage netty recycler.\npublic class ConcurrentLongHashMap<V> extends Object; // Map from long to an Object.\npublic static class ConcurrentLongHashMap.Builder<T> extends Object; // Builder of ConcurrentLongHashMap.\npublic static interface ConcurrentLongHashMap.EntryProcessor<V>; // Processor for one key-value entry, where the key is long.\npublic class ConcurrentLongLongPairHashMap extends Object; // Concurrent hash map where both keys and values are composed of pairs of longs.\npublic static interface ConcurrentLongLongPairHashMap.BiConsumerLongPair; // A BiConsumer Long pair.\npublic static class ConcurrentLongLongPairHashMap.Builder extends Object; // Builder of ConcurrentLongLongPairHashMap.\npublic static interface ConcurrentLongLongPairHashMap.LongLongPairFunction; // A Long pair function.\npublic static interface ConcurrentLongLongPairHashMap.LongLongPairPredicate; // A Long pair predicate.\npublic static class ConcurrentLongLongPairHashMap.LongPair extends Object implements Comparable<ConcurrentLongLongPairHashMap.LongPair>; // A pair of long values.\npublic class ConcurrentLongPairSet extends Object implements LongPairSet; // Concurrent hash set where values are composed of pairs of longs.\npublic static class ConcurrentLongPairSet.Builder extends Object; // Builder of ConcurrentLongPairSet.\npublic static interface ConcurrentLongPairSet.ConsumerLong; // Represents a function that accepts an object of the LongPair type.\npublic static class ConcurrentLongPairSet.LongPair extends Object implements Comparable<ConcurrentLongPairSet.LongPair>; // Class representing two long values.\npublic static interface ConcurrentLongPairSet.LongPairConsumer; // Represents a function that accepts two long arguments.\npublic class ConcurrentOpenHashMap<K,V> extends Object; // Concurrent hash map.\npublic static class ConcurrentOpenHashMap.Builder<K,V> extends Object; // Builder of ConcurrentOpenHashMap.\npublic class ConcurrentOpenHashSet<V> extends Object; // Concurrent hash set.\n", "des": "Set of different collections working in the concurrent environment."}
{"index": 2625, "repo": "shiro-web-2.0.0-alpha-2", "code": "Package: filter\n\nSub Packages: \npackage filter.authc; // Servlet Filter implementations specific to controlling access based on a subject's authentication status, or those that can execute authentications (log-ins) directly.\npackage filter.authz; // Servlet Filter implementations that perform authorization (access control) checks based on the Subject's abilities (for example, role or permission checks).\npackage filter.mgt; // The filter 'mgt' (management) package contains components used in managing Filters that are available for filter chain construction, the filter chains themselves, as well as resolving filter chains based by name.\n\nClasses and Interfaces: \npublic abstract class AccessControlFilter extends PathMatchingFilter; // Superclass for any filter that controls access to a resource and may redirect the user to the login page if they are not authenticated.\npublic class InvalidRequestFilter extends AccessControlFilter; // A request filter that blocks malicious requests.\npublic interface PathConfigProcessor; // A PathConfigProcessor processes configuration entries on a per path (url) basis.\npublic abstract class PathMatchingFilter extends AdviceFilter implements PathConfigProcessor; // Base class for Filters that will process only specified paths and allow all others to pass through.\n", "des": "Base package supporting all Servlet Filter implementations used to control access to web pages and URL resources."}
{"index": 1179, "repo": "commons-math3-3.6.1", "code": "Package: sofm\n\nSub Packages: \npackage sofm.util; // Miscellaneous utilities.\n\nClasses and Interfaces: \nInterface LearningFactorFunction; // Provides the learning rate as a function of the number of calls already performed during the learning task.\nInterface NeighbourhoodSizeFunction; // Provides the network neighbourhood's size as a function of the number of calls already performed during the learning task.\nClass KohonenTrainingTask; // Trainer for Kohonen's Self-Organizing Map.\nClass KohonenUpdateAction; // Update formula for Kohonen's Self-Organizing Map.\nClass LearningFactorFunctionFactory; // Factory for creating instances of LearningFactorFunction.\nClass NeighbourhoodSizeFunctionFactory; // Factory for creating instances of NeighbourhoodSizeFunction.\n", "des": "Self Organizing Feature Map."}
{"index": 1664, "repo": "jena-core-4.9.0", "code": "Package: util\n\nSub Packages: \npackage util.iterator; // A package for defining useful iterators and iterator operations, including concatenation, mapping, filtering, empty and singleton iterators, iterator wrappers, and the ExtendedIterator class used in many places in Jena.\n\nClasses and Interfaces: \npublic abstract class CharEncoding extends Object; // This class provides a number of static methods which interact with java.nio.charset.Charset to analyze and transform the strings identifying character encodings.\npublic class CollectionFactory extends Object; // CollectionFactory - a central place for allocating sets and maps, mostly so that it's easy to plug in new implementations (eg trove).\npublic interface FileManager;\npublic class FileManagerImpl extends Object implements FileManager; // FileManager A FileManager provides access to named file-like resources by opening InputStreams to things in the filing system, by URL (http: and file:) and found by the classloader.\npublic class FileUtils extends Object;\npublic class IteratorCollection extends Object;\npublic class JenaXMLInput extends Object; // Create XML input methods.\npublic class LocationMapper extends Object; // Alternative locations for URIs.\npublic interface Locator; // Interface to things that open streams by some string reference\n@Deprecated public class LocatorClassLoader extends Object implements Locator;\n@Deprecated public class LocatorFile extends Object implements Locator;\n@Deprecated public class LocatorURL extends Object implements Locator;\n@Deprecated public class LocatorZip extends Object implements Locator;\npublic abstract class ModelCollector extends Object implements IdentityFinishCollector.UnorderedIdentityFinishCollector<Model,Model>;\npublic static class ModelCollector.ConcurrentModelCollector extends ModelCollector implements IdentityFinishCollector.ConcurrentUnorderedIdentityFinishCollector<Model,Model>;\npublic static class ModelCollector.IntersectionModelCollector extends ModelCollector;\npublic static class ModelCollector.UnionModelCollector extends ModelCollector;\npublic class MonitorGraph extends WrappedGraph; // Graph wrapper which provides normal access to an underlying graph but also maintains a snapshot of the triples it was last known to contain.\npublic class MonitorModel extends ModelCom; // Model wrapper which provides normal access to an underlying model but also maintains a snapshot of the triples it was last known to contain.\n", "des": "Miscellaneous collection of utility classes."}
{"index": 3491, "repo": "poi-5.2.3", "code": "Package: eventusermodel\n\nClasses and Interfaces: \nInterface HSSFListener; // Interface for use with the HSSFRequest and HSSFEventFactory.\nClass AbortableHSSFListener; // Abstract class for use with the HSSFRequest and HSSFEventFactory, which allows for the halting of processing.\nClass EventWorkbookBuilder; // When working with the EventUserModel, if you want to process formulas, you need an instance of InternalWorkbook to pass to a HSSFWorkbook, to finally give to HSSFFormulaParser, and this will build you stub ones.\nClass EventWorkbookBuilder.SheetRecordCollectingListener; // A wrapping HSSFListener which will collect BoundSheetRecords and ExternSheetRecords as they go past, so you can create a Stub InternalWorkbook from them once required.\nClass FormatTrackingHSSFListener; // A proxy HSSFListener that keeps track of the document formatting records, and provides an easy way to look up the format strings used by cells from their ids.\nClass HSSFEventFactory; // Low level event based HSSF reader.\nClass HSSFRequest; // An HSSFRequest object should be constructed registering an instance or multiple instances of HSSFListener with each Record.sid you wish to listen for.\nClass MissingRecordAwareHSSFListener; // A HSSFListener which tracks rows and columns, and will trigger your HSSFListener for all rows and cells, even the ones that aren't actually stored in the file.\nClass HSSFUserException; // This exception is provided as a way for API users to throw exceptions from their event handling code.\n", "des": "HSSF eventmodel Package provides an event-based API for reading HSSF files."}
{"index": 1938, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: codec\n\nClasses and Interfaces: \n@AutoConfiguration(after=JacksonAutoConfiguration.class) @ConditionalOnClass({org.springframework.http.codec.CodecConfigurer.class,org.springframework.web.reactive.function.client.WebClient.class}) @EnableConfigurationProperties(CodecProperties.class) public class CodecsAutoConfiguration extends Object; // Auto-configuration for Encoders and Decoders.\n", "des": "Auto-configuration for HTTP codecs."}
{"index": 1485, "repo": "tribuo-core-4.3.1", "code": "Package: protos\n\nClasses and Interfaces: \npublic interface ProtoSerializable<T extends com.google.protobuf.Message>; // Interface for serializing an implementing object to the specified protobuf.\n@Retention(RUNTIME) @Target(TYPE) public @interface ProtoSerializableClass; // Mark a class as being ProtoSerializable and specify the class type used to serialize the \"serialized_data\".\n@Retention(RUNTIME) @Target(FIELD) public @interface ProtoSerializableField; // Annotation which denotes that a field should be part of the protobuf serialized representation.\n@Retention(RUNTIME) @Target(FIELD) public @interface ProtoSerializableKeysValuesField; // Annotation which denotes that the map field this is applied to is serialized as two repeated fields, one for keys and one for values.\n@Retention(RUNTIME) @Target(FIELD) public @interface ProtoSerializableMapField; // Annotation which denotes that a map field should be part of the protobuf serialized representation.\n@Retention(RUNTIME) @Target(FIELD) public @interface ProtoSerializableMapValuesField; // Annotation which denotes that the map field this is applied to is serialized as a list of values.\npublic final class ProtoUtil extends Object; // Utilities for working with Tribuo protobufs.\n", "des": "Classes which control the serialization of Tribuo objects to and from protocol buffers."}
{"index": 1800, "repo": "spring-aop-6.0.11", "code": "Package: aspectj\n\nSub Packages: \npackage aspectj.annotation; // Classes enabling AspectJ 5 @Annotated classes to be used in Spring AOP.\npackage aspectj.autoproxy; // Base classes enabling auto-proxying based on AspectJ.\n\nClasses and Interfaces: \npublic abstract class AbstractAspectJAdvice extends Object implements Advice, AspectJPrecedenceInformation, Serializable; // Base class for AOP Alliance Advice classes wrapping an AspectJ aspect or an AspectJ-annotated advice method.\npublic interface AspectInstanceFactory extends org.springframework.core.Ordered; // Interface implemented to provide an instance of an AspectJ aspect.\npublic class AspectJAdviceParameterNameDiscoverer extends Object implements org.springframework.core.ParameterNameDiscoverer; // ParameterNameDiscoverer implementation that tries to deduce parameter names for an advice method from the pointcut expression, returning, and throwing clauses.\npublic static class AspectJAdviceParameterNameDiscoverer.AmbiguousBindingException extends RuntimeException; // Thrown in response to an ambiguous binding being detected when trying to resolve a method's parameter names.\npublic class AspectJAfterAdvice extends AbstractAspectJAdvice implements MethodInterceptor, AfterAdvice, Serializable; // Spring AOP advice wrapping an AspectJ after advice method.\npublic class AspectJAfterReturningAdvice extends AbstractAspectJAdvice implements AfterReturningAdvice, AfterAdvice, Serializable; // Spring AOP advice wrapping an AspectJ after-returning advice method.\npublic class AspectJAfterThrowingAdvice extends AbstractAspectJAdvice implements MethodInterceptor, AfterAdvice, Serializable; // Spring AOP advice wrapping an AspectJ after-throwing advice method.\npublic abstract class AspectJAopUtils extends Object; // Utility methods for dealing with AspectJ advisors.\npublic class AspectJAroundAdvice extends AbstractAspectJAdvice implements MethodInterceptor, Serializable; // Spring AOP around advice (MethodInterceptor) that wraps an AspectJ advice method.\npublic class AspectJExpressionPointcut extends AbstractExpressionPointcut implements ClassFilter, IntroductionAwareMethodMatcher, org.springframework.beans.factory.BeanFactoryAware; // Spring Pointcut implementation that uses the AspectJ weaver to evaluate a pointcut expression.\n", "des": "AspectJ integration package."}
{"index": 1583, "repo": "spring-security-oauth2-client-6.1.2", "code": "Package: userinfo\n\nClasses and Interfaces: \npublic class DefaultOAuth2UserService extends Object implements OAuth2UserService<OAuth2UserRequest,org.springframework.security.oauth2.core.user.OAuth2User>; // An implementation of an OAuth2UserService that supports standard OAuth 2.0 Provider's.\npublic class DefaultReactiveOAuth2UserService extends Object implements ReactiveOAuth2UserService<OAuth2UserRequest,org.springframework.security.oauth2.core.user.OAuth2User>; // An implementation of an ReactiveOAuth2UserService that supports standard OAuth 2.0 Provider's.\npublic class DelegatingOAuth2UserService<R extends OAuth2UserRequest,U extends org.springframework.security.oauth2.core.user.OAuth2User> extends Object implements OAuth2UserService<R,U>; // An implementation of an OAuth2UserService that simply delegates to it's internal List of OAuth2UserService(s).\npublic class OAuth2UserRequest extends Object; // Represents a request the OAuth2UserService uses when initiating a request to the UserInfo Endpoint.\npublic class OAuth2UserRequestEntityConverter extends Object implements org.springframework.core.convert.converter.Converter<OAuth2UserRequest,org.springframework.http.RequestEntity<?>>; // A Converter that converts the provided OAuth2UserRequest to a RequestEntity representation of a request for the UserInfo Endpoint.\n@FunctionalInterface public interface OAuth2UserService<R extends OAuth2UserRequest,U extends org.springframework.security.oauth2.core.user.OAuth2User>; // Implementations of this interface are responsible for obtaining the user attributes of the End-User (Resource Owner) from the UserInfo Endpoint using the Access Token granted to the Client and returning an AuthenticatedPrincipal in the form of an OAuth2User.\n@FunctionalInterface public interface ReactiveOAuth2UserService<R extends OAuth2UserRequest,U extends org.springframework.security.oauth2.core.user.OAuth2User>; // Implementations of this interface are responsible for obtaining the user attributes of the End-User (Resource Owner) from the UserInfo Endpoint using the Access Token granted to the Client and returning an AuthenticatedPrincipal in the form of an OAuth2User.\n", "des": "Classes and interfaces providing support to the client for initiating requests to the OAuth 2.0 Authorization Server's UserInfo Endpoint."}
{"index": 1076, "repo": "hadoop-yarn-common-3.3.6", "code": "Package: hamlet2\n\nClasses and Interfaces: \nInterface HamletSpec.__;\nInterface HamletSpec._Anchor;\nInterface HamletSpec._Block; // %block -(FORM|FIELDSET)\nInterface HamletSpec._Body;\nInterface HamletSpec._Cell;\nInterface HamletSpec._Child;\nInterface HamletSpec._Content;\nInterface HamletSpec._Dl;\nInterface HamletSpec._FieldSet;\nInterface HamletSpec._FontSize; // Part of %pre.exclusion\nInterface HamletSpec._FontStyle; // %fontstyle -(%pre.exclusion)\nInterface HamletSpec._Form;\nInterface HamletSpec._FormCtrl;\nInterface HamletSpec._Head;\nInterface HamletSpec._Html;\nInterface HamletSpec._ImgObject; // Part of %pre.exclusion\nInterface HamletSpec._InsDel; // INS and DEL are unusual for HTML \"in that they may serve as either block-level or inline elements (but not both)\".\nInterface HamletSpec._Label;\nInterface HamletSpec._Legend;\nInterface HamletSpec._Li;\nInterface HamletSpec._Object;\nInterface HamletSpec._Option;\nInterface HamletSpec._Param;\nInterface HamletSpec._RawContent;\nInterface HamletSpec._Script;\nInterface HamletSpec._Special; // %special -(A|%pre.exclusion)\nInterface HamletSpec._SubSup; // Part of %pre.exclusion\nInterface HamletSpec._Table;\nInterface HamletSpec._TableCol;\nInterface HamletSpec._TableRow;\nInterface HamletSpec._Tr;\nInterface HamletSpec.A;\nInterface HamletSpec.ABBR;\nInterface HamletSpec.ACRONYM;\nInterface HamletSpec.ADDRESS;\nInterface HamletSpec.AREA;\nInterface HamletSpec.Attrs; // %attrs\nInterface HamletSpec.B;\nInterface HamletSpec.BASE;\nInterface HamletSpec.BDO; // The dir attribute is required for the BDO element\nInterface HamletSpec.Block; // %block\n", "des": "This package is the replacement for org.apache.hadoop.yarn.webapp.hamlet."}
{"index": 1939, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: influx\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnClass(org.influxdb.InfluxDB.class) @EnableConfigurationProperties(InfluxDbProperties.class) @ConditionalOnProperty(\"spring.influx.url\") public class InfluxDbAutoConfiguration extends Object; // Auto-configuration for InfluxDB.\n@FunctionalInterface public interface InfluxDbCustomizer; // Callback interface that can be implemented by beans wishing to further customize InfluxDB whilst retaining default auto-configuration.\n@FunctionalInterface public interface InfluxDbOkHttpClientBuilderProvider extends Supplier<okhttp3.OkHttpClient.Builder>; // Provide the OkHttpClient.Builder to use to customize the auto-configured InfluxDB instance.\n@ConfigurationProperties(prefix=\"spring.influx\") public class InfluxDbProperties extends Object; // Configuration properties for InfluxDB.\n", "des": "Auto-configuration for InfluxDB."}
{"index": 3077, "repo": "spring-ws-core-4.0.5", "code": "Package: server\n\nClasses and Interfaces: \npublic abstract class AbstractActionEndpointMapping extends AbstractAddressingEndpointMapping; // Abstract base class for WS-Addressing Action-mapped EndpointMapping implementations.\npublic abstract class AbstractActionMethodEndpointMapping extends AbstractActionEndpointMapping; // Abstract base class for WS-Addressing Action-mapped EndpointMapping implementations that map to MethodEndpoints.\npublic abstract class AbstractAddressingEndpointMapping extends org.springframework.xml.transform.TransformerObjectSupport implements SoapEndpointMapping, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.core.Ordered; // Abstract base class for EndpointMapping implementations that handle WS-Addressing.\npublic class AnnotationActionEndpointMapping extends AbstractActionMethodEndpointMapping implements org.springframework.beans.factory.config.BeanPostProcessor; // Implementation of the EndpointMapping interface that uses the @Action annotation to map methods to a WS-Addressing Action header.\npublic class SimpleActionEndpointMapping extends AbstractActionEndpointMapping; // Implementation of the EndpointMapping interface to map from WS-Addressing Action Message Addressing Property to endpoint beans.\n", "des": "Contains servers-side WS-Addressing support, in the form of EndpointMappings."}
{"index": 997, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: context\n\nClasses and Interfaces: \nInterface TransportContext; // Strategy interface for determining the current WebServiceConnection.\nClass DefaultTransportContext; // Default implementation of the TransportContext interface.\nClass TransportContextHolder; // Simple holder class that associates a TransportContext instance with the current thread.\n", "des": "Abstraction for determining the current TransportInputStream and TransportOutputStream."}
{"index": 2927, "repo": "groovy-4.0.13", "code": "Package: stmt\n\nClasses and Interfaces: \npublic class AssertStatement extends Statement; // Represents an assert statement.\npublic class BlockStatement extends Statement; // A list of statements and a scope.\npublic class BreakStatement extends Statement; // Represents a break statement in a switch or loop statement\npublic class CaseStatement extends Statement; // Represents a case statement in a switch statement\npublic class CatchStatement extends Statement; // Represents a catch (Exception var) { } statement\npublic class ContinueStatement extends Statement; // Represents a continue statement in a loop statement\npublic class DoWhileStatement extends Statement implements LoopingStatement; // Represents a do { ...\npublic class EmptyStatement extends Statement;\npublic class ExpressionStatement extends Statement; // A simple statement such as a method call where the return value is ignored\npublic class ForStatement extends Statement implements LoopingStatement; // Represents a standard for loop in Groovy\npublic class IfStatement extends Statement; // Represents an if (condition) { ...\npublic interface LoopingStatement; // This is an AST Node that provides some sort of looping mechanism.\npublic class ReturnStatement extends Statement; // A return statement\npublic class Statement extends ASTNode; // Base class for any statement.\npublic class SwitchStatement extends Statement; // Represents a switch (object) { case value: ...\npublic class SynchronizedStatement extends Statement; // Represents a synchronized statement\npublic class ThrowStatement extends Statement; // Represents a throw statement\npublic class TryCatchStatement extends Statement; // Represents a try { ...\npublic class WhileStatement extends Statement implements LoopingStatement; // Represents a while (condition) { ...\n", "des": "AST nodes for Groovy statements"}
{"index": 1447, "repo": "spring-data-redis-3.1.2", "code": "Package: lettuce\n\nSub Packages: \npackage lettuce.observability; // Integration of Micrometer Tracing for Lettuce Observability.\n\nClasses and Interfaces: \npublic interface LettuceClientConfiguration; // Redis client configuration for lettuce.\npublic static class LettuceClientConfiguration.LettuceClientConfigurationBuilder extends Object;\npublic static class LettuceClientConfiguration.LettuceSslClientConfigurationBuilder extends Object; // Builder for SSL-related LettuceClientConfiguration.\npublic class LettuceClusterConnection extends LettuceConnection implements RedisClusterConnection, DefaultedRedisClusterConnection; // RedisClusterConnection implementation on top of Lettuce Redis client.\nprotected static interface LettuceClusterConnection.LettuceClusterCommandCallback<T> extends ClusterCommandExecutor.ClusterCommandCallback<io.lettuce.core.cluster.api.sync.RedisClusterCommands<byte[],byte[]>,T>; // Lettuce specific implementation of ClusterCommandExecutor.ClusterCommandCallback.\nprotected static interface LettuceClusterConnection.LettuceMultiKeyClusterCommandCallback<T> extends ClusterCommandExecutor.MultiKeyClusterCommandCallback<io.lettuce.core.cluster.api.sync.RedisClusterCommands<byte[],byte[]>,T>; // Lettuce specific implementation of ClusterCommandExecutor.MultiKeyClusterCommandCallback.\npublic class LettuceConnection extends AbstractRedisConnection; // RedisConnection implementation on top of Lettuce Redis client.\npublic static interface LettuceConnection.PipeliningFlushPolicy; // Strategy interface to control pipelining flush behavior.\npublic static interface LettuceConnection.PipeliningFlushState; // State object associated with flushing of the currently ongoing pipeline.\npublic class LettuceConnectionFactory extends Object implements InitializingBean, DisposableBean, RedisConnectionFactory, ReactiveRedisConnectionFactory; // Connection factory creating Lettuce-based connections.\n@FunctionalInterface public interface LettuceConnectionProvider; // Defines a provider for Lettuce connections.\n@FunctionalInterface public static interface LettuceConnectionProvider.TargetAware; // Extension to LettuceConnectionProvider for providers that allow connection creation to specific nodes.\npublic abstract class LettuceConverters extends Converters; // Lettuce type converters\n", "des": "Connection package for Lettuce Redis client."}
{"index": 978, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: support\n\nClasses and Interfaces: \nClass CryptoFactoryBean; // Spring factory bean for a WSS4J Crypto.\n", "des": "Contains support classes for working with WSS4J 2.0."}
{"index": 3778, "repo": "lucene-analysis-common-9.7.0", "code": "Package: el\n\nClasses and Interfaces: \nClass GreekAnalyzer; // Analyzer for the Greek language.\nClass GreekLowerCaseFilter; // Normalizes token text to lower case, removes some Greek diacritics, and standardizes final sigma to sigma.\nClass GreekLowerCaseFilterFactory; // Factory for GreekLowerCaseFilter.\nClass GreekStemFilter; // A TokenFilter that applies GreekStemmer to stem Greek words.\nClass GreekStemFilterFactory; // Factory for GreekStemFilter.\nClass GreekStemmer; // A stemmer for Greek words, according to: Development of a Stemmer for the Greek Language. Georgios Ntais\n", "des": "Analyzer for Greek."}
{"index": 2305, "repo": "spring-boot-3.1.1", "code": "Package: diagnostics\n\nSub Packages: \npackage diagnostics.analyzer; // Internal FailureAnalyzer implementations.\n\nClasses and Interfaces: \npublic abstract class AbstractFailureAnalyzer<T extends Throwable> extends Object implements FailureAnalyzer; // Abstract base class for most FailureAnalyzer implementations.\npublic class FailureAnalysis extends Object; // The result of analyzing a failure.\n@FunctionalInterface public interface FailureAnalysisReporter; // Reports a FailureAnalysis to the user.\n@FunctionalInterface public interface FailureAnalyzer; // A FailureAnalyzer is used to analyze a failure and provide diagnostic information that can be displayed to the user.\npublic final class LoggingFailureAnalysisReporter extends Object implements FailureAnalysisReporter; // FailureAnalysisReporter that logs the failure analysis.\n", "des": "Support for failure analysis and reporting."}
{"index": 3063, "repo": "spring-ws-core-4.0.5", "code": "Package: endpoint\n\nSub Packages: \npackage endpoint.adapter; // Provides miscellaneous EndpointAdapter implementations.\npackage endpoint.annotation; // JDK 1.5+ annotations for Spring-WS endpoints.\npackage endpoint.interceptor; // Provides miscellaneous endpoints EndpointInterceptor implementations.\npackage endpoint.mapping; // Provides miscellaneous endpoints EndpointMapping implementations.\npackage endpoint.support; // Provides helper classes for EndpointAdapter, EndpointInteceptor, and EndpointMapping implementations.\n\nClasses and Interfaces: \n@Deprecated public abstract class AbstractDom4jPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\n@Deprecated public abstract class AbstractDomPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\npublic abstract class AbstractEndpointExceptionResolver extends Object implements EndpointExceptionResolver, org.springframework.core.Ordered; // Abstract base class for EndpointExceptionResolvers.\n@Deprecated public abstract class AbstractJDomPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\npublic abstract class AbstractLoggingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointInterceptor; // Abstract base class for EndpointInterceptor instances that log a part of a WebServiceMessage.\n@Deprecated public abstract class AbstractMarshallingPayloadEndpoint extends Object implements MessageEndpoint, org.springframework.beans.factory.InitializingBean;\n@Deprecated public abstract class AbstractSaxPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\n@Deprecated public abstract class AbstractStaxEventPayloadEndpoint extends AbstractStaxPayloadEndpoint implements MessageEndpoint;\n@Deprecated public abstract class AbstractStaxPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport;\n@Deprecated public abstract class AbstractStaxStreamPayloadEndpoint extends AbstractStaxPayloadEndpoint implements MessageEndpoint;\n@Deprecated public abstract class AbstractValidatingMarshallingPayloadEndpoint extends AbstractMarshallingPayloadEndpoint;\n@Deprecated public abstract class AbstractXomPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\npublic interface MessageEndpoint; // Defines the basic contract for Web Services interested in the entire message payload.\npublic final class MethodEndpoint extends Object; // Represents a bean method that will be invoked as part of an incoming Web service message.\n", "des": "Provides standard endpoint, and EndpointAdapter implementations."}
{"index": 1678, "repo": "spring-oxm-6.0.11", "code": "Package: jaxb\n\nClasses and Interfaces: \npublic class Jaxb2Marshaller extends Object implements MimeMarshaller, MimeUnmarshaller, GenericMarshaller, GenericUnmarshaller, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Implementation of the GenericMarshaller interface for JAXB 2.2.\n", "des": "Package providing integration of JAXB with Spring's O/X Mapping support."}
{"index": 946, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: context\n\nClasses and Interfaces: \nInterface MessageContext; // Context holder for message requests.\nClass AbstractMessageContext; // Abstract base class for MessageContext instances.\nClass DefaultMessageContext; // Default implementation of MessageContext.\n", "des": "Contains the MessageContext interface and implementations thereof."}
{"index": 852, "repo": "calcite-core-1.34.0", "code": "Package: type\n\nClasses and Interfaces: \nInterface RelDataType; // RelDataType represents the type of a scalar expression or entire row returned from a relational expression.\nInterface RelDataTypeFactory; // RelDataTypeFactory is a factory for datatype descriptors.\nInterface RelDataTypeFactory.FieldInfo;\nInterface RelDataTypeFamily; // RelDataTypeFamily represents a family of related types.\nInterface RelDataTypeField; // RelDataTypeField represents the definition of a field in a structured RelDataType.\nInterface RelDataTypePrecedenceList; // RelDataTypePrecedenceList defines a type precedence list for a particular type.\nInterface RelDataTypeSystem; // Type system.\nInterface RelProtoDataType; // Can be converted into a RelDataType given a RelDataTypeFactory.\nInterface TimeFrame; // Time frame.\nInterface TimeFrameSet.Builder; // Builds a collection of time frames.\nClass DelegatingTypeSystem; // Implementation of RelDataTypeSystem that sends all methods to an underlying object.\nClass DynamicRecordType; // Specific type of RelRecordType that corresponds to a dynamic table, where columns are created as they are requested.\nClass DynamicRecordTypeImpl; // Implementation of RelDataType for a dynamic table.\nClass RelCrossType; // Type of the cartesian product of two or more sets of records.\nClass RelDataTypeFactory.Builder; // Fluid API to build a list of fields.\nClass RelDataTypeFactory.FieldInfoBuilder;\nClass RelDataTypeFactoryImpl; // Abstract base for implementations of RelDataTypeFactory.\nClass RelDataTypeField.ToFieldIndex; // Use RelDataTypeField::getIndex\nClass RelDataTypeField.ToFieldName; // Use RelDataTypeField::getName\nClass RelDataTypeFieldImpl; // Default implementation of RelDataTypeField.\nClass RelDataTypeImpl; // RelDataTypeImpl is an abstract base for implementations of RelDataType.\nClass RelDataTypeSystemImpl; // Default implementation of RelDataTypeSystem, providing parameters from the SQL standard.\nClass RelRecordType; // RelRecordType represents a structured type having named fields.\nClass TimeFrames; // Utilities for TimeFrame.\nClass TimeFrameSet; // Set of TimeFrame definitions.\nEnum RelDataTypeComparability; // RelDataTypeComparability is an enumeration of the categories of comparison operators which types may support.\nEnum StructKind; // Describes a policy for resolving fields in record types.\n", "des": "Defines a type system for relational expressions."}
{"index": 146, "repo": "ignite-core-2.15.0", "code": "Package: loadbalancer\n\nClasses and Interfaces: \nClass GridLoadBalancerAdapter; // This adapter allows for graceful exception when load balancer gets marshalled.\nClass GridLoadBalancerManager; // Load balancing manager.\n", "des": "TODO."}
{"index": 3143, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface NamedParameterContext; // The context for named parameters.\nInterface QueryBuildingParameters; // Provides values for all options that impact the built query.\n", "des": "Defines the SPI for obtaining values for options that impact the load query."}
{"index": 189, "repo": "ignite-core-2.15.0", "code": "Package: scala\n\nClasses and Interfaces: \nAnnotation Type impl; // Documentation annotation for Scala.\n", "des": "Scala supporting classes."}
{"index": 2427, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: elasticsearch\n\nClasses and Interfaces: \n@AutoConfiguration(after=org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration.class) @ConditionalOnClass(org.elasticsearch.client.RestClient.class) @ConditionalOnBean(org.elasticsearch.client.RestClient.class) @ConditionalOnEnabledHealthIndicator(\"elasticsearch\") public class ElasticsearchRestHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.elasticsearch.ElasticsearchRestClientHealthIndicator,org.elasticsearch.client.RestClient>; // Auto-configuration for ElasticsearchRestClientHealthIndicator.\n", "des": "Auto-configuration for actuator Elasticsearch concerns."}
{"index": 3046, "repo": "spring-web-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"DELETE\") public @interface DeleteExchange; // Shortcut for @HttpExchange for HTTP DELETE requests.\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"GET\") public @interface GetExchange; // Shortcut for @HttpExchange for HTTP GET requests.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Reflective(org.springframework.web.service.annotation.HttpExchangeReflectiveProcessor.class) public @interface HttpExchange; // Annotation to declare a method on an HTTP service interface as an HTTP endpoint.\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"PATCH\") public @interface PatchExchange; // Shortcut for @HttpExchange for HTTP PATCH requests.\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"POST\") public @interface PostExchange; // Shortcut for @HttpExchange for HTTP POST requests.\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"PUT\") public @interface PutExchange; // Shortcut for @HttpExchange for HTTP PUT requests.\n", "des": "Annotations for declaring HTTP service request methods."}
{"index": 1890, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: session\n\nSub Packages: \npackage session.mgt; // SessionManager components supporting enterprise session management.\n\nClasses and Interfaces: \npublic class ExpiredSessionException extends StoppedSessionException; // A special case of a StoppedSessionException.\npublic class InvalidSessionException extends SessionException; // Exception thrown when attempting to interact with the system under an established session when that session is considered invalid.\npublic class ProxiedSession extends Object implements Session; // Simple Session implementation that immediately delegates all corresponding calls to an underlying proxied session instance.\npublic interface Session; // A Session is a stateful data context associated with a single Subject (user, daemon process, etc.) who interacts with a software system over a period of time.\npublic class SessionException extends org.apache.shiro.lang.ShiroException; // General security exception attributed to problems during interaction with the system during a session.\npublic interface SessionListener; // Interface to be implemented by components that wish to be notified of events that occur during a Session's life cycle.\npublic class SessionListenerAdapter extends Object implements SessionListener; // Simple adapter implementation of the SessionListener interface, effectively providing no-op implementations of all methods.\npublic class StoppedSessionException extends InvalidSessionException; // Exception thrown when attempting to interact with the system under a session that has been stopped.\npublic class UnknownSessionException extends InvalidSessionException; // Exception thrown when attempting to interact with the system under the pretense of a particular session (e.g.\n", "des": "Components related to managing sessions, the time-based data contexts in which a Subject interacts with an application."}
{"index": 1110, "repo": "fontbox-3.0.0-beta1", "code": "Package: type1\n\nClasses and Interfaces: \nInterface Type1CharStringReader; // Something which can read Type 1 CharStrings, namely Type 1 and CFF fonts.\nClass Type1Font; // Represents an Adobe Type 1 (.pfb) font.\nClass DamagedFontException; // Thrown when a font is damaged and cannot be read.\n", "des": "This package holds classes used to parse Type1-Fonts."}
{"index": 3067, "repo": "spring-ws-core-4.0.5", "code": "Package: jaxb\n\nClasses and Interfaces: \npublic abstract class AbstractJaxb2PayloadMethodProcessor extends AbstractPayloadMethodProcessor; // Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations that use JAXB2.\npublic class JaxbElementPayloadMethodProcessor extends AbstractJaxb2PayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports JAXBElement objects.\npublic class XmlRootElementPayloadMethodProcessor extends AbstractJaxb2PayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports parameters annotated with @XmlRootElement or @XmlType, and return values annotated with @XmlRootElement.\n", "des": "Provides JAXB2-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces."}
{"index": 197, "repo": "ignite-core-2.15.0", "code": "Package: mindrot\n\nClasses and Interfaces: \nClass BCrypt; // BCrypt implements OpenBSD-style Blowfish password hashing using the scheme described in \"A Future-Adaptable Password Scheme\" by Niels Provos and David Mazieres.\n", "des": "Package contains class that from jbcrypt."}
{"index": 65, "repo": "ignite-core-2.15.0", "code": "Package: maintenance\n\nClasses and Interfaces: \nInterface MaintenanceAction<T>; // Maintenance action interface enables user to execute operations related to a particular MaintenanceTask.\nInterface MaintenanceRegistry; // MaintenanceRegistry is a service local to each Ignite node that allows to request performing maintenance actions on that particular node.\nInterface MaintenanceWorkflowCallback; // Abstraction to decouple interaction between MaintenanceRegistry and components that may require maintenance.\nClass MaintenanceTask; // Represents request to handle maintenance situation.\n", "des": "Contains public interfaces for maintenance mechanism."}
{"index": 3770, "repo": "lucene-analysis-common-9.7.0", "code": "Package: commongrams\n\nClasses and Interfaces: \nClass CommonGramsFilter; // Construct bigrams for frequently occurring terms while indexing.\nClass CommonGramsFilterFactory; // Constructs a CommonGramsFilter.\nClass CommonGramsQueryFilter; // Wrap a CommonGramsFilter optimizing phrase queries by only returning single words when they are not a member of a bigram.\nClass CommonGramsQueryFilterFactory; // Construct CommonGramsQueryFilter.\n", "des": "Construct n-grams for frequently occurring terms and phrases."}
{"index": 809, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: sv\n\nClasses and Interfaces: \nClass SwedishAnalyzer; // Analyzer for Swedish.\nClass SwedishLightStemFilter; // A TokenFilter that applies SwedishLightStemmer to stem Swedish words.\nClass SwedishLightStemFilterFactory; // Factory for SwedishLightStemFilter.\nClass SwedishLightStemmer; // Light Stemmer for Swedish.\n", "des": "Analyzer for Swedish."}
{"index": 1299, "repo": "groovy-all-4.0.13", "code": "Package: text\n\nClasses and Interfaces: \npublic final class FindReplaceUtility extends Object;\npublic class GroovyFilter extends StructuredSyntaxDocumentFilter;\npublic class MatchingHighlighter extends Object implements CaretListener; // Represents highlighter to highlight matched parentheses, brackets and curly braces when caret touching them\npublic class SmartDocumentFilter extends DocumentFilter; // The document filter based on Parrot's lexer is for highlighting the content of text editor\npublic class StructuredSyntaxDocumentFilter extends DocumentFilter;\npublic class StructuredSyntaxHandler extends DefaultHandler;\npublic final class StructuredSyntaxResources extends Object; // Contains all the basic resources and values used by the utility framework.\npublic class TextEditor extends JTextPane implements Pageable, Printable; // A simple text pane that is printable and wrapping is optional.\npublic class TextUndoManager extends UndoManager; // To use this, simply drop this as an UndoableEditListener into your document, and then create actions to call undo/redo as needed (checking can undo/redo first, of course).\n", "des": "Text processing helpers for the interactive command line terminal."}
{"index": 3783, "repo": "lucene-analysis-common-9.7.0", "code": "Package: eu\n\nClasses and Interfaces: \nClass BasqueAnalyzer; // Analyzer for Basque.\n", "des": "Analyzer for Basque."}
{"index": 1452, "repo": "spring-data-redis-3.1.2", "code": "Package: convert\n\nClasses and Interfaces: \npublic class Bucket extends Object; // Bucket is the data bag for Redis hash structures to be used with RedisData.\npublic static class Bucket.BucketPropertyPath extends Object; // Value object representing a path within a Bucket.\npublic class CompositeIndexResolver extends Object implements IndexResolver; // Composite IndexResolver implementation that iterates over a given collection of delegate IndexResolver instances.\npublic class DefaultRedisTypeMapper extends DefaultTypeMapper<Bucket.BucketPropertyPath> implements RedisTypeMapper; // Default implementation of RedisTypeMapper allowing configuration of the key to lookup and store type information via Bucket.BucketPropertyPath in buckets.\npublic class GeoIndexedPropertyValue extends Object implements IndexedData; // IndexedData implementation indicating storage of data within a Redis GEO structure.\npublic interface IndexedData; // IndexedData represents a secondary index for a property path in a given keyspace.\npublic interface IndexResolver; // IndexResolver extracts secondary index structures to be applied on a given path, PersistentProperty and value.\npublic abstract class Jsr310Converters extends Object; // Helper class to register JSR-310 specific Converter implementations in case the we're running on Java 8.\npublic class KeyspaceConfiguration extends Object; // KeyspaceConfiguration allows programmatic setup of keyspaces and time to live options for certain types.\npublic static class KeyspaceConfiguration.KeyspaceSettings extends Object;\npublic class MappingConfiguration extends Object; // MappingConfiguration is used for programmatic configuration of secondary indexes, key prefixes, expirations and the such.\npublic class MappingRedisConverter extends Object implements RedisConverter, InitializingBean; // RedisConverter implementation creating flat binary map structure out of a given domain type.\npublic static class MappingRedisConverter.BinaryKeyspaceIdentifier extends Object; // Value object representing a binary Redis Hash/Object identifier composed from keyspace and object id in the form of keyspace:id.\npublic static class MappingRedisConverter.KeyspaceIdentifier extends Object; // Value object representing a Redis Hash/Object identifier composed from keyspace and object id in the form of keyspace:id.\npublic class PathIndexResolver extends Object implements IndexResolver; // IndexResolver implementation considering properties annotated with Indexed or paths set up in IndexConfiguration.\npublic interface RedisConverter extends EntityConverter<RedisPersistentEntity<?>,RedisPersistentProperty,Object,RedisData>; // Redis specific EntityConverter.\npublic class RedisCustomConversions extends CustomConversions; // Value object to capture custom conversion.\n", "des": "Converters for Redis repository support utilizing mapping metadata."}
{"index": 3262, "repo": "opencms-core-15.0", "code": "Package: mssql\n\nClasses and Interfaces: \nClass CmsHistoryDriver; // MS SQL implementation of the history driver methods.\nClass CmsProjectDriver; // MS SQL implementation of the project driver methods.\nClass CmsSqlManager; // MS SQL implementation of the SQL manager.\nClass CmsSubscriptionDriver; // MSSQL implementation of the subscription driver.\nClass CmsUserDriver; // MS SQL implementation of the user driver methods.\nClass CmsVfsDriver; // MS SQL implementation of the VFS driver methods.\n", "des": "MS SQL implementation of the OpenCms database connector."}
{"index": 760, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: ca\n\nClasses and Interfaces: \nClass CatalanAnalyzer; // Analyzer for Catalan.\n", "des": "Analyzer for Catalan."}
{"index": 282, "repo": "pdfbox-3.0.0-beta1", "code": "Package: pdmodel\n\nSub Packages: \npackage pdmodel.common; // High level PD classes that are used throughout several packages are placed in the PDModel common package.\npackage pdmodel.encryption; // The encryption package will handle the PDF document security handlers and the functionality of pluggable security handlers.\npackage pdmodel.fdf; // The fdf package will handle all of the logic used for FDF objects inside of the PDF/FDF document.\npackage pdmodel.font; // Classes to deal with font functionality in a PDF Document.\npackage pdmodel.graphics; // The PDModel graphics package deals with graphics states, operations, and parameters within the PDF document.\n\nClasses and Interfaces: \nInterface ResourceCache; // A document-wide cache for page resources.\nClass DefaultResourceCache; // A resource cached based on SoftReference, retains resources until memory pressure causes them to be garbage collected.\nClass PDAppearanceContentStream; // Provides the ability to write to an appearance content stream.\nClass PDDestinationNameTreeNode; // This class holds all of the name trees that are available at the document level.\nClass PDDocument; // This is the in-memory representation of the PDF document.\nClass PDDocumentCatalog; // The Document Catalog of a PDF.\nClass PDDocumentInformation; // This is the document metadata.\nClass PDDocumentNameDestinationDictionary; // This encapsulates the \"dictionary of names and corresponding destinations\" for the /Dests entry in the document catalog.\nClass PDDocumentNameDictionary; // This class holds all of the name trees that are available at the document level.\nClass PDEmbeddedFilesNameTreeNode; // This class holds all of the name trees that are available at the document level.\nClass PDFormContentStream;\nClass PDJavascriptNameTreeNode; // This class holds all of the name trees that are available at the document level.\nClass PDPage; // A page in a PDF document.\nClass PDPageContentStream; // Provides the ability to write to a page content stream.\nClass PDPageTree; // The page tree, which defines the ordering of pages in the document in an efficient manner.\nClass PDPatternContentStream;\nClass PDResources; // A set of resources available at the page/pages/stream level.\nClass PDStructureElementNameTreeNode; // todo: JavaDoc\n", "des": "The PDModel package represents a high level API for creating and manipulating PDF documents."}
{"index": 951, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: endpoint\n\nSub Packages: \npackage endpoint.adapter; // Provides miscellaneous EndpointAdapter implementations.\npackage endpoint.annotation; // JDK 1.5+ annotations for Spring-WS endpoints.\npackage endpoint.interceptor; // Provides miscellaneous endpoints EndpointInterceptor implementations.\npackage endpoint.mapping; // Provides miscellaneous endpoints EndpointMapping implementations.\npackage endpoint.support; // Provides helper classes for EndpointAdapter, EndpointInteceptor, and EndpointMapping implementations.\n\nClasses and Interfaces: \nInterface MessageEndpoint; // Defines the basic contract for Web Services interested in the entire message payload.\nInterface PayloadEndpoint; // Defines the basic contract for Web Services interested in just the message payload.\nClass AbstractDom4jPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractDomPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractEndpointExceptionResolver; // Abstract base class for EndpointExceptionResolvers.\nClass AbstractJDomPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractLoggingInterceptor; // Abstract base class for EndpointInterceptor instances that log a part of a WebServiceMessage.\nClass AbstractMarshallingPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractSaxPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractStaxEventPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractStaxPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractStaxStreamPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractValidatingMarshallingPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractXomPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass MethodEndpoint; // Represents a bean method that will be invoked as part of an incoming Web service message.\n", "des": "Provides standard endpoint, and EndpointAdapter implementations."}
{"index": 3852, "repo": "lucene-core-9.7.0", "code": "Package: util\n\nSub Packages: \npackage util.automaton; // Finite-state automaton for regular expressions.\npackage util.bkd; // Block KD-tree, implementing the generic spatial data structure described in this paper.\npackage util.compress; // Compression utilities.\npackage util.fst; // Finite state transducers\npackage util.graph; // Utility classes for working with token streams as graphs.\npackage util.hnsw; // Navigable Small-World graph, nominally Hierarchical but currently only has a single layer.\npackage util.hppc; // package holding hppc related classes.\npackage util.mutable; // Comparable object wrappers\npackage util.packed; // Packed integer arrays and streams.\n\nClasses and Interfaces: \nInterface Accountable; // An object whose RAM usage can be computed.\nInterface ArrayUtil.ByteArrayComparator; // Comparator for a fixed number of bytes.\nInterface Attribute; // Base interface for attributes.\nInterface AttributeReflector; // This interface is used to reflect contents of AttributeSource or AttributeImpl.\nInterface Bits; // Interface for Bitset-like structures.\nInterface BytesRefArray.IndexedBytesRefIterator; // An extension of BytesRefIterator that allows retrieving the index of the current element\nInterface BytesRefIterator; // A simple iterator interface for BytesRef iteration.\nInterface ClassLoaderUtils; // Helper class used by ServiceLoader to investigate parent/child relationships of ClassLoaders.\nInterface IOConsumer<T>; // An IO operation with a single input that may throw an IOException.\nInterface IOFunction<T,​R>; // A Function that may throw an IOException\nInterface IOSupplier<T>; // This is a result supplier that is allowed to throw an IOException.\nInterface IOUtils.IOConsumer<T>;\nInterface IOUtils.IOFunction<T,​R>;\nInterface NamedSPILoader.NamedSPI; // Interface to support NamedSPILoader.lookup(String) by name.\nInterface ResourceLoader; // Abstraction for loading resources (streams, files, and classes).\nInterface ResourceLoaderAware; // Interface for a component that needs to be initialized by an implementation of ResourceLoader.\nInterface RollingBuffer.Resettable; // Implement to reset an instance\n", "des": "Some utility classes."}
{"index": 1128, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: discovery\n\nClasses and Interfaces: \nInterface FPGADiscoveryStrategy; // Interface for an FPGA device discovery strategy.\nClass AoclOutputBasedDiscoveryStrategy; // FPGA device discovery strategy which invokes the \"aocl\" SDK command to retrieve the list of available FPGA cards.\nClass DeviceSpecParser; // Parses a string which specifies FPGA devices.\nClass ScriptBasedFPGADiscoveryStrategy; // FPGA device discovery strategy which invokes an external script.\nClass SettingsBasedFPGADiscoveryStrategy; // FPGA device discovery strategy which parses a string.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1113, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: deviceplugin\n\nClasses and Interfaces: \nInterface DevicePlugin; // A must interface for vendor plugin to implement.\nInterface DevicePluginScheduler; // An optional interface to implement if custom device scheduling is needed.\nClass Device; // Represent one \"device\" resource.\nClass Device.Builder; // Builder for Device.\nClass DeviceRegisterRequest; // Contains plugin register request info.\nClass DeviceRegisterRequest.Builder; // Builder class for construct DeviceRegisterRequest.\nClass DeviceRuntimeSpec; // This is a spec used to prepare and run container.\nClass DeviceRuntimeSpec.Builder; // Builder for DeviceRuntimeSpec.\nClass MountDeviceSpec; // Describe one device mount.\nClass MountDeviceSpec.Builder; // Builder for MountDeviceSpec.\nClass MountVolumeSpec; // Describe one volume mount.\nClass MountVolumeSpec.Builder; // Builder for MountVolumeSpec.\nClass VolumeSpec; // Describe one volume creation or deletion.\nClass VolumeSpec.Builder; // Builder for VolumeSpec.\nEnum YarnRuntimeType; // YarnRuntime parameter enum for DevicePlugin.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 312, "repo": "commons-geometry-enclosing-1.0-beta1", "code": "Package: enclosing\n\nClasses and Interfaces: \nInterface Encloser<P extends Point<P>>; // Interface for algorithms computing enclosing balls.\nInterface SupportBallGenerator<P extends Point<P>>; // Interface for generating balls based on support points.\nClass EnclosingBall<P extends Point<P>>; // This class represents a ball enclosing some points.\nClass WelzlEncloser<P extends Point<P>>; // Class implementing Emo Welzl's algorithm to find the smallest enclosing ball in linear time.\n", "des": "This package provides interfaces and classes related to the smallest enclosing ball problem."}
{"index": 2445, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: ldap\n\nClasses and Interfaces: \n@AutoConfiguration(after=org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration.class) @ConditionalOnClass(org.springframework.ldap.core.LdapOperations.class) @ConditionalOnBean(org.springframework.ldap.core.LdapOperations.class) @ConditionalOnEnabledHealthIndicator(\"ldap\") public class LdapHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.ldap.LdapHealthIndicator,org.springframework.ldap.core.LdapOperations>; // Auto-configuration for LdapHealthIndicator.\n", "des": "Auto-configuration for actuator LDAP concerns."}
{"index": 1516, "repo": "spring-context-6.0.11", "code": "Package: weaving\n\nClasses and Interfaces: \npublic class AspectJWeavingEnabler extends Object implements org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.beans.factory.BeanClassLoaderAware, LoadTimeWeaverAware, org.springframework.core.Ordered; // Post-processor that registers AspectJ's ClassPreProcessorAgentAdapter with the Spring application context's default LoadTimeWeaver.\npublic class DefaultContextLoadTimeWeaver extends Object implements LoadTimeWeaver, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.DisposableBean; // Default LoadTimeWeaver bean for use in an application context, decorating an automatically detected internal LoadTimeWeaver.\npublic interface LoadTimeWeaverAware extends org.springframework.beans.factory.Aware; // Interface to be implemented by any object that wishes to be notified of the application context's default LoadTimeWeaver.\npublic class LoadTimeWeaverAwareProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.beans.factory.BeanFactoryAware; // BeanPostProcessor implementation that passes the context's default LoadTimeWeaver to beans that implement the LoadTimeWeaverAware interface.\n", "des": "Load-time weaving support for a Spring application context, building on Spring's LoadTimeWeaver abstraction."}
{"index": 2894, "repo": "spring-integration-core-6.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractHeaderValueMessageProcessor<T> extends Object implements HeaderValueMessageProcessor<T>;\npublic final class AvroHeaders extends Object; // Pre-defined names and prefixes for Apache Avro related headers.\npublic class ExpressionEvaluatingHeaderValueMessageProcessor<T> extends AbstractHeaderValueMessageProcessor<T> implements org.springframework.beans.factory.BeanFactoryAware;\npublic interface HeaderValueMessageProcessor<T> extends MessageProcessor<T>;\npublic class MessageProcessingHeaderValueMessageProcessor extends AbstractHeaderValueMessageProcessor<Object> implements org.springframework.beans.factory.BeanFactoryAware;\npublic final class ProtoHeaders extends Object; // Pre-defined names and prefixes for Protocol Buffers related headers.\npublic class RoutingSlipHeaderValueMessageProcessor extends AbstractHeaderValueMessageProcessor<Map<List<Object>,Integer>> implements org.springframework.beans.factory.BeanFactoryAware; // The RoutingSlip HeaderValueMessageProcessor specific implementation.\npublic class StaticHeaderValueMessageProcessor<T> extends AbstractHeaderValueMessageProcessor<T>;\n", "des": "Contains support classes for Transformers."}
{"index": 2332, "repo": "spring-boot-3.1.1", "code": "Package: dependency\n\nClasses and Interfaces: \npublic abstract class AbstractBeansOfTypeDatabaseInitializerDetector extends Object implements DatabaseInitializerDetector; // Base class for DatabaseInitializerDetectors that detect database initializer beans by type.\npublic abstract class AbstractBeansOfTypeDependsOnDatabaseInitializationDetector extends Object implements DependsOnDatabaseInitializationDetector; // Base class for DependsOnDatabaseInitializationDetectors that detect by type beans that depend upon database initialization.\npublic class DatabaseInitializationDependencyConfigurer extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar; // Configures beans that depend upon SQL database initialization with dependencies upon beans that perform database initialization.\npublic interface DatabaseInitializerDetector extends org.springframework.core.Ordered; // Detects beans that initialize an SQL database.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface DependsOnDatabaseInitialization; // Indicate that a bean's creation and initialization depends upon database initialization having completed.\npublic interface DependsOnDatabaseInitializationDetector; // Detects beans that depend on database initialization.\n", "des": "Infrastructure for establishing database initialization bean dependencies."}
{"index": 21, "repo": "commons-collections4-4.4", "code": "Package: keyvalue\n\nClasses and Interfaces: \nClass AbstractKeyValue<K,V>; // Abstract pair class to assist with creating KeyValue and Map.Entry implementations.\nClass AbstractMapEntry<K,V>; // Abstract Pair class to assist with creating correct Map.Entry implementations.\nClass AbstractMapEntryDecorator<K,V>; // Provides a base decorator that allows additional functionality to be added to a Map.Entry.\nClass DefaultKeyValue<K,V>; // A mutable KeyValue pair that does not implement Map.Entry.\nClass DefaultMapEntry<K,V>; // A restricted implementation of Map.Entry that prevents the Map.Entry contract from being broken.\nClass MultiKey<K>; // A MultiKey allows multiple map keys to be merged together.\nClass TiedMapEntry<K,V>; // A Map.Entry tied to a map underneath.\nClass UnmodifiableMapEntry<K,V>; // A Map.Entry that throws UnsupportedOperationException when setValue is called.\n", "des": "This package contains implementations of collection and map related key/value classes."}
{"index": 739, "repo": "spring-data-solr-4.3.15", "code": "Package: repository\n\nSub Packages: \npackage repository.cdi; // Cdi extension.\npackage repository.config; // Repository configuration and extension support.\npackage repository.query; // Apache Solr specific repository query methods and executions.\npackage repository.support; // Repository support classes for bootstrapping application context.\n\nClasses and Interfaces: \nInterface SolrCrudRepository<T,ID extends Serializable>;\nInterface SolrRepository<T,ID extends Serializable>;\nAnnotation Type Boost; // Increase document score by boosting search criteria hit\nAnnotation Type Facet;\nAnnotation Type Highlight;\nAnnotation Type Pivot;\nAnnotation Type Query;\nAnnotation Type Score; // since 4.0.\nAnnotation Type SelectiveStats; // Definition of field selective statistical that shall be executed within the request.\nAnnotation Type Spellcheck; // Enable Solr spellcheck component for a repository query method.\nAnnotation Type Stats; // Statistics definition to be performed within a Query.\n", "des": "Solr specific repository implementation."}
{"index": 1762, "repo": "spring-data-mongodb-4.1.2", "code": "Package: script\n\nClasses and Interfaces: \n@Deprecated public class ExecutableMongoScript extends Object;\n@Deprecated public class NamedMongoScript extends Object;\n", "des": "Abstraction classes javascript function execution within MongoDB Server."}
{"index": 3140, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface Callback; // Represents a JPA event callback (the method).\nInterface CallbackBuilder;\nInterface CallbackBuilder.CallbackRegistrar;\nInterface CallbackDefinition;\nInterface CallbackRegistrar;\nInterface CallbackRegistry; // Registry of Callbacks by entity and type\nInterface CallbackRegistryConsumer; // Contract for injecting the registry of Callbacks into event listeners.\nEnum CallbackType;\n", "des": "The SPI contracts for supporting JPA lifecycle callbacks."}
{"index": 2866, "repo": "spring-integration-core-6.1.2", "code": "Package: history\n\nClasses and Interfaces: \npublic class HistoryWritingMessagePostProcessor extends Object implements org.springframework.messaging.core.MessagePostProcessor;\npublic final class MessageHistory extends Object implements List<Properties>, Serializable;\npublic static class MessageHistory.Entry extends Properties; // Inner class for each Entry in the history.\n@ManagedResource @IntegrationManagedResource public class MessageHistoryConfigurer extends Object implements ManageableSmartLifecycle, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;\n", "des": "Provides classes supporting the capture of message history."}
{"index": 3613, "repo": "lucene-suggest-9.7.0", "code": "Package: fst\n\nClasses and Interfaces: \nInterface BytesRefSorter; // Collects BytesRef and then allows one to iterate over their sorted order.\nClass ExternalRefSorter; // An implementation of a BytesRefSorter that allows appending BytesRefs to an OfflineSorter and returns a Closeable ExternalRefSorter.ByteSequenceIterator that iterates over sequences stored on disk.\nClass ExternalRefSorter.ByteSequenceIterator; // Iterates over BytesRefs in a file, closes the reader when the iterator is exhausted.\nClass FSTCompletion; // Finite state automata based implementation of \"autocomplete\" functionality.\nClass FSTCompletion.Completion; // A single completion for a given key.\nClass FSTCompletionBuilder; // Finite state automata based implementation of \"autocomplete\" functionality.\nClass FSTCompletionLookup; // An adapter from Lookup API to FSTCompletion.\nClass WFSTCompletionLookup; // Suggester based on a weighted FST: it first traverses the prefix, then walks the n shortest paths to retrieve top-ranked suggestions.\n", "des": "Finite-state based autosuggest."}
{"index": 1968, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: client\n\nSub Packages: \npackage client.reactive; // Auto-configuration for Spring Security's Reactive OAuth 2 client.\npackage client.servlet; // Auto-configuration for Spring Security's OAuth 2 client.\n\nClasses and Interfaces: \npublic class ClientsConfiguredCondition extends SpringBootCondition; // Condition that matches if any spring.security.oauth2.client.registration properties are defined.\n@ConfigurationProperties(prefix=\"spring.security.oauth2.client\") public class OAuth2ClientProperties extends Object implements org.springframework.beans.factory.InitializingBean; // OAuth 2.0 client properties.\npublic static class OAuth2ClientProperties.Provider extends Object;\npublic static class OAuth2ClientProperties.Registration extends Object; // A single client registration.\npublic final class OAuth2ClientPropertiesMapper extends Object; // Maps OAuth2ClientProperties to ClientRegistrations.\n@Deprecated(since=\"3.1.0\", forRemoval=true) public final class OAuth2ClientPropertiesRegistrationAdapter extends Object;\n", "des": "Support for Spring Security's OAuth 2 client."}
{"index": 2836, "repo": "spring-data-r2dbc-3.1.2", "code": "Package: query\n\nClasses and Interfaces: \npublic abstract class AbstractR2dbcQuery extends Object implements RepositoryQuery; // Base class for reactive RepositoryQuery implementations for R2DBC.\npublic interface BindableQuery extends Supplier<String>; // Interface declaring a query that supplies SQL and can bind parameters to a DatabaseClient.GenericExecuteSpec.\npublic class PartTreeR2dbcQuery extends AbstractR2dbcQuery; // An AbstractR2dbcQuery implementation based on a PartTree.\npublic class R2dbcQueryMethod extends QueryMethod; // Reactive specific implementation of QueryMethod.\npublic class StringBasedR2dbcQuery extends AbstractR2dbcQuery; // String-based StringBasedR2dbcQuery implementation.\n", "des": "Query support for R2DBC repositories."}
{"index": 1264, "repo": "spring-core-6.0.11", "code": "Package: reflect\n\nClasses and Interfaces: \npublic abstract class ConstructorDelegate extends Object;\npublic static class ConstructorDelegate.Generator extends AbstractClassGenerator;\npublic abstract class FastClass extends Object;\npublic static class FastClass.Generator extends AbstractClassGenerator;\npublic class FastConstructor extends FastMember;\npublic abstract class FastMember extends Object;\npublic class FastMethod extends FastMember;\npublic abstract class MethodDelegate extends Object; // DOCUMENTATION FROM APACHE AVALON DELEGATE CLASS\npublic static class MethodDelegate.Generator extends AbstractClassGenerator;\npublic abstract class MulticastDelegate extends Object implements Cloneable;\npublic static class MulticastDelegate.Generator extends AbstractClassGenerator;\n", "des": "Spring's repackaging of the CGLIB reflect package (for internal use only)."}
{"index": 349, "repo": "lucene-analyzers-kuromoji-8.11.2", "code": "Package: ja\n\nSub Packages: \npackage ja.dict; // Kuromoji dictionary implementation.\npackage ja.tokenattributes; // Additional Kuromoji-specific Attributes for text analysis.\npackage ja.util; // Kuromoji utility classes.\n\nClasses and Interfaces: \nClass GraphvizFormatter; // Outputs the dot (graphviz) string for the viterbi lattice.\nClass JapaneseAnalyzer; // Analyzer for Japanese that uses morphological analysis.\nClass JapaneseBaseFormFilter; // Replaces term text with the BaseFormAttribute.\nClass JapaneseBaseFormFilterFactory; // Factory for JapaneseBaseFormFilter.\nClass JapaneseIterationMarkCharFilter; // Normalizes Japanese horizontal iteration marks (odoriji) to their expanded form.\nClass JapaneseIterationMarkCharFilterFactory; // Factory for JapaneseIterationMarkCharFilter.\nClass JapaneseKatakanaStemFilter; // A TokenFilter that normalizes common katakana spelling variations ending in a long sound character by removing this character (U+30FC).\nClass JapaneseKatakanaStemFilterFactory; // Factory for JapaneseKatakanaStemFilter.\nClass JapaneseNumberFilter; // A TokenFilter that normalizes Japanese numbers (kansūji) to regular Arabic decimal numbers in half-width characters.\nClass JapaneseNumberFilter.NumberBuffer; // Buffer that holds a Japanese number string and a position index used as a parsed-to marker\nClass JapaneseNumberFilterFactory; // Factory for JapaneseNumberFilter.\nClass JapanesePartOfSpeechStopFilter; // Removes tokens that match a set of part-of-speech tags.\nClass JapanesePartOfSpeechStopFilterFactory; // Factory for JapanesePartOfSpeechStopFilter.\nClass JapaneseReadingFormFilter; // A TokenFilter that replaces the term attribute with the reading of a token in either katakana or romaji form.\nClass JapaneseReadingFormFilterFactory; // Factory for JapaneseReadingFormFilter.\nClass JapaneseTokenizer; // Tokenizer for Japanese that uses morphological analysis.\nClass JapaneseTokenizerFactory; // Factory for JapaneseTokenizer.\n", "des": "Analyzer for Japanese."}
{"index": 2111, "repo": "spring-webflux-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class HandshakeWebSocketService extends Object implements WebSocketService, org.springframework.context.Lifecycle; // WebSocketService implementation that handles a WebSocket HTTP handshake request by delegating to a RequestUpgradeStrategy which is either auto-detected (no-arg constructor) from the classpath but can also be explicitly configured.\n@ImportRuntimeHints(org.springframework.web.reactive.socket.server.support.HandshakeWebSocketServiceRuntimeHints.class) public class WebSocketHandlerAdapter extends Object implements HandlerAdapter, org.springframework.core.Ordered; // HandlerAdapter that allows DispatcherHandler to support handlers of type WebSocketHandler with such handlers mapped to URL patterns via SimpleUrlHandlerMapping.\npublic class WebSocketUpgradeHandlerPredicate extends Object implements BiPredicate<Object,org.springframework.web.server.ServerWebExchange>; // A predicate for use with AbstractUrlHandlerMapping.setHandlerPredicate(java.util.function.BiPredicate<java.lang.Object, org.springframework.web.server.ServerWebExchange>) to ensure only WebSocket handshake requests are matched to handlers of type WebSocketHandler.\n", "des": "Server-side support classes for WebSocket requests."}
{"index": 1036, "repo": "hadoop-aws-3.3.6", "code": "Package: select\n\nClasses and Interfaces: \nClass InternalSelectConstants; // Constants for internal use in the org.apache.hadoop.fs.s3a module itself.\nClass SelectBinding; // Class to do the S3 select binding and build a select request from the supplied arguments/configuration.\nClass SelectConstants; // Options related to S3 Select.\nClass SelectInputStream; // An input stream for S3 Select return values.\nClass SelectTool; // This is a CLI tool for the select operation, which is available through the S3Guard command.\n", "des": "Support for S3 Select."}
{"index": 3685, "repo": "solr-core-9.3.0", "code": "Package: schema\n\nSub Packages: \npackage schema.analysis; // Analysis-related functionality for RESTful API access to managed resources related to the schema, such as stopwords, protected words, and synonyms.\n\nClasses and Interfaces: \nClass FieldTypeXmlAdapter; // Utility class for converting a JSON definition of a FieldType into the XML format expected by the FieldTypePluginLoader.\n", "des": "Provides RESTful API access to managed resources in the Solr Schema."}
{"index": 83, "repo": "ignite-core-2.15.0", "code": "Package: communication\n\nSub Packages: \npackage communication.tcp; // Contains default TCP/IP-based implementation for communication SPI.\n\nClasses and Interfaces: \nInterface CommunicationListener<T extends Serializable>; // Listener SPI notifies IO manager with.\nInterface CommunicationSpi<T extends Serializable>; // Communication SPI is responsible for data exchange between nodes.\n", "des": "Contains APIs for grid communication SPI."}
{"index": 2717, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractSqlPagingQueryProvider extends Object implements PagingQueryProvider; // Abstract SQL Paging Query Provider to serve as a base class for all provided SQL paging query providers.\npublic class ColumnMapItemPreparedStatementSetter extends Object implements ItemPreparedStatementSetter<Map<String,Object>>; // Implementation of the ItemPreparedStatementSetter interface that assumes all keys are contained within a Map with the column name as the key.\npublic interface DataFieldMaxValueIncrementerFactory; // Factory for creating DataFieldMaxValueIncrementer implementations based upon a provided string.\npublic class Db2PagingQueryProvider extends SqlWindowingPagingQueryProvider; // DB2 implementation of a PagingQueryProvider using database specific features.\npublic class DefaultDataFieldMaxValueIncrementerFactory extends Object implements DataFieldMaxValueIncrementerFactory; // Default implementation of the DataFieldMaxValueIncrementerFactory interface.\npublic class DerbyPagingQueryProvider extends SqlWindowingPagingQueryProvider; // Derby implementation of a PagingQueryProvider using standard SQL:2003 windowing functions.\npublic class H2PagingQueryProvider extends AbstractSqlPagingQueryProvider; // H2 implementation of a PagingQueryProvider using database specific features.\npublic class HanaPagingQueryProvider extends AbstractSqlPagingQueryProvider; // SAP HANA implementation of a PagingQueryProvider using database specific features.\npublic class HsqlPagingQueryProvider extends AbstractSqlPagingQueryProvider; // HSQLDB implementation of a PagingQueryProvider using database specific features.\npublic class MariaDBPagingQueryProvider extends AbstractSqlPagingQueryProvider; // MariaDB implementation of a PagingQueryProvider using database specific features.\npublic class MySqlPagingQueryProvider extends AbstractSqlPagingQueryProvider; // MySQL implementation of a PagingQueryProvider using database specific features.\npublic class OraclePagingQueryProvider extends AbstractSqlPagingQueryProvider; // Oracle implementation of a PagingQueryProvider using database specific features.\npublic class PostgresPagingQueryProvider extends AbstractSqlPagingQueryProvider; // Postgres implementation of a PagingQueryProvider using database specific features.\npublic class SqlitePagingQueryProvider extends AbstractSqlPagingQueryProvider; // SQLite implementation of a PagingQueryProvider using database specific features.\n", "des": "Support classes for database specific semantics."}
{"index": 1293, "repo": "spring-core-6.0.11", "code": "Package: comparator\n\nClasses and Interfaces: \npublic class BooleanComparator extends Object implements Comparator<Boolean>, Serializable; // A Comparator for Boolean objects that can sort either true or false first.\npublic class ComparableComparator<T extends Comparable<T>> extends Object implements Comparator<T>; // Comparator that adapts Comparables to the Comparator interface.\npublic abstract class Comparators extends Object; // Convenient entry point with generically typed factory methods for common Spring Comparator variants.\npublic class InstanceComparator<T> extends Object implements Comparator<T>; // Compares objects based on an arbitrary class order.\npublic class NullSafeComparator<T> extends Object implements Comparator<T>; // A Comparator that will safely compare nulls to be lower or higher than other objects.\n", "des": "Useful generic java.util.Comparator implementations, such as an invertible comparator and a compound comparator."}
{"index": 3595, "repo": "lucene-test-framework-9.7.0", "code": "Package: search\n\nSub Packages: \npackage search.similarities; // Support for testing similarities.\n\nClasses and Interfaces: \nClass AssertingIndexSearcher; // Helper class that adds some extra checks to ensure correct usage of IndexSearcher and Weight.\nClass AssertingMatches; // An implementation of Matches with additional consistency checks.\nClass AssertingQuery; // Assertion-enabled query.\nClass AssertingScorable; // Wraps another Scorable and asserts that scores are reasonable and only called when positioned\nClass AssertingScorer; // Wraps a Scorer with additional checks\nClass BaseExplanationTestCase; // Tests primitive queries (ie: that rewrite to themselves) to insure they match the expected set of docs, and that the score of each match is equal to the value of the scores explanation.\nClass BaseRangeFieldQueryTestCase; // Abstract class to do basic tests for a RangeField query.\nClass BaseRangeFieldQueryTestCase.Range; // base class for range verification\nClass BlockScoreQueryWrapper; // Query wrapper that reduces the size of max-score blocks to more easily detect problems with the max-score logic.\nClass BulkScorerWrapperScorer; // A BulkScorer-backed scorer.\nClass CheckHits; // Utility class for asserting expected hits in tests.\nClass CheckHits.ExplanationAsserter; // Asserts that the score explanation for every document matching a query corresponds with the true score.\nClass CheckHits.ExplanationAssertingSearcher; // an IndexSearcher that implicitly checks hte explanation of every match whenever it executes a search.\nClass CheckHits.MatchesAsserter; // Asserts that the Matches from a query is non-null whenever the document its created for is a hit.\nClass CheckHits.SetCollector; // Just collects document ids into a set.\nClass DummyTotalHitCountCollector; // A dummy version of TotalHitCountCollector that doesn't shortcut using Weight.count(org.apache.lucene.index.LeafReaderContext).\nClass FixedBitSetCollector; // Collector that accumulates matching docs in a FixedBitSet\nClass MatchesTestBase; // Base class for tests checking the Weight.matches(LeafReaderContext, int) implementations\nClass MatchesTestBase.TermMatch; // Encapsulates a term position, start and end offset\n", "des": "Support for testing search components."}
{"index": 2779, "repo": "spring-security-ldap-6.1.2", "code": "Package: authentication\n\nClasses and Interfaces: \npublic abstract class AbstractLdapAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider, org.springframework.context.MessageSourceAware; // Base class for the standard LdapAuthenticationProvider and the ActiveDirectoryLdapAuthenticationProvider.\npublic abstract class AbstractLdapAuthenticator extends Object implements LdapAuthenticator, org.springframework.beans.factory.InitializingBean, org.springframework.context.MessageSourceAware; // Base class for the authenticator implementations.\npublic class BindAuthenticator extends AbstractLdapAuthenticator; // An authenticator which binds as a user.\npublic class LdapAuthenticationProvider extends AbstractLdapAuthenticationProvider; // An AuthenticationProvider implementation that authenticates against an LDAP server.\npublic interface LdapAuthenticator; // The strategy interface for locating and authenticating an Ldap user.\npublic final class NullLdapAuthoritiesPopulator extends Object implements LdapAuthoritiesPopulator;\npublic final class PasswordComparisonAuthenticator extends AbstractLdapAuthenticator; // An LdapAuthenticator which compares the login password with the value stored in the directory using a remote LDAP \"compare\" operation.\npublic class SpringSecurityAuthenticationSource extends Object implements org.springframework.ldap.core.AuthenticationSource; // An AuthenticationSource to retrieve authentication information stored in Spring Security's SecurityContextHolder.\npublic class UserDetailsServiceLdapAuthoritiesPopulator extends Object implements LdapAuthoritiesPopulator; // Simple LdapAuthoritiesPopulator which delegates to a UserDetailsService, using the name which was supplied at login as the username.\n", "des": "The LDAP authentication provider package."}
{"index": 2514, "repo": "spring-security-core-6.1.2", "code": "Package: annotation\n\nClasses and Interfaces: \n@Deprecated public interface AnnotationMetadataExtractor<A extends Annotation>;\n@Deprecated public class Jsr250MethodSecurityMetadataSource extends AbstractFallbackMethodSecurityMetadataSource;\n@Deprecated public class Jsr250SecurityConfig extends SecurityConfig;\n@Deprecated public class Jsr250Voter extends Object implements AccessDecisionVoter<Object>;\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface Secured; // Java 5 annotation for describing service layer security attributes.\n@Deprecated public class SecuredAnnotationSecurityMetadataSource extends AbstractFallbackMethodSecurityMetadataSource;\n", "des": "Support for JSR-250 and Spring Security @Secured annotations."}
{"index": 2503, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: wavefront\n\nClasses and Interfaces: \n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,WavefrontAutoConfiguration.class}) @ConditionalOnClass({com.wavefront.sdk.common.WavefrontSender.class,io.micrometer.tracing.reporter.wavefront.WavefrontSpanHandler.class}) @ConditionalOnEnabledTracing @EnableConfigurationProperties(WavefrontProperties.class) @Import(WavefrontSenderConfiguration.class) public class WavefrontTracingAutoConfiguration extends Object; // Auto-configuration for Wavefront tracing.\n", "des": "Auto-configuration for tracing with Wavefront."}
{"index": 3054, "repo": "spring-ws-core-4.0.5", "code": "Package: support\n\nSub Packages: \npackage support.destination; // Provides the DestinationProvider interface.\npackage support.interceptor; // Provides the ClientInterceptor interface, and validating interceptors.\n\nClasses and Interfaces: \npublic abstract class WebServiceAccessor extends org.springframework.xml.transform.TransformerObjectSupport implements org.springframework.beans.factory.InitializingBean; // Base class for WebServiceTemplate and other WS-accessing helpers.\n", "des": "Classes supporting the org.springframework.ws.client.core package."}
{"index": 2302, "repo": "spring-boot-3.1.1", "code": "Package: validation\n\nClasses and Interfaces: \npublic class BindValidationException extends RuntimeException; // Error thrown when validation fails during a bind operation.\npublic class ValidationBindHandler extends AbstractBindHandler; // BindHandler to apply Validators to bound results.\npublic class ValidationErrors extends Object implements Iterable<org.springframework.validation.ObjectError>; // A collection of ObjectErrors caused by bind validation failures.\n", "des": "Binding validation support."}
{"index": 2896, "repo": "spring-integration-amqp-6.1.2", "code": "Package: channel\n\nClasses and Interfaces: \npublic abstract class AbstractAmqpChannel extends org.springframework.integration.channel.AbstractMessageChannel implements org.springframework.amqp.rabbit.connection.ConnectionListener; // The base AbstractMessageChannel implementation for AMQP.\npublic class PointToPointSubscribableAmqpChannel extends AbstractAmqpChannel; // The AbstractSubscribableAmqpChannel implementation for one-to-one subscription over AMQP queue.\npublic class PollableAmqpChannel extends AbstractAmqpChannel implements org.springframework.messaging.PollableChannel, org.springframework.integration.channel.ExecutorChannelInterceptorAware; // A PollableChannel implementation that is backed by an AMQP Queue.\npublic class PublishSubscribeAmqpChannel extends AbstractAmqpChannel implements org.springframework.integration.channel.BroadcastCapableChannel; // The AbstractSubscribableAmqpChannel extension for pub-sub semantics based on the FanoutExchange.\n", "des": "Provides classes related to AMQP-backed channels."}
{"index": 2697, "repo": "spring-integration-http-6.1.2", "code": "Package: multipart\n\nClasses and Interfaces: \npublic class DefaultMultipartFileReader extends Object implements MultipartFileReader<org.springframework.web.multipart.MultipartFile>; // MultipartFileReader implementation that reads the MultipartFile content directly into a new MultipartFile instance that is not restricted to the HTTP request scope.\npublic class FileCopyingMultipartFileReader extends Object implements MultipartFileReader<org.springframework.web.multipart.MultipartFile>; // MultipartFileReader implementation that copies the MultipartFile's content to a new temporary File in the specified directory.\npublic interface MultipartFileReader<T>; // Strategy for reading MultipartFile content.\npublic class MultipartHttpInputMessage extends org.springframework.http.server.ServletServerHttpRequest implements org.springframework.web.multipart.MultipartRequest;\npublic class SimpleMultipartFileReader extends Object implements MultipartFileReader<Object>; // MultipartFileReader implementation that does not maintain metadata from the original MultipartFile instance.\npublic class UploadedMultipartFile extends Object implements org.springframework.web.multipart.MultipartFile; // A MultipartFile implementation that represents an uploaded File.\n", "des": "Provides classes supporting multipart HTTP requests."}
{"index": 2471, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: simple\n\nClasses and Interfaces: \n@AutoConfiguration(before=CompositeMeterRegistryAutoConfiguration.class, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @EnableConfigurationProperties(SimpleProperties.class) @ConditionalOnMissingBean(io.micrometer.core.instrument.MeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"simple\") public class SimpleMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to a SimpleMeterRegistry.\n@ConfigurationProperties(prefix=\"management.simple.metrics.export\") public class SimpleProperties extends Object; // @ConfigurationProperties for configuring metrics export to a SimpleMeterRegistry.\npublic class SimplePropertiesConfigAdapter extends PropertiesConfigAdapter<SimpleProperties> implements io.micrometer.core.instrument.simple.SimpleConfig; // Adapter to convert SimpleProperties to a SimpleConfig.\n", "des": "Support for exporting actuator metrics to a simple in-memory store."}
{"index": 2807, "repo": "spring-integration-ip-6.1.2", "code": "Package: ip\n\nSub Packages: \npackage ip.config; // Provides classes for configuration - parsers, namespace handlers, factory beans.\npackage ip.dsl; // Provides TCP/UDP Component support for the Java DSL.\npackage ip.event; // ApplicationEvents generated by the ip module.\npackage ip.tcp; // Base package for TCP Support.\npackage ip.udp; // Base package for UDP support.\npackage ip.util; // Provides utilities for IP support.\n\nClasses and Interfaces: \npublic abstract class AbstractInternetProtocolReceivingChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.scheduling.SchedulingAwareRunnable, CommonSocketOptions; // Base class for inbound TCP/UDP Channel Adapters.\npublic abstract class AbstractInternetProtocolSendingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler implements CommonSocketOptions, org.springframework.integration.support.management.ManageableLifecycle; // Base class for UDP MessageHandlers.\npublic interface CommonSocketOptions;\npublic final class IpHeaders extends Object; // Headers for Messages mapped from IP datagram packets.\n", "des": "Base package for IP (TCP/UDP) Support."}
{"index": 1003, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: support\n\nClasses and Interfaces: \nClass MailTransportUtils; // Collection of utility methods to work with Mail transports.\n", "des": "Classes supporting the org.springframework.ws.transport.mail package."}
{"index": 1837, "repo": "spring-test-6.0.11", "code": "Package: aot\n\nClasses and Interfaces: \npublic interface AotContextLoader extends SmartContextLoader; // Strategy interface for loading an ApplicationContext for build-time AOT processing as well as run-time AOT execution for an integration test managed by the Spring TestContext Framework.\npublic interface AotTestAttributes; // Holder for metadata specific to ahead-of-time (AOT) support in the Spring TestContext Framework.\npublic class AotTestContextInitializers extends Object; // AotTestContextInitializers provides mappings from test classes to AOT-optimized context initializers.\npublic interface AotTestExecutionListener extends TestExecutionListener; // AotTestExecutionListener is an extension of the TestExecutionListener SPI that allows a listener to optionally provide ahead-of-time (AOT) support.\npublic abstract class TestAotProcessor extends org.springframework.context.aot.AbstractAotProcessor<Void>; // Filesystem-based ahead-of-time (AOT) processing base implementation that scans the provided classpath roots for Spring integration test classes and then generates AOT artifacts for those test classes in the configured output directories.\npublic class TestContextAotException extends RuntimeException; // Thrown if an error occurs during AOT build-time processing or AOT run-time execution in the Spring TestContext Framework.\npublic class TestContextAotGenerator extends Object; // TestContextAotGenerator generates AOT artifacts for integration tests that depend on support from the Spring TestContext Framework.\npublic interface TestRuntimeHintsRegistrar; // Contract for registering RuntimeHints for integration tests run with the Spring TestContext Framework based on the ClassLoader of the deployment unit.\n", "des": "Ahead-of-time (AOT) support for the Spring TestContext Framework."}
{"index": 1246, "repo": "spring-integration-smb-6.1.2", "code": "Package: dsl\n\nClasses and Interfaces: \npublic final class Smb extends Object; // The factory for SMB components.\npublic class SmbInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileInboundChannelAdapterSpec<jcifs.smb.SmbFile,SmbInboundChannelAdapterSpec,SmbInboundFileSynchronizingMessageSource>; // A RemoteFileInboundChannelAdapterSpec for an SmbInboundFileSynchronizingMessageSource.\npublic class SmbMessageHandlerSpec extends org.springframework.integration.file.dsl.FileTransferringMessageHandlerSpec<jcifs.smb.SmbFile,SmbMessageHandlerSpec>; // A FileTransferringMessageHandlerSpec for SMB.\npublic class SmbOutboundGatewaySpec extends org.springframework.integration.file.dsl.RemoteFileOutboundGatewaySpec<jcifs.smb.SmbFile,SmbOutboundGatewaySpec>; // A RemoteFileOutboundGatewaySpec for SMB.\npublic class SmbStreamingInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileStreamingInboundChannelAdapterSpec<jcifs.smb.SmbFile,SmbStreamingInboundChannelAdapterSpec,SmbStreamingMessageSource>; // A RemoteFileStreamingInboundChannelAdapterSpec for a SmbStreamingMessageSource.\n", "des": "Provides SMB Components for the Java DSL."}
{"index": 3569, "repo": "lucene-codecs-9.7.0", "code": "Package: simpletext\n\nClasses and Interfaces: \nClass SimpleTextCodec; // plain text index format.\nClass SimpleTextCompoundFormat; // plain text compound format.\nClass SimpleTextFieldInfosFormat; // plaintext field infos format\nClass SimpleTextKnnVectorsFormat; // For debugging, curiosity, transparency only!! Do not use this codec in production.\nClass SimpleTextKnnVectorsReader; // Reads vector values from a simple text format.\nClass SimpleTextKnnVectorsWriter; // Writes vector-valued fields in a plain text format\nClass SimpleTextLiveDocsFormat; // reads/writes plaintext live docs\nClass SimpleTextNormsFormat; // plain-text norms format.\nClass SimpleTextNormsFormat.SimpleTextNormsConsumer; // Writes plain-text norms.\nClass SimpleTextNormsFormat.SimpleTextNormsProducer; // Reads plain-text norms.\nClass SimpleTextPointsFormat; // For debugging, curiosity, transparency only!! Do not use this codec in production.\nClass SimpleTextSegmentInfoFormat; // plain text segments file format.\nClass SimpleTextStoredFieldsFormat; // plain text stored fields format.\nClass SimpleTextStoredFieldsReader; // reads plaintext stored fields\nClass SimpleTextStoredFieldsWriter; // Writes plain-text stored fields.\nClass SimpleTextTermVectorsFormat; // plain text term vectors format.\nClass SimpleTextTermVectorsReader; // Reads plain-text term vectors.\nClass SimpleTextTermVectorsWriter; // Writes plain-text term vectors.\n", "des": "Simpletext Codec: writes human readable postings."}
{"index": 729, "repo": "mina-core-3.0.0-M2", "code": "Package: tcp\n\nClasses and Interfaces: \nInterface TcpSessionConfig; // A IoSessionConfig for socket based sessions.\nClass AbstractTcpClient; // Base class for TCP based Clients\nClass AbstractTcpServer; // Base class for TCP based Servers\nClass DefaultTcpSessionConfig; // Implementation for the socket session configuration.\nClass ProxyTcpSessionConfig; // This class proxy the inner java.net.Socket configuration with the SocketSessionConfig of the session.\n", "des": "Shared plumber for TCP transport implementations."}
{"index": 727, "repo": "mina-core-3.0.0-M2", "code": "Package: bio\n\nClasses and Interfaces: \nClass BioUdpServer; // A java blocking I/O based UDP server.\nClass BioUdpSession; // A IoSession for BioUdpServer\n", "des": "Transport implementation base on blocking I/O Socket"}
{"index": 450, "repo": "camel-core-3.0.0-RC1", "code": "Package: model\n\nSub Packages: \npackage model.cloud; // The JAXB POJOs for the remote service call DSL\npackage model.config; // The JAXB POJOs for various configurations for the XML Configuration of the routing rules.\npackage model.dataformat; // The JAXB POJOs for the Data Formats used to marshal and unmarshal objects to and from streams inside components\npackage model.language; // The JAXB POJOs for the Expression and Predicate plugins for the XML Configuration.\npackage model.loadbalancer; // The JAXB POJOs for the Load Balancer EIP pattern for the XML Configuration.\npackage model.rest; // The JAXB POJOs for the REST DSL\npackage model.transformer; // The JAXB POJOs for the Transformers used to transform message contents according to declared data types inside components\npackage model.validator; // The JAXB POJOs for the Transformers used to transform message contents according to declared data types inside components\n\nClasses and Interfaces: \nInterface Block; // Interface to add block featuring to the XML element type.\nInterface DefinitionPropertyPlaceholderConfigurer; // To be used for configuring property placeholder options on the EIP models.\nInterface EndpointRequiredDefinition; // A ProcessorDefinition that requires to be configured with an Endpoint such as SendDefinition.\nInterface ExecutorServiceAwareDefinition<Type extends ProcessorDefinition<?>>; // Enables definitions to support concurrency using ExecutorService\nInterface Model; // Model interface\nInterface ModelCamelContext; // Model level interface for the CamelContext\nInterface OtherAttributesAware; // Models can support being configured with any other attributes to shadow existing options to be used for property placeholders.\nInterface OutputNode; // Marker interface to mark a ProcessorDefinition that supports outputs\nInterface RouteContainer; // Container to hold Route.\nClass AdviceWithDefinition; // Temporary model used internally by advice-with\nClass AggregateDefinition; // Aggregates many messages into a single message\nClass BeanDefinition; // Calls a java bean\nClass CatchDefinition; // Catches exceptions as part of a try, catch, finally block\nClass ChoiceDefinition; // Routes messages based on a series of predicates\nClass ClaimCheckDefinition; // The Claim Check EIP allows you to replace message content with a claim check (a unique key), which can be used to retrieve the message content at a later time.\nClass Constants; // Various constants.\n", "des": "The JAXB POJOs for the XML Configuration of the routing rules."}
{"index": 3625, "repo": "solr-test-framework-9.3.0", "code": "Package: processor\n\nClasses and Interfaces: \nClass BufferingRequestProcessor;\nClass RecordingUpdateProcessorFactory; // This Factory can optionally save references to the commands it receives in BlockingQueues that tests can poll from to observe that the expected commands are executed.\nClass TrackingUpdateProcessorFactory; // This Factory is similar to RecordingUpdateProcessorFactory, but with the goal of tracking requests across multiple collections/shards/replicas in a SolrCloudTestCase.\nClass UpdateProcessorTestBase;\n", "des": "Mock classes for testing Update Processor chains."}
{"index": 428, "repo": "hive-serde-4.0.0-alpha-2", "code": "Package: typeinfo\n\nClasses and Interfaces: \nClass BaseCharTypeInfo;\nClass BaseCharUtils;\nClass CharTypeInfo;\nClass DecimalTypeInfo;\nClass HiveDecimalUtils;\nClass ListTypeInfo; // A List Type has homogeneous elements.\nClass MapTypeInfo; // A Map Type has homogeneous keys and homogeneous values.\nClass PrimitiveTypeInfo; // There are limited number of Primitive Types.\nClass StructTypeInfo; // StructTypeInfo represents the TypeInfo of a struct.\nClass TimestampLocalTZTypeInfo;\nClass TypeInfo; // Stores information about a type.\nClass TypeInfoFactory; // TypeInfoFactory can be used to create the TypeInfo object for any types.\nClass TypeInfoUtils; // TypeInfoUtils.\nClass TypeInfoUtils.PrimitiveParts;\nClass UnionTypeInfo; // UnionTypeInfo represents the TypeInfo of an union.\nClass VarcharTypeInfo;\n", "des": "This package provides the implementation of the SerDe type system."}
{"index": 2975, "repo": "pulsar-broker-3.0.0", "code": "Package: coordinator\n\nClasses and Interfaces: \npublic abstract class TransactionCoordinatorException extends TransactionException; // The base exception class for the errors thrown from Transaction Coordinator.\npublic static class TransactionCoordinatorException.UnsupportedTxnActionException extends TransactionCoordinatorException; // Exceptions are thrown when txnAction is unsupported.\n", "des": "Exceptions thrown when encountering errors in transaction buffer."}
{"index": 2839, "repo": "spring-integration-core-6.1.2", "code": "Package: integration\n\nSub Packages: \npackage integration.acks; // Provides classes related to message acknowledgment.\npackage integration.aggregator; // Provides classes related to message aggregation.\npackage integration.annotation; // Provides annotations for annotation-based configuration.\npackage integration.aop; // Provides classes to support message publication using AOP.\npackage integration.channel; // Provides classes representing various channel types.\npackage integration.codec; // Provides base classes for the Codec abstraction.\npackage integration.config; // Base package for configuration.\npackage integration.context; // Provides classes relating to application context configuration.\npackage integration.core; // Provides core classes.\npackage integration.dispatcher; // Provides classes related to dispatching messages.\npackage integration.dsl; // Root package of the Spring Integration Java DSL.\npackage integration.endpoint; // Provides core classes related to Endpoints.\npackage integration.events; // ApplicationEvents generated by the Spring Integration framework.\npackage integration.expression; // Provides classes supporting SpEL expressions.\npackage integration.filter; // Provides classes supporting the filter pattern.\npackage integration.gateway; // Provides classes supporting messaging gateways.\npackage integration.graph; // Provides classes related to the runtime object graph.\npackage integration.handler; // Provides classes implementing various types of message handler.\npackage integration.history; // Provides classes supporting the capture of message history.\npackage integration.json; // Provides classes supporting JSON in Spring Integration.\npackage integration.leader; // Temporary package until s-c-c-core is released.\npackage integration.mapping; // Provides classes related to mapping to/from message headers.\npackage integration.message; // Provides concrete Message implementations.\npackage integration.metadata; // Provides classes supporting metadata stores.\npackage integration.resource; // Provides classes related to messaging using Spring Resources\npackage integration.router; // Provides classes supporting the router pattern.\npackage integration.routingslip; // Provides classes supporting the RoutingSlip pattern.\npackage integration.scattergather; // Provides classes supporting the Scatter-Gather pattern.\npackage integration.scheduling; // Provides classes related to task scheduling.\npackage integration.selector; // Provides classes related to message selection.\npackage integration.splitter; // Provides classes supporting the splitter pattern.\npackage integration.store; // Provides classes releated to storing messages.\n\nClasses and Interfaces: \n", "des": "Base package for Spring Integration Core."}
{"index": 2356, "repo": "spring-boot-3.1.1", "code": "Package: server\n\nClasses and Interfaces: \npublic abstract class AbstractConfigurableWebServerFactory extends Object implements ConfigurableWebServerFactory; // Abstract base class for ConfigurableWebServerFactory implementations.\n@Deprecated(since=\"3.1.0\", forRemoval=true) public final class CertificateFileSslStoreProvider extends Object implements SslStoreProvider;\npublic class Compression extends Object; // Simple server-independent abstraction for compression configuration.\npublic interface ConfigurableWebServerFactory extends WebServerFactory, ErrorPageRegistry; // A configurable WebServerFactory.\npublic class Cookie extends Object; // Cookie properties.\npublic static enum Cookie.SameSite extends Enum<Cookie.SameSite>; // SameSite values.\npublic class ErrorPage extends Object; // Simple server-independent abstraction for error pages.\n@FunctionalInterface public interface ErrorPageRegistrar; // Interface to be implemented by types that register ErrorPages.\npublic class ErrorPageRegistrarBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.beans.factory.BeanFactoryAware; // BeanPostProcessor that applies all ErrorPageRegistrars from the bean factory to ErrorPageRegistry beans.\n@FunctionalInterface public interface ErrorPageRegistry; // Interface for a registry that holds ErrorPages.\n@FunctionalInterface public interface GracefulShutdownCallback; // A callback for the result of a graceful shutdown request.\npublic enum GracefulShutdownResult extends Enum<GracefulShutdownResult>; // The result of a graceful shutdown request.\npublic class Http2 extends Object; // Simple server-independent abstraction for HTTP/2 configuration.\npublic sealed class MimeMappings extends Object implements Iterable<MimeMappings.Mapping>; // Simple server-independent abstraction for mime mappings.\npublic static final class MimeMappings.Mapping extends Object; // A single mime mapping.\npublic class PortInUseException extends WebServerException; // A PortInUseException is thrown when a web server fails to start due to a port already being in use.\npublic enum Shutdown extends Enum<Shutdown>; // Configuration for shutting down a WebServer.\npublic class Ssl extends Object; // Simple server-independent abstraction for SSL configuration.\npublic static enum Ssl.ClientAuth extends Enum<Ssl.ClientAuth>; // Client authentication types.\n", "des": "Support for embedded web servers."}
{"index": 339, "repo": "hadoop-hdfs-3.3.6", "code": "Package: hdfs\n\nSub Packages: \npackage hdfs.protocolPB; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\n\nClasses and Interfaces: \nClass DFSUtil.ConfiguredNNAddress; // Represent one of the NameNodes configured in the cluster.\nClass DFSUtil.ServiceComparator; // Comparator for sorting DataNodeInfo[] based on decommissioned and entering_maintenance states.\nClass HdfsDtFetcher; // DtFetcher is an interface which permits the abstraction and separation of delegation token fetch implementaions across different packages and compilation units.\nClass SWebHdfsDtFetcher; // DtFetcher for SWebHdfsFileSystem using the base class HdfsDtFetcher impl.\nClass WebHdfsDtFetcher; // DtFetcher for WebHdfsFileSystem using the base class HdfsDtFetcher impl.\n", "des": "A distributed implementation of FileSystem."}
{"index": 3145, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface AnyAttributeFetch; // Models the requested fetching of an \"any\" attribute.\nInterface AttributeFetch; // Models a Fetch that is specifically for an attribute.\nInterface BidirectionalEntityReference; // Represents the circular side of a bi-directional entity association.\nInterface CollectionAttributeFetch; // Models the requested fetching of a persistent collection attribute.\nInterface CollectionFetchableElement; // A collection element which is a FetchSource.\nInterface CollectionFetchableIndex; // A collection index which is a FetchSource.\nInterface CollectionQuerySpace; // Models a QuerySpace for a persistent collection.\nInterface CollectionReference; // Represents a reference to a persistent collection either as a Return or as a CollectionAttributeFetch.\nInterface CollectionReturn; // Models the a persistent collection as root Return.\nInterface CompositeAttributeFetch; // Models the requested fetching of a composite attribute.\nInterface CompositeFetch; // Models the requested fetching of a composition (component/embeddable), which may or may not be an attribute.\nInterface CompositeQuerySpace; // Models a QuerySpace for a composition (component/embeddable).\nInterface EntityFetch; // Models the requested fetching of an entity attribute.\nInterface EntityIdentifierDescription; // Descriptor for the identifier of an entity as a FetchSource (which allows for key-many-to-one handling).\nInterface EntityQuerySpace; // Models a QuerySpace specific to an entity (EntityPersister).\nInterface EntityReference; // Represents a reference to an entity either as a return, fetch, or collection element or index.\nInterface EntityReturn; // Models the an entity as root Return.\nInterface Fetch; // Contract for associations that are being fetched.\nInterface FetchSource; // Contract for a FetchSource (aka, the thing that owns the fetched attribute).\nInterface Join; // Represents a join in the QuerySpace-sense.\nInterface JoinDefinedByMetadata; // Specialization of a Join that is defined by the metadata.\nInterface LoadPlan; // Describes a plan for performing a load of results.\nInterface QuerySpace; // Defines a persister reference (either entity or collection) or a composite reference.\nInterface QuerySpaces; // Models a collection of QuerySpace references and exposes the ability to find a QuerySpace by its UID\nInterface Return; // Represents a return value in the query results.\n", "des": "Defines the SPI for the building blocks that make up a LoadPlan."}
{"index": 233, "repo": "nutch-2.4", "code": "Package: components\n\nClasses and Interfaces: \nClass ColorEnumLabel<E extends java.lang.Enum<E>>; // Label which renders connection status as bootstrap label\nClass ColorEnumLabelBuilder<E extends java.lang.Enum<E>>;\nClass CpmIteratorAdapter<T>; // This is iterator adapter, which wraps iterable items with CompoundPropertyModel.\n", "des": "Contains component classes for Web UI"}
{"index": 769, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: cz\n\nClasses and Interfaces: \nClass CzechAnalyzer; // Analyzer for Czech language.\nClass CzechStemFilter; // A TokenFilter that applies CzechStemmer to stem Czech words.\nClass CzechStemFilterFactory; // Factory for CzechStemFilter.\nClass CzechStemmer; // Light Stemmer for Czech.\n", "des": "Analyzer for Czech."}
{"index": 3307, "repo": "opencms-core-15.0", "code": "Package: jobs\n\nClasses and Interfaces: \nClass CmsCreateImageSizeJob; // A schedulable OpenCms job to calculate image size information.\nClass CmsDeleteExpiredResourcesJob; // A schedulable OpenCms job to delete expired resources.\nClass CmsHistoryClearJob; // A schedulable OpenCms job to clear the history.\nClass CmsImageCacheCleanupJob; // A schedulable OpenCms job that clear the image cache for the scaled images created by the CmsImageLoader.\nClass CmsPublishJob; // Scheduled job for time based publishing.\nClass CmsPublishScheduledJob; // Scheduled job for time based publishing.\nClass CmsRemoveOldDbLogEntriesJob; // A scheduled job which removes entries older than a given amount of time from the CMS_LOG table, to improve database performance.\nClass CmsSearchIndexOptimizeJob; // A schedulable OpenCms job that optimizes the Lucene based search indexes at runtime.\nClass CmsStaticExportJob; // A schedulable OpenCms job to write a complete static export (e.g.\nClass CmsUnsubscribeDeletedResourcesJob; // A scheduled OpenCms job to unsubscribe deleted resources.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Some predefined implementations for often used scheduled job tasks."}
{"index": 808, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: standard\n\nClasses and Interfaces: \nClass ClassicAnalyzer; // Filters ClassicTokenizer with ClassicFilter, LowerCaseFilter and StopFilter, using a list of English stop words.\nClass ClassicFilter; // Normalizes tokens extracted with ClassicTokenizer.\nClass ClassicFilterFactory; // Factory for ClassicFilter.\nClass ClassicTokenizer; // A grammar-based tokenizer constructed with JFlex\nClass ClassicTokenizerFactory; // Factory for ClassicTokenizer.\nClass StandardTokenizerFactory; // Factory for StandardTokenizer.\nClass UAX29URLEmailAnalyzer; // Filters UAX29URLEmailTokenizer with LowerCaseFilter and StopFilter, using a list of English stop words.\nClass UAX29URLEmailTokenizer; // This class implements Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29 URLs and email addresses are also tokenized according to the relevant RFCs.\nClass UAX29URLEmailTokenizerFactory; // Factory for UAX29URLEmailTokenizer.\nClass UAX29URLEmailTokenizerImpl; // This class implements Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29 URLs and email addresses are also tokenized according to the relevant RFCs.\n", "des": "Fast, general-purpose grammar-based tokenizers."}
{"index": 3179, "repo": "tomcat-api-10.1", "code": "Package: logging\n\nClasses and Interfaces: \nInterface Log; // A simple logging interface abstracting logging APIs.\nClass LogFactory; // This is a modified LogFactory that uses a simple ServiceLoader based discovery mechanism with a default of using JDK based logging.\nClass LogConfigurationException; // An exception that is thrown only if a suitable LogFactory or Log instance cannot be created by the corresponding factory methods.\n", "des": "Overview"}
{"index": 1914, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: jpa\n\nClasses and Interfaces: \n@AutoConfiguration(after={HibernateJpaAutoConfiguration.class,TaskExecutionAutoConfiguration.class}) @ConditionalOnBean(javax.sql.DataSource.class) @ConditionalOnClass(org.springframework.data.jpa.repository.JpaRepository.class) @ConditionalOnMissingBean({org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.class,org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension.class}) @ConditionalOnProperty(prefix=\"spring.data.jpa.repositories\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) @Import(org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration.JpaRepositoriesImportSelector.class) public class JpaRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's JPA Repositories.\n", "des": "Auto-configuration for Spring Data JPA."}
{"index": 2845, "repo": "spring-integration-core-6.1.2", "code": "Package: interceptor\n\nClasses and Interfaces: \npublic class GlobalChannelInterceptorWrapper extends Object implements org.springframework.core.Ordered;\npublic class MessageSelectingInterceptor extends Object implements org.springframework.messaging.support.ChannelInterceptor; // A ChannelInterceptor that delegates to a list of MessageSelectors to decide whether a Message should be accepted on the MessageChannel.\npublic class ObservationPropagationChannelInterceptor extends ThreadStatePropagationChannelInterceptor<io.micrometer.observation.Observation>; // The ExecutorChannelInterceptor implementation responsible for an Observation propagation from one message flow's thread to another through the MessageChannels involved in the flow.\npublic abstract class ThreadStatePropagationChannelInterceptor<S> extends Object implements org.springframework.messaging.support.ExecutorChannelInterceptor; // The ExecutorChannelInterceptor implementation responsible for the Thread (any?) state propagation from one message flow's thread to another through the MessageChannels involved in the flow.\npublic interface VetoCapableInterceptor; // ChannelInterceptors implementing this interface can veto global interception of a particular channel.\n@ManagedResource public class WireTap extends Object implements org.springframework.messaging.support.ChannelInterceptor, ManageableLifecycle, VetoCapableInterceptor, org.springframework.beans.factory.BeanFactoryAware; // A ChannelInterceptor that publishes a copy of the intercepted message to a secondary target while still sending the original message to the main channel.\n", "des": "Provides classes related to channel interception."}
{"index": 2307, "repo": "spring-boot-3.1.1", "code": "Package: env\n\nClasses and Interfaces: \npublic class ConfigTreePropertySource extends org.springframework.core.env.EnumerablePropertySource<Path> implements OriginLookup<String>; // PropertySource backed by a directory tree that contains files for each value.\npublic static enum ConfigTreePropertySource.Option extends Enum<ConfigTreePropertySource.Option>; // Property source options.\npublic static interface ConfigTreePropertySource.Value extends CharSequence, org.springframework.core.io.InputStreamSource; // A value returned from the property source which exposes the contents of the property file.\n@FunctionalInterface public interface EnvironmentPostProcessor; // Allows for customization of the application's Environment prior to the application context being refreshed.\npublic class EnvironmentPostProcessorApplicationListener extends Object implements org.springframework.context.event.SmartApplicationListener, org.springframework.core.Ordered; // SmartApplicationListener used to trigger EnvironmentPostProcessors registered in the spring.factories file.\n@FunctionalInterface public interface EnvironmentPostProcessorsFactory; // Factory interface used by the EnvironmentPostProcessorApplicationListener to create the EnvironmentPostProcessor instances.\npublic final class OriginTrackedMapPropertySource extends org.springframework.core.env.MapPropertySource implements OriginLookup<String>; // OriginLookup backed by a Map containing OriginTrackedValues.\npublic class PropertiesPropertySourceLoader extends Object implements PropertySourceLoader; // Strategy to load '.properties' files into a PropertySource.\npublic interface PropertySourceLoader; // Strategy interface located through SpringFactoriesLoader and used to load a PropertySource.\npublic class RandomValuePropertySource extends org.springframework.core.env.PropertySource<Random>; // PropertySource that returns a random value for any property that starts with \"random.\".\npublic class RandomValuePropertySourceEnvironmentPostProcessor extends Object implements EnvironmentPostProcessor, org.springframework.core.Ordered; // EnvironmentPostProcessor to add the RandomValuePropertySource.\npublic class SpringApplicationJsonEnvironmentPostProcessor extends Object implements EnvironmentPostProcessor, org.springframework.core.Ordered; // An EnvironmentPostProcessor that parses JSON from spring.application.json or equivalently SPRING_APPLICATION_JSON and adds it as a map property source to the Environment.\n", "des": "Spring Environment support."}
{"index": 1773, "repo": "spring-data-mongodb-4.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class MappingMongoEntityInformation<T,ID> extends PersistentEntityInformation<T,ID> implements MongoEntityInformation<T,ID>; // MongoEntityInformation implementation using a MongoPersistentEntity instance to lookup the necessary information.\n@SupportedAnnotationTypes({\"com.querydsl.core.annotations.*\",\"org.springframework.data.mongodb.core.mapping.*\"}) @SupportedSourceVersion(RELEASE_6) public class MongoAnnotationProcessor extends com.querydsl.apt.AbstractQuerydslProcessor; // Annotation processor to create Querydsl query types for QueryDsl annotated classes.\npublic class MongoRepositoryFactory extends RepositoryFactorySupport; // Factory to create MongoRepository instances.\npublic class MongoRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends RepositoryFactoryBeanSupport<T,S,ID>; // FactoryBean to create MongoRepository instances.\npublic class QuerydslMongoPredicateExecutor<T> extends Object implements QuerydslPredicateExecutor<T>; // MongoDB-specific QuerydslPredicateExecutor that allows execution Predicates in various forms.\npublic abstract class QuerydslRepositorySupport extends Object; // Base class to create repository implementations based on Querydsl.\npublic class ReactiveMongoRepositoryFactory extends ReactiveRepositoryFactorySupport; // Factory to create ReactiveMongoRepository instances.\npublic class ReactiveMongoRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends RepositoryFactoryBeanSupport<T,S,ID>; // FactoryBean to create ReactiveMongoRepository instances.\npublic class ReactiveQuerydslMongoPredicateExecutor<T> extends Object implements ReactiveQuerydslPredicateExecutor<T>; // MongoDB-specific QuerydslPredicateExecutor that allows execution Predicates in various forms.\npublic class SimpleMongoRepository<T,ID> extends Object implements MongoRepository<T,ID>; // Repository base implementation for Mongo.\npublic class SimpleReactiveMongoRepository<T,ID extends Serializable> extends Object implements ReactiveMongoRepository<T,ID>; // Reactive repository base implementation for Mongo.\npublic class SpringDataMongodbQuery<T> extends com.querydsl.mongodb.document.AbstractMongodbQuery<Q> implements com.querydsl.core.Fetchable<T>; // Spring Data specific simple Fetchable Query implementation.\n", "des": "Support infrastructure for query derivation of MongoDB specific repositories."}
{"index": 378, "repo": "zookeeper-jute-3.8.2", "code": "Package: generated\n\nClasses and Interfaces: \nInterface RccConstants; // Token literal values and constants.\nClass Rcc;\nClass RccTokenManager; // Token Manager.\nClass SimpleCharStream; // An implementation of interface CharStream, where the stream is assumed to contain only ASCII characters (without unicode processing).\nClass Token; // Describes the input token stream.\nClass ParseException; // This exception is thrown when parse errors are encountered.\nClass TokenMgrError; // Token Manager Error.\n", "des": "This package contains code generated by JavaCC from the Hadoop record syntax file rcc.jj."}
{"index": 1433, "repo": "spring-boot-actuator-3.1.1", "code": "Package: session\n\nClasses and Interfaces: \n@Endpoint(id=\"sessions\") public class SessionsEndpoint extends Object; // @Endpoint to expose a user's Sessions.\npublic static final class SessionsEndpoint.SessionDescriptor extends Object implements OperationResponseBody; // Description of user's session.\npublic static final class SessionsEndpoint.SessionsDescriptor extends Object implements OperationResponseBody; // Description of user's sessions.\n", "des": "Actuator support for Spring Session."}
{"index": 732, "repo": "spring-data-solr-4.3.15", "code": "Package: core\n\nSub Packages: \npackage core.convert; // All the Converters go here.\npackage core.geo; // Apache Solr geo specifics.\npackage core.mapping; // All the mapping things!\npackage core.query; // Query abstractions for SolrQuery.\npackage core.schema; // Everything Apache Solr schema specific.\n\nClasses and Interfaces: \nInterface QueryParser; // The QueryParser takes a spring-data-solr Query and returns a SolrQuery.\nInterface QueryParserBase.PredicateProcessor; // QueryParserBase.PredicateProcessor creates a solr reable query string representation for a given Criteria.Predicate\nInterface SolrCallback<T>; // Callback interface for data access code that works with SolrClient.\nInterface SolrOperations; // Interface that specifies a basic set of Solr operations.\nInterface SolrTransactionSynchronizationAdapter.CompletionDelegate;\nClass DefaultQueryParser; // Implementation of QueryParser.\nClass QueryParserBase<QUERYTPYE extends SolrDataQuery>; // Base Implementation of QueryParser providing common functions for creating SolrQuery.\nClass QueryParsers;\nClass SolrExceptionTranslator; // Implementation of PersistenceExceptionTranslator capable of translating SolrServerException instances to Spring's DataAccessException hierarchy.\nClass SolrTemplate; // Implementation of SolrOperations\nClass SolrTransactionSynchronizationAdapter;\nClass SolrTransactionSynchronizationAdapter.CommitTransaction;\nClass SolrTransactionSynchronizationAdapter.RollbackTransaction;\nClass SolrTransactionSynchronizationAdapterBuilder;\nClass TermsQueryParser; // TermsQueryParser is capable of building SolrQuery for TermsQuery\nEnum RequestMethod; // HTTP request types supported by SolrRequest.\n", "des": "Provides the classes necessary for Solr support."}
{"index": 2755, "repo": "spring-beans-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \npublic interface AnnotatedBeanDefinition extends BeanDefinition; // Extended BeanDefinition interface that exposes AnnotationMetadata about its bean class - without requiring the class to be loaded yet.\npublic class AnnotatedGenericBeanDefinition extends GenericBeanDefinition implements AnnotatedBeanDefinition; // Extension of the GenericBeanDefinition class, adding support for annotation metadata exposed through the AnnotatedBeanDefinition interface.\npublic class AnnotationBeanWiringInfoResolver extends Object implements BeanWiringInfoResolver; // BeanWiringInfoResolver that uses the Configurable annotation to identify which classes need autowiring.\npublic enum Autowire extends Enum<Autowire>; // Enumeration determining autowiring status: that is, whether a bean should have its dependencies automatically injected by the Spring container using setter injection.\n@Target({CONSTRUCTOR,METHOD,PARAMETER,FIELD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface Autowired; // Marks a constructor, field, setter method, or config method as to be autowired by Spring's dependency injection facilities.\npublic class AutowiredAnnotationBeanPostProcessor extends Object implements SmartInstantiationAwareBeanPostProcessor, MergedBeanDefinitionPostProcessor, BeanRegistrationAotProcessor, org.springframework.core.PriorityOrdered, BeanFactoryAware; // BeanPostProcessor implementation that autowires annotated fields, setter methods, and arbitrary config methods.\npublic abstract class BeanFactoryAnnotationUtils extends Object; // Convenience methods performing bean lookups related to Spring-specific annotations, for example Spring's @Qualifier annotation.\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented public @interface Configurable; // Marks a class as being eligible for Spring-driven configuration.\npublic class CustomAutowireConfigurer extends Object implements BeanFactoryPostProcessor, BeanClassLoaderAware, org.springframework.core.Ordered; // A BeanFactoryPostProcessor implementation that allows for convenient registration of custom autowire qualifier types.\npublic class InitDestroyAnnotationBeanPostProcessor extends Object implements DestructionAwareBeanPostProcessor, MergedBeanDefinitionPostProcessor, BeanRegistrationAotProcessor, org.springframework.core.PriorityOrdered, Serializable; // BeanPostProcessor implementation that invokes annotated init and destroy methods.\npublic class InjectionMetadata extends Object; // Internal class for managing injection metadata.\npublic abstract static class InjectionMetadata.InjectedElement extends Object; // A single injected element.\n", "des": "Support package for annotation-driven bean configuration."}
{"index": 2231, "repo": "spring-data-commons-3.1.2", "code": "Package: classreading\n\nClasses and Interfaces: \n@Deprecated public interface MethodsMetadataReader extends MetadataReader;\n@Deprecated public class MethodsMetadataReaderFactory extends SimpleMetadataReaderFactory;\n", "des": "Support classes for reading annotation and class-level metadata."}
{"index": 3482, "repo": "opennlp-uima-2.2.0", "code": "Package: chunker\n\nClasses and Interfaces: \nInterface ChunkerModelResource;\nClass Chunker; // OpenNLP Chunker annotator.\nClass ChunkerModelResourceImpl;\n", "des": "Package related to finding non-recursive syntactic annotation such as noun phrase chunks."}
{"index": 2468, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: prometheus\n\nClasses and Interfaces: \n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.prometheus.PrometheusMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"prometheus\") @EnableConfigurationProperties(PrometheusProperties.class) public class PrometheusMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Prometheus.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(io.prometheus.client.exporter.PushGateway.class) @ConditionalOnProperty(prefix=\"management.prometheus.metrics.export.pushgateway\", name=\"enabled\") public static class PrometheusMetricsExportAutoConfiguration.PrometheusPushGatewayConfiguration extends Object; // Configuration for Prometheus Pushgateway.\n@Configuration(proxyBeanMethods=false) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.metrics.export.prometheus.PrometheusScrapeEndpoint.class) public static class PrometheusMetricsExportAutoConfiguration.PrometheusScrapeEndpointConfiguration extends Object;\n@ConfigurationProperties(prefix=\"management.prometheus.metrics.export\") public class PrometheusProperties extends Object; // @ConfigurationProperties for configuring metrics export to Prometheus.\npublic static class PrometheusProperties.Pushgateway extends Object; // Configuration options for push-based interaction with Prometheus.\n", "des": "Support for exporting actuator metrics to Prometheus."}
{"index": 1239, "repo": "spring-hateoas-2.1.2", "code": "Package: vnderrors\n\nClasses and Interfaces: \n@Deprecated public class VndErrors extends CollectionModel<VndErrors.VndError>;\n@Deprecated public static class VndErrors.VndError extends RepresentationModel<VndErrors.VndError>;\n", "des": "Vnd.Error media type."}
{"index": 213, "repo": "nutch-2.4", "code": "Package: parse\n\nSub Packages: \npackage parse.html; // An HTML document parsing plugin.\npackage parse.js; // Parser and parse filter plugin to extract all (possible) links from JavaScript files and embedded JavaScript code snippets.\npackage parse.tika; // Parse various document formats with help of Apache Tika.\npackage parse.metatags; // Parse filter to extract meta tags: keywords, description, etc.\n\nClasses and Interfaces: \nInterface ParseFilter; // Extension point for DOM-based parsers.\nInterface Parser; // A parser for content generated by a Protocol implementation.\nInterface ParseStatusCodes;\nClass HTMLMetaTags; // This class holds the information about HTML \"meta\" tags extracted from a page.\nClass NutchSitemapParse;\nClass NutchSitemapParser;\nClass Outlink;\nClass OutlinkExtractor; // Extractor to extract Outlinks / URLs from plain text using Regular Expressions.\nClass Parse;\nClass ParseFilters; // Creates and caches ParseFilter implementing plugins.\nClass ParsePluginList; // This class represents a natural ordering for which parsing plugin should get called for a particular mimeType.\nClass ParsePluginsReader; // A reader to load the information stored in the $NUTCH_HOME/conf/parse-plugins.xml file.\nClass ParserChecker; // Parser checker, useful for testing parser.\nClass ParserFactory; // Creates and caches Parser plugins.\nClass ParserJob;\nClass ParserJob.ParserMapper;\nClass ParseStatusUtils;\nClass ParseUtil; // A Utility class containing methods to simply perform parsing utilities such as iterating through a preferred list of Parsers to obtain Parse objects.\nEnum ParseUtil.ChangeFrequency;\nClass ParseException;\nClass ParserNotFound;\n", "des": "The Parse interface and related classes."}
{"index": 3263, "repo": "opencms-core-15.0", "code": "Package: mysql\n\nClasses and Interfaces: \nClass CmsHistoryDriver; // MySQL implementation of the history driver methods.\nClass CmsProjectDriver; // MySQL implementation of the project driver methods.\nClass CmsSqlManager; // MySQL implementation of the SQL manager.\nClass CmsSubscriptionDriver; // MySQL implementation of the subscription driver.\nClass CmsUserDriver; // MySQL implementation of the user driver methods.\nClass CmsVfsDriver; // MySQL implementation of the VFS driver methods.\n", "des": "MySQL4+ implementation of the OpenCms database connector."}
{"index": 1126, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: deviceframework\n\nClasses and Interfaces: \nClass AssignedDevice; // Device wrapper class used for NM REST API.\nClass DeviceMappingManager; // Schedule device resource based on requirements and do book keeping It holds all device type resource and can do scheduling as a default scheduler.\nClass DevicePluginAdapter; // The DevicePluginAdapter will adapt existing hooks.\nClass DeviceResourceDockerRuntimePluginImpl; // Bridge DevicePlugin and the hooks related to lunch Docker container.\nClass DeviceResourceHandlerImpl; // The Hooks into container lifecycle.\nClass DeviceResourceUpdaterImpl; // Hooks into NodeStatusUpdater to update resource.\nClass ShellWrapper; // A shell Wrapper to ease testing.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1643, "repo": "jena-core-4.9.0", "code": "Package: enhanced\n\nClasses and Interfaces: \npublic class AlreadyLinkedViewException extends JenaException; // Exception to throw when adding a view to a Polymorphic discovers that the view to add is already on a ring.\npublic class BuiltinPersonalities extends Object; // The personalities that are provided for the existing Jena classes.\npublic class EnhGraph extends Object; // EnhGraph wraps a plain graph and contains enhanced nodes that wrap the plain nodes of the plain graph.\npublic class EnhNode extends Polymorphic<RDFNode> implements FrontsNode; // A specialisation of Polymorphic that models an extended node in a an extended graph.\npublic class GraphPersonality extends Personality<RDFNode>; // Personalities for Graphs.\npublic abstract class Implementation extends Object; // Interface defining a generic factory interface for generating enhanced nodes from normal graph nodes.\npublic class NodePersonality extends Personality<RDFNode>; // Personalities for nodes.\npublic class Personality<T> extends Object; // Defines a set of permitted mappings from [interface] Class objects to Implementation factories that can generate instances of the facet represented by the Class.\npublic class PersonalityConfigException extends RuntimeException; // Exception denoting that a personality is misconfigured in some way.\npublic abstract class Polymorphic<T> extends Object; // Abstract base class for all polymorphic RDF objects, especially enhanced node and enhanced graph.\npublic class UnsupportedPolymorphismException extends JenaException; // Exception to throw if an enhanced graph does not support polymorphism to a specific class.\n", "des": "This package defines the enhanced node and graph classes; an enhanced node is one embedded in a particular enhanced graph."}
{"index": 2248, "repo": "spring-data-keyvalue-3.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic abstract class KeyValueRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport; // RepositoryConfigurationExtension for KeyValueRepository.\n@Documented @Retention(RUNTIME) @Target(ANNOTATION_TYPE) public @interface QueryCreatorType; // Annotation to customize the query creator type to be used for a specific store.\n", "des": "Support infrastructure for the configuration of key/value specific repositories."}
{"index": 476, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: expansion\n\nClasses and Interfaces: \nInterface ExternalTransformRegistrar; // A registrar which contains a mapping from URNs to available ExternalTransformBuilders.\n", "des": "Contains classes needed to expose transforms to other SDKs."}
{"index": 3516, "repo": "opennlp-tools-2.2.0", "code": "Package: brat\n\nClasses and Interfaces: \nClass AnnotationConfiguration;\nClass AnnotatorNoteAnnotation;\nClass AttributeAnnotation;\nClass BratAnnotation;\nClass BratAnnotationStream; // Reads the annotations from the brat .ann annotation file.\nClass BratDocument; // Brat (brat rapid annotation tool) is based on the stav visualiser which was originally made in order to visualise BioNLP'11 Shared Task data.\nClass BratDocumentParser;\nClass BratDocumentStream;\nClass BratNameSampleStream; // Generates Name Sample objects for a Brat Document object.\nClass BratNameSampleStreamFactory;\nClass EventAnnotation;\nClass RelationAnnotation;\nClass SegmenterObjectStream<S,​T>;\nClass SpanAnnotation;\n", "des": "Experimental package related to the corpus format used by the \"brat rapid annotation tool\" (brat)."}
{"index": 1349, "repo": "spring-integration-kafka-6.1.2", "code": "Package: inbound\n\nClasses and Interfaces: \npublic class KafkaErrorSendingMessageRecoverer extends org.springframework.integration.core.ErrorMessagePublisher implements org.springframework.kafka.listener.ConsumerRecordRecoverer; // An extension of ErrorMessagePublisher that can be used in a CommonErrorHandler for recovering Kafka delivery failures.\npublic interface KafkaInboundEndpoint; // Implementations of this interface will generally support a retry template for retrying incoming deliveries and this supports adding common attributes to the retry context.\npublic class KafkaInboundGateway<K,V,R> extends org.springframework.integration.gateway.MessagingGatewaySupport implements KafkaInboundEndpoint, org.springframework.integration.core.Pausable, org.springframework.integration.context.OrderlyShutdownCapable; // Inbound gateway.\npublic class KafkaMessageDrivenChannelAdapter<K,V> extends org.springframework.integration.endpoint.MessageProducerSupport implements KafkaInboundEndpoint, org.springframework.integration.context.OrderlyShutdownCapable, org.springframework.integration.core.Pausable; // Message-driven channel adapter.\npublic static enum KafkaMessageDrivenChannelAdapter.ListenerMode extends Enum<KafkaMessageDrivenChannelAdapter.ListenerMode>; // The listener mode for the container, record or batch.\npublic class KafkaMessageSource<K,V> extends org.springframework.integration.endpoint.AbstractMessageSource<Object> implements org.springframework.integration.core.Pausable; // Polled message source for Apache Kafka.\npublic static class KafkaMessageSource.KafkaAckCallback<K,V> extends Object implements org.springframework.integration.acks.AcknowledgmentCallback, org.springframework.kafka.support.Acknowledgment; // AcknowledgmentCallback for Kafka.\npublic static record KafkaMessageSource.KafkaAckCallbackFactory<K,V>(org.springframework.kafka.listener.ConsumerProperties consumerProperties) extends Record implements org.springframework.integration.acks.AcknowledgmentCallbackFactory<KafkaMessageSource.KafkaAckInfo<K,V>>; // AcknowledgmentCallbackFactory for KafkaAckInfo.\n", "des": "Provides Spring Integration inbound components for Apache Kafka."}
{"index": 1, "repo": "connect-api-3.5.0", "code": "Package: connector\n\nSub Packages: \npackage connector.policy; // Provides pluggable interfaces for policies controlling how users can configure connectors.\n\nClasses and Interfaces: \nInterface ConnectorContext; // ConnectorContext allows Connectors to proactively interact with the Kafka Connect runtime.\nInterface Task; // Tasks contain the code that actually copies data to/from another system.\nClass Connector; // Connectors manage integration of Kafka Connect with another system, either as an input that ingests data into Kafka or an output that passes data to an external system.\nClass ConnectRecord<R extends ConnectRecord<R>>; // Base class for records containing data to be copied to/from Kafka.\n", "des": "Provides interfaces for Connector and Task implementations."}
{"index": 2848, "repo": "spring-integration-core-6.1.2", "code": "Package: config\n\nSub Packages: \npackage config.annotation; // Provides classes supporting annotation-based configuration.\npackage config.xml; // Provides supporting XML-based configuration - parsers, namespace handlers.\n\nClasses and Interfaces: \npublic abstract class AbstractEvaluationContextFactoryBean extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // Abstract class for integration evaluation context factory beans.\npublic abstract class AbstractMethodAnnotationPostProcessor<T extends Annotation> extends Object implements MethodAnnotationPostProcessor<T>, org.springframework.beans.factory.BeanFactoryAware; // Base class for Method-level annotation post-processors.\nprotected static record AbstractMethodAnnotationPostProcessor.BeanDefinitionPropertiesMapper(org.springframework.beans.factory.config.BeanDefinition beanDefinition, List<Annotation> annotations) extends Record;\npublic abstract class AbstractSimpleMessageHandlerFactoryBean<H extends org.springframework.messaging.MessageHandler> extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.messaging.MessageHandler>, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationEventPublisherAware; // Factory bean to create and configure a MessageHandler.\npublic abstract class AbstractStandardMessageHandlerFactoryBean extends AbstractSimpleMessageHandlerFactoryBean<org.springframework.messaging.MessageHandler> implements org.springframework.beans.factory.DisposableBean; // Base class for FactoryBeans that create standard MessageHandler instances.\npublic class AggregatorAnnotationPostProcessor extends AbstractMethodAnnotationPostProcessor<Aggregator>; // Post-processor for the @Aggregator annotation.\npublic class AggregatorFactoryBean extends AbstractSimpleMessageHandlerFactoryBean<AggregatingMessageHandler>; // FactoryBean to create an AggregatingMessageHandler.\npublic class BridgeFromAnnotationPostProcessor extends AbstractMethodAnnotationPostProcessor<BridgeFrom>; // Post-processor for the @BridgeFrom annotation.\npublic class BridgeToAnnotationPostProcessor extends AbstractMethodAnnotationPostProcessor<BridgeTo>; // Post-processor for the @BridgeTo annotation.\n", "des": "Base package for configuration."}
{"index": 3011, "repo": "spring-web-6.0.11", "code": "Package: smile\n\nClasses and Interfaces: \npublic class MappingJackson2SmileHttpMessageConverter extends AbstractJackson2HttpMessageConverter; // Implementation of HttpMessageConverter that can read and write Smile data format (\"binary JSON\") using the dedicated Jackson 2.x extension.\n", "des": "Provides an HttpMessageConverter for the Smile data format (\"binary JSON\")."}
{"index": 3702, "repo": "solr-core-9.3.0", "code": "Package: neural\n\nClasses and Interfaces: \nClass KnnQParser;\nClass KnnQParserPlugin; // A neural query parser to run K-nearest neighbors search on Dense Vector fields.\n", "des": "APIs and classes for implementing Neural (Dense Retrieval) QueryParsers."}
{"index": 1842, "repo": "spring-test-6.0.11", "code": "Package: jupiter\n\nSub Packages: \npackage jupiter.web; // Web support for integrating the Spring TestContext Framework with the JUnit Jupiter extension model in JUnit 5.\n\nClasses and Interfaces: \n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @ExtendWith(DisabledIfCondition.class) public @interface DisabledIf; // @DisabledIf is used to signal that the annotated test class or test method is disabled and should not be executed if the supplied DisabledIf.expression() evaluates to true.\npublic class DisabledIfCondition extends Object; // DisabledIfCondition is an ExecutionCondition that supports the @DisabledIf annotation when using the Spring TestContext Framework in conjunction with JUnit 5's Jupiter programming model.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @ExtendWith(EnabledIfCondition.class) public @interface EnabledIf; // @EnabledIf is used to signal that the annotated test class or test method is enabled and should be executed if the supplied EnabledIf.expression() evaluates to true.\npublic class EnabledIfCondition extends Object; // EnabledIfCondition is an ExecutionCondition that supports the @EnabledIf annotation when using the Spring TestContext Framework in conjunction with JUnit 5's Jupiter programming model.\npublic class SpringExtension extends Object implements org.junit.jupiter.api.extension.BeforeAllCallback, org.junit.jupiter.api.extension.AfterAllCallback, org.junit.jupiter.api.extension.TestInstancePostProcessor, org.junit.jupiter.api.extension.BeforeEachCallback, org.junit.jupiter.api.extension.AfterEachCallback, org.junit.jupiter.api.extension.BeforeTestExecutionCallback, org.junit.jupiter.api.extension.AfterTestExecutionCallback, org.junit.jupiter.api.extension.ParameterResolver; // SpringExtension integrates the Spring TestContext Framework into JUnit 5's Jupiter programming model.\n", "des": "Core support for integrating the Spring TestContext Framework with the JUnit Jupiter extension model in JUnit 5."}
{"index": 2317, "repo": "spring-boot-3.1.1", "code": "Package: log4j2\n\nClasses and Interfaces: \n@Plugin(name=\"color\", category=\"Converter\") public final class ColorConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter; // Log4j2 LogEventPatternConverter colors output using the AnsiOutput class.\n@Plugin(name=\"ExtendedWhitespaceThrowablePatternConverter\", category=\"Converter\") public final class ExtendedWhitespaceThrowablePatternConverter extends org.apache.logging.log4j.core.pattern.ThrowablePatternConverter; // ThrowablePatternConverter that adds some additional whitespace around the stack trace.\npublic class Log4J2LoggingSystem extends AbstractLoggingSystem; // LoggingSystem for Log4j 2.\n@Order(2147483647) public static class Log4J2LoggingSystem.Factory extends Object implements LoggingSystemFactory; // LoggingSystemFactory that returns Log4J2LoggingSystem if possible.\n@Plugin(name=\"SpringBootConfigurationFactory\", category=\"ConfigurationFactory\") public class SpringBootConfigurationFactory extends org.apache.logging.log4j.core.config.ConfigurationFactory; // Spring Boot ConfigurationFactory that customizes Log4J2's default configuration to: Prevent logger warnings from being printed when the application first starts.\npublic class SpringBootPropertySource extends Object implements org.apache.logging.log4j.util.PropertySource; // Spring Boot PropertySource that disables Log4j2's shutdown hook.\n@Plugin(name=\"WhitespaceThrowablePatternConverter\", category=\"Converter\") public final class WhitespaceThrowablePatternConverter extends org.apache.logging.log4j.core.pattern.ThrowablePatternConverter; // ThrowablePatternConverter that adds some additional whitespace around the stack trace.\n", "des": "Support for the Log4j 2 logging library."}
{"index": 1586, "repo": "spring-websocket-6.0.11", "code": "Package: adapter\n\nSub Packages: \npackage adapter.jetty; // Adapter classes for the Jetty WebSocket API.\npackage adapter.standard; // Adapter classes for the standard Jakarta WebSocket API.\n\nClasses and Interfaces: \npublic abstract class AbstractWebSocketSession<T> extends Object implements NativeWebSocketSession; // An abstract base class for implementations of WebSocketSession.\npublic interface NativeWebSocketSession extends WebSocketSession; // A WebSocketSession that exposes the underlying, native WebSocketSession through a getter.\n", "des": "Classes adapting Spring's WebSocket API to and from WebSocket providers."}
{"index": 2234, "repo": "spring-data-commons-3.1.2", "code": "Package: config\n\nClasses and Interfaces: \n@Retention(RUNTIME) @Target({TYPE,ANNOTATION_TYPE}) @Inherited @Import({SpringDataWebConfigurationImportSelector.class,QuerydslActivator.class}) public @interface EnableSpringDataWebSupport; // Annotation to automatically register the following beans for usage with Spring MVC.\npublic static class EnableSpringDataWebSupport.QuerydslActivator extends Object implements ImportSelector; // Import selector to register QuerydslWebConfiguration as configuration class if Querydsl is on the classpath.\npublic static class EnableSpringDataWebSupport.SpringDataWebConfigurationImportSelector extends Object implements ImportSelector, ResourceLoaderAware; // Import selector to import the appropriate configuration class depending on whether Spring HATEOAS is present on the classpath.\n@Configuration(proxyBeanMethods=false) public class HateoasAwareSpringDataWebConfiguration extends SpringDataWebConfiguration; // JavaConfig class to register PagedResourcesAssembler, PagedResourcesAssemblerArgumentResolver, SlicedResourcesAssembler and SlicedResourcesAssemblerArgumentResolver.\n@FunctionalInterface public interface PageableHandlerMethodArgumentResolverCustomizer; // Callback interface that can be implemented by beans wishing to customize the PageableHandlerMethodArgumentResolver configuration.\n@Configuration(proxyBeanMethods=false) public class ProjectingArgumentResolverRegistrar extends Object; // Configuration class to register a BeanPostProcessor to augment RequestMappingHandlerAdapter with a ProxyingHandlerMethodArgumentResolver.\n@Configuration(proxyBeanMethods=false) public class QuerydslWebConfiguration extends Object implements WebMvcConfigurer; // Querydsl-specific web configuration for Spring Data.\n@Configuration(proxyBeanMethods=false) public class ReactiveQuerydslWebConfiguration extends Object implements WebFluxConfigurer; // Querydsl-specific web configuration for Spring Data.\npublic interface SortHandlerMethodArgumentResolverCustomizer; // Callback interface that can be implemented by beans wishing to customize the SortHandlerMethodArgumentResolver configuration.\npublic class SpringDataJacksonConfiguration extends Object implements SpringDataJacksonModules; // JavaConfig class to export Jackson specific configuration.\npublic interface SpringDataJacksonModules; // Marker interface to describe configuration classes that ship Jackson modules that are supposed to be added to the Jackson ObjectMapper configured for EnableSpringDataWebSupport.\n", "des": "Spring Data web configuration."}
{"index": 1244, "repo": "spring-hateoas-2.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class ClassUtils extends Object;\npublic enum WebStack extends Enum<WebStack>; // Utility to glean what web stack is currently available.\n", "des": "Support utilities for hypermedia handling."}
{"index": 3097, "repo": "spring-ws-core-4.0.5", "code": "Package: wsdl11\n\nSub Packages: \npackage wsdl11.provider; // Provides a contribution strategy for WSDL definitions.\n\nClasses and Interfaces: \npublic class DefaultWsdl11Definition extends Object implements Wsdl11Definition, org.springframework.beans.factory.InitializingBean; // Convenient implementation of Wsdl11Definition that creates a SOAP 1.1 or 1.2 binding based on naming conventions in one or more inlined XSD schemas.\npublic class ProviderBasedWsdl4jDefinition extends Wsdl4jDefinition implements org.springframework.beans.factory.InitializingBean; // Implementation of the Wsdl11Definition that uses a provider-based mechanism to populate a WSDL4J Definition.\npublic class SimpleWsdl11Definition extends Object implements Wsdl11Definition, org.springframework.beans.factory.InitializingBean; // The default Wsdl11Definition implementation.\npublic interface Wsdl11Definition extends WsdlDefinition; // Models a WSDL 1.1-specific WsdlDefinition.\npublic class Wsdl4jDefinition extends Object implements Wsdl11Definition; // Implementation of the Wsdl11Definition based on WSDL4J.\npublic class Wsdl4jDefinitionException extends WsdlDefinitionException; // Subclass of WsdlDefinitionException that wraps WSDLExceptions.\n", "des": "Contains interfaces and classes specific to WSDL 1.1."}
{"index": 3379, "repo": "opencms-core-15.0", "code": "Package: types\n\nClasses and Interfaces: \nInterface I_CmsXmlContentValue; // Provides access to the value of a specific XML content node.\nInterface I_CmsXmlSchemaType; // Describes a type in an OpenCms XML schema based content definition.\nInterface I_CmsXmlValidateWithMessage; // Interface to provide specific error messages on validation\nClass A_CmsXmlContentValue; // Base class for XML content value implementations.\nClass A_CmsXmlValueCdataBase; // Base class for XML content value implementations that require only a simple XML cdata text node.\nClass A_CmsXmlValueTextBase; // Base class for XML content value implementations that require only a simple XML plain text node.\nClass CmsXmlBooleanValue; // Describes the XML content type \"OpenCmsBoolean\".\nClass CmsXmlCategoryValue; // Describes the XML content type \"OpenCmsVfsFile\".\nClass CmsXmlColorValue; // Describes the XML content type \"OpenCmsColor\".\nClass CmsXmlDateTimeValue; // Describes the XML content type \"OpenCmsDateTime\".\nClass CmsXmlDisplayFormatterValue; // XML value type for display formatters.\nClass CmsXmlDynamicCategoryValue; // Describes the XML content type \"OpenCmsVfsFile\".\nClass CmsXmlHtmlValue; // Describes the XML content type \"OpenCmsHtml\".\nClass CmsXmlLocaleValue; // Describes the XML content type \"OpenCmsLocale\".\nClass CmsXmlNestedContentDefinition; // A nested content XML definition that is included by another XML content definition.\nClass CmsXmlPlainTextStringValue; // Describes the XML content type \"OpenCmsPlainTextString\".\nClass CmsXmlSerialDateValue; // Describes the XML content type \"OpenCmsSerialDate\".\nClass CmsXmlStringValue; // Describes the XML content type \"OpenCmsString\".\nClass CmsXmlVarLinkValue; // Describes the XML content type \"OpenCmsVarLink\".\nClass CmsXmlVfsFileValue; // Describes the XML content type \"OpenCmsVfsFile\".\nClass CmsXmlVfsImageValue; // Describes the XML content type \"OpenCmsVfsImage\".\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum I_CmsXmlContentValue.SearchContentType; // The available search types for element searchsetting.\n", "des": "Contains the basic XML content type definitions, used for XML content and XML pages."}
{"index": 3270, "repo": "opencms-core-15.0", "code": "Package: types\n\nClasses and Interfaces: \nInterface I_CmsResourceType; // Resource type descriptors for all resources in the VFS.\nClass A_CmsResourceType; // Base implementation for resource type classes.\nClass A_CmsResourceTypeFolderBase; // Resource type descriptor for the type \"folder\".\nClass A_CmsResourceTypeLinkParseable; // Base implementation for resource types implementing the I_CmsLinkParseable interface.\nClass CmsResourceTypeBinary; // Resource type descriptor for the type \"binary\".\nClass CmsResourceTypeFolder; // Resource type descriptor for the type \"folder\".\nClass CmsResourceTypeFolderExtended; // Resource type descriptor for extended folder types (like for example the workplace galleries).\nClass CmsResourceTypeFolderSubSitemap; // Resource type descriptor for sub site map folder types.\nClass CmsResourceTypeFunctionConfig; // Resource type class for the second version of dynamic functions.\nClass CmsResourceTypeHtmlRedirect; // The HTML redirect resource type.\nClass CmsResourceTypeImage; // Resource type descriptor for the type \"image\".\nClass CmsResourceTypeImage.CmsImageAdjuster; // A data container for image size and scale operations.\nClass CmsResourceTypeJsp; // Resource type descriptor for the type \"jsp\".\nClass CmsResourceTypeLocaleIndependentXmlContent; // Special resource type for locale independent XML contents.\nClass CmsResourceTypeMacroFormatter; // The macro formatter resource type.\nClass CmsResourceTypePlain; // Resource type descriptor for the type \"plain\".\nClass CmsResourceTypePointer; // Resource type descriptor for the type \"pointer\".\nClass CmsResourceTypeSeoFile; // The SEO file resource type.\nClass CmsResourceTypeSubsitemapContentFolder; // Content type class for subsitemap content folders.\nClass CmsResourceTypeUnknown; // Resource type descriptor used in case the given resource type class in the XML configuration could not be instantiated.\nClass CmsResourceTypeUnknownFile; // Resource type descriptor for unknown file types.\nClass CmsResourceTypeUnknownFolder; // Resource type descriptor for unknown folder types.\nClass CmsResourceTypeXmlAdeConfiguration; // Custom resource type for ADE configurations.\nClass CmsResourceTypeXmlContainerPage; // Resource type descriptor for the type \"containerpage\".\nClass CmsResourceTypeXmlContent; // Resource type descriptor for the type \"xmlcontent\".\nClass CmsResourceTypeXmlPage; // Resource type descriptor for the type \"xmlpage\".\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum I_CmsResourceType.Formatter; // Resource formatter.\n", "des": "The implementations of the core resource types for the VFS are located here."}
{"index": 1166, "repo": "commons-math3-3.6.1", "code": "Package: twod\n\nSub Packages: \npackage twod.hull; // This package provides algorithms to generate the convex hull for a set of points in an two-dimensional euclidean space.\n\nClasses and Interfaces: \nClass DiskGenerator; // Class generating an enclosing ball from its support points.\nClass Euclidean2D; // This class implements a two-dimensional space.\nClass Line; // This class represents an oriented line in the 2D plane.\nClass PolygonsSet; // This class represents a 2D region: a set of polygons.\nClass Segment; // Simple container for a two-points segment.\nClass SubLine; // This class represents a sub-hyperplane for Line.\nClass Vector2D; // This class represents a 2D vector.\nClass Vector2DFormat; // Formats a 2D vector in components list format \"{x; y}\".\n", "des": "This package provides basic 2D geometry components."}
{"index": 2602, "repo": "wicket-util-10.0.0-M1", "code": "Package: convert\n\nSub Packages: \npackage convert.converter; // Default converter implementations.\n\nClasses and Interfaces: \npublic class ConversionException extends RuntimeException; // Thrown for conversion exceptions.\npublic interface IConverter<C> extends IClusterable; // Converts input to output and vice versa.\npublic class MaskConverter<C> extends Object implements IConverter<C>; // A converter that takes a mask into account.\n", "des": "Conversion support."}
{"index": 765, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: compound\n\nSub Packages: \npackage compound.hyphenation; // Hyphenation code for the CompoundWordTokenFilter.\n\nClasses and Interfaces: \nClass CompoundWordTokenFilterBase; // Base class for decomposition token filters.\nClass DictionaryCompoundWordTokenFilter; // A TokenFilter that decomposes compound words found in many Germanic languages.\nClass DictionaryCompoundWordTokenFilterFactory; // Factory for DictionaryCompoundWordTokenFilter.\nClass HyphenationCompoundWordTokenFilter; // A TokenFilter that decomposes compound words found in many Germanic languages.\nClass HyphenationCompoundWordTokenFilterFactory; // Factory for HyphenationCompoundWordTokenFilter.\n", "des": "A filter that decomposes compound words you find in many Germanic languages into the word parts."}
{"index": 3088, "repo": "spring-ws-core-4.0.5", "code": "Package: soap11\n\nClasses and Interfaces: \npublic interface Soap11Body extends SoapBody; // Subinterface of SoapBody that exposes SOAP 1.1 functionality.\npublic interface Soap11Fault extends SoapFault; // Subinterface of SoapFault that exposes SOAP 1.1 functionality.\npublic interface Soap11Header extends SoapHeader; // Subinterface of SoapHeader that exposes SOAP 1.1 functionality.\n", "des": "Contains interfaces specific to SOAP 1.1."}
{"index": 2945, "repo": "spring-security-config-6.1.2", "code": "Package: ldap\n\nClasses and Interfaces: \npublic abstract class AbstractLdapAuthenticationManagerFactory<T extends org.springframework.security.ldap.authentication.AbstractLdapAuthenticator> extends Object; // Creates an AuthenticationManager that can perform LDAP authentication.\npublic class ContextSourceSettingPostProcessor extends Object implements org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.core.Ordered; // Checks for the presence of a ContextSource instance.\npublic class EmbeddedLdapServerContextSourceFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.ldap.DefaultSpringSecurityContextSource>, org.springframework.beans.factory.DisposableBean, org.springframework.context.ApplicationContextAware; // Creates a DefaultSpringSecurityContextSource used to perform LDAP authentication and starts and in-memory LDAP server.\npublic class LdapBindAuthenticationManagerFactory extends AbstractLdapAuthenticationManagerFactory<org.springframework.security.ldap.authentication.BindAuthenticator>; // Creates an AuthenticationManager that can perform LDAP authentication using bind authentication.\npublic class LdapPasswordComparisonAuthenticationManagerFactory extends AbstractLdapAuthenticationManagerFactory<org.springframework.security.ldap.authentication.PasswordComparisonAuthenticator>; // Creates an AuthenticationManager that can perform LDAP authentication using password comparison.\npublic class LdapProviderBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Ldap authentication provider namespace configuration.\npublic class LdapServerBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\npublic class LdapUserServiceBeanDefinitionParser extends AbstractUserDetailsServiceBeanDefinitionParser;\n", "des": "Security namespace support for LDAP authentication."}
{"index": 3890, "repo": "solr-solrj-9.3.0", "code": "Package: schema\n\nClasses and Interfaces: \nClass AbstractSchemaRequest<T extends SolrResponse>;\nClass AnalyzerDefinition;\nClass FieldTypeDefinition;\nClass SchemaRequest; // This class offers access to the operations exposed by the Solr Schema API.\nClass SchemaRequest.AddCopyField; // Adds a new copy field rule to the schema of the specified collection.\nClass SchemaRequest.AddDynamicField; // Adds a new dynamic field rule to the schema of the specified collection.\nClass SchemaRequest.AddField; // Adds a new field definition to the schema.\nClass SchemaRequest.AddFieldType; // Update request used to add a new field type to the schema.\nClass SchemaRequest.CopyFields; // Schema API request that retrieves the source and destination of each copy field in the schema.\nClass SchemaRequest.DeleteCopyField; // Deletes a copy field rule from the schema of the specified collection.\nClass SchemaRequest.DeleteDynamicField; // Deletes a dynamic field rule from your schema.\nClass SchemaRequest.DeleteField; // Removes a field definition from the schema.\nClass SchemaRequest.DeleteFieldType; // Removes a field type from the schema of the specified collection.\nClass SchemaRequest.DynamicField; // Schema API request that lists the dynamic field definition for the specified field contained in the schema.\nClass SchemaRequest.DynamicFields; // Schema API request that lists the dynamic field definitions contained in the schema.\nClass SchemaRequest.Field; // Schema API request that lists the field definition for the specified field contained in the schema.\nClass SchemaRequest.Fields; // Schema API request class that lists the field definitions contained in the schema.\nClass SchemaRequest.FieldType; // Schema API request that retrieves the type definitions for the specified field type contained in the schema.\nClass SchemaRequest.FieldTypes; // Schema API request that lists the types definitions contained in the schema.\nClass SchemaRequest.GlobalSimilarity; // Retrieves the class name of the global similarity defined (if any) in the schema.\nClass SchemaRequest.MultiUpdate; // The Schema API offers the possibility to perform one or more add requests in a single command.\nClass SchemaRequest.ReplaceDynamicField; // Replaces a dynamic field rule in the schema of the specified collection.\nClass SchemaRequest.ReplaceField; // Replaces a field's definition.\n", "des": "Convenience classes for making Schema API requests."}
{"index": 2925, "repo": "groovy-4.0.13", "code": "Package: ast\n\nSub Packages: \npackage ast.expr; // AST nodes for Groovy expressions\npackage ast.stmt; // AST nodes for Groovy statements\n\nClasses and Interfaces: \npublic class AnnotatedNode extends ASTNode implements GroovydocHolder<AnnotatedNode>; // Base class for any AST node which is capable of being annotated\npublic class AnnotationNode extends ASTNode; // Represents an annotation which can be attached to interfaces, classes, methods, fields, parameters, and other places.\npublic class ASTNode extends Object implements NodeMetaDataHandler; // Base class for any AST node.\npublic class AstToTextHelper extends Object; // Helper class for converting AST into text.\npublic abstract class ClassCodeExpressionTransformer extends ClassCodeVisitorSupport implements ExpressionTransformer; // Transforms expressions in a whole class.\npublic abstract class ClassCodeVisitorSupport extends CodeVisitorSupport implements ErrorCollecting, GroovyClassVisitor;\npublic class ClassHelper extends Object; // Helper for ClassNode and classes handling them.\npublic class ClassNode extends AnnotatedNode; // Represents a class in the AST.\npublic abstract class CodeVisitorSupport extends Object implements GroovyCodeVisitor; // Abstract base class for any GroovyCodeVisitor which by default just walks the code and expression tree\npublic class CompileUnit extends Object implements NodeMetaDataHandler; // Represents the entire contents of a compilation step which consists of one or more ModuleNode instances.\npublic class ConstructorNode extends MethodNode; // Represents a constructor declaration\npublic class DynamicVariable extends Object implements Variable;\npublic class EnumConstantClassNode extends InnerClassNode; // Represents the anonymous inner class for an enum constant.\npublic class FieldNode extends AnnotatedNode implements Variable; // Represents a field (member variable)\npublic class GenericsType extends ASTNode; // This class is used to describe generic type signatures for ClassNodes.\npublic static class GenericsType.GenericsTypeName extends Object; // Represents GenericsType name.\npublic interface GroovyClassVisitor; // A special visitor for working with the structure of a class.\npublic interface GroovyCodeVisitor; // An implementation of the visitor pattern for working with ASTNodes.\npublic class GroovyCodeVisitorAdapter extends Object implements GroovyCodeVisitor;\npublic class ImportNode extends AnnotatedNode; // Represents an import statement.\npublic class InnerClassNode extends ClassNode; // Represents an inner class declaration\n", "des": "Groovy AST nodes for the syntax of the language"}
{"index": 3749, "repo": "lucene-queryparser-9.7.0", "code": "Package: query\n\nClasses and Interfaces: \nInterface DistanceSubQuery; // Interface for queries that can be nested as subqueries into a span near.\nInterface SimpleTerm.MatchingTermVisitor; // Callback to visit each matching term during \"rewrite\" in SimpleTerm.MatchingTermVisitor.visitMatchingTerm(Term)\nClass AndQuery; // Factory for conjunctions\nClass BasicQueryFactory; // Factory for creating basic term queries\nClass ComposedQuery; // Base class for composite queries (such as AND/OR/NOT)\nClass DistanceQuery; // Factory for NEAR queries\nClass FieldsQuery; // Forms an OR query of the provided query across multiple fields.\nClass NotQuery; // Factory for prohibited clauses\nClass OrQuery; // Factory for disjunctions\nClass SimpleTerm; // Base class for queries that expand to sets of simple terms.\nClass SpanNearClauseFactory; // Factory for SpanOrQuery\nClass SrndPrefixQuery; // Query that matches String prefixes\nClass SrndQuery; // Lowest level base class for surround queries\nClass SrndTermQuery; // Simple single-term clause\nClass SrndTruncQuery; // Query that matches wildcards\nClass TooManyBasicQueries; // Exception thrown when BasicQueryFactory would exceed the limit of query clauses.\n", "des": "This package contains SrndQuery and its subclasses."}
{"index": 3766, "repo": "lucene-analysis-common-9.7.0", "code": "Package: charfilter\n\nClasses and Interfaces: \nClass BaseCharFilter; // Base utility class for implementing a CharFilter.\nClass HTMLStripCharFilter; // A CharFilter that wraps another Reader and attempts to strip out HTML constructs.\nClass HTMLStripCharFilterFactory; // Factory for HTMLStripCharFilter.\nClass MappingCharFilter; // Simplistic CharFilter that applies the mappings contained in a NormalizeCharMap to the character stream, and correcting the resulting changes to the offsets.\nClass MappingCharFilterFactory; // Factory for MappingCharFilter.\nClass NormalizeCharMap; // Holds a map of String input to String output, to be used with MappingCharFilter.\nClass NormalizeCharMap.Builder; // Builds an NormalizeCharMap.\n", "des": "Normalization of text before the tokenizer."}
{"index": 1528, "repo": "spring-context-6.0.11", "code": "Package: tomcat\n\nClasses and Interfaces: \npublic class TomcatLoadTimeWeaver extends Object implements LoadTimeWeaver; // LoadTimeWeaver implementation for Tomcat's new org.apache.tomcat.InstrumentableClassLoader.\n", "des": "Support for class instrumentation on Tomcat."}
{"index": 3369, "repo": "opencms-core-15.0", "code": "Package: explorer\n\nClasses and Interfaces: \nClass CmsExplorerTypeAccess; // Explorer type access object, encapsulates access control entries and lists of a explorer type.\nClass CmsExplorerTypeAccessFlushListener; // Class which listens for cache flush events to uncache cached access control settings.\nClass CmsExplorerTypeSettings; // Holds all information to build the explorer context menu of a resource type and information for the new resource dialog.\nClass CmsIconRule; // An icon configuration rule for an explorer type.\nClass CmsResourceUtil; // Provides CmsResource utility functions.\nClass CmsResourceUtil.CmsResourceProjectState; // Enumeration class for defining the resource project state.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains the functions that generate the Workplace \"Explorer\" view, also contains the \"New resource\" wizard."}
{"index": 1438, "repo": "spring-boot-actuator-3.1.1", "code": "Package: servlet\n\nClasses and Interfaces: \npublic class HttpExchangesFilter extends org.springframework.web.filter.OncePerRequestFilter implements org.springframework.core.Ordered; // Servlet Filter for recording HTTP exchanges.\n", "des": "Actuator HTTP exchanges support for servlet servers."}
{"index": 2973, "repo": "pulsar-broker-3.0.0", "code": "Package: exception\n\nSub Packages: \npackage exception.buffer; // Exceptions thrown when encountering errors in transaction buffer.\npackage exception.coordinator; // Exceptions thrown when encountering errors in transaction buffer.\npackage exception.pendingack; // Exceptions thrown when encountering errors in transaction buffer.\n\nClasses and Interfaces: \npublic abstract class TransactionException extends Exception; // The base exception class for the errors thrown from Transaction.\npublic static class TransactionException.TransactionNotSealedException extends TransactionException; // Exception is thrown when opening a reader on a transaction that is not sealed yet.\npublic static class TransactionException.TransactionSealedException extends TransactionException; // Exception thrown if a transaction is already sealed.\npublic static class TransactionException.TransactionStatusException extends TransactionException; // Exceptions are thrown when operations are applied to a transaction which is not in expected txn status.\n", "des": "Exceptions thrown when encountering errors in transaction buffer."}
{"index": 1506, "repo": "spring-context-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractCacheManager extends Object implements CacheManager, org.springframework.beans.factory.InitializingBean; // Abstract base class implementing the common CacheManager methods.\npublic abstract class AbstractValueAdaptingCache extends Object implements Cache; // Common base class for Cache implementations that need to adapt null values (and potentially other such special values) before passing them on to the underlying store.\npublic class CompositeCacheManager extends Object implements CacheManager, org.springframework.beans.factory.InitializingBean; // Composite CacheManager implementation that iterates over a given collection of delegate CacheManager instances.\npublic class NoOpCache extends Object implements Cache; // A no operation Cache implementation suitable for disabling caching.\npublic class NoOpCacheManager extends Object implements CacheManager; // A basic, no operation CacheManager implementation suitable for disabling caching, typically used for backing cache declarations without an actual backing store.\npublic final class NullValue extends Object implements Serializable; // Simple serializable class that serves as a null replacement for cache stores which otherwise do not support null values.\npublic class SimpleCacheManager extends AbstractCacheManager; // Simple cache manager working against a given collection of caches.\npublic class SimpleValueWrapper extends Object implements Cache.ValueWrapper; // Straightforward implementation of Cache.ValueWrapper, simply holding the value as given at construction and returning it from SimpleValueWrapper.get().\n", "des": "Support classes for the org.springframework.cache package."}
{"index": 3761, "repo": "lucene-analysis-common-9.7.0", "code": "Package: bg\n\nClasses and Interfaces: \nClass BulgarianAnalyzer; // Analyzer for Bulgarian.\nClass BulgarianStemFilter; // A TokenFilter that applies BulgarianStemmer to stem Bulgarian words.\nClass BulgarianStemFilterFactory; // Factory for BulgarianStemFilter.\nClass BulgarianStemmer; // Light Stemmer for Bulgarian.\n", "des": "Analyzer for Bulgarian."}
{"index": 2930, "repo": "groovy-4.0.13", "code": "Package: control\n\nSub Packages: \npackage control.io; // Internal classes for Groovier Input/Output.\npackage control.messages; // Error message classes.\n\nClasses and Interfaces: \npublic class AnnotationConstantsVisitor extends ClassCodeVisitorSupport; // Resolves constants in annotation definitions.\npublic class ASTTransformationsContext extends Object; // Stores state information about global AST transformations applied to a compilation unit.\npublic interface BytecodeProcessor;\npublic class ClassNodeResolver extends Object; // This class is used as a pluggable way to resolve class names.\npublic static class ClassNodeResolver.LookupResult extends Object; // Helper class to return either a SourceUnit or ClassNode.\npublic class CompilationFailedException extends GroovyRuntimeException; // Thrown when compilation fails from source errors.\npublic class CompilationUnit extends ProcessingUnit; // The CompilationUnit collects all compilation data as it is generated by the compiler system.\n@FunctionalInterface public static interface CompilationUnit.ClassgenCallback; // A callback interface you can use during the classgen phase of compilation as the compiler traverses the ClassNode tree.\n@Deprecated public abstract static class CompilationUnit.GroovyClassOperation extends Object implements CompilationUnit.IGroovyClassOperation;\n@FunctionalInterface public static interface CompilationUnit.IGroovyClassOperation;\n@FunctionalInterface public static interface CompilationUnit.IPrimaryClassNodeOperation;\n@FunctionalInterface public static interface CompilationUnit.ISourceUnitOperation;\n@Deprecated public abstract static class CompilationUnit.PrimaryClassNodeOperation extends Object implements CompilationUnit.IPrimaryClassNodeOperation;\n@FunctionalInterface public static interface CompilationUnit.ProgressCallback; // A callback interface you can use to get a callback after every unit of the compile process.\n@Deprecated public abstract static class CompilationUnit.SourceUnitOperation extends Object implements CompilationUnit.ISourceUnitOperation;\npublic enum CompilePhase extends Enum<CompilePhase>; // The phases of the GroovyCompiler.\npublic class CompilerConfiguration extends Object; // Compilation control flags and coordination stuff.\npublic class ConfigurationException extends RuntimeException implements GroovyExceptionInterface; // Thrown when configuration data is invalid.\npublic class ErrorCollector extends Object implements Serializable; // A base class for collecting messages and errors during processing.\npublic class GenericsVisitor extends ClassCodeVisitorSupport; // Verify correct usage of generics.\npublic interface HasCleanup; // An interface for things that need to be cleaned up after operations complete.\n", "des": "Compiler control classes."}
{"index": 3324, "repo": "opencms-core-15.0", "code": "Package: dbmanager\n\nClasses and Interfaces: \nInterface I_CmsReportApp; // Interface for Apps, which run an import thread for files.\nClass A_CmsHTTPImportForm; // Abstract class for HTTP imports.\nClass A_CmsImportForm; // Abstract class for a form to import a file.\nClass A_CmsServerImportForm; // Abstract class for the import from a folder on the server.\nClass CmsAddExportResourcesDialog; // Dialog used to enter a list of paths to be added to the resources in the database export dialog.\nClass CmsAddPropertyDefinitionDialog; // Class for dialog to create property definition.\nClass CmsDbExportApp; // Class for the database export function.\nClass CmsDbExportConfiguration; // Configuration for Database manager app.\nClass CmsDbExportView; // Class for the Export dialog.\nClass CmsDbImportApp; // Class for the database import app.\nClass CmsDbImportHTTP; // HTTP import class.\nClass CmsDbImportHTTPConfiguration; // Configuration for Database manager app.\nClass CmsDbImportServer; // Class for the import from server option.\nClass CmsDbImportServerConfiguration; // Class for app configuration.\nClass CmsDbManager; // Class for database manager app.\nClass CmsDbManagerConfiguration; // Configuration for Database manager app.\nClass CmsDbManagerFolder; // Class for the app folder.\nClass CmsDbPropertiesApp; // Class for the property definition app.\nClass CmsDbPropertiesAppConfiguration; // Configuration class for property app.\nClass CmsDbRemovePublishLocks; // Remove publish locks.\nClass CmsDbRemovePubLocksApp; // App for the remove publish-locks function.\nClass CmsDbRemovePubLocksConfiguration; // Class for app configuration.\nClass CmsDbStaticExportApp; // Class for the database static export app.\nClass CmsDbStaticExportConfiguration; // Configuration for Database manager app.\nClass CmsDbStaticExportView; // Class for the static export view.\nClass CmsDbSynchDialog; // Class for the synchronization dialog.\nClass CmsDbSynchronizationApp; // Class for the database synchronization app.\nClass CmsDbSynchronizationConfiguration; // Configuration class for the synchronization app.\nClass CmsDbSynchronizationView; // Synchronization layout class.\nClass CmsExportThreadDialog; // The export thread report.\nClass CmsImportFile;\nClass CmsPropertyDeleteDialog; // Dialog to delete property definitions.\nClass CmsPropertyTable; // Class for the table containing all property definitions in the system.\n", "des": "Contains classes of the cache admin app."}
{"index": 1746, "repo": "spring-data-mongodb-4.1.2", "code": "Package: mongodb\n\nSub Packages: \npackage mongodb.config; // Spring XML namespace configuration for MongoDB specific repositories.\npackage mongodb.core; // MongoDB core support.\npackage mongodb.gridfs; // Support for MongoDB GridFS feature.\npackage mongodb.monitor; // MongoDB specific JMX monitoring support.\npackage mongodb.observability; // Infrastructure to provide driver observability using Micrometer.\npackage mongodb.repository; // MongoDB specific repository implementation.\npackage mongodb.util; // MongoDB driver-specific utility classes for Bson and DBObject interaction.\n\nClasses and Interfaces: \npublic class BindableMongoExpression extends Object implements MongoExpression; // A MongoExpression using the ParameterBindingDocumentCodec for parsing a raw (json) expression.\npublic class BulkOperationException extends DataAccessException; // Is thrown when errors occur during bulk operations.\npublic class ClientSessionException extends NonTransientDataAccessException; // NonTransientDataAccessException specific to MongoDB ClientSession related data access failures such as reading data using an already closed session.\n@FunctionalInterface public interface CodecRegistryProvider; // Provider interface to obtain CodecRegistry from the underlying MongoDB Java driver.\npublic class InvalidMongoDbApiUsageException extends InvalidDataAccessApiUsageException;\npublic class LazyLoadingException extends UncategorizedDataAccessException;\npublic abstract class MongoCollectionUtils extends Object; // Helper class featuring helper methods for working with MongoDb collections.\npublic interface MongoDatabaseFactory extends CodecRegistryProvider, MongoSessionProvider; // Interface for factories creating MongoDatabase instances.\npublic class MongoDatabaseUtils extends Object; // Helper class for managing a MongoDatabase instances via MongoDatabaseFactory.\n@FunctionalInterface public interface MongoExpression; // Wrapper object for MongoDB expressions like $toUpper : $name that manifest as Document when passed on to the driver.\npublic final class MongoManagedTypes extends Object implements ManagedTypes;\n@FunctionalInterface public interface MongoSessionProvider; // A simple interface for obtaining a ClientSession to be consumed by MongoOperations and MongoDB native operations that support causal consistency and transactions.\npublic class MongoTransactionException extends ClientSessionException; // A specific ClientSessionException related to issues with a transaction such as aborted or non existing transactions.\npublic class MongoTransactionManager extends AbstractPlatformTransactionManager implements ResourceTransactionManager, InitializingBean; // A PlatformTransactionManager implementation that manages ClientSession based transactions for a single MongoDatabaseFactory.\n", "des": "Spring Data's MongoDB abstraction."}
{"index": 462, "repo": "commons-geometry-spherical-1.0", "code": "Package: twod\n\nClasses and Interfaces: \nInterface BoundarySource2S; // Extension of the BoundarySource interface for spherical 2D space.\nClass AbstractGreatArcConnector; // Abstract class for joining collections of great arcs into connected paths.\nClass AbstractGreatArcConnector.ConnectableGreatArc; // Internal class for connecting GreatArcs into GreatArcPaths.\nClass BoundaryList2S; // BoundarySource2S implementation that uses boundaries stored in a list.\nClass ConvexArea2S; // Class representing a convex area in 2D spherical space.\nClass EmbeddedTreeGreatCircleSubset; // Class representing an arbitrary subset of the points on a great circle using a RegionBSPTree1S.\nClass GreatArc; // Class representing a single, convex angular interval in a GreatCircle.\nClass GreatArcPath; // Class representing a connected sequence of GreatArc instances.\nClass GreatArcPath.Builder; // Class used to build arc paths.\nClass GreatCircle; // Class representing a great circle on the 2-sphere.\nClass GreatCircles; // Class containing factory methods for constructing GreatCircle and GreatCircleSubset instances.\nClass GreatCircleSubset; // Class representing a subset of the points in a great circle.\nClass InteriorAngleGreatArcConnector; // Great arc connector that selects between multiple connection options based on the resulting interior angle.\nClass InteriorAngleGreatArcConnector.Maximize; // Implementation of InteriorAngleGreatArcConnector that chooses arc connections that produce the largest interior angles.\nClass InteriorAngleGreatArcConnector.Minimize; // Implementation of InteriorAngleGreatArcConnector that chooses arc connections that produce the smallest interior angles.\nClass Point2S; // This class represents a point on the 2-sphere.\nClass RegionBSPTree2S; // BSP tree representing regions in 2D spherical space.\nClass RegionBSPTree2S.RegionNode2S; // BSP tree node for two dimensional spherical space.\nClass Transform2S; // Implementation of the Transform interface for spherical 2D points.\n", "des": "This package provides basic geometry components on the 2-sphere."}
{"index": 110, "repo": "ignite-core-2.15.0", "code": "Package: logger\n\nSub Packages: \npackage logger.java; // Contains Java logging implementation for logging.\n\nClasses and Interfaces: \nClass NullLogger; // Logger which does not output anything.\n", "des": "Contains logging functionality used throughout the system."}
{"index": 1965, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: netty\n\nClasses and Interfaces: \npublic final class ReactorNettyConfigurations extends Object; // Configurations for Reactor Netty.\n@Configuration(proxyBeanMethods=false) @EnableConfigurationProperties(ReactorNettyProperties.class) public static class ReactorNettyConfigurations.ReactorResourceFactoryConfiguration extends Object;\n@ConfigurationProperties(prefix=\"spring.reactor.netty\") public class ReactorNettyProperties extends Object; // Configuration properties for Reactor Netty.\n", "des": "Auto-configuration for Reactor Netty."}
{"index": 3335, "repo": "opencms-core-15.0", "code": "Package: search\n\nClasses and Interfaces: \nClass CmsSearchReplaceSettings; // Settings bean for the dialog.\nClass CmsSearchReplaceThread; // Searches in sources.\nClass CmsSourceSearchApp; // The source search app.\nClass CmsSourceSearchAppConfiguration; // The source search app configuration.\nClass CmsSourceSearchForm; // The source search form.\nEnum CmsSourceSearchForm.SearchType; // The available search types.\n", "des": "Contains classes of the source search app."}
{"index": 1432, "repo": "spring-boot-actuator-3.1.1", "code": "Package: security\n\nClasses and Interfaces: \npublic abstract class AbstractAuthenticationAuditListener extends Object implements org.springframework.context.ApplicationListener<org.springframework.security.authentication.event.AbstractAuthenticationEvent>, org.springframework.context.ApplicationEventPublisherAware; // Abstract ApplicationListener to expose Spring Security authentication events as AuditEvents.\npublic abstract class AbstractAuthorizationAuditListener extends Object implements org.springframework.context.ApplicationListener<org.springframework.security.authorization.event.AuthorizationEvent>, org.springframework.context.ApplicationEventPublisherAware; // Abstract ApplicationListener to expose Spring Security authorization denied and authorization granted events as AuditEvents.\npublic class AuthenticationAuditListener extends AbstractAuthenticationAuditListener; // Default implementation of AbstractAuthenticationAuditListener.\npublic class AuthorizationAuditListener extends AbstractAuthorizationAuditListener; // Default implementation of AbstractAuthorizationAuditListener.\n", "des": "Actuator support for security."}
{"index": 1536, "repo": "spring-context-6.0.11", "code": "Package: notification\n\nClasses and Interfaces: \npublic class ModelMBeanNotificationPublisher extends Object implements NotificationPublisher; // NotificationPublisher implementation that uses the infrastructure provided by the ModelMBean interface to track javax.management.NotificationListeners and send Notifications to those listeners.\n@FunctionalInterface public interface NotificationPublisher; // Simple interface allowing Spring-managed MBeans to publish JMX notifications without being aware of how those notifications are being transmitted to the MBeanServer.\npublic interface NotificationPublisherAware extends org.springframework.beans.factory.Aware; // Interface to be implemented by any Spring-managed resource that is to be registered with an MBeanServer and wishes to send JMX javax.management.Notifications.\npublic class UnableToSendNotificationException extends JmxException; // Thrown when a JMX Notification is unable to be sent.\n", "des": "Provides supporting infrastructure to allow Spring-created MBeans to send JMX notifications."}
{"index": 2712, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: data\n\nSub Packages: \npackage data.builder; // Builders for Spring Data item readers and writers.\n\nClasses and Interfaces: \npublic abstract class AbstractPaginatedDataItemReader<T> extends AbstractItemCountingItemStreamItemReader<T>; // A base class that handles basic reading logic based on the paginated semantics of Spring Data's paginated facilities.\npublic class MongoItemReader<T> extends AbstractPaginatedDataItemReader<T> implements org.springframework.beans.factory.InitializingBean; // Restartable ItemReader that reads documents from MongoDB via a paging technique.\npublic class MongoItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean; // A ItemWriter implementation that writes to a MongoDB store using an implementation of Spring Data's MongoOperations.\n@Deprecated public class Neo4jItemReader<T> extends AbstractPaginatedDataItemReader<T> implements org.springframework.beans.factory.InitializingBean;\n@Deprecated public class Neo4jItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean;\npublic class RepositoryItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean; // A ItemReader that reads records utilizing a PagingAndSortingRepository.\npublic class RepositoryItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean; // A ItemWriter wrapper for a CrudRepository from Spring Data.\n", "des": "Spring Data related readers and writers."}
{"index": 1496, "repo": "wicket-extensions-10.0.0-M1", "code": "Package: export\n\nClasses and Interfaces: \npublic abstract class AbstractDataExporter extends Object implements IDataExporter; // An abstract helper implementation of IDataExporter.\npublic abstract class AbstractExportableColumn<T,S> extends AbstractColumn<T,S> implements IExportableColumn<T,S>; // A helper implementation of IExportableColumn.\npublic class CSVDataExporter extends AbstractDataExporter; // An IDataExporter that exports data to a CSV file.\npublic class ExportToolbar extends AbstractToolbar; // A toolbar that provides links to download the data represented by all IExportableColumns in the table exported to formats supported by the IDataExporters configured.\npublic static class ExportToolbar.DataExportResourceStreamWriter extends org.apache.wicket.util.resource.AbstractResourceStreamWriter; // An IResourceStreamWriter which writes the exportable data from a table to an output stream.\npublic interface IDataExporter extends org.apache.wicket.util.io.IClusterable; // Exports data provided by a IDataProvider as described by IExportableColumns.\npublic interface IExportableColumn<T,S> extends IColumn<T,S>; // An IColumn that can be exported.\n", "des": "Package for exporting data tables."}
{"index": 2146, "repo": "wicket-core-10.0.0-M1", "code": "Package: form\n\nSub Packages: \npackage form.upload; // Support for upload forms (using multipart requests).\npackage form.validation; // Support for form validation.\n\nClasses and Interfaces: \npublic abstract class AbstractCheckSelector extends LabeledWebMarkupContainer implements IHeaderContributor; // Base class for all Javascript-based \"select-all\" checkboxes.\npublic abstract class AbstractChoice<T,E> extends FormComponent<T>; // Abstract base class for all choice (html select) options.\npublic static enum AbstractChoice.LabelPosition extends Enum<AbstractChoice.LabelPosition>; // An enumeration of possible positions of the label for a choice\npublic abstract class AbstractSingleSelectChoice<T> extends AbstractChoice<T,T>; // Abstract base class for single-select choices.\npublic abstract class AbstractSubmitLink extends AbstractLink implements IFormSubmittingComponent; // Abstract class for links that are capable of submitting a form.\npublic abstract class AbstractTextComponent<T> extends FormComponent<T>; // Abstract base class for TextArea and TextField.\npublic static interface AbstractTextComponent.ITextFormatProvider; // Text components that implement this interface are know to be able to provide a pattern for formatting output and parsing input.\npublic class AutoLabelResolver extends Object implements IComponentResolver; // Resolver that implements the wicket:for attribute functionality.\nprotected static class AutoLabelResolver.AutoLabel extends TransparentWebMarkupContainer; // Component that is attached to the <label> tag and takes care of writing out the label text as well as setting classes on the <label> tag\npublic static final class AutoLabelResolver.AutoLabelMarker extends Object implements Serializable; // Marker used to track whether or not a form component has an associated auto label by its mere presense as well as some attributes of the component across requests.\npublic class AutoLabelTagHandler extends AbstractMarkupFilter; // Markup filter that identifies tags with the wicket:for attribute.\npublic class AutoLabelTextResolver extends Object implements IComponentResolver; // Resolver that provides the <wicket:label> tag, which will output a FormComponent's label without requiring a manual extra component such as Label or FormComponentLabel.\npublic class Button extends FormComponent<String> implements IFormSubmittingComponent; // A form button.\n", "des": "HTML Forms and form components."}
{"index": 1199, "repo": "commons-math3-3.6.1", "code": "Package: linear\n\nClasses and Interfaces: \nInterface LinearOptimizer; // As of 3.1 (to be removed in 4.0).\nClass AbstractLinearOptimizer; // As of 3.1 (to be removed in 4.0).\nClass LinearConstraint; // As of 3.1 (to be removed in 4.0).\nClass LinearObjectiveFunction; // As of 3.1 (to be removed in 4.0).\nClass SimplexSolver; // As of 3.1 (to be removed in 4.0).\nEnum Relationship; // As of 3.1 (to be removed in 4.0).\nClass NoFeasibleSolutionException; // As of 3.1 (to be removed in 4.0).\nClass UnboundedSolutionException; // As of 3.1 (to be removed in 4.0).\n", "des": "This package provides optimization algorithms for linear constrained problems."}
{"index": 908, "repo": "commons-compress-1.23.0", "code": "Package: dump\n\nClasses and Interfaces: \nClass DumpArchiveConstants; // Various constants associated with dump archives.\nClass DumpArchiveEntry; // This class represents an entry in a Dump archive.\nClass DumpArchiveInputStream; // The DumpArchiveInputStream reads a UNIX dump archive as an InputStream.\nClass DumpArchiveSummary; // This class represents identifying information about a Dump archive volume.\nEnum DumpArchiveConstants.COMPRESSION_TYPE; // The type of compression.\nEnum DumpArchiveConstants.SEGMENT_TYPE; // The type of tape segment.\nEnum DumpArchiveEntry.PERMISSION;\nEnum DumpArchiveEntry.TYPE;\nClass DumpArchiveException; // Dump Archive Exception\nClass InvalidFormatException; // Invalid Format Exception.\nClass ShortFileException; // Short File Exception.\nClass UnrecognizedFormatException; // Unrecognized Format Exception.\nClass UnsupportedCompressionAlgorithmException; // Unsupported compression algorithm.\n", "des": "This package provides stream classes for reading archives using the Unix DUMP format."}
{"index": 3035, "repo": "spring-web-6.0.11", "code": "Package: el\n\nClasses and Interfaces: \npublic class SpringBeanFacesELResolver extends ELResolver; // JSF ELResolver that delegates to the Spring root WebApplicationContext, resolving name references to Spring-defined beans.\npublic class WebApplicationContextFacesELResolver extends ELResolver; // Special JSF ELResolver that exposes the Spring WebApplicationContext instance under a variable named \"webApplicationContext\".\n", "des": "ELResolvers for integrating a JSF web layer with a Spring service layer which is hosted in a Spring root WebApplicationContext."}
{"index": 3772, "repo": "lucene-analysis-common-9.7.0", "code": "Package: hyphenation\n\nClasses and Interfaces: \nInterface PatternConsumer; // This interface is used to connect the XML pattern file parser to the hyphenation tree.\nClass ByteVector; // This class implements a simple byte vector with access to the underlying array.\nClass CharVector; // This class implements a simple char vector with access to the underlying array.\nClass Hyphen; // This class represents a hyphen.\nClass Hyphenation; // This class represents a hyphenated word.\nClass HyphenationTree; // This tree structure stores the hyphenation patterns in an efficient way for fast lookup.\nClass PatternParser; // A SAX document handler to read and parse hyphenation patterns from a XML file.\nClass TernaryTree; // Ternary Search Tree.\n", "des": "Hyphenation code for the CompoundWordTokenFilter."}
{"index": 1604, "repo": "spring-websocket-6.0.11", "code": "Package: transport\n\nSub Packages: \npackage transport.handler; // TransportHandler implementation classes as well as a concrete SockJsService.\npackage transport.session; // SockJS specific implementations of WebSocketSession.\n\nClasses and Interfaces: \npublic interface SockJsServiceConfig; // Provides transport handling code with access to the SockJsService configuration options they need to have access to.\npublic interface SockJsSession extends WebSocketSession; // SockJS extension of Spring's standard WebSocketSession.\npublic interface SockJsSessionFactory; // A factory for creating a SockJS session.\npublic interface TransportHandler; // Handle a SockJS session URL, i.e.\npublic class TransportHandlingSockJsService extends AbstractSockJsService implements SockJsServiceConfig, org.springframework.context.Lifecycle; // A basic implementation of SockJsService with support for SPI-based transport handling and session management.\npublic enum TransportType extends Enum<TransportType>; // SockJS transport types.\n", "des": "Server-side support for SockJS transports including TransportHandler implementations for processing incoming requests, their session counterparts for sending messages over the various transports, and DefaultSockJsService."}
{"index": 2554, "repo": "pulsar-common-3.0.0", "code": "Package: lookup\n\nSub Packages: \npackage lookup.data; // Lookup data.\n\nClasses and Interfaces: \npublic class GetTopicsResult extends Object;\n", "des": "Lookup data."}
{"index": 3759, "repo": "lucene-facet-9.7.0", "code": "Package: writercache\n\nClasses and Interfaces: \nInterface TaxonomyWriterCache; // TaxonomyWriterCache is a relatively simple interface for a cache of category->ordinal mappings, used in TaxonomyWriter implementations (such as DirectoryTaxonomyWriter).\nClass LabelToOrdinal; // Abstract class for storing Label->Ordinal mappings in a taxonomy.\nClass LruTaxonomyWriterCache; // LRU TaxonomyWriterCache - good choice for huge taxonomies.\nClass NameHashIntCacheLRU; // An LRU cache of mapping from name to int.\nClass UTF8TaxonomyWriterCache;\nEnum LruTaxonomyWriterCache.LRUType; // Determines cache type.\n", "des": "Improves indexing time by caching a map of CategoryPath to their Ordinal."}
{"index": 3238, "repo": "opencms-core-15.0", "code": "Package: inherited\n\nClasses and Interfaces: \nClass CmsContainerConfiguration; // A bean representing a single configuration entry for the inherited container configuration.\nClass CmsContainerConfigurationCache; // A cache class for storing inherited container configurations.\nClass CmsContainerConfigurationCacheState; // A cache class for storing inherited container configurations.\nClass CmsContainerConfigurationGroup; // A class which represents all the configuration entries which have been read from an inherited container configuration file.\nClass CmsContainerConfigurationParser; // A parser class which reads data from inherited container configuration files.\nClass CmsContainerConfigurationWriter; // A helper class for writing inherited container configuration back to a VFS file.\nClass CmsInheritanceGroupUtils; // Utility methods for inheritance groups which don't fit anywhere else.\nClass CmsInheritanceReference; // Reference to an container inheritance configuration.\nClass CmsInheritanceReferenceParser; // Parser class for parsing inheritance container references.\nClass CmsInheritedContainerState; // The state of an inherited container at a given point in the VFS tree.\n", "des": "Contains classes used for reading and caching inheritance groups."}
{"index": 1951, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: jsonb\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnClass(jakarta.json.bind.Jsonb.class) @ConditionalOnResource(resources={\"classpath:META-INF/services/jakarta.json.bind.spi.JsonbProvider\",\"classpath:META-INF/services/jakarta.json.spi.JsonProvider\"}) public class JsonbAutoConfiguration extends Object; // Auto-configuration for JSON-B.\n", "des": "Auto-configuration for JSON-B."}
{"index": 1062, "repo": "avro-1.11.2", "code": "Package: parsing\n\nClasses and Interfaces: \nInterface Parser.ActionHandler; // The parser knows how to handle the terminal and non-terminal symbols.\nInterface SkipParser.SkipHandler; // The clients implement this interface to skip symbols and actions.\nClass JsonGrammarGenerator; // The class that generates a grammar suitable to parse Avro data in JSON format.\nClass Parser; // Parser is the class that maintains the stack for parsing.\nClass ResolvingGrammarGenerator; // The class that generates a resolving grammar to resolve between two schemas.\nClass SkipParser; // A parser that capable of skipping as well read and write.\nClass Symbol; // Symbol is the base of all symbols (terminals and non-terminals) of the grammar.\nClass Symbol.Alternative;\nClass Symbol.DefaultStartAction;\nClass Symbol.EnumAdjustAction;\nClass Symbol.EnumLabelsAction;\nClass Symbol.ErrorAction;\nClass Symbol.FieldAdjustAction;\nClass Symbol.FieldOrderAction;\nClass Symbol.ImplicitAction;\nClass Symbol.IntCheckAction;\nClass Symbol.Repeater;\nClass Symbol.ResolvingAction;\nClass Symbol.Root;\nClass Symbol.Sequence;\nClass Symbol.SkipAction;\nClass Symbol.UnionAdjustAction;\nClass Symbol.WriterUnionAction;\nClass ValidatingGrammarGenerator; // The class that generates validating grammar.\nEnum Symbol.Kind;\n", "des": "Implementation of Avro schemas as LL(1) grammars."}
{"index": 3096, "repo": "spring-ws-core-4.0.5", "code": "Package: wsdl\n\nSub Packages: \npackage wsdl.wsdl11; // Contains interfaces and classes specific to WSDL 1.1.\n\nClasses and Interfaces: \npublic interface WsdlDefinition; // Represents an abstraction for WSDL definitions.\npublic class WsdlDefinitionException extends WebServiceException; // Base class for all WSDL definition exceptions.\n", "des": "Provides the WSDL functionality of the Spring Web Services framework."}
{"index": 1289, "repo": "spring-core-6.0.11", "code": "Package: lang\n\nClasses and Interfaces: \n@Target({METHOD,PARAMETER,FIELD}) @Retention(RUNTIME) @Documented @Nonnull @TypeQualifierNickname public @interface NonNull; // A common Spring annotation to declare that annotated elements cannot be null.\n@Target(PACKAGE) @Retention(RUNTIME) @Documented @Nonnull @TypeQualifierDefault({METHOD,PARAMETER}) public @interface NonNullApi; // A common Spring annotation to declare that parameters and return values are to be considered as non-nullable by default for a given package.\n@Target(PACKAGE) @Retention(RUNTIME) @Documented @Nonnull @TypeQualifierDefault(FIELD) public @interface NonNullFields; // A common Spring annotation to declare that fields are to be considered as non-nullable by default for a given package.\n@Target({METHOD,PARAMETER,FIELD}) @Retention(RUNTIME) @Documented @Nonnull(when=MAYBE) @TypeQualifierNickname public @interface Nullable; // A common Spring annotation to declare that annotated elements can be null under some circumstance.\n", "des": "Common annotations with language-level semantics: nullability as well as JDK API indications."}
{"index": 1215, "repo": "commons-math3-3.6.1", "code": "Package: transform\n\nClasses and Interfaces: \nInterface RealTransformer; // Interface for one-dimensional data sets transformations producing real results.\nClass FastCosineTransformer; // Implements the Fast Cosine Transform for transformation of one-dimensional real data sets.\nClass FastFourierTransformer; // Implements the Fast Fourier Transform for transformation of one-dimensional real or complex data sets.\nClass FastHadamardTransformer; // Implements the Fast Hadamard Transform (FHT).\nClass FastSineTransformer; // Implements the Fast Sine Transform for transformation of one-dimensional real data sets.\nClass TransformUtils; // Useful functions for the implementation of various transforms.\nEnum DctNormalization; // This enumeration defines the various types of normalizations that can be applied to discrete cosine transforms (DCT).\nEnum DftNormalization; // This enumeration defines the various types of normalizations that can be applied to discrete Fourier transforms (DFT).\nEnum DstNormalization; // This enumeration defines the various types of normalizations that can be applied to discrete sine transforms (DST).\nEnum TransformType; // This enumeration defines the type of transform which is to be computed.\n", "des": "Implementations of transform methods, including Fast Fourier transforms."}
{"index": 3117, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: support\n\nClasses and Interfaces: \nInterface AbstractDomainDataRegion.Destructible; // Optional interface caching implementors can implement in their CachedDomainDataAccess impls to automatically have them destroyed when this region is destroyed\nInterface AbstractReadWriteAccess.Lockable; // Interface type implemented by all wrapper objects in the cache.\nInterface DomainDataStorageAccess; // Specialization of StorageAccess for domain data regions\nInterface StorageAccess; // A general read/write abstraction over the specific \"cache\" object from the caching provider.\nClass AbstractCachedDomainDataAccess;\nClass AbstractCollectionDataAccess;\nClass AbstractDomainDataRegion;\nClass AbstractEntityDataAccess;\nClass AbstractNaturalIdDataAccess;\nClass AbstractReadWriteAccess;\nClass AbstractReadWriteAccess.Item; // Wrapper type representing unlocked items.\nClass AbstractReadWriteAccess.SoftLockImpl; // Wrapper type representing locked items.\nClass AbstractRegion;\nClass CacheUtils;\nClass CollectionNonStrictReadWriteAccess; // Standard support for CollectionDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\nClass CollectionReadOnlyAccess; // Standard support for CollectionDataAccess using the AccessType.READ_ONLY access type.\nClass CollectionReadWriteAccess; // Standard support for CollectionDataAccess using the AccessType.READ_WRITE access type.\nClass CollectionTransactionAccess;\nClass DirectAccessRegionTemplate; // Bridge between DirectAccessRegion and StorageAccess\nClass DomainDataRegionImpl;\nClass DomainDataRegionTemplate; // Abstract implementation of DomainDataRegion based on implementations just needing to provide a DomainDataStorageAccess reference for basic caching support - DomainDataStorageAccess acts as a simple wrapper around some generalized cache actions such as put or get.\nClass EntityNonStrictReadWriteAccess; // Standard support for EntityDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\nClass EntityReadOnlyAccess; // Standard support for EntityDataAccess using the AccessType.READ_ONLY access type.\nClass EntityReadWriteAccess; // Standard support for EntityDataAccess using the AccessType.READ_WRITE access type.\nClass EntityTransactionalAccess;\nClass NaturalIdNonStrictReadWriteAccess; // Standard support for NaturalIdDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\n", "des": "Package intended for simplifying the worked needed to implement a caching provider."}
{"index": 1020, "repo": "commons-email-1.5", "code": "Package: resolver\n\nClasses and Interfaces: \nClass DataSourceBaseResolver; // Base class for various resolvers.\nClass DataSourceClassPathResolver; // Creates a DataSource based on an class path.\nClass DataSourceCompositeResolver; // A composite data source resolver.\nClass DataSourceFileResolver; // Creates a DataSource based on an URL.\nClass DataSourceUrlResolver; // Creates a DataSource based on an URL.\n", "des": "Contains implementation classes to resolve data sources from the following locations: class path file system URL"}
{"index": 1017, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: commons\n\nClasses and Interfaces: \nClass CommonsXsdSchema; // Implementation of the XsdSchema interface that uses Apache WS-Commons XML Schema.\nClass CommonsXsdSchemaCollection; // Implementation of the XsdSchemaCollection that uses Apache WS-Commons XML Schema.\nClass CommonsXsdSchemaException; // Commons XmlSchema version of the XsdSchemaException.\n", "des": "Contains a implementation of the XsdSchema interfaces that uses Apache WS-Commons XML Schema."}
{"index": 3156, "repo": "tika-core-2.8.0", "code": "Package: fork\n\nClasses and Interfaces: \nInterface ForkProxy;\nInterface ForkResource;\nClass ForkParser;\nClass ParserFactoryFactory; // Lightweight, easily serializable class that contains enough information to build a ParserFactory\n", "des": "Forked parser."}
{"index": 3247, "repo": "opencms-core-15.0", "code": "Package: publish\n\nSub Packages: \npackage publish.shared; // Classes for the publish dialog which are used by both the client and the server.\n\nClasses and Interfaces: \nInterface I_CmsPublishRelatedResourceProvider; // Interface used to generate mode-specific 'related resources' for the publish dialog in addition to resources linked by normal relations.\nInterface I_CmsVirtualProject; // This interface can be used to implement a new option in the publish dialog's project selector.\nClass A_CmsPublishGroupHelper<RESOURCE,​GROUP>; // Helper class for splitting a publish list into publish groups.\nClass ClientMessages;\nClass CmsCollectorPublishListHelper; // Helper class used to determine which resources from a collector list should be included in a publish list.\nClass CmsCurrentPageProject; // Virtual project which includes the currently edited resource and all its related resources.\nClass CmsDefaultCollectorPublishListProvider; // Default implementation of the I_CmsCollectorPublishListProvider interface.\nClass CmsDefaultPublishGroupHelper; // Default implementation of the publish group helper which operates on CmsPublishResource objects.\nClass CmsDirectPublishProject; // Virtual project for 'direct publishing' of resources.\nClass CmsDummyRelatedResourceProvider; // Dummy implementation of the I_CmsRelatedResourceProvider interface which doesn't actually add any related resources.\nClass CmsMyChangesProject; // Virtual project for the \"My changes\" mode in the publish dialog.\nClass CmsPublish; // ADE publishing features.\nClass CmsPublishActionElement;\nClass CmsPublishListHelper; // Helper functions used to collect information for the publish dialog.\nClass CmsPublishRelationFinder; // Helper class for finding all related resources for a set of resources to be published, for use with the new ADE publish dialog.\nClass CmsPublishRelationFinder.ResourceMap; // A map from resources to sets of resources, which automtically instantiates an empty set when accessing a key that doesn't exist via get().\nClass CmsPublishService; // The implementation of the publish service.\nClass CmsRealProjectVirtualWrapper; // Wrapper to use real OpenCms projects through the I_CmsVirtualProject interface.\nClass CmsSinglePublishGroupHelper; // Publish group helper which only puts all publish resources into a single group.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "This package contains the server-side classes for the publish module."}
{"index": 228, "repo": "nutch-2.4", "code": "Package: config\n\nClasses and Interfaces: \nClass CustomDaoFactory;\nClass CustomTableCreator;\nClass NutchGuiConfiguration;\nClass SpringConfiguration;\n", "des": "Contains config classes for Web UI"}
{"index": 3683, "repo": "solr-core-9.3.0", "code": "Package: transform\n\nClasses and Interfaces: \nInterface TransformerFactory.FieldRenamer; // The TransformerFactory.FieldRenamer interface should be implemented by any TransformerFactory capable of generating transformers that might rename fields, and should implement TransformerFactory.FieldRenamer.create(String, SolrParams, SolrQueryRequest, Map, Set) in place of TransformerFactory.create(String, SolrParams, SolrQueryRequest) (with the latter method overridden to throw UnsupportedOperationException).\nClass BaseEditorialTransformer;\nClass ChildDocTransformerFactory; // Attaches all descendants (child documents) to each parent document.\nClass CoreAugmenterFactory;\nClass DocIdAugmenterFactory; // Augments the document with a [docid] integer containing it's current (internal) id in the lucene index.\nClass DocTransformer; // A DocTransformer can add, remove or alter a Document before it is written out to the Response.\nClass DocTransformer.NoopFieldTransformer; // Trivial Impl that ensure that the specified field is requested as an \"extra\" field, but then does nothing during the transformation phase.\nClass DocTransformers; // Transform a document before it gets sent out\nClass ElevatedMarkerFactory; // Used to mark whether a document has been elevated or not\nClass ExcludedMarkerFactory;\nClass ExplainAugmenterFactory;\nClass GeoTransformerFactory; // This DocumentTransformer will write a Shape to the SolrDocument using the requested format.\nClass RawValueTransformerFactory;\nClass RenameFieldTransformer; // Return a field with a name that is different that what is indexed\nClass ScoreAugmenter; // Simple Augmenter that adds the score\nClass ShardAugmenterFactory;\nClass SubQueryAugmenterFactory; // This transformer executes subquery per every result document.\nClass TransformerFactory; // New instance for each request\nClass ValueAugmenterFactory;\nClass ValueSourceAugmenter; // Add values from a ValueSource (function query etc)\nEnum ExplainAugmenterFactory.Style;\nEnum ShardAugmenterFactory.Style;\n", "des": "APIs and implementations of DocTransformer for modifying documents in Solr request responses"}
{"index": 1226, "repo": "spring-plugin-core-3.0.0", "code": "Package: config\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented @Import(PluginRegistriesBeanDefinitionRegistrar.class) public @interface EnablePluginRegistries; // Enables exposure of PluginRegistry instances for the configured Plugin types\npublic class PluginListDefinitionParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser; // Bean definition parser to register <list /> elements from the plugin namespace.\npublic class PluginNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // Simple namespace handler for plugin-config namespace.\npublic class PluginRegistriesBeanDefinitionRegistrar extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar; // ImportBeanDefinitionRegistrar to register PluginRegistryFactoryBean instances for type listed in EnablePluginRegistries.\npublic class PluginRegistryDefinitionParser extends PluginListDefinitionParser; // Simple extension of PluginListDefinitionParser.\n", "des": "This package contains configuration support classes to ease registry configuration with Spring namespaces."}
{"index": 1627, "repo": "spring-kafka-3.0.9", "code": "Package: listener\n\nSub Packages: \npackage listener.adapter; // Provides classes for adapting listeners.\n\nClasses and Interfaces: \npublic abstract class AbstractConsumerSeekAware extends Object implements ConsumerSeekAware; // Manages the ConsumerSeekAware.ConsumerSeekCallback s for the listener.\npublic abstract class AbstractKafkaBackOffManagerFactory extends Object implements KafkaBackOffManagerFactory, org.springframework.context.ApplicationContextAware; // Base class for KafkaBackOffManagerFactory implementations.\npublic abstract class AbstractMessageListenerContainer<K,V> extends Object implements GenericMessageListenerContainer<K,V>, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.ApplicationContextAware; // The base implementation for the MessageListenerContainer.\n@FunctionalInterface public interface AcknowledgingConsumerAwareMessageListener<K,V> extends MessageListener<K,V>; // Listener for handling incoming Kafka messages, propagating an acknowledgment handle that recipients can invoke when the message has been processed.\n@FunctionalInterface public interface AcknowledgingMessageListener<K,V> extends MessageListener<K,V>; // Listener for handling incoming Kafka messages, propagating an acknowledgment handle that recipients can invoke when the message has been processed.\n@FunctionalInterface public interface AfterRollbackProcessor<K,V>; // Invoked by a listener container with remaining, unprocessed, records (including the failed record).\npublic interface BackOffHandler; // Handler for the provided back off time, listener container and exception.\n@FunctionalInterface public interface BatchAcknowledgingConsumerAwareMessageListener<K,V> extends BatchMessageListener<K,V>; // Listener for handling a batch of incoming Kafka messages, propagating an acknowledgment handle that recipients can invoke when the message has been processed.\n@FunctionalInterface public interface BatchAcknowledgingMessageListener<K,V> extends BatchMessageListener<K,V>; // Listener for handling a batch of incoming Kafka messages, propagating an acknowledgment handle that recipients can invoke when the message has been processed.\n@FunctionalInterface public interface BatchConsumerAwareMessageListener<K,V> extends BatchMessageListener<K,V>; // Listener for handling a batch of incoming Kafka messages; the list is created from the consumer records object returned by a poll.\n", "des": "Package for kafka listeners"}
{"index": 3505, "repo": "poi-5.2.3", "code": "Package: formula\n\nSub Packages: \npackage formula.ptg; // The formula package contains binary PTG structures used in Formulas\n\nClasses and Interfaces: \nInterface EvaluationCell; // Abstracts a cell for the purpose of formula evaluation.\nInterface EvaluationName; // Abstracts a name record for formula evaluation.\nInterface EvaluationSheet; // Abstracts a sheet for the purpose of formula evaluation.\nInterface EvaluationWorkbook; // Abstracts a workbook for the purpose of formula evaluation.\nInterface ExternSheetReferenceToken; // Should be implemented by any Ptg subclass that needs has an extern sheet index For POI internal use only\nInterface FormulaParsingWorkbook; // Abstracts a workbook for the purpose of formula parsing. For POI internal use only\nInterface FormulaRenderingWorkbook; // Abstracts a workbook for the purpose of converting formula to text.\nInterface IStabilityClassifier; // Used to help optimise cell evaluation result caching by allowing applications to specify which parts of a workbook are final. The term final is introduced here to denote immutability or 'having constant definition'.\nInterface SheetRange;\nInterface ThreeDEval; // Optional Extension to the likes of AreaEval and AreaEvalBase, which allows for looking up 3D (sheet+row+column) evaluations\nInterface TwoDEval; // Common interface of AreaEval and AreaEvalBase, for 2D (row+column) evaluations\nInterface WorkbookDependentFormula; // Should be implemented by any Ptg subclass that needs a workbook to render its formula.\nInterface WorkbookEvaluatorProvider; // Provides access to a WorkbookEvaluator, eg for use with CollaboratingWorkbooksEnvironment\nClass BaseFormulaEvaluator; // Common functionality across file formats for evaluating formula cells.\nClass CacheAreaEval; // Provides holding structure for temporary values in arrays during the evaluation process.\nClass CollaboratingWorkbooksEnvironment; // Manages a collection of WorkbookEvaluators, in order to support evaluation of formulas across spreadsheets.\nClass ConditionalFormattingEvaluator; // Evaluates Conditional Formatting constraints.\nClass DataValidationEvaluator; // Evaluates Data Validation constraints.\nClass DataValidationEvaluator.DataValidationContext; // This class organizes and encapsulates all the pieces of information related to a single data validation configuration for a single cell.\n", "des": "This package contains common internal POI code for manipulating formulas."}
{"index": 1582, "repo": "spring-security-oauth2-client-6.1.2", "code": "Package: registration\n\nClasses and Interfaces: \npublic final class ClientRegistration extends Object implements Serializable; // A representation of a client registration with an OAuth 2.0 or OpenID Connect 1.0 Provider.\npublic static final class ClientRegistration.Builder extends Object implements Serializable; // A builder for ClientRegistration.\npublic interface ClientRegistrationRepository; // A repository for OAuth 2.0 / OpenID Connect 1.0 ClientRegistration(s).\npublic final class ClientRegistrations extends Object; // Allows creating a ClientRegistration.Builder from an OpenID Provider Configuration or Authorization Server Metadata based on provided issuer.\npublic final class InMemoryClientRegistrationRepository extends Object implements ClientRegistrationRepository, Iterable<ClientRegistration>; // A ClientRegistrationRepository that stores ClientRegistration(s) in-memory.\npublic final class InMemoryReactiveClientRegistrationRepository extends Object implements ReactiveClientRegistrationRepository, Iterable<ClientRegistration>; // A Reactive ClientRegistrationRepository that stores ClientRegistration(s) in-memory.\npublic interface ReactiveClientRegistrationRepository; // A reactive repository for OAuth 2.0 / OpenID Connect 1.0 ClientRegistration(s).\n", "des": "Classes and interfaces that provide support for ClientRegistration."}
{"index": 580, "repo": "commons-collections-3.2.2", "code": "Package: functors\n\nClasses and Interfaces: \nInterface PredicateDecorator; // Defines a predicate that decorates one or more other predicates.\nClass AllPredicate; // Predicate implementation that returns true if all the predicates return true.\nClass AndPredicate; // Predicate implementation that returns true if both the predicates return true.\nClass AnyPredicate; // Predicate implementation that returns true if any of the predicates return true.\nClass ChainedClosure; // Closure implementation that chains the specified closures together.\nClass ChainedTransformer; // Transformer implementation that chains the specified transformers together.\nClass CloneTransformer; // Transformer implementation that returns a clone of the input object.\nClass ClosureTransformer; // Transformer implementation that calls a Closure using the input object and then returns the input.\nClass ConstantFactory; // Factory implementation that returns the same constant each time.\nClass ConstantTransformer; // Transformer implementation that returns the same constant each time.\nClass EqualPredicate; // Predicate implementation that returns true if the input is the same object as the one stored in this predicate by equals.\nClass ExceptionClosure; // Closure implementation that always throws an exception.\nClass ExceptionFactory; // Factory implementation that always throws an exception.\nClass ExceptionPredicate; // Predicate implementation that always throws an exception.\nClass ExceptionTransformer; // Transformer implementation that always throws an exception.\nClass FactoryTransformer; // Transformer implementation that calls a Factory and returns the result.\nClass FalsePredicate; // Predicate implementation that always returns false.\nClass ForClosure; // Closure implementation that calls another closure n times, like a for loop.\nClass IdentityPredicate; // Predicate implementation that returns true if the input is the same object as the one stored in this predicate.\nClass IfClosure; // Closure implementation acts as an if statement calling one or other closure based on a predicate.\nClass InstanceofPredicate; // Predicate implementation that returns true if the input is an instanceof the type stored in this predicate.\nClass InstantiateFactory; // Factory implementation that creates a new object instance by reflection.\nClass InstantiateTransformer; // Transformer implementation that creates a new object instance by reflection.\nClass InvokerTransformer; // Transformer implementation that creates a new object instance by reflection.\nClass MapTransformer; // Transformer implementation that returns the value held in a specified map using the input parameter as a key.\nClass NonePredicate; // Predicate implementation that returns true if none of the predicates return true.\nClass NOPClosure; // Closure implementation that does nothing.\n", "des": "This package contains implementations of the Closure, Predicate, Transformer and Factory interfaces."}
{"index": 2103, "repo": "spring-webflux-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \npublic abstract class AbstractMessageReaderArgumentResolver extends HandlerMethodArgumentResolverSupport; // Abstract base class for argument resolvers that resolve method arguments by reading the request body with an HttpMessageReader.\npublic abstract class AbstractMessageWriterResultHandler extends HandlerResultHandlerSupport; // Abstract base class for result handlers that handle return values by writing to the response with HttpMessageWriter.\npublic abstract class AbstractNamedValueArgumentResolver extends HandlerMethodArgumentResolverSupport; // Abstract base class for resolving method arguments from a named value.\nprotected static class AbstractNamedValueArgumentResolver.NamedValueInfo extends Object; // Represents the information about a named value, including name, whether it's required and a default value.\npublic abstract class AbstractNamedValueSyncArgumentResolver extends AbstractNamedValueArgumentResolver implements SyncHandlerMethodArgumentResolver; // An extension of AbstractNamedValueArgumentResolver for named value resolvers that are synchronous and yet non-blocking.\npublic class ArgumentResolverConfigurer extends Object; // Helps to configure resolvers for Controller method arguments.\npublic class ContinuationHandlerMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // No-op resolver for method arguments of type Continuation.\npublic class CookieValueMethodArgumentResolver extends AbstractNamedValueSyncArgumentResolver; // Resolve method arguments annotated with @CookieValue.\npublic class ErrorsMethodArgumentResolver extends HandlerMethodArgumentResolverSupport; // Resolve Errors or BindingResult method arguments.\npublic class ExpressionValueMethodArgumentResolver extends AbstractNamedValueSyncArgumentResolver; // Resolves method arguments annotated with @Value.\npublic class HttpEntityMethodArgumentResolver extends AbstractMessageReaderArgumentResolver; // Resolves method arguments of type HttpEntity or RequestEntity by reading the body of the request through a compatible HttpMessageReader.\npublic class MatrixVariableMapMethodArgumentResolver extends HandlerMethodArgumentResolverSupport implements SyncHandlerMethodArgumentResolver; // Resolves arguments of type Map annotated with @MatrixVariable where the annotation does not specify a name.\npublic class MatrixVariableMethodArgumentResolver extends AbstractNamedValueSyncArgumentResolver; // Resolves arguments annotated with @MatrixVariable.\npublic class ModelAttributeMethodArgumentResolver extends HandlerMethodArgumentResolverSupport; // Resolve @ModelAttribute annotated method arguments.\npublic class ModelMethodArgumentResolver extends HandlerMethodArgumentResolverSupport implements SyncHandlerMethodArgumentResolver; // Resolver for a controller method argument of type Model that can also be resolved as a Map.\n", "des": "Infrastructure for annotation-based handler method processing."}
{"index": 682, "repo": "jackson-databind-2.15.2", "code": "Package: deser\n\nSub Packages: \npackage deser.impl; // Contains those implementation classes of deserialization part of data binding that are not considered part of public or semi-public interfaces.\npackage deser.std; // Contains public standard implementations of abstraction that Jackson uses.\n\nClasses and Interfaces: \nInterface ContextualDeserializer; // Add-on interface that JsonDeserializers can implement to get a callback that can be used to create contextual (context-dependent) instances of deserializer to use for handling properties of supported type.\nInterface ContextualKeyDeserializer; // Add-on interface that KeyDeserializers can implement to get a callback that can be used to create contextual instances of key deserializer to use for handling Map keys of supported type.\nInterface Deserializers; // Interface that defines API for simple extensions that can provide additional deserializers for various types.\nInterface KeyDeserializers; // Interface that defines API for simple extensions that can provide additional deserializers for deserializer Map keys of various types, from JSON property names.\nInterface NullValueProvider; // Helper interface implemented by classes that are to be used as null providers during deserialization.\nInterface ResolvableDeserializer; // Interface used to indicate deserializers that want to do post-processing after construction but before being returned to caller (and possibly cached) and used.\nInterface ValueInstantiator.Gettable;\nInterface ValueInstantiators; // Interface for providers of ValueInstantiator instances.\nClass AbstractDeserializer; // Deserializer only used for abstract types used as placeholders during polymorphic type handling deserialization.\nClass BasicDeserializerFactory; // Abstract factory base class that can provide deserializers for standard JDK classes, including collection classes and simple heuristics for \"upcasting\" common collection interface types (such as Collection).\nClass BasicDeserializerFactory.ContainerDefaultMappings; // Helper class to contain default mappings for abstract JDK Collection and Map types.\nClass BasicDeserializerFactory.CreatorCollectionState; // Helper class to contain largish number of parameters that need to be passed during Creator introspection.\nClass BeanDeserializer; // Deserializer class that can deserialize instances of arbitrary bean objects, usually from JSON Object structs,\nClass BeanDeserializerBase; // Base class for BeanDeserializer.\nClass BeanDeserializerBuilder; // Builder class used for aggregating deserialization information about a POJO, in order to build a JsonDeserializer for deserializing instances.\n", "des": "Contains implementation classes of deserialization part of data binding."}
{"index": 1247, "repo": "spring-integration-smb-6.1.2", "code": "Package: filters\n\nClasses and Interfaces: \npublic class SmbPersistentAcceptOnceFileListFilter extends org.springframework.integration.file.filters.AbstractPersistentAcceptOnceFileListFilter<jcifs.smb.SmbFile>; // Implementation of AbstractPersistentAcceptOnceFileListFilter for SMB.\npublic class SmbRegexPatternFileListFilter extends org.springframework.integration.file.filters.AbstractRegexPatternFileListFilter<jcifs.smb.SmbFile>; // Implementation of AbstractRegexPatternFileListFilter for SMB.\npublic class SmbSimplePatternFileListFilter extends org.springframework.integration.file.filters.AbstractSimplePatternFileListFilter<jcifs.smb.SmbFile>; // Implementation of AbstractSimplePatternFileListFilter for SMB.\npublic class SmbSystemMarkerFilePresentFileListFilter extends org.springframework.integration.file.filters.AbstractMarkerFilePresentFileListFilter<jcifs.smb.SmbFile>; // Implementation of AbstractMarkerFilePresentFileListFilter for SMB.\n", "des": "SMB Namespace support classes."}
{"index": 1457, "repo": "spring-data-redis-3.1.2", "code": "Package: types\n\nClasses and Interfaces: \npublic class Expiration extends Object; // Expiration holds a value with its associated TimeUnit.\npublic class RedisClientInfo extends Object; // RedisClientInfo provides general and statistical information about client connections.\npublic static enum RedisClientInfo.INFO extends Enum<RedisClientInfo.INFO>;\npublic static class RedisClientInfo.RedisClientInfoBuilder extends Object;\n", "des": "Redis domain specific types."}
{"index": 975, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: support\n\nClasses and Interfaces: \nClass KeyManagersFactoryBean; // Spring factory bean for an array of KeyManagers.\nClass KeyStoreFactoryBean; // Spring factory bean for a KeyStore.\nClass KeyStoreUtils; // Generic utility methods for dealing with KeyStore objects.\nClass SpringSecurityUtils; // Generic utility methods for Spring Security\nClass TrustManagersFactoryBean; // Spring factory bean for an array of TrustManagers.\n", "des": "Contains support classes for handling WS-Security messages."}
{"index": 6, "repo": "connect-api-3.5.0", "code": "Package: health\n\nClasses and Interfaces: \nInterface ConnectClusterDetails; // Provides immutable Connect cluster information, such as the ID of the backing Kafka cluster.\nInterface ConnectClusterState; // Provides the ability to lookup connector metadata, including status and configurations, as well as immutable cluster information such as Kafka cluster ID.\nClass AbstractState; // Provides the current status for a connector or a task, along with an identifier for its Connect worker\nClass ConnectorHealth; // Provides basic health information about the connector and its tasks.\nClass ConnectorState; // Describes the status, worker ID, and any errors associated with a connector.\nClass TaskState; // Describes the state, IDs, and any errors of a connector task.\nEnum ConnectorType; // Enum definition that identifies the type of the connector.\n", "des": "Provides an API for describing the state of a running Connect cluster to ConnectRestExtension instances."}
{"index": 1597, "repo": "spring-websocket-6.0.11", "code": "Package: jetty\n\nClasses and Interfaces: \npublic class JettyRequestUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A RequestUpgradeStrategy for Jetty 11.\n", "des": "Server-side support for the Jetty 9+ WebSocket API."}
{"index": 2978, "repo": "pulsar-broker-3.0.0", "code": "Package: impl\n\nClasses and Interfaces: \npublic class InMemoryPendingAckStore extends Object implements PendingAckStore; // In memory implementation of PendingAckStore.\npublic class InMemoryPendingAckStoreProvider extends Object implements TransactionPendingAckStoreProvider;\npublic class MLPendingAckReplyCallBack extends Object implements PendingAckReplyCallBack; // MLPendingAckStore reply call back.\npublic class MLPendingAckStore extends Object implements PendingAckStore; // The implement of the pending ack store by manageLedger.\npublic class MLPendingAckStoreProvider extends Object implements TransactionPendingAckStoreProvider; // Provider is for MLPendingAckStore.\npublic class PendingAckHandleDisabled extends Object implements PendingAckHandle; // The disabled implementation of PendingAckHandle.\npublic class PendingAckHandleImpl extends PendingAckHandleState implements PendingAckHandle; // The default implementation of PendingAckHandle.\npublic abstract class PendingAckHandleState extends Object; // The implement of transaction pending ack store.\npublic static enum PendingAckHandleState.State extends Enum<PendingAckHandleState.State>; // The state of the pending ack handle PendingAckHandleState.\npublic class PendingAckHandleStatsImpl extends Object implements PendingAckHandleStats;\n", "des": "The implementation for processing pending acks in transactions."}
{"index": 657, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: uam\n\nClasses and Interfaces: \nClass UnmanagedAMPoolManager; // A service that manages a pool of UAM managers in UnmanagedApplicationManager.\nClass UnmanagedApplicationManager; // UnmanagedApplicationManager is used to register unmanaged application and negotiate for resources from resource managers.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 675, "repo": "commons-lang3-3.12.0", "code": "Package: text\n\nSub Packages: \npackage text.translate; // An API for creating text translation routines from a set of smaller building blocks.\n\nClasses and Interfaces: \nInterface FormatFactory; // as of 3.6, use commons-text FormatFactory instead\nClass CompositeFormat; // as of 3.6, use commons-text CompositeFormat instead\nClass ExtendedMessageFormat; // as of 3.6, use commons-text ExtendedMessageFormat instead\nClass FormattableUtils; // as of 3.6, use commons-text FormattableUtils instead\nClass StrBuilder; // as of 3.6, use commons-text TextStringBuilder instead\nClass StrLookup<V>; // as of 3.6, use commons-text StringLookupFactory instead\nClass StrMatcher; // as of 3.6, use commons-text StringMatcherFactory instead\nClass StrSubstitutor; // as of 3.6, use commons-text StringSubstitutor instead\nClass StrTokenizer; // as of 3.6, use commons-text StringTokenizer instead\nClass WordUtils; // as of 3.6, use commons-text WordUtils instead\n", "des": "Provides classes for handling and manipulating text, partly as an extension to java.text."}
{"index": 2954, "repo": "spring-integration-xml-6.1.2", "code": "Package: transformer\n\nSub Packages: \npackage transformer.support; // Contains support classes for Transformers.\n\nClasses and Interfaces: \npublic abstract class AbstractXmlTransformer extends org.springframework.integration.transformer.AbstractTransformer; // Super class for XML transformers.\npublic class MarshallingTransformer extends AbstractXmlTransformer; // An implementation of AbstractTransformer that delegates to an OXM Marshaller.\npublic class ResultToDocumentTransformer extends Object implements ResultTransformer; // Creates a Document from a Result payload.\npublic class ResultToStringTransformer extends Object implements ResultTransformer; // Converts the passed Result to an instance of String.\npublic interface ResultTransformer; // Implementations of this class allow for the transformation of Result objects to other formats.\npublic class SourceCreatingTransformer extends org.springframework.integration.transformer.AbstractPayloadTransformer<Object,Source>; // Transforms the payload to a Source using a SourceFactory.\npublic class UnmarshallingTransformer extends org.springframework.integration.transformer.AbstractPayloadTransformer<Object,Object>; // An implementation of Transformer that delegates to an OXM Unmarshaller.\npublic class XPathHeaderEnricher extends org.springframework.integration.transformer.HeaderEnricher; // Transformer implementation that evaluates XPath expressions against the message payload and inserts the result of the evaluation into a message header.\npublic class XPathTransformer extends org.springframework.integration.transformer.AbstractTransformer; // Transformer implementation that evaluates an XPath expression against the inbound Message payload and returns a Message whose payload is the result of that evaluation.\npublic class XsltPayloadTransformer extends AbstractXmlTransformer implements org.springframework.beans.factory.BeanClassLoaderAware; // Thread safe XSLT transformer implementation which returns a transformed Source, Document, or String.\n", "des": "Provides Transformer and Enricher implementations."}
{"index": 157, "repo": "ignite-core-2.15.0", "code": "Package: datastreamer\n\nClasses and Interfaces: \nInterface DataStreamerCacheUpdaters.InternalUpdater; // Marker interface for updaters which do not need to unwrap cache objects.\nClass DataStreamerCacheUpdaters; // Bundled factory for cache updaters.\nClass DataStreamerEntry;\nClass DataStreamerImpl<K,V>; // Data streamer implementation.\nClass DataStreamerImpl.IsolatedUpdater; // Isolated receiver which only loads entry initial value.\nClass DataStreamerRequest;\nClass DataStreamerResponse;\nClass DataStreamProcessor<K,V>; // Data stream processor.\n", "des": "Data streamer processor."}
{"index": 3490, "repo": "poi-5.2.3", "code": "Package: hssf\n\nSub Packages: \npackage hssf.eventusermodel; // HSSF eventmodel Package provides an event-based API for reading HSSF files.\npackage hssf.model; // Provides low level API structures for reading, writing, modifying XLS files.\npackage hssf.record; // Record package contains class representations for XLS binary strutures.\npackage hssf.usermodel; // The usermodel package maps HSSF low level structures to familiar workbook/sheet model\npackage hssf.util; // The util package contains tools needed for writing HSSF files that are not necesarily \"real\" HSSF concepts.\n\nClasses and Interfaces: \nClass OldExcelFormatException;\n", "des": "Horrible SpreadSheet Format API's for reading/writting Excel files using pure Java."}
{"index": 449, "repo": "camel-core-3.0.0-RC1", "code": "Package: builder\n\nClasses and Interfaces: \nInterface AdviceWithTask; // Task or command being executed when using the advice with feature.\nInterface EndpointConsumerBuilder; // Type-safe endpoint DSL for building consumer endpoints.\nInterface EndpointProducerBuilder; // Type-safe endpoint DSL for building producer endpoints.\nInterface ErrorHandlerBuilder; // A builder of a Error Handler\nInterface FlexibleAggregationStrategy.CompletionAwareMixin;\nInterface FlexibleAggregationStrategy.TimeoutAwareMixin;\nClass AdviceWithBuilder<T extends ProcessorDefinition<?>>; // A builder when using the advice with feature.\nClass AdviceWithRouteBuilder; // A RouteBuilder which has extended capabilities when using the advice with feature.\nClass AdviceWithTasks; // AdviceWithTask tasks which are used by the AdviceWithRouteBuilder.\nClass AggregationStrategies; // Toolbox class to create commonly used Aggregation Strategies in a fluent manner.\nClass AggregationStrategyClause<T>;\nClass Builder; // A helper class for including portions of the expression and predicate Java DSL Implementation of this builder should favor build expressions using the definition classes from the org.apache.camel.model.language package, to build the routes using the same types as it would happen when using XML DSL.\nClass BuilderSupport; // Base class for implementation inheritance for different clauses in the Java DSL\nClass DataFormatClause<T extends ProcessorDefinition<?>>; // An expression for constructing the different possible DataFormat options.\nClass DeadLetterChannelBuilder; // A builder of a Dead Letter Channel\nClass DefaultErrorHandlerBuilder; // The default error handler builder.\nClass EnrichClause<T extends ProcessorDefinition<?>>;\nClass ErrorHandlerBuilderRef; // Represents a proxy to an error handler builder which is resolved by named reference\nClass ErrorHandlerBuilderSupport; // Base class for builders of error handling.\nClass ExchangeBuilder; // Builder to create Exchange and add headers and set body on the Exchange Message.\nClass ExpressionBuilder; // A helper class for working with expressions.\nClass ExpressionClause<T>; // Represents an expression clause within the DSL which when the expression is complete the clause continues to another part of the DSL\nClass ExpressionClauseSupport<T>; // A support class for building expression clauses.\nClass FlexibleAggregationStrategy<E>; // The Flexible Aggregation Strategy is a highly customizable, fluently configurable aggregation strategy.\n", "des": "The Camel Domain Specific Language for creating Routes, Predicates, Expressions and Error Handlers."}
{"index": 1559, "repo": "spring-restdocs-core-3.0.0", "code": "Package: cli\n\nClasses and Interfaces: \npublic abstract class CliDocumentation extends Object; // Static factory methods for documenting a RESTful API as if it were being driven using a command-line utility such as curl or HTTPie.\npublic interface CommandFormatter; // Formatter for CLI commands such as those included in CurlRequestSnippet and HttpieRequestSnippet.\npublic class CurlRequestSnippet extends TemplatedSnippet; // A Snippet that documents the curl command for a request.\npublic class HttpieRequestSnippet extends TemplatedSnippet; // A Snippet that documents the HTTPie command for a request.\n", "des": "Documenting CLI commands required to make a request to a RESTful API."}
{"index": 2543, "repo": "spring-security-core-6.1.2", "code": "Package: util\n\nClasses and Interfaces: \npublic final class FieldUtils extends Object; // Offers static methods for directly manipulating fields.\npublic class InMemoryResource extends org.springframework.core.io.AbstractResource; // An in memory implementation of Spring's Resource interface.\npublic final class MethodInvocationUtils extends Object; // Static utility methods for creating MethodInvocations usable within Spring Security.\npublic class SimpleMethodInvocation extends Object implements org.aopalliance.intercept.MethodInvocation; // Represents the AOP Alliance MethodInvocation.\n", "des": "General utility classes used throughout the Spring Security framework."}
{"index": 921, "repo": "commons-compress-1.23.0", "code": "Package: lz4\n\nClasses and Interfaces: \nClass BlockLZ4CompressorInputStream; // CompressorInputStream for the LZ4 block format.\nClass BlockLZ4CompressorOutputStream; // CompressorOutputStream for the LZ4 block format.\nClass FramedLZ4CompressorInputStream; // CompressorInputStream for the LZ4 frame format.\nClass FramedLZ4CompressorOutputStream; // CompressorOutputStream for the LZ4 frame format.\nClass FramedLZ4CompressorOutputStream.Parameters; // Parameters of the LZ4 frame format.\nClass XXHash32; // Implementation of the xxhash32 hash algorithm.\nEnum FramedLZ4CompressorOutputStream.BlockSize; // The block sizes supported by the format.\n", "des": "Provides stream classes for the LZ4 algorithm."}
{"index": 1877, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: aop\n\nClasses and Interfaces: \npublic abstract class AnnotationsAuthorizingMethodInterceptor extends AuthorizingMethodInterceptor; // An AnnotationsAuthorizingMethodInterceptor is a MethodInterceptor that asserts a given method is authorized to execute based on one or more configured AuthorizingAnnotationMethodInterceptors.\npublic class AuthenticatedAnnotationHandler extends AuthorizingAnnotationHandler; // Handles RequiresAuthentication annotations and ensures the calling subject is authenticated before allowing access.\npublic class AuthenticatedAnnotationMethodInterceptor extends AuthorizingAnnotationMethodInterceptor; // Checks to see if a @RequiresAuthenticated annotation is declared, and if so, ensures the calling Subject.isAuthenticated() before invoking the method.\npublic abstract class AuthorizingAnnotationHandler extends AnnotationHandler; // An AnnotationHandler that executes authorization (access control) behavior based on directive(s) found in a JSR-175 Annotation.\npublic abstract class AuthorizingAnnotationMethodInterceptor extends AnnotationMethodInterceptor; // An AnnotationMethodInterceptor that asserts the calling code is authorized to execute the method before allowing the invocation to continue by inspecting code annotations to perform an access control check.\npublic abstract class AuthorizingMethodInterceptor extends MethodInterceptorSupport; // Basic abstract class to support intercepting methods that perform authorization (access control) checks.\npublic class DenyAllAnnotationHandler extends AuthorizingAnnotationHandler; // This AnnotationHandler denys access from any subject (anonymous or logged in user).\npublic class GuestAnnotationHandler extends AuthorizingAnnotationHandler; // Checks to see if a @RequiresGuest annotation is declared, and if so, ensures the calling Subject does not have an identity before invoking the method.\npublic class GuestAnnotationMethodInterceptor extends AuthorizingAnnotationMethodInterceptor; // Checks to see if a @RequiresGuest annotation is declared, and if so, ensures the calling Subject does not have an identity before invoking the method.\npublic class PermissionAnnotationHandler extends AuthorizingAnnotationHandler; // Checks to see if a @RequiresPermissions annotation is declared, and if so, performs a permission check to see if the calling Subject is allowed continued access.\npublic class PermissionAnnotationMethodInterceptor extends AuthorizingAnnotationMethodInterceptor; // Checks to see if a @RequiresPermissions annotation is declared, and if so, performs a permission check to see if the calling Subject is allowed to call the method.\npublic class PermitAllAnnotationHandler extends AuthorizingAnnotationHandler; // This AnnotationHandler allows access from any subject (anonymous or logged in user).\n", "des": "Contains AOP implementation support classes specifically used for authorization operations, particularly supporting AOP Method Interceptors and JSR-175 metadata Annotations."}
{"index": 1771, "repo": "spring-data-mongodb-4.1.2", "code": "Package: config\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(org.springframework.data.mongodb.repository.config.MongoRepositoriesRegistrar.class) public @interface EnableMongoRepositories; // Annotation to activate MongoDB repositories.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoriesRegistrar.class) public @interface EnableReactiveMongoRepositories; // Annotation to activate reactive MongoDB repositories.\npublic class MongoRepositoryConfigNamespaceHandler extends MongoNamespaceHandler; // NamespaceHandler to register repository configuration.\npublic class MongoRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport; // RepositoryConfigurationExtension for MongoDB.\npublic class ReactiveMongoRepositoryConfigurationExtension extends MongoRepositoryConfigurationExtension; // Reactive RepositoryConfigurationExtension for MongoDB.\n", "des": "Support infrastructure for the configuration of MongoDB specific repositories."}
{"index": 3558, "repo": "guava-32.1.1-jre", "code": "Package: io\n\nClasses and Interfaces: \nInterface ByteArrayDataInput; // An extension of DataInput for reading from in-memory byte arrays; its methods offer identical functionality but do not throw IOException.\nInterface ByteArrayDataOutput; // An extension of DataOutput for writing to in-memory byte arrays; its methods offer identical functionality but do not throw IOException.\nInterface ByteProcessor<T extends @Nullable java.lang.Object>; // A callback interface to process bytes from a stream.\nInterface LineProcessor<T extends @Nullable java.lang.Object>; // A callback to be used with the streaming readLines methods.\nClass BaseEncoding; // A binary encoding scheme for reversibly translating between byte sequences and printable ASCII strings.\nClass ByteSink; // A destination to which bytes can be written, such as a file.\nClass ByteSource; // A readable source of bytes, such as a file.\nClass ByteStreams; // Provides utility methods for working with byte arrays and I/O streams.\nClass CharSink; // A destination to which characters can be written, such as a text file.\nClass CharSource; // A readable source of characters, such as a text file.\nClass CharStreams; // Provides utility methods for working with character streams.\nClass Closeables; // Utility methods for working with Closeable objects.\nClass Closer; // A Closeable that collects Closeable resources and closes them all when it is closed.\nClass CountingInputStream; // An InputStream that counts the number of bytes read.\nClass CountingOutputStream; // An OutputStream that counts the number of bytes written.\nClass FileBackedOutputStream; // An OutputStream that starts buffering to a byte array, but switches to file buffering once the data reaches a configurable size.\nClass Files; // Provides utility methods for working with files.\nClass Flushables; // Utility methods for working with Flushable objects.\nClass LineReader; // A class for reading lines of text.\nClass LittleEndianDataInputStream; // An implementation of DataInput that uses little-endian byte ordering for reading short, int, float, double, and long values.\nClass LittleEndianDataOutputStream; // An implementation of DataOutput that uses little-endian byte ordering for writing char, short, int, float, double, and long values.\nClass MoreFiles; // Static utilities for use with Path instances, intended to complement Files.\n", "des": "Utility methods and classes for I/O; for example input streams, output streams, readers, writers, and files."}
{"index": 1209, "repo": "commons-math3-3.6.1", "code": "Package: rank\n\nClasses and Interfaces: \nInterface PSquarePercentile.PSquareMarkers; // An interface that encapsulates abstractions of the P-square algorithm markers as is explained in the original works.\nClass Max; // Returns the maximum of the available values.\nClass Median; // Returns the median of the available values.\nClass Min; // Returns the minimum of the available values.\nClass Percentile; // Provides percentile computation.\nClass PSquarePercentile; // A StorelessUnivariateStatistic estimating percentiles using the P2 Algorithm as explained by Raj Jain and Imrich Chlamtac in P2 Algorithm for Dynamic Calculation of Quantiles and Histogram Without Storing Observations.\nEnum Percentile.EstimationType; // An enum for various estimation strategies of a percentile referred in wikipedia on quantile with the names of enum matching those of types mentioned in wikipedia.\n", "des": "Summary statistics based on ranks."}
{"index": 2687, "repo": "spring-data-jpa-3.1.2", "code": "Package: query\n\nClasses and Interfaces: \npublic abstract class AbstractJpaQuery extends Object implements RepositoryQuery; // Abstract base class to implement RepositoryQuerys.\npublic class BadJpqlGrammarException extends InvalidDataAccessResourceUsageException; // An exception thrown if the JPQL query is invalid.\npublic class BeanFactoryQueryRewriterProvider extends Object implements QueryRewriterProvider; // A BeanFactory-based QueryRewriterProvider.\npublic class DefaultJpaEntityMetadata<T> extends Object implements JpaEntityMetadata<T>; // Default implementation for JpaEntityMetadata.\npublic class DefaultJpaQueryMethodFactory extends Object implements JpaQueryMethodFactory; // A factory for creating JpaQueryMethod instances.\npublic class DefaultQueryEnhancer extends Object implements QueryEnhancer; // The implementation of QueryEnhancer using QueryUtils.\npublic class DelegatingQueryRewriter extends Object implements QueryRewriter; // Delegating QueryRewriter that delegates rewrite calls to a delegate provided by a Supplier.\npublic final class EscapeCharacter extends Object; // A value type encapsulating an escape character for LIKE queries and the actually usage of it in escaping Strings.\npublic class InvalidJpaQueryMethodException extends RuntimeException; // Signals that we encountered an invalid query method.\npublic class Jpa21Utils extends Object; // Utils for bridging various JPA 2.1 features.\npublic class JpaCountQueryCreator extends JpaQueryCreator; // Special JpaQueryCreator that creates a count projecting query.\npublic class JpaEntityGraph extends Object; // EntityGraph configuration for JPA 2.1 EntityGraphs.\npublic interface JpaEntityMetadata<T> extends EntityMetadata<T>; // JPA specific extension of EntityMetadata.\npublic class JpaParameters extends Parameters<JpaParameters,JpaParameters.JpaParameter>; // Custom extension of Parameters discovering additional query parameter annotations.\npublic static class JpaParameters.JpaParameter extends Parameter; // Custom Parameter implementation adding parameters of type Temporal to the special ones.\npublic class JpaParametersParameterAccessor extends ParametersParameterAccessor; // ParameterAccessor based on an Parameters instance.\npublic class JpaQueryCreator extends AbstractQueryCreator<jakarta.persistence.criteria.CriteriaQuery<? extends Object>,jakarta.persistence.criteria.Predicate>; // Query creator to create a CriteriaQuery from a PartTree.\n", "des": "Query implementation to execute queries against JPA."}
{"index": 3782, "repo": "lucene-analysis-common-9.7.0", "code": "Package: et\n\nClasses and Interfaces: \nClass EstonianAnalyzer; // Analyzer for Estonian.\n", "des": "Analyzer for Estonian."}
{"index": 822, "repo": "calcite-core-1.34.0", "code": "Package: calcite\n\nSub Packages: \npackage calcite.config; // Configuration.\npackage calcite.interpreter; // Provides an implementation of relational expressions using an interpreter.\npackage calcite.jdbc; // JDBC driver for Calcite.\npackage calcite.materialize; // Management of materialized query results.\npackage calcite.model; // Provides model files, in JSON format, defining schemas and other metadata.\npackage calcite.plan; // Defines interfaces for constructing rule-based optimizers of relational expressions.\npackage calcite.prepare; // Preparation of queries (parsing, planning and implementation).\npackage calcite.profile; // Utilities to analyze data sets.\npackage calcite.rel; // Defines relational expressions.\npackage calcite.rex; // Provides a language for representing row-expressions.\npackage calcite.runtime; // Utilities required at runtime.\npackage calcite.schema; // Schema SPI.\npackage calcite.server; // Provides a server for hosting Calcite connections.\npackage calcite.sql; // Provides a SQL parser and object model.\npackage calcite.sql2rel; // Translates a SQL parse tree to relational expression.\npackage calcite.statistic; // Implementations of statistics providers.\npackage calcite.tools; // Provides utility classes.\npackage calcite.util; // Provides utility classes.\n\nClasses and Interfaces: \nInterface DataContext; // Runtime context allowing access to the tables in a database.\nClass DataContexts; // Utilities for DataContext.\nClass Demo; // Demo.\nEnum DataContext.Variable; // Variable that may be asked for in a call to DataContext.get(java.lang.String).\nAnnotation Type CalciteImmutable; // Annotation to be used to convert interfaces/abstract classes into Immutable POJO using Immutables package.\n", "des": "Main package for Calcite, the dynamic data management platform."}
{"index": 1135, "repo": "hadoop-yarn-api-3.3.6", "code": "Package: impl\n\nClasses and Interfaces: \nClass LightWeightResource; // LightWeightResource extends Resource to handle base resources such as memory and CPU.\n", "des": "Package org.apache.hadoop.yarn.api.records.impl contains classes which define basic resources."}
{"index": 3582, "repo": "lucene-test-framework-9.7.0", "code": "Package: bloom\n\nClasses and Interfaces: \nClass TestBloomFilteredLucenePostings; // A class used for testing BloomFilteringPostingsFormat with a concrete delegate (Lucene41).\n", "des": "Support for generating test indexes using the BloomFilteringPostingsFormat."}
{"index": 742, "repo": "spring-data-solr-4.3.15", "code": "Package: query\n\nClasses and Interfaces: \nInterface SolrEntityInformation<T,ID>;\nInterface SolrEntityInformationCreator;\nInterface SolrParameterAccessor;\nClass AbstractSolrQuery; // Base implementation of a solr specific RepositoryQuery\nClass BindableSolrParameter; // Used to provide additional information on parameters used in query definition.\nClass PartTreeSolrQuery; // Solr specific implementation of a query derived from method name\nClass SolrParameters;\nClass SolrParametersParameterAccessor; // Implementation of SolrParameterAccessor\nClass SolrQueryMethod; // Solr specific implementation of QueryMethod taking care of Query\nClass StringBasedSolrQuery; // Solr specific implementation of RepositoryQuery that can handle string based queries\n", "des": "Apache Solr specific repository query methods and executions."}
{"index": 881, "repo": "mahout-math-0.13.0", "code": "Package: engine\n\nClasses and Interfaces: \nClass MersenneTwister; // MersenneTwister (MT19937) is one of the strongest uniform pseudo-random number generators known so far; at the same time it is quick.\nClass RandomEngine; // Abstract base class for uniform pseudo-random number generating engines.\n", "des": "Engines generating strong uniformly distributed pseudo-random numbers; Needed by all JET probability distributions since they rely on uniform random numbers to generate random numbers from their own distribution."}
{"index": 1995, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: error\n\nClasses and Interfaces: \npublic abstract class AbstractErrorWebExceptionHandler extends Object implements org.springframework.boot.web.reactive.error.ErrorWebExceptionHandler, org.springframework.beans.factory.InitializingBean; // Abstract base class for ErrorWebExceptionHandler implementations.\npublic class DefaultErrorWebExceptionHandler extends AbstractErrorWebExceptionHandler; // Basic global WebExceptionHandler, rendering ErrorAttributes.\n@AutoConfiguration(before=WebFluxAutoConfiguration.class) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnClass(org.springframework.web.reactive.config.WebFluxConfigurer.class) @EnableConfigurationProperties({ServerProperties.class,WebProperties.class}) public class ErrorWebFluxAutoConfiguration extends Object; // Auto-configuration to render errors through a WebFlux WebExceptionHandler.\n", "des": "Auto-configuration for Spring WebFlux error handling."}
{"index": 1560, "repo": "spring-restdocs-core-3.0.0", "code": "Package: config\n\nClasses and Interfaces: \npublic abstract class AbstractConfigurer extends Object; // Abstract configurer that declares methods that are internal to the documentation configuration implementation.\npublic abstract class AbstractNestedConfigurer<PARENT> extends AbstractConfigurer; // Base class for NestedConfigurer implementations.\npublic abstract class OperationPreprocessorsConfigurer<PARENT,TYPE> extends AbstractNestedConfigurer<PARENT>; // A configurer that can be used to configure the default operation preprocessors.\npublic abstract class RestDocumentationConfigurer<S extends AbstractConfigurer,P extends AbstractConfigurer,T> extends Object; // Abstract base class for the configuration of Spring REST Docs.\npublic abstract class SnippetConfigurer<PARENT,TYPE> extends AbstractNestedConfigurer<PARENT>; // A configurer that can be used to configure the generated documentation snippets.\n", "des": "Classes for configuring Spring REST Docs."}
{"index": 3647, "repo": "solr-core-9.3.0", "code": "Package: core\n\nSub Packages: \npackage core.backup; // Core classes for Solr's Backup/Restore functionality\npackage core.snapshots; // Core classes for Solr's persistent snapshots functionality\n\nClasses and Interfaces: \nInterface BlobRepository.Decoder<T>;\nInterface CachingDirectoryFactory.CloseListener;\nInterface CloseHook; // Used to request notification when the core is closed.\nInterface ConfigSetService.ConfigResource;\nInterface CoresLocator; // Manage the discovery and persistence of core definitions across Solr restarts\nInterface Diagnostics.Callable;\nInterface ShutdownAwareDirectory; // CachingDirectoryFactory will call this method rather than Directory.close() on shutdown if a Directory implements this interface.\nInterface SolrCore.RawWriter;\nInterface SolrEventListener;\nInterface SolrInfoBean; // Interface for getting various ui friendly strings for use by objects which are 'pluggable' to make server administration easier.\nClass AbstractSolrEventListener;\nClass BlobRepository; // The purpose of this class is to store the Jars loaded in memory and to keep only one copy of the Jar in a single node.\nClass BlobRepository.BlobContent<T>;\nClass BlobRepository.BlobContentRef<T>;\nClass ByteBuffersDirectoryFactory; // Factory to instantiate ByteBuffersDirectory\nClass CachingDirectoryFactory; // A DirectoryFactory impl base class for caching Directory instances per path.\nClass CachingDirectoryFactory.CacheValue;\nClass CancellableQueryTracker; // Tracks metadata for active queries and provides methods for access\nClass CloudConfig;\nClass CloudConfig.CloudConfigBuilder;\nClass ClusterSingletons; // Helper class to manage the initial registration of ClusterSingleton plugins and to track the changes in loaded plugins in ContainerPluginsRegistry.\nClass CodecFactory; // Factory for plugging in a custom Codec\nClass ConfigOverlay; // This class encapsulates the config overlay json file.\nClass ConfigSet; // Stores a core's configuration in the form of a SolrConfig and IndexSchema.\nClass ConfigSetProperties; // Utility methods for reading configSet properties.\nClass ConfigSetService; // Service class used by the CoreContainer to load ConfigSets for use in SolrCore creation.\nClass CoreContainer;\nClass CoreContainer.CoreLoadFailure;\nClass CoreDescriptor; // Metadata about a SolrCore.\nClass CorePropertiesLocator; // Persists CoreDescriptors as properties files\n", "des": "Core classes implementing Solr internals and the management of SolrCores"}
{"index": 3666, "repo": "solr-core-9.3.0", "code": "Package: container\n\nClasses and Interfaces: \nClass ContainerRequestUtils; // Utility methods for creating and populating a ContainerRequest for use with Jersey ApplicationHandlers\nClass JettyBridgeResponseWriter; // A ResponseWriter which copies that output of JAX-RS computation over to HttpServletResponse object used by the Jetty server.\n", "des": "Adapter code used to convert the native Jetty request/response abstractions into the objects required by Jersey"}
{"index": 3627, "repo": "lucene-misc-9.7.0", "code": "Package: misc\n\nSub Packages: \npackage misc.document; // Misc extensions of the Document/Field API.\npackage misc.index; // Misc index tools and index support.\npackage misc.search; // Misc search implementations.\npackage misc.store; // Misc Directory implementations.\npackage misc.util; // Memory Tracker interface which allows defining custom collector level memory trackers\n\nClasses and Interfaces: \nClass CollectorMemoryTracker; // Default implementation of MemoryTracker that tracks allocations and allows setting a memory limit per collector\nClass GetTermInfo; // Utility to get document frequency and total number of occurrences (sum of the tf for each doc) of a term.\nClass HighFreqTerms; // HighFreqTerms class extracts the top n most frequent terms (by document frequency) from an existing Lucene index and reports their document frequency.\nClass HighFreqTerms.DocFreqComparator; // Compares terms by docTermFreq\nClass HighFreqTerms.TotalTermFreqComparator; // Compares terms by totalTermFreq\nClass IndexMergeTool; // Merges indices specified on the command line into the index specified as the first command line argument.\nClass SweetSpotSimilarity; // A similarity with a lengthNorm that provides for a \"plateau\" of equally good lengths, and tf helper functions.\nClass TermStats; // Holder for a term along with its statistics (TermStats.docFreq and TermStats.totalTermFreq).\n", "des": "Miscellaneous Lucene utilities that don't really fit anywhere else."}
{"index": 3573, "repo": "lucene-sandbox-9.7.0", "code": "Package: idversion\n\nClasses and Interfaces: \nClass IDVersionPostingsFormat; // A PostingsFormat optimized for primary-key (ID) fields that also record a version (long) for each ID, delivered as a payload created by IDVersionPostingsFormat.longToBytes(long, org.apache.lucene.util.BytesRef) during indexing.\nClass IDVersionSegmentTermsEnum; // Iterates through terms in this field; this class is public so users can cast it to call IDVersionSegmentTermsEnum.seekExact(BytesRef, long) for optimistic-concurrency, and also IDVersionSegmentTermsEnum.getVersion() to get the version of the currently seek'd term.\nClass VersionBlockTreeTermsReader; // See VersionBlockTreeTermsWriter.\nClass VersionBlockTreeTermsWriter; // This is just like Lucene90BlockTreeTermsWriter, except it also stores a version per term, and adds a method to its TermsEnum implementation to seekExact only if the version is >= the specified version.\n", "des": "A primary-key postings format that associates a version (long) with each term and can provide fail-fast lookups by ID and version."}
{"index": 3070, "repo": "spring-ws-core-4.0.5", "code": "Package: mapping\n\nSub Packages: \npackage mapping.jaxb; // Provides JAXB2-based EndpointMapping implementations.\n\nClasses and Interfaces: \npublic abstract class AbstractAnnotationMethodEndpointMapping<T> extends AbstractMethodEndpointMapping<T>; // Abstract base for EndpointMapping implementations that map classes tagged with an annotation.\npublic abstract class AbstractEndpointMapping extends org.springframework.context.support.ApplicationObjectSupport implements EndpointMapping, org.springframework.core.Ordered; // Abstract base class for EndpointMapping implementations.\npublic abstract class AbstractMapBasedEndpointMapping extends AbstractEndpointMapping; // Abstract base class for endpoint mapping that are based on a Map.\npublic abstract class AbstractMethodEndpointMapping<T> extends AbstractEndpointMapping; // Abstract base class for MethodEndpoint mappings.\npublic abstract class AbstractQNameEndpointMapping extends AbstractMapBasedEndpointMapping; // Abstract base class for EndpointMappings that resolve qualified names as registration keys.\npublic class PayloadRootAnnotationMethodEndpointMapping extends AbstractAnnotationMethodEndpointMapping<QName>; // Implementation of the EndpointMapping interface that uses the PayloadRoot annotation to map methods to request payload root elements.\npublic class PayloadRootQNameEndpointMapping extends AbstractQNameEndpointMapping; // Implementation of the EndpointMapping interface to map from the qualified name of the request payload root element.\npublic class SimpleMethodEndpointMapping extends AbstractMethodEndpointMapping<String> implements org.springframework.beans.factory.InitializingBean; // Simple subclass of AbstractMethodEndpointMapping that maps from the local name of the request payload to methods.\npublic class UriEndpointMapping extends AbstractMapBasedEndpointMapping; // Implementation of the EndpointMapping interface to map from the full request URI or request URI path to endpoint beans.\npublic class XPathPayloadEndpointMapping extends AbstractMapBasedEndpointMapping implements org.springframework.beans.factory.InitializingBean; // Implementation of the EndpointMapping interface that maps to endpoint using an XPath expression.\n", "des": "Provides miscellaneous endpoints EndpointMapping implementations."}
{"index": 1701, "repo": "drill-common-1.21.1", "code": "Package: config\n\nClasses and Interfaces: \npublic interface ConfigConstants;\npublic interface ConfigFileInfo; // Interface that defines implementation to get all the config files names for default, module specific, distribution specific and override files.\npublic interface ConfigProvider;\npublic class DrillConfig extends Object;\npublic class DrillExecConfigFileInfo extends Object implements ConfigFileInfo;\npublic final class DrillProperties extends Properties;\npublic class DrillRMConfigFileInfo extends Object implements ConfigFileInfo;\n", "des": "Internal configuration state definitions."}
{"index": 2908, "repo": "spring-xml-4.0.5", "code": "Package: xml\n\nSub Packages: \npackage xml.dom; // Provides classes that help with DOM: the Document Object Model.\npackage xml.namespace; // Provides classes that help with XML Namespace processing.\npackage xml.sax; // Provides classes that help with SAX: the Simple API for XML.\npackage xml.transform; // Provides classes that help with XML transformations.\npackage xml.validation; // Provides classes for XML validation in JAXP 1.0 and JAXP 1.3.\npackage xml.xpath; // Provides XPathTemplate implementations, and various classes for XPath evaluation using JAXP 1.3, and Jaxen.\npackage xml.xsd; // Provides an abstraction over XSD XML schemas.\n\nClasses and Interfaces: \npublic class DocumentBuilderFactoryUtils extends Object;\npublic abstract class JaxpVersion extends Object; // Helper class used to find the current version of JAXP.\npublic abstract class XmlException extends org.springframework.core.NestedRuntimeException; // Root of the hierarchy of XML exception.\npublic class XMLInputFactoryUtils extends Object;\n", "des": "Provides classes for XML handling: version detection and a base XML exception class."}
{"index": 795, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: no\n\nClasses and Interfaces: \nClass NorwegianAnalyzer; // Analyzer for Norwegian.\nClass NorwegianLightStemFilter; // A TokenFilter that applies NorwegianLightStemmer to stem Norwegian words.\nClass NorwegianLightStemFilterFactory; // Factory for NorwegianLightStemFilter.\nClass NorwegianLightStemmer; // Light Stemmer for Norwegian.\nClass NorwegianMinimalStemFilter; // A TokenFilter that applies NorwegianMinimalStemmer to stem Norwegian words.\nClass NorwegianMinimalStemFilterFactory; // Factory for NorwegianMinimalStemFilter.\nClass NorwegianMinimalStemmer; // Minimal Stemmer for Norwegian Bokmål (no-nb) and Nynorsk (no-nn)\n", "des": "Analyzer for Norwegian."}
{"index": 25, "repo": "commons-collections4-4.4", "code": "Package: multiset\n\nClasses and Interfaces: \nClass AbstractMapMultiSet<E>; // Abstract implementation of the MultiSet interface to simplify the creation of subclass implementations.\nClass AbstractMapMultiSet.EntrySetIterator<E>; // Inner class EntrySetIterator.\nClass AbstractMapMultiSet.MultiSetEntry<E>; // Inner class MultiSetEntry.\nClass AbstractMapMultiSet.MutableInteger; // Mutable integer class for storing the data.\nClass AbstractMapMultiSet.UniqueSetIterator<E>; // Inner class UniqueSetIterator.\nClass AbstractMultiSet<E>; // Abstract implementation of the MultiSet interface to simplify the creation of subclass implementations.\nClass AbstractMultiSet.AbstractEntry<E>; // Inner class AbstractEntry.\nClass AbstractMultiSet.EntrySet<E>; // Inner class EntrySet.\nClass AbstractMultiSet.UniqueSet<E>; // Inner class UniqueSet.\nClass AbstractMultiSetDecorator<E>; // Decorates another MultSet to provide additional behaviour.\nClass HashMultiSet<E>; // Implements MultiSet, using a HashMap to provide the data storage.\nClass PredicatedMultiSet<E>; // Decorates another MultiSet to validate that additions match a specified predicate.\nClass SynchronizedMultiSet<E>; // Decorates another MultiSet to synchronize its behaviour for a multi-threaded environment.\nClass UnmodifiableMultiSet<E>; // Decorates another MultiSet to ensure it can't be altered.\n", "des": "This package contains implementations of the MultiSet interface."}
{"index": 960, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: support\n\nClasses and Interfaces: \nClass NamespaceUtils; // Helper class for handling @Namespace annotations.\nClass PayloadRootUtils; // Helper class for determining the root qualified name of a Web Service payload.\n", "des": "Provides helper classes for EndpointAdapter, EndpointInteceptor, and EndpointMapping implementations."}
{"index": 3607, "repo": "lucene-queries-9.7.0", "code": "Package: payloads\n\nClasses and Interfaces: \nInterface PayloadDecoder; // Defines a way of converting payloads to float values, for use by PayloadScoreQuery\nInterface PayloadMatcher; // Defines an interface for testing if two payloads should be consider to match\nClass AveragePayloadFunction; // Calculate the final score as the average score of all payloads seen.\nClass MaxPayloadFunction; // Returns the maximum payload score seen, else 1 if there are no payloads on the doc.\nClass MinPayloadFunction; // Calculates the minimum payload seen\nClass PayloadFunction; // An abstract class that defines a way for PayloadScoreQuery instances to transform the cumulative effects of payload scores for a document.\nClass PayloadMatcherFactory; // Creates a payload matcher object based on a payload type and an operation.\nClass PayloadScoreQuery; // A Query class that uses a PayloadFunction to modify the score of a wrapped SpanQuery\nClass SpanPayloadCheckQuery; // Only return those matches that have a specific payload at the given position.\nClass SumPayloadFunction; // Calculate the final score as the sum of scores of all payloads seen.\nEnum SpanPayloadCheckQuery.MatchOperation; // The payload type.\nEnum SpanPayloadCheckQuery.PayloadType; // The payload type.\n", "des": "The payloads package provides Query mechanisms for finding and using payloads."}
{"index": 2603, "repo": "wicket-util-10.0.0-M1", "code": "Package: converter\n\nClasses and Interfaces: \npublic abstract class AbstractConverter<C> extends Object implements IConverter<C>; // Base class for locale aware type converters.\npublic abstract class AbstractDateConverter<D extends Date> extends AbstractConverter<D>; // A base class for all Date related converters\npublic abstract class AbstractDecimalConverter<N extends Number> extends AbstractNumberConverter<N>; // Base class for all converters of decimal numbers.\npublic abstract class AbstractIntegerConverter<I extends Number> extends AbstractNumberConverter<I>; // Base class for all converters of integer numbers.\npublic abstract class AbstractJavaTimeConverter<T extends Temporal> extends AbstractConverter<T>; // A base class for all java.time.** related converters\npublic abstract class AbstractNumberConverter<N extends Number> extends AbstractConverter<N>; // Base class for all number converters.\npublic class BigDecimalConverter extends AbstractDecimalConverter<BigDecimal>; // BigDecimal converter\npublic class BigIntegerConverter extends AbstractIntegerConverter<BigInteger>; // BigInteger converter see IConverter\npublic class BooleanConverter extends AbstractConverter<Boolean>; // Converts from Object to Boolean.\npublic class ByteConverter extends AbstractIntegerConverter<Byte>; // Converts from Object to Byte.\npublic class CalendarConverter extends Object implements IConverter<Calendar>; // Converts to Calendar.\npublic class CharacterConverter extends AbstractConverter<Character>; // Converts from Object to Character.\npublic class DateConverter extends AbstractDateConverter<Date>; // Converts from Object to Date.\npublic class DoubleConverter extends AbstractDecimalConverter<Double>; // Converts from Object to Double.\npublic class FloatConverter extends AbstractDecimalConverter<Float>; // Converts from Object to Float.\npublic class IntegerConverter extends AbstractIntegerConverter<Integer>; // Converts from Object to Integer.\npublic class LocalDateConverter extends AbstractJavaTimeConverter<LocalDate>; // Converts from Object to LocalDate.\npublic class LocalDateTimeConverter extends AbstractJavaTimeConverter<LocalDateTime>; // Converts from Object to LocalDateTime.\npublic class LocalTimeConverter extends AbstractJavaTimeConverter<LocalTime>; // Converts from Object to LocalTime.\npublic class LongConverter extends AbstractIntegerConverter<Long>; // Converts from Object to Long.\npublic class ShortConverter extends AbstractIntegerConverter<Short>; // Converts from Object to Short.\npublic class SqlDateConverter extends AbstractDateConverter<Date>; // Converts to Date.\n", "des": "Default converter implementations."}
{"index": 3211, "repo": "commons-configuration2-2.9.0", "code": "Package: configuration2\n\nSub Packages: \npackage configuration2.beanutils; // In this package a Configuration implementation can be found that implements the DynaBean interface.\npackage configuration2.builder; // This package contains the implementations of configuration builder classes used to create new Configuration objects.\npackage configuration2.convert; // This package contains interfaces and classes related to data type conversions.\npackage configuration2.event; // This package contains interfaces and classes for receiving notifications about changes at configurations.\npackage configuration2.ex; // This package contains all exception classes used by this library.\npackage configuration2.interpol; // A package with helper classes used for interpolation (variable substitution).\npackage configuration2.io; // A package with classes related to I/O operations.\npackage configuration2.plist; // Configuration classes supporting NeXT / OpenStep /GNUStep style configuration.\npackage configuration2.reloading; // This package contains classes and interfaces related to the reloading mechanism.\npackage configuration2.resolver; // A package containing EntityResolvers.\npackage configuration2.spring; // A package containing integrations for the Spring Framework.\npackage configuration2.sync; // A package containing interfaces and classes related to synchronization of configurations.\npackage configuration2.tree; // A package with helper and utility classes used by hierarchical configurations.\npackage configuration2.web; // This package contains some implementations of the Configuration interface that are useful in web environments.\n\nClasses and Interfaces: \nInterface Configuration; // The main Configuration interface.\nInterface ConfigurationComparator; // Comparator for configurations interface.\nInterface ConfigurationConsumer<T>; // A Configuration task that may throw a ConfigurationException.\nInterface ConfigurationDecoder; // An interface for decoding encoded values from a configuration source.\nInterface FileBasedConfiguration; // An interface which combines the FileBased and Configuration interfaces.\nInterface HierarchicalConfiguration<T>; // An interface for mutable hierarchical configurations.\nInterface ImmutableConfiguration; // The main interface for accessing configuration data in a read-only fashion.\nInterface ImmutableHierarchicalConfiguration; // An interface for immutable hierarchical configurations.\nInterface Initializable; // Definition of an interface to be implemented by Configuration implementations which support a special initialization method.\nInterface PropertiesConfiguration.IOFactory; // Definition of an interface that allows customization of read and write operations.\nClass AbstractConfiguration; // Abstract configuration class.\n", "des": "The Configuration main package."}
{"index": 3201, "repo": "tomcat-api-10.1", "code": "Package: servlet\n\nClasses and Interfaces: \nClass ServletRequestContext; // Provides access to the request information needed for a request made to an HTTP servlet.\n", "des": "An implementation of FileUpload for use in servlets conforming to JSR 53."}
{"index": 1025, "repo": "hadoop-aws-3.3.6", "code": "Package: impl\n\nClasses and Interfaces: \nInterface NoopSpan.SpanActivationCallbacks; // Activation callbacks.\nClass AbstractAuditSpanImpl; // Base class for the audit spans implementations..\nClass AbstractOperationAuditor; // This is a long-lived service which is created in S3A FS initialize (make it fast!) which provides context for tracking operations made to S3.\nClass ActiveAuditManagerS3A; // Thread management for the active audit.\nClass LoggingAuditor; // The LoggingAuditor logs operations at DEBUG (in SDK Request) and in span lifecycle and S3 request class construction at TRACE.\nClass NoopAuditManagerS3A; // Simple No-op audit manager for use before a real audit chain is set up, and for testing.\nClass NoopAuditor; // An audit service which returns the NoopSpan.\nClass NoopSpan; // A minimal span with no direct side effects.\nClass S3AInternalAuditConstants; // Internal constants; not intended for public use, or for use by any external implementations.\n", "des": "The internal implementations of auditing support."}
{"index": 1048, "repo": "commons-io-2.13.0", "code": "Package: filefilter\n\nClasses and Interfaces: \nInterface ConditionalFileFilter; // Defines operations for conditional file filters.\nInterface IOFileFilter; // An interface which brings the FileFilter, FilenameFilter, and PathFilter interfaces together.\nClass AbstractFileFilter; // Abstracts the implementation of the FileFilter (IO), FilenameFilter (IO), PathFilter (NIO) interfaces via our own IOFileFilter interface.\nClass AgeFileFilter; // Filters files based on a cutoff time, can filter either newer files or files equal to or older.\nClass AndFileFilter; // A FileFilter providing conditional AND logic across a list of file filters.\nClass CanExecuteFileFilter; // This filter accepts Files that can be executed.\nClass CanReadFileFilter; // This filter accepts Files that can be read.\nClass CanWriteFileFilter; // This filter accepts Files that can be written to.\nClass DelegateFileFilter; // This class turns a Java FileFilter or FilenameFilter into an IO FileFilter.\nClass DirectoryFileFilter; // This filter accepts Files that are directories.\nClass EmptyFileFilter; // This filter accepts files or directories that are empty.\nClass FalseFileFilter; // A file filter that always returns false.\nClass FileEqualsFileFilter; // Accepts only an exact File object match.\nClass FileFileFilter; // This filter accepts Files that are files (not directories).\nClass FileFilterUtils; // Useful utilities for working with file filters.\nClass HiddenFileFilter; // This filter accepts Files that are hidden.\nClass MagicNumberFileFilter; // File filter for matching files containing a \"magic number\".\nClass NameFileFilter; // Filters file names for a certain name.\nClass NotFileFilter; // This filter produces a logical NOT of the filters specified.\nClass OrFileFilter; // A FileFilter providing conditional OR logic across a list of file filters.\nClass PathEqualsFileFilter; // Accepts only an exact Path object match.\nClass PathVisitorFileFilter; // A file filter backed by a path visitor.\nClass PrefixFileFilter; // Filters file names for a certain prefix.\nClass RegexFileFilter; // Filters files using supplied regular expression(s).\nClass SizeFileFilter; // Filters files based on size, can filter either smaller files or files equal to or larger than a given threshold.\nClass SuffixFileFilter; // Filters files based on the suffix (what the file name ends with).\nClass SymbolicLinkFileFilter; // This filter accepts Files that are symbolic links.\n", "des": "Provides the an interface IOFileFilter that combines both FileFilter and FilenameFilter."}
{"index": 875, "repo": "calcite-core-1.34.0", "code": "Package: javac\n\nClasses and Interfaces: \nInterface JavaCompiler; // The interface JavaCompiler represents an interface to invoke a regular Java compiler.\nClass JaninoCompiler; // JaninoCompiler implements the JavaCompiler interface by calling Janino.\nClass JaninoCompiler.JaninoCompilerArgs; // Arguments to an invocation of the Janino compiler.\nClass JavaCompilerArgs; // A JavaCompilerArgs holds the arguments for a JavaCompiler.\n", "des": "Provides compilers for Java code."}
{"index": 836, "repo": "calcite-core-1.34.0", "code": "Package: volcano\n\nClasses and Interfaces: \nInterface AbstractConverter.ExpandConversionRule.Config; // Rule configuration.\nClass AbstractConverter; // Converts a relational expression to any given output convention.\nClass AbstractConverter.ExpandConversionRule; // Rule that converts an AbstractConverter into a chain of converters from the source relation to the target traits.\nClass RelSubset; // Subset of an equivalence class where all relational expressions have the same physical properties.\nClass RuleQueue; // A data structure that manages rule matches for RuleDriver.\nClass VolcanoPlanner; // VolcanoPlanner optimizes queries by transforming expressions selectively according to a dynamic programming algorithm.\nClass VolcanoRelMetadataProvider;\nClass VolcanoRuleCall; // VolcanoRuleCall implements the RelOptRuleCall interface for VolcanoPlanner.\nClass VolcanoTimeoutException; // Indicates that planning timed out.\n", "des": "Optimizes relational expressions."}
{"index": 673, "repo": "commons-lang3-3.12.0", "code": "Package: reflect\n\nClasses and Interfaces: \nInterface Typed<T>; // Generalization of \"has a type.\"\nClass ConstructorUtils; // Utility reflection methods focused on constructors, modeled after MethodUtils.\nClass FieldUtils; // Utilities for working with Fields by reflection.\nClass InheritanceUtils; // Utility methods focusing on inheritance.\nClass MethodUtils; // Utility reflection methods focused on Methods, originally from Commons BeanUtils.\nClass TypeLiteral<T>; // Type literal comparable to javax.enterprise.util.TypeLiteral, made generally available outside the JEE context.\nClass TypeUtils; // Utility methods focusing on type inspection, particularly with regard to generics.\nClass TypeUtils.WildcardTypeBuilder; // WildcardType builder.\n", "des": "Accumulates common high-level uses of the java.lang.reflect APIs."}
{"index": 3458, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface Callback; // Represents a JPA event callback (the method).\nInterface CallbackBuilder;\nInterface CallbackBuilder.CallbackRegistrar;\nInterface CallbackDefinition;\nInterface CallbackRegistrar;\nInterface CallbackRegistry; // Registry of Callbacks by entity and type\nInterface CallbackRegistryConsumer; // Contract for injecting the registry of Callbacks into event listeners.\nEnum CallbackType;\n", "des": "The SPI contracts for supporting JPA lifecycle callbacks."}
{"index": 2447, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: logging\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.logging.LogFileWebEndpoint.class) @EnableConfigurationProperties(LogFileWebEndpointProperties.class) public class LogFileWebEndpointAutoConfiguration extends Object; // Auto-configuration for LogFileWebEndpoint.\n@ConfigurationProperties(prefix=\"management.endpoint.logfile\") public class LogFileWebEndpointProperties extends Object; // Configuration properties for LogFileWebEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.logging.LoggersEndpoint.class) public class LoggersEndpointAutoConfiguration extends Object; // Auto-configuration for the LoggersEndpoint.\n", "des": "Auto-configuration for actuator logging concerns."}
{"index": 2224, "repo": "spring-data-commons-3.1.2", "code": "Package: reactive\n\nClasses and Interfaces: \n@NoRepositoryBean public interface ReactiveCrudRepository<T,ID> extends Repository<T,ID>; // Interface for generic CRUD operations on a repository for a specific type.\n@NoRepositoryBean public interface ReactiveSortingRepository<T,ID> extends Repository<T,ID>; // Repository fragment to provide methods to retrieve entities using the sorting abstraction.\n@NoRepositoryBean public interface RxJava3CrudRepository<T,ID> extends Repository<T,ID>; // Interface for generic CRUD operations on a repository for a specific type.\n@NoRepositoryBean public interface RxJava3SortingRepository<T,ID> extends Repository<T,ID>; // Repository fragment to provide methods to retrieve entities using the sorting abstraction.\n", "des": "Support for reactive repositories."}
{"index": 1835, "repo": "spring-test-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Inherited @Rollback(false) public @interface Commit; // @Commit is a test annotation that is used to indicate that a test-managed transaction should be committed after the test method has completed.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Inherited public @interface DirtiesContext; // Test annotation which indicates that the ApplicationContext associated with a test is dirty and should therefore be closed and removed from the context cache.\npublic static enum DirtiesContext.ClassMode extends Enum<DirtiesContext.ClassMode>; // Defines modes which determine how @DirtiesContext is interpreted when used to annotate a test class.\npublic static enum DirtiesContext.HierarchyMode extends Enum<DirtiesContext.HierarchyMode>; // Defines modes which determine how the context cache is cleared when @DirtiesContext is used in a test whose context is configured as part of a hierarchy via @ContextHierarchy.\npublic static enum DirtiesContext.MethodMode extends Enum<DirtiesContext.MethodMode>; // Defines modes which determine how @DirtiesContext is interpreted when used to annotate a test method.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Inherited public @interface IfProfileValue; // Test annotation for use with JUnit 4 to indicate whether a test is enabled or disabled for a specific testing profile.\npublic interface ProfileValueSource; // Strategy interface for retrieving profile values for a given testing environment.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface ProfileValueSourceConfiguration; // ProfileValueSourceConfiguration is a class-level annotation for use with JUnit 4 which is used to specify what type of ProfileValueSource to use when retrieving profile values configured via @IfProfileValue.\npublic abstract class ProfileValueUtils extends Object; // General utility methods for working with profile values.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface Repeat; // Test annotation for use with JUnit 4 to indicate that a test method should be invoked repeatedly.\n", "des": "Support classes for annotation-driven tests."}
{"index": 540, "repo": "commons-geometry-core-1.0", "code": "Package: internal\n\nClasses and Interfaces: \nInterface DoubleFunction1N<T>; // Represents a function that accepts a single double value and returns a result.\nInterface DoubleFunction2N<T>; // Represents a function that accepts two double values and returns a result.\nInterface DoubleFunction3N<T>; // Represents a function that accepts three double values and returns a result.\nClass HyperplaneSubsets; // Utility methods for HyperplaneSubset implementations.\nClass IteratorTransform<I,T>; // Class that wraps another iterator, converting each input iterator value into one or more output iterator values.\nClass SimpleTupleFormat; // Class for performing simple formatting and parsing of real number tuples.\nClass GeometryInternalError; // Exception thrown when something that should not happen does happen.\n", "des": "This package contains utilities intended for internal use only."}
{"index": 1243, "repo": "spring-hateoas-2.1.2", "code": "Package: reactive\n\nClasses and Interfaces: \npublic interface ReactiveRepresentationModelAssembler<T,D extends RepresentationModel<?>>; // Reactive variant of RepresentationModelAssembler combined with SimpleRepresentationModelAssembler.\npublic interface SimpleReactiveRepresentationModelAssembler<T> extends ReactiveRepresentationModelAssembler<T,EntityModel<T>>; // Reactive variant of RepresentationModelAssembler combined with SimpleRepresentationModelAssembler.\npublic class WebFluxLinkBuilder extends TemplateVariableAwareLinkBuilderSupport<WebFluxLinkBuilder>; // Utility for building reactive Links.\npublic static class WebFluxLinkBuilder.WebFluxBuilder extends Object;\npublic static class WebFluxLinkBuilder.WebFluxLink extends Object; // Intermediate representation of a Link within a reactive pipeline to easily add Affordances from method invocations.\n", "des": "Spring WebFlux components to build Links and assemble RepresentationModel types."}
{"index": 3459, "repo": "hibernate-core-5.6.15.Final", "code": "Package: plan\n\nClasses and Interfaces: \nClass AbstractBatchingEntityLoaderBuilder; // Base class for LoadPlan-based BatchingEntityLoaderBuilder implementations.\nClass AbstractLoadPlanBasedEntityLoader; // A UniqueEntityLoader implementation based on using LoadPlans\nClass BatchingEntityLoader; // The base contract for UniqueEntityLoader implementations capable of performing batch-fetch loading of entities using multiple primary key values in the SQL WHERE clause.\nClass DynamicBatchingEntityLoader; // Batching entity loader using dynamic where-clause\nClass DynamicBatchingEntityLoaderBuilder; // A walking/plan based BatchingEntityLoaderBuilder that builds entity-loader instances capable of dynamically building its batch-fetch SQL based on the actual number of entity ids waiting to be batch fetched.\nClass EntityLoader; // UniqueEntityLoader implementation that is the main functionality for LoadPlan-based Entity loading.\nClass EntityLoader.Builder;\nClass LegacyBatchingEntityLoaderBuilder; // LoadPlan-based implementation of the legacy batch loading strategy\nClass LegacyBatchingEntityLoaderBuilder.LegacyBatchingEntityLoader;\nClass MultiEntityLoadingSupport;\nClass PaddedBatchingEntityLoader; // Batching entity loader using padded where-clause\nClass PaddedBatchingEntityLoaderBuilder; // A walking/plan based BatchingEntityLoaderBuilder that builds entity-loader instances building its batch-fetch SQL based on padding - using a set number of parameters, but setting \"unneeded ones\" to null.\n", "des": "Support for entity loaders built on top of the org.hibernate.loader.plan API to apply entity-graphs"}
{"index": 902, "repo": "commons-jcs3-core-3.1", "code": "Package: soft\n\nClasses and Interfaces: \nClass SoftReferenceMemoryCache<K,V>; // A JCS IMemoryCache that has SoftReference to all its values.\n", "des": "A memory plugin implemented using soft references."}
{"index": 1444, "repo": "spring-data-redis-3.1.2", "code": "Package: connection\n\nSub Packages: \npackage connection.convert; // Redis specific converters used for sending data and parsing responses.\npackage connection.jedis; // Connection package for Jedis library.\npackage connection.lettuce; // Connection package for Lettuce Redis client.\npackage connection.stream; // Data structures and interfaces to interact with Redis Streams.\npackage connection.util; // Internal utility package for encoding/decoding Strings to byte[] (using Base64) library.\n\nClasses and Interfaces: \npublic abstract class AbstractRedisConnection extends Object implements RedisConnection;\npublic class BitFieldSubCommands extends Object implements Iterable<BitFieldSubCommands.BitFieldSubCommand>; // The actual BITFIELD command representation holding several BitFieldSubCommands.BitFieldSubCommands to execute.\npublic abstract static class BitFieldSubCommands.AbstractBitFieldSubCommand extends Object implements BitFieldSubCommands.BitFieldSubCommand;\npublic static class BitFieldSubCommands.BitFieldGet extends BitFieldSubCommands.AbstractBitFieldSubCommand; // The GET sub command used with BitFieldSubCommands.\npublic static class BitFieldSubCommands.BitFieldGetBuilder extends Object;\npublic static class BitFieldSubCommands.BitFieldIncrBy extends BitFieldSubCommands.AbstractBitFieldSubCommand; // The INCRBY sub command used with BitFieldSubCommands.\npublic static enum BitFieldSubCommands.BitFieldIncrBy.Overflow extends Enum<BitFieldSubCommands.BitFieldIncrBy.Overflow>;\npublic static class BitFieldSubCommands.BitFieldSet extends BitFieldSubCommands.AbstractBitFieldSubCommand; // The SET sub command used with BitFieldSubCommands.\npublic static class BitFieldSubCommands.BitFieldSetBuilder extends Object;\npublic static interface BitFieldSubCommands.BitFieldSubCommand; // Sub command to be used as part of BitFieldSubCommands.\npublic static class BitFieldSubCommands.BitFieldType extends Object; // The actual Redis bitfield type representation for signed and unsigned integers used with BitFieldSubCommands.BitFieldSubCommand.\npublic static class BitFieldSubCommands.Offset extends Object; // Offset used inside a BitFieldSubCommands.BitFieldSubCommand.\npublic class ClusterCommandExecutionFailureException extends UncategorizedDataAccessException; // Exception thrown when at least one call to a clustered redis environment fails.\n", "des": "Connection package providing low-level abstractions for interacting with the various Redis 'drivers'/libraries."}
{"index": 3322, "repo": "opencms-core-15.0", "code": "Package: apps\n\nSub Packages: \npackage apps.cacheadmin; // Contains classes of the cache admin app.\npackage apps.dbmanager; // Contains classes of the cache admin app.\npackage apps.filehistory; // Contains classes of the file history app.\npackage apps.git; // This package contains the app classes for the git check in functionality.\npackage apps.linkvalidation; // Contains classes of the link validation app.\npackage apps.lists; // This package contains the app classes for the list configurations manager.\npackage apps.logfile; // Contains classes of the site manager app.\npackage apps.modules; // Contains classes of the module manager app.\npackage apps.projects; // The project manager app classes.\npackage apps.publishqueue; // Contains classes of the publish queue app.\npackage apps.scheduler; // The scheduled jobs manager app classes.\npackage apps.search; // Contains classes of the source search app.\npackage apps.searchindex; // Contains classes of the searchindex app.\npackage apps.sessions; // Contains classes of the site manager app.\npackage apps.sitemanager; // Contains classes of the site manager app.\npackage apps.user; // Contains classes of the user manager app.\n\nClasses and Interfaces: \nInterface I_CmsAppButtonProvider; // Generates app launcher buttons.\nInterface I_CmsAppCategory; // App category interface.\nInterface I_CmsAppSettings; // Used to write app settings to the user.\nInterface I_CmsAppUIContext; // The app ui context.\nInterface I_CmsCachableApp; // Apps implementing this interface will be stored in the user session so returning to the app will be quicker and use less resources.\nInterface I_CmsContextProvider; // Provides the dialog context to context menus and other context sensitive dialogs.\nInterface I_CmsCRUDApp<T>; // Interface for apps which perform CRUD operations on any kind of element like CmsSites or CmsScheduledJobs.\nInterface I_CmsFolderAppCategory; // Displays a sub menu in the app launch pad.\nInterface I_CmsHasAppLaunchCommand; // Implement this interface for apps that require special app launch actions.\nInterface I_CmsHasOrder; // Sortable configuration item interface.\nInterface I_CmsHasShortcutActions; // To provide shortcut actions an app may implement this intreface.\n", "des": "Contains code for workplace apps."}
{"index": 2656, "repo": "spring-data-cassandra-4.1.2", "code": "Package: util\n\nClasses and Interfaces: \n@Deprecated public class CassandraFutureAdapter<T> extends Object implements ListenableFuture<T>;\npublic class StatementBuilder<S extends com.datastax.oss.driver.api.querybuilder.BuildableQuery> extends Object; // Functional builder for Cassandra statements.\n@FunctionalInterface public static interface StatementBuilder.BindFunction<S>; // Binding function.\npublic static enum StatementBuilder.ParameterHandling extends Enum<StatementBuilder.ParameterHandling>; // Enumeration to represent how parameters are rendered.\n@FunctionalInterface public interface TermFactory; // Factory for Term objects encapsulating a binding value.\n", "des": "Utility classes for basic CQL interaction."}
{"index": 811, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: te\n\nClasses and Interfaces: \nClass TeluguAnalyzer; // Analyzer for Telugu.\nClass TeluguNormalizationFilter; // A TokenFilter that applies TeluguNormalizer to normalize the orthography.\nClass TeluguNormalizationFilterFactory; // Factory for TeluguNormalizationFilter.\nClass TeluguNormalizer; // Normalizer for Telugu.\nClass TeluguStemFilter; // A TokenFilter that applies TeluguStemmer to stem Telugu words.\nClass TeluguStemFilterFactory; // Factory for TeluguStemFilter.\nClass TeluguStemmer; // Stemmer for Telugu.\n", "des": "Analyzer for Telugu Language."}
{"index": 857, "repo": "calcite-core-1.34.0", "code": "Package: server\n\nClasses and Interfaces: \nInterface CalciteServer; // Server.\nInterface CalciteServerStatement; // Statement within a Calcite server.\nInterface DdlExecutor; // Executes DDL commands.\nClass DdlExecutorImpl; // Abstract implementation of DdlExecutor.\n", "des": "Provides a server for hosting Calcite connections."}
{"index": 1543, "repo": "spring-context-6.0.11", "code": "Package: config\n\nClasses and Interfaces: \npublic class AnnotationDrivenBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Parser for the 'annotation-driven' element of the 'task' namespace.\npublic class ContextLifecycleScheduledTaskRegistrar extends ScheduledTaskRegistrar implements org.springframework.beans.factory.SmartInitializingSingleton; // ScheduledTaskRegistrar subclass which redirects the actual scheduling of tasks to the ContextLifecycleScheduledTaskRegistrar.afterSingletonsInstantiated() callback (as of 4.1.2).\npublic class CronTask extends TriggerTask; // TriggerTask implementation defining a Runnable to be executed according to a standard cron expression.\npublic class ExecutorBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the 'executor' element of the 'task' namespace.\npublic class FixedDelayTask extends IntervalTask; // Specialization of IntervalTask for fixed-delay semantics.\npublic class FixedRateTask extends IntervalTask; // Specialization of IntervalTask for fixed-rate semantics.\npublic class IntervalTask extends Task; // Task implementation defining a Runnable to be executed at a given millisecond interval which may be treated as fixed-rate or fixed-delay depending on context.\npublic final class ScheduledTask extends Object; // A representation of a scheduled task at runtime, used as a return value for scheduling methods.\npublic interface ScheduledTaskHolder; // Common interface for exposing locally scheduled tasks.\npublic class ScheduledTaskRegistrar extends Object implements ScheduledTaskHolder, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Helper bean for registering tasks with a TaskScheduler, typically using cron expressions.\npublic class ScheduledTasksBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the 'scheduled-tasks' element of the scheduling namespace.\npublic class SchedulerBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the 'scheduler' element of the 'task' namespace.\npublic class Task extends Object; // Holder class defining a Runnable to be executed as a task, typically at a scheduled time or interval.\n", "des": "Support package for declarative scheduling configuration, with XML schema being the primary configuration format."}
{"index": 1724, "repo": "spring-jdbc-6.0.11", "code": "Package: core\n\nSub Packages: \npackage core.metadata; // Context metadata abstraction for the configuration and execution of table inserts and stored procedure calls.\npackage core.namedparam; // JdbcTemplate variant with named parameter support.\npackage core.simple; // Simplification layer for table inserts and stored procedure calls.\npackage core.support; // Classes supporting the org.springframework.jdbc.core package.\n\nClasses and Interfaces: \npublic class ArgumentPreparedStatementSetter extends Object implements PreparedStatementSetter, ParameterDisposer; // Simple adapter for PreparedStatementSetter that applies a given array of arguments.\npublic class ArgumentTypePreparedStatementSetter extends Object implements PreparedStatementSetter, ParameterDisposer; // Simple adapter for PreparedStatementSetter that applies given arrays of arguments and JDBC argument types.\npublic interface BatchPreparedStatementSetter; // Batch update callback interface used by the JdbcTemplate class.\npublic class BeanPropertyRowMapper<T> extends Object implements RowMapper<T>; // RowMapper implementation that converts a row into a new instance of the specified mapped target class.\n@FunctionalInterface public interface CallableStatementCallback<T>; // Generic callback interface for code that operates on a CallableStatement.\n@FunctionalInterface public interface CallableStatementCreator; // One of the three central callback interfaces used by the JdbcTemplate class.\npublic class CallableStatementCreatorFactory extends Object; // Helper class that efficiently creates multiple CallableStatementCreator objects with different parameters based on an SQL statement and a single set of parameter declarations.\npublic class ColumnMapRowMapper extends Object implements RowMapper<Map<String,Object>>; // RowMapper implementation that creates a java.util.Map for each row, representing all columns as key-value pairs: one entry for each column, with the column name as key.\n@FunctionalInterface public interface ConnectionCallback<T>; // Generic callback interface for code that operates on a JDBC Connection.\npublic class DataClassRowMapper<T> extends BeanPropertyRowMapper<T>; // RowMapper implementation that converts a row into a new instance of the specified mapped target class.\npublic interface DisposableSqlTypeValue extends SqlTypeValue; // Subinterface of SqlTypeValue that adds a cleanup callback, to be invoked after the value has been set and the corresponding statement has been executed.\npublic interface InterruptibleBatchPreparedStatementSetter extends BatchPreparedStatementSetter; // Extension of the BatchPreparedStatementSetter interface, adding a batch exhaustion check.\n", "des": "Provides the core JDBC framework, based on JdbcTemplate and its associated callback interfaces and helper objects."}
{"index": 2763, "repo": "spring-beans-6.0.11", "code": "Package: xml\n\nClasses and Interfaces: \npublic abstract class AbstractBeanDefinitionParser extends Object implements BeanDefinitionParser; // Abstract BeanDefinitionParser implementation providing a number of convenience methods and a template method that subclasses must override to provide the actual parsing logic.\npublic abstract class AbstractSimpleBeanDefinitionParser extends AbstractSingleBeanDefinitionParser; // Convenient base class for when there exists a one-to-one mapping between attribute names on the element that is to be parsed and the property names on the Class being configured.\npublic abstract class AbstractSingleBeanDefinitionParser extends AbstractBeanDefinitionParser; // Base class for those BeanDefinitionParser implementations that need to parse and define just a single BeanDefinition.\npublic interface BeanDefinitionDecorator; // Interface used by the DefaultBeanDefinitionDocumentReader to handle custom, nested (directly under a <bean>) tags.\npublic interface BeanDefinitionDocumentReader; // SPI for parsing an XML document that contains Spring bean definitions.\npublic interface BeanDefinitionParser; // Interface used by the DefaultBeanDefinitionDocumentReader to handle custom, top-level (directly under <beans/>) tags.\npublic class BeanDefinitionParserDelegate extends Object; // Stateful delegate class used to parse XML bean definitions.\npublic class BeansDtdResolver extends Object implements EntityResolver; // EntityResolver implementation for the Spring beans DTD, to load the DTD from the Spring class path (or JAR file).\npublic class DefaultBeanDefinitionDocumentReader extends Object implements BeanDefinitionDocumentReader; // Default implementation of the BeanDefinitionDocumentReader interface that reads bean definitions according to the \"spring-beans\" DTD and XSD format (Spring's default XML bean definition format).\npublic class DefaultDocumentLoader extends Object implements DocumentLoader; // Spring's default DocumentLoader implementation.\npublic class DefaultNamespaceHandlerResolver extends Object implements NamespaceHandlerResolver; // Default implementation of the NamespaceHandlerResolver interface.\npublic class DelegatingEntityResolver extends Object implements EntityResolver; // EntityResolver implementation that delegates to a BeansDtdResolver and a PluggableSchemaResolver for DTDs and XML schemas, respectively.\npublic class DocumentDefaultsDefinition extends Object implements DefaultsDefinition; // Simple JavaBean that holds the defaults specified at the <beans> level in a standard Spring XML bean definition document: default-lazy-init, default-autowire, etc.\npublic interface DocumentLoader; // Strategy interface for loading an XML Document.\n", "des": "Contains an abstract XML-based BeanFactory implementation, including a standard \"spring-beans\" XSD."}
{"index": 803, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: ru\n\nClasses and Interfaces: \nClass RussianAnalyzer; // Analyzer for Russian language.\nClass RussianLightStemFilter; // A TokenFilter that applies RussianLightStemmer to stem Russian words.\nClass RussianLightStemFilterFactory; // Factory for RussianLightStemFilter.\nClass RussianLightStemmer; // Light Stemmer for Russian.\n", "des": "Analyzer for Russian."}
{"index": 923, "repo": "commons-compress-1.23.0", "code": "Package: lzma\n\nClasses and Interfaces: \nClass LZMACompressorInputStream; // LZMA decompressor.\nClass LZMACompressorOutputStream; // LZMA compressor.\nClass LZMAUtils; // Utility code for the lzma compression format.\n", "des": "Provides stream classes using the \"stand-alone\" LZMA algorithm."}
{"index": 1481, "repo": "tribuo-core-4.3.1", "code": "Package: evaluation\n\nSub Packages: \npackage evaluation.metrics; // This package contains the infrastructure classes for building evaluation metrics.\n\nClasses and Interfaces: \npublic abstract class AbstractEvaluator<T extends Output<T>,C extends MetricContext<T>,E extends Evaluation<T>,M extends EvaluationMetric<T,C>> extends Object implements Evaluator<T,E>; // Base class for evaluators.\npublic class CrossValidation<T extends Output<T>,E extends Evaluation<T>> extends Object; // A class that does k-fold cross-validation.\npublic final class DescriptiveStats extends Object; // Descriptive statistics calculated across a list of doubles.\npublic interface Evaluation<T extends Output<T>> extends com.oracle.labs.mlrg.olcut.provenance.Provenancable<EvaluationProvenance>; // An immutable evaluation of a specific model and dataset.\npublic final class EvaluationAggregator extends Object; // Aggregates metrics from a list of evaluations, or a list of models and datasets.\n@FunctionalInterface public interface EvaluationRenderer<T extends Output<T>,E extends Evaluation<T>>; // Renders an Evaluation into a String.\npublic interface Evaluator<T extends Output<T>,E extends Evaluation<T>>; // An evaluation factory which produces immutable Evaluations of a given Dataset using the given Model.\npublic class KFoldSplitter<T extends Output<T>> extends Object; // A k-fold splitter to be used in cross-validation.\npublic static class KFoldSplitter.TrainTestFold<T extends Output<T>> extends Object; // Stores a train/test split for a dataset.\npublic final class OnlineEvaluator<T extends Output<T>,E extends Evaluation<T>> extends Object; // An evaluator which aggregates predictions and produces Evaluations covering all the Predictions it has seen or created.\npublic class TrainTestSplitter<T extends Output<T>> extends Object; // Splits data into training and testing sets.\npublic static class TrainTestSplitter.SplitDataSourceProvenance extends Object implements DataSourceProvenance; // Provenance for a split data source.\n", "des": "Evaluation base classes, along with code for train/test splits and cross validation."}
{"index": 2852, "repo": "spring-integration-core-6.1.2", "code": "Package: core\n\nClasses and Interfaces: \npublic interface AsyncMessagingOperations;\npublic class AsyncMessagingTemplate extends MessagingTemplate implements AsyncMessagingOperations;\npublic class ErrorMessagePublisher extends Object implements org.springframework.beans.factory.BeanFactoryAware; // The component which can be used as general purpose of errors publishing.\n@FunctionalInterface public interface GenericHandler<P>; // A functional interface to specify MessageHandler logic with Java 8 Lambda expression:\n@FunctionalInterface public interface GenericSelector<S>; // Generic (lambda) strategy interface for selector.\n@FunctionalInterface public interface GenericTransformer<S,T>; // Generic (lambda) strategy interface for transformer.\npublic interface MessageProducer; // Base interface for any component that is capable of sending messages to a MessageChannel.\n@FunctionalInterface public interface MessageSelector extends GenericSelector<org.springframework.messaging.Message<?>>; // Strategy interface for message selection.\n@FunctionalInterface public interface MessageSource<T> extends IntegrationPattern; // Base interface for any source of Messages that can be polled.\npublic class MessagingTemplate extends org.springframework.messaging.core.GenericMessagingTemplate;\npublic interface Pausable extends ManageableLifecycle; // Endpoints implementing this interface can be paused/resumed.\n", "des": "Provides core classes."}
{"index": 1840, "repo": "spring-test-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(AfterTestClassEvent.class) public @interface AfterTestClass; // @EventListener annotation used to consume an AfterTestClassEvent published by the EventPublishingTestExecutionListener.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(AfterTestExecutionEvent.class) public @interface AfterTestExecution; // @EventListener annotation used to consume an AfterTestExecutionEvent published by the EventPublishingTestExecutionListener.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(AfterTestMethodEvent.class) public @interface AfterTestMethod; // @EventListener annotation used to consume an AfterTestMethodEvent published by the EventPublishingTestExecutionListener.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(BeforeTestClassEvent.class) public @interface BeforeTestClass; // @EventListener annotation used to consume a BeforeTestClassEvent published by the EventPublishingTestExecutionListener.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(BeforeTestExecutionEvent.class) public @interface BeforeTestExecution; // @EventListener annotation used to consume a BeforeTestExecution published by the EventPublishingTestExecutionListener.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(BeforeTestMethodEvent.class) public @interface BeforeTestMethod; // @EventListener annotation used to consume a BeforeTestMethodEvent published by the EventPublishingTestExecutionListener.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(PrepareTestInstanceEvent.class) public @interface PrepareTestInstance; // @EventListener annotation used to consume a PrepareTestInstanceEvent published by the EventPublishingTestExecutionListener.\n", "des": "Test execution event annotations for the Spring TestContext Framework."}
{"index": 651, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: utils\n\nClasses and Interfaces: \nClass FederationApplicationHomeSubClusterStoreInputValidator; // Utility class to validate the inputs to FederationApplicationHomeSubClusterStore, allows a fail fast mechanism for invalid user inputs.\nClass FederationMembershipStateStoreInputValidator; // Utility class to validate the inputs to FederationMembershipStateStore, allows a fail fast mechanism for invalid user inputs.\nClass FederationPolicyStoreInputValidator; // Utility class to validate the inputs to FederationPolicyStore, allows a fail fast mechanism for invalid user inputs.\nClass FederationStateStoreUtils; // Common utility methods used by the store implementations.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 2858, "repo": "spring-integration-core-6.1.2", "code": "Package: events\n\nClasses and Interfaces: \npublic abstract class IntegrationEvent extends org.springframework.context.ApplicationEvent; // Base class for all ApplicationEvents generated by the framework.\n", "des": "ApplicationEvents generated by the Spring Integration framework."}
{"index": 961, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: soap\n\nSub Packages: \npackage soap.addressing; // Provides WS-Addressing implementation classes.\npackage soap.axiom; // AXis Object Model (AXIOM) support for Spring-WS' soap message infrastructure.\npackage soap.client; // Contains classes for SOAP-specific client-side Spring-WS support.\npackage soap.saaj; // SOAP with Attachments API for Java (SAAJ) support for Spring-WS soap message infrastructure.\npackage soap.security; // Provides WS-Security implementation classes.\npackage soap.server; // Contains classes for SOAP-specific server-side Spring-WS support.\npackage soap.soap11; // Contains interfaces specific to SOAP 1.1.\npackage soap.soap12; // Contains interfaces specific to SOAP 1.2.\npackage soap.support; // Classes supporting the org.springframework.ws.soap package.\n\nClasses and Interfaces: \nInterface SoapBody; // Represents the Body element in a SOAP message.\nInterface SoapElement; // The base interface for all elements that are contained in a SOAP message.\nInterface SoapEnvelope; // Represents the Envelope element in a SOAP message.\nInterface SoapFault; // Represents the Fault element in the body of a SOAP message.\nInterface SoapFaultDetail; // Represents the detail element in a SOAP fault.\nInterface SoapFaultDetailElement; // Represents the content for an individual SOAP detail entry in a SOAP Message.\nInterface SoapHeader; // Represents the Header element in a SOAP message.\nInterface SoapHeaderElement; // Represents the contents of an individual SOAP header in the a SOAP message.\nInterface SoapMessage; // Represents an abstraction for SOAP messages, providing access to a SOAP Envelope.\nInterface SoapMessageFactory; // Sub-interface of WebServiceMessageFactory which contains SOAP-specific properties and methods.\nInterface SoapVersion; // Interface that defines a specific version of the SOAP specification.\nClass AbstractSoapMessage; // Abstract implementation of the SoapMessage interface.\nClass SoapBodyException; // Exception thrown when a SOAP body could not be accessed.\nClass SoapElementException; // Exception thrown when a SOAP element could not be accessed.\nClass SoapEnvelopeException; // Exception thrown when a SOAP body could not be accessed.\n", "des": "Provides the SOAP functionality of the Spring Web Services framework."}
{"index": 1769, "repo": "spring-data-mongodb-4.1.2", "code": "Package: aot\n\nClasses and Interfaces: \npublic class AotMongoRepositoryPostProcessor extends RepositoryRegistrationAotProcessor;\n", "des": "Ahead-Of-Time processors for MongoDB repositories."}
{"index": 3058, "repo": "spring-ws-core-4.0.5", "code": "Package: context\n\nClasses and Interfaces: \npublic abstract class AbstractMessageContext extends Object implements MessageContext; // Abstract base class for MessageContext instances.\npublic class DefaultMessageContext extends AbstractMessageContext; // Default implementation of MessageContext.\npublic interface MessageContext; // Context holder for message requests.\n", "des": "Contains the MessageContext interface and implementations thereof."}
{"index": 116, "repo": "ignite-core-2.15.0", "code": "Package: binary\n\nClasses and Interfaces: \nInterface BinaryCollectionFactory<K>; // Collection factory.\nInterface BinaryField; // Binary object field.\nInterface BinaryIdMapper; // Type and field ID mapper for binary objects.\nInterface Binarylizable; // Interface that allows to implement custom serialization logic for binary objects.\nInterface BinaryMapFactory<K,V>; // Map factory.\nInterface BinaryNameMapper; // Maps type and field names to different names.\nInterface BinaryObject; // Wrapper for binary object in binary format.\nInterface BinaryObjectBuilder; // Binary object builder.\nInterface BinaryRawReader; // Raw reader for binary objects.\nInterface BinaryRawWriter; // Raw writer for binary object.\nInterface BinaryReader; // Reader for binary objects used in Binarylizable implementations.\nInterface BinarySerializer; // Interface that allows to implement custom serialization logic for binary objects.\nInterface BinaryType; // Binary type meta data.\nInterface BinaryWriter; // Writer for binary object used in Binarylizable implementations.\nClass BinaryBasicIdMapper; // Base binary ID mapper implementation.\nClass BinaryBasicNameMapper; // Base binary name mapper implementation.\nClass BinaryReflectiveSerializer; // Binary serializer which writes object fields using reflection.\nClass BinaryTypeConfiguration; // Defines configuration properties for a specific binary type.\nClass BinaryInvalidTypeException; // Exception indicating that class needed for deserialization of binary object does not exist.\nClass BinaryObjectException; // Exception indicating binary object serialization error.\n", "des": "Contains Ignite Binary Objects API classes."}
{"index": 2913, "repo": "spring-xml-4.0.5", "code": "Package: validation\n\nClasses and Interfaces: \npublic class SchemaFactoryUtils extends Object;\npublic abstract class SchemaLoaderUtils extends Object; // Convenient utility methods for loading of Schema objects, performing standard handling of input streams.\npublic interface ValidationErrorHandler extends ErrorHandler; // Subinterface of ErrorHandler that allows the registered errors to be retrieved.\npublic class XMLReaderFactoryUtils extends Object;\npublic class XmlValidationException extends XmlException; // Exception thrown when a validation error occurs\npublic interface XmlValidator; // Simple processor that validates a given Source.\npublic abstract class XmlValidatorFactory extends Object; // Factory for XmlValidator objects, being aware of JAXP 1.3 Validators, and JAXP 1.0 parsing capabilities.\n", "des": "Provides classes for XML validation in JAXP 1.0 and JAXP 1.3."}
{"index": 275, "repo": "pdfbox-3.0.0-beta1", "code": "Package: contentstream\n\nSub Packages: \npackage contentstream.operator; // This package contains implementations of all of the PDF operators.\n\nClasses and Interfaces: \nInterface PDContentStream; // A content stream.\nClass PDFGraphicsStreamEngine; // PDFStreamEngine subclass for advanced processing of graphics.\nClass PDFStreamEngine; // Processes a PDF content stream and executes certain operations.\n", "des": "This package contains provides classes for working with content streams."}
{"index": 3437, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface LazyInitializable; // Hibernate \"wraps\" a java collection in an instance of PersistentCollection.\nInterface PersistentCollection; // Persistent collections are treated as value objects by Hibernate.\n", "des": "SPI definitions for persistent collections"}
{"index": 2997, "repo": "spring-web-6.0.11", "code": "Package: reactive\n\nClasses and Interfaces: \npublic abstract class AbstractClientHttpRequest extends Object implements ClientHttpRequest; // Base class for ClientHttpRequest implementations.\npublic interface ClientHttpConnector; // Abstraction over HTTP clients driving the underlying HTTP client to connect to the origin server and provide all necessary infrastructure to send a ClientHttpRequest and receive a ClientHttpResponse.\npublic interface ClientHttpRequest extends ReactiveHttpOutputMessage; // Represents a client-side reactive HTTP request.\npublic class ClientHttpRequestDecorator extends Object implements ClientHttpRequest; // Wraps another ClientHttpRequest and delegates all methods to it.\npublic interface ClientHttpResponse extends ReactiveHttpInputMessage; // Represents a client-side reactive HTTP response.\npublic class ClientHttpResponseDecorator extends Object implements ClientHttpResponse; // Wraps another ClientHttpResponse and delegates all methods to it.\npublic class HttpComponentsClientHttpConnector extends Object implements ClientHttpConnector, Closeable; // ClientHttpConnector implementation for the Apache HttpComponents HttpClient 5.x.\npublic class JdkClientHttpConnector extends Object implements ClientHttpConnector; // ClientHttpConnector for the Java HttpClient.\npublic class JdkHttpClientResourceFactory extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Factory to manage JDK HttpClient resources such as a shared Executor within the lifecycle of a Spring ApplicationContext.\npublic class JettyClientHttpConnector extends Object implements ClientHttpConnector; // ClientHttpConnector for the Jetty Reactive Streams HttpClient.\npublic class JettyResourceFactory extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Factory to manage Jetty resources, i.e.\npublic class ReactorClientHttpConnector extends Object implements ClientHttpConnector; // Reactor-Netty implementation of ClientHttpConnector.\npublic class ReactorNetty2ClientHttpConnector extends Object implements ClientHttpConnector; // Reactor Netty 2 (Netty 5) implementation of ClientHttpConnector.\npublic class ReactorNetty2ResourceFactory extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Factory to manage Reactor Netty resources, i.e.\n", "des": "Abstractions for reactive HTTP client support including ClientHttpRequest and ClientHttpResponse as well as a ClientHttpConnector."}
{"index": 860, "repo": "calcite-core-1.34.0", "code": "Package: ddl\n\nClasses and Interfaces: \nClass SqlAttributeDefinition; // Parse tree for SqlAttributeDefinition, which is part of a SqlCreateType.\nClass SqlCheckConstraint; // Parse tree for UNIQUE, PRIMARY KEY constraints.\nClass SqlColumnDeclaration; // Parse tree for UNIQUE, PRIMARY KEY constraints.\nClass SqlCreateForeignSchema; // Parse tree for CREATE FOREIGN SCHEMA statement.\nClass SqlCreateFunction; // Parse tree for CREATE FUNCTION statement.\nClass SqlCreateMaterializedView; // Parse tree for CREATE MATERIALIZED VIEW statement.\nClass SqlCreateSchema; // Parse tree for CREATE SCHEMA statement.\nClass SqlCreateTable; // Parse tree for CREATE TABLE statement.\nClass SqlCreateType; // Parse tree for CREATE TYPE statement.\nClass SqlCreateView; // Parse tree for CREATE VIEW statement.\nClass SqlDdlNodes; // Utilities concerning SqlNode for DDL.\nClass SqlDropFunction; // Parse tree for DROP FUNCTION statement.\nClass SqlDropMaterializedView; // Parse tree for DROP MATERIALIZED VIEW statement.\nClass SqlDropObject; // Base class for parse trees of DROP TABLE, DROP VIEW, DROP MATERIALIZED VIEW and DROP TYPE statements.\nClass SqlDropSchema; // Parse tree for DROP SCHEMA statement.\nClass SqlDropTable; // Parse tree for DROP TABLE statement.\nClass SqlDropType; // Parse tree for DROP TYPE statement.\nClass SqlDropView; // Parse tree for DROP VIEW statement.\nClass SqlKeyConstraint; // Parse tree for UNIQUE, PRIMARY KEY constraints.\nEnum SqlDdlNodes.FileType; // File type for CREATE FUNCTION.\n", "des": "Parse tree for SQL DDL statements."}
{"index": 2519, "repo": "spring-security-core-6.1.2", "code": "Package: intercept\n\nSub Packages: \npackage intercept.aopalliance; // Enforces security for AOP Alliance MethodInvocations, such as via Spring AOP.\npackage intercept.aspectj; // Enforces security for AspectJ JointPoints, delegating secure object callbacks to the calling aspect.\n\nClasses and Interfaces: \n@Deprecated public abstract class AbstractSecurityInterceptor extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.MessageSourceAware;\n@Deprecated public interface AfterInvocationManager;\n@Deprecated public class AfterInvocationProviderManager extends Object implements AfterInvocationManager, org.springframework.beans.factory.InitializingBean;\n@Deprecated public class InterceptorStatusToken extends Object;\n@Deprecated public class MethodInvocationPrivilegeEvaluator extends Object implements org.springframework.beans.factory.InitializingBean;\n@Deprecated public class RunAsImplAuthenticationProvider extends Object implements org.springframework.beans.factory.InitializingBean, AuthenticationProvider, org.springframework.context.MessageSourceAware;\n@Deprecated public interface RunAsManager;\n@Deprecated public class RunAsManagerImpl extends Object implements RunAsManager, org.springframework.beans.factory.InitializingBean;\n@Deprecated public class RunAsUserToken extends AbstractAuthenticationToken;\n", "des": "Abstract level security interception classes which are responsible for enforcing the configured security constraints for a secure object."}
{"index": 1798, "repo": "spring-aop-6.0.11", "code": "Package: intercept\n\nClasses and Interfaces: \npublic interface ConstructorInterceptor extends Interceptor; // Intercepts the construction of a new object.\npublic interface ConstructorInvocation extends Invocation; // Description of an invocation to a constructor, given to an interceptor upon constructor-call.\npublic interface Interceptor extends Advice; // This interface represents a generic interceptor.\npublic interface Invocation extends Joinpoint; // This interface represents an invocation in the program.\npublic interface Joinpoint; // This interface represents a generic runtime joinpoint (in the AOP terminology).\n@FunctionalInterface public interface MethodInterceptor extends Interceptor; // Intercepts calls on an interface on its way to the target.\npublic interface MethodInvocation extends Invocation; // Description of an invocation to a method, given to an interceptor upon method-call.\n", "des": "The AOP Alliance reflective interception abstraction."}
{"index": 1933, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: gson\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnClass(com.google.gson.Gson.class) @EnableConfigurationProperties(GsonProperties.class) public class GsonAutoConfiguration extends Object; // Auto-configuration for Gson.\n@FunctionalInterface public interface GsonBuilderCustomizer; // Callback interface that can be implemented by beans wishing to further customize the Gson through GsonBuilder retaining its default auto-configuration.\n@ConfigurationProperties(prefix=\"spring.gson\") public class GsonProperties extends Object; // Configuration properties to configure Gson.\n", "des": "Auto-configuration for GSON."}
{"index": 3075, "repo": "spring-ws-core-4.0.5", "code": "Package: core\n\nClasses and Interfaces: \npublic final class EndpointReference extends Object implements Serializable; // Represents an Endpoint Reference, as defined in the WS-Addressing specification.\npublic final class MessageAddressingProperties extends Object implements Serializable; // Represents a set of Message Addressing Properties, as defined in the WS-Addressing specification.\n", "des": "Core package for WS-Addressing support."}
{"index": 1765, "repo": "spring-data-mongodb-4.1.2", "code": "Package: gridfs\n\nClasses and Interfaces: \npublic class GridFsCriteria extends Criteria; // GridFs-specific helper class to define Criterias.\npublic interface GridFsObject<ID,CONTENT>; // A common interface when dealing with GridFs items using Spring Data.\npublic static class GridFsObject.Options extends Object; // Additional, context relevant information.\npublic interface GridFsOperations extends ResourcePatternResolver; // Collection of operations to store and read files from MongoDB GridFS.\npublic class GridFsResource extends InputStreamResource implements GridFsObject<Object,InputStream>; // GridFSFile based Resource implementation.\npublic class GridFsTemplate extends Object implements GridFsOperations, ResourcePatternResolver; // GridFsOperations implementation to store content into MongoDB GridFS.\npublic class GridFsUpload<ID> extends Object implements GridFsObject<ID,InputStream>; // Upload descriptor for a GridFS file upload.\npublic static class GridFsUpload.GridFsUploadBuilder<T> extends Object; // Builder to create GridFsUpload in a fluent way.\npublic interface ReactiveGridFsOperations; // Collection of operations to store and read files from MongoDB GridFS using reactive infrastructure.\npublic class ReactiveGridFsResource extends Object implements GridFsObject<Object,org.reactivestreams.Publisher<DataBuffer>>; // Reactive GridFSFile based Resource implementation.\npublic class ReactiveGridFsTemplate extends Object implements ReactiveGridFsOperations; // ReactiveGridFsOperations implementation to store content into MongoDB GridFS.\npublic class ReactiveGridFsUpload<ID> extends Object implements GridFsObject<ID,org.reactivestreams.Publisher<DataBuffer>>; // Upload descriptor for a GridFS file upload.\npublic static class ReactiveGridFsUpload.ReactiveGridFsUploadBuilder<T> extends Object; // Builder to create ReactiveGridFsUpload in a fluent way.\n", "des": "Support for MongoDB GridFS feature."}
{"index": 3470, "repo": "tomcat-jspapi-10.1", "code": "Package: jsp\n\nSub Packages: \npackage jsp.el; // Classes and interfaces for the JSP 2.0 Expression Language API.\npackage jsp.tagext; // Classes and interfaces for the definition of JavaServer Pages Tag Libraries.\n\nClasses and Interfaces: \nInterface HttpJspPage; // The HttpJspPage interface describes the interaction that a JSP Page Implementation Class must satisfy when using the HTTP protocol.\nInterface JspApplicationContext; // Stores application-scoped information for the JSP container.\nInterface JspPage; // The JspPage interface describes the generic interaction that a JSP Page Implementation class must satisfy; pages that use the HTTP protocol are described by the HttpJspPage interface.\nClass ErrorData; // Contains information about an error, for error pages.\nClass JspContext; // JspContext serves as the base class for the PageContext class and abstracts all information that is not specific to servlets.\nClass JspEngineInfo; // The JspEngineInfo is an abstract class that provides information on the current JSP engine.\nClass JspFactory; // The JspFactory is an abstract class that defines a number of factory methods available to a JSP page at runtime for the purposes of creating instances of various interfaces and classes used to support the JSP implementation.\nClass JspWriter; // The actions and template data in a JSP page is written using the JspWriter object that is referenced by the implicit variable out which is initialized automatically using methods in the PageContext object.\nClass PageContext; // PageContext extends JspContext to provide useful context information for when JSP technology is used in a Servlet environment.\nClass JspException; // A generic exception known to the JSP engine; uncaught JspExceptions will result in an invocation of the errorpage machinery.\nClass JspTagException; // Exception to be used by a Tag Handler to indicate some unrecoverable error.\nClass SkipPageException; // Exception to indicate the calling page must cease evaluation.\n", "des": "Classes and interfaces for the Core JSP 2.0 API."}
{"index": 330, "repo": "kafka-clients-3.5.0", "code": "Package: oauthbearer\n\nSub Packages: \npackage oauthbearer.secured; // This package is deprecated.\n\nClasses and Interfaces: \nInterface OAuthBearerToken; // The b64token value as defined in RFC 6750 Section 2.1 along with the token's specific scope and lifetime and principal name.\nClass OAuthBearerExtensionsValidatorCallback; // A Callback for use by the SaslServer implementation when it needs to validate the SASL extensions for the OAUTHBEARER mechanism Callback handlers should use the OAuthBearerExtensionsValidatorCallback.valid(String) method to communicate valid extensions back to the SASL server.\nClass OAuthBearerLoginCallbackHandler; // OAuthBearerLoginCallbackHandler is an AuthenticateCallbackHandler that accepts OAuthBearerTokenCallback and SaslExtensionsCallback callbacks to perform the steps to request a JWT from an OAuth/OIDC provider using the clientcredentials.\nClass OAuthBearerLoginModule; // The LoginModule for the SASL/OAUTHBEARER mechanism.\nClass OAuthBearerTokenCallback; // A Callback for use by the SaslClient and Login implementations when they require an OAuth 2 bearer token.\nClass OAuthBearerValidatorCallback; // A Callback for use by the SaslServer implementation when it needs to provide an OAuth 2 bearer token compact serialization for validation.\nClass OAuthBearerValidatorCallbackHandler; // OAuthBearerValidatorCallbackHandler is an AuthenticateCallbackHandler that accepts OAuthBearerValidatorCallback and OAuthBearerExtensionsValidatorCallback callbacks to implement OAuth/OIDC validation.\n", "des": "Provides a LoginModule for using OAuth Bearer Token authentication with Kafka clusters."}
{"index": 2742, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: poller\n\nClasses and Interfaces: \npublic class DirectPoller<S> extends Object implements Poller<S>; // A Poller that uses the callers thread to poll for a result as soon as it is asked for.\npublic interface Poller<T>; // Interface for polling a Callable instance provided by the user.\n", "des": "APIs for polling support."}
{"index": 1039, "repo": "hadoop-aws-3.3.6", "code": "Package: tools\n\nClasses and Interfaces: \nInterface MarkerToolOperations; // Operations which must be offered by the store for MarkerTool.\nClass MarkerTool; // Audit an S3 bucket for directory markers.\nClass MarkerTool.MarkerPurgeSummary; // Result of a call of MarkerTool.purgeMarkers(DirMarkerTracker, int); included in MarkerTool.ScanResult so must share visibility.\nClass MarkerTool.ScanArgs; // Arguments for the scan.\nClass MarkerTool.ScanArgsBuilder; // Builder of the scan arguments.\nClass MarkerTool.ScanResult; // Result of the scan operation.\nClass MarkerToolOperationsImpl; // Implement the marker tool operations by forwarding to the OperationCallbacks instance provided in the constructor.\n", "des": "S3A Command line tools independent of S3Guard."}
{"index": 2831, "repo": "spring-data-r2dbc-3.1.2", "code": "Package: mapping\n\nSub Packages: \npackage mapping.event; // Mapping event callback infrastructure for the R2DBC row-to-object mapping subsystem.\n\nClasses and Interfaces: \npublic class OutboundRow extends Object implements Map<SqlIdentifier,Parameter>, Cloneable; // Representation of a Row to be written through a INSERT or UPDATE statement.\npublic class R2dbcMappingContext extends RelationalMappingContext; // R2DBC-specific extension to RelationalMappingContext.\npublic class R2dbcSimpleTypeHolder extends SimpleTypeHolder; // Simple constant holder for a SimpleTypeHolder enriched with R2DBC specific simple types.\n", "des": "Domain objects for R2DBC."}
{"index": 2544, "repo": "pulsar-common-3.0.0", "code": "Package: zstd\n\nClasses and Interfaces: \npublic class ZStdRawCompressor extends Object; // Expose ZstdFrameCompressor which is a package protected class.\npublic class ZStdRawDecompressor extends Object; // Exposes ZstdFrameDecompressor which is package protected.\n", "des": "Helper class to access AirCompressor package private classes."}
{"index": 1210, "repo": "commons-math3-3.6.1", "code": "Package: summary\n\nClasses and Interfaces: \nClass Product; // Returns the product of the available values.\nClass Sum; // Returns the sum of the available values.\nClass SumOfLogs; // Returns the sum of the natural logs for this collection of values.\nClass SumOfSquares; // Returns the sum of the squares of the available values.\n", "des": "Other summary statistics."}
{"index": 2232, "repo": "spring-data-commons-3.1.2", "code": "Package: util\n\nClasses and Interfaces: \npublic class AnnotatedTypeScanner extends Object implements ResourceLoaderAware, EnvironmentAware; // Scanner to find types with annotations on the classpath.\npublic class AnnotationDetectionFieldCallback extends Object implements ReflectionUtils.FieldCallback; // A ReflectionUtils.FieldCallback that will inspect each field for a given annotation.\npublic class AnnotationDetectionMethodCallback<A extends Annotation> extends Object implements ReflectionUtils.MethodCallback; // ReflectionUtils.MethodCallback to find annotations of a given type.\npublic abstract class BeanLookup extends Object; // Simple helper to allow lenient lookup of beans of a given type from a ListableBeanFactory.\npublic interface CastUtils;\n@Deprecated(since=\"3.0\", forRemoval=true) public class ClassTypeInformation<S> extends Object;\npublic interface CloseableIterator<T> extends Iterator<T>, Closeable; // A CloseableIterator serves as a bridging data structure for the underlying data store specific results that can be wrapped in a Java 8 java.util.stream.Stream.\npublic interface CustomCollectionRegistrar; // An SPI to register custom collection types.\npublic class CustomCollections extends Object; // Central API to expose information about custom collections present for Spring Data.\npublic class DirectFieldAccessFallbackBeanWrapper extends BeanWrapperImpl; // Custom extension of BeanWrapperImpl that falls back to direct field access in case the object or type being wrapped does not use accessor methods.\npublic final class KotlinReflectionUtils extends Object; // Reflection utility methods specific to Kotlin reflection.\npublic class Lazy<T> extends Object implements Supplier<T>; // Simple value type to delay the creation of an object using a Supplier returning the produced object for subsequent lookups.\npublic class MethodInvocationRecorder extends Object; // API to record method invocations via method references on a proxy.\npublic static interface MethodInvocationRecorder.PropertyNameDetectionStrategy;\npublic static class MethodInvocationRecorder.Recorded<T> extends Object;\npublic static interface MethodInvocationRecorder.Recorded.ToCollectionConverter<T,S> extends Function<T,Collection<S>>;\npublic static interface MethodInvocationRecorder.Recorded.ToMapConverter<T,S> extends Function<T,Map<?,S>>;\npublic abstract class NullableUtils extends Object; // Utility methods to introspect nullability rules declared in packages, classes and methods.\npublic class NullableWrapper extends Object; // Simple value object to wrap a nullable delegate.\n", "des": "Core utility APIs such as a type information framework to resolve generic types."}
{"index": 1390, "repo": "spring-boot-actuator-3.1.1", "code": "Package: jmx\n\nSub Packages: \npackage jmx.annotation; // Annotation support for actuator JMX endpoints.\n\nClasses and Interfaces: \npublic class EndpointMBean extends Object implements DynamicMBean; // Adapter to expose a JMX endpoint as a DynamicMBean.\n@FunctionalInterface public interface EndpointObjectNameFactory; // A factory to create an ObjectName for an EndpointMBean.\npublic interface ExposableJmxEndpoint extends ExposableEndpoint<JmxOperation>; // Information describing an endpoint that can be exposed over JMX.\npublic class JacksonJmxOperationResponseMapper extends Object implements JmxOperationResponseMapper; // JmxOperationResponseMapper that delegates to a Jackson ObjectMapper to return a JSON response.\npublic class JmxEndpointExporter extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, org.springframework.beans.factory.BeanClassLoaderAware; // Exports JMX endpoints to a MBeanServer.\n@FunctionalInterface public interface JmxEndpointsSupplier extends EndpointsSupplier<ExposableJmxEndpoint>; // EndpointsSupplier for JMX endpoints.\npublic interface JmxOperation extends Operation; // An operation on a JMX endpoint.\npublic interface JmxOperationParameter; // Describes the parameters of an operation on a JMX endpoint.\npublic interface JmxOperationResponseMapper; // Maps an operation's response to a JMX-friendly form.\n", "des": "JMX support for actuator endpoints."}
{"index": 819, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: ext\n\nClasses and Interfaces: \nClass ArabicStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass ArmenianStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass BasqueStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass CatalanStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass DanishStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass DutchStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass EnglishStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass EstonianStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass FinnishStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass FrenchStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass German2Stemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass GermanStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass HungarianStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass IrishStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\n", "des": "Autogenerated snowball stemmer implementations."}
{"index": 2888, "repo": "spring-integration-core-6.1.2", "code": "Package: metrics\n\nClasses and Interfaces: \npublic interface CounterFacade extends MeterFacade;\npublic interface GaugeFacade extends MeterFacade;\npublic interface MeterFacade; // Facade for Meters.\npublic interface MetricsCaptor; // A metrics facade that delegates to a concrete implementation.\npublic static interface MetricsCaptor.CounterBuilder; // A builder for a counter.\npublic static interface MetricsCaptor.GaugeBuilder; // A builder for a gauge.\npublic static interface MetricsCaptor.TimerBuilder; // A builder for a timer.\npublic interface SampleFacade;\npublic interface TimerFacade extends MeterFacade;\n", "des": "Provides interfaces related to 5.0 metrics."}
{"index": 3447, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface RefCursorSupport; // Contract for JDBC REF_CURSOR support.\n", "des": "Defines contracts for JDBC REF_CURSOR support."}
{"index": 161, "repo": "ignite-core-2.15.0", "code": "Package: jobmetrics\n\nClasses and Interfaces: \nClass GridJobMetrics; // Check the ReadOnlyMetricRegistry with \"name=compute.jobs\" instead.\nClass GridJobMetricsProcessor; // Check the ReadOnlyMetricRegistry with \"name=compute.jobs\" instead.\nClass GridJobMetricsSnapshot; // Check the ReadOnlyMetricRegistry with \"name=compute.jobs\" instead.\n", "des": "Job metrics."}
{"index": 2320, "repo": "spring-boot-3.1.1", "code": "Package: jpa\n\nSub Packages: \npackage jpa.hibernate; // Hibernate Support classes.\n\nClasses and Interfaces: \npublic class EntityManagerFactoryBuilder extends Object; // Convenient builder for JPA EntityManagerFactory instances.\n", "des": "JPA Support classes."}
{"index": 1497, "repo": "wicket-extensions-10.0.0-M1", "code": "Package: tabs\n\nClasses and Interfaces: \npublic abstract class AbstractTab extends Object implements ITab; // Convenience class that takes care of common ITab functionality\npublic interface ITab extends org.apache.wicket.util.io.IClusterable; // Interface used to represent a single tab in a TabbedPanel\npublic class PanelCachingTab extends Object implements ITab; // A simple decorator that will cache the panel returned from the first call to getPanel()\npublic class TabbedPanel<T extends ITab> extends org.apache.wicket.markup.html.panel.Panel; // TabbedPanel component represents a panel with tabs that are used to switch between different content panels inside the TabbedPanel panel.\n", "des": "Package for working with tab panels."}
{"index": 3768, "repo": "lucene-analysis-common-9.7.0", "code": "Package: ckb\n\nClasses and Interfaces: \nClass SoraniAnalyzer; // Analyzer for Sorani Kurdish.\nClass SoraniNormalizationFilter; // A TokenFilter that applies SoraniNormalizer to normalize the orthography.\nClass SoraniNormalizationFilterFactory; // Factory for SoraniNormalizationFilter.\nClass SoraniNormalizer; // Normalizes the Unicode representation of Sorani text.\nClass SoraniStemFilter; // A TokenFilter that applies SoraniStemmer to stem Sorani words.\nClass SoraniStemFilterFactory; // Factory for SoraniStemFilter.\nClass SoraniStemmer; // Light stemmer for Sorani\n", "des": "Analyzer for Sorani Kurdish."}
{"index": 1797, "repo": "spring-aop-6.0.11", "code": "Package: aop\n\nClasses and Interfaces: \npublic interface Advice; // Tag interface for Advice.\npublic class AspectException extends RuntimeException; // Superclass for all AOP infrastructure exceptions.\n", "des": "The core AOP Alliance advice marker."}
{"index": 2803, "repo": "spring-security-oauth2-core-6.1.2", "code": "Package: oidc\n\nSub Packages: \npackage oidc.endpoint; // Support classes that model the OpenID Connect Core 1.0 Request and Response messages from the Authorization Endpoint and Token Endpoint.\npackage oidc.user; // Provides a model for an OpenID Connect Core 1.0 representation of a user Principal.\n\nClasses and Interfaces: \npublic interface AddressStandardClaim; // The Address Claim represents a physical mailing address defined by the OpenID Connect Core 1.0 specification that can be returned either in the UserInfo Response or the ID Token.\npublic final class DefaultAddressStandardClaim extends Object implements AddressStandardClaim; // The default implementation of an Address Claim.\npublic static class DefaultAddressStandardClaim.Builder extends Object; // A builder for DefaultAddressStandardClaim.\npublic interface IdTokenClaimAccessor extends StandardClaimAccessor; // A ClaimAccessor for the \"claims\" that can be returned in the ID Token, which provides information about the authentication of an End-User by an Authorization Server.\npublic final class IdTokenClaimNames extends Object; // The names of the \"claims\" defined by the OpenID Connect Core 1.0 specification that can be returned in the ID Token.\npublic class OidcIdToken extends AbstractOAuth2Token implements IdTokenClaimAccessor; // An implementation of an AbstractOAuth2Token representing an OpenID Connect Core 1.0 ID Token.\npublic static final class OidcIdToken.Builder extends Object; // A builder for OidcIdTokens\npublic final class OidcScopes extends Object; // The scope values defined by the OpenID Connect Core 1.0 specification that can be used to request claims.\npublic class OidcUserInfo extends Object implements StandardClaimAccessor, Serializable; // A representation of a UserInfo Response that is returned from the OAuth 2.0 Protected Resource UserInfo Endpoint.\npublic static final class OidcUserInfo.Builder extends Object; // A builder for OidcUserInfos\npublic interface StandardClaimAccessor extends ClaimAccessor; // A ClaimAccessor for the \"Standard Claims\" that can be returned either in the UserInfo Response or the ID Token.\npublic final class StandardClaimNames extends Object; // The names of the \"Standard Claims\" defined by the OpenID Connect Core 1.0 specification that can be returned either in the UserInfo Response or the ID Token.\n", "des": "Core classes and interfaces providing support for OpenID Connect Core 1.0."}
{"index": 2693, "repo": "spring-integration-http-6.1.2", "code": "Package: converter\n\nClasses and Interfaces: \npublic class MultipartAwareFormHttpMessageConverter extends Object implements org.springframework.http.converter.HttpMessageConverter<org.springframework.util.MultiValueMap<String,?>>; // An HttpMessageConverter implementation that delegates to an instance of AllEncompassingFormHttpMessageConverter while adding the capability to read multipart/form-data content in an HTTP request.\npublic class SerializingHttpMessageConverter extends org.springframework.http.converter.AbstractHttpMessageConverter<Serializable>; // An HttpMessageConverter implementation for Serializable instances.\n", "des": "Provides classes supporting message conversion."}
{"index": 3037, "repo": "spring-web-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \npublic abstract class AbstractCookieValueMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver; // A base abstract class to resolve method arguments annotated with @CookieValue.\npublic abstract class AbstractNamedValueMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Abstract base class for resolving method arguments from a named value.\nprotected static class AbstractNamedValueMethodArgumentResolver.NamedValueInfo extends Object; // Represents the information about a named value, including name, whether it's required and a default value.\npublic abstract class AbstractWebArgumentResolverAdapter extends Object implements HandlerMethodArgumentResolver; // An abstract base class adapting a WebArgumentResolver to the HandlerMethodArgumentResolver contract.\npublic class ErrorsMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Resolves Errors method arguments.\npublic class ExceptionHandlerMethodResolver extends Object; // Discovers @ExceptionHandler methods in a given class, including all of its superclasses, and helps to resolve a given Exception to the exception types supported by a given Method.\npublic class ExpressionValueMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver; // Resolves method arguments annotated with @Value.\npublic class InitBinderDataBinderFactory extends DefaultDataBinderFactory; // Adds initialization to a WebDataBinder via @InitBinder methods.\npublic class MapMethodProcessor extends Object implements HandlerMethodArgumentResolver, HandlerMethodReturnValueHandler; // Resolves Map method arguments and handles Map return values.\npublic class MethodArgumentConversionNotSupportedException extends org.springframework.beans.ConversionNotSupportedException; // A ConversionNotSupportedException raised while resolving a method argument.\npublic class MethodArgumentTypeMismatchException extends org.springframework.beans.TypeMismatchException; // A TypeMismatchException raised while resolving a controller method argument.\npublic class ModelAttributeMethodProcessor extends Object implements HandlerMethodArgumentResolver, HandlerMethodReturnValueHandler; // Resolve @ModelAttribute annotated method arguments and handle return values from @ModelAttribute annotated methods.\npublic final class ModelFactory extends Object; // Assist with initialization of the Model before controller method invocation and with updates to it after the invocation.\npublic class ModelMethodProcessor extends Object implements HandlerMethodArgumentResolver, HandlerMethodReturnValueHandler; // Resolves Model arguments and handles Model return values.\npublic class RequestHeaderMapMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Resolves Map method arguments annotated with @RequestHeader.\n", "des": "Support classes for annotation-based handler method processing."}
{"index": 2919, "repo": "groovy-4.0.13", "code": "Package: lang\n\nClasses and Interfaces: \npublic interface AdaptingMetaClass extends MetaClass; // An interface for MetaClass instances that \"adapt\" other MetaClass instances such as a proxy or delegating MetaClass.\npublic class BenchmarkInterceptor extends Object implements Interceptor; // Interceptor that registers the timestamp of each method call before and after invocation.\npublic class Binding extends GroovyObjectSupport; // Represents the variable bindings of a script which can be altered from outside the script object or created outside of a script and passed into it.\npublic interface Buildable;\n@Documented @Retention(SOURCE) @Target(TYPE) public @interface Category; // Transforms an instance-style Groovy class or interface to become a static-style conventional Groovy category.\npublic abstract class Closure<V> extends GroovyObjectSupport implements Cloneable, Runnable, GroovyCallable<V>, Serializable; // Represents any closure object in Groovy.\npublic class ClosureException extends RuntimeException; // An exception thrown by a closure invocation\npublic interface ClosureInvokingMethod; // An interface for MetaMethods that invoke closures to implements.\n@Documented @Retention(RUNTIME) @Target({FIELD,METHOD}) public @interface Delegate; // Annotation to automatically delegate part of the functionality of an owner class to the annotated delegation target.\n@Documented @Retention(RUNTIME) @Target({PARAMETER,METHOD}) public @interface DelegatesTo; // This annotation can be used by API or DSL writers to document parameters which accept a closure.\n@Retention(RUNTIME) @Target(PARAMETER) public static @interface DelegatesTo.Target; // Parameter annotation used to specify the delegate for a @DelegatesTo annotated parameter of the same method.\npublic class DelegatingMetaClass extends Object implements MetaClass, MutableMetaClass, GroovyObject;\npublic class DeprecationException extends RuntimeException; // Use this exception to mark a method implementation as being deprecated.\npublic class EmptyRange<T extends Comparable> extends AbstractList<T> implements Range<T>; // Constructing Ranges like 0..<0\npublic class ExpandoMetaClass extends MetaClassImpl implements GroovyObject; // ExpandoMetaClass is a MetaClass that behaves like an Expando, allowing the addition or replacement of methods, properties and constructors on the fly.\n", "des": "Core Groovy language classes for implementing data structures, closures, metadata and so forth."}
{"index": 3509, "repo": "opennlp-tools-2.2.0", "code": "Package: lemmatizer\n\nClasses and Interfaces: \nClass LemmaEvaluationErrorListener; // A default implementation of EvaluationMonitor that prints to an output stream.\nClass LemmatizerEvaluatorTool; // A default LemmaSample-centric implementation of AbstractEvaluatorTool that prints to an output stream.\nClass LemmatizerFineGrainedReportListener; // Generates a detailed report for the Lemmatizer.\nClass LemmatizerMETool;\nClass LemmatizerModelLoader; // Loads a LemmatizerModel for the command line tools.\nClass LemmatizerTrainerTool;\n", "des": "Classes giving access to the opennlp.tools.lemmatizer functionalities."}
{"index": 661, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: webapp\n\nClasses and Interfaces: \nInterface AppInfoProvider; // Classes implementing this interface are used in the LogServlet for providing various application related information.\nInterface YarnWebServiceParams; // Common web service parameters which could be used in RM/NM/AHS WebService.\nClass AppAttemptBlock;\nClass AppBlock;\nClass AppsBlock;\nClass ContainerBlock;\nClass ErrorsAndWarningsBlock;\nClass ErrorsAndWarningsBlock.ErrorMetrics;\nClass ErrorsAndWarningsBlock.MetricsBase;\nClass ErrorsAndWarningsBlock.WarningMetrics;\nClass LogServlet; // Extracts aggregated logs and related information.\nClass LogWebService; // Support only ATSv2 client only.\nClass LogWebServiceUtils; // Log web service utils class.\nClass WebPageUtils;\nClass WebServices;\nClass WrappedLogMetaRequest; // WrappedLogMetaRequest is wrapping a log request initiated by the client.\nClass WrappedLogMetaRequest.Builder;\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 646, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: exception\n\nClasses and Interfaces: \nClass FederationStateStoreException; // Exception thrown by the FederationStateStore.\nClass FederationStateStoreInvalidInputException; // Exception thrown by the FederationMembershipStateStoreInputValidator, FederationApplicationHomeSubClusterStoreInputValidator, FederationPolicyStoreInputValidator if the input is invalid.\nClass FederationStateStoreRetriableException; // Exception thrown by the FederationStateStore, if it is a retriable exception.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 862, "repo": "calcite-core-1.34.0", "code": "Package: fun\n\nClasses and Interfaces: \nClass OracleSqlOperatorTable; // Use SqlLibraryOperatorTableFactory.getOperatorTable(SqlLibrary...) instead, passing SqlLibrary.ORACLE as argument.\nClass SqlAbstractGroupFunction; // Base class for grouping functions GROUP_ID, GROUPING_ID, GROUPING.\nClass SqlAbstractTimeFunction; // Base class for time functions such as \"LOCALTIME\", \"LOCALTIME(n)\".\nClass SqlAnyValueAggFunction; // Definition of the ANY_VALUE aggregate functions, returning any one of the values which go into it.\nClass SqlArrayQueryConstructor; // Definition of the SQL:2003 standard ARRAY query constructor, ARRAY (<query>).\nClass SqlArrayValueConstructor; // Definition of the SQL:2003 standard ARRAY constructor, ARRAY [<expr>, ...].\nClass SqlAvgAggFunction; // Avg is an aggregator which returns the average of the values which go into it.\nClass SqlBaseContextVariable; // Base class for functions such as \"USER\", \"CURRENT_ROLE\", and \"CURRENT_PATH\".\nClass SqlBasicAggFunction; // Concrete implementation of SqlAggFunction.\nClass SqlBetweenOperator; // Defines the BETWEEN operator.\nClass SqlBitOpAggFunction; // Definition of the BIT_AND and BIT_OR aggregate functions, returning the bitwise AND/OR of all non-null input values, or null if none.\nClass SqlCase; // A SqlCase is a node of a parse tree which represents a case statement.\nClass SqlCaseOperator; // An operator describing a CASE, NULLIF or COALESCE expression.\nClass SqlCastFunction; // SqlCastFunction.\nClass SqlCoalesceFunction; // The COALESCE function.\nClass SqlCollectionTableOperator; // SqlCollectionTableOperator is the \"table function derived table\" operator.\nClass SqlColumnListConstructor; // SqlColumnListConstructor defines the non-standard constructor used to pass a COLUMN_LIST parameter to a UDX.\nClass SqlConvertFunction; // Common base for the CONVERT and TRANSLATE functions.\nClass SqlCountAggFunction; // Definition of the SQL COUNT aggregation function.\nClass SqlCovarAggFunction; // Covar is an aggregator which returns the Covariance of the values which go into it.\nClass SqlCurrentDateFunction; // The CURRENT_DATE function.\n", "des": "Defines the set of standard SQL row-level functions and operators."}
{"index": 372, "repo": "commons-geometry-euclidean-1.0", "code": "Package: shape\n\nClasses and Interfaces: \nClass Circle; // Class representing a circle in 2 dimensional Euclidean space.\nClass Parallelogram; // Class representing parallelograms, i.e.\nClass Parallelogram.Builder; // Class designed to aid construction of Parallelogram instances.\n", "des": "This package provides utilities for constructing basic 2D shapes."}
{"index": 1095, "repo": "hbase-server-3.0.0-alpha-4", "code": "Package: bucket\n\nClasses and Interfaces: \nInterface IOEngine; // A class implementing IOEngine interface supports data services for BucketCache.\nClass BucketAllocator; // This class is used to allocate a block with specified size and free the block when evicting.\nClass BucketAllocator.Bucket;\nClass BucketCache; // BucketCache uses BucketAllocator to allocate/free blocks, and uses BucketCache#ramCache and BucketCache#backingMap in order to determine if a given element is in the cache.\nClass BucketCachePersister;\nClass BucketCacheStats; // Class that implements cache metrics for bucket cache.\nClass ByteBufferIOEngine; // IO engine that stores data in memory using an array of ByteBuffers ByteBufferArray.\nClass CachedEntryQueue; // A memory-bound queue that will grow until an element brings total size larger than maxSize.\nClass ExclusiveMemoryMmapIOEngine; // IO engine that stores data to a file on the local block device using memory mapping mechanism\nClass FileIOEngine; // IO engine that stores data to a file on the local file system.\nClass FileMmapIOEngine; // IO engine that stores data to a file on the specified file system using memory mapping mechanism\nClass PersistentIOEngine; // A class implementing PersistentIOEngine interface supports file integrity verification for BucketCache which use persistent IOEngine\nClass SharedMemoryMmapIOEngine; // IO engine that stores data in pmem devices such as DCPMM.\nClass BucketAllocatorException; // Thrown by BucketAllocator\nClass CacheFullException; // Thrown by BucketAllocator.allocateBlock(int) when cache is full for the requested size\n", "des": "Provides BucketCache, an implementation of BlockCache."}
{"index": 1325, "repo": "groovy-all-4.0.13", "code": "Package: groovy\n\nSub Packages: \npackage groovy.ant; // Ant tasks for working with Groovy - such as groovyc for compiling Groovy source code to Java bytecode\npackage groovy.ast; // Groovy AST nodes for the syntax of the language\npackage groovy.classgen; // Generates Java classes for Groovy classes using ASM.\npackage groovy.control; // Compiler control classes.\npackage groovy.groovydoc; // GroovyDoc internal classes.\npackage groovy.reflection; // Internal classes for assisting with reflection.\npackage groovy.runtime; // Runtime classes for Groovy - whether the dynamic interpreter is being used, the compiler or the bytecode generator.\npackage groovy.syntax; // Lexer, parser and trees.\npackage groovy.tools; // Compiler entry points and miscellaneous development tools.\npackage groovy.vmplugin; // JVM version specific classes.\n\nClasses and Interfaces: \npublic class GroovyBugError extends AssertionError; // This class represents an error that is thrown when a bug is recognized inside the runtime.\npublic class GroovyException extends Exception implements GroovyExceptionInterface;\npublic interface GroovyExceptionInterface; // An interface for use by all Groovy compiler exceptions.\n", "des": "Groovy Language for the JVM"}
{"index": 3243, "repo": "opencms-core-15.0", "code": "Package: rpc\n\nClasses and Interfaces: \nInterface I_CmsContentService; // The content editor service interface.\nInterface I_CmsContentServiceAsync; // The content editor asynchronous service interface.\n", "des": "Contains the RPC service interfaces used by the XML content editor."}
{"index": 3380, "repo": "dagger-2.47", "code": "Package: dagger\n\nSub Packages: \npackage dagger.assisted; // This package contains the API for Dagger's assisted injection.\npackage dagger.multibindings; // This package contains the API by which Dagger allows you to bind several objects into a collection that can be injected without depending directly on each of the individual bindings.\n\nClasses and Interfaces: \nInterface Lazy<T>; // A handle to a lazily-computed value.\nInterface MembersInjector<T>; // Injects dependencies into the fields and methods on instances of type T.\nAnnotation Type Binds; // Annotates abstract methods of a Module that delegate bindings.\nAnnotation Type BindsInstance; // Marks a method on a component builder or a parameter on a component factory as binding an instance to some key within the component.\nAnnotation Type BindsOptionalOf; // Annotates methods that declare bindings for Optional containers of values from bindings that may or may not be present in the component.\nAnnotation Type Component; // Annotates an interface or abstract class for which a fully-formed, dependency-injected implementation is to be generated from a set of Component.modules().\nAnnotation Type Component.Builder; // A builder for a component.\nAnnotation Type Component.Factory; // A factory for a component.\nAnnotation Type MapKey; // Identifies annotation types that are used to associate keys with values returned by provider methods in order to compose a map.\nAnnotation Type Module; // Annotates a class that contributes to the object graph.\nAnnotation Type Provides; // Annotates methods of a module to create a provider method binding.\nAnnotation Type Reusable; // A scope that indicates that the object returned by a binding may be (but might not be) reused.\nAnnotation Type Subcomponent; // A subcomponent that inherits the bindings from a parent Component or Subcomponent.\nAnnotation Type Subcomponent.Builder; // A builder for a subcomponent.\nAnnotation Type Subcomponent.Factory; // A factory for a subcomponent.\n", "des": "This package contains the public API for the Dagger 2 dependency injection framework."}
{"index": 138, "repo": "ignite-core-2.15.0", "code": "Package: communication\n\nClasses and Interfaces: \nInterface GridDisconnectListener; // Node disconnect listener interface.\nInterface GridMessageListener; // Listener for messages received from remote nodes.\nInterface TransmissionHandler; // Class represents a handler for the set of files considered to be transferred from the remote node.\nClass GridIoManager; // This class represents the internal grid communication (input and output) manager which is placed as a layer of indirection between the IgniteKernal and CommunicationSpi.\nClass GridIoMessage; // Wrapper for all grid messages.\nClass GridIoMessageFactory; // Message factory implementation.\nClass GridIoPolicy; // This enumeration defines different types of communication message processing by the communication manager.\nClass GridIoSecurityAwareMessage;\nClass GridIoUserMessage; // User message wrapper.\nClass IgniteIoTestMessage;\nClass IgniteMessageFactoryImpl; // Message factory implementation which is responsible for instantiation of all communication messages.\nClass TraceRunnable; // Wrapper of Runnable which incject tracing to execution.\nClass TransmissionMeta; // Class represents a file meta information to send to the remote node.\nEnum TransmissionPolicy; // Class represents ways of data handling for a file ready to be sent through an opened transmission sender session.\nClass TransmissionCancelledException; // Exception is used to cancel a file transmission operation on the receiver.\n", "des": "TODO."}
{"index": 509, "repo": "commons-vfs2-2.9.0", "code": "Package: events\n\nClasses and Interfaces: \nClass AbstractFileChangeEvent; // A change event that knows how to notify a listener.\nClass ChangedEvent; // File changed event.\nClass CreateEvent; // File creation event.\nClass DeleteEvent; // File deletion event.\n", "des": "VFS Events"}
{"index": 3144, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface AliasResolutionContext; // Provides aliases that are used by load queries and ResultSet processors.\nInterface CollectionReferenceAliases;\nInterface EntityReferenceAliases; // Aggregates the alias/suffix information in relation to an EntityReference todo : add a contract (interface) that can be shared by entity and collection alias info objects as lhs/rhs of a join ?\nInterface LoadQueryDetails;\nInterface LockModeResolver;\n", "des": "Defines the SPI for the load query generated for the LoadPlan and the ResultSet processor."}
{"index": 1364, "repo": "spring-tx-6.0.11", "code": "Package: jta\n\nClasses and Interfaces: \npublic class JtaAfterCompletionSynchronization extends Object implements Synchronization; // Adapter for a JTA Synchronization, invoking the afterCommit / afterCompletion callbacks of Spring TransactionSynchronization objects callbacks after the outer JTA transaction has completed.\npublic class JtaTransactionManager extends AbstractPlatformTransactionManager implements TransactionFactory, org.springframework.beans.factory.InitializingBean, Serializable; // PlatformTransactionManager implementation for JTA, delegating to a backend JTA provider.\npublic class JtaTransactionObject extends Object implements SmartTransactionObject; // JTA transaction object, representing a UserTransaction.\npublic class ManagedTransactionAdapter extends Object implements Transaction; // Adapter for a managed JTA Transaction handle, taking a JTA TransactionManager reference and creating a JTA Transaction handle for it.\npublic class SimpleTransactionFactory extends Object implements TransactionFactory; // Default implementation of the TransactionFactory strategy interface, simply wrapping a standard JTA TransactionManager.\npublic class SpringJtaSynchronizationAdapter extends Object implements Synchronization; // Adapter that implements the JTA Synchronization interface delegating to an underlying Spring TransactionSynchronization.\npublic interface TransactionFactory; // Strategy interface for creating JTA Transaction objects based on specified transactional characteristics.\npublic class UserTransactionAdapter extends Object implements UserTransaction; // Adapter for a JTA UserTransaction handle, taking a JTA TransactionManager reference and creating a JTA UserTransaction handle for it.\n", "des": "Transaction SPI implementation for JTA."}
{"index": 2390, "repo": "spring-batch-core-5.0.2", "code": "Package: flow\n\nSub Packages: \npackage flow.support; // Basic implementations of flow constructs\n\nClasses and Interfaces: \npublic interface Flow;\npublic class FlowExecution extends Object implements Comparable<FlowExecution>;\npublic class FlowExecutionException extends Exception;\npublic class FlowExecutionStatus extends Object implements Comparable<FlowExecutionStatus>; // Represents the status of FlowExecution.\npublic interface FlowExecutor; // Context and execution strategy for FlowJob to allow it to delegate its execution step by step.\npublic interface FlowHolder; // Convenient interface for components that contain nested flows.\npublic class FlowJob extends AbstractJob; // Implementation of the Job interface that allows for complex flows of steps, rather than requiring sequential execution.\npublic class FlowStep extends AbstractStep; // A Step implementation that delegates to a Flow.\n@FunctionalInterface public interface JobExecutionDecider; // Interface allowing for programmatic access to the decision on what the status of a flow should be.\npublic class JobFlowExecutor extends Object implements FlowExecutor; // Implementation of FlowExecutor for use in components that need to execute a flow related to a JobExecution.\npublic interface State;\n", "des": "Flow related constructs including Flow interface, executors, and related exceptions"}
{"index": 664, "repo": "commons-lang3-3.12.0", "code": "Package: builder\n\nClasses and Interfaces: \nInterface Builder<T>; // The Builder interface is designed to designate a class as a builder object in the Builder design pattern.\nInterface Diffable<T>; // Diffable classes can be compared with other objects for differences.\nClass CompareToBuilder; // Assists in implementing Comparable.compareTo(Object) methods.\nClass Diff<T>; // A Diff contains the differences between two Diffable class fields.\nClass DiffBuilder<T>; // Assists in implementing Diffable.diff(Object) methods.\nClass DiffResult<T>; // A DiffResult contains a collection of the differences between two Diffable objects.\nClass EqualsBuilder; // Assists in implementing Object.equals(Object) methods.\nClass HashCodeBuilder; // Assists in implementing Object.hashCode() methods.\nClass MultilineRecursiveToStringStyle; // Works with ToStringBuilder to create a \"deep\" toString.\nClass RecursiveToStringStyle; // Works with ToStringBuilder to create a \"deep\" toString.\nClass ReflectionDiffBuilder<T>; // Assists in implementing Diffable.diff(Object) methods.\nClass ReflectionToStringBuilder; // Assists in implementing Object.toString() methods using reflection.\nClass StandardToStringStyle; // Works with ToStringBuilder to create a toString.\nClass ToStringBuilder; // Assists in implementing Object.toString() methods.\nClass ToStringStyle; // Controls String formatting for ToStringBuilder.\nAnnotation Type EqualsExclude; // Use this annotation to exclude a field from being used by the various reflectionEquals methods defined on EqualsBuilder.\nAnnotation Type HashCodeExclude; // Use this annotation to exclude a field from being used by the various reflectionHashcode methods defined on HashCodeBuilder.\nAnnotation Type ToStringExclude; // Use this annotation to exclude a field from being used by the ReflectionToStringBuilder.\nAnnotation Type ToStringSummary; // Use this annotation on the fields to get the summary instead of the detailed information when using ReflectionToStringBuilder.\n", "des": "Assists in creating consistent equals(Object), toString(), hashCode(), and compareTo(Object) methods."}
{"index": 285, "repo": "pdfbox-3.0.0-beta1", "code": "Package: function\n\nSub Packages: \npackage function.type4; // This package contains Type 4 function support.\n\nClasses and Interfaces: \nClass PDFunction; // This class represents a function in a PDF document.\nClass PDFunctionType0; // This class represents a type 0 function in a PDF document.\nClass PDFunctionType2; // This class represents a Type 2 (exponential interpolation) function in a PDF document.\nClass PDFunctionType3; // This class represents a Type 3 (stitching) function in a PDF document.\nClass PDFunctionType4; // This class represents a Type 4 (PostScript calculator) function in a PDF document.\nClass PDFunctionTypeIdentity; // The identity function.\n", "des": "This package contains functions that are available in the PDF specification."}
{"index": 3631, "repo": "lucene-misc-9.7.0", "code": "Package: store\n\nClasses and Interfaces: \nClass ByteTrackingIndexOutput; // An IndexOutput that wraps another instance and tracks the number of bytes written\nClass ByteWritesTrackingDirectoryWrapper; // FilterDirectory that tracks write amplification factor\nClass DirectIODirectory; // A Directory implementation for all Unixes and Windows that uses DIRECT I/O to bypass OS level IO caching during merging.\nClass HardlinkCopyDirectoryWrapper; // This directory wrapper overrides Directory.copyFrom(Directory, String, String, IOContext) in order to optionally use a hard-link instead of a full byte by byte file copy if applicable.\nClass RAFDirectory; // A straightforward implementation of FSDirectory using java.io.RandomAccessFile.\n", "des": "Misc Directory implementations."}
{"index": 666, "repo": "commons-lang3-3.12.0", "code": "Package: concurrent\n\nSub Packages: \npackage concurrent.locks; // Provides support classes for multi-threaded programming.\n\nClasses and Interfaces: \nInterface CircuitBreaker<T>; // An interface describing a Circuit Breaker component.\nInterface Computable<I,O>; // Definition of an interface for a wrapper around a calculation that takes a single parameter and returns a result.\nInterface ConcurrentInitializer<T>; // Definition of an interface for the thread-safe initialization of objects.\nClass AbstractCircuitBreaker<T>; // Base class for circuit breakers.\nClass AtomicInitializer<T>; // A specialized implementation of the ConcurrentInitializer interface based on an AtomicReference variable.\nClass AtomicSafeInitializer<T>; // A specialized ConcurrentInitializer implementation which is similar to AtomicInitializer, but ensures that the AtomicSafeInitializer.initialize() method is called only once.\nClass BackgroundInitializer<T>; // A class that allows complex initialization operations in a background task.\nClass BasicThreadFactory; // An implementation of the ThreadFactory interface that provides some configuration options for the threads it creates.\nClass BasicThreadFactory.Builder; // A builder class for creating instances of BasicThreadFactory.\nClass CallableBackgroundInitializer<T>; // A specialized BackgroundInitializer implementation that wraps a Callable object.\nClass ConcurrentUtils; // An utility class providing functionality related to the java.util.concurrent package.\nClass ConstantInitializer<T>; // A very simple implementation of the ConcurrentInitializer interface which always returns the same object.\nClass EventCountCircuitBreaker; // A simple implementation of the Circuit Breaker pattern that counts specific events.\nClass LazyInitializer<T>; // This class provides a generic implementation of the lazy initialization pattern.\nClass Memoizer<I,O>; // Definition of an interface for a wrapper around a calculation that takes a single parameter and returns a result.\nClass MultiBackgroundInitializer; // A specialized BackgroundInitializer implementation that can deal with multiple background initialization tasks.\nClass MultiBackgroundInitializer.MultiBackgroundInitializerResults; // A data class for storing the results of the background initialization performed by MultiBackgroundInitializer.\nClass ThresholdCircuitBreaker; // A simple implementation of the Circuit Breaker pattern that opens if the requested increment amount is greater than a given threshold.\nClass TimedSemaphore; // A specialized semaphore implementation that provides a number of permits in a given time frame.\n", "des": "Provides support classes for multi-threaded programming."}
{"index": 3617, "repo": "solr-test-framework-9.3.0", "code": "Package: cloud\n\nClasses and Interfaces: \nClass AbstractBasicDistributedZk2TestBase; // This test simply does a bunch of basic things in solrcloud mode and asserts things work as expected.\nClass AbstractBasicDistributedZkTestBase; // This test simply does a bunch of basic things in solrcloud mode and asserts things work as expected.\nClass AbstractChaosMonkeyNothingIsSafeTestBase;\nClass AbstractChaosMonkeySafeLeaderTestBase;\nClass AbstractDigestZkACLAndCredentialsProvidersTestBase;\nClass AbstractDigestZkACLAndCredentialsProvidersTestBase.AllAndReadonlyCredentialZkCredentialsInjector;\nClass AbstractDigestZkACLAndCredentialsProvidersTestBase.AllCredentialZkCredentialsInjector;\nClass AbstractDigestZkACLAndCredentialsProvidersTestBase.ConnectWithReadonlyCredsInjector;\nClass AbstractDigestZkACLAndCredentialsProvidersTestBase.NoCredentialZkCredentialsInjector;\nClass AbstractDigestZkACLAndCredentialsProvidersTestBase.WrongAllCredentialZkCredentialsInjector;\nClass AbstractDistribZkTestBase;\nClass AbstractFullDistribZkTestBase; // TODO: we should still test this works as a custom update chain as well as what we test now - the default update chain\nClass AbstractFullDistribZkTestBase.CloudJettyRunner;\nClass AbstractFullDistribZkTestBase.CloudSolrServerClient;\nClass AbstractMoveReplicaTestBase;\nClass AbstractRecoveryZkTestBase;\nClass AbstractRestartWhileUpdatingTestBase;\nClass AbstractSyncSliceTestBase; // Test sync phase that occurs when Leader goes down and a new Leader is elected.\nClass AbstractTlogReplayBufferedWhileIndexingTestBase;\nClass AbstractUnloadDistributedZkTestBase; // This test simply does a bunch of basic things in solrcloud mode and asserts things work as expected.\nClass AbstractZkTestCase; // Base test class for ZooKeeper tests.\nClass ChaosMonkey; // The monkey can stop random or specific jetties used with SolrCloud.\nClass CloudInspectUtil;\nClass ConfigRequest; // A class for making a request to the config handler.\nClass IpTables; // To use, tests must be able to run iptables, eg sudo chmod u+s iptables\nClass MiniSolrCloudCluster; // \"Mini\" SolrCloud cluster to be used for testing\n", "des": "Base classes and utilities for creating and testing Solr Cloud clusters."}
{"index": 2639, "repo": "spring-integration-sftp-6.1.2", "code": "Package: inbound\n\nClasses and Interfaces: \npublic class SftpInboundFileSynchronizer extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Handles the synchronization between a remote SFTP directory and a local mount.\npublic class SftpInboundFileSynchronizingMessageSource extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizingMessageSource<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // A MessageSource implementation for SFTP that delegates to an InboundFileSynchronizer.\npublic class SftpStreamingMessageSource extends org.springframework.integration.file.remote.AbstractRemoteFileStreamingMessageSource<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Message source for streaming SFTP remote file contents.\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 966, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: version\n\nClasses and Interfaces: \nInterface AddressingVersion; // Defines the contract for a specific version of the WS-Addressing specification.\nClass AbstractAddressingVersion; // Abstract base class for AddressingVersion implementations.\nClass Addressing10; // Implements WS-Addressing 1.0 (May 2006).\nClass Addressing200408; // Implements the August 2004 edition of the WS-Addressing specification.\n", "des": "Contains abstractions over various versions of the WS-Addressing specification."}
{"index": 2842, "repo": "spring-integration-core-6.1.2", "code": "Package: annotation\n\nClasses and Interfaces: \n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(Aggregators.class) public @interface Aggregator; // Indicates that a method is capable of aggregating messages.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) public @interface Aggregators; // The repeatable container for Aggregator annotations.\npublic final class AnnotationConstants extends Object; // Common value constants for annotation attributes.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(BridgeFromRepeatable.class) public @interface BridgeFrom; // Messaging Annotation to mark a Bean method for a MessageChannel to produce a BridgeHandler and Consumer Endpoint.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) public @interface BridgeFromRepeatable; // The repeatable container for BridgeFrom annotations.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(BridgeToRepeatable.class) public @interface BridgeTo; // Messaging Annotation to mark a Bean method for a MessageChannel to produce a BridgeHandler and Consumer Endpoint.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) public @interface BridgeToRepeatable; // The repeatable container for BridgeTo annotations.\n@Retention(RUNTIME) @Target(METHOD) @Documented public @interface CorrelationStrategy; // Indicates that a given method is capable of determining the correlation key of a message sent as parameter.\n@Target({TYPE,FIELD,METHOD,PARAMETER,CONSTRUCTOR}) @Retention(RUNTIME) @Documented public @interface Default; // Indicates that the class member has some default meaning.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface EndpointId; // When used alongside an EIP annotation (and no @Bean), specifies the bean name of the consumer bean with the handler bean being id.handler (for a consuming endpoint) or id.source for a message source (e.g.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(Filters.class) public @interface Filter; // Indicates that a method is capable of playing the role of a Message Filter.\n", "des": "Provides annotations for annotation-based configuration."}
{"index": 3742, "repo": "lucene-queryparser-9.7.0", "code": "Package: config\n\nClasses and Interfaces: \nClass FieldBoostMapFCListener; // This listener listens for every field configuration request and assign a StandardQueryConfigHandler.ConfigurationKeys.BOOST to the equivalent FieldConfig based on a defined map: fieldName -> boostValue stored in StandardQueryConfigHandler.ConfigurationKeys.FIELD_BOOST_MAP.\nClass FieldDateResolutionFCListener; // This listener listens for every field configuration request and assign a StandardQueryConfigHandler.ConfigurationKeys.DATE_RESOLUTION to the equivalent FieldConfig based on a defined map: fieldName -> DateTools.Resolution stored in StandardQueryConfigHandler.ConfigurationKeys.FIELD_DATE_RESOLUTION_MAP.\nClass FuzzyConfig; // Configuration parameters for FuzzyQuerys\nClass NumberDateFormat; // This Format parses Long into date strings and vice-versa.\nClass PointsConfig; // This class holds the configuration used to parse numeric queries and create PointValues queries.\nClass PointsConfigListener; // This listener is used to listen to FieldConfig requests in QueryConfigHandler and add StandardQueryConfigHandler.ConfigurationKeys.POINTS_CONFIG based on the StandardQueryConfigHandler.ConfigurationKeys.POINTS_CONFIG_MAP set in the QueryConfigHandler.\nClass StandardQueryConfigHandler; // This query configuration handler is used for almost every processor defined in the StandardQueryNodeProcessorPipeline processor pipeline.\nClass StandardQueryConfigHandler.ConfigurationKeys; // Class holding keys for StandardQueryNodeProcessorPipeline options.\nEnum StandardQueryConfigHandler.Operator; // Boolean Operator: AND or OR\n", "des": "Standard Lucene Query Configuration."}
{"index": 663, "repo": "commons-lang3-3.12.0", "code": "Package: arch\n\nClasses and Interfaces: \nClass Processor; // The Processor represents a microprocessor and defines some properties like architecture and type of the microprocessor.\nEnum Processor.Arch; // The Processor.Arch enum defines the architecture of a microprocessor.\nEnum Processor.Type; // The Processor.Type enum defines types of a microprocessor.\n", "des": "Provides classes to work with the values of the os.arch system property."}
{"index": 3402, "repo": "commons-imaging-1.0-alpha3", "code": "Package: pnm\n\nClasses and Interfaces: \nClass PnmImageParser;\nClass PnmImagingParameters; // Pnm format parameters.\n", "des": "The PNM image format family."}
{"index": 3261, "repo": "opencms-core-15.0", "code": "Package: log\n\nClasses and Interfaces: \nClass CmsLogEntry; // Wrapper class for a DB log entry.\nClass CmsLogFilter; // A filter to retrieve log entries.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsLogEntryType; // Wrapper class for the different types of log entries.\n", "des": "This package contains the implementation classes for the DB log."}
{"index": 933, "repo": "commons-compress-1.23.0", "code": "Package: bytecode\n\nSub Packages: \npackage bytecode.forms; // Internal package.\n\nClasses and Interfaces: \nClass AnnotationDefaultAttribute; // AnnotationDefault class file attribute\nClass AnnotationsAttribute; // Abstract superclass for Annotations attributes\nClass AnnotationsAttribute.Annotation; // Class to represent the annotation structure for class file attributes\nClass AnnotationsAttribute.ElementValue;\nClass Attribute; // Abstract superclass for class file attributes\nClass BCIRenumberedAttribute; // Abstract superclass for attributes that have some part encoded with a BCI renumbering\nClass ByteCode; // A bytecode class file entry.\nClass ClassConstantPool; // The Class constant pool\nClass ClassFile; // ClassFile is used to represent and write out Java class files.\nClass ClassFileEntry; // The abstract superclass for all types of class file entries.\nClass CodeAttribute;\nClass ConstantPoolEntry; // Abstract superclass for constant pool entries\nClass ConstantValueAttribute; // An Attribute representing a constant.\nClass CPClass; // Constant pool entry for a class\nClass CPConstant; // Abstract superclass for constant pool constant entries such as numbers or Strings\nClass CPConstantNumber; // Abstract superclass for constant pool entries that are numbers.\nClass CPDouble; // Double constant pool entry.\nClass CPField; // Field constant pool entry.\nClass CPFieldRef; // Field reference constant pool entry.\nClass CPFloat; // Float constant pool entry.\nClass CPInteger; // Integer constant pool entry.\nClass CPInterfaceMethodRef; // Interface method reference constant pool entry.\nClass CPLong; // Long constant pool entry.\nClass CPMember; // Superclass for member constant pool entries, such as fields or methods.\nClass CPMethod; // Method constant pool entry.\nClass CPMethodRef; // Method reference constant pool entry.\nClass CPNameAndType; // Name and Type pair constant pool entry.\nClass CPRef; // Abstract superclass for reference constant pool entries, such as a method or field reference.\nClass CPString; // String constant pool entry.\nClass CPUTF8; // UTF8 constant pool entry, used for storing long Strings.\nClass DeprecatedAttribute; // Deprecated class file attribute.\nClass EnclosingMethodAttribute; // Enclosing method class file attribute.\nClass ExceptionsAttribute; // Exceptions class file attribute\nClass ExceptionTableEntry; // An entry in an exception table.\nClass InnerClassesAttribute; // Inner classes class file attribute\n", "des": "Internal package."}
{"index": 2784, "repo": "spring-expression-6.0.11", "code": "Package: expression\n\nSub Packages: \npackage expression.common; // Common utility classes behind the Spring Expression Language.\npackage expression.spel; // SpEL's central implementation package.\n\nClasses and Interfaces: \npublic class AccessException extends Exception; // An AccessException is thrown by an accessor if it has an unexpected problem.\npublic interface BeanResolver; // A bean resolver can be registered with the evaluation context and will kick in for bean references: @myBeanName and &myBeanName expressions.\npublic interface ConstructorExecutor; // Executors are built by resolvers and can be cached by the infrastructure to repeat an operation quickly without going back to the resolvers.\n@FunctionalInterface public interface ConstructorResolver; // A constructor resolver attempts to locate a constructor and returns a ConstructorExecutor that can be used to invoke that constructor.\npublic interface EvaluationContext; // Expressions are executed in an evaluation context.\npublic class EvaluationException extends ExpressionException; // Represent an exception that occurs during expression evaluation.\npublic interface Expression; // An expression capable of evaluating itself against context objects.\npublic class ExpressionException extends RuntimeException; // Superclass for exceptions that can occur whilst processing expressions.\npublic class ExpressionInvocationTargetException extends EvaluationException; // This exception wraps (as cause) a checked exception thrown by some method that SpEL invokes.\npublic interface ExpressionParser; // Parses expression strings into compiled expressions that can be evaluated.\npublic interface MethodExecutor; // MethodExecutors are built by the resolvers and can be cached by the infrastructure to repeat an operation quickly without going back to the resolvers.\n@FunctionalInterface public interface MethodFilter; // MethodFilter instances allow SpEL users to fine tune the behaviour of the method resolution process.\npublic interface MethodResolver; // A method resolver attempts to locate a method and returns a command executor that can be used to invoke that method.\npublic enum Operation extends Enum<Operation>; // Supported operations that an OperatorOverloader can implement for any pair of operands.\npublic interface OperatorOverloader; // By default the mathematical operators Operation support simple types like numbers.\npublic class ParseException extends ExpressionException; // Represent an exception that occurs during expression parsing.\npublic interface ParserContext; // Input provided to an expression parser that can influence an expression parsing/compilation routine.\npublic interface PropertyAccessor; // A property accessor is able to read from (and possibly write to) an object's properties.\n", "des": "Core abstractions behind the Spring Expression Language."}
{"index": 293, "repo": "pdfbox-3.0.0-beta1", "code": "Package: font\n\nClasses and Interfaces: \nInterface FontMapper; // Font mapper, locates non-embedded fonts.\nInterface PDFontLike; // A font-like object.\nInterface PDVectorFont; // A vector outline font, e.g.\nClass CIDFontMapping; // A CIDFontMapping is a kind of FontMapping which allows for an additional TrueTypeFont substitute to be provided if a CID font is not available.\nClass CIDSystemInfo; // Represents a CIDSystemInfo for the FontMapper API.\nClass FontCache; // An in-memory cache for system fonts.\nClass FontInfo; // Information about a font on the system.\nClass FontMappers; // FontMapper factory class.\nClass FontMapping<T extends org.apache.fontbox.FontBoxFont>; // A font mapping from a PDF font to a FontBox font.\nClass FontProvider; // External font service provider interface.\nClass PDCIDFont; // A CIDFont.\nClass PDCIDFontType0; // Type 0 CIDFont (CFF).\nClass PDCIDFontType2; // Type 2 CIDFont (TrueType).\nClass PDCIDSystemInfo; // Represents a CIDSystemInfo.\nClass PDFont; // This is the base class for all PDF fonts.\nClass PDFontDescriptor; // A font descriptor.\nClass PDFontFactory; // Creates the appropriate font subtype based on information in the dictionary.\nClass PDMMType1Font; // Type 1 Multiple Master Font.\nClass PDPanose; // Represents the \"Panose\" entry of a FontDescriptor's Style dictionary.\nClass PDPanoseClassification; // Represents a 10-byte PANOSE classification.\nClass PDSimpleFont; // A simple font.\nClass PDTrueTypeFont; // TrueType font.\nClass PDType0Font; // A Composite (Type 0) font.\nClass PDType1CFont; // Type 1-equivalent CFF font.\nClass PDType1Font; // A PostScript Type 1 Font.\nClass PDType3CharProc; // A Type 3 character procedure.\nClass PDType3Font; // A PostScript Type 3 Font.\nClass Standard14Fonts; // The \"Standard 14\" PDF fonts, also known as the \"base 14\" fonts.\n", "des": "Classes to deal with font functionality in a PDF Document."}
{"index": 417, "repo": "hadoop-azure-3.3.6", "code": "Package: extensions\n\nClasses and Interfaces: \nInterface BoundDTExtension; // An optional extension for custom extensions, so as to support tighter integration.\nInterface CustomDelegationTokenManager; // Interface for Managing the Delegation tokens.\nInterface CustomTokenProviderAdaptee; // This interface provides an extensibility model for customizing the acquisition of Azure Active Directory Access Tokens.\nInterface SASTokenProvider; // Interface to support SAS authorization.\nClass ExtensionHelper; // Classes to help with use of extensions, expecially those implementing @BoundDTExtension.\n", "des": "This package is for extension points under ABFS; There are no stability guarantees as these extension points are deep inside the ABFS implementation code."}
{"index": 2343, "repo": "spring-boot-3.1.1", "code": "Package: codec\n\nClasses and Interfaces: \n@FunctionalInterface public interface CodecCustomizer; // Callback interface that can be used to customize codecs configuration for an HTTP client and/or server with a CodecConfigurer.\n", "des": "Support for web-based codecs."}
{"index": 926, "repo": "commons-compress-1.23.0", "code": "Package: snappy\n\nClasses and Interfaces: \nClass FramedSnappyCompressorInputStream; // CompressorInputStream for the framing Snappy format.\nClass FramedSnappyCompressorOutputStream; // CompressorOutputStream for the framing Snappy format.\nClass SnappyCompressorInputStream; // CompressorInputStream for the raw Snappy format.\nClass SnappyCompressorOutputStream; // CompressorOutputStream for the raw Snappy format.\nEnum FramedSnappyDialect; // Dialects of the framing format that FramedSnappyCompressorInputStream can deal with.\n", "des": "Provides stream classes for the Snappy algorithm."}
{"index": 2435, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: servlet\n\nClasses and Interfaces: \n@ManagementContextConfiguration(proxyBeanMethods=false) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.springframework.web.servlet.DispatcherServlet.class) @ConditionalOnBean({org.springframework.web.servlet.DispatcherServlet.class,org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier.class}) @EnableConfigurationProperties(CorsEndpointProperties.class) public class WebMvcEndpointManagementContextConfiguration extends Object; // @ManagementContextConfiguration for Spring MVC @Endpoint concerns.\n", "des": "Auto-configuration for exposing actuator web endpoints using Spring MVC."}
{"index": 3830, "repo": "lucene-highlighter-9.7.0", "code": "Package: matchhighlight\n\nClasses and Interfaces: \nInterface MatchHighlighter.FieldValueHighlighter; // Actual per-field highlighter.\nInterface MatchRegionRetriever.FieldValueProvider; // An abstraction that provides document values for a given field.\nInterface MatchRegionRetriever.MatchOffsetsConsumer; // A callback for accepting a single document (and its associated leaf reader, leaf document ID) and its match offset ranges, as indicated by the Matches interface retrieved for the query.\nInterface OffsetsRetrievalStrategy; // Determines how match offset regions are computed from MatchesIterator.\nInterface OffsetsRetrievalStrategySupplier; // A per-field supplier of OffsetsRetrievalStrategy.\nInterface PassageAdjuster; // Adjusts the range of one or more passages over a given value.\nClass BreakIteratorShrinkingAdjuster; // A PassageAdjuster that adjusts the Passage range to word boundaries hinted by the given BreakIterator.\nClass FieldValueHighlighters; // A factory of MatchHighlighter.FieldValueHighlighter classes that cover typical use cases (verbatim values, highlights, abbreviations).\nClass MatchHighlighter; // An example highlighter that combines several lower-level highlighting utilities in this package into a fully featured, ready-to-use component.\nClass MatchHighlighter.DocHighlights; // Single document's highlights.\nClass MatchHighlighter.QueryOffsetRange; // An OffsetRange of a match, together with the source query that caused it.\nClass MatchRegionRetriever; // Utility class to compute a list of \"match regions\" for a given query, searcher and document(s) using Matches API.\nClass OffsetRange; // A non-empty range of offset positions.\nClass OffsetsFromMatchIterator; // This strategy retrieves offsets directly from MatchesIterator, if they are available, otherwise it falls back to using OffsetsFromPositions.\nClass OffsetsFromPositions; // This strategy applies to fields with stored positions but no offsets.\nClass OffsetsFromTokens; // This strategy works for fields where we know the match occurred but there are no known positions or offsets.\nClass OffsetsFromValues; // This strategy works for fields where we know the match occurred but there are no known positions or offsets.\nClass Passage; // A passage is a fragment of source text, scored and possibly with a list of sub-offsets (markers) to be highlighted.\n", "des": "This package contains several components useful to build a highlighter on top of the Matches API."}
{"index": 3450, "repo": "hibernate-core-5.6.15.Final", "code": "Package: jndi\n\nSub Packages: \npackage jndi.spi; // The SPI contracts for Hibernate JNDI support\n\nClasses and Interfaces: \nClass JndiException; // An exception indicating trouble accessing JNDI\nClass JndiNameException; // Indicates a problem with a given JNDI name being deemed as not valid.\n", "des": "Support for JNDI within Hibernate"}
{"index": 495, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: testing\n\nClasses and Interfaces: \nInterface FlattenWithHeterogeneousCoders; // Category tag for tests that use a Flatten where the input PCollectionList contains PCollections heterogeneous coders.\nInterface LargeKeys; // Category tags for tests which validate that a Beam runner can handle keys up to a given size.\nInterface LargeKeys.Above100KB; // Tests if a runner supports 100KB keys.\nInterface LargeKeys.Above100MB; // Tests if a runner supports 100MB keys.\nInterface LargeKeys.Above10KB; // Tests if a runner supports 10KB keys.\nInterface LargeKeys.Above10MB; // Tests if a runner supports 10MB keys.\nInterface LargeKeys.Above1MB; // Tests if a runner supports 1MB keys.\nInterface NeedsRunner; // Category tag for validation tests which utilize TestPipeline for execution and expect to be executed by a PipelineRunner.\nInterface PAssert.IterableAssert<T>; // Builder interface for assertions applicable to iterables and PCollection contents.\nInterface PAssert.SingletonAssert<T>; // Builder interface for assertions applicable to a single value.\nInterface SerializableMatcher<T>; // A Matcher that is also Serializable.\nInterface SerializableMatchers.SerializableSupplier<T>; // Supplies values of type T, and is serializable.\nInterface StreamingIT; // tests which use unbounded PCollections should be in the category UsesUnboundedPCollections.\nInterface TestPipeline.TestValueProviderOptions; // Implementation detail of TestPipeline.newProvider(T), do not use.\nInterface TestPipelineOptions; // TestPipelineOptions is a set of options for test pipelines.\nInterface TestStream.Event<T>; // An event in a TestStream.\nInterface UsesBoundedSplittableParDo; // Category tag for validation tests which utilize splittable ParDo with a DoFn.BoundedPerElement DoFn.\nInterface UsesBundleFinalizer; // Category tag for validation tests which use DoFn.BundleFinalizer.\nInterface UsesCommittedMetrics; // Category tag for validation tests which utilize Metrics.\nInterface UsesCustomWindowMerging; // Category tag for validation tests which utilize custom window merging.\nInterface UsesFailureMessage; // Category tag for tests which validate that currect failure message is provided by failed pipeline.\n", "des": "Defines utilities for unit testing Apache Beam pipelines."}
{"index": 2304, "repo": "spring-boot-3.1.1", "code": "Package: convert\n\nClasses and Interfaces: \npublic class ApplicationConversionService extends org.springframework.format.support.FormattingConversionService; // A specialization of FormattingConversionService configured by default with converters and formatters appropriate for most Spring Boot applications.\n@Target({FIELD,PARAMETER}) @Retention(RUNTIME) @Documented public @interface DataSizeUnit; // Annotation that can be used to change the default unit used when converting a DataSize.\n@Documented @Retention(RUNTIME) @Target({METHOD,FIELD,PARAMETER,ANNOTATION_TYPE}) public @interface Delimiter; // Declares a field or method parameter should be converted to collection using the specified delimiter.\n@Target({FIELD,PARAMETER}) @Retention(RUNTIME) @Documented public @interface DurationFormat; // Annotation that can be used to indicate the format to use when converting a Duration.\npublic enum DurationStyle extends Enum<DurationStyle>; // Duration format styles.\n@Target({FIELD,PARAMETER}) @Retention(RUNTIME) @Documented public @interface DurationUnit; // Annotation that can be used to change the default unit used when converting a Duration.\n@Target({FIELD,PARAMETER}) @Retention(RUNTIME) @Documented public @interface PeriodFormat; // Annotation that can be used to indicate the format to use when converting a Period.\npublic enum PeriodStyle extends Enum<PeriodStyle>; // A standard set of Period units.\n@Target({FIELD,PARAMETER}) @Retention(RUNTIME) @Documented public @interface PeriodUnit; // Annotation that can be used to change the default unit used when converting a Period.\n", "des": "Support for type conversion."}
{"index": 489, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: logicaltypes\n\nClasses and Interfaces: \nClass Date; // A date without a time-zone.\nClass DateTime; // A datetime without a time-zone.\nClass EnumerationType; // This Schema.LogicalType represent an enumeration over a fixed set of values.\nClass EnumerationType.Value; // This class represents a single enum value.\nClass FixedBytes; // A LogicalType representing a fixed-length byte array.\nClass FixedPrecisionNumeric; // Fixed precision numeric types used to represent jdbc NUMERIC and DECIMAL types.\nClass FixedString; // A LogicalType representing a fixed-length string.\nClass MicrosInstant; // A timestamp represented as microseconds since the epoch.\nClass NanosDuration; // A duration represented in nanoseconds.\nClass NanosInstant; // A timestamp represented as nanoseconds since the epoch.\nClass OneOfType; // A logical type representing a union of fields.\nClass OneOfType.Value; // Represents a single OneOf value.\nClass PassThroughLogicalType<T>; // A base class for LogicalTypes that use the same Java type as the underlying base type.\nClass PythonCallable; // A logical type for PythonCallableSource objects.\nClass SchemaLogicalType; // A schema represented as a serialized proto bytes.\nClass SqlTypes; // Beam Schema.LogicalTypes corresponding to SQL data types.\nClass Time; // A time without a time-zone.\nClass UnknownLogicalType<T>; // A base class for logical types that are not understood by the Java SDK.\nClass UuidLogicalType; // Base class for types representing UUID as two long values.\nClass VariableBytes; // A LogicalType representing a variable-length byte array with specified maximum length.\nClass VariableString; // A LogicalType representing a variable-length string with specified maximum length.\n", "des": "A set of common LogicalTypes for use with schemas."}
{"index": 2327, "repo": "spring-boot-3.1.1", "code": "Package: netty\n\nClasses and Interfaces: \npublic class NettyRSocketServer extends Object implements RSocketServer; // RSocketServer that is based on a Reactor Netty server.\npublic class NettyRSocketServerFactory extends Object implements RSocketServerFactory, ConfigurableRSocketServerFactory; // RSocketServerFactory that can be used to create RSocketServers backed by Netty.\n", "des": "Reactor Netty based RSocket server implementation."}
{"index": 314, "repo": "commons-geometry-enclosing-1.0-beta1", "code": "Package: twod\n\nClasses and Interfaces: \nClass DiskGenerator; // Class generating a disk from its support points.\nClass WelzlEncloser2D; // Extension of the WelzlEncloser class for Euclidean 2D space.\n", "des": "This package provides classes related to the smallest enclosing ball problem in two dimensions."}
{"index": 2868, "repo": "spring-integration-core-6.1.2", "code": "Package: leader\n\nSub Packages: \npackage leader.event; // Temporary package until s-c-c-core is released.\n\nClasses and Interfaces: \npublic abstract class AbstractCandidate extends Object implements Candidate; // Base implementation of a Candidate.\npublic interface Candidate; // Interface that defines the contract for candidates to participate in a leader election.\n@FunctionalInterface public interface Context; // Interface that defines the context for candidate leadership.\npublic class DefaultCandidate extends AbstractCandidate; // Simple Candidate for leadership.\n", "des": "Temporary package until s-c-c-core is released."}
{"index": 1157, "repo": "commons-math3-3.6.1", "code": "Package: filter\n\nClasses and Interfaces: \nInterface MeasurementModel; // Defines the measurement model for the use with a KalmanFilter.\nInterface ProcessModel; // Defines the process dynamics model for the use with a KalmanFilter.\nClass DefaultMeasurementModel; // Default implementation of a MeasurementModel for the use with a KalmanFilter.\nClass DefaultProcessModel; // Default implementation of a ProcessModel for the use with a KalmanFilter.\nClass KalmanFilter; // Implementation of a Kalman filter to estimate the state xk of a discrete-time controlled process that is governed by the linear stochastic difference equation:\n", "des": "Implementations of common discrete-time linear filters."}
{"index": 823, "repo": "calcite-core-1.34.0", "code": "Package: clone\n\nClasses and Interfaces: \nClass CloneSchema; // Schema that contains in-memory copies of tables from a JDBC schema.\nClass CloneSchema.Factory; // Schema factory that creates a CloneSchema.\n", "des": "Provides utility classes."}
{"index": 1389, "repo": "spring-boot-actuator-3.1.1", "code": "Package: jackson\n\nClasses and Interfaces: \npublic interface EndpointObjectMapper; // Interface used to supply the ObjectMapper that should be used when serializing OperationResponseBody endpoint results.\n", "des": "Jackson support classes for actuator endpoints."}
{"index": 706, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: file\n\nClasses and Interfaces: \nClass FileInboundChannelAdapterSpec; // A MessageSourceSpec for a FileReadingMessageSource.\nClass Files; // The Spring Integration File components Factory.\nClass FileSplitterSpec; // The MessageHandlerSpec for the FileSplitter.\nClass FileTransferringMessageHandlerSpec<F,S extends FileTransferringMessageHandlerSpec<F,S>>;\nClass FileWritingMessageHandlerSpec;\nClass RemoteFileInboundChannelAdapterSpec<F,S extends RemoteFileInboundChannelAdapterSpec<F,S,MS>,MS extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizingMessageSource<F>>; // A MessageSourceSpec for an AbstractInboundFileSynchronizingMessageSource.\nClass RemoteFileOutboundGatewaySpec<F,S extends RemoteFileOutboundGatewaySpec<F,S>>;\nClass TailAdapterSpec; // A MessageProducerSpec for file tailing adapters.\n", "des": "Provides File Components support for Spring Integration Java DSL."}
{"index": 174, "repo": "ignite-core-2.15.0", "code": "Package: tcp\n\nClasses and Interfaces: \nClass GridMemcachedMessage; // Memcached protocol request.\nClass GridTcpMemcachedNioListener; // Handles memcache requests.\nClass GridTcpRestNioListener; // Listener for nio server that handles incoming tcp rest packets.\nClass GridTcpRestParser; // Parser for extended memcache protocol.\nClass GridTcpRestParser.HeaderData; // Header.\nClass GridTcpRestParser.ParserState; // Holder for parser state and temporary buffer.\nClass GridTcpRestProtocol; // TCP binary protocol implementation.\nEnum GridClientPacketType; // Type of message being parsed.\n", "des": "Adapters for TCP-based REST protocols."}
{"index": 3212, "repo": "commons-configuration2-2.9.0", "code": "Package: beanutils\n\nClasses and Interfaces: \nInterface BeanCreationContext; // Definition of a context object storing all required information for the creation of a bean.\nInterface BeanDeclaration; // Definition of an interface for declaring a bean in a configuration file.\nInterface BeanFactory; // Definition of an interface for bean factories.\nClass BeanHelper; // A helper class for creating bean instances that are defined in configuration files.\nClass CombinedBeanDeclaration; // A special implementation of the BeanDeclaration interface which allows combining multiple BeanDeclaration objects.\nClass ConfigurationDynaBean; // The ConfigurationDynaBean dynamically reads and writes configurations properties from a wrapped configuration-collection Configuration instance.\nClass ConfigurationDynaClass; // The ConfigurationDynaClass dynamically determines properties for a ConfigurationDynaBean from a wrapped configuration-collection Configuration instance.\nClass ConstructorArg; // A class representing an argument for a constructor invocation to be used by a BeanDeclaration.\nClass DefaultBeanFactory; // The default implementation of the BeanFactory interface.\nClass XMLBeanDeclaration; // An implementation of the BeanDeclaration interface that is suitable for XML configuration files.\n", "des": "In this package a Configuration implementation can be found that implements the DynaBean interface."}
{"index": 2909, "repo": "spring-xml-4.0.5", "code": "Package: dom\n\nClasses and Interfaces: \npublic class DomContentHandler extends Object implements ContentHandler; // SAX ContentHandler that transforms callback calls to DOM Nodes.\n", "des": "Provides classes that help with DOM: the Document Object Model."}
{"index": 149, "repo": "ignite-core-2.15.0", "code": "Package: processors\n\nSub Packages: \npackage processors.affinity; // Data affinity processor.\npackage processors.cache; // This package contain cache-related processors & persistence implementation.\npackage processors.cacheobject; // Cache object processor.\npackage processors.closure; // TODO.\npackage processors.datastreamer; // Data streamer processor.\npackage processors.dr; // Data center replication processor.\npackage processors.failure; // Failure processor.\npackage processors.job; // TODO.\npackage processors.jobmetrics; // Job metrics.\npackage processors.port; // TODO.\npackage processors.resource; // TODO.\npackage processors.rest; // REST processor.\npackage processors.schedule; // TODO.\npackage processors.segmentation; // Segmentation processor.\npackage processors.session; // Session processing package to guarantee reuse of same session object on the same node.\npackage processors.task; // TODO.\npackage processors.timeout; // TODO.\n\nClasses and Interfaces: \nInterface GridProcessor; // Interface for all processors.\nClass GridProcessorAdapter; // Advanced parent adapter for all processor.\n", "des": "Package with Apache Ignite internal Processors."}
{"index": 1170, "repo": "commons-math3-3.6.1", "code": "Package: utilities\n\nClasses and Interfaces: \nClass AVLTree<T extends Comparable<T>>; // as of 3.4, this class is not used anymore and considered to be out of scope of Apache Commons Math\nClass OrderedTuple; // as of 3.4, this class is not used anymore and considered to be out of scope of Apache Commons Math\n", "des": "This package provides multidimensional ordering features for partitioning."}
{"index": 2599, "repo": "spring-rabbit-3.0.6", "code": "Package: micrometer\n\nClasses and Interfaces: \npublic enum RabbitListenerObservation extends Enum<RabbitListenerObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // Spring Rabbit Observation for listeners.\npublic static class RabbitListenerObservation.DefaultRabbitListenerObservationConvention extends Object implements RabbitListenerObservationConvention; // Default RabbitListenerObservationConvention for Rabbit listener key values.\npublic static enum RabbitListenerObservation.ListenerLowCardinalityTags extends Enum<RabbitListenerObservation.ListenerLowCardinalityTags> implements io.micrometer.common.docs.KeyName; // Low cardinality tags.\npublic interface RabbitListenerObservationConvention extends io.micrometer.observation.ObservationConvention<RabbitMessageReceiverContext>; // ObservationConvention for Rabbit listener key values.\npublic class RabbitMessageReceiverContext extends io.micrometer.observation.transport.ReceiverContext<org.springframework.amqp.core.Message>; // ReceiverContext for Messages.\npublic class RabbitMessageSenderContext extends io.micrometer.observation.transport.SenderContext<org.springframework.amqp.core.Message>; // SenderContext for Messages.\npublic enum RabbitTemplateObservation extends Enum<RabbitTemplateObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // Spring RabbitMQ Observation for RabbitTemplate.\npublic static class RabbitTemplateObservation.DefaultRabbitTemplateObservationConvention extends Object implements RabbitTemplateObservationConvention; // Default RabbitTemplateObservationConvention for Rabbit template key values.\npublic static enum RabbitTemplateObservation.TemplateLowCardinalityTags extends Enum<RabbitTemplateObservation.TemplateLowCardinalityTags> implements io.micrometer.common.docs.KeyName; // Low cardinality tags.\npublic interface RabbitTemplateObservationConvention extends io.micrometer.observation.ObservationConvention<RabbitMessageSenderContext>; // ObservationConvention for Rabbit template key values.\n", "des": "Provides classes for Micrometer support."}
{"index": 2540, "repo": "spring-security-core-6.1.2", "code": "Package: memory\n\nClasses and Interfaces: \npublic class UserAttribute extends Object; // Used by InMemoryUserDetailsManager to temporarily store the attributes associated with a user.\npublic class UserAttributeEditor extends PropertyEditorSupport; // Property editor that creates a UserAttribute from a comma separated list of values.\n", "des": "Exposes an in-memory authentication repository."}
{"index": 1608, "repo": "spring-data-neo4j-7.1.2", "code": "Package: core\n\nSub Packages: \npackage core.convert; // Provides a set of simples types that SDN supports.\npackage core.mapping; // The main mapping framework.\npackage core.schema; // This package contains the schema that is defined by a set of classes, representing nodes and relationships and their properties.\npackage core.support; // This package provides a couple of support classes that might be helpful in your domain, for example a predicate indicating that some transaction may be retried and additional converters and id generators.\npackage core.transaction; // Contains the core infrastructure for translating unmanaged Neo4j transaction into Spring managed transactions.\n\nClasses and Interfaces: \n@API(status=STABLE, since=\"6.0\") public final class DatabaseSelection extends Object; // A value holder indicating a database selection based on an optional name.\n@API(status=STABLE, since=\"6.0\") @FunctionalInterface public interface DatabaseSelectionProvider; // A provider interface that knows in which database repositories or either the reactive or imperative template should work.\n@API(status=STABLE, since=\"6.1\") public interface FluentFindOperation; // FluentFindOperation allows creation and execution of Neo4j find operations in a fluent API style.\npublic static interface FluentFindOperation.ExecutableFind<T> extends FluentFindOperation.FindWithProjection<T>; // Entry point for creating executable find operations.\npublic static interface FluentFindOperation.FindWithProjection<T> extends FluentFindOperation.FindWithQuery<T>; // Result type override (Optional).\npublic static interface FluentFindOperation.FindWithQuery<T> extends FluentFindOperation.TerminatingFindWithoutQuery<T>; // Terminating operations invoking the actual query execution.\npublic static interface FluentFindOperation.TerminatingFind<T> extends FluentFindOperation.TerminatingFindWithoutQuery<T>; // Triggers find execution by calling one of the terminating methods.\npublic static interface FluentFindOperation.TerminatingFindWithoutQuery<T>; // Trigger find execution by calling one of the terminating methods from a state where no query is yet defined.\n", "des": "This package contains the core infrastructure for creating an imperative or reactive client that can execute queries."}
{"index": 1713, "repo": "spring-boot-test-3.1.1", "code": "Package: web\n\nClasses and Interfaces: \npublic class SpringBootMockServletContext extends org.springframework.mock.web.MockServletContext; // MockServletContext implementation for Spring Boot.\n", "des": "Mock web classes specific to Spring Boot."}
{"index": 1442, "repo": "spring-data-redis-3.1.2", "code": "Package: redis\n\nSub Packages: \npackage redis.cache; // Package providing a Redis implementation for Spring cache abstraction.\npackage redis.connection; // Connection package providing low-level abstractions for interacting with the various Redis 'drivers'/libraries.\npackage redis.core; // Core package for integrating Redis with Spring concepts.\npackage redis.hash; // Dedicated support package for Redis hashes.\npackage redis.listener; // Base package for Redis message listener / pubsub container facility\npackage redis.serializer; // Serialization/Deserialization package for converting Object to (and from) binary data.\npackage redis.util; // Commonly used stuff for data manipulation throughout different driver specific implementations.\n\nClasses and Interfaces: \npublic class ClusterRedirectException extends DataRetrievalFailureException; // ClusterRedirectException indicates that a requested slot is not served by the targeted server but can be obtained on another one.\npublic class ClusterStateFailureException extends DataAccessResourceFailureException; // DataAccessResourceFailureException indicating the current local snapshot of cluster state does no longer represent the actual remote state.\npublic interface ExceptionTranslationStrategy; // Potentially translates an Exception into appropriate DataAccessException.\npublic class FallbackExceptionTranslationStrategy extends PassThroughExceptionTranslationStrategy; // FallbackExceptionTranslationStrategy returns RedisSystemException for unknown Exceptions.\npublic class PassThroughExceptionTranslationStrategy extends Object implements ExceptionTranslationStrategy; // PassThroughExceptionTranslationStrategy returns null for unknown Exceptions.\npublic class RedisConnectionFailureException extends DataAccessResourceFailureException; // Fatal exception thrown when the Redis connection fails completely.\npublic class RedisSystemException extends UncategorizedDataAccessException; // Exception thrown when we can't classify a Redis exception into one of Spring generic data access exceptions.\npublic class TooManyClusterRedirectionsException extends DataRetrievalFailureException; // DataRetrievalFailureException thrown when following cluster redirects exceeds the max number of edges.\n", "des": "Root package for integrating Redis with Spring concepts."}
{"index": 1720, "repo": "spring-boot-test-3.1.1", "code": "Package: server\n\nClasses and Interfaces: \n@FunctionalInterface public interface WebTestClientBuilderCustomizer; // A customizer for a WebTestClient.Builder.\n", "des": "Spring Boot support for testing Spring WebFlux server endpoints via WebTestClient."}
{"index": 3061, "repo": "spring-ws-core-4.0.5", "code": "Package: dom\n\nClasses and Interfaces: \npublic class DomPoxMessage extends Object implements PoxMessage; // Implementation of the PoxMessage interface that is based on a DOM Document.\npublic class DomPoxMessageException extends PoxMessageException; // Specific subclass of PoxMessageException for DOM Plain Old XML messages.\npublic class DomPoxMessageFactory extends org.springframework.xml.transform.TransformerObjectSupport implements WebServiceMessageFactory; // Implementation of the WebServiceMessageFactory interface that creates a DomPoxMessage.\n", "des": "Contains an implementation of the POX interfaces that is based on DOM."}
{"index": 2553, "repo": "pulsar-common-3.0.0", "code": "Package: io\n\nClasses and Interfaces: \npublic class ConfigFieldDefinition extends Object; // Information about a Pulsar connector config field.\n", "des": "Configuration classes for IO."}
{"index": 3896, "repo": "solr-solrj-9.3.0", "code": "Package: api\n\nClasses and Interfaces: \nInterface CollectionConfig;\nInterface HashRange; // A range of hash that is stored in a shard\nInterface Resource; // A binary resource.\nInterface Resource.Consumer;\nInterface Router; // identify shards for a given routing key or document id\nInterface Shard; // A shard of a collection\nInterface ShardReplica; // replica of a shard\nInterface SimpleMap<T>; // A simplified read-only key-value structure.\nInterface SolrCluster; // Represents a Solr cluster\nInterface SolrCollection; // Represents a collection in Solr\nInterface SolrNode; // A read only view of a Solr node\nEnum ApiType; // Types of API calls\n", "des": "API interfaces for core SolrCloud classes"}
{"index": 3163, "repo": "tika-core-2.8.0", "code": "Package: xpath\n\nClasses and Interfaces: \nClass AttributeMatcher; // Final evaluation state of a .../@* XPath expression.\nClass ChildMatcher; // Intermediate evaluation state of a .../*... XPath expression.\nClass CompositeMatcher; // Composite XPath evaluation state.\nClass ElementMatcher; // Final evaluation state of an XPath expression that targets an element.\nClass Matcher; // XPath element matcher.\nClass MatchingContentHandler; // Content handler decorator that only passes the elements, attributes, and text nodes that match the given XPath expression.\nClass NamedAttributeMatcher; // Final evaluation state of a .../@name XPath expression.\nClass NamedElementMatcher; // Intermediate evaluation state of a .../name... XPath expression.\nClass NodeMatcher; // Final evaluation state of a .../node() XPath expression.\nClass SubtreeMatcher; // Evaluation state of a ...//... XPath expression.\nClass TextMatcher; // Final evaluation state of a .../text() XPath expression.\nClass XPathParser; // Parser for a very simple XPath subset.\n", "des": "XPath utilities"}
{"index": 891, "repo": "commons-jcs3-core-3.1", "code": "Package: access\n\nClasses and Interfaces: \nClass AbstractCacheAccess<K,V>; // This class provides the common methods for all types of access to the cache.\nClass CacheAccess<K,V>; // This class provides an interface for all types of access to the cache.\nClass GroupCacheAccess<K,V>; // Access for groups.\n", "des": "Contains classes for accessing the cache."}
{"index": 2582, "repo": "camel-api-4.0.0-RC1", "code": "Package: service\n\nClasses and Interfaces: \npublic abstract class BaseService extends Object; // A useful base class which ensures that a service is only initialized once and provides some helper methods for enquiring of its status.\npublic final class ServiceHelper extends Object; // A collection of helper methods for working with Service objects.\npublic abstract class ServiceSupport extends BaseService implements StatefulService; // A useful base class which ensures that a service is only initialized once and provides some helper methods for enquiring of its status.\n", "des": "Base service classes"}
{"index": 1817, "repo": "spring-integration-mail-6.1.2", "code": "Package: event\n\nClasses and Interfaces: \npublic abstract class MailIntegrationEvent extends org.springframework.integration.events.IntegrationEvent;\n", "des": "Events generated by the mail module"}
{"index": 2455, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: appoptics\n\nClasses and Interfaces: \n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.appoptics.AppOpticsMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"appoptics\") @EnableConfigurationProperties(AppOpticsProperties.class) public class AppOpticsMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to AppOptics.\n@ConfigurationProperties(prefix=\"management.appoptics.metrics.export\") public class AppOpticsProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring AppOptics metrics export.\n", "des": "Support for exporting actuator metrics to AppOptics."}
{"index": 722, "repo": "commons-codec-1.16.0", "code": "Package: language\n\nSub Packages: \npackage language.bm; // Implementation details of the Beider-Morse codec.\n\nClasses and Interfaces: \nClass AbstractCaverphone; // Encodes a string into a Caverphone value.\nClass Caverphone; // 1.5 Replaced by Caverphone2, will be removed in 2.0.\nClass Caverphone1; // Encodes a string into a Caverphone 1.0 value.\nClass Caverphone2; // Encodes a string into a Caverphone 2.0 value.\nClass ColognePhonetic; // Encodes a string into a Cologne Phonetic value.\nClass DaitchMokotoffSoundex; // Encodes a string into a Daitch-Mokotoff Soundex value.\nClass DoubleMetaphone; // Encodes a string into a double metaphone value.\nClass MatchRatingApproachEncoder; // Match Rating Approach Phonetic Algorithm Developed by Western Airlines in 1977.\nClass Metaphone; // Encodes a string into a Metaphone value.\nClass Nysiis; // Encodes a string into a NYSIIS value.\nClass RefinedSoundex; // Encodes a string into a Refined Soundex value.\nClass Soundex; // Encodes a string into a Soundex value.\n", "des": "Language and phonetic encoders."}
{"index": 2470, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: signalfx\n\nClasses and Interfaces: \n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.signalfx.SignalFxMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"signalfx\") @EnableConfigurationProperties(SignalFxProperties.class) public class SignalFxMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to SignalFX.\n@ConfigurationProperties(prefix=\"management.signalfx.metrics.export\") public class SignalFxProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring metrics export to SignalFX.\npublic class SignalFxPropertiesConfigAdapter extends StepRegistryPropertiesConfigAdapter<SignalFxProperties> implements io.micrometer.signalfx.SignalFxConfig; // Adapter to convert SignalFxProperties to a SignalFxConfig.\n", "des": "Support for exporting actuator metrics to SignalFX."}
{"index": 3337, "repo": "opencms-core-15.0", "code": "Package: sessions\n\nClasses and Interfaces: \nClass CmsBroadCastConfigurtion; // Configuration class of app.\nClass CmsEditLoginView; // Class for the Edit Login View.\nClass CmsKillSessionDialog; // Class for the dialog to kill sessions.\nClass CmsSendBroadcastDialog; // Class for the dialiog to send broadcasts.\nClass CmsSessionsApp; // Class for the broadcast app.\nClass CmsSessionsTable; // Class for the table to show all current sessions.\nClass CmsUserInfoDialog; // Dialog to show user information and to switch to user session.\n", "des": "Contains classes of the site manager app."}
{"index": 2590, "repo": "spring-rabbit-3.0.6", "code": "Package: listener\n\nSub Packages: \npackage listener.adapter; // Provides classes for adapting listeners.\npackage listener.api; // Provides Additional APIs for listeners.\npackage listener.exception; // Provides classes for listener exceptions.\npackage listener.support; // Provides support classes for listeners.\n\nClasses and Interfaces: \npublic abstract class AbstractMessageListenerContainer extends ObservableListenerContainer implements org.springframework.context.ApplicationEventPublisherAware;\n@FunctionalInterface public static interface AbstractMessageListenerContainer.JavaLangErrorHandler; // A handler for Error on the container thread(s).\npublic static class AbstractMessageListenerContainer.SharedConnectionNotInitializedException extends RuntimeException; // Exception that indicates that the initial setup of this container's shared Rabbit Connection failed.\nprotected static final class AbstractMessageListenerContainer.WrappedTransactionException extends RuntimeException; // A runtime exception to wrap a Throwable.\npublic abstract class AbstractRabbitListenerEndpoint extends Object implements RabbitListenerEndpoint, org.springframework.beans.factory.BeanFactoryAware; // Base model for a Rabbit listener endpoint.\npublic class AsyncConsumerRestartedEvent extends org.springframework.amqp.event.AmqpEvent; // An event that is published whenever a consumer is restarted.\npublic class AsyncConsumerStartedEvent extends org.springframework.amqp.event.AmqpEvent; // An event that is published whenever a new consumer is started.\npublic class AsyncConsumerStoppedEvent extends org.springframework.amqp.event.AmqpEvent; // An event that is published whenever a consumer is stopped (and not restarted).\npublic class BlockingQueueConsumer extends Object; // Specialized consumer encapsulating knowledge of the broker connections and having its own lifecycle (start and stop).\npublic class ConditionalRejectingErrorHandler extends Object implements org.springframework.util.ErrorHandler; // ErrorHandler that conditionally wraps the Exception in an AmqpRejectAndDontRequeueException if the configured rejection strategy determines that the message is fatal and should not be requeued.\npublic static class ConditionalRejectingErrorHandler.DefaultExceptionStrategy extends Object implements FatalExceptionStrategy; // Default implementation of FatalExceptionStrategy.\npublic class ConsumeOkEvent extends org.springframework.amqp.event.AmqpEvent; // An AmqpEvent emitted by the listener container when consumer is subscribed to the queue.\n", "des": "Provides classes for message listener containers."}
{"index": 2631, "repo": "shiro-web-2.0.0-alpha-2", "code": "Package: session\n\nClasses and Interfaces: \npublic class HttpServletSession extends Object implements org.apache.shiro.session.Session; // Session implementation that is backed entirely by a standard servlet container HttpSession instance.\n", "des": "Components supporting Session management in web-enabled applications."}
{"index": 309, "repo": "pdfbox-3.0.0-beta1", "code": "Package: pagenavigation\n\nClasses and Interfaces: \nClass PDThread; // This a single thread in a PDF document.\nClass PDThreadBead; // This a single bead in a thread in a PDF document.\nClass PDTransition; // Represents a page transition as defined in paragraph 12.4.4.1 of PDF 32000-1:2008\nEnum PDTransitionDimension; // The dimension in which the specified transition effect shall occur.\nEnum PDTransitionDirection; // The direction in which the specified transition effect shall moves, expressed in degrees counterclockwise starting from a left-to-right direction.\nEnum PDTransitionMotion; // The direction of motion for the specified transition effect.\nEnum PDTransitionStyle; // The transition style that shall be used when moving to the page from another during a presentation.\n", "des": "A package to allow provide access to PDF page navigation functionality."}
{"index": 46, "repo": "ignite-core-2.15.0", "code": "Package: cache\n\nSub Packages: \npackage cache.affinity; // Contains cache node affinity implementations.\npackage cache.eviction; // Contains cache eviction policy implementations.\npackage cache.query; // Contains APIs for creating and executing cache queries.\npackage cache.store; // Contains cache store interfaces.\n\nClasses and Interfaces: \nInterface CacheEntry<K,V>; // Cache entry that extends Cache.Entry by providing additional entry related information.\nInterface CacheEntryEventSerializableFilter<K,V>; // This filter adds Serializable interface to CacheEntryEventFilter object.\nInterface CacheEntryProcessor<K,V,T>; // This processor adds Serializable interface to EntryProcessor object.\nInterface CacheEntryVersion; // Entry event order.\nInterface CacheInterceptor<K,V>; // Cache interceptor.\nInterface CacheMetrics; // Cache metrics used to obtain statistics on cache itself.\nClass CacheInterceptorAdapter<K,V>; // Cache interceptor convenience adapter.\nClass CacheInterceptorEntry<K,V>; // A cache interceptor map entry.\nClass CacheKeyConfiguration; // Configuration defining various aspects of cache keys without explicit usage of annotations on user classes.\nClass CacheManager; // Implementation of JSR-107 CacheManager.\nClass CachingProvider; // Implementation of JSR-107 CachingProvider.\nClass QueryEntity; // Query entity is a description of cache entry (composed of key and value) in a way of how it must be indexed and can be queried.\nClass QueryEntityPatch; // Query entity patch which contain SchemaAbstractOperation operations for changing query entity.\nClass QueryIndex; // Contains list of fields to be indexed.\nEnum CacheAtomicityMode; // Cache atomicity mode controls whether cache should maintain fully transactional semantics or more light-weight atomic behavior.\nEnum CacheMode; // Enumeration of all supported caching modes.\nEnum CachePeekMode; // Enumeration of all supported cache peek modes.\nEnum CacheRebalanceMode; // Cache rebalance mode.\nEnum CacheWriteSynchronizationMode; // Mode indicating how Ignite should wait for write replies from other nodes.\nEnum PartitionLossPolicy; // Partition loss policy.\nEnum QueryIndexType; // Index type.\nEnum ReadRepairStrategy; // Read repair strategies.\nClass CacheExistsException; // Exception thrown when cache must be created but it already exists.\n", "des": "Contains main Data Grid APIs."}
{"index": 2859, "repo": "spring-integration-core-6.1.2", "code": "Package: expression\n\nClasses and Interfaces: \npublic class ControlBusMethodFilter extends Object implements org.springframework.expression.MethodFilter; // SpEL MethodFilter to restrict method invocations to: Pausable or Lifecycle components get, set and shutdown methods of CustomizableThreadCreator methods with ManagedAttribute and ManagedOperation annotations This class isn't designed for target applications and typically is used from ExpressionControlBusFactoryBean.\npublic class DynamicExpression extends Object implements org.springframework.expression.Expression; // An implementation of Expression that delegates to an ExpressionSource for resolving the actual Expression instance per-invocation at runtime.\npublic final class ExpressionEvalMap extends AbstractMap<String,Object>; // An immutable AbstractMap implementation that wraps a Map<String, Object>, where values must be instances of String or Expression, and evaluates an expression for the provided key from the underlying original Map.\npublic static class ExpressionEvalMap.ComponentsEvaluationCallback extends Object implements ExpressionEvalMap.EvaluationCallback; // The ExpressionEvalMap.EvaluationCallback implementation which evaluates an expression using the provided context, root and returnType variables.\n@FunctionalInterface public static interface ExpressionEvalMap.EvaluationCallback; // Implementations of this interface can be provided to build 'on demand ExpressionEvalMap.get(Object) logic' for ExpressionEvalMap.\npublic static final class ExpressionEvalMap.ExpressionEvalMapBuilder extends Object; // The builder class to instantiate ExpressionEvalMap.\npublic static interface ExpressionEvalMap.ExpressionEvalMapComponentsBuilder extends ExpressionEvalMap.ExpressionEvalMapFinalBuilder;\n@FunctionalInterface public static interface ExpressionEvalMap.ExpressionEvalMapFinalBuilder;\n@FunctionalInterface public interface ExpressionSource; // Strategy interface for retrieving Expressions.\npublic final class ExpressionUtils extends Object; // Utility class with static methods for helping with evaluation of SpEL expressions.\npublic class FunctionExpression<S> extends Object implements org.springframework.expression.Expression; // An Expression that simply invokes Function.apply(Object) on its provided Function.\npublic class ReloadableResourceBundleExpressionSource extends Object implements ExpressionSource, org.springframework.context.ResourceLoaderAware; // ExpressionSource implementation that accesses resource bundles using specified basenames.\npublic class SpelPropertyAccessorRegistrar extends Object; // Utility class that keeps track of a Set of SpEL PropertyAccessors in order to register them with the \"integrationEvaluationContext\" upon initialization.\n", "des": "Provides classes supporting SpEL expressions."}
{"index": 2423, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: couchbase\n\nClasses and Interfaces: \n@AutoConfiguration(after={org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration.class,CouchbaseReactiveHealthContributorAutoConfiguration.class}) @ConditionalOnClass(com.couchbase.client.java.Cluster.class) @ConditionalOnBean(com.couchbase.client.java.Cluster.class) @ConditionalOnEnabledHealthIndicator(\"couchbase\") public class CouchbaseHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.couchbase.CouchbaseHealthIndicator,com.couchbase.client.java.Cluster>; // Auto-configuration for CouchbaseHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration.class) @ConditionalOnClass({com.couchbase.client.java.Cluster.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(com.couchbase.client.java.Cluster.class) @ConditionalOnEnabledHealthIndicator(\"couchbase\") public class CouchbaseReactiveHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.couchbase.CouchbaseReactiveHealthIndicator,com.couchbase.client.java.Cluster>; // Auto-configuration for CouchbaseReactiveHealthIndicator.\n", "des": "Auto-configuration for actuator Couchbase concerns."}
{"index": 2350, "repo": "spring-boot-3.1.1", "code": "Package: context\n\nClasses and Interfaces: \npublic class AnnotationConfigReactiveWebApplicationContext extends org.springframework.context.annotation.AnnotationConfigApplicationContext implements ConfigurableReactiveWebApplicationContext; // ConfigurableReactiveWebApplicationContext that accepts annotated classes as input - in particular @Configuration-annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations.\npublic class AnnotationConfigReactiveWebServerApplicationContext extends ReactiveWebServerApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry; // ReactiveWebServerApplicationContext that accepts annotated classes as input - in particular @Configuration-annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations.\npublic interface ConfigurableReactiveWebApplicationContext extends org.springframework.context.ConfigurableApplicationContext, ReactiveWebApplicationContext; // Interface to provide configuration for a reactive web application.\npublic interface ConfigurableReactiveWebEnvironment extends org.springframework.core.env.ConfigurableEnvironment; // Specialization of ConfigurableEnvironment for reactive application contexts.\npublic class GenericReactiveWebApplicationContext extends org.springframework.context.support.GenericApplicationContext implements ConfigurableReactiveWebApplicationContext; // Subclass of GenericApplicationContext, suitable for reactive web environments.\npublic interface ReactiveWebApplicationContext extends org.springframework.context.ApplicationContext; // Interface to provide configuration for a reactive web application.\npublic class ReactiveWebServerApplicationContext extends GenericReactiveWebApplicationContext implements ConfigurableWebServerApplicationContext; // A GenericReactiveWebApplicationContext that can be used to bootstrap itself from a contained ReactiveWebServerFactory bean.\npublic class ReactiveWebServerInitializedEvent extends WebServerInitializedEvent; // Event to be published after the WebServer is ready.\npublic class StandardReactiveWebEnvironment extends org.springframework.core.env.StandardEnvironment implements ConfigurableReactiveWebEnvironment; // Environment implementation to be used by Reactive-based web applications.\n", "des": "Reactive based web integrations with Spring's ApplicationContext."}
{"index": 2899, "repo": "spring-integration-amqp-6.1.2", "code": "Package: inbound\n\nClasses and Interfaces: \npublic class AmqpInboundChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.integration.context.OrderlyShutdownCapable; // Adapter that receives Messages from an AMQP Queue, converts them into Spring Integration Messages, and sends the results to a Message Channel.\npublic static enum AmqpInboundChannelAdapter.BatchMode extends Enum<AmqpInboundChannelAdapter.BatchMode>; // Defines the payload type when the listener container is configured with consumerBatchEnabled.\npublic class AmqpInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport; // Adapter that receives Messages from an AMQP Queue, converts them into Spring Integration Messages, and sends the results to a Message Channel.\npublic class AmqpMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<Object>; // A pollable MessageSource for RabbitMQ.\npublic static class AmqpMessageSource.AmqpAckCallback extends Object implements org.springframework.integration.acks.AcknowledgmentCallback;\npublic static class AmqpMessageSource.AmqpAckCallbackFactory extends Object implements org.springframework.integration.acks.AcknowledgmentCallbackFactory<AmqpMessageSource.AmqpAckInfo>;\npublic static class AmqpMessageSource.AmqpAckInfo extends Object; // Information for building an AmqpAckCallback.\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 2496, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: servlet\n\nClasses and Interfaces: \npublic final class EndpointRequest extends Object; // Factory that can be used to create a RequestMatcher for actuator endpoint locations.\npublic static final class EndpointRequest.EndpointRequestMatcher extends org.springframework.boot.security.servlet.ApplicationContextRequestMatcher<org.springframework.web.context.WebApplicationContext>; // The request matcher used to match against actuator endpoints.\npublic static final class EndpointRequest.LinksRequestMatcher extends org.springframework.boot.security.servlet.ApplicationContextRequestMatcher<org.springframework.web.context.WebApplicationContext>; // The request matcher used to match against the links endpoint.\n@AutoConfiguration(before=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration.class, after={HealthEndpointAutoConfiguration.class,InfoEndpointAutoConfiguration.class,WebEndpointAutoConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration.class,org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration.class}) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnDefaultWebSecurity public class ManagementWebSecurityAutoConfiguration extends Object; // Auto-configuration for Spring Security when actuator is on the classpath.\n@ManagementContextConfiguration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.security.web.util.matcher.RequestMatcher.class) @ConditionalOnWebApplication(type=SERVLET) public class SecurityRequestMatchersManagementContextConfiguration extends Object; // ManagementContextConfiguration that configures the appropriate RequestMatcherProvider.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.glassfish.jersey.server.ResourceConfig.class) @ConditionalOnMissingClass(\"org.springframework.web.servlet.DispatcherServlet\") @ConditionalOnBean(org.springframework.boot.autoconfigure.web.servlet.JerseyApplicationPath.class) public static class SecurityRequestMatchersManagementContextConfiguration.JerseyRequestMatcherConfiguration extends Object;\n", "des": "Auto-configuration for actuator security using Spring MVC."}
{"index": 942, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: support\n\nSub Packages: \npackage support.destination; // Provides the DestinationProvider interface.\npackage support.interceptor; // Provides the ClientInterceptor interface, and validating interceptors.\n\nClasses and Interfaces: \nClass WebServiceAccessor; // Base class for WebServiceTemplate and other WS-accessing helpers.\n", "des": "Classes supporting the org.springframework.ws.client.core package."}
{"index": 2396, "repo": "spring-batch-core-5.0.2", "code": "Package: observability\n\nClasses and Interfaces: \npublic class BatchJobContext extends io.micrometer.observation.Observation.Context implements Supplier<BatchJobContext>; // Observation context for batch jobs.\npublic enum BatchJobObservation extends Enum<BatchJobObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // Observation created around a Job execution.\npublic interface BatchJobObservationConvention extends io.micrometer.observation.ObservationConvention<BatchJobContext>; // ObservationConvention for BatchJobContext.\npublic final class BatchMetrics extends Object; // Central class for batch metrics.\npublic class BatchStepContext extends io.micrometer.observation.Observation.Context implements Supplier<BatchStepContext>; // Observation context for batch steps.\npublic enum BatchStepObservation extends Enum<BatchStepObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // Observation created around a step execution.\npublic interface BatchStepObservationConvention extends io.micrometer.observation.ObservationConvention<BatchStepContext>; // ObservationConvention for BatchStepContext.\npublic class DefaultBatchJobObservationConvention extends Object implements BatchJobObservationConvention; // Default BatchJobObservationConvention implementation.\npublic class DefaultBatchStepObservationConvention extends Object implements BatchStepObservationConvention; // Default BatchStepObservationConvention implementation.\n", "des": "This package contains APIs related to batch observability."}
{"index": 3469, "repo": "poi-ooxml-5.2.3", "code": "Package: binary\n\nClasses and Interfaces: \nInterface XSSFBSheetHandler.SheetContentsHandler; // You need to implement this to handle the results of the sheet parsing.\nClass XSSFBCommentsTable;\nClass XSSFBHyperlinksTable;\nClass XSSFBParser; // Experimental parser for Microsoft's ooxml xlsb format.\nClass XSSFBRelation; // Need to have this mirror class of XSSFRelation because of conflicts with regular ooxml relations.\nClass XSSFBSharedStringsTable;\nClass XSSFBSheetHandler;\nClass XSSFBStylesTable; // This is a very thin shim to gather number formats from styles.bin files.\nClass XSSFBUtils;\nClass XSSFHyperlinkRecord; // This is a read only record that maintains information about a hyperlink.\nEnum XSSFBRecordType;\nClass XSSFBParseException; // Parse exception while reading an xssfb.\n", "des": "The org.apache.poi.xssf.binary package includes necessary underlying components for streaming/read-only processing of xlsb files."}
{"index": 396, "repo": "amqp-client-5.18.0", "code": "Package: json\n\nClasses and Interfaces: \nInterface JSONSerializable; // Use a third-party JSON library, e.g.\nClass JSONReader; // Use a third-party JSON library, e.g.\nClass JSONUtil; // Utility methods for working with JSON objects in Java.\nClass JSONWriter; // Use a third-party JSON library, e.g.\n", "des": "JSON reader/writer and utility classes."}
{"index": 3255, "repo": "opencms-core-15.0", "code": "Package: preferences\n\nClasses and Interfaces: \nInterface I_CmsPreference; // Interface describing a single preference value which can possibly be edited by the user.\nClass A_CmsPreference; // Abstract superclass for preferences.\nClass CmsBuiltinPreference; // Preference subclass for built-in preferences accessed with a getter/setter pair via reflection.\nClass CmsBuiltinPreference.SelectOptions; // A bean representing a set of select options.\nClass CmsEditorPreference; // Preference subclass for preferred editors.\nClass CmsElementViewPreference; // Element view preference configuration.\nClass CmsExplorerElementViewPreference; // Explorer element view preference.\nClass CmsGalleryShowInvalidDefaultPreference; // Class for the preference which controls whether invalid elements should be shown by default in the gallery result tab.\nClass CmsHiddenBuiltinPreference; // Class for preferences that are not meant to be displayed in the preference dialog.\nClass CmsLanguagePreference; // Workplace locale preference.\nClass CmsPreferenceData; // Bean representing the configurable attributes for a preference.\nClass CmsProjectPreference; // Preference subclass for selecting the start project.\nClass CmsSitePreference; // Preference for the start site.\nClass CmsStartFolderPreference; // Preference for the start folder.\nClass CmsStartGallleryPreference; // Start gallery preference.\nClass CmsStartViewPreference; // Preference for the start site.\nClass CmsTimeWarpPreference; // Preference for the timewarp widget.\nClass CmsUserDefinedPreference; // Subclass for user-defined preferences.\nClass CmsUserSettingsStringPropertyWrapper; // Bean used to access the built-in preferences via reflection.\nClass CmsWorkplaceModePreference; // Workplace mode preference configuration.\nClass CmsWrapperPreference; // Wrapper used for built-in preferene which have also been configured in opencms-workplace.xml.\nAnnotation Type PrefMetadata; // Annotation used for declaring that a specific preference class should be used for a built-in preference.\n", "des": "Classes to build the user preferences dialog."}
{"index": 2860, "repo": "spring-integration-core-6.1.2", "code": "Package: filter\n\nClasses and Interfaces: \npublic abstract class AbstractMessageProcessingSelector extends Object implements MessageSelector, org.springframework.beans.factory.BeanFactoryAware, ManageableLifecycle; // A base class for MessageSelector implementations that delegate to a MessageProcessor.\npublic class ExpressionEvaluatingSelector extends AbstractMessageProcessingSelector; // A MessageSelector implementation that evaluates a SpEL expression.\npublic class MessageFilter extends AbstractReplyProducingPostProcessingMessageHandler implements DiscardingMessageHandler, ManageableLifecycle; // Message Handler that delegates to a MessageSelector.\npublic class MethodInvokingSelector extends AbstractMessageProcessingSelector; // A method-invoking implementation of MessageSelector.\n", "des": "Provides classes supporting the filter pattern."}
{"index": 131, "repo": "ignite-core-2.15.0", "code": "Package: binary\n\nSub Packages: \npackage binary.builder; // Contains classes specific to binary builder API.\npackage binary.streams; // Contains binary APIs implementation for streams.\n\nClasses and Interfaces: \nInterface BinaryFieldEx;\nInterface BinaryIdentityResolver; // Interface to compute hash codes for new binary objects and compare them for equality.\nInterface BinaryMetadataHandler; // Binary metadata handler.\nInterface BinaryObjectEx; // Extended binary object interface.\nInterface BinaryPositionReadable; // Interface allowing for positioned read.\nInterface BinaryRawReaderEx; // Extended reader interface.\nInterface BinaryRawWriterEx; // Extended writer interface.\nInterface BinaryReaderHandlesHolder; // Holder for handles.\nInterface BinaryWriteReplacer; // Interface to perform write replace.\nClass BinaryAbstractIdentityResolver; // Abstract identity resolver with common routines.\nClass BinaryArray; // Binary object representing array.\nClass BinaryArrayIdentityResolver; // Identity resolver implementation which compares raw array content of the binary object.\nClass BinaryCachingMetadataHandler; // Simple caching metadata handler.\nClass BinaryClassDescriptor; // Binary class descriptor.\nClass BinaryContext; // Binary context.\nClass BinaryContextHolder; // Binary context holder.\nClass BinaryEnumArray; // Ignite distinguishes between array of objects and array of enums.\nClass BinaryEnumCache; // Cache for enum constants.\nClass BinaryEnumObjectImpl; // Binary enum object.\nClass BinaryFieldAccessor; // Field accessor to speedup access.\nClass BinaryFieldImpl; // Implementation of binary field descriptor.\nClass BinaryFieldMetadata; // Binary field metadata.\nClass BinaryInternalMapper; // Internal binary mapper.\nClass BinaryMarshaller; // Implementation of Marshaller that lets to serialize and deserialize all objects in the binary format.\nClass BinaryMetadata; // Binary metadata which is passed over a wire.\nClass BinaryMethodWriteReplacer; // Write replacer based on method invocation.\nClass BinaryNoopMetadataHandler; // No-op metadata handler.\nClass BinaryObjectExImpl; // Internal binary object interface.\nClass BinaryObjectImpl; // Binary object implementation.\nClass BinaryObjectOffheapImpl; // Binary object implementation over offheap memory\nClass BinaryPrimitives; // Primitives writer.\nClass BinaryReaderExImpl; // Binary reader implementation.\nClass BinaryReaderHandles; // Reader handles.\nClass BinaryReaderHandlesHolderImpl; // Simple holder for handles.\n", "des": "Contains binary APIs internal implementation."}
{"index": 3195, "repo": "tomcat-api-10.1", "code": "Package: digester\n\nClasses and Interfaces: \nInterface Digester.GeneratedCodeLoader;\nInterface DocumentProperties; // A collection of interfaces, one per property, that enables the object being populated by the digester to signal to the digester that it supports the given property and that the digester should populate that property if available.\nInterface DocumentProperties.Charset; // The character encoding used by the source XML document.\nInterface ObjectCreationFactory; // Interface for use with FactoryCreateRule.\nInterface Rules; // Public interface defining a collection of Rule instances (and corresponding matching patterns) plus an implementation of a matching policy that selects the rules that match a particular pattern of nested elements discovered during parsing.\nInterface RuleSet; // Public interface defining a shorthand means of configuring a complete set of related Rule definitions, possibly associated with a particular namespace URI, in one operation.\nInterface SetPropertiesRule.Listener;\nClass AbstractObjectCreationFactory; // Abstract base class for ObjectCreationFactory implementations.\nClass ArrayStack<E>; // Imported copy of the ArrayStack class from Commons Collections, which was the only direct dependency from Digester.\nClass CallMethodRule; // Rule implementation that calls a method on an object on the stack (normally the top/parent object), passing arguments collected from subsequent CallParamRule rules or from the body of this element.\nClass CallParamRule; // Rule implementation that saves a parameter for use by a surrounding CallMethodRule.\nClass Digester; // A Digester processes an XML input stream by matching a series of element nesting patterns to execute Rules that have been added prior to the start of parsing.\nClass EnvironmentPropertySource; // A IntrospectionUtils.SecurePropertySource that uses environment variables to resolve expressions.\nClass FactoryCreateRule; // Rule implementation that uses an ObjectCreationFactory to create a new object which it pushes onto the object stack.\nClass ObjectCreateRule; // Rule implementation that creates a new object and pushes it onto the object stack.\nClass Rule; // Concrete implementations of this class implement actions to be taken when a corresponding nested pattern of XML elements has been matched.\nClass RulesBase; // Default implementation of the Rules interface that supports the standard rule matching behavior.\nClass ServiceBindingPropertySource; // A IntrospectionUtils.SecurePropertySource that uses Kubernetes service bindings to resolve expressions.\n", "des": "The Digester package provides for rules-based processing of arbitrary XML documents."}
{"index": 878, "repo": "mahout-math-0.13.0", "code": "Package: math\n\nSub Packages: \npackage math.function; // Core interfaces for functions, comparisons and procedures on objects and primitive data types.\npackage math.list; // Resizable lists holding objects or primitive data types such as int, double, etc.\npackage math.map; // Automatically growing and shrinking maps holding objects or primitive data types such as int, double, etc.\n\nClasses and Interfaces: \nInterface Matrix; // The basic interface including numerous convenience functions\nInterface MatrixTimesOps; // Optional interface for optimized matrix multiplications.\nInterface QR;\nInterface Swapper; // Interface for an object that knows how to swap elements at two positions (a,b).\nInterface Vector; // The basic interface including numerous convenience functions\nInterface Vector.Element; // A holder for information about a specific item in the Vector.\nInterface VectorIterable;\nClass AbstractMatrix; // A few universal implementations of convenience functions for a JVM-backed matrix.\nClass AbstractMatrix.TransposeViewVector;\nClass AbstractVector; // Implementations of generic capabilities like sum of elements and dot products\nClass Algebra;\nClass Arrays; // Array manipulations; complements java.util.Arrays.\nClass BinarySearch;\nClass Centroid; // A centroid is a weighted vector.\nClass CholeskyDecomposition; // Cholesky decomposition shamelessly ported from JAMA.\nClass ConstantVector; // Implements a vector with all the same values.\nClass DelegatingVector; // A delegating vector provides an easy way to decorate vectors with weights or id's and such while keeping all of the Vector functionality.\nClass DenseMatrix; // Matrix of doubles implemented using a 2-d array\nClass DenseSymmetricMatrix; // Economy packaging for a dense symmetric in-core matrix.\nClass DenseVector; // Implements vector as an array of doubles\nClass DiagonalMatrix;\nClass FileBasedMatrix; // Provides a way to get data from a file and treat it as if it were a matrix, but avoids putting all that data onto the Java heap.\nClass FileBasedSparseBinaryMatrix; // Provides a way to get data from a file and treat it as if it were a matrix, but avoids putting all that data onto the Java heap.\nClass FileBasedSparseBinaryMatrix.BinaryReadOnlyElement;\nClass Matrices;\nClass MatrixSlice;\n", "des": "Core base classes; Operations on primitive arrays such as sorting, partitioning and permuting."}
{"index": 3484, "repo": "opennlp-uima-2.2.0", "code": "Package: postag\n\nClasses and Interfaces: \nInterface POSModelResource;\nClass POSModelResourceImpl;\nClass POSTagger; // OpenNLP Part Of Speech annotator.\n", "des": "Package related to part-of-speech tagging."}
{"index": 1793, "repo": "spring-integration-file-6.1.2", "code": "Package: splitter\n\nClasses and Interfaces: \npublic class FileSplitter extends org.springframework.integration.splitter.AbstractMessageSplitter; // The AbstractMessageSplitter implementation to split the File Message payload to lines.\npublic static class FileSplitter.FileMarker extends Object implements Serializable;\npublic static enum FileSplitter.FileMarker.Mark extends Enum<FileSplitter.FileMarker.Mark>;\n", "des": "Provides implementations of AbstractMessageSplitter."}
{"index": 1114, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: pb\n\nClasses and Interfaces: \nClass NMProtoUtils; // Utilities for converting from PB representations.\nClass ResourceLocalizationSpecPBImpl;\n", "des": "Package containing classes for working with Protobuf."}
{"index": 1758, "repo": "spring-data-mongodb-4.1.2", "code": "Package: mapreduce\n\nClasses and Interfaces: \n@Deprecated public class MapReduceCounts extends Object;\n@Deprecated public class MapReduceOptions extends Object;\n@Deprecated public class MapReduceResults<T> extends Object implements Iterable<T>;\n@Deprecated public class MapReduceTiming extends Object;\n", "des": "Support for MongoDB map-reduce operations."}
{"index": 380, "repo": "mahout-core-14.1", "code": "Package: function\n\nClasses and Interfaces: \nInterface ByteByteProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteCharProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteComparator; // A comparison function which imposes a total ordering on some collection of elements.\nInterface ByteDoubleProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteFloatProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteIntProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteLongProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteObjectProcedure<T>; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteProcedure; // Interface that represents a procedure object: a procedure that takes a single argument and does not return a value.\nInterface ByteShortProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharByteProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharCharProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharComparator; // A comparison function which imposes a total ordering on some collection of elements.\nInterface CharDoubleProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharFloatProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharIntProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharLongProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharObjectProcedure<T>; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\n", "des": "Core interfaces for functions, comparisons and procedures on objects and primitive data types."}
{"index": 1378, "repo": "spring-boot-actuator-3.1.1", "code": "Package: couchbase\n\nClasses and Interfaces: \npublic class CouchbaseHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for Couchbase.\npublic class CouchbaseReactiveHealthIndicator extends AbstractReactiveHealthIndicator; // A ReactiveHealthIndicator for Couchbase.\n", "des": "Actuator support for Couchbase."}
{"index": 3351, "repo": "opencms-core-15.0", "code": "Package: messagebundle\n\nClasses and Interfaces: \nClass CmsMessageBundleEditor; // Controller for the VAADIN UI of the Message Bundle Editor.\nClass CmsMessageBundleEditorModel; // The class contains the logic behind the message translation editor.\nClass CmsMessageBundleEditorModel.CmsCaseInsensitiveStringComparator; // Comparator that compares strings case insensitive.\nClass CmsMessageBundleEditorModel.ConfigurableMessages; // Wrapper for the configurable messages for the column headers of the message bundle editor.\nClass CmsMessageBundleEditorModel.SortedProperties; // Extension of Properties to allow saving with keys alphabetically ordered and without time stamp as first comment.\nClass CmsMessageBundleEditorOptions; // View of the message bundle editor options, i.e., language/mode switcher, file name display and \"Add key\" option.\nClass CmsMessageBundleEditorTypes; // Types and helper classes used by the message bundle editor.\nClass CmsMessageBundleEditorTypes.Descriptor; // Helper for accessing Bundle descriptor XML contents.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsMessageBundleEditorTypes.BundleType; // Types of bundles editable by the Editor.\nEnum CmsMessageBundleEditorTypes.TableProperty; // The propertyIds of the table columns.\n", "des": "The data bindings and logic for the translator editor."}
{"index": 2912, "repo": "spring-xml-4.0.5", "code": "Package: transform\n\nClasses and Interfaces: \npublic class ResourceSource extends SAXSource; // Convenient subclass of SAXSource that reads from a Spring Resource.\npublic class StringResult extends StreamResult; // Convenient subclass of StreamResult that writes to a StringWriter.\npublic class StringSource extends StreamSource; // Convenient subclass of StreamSource that reads from a StringReader.\npublic class TransformerFactoryUtils extends Object;\npublic class TransformerHelper extends Object; // Helper class for Transformer usage.\npublic abstract class TransformerObjectSupport extends Object; // Convenient base class for objects that use a Transformer.\npublic abstract class TraxUtils extends Object; // Convenient utility methods for dealing with TrAX.\npublic static interface TraxUtils.ResultCallback; // Callback interface invoked on each sort of Result.\npublic static interface TraxUtils.SourceCallback; // Callback interface invoked on each sort of Source.\n", "des": "Provides classes that help with XML transformations."}
{"index": 1618, "repo": "spring-data-neo4j-7.1.2", "code": "Package: support\n\nClasses and Interfaces: \n@API(status=STABLE, since=\"6.1\") public interface CypherdslConditionExecutor<T>; // An interface that can be added to any repository so that queries can be enriched by conditions of the Cypher-DSL.\n@API(status=STABLE, since=\"6.1\") public interface CypherdslStatementExecutor<T>; // An interface that can be added to any imperative repository so that the repository exposes several methods taking in a Statement from the Cypher-DSL, that allows for full customization of the queries executed in a programmatic way in contrast to provide custom queries declaratively via @Query annotations.\npublic interface Neo4jEntityInformation<T,ID> extends EntityInformation<T,ID>; // Neo4j specific contract for entity informations.\n@API(status=INTERNAL, since=\"6.0.2\") public final class Neo4jEvaluationContextExtension extends Object implements EvaluationContextExtension; // This class registers the Neo4j SpEL Support it is registered by the appropriate repository factories as a root bean.\n@API(status=INTERNAL, since=\"6.0\") public final class Neo4jRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends TransactionalRepositoryFactoryBeanSupport<T,S,ID>; // Special adapter for Springs FactoryBean interface to allow easy setup of repository factories via Spring configuration.\n@API(status=INTERNAL, since=\"6.0\") public final class Neo4jRepositoryFactoryCdiBean<T> extends CdiRepositoryBean<T>; // The CDI pendant to the Neo4jRepositoryFactoryBean.\n@API(status=STABLE, since=\"6.3.3\") public interface ReactiveCypherdslConditionExecutor<T>; // An interface that can be added to any repository so that queries can be enriched by conditions of the Cypher-DSL.\n", "des": "This package provides a couple of public support classes for building custom imperative and reactive Spring Data Neo4j repository base classes."}
{"index": 2299, "repo": "spring-boot-3.1.1", "code": "Package: properties\n\nSub Packages: \npackage properties.bind; // Support for @ConfigurationProperties binding.\npackage properties.source; // Sources for external configuration properties.\n\nClasses and Interfaces: \npublic class BoundConfigurationProperties extends Object; // Bean to record and provide bound @ConfigurationProperties.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Indexed public @interface ConfigurationProperties; // Annotation for externalized configuration.\npublic final class ConfigurationPropertiesBean extends Object; // Provides access to @ConfigurationProperties bean details, regardless of if the annotation was used directly or on a @Bean factory method.\n@Deprecated(since=\"3.0.8\", forRemoval=true) public static enum ConfigurationPropertiesBean.BindMethod extends Enum<ConfigurationPropertiesBean.BindMethod>;\npublic class ConfigurationPropertiesBindException extends org.springframework.beans.factory.BeanCreationException; // Exception thrown when @ConfigurationProperties binding fails.\n@FunctionalInterface public interface ConfigurationPropertiesBindHandlerAdvisor; // Allows additional functionality to be applied to the BindHandler used by the ConfigurationPropertiesBindingPostProcessor.\n@Qualifier(\"org.springframework.boot.context.properties.ConfigurationPropertiesBinding\") @Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface ConfigurationPropertiesBinding; // Qualifier for beans that are needed to configure the binding of @ConfigurationProperties (e.g.\npublic class ConfigurationPropertiesBindingPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.core.PriorityOrdered, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // BeanPostProcessor to bind PropertySources to beans annotated with @ConfigurationProperties.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(org.springframework.boot.context.properties.ConfigurationPropertiesScanRegistrar.class) @EnableConfigurationProperties public @interface ConfigurationPropertiesScan; // Configures the base packages used when scanning for @ConfigurationProperties classes.\n@Target({CONSTRUCTOR,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Deprecated(since=\"3.0.0\", forRemoval=true) @ConstructorBinding public @interface ConstructorBinding;\n", "des": "Support for external configuration properties."}
{"index": 1617, "repo": "spring-data-neo4j-7.1.2", "code": "Package: query\n\nClasses and Interfaces: \npublic final class BoundingBox extends Object; // This is a utility class that computes the bounding box of a polygon as a rectangle defined by the lower left and upper right point.\n@API(status=INTERNAL, since=\"6.0\") public final class CypherAdapterUtils extends Object; // Bridging between Spring Data domain Objects and Cypher constructs.\n@API(status=INTERNAL, since=\"6.1\") public final class CypherdslConditionExecutorImpl<T> extends Object implements CypherdslConditionExecutor<T>;\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @Query(exists=true) @API(status=STABLE, since=\"6.0\") public @interface ExistsQuery; // Specialized version of Query whose values is always used as exists projection.\n@API(status=INTERNAL, since=\"6.0\") public final class Neo4jQueryLookupStrategy extends Object implements QueryLookupStrategy; // Lookup strategy for queries.\n@API(status=INTERNAL, since=\"6.0.2\") public final class Neo4jSpelSupport extends Object; // This class provides a couple of extensions to the Spring Data Neo4j SpEL support.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @API(status=STABLE, since=\"6.0\") public @interface Query; // Annotation to provide Cypher statements that will be used for executing the method.\n@API(status=INTERNAL, since=\"6.1\") public final class QuerydslNeo4jPredicateExecutor<T> extends Object implements QuerydslPredicateExecutor<T>; // Querydsl specific fragment for extending SimpleNeo4jRepository with an implementation of QuerydslPredicateExecutor.\n@API(status=INTERNAL, since=\"6.0.4\") public final class QueryFragments extends Object; // Collects the parts of a Cypher query to be handed over to the Cypher generator.\n@API(status=INTERNAL, since=\"6.0.4\") public final class QueryFragmentsAndParameters extends Object; // Combines the QueryFragments with parameters.\n@API(status=INTERNAL, since=\"6.3.3\") public final class ReactiveCypherdslConditionExecutorImpl<T> extends Object implements ReactiveCypherdslConditionExecutor<T>;\n", "des": "A set of annotations for providing custom queries to repositories."}
{"index": 2246, "repo": "spring-data-keyvalue-3.1.2", "code": "Package: query\n\nClasses and Interfaces: \npublic class KeyValueQuery<T> extends Object;\n", "des": "Key/value specific query and abstractions."}
{"index": 2629, "repo": "shiro-web-2.0.0-alpha-2", "code": "Package: mgt\n\nClasses and Interfaces: \npublic class CookieRememberMeManager extends org.apache.shiro.mgt.AbstractRememberMeManager; // Remembers a Subject's identity by saving the Subject's principals to a Cookie for later retrieval.\npublic class DefaultWebSecurityManager extends org.apache.shiro.mgt.DefaultSecurityManager implements WebSecurityManager; // Default WebSecurityManager implementation used in web-based applications or any application that requires HTTP connectivity (SOAP, http remoting, etc.).\npublic class DefaultWebSessionStorageEvaluator extends org.apache.shiro.mgt.DefaultSessionStorageEvaluator; // A web-specific SessionStorageEvaluator that performs the same logic as the parent class DefaultSessionStorageEvaluator but additionally checks for a request-specific flag that may enable or disable session access.\npublic class DefaultWebSubjectFactory extends org.apache.shiro.mgt.DefaultSubjectFactory; // A SubjectFactory implementation that creates WebDelegatingSubject instances.\npublic interface WebSecurityManager extends org.apache.shiro.mgt.SecurityManager; // This interface represents a SecurityManager implementation that can used in web-enabled applications.\n", "des": "Components supporting web-specific SecurityManager implementations."}
{"index": 3328, "repo": "opencms-core-15.0", "code": "Package: lists\n\nClasses and Interfaces: \nInterface CmsOptionDialog.I_OptionHandler; // Dialog handler to handle the selected option.\nClass CmsListManager; // Manager for list configuration files.\nClass CmsListManagerConfiguration; // The list manager app configuration.\nClass CmsOptionDialog; // Option dialog.\nClass CmsResultFacets; // Displays search result facets.\nClass CmsResultTable; // Table to display the list manager search results.\n", "des": "This package contains the app classes for the list configurations manager."}
{"index": 2929, "repo": "groovy-4.0.13", "code": "Package: asm\n\nClasses and Interfaces: \npublic class AssertionWriter extends Object;\npublic class BinaryBooleanExpressionHelper extends BinaryIntExpressionHelper; // Binary write operations specialised for Booleans\npublic class BinaryDoubleExpressionHelper extends BinaryLongExpressionHelper;\npublic class BinaryExpressionHelper extends Object;\npublic class BinaryExpressionMultiTypeDispatcher extends BinaryExpressionHelper; // This class is for internal use only! This class will dispatch to the right type adapters according to the kind of binary expression that is provided.\npublic abstract class BinaryExpressionWriter extends Object; // Base class for writing primitive typed operations\npublic class BinaryFloatExpressionHelper extends BinaryExpressionWriter;\npublic class BinaryIntExpressionHelper extends BinaryExpressionWriter;\npublic class BinaryLongExpressionHelper extends BinaryExpressionWriter;\npublic class BinaryObjectExpressionHelper extends BinaryExpressionWriter;\npublic class BytecodeDumper extends Object implements BytecodeProcessor; // A utility class which can be used in test cases to dump generated bytecode.\npublic class BytecodeHelper extends Object; // A helper class for bytecode generation with AsmClassGenerator.\npublic class BytecodeVariable extends Object; // Represents compile time variable metadata while compiling a method.\npublic class CallSiteWriter extends Object; // This class represents non-public API used by AsmClassGenerator.\npublic class ClosureWriter extends Object;\nprotected static class ClosureWriter.CorrectAccessedVariableVisitor extends CodeVisitorSupport;\nprotected static interface ClosureWriter.UseExistingReference;\npublic class CompileStack extends Object; // Manages different aspects of the code of a code block like handling labels, defining variables, and scopes.\npublic static class CompileStack.BlockRecorder extends Object;\nprotected static class CompileStack.LabelRange extends Object;\npublic class DelegatingController extends WriterController; // This class will delegate all calls to a WriterController given in the constructor.\npublic class ExpressionAsVariableSlot extends BytecodeExpression; // Helper class that takes an Expression and if visited will load it normally, storing the result in a helper variable, which then can be requested after the visit is completed.\npublic class InvocationWriter extends Object;\npublic class LambdaWriter extends ClosureWriter;\npublic class MethodCaller extends Object; // A helper class to invoke methods more easily in ASM\npublic class MethodCallerMultiAdapter extends Object;\npublic class MethodPointerExpressionWriter extends Object; // Generates bytecode for method pointer expressions.\n", "des": "Helper classes for ASMClassGenerator."}
{"index": 3552, "repo": "guava-32.1.1-jre", "code": "Package: collect\n\nClasses and Interfaces: \nInterface BiMap<K extends @Nullable java.lang.Object,​V extends @Nullable java.lang.Object>; // A bimap (or \"bidirectional map\") is a map that preserves the uniqueness of its values as well as that of its keys.\nInterface ClassToInstanceMap<B extends @Nullable java.lang.Object>; // A map, each entry of which maps a Java raw type to an instance of that type.\nInterface Interner<E>; // Provides similar behavior to String.intern() for any immutable type.\nInterface ListMultimap<K extends @Nullable java.lang.Object,​V extends @Nullable java.lang.Object>; // A Multimap that can hold duplicate key-value pairs and that maintains the insertion ordering of values for a given key.\nInterface MapDifference<K extends @Nullable java.lang.Object,​V extends @Nullable java.lang.Object>; // An object representing the differences between two maps.\nInterface MapDifference.ValueDifference<V extends @Nullable java.lang.Object>; // A difference between the mappings from two maps with the same key.\nInterface Maps.EntryTransformer<K extends @Nullable java.lang.Object,​V1 extends @Nullable java.lang.Object,​V2 extends @Nullable java.lang.Object>; // A transformation of the value of a key-value pair, using both key and value as inputs.\nInterface Multimap<K extends @Nullable java.lang.Object,​V extends @Nullable java.lang.Object>; // A collection that maps keys to values, similar to Map, but in which each key may be associated with multiple values.\nInterface Multiset<E extends @Nullable java.lang.Object>; // A collection that supports order-independent equality, like Set, but may have duplicate elements.\nInterface Multiset.Entry<E extends @Nullable java.lang.Object>; // An unmodifiable element-count pair for a multiset.\nInterface PeekingIterator<E extends @Nullable java.lang.Object>; // An iterator that supports a one-element lookahead while iterating.\n", "des": "Collection interfaces and implementations, and other utilities for collections."}
{"index": 3288, "repo": "opencms-core-15.0", "code": "Package: controller\n\nClasses and Interfaces: \nInterface I_CmsSearchController; // Interface all search controllers must implement.\nInterface I_CmsSearchControllerCommon; // Interface to get controllers state and configuration - version for common search configurations.\nInterface I_CmsSearchControllerDidYouMean; // Interface the \"Did you mean ...?\" controller must implement.\nInterface I_CmsSearchControllerFacetField; // Interface to get controllers state and configuration - version for field facets.\nInterface I_CmsSearchControllerFacetQuery; // Interface to get controllers state and configuration - version for the query facet.\nInterface I_CmsSearchControllerFacetRange; // Interface to get controllers state and configuration - version for field facets.\nInterface I_CmsSearchControllerFacetsField; // Interface the controller for all field facets must implement - just allow access to the single controllers.\nInterface I_CmsSearchControllerFacetsRange; // Interface the controller for all range facets must implement - just allow access to the single controllers.\nInterface I_CmsSearchControllerGeoFilter; // Interface to get controllers state and configuration - version for the Geo filter.\nInterface I_CmsSearchControllerHighlighting; // Interface to get controllers configuration - version for highlighting.\nInterface I_CmsSearchControllerMain; // Interface for the main search controller.\nInterface I_CmsSearchControllerPagination; // Interface to get controllers state and configuration - version for pagination.\nInterface I_CmsSearchControllerSorting; // Interface to get controllers state and configuration - version for common search configurations.\nClass CmsSearchController; // The main controller that allows to access all single sub-controllers.\nClass CmsSearchControllerCommon; // Search controller for the common search options.\nClass CmsSearchControllerDidYouMean; // Controller for the \"Did you mean ...?\" feature.\nClass CmsSearchControllerFacetField; // Search controller for the field facet options.\nClass CmsSearchControllerFacetQuery; // Search controller for the query facet options.\nClass CmsSearchControllerFacetRange; // Search controller for the field facet options.\nClass CmsSearchControllerFacetsField; // Search controller as aggregation of all single field facet controllers.\nClass CmsSearchControllerFacetsRange; // Search controller as aggregation of all single field facet controllers.\nClass CmsSearchControllerGeoFilter; // Search controller for the Geo filter.\nClass CmsSearchControllerHighlighting; // Controller for highlighting options.\nClass CmsSearchControllerPagination; // Controller for the pagination.\n", "des": "API classes for the controllers of the search form support provided for server-side Solr search."}
{"index": 3425, "repo": "hibernate-core-5.6.15.Final", "code": "Package: naming\n\nClasses and Interfaces: \nInterface EntityNaming;\nInterface ImplicitAnyDiscriminatorColumnNameSource; // Context for determining the implicit name for an ANY mapping's discriminator column.\nInterface ImplicitAnyKeyColumnNameSource; // Context for determining the implicit name for an ANY mapping's key column.\nInterface ImplicitBasicColumnNameSource; // Context for determining the implicit name related to basic values.\nInterface ImplicitCollectionTableNameSource; // Context for determining the implicit name for a collection table.\nInterface ImplicitConstraintNameSource; // Common implicit name source traits for all constraint naming: FK, UK, index\nInterface ImplicitDiscriminatorColumnNameSource; // Context for determining the implicit name of an entity's discriminator column.\nInterface ImplicitEntityNameSource; // Context for determining the implicit name of an entity's primary table\nInterface ImplicitForeignKeyNameSource;\nInterface ImplicitIdentifierColumnNameSource; // Context for determining the implicit name of an entity's identifier column.\nInterface ImplicitIndexColumnNameSource;\nInterface ImplicitIndexNameSource;\nInterface ImplicitJoinColumnNameSource; // Context for determining the implicit name of a \"join column\" (think JoinColumn).\nInterface ImplicitJoinTableNameSource; // Context for determining the implicit name for a join table.\nInterface ImplicitMapKeyColumnNameSource; // Context for determining the implicit name of a column used to back the key of a Map.\nInterface ImplicitNameSource; // Common contract for all implicit naming sources\nInterface ImplicitNamingStrategy; // Pluggable strategy for applying implicit naming rules when an explicit name is not given.\nInterface ImplicitPrimaryKeyJoinColumnNameSource; // Used to help determine the implicit name of columns which are part of a primary-key, well simultaneously being part of a foreign-key (join).\nInterface ImplicitTenantIdColumnNameSource; // Context for determining the implicit name of an entity's tenant identifier column.\nInterface ImplicitUniqueKeyNameSource;\nInterface NamingStrategyHelper; // Helper contract for dealing with naming strategies.\nInterface PhysicalNamingStrategy; // Pluggable strategy contract for applying physical naming rules for database object names.\nClass CamelCaseToUnderscoresNamingStrategy; // Originally copied from Spring Boot as this strategy is popular there (original name is SpringPhysicalNamingStrategy).\nClass DatabaseIdentifier; // Models an identifier (name), retrieved from the database.\nClass Identifier; // Models an identifier (name), which may or may not be quoted.\n", "des": "Represents a proposed new approach to allowing hooks into the process of determining the name of database objects (tables, columns, constraints, etc)."}
{"index": 3040, "repo": "spring-web-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractMultipartHttpServletRequest extends HttpServletRequestWrapper implements MultipartHttpServletRequest; // Abstract base implementation of the MultipartHttpServletRequest interface.\npublic class ByteArrayMultipartFileEditor extends org.springframework.beans.propertyeditors.ByteArrayPropertyEditor; // Custom PropertyEditor for converting MultipartFiles to byte arrays.\npublic class DefaultMultipartHttpServletRequest extends AbstractMultipartHttpServletRequest; // Default implementation of the MultipartHttpServletRequest interface.\npublic class MissingServletRequestPartException extends ServletException implements ErrorResponse; // Signals the part of a \"multipart/form-data\" request, identified by name could not be found.\npublic class MultipartFilter extends OncePerRequestFilter; // Servlet Filter that resolves multipart requests via a MultipartResolver.\npublic final class MultipartResolutionDelegate extends Object; // A common delegate for HandlerMethodArgumentResolver implementations which need to resolve MultipartFile and Part arguments.\npublic class RequestPartServletServerHttpRequest extends ServletServerHttpRequest; // ServerHttpRequest implementation that accesses one part of a multipart request.\npublic class StandardMultipartHttpServletRequest extends AbstractMultipartHttpServletRequest; // Spring MultipartHttpServletRequest adapter, wrapping a Servlet HttpServletRequest and its Part objects.\npublic class StandardServletMultipartResolver extends Object implements MultipartResolver; // Standard implementation of the MultipartResolver interface, based on the Servlet Part API.\npublic abstract class StandardServletPartUtils extends Object; // Utility methods for standard Servlet Part handling.\npublic class StringMultipartFileEditor extends PropertyEditorSupport; // Custom PropertyEditor for converting MultipartFiles to Strings.\n", "des": "Support classes for the multipart resolution framework."}
{"index": 2225, "repo": "spring-data-commons-3.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class DefaultRepositoryInvokerFactory extends Object implements RepositoryInvokerFactory; // Default implementation of RepositoryInvokerFactory to inspect the requested repository type and create a matching RepositoryInvoker that suits the repository best.\npublic class DomainClassConverter<T extends ConversionService & ConverterRegistry> extends Object implements ConditionalGenericConverter, ApplicationContextAware; // Converter to convert arbitrary input into domain classes managed by Spring Data CrudRepositorys.\npublic class QueryMethodParameterConversionException extends RuntimeException; // Exception to represent a failed attempt to convert a source value into a query method parameter.\npublic class Repositories extends Object implements Iterable<Class<?>>; // Wrapper class to access repository instances obtained from a ListableBeanFactory.\npublic interface RepositoryInvocationInformation; // Meta-information about the methods a repository exposes.\npublic interface RepositoryInvoker extends RepositoryInvocationInformation; // API to invoke (CRUD) methods on Spring Data repository instances independently of the base interface they expose.\npublic interface RepositoryInvokerFactory; // Interface for a factory to create RepositoryInvoker instances for repositories managing a particular domain type.\n", "des": "Support classes for integration of the repository programming model with 3rd party frameworks."}
{"index": 3862, "repo": "lucene-spatial-extras-9.7.0", "code": "Package: spatial\n\nSub Packages: \npackage spatial.bbox; // Bounding Box Spatial Strategy\npackage spatial.composite; // Composite strategies.\npackage spatial.prefix; // Prefix Tree Strategy.\npackage spatial.query; // Spatial Query options useful for client side requests\npackage spatial.serialized; // Strategies that serialize the shape (non-indexed).\npackage spatial.spatial4j; // Spatial4j stuff that ideally belongs in Spatial4j (isn't related to Lucene).\npackage spatial.util; // Advanced spatial utilities.\npackage spatial.vector; // Spatial strategy that uses two fields.\n\nClasses and Interfaces: \nClass ShapeValues; // Iterator over Shape objects for an index segment\nClass ShapeValuesSource; // Produces ShapeValues per-segment\nClass SpatialStrategy; // The SpatialStrategy encapsulates an approach to indexing and searching based on shapes.\n", "des": "Lucene advanced spatial search"}
{"index": 962, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: addressing\n\nSub Packages: \npackage addressing.core; // Core package for WS-Addressing support.\npackage addressing.messageid; // Contains various strategies for generating WS-Addressing MessageIDs.\npackage addressing.server; // Contains servers-side WS-Addressing support, in the form of EndpointMappings.\npackage addressing.version; // Contains abstractions over various versions of the WS-Addressing specification.\n\nClasses and Interfaces: \nClass AddressingException; // Exception thrown in case on WS-Addressing errors.\n", "des": "Provides WS-Addressing implementation classes."}
{"index": 1277, "repo": "spring-core-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class DefaultPropertySourceFactory extends Object implements PropertySourceFactory; // The default implementation for PropertySourceFactory, wrapping every resource in a ResourcePropertySource.\npublic class EncodedResource extends Object implements InputStreamSource; // Holder that combines a Resource descriptor with a specific encoding or Charset to be used for reading from the resource.\npublic class LocalizedResourceHelper extends Object; // Helper class for loading a localized resource, specified through name, extension and current locale.\npublic class PathMatchingResourcePatternResolver extends Object implements ResourcePatternResolver; // A ResourcePatternResolver implementation that is able to resolve a specified resource location path into one or more matching Resources.\npublic abstract class PropertiesLoaderSupport extends Object; // Base class for JavaBean-style components that need to load properties from one or more resources.\npublic abstract class PropertiesLoaderUtils extends Object; // Convenient utility methods for loading of java.util.Properties, performing standard handling of input streams.\npublic record PropertySourceDescriptor(List<String> locations, boolean ignoreResourceNotFound, String name, Class<? extends PropertySourceFactory> propertySourceFactory, String encoding) extends Record; // Describe a PropertySource.\npublic interface PropertySourceFactory; // Strategy interface for creating resource-based PropertySource wrappers.\npublic class PropertySourceProcessor extends Object; // Contribute property sources to the Environment.\npublic class ResourceArrayPropertyEditor extends PropertyEditorSupport; // Editor for Resource arrays, to automatically convert String location patterns (e.g.\npublic interface ResourcePatternResolver extends ResourceLoader; // Strategy interface for resolving a location pattern (for example, an Ant-style path pattern) into Resource objects.\npublic abstract class ResourcePatternUtils extends Object; // Utility class for determining whether a given URL is a resource location that can be loaded via a ResourcePatternResolver.\npublic class ResourcePropertySource extends PropertiesPropertySource; // Subclass of PropertiesPropertySource that loads a Properties object from a given Resource or resource location such as \"classpath:/com/myco/foo.properties\" or \"file:/path/to/file.xml\".\npublic class ResourceRegion extends Object; // Region of a Resource implementation, materialized by a position within the Resource and a byte count for the length of that region.\npublic class SpringFactoriesLoader extends Object; // General purpose factory loading mechanism for internal use within the framework.\n", "des": "Support classes for Spring's resource abstraction."}
{"index": 1319, "repo": "groovy-all-4.0.13", "code": "Package: slurpersupport\n\nClasses and Interfaces: \npublic class Attribute extends GPathResult; // Lazy evaluated representation of a node attribute.\npublic class Attributes extends NodeChildren; // Lazy evaluated representation of a node's attributes.\npublic class FilteredAttributes extends Attributes; // Lazy evaluated representation of a node's attributes filtered by a Closure.\npublic class FilteredNodeChildren extends NodeChildren; // Lazy evaluated representation of child nodes filtered by a Closure.\npublic abstract class GPathResult extends GroovyObjectSupport implements Writable, Buildable, Iterable; // Base class for representing lazy evaluated GPath expressions.\npublic class NamespaceAwareHashMap extends HashMap<String,String>;\npublic class NoChildren extends GPathResult; // Lazy evaluated representation of a GPath expression returning no children.\npublic class Node extends Object implements Writable; // Represents a node.\npublic class NodeChild extends GPathResult; // Lazy evaluated representation of a child node.\npublic class NodeChildren extends GPathResult; // Lazy evaluated representation of child nodes.\npublic abstract class NodeIterator extends Object implements Iterator; // Helper class for iterating through nodes.\npublic class NodeParents extends NodeChildren; // Lazy evaluated representation of parent nodes without duplicates\npublic abstract class ReplacementNode extends Object implements Buildable, Writable; // Helper base class used for lazy updates.\n", "des": "Helper classes for XmlSlurper."}
{"index": 665, "repo": "commons-lang3-3.12.0", "code": "Package: compare\n\nClasses and Interfaces: \nClass ComparableUtils; // Utility library to provide helper methods for translating Comparable.compareTo(T) result into a boolean.\nClass ComparableUtils.ComparableCheckBuilder<A extends Comparable<A>>; // Provides access to the available methods\nClass ObjectToStringComparator; // Compares Object's Object.toString() values.\n", "des": "Provides classes to work with the Comparable and Comparator interfaces."}
{"index": 800, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: query\n\nClasses and Interfaces: \nClass QueryAutoStopWordAnalyzer; // An Analyzer used primarily at query time to wrap another analyzer and provide a layer of protection which prevents very common words from being passed into queries.\n", "des": "Automatically filter high-frequency stopwords."}
{"index": 3154, "repo": "tika-core-2.8.0", "code": "Package: exception\n\nClasses and Interfaces: \nClass ZeroByteFileException.IgnoreZeroByteFileException;\nClass AccessPermissionException; // Exception to be thrown when a document does not allow content extraction.\nClass CorruptedFileException; // This exception should be thrown when the parse absolutely, positively has to stop.\nClass EncryptedDocumentException;\nClass FileTooLongException;\nClass RuntimeSAXException; // Use this to throw a SAXException in subclassed methods that don't throw SAXExceptions\nClass TikaConfigException; // Tika Config Exception is an exception to occur when there is an error in Tika config file and/or one or more of the parsers failed to initialize from that erroneous config.\nClass TikaException; // Tika exception\nClass TikaMemoryLimitException;\nClass TikaTimeoutException; // Runtime/unchecked version of TimeoutException\nClass UnsupportedFormatException; // Parsers should throw this exception when they encounter a file format that they do not support.\nClass WriteLimitReachedException;\nClass ZeroByteFileException; // Exception thrown by the AutoDetectParser when a file contains zero-bytes.\n", "des": "Tika exception."}
{"index": 1083, "repo": "graal-sdk-1.0.0-rc7", "code": "Package: type\n\nClasses and Interfaces: \nInterface CCharPointer; // A pointer to a 8-bit C primitive value.\nInterface CCharPointerPointer; // A pointer to a pointer to a 8-bit C primitive value.\nInterface CDoublePointer; // A pointer to a C primitive 'double' value.\nInterface CFloatPointer; // A pointer to a C primitive 'float' value.\nInterface CIntPointer; // A pointer to a 32-bit C primitive value.\nInterface CIntPointerPointer; // A pointer to a pointer to a 32-bit C primitive value.\nInterface CLongPointer; // A pointer to a 64-bit C primitive value.\nInterface CShortPointer; // A pointer to a 16-bit C primitive value.\nInterface CTypeConversion.CCharPointerHolder; // An auto-closable that holds a Java CharSequence as a null-terminated C char[] array.\nInterface VoidPointer; // A void* pointer to an opaque C value of an unknown type, without any methods to read or write.\nInterface WordPointer; // A untyped C pointer to any machine-word-sized value, e.g., a pointer to another pointer or a pointer to a UnsignedWord or SignedWord value.\nClass CTypeConversion; // Utility methods to convert between Java types and C types.\nClass CTypeConversion.CCharPointerPointerHolder; // An auto-closable that holds a Java CharSequence[] array as a null-terminated array of null-terminated C char[]s.\n", "des": "This package provides parts of the Java / C interface that are related to standard C pointer types, as well as utility functions to convert between Java types and C types."}
{"index": 2096, "repo": "spring-webflux-6.0.11", "code": "Package: server\n\nSub Packages: \npackage server.support; // Classes supporting the org.springframework.web.reactive.function.server package.\n\nClasses and Interfaces: \npublic interface EntityResponse<T> extends ServerResponse; // Entity-specific subtype of ServerResponse that exposes entity data.\npublic static interface EntityResponse.Builder<T>; // Defines a builder for EntityResponse.\n@FunctionalInterface public interface HandlerFilterFunction<T extends ServerResponse,R extends ServerResponse>; // Represents a function that filters a handler function.\n@FunctionalInterface public interface HandlerFunction<T extends ServerResponse>; // Represents a function that handles a request.\npublic interface HandlerStrategies; // Defines the strategies to be used for processing HandlerFunctions.\npublic static interface HandlerStrategies.Builder; // A mutable builder for a HandlerStrategies.\npublic interface RenderingResponse extends ServerResponse; // Rendering-specific subtype of ServerResponse that exposes model and template data.\npublic static interface RenderingResponse.Builder; // Defines a builder for RenderingResponse.\n@FunctionalInterface public interface RequestPredicate; // Represents a function that evaluates on a given ServerRequest.\npublic abstract class RequestPredicates extends Object; // Implementations of RequestPredicate that implement various useful request matching operations, such as matching based on path, HTTP method, etc.\npublic static interface RequestPredicates.Visitor; // Receives notifications from the logical structure of request predicates.\n@FunctionalInterface public interface RouterFunction<T extends ServerResponse>; // Represents a function that routes to a handler function.\npublic abstract class RouterFunctions extends Object; // Central entry point to Spring's functional web framework. Exposes routing functionality, such as to create a RouterFunction using a discoverable builder-style API, to create a RouterFunction given a RequestPredicate and HandlerFunction, and to do further subrouting on an existing routing function.\npublic static interface RouterFunctions.Builder; // Represents a discoverable builder for router functions.\npublic static interface RouterFunctions.Visitor; // Receives notifications from the logical structure of router functions.\npublic interface ServerRequest; // Represents a server-side HTTP request, as handled by a HandlerFunction.\npublic static interface ServerRequest.Builder; // Defines a builder for a request.\n", "des": "Provides the types that make up Spring's functional web framework for Reactive environments."}
{"index": 883, "repo": "mahout-math-0.13.0", "code": "Package: list\n\nClasses and Interfaces: \nClass AbstractByteList; // Abstract base class for resizable lists holding byte elements; abstract.\nClass AbstractCharList; // Abstract base class for resizable lists holding char elements; abstract.\nClass AbstractDoubleList; // Abstract base class for resizable lists holding double elements; abstract.\nClass AbstractFloatList; // Abstract base class for resizable lists holding float elements; abstract.\nClass AbstractIntList; // Abstract base class for resizable lists holding int elements; abstract.\nClass AbstractList; // Abstract base class for resizable lists holding objects or primitive data types such as int, float, etc.\nClass AbstractLongList; // Abstract base class for resizable lists holding long elements; abstract.\nClass AbstractObjectList<T>; // Abstract base class for resizable lists holding objects or primitive data types such as int, float, etc.First see the package summary and javadoc tree view to get the broad picture.\nClass AbstractShortList; // Abstract base class for resizable lists holding short elements; abstract.\nClass ByteArrayList; // Resizable list holding byte elements; implemented with arrays.\nClass CharArrayList; // Resizable list holding char elements; implemented with arrays.\nClass DoubleArrayList; // Resizable list holding double elements; implemented with arrays.\nClass FloatArrayList; // Resizable list holding float elements; implemented with arrays.\nClass IntArrayList; // Resizable list holding int elements; implemented with arrays.\nClass LongArrayList; // Resizable list holding long elements; implemented with arrays.\nClass ObjectArrayList<T>; // Resizable list holding ${valueType} elements; implemented with arrays.\nClass ShortArrayList; // Resizable list holding short elements; implemented with arrays.\nClass SimpleLongArrayList; // Resizable list holding long elements; implemented with arrays; not efficient; just to demonstrate which methods you must override to implement a fully functional list.\n", "des": "Resizable lists holding objects or primitive data types such as int, double, etc."}
{"index": 3746, "repo": "lucene-queryparser-9.7.0", "code": "Package: processors\n\nClasses and Interfaces: \nClass AllowLeadingWildcardProcessor; // This processor verifies if StandardQueryConfigHandler.ConfigurationKeys.ALLOW_LEADING_WILDCARD is defined in the QueryConfigHandler.\nClass AnalyzerQueryNodeProcessor; // This processor verifies if StandardQueryConfigHandler.ConfigurationKeys.ANALYZER is defined in the QueryConfigHandler.\nClass BooleanQuery2ModifierNodeProcessor; // This processor is used to apply the correct ModifierQueryNode to BooleanQueryNodes children.\nClass BooleanSingleChildOptimizationQueryNodeProcessor; // This processor removes every BooleanQueryNode that contains only one child and returns this child.\nClass BoostQueryNodeProcessor; // This processor iterates the query node tree looking for every FieldableNode that has StandardQueryConfigHandler.ConfigurationKeys.BOOST in its config.\nClass DefaultPhraseSlopQueryNodeProcessor; // This processor verifies if StandardQueryConfigHandler.ConfigurationKeys.PHRASE_SLOP is defined in the QueryConfigHandler.\nClass FuzzyQueryNodeProcessor; // This processor iterates the query node tree looking for every FuzzyQueryNode, when this kind of node is found, it checks on the query configuration for StandardQueryConfigHandler.ConfigurationKeys.FUZZY_CONFIG, gets the fuzzy prefix length and default similarity from it and set to the fuzzy node.\nClass IntervalQueryNodeProcessor; // This processor makes sure that StandardQueryConfigHandler.ConfigurationKeys.ANALYZER is defined in the QueryConfigHandler and injects this analyzer into IntervalQueryNodes.\nClass MatchAllDocsQueryNodeProcessor; // This processor converts every WildcardQueryNode that is \"*:*\" to MatchAllDocsQueryNode.\nClass MultiFieldQueryNodeProcessor; // This processor is used to expand terms so the query looks for the same term in different fields.\nClass MultiTermRewriteMethodProcessor; // This processor instates the default MultiTermQuery.RewriteMethod, MultiTermQuery.CONSTANT_SCORE_BLENDED_REWRITE, for multi-term query nodes.\nClass OpenRangeQueryNodeProcessor; // Processes TermRangeQuerys with open ranges.\nClass PhraseSlopQueryNodeProcessor; // This processor removes invalid SlopQueryNode objects in the query node tree.\nClass PointQueryNodeProcessor; // This processor is used to convert FieldQueryNodes to PointRangeQueryNodes.\n", "des": "Lucene Query Node Processors."}
{"index": 191, "repo": "ignite-core-2.15.0", "code": "Package: tostring\n\nClasses and Interfaces: \nClass CircularStringBuilder; // Basic string builder over circular buffer.\nClass GridToStringBuilder; // Provides auto-generation framework for toString() output.\nClass SBLimitedLength;\nAnnotation Type GridToStringExclude; // Attach this annotation to a field or a class to indicate that this field or fields of this class should not be included in toString() output.\nAnnotation Type GridToStringInclude; // Attach this annotation to a field or a class to indicate that this field or fields of this class should be included in toString() output.\nAnnotation Type GridToStringOrder; // Attach this annotation to a field to provide its order in toString() output.\n", "des": "Common utility classes for threads."}
{"index": 829, "repo": "calcite-core-1.34.0", "code": "Package: interpreter\n\nClasses and Interfaces: \nInterface BindableRel; // Relational expression that can implement itself in Bindable convention.\nInterface Bindables.BindableTableScanRule.Config; // Rule configuration.\nInterface Compiler; // Context while converting a tree of RelNode to a program that can be run by an Interpreter.\nInterface InterpretableRel; // Relational expression that can implement itself using an interpreter.\nInterface Node; // Relational expression that can be executed using an interpreter.\nInterface Scalar; // Compiled scalar expression.\nInterface Scalar.Producer; // Produces a Scalar when a query is executed.\nInterface Sink; // Sink to which to send rows.\nInterface Source; // Source of rows.\nClass AggregateNode; // Interpreter node that implements an Aggregate.\nClass AggregateNode.BigDecimalSum; // Implementation of SUM over BigDecimal values as a user-defined aggregate.\nClass AggregateNode.DoubleSum; // Implementation of SUM over DOUBLE values as a user-defined aggregate.\nClass AggregateNode.IntSum; // Implementation of SUM over INTEGER values as a user-defined aggregate.\nClass AggregateNode.LongSum; // Implementation of SUM over BIGINT values as a user-defined aggregate.\nClass AggregateNode.MaxBigDecimal; // Implementation of MAX function to calculate the maximum of BigDecimal values as a user-defined aggregate.\nClass AggregateNode.MaxDouble; // Implementation of MAX function to calculate the maximum of double and real values as a user-defined aggregate.\nClass AggregateNode.MaxFloat; // Implementation of MAX function to calculate the maximum of float values as a user-defined aggregate.\nClass AggregateNode.MaxInt; // Implementation of MAX function to calculate the maximum of integer values as a user-defined aggregate.\nClass AggregateNode.MaxLong; // Implementation of MAX function to calculate the maximum of long values as a user-defined aggregate.\nClass AggregateNode.MinBigDecimal; // Implementation of MIN function to calculate the minimum of BigDecimal values as a user-defined aggregate.\nClass AggregateNode.MinBoolean; // Implementation of MIN function to calculate the minimum of boolean values as a user-defined aggregate.\nClass AggregateNode.MinDouble; // Implementation of MIN function to calculate the minimum of double and real values as a user-defined aggregate.\nClass AggregateNode.MinFloat; // Implementation of MIN function to calculate the minimum of float values as a user-defined aggregate.\n", "des": "Provides an implementation of relational expressions using an interpreter."}
{"index": 2750, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: support\n\nClasses and Interfaces: \npublic interface RepeatInternalState; // Internal interface for extensions of RepeatTemplate.\npublic class RepeatInternalStateSupport extends Object implements RepeatInternalState;\npublic final class RepeatSynchronizationManager extends Object; // Global variable support for repeat clients.\npublic class RepeatTemplate extends Object implements RepeatOperations; // Simple implementation and base class for batch templates implementing RepeatOperations.\n@Deprecated(since=\"5.0\", forRemoval=true) public class ResultHolderResultQueue extends Object;\npublic class TaskExecutorRepeatTemplate extends RepeatTemplate; // Provides RepeatOperations support including interceptors that can be used to modify or monitor the behaviour at run time. This implementation is sufficient to be used to configure transactional behaviour for each item by making the RepeatCallback transactional, or for the whole batch by making the execute method transactional (but only then if the task executor is synchronous). This class is thread-safe if its collaborators are thread-safe (interceptors, terminationPolicy, callback).\n@Deprecated(since=\"5.0\", forRemoval=true) public class ThrottleLimitResultQueue<T> extends Object;\n", "des": "Infrastructure implementations of repeat support concerns."}
{"index": 3008, "repo": "spring-web-6.0.11", "code": "Package: feed\n\nClasses and Interfaces: \npublic abstract class AbstractWireFeedHttpMessageConverter<T extends com.rometools.rome.feed.WireFeed> extends AbstractHttpMessageConverter<T>; // Abstract base class for Atom and RSS Feed message converters, using the ROME tools project.\npublic class AtomFeedHttpMessageConverter extends AbstractWireFeedHttpMessageConverter<com.rometools.rome.feed.atom.Feed>; // Implementation of HttpMessageConverter that can read and write Atom feeds.\npublic class RssChannelHttpMessageConverter extends AbstractWireFeedHttpMessageConverter<com.rometools.rome.feed.rss.Channel>; // Implementation of HttpMessageConverter that can read and write RSS feeds.\n", "des": "Provides HttpMessageConverter implementations for handling Atom and RSS feeds."}
{"index": 2123, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "Package: buildinfo\n\nClasses and Interfaces: \n@DisableCachingByDefault(because=\"Not worth caching\") public abstract class BuildInfo extends DefaultTask; // Task for generating a build-info.properties file from a Project.\npublic abstract class BuildInfoProperties extends Object implements Serializable; // The properties that are written into the build-info.properties file.\n", "des": "Support for producing build info for consumption by Spring Boot's actuator."}
{"index": 1392, "repo": "spring-boot-actuator-3.1.1", "code": "Package: web\n\nSub Packages: \npackage web.annotation; // Annotation support for actuator web endpoints.\npackage web.jersey; // Jersey support for actuator endpoints.\npackage web.reactive; // Spring WebFlux support for actuator endpoints.\npackage web.servlet; // Spring MVC support for actuator endpoints.\n\nClasses and Interfaces: \npublic class EndpointLinksResolver extends Object; // A resolver for links to web endpoints.\npublic class EndpointMapping extends Object; // A value object for the base mapping for endpoints.\npublic class EndpointMediaTypes extends Object; // Media types that are, by default, produced and consumed by an endpoint.\npublic final class EndpointServlet extends Object; // Contains details of a servlet that is exposed as an actuator endpoint.\npublic interface ExposableServletEndpoint extends ExposableEndpoint<Operation>, PathMappedEndpoint; // Information describing an endpoint that can be exposed by registering a servlet.\npublic interface ExposableWebEndpoint extends ExposableEndpoint<WebOperation>, PathMappedEndpoint; // Information describing an endpoint that can be exposed over the web.\npublic class Link extends Object; // Details for a link in a HAL-formatted response.\n@FunctionalInterface public interface PathMappedEndpoint; // Interface that can be implemented by an ExposableEndpoint that is mapped to a root web path.\npublic class PathMappedEndpoints extends Object implements Iterable<PathMappedEndpoint>; // A collection of path mapped endpoints.\n@FunctionalInterface public interface PathMapper; // Strategy interface used to provide a mapping between an endpoint ID and the root path where it will be exposed.\npublic class ServletEndpointRegistrar extends Object implements org.springframework.boot.web.servlet.ServletContextInitializer; // ServletContextInitializer to register servlet endpoints.\npublic enum WebEndpointHttpMethod extends Enum<WebEndpointHttpMethod>; // An enumeration of HTTP methods supported by web endpoint operations.\npublic final class WebEndpointResponse<T> extends Object; // A WebEndpointResponse can be returned by an operation on a @EndpointWebExtension to provide additional, web-specific information such as the HTTP status code.\n@FunctionalInterface public interface WebEndpointsSupplier extends EndpointsSupplier<ExposableWebEndpoint>; // EndpointsSupplier for web endpoints.\npublic interface WebOperation extends Operation; // An operation on a web endpoint.\n", "des": "Web support for actuator endpoints."}
{"index": 3898, "repo": "solr-solrj-9.3.0", "code": "Package: annotation\n\nClasses and Interfaces: \nAnnotation Type JsonProperty; // Provides a 1:1 mapping from jackson's annotation.\n", "des": "Annotations mapping to Jackson"}
{"index": 935, "repo": "commons-compress-1.23.0", "code": "Package: jar\n\nClasses and Interfaces: \nInterface Pack200.Packer; // The interface defining the API for converting a JAR file to an output stream in the Pack200 format.\nInterface Pack200.Unpacker; // The interface defining the API for converting a packed stream in the Pack200 format to a JAR file.\nClass Pack200; // Class factory for Pack200.Packer and Pack200.Unpacker.\n", "des": "Internal package."}
{"index": 3346, "repo": "opencms-core-15.0", "code": "Package: availability\n\nClasses and Interfaces: \nClass CmsAvailabilityDialog; // Availability dialog.\nClass CmsAvailabilityInfoBean; // A bean that holds the informations of the availability dialog.\n", "des": "Contains code for the availability dialog."}
{"index": 3258, "repo": "opencms-core-15.0", "code": "Package: db2\n\nClasses and Interfaces: \nClass CmsHistoryDriver; // DB2 implementation of the history driver methods.\nClass CmsProjectDriver; // DB2 implementation of the project driver methods.\nClass CmsSqlManager; // DB2 implementation of the SQL Manager.\nClass CmsSubscriptionDriver; // DB2 implementation of the subscription driver.\nClass CmsUserDriver; // DB2 implementation of the user driver methods.\nClass CmsVfsDriver; // DB2 implementation of the VFS driver methods.\n", "des": "DB2 implementation of the OpenCms database connector."}
{"index": 1133, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: timelineservice\n\nClasses and Interfaces: \nClass NMTimelineEvent; // Event posted to NMTimelinePublisher which in turn publishes it to timelineservice v2.\nClass NMTimelinePublisher; // Metrics publisher service that publishes data to the timeline service v.2.\nEnum NMTimelineEventType; // Type of NMTimelineEvent.\n", "des": "Package org.apache.hadoop.yarn.server.nodemanager.timelineservice contains classes related to publishing container events and other NM lifecycle events to ATSv2."}
{"index": 1689, "repo": "spring-data-couchbase-5.1.2", "code": "Package: core\n\nSub Packages: \npackage core.convert; // This package contains classes used for entity-to-JSON conversions, type mapping and writing.\npackage core.mapping; // This package contains interfaces and annotations relative to object-json mapping and the notion of a Couchbase Storable.\npackage core.query; // This package contains annotations and classes relative to querying with Couchbase (whether through views or N1QL) and the associated indexes.\n\nClasses and Interfaces: \n@Internal public abstract class AbstractTemplateSupport extends Object; // Base shared by Reactive and non-Reactive TemplateSupport\npublic interface CollectionCallback<T>; // Defines the callback which will be wrapped and executed on a bucket.\npublic class CouchbaseDataIntegrityViolationException extends DataIntegrityViolationException; // A Couchbase specific integrity violation exception, thrown as a result of failing db operations.\npublic class CouchbaseExceptionTranslator extends Object implements PersistenceExceptionTranslator; // Simple PersistenceExceptionTranslator for Couchbase.\npublic interface CouchbaseOperations extends FluentCouchbaseOperations; // Defines common operations on the Couchbase data source, most commonly implemented by CouchbaseTemplate.\npublic class CouchbaseQueryExecutionException extends DataRetrievalFailureException; // An DataRetrievalFailureException that denotes an error during a query (N1QL).\npublic class CouchbaseTemplate extends Object implements CouchbaseOperations, ApplicationContextAware; // Implements lower-level couchbase operations on top of the SDK with entity mapping capabilities.\npublic interface ExecutableExistsByIdOperation; // Insert Operations\npublic static interface ExecutableExistsByIdOperation.ExecutableExistsById extends ExecutableExistsByIdOperation.ExistsByIdInScope; // Provides methods for constructing KV exists operations in a fluent way.\npublic static interface ExecutableExistsByIdOperation.ExistsByIdInCollection<T> extends ExecutableExistsByIdOperation.ExistsByIdWithOptions<T>, InCollection<T>; // Fluent method to specify the collection.\npublic static interface ExecutableExistsByIdOperation.ExistsByIdInScope<T> extends ExecutableExistsByIdOperation.ExistsByIdInCollection<T>, InScope<T>; // Fluent method to specify the scope.\npublic static interface ExecutableExistsByIdOperation.ExistsByIdWithOptions<T> extends ExecutableExistsByIdOperation.TerminatingExistsById, WithExistsOptions<T>; // Fluent method to specify options.\npublic static interface ExecutableExistsByIdOperation.TerminatingExistsById extends OneAndAllExists; // Terminating operations invoking the actual execution.\n", "des": "This package contains the specific implementations and core classes for Spring Data Couchbase internals."}
{"index": 2778, "repo": "spring-security-ldap-6.1.2", "code": "Package: ldap\n\nSub Packages: \npackage ldap.authentication; // The LDAP authentication provider package.\npackage ldap.ppolicy; // Implementation of password policy functionality based on the Password Policy for LDAP Directories.\npackage ldap.search; // LdapUserSearch implementations.\npackage ldap.server; // Embedded Apache Directory Server implementation, as used by the configuration namespace.\npackage ldap.userdetails; // LDAP-focused UserDetails implementations which map from a ubset of the data contained in some of the standard LDAP types (such as InetOrgPerson).\n\nClasses and Interfaces: \npublic class DefaultLdapUsernameToDnMapper extends Object implements LdapUsernameToDnMapper; // This implementation appends a name component to the userDnBase context using the usernameAttributeName property.\npublic class DefaultSpringSecurityContextSource extends org.springframework.ldap.core.support.LdapContextSource; // ContextSource implementation which uses Spring LDAP's LdapContextSource as a base class.\npublic interface LdapUsernameToDnMapper; // Constructs an Ldap Distinguished Name from a username.\npublic final class LdapUtils extends Object; // LDAP Utility methods.\npublic class SpringSecurityLdapTemplate extends org.springframework.ldap.core.LdapTemplate; // Extension of Spring LDAP's LdapTemplate class which adds extra functionality required by Spring Security.\n", "des": "Spring Security's LDAP module."}
{"index": 750, "repo": "artemis-odb-2.3.0", "code": "Package: artemis\n\nSub Packages: \npackage artemis.annotations; // Annotations used by Artemis, both runtime and during compilation,\npackage artemis.managers; // Manager implementations.\npackage artemis.systems; // Entity systems.\npackage artemis.utils; // Helper classes.\n\nClasses and Interfaces: \nInterface ArtemisPlugin; // Plugin for artemis-odb.\nInterface ComponentTypeFactory.ComponentTypeListener;\nInterface EntitySubscription.SubscriptionListener; // This interfaces reports entities inserted or removed when matched against their EntitySubscription\nClass Archetype; // Provides a blueprint for new entities, offering greatly improved insertion performance for systems.\nClass ArchetypeBuilder; // Builder for basic Archetype instances.\nClass Aspect; // An Aspect is used by systems as a matcher against entities, to check if a system is interested in an entity.\nClass Aspect.Builder; // Constructs instances of Aspect.\nClass AspectSubscriptionManager; // Manages all instances of EntitySubscription.\nClass BaseComponentMapper<A extends Component>;\nClass BaseEntitySystem; // Tracks a subset of entities, but does not implement any sorting or iteration.\nClass BaseSystem; // Most basic system.\nClass Component; // Components are pure data classes with optionally some helper methods.\nClass ComponentManager; // Handles the association between entities and their components.\nClass ComponentMapper<A extends Component>; // Provide high performance component access and mutation from within a System.\nClass ComponentPool<T extends PooledComponent>;\nClass ComponentType; // Identifies components in artemis without having to use classes.\nClass ComponentTypeFactory; // Tracks all component types in a single world.\nClass Entity; // The entity convenience class.\nClass EntityEdit; // Entity mutator.\nClass EntityManager; // Manages entity instances.\nClass EntitySubscription; // Maintains the list of entities matched by an aspect.\nClass EntitySubscription.SubscriptionExtra;\nClass EntitySystem; // Tracks a subset of entities, but does not implement any sorting or iteration.\nClass EntityTransmuter; // Fastest way of changing entity component compositions.\nClass EntityTransmuterFactory; // Builder for EntityTransmuter.\nClass ImmediateComponentRemover<A extends Component>;\nClass InvocationStrategy; // Simple sequential invocation strategy.\n", "des": "Core Artemis classes."}
{"index": 2469, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: properties\n\nClasses and Interfaces: \npublic class PropertiesConfigAdapter<T> extends Object; // Base class for properties to config adapters.\npublic abstract class PushRegistryProperties extends Object; // Base class for properties that configure a metrics registry that pushes aggregated metrics on a regular interval.\npublic abstract class PushRegistryPropertiesConfigAdapter<T extends PushRegistryProperties> extends PropertiesConfigAdapter<T> implements io.micrometer.core.instrument.push.PushRegistryConfig; // Base class for PushRegistryProperties to PushRegistryConfig adapters.\npublic abstract class StepRegistryProperties extends PushRegistryProperties; // PushRegistryProperties extensions for registries that are step-normalized.\npublic abstract class StepRegistryPropertiesConfigAdapter<T extends StepRegistryProperties> extends PushRegistryPropertiesConfigAdapter<T>; // Base class for StepRegistryProperties to StepRegistryConfig adapters.\n", "des": "Base properties and adapters used when exporting actuator metrics."}
{"index": 1599, "repo": "spring-websocket-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractHandshakeHandler extends Object implements HandshakeHandler, org.springframework.context.Lifecycle; // A base class for HandshakeHandler implementations, independent of the Servlet API.\npublic class DefaultHandshakeHandler extends AbstractHandshakeHandler implements org.springframework.web.context.ServletContextAware; // A default HandshakeHandler implementation, extending AbstractHandshakeHandler with Servlet-specific initialization support.\npublic class HandshakeInterceptorChain extends Object; // A helper class that assists with invoking a list of handshake interceptors.\npublic class HttpSessionHandshakeInterceptor extends Object implements HandshakeInterceptor; // An interceptor to copy information from the HTTP session to the \"handshake attributes\" map to be made available via WebSocketSession.getAttributes().\npublic class OriginHandshakeInterceptor extends Object implements HandshakeInterceptor; // An interceptor to check request Origin header value against a collection of allowed origins.\npublic class WebSocketHandlerMapping extends org.springframework.web.servlet.handler.SimpleUrlHandlerMapping implements org.springframework.context.SmartLifecycle; // Extension of SimpleUrlHandlerMapping with support for more precise mapping of WebSocket handshake requests to handlers of type WebSocketHttpRequestHandler.\npublic class WebSocketHttpRequestHandler extends Object implements org.springframework.web.HttpRequestHandler, org.springframework.context.Lifecycle, org.springframework.web.context.ServletContextAware; // A HttpRequestHandler for processing WebSocket handshake requests.\n", "des": "Server-side support classes including container-specific strategies for upgrading a request."}
{"index": 3585, "repo": "lucene-test-framework-9.7.0", "code": "Package: dummy\n\nClasses and Interfaces: \nClass DummyCompressingCodec; // CompressionCodec that does not compress data, useful for testing.\n", "des": "Dummy CompressingCodec implementation used for testing."}
{"index": 433, "repo": "kafka-streams-3.5.0", "code": "Package: api\n\nClasses and Interfaces: \nInterface FixedKeyProcessor<KIn,VIn,VOut>; // A processor of key-value pair records where keys are immutable.\nInterface FixedKeyProcessorContext<KForward,VForward>; // Processor context interface for FixedKeyRecord.\nInterface FixedKeyProcessorSupplier<KIn,VIn,VOut>; // A processor supplier that can create one or more FixedKeyProcessor instances.\nInterface ProcessingContext; // Processor context interface.\nInterface Processor<KIn,VIn,KOut,VOut>; // A processor of key-value pair records.\nInterface ProcessorContext<KForward,VForward>; // Processor context interface for Record.\nInterface ProcessorSupplier<KIn,VIn,KOut,VOut>; // A processor supplier that can create one or more Processor instances.\nInterface RecordMetadata;\nClass ContextualFixedKeyProcessor<KIn,VIn,VOut>; // An abstract implementation of FixedKeyProcessor that manages the FixedKeyProcessorContext instance and provides default no-op implementation of FixedKeyProcessor.close().\nClass ContextualProcessor<KIn,VIn,KOut,VOut>; // An abstract implementation of Processor that manages the ProcessorContext instance and provides default no-op implementation of Processor.close().\nClass FixedKeyRecord<K,V>; // A data class representing an incoming record with fixed key for processing in a FixedKeyProcessor or a record to forward to downstream processors via FixedKeyProcessorContext.\nClass InternalFixedKeyRecordFactory;\nClass Record<K,V>; // A data class representing an incoming record for processing in a Processor or a record to forward to downstream processors via ProcessorContext.\n", "des": "Provides a low-level programming model (Processor API, aka, PAPI) to express a (stateful) data flow computation over input topics."}
{"index": 1922, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: domain\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(org.springframework.boot.autoconfigure.domain.EntityScanPackages.Registrar.class) public @interface EntityScan; // Configures the base packages used by auto-configuration when scanning for entity classes.\npublic class EntityScanner extends Object; // An entity scanner that searches the classpath from an @EntityScan specified packages.\npublic class EntityScanPackages extends Object; // Class for storing @EntityScan specified packages for reference later (e.g.\n", "des": "General purpose domain annotations and classes."}
{"index": 753, "repo": "artemis-odb-2.3.0", "code": "Package: systems\n\nClasses and Interfaces: \nClass DelayedEntityProcessingSystem; // Tracks cooldown per entity, processing entity when its timer runs out.\nClass DelayedIteratingSystem; // Tracks cooldown per entity, processing entity when its timer runs out.\nClass EntityProcessingSystem; // Entity reference iterating system.\nClass IntervalEntityProcessingSystem; // Process a subset of entities every x ticks.\nClass IntervalEntitySystem; // A system that processes entities at a interval in milliseconds.\nClass IntervalIteratingSystem; // Process a subset of entities every x ticks.\nClass IntervalSystem; // Entity system processed at a certain interval, without iteration implementation.\nClass IteratingSystem; // Iterates over EntitySubscription member entities by entity identity.\n", "des": "Entity systems."}
{"index": 468, "repo": "jackson-core-2.15.2", "code": "Package: json\n\nSub Packages: \npackage json.async; // Non-blocking (\"async\") JSON parser implementation.\n\nClasses and Interfaces: \nClass ByteSourceJsonBootstrapper; // This class is used to determine the encoding of byte stream that is to contain JSON content.\nClass DupDetector; // Helper class used if JsonParser.Feature.STRICT_DUPLICATE_DETECTION is enabled.\nClass JsonGeneratorImpl; // Intermediate base class shared by JSON-backed generators like UTF8JsonGenerator and WriterBasedJsonGenerator.\nClass JsonReadContext; // Extension of JsonStreamContext, which implements core methods needed, and also exposes more complete API to parser implementation classes.\nClass JsonWriteContext; // Extension of JsonStreamContext, which implements core methods needed, and also exposes more complete API to generator implementation classes.\nClass PackageVersion; // Automatically generated from PackageVersion.java.in during packageVersion-generate execution of maven-replacer-plugin in pom.xml.\nClass ReaderBasedJsonParser; // This is a concrete implementation of JsonParser, which is based on a Reader to handle low-level character conversion tasks.\nClass UTF8DataInputJsonParser; // This is a concrete implementation of JsonParser, which is based on a DataInput as the input source.\nClass UTF8JsonGenerator;\nClass UTF8StreamJsonParser; // This is a concrete implementation of JsonParser, which is based on a InputStream as the input source.\nClass WriterBasedJsonGenerator; // JsonGenerator that outputs JSON content using a Writer which handles character encoding.\nEnum JsonReadFeature; // Token reader (parser) features specific to JSON backend.\nEnum JsonWriteFeature; // Token writer features specific to JSON backend.\n", "des": "JSON-specific parser and generator implementation classes that Jackson defines and uses."}
{"index": 2113, "repo": "spring-retry-2.0.2", "code": "Package: retry\n\nSub Packages: \npackage retry.backoff; // Infrastructure implementations of retry backoff concerns.\npackage retry.context; // Infrastructure implementations of retry context concerns.\npackage retry.interceptor; // Infrastructure implementations of retry aop concerns.\npackage retry.listener; // Infrastructure implementations of retry interceptor concerns.\npackage retry.policy; // Infrastructure implementations of retry policy concerns.\npackage retry.support; // Infrastructure implementations of retry support concerns.\n\nClasses and Interfaces: \npublic class ExhaustedRetryException extends RetryException;\npublic interface RecoveryCallback<T>; // Callback for stateful retry after all tries are exhausted.\npublic interface RetryCallback<T,E extends Throwable>; // Callback interface for an operation that can be retried using a RetryOperations.\npublic interface RetryContext extends org.springframework.core.AttributeAccessor; // Low-level access to ongoing retry operation.\npublic class RetryException extends org.springframework.core.NestedRuntimeException;\npublic interface RetryListener; // Interface for listener that can be used to add behaviour to a retry.\npublic interface RetryOperations; // Defines the basic set of operations implemented by RetryOperations to execute operations with configurable retry behaviour.\npublic interface RetryPolicy extends Serializable; // A RetryPolicy is responsible for allocating and managing resources needed by RetryOperations.\npublic interface RetryState; // Stateful retry is characterised by having to recognise the items that are being processed, so this interface is used primarily to provide a cache key in between failed attempts.\npublic interface RetryStatistics; // Interface for statistics reporting of retry attempts.\npublic class TerminatedRetryException extends RetryException;\n", "des": "Infrastructure implementations of retry concerns."}
{"index": 2266, "repo": "spring-vault-core-3.0.4", "code": "Package: util\n\nClasses and Interfaces: \npublic class KeyValueDelegate extends Object; // Key-Value utility to retrieve secrets from a versioned key-value backend.\npublic static class KeyValueDelegate.MountInfo extends Object;\n@FunctionalInterface public interface PropertyTransformer; // Strategy interface to transform properties to a new key-value Map in a functional style.\npublic abstract class PropertyTransformers extends Object; // Implementations of PropertyTransformer that provide various useful property transformation operations, prefixing, etc.\npublic static class PropertyTransformers.KeyPrefixPropertyTransformer extends Object implements PropertyTransformer; // PropertyTransformer that adds a prefix to each key name.\npublic static class PropertyTransformers.NoOpPropertyTransformer extends Object implements PropertyTransformer; // PropertyTransformer that passes the given properties through without returning changed properties.\n", "des": "Property transformer classes for Spring Vault core support."}
{"index": 3446, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface ConnectionProvider; // A contract for obtaining JDBC connections.\nInterface JdbcConnectionAccess; // Provides centralized access to JDBC connections.\nInterface MultiTenantConnectionProvider; // A specialized Connection provider contract used when the application is using multi-tenancy support requiring tenant aware connections.\nClass AbstractDataSourceBasedMultiTenantConnectionProviderImpl; // Basic support for implementations of MultiTenantConnectionProvider based on DataSources.\nClass AbstractMultiTenantConnectionProvider; // Basic support for MultiTenantConnectionProvider implementations using individual ConnectionProvider instances per tenant behind the scenes.\nClass DataSourceBasedMultiTenantConnectionProviderImpl; // A concrete implementation of the MultiTenantConnectionProvider contract bases on a number of reasonable assumptions.\n", "des": "Defines contracts for accessing JDBC Connections"}
{"index": 1465, "repo": "spring-data-redis-3.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class QueryByExampleRedisExecutor<T> extends Object implements QueryByExampleExecutor<T>, BeanFactoryAware, BeanClassLoaderAware; // Repository fragment implementing Redis Query-by-Example operations.\npublic class RedisRepositoryFactory extends org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactory; // RepositoryFactorySupport specific of handing Redis KeyValueRepository.\npublic class RedisRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactoryBean<T,S,ID>; // Adapter for Springs FactoryBean interface to allow easy setup of RedisRepositoryFactory via Spring configuration.\n", "des": "Spring context specific factory support."}
{"index": 2804, "repo": "spring-security-oauth2-core-6.1.2", "code": "Package: endpoint\n\nClasses and Interfaces: \npublic final class OidcParameterNames extends Object; // Standard parameter names defined in the OAuth Parameters Registry and used by the authorization endpoint and token endpoint.\n", "des": "Support classes that model the OpenID Connect Core 1.0 Request and Response messages from the Authorization Endpoint and Token Endpoint."}
{"index": 1441, "repo": "spring-boot-actuator-3.1.1", "code": "Package: servlet\n\nClasses and Interfaces: \npublic class DispatcherServletMappingDescription extends Object; // A description of a mapping known to a DispatcherServlet.\npublic class DispatcherServletMappingDetails extends Object; // Details of a DispatcherServlet mapping.\n@ImportRuntimeHints(org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider.DispatcherServletsMappingDescriptionProviderRuntimeHints.class) public class DispatcherServletsMappingDescriptionProvider extends Object implements MappingDescriptionProvider; // A MappingDescriptionProvider that introspects the HandlerMappings that are known to one or more DispatcherServlets.\npublic class FilterRegistrationMappingDescription extends RegistrationMappingDescription<jakarta.servlet.FilterRegistration>; // A RegistrationMappingDescription derived from a FilterRegistration.\n@ImportRuntimeHints(org.springframework.boot.actuate.web.mappings.servlet.FiltersMappingDescriptionProvider.FiltersMappingDescriptionProviderRuntimeHints.class) public class FiltersMappingDescriptionProvider extends Object implements MappingDescriptionProvider; // A MappingDescriptionProvider that describes that mappings of any Filters registered with a ServletContext.\npublic class RegistrationMappingDescription<T extends jakarta.servlet.Registration> extends Object; // A mapping description derived from a Registration.\npublic class RequestMappingConditionsDescription extends Object; // Description of the conditions of a RequestMappingInfo.\npublic static class RequestMappingConditionsDescription.MediaTypeExpressionDescription extends Object; // A description of a MediaTypeExpression in a request mapping condition.\npublic static class RequestMappingConditionsDescription.NameValueExpressionDescription extends Object; // A description of a NameValueExpression in a request mapping condition.\npublic class ServletRegistrationMappingDescription extends RegistrationMappingDescription<jakarta.servlet.ServletRegistration>; // A mapping description derived from a ServletRegistration.\n@ImportRuntimeHints(org.springframework.boot.actuate.web.mappings.servlet.ServletsMappingDescriptionProvider.ServletsMappingDescriptionProviderRuntimeHints.class) public class ServletsMappingDescriptionProvider extends Object implements MappingDescriptionProvider; // A MappingDescriptionProvider that describes that mappings of any Servlets registered with a ServletContext.\n", "des": "Actuator servlet request mappings support."}
{"index": 2182, "repo": "spring-security-web-6.1.2", "code": "Package: x509\n\nClasses and Interfaces: \npublic class SubjectDnX509PrincipalExtractor extends Object implements X509PrincipalExtractor, org.springframework.context.MessageSourceAware; // Obtains the principal from a certificate using a regular expression match against the Subject (as returned by a call to X509Certificate.getSubjectDN()).\npublic class X509AuthenticationFilter extends AbstractPreAuthenticatedProcessingFilter;\npublic interface X509PrincipalExtractor; // Obtains the principal from an X509Certificate for use within the framework.\n", "des": "X.509 client certificate authentication support."}
{"index": 2558, "repo": "pulsar-common-3.0.0", "code": "Package: net\n\nClasses and Interfaces: \npublic class ServiceURI extends Object; // ServiceURI represents service uri within pulsar cluster.\n", "des": "Classes for network configuration."}
{"index": 323, "repo": "kafka-clients-3.5.0", "code": "Package: errors\n\nClasses and Interfaces: \nClass ApiException; // Any API exception that is part of the public protocol and should be a subclass of this class and be part of this package.\nClass AuthenticationException; // This exception indicates that SASL authentication has failed.\nClass AuthorizationException;\nClass AuthorizerNotReadyException; // An exception that indicates that the authorizer is not ready to receive the request yet.\nClass BrokerIdNotRegisteredException;\nClass BrokerNotAvailableException;\nClass ClusterAuthorizationException;\nClass ConcurrentTransactionsException;\nClass ControllerMovedException;\nClass CoordinatorLoadInProgressException; // In the context of the group coordinator, the broker returns this error code for any coordinator request if it is still loading the group metadata (e.g.\nClass CoordinatorNotAvailableException; // In the context of the group coordinator, the broker returns this error code for metadata or offset commit requests if the group metadata topic has not been created yet.\nClass CorruptRecordException; // This exception indicates a record has failed its internal CRC check, this generally indicates network or disk corruption.\nClass DelegationTokenAuthorizationException;\nClass DelegationTokenDisabledException;\nClass DelegationTokenExpiredException;\nClass DelegationTokenNotFoundException;\nClass DelegationTokenOwnerMismatchException;\nClass DisconnectException; // Server disconnected before a request could be completed.\nClass DuplicateBrokerRegistrationException;\nClass DuplicateResourceException; // Exception thrown due to a request that illegally refers to the same resource twice (for example, trying to both create and delete the same SCRAM credential for a particular user in a single request).\nClass DuplicateSequenceException;\nClass ElectionNotNeededException;\nClass EligibleLeadersNotAvailableException;\nClass FeatureUpdateFailedException;\nClass FencedInstanceIdException;\nClass FencedLeaderEpochException; // The request contained a leader epoch which is smaller than that on the broker that received the request.\nClass FencedMemberEpochException;\nClass FetchSessionIdNotFoundException;\nClass FetchSessionTopicIdException;\nClass GroupAuthorizationException;\nClass GroupIdNotFoundException;\nClass GroupMaxSizeReachedException; // Indicates that a consumer group is already at its configured maximum capacity and cannot accommodate more members\nClass GroupNotEmptyException;\nClass GroupSubscribedToTopicException;\nClass IllegalGenerationException;\nClass IllegalSaslStateException; // This exception indicates unexpected requests prior to SASL authentication.\nClass InconsistentClusterIdException;\n", "des": "Provides common exception classes."}
{"index": 2063, "repo": "spring-webmvc-6.0.11", "code": "Package: servlet\n\nSub Packages: \npackage servlet.config; // Defines the XML configuration namespace for Spring MVC.\npackage servlet.function; // Provides the types that make up Spring's functional web framework for Servlet environments.\npackage servlet.handler; // Provides standard HandlerMapping implementations, including abstract base classes for custom implementations.\npackage servlet.i18n; // Locale support classes for Spring's web MVC framework.\npackage servlet.mvc; // Standard controller implementations for the Servlet MVC framework that comes with Spring.\npackage servlet.resource; // Support classes for serving static resources.\npackage servlet.support; // Support classes for Spring's web MVC framework.\npackage servlet.tags; // This package contains Spring's JSP standard tag library for JSP 2.0+.\npackage servlet.theme; // Theme support classes for Spring's web MVC framework.\npackage servlet.view; // Provides standard View and ViewResolver implementations, including abstract base classes for custom implementations.\n\nClasses and Interfaces: \npublic interface AsyncHandlerInterceptor extends HandlerInterceptor; // Extends HandlerInterceptor with a callback method invoked after the start of asynchronous request handling.\npublic class DispatcherServlet extends FrameworkServlet; // Central dispatcher for HTTP request handlers/controllers, e.g.\npublic final class FlashMap extends HashMap<String,Object> implements Comparable<FlashMap>; // A FlashMap provides a way for one request to store attributes intended for use in another.\npublic interface FlashMapManager; // A strategy interface for retrieving and saving FlashMap instances.\npublic abstract class FrameworkServlet extends HttpServletBean implements org.springframework.context.ApplicationContextAware; // Base servlet for Spring's web framework.\npublic interface HandlerAdapter; // MVC framework SPI, allowing parameterization of the core MVC workflow.\npublic interface HandlerExceptionResolver; // Interface to be implemented by objects that can resolve exceptions thrown during handler mapping or execution, in the typical case to error views.\npublic class HandlerExecutionChain extends Object; // Handler execution chain, consisting of handler object and any handler interceptors.\npublic interface HandlerInterceptor; // Workflow interface that allows for customized handler execution chains.\npublic interface HandlerMapping; // Interface to be implemented by objects that define a mapping between requests and handler objects.\n", "des": "Provides servlets that integrate with the application context infrastructure, and the core interfaces and classes for the Spring web MVC framework."}
{"index": 1478, "repo": "tribuo-core-4.3.1", "code": "Package: dataset\n\nClasses and Interfaces: \npublic final class DatasetView<T extends Output<T>> extends ImmutableDataset<T>; // DatasetView provides an immutable view on another Dataset that only exposes selected examples.\npublic static final class DatasetView.DatasetViewProvenance extends DatasetProvenance; // Provenance for the DatasetView.\npublic class MinimumCardinalityDataset<T extends Output<T>> extends ImmutableDataset<T>; // This class creates a pruned dataset in which low frequency features that occur less than the provided minimum cardinality have been removed.\npublic static class MinimumCardinalityDataset.MinimumCardinalityDatasetProvenance extends DatasetProvenance; // Provenance for MinimumCardinalityDataset.\npublic final class SelectedFeatureDataset<T extends Output<T>> extends ImmutableDataset<T>; // This class creates a pruned dataset which only contains the selected features.\npublic static final class SelectedFeatureDataset.SelectedFeatureDatasetProvenance extends DatasetProvenance; // Provenance for SelectedFeatureDataset.\n", "des": "Provides utility datasets which subsample or otherwise transform the wrapped dataset."}
{"index": 1759, "repo": "spring-data-mongodb-4.1.2", "code": "Package: messaging\n\nClasses and Interfaces: \npublic interface Cancelable; // Cancelable allows stopping long running tasks and freeing underlying resources.\npublic class ChangeStreamRequest<T> extends Object implements SubscriptionRequest<com.mongodb.client.model.changestream.ChangeStreamDocument<org.bson.Document>,T,ChangeStreamRequest.ChangeStreamRequestOptions>; // SubscriptionRequest implementation to be used for listening to Change Streams via a MessageListenerContainer using the synchronous MongoDB Java driver.\npublic static class ChangeStreamRequest.ChangeStreamRequestBuilder<T> extends Object; // Builder for creating ChangeStreamRequest.\npublic static class ChangeStreamRequest.ChangeStreamRequestOptions extends Object implements SubscriptionRequest.RequestOptions; // SubscriptionRequest.RequestOptions implementation specific to a ChangeStreamRequest.\npublic class DefaultMessageListenerContainer extends Object implements MessageListenerContainer; // Simple Executor based MessageListenerContainer implementation for running tasks like listening to MongoDB Change Streams and tailable cursors.\npublic interface Message<S,T>; // General message abstraction for any type of Event / Message published by MongoDB server to the client.\npublic static class Message.MessageProperties extends Object;\npublic static class Message.MessageProperties.MessagePropertiesBuilder extends Object; // Builder for Message.MessageProperties.\n@FunctionalInterface public interface MessageListener<S,T>; // Listener interface to receive delivery of Messages.\npublic interface MessageListenerContainer extends SmartLifecycle; // Internal abstraction used by the framework representing a message listener container.\npublic interface Subscription extends Cancelable; // The Subscription is the link between the SubscriptionRequest and the actual running Task.\npublic interface SubscriptionRequest<S,T,O extends SubscriptionRequest.RequestOptions>; // The actual SubscriptionRequest sent to the MessageListenerContainer.\npublic static interface SubscriptionRequest.RequestOptions; // Options for specifying the behaviour of the SubscriptionRequest.\npublic class TailableCursorRequest<T> extends Object implements SubscriptionRequest<org.bson.Document,T,SubscriptionRequest.RequestOptions>; // SubscriptionRequest implementation to be used to listen to query results in a Capped Collection using a Tailable Cursor.\npublic static class TailableCursorRequest.TailableCursorRequestBuilder<T> extends Object; // Builder for creating TailableCursorRequest.\n", "des": "MongoDB specific messaging support for listening to eg."}
{"index": 3724, "repo": "solr-core-9.3.0", "code": "Package: vector\n\nClasses and Interfaces: \nClass ByteDenseVectorParser;\nClass DenseVectorParser;\nClass FloatDenseVectorParser;\nEnum DenseVectorParser.BuilderPhase;\n", "des": "Utilities for dense vector search"}
{"index": 1421, "repo": "spring-boot-actuator-3.1.1", "code": "Package: system\n\nClasses and Interfaces: \npublic class DiskSpaceMetricsBinder extends Object implements io.micrometer.core.instrument.binder.MeterBinder; // A MeterBinder that binds one or more DiskSpaceMetrics.\n", "des": "Actuator support for system metrics."}
{"index": 2678, "repo": "spring-data-jpa-3.1.2", "code": "Package: convert\n\nSub Packages: \npackage convert.threeten; // Spring Data JPA specific JSR-310 converters.\n\nClasses and Interfaces: \npublic class QueryByExamplePredicateBuilder extends Object; // QueryByExamplePredicateBuilder creates a single CriteriaBuilder.and(Predicate...) combined Predicate for a given Example.\n", "des": "Spring Data JPA specific converter infrastructure."}
{"index": 2450, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: metrics\n\nSub Packages: \npackage metrics.amqp; // Auto-configuration for RabbitMQ metrics.\npackage metrics.cache; // Auto-configuration for cache metrics.\npackage metrics.data; // Auto-configuration for Spring Data actuator metrics.\npackage metrics.export; // Auto-configuration for metrics exporter.\npackage metrics.jdbc; // Auto-configuration for JPA metrics.\npackage metrics.jersey; // Auto-configuration for Jersey actuator metrics.\npackage metrics.mongo; // Auto-configuration for Mongo metrics.\npackage metrics.r2dbc; // Auto-configuration for R2DBC metrics.\npackage metrics.redis; // Auto-configuration for Redis metrics.\npackage metrics.startup; // Auto-configuration for actuator startup time metrics.\npackage metrics.task; // Auto-configuration for task execution and scheduling metrics.\n\nClasses and Interfaces: \npublic final class AutoTimeProperties extends Object; // Nested configuration properties for items that are automatically timed.\n@AutoConfiguration @Import({org.springframework.boot.actuate.autoconfigure.metrics.NoOpMeterRegistryConfiguration.class,org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryConfiguration.class}) @ConditionalOnClass(io.micrometer.core.instrument.composite.CompositeMeterRegistry.class) public class CompositeMeterRegistryAutoConfiguration extends Object; // Auto-configuration for a CompositeMeterRegistry.\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.core.instrument.MeterRegistry.class) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class JvmMetricsAutoConfiguration extends Object; // Auto-configuration for JVM metrics.\n", "des": "Auto-configuration for actuator metrics and Micrometer."}
{"index": 1454, "repo": "spring-data-redis-3.1.2", "code": "Package: mapping\n\nClasses and Interfaces: \npublic class BasicRedisPersistentEntity<T> extends org.springframework.data.keyvalue.core.mapping.BasicKeyValuePersistentEntity<T,RedisPersistentProperty> implements RedisPersistentEntity<T>; // RedisPersistentEntity implementation.\npublic class RedisMappingContext extends org.springframework.data.keyvalue.core.mapping.context.KeyValueMappingContext<RedisPersistentEntity<?>,RedisPersistentProperty>; // Redis specific MappingContext.\npublic interface RedisPersistentEntity<T> extends org.springframework.data.keyvalue.core.mapping.KeyValuePersistentEntity<T,RedisPersistentProperty>; // Redis specific PersistentEntity.\npublic class RedisPersistentProperty extends org.springframework.data.keyvalue.core.mapping.KeyValuePersistentProperty<RedisPersistentProperty>; // Redis specific PersistentProperty implementation.\n", "des": "Redis specific repository support mapping meta information."}
{"index": 1505, "repo": "spring-context-6.0.11", "code": "Package: interceptor\n\nClasses and Interfaces: \npublic abstract class AbstractCacheInvoker extends Object; // A base component for invoking Cache operations and using a configurable CacheErrorHandler when an exception occurs.\npublic abstract class AbstractCacheResolver extends Object implements CacheResolver, org.springframework.beans.factory.InitializingBean; // A base CacheResolver implementation that requires the concrete implementation to provide the collection of cache name(s) based on the invocation context.\npublic abstract class AbstractFallbackCacheOperationSource extends Object implements CacheOperationSource; // Abstract implementation of CacheOperation that caches attributes for methods and implements a fallback policy: 1.\npublic interface BasicOperation; // The base interface that all cache operations must implement.\npublic class BeanFactoryCacheOperationSourceAdvisor extends org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor; // Advisor driven by a CacheOperationSource, used to include a cache advice bean for methods that are cacheable.\npublic class CacheableOperation extends CacheOperation; // Class describing a cache 'cacheable' operation.\npublic static class CacheableOperation.Builder extends CacheOperation.Builder; // A builder that can be used to create a CacheableOperation.\npublic abstract class CacheAspectSupport extends AbstractCacheInvoker implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.SmartInitializingSingleton; // Base class for caching aspects, such as the CacheInterceptor or an AspectJ aspect.\nprotected static class CacheAspectSupport.CacheOperationMetadata extends Object; // Metadata of a cache operation that does not depend on a particular invocation which makes it a good candidate for caching.\npublic interface CacheErrorHandler; // A strategy for handling cache-related errors.\npublic class CacheEvictOperation extends CacheOperation; // Class describing a cache 'evict' operation.\npublic static class CacheEvictOperation.Builder extends CacheOperation.Builder; // A builder that can be used to create a CacheEvictOperation.\npublic class CacheInterceptor extends CacheAspectSupport implements org.aopalliance.intercept.MethodInterceptor, Serializable; // AOP Alliance MethodInterceptor for declarative cache management using the common Spring caching infrastructure (Cache).\npublic abstract class CacheOperation extends Object implements BasicOperation; // Base class for cache operations.\n", "des": "AOP-based solution for declarative caching demarcation."}
{"index": 33, "repo": "phoenix-core-5.1.3", "code": "Package: i18n\n\nClasses and Interfaces: \nClass OracleUpper; // This utility class was partially copied from Salesforce's internationalization utility library (com.salesforce.i18n:i18n-util:1.0.4), which was released under the 3-clause BSD License.\nEnum LinguisticSort; // This utility class was partially copied from Salesforce's internationalization utility library (com.salesforce.i18n:i18n-util:1.0.4), which was released under the 3-clause BSD License.\nEnum LocaleUtils; // This utility class was partially copied from Salesforce's internationalization utility library (com.salesforce.i18n:i18n-util:1.0.4), which was released under the 3-clause BSD License.\nEnum OracleUpperTable; // This utility class was partially copied from Salesforce's internationalization utility library (com.salesforce.i18n:i18n-util:1.0.4), which was released under the 3-clause BSD License.\n", "des": "This package contains utility classes partially copied from Salesforce's internationalization utility library (com.salesforce.i18n:i18n-util:1.0.4), which was released under the 3-clause BSD License."}
{"index": 3170, "repo": "tomcat-api-10.1", "code": "Package: jmx\n\nClasses and Interfaces: \nClass Arg;\nClass JMXAccessorCondition; // Definition:\nClass JMXAccessorConditionBase;\nClass JMXAccessorCreateTask; // Create new MBean at JMX JSR 160 MBeans Server.\nClass JMXAccessorEqualsCondition; // Definition\nClass JMXAccessorGetTask; // Access JMX JSR 160 MBeans Server.\nClass JMXAccessorInvokeTask; // Access JMX JSR 160 MBeans Server.\nClass JMXAccessorQueryTask; // Query for Mbeans.\nClass JMXAccessorSetTask; // Access JMX JSR 160 MBeans Server.\nClass JMXAccessorTask; // Access JMX JSR 160 MBeans Server.\nClass JMXAccessorUnregisterTask; // unregister an MBean at JMX JSR 160 MBeans Server.\n", "des": "This package contains a set of JMX Task implementations for Ant (version 1.6 or later) that can be used to interact with the Remote JMX JSR 160 RMI Adaptor to get/set attributes, invoke MBean operations and query for Mbeans inside a running instance of Tomcat."}
{"index": 2703, "repo": "spring-integration-ftp-6.1.2", "code": "Package: gateway\n\nClasses and Interfaces: \npublic class FtpOutboundGateway extends org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway<org.apache.commons.net.ftp.FTPFile>; // Outbound Gateway for performing remote file operations via FTP/FTPS.\n", "des": "Provides classes supporting FTP gateways."}
{"index": 2144, "repo": "wicket-core-10.0.0-M1", "code": "Package: basic\n\nClasses and Interfaces: \npublic class EnclosureContainer extends WebMarkupContainer; // <wicket:enclosure> is nice and prevents that users have to add boilerplate to their application.\npublic class EnumLabel<T extends Enum<T>> extends WebComponent implements IGenericComponent<T,EnumLabel<T>>; // A Label component that is used to render an enum value.\npublic class Label extends WebComponent; // A Label component replaces its body with the String version of its model object returned by getModelObjectAsString().\npublic class MultiLineLabel extends WebComponent; // A MultiLineLabel component replaces its body with the model object.\n", "des": "Basic HTML components."}
{"index": 485, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: schemas\n\nSub Packages: \npackage schemas.annotations; // Defines Schema and other classes for representing schema'd data in a Pipeline.\npackage schemas.io; // Provides abstractions for schema-aware IOs.\npackage schemas.logicaltypes; // A set of common LogicalTypes for use with schemas.\npackage schemas.parser; // Defines utilities for deailing with schemas.\npackage schemas.transforms; // Defines transforms that work on PCollections with schemas..\npackage schemas.utils; // Defines utilities for deailing with schemas.\n\nClasses and Interfaces: \nInterface Factory<T>; // A Factory interface for schema-related objects for a specific Java type.\nInterface FieldValueGetter<ObjectT,ValueT>; // For internal use only; no backwards-compatibility guarantees.\nInterface FieldValueSetter<ObjectT,ValueT>; // For internal use only; no backwards-compatibility guarantees.\nInterface ProjectionConsumer; // A ProjectionConsumer is a Schema-aware operation (such as a DoFn or PTransform) that has a FieldAccessDescriptor describing which fields the operation accesses.\nInterface ProjectionProducer<T>; // A factory for operations that execute a projection on a Schema-aware PCollection.\nInterface Schema.LogicalType<InputT,BaseT>; // A LogicalType allows users to define a custom schema type.\nInterface SchemaProvider; // Concrete implementations of this class allow creation of schema service objects that vend a Schema for a specific type.\nInterface SchemaProviderRegistrar; // SchemaProvider creators have the ability to automatically have their schemaProvider registered with this SDK by creating a ServiceLoader entry and a concrete implementation of this interface.\nInterface SchemaUserTypeCreator; // A creator interface for user types that have schemas.\nClass AutoValueSchema; // A SchemaProvider for AutoValue classes.\nClass AutoValueSchema.AbstractGetterTypeSupplier; // FieldValueTypeSupplier that's based on AutoValue getters.\nClass AvroRecordSchema; // Avro related classes are deprecated in module beam-sdks-java-core and will be eventually removed.\nClass CachingFactory<CreatedT>; // A wrapper around a Factory that assumes the schema parameter never changes.\nClass FieldAccessDescriptor; // Used inside of a DoFn to describe which fields in a schema type need to be accessed for processing.\n", "des": "Defines Schema and other classes for representing schema'd data in a Pipeline."}
{"index": 713, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: scripting\n\nClasses and Interfaces: \nClass ScriptMessageSourceSpec; // The MessageSourceSpec for Dynamic Language Scripts.\nClass Scripts; // The factory for Dynamic Language Scripts (Groovy, Ruby, Python, JavaScript etc.).\nClass ScriptSpec; // The MessageProcessorSpec implementation for the DslScriptExecutingMessageProcessor.\n", "des": "Provides Scripting Components support for Spring Integration Java DSL."}
{"index": 3036, "repo": "spring-web-6.0.11", "code": "Package: method\n\nSub Packages: \npackage method.annotation; // Support classes for annotation-based handler method processing.\npackage method.support; // Generic support classes for handler method processing.\n\nClasses and Interfaces: \npublic class ControllerAdviceBean extends Object implements org.springframework.core.Ordered; // Encapsulates information about an @ControllerAdvice Spring-managed bean without necessarily requiring it to be instantiated.\npublic class HandlerMethod extends Object; // Encapsulates information about a handler method consisting of a method and a bean.\npublic final class HandlerTypePredicate extends Object implements Predicate<Class<?>>; // A Predicate to match request handling component types if any of the following selectors match: Base packages -- for selecting handlers by their package.\npublic static class HandlerTypePredicate.Builder extends Object; // A HandlerTypePredicate builder.\n", "des": "Common infrastructure for handler method processing, as used by Spring MVC's org.springframework.web.servlet.mvc.method package."}
{"index": 1385, "repo": "spring-boot-actuator-3.1.1", "code": "Package: invoke\n\nSub Packages: \npackage invoke.convert; // Converter support for actuator endpoints.\npackage invoke.reflect; // Endpoint reflection support.\n\nClasses and Interfaces: \npublic final class MissingParametersException extends InvalidEndpointRequestException; // RuntimeException thrown when an endpoint invocation does not contain required parameters.\n@FunctionalInterface public interface OperationInvoker; // Interface to perform an operation invocation.\n@FunctionalInterface public interface OperationInvokerAdvisor; // Allows additional functionality to be applied to an OperationInvoker.\npublic interface OperationParameter; // A single operation parameter.\npublic interface OperationParameters extends Iterable<OperationParameter>; // A collection of operation parameters.\npublic final class ParameterMappingException extends InvalidEndpointRequestException; // A ParameterMappingException is thrown when a failure occurs during operation parameter mapping.\n@FunctionalInterface public interface ParameterValueMapper; // Maps parameter values to the required type when invoking an endpoint.\n", "des": "Interfaces and classes relating to invoking operation methods."}
{"index": 3732, "repo": "lucene-queryparser-9.7.0", "code": "Package: messages\n\nClasses and Interfaces: \nClass QueryParserMessages; // Flexible Query Parser message bundle class\n", "des": "Messages usually used by query parser implementations."}
{"index": 2250, "repo": "spring-data-keyvalue-3.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class KeyValueRepositoryFactory extends RepositoryFactorySupport; // RepositoryFactorySupport specific of handing KeyValueRepository.\npublic class KeyValueRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends RepositoryFactoryBeanSupport<T,S,ID>; // FactoryBean to create KeyValueRepository.\npublic class QuerydslKeyValuePredicateExecutor<T> extends Object implements ListQuerydslPredicateExecutor<T>; // QuerydslPredicateExecutor capable of applying Predicates using CollQuery.\n@Deprecated public class QuerydslKeyValueRepository<T,ID> extends SimpleKeyValueRepository<T,ID> implements QuerydslPredicateExecutor<T>;\npublic class SimpleKeyValueRepository<T,ID> extends Object implements KeyValueRepository<T,ID>; // Simple KeyValueRepository implementation.\n", "des": "Support infrastructure for query derivation of key/value specific repositories."}
{"index": 623, "repo": "freemarker-2.3.32", "code": "Package: dom\n\nClasses and Interfaces: \nInterface XPathSupport;\nClass NodeModel; // A base class for wrapping a single W3C DOM Node as a FreeMarker template model.\nClass Transform; // Will be removed (main method in a library, often classified as CWE-489 \"Leftover Debug Code\").\n", "des": "Exposes DOM XML nodes to templates as easily traversable trees; see in the Manual."}
{"index": 3162, "repo": "tika-core-2.8.0", "code": "Package: sax\n\nSub Packages: \npackage sax.xpath; // XPath utilities\n\nClasses and Interfaces: \nInterface ContentHandlerDecoratorFactory;\nInterface ContentHandlerFactory; // Interface to allow easier injection of code for getting a new ContentHandler\nInterface SafeContentHandler.Output; // Internal interface that allows both character and ignorable whitespace content to be filtered the same way.\nInterface WriteLimiter;\nClass AbstractRecursiveParserWrapperHandler; // This is a special handler to be used only with the RecursiveParserWrapper.\nClass BasicContentHandlerFactory; // Basic factory for creating common types of ContentHandlers\nClass BodyContentHandler; // Content handler decorator that only passes everything inside the XHTML <body/> tag to the underlying handler.\nClass CleanPhoneText; // Class to help de-obfuscate phone numbers in text.\nClass ContentHandlerDecorator; // Decorator base class for the ContentHandler interface.\nClass DIFContentHandler;\nClass ElementMappingContentHandler; // Content handler decorator that maps element QNames using a Map.\nClass ElementMappingContentHandler.TargetElement;\nClass EmbeddedContentHandler; // Content handler decorator that prevents the EmbeddedContentHandler.startDocument() and EmbeddedContentHandler.endDocument() events from reaching the decorated handler.\nClass EndDocumentShieldingContentHandler; // A wrapper around a ContentHandler which will ignore normal SAX calls to EndDocumentShieldingContentHandler.endDocument(), and only fire them later.\nClass ExpandedTitleContentHandler; // Content handler decorator which wraps a TransformerHandler in order to allow the TITLE tag to render as <title></title> rather than <title/> which is accomplished by calling the ContentHandler.characters(char[], int, int) method with a length of 1 but a zero length char array.\nClass Link;\nClass LinkContentHandler; // Content handler that collects links from an XHTML document.\nClass OfflineContentHandler; // Content handler decorator that always returns an empty stream from the OfflineContentHandler.resolveEntity(String, String) method to prevent potential network or other external resources from being accessed by an XML parser.\nClass PhoneExtractingContentHandler; // Class used to extract phone numbers while parsing.\nClass RecursiveParserWrapperHandler; // This is the default implementation of AbstractRecursiveParserWrapperHandler.\n", "des": "SAX utilities."}
{"index": 505, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: values\n\nClasses and Interfaces: \nInterface PCollectionView<T>; // A PCollectionView<T> is an immutable view of a PCollection as a value of type T that can be accessed as a side input to a ParDo transform.\nInterface PCollectionViews.HasDefaultValue<T>;\nInterface PCollectionViews.IsSingletonView<T>;\nInterface PCollectionViews.TypeDescriptorSupplier<T>;\nInterface PInput; // The interface for things that might be input to a PTransform.\nInterface POutput; // The interface for things that might be output from a PTransform.\nInterface PValue; // For internal use.\nInterface TypeDescriptors.TypeVariableExtractor<InputT,OutputT>; // A helper interface for use with TypeDescriptors.extractFromTypeParameters(Object, Class, TypeVariableExtractor).\nClass EncodableThrowable; // A wrapper around a Throwable for use with coders.\nClass FailsafeValueInSingleWindow<T,ErrorT>; // An immutable tuple of value, timestamp, window, and pane.\nClass FailsafeValueInSingleWindow.Coder<T,ErrorT>; // A coder for FailsafeValueInSingleWindow.\nClass KV<K,V>; // An immutable key/value pair.\nClass KV.OrderByKey<K extends java.lang.Comparable<? super K>,V>; // A Comparator that orders KVs by the natural ordering of their keys.\nClass KV.OrderByValue<K,V extends java.lang.Comparable<? super V>>; // A Comparator that orders KVs by the natural ordering of their values.\nClass PBegin; // PBegin is the \"input\" to a root PTransform, such as Read or Create.\nClass PCollection<T>; // A PCollection<T> is an immutable collection of values of type T.\nClass PCollectionList<T>; // A PCollectionList<T> is an immutable list of homogeneously typed PCollection<T>s.\nClass PCollectionRowTuple; // A PCollectionRowTuple is an immutable tuple of PCollections, \"keyed\" by a string tag.\nClass PCollectionTuple; // A PCollectionTuple is an immutable tuple of heterogeneously-typed PCollections, \"keyed\" by TupleTags.\n", "des": "Defines PCollection and other classes for representing data in a Pipeline."}
{"index": 886, "repo": "cassandra-all-4.1.2", "code": "Package: streaming\n\nClasses and Interfaces: \nInterface IStreamReader; // This is the interface is used by the streaming code read a SSTable stream off a channel.\nClass CassandraCompressedStreamReader; // CassandraStreamReader that reads from streamed compressed SSTable\nClass CassandraCompressedStreamWriter; // CassandraStreamWriter for compressed SSTable.\nClass CassandraEntireSSTableStreamReader; // CassandraEntireSSTableStreamReader reads SSTable off the wire and writes it to disk.\nClass CassandraEntireSSTableStreamWriter; // CassandraEntireSSTableStreamWriter streams the entire SSTable to given channel.\nClass CassandraIncomingFile; // used to receive the part(or whole) of a SSTable data file.\nClass CassandraOutgoingFile; // used to transfer the part(or whole) of a SSTable data file\nClass CassandraStreamHeader;\nClass CassandraStreamHeader.Builder;\nClass CassandraStreamHeader.CassandraStreamHeaderSerializer;\nClass CassandraStreamManager; // Implements the streaming interface for the native cassandra storage engine.\nClass CassandraStreamReader; // CassandraStreamReader reads from stream and writes to SSTable.\nClass CassandraStreamReader.StreamDeserializer;\nClass CassandraStreamReceiver;\nClass CassandraStreamWriter; // CassandraStreamWriter writes given section of the SSTable to given channel.\nClass ComponentContext;\nClass ComponentManifest;\nClass CompressedInputStream; // InputStream which reads compressed chunks from the underlying input stream and deals with decompression and position tracking.\nClass CompressionInfo; // Container that carries compression parameters and chunks to decompress data from stream.\n", "des": "File transfer"}
{"index": 1450, "repo": "spring-data-redis-3.1.2", "code": "Package: util\n\nClasses and Interfaces: \npublic abstract class AbstractSubscription extends Object implements Subscription; // Base implementation for a subscription handling the channel/pattern registration so subclasses only have to deal with the actual registration/unregistration.\npublic class ByteArraySet extends Object implements Set<ByteArrayWrapper>;\npublic class ByteArrayWrapper extends Object implements Comparable<ByteArrayWrapper>; // Simple wrapper class used for wrapping arrays so they can be used as keys inside maps.\npublic abstract class DecodeUtils extends Object; // Simple class containing various decoding utilities.\n", "des": "Internal utility package for encoding/decoding Strings to byte[] (using Base64) library."}
{"index": 2854, "repo": "spring-integration-core-6.1.2", "code": "Package: dsl\n\nSub Packages: \npackage dsl.context; // The context support classes for Spring Integration Java DSL.\npackage dsl.support; // Provides various support classes used across Spring Integration Java DSL Components.\n\nClasses and Interfaces: \npublic class AbstractRouterSpec<S extends AbstractRouterSpec<S,R>,R extends AbstractMessageRouter> extends ConsumerEndpointSpec<S,R>; // A MessageHandlerSpec for AbstractMessageRouters.\npublic class AggregatorSpec extends CorrelationHandlerSpec<AggregatorSpec,AggregatingMessageHandler>; // A CorrelationHandlerSpec for an AggregatingMessageHandler.\npublic class BarrierSpec extends ConsumerEndpointSpec<BarrierSpec,BarrierMessageHandler>; // A MessageHandlerSpec for the BarrierMessageHandler.\n@IntegrationDsl public abstract class BaseIntegrationFlowDefinition<B extends BaseIntegrationFlowDefinition<B>> extends Object; // The Builder pattern implementation for the EIP-method chain.\npublic static final class BaseIntegrationFlowDefinition.ReplyProducerCleaner extends Object implements org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;\npublic class BroadcastPublishSubscribeSpec extends IntegrationComponentSpec<BroadcastPublishSubscribeSpec,BroadcastCapableChannel> implements ComponentsRegistration; // An IntegrationComponentSpec for configuring sub-flow subscribers on the provided BroadcastCapableChannel.\npublic final class Channels extends Object;\n@FunctionalInterface public interface ComponentsRegistration; // The marker interface for the IntegrationComponentSpec implementation, when there is need to register as beans not only the target spec's components, but some additional components, e.g.\npublic abstract class ConsumerEndpointSpec<S extends ConsumerEndpointSpec<S,H>,H extends org.springframework.messaging.MessageHandler> extends EndpointSpec<S,ConsumerEndpointFactoryBean,H>; // A EndpointSpec for consumer endpoints.\npublic abstract class CorrelationHandlerSpec<S extends CorrelationHandlerSpec<S,H>,H extends AbstractCorrelatingMessageHandler> extends ConsumerEndpointSpec<S,H>; // A MessageHandlerSpec for an AbstractCorrelatingMessageHandler.\npublic class DelayerEndpointSpec extends ConsumerEndpointSpec<DelayerEndpointSpec,DelayHandler>; // A ConsumerEndpointSpec for a DelayHandler.\npublic class DirectChannelSpec extends LoadBalancingChannelSpec<DirectChannelSpec,DirectChannel>;\n", "des": "Root package of the Spring Integration Java DSL."}
{"index": 1612, "repo": "spring-data-neo4j-7.1.2", "code": "Package: schema\n\nClasses and Interfaces: \n@Retention(RUNTIME) @Target(FIELD) @Inherited @ConvertWith(converterFactory=org.springframework.data.neo4j.core.schema.CompositePropertyConverterFactory.class) @API(status=STABLE, since=\"6.0\") public @interface CompositeProperty; // This annotation indicates a persistent property that is composed of multiple properties on a node or relationship.\npublic static final class CompositeProperty.DefaultToMapConverter<K> extends Object implements Neo4jPersistentPropertyToMapConverter<K,Map<K,Object>>; // The default implementation, passing map properties through as they are on the way to the graph and possibly applying a post processor on the way out of the graph.\npublic static final class CompositeProperty.NoopTransformation extends Object implements BiFunction<CompositeProperty.Phase,String,String>; // The default operation for transforming the keys.\npublic static enum CompositeProperty.Phase extends Enum<CompositeProperty.Phase>; // Phase of the mapping currently taking place.\n@Retention(RUNTIME) @Target(FIELD) @Documented @API(status=STABLE, since=\"6.0\") public @interface DynamicLabels; // This annotation can be used on a field of type Collection<String>.\n@Retention(RUNTIME) @Target({FIELD,ANNOTATION_TYPE}) @Documented @Inherited @API(status=STABLE, since=\"6.0\") public @interface GeneratedValue; // Indicates a generated id.\npublic static final class GeneratedValue.InternalIdGenerator extends Object implements IdGenerator<Void>; // This IdGenerator does nothing.\npublic static final class GeneratedValue.UUIDGenerator extends Object implements IdGenerator<UUID>; // This generator is automatically applied when a field of type UUID is annotated with @Id and @GeneratedValue.\n@Retention(RUNTIME) @Target({FIELD,ANNOTATION_TYPE}) @Documented @Inherited @API(status=STABLE, since=\"6.0\") public @interface Id; // This annotation is included here for completeness.\n@FunctionalInterface @API(status=STABLE, since=\"6.0\") public interface IdGenerator<T>; // Interface for generating ids for entities.\n", "des": "This package contains the schema that is defined by a set of classes, representing nodes and relationships and their properties."}
{"index": 2683, "repo": "spring-data-jpa-3.1.2", "code": "Package: provider\n\nClasses and Interfaces: \npublic abstract class HibernateUtils extends Object; // Utility functions to work with Hibernate.\npublic enum PersistenceProvider extends Enum<PersistenceProvider> implements QueryExtractor, ProxyIdAccessor, QueryComment; // Enumeration representing persistence providers to be used.\npublic interface ProxyIdAccessor; // Interface for a persistence provider specific accessor of identifiers held in proxies.\npublic interface QueryComment; // Interface to hide different implementations of query hints that insert comments into a Query.\npublic interface QueryExtractor; // Interface to hide different implementations to extract the original JPA query string from a Query.\n", "des": "JPA provider-specific utilities."}
{"index": 2679, "repo": "spring-data-jpa-3.1.2", "code": "Package: threeten\n\nClasses and Interfaces: \npublic class Jsr310JpaConverters extends Object; // JPA 2.1 converters to turn JSR-310 types into legacy Dates.\npublic static class Jsr310JpaConverters.InstantConverter extends Object implements jakarta.persistence.AttributeConverter<Instant,Timestamp>;\npublic static class Jsr310JpaConverters.LocalDateConverter extends Object implements jakarta.persistence.AttributeConverter<LocalDate,Date>;\npublic static class Jsr310JpaConverters.LocalDateTimeConverter extends Object implements jakarta.persistence.AttributeConverter<LocalDateTime,Date>;\npublic static class Jsr310JpaConverters.LocalTimeConverter extends Object implements jakarta.persistence.AttributeConverter<LocalTime,Date>;\npublic static class Jsr310JpaConverters.ZoneIdConverter extends Object implements jakarta.persistence.AttributeConverter<ZoneId,String>;\n", "des": "Spring Data JPA specific JSR-310 converters."}
{"index": 1456, "repo": "spring-data-redis-3.1.2", "code": "Package: script\n\nClasses and Interfaces: \npublic class DefaultReactiveScriptExecutor<K> extends Object implements ReactiveScriptExecutor<K>; // Default implementation of ReactiveScriptExecutor.\npublic class DefaultRedisScript<T> extends Object implements RedisScript<T>, InitializingBean; // Default implementation of RedisScript.\npublic class DefaultScriptExecutor<K> extends Object implements ScriptExecutor<K>; // Default implementation of ScriptExecutor.\npublic abstract class DigestUtils extends Object; // Utilties for working with MessageDigest\npublic interface ReactiveScriptExecutor<K>; // Executes RedisScripts using reactive infrastructure.\npublic interface RedisScript<T>; // A script to be executed using the Redis scripting support available as of version 2.6\npublic interface ScriptExecutor<K>; // Executes RedisScripts\npublic class ScriptingException extends NestedRuntimeException; // RuntimeException thrown when issues occur with RedisScripts\n", "des": "Lua script execution abstraction."}
{"index": 1037, "repo": "hadoop-aws-3.3.6", "code": "Package: statistics\n\nSub Packages: \npackage statistics.impl; // Statistics collection for the S3A connector: implementation.\n\nClasses and Interfaces: \nInterface BlockOutputStreamStatistics; // Block output stream statistics.\nInterface ChangeTrackerStatistics; // Interface for change tracking statistics.\nInterface CommitterStatistics; // Statistics for S3A committers.\nInterface CountersAndGauges; // This is the foundational API for collecting S3A statistics.\nInterface DelegationTokenStatistics; // Instrumentation exported to for S3A Delegation Token support.\nInterface PutTrackerStatistics; // Interface for PUT tracking.\nInterface S3AInputStreamStatistics; // Statistics updated by a S3AInputStream during its use.\nInterface S3AMultipartUploaderStatistics; // Statistics for the S3A multipart uploader.\nInterface S3AStatisticInterface; // Base Interface for S3A Statistics, as a way of managing them.\nInterface S3AStatisticsContext; // This is the statistics context for ongoing operations in S3A.\nInterface StatisticsFromAwsSdk; // interface to receive statistics events from the AWS SDK by way of AwsStatisticsCollector.\nEnum StatisticTypeEnum; // Enum of statistic types.\n", "des": "Statistics collection for the S3A connector: interfaces."}
{"index": 979, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: xwss\n\nSub Packages: \npackage xwss.callback; // Contains CallbackHandler implementations for XWSS.\n\nClasses and Interfaces: \nClass XwsSecurityInterceptor; // WS-Security endpoint interceptor that is based on Sun's XML and Web Services Security package (XWSS).\nClass XwsSecurityFaultException; // XWSS-specific version of the WsSecurityFaultException.\nClass XwsSecuritySecurementException; // XWSS-specific version of the WsSecuritySecurementException.\nClass XwsSecurityValidationException; // XWSS-specific version of the WsSecurityValidationException.\n", "des": "Contains classes for using the XML and WebServices Security WS-Security implementation within Spring-WS."}
{"index": 2239, "repo": "spring-security-acl-6.1.2", "code": "Package: jdbc\n\nClasses and Interfaces: \npublic class BasicLookupStrategy extends Object implements LookupStrategy; // Performs lookups in a manner that is compatible with ANSI SQL.\npublic class JdbcAclService extends Object implements AclService; // Simple JDBC-based implementation of AclService.\npublic class JdbcMutableAclService extends JdbcAclService implements MutableAclService; // Provides a base JDBC implementation of MutableAclService.\npublic interface LookupStrategy; // Performs lookups for AclService.\n", "des": "JDBC-based persistence of ACL information"}
{"index": 3875, "repo": "solr-ltr-9.3.0", "code": "Package: algorithms\n\nClasses and Interfaces: \nClass TeamDraftInterleaving; // Interleaving was introduced the first time by Joachims in [1, 2]. Team Draft Interleaving is among the most successful and used interleaving approaches[3]. Team Draft Interleaving implements a method similar to the way in which captains select their players in team-matches. Team Draft Interleaving produces a fair distribution of ranking models’ elements in the final interleaved list. \"Team draft interleaving\" has also proved to overcome an issue of the \"Balanced interleaving\" approach, in determining the winning model[4].\n", "des": "Contains Various Interleaving Algorithms"}
{"index": 2826, "repo": "groovy-xml-4.0.13", "code": "Package: streamingmarkupsupport\n\nClasses and Interfaces: \npublic class BaseMarkupBuilder extends Builder;\npublic abstract class Builder extends groovy.lang.GroovyObjectSupport;\nprotected abstract static class Builder.Built extends groovy.lang.GroovyObjectSupport;\npublic class StreamingMarkupWriter extends Writer;\n", "des": "XmlBuilder related classes to support streaming XML."}
{"index": 2589, "repo": "spring-rabbit-3.0.6", "code": "Package: core\n\nClasses and Interfaces: \npublic class AmqpNackReceivedException extends org.springframework.amqp.AmqpException; // An exception thrown when a negative acknowledgement received after publishing a message.\npublic class BatchingRabbitTemplate extends RabbitTemplate; // A RabbitTemplate that permits batching individual messages into a larger message.\npublic class BrokerEvent extends org.springframework.amqp.event.AmqpEvent; // Represents a broker event generated by the Event Exchange Plugin (https://www.rabbitmq.com/event-exchange.html).\npublic class BrokerEventListener extends Object implements org.springframework.amqp.core.MessageListener, org.springframework.context.ApplicationEventPublisherAware, ConnectionListener, org.springframework.context.SmartLifecycle; // When the event-exchange-plugin is enabled (see https://www.rabbitmq.com/event-exchange.html), if an object of this type is declared as a bean, selected events will be published as BrokerEvents.\n@FunctionalInterface public interface ChannelCallback<T>; // Basic callback for use in RabbitTemplate.\npublic class ConsumeOkNotReceivedException extends org.springframework.amqp.AmqpException; // Thrown when a blocking receive operation is performed but the consumeOk was not received before the receive timeout.\n@FunctionalInterface public interface CorrelationDataPostProcessor; // A callback invoked immediately before publishing a message to update, replace, or create correlation data for publisher confirms.\npublic class DeclarationExceptionEvent extends RabbitAdminEvent; // Application event published when a declaration exception occurs.\npublic final class DeclareExchangeConnectionListener extends Object implements ConnectionListener; // A ConnectionListener that will declare a single exchange when the connection is established.\n@ManagedResource(description=\"Admin Tasks\") public class RabbitAdmin extends Object implements org.springframework.amqp.core.AmqpAdmin, org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // RabbitMQ implementation of portable AMQP administrative operations for AMQP >= 0.9.1.\n", "des": "Provides core classes for Spring Rabbit."}
{"index": 1709, "repo": "spring-boot-test-3.1.1", "code": "Package: assertj\n\nClasses and Interfaces: \npublic class ApplicationContextAssert<C extends org.springframework.context.ApplicationContext> extends org.assertj.core.api.AbstractAssert<ApplicationContextAssert<C>,C>; // AssertJ assertions that can be applied to an ApplicationContext.\npublic static enum ApplicationContextAssert.Scope extends Enum<ApplicationContextAssert.Scope>; // The scope of an assertion.\npublic interface ApplicationContextAssertProvider<C extends org.springframework.context.ApplicationContext> extends org.springframework.context.ApplicationContext, org.assertj.core.api.AssertProvider<ApplicationContextAssert<C>>, Closeable; // An ApplicationContext that additionally supports AssertJ style assertions.\npublic interface AssertableApplicationContext extends ApplicationContextAssertProvider<org.springframework.context.ConfigurableApplicationContext>, org.springframework.context.ConfigurableApplicationContext; // An ApplicationContext that additionally supports AssertJ style assertions.\npublic interface AssertableReactiveWebApplicationContext extends ApplicationContextAssertProvider<org.springframework.boot.web.reactive.context.ConfigurableReactiveWebApplicationContext>, org.springframework.boot.web.reactive.context.ConfigurableReactiveWebApplicationContext; // A ReactiveWebApplicationContext that additionally supports AssertJ style assertions.\npublic interface AssertableWebApplicationContext extends ApplicationContextAssertProvider<org.springframework.web.context.ConfigurableWebApplicationContext>, org.springframework.web.context.ConfigurableWebApplicationContext; // A WebApplicationContext that additionally supports AssertJ style assertions.\n", "des": "AssertJ support for ApplicationContexts."}
{"index": 585, "repo": "commons-collections-3.2.2", "code": "Package: set\n\nClasses and Interfaces: \nInterface CompositeSet.SetMutator; // Define callbacks for mutation operations.\nClass AbstractSerializableSetDecorator; // Serializable subclass of AbstractSetDecorator.\nClass AbstractSetDecorator; // Decorates another Set to provide additional behaviour.\nClass AbstractSortedSetDecorator; // Decorates another SortedSet to provide additional behaviour.\nClass CompositeSet; // Decorates a set of other sets to provide a single unified view.\nClass ListOrderedSet; // Decorates another Set to ensure that the order of addition is retained and used by the iterator.\nClass MapBackedSet; // Decorates a Map to obtain Set behaviour.\nClass PredicatedSet; // Decorates another Set to validate that all additions match a specified predicate.\nClass PredicatedSortedSet; // Decorates another SortedSet to validate that all additions match a specified predicate.\nClass SynchronizedSet; // Decorates another Set to synchronize its behaviour for a multi-threaded environment.\nClass SynchronizedSortedSet; // Decorates another SortedSet to synchronize its behaviour for a multi-threaded environment.\nClass TransformedSet; // Decorates another Set to transform objects that are added.\nClass TransformedSortedSet; // Decorates another SortedSet to transform objects that are added.\nClass TypedSet; // Decorates another Set to validate that elements added are of a specific type.\nClass TypedSortedSet; // Decorates another SortedSet to validate that elements added are of a specific type.\nClass UnmodifiableSet; // Decorates another Set to ensure it can't be altered.\nClass UnmodifiableSortedSet; // Decorates another SortedSet to ensure it can't be altered.\n", "des": "This package contains implementations of the Set and SortedSet interfaces."}
{"index": 3310, "repo": "opencms-core-15.0", "code": "Package: extractors\n\nClasses and Interfaces: \nInterface I_CmsExtractionResult; // The result of a document text extraction.\nInterface I_CmsTextExtractor; // Allows extraction of the indexable \"plain\" text plus (optional) meta information from a given binary input document format.\nClass A_CmsTextExtractor; // Base utility class that allows extraction of the indexable \"plain\" text from a given document format.\nClass CmsExtractionResult; // The result of a document text extraction.\nClass CmsExtractorHtml; // Extracts the text from an HTML document.\nClass CmsExtractorMsOfficeOLE2; // Extracts text data from a VFS resource that is an OLE 2 MS Office document.\nClass CmsExtractorMsOfficeOOXML; // Extracts text data from a VFS resource that is an OOXML MS Office document.\nClass CmsExtractorOpenOffice; // Extracts the text from OpenOffice documents (.ods, .odf).\nClass CmsExtractorPdf; // Extracts the text from a PDF document.\nClass CmsExtractorRtf; // Extracts the text from a RTF document.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains a generic, low-level framework for extration of plain text content out of various popular file formats."}
{"index": 3208, "repo": "tomcat-api-10.1", "code": "Package: server\n\nClasses and Interfaces: \nClass Constants; // Internal implementation constants.\nClass DefaultServerEndpointConfigurator;\nClass UpgradeUtil;\nClass UriTemplate; // Extracts path parameters from URIs used to create web socket connections using the URI template defined for the associated Endpoint.\nClass WsContextListener; // In normal usage, this ServletContextListener does not need to be explicitly configured as the WsSci performs all the necessary bootstrap and installs this listener in the ServletContext.\nClass WsFilter; // Handles the initial HTTP connection for WebSocket connections.\nClass WsFrameServer;\nClass WsHandshakeRequest; // Represents the request that this session was opened under.\nClass WsHttpUpgradeHandler; // Servlet 3.1 HTTP upgrade handler for WebSocket connections.\nClass WsRemoteEndpointImplServer; // This is the server side RemoteEndpoint implementation - i.e. what the server uses to send data to the client.\nClass WsSci; // Registers an interest in any class that is annotated with ServerEndpoint so that Endpoint can be published via the WebSocket server.\nClass WsServerContainer; // Provides a per class loader (i.e. per web application) instance of a ServerContainer.\nClass WsSessionListener;\nClass WsWriteTimeout; // Provides timeouts for asynchronous web socket writes.\n", "des": "Server-side specific implementation classes."}
{"index": 842, "repo": "calcite-core-1.34.0", "code": "Package: externalize\n\nClasses and Interfaces: \nInterface RelDotWriter.WriteOption; // Options for displaying the rel node plan in dot format.\nInterface RelJson.InputTranslator; // Translates a JSON object that represents an input reference into a RexNode.\nClass RelDotWriter; // Utility to dump a rel node plan in dot format.\nClass RelEnumTypes; // Registry of Enum classes that can be serialized to JSON.\nClass RelJson; // Utilities for converting RelNode into JSON format.\nClass RelJsonReader; // Reads a JSON plan and converts it back to a tree of relational expressions.\nClass RelJsonWriter; // Callback for a relational expression to dump itself as JSON.\nClass RelWriterImpl; // Implementation of RelWriter.\nClass RelXmlWriter; // Callback for a relational expression to dump in XML format.\n", "des": "Facilities to externalize RelNodes to and from XML and JSON format."}
{"index": 3157, "repo": "tika-core-2.8.0", "code": "Package: io\n\nClasses and Interfaces: \nInterface InputStreamFactory; // A factory which returns a fresh InputStream for the same resource each time.\nClass BoundedInputStream; // Very slight modification of Commons' BoundedInputStream so that we can figure out if this hit the bound or not.\nClass EndianUtils; // General Endian Related Utilties.\nClass FilenameUtils;\nClass IOUtils;\nClass LookaheadInputStream; // Stream wrapper that make it easy to read up to n bytes ahead from a stream that supports the mark feature.\nClass MappedBufferCleaner; // Copied/pasted from the Apache Lucene/Solr project.\nClass TailStream; // A specialized input stream implementation which records the last portion read from an underlying stream.\nClass TemporaryResources; // Utility class for tracking and ultimately closing or otherwise disposing a collection of temporary resources.\nClass TikaInputStream; // Input stream with extended capabilities.\nClass EndianUtils.BufferUnderrunException;\n", "des": "IO utilities."}
{"index": 586, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: adaptor\n\nClasses and Interfaces: \nClass EclipseStarter; // Special startup class for the Eclipse Platform.\nClass LocationManager; // This class is used to manage the various Locations for Eclipse.\n", "des": "Provides API to start the platform."}
{"index": 3841, "repo": "lucene-core-9.7.0", "code": "Package: lucene94\n\nClasses and Interfaces: \nClass Lucene94FieldInfosFormat; // Lucene 9.0 Field Infos format.\n", "des": "Lucene 9.4 file format."}
{"index": 1350, "repo": "spring-integration-kafka-6.1.2", "code": "Package: outbound\n\nClasses and Interfaces: \npublic class KafkaProducerMessageHandler<K,V> extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements org.springframework.integration.support.management.ManageableLifecycle; // A Message Handler for Apache Kafka; when supplied with a ReplyingKafkaTemplate it is used as the handler in an outbound gateway.\n@FunctionalInterface public static interface KafkaProducerMessageHandler.ProducerRecordCreator<K,V>; // Creates a ProducerRecord from a Message and/or properties derived from configuration and/or the message.\n", "des": "Provides Spring Integration outbound components for Apache Kafka."}
{"index": 427, "repo": "commons-geometry-hull-1.0-beta1", "code": "Package: twod\n\nClasses and Interfaces: \nInterface ConvexHullGenerator2D; // Interface for convex hull generators in the two-dimensional Euclidean space.\nClass AklToussaintHeuristic; // A simple heuristic to improve the performance of convex hull algorithms.\nClass ConvexHull2D; // This class represents a convex hull in two-dimensional Euclidean space.\nClass MonotoneChain; // Implements Andrew's monotone chain method to generate the convex hull of a finite set of points in the two-dimensional Euclidean space.\n", "des": "This package provides algorithms to generate the convex hull for a set of points in an two-dimensional Euclidean space."}
{"index": 246, "repo": "nutch-2.4", "code": "Package: httpclient\n\nClasses and Interfaces: \nInterface HttpAuthentication; // The base level of services required for Http Authentication\nClass DummySSLProtocolSocketFactory;\nClass DummyX509TrustManager;\nClass Http; // This class is a protocol plugin that configures an HTTP client for Basic, Digest and NTLM authentication schemes for web server as well as proxy server.\nClass HttpAuthenticationFactory; // Provides the Http protocol implementation with the ability to authenticate when prompted.\nClass HttpBasicAuthentication; // Implementation of RFC 2617 Basic Authentication.\nClass HttpResponse; // An HTTP response.\nClass HttpAuthenticationException; // Can be used to identify problems during creation of Authentication objects.\n", "des": "Protocol plugin which supports retrieving documents via the HTTP and HTTPS protocols, optionally with Basic, Digest and NTLM authentication schemes for web server as well as proxy server."}
{"index": 1862, "repo": "spring-test-6.0.11", "code": "Package: webdriver\n\nClasses and Interfaces: \npublic class MockMvcHtmlUnitDriverBuilder extends MockMvcWebConnectionBuilderSupport<MockMvcHtmlUnitDriverBuilder>; // MockMvcHtmlUnitDriverBuilder simplifies the building of an HtmlUnitDriver that delegates to MockMvc and optionally delegates to an actual connection for specific requests.\npublic class WebConnectionHtmlUnitDriver extends org.openqa.selenium.htmlunit.HtmlUnitDriver; // WebConnectionHtmlUnitDriver enables configuration of the WebConnection for an HtmlUnitDriver instance.\n", "des": "Server-side support for testing Spring MVC applications with MockMvc and the Selenium HtmlUnitDriver."}
{"index": 1108, "repo": "fontbox-3.0.0-beta1", "code": "Package: common\n\nClasses and Interfaces: \nClass CoverageTable; // This class models the Coverage Table in the Open Type layout common tables.\nClass CoverageTableFormat1; // This class models the Coverage format 1 in the Open Type layout common tables.\nClass CoverageTableFormat2; // This class models the Coverage format 2 in the Open Type layout common tables.\nClass FeatureListTable; // This class models the Feature List table in the Open Type layout common tables.\nClass FeatureRecord; // This class models the Features and lookups in the Open Type layout common tables.\nClass FeatureTable; // This class models the Feature table in the Open Type layout common tables.\nClass LangSysTable; // This class models the Language system tags in the Open Type Font specs.\nClass LookupListTable; // This class models the Lookup List Table in the Open Type layout common tables.\nClass LookupSubTable; // This class models the Lookup Sub-Table in the Open Type layout common tables.\nClass LookupTable; // This class models the Lookup Table in the Open Type layout common tables.\nClass RangeRecord; // This class models the Range Record in the Coverage format 2 in the Open Type layout common tables.\nClass ScriptTable; // This class models the Script tags in the Open Type Font specs.\n", "des": "This package contains the highly obfuscated Layout Common Table Formats system of tables from the Open Type Font specs."}
{"index": 1065, "repo": "avro-1.11.2", "code": "Package: specific\n\nClasses and Interfaces: \nInterface SpecificData.SchemaConstructable; // Tag interface that indicates that a class has a one-argument constructor that accepts a Schema.\nInterface SpecificRecord; // Implemented by generated record classes.\nClass SpecificData; // Utilities for generated Java classes and interfaces.\nClass SpecificDatumReader<T>; // DatumReader for generated Java classes.\nClass SpecificDatumWriter<T>; // DatumWriter for generated Java classes.\nClass SpecificErrorBuilderBase<T extends SpecificExceptionBase>; // Abstract base class for specific ErrorBuilder implementations.\nClass SpecificFixed; // Base class for generated fixed-sized data classes.\nClass SpecificRecordBase; // Base class for generated record classes.\nClass SpecificRecordBuilderBase<T extends SpecificRecord>; // Abstract base class for specific RecordBuilder implementations.\nClass SpecificExceptionBase; // Base class for specific exceptions.\nAnnotation Type AvroGenerated; // Indicates that an annotated class is an Avro generated class.\nAnnotation Type FixedSize; // Declares the size of implementations of GenericFixed.\n", "des": "Generate specific Java classes for schemas and protocols."}
{"index": 134, "repo": "ignite-core-2.15.0", "code": "Package: executor\n\nClasses and Interfaces: \nClass GridExecutorService; // An ExecutorService that executes each submitted task in grid through Ignite instance, normally configured using Ignite.executorService() method.\n", "des": "Contains grid executor service implementation."}
{"index": 1791, "repo": "spring-integration-file-6.1.2", "code": "Package: session\n\nClasses and Interfaces: \npublic class CachingSessionFactory<F> extends Object implements SessionFactory<F>, org.springframework.beans.factory.DisposableBean; // A SessionFactory implementation that caches Sessions for reuse without requiring reconnection each time the Session is retrieved from the factory.\npublic class DefaultSessionFactoryLocator<F> extends Object implements SessionFactoryLocator<F>; // The default implementation of SessionFactoryLocator using a simple map lookup and an optional default to fall back on.\npublic class DelegatingSessionFactory<F> extends Object implements SessionFactory<F>; // SessionFactory that delegates to a SessionFactory retrieved from a SessionFactoryLocator.\npublic interface Session<F> extends Closeable; // Common abstraction for a Session with a remote File system.\n@FunctionalInterface public interface SessionFactory<F>; // Factory for acquiring Session instances.\n@FunctionalInterface public interface SessionFactoryLocator<F>; // A factory returning a SessionFactory based on some key.\npublic class SessionFactoryMapBuilder<T> extends org.springframework.integration.support.MapBuilder<SessionFactoryMapBuilder<T>,Object,SessionFactory<T>>; // A MapBuilder to producer a map that maps objects to SessionFactorys.\npublic interface SharedSessionCapable; // A SessionFactory that implements this interface is capable of supporting a shared session.\n", "des": "Provides classes supporting remote file sessions."}
{"index": 1098, "repo": "hbase-server-3.0.0-alpha-4", "code": "Package: normalizer\n\nClasses and Interfaces: \nInterface NormalizationPlan; // A NormalizationPlan describes some modification to region split points as identified by an instance of RegionNormalizer.\nClass RegionNormalizerFactory; // Factory to create instance of RegionNormalizer as configured.\nClass RegionNormalizerManager; // This class encapsulates the details of the RegionNormalizer subsystem.\nClass RegionNormalizerStateStore; // Store region normalizer state.\nEnum NormalizationPlan.PlanType;\n", "des": "The Region Normalizer subsystem is responsible for coaxing all the regions in a table toward a \"normal\" size, according to their storefile size."}
{"index": 3267, "repo": "opencms-core-15.0", "code": "Package: file\n\nSub Packages: \npackage file.collectors; // Collectors allow to gather lists of OpenCms resources from the OpenCms VFS using specific rules.\npackage file.history; // This package contains the classes to deal with the OpenCms VFS history archive.\npackage file.types; // The implementations of the core resource types for the VFS are located here.\npackage file.wrapper; // This package contains classes and interfaces used to access OpenCms through a wrapped CmsObject.\n\nClasses and Interfaces: \nInterface I_CmsResource; // Common ancestor interface for CmsFile and CmsFolder as well as for CmsHistoryFile and CmsHistoryFolder.\nClass CmsFile; // A file resource in the OpenCms VFS.\nClass CmsFolder; // A folder resource in the OpenCms VFS.\nClass CmsGroup; // A group principal in the OpenCms permission system.\nClass CmsLinkRewriter; // A class used to rewrite links and relations in one subtree such that relations from that subtree to another given subtree replaced with relations to the first subtree.\nClass CmsObject; // This pivotal class provides all authorized access to the OpenCms VFS resources.\nClass CmsProject; // Describes an OpenCms project, which contains a set of VFS resources that are being worked on at the same time.\nClass CmsProject.CmsProjectType; // Enumeration class for project types.\nClass CmsProperty; // Represents a property (meta-information) mapped to a VFS resource.\nClass CmsProperty.CmsPropertyLocaleTransformer; // Transforms a given properties map, to a map where the returned values for a property are dependent on the locale.\nClass CmsPropertyDefinition; // Defines a property name, so that CmsProperty instances can be created with that name.\nClass CmsPropertyDefinition.CmsPropertyType; // Enumeration class for property types.\nClass CmsRequestContext; // Stores the information about the current users OpenCms context, for example the requested URI, the current project, the selected site and more.\nClass CmsResource; // Base class for all OpenCms VFS resources like CmsFile or CmsFolder.\nClass CmsResource.CmsResourceCopyMode; // Enumeration class for resource copy modes.\nClass CmsResource.CmsResourceDeleteMode; // Enumeration class for resource delete modes.\nClass CmsResource.CmsResourceUndoMode; // Enumeration class for resource undo changes modes.\nClass CmsResourceBuilder; // This class allows the developer to build a CmsResource object by filling out individual fields one after the other.\n", "des": "This important package provides the methods to access the OpenCms VFS repository with the permissions of an authenticated user."}
{"index": 3494, "repo": "poi-5.2.3", "code": "Package: aggregates\n\nClasses and Interfaces: \nInterface RecordAggregate.RecordVisitor;\nClass CFRecordsAggregate; // CFRecordsAggregate - aggregates Conditional Formatting records CFHeaderRecord and number of up CFRuleRecord records together to simplify access to them.\nClass ChartSubstreamRecordAggregate; // Manages the all the records associated with a chart sub-stream.\nClass ColumnInfoRecordsAggregate;\nClass ConditionalFormattingTable; // Holds all the conditional formatting for a workbook sheet.\nClass CustomViewSettingsRecordAggregate; // Manages the all the records associated with a 'Custom View Settings' sub-stream.\nClass DataValidityTable; // Manages the DVALRecord and DVRecords for a single sheet\nClass FormulaRecordAggregate; // The formula record aggregate is used to join together the formula record and it's (optional) string record and (optional) Shared Formula Record (template reads, excel optimization).\nClass MergedCellsTable;\nClass PageSettingsBlock; // Groups the page settings records for a worksheet.\nClass RecordAggregate; // RecordAggregates are groups of of BIFF Records that are typically stored together and/or updated together.\nClass RecordAggregate.PositionTrackingVisitor; // A wrapper for RecordAggregate.RecordVisitor which accumulates the sizes of all records visited.\nClass RowRecordsAggregate;\nClass SharedValueManager; // Manages various auxiliary records while constructing a RowRecordsAggregate: SharedFormulaRecords ArrayRecords TableRecords\nClass ValueRecordsAggregate; // Aggregate value records together.\nClass WorksheetProtectionBlock; // Groups the sheet protection records for a worksheet.\n", "des": "The record aggregates are not real \"records\" but collections of records that act as a single record."}
{"index": 2689, "repo": "spring-data-jpa-3.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class ClasspathScanningPersistenceUnitPostProcessor extends Object implements PersistenceUnitPostProcessor, ResourceLoaderAware, EnvironmentAware; // PersistenceUnitPostProcessor that will scan for classes annotated with Entity or MappedSuperclass and add them to the PersistenceUnit post processed.\npublic class MergingPersistenceUnitManager extends DefaultPersistenceUnitManager; // Extends DefaultPersistenceUnitManager to merge configurations of one persistence unit residing in multiple persistence.xml files into one.\npublic final class PageableUtils extends Object; // Provide a set of utility methods to support Pageables.\n", "des": "Various helper classes useful when working with JPA."}
{"index": 945, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: config\n\nClasses and Interfaces: \nClass WebServicesNamespaceHandler; // NamespaceHandler for the 'web-services' namespace.\n", "des": "Provides an namespace handler for the Spring Web Services namespace."}
{"index": 3723, "repo": "solr-core-9.3.0", "code": "Package: tracing\n\nClasses and Interfaces: \nClass HttpServletCarrier; // A Carrier for extract Span context out of request headers\nClass SolrRequestCarrier; // An OpenTracing Carrier for injecting Span context through SolrRequest\nClass TraceUtils; // Utilities for distributed tracing.\n", "des": "Tracing related utilities"}
{"index": 639, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: amrmproxy\n\nClasses and Interfaces: \nInterface FederationAMRMProxyPolicy; // Implementors of this interface provide logic to split the list of ResourceRequests received by the AM among various RMs.\nClass AbstractAMRMProxyPolicy; // Base abstract class for FederationAMRMProxyPolicy implementations, that provides common validation for reinitialization.\nClass BroadcastAMRMProxyPolicy; // An implementation of the FederationAMRMProxyPolicy that simply broadcasts each ResourceRequest to all the available sub-clusters.\nClass HomeAMRMProxyPolicy; // An implementation of the FederationAMRMProxyPolicy that simply sends the ResourceRequest to the home subcluster.\nClass LocalityMulticastAMRMProxyPolicy; // An implementation of the FederationAMRMProxyPolicy interface that carefully multicasts the requests with the following behavior:\nClass RejectAMRMProxyPolicy; // An implementation of the FederationAMRMProxyPolicy that simply rejects all requests.\n", "des": "AMRMPRoxy policies."}
{"index": 1061, "repo": "avro-1.11.2", "code": "Package: io\n\nSub Packages: \npackage io.parsing; // Implementation of Avro schemas as LL(1) grammars.\n\nClasses and Interfaces: \nInterface DatumReader<D>; // Read data of a schema.\nInterface DatumWriter<D>; // Write data of a schema.\nInterface FastReaderBuilder.ExecutionStep;\nInterface FastReaderBuilder.FieldReader;\nInterface FastReaderBuilder.ReusingFieldReader;\nClass BinaryData; // Utilities for binary-encoded data.\nClass BinaryDecoder; // An Decoder for binary-format data.\nClass BinaryEncoder; // An abstract Encoder for Avro's binary encoding.\nClass BlockingBinaryEncoder; // A BinaryEncoder implementation that writes large arrays and maps as a sequence of blocks.\nClass BufferedBinaryEncoder; // An Encoder for Avro's binary encoding.\nClass Decoder; // Low-level support for de-serializing Avro values.\nClass DecoderFactory; // A factory for creating and configuring Decoders.\nClass DirectBinaryEncoder; // An Encoder for Avro's binary encoding that does not buffer output.\nClass Encoder; // Low-level support for serializing Avro values.\nClass EncoderFactory; // A factory for creating and configuring Encoder instances.\nClass FastReaderBuilder;\nClass FastReaderBuilder.MapReader;\nClass FastReaderBuilder.RecordReader;\nClass JsonDecoder; // A Decoder for Avro's JSON data encoding.\nClass JsonEncoder; // An Encoder for Avro's JSON data encoding.\nClass ParsingDecoder; // Base class for parser-based Decoders.\nClass ParsingEncoder; // Base class for parser-based Encoders.\nClass ResolvingDecoder; // Decoder that performs type-resolution between the reader's and writer's schemas.\nClass ValidatingDecoder; // An implementation of Decoder that ensures that the sequence of operations conforms to a schema.\nClass ValidatingEncoder; // An implementation of Encoder that wraps another Encoder and ensures that the sequence of operations conforms to the provided schema.\nEnum FastReaderBuilder.RecordReader.Stage;\n", "des": "Utilities for Encoding and Decoding Avro data."}
{"index": 783, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: hu\n\nClasses and Interfaces: \nClass HungarianAnalyzer; // Analyzer for Hungarian.\nClass HungarianLightStemFilter; // A TokenFilter that applies HungarianLightStemmer to stem Hungarian words.\nClass HungarianLightStemFilterFactory; // Factory for HungarianLightStemFilter.\nClass HungarianLightStemmer; // Light Stemmer for Hungarian.\n", "des": "Analyzer for Hungarian."}
{"index": 563, "repo": "hadoop-common-3.3.4", "code": "Package: annotation\n\nClasses and Interfaces: \nEnum Metric.Type;\nAnnotation Type Metric; // Annotation interface for a single metric used to annotate a field or a method in the class.\nAnnotation Type Metrics; // Annotation interface for a group of metrics\n", "des": "Annotation interfaces for metrics instrumentation"}
{"index": 1271, "repo": "spring-core-6.0.11", "code": "Package: convert\n\nSub Packages: \npackage convert.converter; // SPI to implement Converters for the type conversion system.\npackage convert.support; // Default implementation of the type conversion system.\n\nClasses and Interfaces: \npublic abstract class ConversionException extends NestedRuntimeException; // Base class for exceptions thrown by the conversion system.\npublic class ConversionFailedException extends ConversionException; // Exception to be thrown when an actual type conversion attempt fails.\npublic interface ConversionService; // A service interface for type conversion.\npublic class ConverterNotFoundException extends ConversionException; // Exception to be thrown when a suitable converter could not be found in a given conversion service.\npublic final class Property extends Object; // A description of a JavaBeans Property that allows us to avoid a dependency on java.beans.PropertyDescriptor.\npublic class TypeDescriptor extends Object implements Serializable; // Contextual descriptor about a type to convert from or to.\n", "des": "Type conversion system API."}
{"index": 3431, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nSub Packages: \npackage spi.interceptor; // interceptor implementations\n\nClasses and Interfaces: \nInterface CollectionTracker; // Interface to be implemented by collection trackers that hold the expected size od collections, a simplified Map<String, int>.\nInterface EnhancementContext; // The context for performing an enhancement.\nInterface Enhancer; // Class responsible for performing enhancement.\nInterface LazyPropertyInitializer; // Contract for controlling how lazy properties get initialized.\nInterface LazyPropertyInitializer.InterceptorImplementor;\nInterface UnloadedClass;\nInterface UnloadedField;\nClass DefaultEnhancementContext; // default implementation of EnhancementContext.\nClass EnhancementContextWrapper;\nClass EnhancerConstants; // Constants used during enhancement.\nClass EnhancementException; // An exception indicating some kind of problem performing bytecode enhancement.\n", "des": "package defining bytecode code enhancement (instrumentation) support."}
{"index": 3206, "repo": "tomcat-api-10.1", "code": "Package: scan\n\nClasses and Interfaces: \nClass AbstractInputStreamJar; // Base implementation of Jar for implementations that use a JarInputStream to access the JAR file.\nClass Constants; // String constants for the scan package.\nClass JarFactory; // Provide a mechanism to obtain objects that implement Jar.\nClass JarFileUrlJar; // Implementation of Jar that is optimised for file based JAR URLs that refer directly to a JAR file (e.g URLs of the form jar:file: ... .jar!\nClass JarFileUrlNestedJar; // Implementation of Jar that is optimised for file based JAR URLs that refer to a JAR file nested inside a WAR (e.g URLs of the form jar:file: ... .war!\nClass NonClosingJarInputStream; // When using a JarInputStream with an XML parser, the stream will be closed by the parser.\nClass ReferenceCountedJar; // This class provides a wrapper around Jar that uses reference counting to close and re-create the wrapped Jar instance as required.\nClass StandardJarScanFilter;\nClass StandardJarScanner; // The default JarScanner implementation scans the WEB-INF/lib directory followed by the provided classloader and then works up the classloader hierarchy.\nClass UrlJar; // Implementation of Jar that is optimised for non-file based JAR URLs.\n", "des": "This package contains the common classes used to perform configuration scanning for Catalina and Jasper."}
{"index": 608, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: startlevel\n\nClasses and Interfaces: \nInterface BundleStartLevel; // Query and modify the start level information for a bundle.\nInterface FrameworkStartLevel; // Query and modify the start level information for the framework.\n", "des": "Framework Start Level Package Version 1.0."}
{"index": 676, "repo": "commons-lang3-3.12.0", "code": "Package: translate\n\nClasses and Interfaces: \nClass AggregateTranslator; // as of 3.6, use commons-text AggregateTranslator instead\nClass CharSequenceTranslator; // as of 3.6, use commons-text CharSequenceTranslator instead\nClass CodePointTranslator; // as of 3.6, use commons-text CharSequenceTranslator instead\nClass EntityArrays; // as of 3.6, use commons-text EntityArrays instead\nClass JavaUnicodeEscaper; // as of 3.6, use commons-text UnicodeEscaper instead\nClass LookupTranslator; // as of 3.6, use commons-text LookupTranslator instead\nClass NumericEntityEscaper; // as of 3.6, use commons-text NumericEntityEscaper instead\nClass NumericEntityUnescaper; // as of 3.6, use commons-text NumericEntityUnescaper instead\nClass OctalUnescaper; // as of 3.6, use commons-text OctalUnescaper instead\nClass UnicodeEscaper; // as of 3.6, use commons-text UnicodeEscaper instead\nClass UnicodeUnescaper; // as of 3.6, use commons-text UnicodeUnescaper instead\nClass UnicodeUnpairedSurrogateRemover; // as of 3.6, use commons-text UnicodeUnpairedSurrogateRemover instead\nEnum NumericEntityUnescaper.OPTION; // Enumerates NumericEntityUnescaper options for unescaping.\n", "des": "An API for creating text translation routines from a set of smaller building blocks."}
{"index": 2000, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: client\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnClass({org.springframework.ws.client.core.WebServiceTemplate.class,org.springframework.oxm.Unmarshaller.class,org.springframework.oxm.Marshaller.class}) public class WebServiceTemplateAutoConfiguration extends Object; // Auto-configuration for WebServiceTemplate.\n", "des": "Auto-configuration for Spring Web Services Clients."}
{"index": 896, "repo": "commons-jcs3-core-3.1", "code": "Package: engine\n\nSub Packages: \npackage engine.behavior; // Interfaces used by the core and the auxiliary caches.\npackage engine.control; // The primary cache classes and the hub.\npackage engine.memory; // Parent package for memory type plugins.\n\nClasses and Interfaces: \nClass AbstractCacheEventQueue<K,V>; // An abstract base class to the different implementations\nClass CacheAdaptor<K,V>; // Used for Cache-to-Cache messaging purposes.\nClass CacheElement<K,V>; // Generic element wrapper.\nClass CacheElementSerialized<K,V>; // Either serialized value or the value should be null;\nClass CacheEventQueue<K,V>; // An event queue is used to propagate ordered cache events to one and only one target listener.\nClass CacheEventQueueFactory<K,V>; // This class hands out event Queues.\nClass CacheGroup; // The grouping functionality is on the way out.\nClass CacheInfo; // This is a static variable holder for the distribution auxiliaries that need something like a vmid.\nClass CacheListeners<K,V>; // Used to associates a set of [cache listener to cache event queue] for a cache.\nClass CacheWatchRepairable; // Intercepts the requests to the underlying ICacheObserver object so that the listeners can be recorded locally for remote connection recovery purposes.\nClass CompositeCacheAttributes; // The CompositeCacheAttributes defines the general cache region settings.\nClass ElementAttributes; // This it the element attribute descriptor class.\nClass PooledCacheEventQueue<K,V>; // An event queue is used to propagate ordered cache events to one and only one target listener.\nClass ZombieCacheService<K,V>; // Zombie adapter for any cache service.\nClass ZombieCacheServiceNonLocal<K,V>; // Zombie adapter for the non local cache services.\nClass ZombieCacheServiceNonLocal.ZombieEvent; // Base of the other events.\nClass ZombieCacheWatch; // Zombie Observer.\nEnum CacheStatus; // Cache statuses\n", "des": "Interfaces used by the core and the auxiliary caches."}
{"index": 1063, "repo": "avro-1.11.2", "code": "Package: path\n\nClasses and Interfaces: \nInterface PathElement; // root interface for all pieces of an AvroPath expression\nInterface PathPredicate; // a predicate is a filter that restricts items selected by a LocationStep\nInterface PathTracingException<T extends Throwable>; // interface for exceptions that can trace the AvroPath of an error\nInterface PositionalPathPredicate; // filters items by their context position\nClass ArrayPositionPredicate; // Returns items by their position (numeric index) in an array\nClass LocationStep; // Selects items based on their \"path\" (name of a property under which they are stored) relative to the context.\nClass MapKeyPredicate; // Returns items by their position (string key under which they are stored) in a map\nClass UnionTypePredicate; // Returns items by their position (numeric index of type) in a union schema\nClass TracingAvroTypeException; // an AvroTypeException with extra fields used to trace back the path to a bad value through an object graph\nClass TracingClassCastException; // a ClassCastException with extra fields used to trace back the path to a bad value through an object graph\nClass TracingNullPointException; // a NullPointerException with extra fields used to trace back the path to a null value through an object graph\n", "des": "Interfaces and base classes for AvroPath."}
{"index": 45, "repo": "ignite-core-2.15.0", "code": "Package: compute\n\nClasses and Interfaces: \nInterface ComputeJob; // Defines executable unit for ComputeTask.\nInterface ComputeJobContext; // Context attached to every job executed on the grid.\nInterface ComputeJobContinuation; // Defines continuation support for grid job context.\nInterface ComputeJobMasterLeaveAware; // Annotation for handling master node leave during job execution.\nInterface ComputeJobResult; // Result of remote job which gets passed into ComputeTask.result(ComputeJobResult, List) method.\nInterface ComputeJobSibling; // Job sibling interface defines a job from the same split.\nInterface ComputeLoadBalancer; // Load balancer is used for finding the best balanced node according to load balancing policy.\nInterface ComputeTask<T,R>; // Grid task interface defines a task that can be executed on the grid.\nInterface ComputeTaskContinuousMapper; // Defines a mapper that can be used for asynchronous job sending.\nInterface ComputeTaskFuture<R>; // This class defines a handler for asynchronous task execution.\nInterface ComputeTaskSession; // Defines a distributed session for particular task execution.\nInterface ComputeTaskSessionAttributeListener; // This interface defines listener for task session attributes.\nClass ComputeJobAdapter; // Convenience adapter for ComputeJob implementations.\nClass ComputeJobContinuationAdapter; // Convenience adapter for ComputeJob implementations.\nClass ComputeTaskAdapter<T,R>; // Convenience adapter for ComputeTask interface.\nClass ComputeTaskSplitAdapter<T,R>; // This class defines simplified adapter for ComputeTask.\nEnum ComputeJobResultPolicy; // This enumeration provides different types of actions following the last received job result.\nEnum ComputeTaskSessionScope; // Defines life-time scopes for checkpoint operations.\nClass ComputeExecutionRejectedException; // This exception defines execution rejection.\nClass ComputeJobFailoverException; // This runtime exception can be thrown from ComputeJob.execute() method to force job failover to another node within task topology.\nClass ComputeTaskCancelledException; // This exception indicates that grid task was cancelled.\nClass ComputeTaskTimeoutException; // This exception indicates that task execution timed out.\nClass ComputeUserUndeclaredException; // This exception is thrown when user's code throws undeclared runtime exception.\nAnnotation Type ComputeJobAfterSend; // This annotation allows to call a method right after the job has been successfully sent for execution.\n", "des": "Contains Compute Grid functionality."}
{"index": 3152, "repo": "tika-core-2.8.0", "code": "Package: config\n\nClasses and Interfaces: \nInterface Initializable; // Components that must do special processing across multiple fields at initialization time should implement this interface.\nInterface InitializableProblemHandler; // This is to be used to handle potential recoverable problems that might arise during initialization.\nInterface LoadErrorHandler; // Interface for error handling strategies in service class loading.\nClass ConfigBase;\nClass Param<T>; // This is a serializable model class for parameters from configuration file.\nClass ParamField; // This class stores metdata for Field annotation are used to map them to Param at runtime\nClass ServiceLoader; // Internal utility class that Tika uses to look up service providers.\nClass TikaActivator; // Bundle activator that adjust the class loading mechanism of the ServiceLoader class to work correctly in an OSGi environment.\nClass TikaConfig; // Parse xml config file.\nClass TikaConfigSerializer;\nClass TikaTaskTimeout;\nEnum TikaConfigSerializer.Mode;\nAnnotation Type Field; // Field annotation is a contract for binding Param value from Tika Configuration to an object.\n", "des": "Tika configuration tools."}
{"index": 2654, "repo": "spring-data-cassandra-4.1.2", "code": "Package: lookup\n\nClasses and Interfaces: \npublic abstract class AbstractRoutingSessionFactory extends Object implements SessionFactory, InitializingBean; // Abstract SessionFactory implementation that routes AbstractRoutingSessionFactory.getSession() calls to one of various target factories based on a lookup key.\npublic class BeanFactorySessionFactoryLookup extends Object implements SessionFactoryLookup, BeanFactoryAware; // SessionFactoryLookup implementation based on a Spring BeanFactory.\npublic class MapSessionFactoryLookup extends Object implements SessionFactoryLookup; // Simple SessionFactoryLookup implementation that relies on a map for doing lookups.\n@FunctionalInterface public interface SessionFactoryLookup; // Strategy interface for looking up SessionFactory by name.\npublic class SessionFactoryLookupFailureException extends NonTransientDataAccessException; // Exception to be thrown by a SessionFactoryLookup implementation, indicating that the specified SessionFactory could not be obtained.\npublic class SingleSessionFactoryLookup extends Object implements SessionFactoryLookup; // An implementation of SessionFactoryLookup that simply wraps a single given SessionFactory, returned for any session factory name.\n", "des": "Provides a strategy for looking up SessionFactory."}
{"index": 2851, "repo": "spring-integration-core-6.1.2", "code": "Package: context\n\nClasses and Interfaces: \npublic interface ExpressionCapable; // Components that implement this interface are capable of supporting a primary SpEL expression as part of their configuration.\npublic abstract class IntegrationContextUtils extends Object; // Utility methods for accessing common integration components from the BeanFactory.\npublic abstract class IntegrationObjectSupport extends Object implements org.springframework.beans.factory.BeanNameAware, NamedComponent, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean, ExpressionCapable; // A base class that provides convenient access to the bean factory as well as TaskScheduler and ConversionService instances.\npublic final class IntegrationProperties extends Object; // Utility class to encapsulate infrastructure Integration properties constants and their default values.\npublic interface Orderable extends org.springframework.core.Ordered; // Interface that extends Ordered while also exposing the Orderable.setOrder(int) as an interface-level so that it is avaiable on AOP proxies, etc.\npublic interface OrderlyShutdownCapable; // Interface for components that wish to be considered for an orderly shutdown using management interfaces.\n", "des": "Provides classes relating to application context configuration."}
{"index": 89, "repo": "ignite-core-2.15.0", "code": "Package: discovery\n\nSub Packages: \npackage discovery.isolated; // Contains implementation of special \"isolated\" mode for single-node cluster.\npackage discovery.tcp; // Contains default TCP/IP implementation for discovery SPI.\n\nClasses and Interfaces: \nInterface DiscoveryDataBag.GridDiscoveryData; // Facade interface representing DiscoveryDataBag object with discovery data collected in the grid.\nInterface DiscoveryDataBag.JoiningNodeDiscoveryData; // Facade interface representing DiscoveryDataBag object with discovery data from joining node.\nInterface DiscoveryMetricsProvider; // Provides metrics to discovery SPI.\nInterface DiscoverySpi; // Grid discovery SPI allows to discover remote nodes in grid.\nInterface DiscoverySpiCustomMessage; // Message to send across ring.\nInterface DiscoverySpiDataExchange; // Handler for initial data exchange between Ignite nodes.\nInterface DiscoverySpiListener; // Listener for grid node discovery events.\nInterface DiscoverySpiMBean; // Generic MBean interface to monitor DiscoverySpi subsystem.\nInterface DiscoverySpiNodeAuthenticator; // Node authenticator.\nInterface IgniteDiscoveryThread; // Marker interface for discovery thread on cluster server node.\nClass DiscoveryDataBag; // Provides interface for GridComponent to collect and exchange discovery data both on joining node and on cluster nodes.\nClass DiscoveryNotification; // Discovery notification object.\nAnnotation Type DiscoverySpiHistorySupport; // This annotation is for all implementations of DiscoverySpi that support topology snapshots history.\nAnnotation Type DiscoverySpiMutableCustomMessageSupport; // This annotation is for all implementations of DiscoverySpi that support topology mutable DiscoverySpiCustomMessages.\nAnnotation Type DiscoverySpiOrderSupport; // This annotation is for all implementations of DiscoverySpi that support proper node ordering.\n", "des": "Contains APIs for topology manager SPI."}
{"index": 153, "repo": "ignite-core-2.15.0", "code": "Package: persistence\n\nSub Packages: \npackage persistence.pagemem; // This package contains page memory implementation for case persitence is enabled.\n\nClasses and Interfaces: \nInterface CacheDataRow; // Cache data row.\nInterface CacheSearchRow;\nInterface CheckpointLockStateChecker; // Interface for perform checking that checkpoint lock is held by current track\nInterface DatabaseLifecycleListener;\nInterface IndexStorage; // Meta store.\nInterface PageStoreWriter; // Interface for write page to PageStore.\nInterface Storable; // Simple interface for data, store in some RowStore.\nClass CacheDataRowAdapter; // Cache data row adapter.\nClass CacheStripedExecutor; // Wrapper over StripedExecutor, that groups submitted tasks by cache group and partition.\nClass CheckCorruptedCacheStoresCleanAction;\nClass CleanCacheStoresMaintenanceAction;\nClass CorruptedPdsMaintenanceCallback;\nClass DataRegion; // Data region provides access to objects configured with DataRegionConfiguration configuration.\nClass DataRegionMetricsImpl;\nClass DataRegionMetricsSnapshot;\nClass DataRowCacheAware; // Data row implementation that can optionally hide the cache identifier and can set null as value.\nClass DataStorageMetricsImpl;\nClass DataStorageMXBeanImpl; // TransactionsMXBean implementation.\nClass DataStructure; // Base class for all the data structures based on PageMemory.\nClass FileLockHolder; // Abstract file lock holder.\nClass GridCacheDatabaseSharedManager;\nClass GridCacheDatabaseSharedManager.NodeFileLockHolder; // Node file lock holder.\nClass GridCacheOffheapManager; // Used when persistence enabled.\nClass GridCacheOffheapManager.GridCacheDataStore;\nClass IgniteCacheDatabaseSharedManager;\nClass IndexStorageImpl; // Metadata storage.\nClass IndexStorageImpl.IndexItem;\nClass IndexStorageImpl.MetaStoreInnerIO;\nClass IndexStorageImpl.MetaStoreLeafIO;\nClass RecoveryDebug;\nClass RootPage;\nClass RowStore; // Data store for H2 rows.\nEnum CacheDataRowAdapter.RowData;\nEnum CheckpointState; // Possible checkpoint states.\nClass CorruptedDataStructureException; // Abstract exception when DataStructure are corrupted.\nClass CorruptedPartitionMetaPageException; // Exception to distinguish partition meta page broken invariants.\nClass StorageException; // Exception is needed to distinguish WAL manager & page store critical I/O errors.\n", "des": "This package contain cache with persistence implementation."}
{"index": 1412, "repo": "spring-boot-actuator-3.1.1", "code": "Package: amqp\n\nClasses and Interfaces: \npublic class RabbitMetrics extends Object implements io.micrometer.core.instrument.binder.MeterBinder; // A MeterBinder for RabbitMQ Java Client metrics.\n", "des": "Actuator support for RabbitMQ Java Client metrics."}
{"index": 3222, "repo": "commons-configuration2-2.9.0", "code": "Package: reloading\n\nClasses and Interfaces: \nInterface ManagedReloadingDetectorMBean; // MBean definition for managing configuration reload.\nInterface ReloadingControllerSupport; // Definition of an interface to be implemented by components which support reloading operations managed by a ReloadingController.\nInterface ReloadingDetector; // An interface to be implemented by objects which can detect whether a reload operation is required.\nClass CombinedReloadingController; // A specialized ReloadingController implementation which manages an arbitrary number of other ReloadingController objects.\nClass FileHandlerReloadingDetector; // A specialized implementation of ReloadingDetector which monitors a file specified by a FileHandler.\nClass ManagedReloadingDetector; // A strategy to reload configuration based on management requests.\nClass PeriodicReloadingTrigger; // A timer-based trigger for reloading checks.\nClass ReloadingController; // A class for adding support for reload operations in a generic way.\nClass ReloadingEvent; // An event that is fired when a reload operation is required.\nClass VFSFileHandlerReloadingDetector; // A file-based reloading strategy that uses Commons VFS to determine when a file was changed.\n", "des": "This package contains classes and interfaces related to the reloading mechanism."}
{"index": 2685, "repo": "spring-data-jpa-3.1.2", "code": "Package: cdi\n\nClasses and Interfaces: \npublic class BeanManagerQueryRewriterProvider extends Object implements QueryRewriterProvider; // A BeanManager-based QueryRewriterProvider.\npublic class JpaRepositoryExtension extends CdiRepositoryExtensionSupport; // A portable CDI extension which registers beans for Spring Data JPA repositories.\n", "des": "CDI support for Spring Data JPA Repositories."}
{"index": 3638, "repo": "solr-core-9.3.0", "code": "Package: cloud\n\nSub Packages: \npackage cloud.overseer; // Classes for updating cluster state in SolrCloud mode.\n\nClasses and Interfaces: \nInterface ClusterSingleton; // Intended for components that should be enabled only one instance per cluster.\nInterface DistributedCollectionLockFactory;\nInterface DistributedConfigSetLockFactory;\nInterface DistributedLock; // A lock that can be used across cluster nodes.\nInterface Overseer.Message;\nInterface OverseerMessageHandler; // Interface for processing messages received by an OverseerTaskProcessor\nInterface OverseerMessageHandler.Lock;\nInterface OverseerTaskProcessor.OverseerMessageHandlerSelector; // An interface to determine which OverseerMessageHandler handles a given message.\nInterface RecoveryStrategy.RecoveryListener;\nClass ActionThrottle;\nClass ActiveReplicaWatcher; // Watch for replicas to become Replica.State.ACTIVE.\nClass CloudDescriptor; // SolrCloud metadata attached to a CoreDescriptor.\nClass CloudUtil;\nClass ConfigSetApiLockFactory; // This class implements a higher level locking abstraction for the Config Set API using lower level read and write locks.\nClass ConfigSetCmds; // This class contains methods dealing with Config Sets and called for Config Set API execution, called from the OverseerConfigSetMessageHandler or from DistributedCollectionConfigSetCommandRunner.runConfigSetCommand(org.apache.solr.response.SolrQueryResponse, org.apache.solr.common.params.ConfigSetParams.ConfigSetAction, java.util.Map<java.lang.String, java.lang.Object>, long) depending on whether Collection and Config Set APIs are Overseer based or distributed.\nClass DistributedApiAsyncTracker; // Class holding the implementation required for tracking asynchronous Collection API (or other) tasks when the Collection API is distributed.\nClass DistributedClusterStateUpdater; // Gives access to distributed cluster state update methods and allows code to inquire whether distributed state update is enabled.\nClass DistributedClusterStateUpdater.StateChangeRecorder; // Class handling the distributed updates of collection's Zookeeper files state.json based on multiple updates applied to a single collection (as is sometimes done by *Cmd classes implementing the Collection API commands).\nClass DistributedMap; // A distributed map.\nClass DistributedMultiLock; // A lock as acquired for running a single API command (Collection or Config Set or anything else in the future).\nClass ElectionContext;\n", "des": "Classes for dealing with ZooKeeper when operating in SolrCloud mode."}
{"index": 469, "repo": "jackson-core-2.15.2", "code": "Package: async\n\nClasses and Interfaces: \nClass NonBlockingByteBufferJsonParser; // Non-blocking parser implementation for JSON content that takes its input via ByteBuffer instance(s) passed.\nClass NonBlockingJsonParser; // Non-blocking parser implementation for JSON content that takes its input via byte[] passed.\nClass NonBlockingJsonParserBase; // Intermediate base class for non-blocking JSON parsers.\nClass NonBlockingUtf8JsonParserBase; // Non-blocking parser base implementation for JSON content.\n", "des": "Non-blocking (\"async\") JSON parser implementation."}
{"index": 3331, "repo": "opencms-core-15.0", "code": "Package: edit\n\nClasses and Interfaces: \nClass CmsEditModuleForm; // Form for editing a module.\nClass CmsExportPointWidget; // Widget used to edit a module export point.\nClass CmsModuleDependencyWidget; // Widget used to edit a module dependency.\nClass CmsModuleResourceSelectField; // A widget for selecting a module resource.\nClass CmsSiteSelectorNewValueHandler; // Helper class used when new options are automatically added to a site selector combo box.\n", "des": "Contains classes of the module manager app used to edit modules."}
{"index": 524, "repo": "commons-vfs2-2.9.0", "code": "Package: http4s\n\nClasses and Interfaces: \nClass Http4sFileNameParser; // FileNameParser implementation for http4s provider, setting default port to 443.\nClass Http4sFileProvider; // http4s provider that uses HttpComponents HttpClient.\n", "des": "The HTTP4S File Provider"}
{"index": 3289, "repo": "opencms-core-15.0", "code": "Package: result\n\nClasses and Interfaces: \nInterface I_CmsSearchResourceBean; // Interface for a single search result, as wrapped JSP EL friendly.\nInterface I_CmsSearchResultWrapper; // Interface of the JSP EL friendly wrapper for all Solr search results and the search form controller.\nInterface I_CmsSearchStateParameters; // Interface for the search state parameters.\nClass CmsSearchResourceBean; // JSP EL friendly wrapper class for a single search result (document).\nClass CmsSearchResultWrapper; // Wrapper for the whole search result.\nClass CmsSearchStateParameters; // State parameter wrapper that allows to manipulate the request parameters representing the state of the current search.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "API classes for the result of the search form support provided for server-side Solr search."}
{"index": 2088, "repo": "spring-webmvc-6.0.11", "code": "Package: xml\n\nClasses and Interfaces: \npublic class MappingJackson2XmlView extends AbstractJackson2View; // Spring MVC View that renders XML content by serializing the model for the current request using Jackson 2's XmlMapper.\npublic class MarshallingView extends AbstractView; // Spring-MVC View that allows for response context to be rendered as the result of marshalling by a Marshaller.\n", "des": "Support classes for providing a View implementation based on XML Marshalling."}
{"index": 3021, "repo": "spring-web-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface ControllerAdvice; // Specialization of @Component for classes that declare @ExceptionHandler, @InitBinder, or @ModelAttribute methods to be shared across multiple @Controller classes.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface CookieValue; // Annotation to indicate that a method parameter is bound to an HTTP cookie.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface CrossOrigin; // Annotation for permitting cross-origin requests on specific handler classes and/or handler methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented @RequestMapping(method=DELETE) public @interface DeleteMapping; // Annotation for mapping HTTP DELETE requests onto specific handler methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Reflective(org.springframework.web.bind.annotation.ExceptionHandlerReflectiveProcessor.class) public @interface ExceptionHandler; // Annotation for handling exceptions in specific handler classes and/or handler methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented @RequestMapping(method=GET) public @interface GetMapping; // Annotation for mapping HTTP GET requests onto specific handler methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Reflective public @interface InitBinder; // Annotation that identifies methods that initialize the WebDataBinder which will be used for populating command and form object arguments of annotated handler methods.\n@Target(ANNOTATION_TYPE) @Retention(RUNTIME) public @interface Mapping; // Meta annotation that indicates a web mapping annotation.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface MatrixVariable; // Annotation which indicates that a method parameter should be bound to a name-value pair within a path segment.\n@Target({PARAMETER,METHOD}) @Retention(RUNTIME) @Documented @Reflective public @interface ModelAttribute; // Annotation that binds a method parameter or method return value to a named model attribute, exposed to a web view.\n@Target(METHOD) @Retention(RUNTIME) @Documented @RequestMapping(method=PATCH) public @interface PatchMapping; // Annotation for mapping HTTP PATCH requests onto specific handler methods.\n", "des": "Annotations for binding requests to controllers and handler methods as well as for binding request parameters to method arguments."}
{"index": 3657, "repo": "solr-core-9.3.0", "code": "Package: configsets\n\nClasses and Interfaces: \nClass ConfigSetAPIBase; // Parent class for all APIs that manipulate configsets\nClass CreateConfigSetAPI; // V2 API for creating a new configset as a copy of an existing one.\nClass DeleteConfigSetAPI; // V2 API for deleting an existing configset\nClass ListConfigSetsAPI; // V2 API for adding or updating a single file within a configset.\nClass ListConfigSetsAPI.ListConfigsetsResponse; // Response body POJO for the ListConfigSetsAPI resource.\nClass UploadConfigSetAPI; // V2 API for uploading a new configset (or overwriting an existing one).\nClass UploadConfigSetFileAPI; // V2 API for adding or updating a single file within a configset.\n", "des": "V2 API classes for performing CRUD operations on configsets."}
{"index": 3306, "repo": "opencms-core-15.0", "code": "Package: scheduler\n\nSub Packages: \npackage scheduler.jobs; // Some predefined implementations for often used scheduled job tasks.\n\nClasses and Interfaces: \nInterface I_CmsScheduledJob; // Identifies a class that can be scheduled with the OpenCms scheduler.\nClass CmsScheduledJobInfo; // Describes a scheduled job for the OpenCms scheduler.\nClass CmsScheduleManager; // Manages the OpenCms scheduled jobs.\nClass CmsSchedulerThread; // A worker thread for the OpenCms scheduler.\nClass CmsSchedulerThreadPool; // Simple thread pool used for the Quartz scheduler in OpenCms.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsSchedulerException; // Describes errors that occur in the context of the OpenCms scheduler.\n", "des": "The OpenCms scheduler provides a facility to run jobs in a regular schedule, much like the \"cron\" faciltiy in UNIX systems."}
{"index": 1970, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: servlet\n\nClasses and Interfaces: \n@AutoConfiguration(before=SecurityAutoConfiguration.class) @ConditionalOnClass({org.springframework.security.config.annotation.web.configuration.EnableWebSecurity.class,org.springframework.security.oauth2.client.registration.ClientRegistration.class}) @ConditionalOnWebApplication(type=SERVLET) @Import({org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientRegistrationRepositoryConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2WebSecurityConfiguration.class}) public class OAuth2ClientAutoConfiguration extends Object; // Auto-configuration for OAuth client support.\n", "des": "Auto-configuration for Spring Security's OAuth 2 client."}
{"index": 3169, "repo": "tomcat-api-10.1", "code": "Package: ant\n\nSub Packages: \npackage ant.jmx; // This package contains a set of JMX Task implementations for Ant (version 1.6 or later) that can be used to interact with the Remote JMX JSR 160 RMI Adaptor to get/set attributes, invoke MBean operations and query for Mbeans inside a running instance of Tomcat.\n\nClasses and Interfaces: \nClass AbstractCatalinaCommandTask;\nClass AbstractCatalinaTask; // Abstract base class for Ant tasks that interact with the Manager web application for dynamically deploying and undeploying applications.\nClass BaseRedirectorHelperTask; // Abstract base class to add output redirection support for Catalina Ant tasks.\nClass DeployTask; // Ant task that implements the /deploy command, supported by the Tomcat manager application.\nClass FindLeaksTask; // Ant task that implements the /findleaks command, supported by the Tomcat manager application.\nClass JKStatusUpdateTask; // Ant task that implements the /status command, supported by the mod_jk status (1.2.9) application.\nClass JMXGetTask; // Ant task that implements the JMX Get command (/jmxproxy/?\nClass JMXQueryTask; // Ant task that implements the JMX Query command (/jmxproxy/?\nClass JMXSetTask; // Ant task that implements the JMX Set command (/jmxproxy/?\nClass ListTask; // Ant task that implements the /list command, supported by the Tomcat manager application.\nClass ReloadTask; // Ant task that implements the /reload command, supported by the Tomcat manager application.\nClass ResourcesTask; // Ant task that implements the /resources command, supported by the Tomcat manager application.\nClass ServerinfoTask; // Ant task that implements the /serverinfo command supported by the Tomcat manager application.\nClass SessionsTask; // Ant task that implements the /sessions command supported by the Tomcat manager application.\nClass SslConnectorCiphersTask; // Ant task that implements the /sslConnectorCiphers command supported by the Tomcat manager application.\nClass StartTask; // Ant task that implements the /start command, supported by the Tomcat manager application.\nClass StopTask; // Ant task that implements the /stop command, supported by the Tomcat manager application.\n", "des": "This package contains a set of Task implementations for Ant (version 1.6.x or later) that can be used to interact with the Manager application to deploy, undeploy, list, reload, start and stop web applications from a running instance of Tomcat."}
{"index": 3147, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: transaction\n\nSub Packages: \npackage transaction.spi; // Extended SPI contracts for the resource-level transaction capabilities of Hibernate.\n\nClasses and Interfaces: \nClass LocalSynchronizationException; // Wraps an exception thrown from a \"local synchronization\" (one registered in the SynchronizationRegistry).\nClass NullSynchronizationException; // Indicates an attempt to register a null synchronization.\nClass TransactionRequiredForJoinException; // Indicates a call to TransactionCoordinator.explicitJoin() that requires an active transaction where there currently is none.\n", "des": "Defines the resource-level transaction capabilities of Hibernate, which revolves around the TransactionCoordinator contract."}
{"index": 1369, "repo": "spring-boot-actuator-3.1.1", "code": "Package: amqp\n\nClasses and Interfaces: \npublic class RabbitHealthIndicator extends AbstractHealthIndicator; // Simple implementation of a HealthIndicator returning status information for the RabbitMQ messaging system.\n", "des": "Actuator support for AMQP and RabbitMQ."}
{"index": 3709, "repo": "solr-core-9.3.0", "code": "Package: suggest\n\nSub Packages: \npackage suggest.fst; // Factories for FST and Analyzing based Suggesters\npackage suggest.jaspell; // Factories for JaSpell based Suggesters\npackage suggest.tst; // Factories for TST based Suggesters\n\nClasses and Interfaces: \nInterface SuggesterParams;\nClass DictionaryFactory; // Encapsulates shared fields for all types of dictionaryFactory classes\nClass DocumentDictionaryFactory; // Factory for DocumentDictionary\nClass DocumentExpressionDictionaryFactory; // Factory for DocumentValueSourceDictionary\nClass FileDictionaryFactory; // Factory for FileDictionary\nClass HighFrequencyDictionaryFactory; // Factory for HighFrequencyDictionary\nClass LookupFactory; // Suggester factory for creating Lookup instances.\nClass SolrSuggester; // Responsible for loading the lookup and dictionary Implementations specified by the SolrConfig.\nClass Suggester;\nClass SuggesterOptions; // Encapsulates the inputs required to be passed on to the underlying suggester in SolrSuggester\nClass SuggesterResult; // Encapsulates the results returned by the suggester in SolrSuggester\n", "des": "APIs and classes used by the SpellCheckComponent"}
{"index": 2843, "repo": "spring-integration-core-6.1.2", "code": "Package: aop\n\nClasses and Interfaces: \npublic class CompoundTriggerAdvice extends Object implements MessageSourceMutator, ReceiveMessageAdvice; // A MessageSourceMutator that uses a CompoundTrigger to adjust the poller - when a message is present, the compound trigger's primary trigger is used to determine the next poll.\npublic class MessagePublishingInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.BeanFactoryAware; // A MethodInterceptor that publishes Messages to a channel.\n@FunctionalInterface public interface MessageSourceMutator extends ReceiveMessageAdvice; // A ReceiveMessageAdvice extension that can mutate a MessageSource before and/or after MessageSource.receive() is called.\npublic class MethodAnnotationPublisherMetadataSource extends Object; // An PublisherMetadataSource implementation that retrieves the channel name and expression strings from an annotation.\npublic class MethodNameMappingPublisherMetadataSource extends Object;\npublic class PublisherAnnotationAdvisor extends org.springframework.aop.support.AbstractPointcutAdvisor implements org.springframework.beans.factory.BeanFactoryAware; // An advisor that will apply the MessagePublishingInterceptor to any methods containing the provided annotations.\npublic class PublisherAnnotationBeanPostProcessor extends org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.SmartInitializingSingleton; // Post-processes beans that contain the method-level @Publisher annotation.\n@FunctionalInterface public interface ReceiveMessageAdvice extends org.aopalliance.intercept.MethodInterceptor; // An AOP advice to perform hooks before and/or after a receive() contract is called.\npublic class SimpleActiveIdleReceiveMessageAdvice extends Object implements ReceiveMessageAdvice; // A simple advice that polls at one rate when messages exist and another when there are no messages.\npublic class SimplePublisherMetadataSource extends Object; // Simple implementation of PublisherMetadataSource that allows for configuration of a single channel name, payload expression, and array of header key=value expressions.\n", "des": "Provides classes to support message publication using AOP."}
{"index": 3365, "repo": "opencms-core-15.0", "code": "Package: commons\n\nClasses and Interfaces: \nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains often used OpenCms Workplace dialogs, for example for file operations, user preferences and project based operations like publishing."}
{"index": 744, "repo": "spring-data-solr-4.3.15", "code": "Package: server\n\nSub Packages: \npackage server.config; // Config support for SolrClient.\npackage server.support; // Everything SolrClient and EmbeddedSolrServer related.\n\nClasses and Interfaces: \nInterface SolrClientFactory; // SolrClientFactory replaces SolrServerFactory from version 1.x and provides access to the solrj SolrClient.\n", "des": "SolrClient configuration and spring integration."}
{"index": 2726, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: json\n\nSub Packages: \npackage json.builder; // Builders for JSON item reader and writer.\n\nClasses and Interfaces: \npublic class GsonJsonObjectMarshaller<T> extends Object implements JsonObjectMarshaller<T>; // A json object marshaller that uses Google Gson to marshal an object into a json representation.\npublic class GsonJsonObjectReader<T> extends Object implements JsonObjectReader<T>; // Implementation of JsonObjectReader based on Google Gson.\npublic class JacksonJsonObjectMarshaller<T> extends Object implements JsonObjectMarshaller<T>; // A json object marshaller that uses Jackson to marshal an object into a json representation.\npublic class JacksonJsonObjectReader<T> extends Object implements JsonObjectReader<T>; // Implementation of JsonObjectReader based on Jackson.\npublic class JsonFileItemWriter<T> extends AbstractFileItemWriter<T>; // Item writer that writes data in json format to an output file.\npublic class JsonItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>; // ItemStreamReader implementation that reads Json objects from a Resource having the following format:\npublic interface JsonObjectMarshaller<T>; // Strategy interface to marshal an object into a json representation.\npublic interface JsonObjectReader<T>; // Strategy interface for Json readers.\n", "des": "Infrastructure implementations of JSON input and output."}
{"index": 3510, "repo": "opennlp-tools-2.2.0", "code": "Package: commons\n\nClasses and Interfaces: \nInterface Sample; // Represents a generic type of processable elements.\nInterface Trainer; // Represents a common base for training implementations.\nAnnotation Type Internal; // Classes, fields, or methods annotated &#64;Internal are for OpenNLP internal use only.\nAnnotation Type ThreadSafe; // Classes, fields, or methods annotated &#64;ThreadSafe are safe to use in multithreading contexts.\n", "des": "Package related to common interfaces used in different contexts."}
{"index": 288, "repo": "pdfbox-3.0.0-beta1", "code": "Package: markedcontent\n\nClasses and Interfaces: \nClass PDMarkedContent; // A marked content.\nClass PDPropertyList; // A property list is a dictionary containing private information meaningful to the conforming writer creating the marked content.\n", "des": "The marked content package provides a mechanism for modeling marked-content sequences."}
{"index": 2420, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: condition\n\nClasses and Interfaces: \n@Endpoint(id=\"conditions\") public class ConditionsReportEndpoint extends Object; // @Endpoint to expose the ConditionEvaluationReport.\npublic static final class ConditionsReportEndpoint.ConditionsDescriptor extends Object implements org.springframework.boot.actuate.endpoint.OperationResponseBody; // A description of an application's condition evaluation.\npublic static final class ConditionsReportEndpoint.ContextConditionsDescriptor extends Object; // A description of an application context's condition evaluation, primarily intended for serialization to JSON.\npublic static class ConditionsReportEndpoint.MessageAndConditionDescriptor extends Object; // Adapts ConditionEvaluationReport.ConditionAndOutcome to a JSON friendly structure.\npublic static class ConditionsReportEndpoint.MessageAndConditionsDescriptor extends Object; // Adapts ConditionEvaluationReport.ConditionAndOutcomes to a JSON friendly structure.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=ConditionsReportEndpoint.class) public class ConditionsReportEndpointAutoConfiguration extends Object; // Auto-configuration for the ConditionsReportEndpoint.\n", "des": "Auto-configuration for actuator condition concerns."}
{"index": 108, "repo": "ignite-core-2.15.0", "code": "Package: communication\n\nClasses and Interfaces: \nInterface IgniteMessageFactory; // Message factory for all communication messages registered using IgniteMessageFactory.register(short, Supplier) method call.\nInterface IoPool; // The interface of IO Messaging Pool Extension.\nInterface Message; // Base class for all communication messages.\nInterface MessageFactory; // Use MessageFactoryProvider instead.\nInterface MessageFactoryProvider; // Provider of communication message factories.\nInterface MessageFormatter; // Provides a custom format for communication messages.\nInterface MessageReader; // Communication message reader.\nInterface MessageWriter; // Communication message writer.\nEnum MessageCollectionItemType; // Enum representing possible types of collection items.\n", "des": "Contains extendable components for communication."}
{"index": 2760, "repo": "spring-beans-6.0.11", "code": "Package: serviceloader\n\nClasses and Interfaces: \npublic abstract class AbstractServiceLoaderBasedFactoryBean extends AbstractFactoryBean<Object> implements BeanClassLoaderAware; // Abstract base class for FactoryBeans operating on the JDK 1.6 ServiceLoader facility.\npublic class ServiceFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware; // FactoryBean that exposes the 'primary' service for the configured service class, obtained through the JDK 1.6 ServiceLoader facility.\npublic class ServiceListFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware; // FactoryBean that exposes all services for the configured service class, represented as a List of service objects, obtained through the JDK 1.6 ServiceLoader facility.\npublic class ServiceLoaderFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware; // FactoryBean that exposes the JDK 1.6 ServiceLoader for the configured service class.\n", "des": "Support package for the Java ServiceLoader facility."}
{"index": 3823, "repo": "lucene-analysis-common-9.7.0", "code": "Package: util\n\nClasses and Interfaces: \nClass CharArrayIterator; // A CharacterIterator used internally for use with BreakIterator\nClass CharTokenizer; // An abstract base class for simple, character-oriented tokenizers.\nClass ElisionFilter; // Removes elisions from a TokenStream.\nClass ElisionFilterFactory; // Factory for ElisionFilter.\nClass FilesystemResourceLoader; // Simple ResourceLoader that opens resource files from the local file system, optionally resolving against a base directory.\nClass OpenStringBuilder; // A StringBuilder that allows one to access the array.\nClass RollingCharBuffer; // Acts like a forever growing char[] as you read characters into it from the provided reader, but internally it uses a circular buffer to only hold the characters that haven't been freed yet.\nClass SegmentingTokenizerBase; // Breaks text into sentences with a BreakIterator and allows subclasses to decompose these sentences into words.\nClass StemmerUtil; // Some commonly-used stemming functions\nClass UnicodeProps; // This file contains unicode properties used by various CharTokenizers.\n", "des": "Utility functions for text analysis."}
{"index": 3580, "repo": "lucene-test-framework-9.7.0", "code": "Package: asserting\n\nClasses and Interfaces: \nClass AssertingCodec; // Acts like the default codec but with additional asserts.\nClass AssertingDocValuesFormat; // Just like the default but with additional asserts.\nClass AssertingKnnVectorsFormat; // Wraps the default KnnVectorsFormat and provides additional assertions.\nClass AssertingLiveDocsFormat; // Just like the default live docs format but with additional asserts.\nClass AssertingNormsFormat; // Just like the default but with additional asserts.\nClass AssertingPointsFormat; // Just like the default point format but with additional asserts.\nClass AssertingPostingsFormat; // Just like the default postings format but with additional asserts.\nClass AssertingStoredFieldsFormat; // Just like the default stored fields format but with additional asserts.\nClass AssertingTermVectorsFormat; // Just like the default vectors format but with additional asserts.\n", "des": "Codec for testing that asserts various contracts of the codec apis."}
{"index": 2215, "repo": "spring-data-commons-3.1.2", "code": "Package: cdi\n\nClasses and Interfaces: \npublic abstract class CdiRepositoryBean<T> extends Object implements jakarta.enterprise.inject.spi.Bean<T>, jakarta.enterprise.inject.spi.PassivationCapable; // Base class for Bean wrappers.\npublic interface CdiRepositoryConfiguration; // Interface containing the configurable options for the Spring Data repository subsystem using CDI.\npublic class CdiRepositoryContext extends Object; // Context for CDI repositories.\npublic abstract class CdiRepositoryExtensionSupport extends Object implements jakarta.enterprise.inject.spi.Extension; // Base class for Extension implementations that create instances for Spring Data repositories.\n@Documented @Retention(RUNTIME) @Target({TYPE,ANNOTATION_TYPE}) @Inherited public @interface Eager; // Annotation to mark repository interfaces to be instantiated eagerly in a CDI context.\n", "des": "Base classes to implement CDI support for repositories."}
{"index": 3347, "repo": "opencms-core-15.0", "code": "Package: history\n\nSub Packages: \npackage history.diff; // Contains code for the comparison view of the file history dialog.\n\nClasses and Interfaces: \nClass CmsHistoryDialog; // Dialog used to change resource modification times.\nClass CmsHistoryRow; // Represents a row of the file history table.\n", "des": "Contains code for the file history dialog."}
{"index": 2199, "repo": "spring-data-commons-3.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic class BeanComponentDefinitionBuilder extends Object; // Helper to create BeanComponentDefinition more easily.\npublic interface ConfigurationUtils; // Helper class to centralize common functionality that needs to be used in various places of the configuration implementation.\npublic abstract class ParsingUtils extends Object; // Utility methods for BeanDefinitionParser implementations.\npublic class TypeFilterParser extends Object; // Parser to populate the given ClassPathScanningCandidateComponentProvider with TypeFilters parsed from the given Element's children.\npublic static enum TypeFilterParser.Type extends Enum<TypeFilterParser.Type>;\n", "des": "Basic support for creating custom Spring namespaces and JavaConfig."}
{"index": 1159, "repo": "commons-math3-3.6.1", "code": "Package: leastsquares\n\nClasses and Interfaces: \nInterface LeastSquaresOptimizer; // An algorithm that can be applied to a non-linear least squares problem.\nInterface LeastSquaresOptimizer.Optimum; // The optimum found by the optimizer.\nInterface LeastSquaresProblem; // The data necessary to define a non-linear least squares problem.\nInterface LeastSquaresProblem.Evaluation; // An evaluation of a LeastSquaresProblem at a particular point.\nInterface MultivariateJacobianFunction; // A interface for functions that compute a vector of values and can compute their derivatives (Jacobian).\nInterface ParameterValidator; // Interface for validating a set of model parameters.\nInterface ValueAndJacobianFunction; // A interface for functions that compute a vector of values and can compute their derivatives (Jacobian).\nClass AbstractEvaluation; // An implementation of LeastSquaresProblem.Evaluation that is designed for extension.\nClass EvaluationRmsChecker; // Check if an optimization has converged based on the change in computed RMS.\nClass GaussNewtonOptimizer; // Gauss-Newton least-squares solver.\nClass LeastSquaresAdapter; // An adapter that delegates to another implementation of LeastSquaresProblem.\nClass LeastSquaresBuilder; // A mutable builder for LeastSquaresProblems.\nClass LeastSquaresFactory; // A Factory for creating LeastSquaresProblems.\nClass LevenbergMarquardtOptimizer; // This class solves a least-squares problem using the Levenberg-Marquardt algorithm.\nEnum GaussNewtonOptimizer.Decomposition; // The decomposition algorithm to use to solve the normal equations.\n", "des": "This package provides algorithms that minimize the residuals between observations and model values."}
{"index": 3769, "repo": "lucene-analysis-common-9.7.0", "code": "Package: classic\n\nClasses and Interfaces: \nClass ClassicAnalyzer; // Filters ClassicTokenizer with ClassicFilter, LowerCaseFilter and StopFilter, using a list of English stop words.\nClass ClassicFilter; // Normalizes tokens extracted with ClassicTokenizer.\nClass ClassicFilterFactory; // Factory for ClassicFilter.\nClass ClassicTokenizer; // A grammar-based tokenizer constructed with JFlex\nClass ClassicTokenizerFactory; // Factory for ClassicTokenizer.\n", "des": "Fast, general-purpose grammar-based tokenizers."}
{"index": 2275, "repo": "spring-data-elasticsearch-5.1.2", "code": "Package: elc\n\nClasses and Interfaces: \npublic class Aggregation extends Object; // Class to combine an Elasticsearch Aggregate with its name.\npublic class AutoCloseableElasticsearchClient extends co.elastic.clients.elasticsearch.ElasticsearchClient implements AutoCloseable; // Extension of the ElasticsearchClient class that implements AutoCloseable.\npublic abstract class ChildTemplate<T extends co.elastic.clients.transport.Transport,CLIENT extends co.elastic.clients.ApiClient<T,CLIENT>> extends Object; // base class for a template that uses one of the ElasticsearchClient's child clients like ElasticsearchClusterClient or ElasticsearchIndicesClient.\n@FunctionalInterface public static interface ChildTemplate.ClientCallback<CLIENT,RESULT>; // Callback interface to be used with ChildTemplate.execute(ClientCallback) for operating directly on the client.\npublic class ClusterTemplate extends ChildTemplate<co.elastic.clients.transport.ElasticsearchTransport,co.elastic.clients.elasticsearch.cluster.ElasticsearchClusterClient> implements ClusterOperations; // Implementation of the ClusterOperations interface using en ElasticsearchClusterClient.\npublic class CriteriaQueryException extends UncategorizedDataAccessException;\npublic class ElasticsearchAggregation extends Object implements AggregationContainer<Aggregation>; // AggregationContainer for a Aggregation that holds Elasticsearch data.\npublic class ElasticsearchAggregations extends Object implements AggregationsContainer<List<ElasticsearchAggregation>>; // AggregationsContainer implementation for the Elasticsearch aggregations.\npublic class ElasticsearchClientBeanDefinitionParser extends AbstractBeanDefinitionParser;\npublic class ElasticsearchClientFactoryBean extends Object implements FactoryBean<co.elastic.clients.elasticsearch.ElasticsearchClient>, InitializingBean, DisposableBean; // ElasticsearchClientFactoryBean\npublic final class ElasticsearchClients extends Object; // Utility class to create the different Elasticsearch clients\npublic static interface ElasticsearchClients.ElasticsearchHttpClientConfigurationCallback extends ClientConfiguration.ClientConfigurationCallback<org.apache.http.impl.nio.client.HttpAsyncClientBuilder>; // ClientConfiguration.ClientConfigurationCallback to configure the Elasticsearch RestClient's Http client with a HttpAsyncClientBuilder\npublic static interface ElasticsearchClients.ElasticsearchRestClientConfigurationCallback extends ClientConfiguration.ClientConfigurationCallback<org.elasticsearch.client.RestClientBuilder>; // ClientConfiguration.ClientConfigurationCallback to configure the RestClient client with a RestClientBuilder\npublic abstract class ElasticsearchConfiguration extends ElasticsearchConfigurationSupport; // Base class for a @Configuration class to set up the Elasticsearch connection using the Elasticsearch Client.\n", "des": "This package contains classes that use the new Elasticsearch client library (co.elastic.clients:elasticsearch-java) to access Elasticsearch."}
{"index": 3414, "repo": "commons-imaging-1.0-alpha3", "code": "Package: xbm\n\nClasses and Interfaces: \nClass XbmImageParser;\nClass XbmImagingParameters; // Xbm format parameters.\n", "des": "The X BitMap image format."}
{"index": 1162, "repo": "commons-math3-3.6.1", "code": "Package: geometry\n\nSub Packages: \npackage geometry.enclosing; // This package provides interfaces and classes related to the smallest enclosing ball problem.\npackage geometry.hull; // This package provides interfaces and classes related to the convex hull problem.\npackage geometry.partitioning; // This package provides classes to implement Binary Space Partition trees.\n\nClasses and Interfaces: \nInterface Point<S extends Space>; // This interface represents a generic geometrical point.\nInterface Space; // This interface represents a generic space, with affine and vectorial counterparts.\nInterface Vector<S extends Space>; // This interface represents a generic vector in a vectorial space or a point in an affine space.\nClass VectorFormat<S extends Space>; // Formats a vector in components list format \"{x; y; ...}\".\n", "des": "This package is the top level package for geometry."}
{"index": 3069, "repo": "spring-ws-core-4.0.5", "code": "Package: interceptor\n\nClasses and Interfaces: \npublic abstract class AbstractValidatingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointInterceptor, org.springframework.beans.factory.InitializingBean; // Abstract base class for EndpointInterceptor implementations that validate part of the message using a schema.\npublic class DelegatingSmartEndpointInterceptor extends Object implements SmartEndpointInterceptor; // Implementation of the SmartEndpointInterceptor interface that delegates to a delegate EndpointInterceptor.\npublic class EndpointInterceptorAdapter extends Object implements EndpointInterceptor; // Default implementation of the EndpointInterceptor interface, for simplified implementation of pre-only/post-only interceptors.\npublic class PayloadLoggingInterceptor extends AbstractLoggingInterceptor; // Simple EndpointInterceptor that logs the payload of request and response messages.\npublic class PayloadTransformingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointInterceptor, org.springframework.beans.factory.InitializingBean; // Interceptor that transforms the payload of WebServiceMessages using XSLT stylesheet.\n", "des": "Provides miscellaneous endpoints EndpointInterceptor implementations."}
{"index": 3213, "repo": "commons-configuration2-2.9.0", "code": "Package: builder\n\nSub Packages: \npackage builder.combined; // A package containing the implementation of the builder for combined configurations.\npackage builder.fluent; // This package defines a fluent API for setting up fully configured configuration builders.\n\nClasses and Interfaces: \nInterface BasicBuilderProperties<T>; // Definition of a properties interface for basic parameters which are supported by all ConfigurationBuilder implementations derived from BasicConfigurationBuilder.\nInterface BuilderParameters; // An interface to be implemented by objects which can be used to parameterize a ConfigurationBuilder.\nInterface ConfigurationBuilder<T extends ImmutableConfiguration>; // Definition of an interface for objects that can create ImmutableConfiguration or Configuration objects of a specific type.\nInterface DatabaseBuilderProperties<T>; // Definition of a properties interface for parameters of a database configuration.\nInterface DefaultParametersHandler<T>; // Definition of an interface for setting default values for specific configuration parameter objects.\nInterface EventListenerProvider; // Definition of an interface that is evaluated by a ConfigurationBuilder to initialize event listeners.\nInterface FileBasedBuilderProperties<T>; // Definition of a properties interface for parameters of file-based configurations.\nInterface HierarchicalBuilderProperties<T>; // Definition of a parameters interface for hierarchical configurations.\nInterface INIBuilderProperties<T>; // Definition of a parameters interface for INI configurations.\nInterface JndiBuilderProperties<T>; // Definition of a properties interface for parameters of a JNDI configuration.\nInterface PropertiesBuilderProperties<T>; // Definition of a parameters interface for properties configurations.\nInterface ReloadingDetectorFactory; // Definition of an interface for objects which can create a ReloadingDetector.\nInterface XMLBuilderProperties<T>; // Definition of a parameters interface for XML configurations.\nClass BasicBuilderParameters; // An implementation of BuilderParameters which handles the parameters of a ConfigurationBuilder common to all concrete Configuration implementations.\nClass BasicConfigurationBuilder<T extends ImmutableConfiguration>; // An implementation of the ConfigurationBuilder interface which is able to create different concrete ImmutableConfiguration implementations based on reflection.\nClass BuilderConfigurationWrapperFactory; // A class that allows the creation of configuration objects wrapping a ConfigurationBuilder.\nClass ConfigurationBuilderEvent; // A base event class for events generated by a ConfigurationBuilder.\nClass ConfigurationBuilderResultCreatedEvent; // A specialized event class which is generated by a ConfigurationBuilder when a result configuration has been created.\n", "des": "This package contains the implementations of configuration builder classes used to create new Configuration objects."}
{"index": 2592, "repo": "spring-rabbit-3.0.6", "code": "Package: api\n\nClasses and Interfaces: \npublic interface ChannelAwareBatchMessageListener extends ChannelAwareMessageListener; // Used to receive a batch of messages if the container supports it.\n@FunctionalInterface public interface ChannelAwareMessageListener extends org.springframework.amqp.core.MessageListener; // A message listener that is aware of the Channel on which the message was received.\n@FunctionalInterface public interface RabbitListenerErrorHandler; // An error handler which is called when a {code @RabbitListener} method throws an exception.\n", "des": "Provides Additional APIs for listeners."}
{"index": 124, "repo": "ignite-core-2.15.0", "code": "Package: jmx\n\nClasses and Interfaces: \nClass JmxMetricExporterSpi; // Overview Ignite provides this default built-in implementation of MetricExporterSpi it exports metrics as JMX beans.\nClass MetricRegistryMBean; // MBean for exporting values of metric registry.\nClass ReadOnlyDynamicMBean; // Base class for read only DynamicMBean implementations.\n", "des": "Contains JMX based implementation of MetricExporterSpi."}
{"index": 3684, "repo": "solr-core-9.3.0", "code": "Package: rest\n\nSub Packages: \npackage rest.schema; // Provides RESTful API access to managed resources in the Solr Schema.\n\nClasses and Interfaces: \nInterface ManagedResource.ChildResourceSupport; // Marker interface to indicate a ManagedResource implementation class also supports managing child resources at path: /<resource>/{child}\nInterface ManagedResourceObserver; // Allows a Solr component to register as an observer of important ManagedResource events, such as when the managed data is loaded.\nInterface ManagedResourceStorage.StorageIO; // Hides the underlying storage implementation for data being managed by a ManagedResource.\nClass BaseSolrResource; // Base class for delegating REST-oriented requests to ManagedResources.\nClass ManagedResource; // Supports Solr components that have external data that needs to be managed using the REST API.\nClass ManagedResourceStorage; // Abstract base class that provides most of the functionality needed to store arbitrary data for managed resources.\nClass ManagedResourceStorage.FileStorageIO; // Local file-based storage implementation.\nClass ManagedResourceStorage.InMemoryStorageIO; // Memory-backed storage IO; not really intended for storage large amounts of data in production, but useful for testing and other transient workloads.\nClass ManagedResourceStorage.JsonStorage; // Default storage implementation that uses JSON as the storage format for managed data.\nClass ManagedResourceStorage.ZooKeeperStorageIO; // ZooKeeper based storage implementation that uses the SolrZkClient provided by the CoreContainer.\nClass RestManager; // Supports runtime mapping of REST API endpoints to ManagedResource implementations; endpoints can be registered at either the /schema or /config base paths, depending on which base path is more appropriate for the type of managed resource.\nClass RestManager.ManagedEndpoint; // Request handling needs a lightweight object to delegate a request to.\nClass RestManager.Registry; // Per-core registry of ManagedResources found during core initialization.\n", "des": "Solr RESTful APIs."}
{"index": 2577, "repo": "camel-api-4.0.0-RC1", "code": "Package: extension\n\nClasses and Interfaces: \npublic interface ComponentExtension; // Marker interface for component extensions.\npublic interface ComponentVerifierExtension extends ComponentExtension; // Defines the interface used for validating component/endpoint parameters.\npublic static interface ComponentVerifierExtension.Result extends Serializable; // The result of a verification\npublic static enum ComponentVerifierExtension.Result.Status extends Enum<ComponentVerifierExtension.Result.Status>; // Status of the verification\npublic static enum ComponentVerifierExtension.Scope extends Enum<ComponentVerifierExtension.Scope>; // The scope defines how the parameters should be verified.\npublic static interface ComponentVerifierExtension.VerificationError extends Serializable; // This interface represents a detailed error in case when the verification fails.\npublic static interface ComponentVerifierExtension.VerificationError.Attribute extends Serializable; // Interface defining an attribute which is a key for the detailed error messages.\npublic static interface ComponentVerifierExtension.VerificationError.Code extends Serializable; // Interface defining an error code.\npublic static interface ComponentVerifierExtension.VerificationError.ExceptionAttribute extends ComponentVerifierExtension.VerificationError.Attribute; // Attributes for details about an exception that was raised\npublic static interface ComponentVerifierExtension.VerificationError.GroupAttribute extends ComponentVerifierExtension.VerificationError.Attribute; // Group related details\npublic static interface ComponentVerifierExtension.VerificationError.HttpAttribute extends ComponentVerifierExtension.VerificationError.Attribute; // HTTP related error details\npublic static interface ComponentVerifierExtension.VerificationError.StandardCode extends ComponentVerifierExtension.VerificationError.Code; // Standard set of error codes\npublic interface MetaDataExtension extends ComponentExtension;\npublic static interface MetaDataExtension.MetaData;\n", "des": "Component extension"}
{"index": 2073, "repo": "spring-webmvc-6.0.11", "code": "Package: method\n\nSub Packages: \npackage method.annotation; // MVC infrastructure for annotation-based handler method processing, building on the org.springframework.web.method.annotation package.\n\nClasses and Interfaces: \npublic abstract class AbstractHandlerMethodAdapter extends WebContentGenerator implements HandlerAdapter, org.springframework.core.Ordered; // Abstract base class for HandlerAdapter implementations that support handlers of type HandlerMethod.\npublic final class RequestMappingInfo extends Object implements RequestCondition<RequestMappingInfo>; // Request mapping information.\npublic static interface RequestMappingInfo.Builder; // Defines a builder for creating a RequestMappingInfo.\npublic static class RequestMappingInfo.BuilderConfiguration extends Object; // Container for configuration options used for request mapping purposes.\npublic abstract class RequestMappingInfoHandlerMapping extends AbstractHandlerMethodMapping<RequestMappingInfo>; // Abstract base class for classes for which RequestMappingInfo defines the mapping between a request and a handler method.\npublic class RequestMappingInfoHandlerMethodMappingNamingStrategy extends Object implements HandlerMethodMappingNamingStrategy<RequestMappingInfo>; // A HandlerMethodMappingNamingStrategy for RequestMappingInfo-based handler method mappings.\n", "des": "Servlet-based infrastructure for handler method processing, building on the org.springframework.web.method package."}
{"index": 3682, "repo": "solr-core-9.3.0", "code": "Package: response\n\nSub Packages: \npackage response.transform; // APIs and implementations of DocTransformer for modifying documents in Solr request responses\n\nClasses and Interfaces: \nInterface BinaryQueryResponseWriter; // Implementations of BinaryQueryResponseWriter are used to write response in binary format.\nInterface QueryResponseWriter; // Implementations of QueryResponseWriter are used to format responses to query requests.\nClass BasicResultContext;\nClass BinaryResponseWriter;\nClass BinaryResponseWriter.Resolver;\nClass CborResponseWriter; // A response writer impl that can write results in CBOR (cbor.io) format when wt=cbor.\nClass CSVResponseWriter; // Response writer for csv data\nClass DocsStreamer; // This streams SolrDocuments from a DocList and applies transformer\nClass GeoJSONResponseWriter; // Extend the standard JSONResponseWriter to support GeoJSON.\nClass GraphMLResponseWriter;\nClass JacksonJsonWriter; // A JSON ResponseWriter that uses jackson.\nClass JacksonJsonWriter.WriterImpl;\nClass JSONResponseWriter;\nClass JSONWriter;\nClass PHPResponseWriter;\nClass PHPSerializedResponseWriter; // A description of the PHP serialization format can be found here: http://www.hurring.com/scott/code/perl/serialize/\nClass PythonResponseWriter;\nClass QueryResponseWriterUtil; // Static utility methods relating to QueryResponseWriters\nClass RawResponseWriter; // Writes a ContentStream directly to the output.\nClass ResultContext; // A class to hold the QueryResult and the Query\nClass RubyResponseWriter;\nClass SchemaXmlResponseWriter;\nClass SchemaXmlWriter;\nClass SmileResponseWriter;\nClass SmileResponseWriter.SmileWriter;\nClass SolrQueryResponse; // SolrQueryResponse is used by a query handler to return the response to a query request.\nClass TabularResponseWriter; // Base response writer for table-oriented data\nClass TextResponseWriter; // Base class for text-oriented response writers.\nClass XMLResponseWriter;\nClass XMLWriter;\n", "des": "API and implementations of QueryResponseWriter for formatting Solr request responses"}
{"index": 2480, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: redis\n\nClasses and Interfaces: \n@AutoConfiguration(before=org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration.class, after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass({io.lettuce.core.RedisClient.class,io.lettuce.core.metrics.MicrometerCommandLatencyRecorder.class}) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class LettuceMetricsAutoConfiguration extends Object; // Auto-configuration for Lettuce metrics.\n", "des": "Auto-configuration for Redis metrics."}
{"index": 2783, "repo": "spring-security-ldap-6.1.2", "code": "Package: userdetails\n\nClasses and Interfaces: \npublic class DefaultLdapAuthoritiesPopulator extends Object implements LdapAuthoritiesPopulator; // The default strategy for obtaining user role information from the directory.\npublic class InetOrgPerson extends Person; // UserDetails implementation whose properties are based on a subset of the LDAP schema for inetOrgPerson.\npublic static class InetOrgPerson.Essence extends Person.Essence;\npublic class InetOrgPersonContextMapper extends Object implements UserDetailsContextMapper;\npublic interface LdapAuthoritiesPopulator; // Obtains a list of granted authorities for an Ldap user.\npublic class LdapAuthority extends Object implements org.springframework.security.core.GrantedAuthority; // An authority that contains at least a DN and a role name for an LDAP entry but can also contain other desired attributes to be fetched during an LDAP authority search.\npublic interface LdapUserDetails extends org.springframework.security.core.userdetails.UserDetails, org.springframework.security.core.CredentialsContainer; // Captures the information for a user's LDAP entry.\npublic class LdapUserDetailsImpl extends Object implements LdapUserDetails, PasswordPolicyData; // A UserDetails implementation which is used internally by the Ldap services.\npublic static class LdapUserDetailsImpl.Essence extends Object; // Variation of essence pattern.\npublic class LdapUserDetailsManager extends Object implements org.springframework.security.provisioning.UserDetailsManager; // An Ldap implementation of UserDetailsManager.\npublic class LdapUserDetailsMapper extends Object implements UserDetailsContextMapper; // The context mapper used by the LDAP authentication provider to create an LDAP user object.\npublic class LdapUserDetailsService extends Object implements org.springframework.security.core.userdetails.UserDetailsService; // LDAP implementation of UserDetailsService based around an LdapUserSearch and an LdapAuthoritiesPopulator.\npublic class NestedLdapAuthoritiesPopulator extends DefaultLdapAuthoritiesPopulator; // A LDAP authority populator that can recursively search static nested groups.\npublic class Person extends LdapUserDetailsImpl; // UserDetails implementation whose properties are based on the LDAP schema for Person.\npublic static class Person.Essence extends LdapUserDetailsImpl.Essence;\npublic class PersonContextMapper extends Object implements UserDetailsContextMapper;\n", "des": "LDAP-focused UserDetails implementations which map from a ubset of the data contained in some of the standard LDAP types (such as InetOrgPerson)."}
{"index": 3756, "repo": "lucene-facet-9.7.0", "code": "Package: sortedset\n\nClasses and Interfaces: \nClass ConcurrentSortedSetDocValuesFacetCounts; // Like SortedSetDocValuesFacetCounts, but aggregates counts concurrently across segments.\nClass DefaultSortedSetDocValuesReaderState; // Default implementation of SortedSetDocValuesFacetCounts.\nClass SortedSetDocValuesFacetCounts; // Compute facets counts from previously indexed SortedSetDocValuesFacetField, without require a separate taxonomy index.\nClass SortedSetDocValuesFacetField; // Add an instance of this to your Document for every facet label to be indexed via SortedSetDocValues.\nClass SortedSetDocValuesReaderState; // Wraps a IndexReader and resolves ords using existing SortedSetDocValues APIs without a separate taxonomy index.\nClass SortedSetDocValuesReaderState.DimTree; // Holds children and sibling information for a single dimension.\nClass SortedSetDocValuesReaderState.OrdRange; // Holds start/end range of ords, which maps to one dimension.\n", "des": "Provides faceting capabilities over facets that were indexed with SortedSetDocValuesFacetField."}
{"index": 1192, "repo": "commons-math3-3.6.1", "code": "Package: vector\n\nSub Packages: \npackage vector.jacobian; // This package provides optimization algorithms that require derivatives.\n\nClasses and Interfaces: \nClass JacobianMultivariateVectorOptimizer; // All classes and interfaces in this package are deprecated.\nClass ModelFunction; // All classes and interfaces in this package are deprecated.\nClass ModelFunctionJacobian; // All classes and interfaces in this package are deprecated.\nClass MultiStartMultivariateVectorOptimizer;\nClass MultivariateVectorOptimizer;\nClass Target; // All classes and interfaces in this package are deprecated.\nClass Weight; // All classes and interfaces in this package are deprecated.\n", "des": "Algorithms for optimizing a vector function."}
{"index": 205, "repo": "nutch-2.4", "code": "Package: indexer\n\nSub Packages: \npackage indexer.html; // Index raw HTML content.\npackage indexer.anchor; // An indexing plugin for inbound anchor text.\npackage indexer.basic; // A basic indexing plugin, adds basic fields: url, host, title, content, etc.\npackage indexer.metadata; // Indexing filter to add document metadata to the index.\npackage indexer.more; // A more indexing plugin, adds \"more\" index fields: last modified date, MIME type, content length.\npackage indexer.subcollection; // Indexing filter to assign documents to subcollections.\npackage indexer.tld; // Top Level Domain Indexing plugin.\n\nClasses and Interfaces: \nInterface IndexCleaningFilter; // Extension point for indexing.\nInterface IndexingFilter; // Extension point for indexing.\nInterface IndexWriter;\nClass CleaningJob;\nClass CleaningJob.CleanMapper;\nClass CleaningJob.CleanReducer;\nClass IndexCleaningFilters; // Creates and caches IndexCleaningFilter implementing plugins.\nClass IndexerOutputFormat;\nClass IndexingFilters; // Creates and caches IndexingFilter implementing plugins.\nClass IndexingFiltersChecker; // Reads and parses a URL and run the indexers on it.\nClass IndexingJob;\nClass IndexingJob.IndexerMapper;\nClass IndexUtil; // Utility to create an indexed document from a webpage.\nClass IndexWriters; // Creates and caches IndexWriter implementing plugins.\nClass NutchDocument; // A NutchDocument is the unit of indexing.\nClass IndexingException;\n", "des": "Index content, configure and run indexing and cleaning jobs to add, update, and delete documents from an index."}
{"index": 612, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: log\n\nClasses and Interfaces: \nInterface LogEntry; // Provides methods to access the information contained in an individual Log Service log entry.\nInterface LogListener; // Subscribes to LogEntry objects from the LogReaderService.\nInterface LogReaderService; // Provides methods to retrieve LogEntry objects from the log.\nInterface LogService; // Provides methods for bundles to write messages to the log.\n", "des": "Log Service Package Version 1.3."}
{"index": 2605, "repo": "wicket-util-10.0.0-M1", "code": "Package: diff\n\nSub Packages: \npackage diff.myers; // The diff.myers package implements Gene Myers' differencing algorithm.\n\nClasses and Interfaces: \npublic class AddDelta extends Delta; // Holds an add-delta between to revisions of a text.\npublic class ChangeDelta extends Delta; // Holds an change-delta between to revisions of a text.\npublic class Chunk extends ToString; // Holds a information about a part of the text involved in a differencing or patching operation.\npublic class DeleteDelta extends Delta; // Holds a delete-delta between to revisions of a text.\npublic abstract class Delta extends ToString; // Holds a \"delta\" difference between to revisions of a text.\npublic class Diff extends ToString; // Implements a differencing engine that works on arrays of Object.\npublic interface DiffAlgorithm; // A simple interface for implementations of differencing algorithms.\npublic class DifferentiationFailedException extends DiffException; // Thrown whenever the differencing engine cannot produce the differences between two revisions of ta text.\npublic class DiffException extends Exception; // Base class for all exceptions emanating from this package.\npublic class PatchFailedException extends DiffException; // Thrown whenever a delta cannot be applied as a patch to a given text.\npublic class Revision extends ToString; // A Revision holds the series of deltas that describe the differences between two sequences.\npublic interface RevisionVisitor; // Definition of a Visitor interface for Revisions See \"Design Patterns\" by the Gang of Four\npublic class ToString extends Object; // This class delegates handling of the to a StringBuilder based version.\n", "des": "The diff package implements the differencing engine that JRCS uses."}
{"index": 2370, "repo": "spring-security-crypto-6.1.2", "code": "Package: codec\n\nClasses and Interfaces: \n@Deprecated public final class Base64 extends Object;\npublic final class Hex extends Object; // Hex data encoder.\npublic final class Utf8 extends Object; // UTF-8 Charset encoder/decoder.\n", "des": "Internal codec classes."}
{"index": 3142, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface ExpandingCollectionQuerySpace; // Describes a collection query space that allows adding joins with other query spaces; used while building a CollectionQuerySpace.\nInterface ExpandingCompositeQuerySpace; // Describes a composite query space that allows adding joins with other query spaces; used while building a CompositeQuerySpace.\nInterface ExpandingEntityIdentifierDescription; // Describes an entity identifier description that allows adding fetches; used while building a EntityIdentifierDescription.\nInterface ExpandingEntityQuerySpace; // Describes an entity query space that allows adding joins with other query spaces; used while building an EntityQuerySpace.\nInterface ExpandingFetchSource; // Describes the internal contract for things which can contain fetches.\nInterface ExpandingQuerySpace; // Describes a query space that allows adding joins with other query spaces; used while building a QuerySpace.\nInterface ExpandingQuerySpaces; // Models a collection of QuerySpace references and exposes the ability to create an ExpandingQuerySpace for \"returns\" and fetches; used when building a load plan.\nInterface LoadPlanBuildingAssociationVisitationStrategy; // Specialized AssociationVisitationStrategy implementation for building LoadPlan instances.\nInterface LoadPlanBuildingContext; // Provides access to context needed in building a LoadPlan.\nClass LoadPlanTreePrinter; // Prints a LoadPlan graph and its QuerySpaces graph as tree structures.\nClass MetamodelDrivenLoadPlanBuilder; // A metadata-driven builder of LoadPlans.\nClass QuerySpaceTreePrinter; // Prints a QuerySpaces graph as a tree structure.\nClass ReturnGraphTreePrinter; // Prints a Return graph as a tree structure.\nClass TreePrinterHelper; // A singleton helper class for printing tree structures using indentation.\n", "des": "Defines the SPI for building a metamodel-driven LoadPlan"}
{"index": 2736, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: builder\n\nClasses and Interfaces: \npublic class ClassifierCompositeItemProcessorBuilder<I,O> extends Object; // Creates a fully qualified ClassifierCompositeItemProcessor.\npublic class ClassifierCompositeItemWriterBuilder<T> extends Object; // Creates a fully qualified ClassifierCompositeItemWriter.\npublic class CompositeItemProcessorBuilder<I,O> extends Object; // Creates a fully qualified CompositeItemProcessorBuilder.\npublic class CompositeItemWriterBuilder<T> extends Object; // Creates a fully qualified CompositeItemWriter.\npublic class ScriptItemProcessorBuilder<I,O> extends Object; // Creates a fully qualified ScriptItemProcessor.\npublic class SingleItemPeekableItemReaderBuilder<T> extends Object; // Creates a fully qualified SingleItemPeekeableItemReader.\npublic class SynchronizedItemStreamReaderBuilder<T> extends Object; // Creates a fully qualified SynchronizedItemStreamReader.\npublic class SynchronizedItemStreamWriterBuilder<T> extends Object; // Creates a fully qualified SynchronizedItemStreamWriter.\n", "des": "Builders for support classes."}
{"index": 1568, "repo": "spring-restdocs-core-3.0.0", "code": "Package: preprocess\n\nClasses and Interfaces: \npublic interface ContentModifier; // A ContentModifier modifies the content of an OperationRequest or OperationResponse during the preprocessing that is performed prior to documentation generation.\npublic class ContentModifyingOperationPreprocessor extends Object implements OperationPreprocessor; // An OperationPreprocessor that applies a ContentModifier to the content of the request or response.\npublic class HeadersModifyingOperationPreprocessor extends Object implements OperationPreprocessor; // An OperationPreprocessor that modifies a request or response by adding, setting, or removing headers.\npublic interface OperationPreprocessor; // An OperationPreprocessor processes the OperationRequest and OperationResponse of an Operation prior to it being documented.\npublic abstract class OperationPreprocessorAdapter extends Object implements OperationPreprocessor; // An implementation of OperationPreprocessor that returns the request and response as-is.\npublic interface OperationRequestPreprocessor; // An OperationRequestPreprocessor is used to modify an OperationRequest prior to it being documented.\npublic interface OperationResponsePreprocessor; // An OperationResponsePreprocessor is used to modify an OperationResponse prior to it being documented.\npublic final class Preprocessors extends Object; // Static factory methods for creating OperationPreprocessors that can be applied to an Operation's request or response before it is documented.\npublic class PrettyPrintingContentModifier extends Object implements ContentModifier; // A ContentModifier that modifies the content by pretty printing it.\npublic class UriModifyingOperationPreprocessor extends Object implements OperationPreprocessor; // An OperationPreprocessor that modifies URIs in the request and in the response by changing one or more of their host, scheme, and port.\n", "des": "Support for preprocessing an operation prior to it being documented."}
{"index": 3085, "repo": "spring-ws-core-4.0.5", "code": "Package: annotation\n\nClasses and Interfaces: \npublic enum FaultCode extends Enum<FaultCode>; // Enumeration that represents the standard SOAP Fault codes for use with the JDK 1.5+ SoapFault annotation.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Repeatable(SoapActions.class) public @interface SoapAction; // Marks an endpoint method as the handler for an incoming request.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface SoapActions; // Marks an endpoint method as containing multiple SoapActions.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface SoapFault; // Marks an exception class with the fault elements that should be returned whenever this exception is thrown.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface SoapHeader; // Marks an endpoint method parameter to be resolved as a single or a list of SoapHeaderElement.\n", "des": "JDK 1.5+ annotations for Spring-WS SOAP endpoints."}
{"index": 2798, "repo": "spring-amqp-3.0.6", "code": "Package: converter\n\nClasses and Interfaces: \npublic abstract class AbstractJackson2MessageConverter extends AbstractMessageConverter implements org.springframework.beans.factory.BeanClassLoaderAware, SmartMessageConverter; // Abstract Jackson2 message converter.\npublic abstract class AbstractJavaTypeMapper extends Object implements org.springframework.beans.factory.BeanClassLoaderAware; // Abstract type mapper.\npublic abstract class AbstractMessageConverter extends Object implements MessageConverter; // Convenient base class for MessageConverter implementations.\npublic abstract class AllowedListDeserializingMessageConverter extends AbstractMessageConverter; // MessageConverters that potentially use Java deserialization.\npublic interface ClassMapper; // Strategy for setting metadata on messages such that one can create the class that needs to be instantiated when receiving a message.\npublic class ContentTypeDelegatingMessageConverter extends Object implements MessageConverter; // A composite MessageConverter that delegates to an actual MessageConverter based on the contentType header.\npublic class DefaultClassMapper extends Object implements ClassMapper, org.springframework.beans.factory.InitializingBean; // Maps to/from JSON using type information in the MessageProperties; the default name of the message property containing the type is \"__TypeId__\".\npublic class DefaultJackson2JavaTypeMapper extends AbstractJavaTypeMapper implements Jackson2JavaTypeMapper; // Jackson 2 type mapper.\npublic interface Jackson2JavaTypeMapper extends ClassMapper; // Strategy for setting metadata on messages such that one can create the class that needs to be instantiated when receiving a message.\npublic static enum Jackson2JavaTypeMapper.TypePrecedence extends Enum<Jackson2JavaTypeMapper.TypePrecedence>; // The precedence for type conversion - inferred from the method parameter or message headers.\npublic class Jackson2JsonMessageConverter extends AbstractJackson2MessageConverter; // JSON converter that uses the Jackson 2 Json library.\npublic class Jackson2XmlMessageConverter extends AbstractJackson2MessageConverter; // XML converter that uses the Jackson 2 Xml library.\npublic class MarshallingMessageConverter extends AbstractMessageConverter implements org.springframework.beans.factory.InitializingBean; // Spring Rabbit MessageConverter that uses a Marshaller and Unmarshaller.\npublic class MessageConversionException extends AmqpException; // Exception to be thrown by message converters if they encounter a problem with converting a message or object.\npublic interface MessageConverter; // Message converter interface.\n", "des": "Provides classes for supporting message conversion."}
{"index": 3114, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: interceptor\n\nClasses and Interfaces: \nInterface BytecodeInterceptorLogging; // Logging related to bytecode enhancement interceptors\nInterface BytecodeLazyAttributeInterceptor;\nInterface EnhancementHelper.InheritanceChecker;\nInterface LazyFetchGroupMetadata; // Information about a particular bytecode lazy attribute grouping.\nInterface SessionAssociableInterceptor;\nClass AbstractInterceptor;\nClass AbstractLazyLoadInterceptor;\nClass BytecodeInterceptorLogging_$logger; // Warning this class consists of generated code.\nClass EnhancementAsProxyLazinessInterceptor;\nClass EnhancementHelper;\nClass LazyAttributeDescriptor; // Descriptor for an attribute which is enabled for bytecode lazy fetching\nClass LazyAttributeLoadingInterceptor; // Interceptor that loads attributes lazily\nClass LazyAttributesMetadata; // Information about all of the bytecode lazy attributes for an entity\n", "des": "interceptor implementations"}
{"index": 746, "repo": "spring-data-solr-4.3.15", "code": "Package: support\n\nClasses and Interfaces: \nClass EmbeddedSolrServerFactory; // The EmbeddedSolrServerFactory allows hosting of an SolrServer instance in embedded mode.\nClass EmbeddedSolrServerFactoryBean; // Implementation of FactoryBean for registration of an EmbeddedSolrServer as a Spring bean.\nClass HttpSolrClientFactory; // The HttpSolrClientFactory replaces HttpSolrServerFactory from version 1.x and configures an HttpSolrClient to work with the provided core.\nClass HttpSolrClientFactoryBean; // HttpSolrClientFactoryBean replaces HttpSolrServerFactoryBean from version 1.x.\nClass SolrClientUtils; // SolrClientUtils replaces SolrServerUtils from version 1.x\n", "des": "Everything SolrClient and EmbeddedSolrServer related."}
{"index": 2727, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: builder\n\nClasses and Interfaces: \npublic class JsonFileItemWriterBuilder<T> extends Object; // Builder for JsonFileItemWriter.\npublic class JsonItemReaderBuilder<T> extends Object; // A builder for JsonItemReader.\n", "des": "Builders for JSON item reader and writer."}
{"index": 3696, "repo": "solr-core-9.3.0", "code": "Package: requestfactory\n\nClasses and Interfaces: \nClass SearchGroupsRequestFactory; // Concrete implementation of ShardRequestFactory that creates ShardRequest instances for getting the search groups from all shards.\nClass StoredFieldsShardRequestFactory;\nClass TopGroupsShardRequestFactory; // Concrete implementation of ShardRequestFactory that creates ShardRequest instances for getting the top groups from all shards.\n", "des": "Internal classes used to implement distributed result grouping"}
{"index": 2642, "repo": "spring-integration-sftp-6.1.2", "code": "Package: session\n\nClasses and Interfaces: \npublic class DefaultSftpSessionFactory extends Object implements org.springframework.integration.file.remote.session.SessionFactory<org.apache.sshd.sftp.client.SftpClient.DirEntry>, org.springframework.integration.file.remote.session.SharedSessionCapable; // Factory for creating SftpSession instances.\npublic class ResourceKnownHostsServerKeyVerifier extends Object implements org.apache.sshd.client.keyverifier.ServerKeyVerifier; // A ServerKeyVerifier implementation for a Resource abstraction.\npublic class SftpFileInfo extends org.springframework.integration.file.remote.AbstractFileInfo<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // A FileInfo implementation for SFTP.\npublic class SftpRemoteFileTemplate extends org.springframework.integration.file.remote.RemoteFileTemplate<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // SFTP version of RemoteFileTemplate providing type-safe access to the underlying ChannelSftp object.\npublic class SftpSession extends Object implements org.springframework.integration.file.remote.session.Session<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Default SFTP Session implementation.\n", "des": "Provides classes supporting SFTP sessions."}
{"index": 529, "repo": "commons-vfs2-2.9.0", "code": "Package: local\n\nClasses and Interfaces: \nClass DefaultLocalFileProvider; // A file system provider, which uses direct file access.\nClass GenericFileNameParser; // A general-purpose file name parser.\nClass LocalFile; // A file object implementation which uses direct file access.\nClass LocalFileName; // A local file URI.\nClass LocalFileNameParser; // A name parser.\nClass LocalFileSystem; // A local file system.\nClass WindowsFileName; // A local file URI.\nClass WindowsFileNameParser; // A parser for Windows file names.\n", "des": "The Local File Provider."}
{"index": 2520, "repo": "spring-security-core-6.1.2", "code": "Package: aopalliance\n\nClasses and Interfaces: \n@Deprecated public class MethodSecurityInterceptor extends AbstractSecurityInterceptor implements org.aopalliance.intercept.MethodInterceptor;\n@Deprecated public class MethodSecurityMetadataSourceAdvisor extends org.springframework.aop.support.AbstractPointcutAdvisor implements org.springframework.beans.factory.BeanFactoryAware;\n", "des": "Enforces security for AOP Alliance MethodInvocations, such as via Spring AOP."}
{"index": 401, "repo": "commons-jexl3-3.3", "code": "Package: jexl3\n\nSub Packages: \npackage jexl3.annotations; // Provides annotation for introspection services.\npackage jexl3.introspection; // Provides high-level introspective services.\npackage jexl3.scripting; // Contains the JSR-223 Scripting Engine for JEXL script.\n\nClasses and Interfaces: \nInterface JexlArithmetic.ArrayBuilder; // Helper interface used when creating an array literal.\nInterface JexlArithmetic.MapBuilder; // Helper interface used when creating a map literal.\nInterface JexlArithmetic.SetBuilder; // Helper interface used when creating a set literal.\nInterface JexlArithmetic.Uberspect; // The interface that uberspects JexlArithmetic classes.\nInterface JexlContext; // Manages variables which can be referenced in a JEXL expression.\nInterface JexlContext.AnnotationProcessor; // A marker interface of the JexlContext that processes annotations.\nInterface JexlContext.CancellationHandle; // A marker interface of the JexlContext sharing a cancelling flag.\nInterface JexlContext.ClassNameResolver; // A marker interface that solves a simple class name into a fully-qualified one.\nInterface JexlContext.ModuleProcessor; // A marker interface of the JexlContext that processes module definitions.\nInterface JexlContext.NamespaceFunctor; // A marker interface of the JexlContext, NamespaceFunctor allows creating an instance to delegate namespace methods calls to.\nInterface JexlContext.NamespaceResolver; // A marker interface of the JexlContext that declares how to resolve a namespace from its name; it is used by the interpreter during evaluation.\nInterface JexlContext.OptionsHandle; // A marker interface of the JexlContext that exposes runtime evaluation options.\nInterface JexlContext.PragmaProcessor; // A marker interface of the JexlContext that processes pragmas.\nInterface JexlContext.ThreadLocal; // A marker interface of the JexlContext that indicates the interpreter to put this context in the JexlEngine thread local context instance during evaluation.\nInterface JexlEngine.Options; // 3.2\nInterface JexlExpression; // Represents a single JEXL expression.\n", "des": "Provides a framework for evaluating JEXL expressions."}
{"index": 283, "repo": "pdfbox-3.0.0-beta1", "code": "Package: common\n\nSub Packages: \npackage common.filespecification; // The file specification package defines classes that are used for the PDF File Specification logic.\npackage common.function; // This package contains functions that are available in the PDF specification.\n\nClasses and Interfaces: \nInterface COSObjectable; // This is an interface used to get/create the underlying COSObject.\nInterface PDDestinationOrAction; // This is an interface used for some elements such as the document OpenAction that can be either a Destination or an Action.\nClass COSArrayList<E>; // This is an implementation of a List that will sync its contents to a COSArray.\nClass COSDictionaryMap<K,V>; // This is a Map that will automatically sync the contents to a COSDictionary.\nClass PDDictionaryWrapper; // A wrapper for a COS dictionary.\nClass PDImmutableRectangle; // Immutable class for constant sizes.\nClass PDMetadata; // This class represents metadata for various objects in a PDF document.\nClass PDNameTreeNode<T extends COSObjectable>; // This class represents a node in a name tree.\nClass PDNumberTreeNode; // This class represents a PDF Number tree.\nClass PDObjectStream; // A PDStream represents a stream in a PDF document.\nClass PDPageLabelRange; // Contains information for a page label range.\nClass PDPageLabels; // Represents the page label dictionary of a document.\nClass PDRange; // This class will be used to signify a range.\nClass PDRectangle; // A rectangle in a PDF document.\nClass PDStream; // A PDStream represents a stream in a PDF document.\nClass PDTypedDictionaryWrapper; // A wrapper for a COS dictionary including Type information.\n", "des": "High level PD classes that are used throughout several packages are placed in the PDModel common package."}
{"index": 379, "repo": "mahout-core-14.1", "code": "Package: math\n\nSub Packages: \npackage math.function; // Core interfaces for functions, comparisons and procedures on objects and primitive data types.\npackage math.list; // Resizable lists holding objects or primitive data types such as int, double, etc.\npackage math.map; // Automatically growing and shrinking maps holding objects or primitive data types such as int, double, etc.\n\nClasses and Interfaces: \nInterface Matrix; // The basic interface including numerous convenience functions\nInterface MatrixTimesOps; // Optional interface for optimized matrix multiplications.\nInterface QR;\nInterface Swapper; // Interface for an object that knows how to swap elements at two positions (a,b).\nInterface Vector; // The basic interface including numerous convenience functions\nInterface Vector.Element; // A holder for information about a specific item in the Vector.\nInterface VectorIterable;\nClass AbstractMatrix; // A few universal implementations of convenience functions for a JVM-backed matrix.\nClass AbstractMatrix.TransposeViewVector;\nClass AbstractVector; // Implementations of generic capabilities like sum of elements and dot products\nClass Algebra;\nClass Arrays; // Array manipulations; complements java.util.Arrays.\nClass BinarySearch;\nClass Centroid; // A centroid is a weighted vector.\nClass CholeskyDecomposition; // Cholesky decomposition shamelessly ported from JAMA.\nClass ConstantVector; // Implements a vector with all the same values.\nClass DelegatingVector; // A delegating vector provides an easy way to decorate vectors with weights or id's and such while keeping all of the Vector functionality.\nClass DenseMatrix; // Matrix of doubles implemented using a 2-d array\nClass DenseSymmetricMatrix; // Economy packaging for a dense symmetric in-core matrix.\nClass DenseVector; // Implements vector as an array of doubles\nClass DiagonalMatrix;\nClass FileBasedMatrix; // Provides a way to get data from a file and treat it as if it were a matrix, but avoids putting all that data onto the Java heap.\nClass FileBasedSparseBinaryMatrix; // Provides a way to get data from a file and treat it as if it were a matrix, but avoids putting all that data onto the Java heap.\nClass FileBasedSparseBinaryMatrix.BinaryReadOnlyElement;\nClass Matrices;\nClass MatrixSlice;\n", "des": "Core base classes; Operations on primitive arrays such as sorting, partitioning and permuting."}
{"index": 904, "repo": "commons-compress-1.23.0", "code": "Package: archivers\n\nSub Packages: \npackage archivers.ar; // Provides stream classes for reading and writing archives using the AR format.\npackage archivers.arj; // Provides stream classes for reading archives using the ARJ format.\npackage archivers.cpio; // Provides stream classes for reading and writing archives using the CPIO format.\npackage archivers.dump; // This package provides stream classes for reading archives using the Unix DUMP format.\npackage archivers.examples; // Contains example code that is not guaranteed to provide a stable API across releases of Commons Compress.\npackage archivers.jar; // Provides stream classes for reading and writing archives using the ZIP format with some extensions for the special case of JAR archives.\npackage archivers.sevenz; // Provides classes for reading and writing archives using the 7z format.\npackage archivers.tar; // Provides stream classes for reading and writing archives using the TAR format.\npackage archivers.zip; // Provides stream classes for reading and writing archives using the ZIP format.\n\nClasses and Interfaces: \nInterface ArchiveEntry; // Represents an entry of an archive.\nInterface ArchiveStreamProvider; // Creates Archive ArchiveInputStreams and ArchiveOutputStreams.\nInterface EntryStreamOffsets; // Provides information about ArchiveEntry stream offsets.\nClass ArchiveInputStream; // Archive input streams MUST override the InputStream.read(byte[], int, int) - or ArchiveInputStream.read() - method so that reading from the stream generates EOF for the end of data in each entry as well as at the end of the file proper.\nClass ArchiveOutputStream; // Archive output stream implementations are expected to override the OutputStream.write(byte[], int, int) method to improve performance.\nClass ArchiveStreamFactory; // Factory to create Archive[In|Out]putStreams from names or the first bytes of the InputStream.\nClass Lister; // Simple command line application that lists the contents of an archive.\nClass ArchiveException; // Archiver related Exception\nClass StreamingNotSupportedException; // Exception thrown by ArchiveStreamFactory if a format is requested/detected that doesn't support streaming.\n", "des": "Provides a unified API and factories for dealing with archives in different formats."}
{"index": 3871, "repo": "lucene-spatial-extras-9.7.0", "code": "Package: vector\n\nClasses and Interfaces: \nClass DistanceValueSource; // A DoubleValuesSource that returns the distance for a PointVectorStrategy.\nClass PointVectorStrategy; // Simple SpatialStrategy which represents Points in two numeric fields.\n", "des": "Spatial strategy that uses two fields."}
{"index": 538, "repo": "commons-vfs2-2.9.0", "code": "Package: util\n\nClasses and Interfaces: \nInterface Cryptor;\nClass CombinedResources;\nClass CryptorFactory; // Factory to create an instance of a Cryptor.\nClass DefaultCryptor; // Allows passwords to be encrypted and decrypted.\nClass DelegatingFileSystemOptionsBuilder; // This class use reflection to set a configuration value using the fileSystemConfigBuilder associated the a scheme.\nClass EncryptUtil; // Allows passwords to be encrypted and decrypted.\nClass FileObjectUtils; // Utility methods for FileObject.\nClass Messages; // Formats messages.\nClass MonitorInputStream; // An InputStream that provides buffering and end-of-stream monitoring.\nClass MonitorOutputStream; // An OutputStream that provides buffering and end-of-stream monitoring.\nClass MonitorRandomAccessContent; // A RandomAccessContent that provides end-of-stream monitoring.\nClass Os; // Use Apache Commons Lang's SystemUtils.\nClass OsFamily; // Use Apache Commons Lang's SystemUtils.\nClass PosixPermissions; // UNIX permissions.\nClass RawMonitorInputStream; // An InputStream that provides end-of-stream monitoring.\nClass URIUtils; // The URI escape and character encoding and decoding utility.\nClass UserAuthenticatorUtils; // Helps with authentication.\nClass WeakRefFileListener; // Wraps a listener with a WeakReference.\nEnum PosixPermissions.Type; // Permission types.\nEnum RandomAccessMode; // An enumerated type representing the modes of a random access content.\n", "des": "Utility classes used by the VFS."}
{"index": 2830, "repo": "spring-data-r2dbc-3.1.2", "code": "Package: dialect\n\nClasses and Interfaces: \npublic final class BindTargetBinder extends Object; // Utility to bind Parameter to a BindTarget.\npublic class DialectResolver extends Object; // Resolves a R2dbcDialect from a ConnectionFactory using DialectResolver.R2dbcDialectProvider.\npublic static class DialectResolver.NoDialectException extends NonTransientDataAccessException; // Exception thrown when DialectResolver cannot resolve a R2dbcDialect.\npublic static interface DialectResolver.R2dbcDialectProvider; // SPI to extend Spring's default R2DBC Dialect discovery mechanism.\npublic class H2Dialect extends H2Dialect implements R2dbcDialect; // R2DBC dialect for H2.\npublic class MySqlDialect extends MySqlDialect implements R2dbcDialect; // An SQL dialect for MySQL.\n@WritingConverter public static enum MySqlDialect.BooleanToByteConverter extends Enum<MySqlDialect.BooleanToByteConverter> implements Converter<Boolean,Byte>; // Simple singleton to convert Booleans to their Byte representation.\n@ReadingConverter public static enum MySqlDialect.ByteToBooleanConverter extends Enum<MySqlDialect.ByteToBooleanConverter> implements Converter<Byte,Boolean>; // Simple singleton to convert Bytes to their Boolean representation.\npublic class OracleDialect extends OracleDialect implements R2dbcDialect; // An SQL dialect for Oracle.\npublic class PostgresDialect extends PostgresDialect implements R2dbcDialect; // An SQL dialect for Postgres.\npublic interface R2dbcDialect extends Dialect; // R2DBC-specific extension to Dialect.\npublic class SqlServerDialect extends SqlServerDialect implements R2dbcDialect; // An SQL dialect for Microsoft SQL Server.\n", "des": "Dialects abstract the SQL dialect of the underlying database."}
{"index": 3815, "repo": "lucene-analysis-common-9.7.0", "code": "Package: sr\n\nClasses and Interfaces: \nClass SerbianAnalyzer; // Analyzer for Serbian.\nClass SerbianNormalizationFilter; // Normalizes Serbian Cyrillic and Latin characters to \"bald\" Latin.\nClass SerbianNormalizationFilterFactory; // Factory for SerbianNormalizationFilter.\nClass SerbianNormalizationRegularFilter; // Normalizes Serbian Cyrillic to Latin.\n", "des": "Analyzer for Serbian."}
{"index": 1721, "repo": "spring-boot-test-3.1.1", "code": "Package: server\n\nClasses and Interfaces: \n@Target({FIELD,METHOD,PARAMETER,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Value(\"${local.management.port}\") public @interface LocalManagementPort; // Annotation at the field or method/constructor parameter level that injects the HTTP management port that was allocated at runtime.\n@Target({FIELD,METHOD,PARAMETER,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Value(\"${local.server.port}\") public @interface LocalServerPort; // Annotation at the field or method/constructor parameter level that injects the HTTP server port that was allocated at runtime.\n", "des": "Web server test utilities and support classes."}
{"index": 1026, "repo": "hadoop-aws-3.3.6", "code": "Package: auth\n\nSub Packages: \npackage auth.delegation; // Extensible delegation token support for the S3A connector.\n\nClasses and Interfaces: \nInterface AwsSignerInitializer; // Interface which can be implemented to allow initialization of any custom signers which may be used by the S3AFileSystem.\nClass AbstractAWSCredentialProvider; // This class will be replaced by one that implements AWS SDK V2's AwsCredentialProvider as part of upgrading S3A to SDK V2.\nClass AbstractSessionCredentialsProvider; // This class will be replaced by one that implements AWS SDK V2's AwsCredentialProvider as part of upgrading S3A to SDK V2.\nClass AbstractSessionCredentialsProvider.NoCredentials; // A special set of null credentials which are not the anonymous class.\nClass AssumedRoleCredentialProvider; // This class will be replaced by one that implements AWS SDK V2's AwsCredentialProvider as part of upgrading S3A to SDK V2.\nClass IAMInstanceCredentialsProvider; // This class will be replaced by one that implements AWS SDK V2's AwsCredentialProvider as part of upgrading S3A to SDK V2.\nClass MarshalledCredentialBinding; // Class to bridge from the serializable/marshallabled MarshalledCredentialBinding class to/from AWS classes.\nClass MarshalledCredentialProvider; // AWS credential provider driven from marshalled session/full credentials (full, simple session or role).\nClass MarshalledCredentials; // Stores the credentials for a session or for a full login.\nClass RoleModel; // Jackson Role Model for Role Properties, for API clients and tests.\nClass RoleModel.Policy; // A policy is one or more statements.\nClass RoleModel.RoleElt; // Any element in a role.\nClass RoleModel.Statement; // A single statement.\nClass RolePolicies; // Operations, statements and policies covering the operations needed to work with S3.\nClass SignerManager; // Class to handle custom signers.\nClass STSClientFactory; // Factory for creating STS Clients.\nClass STSClientFactory.STSClient; // STS client connection with retries.\nEnum MarshalledCredentials.CredentialTypeRequired; // Enumeration of credential types for use in validation methods.\nEnum RoleModel.Effects; // Effect options.\n", "des": "Authentication and permissions support."}
{"index": 1763, "repo": "spring-data-mongodb-4.1.2", "code": "Package: spel\n\nClasses and Interfaces: \npublic class ExpressionNode extends Object implements Iterable<ExpressionNode>; // A value object for nodes in an expression.\npublic class ExpressionTransformationContextSupport<T extends ExpressionNode> extends Object; // The context for an ExpressionNode transformation.\npublic interface ExpressionTransformer<T extends ExpressionTransformationContextSupport<?>>; // SPI interface to implement components that can transform an ExpressionTransformationContextSupport into an object.\npublic class LiteralNode extends ExpressionNode; // A node representing a literal in an expression.\npublic class MethodReferenceNode extends ExpressionNode; // An ExpressionNode representing a method reference.\npublic static final class MethodReferenceNode.AggregationMethodReference extends Object;\npublic static enum MethodReferenceNode.AggregationMethodReference.ArgumentType extends Enum<MethodReferenceNode.AggregationMethodReference.ArgumentType>; // The actual argument type to use when mapping parameters to MongoDB specific format.\npublic class NotOperatorNode extends ExpressionNode;\npublic class OperatorNode extends ExpressionNode; // An ExpressionNode representing an operator.\n", "des": "Support classes to transform SpEL expressions into MongoDB expressions."}
{"index": 1495, "repo": "wicket-extensions-10.0.0-M1", "code": "Package: resource\n\nClasses and Interfaces: \npublic class ThumbnailImageResource extends org.apache.wicket.request.resource.DynamicImageResource; // Image resource that dynamically scales the given original resource to a thumbnail.\n", "des": "Image resource extensions."}
{"index": 2818, "repo": "spring-orm-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class HibernateDaoSupport extends org.springframework.dao.support.DaoSupport; // Convenient superclass for Hibernate-based data access objects.\npublic class OpenSessionInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.InitializingBean; // Simple AOP Alliance MethodInterceptor implementation that binds a new Hibernate Session for each method invocation, if none bound before.\npublic class OpenSessionInViewFilter extends org.springframework.web.filter.OncePerRequestFilter; // Servlet Filter that binds a Hibernate Session to the thread for the entire processing of the request.\npublic class OpenSessionInViewInterceptor extends Object implements org.springframework.web.context.request.AsyncWebRequestInterceptor; // Spring web request interceptor that binds a Hibernate Session to the thread for the entire processing of the request.\n", "des": "Classes supporting the org.springframework.orm.hibernate5 package."}
{"index": 235, "repo": "nutch-2.4", "code": "Package: instances\n\nClasses and Interfaces: \nClass InstancePanel;\nClass InstancesPage;\n", "des": "Contains instances pages classes for Web UI"}
{"index": 1675, "repo": "spring-boot-cli-3.1.1", "code": "Package: util\n\nClasses and Interfaces: \npublic abstract class Log extends Object; // Simple logger used by the CLI.\n", "des": "Utility classes for the CLI."}
{"index": 2001, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: reactive\n\nClasses and Interfaces: \npublic class JettyWebSocketReactiveWebServerCustomizer extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory>, org.springframework.core.Ordered; // WebSocket customizer for JettyReactiveWebServerFactory.\npublic class TomcatWebSocketReactiveWebServerCustomizer extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory>, org.springframework.core.Ordered; // WebSocket customizer for TomcatReactiveWebServerFactory.\n@AutoConfiguration(before=ReactiveWebServerFactoryAutoConfiguration.class) @ConditionalOnClass({jakarta.servlet.Servlet.class,jakarta.websocket.server.ServerContainer.class}) @ConditionalOnWebApplication(type=REACTIVE) public class WebSocketReactiveAutoConfiguration extends Object; // Auto-configuration for WebSocket reactive server in Tomcat, Jetty or Undertow.\n", "des": "Auto-configuration for WebSocket support in reactive web servers."}
{"index": 3734, "repo": "lucene-queryparser-9.7.0", "code": "Package: parser\n\nClasses and Interfaces: \nInterface EscapeQuerySyntax; // A parser needs to implement EscapeQuerySyntax to allow the QueryNode to escape the queries, when the toQueryString method is called.\nInterface SyntaxParser; // A parser needs to implement SyntaxParser interface\nEnum EscapeQuerySyntax.Type; // Type of escaping: String for escaping syntax, NORMAL for escaping reserved words (like AND) in terms\n", "des": "Necessary interfaces to implement text parsers."}
{"index": 1932, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: template\n\nClasses and Interfaces: \n@AutoConfiguration(after=WebMvcAutoConfiguration.class) @ConditionalOnClass(groovy.text.markup.MarkupTemplateEngine.class) @EnableConfigurationProperties(GroovyTemplateProperties.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateRuntimeHints.class) public class GroovyTemplateAutoConfiguration extends Object; // Auto-configuration support for Groovy templates in MVC.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer.class) public static class GroovyTemplateAutoConfiguration.GroovyMarkupConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass({jakarta.servlet.Servlet.class,org.springframework.context.i18n.LocaleContextHolder.class,org.springframework.web.servlet.view.UrlBasedViewResolver.class}) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnProperty(name=\"spring.groovy.template.enabled\", matchIfMissing=true) public static class GroovyTemplateAutoConfiguration.GroovyWebConfiguration extends Object;\npublic class GroovyTemplateAvailabilityProvider extends PathBasedTemplateAvailabilityProvider; // TemplateAvailabilityProvider that provides availability information for Groovy view templates.\nprotected static final class GroovyTemplateAvailabilityProvider.GroovyTemplateAvailabilityProperties extends PathBasedTemplateAvailabilityProvider.TemplateAvailabilityProperties;\n@ConfigurationProperties(prefix=\"spring.groovy.template\", ignoreUnknownFields=true) public class GroovyTemplateProperties extends AbstractTemplateViewResolverProperties; // @ConfigurationProperties for configuring Groovy templates.\n", "des": "Auto-configuration for Groovy templates."}
{"index": 939, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: client\n\nSub Packages: \npackage client.core; // Core package of the Spring-WS client-side support.\npackage client.support; // Classes supporting the org.springframework.ws.client.core package.\n\nClasses and Interfaces: \nClass WebServiceClientException; // Exception thrown whenever an error occurs on the client-side.\nClass WebServiceFaultException; // Thrown by SimpleFaultMessageResolver when the response message has a fault.\nClass WebServiceIOException; // Exception thrown whenever an I/O error occurs on the client-side.\nClass WebServiceTransformerException; // Exception thrown whenever a transformation error occurs on the client-side.\nClass WebServiceTransportException; // Exception thrown whenever a transport error occurs on the client-side.\n", "des": "Contains classes for client-side Spring-WS support, allowing for Spring-style Web service access."}
{"index": 681, "repo": "jackson-databind-2.15.2", "code": "Package: cfg\n\nClasses and Interfaces: \nInterface ConfigFeature; // Interface that actual SerializationFeature enumerations used by MapperConfig implementations must implement.\nInterface DatatypeFeature; // Interface that defines interaction with data type specific configuration features.\nClass BaseSettings; // Immutable container class used to store simple configuration settings for both serialization and deserialization.\nClass CoercionConfig;\nClass CoercionConfigs;\nClass ConfigOverride; // Configuration object that is accessed by databinding functionality to find overrides to configuration of properties, based on declared type of the property.\nClass ConfigOverrides; // Container for individual ConfigOverride values.\nClass ConstructorDetector; // Configurable handler used to select aspects of selecting constructor to use as \"Creator\" for POJOs.\nClass ContextAttributes; // Helper class used for storing and accessing per-call attributes.\nClass ContextAttributes.Impl;\nClass DatatypeFeatures; // Immutable value class that contains settings for multiple DatatypeFeature enumerations.\nClass DeserializerFactoryConfig; // Configuration settings container class for DeserializerFactory.\nClass HandlerInstantiator; // Helper class used for handling details of creating handler instances (things like JsonSerializers, JsonDeserializers, various type handlers) of specific types.\nClass MapperBuilder<M extends ObjectMapper,B extends MapperBuilder<M,B>>; // Jackson 3 will introduce fully immutable, builder-based system for constructing ObjectMappers.\nClass MapperConfig<T extends MapperConfig<T>>; // Interface that defines functionality accessible through both serialization and deserialization configuration objects; accessors to mode-independent configuration settings and such.\nClass MapperConfigBase<CFG extends ConfigFeature,T extends MapperConfigBase<CFG,T>>;\nClass MutableCoercionConfig; // Mutable version of CoercionConfig (or rather, extended API) exposed during configuration phase of ObjectMapper construction (via Builder).\nClass MutableConfigOverride; // Extension of ConfigOverride that allows changing of contained configuration settings.\nClass PackageVersion; // Automatically generated from PackageVersion.java.in during packageVersion-generate execution of maven-replacer-plugin in pom.xml.\nClass SerializerFactoryConfig; // Configuration settings container class for SerializerFactory implementations.\nEnum CoercionAction; // Set of possible actions for requested coercion from an input shape CoercionInputShape that does not directly or naturally match target type (LogicalType).\n", "des": "Package that contains most of configuration-related classes; exception being couple of most-commonly used configuration things (like Feature enumerations) that are at the main level (com.fasterxml.jackson.databind)."}
{"index": 225, "repo": "nutch-2.4", "code": "Package: client\n\nSub Packages: \npackage client.impl; // Contains implementation of client classes and interfaces for Web UI\npackage client.model; // Contains model classes of client for Web UI\n\nClasses and Interfaces: \nInterface NutchClient;\nClass NutchClientFactory;\n", "des": "Provides client classes and interfaces for Web UI"}
{"index": 3066, "repo": "spring-ws-core-4.0.5", "code": "Package: dom\n\nClasses and Interfaces: \npublic class Dom4jPayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports dom4j elements.\npublic class DomPayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports W3C DOM elements.\npublic class JDomPayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports JDOM elements.\npublic class XomPayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports XOM elements.\n", "des": "Provides DOM-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces."}
{"index": 1603, "repo": "spring-websocket-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractSockJsService extends Object implements SockJsService, org.springframework.web.cors.CorsConfigurationSource; // An abstract base class for SockJsService implementations that provides SockJS path resolution and handling of static SockJS requests (e.g.\npublic class SockJsHttpRequestHandler extends Object implements org.springframework.web.HttpRequestHandler, org.springframework.web.cors.CorsConfigurationSource, org.springframework.context.Lifecycle, org.springframework.web.context.ServletContextAware; // An HttpRequestHandler that allows mapping a SockJsService to requests in a Servlet container.\n", "des": "Support classes for SockJS including an AbstractSockJsService implementation."}
{"index": 2104, "repo": "spring-webflux-6.0.11", "code": "Package: view\n\nSub Packages: \npackage view.freemarker; // Support classes for the integration of FreeMarker as Spring web view technology.\npackage view.script; // Support classes for views based on the JSR-223 script engine abstraction (as included in Java 6+), e.g.\n\nClasses and Interfaces: \npublic abstract class AbstractUrlBasedView extends AbstractView implements org.springframework.beans.factory.InitializingBean; // Abstract base class for URL-based views.\npublic abstract class AbstractView extends Object implements View, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationContextAware; // Base class for View implementations.\npublic class BindStatus extends Object; // Simple adapter to expose the bind status of a field or object.\npublic class HttpMessageWriterView extends Object implements View; // View that writes model attribute(s) with an HttpMessageWriter.\npublic class RedirectView extends AbstractUrlBasedView; // View that redirects to an absolute or context relative URL.\npublic interface Rendering; // Public API for HTML rendering.\npublic static interface Rendering.Builder<B extends Rendering.Builder<B>>; // Defines a builder for Rendering.\npublic static interface Rendering.RedirectBuilder extends Rendering.Builder<Rendering.RedirectBuilder>; // Extends Rendering.Builder with extra options for redirect scenarios.\npublic class RequestContext extends Object; // Context holder for request-specific state, like the MessageSource to use, current locale, binding errors, etc.\npublic interface RequestDataValueProcessor; // A contract for inspecting and potentially modifying request data values such as URL query parameters or form field values before they are rendered by a view or before a redirect.\npublic class UrlBasedViewResolver extends ViewResolverSupport implements ViewResolver, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // A ViewResolver that allows direct resolution of symbolic view names to URLs without explicit mapping definitions.\npublic interface View; // Contract to render HandlerResult to the HTTP response.\n", "des": "Support for result handling through view resolution."}
{"index": 1053, "repo": "commons-io-2.13.0", "code": "Package: output\n\nClasses and Interfaces: \nInterface AbstractByteArrayOutputStream.InputStreamConstructor<T extends InputStream>; // Constructor for an InputStream subclass.\nInterface UncheckedAppendable; // An Appendable that throws UncheckedIOException instead of IOException.\nClass AbstractByteArrayOutputStream; // This is the base class for implementing an output stream in which the data is written into a byte array.\nClass AppendableOutputStream<T extends Appendable>; // OutputStream implementation that writes the data to an Appendable Object.\nClass AppendableWriter<T extends Appendable>; // Writer implementation that writes the data to an Appendable Object.\nClass BrokenOutputStream; // Broken output stream.\nClass BrokenWriter; // Always throws an IOException from all Writer methods.\nClass ByteArrayOutputStream; // Implements a ThreadSafe version of AbstractByteArrayOutputStream using instance synchronization.\nClass ChunkedOutputStream; // OutputStream which breaks larger output blocks into chunks.\nClass ChunkedOutputStream.Builder; // Builds a new UnsynchronizedByteArrayOutputStream instance.\nClass ChunkedWriter; // Writer which breaks larger output blocks into chunks.\nClass ClosedOutputStream; // Throws an IOException on all attempts to write to the stream.\nClass ClosedWriter; // Throws an IOException on all attempts to write with ClosedWriter.close() implemented as a noop.\nClass CloseShieldOutputStream; // Proxy stream that prevents the underlying output stream from being closed.\nClass CloseShieldWriter; // Proxy writer that prevents the underlying writer from being closed.\nClass CountingOutputStream; // A decorating output stream that counts the number of bytes that have passed through the stream so far.\nClass DeferredFileOutputStream; // An output stream which will retain data in memory until a specified threshold is reached, and only then commit it to disk.\nClass DeferredFileOutputStream.Builder; // Builds a new DeferredFileOutputStream instance.\nClass DemuxOutputStream; // Forwards data to a stream that has been associated with this thread.\nClass FileWriterWithEncoding; // Writer of files that allows the encoding to be set.\nClass FileWriterWithEncoding.Builder; // Builds a new FileWriterWithEncoding instance.\nClass FilterCollectionWriter; // Abstract class for writing filtered character streams to a Collection of writers.\nClass LockableFileWriter; // FileWriter that will create and honor lock files to allow simple cross thread file lock handling.\nClass LockableFileWriter.Builder; // Builds a new LockableFileWriter instance.\n", "des": "Provides implementations of output classes, such as OutputStream and Writer."}
{"index": 2087, "repo": "spring-webmvc-6.0.11", "code": "Package: script\n\nClasses and Interfaces: \npublic class RenderingContext extends Object; // Context passed to ScriptTemplateView render function in order to make the application context, the locale, the template loader and the url available on scripting side.\npublic interface ScriptTemplateConfig; // Interface to be implemented by objects that configure and manage a JSR-223 ScriptEngine for automatic lookup in a web environment.\npublic class ScriptTemplateConfigurer extends Object implements ScriptTemplateConfig; // An implementation of Spring MVC's ScriptTemplateConfig for creating a ScriptEngine for use in a web application.\npublic class ScriptTemplateView extends AbstractUrlBasedView; // An AbstractUrlBasedView subclass designed to run any template library based on a JSR-223 script engine.\npublic class ScriptTemplateViewResolver extends UrlBasedViewResolver; // Convenience subclass of UrlBasedViewResolver that supports ScriptTemplateView and custom subclasses of it.\n", "des": "Support classes for views based on the JSR-223 script engine abstraction (as included in Java 6+), e.g."}
{"index": 628, "repo": "freemarker-2.3.32", "code": "Package: servlet\n\nClasses and Interfaces: \nClass AllHttpScopesHashModel; // An extension of SimpleHash that looks up keys in the hash, then in the request, session, and servlet context scopes.\nClass FreemarkerServlet; // FreeMarker MVC View servlet that can be used similarly to JSP views.\nClass HttpRequestHashModel; // TemplateHashModel wrapper for a HttpServletRequest attributes.\nClass HttpRequestParametersHashModel; // TemplateHashModel wrapper for a HttpServletRequest parameters.\nClass HttpSessionHashModel; // TemplateHashModel wrapper for a HttpSession attributes.\nClass IncludePage; // A model that when invoked with a 'path' parameter will perform a servlet include.\nClass ServletContextHashModel; // TemplateHashModel wrapper for a ServletContext attributes.\n", "des": "Servlet for legacy \"Model 2\" frameworks that allows using FreeMarker templates instead of JSP as the MVC View (see in the Manual)."}
{"index": 2036, "repo": "spring-messaging-6.0.11", "code": "Package: simp\n\nSub Packages: \npackage simp.annotation; // Annotations and for handling messages from SImple Messaging Protocols such as STOMP.\npackage simp.broker; // Provides a \"simple\" message broker implementation along with an abstract base class and other supporting types such as a registry for subscriptions.\npackage simp.config; // Configuration support for WebSocket messaging using higher level messaging protocols.\npackage simp.stomp; // Generic support for simple messaging protocols (like STOMP).\npackage simp.user; // Support for handling messages to \"user\" destinations (i.e.\n\nClasses and Interfaces: \npublic class SimpAttributes extends Object; // A wrapper class for access to attributes associated with a SiMP session (e.g.\npublic abstract class SimpAttributesContextHolder extends Object; // Holder class to expose SiMP attributes associated with a session (e.g.\npublic abstract class SimpLogging extends Object; // Holds the shared logger named \"org.springframework.web.SimpLogging\" to use for STOMP over WebSocket messaging when logging for \"org.springframework.messaging.simp\" is off but logging for \"org.springframework.web\" is on.\npublic class SimpMessageHeaderAccessor extends NativeMessageHeaderAccessor; // A base class for working with message headers in simple messaging protocols that support basic messaging patterns.\npublic class SimpMessageMappingInfo extends Object implements MessageCondition<SimpMessageMappingInfo>; // MessageCondition for SImple Messaging Protocols.\npublic interface SimpMessageSendingOperations extends MessageSendingOperations<String>; // A specialization of MessageSendingOperations with methods for use with the Spring Framework support for Simple Messaging Protocols (like STOMP).\npublic enum SimpMessageType extends Enum<SimpMessageType>; // A generic representation of different kinds of messages found in simple messaging protocols like STOMP.\npublic class SimpMessageTypeMessageCondition extends AbstractMessageCondition<SimpMessageTypeMessageCondition>; // MessageCondition that matches by the message type obtained via SimpMessageHeaderAccessor.getMessageType(Map).\npublic class SimpMessagingTemplate extends AbstractMessageSendingTemplate<String> implements SimpMessageSendingOperations; // An implementation of SimpMessageSendingOperations.\n", "des": "Generic support for Simple Messaging Protocols including protocols such as STOMP."}
{"index": 1535, "repo": "spring-context-6.0.11", "code": "Package: naming\n\nClasses and Interfaces: \npublic class IdentityNamingStrategy extends Object implements ObjectNamingStrategy; // An implementation of the ObjectNamingStrategy interface that creates a name based on the identity of a given instance.\npublic class KeyNamingStrategy extends Object implements ObjectNamingStrategy, org.springframework.beans.factory.InitializingBean; // ObjectNamingStrategy implementation that builds ObjectName instances from the key used in the \"beans\" map passed to MBeanExporter.\npublic class MetadataNamingStrategy extends Object implements ObjectNamingStrategy, org.springframework.beans.factory.InitializingBean; // An implementation of the ObjectNamingStrategy interface that reads the ObjectName from the source-level metadata.\n@FunctionalInterface public interface ObjectNamingStrategy; // Strategy interface that encapsulates the creation of ObjectName instances.\npublic interface SelfNaming; // Interface that allows infrastructure components to provide their own ObjectNames to the MBeanExporter.\n", "des": "Provides a strategy for ObjectName creation."}
{"index": 1876, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: annotation\n\nClasses and Interfaces: \npublic enum Logical extends Enum<Logical>; // An enum for specifying a logical operation that can be used for interpreting authorization annotations\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface RequiresAuthentication; // Requires the current Subject to have been authenticated during their current session for the annotated class/instance/method to be accessed or invoked.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface RequiresGuest; // Requires the current Subject to be a \"guest\", that is, they are not authenticated or remembered from a previous session for the annotated class/instance/method to be accessed or invoked.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface RequiresPermissions; // Requires the current executor's Subject to imply a particular permission in order to execute the annotated method.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface RequiresRoles; // Requires the currently executing Subject to have all of the specified roles.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface RequiresUser; // Requires the current Subject to be an application user for the annotated class/instance/method to be accessed or invoked.\n", "des": "Annotations used to restrict which classes, instances, or methods may be accessed or invoked depending on the caller's access abilities or authentication state."}
{"index": 2746, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: exception\n\nClasses and Interfaces: \npublic class CompositeExceptionHandler extends Object implements ExceptionHandler; // Composite ExceptionHandler that loops though a list of delegates.\npublic class DefaultExceptionHandler extends Object implements ExceptionHandler; // Default implementation of ExceptionHandler - just re-throws the exception it encounters.\n@FunctionalInterface public interface ExceptionHandler; // Handler to allow strategies for re-throwing exceptions.\npublic class LogOrRethrowExceptionHandler extends Object implements ExceptionHandler; // Implementation of ExceptionHandler based on an Classifier.\npublic static enum LogOrRethrowExceptionHandler.Level extends Enum<LogOrRethrowExceptionHandler.Level>; // Logging levels for the handler.\npublic class RethrowOnThresholdExceptionHandler extends Object implements ExceptionHandler; // Implementation of ExceptionHandler that rethrows when exceptions of a given type reach a threshold.\npublic class SimpleLimitExceptionHandler extends Object implements ExceptionHandler, org.springframework.beans.factory.InitializingBean; // Simple implementation of exception handler which looks for given exception types.\n", "des": "Infrastructure implementations of repeat exception handler concerns."}
{"index": 1799, "repo": "spring-aop-6.0.11", "code": "Package: aop\n\nSub Packages: \npackage aop.aspectj; // AspectJ integration package.\npackage aop.config; // Support package for declarative AOP configuration, with XML schema being the primary configuration format.\npackage aop.framework; // Package containing Spring's basic AOP infrastructure, compliant with the AOP Alliance interfaces.\npackage aop.interceptor; // Provides miscellaneous interceptor implementations.\npackage aop.scope; // Support for AOP-based scoping of target objects, with configurable backend.\npackage aop.support; // Convenience classes for using Spring's AOP API.\npackage aop.target; // Various TargetSource implementations for use with Spring AOP.\n\nClasses and Interfaces: \npublic interface Advisor; // Base interface holding AOP advice (action to take at a joinpoint) and a filter determining the applicability of the advice (such as a pointcut).\npublic interface AfterAdvice extends Advice; // Common marker interface for after advice, such as AfterReturningAdvice and ThrowsAdvice.\npublic interface AfterReturningAdvice extends AfterAdvice; // After returning advice is invoked only on normal method return, not if an exception is thrown.\npublic class AopInvocationException extends org.springframework.core.NestedRuntimeException; // Exception that gets thrown when an AOP invocation failed because of misconfiguration or unexpected runtime issues.\npublic interface BeforeAdvice extends Advice; // Common marker interface for before advice, such as MethodBeforeAdvice.\n@FunctionalInterface public interface ClassFilter; // Filter that restricts matching of a pointcut or introduction to a given set of target classes.\npublic interface DynamicIntroductionAdvice extends Advice; // Subinterface of AOP Alliance Advice that allows additional interfaces to be implemented by an Advice, and available via a proxy using that interceptor.\npublic interface IntroductionAdvisor extends Advisor, IntroductionInfo; // Superinterface for advisors that perform one or more AOP introductions.\npublic interface IntroductionAwareMethodMatcher extends MethodMatcher; // A specialized type of MethodMatcher that takes into account introductions when matching methods.\npublic interface IntroductionInfo; // Interface supplying the information necessary to describe an introduction.\n", "des": "Core Spring AOP interfaces, built on AOP Alliance AOP interoperability interfaces."}
{"index": 1775, "repo": "spring-data-mongodb-4.1.2", "code": "Package: json\n\nClasses and Interfaces: \npublic class ParameterBindingContext extends Object; // Reusable context for binding parameters to a placeholder or a SpEL expression within a JSON structure.\npublic class ParameterBindingDocumentCodec extends Object implements org.bson.codecs.CollectibleCodec<org.bson.Document>; // A Codec implementation that allows binding parameters to placeholders or SpEL expressions when decoding a JSON String.\npublic class ParameterBindingJsonReader extends org.bson.AbstractBsonReader; // Reads a JSON and evaluates placehoders and SpEL expressions.\n@FunctionalInterface public interface ValueProvider; // A value provider to retrieve bindable values by their parameter index.\n", "des": "MongoDB driver-specific utility classes for Json conversion."}
{"index": 1072, "repo": "hadoop-yarn-common-3.3.6", "code": "Package: metrics\n\nClasses and Interfaces: \nInterface EventTypeMetrics<T extends Enum<T>>;\nClass CustomResourceMetrics; // This is base class for allocated and available metrics for custom resources.\nClass CustomResourceMetricValue; // Class that holds metrics values for custom resources in a map keyed with the name of the custom resource.\nClass DisableEventTypeMetrics;\nClass GenericEventTypeMetrics<T extends Enum<T>>;\nClass GenericEventTypeMetrics.EventTypeMetricsBuilder<T extends Enum<T>>; // Builder class for GenericEventTypeMetrics.\n", "des": "Provides common metrics (available, allocated) for custom resources."}
{"index": 3256, "repo": "opencms-core-15.0", "code": "Package: db\n\nSub Packages: \npackage db.as400; // AS400 implementation of the OpenCms database connector.\npackage db.db2; // DB2 implementation of the OpenCms database connector.\npackage db.generic; // Generic (ANSI-SQL) implementation of the OpenCms database connector.\npackage db.hsqldb; // HSQLDB implementation of the OpenCms database connector.\npackage db.log; // This package contains the implementation classes for the DB log.\npackage db.mssql; // MS SQL implementation of the OpenCms database connector.\npackage db.mysql; // MySQL4+ implementation of the OpenCms database connector.\npackage db.oracle; // Oracle9+ implementation of the OpenCms database connector.\npackage db.postgresql; // PostgreSql implementation of the OpenCms database connector.\npackage db.timing; // Utility classes for profiling driver calls.\n\nClasses and Interfaces: \nInterface I_CmsCacheKey; // Describes the cache key generating methods.\nInterface I_CmsDbContextFactory; // This interface defines a factory to create runtime info objects.\nInterface I_CmsDriver; // Generic base driver interface.\nInterface I_CmsExportPointDriver; // Provides methods to write export points to the \"real\" file system.\nInterface I_CmsHistoryDriver; // Definitions of all required history driver methods.\nInterface I_CmsPreparedStatementParameter; // An interface which represents a parameter value which is going to be used in an SQL prepared statement.\nInterface I_CmsProjectDriver; // Definitions of all required project driver methods.\nInterface I_CmsQueryFragment; // An interface for classes which are used to generate SQL statements.\nInterface I_CmsSubscriptionDriver; // The interface for drivers handling subscriptions and user tracking.\nInterface I_CmsUserDriver; // Definitions of all required user driver methods.\nInterface I_CmsVfsDriver; // Definitions of all required VFS driver methods.\nClass CmsAlias; // This class represents an alias from a virtual path to a resource in the VFS.\nClass CmsAliasFilter; // This class is used for filtering aliases in database operations.\nClass CmsAliasManager; // The alias manager provides access to the aliases stored in the database.\nClass CmsCacheKey; // Generates the cache keys for the user and permission caches.\nClass CmsCacheSettings; // The settings of the OpenCms memory monitor.\n", "des": "Low-level database connection and access functionality."}
{"index": 2696, "repo": "spring-integration-http-6.1.2", "code": "Package: management\n\nClasses and Interfaces: \n@RestController @RequestMapping(\"${spring.integration.graph.controller.request.mapping.path:/integration}\") public class IntegrationGraphController extends Object; // The REST Controller to provide the management API over IntegrationGraphServer.\n", "des": "Provides classes related to management support."}
{"index": 3294, "repo": "opencms-core-15.0", "code": "Package: lock\n\nClasses and Interfaces: \nClass CmsLock; // Represents the lock state of a VFS resource.\nClass CmsLockActionRecord; // Bean class which keeps track of a locking action performed on a resource.\nClass CmsLockFilter; // A filter to retrieve the locks.\nClass CmsLockManager; // The CmsLockManager is used by the Cms application to detect the lock state of a resource.\nClass CmsLockType; // Indicates the different possible lock types.\nClass CmsLockUtil; // Locking utility class.\nClass CmsLockUtil.LockedFile; // Helper to handle the lock reports together with the files.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsLockActionRecord.LockChange; // A type for the different locking actions.\nClass CmsLockException; // Signals that a particular action was invoked on resource with an insufficient lock state.\n", "des": "The lock state of the resources in the VFS is handled with these classes."}
{"index": 3703, "repo": "solr-core-9.3.0", "code": "Package: similarities\n\nClasses and Interfaces: \nClass BM25SimilarityFactory; // Factory for BM25Similarity.\nClass BooleanSimilarityFactory; // Factory for BooleanSimilarity\nClass ClassicSimilarityFactory; // Factory for ClassicSimilarity\nClass DFISimilarityFactory; // Factory for DFISimilarity\nClass DFRSimilarityFactory; // Factory for DFRSimilarity\nClass IBSimilarityFactory; // Factory for IBSimilarity\nClass LMDirichletSimilarityFactory; // Factory for LMDirichletSimilarity\nClass LMJelinekMercerSimilarityFactory; // Factory for LMJelinekMercerSimilarity\nClass SchemaSimilarityFactory; // SimilarityFactory that returns a global PerFieldSimilarityWrapper that delegates to the field type, if it's configured.\nClass SweetSpotSimilarityFactory; // Factory for SweetSpotSimilarity.\n", "des": "Factories for various built-in Lucene ranking models."}
{"index": 2575, "repo": "camel-api-4.0.0-RC1", "code": "Package: cloud\n\nClasses and Interfaces: \npublic interface DiscoverableService;\npublic interface ServiceCallConstants;\n@FunctionalInterface public interface ServiceChooser; // Allows SPIs to implement custom Service Chooser.\npublic interface ServiceChooserAware; // An interface to represent an object which wishes to be injected with a ServiceChooser\n@FunctionalInterface public interface ServiceChooserFactory extends ServiceFactory<ServiceChooser>; // A factory to create ServiceChooser\npublic interface ServiceDefinition; // Represents a Service.\npublic interface ServiceDiscovery; // Allows SPIs to implement custom Service Discovery.\npublic interface ServiceDiscoveryAware; // An interface to represent an object which wishes to be injected with a ServiceDiscovery\n@FunctionalInterface public interface ServiceDiscoveryFactory extends ServiceFactory<ServiceDiscovery>; // A factory to create ServiceDiscovery\n@FunctionalInterface public interface ServiceExpressionFactory extends ServiceFactory<Expression>; // A factory to create Expression\n@FunctionalInterface public interface ServiceFactory<T>;\n@FunctionalInterface public interface ServiceFilter; // Allows SPIs to implement custom Service Filter.\npublic interface ServiceFilterAware; // An interface to represent an object which wishes to be injected with a ServiceFilter\n@FunctionalInterface public interface ServiceFilterFactory extends ServiceFactory<ServiceFilter>; // A factory to create ServiceFilter\npublic interface ServiceHealth;\n@FunctionalInterface public interface ServiceLoadBalancer; // Represents a Load Balancer.\n@FunctionalInterface public interface ServiceLoadBalancerFactory extends ServiceFactory<ServiceLoadBalancer>; // A factory to create LoadBalancer\n@FunctionalInterface public interface ServiceLoadBalancerFunction<T>; // Represents a load balancer function to be executed by the LoadBalancer.\npublic interface ServiceRegistry extends Service, CamelContextAware, IdAware, Ordered;\n@FunctionalInterface public static interface ServiceRegistry.Selector; // A selector used to pick up a service among a list.\n", "des": "Camel cloud"}
{"index": 185, "repo": "ignite-core-2.15.0", "code": "Package: loopback\n\nClasses and Interfaces: \nClass IpcClientTcpEndpoint; // Loopback IPC endpoint based on socket.\nClass IpcServerTcpEndpoint; // Server loopback IPC endpoint.\n", "des": "Loopback IPC utility classes."}
{"index": 3869, "repo": "lucene-spatial-extras-9.7.0", "code": "Package: spatial4j\n\nClasses and Interfaces: \nClass Geo3dBinaryCodec; // Geo3d implementation of BinaryCodec\nClass Geo3dCircleShape; // Specialization of a Geo3dShape which represents a Circle.\nClass Geo3dDistanceCalculator; // Geo3d implementation of DistanceCalculator\nClass Geo3dPointShape; // Specialization of a Geo3dShape which represents a Point.\nClass Geo3dRectangleShape; // Specialization of a Geo3dShape which represents a Rectangle.\nClass Geo3dShape<T extends GeoAreaShape>; // A Spatial4j Shape wrapping a GeoAreaShape (\"Geo3D\") -- a 3D planar geometry based Spatial4j Shape implementation.\nClass Geo3dShapeFactory; // Geo3d implementation of S2ShapeFactory\nClass Geo3dSpatialContextFactory; // Geo3d implementation of SpatialContextFactory\n", "des": "Spatial4j stuff that ideally belongs in Spatial4j (isn't related to Lucene)."}
{"index": 69, "repo": "ignite-core-2.15.0", "code": "Package: jdbc\n\nClasses and Interfaces: \nInterface JdbcCheckpointSpiMBean; // Management bean that provides general administrative and configuration information about jdbc checkpoint SPI.\nClass JdbcCheckpointSpi; // This class defines JDBC checkpoint SPI implementation.\n", "des": "Contains JDBC implementation for checkpoint SPI."}
{"index": 1513, "repo": "spring-context-6.0.11", "code": "Package: i18n\n\nClasses and Interfaces: \npublic interface LocaleContext; // Strategy interface for determining the current Locale.\npublic final class LocaleContextHolder extends Object; // Simple holder class that associates a LocaleContext instance with the current thread.\npublic class SimpleLocaleContext extends Object implements LocaleContext; // Simple implementation of the LocaleContext interface, always returning a specified Locale.\npublic class SimpleTimeZoneAwareLocaleContext extends SimpleLocaleContext implements TimeZoneAwareLocaleContext; // Simple implementation of the TimeZoneAwareLocaleContext interface, always returning a specified Locale and TimeZone.\npublic interface TimeZoneAwareLocaleContext extends LocaleContext; // Extension of LocaleContext, adding awareness of the current time zone.\n", "des": "Abstraction for determining the current Locale, plus global holder that exposes a thread-bound Locale."}
{"index": 3599, "repo": "lucene-test-framework-9.7.0", "code": "Package: automaton\n\nClasses and Interfaces: \nClass AutomatonTestUtil; // Utilities for testing automata.\nClass AutomatonTestUtil.RandomAcceptedStrings; // Lets you retrieve random strings accepted by an Automaton.\n", "des": "Support for testing automata."}
{"index": 3763, "repo": "lucene-analysis-common-9.7.0", "code": "Package: boost\n\nClasses and Interfaces: \nClass DelimitedBoostTokenFilter; // Characters before the delimiter are the \"token\", those after are the boost.\nClass DelimitedBoostTokenFilterFactory; // Factory for DelimitedBoostTokenFilter.\n", "des": "Provides various convenience classes for creating boosts on Tokens."}
{"index": 988, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: soap12\n\nClasses and Interfaces: \nInterface Soap12Body; // Subinterface of SoapBody that exposes SOAP 1.2 functionality.\nInterface Soap12Fault; // Subinterface of SoapFault that exposes SOAP 1.2 functionality.\nInterface Soap12Header; // Subinterface of SoapHeader that exposes SOAP 1.2 functionality.\n", "des": "Contains interfaces specific to SOAP 1.2."}
{"index": 2033, "repo": "spring-messaging-6.0.11", "code": "Package: annotation\n\nSub Packages: \npackage annotation.support; // Support classes for working with annotated RSocket stream handling methods.\n\nClasses and Interfaces: \n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ConnectMapping; // Annotation to map the initial ConnectionSetupPayload and subsequent metadata pushes onto a handler method.\n", "des": "Annotations and support classes for handling RSocket streams."}
{"index": 3391, "repo": "commons-imaging-1.0-alpha3", "code": "Package: gif\n\nClasses and Interfaces: \nClass GifImageMetadata;\nClass GifImageMetadataItem;\nClass GifImageParser;\nClass GifImagingParameters; // Gif format parameters.\nEnum DisposalMethod; // Describes the disposal of a GIF frame when rendering the animation.\n", "des": "The GIF image format."}
{"index": 1881, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: env\n\nClasses and Interfaces: \npublic class BasicIniEnvironment extends DefaultEnvironment; // Basic usage:\npublic class DefaultEnvironment extends Object implements NamedObjectEnvironment, org.apache.shiro.lang.util.Destroyable; // Simple/default Environment implementation that stores Shiro objects as key-value pairs in a Map instance.\npublic interface Environment; // An Environment instance encapsulates all of the objects that Shiro requires to function.\npublic class EnvironmentException extends org.apache.shiro.lang.ShiroException; // Exception thrown for errors related to Environment instances or configuration.\npublic interface NamedObjectEnvironment extends Environment; // An environment that supports object lookup by name.\npublic class RequiredTypeException extends EnvironmentException; // Exception thrown when attempting to acquire an object of a required type and that object does not equal, extend, or implement a specified Class.\n", "des": "Concepts used to represent Shiro's aggregate state in an application."}
{"index": 1615, "repo": "spring-data-neo4j-7.1.2", "code": "Package: repository\n\nSub Packages: \npackage repository.config; // Configuration infrastructure for Neo4j specific repositories, especially dedicated annotations to enable imperative and reactive Spring Data Neo4j repositories.\npackage repository.query; // A set of annotations for providing custom queries to repositories.\npackage repository.support; // This package provides a couple of public support classes for building custom imperative and reactive Spring Data Neo4j repository base classes.\n\nClasses and Interfaces: \n@NoRepositoryBean public interface Neo4jRepository<T,ID> extends PagingAndSortingRepository<T,ID>, QueryByExampleExecutor<T>, CrudRepository<T,ID>; // Neo4j specific Repository interface.\n@API(status=STABLE, since=\"6.0\") public class NoResultException extends EmptyResultDataAccessException; // Throw when a query doesn't return a required result.\n@NoRepositoryBean public interface ReactiveNeo4jRepository<T,ID> extends ReactiveSortingRepository<T,ID>, ReactiveQueryByExampleExecutor<T>, ReactiveCrudRepository<T,ID>; // Neo4j specific Repository interface with reactive support.\n", "des": "This package provides the Neo4j imperative and reactive repository API."}
{"index": 1832, "repo": "spring-test-6.0.11", "code": "Package: web\n\nSub Packages: \npackage web.server; // Mock implementations of Spring's reactive server web API abstractions.\n\nClasses and Interfaces: \npublic class DelegatingServletInputStream extends ServletInputStream; // Delegating implementation of ServletInputStream.\npublic class DelegatingServletOutputStream extends ServletOutputStream; // Delegating implementation of ServletOutputStream.\npublic class MockAsyncContext extends Object implements AsyncContext; // Mock implementation of the AsyncContext interface.\npublic class MockBodyContent extends BodyContent; // Mock implementation of the BodyContent class.\npublic class MockCookie extends Cookie; // Extension of Cookie with extra attributes, as defined in RFC 6265.\npublic class MockFilterChain extends Object implements FilterChain; // Mock implementation of the FilterChain interface.\npublic class MockFilterConfig extends Object implements FilterConfig; // Mock implementation of the FilterConfig interface.\npublic class MockHttpServletMapping extends Object implements HttpServletMapping; // Mock implementation of HttpServletMapping.\npublic class MockHttpServletRequest extends Object implements HttpServletRequest; // Mock implementation of the HttpServletRequest interface.\npublic class MockHttpServletResponse extends Object implements HttpServletResponse; // Mock implementation of the HttpServletResponse interface.\npublic class MockHttpSession extends Object implements HttpSession; // Mock implementation of the HttpSession interface.\npublic class MockJspWriter extends JspWriter; // Mock implementation of the JspWriter class.\npublic class MockMultipartFile extends Object implements org.springframework.web.multipart.MultipartFile; // Mock implementation of the MultipartFile interface.\npublic class MockMultipartHttpServletRequest extends MockHttpServletRequest implements org.springframework.web.multipart.MultipartHttpServletRequest; // Mock implementation of the MultipartHttpServletRequest interface.\npublic class MockPageContext extends PageContext; // Mock implementation of the PageContext interface.\npublic class MockPart extends Object implements Part; // Mock implementation of jakarta.servlet.http.Part.\npublic class MockRequestDispatcher extends Object implements RequestDispatcher; // Mock implementation of the RequestDispatcher interface.\npublic class MockServletConfig extends Object implements ServletConfig; // Mock implementation of the ServletConfig interface.\npublic class MockServletContext extends Object implements ServletContext; // Mock implementation of the ServletContext interface.\npublic class MockSessionCookieConfig extends Object implements SessionCookieConfig; // Mock implementation of the SessionCookieConfig interface.\n", "des": "A comprehensive set of Servlet API 6.0 mock objects, targeted at usage with Spring's Web MVC framework."}
{"index": 294, "repo": "pdfbox-3.0.0-beta1", "code": "Package: graphics\n\nSub Packages: \npackage graphics.color; // This package deals with colors that are stored in a PDF document.\npackage graphics.form; // This package deals with Form XObjects that are stored in a PDF document.\npackage graphics.image; // This package deals with images that are stored in a PDF document.\npackage graphics.pattern; // This package deals with patterns which are used instead of colors.\npackage graphics.shading; // This package deals with shadings which are used for filling instead of a color.\npackage graphics.state; // This package deals with graphics states within the PDF document.\n\nClasses and Interfaces: \nClass PDFontSetting; // This class represents a font setting used for the graphics state.\nClass PDLineDashPattern; // A line dash pattern for stroking paths.\nClass PDPostScriptXObject; // A PostScript XObject.\nClass PDXObject; // An external object, or \"XObject\".\n", "des": "The PDModel graphics package deals with graphics states, operations, and parameters within the PDF document."}
{"index": 2916, "repo": "spring-xml-4.0.5", "code": "Package: commons\n\nClasses and Interfaces: \npublic class CommonsXsdSchema extends Object implements XsdSchema; // Implementation of the XsdSchema interface that uses Apache WS-Commons XML Schema.\npublic class CommonsXsdSchemaCollection extends Object implements XsdSchemaCollection, org.springframework.beans.factory.InitializingBean, org.springframework.context.ResourceLoaderAware; // Implementation of the XsdSchemaCollection that uses Apache WS-Commons XML Schema.\npublic class CommonsXsdSchemaException extends XsdSchemaException; // Commons XmlSchema version of the XsdSchemaException.\n", "des": "Contains a implementation of the XsdSchema interfaces that uses Apache WS-Commons XML Schema."}
{"index": 824, "repo": "calcite-core-1.34.0", "code": "Package: enumerable\n\nSub Packages: \npackage enumerable.impl; // Calcite-specific classes for implementation of regular and window aggregates.\n\nClasses and Interfaces: \nInterface AggAddContext; // Information for a call to AggImplementor.implementAdd(AggContext, AggAddContext).\nInterface AggContext; // Information on the aggregate calculation context.\nInterface AggImplementor; // Implements an aggregate function by generating expressions to initialize, add to, and get a result from, an accumulator.\nInterface AggregateLambdaFactory<TSource,TOrigAccumulate,TAccumulate,TResult,TKey>; // Generates lambda functions used in EnumerableAggregate.\nInterface AggResetContext; // Information for a call to AggImplementor.implementReset(AggContext, AggResetContext).\nInterface AggResultContext; // Information for a call to AggImplementor.implementResult(AggContext, AggResultContext)\nInterface CallImplementor; // Implements a call via given translator.\nInterface EnumerableBatchNestedLoopJoinRule.Config; // Rule configuration.\nInterface EnumerableFilterToCalcRule.Config; // Rule configuration.\nInterface EnumerableLimitRule.Config; // Rule configuration.\nInterface EnumerableLimitSortRule.Config; // Rule configuration.\nInterface EnumerableMergeUnionRule.Config; // Rule configuration.\nInterface EnumerableProjectToCalcRule.Config; // Rule configuration.\nInterface EnumerableRel; // A relational expression of one of the EnumerableConvention calling conventions.\nInterface LazyAggregateLambdaFactory.LazyAccumulator<TOrigAccumulate,TSource>; // Accumulate on the cached input sources.\nInterface MatchImplementor; // Implementor of Functions used in MATCH_RECOGNIZE Context.\nInterface NestedBlockBuilder; // Allows to build nested code blocks with tracking of current context.\nInterface NotNullImplementor; // Simplified version of CallImplementor that does not know about null semantics.\nInterface PhysType; // Physical type of a row.\nInterface RexImpTable.RexCallImplementor; // Null-safe implementor of RexCalls.\nInterface RexToLixTranslator.InputGetter; // Translates a field of an input to an expression.\nInterface TableFunctionCallImplementor; // Implements a table-valued function call.\n", "des": "Query optimizer rules for Java calling convention."}
{"index": 2667, "repo": "spring-data-cassandra-4.1.2", "code": "Package: util\n\nClasses and Interfaces: \npublic class MapBuilder<K,V> extends Object implements Map<K,V>; // Builder for maps, which also conveniently implements Map via delegation for convenience so you don't have to actually MapBuilder.build() it.\npublic class SpelUtils extends Object; // Evaluates a SpEL expression.\n", "des": "Map and SpEL utility infrastructure."}
{"index": 2109, "repo": "spring-webflux-6.0.11", "code": "Package: client\n\nClasses and Interfaces: \n@Deprecated(since=\"6.0.3\", forRemoval=true) public class JettyWebSocketClient extends Object implements WebSocketClient, org.springframework.context.Lifecycle;\npublic class ReactorNetty2WebSocketClient extends Object implements WebSocketClient; // WebSocketClient implementation for use with Reactor Netty for Netty 5.\npublic class ReactorNettyWebSocketClient extends Object implements WebSocketClient; // WebSocketClient implementation for use with Reactor Netty.\npublic class StandardWebSocketClient extends Object implements WebSocketClient; // WebSocketClient implementation for use with the Jakarta WebSocket API.\npublic class TomcatWebSocketClient extends StandardWebSocketClient; // WebSocketClient implementation for use with Tomcat, based on the Jakarta WebSocket API.\npublic class UndertowWebSocketClient extends Object implements WebSocketClient; // Undertow based implementation of WebSocketClient.\npublic interface WebSocketClient; // Contract for reactive-style handling of a WebSocket session.\n", "des": "Client support for WebSocket interactions."}
{"index": 2129, "repo": "spring-context-support-6.0.11", "code": "Package: config\n\nClasses and Interfaces: \n@Configuration(proxyBeanMethods=false) public abstract class AbstractJCacheConfiguration extends org.springframework.cache.annotation.AbstractCachingConfiguration; // Abstract JSR-107 specific @Configuration class providing common structure for enabling JSR-107 annotation-driven cache management capability.\npublic interface JCacheConfigurer extends org.springframework.cache.annotation.CachingConfigurer; // Extension of CachingConfigurer for the JSR-107 implementation.\n@Deprecated(since=\"6.0\") public class JCacheConfigurerSupport extends org.springframework.cache.annotation.CachingConfigurerSupport implements JCacheConfigurer;\n@Configuration(proxyBeanMethods=false) @Role(2) public class ProxyJCacheConfiguration extends AbstractJCacheConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable proxy-based annotation-driven JSR-107 cache management.\n", "des": "Support package for declarative JSR-107 caching configuration."}
{"index": 2150, "repo": "wicket-core-10.0.0-M1", "code": "Package: resource\n\nClasses and Interfaces: \npublic abstract class BlobImageResource extends DynamicImageResource; // An ImageResource subclass for dynamic images that come from database BLOB fields.\npublic class BufferedDynamicImageResource extends DynamicImageResource; // A DynamicImageResource subclass that holds a BufferedImage generated by code elsewhere.\npublic class DefaultButtonImageResource extends RenderedDynamicImageResource; // Automatically generates a basic button image.\npublic class DefaultButtonImageResourceFactory extends Object implements IResourceFactory; // A factory which creates default button images.\npublic final class LocalizedImageResource extends Object implements org.apache.wicket.util.io.IClusterable; // THIS CLASS IS INTENDED FOR INTERNAL USE IN IMPLEMENTING LOCALE SENSITIVE COMPONENTS THAT USE IMAGE RESOURCES AND SHOULD NOT BE USED DIRECTLY BY END-USERS.\npublic abstract class RenderedDynamicImageResource extends DynamicImageResource; // A DynamicImageResource subclass that allows easy rendering of regeneratable (unbuffered) dynamic images.\n", "des": "Resource support for image components."}
{"index": 3060, "repo": "spring-ws-core-4.0.5", "code": "Package: pox\n\nSub Packages: \npackage pox.dom; // Contains an implementation of the POX interfaces that is based on DOM.\n\nClasses and Interfaces: \npublic interface PoxMessage extends WebServiceMessage; // Defines the contract for Plain Old XML messages.\npublic abstract class PoxMessageException extends WebServiceMessageException; // Specific subclass of WebServiceMessageException for Plain Old XML messages.\n", "des": "Provides the Plain Old XML (POX) functionality of the Spring Web Services framework."}
{"index": 895, "repo": "commons-jcs3-core-3.1", "code": "Package: remote\n\nClasses and Interfaces: \nClass AbstractRemoteAuxiliaryCache<K,V>; // Abstract base for remote caches.\nClass AbstractRemoteCacheListener<K,V>; // Shared listener base.\nClass AbstractRemoteCacheNoWaitFacade<K,V>; // An abstract base for the No Wait Facade.\nClass CommonRemoteCacheAttributes; // Attributes common to remote cache client and server.\nClass RemoteCache<K,V>; // Client proxy for an RMI remote cache.\nClass RemoteCacheAttributes; // These objects are used to configure the remote cache client.\nClass RemoteCacheFactory; // The RemoteCacheFactory creates remote caches for the cache hub.\nClass RemoteCacheFailoverRunner<K,V>; // Functionality moved to RemoteCacheNoWaitFacade\nClass RemoteCacheListener<K,V>; // Registered with RemoteCache server.\nClass RemoteCacheManager; // An instance of RemoteCacheManager corresponds to one remote connection of a specific host and port.\nClass RemoteCacheMonitor; // Used to monitor and repair any failed connection for the remote cache service.\nClass RemoteCacheNoWait<K,V>; // The RemoteCacheNoWait wraps the RemoteCacheClient.\nClass RemoteCacheNoWaitFacade<K,V>; // Used to provide access to multiple services under nowait protection.\nClass RemoteLocation; // Location of the RMI registry.\nClass RemoteUtils; // This class provides some basic utilities for doing things such as starting the registry properly.\n", "des": "Root package for the remote auxiliary cache."}
{"index": 3586, "repo": "lucene-test-framework-9.7.0", "code": "Package: cranky\n\nClasses and Interfaces: \nClass CrankyCodec; // Codec for testing that throws random IOExceptions\n", "des": "Codec for testing that throws random IOExceptions"}
{"index": 389, "repo": "commons-dbcp2-2.9.0", "code": "Package: managed\n\nClasses and Interfaces: \nInterface TransactionContextListener; // A listener for transaction completion events.\nInterface XAConnectionFactory; // XAConnectionFactory is an extension of ConnectionFactory used to create connections in a transaction managed environment.\nClass BasicManagedDataSource; // BasicManagedDataSource is an extension of BasicDataSource which creates ManagedConnections.\nClass DataSourceXAConnectionFactory; // An implementation of XAConnectionFactory which uses a real XADataSource to obtain connections and XAResources.\nClass LocalXAConnectionFactory; // An implementation of XAConnectionFactory which manages non-XA connections in XA transactions.\nClass LocalXAConnectionFactory.LocalXAResource; // LocalXAResource is a fake XAResource for non-XA connections.\nClass ManagedConnection<C extends Connection>; // ManagedConnection is responsible for managing a database connection in a transactional environment (typically called \"Container Managed\").\nClass ManagedDataSource<C extends Connection>; // The ManagedDataSource is a PoolingDataSource that creates ManagedConnections.\nClass PoolableManagedConnection; // PoolableConnection that unregisters from TransactionRegistry on Connection real destroy.\nClass PoolableManagedConnectionFactory; // A PoolableConnectionFactory that creates PoolableManagedConnections.\nClass TransactionContext; // TransactionContext represents the association between a single XAConnectionFactory and a Transaction.\nClass TransactionRegistry; // TransactionRegistry tracks Connections and XAResources in a transacted environment for a single XAConnectionFactory.\n", "des": "This package provides support for pooling of ManagedConnections."}
{"index": 3514, "repo": "opennlp-tools-2.2.0", "code": "Package: formats\n\nSub Packages: \npackage formats.ad; // Experimental package related to the Arvores Deitadas corpus format.\npackage formats.brat; // Experimental package related to the corpus format used by the \"brat rapid annotation tool\" (brat).\npackage formats.conllu; // Experimental package related to the CoNNL-U format.\npackage formats.frenchtreebank; // Experimental package related to the French Treebank format.\npackage formats.irishsentencebank; // Experimental package related to the Irish Sentence Bank format.\npackage formats.leipzig; // Experimental package related to the Leipzig corpus format.\npackage formats.letsmt; // Experimental package related to the letsmt corpus format.\npackage formats.masc; // Experimental package related to the MASC corpus format.\npackage formats.muc; // Experimental package related to the MUC corpus format.\npackage formats.nkjp; // Experimental package related to the National corpus of Polish NKJP format.\npackage formats.ontonotes; // Experimental package related to the OntoNotes 4.0 format.\n\nClasses and Interfaces: \nInterface NameSampleDataStreamFactory.Parameters;\nInterface ParseSampleStreamFactory.Parameters;\nInterface WordTagSampleStreamFactory.Parameters;\nClass AbstractSampleStreamFactory<T,​P>; // Base class for sample stream factories.\nClass BioNLP2004NameSampleStream; // A sample stream for the training files of the BioNLP/NLPBA 2004 shared task.\nClass BioNLP2004NameSampleStreamFactory<P>;\nClass ChunkerSampleStreamFactory<P>; // Factory producing OpenNLP ChunkSampleStreams.\nClass Conll02NameSampleStream; // Parser for the Dutch and Spanish ner training files of the CONLL 2002 shared task.\nClass Conll02NameSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass Conll03NameSampleStream; // An import stream which can parse the CONLL03 data.\nClass Conll03NameSampleStreamFactory<P>;\nClass ConllXPOSSampleStream; // Parses the data from the CONLL 06 shared task into POS Samples.\n", "des": "Experimental package related to converting various corpora to OpenNLP Format."}
{"index": 1507, "repo": "spring-context-6.0.11", "code": "Package: context\n\nSub Packages: \npackage context.annotation; // Annotation support for the Application Context, including JSR-250 \"common\" annotations, component-scanning, and Java-based metadata for creating Spring-managed objects.\npackage context.aot; // AOT support for application contexts.\npackage context.config; // Support package for advanced application context configuration, with XML schema being the primary configuration format.\npackage context.event; // Support classes for application events, like standard context events.\npackage context.expression; // Expression parsing support within a Spring application context.\npackage context.i18n; // Abstraction for determining the current Locale, plus global holder that exposes a thread-bound Locale.\npackage context.index; // Support package for reading and managing the components index.\npackage context.support; // Classes supporting the org.springframework.context package, such as abstract base classes for ApplicationContext implementations and a MessageSource implementation.\npackage context.weaving; // Load-time weaving support for a Spring application context, building on Spring's LoadTimeWeaver abstraction.\n\nClasses and Interfaces: \npublic interface ApplicationContext extends org.springframework.core.env.EnvironmentCapable, org.springframework.beans.factory.ListableBeanFactory, org.springframework.beans.factory.HierarchicalBeanFactory, MessageSource, ApplicationEventPublisher, org.springframework.core.io.support.ResourcePatternResolver; // Central interface to provide configuration for an application.\npublic interface ApplicationContextAware extends org.springframework.beans.factory.Aware; // Interface to be implemented by any object that wishes to be notified of the ApplicationContext that it runs in.\npublic class ApplicationContextException extends org.springframework.beans.FatalBeanException; // Exception thrown during application context initialization.\n@FunctionalInterface public interface ApplicationContextInitializer<C extends ConfigurableApplicationContext>; // Callback interface for initializing a Spring ConfigurableApplicationContext prior to being refreshed.\npublic abstract class ApplicationEvent extends EventObject; // Class to be extended by all application events.\n@FunctionalInterface public interface ApplicationEventPublisher; // Interface that encapsulates event publication functionality.\n", "des": "This package builds on the beans package to add support for message sources and for the Observer design pattern, and the ability for application objects to obtain resources using a consistent API."}
{"index": 29, "repo": "commons-collections4-4.4", "code": "Package: set\n\nClasses and Interfaces: \nInterface CompositeSet.SetMutator<E>; // Define callbacks for mutation operations.\nClass AbstractNavigableSetDecorator<E>; // Decorates another NavigableSet to provide additional behaviour.\nClass AbstractSerializableSetDecorator<E>; // Serializable subclass of AbstractSetDecorator.\nClass AbstractSetDecorator<E>; // Decorates another Set to provide additional behaviour.\nClass AbstractSortedSetDecorator<E>; // Decorates another SortedSet to provide additional behaviour.\nClass CompositeSet<E>; // Decorates a set of other sets to provide a single unified view.\nClass ListOrderedSet<E>; // Decorates another Set to ensure that the order of addition is retained and used by the iterator.\nClass MapBackedSet<E,V>; // Decorates a Map to obtain Set behaviour.\nClass PredicatedNavigableSet<E>; // Decorates another NavigableSet to validate that all additions match a specified predicate.\nClass PredicatedSet<E>; // Decorates another Set to validate that all additions match a specified predicate.\nClass PredicatedSortedSet<E>; // Decorates another SortedSet to validate that all additions match a specified predicate.\nClass TransformedNavigableSet<E>; // Decorates another NavigableSet to transform objects that are added.\nClass TransformedSet<E>; // Decorates another Set to transform objects that are added.\nClass TransformedSortedSet<E>; // Decorates another SortedSet to transform objects that are added.\nClass UnmodifiableNavigableSet<E>; // Decorates another NavigableSet to ensure it can't be altered.\nClass UnmodifiableSet<E>; // Decorates another Set to ensure it can't be altered.\nClass UnmodifiableSortedSet<E>; // Decorates another SortedSet to ensure it can't be altered.\n", "des": "This package contains implementations of the Set, SortedSet and NavigableSet interfaces."}
{"index": 3068, "repo": "spring-ws-core-4.0.5", "code": "Package: annotation\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface Endpoint; // Indicates that an annotated class is an \"Endpoint\" (e.g.\n@Documented @Retention(RUNTIME) @Target({PACKAGE,TYPE,METHOD}) public @interface Namespace; // Sets up a namespace to be used in an @Endpoint method, class, or package.\n@Documented @Retention(RUNTIME) @Target({PACKAGE,TYPE,METHOD}) public @interface Namespaces; // Sets the namespaces to be used in an @Endpoint method, class, or package.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Repeatable(PayloadRoots.class) public @interface PayloadRoot; // Marks an endpoint method as the handler for an incoming request.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface PayloadRoots; // Marks an endpoint method as containing multiple PayloadRoots.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface RequestPayload; // Annotation which indicates that a method parameter should be bound to the request payload.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ResponsePayload; // Annotation which indicates that a method return value should be bound to the response payload.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface XPathParam; // Indicates that a method parameter should be bound to an XPath expression.\n", "des": "JDK 1.5+ annotations for Spring-WS endpoints."}
{"index": 2127, "repo": "spring-context-support-6.0.11", "code": "Package: caffeine\n\nClasses and Interfaces: \npublic class CaffeineCache extends org.springframework.cache.support.AbstractValueAdaptingCache; // Spring Cache adapter implementation on top of a Caffeine Cache instance.\npublic class CaffeineCacheManager extends Object implements org.springframework.cache.CacheManager; // CacheManager implementation that lazily builds CaffeineCache instances for each CaffeineCacheManager.getCache(java.lang.String) request.\n", "des": "Support classes for the open source cache in Caffeine library, allowing to set up Caffeine caches within Spring's cache abstraction."}
{"index": 140, "repo": "ignite-core-2.15.0", "code": "Package: gg\n\nClasses and Interfaces: \nClass GridProtocolHandler; // Custom stream protocol handler implementation.\nClass GridUrlConnection; // Connection implementation for custom protocol.\n", "des": "Grid stream protocol implementation."}
{"index": 2944, "repo": "spring-security-config-6.1.2", "code": "Package: http\n\nClasses and Interfaces: \npublic final class ChannelAttributeFactory extends Object; // Used as a factory bean to create config attribute values for the requires-channel attribute.\npublic class CorsBeanDefinitionParser extends Object; // Parser for the CorsFilter.\npublic class CsrfBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Parser for the CsrfFilter.\npublic class DefaultFilterChainValidator extends Object implements org.springframework.security.web.FilterChainProxy.FilterChainValidator;\npublic class FilterChainBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\npublic class FilterChainMapBeanDefinitionDecorator extends Object implements org.springframework.beans.factory.xml.BeanDefinitionDecorator; // Sets the filter chain Map for a FilterChainProxy bean declaration.\n@Deprecated public class FilterInvocationSecurityMetadataSourceParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\npublic class FormLoginBeanDefinitionParser extends Object;\npublic class HeadersBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Parser for the HeadersFilter.\npublic class HttpFirewallBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Injects the supplied HttpFirewall bean reference into the FilterChainProxy.\npublic class HttpSecurityBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Sets up HTTP security: filter stack and protected URLs.\npublic static final class HttpSecurityBeanDefinitionParser.ChildAuthenticationManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authentication.AuthenticationManager>;\npublic static final class HttpSecurityBeanDefinitionParser.FilterChainDecoratorFactory extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.web.FilterChainProxy.FilterChainDecorator>;\npublic static class HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor extends Object implements org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;\n", "des": "Parsing of the <http> namespace element."}
{"index": 3073, "repo": "spring-ws-core-4.0.5", "code": "Package: soap\n\nSub Packages: \npackage soap.addressing; // Provides WS-Addressing implementation classes.\npackage soap.client; // Contains classes for SOAP-specific client-side Spring-WS support.\npackage soap.saaj; // SOAP with Attachments API for Java (SAAJ) support for Spring-WS soap message infrastructure.\npackage soap.server; // Contains classes for SOAP-specific server-side Spring-WS support.\npackage soap.soap11; // Contains interfaces specific to SOAP 1.1.\npackage soap.soap12; // Contains interfaces specific to SOAP 1.2.\npackage soap.support; // Classes supporting the org.springframework.ws.soap package.\n\nClasses and Interfaces: \npublic abstract class AbstractSoapMessage extends AbstractMimeMessage implements SoapMessage; // Abstract implementation of the SoapMessage interface.\npublic interface SoapBody extends SoapElement; // Represents the Body element in a SOAP message.\npublic class SoapBodyException extends SoapMessageException; // Exception thrown when a SOAP body could not be accessed.\npublic interface SoapElement; // The base interface for all elements that are contained in a SOAP message.\npublic class SoapElementException extends SoapMessageException; // Exception thrown when a SOAP element could not be accessed.\npublic interface SoapEnvelope extends SoapElement; // Represents the Envelope element in a SOAP message.\npublic class SoapEnvelopeException extends SoapMessageException; // Exception thrown when a SOAP body could not be accessed.\npublic interface SoapFault extends SoapElement; // Represents the Fault element in the body of a SOAP message.\npublic interface SoapFaultDetail extends SoapElement; // Represents the detail element in a SOAP fault.\npublic interface SoapFaultDetailElement extends SoapElement; // Represents the content for an individual SOAP detail entry in a SOAP Message.\npublic class SoapFaultException extends SoapEnvelopeException; // Exception thrown when a SOAP fault could not be accessed.\npublic interface SoapHeader extends SoapElement; // Represents the Header element in a SOAP message.\npublic interface SoapHeaderElement extends SoapElement; // Represents the contents of an individual SOAP header in the a SOAP message.\npublic class SoapHeaderException extends SoapMessageException; // Exception thrown when a SOAP header could not be accessed.\n", "des": "Provides the SOAP functionality of the Spring Web Services framework."}
{"index": 1663, "repo": "jena-core-4.9.0", "code": "Package: impl\n\nClasses and Interfaces: \npublic class JenaParameters extends Object; // This class holds global, static, configuration parameters that affect the behaviour of the Jena API.\npublic class PrefixMappingImpl extends Object implements PrefixMapping; // An implementation of PrefixMapping.\n", "des": "This package provides \"standard\" implementations for the interfaces defined by .shared, notably an implementation of PrefixMapping."}
{"index": 3136, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: graph\n\nClasses and Interfaces: \nInterface AttributeNode<J>; // Hibernate extension to the JPA entity-graph AttributeNode contract.\nInterface Graph<J>; // A container for AttributeNodes.\nInterface GraphNode<J>; // Commonality between AttributeNode and Graph.\nInterface RootGraph<J>; // Hibernate extension to the JPA EntityGraph contract.\nInterface SubGraph<J>; // Hibernate extension to the JPA entity-graph Subgraph contract.\nClass EntityGraphs; // A collection of EntityGraph utilities.\nClass GraphParser; // Parser for string representations of JPA EntityGraph (RootGraph) and Subgraph (SubGraph), using a simple syntax defined by the `graph.g` Antlr grammar.\nEnum GraphSemantic; // JPA defines 2 distinct semantics for applying an EntityGraph.\nClass CannotBecomeEntityGraphException; // Indicates an illegal attempt to make a Graph become an EntityGraph via Graph.makeRootGraph(String, boolean).\nClass CannotContainSubGraphException; // Indicates an attempt was made to add a (key)? sub-graph to an attribute type that does not support (key)? sub-graphs.\nClass InvalidGraphException; // Thrown by GraphParser to indicate textual entity graph representation parsing errors.\n", "des": "Hibernate's (extended) support for JPA's entity graphs"}
{"index": 3038, "repo": "spring-web-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic interface AsyncHandlerMethodReturnValueHandler extends HandlerMethodReturnValueHandler; // A return value handler that supports async types.\npublic class CompositeUriComponentsContributor extends Object implements UriComponentsContributor; // A UriComponentsContributor containing a list of other contributors to delegate to and also encapsulating a specific ConversionService to use for formatting method argument values as Strings.\npublic interface HandlerMethodArgumentResolver; // Strategy interface for resolving method parameters into argument values in the context of a given request.\npublic class HandlerMethodArgumentResolverComposite extends Object implements HandlerMethodArgumentResolver; // Resolves method parameters by delegating to a list of registered HandlerMethodArgumentResolvers.\npublic interface HandlerMethodReturnValueHandler; // Strategy interface to handle the value returned from the invocation of a handler method.\npublic class HandlerMethodReturnValueHandlerComposite extends Object implements HandlerMethodReturnValueHandler; // Handles method return values by delegating to a list of registered HandlerMethodReturnValueHandlers.\npublic class InvocableHandlerMethod extends HandlerMethod; // Extension of HandlerMethod that invokes the underlying method with argument values resolved from the current HTTP request through a list of HandlerMethodArgumentResolver.\npublic class ModelAndViewContainer extends Object; // Records model and view related decisions made by HandlerMethodArgumentResolvers and HandlerMethodReturnValueHandlers during the course of invocation of a controller method.\npublic interface UriComponentsContributor; // Strategy for contributing to the building of a UriComponents by looking at a method parameter and an argument value and deciding what part of the target URL should be updated.\n", "des": "Generic support classes for handler method processing."}
{"index": 329, "repo": "kafka-clients-3.5.0", "code": "Package: auth\n\nClasses and Interfaces: \nInterface AuthenticateCallbackHandler;\nInterface AuthenticationContext; // An object representing contextual information from the authentication session.\nInterface KafkaPrincipalBuilder; // Pluggable principal builder interface which supports both SSL authentication through SslAuthenticationContext and SASL through SaslAuthenticationContext.\nInterface KafkaPrincipalSerde; // Serializer/Deserializer interface for KafkaPrincipal for the purpose of inter-broker forwarding.\nInterface Login; // Login interface for authentication.\nInterface SecurityProviderCreator; // An interface for generating security providers.\nInterface SslEngineFactory; // Plugin interface for allowing creation of SSLEngine object in a custom way.\nClass KafkaPrincipal; // Principals in Kafka are defined by a type and a name.\nClass PlaintextAuthenticationContext;\nClass SaslAuthenticationContext;\nClass SaslExtensions; // A simple immutable value object class holding customizable SASL extensions.\nClass SaslExtensionsCallback; // Optional callback used for SASL mechanisms if any extensions need to be set in the SASL exchange.\nClass SslAuthenticationContext;\nEnum SecurityProtocol;\n", "des": "Provides pluggable interfaces for implementing Kafka authentication mechanisms."}
{"index": 818, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: snowball\n\nSub Packages: \npackage snowball.ext; // Autogenerated snowball stemmer implementations.\n\nClasses and Interfaces: \nClass Among; // This is the rev 502 of the Snowball SVN trunk, now located at GitHub, but modified: made abstract and introduced abstract method stem to avoid expensive reflection in filter class.\nClass SnowballProgram; // This is the rev 502 of the Snowball SVN trunk, now located at GitHub, but modified: made abstract and introduced abstract method stem to avoid expensive reflection in filter class.\n", "des": "Snowball stemmer API"}
{"index": 15, "repo": "commons-collections4-4.4", "code": "Package: bag\n\nClasses and Interfaces: \nClass AbstractBagDecorator<E>; // Decorates another Bag to provide additional behaviour.\nClass AbstractMapBag<E>; // Abstract implementation of the Bag interface to simplify the creation of subclass implementations.\nClass AbstractMapBag.MutableInteger; // Mutable integer class for storing the data.\nClass AbstractSortedBagDecorator<E>; // Decorates another SortedBag to provide additional behaviour.\nClass CollectionBag<E>; // Decorates another Bag to comply with the Collection contract.\nClass CollectionSortedBag<E>; // Decorates another SortedBag to comply with the Collection contract.\nClass HashBag<E>; // Implements Bag, using a HashMap to provide the data storage.\nClass PredicatedBag<E>; // Decorates another Bag to validate that additions match a specified predicate.\nClass PredicatedSortedBag<E>; // Decorates another SortedBag to validate that additions match a specified predicate.\nClass SynchronizedBag<E>; // Decorates another Bag to synchronize its behaviour for a multi-threaded environment.\nClass SynchronizedSortedBag<E>; // Decorates another SortedBag to synchronize its behaviour for a multi-threaded environment.\nClass TransformedBag<E>; // Decorates another Bag to transform objects that are added.\nClass TransformedSortedBag<E>; // Decorates another SortedBag to transform objects that are added.\nClass TreeBag<E>; // Implements SortedBag, using a TreeMap to provide the data storage.\nClass UnmodifiableBag<E>; // Decorates another Bag to ensure it can't be altered.\nClass UnmodifiableSortedBag<E>; // Decorates another SortedBag to ensure it can't be altered.\n", "des": "This package contains implementations of the Bag and SortedBag interfaces."}
{"index": 1391, "repo": "spring-boot-actuator-3.1.1", "code": "Package: annotation\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Documented @EndpointExtension(filter=org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpointFilter.class) public @interface EndpointJmxExtension; // Identifies a type as being a JMX-specific extension of an @Endpoint.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Endpoint @FilteredEndpoint(org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpointFilter.class) public @interface JmxEndpoint; // Identifies a type as being an endpoint that is only exposed over JMX.\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpointDiscoverer.JmxEndpointDiscovererRuntimeHints.class) public class JmxEndpointDiscoverer extends EndpointDiscoverer<ExposableJmxEndpoint,JmxOperation> implements JmxEndpointsSupplier; // EndpointDiscoverer for JMX endpoints.\n", "des": "Annotation support for actuator JMX endpoints."}
{"index": 1981, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: session\n\nClasses and Interfaces: \n@FunctionalInterface public interface DefaultCookieSerializerCustomizer; // Callback interface that can be implemented by beans wishing to customize the DefaultCookieSerializer configuration.\n@ConfigurationProperties(prefix=\"spring.session.hazelcast\") public class HazelcastSessionProperties extends Object; // Configuration properties for Hazelcast backed Spring Session.\npublic class JdbcSessionDataSourceScriptDatabaseInitializer extends org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer; // DataSourceScriptDatabaseInitializer for the Spring Session JDBC database.\n@ConfigurationProperties(prefix=\"spring.session.jdbc\") public class JdbcSessionProperties extends Object; // Configuration properties for JDBC backed Spring Session.\n@ConfigurationProperties(prefix=\"spring.session.mongodb\") public class MongoSessionProperties extends Object; // Configuration properties for Mongo-backed Spring Session.\n@ConfigurationProperties(prefix=\"spring.session.redis\") public class RedisSessionProperties extends Object; // Configuration properties for Redis backed Spring Session.\npublic static enum RedisSessionProperties.ConfigureAction extends Enum<RedisSessionProperties.ConfigureAction>; // Strategies for configuring and validating Redis.\npublic static enum RedisSessionProperties.RepositoryType extends Enum<RedisSessionProperties.RepositoryType>; // Type of Redis session repository to auto-configure.\n@AutoConfiguration(after={DataSourceAutoConfiguration.class,HazelcastAutoConfiguration.class,JdbcTemplateAutoConfiguration.class,MongoDataAutoConfiguration.class,MongoReactiveDataAutoConfiguration.class,RedisAutoConfiguration.class,RedisReactiveAutoConfiguration.class,WebSessionIdResolverAutoConfiguration.class}, before={HttpHandlerAutoConfiguration.class,WebFluxAutoConfiguration.class}) @ConditionalOnClass(org.springframework.session.Session.class) @ConditionalOnWebApplication @EnableConfigurationProperties({ServerProperties.class,SessionProperties.class,WebFluxProperties.class}) public class SessionAutoConfiguration extends Object; // Auto-configuration for Spring Session.\n@ConfigurationProperties(prefix=\"spring.session\") public class SessionProperties extends Object; // Configuration properties for Spring Session.\npublic static class SessionProperties.Servlet extends Object; // Servlet-related properties.\n", "des": "Auto-configuration for Spring Session."}
{"index": 1252, "repo": "spring-core-6.0.11", "code": "Package: generate\n\nClasses and Interfaces: \npublic final class AccessControl extends Object; // Determine the access control of a Member or type signature.\npublic static enum AccessControl.Visibility extends Enum<AccessControl.Visibility>; // Access visibility types as determined by the modifiers on a Member or ResolvableType.\npublic final class ClassNameGenerator extends Object; // Generate unique class names based on a target ClassName and a feature name.\npublic class DefaultGenerationContext extends Object implements GenerationContext; // Default GenerationContext implementation.\npublic class DefaultMethodReference extends Object implements MethodReference; // Default MethodReference implementation based on a MethodSpec.\npublic class FileSystemGeneratedFiles extends Object implements GeneratedFiles; // GeneratedFiles implementation that stores generated files using a FileSystem.\npublic final class GeneratedClass extends Object; // A single generated class.\npublic class GeneratedClasses extends Object; // A managed collection of generated classes.\npublic interface GeneratedFiles; // Interface that can be used to add source, resource, or class files generated during ahead-of-time processing.\npublic static enum GeneratedFiles.Kind extends Enum<GeneratedFiles.Kind>; // The various kinds of generated files that are supported.\npublic final class GeneratedMethod extends Object; // A generated method.\npublic class GeneratedMethods extends Object; // A managed collection of generated methods.\npublic final class GeneratedTypeReference extends AbstractTypeReference; // A TypeReference for a generated type.\npublic interface GenerationContext; // Central interface used for code generation.\npublic class InMemoryGeneratedFiles extends Object implements GeneratedFiles; // GeneratedFiles implementation that keeps generated files in-memory.\npublic interface MethodReference; // A reference to a method with convenient code generation for referencing, or invoking it.\npublic static interface MethodReference.ArgumentCodeGenerator; // Strategy for generating code for arguments based on their type.\n", "des": "Support classes for components that contribute generated code equivalent to a runtime behavior."}
{"index": 2444, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: jms\n\nClasses and Interfaces: \n@AutoConfiguration(after={org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration.class,org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration.class}) @ConditionalOnClass(jakarta.jms.ConnectionFactory.class) @ConditionalOnBean(jakarta.jms.ConnectionFactory.class) @ConditionalOnEnabledHealthIndicator(\"jms\") public class JmsHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.jms.JmsHealthIndicator,jakarta.jms.ConnectionFactory>; // Auto-configuration for JmsHealthIndicator.\n", "des": "Auto-configuration for actuator JMS concerns."}
{"index": 2765, "repo": "spring-beans-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class ArgumentConvertingMethodInvoker extends org.springframework.util.MethodInvoker; // Subclass of MethodInvoker that tries to convert the given arguments for the actual target method via a TypeConverter.\npublic class MutableSortDefinition extends Object implements SortDefinition, Serializable; // Mutable implementation of the SortDefinition interface.\npublic class PagedListHolder<E> extends Object implements Serializable; // PagedListHolder is a simple state holder for handling lists of objects, separating them into pages.\npublic class PropertyComparator<T> extends Object implements Comparator<T>; // PropertyComparator performs a comparison of two beans, evaluating the specified bean property via a BeanWrapper.\npublic class ResourceEditorRegistrar extends Object implements PropertyEditorRegistrar; // PropertyEditorRegistrar implementation that populates a given PropertyEditorRegistry (typically a BeanWrapper used for bean creation within an org.springframework.context.ApplicationContext) with resource editors.\npublic interface SortDefinition; // Definition for sorting bean instances by a property.\n", "des": "Classes supporting the org.springframework.beans package, such as utility classes for sorting and holding lists of beans."}
{"index": 3832, "repo": "lucene-highlighter-9.7.0", "code": "Package: vectorhighlight\n\nClasses and Interfaces: \nInterface BoundaryScanner; // Finds fragment boundaries: pluggable into BaseFragmentsBuilder\nInterface FragListBuilder; // FragListBuilder is an interface for FieldFragList builder classes.\nInterface FragmentsBuilder; // FragmentsBuilder is an interface for fragments (snippets) builder classes.\nClass BaseFragListBuilder; // A abstract implementation of FragListBuilder.\nClass BaseFragmentsBuilder; // Base FragmentsBuilder implementation that supports colored pre/post tags and multivalued fields.\nClass BreakIteratorBoundaryScanner; // A BoundaryScanner implementation that uses BreakIterator to find boundaries in the text.\nClass FastVectorHighlighter; // Another highlighter implementation.\nClass FieldFragList; // FieldFragList has a list of \"frag info\" that is used by FragmentsBuilder class to create fragments (snippets).\nClass FieldFragList.WeightedFragInfo; // List of term offsets + weight for a frag info\nClass FieldFragList.WeightedFragInfo.SubInfo; // Represents the list of term offsets for some text\nClass FieldPhraseList; // FieldPhraseList has a list of WeightedPhraseInfo that is used by FragListBuilder to create a FieldFragList object.\nClass FieldPhraseList.WeightedPhraseInfo; // Represents the list of term offsets and boost for some text\nClass FieldPhraseList.WeightedPhraseInfo.Toffs; // Term offsets (start + end)\nClass FieldQuery; // FieldQuery breaks down query object into terms/phrases and keeps them in a QueryPhraseMap structure.\nClass FieldQuery.QueryPhraseMap; // Internal structure of a query for highlighting: represents a nested query structure\nClass FieldTermStack; // FieldTermStack is a stack that keeps query terms in the specified field of the document to be highlighted.\nClass FieldTermStack.TermInfo; // Single term with its position/offsets in the document and IDF weight.\nClass ScoreOrderFragmentsBuilder; // An implementation of FragmentsBuilder that outputs score-order fragments.\nClass ScoreOrderFragmentsBuilder.ScoreComparator; // Comparator for FieldFragList.WeightedFragInfo by boost, breaking ties by offset.\nClass SimpleBoundaryScanner; // Simple boundary scanner implementation that divides fragments based on a set of separator characters.\n", "des": "Another highlighter implementation based on term vectors."}
{"index": 2518, "repo": "spring-security-core-6.1.2", "code": "Package: hierarchicalroles\n\nClasses and Interfaces: \npublic class CycleInRoleHierarchyException extends RuntimeException; // Exception that is thrown because of a cycle in the role hierarchy definition\npublic final class NullRoleHierarchy extends Object implements RoleHierarchy;\npublic interface RoleHierarchy; // The simple interface of a role hierarchy.\npublic class RoleHierarchyAuthoritiesMapper extends Object implements GrantedAuthoritiesMapper;\npublic class RoleHierarchyImpl extends Object implements RoleHierarchy; // This class defines a role hierarchy for use with various access checking components.\npublic final class RoleHierarchyUtils extends Object; // Utility methods for RoleHierarchy.\n", "des": "Role hierarchy implementation."}
{"index": 1134, "repo": "hadoop-yarn-api-3.3.6", "code": "Package: ams\n\nClasses and Interfaces: \nInterface ApplicationMasterServiceContext; // This is a marker interface for a context object that is injected into the ApplicationMasterService processor.\nInterface ApplicationMasterServiceProcessor; // Interface to abstract out the the actual processing logic of the Application Master Service.\nClass ApplicationMasterServiceUtils; // Utility methods to be used by ApplicationMasterServiceProcessor.\n", "des": "Public api for Application Master Service interceptors."}
{"index": 3203, "repo": "tomcat-api-10.1", "code": "Package: mime\n\nClasses and Interfaces: \nClass MimeUtility; // Utility class to decode MIME texts.\nClass RFC2231Utility; // Utility class to decode/encode character set on HTTP Header fields based on RFC 2231.\n", "des": "MIME decoder implementation, imported and retailed from Apache Geronimo."}
{"index": 3717, "repo": "solr-core-9.3.0", "code": "Package: circuitbreaker\n\nClasses and Interfaces: \nClass CircuitBreaker; // Default class to define circuit breakers for Solr.\nClass CircuitBreaker.CircuitBreakerConfig;\nClass CircuitBreakerManager; // Manages all registered circuit breaker instances.\nClass CPUCircuitBreaker; // Tracks current CPU usage and triggers if the specified threshold is breached.\nClass MemoryCircuitBreaker; // Tracks the current JVM heap usage and triggers if it exceeds the defined percentage of the maximum heap size allocated to the JVM.\n", "des": "Support for triggering exceptions on excessive resource usage"}
{"index": 2249, "repo": "spring-data-keyvalue-3.1.2", "code": "Package: query\n\nClasses and Interfaces: \npublic class CachingKeyValuePartTreeQuery extends KeyValuePartTreeQuery; // KeyValuePartTreeQuery implementation deriving queries from PartTree using a predefined AbstractQueryCreator that caches the once created query.\npublic class KeyValuePartTreeQuery extends Object implements RepositoryQuery; // RepositoryQuery implementation deriving queries from PartTree using a predefined AbstractQueryCreator.\npublic static interface KeyValuePartTreeQuery.QueryCreatorFactory<T extends AbstractQueryCreator<?,?>>; // Factory class for obtaining AbstractQueryCreator instances for a given PartTree and ParameterAccessor.\npublic class SpelQueryCreator extends AbstractQueryCreator<KeyValueQuery<SpelExpression>,String>; // AbstractQueryCreator to create SpelExpression based KeyValueQuerys.\n", "des": "Query derivation mechanism for key/value specific repositories providing a generic SpEL based implementation."}
{"index": 1317, "repo": "groovy-all-4.0.13", "code": "Package: xml\n\nSub Packages: \npackage xml.dom; // Groovy XML Dom processing classes.\npackage xml.slurpersupport; // Helper classes for XmlSlurper.\npackage xml.streamingmarkupsupport; // XmlBuilder related classes to support streaming XML.\n\nClasses and Interfaces: \npublic class DOMBuilder extends BuilderSupport; // A helper class for creating a W3C DOM tree\npublic class FactorySupport extends Object; // Support class for creating XML Factories\npublic class MarkupBuilder extends BuilderSupport; // A helper class for creating XML or HTML markup.\npublic static enum MarkupBuilder.CharFilter extends Enum<MarkupBuilder.CharFilter>;\npublic static class MarkupBuilder.DefaultXmlEscapingFunction extends Object implements Function<Character,Optional<String>>;\npublic class MarkupBuilderHelper extends Object; // A helper class for MarkupBuilder.\npublic class Namespace extends Object; // A simple helper class which acts as a factory of QName instances.\npublic class NamespaceBuilder extends Object; // A helper class for creating namespaces for GroovyMarkup\npublic class NamespaceBuilderSupport extends BuilderSupport; // A helper class for creating namespaced GroovyMarkup\npublic class SAXBuilder extends BuilderSupport; // A builder for generating W3C SAX events.\npublic class XmlNodePrinter extends Object; // Prints a groovy.util.Node (as used with XmlParser) including all children in XML format.\nprotected static class XmlNodePrinter.NamespaceContext extends Object;\npublic class XmlParser extends Object implements ContentHandler; // A helper class for parsing XML into a tree of Node instances for a simple way of processing XML.\npublic class XmlSlurper extends DefaultHandler; // Parse XML into a document tree that may be traversed similar to XPath expressions.\npublic class XmlUtil extends Object; // Used for pretty printing XML content and other XML related utilities.\n", "des": "Groovy markup builder classes for working with SAX and W3C DOM and Groovy markup."}
{"index": 2757, "repo": "spring-beans-6.0.11", "code": "Package: config\n\nClasses and Interfaces: \npublic abstract class AbstractFactoryBean<T> extends Object implements FactoryBean<T>, BeanClassLoaderAware, BeanFactoryAware, InitializingBean, DisposableBean; // Simple template superclass for FactoryBean implementations that creates a singleton or a prototype object, depending on a flag.\npublic interface AutowireCapableBeanFactory extends BeanFactory; // Extension of the BeanFactory interface to be implemented by bean factories that are capable of autowiring, provided that they want to expose this functionality for existing bean instances.\npublic final class AutowiredPropertyMarker extends Object implements Serializable; // Simple marker class for an individually autowired property value, to be added to BeanDefinition.getPropertyValues() for a specific bean property.\npublic interface BeanDefinition extends org.springframework.core.AttributeAccessor, BeanMetadataElement; // A BeanDefinition describes a bean instance, which has property values, constructor argument values, and further information supplied by concrete implementations.\n@FunctionalInterface public interface BeanDefinitionCustomizer; // Callback for customizing a given bean definition.\npublic class BeanDefinitionHolder extends Object implements BeanMetadataElement; // Holder for a BeanDefinition with name and aliases.\npublic class BeanDefinitionVisitor extends Object; // Visitor class for traversing BeanDefinition objects, in particular the property values and constructor argument values contained in them, resolving bean metadata values.\npublic class BeanExpressionContext extends Object; // Context object for evaluating an expression within a bean definition.\npublic interface BeanExpressionResolver; // Strategy interface for resolving a value by evaluating it as an expression, if applicable.\n@FunctionalInterface public interface BeanFactoryPostProcessor; // Factory hook that allows for custom modification of an application context's bean definitions, adapting the bean property values of the context's underlying bean factory.\npublic interface BeanPostProcessor; // Factory hook that allows for custom modification of new bean instances — for example, checking for marker interfaces or wrapping beans with proxies.\npublic interface BeanReference extends BeanMetadataElement; // Interface that exposes a reference to a bean name in an abstract fashion.\npublic interface ConfigurableBeanFactory extends HierarchicalBeanFactory, SingletonBeanRegistry; // Configuration interface to be implemented by most bean factories.\npublic interface ConfigurableListableBeanFactory extends ListableBeanFactory, AutowireCapableBeanFactory, ConfigurableBeanFactory; // Configuration interface to be implemented by most listable bean factories.\n", "des": "SPI interfaces and configuration-related convenience classes for bean factories."}
{"index": 3001, "repo": "spring-web-6.0.11", "code": "Package: json\n\nClasses and Interfaces: \npublic abstract class AbstractJackson2Decoder extends Jackson2CodecSupport implements HttpMessageDecoder<Object>; // Abstract base class for Jackson 2.x decoding, leveraging non-blocking parsing.\npublic abstract class AbstractJackson2Encoder extends Jackson2CodecSupport implements HttpMessageEncoder<Object>; // Base class providing support methods for Jackson 2.x encoding.\npublic abstract class Jackson2CodecSupport extends Object; // Base class providing support methods for Jackson 2.x encoding and decoding.\npublic class Jackson2JsonDecoder extends AbstractJackson2Decoder; // Decode a byte stream into JSON and convert to Object's with Jackson 2.x, leveraging non-blocking parsing.\npublic class Jackson2JsonEncoder extends AbstractJackson2Encoder; // Encode from an Object stream to a byte stream of JSON objects using Jackson 2.x.\npublic class Jackson2SmileDecoder extends AbstractJackson2Decoder; // Decode a byte stream into Smile and convert to Object's with Jackson 2.x, leveraging non-blocking parsing.\npublic class Jackson2SmileEncoder extends AbstractJackson2Encoder; // Encode from an Object stream to a byte stream of Smile objects using Jackson 2.x.\npublic class KotlinSerializationJsonDecoder extends KotlinSerializationStringDecoder<kotlinx.serialization.json.Json>; // Decode a byte stream into JSON and convert to Object's with kotlinx.serialization.\npublic class KotlinSerializationJsonEncoder extends KotlinSerializationStringEncoder<kotlinx.serialization.json.Json>; // Encode from an Object stream to a byte stream of JSON objects using kotlinx.serialization.\n", "des": "JSON encoder and decoder support."}
{"index": 229, "repo": "nutch-2.4", "code": "Package: model\n\nClasses and Interfaces: \nClass NutchConfig;\nClass NutchInstance;\nClass SeedList;\nClass SeedUrl;\n", "des": "Contains model classes for Web UI"}
{"index": 3194, "repo": "tomcat-api-10.1", "code": "Package: web\n\nClasses and Interfaces: \nInterface Injectable;\nInterface NamingResources; // Defines an interface for the object that is added to the representation of a JNDI resource in web.xml to enable it to also be the implementation of that JNDI resource.\nClass ApplicationParameter; // Representation of a context initialization parameter that is configured in the server configuration file, rather than the application deployment descriptor.\nClass Constants;\nClass ContextEjb; // Representation of an EJB resource reference for a web application, as represented in a <ejb-ref> element in the deployment descriptor.\nClass ContextEnvironment; // Representation of an application environment entry, as represented in an <env-entry> element in the deployment descriptor.\nClass ContextHandler; // Representation of a handler reference for a web service, as represented in a <handler> element in the deployment descriptor.\nClass ContextLocalEjb; // Representation of a local EJB resource reference for a web application, as represented in a <ejb-local-ref> element in the deployment descriptor.\nClass ContextResource; // Representation of a resource reference for a web application, as represented in a <resource-ref> element in the deployment descriptor.\nClass ContextResourceEnvRef; // Representation of an application resource reference, as represented in an <res-env-refy> element in the deployment descriptor.\nClass ContextResourceLink; // Representation of a resource link for a web application, as represented in a <ResourceLink> element in the server configuration file.\nClass ContextService; // Representation of a web service reference for a web application, as represented in a <service-ref> element in the deployment descriptor.\nClass ContextTransaction; // Representation of an application resource reference, as represented in an <res-env-refy> element in the deployment descriptor.\nClass ErrorPage; // Representation of an error page element for a web application, as represented in a <error-page> element in the deployment descriptor.\nClass FilterDef; // Representation of a filter definition for a web application, as represented in a <filter> element in the deployment descriptor.\nClass FilterMap; // Representation of a filter mapping for a web application, as represented in a <filter-mapping> element in the deployment descriptor.\nClass FragmentJarScannerCallback; // Callback handling a web-fragment.xml descriptor.\nClass InjectionTarget;\n", "des": "This package contains Java objects that represent complex data structures from the web application deployment descriptor file (web.xml)."}
{"index": 2710, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: amqp\n\nSub Packages: \npackage amqp.builder; // Builders for AMQP item reader and writer.\n\nClasses and Interfaces: \npublic class AmqpItemReader<T> extends Object implements ItemReader<T>; // AMQP ItemReader implementation using an AmqpTemplate to receive and/or convert messages.\npublic class AmqpItemWriter<T> extends Object implements ItemWriter<T>; // AMQP ItemWriter implementation using an AmqpTemplate to send messages.\n", "des": "AMQP related batch components."}
{"index": 712, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: mail\n\nClasses and Interfaces: \nClass ImapIdleChannelAdapterSpec; // A MessageProducerSpec for a ImapIdleChannelAdapter.\nClass ImapMailInboundChannelAdapterSpec; // A MailInboundChannelAdapterSpec for IMAP.\nClass Mail; // The factory for Spring Integration Mail components.\nClass MailHeadersBuilder; // The Mail specific MapBuilder implementation.\nClass MailInboundChannelAdapterSpec<S extends MailInboundChannelAdapterSpec<S,R>,R extends org.springframework.integration.mail.AbstractMailReceiver>; // A MessageSourceSpec for a MailReceivingMessageSource.\nClass MailSendingMessageHandlerSpec;\nClass Pop3MailInboundChannelAdapterSpec; // A MailInboundChannelAdapterSpec for POP3.\n", "des": "Provides Mail Components support for Spring Integration Java DSL."}
{"index": 3006, "repo": "spring-web-6.0.11", "code": "Package: converter\n\nSub Packages: \npackage converter.cbor; // Provides an HttpMessageConverter for the CBOR data format.\npackage converter.feed; // Provides HttpMessageConverter implementations for handling Atom and RSS feeds.\npackage converter.json; // Provides HttpMessageConverter implementations for handling JSON.\npackage converter.protobuf; // Provides an HttpMessageConverter implementation for handling Google Protocol Buffers.\npackage converter.smile; // Provides an HttpMessageConverter for the Smile data format (\"binary JSON\").\npackage converter.support; // Provides a comprehensive HttpMessageConverter variant for form handling.\npackage converter.xml; // Provides HttpMessageConverter implementations for handling XML.\n\nClasses and Interfaces: \npublic abstract class AbstractGenericHttpMessageConverter<T> extends AbstractHttpMessageConverter<T> implements GenericHttpMessageConverter<T>; // Abstract base class for most GenericHttpMessageConverter implementations.\npublic abstract class AbstractHttpMessageConverter<T> extends Object implements HttpMessageConverter<T>; // Abstract base class for most HttpMessageConverter implementations.\npublic abstract class AbstractKotlinSerializationHttpMessageConverter<T extends kotlinx.serialization.SerialFormat> extends AbstractGenericHttpMessageConverter<Object>; // Abstract base class for HttpMessageConverter implementations that use Kotlin serialization.\npublic class BufferedImageHttpMessageConverter extends Object implements HttpMessageConverter<BufferedImage>; // Implementation of HttpMessageConverter that can read and write BufferedImages.\npublic class ByteArrayHttpMessageConverter extends AbstractHttpMessageConverter<byte[]>; // Implementation of HttpMessageConverter that can read and write byte arrays.\npublic class FormHttpMessageConverter extends Object implements HttpMessageConverter<org.springframework.util.MultiValueMap<String,?>>; // Implementation of HttpMessageConverter to read and write 'normal' HTML forms and also to write (but not read) multipart data (e.g.\npublic interface GenericHttpMessageConverter<T> extends HttpMessageConverter<T>; // A specialization of HttpMessageConverter that can convert an HTTP request into a target object of a specified generic type and a source object of a specified generic type into an HTTP response.\npublic class HttpMessageConversionException extends org.springframework.core.NestedRuntimeException; // Thrown by HttpMessageConverter implementations when a conversion attempt fails.\n", "des": "Provides an HttpMessageConverter abstraction to convert between Java objects and HTTP input/output messages."}
{"index": 3031, "repo": "spring-web-6.0.11", "code": "Package: reactive\n\nClasses and Interfaces: \npublic interface CorsConfigurationSource; // Interface to be implemented by classes (usually HTTP request handlers) that provides a CorsConfiguration instance based on the provided reactive request.\npublic interface CorsProcessor; // A strategy to apply CORS validation checks and updates to a ServerWebExchange, either rejecting through the response or adding CORS related headers, based on a pre-selected CorsConfiguration.\npublic abstract class CorsUtils extends Object; // Utility class for CORS reactive request handling based on the CORS W3C recommendation.\npublic class CorsWebFilter extends Object implements WebFilter; // WebFilter that handles CORS preflight requests and intercepts CORS simple and actual requests thanks to a CorsProcessor implementation (DefaultCorsProcessor by default) in order to add the relevant CORS response headers (like Access-Control-Allow-Origin) using the provided CorsConfigurationSource (for example an UrlBasedCorsConfigurationSource instance.\npublic class DefaultCorsProcessor extends Object implements CorsProcessor; // The default implementation of CorsProcessor, as defined by the CORS W3C recommendation.\npublic interface PreFlightRequestHandler; // Handler for CORS pre-flight requests.\npublic class PreFlightRequestWebFilter extends Object implements WebFilter; // WebFilter that handles pre-flight requests through a PreFlightRequestHandler and bypasses the rest of the chain.\npublic class UrlBasedCorsConfigurationSource extends Object implements CorsConfigurationSource; // CorsConfigurationSource that uses URL patterns to select the CorsConfiguration for a request.\n", "des": "Reactive support for CORS (Cross-Origin Resource Sharing), based on a common CorsProcessor strategy."}
{"index": 3504, "repo": "poi-5.2.3", "code": "Package: format\n\nClasses and Interfaces: \nClass CellDateFormatter; // Formats a date value.\nClass CellElapsedFormatter; // This class implements printing out an elapsed time format.\nClass CellFormat; // Format a value according to the standard Excel behavior.\nClass CellFormatCondition; // This object represents a condition in a cell format.\nClass CellFormatPart; // Objects of this class represent a single part of a cell format expression.\nClass CellFormatResult; // This object contains the result of applying a cell format or cell format part to a value.\nClass CellFormatter; // This is the abstract supertype for the various cell formatters.\nClass CellGeneralFormatter; // A formatter for the default \"General\" cell format.\nClass CellNumberFormatter; // This class implements printing out a value using a number format.\nClass CellNumberPartHandler; // Internal helper class for CellNumberFormatter\nClass CellNumberStringMod; // Internal helper class for CellNumberFormatter This class represents a single modification to a result string.\nClass CellTextFormatter; // This class implements printing out text.\nClass SimpleFraction;\nEnum CellFormatType; // The different kinds of formats that the formatter understands.\n", "des": "This package contains classes that implement cell formatting"}
{"index": 2633, "repo": "shiro-web-2.0.0-alpha-2", "code": "Package: support\n\nClasses and Interfaces: \npublic class DefaultWebSubjectContext extends org.apache.shiro.subject.support.DefaultSubjectContext implements WebSubjectContext; // Default WebSubjectContext implementation that provides for additional storage and retrieval of a ServletRequest and ServletResponse.\npublic class WebDelegatingSubject extends org.apache.shiro.subject.support.DelegatingSubject implements WebSubject; // Default WebSubject implementation that additional ensures the ability to retain a servlet request/response pair to be used by internal shiro components as necessary during the request execution.\n", "des": "Supporting implementations of org.apache.shiro.web.subject package interfaces."}
{"index": 3545, "repo": "opennlp-tools-2.2.0", "code": "Package: tokenize\n\nClasses and Interfaces: \nInterface Detokenizer; // A Detokenizer merges tokens back to their detokenized representation.\nInterface TokenContextGenerator; // Interface for context generators required for TokenizerME.\nInterface Tokenizer; // The interface for tokenizers, which segment a string into its tokens.\nInterface TokenizerEvaluationMonitor; // A marker interface for evaluating tokenizers.\nClass DefaultTokenContextGenerator; // A default TokenContextGenerator which produces events for maxent decisions for tokenization.\nClass DetokenizationDictionary;\nClass DetokenizerEvaluator; // The DetokenizerEvaluator measures the performance of the given Detokenizer with the provided reference samples.\nClass DictionaryDetokenizer; // A rule based detokenizer.\nClass SimpleTokenizer; // A basic Tokenizer implementation which performs tokenization using character classes.\nClass TokenizerCrossValidator; // A cross validator for tokenizers.\nClass TokenizerEvaluator; // The TokenizerEvaluator measures the performance of the given Tokenizer with the provided reference samples.\nClass TokenizerFactory; // The factory that provides Tokenizer default implementation and resources.\nClass TokenizerME; // A Tokenizer for converting raw text into separated tokens.\nClass TokenizerModel; // The TokenizerModel is the model used by a learnable Tokenizer.\nClass TokenizerStream; // The TokenizerStream uses a Tokenizer to tokenize the input string and output samples.\nClass TokenSample; // A TokenSample is text with token spans.\nClass TokenSampleStream; // This class is a stream filter which reads in string encoded samples and creates samples out of them.\nClass TokSpanEventStream; // This class reads the samples via an Iterator and converts the samples into events which can be used by the maxent library for training.\nClass WhitespaceTokenizer; // A basic Tokenizer implementation which performs tokenization using white spaces.\nClass WhitespaceTokenStream; // This stream formats ObjectStream of samples into whitespace separated token strings.\nClass WordpieceTokenizer; // A Tokenizer implementation which performs tokenization using word pieces.\nEnum DetokenizationDictionary.Operation;\nEnum Detokenizer.DetokenizationOperation; // This enum contains an operation for every token to merge the tokens together to their detokenized form.\n", "des": "Contains classes related to finding token or words in a string."}
{"index": 3020, "repo": "spring-web-6.0.11", "code": "Package: bind\n\nSub Packages: \npackage bind.annotation; // Annotations for binding requests to controllers and handler methods as well as for binding request parameters to method arguments.\npackage bind.support; // Support classes for web data binding.\n\nClasses and Interfaces: \npublic class EscapedErrors extends Object implements org.springframework.validation.Errors; // Errors wrapper that adds automatic HTML escaping to the wrapped instance, for convenient usage in HTML views.\npublic class MethodArgumentNotValidException extends org.springframework.validation.BindException implements ErrorResponse; // Exception to be thrown when validation on an argument annotated with @Valid fails.\npublic class MissingMatrixVariableException extends MissingRequestValueException; // ServletRequestBindingException subclass that indicates that a matrix variable expected in the method parameters of an @RequestMapping method is not present among the matrix variables extracted from the URL.\npublic class MissingPathVariableException extends MissingRequestValueException; // ServletRequestBindingException subclass that indicates that a path variable expected in the method parameters of an @RequestMapping method is not present among the URI variables extracted from the URL.\npublic class MissingRequestCookieException extends MissingRequestValueException; // ServletRequestBindingException subclass that indicates that a request cookie expected in the method parameters of an @RequestMapping method is not present.\npublic class MissingRequestHeaderException extends MissingRequestValueException; // ServletRequestBindingException subclass that indicates that a request header expected in the method parameters of an @RequestMapping method is not present.\npublic class MissingRequestValueException extends ServletRequestBindingException; // Base class for ServletRequestBindingException exceptions that could not bind because the request value is required but is either missing or otherwise resolves to null after conversion.\npublic class MissingServletRequestParameterException extends MissingRequestValueException; // ServletRequestBindingException subclass that indicates a missing parameter.\npublic class ServletRequestBindingException extends ServletException implements ErrorResponse; // Fatal binding exception, thrown when we want to treat binding exceptions as unrecoverable.\npublic class ServletRequestDataBinder extends WebDataBinder; // Special DataBinder to perform data binding from servlet request parameters to JavaBeans, including support for multipart files.\npublic class ServletRequestParameterPropertyValues extends org.springframework.beans.MutablePropertyValues; // PropertyValues implementation created from parameters in a ServletRequest.\npublic abstract class ServletRequestUtils extends Object; // Parameter extraction methods, for an approach distinct from data binding, in which parameters of specific types are required.\n", "des": "Provides web-specific data binding functionality."}
{"index": 3606, "repo": "lucene-queries-9.7.0", "code": "Package: mlt\n\nClasses and Interfaces: \nClass MoreLikeThis; // Generate \"more like this\" similarity queries.\nClass MoreLikeThisQuery; // A simple wrapper for MoreLikeThis for use in scenarios where a Query object is required eg in custom QueryParser extensions.\n", "des": "Document similarity query generators."}
{"index": 2218, "repo": "spring-data-commons-3.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractEntityInformation<T,ID> extends Object implements EntityInformation<T,ID>; // Base class for implementations of EntityInformation.\npublic abstract class AbstractRepositoryMetadata extends Object implements RepositoryMetadata; // Base class for RepositoryMetadata implementations.\npublic class AnnotationRepositoryMetadata extends AbstractRepositoryMetadata; // RepositoryMetadata implementation inspecting the given repository interface for a RepositoryDefinition annotation.\npublic class DefaultCrudMethods extends Object implements CrudMethods; // Default implementation to discover CRUD methods based on the given RepositoryMetadata.\npublic class DefaultRepositoryMetadata extends AbstractRepositoryMetadata; // Default implementation of RepositoryMetadata.\npublic class DelegatingEntityInformation<T,ID> extends Object implements EntityInformation<T,ID>; // Useful base class to implement custom EntityInformations and delegate execution of standard methods from EntityInformation to a special implementation.\npublic class EventPublishingRepositoryProxyPostProcessor extends Object implements RepositoryProxyPostProcessor; // RepositoryProxyPostProcessor to register a MethodInterceptor to intercept CrudRepository.save(Object) and CrudRepository.delete(Object) methods and publish events potentially exposed via a method annotated with DomainEvents.\npublic class FragmentNotImplementedException extends RepositoryCreationException; // Exception thrown during repository creation or repository method invocation when invoking a repository method on a fragment without an implementation.\npublic class IncompleteRepositoryCompositionException extends RepositoryCreationException; // Exception thrown during repository creation when a the repository has custom methods that are not backed by a fragment or if no fragment could be found for a repository method invocation.\npublic class MethodInvocationValidator extends Object implements MethodInterceptor; // Interceptor enforcing required return value and method parameter constraints declared on repository query methods.\n@FunctionalInterface public interface MethodLookup; // Strategy interface providing predicates to resolve a method called on a composite to its implementation method.\npublic static final class MethodLookup.InvokedMethod extends Object; // Value object representing an invoked Method.\n@FunctionalInterface public static interface MethodLookup.MethodPredicate extends BiPredicate<MethodLookup.InvokedMethod,Method>; // A method predicate to be applied on the MethodLookup.InvokedMethod and method candidate.\npublic class PersistenceExceptionTranslationRepositoryProxyPostProcessor extends Object implements RepositoryProxyPostProcessor; // RepositoryProxyPostProcessor to register a PersistenceExceptionTranslationInterceptor on the repository proxy.\n", "des": "Base classes to implement repositories for various data stores."}
{"index": 788, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: it\n\nClasses and Interfaces: \nClass ItalianAnalyzer; // Analyzer for Italian.\nClass ItalianLightStemFilter; // A TokenFilter that applies ItalianLightStemmer to stem Italian words.\nClass ItalianLightStemFilterFactory; // Factory for ItalianLightStemFilter.\nClass ItalianLightStemmer; // Light Stemmer for Italian.\n", "des": "Analyzer for Italian."}
{"index": 515, "repo": "commons-vfs2-2.9.0", "code": "Package: provider\n\nSub Packages: \npackage provider.bzip2; // The BZIP2 File Provider\npackage provider.compressed; // The compressed file provider\npackage provider.ftp; // The FTP File Provider.\npackage provider.ftps; // The FTPS File Provider.\npackage provider.gzip; // The GZIP File Provider\npackage provider.hdfs; // The HDFS File Provider\npackage provider.http; // The HTTP File Provider\npackage provider.http4; // The HTTP4 File Provider\npackage provider.http4s; // The HTTP4S File Provider\npackage provider.http5; // The HTTP5 File Provider\npackage provider.http5s; // The HTTP5S File Provider\npackage provider.https; // The HTTPS File Provider\npackage provider.jar; // The Jar File Provider.\npackage provider.local; // The Local File Provider.\npackage provider.ram; // The RAM File Provider.\npackage provider.res; // The Resource File Provider\npackage provider.sftp; // The SFTP Provider.\npackage provider.tar; // The Tar File Provider.\npackage provider.temp; // The Temporary Filespace Provider.\npackage provider.url; // The Default File Provider, which wraps java.net.URL.\npackage provider.zip; // The Zip File Provider.\n\nClasses and Interfaces: \nInterface FileNameParser; // Provides methods to parse a file name into a FileName.\nInterface FileProvider; // A file provider.\nInterface FileReplicator; // Responsible for making local replicas of files.\nInterface LocalFileProvider; // A file provider which handles local files.\nInterface TemporaryFileStore; // Manages a repository of temporary local files.\nInterface VfsComponent; // This interface is used to manage the lifecycle of all VFS components.\nInterface VfsComponentContext; // Allows VFS components to access the services they need, such as the file replicator.\nClass AbstractFileName; // A default file name implementation.\nClass AbstractFileNameParser; // Provides methods to parse a file name into a FileName.\nClass AbstractFileObject<AFS extends AbstractFileSystem>; // A partial file object implementation.\nClass AbstractFileProvider; // A partial FileProvider implementation.\nClass AbstractFileSystem; // A partial FileSystem implementation.\n", "des": "The File Provider API, and utility classes."}
{"index": 1404, "repo": "spring-boot-actuator-3.1.1", "code": "Package: jdbc\n\nClasses and Interfaces: \npublic class DataSourceHealthIndicator extends AbstractHealthIndicator implements org.springframework.beans.factory.InitializingBean; // HealthIndicator that tests the status of a DataSource and optionally runs a test query.\n", "des": "Actuator support for JDBC."}
{"index": 1335, "repo": "groovy-all-4.0.13", "code": "Package: groovydoc\n\nClasses and Interfaces: \npublic interface GroovyAnnotationRef;\npublic interface GroovyClassDoc extends GroovyType, GroovyProgramElementDoc;\npublic interface GroovyConstructorDoc extends GroovyExecutableMemberDoc;\npublic interface GroovyDoc extends Comparable<GroovyDoc>;\npublic interface GroovyDocErrorReporter;\npublic interface GroovyExecutableMemberDoc extends GroovyMemberDoc;\npublic interface GroovyFieldDoc extends GroovyMemberDoc;\npublic interface GroovyMemberDoc extends GroovyProgramElementDoc;\npublic interface GroovyMethodDoc extends GroovyExecutableMemberDoc;\npublic interface GroovyPackageDoc extends GroovyDoc;\npublic interface GroovyParameter;\npublic interface GroovyProgramElementDoc extends GroovyDoc;\npublic interface GroovyRootDoc extends GroovyDoc, GroovyDocErrorReporter;\npublic interface GroovyTag;\npublic interface GroovyType;\n", "des": "GroovyDoc internal classes."}
{"index": 2341, "repo": "spring-boot-3.1.1", "code": "Package: beanvalidation\n\nClasses and Interfaces: \npublic class FilteredMethodValidationPostProcessor extends org.springframework.validation.beanvalidation.MethodValidationPostProcessor; // Custom MethodValidationPostProcessor that applies exclusion filters.\npublic interface MethodValidationExcludeFilter; // A filter for excluding types from method validation.\n", "des": "Utilities and classes related to bean validation."}
{"index": 1388, "repo": "spring-boot-actuator-3.1.1", "code": "Package: cache\n\nClasses and Interfaces: \npublic class CachingOperationInvoker extends Object implements OperationInvoker; // An OperationInvoker that caches the response of an operation with a configurable time to live.\npublic class CachingOperationInvokerAdvisor extends Object implements OperationInvokerAdvisor; // OperationInvokerAdvisor to optionally provide result caching support.\n", "des": "Caching support for actuator endpoints."}
{"index": 2835, "repo": "spring-data-r2dbc-3.1.2", "code": "Package: config\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(org.springframework.data.r2dbc.repository.config.R2dbcRepositoriesRegistrar.class) public @interface EnableR2dbcRepositories; // Annotation to activate reactive relational repositories using R2DBC.\npublic class R2dbcRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport; // Reactive RepositoryConfigurationExtension for R2DBC.\n", "des": "Support infrastructure for the configuration of R2DBC-specific repositories."}
{"index": 3315, "repo": "opencms-core-15.0", "code": "Package: security\n\nClasses and Interfaces: \nInterface I_CmsAuthorizationHandler; // Defines general authorization methods.\nInterface I_CmsAuthorizationHandler.I_PrivilegedLoginAction; // Class providing the privileged login action.\nInterface I_CmsCredentialsResolver; // This interface can be used to override or replace user names or passwords which occur in the OpenCms configuration, for example to hide passwords from users who can read the configuration files.\nInterface I_CmsLoginAction; // Interface used to provide a protected login method.\nInterface I_CmsPasswordGenerator;\nInterface I_CmsPasswordHandler; // Defines methods for OpenCms password validation.\nInterface I_CmsPasswordSecurityEvaluator; // Password handler implementing this interface allow the password security to be evaluated.\nInterface I_CmsPermissionHandler; // Permission handler interface.\nInterface I_CmsPrincipal; // Representation of an identity in the cms (currently user or group), used to define permissions on a resource.\nInterface I_CmsValidationHandler; // Defines general validation methods.\nClass CmsAccessControlEntry; // An access control entry defines the permissions of a user or group for a distinct resource.\nClass CmsAccessControlList; // An access control list contains the permission sets of all principals for a distinct resource that are calculated on the permissions defined by various access control entries.\nClass CmsAdvancedPasswordHandler; // Validates the user passwords in with advanced password requirements.\nClass CmsDefaultAuthorizationHandler; // Defines default authorization methods.\nClass CmsDefaultCredentialsResolver; // Default implementation of a I_CmsCredentialResolver, which does nothing but return the credential which was passed in.\nClass CmsDefaultPasswordGenerator; // Default Password Generator class.\nClass CmsDefaultPasswordHandler; // Default implementation for OpenCms password validation, just checks if a password is at last 4 characters long.\nClass CmsDefaultPermissionHandler; // Generic base driver interface.\nClass CmsDefaultValidationHandler; // Default implementation for the validation handler.\nClass CmsOrganizationalUnit; // An organizational unit in OpenCms.\nClass CmsOrgUnitManager; // This manager provide access to the organizational unit related operations.\nClass CmsPasswordInfo; // Validating bean for changing the password.\nClass CmsPermissionSet; // An immutable permission set that contains both allowed and denied permissions as bitsets.\nClass CmsPermissionSetCustom; // A custom permission set that can be modified during runtime and contains both allowed and denied permissions as bitsets.\n", "des": "Access control and security classes for the OpenCms ACL permission system."}
{"index": 1284, "repo": "spring-core-6.0.11", "code": "Package: task\n\nSub Packages: \npackage task.support; // Support classes for Spring's TaskExecutor abstraction.\n\nClasses and Interfaces: \n@Deprecated(since=\"6.0\") public interface AsyncListenableTaskExecutor extends AsyncTaskExecutor;\npublic interface AsyncTaskExecutor extends TaskExecutor; // Extended interface for asynchronous TaskExecutor implementations, offering support for Callable.\npublic class SimpleAsyncTaskExecutor extends CustomizableThreadCreator implements AsyncListenableTaskExecutor, Serializable; // TaskExecutor implementation that fires up a new Thread for each task, executing it asynchronously.\npublic class SyncTaskExecutor extends Object implements TaskExecutor, Serializable; // TaskExecutor implementation that executes each task synchronously in the calling thread.\n@FunctionalInterface public interface TaskDecorator; // A callback interface for a decorator to be applied to any Runnable about to be executed.\n@FunctionalInterface public interface TaskExecutor extends Executor; // Simple task executor interface that abstracts the execution of a Runnable.\npublic class TaskRejectedException extends RejectedExecutionException; // Exception thrown when a TaskExecutor rejects to accept a given task for execution.\n@Deprecated public class TaskTimeoutException extends TaskRejectedException;\n", "des": "This package defines Spring's core TaskExecutor abstraction, and provides SyncTaskExecutor and SimpleAsyncTaskExecutor implementations."}
{"index": 1657, "repo": "jena-core-4.9.0", "code": "Package: reasoner\n\nSub Packages: \npackage reasoner.rulesys; // Provides a selection of simple rule engines for Jena inference models.\npackage reasoner.transitiveReasoner; // This package contains a reasoner which supports transitive-reflexive closure of subPropertyOf and subClassOf relations.\n\nClasses and Interfaces: \npublic abstract class BaseInfGraph extends GraphBase implements InfGraph; // A base level implementation of the InfGraph interface.\npublic static class BaseInfGraph.InfCapabilities extends AllCapabilities; // An InfCapabilities notes that size may not be accurate.\npublic static class BaseInfGraph.InfFindSafeCapabilities extends BaseInfGraph.InfCapabilities; // An InfCapabilities notes that size may not be accurate.\npublic static class BaseInfGraph.InfTransactionHandler extends TransactionHandlerBase implements TransactionHandler;\npublic interface Derivation; // Derivation records are used to determine how an inferred triple was derived from a set of source triples and a reasoner.\npublic class FGraph extends Object implements Finder; // Wrapper round a Graph to implement the slightly modified Finder interface.\npublic interface Finder; // Minimal interface for preforming simple pattern find operations.\npublic class FinderUtil extends Object; // Some simple helper methods used when working with Finders, particularly to compose them into cascade sequences.\npublic class IllegalParameterException extends ReasonerException; // Exception used to signal that a configuration parameter was used (typically in a setParameter call) that was not understood - either because it was not a recognized parameter URI or its value range was incorrect.\npublic interface InfGraph extends Graph; // Extends the Graph interface to give additional means to query an inferred graph.\npublic interface Reasoner; // The minimal interface to which all reasoners (or reasoner adaptors) conform.\npublic class ReasonerException extends JenaException; // Exception signalling some generic problem with the reasoning subsystem.\npublic interface ReasonerFactory; // The interface through which a reasoner (inference engine) can be instantiated.\npublic class ReasonerRegistry extends Object; // A global registry of known reasoner modules.\npublic class StandardValidityReport extends Object implements ValidityReport; // Default implementation of ValidityReport which simply stores a list of precomputed Report records.\npublic class TriplePattern extends Object implements ClauseEntry; // Datastructure which defines a triple pattern as used in simple rules and in find interfaces.\n", "des": "The Jena2 reasoner subsystem is designed to allow a range of inference engines to be plugged into Jena."}
{"index": 336, "repo": "kafka-clients-3.5.0", "code": "Package: authorizer\n\nClasses and Interfaces: \nInterface AuthorizableRequestContext; // Request context interface that provides data from request header as well as connection and authentication information to plugins.\nInterface Authorizer; // Pluggable authorizer interface for Kafka brokers.\nInterface AuthorizerServerInfo; // Runtime broker configuration metadata provided to authorizers during start up.\nClass AclCreateResult;\nClass AclDeleteResult;\nClass AclDeleteResult.AclBindingDeleteResult; // Delete result for each ACL binding that matched a delete filter.\nClass Action;\nEnum AuthorizationResult;\n", "des": "Provides pluggable interface for performing authorization on a Kafka server."}
{"index": 1548, "repo": "spring-context-6.0.11", "code": "Package: groovy\n\nClasses and Interfaces: \n@FunctionalInterface public interface GroovyObjectCustomizer; // Strategy used by GroovyScriptFactory to allow the customization of a created GroovyObject.\npublic class GroovyScriptEvaluator extends Object implements ScriptEvaluator, org.springframework.beans.factory.BeanClassLoaderAware; // Groovy-based implementation of Spring's ScriptEvaluator strategy interface.\npublic class GroovyScriptFactory extends Object implements ScriptFactory, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanClassLoaderAware; // ScriptFactory implementation for a Groovy script.\n", "des": "Package providing integration of Groovy into Spring's scripting infrastructure."}
{"index": 888, "repo": "cassandra-all-4.1.2", "code": "Package: hints\n\nClasses and Interfaces: \nInterface HintsServiceMBean;\nInterface InputPosition; // Marker interface for file positions as provided by the various ChecksummedDataReader implementations.\nInterface SerializableHintMessage;\nClass ChecksummedDataInput; // A RandomAccessReader wrapper that calculates the CRC in place.\nClass CompressedChecksummedDataInput;\nClass CompressedHintsWriter;\nClass EncryptedChecksummedDataInput;\nClass EncryptedHintsWriter;\nClass Hint; // Encapsulates the hinted mutation, its creation time, and the gc grace seconds param for each table involved.\nClass HintMessage; // The message we use to dispatch and forward hints.\nClass HintMessage.Serializer;\nClass HintsService; // A singleton-ish wrapper over various hints components: - a catalog of all hints stores - a single-threaded write executor - a multi-threaded dispatch executor - the buffer pool for writing hints into - an optional scheduled task to clean up the applicable hints files The front-end for everything hints related.\nClass HintVerbHandler; // Verb handler used both for hint dispatch and streaming.\nClass PendingHintsInfo;\n", "des": "Hints subsystem consists of several components."}
{"index": 3320, "repo": "opencms-core-15.0", "code": "Package: ui\n\nSub Packages: \npackage ui.actions; // Contains classes for workplace actions.\npackage ui.apps; // Contains code for workplace apps.\npackage ui.components; // Contains some reusable GUI components for Vaadin UI.\npackage ui.contextmenu; // Contains code for workplace context menu.\npackage ui.dialogs; // Contains code for workplace dialogs.\npackage ui.editors; // The available content editors.\npackage ui.login; // Contains the user interface components for the Vaadin-based login dialog.\npackage ui.report; // Contains the user interface components for reports.\npackage ui.sitemap; // Vaadin GUI components and utilities for use in the sitemap editor.\npackage ui.util; // Utilities for Vaadin workplace code.\n\nClasses and Interfaces: \nInterface I_CmsAppView; // Factory to create components.\nInterface I_CmsDialogContext; // Context for dialogs opened from the context menu.\nInterface I_CmsDialogContextWithAdeContext; // Interface for a dialog context which also has access to the ADE context for which it is used.\nInterface I_CmsEditPropertyContext; // Action context that allows direct editing of single properties.\nInterface I_CmsHasButtons; // Provides buttons for a dialog.\nInterface I_CmsUpdateListener<T>; // Handles updates to items of a given type.\nClass A_CmsDialogContext; // Abstract dialog context.\nClass A_CmsUI; // Abstract UI class providing access to the OpenCms context.\nClass CmsCssIcon; // An icon resource.\nClass CmsUserIconHelper; // Generates user ident-icons.\nClass CmsVaadinErrorHandler; // Error handler for uncaught Vaadin exceptions.\nClass CmsVaadinUtils; // Vaadin utility functions.\nClass CmsVaadinUtils.OptionGroupBuilder; // Helper class for building option groups.\nClass Messages; // Message bundle class.\nEnum CmsVaadinUtils.PropertyId; // Container property ids.\nEnum FontOpenCms; // The available OpenCms workplace icons.\nEnum I_CmsDialogContext.ContextType; // The available context types.\n", "des": "General code for the Vaadin UI."}
{"index": 1527, "repo": "spring-context-6.0.11", "code": "Package: jboss\n\nClasses and Interfaces: \npublic class JBossLoadTimeWeaver extends Object implements LoadTimeWeaver; // LoadTimeWeaver implementation for JBoss's instrumentable ClassLoader.\n", "des": "Support for class instrumentation on JBoss AS 6 and 7."}
{"index": 3659, "repo": "solr-core-9.3.0", "code": "Package: export\n\nClasses and Interfaces: \nInterface IntComp;\nClass ExportWriter; // Prepares and writes the documents requested by /export requests\nClass ExportWriterStream; // Stream implementation that helps supporting 'expr' streaming in export writer.\nClass IntComp.IntAsc;\nClass IntComp.IntDesc;\nClass IntValue;\nClass LongValue;\nClass ExportWriter.IgnoreException;\n", "des": "Solr's Export Handler Functionality"}
{"index": 3173, "repo": "tomcat-api-10.1", "code": "Package: realm\n\nClasses and Interfaces: \nInterface X509UsernameRetriever; // Provides an interface for retrieving a user name from an X509Certificate.\nClass AuthenticatedUserRealm; // This Realm is intended for use with Authenticator implementations (SSLAuthenticator, SpnegoAuthenticator) that authenticate the user as well as obtain the user credentials.\nClass CombinedRealm; // Realm implementation that contains one or more realms.\nClass DataSourceRealm; // Implementation of Realm that works with any JDBC JNDI DataSource.\nClass DigestCredentialHandlerBase; // Base implementation for the Tomcat provided CredentialHandlers.\nClass GenericPrincipal; // Generic implementation of java.security.Principal that is available for use by Realm implementations.\nClass JAASCallbackHandler; // Implementation of the JAAS CallbackHandler interface, used to negotiate delivery of the username and credentials that were specified to our constructor.\nClass JAASMemoryLoginModule; // Implementation of the JAAS LoginModule interface, primarily for use in testing JAASRealm.\nClass JAASRealm; // Implementation of Realm that authenticates users via the Java Authentication and Authorization Service (JAAS).\nClass JNDIRealm; // Implementation of Realm that works with a directory server accessed via the Java Naming and Directory Interface (JNDI) APIs.\nClass JNDIRealm.JNDIConnection; // Class holding the connection to the directory plus the associated non thread safe message formats.\nClass JNDIRealm.User; // A protected class representing a User\nClass LockOutRealm; // This class extends the CombinedRealm (hence it can wrap other Realms) to provide a user lock out mechanism if there are too many failed authentication attempts in a given period of time.\nClass LockOutRealm.LockRecord;\nClass MemoryRealm; // Simple implementation of Realm that reads an XML file to configure the valid users, passwords, and roles.\nClass MemoryRuleSet; // RuleSet for recognizing the users defined in the XML file processed by MemoryRealm.\n", "des": "This package contains Realm implementations for the various supported realm technologies for authenticating users and identifying their associated roles."}
{"index": 479, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: io\n\nSub Packages: \npackage io.fs; // Apache Beam FileSystem interfaces and their default implementations.\npackage io.range; // Provides thread-safe helpers for implementing dynamic work rebalancing in position-based bounded sources.\n\nClasses and Interfaces: \nInterface AvroIO.RecordFormatter<ElementT>; // Users can achieve the same by providing this transform in a ParDo before using write in AvroIO AvroIO.write(Class).\nInterface AvroSink.DatumWriterFactory<T>;\nInterface AvroSource.DatumReaderFactory<T>;\nInterface CompressedSource.DecompressingChannelFactory; // Factory interface for creating channels that decompress the content of an underlying channel.\nInterface FileBasedSink.OutputFileHints; // Provides hints about how to generate output files, such as a suggested filename suffix (e.g.\nInterface FileBasedSink.WritableByteChannelFactory; // Implementations create instances of WritableByteChannel used by FileBasedSink and related classes to allow decorating, or otherwise transforming, the raw data that would normally be written directly to the WritableByteChannel passed into FileBasedSink.WritableByteChannelFactory.create(WritableByteChannel).\nInterface FileIO.Sink<ElementT>; // Specifies how to write elements to individual files in FileIO.write() and FileIO.writeDynamic().\nInterface FileIO.Write.FileNaming; // A policy for generating names for shard files.\nInterface FileSystemRegistrar; // A registrar that creates FileSystem instances from PipelineOptions.\nInterface ShardingFunction<UserT,DestinationT>; // Function for assigning ShardedKeys to input elements for sharded WriteFiles.\nInterface TextRowCountEstimator.SamplingStrategy; // Sampling Strategy shows us when should we stop reading further files.\nInterface UnboundedSource.CheckpointMark; // A marker representing the progress and state of an UnboundedSource.UnboundedReader.\nClass AvroIO; // Avro related classes are deprecated in module beam-sdks-java-core and will be eventually removed.\nClass AvroIO.Parse<T>; // Implementation of AvroIO.parseGenericRecords(org.apache.beam.sdk.transforms.SerializableFunction<org.apache.avro.generic.GenericRecord, T>).\nClass AvroIO.ParseAll<T>; // See AvroIO.parseAllGenericRecords(SerializableFunction) for details.\n", "des": "Defines transforms for reading and writing common storage formats, including AvroIO, and TextIO."}
{"index": 2946, "repo": "spring-security-config-6.1.2", "code": "Package: method\n\nClasses and Interfaces: \n@Deprecated public class GlobalMethodSecurityBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\npublic class InterceptMethodsBeanDefinitionDecorator extends Object implements org.springframework.beans.factory.xml.BeanDefinitionDecorator;\npublic class MethodSecurityBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Processes the top-level \"method-security\" element.\npublic static final class MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor>, org.springframework.context.ApplicationContextAware;\npublic static final class MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.access.expression.method.MethodSecurityExpressionHandler>, org.springframework.context.ApplicationContextAware;\npublic static final class MethodSecurityBeanDefinitionParser.PostAuthorizeAuthorizationMethodInterceptor extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor>;\npublic static final class MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor>;\npublic static final class MethodSecurityBeanDefinitionParser.SecuredAuthorizationMethodInterceptor extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor>;\n@Deprecated public class MethodSecurityMetadataSourceBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;\n", "des": "Support for parsing of the <global-method-security> and <intercept-methods> elements."}
{"index": 3855, "repo": "lucene-core-9.7.0", "code": "Package: compress\n\nClasses and Interfaces: \nClass LowercaseAsciiCompression; // Utility class that can efficiently compress arrays that mostly contain characters in the [0x1F,0x3F) or [0x5F,0x7F) ranges, which notably include all digits, lowercase characters, '.', '-' and '_'.\nClass LZ4; // LZ4 compression and decompression routines.\nClass LZ4.FastCompressionHashTable; // Simple lossy LZ4.HashTable that only stores the last ocurrence for each hash on 2^14 bytes of memory.\nClass LZ4.HighCompressionHashTable; // A higher-precision LZ4.HashTable.\n", "des": "Compression utilities."}
{"index": 3616, "repo": "solr-test-framework-9.3.0", "code": "Package: analysis\n\nClasses and Interfaces: \nClass MockCharFilterFactory; // Factory for MockCharFilter for testing purposes.\nClass MockTokenFilterFactory; // Factory for MockTokenFilter for testing purposes.\nClass MockTokenizerFactory; // Factory for MockTokenizer for testing purposes.\n", "des": "Factories for Mock analysis classes that can be used in test configurations."}
{"index": 1475, "repo": "spring-shell-core-3.1.2", "code": "Package: jline\n\nClasses and Interfaces: \npublic class ExtendedDefaultParser extends Object implements org.jline.reader.Parser; // Shameful copy-paste of JLine's DefaultParser which creates CompletingParsedLine.\npublic class FileInputProvider extends Object implements InputProvider, Closeable; // An InputProvider that reads input from file-like sources.\n@Order(0) public class InteractiveShellRunner extends Object implements ShellRunner; // A ShellRunner that bootstraps the shell in interactive mode.\npublic static class InteractiveShellRunner.JLineInputProvider extends Object implements InputProvider;\n@Order(-50) public class NonInteractiveShellRunner extends Object implements ShellRunner; // A ShellRunner that executes commands without entering interactive shell mode.\npublic interface PromptProvider; // Called at each REPL cycle to decide what the prompt should be.\n@Order(-100) public class ScriptShellRunner extends Object implements ShellRunner; // A ShellRunner that looks for process arguments that start with @, which are then interpreted as references to script files to run and exit.\n", "des": "Contains classes that leverage the JLine library to hook into the Spring Shell REPL."}
{"index": 752, "repo": "artemis-odb-2.3.0", "code": "Package: managers\n\nClasses and Interfaces: \nClass GroupManager; // If you need to group your entities together, e.g tanks going into \"units\" group or explosions into \"effects\", then use this manager.\nClass PlayerManager; // You may sometimes want to specify to which player an entity belongs to.\nClass TagManager; // If you need to tag any entity, use this.\nClass TeamManager; // Use this class together with PlayerManager.\nClass UuidEntityManager;\n", "des": "Manager implementations."}
{"index": 1180, "repo": "commons-math3-3.6.1", "code": "Package: util\n\nClasses and Interfaces: \nClass ExponentialDecayFunction; // Exponential decay function: a e-x / b, where x is the (integer) independent variable.\nClass QuasiSigmoidDecayFunction; // Decay function whose shape is similar to a sigmoid.\n", "des": "Miscellaneous utilities."}
{"index": 701, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: channel\n\nClasses and Interfaces: \nClass DirectChannelSpec;\nClass ExecutorChannelSpec;\nClass LoadBalancingChannelSpec<S extends MessageChannelSpec<S,C>,C extends org.springframework.integration.channel.AbstractMessageChannel>;\nClass MessageChannels;\nClass MessageChannelSpec<S extends MessageChannelSpec<S,C>,C extends org.springframework.integration.channel.AbstractMessageChannel>;\nClass PriorityChannelSpec;\nClass PublishSubscribeChannelSpec<S extends PublishSubscribeChannelSpec<S>>;\nClass QueueChannelSpec;\nClass QueueChannelSpec.MessageStoreSpec; // The ChannelMessageStore-specific QueueChannelSpec extension.\nClass RendezvousChannelSpec;\nClass WireTapSpec; // The IntegrationComponentSpec implementation for the WireTap component.\n", "des": "Contains MessageChannel Builders DSL."}
{"index": 2694, "repo": "spring-integration-http-6.1.2", "code": "Package: dsl\n\nClasses and Interfaces: \npublic abstract class BaseHttpInboundEndpointSpec<S extends BaseHttpInboundEndpointSpec<S,E>,E extends HttpRequestHandlingEndpointSupport> extends HttpInboundEndpointSupportSpec<S,E>; // A base MessagingGatewaySpec for the HttpRequestHandlingEndpointSupport implementations.\npublic abstract class BaseHttpMessageHandlerSpec<S extends BaseHttpMessageHandlerSpec<S,E>,E extends AbstractHttpRequestExecutingMessageHandler> extends org.springframework.integration.dsl.MessageHandlerSpec<S,E> implements org.springframework.integration.dsl.ComponentsRegistration; // The base MessageHandlerSpec for AbstractHttpRequestExecutingMessageHandlers.\npublic final class Http extends Object; // The HTTP components Factory.\npublic class HttpControllerEndpointSpec extends BaseHttpInboundEndpointSpec<HttpControllerEndpointSpec,HttpRequestHandlingController>; // The BaseHttpInboundEndpointSpec implementation for the HttpRequestHandlingController.\npublic abstract class HttpInboundEndpointSupportSpec<S extends HttpInboundEndpointSupportSpec<S,E>,E extends BaseHttpInboundEndpoint> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,E> implements org.springframework.integration.dsl.ComponentsRegistration;\npublic static final class HttpInboundEndpointSupportSpec.CrossOriginSpec extends Object; // A fluent API for the CrossOrigin.\npublic static final class HttpInboundEndpointSupportSpec.RequestMappingSpec extends Object; // A fluent API for the RequestMapping.\npublic class HttpMessageHandlerSpec extends BaseHttpMessageHandlerSpec<HttpMessageHandlerSpec,HttpRequestExecutingMessageHandler>; // The BaseHttpMessageHandlerSpec implementation for the HttpRequestExecutingMessageHandler.\npublic class HttpRequestHandlerEndpointSpec extends BaseHttpInboundEndpointSpec<HttpRequestHandlerEndpointSpec,HttpRequestHandlingMessagingGateway>; // The BaseHttpInboundEndpointSpec implementation for the HttpRequestHandlingMessagingGateway.\n", "des": "Provides HTTP Components support for Spring Integration Java DSL."}
{"index": 1727, "repo": "spring-jdbc-6.0.11", "code": "Package: simple\n\nClasses and Interfaces: \npublic abstract class AbstractJdbcCall extends Object; // Abstract class to provide base functionality for easy stored procedure calls based on configuration options and database meta-data.\npublic abstract class AbstractJdbcInsert extends Object; // Abstract class to provide base functionality for easy inserts based on configuration options and database meta-data.\npublic class SimpleJdbcCall extends AbstractJdbcCall implements SimpleJdbcCallOperations; // A SimpleJdbcCall is a multithreaded, reusable object representing a call to a stored procedure or a stored function.\npublic interface SimpleJdbcCallOperations; // Interface specifying the API for a Simple JDBC Call implemented by SimpleJdbcCall.\npublic class SimpleJdbcInsert extends AbstractJdbcInsert implements SimpleJdbcInsertOperations; // A SimpleJdbcInsert is a multithreaded, reusable object providing easy insert capabilities for a table.\npublic interface SimpleJdbcInsertOperations; // Interface specifying the API for a Simple JDBC Insert implemented by SimpleJdbcInsert.\n", "des": "Simplification layer for table inserts and stored procedure calls."}
{"index": 1169, "repo": "commons-math3-3.6.1", "code": "Package: partitioning\n\nSub Packages: \npackage partitioning.utilities; // This package provides multidimensional ordering features for partitioning.\n\nClasses and Interfaces: \nInterface BSPTree.LeafMerger<S extends Space>; // This interface gather the merging operations between a BSP tree leaf and another BSP tree.\nInterface BSPTree.VanishingCutHandler<S extends Space>; // This interface handles the corner cases when an internal node cut sub-hyperplane vanishes.\nInterface BSPTreeVisitor<S extends Space>; // This interface is used to visit BSP tree nodes.\nInterface Embedding<S extends Space,T extends Space>; // This interface defines mappers between a space and one of its sub-spaces.\nInterface Hyperplane<S extends Space>; // This interface represents an hyperplane of a space.\nInterface Region<S extends Space>; // This interface represents a region of a space as a partition.\nInterface SubHyperplane<S extends Space>; // This interface represents the remaining parts of an hyperplane after other parts have been chopped off.\nInterface Transform<S extends Space,T extends Space>; // This interface represents an inversible affine transform in a space.\nClass AbstractRegion<S extends Space,T extends Space>; // Abstract class for all regions, independently of geometry type or dimension.\nClass AbstractSubHyperplane<S extends Space,T extends Space>; // This class implements the dimension-independent parts of SubHyperplane.\nClass BoundaryAttribute<S extends Space>; // Class holding boundary attributes.\nClass BoundaryProjection<S extends Space>; // Class holding the result of point projection on region boundary.\nClass BSPTree<S extends Space>; // This class represent a Binary Space Partition tree.\nClass NodesSet<S extends Space>; // Set of BSP tree nodes.\nClass RegionFactory<S extends Space>; // This class is a factory for Region.\nClass SubHyperplane.SplitSubHyperplane<U extends Space>; // Class holding the results of the split method.\nEnum BSPTreeVisitor.Order; // Enumerate for visit order with respect to plus sub-tree, minus sub-tree and cut sub-hyperplane.\n", "des": "This package provides classes to implement Binary Space Partition trees."}
{"index": 555, "repo": "hadoop-common-3.3.4", "code": "Package: protocolPB\n\nClasses and Interfaces: \nClass PBHelper; // Utility methods aiding conversion of fs data structures.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1551, "repo": "spring-context-6.0.11", "code": "Package: ui\n\nSub Packages: \npackage ui.context; // Contains classes defining the application context subinterface for UI applications.\n\nClasses and Interfaces: \npublic class ConcurrentModel extends ConcurrentHashMap<String,Object> implements Model; // Implementation of the Model interface based on a ConcurrentHashMap for use in concurrent scenarios.\npublic class ExtendedModelMap extends ModelMap implements Model; // Subclass of ModelMap that implements the Model interface.\npublic interface Model; // Interface that defines a holder for model attributes.\npublic class ModelMap extends LinkedHashMap<String,Object>; // Implementation of Map for use when building model data for use with UI tools.\n", "des": "Generic support for UI layer concepts."}
{"index": 270, "repo": "nutch-2.4", "code": "Package: solr\n\nClasses and Interfaces: \nInterface SolrConstants;\nClass SolrIndexWriter;\nClass SolrMappingReader;\nClass SolrUtils;\n", "des": "Index writer plugin for Apache Solr."}
{"index": 1910, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: cassandra\n\nClasses and Interfaces: \n@AutoConfiguration(after=CassandraAutoConfiguration.class) @ConditionalOnClass({com.datastax.oss.driver.api.core.CqlSession.class,org.springframework.data.cassandra.core.CassandraAdminOperations.class}) @ConditionalOnBean(com.datastax.oss.driver.api.core.CqlSession.class) public class CassandraDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's Cassandra support.\n@AutoConfiguration(after=CassandraDataAutoConfiguration.class) @ConditionalOnClass({com.datastax.oss.driver.api.core.CqlSession.class,org.springframework.data.cassandra.core.ReactiveCassandraTemplate.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(com.datastax.oss.driver.api.core.CqlSession.class) public class CassandraReactiveDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's reactive Cassandra support.\n@AutoConfiguration(after=CassandraReactiveDataAutoConfiguration.class) @ConditionalOnClass({org.springframework.data.cassandra.ReactiveSession.class,org.springframework.data.cassandra.repository.ReactiveCassandraRepository.class}) @ConditionalOnRepositoryType(store=\"cassandra\", type=REACTIVE) @ConditionalOnMissingBean(org.springframework.data.cassandra.repository.support.ReactiveCassandraRepositoryFactoryBean.class) @Import(org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesRegistrar.class) public class CassandraReactiveRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's Cassandra Reactive Repositories.\n", "des": "Auto-configuration for Spring Data Cassandra."}
{"index": 1336, "repo": "groovy-all-4.0.13", "code": "Package: reflection\n\nClasses and Interfaces: \npublic class CacheAccessControlException extends GroovyRuntimeException;\npublic class CachedClass extends Object;\npublic static class CachedClass.CachedMethodComparatorByName extends Object implements Comparator<CachedMethod>;\npublic static class CachedClass.CachedMethodComparatorWithString extends Object implements Comparator;\npublic class CachedConstructor extends ParameterTypes;\npublic class CachedField extends MetaProperty;\npublic class CachedMethod extends MetaMethod implements Comparable;\npublic class ClassInfo extends Object implements Finalizable; // Handle for all information we want to keep about the class\npublic static interface ClassInfo.ClassInfoAction;\npublic class ClassLoaderForClassArtifacts extends ClassLoader;\npublic abstract class GeneratedMetaMethod extends MetaMethod;\npublic static class GeneratedMetaMethod.DgmMethodRecord extends Object implements Serializable;\npublic static class GeneratedMetaMethod.Proxy extends GeneratedMetaMethod;\npublic interface GroovyClassValue<T>; // Abstraction for Java version dependent ClassValue implementations.\npublic static interface GroovyClassValue.ComputeValue<T>;\npublic class MixinInMetaClass extends Object;\npublic class ParameterTypes extends Object;\npublic class ReflectionCache extends Object;\npublic class ReflectionUtils extends Object; // This class contains utility methods to determine which class called the current class to multiple levels of depth.\npublic class SunClassLoader extends ClassLoader; // Special class loader, which when running on Sun VM allows to generate accessor classes for any method\n", "des": "Internal classes for assisting with reflection."}
{"index": 717, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: transaction\n\nClasses and Interfaces: \nClass TransactionHandleMessageAdvice; // A TransactionInterceptor extension with HandleMessageAdvice marker.\nClass TransactionInterceptorBuilder; // Provides a fluent API to build a transaction interceptor.\n", "des": "Provides classes supporting Transactions."}
{"index": 1565, "repo": "spring-restdocs-core-3.0.0", "code": "Package: http\n\nClasses and Interfaces: \npublic abstract class HttpDocumentation extends Object; // Static factory methods for documenting a RESTful API's HTTP requests.\npublic class HttpRequestSnippet extends TemplatedSnippet; // A Snippet that documents an HTTP request.\npublic class HttpResponseSnippet extends TemplatedSnippet; // A Snippet that documents an HTTP response.\n", "des": "Documenting the HTTP request sent to a RESTful API and the HTTP response that is returned."}
{"index": 1684, "repo": "spring-integration-mqtt-6.1.2", "code": "Package: event\n\nClasses and Interfaces: \npublic class MqttConnectionFailedEvent extends MqttIntegrationEvent; // The MqttIntegrationEvent to notify about lost connection to the server.\npublic abstract class MqttIntegrationEvent extends org.springframework.integration.events.IntegrationEvent; // Base class for Mqtt Events.\npublic class MqttMessageDeliveredEvent extends MqttMessageDeliveryEvent; // An event emitted (when using aysnc) when the client indicates the message was delivered.\npublic abstract class MqttMessageDeliveryEvent extends MqttIntegrationEvent; // Base class for events related to message delivery.\npublic class MqttMessageSentEvent extends MqttMessageDeliveryEvent; // An event emitted (when using async) when the client indicates that a message has been sent.\npublic class MqttProtocolErrorEvent extends MqttIntegrationEvent; // The even representing an MQTT error occured during client interaction.\npublic class MqttSubscribedEvent extends MqttIntegrationEvent;\n", "des": "ApplicationEvents generated by the mqtt module."}
{"index": 3003, "repo": "spring-web-6.0.11", "code": "Package: protobuf\n\nClasses and Interfaces: \npublic class KotlinSerializationProtobufDecoder extends KotlinSerializationBinaryDecoder<kotlinx.serialization.protobuf.ProtoBuf>; // Decode a byte stream into a protocol Buffer and convert to Objects with kotlinx.serialization.\npublic class KotlinSerializationProtobufEncoder extends KotlinSerializationBinaryEncoder<kotlinx.serialization.protobuf.ProtoBuf>; // Decode a byte stream into a Protocol Buffer and convert to Objects with kotlinx.serialization.\npublic abstract class ProtobufCodecSupport extends Object; // Base class providing support methods for Protobuf encoding and decoding.\npublic class ProtobufDecoder extends ProtobufCodecSupport implements org.springframework.core.codec.Decoder<com.google.protobuf.Message>; // A Decoder that reads Messages using Google Protocol Buffers.\npublic class ProtobufEncoder extends ProtobufCodecSupport implements HttpMessageEncoder<com.google.protobuf.Message>; // An Encoder that writes Messages using Google Protocol Buffers.\npublic class ProtobufHttpMessageWriter extends EncoderHttpMessageWriter<com.google.protobuf.Message>; // HttpMessageWriter that can write a protobuf Message and adds X-Protobuf-Schema, X-Protobuf-Message headers and a delimited=true parameter is added to the content type if a flux is serialized.\n", "des": "Provides an encoder and a decoder for Google Protocol Buffers."}
{"index": 517, "repo": "commons-vfs2-2.9.0", "code": "Package: compressed\n\nClasses and Interfaces: \nClass CompressedFileFileObject<FS extends CompressedFileFileSystem>; // A compressed file.\nClass CompressedFileFileProvider; // A file system provider for compressed files.\nClass CompressedFileFileSystem; // A read-only file system for compressed files.\n", "des": "The compressed file provider"}
{"index": 1804, "repo": "spring-aop-6.0.11", "code": "Package: framework\n\nSub Packages: \npackage framework.adapter; // SPI package allowing Spring AOP framework to handle arbitrary advice types.\npackage framework.autoproxy; // Bean post-processors for use in ApplicationContexts to simplify AOP usage by automatically creating AOP proxies without the need to use a ProxyFactoryBean.\n\nClasses and Interfaces: \npublic abstract class AbstractAdvisingBeanPostProcessor extends ProxyProcessorSupport implements org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor; // Base class for BeanPostProcessor implementations that apply a Spring AOP Advisor to specific beans.\npublic abstract class AbstractSingletonProxyFactoryBean extends ProxyConfig implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Convenient superclass for FactoryBean types that produce singleton-scoped proxy objects.\npublic interface Advised extends TargetClassAware; // Interface to be implemented by classes that hold the configuration of a factory of AOP proxies.\npublic class AdvisedSupport extends ProxyConfig implements Advised; // Base class for AOP proxy configuration managers.\npublic interface AdvisedSupportListener; // Listener to be registered on ProxyCreatorSupport objects Allows for receiving callbacks on activation and change of advice.\npublic interface AdvisorChainFactory; // Factory interface for advisor chains.\npublic class AopConfigException extends org.springframework.core.NestedRuntimeException; // Exception that gets thrown on illegal AOP configuration arguments.\npublic final class AopContext extends Object; // Class containing static methods used to obtain information about the current AOP invocation.\npublic interface AopInfrastructureBean; // Marker interface that indicates a bean that is part of Spring's AOP infrastructure.\npublic interface AopProxy; // Delegate interface for a configured AOP proxy, allowing for the creation of actual proxy objects.\npublic interface AopProxyFactory; // Interface to be implemented by factories that are able to create AOP proxies based on AdvisedSupport configuration objects.\npublic abstract class AopProxyUtils extends Object; // Utility methods for AOP proxy factories.\npublic class DefaultAdvisorChainFactory extends Object implements AdvisorChainFactory, Serializable; // A simple but definitive way of working out an advice chain for a Method, given an Advised object.\n", "des": "Package containing Spring's basic AOP infrastructure, compliant with the AOP Alliance interfaces."}
{"index": 2488, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: graphql\n\nClasses and Interfaces: \n@AutoConfiguration(after=ObservationAutoConfiguration.class) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.execution.GraphQlSource.class,io.micrometer.observation.Observation.class}) public class GraphQlObservationAutoConfiguration extends Object; // Auto-configuration for instrumentation of Spring GraphQL endpoints.\n", "des": "Auto-configuration for Spring GraphQL observations."}
{"index": 1710, "repo": "spring-boot-test-3.1.1", "code": "Package: runner\n\nClasses and Interfaces: \npublic abstract class AbstractApplicationContextRunner<SELF extends AbstractApplicationContextRunner<SELF,C,A>,C extends org.springframework.context.ConfigurableApplicationContext,A extends ApplicationContextAssertProvider<C>> extends Object; // Utility design to run an ApplicationContext and provide AssertJ style assertions.\nprotected static final class AbstractApplicationContextRunner.BeanRegistration<T> extends Object; // A Bean registration to be applied when the context loaded.\nprotected static final class AbstractApplicationContextRunner.RunnerConfiguration<C extends org.springframework.context.ConfigurableApplicationContext> extends Object;\npublic class ApplicationContextRunner extends AbstractApplicationContextRunner<ApplicationContextRunner,org.springframework.context.ConfigurableApplicationContext,AssertableApplicationContext>; // An ApplicationContext runner for a standard, non-web environment ConfigurableApplicationContext.\n@FunctionalInterface public interface ContextConsumer<C extends org.springframework.context.ApplicationContext>; // Callback interface used to process an ApplicationContext with the ability to throw a (checked) exception.\npublic final class ReactiveWebApplicationContextRunner extends AbstractApplicationContextRunner<ReactiveWebApplicationContextRunner,org.springframework.boot.web.reactive.context.ConfigurableReactiveWebApplicationContext,AssertableReactiveWebApplicationContext>; // An ApplicationContext runner for a ConfigurableReactiveWebApplicationContext.\npublic final class WebApplicationContextRunner extends AbstractApplicationContextRunner<WebApplicationContextRunner,org.springframework.web.context.ConfigurableWebApplicationContext,AssertableWebApplicationContext>; // An ApplicationContext runner for a Servlet based ConfigurableWebApplicationContext.\n", "des": "Test utilities to run application contexts for testing."}
{"index": 3083, "repo": "spring-ws-core-4.0.5", "code": "Package: server\n\nSub Packages: \npackage server.endpoint; // Provides EndpointAdapter, EndpointMapping, and EndpointExceptionResolver implementations for SOAP.\n\nClasses and Interfaces: \npublic interface SmartSoapEndpointInterceptor extends SmartEndpointInterceptor, SoapEndpointInterceptor; // SOAP-specific extension of the SmartEndpointInterceptor interface.\npublic interface SoapEndpointInterceptor extends EndpointInterceptor; // SOAP-specific extension of the EndpointInterceptor interface.\npublic class SoapEndpointInvocationChain extends EndpointInvocationChain; // SOAP-specific subclass of the EndpointInvocationChain.\npublic interface SoapEndpointMapping extends EndpointMapping; // SOAP-specific sub-interface of the EndpointMapping.\npublic class SoapMessageDispatcher extends MessageDispatcher; // SOAP-specific subclass of the MessageDispatcher.\n", "des": "Contains classes for SOAP-specific server-side Spring-WS support."}
{"index": 1393, "repo": "spring-boot-actuator-3.1.1", "code": "Package: annotation\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Documented @Endpoint @FilteredEndpoint(org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointFilter.class) public @interface ControllerEndpoint; // Identifies a type as being an endpoint that is only exposed over Spring MVC or Spring WebFlux.\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointDiscoverer.ControllerEndpointDiscovererRuntimeHints.class) public class ControllerEndpointDiscoverer extends EndpointDiscoverer<ExposableControllerEndpoint,Operation> implements ControllerEndpointsSupplier; // EndpointDiscoverer for controller endpoints.\n@FunctionalInterface public interface ControllerEndpointsSupplier extends EndpointsSupplier<ExposableControllerEndpoint>; // EndpointsSupplier for controller endpoints.\n@Target(TYPE) @Retention(RUNTIME) @Documented @EndpointExtension(filter=org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointFilter.class) public @interface EndpointWebExtension; // Identifies a type as being a Web-specific extension of an @Endpoint.\npublic interface ExposableControllerEndpoint extends ExposableEndpoint<Operation>, PathMappedEndpoint; // Information describing an endpoint that can be exposed over Spring MVC or Spring WebFlux.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Endpoint @FilteredEndpoint(org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointFilter.class) @ResponseBody public @interface RestControllerEndpoint; // Identifies a type as being a REST endpoint that is only exposed over Spring MVC or Spring WebFlux.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Endpoint @FilteredEndpoint(org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointFilter.class) public @interface ServletEndpoint; // Identifies a type as being an endpoint that supplies a servlet to expose.\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointDiscoverer.ServletEndpointDiscovererRuntimeHints.class) public class ServletEndpointDiscoverer extends EndpointDiscoverer<ExposableServletEndpoint,Operation> implements ServletEndpointsSupplier; // EndpointDiscoverer for servlet endpoints.\n", "des": "Annotation support for actuator web endpoints."}
{"index": 2148, "repo": "wicket-core-10.0.0-M1", "code": "Package: validation\n\nClasses and Interfaces: \npublic abstract class AbstractFormValidator extends Behavior implements IFormValidator; // Base class for IFormValidators.\npublic class EqualInputValidator extends AbstractFormValidator; // Validates that the input of two form components is identical.\npublic class EqualPasswordInputValidator extends EqualInputValidator; // Validates that the input of two form components is identical.\npublic class FormComponentFeedbackBorder extends Border implements IFeedback; // A border that can be placed around a form component to indicate when the bordered child/children has a validation error.\npublic class FormComponentFeedbackIndicator extends Panel implements IFeedback; // A panel that hides or shows itself depending on whether there are feedback messages for a given message filter.\npublic class FormValidatorAdapter extends Behavior implements IFormValidator; // Adapts IFormValidator to Behavior\npublic interface IFormValidator extends org.apache.wicket.util.io.IClusterable; // Interface that represents validators that check multiple components.\n", "des": "Support for form validation."}
{"index": 3166, "repo": "gson-2.10.1", "code": "Package: annotations\n\nClasses and Interfaces: \nAnnotation Type Expose; // An annotation that indicates this member should be exposed for JSON serialization or deserialization.\nAnnotation Type JsonAdapter; // An annotation that indicates the Gson TypeAdapter to use with a class or field.\nAnnotation Type SerializedName; // An annotation that indicates this member should be serialized to JSON with the provided name value as its field name.\nAnnotation Type Since; // An annotation that indicates the version number since a member or a type has been present.\nAnnotation Type Until; // An annotation that indicates the version number until a member or a type should be present.\n", "des": "This package provides annotations that can be used with Gson."}
{"index": 148, "repo": "ignite-core-2.15.0", "code": "Package: mxbean\n\nClasses and Interfaces: \nClass IgniteStandardMXBean; // Extension of standard Java MBean.\n", "des": "Contains internal mxbeans stuff."}
{"index": 290, "repo": "pdfbox-3.0.0-beta1", "code": "Package: taggedpdf\n\nClasses and Interfaces: \nClass PDArtifactMarkedContent; // An artifact marked content.\nClass PDExportFormatAttributeObject; // An Export Format attribute object.\nClass PDFourColours; // An object for four colours.\nClass PDLayoutAttributeObject; // A Layout attribute object.\nClass PDListAttributeObject; // A List attribute object.\nClass PDPrintFieldAttributeObject; // A PrintField attribute object.\nClass PDStandardAttributeObject; // A standard attribute object.\nClass PDTableAttributeObject; // A Table attribute object.\nClass StandardStructureTypes; // The standard structure types.\n", "des": "The tagged PDF package provides a mechanism for incorporating \"tags\" (standard structure types and attributes) into a PDF file."}
{"index": 1814, "repo": "spring-integration-mail-6.1.2", "code": "Package: mail\n\nSub Packages: \npackage mail.config; // Provides classes for configuration - parsers, namespace handlers.\npackage mail.dsl; // Provides Mail Components for the Java DSL.\npackage mail.event; // Events generated by the mail module\npackage mail.support; // Provides classes to support email.\npackage mail.transformer; // Provides classes related to transforming mail messages.\n\nClasses and Interfaces: \npublic abstract class AbstractMailReceiver extends org.springframework.integration.context.IntegrationObjectSupport implements MailReceiver, org.springframework.beans.factory.DisposableBean; // Base class for MailReceiver implementations.\npublic class ImapIdleChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.context.ApplicationEventPublisherAware; // An event-driven Channel Adapter that receives mail messages from a mail server that supports the IMAP \"idle\" command (see RFC 2177).\npublic class ImapMailReceiver extends AbstractMailReceiver; // A MailReceiver implementation for receiving mail messages from a mail server that supports the IMAP protocol.\npublic final class MailHeaders extends Object; // Pre-defined header names to be used for setting and/or retrieving Mail Message attributes from/to integration Message Headers.\npublic interface MailReceiver; // Strategy interface for receiving mail Messages.\npublic class MailReceivingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<Object>; // MessageSource implementation that delegates to a MailReceiver to poll a mailbox.\npublic class MailSendingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler; // A MessageHandler implementation for sending mail.\npublic abstract class MailTransportUtils extends Object; // Collection of utility methods to work with Mail transports.\npublic class Pop3MailReceiver extends AbstractMailReceiver; // A MailReceiver implementation that polls a mail server using the POP3 protocol.\n@FunctionalInterface public interface SearchTermStrategy; // Strategy to be used to generate a SearchTerm.\n", "des": "Base package for Mail support."}
{"index": 3062, "repo": "spring-ws-core-4.0.5", "code": "Package: server\n\nSub Packages: \npackage server.endpoint; // Provides standard endpoint, and EndpointAdapter implementations.\n\nClasses and Interfaces: \npublic interface EndpointAdapter; // Interface that must be implemented for each endpoint type to handle a message request.\npublic interface EndpointExceptionResolver; // Defines the interface for objects than can resolve exceptions thrown during endpoint execution.\npublic interface EndpointInterceptor; // Workflow interface that allows for customized endpoint invocation chains.\npublic class EndpointInvocationChain extends Object; // Endpoint invocation chain, consisting of an endpoint object and any preprocessing interceptors.\npublic interface EndpointMapping; // Defines a mapping between message requests and endpoint objects.\npublic class MessageDispatcher extends Object implements WebServiceMessageReceiver, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationContextAware; // Central dispatcher for use within Spring-WS, dispatching Web service messages to registered endpoints.\npublic interface SmartEndpointInterceptor extends EndpointInterceptor; // Extension of the EndpointInterceptor interface that adds a way to decide whether the interceptor should intercept a given message context.\n", "des": "Contains classes for server-side Spring-WS support."}
{"index": 1714, "repo": "spring-boot-test-3.1.1", "code": "Package: server\n\nClasses and Interfaces: \n@Target({FIELD,METHOD,PARAMETER,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Value(\"${local.rsocket.server.port}\") public @interface LocalRSocketServerPort; // Annotation at the field or method/constructor parameter level that injects the RSocket port that was allocated at runtime.\n", "des": "RSocket server test utilities and support classes."}
{"index": 1577, "repo": "spring-security-oauth2-client-6.1.2", "code": "Package: client\n\nSub Packages: \npackage client.authentication; // Support classes and interfaces for authenticating and authorizing a client with an OAuth 2.0 Authorization Server using a specific authorization grant flow.\npackage client.endpoint; // Classes and interfaces providing support to the client for initiating requests to the Authorization Server's Protocol Endpoints.\npackage client.registration; // Classes and interfaces that provide support for ClientRegistration.\npackage client.userinfo; // Classes and interfaces providing support to the client for initiating requests to the OAuth 2.0 Authorization Server's UserInfo Endpoint.\npackage client.web; // OAuth 2.0 Client Filter's and supporting classes and interfaces.\n\nClasses and Interfaces: \npublic final class AuthorizationCodeOAuth2AuthorizedClientProvider extends Object implements OAuth2AuthorizedClientProvider; // An implementation of an OAuth2AuthorizedClientProvider for the authorization_code grant.\npublic final class AuthorizationCodeReactiveOAuth2AuthorizedClientProvider extends Object implements ReactiveOAuth2AuthorizedClientProvider; // An implementation of a ReactiveOAuth2AuthorizedClientProvider for the authorization_code grant.\npublic final class AuthorizedClientServiceOAuth2AuthorizedClientManager extends Object implements OAuth2AuthorizedClientManager; // An implementation of an OAuth2AuthorizedClientManager that is capable of operating outside of the context of a HttpServletRequest, e.g.\npublic static class AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper extends Object implements Function<OAuth2AuthorizeRequest,Map<String,Object>>; // The default implementation of the contextAttributesMapper.\npublic final class AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager extends Object implements ReactiveOAuth2AuthorizedClientManager; // An implementation of a ReactiveOAuth2AuthorizedClientManager that is capable of operating outside of the context of a ServerWebExchange, e.g.\npublic static class AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager.DefaultContextAttributesMapper extends Object implements Function<OAuth2AuthorizeRequest,reactor.core.publisher.Mono<Map<String,Object>>>; // The default implementation of the contextAttributesMapper.\npublic class ClientAuthorizationException extends org.springframework.security.oauth2.core.OAuth2AuthorizationException; // This exception is thrown on the client side when an attempt to authenticate or authorize an OAuth 2.0 client fails.\n", "des": "Core classes and interfaces providing support for OAuth 2.0 Client."}
{"index": 2355, "repo": "spring-boot-3.1.1", "code": "Package: server\n\nClasses and Interfaces: \npublic abstract class AbstractReactiveWebServerFactory extends AbstractConfigurableWebServerFactory implements ConfigurableReactiveWebServerFactory; // Abstract base class for ReactiveWebServerFactory implementations.\npublic interface ConfigurableReactiveWebServerFactory extends ConfigurableWebServerFactory, ReactiveWebServerFactory; // Configurable ReactiveWebServerFactory.\n@FunctionalInterface public interface ReactiveWebServerFactory extends WebServerFactory; // Factory interface that can be used to create a reactive WebServer.\n", "des": "Reactive web server abstractions."}
{"index": 2460, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: ganglia\n\nClasses and Interfaces: \n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.ganglia.GangliaMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"ganglia\") @EnableConfigurationProperties(GangliaProperties.class) public class GangliaMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Ganglia.\n@ConfigurationProperties(prefix=\"management.ganglia.metrics.export\") public class GangliaProperties extends Object; // @ConfigurationProperties for configuring Ganglia metrics export.\n", "des": "Support for exporting actuator metrics to Ganglia."}
{"index": 1566, "repo": "spring-restdocs-core-3.0.0", "code": "Package: hypermedia\n\nClasses and Interfaces: \npublic abstract class HypermediaDocumentation extends Object; // Static factory methods for documenting a RESTful API that utilizes Hypermedia.\npublic class Link extends Object; // Representation of a link used in a Hypermedia-based API.\npublic class LinkDescriptor extends IgnorableDescriptor<LinkDescriptor>; // A description of a link found in a hypermedia API.\npublic interface LinkExtractor; // A LinkExtractor is used to extract links from a JSON response.\npublic class LinksSnippet extends TemplatedSnippet; // A Snippet that documents a RESTful resource's links.\n", "des": "Documenting a RESTful API that uses hypermedia."}
{"index": 461, "repo": "commons-geometry-spherical-1.0", "code": "Package: oned\n\nClasses and Interfaces: \nClass AngularInterval; // Class representing an angular interval of size greater than zero to 2pi.\nClass AngularInterval.Convex; // Class representing an angular interval with the additional property that the region is convex.\nClass CutAngle; // Class representing an oriented point in 1-dimensional spherical space, meaning an azimuth angle and a direction (increasing or decreasing angles) along the circle.\nClass CutAngles; // Class containing factory methods for constructing CutAngle instances.\nClass Point1S; // This class represents a point on the 1-sphere, or in other words, an azimuth angle on a circle.\nClass RegionBSPTree1S; // BSP tree representing regions in 1D spherical space.\nClass RegionBSPTree1S.RegionNode1S; // BSP tree node for one dimensional spherical space.\nClass Transform1S; // Implementation of the Transform interface for spherical 1D points.\n", "des": "This package provides basic geometry components on the 1-sphere."}
{"index": 250, "repo": "nutch-2.4", "code": "Package: prefix\n\nClasses and Interfaces: \nClass PrefixURLFilter; // Filters URLs based on a file of URL prefixes.\n", "des": "URL filter plugin to include only URLs which match one of a given list of URL prefixes."}
{"index": 3765, "repo": "lucene-analysis-common-9.7.0", "code": "Package: ca\n\nClasses and Interfaces: \nClass CatalanAnalyzer; // Analyzer for Catalan.\n", "des": "Analyzer for Catalan."}
{"index": 322, "repo": "kafka-clients-3.5.0", "code": "Package: provider\n\nClasses and Interfaces: \nInterface ConfigProvider; // A provider of configuration data, which may optionally support subscriptions to configuration changes.\nClass DirectoryConfigProvider; // An implementation of ConfigProvider based on a directory of files.\nClass EnvVarConfigProvider; // An implementation of ConfigProvider based on environment variables.\nClass FileConfigProvider; // An implementation of ConfigProvider that represents a Properties file.\n", "des": "Provides a pluggable interface and some implementations for late-binding in configuration values."}
{"index": 3039, "repo": "spring-web-6.0.11", "code": "Package: multipart\n\nSub Packages: \npackage multipart.support; // Support classes for the multipart resolution framework.\n\nClasses and Interfaces: \npublic class MaxUploadSizeExceededException extends MultipartException; // MultipartException subclass thrown when an upload exceeds the maximum upload size allowed.\npublic class MultipartException extends org.springframework.core.NestedRuntimeException; // Exception thrown when multipart resolution fails.\npublic interface MultipartFile extends org.springframework.core.io.InputStreamSource; // A representation of an uploaded file received in a multipart request.\npublic interface MultipartHttpServletRequest extends HttpServletRequest, MultipartRequest; // Provides additional methods for dealing with multipart content within a servlet request, allowing to access uploaded files.\npublic interface MultipartRequest; // This interface defines the multipart request access operations that are exposed for actual multipart requests.\npublic interface MultipartResolver; // A strategy interface for multipart file upload resolution in accordance with RFC 1867.\n", "des": "Multipart resolution framework for handling file uploads."}
{"index": 1031, "repo": "hadoop-aws-3.3.6", "code": "Package: magic\n\nClasses and Interfaces: \nClass MagicCommitTracker; // Put tracker for Magic commits.\nClass MagicS3GuardCommitter; // This is a dedicated committer which requires the \"magic\" directory feature of the S3A Filesystem to be enabled; it then uses paths for task and job attempts in magic paths, so as to ensure that the final output goes direct to the destination directory.\nClass MagicS3GuardCommitterFactory; // Factory for the Magic committer.\n", "des": "This is the \"Magic\" committer and support."}
{"index": 2941, "repo": "groovy-4.0.13", "code": "Package: vmplugin\n\nClasses and Interfaces: \npublic interface VMPlugin; // Interface to access VM version based actions.\npublic class VMPluginFactory extends Object; // Factory class to get functionality based on the VM version.\n", "des": "JVM version specific classes."}
{"index": 1422, "repo": "spring-boot-actuator-3.1.1", "code": "Package: client\n\nClasses and Interfaces: \n@Deprecated(since=\"3.0.0\", forRemoval=true) public class DefaultRestTemplateExchangeTagsProvider extends Object implements RestTemplateExchangeTagsProvider;\npublic class ObservationRestTemplateCustomizer extends Object implements org.springframework.boot.web.client.RestTemplateCustomizer; // RestTemplateCustomizer that configures the RestTemplate to record request observations.\n@Deprecated(since=\"3.0.0\", forRemoval=true) public final class RestTemplateExchangeTags extends Object;\n@FunctionalInterface @Deprecated(since=\"3.0.0\", forRemoval=true) public interface RestTemplateExchangeTagsProvider;\n", "des": "Actuator support for web client metrics."}
{"index": 2377, "repo": "pulsar-client-api-3.0.0", "code": "Package: classification\n\nClasses and Interfaces: \n@Public @Stable public class InterfaceAudience extends Object; // Annotation to inform users of a package, class or method's intended audience.\n@Documented @Retention(RUNTIME) public static @interface InterfaceAudience.LimitedPrivate; // Intended for use only within the project(s) specified in the annotation.\n@Documented @Retention(RUNTIME) public static @interface InterfaceAudience.Private; // Intended for use only within the project itself.\n@Documented @Retention(RUNTIME) public static @interface InterfaceAudience.Public; // Intended for use by any project or application.\n@Public @Stable public class InterfaceStability extends Object; // Annotation to inform users of how much to rely on a particular package, class or method not changing over time.\n@Documented public static @interface InterfaceStability.Evolving; // Evolving, but can break compatibility at minor release (i.e.\n@Documented public static @interface InterfaceStability.Stable; // Can evolve while retaining compatibility for minor release boundaries.; can break compatibility only at major release (ie.\n@Documented public static @interface InterfaceStability.Unstable; // No guarantee is provided as to reliability or stability across any level of release granularity.\n", "des": "Annotations used across the whole project."}
{"index": 1655, "repo": "jena-core-4.9.0", "code": "Package: xmlinput0\n\nClasses and Interfaces: \npublic interface ALiteral extends ANode; // A string literal property value from an RDF/XML file.\npublic interface AResource; // A URI or blank node reported to a StatementHandler.\npublic class ARP0 extends Object implements ARPConfig; // Another RDF Parser.\npublic interface ARPConfig; // Used to set event handlers and options on ARP0, SAX2Model, and SAX2RDF instances.\npublic interface ARPErrorNumbers; // Error numbers used by ARP.\npublic interface ARPEventHandler extends StatementHandler, ExtendedHandler, NamespaceHandler; // Convenience generalization of all ARP handler interfaces.\npublic class ARPHandlers extends Object; // The interface to set the various handlers on ARP.\npublic class ARPOptions extends Object implements ARPErrorNumbers; // The interface to set the various options on ARP.\npublic class DOM2Model extends SAX2Model; // Transform DOM nodes of RDF.XML into Jena Models.\npublic interface ExtendedHandler; // Extended callbacks from a reader to an RDF application.\npublic class FatalParsingErrorException extends RuntimeException; // This exception should only be seen in user code when using SAX2RDF or SAX2Model.\npublic interface NamespaceHandler; // The interface for being notified about namespace use in an RDF/XML document.\npublic class NTriple extends Object implements ARPErrorNumbers; // A command line interface into ARP.\npublic class ParseException extends ParseException; // An exception during the RDF processing of ARP.\npublic class RDFXMLReader0 extends Object implements RDFReaderI, ARPErrorNumbers; // Interface between Jena and ARP.\npublic class SAX2Model extends SAX2RDF; // Use arbitrary SAX input to Jena.\npublic class SAX2RDF extends SAX2RDFImpl implements ARPConfig; // Allows connecting an arbitrary source of SAX events with ARP.\npublic interface StatementHandler; // The callback from a reader to an RDF application.\npublic class StAX2Model extends Object; // A collection of convenient functions to parse an XML stream using ARP.\npublic class StAX2SAX extends Object; // Bridge StAX and SAX parsing.\npublic class XMLLiteralType0 extends BaseDatatype implements RDFDatatype; // Builtin data type to represent XMLLiteral (i.e.\n", "des": "A parser for RDF/XML."}
{"index": 2139, "repo": "wicket-core-10.0.0-M1", "code": "Package: locator\n\nClasses and Interfaces: \npublic final class EmptyResourceNameIterator extends ResourceNameIterator; // A ResourceNameIterator that doesn't find any resources.\npublic class ExtensionResourceNameIterator extends Object implements Iterator<String>; // Iterate over a set of extensions.\npublic interface IResourceNameIterator extends Iterator<String>; // Contains the logic to locate a resource based on a path, style (see Session), variation, locale and extension strings.\npublic interface IResourceStreamLocator; // Interface for code that locates resources, taking into account variations for locale and style.\npublic class LocaleResourceNameIterator extends Object implements Iterator<String>; // Given a Locale it'll iterate over all possible combinations of the attrs making up the Locale.\npublic class OsgiResourceStreamLocator extends ResourceStreamLocator; // OSGI specific resource stream factory\npublic class ResourceNameIterator extends Object implements IResourceNameIterator; // Contains the logic to locate a resource based on a path, style (see Session), variation, locale and extension strings.\npublic class ResourceStreamLocator extends Object implements IResourceStreamLocator; // Locates Wicket resources.\npublic class StyleAndVariationResourceNameIterator extends Object implements Iterator<String>; // Iterate over all possible combinations of style and variation\n", "des": "Locators for finding/ loading resources."}
{"index": 1425, "repo": "spring-boot-actuator-3.1.1", "code": "Package: server\n\nClasses and Interfaces: \n@Deprecated(since=\"3.0.0\", forRemoval=true) public class DefaultWebFluxTagsProvider extends Object implements WebFluxTagsProvider;\n@Deprecated(since=\"3.0.0\", forRemoval=true) public final class WebFluxTags extends Object;\n@FunctionalInterface @Deprecated(since=\"3.0.0\", forRemoval=true) public interface WebFluxTagsContributor;\n@FunctionalInterface @Deprecated(since=\"3.0.0\", forRemoval=true) public interface WebFluxTagsProvider;\n", "des": "Actuator support for WebFlux metrics."}
{"index": 1821, "repo": "pulsar-client-original-3.0.0", "code": "Package: auth\n\nClasses and Interfaces: \npublic class AuthenticationBasic extends Object implements Authentication, EncodedAuthenticationParameterSupport;\npublic class AuthenticationDataBasic extends Object implements AuthenticationDataProvider;\npublic class AuthenticationDataKeyStoreTls extends Object implements AuthenticationDataProvider;\npublic class AuthenticationDataNull extends Object implements AuthenticationDataProvider;\npublic class AuthenticationDataTls extends Object implements AuthenticationDataProvider;\npublic class AuthenticationDataToken extends Object implements AuthenticationDataProvider;\npublic class AuthenticationDisabled extends Object implements Authentication, EncodedAuthenticationParameterSupport;\npublic class AuthenticationKeyStoreTls extends Object implements Authentication, EncodedAuthenticationParameterSupport; // This plugin requires these parameters: keyStoreType, keyStorePath, and keyStorePassword.\npublic class AuthenticationTls extends Object implements Authentication, EncodedAuthenticationParameterSupport; // This plugin requires these parameters tlsCertFile: A file path for a client certificate.\npublic class AuthenticationToken extends Object implements Authentication, EncodedAuthenticationParameterSupport; // Token based authentication provider.\n", "des": "Pulsar Client authentication."}
{"index": 1255, "repo": "spring-core-6.0.11", "code": "Package: predicate\n\nClasses and Interfaces: \npublic class ProxyHintsPredicates extends Object; // Generator of ProxyHints predicates, testing whether the given hints match the expected behavior for proxies.\npublic class ReflectionHintsPredicates extends Object; // Generator of ReflectionHints predicates, testing whether the given hints match the expected behavior for reflection.\npublic static class ReflectionHintsPredicates.ConstructorHintPredicate extends ReflectionHintsPredicates.ExecutableHintPredicate<Constructor<?>>;\npublic abstract static class ReflectionHintsPredicates.ExecutableHintPredicate<T extends Executable> extends Object implements Predicate<RuntimeHints>;\npublic static class ReflectionHintsPredicates.FieldHintPredicate extends Object implements Predicate<RuntimeHints>;\npublic static class ReflectionHintsPredicates.MethodHintPredicate extends ReflectionHintsPredicates.ExecutableHintPredicate<Method>;\npublic static class ReflectionHintsPredicates.TypeHintPredicate extends Object implements Predicate<RuntimeHints>;\npublic class ResourceHintsPredicates extends Object; // Generator of ResourceHints predicates, testing whether the given hints match the expected behavior for resources.\npublic abstract class RuntimeHintsPredicates extends Object; // Static generator of predicates that test whether the given RuntimeHints instance matches the expected behavior for reflection, resource, serialization, or proxy generation.\npublic class SerializationHintsPredicates extends Object; // Generator of SerializationHints predicates, testing whether the given hints match the expected behavior for serialization.\n", "des": "Predicate support for runtime hints."}
{"index": 699, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: dsl\n\nSub Packages: \npackage dsl.amqp; // Provides AMQP Components support for Spring Integration Java DSL.\npackage dsl.channel; // Contains MessageChannel Builders DSL.\npackage dsl.config; // Provides config classes of the Spring Integration Java DSL.\npackage dsl.context; // The context support classes for Spring Integration Java DSL.\npackage dsl.core; // Provides core classes of the Spring Integration Java DSL.\npackage dsl.feed; // Provides Feed Components support for Spring Integration Java DSL.\npackage dsl.file; // Provides File Components support for Spring Integration Java DSL.\npackage dsl.ftp; // Provides FTP Components support for Spring Integration Java DSL.\npackage dsl.http; // Provides HTTP Components support for Spring Integration Java DSL.\npackage dsl.jms; // Provides JMS Components support for Spring Integration Java DSL.\npackage dsl.jpa; // Provides JPA Components support for Spring Integration Java DSL.\npackage dsl.kafka; // Provides Kafka Components support for Spring Integration Java DSL.\npackage dsl.mail; // Provides Mail Components support for Spring Integration Java DSL.\npackage dsl.scripting; // Provides Scripting Components support for Spring Integration Java DSL.\npackage dsl.sftp; // Provides SFTP Components support for Spring Integration Java DSL.\npackage dsl.support; // Provides various support classes used across Spring Integration Java DSL Components.\npackage dsl.transaction; // Provides classes supporting Transactions.\n\nClasses and Interfaces: \nInterface IntegrationFlow; // The main Integration DSL abstraction.\nInterface IntegrationFlows.ChannelsFunction; // The Channels-specific Function.\nInterface IntegrationFlows.MessageProducersFunction; // The MessageProducers-specific Function.\nInterface IntegrationFlows.MessageSourcesFunction; // The MessageSources-specific Function.\nInterface IntegrationFlows.MessagingGatewaysFunction; // The MessagingGateways-specific Function.\nClass AbstractRouterSpec<S extends AbstractRouterSpec<S,R>,R extends org.springframework.integration.router.AbstractMessageRouter>; // A MessageHandlerSpec for AbstractMessageRouters.\nClass Adapters;\nClass AggregatorSpec; // A CorrelationHandlerSpec for an AggregatingMessageHandler.\nClass BarrierSpec; // A MessageHandlerSpec for the BarrierMessageHandler.\nClass Channels;\n", "des": "Root package of the Spring Integration Java DSL."}
{"index": 1722, "repo": "spring-jdbc-6.0.11", "code": "Package: jdbc\n\nSub Packages: \npackage jdbc.config; // Defines the Spring JDBC configuration namespace.\npackage jdbc.core; // Provides the core JDBC framework, based on JdbcTemplate and its associated callback interfaces and helper objects.\npackage jdbc.datasource; // Provides a utility class for easy DataSource access, a PlatformTransactionManager for a single DataSource, and various simple DataSource implementations.\npackage jdbc.object; // The classes in this package represent RDBMS queries, updates, and stored procedures as threadsafe, reusable objects.\npackage jdbc.support; // Support classes for the JDBC framework, used by the classes in the jdbc.core and jdbc.object packages.\n\nClasses and Interfaces: \npublic class BadSqlGrammarException extends org.springframework.dao.InvalidDataAccessResourceUsageException; // Exception thrown when SQL specified is invalid.\npublic class CannotGetJdbcConnectionException extends org.springframework.dao.DataAccessResourceFailureException; // Fatal exception thrown when we can't connect to an RDBMS using JDBC.\npublic class IncorrectResultSetColumnCountException extends org.springframework.dao.DataRetrievalFailureException; // Data access exception thrown when a result set did not have the correct column count, for example when expecting a single column but getting 0 or more than 1 columns.\npublic class InvalidResultSetAccessException extends org.springframework.dao.InvalidDataAccessResourceUsageException; // Exception thrown when a ResultSet has been accessed in an invalid fashion.\npublic class JdbcUpdateAffectedIncorrectNumberOfRowsException extends org.springframework.dao.IncorrectUpdateSemanticsDataAccessException; // Exception thrown when a JDBC update affects an unexpected number of rows.\npublic class LobRetrievalFailureException extends org.springframework.dao.DataRetrievalFailureException; // Exception to be thrown when a LOB could not be retrieved.\npublic class SQLWarningException extends org.springframework.dao.UncategorizedDataAccessException; // Exception thrown when we're not ignoring SQLWarnings.\npublic class UncategorizedSQLException extends org.springframework.dao.UncategorizedDataAccessException; // Exception thrown when we can't classify an SQLException into one of our generic data access exceptions.\n", "des": "The classes in this package make JDBC easier to use and reduce the likelihood of common errors."}
{"index": 3653, "repo": "solr-core-9.3.0", "code": "Package: admin\n\nSub Packages: \npackage admin.api; // V2 API implementations for \"admin\" APIs.\n\nClasses and Interfaces: \nInterface BaseHandlerApiSupport.ApiCommand;\nInterface CoreAdminHandler.CoreAdminOp;\nClass AdminHandlersProxy; // Static methods to proxy calls to an Admin (GET) API to other nodes in the cluster and return a combined response\nClass BaseHandlerApiSupport; // This is a utility class to provide an easy mapping of request handlers which support multiple commands to the V2 API format (core admin api, collections api).\nClass ClusterStatus;\nClass CollectionsHandler;\nClass ColStatus; // Report low-level details of collection.\nClass ConfigSetsHandler; // A SolrRequestHandler for ConfigSets API requests.\nClass ContainerPluginsApi; // API to maintain container-level plugin configurations.\nClass CoreAdminHandler;\nClass CoreAdminHandler.CallInfo;\nClass CoreAdminHandler.CoreAdminAsyncTracker;\nClass CoreAdminHandler.CoreAdminAsyncTracker.TaskObject; // Helper class to manage the tasks to be tracked.\nClass HealthCheckHandler; // Health Check Handler for reporting the health of a specific node.\nClass IndexSizeEstimator; // Estimates the raw size of all uncompressed indexed data by scanning term, docValues and stored fields data.\nClass IndexSizeEstimator.Estimate;\nClass IndexSizeEstimator.Item;\nClass IndexSizeEstimator.ItemPriorityQueue;\nClass IndexSizeEstimator.MapWriterSummaryStatistics;\nClass InfoHandler;\nClass InstallCoreDataOp; // v1 shim implementation of the \"Install Core Data\" API, a core-admin API used to implement the \"Install Shard Data\" Collection-Admin functionality\nClass LoggingHandler; // A request handler to show which loggers are registered and allows you to set them\nClass LukeRequestHandler; // Exposes the internal lucene index.\nClass MetricsCollectorHandler; // Handler to collect and aggregate metric reports.\nClass MetricsHandler; // Request handler to return metrics\nClass PluginInfoHandler;\nClass PropertiesRequestHandler;\nClass SecurityConfHandler;\nClass SecurityConfHandler.SecurityConfig; // Object to hold security.json as nested Map<String,Object> and optionally its version.\nClass SecurityConfHandlerLocal; // Security Configuration Handler which works on standalone local files\nClass SecurityConfHandlerZk; // Security Configuration Handler which works with Zookeeper\n", "des": "SolrRequestHandler implementations for powering he Solr Admin UI"}
{"index": 3539, "repo": "opennlp-tools-2.2.0", "code": "Package: parser\n\nSub Packages: \npackage parser.chunking; // Package containing code for performing full syntactic parsing using shift/reduce-style decisions.\npackage parser.treeinsert; // Package containing experimental code for performing full syntactic parsing using attachment decisions.\n\nClasses and Interfaces: \nInterface GapLabeler; // Represents a labeler for nodes which contain traces so that these traces can be predicted by a Parser.\nInterface HeadRules; // Encoder for head rules associated with parsing.\nInterface Parser; // Defines common methods for full-syntactic parsers.\nInterface ParserEvaluationMonitor; // A marker interface for evaluating parsers.\nClass AbstractBottomUpParser; // Abstract class which contains code to tag and chunk parses for bottom up parsing and leaves implementation of advancing parses and completing parses to extend class.\nClass AbstractContextGenerator; // Abstract class containing many of the methods used to generate contexts for parsing.\nClass AbstractParserEventStream; // Abstract class extended by parser event streams which perform tagging and chunking.\nClass ChunkContextGenerator; // Creates predictive context for the pre-chunking phases of parsing.\nClass ChunkSampleStream;\nClass Cons; // Holds feature information about a specific Parse node.\nClass Constituent; // Holds constituents when reading parses.\nClass Parse; // Data structure for holding parse constituents.\nClass ParserChunkerFactory;\nClass ParserChunkerSequenceValidator; // The parser chunker SequenceValidator implementation.\nClass ParserCrossValidator; // Cross validator for a Parser.\nClass ParserEvaluator; // This implementation of Evaluator behaves like EVALB with no exceptions, e.g, without removing punctuation tags, or equality between ADVP and PRT, as in COLLINS convention.\nClass ParserFactory;\nClass ParserModel; // This is the default ParserModel implementation.\nClass ParseSampleStream;\nClass PosSampleStream;\nEnum ParserEventTypeEnum; // Enumeration of event types for a Parser.\nEnum ParserType; // Enumeration of supported Parser types.\n", "des": "Package containing common code for performing full syntactic parsing."}
{"index": 507, "repo": "commons-vfs2-2.9.0", "code": "Package: auth\n\nClasses and Interfaces: \nClass StaticUserAuthenticator; // Provides always the same credentials data passed in with the constructor.\n", "des": "VFS Authentication implementation"}
{"index": 2513, "repo": "spring-security-core-6.1.2", "code": "Package: access\n\nSub Packages: \npackage access.annotation; // Support for JSR-250 and Spring Security @Secured annotations.\npackage access.event; // Authorization event and listener classes.\npackage access.expression; // Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter annotations.\npackage access.hierarchicalroles; // Role hierarchy implementation.\npackage access.intercept; // Abstract level security interception classes which are responsible for enforcing the configured security constraints for a secure object.\npackage access.method; // Provides SecurityMetadataSource implementations for securing Java method invocations via different AOP libraries.\npackage access.prepost; // Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter annotations.\npackage access.vote; // Implements a vote-based approach to authorization decisions.\n\nClasses and Interfaces: \n@Deprecated public interface AccessDecisionManager;\n@Deprecated public interface AccessDecisionVoter<S>;\npublic class AccessDeniedException extends RuntimeException; // Thrown if an Authentication object does not hold a required authority.\n@Deprecated public interface AfterInvocationProvider;\npublic class AuthorizationServiceException extends AccessDeniedException; // Thrown if an authorization request could not be processed due to a system problem.\npublic interface ConfigAttribute extends Serializable; // Stores a security system related configuration attribute.\npublic interface PermissionCacheOptimizer extends org.springframework.aop.framework.AopInfrastructureBean; // Allows permissions to be pre-cached when using pre or post filtering with expressions\npublic interface PermissionEvaluator extends org.springframework.aop.framework.AopInfrastructureBean; // Strategy used in expression evaluation to determine whether a user has a permission or permissions for a given domain object.\npublic class SecurityConfig extends Object implements ConfigAttribute; // Stores a ConfigAttribute as a String.\npublic interface SecurityMetadataSource extends org.springframework.aop.framework.AopInfrastructureBean; // Implemented by classes that store and can identify the ConfigAttributes that applies to a given secure object invocation.\n", "des": "Core access-control related code, including security metadata related classes, interception code, access control annotations, EL support and voter-based implementations of the central AccessDecisionManager interface."}
{"index": 1611, "repo": "spring-data-neo4j-7.1.2", "code": "Package: callback\n\nClasses and Interfaces: \n@FunctionalInterface @API(status=STABLE, since=\"6.3.0\") public interface AfterConvertCallback<T> extends EntityCallback<T>; // A callback that can be used to modify an instance of a Neo4jPersistentEntity after it has been converted: That is, when a Neo4j record has been fully processed and the entity and all its associations have been processed.\n@API(status=STABLE, since=\"6.0.2\") public final class AuditingBeforeBindCallback extends Object implements BeforeBindCallback<Object>, Ordered; // EntityCallback to populate auditing related fields on an entity about to be bound to a record.\n@FunctionalInterface @API(status=STABLE, since=\"6.0.2\") public interface BeforeBindCallback<T> extends EntityCallback<T>; // Entity callback triggered before an Entity is bound to a record (represented by a java.util.Map<String, Object>).\n@API(status=INTERNAL, since=\"6.0.2\") public final class EventSupport extends Object; // Utility class that orchestrates EntityCallbacks.\n@API(status=STABLE, since=\"6.0.2\") public final class ReactiveAuditingBeforeBindCallback extends Object implements ReactiveBeforeBindCallback<Object>, Ordered; // Reactive EntityCallback to populate auditing related fields on an entity about to be bound to a record.\n@FunctionalInterface @API(status=STABLE, since=\"6.0.2\") public interface ReactiveBeforeBindCallback<T> extends EntityCallback<T>; // Entity callback triggered before an Entity is bound to a record (represented by a java.util.Map<String, Object>).\n@API(status=INTERNAL, since=\"6.0.2\") public final class ReactiveEventSupport extends Object; // Utility class that orchestrates EntityCallbacks.\n", "des": "This package contains the callback API."}
{"index": 3633, "repo": "lucene-misc-9.7.0", "code": "Package: fst\n\nClasses and Interfaces: \nClass ListOfOutputs<T>; // Wraps another Outputs implementation and encodes one or more of its output values.\nClass UpToTwoPositiveIntOutputs; // An FST Outputs implementation where each output is one or two non-negative long values.\nClass UpToTwoPositiveIntOutputs.TwoLongs; // Holds two long outputs.\n", "des": "Misc FST classes."}
{"index": 1141, "repo": "hadoop-yarn-api-3.3.6", "code": "Package: resource\n\nClasses and Interfaces: \nClass ResourceUtils; // Helper class to read the resource-types to be supported by the system.\n", "des": "Package org.apache.hadoop.yarn.util.resource contains classes which is used as utility class for resource profile computations."}
{"index": 3522, "repo": "opennlp-tools-2.2.0", "code": "Package: masc\n\nClasses and Interfaces: \nClass MascDocument;\nClass MascDocumentStream;\nClass MascNamedEntityParser; // A class to process the MASC Named entity stand-off annotation file\nClass MascNamedEntitySampleStream;\nClass MascNamedEntitySampleStreamFactory<P>;\nClass MascPennTagParser; // A class for parsing MASC's Penn tagging/tokenization stand-off annotation\nClass MascPOSSampleStream;\nClass MascPOSSampleStreamFactory<P>;\nClass MascSentence;\nClass MascSentenceSampleStream;\nClass MascSentenceSampleStreamFactory<P>;\nClass MascToken; // A specialized Span to express tokens in documents.\nClass MascTokenSampleStream;\nClass MascTokenSampleStreamFactory<P>;\nClass MascWord;\n", "des": "Experimental package related to the MASC corpus format."}
{"index": 2273, "repo": "spring-vault-core-3.0.4", "code": "Package: security\n\nClasses and Interfaces: \npublic class VaultBytesEncryptor extends Object implements BytesEncryptor; // Vault-based BytesEncryptor using Vault's transit backend.\npublic class VaultBytesKeyGenerator extends Object implements BytesKeyGenerator; // Random byte generator using Vault's transit backend to generate high-quality random bytes of the configured length.\n", "des": "Integration with Spring Security."}
{"index": 3828, "repo": "lucene-analysis-common-9.7.0", "code": "Package: ext\n\nClasses and Interfaces: \nClass ArabicStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass ArmenianStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass BasqueStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass CatalanStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass DanishStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass DutchStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass EnglishStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass EstonianStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass FinnishStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass FrenchStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass German2Stemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass GermanStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass GreekStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass HindiStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass HungarianStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass IndonesianStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass IrishStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass ItalianStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass KpStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass LithuanianStemmer; // This class implements the stemming algorithm defined by a snowball script.\n", "des": "Autogenerated snowball stemmer implementations."}
{"index": 1307, "repo": "groovy-all-4.0.13", "code": "Package: security\n\nClasses and Interfaces: \npublic final class GroovyCodeSourcePermission extends BasicPermission; // Permission required to explicitly specify a codebase for a groovy script whose codebase cannot be determined.\n", "des": "Security-related classes"}
{"index": 3269, "repo": "opencms-core-15.0", "code": "Package: history\n\nClasses and Interfaces: \nInterface I_CmsHistoryResource; // A historical version of a resource in the OpenCms VFS resource history.\nClass CmsHistoryFile; // A historical version of a file in the OpenCms VFS resource history.\nClass CmsHistoryFolder; // A historical version of a file in the OpenCms VFS resource history.\nClass CmsHistoryPrincipal; // Describes an OpenCms historical principal entry.\nClass CmsHistoryProject; // Describes an OpenCms historical project entry.\nClass CmsHistoryResourceHandler; // Resource init handler that loads historical versions of resources.\n", "des": "This package contains the classes to deal with the OpenCms VFS history archive."}
{"index": 3311, "repo": "opencms-core-15.0", "code": "Package: fields\n\nClasses and Interfaces: \nInterface I_CmsSearchFieldConfiguration; // Interface for search field configurations used by I_CmsSearchIndex and configured in the opencms-search.xml (see CmsSearchConfiguration).\nInterface I_CmsSearchFieldMapping; // Describes a mapping of a piece of content from an OpenCms VFS resource to a field of a search index.\nClass A_CmsSearchFieldConfiguration; // Base class for a typical field configuration.\nClass CmsGeoCoordinateFieldMapping; // Class extracting the Geo coordinates from a content field.\nClass CmsLuceneField; // An individual field configuration in a Lucene search index.\nClass CmsLuceneFieldConfiguration; // Describes a configuration of fields that are used in building a search index.\nClass CmsMacroSearchFieldMapping; // Field mapping to resolve macros as for gallery names.\nClass CmsSearchField; // A abstract implementation for a search field.\nClass CmsSearchFieldConfiguration; // Abstract implementation for OpenCms search field configurations.\nClass CmsSearchFieldConfigurationOldCategories; // Describes a field configuration using the old (pre 8.0) logic for categories that depend on properties.\nClass CmsSearchFieldMapping; // Describes a mapping of a piece of content from an OpenCms VFS resource to a field of a search index.\nClass CmsSearchFieldMappingType; // Describes a possible mapping type for a piece of content used in building a search index.\n", "des": "These classes control the mapping of the OpenCms content to the Lucene search fields."}
{"index": 370, "repo": "commons-geometry-euclidean-1.0", "code": "Package: path\n\nClasses and Interfaces: \nClass AbstractLinePathConnector; // Abstract class for joining collections of line subsets into connected paths.\nClass AbstractLinePathConnector.ConnectableLineSubset; // Internal class used to connect line subsets together.\nClass InteriorAngleLinePathConnector; // Line subset connector that selects between multiple connection options based on the resulting interior angle.\nClass InteriorAngleLinePathConnector.Maximize; // Implementation of InteriorAngleLinePathConnector that chooses line subset connections that produce the largest interior angles.\nClass InteriorAngleLinePathConnector.Minimize; // Implementation of InteriorAngleLinePathConnector that chooses line subset connections that produce the smallest interior angles.\nClass LinePath; // Class representing a connected path of line convex subsets.\nClass LinePath.Builder; // Class used to build line paths.\n", "des": "This package provides classes for working with connected sequences of line segments and other line subsets."}
{"index": 1510, "repo": "spring-context-6.0.11", "code": "Package: config\n\nClasses and Interfaces: \npublic class ContextNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for the 'context' namespace.\n", "des": "Support package for advanced application context configuration, with XML schema being the primary configuration format."}
{"index": 920, "repo": "commons-compress-1.23.0", "code": "Package: gzip\n\nClasses and Interfaces: \nClass GzipCompressorInputStream; // Input stream that decompresses .gz files.\nClass GzipCompressorOutputStream; // Compressed output stream using the gzip format.\nClass GzipParameters; // Parameters for the GZIP compressor.\nClass GzipUtils; // Utility code for the gzip compression format.\n", "des": "Provides stream classes for compressing and decompressing streams using the GZip algorithm."}
{"index": 1546, "repo": "spring-context-6.0.11", "code": "Package: bsh\n\nClasses and Interfaces: \npublic class BshScriptEvaluator extends Object implements ScriptEvaluator, org.springframework.beans.factory.BeanClassLoaderAware; // BeanShell-based implementation of Spring's ScriptEvaluator strategy interface.\npublic class BshScriptFactory extends Object implements ScriptFactory, org.springframework.beans.factory.BeanClassLoaderAware; // ScriptFactory implementation for a BeanShell script.\npublic abstract class BshScriptUtils extends Object; // Utility methods for handling BeanShell-scripted objects.\npublic static final class BshScriptUtils.BshExecutionException extends org.springframework.core.NestedRuntimeException; // Exception to be thrown on script execution failure.\n", "des": "Package providing integration of BeanShell (and BeanShell2) into Spring's scripting infrastructure."}
{"index": 1987, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: transaction\n\nSub Packages: \npackage transaction.jta; // Auto-configuration for JTA.\n\nClasses and Interfaces: \n@FunctionalInterface public interface PlatformTransactionManagerCustomizer<T extends org.springframework.transaction.PlatformTransactionManager>; // Callback interface that can be implemented by beans wishing to customize PlatformTransactionManagers whilst retaining default auto-configuration.\n@AutoConfiguration @ConditionalOnClass(org.springframework.transaction.PlatformTransactionManager.class) @EnableConfigurationProperties(TransactionProperties.class) public class TransactionAutoConfiguration extends Object; // Auto-configuration for Spring transaction.\n@Configuration(proxyBeanMethods=false) @ConditionalOnBean(org.springframework.transaction.TransactionManager.class) @ConditionalOnMissingBean(org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration.class) public static class TransactionAutoConfiguration.EnableTransactionManagementConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @EnableTransactionManagement(proxyTargetClass=true) @ConditionalOnProperty(prefix=\"spring.aop\", name=\"proxy-target-class\", havingValue=\"true\", matchIfMissing=true) public static class TransactionAutoConfiguration.EnableTransactionManagementConfiguration.CglibAutoProxyConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @EnableTransactionManagement(proxyTargetClass=false) @ConditionalOnProperty(prefix=\"spring.aop\", name=\"proxy-target-class\", havingValue=\"false\") public static class TransactionAutoConfiguration.EnableTransactionManagementConfiguration.JdkDynamicAutoProxyConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @ConditionalOnSingleCandidate(org.springframework.transaction.PlatformTransactionManager.class) public static class TransactionAutoConfiguration.TransactionTemplateConfiguration extends Object;\npublic class TransactionManagerCustomizers extends Object; // A collection of PlatformTransactionManagerCustomizer.\n@ConfigurationProperties(prefix=\"spring.transaction\") public class TransactionProperties extends Object implements PlatformTransactionManagerCustomizer<org.springframework.transaction.support.AbstractPlatformTransactionManager>; // Configuration properties that can be applied to an AbstractPlatformTransactionManager.\n", "des": "Auto-configuration for transaction support."}
{"index": 3892, "repo": "solr-solrj-9.3.0", "code": "Package: json\n\nClasses and Interfaces: \nClass BucketBasedJsonFacet; // Represents the top-level response for a bucket-based JSON facet (i.e.\nClass BucketJsonFacet; // Represents an individual bucket result of a \"term\" or \"range\" facet.\nClass HeatmapJsonFacet; // Represents the result of a \"heatmap\" JSON facet.\nClass NestableJsonFacet; // Represents the response to a \"query\" JSON facet.\n", "des": "Allows parsing of JSON query/faceting API responses"}
{"index": 1150, "repo": "commons-math3-3.6.1", "code": "Package: solvers\n\nClasses and Interfaces: \nInterface BaseUnivariateSolver<FUNC extends UnivariateFunction>; // Interface for (univariate real) rootfinding algorithms.\nInterface BracketedRealFieldUnivariateSolver<T extends RealFieldElement<T>>; // Interface for (univariate real) root-finding algorithms that maintain a bracketed solution.\nInterface BracketedUnivariateSolver<FUNC extends UnivariateFunction>; // Interface for (univariate real) root-finding algorithms that maintain a bracketed solution.\nInterface DifferentiableUnivariateSolver; // as of 3.1, replaced by UnivariateDifferentiableSolver\nInterface PolynomialSolver; // Interface for (polynomial) root-finding algorithms.\nInterface UnivariateDifferentiableSolver; // Interface for (univariate real) rootfinding algorithms.\nInterface UnivariateSolver; // Interface for (univariate real) root-finding algorithms.\nClass AbstractDifferentiableUnivariateSolver; // as of 3.1, replaced by AbstractUnivariateDifferentiableSolver\nClass AbstractPolynomialSolver; // Base class for solvers.\nClass AbstractUnivariateDifferentiableSolver; // Provide a default implementation for several functions useful to generic solvers.\nClass AbstractUnivariateSolver; // Base class for solvers.\nClass BaseAbstractUnivariateSolver<FUNC extends UnivariateFunction>; // Provide a default implementation for several functions useful to generic solvers.\nClass BaseSecantSolver; // Base class for all bracketing Secant-based methods for root-finding (approximating a zero of a univariate real function).\nClass BisectionSolver; // Implements the bisection algorithm for finding zeros of univariate real functions.\nClass BracketingNthOrderBrentSolver; // This class implements a modification of the Brent algorithm.\nClass BrentSolver; // This class implements the Brent algorithm for finding zeros of real univariate functions.\nClass FieldBracketingNthOrderBrentSolver<T extends RealFieldElement<T>>; // This class implements a modification of the Brent algorithm.\nClass IllinoisSolver; // Implements the Illinois method for root-finding (approximating a zero of a univariate real function).\nClass LaguerreSolver; // Implements the Laguerre's Method for root finding of real coefficient polynomials.\n", "des": "Root finding algorithms, for univariate real functions."}
{"index": 2292, "repo": "spring-boot-3.1.1", "code": "Package: cloud\n\nClasses and Interfaces: \npublic class CloudFoundryVcapEnvironmentPostProcessor extends Object implements EnvironmentPostProcessor, org.springframework.core.Ordered; // An EnvironmentPostProcessor that knows where to find VCAP (a.k.a.\npublic enum CloudPlatform extends Enum<CloudPlatform>; // Simple detection for well known cloud platforms.\n", "des": "Low level support for Cloud deployments."}
{"index": 3787, "repo": "lucene-analysis-common-9.7.0", "code": "Package: ga\n\nClasses and Interfaces: \nClass IrishAnalyzer; // Analyzer for Irish.\nClass IrishLowerCaseFilter; // Normalises token text to lower case, handling t-prothesis and n-eclipsis (i.e., that 'nAthair' should become 'n-athair')\nClass IrishLowerCaseFilterFactory; // Factory for IrishLowerCaseFilter.\n", "des": "Analyzer for Irish."}
{"index": 1263, "repo": "spring-core-6.0.11", "code": "Package: proxy\n\nClasses and Interfaces: \npublic interface Callback; // All callback interfaces used by Enhancer extend this interface.\npublic interface CallbackFilter; // Map methods of subclasses generated by Enhancer to a particular callback.\npublic abstract class CallbackHelper extends Object implements CallbackFilter;\npublic interface Dispatcher extends Callback; // Dispatching Enhancer callback.\npublic class Enhancer extends AbstractClassGenerator; // Generates dynamic subclasses to enable method interception.\npublic interface Factory; // All enhanced instances returned by the Enhancer class implement this interface.\npublic interface FixedValue extends Callback; // Enhancer callback that simply returns the value to return from the proxied method.\npublic class InterfaceMaker extends AbstractClassGenerator; // Generates new interfaces at runtime.\npublic interface InvocationHandler extends Callback; // InvocationHandler replacement (unavailable under JDK 1.2).\npublic interface LazyLoader extends Callback; // Lazy-loading Enhancer callback.\npublic interface MethodInterceptor extends Callback; // General-purpose Enhancer callback which provides for \"around advice\".\npublic class MethodProxy extends Object; // Classes generated by Enhancer pass this object to the registered MethodInterceptor objects when an intercepted method is invoked.\npublic abstract class Mixin extends Object; // Mixin allows multiple objects to be combined into a single larger object.\npublic static class Mixin.Generator extends AbstractClassGenerator;\npublic interface NoOp extends Callback; // Methods using this Enhancer callback will delegate directly to the default (super) implementation in the base class.\npublic class Proxy extends Object implements Serializable; // This class is meant to be used as replacement for java.lang.reflect.Proxy under JDK 1.2.\npublic interface ProxyRefDispatcher extends Callback; // Dispatching Enhancer callback.\npublic class UndeclaredThrowableException extends CodeGenerationException; // Used by Proxy as a replacement for java.lang.reflect.UndeclaredThrowableException.\n", "des": "Spring's repackaging of the CGLIB proxy package (for internal use only)."}
{"index": 541, "repo": "commons-geometry-core-1.0", "code": "Package: partitioning\n\nSub Packages: \npackage partitioning.bsp; // This package contains classes related to Binary Space Partitioning (BSP) trees.\n\nClasses and Interfaces: \nInterface BoundarySource<C extends HyperplaneConvexSubset<? extends Point<?>>>; // Interface representing an object that can produce region boundaries as a stream of hyperplane convex subsets.\nInterface EmbeddingHyperplane<P extends Point<P>,S extends Point<S>>; // Hyperplane that also embeds a subspace.\nInterface Hyperplane<P extends Point<P>>; // Interface representing a hyperplane, which in a space of dimension n is a subspace of dimension n - 1.\nInterface HyperplaneBoundedRegion<P extends Point<P>>; // Interface representing regions with boundaries defined by hyperplanes or portions of hyperplanes.\nInterface HyperplaneConvexSubset<P extends Point<P>>; // Extension of the HyperplaneSubset interface with the additional restriction that instances represent convex regions of space.\nInterface HyperplaneSubset<P extends Point<P>>; // Interface representing a subset of the points lying in a hyperplane.\nInterface Splittable<P extends Point<P>,S extends Splittable<P,S>>; // Interface representing objects that can be split by Hyperplanes.\nClass AbstractConvexHyperplaneBoundedRegion<P extends Point<P>,S extends HyperplaneConvexSubset<P>>; // Base class for convex hyperplane-bounded regions.\nClass AbstractConvexHyperplaneBoundedRegion.ConvexRegionBoundaryBuilder<P extends Point<P>,S extends HyperplaneConvexSubset<P>>; // Internal class encapsulating the logic for building convex region boundaries from collections of hyperplanes.\nClass AbstractHyperplane<P extends Point<P>>; // Base class for hyperplane implementations.\nClass BoundaryList<P extends Point<P>,S extends HyperplaneConvexSubset<P>>; // Simple implementation of BoundarySource containing boundaries stored in a list.\nClass Split<T>; // Class containing the result of splitting an object with a hyperplane.\nEnum HyperplaneLocation; // Enumeration containing possible locations of a point with respect to a hyperplane.\nEnum SplitLocation; // Enumeration representing the location of a split object with respect to its splitting hyperplane.\n", "des": "This package contains code related to partitioning of spaces by hyperplanes."}
{"index": 2426, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: redis\n\nClasses and Interfaces: \n@AutoConfiguration(after={org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration.class,RedisReactiveHealthContributorAutoConfiguration.class}) @ConditionalOnClass(org.springframework.data.redis.connection.RedisConnectionFactory.class) @ConditionalOnBean(org.springframework.data.redis.connection.RedisConnectionFactory.class) @ConditionalOnEnabledHealthIndicator(\"redis\") public class RedisHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.data.redis.RedisHealthIndicator,org.springframework.data.redis.connection.RedisConnectionFactory>; // Auto-configuration for RedisHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration.class) @ConditionalOnClass({org.springframework.data.redis.connection.ReactiveRedisConnectionFactory.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory.class) @ConditionalOnEnabledHealthIndicator(\"redis\") public class RedisReactiveHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.data.redis.RedisReactiveHealthIndicator,org.springframework.data.redis.connection.ReactiveRedisConnectionFactory>; // Auto-configuration for RedisReactiveHealthIndicator.\n", "des": "Auto-configuration for actuator Redis concerns dependent on Spring Data."}
{"index": 2495, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: reactive\n\nClasses and Interfaces: \npublic final class EndpointRequest extends Object; // Factory that can be used to create a ServerWebExchangeMatcher for actuator endpoint locations.\npublic static final class EndpointRequest.EndpointServerWebExchangeMatcher extends org.springframework.boot.security.reactive.ApplicationContextServerWebExchangeMatcher<T>; // The ServerWebExchangeMatcher used to match against actuator endpoints.\npublic static final class EndpointRequest.LinksServerWebExchangeMatcher extends org.springframework.boot.security.reactive.ApplicationContextServerWebExchangeMatcher<T>; // The ServerWebExchangeMatcher used to match against the links endpoint.\n@AutoConfiguration(before=org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration.class, after={HealthEndpointAutoConfiguration.class,InfoEndpointAutoConfiguration.class,WebEndpointAutoConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration.class}) @ConditionalOnClass({org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity.class,org.springframework.security.web.server.WebFilterChainProxy.class}) @ConditionalOnMissingBean({org.springframework.security.web.server.SecurityWebFilterChain.class,org.springframework.security.web.server.WebFilterChainProxy.class}) @ConditionalOnWebApplication(type=REACTIVE) public class ReactiveManagementWebSecurityAutoConfiguration extends Object; // Auto-configuration for Reactive Spring Security when actuator is on the classpath.\n", "des": "Auto-configuration for actuator security using WebFlux."}
{"index": 3822, "repo": "lucene-analysis-common-9.7.0", "code": "Package: tr\n\nClasses and Interfaces: \nClass ApostropheFilter; // Strips all characters after an apostrophe (including the apostrophe itself).\nClass ApostropheFilterFactory; // Factory for ApostropheFilter.\nClass TurkishAnalyzer; // Analyzer for Turkish.\nClass TurkishLowerCaseFilter; // Normalizes Turkish token text to lower case.\nClass TurkishLowerCaseFilterFactory; // Factory for TurkishLowerCaseFilter.\n", "des": "Analyzer for Turkish."}
{"index": 310, "repo": "pdfbox-3.0.0-beta1", "code": "Package: viewerpreferences\n\nClasses and Interfaces: \nClass PDViewerPreferences; // This is the document viewing preferences.\nEnum PDViewerPreferences.BOUNDARY; // Enumeration containing all valid values for boundaries.\nEnum PDViewerPreferences.DUPLEX; // Enumeration containing all valid values for duplex.\nEnum PDViewerPreferences.NON_FULL_SCREEN_PAGE_MODE; // Enumeration containing all valid values for NonFullScreenPageMode.\nEnum PDViewerPreferences.PRINT_SCALING; // Enumeration containing all valid values for printscaling.\nEnum PDViewerPreferences.READING_DIRECTION; // Enumeration containing all valid values for ReadingDirection.\n", "des": "A package to allow access to document viewing preferences."}
{"index": 1149, "repo": "commons-math3-3.6.1", "code": "Package: polynomials\n\nClasses and Interfaces: \nClass PolynomialFunction; // Immutable representation of a real polynomial function with real coefficients.\nClass PolynomialFunction.Parametric; // Dedicated parametric polynomial class.\nClass PolynomialFunctionLagrangeForm; // Implements the representation of a real polynomial function in Lagrange Form.\nClass PolynomialFunctionNewtonForm; // Implements the representation of a real polynomial function in Newton Form.\nClass PolynomialSplineFunction; // Represents a polynomial spline function.\nClass PolynomialsUtils; // A collection of static methods that operate on or return polynomials.\n", "des": "Univariate real polynomials implementations, seen as differentiable univariate real functions."}
{"index": 1953, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: ldap\n\nSub Packages: \npackage ldap.embedded; // Auto-configuration for embedded LDAP.\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnClass(org.springframework.ldap.core.ContextSource.class) @EnableConfigurationProperties(LdapProperties.class) public class LdapAutoConfiguration extends Object; // Auto-configuration for LDAP.\n@ConfigurationProperties(prefix=\"spring.ldap\") public class LdapProperties extends Object; // Configuration properties for LDAP.\npublic static class LdapProperties.Template extends Object; // settings.\n", "des": "Auto-configuration for LDAP."}
{"index": 71, "repo": "ignite-core-2.15.0", "code": "Package: sharedfs\n\nClasses and Interfaces: \nInterface SharedFsCheckpointSpiMBean; // Management bean that provides general administrative and configuration information about shared file system checkpoints.\nClass SharedFsCheckpointSpi; // This class defines shared file system CheckpointSpi implementation for checkpoint SPI.\n", "des": "Contains shared file system implementation for checkpoint SPI."}
{"index": 2262, "repo": "spring-vault-core-3.0.4", "code": "Package: env\n\nClasses and Interfaces: \npublic class LeaseAwareVaultPropertySource extends EnumerablePropertySource<VaultOperations>; // PropertySource that requests renewable secrets from SecretLeaseContainer.\npublic class VaultPropertySource extends EnumerablePropertySource<VaultOperations>; // PropertySource that reads keys and values from a VaultTemplate and path.\npublic class VaultPropertySourceNotFoundException extends VaultException; // Exception throws when a VaultPropertySource could not load its properties.\n", "des": "Spring Vault's environment abstraction consisting property source support."}
{"index": 10, "repo": "connect-api-3.5.0", "code": "Package: storage\n\nClasses and Interfaces: \nInterface Converter; // The Converter interface provides support for translating between Kafka Connect's runtime data format and byte[].\nInterface HeaderConverter; // The HeaderConverter interface provides support for translating between Kafka Connect's runtime data format and byte[].\nInterface OffsetStorageReader; // OffsetStorageReader provides access to the offset storage used by sources.\nClass ConverterConfig; // Abstract class that defines the configuration options for Converter and HeaderConverter instances.\nClass SimpleHeaderConverter; // A HeaderConverter that serializes header values as strings and that deserializes header values to the most appropriate numeric, boolean, array, or map representation.\nClass StringConverter; // Converter and HeaderConverter implementation that only supports serializing to strings.\nClass StringConverterConfig; // Configuration options for StringConverter instances.\nEnum ConverterType; // The type of Converter and HeaderConverter.\n", "des": "Provides pluggable interfaces and some implementations for (de)serializing data to and from Kafka"}
{"index": 1956, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: logging\n\nClasses and Interfaces: \npublic class ConditionEvaluationReportLoggingListener extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>; // ApplicationContextInitializer that writes the ConditionEvaluationReport to the log.\npublic class ConditionEvaluationReportMessage extends Object; // A condition evaluation report message that can logged or printed.\n", "des": "Auto-configuration for logging."}
{"index": 1940, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: info\n\nClasses and Interfaces: \n@AutoConfiguration @EnableConfigurationProperties(ProjectInfoProperties.class) public class ProjectInfoAutoConfiguration extends Object; // Auto-configuration for various project information.\n@ConfigurationProperties(prefix=\"spring.info\") public class ProjectInfoProperties extends Object; // Configuration properties for project information.\npublic static class ProjectInfoProperties.Build extends Object; // Build specific info properties.\npublic static class ProjectInfoProperties.Git extends Object; // Git specific info properties.\n", "des": "Auto-configuration for project information."}
{"index": 3415, "repo": "commons-imaging-1.0-alpha3", "code": "Package: xpm\n\nClasses and Interfaces: \nClass XpmImageParser;\nClass XpmImagingParameters; // Xpm format parameters.\n", "des": "The X PixMap image format."}
{"index": 1130, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: scheduler\n\nClasses and Interfaces: \nInterface ResourceUtilizationTracker; // This interface abstracts out how a container contributes to Resource Utilization of the node.\nClass AllocationBasedResourceUtilizationTracker; // An implementation of the ResourceUtilizationTracker that equates resource utilization with the total resource allocated to the container.\nClass ContainerScheduler; // The ContainerScheduler manages a collection of runnable containers.\nClass ContainerSchedulerEvent; // Events consumed by the ContainerScheduler.\nClass UpdateContainerSchedulerEvent; // Update Event consumed by the ContainerScheduler.\nEnum ContainerSchedulerEventType; // Event types associated with ContainerSchedulerEvent.\n", "des": "Container Scheduler"}
{"index": 1222, "repo": "commons-text-1.10.0", "code": "Package: numbers\n\nClasses and Interfaces: \nClass DoubleFormat.Builder; // Builds configured format functions for standard double format types.\nEnum DoubleFormat; // Enum containing standard double format types with methods to produce configured formatter instances.\n", "des": "Provides algorithms for converting numbers to strings."}
{"index": 2805, "repo": "spring-security-oauth2-core-6.1.2", "code": "Package: user\n\nClasses and Interfaces: \npublic class DefaultOidcUser extends DefaultOAuth2User implements OidcUser; // The default implementation of an OidcUser.\npublic interface OidcUser extends OAuth2User, IdTokenClaimAccessor; // A representation of a user Principal that is registered with an OpenID Connect 1.0 Provider.\npublic class OidcUserAuthority extends OAuth2UserAuthority; // A GrantedAuthority that may be associated to an OidcUser.\n", "des": "Provides a model for an OpenID Connect Core 1.0 representation of a user Principal."}
{"index": 882, "repo": "mahout-math-0.13.0", "code": "Package: stat\n\nClasses and Interfaces: \nClass Gamma; // Partially deprecated until unit tests are in place.\nClass Probability; // Partially deprecated until unit tests are in place.\n", "des": "Tools for basic and advanced statistics: Estimators, Gamma functions, Beta functions, Probabilities, Special integrals, etc."}
{"index": 3438, "repo": "hibernate-core-5.6.15.Final", "code": "Package: context\n\nSub Packages: \npackage context.spi; // SPI level contracts around \"current session\" support.\n\nClasses and Interfaces: \nClass TenantIdentifierMismatchException; // Indicates that tenant identifiers did not match in cases where CurrentTenantIdentifierResolver.validateExistingCurrentSessions() returns true and there is a mismatch found.\n", "des": "Defines support for \"current session\" feature."}
{"index": 2102, "repo": "spring-webflux-6.0.11", "code": "Package: method\n\nSub Packages: \npackage method.annotation; // Infrastructure for annotation-based handler method processing.\n\nClasses and Interfaces: \npublic abstract class AbstractHandlerMethodMapping<T> extends AbstractHandlerMapping implements org.springframework.beans.factory.InitializingBean; // Abstract base class for HandlerMapping implementations that define a mapping between a request and a HandlerMethod.\npublic interface HandlerMethodArgumentResolver; // Strategy to resolve the argument value for a method parameter in the context of the current HTTP request.\npublic abstract class HandlerMethodArgumentResolverSupport extends Object implements HandlerMethodArgumentResolver; // Base class for HandlerMethodArgumentResolver implementations with access to a ReactiveAdapterRegistry and methods to check for method parameter support.\npublic class InvocableHandlerMethod extends org.springframework.web.method.HandlerMethod; // Extension of HandlerMethod that invokes the underlying method with argument values resolved from the current HTTP request through a list of HandlerMethodArgumentResolver.\npublic final class RequestMappingInfo extends Object implements RequestCondition<RequestMappingInfo>; // Request mapping information.\npublic static interface RequestMappingInfo.Builder; // Defines a builder for creating a RequestMappingInfo.\npublic static class RequestMappingInfo.BuilderConfiguration extends Object; // Container for configuration options used for request mapping purposes.\npublic abstract class RequestMappingInfoHandlerMapping extends AbstractHandlerMethodMapping<RequestMappingInfo>; // Abstract base class for classes for which RequestMappingInfo defines the mapping between a request and a handler method.\npublic interface SyncHandlerMethodArgumentResolver extends HandlerMethodArgumentResolver; // An extension of HandlerMethodArgumentResolver for implementations that are synchronous in nature and do not block to resolve values.\npublic class SyncInvocableHandlerMethod extends org.springframework.web.method.HandlerMethod; // Extension of HandlerMethod that invokes the underlying method via InvocableHandlerMethod but uses sync argument resolvers only and thus can return directly a HandlerResult with no async wrappers.\n", "des": "Infrastructure for handler method processing."}
{"index": 72, "repo": "ignite-core-2.15.0", "code": "Package: collision\n\nSub Packages: \npackage collision.fifoqueue; // Contains FIFO based collision SPI implementation.\npackage collision.jobstealing; // Contains job stealing collision SPI implementation.\npackage collision.noop; // Contains default no-op collision SPI implementation.\npackage collision.priorityqueue; // Contains priority based collision SPI implementation.\n\nClasses and Interfaces: \nInterface CollisionContext; // Context for resolving collisions.\nInterface CollisionExternalListener; // Listener to be set on CollisionSpi for notification of external collision events (e.g. job stealing).\nInterface CollisionJobContext; // This interface defines set of operations that collision SPI implementation can perform on jobs that are either waiting or executing.\nInterface CollisionSpi; // Collision SPI allows to regulate how grid jobs get executed when they arrive on a destination node for execution.\n", "des": "Contains APIs for collision SPI."}
{"index": 751, "repo": "artemis-odb-2.3.0", "code": "Package: annotations\n\nClasses and Interfaces: \nEnum LinkPolicy.Policy;\nAnnotation Type All; // Auto-configures fields or systems pertaining to aspects.\nAnnotation Type AspectDescriptor; // Auto-configures fields pertaining to aspects.\nAnnotation Type DelayedComponentRemoval; // Extends the lifecycle of this component type, ensuring removed instances are retrievable until all listeners have been notified - regardless of removal method.\nAnnotation Type EntityId; // Marks int and IntBag fields as holding entity id:s.\nAnnotation Type Exclude; // Auto-configures fields or systems pertaining to aspects.\nAnnotation Type Fluid; // Customize how the fluid generator processes your class.\nAnnotation Type FluidMethod; // Customize how the fluid generator processes a component method.\nAnnotation Type LinkPolicy; // Annotation for entity-referencing fields in component types.\nAnnotation Type One; // Auto-configures fields or systems pertaining to aspects.\nAnnotation Type PooledWeaver; // Transforms a Component into a PooledComponent.\nAnnotation Type PrefabData; // Holds the path or identifier for Prefab types.\nAnnotation Type PreserveProcessVisiblity; // When optimizing an EntityProcessingSystem, don't reduce the visibility of BaseSystem.process().\nAnnotation Type Profile; // Profile EntitySystems with user-specified profiler class, implementing ArtemisProfiler.\nAnnotation Type SkipWire; // Skip reflective dependency injection on annotated field or class.\nAnnotation Type Transient; // Never persisted when serializing.\nAnnotation Type UnstableApi; // Classes marked with this annotation may undergo extensive refactoring between releases.\nAnnotation Type Wire; // Customizes reflective injection of ComponentMapper, EntitySystem, Manager, and registered types via WorldConfiguration.register(java.lang.Object).\n", "des": "Annotations used by Artemis, both runtime and during compilation,"}
{"index": 1859, "repo": "spring-test-6.0.11", "code": "Package: servlet\n\nSub Packages: \npackage servlet.client; // Support for testing Spring MVC applications via WebTestClient with MockMvc for server request handling.\npackage servlet.htmlunit; // Server-side support for testing Spring MVC applications with MockMvc and HtmlUnit.\npackage servlet.request; // Contains built-in RequestBuilder implementations.\npackage servlet.result; // Contains built-in ResultMatcher and ResultHandler implementations.\npackage servlet.setup; // Contains built-in MockMvcBuilder implementations.\n\nClasses and Interfaces: \n@FunctionalInterface public interface DispatcherServletCustomizer; // Strategy interface for customizing DispatcherServlet instances that are managed by MockMvc.\npublic final class MockMvc extends Object; // Main entry point for server-side Spring MVC test support.\npublic interface MockMvcBuilder; // Builds a MockMvc instance.\npublic abstract class MockMvcBuilderSupport extends Object; // Base class for MockMvc builder implementations, providing the capability to create a MockMvc instance.\npublic interface MvcResult; // Provides access to the result of an executed request.\npublic interface RequestBuilder; // Builds a MockHttpServletRequest.\npublic interface ResultActions; // Allows applying actions, such as expectations, on the result of an executed request.\n@FunctionalInterface public interface ResultHandler; // A ResultHandler performs a generic action on the result of an executed request — for example, printing debug information.\n@FunctionalInterface public interface ResultMatcher; // A ResultMatcher matches the result of an executed request against some expectation.\npublic interface SmartRequestBuilder extends RequestBuilder; // Extended variant of a RequestBuilder that applies its org.springframework.test.web.servlet.request.RequestPostProcessors as a separate step from the RequestBuilder.buildRequest(jakarta.servlet.ServletContext) method.\n", "des": "Contains server-side support for testing Spring MVC applications."}
{"index": 815, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: wikipedia\n\nClasses and Interfaces: \nClass WikipediaTokenizer; // Extension of StandardTokenizer that is aware of Wikipedia syntax.\nClass WikipediaTokenizerFactory; // Factory for WikipediaTokenizer.\n", "des": "Tokenizer that is aware of Wikipedia syntax."}
{"index": 3574, "repo": "lucene-sandbox-9.7.0", "code": "Package: document\n\nClasses and Interfaces: \nClass BigIntegerPoint; // An indexed 128-bit BigInteger field.\nClass DoublePointMultiRangeBuilder; // Builder for multi range queries for DoublePoints\nClass FloatPointMultiRangeBuilder; // Builder for multi range queries for FloatPoints\nClass FloatPointNearestNeighbor; // KNN search on top of N dimensional indexed float points.\nClass HalfFloatPoint; // An indexed half-float field for fast range filters.\nClass IntPointMultiRangeBuilder; // Builder for multi range queries for IntPoints\nClass LatLonBoundingBox; // An indexed 2-Dimension Bounding Box field for the Geospatial Lat/Lon Coordinate system\nClass LongPointMultiRangeBuilder; // Builder for multi range queries for LongPoints\n", "des": "This package contains several point types: BigIntegerPoint for 128-bit integers LatLonPoint for latitude/longitude geospatial points"}
{"index": 3215, "repo": "commons-configuration2-2.9.0", "code": "Package: fluent\n\nClasses and Interfaces: \nInterface CombinedBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties of a builder for a combined configuration.\nInterface DatabaseBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties for a database configuration.\nInterface FileBasedBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties of a configuration of a file-based configuration builder.\nInterface HierarchicalBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties for a hierarchical configuration.\nInterface INIBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties for a INI configuration.\nInterface JndiBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties for a JNDI configuration.\nInterface MultiFileBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties of a builder managing multiple file-based configurations.\nInterface PropertiesBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties for a properties configuration.\nInterface XMLBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties for a XML configuration.\nClass Configurations; // A convenience class which simplifies the creation of standard configurations and their builders.\nClass Parameters; // A convenience class for creating parameter objects for initializing configuration builder objects.\n", "des": "This package defines a fluent API for setting up fully configured configuration builders."}
{"index": 737, "repo": "spring-data-solr-4.3.15", "code": "Package: result\n\nClasses and Interfaces: \nInterface CountEntry;\nInterface Cursor<T>; // Cursor provides a lazy loading abstraction for fetching documents.\nInterface FacetAndHighlightPage<T>; // FacetAndHighlightPage holds a page for each field targeted by the facet query, each highlight returned by the highlight query as well as the page values returned by the solr query\nInterface FacetEntry; // FacetEntry is returned as result of a FacetQuery holding the key (eg. fieldname, query,...), value and valueCount for the requested facet\nInterface FacetFieldEntry; // Entry for facet on field\nInterface FacetPage<T>; // FacetPage holds a page for each field targeted by the facet query as well as the page values returned by facet.query\nInterface FacetPivotFieldEntry; // Entry for facet pivot field.\nInterface FacetQueryEntry; // Facet Entry for facet via query\nInterface FacetQueryResult<T>; // Hold the results of a solr facet query.\nInterface FieldStatsResult; // Specialization of StatsResult to represent statistic information for a field.\nInterface GroupEntry<T>; // Representation of a group in a GroupResult.\nInterface GroupPage<T>; // Representation of a Group result page, holding one GroupResult for each grouping requested on a org.springframework.data.solr.core.query.GroupQuery.\nInterface GroupResult<T>; // Representation of a group in response to group request (i.e. , , ) will have a GroupResult representation.\nInterface HighlightPage<T>; // HighlightPage holds a page for each field targeted by the highlight query as well as the page values returned by the solr query\nInterface HighlightQueryResult<T>; // Hold the results of a solr highlight query.\nInterface PageKey;\nInterface ScoredPage<T>; // Specific type of Page holding max score information.\nInterface SpellcheckedPage<T>;\nInterface SpellcheckQueryResult;\nInterface StatsPage<T>; // Representation of a Stats result page, holding one FieldStatsResult for each field statistic requested on a Query through StatsOptions.\nInterface StatsResult; // Contract to define representation of statistic information requested using StatsOptions.\nInterface TermsEntry;\nInterface TermsFieldEntry;\nInterface TermsPage;\n", "des": "Query result abstractions for Solr returned NamedList."}
{"index": 411, "repo": "spring-social-core-1.1.6.RELEASE", "code": "Package: oauth2\n\nClasses and Interfaces: \nInterface OAuth2Operations; // A service interface for the OAuth2 flow.\nInterface OAuth2ServiceProvider<A>; // A ServiceProvider that uses the OAuth 2.0 protocol.\nClass AbstractOAuth2ApiBinding; // Base class for OAuth 2-based provider API bindings.\nClass AbstractOAuth2ServiceProvider<S>; // Base class for ServiceProviders that use the OAuth2 protocol.\nClass AccessGrant; // OAuth2 access token.\nClass GenericOAuth2ConnectionFactory; // Generic implementation of an OAuth2ConnectionFactory that carries no intrinsic knowledge of the API it will be creating connections against.\nClass GenericOAuth2ServiceProvider; // Generic implementation of OAuth2ServiceProvider that carries no intrinsic knowledge of the API it will be creating connections against.\nClass OAuth2Parameters; // Parameters for building an OAuth2 authorize URL.\nClass OAuth2Template; // OAuth2Operations implementation that uses REST-template to make the OAuth calls.\nEnum GrantType; // OAuth2 supports two types of authorization flow, typically referred to as \"Client-side\" and \"Server-side\".\nEnum OAuth2Version; // Enum encapsulating the differences between the various versions of the OAuth2 specification.\nEnum TokenStrategy; // Strategy enumeration where each value carries an interceptor defining how an access token is carried on API requests.\n", "des": "OAuth2 client."}
{"index": 605, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: weaving\n\nClasses and Interfaces: \nInterface WeavingHook; // OSGi Framework Weaving Hook Service.\nInterface WovenClass; // A class being woven.\nClass WeavingException; // A weaving exception used to indicate that the class load should be failed but the weaving hook must not be blacklisted by the framework.\n", "des": "Framework Weaving Hooks Package Version 1.0."}
{"index": 685, "repo": "jackson-databind-2.15.2", "code": "Package: ext\n\nClasses and Interfaces: \nClass CoreXMLDeserializers; // Container deserializers that handle \"core\" XML types: ones included in standard JDK 1.5.\nClass CoreXMLDeserializers.Std; // Combo-deserializer that supports deserialization of somewhat optional javax.xml types QName, Duration and XMLGregorianCalendar.\nClass CoreXMLSerializers; // Provider for serializers of XML types that are part of full JDK 1.5, but that some alleged 1.5 platforms are missing (Android, GAE).\nClass CoreXMLSerializers.XMLGregorianCalendarSerializer;\nClass DOMDeserializer<T>; // Base for serializers that allows parsing DOM Documents from JSON Strings.\nClass DOMDeserializer.DocumentDeserializer;\nClass DOMDeserializer.NodeDeserializer;\nClass DOMSerializer;\nClass Java7Handlers; // Since v2.15, Java7HandlersImpl is no longer loaded via reflection.\nClass Java7HandlersImpl; // Since v2.15, this is no longer loaded via reflection.\nClass Java7Support; // To support Java7-incomplete platforms, we will offer support for JDK 7 annotations through this class, loaded dynamically; if loading fails, support will be missing.\nClass Java7SupportImpl;\nClass NioPathDeserializer;\nClass NioPathSerializer;\nClass OptionalHandlerFactory; // Helper class used for isolating details of handling optional+external types (javax.xml classes) from standard factories that offer them.\nClass SqlBlobSerializer; // Serializer implementation for Blob to write as binary (for JSON and other formats Base64-encoded String, for binary formats as true binary).\n", "des": "Contains extended support for \"external\" packages: things that may or may not be present in runtime environment, but that are commonly enough used so that explicit support can be added."}
{"index": 2190, "repo": "spring-security-web-6.1.2", "code": "Package: jackson2\n\nClasses and Interfaces: \npublic class WebJackson2Module extends com.fasterxml.jackson.databind.module.SimpleModule; // Jackson module for spring-security-web.\npublic class WebServletJackson2Module extends com.fasterxml.jackson.databind.module.SimpleModule; // Jackson module for spring-security-web related to servlet.\n", "des": "Mix-in classes to provide Jackson serialization support."}
{"index": 1018, "repo": "hive-common-4.0.0-alpha-2", "code": "Package: datetime\n\nClasses and Interfaces: \nClass HiveSqlDateTimeFormatter; // Formatter using SQL:2016 datetime patterns.\nClass HiveSqlDateTimeFormatter.Token; // Token representation.\nEnum HiveSqlDateTimeFormatter.TokenType; // Represents broad categories of tokens.\n", "des": "Deals with formatting and parsing of datetime objects."}
{"index": 155, "repo": "ignite-core-2.15.0", "code": "Package: cacheobject\n\nClasses and Interfaces: \nInterface IgniteCacheObjectProcessor; // Cache objects processor.\nClass NoOpBinary;\nClass UserCacheObjectByteArrayImpl; // Wraps value provided by user, must be copied before stored in cache.\nClass UserCacheObjectImpl; // Wraps value provided by user, must be serialized before stored in cache.\nClass UserKeyCacheObjectImpl; // Wraps key provided by user, must be serialized before stored in cache.\n", "des": "Cache object processor."}
{"index": 771, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: de\n\nClasses and Interfaces: \nClass GermanAnalyzer; // Analyzer for German language.\nClass GermanLightStemFilter; // A TokenFilter that applies GermanLightStemmer to stem German words.\nClass GermanLightStemFilterFactory; // Factory for GermanLightStemFilter.\nClass GermanLightStemmer; // Light Stemmer for German.\nClass GermanMinimalStemFilter; // A TokenFilter that applies GermanMinimalStemmer to stem German words.\nClass GermanMinimalStemFilterFactory; // Factory for GermanMinimalStemFilter.\nClass GermanMinimalStemmer; // Minimal Stemmer for German.\nClass GermanNormalizationFilter; // Normalizes German characters according to the heuristics of the German2 snowball algorithm.\nClass GermanNormalizationFilterFactory; // Factory for GermanNormalizationFilter.\nClass GermanStemFilter; // A TokenFilter that stems German words.\nClass GermanStemFilterFactory; // Factory for GermanStemFilter.\nClass GermanStemmer; // A stemmer for German words.\n", "des": "Analyzer for German."}
{"index": 451, "repo": "camel-core-3.0.0-RC1", "code": "Package: cloud\n\nClasses and Interfaces: \nClass BlacklistServiceCallServiceFilterConfiguration;\nClass CachingServiceCallServiceDiscoveryConfiguration;\nClass CombinedServiceCallServiceDiscoveryConfiguration;\nClass CombinedServiceCallServiceFilterConfiguration;\nClass ConsulServiceCallServiceDiscoveryConfiguration;\nClass CustomServiceCallServiceFilterConfiguration;\nClass DefaultServiceCallServiceLoadBalancerConfiguration;\nClass DnsServiceCallServiceDiscoveryConfiguration;\nClass EtcdServiceCallServiceDiscoveryConfiguration;\nClass HealthyServiceCallServiceFilterConfiguration;\nClass KubernetesServiceCallServiceDiscoveryConfiguration;\nClass PassThroughServiceCallServiceFilterConfiguration;\nClass RibbonServiceCallServiceLoadBalancerConfiguration;\nClass ServiceCallConfigurationDefinition; // Remote service call configuration\nClass ServiceCallDefinition; // To call remote services\nClass ServiceCallDefinitionConstants;\nClass ServiceCallExpressionConfiguration;\nClass ServiceCallServiceChooserConfiguration;\nClass ServiceCallServiceDiscoveryConfiguration;\nClass ServiceCallServiceFilterConfiguration;\nClass ServiceCallServiceLoadBalancerConfiguration;\nClass StaticServiceCallServiceDiscoveryConfiguration;\nClass ZooKeeperServiceCallServiceDiscoveryConfiguration;\n", "des": "The JAXB POJOs for the remote service call DSL"}
{"index": 3562, "repo": "guava-32.1.1-jre", "code": "Package: reflect\n\nClasses and Interfaces: \nInterface TypeToInstanceMap<B extends @Nullable java.lang.Object>; // A map, each entry of which maps a TypeToken to an instance of that type.\nClass AbstractInvocationHandler; // Abstract implementation of InvocationHandler that handles Object.equals(java.lang.Object), Object.hashCode() and Object.toString().\nClass ClassPath; // Scans the source of a ClassLoader and finds all loadable classes and resources.\nClass ClassPath.ClassInfo; // Represents a class that can be loaded through ClassPath.ClassInfo.load().\nClass ClassPath.ResourceInfo; // Represents a class path resource that can be either a class file or any other resource file loadable from the class path.\nClass ImmutableTypeToInstanceMap<B>; // A type-to-instance map backed by an ImmutableMap.\nClass ImmutableTypeToInstanceMap.Builder<B>; // A builder for creating immutable type-to-instance maps.\nClass Invokable<T,​R>; // Wrapper around either a Method or a Constructor.\nClass MutableTypeToInstanceMap<B extends @Nullable java.lang.Object>; // A mutable type-to-instance map.\nClass Parameter; // Represents a method or constructor parameter.\nClass Reflection; // Static utilities relating to Java reflection.\nClass TypeParameter<T>; // Captures a free type variable that can be used in TypeToken.where(com.google.common.reflect.TypeParameter<X>, com.google.common.reflect.TypeToken<X>).\nClass TypeResolver; // An object of this class encapsulates type mappings from type variables.\nClass TypeToken<T>; // A Type with generics.\n", "des": "Utilities for reflection."}
{"index": 3753, "repo": "lucene-facet-9.7.0", "code": "Package: facetset\n\nClasses and Interfaces: \nInterface FacetSetDecoder; // A functional interface for decoding facet set values into comparable `long` ones.\nClass DimRange; // Defines a single range in a FacetSet dimension.\nClass DoubleFacetSet; // A FacetSet which encodes double dimension values.\nClass ExactFacetSetMatcher; // A FacetSetMatcher which considers a set as a match only if all dimension values are equal to the given one.\nClass FacetSet; // Holds a set of facet dimension values.\nClass FacetSetMatcher; // Matches the encoded FacetSet that was indexed in FacetSetsField.\nClass FacetSetsField; // A BinaryDocValuesField which encodes a list of facet sets.\nClass FloatFacetSet; // A FacetSet which encodes float dimension values.\nClass IntFacetSet; // A FacetSet which encodes integer dimension values.\nClass LongFacetSet; // A FacetSet which encodes long dimension values.\nClass MatchingFacetSetsCounts; // Returns the counts for each given FacetSet\nClass RangeFacetSetMatcher; // A FacetSetMatcher which considers a set as a match if all dimensions fall within the given corresponding range.\n", "des": "Provides FacetSets faceting capabilities which allows users to facet on high dimensional field values."}
{"index": 1718, "repo": "spring-boot-test-3.1.1", "code": "Package: htmlunit\n\nSub Packages: \npackage htmlunit.webdriver; // Selenium support classes.\n\nClasses and Interfaces: \npublic class LocalHostWebClient extends com.gargoylesoftware.htmlunit.WebClient; // WebClient will automatically prefix relative URLs with localhost:${local.server.port}.\n", "des": "HtmlUnit support classes."}
{"index": 2745, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: context\n\nClasses and Interfaces: \npublic class RepeatContextCounter extends Object; // Helper class for policies that need to count the number of occurrences of some event (e.g.\npublic class RepeatContextSupport extends SynchronizedAttributeAccessor implements RepeatContext;\npublic class SynchronizedAttributeAccessor extends Object implements org.springframework.core.AttributeAccessor; // An AttributeAccessor that synchronizes on a mutex (not this) before modifying or accessing the underlying attributes.\n", "des": "Infrastructure implementations of repeat context concerns."}
{"index": 333, "repo": "kafka-clients-3.5.0", "code": "Package: scram\n\nClasses and Interfaces: \nClass ScramCredential; // SCRAM credential class that encapsulates the credential data persisted for each user that is accessible to the server.\nClass ScramCredentialCallback; // Callback used for SCRAM mechanisms.\nClass ScramExtensionsCallback; // Optional callback used for SCRAM mechanisms if any extensions need to be set in the SASL/SCRAM exchange.\nClass ScramLoginModule;\n", "des": "Provides adaptor to use the Salted Challenge Response Authentication Mechanism for securing Kafka clusters."}
{"index": 3259, "repo": "opencms-core-15.0", "code": "Package: generic\n\nClasses and Interfaces: \nClass CmsHistoryDriver; // Generic (ANSI-SQL) database server implementation of the history driver methods.\nClass CmsProjectDriver; // Generic (ANSI-SQL) implementation of the project driver methods.\nClass CmsPublishHistoryCleanupFilter; // Filter object that describes what to clean up in a publish history cleanup operation.\nClass CmsSqlManager; // Generic (ANSI-SQL) implementation of the SQL manager.\nClass CmsSubscriptionDriver; // Generic implementation of the user tracking and subscription driver interface.\nClass CmsUserDriver; // Generic (ANSI-SQL) database server implementation of the user driver methods.\nClass CmsUserQueryBuilder; // Default implementation of the user query builder.\nClass CmsVfsDriver; // Generic (ANSI-SQL) database server implementation of the VFS driver methods.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsPublishHistoryCleanupFilter.Mode; // Mode of operation for publish history cleanup.\n", "des": "Generic (ANSI-SQL) implementation of the OpenCms database connector."}
{"index": 3123, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: pagination\n\nClasses and Interfaces: \nInterface LimitHandler; // Contract defining dialect-specific LIMIT clause handling.\nClass AbstractLimitHandler; // Default implementation of LimitHandler interface.\nClass CUBRIDLimitHandler; // Limit handler for CUBRID\nClass FirstLimitHandler;\nClass Informix10LimitHandler;\nClass LegacyFirstLimitHandler;\nClass LegacyLimitHandler; // Limit handler that delegates all operations to the underlying dialect.\nClass LimitHelper; // A helper for dealing with LimitHandler implementations\nClass NoopLimitHandler; // Handler not supporting query LIMIT clause.\nClass Oracle12LimitHandler; // A LimitHandler for databases which support the ANSI SQL standard syntax FETCH FIRST m ROWS ONLY and OFFSET n ROWS FETCH NEXT m ROWS ONLY.\nClass SQL2008StandardLimitHandler; // LIMIT clause handler compatible with ISO and ANSI SQL:2008 standard.\nClass SQLServer2005LimitHandler; // LIMIT clause handler compatible with SQL Server 2005 and later.\nClass SQLServer2012LimitHandler; // LIMIT clause handler compatible with SQL Server 2012 and later.\nClass SybaseASE157LimitHandler; // This limit handler is very conservative and is only triggered in simple cases involving a select or select distinct.\nClass TopLimitHandler;\n", "des": "Support for Dialect-specific pagination strategies"}
{"index": 714, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: sftp\n\nClasses and Interfaces: \nClass Sftp;\nClass SftpInboundChannelAdapterSpec; // A RemoteFileInboundChannelAdapterSpec for a SftpInboundFileSynchronizingMessageSource.\nClass SftpMessageHandlerSpec;\nClass SftpOutboundGatewaySpec;\n", "des": "Provides SFTP Components support for Spring Integration Java DSL."}
{"index": 3044, "repo": "spring-web-6.0.11", "code": "Package: i18n\n\nClasses and Interfaces: \npublic class AcceptHeaderLocaleContextResolver extends Object implements LocaleContextResolver; // LocaleContextResolver implementation that looks for a match between locales in the Accept-Language header and a list of configured supported locales.\npublic class FixedLocaleContextResolver extends Object implements LocaleContextResolver; // LocaleContextResolver implementation that always returns a fixed locale and optionally time zone.\npublic interface LocaleContextResolver; // Interface for web-based locale context resolution strategies that allows for both locale context resolution via the request and locale context modification via the HTTP exchange.\n", "des": "Locale related support classes."}
{"index": 163, "repo": "ignite-core-2.15.0", "code": "Package: resource\n\nClasses and Interfaces: \nInterface DependencyResolver; // The interface specifies a container of dependencies.\nInterface GridNoImplicitInjection; // Disables injection.\nInterface GridSpringResourceContext; // Interface was introduced to avoid compile-time dependency on spring framework.\nClass GridResourceIoc; // Resource container contains caches for classes used for injection.\nClass GridResourceJobContextInjector; // Simple injector which wraps ComputeJobContext resource object.\nClass GridResourceLoggerInjector;\nClass GridResourceProcessor; // Processor for all Ignite and task/job resources.\nClass GridResourceProxiedIgniteInjector; // Ignite instance injector.\nClass GridResourceServiceInjector; // Grid service injector.\nClass NoopDependencyResolver; // Noop implementation of dependency resolver.\nEnum GridResourceIoc.AnnotationSet;\n", "des": "TODO."}
{"index": 3332, "repo": "opencms-core-15.0", "code": "Package: projects\n\nClasses and Interfaces: \nClass CmsEditProjectForm; // The edit project form component.\nClass CmsProjectHistoryTable; // The project history table.\nClass CmsProjectManager; // The project manager app.\nClass CmsProjectManagerConfiguration; // The project manager app configuration.\nClass CmsProjectOverviewConfiguration; // The project overview app configuration.\nClass CmsProjectsTable; // The projects table.\nClass CmsProjectsTable.ProjectResources;\n", "des": "The project manager app classes."}
{"index": 2045, "repo": "spring-messaging-6.0.11", "code": "Package: reactor\n\nClasses and Interfaces: \npublic abstract class AbstractNioBufferReactorNettyCodec<P> extends Object implements ReactorNettyCodec<P>; // Convenient base class for ReactorNettyCodec implementations that need to work with NIO ByteBuffers.\npublic class ReactorNetty2TcpClient<P> extends Object implements TcpOperations<P>; // Reactor Netty based implementation of TcpOperations.\npublic class ReactorNetty2TcpConnection<P> extends Object implements TcpConnection<P>; // Reactor Netty based implementation of TcpConnection.\npublic interface ReactorNettyCodec<P>; // Simple holder for a decoding Function and an encoding BiConsumer to use with Reactor Netty.\npublic class ReactorNettyTcpClient<P> extends Object implements TcpOperations<P>; // Reactor Netty based implementation of TcpOperations.\npublic class ReactorNettyTcpConnection<P> extends Object implements TcpConnection<P>; // Reactor Netty based implementation of TcpConnection.\npublic interface TcpMessageCodec<P>; // Contract to encode and decode a Message to and from a ByteBuffer allowing a higher-level protocol (e.g.\n", "des": "Contains support for TCP messaging based on Reactor."}
{"index": 511, "repo": "commons-vfs2-2.9.0", "code": "Package: function\n\nClasses and Interfaces: \nInterface VfsConsumer<T>; // A Consumer that throws FileSystemException.\n", "des": "Functional interface types in the style of java.util.function."}
{"index": 3371, "repo": "opencms-core-15.0", "code": "Package: list\n\nClasses and Interfaces: \nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Generates the list views commonly used in the OpenCms Workplace \"Administration\" tools."}
{"index": 2914, "repo": "spring-xml-4.0.5", "code": "Package: xpath\n\nClasses and Interfaces: \npublic abstract class AbstractXPathTemplate extends TransformerObjectSupport implements XPathOperations; // Abstract base class for implementations of XPathOperations.\npublic class JaxenXPathTemplate extends AbstractXPathTemplate; // Implementation of XPathOperations that uses Jaxen.\npublic class Jaxp13XPathTemplate extends AbstractXPathTemplate; // Implementation of XPathOperations that uses JAXP 1.3.\npublic interface NodeCallbackHandler; // An interface used by XPathOperations implementations for processing Node objects on a per-node basis.\npublic interface NodeMapper<T>; // An interface used by XPathOperations implementations for mapping Node objects on a per-node basis.\npublic class XPathException extends XmlException; // Exception thrown when an error occurs during XPath processing.\npublic interface XPathExpression; // Defines the contract for a precompiled XPath expression.\npublic abstract class XPathExpressionFactory extends Object; // Factory for compiled XPathExpressions, being aware of JAXP 1.3+ XPath functionality, and Jaxen.\npublic class XPathExpressionFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<XPathExpression>, org.springframework.beans.factory.InitializingBean; // Spring FactoryBean for XPathExpression object.\npublic interface XPathOperations; // Interface that specifies a basic set of XPath operations, implemented by various XPathTemplates.\npublic class XPathParseException extends XPathException; // Exception throws when a XPath expression cannot be parsed.\n", "des": "Provides XPathTemplate implementations, and various classes for XPath evaluation using JAXP 1.3, and Jaxen."}
{"index": 1139, "repo": "hadoop-yarn-api-3.3.6", "code": "Package: constraint\n\nClasses and Interfaces: \nInterface PlacementConstraintParser.ConstraintTokenizer; // Tokenizer interface that used to parse an expression.\nClass PlacementConstraintParser; // Placement constraint expression parser.\nClass PlacementConstraintParser.BaseStringTokenizer; // A basic tokenizer that splits an expression by a given delimiter.\nClass PlacementConstraintParser.CardinalityConstraintParser; // Constraint parser used to parse a given target expression, such as \"cardinality, NODE, foo, 0, 1\".\nClass PlacementConstraintParser.ConjunctionConstraintParser; // Parser used to parse conjunction form of constraints, such as AND(A, ..., B), OR(A, ..., B).\nClass PlacementConstraintParser.ConjunctionTokenizer; // Tokenizer used to parse conjunction form of a constraint expression, [AND|OR](C1:C2:...:Cn).\nClass PlacementConstraintParser.ConstraintParser; // Constraint Parser used to parse placement constraints from a given expression.\nClass PlacementConstraintParser.MultipleConstraintsTokenizer; // Tokenizer used to handle a placement spec composed by multiple constraint expressions.\nClass PlacementConstraintParser.NodeConstraintParser; // Constraint parser used to parse a given target expression.\nClass PlacementConstraintParser.SourceTags; // A helper class to encapsulate source tags and allocations in the placement specification.\nClass PlacementConstraintParser.SourceTagsTokenizer; // Tokenizer used to parse allocation tags expression, which should be in tag(numOfAllocations) syntax.\nClass PlacementConstraintParser.TargetConstraintParser; // Constraint parser used to parse a given target expression, such as \"NOTIN, NODE, foo, bar\".\nClass PlacementConstraintParseException; // Exception when the placement constraint parser fails to parse an expression.\n", "des": "Package org.apache.hadoop.yarn.util.constraint contains classes which is used as utility class for placement constraints."}
{"index": 3119, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface LazyInitializable; // Hibernate \"wraps\" a java collection in an instance of PersistentCollection.\nInterface PersistentCollection; // Persistent collections are treated as value objects by Hibernate.\n", "des": "SPI definitions for persistent collections"}
{"index": 2768, "repo": "spring-jms-6.0.11", "code": "Package: config\n\nClasses and Interfaces: \npublic abstract class AbstractJmsListenerContainerFactory<C extends AbstractMessageListenerContainer> extends Object implements JmsListenerContainerFactory<C>; // Base JmsListenerContainerFactory for Spring's base container implementation.\npublic abstract class AbstractJmsListenerEndpoint extends Object implements JmsListenerEndpoint; // Base model for a JMS listener endpoint.\npublic class DefaultJcaListenerContainerFactory extends JmsActivationSpecConfig implements JmsListenerContainerFactory<JmsMessageEndpointManager>; // A JmsListenerContainerFactory implementation to build a JCA-based JmsMessageEndpointManager.\npublic class DefaultJmsListenerContainerFactory extends AbstractJmsListenerContainerFactory<DefaultMessageListenerContainer>; // A JmsListenerContainerFactory implementation to build a regular DefaultMessageListenerContainer.\npublic abstract class JmsListenerConfigUtils extends Object; // Configuration constants for internal sharing across subpackages.\npublic interface JmsListenerContainerFactory<C extends MessageListenerContainer>; // Factory of MessageListenerContainer based on a JmsListenerEndpoint definition.\npublic interface JmsListenerEndpoint; // Model for a JMS listener endpoint.\npublic class JmsListenerEndpointRegistrar extends Object implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // Helper bean for registering JmsListenerEndpoint with a JmsListenerEndpointRegistry.\npublic class JmsListenerEndpointRegistry extends Object implements org.springframework.beans.factory.DisposableBean, org.springframework.context.SmartLifecycle, org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>; // Creates the necessary MessageListenerContainer instances for the registered endpoints.\npublic class JmsNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // A NamespaceHandler for the JMS namespace.\npublic class MethodJmsListenerEndpoint extends AbstractJmsListenerEndpoint implements org.springframework.beans.factory.BeanFactoryAware; // A JmsListenerEndpoint providing the method to invoke to process an incoming message for this endpoint.\npublic class SimpleJmsListenerContainerFactory extends AbstractJmsListenerContainerFactory<SimpleMessageListenerContainer>; // A JmsListenerContainerFactory implementation to build a standard SimpleMessageListenerContainer.\n", "des": "Support package for declarative messaging configuration, with Java configuration and XML schema support."}
{"index": 313, "repo": "commons-geometry-enclosing-1.0-beta1", "code": "Package: threed\n\nClasses and Interfaces: \nClass SphereGenerator; // Class generating a sphere from its support points.\nClass WelzlEncloser3D; // Extension of the WelzlEncloser class for Euclidean 3D space.\n", "des": "This package provides classes related to the smallest enclosing ball problem in three dimensions."}
{"index": 1101, "repo": "fontbox-3.0.0-beta1", "code": "Package: cff\n\nClasses and Interfaces: \nInterface CFFCharset; // A CFF charset.\nInterface CFFParser.ByteSource; // Source from which bytes may be read in the future.\nInterface DataInput; // This interface defines some functionality to read a CFF font.\nInterface FDSelect;\nClass CFFCIDFont; // A Type 0 CIDFont represented in a CFF file.\nClass CFFEncoding; // A CFF Type 1-equivalent Encoding.\nClass CFFExpertCharset; // This is specialized CFFCharset.\nClass CFFExpertEncoding; // This is specialized CFFEncoding.\nClass CFFExpertSubsetCharset; // This is specialized CFFCharset.\nClass CFFFont; // An Adobe Compact Font Format (CFF) font.\nClass CFFISOAdobeCharset; // This is specialized CFFCharset.\nClass CFFOperator; // This class represents a CFF operator.\nClass CFFParser; // This class represents a parser for a CFF font.\nClass CFFStandardEncoding; // This is specialized CFFEncoding.\nClass CFFStandardString; // This class represents a standard SID to String mapping.\nClass CFFType1Font; // A Type 1-equivalent font program represented in a CFF file.\nClass CharStringCommand; // This class represents a CharStringCommand.\nClass CIDKeyedType2CharString; // A CID-Keyed Type 2 CharString.\nClass DataInputByteArray; // This class implements the DataInput interface using a byte buffer as source.\nClass DataInputRandomAccessRead; // This class implements the DataInput interface using a RandomAccessRead as source.\nClass Type1CharString; // This class represents and renders a Type 1 CharString.\nClass Type1CharStringParser; // This class represents a converter for a mapping into a Type 1 sequence.\nClass Type1FontUtil; // This class contains some helper methods handling Type1-Fonts.\nClass Type2CharString; // Represents a Type 2 CharString by converting it into an equivalent Type 1 CharString.\nClass Type2CharStringParser; // This class represents a converter for a mapping into a Type2-sequence.\nEnum CharStringCommand.Key;\nEnum CharStringCommand.Type1KeyWord; // Enum of all valid type1 key words\n", "des": "This package holds classes used to parse CFF/Type2-Fonts (aka Type1C-Fonts)."}
{"index": 2220, "repo": "spring-data-commons-3.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic interface RevisionEntityInformation; // Information about a revision entity which is the class carrying revision information for an entity.\n", "des": "Value objects to implement core repository interfaces for historiography."}
{"index": 3205, "repo": "tomcat-api-10.1", "code": "Package: modules\n\nClasses and Interfaces: \nClass MbeansDescriptorsDigesterSource;\nClass MbeansDescriptorsIntrospectionSource;\nClass ModelerSource; // Source for descriptor data.\n", "des": "Implementation classes - should not be used directly."}
{"index": 1129, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: gpu\n\nClasses and Interfaces: \nClass AssignedGpuDevice; // In addition to GpuDevice, this include container id and more runtime information related to who is using the GPU device if possible\nClass GpuDevice; // This class is used to represent GPU device while allocation.\nClass GpuDiscoverer;\nClass GpuDockerCommandPluginFactory; // Factory to create GpuDocker Command Plugin instance\nClass GpuNodeResourceUpdateHandler;\nClass GpuResourcePlugin;\nClass NvidiaBinaryHelper; // Executes the \"nvidia-smi\" command and returns an object based on its output.\nClass NvidiaDockerV1CommandPlugin; // Implementation to use nvidia-docker v1 as GPU docker command plugin.\nClass NvidiaDockerV2CommandPlugin; // Implementation to use nvidia-docker v2 as GPU docker command plugin.\nClass GpuDeviceSpecificationException; // This exception is to be thrown when allowed GPU device specification is empty or invalid.\n", "des": "Package for GPU support classes."}
{"index": 767, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: core\n\nClasses and Interfaces: \nClass DecimalDigitFilter; // Folds all Unicode digits in [:General_Category=Decimal_Number:] to Basic Latin digits (0-9).\nClass DecimalDigitFilterFactory; // Factory for DecimalDigitFilter.\nClass FlattenGraphFilter; // Converts an incoming graph token stream, such as one from SynonymGraphFilter, into a flat form so that all nodes form a single linear chain with no side paths.\nClass FlattenGraphFilterFactory; // Factory for FlattenGraphFilter.\nClass KeywordAnalyzer; // \"Tokenizes\" the entire stream as a single token.\nClass KeywordTokenizer; // Emits the entire input as a single token.\nClass KeywordTokenizerFactory; // Factory for KeywordTokenizer.\nClass LetterTokenizer; // A LetterTokenizer is a tokenizer that divides text at non-letters.\nClass LetterTokenizerFactory; // Factory for LetterTokenizer.\nClass LowerCaseFilter; // Normalizes token text to lower case.\nClass LowerCaseFilterFactory; // Factory for LowerCaseFilter.\nClass SimpleAnalyzer; // An Analyzer that filters LetterTokenizer with LowerCaseFilter\nClass StopAnalyzer; // Filters LetterTokenizer with LowerCaseFilter and StopFilter.\nClass StopFilter; // Removes stop words from a token stream.\nClass StopFilterFactory; // Factory for StopFilter.\nClass TypeTokenFilter; // Removes tokens whose types appear in a set of blocked types from a token stream.\nClass TypeTokenFilterFactory; // Factory class for TypeTokenFilter.\nClass UnicodeWhitespaceAnalyzer; // An Analyzer that uses UnicodeWhitespaceTokenizer.\nClass UnicodeWhitespaceTokenizer; // A UnicodeWhitespaceTokenizer is a tokenizer that divides text at whitespace.\nClass UpperCaseFilter; // Normalizes token text to UPPER CASE.\nClass UpperCaseFilterFactory; // Factory for UpperCaseFilter.\nClass WhitespaceAnalyzer; // An Analyzer that uses WhitespaceTokenizer.\nClass WhitespaceTokenizer; // A tokenizer that divides text at whitespace characters as defined by Character.isWhitespace(int).\nClass WhitespaceTokenizerFactory; // Factory for WhitespaceTokenizer.\n", "des": "Basic, general-purpose analysis components."}
{"index": 3382, "repo": "dagger-2.47", "code": "Package: multibindings\n\nClasses and Interfaces: \nAnnotation Type ClassKey; // A MapKey annotation for maps with Class<?> keys.\nAnnotation Type ElementsIntoSet; // The method's return type is Set<T> and all values are contributed to the set.\nAnnotation Type IntKey; // A MapKey annotation for maps with int keys.\nAnnotation Type IntoMap; // The method's return type forms the type argument for the value of a Map<K, Provider<V>>, and the combination of the annotated key and the returned value is contributed to the map as a key/value pair.\nAnnotation Type IntoSet; // The method's return type forms the generic type argument of a Set<T>, and the returned value is contributed to the set.\nAnnotation Type LongKey; // A MapKey annotation for maps with long keys.\nAnnotation Type Multibinds; // Annotates abstract module methods that declare multibindings.\nAnnotation Type StringKey; // A MapKey annotation for maps with String keys.\n", "des": "This package contains the API by which Dagger allows you to bind several objects into a collection that can be injected without depending directly on each of the individual bindings."}
{"index": 1508, "repo": "spring-context-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \npublic enum AdviceMode extends Enum<AdviceMode>; // Enumeration used to determine whether JDK proxy-based or AspectJ weaving-based advice should be applied.\npublic abstract class AdviceModeImportSelector<A extends Annotation> extends Object implements ImportSelector; // Convenient base class for ImportSelector implementations that select imports based on an AdviceMode value from an annotation (such as the @Enable* annotations).\npublic class AnnotatedBeanDefinitionReader extends Object; // Convenient adapter for programmatic registration of bean classes.\npublic class AnnotationBeanNameGenerator extends Object implements org.springframework.beans.factory.support.BeanNameGenerator; // BeanNameGenerator implementation for bean classes annotated with the @Component annotation or with another annotation that is itself annotated with @Component as a meta-annotation.\npublic class AnnotationConfigApplicationContext extends GenericApplicationContext implements AnnotationConfigRegistry; // Standalone application context, accepting component classes as input — in particular @Configuration-annotated classes, but also plain @Component types and JSR-330 compliant classes using jakarta.inject annotations.\npublic class AnnotationConfigBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Parser for the <context:annotation-config/> element.\npublic interface AnnotationConfigRegistry; // Common interface for annotation config application contexts, defining AnnotationConfigRegistry.register(java.lang.Class<?>...) and AnnotationConfigRegistry.scan(java.lang.String...) methods.\npublic abstract class AnnotationConfigUtils extends Object; // Utility class that allows for convenient registration of common BeanPostProcessor and BeanFactoryPostProcessor definitions for annotation-based configuration.\npublic class AnnotationScopeMetadataResolver extends Object implements ScopeMetadataResolver; // A ScopeMetadataResolver implementation that by default checks for the presence of Spring's @Scope annotation on the bean class.\npublic class AutoProxyRegistrar extends Object implements ImportBeanDefinitionRegistrar; // Registers an auto proxy creator against the current BeanDefinitionRegistry as appropriate based on an @Enable* annotation having mode and proxyTargetClass attributes set to the correct values.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface Bean; // Indicates that a method produces a bean to be managed by the Spring container.\n", "des": "Annotation support for the Application Context, including JSR-250 \"common\" annotations, component-scanning, and Java-based metadata for creating Spring-managed objects."}
{"index": 2614, "repo": "wicket-util-10.0.0-M1", "code": "Package: interpolator\n\nClasses and Interfaces: \npublic class MapVariableInterpolator extends VariableInterpolator; // Interpolates variables into a String from a Map.\npublic final class SystemVariableInterpolator extends MapVariableInterpolator; // Convenient way of interpolating system properties.\npublic abstract class VariableInterpolator extends Object implements IClusterable; // Base class for variable interpolators.\n", "des": "Support for String-variable interpolation."}
{"index": 3736, "repo": "lucene-queryparser-9.7.0", "code": "Package: util\n\nClasses and Interfaces: \nClass QueryNodeOperation; // Allow joining 2 QueryNode Trees, into one.\nClass StringUtils; // String manipulation routines\nClass UnescapedCharSequence; // CharsSequence with escaped chars information.\n", "des": "Utility classes to used with the Query Parser."}
{"index": 2838, "repo": "spring-data-r2dbc-3.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class ArrayUtils extends Object; // Utilities for array interaction.\n", "des": "Support infrastructure for the configuration of R2DBC-specific repositories."}
{"index": 1174, "repo": "commons-math3-3.6.1", "code": "Package: clustering\n\nSub Packages: \npackage clustering.evaluation; // Cluster evaluation methods.\n\nClasses and Interfaces: \nInterface Clusterable; // Interface for n-dimensional points that can be clustered together.\nClass CentroidCluster<T extends Clusterable>; // A Cluster used by centroid-based clustering algorithms.\nClass Cluster<T extends Clusterable>; // Cluster holding a set of Clusterable points.\nClass Clusterer<T extends Clusterable>; // Base class for clustering algorithms.\nClass DBSCANClusterer<T extends Clusterable>; // DBSCAN (density-based spatial clustering of applications with noise) algorithm.\nClass DoublePoint; // A simple implementation of Clusterable for points with double coordinates.\nClass FuzzyKMeansClusterer<T extends Clusterable>; // Fuzzy K-Means clustering algorithm.\nClass KMeansPlusPlusClusterer<T extends Clusterable>; // Clustering algorithm based on David Arthur and Sergei Vassilvitski k-means++ algorithm.\nClass MultiKMeansPlusPlusClusterer<T extends Clusterable>; // A wrapper around a k-means++ clustering algorithm which performs multiple trials and returns the best solution.\nEnum KMeansPlusPlusClusterer.EmptyClusterStrategy; // Strategies to use for replacing an empty cluster.\n", "des": "Clustering algorithms."}
{"index": 1538, "repo": "spring-context-6.0.11", "code": "Package: jndi\n\nSub Packages: \npackage jndi.support; // Support classes for JNDI usage, including a JNDI-based BeanFactory implementation.\n\nClasses and Interfaces: \npublic class JndiAccessor extends Object; // Convenient superclass for JNDI accessors, providing \"jndiTemplate\" and \"jndiEnvironment\" bean properties.\n@FunctionalInterface public interface JndiCallback<T>; // Callback interface to be implemented by classes that need to perform an operation (such as a lookup) in a JNDI context.\npublic class JndiLocatorDelegate extends JndiLocatorSupport; // JndiLocatorSupport subclass with public lookup methods, for convenient use as a delegate.\npublic abstract class JndiLocatorSupport extends JndiAccessor; // Convenient superclass for classes that can locate any number of JNDI objects.\npublic class JndiLookupFailureException extends org.springframework.core.NestedRuntimeException; // RuntimeException to be thrown in case of JNDI lookup failures, in particular from code that does not declare JNDI's checked NamingException: for example, from Spring's JndiObjectTargetSource.\npublic class JndiObjectFactoryBean extends JndiObjectLocator implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanClassLoaderAware; // FactoryBean that looks up a JNDI object.\npublic abstract class JndiObjectLocator extends JndiLocatorSupport implements org.springframework.beans.factory.InitializingBean; // Convenient superclass for JNDI-based service locators, providing configurable lookup of a specific JNDI resource.\npublic class JndiObjectTargetSource extends JndiObjectLocator implements org.springframework.aop.TargetSource; // AOP TargetSource that provides configurable JNDI lookups for getTarget() calls.\npublic class JndiPropertySource extends org.springframework.core.env.PropertySource<JndiLocatorDelegate>; // PropertySource implementation that reads properties from an underlying Spring JndiLocatorDelegate.\npublic class JndiTemplate extends Object; // Helper class that simplifies JNDI operations.\npublic class JndiTemplateEditor extends PropertyEditorSupport; // Properties editor for JndiTemplate objects.\n", "des": "The classes in this package make JNDI easier to use, facilitating the accessing of configuration stored in JNDI, and provide useful superclasses for JNDI access classes."}
{"index": 3624, "repo": "solr-test-framework-9.3.0", "code": "Package: spelling\n\nClasses and Interfaces: \nClass SampleComparator; // Comparator for testing purposes\n", "des": "Mock classes for testing spelling."}
{"index": 775, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: et\n\nClasses and Interfaces: \nClass EstonianAnalyzer; // Analyzer for Estonian.\n", "des": "Analyzer for Estonian."}
{"index": 600, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: util\n\nClasses and Interfaces: \nClass ManifestElement; // This class represents a single manifest element.\nClass NLS; // Common superclass for all message bundle classes.\nClass TextProcessor; // This class is used to process strings that have special semantic meaning (such as file paths) in RTL-oriented locales so that they render in a way that does not corrupt the semantic meaning of the string but also maintains compliance with the Unicode BiDi algorithm of rendering Bidirectional text.\n", "des": "Provides utility classes for NLS support and bundle manifest header parsing."}
{"index": 113, "repo": "ignite-core-2.15.0", "code": "Package: cmdline\n\nClasses and Interfaces: \nClass AboutDialog; // About dialog.\nClass CdcCommandLineStartup; // This class defines command-line Ignite Capture Data Change startup.\nClass CommandLineRandomNumberGenerator; // Generates a random number and prints it to the console.\nClass CommandLineStartup; // This class defines command-line Ignite startup.\nClass CommandLineTransformer; // This class is a workaround for a versatile problems with passing arguments to the Ignite Windows batch launcher scripts.\n", "des": "Contains default command line startup."}
{"index": 1616, "repo": "spring-data-neo4j-7.1.2", "code": "Package: config\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(org.springframework.data.neo4j.repository.config.Neo4jRepositoriesRegistrar.class) public @interface EnableNeo4jRepositories; // Annotation to activate Neo4j repositories.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(org.springframework.data.neo4j.repository.config.ReactiveNeo4jRepositoriesRegistrar.class) public @interface EnableReactiveNeo4jRepositories; // Annotation to activate reactive Neo4j repositories.\n@API(status=INTERNAL, since=\"6.0\") public final class Neo4jRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport; // This dedicated Neo4j repository extension will be registered via Neo4jRepositoriesRegistrar and then provide all necessary beans to be registered in the application's context before the user's \"business\" beans gets registered.\n@API(status=INTERNAL, since=\"6.0\") public final class ReactiveNeo4jRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport; // This dedicated Neo4j repository extension will be registered via Neo4jRepositoriesRegistrar and then provide all necessary beans to be registered in the application's context before the user's \"business\" beans gets registered.\n", "des": "Configuration infrastructure for Neo4j specific repositories, especially dedicated annotations to enable imperative and reactive Spring Data Neo4j repositories."}
{"index": 286, "repo": "pdfbox-3.0.0-beta1", "code": "Package: type4\n\nClasses and Interfaces: \nInterface Operator; // Interface for PostScript operators.\nInterface Parser.SyntaxHandler; // This interface defines all possible syntactic elements of a Type 4 function.\nClass ExecutionContext; // Makes up the execution context, holding the available operators and the execution stack.\nClass InstructionSequence; // Represents an instruction sequence, a combination of values, operands and nested procedures.\nClass InstructionSequenceBuilder; // Basic parser for Type 4 functions which is used to build up instruction sequences.\nClass Operators; // This class provides all the supported operators.\nClass Parser; // Parser for PDF Type 4 functions.\nClass Parser.AbstractSyntaxHandler; // Abstract base class for a Parser.SyntaxHandler.\n", "des": "This package contains Type 4 function support."}
{"index": 107, "repo": "ignite-core-2.15.0", "code": "Package: plugin\n\nSub Packages: \npackage plugin.platform; // Contains platform plugins management API.\n\nClasses and Interfaces: \nInterface CachePluginConfiguration<K,V>; // Cache plugin configuration.\nInterface CachePluginContext<C extends CachePluginConfiguration>; // Cache plugin context.\nInterface CachePluginProvider<C extends CachePluginConfiguration>; // Cache plugin provider is a point for processing of properties which provide specific CachePluginConfiguration.\nInterface CacheTopologyValidatorProvider; // The CacheTopologyValidatorProvider is used to pass an implementation of TopologyValidators for a specific cache through Ignite plugin extensions mechanism.\nInterface Extension; // Marker interface for extensions.\nInterface ExtensionRegistry; // Context that allows to register extensions.\nInterface IgnitePlugin; // Marker interface for all Ignite plugins.\nInterface PluginConfiguration; // Plugin configuration.\nInterface PluginContext; // Plugin context.\nInterface PluginProvider<C extends PluginConfiguration>; // Pluggable Ignite component.\nClass PluginNotFoundException; // Exception thrown if plugin is not found.\nClass PluginValidationException; // Plugin validation exception.\n", "des": "Contains plugins management API."}
{"index": 162, "repo": "ignite-core-2.15.0", "code": "Package: port\n\nClasses and Interfaces: \nInterface GridPortListener; // Listener for port change events.\nClass GridPortProcessor; // Registers and deregisters all ports used by SPI and Manager.\nClass GridPortRecord; // This class defines record about port use.\n", "des": "TODO."}
{"index": 2061, "repo": "slf4j-ext-2.0.7", "code": "Package: instrumentation\n\nClasses and Interfaces: \npublic class JavassistHelper extends Object; // Helper methods for Javassist functionality.\npublic class LogTransformer extends Object implements ClassFileTransformer; // LogTransformer does the work of analyzing each class, and if appropriate add log statements to each method to allow logging entry/exit.\npublic static class LogTransformer.Builder extends Object; // Builder provides a flexible way of configuring some of many options on the parent class instead of providing many constructors.\npublic class ToStringHelper extends Object;\n", "des": "Java instrumentation routines for SLF4J."}
{"index": 1352, "repo": "spring-integration-stream-6.1.2", "code": "Package: stream\n\nSub Packages: \npackage stream.config; // Provides classes for configuration - parsers, namespace handlers.\n\nClasses and Interfaces: \npublic class ByteStreamReadingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<byte[]>; // A pollable source for receiving bytes from an InputStream.\npublic class ByteStreamWritingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler; // A MessageHandler that writes a byte array to an OutputStream.\npublic class CharacterStreamReadingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<String> implements org.springframework.context.ApplicationEventPublisherAware; // A pollable source for Readers.\npublic class CharacterStreamWritingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler; // A MessageHandler that writes characters to a Writer.\npublic class StreamClosedEvent extends org.springframework.integration.events.IntegrationEvent; // Application event published when EOF is detected on a stream.\n", "des": "Base package for stream support."}
{"index": 3128, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface ConnectionProvider; // A contract for obtaining JDBC connections.\nInterface JdbcConnectionAccess; // Provides centralized access to JDBC connections.\nInterface MultiTenantConnectionProvider; // A specialized Connection provider contract used when the application is using multi-tenancy support requiring tenant aware connections.\nClass AbstractDataSourceBasedMultiTenantConnectionProviderImpl; // Basic support for implementations of MultiTenantConnectionProvider based on DataSources.\nClass AbstractMultiTenantConnectionProvider; // Basic support for MultiTenantConnectionProvider implementations using individual ConnectionProvider instances per tenant behind the scenes.\nClass DataSourceBasedMultiTenantConnectionProviderImpl; // A concrete implementation of the MultiTenantConnectionProvider contract bases on a number of reasonable assumptions.\n", "des": "Defines contracts for accessing JDBC Connections"}
{"index": 3833, "repo": "lucene-core-9.7.0", "code": "Package: analysis\n\nSub Packages: \npackage analysis.standard; // Fast, general-purpose grammar-based tokenizer StandardTokenizer implements the Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29.\npackage analysis.tokenattributes; // General-purpose attributes for text analysis.\n\nClasses and Interfaces: \nClass AbstractAnalysisFactory; // Abstract parent class for analysis factories TokenizerFactory, TokenFilterFactory and CharFilterFactory.\nClass AnalysisSPILoader<S extends AbstractAnalysisFactory>; // Helper class for loading named SPIs from classpath (e.g.\nClass Analyzer; // An Analyzer builds TokenStreams, which analyze text.\nClass Analyzer.ReuseStrategy; // Strategy defining how TokenStreamComponents are reused per call to Analyzer.tokenStream(String, java.io.Reader).\nClass Analyzer.TokenStreamComponents; // This class encapsulates the outer components of a token stream.\nClass AnalyzerWrapper; // Extension to Analyzer suitable for Analyzers which wrap other Analyzers.\nClass AutomatonToTokenStream; // Converts an Automaton into a TokenStream.\nClass CachingTokenFilter; // This class can be used if the token attributes of a TokenStream are intended to be consumed more than once.\nClass CharacterUtils; // Utility class to write tokenizers or token filters.\nClass CharacterUtils.CharacterBuffer; // A simple IO buffer to use with CharacterUtils.fill(CharacterBuffer, Reader).\nClass CharArrayMap<V>; // A simple class that stores key Strings as char[]'s in a hash table.\nClass CharArraySet; // A simple class that stores Strings as char[]'s in a hash table.\nClass CharFilter; // Subclasses of CharFilter can be chained to filter a Reader They can be used as Reader with additional offset correction.\nClass CharFilterFactory; // Abstract parent class for analysis factories that create CharFilter instances.\nClass DelegatingAnalyzerWrapper; // An analyzer wrapper, that doesn't allow to wrap components or readers.\nClass FilteringTokenFilter; // Abstract base class for TokenFilters that may remove tokens.\nClass GraphTokenFilter; // An abstract TokenFilter that exposes its input stream as a graph\nClass LowerCaseFilter; // Normalizes token text to lower case.\nClass StopFilter; // Removes stop words from a token stream.\n", "des": "Text analysis."}
{"index": 662, "repo": "commons-lang3-3.12.0", "code": "Package: lang3\n\nSub Packages: \npackage lang3.arch; // Provides classes to work with the values of the os.arch system property.\npackage lang3.builder; // Assists in creating consistent equals(Object), toString(), hashCode(), and compareTo(Object) methods.\npackage lang3.compare; // Provides classes to work with the Comparable and Comparator interfaces.\npackage lang3.concurrent; // Provides support classes for multi-threaded programming.\npackage lang3.event; // Provides some useful event-based utilities.\npackage lang3.exception; // Provides functionality for Exceptions.\npackage lang3.function; // Provides functional interfaces to complement those in java.lang.function and utilities for working with Java 8 lambdas.\npackage lang3.math; // Extends java.math for business mathematical classes.\npackage lang3.mutable; // Provides typed mutable wrappers to primitive values and Object.\npackage lang3.reflect; // Accumulates common high-level uses of the java.lang.reflect APIs.\npackage lang3.stream; // Provides utility classes to complement those in java.util.stream.\npackage lang3.text; // Provides classes for handling and manipulating text, partly as an extension to java.text.\npackage lang3.time; // Provides classes and methods to work with dates and durations.\npackage lang3.tuple; // Tuple classes, starting with a Pair class in version 3.0.\n\nClasses and Interfaces: \nInterface Functions.FailableBiConsumer<O1,O2,T extends Throwable>; // Use FailableBiConsumer.\nInterface Functions.FailableBiFunction<O1,O2,R,T extends Throwable>; // Use FailableBiFunction.\nInterface Functions.FailableBiPredicate<O1,O2,T extends Throwable>; // Use FailableBiPredicate.\nInterface Functions.FailableCallable<R,T extends Throwable>; // Use FailableCallable.\nInterface Functions.FailableConsumer<O,T extends Throwable>; // Use FailableConsumer.\nInterface Functions.FailableFunction<I,R,T extends Throwable>; // Use FailableFunction.\nInterface Functions.FailablePredicate<I,T extends Throwable>; // Use FailablePredicate.\n", "des": "Provides highly reusable static utility methods, chiefly concerned with adding value to the java.lang classes."}
{"index": 3492, "repo": "poi-5.2.3", "code": "Package: model\n\nClasses and Interfaces: \nClass ConvertAnchor;\nClass DrawingManager2; // Provides utilities to manage drawing groups.\nClass HSSFFormulaParser; // HSSF wrapper for the FormulaParser and FormulaRenderer\nClass InternalSheet; // Low level model implementation of a Sheet (one workbook contains many sheets) This file contains the low level binary records starting at the sheets BOF and ending with the sheets EOF.\nClass InternalWorkbook; // Low level model implementation of a Workbook.\nClass RecordStream; // Simplifies iteration over a sequence of Record objects.\nClass RowBlocksReader; // Segregates the 'Row Blocks' section of a single sheet into plain row/cell records and shared formula records.\nClass WorkbookRecordList;\nClass InternalSheet.UnsupportedBOFType;\n", "des": "Provides low level API structures for reading, writing, modifying XLS files."}
{"index": 3182, "repo": "tomcat-api-10.1", "code": "Package: java\n\nClasses and Interfaces: \nClass javaURLContextFactory; // Context factory for the \"java:\" namespace.\n", "des": "This package contains the URL context factory for the \"java\" namespace."}
{"index": 1466, "repo": "spring-data-redis-3.1.2", "code": "Package: serializer\n\nClasses and Interfaces: \npublic class GenericJackson2JsonRedisSerializer extends Object implements RedisSerializer<Object>; // Generic Jackson 2-based RedisSerializer that maps objects to JSON using dynamic typing.\npublic class GenericToStringSerializer<T> extends Object implements RedisSerializer<T>, BeanFactoryAware; // Generic String to byte[] (and back) serializer.\npublic class Jackson2JsonRedisSerializer<T> extends Object implements RedisSerializer<T>; // RedisSerializer that can read and write JSON using Jackson's and Jackson Databind ObjectMapper.\n@FunctionalInterface public interface JacksonObjectReader; // Defines the contract for Object Mapping readers.\n@FunctionalInterface public interface JacksonObjectWriter; // Defines the contract for Object Mapping writers.\npublic class JdkSerializationRedisSerializer extends Object implements RedisSerializer<Object>; // Java Serialization Redis serializer.\npublic class OxmSerializer extends Object implements InitializingBean, RedisSerializer<Object>; // Serializer adapter on top of Spring's O/X Mapping.\n@FunctionalInterface public interface RedisElementReader<T>; // Strategy interface that specifies a deserializer that can deserialize a binary element representation stored in Redis into an object.\n@FunctionalInterface public interface RedisElementWriter<T>; // Strategy interface that specifies a serializer that can serialize an element to its binary representation to be used as Redis protocol payload.\npublic interface RedisSerializationContext<K,V>; // Serialization context for reactive use.\npublic static interface RedisSerializationContext.RedisSerializationContextBuilder<K,V>; // Builder for RedisSerializationContext.\npublic static interface RedisSerializationContext.SerializationPair<T>; // Typed serialization tuple.\npublic interface RedisSerializer<T>; // Basic interface serialization and deserialization of Objects to byte arrays (binary data).\npublic class SerializationException extends NestedRuntimeException; // Generic exception indicating a serialization/deserialization error.\npublic abstract class SerializationUtils extends Object; // Utility class with various serialization-related methods.\npublic class StringRedisSerializer extends Object implements RedisSerializer<String>; // Simple String to byte[] (and back) serializer.\n", "des": "Serialization/Deserialization package for converting Object to (and from) binary data."}
{"index": 2501, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: otlp\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnEnabledTracing @ConditionalOnClass({io.micrometer.tracing.otel.bridge.OtelTracer.class,io.opentelemetry.sdk.trace.SdkTracerProvider.class,io.opentelemetry.api.OpenTelemetry.class,io.opentelemetry.exporter.otlp.http.trace.OtlpHttpSpanExporter.class}) @EnableConfigurationProperties(OtlpProperties.class) public class OtlpAutoConfiguration extends Object; // Auto-configuration for OTLP.\n@ConfigurationProperties(\"management.otlp.tracing\") public class OtlpProperties extends Object; // Configuration properties for exporting traces using OTLP.\n", "des": "Auto-configuration for tracing with OTLP."}
{"index": 1249, "repo": "spring-integration-smb-6.1.2", "code": "Package: outbound\n\nClasses and Interfaces: \npublic class SmbMessageHandler extends org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<jcifs.smb.SmbFile>; // The SMB specific FileTransferringMessageHandler extension.\npublic class SmbOutboundGateway extends org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway<jcifs.smb.SmbFile>; // Outbound Gateway for performing remote file operations via SMB.\n", "des": "Outbound Channel Adapter implementations for SMB protocol."}
{"index": 3055, "repo": "spring-ws-core-4.0.5", "code": "Package: destination\n\nClasses and Interfaces: \npublic abstract class AbstractCachingDestinationProvider extends Object implements DestinationProvider; // Abstract base class for DestinationProvider implementations that cache destination URI.\npublic interface DestinationProvider; // Strategy interface for providing a WebServiceTemplate destination URI at runtime.\npublic class DestinationProvisionException extends WebServiceClientException; // Thrown by a DestinationProvider when it cannot provide a destination.\npublic class Wsdl11DestinationProvider extends AbstractCachingDestinationProvider; // Implementation of the DestinationProvider that resolves a destination URI from a WSDL file.\n", "des": "Provides the DestinationProvider interface."}
{"index": 1313, "repo": "groovy-all-4.0.13", "code": "Package: text\n\nSub Packages: \npackage text.markup; // Contains a template engine facilitating generation of XML-like markup with optional type checking.\n\nClasses and Interfaces: \npublic class GStringTemplateEngine extends TemplateEngine; // Processes template source files substituting variables and expressions into placeholders in a template source text to produce the desired output using a streaming approach.\npublic class SimpleTemplateEngine extends TemplateEngine; // Processes template source files substituting variables and expressions into placeholders in a template source text to produce the desired output.\npublic class StreamingTemplateEngine extends TemplateEngine; // Processes template source files substituting variables and expressions into placeholders in a template source text to produce the desired output using a closure based approach.\npublic interface Template; // A template is a block of text with an associated binding that can be output to a writer or evaluated to a string.\npublic abstract class TemplateEngine extends Object; // A template engine is a factory for creating a Template instance for a given text input.\npublic class TemplateExecutionException extends Exception; // A custom exception class to flag template execution errors\npublic class TemplateParseException extends RuntimeException; // A custom exception class to flag template parsing errors\npublic class XmlTemplateEngine extends TemplateEngine; // Template engine for use in templating scenarios where both the template source and the expected output are intended to be XML.\n", "des": "Contains the text processing utilities including templating APIs and default implementations."}
{"index": 3811, "repo": "lucene-analysis-common-9.7.0", "code": "Package: ru\n\nClasses and Interfaces: \nClass RussianAnalyzer; // Analyzer for Russian language.\nClass RussianLightStemFilter; // A TokenFilter that applies RussianLightStemmer to stem Russian words.\nClass RussianLightStemFilterFactory; // Factory for RussianLightStemFilter.\nClass RussianLightStemmer; // Light Stemmer for Russian.\n", "des": "Analyzer for Russian."}
{"index": 596, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: runnable\n\nClasses and Interfaces: \nInterface ApplicationLauncher; // An ApplicationLauncher is used to launch ParameterizedRunnable objects using the main thread.\nInterface ApplicationRunnable; // A parameterized runnable that can be stopped.\nInterface ParameterizedRunnable; // Like a Runnable, an object which captures a block of code which can be passed around and executed.\nInterface StartupMonitor; // Service interface used to monitor the startup process.\n", "des": "Provides API for monitoring and running code on the main thread."}
{"index": 2313, "repo": "spring-boot-3.1.1", "code": "Package: jms\n\nClasses and Interfaces: \n@FunctionalInterface public interface XAConnectionFactoryWrapper; // Strategy interface used to wrap a JMS XAConnectionFactory enrolling it with a JTA TransactionManager.\n", "des": "Support for Java Message Service (JMS)."}
{"index": 502, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: windowing\n\nClasses and Interfaces: \nClass AfterAll; // A composite Trigger that fires when all of its sub-triggers are ready.\nClass AfterEach; // A composite Trigger that executes its sub-triggers in order.\nClass AfterFirst; // A composite Trigger that fires once after at least one of its sub-triggers have fired.\nClass AfterPane; // A Trigger that fires at some point after a specified number of input elements have arrived.\nClass AfterProcessingTime; // A Trigger trigger that fires at a specified point in processing time, relative to when input first arrives.\nClass AfterSynchronizedProcessingTime; // FOR INTERNAL USE ONLY.\nClass AfterWatermark; // AfterWatermark triggers fire based on progress of the system watermark.\nClass AfterWatermark.AfterWatermarkEarlyAndLate;\nClass AfterWatermark.FromEndOfWindow; // A watermark trigger targeted relative to the end of the window.\nClass BoundedWindow; // A BoundedWindow represents window information assigned to data elements.\nClass CalendarWindows; // A collection of WindowFns that windows values into calendar-based windows such as spans of days, months, or years.\nClass CalendarWindows.DaysWindows; // A WindowFn that windows elements into periods measured by days.\nClass CalendarWindows.MonthsWindows; // A WindowFn that windows elements into periods measured by months.\nClass CalendarWindows.YearsWindows; // A WindowFn that windows elements into periods measured by years.\nClass DefaultTrigger; // A trigger that is equivalent to Repeatedly.forever(AfterWatermark.pastEndOfWindow()).\nClass FixedWindows; // A WindowFn that windows values into fixed-size timestamp-based windows.\nClass GlobalWindow; // The default window into which all data is placed (via GlobalWindows).\nClass GlobalWindow.Coder; // GlobalWindow.Coder for encoding and decoding GlobalWindows.\nClass GlobalWindows; // A WindowFn that assigns all data to the same window.\nClass IntervalWindow; // An implementation of BoundedWindow that represents an interval from IntervalWindow.start (inclusive) to IntervalWindow.end (exclusive).\nClass IntervalWindow.IntervalWindowCoder; // Encodes an IntervalWindow as a pair of its upper bound and duration.\nClass MergeOverlappingIntervalWindows; // For internal use only; no backwards compatibility guarantees.\nClass Never; // A Trigger which never fires.\n", "des": "Defines the Window transform for dividing the elements in a PCollection into windows, and the Trigger for controlling when those elements are output."}
{"index": 2731, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: builder\n\nClasses and Interfaces: \npublic class LdifReaderBuilder extends Object; // Creates a fully qualified LdifReader.\npublic class MappingLdifReaderBuilder<T> extends Object; // Creates a fully qualified MappingLdifReader.\n", "des": "Builders for LDIF related components."}
{"index": 3635, "repo": "solr-core-9.3.0", "code": "Package: api\n\nClasses and Interfaces: \nInterface ApiSupport; // The interface that is implemented by a request handler to support the V2 end point\nInterface ConfigurablePlugin<T extends org.apache.solr.common.MapWriter>; // Implement this interface if your plugin needs to accept some configuration\nInterface ContainerPluginsRegistry.PluginRegistryListener; // Listener for notifications about added / deleted / modified plugins.\nClass AnnotatedApi; // This class implements an Api just from an annotated java class The class must have an annotation EndPoint Each method must have an annotation Command The methods that implement a command should have the first 2 parameters SolrQueryRequest and SolrQueryResponse or it may optionally have a third parameter which could be a java class annotated with jackson annotations.\nClass Api; // Every version 2 API must extend the this class.\nClass ApiBag;\nClass ApiBag.IntrospectApi;\nClass ApiBag.LazyLoadedApi;\nClass ApiBag.ReqHandlerToApi;\nClass ContainerPluginsRegistry; // This class manages the container-level plugins and their Api-s.\nClass CoordinatorV2HttpSolrCall;\nClass JerseyResource; // A marker parent type for all Jersey \"resource\" classes.\nClass PayloadObj<T>; // Holds the deserialized object for each command and also holds request , response objects\nClass V2HttpCall;\nClass V2HttpCall.CompositeApi;\nEnum ContainerPluginsRegistry.Diff;\nClass ApiBag.ExceptionWithErrObject;\nAnnotation Type Command;\nAnnotation Type EndPoint;\n", "des": "Commonly used classes for Solr V2 API."}
{"index": 2076, "repo": "spring-webmvc-6.0.11", "code": "Package: resource\n\nClasses and Interfaces: \npublic abstract class AbstractResourceResolver extends Object implements ResourceResolver; // Base class for ResourceResolver implementations.\npublic abstract class AbstractVersionStrategy extends Object implements VersionStrategy; // Abstract base class for VersionStrategy implementations.\nprotected static class AbstractVersionStrategy.FileNameVersionPathStrategy extends Object implements VersionPathStrategy; // File name-based VersionPathStrategy, e.g.\nprotected static class AbstractVersionStrategy.PrefixVersionPathStrategy extends Object implements VersionPathStrategy; // A prefix-based VersionPathStrategy, e.g.\npublic class CachingResourceResolver extends AbstractResourceResolver; // A ResourceResolver that resolves resources from a Cache or otherwise delegates to the resolver chain and saves the result in the cache.\npublic class CachingResourceTransformer extends Object implements ResourceTransformer; // A ResourceTransformer that checks a Cache to see if a previously transformed resource exists in the cache and returns it if found, and otherwise delegates to the resolver chain and saves the result in the cache.\npublic class ContentVersionStrategy extends AbstractVersionStrategy; // A VersionStrategy that calculates a Hex MD5 hash from the content of the resource and appends it to the file name, e.g.\npublic class CssLinkResourceTransformer extends ResourceTransformerSupport; // A ResourceTransformer implementation that modifies links in a CSS file to match the public URL paths that should be exposed to clients (e.g.\nprotected abstract static class CssLinkResourceTransformer.AbstractLinkParser extends Object implements CssLinkResourceTransformer.LinkParser; // Abstract base class for CssLinkResourceTransformer.LinkParser implementations.\n@FunctionalInterface protected static interface CssLinkResourceTransformer.LinkParser; // Extract content chunks that represent links.\npublic class DefaultServletHttpRequestHandler extends Object implements org.springframework.web.HttpRequestHandler, org.springframework.web.context.ServletContextAware; // An HttpRequestHandler for serving static files using the Servlet container's \"default\" Servlet.\npublic class EncodedResourceResolver extends AbstractResourceResolver; // Resolver that delegates to the chain, and if a resource is found, it then attempts to find an encoded (e.g.\npublic class FixedVersionStrategy extends AbstractVersionStrategy; // A VersionStrategy that relies on a fixed version applied as a request path prefix, e.g.\npublic interface HttpResource extends org.springframework.core.io.Resource; // Extended interface for a Resource to be written to an HTTP response.\n", "des": "Support classes for serving static resources."}
{"index": 1912, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: elasticsearch\n\nClasses and Interfaces: \n@AutoConfiguration(after={ElasticsearchClientAutoConfiguration.class,ReactiveElasticsearchClientAutoConfiguration.class}) @ConditionalOnClass(org.springframework.data.elasticsearch.client.elc.ElasticsearchTemplate.class) @Import({org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataConfiguration.BaseConfiguration.class,org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataConfiguration.JavaClientConfiguration.class,org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataConfiguration.ReactiveRestClientConfiguration.class}) public class ElasticsearchDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's Elasticsearch support.\n@AutoConfiguration @ConditionalOnClass(org.springframework.data.elasticsearch.repository.ElasticsearchRepository.class) @ConditionalOnProperty(prefix=\"spring.data.elasticsearch.repositories\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) @ConditionalOnMissingBean(org.springframework.data.elasticsearch.repository.support.ElasticsearchRepositoryFactoryBean.class) @Import(org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesRegistrar.class) public class ElasticsearchRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's Elasticsearch Repositories.\n@AutoConfiguration @ConditionalOnClass({org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient.class,org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository.class}) @ConditionalOnProperty(prefix=\"spring.data.elasticsearch.repositories\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) @ConditionalOnMissingBean(org.springframework.data.elasticsearch.repository.support.ReactiveElasticsearchRepositoryFactoryBean.class) @Import(org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesRegistrar.class) public class ReactiveElasticsearchRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's Elasticsearch Reactive Repositories.\n", "des": "Auto-configuration for Spring Data Elasticsearch."}
{"index": 1296, "repo": "spring-core-6.0.11", "code": "Package: unit\n\nClasses and Interfaces: \npublic final class DataSize extends Object implements Comparable<DataSize>, Serializable; // A data size, such as '12MB'.\npublic enum DataUnit extends Enum<DataUnit>; // A standard set of DataSize units.\n", "des": "Useful unit data types."}
{"index": 3883, "repo": "solr-solrj-9.3.0", "code": "Package: beans\n\nClasses and Interfaces: \nClass DocumentObjectBinder; // A class to map objects to and from solr documents.\nClass BindingException;\nAnnotation Type Field; // This class can be used to annotate a field or a setter an any class and SolrJ would help you convert to SolrInputDocument and from SolrDocument\n", "des": "Annotation based mapping of client objects to Solr documents."}
{"index": 1596, "repo": "spring-websocket-6.0.11", "code": "Package: server\n\nSub Packages: \npackage server.jetty; // Server-side support for the Jetty 9+ WebSocket API.\npackage server.standard; // Server-side classes for use with standard JSR-356 WebSocket endpoints.\npackage server.support; // Server-side support classes including container-specific strategies for upgrading a request.\n\nClasses and Interfaces: \npublic class HandshakeFailureException extends org.springframework.core.NestedRuntimeException; // Thrown when handshake processing failed to complete due to an internal, unrecoverable error.\npublic interface HandshakeHandler; // Contract for processing a WebSocket handshake request.\npublic interface HandshakeInterceptor; // Interceptor for WebSocket handshake requests.\npublic interface RequestUpgradeStrategy; // A server-specific strategy for performing the actual upgrade to a WebSocket exchange.\n", "des": "Server-side abstractions for WebSocket interactions."}
{"index": 3899, "repo": "solr-solrj-9.3.0", "code": "Package: cloud\n\nClasses and Interfaces: \nInterface CollectionStatePredicate; // Interface to determine if a set of liveNodes and a collection's state matches some expecatations.\nInterface DocCollection.CollectionStateProps; // JSON properties related to a collection's state.\nInterface DocCollection.PrsSupplier;\nInterface NodesSysProps; // Fetch a node's system properties.\nInterface Replica.ReplicaStateProps; // JSON properties related to a replica's state.\nInterface Slice.SliceStateProps; // JSON properties related to a slice's state.\nInterface SolrClassLoader; // A generic interface to load plugin classes\nClass Aliases; // Holds collection aliases -- virtual collections that point to one or more other collections.\nClass ClusterState; // Immutable state of the cloud.\nClass ClusterState.CollectionRef;\nClass CompositeIdRouter; // CompositeIdRouter partitions ids based on a CompositeIdRouter.SEPARATOR, hashes each partition and merges the hashes together to map the id to a slice.\nClass CompositeIdRouter.KeyParser; // Helper class to calculate parts, masks etc for an id.\nClass DocCollection; // Models a Collection in zookeeper (but that Java name is obviously taken, hence \"DocCollection\")\nClass DocRouter; // Class to partition int range into n ranges.\nClass DocRouter.Range;\nClass HashBasedRouter;\nClass ImplicitDocRouter; // This document router is for custom sharding\nClass PerReplicaStates; // This represents the individual replica states in a collection This is an immutable object.\nClass PerReplicaStates.Operation;\nClass PerReplicaStates.State; // The state of a replica as stored as a node under /collections/collection-name/state.json/replica-state\nClass PlainIdRouter;\nClass Replica;\nClass ReplicaPosition;\nClass RoutingRule; // Used for routing docs with particular keys into another collection\nClass Slice; // A Slice contains immutable information about a logical shard (all replicas that share the same shard id).\nClass ZkCoreNodeProps;\nClass ZkNodeProps; // ZkNodeProps contains generic immutable properties.\nEnum PerReplicaStates.Operation.Type;\nEnum Replica.State; // The replica's state.\nEnum Replica.Type;\nEnum Slice.State; // The slice's state.\n", "des": "Common Solr Cloud and ZooKeeper related classes reused on both clients & server."}
{"index": 1327, "repo": "groovy-all-4.0.13", "code": "Package: ast\n\nSub Packages: \npackage ast.expr; // AST nodes for Groovy expressions\npackage ast.stmt; // AST nodes for Groovy statements\n\nClasses and Interfaces: \npublic class AnnotatedNode extends ASTNode implements GroovydocHolder<AnnotatedNode>; // Base class for any AST node which is capable of being annotated\npublic class AnnotationNode extends ASTNode; // Represents an annotation which can be attached to interfaces, classes, methods, fields, parameters, and other places.\npublic class ASTNode extends Object implements NodeMetaDataHandler; // Base class for any AST node.\npublic class AstToTextHelper extends Object; // Helper class for converting AST into text.\npublic abstract class ClassCodeExpressionTransformer extends ClassCodeVisitorSupport implements ExpressionTransformer; // Transforms expressions in a whole class.\npublic abstract class ClassCodeVisitorSupport extends CodeVisitorSupport implements ErrorCollecting, GroovyClassVisitor;\npublic class ClassHelper extends Object; // Helper for ClassNode and classes handling them.\npublic class ClassNode extends AnnotatedNode; // Represents a class in the AST.\npublic abstract class CodeVisitorSupport extends Object implements GroovyCodeVisitor; // Abstract base class for any GroovyCodeVisitor which by default just walks the code and expression tree\npublic class CompileUnit extends Object implements NodeMetaDataHandler; // Represents the entire contents of a compilation step which consists of one or more ModuleNode instances.\npublic class ConstructorNode extends MethodNode; // Represents a constructor declaration\npublic class DynamicVariable extends Object implements Variable;\npublic class EnumConstantClassNode extends InnerClassNode; // Represents the anonymous inner class for an enum constant.\npublic class FieldNode extends AnnotatedNode implements Variable; // Represents a field (member variable)\npublic class GenericsType extends ASTNode; // This class is used to describe generic type signatures for ClassNodes.\npublic static class GenericsType.GenericsTypeName extends Object; // Represents GenericsType name.\npublic interface GroovyClassVisitor; // A special visitor for working with the structure of a class.\npublic interface GroovyCodeVisitor; // An implementation of the visitor pattern for working with ASTNodes.\npublic class GroovyCodeVisitorAdapter extends Object implements GroovyCodeVisitor;\npublic class ImportNode extends AnnotatedNode; // Represents an import statement.\npublic class InnerClassNode extends ClassNode; // Represents an inner class declaration\n", "des": "Groovy AST nodes for the syntax of the language"}
{"index": 1259, "repo": "spring-core-6.0.11", "code": "Package: cglib\n\nSub Packages: \npackage cglib.beans; // Spring's repackaging of the CGLIB beans package (for internal use only).\npackage cglib.core; // Spring's repackaging of the CGLIB core package (for internal use only).\npackage cglib.proxy; // Spring's repackaging of the CGLIB proxy package (for internal use only).\npackage cglib.reflect; // Spring's repackaging of the CGLIB reflect package (for internal use only).\npackage cglib.transform; // Spring's repackaging of the CGLIB transform package (for internal use only).\npackage cglib.util; // Spring's repackaging of the CGLIB util package (for internal use only).\n\nClasses and Interfaces: \npublic final class SpringCglibInfo extends Object; // Empty class used to ensure that the org.springframework.cglib package is processed during javadoc generation.\n", "des": "Spring's repackaging of CGLIB 3.3 (with Spring-specific patches; for internal use only)."}
{"index": 1874, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: pam\n\nClasses and Interfaces: \npublic abstract class AbstractAuthenticationStrategy extends Object implements AuthenticationStrategy; // Abstract base implementation for Shiro's concrete AuthenticationStrategy implementations.\npublic class AllSuccessfulStrategy extends AbstractAuthenticationStrategy; // AuthenticationStrategy implementation that requires all configured realms to successfully process the submitted AuthenticationToken during the log-in attempt.\npublic class AtLeastOneSuccessfulStrategy extends AbstractAuthenticationStrategy; // AuthenticationStrategy implementation that requires at least one configured realm to successfully process the submitted AuthenticationToken during the log-in attempt.\npublic interface AuthenticationStrategy; // A AuthenticationStrategy implementation assists the ModularRealmAuthenticator during the log-in process in a pluggable realm (PAM) environment.\npublic class FirstSuccessfulStrategy extends AbstractAuthenticationStrategy; // AuthenticationStrategy implementation that only accepts the account data from the first successfully consulted Realm and ignores all subsequent realms.\npublic class ModularRealmAuthenticator extends AbstractAuthenticator; // A ModularRealmAuthenticator delegates account lookups to a pluggable (modular) collection of Realms.\npublic class ShortCircuitIterationException extends AuthenticationException; // Exception thrown during the authentication process using FirstSuccessfulStrategy, with stopAfterFirstSuccess set.\npublic class UnsupportedTokenException extends AuthenticationException; // Exception thrown during the authentication process when an AuthenticationToken implementation is encountered that is not supported by one or more configured Realms.\n", "des": "Support for PAM, or Pluggable Authentication Modules, which is the capability to authenticate a user against multiple configurable (pluggable) modules (Shiro calls these Realms)."}
{"index": 2176, "repo": "spring-security-web-6.1.2", "code": "Package: intercept\n\nClasses and Interfaces: \npublic class AuthorizationFilter extends org.springframework.web.filter.GenericFilterBean; // An authorization filter that restricts access to the URL using AuthorizationManager.\npublic class DefaultFilterInvocationSecurityMetadataSource extends Object implements FilterInvocationSecurityMetadataSource; // Default implementation of FilterInvocationDefinitionSource.\npublic interface FilterInvocationSecurityMetadataSource extends org.springframework.security.access.SecurityMetadataSource; // Marker interface for SecurityMetadataSource implementations that are designed to perform lookups keyed on FilterInvocations.\n@Deprecated public class FilterSecurityInterceptor extends org.springframework.security.access.intercept.AbstractSecurityInterceptor implements jakarta.servlet.Filter;\npublic final class RequestAuthorizationContext extends Object; // An HttpServletRequest authorization context.\npublic class RequestKey extends Object;\npublic final class RequestMatcherDelegatingAuthorizationManager extends Object implements org.springframework.security.authorization.AuthorizationManager<jakarta.servlet.http.HttpServletRequest>; // An AuthorizationManager which delegates to a specific AuthorizationManager based on a RequestMatcher evaluation.\npublic static final class RequestMatcherDelegatingAuthorizationManager.Builder extends Object; // A builder for RequestMatcherDelegatingAuthorizationManager.\n", "des": "Enforcement of security for HTTP requests, typically by the URL requested."}
{"index": 1099, "repo": "hbase-server-3.0.0-alpha-4", "code": "Package: replication\n\nClasses and Interfaces: \nInterface ReplicationEndpoint; // ReplicationEndpoint is a plugin which implements replication to other HBase clusters, or other systems.\nInterface WALCellFilter; // A filter for WAL entry cells before being sent over to replication.\nInterface WALEntryFilter; // A Filter for WAL entries before being sent over to replication.\nClass BaseReplicationEndpoint; // A Base implementation for ReplicationEndpoints.\nClass BulkLoadCellFilter;\nClass ChainWALEmptyEntryFilter; // A ChainWALEntryFilter for providing more flexible options\nClass ChainWALEntryFilter; // A WALEntryFilter which contains multiple filters and applies them in chain order\nClass ClusterMarkingEntryFilter; // Filters out entries with our peerClusterId (i.e.\nClass HBaseReplicationEndpoint; // A BaseReplicationEndpoint for replication endpoints whose target cluster is an HBase cluster.\nClass HBaseReplicationEndpoint.PeerRegionServerListener; // Tracks changes to the list of region servers in a peer's cluster.\nClass HBaseReplicationEndpoint.SinkPeer; // Wraps a replication region server sink to provide the ability to identify it.\nClass NamespaceTableCfWALEntryFilter; // Filter a WAL Entry by the peer config according to the table and family which it belongs to.\nClass ReplicationBarrierFamilyFormat; // Helper class for storing replication barriers in family 'rep_barrier' of meta table.\nClass ReplicationBarrierFamilyFormat.ReplicationBarrierResult;\nClass ReplicationEndpoint.Context;\nClass ReplicationEndpoint.ReplicateContext; // A context for ReplicationEndpoint.replicate(ReplicateContext) method.\nClass ReplicationOffsetUtil;\nClass ReplicationSinkServiceImpl;\nClass ScopeWALEntryFilter; // Keeps KVs that are scoped other than local\nClass SystemTableWALEntryFilter; // Skips WAL edits for all System tables including hbase:meta except hbase:acl.\nClass VerifyWALEntriesReplicationEndpoint; // A dummy ReplicationEndpoint that replicates nothing.\n", "des": "Multi Cluster Replication"}
{"index": 3237, "repo": "opencms-core-15.0", "code": "Package: containerpage\n\nSub Packages: \npackage containerpage.inherited; // Contains classes used for reading and caching inheritance groups.\npackage containerpage.shared; // Contains the shared container page editor classes.\n\nClasses and Interfaces: \nInterface I_CmsResourceTypeEnabledCheck; // Checks whether types are enabled for Add/New dialogs.\nClass ClientMessages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsAddDialogTypeHelper; // Helper class for preparing the resource type lists for gallery and new dialog.\nClass CmsContainerpageActionElement; // Action element for container-page editor includes.\nClass CmsContainerpageService; // The RPC service used by the container-page editor.\nClass CmsDetailOnlyContainerPageBuilder; // This is a simple helper class to more easily produce container page beans to be used as detail-only containers.\nClass CmsDetailOnlyContainerPageBuilder.ContainerInfo; // Bean containing the information for a single container.\nClass CmsDetailOnlyContainerUtil; // Static utility class for functions related to detail-only containers.\nClass CmsElementUtil; // Utility class to generate the element data objects used within the container-page editor.\nClass CmsModelGroupHelper; // Handles all model group specific tasks.\nClass CmsRelationTargetListBean; // Helper bean used to collect a list of resources (usually relation targets) and keep track of whether any of them have the \"changed\" state.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains the container page editor service classes."}
{"index": 3010, "repo": "spring-web-6.0.11", "code": "Package: protobuf\n\nClasses and Interfaces: \npublic class KotlinSerializationProtobufHttpMessageConverter extends KotlinSerializationBinaryHttpMessageConverter<kotlinx.serialization.protobuf.ProtoBuf>; // Implementation of HttpMessageConverter that can read and write Protocol Buffers using kotlinx.serialization.\npublic class ProtobufHttpMessageConverter extends AbstractHttpMessageConverter<com.google.protobuf.Message>; // An HttpMessageConverter that reads and writes com.google.protobuf.Messages using Google Protocol Buffers.\npublic class ProtobufJsonFormatHttpMessageConverter extends ProtobufHttpMessageConverter; // Subclass of ProtobufHttpMessageConverter which enforces the use of Protobuf 3 and its official library \"com.google.protobuf:protobuf-java-util\" for JSON processing.\n", "des": "Provides an HttpMessageConverter implementation for handling Google Protocol Buffers."}
{"index": 261, "repo": "nutch-2.4", "code": "Package: js\n\nClasses and Interfaces: \nClass JSParseFilter; // This class is a heuristic link extractor for JavaScript files and code snippets.\n", "des": "Parser and parse filter plugin to extract all (possible) links from JavaScript files and embedded JavaScript code snippets."}
{"index": 3515, "repo": "opennlp-tools-2.2.0", "code": "Package: ad\n\nClasses and Interfaces: \nClass ADChunkSampleStream; // Parser for Floresta Sita(c)tica Arvores Deitadas corpus, output to for the Portuguese Chunker training.\nClass ADChunkSampleStreamFactory<P>; // A Factory to create a Arvores Deitadas ChunkStream from the command line utility.\nClass ADNameSampleStream; // Parser for Floresta Sita(c)tica Arvores Deitadas corpus, output to for the Portuguese NER training.\nClass ADNameSampleStreamFactory<P>; // A Factory to create a Arvores Deitadas NameSampleDataStream from the command line utility.\nClass ADPOSSampleStream; // Note: Do not use this class, internal use only!\nClass ADPOSSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass ADSentenceSampleStream; // Note: Do not use this class, internal use only!\nClass ADSentenceSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass ADSentenceStream; // Stream filter which merges text lines into sentences, following the Arvores Deitadas syntax.\nClass ADSentenceStream.Sentence;\nClass ADSentenceStream.SentenceParser; // Parses a sample of AD corpus.\nClass ADSentenceStream.SentenceParser.Leaf; // Represents the AD leaf\nClass ADSentenceStream.SentenceParser.Node; // Represents the AD node\nClass ADSentenceStream.SentenceParser.TreeElement; // Represents a tree element, Node or Leaf\nClass ADTokenSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass PortugueseContractionUtility; // Utility class to handle Portuguese contractions.\n", "des": "Experimental package related to the Arvores Deitadas corpus format."}
{"index": 263, "repo": "nutch-2.4", "code": "Package: metatags\n\nClasses and Interfaces: \nClass MetaTagsParser; // Parse HTML meta tags (keywords, description) and store them in the parse metadata so that they can be indexed with the index-metadata plugin with the prefix 'metatag.'.\n", "des": "Parse filter to extract meta tags: keywords, description, etc."}
{"index": 1164, "repo": "commons-math3-3.6.1", "code": "Package: oned\n\nClasses and Interfaces: \nClass Euclidean1D; // This class implements a one-dimensional space.\nClass Interval; // This class represents a 1D interval.\nClass IntervalsSet; // This class represents a 1D region: a set of intervals.\nClass OrientedPoint; // This class represents a 1D oriented hyperplane.\nClass SubOrientedPoint; // This class represents sub-hyperplane for OrientedPoint.\nClass Vector1D; // This class represents a 1D vector.\nClass Vector1DFormat; // Formats a 1D vector in components list format \"{x}\".\nClass Euclidean1D.NoSubSpaceException; // Specialized exception for inexistent sub-space.\n", "des": "This package provides basic 1D geometry components."}
{"index": 2461, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: graphite\n\nClasses and Interfaces: \n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.graphite.GraphiteMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"graphite\") @EnableConfigurationProperties(GraphiteProperties.class) public class GraphiteMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Graphite.\n@ConfigurationProperties(prefix=\"management.graphite.metrics.export\") public class GraphiteProperties extends Object; // @ConfigurationProperties for configuring Graphite metrics export.\n", "des": "Support for exporting actuator metrics to Graphite."}
{"index": 3738, "repo": "lucene-queryparser-9.7.0", "code": "Package: precedence\n\nSub Packages: \npackage precedence.processors; // Lucene Precedence Query Parser Processors\n\nClasses and Interfaces: \nClass PrecedenceQueryParser; // This query parser works exactly as the standard query parser ( StandardQueryParser ), except that it respect the boolean precedence, so <a AND b OR c AND d> is parsed to <(+a +b) (+c +d)> instead of <+a +b +c +d>.\n", "des": "Precedence Query Parser Implementation"}
{"index": 3534, "repo": "opennlp-tools-2.2.0", "code": "Package: model\n\nClasses and Interfaces: \nInterface DataIndexer; // Represents an indexer which compresses events in memory and performs feature selection.\nInterface DataReader; // Describes generic ways to read data from a DataInputStream.\nInterface MaxentModel; // Interface for maximum entropy models.\nInterface Prior; // This interface allows one to implement a prior distribution for use in maximum entropy model training.\nInterface SequenceClassificationModel<T>; // A classification model that can label an input Sequence.\nInterface SequenceStream<S>; // Interface for streams of sequences used to train sequence models.\nClass AbstractDataIndexer; // Abstract DataIndexer implementation for collecting event and context counts used in training.\nClass AbstractModel; // A basic MaxentModel implementation.\nClass AbstractModelReader; // An abstract, basic implementation of a model reader.\nClass AbstractModelWriter; // An abstract, basic implementation of a model writer.\nClass BinaryFileDataReader; // A DataReader that reads files from a binary format.\nClass ComparableEvent; // A maxent event representation which we can use to sort based on the predicates indexes contained in the events.\nClass ComparablePredicate; // A maxent predicate representation which we can use to sort based on the outcomes.\nClass Context; // Class which associates a real valued parameter or expected value with a particular contextual predicate or feature.\nClass DataIndexerFactory; // A factory that produces DataIndexer instances.\nClass DynamicEvalParameters;\nClass EvalParameters; // This class encapsulates the variables used in producing probabilities from a model and facilitates passing these variables to the eval method.\nClass Event; // The context of a decision point during training.\nClass FileEventStream; // Class for using a file of events as an event stream.\nClass GenericModelReader; // An generic AbstractModelReader implementation.\nClass GenericModelWriter; // An generic AbstractModelWriter implementation.\nClass HashSumEventStream; // A hash sum based AbstractObjectStream implementation.\nClass ModelParameterChunker; // A helper class that handles Strings with more than 64k (65535 bytes) in length.\nClass MutableContext; // An extension of Context used to store parameters or expected values associated with this context which can be updated or assigned.\nClass ObjectDataReader; // A DataReader implementation based on ObjectInputStream.\n", "des": "Package related to ML models and feature selection techniques."}
{"index": 1316, "repo": "groovy-all-4.0.13", "code": "Package: util\n\nClasses and Interfaces: \npublic abstract class AbstractFactory extends Object implements Factory;\npublic interface BufferedIterator<T> extends Iterator<T>; // An iterator that allows examining the next element without consuming it.\npublic abstract class BuilderSupport extends GroovyObjectSupport; // Base class for creating arbitrary nested trees of objects or events.\npublic class CharsetToolkit extends Object; // Utility class to guess the encoding of a given text file.\npublic class ClosureComparator<T> extends Object implements Comparator<T>, Serializable; // A Comparator which uses a closure to compare 2 values being equal\npublic class ConfigObject extends GroovyObjectSupport implements Writable, Map, Cloneable; // A ConfigObject at a simple level is a Map that creates configuration entries (other ConfigObjects) when referencing them.\npublic abstract class DelegatingScript extends Script; // Script that performs method invocations and property access like Closure does.\npublic class Eval extends Object; // Allow easy integration from Groovy into Java through convenience methods.\npublic class Expando extends GroovyObjectSupport; // Represents a dynamically expandable bean.\npublic interface Factory;\npublic abstract class FactoryBuilderSupport extends Binding; // Mix of BuilderSupport and SwingBuilder's factory support.\npublic class GroovyCollections extends Object; // A Collections utility class\npublic class GroovyScriptEngine extends Object implements ResourceConnector; // Specific script engine able to reload modified scripts as well as dealing properly with dependent scripts.\npublic interface IFileNameFinder;\npublic class IndentPrinter extends Object; // A helper class for printing indented text.\npublic class MapEntry extends Object implements Map.Entry; // A Map.Entry implementation.\npublic class Node extends Object implements Serializable, Cloneable; // Represents an arbitrary tree node which can be used for structured metadata or any arbitrary XML-like tree.\npublic class NodeBuilder extends BuilderSupport; // A helper class for creating nested trees of Node objects for handling arbitrary data\npublic class NodeList extends ArrayList; // A List implementation which is returned by queries on a Node which provides some XPath like helper methods for GPath.\npublic class NodePrinter extends Object; // A helper class for creating nested trees of data\npublic class ObjectGraphBuilder extends FactoryBuilderSupport; // A builder for creating object graphs. Each node defines the class to be created and the property on its parent (if any) at the same time.\n", "des": "Various Groovy utilities for working with nodes, builders, logging, and other things."}
{"index": 3640, "repo": "solr-core-9.3.0", "code": "Package: overseer\n\nClasses and Interfaces: \nInterface ZkStateWriter.ZkWriteCallback;\nClass ClusterStateMutator;\nClass CollectionMutator;\nClass NodeMutator;\nClass ReplicaMutator;\nClass SliceMutator;\nClass ZkStateWriter; // ZkStateWriter is responsible for writing updates to the cluster state stored in ZooKeeper for collections each of which gets their own individual state.json in ZK.\nClass ZkWriteCommand;\nEnum OverseerAction; // Enum of actions supported by the overseer only.\n", "des": "Classes for updating cluster state in SolrCloud mode."}
{"index": 1562, "repo": "spring-restdocs-core-3.0.0", "code": "Package: cookies\n\nClasses and Interfaces: \npublic abstract class AbstractCookiesSnippet extends TemplatedSnippet; // Abstract TemplatedSnippet subclass that provides a base for snippets that document a RESTful resource's request or response cookies.\npublic class CookieDescriptor extends IgnorableDescriptor<CookieDescriptor>; // A description of a cookie found in a request or response.\npublic abstract class CookieDocumentation extends Object; // Static factory methods for documenting a RESTful API's request and response cookies.\npublic class RequestCookiesSnippet extends AbstractCookiesSnippet; // A Snippet that documents the cookies in a request.\npublic class ResponseCookiesSnippet extends AbstractCookiesSnippet; // A Snippet that documents the cookies in a response.\n", "des": "Documenting the cookies of a RESTful API's requests and responses."}
{"index": 3762, "repo": "lucene-analysis-common-9.7.0", "code": "Package: bn\n\nClasses and Interfaces: \nClass BengaliAnalyzer; // Analyzer for Bengali.\nClass BengaliNormalizationFilter; // A TokenFilter that applies BengaliNormalizer to normalize the orthography.\nClass BengaliNormalizationFilterFactory; // Factory for BengaliNormalizationFilter.\nClass BengaliNormalizer; // Normalizer for Bengali.\nClass BengaliStemFilter; // A TokenFilter that applies BengaliStemmer to stem Bengali words.\nClass BengaliStemFilterFactory; // Factory for BengaliStemFilter.\nClass BengaliStemmer; // Stemmer for Bengali.\n", "des": "Analyzer for Bengali Language."}
{"index": 2595, "repo": "spring-rabbit-3.0.6", "code": "Package: log4j2\n\nClasses and Interfaces: \n@Plugin(name=\"RabbitMQ\", category=\"Core\", elementType=\"appender\", printObject=true) public class AmqpAppender extends org.apache.logging.log4j.core.appender.AbstractAppender; // A Log4j 2 appender that publishes logging events to an AMQP Exchange.\nprotected static class AmqpAppender.AmqpManager extends org.apache.logging.log4j.core.appender.AbstractManager; // Manager class for the appender.\nprotected static class AmqpAppender.Builder extends Object implements org.apache.logging.log4j.core.util.Builder<AmqpAppender>;\nprotected static class AmqpAppender.Event extends Object; // Helper class to encapsulate a LoggingEvent, its MDC properties, and the number of retries.\n", "des": "Provides classes supporting Log4j 2 appenders."}
{"index": 3334, "repo": "opencms-core-15.0", "code": "Package: scheduler\n\nClasses and Interfaces: \nClass CmsJobBean; // Don't use CmsScheduledJobInfo directly, so we don't need to change it if we want to change how the values are rendered, and having only the fields we want displayed in the table makes it easier to understand.\nClass CmsJobEditView; // Form used to edit a scheduled job.\nClass CmsJobManagerApp; // The scheduled jobs manager app.\nClass CmsJobTable; // Table used to display scheduled jobs, together with buttons for modifying the jobs.\nClass CmsScheduledJobsAppConfig; // App configuration for the job scheduler.\nEnum CmsJobTable.TableProperty; // Property columns of table, including their Messages for header.\n", "des": "The scheduled jobs manager app classes."}
{"index": 759, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: br\n\nClasses and Interfaces: \nClass BrazilianAnalyzer; // Analyzer for Brazilian Portuguese language.\nClass BrazilianStemFilter; // A TokenFilter that applies BrazilianStemmer.\nClass BrazilianStemFilterFactory; // Factory for BrazilianStemFilter.\nClass BrazilianStemmer; // A stemmer for Brazilian Portuguese words.\n", "des": "Analyzer for Brazilian Portuguese."}
{"index": 3401, "repo": "commons-imaging-1.0-alpha3", "code": "Package: png\n\nClasses and Interfaces: \nClass GammaCorrection;\nClass PhysicalScale; // Used to specify physical scale when reading or storing image information.\nClass PngConstants;\nClass PngImageInfo;\nClass PngImageParser;\nClass PngImagingParameters; // Png format parameters.\nClass PngText;\nClass PngText.Itxt;\nClass PngText.Text;\nClass PngText.Ztxt;\nEnum ChunkType; // Type of a PNG chunk.\nEnum InterlaceMethod; // Interlace methods.\nEnum PngColorType;\n", "des": "The PNG image format."}
{"index": 1760, "repo": "spring-data-mongodb-4.1.2", "code": "Package: query\n\nClasses and Interfaces: \npublic class BasicQuery extends Query; // Custom Query implementation to setup a basic query from some arbitrary JSON query string.\npublic class BasicUpdate extends Update;\npublic class Collation extends Object; // Central abstraction for MongoDB collation support.\npublic static class Collation.Alternate extends Object;\npublic static class Collation.AlternateWithMaxVariable extends Collation.Alternate;\npublic static class Collation.CaseFirst extends Object;\npublic static class Collation.CollationLocale extends Object; // ICU locale abstraction for usage with MongoDB Collation.\npublic static interface Collation.ComparisonLevel; // Abstraction for the ICU Comparison Levels.\npublic static class Collation.PrimaryICUComparisonLevel extends Object; // Primary-strength Collation.ICUComparisonLevel.\npublic static class Collation.SecondaryICUComparisonLevel extends Object; // Secondary-strength Collation.ICUComparisonLevel.\npublic static class Collation.TertiaryICUComparisonLevel extends Object; // Tertiary-strength Collation.ICUComparisonLevel.\npublic class Criteria extends Object implements CriteriaDefinition; // Central class for creating queries.\npublic static interface Criteria.BitwiseCriteriaOperators; // MongoDB specific bitwise query operators like $bitsAllClear, $bitsAllSet,... for usage with Criteria.bits() and Query.\npublic interface CriteriaDefinition;\npublic class Field extends Object; // Field projection.\npublic static interface Field.FieldProjectionExpression; // Intermediate builder part for projecting a MongoExpression to a result field.\npublic final class GeoCommand extends Object; // Wrapper around a Shape to allow appropriate query rendering.\npublic class Meta extends Object; // Meta-data for Query instances.\npublic static enum Meta.CursorOption extends Enum<Meta.CursorOption>; // Meta.CursorOption represents OP_QUERY wire protocol flags to change the behavior of queries.\npublic class MetricConversion extends Object; // Metric and Distance conversions using the metric system.\npublic enum MongoRegexCreator extends Enum<MongoRegexCreator>;\npublic static enum MongoRegexCreator.MatchMode extends Enum<MongoRegexCreator.MatchMode>; // Match modes for treatment of String values.\npublic final class NearQuery extends Object implements ReadConcernAware, ReadPreferenceAware; // Builder class to build near-queries.\n", "des": "MongoDB specific query and update support."}
{"index": 3468, "repo": "hibernate-core-5.6.15.Final", "code": "Package: sql\n\nClasses and Interfaces: \nInterface SqlTypeDescriptor; // Descriptor for the SQL/JDBC side of a value mapping.\nClass BasicBinder<J>; // Convenience base implementation of ValueBinder\nClass BasicExtractor<J>; // Convenience base implementation of ValueExtractor\nClass BigIntTypeDescriptor; // Descriptor for BIGINT handling.\nClass BinaryTypeDescriptor; // Descriptor for BINARY handling.\nClass BitTypeDescriptor; // Descriptor for BIT handling.\nClass BlobTypeDescriptor; // Descriptor for BLOB handling.\nClass BooleanTypeDescriptor; // Descriptor for BOOLEAN handling.\nClass CharTypeDescriptor; // Descriptor for CHAR handling.\nClass ClobTypeDescriptor; // Descriptor for CLOB handling.\nClass DateTypeDescriptor; // Descriptor for DATE handling.\nClass DecimalTypeDescriptor; // Descriptor for DECIMAL handling.\nClass DoubleTypeDescriptor; // Descriptor for DOUBLE handling.\nClass FloatTypeDescriptor; // Descriptor for FLOAT handling.\nClass IntegerTypeDescriptor; // Descriptor for INTEGER handling.\nClass JdbcTypeFamilyInformation; // Information pertaining to JDBC type families.\nClass JdbcTypeJavaClassMappings; // Maintains the JDBC recommended mappings for JDBC type-code to/from Java Class as defined in _Appendix B : Data Type Conversion Tables_ of the _JDBC 4.0 Specification_ Eventually, the plan is to have Dialect and DatabaseMetaData.getTypeInfo() contribute this information.\nClass LobTypeMappings;\nClass LongNVarcharTypeDescriptor; // Descriptor for LONGNVARCHAR handling.\nClass LongVarbinaryTypeDescriptor; // Descriptor for LONGVARBINARY handling.\nClass LongVarcharTypeDescriptor; // Descriptor for LONGVARCHAR handling.\nClass NationalizedTypeMappings; // Manages a mapping between nationalized and non-nationalized variants of JDBC types.\nClass NCharTypeDescriptor; // Descriptor for NCHAR handling.\nClass NClobTypeDescriptor; // Descriptor for NCLOB handling.\nClass NumericTypeDescriptor; // Descriptor for NUMERIC handling.\nClass NVarcharTypeDescriptor; // Descriptor for NVARCHAR handling.\nClass RealTypeDescriptor; // Descriptor for REAL handling.\nClass SmallIntTypeDescriptor; // Descriptor for SMALLINT handling.\nClass SqlTypeDescriptorRegistry;\nClass SqlTypeDescriptorRegistry.ObjectSqlTypeDescriptor;\nClass TimestampTypeDescriptor; // Descriptor for TIMESTAMP handling.\nClass TimeTypeDescriptor; // Descriptor for TIME handling.\n", "des": "Defines handling of the standard JDBC-defined types."}
{"index": 3461, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface NamedParameterContext; // The context for named parameters.\nInterface QueryBuildingParameters; // Provides values for all options that impact the built query.\n", "des": "Defines the SPI for obtaining values for options that impact the load query."}
{"index": 3014, "repo": "spring-web-6.0.11", "code": "Package: server\n\nSub Packages: \npackage server.observation; // Instrumentation for observing HTTP server applications.\npackage server.reactive; // Abstractions for reactive HTTP server support including a ServerHttpRequest and ServerHttpResponse along with an HttpHandler for processing.\n\nClasses and Interfaces: \npublic class DelegatingServerHttpResponse extends Object implements ServerHttpResponse; // Implementation of ServerHttpResponse that delegates all calls to a given target ServerHttpResponse.\npublic interface PathContainer; // Structured representation of a URI path parsed via PathContainer.parsePath(String) into a sequence of PathContainer.Separator and PathContainer.PathSegment elements.\npublic static interface PathContainer.Element; // A path element, either separator or path segment.\npublic static class PathContainer.Options extends Object; // Options to customize parsing based on the type of input path.\npublic static interface PathContainer.PathSegment extends PathContainer.Element; // Path segment element.\npublic static interface PathContainer.Separator extends PathContainer.Element; // Path separator element.\npublic interface RequestPath extends PathContainer; // Specialization of PathContainer that subdivides the path into a RequestPath.contextPath() and the remaining RequestPath.pathWithinApplication().\npublic interface ServerHttpAsyncRequestControl; // A control that can put the processing of an HTTP request in asynchronous mode during which the response remains open until explicitly closed.\npublic interface ServerHttpRequest extends HttpRequest, HttpInputMessage; // Represents a server-side HTTP request.\npublic interface ServerHttpResponse extends HttpOutputMessage, Flushable, Closeable; // Represents a server-side HTTP response.\npublic class ServletServerHttpAsyncRequestControl extends Object implements ServerHttpAsyncRequestControl, AsyncListener; // A ServerHttpAsyncRequestControl to use on Servlet containers.\npublic class ServletServerHttpRequest extends Object implements ServerHttpRequest; // ServerHttpRequest implementation that is based on a HttpServletRequest.\npublic class ServletServerHttpResponse extends Object implements ServerHttpResponse; // ServerHttpResponse implementation that is based on a HttpServletResponse.\n", "des": "Contains an abstraction over server-side HTTP."}
{"index": 2238, "repo": "spring-security-acl-6.1.2", "code": "Package: domain\n\nClasses and Interfaces: \npublic abstract class AbstractPermission extends Object implements Permission; // Provides an abstract superclass for Permission implementations.\npublic class AccessControlEntryImpl extends Object implements AccessControlEntry, AuditableAccessControlEntry; // An immutable default implementation of AccessControlEntry.\npublic interface AclAuthorizationStrategy; // Strategy used by AclImpl to determine whether a principal is permitted to call adminstrative methods on the AclImpl.\npublic class AclAuthorizationStrategyImpl extends Object implements AclAuthorizationStrategy; // Default implementation of AclAuthorizationStrategy.\npublic abstract class AclFormattingUtils extends Object; // Utility methods for displaying ACL information.\npublic class AclImpl extends Object implements Acl, MutableAcl, AuditableAcl, OwnershipAcl; // Base implementation of Acl.\npublic interface AuditLogger; // Used by AclImpl to log audit events.\npublic class BasePermission extends AbstractPermission; // A set of standard permissions.\npublic class ConsoleAuditLogger extends Object implements AuditLogger; // A basic implementation of AuditLogger.\npublic class CumulativePermission extends AbstractPermission; // Represents a Permission that is constructed at runtime from other permissions.\npublic class DefaultPermissionFactory extends Object implements PermissionFactory; // Default implementation of PermissionFactory.\npublic class DefaultPermissionGrantingStrategy extends Object implements PermissionGrantingStrategy;\npublic class GrantedAuthoritySid extends Object implements Sid; // Represents a GrantedAuthority as a Sid.\npublic class IdentityUnavailableException extends RuntimeException; // Thrown if an ACL identity could not be extracted from an object.\npublic class ObjectIdentityImpl extends Object implements ObjectIdentity; // Simple implementation of ObjectIdentity.\npublic class ObjectIdentityRetrievalStrategyImpl extends Object implements ObjectIdentityRetrievalStrategy, ObjectIdentityGenerator; // Basic implementation of ObjectIdentityRetrievalStrategy and ObjectIdentityGenerator that uses the constructors of ObjectIdentityImpl to create the ObjectIdentity.\npublic interface PermissionFactory; // Provides a simple mechanism to retrieve Permission instances from integer masks.\npublic class PrincipalSid extends Object implements Sid; // Represents an Authentication.getPrincipal() as a Sid.\npublic class SidRetrievalStrategyImpl extends Object implements SidRetrievalStrategy; // Basic implementation of SidRetrievalStrategy that creates a Sid for the principal, as well as every granted authority the principal holds.\npublic class SpringCacheBasedAclCache extends Object implements AclCache; // Simple implementation of AclCache that delegates to Cache implementation.\n", "des": "Basic implementation of access control lists (ACLs) interfaces."}
{"index": 1919, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: redis\n\nClasses and Interfaces: \npublic interface ClientResourcesBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the ClientResources through a ClientResources.Builder whilst retaining default auto-configuration.\n@FunctionalInterface public interface JedisClientConfigurationBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the JedisClientConfiguration through a JedisClientConfiguration.JedisClientConfigurationBuilder whilst retaining default auto-configuration.\n@FunctionalInterface public interface LettuceClientConfigurationBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the LettuceClientConfiguration through a LettuceClientConfiguration.LettuceClientConfigurationBuilder whilst retaining default auto-configuration.\n@AutoConfiguration @ConditionalOnClass(org.springframework.data.redis.core.RedisOperations.class) @EnableConfigurationProperties(RedisProperties.class) @Import({org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration.class,org.springframework.boot.autoconfigure.data.redis.JedisConnectionConfiguration.class}) public class RedisAutoConfiguration extends Object; // Auto-configuration for Spring Data's Redis support.\npublic interface RedisConnectionDetails extends ConnectionDetails; // Details required to establish a connection to a Redis service.\npublic static interface RedisConnectionDetails.Cluster; // Redis cluster configuration.\npublic static record RedisConnectionDetails.Node(String host, int port) extends Record; // A node in a sentinel or cluster configuration.\npublic static interface RedisConnectionDetails.Sentinel; // Redis sentinel configuration.\npublic static interface RedisConnectionDetails.Standalone; // Redis standalone configuration.\n@ConfigurationProperties(prefix=\"spring.data.redis\") public class RedisProperties extends Object; // Configuration properties for Redis.\npublic static enum RedisProperties.ClientType extends Enum<RedisProperties.ClientType>; // Type of Redis client to use.\npublic static class RedisProperties.Cluster extends Object; // Cluster properties.\npublic static class RedisProperties.Jedis extends Object; // Jedis client properties.\npublic static class RedisProperties.Lettuce extends Object; // Lettuce client properties.\npublic static class RedisProperties.Lettuce.Cluster extends Object;\npublic static class RedisProperties.Lettuce.Cluster.Refresh extends Object;\n", "des": "Auto-configuration for Spring Data Redis."}
{"index": 2002, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: servlet\n\nClasses and Interfaces: \npublic class JettyWebSocketServletWebServerCustomizer extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactory>, org.springframework.core.Ordered; // WebSocket customizer for JettyServletWebServerFactory.\npublic class TomcatWebSocketServletWebServerCustomizer extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory>, org.springframework.core.Ordered; // WebSocket customizer for TomcatServletWebServerFactory.\npublic class UndertowWebSocketServletWebServerCustomizer extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory>, org.springframework.core.Ordered; // WebSocket customizer for UndertowServletWebServerFactory.\n@AutoConfiguration(after=JacksonAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer.class) public class WebSocketMessagingAutoConfiguration extends Object; // Auto-configuration for WebSocket-based messaging.\n@AutoConfiguration(before=ServletWebServerFactoryAutoConfiguration.class) @ConditionalOnClass({jakarta.servlet.Servlet.class,jakarta.websocket.server.ServerContainer.class}) @ConditionalOnWebApplication(type=SERVLET) public class WebSocketServletAutoConfiguration extends Object; // Auto configuration for WebSocket servlet server in embedded Tomcat, Jetty or Undertow.\n", "des": "Auto-configuration for WebSocket support in servlet web servers."}
{"index": 2211, "repo": "spring-data-commons-3.1.2", "code": "Package: projection\n\nClasses and Interfaces: \npublic final class Accessor extends Object; // Helper value to abstract an accessor.\npublic class DefaultMethodInvokingMethodInterceptor extends Object implements MethodInterceptor; // Method interceptor to invoke default methods on the repository proxy.\npublic class EntityProjection<M,D> extends Object implements Streamable<EntityProjection.PropertyProjection<?,?>>; // Descriptor for a top-level mapped type representing a view onto a domain type structure.\npublic static class EntityProjection.ContainerPropertyProjection<M,D> extends EntityProjection.PropertyProjection<M,D>; // Descriptor for a property-level type along its potential projection that is held within a Collection-like or Map-like container.\npublic static enum EntityProjection.ProjectionType extends Enum<EntityProjection.ProjectionType>; // Projection type.\npublic static class EntityProjection.PropertyProjection<M,D> extends EntityProjection<M,D>; // Descriptor for a property-level type along its potential projection.\npublic class EntityProjectionIntrospector extends Object; // This class is introspects the returned type in the context of a domain type for all reachable properties (w/o cycles) to determine which property paths are subject to projection.\npublic static interface EntityProjectionIntrospector.ProjectionPredicate; // Represents a predicate (boolean-valued function) of a target type and its underlying type.\npublic interface MethodInterceptorFactory; // SPI to create MethodInterceptor instances based on the given source object and the target type to produce.\npublic interface ProjectionFactory; // A factory to create projecting instances for other objects usually used to allow easy creation of representation projections to define which properties of a domain objects shall be exported in which way.\npublic interface ProjectionInformation; // Information about a projection type.\npublic class SpelAwareProxyProjectionFactory extends Object implements BeanFactoryAware; // A ProxyProjectionFactory that adds support to use Value-annotated methods on a projection interface to evaluate the contained SpEL expression to define the outcome of the method call.\nprotected static class SpelAwareProxyProjectionFactory.SpelAwareProjectionInformation extends Object;\npublic interface TargetAware extends TargetClassAware, RawTargetAccess; // Extension of TargetClassAware to be able to ignore the getter on JSON rendering.\n", "des": "Projection subsystem."}
{"index": 620, "repo": "freemarker-2.3.32", "code": "Package: debug\n\nClasses and Interfaces: \nInterface DebuggedEnvironment; // Represents the debugger-side mirror of a debugged Environment object in the remote VM.\nInterface Debugger; // The main debugger interface.\nInterface DebuggerListener; // An interface for components that wish to receive debugging events.\nInterface DebugModel; // Represents the debugger-side mirror of a TemplateModel object, a Template object, or a Configuration object.\nClass Breakpoint; // Represents a breakpoint location consisting of a template name and a line number.\nClass DebuggerClient; // A utility class that allows you to connect to the FreeMarker debugger service running on a specific host and port.\nClass EnvironmentSuspendedEvent; // Event describing a suspension of an environment (ie because it hit a breakpoint).\n", "des": "Debugging API; experimental status, might change! This is to support debugging in IDE-s."}
{"index": 686, "repo": "jackson-databind-2.15.2", "code": "Package: introspect\n\nClasses and Interfaces: \nInterface ClassIntrospector.MixInResolver; // Interface used for decoupling details of how mix-in annotation definitions are accessed (via this interface), and how they are stored (defined by classes that implement the interface)\nInterface DefaultAccessorNamingStrategy.BaseNameValidator; // Definition of a handler API to use for checking whether given base name (remainder of accessor method name after removing prefix) is acceptable based on various rules.\nInterface TypeResolutionContext; // Interface that defines API used by members (like AnnotatedMethod) to dynamically resolve types they have.\nInterface VisibilityChecker<T extends VisibilityChecker<T>>; // Interface for object used for determine which property elements (methods, fields, constructors) can be auto-detected, with respect to their visibility modifiers.\nInterface WithMember<T>;\nClass AccessorNamingStrategy; // API for handlers used to \"mangle\" names of \"getter\" and \"setter\" methods to find implicit property names.\nClass AccessorNamingStrategy.Base; // Helper class that implements all abstract methods with dummy implementations.\nClass AccessorNamingStrategy.Provider; // Interface for provider (factory) for constructing AccessorNamingStrategy for given type of deserialization target\nClass Annotated; // Shared base class used for anything on which annotations (included within a AnnotationMap).\nClass AnnotatedAndMetadata<A extends Annotated,M>; // Silly little \"Pair\" class needed for 2-element tuples (without adding dependency to one of 3rd party packages that has one).\nClass AnnotatedClass;\nClass AnnotatedClass.Creators;\nClass AnnotatedClassResolver; // Helper class that contains logic for resolving annotations to construct AnnotatedClass instances.\nClass AnnotatedConstructor;\nClass AnnotatedField; // Object that represents non-static (and usually non-transient/volatile) fields of a class.\nClass AnnotatedFieldCollector;\nClass AnnotatedMember; // Intermediate base class for annotated entities that are members of a class; fields, methods and constructors.\nClass AnnotatedMethod;\nClass AnnotatedMethodCollector;\nClass AnnotatedMethodMap; // Simple helper class used to keep track of collection of AnnotatedMethods, accessible by lookup.\nClass AnnotatedParameter; // Object that represents method parameters, mostly so that associated annotations can be processed conveniently.\nClass AnnotatedWithParams; // Intermediate base class that encapsulates features that constructors and methods share.\n", "des": "Functionality needed for Bean introspection, required for detecting accessors and mutators for Beans, as well as locating and handling method annotations."}
{"index": 2986, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "Package: web\n\nSub Packages: \npackage web.access; // OAuth 2.0 Resource Server access denial classes and interfaces.\n\nClasses and Interfaces: \npublic final class BearerTokenAuthenticationEntryPoint extends Object implements org.springframework.security.web.AuthenticationEntryPoint; // An AuthenticationEntryPoint implementation used to commence authentication of protected resource requests using BearerTokenAuthenticationFilter.\n@Deprecated public final class BearerTokenAuthenticationFilter extends BearerTokenAuthenticationFilter;\n@FunctionalInterface public interface BearerTokenResolver; // A strategy for resolving Bearer Tokens from the HttpServletRequest.\npublic final class DefaultBearerTokenResolver extends Object implements BearerTokenResolver; // The default BearerTokenResolver implementation based on RFC 6750.\npublic class HeaderBearerTokenResolver extends Object implements BearerTokenResolver; // Generic resolver extracting pre-authenticated JWT identity from a custom header.\n", "des": "OAuth 2.0 Resource Server Filter's and supporting classes and interfaces."}
{"index": 736, "repo": "spring-data-solr-4.3.15", "code": "Package: query\n\nSub Packages: \npackage query.result; // Query result abstractions for Solr returned NamedList.\n\nClasses and Interfaces: \nInterface CalculatedField;\nInterface FacetAndHighlightQuery; // A Query that combines a FacetQuery and a HighlightQuery\nInterface FacetQuery; // Query to be used for faceting.\nInterface Field; // Defines a Field that can be used within Criteria.\nInterface FilterQuery; // Filter Queries are simple solr Queries applied after executing the original query.\nInterface Function;\nInterface Function.Context; // The Function.Context the Function is used in.\nInterface HighlightQuery;\nInterface PivotField; // Defines a field that could be used within a pivot facet query.\nInterface Query; // A Query that can be translated into a solr understandable Query.\nInterface QueryParameter; // Query Parameter to be used when executing query against solr server\nInterface QueryStringHolder; // Class holding a solr readable QueryString that can be used with the q parameter.\nInterface SolrDataQuery; // Common interface for any Query\nInterface TermsQuery;\nInterface Update; // Update one or more fields of a Document without touching the others.\nInterface UpdateField;\nInterface ValueHoldingField;\nClass AbstractFacetAndHighlightQueryDecorator; // General purpose FacetAndHighlightQuery decorator.\nClass AbstractFacetQueryDecorator; // General purpose FacetQuery decorator.\nClass AbstractFunction;\nClass AbstractHighlightQueryDecorator; // General purpose HighlightQuery decorator.\nClass AbstractQueryDecorator; // General purpose Query abstract decorator.\nClass AnyCriteria;\nClass Criteria; // Criteria is the central class when constructing queries.\nClass Criteria.Predicate; // Single entry to be used when defining search criteria\nClass Crotch;\nClass CurrencyFunction; // Implementation of currency(field_name,[CODE])\nClass DefaultValueFunction; // Implementation of def(field|function,defaultValue)\nClass DistanceField; // Implementation of CalculatedField for geodist\nClass DistanceFunction; // Implementation of dist(power, pointA, pointB)\nClass DistanceFunction.Builder;\nClass DivideFunction; // Implementation of div(x,y)\nClass DivideFunction.Builder;\nClass ExistsFunction; // Implementation of exists(field|function)\nClass FacetOptions; // Set of options that can be set on a FacetQuery\nClass FacetOptions.FacetParameter;\n", "des": "Query abstractions for SolrQuery."}
{"index": 930, "repo": "commons-compress-1.23.0", "code": "Package: nls\n\nClasses and Interfaces: \nClass Messages; // This class retrieves strings from a resource bundle and returns them, formatting them with MessageFormat when required.\n", "des": "Internal package."}
{"index": 2066, "repo": "spring-webmvc-6.0.11", "code": "Package: function\n\nSub Packages: \npackage function.support; // Classes supporting the org.springframework.web.servlet.function package.\n\nClasses and Interfaces: \npublic interface AsyncServerResponse extends ServerResponse; // Asynchronous subtype of ServerResponse that exposes the future response.\npublic interface EntityResponse<T> extends ServerResponse; // Entity-specific subtype of ServerResponse that exposes entity data.\npublic static interface EntityResponse.Builder<T>; // Defines a builder for EntityResponse.\n@FunctionalInterface public interface HandlerFilterFunction<T extends ServerResponse,R extends ServerResponse>; // Represents a function that filters a handler function.\n@FunctionalInterface public interface HandlerFunction<T extends ServerResponse>; // Represents a function that handles a request.\npublic interface RenderingResponse extends ServerResponse; // Rendering-specific subtype of ServerResponse that exposes model and template data.\npublic static interface RenderingResponse.Builder; // Defines a builder for RenderingResponse.\n@FunctionalInterface public interface RequestPredicate; // Represents a function that evaluates on a given ServerRequest.\npublic abstract class RequestPredicates extends Object; // Implementations of RequestPredicate that implement various useful request matching operations, such as matching based on path, HTTP method, etc.\npublic static interface RequestPredicates.Visitor; // Receives notifications from the logical structure of request predicates.\n@FunctionalInterface public interface RouterFunction<T extends ServerResponse>; // Represents a function that routes to a handler function.\npublic abstract class RouterFunctions extends Object; // Central entry point to Spring's functional web framework. Exposes routing functionality, such as to create a RouterFunction using a discoverable builder-style API, to create a RouterFunction given a RequestPredicate and HandlerFunction, and to do further subrouting on an existing routing function.\npublic static interface RouterFunctions.Builder; // Represents a discoverable builder for router functions.\npublic static interface RouterFunctions.Visitor; // Receives notifications from the logical structure of router functions.\npublic interface ServerRequest; // Represents a server-side HTTP request, as handled by a HandlerFunction.\npublic static interface ServerRequest.Builder; // Defines a builder for a request.\npublic static interface ServerRequest.Headers; // Represents the headers of the HTTP request.\n", "des": "Provides the types that make up Spring's functional web framework for Servlet environments."}
{"index": 2137, "repo": "wicket-core-10.0.0-M1", "code": "Package: authorization\n\nClasses and Interfaces: \npublic class Action extends org.apache.wicket.util.lang.EnumeratedType; // A class for constructing singleton constants that represent a given component action that needs to be authorized.\npublic abstract class AuthorizationException extends WicketRuntimeException; // Base class for exceptions thrown as a result of authorization failure.\npublic interface IAuthorizationStrategy; // Authorization strategies specify aspect-like constraints on significant actions taken by the framework in a given application.\npublic static class IAuthorizationStrategy.AllowAllAuthorizationStrategy extends Object implements IAuthorizationStrategy;\n@FunctionalInterface public interface IUnauthorizedComponentInstantiationListener; // Interface to code that is called to handle unauthorized component instantiations.\n@FunctionalInterface public interface IUnauthorizedResourceRequestListener; // A listener that is notified when a request to some resource is not allowed.\npublic class UnauthorizedActionException extends AuthorizationException; // Exception that is thrown when an action is not authorized.\npublic class UnauthorizedInstantiationException extends AuthorizationException; // Exception that is thrown when the creation of a component is not allowed.\n", "des": "Contains classes that allow the user to specify authorization constraints via IAuthorizationStrategy."}
{"index": 118, "repo": "ignite-core-2.15.0", "code": "Package: cpp\n\nClasses and Interfaces: \nClass PlatformCppConfiguration; // Platform CPP configuration.\n", "des": "Contains C++ platform-related classes."}
{"index": 1402, "repo": "spring-boot-actuator-3.1.1", "code": "Package: info\n\nClasses and Interfaces: \n@ImportRuntimeHints(org.springframework.boot.actuate.info.BuildInfoContributor.BuildInfoContributorRuntimeHints.class) public class BuildInfoContributor extends InfoPropertiesInfoContributor<org.springframework.boot.info.BuildProperties>; // An InfoContributor that exposes BuildProperties.\npublic class EnvironmentInfoContributor extends Object implements InfoContributor; // An InfoContributor that provides all environment entries prefixed with info.\n@ImportRuntimeHints(org.springframework.boot.actuate.info.GitInfoContributor.GitInfoContributorRuntimeHints.class) public class GitInfoContributor extends InfoPropertiesInfoContributor<org.springframework.boot.info.GitProperties>; // An InfoContributor that exposes GitProperties.\npublic final class Info extends Object; // Carries information of the application.\npublic static class Info.Builder extends Object; // Builder for creating immutable Info instances.\n@FunctionalInterface public interface InfoContributor; // Contributes additional info details.\n@Endpoint(id=\"info\") public class InfoEndpoint extends Object; // @Endpoint to expose arbitrary application information.\npublic abstract class InfoPropertiesInfoContributor<T extends org.springframework.boot.info.InfoProperties> extends Object implements InfoContributor; // A base InfoContributor to expose an InfoProperties.\npublic static enum InfoPropertiesInfoContributor.Mode extends Enum<InfoPropertiesInfoContributor.Mode>; // Defines how properties should be exposed.\n@ImportRuntimeHints(org.springframework.boot.actuate.info.JavaInfoContributor.JavaInfoContributorRuntimeHints.class) public class JavaInfoContributor extends Object implements InfoContributor; // An InfoContributor that exposes JavaInfo.\npublic class MapInfoContributor extends Object implements InfoContributor; // A simple InfoContributor that exposes a map.\n@ImportRuntimeHints(org.springframework.boot.actuate.info.OsInfoContributor.OsInfoContributorRuntimeHints.class) public class OsInfoContributor extends Object implements InfoContributor; // An InfoContributor that exposes OsInfo.\npublic class SimpleInfoContributor extends Object implements InfoContributor; // A simple InfoContributor that exposes a single detail.\n", "des": "Classes for application info."}
{"index": 542, "repo": "commons-geometry-core-1.0", "code": "Package: bsp\n\nClasses and Interfaces: \nInterface AbstractBSPTree.SubtreeInitializer<N extends AbstractBSPTree.AbstractNode<?,?>>; // Interface used to initialize newly created BSP subtrees, consisting of a single parent node and two child nodes.\nInterface BSPSubtree<P extends Point<P>,N extends BSPTree.Node<P,N>>; // Interface for types that form the root of BSP subtrees.\nInterface BSPTree<P extends Point<P>,N extends BSPTree.Node<P,N>>; // Interface for Binary Space Partitioning (BSP) trees.\nInterface BSPTree.Node<P extends Point<P>,N extends BSPTree.Node<P,N>>; // Interface for Binary Space Partitioning (BSP) tree nodes.\nInterface BSPTreeVisitor<P extends Point<P>,N extends BSPTree.Node<P,N>>; // Interface for visiting the nodes in a BSPTree or BSPSubtree.\nClass AbstractBSPTree<P extends Point<P>,N extends AbstractBSPTree.AbstractNode<P,N>>; // Abstract class for Binary Space Partitioning (BSP) tree implementations.\nClass AbstractBSPTree.AbstractNode<P extends Point<P>,N extends AbstractBSPTree.AbstractNode<P,N>>; // Abstract implementation of BSPTree.Node.\nClass AbstractBSPTreeMergeOperator<P extends Point<P>,N extends AbstractBSPTree.AbstractNode<P,N>>; // Class containing the basic algorithm for merging two AbstractBSPTree instances.\nClass AbstractPartitionedRegionBuilder<P extends Point<P>,N extends AbstractRegionBSPTree.AbstractRegionNode<P,N>>; // Class encapsulating logic for building regions by inserting boundaries into a BSP tree containing structural cuts, i.e.\nClass AbstractRegionBSPTree<P extends Point<P>,N extends AbstractRegionBSPTree.AbstractRegionNode<P,N>>; // Abstract BSPTree specialized for representing regions of space.\nClass AbstractRegionBSPTree.AbstractRegionNode<P extends Point<P>,N extends AbstractRegionBSPTree.AbstractRegionNode<P,N>>; // BSPTree.Node implementation for use with AbstractRegionBSPTrees.\n", "des": "This package contains classes related to Binary Space Partitioning (BSP) trees."}
{"index": 1237, "repo": "spring-hateoas-2.1.2", "code": "Package: problem\n\nClasses and Interfaces: \npublic class Problem extends Object; // Encapsulation of an RFC-7807 Problem code.\npublic static final class Problem.ExtendedProblem<T> extends Problem;\n", "des": "Value objects to build Problem representations."}
{"index": 3701, "repo": "solr-core-9.3.0", "code": "Package: mlt\n\nClasses and Interfaces: \nClass CloudMLTQParser;\nClass MLTContentQParserPlugin;\nClass MLTQParserPlugin; // Usage: {!mlt qf=queryField1,queryField2}uniqueId\nClass SimpleMLTQParser;\n", "des": "APIs and classes for implementing MoreLikeThis (mlt) QueryParser."}
{"index": 1899, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: aop\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnProperty(prefix=\"spring.aop\", name=\"auto\", havingValue=\"true\", matchIfMissing=true) public class AopAutoConfiguration extends Object; // Auto-configuration for Spring's AOP support.\n", "des": "Auto-configuration for Spring AOP."}
{"index": 2409, "repo": "spring-batch-core-5.0.2", "code": "Package: skip\n\nClasses and Interfaces: \npublic class AlwaysSkipItemSkipPolicy extends Object implements SkipPolicy; // Implementation of the SkipPolicy interface that will always return that an item should be skipped.\npublic class CompositeSkipPolicy extends Object implements SkipPolicy;\npublic class ExceptionClassifierSkipPolicy extends Object implements SkipPolicy; // A SkipPolicy that depends on an exception classifier to make its decision, and then delegates to the classifier result.\npublic class LimitCheckingItemSkipPolicy extends Object implements SkipPolicy; // SkipPolicy that determines whether or not reading should continue based upon how many items have been skipped.\npublic class NeverSkipItemSkipPolicy extends Object implements SkipPolicy; // SkipPolicy implementation that always returns false, indicating that an item should not be skipped.\npublic class NonSkippableProcessException extends SkipException; // Fatal exception to be thrown when a process operation could not be skipped.\npublic class NonSkippableReadException extends SkipException; // Fatal exception to be thrown when a read operation could not be skipped.\npublic class NonSkippableWriteException extends SkipException; // Fatal exception to be thrown when a process operation could not be skipped.\npublic abstract class SkipException extends UnexpectedJobExecutionException; // Base exception indicating that the skip has failed or caused a failure.\npublic class SkipLimitExceededException extends SkipException; // Exception indicating that the skip limit for a particular Step has been exceeded.\npublic class SkipListenerFailedException extends UnexpectedJobExecutionException; // Special exception to indicate a failure in a skip listener.\n@FunctionalInterface public interface SkipPolicy; // Policy for determining whether or not some processing should be skipped.\npublic class SkipPolicyFailedException extends UnexpectedJobExecutionException; // Special exception to indicate a failure in a skip policy.\n", "des": "Specific implementations of skip concerns for items in a step."}
{"index": 2272, "repo": "spring-vault-core-3.0.4", "code": "Package: support\n\nClasses and Interfaces: \npublic class VaultRepositoryFactory extends KeyValueRepositoryFactory; // RepositoryFactorySupport specific of handing Vault KeyValueRepository.\npublic class VaultRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends KeyValueRepositoryFactoryBean<T,S,ID>; // Adapter for Springs FactoryBean interface to allow easy setup of VaultRepositoryFactory via Spring configuration.\npublic class VaultRevisionMetadata extends Object implements RevisionMetadata<Integer>;\npublic class VaultRevisionRepository<T> extends Object implements RevisionRepository<T,String,Integer>; // Vault-based RevisionRepository providing revision metadata for versioned secrets.\n", "des": "Support infrastructure for query derivation of Vault specific repositories."}
{"index": 1929, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: rsocket\n\nClasses and Interfaces: \n@AutoConfiguration(after={GraphQlAutoConfiguration.class,RSocketMessagingAutoConfiguration.class}) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.execution.GraphQlSource.class,io.rsocket.core.RSocketServer.class,reactor.netty.http.server.HttpServer.class}) @ConditionalOnBean({org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.class,org.springframework.graphql.data.method.annotation.support.AnnotatedControllerConfigurer.class}) @ConditionalOnProperty(prefix=\"spring.graphql.rsocket\", name=\"mapping\") public class GraphQlRSocketAutoConfiguration extends Object; // Auto-configuration for enabling Spring GraphQL over RSocket.\n@AutoConfiguration(after=RSocketRequesterAutoConfiguration.class) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.client.RSocketGraphQlClient.class,org.springframework.messaging.rsocket.RSocketRequester.class,io.rsocket.RSocket.class,io.rsocket.transport.netty.client.TcpClientTransport.class}) public class RSocketGraphQlClientAutoConfiguration extends Object; // Auto-configuration for RSocketGraphQlClient.\n", "des": "Auto-configuration classes for RSocket integration with GraphQL."}
{"index": 3529, "repo": "opennlp-tools-2.2.0", "code": "Package: log\n\nClasses and Interfaces: \nClass LogPrintStream; // This class serves as an adapter for a Logger used within a PrintStream.\n", "des": "Package contains a PrintStream adapter for internal use only."}
{"index": 40, "repo": "ignite-core-2.15.0", "code": "Package: scheduler\n\nClasses and Interfaces: \nInterface SchedulerFuture<R>; // Future for cron-based scheduled execution.\n", "des": "Contains Job Scheduling functionality."}
{"index": 1279, "repo": "spring-core-6.0.11", "code": "Package: metrics\n\nSub Packages: \npackage metrics.jfr; // Support package for recording startup metrics using Java Flight Recorder.\n\nClasses and Interfaces: \npublic interface ApplicationStartup; // Instruments the application startup phase using steps.\npublic interface StartupStep; // Step recording metrics about a particular phase or action happening during the ApplicationStartup.\npublic static interface StartupStep.Tag; // Simple key/value association for storing step metadata.\npublic static interface StartupStep.Tags extends Iterable<StartupStep.Tag>; // Immutable collection of StartupStep.Tag.\n", "des": "Support package for recording metrics during application startup."}
{"index": 702, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: config\n\nClasses and Interfaces: \nClass DslIntegrationConfigurationInitializer; // The Java DSL Integration infrastructure beanFactory initializer.\nClass IntegrationFlowBeanPostProcessor; // A BeanPostProcessor to parse IntegrationFlow beans and register their components as beans in the provided BeanFactory, if necessary.\n", "des": "Provides config classes of the Spring Integration Java DSL."}
{"index": 2883, "repo": "spring-integration-core-6.1.2", "code": "Package: context\n\nClasses and Interfaces: \npublic interface NamedComponent;\n", "des": "Provides classes supporting use of the application context."}
{"index": 238, "repo": "nutch-2.4", "code": "Package: settings\n\nClasses and Interfaces: \nClass SettingsPage;\n", "des": "Contains settings page classes for Web UI"}
{"index": 1937, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: http\n\nSub Packages: \npackage http.codec; // Auto-configuration for HTTP codecs.\n\nClasses and Interfaces: \npublic class HttpMessageConverters extends Object implements Iterable<org.springframework.http.converter.HttpMessageConverter<?>>; // Bean used to manage the HttpMessageConverters used in a Spring Boot application.\n@AutoConfiguration(after={GsonAutoConfiguration.class,JacksonAutoConfiguration.class,JsonbAutoConfiguration.class}) @ConditionalOnClass(org.springframework.http.converter.HttpMessageConverter.class) @Conditional(org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition.class) @Import({org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration.class,org.springframework.boot.autoconfigure.http.GsonHttpMessageConvertersConfiguration.class,org.springframework.boot.autoconfigure.http.JsonbHttpMessageConvertersConfiguration.class}) @ImportRuntimeHints(org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration.HttpMessageConvertersAutoConfigurationRuntimeHints.class) public class HttpMessageConvertersAutoConfiguration extends Object; // Auto-configuration for HttpMessageConverters.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.http.converter.StringHttpMessageConverter.class) protected static class HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration extends Object;\n", "des": "Auto-configuration for HTTP concerns."}
{"index": 3022, "repo": "spring-web-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class ConfigurableWebBindingInitializer extends Object implements WebBindingInitializer; // Convenient WebBindingInitializer for declarative configuration in a Spring application context.\npublic class DefaultDataBinderFactory extends Object implements WebDataBinderFactory; // Create a WebRequestDataBinder instance and initialize it with a WebBindingInitializer.\npublic class DefaultSessionAttributeStore extends Object implements SessionAttributeStore; // Default implementation of the SessionAttributeStore interface, storing the attributes in the WebRequest session (i.e.\npublic interface SessionAttributeStore; // Strategy interface for storing model attributes in a backend session.\npublic interface SessionStatus; // Simple interface that can be injected into handler methods, allowing them to signal that their session processing is complete.\npublic class SimpleSessionStatus extends Object implements SessionStatus; // Simple implementation of the SessionStatus interface, keeping the complete flag as an instance variable.\npublic class SpringWebConstraintValidatorFactory extends Object implements ConstraintValidatorFactory; // JSR-303 ConstraintValidatorFactory implementation that delegates to the current Spring WebApplicationContext for creating autowired ConstraintValidator instances.\n@FunctionalInterface public interface WebArgumentResolver; // SPI for resolving custom arguments for a specific handler method parameter.\npublic interface WebBindingInitializer; // Callback interface for initializing a WebDataBinder for performing data binding in the context of a specific web request.\npublic interface WebDataBinderFactory; // A factory for creating a WebDataBinder instance for a named target object.\npublic class WebExchangeBindException extends ServerWebInputException implements org.springframework.validation.BindingResult; // ServerWebInputException subclass that indicates a data binding or validation failure.\npublic class WebExchangeDataBinder extends WebDataBinder; // Specialized DataBinder to perform data binding from URL query parameters or form data in the request data to Java objects.\npublic class WebRequestDataBinder extends WebDataBinder; // Special DataBinder to perform data binding from web request parameters to JavaBeans, including support for multipart files.\n", "des": "Support classes for web data binding."}
{"index": 772, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: el\n\nClasses and Interfaces: \nClass GreekAnalyzer; // Analyzer for the Greek language.\nClass GreekLowerCaseFilter; // Normalizes token text to lower case, removes some Greek diacritics, and standardizes final sigma to sigma.\nClass GreekLowerCaseFilterFactory; // Factory for GreekLowerCaseFilter.\nClass GreekStemFilter; // A TokenFilter that applies GreekStemmer to stem Greek words.\nClass GreekStemFilterFactory; // Factory for GreekStemFilter.\nClass GreekStemmer; // A stemmer for Greek words, according to: Development of a Stemmer for the Greek Language. Georgios Ntais\n", "des": "Analyzer for Greek."}
{"index": 1056, "repo": "commons-rdf-api-0.5.0", "code": "Package: experimental\n\nClasses and Interfaces: \nInterface RDFParser; // Parse an RDF source into a target (e.g.\nInterface RDFParser.ParseResult; // The result of RDFParser.parse() indicating parsing completed.\n", "des": "Experimental Commons RDF features."}
{"index": 877, "repo": "calcite-core-1.34.0", "code": "Package: trace\n\nClasses and Interfaces: \nClass CalciteLogger; // Small extension to Logger with some performance improvements.\nClass CalciteTimingTracer; // CalciteTimingTracer provides a mechanism for tracing the timing of a call sequence at nanosecond resolution.\nClass CalciteTrace; // Contains all of the tracers used within org.apache.calcite class libraries.\n", "des": "Tracing services."}
{"index": 3886, "repo": "solr-solrj-9.3.0", "code": "Package: impl\n\nClasses and Interfaces: \nInterface ClusterStateProvider; // Provides cluster state from some source\nInterface HttpClientBuilderFactory; // Factory interface for configuring SolrHttpClientBuilder.\nInterface HttpListenerFactory;\nInterface SolrHttpClientBuilder.AuthSchemeRegistryProvider;\nInterface SolrHttpClientBuilder.CookieSpecRegistryProvider;\nInterface SolrHttpClientBuilder.CredentialsProviderProvider;\nClass AuthenticationStoreHolder;\nClass BaseHttpClusterStateProvider;\nClass BaseHttpSolrClient;\nClass BinaryRequestWriter; // A RequestWriter which writes requests in the javabin format\nClass BinaryRequestWriter.BAOS;\nClass BinaryResponseParser;\nClass CloudHttp2SolrClient; // SolrJ client class to communicate with SolrCloud using Http2SolrClient.\nClass CloudHttp2SolrClient.Builder; // Constructs CloudHttp2SolrClient instances from provided configuration.\nClass CloudLegacySolrClient;\nClass CloudLegacySolrClient.Builder; // Constructs CloudLegacySolrClient instances from provided configuration.\nClass CloudSolrClient;\nClass CloudSolrClient.Builder; // Constructs CloudSolrClient instances from provided configuration.\nClass CloudSolrClient.RouteResponse<T extends LBSolrClient.Req>;\nClass ConcurrentUpdateHttp2SolrClient;\nClass ConcurrentUpdateHttp2SolrClient.Builder; // Constructs ConcurrentUpdateHttp2SolrClient instances from provided configuration.\nClass ConcurrentUpdateSolrClient;\nClass ConcurrentUpdateSolrClient.Builder; // Constructs ConcurrentUpdateSolrClient instances from provided configuration.\nClass DelegationTokenHttpSolrClient;\nClass Http2ClusterStateProvider;\nClass Http2SolrClient; // Difference between this Http2SolrClient and HttpSolrClient: Http2SolrClient sends requests in HTTP/2 Http2SolrClient can point to multiple urls Http2SolrClient does not expose its internal httpClient like HttpSolrClient.getHttpClient(), sharing connection pools should be done by Http2SolrClient.Builder.withHttpClient(Http2SolrClient)\nClass Http2SolrClient.Builder;\nClass Http2SolrClient.OutStream;\nClass HttpClientUtil;\nClass HttpClientUtil.GzipDecompressingEntity;\nClass HttpClientUtil.SocketFactoryRegistryProvider;\nClass HttpClusterStateProvider;\nClass HttpListenerFactory.RequestResponseListener;\nClass HttpSolrClient;\nClass HttpSolrClient.Builder;\nClass HttpSolrClient.HttpUriRequestResponse;\n", "des": "Concrete implementations of client API classes."}
{"index": 2235, "repo": "spring-data-commons-3.1.2", "code": "Package: querydsl\n\nClasses and Interfaces: \npublic class QuerydslPredicateArgumentResolver extends QuerydslPredicateArgumentResolverSupport implements HandlerMethodArgumentResolver; // HandlerMethodArgumentResolver to allow injection of Predicate into Spring MVC controller methods.\npublic abstract class QuerydslPredicateArgumentResolverSupport extends Object; // HandlerMethodArgumentResolver to allow injection of Predicate into Spring MVC controller methods.\npublic class ReactiveQuerydslPredicateArgumentResolver extends QuerydslPredicateArgumentResolverSupport implements SyncHandlerMethodArgumentResolver; // HandlerMethodArgumentResolver to allow injection of Predicate into Spring WebFlux controller methods.\n", "des": "Querydsl-specific web support."}
{"index": 3846, "repo": "lucene-core-9.7.0", "code": "Package: index\n\nClasses and Interfaces: \nInterface ImpactsSource; // Source of Impacts.\nInterface IndexableField; // Represents a single field for indexing.\nInterface IndexableFieldType; // Describes the properties of a field.\nInterface IndexReader.CacheHelper; // A utility class that gives hooks in order to help build a cache based on the data that is contained in this index.\nInterface IndexReader.ClosedListener; // A listener that is called when a resource gets closed.\nInterface IndexSorter; // Handles how documents should be sorted in an index, both within a segment and between segments.\nInterface IndexSorter.ComparableProvider; // Used for sorting documents across segments\nInterface IndexSorter.DocComparator; // A comparator of doc IDs, used for sorting documents within a segment\nInterface IndexSorter.NumericDocValuesProvider; // Provide a NumericDocValues instance for a LeafReader\nInterface IndexSorter.SortedDocValuesProvider; // Provide a SortedDocValues instance for a LeafReader\nInterface IndexWriter.IndexReaderWarmer; // If DirectoryReader.open(IndexWriter) has been called (ie, this writer is in near real-time mode), then after a merge completes, this class can be invoked to warm the reader on the newly merged segment, before the merge commits.\nInterface IndexWriterEventListener; // A callback event listener for recording key events happened inside IndexWriter\nInterface MergePolicy.MergeContext; // This interface represents the current context of the merge selection process.\nInterface MergeScheduler.MergeSource; // Provides access to new merges and executes the actual merge\nInterface PointValues.IntersectVisitor; // We recurse the PointValues.PointTree, using a provided instance of this to guide the recursion.\nInterface PointValues.PointTree; // Basic operations to read the KD-tree.\nInterface QueryTimeout; // Query timeout abstraction that controls whether a query should continue or be stopped.\nInterface TwoPhaseCommit; // An interface for implementations that support 2-phase commit.\nClass AutomatonTermsEnum; // A FilteredTermsEnum that enumerates terms based upon what is accepted by a DFA.\nClass BaseCompositeReader<R extends IndexReader>; // Base class for implementing CompositeReaders based on an array of sub-readers.\n", "des": "Code to maintain and access indices."}
{"index": 359, "repo": "hive-exec-4.0.0-alpha-2", "code": "Package: generic\n\nClasses and Interfaces: \nInterface Collector; // Collector gets data from a source.\nInterface GenericUDAFEvaluator.AggregationBuffer; // use GenericUDAFEvaluator.AbstractAggregationBuffer instead\nInterface GenericUDAFParameterInfo; // A callback interface used in conjunction with GenericUDAFResolver2 interface that allows for a more extensible and flexible means of discovering the parameter types provided for UDAF invocation.\nInterface GenericUDAFPercentileCont.PercentileCalculator<U>;\nInterface GenericUDAFResolver; // Use GenericUDAFResolver2 instead.\nInterface GenericUDAFResolver2;\nInterface GenericUDF.DeferredObject; // A Deferred Object allows us to do lazy-evaluation and short-circuiting.\nInterface GenericUDFBridge.UdfWhitelistChecker;\nInterface ISupportStreamingModeForWindowing; // A GenericUDAF mode that provides it results as a List to the WindowingTableFunction (so it is a WindowFunctionInfo.isPivotResult() return true) may support this interface.\nClass AbstractGenericUDAFResolver;\nClass AbstractGenericUDFReflect; // common class for reflective UDFs\nClass BaseMaskUDF;\nClass GenericUDAFApproximateDistinct;\nClass GenericUDAFApproximateDistinct.CountApproximateDistinctEvaluator;\nClass GenericUDAFApproximateDistinct.HyperLogLogEvaluator;\nClass GenericUDAFAverage; // GenericUDAFAverage.\nClass GenericUDAFAverage.AbstractGenericUDAFAverageEvaluator<TYPE>;\nClass GenericUDAFAverage.GenericUDAFAverageEvaluatorDecimal;\nClass GenericUDAFAverage.GenericUDAFAverageEvaluatorDouble;\nClass GenericUDAFBinarySetFunctions;\nClass GenericUDAFBinarySetFunctions.RegrAvgX;\nClass GenericUDAFBinarySetFunctions.RegrAvgY;\nClass GenericUDAFBinarySetFunctions.RegrCount;\nClass GenericUDAFBinarySetFunctions.RegrIntercept;\nClass GenericUDAFBinarySetFunctions.RegrR2;\nClass GenericUDAFBinarySetFunctions.RegrSlope;\nClass GenericUDAFBinarySetFunctions.RegrSXX;\nClass GenericUDAFBinarySetFunctions.RegrSXY;\nClass GenericUDAFBinarySetFunctions.RegrSYY;\nClass GenericUDAFBloomFilter; // Generic UDF to generate Bloom Filter\n", "des": "Standard toolkit and framework for generic User-defined functions."}
{"index": 387, "repo": "commons-dbcp2-2.9.0", "code": "Package: cpdsadapter\n\nClasses and Interfaces: \nClass DriverAdapterCPDS; // An adapter for JDBC drivers that do not include an implementation of ConnectionPoolDataSource, but still include a DriverManager implementation.\nClass PStmtKeyCPDS; // Use PStmtKey.\n", "des": "This package contains one public class which is a ConnectionPoolDataSource (CPDS) implementation that can be used to adapt older Driver based JDBC implementations."}
{"index": 1992, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: embedded\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnNotWarDeployment @ConditionalOnWebApplication @EnableConfigurationProperties(ServerProperties.class) public class EmbeddedWebServerFactoryCustomizerAutoConfiguration extends Object; // Auto-configuration for embedded servlet and reactive web servers customizations.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass({org.eclipse.jetty.server.Server.class,org.eclipse.jetty.util.Loader.class,org.eclipse.jetty.webapp.WebAppContext.class}) public static class EmbeddedWebServerFactoryCustomizerAutoConfiguration.JettyWebServerFactoryCustomizerConfiguration extends Object; // Nested configuration if Jetty is being used.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(reactor.netty.http.server.HttpServer.class) public static class EmbeddedWebServerFactoryCustomizerAutoConfiguration.NettyWebServerFactoryCustomizerConfiguration extends Object; // Nested configuration if Netty is being used.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass({org.apache.catalina.startup.Tomcat.class,org.apache.coyote.UpgradeProtocol.class}) public static class EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration extends Object; // Nested configuration if Tomcat is being used.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass({io.undertow.Undertow.class,org.xnio.SslClientAuthMode.class}) public static class EmbeddedWebServerFactoryCustomizerAutoConfiguration.UndertowWebServerFactoryCustomizerConfiguration extends Object; // Nested configuration if Undertow is being used.\npublic class JettyWebServerFactoryCustomizer extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.jetty.ConfigurableJettyWebServerFactory>, org.springframework.core.Ordered; // Customization for Jetty-specific features common for both Servlet and Reactive servers.\n", "des": "Configuration for embedded reactive and servlet web servers."}
{"index": 3286, "repo": "opencms-core-15.0", "code": "Package: daterestrictions\n\nClasses and Interfaces: \nInterface I_CmsDateRestriction; // Interface for date restrictions used in list configurations.\nClass CmsDateFromTodayRestriction; // Date restrictions for a fixed number of time units going backward or forward from the current time.\nClass CmsDatePastFutureRestriction; // A restriction which selects either all entries in the past (from the current time) or all entries in the future.\nClass CmsDateRangeRestriction; // Restriction to a date between a fixed start and end date, but only one of them has to be given.\nClass CmsDateRestrictionParser; // Parses date restrictions in a list configuration.\nEnum I_CmsDateRestriction.TimeDirection; // Enum representing a direction in time (past / future).\nEnum I_CmsDateRestriction.TimeUnit; // Enum representing a time unit.\n", "des": "Contains classes for dealing with restrictions in list configurations."}
{"index": 2905, "repo": "spring-aspects-6.0.11", "code": "Package: aspectj\n\nClasses and Interfaces: \n@Configuration(proxyBeanMethods=false) @Role(2) public class AspectJAsyncConfiguration extends org.springframework.scheduling.annotation.AbstractAsyncConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based asynchronous method execution.\n", "des": "AspectJ-based scheduling support."}
{"index": 487, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: io\n\nSub Packages: \npackage io.payloads; // Provides abstractions for schema-aware IOs.\n\nClasses and Interfaces: \nInterface GenericDlqProvider; // A Provider for generic DLQ transforms that handle deserialization failures.\nInterface Providers.Identifyable;\nInterface SchemaIO; // An abstraction to create schema capable and aware IOs.\nInterface SchemaIOProvider; // Provider to create SchemaIO instances for use in Beam SQL and other SDKs.\nClass DeadLetteredTransform<InputT,OutputT>;\nClass Failure; // A generic failure of an SQL transform.\nClass Failure.Builder;\nClass GenericDlq; // Helper to generate a DLQ transform to write PCollection to an external system.\nClass Providers; // Helpers for implementing the \"Provider\" pattern.\nClass InvalidConfigurationException; // Exception thrown when the configuration for a SchemaIO is invalid.\nClass InvalidLocationException; // Exception thrown when the configuration for a SchemaIO is invalid.\nClass InvalidSchemaException; // Exception thrown when the schema for a SchemaIO is invalid.\n", "des": "Provides abstractions for schema-aware IOs."}
{"index": 2733, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: builder\n\nClasses and Interfaces: \npublic class SimpleMailMessageItemWriterBuilder extends Object; // Creates a fully qualified SimpleMailMessageItemWriter.\n", "des": "Builders for JavaMail related components."}
{"index": 2529, "repo": "spring-security-core-6.1.2", "code": "Package: event\n\nClasses and Interfaces: \npublic abstract class JaasAuthenticationEvent extends org.springframework.context.ApplicationEvent; // Parent class for events fired by the JaasAuthenticationProvider.\npublic class JaasAuthenticationFailedEvent extends JaasAuthenticationEvent; // Fired when LoginContext.login throws a LoginException, or if any other exception is thrown during that time.\npublic class JaasAuthenticationSuccessEvent extends JaasAuthenticationEvent; // Fired by the JaasAuthenticationProvider after successfully logging the user into the LoginContext, handling all callbacks, and calling all AuthorityGranters.\n", "des": "JAAS authentication events which can be published to the Spring application context by the JAAS authentication provider."}
{"index": 2256, "repo": "spring-vault-core-3.0.4", "code": "Package: annotation\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Documented @Repeatable(VaultPropertySources.class) @Import(org.springframework.vault.annotation.VaultPropertySourceRegistrar.class) public @interface VaultPropertySource; // Annotation providing a convenient and declarative mechanism for adding a VaultPropertySource to Spring's Environment.\npublic static enum VaultPropertySource.Renewal extends Enum<VaultPropertySource.Renewal>;\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(org.springframework.vault.annotation.VaultPropertySourceRegistrar.class) public @interface VaultPropertySources; // Container annotation that aggregates several VaultPropertySource annotations.\n", "des": "Annotation support for the Spring Vault."}
{"index": 2571, "repo": "pulsar-common-3.0.0", "code": "Package: netty\n\nClasses and Interfaces: \npublic class ChannelFutures extends Object; // Static utility methods for operating on ChannelFutures.\npublic class DnsResolverUtil extends Object;\npublic class EventLoopUtil extends Object;\npublic final class NettyChannelUtil extends Object; // Contains utility methods for working with Netty Channels.\npublic class NettyFutureUtil extends Object; // Contains utility methods for working with Netty Futures.\n", "des": "Helpers to work with events from the non-blocking I/O client-server framework."}
{"index": 1589, "repo": "spring-websocket-6.0.11", "code": "Package: client\n\nSub Packages: \npackage client.jetty; // Client-side support for the Jetty WebSocket API.\npackage client.standard; // Client-side classes for use with standard Jakarta WebSocket endpoints.\n\nClasses and Interfaces: \npublic abstract class AbstractWebSocketClient extends Object implements WebSocketClient; // Abstract base class for WebSocketClient implementations.\npublic abstract class ConnectionManagerSupport extends Object implements org.springframework.context.SmartLifecycle; // Base class for a connection manager that automates the process of connecting to a WebSocket server with the Spring ApplicationContext lifecycle.\npublic interface WebSocketClient; // Contract for initiating a WebSocket request.\npublic class WebSocketConnectionManager extends ConnectionManagerSupport; // WebSocket connection manager that connects to the server via WebSocketClient and handles the session with a WebSocketHandler.\n", "des": "Client-side abstractions for WebSocket applications."}
{"index": 496, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: transforms\n\nSub Packages: \npackage transforms.display; // Defines HasDisplayData for annotating components which provide display data used within UIs and diagnostic tools.\npackage transforms.join; // Defines the CoGroupByKey transform for joining multiple PCollections.\npackage transforms.reflect; // For internal use only; no backwards-compatibility guarantees.\npackage transforms.resourcehints; // Defines ResourceHints for configuring pipeline execution.\npackage transforms.splittabledofn; // Defines utilities related to splittable DoFn.\npackage transforms.windowing; // Defines the Window transform for dividing the elements in a PCollection into windows, and the Trigger for controlling when those elements are output.\n\nClasses and Interfaces: \nInterface Combine.AccumulatingCombineFn.Accumulator<InputT,AccumT,OutputT>; // The type of mutable accumulator values used by this AccumulatingCombineFn.\nInterface CombineFnBase.GlobalCombineFn<InputT,AccumT,OutputT>; // For internal use only; no backwards-compatibility guarantees.\nInterface CombineWithContext.RequiresContextInternal; // An internal interface for signaling that a GloballyCombineFn or a PerKeyCombineFn needs to access CombineWithContext.Context.\nInterface Contextful.Fn<InputT,OutputT>; // A function from an input to an output that may additionally access Contextful.Fn.Context when computing the result.\nInterface DoFn.BundleFinalizer; // A parameter that is accessible during @StartBundle, @ProcessElement and @FinishBundle that allows the caller to register a callback that will be invoked after the bundle has been successfully completed and the runner has commit the output.\nInterface DoFn.BundleFinalizer.Callback; // An instance of a function that will be invoked after bundle finalization.\nInterface DoFn.MultiOutputReceiver; // Receives tagged output for a multi-output function.\nInterface DoFn.OutputReceiver<T>; // Receives values of the given type.\nInterface ExternalTransformBuilder<ConfigT,InputT extends PInput,OutputT extends POutput>; // An interface for building a transform from an externally provided configuration.\nInterface Materialization<T>; // For internal use only; no backwards-compatibility guarantees.\n", "des": "Defines PTransforms for transforming data in a pipeline."}
{"index": 1741, "repo": "spring-batch-integration-5.0.2", "code": "Package: annotation\n\nClasses and Interfaces: \n@Configuration(proxyBeanMethods=false) public class BatchIntegrationConfiguration extends Object implements org.springframework.beans.factory.InitializingBean; // Base configuration class for Spring Batch Integration factory beans.\n@Target(TYPE) @Retention(RUNTIME) @Documented @EnableIntegration @Import(BatchIntegrationConfiguration.class) public @interface EnableBatchIntegration; // Enable Spring Batch Integration features and provide a base configuration for setting up remote chunking or partitioning infrastructure beans.\n", "des": "APIs for the configuration of Spring Integration components through annotations."}
{"index": 1342, "repo": "groovy-all-4.0.13", "code": "Package: tools\n\nSub Packages: \npackage tools.groovydoc; // GroovyDoc tool.\npackage tools.javac; // Classes related to the joint compiler.\n\nClasses and Interfaces: \npublic class Compiler extends Object; // A convenience front end for getting standard compilations done.\npublic class DgmConverter extends Object;\npublic class ErrorReporter extends Object; // Provides services for reporting compilation errors to the user.\npublic class FileSystemCompiler extends Object; // Command-line compiler (aka.\npublic static class FileSystemCompiler.CompilationOptions extends Object;\npublic static class FileSystemCompiler.VersionProvider extends Object implements picocli.CommandLine.IVersionProvider;\npublic class GrapeUtil extends Object;\npublic class GroovyClass extends Object;\npublic class GroovyStarter extends Object; // Helper class to initialize the Groovy runtime.\npublic class LoaderConfiguration extends Object; // Class used to configure a RootLoader from a stream or by using its methods.\npublic class RootLoader extends URLClassLoader; // This ClassLoader should be used as root of class loaders.\npublic class StringHelper extends Object;\npublic abstract class Utilities extends Object; // Various utility functions for use in the compiler.\n", "des": "Compiler entry points and miscellaneous development tools."}
{"index": 3081, "repo": "spring-ws-core-4.0.5", "code": "Package: saaj\n\nSub Packages: \npackage saaj.support; // Support classes for working with the SOAP with Attachments API for Java (SAAJ).\n\nClasses and Interfaces: \npublic class SaajAttachmentException extends AttachmentException;\npublic class SaajSoapBodyException extends SoapBodyException;\npublic class SaajSoapElementException extends SoapElementException;\npublic class SaajSoapEnvelopeException extends SoapEnvelopeException;\npublic class SaajSoapFaultException extends SoapFaultException;\npublic class SaajSoapHeaderException extends SoapHeaderException;\npublic class SaajSoapMessage extends AbstractSoapMessage; // SAAJ-specific implementation of the SoapMessage interface.\npublic class SaajSoapMessageCreationException extends SoapMessageCreationException;\npublic class SaajSoapMessageException extends SoapMessageException;\npublic class SaajSoapMessageFactory extends Object implements SoapMessageFactory, org.springframework.beans.factory.InitializingBean; // SAAJ-specific implementation of the WebServiceMessageFactory.\n", "des": "SOAP with Attachments API for Java (SAAJ) support for Spring-WS soap message infrastructure."}
{"index": 1848, "repo": "spring-test-6.0.11", "code": "Package: testng\n\nClasses and Interfaces: \npublic abstract class AbstractTestNGSpringContextTests extends Object implements org.testng.IHookable, org.springframework.context.ApplicationContextAware; // Abstract base test class which integrates the Spring TestContext Framework with explicit ApplicationContext testing support in a TestNG environment.\n@Transactional public abstract class AbstractTransactionalTestNGSpringContextTests extends AbstractTestNGSpringContextTests; // Abstract transactional extension of AbstractTestNGSpringContextTests which adds convenience functionality for JDBC access.\n", "des": "Support classes for integrating the Spring TestContext Framework with TestNG."}
{"index": 2725, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: builder\n\nClasses and Interfaces: \npublic class JmsItemReaderBuilder<T> extends Object; // Creates a fully qualified JmsItemReader.\npublic class JmsItemWriterBuilder<T> extends Object; // Creates a fully qualified JmsItemWriter.\n", "des": "Builders for JMS item reader and writer."}
{"index": 2254, "repo": "spring-batch-test-5.0.2", "code": "Package: context\n\nClasses and Interfaces: \npublic class BatchTestContextBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor; // BeanPostProcessor implementation that injects a job bean into JobLauncherTestUtils if there is a unique job bean.\npublic class BatchTestContextCustomizer extends Object implements org.springframework.test.context.ContextCustomizer; // ContextCustomizer implementation that adds batch test utility classes (JobLauncherTestUtils and JobRepositoryTestUtils) as beans in the test context.\npublic class BatchTestContextCustomizerFactory extends Object implements org.springframework.test.context.ContextCustomizerFactory; // Factory for BatchTestContextCustomizer.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @TestExecutionListeners(listeners={StepScopeTestExecutionListener.class,JobScopeTestExecutionListener.class}, mergeMode=MERGE_WITH_DEFAULTS) @ExtendWith(org.springframework.test.context.junit.jupiter.SpringExtension.class) public @interface SpringBatchTest; // Annotation that can be specified on a test class that runs Spring Batch based tests.\n", "des": "APIs for the configuration of Spring Batch test support."}
{"index": 807, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: sr\n\nClasses and Interfaces: \nClass SerbianNormalizationFilter; // Normalizes Serbian Cyrillic and Latin characters to \"bald\" Latin.\nClass SerbianNormalizationFilterFactory; // Factory for SerbianNormalizationFilter.\nClass SerbianNormalizationRegularFilter; // Normalizes Serbian Cyrillic to Latin.\n", "des": "Analyzer for Serbian."}
{"index": 2715, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: builder\n\nClasses and Interfaces: \n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateCursorItemReaderBuilder<T> extends Object;\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateItemWriterBuilder<T> extends Object;\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernatePagingItemReaderBuilder<T> extends Object;\npublic class JdbcBatchItemWriterBuilder<T> extends Object; // A builder implementation for the JdbcBatchItemWriter.\npublic class JdbcCursorItemReaderBuilder<T> extends Object; // Builder for the JdbcCursorItemReader\npublic class JdbcPagingItemReaderBuilder<T> extends Object; // This is a builder for the JdbcPagingItemReader.\npublic class JpaCursorItemReaderBuilder<T> extends Object; // Builder for JpaCursorItemReader.\npublic class JpaItemWriterBuilder<T> extends Object; // A builder for the JpaItemWriter.\npublic class JpaPagingItemReaderBuilder<T> extends Object; // Creates a fully qualified JpaPagingItemReader.\npublic class StoredProcedureItemReaderBuilder<T> extends Object; // A fluent builder API for the configuration of a StoredProcedureItemReader.\n", "des": "Builders for database item readers and writers."}
{"index": 3744, "repo": "lucene-queryparser-9.7.0", "code": "Package: intervalfn\n\nClasses and Interfaces: \nClass After; // Node that represents Intervals.after(IntervalsSource, IntervalsSource).\nClass AnalyzedText; // Node that represents Intervals.analyzedText(String, Analyzer, String, int, boolean).\nClass AtLeast; // Node that represents Intervals.atLeast(int, IntervalsSource...).\nClass Before; // Node that represents Intervals.before(IntervalsSource, IntervalsSource).\nClass ContainedBy; // Node that represents Intervals.containedBy(IntervalsSource, IntervalsSource).\nClass Containing; // Node that represents Intervals.containing(IntervalsSource, IntervalsSource).\nClass Extend; // Node that represents Intervals.extend(IntervalsSource, int, int).\nClass FuzzyTerm; // An interval function equivalent to FuzzyQuery.\nClass IntervalFunction; // Representation of an interval function that can be converted to IntervalsSource.\nClass MaxGaps; // Node that represents Intervals.maxgaps(int, IntervalsSource).\nClass MaxWidth; // Node that represents Intervals.maxwidth(int, IntervalsSource).\nClass NonOverlapping; // Node that represents Intervals.nonOverlapping(IntervalsSource, IntervalsSource) .\nClass NotContainedBy; // Node that represents Intervals.notContainedBy(IntervalsSource, IntervalsSource).\nClass NotContaining; // Node that represents Intervals.notContaining(IntervalsSource, IntervalsSource).\nClass NotWithin; // Node that represents Intervals.notWithin(IntervalsSource, int, IntervalsSource).\nClass Or; // Node that represents Intervals.or(IntervalsSource...).\nClass Ordered; // Node that represents Intervals.ordered(IntervalsSource...).\nClass Overlapping; // Node that represents Intervals.overlapping(IntervalsSource, IntervalsSource).\nClass Phrase; // Node that represents Intervals.phrase(String...).\nClass Unordered; // Node that represents Intervals.unordered(IntervalsSource...).\nClass UnorderedNoOverlaps; // Node that represents Intervals.unorderedNoOverlaps(IntervalsSource, IntervalsSource).\nClass Wildcard; // Node that represents Intervals.wildcard(BytesRef).\nClass Within; // Node that represents Intervals.within(IntervalsSource, int, IntervalsSource).\n", "des": "This package contains classes that implement interval function support for the standard syntax parser."}
{"index": 3476, "repo": "hilt-android-2.47", "code": "Package: lifecycle\n\nClasses and Interfaces: \nInterface RetainedLifecycle; // A class for registered listeners on a retained lifecycle (generally backed up by a ViewModel).\nInterface RetainedLifecycle.OnClearedListener; // Listener for when the retained lifecycle is cleared.\nAnnotation Type HiltViewModel; // Identifies a ViewModel for construction injection.\n", "des": "This package contains Hilt APIs for Android applications."}
{"index": 1213, "repo": "commons-math3-3.6.1", "code": "Package: ranking\n\nClasses and Interfaces: \nInterface RankingAlgorithm; // Interface representing a rank transformation.\nClass NaturalRanking; // Ranking based on the natural ordering on doubles.\nEnum NaNStrategy; // Strategies for handling NaN values in rank transformations.\nEnum TiesStrategy; // Strategies for handling tied values in rank transformations.\n", "des": "Classes providing rank transformations."}
{"index": 3879, "repo": "solr-ltr-9.3.0", "code": "Package: search\n\nClasses and Interfaces: \nClass LTRQParserPlugin; // Plug into solr a rerank model.\nClass LTRQuery; // A learning to rank Query, will incapsulate a learning to rank model, and delegate to it the rescoring of the documents.\n", "des": "APIs and classes for parsing and processing search requests"}
{"index": 2388, "repo": "spring-batch-core-5.0.2", "code": "Package: job\n\nSub Packages: \npackage job.builder; // Job and flow level builders for java based configuration of batch jobs\npackage job.flow; // Flow related constructs including Flow interface, executors, and related exceptions\n\nClasses and Interfaces: \npublic abstract class AbstractJob extends Object implements Job, StepLocator, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // Abstract implementation of the Job interface.\npublic class CompositeJobParametersValidator extends Object implements JobParametersValidator, org.springframework.beans.factory.InitializingBean; // Composite JobParametersValidator that passes the job parameters through a sequence of injected JobParametersValidators\npublic class DefaultJobParametersValidator extends Object implements JobParametersValidator, org.springframework.beans.factory.InitializingBean; // Default implementation of JobParametersValidator.\npublic class SimpleJob extends AbstractJob; // Simple implementation of Job interface providing the ability to run a JobExecution.\npublic class SimpleStepHandler extends Object implements StepHandler, org.springframework.beans.factory.InitializingBean; // Implementation of StepHandler that manages repository and restart concerns.\npublic interface StepHandler; // Strategy interface for handling a Step on behalf of a Job.\n", "des": "Specific implementations of job concerns."}
{"index": 2752, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: transaction\n\nClasses and Interfaces: \npublic class FlushFailedException extends RuntimeException; // Unchecked exception indicating that an error has occurred while trying to flush a buffer.\npublic class ResourcelessTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager;\npublic class TransactionAwareBufferedWriter extends Writer; // Wrapper for a FileChannel that delays actually writing to or closing the buffer if a transaction is active.\npublic class TransactionAwareProxyFactory<T> extends Object; // Factory for transaction aware objects (like lists, sets, maps).\n", "des": "Infrastructure implementations of support transaction concerns."}
{"index": 242, "repo": "nutch-2.4", "code": "Package: api\n\nClasses and Interfaces: \nClass RegexRule; // A generic regular expression rule.\nClass RegexURLFilterBase; // Generic URL filter based on regular expressions.\n", "des": "Generic URL filter library, abstracting away from regular expression implementations."}
{"index": 2666, "repo": "spring-data-cassandra-4.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class CassandraRepositoryFactory extends RepositoryFactorySupport; // Factory to create CassandraRepository instances.\npublic class CassandraRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends RepositoryFactoryBeanSupport<T,S,ID>; // FactoryBean to create CassandraRepository instances.\npublic class MappingCassandraEntityInformation<T,ID> extends PersistentEntityInformation<T,ID> implements CassandraEntityInformation<T,ID>; // CassandraEntityInformation implementation using a CassandraPersistentEntity instance to lookup the necessary information.\npublic class ReactiveCassandraRepositoryFactory extends ReactiveRepositoryFactorySupport; // Factory to create ReactiveCassandraRepository instances.\npublic class ReactiveCassandraRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends RepositoryFactoryBeanSupport<T,S,ID>; // FactoryBean to create ReactiveCassandraRepository instances.\npublic class SimpleCassandraRepository<T,ID> extends Object implements CassandraRepository<T,ID>; // Repository base implementation for Cassandra.\npublic class SimpleReactiveCassandraRepository<T,ID> extends Object implements ReactiveCassandraRepository<T,ID>; // Reactive repository base implementation for Cassandra.\n", "des": "Support infrastructure for query derivation of Apache Cassandra specific repositories."}
{"index": 2282, "repo": "spring-data-elasticsearch-5.1.2", "code": "Package: routing\n\nClasses and Interfaces: \npublic class DefaultRoutingResolver extends Object implements RoutingResolver; // Default implementation of the RoutingResolver interface.\npublic interface RoutingResolver;\n", "des": "classes/interfaces for specification and implementation of Elasticsearch routing."}
{"index": 2412, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: audit\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnBean(org.springframework.boot.actuate.audit.AuditEventRepository.class) @ConditionalOnProperty(prefix=\"management.auditevents\", name=\"enabled\", matchIfMissing=true) public class AuditAutoConfiguration extends Object; // Auto-configuration for AuditEvents.\n@AutoConfiguration(after=AuditAutoConfiguration.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.audit.AuditEventsEndpoint.class) public class AuditEventsEndpointAutoConfiguration extends Object; // Auto-configuration for the AuditEventsEndpoint.\n", "des": "Auto-configuration for actuator audit concerns."}
{"index": 1014, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: validation\n\nClasses and Interfaces: \nInterface ValidationErrorHandler; // Subinterface of ErrorHandler that allows the registered errors to be retrieved.\nInterface XmlValidator; // Simple processor that validates a given Source.\nClass SchemaFactoryUtils;\nClass SchemaLoaderUtils; // Convenient utility methods for loading of Schema objects, performing standard handling of input streams.\nClass XMLReaderFactoryUtils;\nClass XmlValidatorFactory; // Factory for XmlValidator objects, being aware of JAXP 1.3 Validators, and JAXP 1.0 parsing capabilities.\nClass XmlValidationException; // Exception thrown when a validation error occurs\n", "des": "Provides classes for XML validation in JAXP 1.0 and JAXP 1.3."}
{"index": 3122, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: lock\n\nClasses and Interfaces: \nInterface LockingStrategy; // A strategy abstraction for how locks are obtained in the underlying database.\nClass AbstractSelectLockingStrategy; // Base LockingStrategy implementation to support implementations based on issuing SQL SELECT statements\nClass OptimisticForceIncrementLockingStrategy; // An optimistic locking strategy that forces an increment of the version (after verifying that version hasn't changed).\nClass OptimisticLockingStrategy; // An optimistic locking strategy that verifies that the version hasn't changed (prior to transaction commit).\nClass PessimisticForceIncrementLockingStrategy; // A pessimistic locking strategy that increments the version immediately (obtaining an exclusive write lock).\nClass PessimisticReadSelectLockingStrategy; // A pessimistic locking strategy where the locks are obtained through select statements.\nClass PessimisticReadUpdateLockingStrategy; // A pessimistic locking strategy where the locks are obtained through update statements.\nClass PessimisticWriteSelectLockingStrategy; // A pessimistic locking strategy where the locks are obtained through select statements.\nClass PessimisticWriteUpdateLockingStrategy; // A pessimistic locking strategy where the locks are obtained through update statements.\nClass SelectLockingStrategy; // A locking strategy where the locks are obtained through select statements.\nClass UpdateLockingStrategy; // A locking strategy where the locks are obtained through update statements.\nClass LockingStrategyException; // Represents an error trying to apply a LockingStrategy to an entity\nClass OptimisticEntityLockException; // Represents an error trying to apply an optimistic LockingStrategy to an entity\nClass PessimisticEntityLockException; // Represents an error trying to apply a pessimistic LockingStrategy to an entity\n", "des": "Support for Dialect-specific locking strategies"}
{"index": 1028, "repo": "hadoop-aws-3.3.6", "code": "Package: commit\n\nSub Packages: \npackage commit.files; // Persistent data formats for the committers.\npackage commit.impl; // Internal classes which make use of mapreduce code.\npackage commit.magic; // This is the \"Magic\" committer and support.\npackage commit.staging; // The staging committers.\n\nClasses and Interfaces: \nClass AbstractS3ACommitter; // Abstract base class for S3A committers; allows for any commonality between different architectures.\nClass AbstractS3ACommitter.ActiveCommit; // State of the active commit operation.\nClass AbstractS3ACommitterFactory; // Dynamically create the output committer based on subclass type and settings.\nClass CommitConstants; // Constants for working with committers.\nClass CommitterStatisticNames; // Statistic names for committers.\nClass CommitUtils; // Static utility methods related to S3A commitment processing, both staging and magic.\nClass InternalCommitterConstants; // These are internal constants not intended for public use.\nClass MagicCommitIntegration; // Adds the code needed for S3A to support magic committers.\nClass MagicCommitPaths; // Operations on (magic) paths.\nClass PutTracker; // Multipart put tracker.\nClass S3ACommitterFactory; // The S3A committer factory which chooses the committer based on the specific option chosen in a per-bucket basis from the property CommitConstants.FS_S3A_COMMITTER_NAME.\nEnum AbstractS3ACommitter.JobUUIDSource; // Enumeration of Job UUID source.\nClass PathCommitException; // Path exception to use for various commit issues.\nClass ValidationFailure; // Exception raised on validation failures; kept as an IOException for consistency with other failures.\n", "des": "Support for committing the output of analytics jobs directly to S3."}
{"index": 2039, "repo": "spring-messaging-6.0.11", "code": "Package: broker\n\nClasses and Interfaces: \npublic abstract class AbstractBrokerMessageHandler extends Object implements MessageHandler, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.SmartLifecycle; // Abstract base class for a MessageHandler that broker messages to registered subscribers.\npublic abstract class AbstractSubscriptionRegistry extends Object implements SubscriptionRegistry; // Abstract base class for implementations of SubscriptionRegistry that looks up information in messages but delegates to abstract methods for the actual storage and retrieval.\npublic class BrokerAvailabilityEvent extends org.springframework.context.ApplicationEvent; // Event raised when a broker's availability changes.\npublic class DefaultSubscriptionRegistry extends AbstractSubscriptionRegistry; // Implementation of SubscriptionRegistry that stores subscriptions in memory and uses a PathMatcher for matching destinations.\npublic class OrderedMessageChannelDecorator extends Object implements MessageChannel; // Decorator for an ExecutorSubscribableChannel that ensures messages are processed in the order they were published to the channel.\npublic class SimpleBrokerMessageHandler extends AbstractBrokerMessageHandler; // A \"simple\" message broker that recognizes the message types defined in SimpMessageType, keeps track of subscriptions with the help of a SubscriptionRegistry, and sends messages to subscribers.\npublic interface SubscriptionRegistry; // A registry of subscription by session that allows looking up subscriptions.\n", "des": "Provides a \"simple\" message broker implementation along with an abstract base class and other supporting types such as a registry for subscriptions."}
{"index": 2578, "repo": "camel-api-4.0.0-RC1", "code": "Package: health\n\nClasses and Interfaces: \npublic interface HasHealthChecks; // An interface to represent an object which provides HealthCheck\npublic interface HealthCheck extends HasGroup, HasId, Ordered; // Health check\npublic static enum HealthCheck.Kind extends Enum<HealthCheck.Kind>;\npublic static interface HealthCheck.Result; // Response to a health check invocation.\npublic static enum HealthCheck.State extends Enum<HealthCheck.State>;\npublic interface HealthCheckAware; // An interface to represent an object which wishes to be injected with the HealthCheck\npublic final class HealthCheckHelper extends Object; // Helper for invoking HealthCheck's.\npublic interface HealthCheckRegistry extends CamelContextAware, StaticService, IdAware; // A registry for health checks.\npublic interface HealthCheckRepository extends HasId, HasHealthChecks; // A repository for health checks.\npublic interface HealthCheckResolver extends CamelContextAware; // A pluggable strategy for resolving health checks in a loosely coupled manner\npublic final class HealthCheckResultBuilder extends Object implements Builder<HealthCheck.Result>; // A builder helper to create a HealthCheck result.\npublic interface HealthCheckResultStrategy; // A strategy that allows SPI to process HealthCheck results and enrich and manipulate the result.\npublic interface WritableHealthCheckRepository extends HealthCheckRepository; // An interface to represent an object which wishes to be injected with the HealthCheck\n", "des": "Camel Health Check support"}
{"index": 740, "repo": "spring-data-solr-4.3.15", "code": "Package: cdi\n\nClasses and Interfaces: \nClass SolrRepositoryBean<T>; // Uses CdiRepositoryBean to create SolrRepository instances.\nClass SolrRepositoryExtension;\n", "des": "Cdi extension."}
{"index": 789, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: lt\n\nClasses and Interfaces: \nClass LithuanianAnalyzer; // Analyzer for Lithuanian.\n", "des": "Analyzer for Lithuanian."}
{"index": 1958, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: mongo\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnClass(com.mongodb.client.MongoClient.class) @EnableConfigurationProperties(MongoProperties.class) @ConditionalOnMissingBean(type=\"org.springframework.data.mongodb.MongoDatabaseFactory\") public class MongoAutoConfiguration extends Object; // Auto-configuration for Mongo.\npublic class MongoClientFactory extends MongoClientFactorySupport<com.mongodb.client.MongoClient>; // A factory for a blocking MongoClient.\npublic abstract class MongoClientFactorySupport<T> extends Object; // Base class for setup that is common to MongoDB client factories.\n@FunctionalInterface public interface MongoClientSettingsBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the MongoClientSettings through a MongoClientSettings.Builder whilst retaining default auto-configuration.\npublic interface MongoConnectionDetails extends ConnectionDetails; // Details required to establish a connection to a MongoDB service.\npublic static interface MongoConnectionDetails.GridFs; // GridFS configuration.\n@ConfigurationProperties(prefix=\"spring.data.mongodb\") public class MongoProperties extends Object; // Configuration properties for Mongo.\npublic static class MongoProperties.Gridfs extends Object;\npublic static class MongoProperties.Ssl extends Object;\n@Deprecated(since=\"3.1.0\", forRemoval=true) public class MongoPropertiesClientSettingsBuilderCustomizer extends Object implements MongoClientSettingsBuilderCustomizer, org.springframework.core.Ordered;\n@AutoConfiguration @ConditionalOnClass({com.mongodb.reactivestreams.client.MongoClient.class,reactor.core.publisher.Flux.class}) @EnableConfigurationProperties(MongoProperties.class) public class MongoReactiveAutoConfiguration extends Object; // Auto-configuration for Reactive Mongo.\npublic class PropertiesMongoConnectionDetails extends Object implements MongoConnectionDetails; // Adapts MongoProperties to MongoConnectionDetails.\npublic class ReactiveMongoClientFactory extends MongoClientFactorySupport<com.mongodb.reactivestreams.client.MongoClient>; // A factory for a reactive MongoClient.\npublic class StandardMongoClientSettingsBuilderCustomizer extends Object implements MongoClientSettingsBuilderCustomizer, org.springframework.core.Ordered; // A MongoClientSettingsBuilderCustomizer that applies standard settings to a MongoClientSettings.\n", "des": "Auto-configuration for MongoDB."}
{"index": 1757, "repo": "spring-data-mongodb-4.1.2", "code": "Package: event\n\nClasses and Interfaces: \npublic abstract class AbstractDeleteEvent<T> extends MongoMappingEvent<org.bson.Document>; // Base class for delete events.\npublic abstract class AbstractMongoEventListener<E> extends Object implements ApplicationListener<MongoMappingEvent<?>>; // Base class to implement domain class specific ApplicationListeners.\n@FunctionalInterface public interface AfterConvertCallback<T> extends EntityCallback<T>; // Callback being invoked after a domain object is materialized from a Document when reading results.\npublic class AfterConvertEvent<E> extends MongoMappingEvent<E>; // MongoMappingEvent thrown after convert of a document.\npublic class AfterDeleteEvent<T> extends AbstractDeleteEvent<T>; // Event being thrown after a single or a set of documents has/have been deleted.\npublic class AfterLoadEvent<T> extends MongoMappingEvent<org.bson.Document>; // Event to be triggered after loading Documents to be mapped onto a given type.\n@FunctionalInterface public interface AfterSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered after save of a Document.\npublic class AfterSaveEvent<E> extends MongoMappingEvent<E>; // MongoMappingEvent triggered after save of a document.\npublic class AuditingEntityCallback extends Object implements BeforeConvertCallback<Object>, Ordered; // EntityCallback to populate auditing related fields on an entity about to be saved.\n@FunctionalInterface public interface BeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\npublic class BeforeConvertEvent<T> extends MongoMappingEvent<T>; // Event being thrown before a domain object is converted to be persisted.\npublic class BeforeDeleteEvent<T> extends AbstractDeleteEvent<T>; // Event being thrown before a document is deleted.\n@FunctionalInterface public interface BeforeSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered before save of a document.\npublic class BeforeSaveEvent<E> extends MongoMappingEvent<E>; // MongoMappingEvent triggered before save of a document.\npublic class LoggingEventListener extends AbstractMongoEventListener<Object>; // ApplicationListener for Mongo mapping events logging the events.\npublic class MongoMappingEvent<T> extends ApplicationEvent; // Base ApplicationEvent triggered by Spring Data MongoDB.\n", "des": "Mapping event callback infrastructure for the MongoDB document-to-object mapping subsystem."}
{"index": 268, "repo": "nutch-2.4", "code": "Package: subcollection\n\nClasses and Interfaces: \nClass SubcollectionIndexingFilter;\n", "des": "Indexing filter to assign documents to subcollections."}
{"index": 3019, "repo": "spring-web-6.0.11", "code": "Package: accept\n\nClasses and Interfaces: \npublic abstract class AbstractMappingContentNegotiationStrategy extends MappingMediaTypeFileExtensionResolver implements ContentNegotiationStrategy; // Base class for ContentNegotiationStrategy implementations with the steps to resolve a request to media types.\npublic class ContentNegotiationManager extends Object implements ContentNegotiationStrategy, MediaTypeFileExtensionResolver; // Central class to determine requested media types for a request.\npublic class ContentNegotiationManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ContentNegotiationManager>, ServletContextAware, org.springframework.beans.factory.InitializingBean; // Factory to create a ContentNegotiationManager and configure it with ContentNegotiationStrategy instances.\n@FunctionalInterface public interface ContentNegotiationStrategy; // A strategy for resolving the requested media types for a request.\npublic class FixedContentNegotiationStrategy extends Object implements ContentNegotiationStrategy; // A ContentNegotiationStrategy that returns a fixed content type.\npublic class HeaderContentNegotiationStrategy extends Object implements ContentNegotiationStrategy; // A ContentNegotiationStrategy that checks the 'Accept' request header.\npublic class MappingMediaTypeFileExtensionResolver extends Object implements MediaTypeFileExtensionResolver; // An implementation of MediaTypeFileExtensionResolver that maintains lookups between file extensions and MediaTypes in both directions.\npublic interface MediaTypeFileExtensionResolver; // Strategy to resolve a MediaType to a list of file extensions — for example, to resolve \"application/json\" to \"json\".\npublic class ParameterContentNegotiationStrategy extends AbstractMappingContentNegotiationStrategy; // Strategy that resolves the requested content type from a query parameter.\n@Deprecated public class PathExtensionContentNegotiationStrategy extends AbstractMappingContentNegotiationStrategy;\n@Deprecated public class ServletPathExtensionContentNegotiationStrategy extends PathExtensionContentNegotiationStrategy;\n", "des": "This package contains classes used to determine the requested the media types in a request."}
{"index": 627, "repo": "freemarker-2.3.32", "code": "Package: rhino\n\nClasses and Interfaces: \nClass RhinoFunctionModel;\nClass RhinoScriptableModel;\nClass RhinoWrapper;\n", "des": "Exposes Rhino (ECMAScript) objects to templates."}
{"index": 76, "repo": "ignite-core-2.15.0", "code": "Package: priorityqueue\n\nClasses and Interfaces: \nInterface PriorityQueueCollisionSpiMBean; // Management bean that provides access to the priority queue collision SPI configuration.\nClass PriorityQueueCollisionSpi; // This class provides implementation for Collision SPI based on priority queue.\n", "des": "Contains priority based collision SPI implementation."}
{"index": 653, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: metrics\n\nClasses and Interfaces: \nClass AMRMClientRelayerMetrics; // Metrics for FederationInterceptor Internals.\nClass OpportunisticSchedulerMetrics; // Metrics for Opportunistic Scheduler.\nEnum AMRMClientRelayerMetrics.RequestType; // Easier classification of request types for logging metrics.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 363, "repo": "commons-geometry-euclidean-1.0", "code": "Package: oned\n\nClasses and Interfaces: \nClass AffineTransformMatrix1D; // Class using a matrix to represent affine transformations in 1 dimensional Euclidean space.\nClass Interval; // Class representing an interval in one dimension.\nClass OrientedPoint; // This class represents a 1D oriented hyperplane.\nClass OrientedPoints; // Class containing factory methods for constructing OrientedPoint instances.\nClass RegionBSPTree1D; // Binary space partitioning (BSP) tree representing a region in one dimensional Euclidean space.\nClass RegionBSPTree1D.RegionNode1D; // BSP tree node for one dimensional Euclidean space.\nClass Vector1D; // This class represents vectors and points in one-dimensional Euclidean space.\nClass Vector1D.Sum; // Class used to create high-accuracy sums of vectors.\nClass Vector1D.Unit; // Represent unit vectors.\n", "des": "This package provides basic 1D geometry components."}
{"index": 3719, "repo": "solr-core-9.3.0", "code": "Package: providers\n\nClasses and Interfaces: \nClass AbstractSSLCredentialProvider; // Abstract provider with default implementation\nClass EnvSSLCredentialProvider; // Environment variable based SSL configuration provider\nClass EnvSSLCredentialProvider.EnvVars;\nClass SysPropSSLCredentialProvider; // System property based SSL configuration provider\n", "des": "TODO"}
{"index": 103, "repo": "ignite-core-2.15.0", "code": "Package: eventstorage\n\nSub Packages: \npackage eventstorage.memory; // Contains default in-memory implementation for event storage SPI.\n\nClasses and Interfaces: \nInterface EventStorageSpi; // This SPI provides local node events storage.\nClass NoopEventStorageSpi; // No-op implementation of EventStorageSpi.\n", "des": "Contains APIs for event storage SPI."}
{"index": 1258, "repo": "spring-core-6.0.11", "code": "Package: asm\n\nClasses and Interfaces: \npublic abstract class AnnotationVisitor extends Object; // A visitor to visit a Java annotation.\npublic class Attribute extends Object; // A non standard class, field, method or Code attribute, as defined in the Java Virtual Machine Specification (JVMS).\npublic class ByteVector extends Object; // A dynamically extensible vector of bytes.\npublic class ClassReader extends Object; // A parser to make a ClassVisitor visit a ClassFile structure, as defined in the Java Virtual Machine Specification (JVMS).\npublic final class ClassTooLargeException extends IndexOutOfBoundsException; // Exception thrown when the constant pool of a class produced by a ClassWriter is too large.\npublic abstract class ClassVisitor extends Object; // A visitor to visit a Java class.\npublic class ClassWriter extends ClassVisitor; // A ClassVisitor that generates a corresponding ClassFile structure, as defined in the Java Virtual Machine Specification (JVMS).\npublic final class ConstantDynamic extends Object; // A constant whose value is computed at runtime, with a bootstrap method.\npublic abstract class FieldVisitor extends Object; // A visitor to visit a Java field.\npublic final class Handle extends Object; // A reference to a field or a method.\npublic class Label extends Object; // A position in the bytecode of a method.\npublic final class MethodTooLargeException extends IndexOutOfBoundsException; // Exception thrown when the Code attribute of a method produced by a ClassWriter is too large.\npublic abstract class MethodVisitor extends Object; // A visitor to visit a Java method.\npublic abstract class ModuleVisitor extends Object; // A visitor to visit a Java module.\npublic interface Opcodes; // The JVM opcodes, access flags and array type codes.\npublic abstract class RecordComponentVisitor extends Object; // A visitor to visit a record component.\npublic final class SpringAsmInfo extends Object; // Utility class exposing constants related to Spring's internal repackaging of the ASM bytecode library: currently based on ASM 9.x plus minor patches.\npublic final class Type extends Object; // A Java field or method type.\npublic final class TypePath extends Object; // The path to a type argument, wildcard bound, array element type, or static inner type within an enclosing type.\npublic class TypeReference extends Object; // A reference to a type appearing in a class, field or method declaration, or on an instruction.\n", "des": "Spring's repackaging of ASM 9.x (with Spring-specific patches; for internal use only)."}
{"index": 1178, "repo": "commons-math3-3.6.1", "code": "Package: oned\n\nClasses and Interfaces: \nClass NeuronString; // Neural network with the topology of a one-dimensional line.\n", "des": "One-dimensional neural networks."}
{"index": 3840, "repo": "lucene-core-9.7.0", "code": "Package: compressing\n\nClasses and Interfaces: \nClass FieldsIndexWriter; // Efficient index format for block-based Codecs.\nClass Lucene90CompressingStoredFieldsFormat; // A StoredFieldsFormat that compresses documents in chunks in order to improve the compression ratio.\nClass Lucene90CompressingStoredFieldsReader; // StoredFieldsReader impl for Lucene90CompressingStoredFieldsFormat.\nClass Lucene90CompressingStoredFieldsWriter; // StoredFieldsWriter impl for Lucene90CompressingStoredFieldsFormat.\nClass Lucene90CompressingTermVectorsFormat; // A TermVectorsFormat that compresses chunks of documents together in order to improve the compression ratio.\nClass Lucene90CompressingTermVectorsReader; // TermVectorsReader for Lucene90CompressingTermVectorsFormat.\nClass Lucene90CompressingTermVectorsWriter; // TermVectorsWriter for Lucene90CompressingTermVectorsFormat.\n", "des": "Lucene 9.0 compressing format."}
{"index": 3319, "repo": "opencms-core-15.0", "code": "Package: synchronize\n\nClasses and Interfaces: \nInterface I_CmsSynchronizeModification; // Defines methods which can be pluged into the syncronisation process between VFS and \"real\" FS.\nClass CmsSynchronize; // Contains all methods to synchronize the VFS with the \"real\" FS.\nClass CmsSynchronizeList; // Defines the CmsSynchronizeList object, used to store synchronisation data required to synchronize the VFS and the server FS.\nClass CmsSynchronizeSettings; // Contains the settings for the synchronization.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsSynchronizeException; // Thrown by a class which implements org.opencms.file.I_CmsSyncModifications.\n", "des": "Classes used to synchronize the OpenCms VFS with the real file system."}
{"index": 830, "repo": "calcite-core-1.34.0", "code": "Package: jdbc\n\nClasses and Interfaces: \nInterface CalciteConnection; // Extension to Calcite's implementation of JDBC connection allows schemas to be defined dynamically.\nInterface CalcitePrepare; // API for a service that prepares statements for execution.\nInterface CalcitePrepare.Context; // Context for preparing a statement.\nInterface CalcitePrepare.SparkHandler; // Callback to register Spark as the main engine.\nInterface CalcitePrepare.SparkHandler.RuleSetBuilder; // Allows Spark to declare the rules it needs.\nClass CalciteFactory; // Extension of AvaticaFactory for Calcite.\nClass CalciteJdbc41Factory; // Implementation of AvaticaFactory for Calcite and JDBC 4.1 (corresponds to JDK 1.7).\nClass CalciteMetaImpl; // Helper for implementing the getXxx methods such as AvaticaDatabaseMetaData.getTables(java.lang.String, java.lang.String, java.lang.String, java.lang.String[]).\nClass CalcitePrepare.AnalyzeViewResult; // The result of analyzing a view.\nClass CalcitePrepare.CalciteSignature<T>; // The result of preparing a query.\nClass CalcitePrepare.ConvertResult; // The result of parsing and validating a SQL query and converting it to relational algebra.\nClass CalcitePrepare.Dummy; // Namespace that allows us to define non-abstract methods inside an interface.\nClass CalcitePrepare.ParseResult; // The result of parsing and validating a SQL query.\nClass CalcitePrepare.Query<T>; // A union type of the three possible ways of expressing a query: as a SQL string, a Queryable or a RelNode.\nClass CalciteResultSet; // Implementation of ResultSet for the Calcite engine.\nClass CalciteRootSchema;\nClass CalciteSchema; // Schema.\nClass CalciteSchema.Entry; // Entry in a schema, such as a table or sub-schema.\nClass CalciteSchema.FunctionEntry; // Membership of a function in a schema.\nClass CalciteSchema.FunctionEntryImpl; // Implementation of CalciteSchema.FunctionEntry where all properties are held in fields.\nClass CalciteSchema.LatticeEntry; // Membership of a lattice in a schema.\nClass CalciteSchema.LatticeEntryImpl; // Implementation of CalciteSchema.LatticeEntry where all properties are held in fields.\n", "des": "JDBC driver for Calcite."}
{"index": 3806, "repo": "lucene-analysis-common-9.7.0", "code": "Package: payloads\n\nClasses and Interfaces: \nInterface PayloadEncoder; // Mainly for use with the DelimitedPayloadTokenFilter, converts char buffers to BytesRef.\nClass AbstractEncoder; // Base class for payload encoders.\nClass DelimitedPayloadTokenFilter; // Characters before the delimiter are the \"token\", those after are the payload.\nClass DelimitedPayloadTokenFilterFactory; // Factory for DelimitedPayloadTokenFilter.\nClass FloatEncoder; // Encode a character array Float as a BytesRef.\nClass IdentityEncoder; // Does nothing other than convert the char array to a byte array using the specified encoding.\nClass IntegerEncoder; // Encode a character array Integer as a BytesRef.\nClass NumericPayloadTokenFilter; // Assigns a payload to a token based on the TypeAttribute\nClass NumericPayloadTokenFilterFactory; // Factory for NumericPayloadTokenFilter.\nClass PayloadHelper; // Utility methods for encoding payloads.\nClass TokenOffsetPayloadTokenFilter; // Adds the OffsetAttribute.startOffset() and OffsetAttribute.endOffset() First 4 bytes are the start\nClass TokenOffsetPayloadTokenFilterFactory; // Factory for TokenOffsetPayloadTokenFilter.\nClass TypeAsPayloadTokenFilter; // Makes the TypeAttribute a payload.\nClass TypeAsPayloadTokenFilterFactory; // Factory for TypeAsPayloadTokenFilter.\n", "des": "Provides various convenience classes for creating payloads on Tokens."}
{"index": 0, "repo": "connect-api-3.5.0", "code": "Package: components\n\nClasses and Interfaces: \nInterface Versioned; // Connect requires some components implement this interface to define a version string.\n", "des": "Provides common interfaces used to describe pluggable components."}
{"index": 1637, "repo": "spring-kafka-3.0.9", "code": "Package: mapping\n\nClasses and Interfaces: \npublic abstract class AbstractJavaTypeMapper extends Object implements org.springframework.beans.factory.BeanClassLoaderAware; // Abstract type mapper.\npublic interface ClassMapper; // Strategy for setting metadata on messages such that one can create the class that needs to be instantiated when receiving a message.\npublic class DefaultJackson2JavaTypeMapper extends AbstractJavaTypeMapper implements Jackson2JavaTypeMapper; // Jackson 2 type mapper.\npublic interface Jackson2JavaTypeMapper extends ClassMapper; // Strategy for setting metadata on messages such that one can create the class that needs to be instantiated when receiving a message.\npublic static enum Jackson2JavaTypeMapper.TypePrecedence extends Enum<Jackson2JavaTypeMapper.TypePrecedence>; // The precedence for type conversion - inferred from the method parameter or message headers.\n", "des": "Provides classes related to type mapping."}
{"index": 728, "repo": "mina-core-3.0.0-M2", "code": "Package: nio\n\nClasses and Interfaces: \nInterface RegistrationCallback; // To be used with NioSelectorLoop for being informed when the SelectionKey was created and registered.\nInterface SelectorListener; // Listen for selector events.\nInterface SelectorLoop;\nInterface SelectorLoopPool; // A pool of SelectorLoop\nClass AbstractNioSession; // Common ancestor for NIO based IoSession implmentation.\nClass FixedSelectorLoopPool; // A fixed size pool of SelectorLoop.\nClass NioSelectorLoop; // This class holds a Selector and handle all the incoming events for the sessions registered on this selector.ALl the events will be processed by some dedicated thread, taken from a pool.\nClass NioTcpClient; // This class implements a TCP NIO based client.\nClass NioTcpServer; // This class implements a TCP NIO based server.\nClass NioTcpSession; // A NIO based TCP session, should be used by NioTcpServer and NioTcpClient.\nClass NioUdpClient; // This class implements a UDP NIO based client.\nClass NioUdpServer; // This class implements a UDP NIO based server.\nClass NioUdpSession; // A UDP session based on NIO\nClass SslHelper; // An helper class used to manage everything related to SSL/TLS establishment and management.\n", "des": "Transport implementations base on NIO (New I/O), Channel"}
{"index": 1705, "repo": "spring-integration-jmx-6.1.2", "code": "Package: jmx\n\nSub Packages: \npackage jmx.config; // Provides classes for configuration - parsers, namespace handlers.\n\nClasses and Interfaces: \npublic class AttributePollingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<Object>; // A MessageSource implementation that retrieves the current value of a JMX attribute each time AbstractMessageSource.receive() is invoked.\npublic class DefaultMBeanAttributeFilter extends Object implements MBeanAttributeFilter;\npublic class DefaultMBeanObjectConverter extends Object implements MBeanObjectConverter;\npublic abstract class JmxHeaders extends Object; // Constants for JMX related Message Header keys.\n@FunctionalInterface public interface MBeanAttributeFilter;\n@FunctionalInterface public interface MBeanObjectConverter;\npublic class MBeanTreePollingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<Object>; // A MessageSource implementation that retrieves a snapshot of a filtered subset of the MBean tree.\npublic class NamedFieldsMBeanAttributeFilter extends Object implements MBeanAttributeFilter;\npublic class NotificationListeningMessageProducer extends org.springframework.integration.endpoint.MessageProducerSupport implements NotificationListener, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>; // A JMX NotificationListener implementation that will send Messages containing the JMX Notification instances as their payloads.\npublic class NotificationPublishingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler; // An AbstractMessageHandler implementation to publish an incoming message as a JMX Notification.\n@ManagedResource @IntegrationManagedResource public static class NotificationPublishingMessageHandler.PublisherDelegate extends Object implements org.springframework.jmx.export.notification.NotificationPublisherAware; // Simple class used for the actual MBean instances to be registered.\npublic class NotNamedFieldsMBeanAttributeFilter extends Object implements MBeanAttributeFilter;\npublic class OperationInvokingMessageHandler extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler; // A MessageHandler implementation for invoking JMX operations based on the Message sent to its AbstractMessageHandler.handleMessage(Message) method.\n", "des": "Base package for JMX support."}
{"index": 281, "repo": "pdfbox-3.0.0-beta1", "code": "Package: pdfwriter\n\nClasses and Interfaces: \nClass ContentStreamWriter; // A class that will take a list of tokens and write out a stream with them.\nClass COSStandardOutputStream; // simple output stream with some minor features for generating \"pretty\" PDF files.\nClass COSWriter; // This class acts on a in-memory representation of a PDF document.\n", "des": "This is the persistence layer used to write the PDFBox documents to a stream."}
{"index": 3209, "repo": "tomcat-servletapi-10.1", "code": "Package: servlet\n\nSub Packages: \npackage servlet.http; // The jakarta.servlet.http package contains a number of classes and interfaces that describe and define the contracts between a servlet class running under the HTTP protocol and the runtime environment provided for an instance of such a class by a conforming servlet container.\n\nClasses and Interfaces: \nInterface AsyncContext; // Provides the context for asynchronous request handling\nInterface AsyncListener; // Listener for events associated with an AsyncContext.\nInterface Filter; // A filter is an object that performs filtering tasks on either the request to a resource (a servlet or static content), or on the response from a resource, or both.\nInterface FilterChain; // A FilterChain is an object provided by the servlet container to the developer giving a view into the invocation chain of a filtered request for a resource.\nInterface FilterConfig; // A filter configuration object used by a servlet container to pass information to a filter during initialization.\nInterface FilterRegistration; // Interface through which a Filter may be further configured.\nInterface FilterRegistration.Dynamic; // Interface through which a Filter registered via one of the addFilter methods on ServletContext may be further configured.\nInterface ReadListener; // Receives notification of read events when using non-blocking IO.\nInterface Registration; // Common interface for the registration of Filters and Servlets.\nInterface Registration.Dynamic; // Interface through which a Servlet or Filter registered via one of the addServlet or addFilter methods, respectively, on ServletContext may be further configured.\nInterface RequestDispatcher; // Defines an object that receives requests from the client and sends them to any resource (such as a servlet, HTML file, or JSP file) on the server.\nInterface Servlet; // Defines methods that all servlets must implement.\nInterface ServletConfig; // A servlet configuration object used by a servlet container to pass information to a servlet during initialization.\nInterface ServletConnection; // Provides information about the connection made to the Servlet container.\nInterface ServletContainerInitializer; // ServletContainerInitializers (SCIs) are registered via an entry in the file META-INF/services/jakarta.servlet.ServletContainerInitializer that must be included in the JAR file that contains the SCI implementation.\nInterface ServletContext; // Defines a set of methods that a servlet uses to communicate with its servlet container, for example, to get the MIME type of a file, dispatch requests, or write to a log file.\n", "des": "The jakarta.servlet package contains a number of classes and interfaces that describe and define the contracts between a servlet class and the runtime environment provided for an instance of such a class by a conforming servlet container."}
{"index": 887, "repo": "cassandra-all-4.1.2", "code": "Package: hadoop\n\nClasses and Interfaces: \nClass ColumnFamilySplit;\nClass ConfigHelper;\nClass HadoopCompat; // Utility methods to allow applications to deal with inconsistencies between MapReduce Context Objects API between Hadoop 1.x and 2.x.\nClass ReporterWrapper; // A reporter that works with both mapred and mapreduce APIs.\n", "des": "This package was deprecated."}
{"index": 2542, "repo": "spring-security-core-6.1.2", "code": "Package: provisioning\n\nClasses and Interfaces: \npublic interface GroupManager; // Allows management of groups of authorities and their members.\npublic class InMemoryUserDetailsManager extends Object implements UserDetailsManager, UserDetailsPasswordService; // Non-persistent implementation of UserDetailsManager which is backed by an in-memory map.\npublic class JdbcUserDetailsManager extends JdbcDaoImpl implements UserDetailsManager, GroupManager; // Jdbc user management service, based on the same table structure as its parent class, JdbcDaoImpl.\npublic interface UserDetailsManager extends UserDetailsService; // An extension of the UserDetailsService which provides the ability to create new users and update existing ones.\n", "des": "Contains simple user and authority group account provisioning interfaces together with a a JDBC-based implementation."}
{"index": 1884, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: realm\n\nSub Packages: \npackage realm.activedirectory; // Realms that acquire security data from a Microsoft Active Directory.\npackage realm.jdbc; // Realms that acquire security data from an RDBMS (Relational Database Management System) using the JDBC API.\npackage realm.jndi; // Support for acquiring Realms from JNDI, particularly useful for configuring Shiro in JEE or EJB environments.\npackage realm.ldap; // Realms that acquire security data from an LDAP (Lightweight Directory Access Protocol) server utilizing LDAP/Naming APIs.\npackage realm.text; // Realms that acquire security data from text-based data sources such as Files or text streams.\n\nClasses and Interfaces: \npublic abstract class AuthenticatingRealm extends CachingRealm implements org.apache.shiro.lang.util.Initializable; // A top-level abstract implementation of the Realm interface that only implements authentication support (log-in) operations and leaves authorization (access control) behavior to subclasses.\npublic abstract class AuthorizingRealm extends AuthenticatingRealm implements Authorizer, org.apache.shiro.lang.util.Initializable, PermissionResolverAware, RolePermissionResolverAware; // An AuthorizingRealm extends the AuthenticatingRealm's capabilities by adding Authorization (access control) support.\npublic abstract class CachingRealm extends Object implements Realm, org.apache.shiro.lang.util.Nameable, org.apache.shiro.cache.CacheManagerAware, LogoutAware; // A very basic abstract extension point for the Realm interface that provides caching support for subclasses.\npublic interface Realm; // A Realm is a security component that can access application-specific security entities such as users, roles, and permissions to determine authentication and authorization operations.\npublic interface RealmFactory; // Enables Shiro end-users to configure and initialize one or more Realm instances in any manner desired.\npublic class SimpleAccountRealm extends AuthorizingRealm; // A simple implementation of the Realm interface that uses a set of configured user accounts and roles to support authentication and authorization.\n", "des": "Components and sub-packages used in supporting the core Realm interface."}
{"index": 1024, "repo": "hadoop-aws-3.3.6", "code": "Package: audit\n\nSub Packages: \npackage audit.impl; // The internal implementations of auditing support.\n\nClasses and Interfaces: \nInterface AuditManagerS3A; // Interface for Audit Managers auditing operations through the AWS libraries.\nInterface AuditSpanS3A; // An Audit Span with S3A integration, specifically callbacks from the AWS client SDK.\nInterface AWSAuditEventCallbacks; // Callbacks for audit spans.\nInterface OperationAuditor; // Interfaces for audit services to implement.\nClass AuditIntegration; // Support for integrating auditing within the S3A code.\nClass AWSRequestAnalyzer; // Extract information from a request.\nClass AWSRequestAnalyzer.RequestInfo; // Info about a request.\nClass OperationAuditorOptions; // Options for the OperationAuditor.\nClass S3AAuditConstants;\nClass S3LogParser; // Class to help parse AWS S3 Logs.\nClass S3LogVerbs; // Various verbs in the S3 logs.\nClass AuditFailureException; // This is in the AWS exception tree so that exceptions raised in the AWS SDK are correctly reported up.\nClass AuditOperationRejectedException; // The auditor has rejected the operation as forbidden/unavailable.\n", "des": "Support for auditing and ultimately tracing operations."}
{"index": 3359, "repo": "opencms-core-15.0", "code": "Package: table\n\nClasses and Interfaces: \nClass CmsBeanTableBuilder<T>; // Builds a table based on a given bean class.\nClass CmsTableUtil; // Contains utility methods for Vaadin tables.\nAnnotation Type Column; // Annotation used to mark up bean properties with metadata for table columns.\n", "des": "Contains utility classes for dealing with Vaadin tables."}
{"index": 3418, "repo": "commons-imaging-1.0-alpha3", "code": "Package: palette\n\nClasses and Interfaces: \nInterface MedianCut;\nInterface Palette; // Color palette.\nClass ColorCountComparator; // A comparator for {#link ColorCount} elements.\nClass Dithering; // Dithering algorithms to use when quantizing an image to palette form.\nClass LongestAxisMedianCut;\nClass MedianCutQuantizer;\nClass MostPopulatedBoxesMedianCut;\nClass PaletteFactory; // Factory for creating palettes.\nClass QuantizedPalette;\nClass SimplePalette;\n", "des": "Color quantization and palette manipulation tools."}
{"index": 928, "repo": "commons-compress-1.23.0", "code": "Package: z\n\nClasses and Interfaces: \nClass ZCompressorInputStream; // Input stream that decompresses .Z files.\n", "des": "Provides stream classes for decompressing streams using the \"compress\" algorithm used to write .Z files."}
{"index": 1047, "repo": "commons-io-2.13.0", "code": "Package: spi\n\nClasses and Interfaces: \nClass FileSystemProviders; // Helps to work with FileSystemProvider.\n", "des": "Provides extensions in the realm of java.nio.file.spi."}
{"index": 377, "repo": "zookeeper-jute-3.8.2", "code": "Package: compiler\n\nSub Packages: \npackage compiler.generated; // This package contains code generated by JavaCC from the Hadoop record syntax file rcc.jj.\n\nClasses and Interfaces: \nClass CSharpGenerator;\nClass JBoolean;\nClass JBuffer;\nClass JByte;\nClass JDouble;\nClass JField;\nClass JFile; // Container for the Hadoop Record DDL.\nClass JFloat;\nClass JInt;\nClass JLong;\nClass JMap;\nClass JRecord;\nClass JString;\nClass JType; // Abstract Base class for all types supported by Hadoop Record I/O.\nClass JVector;\n", "des": "This package contains classes needed for code generation from the hadoop record compiler."}
{"index": 407, "repo": "spring-social-core-1.1.6.RELEASE", "code": "Package: connect\n\nSub Packages: \npackage connect.jdbc; // JDBC-based ConnectionRepository implementation.\npackage connect.support; // ServiceProvider Connect API implementation support.\n\nClasses and Interfaces: \nInterface ApiAdapter<A>; // An adapter that bridges between the uniform Connection model and a specific provider API model.\nInterface Connection<A>; // A link to a service provider user.\nInterface ConnectionFactoryLocator; // A ServiceLocator for ConnectionFactory instances.\nInterface ConnectionRepository; // Data access interface for saving and restoring Connection objects from a persistent store.\nInterface ConnectionSignUp; // A command that signs up a new user in the event no user id could be mapped from a Connection.\nInterface ConnectionValues; // A configuration interface used to set values on a Connection from a specific service provider API instance.\nInterface UsersConnectionRepository; // A data access interface for managing a global store of users connections to service providers.\nClass ConnectionData; // A data transfer object that allows the internal state of a Connection to be persisted and transferred between layers of an application.\nClass ConnectionFactory<A>; // Base abstraction for factories that construct service provider Connection instances.\nClass ConnectionKey; // The unique business key for a Connection instance.\nClass UserProfile; // A normalized model representing a service provider user profile.\nClass UserProfileBuilder; // Builder for constructing a UserProfile instance returned by ApiAdapter.fetchUserProfile(Object) Makes it easy to construct a profile instance where some of the individual fields may be null.\nClass ConnectionRepositoryException; // Base exception class for ConnectionRepository failures.\nClass DuplicateConnectionException; // Thrown by a ConnectionRepository when attempting to add a Connection and a connection already exists with the given key.\nClass NoSuchConnectionException; // Thrown by a ConnectionRepository when attempting to fetch a Connection and no such connection exists with the provided key.\nClass NotConnectedException; // Thrown by a ConnectionRepository when attempting to fetch a \"primary\" connection and the user is not connected to the provider in question.\n", "des": "Framework for establishing connections between local users and users of ServiceProviders such as Twitter and Facebook."}
{"index": 3210, "repo": "tomcat-servletapi-10.1", "code": "Package: http\n\nClasses and Interfaces: \nInterface HttpServletMapping; // Represents how the request from which this object was obtained was mapped to the associated servlet.\nInterface HttpServletRequest; // Extends the ServletRequest interface to provide request information for HTTP servlets.\nInterface HttpServletResponse; // Extends the ServletResponse interface to provide HTTP-specific functionality in sending a response.\nInterface HttpSession; // Provides a way to identify a user across more than one page request or visit to a Web site and to store information about that user.\nInterface HttpSessionActivationListener; // Objects that are bound to a session may listen to container events notifying them that sessions will be passivated and that session will be activated.\nInterface HttpSessionAttributeListener; // This listener interface can be implemented in order to get notifications of changes to the attribute lists of sessions within this web application.\nInterface HttpSessionBindingListener; // Causes an object to be notified when it is bound to or unbound from a session.\nInterface HttpSessionIdListener; // Implementations of this interface are notified when an HttpSession's ID changes.\nInterface HttpSessionListener; // Implementations of this interface are notified of changes to the list of active sessions in a web application.\nInterface HttpUpgradeHandler; // Interface between the HTTP upgrade process and the new protocol.\nInterface Part; // This class represents a part as uploaded to the server as part of a multipart/form-data request body.\nInterface PushBuilder; // Builds a push request based on the HttpServletRequest from which this builder was obtained.\nInterface WebConnection; // The interface used by an HttpUpgradeHandler to interact with an upgraded HTTP connection.\nClass Cookie; // Creates a cookie, a small amount of information sent by a servlet to a Web browser, saved by the browser, and later sent back to the server.\nClass HttpFilter; // Provides a base class that implements the Filter interface and ensures that the Request and Response are of type HttpServletRequest and HttpServletResponse respectively.\nClass HttpServlet; // Provides an abstract class to be subclassed to create an HTTP servlet suitable for a Web site.\nClass HttpServletRequestWrapper; // Provides a convenient implementation of the HttpServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet.\nClass HttpServletResponseWrapper; // Provides a convenient implementation of the HttpServletResponse interface that can be subclassed by developers wishing to adapt the response from a Servlet.\n", "des": "The jakarta.servlet.http package contains a number of classes and interfaces that describe and define the contracts between a servlet class running under the HTTP protocol and the runtime environment provided for an instance of such a class by a conforming servlet container."}
{"index": 588, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: eventmgr\n\nClasses and Interfaces: \nInterface EventDispatcher<K,V,E>; // The EventDispatcher interface contains the method that is called by the Event Manager to complete the event delivery to the event listener.\nClass CopyOnWriteIdentityMap<K,V>; // A copy-on-write identity map.\nClass EventListeners<K,V>; // As of 3.5.\nClass EventManager; // This class is the central class for the Event Manager.\nClass ListenerQueue<K,V,E>; // The ListenerQueue is used to snapshot the list of listeners at the time the event is fired.\n", "des": "Provides the event manager API."}
{"index": 8, "repo": "connect-api-3.5.0", "code": "Package: sink\n\nClasses and Interfaces: \nInterface ErrantRecordReporter; // Component that a SinkTask can use to report problematic records (and their corresponding problems) as it writes them through SinkTask.put(java.util.Collection).\nInterface SinkConnectorContext; // A context to allow a SinkConnector to interact with the Kafka Connect runtime.\nInterface SinkTaskContext; // Context passed to SinkTasks, allowing them to access utilities in the Kafka Connect runtime.\nClass SinkConnector; // SinkConnectors implement the Connector interface to send Kafka data to another system.\nClass SinkRecord; // SinkRecord is a ConnectRecord that has been read from Kafka and includes the kafkaOffset of the record in the Kafka topic-partition in addition to the standard fields.\nClass SinkTask; // SinkTask is a Task that takes records loaded from Kafka and sends them to another system.\n", "des": "Provides an API for implementing sink connectors which write Kafka records to external applications."}
{"index": 1142, "repo": "commons-math3-3.6.1", "code": "Package: math3\n\nSub Packages: \npackage math3.analysis; // Parent package for common numerical analysis procedures, including root finding, function interpolation and integration.\npackage math3.complex; // Complex number type and implementations of complex transcendental functions.\npackage math3.dfp; // Decimal floating point library for Java\npackage math3.distribution; // Implementations of common discrete and continuous distributions.\npackage math3.exception; // Specialized exceptions for algorithms errors.\npackage math3.filter; // Implementations of common discrete-time linear filters.\npackage math3.fitting; // Classes to perform curve fitting.\npackage math3.fraction; // Fraction number type and fraction number formatting.\npackage math3.genetics; // This package provides Genetic Algorithms components and implementations.\npackage math3.geometry; // This package is the top level package for geometry.\npackage math3.linear; // Linear algebra support.\npackage math3.ode; // This package provides classes to solve Ordinary Differential Equations problems.\npackage math3.optim; // Generally, optimizers are algorithms that will either minimize or maximize a scalar function, called the objective function.\npackage math3.optimization; // All classes and sub-packages of this package are deprecated.\npackage math3.primes; // Methods related to prime numbers like primality test, factor decomposition.\npackage math3.random; // Random number and random data generators.\npackage math3.special; // Implementations of special functions such as Beta and Gamma.\npackage math3.stat; // Data storage, manipulation and summary routines.\npackage math3.transform; // Implementations of transform methods, including Fast Fourier transforms.\npackage math3.util; // Convenience routines and common data structures used throughout the commons-math library.\n\nClasses and Interfaces: \nInterface Field<T>; // Interface representing a field.\nInterface FieldElement<T>; // Interface representing field elements.\nInterface RealFieldElement<T>; // Interface representing a real field.\n", "des": "Common classes used throughout the commons-math library."}
{"index": 3878, "repo": "solr-ltr-9.3.0", "code": "Package: transform\n\nClasses and Interfaces: \nClass LTRFeatureLoggerTransformerFactory; // This transformer will take care to generate and append in the response the features declared in the feature store of the current reranking model, or a specified feature store.\nClass LTRInterleavingTransformerFactory;\n", "des": "APIs and implementations of DocTransformer for modifying documents in Solr request responses"}
{"index": 1656, "repo": "jena-core-4.9.0", "code": "Package: xmloutput\n\nClasses and Interfaces: \npublic interface RDFXMLWriterI extends RDFWriterI; // This interface only adds documentation to RDFWriterI.\n", "des": "Writing RDF/XML."}
{"index": 1021, "repo": "commons-email-1.5", "code": "Package: util\n\nClasses and Interfaces: \nClass IDNEmailAddressConverter; // Converts email addresses containing International Domain Names into an ASCII representation suitable for sending an email.\nClass MimeMessageParser; // Parses a MimeMessage and stores the individual parts such a plain text, HTML text and attachments.\nClass MimeMessageUtils; // Static helper methods.\n", "des": "This package provides some utility classes."}
{"index": 2561, "repo": "pulsar-common-3.0.0", "code": "Package: impl\n\nClasses and Interfaces: \npublic class NamespaceIsolationPolicies extends Object; // Namespace isolation policies.\npublic class NamespaceIsolationPolicyImpl extends Object implements NamespaceIsolationPolicy; // Implementation of the namespace isolation policy.\n", "des": "Implementation of policies."}
{"index": 180, "repo": "ignite-core-2.15.0", "code": "Package: timeout\n\nClasses and Interfaces: \nInterface GridTimeoutObject; // All objects that can timeout should implement this interface.\nClass GridSpiTimeoutObject; // Wrapper for IgniteSpiTimeoutObject.\nClass GridTimeoutObjectAdapter; // Default implementation for GridTimeoutObject.\nClass GridTimeoutProcessor; // Detects timeout events and processes them.\n", "des": "TODO."}
{"index": 1781, "repo": "spring-integration-file-6.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic abstract class AbstractFilePayloadTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser; // Base class for File payload transformer parsers.\npublic abstract class AbstractRemoteFileInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Abstract base class for parsing remote file inbound channel adapters.\npublic abstract class AbstractRemoteFileOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\npublic abstract class AbstractRemoteFileStreamingInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Abstract base class for parsing remote file streaming inbound channel adapters.\npublic class FileInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Parser for the <inbound-channel-adapter> element of the 'file' namespace.\npublic class FileListFilterFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<FileListFilter<File>>;\npublic class FileNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for Spring Integration's 'file' namespace.\npublic class FileOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the <outbound-channel-adapter/> element of the 'file' namespace.\npublic class FileOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the 'outbound-gateway' element of the file namespace.\npublic final class FileParserUtils extends Object;\npublic class FileReadingMessageSourceFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<FileReadingMessageSource> implements org.springframework.beans.factory.BeanNameAware;\npublic class FileSplitterParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers, factory beans."}
{"index": 2800, "repo": "spring-amqp-3.0.6", "code": "Package: utils\n\nClasses and Interfaces: \npublic final class JavaUtils extends Object; // Chained utility methods to simplify some Java repetitive code.\npublic class MapBuilder<B extends MapBuilder<B,K,V>,K,V> extends Object; // A Builder pattern implementation for a Map.\npublic final class SerializationUtils extends Object; // Static utility to help with serialization.\n", "des": "Provides utility classes to support Spring AMQP."}
{"index": 1078, "repo": "graal-sdk-1.0.0-rc7", "code": "Package: nativeimage\n\nSub Packages: \npackage nativeimage.c; // This package and its sub-packages provide a fast and lightweight interface between Java code and C code.\n\nClasses and Interfaces: \nInterface Feature; // Features allow clients to intercept the native image generation and run custom initialization code at various stages.\nInterface Feature.AfterAnalysisAccess; // Access methods available for Feature.afterAnalysis(org.graalvm.nativeimage.Feature.AfterAnalysisAccess).\nInterface Feature.AfterCompilationAccess; // Access methods available for Feature.afterCompilation(org.graalvm.nativeimage.Feature.AfterCompilationAccess).\nInterface Feature.AfterHeapLayoutAccess; // Access methods available for Feature.afterHeapLayout(org.graalvm.nativeimage.Feature.AfterHeapLayoutAccess).\nInterface Feature.AfterImageWriteAccess; // Access methods available for Feature.afterImageWrite(org.graalvm.nativeimage.Feature.AfterImageWriteAccess).\nInterface Feature.AfterRegistrationAccess; // Access methods available for Feature.afterRegistration(org.graalvm.nativeimage.Feature.AfterRegistrationAccess).\nInterface Feature.BeforeAnalysisAccess; // Access methods available for Feature.beforeAnalysis(org.graalvm.nativeimage.Feature.BeforeAnalysisAccess).\nInterface Feature.BeforeCompilationAccess; // Access methods available for Feature.beforeCompilation(org.graalvm.nativeimage.Feature.BeforeCompilationAccess).\nInterface Feature.BeforeImageWriteAccess; // Access methods available for Feature.beforeImageWrite(org.graalvm.nativeimage.Feature.BeforeImageWriteAccess).\nInterface Feature.CompilationAccess; // Access methods available for Feature.beforeCompilation(org.graalvm.nativeimage.Feature.BeforeCompilationAccess) and Feature.afterCompilation(org.graalvm.nativeimage.Feature.AfterCompilationAccess).\nInterface Feature.DuringAnalysisAccess; // Access methods available for Feature.duringAnalysis(org.graalvm.nativeimage.Feature.DuringAnalysisAccess).\nInterface Feature.DuringSetupAccess; // Access methods available for Feature.duringSetup(org.graalvm.nativeimage.Feature.DuringSetupAccess).\nInterface Feature.FeatureAccess; // Access methods that are available for all feature methods.\n", "des": "The Graal-SDK native-image API allows to customize the native image generation, i.e., the ahead-of-time compilation of Java code to standalone executables."}
{"index": 3043, "repo": "spring-web-6.0.11", "code": "Package: handler\n\nClasses and Interfaces: \npublic class DefaultWebFilterChain extends Object implements WebFilterChain; // Default implementation of WebFilterChain.\npublic class ExceptionHandlingWebHandler extends WebHandlerDecorator; // WebHandler decorator that invokes one or more WebExceptionHandlers after the delegate WebHandler.\npublic class FilteringWebHandler extends WebHandlerDecorator; // WebHandlerDecorator that invokes a chain of WebFilters before invoking the delegate WebHandler.\npublic class ResponseStatusExceptionHandler extends Object implements WebExceptionHandler; // Handle ResponseStatusException by setting the response status.\npublic class WebHandlerDecorator extends Object implements WebHandler; // WebHandler that decorates and delegates to another WebHandler.\n", "des": "Provides common WebHandler implementations and a WebHandlerDecorator."}
{"index": 1686, "repo": "spring-integration-mqtt-6.1.2", "code": "Package: outbound\n\nClasses and Interfaces: \npublic abstract class AbstractMqttMessageHandler<T,C> extends org.springframework.integration.handler.AbstractMessageHandler implements org.springframework.integration.support.management.ManageableLifecycle, org.springframework.context.ApplicationEventPublisherAware; // Abstract class for MQTT outbound channel adapters.\npublic class MqttPahoMessageHandler extends AbstractMqttMessageHandler<org.eclipse.paho.client.mqttv3.IMqttAsyncClient,org.eclipse.paho.client.mqttv3.MqttConnectOptions> implements org.eclipse.paho.client.mqttv3.MqttCallback, MqttPahoComponent; // Eclipse Paho Implementation.\npublic class Mqttv5PahoMessageHandler extends AbstractMqttMessageHandler<org.eclipse.paho.mqttv5.client.IMqttAsyncClient,org.eclipse.paho.mqttv5.client.MqttConnectionOptions> implements org.eclipse.paho.mqttv5.client.MqttCallback, MqttComponent<org.eclipse.paho.mqttv5.client.MqttConnectionOptions>; // The AbstractMqttMessageHandler implementation for MQTT v5.\n", "des": "Provides Spring Integration components for doing outbound operations."}
{"index": 1747, "repo": "spring-data-mongodb-4.1.2", "code": "Package: config\n\nClasses and Interfaces: \n@Configuration(proxyBeanMethods=false) public abstract class AbstractMongoClientConfiguration extends MongoConfigurationSupport; // Base class for Spring Data MongoDB configuration using JavaConfig with MongoClient.\n@Configuration(proxyBeanMethods=false) public abstract class AbstractReactiveMongoConfiguration extends MongoConfigurationSupport; // Base class for reactive Spring Data MongoDB configuration using JavaConfig.\npublic abstract class BeanNames extends Object; // Constants to declare bean names used by the namespace configuration.\npublic class ConnectionStringPropertyEditor extends PropertyEditorSupport; // Parse a String to a ConnectionString.\n@Inherited @Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.mongodb.config.MongoAuditingRegistrar.class) public @interface EnableMongoAuditing; // Annotation to enable auditing in MongoDB via annotation configuration.\n@Inherited @Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.mongodb.config.ReactiveMongoAuditingRegistrar.class) public @interface EnableReactiveMongoAuditing; // Annotation to enable auditing in MongoDB using reactive infrastructure via annotation configuration.\npublic class GeoJsonConfiguration extends Object implements SpringDataJacksonModules; // Configuration class to expose GeoJsonModule as a Spring bean.\npublic class MappingMongoConverterParser extends Object implements BeanDefinitionParser; // Bean definition parser for the mapping-converter element.\npublic class MongoAuditingBeanDefinitionParser extends AbstractSingleBeanDefinitionParser; // BeanDefinitionParser to register a AuditingEntityCallback to transparently set auditing information on an entity.\npublic class MongoClientParser extends Object implements BeanDefinitionParser; // Parser for mongo-client definitions.\npublic abstract class MongoConfigurationSupport extends Object; // Base class for Spring Data MongoDB to be extended for JavaConfiguration usage.\npublic class MongoCredentialPropertyEditor extends PropertyEditorSupport; // Parse a String to a Collection of MongoCredential.\npublic class MongoDbFactoryParser extends AbstractBeanDefinitionParser; // BeanDefinitionParser to parse db-factory elements into BeanDefinitions.\npublic class MongoJmxParser extends Object implements BeanDefinitionParser;\npublic class MongoNamespaceHandler extends NamespaceHandlerSupport; // NamespaceHandler for Mongo DB configuration.\n", "des": "Spring XML namespace configuration for MongoDB specific repositories."}
{"index": 2047, "repo": "spring-boot-loader-3.1.1", "code": "Package: archive\n\nClasses and Interfaces: \npublic interface Archive extends Iterable<Archive.Entry>, AutoCloseable; // An archive that can be launched by the Launcher.\npublic static interface Archive.Entry; // Represents a single entry in the archive.\n@FunctionalInterface public static interface Archive.EntryFilter; // Strategy interface to filter Entries.\npublic class ExplodedArchive extends Object implements Archive; // Archive implementation backed by an exploded archive directory.\npublic class JarFileArchive extends Object implements Archive; // Archive implementation backed by a JarFile.\n", "des": "Abstraction over logical Archives be they backed by a JAR file or unpacked into a directory."}
{"index": 1492, "repo": "wicket-extensions-10.0.0-M1", "code": "Package: breadcrumb\n\nSub Packages: \npackage breadcrumb.panel; // This package contains a panel based implementation of bread crumb participants.\n\nClasses and Interfaces: \npublic class BreadCrumbBar extends org.apache.wicket.markup.html.panel.Panel implements IBreadCrumbModel; // A component that renders bread crumbs.\npublic abstract class BreadCrumbLink extends org.apache.wicket.markup.html.link.Link<Void>; // A link that when clicked will set the the active bread crumb participant to the one that is returned by BreadCrumbLink.getParticipant(String).\npublic final class BreadCrumbModelListenerSupport extends Object implements org.apache.wicket.util.io.IClusterable; // Utility class for working with bread crumb model listeners.\npublic class DefaultBreadCrumbsModel extends Object implements IBreadCrumbModel; // Default breadcrumb model implementation that should be good for 99% of the use cases out there.\npublic interface IBreadCrumbModel extends org.apache.wicket.util.io.IClusterable; // Bread crumbs provide a means to track certain history of client actions.\npublic interface IBreadCrumbModelListener extends EventListener, org.apache.wicket.util.io.IClusterable; // Bread crumb model listeners get notified by bread crumb models of activation, addition and removal events.\npublic interface IBreadCrumbParticipant extends org.apache.wicket.util.io.IClusterable; // Bread crumb participants function as proxies for components that are part of a bread crumb hierarchy.\n", "des": "Package for working with bread crumb components."}
{"index": 1633, "repo": "spring-kafka-3.0.9", "code": "Package: streams\n\nSub Packages: \npackage streams.messaging; // Package for classes related to spring-messaging with Kafka Streams.\n\nClasses and Interfaces: \n@Deprecated public class HeaderEnricher<K,V> extends Object implements org.apache.kafka.streams.kstream.Transformer<K,V,org.apache.kafka.streams.KeyValue<K,V>>;\npublic static final class HeaderEnricher.Container<K,V> extends Object; // Container object for SpEL evaluation.\npublic class HeaderEnricherProcessor<K,V> extends org.apache.kafka.streams.processor.api.ContextualProcessor<K,V,K,V>; // Manipulate the headers.\npublic static final class HeaderEnricherProcessor.Container<K,V> extends Object; // Container object for SpEL evaluation.\npublic class KafkaStreamsMicrometerListener extends Object implements StreamsBuilderFactoryBean.Listener; // Creates a KafkaStreamsMetrics for the KafkaStreams.\npublic class RecoveringDeserializationExceptionHandler extends Object implements org.apache.kafka.streams.errors.DeserializationExceptionHandler; // A DeserializationExceptionHandler that calls a ConsumerRecordRecoverer.\n", "des": "Package for classes related to Kafka Streams."}
{"index": 1863, "repo": "spring-test-6.0.11", "code": "Package: request\n\nClasses and Interfaces: \npublic interface ConfigurableSmartRequestBuilder<B extends ConfigurableSmartRequestBuilder<B>> extends SmartRequestBuilder; // An extension of SmartRequestBuilder that can be configured with RequestPostProcessors.\npublic class MockHttpServletRequestBuilder extends Object implements ConfigurableSmartRequestBuilder<MockHttpServletRequestBuilder>, org.springframework.beans.Mergeable; // Default builder for MockHttpServletRequest required as input to perform requests in MockMvc.\npublic class MockMultipartHttpServletRequestBuilder extends MockHttpServletRequestBuilder; // Default builder for MockMultipartHttpServletRequest.\npublic abstract class MockMvcRequestBuilders extends Object; // Static factory methods for RequestBuilders.\n@FunctionalInterface public interface RequestPostProcessor; // Extension point for applications or 3rd party libraries that wish to further initialize a MockHttpServletRequest instance after it has been built by MockHttpServletRequestBuilder or its subclass MockMultipartHttpServletRequestBuilder.\n", "des": "Contains built-in RequestBuilder implementations."}
{"index": 633, "repo": "freemarker-2.3.32", "code": "Package: utility\n\nClasses and Interfaces: \nInterface DateUtil.CalendarFieldsToDateConverter; // Used internally by DateUtil; don't use its implementations for anything else.\nInterface DateUtil.DateToISO8601CalendarFactory; // Used internally by DateUtil; don't use its implementations for anything else.\nInterface ObjectFactory<T>; // Used for the trivial cases of the factory pattern.\nInterface ObjectWrapperWithAPISupport; // Experimental - subject to change: Implemented by ObjectWrapper-s to help TemplateModel-s to implement the someValue?api operation.\nInterface RichObjectWrapper; // Experimental - subject to change: Union of the interfaces that a typical feature rich ObjectWrapper is expected to implement.\nInterface WriteProtectable; // Implemented by objects that can be made permanently read-only.\nClass CaptureOutput; // Use block-assignments instead, like <assign x>...</assign>.\nClass ClassUtil;\nClass Collections12; // Not needed anymore, as FreeMarker now requires higher than Java 1.3\nClass CollectionUtils;\nClass Constants; // Frequently used constant TemplateModel values.\nClass DateUtil; // Date and time related utilities.\nClass DateUtil.TrivialCalendarFieldsToDateConverter; // Non-thread-safe implementation that hard-references a calendar internally.\nClass DateUtil.TrivialDateToISO8601CalendarFactory; // Non-thread-safe factory that hard-references a calendar internally.\nClass DeepUnwrap; // Utility methods for unwrapping TemplateModel-s.\nClass DOMNodeModel; // Use NodeModel instead\nClass Execute; // Gives FreeMarker the the ability to execute external commands.\nClass HtmlEscape; // Performs an HTML escape of a given template fragment.\nClass JythonRuntime; // A crude first pass at an embeddable Jython interpreter\nClass NormalizeNewlines; // Transformer that supports FreeMarker legacy behavior: all newlines appearing within the transformed area will be transformed into the platform's default newline.\nClass NullWriter; // A Writer that simply drops what it gets.\nClass NumberUtil; // Number- and math-related utilities.\nClass ObjectConstructor; // An object that you can make available in a template to instantiate arbitrary beans-wrapped objects in a template.\nClass OptimizerUtil;\nClass SecurityUtilities;\n", "des": "Various classes used by core FreeMarker code but might be useful outside of it too."}
{"index": 2090, "repo": "spring-webflux-6.0.11", "code": "Package: reactive\n\nSub Packages: \npackage reactive.accept; // RequestedContentTypeResolver strategy and implementations to resolve the requested content type for a given request.\npackage reactive.config; // Spring WebFlux configuration infrastructure.\npackage reactive.function; // Provides a foundation for both the reactive client and server subpackages.\npackage reactive.handler; // Provides HandlerMapping implementations including abstract base classes.\npackage reactive.resource; // Support classes for serving static resources.\npackage reactive.result; // Support for various programming model styles including the invocation of different types of handlers, e.g.\npackage reactive.socket; // Abstractions and support classes for reactive WebSocket interactions.\n\nClasses and Interfaces: \npublic class BindingContext extends Object; // Context to assist with binding request data onto Objects and provide access to a shared Model with controller-specific attributes.\npublic class DispatcherHandler extends Object implements org.springframework.web.server.WebHandler, org.springframework.web.cors.reactive.PreFlightRequestHandler, org.springframework.context.ApplicationContextAware; // Central dispatcher for HTTP request handlers/controllers.\npublic interface DispatchExceptionHandler; // Contract to map a Throwable to a HandlerResult.\npublic interface HandlerAdapter; // Contract to abstract the details of invoking a handler of a given type.\npublic interface HandlerMapping; // Interface to be implemented by objects that define a mapping between requests and handler objects.\npublic class HandlerResult extends Object; // Represent the result of the invocation of a handler or a handler method.\npublic interface HandlerResultHandler; // Process the HandlerResult, usually returned by a HandlerAdapter.\n", "des": "Top-level package for the spring-webflux module that contains DispatcherHandler, the main entry point for WebFlux server endpoint processing including key contracts used to map requests to handlers, invoke them, and process the result."}
{"index": 1449, "repo": "spring-data-redis-3.1.2", "code": "Package: stream\n\nClasses and Interfaces: \npublic interface ByteBufferRecord extends MapRecord<ByteBuffer,ByteBuffer,ByteBuffer>; // A Record within the stream backed by a collection of binary field/value pairs.\npublic interface ByteRecord extends MapRecord<byte[],byte[],byte[]>; // A Record within the stream backed by a collection of binary field/value pairs.\npublic class Consumer extends Object; // Value object representing a Stream consumer within a consumer group.\npublic interface MapRecord<S,K,V> extends Record<S,Map<K,V>>, Iterable<Map.Entry<K,V>>; // A Record within the stream backed by a collection of field/value pairs.\npublic interface ObjectRecord<S,V> extends Record<S,V>; // A Record within the stream mapped to a single object.\npublic class PendingMessage extends Object; // Value object representing a single pending message containing its ID, the consumer that fetched the message and has still to acknowledge it, the time elapsed since the messages last delivery and the the total number of times delivered.\npublic class PendingMessages extends Object implements Streamable<PendingMessage>; // Value object holding detailed information about pending messages in consumer group for a given Range and offset.\npublic class PendingMessagesSummary extends Object; // Value Object summarizing pending messages in a consumer group.\npublic final class ReadOffset extends Object; // Value object representing read offset for a Stream.\npublic interface Record<S,V>; // A single entry in the stream consisting of the entry-id and the actual entry-value (typically a collection of field/value pairs).\npublic class RecordId extends Object; // The id of a single Record within a stream.\npublic class StreamInfo extends Object;\npublic static class StreamInfo.XInfoConsumer extends StreamInfo.XInfoObject;\npublic static class StreamInfo.XInfoConsumers extends Object implements Streamable<StreamInfo.XInfoConsumer>;\npublic static class StreamInfo.XInfoGroup extends StreamInfo.XInfoObject;\npublic static class StreamInfo.XInfoGroups extends Object implements Streamable<StreamInfo.XInfoGroup>; // Value object holding general information about consumer groups associated with a Redis Stream.\npublic static class StreamInfo.XInfoObject extends Object;\n", "des": "Data structures and interfaces to interact with Redis Streams."}
{"index": 3165, "repo": "gson-2.10.1", "code": "Package: gson\n\nSub Packages: \npackage gson.annotations; // This package provides annotations that can be used with Gson.\npackage gson.reflect; // This package provides utility classes for finding type information for generic types.\npackage gson.stream; // This package provides classes for processing JSON in an efficient streaming way.\n\nClasses and Interfaces: \nInterface ExclusionStrategy; // A strategy (or policy) definition that is used to decide whether or not a field or class should be serialized or deserialized as part of the JSON output/input.\nInterface FieldNamingStrategy; // A mechanism for providing custom field naming in Gson.\nInterface InstanceCreator<T>; // This interface is implemented to create instances of a class that does not define a no-args constructor.\nInterface JsonDeserializationContext; // Context for deserialization that is passed to a custom deserializer during invocation of its JsonDeserializer.deserialize(JsonElement, Type, JsonDeserializationContext) method.\nInterface JsonDeserializer<T>; // Interface representing a custom deserializer for JSON.\nInterface JsonSerializationContext; // Context for serialization that is passed to a custom serializer during invocation of its JsonSerializer.serialize(Object, Type, JsonSerializationContext) method.\nInterface JsonSerializer<T>; // Interface representing a custom serializer for JSON.\nInterface ReflectionAccessFilter; // Filter for determining whether reflection based serialization and deserialization is allowed for a class.\nInterface ToNumberStrategy; // A strategy that is used to control how numbers should be deserialized for Object and Number when a concrete type of the deserialized number is unknown in advance.\nInterface TypeAdapterFactory; // Creates type adapters for set of related types.\nClass FieldAttributes; // A data object that stores attributes of a field.\nClass Gson; // This is the main class for using Gson.\nClass GsonBuilder; // Use this builder to construct a Gson instance when you need to set configuration options other than the default.\nClass JsonArray; // A class representing an array type in JSON.\nClass JsonElement; // A class representing an element of JSON.\nClass JsonNull; // A class representing a JSON null value.\nClass JsonObject; // A class representing an object type in Json.\nClass JsonParser; // A parser to parse JSON into a parse tree of JsonElements.\nClass JsonPrimitive; // A class representing a JSON primitive value.\n", "des": "This package provides the Gson class to convert Json to Java and vice-versa."}
{"index": 3731, "repo": "lucene-queryparser-9.7.0", "code": "Package: config\n\nClasses and Interfaces: \nInterface FieldConfigListener; // This interface should be implemented by classes that wants to listen for field configuration requests.\nClass AbstractQueryConfig; // This class is the base of QueryConfigHandler and FieldConfig.\nClass ConfigurationKey<T>; // An instance of this class represents a key that is used to retrieve a value from AbstractQueryConfig.\nClass FieldConfig; // This class represents a field configuration.\nClass QueryConfigHandler; // This class can be used to hold any query configuration and no field configuration.\n", "des": "Base classes used to configure the query processing."}
{"index": 2147, "repo": "wicket-core-10.0.0-M1", "code": "Package: upload\n\nClasses and Interfaces: \npublic class FileDescription extends Object implements Serializable; // Description of file properties as in browser client side.\npublic abstract class FilesSelectedBehavior extends OnChangeAjaxBehavior; // OnChangeAjaxBehavior that streams back to server properties of the selected file(s) (at client side), before uploading it (them).\npublic class FileUpload extends Object; // Model for file uploads.\npublic class FileUploadField extends FormComponent<List<FileUpload>>; // Form component that corresponds to a <input type=\"file\">.\npublic class MultiFileUploadField extends FormComponentPanel<Collection<FileUpload>>; // Form component that allows the user to select multiple files to upload via a single <input type=\"file\"/> field.\n", "des": "Support for upload forms (using multipart requests)."}
{"index": 3894, "repo": "solr-solrj-9.3.0", "code": "Package: routing\n\nClasses and Interfaces: \nInterface ReplicaListTransformer;\nInterface ReplicaListTransformerFactory;\nClass AffinityReplicaListTransformer; // Allows better caching by establishing deterministic evenly-distributed replica routing preferences according to either explicitly configured hash routing parameter, or the hash of a query parameter (configurable, usually related to the main query).\nClass AffinityReplicaListTransformerFactory; // Factory for constructing an AffinityReplicaListTransformer that reorders replica routing preferences deterministically, based on request parameters.\nClass NodePreferenceRulesComparator; // This comparator makes sure that the given replicas are sorted according to the given list of preferences.\nClass NoOpReplicaListTransformer;\nClass PreferenceRule;\nClass RequestReplicaListTransformerGenerator;\nClass ShufflingReplicaListTransformer;\n", "des": "Classes to handle query routing preferences"}
{"index": 820, "repo": "commons-rng-simple-1.5", "code": "Package: simple\n\nSub Packages: \npackage simple.internal; // Utilities for seed conversion.\n\nClasses and Interfaces: \nClass JDKRandomBridge; // Subclass of Random that delegates to a RestorableUniformRandomProvider instance but will otherwise rely on the base class for generating all the random types.\nClass JDKRandomWrapper; // Wraps a Random instance to implement UniformRandomProvider.\nClass ThreadLocalRandomSource; // This class provides a thread-local UniformRandomProvider.\nEnum RandomSource; // This class provides the API for creating generators of random numbers.\n", "des": "This package provides factory methods by which low-level classes implemented in module \"commons-rng-core\" are instantiated."}
{"index": 2749, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: policy\n\nClasses and Interfaces: \npublic class CompletionPolicySupport extends Object implements CompletionPolicy; // Very simple base class for CompletionPolicy implementations.\npublic class CompositeCompletionPolicy extends Object implements CompletionPolicy; // Composite policy that loops through a list of delegate policies and answers calls by a consensus.\npublic abstract class CountingCompletionPolicy extends DefaultResultCompletionPolicy; // Abstract base class for policies that need to count the number of occurrences of some event (e.g.\npublic class DefaultResultCompletionPolicy extends CompletionPolicySupport; // Very simple CompletionPolicy that bases its decision on the result of a batch operation.\npublic class SimpleCompletionPolicy extends DefaultResultCompletionPolicy; // Policy for terminating a batch after a fixed number of operations.\npublic class TimeoutTerminationPolicy extends CompletionPolicySupport; // Termination policy that times out after a fixed period.\n", "des": "Infrastructure implementations of repeat policy concerns."}
{"index": 160, "repo": "ignite-core-2.15.0", "code": "Package: job\n\nClasses and Interfaces: \nClass GridJobProcessor; // Responsible for all grid job execution and communication.\nClass GridJobWorker; // Job worker.\nClass JobWorkerInterruptionTimeoutObject; // Timeout object for delayed worker interruption.\nEnum ComputeJobStatusEnum; // Compute job status.\n", "des": "TODO."}
{"index": 730, "repo": "mina-core-3.0.0-M2", "code": "Package: udp\n\nClasses and Interfaces: \nInterface UdpSessionConfig; // A IoSessionConfig for UDP based sessions.\nClass AbstractUdpClient; // Base class for UDP based Clients\nClass AbstractUdpServer; // Base implementation for all the UDP servers.\nClass DefaultUdpSessionConfig; // Implementation for the UDP session configuration.\n", "des": "Shared plumber UDP transport implementations."}
{"index": 117, "repo": "ignite-core-2.15.0", "code": "Package: platform\n\nSub Packages: \npackage platform.cpp; // Contains C++ platform-related classes.\npackage platform.dotnet; // Contains .Net platform-related classes.\n\nClasses and Interfaces: \nInterface PlatformJavaObjectFactory<T>; // Object factory used for advanced interop between platform and Java.\nEnum PlatformType; // Interop platform type.\nAnnotation Type PlatformServiceMethod; // Annotation for setting mapping between java interface's method and platform service's method.\n", "des": "Contains platform-related classes."}
{"index": 2795, "repo": "spring-amqp-3.0.6", "code": "Package: core\n\nClasses and Interfaces: \npublic abstract class AbstractBuilder extends Object; // Base class for builders supporting arguments.\npublic abstract class AbstractDeclarable extends Object implements Declarable; // Base class for Declarable classes.\npublic abstract class AbstractExchange extends AbstractDeclarable implements Exchange; // Common properties that describe all exchange types.\npublic enum AcknowledgeMode extends Enum<AcknowledgeMode>; // Acknowledgment modes supported by the listener container.\npublic class Address extends Object; // Represents an address for publication of an AMQP message.\npublic interface AmqpAdmin; // Specifies a basic set of portable AMQP administrative operations for AMQP > 0.9.\npublic class AmqpMessageReturnedException extends AmqpException; // Exception thrown if the request message cannot be delivered when the mandatory flag is set.\npublic class AmqpReplyTimeoutException extends AmqpException; // Async reply timeout.\npublic interface AmqpTemplate; // Specifies a basic set of AMQP operations.\npublic class AnonymousQueue extends Queue; // Represents an anonymous, non-durable, exclusive, auto-delete queue.\npublic interface AsyncAmqpTemplate; // Classes implementing this interface can perform asynchronous send and receive operations using CompletableFutures.\npublic class Base64UrlNamingStrategy extends Object implements NamingStrategy; // Generates names with the form <prefix><base64url> where 'prefix' is 'spring.gen-' by default (e.g.\npublic interface BatchMessageListener extends MessageListener; // Used to receive a batch of messages if the container supports it.\npublic class Binding extends AbstractDeclarable; // Simple container collecting information to describe a binding.\npublic static enum Binding.DestinationType extends Enum<Binding.DestinationType>; // The binding destination.\npublic final class BindingBuilder extends Object; // Basic builder class to create bindings for a more fluent API style in code based configuration.\npublic static final class BindingBuilder.DestinationConfigurer extends Object; // General destination configurer.\npublic static final class BindingBuilder.DirectExchangeRoutingKeyConfigurer extends Object; // Direct exchange routing key configurer.\npublic static class BindingBuilder.GenericArgumentsConfigurer extends Object; // Generic argument configurer.\npublic static final class BindingBuilder.GenericExchangeRoutingKeyConfigurer extends Object; // Generic exchange routing key configurer.\n", "des": "Provides core classes for the spring AMQP abstraction."}
{"index": 3292, "repo": "opencms-core-15.0", "code": "Package: letsencrypt\n\nClasses and Interfaces: \nInterface I_CmsLetsEncryptUpdater; // Interface for classes which should handle an updated certificate configuration.\nClass CmsLetsEncryptConfiguration; // Configuration class containing the LetsEncrypt configuration settings OpenCms needed by OpenCms.\nClass CmsLetsEncryptUpdater; // Updates the certificate configuration for the LetsEncrypt container.\nClass CmsSiteConfigToLetsEncryptConfigConverter; // Class which converts the OpenCms site configuration to a certificate configuration for the LetsEncrypt docker instance.\nClass CmsSiteConfigToLetsEncryptConfigConverter.DomainGrouping; // Represents a grouping of domains into certificates.\nClass CmsSiteConfigToLetsEncryptConfigConverter.SiteDomainInfo; // Represents the domain information for a single site.\nEnum CmsLetsEncryptConfiguration.Mode; // Enum which represents different modes that control which domains OpenCms puts into the certificate configuration.\nEnum CmsLetsEncryptConfiguration.Trigger; // Enum which represents the different types of events that LetsEncrypt updates should be triggered by.\n", "des": "Classes related to the LetsEncrypt docker integration."}
{"index": 2311, "repo": "spring-boot-3.1.1", "code": "Package: init\n\nClasses and Interfaces: \npublic class DataSourceScriptDatabaseInitializer extends AbstractScriptDatabaseInitializer; // InitializingBean that performs DataSource initialization using schema (DDL) and data (DML) scripts.\npublic class PlatformPlaceholderDatabaseDriverResolver extends Object; // Utility class that can resolve placeholder text with the actual DatabaseDriver platform.\n", "des": "Support for initialization of an SQL database using a JDBC DataSource."}
{"index": 2115, "repo": "spring-retry-2.0.2", "code": "Package: context\n\nClasses and Interfaces: \npublic class RetryContextSupport extends org.springframework.core.AttributeAccessorSupport implements RetryContext;\n", "des": "Infrastructure implementations of retry context concerns."}
{"index": 388, "repo": "commons-dbcp2-2.9.0", "code": "Package: datasources\n\nClasses and Interfaces: \nClass InstanceKeyDataSource; // The base class for SharedPoolDataSource and PerUserPoolDataSource.\nClass PerUserPoolDataSource; // A pooling DataSource appropriate for deployment within J2EE environment.\nClass PerUserPoolDataSourceFactory; // A JNDI ObjectFactory which creates SharedPoolDataSources\nClass SharedPoolDataSource; // A pooling DataSource appropriate for deployment within J2EE environment.\nClass SharedPoolDataSourceFactory; // A JNDI ObjectFactory which creates SharedPoolDataSources\n", "des": "This package contains two DataSources: PerUserPoolDataSource and SharedPoolDataSource which provide a database connection pool."}
{"index": 1979, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: sendgrid\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnClass(com.sendgrid.SendGrid.class) @ConditionalOnProperty(prefix=\"spring.sendgrid\", value=\"api-key\") @EnableConfigurationProperties(SendGridProperties.class) public class SendGridAutoConfiguration extends Object; // Auto-configuration for SendGrid.\n@ConfigurationProperties(prefix=\"spring.sendgrid\") public class SendGridProperties extends Object; // @ConfigurationProperties for SendGrid.\npublic static class SendGridProperties.Proxy extends Object;\n", "des": "Auto-configuration for SendGrid."}
{"index": 3287, "repo": "opencms-core-15.0", "code": "Package: preconfiguredrestrictions\n\nClasses and Interfaces: \nClass CmsRestrictionRule; // A single restriction rule, telling for which field and type what kind of restriction should be enforced.\nClass CmsRestrictionRuleParser; // Parser for restriction rules.\nClass CmsRestrictionsBean; // Wraps the preconfigured restrictions.\nClass CmsRestrictionsBean.FieldValues; // The values in one input field.\nEnum CmsRestrictionRule.MatchType; // Match type of the restriction, i.e., how the values should be treated.\nEnum CmsRestrictionsBean.FieldValues.FieldType; // The type describes how values in that input field should be handled.\n", "des": "Helpers for the preconfigured filter query part of the list configuration (ie."}
{"index": 521, "repo": "commons-vfs2-2.9.0", "code": "Package: hdfs\n\nClasses and Interfaces: \nClass HdfsFileContentInfoFactory; // Creates FileContentInfo instances for HDFS.\nClass HdfsFileObject; // A VFS representation of an HDFS file.\nClass HdfsFileProvider; // FileProvider for HDFS files.\nClass HdfsFileSystem; // A VFS FileSystem that interacts with HDFS.\nClass HdfsFileSystemConfigBuilder; // Configuration settings for the HdfsFileSystem.\nClass HdfsRandomAccessContent; // Provides random access to content in an HdfsFileObject.\nEnum HdfsFileAttributes; // HDFS file content attributes.\n", "des": "The HDFS File Provider"}
{"index": 58, "repo": "ignite-core-2.15.0", "code": "Package: transactions\n\nClasses and Interfaces: \nInterface Transaction; // Ignite cache transaction.\nInterface TransactionMetrics; // Transaction metrics, shared across all caches.\nEnum TransactionConcurrency; // Transaction concurrency control.\nEnum TransactionIsolation; // Defines different cache transaction isolation levels.\nEnum TransactionState; // Cache transaction state.\nClass TransactionAlreadyCompletedException; // Exception thrown whenever Mvcc transaction has been finished before operation finished.\nClass TransactionDeadlockException; // Transaction deadlock exception.\nClass TransactionDuplicateKeyException; // Exception thrown whenever transaction tries to inserts entry with same mvcc version more than once.\nClass TransactionException; // Base class for all transaction related exceptions.\nClass TransactionHeuristicException; // Exception thrown whenever grid transaction enters an unknown state.\nClass TransactionMixedModeException; // Exception thrown whenever transaction spans over MVCC and non-MVCC caches.\nClass TransactionOptimisticException; // Exception thrown whenever grid transactions fail optimistically.\nClass TransactionRollbackException; // Exception thrown whenever grid transactions has been automatically rolled back.\nClass TransactionSerializationException; // Exception thrown whenever transaction can't be serialized due to write conflict.\nClass TransactionTimeoutException; // Exception thrown whenever transactions time out.\nClass TransactionUnsupportedConcurrencyException; // Exception thrown whenever transaction concurrency level is not supported.\n", "des": "Contains transaction-related classes."}
{"index": 2483, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: jetty\n\nClasses and Interfaces: \n@AutoConfiguration(after=CompositeMeterRegistryAutoConfiguration.class) @ConditionalOnWebApplication @ConditionalOnClass({io.micrometer.core.instrument.binder.jetty.JettyServerThreadPoolMetrics.class,org.eclipse.jetty.server.Server.class}) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class JettyMetricsAutoConfiguration extends Object; // Auto-configuration for Jetty metrics.\n", "des": "Auto-configuration for Jetty actuator metrics."}
{"index": 303, "repo": "pdfbox-3.0.0-beta1", "code": "Package: digitalsignature\n\nSub Packages: \npackage digitalsignature.visible; // This is the visual signature part that help creating the visual representation for the digital signature.\n\nClasses and Interfaces: \nInterface ExternalSigningSupport; // Interface for external signature creation scenarios.\nInterface SignatureInterface; // Providing an interface for accessing necessary functions for signing a PDF document.\nClass COSFilterInputStream; // A filtered stream that includes the bytes that are in the (begin,length) intervals passed in the constructor.\nClass PDPropBuild; // A signature build dictionary as specified in the PDF Signature Build Dictionary Specification.\nClass PDPropBuildDataDict; // The general property dictionaries from the build property dictionary.\nClass PDSeedValue; // This represents a pdf signature seed value dictionary.\nClass PDSeedValueCertificate; // This class represents a certificate seed value dictionary that is in the seed value which puts constraints on certificates when signing documents.\nClass PDSeedValueMDP; // This MDP dictionary is a part of the seed value dictionary and define if a author signature or a certification signature should be use.\nClass PDSeedValueTimeStamp; // If exist, it describe where the signature handler can request a RFC3161 timestamp and if it is a must have for the signature.\nClass PDSignature; // This represents a digital signature that can be attached to a document.\nClass SignatureOptions; // This contains the visual signature as a COSDocument, its preferred size and the page.\nClass SigningSupport; // Class to be used when creating PDF signatures externally.\n", "des": "The digital signature library will manage signatures that are stored in the PDF document."}
{"index": 2819, "repo": "spring-orm-6.0.11", "code": "Package: jpa\n\nSub Packages: \npackage jpa.persistenceunit; // Internal support for managing JPA persistence units.\npackage jpa.support; // Classes supporting the org.springframework.orm.jpa package.\npackage jpa.vendor; // Support classes for adapting to specific JPA vendors.\n\nClasses and Interfaces: \npublic abstract class AbstractEntityManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<EntityManagerFactory>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, EntityManagerFactoryInfo, org.springframework.dao.support.PersistenceExceptionTranslator, Serializable; // Abstract FactoryBean that creates a local JPA EntityManagerFactory instance within a Spring application context.\npublic class DefaultJpaDialect extends Object implements JpaDialect, Serializable; // Default implementation of the JpaDialect interface.\npublic abstract class EntityManagerFactoryAccessor extends Object implements org.springframework.beans.factory.BeanFactoryAware; // Base class for any class that needs to access a JPA EntityManagerFactory, usually in order to obtain a JPA EntityManager.\npublic interface EntityManagerFactoryInfo; // Metadata interface for a Spring-managed JPA EntityManagerFactory.\npublic abstract class EntityManagerFactoryUtils extends Object; // Helper class featuring methods for JPA EntityManager handling, allowing for reuse of EntityManager instances within transactions.\npublic class EntityManagerHolder extends org.springframework.transaction.support.ResourceHolderSupport; // Resource holder wrapping a JPA EntityManager.\npublic interface EntityManagerProxy extends EntityManager; // Subinterface of EntityManager to be implemented by EntityManager proxies.\npublic abstract class ExtendedEntityManagerCreator extends Object; // Delegate for creating a variety of EntityManager proxies that follow the JPA spec's semantics for \"extended\" EntityManagers.\npublic interface JpaDialect extends org.springframework.dao.support.PersistenceExceptionTranslator; // SPI strategy that encapsulates certain functionality that standard JPA 3.0 does not offer, such as access to the underlying JDBC Connection.\npublic class JpaObjectRetrievalFailureException extends ObjectRetrievalFailureException; // JPA-specific subclass of ObjectRetrievalFailureException.\n", "des": "Package providing integration of JPA (Java Persistence API) with Spring concepts."}
{"index": 3385, "repo": "commons-imaging-1.0-alpha3", "code": "Package: common\n\nSub Packages: \npackage common.bytesource; // Encapsulates sources from which data may be read.\npackage common.itu_t4; // Provides ITU-T T.4 and T.6 compression classes.\npackage common.mylzw; // Provides LZW compression.\n\nClasses and Interfaces: \nInterface BufferedImageFactory;\nInterface ImageMetadata;\nInterface ImageMetadata.ImageMetadataItem;\nInterface XmpEmbeddable; // Implementations support embedding the Extensible Metadata Platform tags.\nClass BasicCParser; // A rudimentary preprocessor and parser for the C programming language.\nClass BinaryConstant;\nClass BinaryFileParser;\nClass BinaryFunctions; // Convenience methods for various binary and I/O operations.\nClass BinaryOutputStream;\nClass ByteConversions; // Convenience methods for converting data types to and from byte arrays.\nClass GenericImageMetadata;\nClass GenericImageMetadata.GenericImageMetadataItem;\nClass ImageBuilder; // A utility class primary intended for storing data obtained by reading image files.\nClass PackBits;\nClass RationalNumber; // Rational number, as used by the TIFF image format.\nClass RgbBufferedImageFactory;\nClass SimpleBufferedImageFactory;\nClass XmpImagingParameters; // Parameters for formats that support Xmp.\nClass ZlibDeflate; // Utility class to compress/decompress bytes using the ZLIB deflate/inflate compression.\n", "des": "Provides utility classes that are employed across multiple image formats and sub-packages."}
{"index": 43, "repo": "ignite-core-2.15.0", "code": "Package: messaging\n\nClasses and Interfaces: \nClass MessagingListenActor<T>; // Convenience actor-base adapter for IgniteMessaging.localListen(Object, IgniteBiPredicate) method.\n", "des": "Contains Topic-based Messaging functionality."}
{"index": 3348, "repo": "opencms-core-15.0", "code": "Package: diff\n\nClasses and Interfaces: \nInterface I_CmsDiffProvider; // Interface for classes which display a comparison widget in the comparison view of the history dialog.\nClass A_CmsAttributeDiff; // Abstract super class for displaying differences between a set of properties / attributes.\nClass A_CmsAttributeDiff.IsAttributeDifference; // Predicate used to check if an attribute comparison bean actually represents a difference.\nClass CmsAttributeDiff; // Displays changes between attributes (size, modification date, etc.\nClass CmsImageDiff; // Displays two image versions side by side, scaled.\nClass CmsPropertyCompareBean; // Represents a row in an attribute comparison table.\nClass CmsPropertyDiff; // Displays differences between the sets of properties of two versions of a resource.\nClass CmsShowVersionButtons; // Provides buttons for showing the two versions being compared.\nClass CmsTextDiff; // Interprets two versions of a resource as text files, and shows a diff view for the two texts.\nClass CmsTextDiffPanel; // Widget used to display a colorized diff view for two texts.\nClass CmsValueCompareBean; // Represents a row of the XML content value comparison table.\nClass CmsValueDiff; // Displays either a diff for the XML file, or a table displaying the differences between individual content values, allowing the user to switch between the two views.\nClass CmsVersionMacroResolver;\n", "des": "Contains code for the comparison view of the file history dialog."}
{"index": 1743, "repo": "spring-batch-integration-5.0.2", "code": "Package: launch\n\nClasses and Interfaces: \npublic class JobLaunchingGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler; // The JobLaunchingGateway is used to launch Batch Jobs.\npublic class JobLaunchingMessageHandler extends Object implements JobLaunchRequestHandler; // Message handler which uses strategies to convert a Message into a job and a set of job parameters\npublic class JobLaunchRequest extends Object; // Encapsulation of a Job and its JobParameters forming a request for a job to be launched.\npublic interface JobLaunchRequestHandler; // Interface for handling a JobLaunchRequest and returning a JobExecution.\n", "des": "Message based job launching components."}
{"index": 498, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: join\n\nClasses and Interfaces: \nClass CoGbkResult; // A row result of a CoGroupByKey.\nClass CoGbkResult.CoGbkResultCoder; // A Coder for CoGbkResults.\nClass CoGbkResultSchema; // A schema for the results of a CoGroupByKey.\nClass CoGroupByKey<K>; // A PTransform that performs a CoGroupByKey on a tuple of tables.\nClass KeyedPCollectionTuple<K>; // An immutable tuple of keyed PCollections with key type K.\nClass KeyedPCollectionTuple.TaggedKeyedPCollection<K,V>; // A utility class to help ensure coherence of tag and input PCollection types.\nClass RawUnionValue; // This corresponds to an integer union tag and value.\nClass UnionCoder; // A UnionCoder encodes RawUnionValues.\n", "des": "Defines the CoGroupByKey transform for joining multiple PCollections."}
{"index": 3579, "repo": "lucene-test-framework-9.7.0", "code": "Package: standard\n\nClasses and Interfaces: \nClass EmojiTokenizationTestUnicode_12_1; // This class was automatically generated by generateEmojiTokenizationTest.pl.\nClass WordBreakTestUnicode_12_1_0; // This class was automatically generated by generateJavaUnicodeWordBreakTest.pl from: http://www.unicode.org/Public/12.1.0/ucd/auxiliary/WordBreakTest.txt\n", "des": "Classes to support StandardAnalyzer component testing."}
{"index": 3621, "repo": "solr-test-framework-9.3.0", "code": "Package: handler\n\nSub Packages: \npackage handler.component; // Class for tracking shard requests\n\nClasses and Interfaces: \nClass BackupRestoreUtils;\nClass BackupStatusChecker; // Helper class for validating when the replication handler has finished a backup.\nClass TestRestoreCoreUtil;\n", "des": "Concrete implementations of org.apache.solr.request.SolrRequestHandler"}
{"index": 2651, "repo": "spring-data-cassandra-4.1.2", "code": "Package: legacy\n\nClasses and Interfaces: \n@Deprecated(since=\"4.0\", forRemoval=true) public interface AsyncCqlOperations;\n@Deprecated(since=\"4.0\", forRemoval=true) public class AsyncCqlTemplate extends CassandraAccessor implements AsyncCqlOperations;\nprotected static class AsyncCqlTemplate.AsyncRowCallbackHandlerResultSetExtractor extends Object implements AsyncResultSetExtractor<Void>; // Adapter to enable use of a RowCallbackHandler inside a ResultSetExtractor.\n@Deprecated(since=\"4.0\", forRemoval=true) @FunctionalInterface public interface AsyncPreparedStatementCreator;\n@Deprecated(since=\"4.0\", forRemoval=true) @FunctionalInterface public interface AsyncResultSetExtractor<T>;\n@Deprecated(since=\"4.0\", forRemoval=true) public class AsyncRowMapperResultSetExtractor<T> extends Object implements AsyncResultSetExtractor<List<T>>;\n@Deprecated(since=\"4.0\", forRemoval=true) @FunctionalInterface public interface AsyncSessionCallback<T>;\n", "des": "CQL legacy core asynchronous support for easier migration."}
{"index": 354, "repo": "hive-exec-4.0.0-alpha-2", "code": "Package: errors\n\nClasses and Interfaces: \nInterface ErrorHeuristic; // Classes implementing ErrorHeuristic are able to generate a possible cause and solution for Hive jobs that have failed by examining the query, task log files, and the job configuration.\nClass DataCorruptErrorHeuristic; // Detects the condition where there is a error with one of the input files in the query.\nClass ErrorAndSolution; // Immutable class for storing a possible error and a resolution suggestion.\nClass MapAggrMemErrorHeuristic; // Detects out-of-memory errors when hash tables in map-based aggregation group by queries take up too much memory.\nClass RegexErrorHeuristic; // Simple heuristic where the query and the lines of the task log file are run through regular expressions to see if they resemble a known error condition.\nClass ScriptErrorHeuristic; // Detects when a query has failed because a user's script that was specified in transform returns a non-zero error code.\nClass TaskLogProcessor; // TaskLogProcessor reads the logs from failed task attempts and tries to figure out what the cause of the error was using various heuristics.\nClass DataConstraintViolationError; // Error class, thrown when arguments's constraints violate.\n", "des": "Generates execution error messages using heuristics."}
{"index": 1533, "repo": "spring-context-6.0.11", "code": "Package: assembler\n\nClasses and Interfaces: \npublic abstract class AbstractConfigurableMBeanInfoAssembler extends AbstractReflectiveMBeanInfoAssembler; // Base class for MBeanInfoAssemblers that support configurable JMX notification behavior.\npublic abstract class AbstractMBeanInfoAssembler extends Object implements MBeanInfoAssembler; // Abstract implementation of the MBeanInfoAssembler interface that encapsulates the creation of a ModelMBeanInfo instance but delegates the creation of metadata to subclasses.\npublic abstract class AbstractReflectiveMBeanInfoAssembler extends AbstractMBeanInfoAssembler; // Builds on the AbstractMBeanInfoAssembler superclass to add a basic algorithm for building metadata based on the reflective metadata of the MBean class.\npublic interface AutodetectCapableMBeanInfoAssembler extends MBeanInfoAssembler; // Extends the MBeanInfoAssembler to add autodetection logic.\npublic class InterfaceBasedMBeanInfoAssembler extends AbstractConfigurableMBeanInfoAssembler implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Subclass of AbstractReflectiveMBeanInfoAssembler that allows for the management interface of a bean to be defined using arbitrary interfaces.\npublic interface MBeanInfoAssembler; // Interface to be implemented by all classes that can create management interface metadata for a managed resource.\npublic class MetadataMBeanInfoAssembler extends AbstractReflectiveMBeanInfoAssembler implements AutodetectCapableMBeanInfoAssembler, org.springframework.beans.factory.InitializingBean; // Implementation of the MBeanInfoAssembler interface that reads the management interface information from source level metadata.\npublic class MethodExclusionMBeanInfoAssembler extends AbstractConfigurableMBeanInfoAssembler; // AbstractReflectiveMBeanInfoAssembler subclass that allows method names to be explicitly excluded as MBean operations and attributes.\npublic class MethodNameBasedMBeanInfoAssembler extends AbstractConfigurableMBeanInfoAssembler; // Subclass of AbstractReflectiveMBeanInfoAssembler that allows to specify method names to be exposed as MBean operations and attributes.\npublic class SimpleReflectiveMBeanInfoAssembler extends AbstractConfigurableMBeanInfoAssembler; // Simple subclass of AbstractReflectiveMBeanInfoAssembler that always votes yes for method and property inclusion, effectively exposing all public methods and properties as operations and attributes.\n", "des": "Provides a strategy for MBeanInfo assembly."}
{"index": 3716, "repo": "solr-core-9.3.0", "code": "Package: util\n\nSub Packages: \npackage util.circuitbreaker; // Support for triggering exceptions on excessive resource usage\npackage util.configuration; // Common Util APIs related to Solr configuration.\npackage util.hll; // A fork of Java-HyperLogLog package tweaked not to depend on fastutil and with cleanups to make it lean and clean.\npackage util.plugin; // Common APIs related to implementing Solr plugins\npackage util.stats; // Utilities for collecting statistics\npackage util.tracing; // Tracing related utilities\npackage util.vector; // Utilities for dense vector search\n\nClasses and Interfaces: \nInterface ConcurrentLRUCache.EvictionListener<K,​V>;\nInterface DynamicMap; // An efficient map for storing keys as integer in range from 0..n with n can be estimated up-front.\nInterface FloatConsumer; // Represents an operation that accepts a single float-valued argument and returns no result.\nInterface IOFunction<T,​R>; // A Function that may throw an IOException\nInterface LongIterator; // A long-based iterator.\nInterface RTimer.TimerImpl;\nInterface TestInjection.Hook;\nClass AdjustableSemaphore;\nClass BoundedTreeSet<E>; // A TreeSet that ensures it never grows beyond a max size.\nClass ConcurrentLRUCache<K,​V>; // A LRU cache implementation based upon ConcurrentHashMap and other techniques to reduce contention and synchronization overhead to utilize multiple CPU cores more effectively.\nClass ConcurrentLRUCache.CacheEntry<K,​V>;\nClass ConcurrentLRUCache.Stats;\nClass CryptoKeys; // A utility class with helpers for various signature and certificate tasks\nClass CryptoKeys.RSAKeyPair;\nClass DataConfigNode; // ConfigNode impl that copies and maintains data internally from DOM\nClass DateMathParser; // A Simple Utility class for parsing \"math\" like strings relating to Dates.\nClass DistanceUnits; // Used with a spatial field type for all distance measurements.\nClass DOMConfigNode; // Read using DOM\nClass FileUtils;\nClass IdUtils; // Helper class for generating unique ID-s.\nClass IntFloatDynamicMap;\nClass IntIntDynamicMap;\nClass IntLongDynamicMap;\nClass JmxUtil; // Utility methods to find a MBeanServer.\n", "des": "Common utility classes used throughout Solr"}
{"index": 3452, "repo": "hibernate-core-5.6.15.Final", "code": "Package: profile\n\nClasses and Interfaces: \nClass Association; // Models the association of a given fetch.\nClass Fetch; // Models an individual fetch within a profile.\nClass FetchProfile; // A 'fetch profile' allows a user to dynamically modify the fetching strategy used for particular associations at runtime, whereas that information was historically only statically defined in the metadata.\nEnum Fetch.Style; // The type or style of fetch.\n", "des": "Models the fetch profiles defined by the application"}
{"index": 1708, "repo": "spring-boot-test-3.1.1", "code": "Package: context\n\nSub Packages: \npackage context.assertj; // AssertJ support for ApplicationContexts.\npackage context.runner; // Test utilities to run application contexts for testing.\n\nClasses and Interfaces: \npublic final class AnnotatedClassFinder extends Object; // Utility class to find a class annotated with a particular annotation in a hierarchy.\npublic class ConfigDataApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>; // ApplicationContextInitializer that can be used with the ContextConfiguration.initializers() to trigger loading of ConfigData such as application.properties.\n@FunctionalInterface @Deprecated(since=\"3.0.0\", forRemoval=true) public interface DefaultTestExecutionListenersPostProcessor;\npublic class FilteredClassLoader extends URLClassLoader implements org.springframework.core.SmartClassLoader; // Test URLClassLoader that can filter the classes and resources it can load.\npublic static final class FilteredClassLoader.ClassFilter extends Object implements Predicate<String>; // Filter to restrict the classes that can be loaded.\npublic static final class FilteredClassLoader.ClassPathResourceFilter extends Object implements Predicate<String>; // Filter to restrict the resources that can be loaded.\npublic static final class FilteredClassLoader.PackageFilter extends Object implements Predicate<String>; // Filter to restrict the packages that can be loaded.\npublic class ReactiveWebMergedContextConfiguration extends org.springframework.test.context.MergedContextConfiguration; // Encapsulates the merged context configuration declared on a test class and all of its superclasses for a reactive web application.\npublic class SpringBootContextLoader extends org.springframework.test.context.support.AbstractContextLoader implements org.springframework.test.context.aot.AotContextLoader; // A ContextLoader that can be used to test Spring Boot applications (those that normally startup using SpringApplication).\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @BootstrapWith(SpringBootTestContextBootstrapper.class) @ExtendWith(org.springframework.test.context.junit.jupiter.SpringExtension.class) public @interface SpringBootTest; // Annotation that can be specified on a test class that runs Spring Boot based tests.\n", "des": "Classes and annotations related to configuring Spring's ApplicationContext for tests."}
{"index": 2673, "repo": "spring-r2dbc-6.0.11", "code": "Package: init\n\nClasses and Interfaces: \npublic class CannotReadScriptException extends ScriptException; // Thrown by ScriptUtils if an SQL script cannot be read.\npublic class CompositeDatabasePopulator extends Object implements DatabasePopulator; // Composite DatabasePopulator that delegates to a list of given DatabasePopulator implementations, executing all scripts.\npublic class ConnectionFactoryInitializer extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Used to set up a database during initialization and clean up a database during destruction.\n@FunctionalInterface public interface DatabasePopulator; // Strategy used to populate, initialize, or clean up a database.\npublic class ResourceDatabasePopulator extends Object implements DatabasePopulator; // Populates, initializes, or cleans up a database using SQL scripts defined in external resources.\npublic abstract class ScriptException extends org.springframework.dao.DataAccessException; // Root of the hierarchy of data access exceptions that are related to processing of SQL scripts.\npublic class ScriptParseException extends ScriptException; // Thrown by ScriptUtils if an SQL script cannot be properly parsed.\npublic class ScriptStatementFailedException extends ScriptException; // Thrown by ScriptUtils if a statement in an SQL script failed when executing it against the target database.\npublic abstract class ScriptUtils extends Object; // Generic utility methods for working with SQL scripts in conjunction with R2DBC.\npublic class UncategorizedScriptException extends ScriptException; // Thrown when we cannot determine anything more specific than \"something went wrong while processing an SQL script\": for example, an R2dbcException from R2DBC that we cannot pinpoint more precisely.\n", "des": "Provides extensible support for initializing databases through scripts."}
{"index": 374, "repo": "calcite-linq4j-1.34.0", "code": "Package: function\n\nClasses and Interfaces: \nInterface BigDecimalFunction1<T0>; // Function that takes one parameter and returns a BigDecimal value.\nInterface DoubleFunction1<T0>; // Function that takes one parameter and returns a native double value.\nInterface EqualityComparer<T>; // Compares values for equality.\nInterface FloatFunction1<T0>; // Function that takes one parameter and returns a native float value.\nInterface Function<R>; // Base interface for all functions.\nInterface Function0<R>; // Function with no parameters.\nInterface Function1<T0,R>; // Function with one parameter.\nInterface Function2<T0,T1,R>; // Function with two parameters.\nInterface IntegerFunction1<T0>; // Function that takes one parameter and returns a native int value.\nInterface LongFunction1<T0>; // Function that takes one parameter and returns a native long value.\nInterface NullableBigDecimalFunction1<T0>; // Function that takes one parameter and returns a BigDecimal value that may be null.\nInterface NullableDoubleFunction1<T0>; // Function that takes one parameter and returns a Double value that may be null.\nInterface NullableFloatFunction1<T0>; // Function that takes one parameter and returns a Float value that may be null.\nInterface NullableIntegerFunction1<T0>; // Function that takes one parameter and returns an Integer value that may be null.\nInterface NullableLongFunction1<T0>; // Function that takes one parameter and returns a Long value that may be null.\nInterface Predicate1<T0>; // Function with one parameter returning a native boolean value.\nInterface Predicate2<T0,T1>; // Function with two parameters returning a native boolean value.\nClass Functions; // Utilities relating to functions.\nAnnotation Type Deterministic; // Specifies that function is deterministic (i.e.\nAnnotation Type Experimental; // Annotation that indicates that a class, interface, field or method is experimental, not part of the public API, and subject to change or removal.\nAnnotation Type Hints; // Annotation applied to a user-defined function that gives extra metadata about that function.\nAnnotation Type NonDeterministic; // Specifies that function is NOT deterministic (i.e.\nAnnotation Type Parameter; // Annotation that supplies metadata about a function parameter.\n", "des": "Contains definitions of functions and predicates."}
{"index": 3720, "repo": "solr-core-9.3.0", "code": "Package: hll\n\nClasses and Interfaces: \nInterface ISchemaVersion; // A serialization schema for HLLs.\nInterface IWordDeserializer; // Reads 'words' of a fixed width, in sequence, from a byte array.\nClass HLL; // A probabilistic set of hashed long elements.\nEnum HLLType; // The types of algorithm/data structure that HLL can utilize.\n", "des": "A fork of Java-HyperLogLog package tweaked not to depend on fastutil and with cleanups to make it lean and clean."}
{"index": 589, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: log\n\nClasses and Interfaces: \nInterface FrameworkLog; // The FramworkLog interface.\nClass FrameworkLogEntry; // A framework log entry used to log information to a FrameworkLog\n", "des": "Provides the FrameworkLog service."}
{"index": 2867, "repo": "spring-integration-core-6.1.2", "code": "Package: json\n\nClasses and Interfaces: \npublic class JsonNodeWrapperToJsonNodeConverter extends Object implements org.springframework.core.convert.converter.GenericConverter; // The Converter implementation for the conversion of JsonPropertyAccessor.JsonNodeWrapper to JsonNode, when the JsonPropertyAccessor.JsonNodeWrapper can be a result of the expression for JSON in case of the JsonPropertyAccessor usage.\npublic final class JsonPathUtils extends Object; // Utility class to JsonPathUtils.evaluate(java.lang.Object, java.lang.String, com.jayway.jsonpath.Predicate...) a jsonPath on the provided object.\npublic class JsonPropertyAccessor extends Object implements org.springframework.expression.PropertyAccessor; // A SpEL PropertyAccessor that knows how to read properties from JSON objects.\npublic class JsonToObjectTransformer extends AbstractTransformer implements org.springframework.beans.factory.BeanClassLoaderAware; // Transformer implementation that converts a JSON string payload into an instance of the provided target Class.\npublic class ObjectToJsonTransformer extends AbstractTransformer; // Transformer implementation that converts a payload instance into a JSON string representation.\npublic static enum ObjectToJsonTransformer.ResultType extends Enum<ObjectToJsonTransformer.ResultType>;\npublic final class SimpleJsonSerializer extends Object; // Extremely simple JSON serializer.\n", "des": "Provides classes supporting JSON in Spring Integration."}
{"index": 2080, "repo": "spring-webmvc-6.0.11", "code": "Package: theme\n\nClasses and Interfaces: \n@Deprecated(since=\"6.0\") public abstract class AbstractThemeResolver extends Object implements ThemeResolver;\n@Deprecated(since=\"6.0\") public class CookieThemeResolver extends org.springframework.web.util.CookieGenerator implements ThemeResolver;\n@Deprecated(since=\"6.0\") public class FixedThemeResolver extends AbstractThemeResolver;\n@Deprecated(since=\"6.0\") public class SessionThemeResolver extends AbstractThemeResolver;\n@Deprecated(since=\"6.0\") public class ThemeChangeInterceptor extends Object implements HandlerInterceptor;\n", "des": "Theme support classes for Spring's web MVC framework."}
{"index": 3176, "repo": "tomcat-api-10.1", "code": "Package: ssi\n\nClasses and Interfaces: \nInterface SSICommand; // The interface that all SSI commands ( SSIEcho, SSIInclude, ...) must implement.\nInterface SSIExternalResolver; // Interface used by SSIMediator to talk to the 'outside world' ( usually a servlet )\nClass ByteArrayServletOutputStream; // Class that extends ServletOutputStream, used as a wrapper from within SsiInclude\nClass ExpressionParseTree; // Represents a parsed expression.\nClass ExpressionTokenizer; // Parses an expression string to return the individual tokens.\nClass ResponseIncludeWrapper; // An HttpServletResponseWrapper, used from SSIServletExternalResolver\nClass SSIConditional; // SSI command that handles all conditional directives.\nClass SSIConfig; // Implements the Server-side #exec command\nClass SSIEcho; // Return the result associated with the supplied Server Variable.\nClass SSIExec; // Implements the Server-side #exec command\nClass SSIFilter; // Filter to process SSI requests within a webpage.\nClass SSIFlastmod; // Implements the Server-side #flastmod command\nClass SSIFsize; // Implements the Server-side #fsize command\nClass SSIInclude; // Implements the Server-side #include command\nClass SSIMediator; // Allows the different SSICommand implementations to share data/talk to each other\nClass SSIPrintenv; // Implements the Server-side #printenv command\nClass SSIProcessor; // The entry point to SSI processing.\nClass SSIServlet; // Servlet to process SSI requests within a webpage.\nClass SSIServletExternalResolver; // An implementation of SSIExternalResolver that is used with servlets.\nClass SSIServletExternalResolver.ServletContextAndPath;\nClass SSIServletRequestUtil;\nClass SSISet; // Implements the Server-side #set command\nClass SSIStopProcessingException; // Exception used to tell SSIProcessor that it should stop processing SSI commands.\n", "des": "This package contains code that is used by the SsiInvoker."}
{"index": 1223, "repo": "commons-text-1.10.0", "code": "Package: similarity\n\nClasses and Interfaces: \nInterface EditDistance<R>; // Interface for Edit Distances.\nInterface SimilarityScore<R>; // Interface for the concept of a string similarity score.\nClass CosineDistance; // Measures the cosine distance between two character sequences.\nClass CosineSimilarity; // Measures the Cosine similarity of two vectors of an inner product space and compares the angle between them.\nClass EditDistanceFrom<R>; // This stores a EditDistance implementation and a CharSequence \"left\" string.\nClass FuzzyScore; // A matching algorithm that is similar to the searching algorithms implemented in editors such as Sublime Text, TextMate, Atom and others.\nClass HammingDistance; // The hamming distance between two strings of equal length is the number of positions at which the corresponding symbols are different.\nClass IntersectionResult; // Represents the intersection result between two sets.\nClass IntersectionSimilarity<T>; // Measures the intersection of two sets created from a pair of character sequences.\nClass JaccardDistance; // Measures the Jaccard distance of two sets of character sequence.\nClass JaccardSimilarity; // Measures the Jaccard similarity (aka Jaccard index) of two sets of character sequence.\nClass JaroWinklerDistance; // Measures the Jaro-Winkler distance of two character sequences.\nClass JaroWinklerSimilarity; // A similarity algorithm indicating the percentage of matched characters between two character sequences.\nClass LevenshteinDetailedDistance; // An algorithm for measuring the difference between two character sequences.\nClass LevenshteinDistance; // An algorithm for measuring the difference between two character sequences.\nClass LevenshteinResults; // Container class to store Levenshtein distance between two character sequences.\nClass LongestCommonSubsequence; // A similarity algorithm indicating the length of the longest common subsequence between two strings.\nClass LongestCommonSubsequenceDistance; // An edit distance algorithm based on the length of the longest common subsequence between two strings.\nClass SimilarityScoreFrom<R>; // This stores a SimilarityScore implementation and a CharSequence \"left\" string.\n", "des": "Provides algorithms for string similarity."}
{"index": 894, "repo": "commons-jcs3-core-3.1", "code": "Package: lateral\n\nClasses and Interfaces: \nClass LateralCache<K,V>; // Lateral distributor.\nClass LateralCacheAttributes; // This class stores attributes for all of the available lateral cache auxiliaries.\nClass LateralCacheMonitor; // Used to monitor and repair any failed connection for the lateral cache service.\nClass LateralCacheNoWait<K,V>; // Used to queue up update requests to the underlying cache.\nClass LateralCacheNoWaitFacade<K,V>; // Used to provide access to multiple services under nowait protection.\nClass LateralElementDescriptor<K,V>; // This class wraps command to other laterals.\nEnum LateralCommand; // Enumeration of the available lateral commands\n", "des": "Root package for the lateral cache family."}
{"index": 3777, "repo": "lucene-analysis-common-9.7.0", "code": "Package: de\n\nClasses and Interfaces: \nClass GermanAnalyzer; // Analyzer for German language.\nClass GermanLightStemFilter; // A TokenFilter that applies GermanLightStemmer to stem German words.\nClass GermanLightStemFilterFactory; // Factory for GermanLightStemFilter.\nClass GermanLightStemmer; // Light Stemmer for German.\nClass GermanMinimalStemFilter; // A TokenFilter that applies GermanMinimalStemmer to stem German words.\nClass GermanMinimalStemFilterFactory; // Factory for GermanMinimalStemFilter.\nClass GermanMinimalStemmer; // Minimal Stemmer for German.\nClass GermanNormalizationFilter; // Normalizes German characters according to the heuristics of the German2 snowball algorithm.\nClass GermanNormalizationFilterFactory; // Factory for GermanNormalizationFilter.\nClass GermanStemFilter; // A TokenFilter that stems German words.\nClass GermanStemFilterFactory; // Factory for GermanStemFilter.\nClass GermanStemmer; // A stemmer for German words.\n", "des": "Analyzer for German."}
{"index": 3691, "repo": "solr-core-9.3.0", "code": "Package: distance\n\nClasses and Interfaces: \nClass GeoDistValueSourceParser; // Parses \"geodist\" creating HaversineConstFunction or HaversineFunction or calling SpatialStrategy.makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double).\nClass GeohashFunction;\nClass GeohashHaversineFunction;\nClass HaversineConstFunction; // Haversine function with one point constant\nClass HaversineFunction; // Calculate the Haversine formula (distance) between any two points on a sphere Takes in four value sources: (latA, lonA); (latB, lonB).\nClass SquaredEuclideanFunction; // While not strictly a distance, the Sq.\nClass StringDistanceFunction;\nClass VectorDistanceFunction; // Calculate the p-norm for a Vector.\n", "des": "Solr implementations of ValueSource for distance based function queries."}
{"index": 1867, "repo": "spring-security-cas-6.1.2", "code": "Package: authentication\n\nClasses and Interfaces: \npublic final class CasAssertionAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // Temporary authentication object needed to load the user details service.\npublic class CasAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider, org.springframework.beans.factory.InitializingBean, org.springframework.context.MessageSourceAware; // An AuthenticationProvider implementation that integrates with JA-SIG Central Authentication Service (CAS).\npublic class CasAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken implements Serializable; // Represents a successful CAS Authentication.\npublic class CasServiceTicketAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // An Authentication implementation that is designed to process CAS service ticket.\npublic final class NullStatelessTicketCache extends Object implements StatelessTicketCache; // Implementation of @link StatelessTicketCache that has no backing cache.\npublic class SpringCacheBasedTicketCache extends Object implements StatelessTicketCache; // Caches tickets using a Spring IoC defined Cache.\npublic interface StatelessTicketCache; // Caches CAS service tickets and CAS proxy tickets for stateless connections.\n", "des": "An AuthenticationProvider that can process CAS service tickets and proxy tickets."}
{"index": 1176, "repo": "commons-math3-3.6.1", "code": "Package: distance\n\nClasses and Interfaces: \nInterface DistanceMeasure; // Interface for distance measures of n-dimensional vectors.\nClass CanberraDistance; // Calculates the Canberra distance between two points.\nClass ChebyshevDistance; // Calculates the L∞ (max of abs) distance between two points.\nClass EarthMoversDistance; // Calculates the Earh Mover's distance (also known as Wasserstein metric) between two distributions.\nClass EuclideanDistance; // Calculates the L2 (Euclidean) distance between two points.\nClass ManhattanDistance; // Calculates the L1 (sum of abs) distance between two points.\n", "des": "Common distance measures."}
{"index": 3668, "repo": "solr-core-9.3.0", "code": "Package: logging\n\nSub Packages: \npackage logging.jul; // JUL based implementation of LogWatcher\npackage logging.log4j2; // LOG4J2 based implementation of LogWatcher\n\nClasses and Interfaces: \nClass CircularList<T>; // FIFO Circular List.\nClass DeprecationLog; // Utility to log a deprecation.\nClass ListenerConfig;\nClass LoggerInfo; // Wrapper class for Logger implementations\nClass LogWatcher<E>; // A Class to monitor Logging events and hold N events in memory\nClass LogWatcherConfig; // Defines the configuration of a LogWatcher\nClass MDCLoggingContext; // Set's per thread context info for logging.\nClass MDCSnapshot; // Takes a 'snapshot' of the current MDC context map which is restored on (auto) close.\n", "des": "APIs related to capturing log event info in the LoggingHandler"}
{"index": 1245, "repo": "spring-integration-smb-6.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic class SmbInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileInboundChannelAdapterParser; // Parser for the SMB 'inbound-channel-adapter' element.\npublic class SmbNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Provides namespace support for using SMB.\npublic class SmbOutboundChannelAdapterParser extends org.springframework.integration.file.config.RemoteFileOutboundChannelAdapterParser; // The parser for <Int-smb:outbound-channel-adapter>.\npublic class SmbOutboundGatewayParser extends org.springframework.integration.file.config.AbstractRemoteFileOutboundGatewayParser; // Parser for the SMB 'outbound-gateway' element.\npublic class SmbStreamingInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileStreamingInboundChannelAdapterParser; // Parser for the SMB 'inbound-streaming-channel-adapter' element.\n", "des": "SMB-specific file list filter classes."}
{"index": 3360, "repo": "opencms-core-15.0", "code": "Package: util\n\nClasses and Interfaces: \nInterface I_CmsCloseable; // Closeable interface that throws no exceptions.\nInterface I_CmsHtmlConverter; // HTML converters can be used to clean up HTML code and/or pretty print the code.\nInterface I_CmsHtmlNodeVisitor; // Interface for a combination of a visitor of HTML documents along with the hook to start the parser / lexer that triggers the visit.\nInterface I_CmsMacroResolver; // Describes a macro mapper, which is used to efficiently resolve macros in the form of %(key) or ${key} in an input String.\nInterface I_CmsRegexSubstitution; // Interface for generating a substitution for a pattern in a string.\nClass A_CmsHtmlConverter;\nClass A_CmsModeIntEnumeration; // Base class for all integer mode enumeration classes.\nClass A_CmsModeStringEnumeration; // Base class for all string mode enumeration classes.\nClass CmsByteArrayDataSource; // A DataSource backed by a byte array.\nClass CmsCollectionsGenericWrapper; // Provides Map wrapping utility functions for Java generics.\nClass CmsCollectionsGenericWrapper.MapWrapper<K,​V>; // Wrapper for lazy maps providing a better containsKey implementation.\nClass CmsConstantMap<K,​V>; // Returns the constant Object the map was initialized with for all CmsConstantMap.get(Object) calls, regardless of what the actual key is.\nClass CmsDataTypeUtil; // Utilities to handle basic data types.\nClass CmsDateUtil; // Utilities to get and set formated dates in OpenCms.\nClass CmsDefaultSet<T>; // A utility class used for keeping track of a set of objects.\nClass CmsExpiringValue<T>; // Simple utility class for caching a single value with a given cache expiration time.\nClass CmsFileUtil; // Provides File utility functions.\nClass CmsFileUtil.FileWalkState; // Data bean which walkFileSystem passes to its callback.\nClass CmsGeoUtil; // Utility methods for processing geo coordinates.\nClass CmsHtml2TextConverter; // Extracts the HTML page content.\nClass CmsHtmlConverter; // HTML cleaner and pretty printer.\nClass CmsHtmlConverterJTidy; // HTML cleaner and pretty printer using JTidy.\nClass CmsHtmlConverterOption; // Represents a single HTML converter configuration as defined in the OpenCms configuration file opencms-vfs.xml.\n", "des": "Utility functions for String manipulation and other often used tasks."}
{"index": 2580, "repo": "camel-api-4.0.0-RC1", "code": "Package: annotations\n\nClasses and Interfaces: \n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"cloud\") public @interface CloudServiceFactory;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"component\") public @interface Component;\n@Retention(RUNTIME) @Documented @Target(TYPE) public @interface ConstantProvider; // Internal annotation to mark a class as having constant fields for the source code generator.\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"dataformat\") public @interface Dataformat;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"dev-console\") public @interface DevConsole; // Marks a class as a custom developer console.\n@Target(FIELD) @Retention(RUNTIME) public @interface DslProperty; // Internal annotation used to include fields otherwise excluded because annotate with XmlTransient.\n@Retention(RUNTIME) @Documented @Target({METHOD,FIELD}) public @interface ExternalSchemaElement; // Annotation to be used for JAXB property (field or method) annotated with @XmlAnyElement to highlight which actual elements do we expect (not to be enforced by JAXB, but by Camel itself).\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"health-check\") public @interface HealthCheck; // Marks a class as a custom health-check or health-check repository.\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"#jdk#\") public @interface JdkService;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"language\") public @interface Language;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"periodic-task\") public @interface PeriodicTask;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"properties-function\") public @interface PropertiesFunction;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"resource-resolver\") public @interface ResourceResolver;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"routes-loader\") public @interface RoutesLoader;\n", "des": "SPI annotations for plugins"}
{"index": 1811, "repo": "spring-aop-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \npublic class AnnotationClassFilter extends Object implements ClassFilter; // Simple ClassFilter that looks for a specific annotation being present on a class.\npublic class AnnotationMatchingPointcut extends Object implements Pointcut; // Simple Pointcut that looks for a specific annotation being present on a class or method.\npublic class AnnotationMethodMatcher extends StaticMethodMatcher; // Simple MethodMatcher that looks for a specific annotation being present on a method (checking both the method on the invoked interface, if any, and the corresponding method on the target class).\n", "des": "Annotation support for AOP pointcuts."}
{"index": 560, "repo": "hadoop-common-3.3.4", "code": "Package: serializer\n\nSub Packages: \npackage serializer.avro; // This package provides Avro serialization in Hadoop.\n\nClasses and Interfaces: \nClass JavaSerialization; // An experimental Serialization for Java Serializable classes.\nClass JavaSerializationComparator<T extends Serializable & Comparable<T>>; // A RawComparator that uses a JavaSerialization Deserializer to deserialize objects that are then compared via their Comparable interfaces.\nClass WritableSerialization; // A Serialization for Writables that delegates to Writable.write(java.io.DataOutput) and Writable.readFields(java.io.DataInput).\n", "des": "This package provides a mechanism for using different serialization frameworks in Hadoop."}
{"index": 3419, "repo": "gremlin-core-3.6.4", "code": "Package: kryoshim\n\nSub Packages: \npackage kryoshim.shaded; // Implementations of the interfaces in org.apache.tinkerpop.gremlin.structure.io.gryo.kryoshim using TinkerPop's shaded copy of Kryo.\n\nClasses and Interfaces: \nInterface InputShim; // A minimal Input-like abstraction.\nInterface KryoShim<I extends InputShim,​O extends OutputShim>; // A minimal Kryo-like abstraction.\nInterface KryoShimService; // This interface exists to decouple HadoopPools from TinkerPop's shaded Kryo.\nInterface OutputShim; // A minimal Output-like abstraction.\nInterface SerializerShim<T>; // A minimal Serializer-like abstraction.\nClass KryoShimServiceLoader; // Loads the highest-priority or user-selected KryoShimService.\n", "des": "Abstracts a minimal subset of Kryo types and methods."}
{"index": 1806, "repo": "spring-aop-6.0.11", "code": "Package: autoproxy\n\nSub Packages: \npackage autoproxy.target; // Various TargetSourceCreator implementations for use with Spring's AOP auto-proxying support.\n\nClasses and Interfaces: \npublic abstract class AbstractAdvisorAutoProxyCreator extends AbstractAutoProxyCreator; // Generic auto proxy creator that builds AOP proxies for specific beans based on detected Advisors for each bean.\npublic abstract class AbstractAutoProxyCreator extends ProxyProcessorSupport implements org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor, org.springframework.beans.factory.BeanFactoryAware; // BeanPostProcessor implementation that wraps each eligible bean with an AOP proxy, delegating to specified interceptors before invoking the bean itself.\npublic abstract class AbstractBeanFactoryAwareAdvisingPostProcessor extends AbstractAdvisingBeanPostProcessor implements org.springframework.beans.factory.BeanFactoryAware; // Extension of AbstractAutoProxyCreator which implements BeanFactoryAware, adds exposure of the original target class for each proxied bean (AutoProxyUtils.ORIGINAL_TARGET_CLASS_ATTRIBUTE), and participates in an externally enforced target-class mode for any given bean (AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE).\npublic abstract class AutoProxyUtils extends Object; // Utilities for auto-proxy aware components.\npublic class BeanFactoryAdvisorRetrievalHelper extends Object; // Helper for retrieving standard Spring Advisors from a BeanFactory, for use with auto-proxying.\npublic class BeanNameAutoProxyCreator extends AbstractAutoProxyCreator; // Auto proxy creator that identifies beans to proxy via a list of names.\npublic class DefaultAdvisorAutoProxyCreator extends AbstractAdvisorAutoProxyCreator implements org.springframework.beans.factory.BeanNameAware; // BeanPostProcessor implementation that creates AOP proxies based on all candidate Advisors in the current BeanFactory.\npublic class InfrastructureAdvisorAutoProxyCreator extends AbstractAdvisorAutoProxyCreator; // Auto-proxy creator that considers infrastructure Advisor beans only, ignoring any application-defined Advisors.\npublic final class ProxyCreationContext extends Object; // Holder for the current proxy creation context, as exposed by auto-proxy creators such as AbstractAdvisorAutoProxyCreator.\n", "des": "Bean post-processors for use in ApplicationContexts to simplify AOP usage by automatically creating AOP proxies without the need to use a ProxyFactoryBean."}
{"index": 828, "repo": "calcite-core-1.34.0", "code": "Package: config\n\nClasses and Interfaces: \nInterface CalciteConnectionConfig; // Interface for reading connection properties within Calcite code.\nClass CalciteConnectionConfigImpl; // Implementation of CalciteConnectionConfig.\nClass CalciteSystemProperty<T>; // A Calcite specific system property that is used to configure various aspects of the framework.\nEnum CalciteConnectionProperty; // Properties that may be specified on the JDBC connect string.\nEnum CharLiteralStyle; // Styles of character literal.\nEnum Lex; // Named, built-in lexical policy.\nEnum NullCollation; // Strategy for how NULL values are to be sorted if NULLS FIRST or NULLS LAST are not specified in an item in the ORDER BY clause.\n", "des": "Configuration."}
{"index": 1089, "repo": "graal-sdk-1.0.0-rc7", "code": "Package: word\n\nClasses and Interfaces: \nInterface ComparableWord; // A machine-word-sized value that can be compared for equality.\nInterface Pointer; // Lowest-level memory access of native C memory.\nInterface PointerBase; // Marker interface for all word types that have the semantic of a pointer (but not necessarily all the memory access methods defined in Pointer).\nInterface SignedWord; // Represents a signed word-sized value.\nInterface UnsignedWord; // Represents an unsigned word-sized value.\nInterface WordBase; // The root of the interface hierarchy for machine-word-sized values.\nClass LocationIdentity; // Marker interface for location identities.\nClass WordFactory; // Provides factory method to create machine-word-sized values.\n", "des": "This package provides a low-level mechanism to use machine-word-sized values in Java."}
{"index": 1502, "repo": "spring-context-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \n@Configuration(proxyBeanMethods=false) public abstract class AbstractCachingConfiguration extends Object implements ImportAware; // Abstract base @Configuration class providing common structure for enabling Spring's annotation-driven cache management capability.\nprotected static class AbstractCachingConfiguration.CachingConfigurerSupplier extends Object;\npublic class AnnotationCacheOperationSource extends AbstractFallbackCacheOperationSource implements Serializable; // Implementation of the CacheOperationSource interface for working with caching metadata in annotation format.\n@FunctionalInterface protected static interface AnnotationCacheOperationSource.CacheOperationProvider; // Callback interface providing CacheOperation instance(s) based on a given CacheAnnotationParser.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Inherited @Documented @Reflective public @interface Cacheable; // Annotation indicating that the result of invoking a method (or all methods in a class) can be cached.\npublic interface CacheAnnotationParser; // Strategy interface for parsing known caching annotation types.\n@Target(TYPE) @Retention(RUNTIME) @Documented public @interface CacheConfig; // @CacheConfig provides a mechanism for sharing common cache-related settings at the class level.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Inherited @Documented @Reflective public @interface CacheEvict; // Annotation indicating that a method (or all methods on a class) triggers a cache evict operation.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Inherited @Documented @Reflective public @interface CachePut; // Annotation indicating that a method (or all methods on a class) triggers a cache put operation.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Inherited @Documented @Reflective public @interface Caching; // Group annotation for multiple cache annotations (of different or the same type).\npublic class CachingConfigurationSelector extends AdviceModeImportSelector<EnableCaching>; // Selects which implementation of AbstractCachingConfiguration should be used based on the value of EnableCaching.mode() on the importing @Configuration class.\npublic interface CachingConfigurer; // Interface to be implemented by @Configuration classes annotated with @EnableCaching that wish or need to specify explicitly how caches are resolved and how keys are generated for annotation-driven cache management.\n@Deprecated(since=\"6.0\") public class CachingConfigurerSupport extends Object implements CachingConfigurer;\n", "des": "Annotations and supporting classes for declarative cache management."}
{"index": 2557, "repo": "pulsar-common-3.0.0", "code": "Package: nar\n\nClasses and Interfaces: \npublic class FileUtils extends Object; // A utility class containing a few useful static methods to do typical IO operations.\npublic class NarClassLoader extends URLClassLoader; // A ClassLoader for loading NARs (NiFi archives).\npublic class NarClassLoaderBuilder extends Object; // NarClassLoader builder class.\npublic class NarUnpacker extends Object; // Helper class to unpack NARs.\n", "des": "Classes to work with NARs."}
{"index": 2064, "repo": "spring-webmvc-6.0.11", "code": "Package: config\n\nSub Packages: \npackage config.annotation; // Annotation-based setup for Spring MVC.\n\nClasses and Interfaces: \npublic class CorsBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // BeanDefinitionParser that parses a cors element in order to set the CORS configuration in the various {AbstractHandlerMapping} beans created by AnnotationDrivenBeanDefinitionParser, ResourcesBeanDefinitionParser and ViewControllerBeanDefinitionParser.\npublic class FreeMarkerConfigurerBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parse the <mvc:freemarker-configurer> MVC namespace element and register FreeMarkerConfigurer bean.\npublic class GroovyMarkupConfigurerBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser; // Parse the <mvc:groovy-configurer> MVC namespace element and register a GroovyConfigurer bean.\npublic class MvcNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for Spring MVC configuration namespace.\npublic abstract class MvcNamespaceUtils extends Object; // Convenience methods for use in MVC namespace BeanDefinitionParsers.\npublic class ScriptTemplateConfigurerBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser; // Parse the <mvc:script-template-configurer> MVC namespace element and register a ScriptTemplateConfigurer bean.\npublic class ViewResolversBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Parses the view-resolvers MVC namespace element and registers ViewResolver bean definitions.\n", "des": "Defines the XML configuration namespace for Spring MVC."}
{"index": 3508, "repo": "opennlp-tools-2.2.0", "code": "Package: chunker\n\nClasses and Interfaces: \nInterface Chunker; // The interface for chunkers which provide chunk tags for a sequence of tokens.\nInterface ChunkerContextGenerator; // Interface for a BeamSearchContextGenerator used in syntactic chunking.\nInterface ChunkerEvaluationMonitor; // A marker interface for evaluating chunkers.\nClass ChunkerCrossValidator; // Cross validator for Chunker.\nClass ChunkerEvaluator; // The ChunkerEvaluator measures the performance of the given Chunker with the provided reference samples.\nClass ChunkerEventStream; // Class for creating an event stream out of data files for training a Chunker.\nClass ChunkerFactory;\nClass ChunkerME; // The class represents a maximum-entropy-based Chunker.\nClass ChunkerModel; // The ChunkerModel is the model used by a learnable Chunker.\nClass ChunkSample; // Class for holding chunks for a single unit of text.\nClass ChunkSampleSequenceStream; // A SequenceStream implementation encapsulating samples.\nClass ChunkSampleStream; // Parses the conll 2000 shared task shallow parser training data.\nClass DefaultChunkerContextGenerator; // Features based on chunking model described in Fei Sha and Fernando Pereira.\nClass DefaultChunkerSequenceValidator; // The default chunker SequenceValidator implementation.\n", "des": "Package related to finding non-recursive syntactic annotation such as noun phrase chunks."}
{"index": 3594, "repo": "lucene-test-framework-9.7.0", "code": "Package: mockfile\n\nClasses and Interfaces: \nClass DisableFsyncFS; // Disables actual calls to fsync.\nClass ExtrasFS; // Adds extra files/subdirectories when directories are created.\nClass FilterAsynchronousFileChannel; // A FilterAsynchronousFileChannel contains another AsynchronousFileChannel, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterDirectoryStream; // A FilterDirectoryStream contains another DirectoryStream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterFileChannel; // A FilterFileChannel contains another FileChannel, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterFileStore; // A FilterFileStore contains another FileStore, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterFileSystem; // A FilterFileSystem contains another FileSystem, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterFileSystemProvider; // A FilterFileSystemProvider contains another FileSystemProvider, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterInputStream2; // A FilterInputStream2 contains another InputStream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterOutputStream2; // A FilterOutputStream2 contains another OutputStream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterPath; // A FilterPath contains another Path, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterSeekableByteChannel; // A FilterSeekableByteChannel contains another SeekableByteChannel, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass HandleLimitFS; // FileSystem that throws exception if file handles in use exceeds a specified limit.\nClass HandleTrackingFS; // Base class for tracking file handles.\nClass LeakFS; // FileSystem that tracks open handles.\nClass MockFileSystemTestCase; // Base class for testing mockfilesystems.\n", "des": "Support for testing/debugging with virtual filesystems"}
{"index": 971, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: saaj\n\nSub Packages: \npackage saaj.support; // Support classes for working with the SOAP with Attachments API for Java (SAAJ).\n\nClasses and Interfaces: \nClass SaajSoapMessage; // SAAJ-specific implementation of the SoapMessage interface.\nClass SaajSoapMessageFactory; // SAAJ-specific implementation of the WebServiceMessageFactory.\nClass SaajAttachmentException;\nClass SaajSoapBodyException;\nClass SaajSoapElementException;\nClass SaajSoapEnvelopeException;\nClass SaajSoapFaultException;\nClass SaajSoapHeaderException;\nClass SaajSoapMessageCreationException;\nClass SaajSoapMessageException;\n", "des": "SOAP with Attachments API for Java (SAAJ) support for Spring-WS soap message infrastructure."}
{"index": 794, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: nl\n\nClasses and Interfaces: \nClass DutchAnalyzer; // Analyzer for Dutch language.\n", "des": "Analyzer for Dutch."}
{"index": 101, "repo": "ignite-core-2.15.0", "code": "Package: jobstealing\n\nClasses and Interfaces: \nInterface JobStealingFailoverSpiMBean; // Management bean for JobStealingFailoverSpi.\nClass JobStealingFailoverSpi; // Job stealing failover SPI needs to always be used in conjunction with JobStealingCollisionSpi SPI.\n", "des": "Contains job stealing failover SPI."}
{"index": 735, "repo": "spring-data-solr-4.3.15", "code": "Package: mapping\n\nClasses and Interfaces: \nInterface SolrPersistentEntity<T>;\nInterface SolrPersistentProperty;\nClass SimpleSolrMappingContext; // Solr specific implementation of MappingContext\nClass SimpleSolrPersistentEntity<T>; // Solr specific PersistentEntity implementation holding eg. name of solr core.\nClass SimpleSolrPersistentProperty; // Solr specific PersistentProperty implementation processing taking Field into account\nClass SolrMappingEventPublisher;\nClass SolrSimpleTypes; // Set of type that do not need to be converted into a solr readable format\nEnum SolrPersistentProperty.PropertyToFieldNameConverter;\nAnnotation Type ChildDocument; // Marker interface for Apache Solr child document can be used as an alternative to Field.child().\nAnnotation Type Dynamic; // Declare a field as dynamic.\nAnnotation Type Indexed;\nAnnotation Type Score; // Defines the annotated field to store the score of a document within search result.\nAnnotation Type SolrDocument;\n", "des": "All the mapping things!"}
{"index": 2192, "repo": "spring-security-web-6.1.2", "code": "Package: servletapi\n\nClasses and Interfaces: \npublic class SecurityContextHolderAwareRequestFilter extends org.springframework.web.filter.GenericFilterBean; // A Filter which populates the ServletRequest with a request wrapper which implements the servlet API security methods.\npublic class SecurityContextHolderAwareRequestWrapper extends jakarta.servlet.http.HttpServletRequestWrapper; // A Spring Security-aware HttpServletRequestWrapper, which uses the SecurityContext-defined Authentication object to implement the servlet API security methods: SecurityContextHolderAwareRequestWrapper.getUserPrincipal() SecurityContextHolderAwareRequestWrapper.isUserInRole(String) HttpServletRequestWrapper.getRemoteUser().\n", "des": "Populates a Servlet request with a new Spring Security compliant HttpServletRequestWrapper."}
{"index": 2947, "repo": "spring-integration-xml-6.1.2", "code": "Package: xml\n\nSub Packages: \npackage xml.config; // Contains parser classes for the XML namespace support.\npackage xml.result; // Provides ResultFactory that will return Result, possibly taking into account payload instance.\npackage xml.router; // Provides XML message routers.\npackage xml.selector; // Provides XML-centric MessageSelector implementations.\npackage xml.source; // Provides various SourceFactory implementations.\npackage xml.splitter; // Provides implementations of AbstractMessageSplitter.\npackage xml.transformer; // Provides Transformer and Enricher implementations.\npackage xml.xpath; // Provides XPath supporting classes.\n\nClasses and Interfaces: \npublic class AggregatedXmlMessageValidationException extends RuntimeException; // The validation exception which aggregate all the XML validation errors.\npublic class DefaultXmlPayloadConverter extends Object implements XmlPayloadConverter; // Default implementation of XmlPayloadConverter.\npublic interface XmlPayloadConverter; // Converter for creating XML Document, Node or Source instances from other types (e.g.\n", "des": "Root package of the XML Module."}
{"index": 3041, "repo": "spring-web-6.0.11", "code": "Package: server\n\nSub Packages: \npackage server.adapter; // Implementations to adapt to the underlying org.springframework.http.client.reactive reactive HTTP adapter and HttpHandler.\npackage server.handler; // Provides common WebHandler implementations and a WebHandlerDecorator.\npackage server.i18n; // Locale related support classes.\npackage server.session; // Auxiliary interfaces and implementation classes for WebSession support.\n\nClasses and Interfaces: \npublic class MethodNotAllowedException extends ResponseStatusException; // Exception for errors that fit response status 405 (method not allowed).\npublic class MissingRequestValueException extends ServerWebInputException; // ServerWebInputException subclass that indicates a missing request value such as a request header, cookie value, query parameter, etc.\npublic class NotAcceptableStatusException extends ResponseStatusException; // Exception for errors that fit response status 406 (not acceptable).\npublic class ResponseStatusException extends ErrorResponseException; // Subclass of ErrorResponseException that accepts a \"reason\", and by default maps that to the \"detail\" of the ProblemDetail.\npublic class ServerErrorException extends ResponseStatusException; // Exception for an HttpStatus.INTERNAL_SERVER_ERROR that exposes extra information about a controller method that failed, or a controller method argument that could not be resolved.\npublic interface ServerWebExchange; // Contract for an HTTP request-response interaction.\npublic static interface ServerWebExchange.Builder; // Builder for mutating an existing ServerWebExchange.\npublic class ServerWebExchangeDecorator extends Object implements ServerWebExchange; // A convenient base class for classes that need to wrap another ServerWebExchange.\npublic class ServerWebInputException extends ResponseStatusException; // Exception for errors that fit response status 400 (bad request) for use in Spring Web applications.\npublic class UnsatisfiedRequestParameterException extends ServerWebInputException; // ServerWebInputException subclass that indicates an unsatisfied parameter condition, as typically expressed using an @RequestMapping annotation at the @Controller type level.\npublic class UnsupportedMediaTypeStatusException extends ResponseStatusException; // Exception for errors that fit response status 415 (unsupported media type).\npublic interface WebExceptionHandler; // Contract for handling exceptions during web server exchange processing.\npublic interface WebFilter; // Contract for interception-style, chained processing of Web requests that may be used to implement cross-cutting, application-agnostic requirements such as security, timeouts, and others.\n", "des": "Core interfaces and classes for Spring's generic, reactive web support."}
{"index": 695, "repo": "jackson-databind-2.15.2", "code": "Package: impl\n\nClasses and Interfaces: \nClass AttributePropertyWriter; // VirtualBeanPropertyWriter implementation used for JsonAppend, to serialize properties backed-by dynamically assignable attribute values.\nClass BeanAsArraySerializer; // Specialized POJO serializer that differs from BeanSerializer in that instead of producing a JSON Object it will output a JSON Array, omitting field names, and serializing values in specified serialization order.\nClass FailingSerializer; // Special bogus \"serializer\" that will throw JsonMappingException if its FailingSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) gets invoked.\nClass FilteredBeanPropertyWriter; // Decorated BeanPropertyWriter that will filter out properties that are not to be included in currently active JsonView.\nClass IndexedListSerializer; // This is an optimized serializer for Lists that can be efficiently traversed by index (as opposed to others, such as LinkedList that cannot}.\nClass IndexedStringListSerializer; // Efficient implement for serializing Lists that contains Strings and are random-accessible.\nClass IteratorSerializer;\nClass MapEntrySerializer;\nClass ObjectIdWriter; // Object that knows how to serialize Object Ids.\nClass PropertyBasedObjectIdGenerator;\nClass PropertySerializerMap; // Helper container used for resolving serializers for dynamic (possibly but not necessarily polymorphic) properties: properties whose type is not forced to use dynamic (declared) type and that are not final.\nClass PropertySerializerMap.SerializerAndMapResult; // Value class used for returning tuple that has both serializer that was retrieved and new map instance\nClass ReadOnlyClassToSerializerMap; // Optimized lookup table for accessing two types of serializers; typed and non-typed.\nClass SimpleBeanPropertyFilter; // Simple PropertyFilter implementation that only uses property name to determine whether to serialize property as is, or to filter it out.\nClass SimpleBeanPropertyFilter.FilterExceptFilter; // Filter implementation which defaults to filtering out unknown properties and only serializes ones explicitly listed.\nClass SimpleBeanPropertyFilter.SerializeExceptFilter; // Filter implementation which defaults to serializing all properties, except for ones explicitly listed to be filtered out.\nClass SimpleFilterProvider; // Simple FilterProvider implementation that just stores direct id-to-filter mapping.\nClass StringArraySerializer; // Standard serializer used for String[] values.\n", "des": "Contains implementation classes of serialization part of data binding."}
{"index": 3429, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface StrategyCreator<T>;\nInterface StrategySelector; // Service which acts as a registry for named strategy implementations.\nClass StrategySelectionException; // Indicates a problem performing the selection/resolution.\n", "des": "Defines actual contract used for strategy selection : StrategySelector."}
{"index": 2686, "repo": "spring-data-jpa-3.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic class AuditingBeanDefinitionParser extends Object implements BeanDefinitionParser; // BeanDefinitionParser for the auditing element.\n@Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.jpa.repository.config.JpaAuditingRegistrar.class) public @interface EnableJpaAuditing; // Annotation to enable auditing in JPA via annotation configuration.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(org.springframework.data.jpa.repository.config.JpaRepositoriesRegistrar.class) public @interface EnableJpaRepositories; // Annotation to enable JPA repositories.\npublic class JpaMetamodelMappingContextFactoryBean extends AbstractFactoryBean<JpaMetamodelMappingContext> implements ApplicationContextAware; // FactoryBean to setup JpaMetamodelMappingContext instances from Spring configuration.\npublic class JpaRepositoryConfigExtension extends RepositoryConfigurationExtensionSupport; // JPA specific configuration extension parsing custom attributes from the XML namespace and EnableJpaRepositories annotation.\npublic static class JpaRepositoryConfigExtension.JpaRepositoryRegistrationAotProcessor extends RepositoryRegistrationAotProcessor; // A RepositoryRegistrationAotProcessor implementation that maintains aot repository setup but skips domain type inspection which is handled by the core framework support for PersistenceManagedTypes.\npublic class JpaRepositoryNameSpaceHandler extends NamespaceHandlerSupport; // Simple namespace handler for repositories namespace.\n", "des": "Classes for JPA namespace configuration."}
{"index": 2658, "repo": "spring-data-cassandra-4.1.2", "code": "Package: mapping\n\nSub Packages: \npackage mapping.event; // Event callback infrastructure for Cassandra mapping subsystem.\n\nClasses and Interfaces: \n@Deprecated public class BasicCassandraMappingContext extends CassandraMappingContext;\npublic class BasicCassandraPersistentEntity<T> extends BasicPersistentEntity<T,CassandraPersistentProperty> implements CassandraPersistentEntity<T>, ApplicationContextAware; // Cassandra specific BasicPersistentEntity implementation that adds Cassandra specific metadata.\npublic class BasicCassandraPersistentEntityMetadataVerifier extends Object implements CassandraPersistentEntityMetadataVerifier; // Default implementation for Cassandra Persistent Entity Verification.\npublic class BasicCassandraPersistentProperty extends AnnotationBasedPersistentProperty<CassandraPersistentProperty> implements CassandraPersistentProperty, ApplicationContextAware; // Cassandra specific AnnotationBasedPersistentProperty implementation.\npublic class BasicCassandraPersistentTupleEntity<T> extends BasicCassandraPersistentEntity<T>; // Cassandra Tuple-specific PersistentEntity for a mapped tuples.\npublic class BasicCassandraPersistentTupleProperty extends BasicCassandraPersistentProperty; // Cassandra Tuple specific CassandraPersistentProperty implementation.\npublic class BasicMapId extends Object implements MapId; // Simple implementation of MapId.\npublic class CachingCassandraPersistentProperty extends BasicCassandraPersistentProperty; // BasicCassandraPersistentProperty that pre-computes primary key and embedded flags.\n@Deprecated public enum CassandraColumnAnnotationComparator extends Enum<CassandraColumnAnnotationComparator> implements Comparator<Column>;\npublic class CassandraMappingContext extends AbstractMappingContext<BasicCassandraPersistentEntity<?>,CassandraPersistentProperty> implements ApplicationContextAware, BeanClassLoaderAware; // Default implementation of a MappingContext for Cassandra using CassandraPersistentEntity and CassandraPersistentProperty as primary abstractions.\npublic interface CassandraPersistentEntity<T> extends PersistentEntity<T,CassandraPersistentProperty>; // Cassandra specific PersistentEntity abstraction.\n@FunctionalInterface public interface CassandraPersistentEntityMetadataVerifier; // Interface for Cassandra Persistent Entity Mapping Verification.\npublic interface CassandraPersistentProperty extends PersistentProperty<CassandraPersistentProperty>, ApplicationContextAware; // Cassandra specific PersistentProperty extension.\npublic enum CassandraPersistentPropertyComparator extends Enum<CassandraPersistentPropertyComparator> implements Comparator<CassandraPersistentProperty>; // Comparator implementation that orders CassandraPersistentProperty instances.\npublic enum CassandraPrimaryKeyColumnAnnotationComparator extends Enum<CassandraPrimaryKeyColumnAnnotationComparator> implements Comparator<PrimaryKeyColumn>; // Comparator implementation that uses, in order, the...\n", "des": "Infrastructure for the Apache Cassandra row-to-object mapping subsystem."}
{"index": 856, "repo": "calcite-core-1.34.0", "code": "Package: impl\n\nClasses and Interfaces: \nClass AbstractSchema; // Abstract implementation of Schema.\nClass AbstractSchema.Factory; // Schema factory that creates an AbstractSchema.\nClass AbstractTable; // Abstract base class for implementing Table.\nClass AbstractTableQueryable<T>; // Abstract implementation of Queryable for QueryableTable.\nClass AggregateFunctionImpl; // Implementation of AggregateFunction via user-defined class.\nClass DelegatingSchema; // Implementation of Schema that delegates to an underlying schema.\nClass ListTransientTable; // TransientTable backed by a Java list.\nClass LongSchemaVersion; // Implementation of SchemaVersion that uses a long value as representation.\nClass MaterializedViewTable; // Table that is a materialized view.\nClass MaterializedViewTable.MaterializedViewTableMacro; // Table function that returns the table that materializes a view.\nClass ModifiableViewTable; // Extension to ViewTable that is modifiable.\nClass ReflectiveFunctionBase; // Implementation of a function that is based on a method.\nClass ReflectiveFunctionBase.ParameterListBuilder; // Helps build lists of FunctionParameter.\nClass ScalarFunctionImpl; // Implementation of ScalarFunction.\nClass StarTable; // Virtual table that is composed of two or more tables joined together.\nClass StarTable.StarTableScan; // Relational expression that scans a StarTable.\nClass TableFunctionImpl; // Implementation of TableFunction based on a method.\nClass TableMacroImpl; // Implementation of TableMacro based on a method.\nClass ViewTable; // Table whose contents are defined using an SQL statement.\nClass ViewTableMacro; // Table function that implements a view.\n", "des": "Utilities to help implement Calcite's SPIs."}
{"index": 2065, "repo": "spring-webmvc-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \npublic class AsyncSupportConfigurer extends Object; // Helps with configuring options for asynchronous request processing.\npublic class ContentNegotiationConfigurer extends Object; // Creates a ContentNegotiationManager and configures it with one or more ContentNegotiationStrategy instances.\npublic class CorsRegistration extends Object; // Assists with the creation of a CorsConfiguration instance for a given URL path pattern.\npublic class CorsRegistry extends Object; // Assists with the registration of global, URL pattern based CorsConfiguration mappings.\npublic class DefaultServletHandlerConfigurer extends Object; // Configures a request handler for serving static resources by forwarding the request to the Servlet container's \"default\" Servlet.\n@Configuration(proxyBeanMethods=false) public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport; // A subclass of WebMvcConfigurationSupport that detects and delegates to all beans of type WebMvcConfigurer allowing them to customize the configuration provided by WebMvcConfigurationSupport.\n@Retention(RUNTIME) @Target(TYPE) @Documented @Import(DelegatingWebMvcConfiguration.class) public @interface EnableWebMvc; // Adding this annotation to an @Configuration class imports the Spring MVC configuration from WebMvcConfigurationSupport, e.g.:\npublic class InterceptorRegistration extends Object; // Assists with the creation of a MappedInterceptor.\npublic class InterceptorRegistry extends Object; // Helps with configuring a list of mapped interceptors.\npublic class PathMatchConfigurer extends Object; // Configure path matching options.\npublic class RedirectViewControllerRegistration extends Object; // Assist with the registration of a single redirect view controller.\npublic class ResourceChainRegistration extends Object; // Assists with the registration of resource resolvers and transformers.\npublic class ResourceHandlerRegistration extends Object; // Encapsulates information required to create a resource handler.\npublic class ResourceHandlerRegistry extends Object; // Stores registrations of resource handlers for serving static resources such as images, css files and others through Spring MVC including setting cache headers optimized for efficient loading in a web browser.\npublic class UrlBasedViewResolverRegistration extends Object; // Assist with configuring a UrlBasedViewResolver.\npublic class ViewControllerRegistration extends Object; // Assist with the registration of a single view controller.\n", "des": "Annotation-based setup for Spring MVC."}
{"index": 1943, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: jdbc\n\nSub Packages: \npackage jdbc.metadata; // Auto-configuration for JDBC Metadata.\n\nClasses and Interfaces: \n@AutoConfiguration(before=SqlInitializationAutoConfiguration.class) @ConditionalOnClass({javax.sql.DataSource.class,org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType.class}) @ConditionalOnMissingBean(type=\"io.r2dbc.spi.ConnectionFactory\") @EnableConfigurationProperties(DataSourceProperties.class) @Import(DataSourcePoolMetadataProvidersConfiguration.class) public class DataSourceAutoConfiguration extends Object; // Auto-configuration for DataSource.\n@Configuration(proxyBeanMethods=false) @Conditional(org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.EmbeddedDatabaseCondition.class) @ConditionalOnMissingBean({javax.sql.DataSource.class,javax.sql.XADataSource.class}) @Import(EmbeddedDataSourceConfiguration.class) protected static class DataSourceAutoConfiguration.EmbeddedDatabaseConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @Conditional(org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.PooledDataSourceCondition.class) @ConditionalOnMissingBean({javax.sql.DataSource.class,javax.sql.XADataSource.class}) @Import({org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration.Hikari.class,org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration.Tomcat.class,org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration.Dbcp2.class,org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration.OracleUcp.class,org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration.Generic.class,org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration.class}) protected static class DataSourceAutoConfiguration.PooledDataSourceConfiguration extends Object;\n@ConfigurationProperties(prefix=\"spring.datasource\") public class DataSourceProperties extends Object implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Base class for configuration of a data source.\npublic static class DataSourceProperties.Xa extends Object; // XA Specific datasource settings.\n", "des": "Auto-configuration for JDBC."}
{"index": 1918, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: r2dbc\n\nClasses and Interfaces: \n@AutoConfiguration(after=R2dbcAutoConfiguration.class) @ConditionalOnClass({org.springframework.r2dbc.core.DatabaseClient.class,org.springframework.data.r2dbc.core.R2dbcEntityTemplate.class}) @ConditionalOnSingleCandidate(org.springframework.r2dbc.core.DatabaseClient.class) public class R2dbcDataAutoConfiguration extends Object; // Auto-configuration for DatabaseClient.\n@AutoConfiguration(after=R2dbcDataAutoConfiguration.class) @ConditionalOnClass({io.r2dbc.spi.ConnectionFactory.class,org.springframework.data.r2dbc.repository.R2dbcRepository.class}) @ConditionalOnBean(org.springframework.r2dbc.core.DatabaseClient.class) @ConditionalOnProperty(prefix=\"spring.data.r2dbc.repositories\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) @ConditionalOnMissingBean(org.springframework.data.r2dbc.repository.support.R2dbcRepositoryFactoryBean.class) @Import(org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfigureRegistrar.class) public class R2dbcRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data R2DBC Repositories.\n", "des": "Auto-Configuration for Spring Data R2DBC."}
{"index": 420, "repo": "hadoop-azure-3.3.6", "code": "Package: retryReasonCategories\n\nClasses and Interfaces: \nClass ClientErrorRetryReason; // Category that can capture server-response errors for 4XX status-code.\nClass ConnectionResetRetryReason; // Category that can capture server-response errors for connection-reset exception.\nClass ConnectionTimeoutRetryReason; // Category that can capture server-response errors for connection-timeout.\nClass ReadTimeoutRetryReason; // Category that can capture server-response errors for read-timeout.\nClass RetryReasonCategory; // Provides methods to define if given exception can be categorised to certain category.\nClass ServerErrorRetryReason; // Category that can capture server-response errors for 5XX status-code.\nClass UnknownHostRetryReason; // Category that can capture server-response errors for UnknownHostException.\nClass UnknownIOExceptionRetryReason; // Category that can capture server-response errors for IOException.\nClass UnknownSocketExceptionRetryReason; // Category that can capture server-response errors for SocketException.\n", "des": "A retryReasonCategory defines methods applicable on server-response errors."}
{"index": 1950, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: jooq\n\nClasses and Interfaces: \n@FunctionalInterface public interface DefaultConfigurationCustomizer; // Callback interface that can be implemented by beans wishing to customize the DefaultConfiguration whilst retaining default auto-configuration.\n@AutoConfiguration(after={DataSourceAutoConfiguration.class,TransactionAutoConfiguration.class}) @ConditionalOnClass(org.jooq.DSLContext.class) @ConditionalOnBean(javax.sql.DataSource.class) public class JooqAutoConfiguration extends Object; // Auto-configuration for JOOQ.\n@Configuration(proxyBeanMethods=false) @ConditionalOnMissingBean(org.jooq.DSLContext.class) @EnableConfigurationProperties(JooqProperties.class) public static class JooqAutoConfiguration.DslContextConfiguration extends Object;\npublic class JooqExceptionTranslator extends Object implements org.jooq.ExecuteListener; // Transforms SQLException into a Spring-specific DataAccessException.\n@ConfigurationProperties(prefix=\"spring.jooq\") public class JooqProperties extends Object; // Configuration properties for the JOOQ database library.\npublic class SpringTransactionProvider extends Object implements org.jooq.TransactionProvider; // Allows Spring Transaction to be used with JOOQ.\n", "des": "Auto-configuration for JOOQ."}
{"index": 2579, "repo": "camel-api-4.0.0-RC1", "code": "Package: spi\n\nSub Packages: \npackage spi.annotations; // SPI annotations for plugins\n\nClasses and Interfaces: \npublic interface AggregationRepository; // Access to a repository to store aggregated exchanges to support pluggable implementations.\npublic interface AnnotationBasedProcessorFactory; // Factory to create Processor for annotation based EIPs.\npublic interface AnnotationScanTypeConverters; // A TypeConverter which is capable of annotation scanning for Converter classes and add these as type converters.\n@Retention(RUNTIME) @Documented @Target(FIELD) public @interface ApiMethod; // Represents an API method as part of a parent API.\n@Retention(RUNTIME) @Documented @Target(FIELD) public @interface ApiParam; // Used for annotating a UriParam parameter that its for use by API based endpoints.\n@Retention(RUNTIME) @Documented @Target(TYPE) public @interface ApiParams; // Used to annotate a nested configuration parameter type (such as a nested Configuration object) which can then be used on a API based component, endpoint.\n@Retention(RUNTIME) @Documented @Target({TYPE,METHOD,FIELD,PARAMETER}) public @interface AsEndpointUri; // Indicates that the Camel string/expression should be used as an endpoint uri.\n@Retention(RUNTIME) @Documented @Target({TYPE,METHOD,FIELD,PARAMETER}) public @interface AsPredicate; // Indicates that the Camel language/expression should be used as predicate.\npublic interface AsyncProcessorAwaitManager extends StaticService; // A manager to handle async routing engine, when Exchanges are being handed over from one thread to another, while the callee thread is blocked waiting for the other threads to complete, before it can continue.\npublic static interface AsyncProcessorAwaitManager.AwaitThread; // Information about the thread and exchange that are inflight.\npublic static interface AsyncProcessorAwaitManager.Statistics; // Utilization statistics of this manager.\npublic interface AuthorizationPolicy extends Policy; // A marker for defining the policy to be used for applying authorization to routes.\npublic interface AutowiredLifecycleStrategy extends LifecycleStrategy; // Marker interface for LifecycleStrategy that are used for auto-wiring components, data formats and languages.\npublic interface BacklogTracer; // Backlog tracer that captures the last N messages during routing in a backlog.\n", "des": "Service Provider Interfaces used by the Camel runtime which are plugin strategies."}
{"index": 1397, "repo": "spring-boot-actuator-3.1.1", "code": "Package: env\n\nClasses and Interfaces: \n@Endpoint(id=\"env\") public class EnvironmentEndpoint extends Object; // @Endpoint to expose environment information.\npublic static final class EnvironmentEndpoint.EnvironmentDescriptor extends Object implements OperationResponseBody; // Description of an Environment.\npublic static final class EnvironmentEndpoint.EnvironmentEntryDescriptor extends Object; // Description of an entry of the Environment.\npublic static final class EnvironmentEndpoint.PropertySourceDescriptor extends Object; // Description of a PropertySource.\npublic static final class EnvironmentEndpoint.PropertySourceEntryDescriptor extends Object; // Description of a particular entry of PropertySource.\npublic static final class EnvironmentEndpoint.PropertySummaryDescriptor extends Object; // Description of a particular entry of the Environment.\npublic static final class EnvironmentEndpoint.PropertyValueDescriptor extends Object; // Description of a property's value, including its origin if available.\n@EndpointWebExtension(endpoint=EnvironmentEndpoint.class) public class EnvironmentEndpointWebExtension extends Object; // @EndpointWebExtension for the EnvironmentEndpoint.\n", "des": "Actuator support for Spring Framework's Environment."}
{"index": 3241, "repo": "opencms-core-15.0", "code": "Package: contenteditor\n\nSub Packages: \npackage contenteditor.shared; // Contains data beans used on the server side as well as on the client side of the XML content editor.\n\nClasses and Interfaces: \nClass A_CmsXmlContentEditorChangeHandler; // Abstract implementation of the content editor change handler.\nClass ClientMessages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsContentEditorActionElement; // The content editor action element.\nClass CmsContentService; // Service to provide entity persistence within OpenCms.\nClass CmsContentTypeVisitor; // Visitor to read all types and attribute configurations within a content definition.\nClass CmsDelayedDefaultChangeHandler; // A change handler that reacts to changes in a field by setting another empty field to a default value.\nClass CmsDynamicCategoryFieldList; // Class used to keep track of optional dynamic category fields for a content.\nClass CmsEditorChangeHandlerFormatterSelection; // Editor change handler implementation for the formatter selection in the sitemap config.\nClass CmsEditorChangeHandlerProperty; // Handles editor content changes to read OpenCms resource properties and insert their values into the edited content.\nClass CmsSerialDateService; // Implementation of the serial date RPC service.\nClass CmsWidgetUtil; // Utility methods for getting widget informations out of content definitions.\nClass CmsWidgetUtil.WidgetInfo; // Bean representing widget information.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsContentTypeVisitor.EvaluationRule; // Widget display type evaluation rules.\n", "des": "Contains server side classes for the XML content editor."}
{"index": 439, "repo": "hbase-client-3.0.0-alpha-4", "code": "Package: client\n\nSub Packages: \npackage client.coprocessor; // Provides client classes for invoking Coprocessor RPC protocols Overview Example Usage\n\nClasses and Interfaces: \nInterface Admin; // The administrative API for HBase.\nInterface AdvancedScanResultConsumer; // This is the low level API for asynchronous scan.\nInterface AdvancedScanResultConsumer.ScanController; // Used to suspend or stop a scan, or get a scan cursor if available.\nInterface AdvancedScanResultConsumer.ScanResumer; // Used to resume a scan.\nInterface AsyncAdmin; // The asynchronous administrative API for HBase.\nInterface AsyncAdminBuilder; // For creating AsyncAdmin.\nInterface AsyncAdminRequestRetryingCaller.Callable<T>;\nInterface AsyncBufferedMutator; // Used to communicate with a single HBase table in batches.\nInterface AsyncBufferedMutatorBuilder; // For creating AsyncBufferedMutator.\nInterface AsyncConnection; // The asynchronous version of Connection.\nInterface AsyncMasterRequestRpcRetryingCaller.Callable<T>;\nInterface AsyncServerRequestRpcRetryingCaller.Callable<T>;\nInterface AsyncTable<C extends ScanResultConsumerBase>; // The interface for asynchronous version of Table.\nInterface AsyncTable.CheckAndMutateBuilder; // Since 3.0.0, will be removed in 4.0.0.\nInterface AsyncTable.CheckAndMutateWithFilterBuilder; // Since 3.0.0, will be removed in 4.0.0.\nInterface AsyncTable.CoprocessorCallback<R>; // The callback when we want to execute a coprocessor call on a range of regions.\nInterface AsyncTable.CoprocessorServiceBuilder<S,R>; // Helper class for sending coprocessorService request that executes a coprocessor call on regions which are covered by a range.\nInterface AsyncTableBuilder<C extends ScanResultConsumerBase>; // For creating AsyncTable.\nInterface AsyncTableRegionLocator; // The asynchronous version of RegionLocator.\nInterface Attributes;\nInterface BufferedMutator; // Used to communicate with a single HBase table similar to Table but meant for batched, asynchronous puts.\nInterface BufferedMutator.ExceptionListener; // Listens for asynchronous exceptions on a BufferedMutator.\nInterface ColumnFamilyDescriptor; // An ColumnFamilyDescriptor contains information about a column family such as the number of versions, compression settings, etc.\n", "des": "Provides HBase Client"}
{"index": 616, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: url\n\nClasses and Interfaces: \nInterface URLConstants; // Defines standard names for property keys associated with URLStreamHandlerService and java.net.ContentHandler services.\nInterface URLStreamHandlerService; // Service interface with public versions of the protected java.net.URLStreamHandler methods.\nInterface URLStreamHandlerSetter; // Interface used by URLStreamHandlerService objects to call the setURL method on the proxy URLStreamHandler object.\nClass AbstractURLStreamHandlerService; // Abstract implementation of the URLStreamHandlerService interface.\n", "des": "URL Stream and Content Handlers Package Version 1.0."}
{"index": 2855, "repo": "spring-integration-core-6.1.2", "code": "Package: context\n\nClasses and Interfaces: \npublic class DslIntegrationConfigurationInitializer extends Object implements IntegrationConfigurationInitializer; // The Java DSL Integration infrastructure beanFactory initializer.\npublic class IntegrationFlowBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.SmartInitializingSingleton; // A BeanPostProcessor to parse IntegrationFlow beans and register their components as beans in the provided BeanFactory, if necessary.\npublic interface IntegrationFlowContext; // A public API for dynamic (manual) registration of IntegrationFlows, not via standard bean registration phase.\npublic static interface IntegrationFlowContext.IntegrationFlowRegistration extends org.springframework.beans.factory.BeanFactoryAware;\npublic static interface IntegrationFlowContext.IntegrationFlowRegistrationBuilder; // A Builder pattern implementation for the options to register IntegrationFlow in the application context.\npublic final class StandardIntegrationFlowContext extends Object implements IntegrationFlowContext, org.springframework.beans.factory.BeanFactoryAware; // Standard implementation of IntegrationFlowContext.\n", "des": "The context support classes for Spring Integration Java DSL."}
{"index": 2425, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: mongo\n\nClasses and Interfaces: \n@AutoConfiguration(after={org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration.class,org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration.class,MongoReactiveHealthContributorAutoConfiguration.class}) @ConditionalOnClass(org.springframework.data.mongodb.core.MongoTemplate.class) @ConditionalOnBean(org.springframework.data.mongodb.core.MongoTemplate.class) @ConditionalOnEnabledHealthIndicator(\"mongo\") public class MongoHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.data.mongo.MongoHealthIndicator,org.springframework.data.mongodb.core.MongoTemplate>; // Auto-configuration for MongoHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration.class) @ConditionalOnClass({org.springframework.data.mongodb.core.ReactiveMongoTemplate.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(org.springframework.data.mongodb.core.ReactiveMongoTemplate.class) @ConditionalOnEnabledHealthIndicator(\"mongo\") public class MongoReactiveHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.data.mongo.MongoReactiveHealthIndicator,org.springframework.data.mongodb.core.ReactiveMongoTemplate>; // Auto-configuration for MongoReactiveHealthIndicator.\n", "des": "Auto-configuration for actuator MongoDB concerns dependent on Spring Data."}
{"index": 1308, "repo": "groovy-all-4.0.13", "code": "Package: servlet\n\nClasses and Interfaces: \npublic abstract class AbstractHttpServlet extends HttpServlet implements ResourceConnector; // A base class dealing with common HTTP servlet API housekeeping aspects.\npublic class GroovyServlet extends AbstractHttpServlet; // This servlet will run Groovy scripts as Groovlets.\npublic class ServletBinding extends Binding; // Servlet-specific binding extension to lazy load the writer or the output stream from the response.\npublic class ServletCategory extends Object; // Servlet support.\npublic class TemplateServlet extends AbstractHttpServlet; // A generic servlet for serving (mostly HTML) templates.\n", "des": "Support for Groovlets which are Servlets written as a simple Groovy script."}
{"index": 2421, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: context\n\nSub Packages: \npackage context.properties; // Auto-configuration for actuator property concerns.\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.context.ShutdownEndpoint.class) public class ShutdownEndpointAutoConfiguration extends Object; // Auto-configuration for the ShutdownEndpoint.\n", "des": "Auto-configuration for actuator Spring Context concerns."}
{"index": 510, "repo": "commons-vfs2-2.9.0", "code": "Package: filter\n\nClasses and Interfaces: \nInterface ConditionalFileFilter; // Defines operations for conditional file filters.\nClass AgeFileFilter; // Filters files based on a cutoff time, can filter either newer files or files equal to or older.\nClass AndFileFilter; // A filter providing conditional AND logic across a list of file filters.\nClass CanExecuteFileFilter; // This filter accepts Files that can be executed.\nClass CanReadFileFilter; // This filter accepts Files that can be read.\nClass CanWriteFileFilter; // This filter accepts Files that can be written to.\nClass DirectoryFileFilter; // This filter accepts Files that are directories.\nClass EmptyFileFilter; // This filter accepts files or directories that are empty.\nClass FalseFileFilter; // A file filter that always returns false.\nClass FileFileFilter; // This filter accepts Files that are files (not directories).\nClass HiddenFileFilter; // This filter accepts Files that are hidden.\nClass NameFileFilter; // Filters file names for a certain name.\nClass NotFileFilter; // This filter produces a logical NOT of the filters specified.\nClass OrFileFilter; // A FileFilter providing conditional OR logic across a list of file filters.\nClass PrefixFileFilter; // Filters file names for a certain prefix.\nClass RegexFileFilter; // Filters files using supplied regular expression(s).\nClass SizeFileFilter; // Filters files based on size, can filter either smaller files or files equal to or larger than a given threshold.\nClass SizeRangeFileFilter; // Filter that accepts files whose size is >= minimum size and <= maximum size.\nClass SuffixFileFilter; // Filters files based on the suffix (what the file name ends with).\nClass SymbolicLinkFileFilter; // This filter accepts Files that are symbolic links.\nClass TrueFileFilter; // A file filter that always returns true.\nClass WildcardFileFilter; // Filters files using the supplied wildcards.\nEnum IOCase; // Enumeration of IO case sensitivity.\n", "des": "Implementations of org.apache.commons.vfs2.FileFilter."}
{"index": 1926, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: graphql\n\nSub Packages: \npackage graphql.data; // Auto-configuration classes for data integrations with GraphQL.\npackage graphql.reactive; // Auto-configuration classes for WebFlux support in Spring GraphQL.\npackage graphql.rsocket; // Auto-configuration classes for RSocket integration with GraphQL.\npackage graphql.security; // Auto-configuration classes for Security support in Spring GraphQL.\npackage graphql.servlet; // Auto-configuration classes for MVC support in Spring GraphQL.\n\nClasses and Interfaces: \n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.graphql.DefaultGraphQlSchemaCondition.class) public @interface ConditionalOnGraphQlSchema; // @Conditional that only matches when a GraphQL schema is defined for the application, through schema files or infrastructure beans.\n@AutoConfiguration @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.execution.GraphQlSource.class}) @ConditionalOnGraphQlSchema @EnableConfigurationProperties(GraphQlProperties.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.graphql.GraphQlAutoConfiguration.GraphQlResourcesRuntimeHints.class) public class GraphQlAutoConfiguration extends Object; // Auto-configuration for creating a Spring GraphQL base infrastructure.\n@ConfigurationProperties(prefix=\"spring.graphql.cors\") public class GraphQlCorsProperties extends Object; // Configuration properties for GraphQL endpoint's CORS support.\n@ConfigurationProperties(prefix=\"spring.graphql\") public class GraphQlProperties extends Object; // properties for Spring GraphQL.\npublic static class GraphQlProperties.Graphiql extends Object;\npublic static class GraphQlProperties.Rsocket extends Object;\npublic static class GraphQlProperties.Schema extends Object;\npublic static class GraphQlProperties.Schema.Introspection extends Object;\npublic static class GraphQlProperties.Schema.Printer extends Object;\npublic static class GraphQlProperties.Websocket extends Object;\n@FunctionalInterface public interface GraphQlSourceBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize properties of Builder whilst retaining default auto-configuration.\n", "des": "Auto-configuration for Spring GraphQL."}
{"index": 2188, "repo": "spring-security-web-6.1.2", "code": "Package: context\n\nClasses and Interfaces: \npublic abstract class AbstractSecurityWebApplicationInitializer extends Object implements org.springframework.web.WebApplicationInitializer; // Registers the DelegatingFilterProxy to use the springSecurityFilterChain before any other registered Filter.\npublic final class DelegatingSecurityContextRepository extends Object implements SecurityContextRepository;\n@Deprecated public final class HttpRequestResponseHolder extends Object;\npublic class HttpSessionSecurityContextRepository extends Object implements SecurityContextRepository; // A SecurityContextRepository implementation which stores the security context in the HttpSession between requests.\npublic final class NullSecurityContextRepository extends Object implements SecurityContextRepository;\npublic final class RequestAttributeSecurityContextRepository extends Object implements SecurityContextRepository; // Stores the SecurityContext on a ServletRequest.setAttribute(String, Object) so that it can be restored when different dispatch types occur.\n@Deprecated public abstract class SaveContextOnUpdateOrErrorResponseWrapper extends OnCommittedResponseWrapper;\npublic class SecurityContextHolderFilter extends org.springframework.web.filter.GenericFilterBean; // A Filter that uses the SecurityContextRepository to obtain the SecurityContext and set it on the SecurityContextHolder.\n@Deprecated public class SecurityContextPersistenceFilter extends org.springframework.web.filter.GenericFilterBean;\npublic interface SecurityContextRepository; // Strategy used for persisting a SecurityContext between requests.\n", "des": "Classes which are responsible for maintaining the security context between HTTP requests."}
{"index": 3330, "repo": "opencms-core-15.0", "code": "Package: modules\n\nSub Packages: \npackage modules.edit; // Contains classes of the module manager app used to edit modules.\n\nClasses and Interfaces: \nClass A_CmsModuleImportForm; // Abstract superclass for the module import forms.\nClass CmsImportTabForm; // Module import dialog with two tabs, one for importing via HTTP and one for importing from the server.\nClass CmsModuleApp; // Main module manager app class.\nClass CmsModuleApp.Attributes; // Additional app attributes for the module manager.\nClass CmsModuleApp.Icons; // Contains the icon constants for the module manager.\nClass CmsModuleApp.States; // Contains the different navigation states for the module maanger.\nClass CmsModuleAppConfiguration; // App configuration for the module maanger app.\nClass CmsModuleExportDialog; // The module export dialog.\nClass CmsModuleImportFile; // A bean representing a module zip file to be imported.\nClass CmsModuleImportForm; // The form for importing modules via HTTP.\nClass CmsModuleImportThread; // Report thread for importing a module.\nClass CmsModuleInfoDialog; // Widget to display the list of resource / explorer types defined in a module.\nClass CmsModuleRow; // Represents a row of the modules overview table.\nClass CmsModuleTable<T>; // Overview list for module information.\nClass CmsNewTypeForm;\nClass CmsServerModuleImportForm; // The form for importing a module from the application server.\nClass CmsSiteSelectDialog; // The dialog for selecting a site when exporting / deleting a module without a module site.\n", "des": "Contains classes of the module manager app."}
{"index": 2212, "repo": "spring-data-commons-3.1.2", "code": "Package: querydsl\n\nSub Packages: \npackage querydsl.binding; // Base classes to implement CDI support for repositories.\n\nClasses and Interfaces: \npublic interface EntityPathResolver; // Strategy interface to abstract the ways to translate an plain domain class into a EntityPath.\npublic interface ListQuerydslPredicateExecutor<T> extends QuerydslPredicateExecutor<T>; // Interface to allow execution of QueryDsl Predicate instances.\npublic class QPageRequest extends AbstractPageRequest; // Basic Java Bean implementation of Pageable with support for QueryDSL.\npublic class QSort extends Sort implements Serializable; // Sort option for queries that wraps a Querydsl OrderSpecifier.\npublic interface QuerydslPredicateExecutor<T>; // Interface to allow execution of QueryDsl Predicate instances.\npublic class QuerydslRepositoryInvokerAdapter extends Object implements RepositoryInvoker; // RepositoryInvoker that is aware of a QuerydslPredicateExecutor and Predicate to be executed for all flavors of findAll(…).\npublic abstract class QuerydslUtils extends Object; // Utility class for Querydsl.\npublic interface ReactiveQuerydslPredicateExecutor<T>; // Interface to issue queries using Querydsl Predicate instances.\npublic class SimpleEntityPathResolver extends Object implements EntityPathResolver; // Simple implementation of EntityPathResolver to lookup a query class by reflection and using the static field of the same type.\n", "des": "Querydsl integration support classes."}
{"index": 434, "repo": "kafka-streams-3.5.0", "code": "Package: query\n\nClasses and Interfaces: \nInterface Query<R>; // Marker interface that all interactive queries must implement (see KafkaStreams.query(StateQueryRequest)).\nInterface QueryResult<R>; // Container for a single partition's result when executing a StateQueryRequest.\nClass KeyQuery<K,V>; // Interactive query for retrieving a single record based on its key.\nClass Position; // A representation of a position vector with respect to a set of topic partitions.\nClass PositionBound; // A class bounding the processing state Position during queries.\nClass QueryConfig; // Runtime configuration parameters\nClass RangeQuery<K,V>; // Interactive query for issuing range queries and scans over KeyValue stores.\nClass StateQueryRequest<R>; // The request object for Interactive Queries.\nClass StateQueryRequest.InStore; // A progressive builder interface for creating StoreQueryRequests.\nClass StateQueryResult<R>; // The response object for interactive queries.\nClass WindowKeyQuery<K,V>;\nClass WindowRangeQuery<K,V>;\nEnum FailureReason; // This enumeration type captures the various top-level reasons that a particular partition of a store would fail to execute a query.\n", "des": "Provides a query API (aka Interactive Queries) over state stores, for extracting data from a stateful Kafka Streams application."}
{"index": 3547, "repo": "opennlp-tools-2.2.0", "code": "Package: ext\n\nClasses and Interfaces: \nClass ExtensionLoader; // The ExtensionLoader is responsible to load extensions to the OpenNLP library.\nClass ExtensionServiceKeys;\nClass ExtensionNotLoadedException; // Exception indicates that an OpenNLP extension could not be loaded.\n", "des": "Package containing extension loading code."}
{"index": 559, "repo": "hadoop-common-3.3.4", "code": "Package: io\n\nSub Packages: \npackage io.serializer; // This package provides a mechanism for using different serialization frameworks in Hadoop.\n\nClasses and Interfaces: \nInterface ByteBufferPool;\nInterface Closeable; // use java.io.Closeable\nInterface MapFile.Reader.Option;\nInterface MapFile.Writer.Option;\nInterface RawComparator<T>; // A Comparator that operates directly on byte representations of objects.\nInterface ReadaheadPool.ReadaheadRequest; // An outstanding readahead request that has been submitted to the pool.\nInterface SequenceFile.Reader.Option; // A tag interface for all of the Reader options\nInterface SequenceFile.Sorter.RawKeyValueIterator; // The interface to iterate over raw keys/values of SequenceFiles.\nInterface SequenceFile.ValueBytes; // The interface to 'raw' values of SequenceFiles.\nInterface SequenceFile.Writer.Option;\nInterface Stringifier<T>; // Stringifier interface offers two methods to convert an object to a string representation and restore the object given its string representation.\nInterface Writable; // A serializable object which implements a simple, efficient, serialization protocol, based on DataInput and DataOutput.\nInterface WritableComparable<T>; // A Writable which is also Comparable.\nInterface WritableFactory; // A factory for a class of Writable.\nClass AbstractMapWritable; // Abstract base class for MapWritable and SortedMapWritable Unlike org.apache.nutch.crawl.MapWritable, this class allows creation of MapWritable<Writable, MapWritable> so the CLASS_TO_ID and ID_TO_CLASS maps travel with the class instead of being static.\nClass ArrayFile; // A dense file-based mapping from integers to values.\nClass ArrayFile.Reader; // Provide access to an existing array file.\nClass ArrayFile.Writer; // Write a new array file.\nClass ArrayPrimitiveWritable; // This is a wrapper class.\nClass ArrayWritable; // A Writable for arrays containing instances of a class.\nClass BinaryComparable; // Interface supported by WritableComparable types supporting ordering/permutation by a representative set of bytes.\nClass BloomMapFile; // This class extends MapFile and provides very much the same functionality.\nClass BloomMapFile.Reader;\nClass BloomMapFile.Writer;\nClass BooleanWritable; // A WritableComparable for booleans.\n", "des": "Generic i/o code for use when reading and writing data to the network, to databases, and to files."}
{"index": 1598, "repo": "spring-websocket-6.0.11", "code": "Package: standard\n\nClasses and Interfaces: \npublic abstract class AbstractStandardUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A base class for RequestUpgradeStrategy implementations that build on the standard WebSocket API for Java (JSR-356).\npublic abstract class AbstractTyrusRequestUpgradeStrategy extends AbstractStandardUpgradeStrategy; // A base class for RequestUpgradeStrategy implementations on top of JSR-356 based servers which include Tyrus as their WebSocket engine.\npublic class GlassFishRequestUpgradeStrategy extends AbstractTyrusRequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Oracle's GlassFish 4.1 and higher.\npublic class ServerEndpointExporter extends org.springframework.web.context.support.WebApplicationObjectSupport implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.SmartInitializingSingleton; // Detects beans of type ServerEndpointConfig and registers with the standard Jakarta WebSocket runtime.\npublic class ServerEndpointRegistration extends ServerEndpointConfig.Configurator implements ServerEndpointConfig, org.springframework.beans.factory.BeanFactoryAware; // An implementation of ServerEndpointConfig for use in Spring-based applications.\npublic class ServletServerContainerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<WebSocketContainer>, org.springframework.web.context.ServletContextAware, org.springframework.beans.factory.InitializingBean; // A FactoryBean for configuring ServerContainer.\npublic class SpringConfigurator extends ServerEndpointConfig.Configurator; // A ServerEndpointConfig.Configurator for initializing ServerEndpoint-annotated classes through Spring.\npublic class StandardWebSocketUpgradeStrategy extends AbstractStandardUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for the Jakarta WebSocket API 2.1+.\npublic class TomcatRequestUpgradeStrategy extends StandardWebSocketUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Apache Tomcat.\npublic class UndertowRequestUpgradeStrategy extends StandardWebSocketUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for WildFly and its underlying Undertow web server.\npublic class WebLogicRequestUpgradeStrategy extends AbstractTyrusRequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Oracle's WebLogic.\npublic class WebSphereRequestUpgradeStrategy extends StandardWebSocketUpgradeStrategy; // WebSphere support for upgrading an HttpServletRequest during a WebSocket handshake.\n", "des": "Server-side classes for use with standard JSR-356 WebSocket endpoints."}
{"index": 980, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: callback\n\nSub Packages: \npackage callback.jaas; // Contains CallbackHandler implementations for XWSS that use the Java Authentication and Authorization Service (JAAS).\n\nClasses and Interfaces: \nClass CryptographyCallbackHandler; // Default callback handler that handles cryptographic callback.\nClass DefaultTimestampValidator; // A default implementation of a TimestampValidationCallback.TimestampValidator.\nClass KeyStoreCallbackHandler; // Callback handler that uses Java Security KeyStores to handle cryptographic callbacks.\nClass MockValidationCallbackHandler; // Mock implementation of of callback handler that accepts all password and certificate validation callbacks.\nClass SimplePasswordValidationCallbackHandler; // Simple callback handler that validates passwords agains a in-memory Properties object.\nClass SimpleUsernamePasswordCallbackHandler; // Simple callback handler that supplies a username and password to a username token at runtime.\nClass SpringCertificateValidationCallbackHandler; // Callback handler that validates a certificate using an Spring Security AuthenticationManager.\nClass SpringDigestPasswordValidationCallbackHandler; // Callback handler that validates a password digest using an Spring Security UserDetailsService.\nClass SpringPlainTextPasswordValidationCallbackHandler; // Callback handler that validates a certificate uses an Spring Security AuthenticationManager.\nClass SpringUsernamePasswordCallbackHandler; // Callback handler that adds username/password information to a mesage using an Spring Security SecurityContext.\nClass XwssCallbackHandlerChain; // Represents a chain of CallbackHandlers.\n", "des": "Contains CallbackHandler implementations for XWSS."}
{"index": 3486, "repo": "opennlp-uima-2.2.0", "code": "Package: tokenize\n\nClasses and Interfaces: \nInterface TokenizerModelResource; // A TokenizerModel which can be shared between AnalysisEngines and loaded via the UIMA resource model.\nClass AbstractTokenizer;\nClass SimpleTokenizer; // OpenNLP Simple Tokenizer annotator.\nClass Tokenizer; // OpenNLP Tokenizer annotator.\nClass TokenizerModelResourceImpl;\nClass WhitespaceTokenizer; // OpenNLP Whitespace Tokenizer annotator.\n", "des": "Package related to finding tokens or word segments."}
{"index": 1227, "repo": "spring-plugin-core-3.0.0", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractTypeAwareSupport<T> extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>, org.springframework.beans.factory.InitializingBean; // Abstract base class to implement types that need access to all beans of a given type from the ApplicationContext.\npublic class BeanListFactoryBean<T> extends AbstractTypeAwareSupport<T> implements org.springframework.beans.factory.FactoryBean<List<T>>; // Factory to create bean lists for a given type.\npublic class PluginRegistryFactoryBean<T extends Plugin<S>,S> extends AbstractTypeAwareSupport<T> implements org.springframework.beans.factory.FactoryBean<PluginRegistry<T,S>>; // FactoryBean to create PluginRegistry instances.\n", "des": "This package contains support classes to create bean lists or plugin registry instances out of beans implementing a certain interface."}
{"index": 1396, "repo": "spring-boot-actuator-3.1.1", "code": "Package: servlet\n\nClasses and Interfaces: \n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping.AbstractWebMvcEndpointHandlerMappingRuntimeHints.class) public abstract class AbstractWebMvcEndpointHandlerMapping extends org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping implements org.springframework.beans.factory.InitializingBean; // A custom HandlerMapping that makes web endpoints available over HTTP using Spring MVC.\n@FunctionalInterface protected static interface AbstractWebMvcEndpointHandlerMapping.LinksHandler; // Handler providing actuator links at the root endpoint.\n@FunctionalInterface protected static interface AbstractWebMvcEndpointHandlerMapping.ServletWebOperation; // A servlet web operation that can be handled by Spring MVC.\npublic class AdditionalHealthEndpointPathsWebMvcHandlerMapping extends AbstractWebMvcEndpointHandlerMapping; // A custom HandlerMapping that allows health groups to be mapped to an additional path.\npublic class ControllerEndpointHandlerMapping extends org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping; // HandlerMapping that exposes @ControllerEndpoint and @RestControllerEndpoint annotated endpoints over Spring MVC.\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.servlet.WebMvcEndpointHandlerMapping.WebMvcEndpointHandlerMappingRuntimeHints.class) public class WebMvcEndpointHandlerMapping extends AbstractWebMvcEndpointHandlerMapping; // A custom HandlerMapping that makes web endpoints available over HTTP using Spring MVC.\n", "des": "Spring MVC support for actuator endpoints."}
{"index": 2606, "repo": "wicket-util-10.0.0-M1", "code": "Package: myers\n\nClasses and Interfaces: \npublic final class DiffNode extends PathNode; // A diffnode in a diffpath.\npublic class MyersDiff extends Object implements DiffAlgorithm; // A clean-room implementation of Eugene Myers differencing algorithm.\npublic abstract class PathNode extends Object; // A node in a diffpath.\npublic final class Snake extends PathNode; // Represents a snake in a diffpath.\n", "des": "The diff.myers package implements Gene Myers' differencing algorithm."}
{"index": 34, "repo": "ignite-core-2.15.0", "code": "Package: ignite\n\nSub Packages: \npackage ignite.cluster; // Contains cluster-related classes.\npackage ignite.configuration; // Contains configuration-related classes.\npackage ignite.lang; // Contains general language constructs and functional APIs for distributed computations.\npackage ignite.lifecycle; // Contains lifecycle-related classes.\npackage ignite.resources; // Contains resource injection annotations.\npackage ignite.scheduler; // Contains Job Scheduling functionality.\npackage ignite.spi; // Contains common classes and interfaces for SPI implementations.\npackage ignite.thread; // Contains threads-related utility classes.\npackage ignite.messaging; // Contains Topic-based Messaging functionality.\npackage ignite.events; // Contains Event Subscription functionality together with various events emitted by Ignite.\npackage ignite.compute; // Contains Compute Grid functionality.\npackage ignite.cache; // Contains main Data Grid APIs.\npackage ignite.transactions; // Contains transaction-related classes.\npackage ignite.services; // Contains main Managed Services APIs.\npackage ignite.client; // Contains Ignite Thin Client API classes.\npackage ignite.stream; // Contains Ignite Streamer classes.\npackage ignite.ssl; // Contains classes for working with SSL.\npackage ignite.maintenance; // Contains public interfaces for maintenance mechanism.\npackage ignite.mxbean; // Contains annotations for Dynamic MBeans.\npackage ignite.failure; // Contains Failure handling public API with standard FailureHandler implementations.\npackage ignite.plugin; // Contains plugins management API.\npackage ignite.logger; // Contains logging functionality used throughout the system.\npackage ignite.startup; // Contains Ignite runtime startup classes.\npackage ignite.marshaller; // Contains various supported marshallers.\npackage ignite.binary; // Contains Ignite Binary Objects API classes.\npackage ignite.platform; // Contains platform-related classes.\npackage ignite.internal; // Contains main implementation.\n\nClasses and Interfaces: \nInterface DataRegionMetrics; // Check the ReadOnlyMetricRegistry with \"name=io.dataregion.\nInterface DataRegionMetricsProvider; // This interface provides calculated metrics for data region.\nInterface Ignite; // Main entry-point for all Ignite APIs.\n", "des": "Contains entry-point Ignite & HPC APIs."}
{"index": 276, "repo": "pdfbox-3.0.0-beta1", "code": "Package: operator\n\nSub Packages: \npackage operator.graphics; // This package contains implementations of all of the PDF graphics operators.\n\nClasses and Interfaces: \nClass DrawObject; // Do: Draws an XObject.\nClass Operator; // An Operator in a PDF content stream.\nClass OperatorName;\nClass OperatorProcessor; // Processes a PDF operator.\nClass MissingOperandException; // Throw when a PDF operator is missing required operands.\n", "des": "This package contains implementations of all of the PDF operators."}
{"index": 645, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: store\n\nSub Packages: \npackage store.exception; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage store.impl; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage store.metrics; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage store.records; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage store.utils; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\n\nClasses and Interfaces: \nInterface FederationApplicationHomeSubClusterStore; // FederationApplicationHomeSubClusterStore maintains the state of all Applications that have been submitted to the federated cluster.\nInterface FederationMembershipStateStore; // FederationMembershipStateStore maintains the state of all subcluster(s) as encapsulated by SubClusterInfo for all the subcluster(s) that are participating in federation.\nInterface FederationPolicyStore; // The FederationPolicyStore provides a key-value interface to access the policies configured for the system.\nInterface FederationStateStore; // FederationStore extends the three interfaces used to coordinate the state of a federated cluster: FederationApplicationHomeSubClusterStore, FederationMembershipStateStore, and FederationPolicyStore.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 3297, "repo": "opencms-core-15.0", "code": "Package: module\n\nClasses and Interfaces: \nInterface I_CmsModuleAction; // Module action classes in OpenCms must implement this interface.\nClass A_CmsModuleAction; // Simple base implementation of the I_CmsModuleAction interface, extend this class for more sophisticated module action implementations.\nClass CmsModule; // Describes an OpenCms module.\nClass CmsModuleDependency; // Describes an OpenCms module dependency.\nClass CmsModuleImportData; // Module data read from a module zip file.\nClass CmsModuleImportExportHandler; // Import/export handler implementation for Cms modules.\nClass CmsModuleImportExportRepository; // Class which manages import/export of modules from repositories configured in opencms-importexport.xml.\nClass CmsModuleImportExportRepository.ModuleExportData; // Holds exported module data and a modification date.\nClass CmsModuleLog; // This class is responsible for reading and writing module import/export log messages, to be used by CmsResourceWrapperModules.\nClass CmsModuleManager; // Manages the modules of an OpenCms installation.\nClass CmsModuleUpdater; // Class used for updating modules.\nClass CmsModuleVersion; // A version number for an OpenCms module.\nClass CmsModuleXmlHandler; // Adds the XML handler rules for import and export of a single module.\nClass CmsReplaceModuleInfo; // Status after updating a module.\nClass CmsResourceImportData; // Import data for a single resource.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsModule.ExportMode; // The available module export modes.\nEnum CmsModuleLog.Action; // Action type.\nEnum CmsModuleXmlHandler.XmlWriteMode; // Enum used to distinguish whether we want to generate the XML for a module export's manifest or the XML for writing back opencms-modules.xml.\n", "des": "OpenCms modules provide a powerful, standardized way to extend the core OpenCms functionality."}
{"index": 3804, "repo": "lucene-analysis-common-9.7.0", "code": "Package: path\n\nClasses and Interfaces: \nClass PathHierarchyTokenizer; // Tokenizer for path-like hierarchies.\nClass PathHierarchyTokenizerFactory; // Factory for PathHierarchyTokenizer.\nClass ReversePathHierarchyTokenizer; // Tokenizer for domain-like hierarchies.\n", "des": "Analysis components for path-like strings such as filenames."}
{"index": 915, "repo": "commons-compress-1.23.0", "code": "Package: compressors\n\nSub Packages: \npackage compressors.brotli; // Provides stream class for decompressing streams using the Brotli algorithm based on Google's Brotli decoder.\npackage compressors.bzip2; // Provides stream classes for compressing and decompressing streams using the BZip2 algorithm.\npackage compressors.deflate; // Provides a stream classes that allow (de)compressing streams using the DEFLATE algorithm.\npackage compressors.deflate64; // Provides a stream that allows decompressing streams using the DEFLATE64(tm) algorithm.\npackage compressors.gzip; // Provides stream classes for compressing and decompressing streams using the GZip algorithm.\npackage compressors.lz4; // Provides stream classes for the LZ4 algorithm.\npackage compressors.lz77support; // Provides utility classes for LZ77 based algorithms.\npackage compressors.lzma; // Provides stream classes using the \"stand-alone\" LZMA algorithm.\npackage compressors.lzw; // Generic LZW implementation.\npackage compressors.pack200; // Provides stream classes for compressing and decompressing streams using the Pack200 algorithm used to compress Java archives.\npackage compressors.snappy; // Provides stream classes for the Snappy algorithm.\npackage compressors.xz; // Provides stream classes for compressing and decompressing streams using the XZ algorithm.\npackage compressors.z; // Provides stream classes for decompressing streams using the \"compress\" algorithm used to write .Z files.\npackage compressors.zstandard; // Provides stream class for (de)compressing streams using the Zstandard algorithm based on Zstandard JNI.\n\nClasses and Interfaces: \nInterface CompressorStreamProvider; // Creates Compressor CompressorInputStreams and CompressorOutputStreams.\nClass CompressorInputStream;\nClass CompressorOutputStream;\nClass CompressorStreamFactory; // Factory to create Compressor[In|Out]putStreams from names.\nClass FileNameUtil; // File name mapping code for the compression formats.\nClass CompressorException; // Compressor related exception\n", "des": "Provides a unified API and factories for dealing with compressed streams."}
{"index": 2950, "repo": "spring-integration-xml-6.1.2", "code": "Package: router\n\nClasses and Interfaces: \npublic class XPathRouter extends org.springframework.integration.router.AbstractMappingMessageRouter; // Message Router that uses XPathExpression evaluation to determine channel names.\n", "des": "Provides XML message routers."}
{"index": 2847, "repo": "spring-integration-core-6.1.2", "code": "Package: kryo\n\nClasses and Interfaces: \npublic abstract class AbstractKryoCodec extends Object implements Codec; // Base class for Codecs using Kryo.\npublic abstract class AbstractKryoRegistrar extends Object implements KryoRegistrar; // Base class for KryoRegistrar implementations.\npublic class CompositeKryoRegistrar extends AbstractKryoRegistrar; // A KryoRegistrar that delegates and validates registrations across all components.\npublic class FileKryoRegistrar extends AbstractKryoRegistrar; // A KryoRegistrar used to validateRegistration a File serializer.\npublic class FileSerializer extends com.esotericsoftware.kryo.Serializer<File>; // A custom Kryo Serializer for serializing File payloads.\npublic class KryoClassListRegistrar extends AbstractKryoRegistrar; // A KryoRegistrar used to validateRegistration a list of Java classes.\npublic class KryoClassMapRegistrar extends AbstractKryoRegistrar; // A KryoRegistrar implementation backed by a Map used to explicitly set the registration ID for each class.\npublic interface KryoRegistrar; // Strategy interface used by PojoCodec to configure registrations classes consistently across Kryo instances.\npublic class KryoRegistrationRegistrar extends AbstractKryoRegistrar; // A KryoRegistrar implementation backed by a List of Registration.\npublic class MessageCodec extends PojoCodec; // PojoCodec configured to encode/decode Message<?>s.\npublic class MessageKryoRegistrar extends AbstractKryoRegistrar; // Registers common MessageHeader types and Serializers.\npublic class PojoCodec extends AbstractKryoCodec; // Kryo Codec that can encode and decode arbitrary types.\npublic final class RegistrationIds extends Object; // Default registration ids for serializers provided by the framework.\n", "des": "The Kryo specific Codec classes."}
{"index": 3748, "repo": "lucene-queryparser-9.7.0", "code": "Package: parser\n\nClasses and Interfaces: \nInterface QueryParserConstants; // Token literal values and constants.\nClass QueryParser; // This class is generated by JavaCC.\nClass QueryParserTokenManager; // Token Manager.\nClass Token; // Describes the input token stream.\nClass ParseException; // This exception is thrown when parse errors are encountered.\nClass TokenMgrError; // Token Manager Error.\n", "des": "This package contains the QueryParser.jj source file for the Surround parser."}
{"index": 308, "repo": "pdfbox-3.0.0-beta1", "code": "Package: measurement\n\nClasses and Interfaces: \nClass PDMeasureDictionary; // This class represents a measure dictionary.\nClass PDNumberFormatDictionary; // This class represents a number format dictionary.\nClass PDRectlinearMeasureDictionary; // This class represents a rectlinear measure dictionary.\nClass PDViewportDictionary; // This class represents a viewport dictionary.\n", "des": "The measurement package contains classes that work with elements specifying measure properties."}
{"index": 2078, "repo": "spring-webmvc-6.0.11", "code": "Package: tags\n\nSub Packages: \npackage tags.form; // Spring's form tag library for JSP views in Spring's Web MVC framework.\n\nClasses and Interfaces: \npublic interface ArgumentAware; // Allows implementing tag to utilize nested spring:argument tags.\npublic class ArgumentTag extends BodyTagSupport; // The <argument> tag is based on the JSTL fmt:param tag.\npublic class BindErrorsTag extends HtmlEscapingAwareTag; // This <hasBindErrors> tag provides an Errors instance in case of bind errors.\npublic class BindTag extends HtmlEscapingAwareTag implements EditorAwareTag; // The <bind> tag supports evaluation of binding errors for a certain bean or bean property.\npublic interface EditorAwareTag; // Interface to be implemented by JSP tags that expose a PropertyEditor for a property that they are currently bound to.\npublic class EscapeBodyTag extends HtmlEscapingAwareTag implements BodyTag; // The <escapeBody> tag is used to escape its enclosed body content, applying HTML escaping and/or JavaScript escaping.\npublic class EvalTag extends HtmlEscapingAwareTag; // The <eval> tag evaluates a Spring expression (SpEL) and either prints the result or assigns it to a variable.\npublic class HtmlEscapeTag extends RequestContextAwareTag; // The <htmlEscape> tag sets default HTML escape value for the current page.\npublic abstract class HtmlEscapingAwareTag extends RequestContextAwareTag; // Superclass for tags that output content that might get HTML-escaped.\npublic class MessageTag extends HtmlEscapingAwareTag implements ArgumentAware; // The <message> tag looks up a message in the scope of this page.\npublic class NestedPathTag extends TagSupport implements TryCatchFinally; // The <nestedPath> tag supports and assists with nested beans or bean properties in the model.\npublic class Param extends Object; // Bean used to pass name-value pair parameters from a ParamTag to a ParamAware tag.\npublic interface ParamAware; // Allows implementing tag to utilize nested spring:param tags.\npublic class ParamTag extends BodyTagSupport; // The <param> tag collects name-value parameters and passes them to a ParamAware ancestor in the tag hierarchy.\npublic abstract class RequestContextAwareTag extends TagSupport implements TryCatchFinally; // Superclass for all tags that require a RequestContext.\n", "des": "This package contains Spring's JSP standard tag library for JSP 2.0+."}
{"index": 832, "repo": "calcite-core-1.34.0", "code": "Package: model\n\nClasses and Interfaces: \nClass JsonColumn; // JSON object representing a column.\nClass JsonCustomSchema; // JSON schema element that represents a custom schema.\nClass JsonCustomTable; // Custom table schema element.\nClass JsonFunction; // Function schema element.\nClass JsonJdbcSchema; // JSON object representing a schema that maps to a JDBC database.\nClass JsonLattice; // Element that describes a star schema and provides a framework for defining, recognizing, and recommending materialized views at various levels of aggregation.\nClass JsonMapSchema; // JSON object representing a schema whose tables are explicitly specified.\nClass JsonMaterialization; // Element that describes how a table is a materialization of a query.\nClass JsonMeasure; // An aggregate function applied to a column (or columns) of a lattice.\nClass JsonRoot; // Root schema element.\nClass JsonSchema; // Schema schema element.\nClass JsonStream; // Information about whether a table allows streaming.\nClass JsonTable; // Table schema element.\nClass JsonTile; // Materialized view within a JsonLattice.\nClass JsonType; // Type schema element.\nClass JsonTypeAttribute; // JSON object representing a type attribute.\nClass JsonView; // View schema element.\nClass ModelHandler; // Reads a model and creates schema objects accordingly.\nEnum JsonSchema.Type; // Built-in schema types.\nEnum ModelHandler.ExtraOperand; // Extra operands automatically injected into a JsonCustomSchema.operand, as extra context for the adapter.\n", "des": "Provides model files, in JSON format, defining schemas and other metadata."}
{"index": 901, "repo": "commons-jcs3-core-3.1", "code": "Package: mru\n\nClasses and Interfaces: \nClass MRUMemoryCache<K,V>; // The most recently used items move to the front of the list and get spooled to disk if the cache hub is configured to use a disk cache.\n", "des": "A memory plugin implemented using a 'most recently used' removal policy."}
{"index": 1427, "repo": "spring-boot-actuator-3.1.1", "code": "Package: tomcat\n\nClasses and Interfaces: \npublic class TomcatMetricsBinder extends Object implements org.springframework.context.ApplicationListener<org.springframework.boot.context.event.ApplicationStartedEvent>, org.springframework.beans.factory.DisposableBean; // Binds TomcatMetrics in response to the ApplicationStartedEvent.\n", "des": "Actuator support for Tomcat metrics."}
{"index": 1090, "repo": "lucene-analyzers-smartcn-8.11.2", "code": "Package: smart\n\nSub Packages: \npackage smart.hhmm; // SmartChineseAnalyzer Hidden Markov Model package.\n\nClasses and Interfaces: \nClass AnalyzerProfile; // Manages analysis data configuration for SmartChineseAnalyzer\nClass CharType; // Internal SmartChineseAnalyzer character type constants.\nClass HMMChineseTokenizer; // Tokenizer for Chinese or mixed Chinese-English text.\nClass HMMChineseTokenizerFactory; // Factory for HMMChineseTokenizer\nClass SmartChineseAnalyzer; // SmartChineseAnalyzer is an analyzer for Chinese or mixed Chinese-English text.\nClass Utility; // SmartChineseAnalyzer utility constants and methods\nClass WordType; // Internal SmartChineseAnalyzer token type constants\n", "des": "Analyzer for Simplified Chinese, which indexes words."}
{"index": 2699, "repo": "spring-integration-http-6.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class DefaultHttpHeaderMapper extends Object implements org.springframework.integration.mapping.HeaderMapper<org.springframework.http.HttpHeaders>, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // Default HeaderMapper implementation for HTTP.\npublic class IntegrationWebExchangeBindException extends org.springframework.web.bind.support.WebExchangeBindException; // A WebExchangeBindException extension for validation error with a failed message context.\n", "des": "Provides classes to support Http endpoints, including header mapping."}
{"index": 1669, "repo": "spring-boot-cli-3.1.1", "code": "Package: core\n\nClasses and Interfaces: \npublic class HelpCommand extends AbstractCommand; // Internal Command used for 'help' requests.\npublic class HintCommand extends AbstractCommand; // Internal Command to provide hints for shell auto-completion.\npublic class VersionCommand extends AbstractCommand; // Command to display the 'version' number.\n", "des": "Core CLI commands."}
{"index": 2050, "repo": "spring-boot-loader-3.1.1", "code": "Package: jarmode\n\nClasses and Interfaces: \npublic interface JarMode; // Interface registered in spring.factories to provides extended 'jarmode' support.\npublic final class JarModeLauncher extends Object; // Delegate class used to launch the fat jar in a specific mode.\n", "des": "Support for launching the JAR using jarmode."}
{"index": 1309, "repo": "groovy-all-4.0.13", "code": "Package: sql\n\nClasses and Interfaces: \npublic class BatchingPreparedStatementWrapper extends BatchingStatementWrapper; // Class which delegates to a PreparedStatement but keeps track of a batch count size.\npublic class BatchingStatementWrapper extends GroovyObjectSupport implements AutoCloseable; // Class which delegates to a Statement but keeps track of a batch count size.\npublic class DataSet extends Sql; // An enhancement of Groovy's Sql class providing support for accessing and querying databases using POGO fields and operators rather than JDBC-level API calls and RDBMS column names.\npublic interface ExpandedVariable; // Identifies a variable to be expanded into the sql string rather than representing a placeholder.\npublic interface GroovyResultSet extends GroovyObject, ResultSet; // Represents an extent of objects\npublic class GroovyResultSetExtension extends GroovyObjectSupport; // GroovyResultSetExtension implements additional logic for ResultSet.\npublic final class GroovyResultSetProxy extends Object implements InvocationHandler; // GroovyResultSetProxy is used to create a proxy for GroovyResultSet.\npublic class GroovyRowResult extends GroovyObjectSupport implements Map<String,Object>; // Represents an extent of objects.\npublic interface InOutParameter extends InParameter, OutParameter; // A typed parameter passed to, and returned from a CallableStatement.\npublic interface InParameter; // A typed parameter to pass to a query\npublic interface OutParameter; // A parameter to be returned from a CallableStatement.\npublic class ResultSetMetaDataWrapper extends GroovyObjectSupport; // This class defines a wrapper for accessing a specific column in ResultSetMetaData.\npublic interface ResultSetOutParameter extends OutParameter; // A ResultSet out parameter.\npublic class Sql extends Object implements AutoCloseable; // A facade over Java's normal JDBC APIs providing greatly simplified resource management and result set handling.\npublic class SqlOrderByVisitor extends CodeVisitorSupport;\npublic class SqlWhereVisitor extends CodeVisitorSupport;\npublic class SqlWithParams extends Object;\n", "des": "Groovy helper classes for working with SQL data as Groovy objects"}
{"index": 2879, "repo": "spring-integration-core-6.1.2", "code": "Package: selector\n\nClasses and Interfaces: \npublic class MessageSelectorChain extends Object implements MessageSelector; // A message selector implementation that passes incoming messages through a chain of selectors.\npublic static enum MessageSelectorChain.VotingStrategy extends Enum<MessageSelectorChain.VotingStrategy>;\npublic class MetadataStoreSelector extends Object implements MessageSelector; // The MessageSelector implementation using a ConcurrentMetadataStore and MessageProcessor.\npublic class PayloadTypeSelector extends Object implements MessageSelector; // A MessageSelector implementation that checks the type of the Message payload.\npublic class UnexpiredMessageSelector extends Object implements MessageSelector; // A MessageSelector that accepts Messages that are not yet expired.\n", "des": "Provides classes related to message selection."}
{"index": 3678, "repo": "solr-core-9.3.0", "code": "Package: query\n\nClasses and Interfaces: \nClass FilterQuery; // A filtered query wrapped around another query similar to BooleanClause.Occur.FILTER -- it scores as 0.\nClass SolrRangeQuery;\n", "des": "Solr Queries"}
{"index": 944, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: interceptor\n\nClasses and Interfaces: \nInterface ClientInterceptor; // Workflow interface that allows for customized client-side message interception.\nClass AbstractValidatingInterceptor; // Abstract base class for ClientInterceptor implementations that validate part of the message using a schema.\nClass ClientInterceptorAdapter; // Default implementation of the ClientInterceptor interface, for simplified implementation of pre-only/post-only interceptors.\nClass PayloadValidatingInterceptor; // Client-side interceptor that validates the contents of WebServiceMessages using a schema.\nClass WebServiceValidationException; // Exception thrown whenever a validation error occurs on the client-side.\n", "des": "Provides the ClientInterceptor interface, and validating interceptors."}
{"index": 1630, "repo": "spring-kafka-3.0.9", "code": "Package: requestreply\n\nClasses and Interfaces: \npublic class AggregatingReplyingKafkaTemplate<K,V,R> extends ReplyingKafkaTemplate<K,V,Collection<org.apache.kafka.clients.consumer.ConsumerRecord<K,R>>> implements BatchConsumerAwareMessageListener<K,Collection<org.apache.kafka.clients.consumer.ConsumerRecord<K,R>>>; // A replying template that aggregates multiple replies with the same correlation id.\npublic final class CorrelationKey extends Object; // Wrapper for byte[] that can be used as a hash key.\npublic class KafkaReplyTimeoutException extends KafkaException; // Exception when a reply is not received within a timeout.\npublic interface ReplyingKafkaOperations<K,V,R>; // Request/reply operations.\npublic class ReplyingKafkaTemplate<K,V,R> extends KafkaTemplate<K,V> implements BatchMessageListener<K,R>, org.springframework.beans.factory.InitializingBean, org.springframework.context.SmartLifecycle, org.springframework.beans.factory.DisposableBean, ReplyingKafkaOperations<K,V,R>, ConsumerSeekAware; // A KafkaTemplate that implements request/reply semantics.\npublic class RequestReplyFuture<K,V,R> extends CompletableFuture<org.apache.kafka.clients.consumer.ConsumerRecord<K,R>>; // A CompletableFuture for requests/replies.\npublic class RequestReplyMessageFuture<K,V> extends CompletableFuture<org.springframework.messaging.Message<?>>; // A listenable future for Message replies.\npublic class RequestReplyTypedMessageFuture<K,V,P> extends RequestReplyMessageFuture<K,V>; // A listenable future for Message replies with a specific payload type.\n", "des": "Provides classes for request/reply semantics."}
{"index": 2487, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: batch\n\nClasses and Interfaces: \n@AutoConfiguration(after=ObservationAutoConfiguration.class) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @ConditionalOnClass({io.micrometer.observation.ObservationRegistry.class,org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor.class}) public class BatchObservationAutoConfiguration extends Object; // Auto-configuration for instrumentation of Spring Batch Jobs.\n", "des": "Auto-configuration for Spring Batch observations."}
{"index": 1584, "repo": "spring-security-oauth2-client-6.1.2", "code": "Package: web\n\nClasses and Interfaces: \npublic final class AuthenticatedPrincipalOAuth2AuthorizedClientRepository extends Object implements OAuth2AuthorizedClientRepository; // An implementation of an OAuth2AuthorizedClientRepository that delegates to the provided OAuth2AuthorizedClientService if the current Principal is authenticated, otherwise, to the default (or provided) OAuth2AuthorizedClientRepository if the current request is unauthenticated (or anonymous).\npublic interface AuthorizationRequestRepository<T extends org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest>; // Implementations of this interface are responsible for the persistence of OAuth2AuthorizationRequest between requests.\npublic final class DefaultOAuth2AuthorizationRequestResolver extends Object implements OAuth2AuthorizationRequestResolver; // An implementation of an OAuth2AuthorizationRequestResolver that attempts to resolve an OAuth2AuthorizationRequest from the provided HttpServletRequest using the default request URI pattern /oauth2/authorization/{registrationId}.\npublic final class DefaultOAuth2AuthorizedClientManager extends Object implements OAuth2AuthorizedClientManager; // The default implementation of an OAuth2AuthorizedClientManager for use within the context of a HttpServletRequest.\npublic static class DefaultOAuth2AuthorizedClientManager.DefaultContextAttributesMapper extends Object implements Function<OAuth2AuthorizeRequest,Map<String,Object>>; // The default implementation of the contextAttributesMapper.\npublic final class DefaultReactiveOAuth2AuthorizedClientManager extends Object implements ReactiveOAuth2AuthorizedClientManager; // The default implementation of a ReactiveOAuth2AuthorizedClientManager for use within the context of a ServerWebExchange.\npublic static class DefaultReactiveOAuth2AuthorizedClientManager.DefaultContextAttributesMapper extends Object implements Function<OAuth2AuthorizeRequest,reactor.core.publisher.Mono<Map<String,Object>>>; // The default implementation of the contextAttributesMapper.\npublic final class HttpSessionOAuth2AuthorizationRequestRepository extends Object implements AuthorizationRequestRepository<org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest>; // An implementation of an AuthorizationRequestRepository that stores OAuth2AuthorizationRequest in the HttpSession.\npublic final class HttpSessionOAuth2AuthorizedClientRepository extends Object implements OAuth2AuthorizedClientRepository; // An implementation of an OAuth2AuthorizedClientRepository that stores OAuth2AuthorizedClient's in the HttpSession.\n", "des": "OAuth 2.0 Client Filter's and supporting classes and interfaces."}
{"index": 41, "repo": "ignite-core-2.15.0", "code": "Package: spi\n\nSub Packages: \npackage spi.checkpoint; // Contains APIs for checkpoint SPI.\npackage spi.collision; // Contains APIs for collision SPI.\npackage spi.indexing; // Contains APIs for indexing SPI.\npackage spi.loadbalancing; // Contains APIs for load balancing SPI.\npackage spi.communication; // Contains APIs for grid communication SPI.\npackage spi.deployment; // Contains APIs for deployment SPI.\npackage spi.discovery; // Contains APIs for topology manager SPI.\npackage spi.failover; // Contains APIs for failover SPI.\npackage spi.eventstorage; // Contains APIs for event storage SPI.\npackage spi.encryption; // Contains APIs for encryption SPI.\npackage spi.metric; // Contains common classes and interfaces for metric SPI implementations.\npackage spi.systemview; // Contains common classes and interfaces for system view SPI implementations.\npackage spi.tracing; // Contains common classes and interfaces for tracing SPI implementations.\n\nClasses and Interfaces: \nInterface IgniteSpi; // This interface defines life-cycle of SPI implementation.\nInterface IgniteSpiCloseableIterator<T>; // Closeable iterator.\nInterface IgniteSpiContext; // SPI context provides common functionality for all SPI implementations.\nInterface IgniteSpiManagementMBean; // This interface defines basic MBean for all SPI implementations.\nInterface IgniteSpiTimeoutObject; // Provides possibility to schedule delayed execution, see IgniteSpiContext.addTimeoutObject(IgniteSpiTimeoutObject).\nInterface TimeoutStrategy; // Strategy to calculate next timeout and check if total timeout reached.\nClass ExponentialBackoffTimeoutStrategy; // Strategy which incorporates retriable network operation, handling of totalTimeout logic.\nClass IgniteNodeValidationResult; // Result of joining node validation.\nClass IgniteSpiAdapter; // This class provides convenient adapter for SPI implementations.\nClass IgniteSpiMBeanAdapter; // This class provides convenient adapter for MBean implementations.\nClass IgniteSpiOperationTimeoutHelper; // Object that incorporates logic that determines a timeout value for the next network related operation and checks whether a failure detection timeout is reached or not.\nClass IgniteSpiThread; // This class provides convenient adapter for threads used by SPIs.\nClass IgniteSpiThreadFactory; // This class provides implementation of ThreadFactory factory for creating grid SPI threads.\n", "des": "Contains common classes and interfaces for SPI implementations."}
{"index": 2, "repo": "connect-api-3.5.0", "code": "Package: policy\n\nClasses and Interfaces: \nInterface ConnectorClientConfigOverridePolicy; // An interface for enforcing a policy on overriding of Kafka client configs via the connector configs.\nClass ConnectorClientConfigRequest;\nEnum ConnectorClientConfigRequest.ClientType;\n", "des": "Provides pluggable interfaces for policies controlling how users can configure connectors."}
{"index": 368, "repo": "commons-geometry-euclidean-1.0", "code": "Package: shape\n\nClasses and Interfaces: \nClass Parallelepiped; // Class representing parallelepipeds, i.e.\nClass Parallelepiped.Builder; // Class designed to aid construction of Parallelepiped instances.\nClass Sphere; // Class representing a 3 dimensional sphere in Euclidean space.\n", "des": "This package provides utilities for constructing basic 3D shapes."}
{"index": 1865, "repo": "spring-test-6.0.11", "code": "Package: setup\n\nClasses and Interfaces: \npublic abstract class AbstractMockMvcBuilder<B extends AbstractMockMvcBuilder<B>> extends MockMvcBuilderSupport implements ConfigurableMockMvcBuilder<B>; // Abstract implementation of MockMvcBuilder with common methods for configuring filters, default request properties, global expectations and global result actions.\npublic interface ConfigurableMockMvcBuilder<B extends ConfigurableMockMvcBuilder<B>> extends MockMvcBuilder; // Defines common methods for building a MockMvc.\npublic class DefaultMockMvcBuilder extends AbstractMockMvcBuilder<DefaultMockMvcBuilder>; // A concrete implementation of AbstractMockMvcBuilder that provides the WebApplicationContext supplied to it as a constructor argument.\npublic final class MockMvcBuilders extends Object; // The main class to import in order to access all available MockMvcBuilders.\npublic interface MockMvcConfigurer; // Contract for customizing a ConfigurableMockMvcBuilder in some specific way, e.g.\npublic abstract class MockMvcConfigurerAdapter extends Object implements MockMvcConfigurer; // An empty method implementation of MockMvcConfigurer.\npublic class SharedHttpSessionConfigurer extends Object implements MockMvcConfigurer; // MockMvcConfigurer that stores and re-uses the HTTP session across multiple requests performed through the same MockMvc instance.\npublic class StandaloneMockMvcBuilder extends AbstractMockMvcBuilder<StandaloneMockMvcBuilder>; // A MockMvcBuilder that accepts @Controller registrations thus allowing full control over the instantiation and initialization of controllers and their dependencies similar to plain unit tests, and also making it possible to test one controller at a time.\n", "des": "Contains built-in MockMvcBuilder implementations."}
{"index": 2216, "repo": "spring-data-commons-3.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic class AnnotationRepositoryConfigurationSource extends RepositoryConfigurationSourceSupport; // Annotation based RepositoryConfigurationSource.\npublic interface AotRepositoryContext extends AotContext; // AotContext specific to Spring Data Repository infrastructure.\npublic enum BootstrapMode extends Enum<BootstrapMode>; // Enumeration to define in which way repositories are bootstrapped.\npublic class CustomRepositoryImplementationDetector extends Object; // Detects the custom implementation for a Repository instance.\npublic final class DefaultRepositoryBaseClass extends Object; // Placeholder class to be used in @Enable annotation's repositoryBaseClass attribute.\npublic class DefaultRepositoryConfiguration<T extends RepositoryConfigurationSource> extends Object implements RepositoryConfiguration<T>; // Default implementation of RepositoryConfiguration.\npublic class FragmentMetadata extends Object; // Value object for a discovered Repository fragment interface.\npublic interface ImplementationDetectionConfiguration; // Expresses configuration to be used to detect implementation classes for repositories and repository fragments.\npublic interface ImplementationLookupConfiguration extends ImplementationDetectionConfiguration; // Configuration that's used to lookup an implementation type for a repository or fragment interface.\npublic class NamedQueriesBeanDefinitionBuilder extends Object; // Builder to create a BeanDefinition for a NamedQueries instance using properties.\npublic class NamedQueriesBeanDefinitionParser extends Object implements BeanDefinitionParser; // BeanDefinitionParser to create BeanDefinitions of NamedQueries instances looking up a Properties file fom the given location.\npublic class PersistentEntitiesFactoryBean extends Object implements FactoryBean<PersistentEntities>; // Factory been to create PersistentEntities from a MappingContext.\npublic class PropertiesBasedNamedQueriesFactoryBean extends PropertiesLoaderSupport implements FactoryBean<PropertiesBasedNamedQueries>, InitializingBean; // Factory bean to create PropertiesBasedNamedQueries.\npublic class RepositoryBeanDefinitionParser extends Object implements BeanDefinitionParser; // Base class to implement repository namespaces.\npublic abstract class RepositoryBeanDefinitionRegistrarSupport extends Object implements ImportBeanDefinitionRegistrar, ResourceLoaderAware, EnvironmentAware; // Base class to implement ImportBeanDefinitionRegistrars to enable repository\npublic interface RepositoryConfiguration<T extends RepositoryConfigurationSource>; // Configuration information for a single repository instance.\npublic class RepositoryConfigurationDelegate extends Object; // Delegate for configuration integration to reuse the general way of detecting repositories.\npublic interface RepositoryConfigurationExtension; // SPI to implement store specific extension to the repository bean definition registration process.\n", "des": "Support classes for repository namespace and JavaConfig integration."}
{"index": 3728, "repo": "lucene-queryparser-9.7.0", "code": "Package: ext\n\nClasses and Interfaces: \nClass ExtendableQueryParser; // The ExtendableQueryParser enables arbitrary query parser extension based on a customizable field naming scheme.\nClass ExtensionQuery; // ExtensionQuery holds all query components extracted from the original query string like the query field and the extension query string.\nClass Extensions; // The Extensions class represents an extension mapping to associate ParserExtension instances with extension keys.\nClass Extensions.Pair<Cur,​Cud>; // This class represents a generic pair.\nClass ParserExtension; // This class represents an extension base class to the Lucene standard QueryParser.\n", "des": "Extendable QueryParser provides a simple and flexible extension mechanism by overloading query field names."}
{"index": 3428, "repo": "hibernate-core-5.6.15.Final", "code": "Package: selector\n\nSub Packages: \npackage selector.spi; // Defines actual contract used for strategy selection : StrategySelector.\n\nClasses and Interfaces: \nInterface StrategyRegistration<T>; // Describes the registration of a named strategy implementation.\nInterface StrategyRegistrationProvider; // Responsible for providing the registrations of strategy selector(s).\nClass SimpleStrategyRegistrationImpl<T>; // A simple implementation of StrategyRegistration.\n", "des": "Defines a feature-set around named registration of implementations of various contracts and the ability to select those implementations."}
{"index": 386, "repo": "commons-dbcp2-2.9.0", "code": "Package: dbcp2\n\nSub Packages: \npackage dbcp2.cpdsadapter; // This package contains one public class which is a ConnectionPoolDataSource (CPDS) implementation that can be used to adapt older Driver based JDBC implementations.\npackage dbcp2.datasources; // This package contains two DataSources: PerUserPoolDataSource and SharedPoolDataSource which provide a database connection pool.\npackage dbcp2.managed; // This package provides support for pooling of ManagedConnections.\n\nClasses and Interfaces: \nInterface BasicDataSourceMXBean; // Interface to keep API compatibility.\nInterface ConnectionFactory; // Abstract factory interface for creating Connections.\nInterface DataSourceMXBean; // Defines the methods that will be made available via JMX.\nInterface PoolableConnectionMXBean; // Defines the attributes and methods that will be exposed via JMX for PoolableConnection instances.\nClass AbandonedTrace; // Tracks connection usage for recovering and reporting abandoned connections.\nClass BasicDataSource; // Basic implementation of javax.sql.DataSource that is configured via JavaBeans properties.\nClass BasicDataSourceFactory; // JNDI object factory that creates an instance of BasicDataSource that has been configured based on the RefAddr values of the specified Reference, which must match the names and data types of the BasicDataSource bean properties with the following exceptions:\nClass Constants; // Constants.\nClass DataSourceConnectionFactory; // A DataSource-based implementation of ConnectionFactory.\nClass DelegatingCallableStatement; // A base delegating implementation of CallableStatement.\nClass DelegatingConnection<C extends Connection>; // A base delegating implementation of Connection.\nClass DelegatingDatabaseMetaData; // A base delegating implementation of DatabaseMetaData.\nClass DelegatingPreparedStatement; // A base delegating implementation of PreparedStatement.\nClass DelegatingResultSet; // A base delegating implementation of ResultSet.\nClass DelegatingStatement; // A base delegating implementation of Statement.\nClass DriverConnectionFactory; // A Driver-based implementation of ConnectionFactory.\nClass DriverManagerConnectionFactory; // A DriverManager-based implementation of ConnectionFactory.\nClass Jdbc41Bridge; // Defines bridge methods to JDBC 4.1 (Java 7) methods to allow call sites to operate safely (without AbstractMethodError) when using a JDBC driver written for JDBC 4.0 (Java 6).\nClass PoolableCallableStatement; // A DelegatingCallableStatement that cooperates with PoolingConnection to implement a pool of CallableStatements.\n", "des": "Database Connection Pool API."}
{"index": 2326, "repo": "spring-boot-3.1.1", "code": "Package: messaging\n\nClasses and Interfaces: \n@FunctionalInterface public interface RSocketStrategiesCustomizer; // Callback interface that can be used to customize codecs configuration for an RSocket client and/or server with RSocketStrategies.\n", "des": "Support for RSocket-based messaging."}
{"index": 201, "repo": "nutch-2.4", "code": "Package: normalizer\n\nClasses and Interfaces: \nInterface Normalizable;\nClass SimpleStringNormalizer;\n", "des": "Normalizers for jsoup-extractor"}
{"index": 3133, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface JndiService; // Service providing simplified access to JNDI related features needed by Hibernate.\n", "des": "The SPI contracts for Hibernate JNDI support"}
{"index": 3276, "repo": "opencms-core-15.0", "code": "Package: i18n\n\nSub Packages: \npackage i18n.tools; // Tools for i18n.\n\nClasses and Interfaces: \nInterface CmsMultiMessages.I_KeyFallbackHandler; // Interface to provide fallback keys to be used when the message for a key is not found.\nInterface CmsVfsResourceBundle.I_Loader; // Implementors of this interface are responsible for actually loading the data from the VFS.\nInterface I_CmsLocaleHandler; // A locale handler returns the locale name to use for the given request context.\nInterface I_CmsMessageBundle; // Utility interface for generating localized messages for internal OpenCms operations.\nInterface I_CmsMessageContainer; // Interface which represents a message independent of the locale.\nInterface I_CmsResourceBundle; // Increases the visibility of some key methods of a ResourceBundle.\nClass A_CmsMessageBundle; // Convenience base class to access the localized messages of an OpenCms package.\nClass CmsAcceptLanguageHeaderParser; // Parses the HTTP Accept-Language header as per section 14.4 of RFC 2068 (HTTP 1.1 header field definitions) and creates a sorted list of Locales from it.\nClass CmsAcceptLanguageHeaderParser.AcceptLanguage; // Struct representing an element of the HTTP Accept-Language header.\nClass CmsDefaultLocaleHandler; // Default implementation of the locale handler.\nClass CmsEncoder; // The OpenCms CmsEncoder class provides static methods to decode and encode data.\nClass CmsI18nInfo; // Bundle of i18n setting to be used to setup a new request context.\nClass CmsListResourceBundle; // A list based resource bundle that with increased visibility of some key methods.\nClass CmsLocaleComparator; // Simple comparator implementation for locales, that compares the String value of the locales.\nClass CmsLocaleGroup; // Represents a group of resources which are locale variants of each other.\nClass CmsLocaleGroupService; // Helper class for manipulating locale groups.\nClass CmsLocaleManager; // Manages the locales configured for this OpenCms installation.\nClass CmsMessageContainer; // Contains a localized message key, it's arguments and a I_CmsMessageBundle.\nClass CmsMessages; // Reads localized resource Strings from a java.util.ResourceBundle and provides convenience methods to access the Strings from a template.\n", "des": "Classes to handle internalization (i18n) and locale selection in OpenCms."}
{"index": 599, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: storagemanager\n\nClasses and Interfaces: \nClass ManagedOutputStream; // Represents a managed output stream for target managed by a storage manager.\nClass StorageManager; // Storage managers provide a facility for tracking the state of a group of files having relationship with each others and being updated by several entities at the same time.\n", "des": "Provides the storage manager API."}
{"index": 2824, "repo": "groovy-xml-4.0.13", "code": "Package: dom\n\nClasses and Interfaces: \npublic class DOMCategory extends Object; // Category class which adds GPath style operations to Java's DOM classes.\n", "des": "Groovy XML Dom processing classes."}
{"index": 2023, "repo": "spring-messaging-6.0.11", "code": "Package: messaging\n\nSub Packages: \npackage messaging.converter; // Provides support for message conversion.\npackage messaging.core; // Defines interfaces and implementation classes for messaging templates.\npackage messaging.handler; // Basic abstractions for working with message handler methods.\npackage messaging.rsocket; // Support for the RSocket protocol.\npackage messaging.simp; // Generic support for Simple Messaging Protocols including protocols such as STOMP.\npackage messaging.support; // Provides implementations of Message along with a MessageBuilder and MessageHeaderAccessor for building and working with messages and message headers, as well as various MessageChannel implementations and channel interceptor support.\npackage messaging.tcp; // Contains abstractions and implementation classes for establishing TCP connections via TcpOperations, handling messages via TcpConnectionHandler, as well as sending messages via TcpConnection.\n\nClasses and Interfaces: \npublic interface Message<T>; // A generic message representation with headers and body.\n@FunctionalInterface public interface MessageChannel; // Defines methods for sending messages.\npublic class MessageDeliveryException extends MessagingException; // Exception that indicates an error occurred during message delivery.\n@FunctionalInterface public interface MessageHandler; // Simple contract for handling a Message.\npublic class MessageHandlingException extends MessagingException; // Exception that indicates an error occurred during message handling.\npublic class MessageHeaders extends Object implements Map<String,Object>, Serializable; // The headers for a Message.\npublic class MessagingException extends org.springframework.core.NestedRuntimeException; // The base exception for any failures related to messaging.\npublic interface PollableChannel extends MessageChannel; // A MessageChannel from which messages may be actively received through polling.\n@FunctionalInterface public interface ReactiveMessageHandler; // Reactive contract for handling a Message.\npublic interface SubscribableChannel extends MessageChannel; // A MessageChannel that maintains a registry of subscribers and invokes them to handle messages sent through this channel.\n", "des": "Support for working with messaging APIs and protocols."}
{"index": 2436, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: env\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.env.EnvironmentEndpoint.class) @EnableConfigurationProperties(EnvironmentEndpointProperties.class) public class EnvironmentEndpointAutoConfiguration extends Object; // Auto-configuration for the EnvironmentEndpoint.\n@ConfigurationProperties(\"management.endpoint.env\") public class EnvironmentEndpointProperties extends Object; // Configuration properties for EnvironmentEndpoint.\n", "des": "Auto-configuration for actuator Spring Environment concerns."}
{"index": 774, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: es\n\nClasses and Interfaces: \nClass SpanishAnalyzer; // Analyzer for Spanish.\nClass SpanishLightStemFilter; // A TokenFilter that applies SpanishLightStemmer to stem Spanish words.\nClass SpanishLightStemFilterFactory; // Factory for SpanishLightStemFilter.\nClass SpanishLightStemmer; // Light Stemmer for Spanish\nClass SpanishMinimalStemFilter; // A TokenFilter that applies SpanishMinimalStemmer to stem Spanish words.\nClass SpanishMinimalStemFilterFactory; // Factory for SpanishMinimalStemFilter.\nClass SpanishMinimalStemmer; // Minimal plural stemmer for Spanish.\n", "des": "Analyzer for Spanish."}
{"index": 1455, "repo": "spring-data-redis-3.1.2", "code": "Package: query\n\nClasses and Interfaces: \npublic abstract class QueryUtils extends Object; // Utilities for SortQuery implementations.\npublic interface SortCriterion<K>; // Internal interface part of the Sort DSL.\npublic interface SortQuery<K>; // High-level abstraction over a Redis SORT (generified equivalent of SortParameters).\npublic class SortQueryBuilder<K> extends Object; // Simple builder class for constructing SortQuery.\n", "des": "Query package for Redis template."}
{"index": 88, "repo": "ignite-core-2.15.0", "code": "Package: local\n\nClasses and Interfaces: \nInterface LocalDeploymentSpiMBean; // Management MBean for LocalDeploymentSpi SPI.\nClass LocalDeploymentSpi; // Local deployment SPI that implements only within VM deployment on local node via LocalDeploymentSpi.register(ClassLoader, Class) method.\n", "des": "Contains default local deployment SPI implementation."}
{"index": 3000, "repo": "spring-web-6.0.11", "code": "Package: cbor\n\nClasses and Interfaces: \npublic class Jackson2CborDecoder extends AbstractJackson2Decoder; // Decode bytes into CBOR and convert to Object's with Jackson.\npublic class Jackson2CborEncoder extends AbstractJackson2Encoder; // Encode from an Object to bytes of CBOR objects using Jackson.\npublic class KotlinSerializationCborDecoder extends KotlinSerializationBinaryDecoder<kotlinx.serialization.cbor.Cbor>; // Decode a byte stream into CBOR and convert to Objects with kotlinx.serialization.\npublic class KotlinSerializationCborEncoder extends KotlinSerializationBinaryEncoder<kotlinx.serialization.cbor.Cbor>; // Encode from an Object stream to a byte stream of CBOR objects using kotlinx.serialization.\n", "des": "CBOR encoder and decoder support."}
{"index": 2037, "repo": "spring-messaging-6.0.11", "code": "Package: annotation\n\nSub Packages: \npackage annotation.support; // Support classes for handling messages from simple messaging protocols (like STOMP).\n\nClasses and Interfaces: \n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface SendToUser; // Indicates the return value of a message-handling method should be sent as a Message to the specified destination(s) further prepended with \"/user/{username}\" where the user name is extracted from the headers of the input message being handled.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Reflective(MessageMappingReflectiveProcessor.class) public @interface SubscribeMapping; // Annotation for mapping subscription messages onto specific handler methods based on the destination of a subscription.\n", "des": "Annotations and for handling messages from SImple Messaging Protocols such as STOMP."}
{"index": 1945, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: jersey\n\nClasses and Interfaces: \n@AutoConfiguration(before=DispatcherServletAutoConfiguration.class, after=JacksonAutoConfiguration.class) @ConditionalOnClass({org.glassfish.jersey.server.spring.SpringComponentProvider.class,jakarta.servlet.ServletRegistration.class}) @ConditionalOnBean(type=\"org.glassfish.jersey.server.ResourceConfig\") @ConditionalOnWebApplication(type=SERVLET) @AutoConfigureOrder(-2147483648) @EnableConfigurationProperties(JerseyProperties.class) public class JerseyAutoConfiguration extends Object implements org.springframework.web.context.ServletContextAware; // Auto-configuration for Jersey.\n@Order(-2147483648) public static final class JerseyAutoConfiguration.JerseyWebApplicationInitializer extends Object implements org.springframework.web.WebApplicationInitializer;\n@ConfigurationProperties(prefix=\"spring.jersey\") public class JerseyProperties extends Object; // @ConfigurationProperties for Jersey.\npublic static class JerseyProperties.Filter extends Object;\npublic static class JerseyProperties.Servlet extends Object;\npublic static enum JerseyProperties.Type extends Enum<JerseyProperties.Type>;\n@FunctionalInterface public interface ResourceConfigCustomizer; // Callback interface that can be implemented by beans wishing to customize Jersey's ResourceConfig before it is used.\n", "des": "Auto-configuration for Jersey."}
{"index": 3100, "repo": "jena-querybuilder-4.9.0", "code": "Package: clauses\n\nClasses and Interfaces: \npublic interface ConstructClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the ConstructClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rConstructTemplate\npublic interface DatasetClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the DatasetClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rDatasetClause\npublic interface PrologClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the PrologClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rPrologue\npublic interface SelectClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the SelectClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rSelectClause\npublic interface SolutionModifierClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the SolutionClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rSolutionModifier\npublic interface ValuesClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the ValueClause as per https://www.w3.org/TR/sparql11-query/#rValuesClause Conceptually this the values clause constructs a table comprising columns named by variables and rows of data for those columns.\npublic interface WhereClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the WhereClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rWhereClause\n", "des": "Interfaces that describe various SPARQL clauses as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321."}
{"index": 955, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: jaxb\n\nClasses and Interfaces: \nClass AbstractJaxb2PayloadMethodProcessor; // Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations that use JAXB2.\nClass JaxbElementPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports JAXBElement objects.\nClass XmlRootElementPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports parameters annotated with @XmlRootElement or @XmlType, and return values annotated with @XmlRootElement.\n", "des": "Provides JAXB2-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces."}
{"index": 1175, "repo": "commons-math3-3.6.1", "code": "Package: evaluation\n\nClasses and Interfaces: \nClass ClusterEvaluator<T extends Clusterable>; // Base class for cluster evaluation methods.\nClass SumOfClusterVariances<T extends Clusterable>; // Computes the sum of intra-cluster distance variances according to the formula:\n", "des": "Cluster evaluation methods."}
{"index": 1218, "repo": "commons-text-1.10.0", "code": "Package: diff\n\nClasses and Interfaces: \nInterface CommandVisitor<T>; // This interface should be implemented by user object to walk through EditScript objects.\nInterface ReplacementsHandler<T>; // This interface is devoted to handle synchronized replacement sequences.\nClass DeleteCommand<T>; // Command representing the deletion of one object of the first sequence.\nClass EditCommand<T>; // Abstract base class for all commands used to transform an objects sequence into another one.\nClass EditScript<T>; // This class gathers all the commands needed to transform one objects sequence into another objects sequence.\nClass InsertCommand<T>; // Command representing the insertion of one object of the second sequence.\nClass KeepCommand<T>; // Command representing the keeping of one object present in both sequences.\nClass ReplacementsFinder<T>; // This class handles sequences of replacements resulting from a comparison.\nClass StringsComparator; // It is guaranteed that the comparisons will always be done as o1.equals(o2) where o1 belongs to the first sequence and o2 belongs to the second sequence.\n", "des": "Provides algorithms for diff between strings."}
{"index": 709, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: jms\n\nClasses and Interfaces: \nClass Jms; // Factory class for JMS components.\nClass JmsDefaultListenerContainerSpec; // A DefaultMessageListenerContainer specific JmsListenerContainerSpec extension.\nClass JmsDestinationAccessorSpec<S extends JmsDestinationAccessorSpec<S,A>,A extends org.springframework.jms.support.destination.JmsDestinationAccessor>; // A base IntegrationComponentSpec for JmsDestinationAccessors.\nClass JmsInboundChannelAdapterSpec<S extends JmsInboundChannelAdapterSpec<S>>; // A MessageSourceSpec for a JmsDestinationPollingSource.\nClass JmsInboundChannelAdapterSpec.JmsInboundChannelSpecTemplateAware; // A JmsTemplate-based JmsInboundChannelAdapterSpec extension.\nClass JmsInboundGateway;\nClass JmsInboundGatewaySpec<S extends JmsInboundGatewaySpec<S>>; // A MessagingGatewaySpec for a JmsInboundGateway.\nClass JmsInboundGatewaySpec.JmsInboundGatewayListenerContainerSpec<S extends JmsListenerContainerSpec<S,C>,C extends org.springframework.jms.listener.AbstractMessageListenerContainer>; // An AbstractMessageListenerContainer-based JmsInboundGatewaySpec extension.\nClass JmsListenerContainerSpec<S extends JmsListenerContainerSpec<S,C>,C extends org.springframework.jms.listener.AbstractMessageListenerContainer>; // A JmsDestinationAccessorSpec for JmsListenerContainerSpecs.\nClass JmsMessageChannelSpec<S extends JmsMessageChannelSpec<S>>; // A JmsMessageChannelSpec for subscribable AbstractJmsChannels.\nClass JmsMessageDrivenChannelAdapter;\nClass JmsMessageDrivenChannelAdapterSpec<S extends JmsMessageDrivenChannelAdapterSpec<S>>; // A MessageProducerSpec for JmsMessageDrivenChannelAdapters.\nClass JmsMessageDrivenChannelAdapterSpec.JmsMessageDrivenChannelAdapterListenerContainerSpec<S extends JmsListenerContainerSpec<S,C>,C extends org.springframework.jms.listener.AbstractMessageListenerContainer>;\nClass JmsOutboundChannelAdapterSpec<S extends JmsOutboundChannelAdapterSpec<S>>; // A MessageHandlerSpec for a JmsSendingMessageHandler.\nClass JmsOutboundChannelAdapterSpec.JmsOutboundChannelSpecTemplateAware; // A JmsTemplate-based JmsOutboundChannelAdapterSpec extension.\nClass JmsOutboundGatewaySpec; // A MessageHandlerSpec for a JmsOutboundGateway.\n", "des": "Provides JMS Components support for Spring Integration Java DSL."}
{"index": 1666, "repo": "jena-core-4.9.0", "code": "Package: vocabulary\n\nClasses and Interfaces: \npublic class AS extends Object; // The standard Activity Stream vocabulary.\npublic class DC extends DC_11;\npublic class DC_10 extends Object; // Dublin Core version 1.0 vocabulary.\npublic class DC_11 extends Object; // Vocabulary definitions from file:vocabularies/dublin-core_11.xml\npublic class DCAT extends Object; // Constants for the W3C Data Catalog Vocabulary.\npublic class DCTerms extends Object; // Vocabulary definitions from vocabularies/dublin-core_terms.xml\npublic class DCTypes extends Object; // Vocabulary definitions from vocabularies/dublin-core_types.xml\npublic class LocationMappingVocab extends Object; // Vocabulary definitions from Vocabularies/location-mapping-rdfs.n3\npublic class OA extends Object; // The standard Open Annotation vocabulary.\npublic class OntDocManagerVocab extends Object; // Vocabulary definitions from file:vocabularies/ont-manager.rdf\npublic class OntEventsVocab extends Object; // Vocabulary definitions from file:vocabularies/ont-event.rdf\npublic class ORG extends Object; // Constants for the W3C Organization Ontology.\npublic class OWL extends Object; // Vocabulary definitions from file:vocabularies/owl.owl\npublic static class OWL.Init extends Object; // OWL constants are used during Jena initialization.\npublic class OWL2 extends Object; // OWL2 vocabulary.\npublic class OWLResults extends Object; // The vocabulary used by WebOnt to encode results of test runs.\npublic class OWLTest extends Object; // The vocabulary used by the WebOnt working group to define test manifests.\npublic class RDF extends Object; // The standard RDF vocabulary.\npublic static class RDF.Init extends Object; // RDF constants are used during Jena initialization.\npublic static final class RDF.Nodes extends Object; // The same items of vocabulary, but at the Node level, parked inside a nested class so that there's a simple way to refer to them.\npublic class RDFS extends Object; // RDFS vocabulary items\npublic static class RDFS.Init extends Object; // RDFS constants are used during Jena initialization.\n", "des": "A package containing constant classes with predefined constant objects for classes and properties defined in well known vocabularies."}
{"index": 1451, "repo": "spring-data-redis-3.1.2", "code": "Package: core\n\nSub Packages: \npackage core.convert; // Converters for Redis repository support utilizing mapping metadata.\npackage core.index; // Abstractions for Redis secondary indexes.\npackage core.mapping; // Redis specific repository support mapping meta information.\npackage core.query; // Query package for Redis template.\npackage core.script; // Lua script execution abstraction.\npackage core.types; // Redis domain specific types.\n\nClasses and Interfaces: \npublic interface BoundGeoOperations<K,M> extends BoundKeyOperations<K>; // GeoOperations bound to a certain key.\npublic interface BoundHashOperations<H,HK,HV> extends BoundKeyOperations<H>; // Hash operations bound to a certain key.\npublic interface BoundKeyOperations<K>; // Operations over a Redis key.\npublic interface BoundListOperations<K,V> extends BoundKeyOperations<K>; // List operations bound to a certain key.\npublic interface BoundSetOperations<K,V> extends BoundKeyOperations<K>; // Set operations bound to a certain key.\npublic interface BoundStreamOperations<K,HK,HV>; // Redis stream specific operations bound to a certain key.\npublic interface BoundValueOperations<K,V> extends BoundKeyOperations<K>; // Value (or String in Redis terminology) operations bound to a certain key.\npublic interface BoundZSetOperations<K,V> extends BoundKeyOperations<K>; // ZSet (or SortedSet) operations bound to a certain key.\npublic interface BulkMapper<T,V>; // Mapper translating Redis bulk value responses (typically returned by a sort query) to actual objects.\npublic interface ClusterOperations<K,V>; // Redis operations for cluster specific operations.\npublic class ConvertingCursor<S,T> extends Object implements Cursor<T>; // ConvertingCursor wraps a given cursor and applies given Converter to items prior to returning them.\npublic interface Cursor<T> extends CloseableIterator<T>; // Cursor abstraction to scan over the keyspace or elements within a data structure using a variant of a SCAN command.\npublic class DefaultTypedTuple<V> extends Object implements ZSetOperations.TypedTuple<V>; // Default implementation of TypedTuple.\n", "des": "Core package for integrating Redis with Spring concepts."}
{"index": 2494, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: scheduling\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint.class) public class ScheduledTasksEndpointAutoConfiguration extends Object; // Auto-configuration for ScheduledTasksEndpoint.\n", "des": "Auto-configuration for actuator scheduling concerns."}
{"index": 2934, "repo": "groovy-4.0.13", "code": "Package: runtime\n\nSub Packages: \npackage runtime.metaclass; // Internal classes related to Groovy's metaclass implementation.\npackage runtime.typehandling; // Classes used to execute special actions based on the type.\npackage runtime.wrappers; // Groovy wrapper classes for primitive types.\n\nClasses and Interfaces: \npublic abstract class AbstractComparator<T> extends Object implements Comparator<T>;\npublic class ArrayTypeUtils extends Object; // Utilities for handling array types\npublic class ArrayUtil extends Object; // This is a generated class used internally during the writing of bytecode within the CallSiteWriter logic.\npublic class BytecodeInterface8 extends Object; // This class contains methods special to optimizations used directly from bytecode in Groovy 1.8\npublic final class ComposedClosure<V> extends Closure<V>; // A wrapper for Closure to support composition.\npublic abstract class ConversionHandler extends Object implements InvocationHandler, Serializable; // This class is a general adapter to map a call to a Java interface to a given delegate.\npublic class ConvertedClosure extends ConversionHandler implements Serializable; // This class is a general adapter to adapt a closure to any Java interface.\npublic class ConvertedMap extends ConversionHandler; // This class is a general adapter to adapt a map of closures to any Java interface.\npublic final class CurriedClosure<V> extends Closure<V>; // A wrapper for Closure to support currying.\npublic class DefaultCachedMethodKey extends MethodKey; // A default implementation of MethodKey\npublic class DefaultGroovyMethods extends DefaultGroovyMethodsSupport; // This class defines new groovy methods which appear on normal JDK classes inside the Groovy environment.\npublic class DefaultGroovyMethodsSupport extends Object; // Support methods for DefaultGroovyMethods and PluginDefaultMethods.\npublic class DefaultGroovyStaticMethods extends Object; // This class defines all the new static groovy methods which appear on normal JDK classes inside the Groovy environment.\npublic class DefaultMethodKey extends MethodKey; // A default implementation of MethodKey\npublic class EncodingGroovyMethods extends Object; // This class defines all the encoding/decoding groovy methods which enhance the normal JDK classes when inside the Groovy environment.\npublic class EncodingGroovyMethodsSupport extends Object; // Keep this constant in a separate file as it is troublesome for Antlr to parse for doc purposes.\npublic class FlushingStreamWriter extends OutputStreamWriter; // Stream writer which flushes after each write operation.\n", "des": "Runtime classes for Groovy - whether the dynamic interpreter is being used, the compiler or the bytecode generator."}
{"index": 3507, "repo": "poi-5.2.3", "code": "Package: util\n\nClasses and Interfaces: \nInterface DelayableLittleEndianOutput; // Implementors of this interface allow client code to 'delay' writing to a certain section of a data output stream. A typical application is for writing BIFF records when the size is not known until well after the header has been written.\nInterface FixedField; // behavior of a field at a fixed location within a byte array\nInterface GenericRecordJsonWriter.GenericRecordHandler;\nInterface GenericRecordXmlWriter.GenericRecordHandler;\nInterface LittleEndianConsts; // a repository for constants shared by classes within this package\nInterface LittleEndianInput;\nInterface LittleEndianOutput;\nInterface TempFileCreationStrategy; // Interface used by the TempFile utility class to create temporary files.\nClass ArrayUtil; // Utility classes for dealing with arrays.\nClass BitField; // Manage operations dealing with bit-mapped fields.\nClass BitFieldFactory; // Returns immutable Bitfield instances.\nClass ByteField; // representation of a byte (8-bit) field at a fixed location within a byte array\nClass CodePageUtil; // Utilities for working with Microsoft CodePages.\nClass CodepointsUtil;\nClass Configurator; // Helper for fetching int values from system properties\nClass DefaultTempFileCreationStrategy; // Default implementation of the TempFileCreationStrategy used by TempFile: Files are collected into one directory and by default are deleted on exit from the VM.\nClass Dimension2DDouble;\nClass DrawingDump; // Dump out the aggregated escher records\nClass FontMetricsDumper;\nClass GenericRecordJsonWriter;\nClass GenericRecordUtil;\nClass GenericRecordUtil.AnnotatedFlag;\nClass GenericRecordXmlWriter;\nClass HexDump; // dump data in hexadecimal format\nClass HexRead; // Utilities to read hex from files.\nClass IntegerField; // representation of an integer (32-bit) field at a fixed location within a byte array\n", "des": "Top-level util package are classes that are useful throughout the project."}
{"index": 1579, "repo": "spring-security-oauth2-client-6.1.2", "code": "Package: endpoint\n\nClasses and Interfaces: \npublic abstract class AbstractOAuth2AuthorizationGrantRequest extends Object; // Base implementation of an OAuth 2.0 Authorization Grant request that holds an authorization grant credential and is used when initiating a request to the Authorization Server's Token Endpoint.\npublic abstract class AbstractWebClientReactiveOAuth2AccessTokenResponseClient<T extends AbstractOAuth2AuthorizationGrantRequest> extends Object implements ReactiveOAuth2AccessTokenResponseClient<T>; // Abstract base class for all of the WebClientReactive*TokenResponseClients that communicate to the Authorization Server's Token Endpoint.\npublic final class DefaultAuthorizationCodeTokenResponseClient extends Object implements OAuth2AccessTokenResponseClient<OAuth2AuthorizationCodeGrantRequest>; // The default implementation of an OAuth2AccessTokenResponseClient for the authorization_code grant.\npublic final class DefaultClientCredentialsTokenResponseClient extends Object implements OAuth2AccessTokenResponseClient<OAuth2ClientCredentialsGrantRequest>; // The default implementation of an OAuth2AccessTokenResponseClient for the client_credentials grant.\npublic final class DefaultJwtBearerTokenResponseClient extends Object implements OAuth2AccessTokenResponseClient<JwtBearerGrantRequest>; // The default implementation of an OAuth2AccessTokenResponseClient for the jwt-bearer grant.\n@Deprecated public final class DefaultPasswordTokenResponseClient extends Object implements OAuth2AccessTokenResponseClient<OAuth2PasswordGrantRequest>;\npublic final class DefaultRefreshTokenTokenResponseClient extends Object implements OAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>; // The default implementation of an OAuth2AccessTokenResponseClient for the refresh_token grant.\npublic class JwtBearerGrantRequest extends AbstractOAuth2AuthorizationGrantRequest; // A JWT Bearer Grant request that holds a Jwt assertion.\npublic class JwtBearerGrantRequestEntityConverter extends Object; // An implementation of an AbstractOAuth2AuthorizationGrantRequestEntityConverter that converts the provided JwtBearerGrantRequest to a RequestEntity representation of an OAuth 2.0 Access Token Request for the JWT Bearer Grant.\npublic final class NimbusJwtClientAuthenticationParametersConverter<T extends AbstractOAuth2AuthorizationGrantRequest> extends Object implements org.springframework.core.convert.converter.Converter<T,org.springframework.util.MultiValueMap<String,String>>; // A Converter that customizes the OAuth 2.0 Access Token Request parameters by adding a signed JSON Web Token (JWS) to be used for client authentication at the Authorization Server's Token Endpoint.\n", "des": "Classes and interfaces providing support to the client for initiating requests to the Authorization Server's Protocol Endpoints."}
{"index": 1165, "repo": "commons-math3-3.6.1", "code": "Package: threed\n\nClasses and Interfaces: \nClass Euclidean3D; // This class implements a three-dimensional space.\nClass FieldRotation<T extends RealFieldElement<T>>; // This class is a re-implementation of Rotation using RealFieldElement.\nClass FieldVector3D<T extends RealFieldElement<T>>; // This class is a re-implementation of Vector3D using RealFieldElement.\nClass Line; // The class represent lines in a three dimensional space.\nClass OutlineExtractor; // Extractor for polyhedrons sets outlines.\nClass Plane; // The class represent planes in a three dimensional space.\nClass PolyhedronsSet; // This class represents a 3D region: a set of polyhedrons.\nClass Rotation; // This class implements rotations in a three-dimensional space.\nClass RotationOrder; // This class is a utility representing a rotation order specification for Cardan or Euler angles specification.\nClass Segment; // Simple container for a two-points segment.\nClass SphereGenerator; // Class generating an enclosing ball from its support points.\nClass SphericalCoordinates; // This class provides conversions related to spherical coordinates.\nClass SubLine; // This class represents a subset of a Line.\nClass SubPlane; // This class represents a sub-hyperplane for Plane.\nClass Vector3D; // This class implements vectors in a three-dimensional space.\nClass Vector3DFormat; // Formats a 3D vector in components list format \"{x; y; z}\".\nEnum RotationConvention; // This enumerates is used to differentiate the semantics of a rotation.\nClass CardanEulerSingularityException; // This class represents exceptions thrown while extractiong Cardan or Euler angles from a rotation.\nClass NotARotationMatrixException; // This class represents exceptions thrown while building rotations from matrices.\n", "des": "This package provides basic 3D geometry components."}
{"index": 2806, "repo": "spring-security-oauth2-core-6.1.2", "code": "Package: user\n\nClasses and Interfaces: \npublic class DefaultOAuth2User extends Object implements OAuth2User, Serializable; // The default implementation of an OAuth2User.\npublic interface OAuth2User extends OAuth2AuthenticatedPrincipal; // A representation of a user Principal that is registered with an OAuth 2.0 Provider.\npublic class OAuth2UserAuthority extends Object implements org.springframework.security.core.GrantedAuthority; // A GrantedAuthority that may be associated to an OAuth2User.\n", "des": "Provides a model for an OAuth 2.0 representation of a user Principal."}
{"index": 2619, "repo": "spring-integration-jms-6.1.2", "code": "Package: jms\n\nSub Packages: \npackage jms.config; // Provides classes for configuration - parsers, namespace handlers, factory beans.\npackage jms.dsl; // Provides JMS Component support for the Java DSL.\n\nClasses and Interfaces: \npublic abstract class AbstractJmsChannel extends org.springframework.integration.channel.AbstractMessageChannel;\npublic class ChannelPublishingJmsMessageListener extends Object implements org.springframework.jms.listener.SessionAwareMessageListener<jakarta.jms.Message>, org.springframework.beans.factory.InitializingBean, org.springframework.integration.support.management.TrackableComponent, org.springframework.beans.factory.BeanFactoryAware; // JMS MessageListener that converts a JMS Message into a Spring Integration Message and sends that Message to a channel.\npublic class DefaultJmsHeaderMapper extends JmsHeaderMapper; // Default implementation of JmsHeaderMapper.\npublic class DynamicJmsTemplate extends org.springframework.jms.core.JmsTemplate;\npublic class JmsDestinationPollingSource extends org.springframework.integration.endpoint.AbstractMessageSource<Object>; // A source for receiving JMS Messages with a polling listener.\npublic abstract class JmsHeaderMapper extends Object implements org.springframework.integration.mapping.HeaderMapper<jakarta.jms.Message>; // Strategy interface for mapping integration Message headers to an outbound JMS Message (e.g.\npublic class JmsInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport implements org.springframework.integration.context.OrderlyShutdownCapable; // A wrapper around the JmsMessageDrivenEndpoint implementing MessagingGatewaySupport.\npublic class JmsMessageDrivenEndpoint extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.integration.context.OrderlyShutdownCapable; // A message-driven endpoint that receive JMS messages, converts them into Spring Integration Messages, and then sends the result to a channel.\npublic class JmsOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements org.springframework.integration.support.management.ManageableLifecycle, jakarta.jms.MessageListener; // An outbound Messaging Gateway for request/reply JMS.\npublic static class JmsOutboundGateway.ReplyContainerProperties extends Object;\n", "des": "Base package for JMS Support."}
{"index": 3553, "repo": "guava-32.1.1-jre", "code": "Package: escape\n\nClasses and Interfaces: \nClass ArrayBasedCharEscaper; // A CharEscaper that uses an array to quickly look up replacement characters for a given char value.\nClass ArrayBasedEscaperMap; // An implementation-specific parameter class suitable for initializing ArrayBasedCharEscaper or ArrayBasedUnicodeEscaper instances.\nClass ArrayBasedUnicodeEscaper; // A UnicodeEscaper that uses an array to quickly look up replacement characters for a given code point.\nClass CharEscaper; // An object that converts literal text into a format safe for inclusion in a particular context (such as an XML document).\nClass CharEscaperBuilder; // Simple helper class to build a \"sparse\" array of objects based on the indexes that were added to it.\nClass Escaper; // An object that converts literal text into a format safe for inclusion in a particular context (such as an XML document).\nClass Escapers; // Static utility methods pertaining to Escaper instances.\nClass Escapers.Builder; // A builder for simple, fast escapers.\nClass UnicodeEscaper; // An Escaper that converts literal text into a format safe for inclusion in a particular context (such as an XML document).\n", "des": "Interfaces, utilities, and simple implementations of escapers and encoders."}
{"index": 1697, "repo": "spring-data-couchbase-5.1.2", "code": "Package: query\n\nSub Packages: \npackage query.support; // This package contains support classes for query derivation and other ways of querying couchbase (helper classes).\n\nClasses and Interfaces: \npublic abstract class AbstractCouchbaseQuery extends AbstractCouchbaseQueryBase<CouchbaseOperations> implements RepositoryQuery; // RepositoryQuery implementation for Couchbase.\npublic abstract class AbstractCouchbaseQueryBase<CouchbaseOperationsType> extends Object implements RepositoryQuery; // RepositoryQuery implementation for Couchbase.\npublic abstract class AbstractN1qlBasedQuery extends Object implements RepositoryQuery; // Abstract base for all Couchbase RepositoryQuery.\npublic abstract class AbstractReactiveCouchbaseQuery extends AbstractCouchbaseQueryBase<ReactiveCouchbaseOperations> implements RepositoryQuery; // Base class for reactive RepositoryQuery implementations for Couchbase.\npublic class ConvertingIterator extends Object implements Iterator<Object>; // An Iterator<Object> that converts values to their stored Class if warranted.\npublic interface CouchbaseEntityInformation<T,ID> extends EntityInformation<T,ID>; // Marker interface for the Couchbase Entity Information.\npublic class CouchbasePartTree extends PartTree; // Extend PartTree to parse out distinct fields\npublic class CouchbaseQueryMethod extends QueryMethod; // Represents a query method with couchbase extensions, allowing to discover if View-based query or N1QL-based query must be used.\n@Deprecated public class CouchbaseRepositoryQuery extends Object implements RepositoryQuery;\npublic class CountFragment extends Object; // An utility entity that allows to extract total row count out of a COUNT(*) N1QL query.\npublic class N1qlCountQueryCreator extends OldN1qlQueryCreator;\npublic class N1qlMutateQueryCreator extends AbstractQueryCreator<N1QLExpression,N1QLExpression> implements PartTreeN1qlQueryCreator; // N1qlMutateQueryCreator allows to create queries for delete operations.\npublic class N1qlQueryCreator extends AbstractQueryCreator<Query,QueryCriteria>;\n@Deprecated public class N1qlRepositoryQueryExecutor extends Object;\npublic class OldN1qlQueryCreator extends AbstractQueryCreator<N1QLExpression,N1QLExpression> implements PartTreeN1qlQueryCreator; // This Query Creator is responsible for parsing a PartTree (representing a method name) into the WHERE clause of a N1QL query.\n", "des": "This package contains classes related to query derivation and concrete ways of querying couchbase."}
{"index": 792, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: miscellaneous\n\nClasses and Interfaces: \nInterface ConcatenateGraphFilter.BytesRefBuilderTermAttribute; // Attribute providing access to the term builder and UTF-16 conversion\nClass ASCIIFoldingFilter; // This class converts alphabetic, numeric, and symbolic Unicode characters which are not in the first 127 ASCII characters (the \"Basic Latin\" Unicode block) into their ASCII equivalents, if one exists.\nClass ASCIIFoldingFilterFactory; // Factory for ASCIIFoldingFilter.\nClass CapitalizationFilter; // A filter to apply normal capitalization rules to Tokens.\nClass CapitalizationFilterFactory; // Factory for CapitalizationFilter.\nClass CodepointCountFilter; // Removes words that are too long or too short from the stream.\nClass CodepointCountFilterFactory; // Factory for CodepointCountFilter.\nClass ConcatenateGraphFilter; // Concatenates/Joins every incoming token with a separator into one output token for every path through the token stream (which is a graph).\nClass ConcatenateGraphFilter.BytesRefBuilderTermAttributeImpl; // Implementation of ConcatenateGraphFilter.BytesRefBuilderTermAttribute\nClass ConcatenateGraphFilterFactory; // Factory for ConcatenateGraphFilter.\nClass ConcatenatingTokenStream; // A TokenStream that takes an array of input TokenStreams as sources, and concatenates them together.\nClass ConditionalTokenFilter; // Allows skipping TokenFilters based on the current set of attributes.\nClass ConditionalTokenFilterFactory; // Abstract parent class for analysis factories that create ConditionalTokenFilter instances\nClass DateRecognizerFilter; // Filters all tokens that cannot be parsed to a date, using the provided DateFormat.\nClass DateRecognizerFilterFactory; // Factory for DateRecognizerFilter.\nClass DelimitedTermFrequencyTokenFilter; // Characters before the delimiter are the \"token\", the textual integer after is the term frequency.\nClass DelimitedTermFrequencyTokenFilterFactory; // Factory for DelimitedTermFrequencyTokenFilter.\nClass DropIfFlaggedFilter; // Allows Tokens with a given combination of flags to be dropped.\nClass DropIfFlaggedFilterFactory; // Provides a filter that will drop tokens matching a set of flags.\nClass EmptyTokenStream; // An always exhausted token stream.\n", "des": "Miscellaneous Tokenstreams."}
{"index": 1723, "repo": "spring-jdbc-6.0.11", "code": "Package: config\n\nClasses and Interfaces: \npublic class JdbcNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for JDBC configuration namespace.\npublic class SortedResourcesFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<org.springframework.core.io.Resource[]> implements org.springframework.context.ResourceLoaderAware; // FactoryBean implementation that takes a list of location Strings and creates a sorted array of Resource instances.\n", "des": "Defines the Spring JDBC configuration namespace."}
{"index": 2020, "repo": "spring-boot-devtools-3.1.1", "code": "Package: client\n\nClasses and Interfaces: \npublic class HttpTunnelConnection extends Object implements TunnelConnection; // TunnelConnection implementation that uses HTTP to transfer data.\npublic class TunnelClient extends Object implements org.springframework.beans.factory.SmartInitializingSingleton; // The client side component of a socket tunnel.\npublic interface TunnelClientListener; // Listener that can be used to receive TunnelClient events.\n@FunctionalInterface public interface TunnelConnection; // Interface used to manage socket tunnel connections.\n", "des": "Client side TCP tunnel support."}
{"index": 1619, "repo": "spring-data-neo4j-7.1.2", "code": "Package: types\n\nClasses and Interfaces: \n@API(status=STABLE, since=\"6.0\") public final class CartesianPoint2d extends Object;\n@API(status=STABLE, since=\"6.0\") public final class CartesianPoint3d extends Object;\npublic final class Coordinate extends Object;\n@API(status=STABLE, since=\"6.0\") public final class GeographicPoint2d extends Object;\n@API(status=STABLE, since=\"6.0\") public final class GeographicPoint3d extends Object;\n@API(status=STABLE, since=\"6.0\") public sealed interface Neo4jPoint; // A dedicated Neo4j point, that is aware of its nature, either being geographic or cartesian.\n@API(status=STABLE, since=\"6.0\") public final class PointBuilder extends Object;\n", "des": "Additional types provided by SDN."}
{"index": 572, "repo": "hadoop-common-3.3.4", "code": "Package: util\n\nSub Packages: \npackage util.functional; // Support for functional programming within the Hadoop APIs.\n\nClasses and Interfaces: \nInterface CleanerUtil.BufferCleaner; // Pass in an implementation of this interface to cleanup ByteBuffers.\nInterface ExitCodeProvider; // Get the exit code of an exception.\nInterface GcTimeMonitor.GcTimeAlertHandler; // The user can provide an instance of a class implementing this interface when initializing a GcTimeMonitor to receive alerts when GC time percentage exceeds the specified threshold.\nInterface IdentityHashStore.Visitor<K,V>;\nInterface IPList;\nInterface LightWeightCache.Entry; // Entries of LightWeightCache.\nInterface LightWeightGSet.LinkedElement; // Elements of LightWeightGSet.\nInterface Progressable; // A facility for reporting progress.\nInterface Shell.CommandExecutor;\nInterface Tool; // A tool interface that supports handling of generic command-line options.\nClass ApplicationClassLoader; // A URLClassLoader for application isolation.\nClass AutoCloseableLock; // This is a wrap class of a ReentrantLock.\nClass BasicDiskValidator; // BasicDiskValidator is a wrapper around DiskChecker.\nClass CacheableIPList; // CacheableIPList loads a list of subnets from a file.\nClass CloseableReferenceCount; // A closeable object that maintains a reference count.\nClass CombinedIPList; // Util class to stores ips/hosts/subnets.\nClass CombinedIPWhiteList;\nClass ComparableVersion; // Generic implementation of version comparison.\nClass DurationInfo; // A duration with logging of final state at info or debug in the close() call.\nClass FastNumberFormat; // Fast thread-safe version of NumberFormat\nClass FileBasedIPList; // FileBasedIPList loads a list of subnets in CIDR format and ip addresses from a file.\nClass FindClass; // This entry point exists for diagnosing classloader problems: is a class or resource present -and if so, where?\nClass GcTimeMonitor; // This class monitors the percentage of time the JVM is paused in GC within the specified observation window, say 1 minute.\nClass GcTimeMonitor.Builder;\nClass GcTimeMonitor.GcData; // Encapsulates data about GC pauses measured at the specific timestamp.\n", "des": "Common utilities."}
{"index": 1952, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: kafka\n\nClasses and Interfaces: \npublic class ConcurrentKafkaListenerContainerFactoryConfigurer extends Object; // Configure ConcurrentKafkaListenerContainerFactory with sensible defaults.\n@FunctionalInterface public interface DefaultKafkaConsumerFactoryCustomizer; // Callback interface for customizing DefaultKafkaConsumerFactory beans.\n@FunctionalInterface public interface DefaultKafkaProducerFactoryCustomizer; // Callback interface for customizing DefaultKafkaProducerFactory beans.\n@AutoConfiguration @ConditionalOnClass(org.springframework.kafka.core.KafkaTemplate.class) @EnableConfigurationProperties(KafkaProperties.class) @Import({org.springframework.boot.autoconfigure.kafka.KafkaAnnotationDrivenConfiguration.class,org.springframework.boot.autoconfigure.kafka.KafkaStreamsAnnotationDrivenConfiguration.class}) public class KafkaAutoConfiguration extends Object; // Auto-configuration for Apache Kafka.\npublic interface KafkaConnectionDetails extends ConnectionDetails; // Details required to establish a connection to a Kafka service.\n@ConfigurationProperties(prefix=\"spring.kafka\") public class KafkaProperties extends Object; // Configuration properties for Spring for Apache Kafka.\npublic static class KafkaProperties.Admin extends Object;\npublic static class KafkaProperties.Cleanup extends Object;\npublic static class KafkaProperties.Consumer extends Object;\npublic static enum KafkaProperties.IsolationLevel extends Enum<KafkaProperties.IsolationLevel>;\npublic static class KafkaProperties.Jaas extends Object;\npublic static class KafkaProperties.Listener extends Object;\npublic static enum KafkaProperties.Listener.Type extends Enum<KafkaProperties.Listener.Type>;\npublic static class KafkaProperties.Producer extends Object;\npublic static class KafkaProperties.Retry extends Object;\npublic static class KafkaProperties.Retry.Topic extends Object; // Properties for non-blocking, topic-based retries.\npublic static class KafkaProperties.Security extends Object;\npublic static class KafkaProperties.Ssl extends Object;\npublic static class KafkaProperties.Streams extends Object; // High (and some medium) priority Streams properties and a general properties bucket.\npublic static class KafkaProperties.Template extends Object;\n@FunctionalInterface public interface StreamsBuilderFactoryBeanCustomizer; // Callback interface for customizing StreamsBuilderFactoryBean beans.\n", "des": "Auto-configuration for Apache Kafka."}
{"index": 366, "repo": "commons-geometry-euclidean-1.0", "code": "Package: mesh\n\nClasses and Interfaces: \nInterface Mesh<F extends Mesh.Face>; // Interface representing a 3D mesh data structure.\nInterface Mesh.Face; // Interface representing a single face in a mesh.\nInterface TriangleMesh; // Interface representing a mesh composed entirely of triangular faces.\nInterface TriangleMesh.Face; // Interface representing a single triangular face in a mesh.\nClass SimpleTriangleMesh; // A simple implementation of the TriangleMesh interface.\nClass SimpleTriangleMesh.Builder; // Builder class for creating mesh instances.\n", "des": "This package contains types representing 3D mesh data structures."}
{"index": 2244, "repo": "spring-data-keyvalue-3.1.2", "code": "Package: mapping\n\nSub Packages: \npackage mapping.context; // Infrastructure for the Key-Value mapping context.\n\nClasses and Interfaces: \npublic enum AnnotationBasedKeySpaceResolver extends Enum<AnnotationBasedKeySpaceResolver> implements KeySpaceResolver; // AnnotationBasedKeySpaceResolver looks up Persistent and checks for presence of either meta or direct usage of KeySpace.\npublic class BasicKeyValuePersistentEntity<T,P extends KeyValuePersistentProperty<P>> extends BasicPersistentEntity<T,P> implements KeyValuePersistentEntity<T,P>; // KeyValuePersistentEntity implementation that adds specific meta-data such as the keySpace.\npublic enum ClassNameKeySpaceResolver extends Enum<ClassNameKeySpaceResolver> implements KeySpaceResolver; // Most trivial implementation of KeySpaceResolver returning the Class.getName().\npublic interface KeySpaceResolver; // KeySpaceResolver determines the keyspace a given type is assigned to.\npublic interface KeyValuePersistentEntity<T,P extends KeyValuePersistentProperty<P>> extends MutablePersistentEntity<T,P>;\npublic class KeyValuePersistentProperty<P extends KeyValuePersistentProperty<P>> extends AnnotationBasedPersistentProperty<P>; // Most trivial implementation of PersistentProperty.\npublic class PrefixKeyspaceResolver extends Object implements KeySpaceResolver; // KeySpaceResolver prefixing the keyspace with a static prefix after determining the keyspace from a delegate KeySpaceResolver.\n", "des": "Infrastructure for the Key-Value mapping subsystem and keyspace resolution."}
{"index": 3325, "repo": "opencms-core-15.0", "code": "Package: filehistory\n\nClasses and Interfaces: \nClass CmsFileHistoryApp; // App for the history settings and clearing of history.\nClass CmsFileHistoryConfiguration; // Configuration class of file history app.\nClass CmsFileHistoryFolder; // Class for the folder with the file history apps.\nClass CmsFileHistoryPanel; // Class for the clear file history dialog and execution.\nClass CmsFileHistorySettings; // Class for the history settings dialog.\nClass CmsHistoryClearThread; // Clears the file history of the OpenCms database.\n", "des": "Contains classes of the file history app."}
{"index": 3422, "repo": "hibernate-core-5.6.15.Final", "code": "Package: annotations\n\nClasses and Interfaces: \nClass QueryHints; // Consolidation of hints available to Hibernate JPA queries.\nEnum CacheConcurrencyStrategy; // Cache concurrency strategy.\nEnum CacheModeType; // Enumeration for the different interaction modes between the session and the Level 2 Cache.\nEnum CascadeType; // Cascade types (can override default JPA cascades).\nEnum FetchMode; // Defines how the association should be fetched, compared to FetchType which defines when it should be fetched\nEnum FlushModeType; // Enumeration extending javax.persistence flush modes.\nEnum GenerationTime; // At what time(s) will the generation occur?\nEnum LazyCollectionOption; // Lazy options available for a collection.\nEnum LazyToOneOption; // Lazy options available for a ToOne association.\nEnum NotFoundAction; // Possible actions when the database contains a non-null fk with no matching target.\nEnum OnDeleteAction; // Possible actions for on-delete.\nEnum OptimisticLockType; // Possible optimistic locking strategies.\nEnum PolymorphismType; // Type of available polymorphism for a particular entity.\nEnum ResultCheckStyle; // Possible styles of checking return codes on SQL INSERT, UPDATE and DELETE queries.\nEnum SortType;\nEnum SourceType; // Where should Hibernate retrieve the value from? From the database, or from the current JVM?\nAnnotation Type AccessType;\nAnnotation Type Any; // Defines a ToOne-style association pointing to one of several entity types depending on a local discriminator, as opposed to discriminated inheritance where the discriminator is kept as part of the entity hierarchy.\nAnnotation Type AnyMetaDef;\nAnnotation Type AnyMetaDefs;\nAnnotation Type AttributeAccessor; // Names a persistent property access strategy (PropertyAccessStrategy) to use.\nAnnotation Type BatchSize; // Defines size for batch loading of collections or lazy entities.\nAnnotation Type Cache; // Add caching strategy to a root entity or a collection.\nAnnotation Type Cascade; // Apply a cascade strategy on an association.\nAnnotation Type Check; // Arbitrary SQL CHECK constraints which can be defined at the class, property or collection level.\nAnnotation Type CollectionId; // Describe an identifier column for a bag (ie an idbag).\nAnnotation Type CollectionType;\nAnnotation Type ColumnDefault; // Identifies the DEFAULT value to apply to the associated column via DDL.\n", "des": "Package containing all the Hibernate specific annotations."}
{"index": 3268, "repo": "opencms-core-15.0", "code": "Package: collectors\n\nClasses and Interfaces: \nInterface I_CmsCollectorPostCreateHandler; // Interface which can be used to add custom code to execute after a user has created a new content via a collector list.\nInterface I_CmsCollectorPublishListProvider; // Interface which should be used for collectors which can provide their own publish list.\nInterface I_CmsResourceCollector; // A collector that generates list of CmsResource objects from the VFS.\nClass A_CmsResourceCollector; // Provides some helpful base implementations for resource collector classes.\nClass CmsAddCategoriesPostCreateHandler; // A post create handler that adds categories to newly created resources (that are not a copy of an existing resource).\nClass CmsCategoryResourceCollector; // A collector to fetch XML contents in a folder or the current site filtered by one or more given category types.\nClass CmsChangedResourceCollector; // A resource collector that collects resources changed in a given time frame and supports flexible sorting based on resource dates.\nClass CmsCollectorData; // Data structure for the collector, parsed from the collector parameters.\nClass CmsDateResourceCollector; // A default resource collector that supports flexible sorting based on resource dates.\nClass CmsDateResourceComparator; // Comparator for sorting resource objects based on dates.\nClass CmsDefaultPostCreateHandler; // Default implementation for the post-create handler interface.\nClass CmsDefaultResourceCollector; // A default resource collector to generate some example list of resources from the VFS.\nClass CmsExtendedCollectorData; // Extended data structure for the collector, parsed from the collector parameters.\nClass CmsPriorityDateResourceComparator; // Comparator for sorting resource objects based on priority and date.\nClass CmsPriorityResourceCollector; // A collector to fetch sorted XML contents in a folder or subtree based on their priority and date or title values.\nClass CmsPriorityTitleResourceComparator; // Comparator for sorting resource objects based on priority and title.\nClass CmsPropertyResourceComparator; // Comparator for sorting resource objects based on a selected property value.\nClass CmsSolrCollector; // A Solr collector.\nClass CmsSubscriptionCollector; // A collector that returns visited or subscribed resources depending on the current user and parameters.\nClass CmsTimeFrameCategoryCollector; // A collector that allows to collect resources within a time range based upon a configurable property that contains a time stamp.\nClass ComparatorInverter; // Wrapper around a comparator that inverts comparison results which may e.g.\n", "des": "Collectors allow to gather lists of OpenCms resources from the OpenCms VFS using specific rules."}
{"index": 637, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: failover\n\nClasses and Interfaces: \nClass FederationProxyProviderUtil; // Utility class that creates proxy for specified protocols when federation is enabled.\nClass FederationRMFailoverProxyProvider<T>; // A FailoverProxyProvider implementation that uses the FederationStateStore to determine the ResourceManager to connect to.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 2984, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "Package: authentication\n\nClasses and Interfaces: \npublic abstract class AbstractOAuth2TokenAuthenticationToken<T extends org.springframework.security.oauth2.core.OAuth2Token> extends org.springframework.security.authentication.AbstractAuthenticationToken; // Base class for AbstractAuthenticationToken implementations that expose common attributes between different OAuth 2.0 Access Token Formats.\n@Transient public class BearerTokenAuthentication extends AbstractOAuth2TokenAuthenticationToken<org.springframework.security.oauth2.core.OAuth2AccessToken>; // An Authentication token that represents a successful authentication as obtained through a bearer token.\npublic class BearerTokenAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // An Authentication that contains a Bearer Token.\npublic class DelegatingJwtGrantedAuthoritiesConverter extends Object implements org.springframework.core.convert.converter.Converter<org.springframework.security.oauth2.jwt.Jwt,Collection<org.springframework.security.core.GrantedAuthority>>; // A Jwt to GrantedAuthority Converter that is a composite of converters.\npublic class JwtAuthenticationConverter extends Object implements org.springframework.core.convert.converter.Converter<org.springframework.security.oauth2.jwt.Jwt,org.springframework.security.authentication.AbstractAuthenticationToken>;\npublic final class JwtAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider; // An AuthenticationProvider implementation of the Jwt-encoded Bearer Tokens for protecting OAuth 2.0 Resource Servers.\n@Transient public class JwtAuthenticationToken extends AbstractOAuth2TokenAuthenticationToken<org.springframework.security.oauth2.jwt.Jwt>; // An implementation of an AbstractOAuth2TokenAuthenticationToken representing a Jwt Authentication.\npublic final class JwtBearerTokenAuthenticationConverter extends Object implements org.springframework.core.convert.converter.Converter<org.springframework.security.oauth2.jwt.Jwt,org.springframework.security.authentication.AbstractAuthenticationToken>; // A Converter that takes a Jwt and converts it into a BearerTokenAuthentication.\n", "des": "OAuth 2.0 Resource Server Authentications and supporting classes and interfaces."}
{"index": 2576, "repo": "camel-api-4.0.0-RC1", "code": "Package: cluster\n\nClasses and Interfaces: \npublic interface CamelClusterEventListener; // Marker interface for cluster events\npublic static interface CamelClusterEventListener.Leadership extends CamelClusterEventListener;\npublic static interface CamelClusterEventListener.Membership extends CamelClusterEventListener;\npublic interface CamelClusterMember extends HasId;\npublic interface CamelClusterService extends Service, CamelContextAware, IdAware, Ordered;\n@FunctionalInterface public static interface CamelClusterService.Selector;\npublic interface CamelClusterView extends Service, CamelContextAware; // Represents the View of the cluster at some given period of time.\npublic interface CamelPreemptiveClusterService extends CamelClusterService; // A CamelPreemptiveClusterService is a CamelClusterService that manages CamelPreemptiveClusterViews.\npublic interface CamelPreemptiveClusterView extends CamelClusterView; // A CamelPreemptiveClusterView is a CamelClusterView that can be externally disabled by another controller.\n", "des": "Camel Cluster support"}
{"index": 2900, "repo": "spring-integration-amqp-6.1.2", "code": "Package: outbound\n\nClasses and Interfaces: \npublic abstract class AbstractAmqpOutboundEndpoint extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements org.springframework.integration.support.management.ManageableLifecycle; // A base AbstractReplyProducingMessageHandler extension for AMQP message handlers.\nprotected static final class AbstractAmqpOutboundEndpoint.CorrelationDataWrapper extends org.springframework.amqp.rabbit.connection.CorrelationData;\npublic class AmqpOutboundEndpoint extends AbstractAmqpOutboundEndpoint implements org.springframework.amqp.rabbit.core.RabbitTemplate.ConfirmCallback, org.springframework.amqp.rabbit.core.RabbitTemplate.ReturnsCallback; // Adapter that converts and sends Messages to an AMQP Exchange.\npublic class AsyncAmqpOutboundGateway extends AbstractAmqpOutboundEndpoint; // An outbound gateway where the sending thread is released immediately and the reply is sent on the async template's listener container thread.\npublic class RabbitStreamMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler; // MessageHandler based on RabbitStreamOperations.\n", "des": "Provides classes supporting outbound endpoints."}
{"index": 1845, "repo": "spring-test-6.0.11", "code": "Package: rules\n\nClasses and Interfaces: \npublic class SpringClassRule extends Object implements TestRule; // SpringClassRule is a custom JUnit TestRule that supports class-level features of the Spring TestContext Framework in standard JUnit tests by means of the TestContextManager and associated support classes and annotations.\npublic class SpringMethodRule extends Object implements MethodRule; // SpringMethodRule is a custom JUnit 4 MethodRule that supports instance-level and method-level features of the Spring TestContext Framework in standard JUnit tests by means of the TestContextManager and associated support classes and annotations.\n", "des": "Custom JUnit 4 Rules used in the Spring TestContext Framework."}
{"index": 1148, "repo": "commons-math3-3.6.1", "code": "Package: interpolation\n\nClasses and Interfaces: \nInterface BivariateGridInterpolator; // Interface representing a bivariate real interpolating function where the sample points must be specified on a regular grid.\nInterface MultivariateInterpolator; // Interface representing a univariate real interpolating function.\nInterface TrivariateGridInterpolator; // Interface representing a trivariate real interpolating function where the sample points must be specified on a regular grid.\nInterface UnivariateInterpolator; // Interface representing a univariate real interpolating function.\nClass AkimaSplineInterpolator; // Computes a cubic spline interpolation for the data set using the Akima algorithm, as originally formulated by Hiroshi Akima in his 1970 paper \"A New Method of Interpolation and Smooth Curve Fitting Based on Local Procedures.\" J.\nClass BicubicInterpolatingFunction; // Function that implements the bicubic spline interpolation.\nClass BicubicInterpolator; // Generates a bicubic interpolating function.\nClass BicubicSplineInterpolatingFunction; // as of 3.4 replaced by PiecewiseBicubicSplineInterpolatingFunction\nClass BicubicSplineInterpolator; // as of 3.4 replaced by PiecewiseBicubicSplineInterpolator\nClass DividedDifferenceInterpolator; // Implements the Divided Difference Algorithm for interpolation of real univariate functions.\nClass FieldHermiteInterpolator<T extends FieldElement<T>>; // Polynomial interpolator using both sample values and sample derivatives.\nClass HermiteInterpolator; // Polynomial interpolator using both sample values and sample derivatives.\nClass InterpolatingMicrosphere; // Utility class for the MicrosphereProjectionInterpolator algorithm.\nClass InterpolatingMicrosphere2D; // Utility class for the MicrosphereProjectionInterpolator algorithm.\nClass LinearInterpolator; // Implements a linear function for interpolation of real univariate functions.\nClass LoessInterpolator; // Implements the Local Regression Algorithm (also Loess, Lowess) for interpolation of real univariate functions.\nClass MicrosphereInterpolatingFunction; // Code will be removed in 4.0.\nClass MicrosphereInterpolator; // Code will be removed in 4.0.\nClass MicrosphereProjectionInterpolator; // Interpolator that implements the algorithm described in William Dudziak's MS thesis.\n", "des": "Univariate real functions interpolation algorithms."}
{"index": 431, "repo": "kafka-streams-3.5.0", "code": "Package: kstream\n\nClasses and Interfaces: \nInterface Aggregator<K,V,VA>; // The Aggregator interface for aggregating values of the given key.\nInterface BranchedKStream<K,V>; // Branches the records in the original stream based on the predicates supplied for the branch definitions.\nInterface CogroupedKStream<K,VOut>; // CogroupedKStream is an abstraction of multiple grouped record streams of KeyValue pairs.\nInterface EmitStrategy; // This interface controls the strategy that can be used to control how we emit results in a processor.\nInterface ForeachAction<K,V>; // The ForeachAction interface for performing an action on a key-value pair.\nInterface GlobalKTable<K,V>; // GlobalKTable is an abstraction of a changelog stream from a primary-keyed table.\nInterface Initializer<VA>; // The Initializer interface for creating an initial value in aggregations.\nInterface KeyValueMapper<K,V,VR>; // The KeyValueMapper interface for mapping a key-value pair to a new value of arbitrary type.\nInterface KGroupedStream<K,V>; // KGroupedStream is an abstraction of a grouped record stream of KeyValue pairs.\nInterface KGroupedTable<K,V>; // KGroupedTable is an abstraction of a re-grouped changelog stream from a primary-keyed table, usually on a different grouping key than the original primary key.\nInterface KStream<K,V>; // KStream is an abstraction of a record stream of KeyValue pairs, i.e., each record is an independent entity/event in the real world.\nInterface KTable<K,V>; // KTable is an abstraction of a changelog stream from a primary-keyed table.\nInterface Merger<K,V>; // The interface for merging aggregate values for SessionWindows with the given key.\nInterface Predicate<K,V>; // The Predicate interface represents a predicate (boolean-valued function) of a KeyValue pair.\nInterface Reducer<V>; // The Reducer interface for combining two values of the same type into a new value.\n", "des": "Provides a high-level programming model (DSL) to express a (stateful) data flow computation over input streams and tables."}
{"index": 3313, "repo": "opencms-core-15.0", "code": "Package: solr\n\nSub Packages: \npackage solr.spellchecking; // Contains the SOLR based spellcheck service classes.\n\nClasses and Interfaces: \nInterface I_CmsSolrIndexWriter; // Interface for Solr index writers.\nInterface I_CmsSolrPostSearchProcessor; // The post document processor can be used in order to manipulate search results after the OpenCms permission check has been done.\nClass CmsSolrConfiguration; // The Solr configuration class.\nClass CmsSolrDocument; // A search document implementation for Solr indexes.\nClass CmsSolrDocumentContainerPage; // Lucene document factory class to extract index data from a resource of type CmsResourceTypeContainerPage.\nClass CmsSolrDocumentXmlContent; // Special document text extraction factory for Solr index.\nClass CmsSolrField; // An individual field for the Solr search index.\nClass CmsSolrFieldConfiguration; // The search field implementation for Solr.\nClass CmsSolrIndex; // Implements the search within an Solr index.\nClass CmsSolrIndexWriter; // Implements the index writer for the Solr server used by OpenCms.\nClass CmsSolrLinkProcessor; // This Solr post processor generates for each found document the corresponding link and adds this link into the resulting document as field.\nClass CmsSolrQuery; // A Solr search query.\nClass CmsSolrQueryUtil; // Utilities for building and analyzing Solr queries.\nClass CmsSolrResultList; // Encapsulates a list of 'OpenCms resource documents' (CmsSearchResource).\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "The package contains the Solr search integration."}
{"index": 441, "repo": "hbase-client-3.0.0-alpha-4", "code": "Package: filter\n\nClasses and Interfaces: \nClass BigDecimalComparator; // A BigDecimal comparator which numerical compares against the specified byte array\nClass BinaryComparator; // A binary comparator which lexicographically compares against the specified byte array using Bytes.compareTo(byte[], byte[]).\nClass BinaryComponentComparator; // A comparator which compares against a specified byte array, but only compares specific portion of the byte array.\nClass BinaryPrefixComparator; // A comparator which compares against a specified byte array, but only compares up to the length of this byte array.\nClass BitComparator; // A bit comparator which performs the specified bitwise operation on each of the bytes with the specified byte array.\nClass ColumnCountGetFilter; // Simple filter that returns first N columns on row only.\nClass ColumnPaginationFilter; // A filter, based on the ColumnCountGetFilter, takes two arguments: limit and offset.\nClass ColumnPrefixFilter; // This filter is used for selecting only those keys with columns that matches a particular prefix.\nClass ColumnRangeFilter; // This filter is used for selecting only those keys with columns that are between minColumn to maxColumn.\nClass ColumnValueFilter; // Different from SingleColumnValueFilter which returns an entire row when specified condition is matched, ColumnValueFilter return the matched cell only.\nClass CompareFilter; // This is a generic filter to be used to filter by comparison.\nClass DependentColumnFilter; // A filter for adding inter-column timestamp matching Only cells with a correspondingly timestamped entry in the target column will be retained Not compatible with Scan.setBatch as operations need full rows for correct filtering\nClass FamilyFilter; // This filter is used to filter based on the column family.\nClass Filter; // Interface for row and column filters directly applied within the regionserver.\nClass FilterBase; // Abstract base class to help you implement new Filters.\nClass FilterList; // Implementation of Filter that represents an ordered List of Filters which will be evaluated with a specified boolean operator FilterList.Operator.MUST_PASS_ALL (AND) or FilterList.Operator.MUST_PASS_ONE (OR).\nClass FilterListBase; // Base class for FilterList.\nClass FilterListWithAND; // FilterListWithAND represents an ordered list of filters which will be evaluated with an AND operator.\nClass FilterListWithOR; // FilterListWithOR represents an ordered list of filters which will be evaluated with an OR operator.\n", "des": "Provides row-level filters applied to HRegion scan results during calls to ResultScanner.next()."}
{"index": 1644, "repo": "jena-core-4.9.0", "code": "Package: graph\n\nSub Packages: \npackage graph.compose; // This package defines simple composite graphs - union, intersection, difference, and update-tracking.\npackage graph.impl; // This package provides basic implementations of Graph interfaces such as EventManager and Capabilities.\n\nClasses and Interfaces: \npublic class BlankNodeId extends Object; // System identifier for a blank node.\npublic interface Capabilities; // Interface for expressing capabilities.\n@Deprecated public class Factory extends Object;\npublic interface FrontsNode; // HasNode - interface for objects that front a Node in some context.\npublic interface FrontsTriple; // FrontsTriple (see also FrontsNode) is an interface for things that can be seen as wrappers round triples.\npublic interface GetTriple; // this interface describes types that can have a triple extracted using a getTriple method.\npublic interface Graph; // The interface to be satisfied by implementations maintaining collections of RDF triples.\npublic interface GraphEventManager extends GraphListener; // The component of a graph responsible for managing events and listeners.\npublic class GraphEvents extends Object; // GraphEvents is the base class for Jena general graph events.\npublic class GraphExtract extends Object; // GraphExtract offers a very simple recursive extraction of a subgraph with a specified root in some supergraph.\npublic interface GraphListener; // Interface for listening to graph-level update events.\npublic interface GraphMaker; // A factory for providing instances of named graphs with appropriate storage models.\npublic class GraphMemFactory extends Object; // A factory class for creating memory Graphs.\npublic class GraphUtil extends Object; // An ad-hoc collection of useful code for graphs\npublic class JenaNodeException extends JenaException;\npublic abstract class Node extends Object implements Serializable; // A Node has five subtypes: Node_Blank, Node_Anon, Node_URI, Node_Variable, and Node_ANY.\npublic class Node_ANY extends Node_Fluid; // A Node_ANY (there should be only one) is a meta-node that is used to stand for any other node in a query.\npublic class Node_Blank extends Node_Concrete; // RDF blank nodes, ie nodes with identity but without URIs.\npublic abstract class Node_Concrete extends Node; // This is the class of \"concrete\" nodes, ie those which correspond to actual RDF data - URIs, blank nodes, and literals.\n", "des": "This package defines the Graph and Node family of classes, which form the underlying datatypes of the Jena system."}
{"index": 2622, "repo": "wicket-request-10.0.0-M1", "code": "Package: request\n\nClasses and Interfaces: \npublic class HttpHeaderCollection extends Object; // A multivalue map of headers names and header values suitable for processing http request and response headers.\n@FunctionalInterface public interface IExceptionMapper; // Maps exception to IRequestHandler.\npublic interface ILogData extends Serializable; // Base interface for log data collected by request handlers.\npublic interface ILoggableRequestHandler extends IRequestHandler; // A loggable request handler is a IRequestHandler that is capable of delivering log data.\npublic interface IRequestCycle;\n@FunctionalInterface public interface IRequestHandler; // A request handler is the base entity that is the subject of a request.\npublic interface IRequestHandlerDelegate extends IRequestHandler; // A IRequestHandler that delegates the actual work to another IRequestHandler.\npublic interface IRequestMapper; // Maps IRequestHandler(s) into Url(s) and Request(s) to IRequestHandler(s).\npublic interface IRequestParameters; // Represents request parameters.\npublic interface IUrlRenderer; // An interface that a Url can implement if it knows how to render itself as full url or relative to a base url\npublic interface IWritableRequestParameters extends IRequestParameters; // Request parameters that can be modified.\npublic abstract class Request extends Object; // Request object.\npublic abstract class RequestHandlerExecutor extends Object; // Manages executions of IRequestHandlers.\npublic static class RequestHandlerExecutor.ReplaceHandlerException extends RuntimeException; // Exception to stop current request handler and execute a new one.\npublic abstract class Response extends Object; // Abstract base class for different implementations of response writing.\npublic class Url extends Object implements Serializable; // Represents the URL to an external resource or internal resource/component.\npublic static final class Url.QueryParameter extends Object implements Serializable; // Represents a single query parameter\npublic static enum Url.StringMode extends Enum<Url.StringMode>; // Modes with which urls can be stringized\npublic class UrlRenderer extends Object; // Takes care of rendering URLs.\npublic class UrlUtils extends Object; // Various url utilities\n", "des": "Package for classes that have generic (protocol independent) support for request cycle processing."}
{"index": 2891, "repo": "spring-integration-core-6.1.2", "code": "Package: utils\n\nClasses and Interfaces: \npublic final class IntegrationUtils extends Object; // General utility methods.\npublic final class PatternMatchUtils extends Object; // Utility methods for pattern matching.\n", "des": "Provides global utility support classes for the runtime system."}
{"index": 3, "repo": "connect-api-3.5.0", "code": "Package: data\n\nClasses and Interfaces: \nInterface Schema; // Definition of an abstract data type.\nClass ConnectSchema;\nClass Date; // A date representing a calendar day with no time of day or timezone.\nClass Decimal; // An arbitrary-precision signed decimal number.\nClass Field; // A field in a Struct, consisting of a field name, index, and Schema for the field value.\nClass SchemaAndValue; // A composite containing a Schema and associated value\nClass SchemaBuilder; // SchemaBuilder provides a fluent API for constructing Schema objects.\nClass SchemaProjector; // SchemaProjector is a utility to project a value between compatible schemas and throw exceptions when non compatible schemas are provided.\nClass Struct; // A structured record containing a set of named fields with values, each field using an independent Schema.\nClass Time; // A time representing a specific point in a day, not tied to any specific date.\nClass Timestamp; // A timestamp representing an absolute time, without timezone information.\nClass Values; // Utility for converting from one Connect value to a different form.\nEnum Schema.Type; // The type of a schema.\n", "des": "Provides classes for representing data and schemas handled by Connect."}
{"index": 2156, "repo": "wicket-core-10.0.0-M1", "code": "Package: parser\n\nSub Packages: \npackage parser.filter; // Default parsing extensions.\n\nClasses and Interfaces: \npublic abstract class AbstractMarkupFilter extends Object implements IMarkupFilter; // Base class for markup filters\npublic interface IMarkupFilter; // Wicket uses a streaming XML parser to read the markup.\npublic interface IXmlPullParser; // The interface of a streaming XML parser as required by Wicket.\npublic static enum IXmlPullParser.HttpTagType extends Enum<IXmlPullParser.HttpTagType>; // The last element found\npublic class TagStack extends Object; // Stack to push and pop HTML elements asserting its structure.\npublic final class XmlPullParser extends Object implements IXmlPullParser; // A fairly shallow markup pull parser which parses a markup string of a given type of markup (for example, html, xml, vxml or wml) into ComponentTag and RawMarkup tokens.\npublic class XmlTag extends Object; // A subclass of MarkupElement which represents a tag including namespace and its optional attributes.\npublic static enum XmlTag.TagType extends Enum<XmlTag.TagType>; // Enumerated type for different kinds of component tags.\n", "des": "The default parsing engine of Wicket."}
{"index": 1147, "repo": "commons-math3-3.6.1", "code": "Package: gauss\n\nClasses and Interfaces: \nClass BaseRuleFactory<T extends Number>; // Base class for rules that determines the integration nodes and their weights.\nClass GaussIntegrator; // Class that implements the Gaussian rule for integrating a weighted function.\nClass GaussIntegratorFactory; // Class that provides different ways to compute the nodes and weights to be used by the Gaussian integration rule.\nClass HermiteRuleFactory; // Factory that creates a Gauss-type quadrature rule using Hermite polynomials of the first kind.\nClass LegendreHighPrecisionRuleFactory; // Factory that creates Gauss-type quadrature rule using Legendre polynomials.\nClass LegendreRuleFactory; // Factory that creates Gauss-type quadrature rule using Legendre polynomials.\nClass SymmetricGaussIntegrator; // This class's implements integrate method assuming that the integral is symmetric about 0.\n", "des": "Gauss family of quadrature schemes."}
{"index": 2338, "repo": "spring-boot-3.1.1", "code": "Package: classreading\n\nClasses and Interfaces: \npublic class ConcurrentReferenceCachingMetadataReaderFactory extends org.springframework.core.type.classreading.SimpleMetadataReaderFactory; // Caching implementation of the MetadataReaderFactory interface backed by a ConcurrentReferenceHashMap, caching MetadataReader per Spring Resource handle (i.e.\n", "des": "Support classes for reading annotation and class-level metadata."}
{"index": 1789, "repo": "spring-integration-file-6.1.2", "code": "Package: handler\n\nClasses and Interfaces: \npublic class FileTransferringMessageHandler<F> extends org.springframework.integration.handler.AbstractMessageHandler; // A MessageHandler implementation that transfers files to a remote server.\n", "des": "Provides classes supporting remote file message handlers."}
{"index": 839, "repo": "calcite-core-1.34.0", "code": "Package: rel\n\nSub Packages: \npackage rel.convert; // Defines relational expressions and rules for converting between calling conventions.\npackage rel.core; // Defines core relational expressions.\npackage rel.externalize; // Facilities to externalize RelNodes to and from XML and JSON format.\npackage rel.hint; // Defines hints interfaces and utilities for relational expressions.\npackage rel.logical; // Defines logical relational expressions.\npackage rel.metadata; // Defines metadata interfaces and utilities for relational expressions.\npackage rel.mutable; // Defines mutable relational expressions.\npackage rel.rel2sql; // Translates a relational expression to SQL parse tree.\npackage rel.rules; // Provides a core set of planner rules.\npackage rel.stream; // Defines relational expressions for streaming.\npackage rel.type; // Defines a type system for relational expressions.\n\nClasses and Interfaces: \nInterface PhysicalNode; // Physical node in a planner that is capable of doing physical trait propagation and derivation.\nInterface RelCollation; // Description of the physical ordering of a relational expression.\nInterface RelDistribution; // Description of the physical distribution of a relational expression.\nInterface RelInput; // Context from which a relational expression can initialize itself, reading from a serialized form of the relational expression.\nInterface RelNode; // A RelNode is a relational expression.\nInterface RelNode.Context; // Context of a relational expression, for purposes of checking validity.\nInterface RelReferentialConstraint; // Interface for a referential constraint, i.e., Foreign-Key - Unique-Key relationship, between two tables.\nInterface RelShuttle; // Visitor that has methods for the common logical relational expressions.\nInterface RelWriter; // Callback for an expression to dump itself to.\nClass AbstractRelNode; // Base class for every relational expression (RelNode).\nClass BiRel; // Abstract base class for relational expressions with a two inputs.\nClass RelCollationImpl; // Simple implementation of RelCollation.\nClass RelCollations; // Utilities concerning RelCollation and RelFieldCollation.\nClass RelCollationTraitDef; // Definition of the ordering trait.\nClass RelDistributions; // Utilities concerning RelDistribution.\nClass RelDistributionTraitDef; // Definition of the distribution trait.\n", "des": "Defines relational expressions."}
{"index": 1482, "repo": "tribuo-core-4.3.1", "code": "Package: metrics\n\nClasses and Interfaces: \npublic interface EvaluationMetric<T extends Output<T>,C extends MetricContext<T>>; // A metric that can be calculated for the specified output type.\npublic static enum EvaluationMetric.Average extends Enum<EvaluationMetric.Average>; // Specifies what form of average to use for a EvaluationMetric.\npublic abstract class MetricContext<T extends Output<T>> extends Object; // The context for a metric or set of metrics.\npublic final class MetricID<T extends Output<T>> extends com.oracle.labs.mlrg.olcut.util.Pair<MetricTarget<T>,String>; // Just an easier-to-read alias for Pair<MetricTarget<T>, String>.\npublic class MetricTarget<T extends Output<T>> extends Object; // Used by a given EvaluationMetric to determine whether it should compute its value for a specific Output value or whether it should average them.\n", "des": "This package contains the infrastructure classes for building evaluation metrics."}
{"index": 1111, "repo": "fontbox-3.0.0-beta1", "code": "Package: util\n\nSub Packages: \npackage util.autodetect; // This package contains utility classes to manage local fonts.\n\nClasses and Interfaces: \nClass BoundingBox; // This is an implementation of a bounding box.\n", "des": "This package contains utility classes used by various font types."}
{"index": 2358, "repo": "spring-boot-3.1.1", "code": "Package: context\n\nClasses and Interfaces: \npublic class AnnotationConfigServletWebApplicationContext extends org.springframework.web.context.support.GenericWebApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry; // GenericWebApplicationContextthat accepts annotated classes as input - in particular @Configuration-annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations.\npublic class AnnotationConfigServletWebServerApplicationContext extends ServletWebServerApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry; // ServletWebServerApplicationContext that accepts annotated classes as input - in particular @Configuration -annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations.\npublic class ServletWebServerApplicationContext extends org.springframework.web.context.support.GenericWebApplicationContext implements ConfigurableWebServerApplicationContext; // A WebApplicationContext that can be used to bootstrap itself from a contained ServletWebServerFactory bean.\npublic static class ServletWebServerApplicationContext.ExistingWebApplicationScopes extends Object; // Utility class to store and restore any user defined scopes.\npublic class ServletWebServerInitializedEvent extends WebServerInitializedEvent; // Event to be published after the WebServer is ready.\npublic class WebApplicationContextServletContextAwareProcessor extends org.springframework.web.context.support.ServletContextAwareProcessor; // Variant of ServletContextAwareProcessor for use with a ConfigurableWebApplicationContext.\npublic class XmlServletWebServerApplicationContext extends ServletWebServerApplicationContext; // ServletWebServerApplicationContext which takes its configuration from XML documents, understood by an XmlBeanDefinitionReader.\n", "des": "Servlet based web integrations with Spring's WebApplicationContext."}
{"index": 2527, "repo": "spring-security-core-6.1.2", "code": "Package: event\n\nClasses and Interfaces: \npublic abstract class AbstractAuthenticationEvent extends org.springframework.context.ApplicationEvent; // Represents an application authentication event.\npublic abstract class AbstractAuthenticationFailureEvent extends AbstractAuthenticationEvent; // Abstract application event which indicates authentication failure for some reason.\npublic class AuthenticationFailureBadCredentialsEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to invalid credentials being presented.\npublic class AuthenticationFailureCredentialsExpiredEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to the user's credentials having expired.\npublic class AuthenticationFailureDisabledEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to the user's account being disabled.\npublic class AuthenticationFailureExpiredEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to the user's account having expired.\npublic class AuthenticationFailureLockedEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to the user's account having been locked.\npublic class AuthenticationFailureProviderNotFoundEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to there being no registered AuthenticationProvider that can process the request.\npublic class AuthenticationFailureProxyUntrustedEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to the CAS user's ticket being generated by an untrusted proxy.\npublic class AuthenticationFailureServiceExceptionEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to there being a problem internal to the AuthenticationManager.\npublic class AuthenticationSuccessEvent extends AbstractAuthenticationEvent; // Application event which indicates successful authentication.\npublic class InteractiveAuthenticationSuccessEvent extends AbstractAuthenticationEvent; // Indicates an interactive authentication was successful.\npublic class LoggerListener extends Object implements org.springframework.context.ApplicationListener<AbstractAuthenticationEvent>; // Outputs authentication-related application events to Commons Logging.\npublic class LogoutSuccessEvent extends AbstractAuthenticationEvent; // Application event which indicates successful logout\n", "des": "Authentication success and failure events which can be published to the Spring application context."}
{"index": 1262, "repo": "spring-core-6.0.11", "code": "Package: internal\n\nClasses and Interfaces: \npublic class CustomizerRegistry extends Object;\npublic interface Function<K,V>;\npublic class LoadingCache<K,KK,V> extends Object;\n", "des": "Spring's repackaging of the CGLIB core internal package (for internal use only)."}
{"index": 1641, "repo": "jena-core-4.9.0", "code": "Package: xsd\n\nSub Packages: \npackage xsd.impl; // Provides implementations of the XSD datatype.\n\nClasses and Interfaces: \npublic class AbstractDateTime extends Object implements Comparable<AbstractDateTime>; // Base class for representation of XSD duration, time, date/time and related datatype instances.\npublic class IllegalDateTimeFieldException extends JenaException; // Exception thrown when attempting to access a field of an XSDDateTime object that is not legal for the current date/time type.\npublic class XSDbase64Binary extends XSDbinary; // Implement base64binary type.\npublic abstract class XSDbinary extends XSDDatatype; // Root class for XSD datatypes with binary values, xsd:hexBinary and xsd:base64Binary.\npublic class XSDDatatype extends BaseDatatype; // Representation of an XSD datatype based on the Xerces-2 XSD implementation.\npublic static class XSDDatatype.XSDGenericType extends XSDDatatype; // Generic XML Schema datatype (outside the xsd: namespace)\npublic class XSDDateTime extends AbstractDateTime; // Represent an XSD date/time value.\npublic class XSDDuration extends AbstractDateTime; // Represent an XSD duration value.\npublic class XSDhexBinary extends XSDbinary; // Implement hexbinary type.\n", "des": "Provides datatype definitions for the XML Schema datatypes support by Jena."}
{"index": 1049, "repo": "commons-io-2.13.0", "code": "Package: function\n\nClasses and Interfaces: \nInterface IOBaseStream<T,S extends IOBaseStream<T,S,B>,B extends BaseStream<T,B>>; // Like BaseStream but throws IOException.\nInterface IOBiConsumer<T,U>; // Like BiConsumer but throws IOException.\nInterface IOBiFunction<T,U,R>; // Like BiFunction but throws IOException.\nInterface IOBinaryOperator<T>; // Like BinaryOperator but throws IOException.\nInterface IOComparator<T>; // Like Comparator but throws IOException.\nInterface IOConsumer<T>; // Like Consumer but throws IOException.\nInterface IOFunction<T,R>; // Like Function but throws IOException.\nInterface IOIterator<E>; // Like Iterator but throws IOException.\nInterface IOPredicate<T>; // Like Predicate but throws IOException.\nInterface IOQuadFunction<T,U,V,W,R>; // Represents a function that accepts four arguments and produces a result.\nInterface IORunnable; // Like Runnable but throws IOException.\nInterface IOSpliterator<T>; // Like Spliterator but throws IOException.\nInterface IOStream<T>; // Like Stream but throws IOException.\nInterface IOSupplier<T>; // Like Supplier but throws IOException.\nInterface IOTriConsumer<T,U,V>; // Like BiConsumer but throws IOException.\nInterface IOTriFunction<T,U,V,R>; // Represents a function that accepts three arguments and produces a result.\nInterface IOUnaryOperator<T>; // Like UnaryOperator but throws IOException.\nClass Uncheck; // Unchecks calls by throwing UncheckedIOException instead of IOException.\n", "des": "Provides IO-only related functional interfaces for lambda expressions and method references."}
{"index": 754, "repo": "artemis-odb-2.3.0", "code": "Package: utils\n\nClasses and Interfaces: \nInterface ArtemisProfiler;\nInterface ImmutableBag<E>; // A non-modifiable bag.\nInterface ImmutableIntBag<E>; // A non-modifiable intbag.\nClass Bag<E>; // Collection type a bit like ArrayList but does not preserve the order of its entities, speedwise it is very good, especially suited for games.\nClass BitVector; // Performance optimized bitset implementation.\nClass ConverterUtil;\nClass EntityBuilder; // Non-reusable entity creation helper for rapid prototyping.\nClass IntBag; // Collection type a bit like ArrayList but does not preserve the order of its entities, speedwise it is very good, especially suited for games.\nClass IntBagIterator; // Base iterator for IntBag\nClass IntDeque; // Missing tests and missing methods: (push|peek|pop)(Back|Front).\nClass ShortBag; // Collection type a bit like ArrayList but does not preserve the order of its entities, speedwise it is very good, especially suited for games.\nClass Sort; // Provides methods to sort arrays of objects.\nEnum IntBagIterator.State;\n", "des": "Helper classes."}
{"index": 252, "repo": "nutch-2.4", "code": "Package: suffix\n\nClasses and Interfaces: \nClass SuffixURLFilter; // Filters URLs based on a file of URL suffixes.\n", "des": "URL filter plugin to either exclude or include only URLs which match one of the given (path) suffixes."}
{"index": 3681, "repo": "solr-core-9.3.0", "code": "Package: macro\n\nClasses and Interfaces: \nClass MacroExpander;\n", "des": "Parameter substitution / macro expansion."}
{"index": 3018, "repo": "spring-web-6.0.11", "code": "Package: web\n\nSub Packages: \npackage web.accept; // This package contains classes used to determine the requested the media types in a request.\npackage web.bind; // Provides web-specific data binding functionality.\npackage web.client; // Core package of the client-side web support.\npackage web.context; // Contains a variant of the application context interface for web applications, and the ContextLoaderListener that bootstraps a root web application context.\npackage web.cors; // Support for CORS (Cross-Origin Resource Sharing), based on a common CorsProcessor strategy.\npackage web.filter; // Provides generic filter base classes allowing for bean-style configuration.\npackage web.jsf; // Support classes for integrating a JSF web layer with a Spring service layer which is hosted in a Spring root WebApplicationContext.\npackage web.method; // Common infrastructure for handler method processing, as used by Spring MVC's org.springframework.web.servlet.mvc.method package.\npackage web.multipart; // Multipart resolution framework for handling file uploads.\npackage web.server; // Core interfaces and classes for Spring's generic, reactive web support.\npackage web.util; // Miscellaneous web utility classes, such as HTML escaping and cookie handling.\n\nClasses and Interfaces: \npublic interface ErrorResponse; // Representation of a complete RFC 7807 error response including status, headers, and an RFC 7807 formatted ProblemDetail body.\npublic static interface ErrorResponse.Builder; // Builder for an ErrorResponse.\npublic class ErrorResponseException extends org.springframework.core.NestedRuntimeException implements ErrorResponse; // RuntimeException that implements ErrorResponse to expose an HTTP status, response headers, and a body formatted as an RFC 7807 ProblemDetail.\npublic abstract class HttpMediaTypeException extends ServletException implements ErrorResponse; // Abstract base for exceptions related to media types.\npublic class HttpMediaTypeNotAcceptableException extends HttpMediaTypeException; // Exception thrown when the request handler cannot generate a response that is acceptable by the client.\npublic class HttpMediaTypeNotSupportedException extends HttpMediaTypeException; // Exception thrown when a client POSTs, PUTs, or PATCHes content of a type not supported by request handler.\n@FunctionalInterface public interface HttpRequestHandler; // Plain handler interface for components that process HTTP requests, analogous to a Servlet.\n", "des": "Common, generic interfaces that define minimal boundary points between Spring's web infrastructure and other framework modules."}
{"index": 3827, "repo": "lucene-analysis-common-9.7.0", "code": "Package: snowball\n\nSub Packages: \npackage snowball.ext; // Autogenerated snowball stemmer implementations.\n\nClasses and Interfaces: \nClass Among; // Internal class used by Snowball stemmers\nClass SnowballProgram; // Base class for a snowball stemmer\nClass SnowballStemmer; // Parent class of all snowball stemmers, which must implement stem\n", "des": "Snowball stemmer API"}
{"index": 2567, "repo": "pulsar-common-3.0.0", "code": "Package: stats\n\nClasses and Interfaces: \npublic class JvmDefaultGCMetricsLogger extends Object implements JvmGCMetricsLogger;\npublic class JvmG1GCMetricsLogger extends Object implements JvmGCMetricsLogger; // Logger for the JVM G1 GC metrics.\npublic interface JvmGCMetricsLogger; // JvmGCMetricsLogger can be implemented for each specific GC type which retrieves GC count and pause time and logs it into metrics.\npublic class JvmMetrics extends Object; // This class is responsible for providing JVM metrics.\npublic abstract class MetricsMixIn extends Object;\npublic class Rate extends Object;\n", "des": "Definition of classes responsible for statistics."}
{"index": 1731, "repo": "spring-jdbc-6.0.11", "code": "Package: init\n\nClasses and Interfaces: \npublic class CannotReadScriptException extends ScriptException; // Thrown by ScriptUtils if an SQL script cannot be read.\npublic class CompositeDatabasePopulator extends Object implements DatabasePopulator; // Composite DatabasePopulator that delegates to a list of given DatabasePopulator implementations, executing all scripts.\n@FunctionalInterface public interface DatabasePopulator; // Strategy used to populate, initialize, or clean up a database.\npublic abstract class DatabasePopulatorUtils extends Object; // Utility methods for executing a DatabasePopulator.\npublic class DataSourceInitializer extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Used to set up a database during initialization and clean up a database during destruction.\npublic class ResourceDatabasePopulator extends Object implements DatabasePopulator; // Populates, initializes, or cleans up a database using SQL scripts defined in external resources.\npublic abstract class ScriptException extends org.springframework.dao.DataAccessException; // Root of the hierarchy of data access exceptions that are related to processing of SQL scripts.\npublic class ScriptParseException extends ScriptException; // Thrown by ScriptUtils if an SQL script cannot be properly parsed.\npublic class ScriptStatementFailedException extends ScriptException; // Thrown by ScriptUtils if a statement in an SQL script failed when executing it against the target database.\npublic abstract class ScriptUtils extends Object; // Generic utility methods for working with SQL scripts in conjunction with JDBC.\npublic class UncategorizedScriptException extends ScriptException; // Thrown when we cannot determine anything more specific than \"something went wrong while processing an SQL script\": for example, a SQLException from JDBC that we cannot pinpoint more precisely.\n", "des": "Provides extensible support for initializing databases through scripts."}
{"index": 3564, "repo": "guava-32.1.1-jre", "code": "Package: xml\n\nClasses and Interfaces: \nClass XmlEscapers; // Escaper instances suitable for strings to be included in XML attribute values and elements' text contents.\n", "des": "Escapers for XML."}
{"index": 1602, "repo": "spring-websocket-6.0.11", "code": "Package: frame\n\nClasses and Interfaces: \npublic abstract class AbstractSockJsMessageCodec extends Object implements SockJsMessageCodec; // A base class for SockJS message codec that provides an implementation of AbstractSockJsMessageCodec.encode(String[]).\npublic class DefaultSockJsFrameFormat extends Object implements SockJsFrameFormat; // A default implementation of SockJsFrameFormat that relies on String.format(String, Object...)..\npublic class Jackson2SockJsMessageCodec extends AbstractSockJsMessageCodec; // A Jackson 2.x codec for encoding and decoding SockJS messages.\npublic class SockJsFrame extends Object; // Represents a SockJS frame.\npublic interface SockJsFrameFormat; // Applies a transport-specific format to the content of a SockJS frame resulting in a content that can be written out.\npublic enum SockJsFrameType extends Enum<SockJsFrameType>; // SockJS frame types.\npublic interface SockJsMessageCodec; // Encode and decode messages to and from a SockJS message frame, essentially an array of JSON-encoded messages.\n", "des": "Support classes for creating SockJS frames including the encoding and decoding of SockJS message frames."}
{"index": 3426, "repo": "hibernate-core-5.6.15.Final", "code": "Package: registry\n\nSub Packages: \npackage registry.selector; // Defines a feature-set around named registration of implementations of various contracts and the ability to select those implementations.\n\nClasses and Interfaces: \nInterface BootstrapServiceRegistry; // Provides the most basic services needed.\nInterface StandardServiceInitiator<R extends Service>; // Contract for an initiator of services that target the standard ServiceRegistry.\nInterface StandardServiceRegistry; // Specialization of the ServiceRegistry contract mainly for type safety.\nClass BootstrapServiceRegistryBuilder; // Builder for BootstrapServiceRegistry instances.\nClass StandardServiceRegistryBuilder; // Builder for standard ServiceRegistry instances.\n", "des": "Defines service registry contracts application are likely to want to utilize for configuring Hibernate behavior."}
{"index": 2043, "repo": "spring-messaging-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractHeaderMapper<T> extends Object implements HeaderMapper<T>; // A base HeaderMapper implementation.\npublic abstract class AbstractMessageChannel extends Object implements MessageChannel, InterceptableChannel, org.springframework.beans.factory.BeanNameAware; // Abstract base class for MessageChannel implementations.\npublic abstract class AbstractSubscribableChannel extends AbstractMessageChannel implements SubscribableChannel; // Abstract base class for SubscribableChannel implementations.\npublic interface ChannelInterceptor; // Interface for interceptors that are able to view and/or modify the Messages being sent-to and/or received-from a MessageChannel.\npublic class ErrorMessage extends GenericMessage<Throwable>; // A GenericMessage with a Throwable payload.\npublic interface ExecutorChannelInterceptor extends ChannelInterceptor; // An extension of ChannelInterceptor with callbacks to intercept the asynchronous sending of a Message to a specific subscriber through an Executor.\npublic class ExecutorSubscribableChannel extends AbstractSubscribableChannel; // A SubscribableChannel that sends messages to each of its subscribers.\npublic class GenericMessage<T> extends Object implements Message<T>, Serializable; // An implementation of Message with a generic payload.\npublic interface HeaderMapper<T>; // Generic strategy interface for mapping MessageHeaders to and from other types of objects.\npublic class IdTimestampMessageHeaderInitializer extends Object implements MessageHeaderInitializer; // A MessageHeaderInitializer to customize the strategy for ID and TIMESTAMP message header generation.\npublic class ImmutableMessageChannelInterceptor extends Object implements ChannelInterceptor; // A simpler interceptor that calls MessageHeaderAccessor.setImmutable() on the headers of messages passed through the preSend method.\npublic interface InterceptableChannel; // A MessageChannel that maintains a list ChannelInterceptors and allows interception of message sending.\npublic final class MessageBuilder<T> extends Object; // A builder for creating a GenericMessage (or ErrorMessage if the payload is of type Throwable).\npublic interface MessageHandlingRunnable extends Runnable; // Extension of the Runnable interface with methods to obtain the MessageHandler and Message to be handled.\npublic class MessageHeaderAccessor extends Object; // Wrapper around MessageHeaders that provides extra features such as strongly typed accessors for specific headers, the ability to leave headers in a Message mutable, and the option to suppress automatic generation of id and timestamp headers.\npublic interface MessageHeaderInitializer; // Callback interface for initializing a MessageHeaderAccessor.\n", "des": "Provides implementations of Message along with a MessageBuilder and MessageHeaderAccessor for building and working with messages and message headers, as well as various MessageChannel implementations and channel interceptor support."}
{"index": 831, "repo": "calcite-core-1.34.0", "code": "Package: materialize\n\nClasses and Interfaces: \nInterface LatticeStatisticProvider; // Estimates row counts for a lattice and its attributes.\nInterface LatticeStatisticProvider.Factory; // Creates a LatticeStatisticProvider for a given Lattice.\nInterface MaterializationService.TableFactory; // Creates tables that represent a materialized view.\nInterface SqlStatisticProvider; // Estimates row counts for tables and columns, and whether combinations of columns form primary/unique and foreign keys.\nClass DelegatingLatticeStatisticProvider; // Implementation of LatticeStatisticProvider that delegates to an underlying provider.\nClass Lattice; // Structure that allows materialized views based upon a star schema to be recognized and recommended.\nClass Lattice.BaseColumn; // Column in a lattice.\nClass Lattice.Builder; // Lattice builder.\nClass Lattice.Column; // Column in a lattice.\nClass Lattice.DerivedColumn; // Column in a lattice that is based upon a SQL expression.\nClass Lattice.Measure; // A measure within a Lattice.\nClass Lattice.SqlWriter; // The information necessary to convert a column to SQL.\nClass Lattice.Tile; // Materialized aggregate within a lattice.\nClass Lattice.TileBuilder; // Tile builder.\nClass LatticeChildNode; // Non-root node in a Lattice.\nClass LatticeNode; // Source relation of a lattice.\nClass LatticeRootNode; // Root node in a Lattice.\nClass Lattices; // Utilities for Lattice, LatticeStatisticProvider.\nClass LatticeSuggester; // Algorithm that suggests a set of lattices.\nClass LatticeTable; // Table registered in the graph.\nClass MaterializationKey; // Unique identifier for a materialization.\nClass MaterializationService; // Manages the collection of materialized tables known to the system, and the process by which they become valid and invalid.\nClass MaterializationService.DefaultTableFactory; // Default implementation of MaterializationService.TableFactory.\nClass TileKey; // Definition of a particular combination of dimensions and measures of a lattice that is the basis of a materialization.\nClass TileSuggester; // Algorithm that suggests a set of initial tiles (materialized aggregate views) for a given lattice.\n", "des": "Management of materialized query results."}
{"index": 1925, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: freemarker\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnClass({freemarker.template.Configuration.class,org.springframework.ui.freemarker.FreeMarkerConfigurationFactory.class}) @EnableConfigurationProperties(FreeMarkerProperties.class) @Import({org.springframework.boot.autoconfigure.freemarker.FreeMarkerServletWebConfiguration.class,org.springframework.boot.autoconfigure.freemarker.FreeMarkerReactiveWebConfiguration.class,org.springframework.boot.autoconfigure.freemarker.FreeMarkerNonWebConfiguration.class}) @ImportRuntimeHints(org.springframework.boot.autoconfigure.freemarker.FreeMarkerRuntimeHints.class) public class FreeMarkerAutoConfiguration extends Object; // Auto-configuration for FreeMarker.\n@ConfigurationProperties(prefix=\"spring.freemarker\") public class FreeMarkerProperties extends AbstractTemplateViewResolverProperties; // @ConfigurationProperties for configuring FreeMarker.\npublic class FreeMarkerTemplateAvailabilityProvider extends PathBasedTemplateAvailabilityProvider; // TemplateAvailabilityProvider that provides availability information for FreeMarker view templates.\nprotected static final class FreeMarkerTemplateAvailabilityProvider.FreeMarkerTemplateAvailabilityProperties extends PathBasedTemplateAvailabilityProvider.TemplateAvailabilityProperties;\n", "des": "Auto-configuration for FreeMarker."}
{"index": 689, "repo": "jackson-databind-2.15.2", "code": "Package: jsonschema\n\nClasses and Interfaces: \nInterface SchemaAware; // Since 2.15, we recommend use of external JSON Schema generator module\nClass JsonSchema; // Since 2.2, we recommend use of external JSON Schema generator module\nAnnotation Type JsonSerializableSchema; // Since 2.15, we recommend use of external JSON Schema generator module\n", "des": "Classes needed for JSON schema support (currently just ability to generate schemas using serialization part of data mapping)"}
{"index": 2016, "repo": "spring-boot-devtools-3.1.1", "code": "Package: classloader\n\nClasses and Interfaces: \npublic class ClassLoaderFile extends Object implements Serializable; // A single file that may be served from a ClassLoader.\npublic static enum ClassLoaderFile.Kind extends Enum<ClassLoaderFile.Kind>; // The kinds of class load files.\n@FunctionalInterface public interface ClassLoaderFileRepository; // A container for files that may be served from a ClassLoader.\npublic class ClassLoaderFiles extends Object implements ClassLoaderFileRepository, Serializable; // ClassLoaderFileRepository that maintains a collection of ClassLoaderFile items grouped by source directories.\npublic static class ClassLoaderFiles.SourceDirectory extends Object implements Serializable; // An individual source directory that is being managed by the collection.\npublic class ClassLoaderFileURLStreamHandler extends URLStreamHandler; // URLStreamHandler for the contents of a ClassLoaderFile.\npublic class RestartClassLoader extends URLClassLoader implements org.springframework.core.SmartClassLoader; // Disposable ClassLoader used to support application restarting.\n", "des": "Classloaders used for reload support."}
{"index": 2789, "repo": "spring-expression-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic final class BooleanTypedValue extends TypedValue; // A TypedValue for booleans.\npublic final class DataBindingMethodResolver extends ReflectiveMethodResolver; // A MethodResolver variant for data binding purposes, using reflection to access instance methods on a given target object.\npublic final class DataBindingPropertyAccessor extends ReflectivePropertyAccessor; // A PropertyAccessor variant for data binding purposes, using reflection to access properties for reading and possibly writing.\npublic abstract class ReflectionHelper extends Object; // Utility methods used by the reflection resolver code to discover the appropriate methods/constructors and fields that should be used in expressions.\npublic class ReflectiveConstructorExecutor extends Object implements ConstructorExecutor; // A simple ConstructorExecutor implementation that runs a constructor using reflective invocation.\npublic class ReflectiveConstructorResolver extends Object implements ConstructorResolver; // A constructor resolver that uses reflection to locate the constructor that should be invoked.\npublic class ReflectiveMethodExecutor extends Object implements MethodExecutor; // MethodExecutor that works via reflection.\npublic class ReflectiveMethodResolver extends Object implements MethodResolver; // Reflection-based MethodResolver used by default in StandardEvaluationContext unless explicit method resolvers have been specified.\npublic class ReflectivePropertyAccessor extends Object implements PropertyAccessor; // A powerful PropertyAccessor that uses reflection to access properties for reading and possibly also for writing on a target instance.\npublic static class ReflectivePropertyAccessor.OptimalPropertyAccessor extends Object implements CompilablePropertyAccessor; // An optimized form of a PropertyAccessor that will use reflection but only knows how to access a particular property on a particular class.\npublic final class SimpleEvaluationContext extends Object implements EvaluationContext; // A basic implementation of EvaluationContext that focuses on a subset of essential SpEL features and customization options, targeting simple condition evaluation and in particular data binding scenarios.\npublic static class SimpleEvaluationContext.Builder extends Object; // Builder for SimpleEvaluationContext.\npublic class StandardEvaluationContext extends Object implements EvaluationContext; // A powerful and highly configurable EvaluationContext implementation.\npublic class StandardOperatorOverloader extends Object implements OperatorOverloader; // Standard implementation of OperatorOverloader.\npublic class StandardTypeComparator extends Object implements TypeComparator; // A basic TypeComparator implementation: supports comparison of Number types as well as types implementing Comparable.\npublic class StandardTypeConverter extends Object implements TypeConverter; // Default implementation of the TypeConverter interface, delegating to a core Spring ConversionService.\n", "des": "SpEL's default implementations for various core abstractions."}
{"index": 1329, "repo": "groovy-all-4.0.13", "code": "Package: stmt\n\nClasses and Interfaces: \npublic class AssertStatement extends Statement; // Represents an assert statement.\npublic class BlockStatement extends Statement; // A list of statements and a scope.\npublic class BreakStatement extends Statement; // Represents a break statement in a switch or loop statement\npublic class CaseStatement extends Statement; // Represents a case statement in a switch statement\npublic class CatchStatement extends Statement; // Represents a catch (Exception var) { } statement\npublic class ContinueStatement extends Statement; // Represents a continue statement in a loop statement\npublic class DoWhileStatement extends Statement implements LoopingStatement; // Represents a do { ...\npublic class EmptyStatement extends Statement;\npublic class ExpressionStatement extends Statement; // A simple statement such as a method call where the return value is ignored\npublic class ForStatement extends Statement implements LoopingStatement; // Represents a standard for loop in Groovy\npublic class IfStatement extends Statement; // Represents an if (condition) { ...\npublic interface LoopingStatement; // This is an AST Node that provides some sort of looping mechanism.\npublic class ReturnStatement extends Statement; // A return statement\npublic class Statement extends ASTNode; // Base class for any statement.\npublic class SwitchStatement extends Statement; // Represents a switch (object) { case value: ...\npublic class SynchronizedStatement extends Statement; // Represents a synchronized statement\npublic class ThrowStatement extends Statement; // Represents a throw statement\npublic class TryCatchStatement extends Statement; // Represents a try { ...\npublic class WhileStatement extends Statement implements LoopingStatement; // Represents a while (condition) { ...\n", "des": "AST nodes for Groovy statements"}
{"index": 3847, "repo": "lucene-core-9.7.0", "code": "Package: tests\n\nClasses and Interfaces: \nInterface ConcurrentMergeSchedulerAccess; // Access to ConcurrentMergeScheduler internals exposed to the test framework.\nInterface IndexPackageAccess; // Access to org.apache.lucene.index package internals exposed to the test framework.\nInterface IndexPackageAccess.FieldInfosBuilder; // Public type exposing FieldInfo internal builders.\nInterface IndexWriterAccess; // Access to IndexWriter internals exposed to the test framework.\nInterface SegmentReaderAccess; // Access to SegmentReader internals exposed to the test framework.\nClass TestSecrets; // A set of static methods returning accessors for internal, package-private functionality in Lucene.\n", "des": "Internal bridges to package-private internals, for use by the lucene test framework only."}
{"index": 3526, "repo": "opennlp-tools-2.2.0", "code": "Package: langdetect\n\nClasses and Interfaces: \nInterface LanguageDetector; // The interface for LanguageDetector which predicts the Language for a context.\nInterface LanguageDetectorContextGenerator; // A context generator interface for LanguageDetector.\nInterface LanguageDetectorEvaluationMonitor; // A marker interface for evaluating language detectors.\nClass DefaultLanguageDetectorContextGenerator; // A context generator for language detector.\nClass Language; // Class for holding the document language and its confidence\nClass LanguageDetectorConfig;\nClass LanguageDetectorCrossValidator; // Cross validator for LanguageDetector.\nClass LanguageDetectorEvaluator; // The LanguageDetectorEvaluator measures the performance of the given LanguageDetector with the provided reference LanguageSamples.\nClass LanguageDetectorEventStream; // Iterator-like class for modeling an event stream of samples.\nClass LanguageDetectorFactory; // Default factory used by LanguageDetector.\nClass LanguageDetectorME; // Implements a learnable LanguageDetector.\nClass LanguageDetectorModel; // The LanguageDetectorModel is the model used by a learnable LanguageDetector.\nClass LanguageDetectorSampleStream; // This class reads in string encoded training samples, parses them and outputs LanguageSample objects.\nClass LanguageSample; // Holds a classified document and its Language.\nClass ProbingLanguageDetectionResult; // A data container encapsulating language detection results.\n", "des": "Package related to predicting languages from samples of text."}
{"index": 2555, "repo": "pulsar-common-3.0.0", "code": "Package: data\n\nClasses and Interfaces: \npublic class LookupData extends Object; // This class encapsulates lookup data.\n", "des": "Lookup data."}
{"index": 3729, "repo": "lucene-queryparser-9.7.0", "code": "Package: core\n\nSub Packages: \npackage core.builders; // Necessary classes to implement query builders.\npackage core.config; // Base classes used to configure the query processing.\npackage core.messages; // Messages usually used by query parser implementations.\npackage core.nodes; // Query nodes commonly used by query parser implementations.\npackage core.parser; // Necessary interfaces to implement text parsers.\npackage core.processors; // Interfaces and implementations used by query node processors\npackage core.util; // Utility classes to used with the Query Parser.\n\nClasses and Interfaces: \nClass QueryParserHelper; // This class is a helper for the query parser framework, it does all the three query parser phrases at once: text parsing, query processing and query building.\nClass QueryNodeException; // This exception should be thrown if something wrong happens when dealing with QueryNodes.\nClass QueryNodeParseException; // This should be thrown when an exception happens during the query parsing from string to the query node tree.\nClass QueryNodeError; // Error class with NLS support\n", "des": "Core classes of the flexible query parser framework."}
{"index": 989, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: support\n\nClasses and Interfaces: \nClass SoapUtils; // Contains various utility methods for handling SOAP messages.\n", "des": "Classes supporting the org.springframework.ws.soap package."}
{"index": 3434, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nSub Packages: \npackage spi.support; // Package intended for simplifying the worked needed to implement a caching provider.\n\nClasses and Interfaces: \nInterface CacheImplementor; // SPI contract for Hibernate's second-level cache engine\nInterface CacheKeysFactory;\nInterface CacheTransactionSynchronization; // Defines a context object that a RegionFactory is asked to create (RegionFactory.createTransactionContext(org.hibernate.engine.spi.SharedSessionContractImplementor)}) when a Hibernate Session is created.\nInterface DirectAccessRegion; // Specialized Region whose data is accessed directly (not requiring key/item wrapping, e.g.\nInterface DomainDataRegion; // A Region for cacheable domain data - entity, collection, natural-id.\nInterface ExtendedStatisticsSupport; // Optional Region contract defining support for extra statistic information\nInterface QueryCache;\nInterface QueryResultsCache; // Defines the responsibility for managing query result data caching in regards to a specific region.\nInterface QueryResultsRegion; // Defines the contract for a cache region which will specifically be used to store query results.\nInterface Region; // Contract for a named \"region\".\nInterface RegionFactory; // Contract for building second level cache regions.\nInterface SecondLevelCacheLogger;\nInterface TimestampsCache; // Wrapper for a TimestampsRegion adding handling of stale results\nInterface TimestampsCacheFactory; // Responsible for building the TimestampsRegionAccessFactory to use for managing query results in regards to staleness of the underlying tables (sometimes called \"query spaces\" or \"table spaces\")\nInterface TimestampsRegion;\nInterface UpdateTimestampsCache;\nClass AbstractCacheTransactionSynchronization;\nClass AbstractRegionFactory;\nClass FilterKey; // Allows cached queries to be keyed by enabled filters.\nClass QueryKey; // A key that identifies a particular query with bound parameter values.\nClass QuerySpacesHelper;\nClass SecondLevelCacheLogger_$logger; // Warning this class consists of generated code.\nClass StandardCacheTransactionSynchronization;\n", "des": "Defines the integration aspect of Hibernate's second-level caching allowing \"caching back ends\" to be plugged in as a caching provider."}
{"index": 2360, "repo": "spring-boot-3.1.1", "code": "Package: filter\n\nClasses and Interfaces: \npublic class ApplicationContextHeaderFilter extends org.springframework.web.filter.OncePerRequestFilter; // OncePerRequestFilter to add an X-Application-Context header that contains the ApplicationContext ID.\npublic class OrderedCharacterEncodingFilter extends org.springframework.web.filter.CharacterEncodingFilter implements OrderedFilter; // CharacterEncodingFilter that also implements Ordered.\npublic interface OrderedFilter extends jakarta.servlet.Filter, org.springframework.core.Ordered; // An Ordered Filter.\npublic class OrderedFormContentFilter extends org.springframework.web.filter.FormContentFilter implements OrderedFilter; // FormContentFilter that also implements Ordered.\npublic class OrderedHiddenHttpMethodFilter extends org.springframework.web.filter.HiddenHttpMethodFilter implements OrderedFilter; // HiddenHttpMethodFilter that also implements Ordered.\npublic class OrderedRequestContextFilter extends org.springframework.web.filter.RequestContextFilter implements OrderedFilter; // RequestContextFilter that also implements Ordered.\n", "des": "Spring Boot specific Filter implementations."}
{"index": 452, "repo": "camel-core-3.0.0-RC1", "code": "Package: config\n\nClasses and Interfaces: \nClass BatchResequencerConfig; // Configures batch-processing resequence eip.\nClass ResequencerConfig;\nClass StreamResequencerConfig; // Configures stream-processing resequence eip.\n", "des": "The JAXB POJOs for various configurations for the XML Configuration of the routing rules."}
{"index": 3057, "repo": "spring-ws-core-4.0.5", "code": "Package: config\n\nClasses and Interfaces: \npublic class WebServicesNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for the 'web-services' namespace.\n", "des": "Provides an namespace handler for the Spring Web Services namespace."}
{"index": 2498, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: startup\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.startup.StartupEndpoint.class) @Conditional(org.springframework.boot.actuate.autoconfigure.startup.StartupEndpointAutoConfiguration.ApplicationStartupCondition.class) public class StartupEndpointAutoConfiguration extends Object; // Auto-configuration for the StartupEndpoint.\n", "des": "Auto-configuration for actuator ApplicationStartup concerns."}
{"index": 1332, "repo": "groovy-all-4.0.13", "code": "Package: control\n\nSub Packages: \npackage control.io; // Internal classes for Groovier Input/Output.\npackage control.messages; // Error message classes.\n\nClasses and Interfaces: \npublic class AnnotationConstantsVisitor extends ClassCodeVisitorSupport; // Resolves constants in annotation definitions.\npublic class ASTTransformationsContext extends Object; // Stores state information about global AST transformations applied to a compilation unit.\npublic interface BytecodeProcessor;\npublic class ClassNodeResolver extends Object; // This class is used as a pluggable way to resolve class names.\npublic static class ClassNodeResolver.LookupResult extends Object; // Helper class to return either a SourceUnit or ClassNode.\npublic class CompilationFailedException extends GroovyRuntimeException; // Thrown when compilation fails from source errors.\npublic class CompilationUnit extends ProcessingUnit; // The CompilationUnit collects all compilation data as it is generated by the compiler system.\n@FunctionalInterface public static interface CompilationUnit.ClassgenCallback; // A callback interface you can use during the classgen phase of compilation as the compiler traverses the ClassNode tree.\n@Deprecated public abstract static class CompilationUnit.GroovyClassOperation extends Object implements CompilationUnit.IGroovyClassOperation;\n@FunctionalInterface public static interface CompilationUnit.IGroovyClassOperation;\n@FunctionalInterface public static interface CompilationUnit.IPrimaryClassNodeOperation;\n@FunctionalInterface public static interface CompilationUnit.ISourceUnitOperation;\n@Deprecated public abstract static class CompilationUnit.PrimaryClassNodeOperation extends Object implements CompilationUnit.IPrimaryClassNodeOperation;\n@FunctionalInterface public static interface CompilationUnit.ProgressCallback; // A callback interface you can use to get a callback after every unit of the compile process.\n@Deprecated public abstract static class CompilationUnit.SourceUnitOperation extends Object implements CompilationUnit.ISourceUnitOperation;\npublic enum CompilePhase extends Enum<CompilePhase>; // The phases of the GroovyCompiler.\npublic class CompilerConfiguration extends Object; // Compilation control flags and coordination stuff.\npublic class ConfigurationException extends RuntimeException implements GroovyExceptionInterface; // Thrown when configuration data is invalid.\npublic class ErrorCollector extends Object implements Serializable; // A base class for collecting messages and errors during processing.\npublic class GenericsVisitor extends ClassCodeVisitorSupport; // Verify correct usage of generics.\npublic interface HasCleanup; // An interface for things that need to be cleaned up after operations complete.\n", "des": "Compiler control classes."}
{"index": 2398, "repo": "spring-batch-core-5.0.2", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractPartitionHandler extends Object implements PartitionHandler; // Base PartitionHandler implementation providing common base features.\npublic class DefaultStepExecutionAggregator extends Object implements StepExecutionAggregator; // Convenience class for aggregating a set of StepExecution instances into a single result.\npublic class MultiResourcePartitioner extends Object implements Partitioner; // Implementation of Partitioner that locates multiple resources and associates their file names with execution context keys.\n@FunctionalInterface public interface Partitioner; // Central strategy interface for creating input parameters for a partitioned step in the form of ExecutionContext instances.\npublic interface PartitionNameProvider; // Optional interface for Partitioner implementations that need to use a custom naming scheme for partitions.\npublic class PartitionStep extends AbstractStep; // Implementation of Step which partitions the execution and spreads the load using a PartitionHandler.\npublic class RemoteStepExecutionAggregator extends Object implements StepExecutionAggregator, org.springframework.beans.factory.InitializingBean; // Convenience class for aggregating a set of StepExecution instances when the input comes from remote steps, so the data need to be refreshed from the repository.\npublic class SimplePartitioner extends Object implements Partitioner; // Simplest possible implementation of Partitioner.\npublic class SimpleStepExecutionSplitter extends Object implements StepExecutionSplitter, org.springframework.beans.factory.InitializingBean; // Generic implementation of StepExecutionSplitter that delegates to a Partitioner to generate ExecutionContext instances.\n@FunctionalInterface public interface StepExecutionAggregator; // Strategy for a aggregating step executions, usually when they are the result of partitioned or remote execution.\npublic class TaskExecutorPartitionHandler extends AbstractPartitionHandler implements StepHolder, org.springframework.beans.factory.InitializingBean; // A PartitionHandler that uses a TaskExecutor to execute the partitioned Step locally in multiple threads.\n", "des": "Implementation of common partition components."}
{"index": 1420, "repo": "spring-boot-actuator-3.1.1", "code": "Package: startup\n\nClasses and Interfaces: \npublic class StartupTimeMetricsListener extends Object implements org.springframework.context.event.SmartApplicationListener; // Binds application startup metrics in response to ApplicationStartedEvent and ApplicationReadyEvent.\n", "des": "Actuator support for startup metrics."}
{"index": 382, "repo": "mahout-core-14.1", "code": "Package: engine\n\nClasses and Interfaces: \nClass MersenneTwister; // MersenneTwister (MT19937) is one of the strongest uniform pseudo-random number generators known so far; at the same time it is quick.\nClass RandomEngine; // Abstract base class for uniform pseudo-random number generating engines.\n", "des": "Engines generating strong uniformly distributed pseudo-random numbers; Needed by all JET probability distributions since they rely on uniform random numbers to generate random numbers from their own distribution."}
{"index": 3501, "repo": "poi-5.2.3", "code": "Package: filesystem\n\nClasses and Interfaces: \nInterface BATManaged; // This interface defines behaviors for objects managed by the Block Allocation Table (BAT).\nInterface DirectoryEntry; // This interface defines methods specific to Directory objects managed by a Filesystem instance.\nInterface DocumentEntry; // This interface defines methods specific to Document objects managed by a Filesystem instance.\nInterface Entry; // This interface provides access to an object managed by a Filesystem instance.\nInterface POIFSWriterListener; // Interface POIFSWriterListener\nClass BlockStore; // This abstract class describes a way to read, store, chain and free a series of blocks (be they Big or Small ones)\nClass DirectoryNode; // Simple implementation of DirectoryEntry\nClass DocumentDescriptor; // Class DocumentDescriptor\nClass DocumentFactoryHelper; // A small base class for the various factories, e.g.\nClass DocumentInputStream; // This class provides methods to read a DocumentEntry managed by a POIFSFileSystem instance.\nClass DocumentNode; // Simple implementation of DocumentEntry for OPOIFS\nClass DocumentOutputStream; // This class provides methods to write a DocumentEntry managed by a POIFSFileSystem instance.\nClass EntryNode; // Abstract implementation of Entry Extending classes should override isDocument() or isDirectory(), as appropriate Extending classes must override isDeleteOK()\nClass EntryUtils;\nClass FilteringDirectoryNode; // A DirectoryEntry filter, which exposes another DirectoryEntry less certain parts.\nClass Ole10Native; // Represents an Ole10Native record which is wrapped around certain binary files being embedded in OLE2 documents.\nClass POIFSDocument; // This class manages a document in the NIO POIFS filesystem.\nClass POIFSDocumentPath; // Class POIFSDocumentPath\nClass POIFSFileSystem; // This is the main class of the POIFS system; it manages the entire life cycle of the filesystem.\nClass POIFSMiniStore; // This class handles the MiniStream (small block store) in the NIO case for POIFSFileSystem\nClass POIFSStream; // This handles reading and writing a stream within a POIFSFileSystem.\nClass POIFSWriterEvent; // Class POIFSWriterEvent\nClass TempFilePOIFSFileSystem; // An experimental POIFSFileSystem to support the encryption of large files\n", "des": "filesystem package maps OLE 2 Compound document files to a more familiar filesystem interface."}
{"index": 1668, "repo": "spring-boot-cli-3.1.1", "code": "Package: command\n\nSub Packages: \npackage command.core; // Core CLI commands.\npackage command.encodepassword; // CLI command for password encoding.\npackage command.init; // CLI command for initializing a new application using Spring Initializr.\npackage command.options; // Support classes for handling command line options.\npackage command.shell; // Classes for running a nested shell in the CLI.\npackage command.status; // CLI command status.\n\nClasses and Interfaces: \npublic abstract class AbstractCommand extends Object implements Command; // Abstract Command implementation.\npublic interface Command; // A single command that can be run from the CLI.\npublic class CommandException extends RuntimeException; // Runtime exception wrapper that defines additional CommandException.Options that are understood by the CommandRunner.\npublic static enum CommandException.Option extends Enum<CommandException.Option>; // Specific options understood by the CommandRunner.\n@FunctionalInterface public interface CommandFactory; // Factory used to create CLI Commands.\npublic class CommandRunner extends Object implements Iterable<Command>; // Main class used to run Commands.\npublic class HelpExample extends Object; // An example that can be displayed in the help.\npublic class NoHelpCommandArgumentsException extends CommandException; // Exception used to when the help command is called without arguments.\npublic class NoSuchCommandException extends CommandException; // Exception used when a command is not found.\npublic abstract class OptionParsingCommand extends AbstractCommand; // Base class for a Command that parse options using an OptionHandler.\n", "des": "Command infrastructure for the CLI."}
{"index": 2965, "repo": "spring-integration-redis-6.1.2", "code": "Package: util\n\nClasses and Interfaces: \npublic final class RedisLockRegistry extends Object implements org.springframework.integration.support.locks.ExpirableLockRegistry, org.springframework.beans.factory.DisposableBean; // Implementation of ExpirableLockRegistry providing a distributed lock using Redis.\npublic static enum RedisLockRegistry.RedisLockType extends Enum<RedisLockRegistry.RedisLockType>; // The mode in which this registry is going to work with locks.\n", "des": "Provides utility classes."}
{"index": 315, "repo": "kafka-clients-3.5.0", "code": "Package: admin\n\nClasses and Interfaces: \nInterface Admin; // The administrative client for Kafka, which supports managing and inspecting topics, brokers, configurations and ACLs.\nClass AbortTransactionOptions;\nClass AbortTransactionResult; // The result of Admin.abortTransaction(AbortTransactionSpec, AbortTransactionOptions).\nClass AbortTransactionSpec;\nClass AbstractOptions<T extends AbstractOptions>;\nClass AdminClient; // The base class for in-built admin clients.\nClass AdminClientConfig; // The AdminClient configuration class, which also contains constants for configuration entry names.\nClass AlterClientQuotasOptions; // Options for Admin.alterClientQuotas(Collection, AlterClientQuotasOptions).\nClass AlterClientQuotasResult; // The result of the Admin.alterClientQuotas(Collection, AlterClientQuotasOptions) call.\nClass AlterConfigOp; // A class representing a alter configuration entry containing name, value and operation type.\nClass AlterConfigsOptions; // Options for Admin.incrementalAlterConfigs(Map) and Admin.alterConfigs(Map).\nClass AlterConfigsResult; // The result of the Admin.alterConfigs(Map) call.\nClass AlterConsumerGroupOffsetsOptions; // Options for the Admin.alterConsumerGroupOffsets(String, Map, AlterConsumerGroupOffsetsOptions) call.\nClass AlterConsumerGroupOffsetsResult; // The result of the Admin.alterConsumerGroupOffsets(String, Map) call.\nClass AlterPartitionReassignmentsOptions; // Options for Admin.alterPartitionReassignments(Map, AlterPartitionReassignmentsOptions) The API of this class is evolving.\nClass AlterPartitionReassignmentsResult; // The result of Admin.alterPartitionReassignments(Map, AlterPartitionReassignmentsOptions).\nClass AlterReplicaLogDirsOptions; // Options for Admin.alterReplicaLogDirs(Map, AlterReplicaLogDirsOptions).\nClass AlterReplicaLogDirsResult; // The result of Admin.alterReplicaLogDirs(Map, AlterReplicaLogDirsOptions).\nClass AlterUserScramCredentialsOptions; // Options for Admin.alterUserScramCredentials(List, AlterUserScramCredentialsOptions) The API of this class is evolving.\nClass AlterUserScramCredentialsResult; // The result of the Admin.alterUserScramCredentials(List) call.\n", "des": "Provides a Kafka client for performing administrative operations (such as creating topics and configuring brokers) on a Kafka cluster."}
{"index": 1969, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: reactive\n\nClasses and Interfaces: \n@AutoConfiguration(before=ReactiveSecurityAutoConfiguration.class) @EnableConfigurationProperties(OAuth2ClientProperties.class) @Conditional(org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration.NonServletApplicationCondition.class) @ConditionalOnClass({reactor.core.publisher.Flux.class,org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity.class,org.springframework.security.oauth2.client.registration.ClientRegistration.class}) @Import({org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientConfigurations.ReactiveClientRegistrationRepositoryConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientConfigurations.ReactiveOAuth2ClientConfiguration.class}) public class ReactiveOAuth2ClientAutoConfiguration extends Object; // Auto-configuration for Spring Security's Reactive OAuth2 client.\n", "des": "Auto-configuration for Spring Security's Reactive OAuth 2 client."}
{"index": 848, "repo": "calcite-core-1.34.0", "code": "Package: rel2sql\n\nClasses and Interfaces: \nClass RelToSqlConverter; // Utility to convert relational expressions to SQL abstract syntax tree.\nClass SqlImplementor; // State for generating a SQL statement.\nClass SqlImplementor.Context; // Context for translating a RexNode expression (within a RelNode) into a SqlNode expression (within a SQL parse tree).\nClass SqlImplementor.SimpleContext; // Simple implementation of SqlImplementor.Context that cannot handle sub-queries or correlations.\nEnum SqlImplementor.Clause; // Clauses in a SQL query.\n", "des": "Translates a relational expression to SQL parse tree."}
{"index": 1774, "repo": "spring-data-mongodb-4.1.2", "code": "Package: util\n\nSub Packages: \npackage util.json; // MongoDB driver-specific utility classes for Json conversion.\n\nClasses and Interfaces: \npublic class BsonUtils extends Object; // Internal API for operations on Bson elements that can be either Document or DBObject.\npublic class DBObjectUtils extends Object;\npublic class DotPath extends Object; // Value object representing a dot path.\npublic class MongoClientVersion extends Object; // MongoClientVersion holds information about the used mongo-java client and is used to distinguish between different versions.\npublic final class MongoDbErrorCodes extends Object; // MongoDbErrorCodes holds MongoDB specific error codes outlined in mongo/base/error_codes.err.\npublic abstract class RegexFlags extends Object; // Utility to translate regex flags to MongoDB regex options and vice versa.\n", "des": "MongoDB driver-specific utility classes for Bson and DBObject interaction."}
{"index": 837, "repo": "calcite-core-1.34.0", "code": "Package: prepare\n\nClasses and Interfaces: \nInterface Prepare.CatalogReader; // Interface by which validator and planner can read table metadata.\nInterface Prepare.PreparedResult; // Result of a call to Prepare.prepareSql(org.apache.calcite.sql.SqlNode, java.lang.Class, org.apache.calcite.sql.validate.SqlValidator, boolean).\nInterface Prepare.PreparingTable; // Definition of a table, for the purposes of the validator and planner.\nClass CalciteCatalogReader; // Implementation of Prepare.CatalogReader and also SqlOperatorTable based on tables and functions defined schemas.\nClass CalcitePrepareImpl; // Shit just got real.\nClass CalcitePrepareImpl.CalcitePreparingStmt; // Holds state for the process of preparing a SQL statement.\nClass CalciteSqlValidator; // Validator.\nClass PlannerImpl; // Implementation of Planner.\nClass Prepare; // Abstract base for classes that implement the process of preparing and executing SQL expressions.\nClass Prepare.AbstractPreparingTable; // Abstract implementation of Prepare.PreparingTable with an implementation for Prepare.AbstractPreparingTable.columnHasDefaultValue(org.apache.calcite.rel.type.RelDataType, int, org.apache.calcite.sql2rel.InitializerContext).\nClass Prepare.Materialization; // Describes that a given SQL query is materialized by a given table.\nClass Prepare.PreparedExplain; // PreparedExplanation is a PreparedResult for an EXPLAIN PLAN statement.\nClass Prepare.PreparedResultImpl; // Abstract implementation of Prepare.PreparedResult.\nClass RelOptTableImpl; // Implementation of RelOptTable.\n", "des": "Preparation of queries (parsing, planning and implementation)."}
{"index": 1539, "repo": "spring-context-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class SimpleJndiBeanFactory extends JndiLocatorSupport implements org.springframework.beans.factory.BeanFactory; // Simple JNDI-based implementation of Spring's BeanFactory interface.\n", "des": "Support classes for JNDI usage, including a JNDI-based BeanFactory implementation."}
{"index": 2781, "repo": "spring-security-ldap-6.1.2", "code": "Package: search\n\nClasses and Interfaces: \npublic class FilterBasedLdapUserSearch extends Object implements LdapUserSearch; // LdapUserSearch implementation which uses an Ldap filter to locate the user.\npublic interface LdapUserSearch; // Obtains a user's information from the LDAP directory given a login name.\n", "des": "LdapUserSearch implementations."}
{"index": 1437, "repo": "spring-boot-actuator-3.1.1", "code": "Package: reactive\n\nClasses and Interfaces: \npublic class HttpExchangesWebFilter extends Object implements org.springframework.web.server.WebFilter, org.springframework.core.Ordered; // A WebFilter for recording HTTP exchanges.\n", "des": "Actuator HTTP exchanges support for reactive servers."}
{"index": 3801, "repo": "lucene-analysis-common-9.7.0", "code": "Package: ngram\n\nClasses and Interfaces: \nClass EdgeNGramFilterFactory; // Creates new instances of EdgeNGramTokenFilter.\nClass EdgeNGramTokenFilter; // Tokenizes the given token into n-grams of given size(s).\nClass EdgeNGramTokenizer; // Tokenizes the input from an edge into n-grams of given size(s).\nClass EdgeNGramTokenizerFactory; // Creates new instances of EdgeNGramTokenizer.\nClass NGramFilterFactory; // Factory for NGramTokenFilter.\nClass NGramTokenFilter; // Tokenizes the input into n-grams of the given size(s).\nClass NGramTokenizer; // Tokenizes the input into n-grams of the given size(s).\nClass NGramTokenizerFactory; // Factory for NGramTokenizer.\n", "des": "Character n-gram tokenizers and filters."}
{"index": 98, "repo": "ignite-core-2.15.0", "code": "Package: messages\n\nClasses and Interfaces: \nClass TcpDiscoveryAbstractMessage; // Base class to implement discovery messages.\nClass TcpDiscoveryAbstractTraceableMessage; // Abstract traceable message for TCP discovery.\nClass TcpDiscoveryAuthFailedMessage; // Message telling joining node that its authentication failed on coordinator.\nClass TcpDiscoveryCheckFailedMessage; // Message telling joining node that it failed coordinator's validation check.\nClass TcpDiscoveryClientAckResponse;\nClass TcpDiscoveryClientMetricsUpdateMessage; // Metrics update message.\nClass TcpDiscoveryClientPingRequest; // Ping request.\nClass TcpDiscoveryClientPingResponse; // Ping request.\nClass TcpDiscoveryClientReconnectMessage; // Message telling that client node is reconnecting to topology.\nClass TcpDiscoveryConnectionCheckMessage; // Message used to check whether a node is still connected to the topology.\nClass TcpDiscoveryCustomEventMessage; // Wrapped for custom message.\nClass TcpDiscoveryDiscardMessage; // Message sent by coordinator when some operation handling is over.\nClass TcpDiscoveryDummyWakeupMessage;\nClass TcpDiscoveryDuplicateIdMessage; // Message telling joining node that new topology already contain different node with same ID.\nClass TcpDiscoveryHandshakeRequest; // Handshake request.\nClass TcpDiscoveryHandshakeResponse; // Handshake response.\nClass TcpDiscoveryJoinRequestMessage; // Initial message sent by a node that wants to enter topology.\nClass TcpDiscoveryLoopbackProblemMessage; // Message telling joining node that it has loopback problem (misconfiguration).\nClass TcpDiscoveryMetricsUpdateMessage; // Metrics update message.\nClass TcpDiscoveryMetricsUpdateMessage.MetricsSet;\nClass TcpDiscoveryNodeAddedMessage; // Message telling nodes that new node should be added to topology.\nClass TcpDiscoveryNodeAddFinishedMessage; // Sent by coordinator across the ring to finish node add process.\nClass TcpDiscoveryNodeFailedMessage; // Sent by node that has detected node failure to coordinator across the ring, then sent by coordinator across the ring.\nClass TcpDiscoveryNodeLeftMessage; // Sent by node that is stopping to coordinator across the ring, then sent by coordinator across the ring.\nClass TcpDiscoveryPingRequest; // Ping request.\nClass TcpDiscoveryPingResponse; // Ping response.\nClass TcpDiscoveryRingLatencyCheckMessage;\nClass TcpDiscoveryServerOnlyCustomEventMessage; // Wrapped for custom message that must not be delivered to the client nodes.\n", "des": "Contains implementation messages."}
{"index": 2405, "repo": "spring-batch-core-5.0.2", "code": "Package: builder\n\nClasses and Interfaces: \npublic abstract class AbstractTaskletStepBuilder<B extends AbstractTaskletStepBuilder<B>> extends StepBuilderHelper<B>; // Base class for step builders that want to build a TaskletStep.\npublic class FaultTolerantStepBuilder<I,O> extends SimpleStepBuilder<I,O>; // A step builder for fully fault tolerant chunk-oriented item processing steps.\npublic class FlowStepBuilder extends StepBuilderHelper<FlowStepBuilder>; // A step builder for FlowStep instances.\npublic class JobStepBuilder extends StepBuilderHelper<JobStepBuilder>; // A step builder for JobStep instances.\npublic class PartitionStepBuilder extends StepBuilderHelper<PartitionStepBuilder>; // Step builder for PartitionStep instances.\npublic class SimpleStepBuilder<I,O> extends AbstractTaskletStepBuilder<SimpleStepBuilder<I,O>>; // Step builder for simple item processing (chunk oriented) steps.\npublic class StepBuilder extends StepBuilderHelper<StepBuilder>; // Convenient entry point for building all kinds of steps.\npublic class StepBuilderException extends RuntimeException; // Utility exception thrown by builders when they encounter unexpected checked exceptions.\npublic abstract class StepBuilderHelper<B extends StepBuilderHelper<B>> extends Object; // A base class and utility for other step builders providing access to common properties like job repository and listeners.\npublic static class StepBuilderHelper.CommonStepProperties extends Object;\npublic class TaskletStepBuilder extends AbstractTaskletStepBuilder<TaskletStepBuilder>; // Builder for tasklet step based on a custom tasklet (not item oriented).\n", "des": "Step level builders for java based job configuration."}
{"index": 731, "repo": "spring-data-solr-4.3.15", "code": "Package: solr\n\nSub Packages: \npackage solr.core; // Provides the classes necessary for Solr support.\npackage solr.repository; // Solr specific repository implementation.\npackage solr.server; // SolrClient configuration and spring integration.\n\nClasses and Interfaces: \nClass VersionUtil; // Version util uses ClassUtils.isPresent(String, ClassLoader) to determine presence of certain classes that are unique to some libraries, which allows to en-/disable some of the features in eg.\nClass UncategorizedSolrException; // SolrClient threw an exception that could not be mapped.\n", "des": "Root stuff used through out Spring Data for Apache Solr."}
{"index": 2276, "repo": "spring-data-elasticsearch-5.1.2", "code": "Package: erhlc\n\nClasses and Interfaces: \n@Deprecated public abstract class AbstractElasticsearchConfiguration extends ElasticsearchConfigurationSupport;\n@Deprecated public abstract class AbstractReactiveElasticsearchConfiguration extends ElasticsearchConfigurationSupport;\n@Deprecated public class DefaultReactiveClusterOperations extends Object implements ReactiveClusterOperations;\n@Deprecated public class DefaultReactiveElasticsearchClient extends Object implements ReactiveElasticsearchClient, ReactiveElasticsearchClient.Indices, ReactiveElasticsearchClient.Cluster;\n@Deprecated public final class DocumentAdapters extends Object;\n@Deprecated public class ElasticsearchAggregation extends Object implements AggregationContainer<org.elasticsearch.search.aggregations.Aggregation>;\n@Deprecated public class ElasticsearchAggregations extends Object implements AggregationsContainer<org.elasticsearch.search.aggregations.Aggregations>;\n@Deprecated public class ElasticsearchClusterOperations extends Object;\n@Deprecated public class ElasticsearchExceptionTranslator extends Object implements PersistenceExceptionTranslator;\n@Deprecated public class ElasticsearchRestTemplate extends AbstractElasticsearchTemplate;\n@FunctionalInterface public static interface ElasticsearchRestTemplate.ClientCallback<T>; // Callback interface to be used with ElasticsearchRestTemplate.execute(ClientCallback) for operating directly on RestHighLevelClient.\n@Deprecated public class HighlightQueryBuilder extends Object;\n@Deprecated public interface HostProvider<T extends HostProvider<T>>;\npublic static class HostProvider.ClusterInformation extends Object; // Value object accumulating information about an Elasticsearch cluster.\npublic static enum HostProvider.Verification extends Enum<HostProvider.Verification>; // HostProvider.Verification allows to influence the lookup strategy for active hosts.\n@Deprecated public class NamedXContents extends Object;\n@Deprecated public class NativeSearchQuery extends BaseQuery;\n@Deprecated public class NativeSearchQueryBuilder extends BaseQueryBuilder<NativeSearchQuery,NativeSearchQueryBuilder>;\n@Deprecated public interface ReactiveElasticsearchClient;\npublic static interface ReactiveElasticsearchClient.Cluster; // Encapsulation of methods for accessing the Cluster API.\npublic static interface ReactiveElasticsearchClient.Indices; // Encapsulation of methods for accessing the Indices API.\npublic static interface ReactiveElasticsearchClient.ReactiveElasticsearchClientCallback<T>; // Low level callback interface operating upon WebClient to send commands towards elasticsearch.\npublic static interface ReactiveElasticsearchClient.Status; // Cumulative client ElasticsearchHost information.\n@Deprecated public class ReactiveElasticsearchTemplate extends AbstractReactiveElasticsearchTemplate;\n@Deprecated public final class ReactiveRestClients extends Object;\n", "des": "This package contains classes that use the old Elasticsearch 7 libraries to access Elasticsearch either directly by using the RestHighLevelClient or indirectly by using code copied from Elasticsearch libraries (reactive implementation)."}
{"index": 2875, "repo": "spring-integration-core-6.1.2", "code": "Package: router\n\nClasses and Interfaces: \npublic abstract class AbstractMappingMessageRouter extends AbstractMessageRouter implements MappingMessageRouterManagement; // Base class for all Message Routers that support mapping from arbitrary String values to Message Channel names.\n@ManagedResource @IntegrationManagedResource public abstract class AbstractMessageRouter extends AbstractMessageHandler implements MessageRouter; // Base class for all Message Routers.\npublic class ErrorMessageExceptionTypeRouter extends AbstractMappingMessageRouter; // A Message Router that resolves the target MessageChannel for messages whose payload is a Throwable.\npublic class ExpressionEvaluatingRouter extends AbstractMappingMessageRouter; // A Message Router implementation that evaluates the specified SpEL expression.\npublic class HeaderValueRouter extends AbstractMappingMessageRouter; // A Message Router that resolves the MessageChannel from a header value.\npublic interface MessageRouter; // Routers implementing this interface have a default output channel.\npublic class MethodInvokingRouter extends AbstractMappingMessageRouter; // A Message Router that invokes the specified method on the given object.\npublic class PayloadTypeRouter extends AbstractMappingMessageRouter; // A Message Router that resolves the MessageChannel based on the Message's payload type.\npublic class RecipientListRouter extends AbstractMessageRouter implements RecipientListRouterManagement; // <recipient-list-router id=\"simpleRouter\" input-channel=\"routingChannelA\"> <recipient channel=\"channel1\"/> <recipient channel=\"channel2\"/> </recipient-list-router>\npublic static class RecipientListRouter.Recipient extends Object;\n@ManagedResource @IntegrationManagedResource public interface RecipientListRouterManagement; // Exposes adding/removing individual recipients operations for RecipientListRouter.\n", "des": "Provides classes supporting the router pattern."}
{"index": 1052, "repo": "commons-io-2.13.0", "code": "Package: monitor\n\nClasses and Interfaces: \nInterface FileAlterationListener; // Receives events of file system modifications.\nClass FileAlterationListenerAdaptor; // Convenience FileAlterationListener implementation that does nothing.\nClass FileAlterationMonitor; // A runnable that spawns a monitoring thread triggering any registered FileAlterationObserver at a specified interval.\nClass FileAlterationObserver; // FileAlterationObserver represents the state of files below a root directory, checking the file system and notifying listeners of create, change or delete events.\nClass FileEntry; // The state of a file or directory, capturing the following File attributes at a point in time.\n", "des": "Provides a component for monitoring file system events (directory and file create, update and delete events)."}
{"index": 2801, "repo": "spring-security-oauth2-core-6.1.2", "code": "Package: core\n\nSub Packages: \npackage core.endpoint; // Support classes that model the OAuth 2.0 Request and Response messages from the Authorization Endpoint and Token Endpoint.\npackage core.oidc; // Core classes and interfaces providing support for OpenID Connect Core 1.0.\npackage core.user; // Provides a model for an OAuth 2.0 representation of a user Principal.\n\nClasses and Interfaces: \npublic abstract class AbstractOAuth2Token extends Object implements OAuth2Token, Serializable; // Base class for OAuth 2.0 Token implementations.\npublic final class AuthenticationMethod extends Object implements Serializable; // The authentication method used when sending bearer access tokens in resource requests to resource servers.\npublic final class AuthorizationGrantType extends Object implements Serializable; // An authorization grant is a credential representing the resource owner's authorization (to access it's protected resources) to the client and used by the client to obtain an access token.\npublic interface ClaimAccessor; // An \"accessor\" for a set of claims that may be used for assertions.\npublic final class ClientAuthenticationMethod extends Object implements Serializable; // The authentication method used when authenticating the client with the authorization server.\npublic final class DefaultOAuth2AuthenticatedPrincipal extends Object implements OAuth2AuthenticatedPrincipal, Serializable; // A domain object that wraps the attributes of an OAuth 2.0 token.\npublic final class DelegatingOAuth2TokenValidator<T extends OAuth2Token> extends Object implements OAuth2TokenValidator<T>; // A composite validator\npublic class OAuth2AccessToken extends AbstractOAuth2Token; // An implementation of an AbstractOAuth2Token representing an OAuth 2.0 Access Token.\npublic static final class OAuth2AccessToken.TokenType extends Object implements Serializable; // Access Token Types.\npublic interface OAuth2AuthenticatedPrincipal extends org.springframework.security.core.AuthenticatedPrincipal; // An AuthenticatedPrincipal that represents the principal associated with an OAuth 2.0 token.\npublic class OAuth2AuthenticationException extends org.springframework.security.core.AuthenticationException; // This exception is thrown for all OAuth 2.0 related Authentication errors.\npublic class OAuth2AuthorizationException extends RuntimeException; // Base exception for OAuth 2.0 Authorization errors.\npublic class OAuth2DeviceCode extends AbstractOAuth2Token; // An implementation of an AbstractOAuth2Token representing a device code as part of the OAuth 2.0 Device Authorization Grant.\n", "des": "Core classes and interfaces providing support for the OAuth 2.0 Authorization Framework."}
{"index": 1410, "repo": "spring-boot-actuator-3.1.1", "code": "Package: management\n\nClasses and Interfaces: \n@WebEndpoint(id=\"heapdump\") public class HeapDumpWebEndpoint extends Object; // Web @Endpoint to expose heap dumps.\n@FunctionalInterface protected static interface HeapDumpWebEndpoint.HeapDumper; // Strategy interface used to dump the heap to a file.\nprotected static class HeapDumpWebEndpoint.HeapDumperUnavailableException extends RuntimeException; // Exception to be thrown if the HeapDumpWebEndpoint.HeapDumper cannot be created.\nprotected static class HeapDumpWebEndpoint.HotSpotDiagnosticMXBeanHeapDumper extends Object implements HeapDumpWebEndpoint.HeapDumper; // HeapDumpWebEndpoint.HeapDumper that uses com.sun.management.HotSpotDiagnosticMXBean, available on Oracle and OpenJDK, to dump the heap to a file.\n@Endpoint(id=\"threaddump\") public class ThreadDumpEndpoint extends Object; // @Endpoint to expose thread info.\npublic static final class ThreadDumpEndpoint.ThreadDumpDescriptor extends Object implements OperationResponseBody; // Description of a thread dump.\n", "des": "Actuator support for JVM management."}
{"index": 488, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: payloads\n\nClasses and Interfaces: \nInterface PayloadSerializer;\nInterface PayloadSerializerProvider;\nClass AvroPayloadSerializerProvider; // Avro related classes are deprecated in module beam-sdks-java-core and will be eventually removed.\nClass JsonPayloadSerializerProvider;\nClass PayloadSerializers;\n", "des": "Provides abstractions for schema-aware IOs."}
{"index": 1431, "repo": "spring-boot-actuator-3.1.1", "code": "Package: scheduling\n\nClasses and Interfaces: \n@Endpoint(id=\"scheduledtasks\") @ImportRuntimeHints(org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint.ScheduledTasksEndpointRuntimeHints.class) public class ScheduledTasksEndpoint extends Object; // @Endpoint to expose information about an application's scheduled tasks.\npublic static final class ScheduledTasksEndpoint.CronTaskDescriptor extends ScheduledTasksEndpoint.TaskDescriptor; // Description of a CronTask or a TriggerTask with a CronTrigger.\npublic static final class ScheduledTasksEndpoint.CustomTriggerTaskDescriptor extends ScheduledTasksEndpoint.TaskDescriptor; // Description of a TriggerTask with a custom Trigger.\npublic static final class ScheduledTasksEndpoint.FixedDelayTaskDescriptor extends ScheduledTasksEndpoint.IntervalTaskDescriptor; // Description of a FixedDelayTask or a TriggerTask with a fixed-delay PeriodicTrigger.\npublic static final class ScheduledTasksEndpoint.FixedRateTaskDescriptor extends ScheduledTasksEndpoint.IntervalTaskDescriptor; // Description of a FixedRateTask or a TriggerTask with a fixed-rate PeriodicTrigger.\npublic static class ScheduledTasksEndpoint.IntervalTaskDescriptor extends ScheduledTasksEndpoint.TaskDescriptor; // Description of an IntervalTask.\npublic static final class ScheduledTasksEndpoint.RunnableDescriptor extends Object; // Description of a Task's Runnable.\npublic static final class ScheduledTasksEndpoint.ScheduledTasksDescriptor extends Object implements OperationResponseBody; // Description of an application's scheduled Tasks.\npublic abstract static class ScheduledTasksEndpoint.TaskDescriptor extends Object; // Base class for descriptions of a Task.\n", "des": "Actuator scheduling support."}
{"index": 2814, "repo": "spring-integration-ip-6.1.2", "code": "Package: udp\n\nClasses and Interfaces: \npublic class DatagramPacketMessageMapper extends Object implements org.springframework.integration.mapping.InboundMessageMapper<DatagramPacket>, org.springframework.integration.mapping.OutboundMessageMapper<DatagramPacket>, org.springframework.beans.factory.BeanFactoryAware; // Message Mapper for converting to and from UDP DatagramPackets.\npublic class MulticastReceivingChannelAdapter extends UnicastReceivingChannelAdapter; // Channel adapter that joins a multicast group and receives incoming packets and sends them to an output channel.\npublic class MulticastSendingMessageHandler extends UnicastSendingMessageHandler; // A MessageHandler implementation that maps a Message into a UDP datagram packet and sends that to the specified multicast address (224.0.0.0 to 239.255.255.255) and port.\n@FunctionalInterface public interface SocketCustomizer; // Configures a socket.\npublic class UdpServerListeningEvent extends IpIntegrationEvent; // IpIntegrationEvent emitted when a server begins listening.\npublic class UnicastReceivingChannelAdapter extends AbstractInternetProtocolReceivingChannelAdapter; // A channel adapter to receive incoming UDP packets.\npublic class UnicastSendingMessageHandler extends AbstractInternetProtocolSendingMessageHandler implements Runnable; // A MessageHandler implementation that maps a Message into a UDP datagram packet and sends that to the specified host and port.\n", "des": "Base package for UDP support."}
{"index": 1311, "repo": "groovy-all-4.0.13", "code": "Package: impl\n\nClasses and Interfaces: \npublic class ClosureRenderer extends Object implements ListCellRenderer, TableCellRenderer, TreeCellRenderer;\npublic class DefaultAction extends AbstractAction; // A default action implementation\npublic class ListWrapperListModel<E> extends AbstractListModel; // A ListModel implementation that's backed by a live List.\npublic class TableLayout extends JPanel; // Represents a HTML style table layout\npublic class TableLayoutCell extends Object; // Represents a cell in a table layout.\npublic class TableLayoutRow extends Object; // Represents a row in a table layout\n", "des": "Implementation classes for SwingBuilder"}
{"index": 747, "repo": "ignite-indexing-2.15.0", "code": "Package: indexing\n\nClasses and Interfaces: \nClass IndexingQueryEngineConfiguration; // Query engine configuration for indexing-backed query engine.\n", "des": "Contains Ignite-indexing module classes and interfaces."}
{"index": 307, "repo": "pdfbox-3.0.0-beta1", "code": "Package: form\n\nClasses and Interfaces: \nInterface ScriptingHandler;\nClass FieldUtils; // A set of utility methods to help with common AcroForm form and field related functions.\nClass PDAcroForm; // An interactive form, also known as an AcroForm.\nClass PDButton; // A button field represents an interactive control on the screen that the user can manipulate with the mouse.\nClass PDCheckBox; // A check box toggles between two states, on and off.\nClass PDChoice; // A choice field contains several text items, one or more of which shall be selected as the field value.\nClass PDComboBox; // A combo box consisting of a drop-down list.\nClass PDField; // A field in an interactive form.\nClass PDFieldFactory; // A PDField factory.\nClass PDFieldTree; // The field tree.\nClass PDListBox; // A scrollable list box.\nClass PDNonTerminalField; // A non terminal field in an interactive form.\nClass PDPushButton; // A pushbutton is a purely interactive control that responds immediately to user input without retaining a permanent value.\nClass PDRadioButton; // Radio button fields contain a set of related buttons that can each be on or off.\nClass PDSignatureField; // A signature field is a form field that contains a digital signature.\nClass PDTerminalField; // A field in an interactive form.\nClass PDTextField; // A text field is a box or space for text fill-in data typically entered from a keyboard.\nClass PDVariableText; // Base class for fields which use \"Variable Text\".\nClass PDXFAResource; // An XML Forms Architecture (XFA) resource.\n", "des": "The interactive package contains classes for handling Interactive Forms, also known as \"AcroForms\"."}
{"index": 2594, "repo": "spring-rabbit-3.0.6", "code": "Package: support\n\nClasses and Interfaces: \npublic final class ContainerUtils extends Object; // Utility methods for listener containers.\n", "des": "Provides support classes for listeners."}
{"index": 2286, "repo": "jcl-over-slf4j-2.0.7", "code": "Package: impl\n\nClasses and Interfaces: \npublic class NoOpLog extends Object implements Log, Serializable; // Trivial implementation of Log that throws away all messages.\npublic class SimpleLog extends Object implements Log, Serializable; // Simple implementation of Log that sends all enabled log messages, for all defined loggers, to System.err.\npublic class SLF4JLocationAwareLog extends Object implements Log, Serializable; // Implementation of org.apache.commons.logging.Log interface which delegates all processing to a wrapped org.slf4j.Logger instance.\npublic class SLF4JLog extends Object implements Log, Serializable; // Implementation of org.apache.commons.logging.Log interface which delegates all processing to a wrapped org.slf4j.Logger instance.\npublic class SLF4JLogFactory extends LogFactory; // Concrete subclass of LogFactory which always delegates to the org.slf4j.LoggerFactory class.\n", "des": "SLF4J based implementation of commons-logging wrapper APIs."}
{"index": 1032, "repo": "hadoop-aws-3.3.6", "code": "Package: staging\n\nClasses and Interfaces: \nClass DirectoryStagingCommitter; // This commits to a directory.\nClass DirectoryStagingCommitterFactory; // Factory for the Directory committer.\nClass PartitionedStagingCommitter; // Partitioned committer.\nClass PartitionedStagingCommitterFactory; // Factory for the PartitionedStagingCommitter.\nClass Paths; // Path operations for the staging committers.\nClass StagingCommitter; // Committer based on the contributed work of the Netflix multipart committers. The working directory of each task is actually under a temporary path in the local filesystem; jobs write directly into it.\nClass StagingCommitterConstants; // Internal staging committer constants.\nClass StagingCommitterFactory; // Factory for the staging committer.\nEnum ConflictResolution; // Enum of conflict resolution algorithms.\n", "des": "The staging committers."}
{"index": 1640, "repo": "jena-core-4.9.0", "code": "Package: datatypes\n\nSub Packages: \npackage datatypes.xsd; // Provides datatype definitions for the XML Schema datatypes support by Jena.\n\nClasses and Interfaces: \npublic class BaseDatatype extends Object implements RDFDatatype; // Base level implementation of datatype from which real implementations can inherit.\npublic static class BaseDatatype.TypedValue extends Object; // Pair object used to encode both lexical form and datatype for a typed literal with unknown datatype.\npublic class DatatypeFormatException extends JenaException; // Exception thrown when a lexical form does not match the stated datatype.\npublic interface RDFDatatype; // Interface on a datatype representation.\npublic class TypeMapper extends Object; // The TypeMapper provides a global registry of known datatypes.\n", "des": "Provides the core interfaces through which datatypes are described to Jena."}
{"index": 1788, "repo": "spring-integration-file-6.1.2", "code": "Package: gateway\n\nClasses and Interfaces: \npublic abstract class AbstractRemoteFileOutboundGateway<F> extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler; // Base class for Outbound Gateways that perform remote file operations.\npublic static enum AbstractRemoteFileOutboundGateway.Command extends Enum<AbstractRemoteFileOutboundGateway.Command>; // Enumeration of commands supported by the gateways.\npublic static enum AbstractRemoteFileOutboundGateway.Option extends Enum<AbstractRemoteFileOutboundGateway.Option>; // Enumeration of options supported by various commands.\n", "des": "Provides classes supporting remote file gateways."}
{"index": 3517, "repo": "opennlp-tools-2.2.0", "code": "Package: conllu\n\nClasses and Interfaces: \nClass ConlluLemmaSampleStream;\nClass ConlluLemmaSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass ConlluPOSSampleStream;\nClass ConlluPOSSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass ConlluSentence;\nClass ConlluSentenceSampleStream;\nClass ConlluSentenceSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass ConlluStream; // The CoNNL-U Format is specified here.\nClass ConlluTokenSampleStream;\nClass ConlluTokenSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass ConlluWordLine;\nEnum ConlluTagset;\n", "des": "Experimental package related to the CoNNL-U format."}
{"index": 3679, "repo": "solr-core-9.3.0", "code": "Package: request\n\nSub Packages: \npackage request.json; // JSON related classes\npackage request.macro; // Parameter substitution / macro expansion.\n\nClasses and Interfaces: \nInterface SolrQueryRequest; // Container for a request to execute a query.\nInterface SolrRequestHandler; // Implementations of SolrRequestHandler are called to handle query requests.\nClass DelegatingSolrQueryRequest; // A SolrQueryRequest implementation that defers to a delegate in all cases.\nClass DocValuesFacets; // Computes term facets for docvalues field (single or multivalued).\nClass DocValuesStats; // Computes term stats for docvalues field (single or multivalued).\nClass IntervalFacets; // Computes interval facets for docvalues field (single or multivalued).\nClass IntervalFacets.FacetInterval; // Helper class to match and count of documents in specified intervals\nClass LocalSolrQueryRequest;\nClass RegexBytesRefFilter; // An implementation of Predicate which returns true if the BytesRef matches the supplied regular expression.\nClass SimpleFacets; // A class that generates simple Facet information for a request.\nClass SimpleFacets.CountPair<K extends Comparable<? super K>,​V extends Comparable<? super V>>; // A simple key=>val pair whose natural order is such that higher vals come before lower vals.\nClass SimpleFacets.ParsedParams;\nClass SolrQueryRequestBase; // Base implementation of SolrQueryRequest that provides some convenience methods for accessing parameters, and manages an IndexSearcher reference.\nClass SolrRequestInfo; // Information about the Solr request/response held in a ThreadLocal.\nClass SubstringBytesRefFilter; // An implementation of Predicate which returns true if the BytesRef contains a given substring.\n", "des": "APIs and classes for dealing with Solr requests"}
{"index": 1339, "repo": "groovy-all-4.0.13", "code": "Package: typehandling\n\nClasses and Interfaces: \npublic final class BigDecimalMath extends NumberMath; // BigDecimal NumberMath operations\npublic final class BigIntegerMath extends NumberMath; // BigInteger NumberMath operations\npublic class DefaultTypeTransformation extends Object; // Class providing various type conversions, coercions and boxing/unboxing operations.\npublic final class FloatingPointMath extends NumberMath; // FloatingPoint (Double and Float) NumberMath operations\npublic class GroovyCastException extends ClassCastException;\npublic final class IntegerMath extends NumberMath; // Integer NumberMath operations\npublic final class LongMath extends NumberMath; // Long NumberMath operations\npublic abstract class NumberMath extends Object; // Stateless objects used to perform math on the various Number subclasses.\npublic class NumberMathModificationInfo extends Object;\npublic class ShortTypeHandling extends Object; // Class providing various short paths for type conversions.\n", "des": "Classes used to execute special actions based on the type."}
{"index": 397, "repo": "amqp-client-5.18.0", "code": "Package: jsonrpc\n\nClasses and Interfaces: \nInterface JsonRpcMapper; // Abstraction to handle JSON parsing and generation.\nClass DefaultJsonRpcMapper; // use JacksonJsonRpcMapper instead\nClass JacksonJsonRpcMapper; // JsonRpcMapper based on Jackson.\nClass JsonRpcClient; // JSON-RPC is a lightweight RPC mechanism using JSON as a data language for request and reply messages.\nClass JsonRpcMapper.JsonRpcRequest;\nClass JsonRpcMapper.JsonRpcResponse;\nClass JsonRpcServer; // JSON-RPC Server class.\nClass ParameterDescription; // Description of a single JSON-RPC procedure parameter.\nClass ProcedureDescription; // Description of a single JSON-RPC procedure.\nClass ServiceDescription; // Description of a JSON-RPC service.\nClass JsonRpcException; // Thrown when a JSON-RPC service indicates an error occurred during a call.\nClass JsonRpcMappingException;\n", "des": "JSON-RPC client and server classes for supporting JSON-RPC over an AMQP transport."}
{"index": 1104, "repo": "fontbox-3.0.0-beta1", "code": "Package: pfb\n\nClasses and Interfaces: \nClass PfbParser; // Parser for a pfb-file.\n", "des": "Classes that are used to parse pfb files."}
{"index": 2140, "repo": "wicket-core-10.0.0-M1", "code": "Package: string\n\nClasses and Interfaces: \npublic class ComponentRenderer extends Object; // A helper class for rendering components and pages.\npublic class ComponentStrings extends Object;\npublic final class CssUtils extends Object; // Utility methods for CSS.\npublic class JavaScriptStripper extends Object; // Strips comments and whitespace from javascript\npublic class JavaScriptUtils extends Object; // Provide some helpers to write javascript related tags to the response object.\n", "des": "String utilities."}
{"index": 3389, "repo": "commons-imaging-1.0-alpha3", "code": "Package: bmp\n\nClasses and Interfaces: \nClass BmpImageParser;\nClass BmpImagingParameters; // Bmp format parameters.\n", "des": "The BMP image format."}
{"index": 2119, "repo": "spring-retry-2.0.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class Args extends Object; // A root object containing the method arguments to use in expression evaluation.\npublic class DefaultRetryState extends Object implements RetryState;\npublic class RetrySimulation extends Object; // The results of a simulation.\npublic static class RetrySimulation.SleepSequence extends Object;\npublic class RetrySimulator extends Object; // A RetrySimulator is a tool for exercising retry + backoff operations.\npublic final class RetrySynchronizationManager extends Object; // Global variable support for retry clients.\npublic class RetryTemplate extends Object implements RetryOperations; // Template class that simplifies the execution of operations with retry semantics.\npublic class RetryTemplateBuilder extends Object; // Builder that provides a fluent API to configure new instances of RetryTemplate.\n", "des": "Infrastructure implementations of retry support concerns."}
{"index": 692, "repo": "jackson-databind-2.15.2", "code": "Package: module\n\nClasses and Interfaces: \nClass SimpleAbstractTypeResolver; // Simple AbstractTypeResolver implementation, which is based on static mapping from abstract super types into sub types (concrete or abstract), but retaining generic parameterization.\nClass SimpleDeserializers; // Simple implementation Deserializers which allows registration of deserializers based on raw (type erased class).\nClass SimpleKeyDeserializers; // Simple implementation KeyDeserializers which allows registration of deserializers based on raw (type erased class).\nClass SimpleModule; // Vanilla Module implementation that allows registration of serializers and deserializers, bean serializer and deserializer modifiers, registration of subtypes and mix-ins as well as some other commonly needed aspects (addition of custom AbstractTypeResolvers, ValueInstantiators).\nClass SimpleSerializers; // Simple implementation Serializers which allows registration of serializers based on raw (type erased class).\nClass SimpleValueInstantiators;\n", "des": "Package that contains classes and interfaces to help implement custom extension Modules (which are registered using ObjectMapper.registerModule(com.fasterxml.jackson.databind.Module)."}
{"index": 3074, "repo": "spring-ws-core-4.0.5", "code": "Package: addressing\n\nSub Packages: \npackage addressing.core; // Core package for WS-Addressing support.\npackage addressing.messageid; // Contains various strategies for generating WS-Addressing MessageIDs.\npackage addressing.server; // Contains servers-side WS-Addressing support, in the form of EndpointMappings.\npackage addressing.version; // Contains abstractions over various versions of the WS-Addressing specification.\n\nClasses and Interfaces: \npublic class AddressingException extends WebServiceException; // Exception thrown in case on WS-Addressing errors.\n", "des": "Provides WS-Addressing implementation classes."}
{"index": 2546, "repo": "pulsar-common-3.0.0", "code": "Package: url\n\nClasses and Interfaces: \npublic class DataURLStreamHandler extends URLStreamHandler; // Extension of the URLStreamHandler class to handle all stream protocol handlers.\npublic class PulsarURLStreamHandlerFactory extends Object implements URLStreamHandlerFactory; // This class defines a factory for URL stream protocol handlers.\npublic class URL extends Object; // Wrapper around java.net.URL to improve usability.\n", "des": "Classes to work with URLs."}
{"index": 278, "repo": "pdfbox-3.0.0-beta1", "code": "Package: cos\n\nClasses and Interfaces: \nInterface COSUpdateInfo;\nInterface ICOSParser;\nInterface ICOSVisitor; // An interface for visiting a PDF document at the type (COS) level.\nClass COSArray; // An array of PDFBase objects as part of the PDF document.\nClass COSBase; // The base object that all objects in the PDF document will extend.\nClass COSBoolean; // This class represents a boolean value in the PDF document.\nClass COSDictionary; // This class represents a dictionary where name/value pairs reside.\nClass COSDocument; // This is the in-memory representation of the PDF document.\nClass COSDocumentState; // An instance of COSDocumentState collects all known states a COSDocument may have and shall allow their evaluation.\nClass COSFloat; // This class represents a floating point number in a PDF document.\nClass COSIncrement; // A COSIncrement starts at a given COSUpdateInfo to collect updates, that have been made to a COSDocument and therefore should be added to it´s next increment.\nClass COSInputStream; // An InputStream which reads from an encoded COS stream.\nClass COSInteger; // This class represents an integer number in a PDF document.\nClass COSName; // A PDF Name object.\nClass COSNull; // This class represents a null PDF object.\nClass COSNumber; // This class represents an abstract number in a PDF document.\nClass COSObject; // This class represents a PDF object.\nClass COSObjectKey; // Object representing the physical reference to an indirect pdf object.\nClass COSOutputStream; // An OutputStream which writes to an encoded COS stream.\nClass COSStream; // This class represents a stream object in a PDF document.\nClass COSString; // A string object, which may be a text string, a PDFDocEncoded string, ASCII string, or byte string.\nClass COSUpdateState; // A COSUpdateState instance manages update states for a COSUpdateInfo.\n", "des": "These are the low level objects that make up a PDF document."}
{"index": 3405, "repo": "commons-imaging-1.0-alpha3", "code": "Package: tiff\n\nSub Packages: \npackage tiff.constants; // TIFF constants.\npackage tiff.datareaders; // TIFF data readers.\npackage tiff.fieldtypes; // TIFF field types.\npackage tiff.photometricinterpreters; // Classes for TIFF photometric interpretation (specifies the intended interpretation of the image pixel data).\npackage tiff.taginfos; // Classes for the TIFF tags.\npackage tiff.write; // TIFF writers.\n\nClasses and Interfaces: \nInterface TiffReader.Listener;\nClass JpegImageData;\nClass TiffContents;\nClass TiffDirectory; // Provides methods and elements for accessing an Image File Directory (IFD) from a TIFF file.\nClass TiffDirectory.ImageDataElement;\nClass TiffElement;\nClass TiffElement.DataElement;\nClass TiffElement.Stub;\nClass TiffField; // A TIFF field in a TIFF directory.\nClass TiffHeader;\nClass TiffImageData;\nClass TiffImageData.ByteSourceData;\nClass TiffImageData.Data;\nClass TiffImageData.Strips;\nClass TiffImageData.Tiles;\nClass TiffImageMetadata;\nClass TiffImageMetadata.Directory;\nClass TiffImageMetadata.GPSInfo;\nClass TiffImageMetadata.TiffMetadataItem;\nClass TiffImageParser;\nClass TiffImagingParameters; // Tiff format parameters.\nClass TiffRasterData; // Provides a simple container for numeric-raster data.\nClass TiffRasterDataFloat; // Provides a simple container for floating-point data.\nClass TiffRasterDataInt; // Provides a simple container for floating-point data.\nClass TiffRasterStatistics; // Collects and stores a set of simple statistics from the input raster.\nClass TiffReader;\nEnum TiffRasterDataType; // Provides an enumeration indicating the type of data for an instance of a TiffRasterData class.\n", "des": "Provides classes and methods for reading and writing Tagged Image File Format (TIFF) files."}
{"index": 3849, "repo": "lucene-core-9.7.0", "code": "Package: comparators\n\nClasses and Interfaces: \nClass DocComparator; // Comparator that sorts by asc _doc\nClass DoubleComparator; // Comparator based on Double.compare(double, double) for numHits.\nClass FloatComparator; // Comparator based on Float.compare(float, float) for numHits.\nClass IntComparator; // Comparator based on Integer.compare(int, int) for numHits.\nClass LongComparator; // Comparator based on Long.compare(long, long) for numHits.\nClass MinDocIterator; // Docs iterator that starts iterating from a configurable minimum document\nClass NumericComparator<T extends Number>; // Abstract numeric comparator for comparing numeric values.\nClass TermOrdValComparator; // Sorts by field's natural Term sort order, using ordinals.\n", "des": "Comparators, used to compare hits so as to determine their sort order when collecting the top results with TopFieldCollector."}
{"index": 3861, "repo": "lucene-core-9.7.0", "code": "Package: packed\n\nClasses and Interfaces: \nInterface PackedInts.Decoder; // A decoder for packed integers.\nInterface PackedInts.Encoder; // An encoder for packed integers.\nInterface PackedInts.ReaderIterator; // Run-once iterator interface, to decode previously saved PackedInts.\nClass AbstractPagedMutable<T extends AbstractPagedMutable<T>>; // Base implementation for PagedMutable and PagedGrowableWriter.\nClass BlockPackedReaderIterator; // Reader for sequences of longs written with BlockPackedWriter.\nClass BlockPackedWriter; // A writer for large sequences of longs.\nClass DirectMonotonicReader; // Retrieves an instance previously written by DirectMonotonicWriter.\nClass DirectMonotonicReader.Meta; // In-memory metadata that needs to be kept around for DirectMonotonicReader to read data from disk.\nClass DirectMonotonicWriter; // Write monotonically-increasing sequences of integers.\nClass DirectReader; // Retrieves an instance previously written by DirectWriter\nClass DirectWriter; // Class for writing packed integers to be directly read from Directory.\nClass GrowableWriter; // Implements PackedInts.Mutable, but grows the bit count of the underlying packed ints on-demand.\nClass MonotonicBlockPackedReader; // Provides random access to a stream written with MonotonicBlockPackedWriter.\nClass MonotonicBlockPackedWriter; // A writer for large monotonically increasing sequences of positive longs.\nClass PackedDataInput; // A DataInput wrapper to read unaligned, variable-length packed integers.\nClass PackedDataOutput; // A DataOutput wrapper to write unaligned, variable-length packed integers.\nClass PackedInts; // Simplistic compression for array of unsigned long values.\nClass PackedInts.FormatAndBits; // Simple class that holds a format and a number of bits per value.\nClass PackedInts.Mutable; // A packed integer array that can be modified.\nClass PackedInts.NullReader; // A PackedInts.Reader which has all its values equal to 0 (bitsPerValue = 0).\nClass PackedInts.Reader; // A read-only random access array of positive integers.\nClass PackedInts.Writer; // A write-once Writer.\n", "des": "Packed integer arrays and streams."}
{"index": 994, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: creator\n\nClasses and Interfaces: \nInterface WebServiceMessageCreator; // Defines the general contract for creating messages used in test scenarios.\nClass AbstractMessageCreator; // Abstract base class for the WebServiceMessageCreator interface.\nClass PayloadMessageCreator; // Implementation of WebServiceMessageCreator that creates a request based on a Source.\nClass SoapEnvelopeMessageCreator; // Implementation of WebServiceMessageCreator that creates a request based on a SOAP envelope Source.\n", "des": "Provides the generic WebServiceMessageCreator interface, and implementations."}
{"index": 2040, "repo": "spring-messaging-6.0.11", "code": "Package: config\n\nClasses and Interfaces: \npublic abstract class AbstractBrokerRegistration extends Object; // Base class for message broker registration classes.\npublic abstract class AbstractMessageBrokerConfiguration extends Object implements org.springframework.context.ApplicationContextAware; // Provides essential configuration for handling messages with simple messaging protocols such as STOMP.\npublic class ChannelRegistration extends Object; // A registration class for customizing the configuration for a MessageChannel.\npublic class MessageBrokerRegistry extends Object; // A registry for configuring message broker options.\npublic class SimpleBrokerRegistration extends AbstractBrokerRegistration; // Registration class for configuring a SimpleBrokerMessageHandler.\npublic class StompBrokerRelayRegistration extends AbstractBrokerRegistration; // Registration class for configuring a StompBrokerRelayMessageHandler.\npublic class TaskExecutorRegistration extends Object; // A registration class for customizing the properties of ThreadPoolTaskExecutor.\n", "des": "Configuration support for WebSocket messaging using higher level messaging protocols."}
{"index": 3281, "repo": "opencms-core-15.0", "code": "Package: decorator\n\nClasses and Interfaces: \nInterface I_CmsDecoratorConfiguration; // Interface for a CmsDecoratorConfiguration.\nClass CmsDecorationBundle; // CmsDecorationBundle, contains a map of merged CmsDEcorationMaps.\nClass CmsDecorationDefintion; // This class defines text decoration to be made by the postprocessor.\nClass CmsDecorationMap; // The CmsDecorationMap is the object representation of a single decoartion file.\nClass CmsDecorationObject; // The CmsDecorationObject defines a single text decoration.\nClass CmsDecoratorConfiguration; // The CmsDecoratorConfiguration initalizes and stores the text decorations.\nClass CmsHtmlDecorator; // The CmsHtmlDecorator is the main object for processing the text decorations.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "HTML postprocessor, used to tag single words or phrases in the HTML output."}
{"index": 3383, "repo": "commons-imaging-1.0-alpha3", "code": "Package: imaging\n\nSub Packages: \npackage imaging.color; // Color spaces and conversions between them.\npackage imaging.common; // Provides utility classes that are employed across multiple image formats and sub-packages.\npackage imaging.icc; // ICC color profile.\npackage imaging.internal; // Internal utility classes.\npackage imaging.palette; // Color quantization and palette manipulation tools.\n\nClasses and Interfaces: \nInterface ImageFormat; // Simple image format interface.\nClass ColorTools; // A selection of tools for evaluating and manipulating color spaces, color values, etc.\nClass FormatCompliance; // Provides information about the compliance of a specified data source (byte array, file, etc.) to an image format.\nClass ImageDump; // Used to store metadata and descriptive information extracted from image files.\nClass ImageInfo; // ImageInfo represents a collection of basic properties of an image, such as width, height, format, bit depth, etc.\nClass ImageParser<T extends ImagingParameters>; // Provides the abstract base class for all image reading and writing utilities.\nClass Imaging; // The primary application programming interface (API) to the Imaging library.\nClass ImagingConstants; // Defines constants that may be used in passing options to ImageParser read/write implementations, the utility routines implemented in the Imaging class, and throughout the Apache Commons Imaging package.\nClass ImagingParameters; // Imaging parameters.\nClass PixelDensity; // Used to specify pixel density and physical dimensions when reading or storing image information.\nEnum ImageFormats; // Enum of known image formats.\nEnum ImageInfo.ColorType;\nEnum ImageInfo.CompressionAlgorithm;\nClass ImageReadException; // A custom exception thrown when an ImageParser or other utility encounters a format-violation, non-supported element, or other condition that renders image data unaccessible.\nClass ImageWriteException; // A custom exception thrown when an ImageParser or other utility encounters a format-violation, non-supported element, or other condition that renders image data unwritable.\nClass ImagingException; // The base class for implementing custom exceptions in the Apache Commons Imaging package.\n", "des": "The main package for Apache Commons Imaging."}
{"index": 2183, "repo": "spring-security-web-6.1.2", "code": "Package: rememberme\n\nClasses and Interfaces: \npublic abstract class AbstractRememberMeServices extends Object implements RememberMeServices, org.springframework.beans.factory.InitializingBean, LogoutHandler, org.springframework.context.MessageSourceAware; // Base class for RememberMeServices implementations.\npublic class CookieTheftException extends RememberMeAuthenticationException;\npublic class InMemoryTokenRepositoryImpl extends Object implements PersistentTokenRepository; // Simple PersistentTokenRepository implementation backed by a Map.\npublic class InvalidCookieException extends RememberMeAuthenticationException; // Exception thrown by a RememberMeServices implementation to indicate that a submitted cookie is of an invalid format or has expired.\npublic class JdbcTokenRepositoryImpl extends org.springframework.jdbc.core.support.JdbcDaoSupport implements PersistentTokenRepository; // JDBC based persistent login token repository implementation.\npublic class PersistentRememberMeToken extends Object;\npublic class PersistentTokenBasedRememberMeServices extends AbstractRememberMeServices; // RememberMeServices implementation based on Barry Jaspan's Improved Persistent Login Cookie Best Practice.\npublic interface PersistentTokenRepository; // The abstraction used by PersistentTokenBasedRememberMeServices to store the persistent login tokens for a user.\npublic class RememberMeAuthenticationException extends org.springframework.security.core.AuthenticationException; // This exception is thrown when an Authentication exception occurs while using the remember-me authentication.\npublic class RememberMeAuthenticationFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.ApplicationEventPublisherAware; // Detects if there is no Authentication object in the SecurityContext, and populates the context with a remember-me authentication token if a RememberMeServices implementation so requests.\npublic class TokenBasedRememberMeServices extends AbstractRememberMeServices; // Identifies previously remembered users by a Base-64 encoded cookie.\npublic static enum TokenBasedRememberMeServices.RememberMeTokenAlgorithm extends Enum<TokenBasedRememberMeServices.RememberMeTokenAlgorithm>;\n", "des": "Support for remembering a user between different web sessions."}
{"index": 328, "repo": "kafka-clients-3.5.0", "code": "Package: resource\n\nClasses and Interfaces: \nClass Resource; // Represents a cluster resource with a tuple of (type, name).\nClass ResourcePattern; // Represents a pattern that is used by ACLs to match zero or more Resources.\nClass ResourcePatternFilter; // Represents a filter that can match ResourcePattern.\nEnum PatternType; // Resource pattern type.\nEnum ResourceType; // Represents a type of resource which an ACL can be applied to.\n", "des": "Provides client handles representing logical resources in a Kafka cluster."}
{"index": 2177, "repo": "spring-security-web-6.1.2", "code": "Package: authentication\n\nSub Packages: \npackage authentication.logout; // Logout functionality based around a filter which handles a specific logout URL.\npackage authentication.preauth; // Support for \"pre-authenticated\" scenarios, where Spring Security assumes the incoming request has already been authenticated by some externally configured system.\npackage authentication.rememberme; // Support for remembering a user between different web sessions.\npackage authentication.session; // Strategy interface and implementations for handling session-related behaviour for a newly authenticated user.\npackage authentication.switchuser; // Provides HTTP-based \"switch user\" (su) capabilities.\npackage authentication.ui; // Authentication user-interface rendering code.\npackage authentication.www; // WWW-Authenticate based authentication mechanism implementations: Basic and Digest authentication.\n\nClasses and Interfaces: \npublic abstract class AbstractAuthenticationProcessingFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.MessageSourceAware; // Abstract processor of browser-based HTTP-based authentication requests.\npublic abstract class AbstractAuthenticationTargetUrlRequestHandler extends Object; // Base class containing the logic used by strategies which handle redirection to a URL and are passed an Authentication object as part of the contract.\npublic class AnonymousAuthenticationFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.beans.factory.InitializingBean; // Detects if there is no Authentication object in the SecurityContextHolder, and populates it with one if needed.\npublic interface AuthenticationConverter; // A strategy used for converting from a HttpServletRequest to an Authentication of particular type.\npublic class AuthenticationEntryPointFailureHandler extends Object implements AuthenticationFailureHandler; // Adapts a AuthenticationEntryPoint into a AuthenticationFailureHandler\npublic interface AuthenticationFailureHandler; // Strategy used to handle a failed authentication attempt.\npublic class AuthenticationFilter extends org.springframework.web.filter.OncePerRequestFilter; // A Filter that performs authentication of a particular request.\npublic interface AuthenticationSuccessHandler; // Strategy used to handle a successful user authentication.\npublic class DelegatingAuthenticationEntryPoint extends Object implements AuthenticationEntryPoint, org.springframework.beans.factory.InitializingBean; // An AuthenticationEntryPoint which selects a concrete AuthenticationEntryPoint based on a RequestMatcher evaluation.\n", "des": "Authentication processing mechanisms, which respond to the submission of authentication credentials using various protocols (eg BASIC, CAS, form login etc)."}
{"index": 408, "repo": "spring-social-core-1.1.6.RELEASE", "code": "Package: jdbc\n\nClasses and Interfaces: \nClass JdbcUsersConnectionRepository; // UsersConnectionRepository that uses the JDBC API to persist connection data to a relational database.\n", "des": "JDBC-based ConnectionRepository implementation."}
{"index": 581, "repo": "commons-collections-3.2.2", "code": "Package: iterators\n\nClasses and Interfaces: \nClass AbstractIteratorDecorator; // Provides basic behaviour for decorating an iterator with extra functionality.\nClass AbstractListIteratorDecorator; // Provides basic behaviour for decorating a list iterator with extra functionality.\nClass AbstractMapIteratorDecorator; // Provides basic behaviour for decorating a map iterator with extra functionality.\nClass AbstractOrderedMapIteratorDecorator; // Provides basic behaviour for decorating an ordered map iterator with extra functionality.\nClass ArrayIterator; // Implements an Iterator over any array.\nClass ArrayListIterator; // Implements a ListIterator over an array.\nClass CollatingIterator; // Provides an ordered iteration over the elements contained in a collection of ordered Iterators.\nClass EmptyIterator; // Provides an implementation of an empty iterator.\nClass EmptyListIterator; // Provides an implementation of an empty list iterator.\nClass EmptyMapIterator; // Provides an implementation of an empty map iterator.\nClass EmptyOrderedIterator; // Provides an implementation of an empty ordered iterator.\nClass EmptyOrderedMapIterator; // Provides an implementation of an empty ordered map iterator.\nClass EntrySetMapIterator; // Implements a MapIterator using a Map entrySet.\nClass EnumerationIterator; // Adapter to make Enumeration instances appear to be Iterator instances.\nClass FilterIterator; // Decorates another Iterator using a predicate to filter elements.\nClass FilterListIterator; // Decorates another ListIterator using a predicate to filter elements.\nClass IteratorChain; // An IteratorChain is an Iterator that wraps a number of Iterators.\nClass IteratorEnumeration; // Adapter to make an Iterator instance appear to be an Enumeration instance.\nClass ListIteratorWrapper; // Converts an iterator into a list iterator by caching the returned entries.\nClass LoopingIterator; // An Iterator that restarts when it reaches the end.\nClass LoopingListIterator; // A ListIterator that restarts when it reaches the end or when it reaches the beginning.\nClass ObjectArrayIterator; // An Iterator over an array of objects.\nClass ObjectArrayListIterator; // Implements a ListIterator over an array of objects.\nClass ObjectGraphIterator; // An Iterator that can traverse multiple iterators down an object graph.\nClass ProxyIterator; // Use AbstractIteratorDecorator.\nClass ProxyListIterator; // Use AbstractListIteratorDecorator.\nClass ReverseListIterator; // Iterates backwards through a List, starting with the last element and continuing to the first.\n", "des": "This package contains implementations of the Iterator interface."}
{"index": 258, "repo": "nutch-2.4", "code": "Package: opic\n\nClasses and Interfaces: \nClass OPICScoringFilter; // This plugin implements a variant of an Online Page Importance Computation (OPIC) score, described in this paper: Abiteboul, Serge and Preda, Mihai and Cobena, Gregory (2003), Adaptive On-Line Page Importance Computation .\n", "des": "Scoring filter implementing a variant of the Online Page Importance Computation (OPIC) algorithm."}
{"index": 3619, "repo": "solr-test-framework-9.3.0", "code": "Package: core\n\nClasses and Interfaces: \nClass AbstractBadConfigTestBase;\nClass MockDirectoryFactory; // Opens a directory with LuceneTestCase.newDirectory()\nClass MockFSDirectoryFactory; // Opens a directory with LuceneTestCase.newFSDirectory(Path)\nClass MockQuerySenderListenerReqHandler;\nClass TrackingBackupRepository;\n", "des": "Factories for Mock classes that can be used in test configurations"}
{"index": 1058, "repo": "avro-1.11.2", "code": "Package: data\n\nClasses and Interfaces: \nInterface ErrorBuilder<T>; // Interface for error builders\nInterface RecordBuilder<T>; // Interface for record builders\nClass Json; // Utilities for reading and writing arbitrary Json data in Avro format.\nClass Json.ObjectReader; // DatumReader for arbitrary Json data using the object model described in JsonProperties.\nClass Json.ObjectWriter; // DatumWriter for arbitrary Json data using the object model described in JsonProperties.\nClass RecordBuilderBase<T extends IndexedRecord>; // Abstract base class for RecordBuilder implementations.\nClass TimeConversions;\nClass TimeConversions.DateConversion;\nClass TimeConversions.LocalTimestampMicrosConversion;\nClass TimeConversions.LocalTimestampMillisConversion;\nClass TimeConversions.TimeMicrosConversion;\nClass TimeConversions.TimeMillisConversion;\nClass TimeConversions.TimestampMicrosConversion;\nClass TimeConversions.TimestampMillisConversion;\n", "des": "Interfaces and base classes shared by generic, specific and reflect."}
{"index": 867, "repo": "calcite-core-1.34.0", "code": "Package: validate\n\nSub Packages: \npackage validate.implicit; // SQL Implicit Type Cast\n\nClasses and Interfaces: \nInterface AggregatingScope; // An extension to the SqlValidatorScope interface which indicates that the scope is aggregating.\nInterface SqlConformance; // Enumeration of valid SQL compatibility modes.\nInterface SqlMoniker; // An interface of an object identifier that represents a SqlIdentifier.\nInterface SqlNameMatcher; // Checks whether two names are the same according to a case-sensitivity policy.\nInterface SqlValidator; // Validates the parse tree of a SQL statement, and provides semantic information about the parse tree.\nInterface SqlValidator.Config; // Interface to define the configuration for a SqlValidator.\nInterface SqlValidatorCatalogReader; // Supplies catalog information for SqlValidator.\nInterface SqlValidatorNamespace; // A namespace describes the relation returned by a section of a SQL query.\nInterface SqlValidatorScope; // Name-resolution scope.\nInterface SqlValidatorScope.Resolved; // Callback from SqlValidatorScope.resolve(java.util.List<java.lang.String>, org.apache.calcite.sql.validate.SqlNameMatcher, boolean, org.apache.calcite.sql.validate.SqlValidatorScope.Resolved).\nInterface SqlValidatorTable; // Supplies a SqlValidator with the metadata for a table.\nInterface SqlValidatorUtil.Suggester; // Suggests candidates for unique names, given the number of attempts so far and the number of expressions in the project list.\nInterface SqlValidatorWithHints; // Extends SqlValidator to allow discovery of useful data such as fully qualified names of SQL objects, alternative valid SQL objects that can be used in the SQL statement (dubbed as hints).\nClass AggregatingSelectScope; // Scope for resolving identifiers within a SELECT statement that has a GROUP BY clause.\nClass AggregatingSelectScope.Resolved; // Information about an aggregating scope that can only be determined after validation has occurred.\nClass AliasNamespace; // Namespace for an AS t(c1, c2, ...) clause.\nClass CollectNamespace; // Namespace for COLLECT and TABLE constructs.\nClass DelegatingNamespace; // An implementation of SqlValidatorNamespace that delegates all methods to an underlying object.\nClass DelegatingScope; // A scope which delegates all requests to its parent scope.\n", "des": "SQL validation."}
{"index": 2709, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: adapter\n\nClasses and Interfaces: \npublic abstract class AbstractMethodInvokingDelegator<T> extends Object implements org.springframework.beans.factory.InitializingBean; // Superclass for delegating classes which dynamically call a custom method of injected object.\npublic static class AbstractMethodInvokingDelegator.InvocationTargetThrowableWrapper extends RuntimeException; // Used to wrap a Throwable (not an Exception) thrown by a reflectively-invoked delegate.\npublic class DynamicMethodInvocationException extends RuntimeException; // Indicates an error has been encountered while trying to dynamically invoke a method e.g.\npublic class HippyMethodInvoker extends org.springframework.util.MethodInvoker; // A MethodInvoker that is a bit relaxed about its arguments.\npublic class ItemProcessorAdapter<I,O> extends AbstractMethodInvokingDelegator<O> implements ItemProcessor<I,O>; // Invokes a custom method on a delegate plain old Java object which itself processes an item.\npublic class ItemReaderAdapter<T> extends AbstractMethodInvokingDelegator<T> implements ItemReader<T>; // Invokes a custom method on a delegate plain old Java object which itself provides an item.\npublic class ItemWriterAdapter<T> extends AbstractMethodInvokingDelegator<T> implements ItemWriter<T>; // Delegates item processing to a custom method - passes the item as an argument for the delegate method.\npublic class PropertyExtractingDelegatingItemWriter<T> extends AbstractMethodInvokingDelegator<T> implements ItemWriter<T>; // Delegates processing to a custom method - extracts property values from item object and uses them as arguments for the delegate method.\n", "des": "Adapters for Plain Old Java Objects."}
{"index": 2903, "repo": "spring-aspects-6.0.11", "code": "Package: aspectj\n\nClasses and Interfaces: \n@Configuration(proxyBeanMethods=false) @Role(2) public class AspectJCachingConfiguration extends org.springframework.cache.annotation.AbstractCachingConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based annotation-driven cache management.\n@Configuration(proxyBeanMethods=false) @Role(2) public class AspectJJCacheConfiguration extends org.springframework.cache.jcache.config.AbstractJCacheConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based annotation-driven cache management for standard JSR-107 annotations.\n", "des": "AspectJ-based caching support."}
{"index": 2019, "repo": "spring-boot-devtools-3.1.1", "code": "Package: system\n\nClasses and Interfaces: \npublic final class DevToolsEnablementDeducer extends Object; // Utility to deduce if DevTools should be enabled in the current context.\n", "des": "Devtools system support classes."}
{"index": 1860, "repo": "spring-test-6.0.11", "code": "Package: client\n\nClasses and Interfaces: \npublic class MockMvcHttpConnector extends Object implements org.springframework.http.client.reactive.ClientHttpConnector; // Connector that handles requests by invoking a MockMvc rather than making actual requests over HTTP.\npublic interface MockMvcWebTestClient; // The main class for testing Spring MVC applications via WebTestClient with MockMvc for server request handling.\npublic static interface MockMvcWebTestClient.ControllerSpec extends MockMvcWebTestClient.MockMvcServerSpec<MockMvcWebTestClient.ControllerSpec>; // Specification for configuring MockMvc to test one or more controllers directly, and a simple facade around StandaloneMockMvcBuilder.\npublic static interface MockMvcWebTestClient.MockMvcServerSpec<B extends MockMvcWebTestClient.MockMvcServerSpec<B>>; // Base specification for configuring MockMvc, and a simple facade around ConfigurableMockMvcBuilder.\n", "des": "Support for testing Spring MVC applications via WebTestClient with MockMvc for server request handling."}
{"index": 369, "repo": "commons-geometry-euclidean-1.0", "code": "Package: twod\n\nSub Packages: \npackage twod.path; // This package provides classes for working with connected sequences of line segments and other line subsets.\npackage twod.rotation; // This package provides components related to rotations in 2 dimensional Euclidean space.\npackage twod.shape; // This package provides utilities for constructing basic 2D shapes.\n\nClasses and Interfaces: \nInterface BoundarySource2D; // Extension of the BoundarySource interface for Euclidean 2D space.\nInterface Linecastable2D; // Interface for objects that support linecast operations in Euclidean 2D space.\nClass AffineTransformMatrix2D; // Class using a matrix to represent affine transformations in 2 dimensional Euclidean space.\nClass BoundaryList2D; // BoundarySource2D implementation that uses boundaries stored in a list.\nClass Bounds2D; // Class containing minimum and maximum points defining a 2D axis-aligned bounding box.\nClass Bounds2D.Builder; // Class used to construct Bounds2D instances.\nClass ConvexArea; // Class representing a finite or infinite convex area in Euclidean 2D space.\nClass EmbeddedTreeLineSubset; // Class representing an arbitrary subset of a line using a RegionBSPTree1D.\nClass Line; // This class represents an oriented line in the 2D plane.\nClass Line.SubspaceTransform; // Class containing a transformed line instance along with a subspace (1D) transform.\nClass LinecastPoint2D; // Class representing intersections resulting from linecast operations in Euclidean 2D space.\nClass LineConvexSubset; // Class representing a convex subset of a line in 2D Euclidean space.\nClass Lines; // Class containing factory methods for constructing Line and LineSubset instances.\nClass LineSubset; // Class representing a subset of points on a line in 2D Euclidean space.\nClass PolarCoordinates; // Class representing polar coordinates in 2 dimensional Euclidean space.\nClass Ray; // Class representing a ray in 2D Euclidean space.\nClass RegionBSPTree2D; // Binary space partitioning (BSP) tree representing a region in two dimensional Euclidean space.\nClass RegionBSPTree2D.PartitionedRegionBuilder2D; // Class used to build regions in Euclidean 2D space by inserting boundaries into a BSP tree containing \"partitions\", i.e.\n", "des": "This package provides basic 2D geometry components."}
{"index": 421, "repo": "mahout-mr-0.13.0", "code": "Package: inmem\n\nClasses and Interfaces: \nClass InMemBuilder;\nClass InMemInputFormat;\nClass InMemInputFormat.InMemInputSplit; // Custom InputSplit that indicates how many trees are built by each mapper\nClass InMemInputFormat.InMemRecordReader;\nClass InMemMapper;\n", "des": "In-memory mapreduce implementation of Random Decision Forests"}
{"index": 2098, "repo": "spring-webflux-6.0.11", "code": "Package: handler\n\nClasses and Interfaces: \npublic abstract class AbstractHandlerMapping extends org.springframework.context.support.ApplicationObjectSupport implements HandlerMapping, org.springframework.core.Ordered, org.springframework.beans.factory.BeanNameAware; // Abstract base class for HandlerMapping implementations.\npublic abstract class AbstractUrlHandlerMapping extends AbstractHandlerMapping; // Abstract base class for URL-mapped HandlerMapping implementations.\npublic class SimpleUrlHandlerMapping extends AbstractUrlHandlerMapping; // Implementation of the HandlerMapping interface to map from URLs to request handler beans.\npublic class WebFluxResponseStatusExceptionHandler extends org.springframework.web.server.handler.ResponseStatusExceptionHandler; // Common WebFlux exception handler that detects instances of ResponseStatusException (inherited from the base class) as well as exceptions annotated with @ResponseStatus by determining the HTTP status for them and updating the status of the response accordingly.\n", "des": "Provides HandlerMapping implementations including abstract base classes."}
{"index": 3239, "repo": "opencms-core-15.0", "code": "Package: shared\n\nSub Packages: \npackage shared.rpc; // Contains the container page editor service interfaces.\n\nClasses and Interfaces: \nClass CmsCntPageData; // Convenience class to provide server-side information to the client.\nClass CmsContainer; // Container bean.\nClass CmsContainerElement; // Bean holding basic container element information.\nClass CmsContainerElementData; // Bean holding all element information including it's formatted contents.\nClass CmsContainerPageGalleryData; // Gallery data loaded initially for the 'Add' menu in the page editor.\nClass CmsContainerPageRpcContext; // Bean containing the 'context' of the edited container page for use in RPC calls.\nClass CmsCreateElementData; // Bean containing the needed data when creating a new resource.\nClass CmsDialogOptions; // Option dialog data.\nClass CmsDialogOptions.Option; // Describes a dialog option.\nClass CmsDialogOptionsAndInfo; // Holds both a bean containing edit handler dialog options and a resource info bean for a selected resource.\nClass CmsElementLockInfo; // Contains lock information for a container page element.\nClass CmsElementSettingsConfig; // Represents the setting configuration for a container element.\nClass CmsElementViewInfo; // Element view info.\nClass CmsFormatterConfig; // Formatter configuration data.\nClass CmsFormatterConfigCollection; // Bean which holds a list of formatter configurations (client-side) which can be retrieved by key or id.\nClass CmsGroupContainer; // Group container bean.\nClass CmsGroupContainerSaveResult; // Bean which holds the results of saving a group container.\nClass CmsInheritanceContainer; // The inheritance container data.\nClass CmsInheritanceInfo; // A class whose instances are added to container element beans to provide information about container inheritance.\nClass CmsLocaleLinkBean; // Bean representing a link to a different locale variant.\nClass CmsRemovedElementStatus; // A bean used to store information about a container page element which was just removed.\nEnum CmsCntPageData.ElementDeleteMode; // The element delte modes.\nEnum CmsCntPageData.ElementReuseMode; // Enum representing the different ways dropping elements on a container page can be handled.\nEnum CmsContainerElement.ModelGroupState; // The model group states.\n", "des": "Contains the shared container page editor classes."}
{"index": 3467, "repo": "hibernate-core-5.6.15.Final", "code": "Package: converter\n\nClasses and Interfaces: \nClass AttributeConverterMutabilityPlanImpl<T>; // The standard approach for defining a MutabilityPlan for converted (AttributeConverter) values is to always assume that they are immutable to make sure that dirty checking, deep copying and second-level caching all work properly no matter what.\nClass AttributeConverterSqlTypeDescriptorAdapter; // Adapter for incorporating JPA AttributeConverter handling into the SqlTypeDescriptor contract.\nClass AttributeConverterTypeAdapter<T>; // Adapts the Hibernate Type contract to incorporate JPA AttributeConverter calls.\n", "des": "Support for handling JPA AttributeConverter instances as part of the Hibernate Type system."}
{"index": 3637, "repo": "solr-core-9.3.0", "code": "Package: embedded\n\nClasses and Interfaces: \nClass EmbeddedSolrServer; // SolrClient that connects directly to a CoreContainer.\nEnum EmbeddedSolrServer.RequestWriterSupplier;\n", "des": "SolrJ client implementations for embedded solr access."}
{"index": 3284, "repo": "opencms-core-15.0", "code": "Package: parser\n\nSub Packages: \npackage parser.simplesearch; // Helpers to convert the list configuration XML content into a suitable bean, used by the CmsSimpleSearchConfigurationParser and the List manager app.\n\nClasses and Interfaces: \nInterface I_CmsSearchConfigurationParser; // The interface that must be implemented by search (form) configuration parsers.\nClass CmsJSONSearchConfigurationParser; // Search configuration parser reading JSON.\nClass CmsPlainQuerySearchConfigurationParser; // Search configuration parser reading a configuration containing a plain Solr query.\nClass CmsSimpleSearchConfigurationParser; // Search configuration parser using a list configuration file as the base configuration with additional JSON.\nClass CmsXMLSearchConfigurationParser; // Search configuration parser reading XML.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsSimpleSearchConfigurationParser.SortOption; // Sort options that are available by default.\n", "des": "API classes for the configuration parsers of the search form support provided for server-side Solr search."}
{"index": 1067, "repo": "accumulo-client-mapreduce-2.0.0-alpha-1", "code": "Package: impl\n\nClasses and Interfaces: \nClass ConfiguratorBase;\nClass DistributedCacheHelper;\nClass FileOutputConfigurator;\nClass InputConfigurator;\nClass MapReduceClientOnDefaultTable;\nClass MapReduceClientOnRequiredTable;\nClass MapReduceClientOpts; // Adds some MR awareness to the ClientOpts\nClass OutputConfigurator;\nEnum ConfiguratorBase.ClientOpts;\nEnum ConfiguratorBase.ConnectorInfo; // Specifies that connection info was configured\nEnum ConfiguratorBase.GeneralOpts; // Configuration keys for general configuration options.\nEnum FileOutputConfigurator.Opts; // Configuration keys for AccumuloConfiguration.\nEnum InputConfigurator.Features; // Configuration keys for various features.\nEnum InputConfigurator.ScanOpts; // Configuration keys for Scanner.\nEnum OutputConfigurator.Features; // Configuration keys for various features.\nEnum OutputConfigurator.WriteOpts; // Configuration keys for BatchWriter.\n", "des": "This package exists to store common helpers for configuring MapReduce jobs in a single location."}
{"index": 1934, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: h2\n\nClasses and Interfaces: \n@AutoConfiguration(after=DataSourceAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.h2.server.web.JakartaWebServlet.class) @ConditionalOnProperty(prefix=\"spring.h2.console\", name=\"enabled\", havingValue=\"true\") @EnableConfigurationProperties(H2ConsoleProperties.class) public class H2ConsoleAutoConfiguration extends Object; // Auto-configuration for H2's web console.\n@ConfigurationProperties(prefix=\"spring.h2.console\") public class H2ConsoleProperties extends Object; // Configuration properties for H2's console.\npublic static class H2ConsoleProperties.Settings extends Object;\n", "des": "Auto-configuration for H2's Console."}
{"index": 2550, "repo": "pulsar-common-3.0.0", "code": "Package: exception\n\nClasses and Interfaces: \npublic abstract class PulsarExceptionBase extends Exception;\n", "des": "Exception classes"}
{"index": 1846, "repo": "spring-test-6.0.11", "code": "Package: statements\n\nClasses and Interfaces: \npublic class ProfileValueChecker extends Statement; // ProfileValueChecker is a custom JUnit Statement that checks whether a test class or test method is enabled in the current environment via Spring's @IfProfileValue annotation.\npublic class RunAfterTestClassCallbacks extends Statement; // RunAfterTestClassCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit execution chain by calling afterTestClass() on the supplied TestContextManager.\npublic class RunAfterTestExecutionCallbacks extends Statement; // RunAfterTestExecutionCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit 4 execution chain by calling afterTestExecution() on the supplied TestContextManager.\npublic class RunAfterTestMethodCallbacks extends Statement; // RunAfterTestMethodCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit execution chain by calling afterTestMethod() on the supplied TestContextManager.\npublic class RunBeforeTestClassCallbacks extends Statement; // RunBeforeTestClassCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit execution chain by calling beforeTestClass() on the supplied TestContextManager.\npublic class RunBeforeTestExecutionCallbacks extends Statement; // RunBeforeTestExecutionCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit 4 execution chain by calling beforeTestExecution() on the supplied TestContextManager.\npublic class RunBeforeTestMethodCallbacks extends Statement; // RunBeforeTestMethodCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit execution chain by calling beforeTestMethod() on the supplied TestContextManager.\npublic class RunPrepareTestInstanceCallbacks extends Statement; // RunPrepareTestInstanceCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit execution chain by calling prepareTestInstance() on the supplied TestContextManager.\npublic class SpringFailOnTimeout extends Statement; // SpringFailOnTimeout is a custom JUnit Statement which adds support for Spring's @Timed annotation by throwing an exception if the next statement in the execution chain takes more than the specified number of milliseconds.\n", "des": "Custom JUnit 4 Statements used in the Spring TestContext Framework."}
{"index": 3677, "repo": "solr-core-9.3.0", "code": "Package: pkg\n\nClasses and Interfaces: \nInterface PackageListeners.Listener;\nClass PackageAPI; // This implements the public end points (/api/cluster/package) of package API.\nClass PackageAPI.Packages;\nClass PackageAPI.PkgVersion;\nClass PackageListeners;\nClass PackageListeners.Listener.Ctx;\nClass PackageListeningClassLoader; // A SolrClassLoader that is designed to listen to a set of packages.\nClass PackagePluginHolder<T>;\nClass SolrPackageLoader; // The class that holds a mapping of various packages and classloaders\n", "des": "Package management implementation"}
{"index": 2069, "repo": "spring-webmvc-6.0.11", "code": "Package: i18n\n\nClasses and Interfaces: \npublic abstract class AbstractLocaleContextResolver extends AbstractLocaleResolver implements LocaleContextResolver; // Abstract base class for LocaleContextResolver implementations.\npublic abstract class AbstractLocaleResolver extends Object implements LocaleResolver; // Abstract base class for LocaleResolver implementations.\npublic class AcceptHeaderLocaleResolver extends AbstractLocaleResolver; // LocaleResolver implementation that looks for a match between locales in the Accept-Language header and a list of configured supported locales.\npublic class CookieLocaleResolver extends AbstractLocaleContextResolver; // LocaleResolver implementation that uses a cookie sent back to the user in case of a custom setting, with a fallback to the configured default locale, the request's Accept-Language header, or the default locale for the server.\npublic class FixedLocaleResolver extends AbstractLocaleContextResolver; // LocaleResolver implementation that always returns a fixed default locale and optionally time zone.\npublic class LocaleChangeInterceptor extends Object implements HandlerInterceptor; // Interceptor that allows for changing the current locale on every request, via a configurable request parameter (default parameter name: \"locale\").\npublic class SessionLocaleResolver extends AbstractLocaleContextResolver; // LocaleResolver implementation that uses a locale attribute in the user's session in case of a custom setting, with a fallback to the configured default locale, the request's Accept-Language header, or the default locale for the server.\n", "des": "Locale support classes for Spring's web MVC framework."}
{"index": 3797, "repo": "lucene-analysis-common-9.7.0", "code": "Package: lv\n\nClasses and Interfaces: \nClass LatvianAnalyzer; // Analyzer for Latvian.\nClass LatvianStemFilter; // A TokenFilter that applies LatvianStemmer to stem Latvian words.\nClass LatvianStemFilterFactory; // Factory for LatvianStemFilter.\nClass LatvianStemmer; // Light stemmer for Latvian.\n", "des": "Analyzer for Latvian."}
{"index": 3374, "repo": "opencms-core-15.0", "code": "Package: scheduler\n\nClasses and Interfaces: \nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "This package contains the tool classes for the job management related administration views."}
{"index": 3618, "repo": "solr-test-framework-9.3.0", "code": "Package: placement\n\nClasses and Interfaces: \nClass AttributeFetcherForTest;\nClass Builders; // Builder classes to make tests using different cluster and node configurations easier to write and to read.\nClass Builders.ClusterBuilder;\nClass Builders.CollectionBuilder;\nClass Builders.NodeBuilder;\nClass Builders.ReplicaBuilder;\nClass Builders.ShardBuilder;\n", "des": "Utility classes to test placement plugins."}
{"index": 2290, "repo": "spring-boot-3.1.1", "code": "Package: availability\n\nClasses and Interfaces: \npublic interface ApplicationAvailability; // Provides availability state information for the application.\npublic class ApplicationAvailabilityBean extends Object implements ApplicationAvailability, org.springframework.context.ApplicationListener<AvailabilityChangeEvent<?>>; // Bean that provides an ApplicationAvailability implementation by listening for change events.\npublic class AvailabilityChangeEvent<S extends AvailabilityState> extends org.springframework.context.PayloadApplicationEvent<S>; // ApplicationEvent sent when the AvailabilityState of the application changes.\npublic interface AvailabilityState; // Tagging interface used on ApplicationAvailability states.\npublic enum LivenessState extends Enum<LivenessState> implements AvailabilityState; // \"Liveness\" state of the application.\npublic enum ReadinessState extends Enum<ReadinessState> implements AvailabilityState; // \"Readiness\" state of the application.\n", "des": "Support for describing the availability of Spring Boot applications."}
{"index": 1407, "repo": "spring-boot-actuator-3.1.1", "code": "Package: liquibase\n\nClasses and Interfaces: \n@Endpoint(id=\"liquibase\") public class LiquibaseEndpoint extends Object; // @Endpoint to expose liquibase info.\npublic static class LiquibaseEndpoint.ChangeSetDescriptor extends Object; // Description of a Liquibase change set.\npublic static class LiquibaseEndpoint.ContextExpressionDescriptor extends Object; // Description of a context expression in a LiquibaseEndpoint.ChangeSetDescriptor.\npublic static final class LiquibaseEndpoint.ContextLiquibaseBeansDescriptor extends Object; // Description of an application context's SpringLiquibase beans.\npublic static final class LiquibaseEndpoint.LiquibaseBeanDescriptor extends Object; // Description of a SpringLiquibase bean.\npublic static final class LiquibaseEndpoint.LiquibaseBeansDescriptor extends Object implements OperationResponseBody; // Description of an application's SpringLiquibase beans.\n", "des": "Actuator support for Liquibase."}
{"index": 918, "repo": "commons-compress-1.23.0", "code": "Package: deflate\n\nClasses and Interfaces: \nClass DeflateCompressorInputStream; // Deflate decompressor.\nClass DeflateCompressorOutputStream; // Deflate compressor.\nClass DeflateParameters; // Parameters for the Deflate compressor.\n", "des": "Provides a stream classes that allow (de)compressing streams using the DEFLATE algorithm."}
{"index": 26, "repo": "commons-collections4-4.4", "code": "Package: properties\n\nClasses and Interfaces: \nClass AbstractPropertiesFactory<T extends Properties>; // Subclasses create and load Properties and subclasses of Properties like SortedProperties.\nClass PropertiesFactory; // Creates and loads Properties.\nClass SortedProperties; // A drop-in replacement for Properties for sorting keys.\nClass SortedPropertiesFactory; // Creates and loads SortedProperties.\n", "des": "This package contains classes to extend or customize the behavior of Properties."}
{"index": 634, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: server\n\nSub Packages: \npackage server.metrics; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage server.scheduler; // Utility classes used for Scheduling.\npackage server.service; // Package org.apache.hadoop.yarn.server.service contains service related classes.\npackage server.uam; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage server.webapp; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\n\nClasses and Interfaces: \nClass AMHeartbeatRequestHandler; // Extends Thread and provides an implementation that is used for processing the AM heart beat request asynchronously and sending back the response using the callback method registered with the system.\nClass AMHeartbeatRequestHandler.AsyncAllocateRequestInfo; // Data structure that encapsulates AllocateRequest and AsyncCallback instance.\nClass AMRMClientRelayer; // A component that sits in between AMRMClient(Impl) and Yarn RM.\nClass RMNMSecurityInfoClass;\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 2185, "repo": "spring-security-web-6.1.2", "code": "Package: switchuser\n\nClasses and Interfaces: \npublic class AuthenticationSwitchUserEvent extends org.springframework.security.authentication.event.AbstractAuthenticationEvent; // Application event which indicates that a user context switch.\npublic interface SwitchUserAuthorityChanger; // Allows subclasses to modify the GrantedAuthority list that will be assigned to the principal when they assume the identity of a different principal.\npublic class SwitchUserFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.MessageSourceAware; // Switch User processing filter responsible for user context switching.\npublic final class SwitchUserGrantedAuthority extends Object implements org.springframework.security.core.GrantedAuthority; // Custom GrantedAuthority used by SwitchUserFilter\n", "des": "Provides HTTP-based \"switch user\" (su) capabilities."}
{"index": 1985, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: template\n\nClasses and Interfaces: \npublic abstract class AbstractTemplateViewResolverProperties extends AbstractViewResolverProperties; // Base class for @ConfigurationProperties of a AbstractTemplateViewResolver.\npublic abstract class AbstractViewResolverProperties extends Object; // Base class for @ConfigurationProperties of a ViewResolver.\npublic abstract class PathBasedTemplateAvailabilityProvider extends Object implements TemplateAvailabilityProvider; // Abstract base class for TemplateAvailabilityProvider implementations that find templates from paths.\nprotected abstract static class PathBasedTemplateAvailabilityProvider.TemplateAvailabilityProperties extends Object;\n@FunctionalInterface public interface TemplateAvailabilityProvider; // Indicates the availability of view templates for a particular templating engine such as FreeMarker or Thymeleaf.\npublic class TemplateAvailabilityProviders extends Object; // Collection of TemplateAvailabilityProvider beans that can be used to check which (if any) templating engine supports a given view.\npublic class TemplateLocation extends Object; // Contains a location that templates can be loaded from.\n", "des": "Base classes for template Auto-configuration."}
{"index": 3197, "repo": "tomcat-api-10.1", "code": "Package: http\n\nSub Packages: \npackage http.fileupload; // NOTE: This code has been copied from commons-fileupload trunk 1.3 and commons-io 1.4 and package renamed to avoid clashes with any web apps that may wish to use these libraries.\n\nClasses and Interfaces: \nInterface CookieProcessor;\nClass ConcurrentDateFormat; // A thread safe wrapper around SimpleDateFormat that does not make use of ThreadLocal and - broadly - only creates enough SimpleDateFormat objects to satisfy the concurrency requirements.\nClass CookieProcessorBase;\nClass FastHttpDateFormat; // Utility class to generate HTTP dates.\nClass HeaderUtil;\nClass MimeHeaders; // Memory-efficient repository for Mime Headers.\nClass Parameters;\nClass RequestUtil;\nClass ResponseUtil;\nClass Rfc6265CookieProcessor;\nClass ServerCookie; // Server-side cookie representation.\nClass ServerCookies; // This class is not thread-safe.\nEnum Parameters.FailReason;\nEnum SameSiteCookies;\n", "des": "Special utils for handling HTTP-specific entities - headers, parameters, cookies, etc."}
{"index": 549, "repo": "commons-rdf-rdf4j-0.5.0", "code": "Package: experimental\n\nClasses and Interfaces: \nClass RDF4JParser; // RDF4J-based parser.\n", "des": "Experimental Commons RDF RDF4J implementations."}
{"index": 532, "repo": "commons-vfs2-2.9.0", "code": "Package: sftp\n\nClasses and Interfaces: \nInterface IdentityProvider; // Provides identity to a JSch.\nInterface IdentityRepositoryFactory; // Creates instances of JSch IdentityRepository.\nClass BytesIdentityInfo; // Structure for an identity based on byte arrays.\nClass IdentityInfo; // Structure for an identity based on Files.\nClass SftpClientFactory; // Create a JSch Session instance.\nClass SftpFileNameParser; // Implementation for SFTP.\nClass SftpFileObject; // An SFTP file.\nClass SftpFileProvider; // A provider for accessing files over SFTP.\nClass SftpFileSystem; // Represents the files on an SFTP server.\nClass SftpFileSystemConfigBuilder; // The config builder for various SFTP configuration options.\nClass SftpFileSystemConfigBuilder.ProxyType; // Proxy type.\nClass SftpStreamProxy; // Stream based proxy for JSch.\nClass TrustEveryoneUserInfo; // Helper class to trust a new host.\nClass UserIsOwnerPosixPermissions; // Pretends that the current user is always the owner and in the same group.\n", "des": "The SFTP Provider."}
{"index": 1893, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: subject\n\nSub Packages: \npackage subject.support; // Concrete support implementations of most of the org.apache.shiro.subject interfaces.\n\nClasses and Interfaces: \npublic class ExecutionException extends org.apache.shiro.lang.ShiroException; // Exception wrapping any potential checked exception thrown when a Subject executes a Callable.\npublic interface MutablePrincipalCollection extends PrincipalCollection; // A PrincipalCollection that allows modification.\npublic interface PrincipalCollection extends Iterable, Serializable; // A collection of all principals associated with a corresponding Subject.\npublic interface PrincipalMap extends PrincipalCollection, Map<String,Object>; // EXPERIMENTAL - DO NOT USE YET\npublic class SimplePrincipalCollection extends Object implements MutablePrincipalCollection; // A simple implementation of the MutablePrincipalCollection interface that tracks principals internally by storing them in a LinkedHashMap.\npublic class SimplePrincipalMap extends Object implements PrincipalMap; // Default implementation of the PrincipalMap interface.\npublic interface Subject; // A Subject represents state and security operations for a single application user.\npublic static class Subject.Builder extends Object; // Builder design pattern implementation for creating Subject instances in a simplified way without requiring knowledge of Shiro's construction techniques.\npublic interface SubjectContext extends Map<String,Object>; // A SubjectContext is a 'bucket' of data presented to a SecurityManager which interprets this data to construct Subject instances.\n", "des": "Components supporting the Subject interface, the most important concept in Shiro's API."}
{"index": 1125, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: nvidia\n\nClasses and Interfaces: \nClass NvidiaGPUPluginForRuntimeV2; // Nvidia GPU plugin supporting both Nvidia container runtime v2 for Docker and non-Docker container.\nEnum NvidiaGPUPluginForRuntimeV2.DeviceLinkType; // Different type of link.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 2990, "repo": "spring-ldap-core-3.1.0", "code": "Package: impl\n\nClasses and Interfaces: \npublic class DefaultObjectDirectoryMapper extends Object implements ObjectDirectoryMapper; // Default implementation of ObjectDirectoryMapper.\npublic class InvalidEntryException extends OdmException; // Thrown to indicate that an instance is not suitable for persisting in the LDAP directory.\npublic class MetaDataException extends OdmException; // Thrown to indicate an error in the annotated meta-data.\npublic class UnmanagedClassException extends OdmException; // Thrown when an OdmManager method is called with a class which is not being managed by the OdmManager.\n", "des": "Provides a single public class which implements OdmManager."}
{"index": 1187, "repo": "commons-math3-3.6.1", "code": "Package: optim\n\nSub Packages: \npackage optim.linear; // Optimization algorithms for linear constrained problems.\npackage optim.univariate; // One-dimensional optimization algorithms.\n\nClasses and Interfaces: \nInterface ConvergenceChecker<PAIR>; // This interface specifies how to check if an optimization algorithm has converged.\nInterface OptimizationData; // Marker interface.\nInterface OptimizationProblem<PAIR>; // Common settings for all optimization problems.\nClass AbstractConvergenceChecker<PAIR>; // Base class for all convergence checker implementations.\nClass AbstractOptimizationProblem<PAIR>; // Base class for implementing optimization problems.\nClass BaseMultiStartMultivariateOptimizer<PAIR>; // Base class multi-start optimizer for a multivariate function.\nClass BaseMultivariateOptimizer<PAIR>; // Base class for implementing optimizers for multivariate functions.\nClass BaseOptimizer<PAIR>; // Base class for implementing optimizers.\nClass InitialGuess; // Starting point (first guess) of the optimization procedure.\nClass MaxEval; // Maximum number of evaluations of the function to be optimized.\nClass MaxIter; // Maximum number of iterations performed by an (iterative) algorithm.\nClass PointValuePair; // This class holds a point and the value of an objective function at that point.\nClass PointVectorValuePair; // This class holds a point and the vectorial value of an objective function at that point.\nClass SimpleBounds; // Simple optimization constraints: lower and upper bounds.\nClass SimplePointChecker<PAIR extends Pair<double[],? extends Object>>; // Simple implementation of the ConvergenceChecker interface using only point coordinates.\nClass SimpleValueChecker; // Simple implementation of the ConvergenceChecker interface using only objective function values.\nClass SimpleVectorValueChecker; // Simple implementation of the ConvergenceChecker interface using only objective function values.\n", "des": "Generally, optimizers are algorithms that will either minimize or maximize a scalar function, called the objective function."}
{"index": 574, "repo": "commons-collections-3.2.2", "code": "Package: collections\n\nSub Packages: \npackage collections.bag; // This package contains implementations of the Bag and SortedBag interfaces.\npackage collections.bidimap; // This package contains implementations of the BidiMap, OrderedBidiMap and SortedBidiMap interfaces.\npackage collections.buffer; // This package contains implementations of the Buffer interface.\npackage collections.collection; // This package contains implementations of the Collection interface.\npackage collections.comparators; // This package contains implementations of the Comparator interface.\npackage collections.functors; // This package contains implementations of the Closure, Predicate, Transformer and Factory interfaces.\npackage collections.iterators; // This package contains implementations of the Iterator interface.\npackage collections.keyvalue; // This package contains implementations of collection and map related key/value classes.\npackage collections.list; // This package contains implementations of the List interface.\npackage collections.map; // This package contains implementations of the Map, IterableMap, OrderedMap and SortedMap interfaces.\npackage collections.set; // This package contains implementations of the Set and SortedSet interfaces.\n\nClasses and Interfaces: \nInterface Bag; // Defines a collection that counts the number of times an object appears in the collection.\nInterface BidiMap; // Defines a map that allows bidirectional lookup between key and values.\nInterface BoundedCollection; // Defines a collection that is bounded in size.\nInterface BoundedMap; // Defines a map that is bounded in size.\nInterface Buffer; // Defines a collection that allows objects to be removed in some well-defined order.\nInterface Closure; // Defines a functor interface implemented by classes that do something.\nInterface Factory; // Defines a functor interface implemented by classes that create objects.\nInterface IterableMap; // Defines a map that can be iterated directly without needing to create an entry set.\nInterface KeyValue; // Defines a simple key value pair.\nInterface MapIterator; // Defines an iterator that operates over a Map.\nInterface MultiMap; // Defines a map that holds a collection of values against each key.\nInterface OrderedBidiMap; // Defines a map that allows bidirectional lookup between key and values and retains and provides access to an ordering.\nInterface OrderedIterator; // Defines an iterator that operates over an ordered collection.\n", "des": "This package contains the interfaces and utilities shared across all the subpackages of this component."}
{"index": 914, "repo": "commons-compress-1.23.0", "code": "Package: changes\n\nClasses and Interfaces: \nClass ChangeSet; // ChangeSet collects and performs changes to an archive.\nClass ChangeSetPerformer; // Performs ChangeSet operations on a stream.\nClass ChangeSetResults; // Stores the results of an performed ChangeSet operation.\n", "des": "EXPERIMENTAL support for changesets that are applied to archives."}
{"index": 342, "repo": "hadoop-hdfs-3.3.6", "code": "Package: blockaliasmap\n\nClasses and Interfaces: \nInterface BlockAliasMap.Reader.Options; // reader options.\nInterface BlockAliasMap.Writer.Options; // writer options.\nClass BlockAliasMap<T extends BlockAlias>; // An abstract class used to read and write block maps for provided blocks.\nClass BlockAliasMap.Reader<U extends BlockAlias>; // An abstract class that is used to read BlockAliases for provided blocks.\nClass BlockAliasMap.Writer<U extends BlockAlias>; // An abstract class used as a writer for the provided block map.\n", "des": "The AliasMap defines mapping of PROVIDED HDFS blocks to data in remote storage systems."}
{"index": 2328, "repo": "spring-boot-3.1.1", "code": "Package: server\n\nClasses and Interfaces: \npublic interface ConfigurableRSocketServerFactory; // A configurable RSocketServerFactory.\npublic interface RSocketServer; // Simple interface that represents a fully configured RSocket server.\npublic static enum RSocketServer.Transport extends Enum<RSocketServer.Transport>; // Choice of transport protocol for the RSocket server.\n@FunctionalInterface public interface RSocketServerCustomizer; // Callback interface that can be used to customize a RSocketServer.\npublic class RSocketServerException extends RuntimeException; // Exceptions thrown by an RSocket server.\n@FunctionalInterface public interface RSocketServerFactory; // Factory interface that can be used to create a reactive RSocketServer.\n", "des": "Support for RSocket servers."}
{"index": 443, "repo": "lucene-analyzers-icu-8.11.2", "code": "Package: icu\n\nSub Packages: \npackage icu.segmentation; // Tokenizer that breaks text into words with the Unicode Text Segmentation algorithm.\npackage icu.tokenattributes; // Additional ICU-specific Attributes for text analysis.\n\nClasses and Interfaces: \nClass ICUFoldingFilter; // A TokenFilter that applies search term folding to Unicode text, applying foldings from UTR#30 Character Foldings.\nClass ICUFoldingFilterFactory; // Factory for ICUFoldingFilter.\nClass ICUNormalizer2CharFilter; // Normalize token text with ICU's Normalizer2.\nClass ICUNormalizer2CharFilterFactory; // Factory for ICUNormalizer2CharFilter\nClass ICUNormalizer2Filter; // Normalize token text with ICU's Normalizer2\nClass ICUNormalizer2FilterFactory; // Factory for ICUNormalizer2Filter\nClass ICUTransformFilter; // A TokenFilter that transforms text with ICU.\nClass ICUTransformFilterFactory; // Factory for ICUTransformFilter.\n", "des": "Analysis components based on ICU"}
{"index": 526, "repo": "commons-vfs2-2.9.0", "code": "Package: http5s\n\nClasses and Interfaces: \nClass Http5sFileNameParser; // FileNameParser implementation for http5s provider, setting default port to 443.\nClass Http5sFileProvider; // http5s provider that uses HttpComponents HttpClient.\n", "des": "The HTTP5S File Provider"}
{"index": 3877, "repo": "solr-ltr-9.3.0", "code": "Package: norm\n\nClasses and Interfaces: \nClass IdentityNormalizer; // A Normalizer that normalizes a feature value to itself.\nClass MinMaxNormalizer; // A Normalizer to scale a feature value using a (min,max) range.\nClass Normalizer; // A normalizer normalizes the value of a feature.\nClass StandardNormalizer; // A Normalizer to scale a feature value around an average-and-standard-deviation distribution.\nClass NormalizerException;\n", "des": "A normalizer normalizes the value of a feature."}
{"index": 2884, "repo": "spring-integration-core-6.1.2", "code": "Package: converter\n\nClasses and Interfaces: \npublic class AllowListDeserializingConverter extends Object implements org.springframework.core.convert.converter.Converter<byte[],Object>; // A Converter that delegates to a Deserializer to convert data in a byte array to an object.\npublic class ConfigurableCompositeMessageConverter extends org.springframework.messaging.converter.CompositeMessageConverter implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // A CompositeMessageConverter extension with some default MessageConverters which can be overridden with the given converters or added in the end of target converters collection.\npublic class DefaultDatatypeChannelMessageConverter extends Object implements org.springframework.messaging.converter.MessageConverter, org.springframework.beans.factory.BeanFactoryAware; // Default message converter for datatype channels.\npublic class MapMessageConverter extends Object implements org.springframework.messaging.converter.MessageConverter, org.springframework.beans.factory.BeanFactoryAware; // Converts to/from a Map with 2 keys ('headers' and 'payload').\npublic class ObjectStringMessageConverter extends org.springframework.messaging.converter.StringMessageConverter; // A StringMessageConverter extension to convert any object to string.\npublic class PassThruMessageConverter extends Object implements org.springframework.messaging.converter.MessageConverter; // The simple MessageConverter implementation which contract is to return Message as is for both from/to operations.\npublic class SimpleMessageConverter extends Object implements org.springframework.messaging.converter.MessageConverter, org.springframework.beans.factory.BeanFactoryAware;\n", "des": "Provides classes supporting message conversion."}
{"index": 2054, "repo": "spring-ws-security-4.0.5", "code": "Package: support\n\nClasses and Interfaces: \npublic class KeyManagersFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<KeyManager[]>, org.springframework.beans.factory.InitializingBean; // Spring factory bean for an array of KeyManagers.\npublic class KeyStoreFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<KeyStore>, org.springframework.beans.factory.InitializingBean; // Spring factory bean for a KeyStore.\npublic abstract class KeyStoreUtils extends Object; // Generic utility methods for dealing with KeyStore objects.\npublic abstract class SpringSecurityUtils extends Object; // Generic utility methods for Spring Security\npublic class TrustManagersFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<TrustManager[]>, org.springframework.beans.factory.InitializingBean; // Spring factory bean for an array of TrustManagers.\n", "des": "Contains support classes for handling WS-Security messages."}
{"index": 3591, "repo": "lucene-test-framework-9.7.0", "code": "Package: vector\n\nClasses and Interfaces: \nClass ConfigurableMCodec; // This codec allows customization of the number of connections made for an hnsw index.\n", "des": "Codecs for testing different vector formats."}
{"index": 2921, "repo": "groovy-4.0.13", "code": "Package: time\n\nClasses and Interfaces: \npublic abstract class BaseDuration extends Object implements Comparable<BaseDuration>; // Base class for date and time durations.\npublic abstract static class BaseDuration.From extends Object;\npublic class DatumDependentDuration extends BaseDuration; // DatumDependentDuration represents durations whose length in milliseconds cannot be determined without knowing the datum point.\npublic class Duration extends BaseDuration; // Duration represents time periods which have values independent of the context.\npublic class TimeCategory extends Object; // Apply a number of methods to allow convenient Date/Time manipulation,such as:\npublic class TimeDatumDependentDuration extends DatumDependentDuration; // TimeDatumDuration represents a time period which results from an arithmetic operation between a TimeDuration object and a DatumDuration object\npublic class TimeDuration extends Duration; // TimeDuration represents time periods expressed in units of hours, minutes, seconds and milliseconds.\n", "des": "Classes for easily manipulating Dates and times."}
{"index": 851, "repo": "calcite-core-1.34.0", "code": "Package: stream\n\nClasses and Interfaces: \nInterface StreamRules.DeltaAggregateTransposeRule.DeltaAggregateTransposeRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaFilterTransposeRule.DeltaFilterTransposeRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaJoinTransposeRule.DeltaJoinTransposeRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaProjectTransposeRule.DeltaProjectTransposeRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaSortTransposeRule.DeltaSortTransposeRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaTableScanRule.DeltaTableScanRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaTableScanToEmptyRule.DeltaTableScanToEmptyRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaUnionTransposeRule.DeltaUnionTransposeRuleConfig; // Rule configuration.\nClass Chi; // Relational operator that converts a stream to a relation.\nClass Delta; // Relational operator that converts a relation to a stream.\nClass LogicalChi; // Sub-class of Chi not targeted at any particular engine or calling convention.\nClass LogicalDelta; // Sub-class of Delta not targeted at any particular engine or calling convention.\nClass StreamRules; // Rules and relational operators for streaming relational expressions.\nClass StreamRules.DeltaAggregateTransposeRule; // Planner rule that pushes a Delta through an Aggregate.\nClass StreamRules.DeltaFilterTransposeRule; // Planner rule that pushes a Delta through a Filter.\nClass StreamRules.DeltaJoinTransposeRule; // Planner rule that pushes a Delta through a Join.\nClass StreamRules.DeltaProjectTransposeRule; // Planner rule that pushes a Delta through a Project.\nClass StreamRules.DeltaSortTransposeRule; // Planner rule that pushes a Delta through an Sort.\nClass StreamRules.DeltaTableScanRule; // Planner rule that pushes a Delta into a TableScan of a StreamableTable.\nClass StreamRules.DeltaTableScanToEmptyRule; // Planner rule that converts Delta over a TableScan of a table other than StreamableTable to an empty Values.\nClass StreamRules.DeltaUnionTransposeRule; // Planner rule that pushes a Delta through an Union.\n", "des": "Defines relational expressions for streaming."}
{"index": 1786, "repo": "spring-integration-file-6.1.2", "code": "Package: remote\n\nSub Packages: \npackage remote.aop; // Provides classes related to AOP.\npackage remote.gateway; // Provides classes supporting remote file gateways.\npackage remote.handler; // Provides classes supporting remote file message handlers.\npackage remote.server; // Provides classes related to file servers.\npackage remote.session; // Provides classes supporting remote file sessions.\npackage remote.synchronizer; // Provides classes supporting the synchronization of remote and local file directories.\n\nClasses and Interfaces: \npublic abstract class AbstractFileInfo<F> extends Object implements FileInfo<F>, Comparable<FileInfo<F>>; // Abstract implementation of FileInfo; provides a setter for the remote directory and a generic toString implementation.\npublic abstract class AbstractRemoteFileStreamingMessageSource<F> extends org.springframework.integration.endpoint.AbstractFetchLimitingMessageSource<InputStream> implements org.springframework.integration.support.management.ManageableLifecycle; // A message source that produces a message with an InputStream payload referencing a remote file.\n@FunctionalInterface public interface ClientCallback<C,T>; // RemoteFileTemplate callback with the underlying client instance providing access to lower level methods.\n@FunctionalInterface public interface ClientCallbackWithoutResult<C> extends ClientCallback<C,Object>; // RemoteFileTemplate callback with the underlying client instance providing access to lower level methods where no result is returned.\npublic interface FileInfo<F>; // Represents a remote file info - an abstraction over the underlying implementation.\n@FunctionalInterface public interface InputStreamCallback; // Callback for stream-based file retrieval using a RemoteFileOperations.\n@FunctionalInterface public interface MessageSessionCallback<F,T>; // Callback invoked by RemoteFileOperations.executeForMessage() - allows multiple operations on a session.\npublic interface RemoteFileOperations<F>; // Strategy for performing operations on remote files.\n@FunctionalInterface public static interface RemoteFileOperations.OperationsCallback<F,T>; // Callback for using the same session for multiple RemoteFileTemplate operations.\npublic class RemoteFileTemplate<F> extends Object implements RemoteFileOperations<F>, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.BeanFactoryAware; // A general abstraction for dealing with remote files.\n", "des": "Base package for supporting remote files."}
{"index": 3353, "repo": "opencms-core-15.0", "code": "Package: report\n\nClasses and Interfaces: \nClass CmsReportDialog; // Simple dialog for displaying a report.\nClass CmsReportOverlay; // Report overlay, shows the wait spinner first and the report window later in case off longer running threads.\nClass CmsReportWidget; // A widget used to display an OpenCms report.\nClass CmsStreamReportWidget; // Widget that can be used to view a running report that is not generated specifically by an OpenCms report thread, but from the text written to the stream provided by this widget.\n", "des": "Contains the user interface components for reports."}
{"index": 227, "repo": "nutch-2.4", "code": "Package: model\n\nClasses and Interfaces: \nClass Crawl;\nClass JobConfig;\nClass JobInfo;\nClass NutchStatus;\nEnum ConnectionStatus;\nEnum Crawl.CrawlStatus;\nEnum JobInfo.JobType;\nEnum JobInfo.State;\n", "des": "Contains model classes of client for Web UI"}
{"index": 948, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: pox\n\nSub Packages: \npackage pox.dom; // Contains an implementation of the POX interfaces that is based on DOM.\n\nClasses and Interfaces: \nInterface PoxMessage; // Defines the contract for Plain Old XML messages.\nClass PoxMessageException; // Specific subclass of WebServiceMessageException for Plain Old XML messages.\n", "des": "Provides the Plain Old XML (POX) functionality of the Spring Web Services framework."}
{"index": 2938, "repo": "groovy-4.0.13", "code": "Package: syntax\n\nClasses and Interfaces: \npublic class ASTHelper extends Object; // A common base class of AST helper methods which can be shared across the classic and new parsers\npublic abstract class CSTNode extends Object; // An abstract base class for nodes in the concrete syntax tree that is the result of parsing.\npublic class Numbers extends Object; // Helper class for processing Groovy numeric literals.\npublic class ParserException extends TokenException;\npublic class ReadException extends GroovyException; // Encapsulates non-specific i/o exceptions.\npublic class Reduction extends CSTNode; // A syntax reduction, produced by the Parser.\npublic class RuntimeParserException extends GroovyRuntimeException; // A helper class to allow parser exceptions to be thrown anywhere in the code.\npublic class SyntaxException extends GroovyException; // Base exception indicating a syntax error.\npublic class Token extends CSTNode; // A CSTNode produced by the Lexer.\npublic class TokenException extends SyntaxException;\npublic class TokenMismatchException extends TokenException;\npublic class TokenUtil extends Object; // Utility methods for working with Tokens.\npublic class Types extends Object; // Typing information for the CST system.\n", "des": "Lexer, parser and trees."}
{"index": 2940, "repo": "groovy-4.0.13", "code": "Package: javac\n\nClasses and Interfaces: \npublic class JavaAwareCompilationUnit extends CompilationUnit; // Compilation Unit capable of compiling Java source files.\npublic class JavaAwareResolveVisitor extends ResolveVisitor;\npublic class JavacCompilerFactory extends Object implements JavaCompilerFactory;\npublic class JavacJavaCompiler extends Object implements JavaCompiler;\npublic interface JavaCompiler;\npublic interface JavaCompilerFactory;\npublic class JavaStubCompilationUnit extends CompilationUnit; // Compilation unit to only generate stubs.\npublic class JavaStubGenerator extends Object;\npublic class MemJavaFileObject extends SimpleJavaFileObject; // Represents a Java source file in memory to compile\npublic class RawJavaFileObject extends SimpleJavaFileObject; // Represents a Java source file in file to compile\n", "des": "Classes related to the joint compiler."}
{"index": 2823, "repo": "groovy-xml-4.0.13", "code": "Package: xml\n\nSub Packages: \npackage xml.dom; // Groovy XML Dom processing classes.\npackage xml.slurpersupport; // Helper classes for XmlSlurper.\npackage xml.streamingmarkupsupport; // XmlBuilder related classes to support streaming XML.\n\nClasses and Interfaces: \npublic class DOMBuilder extends groovy.util.BuilderSupport; // A helper class for creating a W3C DOM tree\npublic class FactorySupport extends Object; // Support class for creating XML Factories\npublic class MarkupBuilder extends groovy.util.BuilderSupport; // A helper class for creating XML or HTML markup.\npublic static enum MarkupBuilder.CharFilter extends Enum<MarkupBuilder.CharFilter>;\npublic static class MarkupBuilder.DefaultXmlEscapingFunction extends Object implements Function<Character,Optional<String>>;\npublic class MarkupBuilderHelper extends Object; // A helper class for MarkupBuilder.\npublic class Namespace extends Object; // A simple helper class which acts as a factory of QName instances.\npublic class NamespaceBuilder extends Object; // A helper class for creating namespaces for GroovyMarkup\npublic class NamespaceBuilderSupport extends groovy.util.BuilderSupport; // A helper class for creating namespaced GroovyMarkup\npublic class SAXBuilder extends groovy.util.BuilderSupport; // A builder for generating W3C SAX events.\npublic class XmlNodePrinter extends Object; // Prints a groovy.util.Node (as used with XmlParser) including all children in XML format.\nprotected static class XmlNodePrinter.NamespaceContext extends Object;\npublic class XmlParser extends Object implements ContentHandler; // A helper class for parsing XML into a tree of Node instances for a simple way of processing XML.\npublic class XmlSlurper extends DefaultHandler; // Parse XML into a document tree that may be traversed similar to XPath expressions.\npublic class XmlUtil extends Object; // Used for pretty printing XML content and other XML related utilities.\n", "des": "Groovy markup builder classes for working with SAX and W3C DOM and Groovy markup."}
{"index": 2574, "repo": "camel-api-4.0.0-RC1", "code": "Package: catalog\n\nClasses and Interfaces: \npublic class ConfigurationPropertiesValidationResult extends Object implements Serializable; // Details result of validating configuration properties (eg application.properties for camel-main).\npublic class EndpointValidationResult extends Object implements Serializable; // Details result of validating endpoint uri.\npublic interface JSonSchemaResolver; // Pluggable resolver to load JSON schema files for components, data formats, languages etc.\npublic class LanguageValidationResult extends Object implements Serializable; // Validation result of parsing a language expression or predicate\npublic interface RuntimeCamelCatalog extends StaticService, CamelContextAware; // Runtime catalog which limited API needed by components that supports ComponentVerifierExtension.\npublic interface SuggestionStrategy; // Strategy to provide suggestions for unknown endpoint options\n", "des": "Camel Catalog API"}
{"index": 3274, "repo": "opencms-core-15.0", "code": "Package: shared\n\nSub Packages: \npackage shared.rpc; // Shared RPC interfaces.\n\nClasses and Interfaces: \nInterface I_CmsAutoBeanFactory; // General AutoBean factory interface.\nInterface I_CmsCodeMirrorClientConfiguration; // AutoBean interface that represents the configuration for the client-side CodeMirror editor widget.\nInterface I_CmsContentLoadCollectorInfo; // Interface defining the data used to call a content collector.\nInterface I_CmsEditableDataExtensions; // Extended attributes for editable data generated by e.g.\nInterface I_CmsEmbeddedDialogInfo; // AutoBean interface for the data needed to open an embedded Vaadin dialog from GWT.\nInterface I_CmsHasIconClasses; // Interface for elements with icons.\nInterface I_CmsListAddMetadata; // AutoBean interface for the data injected into the page by the cms:enable-list-add tag.\nInterface I_CmsUnlockData; // Parameters for the unlock service.\nInterface I_CmsUploadConstants; // An interface that holds some constants for the upload dialog.\nClass CmsAdditionalInfoBean; // Additional info bean.\nClass CmsBroadcastMessage; // Contains the broadcast message data.\nClass CmsBrokenLinkBean; // A bean which represents either the source or the target of a broken link.\nClass CmsCategoryBean; // A specific bean holding all info to be displayed in the categories tab.\nClass CmsCategoryTreeEntry; // Recursive category tree entry.\nClass CmsClientDateBean; // A bean containing a date, both as a 'long' value and a user-readable string representation.\nClass CmsClientLock; // Client side lock class.\nClass CmsClientVariantInfo; // Client-side bean which holds information about a client variant of a template context.\nClass CmsContextMenuEntryBean; // A context menu entry bean.\nClass CmsCoreData; // Runtime data bean for prefetching.\nClass CmsCoreData.UserInfo; // Bean class containing info about the current user.\nClass CmsDataViewConstants; // Constants used by the data view widget code (client/server side).\nClass CmsDataViewParamEncoder; // Encodes/decodes the configuration passed to the data view popup as a request parameter.\nClass CmsDeleteResourceBean; // A bean which represents the information for the delete dialog.\nClass CmsExternalLinkInfoBean; // Provides information about an external link.\n", "des": "Core shared stuff."}
{"index": 2812, "repo": "spring-integration-ip-6.1.2", "code": "Package: connection\n\nClasses and Interfaces: \npublic abstract class AbstractClientConnectionFactory extends AbstractConnectionFactory; // Abstract class for client connection factories; client connection factories establish outgoing connections.\npublic abstract class AbstractConnectionFactory extends org.springframework.integration.context.IntegrationObjectSupport implements ConnectionFactory, org.springframework.context.ApplicationEventPublisherAware; // Base class for all connection factories.\npublic abstract class AbstractServerConnectionFactory extends AbstractConnectionFactory implements TcpServerConnectionFactory, org.springframework.scheduling.SchedulingAwareRunnable, org.springframework.integration.context.OrderlyShutdownCapable; // Base class for all server connection factories.\npublic abstract class AbstractTcpConnectionSupport extends Object; // Base class for TCP Connection Support implementations.\npublic class CachingClientConnectionFactory extends AbstractClientConnectionFactory implements org.springframework.beans.factory.DisposableBean; // Connection factory that caches connections from the underlying target factory.\npublic interface ClientModeCapable; // Edpoints implementing this interface are capable of running in client-mode.\npublic class ClientModeConnectionManager extends Object implements Runnable; // Intended to be run on a schedule, simply gets the connection from a client connection factory each time it is run.\npublic interface ConnectionFactory extends org.springframework.integration.support.management.ManageableLifecycle; // A factory used to create TcpConnection objects.\npublic class DefaultTcpNetConnectionSupport extends AbstractTcpConnectionSupport implements TcpNetConnectionSupport; // Default implementation of TcpNetConnectionSupport.\npublic class DefaultTcpNetSocketFactorySupport extends Object implements TcpSocketFactorySupport; // Implementation of TcpSocketFactorySupport for non-SSL sockets ServerSocket and Socket.\npublic class DefaultTcpNetSSLSocketFactorySupport extends Object implements TcpSocketFactorySupport; // Implementation of TcpSocketFactorySupport for SSL sockets SSLServerSocket and SSLSocket.\npublic class DefaultTcpNioConnectionSupport extends AbstractTcpConnectionSupport implements TcpNioConnectionSupport; // Implementation of TcpNioConnectionSupport for non-SSL NIO connections.\npublic class DefaultTcpNioSSLConnectionSupport extends AbstractTcpConnectionSupport implements TcpNioConnectionSupport; // Implementation of TcpNioConnectionSupport for SSL NIO connections.\npublic class DefaultTcpSocketSupport extends Object implements TcpSocketSupport; // Default implementation of TcpSocketSupport; makes no changes to sockets.\n", "des": "All things related to tcp connections - client and server factories; listener and sender interfaces."}
{"index": 558, "repo": "hadoop-common-3.3.4", "code": "Package: lib\n\nClasses and Interfaces: \nClass StaticUserWebFilter; // Provides a servlet filter that pretends to authenticate a fake user (Dr.Who) so that the web UI is usable for a secure cluster without authentication.\nClass StaticUserWebFilter.StaticUserFilter;\n", "des": "This package provides user-selectable (via configuration) classes that add functionality to the web UI."}
{"index": 2477, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: mongo\n\nClasses and Interfaces: \n@AutoConfiguration(before=org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration.class, after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass(com.mongodb.MongoClientSettings.class) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class MongoMetricsAutoConfiguration extends Object; // Auto-configuration for Mongo metrics.\n", "des": "Auto-configuration for Mongo metrics."}
{"index": 367, "repo": "commons-geometry-euclidean-1.0", "code": "Package: rotation\n\nClasses and Interfaces: \nInterface Rotation3D; // Interface representing a generic rotation in 3-dimensional Euclidean space.\nClass AxisAngleSequence; // Class representing a sequence of axis-angle rotations.\nClass QuaternionRotation; // Class using a unit-length quaternion to represent rotations in 3-dimensional Euclidean space.\nEnum AxisReferenceFrame; // Enum defining the possible reference frames for locating axis positions during a rotation sequence.\nEnum AxisSequence; // Enum containing rotation axis sequences for use in defining 3 dimensional rotations.\nEnum AxisSequenceType; // Defines different types of rotation axis sequences.\n", "des": "This package provides components related to rotations in 3 dimensional Euclidean space."}
{"index": 3023, "repo": "spring-web-6.0.11", "code": "Package: client\n\nSub Packages: \npackage client.support; // Classes supporting the org.springframework.web.client package.\n\nClasses and Interfaces: \npublic class DefaultResponseErrorHandler extends Object implements ResponseErrorHandler; // Spring's default implementation of the ResponseErrorHandler interface.\npublic class ExtractingResponseErrorHandler extends DefaultResponseErrorHandler; // Implementation of ResponseErrorHandler that uses HttpMessageConverters to convert HTTP error responses to RestClientExceptions.\npublic class HttpClientErrorException extends HttpStatusCodeException; // Exception thrown when an HTTP 4xx is received.\npublic static final class HttpClientErrorException.BadRequest extends HttpClientErrorException; // HttpClientErrorException for status HTTP 400 Bad Request.\npublic static final class HttpClientErrorException.Conflict extends HttpClientErrorException; // HttpClientErrorException for status HTTP 409 Conflict.\npublic static final class HttpClientErrorException.Forbidden extends HttpClientErrorException; // HttpClientErrorException for status HTTP 403 Forbidden.\npublic static final class HttpClientErrorException.Gone extends HttpClientErrorException; // HttpClientErrorException for status HTTP 410 Gone.\npublic static final class HttpClientErrorException.MethodNotAllowed extends HttpClientErrorException; // HttpClientErrorException for status HTTP 405 Method Not Allowed.\npublic static final class HttpClientErrorException.NotAcceptable extends HttpClientErrorException; // HttpClientErrorException for status HTTP 406 Not Acceptable.\npublic static final class HttpClientErrorException.NotFound extends HttpClientErrorException; // HttpClientErrorException for status HTTP 404 Not Found.\npublic static final class HttpClientErrorException.TooManyRequests extends HttpClientErrorException; // HttpClientErrorException for status HTTP 429 Too Many Requests.\npublic static final class HttpClientErrorException.Unauthorized extends HttpClientErrorException; // HttpClientErrorException for status HTTP 401 Unauthorized.\npublic static final class HttpClientErrorException.UnprocessableEntity extends HttpClientErrorException; // HttpClientErrorException for status HTTP 422 Unprocessable Entity.\npublic static final class HttpClientErrorException.UnsupportedMediaType extends HttpClientErrorException; // HttpClientErrorException for status HTTP 415 Unsupported Media Type.\npublic class HttpMessageConverterExtractor<T> extends Object implements ResponseExtractor<T>; // Response extractor that uses the given entity converters to convert the response into a type T.\npublic class HttpServerErrorException extends HttpStatusCodeException; // Exception thrown when an HTTP 5xx is received.\npublic static final class HttpServerErrorException.BadGateway extends HttpServerErrorException; // HttpServerErrorException for HTTP status 502 Bad Gateway.\npublic static final class HttpServerErrorException.GatewayTimeout extends HttpServerErrorException; // HttpServerErrorException for status HTTP 504 Gateway Timeout.\n", "des": "Core package of the client-side web support."}
{"index": 1121, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: runc\n\nClasses and Interfaces: \nInterface RuncImageTagToManifestPlugin; // This class is a plugin interface for the RuncContainerRuntime to convert image tags into OCI Image Manifests.\nInterface RuncManifestToResourcesPlugin; // This class is a plugin interface for the RuncContainerRuntime that maps OCI Image Manifests into associated config and layers.\nClass HdfsManifestToResourcesPlugin; // This class is a plugin for the RuncContainerRuntime that maps runC image manifests into their associated config and layers that are located in HDFS.\nClass ImageManifest; // This class is a Java representation of the OCI Image Manifest Specification.\nClass ImageManifest.Blob; // This class is a Java representation of an OCI Image Blob.\nClass ImageTagToManifestPlugin; // This class is a plugin for the RuncContainerRuntime to convert image tags into runC image manifests.\nClass RuncContainerExecutorConfig; // This class is used by the RuncContainerRuntime to pass a JSON object to the container-executor.\nClass RuncContainerExecutorConfig.OCILayer; // This class is a Java representation of an OCI image layer.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig; // This class is a Java representation of the OCI Runtime Specification.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig.OCIAnnotationsConfig; // This class is a Java representation of the oci annotations config section of the OCI Runtime Specification.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig.OCIHooksConfig; // This class is a Java representation of the oci hooks section of the OCI Runtime Specification.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig.OCIHooksConfig.HookType; // This class is a Java representation of the hook type section of the OCI Runtime Specification.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig.OCILinuxConfig; // This class is a Java representation of the oci linux config section of the OCI Runtime Specification.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig.OCILinuxConfig.Device; // This class is a Java representation of the device section of the OCI Runtime Specification.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig.OCILinuxConfig.IDMapping; // This class is a Java representation of the idmapping section of the OCI Runtime Specification.\n", "des": "Package containing classes related to runC commands and common operations used within the @{link RuncContainerRuntime}."}
{"index": 936, "repo": "commons-compress-1.23.0", "code": "Package: parallel\n\nClasses and Interfaces: \nInterface InputStreamSupplier; // Supplies input streams.\nInterface ScatterGatherBackingStore; // Store intermediate payload in a scatter-gather scenario.\nInterface ScatterGatherBackingStoreSupplier; // Supplies ScatterGatherBackingStore instances.\nClass FileBasedScatterGatherBackingStore; // ScatterGatherBackingStore that is backed by a path.\n", "des": "Provides common API classes for parallel compression features."}
{"index": 467, "repo": "jackson-core-2.15.2", "code": "Package: format\n\nClasses and Interfaces: \nInterface InputAccessor; // Interface used to expose beginning of a data file to data format detection code.\nClass DataFormatDetector; // Simple helper class that allows data format (content type) auto-detection, given an ordered set of JsonFactory instances to use for actual low-level detection.\nClass DataFormatMatcher; // Result object constructed by DataFormatDetector when requested to detect format of given input data.\nClass InputAccessor.Std; // Basic implementation that reads data from given InputStream and buffers it as necessary.\nEnum MatchStrength; // Enumeration used to indicate strength of match between data format and piece of data (typically beginning of a data file).\n", "des": "Package that contains interfaces needed for dynamic, pluggable format (auto)detection; as well as basic utility classes for simple format detection functionality."}
{"index": 78, "repo": "ignite-core-2.15.0", "code": "Package: noop\n\nClasses and Interfaces: \nClass NoopIndexingSpi; // Default implementation of IndexingSpi which does not index cache.\n", "des": "Contains default no-op indexing SPI implementation."}
{"index": 3227, "repo": "commons-configuration2-2.9.0", "code": "Package: xpath\n\nClasses and Interfaces: \nClass ConfigurationNodePointerFactory; // Implementation of the NodePointerFactory interface for configuration nodes.\nClass XPathExpressionEngine; // A specialized implementation of the ExpressionEngine interface that is able to evaluate XPATH expressions.\n", "des": "This package contains the XPathExpressionEngine class which enables XPATH support for querying configuration properties."}
{"index": 602, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: bundle\n\nClasses and Interfaces: \nInterface CollisionHook; // OSGi Framework Bundle Collision Hook Service.\nInterface EventHook; // OSGi Framework Bundle Event Hook Service.\nInterface FindHook; // OSGi Framework Bundle Context Hook Service.\n", "des": "Framework Bundle Hooks Package Version 1.1."}
{"index": 868, "repo": "calcite-core-1.34.0", "code": "Package: implicit\n\nClasses and Interfaces: \nInterface TypeCoercion; // Default strategies to coerce differing types that participate in operations into compatible ones.\nInterface TypeCoercionFactory; // Factory for TypeCoercion objects.\nClass AbstractTypeCoercion; // Base class for all the type coercion rules.\nClass TypeCoercionImpl; // Default implementation of Calcite implicit type cast.\nClass TypeCoercions; // Factory class for type coercion instantiation of different sql dialects.\n", "des": "SQL Implicit Type Cast"}
{"index": 2799, "repo": "spring-amqp-3.0.6", "code": "Package: postprocessor\n\nClasses and Interfaces: \npublic abstract class AbstractCompressingPostProcessor extends Object implements MessagePostProcessor, org.springframework.core.Ordered; // Base class for post processors that compress the message body.\npublic abstract class AbstractDecompressingPostProcessor extends Object implements MessagePostProcessor, org.springframework.core.Ordered; // Base class for post processors that decompress the message body if the MessageProperties.SPRING_AUTO_DECOMPRESS header is true or to optionally always decompress if the content encoding matches AbstractDecompressingPostProcessor.getEncoding(), or starts with AbstractDecompressingPostProcessor.getEncoding() + \":\", in which case the encoding following the colon becomes the final content encoding of the decompressed message.\npublic abstract class AbstractDeflaterPostProcessor extends AbstractCompressingPostProcessor; // Base class for post processors based on Deflater.\npublic class DeflaterPostProcessor extends AbstractDeflaterPostProcessor; // A post processor that uses a DeflaterOutputStream to compress the message body.\npublic class DelegatingDecompressingPostProcessor extends Object implements MessagePostProcessor, org.springframework.core.Ordered; // A MessagePostProcessor that delegates to one of its MessagePostProcessors depending on the content encoding.\npublic class GUnzipPostProcessor extends AbstractDecompressingPostProcessor; // A post processor that uses a GZIPInputStream to decompress the message body.\npublic class GZipPostProcessor extends AbstractDeflaterPostProcessor; // A post processor that uses a GZIPOutputStream to compress the message body.\npublic class InflaterPostProcessor extends AbstractDecompressingPostProcessor; // A post processor that uses a InflaterInputStream to decompress the message body.\npublic final class MessagePostProcessorUtils extends Object; // Utilities for message post processors.\npublic class UnzipPostProcessor extends AbstractDecompressingPostProcessor; // A post processor that uses a ZipInputStream to decompress the message body.\npublic class ZipPostProcessor extends AbstractDeflaterPostProcessor; // A post processor that uses a ZipOutputStream to compress the message body.\n", "des": "Package for Spring AMQP message post processors."}
{"index": 3025, "repo": "spring-web-6.0.11", "code": "Package: context\n\nSub Packages: \npackage context.annotation; // Provides convenience annotations for web scopes.\npackage context.request; // Support for generic request context holding, in particular for scoping of application objects per HTTP request or HTTP session.\npackage context.support; // Classes supporting the org.springframework.web.context package, such as WebApplicationContext implementations and various utility classes.\n\nClasses and Interfaces: \npublic abstract class AbstractContextLoaderInitializer extends Object implements WebApplicationInitializer; // Convenient base class for WebApplicationInitializer implementations that register a ContextLoaderListener in the servlet context.\npublic interface ConfigurableWebApplicationContext extends WebApplicationContext, org.springframework.context.ConfigurableApplicationContext; // Interface to be implemented by configurable web application contexts.\npublic interface ConfigurableWebEnvironment extends org.springframework.core.env.ConfigurableEnvironment; // Specialization of ConfigurableEnvironment allowing initialization of servlet-related PropertySource objects at the earliest moment that the ServletContext and (optionally) ServletConfig become available.\npublic class ContextCleanupListener extends Object implements ServletContextListener; // Web application listener that cleans up remaining disposable attributes in the ServletContext, i.e.\npublic class ContextLoader extends Object; // Performs the actual initialization work for the root application context.\npublic class ContextLoaderListener extends ContextLoader implements ServletContextListener; // Bootstrap listener to start up and shut down Spring's root WebApplicationContext.\npublic interface ServletConfigAware extends org.springframework.beans.factory.Aware; // Interface to be implemented by any object that wishes to be notified of the ServletConfig (typically determined by the WebApplicationContext) that it runs in.\npublic interface ServletContextAware extends org.springframework.beans.factory.Aware; // Interface to be implemented by any object that wishes to be notified of the ServletContext (typically determined by the WebApplicationContext) that it runs in.\npublic interface WebApplicationContext extends org.springframework.context.ApplicationContext; // Interface to provide configuration for a web application.\n", "des": "Contains a variant of the application context interface for web applications, and the ContextLoaderListener that bootstraps a root web application context."}
{"index": 2489, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: client\n\nClasses and Interfaces: \n@AutoConfiguration(after={ObservationAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration.class,org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.observation.Observation.class) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @Import({org.springframework.boot.actuate.autoconfigure.observation.web.client.RestTemplateObservationConfiguration.class,org.springframework.boot.actuate.autoconfigure.observation.web.client.WebClientObservationConfiguration.class}) @EnableConfigurationProperties({MetricsProperties.class,ObservationProperties.class}) public class HttpClientObservationsAutoConfiguration extends Object; // Auto-configuration for HTTP client-related observations.\n", "des": "Auto-configuration for web client observation support."}
{"index": 2691, "repo": "spring-integration-http-6.1.2", "code": "Package: http\n\nSub Packages: \npackage http.config; // Provides classes for configuration - parsers, namespace handlers.\npackage http.converter; // Provides classes supporting message conversion.\npackage http.dsl; // Provides HTTP Components support for Spring Integration Java DSL.\npackage http.inbound; // Provides classes supporting inbound endpoints.\npackage http.management; // Provides classes related to management support.\npackage http.multipart; // Provides classes supporting multipart HTTP requests.\npackage http.outbound; // Provides classes supporting outbound endpoints.\npackage http.support; // Provides classes to support Http endpoints, including header mapping.\n\nClasses and Interfaces: \npublic abstract class HttpHeaders extends Object;\n", "des": "Base package for Http support."}
{"index": 1086, "repo": "graal-sdk-1.0.0-rc7", "code": "Package: io\n\nClasses and Interfaces: \nInterface ByteSequence; // A ByteSequence is a readable sequence of byte values.\nInterface FileSystem; // Service-provider for Truffle files.\n", "des": "Input/Output support for the Graal-SDK polyglot API."}
{"index": 3745, "repo": "lucene-queryparser-9.7.0", "code": "Package: parser\n\nClasses and Interfaces: \nInterface StandardSyntaxParserConstants; // Token literal values and constants.\nClass EscapeQuerySyntaxImpl; // Implementation of EscapeQuerySyntax for the standard lucene syntax.\nClass StandardSyntaxParser; // Parser for the standard Lucene syntax\nClass StandardSyntaxParserTokenManager; // Token Manager.\nClass Token; // Describes the input token stream.\nClass ParseException; // This exception is thrown when parse errors are encountered.\nClass TokenMgrError; // Token Manager Error.\n", "des": "Lucene Query Parser"}
{"index": 3183, "repo": "tomcat-api-10.1", "code": "Package: dbcp2\n\nSub Packages: \npackage dbcp2.cpdsadapter; // This package contains one public class which is a ConnectionPoolDataSource (CPDS) implementation that can be used to adapt older Driver based JDBC implementations.\npackage dbcp2.datasources; // This package contains two DataSources: PerUserPoolDataSource and SharedPoolDataSource which provide a database connection pool.\npackage dbcp2.managed; // This package provides support for pooling of ManagedConnections.\n\nClasses and Interfaces: \nInterface BasicDataSourceMXBean; // Interface to keep API compatibility.\nInterface ConnectionFactory; // Abstract factory interface for creating Connections.\nInterface DataSourceMXBean; // Defines the methods that will be made available via JMX.\nInterface PoolableConnectionMXBean; // Defines the attributes and methods that will be exposed via JMX for PoolableConnection instances.\nClass AbandonedTrace; // Tracks connection usage for recovering and reporting abandoned connections.\nClass BasicDataSource; // Basic implementation of javax.sql.DataSource that is configured via JavaBeans properties.\nClass BasicDataSourceFactory; // JNDI object factory that creates an instance of BasicDataSource that has been configured based on the RefAddr values of the specified Reference, which must match the names and data types of the BasicDataSource bean properties with the following exceptions: connectionInitSqls must be passed to this factory as a single String using semicolon to delimit the statements whereas BasicDataSource requires a collection of Strings.\nClass Constants; // Constants.\nClass DataSourceConnectionFactory; // A DataSource-based implementation of ConnectionFactory.\nClass DelegatingCallableStatement; // A base delegating implementation of CallableStatement.\nClass DelegatingConnection<C extends Connection>; // A base delegating implementation of Connection.\nClass DelegatingDatabaseMetaData; // A base delegating implementation of DatabaseMetaData.\nClass DelegatingPreparedStatement; // A base delegating implementation of PreparedStatement.\nClass DelegatingResultSet; // A base delegating implementation of ResultSet.\nClass DelegatingStatement; // A base delegating implementation of Statement.\nClass DriverConnectionFactory; // A Driver-based implementation of ConnectionFactory.\nClass DriverManagerConnectionFactory; // A DriverManager-based implementation of ConnectionFactory.\n", "des": "Database Connection Pool API."}
{"index": 1318, "repo": "groovy-all-4.0.13", "code": "Package: dom\n\nClasses and Interfaces: \npublic class DOMCategory extends Object; // Category class which adds GPath style operations to Java's DOM classes.\n", "des": "Groovy XML Dom processing classes."}
{"index": 1803, "repo": "spring-aop-6.0.11", "code": "Package: config\n\nClasses and Interfaces: \npublic abstract class AbstractInterceptorDrivenBeanDefinitionDecorator extends Object implements org.springframework.beans.factory.xml.BeanDefinitionDecorator; // Base implementation for BeanDefinitionDecorators wishing to add an interceptor to the resulting bean.\npublic class AdviceEntry extends Object implements org.springframework.beans.factory.parsing.ParseState.Entry; // ParseState entry representing an advice element.\npublic class AdvisorComponentDefinition extends org.springframework.beans.factory.parsing.AbstractComponentDefinition; // ComponentDefinition that bridges the gap between the advisor bean definition configured by the <aop:advisor> tag and the component definition infrastructure.\npublic class AdvisorEntry extends Object implements org.springframework.beans.factory.parsing.ParseState.Entry; // ParseState entry representing an advisor.\npublic abstract class AopConfigUtils extends Object; // Utility class for handling registration of AOP auto-proxy creators.\npublic class AopNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for the aop namespace.\npublic abstract class AopNamespaceUtils extends Object; // Utility class for handling registration of auto-proxy creators used internally by the 'aop' namespace tags.\npublic class AspectComponentDefinition extends org.springframework.beans.factory.parsing.CompositeComponentDefinition; // ComponentDefinition that holds an aspect definition, including its nested pointcuts.\npublic class AspectEntry extends Object implements org.springframework.beans.factory.parsing.ParseState.Entry; // ParseState entry representing an aspect.\npublic class MethodLocatingFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Method>, org.springframework.beans.factory.BeanFactoryAware; // FactoryBean implementation that locates a Method on a specified bean.\npublic class PointcutComponentDefinition extends org.springframework.beans.factory.parsing.AbstractComponentDefinition; // ComponentDefinition implementation that holds a pointcut definition.\npublic class PointcutEntry extends Object implements org.springframework.beans.factory.parsing.ParseState.Entry; // ParseState entry representing a pointcut.\n", "des": "Support package for declarative AOP configuration, with XML schema being the primary configuration format."}
{"index": 1736, "repo": "spring-jdbc-6.0.11", "code": "Package: lob\n\nClasses and Interfaces: \npublic abstract class AbstractLobHandler extends Object implements LobHandler; // Abstract base class for LobHandler implementations.\npublic class DefaultLobHandler extends AbstractLobHandler; // Default implementation of the LobHandler interface.\npublic interface LobCreator extends Closeable; // Interface that abstracts potentially database-specific creation of large binary fields and large text fields.\npublic interface LobHandler; // Abstraction for handling large binary fields and large text fields in specific databases, no matter if represented as simple types or Large OBjects.\npublic class TemporaryLobCreator extends Object implements LobCreator; // LobCreator implementation based on temporary LOBs, using JDBC 4.0's Connection.createBlob() / Connection.createClob() mechanism.\n", "des": "Provides a strategy interface for Large OBject handling, as well as a customizable default implementation."}
{"index": 656, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: security\n\nClasses and Interfaces: \nClass TimelineAuthenticationFilter; // Timeline authentication filter provides delegation token support for ATSv1 and ATSv2.\nClass TimelineAuthenticationFilterInitializer; // Initializes TimelineAuthenticationFilter which provides support for Kerberos HTTP SPNEGO authentication.\nClass TimelineDelgationTokenSecretManagerService; // Abstract implementation of delegation token manager service for different versions of timeline service.\n", "des": "Package org.apache.hadoop.server.timeline.security contains classes related to timeline authentication filters and abstract delegation token service for ATSv1 and ATSv2."}
{"index": 638, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: policies\n\nSub Packages: \npackage policies.amrmproxy; // AMRMPRoxy policies.\npackage policies.dao; // DAO objects for serializing/deserializing policy configurations.\npackage policies.exceptions; // Exceptions for policies.\npackage policies.manager; // Various implementation of FederationPolicyManager.\npackage policies.router; // Router policies.\n\nClasses and Interfaces: \nInterface ConfigurableFederationPolicy; // This interface provides a general method to reinitialize a policy.\nClass AbstractConfigurableFederationPolicy; // Base abstract class for a weighted ConfigurableFederationPolicy.\nClass FederationPolicyInitializationContext; // Context to (re)initialize a FederationAMRMProxyPolicy and FederationRouterPolicy.\nClass FederationPolicyInitializationContextValidator; // Helper class used to factor out common validation steps for policies.\nClass FederationPolicyUtils; // Utility class for Federation policy.\nClass RouterPolicyFacade; // This class provides a facade to the policy subsystem, and handles the lifecycle of policies (e.g., refresh from remote, default behaviors etc.).\n", "des": "Federation Policies."}
{"index": 1354, "repo": "spring-tx-6.0.11", "code": "Package: dao\n\nSub Packages: \npackage dao.annotation; // Annotation support for DAOs.\npackage dao.support; // Support classes for DAO implementations, providing miscellaneous utility methods.\n\nClasses and Interfaces: \npublic class CannotAcquireLockException extends PessimisticLockingFailureException; // Exception thrown on failure to acquire a lock during an update, for example during a \"select for update\" statement.\n@Deprecated(since=\"6.0.3\") public class CannotSerializeTransactionException extends PessimisticLockingFailureException;\n@Deprecated(since=\"6.0.3\") public class CleanupFailureDataAccessException extends NonTransientDataAccessException;\npublic class ConcurrencyFailureException extends TransientDataAccessException; // Exception thrown on various data access concurrency failures.\npublic abstract class DataAccessException extends org.springframework.core.NestedRuntimeException; // Root of the hierarchy of data access exceptions discussed in Expert One-On-One J2EE Design and Development.\npublic class DataAccessResourceFailureException extends NonTransientDataAccessResourceException; // Data access exception thrown when a resource fails completely: for example, if we can't connect to a database using JDBC.\npublic class DataIntegrityViolationException extends NonTransientDataAccessException; // Exception thrown when an attempt to insert or update data results in violation of an integrity constraint.\npublic class DataRetrievalFailureException extends NonTransientDataAccessException; // Exception thrown if certain expected data could not be retrieved, e.g.\n@Deprecated(since=\"6.0.3\") public class DeadlockLoserDataAccessException extends PessimisticLockingFailureException;\npublic class DuplicateKeyException extends DataIntegrityViolationException; // Exception thrown when an attempt to insert or update data results in violation of a primary key or unique constraint.\npublic class EmptyResultDataAccessException extends IncorrectResultSizeDataAccessException; // Data access exception thrown when a result was expected to have at least one row (or element) but zero rows (or elements) were actually returned.\npublic class IncorrectResultSizeDataAccessException extends DataRetrievalFailureException; // Data access exception thrown when a result was not of the expected size, for example when expecting a single row but getting 0 or more than 1 rows.\npublic class IncorrectUpdateSemanticsDataAccessException extends InvalidDataAccessResourceUsageException; // Data access exception thrown when something unintended appears to have happened with an update, but the transaction hasn't already been rolled back.\n", "des": "Exception hierarchy enabling sophisticated error handling independent of the data access approach in use."}
{"index": 3695, "repo": "solr-core-9.3.0", "code": "Package: command\n\nClasses and Interfaces: \nClass QueryCommand;\nClass QueryCommand.Builder;\nClass QueryCommandResult; // Encapsulates TopDocs and the number of matches.\nClass SearchGroupsFieldCommand; // Creates all the collectors needed for the first phase and how to handle the results.\nClass SearchGroupsFieldCommand.Builder;\nClass SearchGroupsFieldCommandResult; // Encapsulates the result of a SearchGroupsFieldCommand command\nClass TopGroupsFieldCommand; // Defines all collectors for retrieving the second phase and how to handle the collector result.\nClass TopGroupsFieldCommand.Builder;\n", "des": "Internal classes used to implement distributed result grouping"}
{"index": 390, "repo": "hbase-mapreduce-3.0.0-alpha-4", "code": "Package: mapred\n\nClasses and Interfaces: \nInterface TableMap<K extends org.apache.hadoop.io.WritableComparable<? super K>,V>; // Scan an HBase table to sort by a specified sort column.\nInterface TableReduce<K extends org.apache.hadoop.io.WritableComparable,V>; // Write a table, sorting by the input key\nClass Driver; // Driver for hbase mapreduce jobs.\nClass GroupingTableMap; // Extract grouping columns from input record\nClass HRegionPartitioner<K2,V2>; // This is used to partition the output keys into groups of keys.\nClass IdentityTableMap; // Pass the given key and record as-is to reduce\nClass IdentityTableReduce; // Write to table each key, record pair\nClass MultiTableSnapshotInputFormat; // MultiTableSnapshotInputFormat generalizes TableSnapshotInputFormat allowing a MapReduce job to run over one or more table snapshots, with one or more scans configured for each.\nClass RowCounter; // A job with a map to count rows.\nClass TableInputFormat; // Convert HBase tabular data into a format that is consumable by Map/Reduce.\nClass TableInputFormatBase; // A Base for TableInputFormats.\nClass TableMapReduceUtil; // Utility for TableMap and TableReduce\nClass TableOutputFormat; // Convert Map/Reduce output and write it to an HBase table\nClass TableOutputFormat.TableRecordWriter; // Convert Reduce output (key, value) to (HStoreKey, KeyedDataArrayWritable) and write to an HBase table.\nClass TableRecordReader; // Iterate over an HBase table data, return (Text, RowResult) pairs\nClass TableRecordReaderImpl; // Iterate over an HBase table data, return (Text, RowResult) pairs\nClass TableSnapshotInputFormat; // TableSnapshotInputFormat allows a MapReduce job to run over a table snapshot.\nClass TableSnapshotInputFormat.TableSnapshotRegionSplit;\nClass TableSplit; // A table split corresponds to a key range [low, high)\n", "des": "Provides HBase MapReduce Input/OutputFormats, a table indexing MapReduce job, and utility methods."}
{"index": 2587, "repo": "spring-rabbit-3.0.6", "code": "Package: config\n\nClasses and Interfaces: \npublic abstract class AbstractExchangeParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\npublic abstract class AbstractRabbitListenerContainerFactory<C extends AbstractMessageListenerContainer> extends BaseRabbitListenerContainerFactory<C> implements org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationEventPublisherAware; // RabbitListenerContainerFactory for Spring's base container implementation.\npublic abstract class AbstractRetryOperationsInterceptorFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.aopalliance.aop.Advice>; // Convenient base class for interceptor factories.\npublic abstract class BaseRabbitListenerContainerFactory<C extends MessageListenerContainer> extends Object implements RabbitListenerContainerFactory<C>, org.springframework.context.ApplicationContextAware; // Base abstract class for listener container factories.\npublic class BindingFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.amqp.core.Binding>;\npublic class CompositeContainerCustomizer<C extends MessageListenerContainer> extends Object implements ContainerCustomizer<C>; // Implementation of ContainerCustomizer providing the configuration of multiple customizers at the same time.\n@FunctionalInterface public interface ContainerCustomizer<C extends MessageListenerContainer>; // Called by the container factory after the container is created and configured.\npublic class DirectExchangeParser extends AbstractExchangeParser;\npublic class DirectRabbitListenerContainerFactory extends AbstractRabbitListenerContainerFactory<DirectMessageListenerContainer>; // A RabbitListenerContainerFactory implementation to build a regular DirectMessageListenerContainer.\npublic class FanoutExchangeParser extends AbstractExchangeParser;\npublic class HeadersExchangeParser extends AbstractExchangeParser;\npublic class ListenerContainerFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<AbstractMessageListenerContainer> implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.SmartLifecycle; // A Factory bean to create a listener container.\npublic static enum ListenerContainerFactoryBean.Type extends Enum<ListenerContainerFactoryBean.Type>; // The container type.\n", "des": "Provides classes supporting the Rabbit XML namespace."}
{"index": 3217, "repo": "commons-configuration2-2.9.0", "code": "Package: event\n\nClasses and Interfaces: \nInterface EventListener<T extends Event>; // Definition of a generic event listener interface.\nInterface EventSource; // An interface for configuration implementations which support registration of event listeners.\nClass BaseEventSource; // A base class for objects that can generate configuration events.\nClass ConfigurationErrorEvent; // An event class that is used for reporting errors that occurred while processing configuration properties.\nClass ConfigurationEvent; // An event class for reporting updates on a configuration object.\nClass Event; // The base class for all events generated by this library.\nClass EventListenerList; // A class for managing event listeners for an event source.\nClass EventListenerList.EventListenerIterator<T extends Event>; // A special Iterator implementation used by the getEventListenerIterator() method.\nClass EventListenerRegistrationData<T extends Event>; // A data class holding information about an event listener registration.\nClass EventType<T extends Event>; // A class representing an event type.\n", "des": "This package contains interfaces and classes for receiving notifications about changes at configurations."}
{"index": 277, "repo": "pdfbox-3.0.0-beta1", "code": "Package: graphics\n\nClasses and Interfaces: \nClass AppendRectangleToPath; // re Appends a rectangle to the path.\nClass BeginInlineImage; // BI Begins an inline image.\nClass ClipEvenOddRule; // W* Set clipping path using even odd rule.\nClass ClipNonZeroRule; // W Set the clipping path using non zero winding rule.\nClass CloseAndStrokePath; // s: close and stroke the path.\nClass CloseFillEvenOddAndStrokePath; // b* Close, fill and stroke the path with even-odd winding rule.\nClass CloseFillNonZeroAndStrokePath; // b Close, fill and stroke the path with non-zero winding rule.\nClass ClosePath; // h Close the path.\nClass CurveTo; // c Append curved segment to path.\nClass CurveToReplicateFinalPoint; // y Append curved segment to path with final point replicated.\nClass CurveToReplicateInitialPoint; // v Append curved segment to path with the initial point replicated.\nClass DrawObject; // Do: Draws an XObject.\nClass EndPath; // n End the path.\nClass FillEvenOddAndStrokePath; // B* Fill and then stroke the path, using the even-odd rule to determine the region to fill.\nClass FillEvenOddRule; // f* Fill path using even odd rule.\nClass FillNonZeroAndStrokePath; // B Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill.\nClass FillNonZeroRule; // f Fill path using non zero winding rule.\nClass GraphicsOperatorProcessor; // Base class for graphics operators.\nClass LegacyFillNonZeroRule; // F Fill path using non zero winding rule.\nClass LineTo; // l Append straight line segment to path.\nClass MoveTo; // m Begins a new subpath.\nClass ShadingFill; // sh Fills the clipping area with the given shading pattern.\nClass StrokePath; // S Stroke the path.\n", "des": "This package contains implementations of all of the PDF graphics operators."}
{"index": 2922, "repo": "groovy-4.0.13", "code": "Package: util\n\nClasses and Interfaces: \npublic abstract class AbstractFactory extends Object implements Factory;\npublic interface BufferedIterator<T> extends Iterator<T>; // An iterator that allows examining the next element without consuming it.\npublic abstract class BuilderSupport extends GroovyObjectSupport; // Base class for creating arbitrary nested trees of objects or events.\npublic class CharsetToolkit extends Object; // Utility class to guess the encoding of a given text file.\npublic class ClosureComparator<T> extends Object implements Comparator<T>, Serializable; // A Comparator which uses a closure to compare 2 values being equal\npublic class ConfigObject extends GroovyObjectSupport implements Writable, Map, Cloneable; // A ConfigObject at a simple level is a Map that creates configuration entries (other ConfigObjects) when referencing them.\npublic abstract class DelegatingScript extends Script; // Script that performs method invocations and property access like Closure does.\npublic class Eval extends Object; // Allow easy integration from Groovy into Java through convenience methods.\npublic class Expando extends GroovyObjectSupport; // Represents a dynamically expandable bean.\npublic interface Factory;\npublic abstract class FactoryBuilderSupport extends Binding; // Mix of BuilderSupport and SwingBuilder's factory support.\npublic class GroovyCollections extends Object; // A Collections utility class\npublic class GroovyScriptEngine extends Object implements ResourceConnector; // Specific script engine able to reload modified scripts as well as dealing properly with dependent scripts.\npublic interface IFileNameFinder;\npublic class IndentPrinter extends Object; // A helper class for printing indented text.\npublic class MapEntry extends Object implements Map.Entry; // A Map.Entry implementation.\npublic class Node extends Object implements Serializable, Cloneable; // Represents an arbitrary tree node which can be used for structured metadata or any arbitrary XML-like tree.\npublic class NodeBuilder extends BuilderSupport; // A helper class for creating nested trees of Node objects for handling arbitrary data\npublic class NodeList extends ArrayList; // A List implementation which is returned by queries on a Node which provides some XPath like helper methods for GPath.\npublic class NodePrinter extends Object; // A helper class for creating nested trees of data\npublic class ObjectGraphBuilder extends FactoryBuilderSupport; // A builder for creating object graphs. Each node defines the class to be created and the property on its parent (if any) at the same time.\n", "des": "Various Groovy utilities for working with nodes, builders, logging, and other things."}
{"index": 61, "repo": "ignite-core-2.15.0", "code": "Package: stream\n\nSub Packages: \npackage stream.socket; // Contains socket streamer implementation.\n\nClasses and Interfaces: \nInterface StreamMultipleTupleExtractor<T,K,V>; // Stream tuple extractor to convert a single message to zero, one or many tuples.\nInterface StreamReceiver<K,V>; // Updates cache with batch of entries.\nInterface StreamSingleTupleExtractor<T,K,V>; // Stream tuple extractor to convert a message to a single Ignite key-value tuple.\nInterface StreamTupleExtractor<T,K,V>; // Will be removed in 2.0.0.\nClass StreamAdapter<T,K,V>; // Convenience adapter for streamers.\nClass StreamTransformer<K,V>; // Convenience adapter to transform update existing values in streaming cache based on the previously cached value.\nClass StreamVisitor<K,V>; // Convenience adapter to visit every key-value tuple in the stream.\n", "des": "Contains Ignite Streamer classes."}
{"index": 806, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: snowball\n\nClasses and Interfaces: \nClass SnowballFilter; // A filter that stems words using a Snowball-generated stemmer.\nClass SnowballPorterFilterFactory; // Factory for SnowballFilter, with configurable language\n", "des": "TokenFilter and Analyzer implementations that use Snowball stemmers."}
{"index": 879, "repo": "mahout-math-0.13.0", "code": "Package: function\n\nClasses and Interfaces: \nInterface ByteByteProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteCharProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteComparator; // A comparison function which imposes a total ordering on some collection of elements.\nInterface ByteDoubleProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteFloatProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteIntProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteLongProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteObjectProcedure<T>; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteProcedure; // Interface that represents a procedure object: a procedure that takes a single argument and does not return a value.\nInterface ByteShortProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharByteProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharCharProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharComparator; // A comparison function which imposes a total ordering on some collection of elements.\nInterface CharDoubleProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharFloatProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharIntProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharLongProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharObjectProcedure<T>; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\n", "des": "Core interfaces for functions, comparisons and procedures on objects and primitive data types."}
{"index": 1739, "repo": "spring-batch-integration-5.0.2", "code": "Package: async\n\nClasses and Interfaces: \npublic class AsyncItemProcessor<I,O> extends Object implements org.springframework.batch.item.ItemProcessor<I,Future<O>>, org.springframework.beans.factory.InitializingBean; // An ItemProcessor that delegates to a nested processor and in the background.\npublic class AsyncItemWriter<T> extends Object implements org.springframework.batch.item.ItemStreamWriter<Future<T>>, org.springframework.beans.factory.InitializingBean;\npublic class StepExecutionInterceptor extends Object implements org.springframework.messaging.support.ChannelInterceptor; // A ChannelInterceptor that adds the current StepExecution (if there is one) as a header to the message.\n", "des": "Components for executing item processing asynchronously and writing the results when processing is complete."}
{"index": 93, "repo": "ignite-core-2.15.0", "code": "Package: ipfinder\n\nSub Packages: \npackage ipfinder.jdbc; // Contains JDBC IP finder implementation.\npackage ipfinder.multicast; // Contains multicast-based IP finder.\npackage ipfinder.sharedfs; // Contains shared filesystem-based IP finder.\npackage ipfinder.vm; // Contains local JVM-based IP finder.\n\nClasses and Interfaces: \nInterface TcpDiscoveryIpFinder; // IP finder interface for TcpDiscoverySpi.\nClass TcpDiscoveryIpFinderAdapter; // IP finder interface implementation adapter.\n", "des": "Contains IP finder interface and adapter."}
{"index": 3859, "repo": "lucene-core-9.7.0", "code": "Package: hppc\n\nClasses and Interfaces: \nClass BitMixer; // Bit mixing utilities.\nClass IntIntHashMap; // A hash map of int to int, implemented using open addressing with linear probing for collision resolution.\nClass IntIntHashMap.AbstractIterator<E>; // Simplifies the implementation of iterators a bit.\nClass IntIntHashMap.BufferAllocationException; // BufferAllocationException forked from HPPC\n", "des": "package holding hppc related classes."}
{"index": 1436, "repo": "spring-boot-actuator-3.1.1", "code": "Package: exchanges\n\nSub Packages: \npackage exchanges.reactive; // Actuator HTTP exchanges support for reactive servers.\npackage exchanges.servlet; // Actuator HTTP exchanges support for servlet servers.\n\nClasses and Interfaces: \npublic final class HttpExchange extends Object; // An HTTP request and response exchange.\npublic static final class HttpExchange.Principal extends Object; // Principal associated with an HTTP request-response exchange.\npublic static final class HttpExchange.Request extends Object; // The request that started the exchange.\npublic static final class HttpExchange.Response extends Object; // The response that finished the exchange.\npublic static final class HttpExchange.Session extends Object; // The session associated with the exchange.\npublic static final class HttpExchange.Started extends Object; // A started request that when finished will return a new HttpExchange instance.\npublic interface HttpExchangeRepository; // A repository for HttpExchange instances.\n@Endpoint(id=\"httpexchanges\") public class HttpExchangesEndpoint extends Object; // @Endpoint to expose HttpExchange information.\npublic static final class HttpExchangesEndpoint.HttpExchangesDescriptor extends Object implements OperationResponseBody; // Description of an application's HttpExchange entries.\npublic enum Include extends Enum<Include>; // Include options for HTTP exchanges.\npublic class InMemoryHttpExchangeRepository extends Object implements HttpExchangeRepository; // In-memory implementation of HttpExchangeRepository.\npublic interface RecordableHttpRequest; // The recordable parts of an HTTP request used when creating an HttpExchange.\npublic interface RecordableHttpResponse; // The recordable parts of an HTTP response used when creating an HttpExchange.\n", "des": "Actuator HTTP exchanges support."}
{"index": 2724, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: jms\n\nSub Packages: \npackage jms.builder; // Builders for JMS item reader and writer.\n\nClasses and Interfaces: \npublic class JmsItemReader<T> extends Object implements ItemReader<T>, org.springframework.beans.factory.InitializingBean; // An ItemReader for JMS using a JmsTemplate.\npublic class JmsItemWriter<T> extends Object implements ItemWriter<T>; // An ItemWriter for JMS using a JmsTemplate.\npublic class JmsMethodArgumentsKeyGenerator extends Object implements org.springframework.retry.interceptor.MethodArgumentsKeyGenerator; // A MethodArgumentsKeyGenerator for JMS\npublic class JmsMethodInvocationRecoverer<T> extends Object implements org.springframework.retry.interceptor.MethodInvocationRecoverer<T>;\npublic class JmsNewMethodArgumentsIdentifier<T> extends Object implements org.springframework.retry.interceptor.NewMethodArgumentsIdentifier; // A NewMethodArgumentsIdentifier for JMS that looks for a message in the arguments and checks its delivery status.\n", "des": "JMS based reader/writer and related components."}
{"index": 3821, "repo": "lucene-analysis-common-9.7.0", "code": "Package: th\n\nClasses and Interfaces: \nClass ThaiAnalyzer; // Analyzer for Thai language.\nClass ThaiTokenizer; // Tokenizer that use BreakIterator to tokenize Thai text.\nClass ThaiTokenizerFactory; // Factory for ThaiTokenizer.\n", "des": "Analyzer for Thai."}
{"index": 2782, "repo": "spring-security-ldap-6.1.2", "code": "Package: server\n\nClasses and Interfaces: \n@Deprecated public class ApacheDSContainer extends Object implements EmbeddedLdapServerContainer, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, org.springframework.context.Lifecycle, org.springframework.context.ApplicationContextAware;\npublic interface EmbeddedLdapServerContainer; // Provides lifecycle services for an embedded LDAP server.\npublic class UnboundIdContainer extends Object implements EmbeddedLdapServerContainer, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, org.springframework.context.Lifecycle, org.springframework.context.ApplicationContextAware;\n", "des": "Embedded Apache Directory Server implementation, as used by the configuration namespace."}
{"index": 763, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: ckb\n\nClasses and Interfaces: \nClass SoraniAnalyzer; // Analyzer for Sorani Kurdish.\nClass SoraniNormalizationFilter; // A TokenFilter that applies SoraniNormalizer to normalize the orthography.\nClass SoraniNormalizationFilterFactory; // Factory for SoraniNormalizationFilter.\nClass SoraniNormalizer; // Normalizes the Unicode representation of Sorani text.\nClass SoraniStemFilter; // A TokenFilter that applies SoraniStemmer to stem Sorani words.\nClass SoraniStemFilterFactory; // Factory for SoraniStemFilter.\nClass SoraniStemmer; // Light stemmer for Sorani\n", "des": "Analyzer for Sorani Kurdish."}
{"index": 482, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: metrics\n\nClasses and Interfaces: \nInterface Counter; // A metric that reports a single long value and can be incremented or decremented.\nInterface Distribution; // A metric that reports information about the distribution of reported values.\nInterface Gauge; // A metric that reports the latest value out of reported values.\nInterface Histogram; // A metric that reports information about the histogram of reported values.\nInterface Metric; // Marker interface for all user-facing metrics.\nInterface MetricsContainer; // Holds the metrics for a single step.\nInterface MetricsEnvironment.MetricsEnvironmentState; // Set the MetricsContainer for the associated MetricsEnvironment.\nInterface MetricsOptions; // Extension of PipelineOptions that defines MetricsSink specific options.\nInterface MetricsSink; // Interface for all metric sinks.\nClass DelegatingCounter; // Implementation of Counter that delegates to the instance for the current context.\nClass DelegatingDistribution; // Implementation of Distribution that delegates to the instance for the current context.\nClass DelegatingHistogram; // Implementation of Histogram that delegates to the instance for the current context.\nClass DistributionResult; // The result of a Distribution metric.\nClass GaugeResult; // The result of a Gauge metric.\nClass GaugeResult.EmptyGaugeResult; // Empty GaugeResult, representing no values reported.\nClass MetricFiltering; // Implements matching for metrics filters.\nClass MetricKey; // Metrics are keyed by the step name they are associated with and the name of the metric.\nClass MetricName; // The name of a metric consists of a MetricName.getNamespace() and a MetricName.getName().\nClass MetricNameFilter; // The name of a metric.\nClass MetricQueryResults; // The results of a query for metrics.\nClass MetricResult<T>; // The results of a single current metric.\nClass MetricResults; // Methods for interacting with the metrics of a pipeline that has been executed.\nClass Metrics; // The Metrics is a utility class for producing various kinds of metrics for reporting properties of an executing pipeline.\nClass MetricsEnvironment; // Manages and provides the metrics container associated with each thread.\nClass MetricsEnvironment.MetricsContainerHolder;\nClass MetricsFilter; // Simple POJO representing a filter for querying metrics.\nClass MetricsFilter.Builder; // Builder for creating a MetricsFilter.\n", "des": "Metrics allow exporting information about the execution of a pipeline."}
{"index": 1362, "repo": "spring-tx-6.0.11", "code": "Package: event\n\nClasses and Interfaces: \npublic interface TransactionalApplicationListener<E extends org.springframework.context.ApplicationEvent> extends org.springframework.context.ApplicationListener<E>, org.springframework.core.Ordered; // An ApplicationListener that is invoked according to a TransactionPhase.\npublic static interface TransactionalApplicationListener.SynchronizationCallback; // Callback to be invoked on synchronization-driven event processing, wrapping the target listener invocation (TransactionalApplicationListener.processEvent(E)).\npublic class TransactionalApplicationListenerAdapter<E extends org.springframework.context.ApplicationEvent> extends Object implements TransactionalApplicationListener<E>, org.springframework.core.Ordered; // TransactionalApplicationListener adapter that delegates the processing of an event to a target ApplicationListener instance.\npublic class TransactionalApplicationListenerMethodAdapter extends org.springframework.context.event.ApplicationListenerMethodAdapter implements TransactionalApplicationListener<org.springframework.context.ApplicationEvent>; // GenericApplicationListener adapter that delegates the processing of an event to a TransactionalEventListener annotated method.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @EventListener public @interface TransactionalEventListener; // An EventListener that is invoked according to a TransactionPhase.\npublic class TransactionalEventListenerFactory extends Object implements org.springframework.context.event.EventListenerFactory, org.springframework.core.Ordered; // EventListenerFactory implementation that handles TransactionalEventListener annotated methods.\npublic enum TransactionPhase extends Enum<TransactionPhase>; // The phase in which a transactional event listener applies.\n", "des": "Spring's support for listening to transaction events."}
{"index": 3471, "repo": "tomcat-jspapi-10.1", "code": "Package: el\n\nClasses and Interfaces: \nInterface FunctionMapper;\nInterface VariableResolver;\nClass Expression;\nClass ExpressionEvaluator;\nClass ImplicitObjectELResolver; // Provides resolution in EL for the implicit variables of a JSP page.\nClass ImportELResolver; // Providers resolution of imports and static imports in the Jakarta Server Pages ELResolver chain.\nClass NotFoundELResolver; // The final resolver of the Jakarta Server Pages ELResolver chain.\nClass ScopedAttributeELResolver; // An ELResolver for working with JSP scoped attributes which may have page, request, session or application scope.\nClass ELException;\nClass ELParseException;\n", "des": "Classes and interfaces for the JSP 2.0 Expression Language API."}
{"index": 3689, "repo": "solr-core-9.3.0", "code": "Package: facet\n\nClasses and Interfaces: \nInterface FieldUtil.OrdFunc; // The following ord visitors and wrappers are a work in progress and experimental\nInterface UnInvertedField.Callback;\nClass AggUtil;\nClass AggValueSource;\nClass AvgAgg;\nClass BlockJoin;\nClass Constants; // constants used in facets package\nClass CountAgg;\nClass CountValsAgg; // AggValueSource to count values for given ValueSource\nClass DocValuesAcc; // Accumulates stats separated by slot number for the fields with DocValues\nClass FacetBucket;\nClass FacetContext;\nClass FacetDebugInfo;\nClass FacetField;\nClass FacetFieldMerger;\nClass FacetHeatmap; // JSON Facet API request for a 2D spatial summary of a rectangular region.\nClass FacetMerger;\nClass FacetMerger.Context;\nClass FacetModule;\nClass FacetProcessor<T extends FacetRequest>; // Base abstraction for a class that computes facets.\nClass FacetQuery;\nClass FacetRange;\nClass FacetRangeMerger;\nClass FacetRequest; // A request to do facets/stats that might itself be composed of sub-FacetRequests.\nClass FacetRequest.Domain;\nClass FacetRequest.Domain.GraphField; // Are we doing a query time graph across other documents\nClass FacetRequest.Domain.JoinField; // Are we doing a query time join across other documents\nClass FacetRequest.FacetSort; // Simple structure for encapsulating a sort variable and a direction\nClass FieldUtil;\nClass FieldUtil.DVOrdValues;\nClass FieldUtil.FCOrdValues;\nClass FieldUtil.OrdValues;\nClass HLLAgg;\nClass HLLAgg.HLLFactory;\nClass LegacyFacet;\nClass LegacyFacet.Subfacet;\nClass MinMaxAgg;\nClass MissingAgg; // AggValueSource to compute missing counts for given ValueSource\nClass PercentileAgg;\nClass PercentileAgg.Parser;\nClass RelatednessAgg; // An aggregation function designed to be nested under other (possibly deeply nested) facets for the purposes of computing the \"relatedness\" of facet buckets relative to \"foreground\" and \"background\" sets -- primarily for the purpose of building \"Semantic Knowledge Graphs\"\nClass SimpleAggValueSource;\nClass SlotAcc; // Accumulates statistics separated by a slot number.\n", "des": "APIs and classes for the JSON Facet API."}
{"index": 460, "repo": "camel-core-3.0.0-RC1", "code": "Package: cluster\n\nClasses and Interfaces: \nInterface ClusteredRouteFilter;\nClass ClusteredRouteConfiguration;\nClass ClusteredRouteController;\nClass ClusteredRouteFilters;\nClass ClusteredRouteFilters.BlackList;\nClass ClusteredRouteFilters.IsAutoStartup;\nClass ClusteredRoutePolicy;\nClass ClusteredRoutePolicyFactory;\n", "des": "Base classes and implementation for Camel Cluster"}
{"index": 990, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: support\n\nClasses and Interfaces: \nClass DefaultStrategiesHelper; // Helper class for for loading default implementations of an interface.\nClass MarshallingUtils; // Helper class for endpoints and endpoint mappings that use marshalling.\nClass WebUtils; // Miscellaneous utilities for web applications.\n", "des": "Provides general helper classes for Spring Web Services."}
{"index": 3312, "repo": "opencms-core-15.0", "code": "Package: galleries\n\nClasses and Interfaces: \nClass CmsGalleryNameMacroResolver; // Macro resolver used to resolve macros for the gallery name mapping.\nClass CmsGallerySearch; // Contains the functions for the gallery search.\nClass CmsGallerySearchParameters; // Parameters used for the gallery search index.\nClass CmsGallerySearchResult;\nClass CmsGallerySearchResultList; // The search result list for the gallery search index.\nEnum CmsGallerySearchParameters.CmsGallerySortParam; // Sort parameter constants.\n", "des": "Implements the search functions for the OpenCms Gallery search index, which is used by the Advanced Direct Edit (ADE) functions."}
{"index": 3032, "repo": "spring-web-6.0.11", "code": "Package: filter\n\nSub Packages: \npackage filter.reactive; // WebFilter implementations for use in reactive web applications.\n\nClasses and Interfaces: \npublic abstract class AbstractRequestLoggingFilter extends OncePerRequestFilter; // Base class for Filters that perform logging operations before and after a request is processed.\npublic class CharacterEncodingFilter extends OncePerRequestFilter; // Servlet Filter that allows one to specify a character encoding for requests.\npublic class CommonsRequestLoggingFilter extends AbstractRequestLoggingFilter; // Simple request logging filter that writes the request URI (and optionally the query string) to the Commons Log.\npublic class CompositeFilter extends Object implements Filter; // A generic composite servlet Filter that just delegates its behavior to a chain (list) of user-supplied filters, achieving the functionality of a FilterChain, but conveniently using only Filter instances.\npublic class CorsFilter extends OncePerRequestFilter; // Filter to handle CORS pre-flight requests and intercept CORS simple and actual requests with a CorsProcessor, and to update the response, e.g.\npublic class DelegatingFilterProxy extends GenericFilterBean; // Proxy for a standard Servlet Filter, delegating to a Spring-managed bean that implements the Filter interface.\npublic class FormContentFilter extends OncePerRequestFilter; // Filter that parses form data for HTTP PUT, PATCH, and DELETE requests and exposes it as Servlet request parameters.\npublic class ForwardedHeaderFilter extends OncePerRequestFilter; // Extract values from \"Forwarded\" and \"X-Forwarded-*\" headers, wrap the request and response, and make they reflect the client-originated protocol and address in the following methods: getServerName() getServerPort() getScheme() isSecure() sendRedirect(String).\npublic abstract class GenericFilterBean extends Object implements Filter, org.springframework.beans.factory.BeanNameAware, org.springframework.context.EnvironmentAware, org.springframework.core.env.EnvironmentCapable, ServletContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Simple base implementation of Filter which treats its config parameters (init-param entries within the filter tag in web.xml) as bean properties.\npublic class HiddenHttpMethodFilter extends OncePerRequestFilter; // Filter that converts posted method parameters into HTTP methods, retrievable via HttpServletRequest.getMethod().\n", "des": "Provides generic filter base classes allowing for bean-style configuration."}
{"index": 1776, "repo": "slf4j-api-2.0.7", "code": "Package: slf4j\n\nSub Packages: \npackage slf4j.helpers; // Helper classes.\npackage slf4j.spi; // Classes and interfaces which are internal to SLF4J.\n\nClasses and Interfaces: \npublic interface ILoggerFactory; // ILoggerFactory instances manufacture Logger instances by name.\npublic interface IMarkerFactory; // Implementations of this interface are used to manufacture Marker instances.\npublic interface Logger; // The org.slf4j.Logger interface is the main user entry point of SLF4J API.\npublic final class LoggerFactory extends Object; // The LoggerFactory is a utility class producing Loggers for various logging APIs, most notably for log4j, logback and JDK 1.4 logging.\npublic class LoggerFactoryFriend extends Object; // All methods in this class are reserved for internal use, for testing purposes.\npublic interface Marker extends Serializable; // Markers are named objects used to enrich log statements.\npublic class MarkerFactory extends Object; // MarkerFactory is a utility class producing Marker instances as appropriate for the logging system currently in use.\npublic class MDC extends Object; // This class hides and serves as a substitute for the underlying logging system's MDC implementation.\npublic static class MDC.MDCCloseable extends Object implements Closeable; // An adapter to remove the key when done.\n", "des": "Core logging interfaces."}
{"index": 1464, "repo": "spring-data-redis-3.1.2", "code": "Package: query\n\nClasses and Interfaces: \npublic class ExampleQueryMapper extends Object; // Mapper for Query-by-Example examples to an actual query.\npublic class RedisOperationChain extends Object; // Simple set of operations required to run queries against Redis.\npublic static class RedisOperationChain.NearPath extends RedisOperationChain.PathAndValue;\npublic static class RedisOperationChain.PathAndValue extends Object;\npublic class RedisQueryCreator extends AbstractQueryCreator<org.springframework.data.keyvalue.core.query.KeyValueQuery<RedisOperationChain>,RedisOperationChain>; // Redis specific query creator.\n", "des": "Redis specific query execution engine."}
{"index": 2734, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: javamail\n\nClasses and Interfaces: \npublic class MimeMessageItemWriter extends Object implements ItemWriter<jakarta.mail.internet.MimeMessage>; // A simple ItemWriter that can send mail messages.\n", "des": "JavaMail related components."}
{"index": 2301, "repo": "spring-boot-3.1.1", "code": "Package: handler\n\nClasses and Interfaces: \npublic class IgnoreErrorsBindHandler extends AbstractBindHandler; // BindHandler that can be used to ignore binding errors.\npublic class IgnoreTopLevelConverterNotFoundBindHandler extends AbstractBindHandler; // BindHandler that can be used to ignore top-level ConverterNotFoundExceptions.\npublic class NoUnboundElementsBindHandler extends AbstractBindHandler; // BindHandler to enforce that all configuration properties under the root name have been bound.\n", "des": "General BindHandler implementations."}
{"index": 2874, "repo": "spring-integration-core-6.1.2", "code": "Package: resource\n\nClasses and Interfaces: \npublic class ResourceRetrievingMessageSource extends AbstractMessageSource<org.springframework.core.io.Resource[]> implements org.springframework.context.ApplicationContextAware; // Implementation of MessageSource based on ResourcePatternResolver which will attempt to resolve Resources based on the pattern specified.\n", "des": "Provides classes related to messaging using Spring Resources"}
{"index": 2815, "repo": "spring-integration-ip-6.1.2", "code": "Package: util\n\nClasses and Interfaces: \npublic final class RegexUtils extends Object; // Regular Expression Utilities.\npublic final class TestingUtilities extends Object; // Convenience class providing methods for testing IP components.\n", "des": "Provides utilities for IP support."}
{"index": 1812, "repo": "spring-aop-6.0.11", "code": "Package: target\n\nSub Packages: \npackage target.dynamic; // Support for dynamic, refreshable TargetSource implementations for use with Spring AOP.\n\nClasses and Interfaces: \npublic abstract class AbstractBeanFactoryBasedTargetSource extends Object implements TargetSource, org.springframework.beans.factory.BeanFactoryAware, Serializable; // Base class for TargetSource implementations that are based on a Spring BeanFactory, delegating to Spring-managed bean instances.\npublic abstract class AbstractLazyCreationTargetSource extends Object implements TargetSource; // TargetSource implementation that will lazily create a user-managed object.\npublic abstract class AbstractPoolingTargetSource extends AbstractPrototypeBasedTargetSource implements PoolingConfig, org.springframework.beans.factory.DisposableBean; // Abstract base class for pooling TargetSource implementations which maintain a pool of target instances, acquiring and releasing a target object from the pool for each method invocation.\npublic abstract class AbstractPrototypeBasedTargetSource extends AbstractBeanFactoryBasedTargetSource; // Base class for dynamic TargetSource implementations that create new prototype bean instances to support a pooling or new-instance-per-invocation strategy.\npublic class CommonsPool2TargetSource extends AbstractPoolingTargetSource implements org.apache.commons.pool2.PooledObjectFactory<Object>; // TargetSource implementation that holds objects in a configurable Apache Commons2 Pool.\npublic final class EmptyTargetSource extends Object implements TargetSource, Serializable; // Canonical TargetSource when there is no target (or just the target class known), and behavior is supplied by interfaces and advisors only.\npublic class HotSwappableTargetSource extends Object implements TargetSource, Serializable; // TargetSource implementation that caches a local target object, but allows the target to be swapped while the application is running.\npublic class LazyInitTargetSource extends AbstractBeanFactoryBasedTargetSource; // TargetSource that lazily accesses a singleton bean from a BeanFactory.\npublic interface PoolingConfig; // Config interface for a pooling target source.\npublic class PrototypeTargetSource extends AbstractPrototypeBasedTargetSource; // TargetSource implementation that creates a new instance of the target bean for each request, destroying each instance on release (after each request).\npublic class SimpleBeanTargetSource extends AbstractBeanFactoryBasedTargetSource; // Simple TargetSource implementation, freshly obtaining the specified target bean from its containing Spring BeanFactory.\n", "des": "Various TargetSource implementations for use with Spring AOP."}
{"index": 1864, "repo": "spring-test-6.0.11", "code": "Package: result\n\nClasses and Interfaces: \npublic class ContentResultMatchers extends Object; // Factory for response content assertions.\npublic class CookieResultMatchers extends Object; // Factory for response cookie assertions.\npublic class FlashAttributeResultMatchers extends Object; // Factory for \"output\" flash attribute assertions.\npublic class HandlerResultMatchers extends Object; // Factory for assertions on the selected handler or handler method.\npublic class HeaderResultMatchers extends Object; // Factory for response header assertions.\npublic class JsonPathResultMatchers extends Object; // Factory for assertions on the response content using JsonPath expressions.\npublic abstract class MockMvcResultHandlers extends Object; // Static factory methods for ResultHandler-based result actions.\npublic abstract class MockMvcResultMatchers extends Object; // Static factory methods for ResultMatcher-based result actions.\npublic class ModelResultMatchers extends Object; // Factory for assertions on the model.\npublic class PrintingResultHandler extends Object implements ResultHandler; // Result handler that prints MvcResult details to a given output stream — for example: System.out, System.err, a custom java.io.PrintWriter, etc.\nprotected static interface PrintingResultHandler.ResultValuePrinter; // A contract for how to actually write result information.\npublic class RequestResultMatchers extends Object; // Factory for assertions on the request.\npublic class StatusResultMatchers extends Object; // Factory for assertions on the response status.\npublic class ViewResultMatchers extends Object; // Factory for assertions on the selected view.\npublic class XpathResultMatchers extends Object; // Factory for assertions on the response content using XPath expressions.\n", "des": "Contains built-in ResultMatcher and ResultHandler implementations."}
{"index": 445, "repo": "lucene-analyzers-icu-8.11.2", "code": "Package: tokenattributes\n\nClasses and Interfaces: \nInterface ScriptAttribute; // This attribute stores the UTR #24 script value for a token of text.\nClass ScriptAttributeImpl; // Implementation of ScriptAttribute that stores the script as an integer.\n", "des": "Additional ICU-specific Attributes for text analysis."}
{"index": 102, "repo": "ignite-core-2.15.0", "code": "Package: never\n\nClasses and Interfaces: \nInterface NeverFailoverSpiMBean; // Management bean for NeverFailoverSpi.\nClass NeverFailoverSpi; // This class provides failover SPI implementation that never fails over.\n", "des": "Contains \"never\" failover SPI."}
{"index": 733, "repo": "spring-data-solr-4.3.15", "code": "Package: convert\n\nClasses and Interfaces: \nInterface SolrConverter;\nClass CustomConversions; // since 2.0, use SolrCustomConversions.\nClass DateTimeConverters; // Converts a Date values into a solr readable String that can be directly used within the q parameter.\nClass MappingSolrConverter; // Implementation of SolrConverter to read/write SolrDocument/ SolrInputDocument.\nClass NumberConverters; // Converts a Number values into a solr readable String that can be directly used within the q parameter.\nClass SolrConverterBase;\nClass SolrCustomConversions; // Value object to capture custom conversion.\nClass SolrJConverter; // Trivial implementation of SolrConverter delegating conversion to DocumentObjectBinder\nEnum DateTimeConverters.DateToJodaDateTimeConverter; // Reading Converter parses Date from SolrDocument to DateTime\nEnum DateTimeConverters.DateToLocalDateTimeConverter; // Reading Converter parses Date from SolrDocument to LocalDateTime\nEnum DateTimeConverters.JavaDateConverter; // Converter used to parse Date to String used for setting SolrQuery query string values\nEnum DateTimeConverters.JodaDateTimeConverter; // Converter used to parse DateTime to String used for setting SolrQuery query string values\nEnum DateTimeConverters.JodaDateTimeToDateConverter; // Writing Converter converts DateTime to Date so it can be used within SolrInputDocument\nEnum DateTimeConverters.JodaLocalDateTimeConverter; // Converter used to parse LocalDateTime to String used for setting SolrQuery query string values\nEnum DateTimeConverters.JodaLocalDateTimeToDateConverter; // Writing Converter converts LocalDateTime to Date so it can be used within SolrInputDocument\nEnum DateTimeConverters.StringToJodaDateTimeConverter;\nEnum NumberConverters.NumberConverter;\n", "des": "All the Converters go here."}
{"index": 2270, "repo": "spring-vault-core-3.0.4", "code": "Package: mapping\n\nClasses and Interfaces: \npublic class BasicVaultPersistentEntity<T> extends BasicKeyValuePersistentEntity<T,VaultPersistentProperty> implements VaultPersistentEntity<T>; // VaultPersistentEntity implementation.\n@Documented @Inherited @Retention(RUNTIME) @Target(TYPE) @KeySpace public @interface Secret; // Secret marks objects as aggregate roots to be stored in Vault.\npublic class VaultMappingContext extends KeyValueMappingContext<VaultPersistentEntity<?>,VaultPersistentProperty>; // Mapping context for Vault-specific entities.\npublic interface VaultPersistentEntity<T> extends KeyValuePersistentEntity<T,VaultPersistentProperty>; // Vault specific PersistentEntity.\npublic class VaultPersistentProperty extends KeyValuePersistentProperty<VaultPersistentProperty>; // Vault-specific KeyValuePersistentProperty.\npublic abstract class VaultSimpleTypes extends Object; // Simple constant holder for a SimpleTypeHolder enriched with Vault-specific simple (JSON) types.\n", "des": "Infrastructure for the Vault JSON-to-object mapping subsystem."}
{"index": 209, "repo": "nutch-2.4", "code": "Package: hbase\n\nClasses and Interfaces: \nClass HBaseIndexWriter;\nClass HBaseMappingReader;\n", "des": "Index writer plugin for Apache HBase."}
{"index": 2433, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: web\n\nSub Packages: \npackage web.reactive; // Auto-configuration for exposing actuator web endpoints using WebFlux.\npackage web.servlet; // Auto-configuration for exposing actuator web endpoints using Spring MVC.\n\nClasses and Interfaces: \n@ConfigurationProperties(prefix=\"management.endpoints.web.cors\") public class CorsEndpointProperties extends Object; // Configuration properties for web endpoints' CORS support.\n@ManagementContextConfiguration(proxyBeanMethods=false) @ConditionalOnWebApplication(type=SERVLET) public class ServletEndpointManagementContextConfiguration extends Object; // @ManagementContextConfiguration for servlet endpoints.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.glassfish.jersey.server.ResourceConfig.class) @ConditionalOnMissingClass(\"org.springframework.web.servlet.DispatcherServlet\") public static class ServletEndpointManagementContextConfiguration.JerseyServletEndpointManagementContextConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.web.servlet.DispatcherServlet.class) public static class ServletEndpointManagementContextConfiguration.WebMvcServletEndpointManagementContextConfiguration extends Object;\n@AutoConfiguration(after=EndpointAutoConfiguration.class) @ConditionalOnWebApplication @EnableConfigurationProperties(WebEndpointProperties.class) public class WebEndpointAutoConfiguration extends Object; // Auto-configuration for web @Endpoint support.\n@ConfigurationProperties(prefix=\"management.endpoints.web\") public class WebEndpointProperties extends Object; // Configuration properties for web management endpoints.\npublic static class WebEndpointProperties.Discovery extends Object;\npublic static class WebEndpointProperties.Exposure extends Object;\n", "des": "Auto-configuration for the Actuator's web endpoints."}
{"index": 2970, "repo": "pulsar-broker-3.0.0", "code": "Package: buffer\n\nSub Packages: \npackage buffer.impl; // The implementation of a transaction buffer.\npackage buffer.metadata; // The transaction buffer snapshot metadata.\n\nClasses and Interfaces: \npublic interface AbortedTxnProcessor;\n@Beta public interface TransactionBuffer; // A class represent a transaction buffer.\npublic interface TransactionBufferClientStats;\n@Beta public interface TransactionBufferProvider; // A provider that provides TransactionBuffer.\n@Beta public interface TransactionBufferReader extends AutoCloseable; // A reader to read entries of a given transaction from transaction buffer.\npublic interface TransactionCursor; // The transaction Cursor maintains the index of all transactions.\n@Beta public interface TransactionEntry extends Entry, AutoCloseable; // A class represents an entry appended to a transaction.\n@Beta public interface TransactionMeta; // The metadata for the transaction in the transaction buffer.\n", "des": "Implementation of a transaction buffer."}
{"index": 3658, "repo": "solr-core-9.3.0", "code": "Package: designer\n\nClasses and Interfaces: \nInterface SampleDocumentsLoader;\nInterface SchemaDesignerConstants;\nInterface SchemaSuggester;\nClass DefaultSampleDocumentsLoader;\nClass DefaultSchemaSuggester;\nClass ManagedSchemaDiff; // Utility methods for comparing managed index schemas\nClass SampleDocuments;\nClass SchemaDesignerAPI; // All V2 APIs that have a prefix of /api/schema-designer/\n", "des": "The SchemaDesignerAPI and supporting classes."}
{"index": 761, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: charfilter\n\nClasses and Interfaces: \nClass BaseCharFilter; // Base utility class for implementing a CharFilter.\nClass HTMLStripCharFilter; // A CharFilter that wraps another Reader and attempts to strip out HTML constructs.\nClass HTMLStripCharFilterFactory; // Factory for HTMLStripCharFilter.\nClass MappingCharFilter; // Simplistic CharFilter that applies the mappings contained in a NormalizeCharMap to the character stream, and correcting the resulting changes to the offsets.\nClass MappingCharFilterFactory; // Factory for MappingCharFilter.\nClass NormalizeCharMap; // Holds a map of String input to String output, to be used with MappingCharFilter.\nClass NormalizeCharMap.Builder; // Builds an NormalizeCharMap.\n", "des": "Normalization of text before the tokenizer."}
{"index": 2508, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: jersey\n\nClasses and Interfaces: \n@ManagementContextConfiguration(value=CHILD, proxyBeanMethods=false) @Import(org.springframework.boot.actuate.autoconfigure.web.jersey.JerseyManagementContextConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.glassfish.jersey.server.ResourceConfig.class) @ConditionalOnMissingClass(\"org.springframework.web.servlet.DispatcherServlet\") public class JerseyChildManagementContextConfiguration extends Object; // @ManagementContextConfiguration for Jersey infrastructure when a separate management context with a web server running on a different port is required.\n@ManagementContextConfiguration(value=SAME, proxyBeanMethods=false) @EnableConfigurationProperties(org.springframework.boot.autoconfigure.jersey.JerseyProperties.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.glassfish.jersey.server.ResourceConfig.class) @ConditionalOnMissingClass(\"org.springframework.web.servlet.DispatcherServlet\") public class JerseySameManagementContextConfiguration extends Object; // @ManagementContextConfiguration for Jersey infrastructure when the management context is the same as the main application context.\npublic interface ManagementContextResourceConfigCustomizer; // Callback interface that can be implemented by beans wishing to customize Jersey's ResourceConfig in the management context before it is used.\n", "des": "Configuration for a Jersey-based management context."}
{"index": 2608, "repo": "wicket-util-10.0.0-M1", "code": "Package: io\n\nClasses and Interfaces: \npublic class BOMInputStream extends ProxyInputStream; // This class is used to wrap a stream that includes an encoded ByteOrderMark as its first bytes.\npublic class ByteArrayOutputStream extends OutputStream; // This class implements an output stream in which the data is written into a byte array.\npublic final class ByteCountingOutputStream extends OutputStream; // Output stream that counts bytes written to it (but discards them).\npublic class ByteOrderMark extends Object implements Serializable; // Byte Order Mark (BOM) representation - see BOMInputStream.\npublic class Connections extends Object; // URLConnection related utilities\npublic class DeferredFileOutputStream extends ThresholdingOutputStream; // An output stream which will retain data in memory until a specified threshold is reached, and only then commit it to disk.\npublic static interface DeferredFileOutputStream.FileFactory; // The file factory for this deferred file output stream.\npublic final class FullyBufferedReader extends Object; // This is not a reader like e.g.\npublic interface IClusterable extends Serializable; // Wicket version of Serializable.\npublic final class IOUtils extends Object; // General IO Stream manipulation.\npublic abstract class ProxyInputStream extends FilterInputStream; // A Proxy stream which acts as expected, that is it passes the method calls on to the proxied stream and doesn't change which methods are being called.\npublic final class Streams extends Object; // Utilities methods for working with input and output streams.\npublic class StringBufferWriter extends Writer;\npublic abstract class ThresholdingOutputStream extends OutputStream; // An output stream which triggers an event when a specified number of bytes of data have been written to it.\npublic final class XmlReader extends Reader; // This is a simple XmlReader.\n", "des": "Input/Output utilities."}
{"index": 1195, "repo": "commons-math3-3.6.1", "code": "Package: optimization\n\nSub Packages: \npackage optimization.direct; // This package provides optimization algorithms that don't require derivatives.\npackage optimization.fitting; // This package provides classes to perform curve fitting.\npackage optimization.general; // This package provides optimization algorithms that require derivatives.\npackage optimization.linear; // This package provides optimization algorithms for linear constrained problems.\npackage optimization.univariate; // Univariate real functions minimum finding algorithms.\n\nClasses and Interfaces: \nInterface BaseMultivariateOptimizer<FUNC extends MultivariateFunction>; // As of 3.1 (to be removed in 4.0).\nInterface BaseMultivariateSimpleBoundsOptimizer<FUNC extends MultivariateFunction>; // As of 3.1 (to be removed in 4.0).\nInterface BaseMultivariateVectorOptimizer<FUNC extends MultivariateVectorFunction>; // As of 3.1 (to be removed in 4.0).\nInterface BaseOptimizer<PAIR>; // As of 3.1 (to be removed in 4.0).\nInterface ConvergenceChecker<PAIR>; // As of 3.1 (to be removed in 4.0).\nInterface DifferentiableMultivariateOptimizer; // As of 3.1 (to be removed in 4.0).\nInterface DifferentiableMultivariateVectorOptimizer; // As of 3.1 (to be removed in 4.0).\nInterface MultivariateDifferentiableOptimizer; // As of 3.1 (to be removed in 4.0).\nInterface MultivariateDifferentiableVectorOptimizer; // As of 3.1 (to be removed in 4.0).\nInterface MultivariateOptimizer; // As of 3.1 (to be removed in 4.0).\nInterface OptimizationData; // As of 3.1 (to be removed in 4.0).\nClass AbstractConvergenceChecker<PAIR>; // As of 3.1 (to be removed in 4.0).\nClass BaseMultivariateMultiStartOptimizer<FUNC extends MultivariateFunction>; // As of 3.1 (to be removed in 4.0).\nClass BaseMultivariateVectorMultiStartOptimizer<FUNC extends MultivariateVectorFunction>; // As of 3.1 (to be removed in 4.0).\nClass DifferentiableMultivariateMultiStartOptimizer; // As of 3.1 (to be removed in 4.0).\n", "des": "All classes and sub-packages of this package are deprecated."}
{"index": 3542, "repo": "opennlp-tools-2.2.0", "code": "Package: postag\n\nClasses and Interfaces: \nInterface MutableTagDictionary; // Interface that allows TagDictionary entries to be added and removed.\nInterface POSContextGenerator; // Interface for a BeamSearchContextGenerator used in POS tagging.\nInterface POSTagger; // The interface for part of speech taggers.\nInterface POSTaggerEvaluationMonitor; // A marker interface for evaluating pos taggers.\nInterface TagDictionary; // Interface to determine which tags are valid for a particular word based on a tag dictionary.\nClass ConfigurablePOSContextGenerator; // A configurable context generator for a POSTagger.\nClass DefaultPOSContextGenerator; // A default context generator for a POSTagger.\nClass DefaultPOSSequenceValidator; // The default POS tagger SequenceValidator implementation.\nClass POSDictionary; // Provides a means of determining which tags are valid for a particular word based on a TagDictionary read from a file.\nClass POSEvaluator; // The POSEvaluator measures the performance of the given POSTagger with the provided reference samples.\nClass POSModel; // The POSModel is the model used by a learnable POSTagger.\nClass POSSample; // Represents an pos-tagged sentence.\nClass POSSampleEventStream; // Reads the samples from an Iterator and converts those samples into events which can be used by the maxent library for training.\nClass POSSampleSequenceStream; // A SequenceStream implementation encapsulating samples.\nClass POSTaggerCrossValidator;\nClass POSTaggerFactory; // The factory that provides POSTagger default implementations and resources.\nClass POSTaggerFactory.POSDictionarySerializer;\nClass POSTaggerME; // A part-of-speech tagger that uses maximum entropy.\nClass WordTagSampleStream; // A stream filter which reads a sentence per line which contains words and tags in word_tag format and outputs a POSSample objects.\n", "des": "Package related to part-of-speech tagging."}
{"index": 2802, "repo": "spring-security-oauth2-core-6.1.2", "code": "Package: endpoint\n\nClasses and Interfaces: \npublic final class DefaultMapOAuth2AccessTokenResponseConverter extends Object implements org.springframework.core.convert.converter.Converter<Map<String,Object>,OAuth2AccessTokenResponse>; // A Converter that converts the provided OAuth 2.0 Access Token Response parameters to an OAuth2AccessTokenResponse.\npublic final class DefaultOAuth2AccessTokenResponseMapConverter extends Object implements org.springframework.core.convert.converter.Converter<OAuth2AccessTokenResponse,Map<String,Object>>; // A Converter that converts the provided OAuth2AccessTokenResponse to a Map representation of the OAuth 2.0 Access Token Response parameters.\npublic final class OAuth2AccessTokenResponse extends Object; // A representation of an OAuth 2.0 Access Token Response.\npublic static final class OAuth2AccessTokenResponse.Builder extends Object; // A builder for OAuth2AccessTokenResponse.\npublic final class OAuth2AuthorizationExchange extends Object; // An \"exchange\" of an OAuth 2.0 Authorization Request and Response for the authorization code grant type.\npublic final class OAuth2AuthorizationRequest extends Object implements Serializable; // A representation of an OAuth 2.0 Authorization Request for the authorization code grant type.\npublic static final class OAuth2AuthorizationRequest.Builder extends Object; // A builder for OAuth2AuthorizationRequest.\npublic final class OAuth2AuthorizationResponse extends Object; // A representation of an OAuth 2.0 Authorization Response for the authorization code grant type.\npublic static final class OAuth2AuthorizationResponse.Builder extends Object; // A builder for OAuth2AuthorizationResponse.\npublic final class OAuth2AuthorizationResponseType extends Object implements Serializable; // The response_type parameter is consumed by the authorization endpoint which is used by the authorization code grant type.\npublic final class OAuth2DeviceAuthorizationResponse extends Object; // A representation of an OAuth 2.0 Device Authorization Response.\npublic static final class OAuth2DeviceAuthorizationResponse.Builder extends Object; // A builder for OAuth2DeviceAuthorizationResponse.\npublic final class OAuth2ParameterNames extends Object; // Standard and custom (non-standard) parameter names defined in the OAuth Parameters Registry and used by the authorization endpoint, token endpoint and token revocation endpoint.\npublic final class PkceParameterNames extends Object; // Standard parameter names defined in the OAuth Parameters Registry and used by the authorization endpoint and token endpoint.\n", "des": "Support classes that model the OAuth 2.0 Request and Response messages from the Authorization Endpoint and Token Endpoint."}
{"index": 3537, "repo": "opennlp-tools-2.2.0", "code": "Package: namefind\n\nClasses and Interfaces: \nInterface DocumentNameFinder; // Interface for processing an entire document allowing a TokenNameFinder to use context from the entire document.\nInterface NameContextGenerator; // Interface for generating the context for a name finder by specifying a set of feature generators.\nInterface RegexNameFinderFactory.RegexAble;\nInterface TokenNameFinder; // The interface for name finders which provide name tags for a sequence of tokens.\nInterface TokenNameFinderEvaluationMonitor; // A marker interface for evaluating name finders.\nClass BilouCodec; // The default SequenceCodec implementation according to the BILOU scheme.\nClass BilouNameFinderSequenceValidator; // A SequenceValidator implementation for the BilouCodec.\nClass BioCodec; // The default SequenceCodec implementation according to the BIO scheme: B: 'beginning' of a NE I: 'inside', the word is inside a NE O: 'outside', the word is a regular word outside a NE See also the paper by Roth D.\nClass DefaultNameContextGenerator; // A NameContextGenerator implementation for determining contextual features for a tag-chunk style named-entity recognizer.\nClass DictionaryNameFinder; // This is a Dictionary based name finder.\nClass NameFinderEventStream; // Class for creating an event stream out of data files for training an TokenNameFinder.\nClass NameFinderME; // A maximum-entropy-based name finder implementation.\nClass NameFinderSequenceValidator; // The default name finder SequenceValidator implementation.\nClass NameSample; // Encapsulates names for a single unit of text.\nClass NameSampleDataStream; // The NameSampleDataStream class converts tagged strings provided by a DataStream to NameSample objects.\nClass NameSampleSequenceStream; // A SequenceStream implementation encapsulating samples.\nClass NameSampleTypeFilter; // A stream which removes name samples which do not have a certain type.\nClass RegexNameFinder; // A TokenNameFinder implementation based on a series of regular expressions.\nClass RegexNameFinderFactory; // Returns a RegexNameFinder based on a selection of defaults or a configuration and a selection of defaults.\nClass TokenNameFinderCrossValidator; // Cross validator for TokenNameFinder.\nClass TokenNameFinderEvaluator; // The TokenNameFinderEvaluator measures the performance of the given TokenNameFinder with the provided reference samples.\n", "des": "Package related to finding proper names and numeric amounts."}
{"index": 1224, "repo": "commons-text-1.10.0", "code": "Package: translate\n\nClasses and Interfaces: \nClass AggregateTranslator; // Executes a sequence of translators one after the other.\nClass CharSequenceTranslator; // An API for translating text.\nClass CodePointTranslator; // Helper subclass to CharSequenceTranslator to allow for translations that will replace up to one character at a time.\nClass CsvTranslators; // This class holds inner classes for escaping/unescaping Comma Separated Values.\nClass CsvTranslators.CsvEscaper; // Translator for escaping Comma Separated Values.\nClass CsvTranslators.CsvUnescaper; // Translator for unescaping escaped Comma Separated Value entries.\nClass EntityArrays; // Class holding various entity data for HTML and XML - generally for use with the LookupTranslator.\nClass JavaUnicodeEscaper; // Translates code points to their Unicode escaped value suitable for Java source.\nClass LookupTranslator; // Translates a value using a lookup table.\nClass NumericEntityEscaper; // Translates code points to their XML numeric entity escaped value.\nClass NumericEntityUnescaper; // Translates XML numeric entities of the form &#[xX]?\\d+;? to the specific code point.\nClass OctalUnescaper; // Translate escaped octal Strings back to their octal values.\nClass UnicodeEscaper; // Translates code points to their Unicode escaped value.\nClass UnicodeUnescaper; // Translates escaped Unicode values of the form \\\\u+\\d\\d\\d\\d back to Unicode.\nClass UnicodeUnpairedSurrogateRemover; // Helper subclass to CharSequenceTranslator to remove unpaired surrogates.\nEnum NumericEntityUnescaper.OPTION; // Enumerates NumericEntityUnescaper options for unescaping.\n", "des": "An API for creating text translation routines from a set of smaller building blocks."}
{"index": 2585, "repo": "spring-rabbit-3.0.6", "code": "Package: aot\n\nClasses and Interfaces: \npublic class RabbitRuntimeHints extends Object implements org.springframework.aot.hint.RuntimeHintsRegistrar; // RuntimeHintsRegistrar for spring-rabbit.\n", "des": "Provides classes to support Spring AOT."}
{"index": 3089, "repo": "spring-ws-core-4.0.5", "code": "Package: soap12\n\nClasses and Interfaces: \npublic interface Soap12Body extends SoapBody; // Subinterface of SoapBody that exposes SOAP 1.2 functionality.\npublic interface Soap12Fault extends SoapFault; // Subinterface of SoapFault that exposes SOAP 1.2 functionality.\npublic interface Soap12Header extends SoapHeader; // Subinterface of SoapHeader that exposes SOAP 1.2 functionality.\n", "des": "Contains interfaces specific to SOAP 1.2."}
{"index": 2647, "repo": "spring-data-cassandra-4.1.2", "code": "Package: cql\n\nSub Packages: \npackage cql.converter; // CQL specific converters.\npackage cql.generator; // CQL generators for Keyspace object actions.\npackage cql.keyspace; // Keyspace object action specifications such as CREATE TABLE, DROP INDEX.\npackage cql.legacy; // CQL legacy core asynchronous support for easier migration.\npackage cql.session; // Provides utility classes for simple CqlSession access and various session implementations.\npackage cql.support; // Support classes for the CQL framework.\npackage cql.util; // Utility classes for basic CQL interaction.\n\nClasses and Interfaces: \npublic class ArgumentPreparedStatementBinder extends Object implements PreparedStatementBinder; // Simple adapter for PreparedStatementBinder that applies a given array of arguments.\npublic interface AsyncCqlOperations; // Interface specifying a basic set of CQL asynchronously executed operations.\npublic class AsyncCqlTemplate extends CassandraAccessor implements AsyncCqlOperations; // This is the central class in the CQL core package for asynchronous Cassandra data access. It simplifies the use of CQL and helps to avoid common errors.\nprotected static class AsyncCqlTemplate.AsyncRowCallbackHandlerResultSetExtractor extends Object implements AsyncResultSetExtractor<Void>; // Adapter to enable use of a RowCallbackHandler inside a ResultSetExtractor.\n@FunctionalInterface public interface AsyncPreparedStatementCreator; // One of the two central callback interfaces used by the AsyncCqlTemplate class.\n@FunctionalInterface public interface AsyncResultSetExtractor<T>; // Callback interface used by AsyncCqlTemplate's query methods.\npublic class AsyncRowMapperResultSetExtractor<T> extends Object implements AsyncResultSetExtractor<List<T>>; // Adapter implementation of the ResultSetExtractor interface that delegates to a RowMapper which is supposed to create an object for each row.\n@FunctionalInterface public interface AsyncSessionCallback<T>; // Generic callback interface for code that operates asynchronously on a Cassandra CqlSession.\npublic class BeanPropertyRowMapper<T> extends Object implements RowMapper<T>; // RowMapper implementation that converts a Row into a new instance of the specified mapped target class.\n@Deprecated public class CachedPreparedStatementCreator extends Object implements PreparedStatementCreator;\npublic class CassandraAccessor extends Object implements InitializingBean; // CassandraAccessor provides access to a Cassandra SessionFactory and the CassandraExceptionTranslator.\npublic class CassandraExceptionTranslator extends Object implements CqlExceptionTranslator; // Simple PersistenceExceptionTranslator for Cassandra.\n", "des": "CQL core support."}
{"index": 3826, "repo": "lucene-analysis-common-9.7.0", "code": "Package: tokenattributes\n\nClasses and Interfaces: \nClass CollatedTermAttributeImpl; // Extension of CharTermAttributeImpl that encodes the term text as a binary Unicode collation key instead of as UTF-8 bytes.\n", "des": "Custom AttributeImpl for indexing collation keys as index terms."}
{"index": 1534, "repo": "spring-context-6.0.11", "code": "Package: metadata\n\nClasses and Interfaces: \npublic abstract class AbstractJmxAttribute extends Object; // Base class for all JMX metadata classes.\npublic class InvalidMetadataException extends JmxException; // Thrown by the JmxAttributeSource when it encounters incorrect metadata on a managed resource or one of its methods.\npublic interface JmxAttributeSource; // Interface used by the MetadataMBeanInfoAssembler to read source-level metadata from a managed resource's class.\npublic abstract class JmxMetadataUtils extends Object; // Utility methods for converting Spring JMX metadata into their plain JMX equivalents.\npublic class ManagedAttribute extends AbstractJmxAttribute; // Metadata that indicates to expose a given bean property as JMX attribute.\npublic class ManagedMetric extends AbstractJmxAttribute; // Metadata that indicates to expose a given bean property as a JMX attribute, with additional descriptor properties that indicate that the attribute is a metric.\npublic class ManagedNotification extends Object; // Metadata that indicates a JMX notification emitted by a bean.\npublic class ManagedOperation extends AbstractJmxAttribute; // Metadata that indicates to expose a given method as JMX operation.\npublic class ManagedOperationParameter extends Object; // Metadata about JMX operation parameters.\npublic class ManagedResource extends AbstractJmxAttribute; // Metadata indicating that instances of an annotated class are to be registered with a JMX server.\n", "des": "Provides generic JMX metadata classes and basic support for reading JMX metadata in a provider-agnostic manner."}
{"index": 755, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: ar\n\nClasses and Interfaces: \nClass ArabicAnalyzer; // Analyzer for Arabic.\nClass ArabicNormalizationFilter; // A TokenFilter that applies ArabicNormalizer to normalize the orthography.\nClass ArabicNormalizationFilterFactory; // Factory for ArabicNormalizationFilter.\nClass ArabicNormalizer; // Normalizer for Arabic.\nClass ArabicStemFilter; // A TokenFilter that applies ArabicStemmer to stem Arabic words..\nClass ArabicStemFilterFactory; // Factory for ArabicStemFilter.\nClass ArabicStemmer; // Stemmer for Arabic.\n", "des": "Analyzer for Arabic."}
{"index": 3503, "repo": "poi-5.2.3", "code": "Package: storage\n\nClasses and Interfaces: \nInterface BlockWritable; // An interface for persisting block storage of POIFS components.\nInterface HeaderBlockConstants; // Constants used in reading/writing the Header block\nClass BATBlock; // A block of block allocation table entries.\nClass BATBlock.BATBlockAndIndex;\nClass HeaderBlock; // The block containing the archive header\n", "des": "storage package contains low level binary structures for POIFS's implementation of the OLE 2 Compound Document Format."}
{"index": 3781, "repo": "lucene-analysis-common-9.7.0", "code": "Package: es\n\nClasses and Interfaces: \nClass SpanishAnalyzer; // Analyzer for Spanish.\nClass SpanishLightStemFilter; // A TokenFilter that applies SpanishLightStemmer to stem Spanish words.\nClass SpanishLightStemFilterFactory; // Factory for SpanishLightStemFilter.\nClass SpanishLightStemmer; // Light Stemmer for Spanish\nClass SpanishMinimalStemFilter;\nClass SpanishMinimalStemFilterFactory;\nClass SpanishMinimalStemmer;\nClass SpanishPluralStemFilter; // A TokenFilter that applies SpanishPluralStemmer to stem Spanish words.\nClass SpanishPluralStemFilterFactory; // Factory for SpanishPluralStemFilterFactory.\nClass SpanishPluralStemmer; // Plural Stemmer for Spanish\n", "des": "Analyzer for Spanish."}
{"index": 1395, "repo": "spring-boot-actuator-3.1.1", "code": "Package: reactive\n\nClasses and Interfaces: \n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.reactive.AbstractWebFluxEndpointHandlerMapping.AbstractWebFluxEndpointHandlerMappingRuntimeHints.class) public abstract class AbstractWebFluxEndpointHandlerMapping extends org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping; // A custom HandlerMapping that makes web endpoints available over HTTP using Spring WebFlux.\nprotected static final class AbstractWebFluxEndpointHandlerMapping.ElasticSchedulerInvoker extends Object implements OperationInvoker; // An OperationInvoker that performs the invocation of a blocking operation on a separate thread using Reactor's bounded elastic scheduler.\n@FunctionalInterface protected static interface AbstractWebFluxEndpointHandlerMapping.LinksHandler; // Reactive handler providing actuator links at the root endpoint.\n@FunctionalInterface protected static interface AbstractWebFluxEndpointHandlerMapping.ReactiveWebOperation; // A reactive web operation that can be handled by WebFlux.\npublic class AdditionalHealthEndpointPathsWebFluxHandlerMapping extends AbstractWebFluxEndpointHandlerMapping; // A custom HandlerMapping that allows health groups to be mapped to an additional path.\npublic class ControllerEndpointHandlerMapping extends org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping; // HandlerMapping that exposes @ControllerEndpoint and @RestControllerEndpoint annotated endpoints over Spring WebFlux.\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.WebFluxEndpointHandlerMappingRuntimeHints.class) public class WebFluxEndpointHandlerMapping extends AbstractWebFluxEndpointHandlerMapping implements org.springframework.beans.factory.InitializingBean; // A custom HandlerMapping that makes web endpoints available over HTTP using Spring WebFlux.\n", "des": "Spring WebFlux support for actuator endpoints."}
{"index": 1372, "repo": "spring-boot-actuator-3.1.1", "code": "Package: availability\n\nClasses and Interfaces: \npublic class AvailabilityStateHealthIndicator extends AbstractHealthIndicator; // A HealthIndicator that checks a specific AvailabilityState of the application.\npublic static interface AvailabilityStateHealthIndicator.StatusMappings<S extends org.springframework.boot.availability.AvailabilityState>; // Callback used to add status mappings.\npublic class LivenessStateHealthIndicator extends AvailabilityStateHealthIndicator; // A HealthIndicator that checks the LivenessState of the application.\npublic class ReadinessStateHealthIndicator extends AvailabilityStateHealthIndicator; // A HealthIndicator that checks the ReadinessState of the application.\n", "des": "Actuator support for application availability concerns."}
{"index": 716, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: tuple\n\nClasses and Interfaces: \nClass Tuple; // A Tuple is an immutable Collection of objects, each of which can be of an arbitrary type.\nClass Tuple1<T1>; // A tuple that holds a single value.\nClass Tuple2<T1,T2>; // A tuple that holds two values.\nClass Tuples; // The Tuple factory.\n", "des": "Tuples provide a type-safe way to specify multiple parameters."}
{"index": 2322, "repo": "spring-boot-3.1.1", "code": "Package: r2dbc\n\nSub Packages: \npackage r2dbc.init; // Support for initialization of an SQL database using an R2DBC ConnectionFactory.\n\nClasses and Interfaces: \npublic final class ConnectionFactoryBuilder extends Object; // Builder for ConnectionFactory.\npublic enum EmbeddedDatabaseConnection extends Enum<EmbeddedDatabaseConnection>; // Connection details for embedded databases compatible with R2DBC.\npublic class OptionsCapableConnectionFactory extends Object implements io.r2dbc.spi.Wrapped<io.r2dbc.spi.ConnectionFactory>, io.r2dbc.spi.ConnectionFactory; // ConnectionFactory capable of providing access to the ConnectionFactoryOptions from which it was built.\n", "des": "Support for R2DBC connectivity."}
{"index": 3502, "repo": "poi-5.2.3", "code": "Package: property\n\nClasses and Interfaces: \nInterface Child; // This interface defines methods for finding and setting sibling Property instances\nInterface Parent; // Behavior for parent (directory) properties\nInterface PropertyConstants; // Interface PropertyConstants\nClass DirectoryProperty; // Directory property\nClass DirectoryProperty.PropertyComparator;\nClass DocumentProperty; // Trivial extension of Property for POIFSDocuments\nClass Property; // This abstract base class is the ancestor of all classes implementing POIFS Property behavior.\nClass PropertyTable; // This class embodies the Property Table for a POIFSFileSystem; this is basically the directory for all of the documents in the filesystem and looks up entries in the filesystem to their chain of blocks.\nClass RootProperty; // Root property\n", "des": "property package contains high and low level Property structures for POIFS."}
{"index": 80, "repo": "ignite-core-2.15.0", "code": "Package: adaptive\n\nClasses and Interfaces: \nInterface AdaptiveLoadBalancingSpiMBean; // Management MBean for AdaptiveLoadBalancingSpi SPI.\nInterface AdaptiveLoadProbe; // Pluggable implementation of node load probing.\nClass AdaptiveCpuLoadProbe; // Implementation of node load probing based on CPU load.\nClass AdaptiveJobCountLoadProbe; // Implementation of node load probing based on active and waiting job count.\nClass AdaptiveLoadBalancingSpi; // Load balancing SPI that adapts to overall node performance.\nClass AdaptiveProcessingTimeLoadProbe; // Implementation of node load probing based on total job processing time.\n", "des": "Contains adaptive load balancing SPI."}
{"index": 112, "repo": "ignite-core-2.15.0", "code": "Package: startup\n\nSub Packages: \npackage startup.cmdline; // Contains default command line startup.\n\nClasses and Interfaces: \nClass BasicWarmupClosure; // Basic warm-up closure which warm-ups cache operations.\n", "des": "Contains Ignite runtime startup classes."}
{"index": 1996, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: client\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnClass(org.springframework.web.reactive.function.client.WebClient.class) @AutoConfigureAfter(SslAutoConfiguration.class) @Import({org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorFactoryConfiguration.ReactorNetty.class,org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorFactoryConfiguration.JettyClient.class,org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorFactoryConfiguration.HttpClient5.class,org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorFactoryConfiguration.JdkClient.class}) public class ClientHttpConnectorAutoConfiguration extends Object; // Auto-configuration for ClientHttpConnector.\n@FunctionalInterface public interface ReactorNettyHttpClientMapper; // Mapper that allows for custom modification of a HttpClient before it is used as the basis for a ReactorClientHttpConnector.\n@AutoConfiguration(after={CodecsAutoConfiguration.class,ClientHttpConnectorAutoConfiguration.class}) @ConditionalOnClass(org.springframework.web.reactive.function.client.WebClient.class) public class WebClientAutoConfiguration extends Object; // Auto-configuration for WebClient.\n@Configuration(proxyBeanMethods=false) @ConditionalOnBean(org.springframework.boot.web.codec.CodecCustomizer.class) protected static class WebClientAutoConfiguration.WebClientCodecsConfiguration extends Object;\npublic class WebClientCodecCustomizer extends Object implements org.springframework.boot.web.reactive.function.client.WebClientCustomizer; // WebClientCustomizer that configures codecs for the HTTP client.\npublic interface WebClientSsl; // Interface that can be used to apply SSL configuration to a WebClient.Builder.\n", "des": "Auto-configuration for Spring Framework's functional web client."}
{"index": 297, "repo": "pdfbox-3.0.0-beta1", "code": "Package: image\n\nClasses and Interfaces: \nInterface PDImage; // An image in a PDF document.\nClass CCITTFactory; // Factory for creating a PDImageXObject containing a CCITT Fax compressed TIFF image.\nClass JPEGFactory; // Factory for creating a PDImageXObject containing a JPEG compressed image.\nClass LosslessFactory; // Factory for creating a PDImageXObject containing a lossless compressed image.\nClass PDImageXObject; // An Image XObject.\nClass PDInlineImage; // An inline image object which uses a special syntax to express the data for a small image directly within the content stream.\n", "des": "This package deals with images that are stored in a PDF document."}
{"index": 897, "repo": "commons-jcs3-core-3.1", "code": "Package: behavior\n\nClasses and Interfaces: \nInterface ICache<K,V>; // This is the top level interface for all cache like structures.\nInterface ICacheElement<K,V>; // Every item is the cache is wrapped in an ICacheElement.\nInterface ICacheElementSerialized<K,V>; // This interface defines the behavior of the serialized element wrapper.\nInterface ICacheEventQueue<K,V>; // Interface for a cache event queue.\nInterface ICacheListener<K,V>; // Used to receive a cache event notification.\nInterface ICacheObserver; // Used to register interest in receiving cache changes.\nInterface ICacheService<K,V>; // Used to retrieve and update the cache.\nInterface ICacheServiceAdmin; // Description of the Interface\nInterface ICacheServiceNonLocal<K,V>; // Used to retrieve and update non local caches, such as the remote and lateral caches.\nInterface ICacheType; // Interface implemented by a specific cache.\nInterface ICompositeCacheAttributes; // This defines the minimal behavior for the Cache Configuration settings.\nInterface ICompositeCacheManager; // I need the interface so I can plug in mock managers for testing.\nInterface IElementAttributes; // Interface for cache element attributes classes.\nInterface IElementSerializer; // Defines the behavior for cache element serializers.\nInterface IProvideScheduler; // Marker interface for providers of the central ScheduledExecutorService\nInterface IRequireScheduler; // Marker interface to allow the injection of a central ScheduledExecutorService for all modules requiring scheduled background operations.\nInterface IShutdownObservable; // ShutdownObservers can observe ShutdownObservable objects.\nInterface IShutdownObserver; // This interface is required of all shutdown observers.\nInterface IZombie; // Interface to mark an object as zombie for error recovery purposes.\nEnum ICacheEventQueue.QueueType;\nEnum ICacheType.CacheType;\nEnum ICompositeCacheAttributes.DiskUsagePattern;\n", "des": "Interfaces used by the core and the auxiliary caches."}
{"index": 3672, "repo": "solr-core-9.3.0", "code": "Package: reporters\n\nSub Packages: \npackage reporters.jmx; // This package contains components that support SolrJmxReporter.\npackage reporters.solr; // This package contains SolrMetricReporter implementations specific to SolrCloud reporting.\n\nClasses and Interfaces: \nInterface ReporterClientCache.ClientProvider<T>; // Provide an instance of service client.\nClass ReporterClientCache<T>; // Simple cache for reusable service clients used by some implementations of SolrMetricReporter.\nClass SolrGraphiteReporter; // Metrics reporter that wraps GraphiteReporter.\nClass SolrJmxReporter; // A SolrMetricReporter that finds (or creates) a MBeanServer from the given configuration and registers metrics to it with JMX.\nClass SolrSlf4jReporter; // Metrics reporter that wraps Slf4jReporter.\n", "des": "This package houses 'pluggable' metric reporters that inherit from the SolrMetricReporter class."}
{"index": 1330, "repo": "groovy-all-4.0.13", "code": "Package: classgen\n\nSub Packages: \npackage classgen.asm; // Helper classes for ASMClassGenerator.\n\nClasses and Interfaces: \npublic class AnnotationVisitor extends Object; // An Annotation visitor responsible for: reading annotation metadata (@Retention, @Target, attribute types) verify that an AnnotationNode conforms to annotation meta enhancing an AnnotationNode AST to reflect real annotation meta\npublic class AsmClassGenerator extends ClassGenerator; // Generates Java class versions of Groovy classes using ASM.\npublic abstract class BytecodeExpression extends Expression; // Represents some custom bytecode generation by the compiler.\npublic abstract class BytecodeInstruction extends Object; // Helper class used by the class generator.\npublic class BytecodeSequence extends Statement; // This class represents a sequence of BytecodeInstructions or ASTNodes.\npublic class ClassCompletionVerifier extends ClassCodeVisitorSupport; // Checks that a class satisfies various conditions including: Incorrect class or method access modifiers No abstract methods appear in a non-abstract class Existence and correct visibility for inherited members Invalid attempts to override final members\npublic abstract class ClassGenerator extends ClassCodeVisitorSupport; // Abstract base class for generator of Java class versions of Groovy AST classes\npublic class ClassGeneratorException extends RuntimeException; // An exception thrown by the class generator\npublic class DummyClassGenerator extends ClassGenerator; // To generate a class that has all the fields and methods, except that fields are not initialized and methods are empty.\npublic class EnumCompletionVisitor extends ClassCodeVisitorSupport; // Enums have a parent constructor with two arguments from java.lang.Enum.\npublic class EnumVisitor extends ClassCodeVisitorSupport;\npublic class ExtendedVerifier extends ClassCodeVisitorSupport; // A specialized Groovy AST visitor meant to perform additional verifications upon the current AST.\npublic class FinalVariableAnalyzer extends ClassCodeVisitorSupport;\npublic static interface FinalVariableAnalyzer.VariableNotFinalCallback;\npublic class GeneratorContext extends Object; // A context shared across generations of a class and its inner classes.\npublic class InnerClassCompletionVisitor extends InnerClassVisitorHelper;\npublic class InnerClassVisitor extends InnerClassVisitorHelper;\npublic abstract class InnerClassVisitorHelper extends ClassCodeVisitorSupport;\npublic class ReturnAdder extends Object; // Utility class to add return statements.\n@FunctionalInterface public static interface ReturnAdder.ReturnStatementListener;\n", "des": "Generates Java classes for Groovy classes using ASM."}
{"index": 1140, "repo": "hadoop-yarn-api-3.3.6", "code": "Package: csi\n\nClasses and Interfaces: \nClass CsiConfigUtils; // Utility class for CSI in the API level.\n", "des": "Package that includes some CSI utility classes."}
{"index": 2044, "repo": "spring-messaging-6.0.11", "code": "Package: tcp\n\nSub Packages: \npackage tcp.reactor; // Contains support for TCP messaging based on Reactor.\n\nClasses and Interfaces: \npublic class FixedIntervalReconnectStrategy extends Object implements ReconnectStrategy; // A simple strategy for making reconnect attempts at a fixed interval.\n@FunctionalInterface public interface ReconnectStrategy; // A contract to determine the frequency of reconnect attempts after connection failure.\npublic interface TcpConnection<P> extends Closeable; // A contract for sending messages and managing a TCP connection.\npublic interface TcpConnectionHandler<P>; // A contract for managing lifecycle events for a TCP connection including the handling of incoming messages.\npublic interface TcpOperations<P>; // A contract for establishing TCP connections.\n", "des": "Contains abstractions and implementation classes for establishing TCP connections via TcpOperations, handling messages via TcpConnectionHandler, as well as sending messages via TcpConnection."}
{"index": 995, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: matcher\n\nClasses and Interfaces: \nInterface WebServiceMessageMatcher; // Defines the general contract for matching messages to expectations.\nClass AbstractSoapMessageMatcher; // Abstract base class for SOAP-specific WebServiceMessageMatcher implementations.\nClass DiffMatcher; // Implementation of WebServiceMessageMatcher based on XMLUnit's Diff.\nClass PayloadDiffMatcher; // Matches Source payloads.\nClass SchemaValidatingMatcher; // Uses the XmlValidator to validate request payload.\nClass SoapEnvelopeDiffMatcher; // Matches Source SOAP envelopes.\nClass SoapHeaderMatcher; // Matches SOAP headers.\nClass XPathExpectationsHelper; // Helper class for dealing with XPath expectations.\n", "des": "Provides the generic WebServiceMessageMatcher interface, and implementations."}
{"index": 2168, "repo": "wicket-core-10.0.0-M1", "code": "Package: tester\n\nClasses and Interfaces: \npublic class BaseWicketTester extends Object; // A helper class to ease unit testing of Wicket applications without the need for a servlet container.\npublic static class BaseWicketTester.StartComponentInPage extends WebPage; // A page that is used as the automatically created page for BaseWicketTester.startComponentInPage(Class) and the other variations.\npublic final class DiffUtil extends Object; // This is a utility class.\npublic class DummyHomePage extends WebPage; // A dummy home page, as required by WicketTester.\npublic class DummyPanelPage extends WebPage; // A dummy Panel Component.\npublic class FormTester extends Object; // A helper class for testing validation and submission of FormComponents.\npublic class Result extends Object; // A Result class.\npublic class TagTester extends Object; // Tag tester is used to test that a generated markup tag contains the correct attributes, values etc.\npublic abstract class WicketTestCase extends Object; // Base class for tests which require comparing wicket response with a file.\npublic class WicketTester extends BaseWicketTester; // A helper class to ease unit testing of Wicket applications without the need for a servlet container.\npublic class WicketTesterExtension extends Object implements org.junit.jupiter.api.extension.BeforeTestExecutionCallback, org.junit.jupiter.api.extension.AfterTestExecutionCallback, org.junit.jupiter.api.extension.TestExecutionExceptionHandler; // Manages WicketTester instance\npublic class WicketTesterHelper extends Object; // A WicketTester-specific helper class.\npublic static class WicketTesterHelper.ComponentData extends Object implements org.apache.wicket.util.io.IClusterable; // ComponentData class.\n", "des": "A package with utility classes to ease unit testing of Wicket applications without the need for a servlet container."}
{"index": 3713, "repo": "solr-core-9.3.0", "code": "Package: uninverting\n\nClasses and Interfaces: \nInterface FieldCache; // Expert: Maintains caches of term values.\nInterface FieldCache.Parser; // interface to all parsers.\nClass DocTermOrds; // This class enables fast access to multiple term ords for a specified field across all docIDs.\nClass FieldCache.CacheEntry; // EXPERT: A unique Identifier/Description for each item in the FieldCache.\nClass FieldCache.CreationPlaceholder; // Placeholder indicating creation of this cache is currently in-progress.\nClass FieldCache.PointParser; // Base class for points parsers.\nClass FieldCacheImpl; // Expert: The default cache implementation, storing all values in memory.\nClass FieldCacheImpl.BinaryDocValuesImpl;\nClass FieldCacheImpl.LongsFromArray;\nClass FieldCacheImpl.SortedDocValuesImpl;\nClass UninvertingReader; // A FilterReader that exposes indexed values as if they also had docvalues.\nClass UninvertingReader.FieldCacheStats; // Return information about the backing cache\nEnum UninvertingReader.Type; // Specifies the type of uninversion to apply for the field.\n", "des": "Support for creating docvalues on-the-fly from the inverted index at runtime."}
{"index": 142, "repo": "ignite-core-2.15.0", "code": "Package: encryption\n\nClasses and Interfaces: \nInterface EncryptionCacheKeyProvider; // Provider for cache's encryption keys.\nClass CacheGroupPageScanner; // Cache group page stores scanner.\nClass ChangeCacheEncryptionRequest; // Change cache group encryption key request.\nClass EncryptionMXBeanImpl; // Encryption features MBean.\nClass GenerateEncryptionKeyRequest; // Generate encryption key request.\nClass GenerateEncryptionKeyResponse; // Generate encryption key response.\nClass GridEncryptionManager; // Manages cache keys and EncryptionSpi instances.\nClass GridEncryptionManager.EmptyResult;\nClass GridEncryptionManager.KeyChangeFuture; // Key change future.\nClass GridEncryptionManager.NodeEncryptionKeys;\nClass GroupKey; // Cache group encryption key with identifier.\nClass GroupKeyEncrypted; // Cache group encryption key with identifier.\nClass ReencryptStateUtils;\n", "des": "Encryption manager classes."}
{"index": 3774, "repo": "lucene-analysis-common-9.7.0", "code": "Package: custom\n\nClasses and Interfaces: \nClass CustomAnalyzer; // A general-purpose Analyzer that can be created with a builder-style API.\nClass CustomAnalyzer.Builder; // Builder for CustomAnalyzer.\nClass CustomAnalyzer.ConditionBuilder; // Factory class for a ConditionalTokenFilter\n", "des": "A general-purpose Analyzer that can be created with a builder-style API."}
{"index": 3341, "repo": "opencms-core-15.0", "code": "Package: editablegroup\n\nClasses and Interfaces: \nInterface CmsEditableGroup.I_EmptyHandler; // Handles state changes when the group becomes empty/not empty.\nInterface CmsEditableGroup.I_HasError; // Interface for group row components that can have errors.\nInterface CmsEditableGroup.I_RowBuilder; // Builds editable group rows by wrapping other components.\nInterface I_CmsEditableGroupActionHandler; // Server side handler interface for button presses in a multivalue widget group row's button bar.\nInterface I_CmsEditableGroupRow; // Interface for components used as editable group rows.\nClass CmsDefaultActionHandler; // Default action handler for group buttons.\nClass CmsEditableGroup; // Manages a group of widgets used as a multivalue input.\nClass CmsEditableGroup.AddButtonEmptyHandler; // Empty handler which shows or hides an 'Add' button to add new rows, depending on whether the group is empty.\nClass CmsEditableGroup.DefaultRowBuilder; // Default implementation for row builder.\nClass CmsEditableGroupButtons; // Button bar for manipulating rows in a multivalued field list.\nClass CmsEditableGroupRow; // Default implementation for row for multivalue field lists.\n", "des": "Contains components for editing a homogeneous list of Vaadin components, often used for multivalued fields in dialogs."}
{"index": 1383, "repo": "spring-boot-actuator-3.1.1", "code": "Package: endpoint\n\nSub Packages: \npackage endpoint.annotation; // Annotation support for actuator endpoints.\npackage endpoint.invoke; // Interfaces and classes relating to invoking operation methods.\npackage endpoint.jackson; // Jackson support classes for actuator endpoints.\npackage endpoint.jmx; // JMX support for actuator endpoints.\npackage endpoint.web; // Web support for actuator endpoints.\n\nClasses and Interfaces: \npublic abstract class AbstractExposableEndpoint<O extends Operation> extends Object implements ExposableEndpoint<O>; // Abstract base class for ExposableEndpoint implementations.\npublic enum ApiVersion extends Enum<ApiVersion> implements Producible<ApiVersion>; // API versions supported for the actuator API.\n@FunctionalInterface public interface EndpointFilter<E extends ExposableEndpoint<?>>; // Strategy class that can be used to filter endpoints.\npublic final class EndpointId extends Object; // An identifier for an actuator endpoint.\n@FunctionalInterface public interface EndpointsSupplier<E extends ExposableEndpoint<?>>; // Provides access to a collection of endpoints.\npublic interface ExposableEndpoint<O extends Operation>; // Information describing an endpoint that can be exposed in some technology specific way.\npublic class InvalidEndpointRequestException extends RuntimeException; // Indicate that an endpoint request is invalid.\npublic class InvocationContext extends Object; // The context for the invocation of an operation.\npublic interface Operation; // An operation on an endpoint.\npublic interface OperationArgumentResolver; // Resolver for an argument of an Operation.\npublic interface OperationResponseBody; // Tagging interface used to indicate that an operation result is intended to be returned in the body of the response.\npublic enum OperationType extends Enum<OperationType>; // An enumeration of the different types of operation supported by an endpoint.\npublic interface Producible<E extends Enum<E> & Producible<E>>; // Interface that can be implemented by any Enum that represents a finite set of producible mime-types.\npublic class ProducibleOperationArgumentResolver extends Object implements OperationArgumentResolver; // An OperationArgumentResolver for producible enums.\npublic final class SanitizableData extends Object; // Value object that represents the data that can be used by a SanitizingFunction.\npublic class Sanitizer extends Object; // Strategy that should be used by endpoint implementations to sanitize potentially sensitive keys.\n", "des": "Endpoint support."}
{"index": 2161, "repo": "wicket-core-10.0.0-M1", "code": "Package: http\n\nSub Packages: \npackage http.request; // This package contains http (web) protocol dependent implementations of request processing strategies.\npackage http.servlet; // Java Servlet specific implementation of Wicket http classes.\n\nClasses and Interfaces: \npublic abstract class AbstractRequestLogger extends Object implements IRequestLogger; // Base class that collects request and session information for request logging to enable rich information about the events that transpired during a single request.\npublic class AjaxEnclosureListener extends Object implements AjaxRequestTarget.IListener; // This listener adds Enclosures to AjaxTarget, where the child controller of the said Enclosure is already added.\npublic class BufferedWebResponse extends org.apache.wicket.request.http.WebResponse implements IMetaDataBufferingWebResponse; // Subclass of WebResponse that buffers the actions and performs those on another response.\npublic class ClientProperties extends Object implements org.apache.wicket.util.io.IClusterable; // Description of various user agent (browser) properties.\npublic class ContextParamWebApplicationFactory extends Object implements IWebApplicationFactory; // Factory that creates application objects based on the class name specified in the ContextParamWebApplicationFactory.APP_CLASS_PARAM context variable.\npublic class FetchMetadataResourceIsolationPolicy extends Object implements IResourceIsolationPolicy; // Default resource isolation policy used in ResourceIsolationRequestCycleListener, based on https://web.dev/fetch-metadata/.\npublic interface IMetaDataBufferingWebResponse; // Any kind of response that buffers meta data such as cookies and headers and can unbuffer it into another response\npublic interface IMultipartWebRequest; // An interface providing access to multipart content uploads of a WebRequest\npublic interface IRequestLogger; // Interface for the request logger and viewer.\npublic static interface IRequestLogger.ISessionLogInfo; // This interface can be implemented in a custom session object.\npublic static class IRequestLogger.RequestData extends Object implements org.apache.wicket.util.io.IClusterable; // This class hold the information one request of a session has.\npublic static class IRequestLogger.SessionData extends Object implements org.apache.wicket.util.io.IClusterable, Comparable<IRequestLogger.SessionData>; // This class hold the information one request of a session has.\n@FunctionalInterface public interface IResourceIsolationPolicy; // Interface for the resource isolation policies.\n", "des": "HTTP implementation."}
{"index": 3427, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface ClassLoaderService; // A service for interacting with class loaders.\nInterface ClassLoaderService.Work<T>;\nClass ClassLoadingException; // Indicates a problem performing class loading.\n", "des": "The class loading service SPI."}
{"index": 1183, "repo": "commons-math3-3.6.1", "code": "Package: ode\n\nSub Packages: \npackage ode.events; // This package provides classes to handle discrete events occurring during Ordinary Differential Equations integration.\npackage ode.nonstiff; // This package provides classes to solve non-stiff Ordinary Differential Equations problems.\npackage ode.sampling; // This package provides classes to handle sampling steps during Ordinary Differential Equations integration.\n\nClasses and Interfaces: \nInterface FieldSecondaryEquations<T extends RealFieldElement<T>>; // This interface allows users to add secondary differential equations to a primary set of differential equations.\nInterface FirstOrderDifferentialEquations; // This interface represents a first order differential equations set.\nInterface FirstOrderFieldDifferentialEquations<T extends RealFieldElement<T>>; // This interface represents a first order differential equations set.\nInterface FirstOrderFieldIntegrator<T extends RealFieldElement<T>>; // This interface represents a first order integrator for differential equations.\nInterface FirstOrderIntegrator; // This interface represents a first order integrator for differential equations.\nInterface MainStateJacobianProvider; // Interface expanding first order differential equations in order to compute exactly the main state jacobian matrix for partial derivatives equations.\nInterface MultistepIntegrator.NordsieckTransformer; // as of 3.6 this unused interface is deprecated\nInterface ODEIntegrator; // This interface defines the common parts shared by integrators for first and second order differential equations.\nInterface Parameterizable; // This interface enables to process any parameterizable object.\nInterface ParameterizedODE; // Interface to compute by finite difference Jacobian matrix for some parameter when computing partial derivatives equations.\nInterface ParameterJacobianProvider; // Interface to compute exactly Jacobian matrix for some parameter when computing partial derivatives equations.\nInterface SecondaryEquations; // This interface allows users to add secondary differential equations to a primary set of differential equations.\nInterface SecondOrderDifferentialEquations; // This interface represents a second order differential equations set.\nInterface SecondOrderIntegrator; // This interface represents a second order integrator for differential equations.\nClass AbstractFieldIntegrator<T extends RealFieldElement<T>>; // Base class managing common boilerplate for all integrators.\n", "des": "This package provides classes to solve Ordinary Differential Equations problems."}
{"index": 2844, "repo": "spring-integration-core-6.1.2", "code": "Package: channel\n\nSub Packages: \npackage channel.interceptor; // Provides classes related to channel interception.\n\nClasses and Interfaces: \npublic abstract class AbstractExecutorChannel extends AbstractSubscribableChannel implements ExecutorChannelInterceptorAware; // The AbstractSubscribableChannel base implementation for those inheritors which logic may be based on the Executor.\n@IntegrationManagedResource public abstract class AbstractMessageChannel extends IntegrationObjectSupport implements org.springframework.messaging.MessageChannel, TrackableComponent, org.springframework.messaging.support.InterceptableChannel, IntegrationManagement, IntegrationPattern; // Base class for MessageChannel implementations providing common properties such as the channel name.\nprotected static class AbstractMessageChannel.ChannelInterceptorList extends Object; // A convenience wrapper class for the list of ChannelInterceptors.\npublic abstract class AbstractPollableChannel extends AbstractMessageChannel implements org.springframework.messaging.PollableChannel, ExecutorChannelInterceptorAware; // Base class for all pollable channels.\npublic abstract class AbstractSubscribableChannel extends AbstractMessageChannel implements org.springframework.messaging.SubscribableChannel, SubscribableChannelManagement; // Base implementation of MessageChannel that invokes the subscribed handler(s) by delegating to a MessageDispatcher.\npublic interface BroadcastCapableChannel extends org.springframework.messaging.SubscribableChannel; // A SubscribableChannel variant for implementations with broadcasting capabilities.\npublic class ChannelPurger extends Object; // A utility class for purging Messages from one or more QueueChannels.\npublic final class ChannelUtils extends Object; // Channel utilities.\npublic class DefaultHeaderChannelRegistry extends IntegrationObjectSupport implements HeaderChannelRegistry, ManageableLifecycle, Runnable; // Converts a channel to a name, retaining a reference to the channel keyed by the name.\nprotected static record DefaultHeaderChannelRegistry.MessageChannelWrapper(org.springframework.messaging.MessageChannel channel, long expireAt) extends Record;\npublic class DirectChannel extends AbstractSubscribableChannel; // A channel that invokes a single subscriber for each sent Message.\npublic class ExecutorChannel extends AbstractExecutorChannel; // An implementation of MessageChannel that delegates to an instance of UnicastingDispatcher which in turn delegates all dispatching invocations to an Executor.\n", "des": "Provides classes representing various channel types."}
{"index": 3131, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface ConnectionObserver; // An observer of logical connection events.\nInterface InvalidatableWrapper<T>; // Specialized JdbcWrapper contract for wrapped objects that can additioanlly be invalidated\nInterface JdbcCoordinator; // Coordinates JDBC-related activities.\nInterface JdbcServices; // Contract for services around JDBC operations.\nInterface JdbcWrapper<T>; // Generic contract for wrapped JDBC objects.\nInterface NonDurableConnectionObserver; // Additional optional contract for connection observers to indicate that they should be released when the physical connection is released.\nInterface ResultSetReturn; // Contract for extracting ResultSets from Statements, executing Statements, managing Statement/ResultSet resources, and logging statement calls.\nInterface ResultSetWrapper;\nInterface SchemaNameResolver; // Contract for resolving the schema of a Connection.\nInterface SqlExceptionHelper.WarningHandler; // Contract for handling warnings\nInterface StatementPreparer; // Contracting for preparing SQL statements\nClass ConnectionObserverAdapter; // A no-op adapter for ConnectionObserver.\nClass SqlExceptionHelper; // Helper for handling SQLExceptions in various manners.\nClass SqlExceptionHelper.StandardWarningHandler; // Standard SQLWarning handler for logging warnings\nClass SqlExceptionHelper.WarningHandlerLoggingSupport; // Basic support for SqlExceptionHelper.WarningHandler implementations which handle warnings\nClass SqlStatementLogger; // Centralize logging for SQL statements.\nClass TypeInfo; // Models type info extracted from DatabaseMetaData.getTypeInfo()\nEnum TypeNullability; // Describes the instrinsic nullability of a data type as reported by the JDBC driver.\nEnum TypeSearchability; // Describes the searchability of a data type as reported by the JDBC driver.\n", "des": "SPI contracts for supporting various aspects of JDBC interaction"}
{"index": 3478, "repo": "hilt-android-2.47", "code": "Package: qualifiers\n\nClasses and Interfaces: \nAnnotation Type ActivityContext; // Annotation for a Context that corresponds to the activity.\nAnnotation Type ApplicationContext; // Annotation for an Application Context dependency.\n", "des": "This package contains Hilt's built-in Android Qualifier annotations."}
{"index": 530, "repo": "commons-vfs2-2.9.0", "code": "Package: ram\n\nClasses and Interfaces: \nClass RamFileObject; // A RAM File contains a single RAM FileData instance, it provides methods to access the data by implementing FileObject interface.\nClass RamFileOutputStream; // OutputStream to a RamFile.\nClass RamFileProvider; // RAM File Provider.\nClass RamFileRandomAccessContent; // RAM File Random Access Content.\nClass RamFileSystem; // A RAM File System.\nClass RamFileSystemConfigBuilder; // Config Builder for the RAM file system.\n", "des": "The RAM File Provider."}
{"index": 437, "repo": "commons-pool2-2.11.1", "code": "Package: impl\n\nClasses and Interfaces: \nInterface CallStack; // Strategy for obtaining and printing the current call stack.\nInterface DefaultPooledObjectInfoMBean; // The interface that defines the information about pooled objects that will be exposed via JMX.\nInterface EvictionPolicy<T>; // To provide a custom eviction policy (i.e.\nInterface GenericKeyedObjectPoolMXBean<K>; // Defines the methods that will be made available via JMX.\nInterface GenericObjectPoolMXBean; // Defines the methods that will be made available via JMX.\nClass AbandonedConfig; // Configuration settings for abandoned object removal.\nClass BaseGenericObjectPool<T>; // Base class that provides common functionality for GenericObjectPool and GenericKeyedObjectPool.\nClass BaseObjectPoolConfig<T>; // Provides the implementation for the common attributes shared by the sub-classes.\nClass CallStackUtils; // Utility methods for CallStack.\nClass DefaultEvictionPolicy<T>; // Provides the default implementation of EvictionPolicy used by the pools.\nClass DefaultPooledObject<T>; // This wrapper is used to track the additional information, such as state, for the pooled objects.\nClass DefaultPooledObjectInfo; // Implementation of object that is used to provide information on pooled objects via JMX.\nClass EvictionConfig; // This class is used by pool implementations to pass configuration information to EvictionPolicy instances.\nClass GenericKeyedObjectPool<K,T>; // A configurable KeyedObjectPool implementation.\nClass GenericKeyedObjectPoolConfig<T>; // A simple \"struct\" encapsulating the configuration for a GenericKeyedObjectPool.\nClass GenericObjectPool<T>; // A configurable ObjectPool implementation.\nClass GenericObjectPoolConfig<T>; // A simple \"struct\" encapsulating the configuration for a GenericObjectPool.\nClass NoOpCallStack; // CallStack strategy using no-op implementations of all functionality.\nClass PooledSoftReference<T>; // Extension of DefaultPooledObject to wrap pooled soft references.\nClass SecurityManagerCallStack; // A CallStack strategy using a SecurityManager.\nClass SoftReferenceObjectPool<T>; // A SoftReference based ObjectPool.\nClass ThrowableCallStack; // CallStack strategy that uses the stack trace from a Throwable.\n", "des": "Object pooling API implementations."}
{"index": 835, "repo": "calcite-core-1.34.0", "code": "Package: visualizer\n\nClasses and Interfaces: \nClass RuleMatchVisualizer; // This is a tool to visualize the rule match process of a RelOptPlanner.\n", "des": "A visualizer showing how the rules are applied step-by-step."}
{"index": 3406, "repo": "commons-imaging-1.0-alpha3", "code": "Package: constants\n\nClasses and Interfaces: \nClass AdobePageMaker6TagConstants; // TIFF specification supplement 1 Enhancements for Adobe PageMaker(R) 6.0 software http://partners.adobe.com/public/developer/en/tiff/TIFFPM6.pdf\nClass AdobePhotoshopTagConstants; // TIFF specification supplement 2 Adobe Photoshop (R) TIFF Technical Notes http://partners.adobe.com/public/developer/en/tiff/TIFFphotoshop.pdf\nClass AliasSketchbookProTagConstants; // Alias Sketchbook Pro multi-layer TIFF http://www.awaresystems.be/imaging/tiff/tifftags/docs/alias.html\nClass DcfTagConstants; // Design rule for Camera Filesystem http://www.exif.org/dcf.PDF\nClass DngTagConstants; // Digital Negative (DNG) Specification http://www.adobe.com/products/dng/pdfs/dng_spec_1_3_0_0.pdf\nClass ExifTagConstants; // References: http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/EXIF.html http://tiki-lounge.com/~raf/tiff/fields.html http://www.awaresystems.be/imaging/tiff/tifftags.html \"Stonits\": http://www.anyhere.com/gward/pixformat/tiffluv.html\nClass GdalLibraryTagConstants; // GDAL library.\nClass GeoTiffTagConstants; // Geo Tiff.\nClass GpsTagConstants;\nClass HylaFaxTagConstants;\nClass MicrosoftHdPhotoTagConstants; // Microsoft's HDP/WDP file format.\nClass MicrosoftTagConstants; // Largely undocumented and derived by experimentation.\nClass MolecularDynamicsGelTagConstants; // Molecular Dynamics GEL file format http://www.awaresystems.be/imaging/tiff/tifftags/docs/gel.html\nClass OceScanjobTagConstants; // Oce Scanjob.\n", "des": "TIFF constants."}
{"index": 2160, "repo": "wicket-core-10.0.0-M1", "code": "Package: model\n\nClasses and Interfaces: \npublic abstract class AbstractPropertyModel<T> extends ChainingModel<T> implements IObjectClassAwareModel<T>, IPropertyReflectionAwareModel<T>; // Serves as a base class for different kinds of property models.\npublic class ChainingModel<T> extends Object implements IModel<T>; // This model and its subclasses support chaining of IModels.\npublic class ComponentDetachableModel<T> extends Object implements IComponentAssignedModel<T>; // Quick detachable model that is implements the IComponentAssignedModel and the IModel interfaces.\npublic class ComponentModel<T> extends Object implements IModel<T>, IComponentAssignedModel<T>; // Quick model that is implements the IComponentAssignedModel and the IModel interfaces.\npublic class ComponentPropertyModel<T> extends Object implements IComponentAssignedModel<T>; // A model that references a property by name on the current model of the component it is bound to.\npublic class CompoundPropertyModel<T> extends ChainingModel<T> implements IComponentInheritedModel<T>; // A simple compound model which uses the component's name as the property expression to retrieve properties on the nested model object.\npublic interface IComponentAssignedModel<T> extends IModel<T>; // Models that wish to substitute themselves with a wrapper when they are bound to a component (either through IModel parameter in a constructor or via a call to Component.setDefaultModel(IModel)) should implement this interface.\npublic interface IComponentInheritedModel<T> extends IModel<T>; // This is a marker interface for models that can be inherited from components higher in the hierarchy.\npublic interface IDetachable extends org.apache.wicket.util.io.IClusterable; // Interface to logic for detaching transient information from a detachable model.\n@FunctionalInterface public interface IModel<T> extends IDetachable; // A IModel wraps the actual model Object used by a Component.\n@FunctionalInterface public interface IModelComparator extends org.apache.wicket.util.io.IClusterable; // Implementations of this interface compare model object.\npublic interface IObjectClassAwareModel<T> extends IModel<T>; // Interface implemented by model that can provide class of the model object.\n", "des": "Core model support for Wicket components."}
{"index": 391, "repo": "hbase-mapreduce-3.0.0-alpha-4", "code": "Package: mapreduce\n\nClasses and Interfaces: \nInterface VisibilityExpressionResolver; // Interface to convert visibility expressions into Tags for storing along with Cells in HFiles.\nClass CellCounter; // A job with a a map and reduce phase to count cells in a table.\nClass CellCreator; // Facade to create Cells for HFileOutputFormat.\nClass CellSerialization;\nClass CellSerialization.CellDeserializer;\nClass CellSerialization.CellSerializer;\nClass CellSortReducer; // Emits sorted Cells.\nClass CopyTable; // Tool used to copy a table to another one which can be on a different setup.\nClass DefaultVisibilityExpressionResolver; // This implementation creates tags by expanding expression using label ordinal.\nClass Driver; // Driver for hbase mapreduce jobs.\nClass Export; // Export an HBase table.\nClass ExportUtils; // Some helper methods are used by Export and org.apache.hadoop.hbase.coprocessor.Export (in hbase-endpooint).\nClass ExtendedCellSerialization; // Similar to CellSerialization, but includes the sequenceId from an ExtendedCell.\nClass ExtendedCellSerialization.ExtendedCellDeserializer;\nClass ExtendedCellSerialization.ExtendedCellSerializer;\nClass GroupingTableMapper; // Extract grouping columns from input record.\nClass HashTable;\nClass HashTable.HashMapper;\nClass HashTable.TableHash;\nClass HFileInputFormat; // Simple MR input format for HFiles.\nClass HFileOutputFormat2; // Writes HFiles.\nClass HRegionPartitioner<KEY,VALUE>; // This is used to partition the output keys into groups of keys.\nClass IdentityTableMapper; // Pass the given key and record as-is to the reduce phase.\nClass IdentityTableReducer; // Convenience class that simply writes all values (which must be Put or Delete instances) passed to it out to the configured HBase table.\nClass Import; // Import data written by Export.\nClass Import.CellImporter; // A mapper that just writes out KeyValues.\nClass Import.CellReducer;\nClass Import.CellSortImporter;\nClass Import.CellWritableComparable;\nClass Import.CellWritableComparable.CellWritableComparator;\nClass Import.CellWritableComparablePartitioner;\nClass Import.Importer; // Write table content out to files in hdfs.\nClass ImportTsv; // Tool to import data from a TSV file.\n", "des": "Provides HBase MapReduce Input/OutputFormats, a table indexing MapReduce job, and utility methods."}
{"index": 3362, "repo": "opencms-core-15.0", "code": "Package: serialdate\n\nClasses and Interfaces: \nInterface I_CmsSerialDateBean; // Interface for serial date beans.\nClass A_CmsSerialDateBean; // Abstract base class for serial date beans.\nClass CmsSerialDateBeanDaily; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a daily base.\nClass CmsSerialDateBeanFactory; // Wrapper for the value stored by the CmsSerialDateWidget that provides easy access.\nClass CmsSerialDateBeanIndividual; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified as individual dates.\nClass CmsSerialDateBeanMonthly; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a monthly base.\nClass CmsSerialDateBeanMonthlyWeeks; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a monthly base.\nClass CmsSerialDateBeanSingle; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles single events.\nClass CmsSerialDateBeanWeekly; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a weekly base.\nClass CmsSerialDateBeanWorkingDays; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a daily base.\nClass CmsSerialDateBeanYearly; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a yearly base.\nClass CmsSerialDateBeanYearlyWeekday; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a yearly base.\nClass CmsSerialDateValue; // Server-side implementation of I_CmsSerialDateValue.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains the server-side widget implementation, for the serial date widget.."}
{"index": 3349, "repo": "opencms-core-15.0", "code": "Package: permissions\n\nClasses and Interfaces: \nInterface CmsPermissionView.PermissionChangeHandler; // Permission change handler.\nInterface CmsPrincipalSelect.I_PrincipalSelectHandler; // Handles the principal selection.\nInterface I_CmsPrincipalSelect; // Interface for use of CmsPrincipleSelectDialog.\nClass CmsPermissionBean; // Bean for permissions which have changed.\nClass CmsPermissionDialog; // The permission dialog.\nClass CmsPermissionView; // Displays the permission settings for a single principal.\nClass CmsPermissionViewTable; // Table for the ACE Entries.\nClass CmsPrincipalSelect; // The principal select widget.\nClass CmsPrincipalSelectDialog; // Class for the dialog to show the principal table.\nClass CmsPrincipalSelectExtension; // The principal select extension.\nClass CmsPrincipalTable; // Table to selecet principals used in the CmsPrincipalSelect vaadin element.\nEnum CmsPrincipalSelect.PrincipalType; // Type of principal.\nEnum CmsPrincipalSelect.WidgetType; // The widget types.\n", "des": "Contains permission dialog classes."}
{"index": 1847, "repo": "spring-test-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractContextLoader extends Object implements SmartContextLoader; // Abstract application context loader that provides a basis for all concrete implementations of the ContextLoader SPI.\npublic abstract class AbstractDelegatingSmartContextLoader extends Object implements AotContextLoader; // AbstractDelegatingSmartContextLoader serves as an abstract base class for implementations of the SmartContextLoader SPI that delegate to a set of candidate SmartContextLoaders (i.e., one that supports XML configuration files or Groovy scripts and one that supports annotated classes) to determine which context loader is appropriate for a given test class's configuration.\npublic abstract class AbstractDirtiesContextTestExecutionListener extends AbstractTestExecutionListener; // Abstract base class for TestExecutionListener implementations that provide support for marking the ApplicationContext associated with a test as dirty for both test classes and test methods annotated with the @DirtiesContext annotation.\npublic abstract class AbstractGenericContextLoader extends AbstractContextLoader implements AotContextLoader; // Abstract, generic extension of AbstractContextLoader that loads a GenericApplicationContext.\npublic abstract class AbstractTestContextBootstrapper extends Object implements TestContextBootstrapper; // Abstract implementation of the TestContextBootstrapper interface which provides most of the behavior required by a bootstrapper.\npublic abstract class AbstractTestExecutionListener extends Object implements TestExecutionListener, org.springframework.core.Ordered; // Abstract ordered implementation of the TestExecutionListener API.\npublic class AnnotationConfigContextLoader extends AbstractGenericContextLoader; // Concrete implementation of AbstractGenericContextLoader that loads bean definitions from component classes.\npublic abstract class AnnotationConfigContextLoaderUtils extends Object; // Utility methods for SmartContextLoaders that deal with component classes (e.g., @Configuration classes).\npublic class DefaultActiveProfilesResolver extends Object implements ActiveProfilesResolver; // Default implementation of the ActiveProfilesResolver strategy that resolves active bean definition profiles based solely on profiles configured declaratively via ActiveProfiles.profiles() or ActiveProfiles.value().\npublic class DefaultBootstrapContext extends Object implements BootstrapContext; // Default implementation of the BootstrapContext interface.\npublic class DefaultTestContext extends Object implements TestContext; // Default implementation of the TestContext interface.\npublic class DefaultTestContextBootstrapper extends AbstractTestContextBootstrapper; // Default implementation of the TestContextBootstrapper SPI.\n", "des": "Support classes for the Spring TestContext Framework."}
{"index": 3483, "repo": "opennlp-uima-2.2.0", "code": "Package: namefind\n\nClasses and Interfaces: \nInterface TokenNameFinderModelResource;\nClass DictionaryNameFinder;\nClass NameFinder; // OpenNLP Name annotator.\nClass TokenNameFinderModelResourceImpl;\n", "des": "Package related to finding proper names and numeric amounts."}
{"index": 3473, "repo": "hilt-android-2.47", "code": "Package: android\n\nSub Packages: \npackage android.components; // This package contains Hilt's built-in Components for Android.\npackage android.flags; // Runtime flags to control Hilt behavior for rollout of changes.\npackage android.lifecycle; // This package contains Hilt APIs for Android applications.\npackage android.migration; // This package contains Android APIs to help migrating a codebase to Hilt.\npackage android.qualifiers; // This package contains Hilt's built-in Android Qualifier annotations.\npackage android.scopes; // This package contains Hilt's built-in Android Scope annotations.\n\nClasses and Interfaces: \nInterface ActivityRetainedLifecycle; // A ActivityRetainedLifecycle class is associated with the lifecycle of the ActivityRetainedComponent.\nInterface ActivityRetainedLifecycle.OnClearedListener; // Listener for receiving a callback for when the ActivityRetainedComponent will no longer be used and destroyed.\nInterface ViewModelLifecycle; // A class for registering listeners on the ViewModel lifecycle.\nClass EarlyEntryPoints; // Static utility methods for accessing entry points annotated with EarlyEntryPoint.\nAnnotation Type AndroidEntryPoint; // Marks an Android component class to be setup for injection with the standard Hilt Dagger Android components.\nAnnotation Type EarlyEntryPoint; // An escape hatch for when a Hilt entry point usage needs to be called before the singleton component is available in a Hilt test.\nAnnotation Type HiltAndroidApp; // Annotation for marking the Application class where the Dagger components should be generated.\nAnnotation Type WithFragmentBindings; // Makes a View annotated with AndroidEntryPoint have access to fragment bindings.\n", "des": "This package contains Hilt APIs for Android applications."}
{"index": 1043, "repo": "commons-io-2.13.0", "code": "Package: charset\n\nClasses and Interfaces: \nClass CharsetDecoders; // Works with CharsetDecoder.\nClass CharsetEncoders; // Works with CharsetEncoder.\n", "des": "Provides classes to work with code from java.nio.charset."}
{"index": 2410, "repo": "spring-batch-core-5.0.2", "code": "Package: tasklet\n\nClasses and Interfaces: \npublic class CallableTaskletAdapter extends Object implements Tasklet, org.springframework.beans.factory.InitializingBean; // Adapts a Callable<RepeatStatus> to the Tasklet interface.\npublic interface CommandRunner; // Strategy interface for executing commands.\npublic class ConfigurableSystemProcessExitCodeMapper extends Object implements SystemProcessExitCodeMapper; // Maps exit codes to ExitStatus according to injected map.\npublic class JvmCommandRunner extends Object implements CommandRunner; // Implementation of the CommandRunner interface that calls the standard Runtime.exec(java.lang.String) method.\npublic class MethodInvokingTaskletAdapter extends AbstractMethodInvokingDelegator<Object> implements Tasklet; // A Tasklet that wraps a method in a POJO.\npublic class SimpleSystemProcessExitCodeMapper extends Object implements SystemProcessExitCodeMapper; // Simple SystemProcessExitCodeMapper implementation that performs following mapping: 0 -> ExitStatus.FINISHED else -> ExitStatus.FAILED\npublic interface StoppableTasklet extends Tasklet; // An extension to the Tasklet interface to allow users to add logic for stopping a tasklet.\npublic class SystemCommandException extends RuntimeException; // Exception indicating failed execution of system command.\npublic class SystemCommandTasklet extends Object implements StepExecutionListener, StoppableTasklet, org.springframework.beans.factory.InitializingBean; // Tasklet that executes a system command.\npublic interface SystemProcessExitCodeMapper; // Maps the exit code of a system process to ExitStatus value returned by a system command.\n@FunctionalInterface public interface Tasklet; // Strategy for processing in a step.\npublic class TaskletStep extends AbstractStep; // Simple implementation of executing the step as a call to a Tasklet, possibly repeated, and each call surrounded by a transaction.\npublic class UncheckedTransactionException extends RuntimeException; // Convenience wrapper for a checked exception so that it can cause a rollback and be extracted afterwards.\n", "des": "Interfaces and generic implementations of tasklet concerns."}
{"index": 1742, "repo": "spring-batch-integration-5.0.2", "code": "Package: xml\n\nClasses and Interfaces: \npublic class BatchIntegrationNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // The namespace handler for the Spring Batch Integration namespace.\npublic class JobLaunchingGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // The parser for the Job-Launching Gateway, which will instantiate a JobLaunchingGatewayParser.\npublic class RemoteChunkingManagerParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser; // Parser for the remote-chunking-manager namespace element.\npublic class RemoteChunkingWorkerParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser; // Parser for the remote-chunking-worker namespace element.\n", "des": "APIs for the configuration of Spring Integration components through XML."}
{"index": 430, "repo": "kafka-streams-3.5.0", "code": "Package: errors\n\nClasses and Interfaces: \nInterface DeserializationExceptionHandler; // Interface that specifies how an exception from source node deserialization (e.g., reading from Kafka) should be handled.\nInterface ProductionExceptionHandler; // Interface that specifies how an exception when attempting to produce a result to Kafka should be handled.\nInterface StreamsUncaughtExceptionHandler;\nClass DefaultProductionExceptionHandler; // ProductionExceptionHandler that always instructs streams to fail when an exception happens while attempting to produce result records.\nClass LogAndContinueExceptionHandler; // Deserialization handler that logs a deserialization exception and then signals the processing pipeline to continue processing more records.\nClass LogAndFailExceptionHandler; // Deserialization handler that logs a deserialization exception and then signals the processing pipeline to stop processing more records and fail.\nEnum DeserializationExceptionHandler.DeserializationHandlerResponse; // Enumeration that describes the response from the exception handler.\nEnum ProductionExceptionHandler.ProductionExceptionHandlerResponse;\nEnum StreamsUncaughtExceptionHandler.StreamThreadExceptionResponse; // Enumeration that describes the response from the exception handler.\nClass BrokerNotFoundException; // Indicates that none of the specified brokers could be found.\nClass InvalidStateStoreException; // Indicates that there was a problem when trying to access a StateStore.\nClass InvalidStateStorePartitionException; // Indicates that the specific state store being queried via StoreQueryParameters used a partitioning that is not assigned to this instance.\nClass LockException; // Indicates that the state store directory lock could not be acquired because another thread holds the lock.\nClass MissingSourceTopicException;\nClass ProcessorStateException; // Indicates a processor state operation (e.g.\nClass StateStoreMigratedException; // Indicates that the state store being queried is closed although the Kafka Streams state is RUNNING or REBALANCING.\nClass StateStoreNotAvailableException; // Indicates that the state store being queried is already closed.\nClass StreamsException; // StreamsException is the top-level exception type generated by Kafka Streams, and indicates errors have occurred during a StreamThread's processing.\nClass StreamsNotStartedException; // Indicates that Kafka Streams is in state CREATED and thus state stores cannot be queries yet.\nClass StreamsRebalancingException; // Indicates that Kafka Streams is in state REBALANCING and thus cannot be queried by default.\n", "des": "Provides common exception classes for Streams applications."}
{"index": 954, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: dom\n\nClasses and Interfaces: \nClass Dom4jPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports dom4j elements.\nClass DomPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports W3C DOM elements.\nClass JDomPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports JDOM elements.\nClass XomPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports XOM elements.\n", "des": "Provides DOM-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces."}
{"index": 2893, "repo": "spring-integration-core-6.1.2", "code": "Package: transformer\n\nSub Packages: \npackage transformer.support; // Contains support classes for Transformers.\n\nClasses and Interfaces: \npublic abstract class AbstractMessageProcessingTransformer extends Object implements Transformer, org.springframework.beans.factory.BeanFactoryAware, ManageableLifecycle; // Base class for Message Transformers that delegate to a MessageProcessor.\npublic abstract class AbstractPayloadTransformer<T,U> extends AbstractTransformer; // A base class for Transformer implementations that modify the payload of a Message.\npublic abstract class AbstractTransformer extends IntegrationObjectSupport implements Transformer; // A base class for Transformer implementations.\npublic class ClaimCheckInTransformer extends AbstractTransformer implements IntegrationPattern; // Transformer that stores a Message and returns a new Message whose payload is the id of the stored Message.\npublic class ClaimCheckOutTransformer extends AbstractTransformer implements IntegrationPattern; // Transformer that accepts a Message whose payload is a UUID and retrieves the Message associated with that id from a MessageStore if available.\npublic class ContentEnricher extends AbstractReplyProducingMessageHandler implements ManageableLifecycle; // Content Enricher is a Message Transformer that can augment a message's payload with either static values or by optionally invoking a downstream message flow via its request channel and then applying values from the reply Message to the original payload.\npublic class DecodingTransformer<T> extends AbstractTransformer; // AbstractPayloadTransformer that delegates to a codec to decode the payload from a byte[].\npublic class EncodingPayloadTransformer<T> extends AbstractPayloadTransformer<T,byte[]>; // AbstractPayloadTransformer that delegates to a codec to encode the payload into a byte[].\npublic class ExpressionEvaluatingTransformer extends AbstractMessageProcessingTransformer; // A Message Transformer implementation that evaluates the specified SpEL expression.\npublic class FromProtobufTransformer extends AbstractTransformer implements org.springframework.beans.factory.BeanClassLoaderAware; // A Protocol Buffer transformer to instantiate Message objects from either byte[] if content type is application/x-protobuf or from String in case of application/json content type.\npublic class HeaderEnricher extends IntegrationObjectSupport implements Transformer, IntegrationPattern; // A Transformer that adds statically configured header values to a Message.\npublic class HeaderFilter extends IntegrationObjectSupport implements Transformer, IntegrationPattern; // Transformer that removes Message headers.\npublic class MapToObjectTransformer extends AbstractPayloadTransformer<Map<?,?>,Object>; // Will transform Map to an instance of Object.\n", "des": "Contains core-implementation of various Transformers which includes Enrichers and Filters."}
{"index": 2559, "repo": "pulsar-common-3.0.0", "code": "Package: policies\n\nSub Packages: \npackage policies.data; // Definition of different data structures for policies.\npackage policies.impl; // Implementation of policies.\npackage policies.path; // Paths for pulsar policies.\n\nClasses and Interfaces: \npublic interface NamespaceIsolationPolicy; // Namespace isolation policy.\n", "des": "Common policies."}
{"index": 1904, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: codec\n\nClasses and Interfaces: \n@ConfigurationProperties(prefix=\"spring.codec\") public class CodecProperties extends Object; // properties for reactive codecs.\n", "des": "Auto-configuration for reactive codecs."}
{"index": 2344, "repo": "spring-boot-3.1.1", "code": "Package: context\n\nClasses and Interfaces: \npublic interface ConfigurableWebServerApplicationContext extends org.springframework.context.ConfigurableApplicationContext, WebServerApplicationContext; // SPI interface to be implemented by most if not all web server application contexts.\npublic class MissingWebServerFactoryBeanException extends org.springframework.beans.factory.NoSuchBeanDefinitionException; // Exception thrown when there is no WebServerFactory bean of the required type defined in a WebServerApplicationContext.\npublic class ServerPortInfoApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>, org.springframework.context.ApplicationListener<WebServerInitializedEvent>; // ApplicationContextInitializer that sets Environment properties for the ports that WebServer servers are actually listening on.\npublic interface WebServerApplicationContext extends org.springframework.context.ApplicationContext; // Interface to be implemented by application contexts that create and manage the lifecycle of an embedded WebServer.\npublic final class WebServerGracefulShutdownLifecycle extends Object implements org.springframework.context.SmartLifecycle; // SmartLifecycle to trigger WebServer graceful shutdown.\npublic abstract class WebServerInitializedEvent extends org.springframework.context.ApplicationEvent; // Event to be published when the WebServer is ready.\npublic class WebServerPortFileWriter extends Object implements org.springframework.context.ApplicationListener<WebServerInitializedEvent>; // An ApplicationListener that saves embedded server port and management port into file.\n", "des": "Web integrations with Spring's ApplicationContext."}
{"index": 3663, "repo": "solr-core-9.3.0", "code": "Package: index\n\nClasses and Interfaces: \nClass DefaultMergePolicyFactory; // A MergePolicyFactory for the default MergePolicy.\nClass LogByteSizeMergePolicyFactory; // A MergePolicyFactory for LogByteSizeMergePolicy objects.\nClass LogDocMergePolicyFactory; // A MergePolicyFactory for LogDocMergePolicy objects.\nClass MergePolicyFactory; // A factory for creating a MergePolicy.\nClass MergePolicyFactoryArgs;\nClass NoMergePolicyFactory;\nClass SimpleMergePolicyFactory; // A MergePolicyFactory for simple MergePolicy objects.\nClass SlowCompositeReaderWrapper; // This class forces a composite reader (eg a MultiReader or DirectoryReader) to emulate a LeafReader.\nClass SortingMergePolicy;\nClass SortingMergePolicyFactory; // A MergePolicyFactory for SortingMergePolicy objects.\nClass TieredMergePolicyFactory; // A MergePolicyFactory for TieredMergePolicy objects.\nClass UpgradeIndexMergePolicyFactory; // A MergePolicyFactory for UpgradeIndexMergePolicy objects.\nClass WrapperMergePolicyFactory; // A MergePolicyFactory for wrapping additional factories.\n", "des": "Indexing related classes."}
{"index": 1191, "repo": "commons-math3-3.6.1", "code": "Package: noderiv\n\nClasses and Interfaces: \nClass AbstractSimplex; // This class implements the simplex concept.\nClass BOBYQAOptimizer; // Powell's BOBYQA algorithm.\nClass CMAESOptimizer; // An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES) for non-linear, non-convex, non-smooth, global function minimization.\nClass CMAESOptimizer.PopulationSize; // Population size.\nClass CMAESOptimizer.Sigma; // Input sigma values.\nClass MultiDirectionalSimplex; // This class implements the multi-directional direct search method.\nClass NelderMeadSimplex; // This class implements the Nelder-Mead simplex algorithm.\nClass PowellOptimizer; // Powell's algorithm.\nClass SimplexOptimizer; // This class implements simplex-based direct search optimization.\n", "des": "This package provides optimization algorithms that do not require derivatives."}
{"index": 2451, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: amqp\n\nClasses and Interfaces: \n@AutoConfiguration(after={MetricsAutoConfiguration.class,org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnClass({com.rabbitmq.client.ConnectionFactory.class,org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.class}) @ConditionalOnBean({org.springframework.amqp.rabbit.connection.ConnectionFactory.class,io.micrometer.core.instrument.MeterRegistry.class}) public class RabbitMetricsAutoConfiguration extends Object; // Auto-configuration for metrics on all available connection factories.\n", "des": "Auto-configuration for RabbitMQ metrics."}
{"index": 2525, "repo": "spring-security-core-6.1.2", "code": "Package: authentication\n\nSub Packages: \npackage authentication.dao; // An AuthenticationProvider which relies upon a data access object.\npackage authentication.event; // Authentication success and failure events which can be published to the Spring application context.\npackage authentication.jaas; // An authentication provider for JAAS.\n\nClasses and Interfaces: \npublic abstract class AbstractAuthenticationToken extends Object implements Authentication, CredentialsContainer; // Base class for Authentication objects.\npublic abstract class AbstractUserDetailsReactiveAuthenticationManager extends Object implements ReactiveAuthenticationManager, org.springframework.context.MessageSourceAware; // A base ReactiveAuthenticationManager that allows subclasses to override and work with UserDetails objects.\npublic class AccountExpiredException extends AccountStatusException; // Thrown if an authentication request is rejected because the account has expired.\npublic abstract class AccountStatusException extends AuthenticationException; // Base class for authentication exceptions which are caused by a particular user account status (locked, disabled etc).\npublic class AccountStatusUserDetailsChecker extends Object implements UserDetailsChecker, org.springframework.context.MessageSourceAware;\npublic class AnonymousAuthenticationProvider extends Object implements AuthenticationProvider, org.springframework.context.MessageSourceAware; // An AuthenticationProvider implementation that validates AnonymousAuthenticationTokens.\npublic class AnonymousAuthenticationToken extends AbstractAuthenticationToken implements Serializable; // Represents an anonymous Authentication.\npublic class AuthenticationCredentialsNotFoundException extends AuthenticationException; // Thrown if an authentication request is rejected because there is no Authentication object in the SecurityContext.\npublic interface AuthenticationDetailsSource<C,T>; // Provides a Authentication.getDetails() object for a given web request.\npublic interface AuthenticationEventPublisher;\npublic interface AuthenticationManager; // Processes an Authentication request.\npublic interface AuthenticationManagerResolver<C>; // An interface for resolving an AuthenticationManager based on the provided context\npublic class AuthenticationObservationContext extends io.micrometer.observation.Observation.Context; // An Observation.Context used during authentications\npublic final class AuthenticationObservationConvention extends Object implements io.micrometer.observation.ObservationConvention<AuthenticationObservationContext>; // An ObservationConvention for translating authentications into KeyValues.\npublic interface AuthenticationProvider; // Indicates a class can process a specific Authentication implementation.\npublic class AuthenticationServiceException extends AuthenticationException; // Thrown if an authentication request could not be processed due to a system problem.\n", "des": "Core classes and interfaces related to user authentication, which are used throughout Spring Security."}
{"index": 610, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: resource\n\nClasses and Interfaces: \nInterface Capability; // A capability that has been declared from a Resource.\nInterface Requirement; // A requirement that has been declared from a Resource .\nInterface Resource; // A resource is the representation of a uniquely identified and typed data.\nInterface Wire; // A wire connecting a Capability to a Requirement.\nInterface Wiring; // A wiring for a resource.\nClass Namespace; // Capability and Requirement Namespaces base class.\n", "des": "Resource Package Version 1.0."}
{"index": 284, "repo": "pdfbox-3.0.0-beta1", "code": "Package: filespecification\n\nClasses and Interfaces: \nClass PDComplexFileSpecification; // This represents a file specification.\nClass PDEmbeddedFile; // This represents an embedded file in a file specification.\nClass PDFileSpecification; // This represents a file specification.\nClass PDSimpleFileSpecification; // A file specification that is just a string.\n", "des": "The file specification package defines classes that are used for the PDF File Specification logic."}
{"index": 2288, "repo": "spring-boot-3.1.1", "code": "Package: admin\n\nClasses and Interfaces: \npublic interface SpringApplicationAdminMXBean; // An MBean contract to control and monitor a running SpringApplication over JMX.\npublic class SpringApplicationAdminMXBeanRegistrar extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.context.event.GenericApplicationListener, org.springframework.context.EnvironmentAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Register a SpringApplicationAdminMXBean implementation to the platform MBeanServer.\n", "des": "Administration support for Spring Boot applications."}
{"index": 986, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: mapping\n\nClasses and Interfaces: \nClass DelegatingSoapEndpointMapping; // EndpointMapping implement that adds SOAP actors or roles to a delegate endpoint.\nClass SoapActionAnnotationMethodEndpointMapping; // Implementation of the EndpointMapping interface that uses the SoapAction annotation to map methods to the request SOAPAction header.\nClass SoapActionEndpointMapping; // Implementation of the EndpointMapping interface to map from SOAPAction headers to endpoint beans.\n", "des": "Provides miscellaneous endpoints EndpointMapping implementations for SOAP purposes."}
{"index": 3487, "repo": "poi-5.2.3", "code": "Package: ddf\n\nClasses and Interfaces: \nInterface EscherRecordFactory; // The escher record factory interface allows for the creation of escher records from a pointer into a data array.\nInterface EscherSerializationListener; // Interface for listening to escher serialization events.\nClass AbstractEscherOptRecord; // Common abstract class for EscherOptRecord and EscherTertiaryOptRecord\nClass DefaultEscherRecordFactory; // Generates escher records when provided the byte array containing those records.\nClass EscherArrayProperty; // Escher array properties are the most weird construction ever invented with all sorts of special cases.\nClass EscherBitmapBlip;\nClass EscherBlipRecord;\nClass EscherBoolProperty; // Represents a boolean property.\nClass EscherBSERecord; // The BSE record is related closely to the EscherBlipRecord and stores extra information about the blip.\nClass EscherChildAnchorRecord; // The escher child anchor record is used to specify the position of a shape under an existing group.\nClass EscherClientAnchorRecord; // The escher client anchor specifies which rows and cells the shape is bound to as well as the offsets within those cells.\nClass EscherClientDataRecord; // The EscherClientDataRecord is used to store client specific data about the position of a shape within a container.\nClass EscherColorRef; // An OfficeArtCOLORREF structure entry which also handles color extension opid data\nClass EscherComplexProperty; // A complex property differs from a simple property in that the data can not fit inside a 32 bit integer.\nClass EscherContainerRecord; // Escher container records store other escher records as children.\nClass EscherDggRecord; // This record defines the drawing groups used for a particular sheet.\nClass EscherDggRecord.FileIdCluster;\nClass EscherDgRecord; // This record simply holds the number of shapes in the drawing group and the last shape id used for this drawing group.\nClass EscherDump; // Used to dump the contents of escher records to a PrintStream.\nClass EscherMetafileBlip;\nClass EscherOptRecord; // The opt record is used to store property values for a shape.\nClass EscherProperty; // This is the abstract base class for all escher properties.\n", "des": "This package contains classes for decoding the Microsoft Office Drawing format otherwise known as escher henceforth known in POI as the Dreadful Drawing Format."}
{"index": 2707, "repo": "spring-integration-ftp-6.1.2", "code": "Package: session\n\nClasses and Interfaces: \npublic abstract class AbstractFtpSessionFactory<T extends org.apache.commons.net.ftp.FTPClient> extends Object implements org.springframework.integration.file.remote.session.SessionFactory<org.apache.commons.net.ftp.FTPFile>; // Base class for FTP SessionFactory implementations.\npublic class DefaultFtpSessionFactory extends AbstractFtpSessionFactory<org.apache.commons.net.ftp.FTPClient>; // Default implementation of FTP SessionFactory.\npublic class DefaultFtpsSessionFactory extends AbstractFtpSessionFactory<org.apache.commons.net.ftp.FTPSClient>; // SessionFactory for FTPS.\npublic class FtpFileInfo extends org.springframework.integration.file.remote.AbstractFileInfo<org.apache.commons.net.ftp.FTPFile>; // A FileInfo implementation for FTP/FTPS.\npublic class FtpRemoteFileTemplate extends org.springframework.integration.file.remote.RemoteFileTemplate<org.apache.commons.net.ftp.FTPFile>; // FTP version of RemoteFileTemplate providing type-safe access to the underlying FTPClient object.\npublic static enum FtpRemoteFileTemplate.ExistsMode extends Enum<FtpRemoteFileTemplate.ExistsMode>; // The FtpRemoteFileTemplate.exists(String) operation mode.\npublic class FtpSession extends Object implements org.springframework.integration.file.remote.session.Session<org.apache.commons.net.ftp.FTPFile>; // Implementation of Session for FTP.\n", "des": "Provides classes supporting FTP sessions."}
{"index": 1851, "repo": "spring-test-6.0.11", "code": "Package: web\n\nClasses and Interfaces: \npublic abstract class AbstractGenericWebContextLoader extends AbstractContextLoader implements AotContextLoader; // Abstract, generic extension of AbstractContextLoader that loads a GenericWebApplicationContext.\npublic class AnnotationConfigWebContextLoader extends AbstractGenericWebContextLoader; // Concrete implementation of AbstractGenericWebContextLoader that loads bean definitions from annotated classes.\npublic class GenericGroovyXmlWebContextLoader extends GenericXmlWebContextLoader; // Concrete implementation of AbstractGenericWebContextLoader that loads bean definitions from Groovy scripts and XML configuration files.\npublic class GenericXmlWebContextLoader extends AbstractGenericWebContextLoader; // Concrete implementation of AbstractGenericWebContextLoader that loads bean definitions from XML resources.\npublic class ServletTestExecutionListener extends AbstractTestExecutionListener; // TestExecutionListener which provides mock Servlet API support to WebApplicationContexts loaded by the Spring TestContext Framework.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface WebAppConfiguration; // @WebAppConfiguration is a class-level annotation that is used to declare that the ApplicationContext loaded for an integration test should be a WebApplicationContext.\npublic class WebDelegatingSmartContextLoader extends AbstractDelegatingSmartContextLoader; // WebDelegatingSmartContextLoader is a concrete implementation of AbstractDelegatingSmartContextLoader that delegates to a GenericXmlWebContextLoader (or a GenericGroovyXmlWebContextLoader if Groovy is present on the classpath) and an AnnotationConfigWebContextLoader.\npublic class WebMergedContextConfiguration extends MergedContextConfiguration; // WebMergedContextConfiguration encapsulates the merged context configuration declared on a test class and all of its superclasses and enclosing classes via @ContextConfiguration, @WebAppConfiguration, @ActiveProfiles, and @TestPropertySource.\npublic class WebTestContextBootstrapper extends DefaultTestContextBootstrapper; // Web-specific implementation of the TestContextBootstrapper SPI.\n", "des": "Web support classes for the Spring TestContext Framework."}
{"index": 2110, "repo": "spring-webflux-6.0.11", "code": "Package: server\n\nSub Packages: \npackage server.support; // Server-side support classes for WebSocket requests.\npackage server.upgrade; // Holds implementations of RequestUpgradeStrategy.\n\nClasses and Interfaces: \npublic interface RequestUpgradeStrategy; // A strategy for upgrading an HTTP request to a WebSocket session depending on the underlying network runtime.\npublic interface WebSocketService; // A service to delegate WebSocket-related HTTP requests to.\n", "des": "Server support for WebSocket interactions."}
{"index": 2680, "repo": "spring-data-jpa-3.1.2", "code": "Package: domain\n\nSub Packages: \npackage domain.support; // Implementation classes for auditing with JPA.\n\nClasses and Interfaces: \n@MappedSuperclass public abstract class AbstractAuditable<U,PK extends Serializable> extends AbstractPersistable<PK> implements Auditable<U,PK,LocalDateTime>; // Abstract base class for auditable entities.\n@Generated(\"org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor\") public abstract class AbstractAuditable_ extends AbstractPersistable_;\n@MappedSuperclass public abstract class AbstractPersistable<PK extends Serializable> extends Object implements Persistable<PK>; // Abstract base class for entities.\n@Generated(\"org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor\") public abstract class AbstractPersistable_ extends Object;\npublic class JpaSort extends Sort; // Sort option for queries that wraps JPA meta-model Attributes for sorting.\npublic static class JpaSort.JpaOrder extends Sort.Order; // Custom Sort.Order that keeps a flag to indicate unsafe property handling, i.e. the String provided is not necessarily a property but can be an arbitrary expression piped into the query execution.\npublic static class JpaSort.Path<T,S> extends Object; // Value object to abstract a collection of Attributes.\n@Generated(\"com.querydsl.codegen.DefaultSupertypeSerializer\") public class QAbstractAuditable extends com.querydsl.core.types.dsl.EntityPathBase<AbstractAuditable<?,? extends Serializable>>; // QAbstractAuditable is a Querydsl query type for AbstractAuditable\n@Generated(\"com.querydsl.codegen.DefaultSupertypeSerializer\") public class QAbstractPersistable extends com.querydsl.core.types.dsl.EntityPathBase<AbstractPersistable<? extends Serializable>>; // QAbstractPersistable is a Querydsl query type for AbstractPersistable\npublic interface Specification<T> extends Serializable; // Specification in the sense of Domain Driven Design.\n", "des": "JPA specific support classes to implement domain classes."}
{"index": 1439, "repo": "spring-boot-actuator-3.1.1", "code": "Package: mappings\n\nSub Packages: \npackage mappings.reactive; // Actuator reactive request mappings support.\npackage mappings.servlet; // Actuator servlet request mappings support.\n\nClasses and Interfaces: \npublic class HandlerMethodDescription extends Object; // A description of a HandlerMethod.\npublic interface MappingDescriptionProvider; // A MappingDescriptionProvider provides a List of mapping descriptions through implementation-specific introspection of an application context.\n@Endpoint(id=\"mappings\") public class MappingsEndpoint extends Object; // @Endpoint to expose HTTP request mappings.\npublic static final class MappingsEndpoint.ApplicationMappingsDescriptor extends Object implements OperationResponseBody; // Description of an application's request mappings.\npublic static final class MappingsEndpoint.ContextMappingsDescriptor extends Object; // Description of an application context's request mappings.\n", "des": "Actuator web request mappings support."}
{"index": 199, "repo": "nutch-2.4", "code": "Package: impl\n\nClasses and Interfaces: \nClass JobFactory;\nClass JobWorker;\nClass NutchServerPoolExecutor;\nClass RAMConfManager; // Configuration manager which holds a map of Configuration type configurations and ids.\nClass RAMJobManager;\n", "des": "Implementations of REST API interfaces."}
{"index": 95, "repo": "ignite-core-2.15.0", "code": "Package: multicast\n\nClasses and Interfaces: \nClass TcpDiscoveryMulticastIpFinder; // Multicast-based IP finder.\n", "des": "Contains multicast-based IP finder."}
{"index": 2319, "repo": "spring-boot-3.1.1", "code": "Package: origin\n\nClasses and Interfaces: \npublic interface Origin; // Interface that uniquely represents the origin of an item.\n@FunctionalInterface public interface OriginLookup<K>; // An interface that may be implemented by an object that can lookup Origin information from a given key.\n@FunctionalInterface public interface OriginProvider; // Interface to provide access to the origin of an item.\npublic class OriginTrackedResource extends Object implements org.springframework.core.io.Resource, OriginProvider; // Decorator that can be used to add Origin information to a Resource or WritableResource.\npublic static class OriginTrackedResource.OriginTrackedWritableResource extends OriginTrackedResource implements org.springframework.core.io.WritableResource; // Variant of OriginTrackedResource for WritableResource instances.\npublic class OriginTrackedValue extends Object implements OriginProvider; // A wrapper for an Object value and Origin.\npublic class PropertySourceOrigin extends Object implements Origin; // Origin from a PropertySource.\npublic class SystemEnvironmentOrigin extends Object implements Origin; // Origin for an item loaded from the system environment.\npublic class TextResourceOrigin extends Object implements Origin; // Origin for an item loaded from a text resource.\npublic static final class TextResourceOrigin.Location extends Object; // A location (line and column number) within the resource.\n", "des": "Support for item origin tracking."}
{"index": 63, "repo": "ignite-core-2.15.0", "code": "Package: security\n\nClasses and Interfaces: \nInterface SecurityCredentialsProvider; // Security credentials provider for specifying security credentials.\nInterface SecurityPermissionSet; // Security permission set for authorized security subjects.\nInterface SecuritySubject; // Security subject representing authenticated node with a set of permissions.\nClass AuthenticationContext; // Authentication context.\nClass SecurityBasicPermissionSet; // Simple implementation of SecurityPermissionSet interface.\nClass SecurityCredentials; // Security credentials used for node authentication.\nClass SecurityCredentialsBasicProvider; // Basic implementation for SecurityCredentialsProvider.\nClass SecurityPermissionSetBuilder; // Provides a convenient way to create a permission set.\nEnum SecurityPermission; // Supported security permissions within grid.\nEnum SecuritySubjectType; // Supported security subject types.\nClass SecurityException; // Common security exception for the grid.\n", "des": "Contains APIs for security, authentication, and authorization."}
{"index": 1357, "repo": "spring-tx-6.0.11", "code": "Package: endpoint\n\nClasses and Interfaces: \npublic abstract class AbstractMessageEndpointFactory extends Object implements MessageEndpointFactory, org.springframework.beans.factory.BeanNameAware; // Abstract base implementation of the JCA 1.7 MessageEndpointFactory interface, providing transaction management capabilities as well as ClassLoader exposure for endpoint invocations.\npublic class GenericMessageEndpointFactory extends AbstractMessageEndpointFactory; // Generic implementation of the JCA 1.7 MessageEndpointFactory interface, providing transaction management capabilities for any kind of message listener object (e.g.\npublic static class GenericMessageEndpointFactory.InternalResourceException extends RuntimeException; // Internal exception thrown when a ResourceException has been encountered during the endpoint invocation.\npublic class GenericMessageEndpointManager extends Object implements org.springframework.context.SmartLifecycle, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Generic bean that manages JCA 1.7 message endpoints within a Spring application context, activating and deactivating the endpoint as part of the application context's lifecycle.\n", "des": "This package provides a facility for generic JCA message endpoint management."}
{"index": 3342, "repo": "opencms-core-15.0", "code": "Package: extensions\n\nClasses and Interfaces: \nInterface CmsMaxHeightExtension.I_HeightChangeHandler; // Callback interfaces for height change notifications.\nClass CmsAutoGrowingTextArea; // Extension to add a CSS class to any component depending on it's scroll position.\nClass CmsEmbeddedDialogExtension; // The extension that provides RPC communication between the client and server side of embedded VAADIN dialogs.\nClass CmsGwtDialogExtension; // Extension used to open existing GWT based dialogs (from ADE, etc.) from the server side, for use in context menu actions.\nClass CmsHistoryExtension; // Extension to allow clientside history back and forward.\nClass CmsJSPBrowserFrameExtension; // Vaadin extension class for a BrowserFrame to display a JSP.\nClass CmsMaxHeightExtension; // Allows the use of max height in combination with vaadin layout components.\nClass CmsPollServerExtension; // Allows the use of max height in combination with vaadin layout components.\nClass CmsPropertyDialogExtension; // Extension used for the GWT-based property dialog called from the workplace.\nClass CmsScrollPositionCss; // Extension to add a CSS class to any component depending on it's scroll position.\nClass CmsUploadAreaExtension; // Extends the given component to be an upload drop area.\nClass CmsWindowCloseExtension; // Makes window close events available on the server side.\nClass CmsWindowExtension; // Extension used to open new browser windows.\n", "des": "Contains Vaadin UI extensions."}
{"index": 1623, "repo": "spring-kafka-3.0.9", "code": "Package: config\n\nClasses and Interfaces: \npublic abstract class AbstractKafkaListenerContainerFactory<C extends AbstractMessageListenerContainer<K,V>,K,V> extends Object implements KafkaListenerContainerFactory<C>, org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.InitializingBean, org.springframework.context.ApplicationContextAware; // Base KafkaListenerContainerFactory for Spring's base container implementation.\npublic abstract class AbstractKafkaListenerEndpoint<K,V> extends Object implements KafkaListenerEndpoint, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // Base model for a Kafka listener endpoint.\npublic class CompositeKafkaStreamsCustomizer extends Object implements KafkaStreamsCustomizer; // Composite KafkaStreamsCustomizer customizes KafkaStreams by delegating to a list of provided KafkaStreamsCustomizer.\npublic class CompositeKafkaStreamsInfrastructureCustomizer extends Object implements KafkaStreamsInfrastructureCustomizer; // Composite KafkaStreamsInfrastructureCustomizer customizes KafkaStreams by delegating to a list of provided KafkaStreamsInfrastructureCustomizer.\npublic class ConcurrentKafkaListenerContainerFactory<K,V> extends AbstractKafkaListenerContainerFactory<ConcurrentMessageListenerContainer<K,V>,K,V>; // A KafkaListenerContainerFactory implementation to build a ConcurrentMessageListenerContainer.\n@FunctionalInterface public interface ContainerCustomizer<K,V,C extends AbstractMessageListenerContainer<K,V>>; // Called by the container factory after the container is created and configured.\npublic abstract class KafkaListenerConfigUtils extends Object; // Configuration constants for internal sharing across subpackages.\npublic interface KafkaListenerContainerFactory<C extends MessageListenerContainer>; // Factory for MessageListenerContainers.\npublic interface KafkaListenerEndpoint; // Model for a Kafka listener endpoint.\npublic class KafkaListenerEndpointRegistrar extends Object implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // Helper bean for registering KafkaListenerEndpoint with a KafkaListenerEndpointRegistry.\n", "des": "Package for kafka configuration"}
{"index": 1088, "repo": "graal-sdk-1.0.0-rc7", "code": "Package: proxy\n\nClasses and Interfaces: \nInterface Proxy; // Proxy interfaces allow to mimic guest language objects, arrays, executables, primitives and native objects in Graal languages.\nInterface ProxyArray; // Interface to be implemented to mimic guest language arrays.\nInterface ProxyExecutable; // Interface to be implemented to mimic guest language objects that are executable.\nInterface ProxyInstantiable; // Interface to be implemented to mimic guest language objects that are instantiable.\nInterface ProxyNativeObject; // Interface to be implemented to mimic native pointers.\nInterface ProxyObject; // Interface to be implemented to mimic guest language objects that contain members.\n", "des": "The Graal SDK proxy interfaces allow to mimic guest language objects, arrays, executables, primitives and native objects in Graal languages."}
{"index": 1590, "repo": "spring-websocket-6.0.11", "code": "Package: jetty\n\nClasses and Interfaces: \n@Deprecated(since=\"6.0.3\", forRemoval=true) public class JettyWebSocketClient extends AbstractWebSocketClient implements org.springframework.context.Lifecycle;\n", "des": "Client-side support for the Jetty WebSocket API."}
{"index": 319, "repo": "kafka-clients-3.5.0", "code": "Package: acl\n\nClasses and Interfaces: \nClass AccessControlEntry; // Represents an access control entry.\nClass AccessControlEntryFilter; // Represents a filter which matches access control entries.\nClass AclBinding; // Represents a binding between a resource pattern and an access control entry.\nClass AclBindingFilter; // A filter which can match AclBinding objects.\nEnum AclOperation; // Represents an operation which an ACL grants or denies permission to perform.\nEnum AclPermissionType; // Represents whether an ACL grants or denies permissions.\n", "des": "Provides classes representing Access Control Lists for authorization of clients"}
{"index": 3520, "repo": "opennlp-tools-2.2.0", "code": "Package: leipzig\n\nClasses and Interfaces: \nClass LeipzigLanguageSampleStream;\nClass LeipzigLanguageSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\n", "des": "Experimental package related to the Leipzig corpus format."}
{"index": 454, "repo": "camel-core-3.0.0-RC1", "code": "Package: language\n\nClasses and Interfaces: \nClass ConstantExpression; // To use a constant value in Camel expressions or predicates.\nClass ExchangePropertyExpression; // To use a Camel Exchange property in expressions or predicates.\nClass ExpressionDefinition; // A useful base class for an expression\nClass GroovyExpression; // To use Groovy scripts in Camel expressions or predicates.\nClass HeaderExpression; // To use a Camel Message header in expressions or predicates.\nClass Hl7TerserExpression; // To use HL7 terser scripts in Camel expressions or predicates.\nClass JsonPathExpression; // To use JsonPath in Camel expressions or predicates.\nClass LanguageExpression; // To use the specified language in Camel expressions or predicates.\nClass MethodCallExpression; // To use a Java bean (aka method call) in Camel expressions or predicates.\nClass MvelExpression; // To use MVEL scripts in Camel expressions or predicates.\nClass NamespaceAwareExpression; // A useful base class for any expression which may be namespace or XML content aware such as XPathExpression or XQueryExpression\nClass OgnlExpression; // To use OGNL scripts in Camel expressions or predicates.\nClass RefExpression; // Reference to an existing Camel expression or predicate, which is looked up from the Camel registry.\nClass SimpleExpression; // To use Camels built-in Simple language in Camel expressions or predicates.\nClass SpELExpression; // To use Spring Expression Language (SpEL) in Camel expressions or predicates.\nClass TokenizerExpression; // To use Camel message body or header with a tokenizer in Camel expressions or predicates.\nClass XMLTokenizerExpression; // To use Camel message body or header with a XML tokenizer in Camel expressions or predicates.\nClass XPathExpression; // To use XPath (XML) in Camel expressions or predicates.\nClass XQueryExpression; // To use XQuery (XML) in Camel expressions or predicates.\n", "des": "The JAXB POJOs for the Expression and Predicate plugins for the XML Configuration."}
{"index": 2751, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: support\n\nSub Packages: \npackage support.transaction; // Infrastructure implementations of support transaction concerns.\n\nClasses and Interfaces: \npublic class AnnotationMethodResolver extends Object implements MethodResolver; // MethodResolver implementation that finds a single Method on the given Class that contains the specified annotation type.\npublic enum DatabaseType extends Enum<DatabaseType>; // Enum representing a database type, such as DB2 or oracle.\npublic class DefaultPropertyEditorRegistrar extends Object implements org.springframework.beans.PropertyEditorRegistrar; // A re-usable PropertyEditorRegistrar that can be used wherever one needs to register custom PropertyEditor instances with a PropertyEditorRegistry (like a bean wrapper, or a type converter).\npublic class IntArrayPropertyEditor extends PropertyEditorSupport;\npublic class LastModifiedResourceComparator extends Object implements Comparator<org.springframework.core.io.Resource>; // Comparator to sort resources by the file last modified time.\npublic interface MethodInvoker; // A strategy interface for invoking a method.\npublic class MethodInvokerUtils extends Object; // Utility methods for create MethodInvoker instances.\npublic interface MethodResolver; // Strategy interface for detecting a single Method on a Class.\npublic class PatternMatcher<S> extends Object;\npublic final class PropertiesConverter extends Object; // Utility to convert a Properties object to a String and back.\npublic class ReflectionUtils extends Object; // Provides reflection based utilities for Spring Batch that are not available via Spring Core\npublic class SimpleMethodInvoker extends Object implements MethodInvoker; // Simple implementation of the MethodInvoker interface that invokes a method on an object.\npublic class SystemPropertyInitializer extends Object implements org.springframework.beans.factory.InitializingBean; // Helper class that sets up a System property with a default value.\n", "des": "Infrastructure implementations of support concerns."}
{"index": 193, "repo": "ignite-core-2.15.0", "code": "Package: internal\n\nClasses and Interfaces: \nInterface GPC<T>; // Defines internal typedef for GridPlainCallable.\nInterface GPR; // Defines internal typedef for GridPlainRunnable.\nClass A; // Defines internal typedef for GridArgumentCheck.\nClass CU; // Defines internal typedef for GridCacheUtils.\nClass D; // Convenience alias for GridDebug class.\nClass LT; // Defines internal typedef for GridLogThrottle.\nClass S; // Defines internal typedef for GridToStringBuilder.\nClass SB; // Defines internal typedef for GridStringBuilder.\nClass U; // Defines internal typedef for IgniteUtils.\n", "des": "Contains internal typedefs."}
{"index": 778, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: fi\n\nClasses and Interfaces: \nClass FinnishAnalyzer; // Analyzer for Finnish.\nClass FinnishLightStemFilter; // A TokenFilter that applies FinnishLightStemmer to stem Finnish words.\nClass FinnishLightStemFilterFactory; // Factory for FinnishLightStemFilter.\nClass FinnishLightStemmer; // Light Stemmer for Finnish.\n", "des": "Analyzer for Finnish."}
{"index": 144, "repo": "ignite-core-2.15.0", "code": "Package: failover\n\nClasses and Interfaces: \nClass GridFailoverContextImpl; // GridFailoverContext implementation.\nClass GridFailoverManager; // Grid failover spi manager.\n", "des": "TODO."}
{"index": 1203, "repo": "commons-math3-3.6.1", "code": "Package: special\n\nClasses and Interfaces: \nClass BesselJ; // This class provides computation methods related to Bessel functions of the first kind.\nClass BesselJ.BesselJResult; // Encapsulates the results returned by BesselJ.rjBesl(double, double, int).\nClass Beta; // This is a utility class that provides computation methods related to the Beta family of functions.\nClass Erf; // This is a utility class that provides computation methods related to the error functions.\nClass Gamma; // This is a utility class that provides computation methods related to the Γ (Gamma) family of functions.\n", "des": "Implementations of special functions such as Beta and Gamma."}
{"index": 141, "repo": "ignite-core-2.15.0", "code": "Package: discovery\n\nClasses and Interfaces: \nInterface CustomEventListener<T extends DiscoveryCustomMessage>; // Listener interface.\nInterface DiscoveryCustomMessage; // DiscoveryCustomMessage messages are handled by discovery protocol which provides some guarantees around them.\nInterface DiscoveryServerOnlyCustomMessage; // DiscoveryServerOnlyCustomMessage is the special subtype of the DiscoveryCustomMessage message that is delivered only on server nodes of the cluster.\nInterface IgniteClusterNode;\nInterface IgniteDiscoverySpi;\nInterface IgniteDiscoverySpiInternalListener; // For TESTING only.\nClass ClusterMetricsImpl; // Cluster metrics proxy.\nClass ConsistentIdMapper; // Class is needed for map UUID to consistent id and vice versa.\nClass CustomMessageWrapper;\nClass DiscoCache;\nClass DiscoveryLocalJoinData; // Information about local join event.\nClass DiscoveryMessageResultsCollector<M,R>;\nClass DiscoveryMessageResultsCollector.NodeMessage<M>;\nClass GridDiscoveryManager; // Discovery SPI manager.\nClass GridDiscoveryTopologySnapshot; // Topology snapshot managed by discovery manager.\nClass SecurityAwareCustomMessageWrapper; // Extends CustomMessageWrapper with ID of security subject that initiated the current message.\nClass IncompleteDeserializationException; // Exception which can be used to access a message which failed to be deserialized completely using Java serialization.\n", "des": "TODO."}
{"index": 2822, "repo": "spring-orm-6.0.11", "code": "Package: vendor\n\nClasses and Interfaces: \npublic abstract class AbstractJpaVendorAdapter extends Object implements JpaVendorAdapter; // Abstract JpaVendorAdapter implementation that defines common properties, to be translated into vendor-specific JPA properties by concrete subclasses.\npublic enum Database extends Enum<Database>; // Enumeration for common database platforms.\npublic class EclipseLinkJpaDialect extends DefaultJpaDialect; // JpaDialect implementation for Eclipse Persistence Services (EclipseLink).\npublic class EclipseLinkJpaVendorAdapter extends AbstractJpaVendorAdapter; // JpaVendorAdapter implementation for Eclipse Persistence Services (EclipseLink).\npublic class HibernateJpaDialect extends DefaultJpaDialect; // JpaDialect implementation for Hibernate.\npublic class HibernateJpaVendorAdapter extends AbstractJpaVendorAdapter; // JpaVendorAdapter implementation for Hibernate.\n", "des": "Support classes for adapting to specific JPA vendors."}
{"index": 2394, "repo": "spring-batch-core-5.0.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class CommandLineJobRunner extends Object; // Basic launcher for starting jobs from the command line.\npublic class DataFieldMaxValueJobParametersIncrementer extends Object implements JobParametersIncrementer; // This incrementer uses a DataFieldMaxValueIncrementer to generate the sequence of values to use as job instance discriminator.\npublic interface ExitCodeMapper; // This interface should be implemented when an environment calling the batch framework has specific requirements regarding the operating system process return status.\npublic class JobOperatorFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobOperator>, org.springframework.beans.factory.InitializingBean; // Convenient factory bean that creates a transactional proxy around a JobOperator.\n@Deprecated(since=\"5.0\", forRemoval=true) public class JobRegistryBackgroundJobRunner extends Object;\npublic class JvmSystemExiter extends Object implements SystemExiter; // Implementation of the SystemExiter interface that calls the standards System.exit method.\npublic class RunIdIncrementer extends Object implements JobParametersIncrementer; // This incrementer increments a \"run.id\" parameter of type Long from the given job parameters.\npublic class RuntimeExceptionTranslator extends Object implements org.aopalliance.intercept.MethodInterceptor;\n@Deprecated(since=\"5.0.0\", forRemoval=true) public class SimpleJobLauncher extends Object implements JobLauncher, org.springframework.beans.factory.InitializingBean;\npublic class SimpleJobOperator extends Object implements JobOperator, org.springframework.beans.factory.InitializingBean; // Simple implementation of the JobOperator interface.\npublic class SimpleJvmExitCodeMapper extends Object implements ExitCodeMapper; // An implementation of ExitCodeMapper that can be configured through a map from batch exit codes (String) to integer results.\npublic interface SystemExiter; // Interface for exiting the JVM.\npublic class TaskExecutorJobLauncher extends SimpleJobLauncher; // Implementation of the JobLauncher interface based on a TaskExecutor.\n", "des": "Support classes for use in bootstrap and launch implementations or configurations."}
{"index": 475, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: coders\n\nClasses and Interfaces: \nInterface CoderProviderRegistrar; // Coder creators have the ability to automatically have their coders registered with this SDK by creating a ServiceLoader entry and a concrete implementation of this interface.\nInterface DelegateCoder.CodingFunction<InputT,OutputT>; // A CodingFunction<InputT, OutputT> is a serializable function from InputT to OutputT that may throw any Exception.\nClass AtomicCoder<T>; // A Coder that has no component Coders or other configuration.\nClass AvroCoder<T>; // Avro related classes are deprecated in module beam-sdks-java-core and will be eventually removed.\nClass AvroCoder.JodaTimestampConversion; // Conversion for DateTime.\nClass AvroGenericCoder; // Avro related classes are deprecated in module beam-sdks-java-core and will be eventually removed.\nClass BigDecimalCoder; // A BigDecimalCoder encodes a BigDecimal as an integer scale encoded with VarIntCoder and a BigInteger encoded using BigIntegerCoder.\nClass BigEndianIntegerCoder; // A BigEndianIntegerCoder encodes Integers in 4 bytes, big-endian.\nClass BigEndianLongCoder; // A BigEndianLongCoder encodes Longs in 8 bytes, big-endian.\nClass BigEndianShortCoder; // A BigEndianShortCoder encodes Shorts in 2 bytes, big-endian.\nClass BigIntegerCoder; // A BigIntegerCoder encodes a BigInteger as a byte array containing the big endian two's-complement representation, encoded via ByteArrayCoder.\nClass BitSetCoder; // Coder for BitSet.\nClass BooleanCoder; // A Coder for Boolean.\nClass ByteArrayCoder; // A Coder for byte[].\nClass ByteCoder; // A ByteCoder encodes Byte values in 1 byte using Java serialization.\nClass Coder<T>; // A Coder<T> defines how to encode and decode values of type T into byte streams.\nClass Coder.Context; // To implement a coder, do not use any Coder.Context.\nClass CoderProvider; // A CoderProvider provides Coders.\nClass CoderProviders; // Static utility methods for creating and working with CoderProviders.\nClass CoderRegistry; // A CoderRegistry allows creating a Coder for a given Java class or type descriptor.\n", "des": "Defines Coders to specify how data is encoded to and decoded from byte strings."}
{"index": 787, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: in\n\nClasses and Interfaces: \nClass IndicNormalizationFilter; // A TokenFilter that applies IndicNormalizer to normalize text in Indian Languages.\nClass IndicNormalizationFilterFactory; // Factory for IndicNormalizationFilter.\nClass IndicNormalizer; // Normalizes the Unicode representation of text in Indian languages.\n", "des": "Analyzer for Indian languages."}
{"index": 1321, "repo": "groovy-all-4.0.13", "code": "Package: yaml\n\nClasses and Interfaces: \npublic class YamlBuilder extends GroovyObjectSupport implements Writable; // A builder for creating YAML payloads.\npublic class YamlRuntimeException extends GroovyRuntimeException; // Represents runtime exception occurred when parsing or building YAML\npublic class YamlSlurper extends Object; // Represents a YAML parser\n", "des": "Classes for building and parsing YAML."}
{"index": 2776, "repo": "spring-jms-6.0.11", "code": "Package: converter\n\nClasses and Interfaces: \npublic class MappingJackson2MessageConverter extends Object implements SmartMessageConverter, org.springframework.beans.factory.BeanClassLoaderAware; // Message converter that uses Jackson 2.x to convert messages to and from JSON.\npublic class MarshallingMessageConverter extends Object implements MessageConverter, org.springframework.beans.factory.InitializingBean; // Spring JMS MessageConverter that uses a Marshaller and Unmarshaller.\npublic class MessageConversionException extends JmsException; // Thrown by MessageConverter implementations when the conversion of an object to/from a Message fails.\npublic interface MessageConverter; // Strategy interface that specifies a converter between Java objects and JMS messages.\npublic enum MessageType extends Enum<MessageType>; // Constants that indicate a target message type to convert to: a TextMessage, a BytesMessage, a MapMessage or an ObjectMessage.\npublic class MessagingMessageConverter extends Object implements MessageConverter, org.springframework.beans.factory.InitializingBean; // Convert a Message from the messaging abstraction to and from a Message using an underlying MessageConverter for the payload and a JmsHeaderMapper to map the JMS headers to and from standard message headers.\npublic class SimpleMessageConverter extends Object implements MessageConverter; // A simple message converter which is able to handle TextMessages, BytesMessages, MapMessages, and ObjectMessages.\npublic interface SmartMessageConverter extends MessageConverter; // An extended MessageConverter SPI with conversion hint support.\n", "des": "Provides a MessageConverter abstraction to convert between Java objects and JMS messages."}
{"index": 2124, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "Package: bundling\n\nClasses and Interfaces: \npublic interface BootArchive extends Task; // A Spring Boot \"fat\" archive task.\n@DisableCachingByDefault public abstract class BootBuildImage extends DefaultTask; // A Task for bundling an application into an OCI image using a buildpack.\n@DisableCachingByDefault(because=\"Not worth caching\") public abstract class BootJar extends Jar implements BootArchive; // A custom Jar task that produces a Spring Boot executable jar.\n@DisableCachingByDefault(because=\"Not worth caching\") public abstract class BootWar extends War implements BootArchive; // A custom War task that produces a Spring Boot executable war.\npublic class CacheSpec extends Object; // Configuration for an image building cache.\npublic abstract static class CacheSpec.VolumeCacheSpec extends Object; // Configuration for an image building cache stored in a Docker volume.\npublic abstract class DockerSpec extends Object; // Encapsulates Docker configuration options.\npublic abstract static class DockerSpec.DockerRegistrySpec extends Object; // Encapsulates Docker registry authentication configuration options.\npublic class LaunchScriptConfiguration extends Object implements Serializable; // Encapsulates the configuration of the launch script for an executable jar or war.\npublic abstract class LayeredSpec extends Object; // Encapsulates the configuration for a layered archive.\npublic static class LayeredSpec.ApplicationSpec extends LayeredSpec.IntoLayersSpec<LayeredSpec.IntoLayerSpec>; // An LayeredSpec.IntoLayersSpec that controls the layers to which application classes and resources belong.\npublic static class LayeredSpec.DependenciesIntoLayerSpec extends LayeredSpec.IntoLayerSpec; // Spec that controls the dependencies that should be part of a particular layer.\npublic static class LayeredSpec.DependenciesSpec extends LayeredSpec.IntoLayersSpec<LayeredSpec.DependenciesIntoLayerSpec> implements Serializable; // An LayeredSpec.IntoLayersSpec that controls the layers to which dependencies belong.\npublic static class LayeredSpec.IntoLayerSpec extends Object implements Serializable; // Spec that controls the content that should be part of a particular layer.\npublic abstract static class LayeredSpec.IntoLayersSpec<S extends LayeredSpec.IntoLayerSpec> extends Object implements Serializable; // Base class for specs that control the layers to which a category of content should belong.\n", "des": "Support for creating executable jars and wars."}
{"index": 1008, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: provider\n\nClasses and Interfaces: \nInterface BindingsProvider; // Strategy for adding Bindings to a Definition.\nInterface ImportsProvider; // Strategy for adding Imports to a Definition.\nInterface MessagesProvider; // Strategy for adding Messages to a Definition.\nInterface PortTypesProvider; // Strategy for adding PortTypes to a Definition.\nInterface ServicesProvider; // Strategy for adding Services to a Definition.\nInterface TypesProvider; // Strategy for adding Types to a Definition.\nClass AbstractPortTypesProvider; // Abstract base class for PortTypesProvider implementations.\nClass DefaultConcretePartProvider; // Default implementation of the BindingsProvider and ServicesProvider interfaces.\nClass DefaultMessagesProvider; // Default implementation of the MessagesProvider.\nClass InliningXsdSchemaTypesProvider; // Implementation of TypesProvider that inlines a XsdSchema or XsdSchemaCollection into the WSDL.\nClass Soap11Provider; // Implementation of the BindingsProvider and ServicesProvider interfaces that are SOAP 1.1 specific.\nClass Soap12Provider; // Implementation of the BindingsProvider and ServicesProvider interfaces that are SOAP 1.2 specific.\nClass SoapProvider; // Implementation of the BindingsProvider and ServicesProvider interfaces that supports SOAP 1.1 and SOAP 1.2.\nClass SuffixBasedMessagesProvider; // Implementation of the MessagesProvider interface that is based on suffixes.\nClass SuffixBasedPortTypesProvider; // Implementation of the PortTypesProvider interface that is based on suffixes.\n", "des": "Provides a contribution strategy for WSDL definitions."}
{"index": 827, "repo": "calcite-core-1.34.0", "code": "Package: jdbc\n\nClasses and Interfaces: \nInterface JdbcRel; // Relational expression that uses JDBC calling convention.\nInterface JdbcSchema.Foo; // Do not use.\nClass JdbcCatalogSchema; // Schema based upon a JDBC catalog (database).\nClass JdbcConvention; // Calling convention for relational operations that occur in a JDBC database.\nClass JdbcImplementor; // State for generating a SQL statement.\nClass JdbcQueryProvider; // Implementation of QueryProvider that talks to JDBC databases.\nClass JdbcRules; // Rules and relational operators for JdbcConvention calling convention.\nClass JdbcRules.JdbcAggregate; // Aggregate operator implemented in JDBC convention.\nClass JdbcRules.JdbcAggregateRule; // Rule to convert a Aggregate to a JdbcRules.JdbcAggregate.\nClass JdbcRules.JdbcCalc;\nClass JdbcRules.JdbcFilter; // Implementation of Filter in jdbc calling convention.\nClass JdbcRules.JdbcFilterRule; // Rule to convert a Filter to an JdbcRules.JdbcFilter.\nClass JdbcRules.JdbcIntersect; // Intersect operator implemented in JDBC convention.\nClass JdbcRules.JdbcIntersectRule; // Rule to convert a Intersect to a JdbcRules.JdbcIntersect.\nClass JdbcRules.JdbcJoin; // Join operator implemented in JDBC convention.\nClass JdbcRules.JdbcJoinRule; // Rule that converts a join to JDBC.\nClass JdbcRules.JdbcMinus; // Minus operator implemented in JDBC convention.\nClass JdbcRules.JdbcMinusRule; // Rule to convert a Minus to a JdbcRules.JdbcMinus.\nClass JdbcRules.JdbcProject; // Implementation of Project in jdbc calling convention.\nClass JdbcRules.JdbcProjectRule; // Rule to convert a Project to an JdbcRules.JdbcProject.\nClass JdbcRules.JdbcSort; // Sort operator implemented in JDBC convention.\nClass JdbcRules.JdbcSortRule; // Rule to convert a Sort to an JdbcRules.JdbcSort.\nClass JdbcRules.JdbcTableModificationRule; // Rule that converts a table-modification to JDBC.\nClass JdbcRules.JdbcTableModify; // Table-modification operator implemented in JDBC convention.\nClass JdbcRules.JdbcUnion; // Union operator implemented in JDBC convention.\nClass JdbcRules.JdbcUnionRule; // Rule to convert an Union to a JdbcRules.JdbcUnion.\nClass JdbcRules.JdbcValues; // Values operator implemented in JDBC convention.\n", "des": "Query provider based on a JDBC data source."}
{"index": 799, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: pt\n\nClasses and Interfaces: \nClass PortugueseAnalyzer; // Analyzer for Portuguese.\nClass PortugueseLightStemFilter; // A TokenFilter that applies PortugueseLightStemmer to stem Portuguese words.\nClass PortugueseLightStemFilterFactory; // Factory for PortugueseLightStemFilter.\nClass PortugueseLightStemmer; // Light Stemmer for Portuguese\nClass PortugueseMinimalStemFilter; // A TokenFilter that applies PortugueseMinimalStemmer to stem Portuguese words.\nClass PortugueseMinimalStemFilterFactory; // Factory for PortugueseMinimalStemFilter.\nClass PortugueseMinimalStemmer; // Minimal Stemmer for Portuguese\nClass PortugueseStemFilter; // A TokenFilter that applies PortugueseStemmer to stem Portuguese words.\nClass PortugueseStemFilterFactory; // Factory for PortugueseStemFilter.\nClass PortugueseStemmer; // Portuguese stemmer implementing the RSLP (Removedor de Sufixos da Lingua Portuguesa) algorithm.\nClass RSLPStemmerBase; // Base class for stemmers that use a set of RSLP-like stemming steps.\nClass RSLPStemmerBase.Rule; // A basic rule, with no exceptions.\nClass RSLPStemmerBase.RuleWithSetExceptions; // A rule with a set of whole-word exceptions.\nClass RSLPStemmerBase.RuleWithSuffixExceptions; // A rule with a set of exceptional suffixes.\nClass RSLPStemmerBase.Step; // A step containing a list of rules.\n", "des": "Analyzer for Portuguese."}
{"index": 66, "repo": "ignite-core-2.15.0", "code": "Package: mxbean\n\nClasses and Interfaces: \nInterface BaselineAutoAdjustMXBean; // This interface defines JMX view on DistributedBaselineConfiguration.\nInterface ClientProcessorMXBean; // MXBean interface that provides access to ODBC\\JDBC\\Thin client connections.\nInterface ClusterMetricsMXBean; // Cluster metrics MBean.\nInterface ComputeMXBean; // Compute MXBean interface.\nInterface DataStorageMXBean; // An MX bean allowing to monitor and tune persistence.\nInterface DefragmentationMXBean; // JMX bean for defragmentation manager.\nInterface EncryptionMXBean; // Encryption features MBean.\nInterface FailureHandlingMxBean; // MBean that controls critical failure handling.\nInterface IgniteClusterMXBean; // MX Bean allows to access information about cluster ID and tag and change tag.\nInterface IgniteMBeanAware; // MBean-aware interface.\nInterface IgniteMXBean; // This interface defines JMX view on kernal.\nInterface IgnitionMXBean; // This interface defines JMX view on Ignition.\nInterface MetricsMxBean; // Metrics MXBean interface.\nInterface PerformanceStatisticsMBean; // MBean that provides access to performance statistics management.\nInterface QueryMXBean; // Query MXBean interface.\nInterface ServiceMXBean; // Service MXBean interface.\nInterface SnapshotMXBean; // Snapshot features MBean.\nInterface TransactionMetricsMxBean; // Check the JmxMetricExporterSpi with \"name=\\\"tx\\\"\" instead.\nInterface TransactionsMXBean; // Transactions MXBean interface.\nInterface WarmUpMXBean; // Warm-up MXBean interface.\nInterface WorkersControlMXBean; // MBean that provides ability to terminate worker that registered in the workers registry.\nAnnotation Type MXBeanDescription; // Provides description for MBean classes and methods.\nAnnotation Type MXBeanParameter; // Provides name and description for MBean method parameter.\nAnnotation Type MXBeanParametersDescriptions; // Use MXBeanParameter instead.\nAnnotation Type MXBeanParametersNames; // Use MXBeanParameter instead.\n", "des": "Contains annotations for Dynamic MBeans."}
{"index": 1145, "repo": "commons-math3-3.6.1", "code": "Package: function\n\nClasses and Interfaces: \nClass Abs; // Absolute value function.\nClass Acos; // Arc-cosine function.\nClass Acosh; // Hyperbolic arc-cosine function.\nClass Add; // Add the two operands.\nClass Asin; // Arc-sine function.\nClass Asinh; // Hyperbolic arc-sine function.\nClass Atan; // Arc-tangent function.\nClass Atan2; // Arc-tangent function.\nClass Atanh; // Hyperbolic arc-tangent function.\nClass Cbrt; // Cube root function.\nClass Ceil; // ceil function.\nClass Constant; // Constant function.\nClass Cos; // Cosine function.\nClass Cosh; // Hyperbolic cosine function.\nClass Divide; // Divide the first operand by the second.\nClass Exp; // Exponential function.\nClass Expm1; // ex-1 function.\nClass Floor; // floor function.\nClass Gaussian; // Gaussian function.\nClass Gaussian.Parametric; // Parametric function where the input array contains the parameters of the Gaussian, ordered as follows: Norm Mean Standard deviation\nClass HarmonicOscillator; // simple harmonic oscillator function.\nClass HarmonicOscillator.Parametric; // Parametric function where the input array contains the parameters of the harmonic oscillator function, ordered as follows: Amplitude Angular frequency Phase\nClass Identity; // Identity function.\nClass Inverse; // Inverse function.\nClass Log; // Natural logarithm function.\nClass Log10; // Base 10 logarithm function.\nClass Log1p; // log(1 + p) function.\nClass Logistic; // Generalised logistic function.\nClass Logistic.Parametric; // Parametric function where the input array contains the parameters of the logistic function, ordered as follows: k m b q a n\nClass Logit; // Logit function.\nClass Logit.Parametric; // Parametric function where the input array contains the parameters of the logit function, ordered as follows: Lower bound Higher bound\nClass Max; // Maximum function.\nClass Min; // Minimum function.\nClass Minus; // Minus function.\n", "des": "The function package contains function objects that wrap the methods contained in Math, as well as common mathematical functions such as the gaussian and sinc functions."}
{"index": 2774, "repo": "spring-jms-6.0.11", "code": "Package: endpoint\n\nClasses and Interfaces: \npublic class DefaultJmsActivationSpecFactory extends StandardJmsActivationSpecFactory; // Default implementation of the JmsActivationSpecFactory interface.\npublic class JmsActivationSpecConfig extends Object; // Common configuration object for activating a JMS message endpoint.\npublic interface JmsActivationSpecFactory; // Strategy interface for creating JCA 1.5 ActivationSpec objects based on a configured JmsActivationSpecConfig object.\npublic class JmsMessageEndpointFactory extends org.springframework.jca.endpoint.AbstractMessageEndpointFactory; // JMS-specific implementation of the JCA 1.7 MessageEndpointFactory interface, providing transaction management capabilities for a JMS listener object (e.g.\npublic static class JmsMessageEndpointFactory.JmsResourceException extends RuntimeException; // Internal exception thrown when a ResourceException has been encountered during the endpoint invocation.\npublic class JmsMessageEndpointManager extends org.springframework.jca.endpoint.GenericMessageEndpointManager implements org.springframework.beans.factory.BeanNameAware, MessageListenerContainer; // Extension of the generic JCA 1.5 GenericMessageEndpointManager, adding JMS-specific support for ActivationSpec configuration.\npublic class StandardJmsActivationSpecFactory extends Object implements JmsActivationSpecFactory; // Standard implementation of the JmsActivationSpecFactory interface.\n", "des": "This package provides JCA-based endpoint management for JMS message listeners."}
{"index": 406, "repo": "spring-social-core-1.1.6.RELEASE", "code": "Package: social\n\nSub Packages: \npackage social.connect; // Framework for establishing connections between local users and users of ServiceProviders such as Twitter and Facebook.\npackage social.oauth1; // OAuth1 client.\npackage social.oauth2; // OAuth2 client.\npackage social.support; // Internal utilities and helpers used by the Spring Social core module.\n\nClasses and Interfaces: \nInterface ApiBinding; // Base interface that may be implemented by API bindings.\nInterface ServiceProvider<A>; // Top-level marker interface defining a ServiceProvider.\nInterface UserIdSource; // Strategy interface used to determine the account ID of the current user.\nClass ApiException; // Indicates that an error occurred while consuming a provider API.\nClass DuplicateStatusException; // Exception thrown when a duplicate status is posted.\nClass ExpiredAuthorizationException; // Exception indicating that the authorization presented to the server has expired.\nClass InsufficientPermissionException; // Exception thrown when attempting an operation that requires a permission not granted to the caller.\nClass InternalServerErrorException; // Exception indicating an internal error occurred on the server.\nClass InvalidAuthorizationException; // Exception indicating that the authorization used during an operation invocation is invalid.\nClass MissingAuthorizationException; // Exception indicating that an operation requiring authorization was attempted without providing authorization.\nClass NotAuthorizedException; // Indicates the client is not authorized to invoke the API.\nClass OperationNotPermittedException; // Indicates an operation was attempted that is not permitted.\nClass RateLimitExceededException; // Exception thrown when API calls are being rate-limited.\nClass RejectedAuthorizationException; // Exception indicating that the authorization used during an operation invocation is rejected by the server.\nClass ResourceNotFoundException; // Indicates that the requested provider API resource could not be found.\nClass RevokedAuthorizationException; // Exception indicating that the authorization used during an operation invocation has been revoked.\nClass ServerDownException; // Exception indicating that the server is down or being upgraded.\nClass ServerException; // Exception thrown when a server error occurs.\nClass ServerOverloadedException; // Exception indicating that the server is experiencing high load.\nClass SocialException; // Exception class indicating a problem occurred performing an operation against a service provider.\nClass UncategorizedApiException; // Indicates that an otherwise uncategorized error occurred while consuming a provider API.\n", "des": "Core Spring Social classes"}
{"index": 3499, "repo": "poi-5.2.3", "code": "Package: dev\n\nClasses and Interfaces: \nInterface POIFSViewable; // Interface for a drill-down viewable object.\nClass POIFSDump; // Dump internal structure of a OLE2 file into file system\nClass POIFSLister; // A lister of the entries in POIFS files.\nClass POIFSViewEngine; // This class contains methods used to inspect POIFSViewable objects\nClass POIFSViewer; // A simple viewer for POIFS files\n", "des": "DEV package serves two purposes."}
{"index": 1091, "repo": "lucene-analyzers-smartcn-8.11.2", "code": "Package: hhmm\n\nClasses and Interfaces: \nClass HHMMSegmenter; // Finds the optimal segmentation of a sentence into Chinese words\nClass SegToken; // SmartChineseAnalyzer internal token\nClass SegTokenFilter; // Filters a SegToken by converting full-width latin to half-width, then lowercasing latin.\n", "des": "SmartChineseAnalyzer Hidden Markov Model package."}
{"index": 2952, "repo": "spring-integration-xml-6.1.2", "code": "Package: source\n\nClasses and Interfaces: \npublic class DomSourceFactory extends Object implements SourceFactory; // SourceFactory implementation which supports creation of a DOMSource from a Document, File or String payload.\npublic interface SourceFactory; // Factory to create a Source possibly taking into account the provided message payload instance.\npublic class StringSourceFactory extends Object implements SourceFactory; // SourceFactory implementation which supports creation of a StringSource from a Document, File or String payload\n", "des": "Provides various SourceFactory implementations."}
{"index": 2312, "repo": "spring-boot-3.1.1", "code": "Package: metadata\n\nClasses and Interfaces: \npublic abstract class AbstractDataSourcePoolMetadata<T extends DataSource> extends Object implements DataSourcePoolMetadata; // A base DataSourcePoolMetadata implementation.\npublic class CommonsDbcp2DataSourcePoolMetadata extends AbstractDataSourcePoolMetadata<org.apache.commons.dbcp2.BasicDataSource>; // DataSourcePoolMetadata for an Apache Commons DBCP2 DataSource.\npublic class CompositeDataSourcePoolMetadataProvider extends Object implements DataSourcePoolMetadataProvider; // A DataSourcePoolMetadataProvider implementation that returns the first DataSourcePoolMetadata that is found by one of its delegate.\npublic interface DataSourcePoolMetadata; // Provides access meta-data that is commonly available from most pooled DataSource implementations.\n@FunctionalInterface public interface DataSourcePoolMetadataProvider; // Provide a DataSourcePoolMetadata based on a DataSource.\npublic class HikariDataSourcePoolMetadata extends AbstractDataSourcePoolMetadata<com.zaxxer.hikari.HikariDataSource>; // DataSourcePoolMetadata for a Hikari DataSource.\npublic class OracleUcpDataSourcePoolMetadata extends AbstractDataSourcePoolMetadata<oracle.ucp.jdbc.PoolDataSource>; // DataSourcePoolMetadata for an Oracle UCP DataSource.\npublic class TomcatDataSourcePoolMetadata extends AbstractDataSourcePoolMetadata<org.apache.tomcat.jdbc.pool.DataSource>; // DataSourcePoolMetadata for a Tomcat DataSource.\n", "des": "Support for accessing JDBC DataSource metadata."}
{"index": 3817, "repo": "lucene-analysis-common-9.7.0", "code": "Package: synonym\n\nSub Packages: \npackage synonym.word2vec; // Analysis components for Synonyms using Word2Vec model.\n\nClasses and Interfaces: \nClass SolrSynonymParser; // Parser for the Solr synonyms format.\nClass SynonymFilter;\nClass SynonymFilterFactory;\nClass SynonymGraphFilter; // Applies single- or multi-token synonyms from a SynonymMap to an incoming TokenStream, producing a fully correct graph output.\nClass SynonymGraphFilterFactory; // Factory for SynonymGraphFilter.\nClass SynonymMap; // A map of synonyms, keys and values are phrases.\nClass SynonymMap.Builder; // Builds an FSTSynonymMap.\nClass SynonymMap.Parser; // Abstraction for parsing synonym files.\nClass WordnetSynonymParser; // Parser for wordnet prolog format\n", "des": "Analysis components for Synonyms."}
{"index": 1409, "repo": "spring-boot-actuator-3.1.1", "code": "Package: mail\n\nClasses and Interfaces: \npublic class MailHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for configured smtp server(s).\n", "des": "Actuator support for JavaMail."}
{"index": 3160, "repo": "tika-core-2.8.0", "code": "Package: parser\n\nSub Packages: \npackage parser.external; // External parser process.\n\nClasses and Interfaces: \nInterface DigestingParser.Digester; // Interface for digester.\nInterface DigestingParser.DigesterFactory; // This is used in AutoDetectParserConfig to (optionally) wrap the parser in a digesting parser.\nInterface DigestingParser.Encoder; // Encodes byte array from a MessageDigest to String\nInterface Parser; // Tika parser interface.\nInterface PasswordProvider; // Interface for providing a password to a Parser for handling Encrypted and Password Protected Documents.\nInterface RenderingParser;\nClass AbstractEncodingDetectorParser; // Abstract base class for parsers that use the AutoDetectReader and need to use the EncodingDetector configured by TikaConfig\nClass AbstractExternalProcessParser; // Abstract base class for parsers that call external processes.\nClass AbstractParser; // Abstract base class for new parsers.\nClass AutoDetectParser;\nClass AutoDetectParserConfig; // This config object can be used to tune how conservative we want to be when parsing data that is extremely compressible and resembles a ZIP bomb.\nClass AutoDetectParserFactory; // Factory for an AutoDetectParser\nClass CompositeParser; // Composite parser that delegates parsing tasks to a component parser based on the declared content type of the incoming document.\nClass CryptoParser; // Decrypts the incoming document stream and delegates further parsing to another parser instance.\nClass DefaultParser; // A composite parser based on all the Parser implementations available through the service provider mechanism.\nClass DelegatingParser; // Base class for parser implementations that want to delegate parts of the task of parsing an input document to another parser.\nClass DigestingParser;\nClass EmptyParser; // Dummy parser that always produces an empty XHTML document without even attempting to parse the given document stream.\nClass ErrorParser; // Dummy parser that always throws a TikaException without even attempting to parse the given document stream.\nClass NetworkParser;\nClass ParseContext; // Parse context.\nClass ParserDecorator; // Decorator base class for the Parser interface.\nClass ParseRecord; // Use this class to store exceptions, warnings and other information during the parse.\nClass ParserFactory;\nClass ParserPostProcessor; // Parser decorator that post-processes the results from a decorated parser.\nClass ParsingReader; // Reader for the text content from a given binary stream.\n", "des": "Tika parsers."}
{"index": 3432, "repo": "hibernate-core-5.6.15.Final", "code": "Package: interceptor\n\nClasses and Interfaces: \nInterface BytecodeInterceptorLogging; // Logging related to bytecode enhancement interceptors\nInterface BytecodeLazyAttributeInterceptor;\nInterface EnhancementHelper.InheritanceChecker;\nInterface LazyFetchGroupMetadata; // Information about a particular bytecode lazy attribute grouping.\nInterface SessionAssociableInterceptor;\nClass AbstractInterceptor;\nClass AbstractLazyLoadInterceptor;\nClass BytecodeInterceptorLogging_$logger; // Warning this class consists of generated code.\nClass EnhancementAsProxyLazinessInterceptor;\nClass EnhancementHelper;\nClass LazyAttributeDescriptor; // Descriptor for an attribute which is enabled for bytecode lazy fetching\nClass LazyAttributeLoadingInterceptor; // Interceptor that loads attributes lazily\nClass LazyAttributesMetadata; // Information about all of the bytecode lazy attributes for an entity\n", "des": "interceptor implementations"}
{"index": 472, "repo": "jackson-core-2.15.2", "code": "Package: util\n\nClasses and Interfaces: \nInterface DefaultPrettyPrinter.Indenter; // Interface that defines objects that can produce indentation used to separate object entries and array values.\nInterface Instantiatable<T>; // Add-on interface used to indicate things that may be \"blueprint\" objects which can not be used as is, but are used for creating usable per-process (serialization, deserialization) instances, using Instantiatable.createInstance() method.\nInterface JacksonFeature; // Basic API implemented by Enums used for simple Jackson \"features\": on/off settings and capabilities exposed as something that can be internally represented as bit sets.\nClass BufferRecycler; // This is a small utility class, whose main functionality is to allow simple reuse of raw byte/char buffers.\nClass BufferRecyclers; // Helper entity used to control access to simple buffer recyling scheme used for some encoding, decoding tasks.\nClass ByteArrayBuilder; // Helper class that is similar to ByteArrayOutputStream in usage, but more geared to Jackson use cases internally.\nClass DefaultIndenter; // Default linefeed-based indenter, used by DefaultPrettyPrinter (unless overridden).\nClass DefaultPrettyPrinter; // Default PrettyPrinter implementation that uses 2-space indentation with platform-default linefeeds.\nClass DefaultPrettyPrinter.FixedSpaceIndenter; // This is a very simple indenter that only adds a single space for indentation.\nClass DefaultPrettyPrinter.NopIndenter; // Dummy implementation that adds no indentation whatsoever\nClass InternCache; // Singleton class that adds a simple first-level cache in front of regular String.intern() functionality.\nClass JacksonFeatureSet<F extends JacksonFeature>; // Container similar to EnumSet meant for storing sets of JacksonFeatures (usually Enums): main difference being that these sets are immutable.\nClass JsonGeneratorDelegate;\nClass JsonParserDelegate; // Helper class that implements delegation pattern for JsonParser, to allow for simple overridability of basic parsing functionality.\nClass JsonParserSequence; // Helper class that can be used to sequence multiple physical JsonParsers to create a single logical sequence of tokens, as a single JsonParser.\nClass MinimalPrettyPrinter; // PrettyPrinter implementation that adds no indentation, just implements everything necessary for value output to work as expected, and provide simpler extension points to allow for creating simple custom implementations that add specific decoration or overrides.\n", "des": "Utility classes used by Jackson Core functionality."}
{"index": 3408, "repo": "commons-imaging-1.0-alpha3", "code": "Package: fieldtypes\n\nClasses and Interfaces: \nClass FieldType; // TIFF field types.\nClass FieldTypeAscii;\nClass FieldTypeByte;\nClass FieldTypeDouble;\nClass FieldTypeFloat;\nClass FieldTypeLong;\nClass FieldTypeRational;\nClass FieldTypeShort;\n", "des": "TIFF field types."}
{"index": 243, "repo": "nutch-2.4", "code": "Package: file\n\nClasses and Interfaces: \nClass File; // This class is a protocol plugin used for file: scheme.\nClass FileResponse; // FileResponse.java mimics file replies as http response.\nClass FileError; // Thrown for File error codes.\nClass FileException;\n", "des": "Protocol plugin which supports retrieving local file resources."}
{"index": 1886, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: jdbc\n\nClasses and Interfaces: \npublic class JdbcRealm extends AuthorizingRealm; // Realm that allows authentication and authorization via JDBC calls.\npublic static enum JdbcRealm.SaltStyle extends Enum<JdbcRealm.SaltStyle>; // Password hash salt configuration.\n", "des": "Realms that acquire security data from an RDBMS (Relational Database Management System) using the JDBC API."}
{"index": 135, "repo": "ignite-core-2.15.0", "code": "Package: managers\n\nSub Packages: \npackage managers.checkpoint; // TODO.\npackage managers.collision; // TODO.\npackage managers.communication; // TODO.\npackage managers.deployment; // TODO.\npackage managers.discovery; // TODO.\npackage managers.encryption; // Encryption manager classes.\npackage managers.eventstorage; // TODO.\npackage managers.failover; // TODO.\npackage managers.indexing; // Indexing manager classes.\npackage managers.loadbalancer; // TODO.\n\nClasses and Interfaces: \nInterface GridManager; // This interface defines life-cycle for kernal manager.\nClass GridManagerAdapter<T extends IgniteSpi>; // Convenience adapter for grid managers.\nClass IgniteMBeansManager; // Class that registers and unregisters MBeans for kernal.\n", "des": "TODO."}
{"index": 179, "repo": "ignite-core-2.15.0", "code": "Package: task\n\nClasses and Interfaces: \nClass GridTaskProcessor; // This class defines task processor.\nClass GridTaskWorker<T,R>; // Grid task worker.\nClass TaskExecutionOptions;\nAnnotation Type GridInternal; // Indicates that annotated task should always be loaded with local deployment, ignoring grid source node configuration.\nAnnotation Type GridVisorManagementTask; // Indicates that annotated task is a visor task that was invoked by user.\n", "des": "TODO."}
{"index": 1959, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: mustache\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnClass(com.samskivert.mustache.Mustache.class) @EnableConfigurationProperties(MustacheProperties.class) @Import({org.springframework.boot.autoconfigure.mustache.MustacheServletWebConfiguration.class,org.springframework.boot.autoconfigure.mustache.MustacheReactiveWebConfiguration.class}) public class MustacheAutoConfiguration extends Object; // Auto-configuration for Mustache.\n@ConfigurationProperties(prefix=\"spring.mustache\") public class MustacheProperties extends Object; // @ConfigurationProperties for Mustache.\npublic static class MustacheProperties.Reactive extends Object;\npublic static class MustacheProperties.Servlet extends Object;\npublic class MustacheResourceTemplateLoader extends Object implements com.samskivert.mustache.Mustache.TemplateLoader, org.springframework.context.ResourceLoaderAware; // Mustache TemplateLoader implementation that uses a prefix, suffix and the Spring Resource abstraction to load a template from a file, classpath, URL etc.\npublic class MustacheTemplateAvailabilityProvider extends Object implements TemplateAvailabilityProvider; // TemplateAvailabilityProvider that provides availability information for Mustache view templates.\n", "des": "Auto-configuration for Mustache."}
{"index": 2610, "repo": "wicket-util-10.0.0-M1", "code": "Package: metapattern\n\nSub Packages: \npackage metapattern.parsers; // Regular Expressions meta pattern parsers.\n\nClasses and Interfaces: \npublic final class BooleanGroup extends Group; // A Group that captures case-sensitive boolean values \"true\" or \"false\".\npublic final class FloatingPointGroup extends Group; // A Group that captures floating point values (doubles and floats).\npublic class Group extends MetaPattern; // A Group is a piece of a regular expression (referenced by some Java field or local variable) that forms a \"capturing group\" within the larger regular expression.\npublic final class GroupAlreadyBoundException extends RuntimeException; // Thrown if an attempt is made to re-bind a Group to a second capturing group or MetaPattern.\npublic final class GroupNotBoundException extends RuntimeException; // Thrown if a group is not bound.\npublic final class IntegerGroup extends Group; // A Group that captures integer values (positive and negative whole numbers, not Java ints).\npublic class MetaPattern extends Object implements IClusterable; // Useful class for constructing readable and reusable regular expressions.\npublic final class OptionalMetaPattern extends MetaPattern; // Makes any MetaPattern optional by enclosing the pattern in an optionality expression.\n", "des": "Regular Expressions meta pattern support."}
{"index": 2181, "repo": "spring-security-web-6.1.2", "code": "Package: websphere\n\nClasses and Interfaces: \npublic class WebSpherePreAuthenticatedProcessingFilter extends AbstractPreAuthenticatedProcessingFilter; // This AbstractPreAuthenticatedProcessingFilter implementation is based on WebSphere authentication.\npublic class WebSpherePreAuthenticatedWebAuthenticationDetailsSource extends Object implements org.springframework.security.authentication.AuthenticationDetailsSource<jakarta.servlet.http.HttpServletRequest,PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails>; // This AuthenticationDetailsSource implementation will set the pre-authenticated granted authorities based on the WebSphere groups for the current WebSphere user, mapped using the configured Attributes2GrantedAuthoritiesMapper.\n", "des": "Websphere-specific pre-authentication classes."}
{"index": 2186, "repo": "spring-security-web-6.1.2", "code": "Package: ui\n\nClasses and Interfaces: \npublic class DefaultLoginPageGeneratingFilter extends org.springframework.web.filter.GenericFilterBean; // For internal use with namespace configuration in the case where a user doesn't configure a login page.\npublic class DefaultLogoutPageGeneratingFilter extends org.springframework.web.filter.OncePerRequestFilter; // Generates a default log out page.\n", "des": "Authentication user-interface rendering code."}
{"index": 959, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: jaxb\n\nClasses and Interfaces: \nClass XmlRootElementEndpointMapping; // Implementation of the EndpointMapping interface that uses the JAXB2 XmlRootElement annotation to map methods to request payload root elements.\n", "des": "Provides JAXB2-based EndpointMapping implementations."}
{"index": 2457, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: datadog\n\nClasses and Interfaces: \n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.datadog.DatadogMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"datadog\") @EnableConfigurationProperties(DatadogProperties.class) public class DatadogMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Datadog.\n@ConfigurationProperties(prefix=\"management.datadog.metrics.export\") public class DatadogProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring Datadog metrics export.\n", "des": "Support for exporting actuator metrics to Datadog."}
{"index": 74, "repo": "ignite-core-2.15.0", "code": "Package: jobstealing\n\nClasses and Interfaces: \nInterface JobStealingCollisionSpiMBean; // Management MBean for job stealing based collision SPI.\nClass JobStealingCollisionSpi; // Collision SPI that supports job stealing from over-utilized nodes to under-utilized nodes.\nClass JobStealingRequest; // Job stealing request.\nAnnotation Type JobStealingDisabled; // This annotation disables job stealing if corresponding feature is configured.\n", "des": "Contains job stealing collision SPI implementation."}
{"index": 1585, "repo": "spring-websocket-6.0.11", "code": "Package: socket\n\nSub Packages: \npackage socket.adapter; // Classes adapting Spring's WebSocket API to and from WebSocket providers.\npackage socket.client; // Client-side abstractions for WebSocket applications.\npackage socket.config; // Configuration support for WebSocket request handling.\npackage socket.handler; // Convenient WebSocketHandler implementations and decorators.\npackage socket.messaging; // WebSocket integration for Spring's messaging module.\npackage socket.server; // Server-side abstractions for WebSocket interactions.\npackage socket.sockjs; // Top-level SockJS types.\n\nClasses and Interfaces: \npublic abstract class AbstractWebSocketMessage<T> extends Object implements WebSocketMessage<T>; // A message that can be handled or sent on a WebSocket connection.\npublic final class BinaryMessage extends AbstractWebSocketMessage<ByteBuffer>; // A binary WebSocket message.\npublic final class CloseStatus extends Object implements Serializable; // Represents a WebSocket close status code and reason.\npublic final class PingMessage extends AbstractWebSocketMessage<ByteBuffer>; // A WebSocket ping message.\npublic final class PongMessage extends AbstractWebSocketMessage<ByteBuffer>; // A WebSocket pong message.\npublic interface SubProtocolCapable; // An interface for WebSocket handlers that support sub-protocols as defined in RFC 6455.\npublic final class TextMessage extends AbstractWebSocketMessage<String>; // A text WebSocket message.\npublic class WebSocketExtension extends Object; // Represents a WebSocket extension as defined in the RFC 6455.\npublic interface WebSocketHandler; // A handler for WebSocket messages and lifecycle events.\npublic class WebSocketHttpHeaders extends org.springframework.http.HttpHeaders; // An HttpHeaders variant that adds support for the HTTP headers defined by the WebSocket specification RFC 6455.\npublic interface WebSocketMessage<T>; // A message that can be handled or sent on a WebSocket connection.\npublic interface WebSocketSession extends Closeable; // A WebSocket session abstraction.\n", "des": "Common abstractions and Spring configuration support for WebSocket applications."}
{"index": 546, "repo": "spring-mobile-device-1.1.5.RELEASE", "code": "Package: util\n\nClasses and Interfaces: \nClass ResolverUtils; // Static helper for determining how to handle the combination of device and site preference.\n", "des": "Spring Mobile utilities"}
{"index": 1667, "repo": "spring-boot-cli-3.1.1", "code": "Package: cli\n\nSub Packages: \npackage cli.command; // Command infrastructure for the CLI.\npackage cli.util; // Utility classes for the CLI.\n\nClasses and Interfaces: \npublic class DefaultCommandFactory extends Object implements CommandFactory; // Default implementation of CommandFactory.\npublic final class SpringCli extends Object; // Spring Command Line Interface.\n", "des": "Main entry point of the Spring Boot CLI."}
{"index": 491, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: generated\n\nClasses and Interfaces: \nInterface FieldSpecifierNotationListener; // This interface defines a complete listener for a parse tree produced by FieldSpecifierNotationParser.\nInterface FieldSpecifierNotationVisitor<T>; // This interface defines a complete generic visitor for a parse tree produced by FieldSpecifierNotationParser.\nClass FieldSpecifierNotationBaseListener; // This class provides an empty implementation of FieldSpecifierNotationListener, which can be extended to create a listener which only needs to handle a subset of the available methods.\nClass FieldSpecifierNotationBaseVisitor<T>; // This class provides an empty implementation of FieldSpecifierNotationVisitor, which can be extended to create a visitor which only needs to handle a subset of the available methods.\nClass FieldSpecifierNotationLexer;\nClass FieldSpecifierNotationParser;\nClass FieldSpecifierNotationParser.ArrayQualifierContext;\nClass FieldSpecifierNotationParser.ArrayQualifierListContext;\nClass FieldSpecifierNotationParser.DotExpressionComponentContext;\nClass FieldSpecifierNotationParser.DotExpressionContext;\nClass FieldSpecifierNotationParser.FieldSpecifierContext;\nClass FieldSpecifierNotationParser.MapQualifierContext;\nClass FieldSpecifierNotationParser.MapQualifierListContext;\nClass FieldSpecifierNotationParser.QualifiedComponentContext;\nClass FieldSpecifierNotationParser.QualifierListContext;\nClass FieldSpecifierNotationParser.QualifyComponentContext;\nClass FieldSpecifierNotationParser.SimpleIdentifierContext;\nClass FieldSpecifierNotationParser.WildcardContext;\n", "des": "Defines utilities for deailing with schemas."}
{"index": 3064, "repo": "spring-ws-core-4.0.5", "code": "Package: adapter\n\nSub Packages: \npackage adapter.method; // Provides the MethodArgumentResolver and MethodReturnValueHandler abstractions, and various implementations thereof.\n\nClasses and Interfaces: \npublic abstract class AbstractMethodEndpointAdapter extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointAdapter; // Abstract base class for EndpointAdapter implementations that support MethodEndpoints.\npublic class DefaultMethodEndpointAdapter extends AbstractMethodEndpointAdapter implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Default extension of AbstractMethodEndpointAdapter with support for pluggable argument resolvers and return value handlers.\n@Deprecated public class GenericMarshallingMethodEndpointAdapter extends MarshallingMethodEndpointAdapter;\n@Deprecated public class MarshallingMethodEndpointAdapter extends AbstractMethodEndpointAdapter implements org.springframework.beans.factory.InitializingBean;\npublic class MessageEndpointAdapter extends Object implements EndpointAdapter; // Adapter to use a MessageEndpoint as the endpoint for a EndpointInvocationChain.\n@Deprecated public class MessageMethodEndpointAdapter extends AbstractMethodEndpointAdapter;\npublic class PayloadEndpointAdapter extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointAdapter; // Adapter to use a PayloadEndpoint as the endpoint for a EndpointInvocationChain.\n@Deprecated public class PayloadMethodEndpointAdapter extends AbstractMethodEndpointAdapter;\n@Deprecated public class XPathParamAnnotationMethodEndpointAdapter extends AbstractMethodEndpointAdapter implements org.springframework.beans.factory.InitializingBean;\n", "des": "Provides miscellaneous EndpointAdapter implementations."}
{"index": 1234, "repo": "spring-hateoas-2.1.2", "code": "Package: hal\n\nSub Packages: \npackage hal.forms; // HAL-FORMS extension media type.\n\nClasses and Interfaces: \npublic abstract class CollectionModelMixin<T> extends CollectionModel<T>; // Custom mixin to to render collection content as _embedded.\npublic interface CurieProvider; // API to provide HAL curie information for links.\npublic class DefaultCurieProvider extends Object implements CurieProvider; // Default implementation of CurieProvider rendering a single configurable UriTemplate based curie.\nprotected static class DefaultCurieProvider.Curie extends Link; // Value object to get the curie Link rendered in JSON.\npublic class HalConfiguration extends Object; // HAL specific configuration.\npublic static enum HalConfiguration.RenderSingleLinks extends Enum<HalConfiguration.RenderSingleLinks>; // Configuration option how to render single links of a given LinkRelation.\npublic class HalLinkDiscoverer extends JsonPathLinkDiscoverer; // LinkDiscoverer implementation based on HAL link structure.\npublic class HalLinkRelation extends Object implements LinkRelation, MessageSourceResolvable; // Value object for HAL based LinkRelation, i.e. a relation that can be curied.\npublic static interface HalLinkRelation.HalLinkRelationBuilder; // Simple builder interface to easily create multiple HalLinkRelations for a single curie.\n@Configuration(proxyBeanMethods=false) public class HalMediaTypeConfiguration extends Object implements HypermediaMappingInformation; // Spring configuration to set up HAL support.\npublic class HalModelBuilder extends Object; // Builder API to create complex HAL representations exposing a HAL idiomatic API.\npublic static interface HalModelBuilder.PreviewBuilder;\npublic class Jackson2HalModule extends com.fasterxml.jackson.databind.module.SimpleModule; // Jackson 2 module implementation to render Link and RepresentationModel instances in HAL compatible JSON.\npublic static class Jackson2HalModule.EmbeddedMapper extends Object; // Helper to easily map embedded resources and find out whether they were curied.\npublic static class Jackson2HalModule.HalHandlerInstantiator extends ConfigurableHandlerInstantiator; // HandlerInstantiator to create HAL-specific serializers, deserializers etc.\n", "des": "HAL-specific extensions, SPIs and Jackson customizations."}
{"index": 1081, "repo": "graal-sdk-1.0.0-rc7", "code": "Package: function\n\nClasses and Interfaces: \nInterface CFunctionPointer; // Base interface for all function pointers.\nInterface CodePointer; // Pointer to executable code.\nInterface RelocatedPointer; // A pointer which is relocated when the native image is loaded at runtime.\nClass CEntryPoint.FatalExceptionHandler; // Special placeholder value for CEntryPoint.exceptionHandler() to print the caught exception and treat it as a fatal error.\nClass CEntryPointContext; // Utility methods that provide access to the current isolate.\nClass CEntryPointLiteral<T extends CFunctionPointer>; // A function pointer to an entry point method that can be, for example, handed out to C code so that C code can call back into Java code.\nEnum CEntryPoint.Builtin; // The built-in methods which can be aliased.\nEnum CFunction.Transition; // Describes the thread state transition performed when the C function is invoked.\nAnnotation Type CEntryPoint; // Annotates a method that is a VM entry point.\nAnnotation Type CEntryPoint.IsolateContext; // Designates an Isolate parameter to use as the execution context.\nAnnotation Type CEntryPoint.IsolateThreadContext; // Designates an IsolateThread parameter to use as the execution context.\nAnnotation Type CFunction; // Denotes a static native method that calls directly from Java to C, without following the JNI protocol.\nAnnotation Type CLibrary; // Denotes an external library that needs to be linked in.\nAnnotation Type CMacroInfo; // Informational only.\nAnnotation Type InvokeCFunctionPointer; // Annotation for an invocation method defined in a sub-interface of CFunctionPointer.\n", "des": "This package provides parts of the Java / C interface that are related to C functions."}
{"index": 704, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: core\n\nClasses and Interfaces: \nInterface ComponentsRegistration; // The marker interface for the IntegrationComponentSpec implementation, when there is need to register as beans not only the target spec's components, but some additional components, e.g.\nClass ConsumerEndpointSpec<S extends ConsumerEndpointSpec<S,H>,H extends org.springframework.messaging.MessageHandler>; // A EndpointSpec for consumer endpoints.\nClass EndpointSpec<S extends EndpointSpec<S,F,H>,F extends org.springframework.beans.factory.BeanNameAware,H>; // An IntegrationComponentSpec for endpoints.\nClass IntegrationComponentSpec<S extends IntegrationComponentSpec<S,T>,T>; // The common Builder abstraction.\nClass MessageHandlerSpec<S extends MessageHandlerSpec<S,H>,H extends org.springframework.messaging.MessageHandler>; // An IntegrationComponentSpec for MessageHandlers.\nClass MessageProcessorSpec<S extends MessageProcessorSpec<S>>; // The IntegrationComponentSpec specific base class for MessageProcessors.\nClass MessageProducerSpec<S extends MessageProducerSpec<S,P>,P extends org.springframework.integration.endpoint.MessageProducerSupport>; // An IntegrationComponentSpec for MessageProducers.\nClass MessageSourceSpec<S extends MessageSourceSpec<S,H>,H extends org.springframework.integration.core.MessageSource<?>>; // An IntegrationComponentSpec for MessageSources.\nClass MessagingGatewaySpec<S extends MessagingGatewaySpec<S,G>,G extends org.springframework.integration.gateway.MessagingGatewaySupport>; // An IntegrationComponentSpec for MessagingGatewaySupports.\nClass PollerFactory; // An Adapter class for the Pollers factory.\nClass Pollers; // An utility class to provide PollerSpecs for PollerMetadata configuration variants.\nClass PollerSpec; // An IntegrationComponentSpec for PollerMetadatas.\n", "des": "Provides core classes of the Spring Integration Java DSL."}
{"index": 3030, "repo": "spring-web-6.0.11", "code": "Package: cors\n\nSub Packages: \npackage cors.reactive; // Reactive support for CORS (Cross-Origin Resource Sharing), based on a common CorsProcessor strategy.\n\nClasses and Interfaces: \npublic class CorsConfiguration extends Object; // A container for CORS configuration along with methods to check against the actual origin, HTTP methods, and headers of a given request.\npublic interface CorsConfigurationSource; // Interface to be implemented by classes (usually HTTP request handlers) that provides a CorsConfiguration instance based on the provided request.\npublic interface CorsProcessor; // A strategy that takes a request and a CorsConfiguration and updates the response.\npublic abstract class CorsUtils extends Object; // Utility class for CORS request handling based on the CORS W3C recommendation.\npublic class DefaultCorsProcessor extends Object implements CorsProcessor; // The default implementation of CorsProcessor, as defined by the CORS W3C recommendation.\npublic class UrlBasedCorsConfigurationSource extends Object implements CorsConfigurationSource; // CorsConfigurationSource that uses URL path patterns to select the CorsConfiguration for a request.\n", "des": "Support for CORS (Cross-Origin Resource Sharing), based on a common CorsProcessor strategy."}
{"index": 844, "repo": "calcite-core-1.34.0", "code": "Package: logical\n\nClasses and Interfaces: \nClass LogicalAggregate; // LogicalAggregate is a relational operator which eliminates duplicates and computes totals.\nClass LogicalCalc; // A relational expression which computes project expressions and also filters.\nClass LogicalCorrelate; // A relational operator that performs nested-loop joins.\nClass LogicalExchange; // Sub-class of Exchange not targeted at any particular engine or calling convention.\nClass LogicalFilter; // Sub-class of Filter not targeted at any particular engine or calling convention.\nClass LogicalIntersect; // Sub-class of Intersect not targeted at any particular engine or calling convention.\nClass LogicalJoin; // Sub-class of Join not targeted at any particular engine or calling convention.\nClass LogicalMatch; // Sub-class of Match not targeted at any particular engine or calling convention.\nClass LogicalMinus; // Sub-class of Minus not targeted at any particular engine or calling convention.\nClass LogicalProject; // Sub-class of Project not targeted at any particular engine or calling convention.\nClass LogicalRepeatUnion; // Sub-class of RepeatUnion not targeted at any particular engine or calling convention.\nClass LogicalSnapshot; // Sub-class of Snapshot not targeted at any particular engine or calling convention.\nClass LogicalSort; // Sub-class of Sort not targeted at any particular engine or calling convention.\nClass LogicalSortExchange; // Sub-class of SortExchange not targeted at any particular engine or calling convention.\nClass LogicalTableFunctionScan; // Sub-class of TableFunctionScan not targeted at any particular engine or calling convention.\nClass LogicalTableModify; // Sub-class of TableModify not targeted at any particular engine or calling convention.\nClass LogicalTableScan; // A LogicalTableScan reads all the rows from a RelOptTable.\nClass LogicalTableSpool; // Sub-class of TableSpool not targeted at any particular engine or calling convention.\nClass LogicalUnion; // Sub-class of Union not targeted at any particular engine or calling convention.\nClass LogicalValues; // Sub-class of Values not targeted at any particular engine or calling convention.\nClass LogicalWindow; // Sub-class of Window not targeted at any particular engine or calling convention.\nClass ToLogicalConverter; // Shuttle to convert any rel plan to a plan with all logical nodes.\n", "des": "Defines logical relational expressions."}
{"index": 1732, "repo": "spring-jdbc-6.0.11", "code": "Package: lookup\n\nClasses and Interfaces: \npublic abstract class AbstractRoutingDataSource extends AbstractDataSource implements org.springframework.beans.factory.InitializingBean; // Abstract DataSource implementation that routes AbstractRoutingDataSource.getConnection() calls to one of various target DataSources based on a lookup key.\npublic class BeanFactoryDataSourceLookup extends Object implements DataSourceLookup, org.springframework.beans.factory.BeanFactoryAware; // DataSourceLookup implementation based on a Spring BeanFactory.\n@FunctionalInterface public interface DataSourceLookup; // Strategy interface for looking up DataSources by name.\npublic class DataSourceLookupFailureException extends org.springframework.dao.NonTransientDataAccessException; // Exception to be thrown by a DataSourceLookup implementation, indicating that the specified DataSource could not be obtained.\npublic class IsolationLevelDataSourceRouter extends AbstractRoutingDataSource; // DataSource that routes to one of various target DataSources based on the current transaction isolation level.\npublic class JndiDataSourceLookup extends org.springframework.jndi.JndiLocatorSupport implements DataSourceLookup; // JNDI-based DataSourceLookup implementation.\npublic class MapDataSourceLookup extends Object implements DataSourceLookup; // Simple DataSourceLookup implementation that relies on a map for doing lookups.\npublic class SingleDataSourceLookup extends Object implements DataSourceLookup; // An implementation of the DataSourceLookup that simply wraps a single given DataSource, returned for any data source name.\n", "des": "Provides a strategy for looking up JDBC DataSources by name."}
{"index": 2323, "repo": "spring-boot-3.1.1", "code": "Package: init\n\nClasses and Interfaces: \npublic class R2dbcScriptDatabaseInitializer extends AbstractScriptDatabaseInitializer; // An InitializingBean that initializes a database represented by an R2DBC ConnectionFactory.\n", "des": "Support for initialization of an SQL database using an R2DBC ConnectionFactory."}
{"index": 2221, "repo": "spring-data-commons-3.1.2", "code": "Package: init\n\nClasses and Interfaces: \npublic abstract class AbstractRepositoryPopulatorFactoryBean extends AbstractFactoryBean<ResourceReaderRepositoryPopulator> implements ApplicationListener<ContextRefreshedEvent>, ApplicationContextAware; // Base class for FactoryBeans creating ResourceReaderRepositoryPopulators.\npublic class Jackson2RepositoryPopulatorFactoryBean extends AbstractRepositoryPopulatorFactoryBean; // FactoryBean to set up a ResourceReaderRepositoryPopulator with a Jackson2ResourceReader.\npublic class Jackson2ResourceReader extends Object implements ResourceReader; // A ResourceReader using Jackson to read JSON into objects.\npublic class RepositoriesPopulatedEvent extends ApplicationEvent; // ApplicationEvent being thrown after a RepositoryPopulator has finished populating the Repositories available in the ApplicationContext.\npublic interface RepositoryPopulator; // Interface for components that will populate the Spring Data repositories with objects.\npublic interface ResourceReader;\npublic static enum ResourceReader.Type extends Enum<ResourceReader.Type>;\npublic class ResourceReaderRepositoryPopulator extends Object implements RepositoryPopulator, ApplicationEventPublisherAware; // A RepositoryPopulator using a ResourceReader to read objects from the configured Resources.\npublic class UnmarshallerRepositoryPopulatorFactoryBean extends AbstractRepositoryPopulatorFactoryBean; // FactoryBean to create a ResourceReaderRepositoryPopulator using an Unmarshaller.\npublic class UnmarshallingResourceReader extends Object implements ResourceReader;\n", "des": "Support for repository initialization using XML and JSON."}
{"index": 2939, "repo": "groovy-4.0.13", "code": "Package: tools\n\nSub Packages: \npackage tools.javac; // Classes related to the joint compiler.\n\nClasses and Interfaces: \npublic class Compiler extends Object; // A convenience front end for getting standard compilations done.\npublic class DgmConverter extends Object;\npublic class ErrorReporter extends Object; // Provides services for reporting compilation errors to the user.\npublic class FileSystemCompiler extends Object; // Command-line compiler (aka.\npublic static class FileSystemCompiler.CompilationOptions extends Object;\npublic static class FileSystemCompiler.VersionProvider extends Object implements picocli.CommandLine.IVersionProvider;\npublic class GrapeUtil extends Object;\npublic class GroovyClass extends Object;\npublic class GroovyStarter extends Object; // Helper class to initialize the Groovy runtime.\npublic class LoaderConfiguration extends Object; // Class used to configure a RootLoader from a stream or by using its methods.\npublic class RootLoader extends URLClassLoader; // This ClassLoader should be used as root of class loaders.\npublic class StringHelper extends Object;\npublic abstract class Utilities extends Object; // Various utility functions for use in the compiler.\n", "des": "Compiler entry points and miscellaneous development tools."}
{"index": 2278, "repo": "spring-data-elasticsearch-5.1.2", "code": "Package: document\n\nClasses and Interfaces: \npublic interface Document extends StringObjectMap<Document>; // A representation of a Elasticsearch document as extended Map.\npublic class Explanation extends Object; // class that holds explanations returned from an Elasticsearch search.\npublic class NestedMetaData extends Object; // meta data returned for nested inner hits.\npublic interface SearchDocument extends Document; // Extension to Document exposing search response related data.\npublic class SearchDocumentAdapter extends Object implements SearchDocument; // SearchDocument implementation using a Document delegate.\npublic class SearchDocumentResponse extends Object; // This represents the complete search response from Elasticsearch, including the returned documents.\n@FunctionalInterface public static interface SearchDocumentResponse.EntityCreator<T> extends Function<SearchDocument,CompletableFuture<T>>; // A function to convert a SearchDocument async into an entity.\n", "des": "Classes related to the Document structure of Elasticsearch documents and search responses."}
{"index": 1744, "repo": "spring-batch-integration-5.0.2", "code": "Package: partition\n\nClasses and Interfaces: \npublic class BeanFactoryStepLocator extends Object implements StepLocator, org.springframework.beans.factory.BeanFactoryAware; // A StepLocator implementation that just looks in its enclosing bean factory for components of type Step.\n@MessageEndpoint public class MessageChannelPartitionHandler extends AbstractPartitionHandler implements org.springframework.beans.factory.InitializingBean; // A PartitionHandler that uses MessageChannel instances to send instructions to remote workers and receive their responses.\npublic class RemotePartitioningManagerStepBuilder extends PartitionStepBuilder; // Builder for a manager step in a remote partitioning setup.\npublic class RemotePartitioningManagerStepBuilderFactory extends Object implements org.springframework.beans.factory.BeanFactoryAware; // Convenient factory for a RemotePartitioningManagerStepBuilder which sets the JobRepository, JobExplorer, BeanFactory and PlatformTransactionManager automatically.\npublic class RemotePartitioningWorkerStepBuilder extends StepBuilder; // Builder for a worker step in a remote partitioning setup.\npublic class RemotePartitioningWorkerStepBuilderFactory extends Object implements org.springframework.beans.factory.BeanFactoryAware; // Convenient factory for a RemotePartitioningWorkerStepBuilder which sets the JobRepository, JobExplorer, BeanFactory and PlatformTransactionManager automatically.\npublic class StepExecutionRequest extends Object implements Serializable; // Class encapsulating information required to request a step execution in a remote partitioning setup.\n@MessageEndpoint public class StepExecutionRequestHandler extends Object; // A MessageEndpoint that can handle a StepExecutionRequest and return a StepExecution as the result.\n", "des": "Remote partitioning components."}
{"index": 1887, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: jndi\n\nClasses and Interfaces: \npublic class JndiRealmFactory extends JndiLocator implements RealmFactory; // Looks up one or more Realm instances from JNDI using specified jndiNames.\n", "des": "Support for acquiring Realms from JNDI, particularly useful for configuring Shiro in JEE or EJB environments."}
{"index": 1729, "repo": "spring-jdbc-6.0.11", "code": "Package: datasource\n\nSub Packages: \npackage datasource.embedded; // Provides extensible support for creating embedded database instances.\npackage datasource.init; // Provides extensible support for initializing databases through scripts.\npackage datasource.lookup; // Provides a strategy for looking up JDBC DataSources by name.\n\nClasses and Interfaces: \npublic abstract class AbstractDataSource extends Object implements DataSource; // Abstract base class for Spring's DataSource implementations, taking care of the padding.\npublic abstract class AbstractDriverBasedDataSource extends AbstractDataSource; // Abstract base class for JDBC DataSource implementations that operate on a JDBC Driver.\n@FunctionalInterface public interface ConnectionHandle; // Simple interface to be implemented by handles for a JDBC Connection.\npublic class ConnectionHolder extends org.springframework.transaction.support.ResourceHolderSupport; // Resource holder wrapping a JDBC Connection.\npublic interface ConnectionProxy extends Connection; // Subinterface of Connection to be implemented by Connection proxies.\npublic class DataSourceTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.support.ResourceTransactionManager, org.springframework.beans.factory.InitializingBean; // PlatformTransactionManager implementation for a single JDBC DataSource.\npublic abstract class DataSourceUtils extends Object; // Helper class that provides static methods for obtaining JDBC Connections from a DataSource.\npublic class DelegatingDataSource extends Object implements DataSource, org.springframework.beans.factory.InitializingBean; // JDBC DataSource implementation that delegates all calls to a given target DataSource.\npublic class DriverManagerDataSource extends AbstractDriverBasedDataSource; // Simple implementation of the standard JDBC DataSource interface, configuring the plain old JDBC DriverManager via bean properties, and returning a new Connection from every getConnection call.\npublic class IsolationLevelDataSourceAdapter extends UserCredentialsDataSourceAdapter; // An adapter for a target DataSource, applying the current Spring transaction's isolation level (and potentially specified user credentials) to every getConnection call.\npublic abstract class JdbcTransactionObjectSupport extends Object implements org.springframework.transaction.SavepointManager, org.springframework.transaction.support.SmartTransactionObject; // Convenient base class for JDBC-aware transaction objects.\npublic class LazyConnectionDataSourceProxy extends DelegatingDataSource; // Proxy for a target DataSource, fetching actual JDBC Connections lazily, i.e.\n", "des": "Provides a utility class for easy DataSource access, a PlatformTransactionManager for a single DataSource, and various simple DataSource implementations."}
{"index": 3130, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface DialectFactory; // A factory for generating Dialect instances.\nInterface DialectResolutionInfo; // Exposes information about the database and JDBC driver that can be used in resolving the appropriate Dialect to use.\nInterface DialectResolutionInfoSource; // Contract for the source of DialectResolutionInfo.\nInterface DialectResolver; // Contract for determining the Dialect to use based on information about the database / driver.\nClass BasicDialectResolver; // Intended as support for custom resolvers which match a single db name (with optional version info).\nClass BasicSQLExceptionConverter; // A helper to centralize conversion of SQLExceptions to JDBCExceptions.\nClass DatabaseMetaDataDialectResolutionInfoAdapter; // An implementation of DialectResolutionInfo that delegates calls to a wrapped DatabaseMetaData.\n", "des": "Contracts supporting Dialect resolution (from JDBC metadata) and Dialect building."}
{"index": 1270, "repo": "spring-core-6.0.11", "code": "Package: codec\n\nClasses and Interfaces: \npublic abstract class AbstractDataBufferDecoder<T> extends AbstractDecoder<T>; // Abstract base class for Decoder implementations that can decode a DataBuffer directly to the target element type.\npublic abstract class AbstractDecoder<T> extends Object implements Decoder<T>; // Abstract base class for Decoder implementations.\npublic abstract class AbstractEncoder<T> extends Object implements Encoder<T>; // Abstract base class for Encoder implementations.\npublic abstract class AbstractSingleValueEncoder<T> extends AbstractEncoder<T>; // Abstract base class for Encoder classes that can only deal with a single value.\npublic class ByteArrayDecoder extends AbstractDataBufferDecoder<byte[]>; // Decoder for byte arrays.\npublic class ByteArrayEncoder extends AbstractEncoder<byte[]>; // Encoder for byte arrays.\npublic class ByteBufferDecoder extends AbstractDataBufferDecoder<ByteBuffer>; // Decoder for ByteBuffers.\npublic class ByteBufferEncoder extends AbstractEncoder<ByteBuffer>; // Encoder for ByteBuffers.\npublic final class CharSequenceEncoder extends AbstractEncoder<CharSequence>; // Encode from a CharSequence stream to a bytes stream.\npublic class CodecException extends NestedRuntimeException; // General error that indicates a problem while encoding and decoding to and from an Object stream.\npublic class DataBufferDecoder extends AbstractDataBufferDecoder<DataBuffer>; // Simple pass-through decoder for DataBuffers.\npublic class DataBufferEncoder extends AbstractEncoder<DataBuffer>; // Simple pass-through encoder for DataBuffers.\npublic interface Decoder<T>; // Strategy for decoding a DataBuffer input stream into an output stream of elements of type <T>.\npublic class DecodingException extends CodecException; // Indicates an issue with decoding the input stream with a focus on content related issues such as a parse failure.\npublic interface Encoder<T>; // Strategy to encode a stream of Objects of type <T> into an output stream of bytes.\npublic class EncodingException extends CodecException; // Indicates an issue with encoding the input Object stream with a focus on not being able to encode Objects.\npublic abstract class Hints extends Object; // Constants and convenience methods for working with hints.\npublic class Netty5BufferDecoder extends AbstractDataBufferDecoder<io.netty5.buffer.Buffer>; // Decoder for Buffers.\n", "des": "Encoder and Decoder abstractions to convert between a reactive stream of bytes and Java objects."}
{"index": 3583, "repo": "lucene-test-framework-9.7.0", "code": "Package: cheapbastard\n\nClasses and Interfaces: \nClass CheapBastardCodec; // Codec that tries to use as little ram as possible because he spent all his money on beer\n", "des": "Codec that unreasonably tries to use as little RAM as possible."}
{"index": 1413, "repo": "spring-boot-actuator-3.1.1", "code": "Package: annotation\n\nClasses and Interfaces: \npublic final class TimedAnnotations extends Object; // Utility used to obtain @Timed annotations from bean methods.\n", "des": "Support classes for handler method metrics."}
{"index": 2479, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: r2dbc\n\nClasses and Interfaces: \n@AutoConfiguration(after={MetricsAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class,org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration.class}) @ConditionalOnClass({io.r2dbc.pool.ConnectionPool.class,io.micrometer.core.instrument.MeterRegistry.class}) @ConditionalOnBean({io.r2dbc.spi.ConnectionFactory.class,io.micrometer.core.instrument.MeterRegistry.class}) public class ConnectionPoolMetricsAutoConfiguration extends Object; // Auto-configuration for metrics on all available R2DBC connection factories.\n", "des": "Auto-configuration for R2DBC metrics."}
{"index": 2825, "repo": "groovy-xml-4.0.13", "code": "Package: slurpersupport\n\nClasses and Interfaces: \npublic class Attribute extends GPathResult; // Lazy evaluated representation of a node attribute.\npublic class Attributes extends NodeChildren; // Lazy evaluated representation of a node's attributes.\npublic class FilteredAttributes extends Attributes; // Lazy evaluated representation of a node's attributes filtered by a Closure.\npublic class FilteredNodeChildren extends NodeChildren; // Lazy evaluated representation of child nodes filtered by a Closure.\npublic abstract class GPathResult extends groovy.lang.GroovyObjectSupport implements groovy.lang.Writable, groovy.lang.Buildable, Iterable; // Base class for representing lazy evaluated GPath expressions.\npublic class NamespaceAwareHashMap extends HashMap<String,String>;\npublic class NoChildren extends GPathResult; // Lazy evaluated representation of a GPath expression returning no children.\npublic class Node extends Object implements groovy.lang.Writable; // Represents a node.\npublic class NodeChild extends GPathResult; // Lazy evaluated representation of a child node.\npublic class NodeChildren extends GPathResult; // Lazy evaluated representation of child nodes.\npublic abstract class NodeIterator extends Object implements Iterator; // Helper class for iterating through nodes.\npublic class NodeParents extends NodeChildren; // Lazy evaluated representation of parent nodes without duplicates\npublic abstract class ReplacementNode extends Object implements groovy.lang.Buildable, groovy.lang.Writable; // Helper base class used for lazy updates.\n", "des": "Helper classes for XmlSlurper."}
{"index": 2832, "repo": "spring-data-r2dbc-3.1.2", "code": "Package: event\n\nClasses and Interfaces: \n@FunctionalInterface public interface AfterConvertCallback<T> extends EntityCallback<T>; // Callback being invoked after a domain object is materialized from a row when reading results.\n@FunctionalInterface public interface AfterSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered after save of a OutboundRow.\n@FunctionalInterface public interface BeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\n@FunctionalInterface public interface BeforeSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered before save of a row.\npublic class ReactiveAuditingEntityCallback extends Object implements BeforeConvertCallback<Object>, Ordered; // Reactive EntityCallback to populate auditing related fields on an entity about to be saved.\n", "des": "Mapping event callback infrastructure for the R2DBC row-to-object mapping subsystem."}
{"index": 2796, "repo": "spring-amqp-3.0.6", "code": "Package: event\n\nClasses and Interfaces: \npublic abstract class AmqpEvent extends org.springframework.context.ApplicationEvent; // Base class for events.\n", "des": "Classes related to application events"}
{"index": 999, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: jms\n\nSub Packages: \npackage jms.support; // Classes supporting the org.springframework.ws.transport.jms package.\n\nClasses and Interfaces: \nInterface JmsTransportConstants; // Declares JMS-specific transport constants.\nClass JmsMessageReceiver; // Convenience base class for JMS server-side transport objects.\nClass JmsMessageSender; // WebServiceMessageSender implementation that uses JMS Messages.\nClass JmsReceiverConnection; // Implementation of WebServiceConnection that is used for server-side JMS access.\nClass JmsSenderConnection; // Implementation of WebServiceConnection that is used for client-side JMS access.\nClass WebServiceMessageListener; // Spring SessionAwareMessageListener that can be used to handle incoming Message service requests.\nClass JmsTransportException; // Exception that is thrown when an error occurs in the JMS transport.\n", "des": "Package providing support for handling messages via JMS."}
{"index": 3202, "repo": "tomcat-api-10.1", "code": "Package: util\n\nSub Packages: \npackage util.mime; // MIME decoder implementation, imported and retailed from Apache Geronimo.\n\nClasses and Interfaces: \nInterface Closeable; // Interface of an object, which may be closed.\nClass FileItemHeadersImpl; // Default implementation of the FileItemHeaders interface.\nClass LimitedInputStream; // An input stream, which limits its data size.\nClass Streams; // Utility class for working with streams.\n", "des": "This package contains various IO related utility classes or methods, which are basically reusable and not necessarily restricted to the scope of a file upload."}
{"index": 2029, "repo": "spring-messaging-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractNamedValueMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Abstract base class to resolve method arguments from a named value, e.g.\nprotected static class AbstractNamedValueMethodArgumentResolver.NamedValueInfo extends Object; // Represents a named value declaration.\npublic class AnnotationExceptionHandlerMethodResolver extends AbstractExceptionHandlerMethodResolver; // A subclass of AbstractExceptionHandlerMethodResolver that looks for MessageExceptionHandler-annotated methods in a given class.\npublic class DefaultMessageHandlerMethodFactory extends Object implements MessageHandlerMethodFactory, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // The default MessageHandlerMethodFactory implementation creating an InvocableHandlerMethod with the necessary HandlerMethodArgumentResolver instances to detect and process most of the use cases defined by MessageMapping.\npublic class DestinationVariableMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver; // Resolve for @DestinationVariable method parameters.\npublic class HeaderMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver; // Resolver for @Header arguments.\npublic class HeadersMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Argument resolver for headers.\npublic interface MessageHandlerMethodFactory; // A factory for InvocableHandlerMethod that is suitable to process an incoming Message\npublic class MessageMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // HandlerMethodArgumentResolver for Message method arguments.\npublic class MethodArgumentNotValidException extends MethodArgumentResolutionException; // Exception to be thrown when a method argument fails validation perhaps as a result of @Valid style validation, or perhaps because it is required.\npublic class MethodArgumentTypeMismatchException extends MethodArgumentResolutionException; // Exception that indicates that a method argument has not the expected type.\npublic class PayloadMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // A resolver to extract and convert the payload of a message using a MessageConverter.\n", "des": "Support classes for working with annotated message-handling methods."}
{"index": 438, "repo": "commons-pool2-2.11.1", "code": "Package: proxy\n\nClasses and Interfaces: \nClass CglibProxySource<T>; // Provides proxy objects using CGLib.\nClass JdkProxySource<T>; // Provides proxy objects using Java reflection.\nClass ProxiedKeyedObjectPool<K,V>; // Create a new keyed object pool where the pooled objects are wrapped in proxies allowing better control of pooled objects and in particular the prevention of the continued use of an object by a client after that client returns the object to the pool.\nClass ProxiedObjectPool<T>; // Create a new object pool where the pooled objects are wrapped in proxies allowing better control of pooled objects and in particular the prevention of the continued use of an object by a client after that client returns the object to the pool.\n", "des": "Object pooling proxy implementation."}
{"index": 912, "repo": "commons-compress-1.23.0", "code": "Package: tar\n\nClasses and Interfaces: \nInterface TarConstants; // This interface contains all the definitions used in the package.\nClass TarArchiveEntry; // This class represents an entry in a Tar archive.\nClass TarArchiveInputStream; // The TarInputStream reads a UNIX tar archive as an InputStream.\nClass TarArchiveOutputStream; // The TarOutputStream writes a UNIX tar archive as an OutputStream.\nClass TarArchiveSparseEntry; // This class represents a sparse entry in a Tar archive.\nClass TarArchiveStructSparse; // This class represents struct sparse in a Tar archive.\nClass TarFile; // Provides random access to UNIX archives.\nClass TarUtils; // This class provides static utility methods to work with byte streams.\n", "des": "Provides stream classes for reading and writing archives using the TAR format."}
{"index": 2091, "repo": "spring-webflux-6.0.11", "code": "Package: accept\n\nClasses and Interfaces: \npublic class FixedContentTypeResolver extends Object implements RequestedContentTypeResolver; // Resolver that always resolves to a fixed list of media types.\npublic class HeaderContentTypeResolver extends Object implements RequestedContentTypeResolver; // Resolver that looks at the 'Accept' header of the request.\npublic class ParameterContentTypeResolver extends Object implements RequestedContentTypeResolver; // Resolver that checks a query parameter and uses it to look up a matching MediaType.\npublic interface RequestedContentTypeResolver; // Strategy to resolve the requested media types for a ServerWebExchange.\npublic class RequestedContentTypeResolverBuilder extends Object; // Builder for a composite RequestedContentTypeResolver that delegates to other resolvers each implementing a different strategy to determine the requested content type -- e.g.\npublic static class RequestedContentTypeResolverBuilder.ParameterResolverConfigurer extends Object; // Helper to create and configure ParameterContentTypeResolver.\n", "des": "RequestedContentTypeResolver strategy and implementations to resolve the requested content type for a given request."}
{"index": 19, "repo": "commons-collections4-4.4", "code": "Package: functors\n\nClasses and Interfaces: \nInterface PredicateDecorator<T>; // Defines a predicate that decorates one or more other predicates.\nClass AbstractQuantifierPredicate<T>; // Abstract base class for quantification predicates, e.g.\nClass AllPredicate<T>; // Predicate implementation that returns true if all the predicates return true.\nClass AndPredicate<T>; // Predicate implementation that returns true if both the predicates return true.\nClass AnyPredicate<T>; // Predicate implementation that returns true if any of the predicates return true.\nClass CatchAndRethrowClosure<E>; // Closure that catches any checked exception and re-throws it as a FunctorException runtime exception.\nClass ChainedClosure<E>; // Closure implementation that chains the specified closures together.\nClass ChainedTransformer<T>; // Transformer implementation that chains the specified transformers together.\nClass CloneTransformer<T>; // Transformer implementation that returns a clone of the input object.\nClass ClosureTransformer<T>; // Transformer implementation that calls a Closure using the input object and then returns the input.\nClass ComparatorPredicate<T>; // Predicate that compares the input object with the one stored in the predicate using a comparator.\nClass ConstantFactory<T>; // Factory implementation that returns the same constant each time.\nClass ConstantTransformer<I,O>; // Transformer implementation that returns the same constant each time.\nClass DefaultEquator<T>; // Default Equator implementation.\nClass EqualPredicate<T>; // Predicate implementation that returns true if the input is the same object as the one stored in this predicate by equals.\nClass ExceptionClosure<E>; // Closure implementation that always throws an exception.\nClass ExceptionFactory<T>; // Factory implementation that always throws an exception.\nClass ExceptionPredicate<T>; // Predicate implementation that always throws an exception.\nClass ExceptionTransformer<I,O>; // Transformer implementation that always throws an exception.\nClass FactoryTransformer<I,O>; // Transformer implementation that calls a Factory and returns the result.\nClass FalsePredicate<T>; // Predicate implementation that always returns false.\nClass ForClosure<E>; // Closure implementation that calls another closure n times, like a for loop.\n", "des": "This package contains implementations of the Closure, Predicate, Transformer and Factory interfaces."}
{"index": 1286, "repo": "spring-core-6.0.11", "code": "Package: type\n\nSub Packages: \npackage type.classreading; // Support classes for reading annotation and class-level metadata.\npackage type.filter; // Core support package for type filtering (e.g.\n\nClasses and Interfaces: \npublic interface AnnotatedTypeMetadata; // Defines access to the annotations of a specific type (class or method), in a form that does not necessarily require the class-loading.\npublic interface AnnotationMetadata extends ClassMetadata, AnnotatedTypeMetadata; // Interface that defines abstract access to the annotations of a specific class, in a form that does not require that class to be loaded yet.\npublic interface ClassMetadata; // Interface that defines abstract metadata of a specific class, in a form that does not require that class to be loaded yet.\npublic interface MethodMetadata extends AnnotatedTypeMetadata; // Interface that defines abstract access to the annotations of a specific method, in a form that does not require that method's class to be loaded yet.\npublic class StandardAnnotationMetadata extends StandardClassMetadata implements AnnotationMetadata; // AnnotationMetadata implementation that uses standard reflection to introspect a given Class.\npublic class StandardClassMetadata extends Object implements ClassMetadata; // ClassMetadata implementation that uses standard reflection to introspect a given Class.\npublic class StandardMethodMetadata extends Object implements MethodMetadata; // MethodMetadata implementation that uses standard reflection to introspect a given Method.\n", "des": "Core support package for type introspection."}
{"index": 2653, "repo": "spring-data-cassandra-4.1.2", "code": "Package: init\n\nClasses and Interfaces: \npublic class CannotReadScriptException extends ScriptException; // Thrown by ScriptUtils if a CQL script cannot be read.\npublic class CompositeKeyspacePopulator extends Object implements KeyspacePopulator; // Composite KeyspacePopulator that delegates to a list of given KeyspacePopulator implementations, executing all scripts.\n@FunctionalInterface public interface KeyspacePopulator; // Strategy used to populate, initialize, or clean up a Cassandra keyspace.\npublic class ResourceKeyspacePopulator extends Object implements KeyspacePopulator; // Populates, initializes, or cleans up a keyspace using CQL scripts defined in external resources.\npublic abstract class ScriptException extends DataAccessException; // Root of the hierarchy of data access exceptions that are related to processing of CQL scripts.\npublic class ScriptParseException extends ScriptException; // Thrown by ScriptUtils if a CQL script cannot be properly parsed.\npublic class ScriptStatementFailedException extends ScriptException; // Thrown by ScriptUtils if a statement in an CQL script failed when executing it against the target database.\npublic abstract class ScriptUtils extends Object; // Generic utility methods for working with CQL scripts.\npublic class SessionFactoryInitializer extends Object implements InitializingBean, DisposableBean; // Used to set up a keyspace during initialization and clean up a keyspace during destruction.\npublic class UncategorizedScriptException extends ScriptException; // Thrown when we cannot determine anything more specific than \"something went wrong while processing a CQL script\": for example, a Exception from Cassandra that we cannot pinpoint more precisely.\n", "des": "Provides extensible support for initializing databases through scripts."}
{"index": 3649, "repo": "solr-core-9.3.0", "code": "Package: repository\n\nClasses and Interfaces: \nInterface BackupRepository; // This interface defines the functionality required to backup/restore Solr indexes to an arbitrary storage system.\nClass BackupRepositoryFactory;\nClass LocalFileSystemRepository; // A concrete implementation of BackupRepository interface supporting backup/restore of Solr indexes to a local file-system.\nEnum BackupRepository.PathType; // This enumeration defines the type of a given path.\n", "des": "BackupRepository Providing backup/restore repository interfaces to plug different storage systems"}
{"index": 3639, "repo": "solr-core-9.3.0", "code": "Package: collections\n\nClasses and Interfaces: \nInterface Assign.AssignStrategy; // Strategy for assigning replicas to nodes.\nInterface CollApiCmds.CollectionApiCommand; // Interface implemented by all Collection API commands.\nInterface CollectionCommandContext; // Data passed to Collection API command execution, to allow calls from either the OverseerCollectionMessageHandler when commands are executed on the Overseer, or - in a future change - allow Collection API commands to be executed in a distributed way, unrelated to and not depending upon Overseer abstractions (including overseer collection message handling).\nClass AddReplicaCmd;\nClass AddReplicaCmd.CreateReplica; // A data structure to keep all information required to create a new replica in one place.\nClass Assign;\nClass Assign.AssignRequest;\nClass Assign.AssignRequestBuilder;\nClass BackupCmd;\nClass BalanceReplicasCmd;\nClass CategoryRoutedAlias;\nClass CollApiCmds; // This class contains \"smaller\" Collection API commands implementation, the interface implemented by all commands and the class mapping a collection action to the actual command.\nClass CollApiCmds.AddReplicaPropCmd;\nClass CollApiCmds.BalanceShardsUniqueCmd;\nClass CollApiCmds.CommandMap; // Map CollectionParams.CollectionAction to instances of CollApiCmds.CollectionApiCommand and being usable by both OverseerCollectionMessageHandler and DistributedCollectionConfigSetCommandRunner so that the mappings do not have to be maintained in two places.\nClass CollApiCmds.DeleteReplicaPropCmd;\nClass CollApiCmds.MockOperationCmd;\nClass CollApiCmds.ModifyCollectionCmd;\nClass CollApiCmds.RebalanceLeadersCmd;\nClass CollApiCmds.ReloadCollectionCmd;\nClass CollectionApiLockFactory; // This class implements a higher level locking abstraction for the Collection API using lower level read and write locks.\nClass CollectionHandlingUtils; // This class contains helper methods used by commands of the Collection API.\nClass CollectionHandlingUtils.ShardRequestTracker;\nClass CreateAliasCmd;\nClass CreateCollectionCmd;\nClass CreateShardCmd;\nClass CreateSnapshotCmd; // This class implements the functionality of creating a collection level snapshot.\nClass DeleteAliasCmd;\nClass DeleteBackupCmd; // An overseer command used to delete files associated with incremental backups.\nClass DeleteCollectionCmd;\nClass DeleteNodeCmd;\n", "des": "Package related to internal implementations of the SolrCloud collections api"}
{"index": 1634, "repo": "spring-kafka-3.0.9", "code": "Package: messaging\n\nClasses and Interfaces: \n@FunctionalInterface public interface MessagingFunction; // A function that receives a spring-messaging Message and returns a Message.\npublic class MessagingProcessor<Kin,Vin,Kout,Vout> extends org.apache.kafka.streams.processor.api.ContextualProcessor<Kin,Vin,Kout,Vout>; // A Transformer implementation that invokes a MessagingFunction converting to/from spring-messaging Message.\n@Deprecated public class MessagingTransformer<K,V,R> extends Object implements org.apache.kafka.streams.kstream.Transformer<K,V,org.apache.kafka.streams.KeyValue<K,R>>;\n", "des": "Package for classes related to spring-messaging with Kafka Streams."}
{"index": 2210, "repo": "spring-data-commons-3.1.2", "code": "Package: model\n\nClasses and Interfaces: \npublic abstract class AbstractPersistentProperty<P extends PersistentProperty<P>> extends Object implements PersistentProperty<P>; // Simple implementation of PersistentProperty.\npublic abstract class AnnotationBasedPersistentProperty<P extends PersistentProperty<P>> extends AbstractPersistentProperty<P>; // Special PersistentProperty that takes annotations at a property into account.\npublic class BasicPersistentEntity<T,P extends PersistentProperty<P>> extends Object implements MutablePersistentEntity<T,P>; // Simple value object to capture information of PersistentEntitys.\npublic enum BeanWrapperPropertyAccessorFactory extends Enum<BeanWrapperPropertyAccessorFactory> implements PersistentPropertyAccessorFactory; // PersistentPropertyAccessorFactory that uses a BeanWrapper.\npublic class CamelCaseAbbreviatingFieldNamingStrategy extends CamelCaseSplittingFieldNamingStrategy; // FieldNamingStrategy that abbreviates field names by using the very first letter of the camel case parts of the PersistentProperty's name.\npublic class CamelCaseSplittingFieldNamingStrategy extends Object implements FieldNamingStrategy; // Configurable FieldNamingStrategy that splits up camel-case property names and reconcatenates them using a configured delimiter.\npublic class ClassGeneratingPropertyAccessorFactory extends Object implements PersistentPropertyAccessorFactory; // A factory that can generate byte code to speed-up dynamic property access.\npublic class ConvertingPropertyAccessor<T> extends Object; // PersistentPropertyAccessor that potentially converts the value handed to ConvertingPropertyAccessor.setProperty(PersistentProperty, Object) to the type of the PersistentProperty using a ConversionService.\npublic class DefaultSpELExpressionEvaluator extends Object implements SpELExpressionEvaluator; // ParameterValueProvider implementation that evaluates the Parameters key against SpelExpressionParser and EvaluationContext.\npublic interface EntityInstantiator; // SPI to abstract strategies to create instances for PersistentEntitys.\npublic class EntityInstantiators extends Object; // Simple value object allowing access to EntityInstantiator instances for a given type falling back to a default one.\npublic interface FieldNamingStrategy; // SPI to determine how to name document fields in cases the field name is not manually defined.\npublic class IdPropertyIdentifierAccessor extends TargetAwareIdentifierAccessor; // Default implementation of IdentifierAccessor.\npublic class InstantiationAwarePropertyAccessor<T> extends Object implements PersistentPropertyAccessor<T>; // A PersistentPropertyAccessor that will use an entity's PersistenceCreator to create a new instance of it to apply a new value for a given PersistentProperty.\n", "des": "Core implementation of the mapping subsystem's model."}
{"index": 172, "repo": "ignite-core-2.15.0", "code": "Package: version\n\nClasses and Interfaces: \nClass GridVersionCommandHandler; // Handler for GridRestCommand.VERSION and GridRestCommand.NAME command.\n", "des": "REST version command."}
{"index": 1401, "repo": "spring-boot-actuator-3.1.1", "code": "Package: influx\n\nClasses and Interfaces: \npublic class InfluxDbHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for InfluxDB.\n", "des": "Actuator support for InfluxDB."}
{"index": 1819, "repo": "spring-integration-mail-6.1.2", "code": "Package: transformer\n\nClasses and Interfaces: \npublic abstract class AbstractMailMessageTransformer<T> extends Object implements org.springframework.integration.transformer.Transformer, org.springframework.beans.factory.BeanFactoryAware; // Base class for Transformers that convert from a JavaMail Message to a Spring Integration Message.\npublic class MailToStringTransformer extends AbstractMailMessageTransformer<String>; // Transforms a Message payload of type Message to a String.\n", "des": "Provides classes related to transforming mail messages."}
{"index": 291, "repo": "pdfbox-3.0.0-beta1", "code": "Package: encryption\n\nClasses and Interfaces: \nClass AccessPermission; // This class represents the access permissions to a document.\nClass DecryptionMaterial; // This class represents data required to decrypt PDF documents.\nClass PDCryptFilterDictionary; // This class is a specialized view of the crypt filter dictionary of a PDF document.\nClass PDEncryption; // This class is a specialized view of the encryption dictionary of a PDF document.\nClass ProtectionPolicy; // This class represents the protection policy to apply to a document.\nClass PublicKeyDecryptionMaterial; // This class holds necessary information to decrypt a PDF document protected by the public key security handler.\nClass PublicKeyProtectionPolicy; // The protection policy to use to protect a document with the public key security handler.\nClass PublicKeyRecipient; // Represents a recipient in the public key protection policy.\nClass PublicKeySecurityHandler; // This class implements the public key security handler described in the PDF specification.\nClass SecurityHandler<T_POLICY extends ProtectionPolicy>; // A security handler as described in the PDF specifications.\nClass SecurityHandlerFactory; // Manages security handlers for the application.\nClass SecurityProvider; // Singleton which provides a security provider.\nClass StandardDecryptionMaterial; // Represents the necessary information to decrypt a document protected by the standard security handler (password protection).\nClass StandardProtectionPolicy; // The protection policy to add to a document for password-based protection.\nClass StandardSecurityHandler; // The standard security handler.\nClass InvalidPasswordException; // Indicates that an invalid password was supplied.\n", "des": "The encryption package will handle the PDF document security handlers and the functionality of pluggable security handlers."}
{"index": 1830, "repo": "spring-test-6.0.11", "code": "Package: reactive\n\nClasses and Interfaces: \npublic class MockClientHttpRequest extends org.springframework.http.client.reactive.AbstractClientHttpRequest; // Mock implementation of ClientHttpRequest.\npublic class MockClientHttpResponse extends Object implements org.springframework.http.client.reactive.ClientHttpResponse; // Mock implementation of ClientHttpResponse.\n", "des": "Mock implementations of reactive HTTP client contracts."}
{"index": 669, "repo": "commons-lang3-3.12.0", "code": "Package: exception\n\nClasses and Interfaces: \nInterface ExceptionContext; // Allows the storage and retrieval of contextual information based on label-value pairs for exceptions.\nClass DefaultExceptionContext; // Default implementation of the context storing the label-value pairs for contexted exceptions.\nClass ExceptionUtils; // Provides utilities for manipulating and examining Throwable objects.\nClass CloneFailedException; // Exception thrown when a clone cannot be created.\nClass ContextedException; // An exception that provides an easy and safe way to add contextual information.\nClass ContextedRuntimeException; // A runtime exception that provides an easy and safe way to add contextual information.\n", "des": "Provides functionality for Exceptions."}
{"index": 1007, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: wsdl11\n\nSub Packages: \npackage wsdl11.provider; // Provides a contribution strategy for WSDL definitions.\n\nClasses and Interfaces: \nInterface Wsdl11Definition; // Models a WSDL 1.1-specific WsdlDefinition.\nClass DefaultWsdl11Definition; // Convenient implementation of Wsdl11Definition that creates a SOAP 1.1 or 1.2 binding based on naming conventions in one or more inlined XSD schemas.\nClass ProviderBasedWsdl4jDefinition; // Implementation of the Wsdl11Definition that uses a provider-based mechanism to populate a WSDL4J Definition.\nClass SimpleWsdl11Definition; // The default Wsdl11Definition implementation.\nClass Wsdl4jDefinition; // Implementation of the Wsdl11Definition based on WSDL4J.\nClass Wsdl4jDefinitionException; // Subclass of WsdlDefinitionException that wraps WSDLExceptions.\n", "des": "Contains interfaces and classes specific to WSDL 1.1."}
{"index": 3424, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface ArchiveContext; // Describes the context for visiting the entries within an archive\nInterface ArchiveDescriptor; // Contract for visiting an archive, which might be a jar, a zip, an exploded directory, etc.\nInterface ArchiveDescriptorFactory; // Contract for building ArchiveDescriptor instances.\nInterface ArchiveEntry; // Represent an entry in the archive.\nInterface ArchiveEntryHandler; // Handler for archive entries, based on the classified type of the entry\nInterface InputStreamAccess; // Contract for building InputStreams, especially in on-demand situations\nInterface JarFileEntryUrlAdjuster; // Optional contract for ArchiveDescriptorFactory implementations to implement to be able to adjust <jar-file/> URL's defined in persistence.xml files.\nClass AbstractArchiveDescriptor; // Base support for ArchiveDescriptor implementors.\nClass AbstractArchiveDescriptorFactory;\nClass ArchiveException; // Indicates a problem accessing or visiting the archive\n", "des": "Defines the SPI for support of \"scanning\" of \"archives\"."}
{"index": 1511, "repo": "spring-context-6.0.11", "code": "Package: event\n\nClasses and Interfaces: \npublic abstract class AbstractApplicationEventMulticaster extends Object implements ApplicationEventMulticaster, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware; // Abstract implementation of the ApplicationEventMulticaster interface, providing the basic listener registration facility.\npublic abstract class ApplicationContextEvent extends ApplicationEvent; // Base class for events raised for an ApplicationContext.\npublic interface ApplicationEventMulticaster; // Interface to be implemented by objects that can manage a number of ApplicationListener objects and publish events to them.\npublic class ApplicationListenerMethodAdapter extends Object implements GenericApplicationListener; // GenericApplicationListener adapter that delegates the processing of an event to an EventListener annotated method.\npublic class ContextClosedEvent extends ApplicationContextEvent; // Event raised when an ApplicationContext gets closed.\npublic class ContextRefreshedEvent extends ApplicationContextEvent; // Event raised when an ApplicationContext gets initialized or refreshed.\npublic class ContextStartedEvent extends ApplicationContextEvent; // Event raised when an ApplicationContext gets started.\npublic class ContextStoppedEvent extends ApplicationContextEvent; // Event raised when an ApplicationContext gets stopped.\npublic class DefaultEventListenerFactory extends Object implements EventListenerFactory, org.springframework.core.Ordered; // Default EventListenerFactory implementation that supports the regular EventListener annotation.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Reflective public @interface EventListener; // Annotation that marks a method as a listener for application events.\npublic interface EventListenerFactory; // Strategy interface for creating ApplicationListener for methods annotated with EventListener.\npublic class EventListenerMethodProcessor extends Object implements org.springframework.beans.factory.SmartInitializingSingleton, ApplicationContextAware, org.springframework.beans.factory.config.BeanFactoryPostProcessor; // Registers EventListener methods as individual ApplicationListener instances.\npublic class EventPublicationInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, ApplicationEventPublisherAware, org.springframework.beans.factory.InitializingBean; // Interceptor that publishes an ApplicationEvent to all ApplicationListeners registered with an ApplicationEventPublisher after each successful method invocation.\npublic interface GenericApplicationListener extends SmartApplicationListener; // Extended variant of the standard ApplicationListener interface, exposing further metadata such as the supported event and source type.\n", "des": "Support classes for application events, like standard context events."}
{"index": 301, "repo": "pdfbox-3.0.0-beta1", "code": "Package: action\n\nClasses and Interfaces: \nClass PDAction; // This represents an action that can be executed in a PDF document.\nClass PDActionEmbeddedGoTo; // This represents a embedded go-to action that can be executed in a PDF document.\nClass PDActionFactory; // This class will take a dictionary and determine which type of action to create.\nClass PDActionGoTo; // This represents a go-to action that can be executed in a PDF document.\nClass PDActionHide; // This represents a thread action that can be executed in a PDF document.\nClass PDActionImportData;\nClass PDActionJavaScript; // This represents a JavaScript action.\nClass PDActionLaunch; // This represents a launch action that can be executed in a PDF document.\nClass PDActionMovie;\nClass PDActionNamed; // This represents a named action in a PDF document.\nClass PDActionRemoteGoTo; // This represents a remote go-to action that can be executed in a PDF document.\nClass PDActionResetForm;\nClass PDActionSound; // This represents a Sound action that can be executed in a PDF document.\nClass PDActionSubmitForm; // This represents a Submit-Form action that can be executed in a PDF document.\nClass PDActionThread; // This represents a thread action that can be executed in a PDF document.\nClass PDActionURI; // This represents a URI action that can be executed in a PDF document.\nClass PDAdditionalActions; // This represents a dictionary of actions that occur due to events.\nClass PDAnnotationAdditionalActions; // This class represents an annotation's dictionary of actions that occur due to events.\nClass PDDocumentCatalogAdditionalActions; // This class represents a document catalog's dictionary of actions that occur due to events.\nClass PDFormFieldAdditionalActions; // This class represents a form field's dictionary of actions that occur due to events.\nClass PDPageAdditionalActions; // This class represents a page object's dictionary of actions that occur due to events.\nClass PDTargetDirectory; // A target dictionary specifying path information to the target document.\nClass PDURIDictionary; // This is the implementation of an URI dictionary.\nClass PDWindowsLaunchParams; // Launch parameters for the windows OS.\nEnum OpenMode; // This will specify whether to open the destination document in a new window.\n", "des": "This package represents actions that can be performed in a PDF document."}
{"index": 373, "repo": "calcite-linq4j-1.34.0", "code": "Package: linq4j\n\nSub Packages: \npackage linq4j.function; // Contains definitions of functions and predicates.\npackage linq4j.tree; // Object model for Java expressions.\n\nClasses and Interfaces: \nInterface Enumerable<T>; // Exposes the enumerator, which supports a simple iteration over a collection.\nInterface Enumerator<T>; // Supports a simple iteration over a collection.\nInterface ExtendedEnumerable<TSource>; // Extension methods in Enumerable.\nInterface ExtendedOrderedEnumerable<T>; // Extension methods for OrderedEnumerable.\nInterface ExtendedOrderedQueryable<T>; // Extension methods for OrderedQueryable.\nInterface Grouping<K,V>; // Represents a collection of objects that have a common key.\nInterface Lookup<K,V>; // Represents a collection of keys each mapped to one or more values.\nInterface OrderedEnumerable<T>; // Represents the result of applying a sorting operation to an Enumerable.\nInterface OrderedQueryable<T>; // Represents the result of applying a sorting operation to a Queryable.\nInterface Queryable<T>; // Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.\nInterface QueryableDefaults.Replayable<T>; // Replayable.\nInterface QueryableFactory<T>; // Factory for building Queryable objects.\nInterface QueryProvider; // Defines methods to create and execute queries that are described by a Queryable object.\nInterface RawEnumerable<T>; // Exposes the enumerator, which supports a simple iteration over a collection, without the extension methods.\nInterface RawQueryable<T>; // Core methods that define a Queryable.\nClass AbstractEnumerable<T>; // Abstract implementation of the Enumerable interface that implements the extension methods.\nClass AbstractEnumerable2<T>; // Abstract implementation of the Enumerable interface that implements the extension methods.\nClass AbstractQueryable<T>; // Abstract implementation of the Queryable interface that implements the extension methods.\nClass BaseQueryable<TSource>; // Skeleton implementation of Queryable.\nClass CartesianProductEnumerator<T,E>; // Enumerator over the cartesian product of enumerators.\n", "des": "Language-integrated query for Java (linq4j) main package."}
{"index": 1201, "repo": "commons-math3-3.6.1", "code": "Package: primes\n\nClasses and Interfaces: \nClass Primes; // Methods related to prime numbers in the range of int: primality test prime number generation factorization\n", "des": "Methods related to prime numbers like primality test, factor decomposition."}
{"index": 224, "repo": "nutch-2.4", "code": "Package: webui\n\nSub Packages: \npackage webui.client; // Provides client classes and interfaces for Web UI\npackage webui.config; // Contains config classes for Web UI\npackage webui.model; // Contains model classes for Web UI\npackage webui.pages; // Provides classes and interfaces of pages for Web UI\npackage webui.service; // Provides service classes and interfaces for Web UI\n\nClasses and Interfaces: \nClass NutchUiApplication;\nClass NutchUiServer;\n", "des": "Provides classes and interfaces for Web UI"}
{"index": 1281, "repo": "spring-core-6.0.11", "code": "Package: serializer\n\nSub Packages: \npackage serializer.support; // Support classes for Spring's serializer abstraction.\n\nClasses and Interfaces: \npublic class DefaultDeserializer extends Object implements Deserializer<Object>; // A default Deserializer implementation that reads an input stream using Java serialization.\npublic class DefaultSerializer extends Object implements Serializer<Object>; // A Serializer implementation that writes an object to an output stream using Java serialization.\n@FunctionalInterface public interface Deserializer<T>; // A strategy interface for converting from data in an InputStream to an Object.\n@FunctionalInterface public interface Serializer<T>; // A strategy interface for streaming an object to an OutputStream.\n", "des": "Root package for Spring's serializer interfaces and implementations."}
{"index": 1287, "repo": "spring-core-6.0.11", "code": "Package: classreading\n\nClasses and Interfaces: \npublic class CachingMetadataReaderFactory extends SimpleMetadataReaderFactory; // Caching implementation of the MetadataReaderFactory interface, caching a MetadataReader instance per Spring Resource handle (i.e.\npublic interface MetadataReader; // Simple facade for accessing class metadata, as read by an ASM ClassReader.\npublic interface MetadataReaderFactory; // Factory interface for MetadataReader instances.\npublic class SimpleMetadataReaderFactory extends Object implements MetadataReaderFactory; // Simple implementation of the MetadataReaderFactory interface, creating a new ASM ClassReader for every request.\n", "des": "Support classes for reading annotation and class-level metadata."}
{"index": 3002, "repo": "spring-web-6.0.11", "code": "Package: multipart\n\nClasses and Interfaces: \npublic class DefaultPartHttpMessageReader extends LoggingCodecSupport implements HttpMessageReader<Part>; // Default HttpMessageReader for parsing \"multipart/form-data\" requests to a stream of Parts.\npublic interface FilePart extends Part; // Specialization of Part that represents an uploaded file received in a multipart request.\npublic interface FilePartEvent extends PartEvent; // Represents an event triggered for a file upload.\npublic interface FormFieldPart extends Part; // Specialization of Part for a form field.\npublic interface FormPartEvent extends PartEvent; // Represents an event triggered for a form field.\npublic class MultipartHttpMessageReader extends LoggingCodecSupport implements HttpMessageReader<org.springframework.util.MultiValueMap<String,Part>>; // HttpMessageReader for reading \"multipart/form-data\" requests into a MultiValueMap<String, Part>.\npublic class MultipartHttpMessageWriter extends MultipartWriterSupport implements HttpMessageWriter<org.springframework.util.MultiValueMap<String,?>>; // HttpMessageWriter for writing a MultiValueMap<String, ?> as multipart form data, i.e.\npublic class MultipartWriterSupport extends LoggingCodecSupport; // Support class for multipart HTTP message writers.\npublic interface Part; // Representation for a part in a \"multipart/form-data\" request.\npublic interface PartEvent; // Represents an event for a \"multipart/form-data\" request.\npublic class PartEventHttpMessageReader extends LoggingCodecSupport implements HttpMessageReader<PartEvent>; // HttpMessageReader for parsing \"multipart/form-data\" requests to a stream of PartEvent elements.\npublic class PartEventHttpMessageWriter extends MultipartWriterSupport implements HttpMessageWriter<PartEvent>; // HttpMessageWriter for writing PartEvent objects.\npublic class PartHttpMessageWriter extends MultipartWriterSupport implements HttpMessageWriter<Part>; // HttpMessageWriter for writing with Part.\n", "des": "Multipart support."}
{"index": 2920, "repo": "groovy-4.0.13", "code": "Package: security\n\nClasses and Interfaces: \npublic final class GroovyCodeSourcePermission extends BasicPermission; // Permission required to explicitly specify a codebase for a groovy script whose codebase cannot be determined.\n", "des": "Security-related classes"}
{"index": 1963, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: quartz\n\nClasses and Interfaces: \npublic enum JobStoreType extends Enum<JobStoreType>; // Define the supported Quartz JobStore.\n@AutoConfiguration(after={DataSourceAutoConfiguration.class,HibernateJpaAutoConfiguration.class,LiquibaseAutoConfiguration.class,FlywayAutoConfiguration.class}) @ConditionalOnClass({org.quartz.Scheduler.class,org.springframework.scheduling.quartz.SchedulerFactoryBean.class,org.springframework.transaction.PlatformTransactionManager.class}) @EnableConfigurationProperties(QuartzProperties.class) public class QuartzAutoConfiguration extends Object; // Auto-configuration for Quartz Scheduler.\n@Configuration(proxyBeanMethods=false) @ConditionalOnSingleCandidate(javax.sql.DataSource.class) @ConditionalOnProperty(prefix=\"spring.quartz\", name=\"job-store-type\", havingValue=\"jdbc\") @Import(org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer.class) protected static class QuartzAutoConfiguration.JdbcStoreTypeConfiguration extends Object;\n@Target({FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Qualifier public @interface QuartzDataSource; // Qualifier annotation for a DataSource to be injected into Quartz auto-configuration.\npublic class QuartzDataSourceScriptDatabaseInitializer extends org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer; // DataSourceScriptDatabaseInitializer for the Quartz Scheduler database.\n@ConfigurationProperties(\"spring.quartz\") public class QuartzProperties extends Object; // Configuration properties for the Quartz Scheduler integration.\npublic static class QuartzProperties.Jdbc extends Object;\n@Target({FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Qualifier public @interface QuartzTransactionManager; // Qualifier annotation for a TransactionManager to be injected into Quartz auto-configuration.\n@FunctionalInterface public interface SchedulerFactoryBeanCustomizer; // Callback interface that can be implemented by beans wishing to customize the Quartz SchedulerFactoryBean before it is fully initialized, in particular to tune its configuration.\n", "des": "Auto-configuration for Quartz Scheduler."}
{"index": 3588, "repo": "lucene-test-framework-9.7.0", "code": "Package: ramonly\n\nClasses and Interfaces: \nClass RAMOnlyPostingsFormat; // Stores all postings data in RAM, but writes a small token (header + single int) to identify which \"slot\" the index is using in RAM HashMap.\n", "des": "Codec for testing that never writes to disk."}
{"index": 1942, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: jackson\n\nClasses and Interfaces: \n@FunctionalInterface public interface Jackson2ObjectMapperBuilderCustomizer; // Callback interface that can be implemented by beans wishing to further customize the ObjectMapper through Jackson2ObjectMapperBuilder retaining its default auto-configuration.\n@AutoConfiguration @ConditionalOnClass(com.fasterxml.jackson.databind.ObjectMapper.class) public class JacksonAutoConfiguration extends Object; // Auto configuration for Jackson.\n@ConfigurationProperties(prefix=\"spring.jackson\") public class JacksonProperties extends Object; // Configuration properties to configure Jackson.\npublic static enum JacksonProperties.ConstructorDetectorStrategy extends Enum<JacksonProperties.ConstructorDetectorStrategy>;\n", "des": "Auto-configuration for Jackson."}
{"index": 3407, "repo": "commons-imaging-1.0-alpha3", "code": "Package: datareaders\n\nClasses and Interfaces: \nClass DataReaderStrips; // Provides a data reader for TIFF file images organized by tiles.\nClass DataReaderTiled; // Provides a data reader for TIFF file images organized by tiles.\nClass ImageDataReader; // Defines the base class for the TIFF file reader classes.\n", "des": "TIFF data readers."}
{"index": 311, "repo": "pdfbox-3.0.0-beta1", "code": "Package: util\n\nClasses and Interfaces: \nClass DateConverter; // Converts dates to strings and back using the PDF date standard in section 3.8.2 of PDF Reference 1.7.\nClass Hex; // Utility functions for hex encoding.\nClass IterativeMergeSort; // This class provides an iterative (bottom-up) implementation of the MergeSort algorithm for any generic Java object which implements a Comparator.\nClass Matrix; // This class will be used for matrix manipulation.\nClass NumberFormatUtil; // This class contains methods to format numbers.\nClass SmallMap<K,V>; // Map implementation with a smallest possible memory usage.\nClass Vector; // A 2D vector.\nClass Version; // Exposes PDFBox version.\nClass XMLUtil; // This class with handle some simple XML operations.\n", "des": "This package contains utility classes that are used by the PDFBox project."}
{"index": 684, "repo": "jackson-databind-2.15.2", "code": "Package: std\n\nClasses and Interfaces: \nClass ArrayBlockingQueueDeserializer; // We need a custom deserializer both because ArrayBlockingQueue has no default constructor AND because it has size limit used for constructing underlying storage automatically.\nClass AtomicBooleanDeserializer;\nClass AtomicIntegerDeserializer;\nClass AtomicLongDeserializer;\nClass AtomicReferenceDeserializer;\nClass ByteBufferDeserializer;\nClass CollectionDeserializer; // Basic serializer that can take JSON \"Array\" structure and construct a Collection instance, with typed contents.\nClass CollectionDeserializer.CollectionReferringAccumulator; // Helper class for dealing with Object Id references for values contained in collections being deserialized.\nClass ContainerDeserializerBase<T>; // Intermediate base deserializer class that adds more shared accessor so that other classes can access information about contained (value) types\nClass DateDeserializers; // Container class for core JDK date/time type deserializers.\nClass DateDeserializers.CalendarDeserializer;\nClass DateDeserializers.DateBasedDeserializer<T>;\nClass DateDeserializers.DateDeserializer; // Simple deserializer for handling Date values.\nClass DateDeserializers.SqlDateDeserializer; // Compared to plain old Date, SQL version is easier to deal with: mostly because it is more limited.\nClass DateDeserializers.TimestampDeserializer; // Simple deserializer for handling Timestamp values.\nClass DelegatingDeserializer; // Base class that simplifies implementations of JsonDeserializers that mostly delegate functionality to another deserializer implementation (possibly forming a chaining of deserializers delegating functionality in some cases)\nClass EnumDeserializer; // Deserializer class that can deserialize instances of specified Enum class from Strings and Integers.\nClass EnumMapDeserializer; // Deserializer for EnumMap values.\nClass EnumSetDeserializer; // Standard deserializer for EnumSets.\nClass FromStringDeserializer<T>; // Base class for simple deserializers that serialize values from String representation: this includes JSON Strings and other Scalar values that can be coerced into text, like Numbers and Booleans).\nClass FromStringDeserializer.Std; // \"Chameleon\" deserializer that works on simple types that are deserialized from a simple String.\nClass JdkDeserializers; // Container class that contains serializers for JDK types that require special handling for some reason.\nClass JsonLocationInstantiator; // For JsonLocation, we should be able to just implement ValueInstantiator (not that explicit one would be very hard but...)\n", "des": "Contains public standard implementations of abstraction that Jackson uses."}
{"index": 2293, "repo": "spring-boot-3.1.1", "code": "Package: context\n\nSub Packages: \npackage context.annotation; // Classes related to Spring's ApplicationContext annotations.\npackage context.config; // External configuration support allowing 'application.properties' to be loaded and used within a Spring Boot application.\npackage context.event; // ApplicationEvents triggered by Spring Boot.\npackage context.logging; // Logging integration with Spring's Application Context.\npackage context.properties; // Support for external configuration properties.\n\nClasses and Interfaces: \npublic class ApplicationPidFileWriter extends Object implements org.springframework.context.ApplicationListener<SpringApplicationEvent>, org.springframework.core.Ordered; // An ApplicationListener that saves application PID into file.\npublic class ConfigurationWarningsApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>; // ApplicationContextInitializer to report warnings for common misconfiguration mistakes.\n@FunctionalInterface protected static interface ConfigurationWarningsApplicationContextInitializer.Check; // A single check that can be applied.\nprotected static class ConfigurationWarningsApplicationContextInitializer.ComponentScanPackageCheck extends Object implements ConfigurationWarningsApplicationContextInitializer.Check; // ConfigurationWarningsApplicationContextInitializer.Check for @ComponentScan on problematic package.\nprotected static final class ConfigurationWarningsApplicationContextInitializer.ConfigurationWarningsPostProcessor extends Object implements org.springframework.core.PriorityOrdered, org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor; // BeanDefinitionRegistryPostProcessor to report warnings.\npublic class ContextIdApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>, org.springframework.core.Ordered; // ApplicationContextInitializer that sets the Spring ApplicationContext ID.\npublic class FileEncodingApplicationListener extends Object implements org.springframework.context.ApplicationListener<ApplicationEnvironmentPreparedEvent>, org.springframework.core.Ordered; // An ApplicationListener that halts application startup if the system file encoding does not match an expected value set in the environment.\npublic class TypeExcludeFilter extends Object implements org.springframework.core.type.filter.TypeFilter, org.springframework.beans.factory.BeanFactoryAware; // Provides exclusion TypeFilters that are loaded from the BeanFactory and automatically applied to SpringBootApplication scanning.\n", "des": "Classes related to Spring's ApplicationContext."}
{"index": 905, "repo": "commons-compress-1.23.0", "code": "Package: ar\n\nClasses and Interfaces: \nClass ArArchiveEntry; // Represents an archive entry in the \"ar\" format.\nClass ArArchiveInputStream; // Implements the \"ar\" archive format as an input stream.\nClass ArArchiveOutputStream; // Implements the \"ar\" archive format as an output stream.\n", "des": "Provides stream classes for reading and writing archives using the AR format."}
{"index": 1103, "repo": "fontbox-3.0.0-beta1", "code": "Package: encoding\n\nClasses and Interfaces: \nClass BuiltInEncoding; // A font's built-in encoding.\nClass Encoding; // A PostScript Encoding vector.\nClass MacRomanEncoding; // This is the MacRomanEncoding.\nClass StandardEncoding; // Adobe Standard Encoding\n", "des": "This package contains the implementations for all of the encodings that are used in PDF documents."}
{"index": 913, "repo": "commons-compress-1.23.0", "code": "Package: zip\n\nClasses and Interfaces: \nInterface CharsetAccessor; // An interface added to allow access to the character set associated with an NioZipEncoding, without requiring a new method to be added to ZipEncoding.\nInterface ExtraFieldParsingBehavior; // Controls details of parsing ZIP extra fields.\nInterface UnixStat; // Constants from stat.h on Unix systems.\nInterface UnparseableExtraFieldBehavior; // Handles extra field data that doesn't follow the recommended pattern for extra fields with a two-byte key and a two-byte length.\nInterface ZipArchiveEntryPredicate; // A predicate to test if a #ZipArchiveEntry matches a criteria.\nInterface ZipArchiveEntryRequestSupplier; // Supplies ZipArchiveEntryRequest.\nInterface ZipExtraField; // General format of extra field data.\nClass AbstractUnicodeExtraField; // A common base class for Unicode extra information extra fields.\nClass AsiExtraField; // Adds Unix file permission and UID/GID fields as well as symbolic link handling.\nClass DefaultBackingStoreSupplier; // Implements ScatterGatherBackingStoreSupplier using a temporary folder.\nClass ExtraFieldUtils; // ZipExtraField related methods\nClass ExtraFieldUtils.UnparseableExtraField; // \"enum\" for the possible actions to take if the extra field cannot be parsed.\nClass GeneralPurposeBit; // Parser/encoder for the \"general purpose bit\" field in ZIP's local file and central directory headers.\nClass JarMarker; // If this extra field is added as the very first extra field of the archive, Solaris will consider it an executable jar file.\nClass ParallelScatterZipCreator; // Creates a ZIP in parallel by using multiple threadlocal ScatterZipOutputStream instances.\nClass PKWareExtraHeader; // Base class for all PKWare strong crypto extra headers.\nClass ResourceAlignmentExtraField; // An extra field who's sole purpose is to align and pad the local file header so that the entry's data starts at a certain position.\nClass ScatterStatistics; // Provides information about a scatter compression run.\nClass ScatterZipOutputStream; // A ZIP output stream that is optimized for multi-threaded scatter/gather construction of ZIP files.\nClass ScatterZipOutputStream.ZipEntryWriter;\nClass StreamCompressor; // Encapsulates a Deflater and crc calculator, handling multiple types of output streams.\n", "des": "Provides stream classes for reading and writing archives using the ZIP format."}
{"index": 619, "repo": "freemarker-2.3.32", "code": "Package: core\n\nClasses and Interfaces: \nInterface DirectiveCallPlace; // Gives information about the place where a directive is called from, also lets you attach a custom data object to that place.\nInterface ParserConfiguration; // Don't implement this interface yourself; use the existing implementation(s).\nInterface TemplateClassResolver; // Used by built-ins and other template language features that get a class based on a string.\nInterface TemplateMarkupOutputModel<MO extends TemplateMarkupOutputModel<MO>>; // \"markup output\" template language data-type; stores markup (some kind of \"rich text\" / structured format, as opposed to plain text) that meant to be printed as template output.\nClass AbstractJSONLikeFormat; // Defines the methods in CFormat that are the same for all JSON-like languages.\nClass AliasTemplateDateFormatFactory; // Creates an alias to another format, so that the format can be referred to with a simple name in the template, rather than as a concrete pattern or other kind of format string.\nClass AliasTemplateNumberFormatFactory; // Creates an alias to another format, so that the format can be referred to with a simple name in the template, rather than as a concrete pattern or other kind of format string.\nClass ArithmeticEngine; // Used for implementing the arithmetic operations and number comparisons in the template language.\nClass ArithmeticEngine.BigDecimalEngine; // This is the default arithmetic engine in FreeMarker.\nClass ArithmeticEngine.ConservativeEngine; // An arithmetic engine that conservatively widens the operation arguments to extent that they can hold the result of the operation.\nClass BuiltInForNodeEx;\nClass CFormat; // Defines a format (usually a computer language) that's used by the c, cn built-ins, and for the \"c\" and \"computer\" number_format, and the \"c\" boolean_format.\nClass CombinedMarkupOutputFormat; // Represents two markup formats nested into each other.\nClass CommandLine; // Will be removed (main method in a library, often classified as CWE-489 \"Leftover Debug Code\").\nClass CommonMarkupOutputFormat<MO extends CommonTemplateMarkupOutputModel>; // Common superclass for implementing MarkupOutputFormat-s that use a CommonTemplateMarkupOutputModel subclass.\n", "des": "The seldom used or advanced parts of the fundamental FreeMarker API, compared to freemarker.template."}
{"index": 3857, "repo": "lucene-core-9.7.0", "code": "Package: graph\n\nClasses and Interfaces: \nClass GraphTokenStreamFiniteStrings; // Consumes a TokenStream and creates an Automaton where the transition labels are terms from the TermToBytesRefAttribute.\n", "des": "Utility classes for working with token streams as graphs."}
{"index": 3620, "repo": "solr-test-framework-9.3.0", "code": "Package: embedded\n\nClasses and Interfaces: \nClass JettyConfig;\nClass JettyConfig.Builder;\nClass JettySolrRunner; // Run solr using jetty\nClass JettySolrRunner.DebugFilter;\nClass JettySolrRunner.Servlet404; // This is a stupid hack to give jetty something to attach to\n", "des": "Classes for running embedded Solr Jetty Servers in tests."}
{"index": 1517, "repo": "spring-context-6.0.11", "code": "Package: config\n\nClasses and Interfaces: \npublic class JeeNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for the 'jee' namespace.\n", "des": "Support package for EJB/Jakarta EE-related configuration, with XML schema being the primary configuration format."}
{"index": 1314, "repo": "groovy-all-4.0.13", "code": "Package: markup\n\nClasses and Interfaces: \npublic abstract class BaseTemplate extends Object implements Writable; // All templates compiled through MarkupTemplateEngine extend this abstract class, which provides a number of utility methods to generate markup.\npublic class DelegatingIndentWriter extends Writer; // A writer which delegates to another writer and supports an additional indenting level.\npublic class MarkupTemplateEngine extends TemplateEngine; // A template engine which leverages StreamingMarkupBuilder to generate XML/XHTML.\npublic static class MarkupTemplateEngine.CachingTemplateResolver extends MarkupTemplateEngine.DefaultTemplateResolver; // A template resolver which avoids calling ClassLoader.getResource(String) if a template path already has been queried before.\npublic static class MarkupTemplateEngine.DefaultTemplateResolver extends Object implements TemplateResolver;\npublic static class MarkupTemplateEngine.TemplateResource extends Object;\npublic class TemplateConfiguration extends Object; // Configuration options for the markup template engine.\npublic interface TemplateResolver; // Interface for template resolvers, which, given a template identifier, return a URL where the template can be loaded.\n", "des": "Contains a template engine facilitating generation of XML-like markup with optional type checking."}
{"index": 1087, "repo": "graal-sdk-1.0.0-rc7", "code": "Package: management\n\nClasses and Interfaces: \nClass ExecutionEvent; // An execution event object passed to an execution listener consumer.\nClass ExecutionListener; // Execution listeners allow to instrument the execution of guest languages.\n", "des": "The management package provides tools that monitor and instrument the behavior of guest language programs."}
{"index": 801, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: reverse\n\nClasses and Interfaces: \nClass ReverseStringFilter; // Reverse token string, for example \"country\" => \"yrtnuoc\".\nClass ReverseStringFilterFactory; // Factory for ReverseStringFilter.\n", "des": "Filter to reverse token text."}
{"index": 3853, "repo": "lucene-core-9.7.0", "code": "Package: automaton\n\nClasses and Interfaces: \nInterface AutomatonProvider; // Automaton provider for RegExp. RegExp.toAutomaton(AutomatonProvider,int)\nClass Automata; // Construction of basic automata.\nClass Automaton; // Represents an automaton and all its states and transitions.\nClass Automaton.Builder; // Records new states and transitions and then Automaton.Builder.finish() creates the Automaton.\nClass ByteRunAutomaton; // Automaton representation for matching UTF-8 byte[].\nClass CharacterRunAutomaton; // Automaton representation for matching char[].\nClass CompiledAutomaton; // Immutable class holding compiled details for a given Automaton.\nClass DaciukMihovAutomatonBuilder;\nClass FiniteStringsIterator; // Iterates all accepted strings.\nClass LevenshteinAutomata; // Class to construct DFAs that match a word within some edit distance.\nClass LimitedFiniteStringsIterator; // FiniteStringsIterator which limits the number of iterated accepted strings.\nClass MinimizationOperations; // Operations for minimizing automata.\nClass Operations; // Automata operations.\nClass RegExp; // Regular Expression extension to Automaton.\nClass RunAutomaton; // Finite-state automaton with fast run operation.\nClass StatePair; // Pair of states.\nClass Transition; // Holds one transition from an Automaton.\nClass UTF32ToUTF8; // Converts UTF-32 automata to the equivalent UTF-8 representation.\nEnum CompiledAutomaton.AUTOMATON_TYPE; // Automata are compiled into different internal forms for the most efficient execution depending upon the language they accept.\nEnum RegExp.Kind; // The type of expression represented by a RegExp node.\nClass TooComplexToDeterminizeException; // This exception is thrown when determinizing an automaton would require too much work.\n", "des": "Finite-state automaton for regular expressions."}
{"index": 2107, "repo": "spring-webflux-6.0.11", "code": "Package: socket\n\nSub Packages: \npackage socket.adapter; // Classes adapting Spring's Reactive WebSocket API to and from WebSocket runtimes.\npackage socket.client; // Client support for WebSocket interactions.\npackage socket.server; // Server support for WebSocket interactions.\n\nClasses and Interfaces: \npublic final class CloseStatus extends Object; // Representation of WebSocket \"close\" status codes and reasons.\npublic class HandshakeInfo extends Object; // Simple container of information related to the handshake request that started the WebSocketSession session.\npublic interface WebSocketHandler; // Handler for a WebSocket session.\npublic class WebSocketMessage extends Object; // Representation of a WebSocket message.\npublic static enum WebSocketMessage.Type extends Enum<WebSocketMessage.Type>; // WebSocket message types.\npublic interface WebSocketSession; // Represents a WebSocket session.\n", "des": "Abstractions and support classes for reactive WebSocket interactions."}
{"index": 2490, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: reactive\n\nClasses and Interfaces: \n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class,ObservationAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.observation.Observation.class) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @ConditionalOnWebApplication(type=REACTIVE) @EnableConfigurationProperties({MetricsProperties.class,ObservationProperties.class}) public class WebFluxObservationAutoConfiguration extends Object; // Auto-configuration for instrumentation of Spring WebFlux applications.\n", "des": "Auto-configuration for WebFlux actuator observations."}
{"index": 2979, "repo": "pulsar-broker-3.0.0", "code": "Package: recover\n\nClasses and Interfaces: \npublic class TransactionRecoverTrackerImpl extends Object implements TransactionRecoverTracker; // The transaction recover tracker implementation TransactionRecoverTracker.\n", "des": "Implementation of a transaction recover tracker."}
{"index": 3543, "repo": "opennlp-tools-2.2.0", "code": "Package: sentdetect\n\nClasses and Interfaces: \nInterface EndOfSentenceScanner; // Scans CharSequence, StringBuffer, and char[] for the offsets of sentence ending characters.\nInterface SDContextGenerator; // Interface for SentenceDetectorME context generators.\nInterface SentenceDetector; // The interface for sentence detectors, which find the sentence boundaries in a text.\nInterface SentenceDetectorEvaluationMonitor;\nClass DefaultEndOfSentenceScanner; // Default implementation of the EndOfSentenceScanner.\nClass DefaultSDContextGenerator; // Generate event contexts for maxent decisions for sentence detection.\nClass EmptyLinePreprocessorStream; // ObjectStream to clean up empty lines for empty line separated document streams. - Skips empty line at training data start - Transforms multiple empty lines in a row into one - Replaces white space lines with empty lines - TODO: Terminates last document with empty line if it is missing This stream should be used by the components that mark empty lines to mark document boundaries.\nClass NewlineSentenceDetector; // The Newline SentenceDetector assumes that sentences are line delimited and recognizes one sentence per non-empty line.\nClass SDCrossValidator; // A cross validator for sentence detectors.\nClass SDEventStream;\nClass SentenceDetectorEvaluator; // The SentenceDetectorEvaluator measures the performance of the given SentenceDetector with the provided reference SentenceSamples.\nClass SentenceDetectorFactory; // The factory that provides SentenceDetector default implementations and resources\nClass SentenceDetectorME; // A sentence detector for splitting up raw text into sentences.\nClass SentenceModel; // The SentenceModel is the model used by a learnable SentenceDetector.\nClass SentenceSample; // A SentenceSample contains a document with begin indexes of the individual sentences.\nClass SentenceSampleStream; // This class is a stream filter which reads a sentence by line samples from an ObjectStream and converts them into SentenceSample objects.\n", "des": "Package related to identifying sentence boundaries."}
{"index": 1476, "repo": "spring-shell-core-3.1.2", "code": "Package: result\n\nClasses and Interfaces: \npublic class AttributedCharSequenceResultHandler extends TerminalAwareResultHandler<org.jline.utils.AttributedCharSequence>; // A ResultHandler that knows how to render JLine's AttributedCharSequence.\n@FunctionalInterface public interface CommandNotFoundMessageProvider extends Function<CommandNotFoundMessageProvider.ProviderContext,String>; // Provider for a message used within CommandNotFoundResultHandler.\npublic static interface CommandNotFoundMessageProvider.ProviderContext; // Context for CommandNotFoundResultHandler.\npublic final class CommandNotFoundResultHandler extends TerminalAwareResultHandler<CommandNotFound>; // ResultHandler for CommandNotFound using CommandNotFoundMessageProvider to provide an error message.\npublic class DefaultResultHandler extends TerminalAwareResultHandler<Object>; // A simple ResultHandler that deals with Objects (hence comes as a last resort) and prints the Object.toString() value of results to standard out.\npublic interface GenericResultHandler;\npublic class GenericResultHandlerService extends Object implements ResultHandlerService; // Base implementation suitable for use in most environments.\npublic class ParameterValidationExceptionResultHandler extends TerminalAwareResultHandler<ParameterValidationException>; // Displays validation errors on the terminal.\n@Configuration(proxyBeanMethods=false) public class ResultHandlerConfig extends Object; // Used for explicit configuration of ResultHandlers.\npublic class ResultHandlerNotFoundException extends ResultHandlingException;\npublic class ResultHandlingException extends org.springframework.core.NestedRuntimeException;\npublic abstract class TerminalAwareResultHandler<T> extends Object implements ResultHandler<T>; // Base class for ResultHandlers that rely on JLine's Terminal.\npublic class TerminalSizeAwareResultHandler extends TerminalAwareResultHandler<org.springframework.shell.TerminalSizeAware>; // A ResultHandler that prints TerminalSizeAware according to the Terminal size.\npublic class ThrowableResultHandler extends TerminalAwareResultHandler<Throwable>; // A ResultHandler that prints thrown exceptions messages in red.\n", "des": "Contains strategies for dealing with results of commands."}
{"index": 1892, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: eis\n\nClasses and Interfaces: \npublic abstract class AbstractSessionDAO extends Object implements SessionDAO; // An abstract SessionDAO implementation that performs some sanity checks on session creation and reading and allows for pluggable Session ID generation strategies if desired.\npublic abstract class CachingSessionDAO extends AbstractSessionDAO implements org.apache.shiro.cache.CacheManagerAware; // An CachingSessionDAO is a SessionDAO that provides a transparent caching layer between the components that use it and the underlying EIS (Enterprise Information System) session backing store (for example, filesystem, database, enterprise grid/cloud, etc.).\npublic class EnterpriseCacheSessionDAO extends CachingSessionDAO; // SessionDAO implementation that relies on an enterprise caching product as the EIS system of record for all sessions.\npublic class JavaUuidSessionIdGenerator extends Object implements SessionIdGenerator; // SessionIdGenerator that generates String values of JDK UUID's as the session IDs.\npublic class MemorySessionDAO extends AbstractSessionDAO; // Simple memory-based implementation of the SessionDAO that stores all of its sessions in an in-memory ConcurrentMap.\npublic class RandomSessionIdGenerator extends Object implements SessionIdGenerator; // Generates session IDs by using a Random instance to generate random IDs.\npublic interface SessionDAO; // Data Access Object design pattern specification to enable Session access to an EIS (Enterprise Information System).\npublic interface SessionIdGenerator; // Interface allowing pluggable session ID generation strategies to be used with various SessionDAO implementations.\n", "des": "EIS (Enterprise Information System)-tier components that can perform CRUD operations for sessions using any EIS API."}
{"index": 1171, "repo": "commons-math3-3.6.1", "code": "Package: oned\n\nClasses and Interfaces: \nClass Arc; // This class represents an arc on a circle.\nClass ArcsSet; // This class represents a region of a circle: a set of arcs.\nClass ArcsSet.Split; // Class holding the results of the split method.\nClass LimitAngle; // This class represents a 1D oriented hyperplane on the circle.\nClass S1Point; // This class represents a point on the 1-sphere.\nClass Sphere1D; // This class implements a one-dimensional sphere (i.e.\nClass SubLimitAngle; // This class represents sub-hyperplane for LimitAngle.\nClass ArcsSet.InconsistentStateAt2PiWrapping; // Specialized exception for inconsistent BSP tree state inconsistency.\nClass Sphere1D.NoSubSpaceException; // Specialized exception for inexistent sub-space.\n", "des": "This package provides basic geometry components on the 1-sphere."}
{"index": 929, "repo": "commons-compress-1.23.0", "code": "Package: zstandard\n\nClasses and Interfaces: \nClass ZstdCompressorInputStream; // CompressorInputStream implementation to decode Zstandard encoded stream.\nClass ZstdCompressorOutputStream; // CompressorOutputStream implementation to create Zstandard encoded stream.\nClass ZstdUtils; // Utility code for the Zstandard compression format.\n", "des": "Provides stream class for (de)compressing streams using the Zstandard algorithm based on Zstandard JNI."}
{"index": 2902, "repo": "spring-aspects-6.0.11", "code": "Package: aspectj\n\nClasses and Interfaces: \npublic interface ConfigurableObject; // Marker interface for domain objects that need DI through aspects.\n", "des": "AspectJ-based dependency injection support."}
{"index": 3455, "repo": "hibernate-core-5.6.15.Final", "code": "Package: id\n\nSub Packages: \npackage id.persistent; // Package contains an implementation of MultiTableBulkIdStrategy based on the use of a persistent (ANSI SQL term) table to hold id values.\n\nClasses and Interfaces: \nInterface AbstractMultiTableBulkIdStrategyImpl.PreparationContext;\nInterface IdTableInfo;\nInterface IdTableSupport;\nInterface MultiTableBulkIdStrategy; // Generalized strategy contract for handling multi-table bulk HQL operations.\nInterface MultiTableBulkIdStrategy.DeleteHandler; // Handler for dealing with multi-table HQL bulk delete statements.\nInterface MultiTableBulkIdStrategy.UpdateHandler; // Handler for dealing with multi-table HQL bulk update statements.\nClass AbstractIdsBulkIdHandler; // Base class for all strategies that select the ids to be updated/deleted prior to executing the update/delete operation.\nClass AbstractMultiTableBulkIdStrategyImpl<TT extends IdTableInfo,​CT extends AbstractMultiTableBulkIdStrategyImpl.PreparationContext>; // Convenience base class for MultiTableBulkIdStrategy implementations.\nClass AbstractTableBasedBulkIdHandler; // Convenience base class for MultiTableBulkIdStrategy.UpdateHandler and MultiTableBulkIdStrategy.DeleteHandler implementations through TableBasedUpdateHandlerImpl and TableBasedDeleteHandlerImpl respectively.\nClass AbstractTableBasedBulkIdHandler.ProcessedWhereClause;\nClass IdTableHelper;\nClass IdTableSupportStandardImpl;\nClass TableBasedDeleteHandlerImpl;\nClass TableBasedUpdateHandlerImpl;\n", "des": "Support for multi-table update and delete statements via id-tables."}
{"index": 624, "repo": "freemarker-2.3.32", "code": "Package: jdom\n\nClasses and Interfaces: \nClass NodeListModel; // Use NodeModel instead.\n", "des": "Deprecated, use W3C DOM (freemarker.ext.dom) instead; Exposes JDOM XML nodes to templates."}
{"index": 1883, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: mgt\n\nClasses and Interfaces: \npublic abstract class AbstractRememberMeManager extends Object implements RememberMeManager; // Abstract implementation of the RememberMeManager interface that handles serialization and encryption of the remembered user identity.\npublic abstract class AuthenticatingSecurityManager extends RealmSecurityManager; // Shiro support of a SecurityManager class hierarchy that delegates all authentication operations to a wrapped Authenticator instance.\npublic abstract class AuthorizingSecurityManager extends AuthenticatingSecurityManager; // Shiro support of a SecurityManager class hierarchy that delegates all authorization (access control) operations to a wrapped Authorizer instance.\npublic abstract class CachingSecurityManager extends Object implements SecurityManager, org.apache.shiro.lang.util.Destroyable, org.apache.shiro.cache.CacheManagerAware, org.apache.shiro.event.EventBusAware; // A very basic starting point for the SecurityManager interface that merely provides logging and caching support.\npublic class DefaultSecurityManager extends SessionsSecurityManager; // The Shiro framework's default concrete implementation of the SecurityManager interface, based around a collection of Realms.\npublic class DefaultSessionStorageEvaluator extends Object implements SessionStorageEvaluator; // A Default SessionStorageEvaluator that provides reasonable control over if and how Sessions may be used for storing Subject state.\npublic class DefaultSubjectDAO extends Object implements SubjectDAO; // Default SubjectDAO implementation that stores Subject state in the Subject's Session by default (but this can be disabled - see below).\npublic class DefaultSubjectFactory extends Object implements SubjectFactory; // Default SubjectFactory implementation that creates DelegatingSubject instances.\npublic abstract class RealmSecurityManager extends CachingSecurityManager; // Shiro support of a SecurityManager class hierarchy based around a collection of Realms.\npublic interface RememberMeManager; // A RememberMeManager is responsible for remembering a Subject's identity across that Subject's sessions with the application.\npublic interface SecurityManager extends Authenticator, Authorizer, SessionManager; // A SecurityManager executes all security operations for all Subjects (aka users) across a single application.\npublic abstract class SessionsSecurityManager extends AuthorizingSecurityManager; // Shiro support of a SecurityManager class hierarchy that delegates all session operations to a wrapped SessionManager instance.\npublic interface SessionStorageEvaluator; // Evaluates whether or not Shiro may use a Subject's Session to persist that Subject's internal state.\n", "des": "Provides the master SecurityManager interface and a default implementation hierarchy for managing all aspects of Shiro's functionality in an application."}
{"index": 2827, "repo": "spring-data-r2dbc-3.1.2", "code": "Package: config\n\nClasses and Interfaces: \n@Configuration(proxyBeanMethods=false) public abstract class AbstractR2dbcConfiguration extends Object implements ApplicationContextAware; // Base class for Spring Data R2DBC configuration containing bean declarations that must be registered for Spring Data R2DBC to work.\n@Inherited @Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.r2dbc.config.R2dbcAuditingRegistrar.class) public @interface EnableR2dbcAuditing; // Annotation to enable auditing in R2DBC via annotation configuration.\npublic class PersistentEntitiesFactoryBean extends Object implements FactoryBean<PersistentEntities>; // Simple helper to be able to wire the PersistentEntities from a R2dbcMappingContext bean available in the application context.\n", "des": "Configuration classes for Spring Data R2DBC."}
{"index": 2259, "repo": "spring-vault-core-3.0.4", "code": "Package: client\n\nClasses and Interfaces: \npublic class ClientHttpConnectorFactory extends Object; // Factory for ClientHttpConnector that supports ReactorClientHttpConnector and JettyClientHttpConnector.\npublic static class ClientHttpConnectorFactory.HttpComponents extends Object; // Utility methods to create ClientHttpRequestFactory using Apache Http Components.\npublic static class ClientHttpConnectorFactory.JdkHttpClient extends Object; // ClientHttpRequestFactory using the JDK's HttpClient.\npublic static class ClientHttpConnectorFactory.JettyClient extends Object; // Utility methods to create ClientHttpRequestFactory using the Jetty Client.\npublic static class ClientHttpConnectorFactory.ReactorNetty extends Object; // ClientHttpConnector for Reactor Netty.\npublic class ClientHttpRequestFactoryFactory extends Object; // Factory for ClientHttpRequestFactory that supports Apache HTTP Components, OkHttp, Netty and the JDK HTTP client (in that order).\npublic static class ClientHttpRequestFactoryFactory.HttpComponents extends Object; // Utilities to create a ClientHttpRequestFactory for Apache Http Components.\npublic static class ClientHttpRequestFactoryFactory.OkHttp3 extends Object; // Utilities to create a ClientHttpRequestFactory for the OkHttpClient.\npublic class ReactiveVaultClients extends Object; // Vault Client factory to create WebClient configured to the needs of accessing Vault.\n@FunctionalInterface public interface ReactiveVaultEndpointProvider; // Component that provides reactively a VaultEndpoint.\npublic class RestTemplateBuilder extends Object; // Builder that can be used to configure and create a RestTemplate.\n@FunctionalInterface public interface RestTemplateCustomizer; // Callback interface that can be used to customize a RestTemplate.\n@FunctionalInterface public interface RestTemplateFactory; // Factory interface that produces a RestTemplate object.\n@FunctionalInterface public interface RestTemplateRequestCustomizer<T extends ClientHttpRequest>; // Callback interface that can be used to customize the ClientHttpRequest sent from a RestTemplate.\npublic class SimpleVaultEndpointProvider extends Object implements VaultEndpointProvider; // VaultEndpointProvider returning a static VaultEndpoint.\npublic class VaultClients extends Object; // Vault Client factory to create RestTemplate configured to the needs of accessing Vault.\npublic static class VaultClients.PrefixAwareUriBuilderFactory extends DefaultUriBuilderFactory;\npublic class VaultEndpoint extends Object implements Serializable; // Value object that defines Vault connection coordinates.\n@FunctionalInterface public interface VaultEndpointProvider; // Component that provides a VaultEndpoint.\n", "des": "Spring Vault Client abstraction."}
{"index": 1853, "repo": "spring-test-6.0.11", "code": "Package: util\n\nClasses and Interfaces: \npublic abstract class AopTestUtils extends Object; // AopTestUtils is a collection of AOP-related utility methods for use in unit and integration testing scenarios.\npublic abstract class AssertionErrors extends Object; // Test assertions that are independent of any third-party assertion library.\npublic class ExceptionCollector extends Object; // ExceptionCollector is a test utility for executing code blocks, collecting exceptions, and generating a single AssertionError containing any exceptions encountered as suppressed exceptions.\n@FunctionalInterface public static interface ExceptionCollector.Executable; // Executable is a functional interface that can be used to implement any generic block of code that potentially throws a Throwable.\npublic class JsonExpectationsHelper extends Object; // A helper class for assertions on JSON content.\npublic class JsonPathExpectationsHelper extends Object; // A helper class for applying assertions via JSON path expressions.\npublic abstract class ReflectionTestUtils extends Object; // ReflectionTestUtils is a collection of reflection-based utility methods for use in unit and integration testing scenarios.\npublic class TestSocketUtils extends Object; // Simple utility for finding available TCP ports on localhost for use in integration testing scenarios.\npublic class XmlExpectationsHelper extends Object; // A helper class for assertions on XML content.\npublic class XpathExpectationsHelper extends Object; // A helper class for applying assertions via XPath expressions.\n", "des": "General utility classes for use in unit and integration tests."}
{"index": 3551, "repo": "guava-32.1.1-jre", "code": "Package: cache\n\nClasses and Interfaces: \nInterface AbstractCache.StatsCounter; // Accumulates statistics during the operation of a Cache for presentation by Cache.stats().\nInterface Cache<K,​V>; // A semi-persistent mapping from keys to values.\nInterface LoadingCache<K,​V>; // A semi-persistent mapping from keys to values.\nInterface RemovalListener<K,​V>; // An object that can receive a notification when an entry is removed from a cache.\nInterface Weigher<K,​V>; // Calculates the weights of cache entries.\nClass AbstractCache<K,​V>; // This class provides a skeletal implementation of the Cache interface to minimize the effort required to implement this interface.\nClass AbstractCache.SimpleStatsCounter; // A thread-safe AbstractCache.StatsCounter implementation for use by Cache implementors.\nClass AbstractLoadingCache<K,​V>; // This class provides a skeletal implementation of the Cache interface to minimize the effort required to implement this interface.\nClass CacheBuilder<K,​V>; // A builder of LoadingCache and Cache instances.\nClass CacheBuilderSpec; // A specification of a CacheBuilder configuration.\nClass CacheLoader<K,​V>; // Computes or retrieves values, based on a key, for use in populating a LoadingCache.\nClass CacheStats; // Statistics about the performance of a Cache.\nClass ForwardingCache<K,​V>; // A cache which forwards all its method calls to another cache.\nClass ForwardingCache.SimpleForwardingCache<K,​V>; // A simplified version of ForwardingCache where subclasses can pass in an already constructed Cache as the delegate.\nClass ForwardingLoadingCache<K,​V>; // A cache which forwards all its method calls to another cache.\nClass ForwardingLoadingCache.SimpleForwardingLoadingCache<K,​V>; // A simplified version of ForwardingLoadingCache where subclasses can pass in an already constructed LoadingCache as the delegate.\nClass RemovalListeners; // A collection of common removal listeners.\nClass RemovalNotification<K,​V>; // A notification of the removal of a single entry.\n", "des": "Discouraged (in favor of Caffeine) caching utilities."}
{"index": 1930, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: security\n\nClasses and Interfaces: \n@AutoConfiguration(after=GraphQlWebFluxAutoConfiguration.class) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.server.webflux.GraphQlHttpHandler.class,org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity.class}) @ConditionalOnBean(org.springframework.graphql.server.webflux.GraphQlHttpHandler.class) public class GraphQlWebFluxSecurityAutoConfiguration extends Object; // Auto-configuration for enabling Security support for Spring GraphQL with WebFlux.\n@AutoConfiguration(after=GraphQlWebMvcAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.server.webmvc.GraphQlHttpHandler.class,org.springframework.security.config.annotation.web.configuration.EnableWebSecurity.class}) @ConditionalOnBean(org.springframework.graphql.server.webmvc.GraphQlHttpHandler.class) public class GraphQlWebMvcSecurityAutoConfiguration extends Object; // Auto-configuration for enabling Security support for Spring GraphQL with MVC.\n", "des": "Auto-configuration classes for Security support in Spring GraphQL."}
{"index": 3693, "repo": "solr-core-9.3.0", "code": "Package: collector\n\nClasses and Interfaces: \nClass FilterCollector; // A collector that filters incoming doc ids that are not in the filter.\n", "des": "Grouping related Collectors"}
{"index": 3665, "repo": "solr-core-9.3.0", "code": "Package: jersey\n\nSub Packages: \npackage jersey.container; // Adapter code used to convert the native Jetty request/response abstractions into the objects required by Jersey\n\nClasses and Interfaces: \nInterface JacksonReflectMapWriter; // A MapWriter implementation that relies on Jackson's JsonProperty annotation.\nInterface RequestContextKeys; // Keys used to store and retrieve values from the Jersey request context.\nClass AsyncJerseyResponse;\nClass CatchAllExceptionMapper; // Flattens the exception and sets on a SolrJerseyResponse.\nClass ErrorInfo; // A value type representing an error.\nClass ErrorInfo.ErrorMetadata;\nClass ExperimentalResponse; // SolrJerseyResponse implementation with a warning field indicating that the format may change\nClass InjectionFactories;\nClass InjectionFactories.RequestContextBasedFactory; // Allows access to a ContainerRequestContext via a ServiceLocator\nClass InjectionFactories.ReuseFromContextIndexSchemaFactory;\nClass InjectionFactories.ReuseFromContextSolrCoreFactory; // Fetch the (existing) SolrCore from the request context\nClass InjectionFactories.ReuseFromContextSolrParamsFactory;\nClass InjectionFactories.SingletonFactory<T>;\nClass InjectionFactories.SolrQueryRequestFactory;\nClass InjectionFactories.SolrQueryResponseFactory;\nClass JerseyAppHandlerCache; // Stores Jersey 'ApplicationHandler' instances by an ID or hash derived from their ConfigSet.\nClass JerseyApplications; // JAX-RS \"application\" configurations for Solr's CoreContainer and SolrCore instances\nClass JerseyApplications.CoreContainerApp;\nClass JerseyApplications.SolrCoreApp;\nClass MediaTypeOverridingFilter; // Overrides the content-type of the response based on an optional user-provided 'wt' parameter\nClass MessageBodyReaders; // A collection point for various MessageBodyReader implementations.\nClass MessageBodyReaders.CachingDelegatingMessageBodyReader; // Caches the deserialized request body in the ContainerRequestContext for use later in the request lifecycle.\nClass MessageBodyReaders.CachingJsonMessageBodyReader; // A JSON MessageBodyReader that caches request bodies for use later in the request lifecycle.\nClass MessageBodyWriters; // A collection of thin Jersey shims around Solr's existing QueryResponseWriter interface\nClass MessageBodyWriters.BaseMessageBodyWriter;\n", "des": "Jersey integration code"}
{"index": 3141, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: plan\n\nClasses and Interfaces: \nClass AbstractBatchingEntityLoaderBuilder; // Base class for LoadPlan-based BatchingEntityLoaderBuilder implementations.\nClass AbstractLoadPlanBasedEntityLoader; // A UniqueEntityLoader implementation based on using LoadPlans\nClass BatchingEntityLoader; // The base contract for UniqueEntityLoader implementations capable of performing batch-fetch loading of entities using multiple primary key values in the SQL WHERE clause.\nClass DynamicBatchingEntityLoader; // Batching entity loader using dynamic where-clause\nClass DynamicBatchingEntityLoaderBuilder; // A walking/plan based BatchingEntityLoaderBuilder that builds entity-loader instances capable of dynamically building its batch-fetch SQL based on the actual number of entity ids waiting to be batch fetched.\nClass EntityLoader; // UniqueEntityLoader implementation that is the main functionality for LoadPlan-based Entity loading.\nClass EntityLoader.Builder;\nClass LegacyBatchingEntityLoaderBuilder; // LoadPlan-based implementation of the legacy batch loading strategy\nClass LegacyBatchingEntityLoaderBuilder.LegacyBatchingEntityLoader;\nClass MultiEntityLoadingSupport;\nClass PaddedBatchingEntityLoader; // Batching entity loader using padded where-clause\nClass PaddedBatchingEntityLoaderBuilder; // A walking/plan based BatchingEntityLoaderBuilder that builds entity-loader instances building its batch-fetch SQL based on padding - using a set number of parameters, but setting \"unneeded ones\" to null.\n", "des": "Support for entity loaders built on top of the org.hibernate.loader.plan API to apply entity-graphs"}
{"index": 2675, "repo": "spring-r2dbc-6.0.11", "code": "Package: core\n\nSub Packages: \npackage core.binding; // Classes providing an abstraction over SQL bind markers.\n\nClasses and Interfaces: \npublic class ColumnMapRowMapper extends Object implements BiFunction<Row,RowMetadata,Map<String,Object>>; // Mapping function implementation that creates a java.util.Map for each row, representing all columns as key-value pairs: one entry for each column, with the column name as key.\npublic interface ConnectionAccessor; // Interface declaring methods that accept callback Function to operate within the scope of a Connection.\npublic interface DatabaseClient extends ConnectionAccessor; // A non-blocking, reactive client for performing database calls with Reactive Streams back pressure.\npublic static interface DatabaseClient.Builder; // A mutable builder for creating a DatabaseClient.\npublic static interface DatabaseClient.GenericExecuteSpec; // Contract for specifying an SQL call along with options leading to the execution.\n@FunctionalInterface public interface ExecuteFunction; // Represents a function that executes a Statement for a (delayed) Result stream.\npublic interface FetchSpec<T> extends RowsFetchSpec<T>, UpdatedRowsFetchSpec; // Union type for fetching results.\n@Deprecated(since=\"6.0\") public final class Parameter extends Object;\npublic interface PreparedOperation<T> extends QueryOperation; // Extension to QueryOperation for a prepared SQL query Supplier with bound parameters.\n@FunctionalInterface public interface QueryOperation extends Supplier<String>; // Interface declaring a query operation that can be represented with a query string.\npublic interface RowsFetchSpec<T>; // Contract for fetching tabular results.\npublic interface SqlProvider; // Interface to be implemented by objects that can provide SQL strings.\n@FunctionalInterface public interface StatementFilterFunction; // Represents a function that filters an ExecuteFunction.\npublic interface UpdatedRowsFetchSpec; // Contract for fetching the number of affected rows.\n", "des": "Core domain types around DatabaseClient."}
{"index": 1486, "repo": "tribuo-core-4.3.1", "code": "Package: provenance\n\nSub Packages: \npackage provenance.impl; // Provides internal implementations for empty provenance classes and TrainerProvenance.\n\nClasses and Interfaces: \npublic interface ConfiguredDataSourceProvenance extends DataSourceProvenance, com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // A tag interface for configurable data source provenance.\npublic interface DataProvenance extends com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Tag interface for data sources provenances.\npublic class DatasetProvenance extends Object implements DataProvenance, com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Base class for dataset provenance.\npublic interface DataSourceProvenance extends DataProvenance, com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Data source provenance.\npublic class EnsembleModelProvenance extends ModelProvenance; // Model provenance for ensemble models.\npublic final class EvaluationProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Provenance for evaluations.\npublic interface FeatureSelectorProvenance extends com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // A tag interface for feature selection algorithms.\npublic final class FeatureSetProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Contains provenance information for an instance of a SelectedFeatureSet.\npublic class ModelProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Contains provenance information for an instance of a Model.\npublic interface OutputFactoryProvenance extends com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // A tag provenance for an output factory.\npublic class SimpleDataSourceProvenance extends Object implements DataSourceProvenance; // This class stores a String describing the data source, along with a timestamp.\npublic abstract class SkeletalTrainerProvenance extends com.oracle.labs.mlrg.olcut.provenance.impl.SkeletalConfiguredObjectProvenance implements TrainerProvenance; // The skeleton of a TrainerProvenance that extracts the configured parameters.\n", "des": "Provides Tribuo specific infrastructure for the Provenance system which tracks models and datasets."}
{"index": 659, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: csi\n\nSub Packages: \npackage csi.exception; // This package contains volume related exception classes.\n\nClasses and Interfaces: \nClass CsiConstants; // CSI constants.\nClass VolumeCapabilityRange; // Volume capability range that specified in a volume resource request, this range defines the desired min/max capacity.\nClass VolumeCapabilityRange.VolumeCapabilityBuilder; // The builder used to build a VolumeCapabilityRange instance.\nClass VolumeId; // Unique ID for a volume.\nClass VolumeMetaData; // VolumeMetaData defines all valid info for a CSI compatible volume.\nClass VolumeMetaData.VolumeSpecBuilder; // The builder used to build a VolumeMetaData instance.\n", "des": "This package contains common volume related classes."}
{"index": 2300, "repo": "spring-boot-3.1.1", "code": "Package: bind\n\nSub Packages: \npackage bind.handler; // General BindHandler implementations.\npackage bind.validation; // Binding validation support.\n\nClasses and Interfaces: \npublic abstract class AbstractBindHandler extends Object implements BindHandler; // Abstract base class for BindHandler implementations.\npublic final class Bindable<T> extends Object; // Source that can be bound by a Binder.\npublic static enum Bindable.BindRestriction extends Enum<Bindable.BindRestriction>; // Restrictions that can be applied when binding values.\npublic class BindableRuntimeHintsRegistrar extends Object implements org.springframework.aot.hint.RuntimeHintsRegistrar; // RuntimeHintsRegistrar that can be used to register ReflectionHints for Bindable types, discovering any nested type it may expose through a property.\n@FunctionalInterface public interface BindConstructorProvider; // Strategy interface used to determine a specific constructor to use when binding.\npublic interface BindContext; // Context information for use by BindHandlers.\npublic class Binder extends Object; // A container object which Binds objects from one or more ConfigurationPropertySources.\npublic class BindException extends RuntimeException implements OriginProvider; // Exception thrown when binding fails.\npublic interface BindHandler; // Callback interface that can be used to handle additional logic during element binding.\npublic enum BindMethod extends Enum<BindMethod>; // Configuration property binding methods.\npublic final class BindResult<T> extends Object; // A container object to return the result of a Binder bind operation.\npublic class BoundPropertiesTrackingBindHandler extends AbstractBindHandler; // BindHandler that can be used to track bound configuration properties.\n@Target({CONSTRUCTOR,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface ConstructorBinding; // Annotation that can be used to indicate which constructor to use when binding configuration properties using constructor arguments rather than by calling setters.\npublic abstract class DataObjectPropertyName extends Object; // Internal utility to help when dealing with data object property names.\n@Retention(RUNTIME) @Target({PARAMETER,RECORD_COMPONENT}) @Documented public @interface DefaultValue; // Annotation that can be used to specify the default value when binding to an immutable property.\n@Retention(RUNTIME) @Target(PARAMETER) @Documented public @interface Name; // Annotation that can be used to specify the name when binding to an immutable property.\n", "des": "Support for @ConfigurationProperties binding."}
{"index": 2738, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: validator\n\nClasses and Interfaces: \npublic class BeanValidatingItemProcessor<T> extends ValidatingItemProcessor<T>; // A ValidatingItemProcessor that uses the Bean Validation API (JSR-303) to validate items.\npublic class SpringValidator<T> extends Object implements Validator<T>, org.springframework.beans.factory.InitializingBean; // Adapts the Validator interface to Validator.\npublic class ValidatingItemProcessor<T> extends Object implements ItemProcessor<T,T>, org.springframework.beans.factory.InitializingBean; // Simple implementation of ItemProcessor that validates input and returns it without modifications.\npublic class ValidationException extends ItemReaderException; // This exception should be thrown when there are validation errors.\npublic interface Validator<T>; // Interface used to validate objects.\n", "des": "Infrastructure implementations of item validator concerns."}
{"index": 593, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: environment\n\nClasses and Interfaces: \nInterface Constants; // Constants used with the EnvironmentInfo service.\nInterface EnvironmentInfo; // A Framework service which gives access to the command line used to start this running framework as well as information about the environment such as the current operating system, machine architecture, locale and windowing system.\n", "des": "Provides the EnvironmentInfo service."}
{"index": 385, "repo": "mahout-core-14.1", "code": "Package: map\n\nClasses and Interfaces: \nClass AbstractByteByteMap;\nClass AbstractByteCharMap;\nClass AbstractByteDoubleMap;\nClass AbstractByteFloatMap;\nClass AbstractByteIntMap;\nClass AbstractByteLongMap;\nClass AbstractByteObjectMap<T>;\nClass AbstractByteShortMap;\nClass AbstractCharByteMap;\nClass AbstractCharCharMap;\nClass AbstractCharDoubleMap;\nClass AbstractCharFloatMap;\nClass AbstractCharIntMap;\nClass AbstractCharLongMap;\nClass AbstractCharObjectMap<T>;\nClass AbstractCharShortMap;\nClass AbstractDoubleByteMap;\nClass AbstractDoubleCharMap;\nClass AbstractDoubleDoubleMap;\nClass AbstractDoubleFloatMap;\nClass AbstractDoubleIntMap;\nClass AbstractDoubleLongMap;\nClass AbstractDoubleObjectMap<T>;\nClass AbstractDoubleShortMap;\nClass AbstractFloatByteMap;\nClass AbstractFloatCharMap;\nClass AbstractFloatDoubleMap;\nClass AbstractFloatFloatMap;\nClass AbstractFloatIntMap;\nClass AbstractFloatLongMap;\nClass AbstractFloatObjectMap<T>;\nClass AbstractFloatShortMap;\nClass AbstractIntByteMap;\nClass AbstractIntCharMap;\nClass AbstractIntDoubleMap;\nClass AbstractIntFloatMap;\nClass AbstractIntIntMap;\nClass AbstractIntLongMap;\nClass AbstractIntObjectMap<T>;\nClass AbstractIntShortMap;\nClass AbstractLongByteMap;\nClass AbstractLongCharMap;\nClass AbstractLongDoubleMap;\nClass AbstractLongFloatMap;\nClass AbstractLongIntMap;\nClass AbstractLongLongMap;\nClass AbstractLongObjectMap<T>;\nClass AbstractLongShortMap;\nClass AbstractObjectByteMap<T>;\nClass AbstractObjectCharMap<T>;\nClass AbstractObjectDoubleMap<T>;\nClass AbstractObjectFloatMap<T>;\nClass AbstractObjectIntMap<T>;\nClass AbstractObjectLongMap<T>;\nClass AbstractObjectShortMap<T>;\nClass AbstractShortByteMap;\nClass AbstractShortCharMap;\nClass AbstractShortDoubleMap;\nClass AbstractShortFloatMap;\nClass AbstractShortIntMap;\nClass AbstractShortLongMap;\nClass AbstractShortObjectMap<T>;\nClass AbstractShortShortMap;\nClass HashFunctions; // Provides various hash functions.\n", "des": "Automatically growing and shrinking maps holding objects or primitive data types such as int, double, etc."}
{"index": 470, "repo": "jackson-core-2.15.2", "code": "Package: sym\n\nClasses and Interfaces: \nClass ByteQuadsCanonicalizer; // Replacement for BytesToNameCanonicalizer which aims at more localized memory access due to flattening of name quad data.\nClass CharsToNameCanonicalizer; // This class is a kind of specialized type-safe Map, from char array to String value.\nClass Name; // Base class for tokenized names (key strings in objects) that have been tokenized from byte-based input sources (like InputStream.\nClass Name1; // Specialized implementation of PName: can be used for short Strings that consists of at most 4 bytes.\nClass Name2; // Specialized implementation of PName: can be used for short Strings that consists of 5 to 8 bytes.\nClass Name3; // Specialized implementation of PName: can be used for short Strings that consists of 9 to 12 bytes.\nClass NameN; // Generic implementation of PName used for \"long\" names, where long means that its byte (UTF-8) representation is 13 bytes or more.\n", "des": "Internal implementation classes for efficient handling of of symbols in JSON (field names in Objects)"}
{"index": 1768, "repo": "spring-data-mongodb-4.1.2", "code": "Package: repository\n\nSub Packages: \npackage repository.aot; // Ahead-Of-Time processors for MongoDB repositories.\npackage repository.cdi; // CDI support for MongoDB specific repository implementation.\npackage repository.config; // Support infrastructure for the configuration of MongoDB specific repositories.\npackage repository.query; // Query derivation mechanism for MongoDB specific repositories.\npackage repository.support; // Support infrastructure for query derivation of MongoDB specific repositories.\n\nClasses and Interfaces: \n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Aggregation; // The Aggregation annotation can be used to annotate a Repository query method so that it runs the Aggregation.pipeline() on invocation.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @Query(count=true) public @interface CountQuery; // Annotation to declare finder count queries directly on repository methods.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @Query(delete=true) public @interface DeleteQuery; // Annotation to declare finder delete queries directly on repository methods.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @Query(exists=true) public @interface ExistsQuery; // Annotation to declare finder exists queries directly on repository methods.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Hint; // Annotation to declare index hints for repository query, update and aggregate operations.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Meta;\n@NoRepositoryBean public interface MongoRepository<T,ID> extends ListCrudRepository<T,ID>, ListPagingAndSortingRepository<T,ID>, QueryByExampleExecutor<T>; // Mongo specific Repository interface.\n@Documented @Retention(RUNTIME) @Target(PARAMETER) public @interface Near; // Annotation to be used for disambiguing method parameters that shall be used to trigger geo near queries.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @Hint public @interface Query; // Annotation to declare finder queries directly on repository methods.\n", "des": "MongoDB specific repository implementation."}
{"index": 2439, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: health\n\nClasses and Interfaces: \npublic abstract class AbstractCompositeHealthContributorConfiguration<C,I extends C,B> extends Object; // Base class for health contributor configurations that can combine source beans into a composite.\npublic abstract class CompositeHealthContributorConfiguration<I extends org.springframework.boot.actuate.health.HealthIndicator,B> extends AbstractCompositeHealthContributorConfiguration<org.springframework.boot.actuate.health.HealthContributor,I,B>; // Base class for health contributor configurations that can combine source beans into a composite.\npublic abstract class CompositeReactiveHealthContributorConfiguration<I extends org.springframework.boot.actuate.health.ReactiveHealthIndicator,B> extends AbstractCompositeHealthContributorConfiguration<org.springframework.boot.actuate.health.ReactiveHealthContributor,I,B>; // Base class for health contributor configurations that can combine source beans into a composite.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.health.OnEnabledHealthIndicatorCondition.class) public @interface ConditionalOnEnabledHealthIndicator; // @Conditional that checks whether a default health indicator is enabled.\n@AutoConfiguration public class HealthContributorAutoConfiguration extends Object; // Auto-configuration for health contributors.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.health.HealthEndpoint.class) @EnableConfigurationProperties(HealthEndpointProperties.class) @Import({org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration.class,org.springframework.boot.actuate.autoconfigure.health.ReactiveHealthEndpointConfiguration.class,org.springframework.boot.actuate.autoconfigure.health.HealthEndpointWebExtensionConfiguration.class,org.springframework.boot.actuate.autoconfigure.health.HealthEndpointReactiveWebExtensionConfiguration.class}) public class HealthEndpointAutoConfiguration extends Object; // Auto-configuration for HealthEndpoint.\n@ConfigurationProperties(\"management.endpoint.health\") public class HealthEndpointProperties extends HealthProperties; // Configuration properties for HealthEndpoint.\n", "des": "Auto-configuration for actuator health concerns."}
{"index": 2217, "repo": "spring-data-commons-3.1.2", "code": "Package: core\n\nSub Packages: \npackage core.support; // Base classes to implement repositories for various data stores.\n\nClasses and Interfaces: \npublic interface CrudMethods; // Meta-information about the CRUD methods of a repository.\npublic interface EntityInformation<T,ID> extends EntityMetadata<T>; // Extension of EntityMetadata to add functionality to query information of entity instances.\npublic interface EntityMetadata<T>; // Metadata for entity types.\npublic interface NamedQueries; // Abstraction of a map of NamedQueries that can be looked up by their names.\npublic class RepositoryCreationException extends InvalidDataAccessApiUsageException; // Exception thrown in the context of repository creation.\npublic interface RepositoryInformation extends RepositoryMetadata; // Additional repository specific information\npublic abstract class RepositoryInformationSupport extends Object implements RepositoryInformation; // Common base class for RepositoryInformation that delays resolution of RepositoryMetadata and the repository base to the latest possible time.\npublic interface RepositoryMetadata; // Metadata for repository interfaces.\n", "des": "Core abstractions for repository implementation."}
{"index": 2067, "repo": "spring-webmvc-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class HandlerFunctionAdapter extends Object implements HandlerAdapter, org.springframework.core.Ordered; // HandlerAdapter implementation that supports HandlerFunctions.\npublic class RouterFunctionMapping extends AbstractHandlerMapping implements org.springframework.beans.factory.InitializingBean; // HandlerMapping implementation that supports RouterFunctions.\n", "des": "Classes supporting the org.springframework.web.servlet.function package."}
{"index": 3153, "repo": "tika-core-2.8.0", "code": "Package: detect\n\nClasses and Interfaces: \nInterface Detector; // Content type detector.\nInterface EncodingDetector; // Character encoding detector.\nClass AutoDetectReader; // An input stream reader that automatically detects the character encoding to be used for converting bytes to characters.\nClass CompositeDetector; // Content type detector that combines multiple different detection mechanisms.\nClass CompositeEncodingDetector;\nClass DefaultDetector; // A composite detector based on all the Detector implementations available through the service provider mechanism.\nClass DefaultEncodingDetector; // A composite encoding detector based on all the EncodingDetector implementations available through the service provider mechanism.\nClass DefaultProbDetector; // A version of DefaultDetector for probabilistic mime detectors, which use statistical techniques to blend the results of differing underlying detectors when attempting to detect the type of a given file.\nClass EmptyDetector; // Dummy detector that returns application/octet-stream for all documents.\nClass FileCommandDetector; // This runs the linux 'file' command against a file.\nClass MagicDetector; // Content type detection based on magic bytes, i.e.\nClass NameDetector; // Content type detection based on the resource name.\nClass NNExampleModelDetector;\nClass NNTrainedModel;\nClass NNTrainedModelBuilder;\nClass NonDetectingEncodingDetector; // Always returns the charset passed in via the initializer\nClass OverrideDetector;\nClass TextDetector; // Content type detection of plain text documents.\nClass TextStatistics; // Utility class for computing a histogram of the bytes seen in a stream.\nClass TrainedModel;\nClass TrainedModelDetector;\nClass TypeDetector; // Content type detection based on a content type hint.\nClass XmlRootExtractor; // Utility class that uses a SAXParser to determine the namespace URI and local name of the root element of an XML file.\nClass ZeroSizeFileDetector; // Detector to identify zero length files as application/x-zerovalue\n", "des": "Media type detection."}
{"index": 1189, "repo": "commons-math3-3.6.1", "code": "Package: scalar\n\nSub Packages: \npackage scalar.gradient; // This package provides optimization algorithms that require derivatives.\npackage scalar.noderiv; // This package provides optimization algorithms that do not require derivatives.\n\nClasses and Interfaces: \nClass GradientMultivariateOptimizer; // Base class for implementing optimizers for multivariate scalar differentiable functions.\nClass LeastSquaresConverter; // This class converts vectorial objective functions to scalar objective functions when the goal is to minimize them.\nClass LineSearch; // Class for finding the minimum of the objective function along a given direction.\nClass MultiStartMultivariateOptimizer; // Multi-start optimizer.\nClass MultivariateFunctionMappingAdapter; // Adapter for mapping bounded MultivariateFunction to unbounded ones.\nClass MultivariateFunctionPenaltyAdapter; // Adapter extending bounded MultivariateFunction to an unbouded domain using a penalty function.\nClass MultivariateOptimizer; // Base class for a multivariate scalar function optimizer.\nClass ObjectiveFunction; // Scalar function to be optimized.\nClass ObjectiveFunctionGradient; // Gradient of the scalar function to be optimized.\nEnum GoalType; // Goal type for an optimization problem (minimization or maximization of a scalar function.\n", "des": "Algorithms for optimizing a scalar function."}
{"index": 3743, "repo": "lucene-queryparser-9.7.0", "code": "Package: nodes\n\nSub Packages: \npackage nodes.intervalfn; // This package contains classes that implement interval function support for the standard syntax parser.\n\nClasses and Interfaces: \nClass AbstractRangeQueryNode<T extends FieldValuePairQueryNode<?>>; // This class should be extended by nodes intending to represent range queries.\nClass BooleanModifierNode; // A BooleanModifierNode has the same behaviour as ModifierQueryNode, it only indicates that this modifier was added by BooleanQuery2ModifierNodeProcessor and not by the user.\nClass IntervalQueryNode; // Node that represents an interval function.\nClass MinShouldMatchNode; // Node that represents a minimum-should-match restriction on a GroupQueryNode.\nClass MultiPhraseQueryNode; // A MultiPhraseQueryNode indicates that its children should be used to build a MultiPhraseQuery instead of PhraseQuery.\nClass PointQueryNode; // This query node represents a field query that holds a point value.\nClass PointRangeQueryNode; // This query node represents a range query composed by PointQueryNode bounds, which means the bound values are Numbers.\nClass PrefixWildcardQueryNode; // A PrefixWildcardQueryNode represents wildcardquery that matches abc* or *.\nClass RegexpQueryNode; // A RegexpQueryNode represents RegexpQuery query Examples: /[a-z]|[0-9]/\nClass SynonymQueryNode; // QueryNode for clauses that are synonym of each other.\nClass TermRangeQueryNode; // This query node represents a range query composed by FieldQueryNode bounds, which means the bound values are strings.\nClass WildcardQueryNode; // A WildcardQueryNode represents wildcard query This does not apply to phrases.\n", "des": "Standard Lucene Query Nodes."}
{"index": 361, "repo": "commons-geometry-euclidean-1.0", "code": "Package: euclidean\n\nSub Packages: \npackage euclidean.internal; // This package contains Euclidean geometry utilities and classes intended for internal use only.\npackage euclidean.oned; // This package provides basic 1D geometry components.\npackage euclidean.threed; // This package provides basic 3D geometry components.\npackage euclidean.twod; // This package provides basic 2D geometry components.\n\nClasses and Interfaces: \nInterface EuclideanTransform<V extends EuclideanVector<V>>; // Interface representing affine transforms in Euclidean space.\nClass AbstractAffineTransformMatrix<V extends EuclideanVector<V>,M extends AbstractAffineTransformMatrix<V,M>>; // Base class for affine transform matrices in Euclidean space.\nClass AbstractBounds<P extends EuclideanVector<P>,B extends AbstractBounds<P,B>>; // Base class representing an axis-aligned bounding box with minimum and maximum bounding points.\nClass AbstractLinecastPoint<P extends EuclideanVector<P>,U extends P,L extends Embedding<P,Vector1D>>; // Base class for intersections discovered during linecast operations.\nClass AbstractNSphere<V extends EuclideanVector<V>>; // Abstract base class representing an n-sphere, which is a generalization of the ordinary 3 dimensional sphere to arbitrary dimensions.\nClass EuclideanVector<V extends EuclideanVector<V>>; // Abstract base class for Euclidean vectors and points.\nClass EuclideanVectorSum<V extends EuclideanVector<V>>; // Class representing a sum of Euclidean vectors.\nClass MultiDimensionalEuclideanVector<V extends MultiDimensionalEuclideanVector<V>>; // Abstract base class for Euclidean vectors with two or more dimensions.\n", "des": "This is the top-level package for Euclidean geometry components."}
{"index": 2770, "repo": "spring-jms-6.0.11", "code": "Package: core\n\nSub Packages: \npackage core.support; // Classes supporting the org.springframework.jms.core package.\n\nClasses and Interfaces: \n@FunctionalInterface public interface BrowserCallback<T>; // Callback for browsing the messages in a JMS queue.\npublic interface JmsMessageOperations extends org.springframework.messaging.core.MessageSendingOperations<Destination>, org.springframework.messaging.core.MessageReceivingOperations<Destination>, org.springframework.messaging.core.MessageRequestReplyOperations<Destination>; // A specialization of MessageSendingOperations, MessageReceivingOperations and MessageRequestReplyOperations for JMS related operations that allow to specify a destination name rather than the actual Destination.\npublic class JmsMessagingTemplate extends org.springframework.messaging.core.AbstractMessagingTemplate<Destination> implements JmsMessageOperations, org.springframework.beans.factory.InitializingBean; // An implementation of JmsMessageOperations.\npublic interface JmsOperations; // Specifies a basic set of JMS operations.\npublic class JmsTemplate extends JmsDestinationAccessor implements JmsOperations; // Helper class that simplifies synchronous JMS access code.\n@FunctionalInterface public interface MessageCreator; // Creates a JMS message given a Session.\n@FunctionalInterface public interface MessagePostProcessor; // To be used with JmsTemplate's send method that converts an object to a message.\n@FunctionalInterface public interface ProducerCallback<T>; // Callback for sending a message to a JMS destination.\n@FunctionalInterface public interface SessionCallback<T>; // Callback for executing any number of operations on a provided Session.\n", "des": "Core package of the JMS support."}
{"index": 2077, "repo": "spring-webmvc-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractAnnotationConfigDispatcherServletInitializer extends AbstractDispatcherServletInitializer; // WebApplicationInitializer to register a DispatcherServlet and use Java-based Spring configuration.\npublic abstract class AbstractDispatcherServletInitializer extends org.springframework.web.context.AbstractContextLoaderInitializer; // Base class for WebApplicationInitializer implementations that register a DispatcherServlet in the servlet context.\npublic abstract class AbstractFlashMapManager extends Object implements FlashMapManager; // A base class for FlashMapManager implementations.\npublic class BindStatus extends Object; // Simple adapter to expose the bind status of a field or object.\npublic class JspAwareRequestContext extends RequestContext; // JSP-aware (and JSTL-aware) subclass of RequestContext, allowing for population of the context from a jakarta.servlet.jsp.PageContext.\npublic abstract class JstlUtils extends Object; // Helper class for preparing JSTL views, in particular for exposing a JSTL localization context.\npublic class RequestContext extends Object; // Context holder for request-specific state, like current web application context, current locale, current theme, and potential binding errors.\npublic abstract class RequestContextUtils extends Object; // Utility class for easy access to request-specific state which has been set by the DispatcherServlet.\npublic interface RequestDataValueProcessor; // A contract for inspecting and potentially modifying request data values such as URL query parameters or form field values before they are rendered by a view or before a redirect.\npublic class ServletUriComponentsBuilder extends org.springframework.web.util.UriComponentsBuilder; // UriComponentsBuilder with additional static factory methods to create links based on the current HttpServletRequest.\npublic class SessionFlashMapManager extends AbstractFlashMapManager; // Store and retrieve FlashMap instances to and from the HTTP session.\npublic abstract class WebContentGenerator extends org.springframework.web.context.support.WebApplicationObjectSupport; // Convenient superclass for any kind of web content generator, like AbstractController and WebContentInterceptor.\n", "des": "Support classes for Spring's web MVC framework."}
{"index": 424, "repo": "mahout-mr-0.13.0", "code": "Package: kmeans\n\nClasses and Interfaces: \nClass Kluster;\nClass KMeansDriver;\nClass RandomSeedGenerator; // Given an Input Path containing a SequenceFile, randomly select k vectors and write them to the output file as a Kluster representing the initial centroid to use.\n", "des": "This package provides an implementation of the k-means clustering algorithm."}
{"index": 1066, "repo": "avro-1.11.2", "code": "Package: util\n\nClasses and Interfaces: \nClass ByteBufferInputStream; // Utility to present ByteBuffer data as an InputStream.\nClass ByteBufferOutputStream; // Utility to collect data written to an OutputStream in ByteBuffers.\nClass ClassUtils;\nClass MapEntry<K,V>; // An implementation of Map.Entry with well-defined member names.\nClass MapUtil;\nClass NonCopyingByteArrayOutputStream; // Utility to make data written to an ByteArrayOutputStream directly available as a ByteBuffer.\nClass RandomData; // Generates schema data as Java objects with random values.\nClass ReusableByteArrayInputStream;\nClass ReusableByteBufferInputStream;\nClass SchemaUtil;\nClass Utf8; // A Utf8 string.\nClass WeakIdentityHashMap<K,V>; // Implements a combination of WeakHashMap and IdentityHashMap.\n", "des": "Common utility classes."}
{"index": 1034, "repo": "hadoop-aws-3.3.6", "code": "Package: prefetch\n\nClasses and Interfaces: \nClass S3ABlockManager; // Provides read access to S3 file one block at a time.\nClass S3ACachingBlockManager; // Provides access to S3 file one block at a time.\nClass S3ACachingInputStream; // Provides an InputStream that allows reading from an S3 file.\nClass S3AInMemoryInputStream; // Provides an InputStream that allows reading from an S3 file.\nClass S3APrefetchingInputStream; // Enhanced InputStream for reading from S3.\nClass S3ARemoteInputStream; // Provides an InputStream that allows reading from an S3 file.\nClass S3ARemoteObject; // Encapsulates low level interactions with S3 object on AWS.\nClass S3ARemoteObjectReader; // Provides functionality to read S3 file one block at a time.\n", "des": "High performance s3 input stream which reads in blocks and can cache blocks in the local filesystem."}
{"index": 644, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: resolver\n\nClasses and Interfaces: \nInterface SubClusterResolver; // An utility that helps to determine the sub-cluster that a specified node or rack belongs to.\nClass AbstractSubClusterResolver; // Partial implementation of SubClusterResolver, containing basic implementations of the read methods.\nClass DefaultSubClusterResolverImpl; // Default simple sub-cluster and rack resolver class.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 3725, "repo": "lucene-queryparser-9.7.0", "code": "Package: charstream\n\nClasses and Interfaces: \nInterface CharStream; // This interface describes a character stream that maintains line and column number positions of the characters.\nClass FastCharStream; // An efficient implementation of JavaCC's CharStream interface.\n", "des": "This package contains reusable parts for javacc-generated grammars (query parsers)."}
{"index": 3180, "repo": "tomcat-api-10.1", "code": "Package: naming\n\nSub Packages: \npackage naming.factory; // This package contains object factories used by the naming service.\npackage naming.java; // This package contains the URL context factory for the \"java\" namespace.\n\nClasses and Interfaces: \nClass AbstractRef;\nClass ContextAccessController; // Handles the access control on the JNDI contexts.\nClass ContextBindings; // Handles the associations : Object with a NamingContext Calling thread with a NamingContext Calling thread with object bound to the same naming context Thread context class loader with a NamingContext Thread context class loader with object bound to the same NamingContext The objects are typically Catalina Server or Context objects.\nClass EjbRef; // Represents a reference address to an EJB.\nClass HandlerRef; // Represents a reference handler for a web service.\nClass LookupRef; // Represents a reference to lookup.\nClass NameParserImpl; // Parses names.\nClass NamingContext; // Catalina JNDI Context implementation.\nClass NamingContextBindingsEnumeration; // Naming enumeration implementation.\nClass NamingContextEnumeration; // Naming enumeration implementation.\nClass NamingEntry; // Represents a binding in a NamingContext.\nClass ResourceEnvRef; // Represents a reference address to a resource environment.\nClass ResourceLinkRef; // Represents a reference address to a resource.\nClass ResourceRef; // Represents a reference address to a resource.\nClass SelectorContext; // Catalina JNDI Context implementation.\nClass ServiceRef; // Represents a reference web service.\nClass StringManager; // An internationalization / localization helper class which reduces the bother of handling ResourceBundles and takes care of the common cases of message formatting which otherwise require the creation of Object arrays and such.\nClass TransactionRef; // Represents a reference address to a transaction.\n", "des": "This package contains a memory based naming service provider."}
{"index": 1728, "repo": "spring-jdbc-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractInterruptibleBatchPreparedStatementSetter extends Object implements InterruptibleBatchPreparedStatementSetter; // Abstract implementation of the InterruptibleBatchPreparedStatementSetter interface, combining the check for available values and setting of those into a single callback method AbstractInterruptibleBatchPreparedStatementSetter.setValuesIfAvailable(java.sql.PreparedStatement, int).\npublic abstract class AbstractLobCreatingPreparedStatementCallback extends Object implements PreparedStatementCallback<Integer>; // Abstract PreparedStatementCallback implementation that manages a LobCreator.\npublic abstract class AbstractLobStreamingResultSetExtractor<T> extends Object implements ResultSetExtractor<T>; // Abstract ResultSetExtractor implementation that assumes streaming of LOB data.\npublic abstract class AbstractSqlTypeValue extends Object implements SqlTypeValue; // Abstract implementation of the SqlTypeValue interface, for convenient creation of type values that are supposed to be passed into the PreparedStatement.setObject method.\n@Deprecated public class JdbcBeanDefinitionReader extends Object;\npublic abstract class JdbcDaoSupport extends org.springframework.dao.support.DaoSupport; // Convenient superclass for JDBC-based data access objects.\npublic class SqlLobValue extends Object implements DisposableSqlTypeValue; // Object to represent an SQL BLOB/CLOB value parameter.\n", "des": "Classes supporting the org.springframework.jdbc.core package."}
{"index": 2607, "repo": "wicket-util-10.0.0-M1", "code": "Package: file\n\nClasses and Interfaces: \npublic class File extends File implements IModifiable; // Simple extension of File that adds an implementation of IModifiable for files.\npublic class FileCleaner extends Object implements IFileCleaner; // Default implementation of IFileCleaner that uses Apache commons-io FileCleaningTracker to track and clean the temporary created files.\npublic class FileCleanerTrackerAdapter extends org.apache.commons.io.FileCleaningTracker; // Adapts IFileCleaner to FileCleaningTracker\npublic class Files extends Object; // File utility methods.\npublic class Folder extends File; // This folder subclass provides some type safety and extensibility for \"files\" that hold other files.\npublic static interface Folder.FileFilter; // Filter for files\npublic static interface Folder.FolderFilter; // Filter for folders\npublic class FolderDeleteStrategy extends org.apache.commons.io.FileDeleteStrategy; // A FileDeleteStrategy that can delete folders.\npublic interface IFileCleaner; // Keeps track of files awaiting deletion, and deletes them when an associated marker object is reclaimed by the garbage collector.\n@FunctionalInterface public interface IResourceFinder; // Knows how to find resources.\npublic class Path extends Object implements IResourceFinder; // An IResourceFinder that looks for its resources in a filesystem path.\npublic class WebXmlFile extends Object; // A utility class providing helper methods in dealing with web.xml\n", "des": "File utilities."}
{"index": 203, "repo": "nutch-2.4", "code": "Package: fetcher\n\nClasses and Interfaces: \nClass FetchEntry;\nClass FetcherJob; // Multi-threaded fetcher.\nClass FetcherJob.FetcherMapper; // Mapper class for Fetcher.\nClass FetcherReducer;\n", "des": "The Nutch robot."}
{"index": 2101, "repo": "spring-webflux-6.0.11", "code": "Package: condition\n\nClasses and Interfaces: \npublic abstract class AbstractRequestCondition<T extends AbstractRequestCondition<T>> extends Object implements RequestCondition<T>; // A base class for RequestCondition types providing implementations of AbstractRequestCondition.equals(Object), AbstractRequestCondition.hashCode(), and AbstractRequestCondition.toString().\npublic class CompositeRequestCondition extends AbstractRequestCondition<CompositeRequestCondition>; // Implements the RequestCondition contract by delegating to multiple RequestCondition types and using a logical conjunction (' && ') to ensure all conditions match a given request.\npublic final class ConsumesRequestCondition extends AbstractRequestCondition<ConsumesRequestCondition>; // A logical disjunction (' || ') request condition to match a request's 'Content-Type' header to a list of media type expressions.\npublic final class HeadersRequestCondition extends AbstractRequestCondition<HeadersRequestCondition>; // A logical conjunction (' && ') request condition that matches a request against a set of header expressions with syntax defined in RequestMapping.headers().\npublic interface MediaTypeExpression; // A contract for media type expressions (e.g.\npublic interface NameValueExpression<T>; // A contract for \"name!=value\" style expression used to specify request parameters and request header conditions in @RequestMapping.\npublic final class ParamsRequestCondition extends AbstractRequestCondition<ParamsRequestCondition>; // A logical conjunction (' && ') request condition that matches a request against a set parameter expressions with syntax defined in RequestMapping.params().\npublic final class PatternsRequestCondition extends AbstractRequestCondition<PatternsRequestCondition>; // A logical disjunction (' || ') request condition that matches a request against a set of URL path patterns.\npublic final class ProducesRequestCondition extends AbstractRequestCondition<ProducesRequestCondition>; // A logical disjunction (' || ') request condition to match a request's 'Accept' header to a list of media type expressions.\npublic interface RequestCondition<T>; // Contract for request mapping conditions.\npublic final class RequestConditionHolder extends AbstractRequestCondition<RequestConditionHolder>; // A holder for a RequestCondition useful when the type of the request condition is not known ahead of time, e.g.\npublic final class RequestMethodsRequestCondition extends AbstractRequestCondition<RequestMethodsRequestCondition>; // A logical disjunction (' || ') request condition that matches a request against a set of RequestMethods.\n", "des": "RequestCondition and implementations for matching requests based on different criteria."}
{"index": 1521, "repo": "spring-context-6.0.11", "code": "Package: standard\n\nClasses and Interfaces: \npublic class DateTimeContext extends Object; // A context that holds user-specific java.time (JSR-310) settings such as the user's Chronology (calendar system) and time zone.\npublic final class DateTimeContextHolder extends Object; // A holder for a thread-local user DateTimeContext.\npublic class DateTimeFormatterFactory extends Object; // Factory that creates a JSR-310 DateTimeFormatter.\npublic class DateTimeFormatterFactoryBean extends DateTimeFormatterFactory implements org.springframework.beans.factory.FactoryBean<DateTimeFormatter>, org.springframework.beans.factory.InitializingBean; // FactoryBean that creates a JSR-310 DateTimeFormatter.\npublic class DateTimeFormatterRegistrar extends Object implements FormatterRegistrar; // Configures the JSR-310 java.time formatting system for use with Spring.\npublic class InstantFormatter extends Object implements Formatter<Instant>; // Formatter implementation for a JSR-310 Instant, following JSR-310's parsing rules for an Instant (that is, not using a configurable DateTimeFormatter): accepting the default ISO_INSTANT format as well as RFC_1123_DATE_TIME (which is commonly used for HTTP date header values), as of Spring 4.3.\npublic class Jsr310DateTimeFormatAnnotationFormatterFactory extends EmbeddedValueResolutionSupport implements AnnotationFormatterFactory<DateTimeFormat>; // Formats fields annotated with the DateTimeFormat annotation using the JSR-310 java.time package in JDK 8.\npublic final class TemporalAccessorParser extends Object implements Parser<TemporalAccessor>; // Parser implementation for a JSR-310 TemporalAccessor, using a DateTimeFormatter (the contextual one, if available).\npublic final class TemporalAccessorPrinter extends Object implements Printer<TemporalAccessor>; // Printer implementation for a JSR-310 TemporalAccessor, using a DateTimeFormatter) (the contextual one, if available).\n", "des": "Integration with the JSR-310 java.time package in JDK 8."}
{"index": 1235, "repo": "spring-hateoas-2.1.2", "code": "Package: forms\n\nClasses and Interfaces: \npublic class HalFormsConfiguration extends Object; // HAL-FORMS specific configuration extension of HalConfiguration.\npublic class HalFormsLinkDiscoverer extends HalLinkDiscoverer; // HAL-FORMS based JsonPathLinkDiscoverer.\npublic interface HalFormsOptions; // Representation of HAL-FORMS options attribute.\npublic abstract static class HalFormsOptions.AbstractHalFormsOptions<T extends HalFormsOptions.AbstractHalFormsOptions<T>> extends Object implements HalFormsOptions;\npublic static class HalFormsOptions.Inline extends HalFormsOptions.AbstractHalFormsOptions<HalFormsOptions.Inline>;\npublic static class HalFormsOptions.Remote extends HalFormsOptions.AbstractHalFormsOptions<HalFormsOptions.Remote>; // Representation of a remote options element.\npublic class HalFormsPromptedValue extends Object; // A value object to describe prompted values for HAL-FORMS options' inline attribute or responses of resources pointed to by the link object.\npublic class Jackson2HalFormsModule extends com.fasterxml.jackson.databind.module.SimpleModule; // Serialize / deserialize all the parts of HAL-FORMS documents using Jackson.\n", "des": "HAL-FORMS extension media type."}
{"index": 1563, "repo": "spring-restdocs-core-3.0.0", "code": "Package: generate\n\nClasses and Interfaces: \npublic class RestDocumentationGenerationException extends RuntimeException; // An exception that can be thrown when a failure occurs during REST documentation generation.\npublic final class RestDocumentationGenerator<REQ,RESP> extends Object; // A RestDocumentationGenerator is used to generate documentation snippets from the request and response of an operation performed on a service.\n", "des": "Classes that drive the generation of the documentation snippets."}
{"index": 152, "repo": "ignite-core-2.15.0", "code": "Package: binary\n\nClasses and Interfaces: \nInterface BinaryMetadataUpdatedListener; // Interface allows any component to register for events of binary metadata updates.\nInterface CacheObjectBinaryProcessorImpl.TestBinaryContext.TestBinaryContextListener;\nClass BinaryMetadataKey; // Key for binary metadata.\nClass CacheObjectBinaryProcessorImpl; // Binary processor implementation.\nClass CacheObjectBinaryProcessorImpl.TestBinaryContext;\nClass IgniteBinaryImpl; // IgniteBinary implementation.\nClass MetadataRemoveAcceptedMessage; // Acknowledge message for MetadataRemoveProposedMessage: see its javadoc for detailed description of protocol.\nClass MetadataRemoveProposedMessage; // MetadataRemoveProposedMessage and MetadataRemoveAcceptedMessage messages make a basis for discovery-based protocol for manage metadata describing objects in binary format stored in Ignite caches.\nClass MetadataRequestMessage; // As DiscoveryCustomMessage messages are delivered to client nodes asynchronously it is possible that server nodes are allowed to send to clients some BinaryObjects clients don't have metadata for.\nClass MetadataResponseMessage; // Carries latest version of metadata to client as a response for MetadataRequestMessage.\nClass MetadataUpdateAcceptedMessage; // Acknowledge message for MetadataUpdateProposedMessage: see its javadoc for detailed description of protocol.\nClass MetadataUpdateProposedMessage; // MetadataUpdateProposedMessage and MetadataUpdateAcceptedMessage messages make a basis for discovery-based protocol for exchanging metadata describing objects in binary format stored in Ignite caches.\n", "des": "Implementation of binary processor."}
{"index": 2615, "repo": "wicket-util-10.0.0-M1", "code": "Package: thread\n\nClasses and Interfaces: \n@FunctionalInterface public interface ICode; // Interface to an arbitrary piece of code that runs and can do logging.\npublic final class Lock extends Object; // Type-safe monitor class to be used in place of Object for readability.\npublic final class Task extends Object; // Runs a block of code periodically.\n", "des": "Threading utilities."}
{"index": 1193, "repo": "commons-math3-3.6.1", "code": "Package: jacobian\n\nClasses and Interfaces: \nClass AbstractLeastSquaresOptimizer; // All classes and interfaces in this package are deprecated.\nClass GaussNewtonOptimizer; // All classes and interfaces in this package are deprecated.\nClass LevenbergMarquardtOptimizer; // All classes and interfaces in this package are deprecated.\n", "des": "This package provides optimization algorithms that require derivatives."}
{"index": 3230, "repo": "commons-release-plugin-1.8.1", "code": "Package: mojos\n\nClasses and Interfaces: \nClass CommonsDistributionDetachmentMojo; // The purpose of this Maven mojo is to detach the artifacts generated by the maven-assembly-plugin, which for the Apache Commons Project do not get uploaded to Nexus, and putting those artifacts in the dev distribution location for Apache projects.\nClass CommonsDistributionStagingMojo; // This class checks out the dev distribution location, copies the distributions into that directory structure under the target/commons-release-plugin/scm directory.\nClass CommonsSiteCompressionMojo;\nClass CommonsStagingCleanupMojo; // This class checks out the dev distribution location, checks whether anything exists in the distribution location, and if it is non-empty it deletes all the resources there.\n", "des": "This package contains all the maven mojos for the commons-release-plugin."}
{"index": 3244, "repo": "opencms-core-15.0", "code": "Package: detailpage\n\nClasses and Interfaces: \nInterface I_CmsDetailPageHandler; // Interface for classes which can find the detail page for a given resource, and determine whether a given detail page / detail content combination is valid.\nClass CmsDefaultDetailPageHandler; // This class uses information from the detail page information stored in the sitemap to find/recognize the detail pages for a given resource.\nClass CmsDetailPageConfigurationWriter; // Class for writing detail page information to an XML configuration file.\nClass CmsDetailPageInfo; // Data bean containing the information for a detail page.\nClass CmsDetailPageResourceHandler; // Resource init handler for detail-pages.\nClass CmsDetailPageUtil; // This is a utility class which provides convenience methods for finding detail page names for resources which include the URL names of the resources themselves.\nClass CmsPermissiveDetailPageHandler; // Original detail page handler implementing the detail page logic from OpenCms versions up to 11.0.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains functions for the detail pages in OpenCms."}
{"index": 1368, "repo": "log4j-over-slf4j-2.0.7", "code": "Package: log4j\n\nClasses and Interfaces: \npublic interface Appender; // Implement this interface for your own strategies for outputting log statements.\npublic class AppenderSkeleton extends Object implements OptionHandler;\npublic class BasicConfigurator extends Object; // A minimal (nop) implementation of BasicConfigurator.\npublic class Category extends Object; // This class is a minimal implementation of the original org.apache.log4j.Category class (as found in log4j 1.2) by delegation of all calls to a Logger instance.\npublic class ConsoleAppender extends WriterAppender; // Skeleton implementation of ConsoleAppender\npublic class FileAppender extends WriterAppender;\npublic class Layout extends Object; // This class is a minimal implementation of the original Log4J class.\npublic class Level extends Priority implements Serializable; // Defines the minimum set of levels recognized by the system, that is OFF, FATAL, ERROR, WARN, INFO, DEBUG and ALL.\npublic class Logger extends Category; // This class is a minimal implementation of the original org.apache.log4j.Logger class (as found in log4j 1.2) delegating all calls to a Logger instance.\npublic class LogManager extends Object; // This class is a minimal implementation of the original org.apache.log4j.LogManager class (as found in log4j 1.2) delegating all calls to SLF4J.\npublic class MDC extends Object;\npublic class NDC extends Object; // A log4j's NDC implemented in terms of SLF4J MDC primitives.\npublic class PatternLayout extends Layout; // This class is a minimal implementation of the original Log4J class.\npublic class Priority extends Object; // Refrain from using this class directly, use the Level class instead.\npublic class PropertyConfigurator extends Object implements Configurator; // A no-op implementation of PropertyConfigurator.\npublic class RollingFileAppender extends Object; // This class is a minimal implementation of the original Log4J class.\npublic class SimpleLayout extends Layout;\npublic class WriterAppender extends AppenderSkeleton;\n", "des": "An rather minimal but sufficient implementation redirecting all calls to a log4j logger to a logback logger."}
{"index": 1470, "repo": "spring-boot-configuration-processor-3.1.1", "code": "Package: configurationprocessor\n\nSub Packages: \npackage configurationprocessor.fieldvalues; // Abstraction for field value parsing.\npackage configurationprocessor.metadata; // The configuration properties meta-data model and JSON writing support.\n\nClasses and Interfaces: \n@SupportedAnnotationTypes({\"org.springframework.boot.autoconfigure.AutoConfiguration\",\"org.springframework.boot.context.properties.ConfigurationProperties\",\"org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpoint\",\"org.springframework.boot.actuate.endpoint.annotation.Endpoint\",\"org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpoint\",\"org.springframework.boot.actuate.endpoint.web.annotation.RestControllerEndpoint\",\"org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpoint\",\"org.springframework.boot.actuate.endpoint.web.annotation.WebEndpoint\",\"org.springframework.context.annotation.Configuration\"}) public class ConfigurationMetadataAnnotationProcessor extends AbstractProcessor; // Annotation Processor that writes meta-data file for @ConfigurationProperties.\npublic class MetadataCollector extends Object; // Used by ConfigurationMetadataAnnotationProcessor to collect ConfigurationMetadata.\npublic class MetadataStore extends Object; // A MetadataStore is responsible for the storage of metadata on the filesystem.\n", "des": "Annotation processor to create @ConfigurationProperties meta-data files."}
{"index": 2075, "repo": "spring-webmvc-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class DefaultHandlerExceptionResolver extends AbstractHandlerExceptionResolver; // The default implementation of the HandlerExceptionResolver interface, resolving standard Spring MVC exceptions and translating them to corresponding HTTP status codes.\npublic interface RedirectAttributes extends org.springframework.ui.Model; // A specialization of the Model interface that controllers can use to select attributes for a redirect scenario.\npublic class RedirectAttributesModelMap extends org.springframework.ui.ModelMap implements RedirectAttributes; // A ModelMap implementation of RedirectAttributes that formats values as Strings using a DataBinder.\n", "des": "Support package for MVC controllers."}
{"index": 1085, "repo": "graal-sdk-1.0.0-rc7", "code": "Package: polyglot\n\nSub Packages: \npackage polyglot.io; // Input/Output support for the Graal-SDK polyglot API.\npackage polyglot.management; // The management package provides tools that monitor and instrument the behavior of guest language programs.\npackage polyglot.proxy; // The Graal SDK proxy interfaces allow to mimic guest language objects, arrays, executables, primitives and native objects in Graal languages.\n\nClasses and Interfaces: \nClass Context; // A polyglot context for Graal guest languages that allows to evaluate code.\nClass Engine; // An execution engine for Graal guest languages that allows to inspect the the installed guest languages, instruments and their available options.\nClass Instrument; // A handle for an instrument installed in an engine.\nClass Language; // A handle for a Graal language installed in an engine.\nClass Source; // Representation of a source code unit and its contents that can be evaluated in an execution context.\nClass SourceSection; // Description of contiguous section of text within a Source of program code.; supports multiple modes of access to the text and its location.\nClass TypeLiteral<T>; // Represents a generic type T.\nClass Value; // Represents a polyglot value that can be accessed using a set of language agnostic operations.\nClass PolyglotException; // A polyglot exception represents errors that contain Graal guest languages on the stack trace.\n", "des": "The Graal-SDK polyglot API allows to embed Graal languages in Java applications."}
{"index": 3164, "repo": "tika-core-2.8.0", "code": "Package: utils\n\nClasses and Interfaces: \nClass AnnotationUtils; // This class contains utilities for dealing with tika annotations\nClass CharsetUtils;\nClass CompareUtils;\nClass ConcurrentUtils; // Utility Class for Concurrency in Tika\nClass DateUtils; // Date related utility methods and constants\nClass ExceptionUtils;\nClass FileProcessResult;\nClass ParserUtils; // Helper util methods for Parsers themselves.\nClass ProcessUtils;\nClass RegexUtils; // Inspired from Nutch code class OutlinkExtractor.\nClass RereadableInputStream; // Wraps an input stream, reading it only once, but making it available for rereading an arbitrary number of times.\nClass ServiceLoaderUtils; // Service Loading and Ordering related utils\nClass StreamGobbler;\nClass StringUtils;\nClass SystemUtils; // Copied from commons-lang to avoid requiring the dependency\nClass XMLReaderUtils; // Utility functions for reading XML.\n", "des": "Utilities."}
{"index": 527, "repo": "commons-vfs2-2.9.0", "code": "Package: https\n\nClasses and Interfaces: \nClass HttpsFileNameParser; // Implementation for https.\nClass HttpsFileProvider; // An HTTPS provider that uses commons-httpclient.\n", "des": "The HTTPS File Provider"}
{"index": 1295, "repo": "spring-core-6.0.11", "code": "Package: function\n\nClasses and Interfaces: \npublic class SingletonSupplier<T> extends Object implements Supplier<T>; // A Supplier decorator that caches a singleton result and makes it available from SingletonSupplier.get() (nullable) and SingletonSupplier.obtain() (null-safe).\npublic abstract class SupplierUtils extends Object; // Convenience utilities for Supplier handling.\npublic interface ThrowingBiFunction<T,U,R> extends BiFunction<T,U,R>; // A BiFunction that allows invocation of code that throws a checked exception.\n@FunctionalInterface public interface ThrowingConsumer<T> extends Consumer<T>; // A Consumer that allows invocation of code that throws a checked exception.\n@FunctionalInterface public interface ThrowingFunction<T,R> extends Function<T,R>; // A Function that allows invocation of code that throws a checked exception.\npublic interface ThrowingSupplier<T> extends Supplier<T>; // A Supplier that allows invocation of code that throws a checked exception.\n", "des": "Useful generic java.util.function helper classes."}
{"index": 2416, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: cassandra\n\nClasses and Interfaces: \n@AutoConfiguration(after={org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration.class,org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration.class,CassandraReactiveHealthContributorAutoConfiguration.class}) @ConditionalOnClass(com.datastax.oss.driver.api.core.CqlSession.class) @ConditionalOnEnabledHealthIndicator(\"cassandra\") @Import(org.springframework.boot.actuate.autoconfigure.cassandra.CassandraHealthContributorConfigurations.CassandraDriverConfiguration.class) public class CassandraHealthContributorAutoConfiguration extends Object; // Auto-configuration for CassandraDriverHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration.class) @ConditionalOnClass({com.datastax.oss.driver.api.core.CqlSession.class,reactor.core.publisher.Flux.class}) @ConditionalOnEnabledHealthIndicator(\"cassandra\") @Import(org.springframework.boot.actuate.autoconfigure.cassandra.CassandraHealthContributorConfigurations.CassandraReactiveDriverConfiguration.class) public class CassandraReactiveHealthContributorAutoConfiguration extends Object; // Auto-configuration for CassandraDriverReactiveHealthIndicator.\n", "des": "Auto-configuration for actuator Cassandra concerns."}
{"index": 3645, "repo": "solr-core-9.3.0", "code": "Package: impl\n\nClasses and Interfaces: \nClass AttributeFetcherImpl; // Implementation of AttributeFetcher that uses SolrCloudManager to access Solr cluster details.\nClass AttributeValuesImpl; // Implementation of AttributeValues used by AttributeFetcherImpl.\nClass BalancePlanFactoryImpl; // Simple implementation of BalancePlanFactory.\nClass BalanceRequestImpl;\nClass CollectionMetricsBuilder; // Builder class for constructing instances of CollectionMetrics.\nClass CollectionMetricsBuilder.ReplicaMetricsBuilder;\nClass CollectionMetricsBuilder.ShardMetricsBuilder;\nClass DelegatingPlacementPluginFactory; // Helper class to support dynamic reloading of plugin implementations.\nClass MetricImpl<T>; // Base class for Metric implementations.\nClass ModificationRequestImpl; // Helper class to create modification request instances.\nClass NodeMetricImpl<T>; // Node metric identifier, corresponding to a node-level metric registry and the internal metric name.\nClass PlacementPlanFactoryImpl; // Simple implementation of PlacementPlanFactory.\nClass PlacementPluginAssignStrategy; // This assign strategy delegates placement computation to \"plugin\" code.\nClass PlacementPluginFactoryLoader; // Utility class to load the configured PlacementPluginFactory plugin and then keep it up to date as the plugin configuration changes.\nClass PlacementRequestImpl;\nClass ReplicaMetricImpl<T>; // Replica metric identifier, corresponding to one of the internal replica-level metric names (as reported in solr.core.[collection].[replica] registry)\nClass SimplePlacementContextImpl; // Implementation of PlacementContext that uses SimpleClusterAbstractionsImpl to create components necessary for the placement plugins to use.\n", "des": "Implementation classes (not visible to plugins, subject to change at any time) for the interfaces in org.apache.solr.cluster.placement and to make them work with the rest of Solr."}
{"index": 150, "repo": "ignite-core-2.15.0", "code": "Package: affinity\n\nClasses and Interfaces: \nInterface AffinityAssignment; // Cached affinity calculations.\nInterface HistoryAffinityAssignment; // Interface for historical calculated affinity assignment.\nClass AffinityTopologyVersion;\nClass GridAffinityAssignment;\nClass GridAffinityAssignmentCache; // Affinity cached function.\nClass GridAffinityAssignmentV2; // Cached affinity calculations V2.\nClass GridAffinityFunctionContextImpl; // Cache affinity function context implementation.\nClass GridAffinityProcessor; // Data affinity processor.\nClass HistoryAffinityAssignmentImpl; // Heap-space optimized version of calculated affinity assignment.\nClass HistoryAffinityAssignmentShallowCopy; // Shallow copy that contains reference to delegate HistoryAffinityAssignment.\nClass IdealAffinityAssignment;\n", "des": "Data affinity processor."}
{"index": 3358, "repo": "opencms-core-15.0", "code": "Package: util\n\nSub Packages: \npackage util.table; // Contains utility classes for dealing with Vaadin tables.\n\nClasses and Interfaces: \nInterface CmsLogicalCheckboxGroup.I_ChangeListener; // Listener interface.\nInterface CmsNewResourceBuilder.I_Callback; // Interface for callbacks which should be notified when this helper has created a resource.\nInterface I_CmsItemSorter; // Interface for item sorters that evaluate the sortable container properties.\nClass CmsComboNullToEmptyConverter; // Converts null values to an empty string for the input widgets.\nClass CmsComponentField<T extends com.vaadin.ui.Component>; // Container wrapping a single UI component.\nClass CmsLogicalCheckboxGroup; // Ensures that among a set of check boxes, at most one of them is checked, without imposing constraints on the location of the checkboxes in the UI.\nClass CmsNewResourceBuilder; // Helper class for creating a new resource using the New dialog.\nClass CmsNullToEmptyConverter; // Converts null values to an empty string for the input widgets.\nClass CmsStyleVariable;\nEnum CmsDisplayType; // Represents the three possible display types (small, medium, wide).\n", "des": "Utilities for Vaadin workplace code."}
{"index": 2560, "repo": "pulsar-common-3.0.0", "code": "Package: data\n\nClasses and Interfaces: \npublic class AutoFailoverPolicyDataImpl extends Object implements AutoFailoverPolicyData; // The auto failover policy configuration data.\npublic static class AutoFailoverPolicyDataImpl.AutoFailoverPolicyDataImplBuilder extends Object implements AutoFailoverPolicyData.Builder;\npublic final class BrokerNamespaceIsolationDataImpl extends Object implements BrokerNamespaceIsolationData; // The namespace isolation data for a given broker.\npublic static class BrokerNamespaceIsolationDataImpl.BrokerNamespaceIsolationDataImplBuilder extends Object implements BrokerNamespaceIsolationData.Builder;\npublic final class ClusterDataImpl extends Object implements ClusterData, Cloneable; // The configuration data for a cluster.\npublic static class ClusterDataImpl.ClusterDataImplBuilder extends Object implements ClusterData.Builder;\npublic class EnsemblePlacementPolicyConfig extends Object;\npublic static class EnsemblePlacementPolicyConfig.ParseEnsemblePlacementPolicyConfigException extends Exception;\npublic final class FailureDomainImpl extends Object implements FailureDomain; // The data of a failure domain configuration in a cluster.\npublic static class FailureDomainImpl.FailureDomainImplBuilder extends Object implements FailureDomain.Builder;\npublic class FunctionInstanceStatsDataBaseImpl extends Object implements FunctionInstanceStatsDataBase; // Function instance statistics data base.\npublic class FunctionInstanceStatsDataImpl extends FunctionInstanceStatsDataBaseImpl implements FunctionInstanceStatsData; // Function instance statistics data.\npublic class FunctionInstanceStatsImpl extends Object implements FunctionInstanceStats; // Function instance statistics.\npublic class FunctionStatsImpl extends Object implements FunctionStats; // Statistics for Pulsar Function.\npublic class FunctionStatusUtil extends Object;\npublic class HierarchyTopicPolicies extends Object; // Topic policy hierarchy value container.\npublic class LocalPolicies extends Object; // Local policies.\npublic class NamespaceIsolationDataImpl extends Object implements NamespaceIsolationData; // The data of namespace isolation configuration.\npublic static class NamespaceIsolationDataImpl.NamespaceIsolationDataImplBuilder extends Object implements NamespaceIsolationData.Builder;\npublic enum NamespaceOperation extends Enum<NamespaceOperation>; // Namespace authorization operations.\npublic class OffloadPoliciesImpl extends Object implements Serializable, OffloadPolicies; // Definition of the offload policies.\npublic static class OffloadPoliciesImpl.OffloadPoliciesImplBuilder extends Object implements OffloadPolicies.Builder;\npublic class PersistentOfflineTopicStats extends Object; // This object is populated using meta data in zookeeper without actually bringing the topic online.\n", "des": "Definition of different data structures for policies."}
{"index": 1301, "repo": "groovy-all-4.0.13", "code": "Package: io\n\nClasses and Interfaces: \npublic class EncodingAwareBufferedWriter extends BufferedWriter; // A buffered writer only for OutputStreamWriter that is aware of the encoding of the OutputStreamWriter.\npublic enum FileType extends Enum<FileType>; // Represents particular files of interest.\npublic enum FileVisitResult extends Enum<FileVisitResult>; // Represents special return values for the 'preDir', 'postDir' and 'visit'/supplied Closures used with ResourceGroovyMethods.traverse(java.io.File, java.util.Map, groovy.lang.Closure) and related methods to control subsequent traversal behavior.\npublic class GroovyPrintStream extends PrintStream; // A PrintStream that outputs objects in Groovy style.\npublic class GroovyPrintWriter extends PrintWriter; // A PrintWriter that outputs objects in Groovy style.\npublic class LineColumnReader extends BufferedReader; // The LineColumnReader is an extension to BufferedReader that keeps track of the line and column information of where the cursor is.\npublic class PlatformLineWriter extends Writer; // A buffered writer that gobbles any \\r characters and replaces every \\n with a platform specific newline.\n", "des": "Classes for Groovier Input/Output."}
{"index": 3198, "repo": "tomcat-api-10.1", "code": "Package: fileupload\n\nSub Packages: \npackage fileupload.disk; // A disk-based implementation of the FileItem interface.\npackage fileupload.impl; // Implementations and exceptions utils.\npackage fileupload.servlet; // An implementation of FileUpload for use in servlets conforming to JSR 53.\npackage fileupload.util; // This package contains various IO related utility classes or methods, which are basically reusable and not necessarily restricted to the scope of a file upload.\n\nClasses and Interfaces: \nInterface FileItem; // This class represents a file or form item that was received within a multipart/form-data POST request.\nInterface FileItemFactory; // A factory interface for creating FileItem instances.\nInterface FileItemHeaders; // This class provides support for accessing the headers for a file or form item that was received within a multipart/form-data POST request.\nInterface FileItemHeadersSupport; // Interface that will indicate that FileItem or FileItemStream implementations will accept the headers read for the item.\nInterface FileItemIterator; // An iterator, as returned by FileUploadBase.getItemIterator(RequestContext).\nInterface FileItemStream; // This interface provides access to a file or form item that was received within a multipart/form-data POST request.\nInterface ProgressListener; // The ProgressListener may be used to display a progress bar or do stuff like that.\nInterface RequestContext; // Abstracts access to the request information needed for file uploads.\nInterface UploadContext; // Enhanced access to the request information needed for file uploads, which fixes the Content Length data access in RequestContext.\nClass ByteArrayOutputStream; // This class implements an output stream in which the data is written into a byte array.\nClass DeferredFileOutputStream; // An output stream which will retain data in memory until a specified threshold is reached, and only then commit it to disk.\nClass FileUpload; // High level API for processing file uploads.\nClass FileUploadBase; // High level API for processing file uploads.\nClass FileUtils; // General file manipulation utilities.\nClass IOUtils; // General IO stream manipulation utilities.\nClass MultipartStream; // Low level API for processing file uploads.\nClass MultipartStream.ProgressNotifier; // Internal class, which is used to invoke the ProgressListener.\nClass ParameterParser; // A simple parser intended to parse sequences of name/value pairs.\n", "des": "NOTE: This code has been copied from commons-fileupload trunk 1.3 and commons-io 1.4 and package renamed to avoid clashes with any web apps that may wish to use these libraries."}
{"index": 1916, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: mongo\n\nClasses and Interfaces: \n@AutoConfiguration(after=MongoAutoConfiguration.class) @ConditionalOnClass({com.mongodb.client.MongoClient.class,org.springframework.data.mongodb.core.MongoTemplate.class}) @EnableConfigurationProperties(MongoProperties.class) @Import({org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration.class,org.springframework.boot.autoconfigure.data.mongo.MongoDatabaseFactoryConfiguration.class,org.springframework.boot.autoconfigure.data.mongo.MongoDatabaseFactoryDependentConfiguration.class}) public class MongoDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's mongo support.\n@AutoConfiguration(after=MongoReactiveAutoConfiguration.class) @ConditionalOnClass({com.mongodb.reactivestreams.client.MongoClient.class,org.springframework.data.mongodb.core.ReactiveMongoTemplate.class}) @ConditionalOnBean(com.mongodb.reactivestreams.client.MongoClient.class) @EnableConfigurationProperties(MongoProperties.class) @Import(org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration.class) public class MongoReactiveDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's reactive mongo support.\n@AutoConfiguration(after=MongoReactiveDataAutoConfiguration.class) @ConditionalOnClass({com.mongodb.reactivestreams.client.MongoClient.class,org.springframework.data.mongodb.repository.ReactiveMongoRepository.class}) @ConditionalOnMissingBean({org.springframework.data.mongodb.repository.support.ReactiveMongoRepositoryFactoryBean.class,org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoryConfigurationExtension.class}) @ConditionalOnRepositoryType(store=\"mongodb\", type=REACTIVE) @Import(org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesRegistrar.class) public class MongoReactiveRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's Mongo Reactive Repositories.\n", "des": "Auto-configuration for Spring Data Mongo."}
{"index": 1253, "repo": "spring-core-6.0.11", "code": "Package: hint\n\nSub Packages: \npackage hint.annotation; // Annotation support for runtime hints.\npackage hint.predicate; // Predicate support for runtime hints.\npackage hint.support; // Convenience classes for using runtime hints.\n\nClasses and Interfaces: \npublic abstract class AbstractTypeReference extends Object implements TypeReference; // Base TypeReference implementation that ensures consistent behaviour for equals(), hashCode(), and toString() based on the canonical name.\npublic class BindingReflectionHintsRegistrar extends Object; // Register the necessary reflection hints so that the specified type can be bound at runtime.\npublic interface ConditionalHint; // Contract for runtime hints that only apply if the described condition is met.\npublic final class ExecutableHint extends MemberHint; // A hint that describes the need for reflection on a Method or Constructor.\npublic static class ExecutableHint.Builder extends Object; // Builder for ExecutableHint.\npublic enum ExecutableMode extends Enum<ExecutableMode>; // Represent the need of reflection for a given Executable.\npublic final class FieldHint extends MemberHint; // A hint that describes the need for reflection on a Field.\npublic class JavaSerializationHint extends Object implements ConditionalHint; // A hint that describes the need for Java serialization at runtime.\npublic static class JavaSerializationHint.Builder extends Object; // Builder for JavaSerializationHint.\npublic final class JdkProxyHint extends Object implements ConditionalHint; // A hint that describes the need for a JDK interface-based Proxy.\npublic static class JdkProxyHint.Builder extends Object; // Builder for JdkProxyHint.\npublic enum MemberCategory extends Enum<MemberCategory>; // Predefined Member categories.\npublic abstract class MemberHint extends Object; // Base hint that describes the need for reflection on a Member.\npublic class ProxyHints extends Object; // Gather the need for using proxies at runtime.\npublic class ReflectionHints extends Object; // Gather the need for reflection at runtime.\npublic final class ResourceBundleHint extends Object implements ConditionalHint; // A hint that describes the need to access a ResourceBundle.\npublic static class ResourceBundleHint.Builder extends Object; // Builder for ResourceBundleHint.\npublic class ResourceHints extends Object; // Gather the need for resources available at runtime.\npublic final class ResourcePatternHint extends Object implements ConditionalHint; // A hint that describes resources that should be made available at runtime.\n", "des": "Support for registering the need for reflection, resources, java serialization and proxies at runtime."}
{"index": 18, "repo": "commons-collections4-4.4", "code": "Package: comparators\n\nClasses and Interfaces: \nClass BooleanComparator; // A Comparator for Boolean objects that can sort either true or false first.\nClass ComparableComparator<E extends Comparable<? super E>>; // A Comparator that compares Comparable objects.\nClass ComparatorChain<E>; // A ComparatorChain is a Comparator that wraps one or more Comparators in sequence.\nClass FixedOrderComparator<T>; // A Comparator which imposes a specific order on a specific set of Objects.\nClass NullComparator<E>; // A Comparator that will compare nulls to be either lower or higher than other objects.\nClass ReverseComparator<E>; // Reverses the order of another comparator by reversing the arguments to its compare method.\nClass TransformingComparator<I,O>; // Decorates another Comparator with transformation behavior.\nEnum FixedOrderComparator.UnknownObjectBehavior; // Unknown object behavior enum.\n", "des": "This package contains implementations of the Comparator interface."}
{"index": 2956, "repo": "spring-integration-xml-6.1.2", "code": "Package: xpath\n\nClasses and Interfaces: \npublic enum XPathEvaluationType extends Enum<XPathEvaluationType>; // Enumeration of different types of XPath evaluation used to indicate the type of evaluation that should be carried out using a provided XPath expression.\npublic final class XPathUtils extends Object; // Utility class for 'xpath' support.\n", "des": "Provides XPath supporting classes."}
{"index": 2415, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: cache\n\nClasses and Interfaces: \n@AutoConfiguration(after=org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration.class) @ConditionalOnClass(org.springframework.cache.CacheManager.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.cache.CachesEndpoint.class) public class CachesEndpointAutoConfiguration extends Object; // Auto-configuration for CachesEndpoint.\n", "des": "Auto-configuration for actuator cache concerns."}
{"index": 2720, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: mapping\n\nClasses and Interfaces: \npublic class ArrayFieldSetMapper extends Object implements FieldSetMapper<String[]>; // A basic array mapper, returning the values backing a fieldset.\npublic class BeanWrapperFieldSetMapper<T> extends DefaultPropertyEditorRegistrar implements FieldSetMapper<T>, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // FieldSetMapper implementation based on bean property paths.\npublic class DefaultLineMapper<T> extends Object implements LineMapper<T>, org.springframework.beans.factory.InitializingBean; // Two-phase LineMapper implementation consisting of tokenization of the line into FieldSet followed by mapping to item.\npublic interface FieldSetMapper<T>; // Interface that is used to map data obtained from a FieldSet into an object.\npublic class JsonLineMapper extends Object implements LineMapper<Map<String,Object>>; // Interpret a line as a JSON object and parse it up to a Map.\npublic class PassThroughFieldSetMapper extends Object implements FieldSetMapper<FieldSet>; // Pass through FieldSetMapper useful for passing a FieldSet back directly rather than a mapped object.\npublic class PassThroughLineMapper extends Object implements LineMapper<String>; // Pass through LineMapper useful for passing the original String back directly rather than a mapped object.\npublic class PatternMatchingCompositeLineMapper<T> extends Object implements LineMapper<T>, org.springframework.beans.factory.InitializingBean; // A LineMapper implementation that stores a mapping of String patterns to delegate LineTokenizers as well as a mapping of String patterns to delegate FieldSetMappers.\npublic class RecordFieldSetMapper<T> extends Object implements FieldSetMapper<T>; // This is a FieldSetMapper that supports Java records mapping (requires JKD 14 or higher).\n", "des": "Infrastructure implementations of io file support mapping concerns."}
{"index": 457, "repo": "camel-core-3.0.0-RC1", "code": "Package: transformer\n\nClasses and Interfaces: \nClass CustomTransformerDefinition; // Represents a CustomTransformer.\nClass DataFormatTransformerDefinition; // Represents a DataFormatTransformer which leverages DataFormat to perform transformation.\nClass EndpointTransformerDefinition; // Represents an endpoint Transformer which leverages camel Endpoint to perform transformation.\nClass TransformerDefinition; // Represents a Transformer which declaratively transforms message content according to the input type declared by InputTypeDefinition and/or output type declared by OutputTypeDefinition.\nClass TransformersDefinition; // To configure transformers.\n", "des": "The JAXB POJOs for the Transformers used to transform message contents according to declared data types inside components"}
{"index": 85, "repo": "ignite-core-2.15.0", "code": "Package: internal\n\nClasses and Interfaces: \nInterface CommunicationListenerEx<T extends Serializable>; // Extended communication SPI listener to provide Channel opened events.\nInterface ConnectionPolicy; // Connection policy.\nInterface ConnectionRequestor; // Helper interface to ask other nodes to open connections.\nInterface TcpCommunicationNodeConnectionCheckFuture; // Tcp Communication Node Connection Check Future.\nInterface TcpConnectionIndexAwareMessage;\nClass ClusterStateProvider; // This class must be removed.\nClass CommunicationDiscoveryEventListener; // Listener on discovery events.\nClass CommunicationTcpUtils; // Common communication spi logic.\nClass CommunicationWorker; // Works with connections states.\nClass ConnectFuture; // Connect future which uses as a marker of type connection releted with TCP.\nClass ConnectGateway; // Lock and error control work flow.\nClass ConnectionClientPool; // Registry of client connections.\nClass ConnectionKey; // Connection Key.\nClass ConnectionRequestFuture; // Marker future implementation, just like ConnectFuture, but meaning that we're waiting for the inverse connection.\nClass DisconnectedSessionInfo; // Class marker that say that connection must be interacted.\nClass FirstConnectionPolicy; // First connection policy.\nClass GridNioServerWrapper; // Should be removed.\nClass HandshakeTimeoutObject; // Callback that is intended to be executed after timeout on handshake.\nClass InboundConnectionHandler; // This class implement NioListener which process handshake stage, and transmit messages to session.\nClass RoundRobinConnectionPolicy; // Round robin connection policy.\nClass TcpCommunicationConfigInitializer; // Only may implement it TcpCommunicationSpi.\nClass TcpCommunicationConfiguration; // Class of configuration for TcpCommunicationSpi segregation.\nClass TcpCommunicationConnectionCheckFuture; // Tcp Communication Connection Check Future.\nClass TcpCommunicationSpiMBeanImpl; // MBean implementation for TcpCommunicationSpi.\nClass TcpConnectionRequestDiscoveryMessage; // Message is part of communication via discovery protocol.\nClass TcpHandshakeExecutor; // Executor for synchronously establishing a connection with a node.\nClass TcpInverseConnectionResponseMessage; // Inverse connection response message sent by client node as a response to inverse connection request received by discovery.\nClass HandshakeException; // Internal exception class for proper timeout handling.\nClass NodeUnreachableException; // Exception is thrown by TcpCommunicationSpi when some or all addresses of a node are unreachable and direct communication connection cannot be established.\n", "des": "Contains connection health-checkers for TCP/IP-based implementation of communication SPI."}
{"index": 326, "repo": "kafka-clients-3.5.0", "code": "Package: stats\n\nClasses and Interfaces: \nInterface Histogram.BinScheme; // An algorithm for determining the bin in which a value is to be placed as well as calculating the upper end of each bin.\nClass Avg; // A SampledStat that maintains a simple average over its samples.\nClass CumulativeCount; // A non-sampled version of WindowedCount maintained over all time.\nClass CumulativeSum; // An non-sampled cumulative total maintained over all time.\nClass Frequencies; // A CompoundStat that represents a normalized distribution with a Frequency metric for each bucketed value.\nClass Frequency; // Definition of a frequency metric used in a Frequencies compound statistic.\nClass Histogram;\nClass Histogram.ConstantBinScheme; // A scheme for calculating the bins where the width of each bin is a constant determined by the range of values and the number of bins.\nClass Histogram.LinearBinScheme; // A scheme for calculating the bins where the width of each bin is one more than the previous bin, and therefore the bin widths are increasing at a linear rate.\nClass Max; // A SampledStat that gives the max over its samples.\nClass Meter; // A compound stat that includes a rate metric and a cumulative total metric.\nClass Min; // A SampledStat that gives the min over its samples.\nClass Percentile;\nClass Percentiles; // A compound stat that reports one or more percentiles\nClass Rate; // The rate of the given quantity.\nClass SampledStat; // A SampledStat records a single scalar value measured over one or more samples.\nClass SimpleRate; // A simple rate the rate is incrementally calculated based on the elapsed time between the earliest reading and now.\nClass TokenBucket; // The TokenBucket is a MeasurableStat implementing a token bucket algorithm that is usable within a Sensor.\nClass Value; // An instantaneous value.\nClass WindowedCount; // A SampledStat that maintains a simple count of what it has seen.\nClass WindowedSum; // A SampledStat that maintains the sum of what it has seen.\nEnum Percentiles.BucketSizing;\n", "des": "Provides methods of statistically aggregating metrics upon emission."}
{"index": 436, "repo": "commons-pool2-2.11.1", "code": "Package: pool2\n\nSub Packages: \npackage pool2.impl; // Object pooling API implementations.\npackage pool2.proxy; // Object pooling proxy implementation.\n\nClasses and Interfaces: \nInterface KeyedObjectPool<K,V>; // A \"keyed\" pooling interface.\nInterface KeyedPooledObjectFactory<K,V>; // An interface defining life-cycle methods for instances to be served by a KeyedObjectPool.\nInterface ObjectPool<T>; // A pooling simple interface.\nInterface PooledObject<T>; // Defines the wrapper that is used to track the additional information, such as state, for the pooled objects.\nInterface PooledObjectFactory<T>; // An interface defining life-cycle methods for instances to be served by an ObjectPool.\nInterface SwallowedExceptionListener; // Pools that unavoidably swallow exceptions may be configured with an instance of this listener so the user may receive notification of when this happens.\nInterface TrackedUse; // Allows pooled objects to make information available about when and how they were used available to the object pool.\nInterface UsageTracking<T>; // This interface may be implemented by an object pool to enable clients (primarily those clients that wrap pools to provide pools with extended features) to provide additional information to the pool relating to object using allowing more informed decisions and reporting to be made regarding abandoned objects.\nClass BaseKeyedPooledObjectFactory<K,V>; // A base implementation of KeyedPooledObjectFactory.\nClass BaseObject; // A base class for common functionality.\nClass BaseObjectPool<T>; // A simple base implementation of ObjectPool.\nClass BasePooledObjectFactory<T>; // A base implementation of PoolableObjectFactory.\nClass PoolUtils; // This class consists exclusively of static methods that operate on or return ObjectPool or KeyedObjectPool related interfaces.\nEnum DestroyMode; // Destroy context provided to object factories via destroyObject and invalidateObject methods.\nEnum PooledObjectState; // Provides all possible states of a PooledObject.\n", "des": "Object pooling API."}
{"index": 3375, "repo": "opencms-core-15.0", "code": "Package: xml\n\nSub Packages: \npackage xml.containerpage; // Contains functions for the ADE main pages, commonly called \"Container Pages\" in OpenCms.\npackage xml.content; // Contains functions for structured content storage using XML, commonly called \"XML content\" in OpenCms.\npackage xml.page; // Contains functions for unstructured content storage using XML, commonly called \"XML pages\" in OpenCms.\npackage xml.types; // Contains the basic XML content type definitions, used for XML content and XML pages.\n\nClasses and Interfaces: \nInterface I_CmsXmlDocument; // Describes the API to access the values of a XML content document.\nClass A_CmsXmlDocument; // Provides basic XML document handling functions useful when dealing with XML documents that are stored in the OpenCms VFS.\nClass CmsXmlContentDefinition; // Describes the structure definition of an XML content object.\nClass CmsXmlContentTypeManager; // Manager class for registered OpenCms XML content types and content collectors.\nClass CmsXmlEntityResolver; // Resolves XML entities (e.g.\nClass CmsXmlErrorHandler; // Error hander for writing errors found during XML validation to the OpenCms log.\nClass CmsXmlFileTransformer; // Transforms all resources of a given type by\nClass CmsXmlGenericWrapper; // Provides generic wrappers for XML library methods that do not support Java 5 generic types.\nClass CmsXmlMessages; // The xml messages overwrite some methods of the general CmsMessages class to get keys from an individual configuration file.\nClass CmsXmlUtils; // Provides some basic XML handling utilities.\nClass CmsXmlValidationErrorHandler; // Error hander for writing errors found during XML validation to the OpenCms log.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsXmlContentDefinition.SequenceType; // Enumeration of possible sequence types in a content definition.\nClass CmsXmlException; // Signals that an error occurred while processing an xml resource.\n", "des": "Basic XML functionality and utilities used by OpenCms to maintain XML documents and content."}
{"index": 2289, "repo": "spring-boot-3.1.1", "code": "Package: ansi\n\nClasses and Interfaces: \npublic final class Ansi8BitColor extends Object implements AnsiElement; // AnsiElement implementation for ANSI 8-bit foreground or background color codes.\npublic enum AnsiBackground extends Enum<AnsiBackground> implements AnsiElement; // Ansi background colors.\npublic enum AnsiColor extends Enum<AnsiColor> implements AnsiElement; // Ansi colors.\npublic interface AnsiElement; // An ANSI encodable element.\npublic abstract class AnsiOutput extends Object; // Generates ANSI encoded output, automatically attempting to detect if the terminal supports ANSI.\npublic static enum AnsiOutput.Enabled extends Enum<AnsiOutput.Enabled>; // Possible values to pass to AnsiOutput.setEnabled(org.springframework.boot.ansi.AnsiOutput.Enabled).\npublic class AnsiPropertySource extends org.springframework.core.env.PropertySource<AnsiElement>; // PropertyResolver for AnsiStyle, AnsiColor, AnsiBackground and Ansi8BitColor elements.\npublic enum AnsiStyle extends Enum<AnsiStyle> implements AnsiElement; // Ansi styles.\n", "des": "Support classes to provide ANSI color output."}
{"index": 963, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: core\n\nClasses and Interfaces: \nClass EndpointReference; // Represents an Endpoint Reference, as defined in the WS-Addressing specification.\nClass MessageAddressingProperties; // Represents a set of Message Addressing Properties, as defined in the WS-Addressing specification.\n", "des": "Core package for WS-Addressing support."}
{"index": 1629, "repo": "spring-kafka-3.0.9", "code": "Package: mock\n\nClasses and Interfaces: \npublic class MockConsumerFactory<K,V> extends Object implements ConsumerFactory<K,V>; // Support the use of MockConsumer in tests.\npublic class MockProducerFactory<K,V> extends Object implements ProducerFactory<K,V>; // Support the use of MockProducer in tests.\n", "des": "Provides classes to support the use of MockConsumer and MockProducer."}
{"index": 195, "repo": "ignite-core-2.15.0", "code": "Package: worker\n\nClasses and Interfaces: \nClass WorkersControlMXBeanImpl; // MBean that provides control of system workersRegistry.\nClass WorkersRegistry; // Workers registry.\n", "des": "System worker registry and control MBean implementation."}
{"index": 1620, "repo": "spring-kafka-3.0.9", "code": "Package: kafka\n\nSub Packages: \npackage kafka.annotation; // Package for kafka annotations\npackage kafka.aot; // Provides classes to support Spring AOT.\npackage kafka.config; // Package for kafka configuration\npackage kafka.core; // Package for kafka core components\npackage kafka.event; // Application Events.\npackage kafka.listener; // Package for kafka listeners\npackage kafka.mock; // Provides classes to support the use of MockConsumer and MockProducer.\npackage kafka.requestreply; // Provides classes for request/reply semantics.\npackage kafka.retrytopic; // Package for retryable topic handling.\npackage kafka.streams; // Package for classes related to Kafka Streams.\npackage kafka.support; // Package for kafka support\npackage kafka.transaction; // Provides classes related to transactions.\n\nClasses and Interfaces: \npublic class KafkaException extends org.springframework.core.NestedRuntimeException; // The Spring for Apache Kafka specific NestedRuntimeException implementation.\npublic static enum KafkaException.Level extends Enum<KafkaException.Level>; // The log level for KafkaException.\n", "des": "Base package for kafka"}
{"index": 1691, "repo": "spring-data-couchbase-5.1.2", "code": "Package: translation\n\nClasses and Interfaces: \npublic class JacksonTranslationService extends Object implements TranslationService, InitializingBean; // A Jackson JSON Translator that implements the TranslationService contract.\npublic interface TranslationService; // Defines a translation service to encode/decode responses into the CouchbaseStorable format.\n", "des": "This package contains a service interface to translate entities to a Couchbase storable format, and its implementations."}
{"index": 3686, "repo": "solr-core-9.3.0", "code": "Package: analysis\n\nClasses and Interfaces: \nClass BaseManagedTokenFilterFactory; // Abstract based class for implementing TokenFilterFactory objects that are managed by the REST API.\nClass ManagedStopFilterFactory; // TokenFilterFactory that uses the ManagedWordSetResource implementation for managing stop words using the REST API.\nClass ManagedSynonymFilterFactory;\nClass ManagedSynonymFilterFactory.SynonymManager; // ManagedResource implementation for synonyms, which are so specialized that it makes sense to implement this class as an inner class as it has little application outside the SynonymFilterFactory use cases.\nClass ManagedSynonymGraphFilterFactory; // TokenFilterFactory and ManagedResource implementation for doing CRUD on synonyms using the REST API.\nClass ManagedSynonymGraphFilterFactory.SynonymManager; // ManagedResource implementation for synonyms, which are so specialized that it makes sense to implement this class as an inner class as it has little application outside the SynonymFilterFactory use cases.\nClass ManagedWordSetResource; // ManagedResource implementation for managing a set of words using the REST API; useful for managing stop words and/or protected words for analysis components like the KeywordMarkerFilter.\n", "des": "Analysis-related functionality for RESTful API access to managed resources related to the schema, such as stopwords, protected words, and synonyms."}
{"index": 1523, "repo": "spring-context-6.0.11", "code": "Package: money\n\nClasses and Interfaces: \npublic class CurrencyUnitFormatter extends Object implements Formatter<javax.money.CurrencyUnit>; // Formatter for JSR-354 CurrencyUnit values, from and to currency code Strings.\npublic class Jsr354NumberFormatAnnotationFormatterFactory extends EmbeddedValueResolutionSupport implements AnnotationFormatterFactory<NumberFormat>; // Formats MonetaryAmount fields annotated with Spring's common NumberFormat annotation.\npublic class MonetaryAmountFormatter extends Object implements Formatter<javax.money.MonetaryAmount>; // Formatter for JSR-354 MonetaryAmount values, delegating to MonetaryAmountFormat.format(javax.money.MonetaryAmount) and MonetaryAmountFormat.parse(java.lang.CharSequence).\n", "des": "Integration with the JSR-354 javax.money package."}
{"index": 2616, "repo": "wicket-util-10.0.0-M1", "code": "Package: time\n\nClasses and Interfaces: \npublic class Durations extends Object; // Utility class for Duration\npublic class Instants extends Object; // Utility class for Instant\n", "des": "Utilities for working with Time(s)."}
{"index": 2269, "repo": "spring-vault-core-3.0.4", "code": "Package: core\n\nClasses and Interfaces: \npublic class MappingVaultEntityInformation<T,ID> extends PersistentEntityInformation<T,ID> implements VaultEntityInformation<T,ID>; // VaultEntityInformation implementation using a VaultPersistentEntity instance to lookup the necessary information.\npublic interface VaultEntityInformation<T,ID> extends EntityInformation<T,ID>; // Vault-specific EntityInformation.\npublic class VaultKeyValueAdapter extends AbstractKeyValueAdapter; // Vault-specific KeyValueAdapter.\npublic class VaultKeyValueTemplate extends KeyValueTemplate; // Vault-specific KeyValueTemplate.\n", "des": "Spring Vault core repository implementation."}
{"index": 551, "repo": "hadoop-common-3.3.4", "code": "Package: key\n\nClasses and Interfaces: \nInterface KeyProviderCryptoExtension.CryptoExtension; // CryptoExtension is a type of Extension that exposes methods to generate EncryptedKeys and to decrypt the same.\nInterface KeyProviderDelegationTokenExtension.DelegationTokenExtension; // DelegationTokenExtension is a type of Extension that exposes methods needed to work with Delegation Tokens.\nInterface KeyProviderExtension.Extension; // A marker interface for the KeyProviderExtension subclass implement.\nClass CachingKeyProvider; // A KeyProviderExtension implementation providing a short lived cache for KeyVersions and Metadatato avoid burst of requests to hit the underlying KeyProvider.\nClass JavaKeyStoreProvider.Factory; // The factory to create JksProviders, which is used by the ServiceLoader.\nClass JavaKeyStoreProvider.KeyMetadata; // An adapter between a KeyStore Key and our Metadata.\nClass KeyProvider; // A provider of secret key material for Hadoop applications.\nClass KeyProvider.KeyVersion; // The combination of both the key version name and the key material.\nClass KeyProvider.Metadata; // Key metadata that is associated with the key.\nClass KeyProvider.Options; // Options when creating key objects.\nClass KeyProviderCryptoExtension.EncryptedKeyVersion; // An encrypted encryption key (EEK) and related information.\nClass KeyProviderDelegationTokenExtension; // A KeyProvider extension with the ability to add a renewer's Delegation Tokens to the provided Credentials.\nClass KeyProviderExtension<E extends KeyProviderExtension.Extension>; // This is a utility class used to extend the functionality of KeyProvider, that takes a KeyProvider and an Extension.\nClass KeyProviderFactory; // A factory to create a list of KeyProvider based on the path given in a Configuration.\nClass KeyShell; // This program is the CLI utility for the KeyProvider facilities in Hadoop.\nClass UserProvider.Factory;\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1315, "repo": "groovy-all-4.0.13", "code": "Package: time\n\nClasses and Interfaces: \npublic abstract class BaseDuration extends Object implements Comparable<BaseDuration>; // Base class for date and time durations.\npublic abstract static class BaseDuration.From extends Object;\npublic class DatumDependentDuration extends BaseDuration; // DatumDependentDuration represents durations whose length in milliseconds cannot be determined without knowing the datum point.\npublic class Duration extends BaseDuration; // Duration represents time periods which have values independent of the context.\npublic class TimeCategory extends Object; // Apply a number of methods to allow convenient Date/Time manipulation,such as:\npublic class TimeDatumDependentDuration extends DatumDependentDuration; // TimeDatumDuration represents a time period which results from an arithmetic operation between a TimeDuration object and a DatumDuration object\npublic class TimeDuration extends Duration; // TimeDuration represents time periods expressed in units of hours, minutes, seconds and milliseconds.\n", "des": "Classes for easily manipulating Dates and times."}
{"index": 956, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: annotation\n\nClasses and Interfaces: \nAnnotation Type Endpoint; // Indicates that an annotated class is an \"Endpoint\" (e.g.\nAnnotation Type Namespace; // Sets up a namespace to be used in an @Endpoint method, class, or package.\nAnnotation Type Namespaces; // Sets the namespaces to be used in an @Endpoint method, class, or package.\nAnnotation Type PayloadRoot; // Marks an endpoint method as the handler for an incoming request.\nAnnotation Type PayloadRoots; // Marks an endpoint method as containing multiple PayloadRoots.\nAnnotation Type RequestPayload; // Annotation which indicates that a method parameter should be bound to the request payload.\nAnnotation Type ResponsePayload; // Annotation which indicates that a method return value should be bound to the response payload.\nAnnotation Type XPathParam; // Indicates that a method parameter should be bound to an XPath expression.\n", "des": "JDK 1.5+ annotations for Spring-WS endpoints."}
{"index": 2772, "repo": "spring-jms-6.0.11", "code": "Package: listener\n\nSub Packages: \npackage listener.adapter; // Message listener adapter mechanism that delegates to target listener methods, converting messages to appropriate message content types (such as String or byte array) that get passed into listener methods.\npackage listener.endpoint; // This package provides JCA-based endpoint management for JMS message listeners.\n\nClasses and Interfaces: \npublic abstract class AbstractJmsListeningContainer extends JmsDestinationAccessor implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.DisposableBean, org.springframework.context.SmartLifecycle; // Common base class for all containers which need to implement listening based on a JMS Connection (either shared or freshly obtained for each attempt).\npublic static class AbstractJmsListeningContainer.SharedConnectionNotInitializedException extends RuntimeException; // Exception that indicates that the initial setup of this container's shared JMS Connection failed.\npublic abstract class AbstractMessageListenerContainer extends AbstractJmsListeningContainer implements MessageListenerContainer; // Abstract base class for Spring message listener container implementations.\npublic abstract class AbstractPollingMessageListenerContainer extends AbstractMessageListenerContainer; // Base class for listener container implementations which are based on polling.\npublic class DefaultMessageListenerContainer extends AbstractPollingMessageListenerContainer; // Message listener container variant that uses plain JMS client APIs, specifically a loop of MessageConsumer.receive() calls that also allow for transactional reception of messages (registering them with XA transactions).\npublic interface MessageListenerContainer extends org.springframework.context.SmartLifecycle; // Internal abstraction used by the framework representing a message listener container.\n@FunctionalInterface public interface SessionAwareMessageListener<M extends Message>; // Variant of the standard JMS MessageListener interface, offering not only the received Message but also the underlying JMS Session object.\npublic class SimpleMessageListenerContainer extends AbstractMessageListenerContainer implements ExceptionListener; // Message listener container that uses the plain JMS client API's MessageConsumer.setMessageListener() method to create concurrent MessageConsumers for the specified listeners.\npublic interface SubscriptionNameProvider; // Interface to be implemented by message listener objects that suggest a specific name for a durable subscription that they might be registered with.\n", "des": "This package contains the base message listener container facility."}
{"index": 2424, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: elasticsearch\n\nClasses and Interfaces: \n@AutoConfiguration(after=org.springframework.boot.autoconfigure.elasticsearch.ReactiveElasticsearchClientAutoConfiguration.class) @ConditionalOnClass({org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient.class) @ConditionalOnEnabledHealthIndicator(\"elasticsearch\") public class ElasticsearchReactiveHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.data.elasticsearch.ElasticsearchReactiveHealthIndicator,org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient>; // Auto-configuration for ElasticsearchReactiveHealthIndicator using the ReactiveElasticsearchClient.\n", "des": "Auto-configuration for actuator Elasticsearch concerns dependent on Spring Data."}
{"index": 2864, "repo": "spring-integration-core-6.1.2", "code": "Package: advice\n\nClasses and Interfaces: \npublic abstract class AbstractHandleMessageAdvice extends IntegrationObjectSupport implements HandleMessageAdvice; // The base HandleMessageAdvice for advices which can be applied only for the MessageHandler.handleMessage(Message).\npublic abstract class AbstractRequestHandlerAdvice extends IntegrationObjectSupport implements org.aopalliance.intercept.MethodInterceptor; // Base class for MessageHandler advice classes.\nprotected static interface AbstractRequestHandlerAdvice.ExecutionCallback; // Called by subclasses in doInvoke() to proceed() the invocation.\nprotected static final class AbstractRequestHandlerAdvice.ThrowableHolderException extends RuntimeException;\npublic class CacheRequestHandlerAdvice extends AbstractRequestHandlerAdvice implements org.springframework.beans.factory.SmartInitializingSingleton; // The AbstractRequestHandlerAdvice implementation for caching AbstractReplyProducingMessageHandler.RequestHandler#handleRequestMessage(Message) results.\npublic class ContextHolderRequestHandlerAdvice extends AbstractRequestHandlerAdvice; // An AbstractRequestHandlerAdvice implementation to store and reset a value into/from some context (e.g.\npublic class ErrorMessageSendingRecoverer extends ErrorMessagePublisher implements org.springframework.retry.RecoveryCallback<Object>; // A RecoveryCallback that sends the final throwable as an ErrorMessage after retry exhaustion.\npublic static class ErrorMessageSendingRecoverer.RetryExceptionNotAvailableException extends org.springframework.messaging.MessagingException;\npublic class ExpressionEvaluatingRequestHandlerAdvice extends AbstractRequestHandlerAdvice; // Used to advise MessageHandlers.\npublic static class ExpressionEvaluatingRequestHandlerAdvice.MessageHandlingExpressionEvaluatingAdviceException extends org.springframework.messaging.MessagingException;\npublic interface HandleMessageAdvice extends org.aopalliance.intercept.MethodInterceptor; // The marker MethodInterceptor interface extension to distinguish advices for some reason.\npublic class HandleMessageAdviceAdapter extends Object implements HandleMessageAdvice; // A HandleMessageAdvice implementation with a plain delegation to the provided MethodInterceptor.\npublic class IdempotentReceiverInterceptor extends AbstractHandleMessageAdvice; // The MethodInterceptor implementation for the Idempotent Receiver E.I.\npublic class RateLimiterRequestHandlerAdvice extends AbstractRequestHandlerAdvice; // An AbstractRequestHandlerAdvice extension for a rate limiting to service method calls.\n", "des": "Provides classes that are used to advise MessageHandlers with cross-cutting concerns."}
{"index": 2773, "repo": "spring-jms-6.0.11", "code": "Package: adapter\n\nClasses and Interfaces: \npublic abstract class AbstractAdaptableMessageListener extends Object implements MessageListener, SessionAwareMessageListener<Message>; // An abstract JMS MessageListener adapter providing the necessary infrastructure to extract the payload of a JMS Message.\npublic class JmsResponse<T> extends Object; // Return type of any JMS listener method used to indicate the actual response destination alongside the response itself.\npublic class ListenerExecutionFailedException extends JmsException; // Exception to be thrown when the execution of a listener method failed.\npublic class MessageListenerAdapter extends AbstractAdaptableMessageListener implements SubscriptionNameProvider; // Message listener adapter that delegates the handling of messages to target listener methods via reflection, with flexible message type conversion.\npublic class MessagingMessageListenerAdapter extends AbstractAdaptableMessageListener implements SubscriptionNameProvider; // A MessageListener adapter that invokes a configurable InvocableHandlerMethod.\npublic class ReplyFailureException extends JmsException; // Exception to be thrown when the reply of a message failed to be sent.\n", "des": "Message listener adapter mechanism that delegates to target listener methods, converting messages to appropriate message content types (such as String or byte array) that get passed into listener methods."}
{"index": 300, "repo": "pdfbox-3.0.0-beta1", "code": "Package: state\n\nClasses and Interfaces: \nClass PDExtendedGraphicsState; // An extended graphics state dictionary.\nClass PDGraphicsState; // The current state of the graphics parameters when executing a content stream.\nClass PDSoftMask; // Soft mask.\nClass PDTextState; // This class will hold the current state of the text parameters when executing a content stream.\nEnum RenderingIntent; // Rendering intent.\nEnum RenderingMode; // Text Rendering Mode.\n", "des": "This package deals with graphics states within the PDF document."}
{"index": 898, "repo": "commons-jcs3-core-3.1", "code": "Package: control\n\nClasses and Interfaces: \nClass CompositeCache<K,V>; // This is the primary hub for a single cache/region.\nClass CompositeCacheConfigurator; // This class configures JCS based on a properties object.\nClass CompositeCacheManager; // Manages a composite cache.\n", "des": "The primary cache classes and the hub."}
{"index": 2728, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: kafka\n\nSub Packages: \npackage kafka.builder; // Builders for Apache Kafka item reader and writer.\n\nClasses and Interfaces: \npublic class KafkaItemReader<K,V> extends AbstractItemStreamItemReader<V>; // An ItemReader implementation for Apache Kafka.\npublic class KafkaItemWriter<K,T> extends KeyValueItemWriter<K,T>; // An ItemWriter implementation for Apache Kafka using a KafkaTemplate with default topic configured.\n", "des": "Apache Kafka related readers and writers"}
{"index": 3368, "repo": "opencms-core-15.0", "code": "Package: directedit\n\nClasses and Interfaces: \nInterface I_CmsDirectEditProvider; // Provides the methods to generate the \"direct edit\" HTML fragments that are inserted in the generated pages in offline mode.\nInterface I_CmsEditHandler; // Edit handlers are optional and can be configured within the XSD-schema of a resource type.\nClass A_CmsDirectEditProvider; // Basic functions for direct edit providers.\nClass CmsAdvancedDirectEditProvider; // Provider for the OpenCms AdvancedDirectEdit.\nClass CmsDateSeriesEditHandler; // Special edit handler for contents that define multiple instances in a date series.\nClass CmsDirectEditButtonSelection; // Constants to indicate which direct edit buttons should be displayed for a direct edit resource if the user has the permissions.\nClass CmsDirectEditDefaultProvider; // Provider for the OpenCms default graphical \"direct edit\" buttons.\nClass CmsDirectEditJQueryProvider; // Provider for the OpenCms graphical \"direct edit\" buttons.\nClass CmsDirectEditJspIncludeProvider; // Direct edit provider that uses the same JSP include based logic that has been the default before the 6.2.3 release.\nClass CmsDirectEditMode; // Constants to indicate which mode to use for placement of the HTML that generates the direct edit buttons.\nClass CmsDirectEditParams; // A parameter set to start a direct edit element, for internal use only.\nClass CmsDirectEditPermissions; // Constants to indicate the direct edit permissions of a user for a VFS resource, used to describe if and how to show the direct edit buttons for the resource.\nClass CmsDirectEditResourceInfo; // Contains information about a resource that is direct edited.\nClass CmsDirectEditTextButtonProvider; // Creates HTML for simple text based direct edit buttons.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsAdvancedDirectEditProvider.SitemapDirectEditPermissions; // Direct edit permissions according to the sitemap configuration.\n", "des": "Used to control the generation of the HTML for the \"direct edit\" buttons."}
{"index": 1480, "repo": "tribuo-core-4.3.1", "code": "Package: ensemble\n\nClasses and Interfaces: \npublic class BaggingTrainer<T extends Output<T>> extends Object implements Trainer<T>; // A Trainer that wraps another trainer and produces a bagged ensemble.\npublic interface EnsembleCombiner<T extends Output<T>> extends com.oracle.labs.mlrg.olcut.config.Configurable, ProtoSerializable<org.tribuo.protos.core.EnsembleCombinerProto>, com.oracle.labs.mlrg.olcut.provenance.Provenancable<com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance>, Serializable; // An interface for combining predictions.\npublic class EnsembleExcuse<T extends Output<T>> extends Excuse<T>; // An Excuse which has a List of excuses for each of the ensemble members.\npublic abstract class EnsembleModel<T extends Output<T>> extends Model<T>; // A model which contains a list of other Models.\npublic final class WeightedEnsembleModel<T extends Output<T>> extends EnsembleModel<T> implements ONNXExportable; // An ensemble model that uses weights to combine the ensemble member predictions.\n", "des": "Provides an interface for model prediction combinations, two base classes for ensemble models, a base class for ensemble excuses, and a Bagging implementation."}
{"index": 2432, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: jmx\n\nClasses and Interfaces: \n@AutoConfiguration(after={org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration.class,EndpointAutoConfiguration.class}) @EnableConfigurationProperties({JmxEndpointProperties.class,org.springframework.boot.autoconfigure.jmx.JmxProperties.class}) @ConditionalOnProperty(prefix=\"spring.jmx\", name=\"enabled\", havingValue=\"true\") public class JmxEndpointAutoConfiguration extends Object; // Auto-configuration for JMX @Endpoint support.\n@ConfigurationProperties(\"management.endpoints.jmx\") public class JmxEndpointProperties extends Object; // Configuration properties for JMX export of endpoints.\npublic static class JmxEndpointProperties.Exposure extends Object;\n", "des": "Actuator JMX endpoint auto-configuration."}
{"index": 3291, "repo": "opencms-core-15.0", "code": "Package: util\n\nClasses and Interfaces: \nInterface I_CmsFormatterInfo; // Common interface for accessing formatter / resource type infos in JSPs.\nInterface I_CmsJspDeviceSelector; // This interface supports the basic functionality for the device detection.\nClass A_CmsJspCustomContextBean; // Base class for context sensitive custom beans that supports creation via CmsJspStandardContextBean.getBean(String className).\nClass CmsContainerTypeInfoWrapper; // Wrapper bean for querying information related to a container type in JSPs.\nClass CmsDynamicFunctionBeanWrapper; // A wrapper class for using dynamic function beans inside JSPs via the EL.\nClass CmsDynamicFunctionFormatWrapper; // Wrapper class for dynamic function formats which can be used from JSP EL.\nClass CmsErrorBean; // Class to display the error dialog.\nClass CmsFormatterInfoWrapper; // Wrapper class for accessing formatter information from JSPs.\nClass CmsFunctionRenderer; // Class used for rendering dynamic functions (v2).\nClass CmsJspCategoryAccessBean; // Bean for easy access to categories of a resource in JSPs.\nClass CmsJspContainerPageWrapper; // Wrapper for using container pages in JSPs.\nClass CmsJspContentAccessBean; // Allows access to the individual elements of an XML content, usually used inside a loop of a <cms:contentload> tag.\nClass CmsJspContentAccessValueWrapper; // Allows direct access to XML content values, with possible iteration of sub-nodes.\nClass CmsJspContentAccessValueWrapper.NullValueInfo; // The null value info, used to generate RDFA and DND annotations for null values.\nClass CmsJspContentAttachmentsBean; // Allows accessing 'attachments' of an XML content via the EL in JSP code, which in OpenCms are defined as the contents of its detail-only containers.\nClass CmsJspContentLoadBean; // Allows JSP access to the results of a <cms:contentload ...\nClass CmsJspDateSeriesBean; // Bean for easy access to information of an event series.\nClass CmsJspDeviceSelector; // This class provides the detection for different devices, so that the <cms:device type=\"...\">-Tag can detect which device sends the HTTP request.\nClass CmsJspDeviceSelectorDesktopMobileTablet; // Device selector class which distinguishes between the cases \"desktop\", \"mobile\" and \"tablet\".\n", "des": "Utility classes to be used for JSP pages."}
{"index": 780, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: ga\n\nClasses and Interfaces: \nClass IrishAnalyzer; // Analyzer for Irish.\nClass IrishLowerCaseFilter; // Normalises token text to lower case, handling t-prothesis and n-eclipsis (i.e., that 'nAthair' should become 'n-athair')\nClass IrishLowerCaseFilterFactory; // Factory for IrishLowerCaseFilter.\n", "des": "Analyzer for Irish."}
{"index": 321, "repo": "kafka-clients-3.5.0", "code": "Package: config\n\nSub Packages: \npackage config.provider; // Provides a pluggable interface and some implementations for late-binding in configuration values.\n\nClasses and Interfaces: \nInterface ConfigChangeCallback; // A callback passed to ConfigProvider for subscribing to changes.\nInterface ConfigDef.Recommender; // This is used by the ConfigDef.validate(Map) to get valid values for a configuration given the current configuration values in order to perform full configuration validation and visibility modification.\nInterface ConfigDef.Validator; // Validation logic the user may provide to perform single configuration validation.\nClass AbstractConfig; // A convenient base class for configurations to extend.\nClass Config;\nClass ConfigData; // Configuration data from a ConfigProvider.\nClass ConfigDef; // This class is used for specifying the set of expected configurations.\nClass ConfigDef.CaseInsensitiveValidString;\nClass ConfigDef.CompositeValidator;\nClass ConfigDef.ConfigKey;\nClass ConfigDef.LambdaValidator;\nClass ConfigDef.ListSize;\nClass ConfigDef.NonEmptyString;\nClass ConfigDef.NonEmptyStringWithoutControlChars;\nClass ConfigDef.NonNullValidator;\nClass ConfigDef.Range; // Validation logic for numeric ranges\nClass ConfigDef.ValidList;\nClass ConfigDef.ValidString;\nClass ConfigResource; // A class representing resources that have configs.\nClass ConfigTransformer; // This class wraps a set of ConfigProvider instances and uses them to perform transformations.\nClass ConfigTransformerResult; // The result of a transformation from ConfigTransformer.\nClass ConfigValue;\nClass LogLevelConfig; // This class holds definitions for log level configurations related to Kafka's application logging.\nClass SaslConfigs;\nClass SecurityConfig; // Contains the common security config for SSL and SASL\nClass SslConfigs;\nClass TopicConfig; // Keys that can be used to configure a topic.\nEnum ConfigDef.Importance; // The importance level for a configuration\nEnum ConfigDef.Type; // The config types\nEnum ConfigDef.Width; // The width of a configuration value\nEnum ConfigResource.Type; // Type of resource.\nEnum SslClientAuth; // Describes whether the server should require or request client authentication.\nClass ConfigException; // Thrown if the user supplies an invalid configuration\n", "des": "Provides common mechanisms for defining, parsing, validating, and documenting user-configurable parameters."}
{"index": 274, "repo": "nutch-2.4", "code": "Package: nutch\n\nClasses and Interfaces: \nClass CCIndexingFilter; // Adds basic searchable fields to a document.\nClass CCParseFilter; // Adds metadata identifying the Creative Commons license used, if any.\nClass CCParseFilter.Walker; // Walks DOM tree, looking for RDF in comments and licenses in anchors.\n", "des": "Sample plugins that parse and index Creative Commons medadata."}
{"index": 232, "repo": "nutch-2.4", "code": "Package: auth\n\nClasses and Interfaces: \nInterface AuthenticatedWebPage; // Marker interface for secured pages.\nClass AuthorizationStrategy; // Authorization strategy to check whether to allow a page or not.\nClass SignInPage; // Sign in page implementation.\nClass SignInSession; // Checks for whether authenticate or not.\nClass User; // User bean for authentication.\n", "des": "Contains authorization classes for Web UI"}
{"index": 2365, "repo": "camel-base-4.0.0-RC1", "code": "Package: properties\n\nClasses and Interfaces: \npublic abstract class AbstractLocationPropertiesSource extends org.apache.camel.support.service.ServiceSupport implements org.apache.camel.spi.LoadablePropertiesSource, LocationPropertiesSource; // Base class for LoadablePropertiesSource which can load properties from a source such as classpath or file system.\npublic class ClasspathPropertiesSource extends AbstractLocationPropertiesSource implements org.apache.camel.Ordered;\npublic class DefaultPropertiesFunctionResolver extends org.apache.camel.support.service.ServiceSupport implements PropertiesFunctionResolver, org.apache.camel.CamelContextAware, org.apache.camel.NonManagedService, org.apache.camel.StaticService; // Default PropertiesFunctionResolver.\npublic class DefaultPropertiesLookup extends Object implements PropertiesLookup; // Default PropertiesLookup which lookup properties from a Properties with all existing properties.\npublic class DefaultPropertiesParser extends Object implements PropertiesParser; // A parser to parse a string which contains property placeholders.\npublic class DefaultPropertiesSourceFactory extends Object implements org.apache.camel.spi.PropertiesSourceFactory;\npublic class EnvPropertiesFunction extends Object implements org.apache.camel.spi.PropertiesFunction; // A PropertiesFunction that lookup the property value from OS environment variables.\npublic class FilePropertiesSource extends AbstractLocationPropertiesSource implements org.apache.camel.Ordered;\npublic interface LocationPropertiesSource extends org.apache.camel.spi.PropertiesSource; // A PropertiesSource which was created from a PropertiesLocation.\n@ManagedResource(description=\"Managed PropertiesComponent\") @JdkService(\"properties-component-factory\") @Configurer(bootstrap=true) public class PropertiesComponent extends org.apache.camel.support.service.ServiceSupport implements org.apache.camel.spi.PropertiesComponent, org.apache.camel.StaticService, org.apache.camel.CamelContextAware; // The properties component allows you to use property placeholders in Camel.\npublic class PropertiesComponentConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements org.apache.camel.spi.GeneratedPropertyConfigurer, org.apache.camel.spi.PropertyConfigurerGetter; // Generated by camel build tools - do NOT edit this file!\npublic interface PropertiesFunctionResolver; // Resolver for built-in and custom PropertiesFunction.\npublic final class PropertiesLocation extends Object;\n", "des": "The Properties Component for lookup of property placeholders for endpoint URI."}
{"index": 1785, "repo": "spring-integration-file-6.1.2", "code": "Package: locking\n\nClasses and Interfaces: \npublic abstract class AbstractFileLockerFilter extends AbstractFileListFilter<File> implements FileLocker; // Convenience base class for implementing FileLockers that check a lock before accepting a file.\npublic class NioFileLocker extends AbstractFileLockerFilter; // File locking strategy that uses java.nio.\n", "des": "Provides classes supporting file locking."}
{"index": 776, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: eu\n\nClasses and Interfaces: \nClass BasqueAnalyzer; // Analyzer for Basque.\n", "des": "Analyzer for Basque."}
{"index": 562, "repo": "hadoop-common-3.3.4", "code": "Package: metrics2\n\nSub Packages: \npackage metrics2.annotation; // Annotation interfaces for metrics instrumentation\npackage metrics2.filter; // Builtin metrics filters (to be used in metrics config files)\npackage metrics2.lib; // A collection of library classes for implementing metrics sources\npackage metrics2.sink; // Builtin metrics sinks\npackage metrics2.util; // General helpers for implementing source and sinks\n\nClasses and Interfaces: \nInterface MetricsCollector; // The metrics collector interface\nInterface MetricsInfo; // Interface to provide immutable metainfo for metrics.\nInterface MetricsPlugin; // The plugin interface for the metrics framework\nInterface MetricsRecord; // An immutable snapshot of metrics with a timestamp\nInterface MetricsSink; // The metrics sink interface.\nInterface MetricsSource; // The source of metrics information.\nInterface MetricsSystem.Callback; // The metrics system callback interface (needed for proxies.)\nInterface MetricsSystemMXBean; // The JMX interface to the metrics system\nInterface MetricsVisitor; // A visitor interface for metrics\nClass AbstractMetric; // The immutable metric\nClass MetricsFilter; // The metrics filter interface.\nClass MetricsJsonBuilder; // Build a JSON dump of the metrics.\nClass MetricsRecordBuilder; // The metrics record builder interface\nClass MetricsSystem; // The metrics system interface.\nClass MetricsSystem.AbstractCallback; // Convenient abstract class for implementing callback interface\nClass MetricsTag; // Immutable tag for metrics (for grouping on host/queue/username etc.)\nClass MetricStringBuilder; // Build a string dump of the metrics.\nEnum MetricType;\nClass MetricsException; // A general metrics exception wrapper\n", "des": "Metrics 2.0"}
{"index": 1405, "repo": "spring-boot-actuator-3.1.1", "code": "Package: jms\n\nClasses and Interfaces: \npublic class JmsHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for a JMS ConnectionFactory.\n", "des": "Actuator support for JMS."}
{"index": 1888, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: ldap\n\nClasses and Interfaces: \npublic abstract class AbstractLdapRealm extends AuthorizingRealm; // A Realm that authenticates with an LDAP server to build the Subject for a user.\npublic class DefaultLdapRealm extends AuthorizingRealm; // An LDAP Realm implementation utilizing Sun's/Oracle's JNDI API as an LDAP API.\npublic class JndiLdapContextFactory extends Object implements LdapContextFactory; // LdapContextFactory implementation using the default Sun/Oracle JNDI Ldap API, utilizing JNDI environment properties and an InitialContext.\npublic class JndiLdapRealm extends DefaultLdapRealm;\npublic interface LdapContextFactory; // Interface that encapsulates the creation of LdapContext objects that are used by DefaultLdapRealms to perform authentication attempts and query for authorization data.\npublic final class LdapUtils extends Object; // Utility class providing static methods to make working with LDAP easier.\n", "des": "Realms that acquire security data from an LDAP (Lightweight Directory Access Protocol) server utilizing LDAP/Naming APIs."}
{"index": 184, "repo": "ignite-core-2.15.0", "code": "Package: ipc\n\nSub Packages: \npackage ipc.loopback; // Loopback IPC utility classes.\n\nClasses and Interfaces: \nInterface IpcEndpoint; // IPC endpoint used for point-to-point communication.\nInterface IpcServerEndpoint; // IPC server endpoint that is capable for client connections accepting.\nClass IpcEndpointFactory; // endpoint factory for inter-process communication.\nClass IpcToNioAdapter<T>; // Allows to re-use existing GridNioFilters on IPC (specifically shared memory IPC) communications.\nEnum IpcEndpointType; // IPC endpoint type.\nClass IpcEndpointBindException; // Represents exception occurred during IPC endpoint binding.\n", "des": "IPC utility classes."}
{"index": 3902, "repo": "solr-solrj-9.3.0", "code": "Package: util\n\nClasses and Interfaces: \nInterface Cache<K,​V>;\nInterface Compressor;\nInterface ContentStream;\nInterface DataEntry; // This represents a data entry in the payload/stream.\nInterface DataEntry.EntryListener;\nInterface DataEntry.FastDecoder;\nInterface ExecutorUtil.InheritableThreadLocalProvider; // Any class which wants to carry forward the threadlocal values to the threads run by threadpools must implement this interface and the implementation should be registered here\nInterface JavaBinCodec.ObjectResolver; // Allows extension of JavaBinCodec to support serialization of arbitrary data types.\nInterface JavaBinCodec.WritableDocFields;\nInterface JsonRecordReader.Handler; // Implement this interface to stream records as and when one is found.\nInterface JsonTextWriter;\nInterface ReflectMapWriter;\nInterface RetryUtil.BooleanRetryCmd;\nInterface RetryUtil.RetryCmd;\nInterface TextWriter;\nInterface Utf8CharSequence; // A byte[] backed String\nInterface Utils.InputStreamConsumer<T>;\nInterface ValidatingJsonMap.PredicateWithErrMsg<T>;\nInterface XML.Writable;\nClass ByteArrayUtf8CharSequence; // A mutable byte[] backed Utf8CharSequence.\nClass BytesBlock;\nClass BytesOutputStream;\nClass BytesOutputStream.Bytes;\nClass ByteUtils;\nClass CollectionUtil; // Methods for creating collections with exact sizes, and other convenience methods\nClass CommandOperation;\nClass CommonTestInjection; // Allows random faults to be injected in running code during test runs across all solr packages.\nClass ContentStreamBase; // Three concrete implementations for ContentStream - one for File/URL/String\nClass ContentStreamBase.ByteArrayStream; // Construct a ContentStream from a File\nClass ContentStreamBase.FileStream; // Construct a ContentStream from a File\nClass ContentStreamBase.StringStream; // Construct a ContentStream from a String\nClass ContentStreamBase.URLStream; // Construct a ContentStream from a URL This uses a URLConnection to get the content stream\nClass DataInputInputStream; // An abstract DataInput that extends InputStream\nClass DOMUtil;\nClass ExecutorUtil;\nClass ExecutorUtil.MDCAwareThreadPoolExecutor;\nClass FastInputStream; // Single threaded buffered InputStream Internal Solr use only, subject to change.\nClass FastJavaBinDecoder;\n", "des": "Common utility classes reused on both clients & server."}
{"index": 1051, "repo": "commons-io-2.13.0", "code": "Package: buffer\n\nClasses and Interfaces: \nClass CircularBufferInputStream; // Implements a buffered input stream, which is internally based on a CircularByteBuffer.\nClass CircularByteBuffer; // A buffer, which doesn't need reallocation of byte arrays, because it reuses a single byte array.\nClass PeekableInputStream; // Implements a buffered input stream, which allows to peek into the buffers first bytes.\n", "des": "Provides implementations of buffered input classes, such as CircularBufferInputStream and PeekableInputStream."}
{"index": 2541, "repo": "spring-security-core-6.1.2", "code": "Package: jackson2\n\nClasses and Interfaces: \npublic class CoreJackson2Module extends com.fasterxml.jackson.databind.module.SimpleModule; // Jackson module for spring-security-core.\npublic final class SecurityJackson2Modules extends Object; // This utility class will find all the SecurityModules in classpath.\npublic abstract class SimpleGrantedAuthorityMixin extends Object; // Jackson Mixin class helps in serialize/deserialize SimpleGrantedAuthority.\n", "des": "Mix-in classes to add Jackson serialization support."}
{"index": 1064, "repo": "avro-1.11.2", "code": "Package: reflect\n\nClasses and Interfaces: \nClass CustomEncoding<T>; // Expert: a custom encoder and decoder that writes an object directly to avro.\nClass DateAsLongEncoding; // This encoder/decoder writes a java.util.Date object as a long to avro and reads a Date object from long.\nClass MapEntry<K,V>; // Use org.apache.avro.util.MapEntry\nClass ReflectData; // Utilities to use existing Java classes and interfaces via reflection.\nClass ReflectData.AllowNull; // ReflectData implementation that permits null field values.\nClass ReflectDatumReader<T>; // DatumReader for existing classes via Java reflection.\nClass ReflectDatumWriter<T>; // DatumWriter for existing classes via Java reflection.\nClass ReflectionUtil; // A few utility methods for using @link{java.misc.Unsafe}, mostly for private use.\nAnnotation Type AvroAlias; // Adds the given name and space as an alias to the schema.\nAnnotation Type AvroAliases;\nAnnotation Type AvroDefault; // Specifies a default value for a field as a JSON string.\nAnnotation Type AvroDoc; // Sets the avrodoc for this java field.\nAnnotation Type AvroEncode; // Expert: Fields with this annotation are encoded using the given custom encoder.\nAnnotation Type AvroIgnore; // Marks a field as transient.\nAnnotation Type AvroMeta; // Adds the given key:Value pair as metadata into the schema, at the corresponding node.\nAnnotation Type AvroMeta.AvroMetas;\nAnnotation Type AvroName; // Sets the avroname for this java field.\nAnnotation Type AvroSchema; // Declares that a Java type should have a specified Avro schema, overriding the normally inferred schema.\nAnnotation Type Nullable; // Declares that null is a valid value for a Java type.\nAnnotation Type Stringable; // Declares that a class or field should be represented by an Avro string.\nAnnotation Type Union; // Declares that a Java type should be represented by an Avro union schema.\n", "des": "Use Java reflection to generate schemas and protocols for existing classes."}
{"index": 779, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: fr\n\nClasses and Interfaces: \nClass FrenchAnalyzer; // Analyzer for French language.\nClass FrenchLightStemFilter; // A TokenFilter that applies FrenchLightStemmer to stem French words.\nClass FrenchLightStemFilterFactory; // Factory for FrenchLightStemFilter.\nClass FrenchLightStemmer; // Light Stemmer for French.\nClass FrenchMinimalStemFilter; // A TokenFilter that applies FrenchMinimalStemmer to stem French words.\nClass FrenchMinimalStemFilterFactory; // Factory for FrenchMinimalStemFilter.\nClass FrenchMinimalStemmer; // Light Stemmer for French.\n", "des": "Analyzer for French."}
{"index": 2330, "repo": "spring-boot-3.1.1", "code": "Package: servlet\n\nClasses and Interfaces: \npublic abstract class ApplicationContextRequestMatcher<C> extends Object implements org.springframework.security.web.util.matcher.RequestMatcher; // ApplicationContext backed RequestMatcher.\n", "des": "Classes and utilities for Servlet-based Spring Security."}
{"index": 1790, "repo": "spring-integration-file-6.1.2", "code": "Package: server\n\nClasses and Interfaces: \npublic abstract class FileServerEvent extends org.springframework.integration.events.IntegrationEvent; // Base class for file server events.\n", "des": "Provides classes related to file servers."}
{"index": 906, "repo": "commons-compress-1.23.0", "code": "Package: arj\n\nClasses and Interfaces: \nClass ArjArchiveEntry; // An entry in an ARJ archive.\nClass ArjArchiveEntry.HostOs; // The known values for HostOs.\nClass ArjArchiveInputStream; // Implements the \"arj\" archive format as an InputStream.\n", "des": "Provides stream classes for reading archives using the ARJ format."}
{"index": 2861, "repo": "spring-integration-core-6.1.2", "code": "Package: gateway\n\nClasses and Interfaces: \npublic class AnnotationGatewayProxyFactoryBean<T> extends GatewayProxyFactoryBean<T>; // A GatewayProxyFactoryBean extension for Java configuration.\npublic class GatewayMessageHandler extends AbstractReplyProducingMessageHandler implements ManageableLifecycle; // The AbstractReplyProducingMessageHandler implementation for mid-flow Gateway.\npublic class GatewayMethodMetadata extends Object; // Represents the metadata associated with a Gateway method.\npublic class GatewayProxyFactoryBean<T> extends AbstractEndpoint implements TrackableComponent, org.springframework.beans.factory.FactoryBean<T>, org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.BeanClassLoaderAware, IntegrationManagement; // Generates a proxy for the provided service interface to enable interaction with messaging components without application code being aware of them allowing for POJO-style interaction.\n@IntegrationManagedResource public abstract class MessagingGatewaySupport extends AbstractEndpoint implements TrackableComponent, IntegrationInboundManagement, IntegrationPattern; // A convenient base class for connecting application code to MessageChannels for sending, receiving, or request-reply operations.\nprotected static class MessagingGatewaySupport.ConvertingMessagingTemplate extends MessagingTemplate; // The MessagingTemplate extension to increase MessagingGatewaySupport.ConvertingMessagingTemplate.doConvert(Object, Map, MessagePostProcessor) visibility to get access to the request message from an observation context.\npublic final class MethodArgsHolder extends Object; // Simple wrapper class containing a Method and an object array containing the arguments for an invocation of that method.\npublic interface MethodArgsMessageMapper extends InboundMessageMapper<MethodArgsHolder>; // Implementations of this interface are InboundMessageMappers that map a MethodArgsHolder to a Message.\n@FunctionalInterface public interface RequestReplyExchanger; // Interface for a request/reply Message exchange.\n", "des": "Provides classes supporting messaging gateways."}
{"index": 3372, "repo": "opencms-core-15.0", "code": "Package: threads\n\nClasses and Interfaces: \nClass A_CmsProgressThread; // Abstract thread to keep track of operation progress.\nClass CmsDatabaseImportThread; // Imports an OpenCms export file into the VFS.\nClass CmsExportThread; // Exports selected resources of the OpenCms into an OpenCms export file.\nClass CmsExternalLinksValidatorThread; // Thread for extern link validation.\nClass CmsModuleDeleteThread; // Deletes a module.\nClass CmsModuleReplaceThread; // Replaces a module.\nClass CmsProjectDeleteThread; // Deletes a project.\nClass CmsRelationsValidatorThread; // A report thread for the relations validator.\nClass CmsSynchronizeThread; // Synchronizes a VFS folder with a folder form the \"real\" file system.\nClass CmsXmlContentRepairSettings; // Settings object that provides the settings to repair XML content resources in the OpenCms virtual file system (VFS).\nClass CmsXmlContentRepairThread; // Repairs XML content resources according to their XSD using the corresponding settings object.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "A collection of thread classes that are used in the OpenCms Workplace, usually in connection with a report."}
{"index": 1726, "repo": "spring-jdbc-6.0.11", "code": "Package: namedparam\n\nClasses and Interfaces: \npublic abstract class AbstractSqlParameterSource extends Object implements SqlParameterSource; // Abstract base class for SqlParameterSource implementations.\npublic class BeanPropertySqlParameterSource extends AbstractSqlParameterSource; // SqlParameterSource implementation that obtains parameter values from bean properties of a given JavaBean object.\npublic class EmptySqlParameterSource extends Object implements SqlParameterSource; // A simple empty implementation of the SqlParameterSource interface.\npublic class MapSqlParameterSource extends AbstractSqlParameterSource; // SqlParameterSource implementation that holds a given Map of parameters.\npublic class NamedParameterJdbcDaoSupport extends JdbcDaoSupport; // Extension of JdbcDaoSupport that exposes a NamedParameterJdbcTemplate as well.\npublic interface NamedParameterJdbcOperations; // Interface specifying a basic set of JDBC operations allowing the use of named parameters rather than the traditional '?' placeholders.\npublic class NamedParameterJdbcTemplate extends Object implements NamedParameterJdbcOperations; // Template class with a basic set of JDBC operations, allowing the use of named parameters rather than traditional '?' placeholders.\npublic abstract class NamedParameterUtils extends Object; // Helper methods for named parameter parsing.\npublic class ParsedSql extends Object; // Holds information about a parsed SQL statement.\npublic interface SqlParameterSource; // Interface that defines common functionality for objects that can offer parameter values for named SQL parameters, serving as argument for NamedParameterJdbcTemplate operations.\npublic abstract class SqlParameterSourceUtils extends Object; // Class that provides helper methods for the use of SqlParameterSource, in particular with NamedParameterJdbcTemplate.\n", "des": "JdbcTemplate variant with named parameter support."}
{"index": 2048, "repo": "spring-boot-loader-3.1.1", "code": "Package: data\n\nClasses and Interfaces: \npublic interface RandomAccessData; // Interface that provides read-only random access to some underlying data.\npublic class RandomAccessDataFile extends Object implements RandomAccessData; // RandomAccessData implementation backed by a RandomAccessFile.\n", "des": "Classes and interfaces to allow random access to a block of data."}
{"index": 1779, "repo": "spring-integration-file-6.1.2", "code": "Package: file\n\nSub Packages: \npackage file.aggregator; // Provides support classes for file-based aggregation logic.\npackage file.config; // Provides classes for configuration - parsers, namespace handlers, factory beans.\npackage file.dsl; // Provides File Components support for Spring Integration Java DSL.\npackage file.event; // ApplicationEvents generated by the file module.\npackage file.filters; // Provides classes supporting file filtering.\npackage file.locking; // Provides classes supporting file locking.\npackage file.remote; // Base package for supporting remote files.\npackage file.splitter; // Provides implementations of AbstractMessageSplitter.\npackage file.support; // Provides various support classes used across Spring Integration File Components.\npackage file.tail; // Classes used for tailing file system files.\npackage file.transformer; // Provides classes supporting the transformation of file contents to messages.\n\nClasses and Interfaces: \npublic class DefaultDirectoryScanner extends Object implements DirectoryScanner; // Default directory scanner and base class for other directory scanners.\npublic class DefaultFileNameGenerator extends org.springframework.integration.util.AbstractExpressionEvaluator implements FileNameGenerator; // Default implementation of the filename generator strategy.\npublic interface DirectoryScanner; // Strategy for scanning directories.\npublic abstract class FileHeaders extends Object; // Pre-defined header names to be used when storing or retrieving File-related values to/from integration Message Headers.\npublic interface FileLocker; // A FileLocker is a strategy that can ensure that files are only processed a single time.\n@FunctionalInterface public interface FileNameGenerator; // Strategy interface for generating a file name from a message.\npublic class FileReadingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<File> implements org.springframework.integration.support.management.ManageableLifecycle; // MessageSource that creates messages from a file system directory.\npublic static enum FileReadingMessageSource.WatchEventType extends Enum<FileReadingMessageSource.WatchEventType>;\npublic class FileWritingMessageHandler extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements org.springframework.integration.support.management.ManageableLifecycle, org.springframework.integration.handler.MessageTriggerAction; // A MessageHandler implementation that writes the Message payload to a file.\n", "des": "Base package for File support."}
{"index": 1544, "repo": "spring-context-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic final class CronExpression extends Object; // Representation of a crontab expression that can calculate the next time it matches.\n@Deprecated(since=\"5.3\", forRemoval=true) public class CronSequenceGenerator extends Object;\npublic class CronTrigger extends Object implements Trigger; // Trigger implementation for cron expressions.\npublic class DelegatingErrorHandlingRunnable extends Object implements Runnable; // Runnable wrapper that catches any exception or error thrown from its delegate Runnable and allows an ErrorHandler to handle it.\npublic class MethodInvokingRunnable extends org.springframework.beans.support.ArgumentConvertingMethodInvoker implements Runnable, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Adapter that implements the Runnable interface as a configurable method invocation based on Spring's MethodInvoker.\npublic class PeriodicTrigger extends Object implements Trigger; // A trigger for periodic task execution.\npublic class ScheduledMethodRunnable extends Object implements Runnable; // Variant of MethodInvokingRunnable meant to be used for processing of no-arg scheduled methods.\npublic class SimpleTriggerContext extends Object implements TriggerContext; // Simple data holder implementation of the TriggerContext interface.\npublic abstract class TaskUtils extends Object; // Utility methods for decorating tasks with error handling.\n", "des": "Generic support classes for scheduling."}
{"index": 3868, "repo": "lucene-spatial-extras-9.7.0", "code": "Package: serialized\n\nClasses and Interfaces: \nClass SerializedDVStrategy; // A SpatialStrategy based on serializing a Shape stored into BinaryDocValues.\n", "des": "Strategies that serialize the shape (non-indexed)."}
{"index": 409, "repo": "spring-social-core-1.1.6.RELEASE", "code": "Package: support\n\nClasses and Interfaces: \nClass AbstractConnection<A>; // Base support class for Connection implementations.\nClass ConnectionFactoryRegistry; // A registry for service provider connection factories.\nClass OAuth1Connection<A>; // An OAuth1-based Connection implementation.\nClass OAuth1ConnectionFactory<A>; // Factory for creating OAuth1-based Connections.\nClass OAuth2Connection<A>; // An OAuth2-based Connection implementation.\nClass OAuth2ConnectionFactory<S>; // Factory for creating OAuth2-based Connections.\n", "des": "ServiceProvider Connect API implementation support."}
{"index": 3462, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface AliasResolutionContext; // Provides aliases that are used by load queries and ResultSet processors.\nInterface CollectionReferenceAliases;\nInterface EntityReferenceAliases; // Aggregates the alias/suffix information in relation to an EntityReference todo : add a contract (interface) that can be shared by entity and collection alias info objects as lhs/rhs of a join ?\nInterface LoadQueryDetails;\nInterface LockModeResolver;\n", "des": "Defines the SPI for the load query generated for the LoadPlan and the ResultSet processor."}
{"index": 2716, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: orm\n\nClasses and Interfaces: \n@Deprecated(since=\"5.0\", forRemoval=true) public abstract class AbstractHibernateQueryProvider<T> extends Object implements HibernateQueryProvider<T>;\npublic abstract class AbstractJpaQueryProvider extends Object implements JpaQueryProvider, org.springframework.beans.factory.InitializingBean; // Abstract JPA Query Provider to serve as a base class for all JPA Query providers.\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateNativeQueryProvider<E> extends AbstractHibernateQueryProvider<E>;\n@Deprecated(since=\"5.0\", forRemoval=true) public interface HibernateQueryProvider<T>;\npublic class JpaNamedQueryProvider<E> extends AbstractJpaQueryProvider; // This query provider creates JPA named Querys.\npublic class JpaNativeQueryProvider<E> extends AbstractJpaQueryProvider; // This query provider creates JPA Querys from injected native SQL queries.\npublic interface JpaQueryProvider; // Interface defining the functionality to be provided for generating queries for use with JPA ItemReaders or other custom built artifacts.\n", "des": "Support classes for components using various ORM related technologies."}
{"index": 1593, "repo": "spring-websocket-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \npublic abstract class AbstractWebSocketHandlerRegistration<M> extends Object implements WebSocketHandlerRegistration; // Base class for WebSocketHandlerRegistrations that gathers all the configuration options but allows subclasses to put together the actual HTTP request mappings.\n@Configuration(proxyBeanMethods=false) public class DelegatingWebSocketConfiguration extends WebSocketConfigurationSupport; // A variation of WebSocketConfigurationSupport that detects implementations of WebSocketConfigurer in Spring configuration and invokes them in order to configure WebSocket request handling.\n@Configuration(proxyBeanMethods=false) public class DelegatingWebSocketMessageBrokerConfiguration extends WebSocketMessageBrokerConfigurationSupport; // A WebSocketMessageBrokerConfigurationSupport extension that detects beans of type WebSocketMessageBrokerConfigurer and delegates to all of them allowing callback style customization of the configuration provided in WebSocketMessageBrokerConfigurationSupport.\n@Retention(RUNTIME) @Target(TYPE) @Documented @Import(DelegatingWebSocketConfiguration.class) public @interface EnableWebSocket; // Add this annotation to an @Configuration class to configure processing WebSocket requests.\n@Retention(RUNTIME) @Target(TYPE) @Documented @Import(DelegatingWebSocketMessageBrokerConfiguration.class) public @interface EnableWebSocketMessageBroker; // Add this annotation to an @Configuration class to enable broker-backed messaging over WebSocket using a higher-level messaging sub-protocol.\npublic class ServletWebSocketHandlerRegistration extends AbstractWebSocketHandlerRegistration<org.springframework.util.MultiValueMap<org.springframework.web.HttpRequestHandler,String>>; // A helper class for configuring WebSocketHandler request handling including SockJS fallback options.\npublic class ServletWebSocketHandlerRegistry extends Object implements WebSocketHandlerRegistry; // WebSocketHandlerRegistry with Spring MVC handler mappings for the handshake requests.\npublic class SockJsServiceRegistration extends Object; // A helper class for configuring SockJS fallback options for use with an EnableWebSocket and WebSocketConfigurer setup.\npublic interface StompEndpointRegistry; // A contract for registering STOMP over WebSocket endpoints.\npublic interface StompWebSocketEndpointRegistration; // A contract for configuring a STOMP over WebSocket endpoint.\npublic class WebMvcStompEndpointRegistry extends Object implements StompEndpointRegistry; // A registry for STOMP over WebSocket endpoints that maps the endpoints with a HandlerMapping for use in Spring MVC.\n", "des": "Support for annotation-based WebSocket setup in configuration classes."}
{"index": 2316, "repo": "spring-boot-3.1.1", "code": "Package: java\n\nClasses and Interfaces: \npublic class JavaLoggingSystem extends AbstractLoggingSystem; // LoggingSystem for java.util.logging.\n@Order(2147483647) public static class JavaLoggingSystem.Factory extends Object implements LoggingSystemFactory; // LoggingSystemFactory that returns JavaLoggingSystem if possible.\npublic class SimpleFormatter extends Formatter; // Simple 'Java Logging' Formatter.\n", "des": "Support for 'Java Util Logging'."}
{"index": 757, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: bn\n\nClasses and Interfaces: \nClass BengaliAnalyzer; // Analyzer for Bengali.\nClass BengaliNormalizationFilter; // A TokenFilter that applies BengaliNormalizer to normalize the orthography.\nClass BengaliNormalizationFilterFactory; // Factory for BengaliNormalizationFilter.\nClass BengaliNormalizer; // Normalizer for Bengali.\nClass BengaliStemFilter; // A TokenFilter that applies BengaliStemmer to stem Bengali words.\nClass BengaliStemFilterFactory; // Factory for BengaliStemFilter.\nClass BengaliStemmer; // Stemmer for Bengali.\n", "des": "Analyzer for Bengali Language."}
{"index": 1542, "repo": "spring-context-6.0.11", "code": "Package: concurrent\n\nClasses and Interfaces: \npublic class ConcurrentTaskExecutor extends Object implements org.springframework.core.task.AsyncListenableTaskExecutor, SchedulingTaskExecutor; // Adapter that takes a java.util.concurrent.Executor and exposes a Spring TaskExecutor for it.\nprotected static class ConcurrentTaskExecutor.ManagedTaskBuilder extends Object; // Delegate that wraps a given Runnable/Callable with a JSR-236 ManagedTask, exposing a long-running hint based on SchedulingAwareRunnable and a given identity name.\npublic class ConcurrentTaskScheduler extends ConcurrentTaskExecutor implements TaskScheduler; // Adapter that takes a java.util.concurrent.ScheduledExecutorService and exposes a Spring TaskScheduler for it.\npublic class CustomizableThreadFactory extends org.springframework.util.CustomizableThreadCreator implements ThreadFactory; // Implementation of the ThreadFactory interface, allowing for customizing the created threads (name, priority, etc).\npublic class DefaultManagedAwareThreadFactory extends CustomizableThreadFactory implements org.springframework.beans.factory.InitializingBean; // JNDI-based variant of CustomizableThreadFactory, performing a default lookup for JSR-236's \"java:comp/DefaultManagedThreadFactory\" in a Jakarta EE environment, falling back to the local CustomizableThreadFactory setup if not found.\npublic class DefaultManagedTaskExecutor extends ConcurrentTaskExecutor implements org.springframework.beans.factory.InitializingBean; // JNDI-based variant of ConcurrentTaskExecutor, performing a default lookup for JSR-236's \"java:comp/DefaultManagedExecutorService\" in a Jakarta EE/8 environment.\npublic class DefaultManagedTaskScheduler extends ConcurrentTaskScheduler implements org.springframework.beans.factory.InitializingBean; // JNDI-based variant of ConcurrentTaskScheduler, performing a default lookup for JSR-236's \"java:comp/DefaultManagedScheduledExecutorService\" in a Jakarta EE environment.\npublic abstract class ExecutorConfigurationSupport extends CustomizableThreadFactory implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Base class for setting up a ExecutorService (typically a ThreadPoolExecutor or ScheduledThreadPoolExecutor).\n", "des": "Scheduling convenience classes for the java.util.concurrent and jakarta.enterprise.concurrent packages, allowing to set up a ThreadPoolExecutor or ScheduledThreadPoolExecutor as a bean in a Spring context."}
{"index": 317, "repo": "kafka-clients-3.5.0", "code": "Package: producer\n\nClasses and Interfaces: \nInterface Callback; // A callback interface that the user can implement to allow code to execute when the request is complete.\nInterface Partitioner; // Partitioner Interface\nInterface Producer<K,V>; // The interface for the KafkaProducer\nInterface ProducerInterceptor<K,V>; // A plugin interface that allows you to intercept (and possibly mutate) the records received by the producer before they are published to the Kafka cluster.\nClass KafkaProducer<K,V>; // A Kafka client that publishes records to the Kafka cluster.\nClass MockProducer<K,V>; // A mock of the producer interface you can use for testing code that uses Kafka.\nClass ProducerConfig; // Configuration for the Kafka Producer.\nClass ProducerRecord<K,V>; // A key/value pair to be sent to Kafka.\nClass RecordMetadata; // The metadata for a record that has been acknowledged by the server\nClass RoundRobinPartitioner; // The \"Round-Robin\" partitioner This partitioning strategy can be used when user wants to distribute the writes to all partitions equally.\nClass UniformStickyPartitioner; // Since 3.3.0, in order to use default partitioning logic remove the partitioner.class configuration setting and set partitioner.ignore.keys=true.\nClass BufferExhaustedException; // This exception is thrown if the producer cannot allocate memory for a record within max.block.ms due to the buffer being too full.\n", "des": "Provides a Kafka client for producing records to topics and/or partitions in a Kafka cluster."}
{"index": 976, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: wss4j2\n\nSub Packages: \npackage wss4j2.callback; // Contains CallbackHandler implementations for WSS4J 2.0.\npackage wss4j2.support; // Contains support classes for working with WSS4J 2.0.\n\nClasses and Interfaces: \nClass Wss4jSecurityInterceptor; // A WS-Security endpoint interceptor based on Apache's WSS4J.\nClass Wss4jSecurityFaultException; // WSS4J-specific version of the WsSecurityFaultException.\nClass Wss4jSecuritySecurementException; // WSS4J-specific version of the WsSecuritySecurementException.\nClass Wss4jSecurityValidationException; // WSS4J-specific version of the WsSecurityValidationException.\n", "des": "Contains classes for using the Apache WSS4J 2.0 WS-Security implementation within Spring-WS."}
{"index": 2648, "repo": "spring-data-cassandra-4.1.2", "code": "Package: converter\n\nClasses and Interfaces: \npublic abstract class AbstractResultSetConverter<T> extends Object implements Converter<com.datastax.oss.driver.api.core.cql.ResultSet,T>; // Convenient converter that can be used to convert a single-row-single-column, single-row-multi-column, or multi-row ResultSet into the given value of a given type.\npublic abstract class AbstractResultSetToBasicFixedTypeConverter<T> extends AbstractResultSetConverter<T>; // Thin wrapper that allows subclasses to delegate conversion of the given value to a DefaultConversionService.\npublic class ResultSetToArrayConverter extends Object implements Converter<com.datastax.oss.driver.api.core.cql.ResultSet,Object[]>; // Converter from ResultSet to Object array.\npublic class ResultSetToBigDecimalConverter extends AbstractResultSetToBasicFixedTypeConverter<BigDecimal>; // Converter from ResultSet to a single BigDecimal value.\npublic class ResultSetToBigIntegerConverter extends AbstractResultSetToBasicFixedTypeConverter<BigInteger>; // Converter from ResultSet to a single BigInteger value.\npublic class ResultSetToBooleanConverter extends AbstractResultSetToBasicFixedTypeConverter<Boolean>; // Converter from ResultSet to a single Boolean value.\npublic class ResultSetToByteBufferConverter extends AbstractResultSetConverter<ByteBuffer>; // Converter from ResultSet to a single ByteBuffer value.\npublic class ResultSetToDateConverter extends AbstractResultSetToBasicFixedTypeConverter<Date>; // Converter from ResultSet to a single Date value.\npublic class ResultSetToDoubleConverter extends AbstractResultSetToBasicFixedTypeConverter<Double>; // Converter from ResultSet to a single Double value.\npublic class ResultSetToFloatConverter extends AbstractResultSetToBasicFixedTypeConverter<Float>; // Converter from ResultSet to a single Float value.\npublic class ResultSetToInetAddressConverter extends AbstractResultSetToBasicFixedTypeConverter<InetAddress>; // Converter from ResultSet to a single InetAddress value.\npublic class ResultSetToIntegerConverter extends AbstractResultSetToBasicFixedTypeConverter<Integer>; // Converter from ResultSet to a single Integer value.\npublic class ResultSetToListConverter extends Object implements Converter<com.datastax.oss.driver.api.core.cql.ResultSet,List<Map<String,Object>>>; // Converter from ResultSet to Map.\npublic class ResultSetToListOfStringConverter extends AbstractResultSetConverter<List<String>>; // Converter from ResultSet to a List of String.\n", "des": "CQL specific converters."}
{"index": 1825, "repo": "pulsar-client-original-3.0.0", "code": "Package: transaction\n\nClasses and Interfaces: \npublic interface TransactionBufferHandler; // Interface of transaction buffer handler.\npublic class TransactionBuilderImpl extends Object implements TransactionBuilder; // The default implementation of transaction builder to build transactions.\npublic class TransactionCoordinatorClientImpl extends Object implements TransactionCoordinatorClient; // Transaction coordinator client based topic assigned.\npublic class TransactionImpl extends Object implements Transaction, io.netty.util.TimerTask; // The default implementation of Transaction.\n", "des": "Transaction client implementation."}
{"index": 798, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: payloads\n\nClasses and Interfaces: \nInterface PayloadEncoder; // Mainly for use with the DelimitedPayloadTokenFilter, converts char buffers to BytesRef.\nClass AbstractEncoder; // Base class for payload encoders.\nClass DelimitedPayloadTokenFilter; // Characters before the delimiter are the \"token\", those after are the payload.\nClass DelimitedPayloadTokenFilterFactory; // Factory for DelimitedPayloadTokenFilter.\nClass FloatEncoder; // Encode a character array Float as a BytesRef.\nClass IdentityEncoder; // Does nothing other than convert the char array to a byte array using the specified encoding.\nClass IntegerEncoder; // Encode a character array Integer as a BytesRef.\nClass NumericPayloadTokenFilter; // Assigns a payload to a token based on the TypeAttribute\nClass NumericPayloadTokenFilterFactory; // Factory for NumericPayloadTokenFilter.\nClass PayloadHelper; // Utility methods for encoding payloads.\nClass TokenOffsetPayloadTokenFilter; // Adds the OffsetAttribute.startOffset() and OffsetAttribute.endOffset() First 4 bytes are the start\nClass TokenOffsetPayloadTokenFilterFactory; // Factory for TokenOffsetPayloadTokenFilter.\nClass TypeAsPayloadTokenFilter; // Makes the TypeAttribute a payload.\nClass TypeAsPayloadTokenFilterFactory; // Factory for TypeAsPayloadTokenFilter.\n", "des": "Provides various convenience classes for creating payloads on Tokens."}
{"index": 64, "repo": "ignite-core-2.15.0", "code": "Package: ssl\n\nClasses and Interfaces: \nClass SslContextFactory; // SSL context factory that provides SSL context configuration with specified key and trust stores.\nClass SSLContextWrapper; // Wrapper for SSLContext that extend source context with custom SSL parameters.\n", "des": "Contains classes for working with SSL."}
{"index": 3880, "repo": "solr-ltr-9.3.0", "code": "Package: store\n\nSub Packages: \npackage store.rest; // Contains the ManagedResource that encapsulate the feature and the model stores.\n\nClasses and Interfaces: \nClass FeatureStore;\nClass ModelStore; // Contains the model and features declared.\n", "des": "Contains feature and model store related classes."}
{"index": 917, "repo": "commons-compress-1.23.0", "code": "Package: bzip2\n\nClasses and Interfaces: \nClass BZip2CompressorInputStream; // An input stream that decompresses from the BZip2 format to be read as any other stream.\nClass BZip2CompressorOutputStream; // An output stream that compresses into the BZip2 format into another stream.\nClass BZip2Utils; // Utility code for the BZip2 compression format.\n", "des": "Provides stream classes for compressing and decompressing streams using the BZip2 algorithm."}
{"index": 2130, "repo": "spring-context-support-6.0.11", "code": "Package: interceptor\n\nClasses and Interfaces: \npublic abstract class AbstractFallbackJCacheOperationSource extends Object implements JCacheOperationSource; // Abstract implementation of JCacheOperationSource that caches attributes for methods and implements a fallback policy: 1.\npublic abstract class AnnotationJCacheOperationSource extends AbstractFallbackJCacheOperationSource; // Implementation of the JCacheOperationSource interface that reads the JSR-107 CacheResult, CachePut, CacheRemove and CacheRemoveAll annotations.\npublic class BeanFactoryJCacheOperationSourceAdvisor extends org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor; // Advisor driven by a JCacheOperationSource, used to include a cache advice bean for methods that are cacheable.\npublic class DefaultJCacheOperationSource extends AnnotationJCacheOperationSource implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.SmartInitializingSingleton; // The default JCacheOperationSource implementation delegating default operations to configurable services with sensible defaults when not present.\npublic class JCacheAspectSupport extends org.springframework.cache.interceptor.AbstractCacheInvoker implements org.springframework.beans.factory.InitializingBean; // Base class for JSR-107 caching aspects, such as the JCacheInterceptor or an AspectJ aspect.\npublic class JCacheInterceptor extends JCacheAspectSupport implements org.aopalliance.intercept.MethodInterceptor, Serializable; // AOP Alliance MethodInterceptor for declarative cache management using JSR-107 caching annotations.\npublic interface JCacheOperation<A extends Annotation> extends org.springframework.cache.interceptor.BasicOperation, javax.cache.annotation.CacheMethodDetails<A>; // Model the base of JSR-107 cache operation through an interface contract.\npublic interface JCacheOperationSource; // Interface used by JCacheInterceptor.\n@Deprecated(since=\"6.0.10\", forRemoval=true) public abstract class JCacheOperationSourcePointcut extends org.springframework.aop.support.StaticMethodMatcherPointcut implements Serializable;\npublic class SimpleExceptionCacheResolver extends org.springframework.cache.interceptor.AbstractCacheResolver; // A simple CacheResolver that resolves the exception cache based on a configurable CacheManager and the name of the cache: CacheResultOperation.getExceptionCacheName().\n", "des": "AOP-based solution for declarative caching demarcation using JSR-107 annotations."}
{"index": 1184, "repo": "commons-math3-3.6.1", "code": "Package: events\n\nClasses and Interfaces: \nInterface EventHandler; // This interface represents a handler for discrete events triggered during ODE integration.\nInterface FieldEventHandler<T extends RealFieldElement<T>>; // This interface represents a handler for discrete events triggered during ODE integration.\nClass EventFilter; // Wrapper used to detect only increasing or decreasing events.\nClass EventState; // This class handles the state for one event handler during integration steps.\nClass FieldEventState<T extends RealFieldElement<T>>; // This class handles the state for one event handler during integration steps.\nEnum Action; // Enumerate for actions to be performed when an event occurs during ODE integration.\nEnum EventHandler.Action; // Enumerate for actions to be performed when an event occurs.\nEnum FilterType; // Enumerate for filtering events.\n", "des": "This package provides classes to handle discrete events occurring during Ordinary Differential Equations integration."}
{"index": 1462, "repo": "spring-data-redis-3.1.2", "code": "Package: configuration\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(RedisRepositoriesRegistrar.class) @QueryCreatorType(RedisQueryCreator.class) public @interface EnableRedisRepositories; // Annotation to activate Redis repositories.\npublic class RedisRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport; // Redis specific ImportBeanDefinitionRegistrar.\npublic class RedisRepositoryConfigurationExtension extends org.springframework.data.keyvalue.repository.config.KeyValueRepositoryConfigurationExtension; // RepositoryConfigurationExtension for Redis.\n", "des": "Redis repository specific configuration and bean registration."}
{"index": 2532, "repo": "spring-security-core-6.1.2", "code": "Package: authority\n\nSub Packages: \npackage authority.mapping; // Strategies for mapping a list of attributes (such as roles or LDAP groups) to a list of GrantedAuthoritys.\n\nClasses and Interfaces: \npublic final class AuthorityUtils extends Object; // Utility method for manipulating GrantedAuthority collections etc.\npublic interface GrantedAuthoritiesContainer extends Serializable; // Indicates that a object stores GrantedAuthority objects.\npublic final class SimpleGrantedAuthority extends Object implements GrantedAuthority; // Basic concrete implementation of a GrantedAuthority.\n", "des": "The default implementation of the GrantedAuthority interface."}
{"index": 2219, "repo": "spring-data-commons-3.1.2", "code": "Package: history\n\nSub Packages: \npackage history.support; // Value objects to implement core repository interfaces for historiography.\n\nClasses and Interfaces: \n@NoRepositoryBean public interface RevisionRepository<T,ID,N extends Number & Comparable<N>> extends Repository<T,ID>; // A repository which can access entities held in a variety of Revisions.\n", "des": "API for repositories using historiography."}
{"index": 3525, "repo": "opennlp-tools-2.2.0", "code": "Package: ontonotes\n\nClasses and Interfaces: \nInterface OntoNotesFormatParameters;\nClass DocumentToLineStream; // Reads a plain text file and return each line as a String object.\nClass OntoNotesNameSampleStream; // Name Sample Stream parser for the OntoNotes 4.0 corpus.\nClass OntoNotesNameSampleStreamFactory;\nClass OntoNotesParseSampleStream;\nClass OntoNotesParseSampleStreamFactory;\nClass OntoNotesPOSSampleStreamFactory;\n", "des": "Experimental package related to the OntoNotes 4.0 format."}
{"index": 1871, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: aop\n\nClasses and Interfaces: \npublic abstract class AnnotationHandler extends Object; // Base support class for implementations that reads and processes JSR-175 annotations.\npublic abstract class AnnotationMethodInterceptor extends MethodInterceptorSupport; // MethodInterceptor that inspects a specific annotation on the method invocation before continuing its execution.\npublic interface AnnotationResolver; // Defines an AOP-framework-independent way of determining if an Annotation exists on a Method.\npublic class DefaultAnnotationResolver extends Object implements AnnotationResolver; // Default AnnotationResolver implementation that merely inspects the MethodInvocation's target method, and returns targetMethod.getAnnotation(class).\npublic interface MethodInterceptor; // A MethodInterceptor intercepts a MethodInvocation to perform before or after logic (aka 'advice').\npublic abstract class MethodInterceptorSupport extends Object implements MethodInterceptor; // This class is an abstraction of AOP method interceptor behavior specific to Shiro that leaves AOP implementation specifics to be handled by subclass implementations.\npublic interface MethodInvocation; // 3rd-party API independent representation of a method invocation.\n", "des": "Components used to support the framework's AOP/interception support classes."}
{"index": 2507, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: exchanges\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnWebApplication @ConditionalOnProperty(prefix=\"management.httpexchanges.recording\", name=\"enabled\", matchIfMissing=true) @ConditionalOnBean(org.springframework.boot.actuate.web.exchanges.HttpExchangeRepository.class) @EnableConfigurationProperties(HttpExchangesProperties.class) public class HttpExchangesAutoConfiguration extends Object; // Auto-configuration to record HTTP exchanges.\n@AutoConfiguration(after=HttpExchangesAutoConfiguration.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.web.exchanges.HttpExchangesEndpoint.class) public class HttpExchangesEndpointAutoConfiguration extends Object; // Auto-configuration for the HttpExchangesEndpoint.\n@ConfigurationProperties(prefix=\"management.httpexchanges\") public class HttpExchangesProperties extends Object; // Configuration properties for recording HTTP exchanges.\npublic static class HttpExchangesProperties.Recording extends Object; // Recording properties.\n", "des": "Auto-configuration for actuator HTTP exchanges."}
{"index": 1297, "repo": "spring-core-6.0.11", "code": "Package: xml\n\nClasses and Interfaces: \npublic abstract class DomUtils extends Object; // Convenience methods for working with the DOM API, in particular for working with DOM Nodes and DOM Elements.\npublic class SimpleNamespaceContext extends Object implements NamespaceContext; // Simple javax.xml.namespace.NamespaceContext implementation.\npublic class SimpleSaxErrorHandler extends Object implements ErrorHandler; // Simple org.xml.sax.ErrorHandler implementation: logs warnings using the given Commons Logging logger instance, and rethrows errors to discontinue the XML transformation.\npublic class SimpleTransformErrorListener extends Object implements ErrorListener; // Simple javax.xml.transform.ErrorListener implementation: logs warnings using the given Commons Logging logger instance, and rethrows errors to discontinue the XML transformation.\npublic abstract class StaxUtils extends Object; // Convenience methods for working with the StAX API.\npublic abstract class TransformerUtils extends Object; // Contains common behavior relating to Transformers and the javax.xml.transform package in general.\npublic class XmlValidationModeDetector extends Object; // Detects whether an XML stream is using DTD- or XSD-based validation.\n", "des": "Miscellaneous utility classes for XML parsing and transformation, such as error handlers that log warnings via Commons Logging."}
{"index": 1057, "repo": "avro-1.11.2", "code": "Package: avro\n\nSub Packages: \npackage avro.data; // Interfaces and base classes shared by generic, specific and reflect.\npackage avro.file; // A container file for Avro data.\npackage avro.generic; // A generic representation for Avro data.\npackage avro.io; // Utilities for Encoding and Decoding Avro data.\npackage avro.path; // Interfaces and base classes for AvroPath.\npackage avro.reflect; // Use Java reflection to generate schemas and protocols for existing classes.\npackage avro.specific; // Generate specific Java classes for schemas and protocols.\npackage avro.util; // Common utility classes.\n\nClasses and Interfaces: \nInterface LogicalTypes.LogicalTypeFactory; // Factory interface and SPI for logical types.\nInterface SchemaValidationStrategy; // An interface for validating the compatibility of a single schema against another.\nInterface SchemaValidator; // A SchemaValidator has one method, which validates that a Schema is compatible with the other schemas provided.\nClass Conversion<T>; // Conversion between generic and logical type instances.\nClass Conversions;\nClass Conversions.DecimalConversion;\nClass Conversions.UUIDConversion;\nClass JsonProperties; // Base class for objects that have JSON-valued properties.\nClass JsonProperties.Null;\nClass LogicalType; // Logical types provides an opt-in way to extend Avro's types.\nClass LogicalTypes;\nClass LogicalTypes.Date; // Date represents a date without a time\nClass LogicalTypes.Decimal; // Decimal represents arbitrary-precision fixed-scale decimal numbers\nClass LogicalTypes.LocalTimestampMicros;\nClass LogicalTypes.LocalTimestampMillis;\nClass LogicalTypes.TimeMicros; // TimeMicros represents a time in microseconds without a date\nClass LogicalTypes.TimeMillis; // TimeMillis represents a time in milliseconds without a date\nClass LogicalTypes.TimestampMicros; // TimestampMicros represents a date and time in microseconds\nClass LogicalTypes.TimestampMillis; // TimestampMillis represents a date and time in milliseconds\nClass Protocol; // A set of messages forming an application protocol.\nClass Resolver; // Encapsulate schema-resolution logic in an easy-to-consume representation.\nClass Resolver.Action; // An abstract class for an action to be taken to resolve a writer's schema (found in public instance variable writer) against a reader's schema (in reader).\n", "des": "Avro kernel classes."}
{"index": 2125, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "Package: run\n\nClasses and Interfaces: \n@DisableCachingByDefault(because=\"Application should always run\") public abstract class BootRun extends JavaExec; // Custom JavaExec task for running a Spring Boot application.\n", "des": "Support for running Spring Boot applications."}
{"index": 2732, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: mail\n\nSub Packages: \npackage mail.builder; // Builders for JavaMail related components.\npackage mail.javamail; // JavaMail related components.\n\nClasses and Interfaces: \npublic class DefaultMailErrorHandler extends Object implements MailErrorHandler; // This MailErrorHandler implementation simply rethrows the exception it receives.\npublic interface MailErrorHandler; // This class is used to handle errors that occur when email messages are unable to be sent.\npublic class SimpleMailMessageItemWriter extends Object implements ItemWriter<org.springframework.mail.SimpleMailMessage>, org.springframework.beans.factory.InitializingBean; // A simple ItemWriter that can send mail messages.\n", "des": "Java Mail based components."}
{"index": 2347, "repo": "spring-boot-3.1.1", "code": "Package: tomcat\n\nClasses and Interfaces: \npublic interface ConfigurableTomcatWebServerFactory extends ConfigurableWebServerFactory; // ConfigurableWebServerFactory for Tomcat-specific features.\npublic class ConnectorStartFailedException extends WebServerException; // A ConnectorStartFailedException is thrown when a Tomcat Connector fails to start, for example due to a port clash or incorrect SSL configuration.\n@FunctionalInterface public interface TomcatConnectorCustomizer; // Callback interface that can be used to customize a Tomcat Connector.\n@FunctionalInterface public interface TomcatContextCustomizer; // Callback interface that can be used to customize a Tomcat Context.\npublic class TomcatEmbeddedWebappClassLoader extends org.apache.catalina.loader.ParallelWebappClassLoader; // Extension of Tomcat's ParallelWebappClassLoader that does not consider the system classloader.\n@FunctionalInterface public interface TomcatProtocolHandlerCustomizer<T extends org.apache.coyote.ProtocolHandler>; // Callback interface that can be used to customize the ProtocolHandler on the Connector.\npublic class TomcatReactiveWebServerFactory extends AbstractReactiveWebServerFactory implements ConfigurableTomcatWebServerFactory; // ReactiveWebServerFactory that can be used to create a TomcatWebServer.\npublic class TomcatServletWebServerFactory extends AbstractServletWebServerFactory implements ConfigurableTomcatWebServerFactory, org.springframework.context.ResourceLoaderAware; // AbstractServletWebServerFactory that can be used to create TomcatWebServers.\npublic class TomcatWebServer extends Object implements WebServer; // WebServer that can be used to control a Tomcat web server.\n", "des": "Embedded reactive and servlet web server implementations backed by Tomcat."}
{"index": 1479, "repo": "tribuo-core-4.3.1", "code": "Package: datasource\n\nClasses and Interfaces: \npublic class AggregateConfigurableDataSource<T extends Output<T>> extends Object implements ConfigurableDataSource<T>; // Aggregates multiple ConfigurableDataSources, uses AggregateDataSource.IterationOrder to control the iteration order.\npublic static class AggregateConfigurableDataSource.AggregateConfigurableDataSourceProvenance extends com.oracle.labs.mlrg.olcut.provenance.impl.SkeletalConfiguredObjectProvenance implements DataSourceProvenance; // Provenance for the AggregateConfigurableDataSource.\npublic class AggregateDataSource<T extends Output<T>> extends Object implements DataSource<T>; // Aggregates multiple DataSources, uses AggregateDataSource.IterationOrder to control the iteration order.\npublic static class AggregateDataSource.AggregateDataSourceProvenance extends Object implements DataSourceProvenance; // Provenance for the AggregateDataSource.\npublic static enum AggregateDataSource.IterationOrder extends Enum<AggregateDataSource.IterationOrder>; // Specifies the iteration order of the inner sources.\npublic final class IDXDataSource<T extends Output<T>> extends Object implements ConfigurableDataSource<T>; // A DataSource which can read IDX formatted data (i.e., MNIST).\npublic static class IDXDataSource.IDXData extends Object; // Java side representation for an IDX file.\npublic static final class IDXDataSource.IDXDataSourceProvenance extends com.oracle.labs.mlrg.olcut.provenance.impl.SkeletalConfiguredObjectProvenance implements DataSourceProvenance; // Provenance class for IDXDataSource.\npublic static enum IDXDataSource.IDXType extends Enum<IDXDataSource.IDXType>; // The possible IDX input formats.\npublic final class LibSVMDataSource<T extends Output<T>> extends Object implements ConfigurableDataSource<T>; // A DataSource which can read LibSVM formatted data.\npublic static final class LibSVMDataSource.LibSVMDataSourceProvenance extends com.oracle.labs.mlrg.olcut.provenance.impl.SkeletalConfiguredObjectProvenance implements DataSourceProvenance; // The provenance for a LibSVMDataSource.\npublic class ListDataSource<T extends Output<T>> extends Object implements DataSource<T>; // A data source which wraps up a list of Examples along with their DataSourceProvenance and an OutputFactory.\n", "des": "Simple data sources for ingesting or aggregating data."}
{"index": 991, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: client\n\nClasses and Interfaces: \nInterface RequestMatcher; // Defines the contract for matching requests to expectations.\nInterface RequestXPathExpectations; // Allows for setting up expectations on XPath expressions.\nInterface ResponseActions; // Allows for setting up responses and additional expectations.\nInterface ResponseCreator; // Allows for creating up responses.\nClass MockWebServiceMessageSender; // Mock implementation of WebServiceMessageSender.\nClass MockWebServiceServer; // Main entry point for client-side Web service testing.\nClass RequestMatchers; // Factory methods for RequestMatcher classes.\nClass ResponseCreators; // Factory methods for ResponseCreator classes.\n", "des": "Provides a testing framework for client-side Web service testing."}
{"index": 3758, "repo": "lucene-facet-9.7.0", "code": "Package: directory\n\nClasses and Interfaces: \nInterface DirectoryTaxonomyWriter.OrdinalMap; // Mapping from old ordinal to new ordinals, used when merging indexes with separate taxonomies.\nClass DirectoryTaxonomyReader; // A TaxonomyReader which retrieves stored taxonomy information from a Directory.\nClass DirectoryTaxonomyWriter; // TaxonomyWriter which uses a Directory to store the taxonomy information on disk, and keeps an additional in-memory cache of some or all categories.\nClass DirectoryTaxonomyWriter.DiskOrdinalMap; // DirectoryTaxonomyWriter.OrdinalMap maintained on file system\nClass DirectoryTaxonomyWriter.MemoryOrdinalMap; // DirectoryTaxonomyWriter.OrdinalMap maintained in memory\n", "des": "Taxonomy index implementation using on top of a Directory."}
{"index": 3818, "repo": "lucene-analysis-common-9.7.0", "code": "Package: word2vec\n\nClasses and Interfaces: \nClass Dl4jModelReader; // Dl4jModelReader reads the file generated by the library Deeplearning4j and provide a Word2VecModel with normalized vectors\nClass TermAndBoost; // Wraps a term and boost\nClass Word2VecModel; // Word2VecModel is a class representing the parsed Word2Vec model containing the vectors for each word in dictionary\nClass Word2VecSynonymFilter; // Applies single-token synonyms from a Word2Vec trained network to an incoming TokenStream.\nClass Word2VecSynonymFilterFactory; // Factory for Word2VecSynonymFilter.\nClass Word2VecSynonymProvider; // The Word2VecSynonymProvider generates the list of sysnonyms of a term.\nClass Word2VecSynonymProviderFactory; // Supply Word2Vec Word2VecSynonymProvider cache avoiding that multiple instances of Word2VecSynonymFilterFactory will instantiate multiple instances of the same SynonymProvider.\n", "des": "Analysis components for Synonyms using Word2Vec model."}
{"index": 247, "repo": "nutch-2.4", "code": "Package: sftp\n\nClasses and Interfaces: \nClass Sftp; // This class uses the Jsch package to fetch content using the Sftp protocol.\n", "des": "Protocol plugin which supports retrieving documents via the sftp protocol."}
{"index": 2881, "repo": "spring-integration-core-6.1.2", "code": "Package: store\n\nClasses and Interfaces: \npublic abstract class AbstractBatchingMessageGroupStore extends Object implements BasicMessageGroupStore;\npublic abstract class AbstractKeyValueMessageStore extends AbstractMessageGroupStore implements MessageStore; // Base class for implementations of Key/Value style MessageGroupStore and MessageStore.\n@ManagedResource public abstract class AbstractMessageGroupStore extends AbstractBatchingMessageGroupStore implements MessageGroupStore, Iterable<MessageGroup>;\npublic interface BasicMessageGroupStore; // Defines a minimal message group store with basic capabilities.\npublic interface ChannelMessageStore extends BasicMessageGroupStore; // A marker interface that indicates this message store has optimizations for use in a QueueChannel.\npublic interface MessageGroup; // A group of messages that are correlated with each other and should be processed in the same context.\npublic interface MessageGroupFactory; // The MessageGroup factory strategy.\npublic class MessageGroupMetadata extends Object implements Serializable; // Value Object holding metadata about a MessageGroup in the MessageGroupStore.\npublic class MessageGroupQueue extends AbstractQueue<org.springframework.messaging.Message<?>> implements BlockingQueue<org.springframework.messaging.Message<?>>; // A BlockingQueue that is backed by a MessageGroupStore.\npublic interface MessageGroupStore extends BasicMessageGroupStore; // Defines additional storage operations on groups of messages linked by a group id.\n@FunctionalInterface public static interface MessageGroupStore.MessageGroupCallback; // Invoked when a MessageGroupStore expires a group.\npublic class MessageGroupStoreReaper extends Object implements Runnable, org.springframework.beans.factory.DisposableBean, org.springframework.beans.factory.InitializingBean, org.springframework.context.SmartLifecycle; // Convenient configurable component to allow explicit timed expiry of MessageGroup instances in a MessageGroupStore.\npublic class MessageHolder extends Object implements Serializable; // The MessageStore specific value object to keep the Message and its metadata.\npublic class MessageMetadata extends Object implements Serializable; // Value Object holding metadata about a Message in the MessageStore.\npublic interface MessageStore; // Strategy interface for storing and retrieving messages.\npublic class MessageStoreException extends org.springframework.messaging.MessagingException; // Exception for problems that occur when using a MessageStore implementation.\npublic interface PriorityCapableChannelMessageStore extends ChannelMessageStore; // A ChannelMessageStore that supports the notion of message priority.\n", "des": "Provides classes releated to storing messages."}
{"index": 2159, "repo": "wicket-core-10.0.0-M1", "code": "Package: transformer\n\nClasses and Interfaces: \npublic abstract class AbstractOutputTransformerContainer extends MarkupContainer implements ITransformer; // This abstract container provides the means to post-process the markup generated by its child components (excluding the containers tag)\npublic abstract class AbstractTransformerBehavior extends Behavior implements ITransformer; // A Behavior which can be added to any component.\n@FunctionalInterface public interface ITransformer; // A common interface to be implemented by AbstractOutputTransformerContainers and AbstractTransformerBehaviors which post-process the output markup of a component.\npublic class NoopOutputTransformerContainer extends AbstractOutputTransformerContainer; // An implementation of an output transformer which does nothing.\npublic class XsltOutputTransformerContainer extends AbstractOutputTransformerContainer; // A container which output markup will be processes by a XSLT processor prior to writing the output into the web response.\npublic class XsltTransformer extends Object implements ITransformer; // A processor to XSLT transform the output generated by a Component.\npublic class XsltTransformerBehavior extends AbstractTransformerBehavior; // An IBehavior which can be added to any component except ListView.\n", "des": "Transformers are able to post-process (transform) the output generated by a Component."}
{"index": 455, "repo": "camel-core-3.0.0-RC1", "code": "Package: loadbalancer\n\nClasses and Interfaces: \nClass CustomLoadBalancerDefinition; // Custom load balancer\nClass FailoverLoadBalancerDefinition; // Failover load balancer The failover load balancer is capable of trying the next processor in case an Exchange failed with an exception during processing.\nClass RandomLoadBalancerDefinition; // Random load balancer The random load balancer selects a random endpoint for each exchange.\nClass RoundRobinLoadBalancerDefinition; // Round robin load balancer The round robin load balancer will use the next endpoint for each message.\nClass StickyLoadBalancerDefinition; // Sticky load balancer Sticky load balancing using an Expression to calculate a correlation key to perform the sticky load balancing; rather like jsessionid in the web or JMSXGroupID in JMS.\nClass TopicLoadBalancerDefinition; // Topic load balancer The topic load balancer sends to all destinations (rather like JMS Topics)\nClass WeightedLoadBalancerDefinition; // Weighted load balancer The weighted load balancing policy allows you to specify a processing load distribution ratio for each server with respect to others.\n", "des": "The JAXB POJOs for the Load Balancer EIP pattern for the XML Configuration."}
{"index": 1688, "repo": "spring-data-couchbase-5.1.2", "code": "Package: config\n\nClasses and Interfaces: \n@Configuration public abstract class AbstractCouchbaseConfiguration extends Object; // Base class for Spring Data Couchbase configuration using JavaConfig.\npublic class BeanNames extends Object; // Contains default bean names for Couchbase beans.\n", "des": "This package contains all classes needed for specific configuration of Spring Data Couchbase."}
{"index": 3655, "repo": "solr-core-9.3.0", "code": "Package: api\n\nClasses and Interfaces: \nClass V2ApiUtils; // Utilities helpful for common V2 API declaration tasks.\n", "des": "V2 utilities useful for all API implementations."}
{"index": 703, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: context\n\nClasses and Interfaces: \nClass IntegrationFlowContext; // A public API for dynamic (manual) registration of IntegrationFlow, not via standard bean registration phase.\nClass IntegrationFlowRegistration; // Instances of this classes are returned as a result of IntegrationFlowContext.registration(IntegrationFlow) invocation and provide an API for some useful IntegrationFlow options and its lifecycle.\n", "des": "The context support classes for Spring Integration Java DSL."}
{"index": 1875, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: authz\n\nSub Packages: \npackage authz.annotation; // Annotations used to restrict which classes, instances, or methods may be accessed or invoked depending on the caller's access abilities or authentication state.\npackage authz.aop; // Contains AOP implementation support classes specifically used for authorization operations, particularly supporting AOP Method Interceptors and JSR-175 metadata Annotations.\npackage authz.permission; // Support and default implementations for Shiro's Permission interface.\n\nClasses and Interfaces: \npublic class AuthorizationException extends org.apache.shiro.lang.ShiroException; // Exception thrown if there is a problem during authorization (access control check).\npublic interface AuthorizationInfo extends Serializable; // AuthorizationInfo represents a single Subject's stored authorization data (roles, permissions, etc.) used during authorization (access control) checks only.\npublic interface Authorizer; // An Authorizer performs authorization (access control) operations for any given Subject (aka 'application user').\npublic class HostUnauthorizedException extends UnauthorizedException; // Thrown when a particular client (that is, host address) has not been enabled to access the system or if the client has been enabled access but is not permitted to perform a particular operation or access a particular resource.\npublic class ModularRealmAuthorizer extends Object implements Authorizer, PermissionResolverAware, RolePermissionResolverAware; // A ModularRealmAuthorizer is an Authorizer implementation that consults one or more configured Realms during an authorization operation.\npublic interface Permission; // A Permission represents the ability to perform an action or access a resource.\npublic class SimpleAuthorizationInfo extends Object implements AuthorizationInfo; // Simple POJO implementation of the AuthorizationInfo interface that stores roles and permissions as internal attributes.\npublic class SimpleRole extends Object implements Serializable; // A simple representation of a security role that has a name and a collection of permissions.\npublic class UnauthenticatedException extends AuthorizationException; // Exception thrown when attempting to execute an authorization action when a successful authentication hasn't yet occurred.\npublic class UnauthorizedException extends AuthorizationException; // Thrown to indicate a requested operation or access to a requested resource is not allowed.\n", "des": "Core interfaces and exceptions supporting Authorization (access control)."}
{"index": 571, "repo": "hadoop-common-3.3.4", "code": "Package: launcher\n\nClasses and Interfaces: \nInterface IrqHandler.Interrupted; // Callback issues on an interrupt.\nInterface LaunchableService; // An interface which services can implement to have their execution managed by the ServiceLauncher.\nInterface LauncherArguments; // Standard launcher arguments.\nInterface LauncherExitCodes; // Common Exit codes.\nClass AbstractLaunchableService; // Subclass of AbstractService that provides basic implementations of the LaunchableService methods.\nClass HadoopUncaughtExceptionHandler; // This class is intended to be installed by calling Thread.setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler) in the main entry point.\nClass InterruptEscalator.ServiceForcedShutdown; // Forced shutdown runnable.\nClass IrqHandler.InterruptData; // Interrupt data to pass on.\nClass ServiceLauncher<S extends Service>; // A class to launch any YARN service by name.\nClass ServiceLauncher.MinimalGenericOptionsParser; // A generic options parser which does not parse any of the traditional Hadoop options.\nClass ServiceLaunchException; // A service launch exception that includes an exit code.\n", "des": "This package contains classes, interfaces and exceptions to launch YARN services from the command line."}
{"index": 2222, "repo": "spring-data-commons-3.1.2", "code": "Package: query\n\nSub Packages: \npackage query.parser; // Support classes for parsing queries from method names.\n\nClasses and Interfaces: \npublic final class DefaultParameters extends Parameters<DefaultParameters,Parameter>; // Default implementation of Parameters.\npublic class ExtensionAwareQueryMethodEvaluationContextProvider extends Object implements QueryMethodEvaluationContextProvider; // An QueryMethodEvaluationContextProvider that assembles an EvaluationContext from a list of EvaluationContextExtension instances.\npublic interface FluentQuery<T>; // Fluent interface to define and run a query along with projection and sorting and.\npublic static interface FluentQuery.FetchableFluentQuery<T> extends FluentQuery<T>; // Fetchable extension FluentQuery allowing to materialize results from the underlying query.\npublic static interface FluentQuery.ReactiveFluentQuery<T> extends FluentQuery<T>; // Reactive extension FluentQuery allowing to materialize results from the underlying query.\npublic interface ListQueryByExampleExecutor<T> extends QueryByExampleExecutor<T>; // Interface to allow execution of Query by Example Example instances.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface Param; // Annotation to bind method parameters to a query via a named parameter.\npublic class Parameter extends Object; // Class to abstract a single parameter of a query method.\npublic interface ParameterAccessor extends Iterable<Object>; // Interface to access method parameters.\npublic class ParameterOutOfBoundsException extends RuntimeException; // Exception to be thrown when trying to access a Parameter with an invalid index inside a Parameters instance.\npublic abstract class Parameters<S extends Parameters<S,T>,T extends Parameter> extends Object implements Streamable<T>; // Abstracts method parameters that have to be bound to query parameters or applied to the query independently.\npublic class ParametersParameterAccessor extends Object implements ParameterAccessor; // ParameterAccessor implementation using a Parameters instance to find special parameters.\npublic interface QueryByExampleExecutor<T>; // Interface to allow execution of Query by Example Example instances.\npublic final class QueryCreationException extends RepositoryCreationException; // Exception to be thrown if a query cannot be created from a Method.\npublic interface QueryLookupStrategy; // Strategy interface for which way to lookup RepositoryQuerys.\npublic static enum QueryLookupStrategy.Key extends Enum<QueryLookupStrategy.Key>;\n", "des": "Support classes to work with query methods."}
{"index": 2668, "repo": "spring-data-jdbc-3.1.2", "code": "Package: core\n\nSub Packages: \npackage core.convert; // JDBC-specific conversion classes.\n\nClasses and Interfaces: \npublic interface JdbcAggregateOperations; // Specifies operations one can perform on a database, based on an Domain Type.\npublic class JdbcAggregateTemplate extends Object implements JdbcAggregateOperations; // JdbcAggregateOperations implementation, storing aggregates in and obtaining them from a JDBC data store.\npublic class UnableToSetId extends NonTransientDataAccessException; // Signals failure to set the id property of an entity.\n", "des": "Core JDBC implementation."}
{"index": 3511, "repo": "opennlp-tools-2.2.0", "code": "Package: dictionary\n\nClasses and Interfaces: \nClass Dictionary; // An iterable and serializable dictionary implementation.\nClass Index; // This classes indexes string lists.\n", "des": "Package related to parsing and storing dictionaries."}
{"index": 1469, "repo": "spring-data-redis-3.1.2", "code": "Package: util\n\nClasses and Interfaces: \npublic final class ByteUtils extends Object; // Some handy methods for dealing with byte arrays.\npublic abstract class RedisAssertions extends Object; // Abstract utility class for common assertions used in Spring Data Redis.\n", "des": "Commonly used stuff for data manipulation throughout different driver specific implementations."}
{"index": 2086, "repo": "spring-webmvc-6.0.11", "code": "Package: json\n\nClasses and Interfaces: \npublic abstract class AbstractJackson2View extends AbstractView; // Abstract base class for Jackson based and content type independent AbstractView implementations.\npublic class MappingJackson2JsonView extends AbstractJackson2View; // Spring MVC View that renders JSON content by serializing the model for the current request using Jackson 2's ObjectMapper.\n", "des": "Support classes for providing a View implementation based on JSON serialization."}
{"index": 1344, "repo": "groovy-all-4.0.13", "code": "Package: javac\n\nClasses and Interfaces: \npublic class JavaAwareCompilationUnit extends CompilationUnit; // Compilation Unit capable of compiling Java source files.\npublic class JavaAwareResolveVisitor extends ResolveVisitor;\npublic class JavacCompilerFactory extends Object implements JavaCompilerFactory;\npublic class JavacJavaCompiler extends Object implements JavaCompiler;\npublic interface JavaCompiler;\npublic interface JavaCompilerFactory;\npublic class JavaStubCompilationUnit extends CompilationUnit; // Compilation unit to only generate stubs.\npublic class JavaStubGenerator extends Object;\npublic class MemJavaFileObject extends SimpleJavaFileObject; // Represents a Java source file in memory to compile\npublic class RawJavaFileObject extends SimpleJavaFileObject; // Represents a Java source file in file to compile\n", "des": "Classes related to the joint compiler."}
{"index": 1387, "repo": "spring-boot-actuator-3.1.1", "code": "Package: reflect\n\nClasses and Interfaces: \npublic class OperationMethod extends Object; // Information describing an operation method on an endpoint method.\npublic class ReflectiveOperationInvoker extends Object implements OperationInvoker; // An OperationInvoker that invokes an operation using reflection.\n", "des": "Endpoint reflection support."}
{"index": 764, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: commongrams\n\nClasses and Interfaces: \nClass CommonGramsFilter; // Construct bigrams for frequently occurring terms while indexing.\nClass CommonGramsFilterFactory; // Constructs a CommonGramsFilter.\nClass CommonGramsQueryFilter; // Wrap a CommonGramsFilter optimizing phrase queries by only returning single words when they are not a member of a bigram.\nClass CommonGramsQueryFilterFactory; // Construct CommonGramsQueryFilter.\n", "des": "Construct n-grams for frequently occurring terms and phrases."}
{"index": 2837, "repo": "spring-data-r2dbc-3.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class R2dbcRepositoryFactory extends ReactiveRepositoryFactorySupport; // Factory to create R2dbcRepository instances.\npublic class R2dbcRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends RepositoryFactoryBeanSupport<T,S,ID> implements ApplicationContextAware; // FactoryBean to create R2dbcRepository instances.\n@Transactional(readOnly=true) public class SimpleR2dbcRepository<T,ID> extends Object implements R2dbcRepository<T,ID>; // Simple ReactiveSortingRepository implementation using R2DBC through DatabaseClient.\n", "des": "Support infrastructure for query derivation of R2DBC-specific repositories."}
{"index": 104, "repo": "ignite-core-2.15.0", "code": "Package: memory\n\nClasses and Interfaces: \nInterface MemoryEventStorageSpiMBean; // Management bean for MemoryEventStorageSpi.\nClass MemoryEventStorageSpi; // In-memory EventStorageSpi implementation.\n", "des": "Contains default in-memory implementation for event storage SPI."}
{"index": 1491, "repo": "tribuo-core-4.3.1", "code": "Package: util\n\nClasses and Interfaces: \npublic final class HTMLOutput extends Object; // Utilities for nice HTML output that can be put in wikis and such.\npublic final class IntDoublePair extends Object; // A Pair of a primitive int and a primitive double.\npublic final class MeanVarianceAccumulator extends Object implements Serializable; // An accumulator for online calculation of the mean and variance of a stream of doubles.\n@FunctionalInterface public interface Merger; // An interface which can merge double values.\npublic final class MurmurHash3 extends Object; // The MurmurHash3 algorithm was created by Austin Appleby and placed in the public domain.\npublic static final class MurmurHash3.LongPair extends Object; // 128 bits of state\npublic final class Util extends Object; // Ye olde util class.\n", "des": "Provides utilities which don't have other Tribuo dependencies."}
{"index": 1408, "repo": "spring-boot-actuator-3.1.1", "code": "Package: logging\n\nClasses and Interfaces: \n@WebEndpoint(id=\"logfile\") public class LogFileWebEndpoint extends Object; // Web @Endpoint that provides access to an application's log file.\n@Endpoint(id=\"loggers\") @RegisterReflectionForBinding({GroupLoggerLevelsDescriptor.class,SingleLoggerLevelsDescriptor.class}) public class LoggersEndpoint extends Object; // @Endpoint to expose a collection of LoggerConfigurations.\npublic static class LoggersEndpoint.GroupLoggerLevelsDescriptor extends LoggersEndpoint.LoggerLevelsDescriptor; // Description of levels configured for a given group logger.\npublic static class LoggersEndpoint.LoggerLevelsDescriptor extends Object implements OperationResponseBody; // Description of levels configured for a given logger.\npublic static class LoggersEndpoint.LoggersDescriptor extends Object implements OperationResponseBody; // Description of loggers.\npublic static class LoggersEndpoint.SingleLoggerLevelsDescriptor extends LoggersEndpoint.LoggerLevelsDescriptor; // Description of levels configured for a given single logger.\n", "des": "Actuator support for logging."}
{"index": 3435, "repo": "hibernate-core-5.6.15.Final", "code": "Package: support\n\nClasses and Interfaces: \nInterface AbstractDomainDataRegion.Destructible; // Optional interface caching implementors can implement in their CachedDomainDataAccess impls to automatically have them destroyed when this region is destroyed\nInterface AbstractReadWriteAccess.Lockable; // Interface type implemented by all wrapper objects in the cache.\nInterface DomainDataStorageAccess; // Specialization of StorageAccess for domain data regions\nInterface StorageAccess; // A general read/write abstraction over the specific \"cache\" object from the caching provider.\nClass AbstractCachedDomainDataAccess;\nClass AbstractCollectionDataAccess;\nClass AbstractDomainDataRegion;\nClass AbstractEntityDataAccess;\nClass AbstractNaturalIdDataAccess;\nClass AbstractReadWriteAccess;\nClass AbstractReadWriteAccess.Item; // Wrapper type representing unlocked items.\nClass AbstractReadWriteAccess.SoftLockImpl; // Wrapper type representing locked items.\nClass AbstractRegion;\nClass CacheUtils;\nClass CollectionNonStrictReadWriteAccess; // Standard support for CollectionDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\nClass CollectionReadOnlyAccess; // Standard support for CollectionDataAccess using the AccessType.READ_ONLY access type.\nClass CollectionReadWriteAccess; // Standard support for CollectionDataAccess using the AccessType.READ_WRITE access type.\nClass CollectionTransactionAccess;\nClass DirectAccessRegionTemplate; // Bridge between DirectAccessRegion and StorageAccess\nClass DomainDataRegionImpl;\nClass DomainDataRegionTemplate; // Abstract implementation of DomainDataRegion based on implementations just needing to provide a DomainDataStorageAccess reference for basic caching support - DomainDataStorageAccess acts as a simple wrapper around some generalized cache actions such as put or get.\nClass EntityNonStrictReadWriteAccess; // Standard support for EntityDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\nClass EntityReadOnlyAccess; // Standard support for EntityDataAccess using the AccessType.READ_ONLY access type.\nClass EntityReadWriteAccess; // Standard support for EntityDataAccess using the AccessType.READ_WRITE access type.\nClass EntityTransactionalAccess;\nClass NaturalIdNonStrictReadWriteAccess; // Standard support for NaturalIdDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\n", "des": "Package intended for simplifying the worked needed to implement a caching provider."}
{"index": 2264, "repo": "spring-vault-core-3.0.4", "code": "Package: domain\n\nClasses and Interfaces: \npublic class Lease extends Object; // A lease abstracting the lease Id, duration and its renewability.\npublic class RequestedSecret extends Object; // Represents a requested secret from a specific Vault path associated with a lease RequestedSecret.Mode.\npublic static enum RequestedSecret.Mode extends Enum<RequestedSecret.Mode>;\n", "des": "Lease domain classes."}
{"index": 784, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: hunspell\n\nClasses and Interfaces: \nInterface DictEntries; // An object representing homonym dictionary entries.\nClass Dictionary; // In-memory structure for the dictionary (.dic) and affix (.aff) data of a hunspell dictionary.\nClass Hunspell; // A spell checker based on Hunspell dictionaries.\nClass HunspellStemFilter; // TokenFilter that uses hunspell affix rules and words to stem tokens.\nClass HunspellStemFilterFactory; // TokenFilterFactory that creates instances of HunspellStemFilter.\nEnum TimeoutPolicy; // A strategy determining what to do when Hunspell API calls take too much time\nClass SuggestionTimeoutException; // An exception thrown when Hunspell.suggest(java.lang.String) call takes too long, if TimeoutPolicy.THROW_EXCEPTION is used.\n", "des": "A Java implementation of Hunspell stemming and spell-checking algorithms (Hunspell), and a stemming TokenFilter (HunspellStemFilter) based on it."}
{"index": 2408, "repo": "spring-batch-core-5.0.2", "code": "Package: job\n\nClasses and Interfaces: \npublic class DefaultJobParametersExtractor extends Object implements JobParametersExtractor; // Simple implementation of JobParametersExtractor which pulls parameters with named keys out of the step execution context and the job parameters of the surrounding job.\n@FunctionalInterface public interface JobParametersExtractor; // Strategy interface for translating a StepExecution into JobParameters.\npublic class JobStep extends AbstractStep; // A Step that delegates to a Job to do its work.\n", "des": "JobStep and related components."}
{"index": 1948, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: artemis\n\nClasses and Interfaces: \n@AutoConfiguration(before=JmsAutoConfiguration.class, after=JndiConnectionFactoryAutoConfiguration.class) @ConditionalOnClass({jakarta.jms.ConnectionFactory.class,org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory.class}) @ConditionalOnMissingBean(jakarta.jms.ConnectionFactory.class) @EnableConfigurationProperties({ArtemisProperties.class,JmsProperties.class}) @Import({org.springframework.boot.autoconfigure.jms.artemis.ArtemisEmbeddedServerConfiguration.class,org.springframework.boot.autoconfigure.jms.artemis.ArtemisXAConnectionFactoryConfiguration.class,org.springframework.boot.autoconfigure.jms.artemis.ArtemisConnectionFactoryConfiguration.class}) public class ArtemisAutoConfiguration extends Object; // Auto-configuration to integrate with an Artemis broker.\n@FunctionalInterface public interface ArtemisConfigurationCustomizer; // Callback interface that can be implemented by beans wishing to customize the Artemis JMS server Configuration before it is used by an auto-configured EmbeddedActiveMQ instance.\npublic enum ArtemisMode extends Enum<ArtemisMode>; // Define the mode in which Artemis can operate.\npublic class ArtemisNoOpBindingRegistry extends Object implements org.apache.activemq.artemis.spi.core.naming.BindingRegistry; // A no-op implementation of the BindingRegistry.\n@ConfigurationProperties(prefix=\"spring.artemis\") public class ArtemisProperties extends Object; // Configuration properties for Artemis.\npublic static class ArtemisProperties.Embedded extends Object; // Configuration for an embedded Artemis server.\n", "des": "Auto-configuration for Artemis."}
{"index": 2536, "repo": "spring-security-core-6.1.2", "code": "Package: token\n\nClasses and Interfaces: \npublic class DefaultToken extends Object implements Token; // The default implementation of Token.\npublic class KeyBasedPersistenceTokenService extends Object implements TokenService, org.springframework.beans.factory.InitializingBean; // Basic implementation of TokenService that is compatible with clusters and across machine restarts, without requiring database persistence.\npublic class SecureRandomFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<SecureRandom>; // Creates a SecureRandom instance.\npublic abstract class Sha512DigestUtils extends Object; // Provides SHA512 digest methods.\npublic interface Token; // A token issued by TokenService.\npublic interface TokenService; // Provides a mechanism to allocate and rebuild secure, randomised tokens.\n", "des": "A service for building secure random tokens."}
{"index": 814, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: util\n\nClasses and Interfaces: \nInterface ResourceLoader; // Abstraction for loading resources (streams, files, and classes).\nInterface ResourceLoaderAware; // Interface for a component that needs to be initialized by an implementation of ResourceLoader.\nClass AbstractAnalysisFactory; // Abstract parent class for analysis factories TokenizerFactory, TokenFilterFactory and CharFilterFactory.\nClass AnalysisSPILoader<S extends AbstractAnalysisFactory>; // Helper class for loading named SPIs from classpath (e.g.\nClass CharArrayIterator; // A CharacterIterator used internally for use with BreakIterator\nClass CharFilterFactory; // Abstract parent class for analysis factories that create CharFilter instances.\nClass CharTokenizer; // An abstract base class for simple, character-oriented tokenizers.\nClass ClasspathResourceLoader; // Simple ResourceLoader that uses ClassLoader.getResourceAsStream(String) and Class.forName(String,boolean,ClassLoader) to open resources and classes, respectively.\nClass ElisionFilter; // Removes elisions from a TokenStream.\nClass ElisionFilterFactory; // Factory for ElisionFilter.\nClass FilesystemResourceLoader; // Simple ResourceLoader that opens resource files from the local file system, optionally resolving against a base directory.\nClass OpenStringBuilder; // A StringBuilder that allows one to access the array.\nClass RollingCharBuffer; // Acts like a forever growing char[] as you read characters into it from the provided reader, but internally it uses a circular buffer to only hold the characters that haven't been freed yet.\nClass SegmentingTokenizerBase; // Breaks text into sentences with a BreakIterator and allows subclasses to decompose these sentences into words.\nClass StemmerUtil; // Some commonly-used stemming functions\nClass TokenFilterFactory; // Abstract parent class for analysis factories that create TokenFilter instances.\nClass TokenizerFactory; // Abstract parent class for analysis factories that create Tokenizer instances.\nClass UnicodeProps; // This file contains unicode properties used by various CharTokenizers.\n", "des": "Utility functions for text analysis."}
{"index": 2966, "repo": "pulsar-broker-3.0.0", "code": "Package: intercept\n\nClasses and Interfaces: \n@LimitedPrivate @Evolving public interface BrokerInterceptor extends AutoCloseable; // A plugin interface that allows you to intercept the client requests to the Pulsar brokers.\npublic class BrokerInterceptorDefinition extends Object; // Metadata information about a broker interceptor.\npublic class BrokerInterceptorDefinitions extends Object; // The collection of broker interceptor.\npublic class BrokerInterceptorMetadata extends Object; // The metadata of broker interceptor.\npublic class BrokerInterceptors extends Object implements BrokerInterceptor; // A collection of broker interceptor.\npublic class BrokerInterceptorUtils extends Object; // Util class to search and load BrokerInterceptors.\npublic class BrokerInterceptorWithClassLoader extends Object implements BrokerInterceptor; // A broker interceptor with it's classloader.\npublic class ManagedLedgerInterceptorImpl extends Object implements ManagedLedgerInterceptor;\n", "des": "Pulsar broker interceptor."}
{"index": 2120, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "Package: dsl\n\nClasses and Interfaces: \npublic class SpringBootExtension extends Object; // Entry point to Spring Boot's Gradle DSL.\n", "des": "Spring Boot Gradle DSL."}
{"index": 679, "repo": "jackson-databind-2.15.2", "code": "Package: databind\n\nSub Packages: \npackage databind.annotation; // Annotations that directly depend on classes in databinding bundle (not just Jackson core) and cannot be included in Jackson core annotations package (because it cannot have any external dependencies).\npackage databind.cfg; // Package that contains most of configuration-related classes; exception being couple of most-commonly used configuration things (like Feature enumerations) that are at the main level (com.fasterxml.jackson.databind).\npackage databind.deser; // Contains implementation classes of deserialization part of data binding.\npackage databind.ext; // Contains extended support for \"external\" packages: things that may or may not be present in runtime environment, but that are commonly enough used so that explicit support can be added.\npackage databind.introspect; // Functionality needed for Bean introspection, required for detecting accessors and mutators for Beans, as well as locating and handling method annotations.\npackage databind.jdk14; // Contains helper class(es) needed to support some of JDK14+ features without requiring running or building using JDK 14.\npackage databind.jsonFormatVisitors; // Classes used for exposing logical structure of POJOs as Jackson sees it, and exposed via ObjectMapper.acceptJsonFormatVisitor(Class, JsonFormatVisitorWrapper) and ObjectMapper.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.JavaType, JsonFormatVisitorWrapper) methods.\npackage databind.jsonschema; // Classes needed for JSON schema support (currently just ability to generate schemas using serialization part of data mapping)\npackage databind.jsontype; // Package that contains interfaces that define how to implement functionality for dynamically resolving type during deserialization.\npackage databind.module; // Package that contains classes and interfaces to help implement custom extension Modules (which are registered using ObjectMapper.registerModule(com.fasterxml.jackson.databind.Module).\npackage databind.node; // Contains concrete JsonNode implementations Jackson uses for the Tree model.\npackage databind.ser; // Contains implementation classes of serialization part of data binding.\n\nClasses and Interfaces: \n", "des": "Basic data binding (mapping) functionality that allows for reading JSON content into Java Objects (POJOs) and JSON Trees (JsonNode), as well as writing Java Objects and trees as JSON."}
{"index": 514, "repo": "commons-vfs2-2.9.0", "code": "Package: vcs\n\nClasses and Interfaces: \nInterface VcsAdd;\nInterface VcsCheckout;\nInterface VcsCommit;\nInterface VcsCommitListener;\nInterface VcsDelete;\nInterface VcsLog;\nInterface VcsLogEntryHandler;\nInterface VcsModifyListener;\nInterface VcsRevert; // Restores pristine working copy file and cancels all local modifications.\nInterface VcsUpdate;\nInterface VcsUpdateListener;\nClass VcsLogEntry;\nEnum VcsStatus;\n", "des": "VFS version control operations."}
{"index": 2032, "repo": "spring-messaging-6.0.11", "code": "Package: rsocket\n\nSub Packages: \npackage rsocket.annotation; // Annotations and support classes for handling RSocket streams.\npackage rsocket.service; // Annotations to declare an RSocket service contract with request methods along with a proxy factory backed by an RSocketRequester.\n\nClasses and Interfaces: \npublic class DefaultMetadataExtractor extends Object implements MetadataExtractor, MetadataExtractorRegistry; // Default MetadataExtractor implementation that relies on Decoders to deserialize the content of metadata entries.\npublic interface MetadataExtractor; // Strategy to extract a map of value(s) from Payload metadata, which could be composite metadata with multiple entries.\npublic interface MetadataExtractorRegistry; // Stores registrations of extractors for metadata entries.\npublic abstract class PayloadUtils extends Object; // Static utility methods to create Payload from DataBuffers and vice versa.\n@FunctionalInterface public interface RSocketConnectorConfigurer; // Strategy to apply configuration to an RSocketConnector.\npublic interface RSocketRequester extends reactor.core.Disposable; // A thin wrapper around a sending RSocket with a fluent API accepting and returning higher level Objects for input and for output, along with methods to prepare routing and other metadata.\npublic static interface RSocketRequester.Builder; // Builder to create a requester by connecting to a server.\npublic static interface RSocketRequester.MetadataSpec<S extends RSocketRequester.MetadataSpec<S>>; // Spec for providing additional composite metadata entries.\npublic static interface RSocketRequester.RequestSpec extends RSocketRequester.MetadataSpec<RSocketRequester.RequestSpec>, RSocketRequester.RetrieveSpec; // Spec to declare the input for an RSocket request.\npublic static interface RSocketRequester.RetrieveSpec; // Spec to declare the expected output for an RSocket request.\npublic interface RSocketStrategies; // Access to strategies for use by RSocket requester and responder components.\npublic static interface RSocketStrategies.Builder; // The builder options for creating RSocketStrategies.\n", "des": "Support for the RSocket protocol."}
{"index": 597, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: security\n\nClasses and Interfaces: \nClass TrustEngine; // A TrustEngine is used to establish the authenticity of a Certificate chain.\n", "des": "Equinox security services"}
{"index": 1592, "repo": "spring-websocket-6.0.11", "code": "Package: config\n\nSub Packages: \npackage config.annotation; // Support for annotation-based WebSocket setup in configuration classes.\n\nClasses and Interfaces: \npublic class WebSocketMessageBrokerStats extends Object; // A central class for aggregating information about internal state and counters from key infrastructure components of the setup that comes with @EnableWebSocketMessageBroker for Java config and <websocket:message-broker> for XML.\npublic class WebSocketNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for Spring WebSocket configuration namespace.\n", "des": "Configuration support for WebSocket request handling."}
{"index": 793, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: ngram\n\nClasses and Interfaces: \nClass EdgeNGramFilterFactory; // Creates new instances of EdgeNGramTokenFilter.\nClass EdgeNGramTokenFilter; // Tokenizes the given token into n-grams of given size(s).\nClass EdgeNGramTokenizer; // Tokenizes the input from an edge into n-grams of given size(s).\nClass EdgeNGramTokenizerFactory; // Creates new instances of EdgeNGramTokenizer.\nClass NGramFilterFactory; // Factory for NGramTokenFilter.\nClass NGramTokenFilter; // Tokenizes the input into n-grams of the given size(s).\nClass NGramTokenizer; // Tokenizes the input into n-grams of the given size(s).\nClass NGramTokenizerFactory; // Factory for NGramTokenizer.\n", "des": "Character n-gram tokenizers and filters."}
{"index": 1526, "repo": "spring-context-6.0.11", "code": "Package: glassfish\n\nClasses and Interfaces: \npublic class GlassFishLoadTimeWeaver extends Object implements LoadTimeWeaver; // LoadTimeWeaver implementation for GlassFish's org.glassfish.api.deployment.InstrumentableClassLoader InstrumentableClassLoader.\n", "des": "Support for class instrumentation on GlassFish."}
{"index": 3791, "repo": "lucene-analysis-common-9.7.0", "code": "Package: hunspell\n\nClasses and Interfaces: \nInterface DictEntries; // An object representing homonym dictionary entries.\nInterface FragmentChecker; // An oracle for quickly checking that a specific part of a word can never be a valid word.\nInterface NGramFragmentChecker.NGramConsumer; // A callback for n-gram ranges in words\nClass AffixedWord; // An object representing the analysis result of a simple (non-compound) word\nClass AffixedWord.Affix; // An object representing a prefix or a suffix applied to a word stem\nClass DictEntry; // An object representing *.dic file entry with its word, flags and morphological data.\nClass Dictionary; // In-memory structure for the dictionary (.dic) and affix (.aff) data of a hunspell dictionary.\nClass EntrySuggestion; // Suggestion to add/edit dictionary entries to generate a given list of words created by WordFormGenerator.compress(java.util.List<java.lang.String>, java.util.Set<java.lang.String>, java.lang.Runnable).\nClass Hunspell; // A spell checker based on Hunspell dictionaries.\nClass HunspellStemFilter; // TokenFilter that uses hunspell affix rules and words to stem tokens.\nClass HunspellStemFilterFactory; // TokenFilterFactory that creates instances of HunspellStemFilter.\nClass NGramFragmentChecker; // A FragmentChecker based on all character n-grams possible in a certain language, keeping them in a relatively memory-efficient, but probabilistic data structure.\nClass Suggester; // A generator for misspelled word corrections based on Hunspell flags.\nClass WordFormGenerator; // A utility class used for generating possible word forms by adding affixes to stems (WordFormGenerator.getAllWordForms(String, String, Runnable)), and suggesting stems and flags to generate the given set of words (WordFormGenerator.compress(List, Set, Runnable)).\nEnum TimeoutPolicy; // A strategy determining what to do when Hunspell API calls take too much time\nClass SuggestionTimeoutException; // An exception thrown when Hunspell.suggest(java.lang.String) call takes too long, if TimeoutPolicy.THROW_EXCEPTION is used.\n", "des": "A Java implementation of Hunspell stemming and spell-checking algorithms (Hunspell), and a stemming TokenFilter (HunspellStemFilter) based on it."}
{"index": 280, "repo": "pdfbox-3.0.0-beta1", "code": "Package: pdfparser\n\nClasses and Interfaces: \nClass BaseParser; // This class is used to contain parsing logic that will be used by all parsers.\nClass BruteForceParser; // Brute force parser to be used as last resort if a malformed pdf can't be read.\nClass COSParser; // COS-Parser which first reads startxref and xref tables in order to know valid objects and parse only these objects.\nClass FDFParser;\nClass PDFObjectStreamParser; // This will parse a PDF 1.5 object stream and extract the object with given object number from the stream.\nClass PDFParser;\nClass PDFStreamParser; // This will parse a PDF byte stream and extract operands and such.\nClass PDFXRefStream;\nClass PDFXrefStreamParser; // This will parse a PDF 1.5 (or better) Xref stream and extract the xref information from the stream.\nClass XrefTrailerResolver; // This class will collect all XRef/trailer objects and creates correct xref/trailer information after all objects are read using startxref and 'Prev' information (unused XRef/trailer objects are discarded).\nEnum XrefTrailerResolver.XRefType; // The XRefType of a trailer.\n", "des": "The pdfparser package contains classes to parse PDF documents and objects within the document."}
{"index": 2788, "repo": "spring-expression-6.0.11", "code": "Package: standard\n\nClasses and Interfaces: \npublic final class SpelCompiler extends Object implements org.springframework.asm.Opcodes; // A SpelCompiler will take a regular parsed expression and create (and load) a class containing byte code that does the same thing as that expression.\npublic class SpelExpression extends Object implements Expression; // A SpelExpression represents a parsed (valid) expression that is ready to be evaluated in a specified context.\npublic class SpelExpressionParser extends TemplateAwareExpressionParser; // SpEL parser.\n", "des": "SpEL's standard parser implementation."}
{"index": 1273, "repo": "spring-core-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic interface ConfigurableConversionService extends ConversionService, ConverterRegistry; // Configuration interface to be implemented by most if not all ConversionService types.\npublic final class ConversionServiceFactory extends Object; // A factory for common ConversionService configurations.\npublic class ConvertingPropertyEditorAdapter extends PropertyEditorSupport; // Adapter that exposes a PropertyEditor for any given ConversionService and specific target type.\npublic class DefaultConversionService extends GenericConversionService; // A specialization of GenericConversionService configured by default with converters appropriate for most environments.\npublic class GenericConversionService extends Object implements ConfigurableConversionService; // Base ConversionService implementation suitable for use in most environments.\n", "des": "Default implementation of the type conversion system."}
{"index": 70, "repo": "ignite-core-2.15.0", "code": "Package: noop\n\nClasses and Interfaces: \nClass NoopCheckpointSpi; // No-op implementation of CheckpointSpi.\n", "des": "Contains default no-op checkpoint SPI implementation."}
{"index": 3866, "repo": "lucene-spatial-extras-9.7.0", "code": "Package: tree\n\nClasses and Interfaces: \nInterface Cell; // Represents a grid cell.\nInterface CellCanPrune; // Grid cells that share nothing with other cells when calling Cell.getNextLevelCells(Shape) might implement this interface.\nInterface NumberRangePrefixTree.NRShape; // Base interface for Shapes this prefix tree supports.\nInterface NumberRangePrefixTree.UnitNRShape; // A unit value Shape implemented as a stack of numbers, one for each level in the prefix tree.\nInterface S2ShapeFactory; // Shape factory for Spatial contexts that support S2 geometry.\nClass CellIterator; // An Iterator of SpatialPrefixTree Cells.\nClass DateRangePrefixTree; // A PrefixTree for date ranges in which the levels of the tree occur at natural periods of time (e.g.\nClass GeohashPrefixTree; // A SpatialPrefixTree based on Geohashes.\nClass GeohashPrefixTree.Factory; // Factory for creating GeohashPrefixTree instances with useful defaults\nClass LegacyCell; // The base for the original two SPT's: Geohash and Quad.\nClass NumberRangePrefixTree; // A SpatialPrefixTree for single-dimensional numbers and number ranges of fixed precision values (not floating point).\nClass PackedQuadPrefixTree; // Uses a compact binary representation of 8 bytes to encode a spatial quad trie.\nClass PackedQuadPrefixTree.Factory; // Factory for creating PackedQuadPrefixTree instances with useful defaults.\nClass QuadPrefixTree; // A SpatialPrefixTree which uses a quad tree in which an indexed term will be generated for each cell, 'A', 'B', 'C', 'D'.\nClass QuadPrefixTree.Factory; // Factory for creating QuadPrefixTree instances with useful defaults\nClass S2PrefixTree; // Spatial prefix tree for S2 Geometry.\nClass S2PrefixTree.Factory; // Factory for creating S2PrefixTree instances with useful defaults\nClass SpatialPrefixTree; // A spatial Prefix Tree, or Trie, which decomposes shapes into prefixed strings at variable lengths corresponding to variable precision.\nClass SpatialPrefixTreeFactory; // Abstract Factory for creating SpatialPrefixTree instances with useful defaults and passed on configurations defined in a Map.\n", "des": "This package is about SpatialPrefixTree and any supporting classes."}
{"index": 1857, "repo": "spring-test-6.0.11", "code": "Package: response\n\nClasses and Interfaces: \npublic class DefaultResponseCreator extends Object implements ResponseCreator; // A ResponseCreator with builder-style methods for adding response details.\npublic class ExecutingResponseCreator extends Object implements ResponseCreator; // ResponseCreator that obtains the response by executing the request through a ClientHttpRequestFactory.\npublic abstract class MockRestResponseCreators extends Object; // Static factory methods to obtain a ResponseCreator with a fixed response.\n", "des": "Contains built-in ResponseCreator implementations."}
{"index": 1850, "repo": "spring-test-6.0.11", "code": "Package: util\n\nClasses and Interfaces: \npublic abstract class TestContextResourceUtils extends Object; // Utility methods for working with resources within the Spring TestContext Framework.\npublic abstract class TestContextSpringFactoriesUtils extends Object; // Collection of utilities for working with SpringFactoriesLoader within the Spring TestContext Framework.\n", "des": "Common utilities used within the Spring TestContext Framework."}
{"index": 2753, "repo": "spring-beans-6.0.11", "code": "Package: beans\n\nSub Packages: \npackage beans.factory; // The core package implementing Spring's lightweight Inversion of Control (IoC) container.\npackage beans.propertyeditors; // Properties editors used to convert from String values to object types such as java.util.Properties.\npackage beans.support; // Classes supporting the org.springframework.beans package, such as utility classes for sorting and holding lists of beans.\n\nClasses and Interfaces: \npublic abstract class AbstractNestablePropertyAccessor extends AbstractPropertyAccessor; // A basic ConfigurablePropertyAccessor that provides the necessary infrastructure for all typical use cases.\nprotected abstract static class AbstractNestablePropertyAccessor.PropertyHandler extends Object; // A handler for a specific property.\nprotected static class AbstractNestablePropertyAccessor.PropertyTokenHolder extends Object; // Holder class used to store property tokens.\npublic abstract class AbstractPropertyAccessor extends TypeConverterSupport implements ConfigurablePropertyAccessor; // Abstract implementation of the PropertyAccessor interface.\npublic interface BeanInfoFactory; // Strategy interface for creating BeanInfo instances for Spring beans.\npublic class BeanInstantiationException extends FatalBeanException; // Exception thrown when instantiation of a bean failed.\npublic class BeanMetadataAttribute extends Object implements BeanMetadataElement; // Holder for a key-value style attribute that is part of a bean definition.\npublic class BeanMetadataAttributeAccessor extends org.springframework.core.AttributeAccessorSupport implements BeanMetadataElement; // Extension of AttributeAccessorSupport, holding attributes as BeanMetadataAttribute objects in order to keep track of the definition source.\npublic interface BeanMetadataElement; // Interface to be implemented by bean metadata elements that carry a configuration source object.\npublic abstract class BeansException extends org.springframework.core.NestedRuntimeException; // Abstract superclass for all exceptions thrown in the beans package and subpackages.\npublic abstract class BeanUtils extends Object; // Static convenience methods for JavaBeans: for instantiating beans, checking bean property types, copying bean properties, etc.\npublic interface BeanWrapper extends ConfigurablePropertyAccessor; // The central interface of Spring's low-level JavaBeans infrastructure.\npublic class BeanWrapperImpl extends AbstractNestablePropertyAccessor implements BeanWrapper; // Default BeanWrapper implementation that should be sufficient for all typical use cases.\npublic final class CachedIntrospectionResults extends Object; // Internal class that caches JavaBeans PropertyDescriptor information for a Java class.\n", "des": "This package contains interfaces and classes for manipulating Java beans."}
{"index": 1123, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: resourceplugin\n\nSub Packages: \npackage resourceplugin.deviceframework; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage resourceplugin.fpga; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage resourceplugin.gpu; // Package for GPU support classes.\n\nClasses and Interfaces: \nInterface DockerCommandPlugin; // Interface to make different resource plugins (e.g.\nInterface ResourcePlugin; // ResourcePlugin is an interface for node manager to easier support discovery/manage/isolation for new resource types.\nClass NodeResourceUpdaterPlugin; // Plugins to handle resources on a node.\nClass ResourcePluginManager; // Manages ResourcePlugin configured on this NodeManager.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 2082, "repo": "spring-webmvc-6.0.11", "code": "Package: document\n\nClasses and Interfaces: \npublic abstract class AbstractPdfStamperView extends AbstractUrlBasedView; // Abstract superclass for PDF views that operate on an existing document with an AcroForm.\npublic abstract class AbstractPdfView extends AbstractView; // Abstract superclass for PDF views.\npublic abstract class AbstractXlsView extends AbstractView; // Convenient superclass for Excel document views in traditional XLS format.\npublic abstract class AbstractXlsxStreamingView extends AbstractXlsxView; // Convenient superclass for Excel document views in the Office 2007 XLSX format, using POI's streaming variant.\npublic abstract class AbstractXlsxView extends AbstractXlsView; // Convenient superclass for Excel document views in the Office 2007 XLSX format (as supported by POI-OOXML).\n", "des": "Support classes for document generation, providing View implementations for PDF and Excel."}
{"index": 1346, "repo": "spring-integration-kafka-6.1.2", "code": "Package: channel\n\nClasses and Interfaces: \npublic abstract class AbstractKafkaChannel extends org.springframework.integration.channel.AbstractMessageChannel; // Abstract MessageChannel backed by an Apache Kafka topic.\npublic class PollableKafkaChannel extends AbstractKafkaChannel implements org.springframework.messaging.PollableChannel, org.springframework.integration.channel.ExecutorChannelInterceptorAware; // Pollable channel backed by an Apache Kafka topic.\npublic class PublishSubscribeKafkaChannel extends SubscribableKafkaChannel implements org.springframework.integration.channel.BroadcastCapableChannel; // Publish/subscribe channel backed by an Apache Kafka topic.\npublic class SubscribableKafkaChannel extends AbstractKafkaChannel implements org.springframework.messaging.SubscribableChannel, org.springframework.integration.support.management.ManageableSmartLifecycle; // Subscribable channel backed by an Apache Kafka topic.\n", "des": "Provides classes related to message channel implementations for Apache Kafka."}
{"index": 2195, "repo": "spring-data-commons-3.1.2", "code": "Package: annotation\n\nClasses and Interfaces: \n@Documented @Target({ANNOTATION_TYPE,TYPE,FIELD,METHOD}) @Retention(RUNTIME) public @interface AccessType; // Annotation to define how Spring Data shall access values of persistent properties.\npublic static enum AccessType.Type extends Enum<AccessType.Type>;\n@Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface CreatedBy; // Declares a field as the one representing the principal that created the entity containing the field.\n@Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface CreatedDate; // Declares a field as the one representing the date the entity containing the field was created.\n@Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface Id; // Demarcates an identifier.\n@Target(TYPE) @Retention(RUNTIME) public @interface Immutable; // Annotation for persistent entities to indicate the class is designed in immutable way.\n@Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface LastModifiedBy; // Declares a field as the one representing the principal that recently modified the entity containing the field.\n@Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface LastModifiedDate; // Declares a field as the one representing the date the entity containing the field was recently modified.\n@Retention(RUNTIME) @Target({CONSTRUCTOR,ANNOTATION_TYPE}) @Deprecated public @interface PersistenceConstructor;\n@Retention(RUNTIME) @Target({CONSTRUCTOR,METHOD,ANNOTATION_TYPE}) public @interface PersistenceCreator; // Marker annotation to declare a constructor or factory method annotation as factory/preferred constructor annotation.\n@Indexed @Retention(RUNTIME) @Reflective @Target({TYPE,FIELD,PARAMETER}) public @interface Persistent; // Annotation to generally identify persistent types, fields and parameters.\n@Retention(RUNTIME) @Target(ANNOTATION_TYPE) public @interface QueryAnnotation; // Meta-Annotation to mark a store specific annotation as a query annotation.\n@Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface ReadOnlyProperty; // Marks a field to be read-only for the mapping framework and therefore will not be persisted.\n", "des": "Core annotations being used by Spring Data."}
{"index": 533, "repo": "commons-vfs2-2.9.0", "code": "Package: tar\n\nClasses and Interfaces: \nClass TarFileObject; // A file in a Tar file system.\nClass TarFileProvider; // A file system provider for Tar files.\nClass TarFileSystem; // A read-only file system for Tar files.\nClass Tbz2FileProvider; // A file system provider for Tar files.\nClass TgzFileProvider; // A file system provider for Tar files.\n", "des": "The Tar File Provider."}
{"index": 2187, "repo": "spring-security-web-6.1.2", "code": "Package: www\n\nClasses and Interfaces: \npublic class BasicAuthenticationConverter extends Object implements AuthenticationConverter; // Converts from a HttpServletRequest to UsernamePasswordAuthenticationToken that can be authenticated.\npublic class BasicAuthenticationEntryPoint extends Object implements AuthenticationEntryPoint, org.springframework.beans.factory.InitializingBean; // Used by the ExceptionTranslationFilter to commence authentication via the BasicAuthenticationFilter.\npublic class BasicAuthenticationFilter extends org.springframework.web.filter.OncePerRequestFilter; // Processes a HTTP request's BASIC authorization headers, putting the result into the SecurityContextHolder.\npublic class DigestAuthenticationEntryPoint extends Object implements AuthenticationEntryPoint, org.springframework.beans.factory.InitializingBean, org.springframework.core.Ordered; // Used by the SecurityEnforcementFilter to commence authentication via the DigestAuthenticationFilter.\npublic class DigestAuthenticationFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.MessageSourceAware; // Processes a HTTP request's Digest authorization headers, putting the result into the SecurityContextHolder.\npublic class NonceExpiredException extends org.springframework.security.core.AuthenticationException; // Thrown if an authentication request is rejected because the digest nonce has expired.\n", "des": "WWW-Authenticate based authentication mechanism implementations: Basic and Digest authentication."}
{"index": 629, "repo": "freemarker-2.3.32", "code": "Package: util\n\nClasses and Interfaces: \nInterface ModelFactory; // Interface used to create various wrapper models in the ModelCache.\nInterface WrapperTemplateModel; // A generic interface for template models that wrap some underlying object, and wish to provide access to that wrapped object.\nClass IdentityHashMap; // Use IdentityHashMap instead.\nClass ModelCache; // Internally used by various wrapper implementations to implement model caching.\n", "des": "Various classes used by freemarker.ext but might be useful outside it too."}
{"index": 893, "repo": "commons-jcs3-core-3.1", "code": "Package: disk\n\nClasses and Interfaces: \nClass AbstractDiskCache<K,V>; // Abstract class providing a base implementation of a disk cache, which can be easily extended to implement a disk cache for a specific persistence mechanism.\nClass AbstractDiskCacheAttributes; // This has common attributes that any conceivable disk cache would need.\nClass PurgatoryElement<K,V>; // Implementation of cache elements in purgatory.\n", "des": "The primary disk auxiliary."}
{"index": 3013, "repo": "spring-web-6.0.11", "code": "Package: xml\n\nClasses and Interfaces: \npublic abstract class AbstractJaxb2HttpMessageConverter<T> extends AbstractXmlHttpMessageConverter<T>; // Abstract base class for HttpMessageConverters that use JAXB2.\npublic abstract class AbstractXmlHttpMessageConverter<T> extends AbstractHttpMessageConverter<T>; // Abstract base class for HttpMessageConverters that convert from/to XML.\npublic class Jaxb2CollectionHttpMessageConverter<T extends Collection> extends AbstractJaxb2HttpMessageConverter<T> implements GenericHttpMessageConverter<T>; // An HttpMessageConverter that can read XML collections using JAXB2.\npublic class Jaxb2RootElementHttpMessageConverter extends AbstractJaxb2HttpMessageConverter<Object>; // Implementation of HttpMessageConverter that can read and write XML using JAXB2.\npublic class MappingJackson2XmlHttpMessageConverter extends AbstractJackson2HttpMessageConverter; // Implementation of HttpMessageConverter that can read and write XML using Jackson 2.x extension component for reading and writing XML encoded data.\npublic class MarshallingHttpMessageConverter extends AbstractXmlHttpMessageConverter<Object>; // Implementation of HttpMessageConverter that can read and write XML using Spring's Marshaller and Unmarshaller abstractions.\npublic class SourceHttpMessageConverter<T extends Source> extends AbstractHttpMessageConverter<T>; // Implementation of HttpMessageConverter that can read and write Source objects.\n", "des": "Provides HttpMessageConverter implementations for handling XML."}
{"index": 1868, "repo": "spring-security-cas-6.1.2", "code": "Package: web\n\nSub Packages: \npackage web.authentication; // Authentication processing mechanisms which respond to the submission of authentication credentials using CAS.\n\nClasses and Interfaces: \npublic class CasAuthenticationEntryPoint extends Object implements org.springframework.security.web.AuthenticationEntryPoint, org.springframework.beans.factory.InitializingBean; // Used by the ExceptionTranslationFilter to commence authentication via the JA-SIG Central Authentication Service (CAS).\npublic class CasAuthenticationFilter extends org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter; // Processes a CAS service ticket, obtains proxy granting tickets, and processes proxy tickets.\n", "des": "Authenticates standard web browser users via CAS."}
{"index": 1650, "repo": "jena-core-4.9.0", "code": "Package: impl\n\nClasses and Interfaces: \npublic abstract class AbstractProfile extends Object implements Profile; // Abstract base class to provide shared implementation for ontology language profiles.\npublic class AllDifferentImpl extends OntResourceImpl implements AllDifferent; // Implementation of the abstraction of axioms that denote the single name assumption.\npublic class AllValuesFromRestrictionImpl extends RestrictionImpl implements AllValuesFromRestriction; // Implementation of the allValuesFrom restriction abstraction.\npublic class AnnotationPropertyImpl extends OntPropertyImpl implements AnnotationProperty; // Implementation for ontology abstraction of annotation property\npublic abstract class BooleanClassDescriptionImpl extends OntClassImpl implements BooleanClassDescription; // Shared implementation for implementations of Boolean clas expressions.\npublic class CardinalityQRestrictionImpl extends QualifiedRestrictionImpl implements CardinalityQRestriction; // Implementation of the exact qualified cardinality restriction\npublic class CardinalityRestrictionImpl extends RestrictionImpl implements CardinalityRestriction; // Implementation of the cardinality restriction abstraction.\npublic class ComplementClassImpl extends OntClassImpl implements ComplementClass; // Implementation of a node representing a complement class description.\npublic class DataRangeImpl extends OntResourceImpl implements DataRange; // Default implementation of the interface that defines a closed enumeration of concrete values for the range of a property.\npublic class DatatypePropertyImpl extends OntPropertyImpl implements DatatypeProperty; // Implementation of the datatype property abstraction\npublic class EnumeratedClassImpl extends OntClassImpl implements EnumeratedClass; // Implementation of a node representing an enumerated class description.\npublic class FunctionalPropertyImpl extends OntPropertyImpl implements FunctionalProperty; // Implementation of the functional property abstraction\npublic class HasValueRestrictionImpl extends RestrictionImpl implements HasValueRestriction; // Implementation of the hasValue restriction abstraction.\npublic class IndividualImpl extends OntResourceImpl implements Individual; // Implementation for the ontology abstraction representing ontology class descriptions.\npublic class IntersectionClassImpl extends BooleanClassDescriptionImpl implements IntersectionClass; // Implementation of a node representing an intersection class description.\npublic class InverseFunctionalPropertyImpl extends ObjectPropertyImpl implements InverseFunctionalProperty; // Implementation of the functional property abstraction\npublic class MaxCardinalityQRestrictionImpl extends QualifiedRestrictionImpl implements MaxCardinalityQRestriction; // Implementation of the max qualified cardinality restriction\npublic class MaxCardinalityRestrictionImpl extends RestrictionImpl implements MaxCardinalityRestriction; // Implementation of the max cardinality restriction abstraction.\n", "des": "Provides default implementations for the abstractions defined in the org.apache.jena.ontology package."}
{"index": 2428, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: endpoint\n\nSub Packages: \npackage endpoint.condition; // Actuator endpoint auto-configuration conditions.\npackage endpoint.expose; // Endpoint exposure logic used for auto-configuration and conditions.\npackage endpoint.jackson; // Actuator Jackson auto-configuration.\npackage endpoint.jmx; // Actuator JMX endpoint auto-configuration.\npackage endpoint.web; // Auto-configuration for the Actuator's web endpoints.\n\nClasses and Interfaces: \n@AutoConfiguration public class EndpointAutoConfiguration extends Object; // Auto-configuration for @Endpoint support.\n", "des": "Core classes for actuator endpoint auto-configuration."}
{"index": 1635, "repo": "spring-kafka-3.0.9", "code": "Package: support\n\nSub Packages: \npackage support.converter; // Package for kafka converters\npackage support.mapping; // Provides classes related to type mapping.\npackage support.micrometer; // Provides classes to support Micrometer.\n\nClasses and Interfaces: \npublic abstract class AbstractKafkaHeaderMapper extends Object implements KafkaHeaderMapper; // Base for Kafka header mappers.\nprotected static interface AbstractKafkaHeaderMapper.HeaderMatcher; // A matcher for headers.\nprotected static class AbstractKafkaHeaderMapper.NeverMatchHeaderMatcher extends Object implements AbstractKafkaHeaderMapper.HeaderMatcher; // A matcher that never matches a set of headers.\nprotected static class AbstractKafkaHeaderMapper.SimplePatternBasedHeaderMatcher extends Object implements AbstractKafkaHeaderMapper.HeaderMatcher; // A pattern-based header matcher that matches if the specified header matches the specified simple pattern.\npublic interface Acknowledgment; // Handle for acknowledging the processing of a ConsumerRecord.\npublic final class AllowDenyCollectionManager<T> extends Object; // Class for managing Allow / Deny collections and its predicates.\npublic class CompositeProducerInterceptor<K,V> extends Object implements org.apache.kafka.clients.producer.ProducerInterceptor<K,V>, Closeable; // A ProducerInterceptor that delegates to a collection of interceptors.\npublic class CompositeProducerListener<K,V> extends Object implements ProducerListener<K,V>; // A ProducerListener that delegates to a collection of listeners.\npublic class DefaultKafkaHeaderMapper extends AbstractKafkaHeaderMapper; // Default header mapper for Apache Kafka.\npublic static class DefaultKafkaHeaderMapper.NonTrustedHeaderType extends Object; // Represents a header that could not be decoded due to an untrusted type.\npublic class EndpointHandlerMethod extends Object; // Handler method for retrying endpoints.\npublic class ExponentialBackOffWithMaxRetries extends org.springframework.util.backoff.ExponentialBackOff; // Subclass of ExponentialBackOff that allows the specification of the maximum number of retries rather than the maximum elapsed time.\npublic final class JacksonMimeTypeModule extends com.fasterxml.jackson.databind.module.SimpleModule; // A SimpleModule extension for MimeType serialization.\npublic final class JacksonPresent extends Object; // The utility to check if Jackson JSON processor is present in the classpath.\n", "des": "Package for kafka support"}
{"index": 2630, "repo": "shiro-web-2.0.0-alpha-2", "code": "Package: servlet\n\nClasses and Interfaces: \npublic abstract class AbstractFilter extends ServletContextSupport implements javax.servlet.Filter; // Base abstract Filter simplifying Filter initialization and access to init parameters.\npublic abstract class AbstractShiroFilter extends OncePerRequestFilter; // Abstract base class that provides all standard Shiro request filtering behavior and expects subclasses to implement configuration-specific logic (INI, XML, .properties, etc.).\npublic abstract class AdviceFilter extends OncePerRequestFilter; // A Servlet Filter that enables AOP-style \"around\" advice for a ServletRequest via preHandle, postHandle, and afterCompletion hooks.\npublic interface Cookie; // Interface representing HTTP cookie operations, supporting pojo-style getters and setters for all attributes which includes HttpOnly support.\npublic static enum Cookie.SameSiteOptions extends Enum<Cookie.SameSiteOptions>; // The SameSite attribute of the Set-Cookie HTTP response header allows you to declare if your cookie should be restricted to a first-party or same-site context.\n@Deprecated public interface HttpSessionContext;\n@Deprecated public class IniShiroFilter extends AbstractShiroFilter;\npublic abstract class NameableFilter extends AbstractFilter implements org.apache.shiro.lang.util.Nameable; // Allows a filter to be named via JavaBeans-compatible NameableFilter.getName()/NameableFilter.setName(String) methods.\npublic abstract class OncePerRequestFilter extends NameableFilter; // Filter base class that guarantees to be just executed once per request, on any servlet container.\npublic class ProxiedFilterChain extends Object implements javax.servlet.FilterChain; // A proxied filter chain is a FilterChain instance that proxies an original FilterChain as well as a List of other Filters that might need to execute prior to the final wrapped original chain.\npublic class ServletContextSupport extends Object; // Base implementation for any components that need to access the web application's ServletContext.\npublic class ShiroFilter extends AbstractShiroFilter; // Primary Shiro Filter for web applications configuring Shiro via Servlet <listener> in web.xml.\n", "des": "Shiro-specific implementations of the Servlet API (Servlet Filters, et al.)."}
{"index": 2949, "repo": "spring-integration-xml-6.1.2", "code": "Package: result\n\nClasses and Interfaces: \npublic class DomResultFactory extends Object implements ResultFactory;\npublic interface ResultFactory; // Factory to create a Result possibly taking into account the provided message payload instance.\npublic class StringResultFactory extends Object implements ResultFactory;\n", "des": "Provides ResultFactory that will return Result, possibly taking into account payload instance."}
{"index": 1498, "repo": "wicket-extensions-10.0.0-M1", "code": "Package: model\n\nClasses and Interfaces: \npublic abstract class AbstractCheckBoxModel extends Object implements org.apache.wicket.model.IModel<Boolean>; // Model adapter that makes working with models for checkboxes easier.\n", "des": "Convenience models."}
{"index": 1116, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: recovery\n\nClasses and Interfaces: \nClass DeletionTaskRecoveryInfo; // Encapsulates the recovery info needed to recover a DeletionTask from the NM state store.\n", "des": "Package containing classes for recovering DeletionTasks."}
{"index": 474, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: annotations\n\nClasses and Interfaces: \nAnnotation Type Internal; // Signifies that a publicly accessible API (public class, method or field) is intended for internal use only and not for public consumption.\n", "des": "Defines annotations used across the SDK."}
{"index": 44, "repo": "ignite-core-2.15.0", "code": "Package: events\n\nClasses and Interfaces: \nInterface CacheConsistencyViolationEvent.EntriesInfo; // Inconsistent entries mapping.\nInterface CacheConsistencyViolationEvent.EntryInfo; // Inconsistent entry info.\nInterface Event; // Grid events are used for notification about what happens within the grid.\nInterface EventType; // Contains event type constants.\nClass BaselineChangedEvent; // Baseline changed event.\nClass BaselineConfigurationChangedEvent; // Baseline configuration changed event.\nClass CacheConsistencyViolationEvent; // This is an experimental API.\nClass CacheEvent; // In-memory database (cache) event.\nClass CacheObjectTransformedEvent;\nClass CacheQueryExecutedEvent<K,V>; // Cache query execution event.\nClass CacheQueryReadEvent<K,V>; // Cache query read event.\nClass CacheRebalancingEvent; // In-memory database (cache) rebalancing event.\nClass CheckpointEvent; // Grid checkpoint event.\nClass ClusterActivationEvent; // Use ClusterStateChangeEvent instead.\nClass ClusterStateChangeEvent; // Cluster state change event.\nClass ClusterStateChangeStartedEvent; // Cluster state change started event.\nClass ClusterTagUpdatedEvent; // Event type indicating that cluster tag has been updated.\nClass DeploymentEvent; // Grid deployment event.\nClass DiscoveryEvent; // Grid discovery event.\nClass EventAdapter; // Base adapter for the events.\nClass JobEvent; // Grid job event.\nClass NodeValidationFailedEvent; // This event is triggered if any of GridComponents fail to validate the joining node while join message processing.\nClass PageReplacementStartedEvent; // Event type indicating that page replacement started in one of the configured data regions.\nClass SnapshotEvent; // Event indicating the cluster snapshot operation result state with the given name.\nClass SqlQueryExecutionEvent; // Query execution event.\nClass TaskEvent; // Grid task event.\nClass TransactionStateChangedEvent; // Event indicates transaction state change.\nClass WalSegmentArchivedEvent; // Event indicates the completion of WAL segment file transition to archive.\nClass WalSegmentCompactedEvent; // Event indicates the completion of WAL segment compaction.\n", "des": "Contains Event Subscription functionality together with various events emitted by Ignite."}
{"index": 2572, "repo": "pulsar-common-3.0.0", "code": "Package: loadbalancer\n\nClasses and Interfaces: \npublic class AdvertisedListener extends Object; // The advertisedListener for broker with brokerServiceUrl and brokerServiceUrlTls.\npublic class BrokerData extends Object; // Data class containing three components comprising all the data available for the leader broker about other brokers: - The local broker data which is written to ZooKeeper by each individual broker (LocalBrokerData).\npublic class BrokerUsage extends Object; // BrokerUsage object encapsulates the resources that are only used by broker, for now, it's connections both to outside JVM and to the local.\npublic class BundleData extends Object; // Data class comprising the short term and long term historical data for this bundle.\npublic class JvmUsage extends Object; // JvmUsage represents set of resources that are specific to JVM and are used by broker, load balancing need to know this detail.\npublic class LoadReport extends Object implements LoadManagerReport; // This class represents the overall load of the broker - it includes overall SystemResourceUsage and NamespaceUsage for all the namespaces hosted by this broker.\npublic class LoadReportDeserializer extends com.fasterxml.jackson.databind.JsonDeserializer<LoadManagerReport>; // Deserializer for a load report.\npublic class LocalBrokerData extends Object implements LoadManagerReport; // Contains all the data that is maintained locally on each broker.\npublic class NamespaceUsage extends Object; // this class represents usages of resources used by a namespace, this is an aggregate of all the topics and queues on the namespace.\npublic class ResourceUnitRanking extends Object implements Comparable<ResourceUnitRanking>; // The class containing information about system resources, allocated quota, and loaded bundles.\npublic class SystemResourceUsage extends Object; // This class represents a object which reflects system resource usage per resource and the upper limit on the resource.\npublic static enum SystemResourceUsage.ResourceType extends Enum<SystemResourceUsage.ResourceType>; // Definition of possible resource types.\npublic class TimeAverageBrokerData extends Object; // Data class aggregating the short term and long term data across all bundles belonging to a broker.\npublic class TimeAverageMessageData extends Object; // Data class comprising the average message data over a fixed period of time.\n", "des": "Classes to define policies for the load distribution."}
{"index": 554, "repo": "hadoop-common-3.3.4", "code": "Package: http\n\nClasses and Interfaces: \nClass HttpFileSystem; // A Filesystem that reads from HTTP endpoint.\nClass HttpsFileSystem; // A Filesystem that reads from HTTPS endpoint.\n", "des": "Filesystem implementations that allow Hadoop to read directly from HTTP / HTTPS endpoints."}
{"index": 351, "repo": "lucene-analyzers-kuromoji-8.11.2", "code": "Package: tokenattributes\n\nClasses and Interfaces: \nInterface BaseFormAttribute; // Attribute for Token.getBaseForm().\nInterface InflectionAttribute; // Attribute for Kuromoji inflection data.\nInterface PartOfSpeechAttribute; // Attribute for Token.getPartOfSpeech().\nInterface ReadingAttribute; // Attribute for Kuromoji reading data\nClass BaseFormAttributeImpl; // Attribute for Token.getBaseForm().\nClass InflectionAttributeImpl; // Attribute for Kuromoji inflection data.\nClass PartOfSpeechAttributeImpl; // Attribute for Token.getPartOfSpeech().\nClass ReadingAttributeImpl; // Attribute for Kuromoji reading data\n", "des": "Additional Kuromoji-specific Attributes for text analysis."}
{"index": 927, "repo": "commons-compress-1.23.0", "code": "Package: xz\n\nClasses and Interfaces: \nClass XZCompressorInputStream; // XZ decompressor.\nClass XZCompressorOutputStream; // XZ compressor.\nClass XZUtils; // Utility code for the xz compression format.\n", "des": "Provides stream classes for compressing and decompressing streams using the XZ algorithm."}
{"index": 3523, "repo": "opennlp-tools-2.2.0", "code": "Package: muc\n\nClasses and Interfaces: \nClass Muc6NameSampleStreamFactory;\nClass MucNameContentHandler;\nClass MucNameSampleStream;\nClass SgmlParser; // SAX style SGML parser.\nClass SgmlParser.ContentHandler;\n", "des": "Experimental package related to the MUC corpus format."}
{"index": 2253, "repo": "spring-batch-test-5.0.2", "code": "Package: test\n\nSub Packages: \npackage test.context; // APIs for the configuration of Spring Batch test support.\n\nClasses and Interfaces: \n@Deprecated(since=\"5.0\", forRemoval=true) public abstract class AssertFile extends Object;\n@Deprecated(since=\"5.0\", forRemoval=true) public class DataSourceInitializer extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean;\npublic class ExecutionContextTestUtils extends Object; // Convenience class for accessing ExecutionContext values from job and step executions.\npublic class JobLauncherTestUtils extends Object; // Utility class for testing batch jobs.\npublic class JobRepositoryTestUtils extends Object; // Convenience class for creating and removing JobExecution instances from a database.\npublic class JobScopeTestExecutionListener extends Object implements org.springframework.test.context.TestExecutionListener; // A TestExecutionListener that sets up job-scope context for dependency injection into unit tests.\npublic class JobScopeTestUtils extends Object; // Utility class for creating and manipulating JobScope in unit tests.\npublic class MetaDataInstanceFactory extends Object; // Convenience methods for creating test instances of JobExecution, JobInstance and StepExecution.\npublic class StepRunner extends Object; // Utility class for executing steps outside of a Job.\npublic class StepScopeTestExecutionListener extends Object implements org.springframework.test.context.TestExecutionListener; // A TestExecutionListener that sets up step-scope context for dependency injection into unit tests.\npublic class StepScopeTestUtils extends Object; // Utility class for creating and manipulating StepScope in unit tests.\n", "des": "Utility classes for batch job/step testing."}
{"index": 30, "repo": "commons-collections4-4.4", "code": "Package: splitmap\n\nClasses and Interfaces: \nClass AbstractIterableGetMapDecorator<K,V>; // IterableGet that uses a Map<K, V> for the Get<K, V> implementation.\nClass TransformedSplitMap<J,K,U,V>; // Decorates another Map to transform objects that are added.\n", "des": "The \"split map\" concept is that of an object that implements the Put and Get interfaces, with differing generic types."}
{"index": 3093, "repo": "spring-ws-core-4.0.5", "code": "Package: context\n\nClasses and Interfaces: \npublic class DefaultTransportContext extends Object implements TransportContext; // Default implementation of the TransportContext interface.\npublic interface TransportContext; // Strategy interface for determining the current WebServiceConnection.\npublic abstract class TransportContextHolder extends Object; // Simple holder class that associates a TransportContext instance with the current thread.\n", "des": "Abstraction for determining the current TransportInputStream and TransportOutputStream."}
{"index": 1333, "repo": "groovy-all-4.0.13", "code": "Package: io\n\nClasses and Interfaces: \npublic abstract class AbstractReaderSource extends Object implements ReaderSource; // For ReaderSources that can choose a parent class, a base that provides common functionality.\npublic class FileReaderSource extends AbstractReaderSource; // A ReaderSource for source files.\npublic class InputStreamReaderSource extends AbstractReaderSource; // A ReaderSource for source strings.\npublic class NullWriter extends Writer; // A Writer that eats its input.\npublic interface ReaderSource extends HasCleanup; // An interface for things that can supply (and potentially resupply) a Reader on a source stream.\npublic class StringReaderSource extends AbstractReaderSource; // A ReaderSource for source strings.\npublic class URLReaderSource extends AbstractReaderSource; // A ReaderSource for source files hosted at a URL.\n", "des": "Internal classes for Groovier Input/Output."}
{"index": 478, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: harness\n\nClasses and Interfaces: \nInterface JvmInitializer; // A service interface for defining one-time initialization of the JVM during pipeline execution.\n", "des": "Utilities for configuring worker environment."}
{"index": 12, "repo": "connect-api-3.5.0", "code": "Package: predicates\n\nClasses and Interfaces: \nInterface Predicate<R extends ConnectRecord<R>>; // A predicate on records.\n", "des": "Provides a pluggable interface for describing when a Transformation should be applied to a record."}
{"index": 2564, "repo": "pulsar-common-3.0.0", "code": "Package: schema\n\nClasses and Interfaces: \npublic class BytesSchemaVersion extends Object implements SchemaVersion, Comparable<BytesSchemaVersion>; // Bytes schema version.\npublic static interface BytesSchemaVersion.ByteArrayComparator extends Comparator<byte[]>, Serializable; // This interface helps to compare byte arrays.\npublic class DeleteSchemaResponse extends Object; // Response for schema deletion.\npublic final class EmptyVersion extends Object implements SchemaVersion; // Empty schema version.\npublic class GetAllVersionsSchemaResponse extends Object; // Response containing all schemas.\npublic class GetSchemaResponse extends Object; // Response containing information about a schema.\npublic final class LatestVersion extends Object implements SchemaVersion; // Latest schema version.\npublic class LongSchemaVersionResponse extends Object; // Response containing the schema version field.\npublic class PostSchemaResponse extends Object; // Response with the version of a schema.\npublic class ProtobufNativeSchemaData extends Object; // POJO class used for serialize to json-string for SchemaInfo.schema when SchemaType is SchemaType.PROTOBUF_NATIVE.\npublic class SchemaData extends Object; // Schema data.\npublic class SchemaHash extends Object; // Schema hash wrapper with a HashCode inner type.\npublic interface SchemaStorage; // Schema storage.\npublic interface SchemaVersion; // Schema version.\npublic class StoredSchema extends Object; // Stored schema with version.\n", "des": "Classes to work with schemas."}
{"index": 3803, "repo": "lucene-analysis-common-9.7.0", "code": "Package: no\n\nClasses and Interfaces: \nClass NorwegianAnalyzer; // Analyzer for Norwegian.\nClass NorwegianLightStemFilter; // A TokenFilter that applies NorwegianLightStemmer to stem Norwegian words.\nClass NorwegianLightStemFilterFactory; // Factory for NorwegianLightStemFilter.\nClass NorwegianLightStemmer; // Light Stemmer for Norwegian.\nClass NorwegianMinimalStemFilter; // A TokenFilter that applies NorwegianMinimalStemmer to stem Norwegian words.\nClass NorwegianMinimalStemFilterFactory; // Factory for NorwegianMinimalStemFilter.\nClass NorwegianMinimalStemmer; // Minimal Stemmer for Norwegian Bokmål (no-nb) and Nynorsk (no-nn)\nClass NorwegianNormalizationFilter; // This filter normalize use of the interchangeable Scandinavian characters æÆäÄöÖøØ and folded variants (ae, oe, aa) by transforming them to åÅæÆøØ.\nClass NorwegianNormalizationFilterFactory; // Factory for NorwegianNormalizationFilter.\n", "des": "Analyzer for Norwegian."}
{"index": 797, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: pattern\n\nClasses and Interfaces: \nClass PatternCaptureGroupFilterFactory; // Factory for PatternCaptureGroupTokenFilter.\nClass PatternCaptureGroupTokenFilter; // CaptureGroup uses Java regexes to emit multiple tokens - one for each capture group in one or more patterns.\nClass PatternReplaceCharFilter; // CharFilter that uses a regular expression for the target of replace string.\nClass PatternReplaceCharFilterFactory; // Factory for PatternReplaceCharFilter.\nClass PatternReplaceFilter; // A TokenFilter which applies a Pattern to each token in the stream, replacing match occurrences with the specified replacement string.\nClass PatternReplaceFilterFactory; // Factory for PatternReplaceFilter.\nClass PatternTokenizer; // This tokenizer uses regex pattern matching to construct distinct tokens for the input stream.\nClass PatternTokenizerFactory; // Factory for PatternTokenizer.\nClass PatternTypingFilter; // Set a type attribute to a parameterized value when tokens are matched by any of a several regex patterns.\nClass PatternTypingFilter.PatternTypingRule; // Value holding class for pattern typing rules.\nClass PatternTypingFilterFactory; // Provides a filter that will analyze tokens with the analyzer from an arbitrary field type.\nClass SimplePatternSplitTokenizer; // This tokenizer uses a Lucene RegExp or (expert usage) a pre-built determinized Automaton, to locate tokens.\nClass SimplePatternSplitTokenizerFactory; // Factory for SimplePatternSplitTokenizer, for producing tokens by splitting according to the provided regexp.\nClass SimplePatternTokenizer; // This tokenizer uses a Lucene RegExp or (expert usage) a pre-built determinized Automaton, to locate tokens.\nClass SimplePatternTokenizerFactory; // Factory for SimplePatternTokenizer, for matching tokens based on the provided regexp.\n", "des": "Set of components for pattern-based (regex) analysis."}
{"index": 2118, "repo": "spring-retry-2.0.2", "code": "Package: policy\n\nClasses and Interfaces: \npublic class AlwaysRetryPolicy extends NeverRetryPolicy; // A RetryPolicy that always permits a retry.\npublic class BinaryExceptionClassifierRetryPolicy extends Object implements RetryPolicy; // A policy, that is based on BinaryExceptionClassifier.\npublic class CircuitBreakerRetryPolicy extends Object implements RetryPolicy;\npublic class CompositeRetryPolicy extends Object implements RetryPolicy; // A RetryPolicy that composes a list of other policies and delegates calls to them in order.\npublic class ExceptionClassifierRetryPolicy extends Object implements RetryPolicy; // A RetryPolicy that dynamically adapts to one of a set of injected policies according to the value of the latest exception.\npublic class ExpressionRetryPolicy extends SimpleRetryPolicy implements org.springframework.beans.factory.BeanFactoryAware; // Subclass of SimpleRetryPolicy that delegates to super.canRetry() and, if true, further evaluates an expression against the last thrown exception.\npublic class MapRetryContextCache extends Object implements RetryContextCache; // Map-based implementation of RetryContextCache.\npublic class MaxAttemptsRetryPolicy extends Object implements RetryPolicy; // Simple retry policy that is aware only about attempt count and retries a fixed number of times.\npublic class NeverRetryPolicy extends Object implements RetryPolicy; // A RetryPolicy that allows the first attempt but never permits a retry.\npublic class RetryCacheCapacityExceededException extends RetryException; // Exception that indicates that a cache limit was exceeded.\npublic interface RetryContextCache; // Simple map-like abstraction for stateful retry policies to use when storing and retrieving RetryContext instances.\npublic class SimpleRetryPolicy extends Object implements RetryPolicy; // Simple retry policy that retries a fixed number of times for a set of named exceptions (and subclasses).\npublic class SoftReferenceMapRetryContextCache extends Object implements RetryContextCache; // Map-based implementation of RetryContextCache.\npublic class TimeoutRetryPolicy extends Object implements RetryPolicy; // A RetryPolicy that allows a retry only if it hasn't timed out.\n", "des": "Infrastructure implementations of retry policy concerns."}
{"index": 2419, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: servlet\n\nClasses and Interfaces: \n@AutoConfiguration(after={ServletManagementContextAutoConfiguration.class,HealthEndpointAutoConfiguration.class,InfoEndpointAutoConfiguration.class}) @ConditionalOnProperty(prefix=\"management.cloudfoundry\", name=\"enabled\", matchIfMissing=true) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.springframework.web.servlet.DispatcherServlet.class) @ConditionalOnBean(org.springframework.web.servlet.DispatcherServlet.class) @ConditionalOnCloudPlatform(CLOUD_FOUNDRY) public class CloudFoundryActuatorAutoConfiguration extends Object; // Auto-configuration to expose actuator endpoints for Cloud Foundry to use.\n@ConditionalOnClass({org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer.class,org.springframework.security.config.annotation.web.builders.WebSecurity.class}) @Configuration(proxyBeanMethods=false) public static class CloudFoundryActuatorAutoConfiguration.IgnoredCloudFoundryPathsWebSecurityConfiguration extends Object; // WebSecurityConfigurer to tell Spring Security to ignore cloudfoundry specific paths.\n@EndpointCloudFoundryExtension(endpoint=org.springframework.boot.actuate.health.HealthEndpoint.class) public class CloudFoundryHealthEndpointWebExtension extends Object; // @EndpointExtension for the HealthEndpoint that always exposes full health details.\n@EndpointCloudFoundryExtension(endpoint=org.springframework.boot.actuate.info.InfoEndpoint.class) public class CloudFoundryInfoEndpointWebExtension extends Object; // @EndpointExtension for the InfoEndpoint that always exposes full git details.\n", "des": "Auto-configuration for actuator Cloud Foundry concerns using Spring MVC."}
{"index": 2230, "repo": "spring-data-commons-3.1.2", "code": "Package: type\n\nSub Packages: \npackage type.classreading; // Support classes for reading annotation and class-level metadata.\n\nClasses and Interfaces: \n@Deprecated public interface MethodsMetadata extends ClassMetadata;\n", "des": "Core support package for type introspection."}
{"index": 1782, "repo": "spring-integration-file-6.1.2", "code": "Package: dsl\n\nClasses and Interfaces: \npublic class FileInboundChannelAdapterSpec extends org.springframework.integration.dsl.MessageSourceSpec<FileInboundChannelAdapterSpec,FileReadingMessageSource> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessageSourceSpec for a FileReadingMessageSource.\npublic abstract class Files extends Object; // The Spring Integration File components Factory.\npublic class FileSplitterSpec extends org.springframework.integration.dsl.MessageHandlerSpec<FileSplitterSpec,FileSplitter>; // The MessageHandlerSpec for the FileSplitter.\npublic abstract class FileTransferringMessageHandlerSpec<F,S extends FileTransferringMessageHandlerSpec<F,S>> extends org.springframework.integration.dsl.MessageHandlerSpec<S,FileTransferringMessageHandler<F>> implements org.springframework.integration.dsl.ComponentsRegistration; // The MessageHandlerSpec for the FileTransferringMessageHandler.\npublic class FileWritingMessageHandlerSpec extends org.springframework.integration.dsl.MessageHandlerSpec<FileWritingMessageHandlerSpec,FileWritingMessageHandler> implements org.springframework.integration.dsl.ComponentsRegistration; // The MessageHandlerSpec for the FileWritingMessageHandler.\npublic abstract class RemoteFileInboundChannelAdapterSpec<F,S extends RemoteFileInboundChannelAdapterSpec<F,S,MS>,MS extends AbstractInboundFileSynchronizingMessageSource<F>> extends org.springframework.integration.dsl.MessageSourceSpec<S,MS> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessageSourceSpec for an AbstractInboundFileSynchronizingMessageSource.\npublic abstract class RemoteFileOutboundGatewaySpec<F,S extends RemoteFileOutboundGatewaySpec<F,S>> extends org.springframework.integration.dsl.MessageHandlerSpec<S,AbstractRemoteFileOutboundGateway<F>> implements org.springframework.integration.dsl.ComponentsRegistration; // The MessageHandlerSpec for the AbstractRemoteFileOutboundGateway.\n", "des": "Provides File Components support for Spring Integration Java DSL."}
{"index": 2152, "repo": "wicket-core-10.0.0-M1", "code": "Package: link\n\nClasses and Interfaces: \npublic abstract class AbstractLink extends WebMarkupContainer; // Base class that that contains functionality for rendering disabled links.\npublic class BookmarkablePageLink<T> extends Link<T>; // Renders a stable link which can be cached in a web browser and used at a later time.\npublic class ClientSideImageMap extends Panel; // A client-side image map implementation which allows you to \"attach\" the map to any existing Image component.\npublic class DisabledAttributeLinkBehavior extends Behavior; // A behavior to add attribute \"disabled\" to a Link component when it is disabled.\npublic class DownloadLink extends Link<File>; // A link that streams a file to the client.\npublic class ExternalLink extends AbstractLink; // A simple anchor link (<a href=\"http://url\">) pointing to any URL.\npublic class InlineFrame extends WebMarkupContainer implements IRequestListener; // Implementation of an inline frame component.\npublic abstract class Link<T> extends AbstractLink implements IRequestListener, IGenericComponent<T,Link<T>>; // Implementation of a hyperlink component.\npublic class PopupCloseLink<T> extends Link<T>; // Closes a popup window and cleans up any related session page map for the popup.\npublic static final class PopupCloseLink.ClosePopupPage extends WebPage; // ClosePopupPage closes the popup window.\npublic class PopupSettings extends Object implements org.apache.wicket.util.io.IClusterable; // A popup specification can be used as a property of the Linkclasses to specify that the link should be rendered with an onClick javascript event handler that opens a new window with the links' URL.\npublic class ResourceLink<T> extends Link<T> implements IRequestListener; // A link to any ResourceReference.\npublic abstract class StatelessLink<T> extends Link<T>; // This link is stateless that means that the url to this link could generate a new page before the link onClick is called.\n", "des": "Link components."}
{"index": 2627, "repo": "shiro-web-2.0.0-alpha-2", "code": "Package: authz\n\nClasses and Interfaces: \npublic abstract class AuthorizationFilter extends AccessControlFilter; // Superclass for authorization-related filters.\npublic class HostFilter extends AuthorizationFilter; // A Filter that can allow or deny access based on the host that sent the request.\npublic class HttpMethodPermissionFilter extends PermissionsAuthorizationFilter; // A filter that translates an HTTP Request's Method (e.g.\npublic final class IpAddressMatcher extends Object; // Matches a request based on IP Address or subnet mask matching against the remote address.\npublic class IpFilter extends AuthorizationFilter; // A Filter that requires the request to be from within a specific set of IP address ranges and / or not from with a specific (denied) set.\npublic interface IpSource; // Represents a source of information for IP restrictions (see IpFilter)\npublic class PermissionsAuthorizationFilter extends AuthorizationFilter; // Filter that allows access if the current user has the permissions specified by the mapped value, or denies access if the user does not have all of the permissions specified.\npublic class PortFilter extends AuthorizationFilter; // A Filter that requires the request to be on a specific port, and if not, redirects to the same URL on that port.\npublic class RolesAuthorizationFilter extends AuthorizationFilter; // Filter that allows access if the current user has the roles specified by the mapped value, or denies access if the user does not have all of the roles specified.\npublic class SslFilter extends PortFilter; // Filter which requires a request to be over SSL.\n", "des": "Servlet Filter implementations that perform authorization (access control) checks based on the Subject's abilities (for example, role or permission checks)."}
{"index": 1004, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: support\n\nClasses and Interfaces: \nClass AbstractAsyncStandaloneMessageReceiver; // Abstract base class for asynchronous standalone, server-side transport objects.\nClass AbstractStandaloneMessageReceiver; // Abstract base class for standalone, server-side transport objects.\nClass EnumerationIterator<T>; // Adapts an Enumeration to follow the interface of Iterator.\nClass SimpleWebServiceMessageReceiverObjectSupport; // Base class for server-side transport objects which have a predefined WebServiceMessageReceiver.\nClass TransportUtils; // Generic utility methods for working with Web service transports.\nClass WebServiceMessageReceiverObjectSupport; // Convenience base class for server-side transport objects.\n", "des": "Classes supporting the org.springframework.ws.transport package."}
{"index": 1852, "repo": "spring-test-6.0.11", "code": "Package: jdbc\n\nClasses and Interfaces: \npublic abstract class JdbcTestUtils extends Object; // JdbcTestUtils is a collection of JDBC related utility functions intended to simplify standard database testing scenarios.\n", "des": "Support classes for tests based on JDBC."}
{"index": 432, "repo": "kafka-streams-3.5.0", "code": "Package: processor\n\nSub Packages: \npackage processor.api; // Provides a low-level programming model (Processor API, aka, PAPI) to express a (stateful) data flow computation over input topics.\n\nClasses and Interfaces: \nInterface BatchingStateRestoreCallback; // Interface for batching restoration of a StateStore It is expected that implementations of this class will not call the StateRestoreCallback.restore(byte[], byte[]) method.\nInterface Cancellable; // Cancellable interface returned in ProcessorContext.schedule(Duration, PunctuationType, Punctuator).\nInterface CommitCallback; // Stores can register this callback to be notified upon successful commit.\nInterface ConnectedStoreProvider; // Provides a set of StoreBuilders that will be automatically added to the topology and connected to the associated processor.\nInterface Processor<K,V>; // Since 3.0.\nInterface ProcessorContext; // Processor context interface.\nInterface ProcessorSupplier<K,V>; // Since 3.0.\nInterface Punctuator; // A functional interface used as an argument to ProcessorContext.schedule(Duration, PunctuationType, Punctuator).\nInterface RecordContext; // The context associated with the current record being processed by a Processor\nInterface StateRestoreCallback; // Restoration logic for log-backed state stores upon restart, it takes one record at a time from the logs to apply to the restoring state.\nInterface StateRestoreListener; // Class for listening to various states of the restoration process of a StateStore.\nInterface StateStore; // A storage engine for managing state maintained by a stream processor.\nInterface StateStoreContext; // State store context interface.\nInterface StreamPartitioner<K,V>; // Determine how records are distributed among the partitions in a Kafka topic.\nInterface TimestampExtractor; // An interface that allows the Kafka Streams framework to extract a timestamp from an instance of ConsumerRecord.\nInterface TopicNameExtractor<K,V>; // An interface that allows to dynamically determine the name of the Kafka topic to send at the sink node of the topology.\nClass AbstractProcessor<K,V>; // Since 3.0.\nClass FailOnInvalidTimestamp; // Retrieves embedded metadata timestamps from Kafka messages.\nClass LogAndSkipOnInvalidTimestamp; // Retrieves embedded metadata timestamps from Kafka messages.\n", "des": "Provides a low-level programming model (Processor API, aka, PAPI) to express a (stateful) data flow computation over input topics."}
{"index": 2664, "repo": "spring-data-cassandra-4.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic class CassandraRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport; // ImportBeanDefinitionRegistrar to setup Cassandra repositories via EnableCassandraRepositories.\npublic class CassandraRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport; // RepositoryConfigurationExtension for Cassandra.\n@Documented @Target(TYPE) @Retention(RUNTIME) @Inherited @Import(CassandraRepositoriesRegistrar.class) public @interface EnableCassandraRepositories; // Annotation to enable Cassandra repositories.\n@Documented @Target(TYPE) @Retention(RUNTIME) @Inherited @Import(org.springframework.data.cassandra.repository.config.ReactiveCassandraRepositoriesRegistrar.class) public @interface EnableReactiveCassandraRepositories; // Annotation to activate reactive Cassandra repositories.\npublic class ReactiveCassandraRepositoryConfigurationExtension extends CassandraRepositoryConfigurationExtension; // RepositoryConfigurationExtension for Cassandra.\n", "des": "Support infrastructure for the configuration of Apache Cassandra specific repositories."}
{"index": 1182, "repo": "commons-math3-3.6.1", "code": "Package: util\n\nClasses and Interfaces: \nInterface MapDataVisualization; // Interface for algorithms that compute some metrics of the projection of data on a 2D-map.\nInterface MapVisualization; // Interface for algorithms that compute some property of a 2D-map.\nClass HitHistogram; // Computes the hit histogram.\nClass LocationFinder; // Helper class to find the grid coordinates of a neuron.\nClass LocationFinder.Location; // Container holding a (row, column) pair.\nClass QuantizationError; // Computes the quantization error histogram.\nClass SmoothedDataHistogram; // Visualization of high-dimensional data projection on a 2D-map.\nClass TopographicErrorHistogram; // Computes the topographic error histogram.\nClass UnifiedDistanceMatrix; // U-Matrix visualization of high-dimensional data projection.\n", "des": "Utilities to visualize two-dimensional neural networks."}
{"index": 3477, "repo": "hilt-android-2.47", "code": "Package: migration\n\nClasses and Interfaces: \nClass CustomInjection; // Utility methods for injecting the application when using CustomInject.\nClass OptionalInjectCheck; // Utility methods for validating if an AndroidEntryPoint-annotated class that is also annotated with OptionalInject was injected by Hilt.\nAnnotation Type CustomInject; // When used on a HiltAndroidApp-annotated application, this causes the application to no longer inject itself in onCreate and instead allows it to be injected at some other time.\nAnnotation Type OptionalInject; // When placed on an AndroidEntryPoint-annotated activity / fragment / view / etc, allows injection to occur optionally based on whether or not the application is using Hilt.\n", "des": "This package contains Android APIs to help migrating a codebase to Hilt."}
{"index": 1376, "repo": "spring-boot-actuator-3.1.1", "code": "Package: context\n\nSub Packages: \npackage context.properties; // Actuator support relating to external configuration properties.\n\nClasses and Interfaces: \n@Endpoint(id=\"shutdown\", enableByDefault=false) public class ShutdownEndpoint extends Object implements org.springframework.context.ApplicationContextAware; // @Endpoint to shutdown the ApplicationContext.\npublic static class ShutdownEndpoint.ShutdownDescriptor extends Object implements OperationResponseBody; // Description of the shutdown.\n", "des": "Actuator support relating to Spring Context."}
{"index": 2084, "repo": "spring-webmvc-6.0.11", "code": "Package: freemarker\n\nClasses and Interfaces: \npublic interface FreeMarkerConfig; // Interface to be implemented by objects that configure and manage a FreeMarker Configuration object in a web environment.\npublic class FreeMarkerConfigurer extends org.springframework.ui.freemarker.FreeMarkerConfigurationFactory implements FreeMarkerConfig, org.springframework.beans.factory.InitializingBean, org.springframework.context.ResourceLoaderAware; // JavaBean to configure FreeMarker for web usage, via the \"configLocation\" and/or \"freemarkerSettings\" and/or \"templateLoaderPath\" properties.\npublic class FreeMarkerView extends AbstractTemplateView; // View using the FreeMarker template engine.\npublic class FreeMarkerViewResolver extends AbstractTemplateViewResolver; // Convenience subclass of UrlBasedViewResolver that supports FreeMarkerView (i.e.\n", "des": "Support classes for the integration of FreeMarker as Spring web view technology."}
{"index": 3336, "repo": "opencms-core-15.0", "code": "Package: searchindex\n\nClasses and Interfaces: \nClass CmsIndexingReportThread; // Implements methods to utilize a report thread for CmsIndexingReport.\nClass CmsSearchindexApp; // Class for the search index app.\nClass CmsSearchindexAppConfiguration; // Configuration class for the searchindex app.\nClass CmsSearchindexRebuild; // Class for the GUI to rebuild indexes.\nClass CmsSearchIndexTable; // Class for the vaadin table to show the indexes.\nClass CmsSourceDialog; // Class for the dialog to show source information of a given index.\n", "des": "Contains classes of the searchindex app."}
{"index": 167, "repo": "ignite-core-2.15.0", "code": "Package: auth\n\nClasses and Interfaces: \nClass AuthenticationCommandHandler; // Authentication handler.\n", "des": "REST authentication command."}
{"index": 13, "repo": "connect-api-3.5.0", "code": "Package: util\n\nClasses and Interfaces: \nClass ConnectorUtils; // Utilities that connector implementations might find useful.\n", "des": "Provides common utilities that can be used in component implementations."}
{"index": 2464, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: jmx\n\nClasses and Interfaces: \n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.jmx.JmxMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"jmx\") @EnableConfigurationProperties(JmxProperties.class) public class JmxMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to JMX.\n@ConfigurationProperties(prefix=\"management.jmx.metrics.export\") public class JmxProperties extends Object; // @ConfigurationProperties for configuring JMX metrics export.\n", "des": "Support for exporting actuator metrics to JMX."}
{"index": 2121, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "Package: plugin\n\nClasses and Interfaces: \n@DisableCachingByDefault(because=\"Not worth caching\") public class ResolveMainClassName extends DefaultTask; // Task for resolving the name of the application's main class.\npublic class SpringBootAotPlugin extends Object implements Plugin<Project>; // Gradle plugin for Spring Boot AOT.\npublic class SpringBootPlugin extends Object implements Plugin<Project>; // Gradle plugin for Spring Boot.\n", "des": "Central classes for the Spring Boot Gradle plugin."}
{"index": 2404, "repo": "spring-batch-core-5.0.2", "code": "Package: step\n\nSub Packages: \npackage step.builder; // Step level builders for java based job configuration.\npackage step.factory; // Factories for step level components.\npackage step.item; // Specific implementations of step concerns for item-oriented approach.\npackage step.job; // JobStep and related components.\npackage step.skip; // Specific implementations of skip concerns for items in a step.\npackage step.tasklet; // Interfaces and generic implementations of tasklet concerns.\n\nClasses and Interfaces: \npublic abstract class AbstractStep extends Object implements Step, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.BeanNameAware; // A Step implementation that provides common behavior to subclasses, including registering and calling listeners.\npublic class FatalStepExecutionException extends UnexpectedJobExecutionException;\npublic class NoSuchStepException extends RuntimeException; // Exception to signal that a step was requested that is unknown or does not exist.\npublic class NoWorkFoundStepExecutionListener extends Object implements StepExecutionListener; // Fails the step if no items have been processed ( item count is 0).\npublic interface StepHolder; // Interface for holders of a Step as a convenience for callers who need access to the underlying instance.\npublic interface StepInterruptionPolicy; // Strategy interface for an interruption policy.\npublic interface StepLocator; // Interface for locating a Step instance by name.\npublic class StepLocatorStepFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Step>; // Convenience factory for Step instances given a StepLocator.\npublic class ThreadStepInterruptionPolicy extends Object implements StepInterruptionPolicy; // Policy that checks the current thread to see if it has been interrupted.\n", "des": "Specific implementations of step concerns."}
{"index": 3554, "repo": "guava-32.1.1-jre", "code": "Package: eventbus\n\nClasses and Interfaces: \nInterface SubscriberExceptionHandler; // Handler for exceptions thrown by event subscribers.\nClass AsyncEventBus; // An EventBus that takes the Executor of your choice and uses it to dispatch events, allowing dispatch to occur asynchronously.\nClass DeadEvent; // Wraps an event that was posted, but which had no subscribers and thus could not be delivered.\nClass EventBus; // Dispatches events to listeners, and provides ways for listeners to register themselves.\nClass SubscriberExceptionContext; // Context for an exception thrown by a subscriber.\nAnnotation Type AllowConcurrentEvents; // Marks an event subscriber method as being thread-safe.\nAnnotation Type Subscribe; // Marks a method as an event subscriber.\n", "des": "Discouraged in favor of dependency injection and concurrency frameworks, EventBus allows publish-subscribe-style communication."}
{"index": 1132, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: nodelabels\n\nClasses and Interfaces: \nInterface NodeDescriptorsProvider<T>; // Interface which will be responsible for fetching node descriptors, a node descriptor could be a NodeLabel or a NodeAttribute.\nClass AbstractNodeDescriptorsProvider<T>; // Provides base implementation of NodeDescriptorsProvider with Timer and expects subclass to provide TimerTask which can fetch node descriptors.\nClass ConfigurationNodeAttributesProvider; // Configuration based node attributes provider.\nClass ConfigurationNodeLabelsProvider; // Provides Node's Labels by constantly monitoring the configuration.\nClass NodeAttributesProvider; // Abstract class which will be responsible for fetching the node attributes.\nClass NodeDescriptorsScriptRunner<T>; // A node descriptors script runner periodically runs a script, parses the output to collect desired descriptors, and then post these descriptors to the given NodeDescriptorsProvider.\nClass NodeLabelsProvider; // Abstract class which will be responsible for fetching the node labels.\nClass ScriptBasedNodeAttributesProvider; // Node attribute provider that periodically runs a script to collect node attributes.\nClass ScriptBasedNodeLabelsProvider; // The class which provides functionality of getting the labels of the node using the configured node labels provider script.\n", "des": "Package to encapsulate classes used to handle node labels and node attributes in NM."}
{"index": 1225, "repo": "spring-plugin-core-3.0.0", "code": "Package: core\n\nSub Packages: \npackage core.config; // This package contains configuration support classes to ease registry configuration with Spring namespaces.\npackage core.support; // This package contains support classes to create bean lists or plugin registry instances out of beans implementing a certain interface.\n\nClasses and Interfaces: \npublic class OrderAwarePluginRegistry<T extends Plugin<S>,S> extends SimplePluginRegistry<T,S>; // PluginRegistry implementation that be made aware of a certain ordering of Plugins.\npublic interface Plugin<S>; // Central interface for plugins for the system.\npublic interface PluginRegistry<T extends Plugin<S>,S> extends Iterable<T>; // Registry for Plugins.\npublic abstract class PluginRegistrySupport<T extends Plugin<S>,S> extends Object implements PluginRegistry<T,S>, Iterable<T>; // Base class for PluginRegistry implementations.\npublic class SimplePluginRegistry<T extends Plugin<S>,S> extends PluginRegistrySupport<T,S>; // Basic implementation of PluginRegistry.\n", "des": "This package contains the core plugin API."}
{"index": 2723, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: function\n\nClasses and Interfaces: \npublic class FunctionItemProcessor<I,O> extends Object implements ItemProcessor<I,O>; // An ItemProcessor implementation that delegates to a Function\n", "des": "Adapters for java.util.function components."}
{"index": 2026, "repo": "spring-messaging-6.0.11", "code": "Package: handler\n\nSub Packages: \npackage handler.annotation; // Annotations and support classes for handling messages.\npackage handler.invocation; // Common infrastructure for invoking message handler methods.\n\nClasses and Interfaces: \npublic abstract class AbstractMessageCondition<T extends AbstractMessageCondition<T>> extends Object implements MessageCondition<T>; // Base class for MessageCondition's that pre-declares abstract methods AbstractMessageCondition.getContent() and AbstractMessageCondition.getToStringInfix() in order to provide implementations of AbstractMessageCondition.equals(Object), AbstractMessageCondition.hashCode(), and AbstractMessageCondition.toString().\npublic class CompositeMessageCondition extends Object implements MessageCondition<CompositeMessageCondition>; // Composite MessageCondition that delegates to other message conditions.\npublic class DestinationPatternsMessageCondition extends AbstractMessageCondition<DestinationPatternsMessageCondition>; // MessageCondition to match the destination header of a Message against one or more patterns through a RouteMatcher.\npublic class HandlerMethod extends Object; // Encapsulates information about a handler method consisting of a method and a bean.\npublic interface MessageCondition<T>; // Contract for mapping conditions to messages.\npublic interface MessagingAdviceBean extends org.springframework.core.Ordered; // Represents a Spring-managed bean with cross-cutting functionality to be applied to one or more Spring beans with annotation-based message handling methods.\n", "des": "Basic abstractions for working with message handler methods."}
{"index": 1512, "repo": "spring-context-6.0.11", "code": "Package: expression\n\nClasses and Interfaces: \npublic final class AnnotatedElementKey extends Object implements Comparable<AnnotatedElementKey>; // Represent an AnnotatedElement on a particular Class and is suitable as a key.\npublic class BeanExpressionContextAccessor extends Object implements org.springframework.expression.PropertyAccessor; // EL property accessor that knows how to traverse the beans and contextual objects of a Spring BeanExpressionContext.\npublic class BeanFactoryAccessor extends Object implements org.springframework.expression.PropertyAccessor; // EL property accessor that knows how to traverse the beans of a Spring BeanFactory.\npublic class BeanFactoryResolver extends Object implements org.springframework.expression.BeanResolver; // EL bean resolver that operates against a Spring BeanFactory.\npublic abstract class CachedExpressionEvaluator extends Object; // Shared utility class used to evaluate and cache SpEL expressions that are defined on AnnotatedElement.\nprotected static class CachedExpressionEvaluator.ExpressionKey extends Object implements Comparable<CachedExpressionEvaluator.ExpressionKey>; // An expression key.\npublic class EnvironmentAccessor extends Object implements org.springframework.expression.PropertyAccessor; // Read-only EL property accessor that knows how to retrieve keys of a Spring Environment instance.\npublic class MapAccessor extends Object implements org.springframework.expression.spel.CompilablePropertyAccessor; // EL property accessor that knows how to traverse the keys of a standard Map.\npublic class MethodBasedEvaluationContext extends org.springframework.expression.spel.support.StandardEvaluationContext; // A method-based EvaluationContext that provides explicit support for method-based invocations.\npublic class StandardBeanExpressionResolver extends Object implements org.springframework.beans.factory.config.BeanExpressionResolver; // Standard implementation of the BeanExpressionResolver interface, parsing and evaluating Spring EL using Spring's expression module.\n", "des": "Expression parsing support within a Spring application context."}
{"index": 768, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: custom\n\nClasses and Interfaces: \nClass CustomAnalyzer; // A general-purpose Analyzer that can be created with a builder-style API.\nClass CustomAnalyzer.Builder; // Builder for CustomAnalyzer.\nClass CustomAnalyzer.ConditionBuilder; // Factory class for a ConditionalTokenFilter\n", "des": "A general-purpose Analyzer that can be created with a builder-style API."}
{"index": 3225, "repo": "commons-configuration2-2.9.0", "code": "Package: sync\n\nClasses and Interfaces: \nInterface Synchronizer; // An interface controlling synchronization of configuration instances.\nInterface SynchronizerSupport; // Definition of an interface for objects that can be associated with a Synchronizer.\nClass ReadWriteSynchronizer; // A special implementation of Synchronizer based on the JDK's ReentrantReadWriteLock class.\nEnum LockMode; // An enumeration used by SynchronizerSupport to specify how an object is locked.\nEnum NoOpSynchronizer; // An implementation of the Synchronizer interface which does not perform any synchronization.\n", "des": "A package containing interfaces and classes related to synchronization of configurations."}
{"index": 3065, "repo": "spring-ws-core-4.0.5", "code": "Package: method\n\nSub Packages: \npackage method.dom; // Provides DOM-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces.\npackage method.jaxb; // Provides JAXB2-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces.\n\nClasses and Interfaces: \npublic abstract class AbstractPayloadMethodProcessor extends org.springframework.xml.transform.TransformerObjectSupport implements MethodArgumentResolver, MethodReturnValueHandler; // Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations based on RequestPayload and ResponsePayload annotations.\npublic abstract class AbstractPayloadSourceMethodProcessor extends AbstractPayloadMethodProcessor; // Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations based on Sources.\npublic class MarshallingPayloadMethodProcessor extends AbstractPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that uses Marshaller and Unmarshaller to support marshalled objects.\npublic class MessageContextMethodArgumentResolver extends Object implements MethodArgumentResolver; // Implementation of MethodArgumentResolver that supports MessageContext arguments.\npublic interface MethodArgumentResolver; // Strategy interface used to resolve method parameters into arguments.\npublic interface MethodReturnValueHandler; // Strategy interface used to handle method return values.\npublic class SourcePayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports Source objects.\npublic class StaxPayloadMethodArgumentResolver extends org.springframework.xml.transform.TransformerObjectSupport implements MethodArgumentResolver; // Implementation of MethodArgumentResolver that supports StAX XMLStreamReader and XMLEventReader arguments.\npublic class XPathParamMethodArgumentResolver extends Object implements MethodArgumentResolver; // Implementation of MethodArgumentResolver that supports the @XPathParam annotation.\n", "des": "Provides the MethodArgumentResolver and MethodReturnValueHandler abstractions, and various implementations thereof."}
{"index": 613, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: packageadmin\n\nClasses and Interfaces: \nInterface ExportedPackage; // The PackageAdmin service has been replaced by the org.osgi.framework.wiring package.\nInterface PackageAdmin; // This service has been replaced by the org.osgi.framework.wiring package.\nInterface RequiredBundle; // The PackageAdmin service has been replaced by the org.osgi.framework.wiring package.\n", "des": "Package Admin Package Version 1.2."}
{"index": 2407, "repo": "spring-batch-core-5.0.2", "code": "Package: item\n\nClasses and Interfaces: \npublic class BatchRetryTemplate extends Object implements org.springframework.retry.RetryOperations; // A special purpose retry template that deals specifically with multi-valued stateful retry.\npublic class ChunkMonitor extends ItemStreamSupport; // Manage the offset data between the last successful commit and updates made to an input chunk.\npublic static class ChunkMonitor.ChunkMonitorData extends Object;\npublic class ChunkOrientedTasklet<I> extends Object implements Tasklet; // A Tasklet implementing variations on read-process-write item handling.\npublic interface ChunkProcessor<I>; // Interface defined for processing Chunks.\npublic interface ChunkProvider<T>; // Interface for providing Chunks to be processed, used by the ChunkOrientedTasklet\npublic class DefaultItemFailureHandler extends ItemListenerSupport<Object,Object>; // Default implementation of the ItemListenerSupport class that writes all exceptions via commons logging.\npublic class FaultTolerantChunkProcessor<I,O> extends SimpleChunkProcessor<I,O>; // FaultTolerant implementation of the ChunkProcessor interface, that allows for skipping or retry of items that cause exceptions during writing.\npublic class FaultTolerantChunkProvider<I> extends SimpleChunkProvider<I>; // FaultTolerant implementation of the ChunkProvider interface, that allows for skipping or retry of items that cause exceptions during reading or processing.\npublic class ForceRollbackForWriteSkipException extends RuntimeException; // Fatal exception to be thrown when a rollback must be forced, typically after catching an exception that otherwise would not cause a rollback.\n@FunctionalInterface public interface KeyGenerator; // Interface for defining keys to uniquely identify items.\npublic class SimpleChunkProcessor<I,O> extends Object implements ChunkProcessor<I>, org.springframework.beans.factory.InitializingBean; // Simple implementation of the ChunkProcessor interface that handles basic item writing and processing.\npublic class SimpleChunkProvider<I> extends Object implements ChunkProvider<I>; // Simple implementation of the ChunkProvider interface that does basic chunk providing from an ItemReader.\npublic class SimpleRetryExceptionHandler extends org.springframework.retry.listener.RetryListenerSupport implements ExceptionHandler; // An ExceptionHandler that is aware of the retry context so that it can distinguish between a fatal exception and one that can be retried.\npublic class SkipOverflowException extends SkipException;\n", "des": "Specific implementations of step concerns for item-oriented approach."}
{"index": 3098, "repo": "spring-ws-core-4.0.5", "code": "Package: provider\n\nClasses and Interfaces: \npublic abstract class AbstractPortTypesProvider extends Object implements PortTypesProvider; // Abstract base class for PortTypesProvider implementations.\npublic interface BindingsProvider; // Strategy for adding Bindings to a Definition.\npublic class DefaultConcretePartProvider extends Object implements BindingsProvider, ServicesProvider; // Default implementation of the BindingsProvider and ServicesProvider interfaces.\npublic class DefaultMessagesProvider extends Object implements MessagesProvider; // Default implementation of the MessagesProvider.\npublic interface ImportsProvider; // Strategy for adding Imports to a Definition.\npublic class InliningXsdSchemaTypesProvider extends org.springframework.xml.transform.TransformerObjectSupport implements TypesProvider; // Implementation of TypesProvider that inlines a XsdSchema or XsdSchemaCollection into the WSDL.\npublic interface MessagesProvider; // Strategy for adding Messages to a Definition.\npublic interface PortTypesProvider; // Strategy for adding PortTypes to a Definition.\npublic interface ServicesProvider; // Strategy for adding Services to a Definition.\npublic class Soap11Provider extends DefaultConcretePartProvider; // Implementation of the BindingsProvider and ServicesProvider interfaces that are SOAP 1.1 specific.\npublic class Soap12Provider extends DefaultConcretePartProvider; // Implementation of the BindingsProvider and ServicesProvider interfaces that are SOAP 1.2 specific.\npublic class SoapProvider extends Object implements BindingsProvider, ServicesProvider; // Implementation of the BindingsProvider and ServicesProvider interfaces that supports SOAP 1.1 and SOAP 1.2.\npublic class SuffixBasedMessagesProvider extends DefaultMessagesProvider; // Implementation of the MessagesProvider interface that is based on suffixes.\npublic class SuffixBasedPortTypesProvider extends AbstractPortTypesProvider; // Implementation of the PortTypesProvider interface that is based on suffixes.\npublic interface TypesProvider; // Strategy for adding Types to a Definition.\n", "des": "Provides a contribution strategy for WSDL definitions."}
{"index": 3839, "repo": "lucene-core-9.7.0", "code": "Package: blocktree\n\nClasses and Interfaces: \nClass FieldReader; // BlockTree's implementation of Terms.\nClass Lucene90BlockTreeTermsReader; // A block-based terms index and dictionary that assigns terms to variable length blocks according to how they share prefixes.\nClass Lucene90BlockTreeTermsWriter; // Block-based terms index and dictionary writer.\nClass Stats; // BlockTree statistics for a single field returned by FieldReader.getStats().\n", "des": "BlockTree terms dictionary."}
{"index": 2318, "repo": "spring-boot-3.1.1", "code": "Package: logback\n\nClasses and Interfaces: \npublic class ColorConverter extends ch.qos.logback.core.pattern.CompositeConverter<ch.qos.logback.classic.spi.ILoggingEvent>; // Logback CompositeConverter colors output using the AnsiOutput class.\npublic class ExtendedWhitespaceThrowableProxyConverter extends ch.qos.logback.classic.pattern.ExtendedThrowableProxyConverter; // ExtendedThrowableProxyConverter that adds some additional whitespace around the stack trace.\npublic class LogbackLoggingSystem extends AbstractLoggingSystem implements org.springframework.beans.factory.aot.BeanFactoryInitializationAotProcessor; // LoggingSystem for logback.\n@Order(2147483647) public static class LogbackLoggingSystem.Factory extends Object implements LoggingSystemFactory; // LoggingSystemFactory that returns LogbackLoggingSystem if possible.\npublic class LogbackLoggingSystemProperties extends LoggingSystemProperties; // LoggingSystemProperties for Logback.\npublic class RootLogLevelConfigurator extends ch.qos.logback.core.spi.ContextAwareBase implements ch.qos.logback.classic.spi.Configurator; // Logback Configurator, registered through META-INF/services, that sets the root log level to Level.INFO.\npublic class WhitespaceThrowableProxyConverter extends ch.qos.logback.classic.pattern.ThrowableProxyConverter; // ThrowableProxyConverter that adds some additional whitespace around the stack trace.\n", "des": "Support for the Logback logging library."}
{"index": 1445, "repo": "spring-data-redis-3.1.2", "code": "Package: convert\n\nClasses and Interfaces: \npublic abstract class Converters extends Object; // Common type converters.\npublic class ListConverter<S,T> extends Object implements Converter<List<S>,List<T>>; // Converts a List of values of one type to a List of values of another type\npublic class LongToBooleanConverter extends Object implements Converter<Long,Boolean>; // Converts Longs to Booleans\npublic class MapConverter<S,T> extends Object implements Converter<Map<S,S>,Map<T,T>>; // Converts a Map of values of one key/value type to a Map of values of another type\npublic enum MapToPropertiesConverter extends Enum<MapToPropertiesConverter> implements Converter<Map<?,?>,Properties>;\npublic class SetConverter<S,T> extends Object implements Converter<Set<S>,Set<T>>; // Converts a Set of values of one type to a Set of values of another type preserving item order.\npublic class StringToDataTypeConverter extends Object implements Converter<String,DataType>; // Converts Strings to DataTypes\npublic class StringToPropertiesConverter extends Object implements Converter<String,Properties>; // Converts Strings to Properties\npublic class StringToRedisClientInfoConverter extends Object implements Converter<String[],List<RedisClientInfo>>; // Converter implementation to create one RedisClientInfo per line entry in given String array.\npublic class TransactionResultConverter<T> extends Object implements Converter<List<Object>,List<Object>>; // Converts the results of transaction exec using a supplied Queue of FutureResults.\n", "des": "Redis specific converters used for sending data and parsing responses."}
{"index": 2588, "repo": "spring-rabbit-3.0.6", "code": "Package: connection\n\nClasses and Interfaces: \npublic abstract class AbstractConnectionFactory extends Object implements ConnectionFactory, org.springframework.beans.factory.DisposableBean, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextClosedEvent>, com.rabbitmq.client.ShutdownListener;\npublic static enum AbstractConnectionFactory.AddressShuffleMode extends Enum<AbstractConnectionFactory.AddressShuffleMode>; // The mode used to shuffle the addresses.\npublic abstract class AbstractRoutingConnectionFactory extends Object implements ConnectionFactory, RoutingConnectionFactory, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Abstract ConnectionFactory implementation that routes AbstractRoutingConnectionFactory.createConnection() calls to one of various target ConnectionFactories based on a lookup key.\npublic class AfterCompletionFailedException extends org.springframework.amqp.AmqpException; // Represents a failure to commit or rollback when performing afterCompletion after the primary transaction completes.\npublic class AutoRecoverConnectionNotCurrentlyOpenException extends org.springframework.amqp.AmqpException; // An exception thrown if the connection is an auto recover connection that is not currently open and is in the process of being recovered.\n@ManagedResource public class CachingConnectionFactory extends AbstractConnectionFactory implements org.springframework.beans.factory.InitializingBean, com.rabbitmq.client.ShutdownListener; // A ConnectionFactory implementation that (when the cache mode is CachingConnectionFactory.CacheMode.CHANNEL (default) returns the same Connection from all CachingConnectionFactory.createConnection() calls, and ignores calls to Connection.close() and caches Channel.\npublic static enum CachingConnectionFactory.CacheMode extends Enum<CachingConnectionFactory.CacheMode>; // The cache mode.\npublic static enum CachingConnectionFactory.ConfirmType extends Enum<CachingConnectionFactory.ConfirmType>; // The type of publisher confirms to use.\n@FunctionalInterface public interface ChannelListener; // A listener for new channel creation and destruction.\n", "des": "Provides classes related to connections."}
{"index": 1477, "repo": "tribuo-core-4.3.1", "code": "Package: tribuo\n\nSub Packages: \npackage tribuo.dataset; // Provides utility datasets which subsample or otherwise transform the wrapped dataset.\npackage tribuo.datasource; // Simple data sources for ingesting or aggregating data.\npackage tribuo.ensemble; // Provides an interface for model prediction combinations, two base classes for ensemble models, a base class for ensemble excuses, and a Bagging implementation.\npackage tribuo.evaluation; // Evaluation base classes, along with code for train/test splits and cross validation.\npackage tribuo.hash; // Provides the base interface and implementations of the Model hashing which obscures the feature names stored in a model.\npackage tribuo.impl; // Provides implementations of base classes and interfaces from org.tribuo.\npackage tribuo.protos; // Classes which control the serialization of Tribuo objects to and from protocol buffers.\npackage tribuo.provenance; // Provides Tribuo specific infrastructure for the Provenance system which tracks models and datasets.\npackage tribuo.sequence; // Provides core classes for working with sequences of Examples.\npackage tribuo.transform; // Provides infrastructure for applying transformations to a Dataset.\npackage tribuo.util; // Provides utilities which don't have other Tribuo dependencies.\n\nClasses and Interfaces: \npublic class CategoricalIDInfo extends CategoricalInfo implements VariableIDInfo; // Same as a CategoricalInfo, but with an additional int id field.\npublic class CategoricalInfo extends SkeletalVariableInfo; // Stores information about Categorical features.\npublic interface ConfigurableDataSource<T extends Output<T>> extends DataSource<T>, com.oracle.labs.mlrg.olcut.config.Configurable; // It's a DataSource that's also Configurable.\npublic abstract class Dataset<T extends Output<T>> extends Object implements Iterable<Example<T>>, ProtoSerializable<org.tribuo.protos.core.DatasetProto>, com.oracle.labs.mlrg.olcut.provenance.Provenancable<DatasetProvenance>, Serializable; // A class for sets of data, which are used to train and evaluate classifiers.\n", "des": "Provides the core interfaces and classes for using Tribuo."}
{"index": 1576, "repo": "spring-cloud-task-core-3.0.3", "code": "Package: support\n\nClasses and Interfaces: \npublic enum DatabaseType extends Enum<DatabaseType>; // Enum representing a database type, such as DB2 or oracle.\npublic class SimpleTaskExplorer extends Object implements TaskExplorer; // TaskExplorer for that gathers task information from a task repository.\npublic class SimpleTaskNameResolver extends Object implements TaskNameResolver, org.springframework.context.ApplicationContextAware; // Simple implementation of the TaskNameResolver interface.\npublic class SimpleTaskRepository extends Object implements TaskRepository; // Records the task execution information to the log and to TaskExecutionDao provided.\npublic class TaskExecutionDaoFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<TaskExecutionDao>; // A FactoryBean implementation that creates the appropriate TaskExecutionDao based on the provided information.\npublic final class TaskRepositoryInitializer extends Object implements org.springframework.beans.factory.InitializingBean; // Utility for initializing the Task Repository's datasource.\n", "des": "Classes used for setting up and supporting a task repositories."}
{"index": 1545, "repo": "spring-context-6.0.11", "code": "Package: scripting\n\nSub Packages: \npackage scripting.bsh; // Package providing integration of BeanShell (and BeanShell2) into Spring's scripting infrastructure.\npackage scripting.config; // Support package for Spring's dynamic language machinery, with XML schema being the primary configuration format.\npackage scripting.groovy; // Package providing integration of Groovy into Spring's scripting infrastructure.\npackage scripting.support; // Support classes for Spring's scripting package.\n\nClasses and Interfaces: \npublic class ScriptCompilationException extends org.springframework.core.NestedRuntimeException; // Exception to be thrown on script compilation failure.\npublic interface ScriptEvaluator; // Spring's strategy interface for evaluating a script.\npublic interface ScriptFactory; // Script definition interface, encapsulating the configuration of a specific script as well as a factory method for creating the actual scripted Java Object.\npublic interface ScriptSource; // Interface that defines the source of a script.\n", "des": "Core interfaces for Spring's scripting support."}
{"index": 631, "repo": "freemarker-2.3.32", "code": "Package: log\n\nClasses and Interfaces: \nClass Logger; // Delegates logger creation to an actual logging library.\n", "des": "Logging facility; dispatches FreeMarker log messages to the chosen logger library."}
{"index": 1276, "repo": "spring-core-6.0.11", "code": "Package: buffer\n\nClasses and Interfaces: \npublic interface CloseableDataBuffer extends DataBuffer, AutoCloseable; // Extension of DataBuffer that allows for buffers that can be used in a try-with-resources statement.\npublic interface DataBuffer; // Basic abstraction over byte buffers.\npublic static interface DataBuffer.ByteBufferIterator extends Iterator<ByteBuffer>, Closeable; // A dedicated iterator type that ensures the lifecycle of iterated ByteBuffer elements.\npublic interface DataBufferFactory; // A factory for DataBuffers, allowing for allocation and wrapping of data buffers.\npublic class DataBufferLimitException extends IllegalStateException; // Exception that indicates the cumulative number of bytes consumed from a stream of DataBuffer's exceeded some pre-configured limit.\npublic abstract class DataBufferUtils extends Object; // Utility class for working with DataBuffers.\npublic static interface DataBufferUtils.Matcher; // Contract to find delimiter(s) against one or more data buffers that can be passed one at a time to the DataBufferUtils.Matcher.match(DataBuffer) method.\npublic class DataBufferWrapper extends Object implements DataBuffer; // Provides a convenient implementation of the DataBuffer interface that can be overridden to adapt the delegate.\npublic class DefaultDataBuffer extends Object implements DataBuffer; // Default implementation of the DataBuffer interface that uses a ByteBuffer internally.\npublic class DefaultDataBufferFactory extends Object implements DataBufferFactory; // Default implementation of the DataBufferFactory interface.\npublic class LimitedDataBufferList extends ArrayList<DataBuffer>; // Custom List to collect data buffers with and enforce a limit on the total number of bytes buffered.\npublic final class Netty5DataBuffer extends Object implements CloseableDataBuffer, TouchableDataBuffer; // Implementation of the DataBuffer interface that wraps a Netty 5 Buffer.\npublic class Netty5DataBufferFactory extends Object implements DataBufferFactory; // Implementation of the DataBufferFactory interface based on a Netty 5 BufferAllocator.\npublic class NettyDataBuffer extends Object implements PooledDataBuffer; // Implementation of the DataBuffer interface that wraps a Netty 4 ByteBuf.\npublic class NettyDataBufferFactory extends Object implements DataBufferFactory; // Implementation of the DataBufferFactory interface based on a Netty 4 ByteBufAllocator.\npublic interface PooledDataBuffer extends TouchableDataBuffer; // Extension of DataBuffer that allows for buffers that share a memory pool.\n", "des": "Generic abstraction for working with byte buffer implementations."}
{"index": 171, "repo": "ignite-core-2.15.0", "code": "Package: user\n\nClasses and Interfaces: \nClass UserActionCommandHandler; // User actions handler.\n", "des": "REST user commands."}
{"index": 591, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: datalocation\n\nClasses and Interfaces: \nInterface Location; // A Location represents a URL which may have a default value, may be read only, may or may not have a current value and may be cascaded on to a parent location.\n", "des": "Provides the Location service."}
{"index": 1802, "repo": "spring-aop-6.0.11", "code": "Package: autoproxy\n\nClasses and Interfaces: \npublic class AspectJAwareAdvisorAutoProxyCreator extends AbstractAdvisorAutoProxyCreator; // AbstractAdvisorAutoProxyCreator subclass that exposes AspectJ's invocation context and understands AspectJ's rules for advice precedence when multiple pieces of advice come from the same aspect.\n", "des": "Base classes enabling auto-proxying based on AspectJ."}
{"index": 1755, "repo": "spring-data-mongodb-4.1.2", "code": "Package: index\n\nClasses and Interfaces: \n@Target(TYPE) @Documented @Repeatable(CompoundIndexes.class) @Retention(RUNTIME) public @interface CompoundIndex; // Mark a class to use compound indexes.\npublic class CompoundIndexDefinition extends Index; // Index definition to span multiple keys.\n@Target(TYPE) @Documented @Retention(RUNTIME) public @interface CompoundIndexes; // Container annotation that allows to collect multiple CompoundIndex annotations.\npublic class GeospatialIndex extends Object implements IndexDefinition; // Value object to capture data to create a geo index.\n@Target({FIELD,ANNOTATION_TYPE}) @Retention(RUNTIME) public @interface GeoSpatialIndexed; // Mark a field to be indexed using MongoDB's geospatial indexing feature.\npublic enum GeoSpatialIndexType extends Enum<GeoSpatialIndexType>; // Geoposatial index type.\npublic class HashedIndex extends Object implements IndexDefinition; // IndexDefinition implementation for MongoDB Hashed Indexes maintaining entries with hashes of the values of the indexed field.\n@Target({ANNOTATION_TYPE,FIELD}) @Retention(RUNTIME) public @interface HashIndexed; // Annotation for a property that should be used as key for a Hashed Index.\npublic class Index extends Object implements IndexDefinition;\npublic interface IndexDefinition;\npublic enum IndexDirection extends Enum<IndexDirection>;\n@Target({ANNOTATION_TYPE,FIELD}) @Retention(RUNTIME) public @interface Indexed; // Mark a field to be indexed using MongoDB's indexing feature.\npublic final class IndexField extends Object; // Value object for an index field.\npublic interface IndexFilter; // Use IndexFilter to create the partial filter expression used when creating Partial Indexes.\npublic class IndexInfo extends Object; // Index information for a MongoDB index.\npublic interface IndexOperations; // Index operations on a collection.\npublic interface IndexOperationsAdapter extends IndexOperations; // Adapter for creating synchronous IndexOperations.\n@FunctionalInterface public interface IndexOperationsProvider; // Provider interface to obtain IndexOperations by MongoDB collection name.\npublic class IndexOptions extends Object; // Changeable properties of an index.\npublic static enum IndexOptions.Unique extends Enum<IndexOptions.Unique>;\npublic abstract class IndexPredicate extends Object;\npublic interface IndexResolver; // IndexResolver finds those IndexDefinitions to be created for a given class.\n", "des": "Support for MongoDB document indexing."}
{"index": 520, "repo": "commons-vfs2-2.9.0", "code": "Package: gzip\n\nClasses and Interfaces: \nClass GzipFileObject; // A Gzip file.\nClass GzipFileProvider; // Provides access to the content of Gzip files.\nClass GzipFileSystem; // A compressed file system using the Gzip method.\n", "des": "The GZIP File Provider"}
{"index": 3527, "repo": "opennlp-tools-2.2.0", "code": "Package: languagemodel\n\nClasses and Interfaces: \nInterface LanguageModel; // A language model can calculate the probability p (between 0 and 1) of a certain sequence of tokens, given its underlying vocabulary.\nClass NGramLanguageModel; // A LanguageModel based on a NGramModel using Stupid Backoff to get the probabilities of the ngrams.\n", "des": "Package related to language models"}
{"index": 2060, "repo": "slf4j-ext-2.0.7", "code": "Package: ext\n\nClasses and Interfaces: \npublic class LoggerWrapper extends Object implements Logger; // A helper class wrapping an Logger instance preserving location information if the wrapped instance supports it.\npublic class XLogger extends LoggerWrapper implements Logger; // A utility that provides standard mechanisms for logging certain kinds of activities.\npublic static enum XLogger.Level extends Enum<XLogger.Level>;\npublic class XLoggerFactory extends Object; // This class is essentially a wrapper around an LoggerFactory producing XLogger instances.\n", "des": "Localized logging using the CAL10N API."}
{"index": 2346, "repo": "spring-boot-3.1.1", "code": "Package: netty\n\nClasses and Interfaces: \npublic class NettyReactiveWebServerFactory extends AbstractReactiveWebServerFactory; // ReactiveWebServerFactory that can be used to create NettyWebServers.\n@FunctionalInterface public interface NettyRouteProvider extends Function<reactor.netty.http.server.HttpServerRoutes,reactor.netty.http.server.HttpServerRoutes>; // Function that can add new routes to an HttpServerRoutes instance.\n@FunctionalInterface public interface NettyServerCustomizer extends Function<reactor.netty.http.server.HttpServer,reactor.netty.http.server.HttpServer>; // Mapping function that can be used to customize a Reactor Netty server instance.\npublic class NettyWebServer extends Object implements WebServer; // WebServer that can be used to control a Reactor Netty web server.\npublic class SslServerCustomizer extends Object implements NettyServerCustomizer; // NettyServerCustomizer that configures SSL for the given Reactor Netty server instance.\n", "des": "Embedded reactive web server implementation backed by Netty."}
{"index": 2968, "repo": "pulsar-broker-3.0.0", "code": "Package: storage\n\nClasses and Interfaces: \n@Private @Unstable public interface ManagedLedgerStorage extends AutoCloseable; // Storage to access ManagedLedgers.\n", "des": "The storage layer for Apache Pulsar."}
{"index": 1044, "repo": "commons-io-2.13.0", "code": "Package: comparator\n\nClasses and Interfaces: \nClass CompositeFileComparator; // Compare two files using a set of delegate file Comparator.\nClass DefaultFileComparator; // Compares two files using the default File.compareTo(File) method.\nClass DirectoryFileComparator; // Compare two files using the File.isDirectory() method.\nClass ExtensionFileComparator; // Compare the file name extensions for order (see FilenameUtils.getExtension(String)).\nClass LastModifiedFileComparator; // Compare the last modified date/time of two files for order (see FileUtils.lastModifiedUnchecked(File)).\nClass NameFileComparator; // Compare the names of two files for order (see File.getName()).\nClass PathFileComparator; // Compare the path of two files for order (see File.getPath()).\nClass SizeFileComparator; // Compare the length/size of two files for order (see File.length() and FileUtils.sizeOfDirectory(File)).\n", "des": "Provides various Comparator implementations for Files."}
{"index": 2948, "repo": "spring-integration-xml-6.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic class IntegrationXmlNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler;\npublic class MarshallingTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser;\npublic class UnmarshallingTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser;\npublic class XmlPayloadValidatingFilterParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\npublic class XPathExpressionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the <xpath-expression> element.\npublic class XPathFilterParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the <xpath-filter> element.\npublic class XPathHeaderEnricherParser extends org.springframework.integration.config.xml.AbstractTransformerParser; // Parser for <xpath-header-enricher> elements.\npublic class XPathMessageSplitterParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\npublic class XPathRouterParser extends org.springframework.integration.config.xml.AbstractRouterParser; // Parser for the <xpath-router/> element.\npublic class XPathTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser; // Parser for the 'xpath-transformer' element.\npublic class XsltPayloadTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser;\n", "des": "Contains parser classes for the XML namespace support."}
{"index": 2626, "repo": "shiro-web-2.0.0-alpha-2", "code": "Package: authc\n\nClasses and Interfaces: \npublic class AnonymousFilter extends PathMatchingFilter; // Filter that allows access to a path immediately without performing security checks of any kind.\npublic abstract class AuthenticatingFilter extends AuthenticationFilter; // An AuthenticationFilter that is capable of automatically performing an authentication attempt based on the incoming request.\npublic abstract class AuthenticationFilter extends AccessControlFilter; // Base class for all Filters that require the current user to be authenticated.\npublic class BasicHttpAuthenticationFilter extends AuthenticatingFilter; // Requires the requesting user to be authenticated for the request to continue, and if they're not, requires the user to login via the HTTP Basic protocol-specific challenge.\npublic class BearerHttpAuthenticationFilter extends AuthenticatingFilter; // Requires the requesting user to be authenticated for the request to continue, and if they're not, requires the user to login via the HTTP Bearer protocol-specific challenge.\npublic class FormAuthenticationFilter extends AuthenticatingFilter; // Requires the requesting user to be authenticated for the request to continue, and if they are not, forces the user to login via by redirecting them to the loginUrl you configure.\npublic class LogoutFilter extends AdviceFilter; // Simple Filter that, upon receiving a request, will immediately log-out the currently executing subject and then redirect them to a configured redirectUrl.\npublic class PassThruAuthenticationFilter extends AuthenticationFilter; // An authentication filter that redirects the user to the login page when they are trying to access a protected resource.\npublic class UserFilter extends AccessControlFilter; // Filter that allows access to resources if the accessor is a known user, which is defined as having a known principal.\n", "des": "Servlet Filter implementations specific to controlling access based on a subject's authentication status, or those that can execute authentications (log-ins) directly."}
{"index": 1343, "repo": "groovy-all-4.0.13", "code": "Package: groovydoc\n\nClasses and Interfaces: \npublic class ArrayClassDocWrapper extends Object implements GroovyClassDoc;\npublic class ClasspathResourceManager extends Object implements ResourceManager;\npublic class ExternalGroovyClassDoc extends Object implements GroovyClassDoc; // Represents a class not in the codebase being processed.\npublic class FileOutputTool extends Object implements OutputTool;\npublic class FileSystemResourceManager extends Object implements ResourceManager;\npublic interface GroovyDocParserI;\npublic class GroovyDocTemplateEngine extends Object; // Process Groovydoc templates.\npublic class GroovyDocTool extends Object;\npublic class GroovyDocWriter extends Object; // Write GroovyDoc resources to destination.\npublic class GroovyRootDocBuilder extends Object;\npublic class LinkArgument extends Object; // Represents a link pair (href, packages).\npublic class MockOutputTool extends Object implements OutputTool;\npublic interface OutputTool;\npublic interface ResourceManager;\npublic class SimpleGroovyAbstractableElementDoc extends SimpleGroovyProgramElementDoc;\npublic class SimpleGroovyAnnotationRef extends Object implements GroovyAnnotationRef;\npublic class SimpleGroovyClassDoc extends SimpleGroovyAbstractableElementDoc implements GroovyClassDoc;\npublic class SimpleGroovyConstructorDoc extends SimpleGroovyExecutableMemberDoc implements GroovyConstructorDoc;\npublic class SimpleGroovyDoc extends Object implements GroovyDoc;\npublic class SimpleGroovyExecutableMemberDoc extends SimpleGroovyMemberDoc implements GroovyExecutableMemberDoc;\npublic class SimpleGroovyFieldDoc extends SimpleGroovyMemberDoc implements GroovyFieldDoc;\npublic class SimpleGroovyMemberDoc extends SimpleGroovyAbstractableElementDoc implements GroovyMemberDoc;\npublic class SimpleGroovyMethodDoc extends SimpleGroovyExecutableMemberDoc implements GroovyMethodDoc;\npublic class SimpleGroovyPackageDoc extends SimpleGroovyDoc implements GroovyPackageDoc;\npublic class SimpleGroovyParameter extends Object implements GroovyParameter;\npublic class SimpleGroovyProgramElementDoc extends SimpleGroovyDoc implements GroovyProgramElementDoc;\npublic class SimpleGroovyRootDoc extends SimpleGroovyDoc implements GroovyRootDoc;\npublic class SimpleGroovyTag extends Object implements GroovyTag; // Stores info about GroovyDoc tags.\npublic class SimpleGroovyType extends Object implements GroovyType;\n", "des": "GroovyDoc tool."}
{"index": 3568, "repo": "lucene-codecs-9.7.0", "code": "Package: memory\n\nClasses and Interfaces: \nClass DirectPostingsFormat; // Wraps Lucene90PostingsFormat format for on-disk storage, but then at read time loads and stores all terms and postings directly in RAM as byte[], int[].\nClass FSTPostingsFormat; // FST term dict + Lucene50PBF\nClass FSTTermsReader; // FST-based terms dictionary reader.\nClass FSTTermsWriter; // FST-based term dict, using metadata as FST output.\n", "des": "Term dictionary, DocValues or Postings formats that are read entirely into memory."}
{"index": 3544, "repo": "opennlp-tools-2.2.0", "code": "Package: th\n\nClasses and Interfaces: \nClass SentenceContextGenerator; // Creates contexts/features for end-of-sentence detection in Thai text.\n", "des": "Package related to the processing of Thai data."}
{"index": 2431, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: jackson\n\nClasses and Interfaces: \n@Configuration(proxyBeanMethods=false) @AutoConfigureAfter(org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration.class) public class JacksonEndpointAutoConfiguration extends Object; // Auto-configuration for Endpoint Jackson support.\n", "des": "Actuator Jackson auto-configuration."}
{"index": 658, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: timeline\n\nClasses and Interfaces: \nClass TimelineServerUtils; // Set of utility methods to be used across timeline reader and collector.\n", "des": "Package org.apache.hadoop.server.util.timeline contains utility classes used by ATSv1 and ATSv2 on the server side."}
{"index": 57, "repo": "ignite-core-2.15.0", "code": "Package: dialect\n\nClasses and Interfaces: \nInterface JdbcDialect; // Represents a dialect of SQL implemented by a particular RDBMS.\nClass BasicJdbcDialect; // Basic implementation of dialect based on JDBC specification.\nClass DB2Dialect; // A dialect compatible with the IBM DB2 database.\nClass H2Dialect; // A dialect compatible with the H2 database.\nClass MySQLDialect; // A dialect compatible with the MySQL database.\nClass OracleDialect; // A dialect compatible with the Oracle database.\nClass SQLServerDialect; // A dialect compatible with the Microsoft SQL Server database.\n", "des": "Contains SQL dialects for different RDBMS."}
{"index": 2260, "repo": "spring-vault-core-3.0.4", "code": "Package: config\n\nClasses and Interfaces: \n@Configuration(proxyBeanMethods=false) public abstract class AbstractReactiveVaultConfiguration extends AbstractVaultConfiguration; // Base class for Spring Vault configuration using JavaConfig for a reactive infrastructure.\n@Configuration(proxyBeanMethods=false) public abstract class AbstractVaultConfiguration extends Object implements ApplicationContextAware; // Base class for Spring Vault configuration using JavaConfig.\npublic static class AbstractVaultConfiguration.ClientFactoryWrapper extends Object implements InitializingBean, DisposableBean; // Wrapper for ClientHttpRequestFactory to not expose the bean globally.\npublic static class AbstractVaultConfiguration.TaskSchedulerWrapper extends Object implements InitializingBean, DisposableBean; // Wrapper to keep ThreadPoolTaskScheduler local to Spring Vault and to not expose the bean globally.\n@Configuration public class EnvironmentVaultConfiguration extends AbstractVaultConfiguration implements ApplicationContextAware; // Configuration using Spring's Environment to configure Spring Vault endpoint, SSL options and authentication options.\n", "des": "Spring configuration for Vault."}
{"index": 3120, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: context\n\nSub Packages: \npackage context.spi; // SPI level contracts around \"current session\" support.\n\nClasses and Interfaces: \nClass TenantIdentifierMismatchException; // Indicates that tenant identifiers did not match in cases where CurrentTenantIdentifierResolver.validateExistingCurrentSessions() returns true and there is a mismatch found.\n", "des": "Defines support for \"current session\" feature."}
{"index": 3220, "repo": "commons-configuration2-2.9.0", "code": "Package: io\n\nClasses and Interfaces: \nInterface FileBased; // Definition of an interface to be implemented by objects which know how to read and write themselves from or to a character stream.\nInterface FileHandlerListener; // A listener interface for receiving notifications about updates of a FileHandler.\nInterface FileLocationStrategy; // An interface allowing applications to customize the process of locating a file.\nInterface FileLocatorAware; // Definition of an interface to be implemented by FileBased objects which need access to the current FileLocator.\nInterface FileOptionsProvider; // Some FileSystems allow options to be passed on File operations.\nInterface InputStreamSupport; // Definition of an interface to be implemented by objects which support reading from an input stream.\nClass AbsoluteNameLocationStrategy; // A specialized implementation of FileLocationStrategy which checks whether the provided file name is already an absolute file name.\nClass BasePathLocationStrategy; // A specialized implementation of FileLocationStrategy which tries to construct a file path from the locator's base path and file name.\nClass ClasspathLocationStrategy; // A specialized FileLocationStrategy implementation which searches for files on the class path.\nClass CombinedLocationStrategy; // A specialized implementation of a FileLocationStrategy which encapsulates an arbitrary number of FileLocationStrategy objects.\nClass ConfigurationLogger; // A class providing basic logging capabilities.\nClass DefaultFileSystem; // FileSystem that uses java.io.File or HttpClient.\nClass FileHandler; // A class that manages persistence of an associated FileBased object.\nClass FileHandlerListenerAdapter; // An adapter class simplifying the implementation of custom FileHandlerListener classes.\nClass FileLocator; // A class describing the location of a file.\nClass FileLocator.FileLocatorBuilder; // A typical builder implementation for creating FileLocator objects.\nClass FileLocatorUtils; // A utility class providing helper methods related to locating files.\nClass FileSystem; // Abstract layer to allow various types of file systems.\nClass FileSystemLocationStrategy; // A specialized implementation of FileLocationStrategy which uses the passed in FileSystem to locate a file.\nClass HomeDirectoryLocationStrategy; // A specialized implementation of FileLocationStrategy which searches for files in the user's home directory or another special configurable directory.\nClass ProvidedURLLocationStrategy; // A specialized implementation of FileLocationStrategy which checks whether a passed in FileLocator already has a defined URL.\nClass URLConnectionOptions; // Carries options and operates on URLConnection.\n", "des": "A package with classes related to I/O operations."}
{"index": 2309, "repo": "spring-boot-3.1.1", "code": "Package: jackson\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface JsonComponent; // @Component that provides JsonSerializer, JsonDeserializer or KeyDeserializer implementations to be registered with Jackson when JsonComponentModule is in use.\npublic static enum JsonComponent.Scope extends Enum<JsonComponent.Scope>; // The various scopes under which a serializer/deserializer can be registered.\npublic class JsonComponentModule extends com.fasterxml.jackson.databind.module.SimpleModule implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // Spring Bean and Jackson Module to register @JsonComponent annotated beans.\n@Target(TYPE) @Retention(RUNTIME) @Documented public @interface JsonMixin; // Provides a mixin class implementation that registers with Jackson when using JsonMixinModule.\npublic class JsonMixinModule extends com.fasterxml.jackson.databind.module.SimpleModule; // Spring Bean and Jackson Module to find and register @JsonMixin-annotated classes.\npublic final class JsonMixinModuleEntries extends Object; // Provide the mapping of json mixin class to consider.\npublic static class JsonMixinModuleEntries.Builder extends Object; // Builder for JsonMixinModuleEntries.\npublic abstract class JsonObjectDeserializer<T> extends com.fasterxml.jackson.databind.JsonDeserializer<T>; // Helper base class for JsonDeserializer implementations that deserialize objects.\npublic abstract class JsonObjectSerializer<T> extends com.fasterxml.jackson.databind.JsonSerializer<T>; // Helper base class for JsonSerializer implementations that serialize objects.\n", "des": "Custom enhancements and support for the Jackson project."}
{"index": 194, "repo": "ignite-core-2.15.0", "code": "Package: worker\n\nClasses and Interfaces: \nInterface GridWorkerListener; // This interface defines worker listener.\nInterface WorkProgressDispatcher; // Dispatcher of workers' progress which allows us to understand if worker freezes.\nClass CycleThread; // Thread wrapper for standart cycle operations.\nClass GridWorker; // Extension to standard Runnable interface.\nClass GridWorkerFuture<T>; // Future for locally executed closure that defines cancellation logic.\nClass GridWorkerListenerAdapter; // Convenience adapter for GridWorkerListener.\nClass GridWorkerPool; // Pool of runnable workers.\n", "des": "Common utility classes for threads."}
{"index": 446, "repo": "lucene-analyzers-icu-8.11.2", "code": "Package: collation\n\nSub Packages: \npackage collation.tokenattributes; // Custom AttributeImpl for indexing collation keys as index terms.\n\nClasses and Interfaces: \nClass ICUCollationAttributeFactory; // Converts each token into its CollationKey, and then encodes bytes as an index term.\nClass ICUCollationDocValuesField; // Indexes collation keys as a single-valued SortedDocValuesField.\nClass ICUCollationKeyAnalyzer; // Configures KeywordTokenizer with ICUCollationAttributeFactory.\n", "des": "Unicode Collation support."}
{"index": 3221, "repo": "commons-configuration2-2.9.0", "code": "Package: plist\n\nClasses and Interfaces: \nInterface PropertyListParserConstants; // Token literal values and constants.\nClass PropertyListConfiguration; // NeXT / OpenStep style configuration.\nClass PropertyListParserTokenManager; // Token Manager.\nClass SimpleCharStream; // An implementation of interface CharStream, where the stream is assumed to contain only ASCII characters (without unicode processing).\nClass Token; // Describes the input token stream.\nClass XMLPropertyListConfiguration; // Property list file (plist) in XML FORMAT as used by Mac OS X (http://www.apple.com/DTDs/PropertyList-1.0.dtd).\nClass ParseException; // This exception is thrown when parse errors are encountered.\nClass TokenMgrError; // Token Manager Error.\n", "des": "Configuration classes supporting NeXT / OpenStep /GNUStep style configuration."}
{"index": 3571, "repo": "lucene-codecs-9.7.0", "code": "Package: sharedterms\n\nClasses and Interfaces: \nClass FieldMetadataTermState; // Pair of FieldMetadata and BlockTermState for a specific field.\nClass STBlockLine; // Represents a term and its details stored in the BlockTermState.\nClass STBlockLine.Serializer; // Reads block lines encoded incrementally, with all fields corresponding to the term of the line.\nClass STBlockReader; // Reads terms blocks with the Shared Terms format.\nClass STBlockWriter; // Writes terms blocks with the Shared Terms format.\nClass STIntersectBlockReader; // The \"intersect\" TermsEnum response to STUniformSplitTerms.intersect(CompiledAutomaton, BytesRef), intersecting the terms with an automaton.\nClass STMergingBlockReader; // TermsEnum used when merging segments, to enumerate the terms of an input segment and get all the fields TermStates of each term.\nClass STUniformSplitPostingsFormat; // PostingsFormat based on the Uniform Split technique and supporting Shared Terms.\nClass STUniformSplitTerms; // Extends UniformSplitTerms for a shared-terms dictionary, with all the fields of a term in the same block line.\nClass STUniformSplitTermsReader; // A block-based terms index and dictionary based on the Uniform Split technique, and sharing all the fields terms in the same dictionary, with all the fields of a term in the same block line.\nClass STUniformSplitTermsWriter; // Extends UniformSplitTermsWriter by sharing all the fields terms in the same dictionary and by writing all the fields of a term in the same block line.\nClass UnionFieldMetadataBuilder; // Builds a FieldMetadata that is the union of multiple FieldMetadata.\n", "des": "Pluggable term index / block terms dictionary implementations."}
{"index": 725, "repo": "mina-core-3.0.0-M2", "code": "Package: api\n\nClasses and Interfaces: \nInterface IoClient; // Connects to several end-points, communicates with the server, and fires events to org.apache.mina.service.IoHandlers.\nInterface IoFilter; // Filter are interceptors/processors for incoming data received/sent.\nInterface IoFuture<V>; // A simple extension that allows listeners to register and receive results asynchronously via registered listeners.\nInterface IoFutureListener<V>; // A listener that asynchronously receives the result of a future computation.\nInterface IoHandler; // Handle all the I/O events generated by a IoService.\nInterface IoServer; // A network server bound to a local address.\nInterface IoService; // Base interface for all IoServers and IoClients that provide I/O service and manage IoSession s.\nInterface IoSession; // A handle which represents a connection between two end-points regardless of transport types.\nInterface IoSessionConfig; // The configuration of IoSession.\nClass AbstractIoFilter; // A convenient IoFilter implementation to be sub-classed for easier IoFilter implementation.\nClass AbstractIoFutureListener<V>; // Convenient base implementation for IoFutureListener. if something wrong happen the exception is rethrown, which will produce an exception caught event for the session\nClass AbstractIoHandler; // A convenient IoHandler implementation to be sub-classed for easier IoHandler implementation.\nEnum IdleStatus; // Represents the type of idleness of IoSession.\nEnum IoSession.SessionState; // State of a IoSession\nClass ConfigurationException; // A RuntimeException thrown when something wrong happened during IoService or IoSession configuration.\nClass MinaRuntimeException; // Something very wrong happened in the low level part of I/O processing.\n", "des": "Base API for the MINA library."}
{"index": 3614, "repo": "lucene-suggest-9.7.0", "code": "Package: tst\n\nClasses and Interfaces: \nClass TernaryTreeNode; // The class creates a TST node.\nClass TSTAutocomplete; // Ternary Search Trie implementation.\nClass TSTLookup; // Suggest implementation based on a Ternary Search Tree\n", "des": "Ternary Search Tree based autosuggest."}
{"index": 400, "repo": "solr-dataimporthandler-8.11.2", "code": "Package: config\n\nClasses and Interfaces: \nClass ConfigNameConstants;\nClass ConfigParseUtil;\nClass DIHConfiguration; // Mapping for data-config.xml\nClass Entity;\nClass EntityField;\nClass EntityField.Builder;\nClass Field;\nClass Field.Builder;\nClass PropertyWriter;\nClass Script;\n", "des": "Utility classes for parsing & modeling DIH configuration."}
{"index": 2038, "repo": "spring-messaging-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class MissingSessionUserException extends MessagingException; // MessagingException thrown when a session is missing.\npublic class PrincipalMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Resolver for arguments of type Principal, including Optional<Principal>.\npublic class SendToMethodReturnValueHandler extends Object implements HandlerMethodReturnValueHandler; // A HandlerMethodReturnValueHandler for sending to destinations specified in a SendTo or SendToUser method-level annotations.\npublic class SimpAnnotationMethodMessageHandler extends AbstractMethodMessageHandler<SimpMessageMappingInfo> implements org.springframework.context.EmbeddedValueResolverAware, org.springframework.context.SmartLifecycle; // A handler for messages delegating to @MessageMapping and @SubscribeMapping annotated methods.\npublic class SubscriptionMethodReturnValueHandler extends Object implements HandlerMethodReturnValueHandler; // HandlerMethodReturnValueHandler for replying directly to a subscription.\n", "des": "Support classes for handling messages from simple messaging protocols (like STOMP)."}
{"index": 1489, "repo": "tribuo-core-4.3.1", "code": "Package: transform\n\nSub Packages: \npackage transform.transformations; // Provides implementations of standard transformations like binning, scaling, taking logs and exponents.\n\nClasses and Interfaces: \npublic interface Transformation extends com.oracle.labs.mlrg.olcut.config.Configurable, com.oracle.labs.mlrg.olcut.provenance.Provenancable<TransformationProvenance>; // An interface representing a class of transformations which can be applied to a feature.\npublic class TransformationMap extends Object implements com.oracle.labs.mlrg.olcut.config.Configurable, com.oracle.labs.mlrg.olcut.provenance.Provenancable<com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance>; // A carrier type for a set of transformations to be applied to a Dataset.\npublic static final class TransformationMap.TransformationList extends Object implements com.oracle.labs.mlrg.olcut.config.Configurable, com.oracle.labs.mlrg.olcut.provenance.Provenancable<com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance>; // A carrier type as OLCUT does not support nested generics.\npublic interface TransformationProvenance extends com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // A tag interface for provenances in the transformation system.\npublic class TransformedModel<T extends Output<T>> extends Model<T>; // Wraps a Model with it's TransformerMap so all Examples are transformed appropriately before the model makes predictions.\npublic interface Transformer extends ProtoSerializable<org.tribuo.protos.core.TransformerProto>, Serializable; // A fitted Transformation which can apply a transform to the input value.\npublic final class TransformerMap extends Object implements ProtoSerializable<org.tribuo.protos.core.TransformerMapProto>, com.oracle.labs.mlrg.olcut.provenance.Provenancable<TransformerMap.TransformerMapProvenance>, Serializable; // A collection of Transformers which can be applied to a Dataset or Example.\n", "des": "Provides infrastructure for applying transformations to a Dataset."}
{"index": 3233, "repo": "opencms-core-15.0", "code": "Package: shared\n\nSub Packages: \npackage shared.rpc; // Contains the acacia editor RPC service interfaces.\n\nClasses and Interfaces: \nInterface I_CmsSerialDateValue; // Interface to access serial date values easily.\nClass A_CmsSerialDateValue; // The base class for implementations of serial date values.\nClass CmsAttributeConfiguration; // The attribute configuration.\nClass CmsContentDefinition; // Contains all information defining a content entity type.\nClass CmsEntity; // Serializable entity implementation.\nClass CmsEntityAttribute; // Serializable entity attribute implementation.\nClass CmsEntityChangeEvent; // Value change event for entities with an additional field that indicates the type of change.\nClass CmsEntityHtml; // The entity HTML representation including validation data.\nClass CmsSerialDateUtil; // Utility methods for the serial date widget.\nClass CmsTabInfo; // Form tab information bean.\nClass CmsType; // CmsEntity attribute type data.\nClass CmsValidationResult; // The entity validation result containing all errors and warnings for a set of entities.\nClass CmsWidgetUtil; // Helper with methods commonly used in editor widgets.\nClass I_CmsSerialDateValue.JsonKey; // The JSON keys used in the JSON representation of serial date specifications.\nEnum CmsEntityChangeEvent.ChangeType; // Enum indicating the type of changes.\nEnum I_CmsSerialDateValue.DateType; // Different types of serial dates.\nEnum I_CmsSerialDateValue.EndType; // Different types of conditions how serial dates can end.\nEnum I_CmsSerialDateValue.Month; // Months as enumeration.\nEnum I_CmsSerialDateValue.PatternType; // Type of the series.\nEnum I_CmsSerialDateValue.WeekDay; // Enumeration representing the week days.\nEnum I_CmsSerialDateValue.WeekOfMonth; // Possible weeks of a month.\n", "des": "Contains the acacia editor shared client/server classes."}
{"index": 996, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: transport\n\nSub Packages: \npackage transport.context; // Abstraction for determining the current TransportInputStream and TransportOutputStream.\npackage transport.http; // Package providing support for handling messages via HTTP.\npackage transport.jms; // Package providing support for handling messages via JMS.\npackage transport.mail; // Package providing support for handling messages via email.\npackage transport.support; // Classes supporting the org.springframework.ws.transport package.\npackage transport.xmpp; // Package providing support for handling messages via xmpp.\n\nClasses and Interfaces: \nInterface EndpointAwareWebServiceConnection; // Sub-interface of WebServiceConnection that is aware of any server-side situations where an endpoint is not found.\nInterface FaultAwareWebServiceConnection; // Sub-interface of WebServiceConnection that is aware of any Fault messages received.\nInterface HeadersAwareReceiverWebServiceConnection; // Interface to define access to header information for certain WebServiceConnection implementations.\nInterface HeadersAwareSenderWebServiceConnection;\nInterface TransportConstants; // Declares useful transport constants.\nInterface WebServiceConnection; // Represents a point-to-point connection that a client can use for sending WebServiceMessage objects directly to a remote party.\nInterface WebServiceMessageReceiver; // Defines the methods for classes capable of receiving WebServiceMessage instances coming in on a transport.\nInterface WebServiceMessageSender; // Defines the methods for classes capable of sending and receiving WebServiceMessage instances across a transport.\nClass AbstractReceiverConnection; // Abstract base class for WebServiceConnection implementations used for receiving requests.\nClass AbstractSenderConnection; // Abstract base class for WebServiceConnection implementations used for sending requests.\nClass AbstractWebServiceConnection; // Abstract base class for WebServiceConnection implementations.\nClass TransportInputStream; // A TransportInputStream is an input stream with MIME input headers.\nClass TransportOutputStream; // A TransportOutputStream is an output stream with MIME input headers.\nClass TransportException; // Abstract base class for exceptions related to the transport layer.\n", "des": "Contains the TransportRequest and TransportResponse interfaces."}
{"index": 3808, "repo": "lucene-analysis-common-9.7.0", "code": "Package: query\n\nClasses and Interfaces: \nClass QueryAutoStopWordAnalyzer; // An Analyzer used primarily at query time to wrap another analyzer and provide a layer of protection which prevents very common words from being passed into queries.\n", "des": "Automatically filter high-frequency stopwords."}
{"index": 1453, "repo": "spring-data-redis-3.1.2", "code": "Package: index\n\nClasses and Interfaces: \npublic interface ConfigurableIndexDefinitionProvider extends IndexDefinitionProvider, IndexDefinitionRegistry; // IndexDefinitionProvider that allows registering new IndexDefinition via IndexDefinitionRegistry.\npublic class GeoIndexDefinition extends RedisIndexDefinition implements PathBasedRedisIndexDefinition;\n@Documented @Retention(RUNTIME) @Target({FIELD,ANNOTATION_TYPE}) public @interface GeoIndexed; // Mark properties value to be included in a secondary index.\npublic class IndexConfiguration extends Object implements ConfigurableIndexDefinitionProvider; // IndexConfiguration allows programmatic setup of indexes.\npublic interface IndexDefinition; // IndexDefinition allow to set up a blueprint for creating secondary index structures in Redis.\npublic static interface IndexDefinition.Condition<T>;\npublic static final class IndexDefinition.IndexingContext extends Object; // Context in which a particular value is about to get indexed.\npublic interface IndexDefinitionProvider; // IndexDefinitionProvider give access to IndexDefinitions for creating secondary index structures.\npublic interface IndexDefinitionRegistry; // Registry that allows adding IndexDefinition.\n@Documented @Retention(RUNTIME) @Target({FIELD,ANNOTATION_TYPE}) public @interface Indexed; // Mark properties value to be included in a secondary index.\npublic interface IndexValueTransformer extends Converter<Object,Object>; // Converter implementation that is used to transform values for usage in a particular secondary index.\npublic interface PathBasedRedisIndexDefinition extends IndexDefinition; // IndexDefinition that is based on a property paths.\npublic abstract class RedisIndexDefinition extends Object implements IndexDefinition; // Base IndexDefinition implementation.\npublic static class RedisIndexDefinition.CompositeValueTransformer extends Object implements IndexValueTransformer;\npublic static enum RedisIndexDefinition.LowercaseIndexValueTransformer extends Enum<RedisIndexDefinition.LowercaseIndexValueTransformer> implements IndexValueTransformer;\npublic static enum RedisIndexDefinition.NoOpValueTransformer extends Enum<RedisIndexDefinition.NoOpValueTransformer> implements IndexValueTransformer;\npublic static class RedisIndexDefinition.OrCondition<T> extends Object implements IndexDefinition.Condition<T>;\npublic static class RedisIndexDefinition.PathCondition extends Object implements IndexDefinition.Condition<Object>;\npublic class SimpleIndexDefinition extends RedisIndexDefinition implements PathBasedRedisIndexDefinition; // PathBasedRedisIndexDefinition for including property values in a secondary index.\n", "des": "Abstractions for Redis secondary indexes."}
{"index": 1515, "repo": "spring-context-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractApplicationContext extends org.springframework.core.io.DefaultResourceLoader implements ConfigurableApplicationContext; // Abstract implementation of the ApplicationContext interface.\npublic abstract class AbstractMessageSource extends MessageSourceSupport implements HierarchicalMessageSource; // Abstract implementation of the HierarchicalMessageSource interface, implementing common handling of message variants, making it easy to implement a specific strategy for a concrete MessageSource.\npublic abstract class AbstractRefreshableApplicationContext extends AbstractApplicationContext; // Base class for ApplicationContext implementations which are supposed to support multiple calls to AbstractApplicationContext.refresh(), creating a new internal bean factory instance every time.\npublic abstract class AbstractRefreshableConfigApplicationContext extends AbstractRefreshableApplicationContext implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // AbstractRefreshableApplicationContext subclass that adds common handling of specified config locations.\npublic abstract class AbstractResourceBasedMessageSource extends AbstractMessageSource; // Abstract base class for MessageSource implementations based on resource bundle conventions, such as ResourceBundleMessageSource and ReloadableResourceBundleMessageSource.\npublic abstract class AbstractXmlApplicationContext extends AbstractRefreshableConfigApplicationContext; // Convenient base class for ApplicationContext implementations, drawing configuration from XML documents containing bean definitions understood by an XmlBeanDefinitionReader.\npublic abstract class ApplicationObjectSupport extends Object implements ApplicationContextAware; // Convenient superclass for application objects that want to be aware of the application context, e.g.\npublic class ClassPathXmlApplicationContext extends AbstractXmlApplicationContext; // Standalone XML application context, taking the context definition files from the class path, interpreting plain paths as class path resource names that include the package path (e.g.\npublic class ConversionServiceFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.core.convert.ConversionService>, org.springframework.beans.factory.InitializingBean; // A factory providing convenient access to a ConversionService configured with converters appropriate for most environments.\npublic class DefaultLifecycleProcessor extends Object implements LifecycleProcessor, org.springframework.beans.factory.BeanFactoryAware; // Default implementation of the LifecycleProcessor strategy.\npublic class DefaultMessageSourceResolvable extends Object implements MessageSourceResolvable, Serializable; // Spring's default implementation of the MessageSourceResolvable interface.\n", "des": "Classes supporting the org.springframework.context package, such as abstract base classes for ApplicationContext implementations and a MessageSource implementation."}
{"index": 1356, "repo": "spring-tx-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class ChainedPersistenceExceptionTranslator extends Object implements PersistenceExceptionTranslator; // Implementation of PersistenceExceptionTranslator that supports chaining, allowing the addition of PersistenceExceptionTranslator instances in order.\npublic abstract class DaoSupport extends Object implements org.springframework.beans.factory.InitializingBean; // Generic base class for DAOs, defining template methods for DAO initialization.\npublic abstract class DataAccessUtils extends Object; // Miscellaneous utility methods for DAO implementations.\npublic class PersistenceExceptionTranslationInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // AOP Alliance MethodInterceptor that provides persistence exception translation based on a given PersistenceExceptionTranslator.\n@FunctionalInterface public interface PersistenceExceptionTranslator; // Interface implemented by Spring integrations with data access technologies that throw runtime exceptions, such as JPA and Hibernate.\n", "des": "Support classes for DAO implementations, providing miscellaneous utility methods."}
{"index": 1002, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: monitor\n\nClasses and Interfaces: \nInterface MonitoringStrategy; // Defines the contract for objects that monitor a given folder for new messages.\nClass AbstractMonitoringStrategy; // Abstract base class for the MonitoringStrategy interface.\nClass ImapIdleMonitoringStrategy; // Implementation of the MonitoringStrategy interface that uses the IMAP IDLE command for asynchronous message detection.\nClass PollingMonitoringStrategy; // Implementation of the MonitoringStrategy interface that uses a simple polling mechanism.\nClass Pop3PollingMonitoringStrategy; // Implementation of the MonitoringStrategy interface that uses a simple polling mechanism suitable for POP3 servers.\n", "des": "Provides the MonitoringStrategy interface and implementations."}
{"index": 1843, "repo": "spring-test-6.0.11", "code": "Package: web\n\nClasses and Interfaces: \n@ExtendWith(SpringExtension.class) @ContextConfiguration @WebAppConfiguration @Documented @Inherited @Retention(RUNTIME) @Target(TYPE) public @interface SpringJUnitWebConfig; // @SpringJUnitWebConfig is a composed annotation that combines @ExtendWith(SpringExtension.class) from JUnit Jupiter with @ContextConfiguration and @WebAppConfiguration from the Spring TestContext Framework.\n", "des": "Web support for integrating the Spring TestContext Framework with the JUnit Jupiter extension model in JUnit 5."}
{"index": 106, "repo": "ignite-core-2.15.0", "code": "Package: segmentation\n\nClasses and Interfaces: \nInterface SegmentationResolver; // This is interface for segmentation (a.k.a \"split-brain\" problem) resolvers.\nEnum SegmentationPolicy; // Policy that defines how node will react on topology segmentation.\n", "des": "Contains segmentation \"split-brain\" related classes."}
{"index": 3151, "repo": "tika-core-2.8.0", "code": "Package: tika\n\nSub Packages: \npackage tika.config; // Tika configuration tools.\npackage tika.detect; // Media type detection.\npackage tika.exception; // Tika exception.\npackage tika.extractor; // Extraction of component documents.\npackage tika.fork; // Forked parser.\npackage tika.io; // IO utilities.\npackage tika.metadata; // Multi-valued metadata container, and set of constant metadata fields.\npackage tika.mime; // Media type information.\npackage tika.parser; // Tika parsers.\npackage tika.sax; // SAX utilities.\npackage tika.utils; // Utilities.\n\nClasses and Interfaces: \nClass Tika; // Facade class for accessing Tika functionality.\n", "des": "Apache Tika."}
{"index": 3754, "repo": "lucene-facet-9.7.0", "code": "Package: range\n\nClasses and Interfaces: \nClass DoubleRange; // Represents a range over double values.\nClass DoubleRangeFacetCounts; // Facets implementation that computes counts for dynamic double ranges.\nClass LongRange; // Represents a range over long values.\nClass LongRangeFacetCounts; // Facets implementation that computes counts for dynamic long ranges.\nClass Range; // Base class for a single labeled range.\n", "des": "Provides range faceting capabilities."}
{"index": 3648, "repo": "solr-core-9.3.0", "code": "Package: backup\n\nSub Packages: \npackage backup.repository; // BackupRepository Providing backup/restore repository interfaces to plug different storage systems\n\nClasses and Interfaces: \nClass AggregateBackupStats; // Aggregate stats from multiple ShardBackupMetadata\nClass BackupFilePaths; // Utility class for getting paths related to backups, or parsing information out of those paths.\nClass BackupId; // Represents the ID of a particular backup.\nClass BackupManager; // This class implements functionality to create a backup with extension points provided to integrate with different types of file-systems.\nClass BackupProperties; // Represents a backup[-*].properties file, responsible for holding whole-collection and whole-backup metadata.\nClass Checksum; // Represents checksum information for an index file being backed up.\nClass ShardBackupId; // Represents the ID of a particular backup point for a particular shard.\nClass ShardBackupMetadata; // Represents the shard-backup metadata file.\nClass ShardBackupMetadata.BackedFile;\n", "des": "Core classes for Solr's Backup/Restore functionality"}
{"index": 3813, "repo": "lucene-analysis-common-9.7.0", "code": "Package: sinks\n\nClasses and Interfaces: \nClass TeeSinkTokenFilter; // This TokenFilter provides the ability to set aside attribute states that have already been analyzed.\nClass TeeSinkTokenFilter.SinkTokenStream; // TokenStream output from a tee.\n", "des": "TeeSinkTokenFilter."}
{"index": 1955, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: liquibase\n\nClasses and Interfaces: \npublic class DataSourceClosingSpringLiquibase extends liquibase.integration.spring.SpringLiquibase implements org.springframework.beans.factory.DisposableBean; // A custom SpringLiquibase extension that closes the underlying DataSource once the database has been migrated.\n@AutoConfiguration(after={DataSourceAutoConfiguration.class,HibernateJpaAutoConfiguration.class}) @ConditionalOnClass({liquibase.integration.spring.SpringLiquibase.class,liquibase.change.DatabaseChange.class}) @ConditionalOnProperty(prefix=\"spring.liquibase\", name=\"enabled\", matchIfMissing=true) @Conditional(org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration.LiquibaseDataSourceCondition.class) @Import(org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration.LiquibaseAutoConfigurationRuntimeHints.class) public class LiquibaseAutoConfiguration extends Object; // Auto-configuration for Liquibase.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.jdbc.core.ConnectionCallback.class) @ConditionalOnMissingBean(liquibase.integration.spring.SpringLiquibase.class) @EnableConfigurationProperties(LiquibaseProperties.class) public static class LiquibaseAutoConfiguration.LiquibaseConfiguration extends Object;\npublic interface LiquibaseConnectionDetails extends ConnectionDetails; // Details required for Liquibase to establish a connection to an SQL service using JDBC.\n@Target({FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Qualifier public @interface LiquibaseDataSource; // Qualifier annotation for a DataSource to be injected in to Liquibase.\n@ConfigurationProperties(prefix=\"spring.liquibase\", ignoreUnknownFields=false) public class LiquibaseProperties extends Object; // Configuration properties to configure SpringLiquibase.\n", "des": "Auto-configuration for Liquibase."}
{"index": 3812, "repo": "lucene-analysis-common-9.7.0", "code": "Package: shingle\n\nClasses and Interfaces: \nClass FixedShingleFilter; // A FixedShingleFilter constructs shingles (token n-grams) from a token stream.\nClass FixedShingleFilterFactory; // Factory for FixedShingleFilter\nClass ShingleAnalyzerWrapper; // A ShingleAnalyzerWrapper wraps a ShingleFilter around another Analyzer.\nClass ShingleFilter; // A ShingleFilter constructs shingles (token n-grams) from a token stream.\nClass ShingleFilterFactory; // Factory for ShingleFilter.\n", "des": "Word n-gram filters."}
{"index": 2442, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: integration\n\nClasses and Interfaces: \n@AutoConfiguration(after=org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration.class) @ConditionalOnClass(org.springframework.integration.graph.IntegrationGraphServer.class) @ConditionalOnBean(org.springframework.integration.config.IntegrationConfigurationBeanFactoryPostProcessor.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.integration.IntegrationGraphEndpoint.class) public class IntegrationGraphEndpointAutoConfiguration extends Object; // Auto-configuration for the IntegrationGraphEndpoint.\n", "des": "Auto-configuration for actuator Spring Integration concerns."}
{"index": 3314, "repo": "opencms-core-15.0", "code": "Package: spellchecking\n\nClasses and Interfaces: \nClass CmsSolrSpellchecker; // CmsSolrSpellchecker is used to perform spellchecking in OpenCms by using Solr.\nClass CmsSpellcheckDictionaryIndexer; // Helping class for manipulating the Solr spellchecker indices.\n", "des": "Contains the SOLR based spellcheck service classes."}
{"index": 1532, "repo": "spring-context-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \npublic class AnnotationJmxAttributeSource extends Object implements JmxAttributeSource, org.springframework.beans.factory.BeanFactoryAware; // Implementation of the JmxAttributeSource interface that reads annotations and exposes the corresponding attributes.\npublic class AnnotationMBeanExporter extends MBeanExporter; // Convenient subclass of Spring's standard MBeanExporter, activating annotation usage for JMX exposure of Spring beans: ManagedResource, ManagedAttribute, ManagedOperation, etc.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ManagedAttribute; // Method-level annotation that indicates to expose a given bean property as a JMX attribute, corresponding to the ManagedAttribute.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ManagedMetric; // Method-level annotation that indicates to expose a given bean property as a JMX attribute, with added descriptor properties to indicate that it is a metric.\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented @Repeatable(ManagedNotifications.class) public @interface ManagedNotification; // Type-level annotation that indicates a JMX notification emitted by a bean.\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented public @interface ManagedNotifications; // Type-level annotation used as a container for one or more @ManagedNotification declarations.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ManagedOperation; // Method-level annotation that indicates to expose a given method as a JMX operation, corresponding to the ManagedOperation attribute.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Repeatable(ManagedOperationParameters.class) public @interface ManagedOperationParameter; // Method-level annotation used to provide metadata about operation parameters, corresponding to a ManagedOperationParameter attribute.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ManagedOperationParameters; // Method-level annotation used as a container for one or more @ManagedOperationParameter declarations.\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented public @interface ManagedResource; // Class-level annotation that indicates to register instances of a class with a JMX server, corresponding to the ManagedResource attribute.\n", "des": "Annotations for MBean exposure."}
{"index": 2833, "repo": "spring-data-r2dbc-3.1.2", "code": "Package: query\n\nClasses and Interfaces: \npublic class BoundAssignments extends Object; // Value object representing Assignments with their Bindings.\npublic class BoundCondition extends Object; // Value object representing a Condition with its Bindings.\npublic class QueryMapper extends Object; // Maps CriteriaDefinition and Sort objects considering mapping metadata and dialect-specific conversion.\nprotected static class QueryMapper.Field extends Object; // Value object to represent a field and its meta-information.\nprotected static class QueryMapper.MetadataBackedField extends QueryMapper.Field; // Extension of QueryMapper.Field to be backed with mapping metadata.\npublic class UpdateMapper extends QueryMapper; // A subclass of QueryMapper that maps Update to update assignments.\n", "des": "Query and update support."}
{"index": 3496, "repo": "poi-5.2.3", "code": "Package: util\n\nClasses and Interfaces: \nClass CellRangeAddress8Bit; // See OOO documentation: excelfileformat.pdf sec 2.5.14 - 'Cell Range Address'\nClass HSSFColor; // Intends to provide support for the very evil index to triplet issue and will likely replace the color constants interface for HSSF 2.0.\nClass LazilyConcatenatedByteArray; // Utility for delaying the concatenation of multiple byte arrays.\nClass RKUtil; // Utility class for helping convert RK numbers.\nEnum HSSFColor.HSSFColorPredefined; // Predefined HSSFColors with their given palette index (and an optional 2nd index)\n", "des": "The util package contains tools needed for writing HSSF files that are not necesarily \"real\" HSSF concepts."}
{"index": 2820, "repo": "spring-orm-6.0.11", "code": "Package: persistenceunit\n\nClasses and Interfaces: \npublic class DefaultPersistenceUnitManager extends Object implements PersistenceUnitManager, org.springframework.context.ResourceLoaderAware, org.springframework.context.weaving.LoadTimeWeaverAware, org.springframework.beans.factory.InitializingBean; // Default implementation of the PersistenceUnitManager interface.\npublic class MutablePersistenceUnitInfo extends Object implements SmartPersistenceUnitInfo; // Spring's base implementation of the JPA PersistenceUnitInfo interface, used to bootstrap an EntityManagerFactory in a container.\npublic interface PersistenceManagedTypes; // Provide the list of managed persistent types that an entity manager should consider.\npublic final class PersistenceManagedTypesScanner extends Object; // Scanner of PersistenceManagedTypes.\npublic interface PersistenceUnitManager; // Interface that defines an abstraction for finding and managing JPA PersistenceUnitInfos.\npublic interface PersistenceUnitPostProcessor; // Callback interface for post-processing a JPA PersistenceUnitInfo.\npublic interface SmartPersistenceUnitInfo extends PersistenceUnitInfo; // Extension of the standard JPA PersistenceUnitInfo interface, for advanced collaboration between Spring's LocalContainerEntityManagerFactoryBean and PersistenceUnitManager implementations.\n", "des": "Internal support for managing JPA persistence units."}
{"index": 1487, "repo": "tribuo-core-4.3.1", "code": "Package: impl\n\nClasses and Interfaces: \npublic final class EmptyDatasetProvenance extends DatasetProvenance; // An empty DatasetProvenance, should not be used except by the provenance removal system.\npublic final class EmptyDataSourceProvenance extends Object implements DataSourceProvenance; // An empty DataSourceProvenance, should not be used except by the provenance removal system.\npublic final class EmptyTrainerProvenance extends Object implements TrainerProvenance; // An empty TrainerProvenance, should not be used except by the provenance removal system.\npublic final class FeatureSelectorProvenanceImpl extends com.oracle.labs.mlrg.olcut.provenance.impl.SkeletalConfiguredObjectProvenance implements FeatureSelectorProvenance; // An implementation of FeatureSelectorProvenance which delegates everything to SkeletalConfiguredObjectProvenance.\npublic final class TimestampedTrainerProvenance extends Object implements TrainerProvenance; // A TrainerProvenance with a timestamp, used when there was no trainer involved in model construction (e.g., creating an EnsembleModel from existing models).\npublic final class TrainerProvenanceImpl extends SkeletalTrainerProvenance; // An implementation of TrainerProvenance that delegates everything to SkeletalTrainerProvenance.\n", "des": "Provides internal implementations for empty provenance classes and TrainerProvenance."}
{"index": 3364, "repo": "opencms-core-15.0", "code": "Package: workplace\n\nSub Packages: \npackage workplace.commons; // Contains often used OpenCms Workplace dialogs, for example for file operations, user preferences and project based operations like publishing.\npackage workplace.comparison; // Utilities for comparing different versions of resources, used by both the classic workplace and the new Vaadin-based workplace.\npackage workplace.editors; // Base classes for the editors (WYSIWYG, plain text, XML content) used in the OpenCms Workplace.\npackage workplace.explorer; // Contains the functions that generate the Workplace \"Explorer\" view, also contains the \"New resource\" wizard.\npackage workplace.galleries; // Contains the various \"Galleries\" which are available in the editors and widgets of the OpenCms Workplace.\npackage workplace.list; // Generates the list views commonly used in the OpenCms Workplace \"Administration\" tools.\npackage workplace.threads; // A collection of thread classes that are used in the OpenCms Workplace, usually in connection with a report.\npackage workplace.tools; // Contains the base classes for implementing a tool in the OpenCms Workplace \"Administration\" view.\n\nClasses and Interfaces: \nInterface I_CmsDialogHandler; // Provides a method for selecting an individual jsp dialog.\nInterface I_CmsGroupNameTranslation; // Interface for transforming group names into a more human-readable form.\nInterface I_CmsPostUploadDialogHandler; // An interface which provides a hook which can be called after uploading files.\nInterface I_CmsRepositoryFolderHandler; // Evaluates the repository folder.\nInterface I_CmsWorkplaceMessageBundleProvider; // Implement this interface to provide message bundle names to added to the CmsWorkplaceMessages bundle.\nClass CmsAccountInfo; // Account info bean.\nClass CmsDialog; // Provides methods for building the dialog windows of OpenCms.\nClass CmsDialogSelector; // Selects the dialog which should be displayed by OpenCms depending on the configuration value.\nClass CmsLoginUserAgreement; // Provides methods to show a configurable user agreement dialog after a successful workplace login.\nClass CmsRepositoryFolderHandler; // The default upload folder handler.\nClass CmsWorkplace; // Master class for the JSP based workplace which provides default methods and session handling for all JSP workplace classes.\nClass CmsWorkplaceLoginHandler; // Resource init handler that loads the login form with the right parameters.\n", "des": "The base classes for the OpenCms Workplace (standard dialog, tab dialog, report based dialog) and the Workplace configuration classes are located here."}
{"index": 2549, "repo": "pulsar-common-3.0.0", "code": "Package: compression\n\nClasses and Interfaces: \npublic abstract class AirliftUtils extends Object; // Utilities.\npublic interface CompressionCodec; // Generic compression codec interface.\npublic class CompressionCodecLZ4 extends Object implements CompressionCodec; // LZ4 Compression.\npublic class CompressionCodecNone extends Object implements CompressionCodec; // No compression.\npublic class CompressionCodecProvider extends Object; // Provider of compression codecs used in Pulsar.\npublic class CompressionCodecSnappy extends Object implements CompressionCodec; // Snappy Compression.\npublic class CompressionCodecZLib extends Object implements CompressionCodec; // ZLib Compression.\npublic class CompressionCodecZstd extends Object implements CompressionCodec; // Zstandard Compression.\n", "des": "Implementation of different compression codecs."}
{"index": 3799, "repo": "lucene-analysis-common-9.7.0", "code": "Package: miscellaneous\n\nClasses and Interfaces: \nInterface ConcatenateGraphFilter.BytesRefBuilderTermAttribute; // Attribute providing access to the term builder and UTF-16 conversion\nClass ASCIIFoldingFilter; // This class converts alphabetic, numeric, and symbolic Unicode characters which are not in the first 127 ASCII characters (the \"Basic Latin\" Unicode block) into their ASCII equivalents, if one exists.\nClass ASCIIFoldingFilterFactory; // Factory for ASCIIFoldingFilter.\nClass CapitalizationFilter; // A filter to apply normal capitalization rules to Tokens.\nClass CapitalizationFilterFactory; // Factory for CapitalizationFilter.\nClass CodepointCountFilter; // Removes words that are too long or too short from the stream.\nClass CodepointCountFilterFactory; // Factory for CodepointCountFilter.\nClass ConcatenateGraphFilter; // Concatenates/Joins every incoming token with a separator into one output token for every path through the token stream (which is a graph).\nClass ConcatenateGraphFilter.BytesRefBuilderTermAttributeImpl; // Implementation of ConcatenateGraphFilter.BytesRefBuilderTermAttribute\nClass ConcatenateGraphFilterFactory; // Factory for ConcatenateGraphFilter.\nClass ConcatenatingTokenStream; // A TokenStream that takes an array of input TokenStreams as sources, and concatenates them together.\nClass ConditionalTokenFilter; // Allows skipping TokenFilters based on the current set of attributes.\nClass ConditionalTokenFilterFactory; // Abstract parent class for analysis factories that create ConditionalTokenFilter instances\nClass DateRecognizerFilter; // Filters all tokens that cannot be parsed to a date, using the provided DateFormat.\nClass DateRecognizerFilterFactory; // Factory for DateRecognizerFilter.\nClass DelimitedTermFrequencyTokenFilter; // Characters before the delimiter are the \"token\", the textual integer after is the term frequency.\nClass DelimitedTermFrequencyTokenFilterFactory; // Factory for DelimitedTermFrequencyTokenFilter.\nClass DropIfFlaggedFilter; // Allows Tokens with a given combination of flags to be dropped.\nClass DropIfFlaggedFilterFactory; // Provides a filter that will drop tokens matching a set of flags.\nClass EmptyTokenStream; // An always exhausted token stream.\n", "des": "Miscellaneous Tokenstreams."}
{"index": 2334, "repo": "spring-boot-3.1.1", "code": "Package: jks\n\nClasses and Interfaces: \npublic class JksSslStoreBundle extends Object implements SslStoreBundle; // SslStoreBundle backed by a Java keystore.\npublic record JksSslStoreDetails(String type, String provider, String location, String password) extends Record; // Details for an individual trust or key store in a JksSslStoreBundle.\n", "des": "SSL trust material provider for Java KeyStores."}
{"index": 1220, "repo": "commons-text-1.10.0", "code": "Package: lookup\n\nClasses and Interfaces: \nInterface BiStringLookup<U>; // Lookups a String key for a String value.\nInterface StringLookup; // Lookups a String key for a String value.\nClass StringLookupFactory; // Create instances of string lookups or access singleton string lookups implemented in this package.\nEnum DefaultStringLookup; // An enumeration defining StringLookup objects available through StringLookupFactory.\n", "des": "Provides algorithms for looking up strings for use with a StringSubstitutor."}
{"index": 691, "repo": "jackson-databind-2.15.2", "code": "Package: impl\n\nClasses and Interfaces: \nClass AsArrayTypeDeserializer; // Type deserializer used with JsonTypeInfo.As.WRAPPER_ARRAY inclusion mechanism.\nClass AsArrayTypeSerializer; // Type serializer that will embed type information in an array, as the first element, and actual value as the second element.\nClass AsDeductionTypeDeserializer; // A TypeDeserializer capable of deducing polymorphic types based on the fields available.\nClass AsDeductionTypeSerializer;\nClass AsExistingPropertyTypeSerializer; // Type serializer used with JsonTypeInfo.As.EXISTING_PROPERTY inclusion mechanism.\nClass AsExternalTypeDeserializer; // Type deserializer used with JsonTypeInfo.As.EXTERNAL_PROPERTY inclusion mechanism.\nClass AsExternalTypeSerializer; // Type serializer that preferably embeds type information as an \"external\" type property; embedded in enclosing JSON object.\nClass AsPropertyTypeDeserializer; // Type deserializer used with JsonTypeInfo.As.PROPERTY inclusion mechanism.\nClass AsPropertyTypeSerializer; // Type serializer that preferably embeds type information as an additional JSON Object property, if possible (when resulting serialization would use JSON Object).\nClass AsWrapperTypeDeserializer; // Type deserializer used with JsonTypeInfo.As.WRAPPER_OBJECT inclusion mechanism.\nClass AsWrapperTypeSerializer; // Type wrapper that tries to use an extra JSON Object, with a single entry that has type name as key, to serialize type information.\nClass ClassNameIdResolver; // TypeIdResolver implementation that converts between fully-qualified Java class names and (JSON) Strings.\nClass LaissezFaireSubTypeValidator; // Default PolymorphicTypeValidator used unless explicit one is constructed (and, in 2.11, MapperFeature.BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES not enabled).\nClass MinimalClassNameIdResolver;\nClass StdSubtypeResolver; // Standard SubtypeResolver implementation.\nClass StdTypeResolverBuilder; // Default TypeResolverBuilder implementation.\nClass SubTypeValidator; // Helper class used to encapsulate rules that determine subtypes that are invalid to use, even with default typing, mostly due to security concerns.\nClass TypeDeserializerBase; // Base class for all standard Jackson TypeDeserializers.\nClass TypeIdResolverBase; // Partial base implementation of TypeIdResolver: all custom implementations are strongly recommended to extend this class, instead of directly implementing TypeIdResolver.\nClass TypeNameIdResolver;\nClass TypeSerializerBase;\n", "des": "Package that contains standard implementations for TypeResolverBuilder and TypeIdResolver."}
{"index": 3837, "repo": "lucene-core-9.7.0", "code": "Package: compressing\n\nClasses and Interfaces: \nClass CompressionMode; // A compression mode.\nClass Compressor; // A data compressor.\nClass Decompressor; // A decompressor.\nClass MatchingReaders; // Computes which segments have identical field name to number mappings, which allows stored fields and term vectors in this codec to be bulk-merged.\n", "des": "Compressing helper classes."}
{"index": 1854, "repo": "spring-test-6.0.11", "code": "Package: web\n\nSub Packages: \npackage web.client; // Contains client-side REST testing support.\npackage web.servlet; // Contains server-side support for testing Spring MVC applications.\n\nClasses and Interfaces: \npublic abstract class ModelAndViewAssert extends Object; // A collection of assertions intended to simplify testing scenarios dealing with Spring Web MVC ModelAndView objects.\n", "des": "Helper classes for unit tests based on Spring's web support."}
{"index": 3090, "repo": "spring-ws-core-4.0.5", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class SoapUtils extends Object; // Contains various utility methods for handling SOAP messages.\n", "des": "Classes supporting the org.springframework.ws.soap package."}
{"index": 423, "repo": "mahout-mr-0.13.0", "code": "Package: sgd\n\nClasses and Interfaces: \nInterface Gradient; // Provides the ability to inject a gradient into the SGD logistic regresion.\nInterface PriorFunction; // A prior is used to regularize the learning algorithm.\nInterface RecordFactory; // A record factor understands how to convert a line of data into fields and then into a vector.\nClass AbstractOnlineLogisticRegression; // Generic definition of a 1 of n logistic regression classifier that returns probabilities in response to a feature vector.\nClass AdaptiveLogisticRegression; // This is a meta-learner that maintains a pool of ordinary OnlineLogisticRegression learners.\nClass AdaptiveLogisticRegression.TrainingExample;\nClass AdaptiveLogisticRegression.Wrapper; // Provides a shim between the EP optimization stuff and the CrossFoldLearner.\nClass CrossFoldLearner; // Does cross-fold validation of log-likelihood and AUC on several online logistic regression models.\nClass CsvRecordFactory; // Converts CSV data lines to vectors.\nClass DefaultGradient; // Implements the basic logistic training law.\nClass ElasticBandPrior; // Implements a linear combination of L1 and L2 priors.\nClass GradientMachine; // Online gradient machine learner that tries to minimize the label ranking hinge loss.\nClass L1; // Implements the Laplacian or bi-exponential prior.\nClass L2; // Implements the Gaussian prior.\nClass MixedGradient; // Provides a stochastic mixture of ranking updates and normal logistic updates.\nClass ModelDissector; // Uses sample data to reverse engineer a feature-hashed model.\nClass ModelDissector.Weight;\nClass ModelSerializer; // Provides the ability to store SGD model-related objects as binary files.\nClass OnlineLogisticRegression; // Extends the basic on-line logistic regression learner with a specific set of learning rate annealing schedules.\nClass PassiveAggressive; // Online passive aggressive learner that tries to minimize the label ranking hinge loss.\nClass PolymorphicWritable; // Utilities that write a class name and then serialize using writables.\nClass RankingGradient; // Uses the difference between this instance and recent history to get a gradient that optimizes ranking performance.\nClass TPrior; // Provides a t-distribution as a prior.\n", "des": "Implements a variety of on-line logistric regression classifiers using SGD-based algorithms."}
{"index": 1625, "repo": "spring-kafka-3.0.9", "code": "Package: reactive\n\nClasses and Interfaces: \npublic class ReactiveKafkaConsumerTemplate<K,V> extends Object; // Reactive kafka consumer operations implementation.\npublic class ReactiveKafkaProducerTemplate<K,V> extends Object implements AutoCloseable, org.springframework.beans.factory.DisposableBean; // Reactive kafka producer operations implementation.\n", "des": "Reactive component for consumer and producer."}
{"index": 2154, "repo": "wicket-core-10.0.0-M1", "code": "Package: pages\n\nClasses and Interfaces: \npublic abstract class AbstractErrorPage extends WebPage; // A parent page for all pages that are used to show an error to the user.\npublic class AccessDeniedPage extends AbstractErrorPage; // Page expired error page.\npublic class BrowserInfoForm extends GenericPanel<ClientProperties>; // Form for posting JavaScript properties.\npublic class BrowserInfoPage extends WebPage; // This page uses a form post right after the page has loaded in the browser, using JavaScript or alternative means to detect and pass on settings to the embedded form.\npublic class ExceptionErrorPage extends AbstractErrorPage; // Shows a runtime exception on a nice HTML page.\npublic class InternalErrorPage extends AbstractErrorPage; // Internal error display page.\npublic class PageExpiredErrorPage extends AbstractErrorPage; // Page expired error page.\npublic class RedirectPage extends WebPage; // Page that let the browser redirect.\n", "des": "Default special purpose pages for error and feedback support."}
{"index": 866, "repo": "calcite-core-1.34.0", "code": "Package: util\n\nClasses and Interfaces: \nInterface SqlBasicVisitor.ArgHandler<R>; // Argument handler.\nInterface SqlVisitor<R>; // Visitor class, follows the visitor pattern.\nClass ChainedSqlOperatorTable; // ChainedSqlOperatorTable implements the SqlOperatorTable interface by chaining together any number of underlying operator table instances.\nClass IdPair<L,R>; // Similar to Pair but identity is based on identity of values.\nClass ListSqlOperatorTable; // Implementation of the SqlOperatorTable interface by using a list of operators.\nClass ReflectiveSqlOperatorTable; // ReflectiveSqlOperatorTable implements the SqlOperatorTable interface by reflecting the public fields of a subclass.\nClass SqlBasicVisitor<R>; // Basic implementation of SqlVisitor which does nothing at each node.\nClass SqlBasicVisitor.ArgHandlerImpl<R>; // Default implementation of SqlBasicVisitor.ArgHandler which merely calls SqlNode.accept(org.apache.calcite.sql.util.SqlVisitor<R>) on each operand.\nClass SqlBuilder; // Extension to StringBuilder for the purposes of creating SQL queries and expressions.\nClass SqlOperatorTables; // Utilities for SqlOperatorTables.\nClass SqlShuttle; // Basic implementation of SqlVisitor which returns each leaf node unchanged.\nClass SqlString; // String that represents a kocher SQL statement, expression, or fragment.\n", "des": "Utility classes for the SQL object model, parsing, and validation."}
{"index": 1326, "repo": "groovy-all-4.0.13", "code": "Package: ant\n\nClasses and Interfaces: \npublic class AntProjectPropertiesDelegate extends Hashtable<String,Object>;\npublic abstract class CompileTaskSupport extends org.apache.tools.ant.taskdefs.MatchingTask; // Support for compilation related tasks.\npublic class FileIterator extends Object implements Iterator<File>; // FileIterator is an iterator over a number of files from a collection of FileSet instances.\npublic class FileScanner extends org.apache.tools.ant.Task; // FileScanner is a bean which allows the iteration over a number of files from a collection of FileSet instances.\npublic class FileSystemCompilerFacade extends Object; // This is a helper class, to provide a controlled entry point for the groovyc ant task forked mode.\npublic class GenerateStubsTask extends CompileTaskSupport; // Generates Java stubs from Groovy sources.\npublic class Groovy extends org.apache.tools.ant.taskdefs.Java; // Executes a series of Groovy statements.\npublic class Groovyc extends org.apache.tools.ant.taskdefs.MatchingTask; // Compiles Groovy source files using Ant.\npublic class GroovycTask extends CompileTaskSupport; // Compiles Groovy source files.\npublic class Groovydoc extends org.apache.tools.ant.Task; // Access to the GroovyDoc tool from Ant.\npublic class LoggingHelper extends Object; // Helper to make logging from Ant easier.\npublic class RootLoaderRef extends org.apache.tools.ant.taskdefs.MatchingTask; // Sets the RootLoader as reference.\npublic class UberCompileTask extends org.apache.tools.ant.Task; // Compiles Java and Groovy source files.\npublic class VerifyClass extends org.apache.tools.ant.taskdefs.MatchingTask; // Verify Class files.\n", "des": "Ant tasks for working with Groovy - such as groovyc for compiling Groovy source code to Java bytecode"}
{"index": 998, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: http\n\nClasses and Interfaces: \nInterface HttpTransportConstants; // Declares HTTP-specific transport constants.\nClass AbstractHttpSenderConnection; // Abstract base class for WebServiceConnection implementations that send request over HTTP.\nClass AbstractHttpWebServiceMessageSender; // Abstract base class for WebServiceMessageSender implementations that use HTTP.\nClass ClientHttpRequestConnection; // Implementation of the WebServiceConnection interface that is based on the Spring 3 ClientHttpRequest and ClientHttpResponse.\nClass ClientHttpRequestMessageSender; // WebServiceMessageSender implementation based on the ClientHttpRequestFactory introduced in Spring 3.\nClass CommonsHttpConnection; // In favor of HttpComponentsConnection\nClass CommonsHttpMessageSender; // In favor of HttpComponentsMessageSender\nClass HttpComponentsConnection; // Implementation of WebServiceConnection that is based on Apache HttpClient.\nClass HttpComponentsMessageSender; // WebServiceMessageSender implementation that uses Apache HttpClient to execute POST requests.\nClass HttpComponentsMessageSender.RemoveSoapHeadersInterceptor; // HttpClient HttpRequestInterceptor implementation that removes Content-Length and Transfer-Encoding headers from the request.\nClass HttpExchangeConnection; // Implementation of WebServiceConnection that is based on the Java 6 HttpServer HttpExchange.\nClass HttpServletConnection; // Implementation of WebServiceConnection that is based on the Servlet API.\nClass HttpsUrlConnectionMessageSender; // Extension of HttpUrlConnectionMessageSender that adds support for (self-signed) HTTPS certificates.\nClass HttpUrlConnection; // Implementation of the WebServiceConnection interface that uses a HttpURLConnection.\nClass HttpUrlConnectionMessageSender; // WebServiceMessageSender implementation that uses standard J2SE facilities to execute POST requests, without support for HTTP authentication or advanced configuration options.\nClass LocationTransformerObjectSupport; // Abstract base class for WsdlDefinitionHandlerAdapter and XsdSchemaHandlerAdapter that transforms XSD and WSDL location attributes.\nClass MessageDispatcherServlet; // Servlet for simplified dispatching of Web service messages.\nClass WebServiceMessageReceiverHandlerAdapter; // Adapter to use the WebServiceMessageReceiver interface with the generic DispatcherServlet.\nClass WebServiceMessageReceiverHttpHandler; // HttpHandler that can be used to handle incoming HttpExchange service requests.\nClass WsdlDefinitionHandlerAdapter; // Adapter to use the WsdlDefinition interface with the generic DispatcherServlet.\nClass WsdlDefinitionHttpHandler;\nClass XsdSchemaHandlerAdapter; // Adapter to use the XsdSchema interface with the generic DispatcherServlet.\n", "des": "Package providing support for handling messages via HTTP."}
{"index": 2659, "repo": "spring-data-cassandra-4.1.2", "code": "Package: event\n\nClasses and Interfaces: \npublic abstract class AbstractCassandraEventListener<E> extends Object implements ApplicationListener<CassandraMappingEvent<?>>; // Base class to implement domain specific ApplicationListeners for CassandraMappingEvent.\npublic class AbstractDeleteEvent<T> extends AbstractStatementAwareMappingEvent<com.datastax.oss.driver.api.core.cql.Statement<?>>; // Base class for delete events.\npublic abstract class AbstractStatementAwareMappingEvent<T> extends CassandraMappingEvent<T>; // Event encapsulating Cassandra CQL statement.\npublic class AfterConvertEvent<E> extends CassandraMappingEvent<E>; // Event to be triggered after converting a Row.\npublic class AfterDeleteEvent<T> extends AbstractDeleteEvent<T>; // Event being thrown after a single or a set of rows has/have been deleted.\npublic class AfterLoadEvent<T> extends CassandraMappingEvent<com.datastax.oss.driver.api.core.cql.Row>; // Event to be triggered after loading Rows to be mapped onto a given type.\npublic class AfterSaveEvent<E> extends CassandraMappingEvent<E>; // CassandraMappingEvent triggered after save of an object.\npublic class AuditingEntityCallback extends Object implements BeforeConvertCallback<Object>, Ordered; // EntityCallback to populate auditing related fields on an entity about to be saved.\n@FunctionalInterface public interface BeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\npublic class BeforeDeleteEvent<T> extends AbstractDeleteEvent<T>; // Event thrown before a row or a set of rows is deleted.\n@FunctionalInterface public interface BeforeSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered before save of a row.\npublic class BeforeSaveEvent<E> extends AbstractStatementAwareMappingEvent<E>; // CassandraMappingEvent triggered before save of an object.\npublic class CassandraMappingEvent<T> extends ApplicationEvent; // Base ApplicationEvent triggered by Spring Data Cassandra.\npublic class ReactiveAuditingEntityCallback extends Object implements ReactiveBeforeConvertCallback<Object>, Ordered; // Reactive EntityCallback to populate auditing related fields on an entity about to be saved.\n", "des": "Event callback infrastructure for Cassandra mapping subsystem."}
{"index": 1338, "repo": "groovy-all-4.0.13", "code": "Package: metaclass\n\nClasses and Interfaces: \npublic final class ClosureMetaClass extends MetaClassImpl; // A metaclass for closures generated by the Groovy compiler.\npublic class ClosureMetaMethod extends MetaMethod implements ClosureInvokingMethod; // A MetaMethod that accepts a closure in the constructor which is invoked when the MetaMethod is called.\npublic class ClosureStaticMetaMethod extends MetaMethod implements ClosureInvokingMethod; // This class represents a MetaMethod that is a closure that pretends to be a static method.\npublic class ConcurrentReaderHashMap extends AbstractMap implements Cloneable, Serializable; // A hash table that supports mostly-concurrent reading, but exclusive writing.\nprotected static class ConcurrentReaderHashMap.BarrierLock extends Object implements Serializable; // A Serializable class for barrier lock\nprotected static class ConcurrentReaderHashMap.Entry extends Object implements Map.Entry; // ConcurrentReaderHashMap collision list entry.\npublic class DefaultMetaClassInfo extends Object; // WARNING: This class is for internal use only! We use this class to store information about if a default MetaClass is used for certain primitives.\npublic static class DefaultMetaClassInfo.ConstantMetaClassVersioning extends Object;\npublic class MetaClassRegistryImpl extends Object implements MetaClassRegistry; // A registry of MetaClass instances which caches introspection and reflection information and allows methods to be dynamically added to existing classes at runtime\npublic class MetaMethodIndex extends Object;\npublic static class MetaMethodIndex.CacheEntry extends Object;\npublic static class MetaMethodIndex.Entry extends Object;\npublic static interface MetaMethodIndex.EntryIterator;\npublic static class MetaMethodIndex.Header extends Object;\npublic class MethodHelper extends Object; // Some reflection helper methods\npublic class MethodMetaProperty extends MetaProperty; // Wrapper for a method for a property get or set.\npublic static class MethodMetaProperty.GetBeanMethodMetaProperty extends MethodMetaProperty; // Wrapper for a method realizing the property getter.\npublic static class MethodMetaProperty.GetMethodMetaProperty extends MethodMetaProperty; // Wrapper for a method realizing the property get.\npublic class MethodSelectionException extends GroovyRuntimeException; // This exception is thrown if the runtime is unable to select a method.\npublic class MissingMethodExceptionNoStack extends MissingMethodException;\npublic class MissingMethodExecutionFailed extends MissingMethodExceptionNoStack; // A stack less exception used to indicate, that the execution of a missingMethod method failed with a MissingMethodException.\n", "des": "Internal classes related to Groovy's metaclass implementation."}
{"index": 1556, "repo": "spring-context-6.0.11", "code": "Package: beanvalidation\n\nClasses and Interfaces: \npublic class BeanValidationPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.beans.factory.InitializingBean; // Simple BeanPostProcessor that checks JSR-303 constraint annotations in Spring-managed beans, throwing an initialization exception in case of constraint violations right before calling the bean's init method (if any).\npublic class CustomValidatorBean extends SpringValidatorAdapter implements Validator, org.springframework.beans.factory.InitializingBean; // Configurable bean class that exposes a specific JSR-303 Validator through its original interface as well as through the Spring Validator interface.\npublic class LocaleContextMessageInterpolator extends Object implements MessageInterpolator; // Delegates to a target MessageInterpolator implementation but enforces Spring's managed Locale.\npublic class LocalValidatorFactoryBean extends SpringValidatorAdapter implements ValidatorFactory, ApplicationContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // This is the central class for jakarta.validation (JSR-303) setup in a Spring application context: It bootstraps a jakarta.validation.ValidationFactory and exposes it through the Spring Validator interface as well as through the JSR-303 Validator interface and the ValidatorFactory interface itself.\npublic class MessageSourceResourceBundleLocator extends Object implements org.hibernate.validator.spi.resourceloading.ResourceBundleLocator; // Implementation of Hibernate Validator 4.3/5.x's ResourceBundleLocator interface, exposing a Spring MessageSource as localized MessageSourceResourceBundle.\npublic class MethodValidationInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor; // An AOP Alliance MethodInterceptor implementation that delegates to a JSR-303 provider for performing method-level validation on annotated methods.\npublic class MethodValidationPostProcessor extends org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor implements org.springframework.beans.factory.InitializingBean; // A convenient BeanPostProcessor implementation that delegates to a JSR-303 provider for performing method-level validation on annotated methods.\n", "des": "Support classes for integrating a JSR-303 Bean Validation provider (such as Hibernate Validator) into a Spring ApplicationContext and in particular with Spring's data binding and validation APIs."}
{"index": 874, "repo": "calcite-core-1.34.0", "code": "Package: graph\n\nClasses and Interfaces: \nInterface AttributedDirectedGraph.AttributedEdgeFactory<V,E>; // Factory for edges that have attributes.\nInterface DirectedGraph<V,E>; // Directed graph.\nInterface DirectedGraph.EdgeFactory<V,E>; // Factory for edges.\nClass AttributedDirectedGraph<V,E extends DefaultEdge>; // Directed graph where edges have attributes and allows multiple edges between any two vertices provided that their attributes are different.\nClass BreadthFirstIterator<V,E extends DefaultEdge>; // Iterates over the vertices in a directed graph in breadth-first order.\nClass CycleDetector<V,E extends DefaultEdge>; // Detects cycles in directed graphs.\nClass DefaultDirectedGraph<V,E extends DefaultEdge>; // Default implementation of DirectedGraph.\nClass DefaultEdge; // Default implementation of Edge.\nClass DepthFirstIterator<V,E extends DefaultEdge>; // Iterates over the vertices in a directed graph in depth-first order.\nClass Graphs; // Miscellaneous graph utilities.\nClass Graphs.FrozenGraph<V,E extends DefaultEdge>; // Immutable grap.\nClass TopologicalOrderIterator<V,E extends DefaultEdge>; // Iterates over the edges of a graph in topological order.\n", "des": "Graph-theoretic algorithms and data structures."}
{"index": 1700, "repo": "drill-common-1.21.1", "code": "Package: common\n\nSub Packages: \npackage common.config; // Internal configuration state definitions.\npackage common.exceptions; // Various exceptions used in logical, physical and execution contexts.\npackage common.types; // Logical data types.\npackage common.util; // Utilities useful across packages.\n\nClasses and Interfaces: \npublic final class AutoCloseablePointer<T extends AutoCloseable> extends Object implements AutoCloseable; // A class similar to Pointer<>, but with features unique to holding AutoCloseable pointers.\npublic class AutoCloseables extends Object; // Utilities for AutoCloseable classes.\npublic static interface AutoCloseables.Closeable extends AutoCloseable;\npublic class CatastrophicFailure extends Object;\npublic class DeferredException extends Object implements AutoCloseable; // Collects one or more exceptions that may occur, using suppressed exceptions.\npublic class DrillAutoCloseables extends Object; // Provides functionality comparable to Guava's Closeables for AutoCloseables.\npublic abstract class EventProcessor<T> extends Object; // Process events serially. Our use of listeners that deliver events directly can sometimes cause problems when events are delivered recursively in the middle of event handling by the same object.\npublic class HistoricalLog extends Object; // Utility class that can be used to log activity within a class for later logging and debugging.\npublic final class KerberosUtil extends Object;\npublic class PlanStringBuilder extends Object; // Builds a string in Drill's \"plan string\" format: that shown in the text version of EXPLAIN PLAN FOR output.\npublic abstract class SelfCleaningRunnable extends Object implements Runnable; // A wrapper for Runnables that provides a hook to do cleanup.\npublic class StackTrace extends Object; // Convenient way of obtaining and manipulating stack traces for debugging.\npublic class Typifier extends Object; // This class attempts to infer the data type of an unknown data type.\npublic final class Version extends Object implements Comparable<Version>; // Encapsulates version information and provides ordering\n", "des": "Logical (execution-engine-independent) element definitions."}
{"index": 269, "repo": "nutch-2.4", "code": "Package: tld\n\nClasses and Interfaces: \nClass TLDIndexingFilter; // Adds the Top level domain extensions to the index\n", "des": "Top Level Domain Indexing plugin."}
{"index": 3318, "repo": "opencms-core-15.0", "code": "Package: staticexport\n\nClasses and Interfaces: \nInterface I_CmsLinkSubstitutionHandler; // Allows to configure customized link substitution behavior.\nInterface I_CmsStaticExportHandler; // Provides a method for scrubbing files from the export folder that might have been changed, so that the export is newly created after the next request to the resource.\nClass A_CmsOnDemandStaticExportHandler; // Abstract implementation for the I_CmsStaticExportHandler interface.\nClass A_CmsStaticExportHandler; // Abstract base implementation for the I_CmsStaticExportHandler interface.\nClass CmsAdvancedLinkSubstitutionHandler; // Advanced link substitution behavior.\nClass CmsAfterPublishMultiLanguageStaticExportHandler; // Extended after publish static export handler, supporting multi-language exports.\nClass CmsAfterPublishStaticExportHandler; // Implementation for the I_CmsStaticExportHandler interface.\nClass CmsDefaultLinkSubstitutionHandler; // Default link substitution behavior.\nClass CmsExportFolderMatcher; // This class provides a file name matcher to find out those resources which must be part of a static export.\nClass CmsExportname; // A bean for a export name.\nClass CmsExportname.CmsExportNameComparator; // A export name comparator.\nClass CmsLinkManager; // Does the link replacement for the ≶link> tags.\nClass CmsLinkProcessor; // Implements the HTML parser node visitor pattern to exchange all links on the page.\nClass CmsLinkTable; // Maintains a table of links for an element of a CmsXmlPage.\nClass CmsLinkTable.LinkKeyComparator; // Comparator used to deterministically order the link table.\nClass CmsLocalePrefixLinkSubstitutionHandler; // Link substitution handler required to render single tree localized sites.\nClass CmsOnDemandHtmlSubTreeHandler; // Concrete OnDemandExportHandler.\nClass CmsOnDemandStaticExportHandler; // Concrete OnDemandExportHandler.\nClass CmsPrefixFileFilter; // Implements the file filter used to guess the right suffix of a deleted jsp file.\nClass CmsStaticExportData; // Provides a data structure for the result of an export request.\nClass CmsStaticExportExportRule; // Help class for storing of export-rules.\nClass CmsStaticExportManager; // Provides the functionality to export resources from the OpenCms VFS to the file system.\nClass CmsStaticExportRequest; // Wrapper for static export requests, required for parameter based requests.\n", "des": "Contains the functionality for the static HTML page export."}
{"index": 972, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: support\n\nClasses and Interfaces: \nClass SaajContentHandler; // SAX ContentHandler that transforms callback calls to the creation of SAAJ Nodes and SOAPElements.\nClass SaajUtils; // Collection of generic utility methods to work with SAAJ.\nClass SaajXmlReader; // SAX XMLReader that reads from a SAAJ Node.\n", "des": "Support classes for working with the SOAP with Attachments API for Java (SAAJ)."}
{"index": 594, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: localization\n\nClasses and Interfaces: \nInterface BundleLocalization; // The interface of the service that gets ResourceBundle objects from a given bundle with a given locale.\nInterface LocaleProvider; // A service that is used to determine what the current locale is for a particular context or session.\n", "des": "Provides bundle localization and local provider service APIs."}
{"index": 957, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: interceptor\n\nClasses and Interfaces: \nClass AbstractValidatingInterceptor; // Abstract base class for EndpointInterceptor implementations that validate part of the message using a schema.\nClass DelegatingSmartEndpointInterceptor; // Implementation of the SmartEndpointInterceptor interface that delegates to a delegate EndpointInterceptor.\nClass EndpointInterceptorAdapter; // Default implementation of the EndpointInterceptor interface, for simplified implementation of pre-only/post-only interceptors.\nClass PayloadLoggingInterceptor; // Simple EndpointInterceptor that logs the payload of request and response messages.\nClass PayloadTransformingInterceptor; // Interceptor that transforms the payload of WebServiceMessages using XSLT stylesheet.\n", "des": "Provides miscellaneous endpoints EndpointInterceptor implementations."}
{"index": 484, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: runners\n\nClasses and Interfaces: \nInterface PipelineRunnerRegistrar; // For internal use only; no backwards-compatibility guarantees.\nInterface PTransformMatcher; // For internal use only; no backwards-compatibility guarantees.\nInterface PTransformOverrideFactory<InputT extends PInput,OutputT extends POutput,TransformT extends PTransform<? super InputT,OutputT>>; // For internal use only; no backwards-compatibility guarantees.\nClass AppliedPTransform<InputT extends PInput,OutputT extends POutput,TransformT extends PTransform<? super InputT,OutputT>>; // For internal use only; no backwards-compatibility guarantees.\nClass PTransformOverride; // For internal use only; no backwards-compatibility guarantees.\nClass PTransformOverrideFactory.PTransformReplacement<InputT extends PInput,OutputT extends POutput>; // A PTransform that replaces an AppliedPTransform, and the input required to do so.\nClass PTransformOverrideFactory.ReplacementOutput; // A mapping between original TaggedPValue outputs and their replacements.\nClass TransformHierarchy; // For internal use only; no backwards-compatibility guarantees.\n", "des": "For internal use only; no backwards compatibility guarantees."}
{"index": 1274, "repo": "spring-core-6.0.11", "code": "Package: env\n\nClasses and Interfaces: \npublic abstract class AbstractEnvironment extends Object implements ConfigurableEnvironment; // Abstract base class for Environment implementations.\npublic abstract class AbstractPropertyResolver extends Object implements ConfigurablePropertyResolver; // Abstract base class for resolving properties against any underlying source.\npublic abstract class CommandLinePropertySource<T> extends EnumerablePropertySource<T>; // Abstract base class for PropertySource implementations backed by command line arguments.\npublic class CompositePropertySource extends EnumerablePropertySource<Object>; // Composite PropertySource implementation that iterates over a set of PropertySource instances.\npublic interface ConfigurableEnvironment extends Environment, ConfigurablePropertyResolver; // Configuration interface to be implemented by most if not all Environment types.\npublic interface ConfigurablePropertyResolver extends PropertyResolver; // Configuration interface to be implemented by most if not all PropertyResolver types.\npublic abstract class EnumerablePropertySource<T> extends PropertySource<T>; // A PropertySource implementation capable of interrogating its underlying source object to enumerate all possible property name/value pairs.\npublic interface Environment extends PropertyResolver; // Interface representing the environment in which the current application is running.\npublic interface EnvironmentCapable; // Interface indicating a component that contains and exposes an Environment reference.\npublic class JOptCommandLinePropertySource extends CommandLinePropertySource<joptsimple.OptionSet>; // CommandLinePropertySource implementation backed by a JOpt OptionSet.\npublic class MapPropertySource extends EnumerablePropertySource<Map<String,Object>>; // PropertySource that reads keys and values from a Map object.\npublic class MissingRequiredPropertiesException extends IllegalStateException; // Exception thrown when required properties are not found.\npublic class MutablePropertySources extends Object implements PropertySources; // The default implementation of the PropertySources interface.\n@FunctionalInterface public interface Profiles; // Profile predicate that may be accepted by an Environment.\npublic class PropertiesPropertySource extends MapPropertySource; // PropertySource implementation that extracts properties from a Properties object.\npublic interface PropertyResolver; // Interface for resolving properties against any underlying source.\npublic abstract class PropertySource<T> extends Object; // Abstract base class representing a source of name/value property pairs.\npublic static class PropertySource.StubPropertySource extends PropertySource<Object>; // PropertySource to be used as a placeholder in cases where an actual property source cannot be eagerly initialized at application context creation time.\n", "des": "Spring's environment abstraction consisting of bean definition profile and hierarchical property source support."}
{"index": 2383, "repo": "spring-batch-core-5.0.2", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractApplicationContextFactory extends Object implements ApplicationContextFactory, org.springframework.context.ApplicationContextAware; // ApplicationContextFactory implementation that takes a parent context and a path to the context to create.\npublic interface ApplicationContextFactory; // Factory for the creation of ApplicationContext instances.\npublic class ApplicationContextJobFactory extends Object implements JobFactory; // A JobFactory that creates its own ApplicationContext and pulls a bean out when asked to create a Job.\npublic class AutomaticJobRegistrar extends Object implements org.springframework.core.Ordered, org.springframework.context.SmartLifecycle, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // Loads and unloads Jobs when the application context is created and destroyed.\npublic class ClasspathXmlApplicationContextsFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ApplicationContextFactory[]>, org.springframework.context.ApplicationContextAware; // A convenient factory for creating a set of ApplicationContextFactory components from a set of resources.\n@Configuration(proxyBeanMethods=false) @Import(ScopeConfiguration.class) public class DefaultBatchConfiguration extends Object implements org.springframework.context.ApplicationContextAware; // Base Configuration class that provides common JDBC-based infrastructure beans for enabling and using Spring Batch.\npublic class DefaultJobLoader extends Object implements JobLoader, org.springframework.beans.factory.InitializingBean; // Default implementation of JobLoader.\npublic class GenericApplicationContextFactory extends AbstractApplicationContextFactory; // ApplicationContextFactory implementation that takes a parent context and a path to the context to create.\npublic class GroupAwareJob extends Object implements Job; // A Job that can optionally prepend a group name to another job's name, to make it fit a naming convention for type or origin.\npublic class JobFactoryRegistrationListener extends Object; // Generic service that can bind and unbind a JobFactory in a JobRegistry.\npublic interface JobLoader;\n", "des": "Specific implementations of configuration concerns."}
{"index": 3260, "repo": "opencms-core-15.0", "code": "Package: hsqldb\n\nClasses and Interfaces: \nClass CmsHistoryDriver; // HSQLDB implementation of the history driver methods.\nClass CmsProjectDriver; // HSQLDB implementation of the project driver methods.\nClass CmsSqlManager; // HSQLDB implementation of the SQL Manager.\nClass CmsSubscriptionDriver; // HSQLDB implementation of the subscription driver.\nClass CmsUserDriver; // HSQLDB implementation of the user driver methods.\nClass CmsVfsDriver; // HSQLDB implementation of the VFS driver methods.\n", "des": "HSQLDB implementation of the OpenCms database connector."}
{"index": 770, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: da\n\nClasses and Interfaces: \nClass DanishAnalyzer; // Analyzer for Danish.\n", "des": "Analyzer for Danish."}
{"index": 2821, "repo": "spring-orm-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class OpenEntityManagerInViewFilter extends org.springframework.web.filter.OncePerRequestFilter; // Servlet Filter that binds a JPA EntityManager to the thread for the entire processing of the request.\npublic class OpenEntityManagerInViewInterceptor extends EntityManagerFactoryAccessor implements org.springframework.web.context.request.AsyncWebRequestInterceptor; // Spring web request interceptor that binds a JPA EntityManager to the thread for the entire processing of the request.\npublic class PersistenceAnnotationBeanPostProcessor extends Object implements org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor, org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor, org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor, org.springframework.beans.factory.aot.BeanRegistrationAotProcessor, org.springframework.core.PriorityOrdered, org.springframework.beans.factory.BeanFactoryAware, Serializable; // BeanPostProcessor that processes PersistenceUnit and PersistenceContext annotations, for injection of the corresponding JPA resources EntityManagerFactory and EntityManager.\npublic class SharedEntityManagerBean extends EntityManagerFactoryAccessor implements org.springframework.beans.factory.FactoryBean<EntityManager>, org.springframework.beans.factory.InitializingBean; // FactoryBean that exposes a shared JPA EntityManager reference for a given EntityManagerFactory.\n", "des": "Classes supporting the org.springframework.orm.jpa package."}
{"index": 1780, "repo": "spring-integration-file-6.1.2", "code": "Package: aggregator\n\nClasses and Interfaces: \npublic class FileAggregatingMessageGroupProcessor extends org.springframework.integration.aggregator.AbstractAggregatingMessageGroupProcessor; // An AbstractAggregatingMessageGroupProcessor implementation for file content collecting previously splitted by the FileSplitter with the markers option turned on.\npublic class FileAggregator extends Object implements org.springframework.integration.aggregator.CorrelationStrategy, org.springframework.integration.aggregator.ReleaseStrategy, org.springframework.integration.aggregator.GroupConditionProvider, org.springframework.integration.aggregator.MessageGroupProcessor, org.springframework.beans.factory.BeanFactoryAware; // A convenient component to utilize a FileSplitter.FileMarker-based aggregation logic.\npublic class FileMarkerReleaseStrategy extends Object implements org.springframework.integration.aggregator.ReleaseStrategy, org.springframework.integration.aggregator.GroupConditionProvider; // A ReleaseStrategy which makes a decision based on the presence of FileSplitter.FileMarker.Mark.END message in the group and its FileHeaders.LINE_COUNT header.\n", "des": "Provides support classes for file-based aggregation logic."}
{"index": 3690, "repo": "solr-core-9.3.0", "code": "Package: function\n\nSub Packages: \npackage function.distance; // Solr implementations of ValueSource for distance based function queries.\n\nClasses and Interfaces: \nInterface SolrComparisonBoolFunction.Compare;\nClass CollapseScoreFunction;\nClass CollapseScoreFunction.CollapseScoreFunctionValues;\nClass ConcatStringFunction; // ConcatStringFunction concatenates the string values of its components in the order given.\nClass DualDoubleFunction; // Abstract ValueSource implementation which wraps two ValueSources and applies an extendible double function to their values.\nClass EqualFunction; // Compares two values for equality.\nClass FieldNameValueSource; // Placeholder value source.\nClass FileFloatSource; // Obtains float field values from an external file.\nClass FileFloatSource.ReloadCacheRequestHandler;\nClass MultiStringFunction; // Abstract ValueSource implementation which wraps multiple ValueSources and applies an extendible string function to their values.\nClass OrdFieldSource; // Obtains the ordinal of the field value from LeafReader.getSortedDocValues(java.lang.String).\nClass ReverseOrdFieldSource; // Obtains the ordinal of the field value from LeafReader.getSortedDocValues(java.lang.String) and reverses the order.\nClass SolrComparisonBoolFunction; // Refines ComparisonBoolFunction to compare based on a 'long' or 'double' depending on if the any of the FunctionValues are LongDocValues.\nClass ValueSourceRangeFilter; // RangeFilter over a ValueSource.\n", "des": "Solr implementations of ValueSource for function queries."}
{"index": 2548, "repo": "pulsar-common-3.0.0", "code": "Package: raw\n\nClasses and Interfaces: \npublic class MessageParser extends Object; // Helper class to work with a raw Pulsar entry payload.\npublic static interface MessageParser.MessageProcessor; // Definition of an interface to process a raw Pulsar entry payload.\npublic interface RawMessage; // View of a message that exposes the internal direct-memory buffer for more efficient processing.\npublic interface RawMessageId; // Interface to uniquely identify an internal raw message.\npublic class RawMessageIdImpl extends Object implements RawMessageId;\npublic class RawMessageImpl extends Object implements RawMessage;\npublic class ReferenceCountedMessageMetadata extends io.netty.util.AbstractReferenceCounted; // Class representing a reference-counted object that requires explicit deallocation.\n", "des": "Classes implementing raw API messages."}
{"index": 840, "repo": "calcite-core-1.34.0", "code": "Package: convert\n\nClasses and Interfaces: \nInterface Converter; // A relational expression implements the interface Converter to indicate that it converts a physical attribute, or trait, of a relational expression from one value to another.\nInterface ConverterRule.Config; // Rule configuration.\nInterface TraitMatchingRule.Config; // Rule configuration.\nClass ConverterImpl; // Abstract implementation of Converter.\nClass ConverterRule; // Abstract base class for a rule which converts from one calling convention to another without changing semantics.\nClass NoneConverter; // NoneConverter converts a plan from inConvention to Convention.NONE.\nClass TraitMatchingRule; // TraitMatchingRule adapts a converter rule, restricting it to fire only when its input already matches the expected output trait.\n", "des": "Defines relational expressions and rules for converting between calling conventions."}
{"index": 3185, "repo": "tomcat-api-10.1", "code": "Package: datasources\n\nClasses and Interfaces: \nClass InstanceKeyDataSource; // The base class for SharedPoolDataSource and PerUserPoolDataSource.\nClass PerUserPoolDataSource; // A pooling DataSource appropriate for deployment within J2EE environment.\nClass PerUserPoolDataSourceFactory; // A JNDI ObjectFactory which creates SharedPoolDataSources\nClass SharedPoolDataSource; // A pooling DataSource appropriate for deployment within J2EE environment.\nClass SharedPoolDataSourceFactory; // A JNDI ObjectFactory which creates SharedPoolDataSources\n", "des": "This package contains two DataSources: PerUserPoolDataSource and SharedPoolDataSource which provide a database connection pool."}
{"index": 1185, "repo": "commons-math3-3.6.1", "code": "Package: nonstiff\n\nClasses and Interfaces: \nInterface FieldButcherArrayProvider<T extends RealFieldElement<T>>; // This interface represents an integrator based on Butcher arrays.\nClass AdamsBashforthFieldIntegrator<T extends RealFieldElement<T>>; // This class implements explicit Adams-Bashforth integrators for Ordinary Differential Equations.\nClass AdamsBashforthIntegrator; // This class implements explicit Adams-Bashforth integrators for Ordinary Differential Equations.\nClass AdamsFieldIntegrator<T extends RealFieldElement<T>>; // Base class for Adams-Bashforth and Adams-Moulton integrators.\nClass AdamsIntegrator; // Base class for Adams-Bashforth and Adams-Moulton integrators.\nClass AdamsMoultonFieldIntegrator<T extends RealFieldElement<T>>; // This class implements implicit Adams-Moulton integrators for Ordinary Differential Equations.\nClass AdamsMoultonIntegrator; // This class implements implicit Adams-Moulton integrators for Ordinary Differential Equations.\nClass AdamsNordsieckFieldTransformer<T extends RealFieldElement<T>>; // Transformer to Nordsieck vectors for Adams integrators.\nClass AdamsNordsieckTransformer; // Transformer to Nordsieck vectors for Adams integrators.\nClass AdaptiveStepsizeFieldIntegrator<T extends RealFieldElement<T>>; // This abstract class holds the common part of all adaptive stepsize integrators for Ordinary Differential Equations.\nClass AdaptiveStepsizeIntegrator; // This abstract class holds the common part of all adaptive stepsize integrators for Ordinary Differential Equations.\nClass ClassicalRungeKuttaFieldIntegrator<T extends RealFieldElement<T>>; // This class implements the classical fourth order Runge-Kutta integrator for Ordinary Differential Equations (it is the most often used Runge-Kutta method).\n", "des": "This package provides classes to solve non-stiff Ordinary Differential Equations problems."}
{"index": 985, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: interceptor\n\nClasses and Interfaces: \nClass AbstractFaultCreatingValidatingInterceptor; // Subclass of AbstractValidatingInterceptor that creates a SOAP Fault whenever the request message cannot be validated.\nClass DelegatingSmartSoapEndpointInterceptor; // Implementation of the SmartSoapEndpointInterceptor interface that delegates to a delegate SoapEndpointInterceptor.\nClass PayloadRootSmartSoapEndpointInterceptor; // Implementation of the SmartSoapEndpointInterceptor interface that only intercepts requests that have a specified namespace URI or local part (or both) as payload root.\nClass PayloadValidatingInterceptor; // Interceptor that validates the contents of WebServiceMessages using a schema.\nClass SoapActionSmartEndpointInterceptor; // Implementation of the SmartEndpointInterceptor interface that only intercepts requests that have a specified soap action.\nClass SoapEnvelopeLoggingInterceptor; // SOAP-specific EndpointInterceptor that logs the complete request and response envelope of SoapMessage messages.\n", "des": "Provides miscellaneous endpoints EndpointInterceptor implementations for SOAP purposes."}
{"index": 1060, "repo": "avro-1.11.2", "code": "Package: generic\n\nClasses and Interfaces: \nInterface GenericArray<T>; // Array that permits reuse of contained elements.\nInterface GenericContainer; // Contains data of other types.\nInterface GenericData.InstanceSupplier;\nInterface GenericEnumSymbol<E extends GenericEnumSymbol<E>>; // An enum symbol.\nInterface GenericFixed; // Fixed-size data.\nInterface GenericRecord; // A generic instance of a record schema.\nInterface IndexedRecord; // A record implementation that permits field access by integer index.\nClass GenericData; // Utilities for generic Java data.\nClass GenericData.Array<T>; // Default implementation of an array.\nClass GenericData.EnumSymbol; // Default implementation of GenericEnumSymbol.\nClass GenericData.Fixed; // Default implementation of GenericFixed.\nClass GenericData.Record; // Default implementation of GenericRecord.\nClass GenericDatumReader<D>; // DatumReader for generic Java objects.\nClass GenericDatumWriter<D>; // DatumWriter for generic Java objects.\nClass GenericRecordBuilder; // A RecordBuilder for generic records.\nEnum GenericData.StringType; // Used to specify the Java type for a string schema.\n", "des": "A generic representation for Avro data."}
{"index": 267, "repo": "nutch-2.4", "code": "Package: more\n\nClasses and Interfaces: \nClass MoreIndexingFilter; // Add (or reset) a few metaData properties as respective fields (if they are available), so that they can be accurately used within the search index.\n", "des": "A more indexing plugin, adds \"more\" index fields: last modified date, MIME type, content length."}
{"index": 3549, "repo": "guava-32.1.1-jre", "code": "Package: annotations\n\nClasses and Interfaces: \nAnnotation Type Beta; // Signifies that a public API (public class, method or field) is subject to incompatible changes, or even removal, in a future release.\nAnnotation Type GwtCompatible; // The presence of this annotation on a type indicates that the type may be used with the Google Web Toolkit (GWT).\nAnnotation Type GwtIncompatible; // The presence of this annotation on an API indicates that the method may not be used with the Google Web Toolkit (GWT).\nAnnotation Type J2ktIncompatible; // The presence of this annotation on an API indicates that the method may not be used with J2kt.\nAnnotation Type VisibleForTesting; // Annotates a program element that exists, or is more widely visible than otherwise necessary, only for use in test code.\n", "des": "Annotation types."}
{"index": 440, "repo": "hbase-client-3.0.0-alpha-4", "code": "Package: coprocessor\n\nClasses and Interfaces: \nInterface Batch.Call<T,R>; // Defines a unit of work to be executed.\nInterface Batch.Callback<R>; // Defines a generic callback to be triggered for each Batch.Call.call(Object) result.\nClass Batch; // A collection of interfaces and utilities used for interacting with custom RPC interfaces exposed by Coprocessors.\nClass BigDecimalColumnInterpreter; // ColumnInterpreter for doing Aggregation's with BigDecimal columns.\nClass DoubleColumnInterpreter; // a concrete column interpreter implementation.\nClass LongColumnInterpreter; // a concrete column interpreter implementation.\n", "des": "Provides client classes for invoking Coprocessor RPC protocols Overview Example Usage"}
{"index": 3105, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: boot\n\nSub Packages: \npackage boot.registry; // Defines service registry contracts application are likely to want to utilize for configuring Hibernate behavior.\npackage boot.xsd; // Support for XSD handling, specifically for ORM mappings (Hibernate's `hbm.xml` and JPA's `orm.xml`) and config files (Hibernate's `cfg.xml` and JPA's `persistence.xml`)\n\nClasses and Interfaces: \nInterface AttributeConverterInfo; // Delayed information about an AttributeConverter.\nInterface Metadata; // Represents the ORM model as determined from all provided mapping sources.\nInterface MetadataBuilder; // Contract for specifying various overrides to be used in metamodel building.\nInterface SessionFactoryBuilder; // The contract for building a SessionFactory given a number of options.\nClass CacheRegionDefinition; // Models the definition of caching settings for a particular region.\nClass JaccPermissionDefinition;\nClass MetadataSources; // Entry point into working with sources of metadata information (mapping XML, annotations).\nEnum CacheRegionDefinition.CacheRegionType;\nEnum SchemaAutoTooling; // Defines the possible values for \"hbm2ddl_auto\"\nEnum TempTableDdlTransactionHandling; // Enum describing how creation and dropping of temporary tables should be done in terms of transaction handling.\nClass InvalidMappingException;\nClass MappingException; // Indicates a problem parsing a mapping document.\nClass MappingNotFoundException;\nClass UnsupportedOrmXsdVersionException;\n", "des": "This package contains the contracts that make up the Hibernate native bootstrapping API (building a SessionFactory)."}
{"index": 3518, "repo": "opennlp-tools-2.2.0", "code": "Package: frenchtreebank\n\nClasses and Interfaces: \nClass ConstitParseSampleStream;\nClass ConstitParseSampleStreamFactory; // Note: Do not use this class, internal use only!\n", "des": "Experimental package related to the French Treebank format."}
{"index": 129, "repo": "ignite-core-2.15.0", "code": "Package: tracing\n\nClasses and Interfaces: \nInterface SpiSpecificSpan; // Logical piece of a trace that insulates spi specific logic.\nInterface TracingConfigurationManager; // Allows to configure tracing, read the configuration and restore it to the defaults.\nInterface TracingSpi<S extends SpiSpecificSpan>; // Tracing SPI interface.\nClass NoopSpiSpecificSpan; // Noop and null-safe implementation of SpiSpecificSpan.\nClass NoopTracingSpi; // Noop and null-safe implementation of Tracing SPI.\nClass TracingConfigurationCoordinates; // Specifies to which traces, specific configuration will be applied.\nClass TracingConfigurationCoordinates.Builder; // TracingConfigurationCoordinates builder.\nClass TracingConfigurationParameters; // Set of tracing configuration parameters like sampling rate or included scopes.\nClass TracingConfigurationParameters.Builder; // TracingConfigurationParameters builder.\nEnum Scope; // Tracing span scope.\nEnum SpanStatus; // Various statuses for Spans execution.\n", "des": "Contains common classes and interfaces for tracing SPI implementations."}
{"index": 2145, "repo": "wicket-core-10.0.0-M1", "code": "Package: border\n\nClasses and Interfaces: \npublic class Body extends WebMarkupContainer; // This is a simple Container component which can be used to build Border like components.\npublic abstract class Border extends WebMarkupContainer implements IComponentResolver, IQueueRegion; // A border component has associated markup which is drawn and determines placement of markup and/or components nested within the border component.\npublic class BorderBehavior extends Behavior; // This is a behavior implementation that can be used if you have markup that should be around a component.\npublic abstract class BorderPanel extends Panel; // Whereas a Panel replaces the body markup with the associated markup file, a BorderPanel assumes a that Body component renders the body markup including any number of Wicket Components.\n", "des": "Border components."}
{"index": 159, "repo": "ignite-core-2.15.0", "code": "Package: failure\n\nClasses and Interfaces: \nClass FailureProcessor; // General failure processing API\n", "des": "Failure processor."}
{"index": 2623, "repo": "shiro-web-2.0.0-alpha-2", "code": "Package: config\n\nClasses and Interfaces: \npublic class IniFilterChainResolverFactory extends org.apache.shiro.ini.IniFactorySupport<FilterChainResolver>; // A Factory that creates FilterChainResolver instances based on Ini configuration.\npublic class ShiroFilterConfiguration extends Object; // Configuration for Shiro's root level servlet filter.\n@Deprecated public class WebIniSecurityManagerFactory extends org.apache.shiro.ini.IniSecurityManagerFactory;\n", "des": "Web-specific implementation extensions to the org.apache.shiro.config components."}
{"index": 1219, "repo": "commons-text-1.10.0", "code": "Package: io\n\nClasses and Interfaces: \nClass StringSubstitutorReader; // A Reader that performs string substitution on a source Reader using a StringSubstitutor.\n", "des": "StringSubstitutorReader is a Reader that performs string substitution on a source Reader using a StringSubstitutor."}
{"index": 120, "repo": "ignite-core-2.15.0", "code": "Package: encryption\n\nSub Packages: \npackage encryption.keystore; // Contains encryption SPI implementation based on standard jdk keystore.\npackage encryption.noop; // Contains no-op encryption SPI implementation.\n\nClasses and Interfaces: \nInterface EncryptionSpi; // SPI provides encryption features for an Ignite.\n", "des": "Contains APIs for encryption SPI."}
{"index": 52, "repo": "ignite-core-2.15.0", "code": "Package: sorted\n\nClasses and Interfaces: \nInterface SortedEvictionPolicyMBean; // MBean for sorted eviction policy.\nClass SortedEvictionPolicy<K,V>; // Cache eviction policy which will select the minimum cache entry for eviction.\nClass SortedEvictionPolicyFactory<K,V>; // Factory class for SortedEvictionPolicy.\n", "des": "Contains cache sorted eviction policy implementation."}
{"index": 81, "repo": "ignite-core-2.15.0", "code": "Package: roundrobin\n\nClasses and Interfaces: \nInterface RoundRobinLoadBalancingSpiMBean; // Management bean for RoundRobinLoadBalancingSpi SPI.\nClass RoundRobinLoadBalancingSpi; // This SPI iterates through nodes in round-robin fashion and pick the next sequential node.\n", "des": "Contains default round-robin implementation for load balancing SPI."}
{"index": 186, "repo": "ignite-core-2.15.0", "code": "Package: gridfunc\n\nClasses and Interfaces: \nClass AlwaysFalsePredicate<E>; // Defines a predicate which accepts a parameter and always returns false\nClass AlwaysTruePredicate<E>; // Defines a predicate which accepts a parameter and always returns true\nClass AlwaysTrueReducer<T>; // Reducer which always returns true from IgniteReducer.collect(Object)\nClass AtomicIntegerFactoryCallable; // Atomic integer factory.\nClass CacheEntryGetValueClosure; // Cache entry to get-value transformer closure.\nClass CacheEntryHasPeekPredicate; // Cache entry has-peek-value predicate.\nClass ClusterNodeGetIdClosure; // Grid node to node ID transformer closure.\nClass ConcurrentHashSetFactoryCallable; // Concurrent hash set factory.\nClass ConcurrentMapFactoryCallable; // Concurrent hash map factory.\nClass ContainsNodeIdsPredicate<T extends ClusterNode>; // Grid node predicate evaluating on the given node IDs.\nClass ContainsPredicate<T>; // Predicate which returns true if it receives an element that is contained in the passed in collection.\nClass EntryByKeyEvaluationPredicate<K,V>; // Predicate evaluates to true for given value.\nClass EqualsClusterNodeIdPredicate<T extends ClusterNode>; // Creates grid node predicate evaluating on the given node ID.\nClass EqualsUuidPredicate; // UUID equals predicate.\nClass FlatCollectionWrapper<T>; // Wrapper which iterable over the elements of the inner collections.\nClass FlatIterator<T>; // Iterator over the elements of given iterators.\nClass HasEqualIdPredicate<T extends ClusterNode>; // ClusterNode has equal id predicate.\nClass HasNotEqualIdPredicate<T extends ClusterNode>; // ClusterNode node has NOT equal id predicate.\nClass IdentityClosure; // Identity closure.\nClass IntSumReducer; // Reducer that calculates sum of integer elements.\nClass IsAllPredicate<T>; // Predicate that evaluates to true if each of its component preds evaluates to true.\nClass IsNotAllPredicate<T>; // Negated predicate.\nClass IsNotNullPredicate<E>; // Defines a predicate which checks a parameter on null.\nClass LongSumReducer; // Reducer that calculates sum of long integer elements.\nClass MapFactoryCallable; // Hash map factory.\nClass MultipleIterator<T>; // Concatenates multiple iterators as single one.\n", "des": "Contains utilities classes for GridFunc."}
{"index": 2674, "repo": "spring-r2dbc-6.0.11", "code": "Package: lookup\n\nClasses and Interfaces: \npublic abstract class AbstractRoutingConnectionFactory extends Object implements ConnectionFactory, org.springframework.beans.factory.InitializingBean; // Abstract ConnectionFactory implementation that routes AbstractRoutingConnectionFactory.create() calls to one of various target factories based on a lookup key.\npublic class BeanFactoryConnectionFactoryLookup extends Object implements ConnectionFactoryLookup, org.springframework.beans.factory.BeanFactoryAware; // ConnectionFactoryLookup implementation based on a Spring BeanFactory.\n@FunctionalInterface public interface ConnectionFactoryLookup; // Strategy interface for looking up ConnectionFactory by name.\npublic class ConnectionFactoryLookupFailureException extends org.springframework.dao.NonTransientDataAccessException; // Exception to be thrown by a ConnectionFactoryLookup implementation, indicating that the specified ConnectionFactory could not be obtained.\npublic class MapConnectionFactoryLookup extends Object implements ConnectionFactoryLookup; // Simple ConnectionFactoryLookup implementation that relies on a map for doing lookups.\npublic class SingleConnectionFactoryLookup extends Object implements ConnectionFactoryLookup; // An implementation of ConnectionFactoryLookup that simply wraps a single given ConnectionFactory returned for any connection factory name.\n", "des": "Provides a strategy for looking up R2DBC ConnectionFactories by name."}
{"index": 1682, "repo": "spring-integration-mqtt-6.1.2", "code": "Package: xml\n\nClasses and Interfaces: \npublic class MqttMessageDrivenChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser; // The MqttAdapter Message Driven Channel adapter parser.\npublic class MqttNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // The namespace handler for the MqttAdapter namespace.\npublic class MqttOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // The parser for the MqttAdapter Outbound Channel Adapter.\n", "des": "Provides parser classes to provide Xml namespace support for the MqttAdapter components."}
{"index": 2857, "repo": "spring-integration-core-6.1.2", "code": "Package: endpoint\n\nClasses and Interfaces: \n@IntegrationManagedResource public abstract class AbstractEndpoint extends IntegrationObjectSupport implements ManageableSmartLifecycle, org.springframework.beans.factory.DisposableBean; // The base class for Message Endpoint implementations.\npublic abstract class AbstractFetchLimitingMessageSource<T> extends AbstractMessageSource<T> implements MessageSourceManagement; // A message source that can limit the number of remote objects it fetches.\n@IntegrationManagedResource public abstract class AbstractMessageSource<T> extends AbstractExpressionEvaluator implements MessageSource<T>, IntegrationInboundManagement, NamedComponent, org.springframework.beans.factory.BeanNameAware; // Abstract message source.\npublic abstract class AbstractPollingEndpoint extends AbstractEndpoint implements org.springframework.beans.factory.BeanClassLoaderAware; // An AbstractEndpoint extension for Polling Consumer pattern basics.\npublic class EventDrivenConsumer extends AbstractEndpoint implements IntegrationConsumer; // Message Endpoint that connects any MessageHandler implementation to a SubscribableChannel.\npublic class ExpressionEvaluatingMessageSource<T> extends AbstractMessageSource<T> implements ExpressionCapable;\npublic abstract class ExpressionMessageProducerSupport extends MessageProducerSupport; // A MessageProducerSupport sub-class that provides ExpressionMessageProducerSupport.payloadExpression evaluation with result as a payload for Message to send.\npublic interface IntegrationConsumer extends NamedComponent; // Message consumers implement this interface, the message handler within a consumer may or may not emit output messages.\npublic class MessageProcessorMessageSource extends AbstractMessageSource<Object>; // The MessageSource strategy implementation to produce a Message from underlying MessageProcessorMessageSource.messageProcessor for polling endpoints.\npublic abstract class MessageProducerSupport extends AbstractEndpoint implements MessageProducer, TrackableComponent, org.springframework.beans.factory.SmartInitializingSingleton, IntegrationPattern, IntegrationInboundManagement; // A support class for producer endpoints that provides a setter for the output channel and a convenience method for sending Messages.\npublic class MessageSourcePollingTemplate extends Object implements PollingOperations; // A PollingOperations used to ad-hoc poll a MessageSource.\npublic class MethodInvokingMessageSource extends AbstractMessageSource<Object> implements ManageableLifecycle; // A MessageSource implementation that invokes a no-argument method so that its return value may be sent to a channel.\n", "des": "Provides core classes related to Endpoints."}
{"index": 3644, "repo": "solr-core-9.3.0", "code": "Package: placement\n\nSub Packages: \npackage placement.impl; // Implementation classes (not visible to plugins, subject to change at any time) for the interfaces in org.apache.solr.cluster.placement and to make them work with the rest of Solr.\npackage placement.plugins; // Sample plugin implementations.\n\nClasses and Interfaces: \nInterface AttributeFetcher; // Instances of this interface are used to fetch various attributes from nodes (and other sources) in the cluster.\nInterface AttributeValues;\nInterface BalancePlan; // A fully specified plan or instructions for replica balancing to be applied to the cluster.\nInterface BalancePlanFactory; // Allows plugins to create BalancePlans telling the Solr layer how to balance replicas following the processing of a BalanceRequest.\nInterface BalanceRequest; // A cluster related placement request that Solr asks a PlacementPlugin to resolve and compute replica balancing plan for replicas that already exist across a set of Nodes.\nInterface CollectionMetrics; // Collection-level metrics.\nInterface DeleteCollectionRequest; // Delete collection request.\nInterface DeleteReplicasRequest; // Delete replicas request.\nInterface DeleteShardsRequest; // Delete shards request.\nInterface Metric<T>; // Metric-related attribute of a node or replica.\nInterface ModificationRequest; // Collection modification request.\nInterface NodeMetric<T>; // Node metric identifier, corresponding to a node-level metric registry and the internal metric name.\nInterface PlacementContext; // Placement context makes it easier to pass around and access main placement-related components.\nInterface PlacementPlan; // A fully specified plan or instructions for placement, deletion or move to be applied to the cluster.\nInterface PlacementPlanFactory; // Allows plugins to create PlacementPlans telling the Solr layer where to create replicas following the processing of a PlacementRequest.\nInterface PlacementPlugin; // Implemented by external plugins to control replica placement and movement on the search cluster (as well as other things such as cluster elasticity?) when cluster changes are required (initiated elsewhere, most likely following a Collection API call).\nInterface PlacementPluginConfig; // Configuration beans should use this interface to define public (mutable) configuration properties.\nInterface PlacementPluginFactory<T extends PlacementPluginConfig>; // Factory implemented by client code and configured in container plugins (see ContainerPluginsApi.editAPI) allowing the creation of instances of PlacementPlugin to be used for replica placement computation.\n", "des": "This package contains interfaces visible by plugins (i.e."}
{"index": 1658, "repo": "jena-core-4.9.0", "code": "Package: rulesys\n\nSub Packages: \npackage rulesys.builtins; // Implementations of the Builtin class which provides primitive operations to the rule engines.\npackage rulesys.impl; // Internal implementation objects used by the rule system interpreters and compilers.\n\nClasses and Interfaces: \npublic interface BackwardRuleInfGraphI extends SilentAddI, InfGraph; // This interface collects together those operations that the backchaining engine needs to invoke in the parent InfGraph.\npublic class BasicForwardRuleInfGraph extends BaseInfGraph implements ForwardRuleInfGraphI; // An inference graph interface that runs a set of forward chaining rules to conclusion on each added triple and stores the entire result set.\npublic class BasicForwardRuleReasoner extends Object implements Reasoner; // Reasoner implementation which augments or transforms an RDF graph according to a set of rules.\npublic interface BindingEnvironment; // Interface through which the current bound values of variables can be found.\npublic interface Builtin; // Rules employ builtins to do all tests and actions other than simple triple matches and triple creation.\npublic class BuiltinException extends JenaException; // Exceptions thrown by runtime errors in executing rule system builtin operations.\npublic abstract class BuiltinRegistry extends Object;\npublic interface ClauseEntry; // Common interface for all objects that can go into rules.\npublic class FBRuleInfGraph extends BasicForwardRuleInfGraph implements BackwardRuleInfGraphI; // An inference graph that uses a mixture of forward and backward chaining rules.\npublic static class FBRuleInfGraph.RuleStore extends Object; // Structure used to wrap up pre-processed/compiled rule sets.\npublic class FBRuleReasoner extends Object implements RuleReasoner; // Rule-based reasoner interface.\npublic interface ForwardRuleInfGraphI extends InfGraph, SilentAddI; // This interface collects together the operations on the InfGraph which are needed to support the forward rule engine.\npublic class Functor extends Object implements ClauseEntry; // A functor comprises a functor name and a list of arguments.\npublic class FunctorDatatype extends BaseDatatype; // Datatype definition for functor-valued literals.\npublic class GenericRuleReasoner extends FBRuleReasoner; // A reasoner interface that is able to invoke any of the useful rule engine combinations.\n", "des": "Provides a selection of simple rule engines for Jena inference models."}
{"index": 2131, "repo": "spring-context-support-6.0.11", "code": "Package: transaction\n\nClasses and Interfaces: \npublic abstract class AbstractTransactionSupportingCacheManager extends org.springframework.cache.support.AbstractCacheManager; // Base class for CacheManager implementations that want to support built-in awareness of Spring-managed transactions.\npublic class TransactionAwareCacheDecorator extends Object implements org.springframework.cache.Cache; // Cache decorator which synchronizes its TransactionAwareCacheDecorator.put(java.lang.Object, java.lang.Object), TransactionAwareCacheDecorator.evict(java.lang.Object) and TransactionAwareCacheDecorator.clear() operations with Spring-managed transactions (through Spring's TransactionSynchronizationManager), performing the actual cache put/evict/clear operation only in the after-commit phase of a successful transaction.\npublic class TransactionAwareCacheManagerProxy extends Object implements org.springframework.cache.CacheManager, org.springframework.beans.factory.InitializingBean; // Proxy for a target CacheManager, exposing transaction-aware Cache objects which synchronize their Cache.put(java.lang.Object, java.lang.Object) operations with Spring-managed transactions (through Spring's TransactionSynchronizationManager), performing the actual cache put operation only in the after-commit phase of a successful transaction.\n", "des": "Transaction-aware decorators for the org.springframework.cache package."}
{"index": 3395, "repo": "commons-imaging-1.0-alpha3", "code": "Package: decoder\n\nClasses and Interfaces: \nClass JpegDecoder;\n", "des": "JPEG image format decoder."}
{"index": 1248, "repo": "spring-integration-smb-6.1.2", "code": "Package: inbound\n\nClasses and Interfaces: \npublic class SmbInboundFileSynchronizer extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<jcifs.smb.SmbFile>; // An implementation of AbstractInboundFileSynchronizer for SMB.\npublic class SmbInboundFileSynchronizingMessageSource extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizingMessageSource<jcifs.smb.SmbFile>; // A MessageSource implementation for SMB.\npublic class SmbStreamingMessageSource extends org.springframework.integration.file.remote.AbstractRemoteFileStreamingMessageSource<jcifs.smb.SmbFile>; // Message source for streaming SMB remote file contents.\n", "des": "Inbound Channel Adapters implementations for SMB protocol."}
{"index": 3234, "repo": "opencms-core-15.0", "code": "Package: rpc\n\nClasses and Interfaces: \nInterface I_CmsContentService; // The content service used to load and persist entity and type information.\nInterface I_CmsContentServiceAsync; // The content service used to load and persist entity and type information.\nInterface I_CmsSerialDateService; // Synchronous interface for the serial date service.\nInterface I_CmsSerialDateServiceAsync; // Asynchronous interface for the serial date service.\n", "des": "Contains the acacia editor RPC service interfaces."}
{"index": 3737, "repo": "lucene-queryparser-9.7.0", "code": "Package: messages\n\nClasses and Interfaces: \nInterface Message; // Message Interface for a lazy loading.\nInterface NLSException; // Interface that exceptions should implement to support lazy loading of messages.\nClass MessageImpl; // Default implementation of Message interface.\nClass NLS; // MessageBundles classes extend this class, to implement a bundle.\n", "des": "For Native Language Support (NLS), system of software internationalization."}
{"index": 3512, "repo": "opennlp-tools-2.2.0", "code": "Package: doccat\n\nClasses and Interfaces: \nInterface DoccatEvaluationMonitor; // A marker interface for evaluating doccat.\nInterface DocumentCategorizer; // Interface for classes which categorize documents.\nInterface FeatureGenerator; // Interface for generating features for document categorization.\nClass BagOfWordsFeatureGenerator; // Generates a feature for each word in a document.\nClass DoccatCrossValidator; // Cross validator for DocumentCategorizer.\nClass DoccatFactory; // The factory that provides Doccat default implementations and resources.\nClass DoccatModel; // A model for document categorization\nClass DocumentCategorizerEvaluator; // The DocumentCategorizerEvaluator measures the performance of the given DocumentCategorizer with the provided reference samples.\nClass DocumentCategorizerEventStream; // Iterator-like class for modeling document classification events.\nClass DocumentCategorizerME; // A Max-Ent based implementation of DocumentCategorizer.\nClass DocumentSample; // Class which holds a classified document and its category.\nClass DocumentSampleStream; // Reads in string encoded training samples, parses them and outputs DocumentSample objects.\nClass NGramFeatureGenerator; // Generates ngram features for a document.\n", "des": "Package for classifying a document into a category."}
{"index": 214, "repo": "nutch-2.4", "code": "Package: extractor\n\nClasses and Interfaces: \nClass JsoupHtmlParser;\nClass TestJsoupHtmlParser;\nClass ViewCountNormalizer;\n", "des": "Parse filter based on Jsoup"}
{"index": 1518, "repo": "spring-context-6.0.11", "code": "Package: format\n\nSub Packages: \npackage format.annotation; // Annotations for declaratively configuring field formatting rules.\npackage format.datetime; // Formatters for java.util.Date properties.\npackage format.number; // Formatters for java.lang.Number properties.\npackage format.support; // Support classes for the formatting package, providing common implementations as well as adapters.\n\nClasses and Interfaces: \npublic interface AnnotationFormatterFactory<A extends Annotation>; // A factory that creates formatters to format values of fields annotated with a particular Annotation.\npublic interface Formatter<T> extends Printer<T>, Parser<T>; // Formats objects of type T.\npublic interface FormatterRegistrar; // Registers Converters and Formatters with a FormattingConversionService through the FormatterRegistry SPI.\npublic interface FormatterRegistry extends org.springframework.core.convert.converter.ConverterRegistry; // A registry of field formatting logic.\n@FunctionalInterface public interface Parser<T>; // Parses text strings to produce instances of T.\n@FunctionalInterface public interface Printer<T>; // Prints objects of type T for display.\n", "des": "An API for defining Formatters to format field model values for display in a UI."}
{"index": 3700, "repo": "solr-core-9.3.0", "code": "Package: join\n\nClasses and Interfaces: \nClass BlockJoinChildQParser;\nClass BlockJoinChildQParserPlugin; // Usage: {!child of=\"PARENT:true\"}PARENT_PRICE:10\nClass BlockJoinParentQParser;\nClass BlockJoinParentQParserPlugin; // Usage: {!parent which=\"PARENT:true\"}CHILD_PRICE:10 supports optional score parameter with one of ScoreMode values: None,Avg,Total,Min,Max.\nClass ChildFieldValueSourceParser;\nClass CrossCollectionJoinQParser;\nClass CrossCollectionJoinQuery;\nClass FiltersQParser;\nClass FiltersQParserPlugin;\nClass GraphPointsCollector;\nClass GraphQParserPlugin; // Query parser plugin for solr to wrap the graph query parser.\nClass GraphQuery; // GraphQuery - search for nodes and traverse edges in an index.\nClass GraphQueryParser; // Solr query parser that will handle parsing graph query requests.\nClass HashRangeQParser;\nClass HashRangeQParserPlugin; // Matches documents where the specified field hashes to a value within the given range.\nClass HashRangeQuery;\nClass MultiValueTermOrdinalCollector; // Populates a bitset of (top-level) ordinals based on field values in a multi-valued field.\nClass ScoreJoinQParserPlugin; // Create a query-time join query with scoring.\n", "des": "Classes related to joins."}
{"index": 2890, "repo": "spring-integration-core-6.1.2", "code": "Package: observation\n\nClasses and Interfaces: \npublic class DefaultMessageReceiverObservationConvention extends Object implements MessageReceiverObservationConvention; // A default MessageReceiverObservationConvention implementation.\npublic class DefaultMessageRequestReplyReceiverObservationConvention extends Object implements MessageRequestReplyReceiverObservationConvention; // A default MessageRequestReplyReceiverObservationConvention implementation.\npublic class DefaultMessageSenderObservationConvention extends Object implements MessageSenderObservationConvention; // A default MessageSenderObservationConvention implementation.\npublic enum IntegrationObservation extends Enum<IntegrationObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // The ObservationDocumentation implementation for Spring Integration infrastructure.\npublic static enum IntegrationObservation.GatewayTags extends Enum<IntegrationObservation.GatewayTags> implements io.micrometer.common.docs.KeyName; // Key names for message handler observations.\npublic static enum IntegrationObservation.HandlerTags extends Enum<IntegrationObservation.HandlerTags> implements io.micrometer.common.docs.KeyName; // Key names for message handler observations.\npublic static enum IntegrationObservation.ProducerTags extends Enum<IntegrationObservation.ProducerTags> implements io.micrometer.common.docs.KeyName; // Key names for message producer observations.\npublic class MessageReceiverContext extends io.micrometer.observation.transport.ReceiverContext<org.springframework.messaging.Message<?>>; // The ReceiverContext extension for Message context.\npublic interface MessageReceiverObservationConvention extends io.micrometer.observation.ObservationConvention<MessageReceiverContext>; // A MessageReceiverContext-based ObservationConvention contract.\npublic class MessageRequestReplyReceiverContext extends io.micrometer.observation.transport.RequestReplyReceiverContext<org.springframework.messaging.Message<?>,org.springframework.messaging.Message<?>>; // The RequestReplyReceiverContext extension for a Message contract with inbound gateways.\npublic interface MessageRequestReplyReceiverObservationConvention extends io.micrometer.observation.ObservationConvention<MessageRequestReplyReceiverContext>; // A MessageRequestReplyReceiverContext-based ObservationConvention contract.\npublic class MessageSenderContext extends io.micrometer.observation.transport.SenderContext<MutableMessage<?>>; // The SenderContext extension for Message context.\n", "des": "Provides classes to support of Micrometer Observation API."}
{"index": 3589, "repo": "lucene-test-framework-9.7.0", "code": "Package: uniformsplit\n\nSub Packages: \npackage uniformsplit.sharedterms; // Test PostingsFormat for testing org.apache.lucene.codecs.uniformsplit.sharedterms with block encryption using basic ROT13.\n\nClasses and Interfaces: \nClass Rot13CypherTestUtil; // Test utility for simple ROT13 cipher (https://en.wikipedia.org/wiki/ROT13).\nClass UniformSplitRot13PostingsFormat; // UniformSplitPostingsFormat with block encoding using ROT13 cypher.\n", "des": "Test PostingsFormat for testing org.apache.lucene.codecs.uniformsplit with block encryption using basic ROT13."}
{"index": 2756, "repo": "spring-beans-6.0.11", "code": "Package: aot\n\nClasses and Interfaces: \npublic final class AotServices<T> extends Object implements Iterable<T>; // A collection of AOT services that can be loaded from a SpringFactoriesLoader or obtained from a ListableBeanFactory.\npublic static class AotServices.Loader extends Object; // Loader class used to actually load the services.\npublic static enum AotServices.Source extends Enum<AotServices.Source>; // Sources from which services were obtained.\n@FunctionalInterface public interface AutowiredArguments; // Resolved arguments to be autowired.\npublic class AutowiredArgumentsCodeGenerator extends Object; // Code generator to apply AutowiredArguments.\npublic final class AutowiredFieldValueResolver extends Object; // Resolver used to support the autowiring of fields.\npublic final class AutowiredMethodArgumentsResolver extends Object; // Resolver used to support the autowiring of methods.\n@FunctionalInterface public interface BeanFactoryInitializationAotContribution; // AOT contribution from a BeanFactoryInitializationAotProcessor used to initialize a bean factory.\n@FunctionalInterface public interface BeanFactoryInitializationAotProcessor; // AOT processor that makes bean factory initialization contributions by processing ConfigurableListableBeanFactory instances.\npublic interface BeanFactoryInitializationCode; // Interface that can be used to configure the code that will be generated to perform bean factory initialization.\npublic final class BeanInstanceSupplier<T> extends Object implements InstanceSupplier<T>; // Specialized InstanceSupplier that provides the factory Method used to instantiate the underlying bean instance, if any.\n@FunctionalInterface public interface BeanRegistrationAotContribution; // AOT contribution from a BeanRegistrationAotProcessor used to register a single bean definition.\n@FunctionalInterface public interface BeanRegistrationAotProcessor; // AOT processor that makes bean registration contributions by processing RegisteredBean instances.\npublic interface BeanRegistrationCode; // Interface that can be used to configure the code that will be generated to perform registration of a single bean.\npublic interface BeanRegistrationCodeFragments; // Generate the various fragments of code needed to register a bean.\npublic class BeanRegistrationCodeFragmentsDecorator extends Object implements BeanRegistrationCodeFragments; // A BeanRegistrationCodeFragments decorator implementation.\n@FunctionalInterface public interface BeanRegistrationExcludeFilter; // Filter that can be used to exclude AOT processing of a RegisteredBean.\n", "des": "AOT support for bean factories."}
{"index": 2132, "repo": "spring-context-support-6.0.11", "code": "Package: mail\n\nSub Packages: \npackage mail.javamail; // JavaMail support for Spring's mail infrastructure.\n\nClasses and Interfaces: \npublic class MailAuthenticationException extends MailException; // Exception thrown on failed authentication.\npublic abstract class MailException extends org.springframework.core.NestedRuntimeException; // Base class for all mail exceptions.\npublic interface MailMessage; // This is a common interface for mail messages, allowing a user to set key values required in assembling a mail message, without needing to know if the underlying message is a simple text message or a more sophisticated MIME message.\npublic class MailParseException extends MailException; // Exception thrown if illegal message properties are encountered.\npublic class MailPreparationException extends MailException; // Exception to be thrown by user code if a mail cannot be prepared properly, for example when a FreeMarker template cannot be rendered for the mail text.\npublic interface MailSender; // This interface defines a strategy for sending simple mails.\npublic class MailSendException extends MailException; // Exception thrown when a mail sending error is encountered.\npublic class SimpleMailMessage extends Object implements MailMessage, Serializable; // Models a simple mail message, including data such as the from, to, cc, subject, and text fields.\n", "des": "Spring's generic mail infrastructure."}
{"index": 3078, "repo": "spring-ws-core-4.0.5", "code": "Package: version\n\nClasses and Interfaces: \npublic abstract class AbstractAddressingVersion extends org.springframework.xml.transform.TransformerObjectSupport implements AddressingVersion; // Abstract base class for AddressingVersion implementations.\npublic class Addressing10 extends AbstractAddressingVersion; // Implements WS-Addressing 1.0 (May 2006).\npublic class Addressing200408 extends AbstractAddressingVersion; // Implements the August 2004 edition of the WS-Addressing specification.\npublic interface AddressingVersion; // Defines the contract for a specific version of the WS-Addressing specification.\n", "des": "Contains abstractions over various versions of the WS-Addressing specification."}
{"index": 1671, "repo": "spring-boot-cli-3.1.1", "code": "Package: init\n\nClasses and Interfaces: \npublic class InitCommand extends OptionParsingCommand; // Command that initializes a project using Spring initializr.\npublic class ReportableException extends RuntimeException; // Exception with a message that can be reported to the user.\n", "des": "CLI command for initializing a new application using Spring Initializr."}
{"index": 3218, "repo": "commons-configuration2-2.9.0", "code": "Package: ex\n\nClasses and Interfaces: \nClass ConfigurationException; // Any exception that occurs while initializing a Configuration object.\nClass ConfigurationRuntimeException; // A configuration related runtime exception.\nClass ConversionException; // Thrown when a property is incompatible with the type requested.\n", "des": "This package contains all exception classes used by this library."}
{"index": 1707, "repo": "spring-integration-jmx-6.1.2", "code": "Package: monitor\n\nClasses and Interfaces: \npublic class IntegrationJmxAttributeSource extends org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource; // The AnnotationJmxAttributeSource extension to resolve ManagedResources via IntegrationManagedResource on classes.\n@ManagedResource public class IntegrationMBeanExporter extends org.springframework.jmx.export.MBeanExporter implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor; // MBean exporter for Spring Integration components in an existing application.\n", "des": "Provides classes related to Spring Integration managed resources."}
{"index": 641, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: exceptions\n\nClasses and Interfaces: \nClass FederationPolicyException; // Generic policy exception.\nClass FederationPolicyInitializationException; // This exception is thrown when the initialization of a federation policy is not successful.\nClass NoActiveSubclustersException; // This exception is thrown when policies cannot locate any active cluster.\nClass UnknownSubclusterException; // This exception is thrown whenever a policy is given a SubClusterId that is unknown.\n", "des": "Exceptions for policies."}
{"index": 59, "repo": "ignite-core-2.15.0", "code": "Package: services\n\nClasses and Interfaces: \nInterface Service; // An instance of grid-managed service.\nInterface ServiceCallContext; // Service call context.\nInterface ServiceCallInterceptor; // Service call interceptor.\nInterface ServiceContext; // Service execution context.\nInterface ServiceDescriptor; // Service deployment descriptor.\nClass ServiceCallContextBuilder; // Service call context builder.\nClass ServiceConfiguration; // Managed service configuration.\nClass ServiceDeploymentException; // Exception indicating service deployment failure.\n", "des": "Contains main Managed Services APIs."}
{"index": 1610, "repo": "spring-data-neo4j-7.1.2", "code": "Package: mapping\n\nSub Packages: \npackage mapping.callback; // This package contains the callback API.\n\nClasses and Interfaces: \n@API(status=INTERNAL, since=\"6.3\") public final class AssociationHandlerSupport extends Object; // Warning Internal API, might change without further notice, even in patch releases.\n@API(status=EXPERIMENTAL, since=\"6.0\") public final class Constants extends Object; // A pool of constants used in our Cypher generation.\n@API(status=INTERNAL, since=\"6.0\") public final class CreateRelationshipStatementHolder extends Object; // The CreateRelationshipStatementHolder holds the Cypher Statement to create a relationship as well as the optional properties that describe the relationship in case of more than a simple relationship.\n@API(status=INTERNAL, since=\"6.0\") public enum CypherGenerator extends Enum<CypherGenerator>; // A generator based on the schema defined by node and relationship descriptions.\n@API(status=INTERNAL, since=\"6.1.2\") public final class DtoInstantiatingConverter extends Object implements Converter<EntityInstanceWithSource,Object>; // Converter to instantiate DTOs from fully equipped domain objects.\n@API(status=INTERNAL, since=\"6.1.2\") public final class EntityFromDtoInstantiatingConverter<T> extends Object implements Converter<Object,T>; // Converter to instantiate entity objects from DTOs\n@API(status=INTERNAL, since=\"6.1.2\") public final class EntityInstanceWithSource extends Object; // Used to keep the raw result around in case of a DTO based projection so that missing properties can be filled later on.\n@API(status=STABLE, since=\"6.0\") public interface GraphPropertyDescription; // Provides minimal information how to map class attributes to the properties of a node or a relationship.\n@API(status=INTERNAL, since=\"6.0\") public final class IdDescription extends Object; // Description how to generate Ids for entities.\n@API(status=INTERNAL) public final class IdentitySupport extends Object; // This class is not part of any public API and will be changed without further notice as needed.\n@API(status=INTERNAL, since=\"6.0\") public final class MappingSupport extends Object;\n", "des": "The main mapping framework."}
{"index": 3441, "repo": "hibernate-core-5.6.15.Final", "code": "Package: pagination\n\nClasses and Interfaces: \nInterface LimitHandler; // Contract defining dialect-specific LIMIT clause handling.\nClass AbstractLimitHandler; // Default implementation of LimitHandler interface.\nClass CUBRIDLimitHandler; // Limit handler for CUBRID\nClass FirstLimitHandler;\nClass Informix10LimitHandler;\nClass LegacyFirstLimitHandler;\nClass LegacyLimitHandler; // Limit handler that delegates all operations to the underlying dialect.\nClass LimitHelper; // A helper for dealing with LimitHandler implementations\nClass NoopLimitHandler; // Handler not supporting query LIMIT clause.\nClass Oracle12LimitHandler; // A LimitHandler for databases which support the ANSI SQL standard syntax FETCH FIRST m ROWS ONLY and OFFSET n ROWS FETCH NEXT m ROWS ONLY.\nClass SQL2008StandardLimitHandler; // LIMIT clause handler compatible with ISO and ANSI SQL:2008 standard.\nClass SQLServer2005LimitHandler; // LIMIT clause handler compatible with SQL Server 2005 and later.\nClass SQLServer2012LimitHandler; // LIMIT clause handler compatible with SQL Server 2012 and later.\nClass SybaseASE157LimitHandler; // This limit handler is very conservative and is only triggered in simple cases involving a select or select distinct.\nClass TopLimitHandler;\n", "des": "Support for Dialect-specific pagination strategies"}
{"index": 1856, "repo": "spring-test-6.0.11", "code": "Package: match\n\nClasses and Interfaces: \npublic class ContentRequestMatchers extends Object; // Factory for request content RequestMatcher's.\npublic class JsonPathRequestMatchers extends Object; // Factory for assertions on the request content using JsonPath expressions.\npublic abstract class MockRestRequestMatchers extends Object; // Static factory methods for RequestMatcher classes.\npublic class XpathRequestMatchers extends Object; // Factory methods for request content RequestMatcher implementations that use an XPath expression.\n", "des": "Contains built-in RequestMatcher implementations."}
{"index": 1285, "repo": "spring-core-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \n@Deprecated(since=\"6.0.5\", forRemoval=true) public class ConcurrentExecutorAdapter extends Object implements Executor;\npublic class ExecutorServiceAdapter extends AbstractExecutorService; // Adapter that takes a Spring TaskExecutor and exposes a full java.util.concurrent.ExecutorService for it.\npublic class TaskExecutorAdapter extends Object implements AsyncListenableTaskExecutor; // Adapter that takes a JDK java.util.concurrent.Executor and exposes a Spring TaskExecutor for it.\n", "des": "Support classes for Spring's TaskExecutor abstraction."}
{"index": 1957, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: mail\n\nClasses and Interfaces: \n@ConfigurationProperties(prefix=\"spring.mail\") public class MailProperties extends Object; // Configuration properties for email support.\n@AutoConfiguration @ConditionalOnClass({jakarta.mail.internet.MimeMessage.class,jakarta.activation.MimeType.class,org.springframework.mail.MailSender.class}) @ConditionalOnMissingBean(org.springframework.mail.MailSender.class) @Conditional(org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration.MailSenderCondition.class) @EnableConfigurationProperties(MailProperties.class) @Import({org.springframework.boot.autoconfigure.mail.MailSenderJndiConfiguration.class,org.springframework.boot.autoconfigure.mail.MailSenderPropertiesConfiguration.class}) public class MailSenderAutoConfiguration extends Object; // Auto configuration for email support.\n@AutoConfiguration(after=MailSenderAutoConfiguration.class) @ConditionalOnProperty(prefix=\"spring.mail\", value=\"test-connection\") @ConditionalOnSingleCandidate(org.springframework.mail.javamail.JavaMailSenderImpl.class) public class MailSenderValidatorAutoConfiguration extends Object; // Auto configuration for testing mail service connectivity on startup.\n", "des": "Auto-configuration for email support."}
{"index": 3561, "repo": "guava-32.1.1-jre", "code": "Package: primitives\n\nClasses and Interfaces: \nClass Booleans; // Static utility methods pertaining to boolean primitives, that are not already found in either Boolean or Arrays.\nClass Bytes; // Static utility methods pertaining to byte primitives, that are not already found in either Byte or Arrays, and interpret bytes as neither signed nor unsigned.\nClass Chars; // Static utility methods pertaining to char primitives, that are not already found in either Character or Arrays.\nClass Doubles; // Static utility methods pertaining to double primitives, that are not already found in either Double or Arrays.\nClass Floats; // Static utility methods pertaining to float primitives, that are not already found in either Float or Arrays.\nClass ImmutableDoubleArray; // An immutable array of double values, with an API resembling List.\nClass ImmutableDoubleArray.Builder; // A builder for ImmutableDoubleArray instances; obtained using ImmutableDoubleArray.builder(int).\nClass ImmutableIntArray; // An immutable array of int values, with an API resembling List.\nClass ImmutableIntArray.Builder; // A builder for ImmutableIntArray instances; obtained using ImmutableIntArray.builder(int).\nClass ImmutableLongArray; // An immutable array of long values, with an API resembling List.\nClass ImmutableLongArray.Builder; // A builder for ImmutableLongArray instances; obtained using ImmutableLongArray.builder(int).\nClass Ints; // Static utility methods pertaining to int primitives, that are not already found in either Integer or Arrays.\nClass Longs; // Static utility methods pertaining to long primitives, that are not already found in either Long or Arrays.\nClass Primitives; // Contains static utility methods pertaining to primitive types and their corresponding wrapper types.\nClass Shorts; // Static utility methods pertaining to short primitives, that are not already found in either Short or Arrays.\nClass SignedBytes; // Static utility methods pertaining to byte primitives that interpret values as signed.\nClass UnsignedBytes; // Static utility methods pertaining to byte primitives that interpret values as unsigned (that is, any negative value b is treated as the positive value 256 + b).\nClass UnsignedInteger; // A wrapper class for unsigned int values, supporting arithmetic operations.\n", "des": "Static utilities for the eight primitive types and void, and value types for treating them as unsigned or storing them in immutable arrays."}
{"index": 1030, "repo": "hadoop-aws-3.3.6", "code": "Package: impl\n\nClasses and Interfaces: \nClass AuditContextUpdater; // Class to track/update context information to set in threads.\nClass CommitContext; // Commit context.\nClass CommitOperations; // The implementation of the various actions a committer needs.\nClass CommitOperations.MaybeIOE; // A holder for a possible IOException; the call CommitOperations.MaybeIOE.maybeRethrow() will throw any exception passed into the constructor, and be a no-op if none was.\nClass CommitUtilsWithMR; // These are commit utility methods which import classes from hadoop-mapreduce, and so only work when that module is on the classpath.\n", "des": "Internal classes which make use of mapreduce code."}
{"index": 1230, "repo": "spring-hateoas-2.1.2", "code": "Package: config\n\nClasses and Interfaces: \n@Retention(RUNTIME) @Target(TYPE) @Documented @Import({org.springframework.hateoas.config.HypermediaConfigurationImportSelector.class,HateoasConfiguration.class,org.springframework.hateoas.config.WebStackImportSelector.class}) public @interface EnableHypermediaSupport; // Activates hypermedia support in the ApplicationContext.\npublic static enum EnableHypermediaSupport.HypermediaType extends Enum<EnableHypermediaSupport.HypermediaType>; // Hypermedia representation types supported.\n@Configuration(proxyBeanMethods=false) @EnablePluginRegistries(LinkDiscoverer.class) public class HateoasConfiguration extends Object; // Common HATEOAS specific configuration.\npublic interface HypermediaMappingInformation; // Interface for registering custom hypermedia handlers.\npublic class HypermediaRestTemplateConfigurer extends Object; // Assembles hypermedia-based message converters and applies them to an existing RestTemplate.\npublic class HypermediaWebClientConfigurer extends Object; // Assembles Jackson2JsonEncoders and Jackson2JsonDecoders needed to wire a WebClient with hypermedia support.\npublic class HypermediaWebTestClientConfigurer extends Object implements WebTestClientConfigurer; // Assembles Jackson2JsonEncoders and Jackson2JsonDecoders needed to wire a WebTestClient with hypermedia support.\npublic interface MediaTypeConfigurationProvider; // SPI used to register internal media types through spring.factories.\npublic class WebConverters extends Object; // Value type to handle registration of hypermedia related HttpMessageConverters.\n", "des": "Spring container configuration support."}
{"index": 3472, "repo": "tomcat-jspapi-10.1", "code": "Package: tagext\n\nClasses and Interfaces: \nInterface BodyTag; // The BodyTag interface extends IterationTag by defining additional methods that let a tag handler manipulate the content of evaluating its body.\nInterface DynamicAttributes; // For a tag to declare that it accepts dynamic attributes, it must implement this interface.\nInterface IterationTag; // The IterationTag interface extends Tag by defining one additional method that controls the reevaluation of its body.\nInterface JspIdConsumer; // Interface that allows tag handlers to be provided with a unique (within the scope of the web application) ID.\nInterface JspTag; // Serves as a base class for Tag and SimpleTag.\nInterface SimpleTag; // Interface for defining Simple Tag Handlers.\nInterface Tag; // The interface of a classic tag handler that does not want to manipulate its body.\nInterface TryCatchFinally; // The auxiliary interface of a Tag, IterationTag or BodyTag tag handler that wants additional hooks for managing resources.\nClass BodyContent; // An encapsulation of the evaluation of the body of an action so it is available to a tag handler.\nClass BodyTagSupport; // A base class for defining tag handlers implementing BodyTag.\nClass FunctionInfo; // Information for a function in a Tag Library.\nClass JspFragment; // Encapsulates a portion of JSP code in an object that can be invoked as many times as needed.\nClass PageData; // Translation-time information on a JSP page.\nClass SimpleTagSupport; // A base class for defining tag handlers implementing SimpleTag.\nClass TagAdapter; // Wraps any SimpleTag and exposes it using a Tag interface.\nClass TagAttributeInfo; // Information on the attributes of a Tag, available at translation time.\nClass TagData; // The (translation-time only) attribute/value information for a tag instance.\nClass TagExtraInfo; // Optional class provided by the tag library author to describe additional translation-time information not described in the TLD.\nClass TagFileInfo; // Tag information for a tag file in a Tag Library; This class is instantiated from the Tag Library Descriptor file (TLD) and is available only at translation time.\nClass TagInfo; // Tag information for a tag in a Tag Library; This class is instantiated from the Tag Library Descriptor file (TLD) and is available only at translation time.\n", "des": "Classes and interfaces for the definition of JavaServer Pages Tag Libraries."}
{"index": 3794, "repo": "lucene-analysis-common-9.7.0", "code": "Package: in\n\nClasses and Interfaces: \nClass IndicNormalizationFilter; // A TokenFilter that applies IndicNormalizer to normalize text in Indian Languages.\nClass IndicNormalizationFilterFactory; // Factory for IndicNormalizationFilter.\nClass IndicNormalizer; // Normalizes the Unicode representation of text in Indian languages.\n", "des": "Analyzer for Indian languages."}
{"index": 655, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: service\n\nClasses and Interfaces: \nInterface SystemServiceManager; // Marker interface for starting services from RM.\n", "des": "Package org.apache.hadoop.yarn.server.service contains service related classes."}
{"index": 1430, "repo": "spring-boot-actuator-3.1.1", "code": "Package: r2dbc\n\nClasses and Interfaces: \npublic class ConnectionFactoryHealthIndicator extends AbstractReactiveHealthIndicator; // A HealthIndicator to validate a R2DBC ConnectionFactory.\n", "des": "Actuator support for R2DBC."}
{"index": 1423, "repo": "spring-boot-actuator-3.1.1", "code": "Package: jetty\n\nClasses and Interfaces: \npublic abstract class AbstractJettyMetricsBinder extends Object implements org.springframework.context.ApplicationListener<org.springframework.boot.context.event.ApplicationStartedEvent>; // Base class for binding Jetty metrics in response to an ApplicationStartedEvent.\npublic class JettyConnectionMetricsBinder extends AbstractJettyMetricsBinder; // AbstractJettyMetricsBinder for JettyConnectionMetrics.\npublic class JettyServerThreadPoolMetricsBinder extends AbstractJettyMetricsBinder; // AbstractJettyMetricsBinder for JettyServerThreadPoolMetrics.\npublic class JettySslHandshakeMetricsBinder extends AbstractJettyMetricsBinder; // AbstractJettyMetricsBinder for JettySslHandshakeMetrics.\n", "des": "Actuator support for Jetty metrics."}
{"index": 38, "repo": "ignite-core-2.15.0", "code": "Package: lifecycle\n\nClasses and Interfaces: \nInterface LifecycleAware; // All components provided in Ignite configuration can implement this interface.\nInterface LifecycleBean; // A bean that reacts to node lifecycle events defined in LifecycleEventType.\nEnum LifecycleEventType; // Node lifecycle event types.\n", "des": "Contains lifecycle-related classes."}
{"index": 16, "repo": "commons-collections4-4.4", "code": "Package: bidimap\n\nClasses and Interfaces: \nClass AbstractBidiMapDecorator<K,V>; // Provides a base decorator that enables additional functionality to be added to a BidiMap via decoration.\nClass AbstractDualBidiMap<K,V>; // Abstract BidiMap implemented using two maps.\nClass AbstractDualBidiMap.BidiMapIterator<K,V>; // Inner class MapIterator.\nClass AbstractDualBidiMap.EntrySet<K,V>; // Inner class EntrySet.\nClass AbstractDualBidiMap.EntrySetIterator<K,V>; // Inner class EntrySetIterator.\nClass AbstractDualBidiMap.KeySet<K>; // Inner class KeySet.\nClass AbstractDualBidiMap.KeySetIterator<K>; // Inner class KeySetIterator.\nClass AbstractDualBidiMap.MapEntry<K,V>; // Inner class MapEntry.\nClass AbstractDualBidiMap.Values<V>; // Inner class Values.\nClass AbstractDualBidiMap.ValuesIterator<V>; // Inner class ValuesIterator.\nClass AbstractDualBidiMap.View<K,V,E>; // Inner class View.\nClass AbstractOrderedBidiMapDecorator<K,V>; // Provides a base decorator that enables additional functionality to be added to an OrderedBidiMap via decoration.\nClass AbstractSortedBidiMapDecorator<K,V>; // Provides a base decorator that enables additional functionality to be added to a SortedBidiMap via decoration.\nClass DualHashBidiMap<K,V>; // Implementation of BidiMap that uses two HashMap instances.\nClass DualLinkedHashBidiMap<K,V>; // Implementation of BidiMap that uses two LinkedHashMap instances.\nClass DualTreeBidiMap<K,V>; // Implementation of BidiMap that uses two TreeMap instances.\nClass DualTreeBidiMap.BidiOrderedMapIterator<K,V>; // Inner class MapIterator.\nClass DualTreeBidiMap.ViewMap<K,V>; // Internal sorted map view.\n", "des": "This package contains implementations of the BidiMap, OrderedBidiMap and SortedBidiMap interfaces."}
{"index": 575, "repo": "commons-collections-3.2.2", "code": "Package: bag\n\nClasses and Interfaces: \nClass AbstractBagDecorator; // Decorates another Bag to provide additional behaviour.\nClass AbstractMapBag; // Abstract implementation of the Bag interface to simplify the creation of subclass implementations.\nClass AbstractMapBag.MutableInteger; // Mutable integer class for storing the data.\nClass AbstractSortedBagDecorator; // Decorates another SortedBag to provide additional behaviour.\nClass HashBag; // Implements Bag, using a HashMap to provide the data storage.\nClass PredicatedBag; // Decorates another Bag to validate that additions match a specified predicate.\nClass PredicatedSortedBag; // Decorates another SortedBag to validate that additions match a specified predicate.\nClass SynchronizedBag; // Decorates another Bag to synchronize its behaviour for a multi-threaded environment.\nClass SynchronizedSortedBag; // Decorates another SortedBag to synchronize its behaviour for a multi-threaded environment.\nClass TransformedBag; // Decorates another Bag to transform objects that are added.\nClass TransformedSortedBag; // Decorates another SortedBag to transform objects that are added.\nClass TreeBag; // Implements SortedBag, using a TreeMap to provide the data storage.\nClass TypedBag; // Decorates another Bag to validate that elements added are of a specific type.\nClass TypedSortedBag; // Decorates another SortedBag to validate that elements added are of a specific type.\nClass UnmodifiableBag; // Decorates another Bag to ensure it can't be altered.\nClass UnmodifiableSortedBag; // Decorates another SortedBag to ensure it can't be altered.\n", "des": "This package contains implementations of the Bag and SortedBag interfaces."}
{"index": 3513, "repo": "opennlp-tools-2.2.0", "code": "Package: entitylinker\n\nClasses and Interfaces: \nInterface EntityLinker<T extends Span>; // EntityLinkers establish connections with external data to enrich extracted entities.\nClass BaseLink; // Represents a minimal tuple of information.\nClass EntityLinkerFactory; // Generates a EntityLinker instances via a properties file configuration.\nClass EntityLinkerProperties; // Properties wrapper for EntityLinker implementations.\nClass LinkedSpan<T extends BaseLink>; // A default, extended Span that holds additional information about a Span.\n", "des": "Package related to linking entities to external data sources."}
{"index": 2380, "repo": "spring-batch-core-5.0.2", "code": "Package: annotation\n\nClasses and Interfaces: \n@Retention(RUNTIME) @Target(METHOD) public @interface AfterChunk; // Marks a method to be called after a chunk is executed. Expected signature: void afterChunk(ChunkContext context)\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterChunkError; // Marks a method to be called after a chunk has failed and been marked for rollback. Expected signature: void afterFailedChunk(ChunkContext context)\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterJob; // Marks a method to be called after a Job has completed.\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterProcess; // Marks a method to be called after an item is passed to an ItemProcessor.\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterRead; // Marks a method to be called after an item is read from an ItemReader Expected signature: void afterRead(T item)\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterStep; // Marks a method to be called after a Step has completed.\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterWrite; // Marks a method to be called after an item is passed to an ItemWriter.\n@Retention(RUNTIME) @Target(METHOD) public @interface BeforeChunk; // Marks a method to be called before a chunk is executed.\n@Retention(RUNTIME) @Target(METHOD) @Qualifier(\"JobExecutionListener\") public @interface BeforeJob; // Marks a method to be called before a Job is executed, which comes after a JobExecution is created and persisted but before the first Step is executed.\n@Retention(RUNTIME) @Target(METHOD) public @interface BeforeProcess; // Marks a method to be called before an item is passed to an ItemProcessor Expected signature: void beforeProcess(T item)\n@Retention(RUNTIME) @Target(METHOD) public @interface BeforeRead; // Marks a method to be called before an item is read from an ItemReader Expected signature: void beforeRead()\n@Retention(RUNTIME) @Target(METHOD) public @interface BeforeStep; // Marks a method to be called before a Step is executed, which comes after a StepExecution is created and persisted but before the first item is read.\n", "des": "Annotations for java based configuration of listeners."}
{"index": 3900, "repo": "solr-solrj-9.3.0", "code": "Package: luke\n\nClasses and Interfaces: \nEnum FieldFlag;\n", "des": "Common constants used by the LukeRequestHandler."}
{"index": 2690, "repo": "spring-data-jpa-3.1.2", "code": "Package: util\n\nClasses and Interfaces: \npublic final class BeanDefinitionUtils extends Object; // Utility methods to work with BeanDefinition instances from BeanFactoryPostProcessors.\npublic static class BeanDefinitionUtils.EntityManagerFactoryBeanDefinition extends Object; // Value object to represent a BeanDefinition for an EntityManagerFactory with a dedicated bean name.\npublic class JpaMetamodel extends Object; // Wrapper around the JPA Metamodel to be able to apply some fixes against bugs in provider implementations.\n", "des": "Spring Data JPA utilities."}
{"index": 3605, "repo": "lucene-queries-9.7.0", "code": "Package: intervals\n\nClasses and Interfaces: \nInterface IntervalMatchesIterator; // An extension of MatchesIterator that allows it to be treated as an IntervalIterator\nClass FilteredIntervalsSource; // An IntervalsSource that filters the intervals from another IntervalsSource\nClass IntervalFilter; // Wraps an IntervalIterator and passes through those intervals that match the IntervalFilter.accept() function\nClass IntervalIterator; // A DocIdSetIterator that also allows iteration over matching intervals in a document.\nClass IntervalQuery; // A query that retrieves documents containing intervals returned from an IntervalsSource\nClass Intervals; // Factory functions for creating interval sources.\nClass IntervalsSource; // A helper class for IntervalQuery that provides an IntervalIterator for a given field and segment\n", "des": "Intervals queries"}
{"index": 2114, "repo": "spring-retry-2.0.2", "code": "Package: backoff\n\nClasses and Interfaces: \npublic interface BackOffContext extends Serializable;\npublic class BackOffInterruptedException extends RetryException; // Exception class signifiying that an attempt to back off using a BackOffPolicy was interrupted, most likely by an InterruptedException during a call to Thread.sleep(long).\npublic interface BackOffPolicy; // Strategy interface to control back off between attempts in a single retry operation.\npublic class BackOffPolicyBuilder extends Object; // Fluent API for creating a BackOffPolicy based on given attributes.\npublic class ExponentialBackOffPolicy extends Object implements SleepingBackOffPolicy<ExponentialBackOffPolicy>; // Implementation of BackOffPolicy that increases the back off period for each retry attempt in a given set up to a limit.\npublic class ExponentialRandomBackOffPolicy extends ExponentialBackOffPolicy; // Implementation of ExponentialBackOffPolicy that chooses a random multiple of the interval that would come from a simple deterministic exponential.\npublic class FixedBackOffPolicy extends StatelessBackOffPolicy implements SleepingBackOffPolicy<FixedBackOffPolicy>; // Implementation of BackOffPolicy that pauses for a fixed period of time before continuing.\npublic class NoBackOffPolicy extends StatelessBackOffPolicy; // Implementation of BackOffPolicy that performs a no-op and as such all retry operation in a given set proceed one after the other with no pause.\n@Deprecated public class ObjectWaitSleeper extends Object implements Sleeper;\npublic interface Sleeper extends Serializable; // Strategy interface for backoff policies to delegate the pausing of execution.\npublic interface SleepingBackOffPolicy<T extends SleepingBackOffPolicy<T>> extends BackOffPolicy; // A interface which can be mixed in by BackOffPolicys indicating that they sleep when backing off.\npublic abstract class StatelessBackOffPolicy extends Object implements BackOffPolicy; // Simple base class for BackOffPolicy implementations that maintain no state across invocations.\npublic class ThreadWaitSleeper extends Object implements Sleeper; // Simple Sleeper implementation that just blocks the current Thread with sleep period.\npublic class UniformRandomBackOffPolicy extends StatelessBackOffPolicy implements SleepingBackOffPolicy<UniformRandomBackOffPolicy>; // Implementation of BackOffPolicy that pauses for a random period of time before continuing.\n", "des": "Infrastructure implementations of retry backoff concerns."}
{"index": 334, "repo": "kafka-clients-3.5.0", "code": "Package: delegation\n\nClasses and Interfaces: \nClass DelegationToken; // A class representing a delegation token.\nClass TokenInformation; // A class representing a delegation token details.\n", "des": "Provides mechanism for delegating authorization to a distinct Principal for securing Kafka clusters."}
{"index": 1805, "repo": "spring-aop-6.0.11", "code": "Package: adapter\n\nClasses and Interfaces: \npublic interface AdvisorAdapter; // Interface allowing extension to the Spring AOP framework to allow handling of new Advisors and Advice types.\npublic class AdvisorAdapterRegistrationManager extends Object implements org.springframework.beans.factory.config.BeanPostProcessor; // BeanPostProcessor that registers AdvisorAdapter beans in the BeanFactory with an AdvisorAdapterRegistry (by default the GlobalAdvisorAdapterRegistry).\npublic interface AdvisorAdapterRegistry; // Interface for registries of Advisor adapters.\npublic class AfterReturningAdviceInterceptor extends Object implements MethodInterceptor, AfterAdvice, Serializable; // Interceptor to wrap an AfterReturningAdvice.\npublic class DefaultAdvisorAdapterRegistry extends Object implements AdvisorAdapterRegistry, Serializable; // Default implementation of the AdvisorAdapterRegistry interface.\npublic final class GlobalAdvisorAdapterRegistry extends Object; // Singleton to publish a shared DefaultAdvisorAdapterRegistry instance.\npublic class MethodBeforeAdviceInterceptor extends Object implements MethodInterceptor, BeforeAdvice, Serializable; // Interceptor to wrap a MethodBeforeAdvice.\npublic class ThrowsAdviceInterceptor extends Object implements MethodInterceptor, AfterAdvice; // Interceptor to wrap an after-throwing advice.\npublic class UnknownAdviceTypeException extends IllegalArgumentException; // Exception thrown when an attempt is made to use an unsupported Advisor or Advice type.\n", "des": "SPI package allowing Spring AOP framework to handle arbitrary advice types."}
{"index": 3751, "repo": "lucene-queryparser-9.7.0", "code": "Package: builders\n\nClasses and Interfaces: \nInterface SpanQueryBuilder; // Interface for retrieving a SpanQuery.\nClass BooleanQueryBuilder; // Builder for BooleanQuery\nClass BoostingTermBuilder; // Builder for PayloadScoreQuery\nClass ConstantScoreQueryBuilder; // Builder for ConstantScoreQuery\nClass DisjunctionMaxQueryBuilder; // Builder for DisjunctionMaxQuery\nClass FuzzyLikeThisQueryBuilder; // Builder for FuzzyLikeThisQuery\nClass LikeThisQueryBuilder; // Builder for MoreLikeThisQuery\nClass MatchAllDocsQueryBuilder; // Builder for MatchAllDocsQuery\nClass PointRangeQueryBuilder; // Creates a range query across 1D PointValues.\nClass RangeQueryBuilder; // Builder for TermRangeQuery\nClass SpanBuilderBase; // Base class for building SpanQuerys\nClass SpanFirstBuilder; // Builder for SpanFirstQuery\nClass SpanNearBuilder; // Builder for SpanNearQuery\nClass SpanNotBuilder; // Builder for SpanNotQuery\nClass SpanOrBuilder; // Builder for SpanOrQuery\nClass SpanOrTermsBuilder; // Builder that analyzes the text into a SpanOrQuery\nClass SpanPositionRangeBuilder; // Builder for SpanPositionRangeQuery\nClass SpanQueryBuilderFactory; // Factory for SpanQueryBuilders\nClass SpanTermBuilder; // Builder for SpanTermQuery\nClass TermQueryBuilder; // Builder for TermQuery\nClass TermsQueryBuilder; // Builds a BooleanQuery from all of the terms found in the XML element using the choice of analyzer\nClass UserInputQueryBuilder; // UserInputQueryBuilder uses 1 of 2 strategies for thread-safe parsing: 1) Synchronizing access to \"parse\" calls on a previously supplied QueryParser or..\n", "des": "XML Parser factories for different Lucene Query/Filters."}
{"index": 190, "repo": "ignite-core-2.15.0", "code": "Package: test\n\nClasses and Interfaces: \nClass GridTestPrintStream; // Print stream that prints each thread group into a separate buffer.\nClass GridTestPrintStreamFactory; // Factory that allow to acquire/release Print Stream for test logging.\n", "des": "Contains common utility classes for JUnit integration."}
{"index": 1079, "repo": "graal-sdk-1.0.0-rc7", "code": "Package: c\n\nSub Packages: \npackage c.constant; // This package provides parts of the Java / C interface that are related to C constants.\npackage c.function; // This package provides parts of the Java / C interface that are related to C functions.\npackage c.struct; // This package provides parts of the Java / C interface that are related to C structures.\npackage c.type; // This package provides parts of the Java / C interface that are related to standard C pointer types, as well as utility functions to convert between Java types and C types.\n\nClasses and Interfaces: \nInterface CContext.Directives; // Describes a C context.\nAnnotation Type CContext; // Defines the context for most other annotations of the C interface: the C header files that need to be imported, the C macros that need to be defined to properly configure these headers, and additional flags that should be passed to the C compiler when analyzing the definitions.\n", "des": "This package and its sub-packages provide a fast and lightweight interface between Java code and C code."}
{"index": 2526, "repo": "spring-security-core-6.1.2", "code": "Package: dao\n\nClasses and Interfaces: \npublic abstract class AbstractUserDetailsAuthenticationProvider extends Object implements AuthenticationProvider, org.springframework.beans.factory.InitializingBean, org.springframework.context.MessageSourceAware; // A base AuthenticationProvider that allows subclasses to override and work with UserDetails objects.\npublic class DaoAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider; // An AuthenticationProvider implementation that retrieves user details from a UserDetailsService.\n", "des": "An AuthenticationProvider which relies upon a data access object."}
{"index": 2378, "repo": "pulsar-client-api-3.0.0", "code": "Package: schema\n\nClasses and Interfaces: \n@Public @Stable public class KeyValue<K,V> extends Object; // A simple KeyValue class.\n@FunctionalInterface public static interface KeyValue.KeyValueDecoder<K,V>; // Decoder to decode key/value bytes.\n@Public @Stable public enum KeyValueEncodingType extends Enum<KeyValueEncodingType>; // Encoding types of supported KeyValueSchema for Pulsar messages.\n@Public @Stable public interface SchemaInfo; // Information about the schema.\npublic static class SchemaInfo.SchemaInfoBuilder extends Object;\n@Public @Stable public class SchemaInfoWithVersion extends Object; // Data structure representing a schema information including its version.\n@Public @Stable public enum SchemaType extends Enum<SchemaType>; // Types of supported schema for Pulsar messages.\n", "des": "This package contains data structures for schema definitions used in the Pulsar Client API."}
{"index": 1341, "repo": "groovy-all-4.0.13", "code": "Package: syntax\n\nClasses and Interfaces: \npublic class ASTHelper extends Object; // A common base class of AST helper methods which can be shared across the classic and new parsers\npublic abstract class CSTNode extends Object; // An abstract base class for nodes in the concrete syntax tree that is the result of parsing.\npublic class Numbers extends Object; // Helper class for processing Groovy numeric literals.\npublic class ParserException extends TokenException;\npublic class ReadException extends GroovyException; // Encapsulates non-specific i/o exceptions.\npublic class Reduction extends CSTNode; // A syntax reduction, produced by the Parser.\npublic class RuntimeParserException extends GroovyRuntimeException; // A helper class to allow parser exceptions to be thrown anywhere in the code.\npublic class SyntaxException extends GroovyException; // Base exception indicating a syntax error.\npublic class Token extends CSTNode; // A CSTNode produced by the Lexer.\npublic class TokenException extends SyntaxException;\npublic class TokenMismatchException extends TokenException;\npublic class TokenUtil extends Object; // Utility methods for working with Tokens.\npublic class Types extends Object; // Typing information for the CST system.\n", "des": "Lexer, parser and trees."}
{"index": 2713, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: builder\n\nClasses and Interfaces: \npublic class MongoItemReaderBuilder<T> extends Object; // A builder implementation for the MongoItemReader\npublic class MongoItemWriterBuilder<T> extends Object; // A builder implementation for the MongoItemWriter\n@Deprecated public class Neo4jItemReaderBuilder<T> extends Object;\n@Deprecated public class Neo4jItemWriterBuilder<T> extends Object;\npublic class RepositoryItemReaderBuilder<T> extends Object; // A builder implementation for the RepositoryItemReader.\npublic class RepositoryItemWriterBuilder<T> extends Object; // A builder implementation for the RepositoryItemWriter.\npublic static class RepositoryItemWriterBuilder.RepositoryMethodReference<T> extends Object; // Establishes a proxy that will capture a the Repository and the associated methodName that will be used by the writer.\n", "des": "Builders for Spring Data item readers and writers."}
{"index": 3611, "repo": "lucene-suggest-9.7.0", "code": "Package: analyzing\n\nClasses and Interfaces: \nClass AnalyzingInfixSuggester; // Analyzes the input text and then suggests matches based on prefix matches to any tokens in the indexed text.\nClass AnalyzingSuggester; // Suggester that first analyzes the surface form, adds the analyzed form to a weighted FST, and then does the same thing at lookup time.\nClass BlendedInfixSuggester; // Extension of the AnalyzingInfixSuggester which transforms the weight after search to take into account the position of the searched term into the indexed text.\nClass FreeTextSuggester; // Builds an ngram model from the text sent to FreeTextSuggester.build(org.apache.lucene.search.suggest.InputIterator) and predicts based on the last grams-1 tokens in the request sent to FreeTextSuggester.lookup(java.lang.CharSequence, boolean, int).\nClass FSTUtil; // Exposes a utility method to enumerate all paths intersecting an Automaton with an FST.\nClass FSTUtil.Path<T>; // Holds a pair (automaton, fst) of states and accumulated output in the intersected machine.\nClass FuzzySuggester; // Implements a fuzzy AnalyzingSuggester.\nClass SuggestStopFilter; // Like StopFilter except it will not remove the last token if that token was not followed by some token separator.\nClass SuggestStopFilterFactory; // Factory for SuggestStopFilter.\nEnum BlendedInfixSuggester.BlenderType; // The different types of blender.\n", "des": "Analyzer based autosuggest."}
{"index": 164, "repo": "ignite-core-2.15.0", "code": "Package: rest\n\nSub Packages: \npackage rest.handlers; // REST commands handlers.\npackage rest.protocols; // REST protocol handlers.\npackage rest.request; // REST requests.\n\nClasses and Interfaces: \nInterface GridRestProtocol; // REST protocol.\nInterface GridRestProtocolHandler; // Command protocol handler.\nInterface IgniteRestProcessor; // REST processor marker interface.\nClass GridRestProcessor; // Rest processor implementation.\nClass GridRestResponse; // JSON response.\nEnum GridRestCommand; // Supported commands.\n", "des": "REST processor."}
{"index": 2083, "repo": "spring-webmvc-6.0.11", "code": "Package: feed\n\nClasses and Interfaces: \npublic abstract class AbstractAtomFeedView extends AbstractFeedView<com.rometools.rome.feed.atom.Feed>; // Abstract superclass for Atom Feed views, using the ROME package.\npublic abstract class AbstractFeedView<T extends com.rometools.rome.feed.WireFeed> extends AbstractView; // Abstract base class for Atom and RSS Feed views, using the ROME package.\npublic abstract class AbstractRssFeedView extends AbstractFeedView<com.rometools.rome.feed.rss.Channel>; // Abstract superclass for RSS Feed views, using the ROME package.\n", "des": "Support classes for feed generation, providing View implementations for Atom and RSS."}
{"index": 950, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: server\n\nSub Packages: \npackage server.endpoint; // Provides standard endpoint, and EndpointAdapter implementations.\n\nClasses and Interfaces: \nInterface EndpointAdapter; // Interface that must be implemented for each endpoint type to handle a message request.\nInterface EndpointExceptionResolver; // Defines the interface for objects than can resolve exceptions thrown during endpoint execution.\nInterface EndpointInterceptor; // Workflow interface that allows for customized endpoint invocation chains.\nInterface EndpointMapping; // Defines a mapping between message requests and endpoint objects.\nInterface SmartEndpointInterceptor; // Extension of the EndpointInterceptor interface that adds a way to decide whether the interceptor should intercept a given message context.\nClass EndpointInvocationChain; // Endpoint invocation chain, consisting of an endpoint object and any preprocessing interceptors.\nClass MessageDispatcher; // Central dispatcher for use within Spring-WS, dispatching Web service messages to registered endpoints.\n", "des": "Contains classes for server-side Spring-WS support."}
{"index": 3442, "repo": "hibernate-core-5.6.15.Final", "code": "Package: unique\n\nClasses and Interfaces: \nInterface UniqueDelegate; // Dialect-level delegate in charge of applying \"uniqueness\" to a column.\nClass DB2UniqueDelegate; // DB2 does not allow unique constraints on nullable columns.\nClass DefaultUniqueDelegate; // The default UniqueDelegate implementation for most dialects.\nClass InformixUniqueDelegate; // Informix requires the constraint name to come last on the alter table.\nClass MySQLUniqueDelegate;\n", "des": "Support for Dialect-specific unique constraint definition"}
{"index": 3824, "repo": "lucene-analysis-common-9.7.0", "code": "Package: wikipedia\n\nClasses and Interfaces: \nClass WikipediaTokenizer; // Extension of StandardTokenizer that is aware of Wikipedia syntax.\nClass WikipediaTokenizerFactory; // Factory for WikipediaTokenizer.\n", "des": "Tokenizer that is aware of Wikipedia syntax."}
{"index": 545, "repo": "spring-mobile-device-1.1.5.RELEASE", "code": "Package: switcher\n\nClasses and Interfaces: \nInterface SiteSwitcherHandler;\nInterface SiteUrlFactory; // Strategy for constructing different site URLs, such as the 'mobile' site URL.\nClass AbstractSitePathUrlFactory; // Abstract SiteUrlFactory implementation that differentiates each site by the HTTP request path.\nClass AbstractSiteUrlFactory; // Abstract implementation of the SiteUrlFactory interface.\nClass MobileSitePathUrlFactory; // Path based site URL factory implementation that handles requests for the \"mobile\" site.\nClass NormalSitePathUrlFactory; // Path based site URL factory implementation that handles requests for the \"normal\" site.\nClass SiteSwitcherHandlerInterceptor; // A Spring MVC interceptor that switches the user between the mobile, normal, and tablet sites by employing a specific switching algorithm.\nClass SiteSwitcherRequestFilter; // A Servlet 2.3 Filter that switches the user between the mobile and normal site by employing a specific switching algorithm.\nClass StandardSiteSwitcherHandler;\nClass StandardSiteUrlFactory; // Site URL factory implementation that differentiates each site by the value of the server name field.\nClass TabletSitePathUrlFactory; // Path based site URL factory implementation that handles requests for the \"tablet\" site.\n", "des": "Mobile site switcher for Spring MVC-based web apps."}
{"index": 1490, "repo": "tribuo-core-4.3.1", "code": "Package: transformations\n\nClasses and Interfaces: \npublic final class BinningTransformation extends Object implements Transformation; // A Transformation which bins values.\npublic static final class BinningTransformation.BinningTransformationProvenance extends Object implements TransformationProvenance; // Provenance for BinningTransformation.\npublic static final class BinningTransformation.BinningTransformer extends Object implements Transformer; // The implementation of a Transformer which splits the input into n bins.\npublic static enum BinningTransformation.BinningType extends Enum<BinningTransformation.BinningType>; // The allowed binning types.\npublic class IDFTransformation extends Object implements Transformation; // A feature transformation that computes the IDF for features and then transforms them with a TF-IDF weighting.\npublic static final class IDFTransformation.IDFTransformationProvenance extends Object implements TransformationProvenance; // Provenance for IDFTransformation.\npublic final class LinearScalingTransformation extends Object implements Transformation; // A Transformation which takes an observed distribution and rescales it so all values are between the desired min and max.\npublic static final class LinearScalingTransformation.LinearScalingTransformationProvenance extends Object implements TransformationProvenance; // Provenance for LinearScalingTransformation.\npublic final class MeanStdDevTransformation extends Object implements Transformation; // A Transformation which takes an observed distribution and rescales it so it has the desired mean and standard deviation.\npublic static final class MeanStdDevTransformation.MeanStdDevTransformationProvenance extends Object implements TransformationProvenance; // Provenance for MeanStdDevTransformation.\npublic final class SimpleTransform extends Object implements Transformer, Transformation, TransformStatistics; // This is used for stateless functions such as exp, log, addition or multiplication by a constant.\npublic static enum SimpleTransform.Operation extends Enum<SimpleTransform.Operation>; // Operations understood by this Transformation.\npublic static final class SimpleTransform.SimpleTransformProvenance extends Object implements TransformationProvenance; // Provenance for SimpleTransform.\n", "des": "Provides implementations of standard transformations like binning, scaling, taking logs and exponents."}
{"index": 2535, "repo": "spring-security-core-6.1.2", "code": "Package: session\n\nClasses and Interfaces: \npublic class AbstractSessionEvent extends org.springframework.context.ApplicationEvent; // Abstract superclass for all session related events.\npublic abstract class SessionCreationEvent extends AbstractSessionEvent; // Generic session creation event which indicates that a session (potentially represented by a security context) has begun.\npublic abstract class SessionDestroyedEvent extends AbstractSessionEvent; // Generic \"session termination\" event which indicates that a session (potentially represented by a security context) has ended.\npublic abstract class SessionIdChangedEvent extends AbstractSessionEvent; // Generic \"session ID changed\" event which indicates that a session identifier (potentially represented by a security context) has changed.\npublic class SessionInformation extends Object implements Serializable; // Represents a record of a session within the Spring Security framework.\npublic interface SessionRegistry; // Maintains a registry of SessionInformation instances.\npublic class SessionRegistryImpl extends Object implements SessionRegistry, org.springframework.context.ApplicationListener<AbstractSessionEvent>; // Default implementation of SessionRegistry which listens for SessionDestroyedEvents published in the Spring application context.\n", "des": "Session abstraction which is provided by the org.springframework.security.core.session.SessionInformation SessionInformation class."}
{"index": 2910, "repo": "spring-xml-4.0.5", "code": "Package: namespace\n\nClasses and Interfaces: \npublic class QNameEditor extends PropertyEditorSupport; // PropertyEditor for javax.xml.namespace.QName, to populate a property of type QName from a String value.\npublic abstract class QNameUtils extends Object; // Helper class for using QName.\npublic class SimpleNamespaceContext extends Object implements NamespaceContext; // Simple javax.xml.namespace.NamespaceContext implementation.\n", "des": "Provides classes that help with XML Namespace processing."}
{"index": 3893, "repo": "solr-solrj-9.3.0", "code": "Package: schema\n\nClasses and Interfaces: \nClass FieldTypeRepresentation;\nClass SchemaRepresentation;\nClass SchemaResponse; // This class is used to wrap the response messages retrieved from Solr Schema API.\nClass SchemaResponse.CopyFieldsResponse;\nClass SchemaResponse.DynamicFieldResponse;\nClass SchemaResponse.DynamicFieldsResponse;\nClass SchemaResponse.FieldResponse;\nClass SchemaResponse.FieldsResponse;\nClass SchemaResponse.FieldTypeResponse;\nClass SchemaResponse.FieldTypesResponse;\nClass SchemaResponse.GlobalSimilarityResponse;\nClass SchemaResponse.SchemaNameResponse;\nClass SchemaResponse.SchemaVersionResponse;\nClass SchemaResponse.UniqueKeyResponse;\nClass SchemaResponse.UpdateResponse;\n", "des": "Convenience classes for dealing with Schema API responses."}
{"index": 1894, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: support\n\nClasses and Interfaces: \npublic class DefaultSubjectContext extends MapContext implements SubjectContext; // Default implementation of the SubjectContext interface.\npublic class DelegatingSubject extends Object implements Subject; // Implementation of the Subject interface that delegates method calls to an underlying SecurityManager instance for security checks.\npublic class DisabledSessionException extends SessionException; // Exception thrown if attempting to create a new Subject session, but that Subject's sessions are disabled.\npublic class SubjectCallable<V> extends Object implements Callable<V>; // A SubjectCallable associates a Subject with a target/delegate Callable to ensure proper Subject thread-state management when the Callable executes.\npublic class SubjectRunnable extends Object implements Runnable; // A SubjectRunnable ensures that a target/delegate Runnable will execute such that any call to SecurityUtils.getSubject() during the Runnable's execution will return the associated Subject instance.\npublic class SubjectThreadState extends Object implements ThreadState; // Manages thread-state for Subject access (supporting SecurityUtils.getSubject() calls) during a thread's execution.\n", "des": "Concrete support implementations of most of the org.apache.shiro.subject interfaces."}
{"index": 2180, "repo": "spring-security-web-6.1.2", "code": "Package: j2ee\n\nClasses and Interfaces: \npublic class J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource extends Object implements org.springframework.security.authentication.AuthenticationDetailsSource<jakarta.servlet.http.HttpServletRequest,PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails>, org.springframework.beans.factory.InitializingBean; // Implementation of AuthenticationDetailsSource which converts the user's J2EE roles (as obtained by calling HttpServletRequest.isUserInRole(String)) into GrantedAuthoritys and stores these in the authentication details object.\npublic class J2eePreAuthenticatedProcessingFilter extends AbstractPreAuthenticatedProcessingFilter; // This AbstractPreAuthenticatedProcessingFilter implementation is based on the J2EE container-based authentication mechanism.\npublic class WebXmlMappableAttributesRetriever extends Object implements org.springframework.context.ResourceLoaderAware, org.springframework.security.core.authority.mapping.MappableAttributesRetriever, org.springframework.beans.factory.InitializingBean; // This MappableAttributesRetriever implementation reads the list of defined J2EE roles from a web.xml file and returns these from { WebXmlMappableAttributesRetriever.getMappableAttributes().\n", "des": "Pre-authentication support for container-authenticated requests."}
{"index": 952, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: adapter\n\nSub Packages: \npackage adapter.method; // Provides the MethodArgumentResolver and MethodReturnValueHandler abstractions, and various implementations thereof.\n\nClasses and Interfaces: \nClass AbstractMethodEndpointAdapter; // Abstract base class for EndpointAdapter implementations that support MethodEndpoints.\nClass DefaultMethodEndpointAdapter; // Default extension of AbstractMethodEndpointAdapter with support for pluggable argument resolvers and return value handlers.\nClass GenericMarshallingMethodEndpointAdapter; // as of Spring Web Services 2.0, in favor of DefaultMethodEndpointAdapter and MarshallingPayloadMethodProcessor.\nClass MarshallingMethodEndpointAdapter; // as of Spring Web Services 2.0, in favor of DefaultMethodEndpointAdapter and MarshallingPayloadMethodProcessor.\nClass MessageEndpointAdapter; // Adapter to use a MessageEndpoint as the endpoint for a EndpointInvocationChain.\nClass MessageMethodEndpointAdapter; // as of Spring Web Services 2.0, in favor of DefaultMethodEndpointAdapter and MessageContextMethodArgumentResolver.\nClass PayloadEndpointAdapter; // Adapter to use a PayloadEndpoint as the endpoint for a EndpointInvocationChain.\nClass PayloadMethodEndpointAdapter; // as of Spring Web Services 2.0, in favor of DefaultMethodEndpointAdapter and SourcePayloadMethodProcessor.\nClass XPathParamAnnotationMethodEndpointAdapter; // as of Spring Web Services 2.0, in favor of DefaultMethodEndpointAdapter and XPathParamMethodArgumentResolver.\n", "des": "Provides miscellaneous EndpointAdapter implementations."}
{"index": 2403, "repo": "spring-batch-core-5.0.2", "code": "Package: context\n\nClasses and Interfaces: \npublic class ChunkContext extends org.springframework.core.AttributeAccessorSupport; // Context object for weakly typed data stored for the duration of a chunk (usually a group of items processed together in a transaction).\npublic class JobContext extends SynchronizedAttributeAccessor; // A context object that can be used to interrogate the current JobExecution and some of its associated properties using expressions based on bean paths.\npublic class JobScopeManager extends Object; // Convenient aspect to wrap a single threaded job execution, where the implementation of the Job is not job scope aware (i.e.\npublic class JobSynchronizationManager extends Object; // Central convenience class for framework use in managing the job scope context.\npublic class StepContext extends SynchronizedAttributeAccessor; // A context object that can be used to interrogate the current StepExecution and some of its associated properties using expressions based on bean paths.\npublic abstract class StepContextRepeatCallback extends Object implements RepeatCallback; // Convenient base class for clients who need to do something in a repeat callback inside a Step.\npublic class StepScopeManager extends Object; // Convenient aspect to wrap a single threaded step execution, where the implementation of the Step is not step scope aware (i.e.\npublic class StepSynchronizationManager extends Object; // Central convenience class for framework use in managing the step scope context.\npublic abstract class SynchronizationManagerSupport<E,C> extends Object; // Central convenience class for framework use in managing the scope context.\n", "des": "Implementation of the contexts for each of the custom bean scopes in Spring Batch (Job and Step)."}
{"index": 1473, "repo": "spring-boot-configuration-processor-3.1.1", "code": "Package: metadata\n\nClasses and Interfaces: \npublic class ConfigurationMetadata extends Object; // Configuration meta-data.\npublic class InvalidConfigurationMetadataException extends RuntimeException; // Thrown to indicate that some meta-data is invalid.\npublic class ItemDeprecation extends Object; // Describe an item deprecation.\npublic class ItemHint extends Object implements Comparable<ItemHint>; // Provide hints on an ItemMetadata.\npublic static class ItemHint.ValueHint extends Object; // A hint for a value.\npublic static class ItemHint.ValueProvider extends Object; // A value provider.\npublic final class ItemMetadata extends Object implements Comparable<ItemMetadata>; // A group or property meta-data item from some ConfigurationMetadata.\npublic static enum ItemMetadata.ItemType extends Enum<ItemMetadata.ItemType>; // The item type.\npublic class JsonMarshaller extends Object; // Marshaller to write ConfigurationMetadata as JSON.\n", "des": "The configuration properties meta-data model and JSON writing support."}
{"index": 3076, "repo": "spring-ws-core-4.0.5", "code": "Package: messageid\n\nClasses and Interfaces: \npublic interface MessageIdStrategy; // Strategy interface that encapsulates the creation and validation of WS-Addressing MessageIDs.\npublic class UuidMessageIdStrategy extends Object implements MessageIdStrategy; // Implementation of the MessageIdStrategy interface that uses a UUID to generate a Message Id.\n", "des": "Contains various strategies for generating WS-Addressing MessageIDs."}
{"index": 1974, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: servlet\n\nClasses and Interfaces: \n@AutoConfiguration(before={OAuth2ResourceServerAutoConfiguration.class,SecurityAutoConfiguration.class,UserDetailsServiceAutoConfiguration.class}) @ConditionalOnClass(org.springframework.security.oauth2.server.authorization.OAuth2Authorization.class) @ConditionalOnWebApplication(type=SERVLET) @Import({org.springframework.boot.autoconfigure.security.oauth2.server.servlet.OAuth2AuthorizationServerConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.server.servlet.OAuth2AuthorizationServerWebSecurityConfiguration.class}) public class OAuth2AuthorizationServerAutoConfiguration extends Object; // Auto-configuration for OAuth2 authorization server support.\n@AutoConfiguration(after=UserDetailsServiceAutoConfiguration.class) @ConditionalOnClass(org.springframework.security.oauth2.server.authorization.OAuth2Authorization.class) @ConditionalOnWebApplication(type=SERVLET) public class OAuth2AuthorizationServerJwtAutoConfiguration extends Object; // Auto-configuration for JWT support for endpoints of the OAuth2 authorization server that require it (e.g.\n@ConfigurationProperties(prefix=\"spring.security.oauth2.authorizationserver\") public class OAuth2AuthorizationServerProperties extends Object implements org.springframework.beans.factory.InitializingBean; // OAuth 2.0 Authorization Server properties.\npublic static class OAuth2AuthorizationServerProperties.Client extends Object; // A registered client of the Authorization Server.\npublic static class OAuth2AuthorizationServerProperties.Endpoint extends Object; // Authorization Server endpoints.\npublic static class OAuth2AuthorizationServerProperties.OidcEndpoint extends Object; // OpenID Connect 1.0 endpoints.\npublic static class OAuth2AuthorizationServerProperties.Registration extends Object; // Client registration information.\npublic static class OAuth2AuthorizationServerProperties.Token extends Object; // Token settings of the registered client.\n", "des": "Auto-configuration for Spring Security's OAuth2 authorization server."}
{"index": 982, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: server\n\nSub Packages: \npackage server.endpoint; // Provides EndpointAdapter, EndpointMapping, and EndpointExceptionResolver implementations for SOAP.\n\nClasses and Interfaces: \nInterface SmartSoapEndpointInterceptor; // SOAP-specific extension of the SmartEndpointInterceptor interface.\nInterface SoapEndpointInterceptor; // SOAP-specific extension of the EndpointInterceptor interface.\nInterface SoapEndpointMapping; // SOAP-specific sub-interface of the EndpointMapping.\nClass SoapEndpointInvocationChain; // SOAP-specific subclass of the EndpointInvocationChain.\nClass SoapMessageDispatcher; // SOAP-specific subclass of the MessageDispatcher.\n", "des": "Contains classes for SOAP-specific server-side Spring-WS support."}
{"index": 1365, "repo": "spring-tx-6.0.11", "code": "Package: reactive\n\nClasses and Interfaces: \npublic abstract class AbstractReactiveTransactionManager extends Object implements ReactiveTransactionManager, Serializable; // Abstract base class that implements Spring's standard reactive transaction workflow, serving as basis for concrete platform transaction managers.\nprotected static final class AbstractReactiveTransactionManager.SuspendedResourcesHolder extends Object; // Holder for suspended resources.\npublic class GenericReactiveTransaction extends Object implements ReactiveTransaction; // Default implementation of the ReactiveTransaction interface, used by AbstractReactiveTransactionManager.\npublic abstract class ReactiveResourceSynchronization<O,K> extends Object implements TransactionSynchronization; // TransactionSynchronization implementation that manages a resource object bound through TransactionSynchronizationManager.\npublic interface TransactionalOperator; // Operator class that simplifies programmatic transaction demarcation and transaction exception handling.\n@FunctionalInterface public interface TransactionCallback<T>; // Callback interface for reactive transactional code.\npublic class TransactionContext extends Object; // Mutable transaction context that encapsulates transactional synchronizations and resources in the scope of a single transaction.\npublic abstract class TransactionContextManager extends Object; // Delegate to register and obtain transactional contexts.\npublic interface TransactionSynchronization; // Interface for reactive transaction synchronization callbacks.\npublic class TransactionSynchronizationManager extends Object; // Central delegate that manages resources and transaction synchronizations per subscriber context.\n", "des": "Support classes for reactive transaction management."}
{"index": 3295, "repo": "opencms-core-15.0", "code": "Package: mail\n\nClasses and Interfaces: \nClass CmsHtmlMail; // This class is used to send an HTML formatted email with optional attachments.\nClass CmsInputStreamDataSource; // DataSource implementation that may be filled with content from an InputStream.\nClass CmsMailHost; // Contains the configuration of an individual mail host.\nClass CmsMailSettings; // Contains the settings for the OpenCms mail service.\nClass CmsMailTransport; // Sends an email using a Thread, so that the application can continue without waiting for the mail to be send.\nClass CmsMailUtil; // Contains utility methods for dealing with emails.\nClass CmsMultiPartMail; // This class is used to send multi-part internet email like messages with attachments.\nClass CmsSimpleMail; // This class is used to send simple text internet email messages without attachments.\nClass CmsVfsDataSource; // DataSource wrapper for VFS resources, allows easy sending of VFS resources as email attachments.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Provides utility classes to generate email messages using the OpenCms email configuration."}
{"index": 3204, "repo": "tomcat-api-10.1", "code": "Package: modeler\n\nSub Packages: \npackage modeler.modules; // Implementation classes - should not be used directly.\n\nClasses and Interfaces: \nInterface RegistryMBean; // Interface for modeler MBeans.\nClass AttributeInfo; // Internal configuration information for an Attribute descriptor.\nClass BaseAttributeFilter; // Implementation of NotificationFilter for attribute change notifications.\nClass BaseModelMBean; // Basic implementation of the DynamicMBean interface, which supports the minimal requirements of the interface contract.\nClass BaseNotificationBroadcaster; // Implementation of NotificationBroadcaster for attribute change notifications.\nClass FeatureInfo; // Convenience base class for AttributeInfo and OperationInfo classes that will be used to collect configuration information for the ModelMBean beans exposed for management.\nClass ManagedBean; // Internal configuration information for a managed bean (MBean) descriptor.\nClass NoDescriptorRegistry; // An implementation of the MBean registry that effectively disables MBean registration.\nClass NotificationInfo; // Internal configuration information for a Notification descriptor.\nClass OperationInfo; // Internal configuration information for an Operation descriptor.\nClass ParameterInfo; // Internal configuration information for a Parameter descriptor.\nClass Registry; // Registry for modeler MBeans.\nClass Util;\n", "des": "The Modeler component of the Commons project offers convenient support for configuring and instantiating Model MBeans (management beans), as described in the JMX Specification."}
{"index": 3079, "repo": "spring-ws-core-4.0.5", "code": "Package: client\n\nSub Packages: \npackage client.core; // Contains core classes for SOAP-specific client-side Spring-WS support.\n\nClasses and Interfaces: \npublic class SoapFaultClientException extends WebServiceFaultException; // Thrown by SoapFaultMessageResolver when the response message has a fault.\n", "des": "Contains classes for SOAP-specific client-side Spring-WS support."}
{"index": 1468, "repo": "spring-data-redis-3.1.2", "code": "Package: collections\n\nClasses and Interfaces: \npublic abstract class AbstractRedisCollection<E> extends AbstractCollection<E> implements RedisCollection<E>; // Base implementation for RedisCollection.\npublic abstract class CollectionUtils extends Object; // Utility class used mainly for type conversion by the default collection implementations.\npublic class DefaultRedisList<E> extends AbstractRedisCollection<E> implements RedisList<E>; // Default implementation for RedisList.\npublic class DefaultRedisMap<K,V> extends Object implements RedisMap<K,V>; // Default implementation for RedisMap.\npublic class DefaultRedisSet<E> extends AbstractRedisCollection<E> implements RedisSet<E>; // Default implementation for RedisSet.\npublic class DefaultRedisZSet<E> extends AbstractRedisCollection<E> implements RedisZSet<E>; // Default implementation for RedisZSet.\npublic interface RedisCollection<E> extends RedisStore; // Redis extension for the Collection contract.\npublic class RedisCollectionFactoryBean extends Object implements InitializingBean, BeanNameAware, FactoryBean<RedisStore>; // Factory bean that facilitates creation of Redis-based collections.\npublic static enum RedisCollectionFactoryBean.CollectionType extends Enum<RedisCollectionFactoryBean.CollectionType>; // Collection types supported by this factory.\npublic interface RedisList<E> extends RedisCollection<E>, List<E>, BlockingDeque<E>; // Redis extension for the List contract.\npublic interface RedisMap<K,V> extends RedisStore, ConcurrentMap<K,V>; // Map view of a Redis hash.\npublic class RedisProperties extends Properties implements RedisMap<Object,Object>; // Properties extension for a Redis back-store.\npublic interface RedisSet<E> extends RedisCollection<E>, Set<E>; // Redis extension for the Set contract.\npublic interface RedisStore extends BoundKeyOperations<String>; // Basic interface for Redis-based collections.\npublic interface RedisZSet<E> extends RedisCollection<E>, Set<E>; // Redis ZSet (or sorted set (by weight)).\n", "des": "Package providing implementations for most of the java.util collections on top of Redis."}
{"index": 652, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: utils\n\nClasses and Interfaces: \nInterface FederationStateStoreFacade.Func<T,TResult>; // Encapsulates a method that has one parameter and returns a value of the type specified by the TResult parameter.\nClass FederationRegistryClient; // Helper class that handles reads and writes to Yarn Registry to support UAM HA and second attempt.\nClass FederationStateStoreFacade; // The FederationStateStoreFacade is an utility wrapper that provides singleton access to the Federation state store.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 834, "repo": "calcite-core-1.34.0", "code": "Package: hep\n\nClasses and Interfaces: \nClass HepPlanner; // HepPlanner is a heuristic implementation of the RelOptPlanner interface.\nClass HepProgram; // HepProgram specifies the order in which rules should be attempted by HepPlanner.\nClass HepProgramBuilder; // HepProgramBuilder creates instances of HepProgram.\nClass HepRelVertex; // HepRelVertex wraps a real RelNode as a vertex in a DAG representing the entire query expression.\nClass HepRuleCall; // HepRuleCall implements RelOptRuleCall for a HepPlanner.\nEnum HepMatchOrder; // HepMatchOrder specifies the order of graph traversal when looking for rule matches.\n", "des": "Provides a heuristic planner implementation for the interfaces in org.apache.calcite.plan."}
{"index": 2379, "repo": "spring-batch-core-5.0.2", "code": "Package: core\n\nSub Packages: \npackage core.annotation; // Annotations for java based configuration of listeners.\npackage core.configuration; // Interfaces for registration and location of job configurations.\npackage core.converter; // Support classes for implementations of the batch APIs.\npackage core.explore; // Interfaces and related classes to support meta data browsing.\npackage core.job; // Specific implementations of job concerns.\npackage core.launch; // Interfaces and simple implementations of launch concerns.\npackage core.listener; // Generic implementations of core batch listener interfaces.\npackage core.observability; // This package contains APIs related to batch observability.\npackage core.partition; // Interfaces for partitioning components.\npackage core.repository; // Interfaces and generic implementations of repository concerns.\npackage core.scope; // Implementation of Spring Batch specific bean scopes (Job and Step).\npackage core.step; // Specific implementations of step concerns.\n\nClasses and Interfaces: \npublic enum BatchStatus extends Enum<BatchStatus>; // Enumeration representing the status of an execution.\npublic interface ChunkListener extends StepListener; // Listener interface for the lifecycle of a chunk.\npublic class DefaultJobKeyGenerator extends Object implements JobKeyGenerator<JobParameters>; // Default implementation of the JobKeyGenerator interface.\npublic class Entity extends Object implements Serializable; // Batch Domain Entity class.\npublic class ExitStatus extends Object implements Serializable, Comparable<ExitStatus>; // Value object used to carry information about the status of a job or step execution.\npublic interface ItemProcessListener<T,S> extends StepListener; // Listener interface for the processing of an item.\npublic interface ItemReadListener<T> extends StepListener; // Listener interface around the reading of an item.\npublic interface ItemWriteListener<S> extends StepListener; // Listener interface for the writing of items.\npublic interface Job; // Batch domain object representing a job.\npublic class JobExecution extends Entity; // Batch domain object representing the execution of a job.\npublic class JobExecutionException extends Exception; // Root of exception hierarchy for checked exceptions in job and step execution.\npublic interface JobExecutionListener; // Provide callbacks at specific points in the lifecycle of a Job.\npublic class JobInstance extends Entity; // Batch domain object representing a uniquely identifiable job run.\n", "des": "Core domain context for Spring Batch covering jobs, steps, configuration and execution abstractions."}
{"index": 1659, "repo": "jena-core-4.9.0", "code": "Package: builtins\n\nClasses and Interfaces: \npublic class AddOne extends BaseBuiltin; // Bind the second argument to 1+ the first argument.\npublic class AssertDisjointPairs extends BaseBuiltin; // Assert the n^2 differtFrom pairs from a distinctMembers list\npublic abstract class BaseBuiltin extends Object implements Builtin; // Dummy implementation of the Builtin interface that specific implementations can inherit from.\npublic class Bound extends BaseBuiltin; // Predicate used to check if a variable has been bound.\npublic class CountLiteralValues extends BaseBuiltin; // CountLiteralValues(X, P, C) sets C to be the number of semantically distinct values for P on resource X.\npublic class Difference extends BaseBuiltin; // Bind the third argument to the arithmetic difference between the first and second arguments.\npublic class Drop extends BaseBuiltin; // A variant of the \"remove\" builtin that will delete matched triples from the graph but will not trigger further rule processing for the removed triples.\npublic class Equal extends BaseBuiltin; // Check that the two args are semantically equal.\npublic class GE extends BaseBuiltin; // Tests if the first argument is greater than or equal to the second.\npublic class GreaterThan extends BaseBuiltin; // Tests if the first argument is greater than the second.\npublic class Hide extends BaseBuiltin; // Register a node as to be hidden from query result iterators.\npublic class IsBNode extends BaseBuiltin; // Tests the single argument to make sure it is blank node.\npublic class IsDType extends BaseBuiltin; // Tests whether the first argument is an instance of the datatype defined by the resource in the second argument.\npublic class IsFunctor extends BaseBuiltin; // Tests the single argument to make sure it is not a Functor.\npublic class IsLiteral extends BaseBuiltin; // Tests the single argument to make sure it is a literal.\npublic class LE extends BaseBuiltin; // Tests if the first argument is less than or equal to the second.\npublic class LessThan extends BaseBuiltin; // Tests if the first argument is less than the second.\npublic class ListContains extends BaseBuiltin; // Returns true if the first argument is a list which contains the second argument.\n", "des": "Implementations of the Builtin class which provides primitive operations to the rule engines."}
{"index": 2417, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: cloudfoundry\n\nSub Packages: \npackage cloudfoundry.reactive; // Auto-configuration for actuator Cloud Foundry concerns using WebFlux.\npackage cloudfoundry.servlet; // Auto-configuration for actuator Cloud Foundry concerns using Spring MVC.\n\nClasses and Interfaces: \npublic enum AccessLevel extends Enum<AccessLevel>; // The specific access level granted to the cloud foundry user that's calling the endpoints.\npublic class CloudFoundryAuthorizationException extends RuntimeException; // Authorization exceptions thrown to limit access to the endpoints.\npublic static enum CloudFoundryAuthorizationException.Reason extends Enum<CloudFoundryAuthorizationException.Reason>; // Reasons why the exception can be thrown.\n@ImportRuntimeHints(org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer.CloudFoundryWebEndpointDiscovererRuntimeHints.class) public class CloudFoundryWebEndpointDiscoverer extends org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointDiscoverer; // WebEndpointDiscoverer for Cloud Foundry that uses Cloud Foundry specific extensions for the HealthEndpoint.\n@Target(TYPE) @Retention(RUNTIME) @Documented @EndpointExtension(filter=org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryEndpointFilter.class) public @interface EndpointCloudFoundryExtension; // Identifies a type as being a Cloud Foundry specific extension for an @Endpoint.\npublic class SecurityResponse extends Object; // Response from the Cloud Foundry security interceptors.\npublic class Token extends Object; // The JSON web token provided with each request that originates from Cloud Foundry.\n", "des": "Auto-configuration for actuator Cloud Foundry concerns."}
{"index": 1961, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: netty\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnClass(io.netty.util.NettyRuntime.class) @EnableConfigurationProperties(NettyProperties.class) public class NettyAutoConfiguration extends Object; // Auto-configuration for Netty.\n@ConfigurationProperties(prefix=\"spring.netty\") public class NettyProperties extends Object; // @ConfigurationProperties for the Netty engine.\npublic static enum NettyProperties.LeakDetection extends Enum<NettyProperties.LeakDetection>;\n", "des": "Auto-configuration for the Netty library."}
{"index": 2237, "repo": "spring-security-acl-6.1.2", "code": "Package: afterinvocation\n\nClasses and Interfaces: \npublic abstract class AbstractAclProvider extends Object implements org.springframework.security.access.AfterInvocationProvider; // Abstract AfterInvocationProvider which provides commonly-used ACL-related services.\npublic class AclEntryAfterInvocationCollectionFilteringProvider extends AbstractAclProvider; // Given a Collection of domain object instances returned from a secure object invocation, remove any Collection elements the principal does not have appropriate permission to access as defined by the AclService.\npublic class AclEntryAfterInvocationProvider extends AbstractAclProvider implements org.springframework.context.MessageSourceAware; // Given a domain object instance returned from a secure object invocation, ensures the principal has appropriate permission as defined by the AclService.\n", "des": "After-invocation providers for collection and array filtering."}
{"index": 256, "repo": "nutch-2.4", "code": "Package: regex\n\nClasses and Interfaces: \nClass RegexURLNormalizer; // Allows users to do regex substitutions on all/any URLs that are encountered, which is useful for stripping session IDs from URLs.\n", "des": "URL normalizer with configurable rules based on regular expressions (Pattern)."}
{"index": 132, "repo": "ignite-core-2.15.0", "code": "Package: builder\n\nClasses and Interfaces: \nInterface BinaryLazyValue;\nClass BinaryBuilderEnum;\nClass BinaryBuilderReader;\nClass BinaryModifiableLazyValue;\nClass BinaryObjectBuilderImpl;\nClass BinaryPlainBinaryObject;\n", "des": "Contains classes specific to binary builder API."}
{"index": 2170, "repo": "wicket-core-10.0.0-M1", "code": "Package: validator\n\nClasses and Interfaces: \npublic abstract class AbstractRangeValidator<R extends Comparable<? super R> & Serializable,V extends Serializable> extends Behavior implements IValidator<V>; // Base class for validators that check if a given value falls within [min,max] range.\npublic static enum AbstractRangeValidator.Mode extends Enum<AbstractRangeValidator.Mode>; // Validator mode\npublic class CreditCardValidator extends Object implements IValidator<String>; // Checks if a credit card number is valid.\npublic static enum CreditCardValidator.CreditCard extends Enum<CreditCardValidator.CreditCard>;\npublic class DateValidator extends RangeValidator<Date>; // Validator for checking if a given date falls within [min,max] range.\npublic class EmailAddressValidator extends PatternValidator; // Validator for checking the form/pattern of email addresses.\npublic class PatternValidator extends Object implements IValidator<String>; // Validates an IValidatable by matching the value against a regular expression pattern.\npublic class RangeValidator<Z extends Comparable<? super Z> & Serializable> extends AbstractRangeValidator<Z,Z>; // Validator for checking if a given value falls within [min,max] range.\npublic class StringValidator extends AbstractRangeValidator<Integer,String>; // Validator for checking if length of a string falls within [min,max] range.\npublic class UrlValidator extends Object implements IValidator<String>; // Validator for checking URLs.\n", "des": "This package provides an implementation of Wicket's validation support."}
{"index": 2926, "repo": "groovy-4.0.13", "code": "Package: expr\n\nClasses and Interfaces: \npublic class AnnotationConstantExpression extends ConstantExpression; // Represents an annotation \"constant\" that may appear in annotation attributes (mainly used as a marker).\npublic class ArgumentListExpression extends TupleExpression; // Represents one or more arguments being passed into a method\npublic class ArrayExpression extends Expression; // Represents an array object construction.\npublic class AttributeExpression extends PropertyExpression; // Represents an attribute access (accessing the field of a class) such as the expression \"foo.@bar\".\npublic class BinaryExpression extends Expression; // Represents two expressions and an operation\npublic class BitwiseNegationExpression extends Expression;\npublic class BooleanExpression extends Expression; // Represents a boolean expression\npublic class CastExpression extends Expression; // Represents a typecast expression.\npublic class ClassExpression extends Expression; // Represents access to a Java/Groovy class in an expression, such as when invoking a static method or accessing a static type\npublic class ClosureExpression extends Expression; // Represents a closure expression such as\npublic class ClosureListExpression extends ListExpression; // This class represents a list of expressions used to create closures.\npublic class ConstantExpression extends Expression; // Represents a constant expression such as null, true, false.\npublic class ConstructorCallExpression extends Expression implements MethodCall; // A constructor call.\npublic class DeclarationExpression extends BinaryExpression; // Represents one or more local variables.\npublic class ElvisOperatorExpression extends TernaryExpression; // Represents a short ternary expression x ?: y, which is equal to\npublic class EmptyExpression extends Expression; // Placeholder for an empty expression.\npublic abstract class Expression extends AnnotatedNode; // Represents a base class for expressions which evaluate as an object\npublic interface ExpressionTransformer; // Provides a way to transform expressions\npublic class FieldExpression extends Expression; // Represents a field access such as the expression \"this.foo\".\npublic class GStringExpression extends Expression; // Represents a String expression which contains embedded values inside it such as \"hello there ${user} how are you\" which is expanded lazily\npublic class LambdaExpression extends ClosureExpression; // Represents a lambda expression such as one of these:\npublic class ListExpression extends Expression; // Represents a list expression [1, 2, 3] which creates a mutable List\n", "des": "AST nodes for Groovy expressions"}
{"index": 535, "repo": "commons-vfs2-2.9.0", "code": "Package: url\n\nClasses and Interfaces: \nClass UrlFileName; // A URL FileName.\nClass UrlFileNameParser; // Implementation for any java.net.url based file system.\nClass UrlFileObject; // A FileObject implementation backed by a URL.\nClass UrlFileProvider; // A file provider backed by Java's URL API.\nClass UrlFileSystem; // A File system backed by Java's URL API.\n", "des": "The Default File Provider, which wraps java.net.URL."}
{"index": 2918, "repo": "groovy-4.0.13", "code": "Package: io\n\nClasses and Interfaces: \npublic class EncodingAwareBufferedWriter extends BufferedWriter; // A buffered writer only for OutputStreamWriter that is aware of the encoding of the OutputStreamWriter.\npublic enum FileType extends Enum<FileType>; // Represents particular files of interest.\npublic enum FileVisitResult extends Enum<FileVisitResult>; // Represents special return values for the 'preDir', 'postDir' and 'visit'/supplied Closures used with ResourceGroovyMethods.traverse(java.io.File, java.util.Map, groovy.lang.Closure) and related methods to control subsequent traversal behavior.\npublic class GroovyPrintStream extends PrintStream; // A PrintStream that outputs objects in Groovy style.\npublic class GroovyPrintWriter extends PrintWriter; // A PrintWriter that outputs objects in Groovy style.\npublic class LineColumnReader extends BufferedReader; // The LineColumnReader is an extension to BufferedReader that keeps track of the line and column information of where the cursor is.\npublic class PlatformLineWriter extends Writer; // A buffered writer that gobbles any \\r characters and replaces every \\n with a platform specific newline.\n", "des": "Classes for Groovier Input/Output."}
{"index": 2620, "repo": "spring-integration-jms-6.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic class JmsChannelFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<AbstractJmsChannel> implements org.springframework.context.SmartLifecycle, org.springframework.beans.factory.BeanNameAware;\npublic class JmsChannelParser extends org.springframework.integration.config.xml.AbstractChannelParser; // Parser for the 'channel' and 'publish-subscribe-channel' elements of the Spring Integration JMS namespace.\npublic class JmsHeaderEnricherParser extends org.springframework.integration.config.xml.HeaderEnricherParserSupport; // Header enricher for JMS specific values.\npublic class JmsInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Parser for the <inbound-channel-adapter/> element of the 'jms' namespace.\npublic class JmsMessageDrivenEndpointParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the <message-driven-channel-adapter> element and the <inbound-gateway> element of the 'jms' namespace.\npublic class JmsNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for Spring Integration's jms namespace.\npublic class JmsOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the <outbound-channel-adapter/> element of the jms namespace.\npublic class JmsOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the <outbound-gateway> element of the integration 'jms' namespace.\n", "des": "Provides classes for configuration - parsers, namespace handlers, factory beans."}
{"index": 192, "repo": "ignite-core-2.15.0", "code": "Package: typedef\n\nSub Packages: \npackage typedef.internal; // Contains internal typedefs.\n\nClasses and Interfaces: \nInterface C1<E1,R>; // Defines alias for IgniteClosure by extending it.\nInterface C2<E1,E2,R>; // Defines alias for IgniteBiClosure by extending it.\nInterface C3<E1,E2,E3,R>; // Defines alias for GridClosure3 by extending it.\nInterface CI1<T>; // Defines alias for IgniteInClosure by extending it.\nInterface CI2<E1,E2>; // Defines alias for IgniteBiInClosure by extending it.\nInterface CI3<E1,E2,E3>; // Defines alias for GridInClosure3 by extending it.\nInterface CO<T>; // Defines alias for IgniteOutClosure by extending it.\nInterface P1<E1>; // Defines alias for IgnitePredicate by extending it.\nInterface P2<T1,T2>; // Defines alias for IgniteBiPredicate by extending it.\nInterface P3<T1,T2,T3>; // Defines alias for GridPredicate3 by extending it.\nInterface PA; // Defines alias for GridAbsPredicate by extending it.\nInterface PCE<K,V>; // Defines alias for GridPredicate<Entry<K, V>> by extending IgnitePredicate.\nInterface PE; // Defines alias for GridPredicate<GridEvent> by extending IgnitePredicate.\nInterface PKV<K,V>; // Defines alias for GridPredicate2<K, V> by extending IgnitePredicate.\nInterface PN; // Defines alias for GridPredicate<ClusterNode> by extending IgnitePredicate.\nInterface R1<E1,R>; // Defines alias for IgniteReducer by extending it.\nInterface R2<E1,E2,R>; // Defines alias for IgniteReducer2 by extending it.\nInterface R3<E1,E2,E3,R>; // Defines alias for IgniteReducer3 by extending it.\nClass CA; // Defines alias for GridAbsClosure by extending it.\n", "des": "Contains typedefs definitions for frequently used classes."}
{"index": 1636, "repo": "spring-kafka-3.0.9", "code": "Package: converter\n\nClasses and Interfaces: \npublic interface BatchMessageConverter extends MessageConverter; // A Kafka-specific Message converter strategy.\npublic class BatchMessagingMessageConverter extends Object implements BatchMessageConverter; // A Messaging MessageConverter implementation used with a batch message listener; the consumer record values are extracted into a collection in the message payload.\npublic class ByteArrayJsonMessageConverter extends JsonMessageConverter; // JSON Message converter - byte[] on output, String, Bytes, or byte[] on input.\npublic class BytesJsonMessageConverter extends JsonMessageConverter; // JSON Message converter - Bytes on output, String, Bytes, or byte[] on input.\npublic class ConversionException extends KafkaException; // Exception for conversions.\npublic class JsonMessageConverter extends MessagingMessageConverter; // Base class for JSON message converters; on the consumer side, it can handle byte[], Bytes and String record values.\npublic class KafkaMessageHeaders extends org.springframework.messaging.MessageHeaders; // Overload of message headers configurable for adding id and timestamp headers.\npublic class MappingJacksonParameterizedConverter extends org.springframework.messaging.converter.MappingJackson2MessageConverter; // Subclass of MappingJackson2MessageConverter that can handle parameterized (generic) types.\npublic interface MessageConverter; // A top level interface for message converters.\npublic class MessagingMessageConverter extends Object implements RecordMessageConverter; // A Messaging MessageConverter implementation for a message listener that receives individual messages.\npublic class ProjectingMessageConverter extends MessagingMessageConverter; // A MessageConverter implementation that uses a Spring Data ProjectionFactory to bind incoming messages to projection interfaces.\npublic interface RecordMessageConverter extends MessageConverter; // A Kafka-specific Message converter strategy.\npublic class StringJsonMessageConverter extends JsonMessageConverter; // JSON Message converter - String on output, String, Bytes, or byte[] on input.\n", "des": "Package for kafka converters"}
{"index": 1092, "repo": "hbase-server-3.0.0-alpha-4", "code": "Package: constraint\n\nClasses and Interfaces: \nInterface Constraint; // Apply a Constraint (in traditional database terminology) to a Table.\nClass BaseConstraint; // Base class to use when actually implementing a Constraint.\nClass ConstraintProcessor; // Processes multiple Constraints on a given table.\nClass Constraints; // Utilities for adding/removing constraints from a table.\nClass ConstraintException; // Exception that a user defined constraint throws on failure of a Put.\n", "des": "Restrict the domain of a data attribute, often times to fulfill business rules/requirements."}
{"index": 2385, "repo": "spring-batch-core-5.0.2", "code": "Package: converter\n\nClasses and Interfaces: \npublic class DateToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<Date,String>; // Converter implementation from Date to String.\npublic class DefaultJobParametersConverter extends Object implements JobParametersConverter; // Converter for JobParameters instances that uses a simple naming convention for converting job parameters.\npublic class JobParametersConversionException extends RuntimeException; // Exception to report an error when converting job parameters.\npublic interface JobParametersConverter; // A factory for JobParameters instances.\npublic class JsonJobParametersConverter extends DefaultJobParametersConverter; // Converter for JobParameters instances that uses a JSON naming convention for converting job parameters.\npublic static record JsonJobParametersConverter.JobParameterDefinition(String value, String type, String identifying) extends Record;\npublic class LocalDateTimeToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<LocalDateTime,String>; // Converter implementation from LocalDateTime to String.\npublic class LocalDateToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<LocalDate,String>; // Converter implementation from LocalDate to String.\npublic class LocalTimeToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<LocalTime,String>; // Converter implementation from LocalTime to String.\npublic class StringToDateConverter extends Object implements org.springframework.core.convert.converter.Converter<String,Date>; // Converter implementation from String to Date.\npublic class StringToLocalDateConverter extends Object implements org.springframework.core.convert.converter.Converter<String,LocalDate>; // Converter implementation from String to LocalDate.\npublic class StringToLocalDateTimeConverter extends Object implements org.springframework.core.convert.converter.Converter<String,LocalDateTime>; // Converter implementation from String to LocalDateTime.\npublic class StringToLocalTimeConverter extends Object implements org.springframework.core.convert.converter.Converter<String,LocalTime>; // Converter implementation from String to LocalTime.\n", "des": "Support classes for implementations of the batch APIs."}
{"index": 217, "repo": "nutch-2.4", "code": "Package: scoring\n\nSub Packages: \npackage scoring.link; // Scoring filter\npackage scoring.opic; // Scoring filter implementing a variant of the Online Page Importance Computation (OPIC) algorithm.\npackage scoring.tld; // Top Level Domain Scoring plugin.\n\nClasses and Interfaces: \nInterface ScoringFilter; // A contract defining behavior of scoring plugins.\nClass ScoreDatum;\nClass ScoringFilters; // Creates and caches ScoringFilter implementing plugins.\nClass ScoringFilterException; // Specialized exception for errors during scoring.\n", "des": "The ScoringFilter interface."}
{"index": 3366, "repo": "opencms-core-15.0", "code": "Package: comparison\n\nClasses and Interfaces: \nClass CmsAttributeComparison; // Comparison of resource attributes.\nClass CmsDiffViewMode; // Wrapper class for the different types of diff modes.\nClass CmsElementComparison; // Comparison of two xml page elements.\nClass CmsHistoryListUtil; // Utility methods for the history list.\nClass CmsHtmlDifferenceConfiguration; // OpenCms Html Diff operation configuration class.\nClass CmsResourceComparison; // Comparison of two OpenCms resources.\nClass CmsXmlContentElementComparison; // Comparison of two xml content elements.\nClass CmsXmlDocumentComparison; // A comparison of properties, attributes and elements of xml documents.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Utilities for comparing different versions of resources, used by both the classic workplace and the new Vaadin-based workplace."}
{"index": 3680, "repo": "solr-core-9.3.0", "code": "Package: json\n\nClasses and Interfaces: \nClass JSONUtil;\nClass ObjectUtil;\nClass ObjectUtil.ConflictHandler;\nClass RequestUtil;\n", "des": "JSON related classes"}
{"index": 79, "repo": "ignite-core-2.15.0", "code": "Package: loadbalancing\n\nSub Packages: \npackage loadbalancing.adaptive; // Contains adaptive load balancing SPI.\npackage loadbalancing.roundrobin; // Contains default round-robin implementation for load balancing SPI.\npackage loadbalancing.weightedrandom; // Contains weighted random-base implementation for load balancing SPI.\n\nClasses and Interfaces: \nInterface LoadBalancingSpi; // Load balancing SPI provides the next best balanced node for job execution.\n", "des": "Contains APIs for load balancing SPI."}
{"index": 3403, "repo": "commons-imaging-1.0-alpha3", "code": "Package: psd\n\nClasses and Interfaces: \nClass PsdHeaderInfo;\nClass PsdImageContents;\nClass PsdImageParser;\nClass PsdImagingParameters; // Psd format parameters.\n", "des": "The PSD image format."}
{"index": 3456, "repo": "hibernate-core-5.6.15.Final", "code": "Package: persistent\n\nClasses and Interfaces: \nClass DeleteHandlerImpl;\nClass Helper;\nClass PersistentTableBulkIdStrategy; // This is a strategy that mimics temporary tables for databases which do not support temporary tables.\nClass UpdateHandlerImpl;\n", "des": "Package contains an implementation of MultiTableBulkIdStrategy based on the use of a persistent (ANSI SQL term) table to hold id values."}
{"index": 3767, "repo": "lucene-analysis-common-9.7.0", "code": "Package: cjk\n\nClasses and Interfaces: \nClass CJKAnalyzer; // An Analyzer that tokenizes text with StandardTokenizer, normalizes content with CJKWidthFilter, folds case with LowerCaseFilter, forms bigrams of CJK with CJKBigramFilter, and filters stopwords with StopFilter\nClass CJKBigramFilter; // Forms bigrams of CJK terms that are generated from StandardTokenizer or ICUTokenizer.\nClass CJKBigramFilterFactory; // Factory for CJKBigramFilter.\nClass CJKWidthCharFilter; // A CharFilter that normalizes CJK width differences: Folds fullwidth ASCII variants into the equivalent basic latin Folds halfwidth Katakana variants into the equivalent kana\nClass CJKWidthCharFilterFactory; // Factory for CJKWidthCharFilter.\nClass CJKWidthFilter; // A TokenFilter that normalizes CJK width differences: Folds fullwidth ASCII variants into the equivalent basic latin Folds halfwidth Katakana variants into the equivalent kana\nClass CJKWidthFilterFactory; // Factory for CJKWidthFilter.\n", "des": "Analyzer for Chinese, Japanese, and Korean, which indexes bigrams."}
{"index": 231, "repo": "nutch-2.4", "code": "Package: assets\n\nClasses and Interfaces: \nClass NutchUiCssReference;\n", "des": "Contains asset classes for Web UI"}
{"index": 1693, "repo": "spring-data-couchbase-5.1.2", "code": "Package: event\n\nClasses and Interfaces: \npublic class AbstractCouchbaseEventListener<E> extends Object implements ApplicationListener<CouchbaseMappingEvent<?>>; // Base class to implement domain class specific ApplicationListeners.\n@FunctionalInterface public interface AfterConvertCallback<T> extends EntityCallback<T>; // Callback being invoked after a domain object is materialized from a CouchbaseDocument when reading results.\npublic class AfterDeleteEvent<E> extends CouchbaseMappingEvent<E>;\npublic class AfterSaveEvent<E> extends CouchbaseMappingEvent<E>;\npublic class AuditingEntityCallback extends Object implements BeforeConvertCallback<Object>, AfterConvertCallback<Object>, Ordered; // EntityCallback to populate auditing related fields on an entity about to be saved.\npublic class AuditingEventListener extends Object implements ApplicationListener<CouchbaseMappingEvent<Object>>; // Event listener to populate auditing related fields on an entity about to be saved.\n@FunctionalInterface public interface BeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\npublic class BeforeConvertEvent<E> extends CouchbaseMappingEvent<E>;\npublic class BeforeDeleteEvent<E> extends CouchbaseMappingEvent<E>;\npublic class BeforeSaveEvent<E> extends CouchbaseMappingEvent<E>;\npublic class CouchbaseMappingEvent<T> extends ApplicationEvent; // A mapping event.\npublic class LoggingEventListener extends AbstractCouchbaseEventListener<Object>; // AApplicationListener for Couchbase mapping events logging the events.\n@FunctionalInterface public interface ReactiveAfterConvertCallback<T> extends EntityCallback<T>; // Callback being invoked after a domain object is materialized from a CouchbaseDocument when reading results.\npublic class ReactiveAuditingEntityCallback extends Object implements ReactiveBeforeConvertCallback<Object>, ReactiveAfterConvertCallback<Object>, Ordered; // Reactive EntityCallback to populate auditing related fields on an entity about to be saved.\n@FunctionalInterface public interface ReactiveBeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\npublic class ValidatingCouchbaseEventListener extends AbstractCouchbaseEventListener<Object>; // javax.validation dependant entities validator.\n", "des": "This package contains various events that are emitted during the lifecycle of a Spring Data entity."}
{"index": 849, "repo": "calcite-core-1.34.0", "code": "Package: rules\n\nSub Packages: \npackage rules.materialize; // Provides a materialized rewriting algorithm encapsulated within a planner rule.\n\nClasses and Interfaces: \nInterface AbstractJoinExtractFilterRule.Config; // Rule configuration.\nInterface AggregateCaseToFilterRule.Config; // Rule configuration.\nInterface AggregateExpandDistinctAggregatesRule.Config; // Rule configuration.\nInterface AggregateExpandWithinDistinctRule.Config; // Rule configuration.\nInterface AggregateExtractProjectRule.Config; // Rule configuration.\nInterface AggregateFilterTransposeRule.Config; // Rule configuration.\nInterface AggregateJoinJoinRemoveRule.Config; // Rule configuration.\nInterface AggregateJoinRemoveRule.Config; // Rule configuration.\nInterface AggregateJoinTransposeRule.Config; // Rule configuration.\nInterface AggregateMergeRule.Config; // Rule configuration.\nInterface AggregateProjectConstantToDummyJoinRule.Config; // Rule configuration.\nInterface AggregateProjectMergeRule.Config; // Rule configuration.\nInterface AggregateProjectPullUpConstantsRule.Config; // Rule configuration.\nInterface AggregateProjectStarTableRule.Config; // Rule configuration.\nInterface AggregateReduceFunctionsRule.Config; // Rule configuration.\nInterface AggregateRemoveRule.Config; // Rule configuration.\nInterface AggregateStarTableRule.Config; // Rule configuration.\nInterface AggregateUnionAggregateRule.Config; // Rule configuration.\nInterface AggregateUnionTransposeRule.Config; // Rule configuration.\nInterface AggregateValuesRule.Config; // Rule configuration.\nInterface CalcMergeRule.Config; // Rule configuration.\nInterface CalcRemoveRule.Config; // Rule configuration.\nInterface CalcSplitRule.Config; // Rule configuration.\nInterface CoerceInputsRule.Config; // Rule configuration.\nInterface DateRangeRules.FilterDateRangeRule.FilterDateRangeRuleConfig; // Rule configuration.\nInterface ExchangeRemoveConstantKeysRule.Config; // Rule configuration.\nInterface FilterAggregateTransposeRule.Config; // Rule configuration.\nInterface FilterCalcMergeRule.Config; // Rule configuration.\nInterface FilterCorrelateRule.Config; // Rule configuration.\nInterface FilterFlattenCorrelatedConditionRule.Config; // Rule configuration.\nInterface FilterJoinRule.Config; // Rule configuration.\nInterface FilterJoinRule.FilterIntoJoinRule.FilterIntoJoinRuleConfig; // Rule configuration.\nInterface FilterJoinRule.JoinConditionPushRule.JoinConditionPushRuleConfig; // Rule configuration.\n", "des": "Provides a core set of planner rules."}
{"index": 2353, "repo": "spring-boot-3.1.1", "code": "Package: client\n\nClasses and Interfaces: \n@FunctionalInterface public interface WebClientCustomizer; // Callback interface that can be used to customize a WebClient.Builder.\n", "des": "Spring WebFlux WebClient support abstractions."}
{"index": 1519, "repo": "spring-context-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \n@Documented @Retention(RUNTIME) @Target({METHOD,FIELD,PARAMETER,ANNOTATION_TYPE}) public @interface DateTimeFormat; // Declares that a field or method parameter should be formatted as a date or time.\npublic static enum DateTimeFormat.ISO extends Enum<DateTimeFormat.ISO>; // Common ISO date time format patterns.\n@Documented @Retention(RUNTIME) @Target({METHOD,FIELD,PARAMETER,ANNOTATION_TYPE}) public @interface NumberFormat; // Declares that a field or method parameter should be formatted as a number.\npublic static enum NumberFormat.Style extends Enum<NumberFormat.Style>; // Common number format styles.\n", "des": "Annotations for declaratively configuring field formatting rules."}
{"index": 2241, "repo": "spring-data-keyvalue-3.1.2", "code": "Package: annotation\n\nClasses and Interfaces: \n@Documented @Retention(RUNTIME) @Target({METHOD,TYPE}) public @interface KeySpace; // Marker interface for methods with Persistent annotations indicating the presence of a dedicated keyspace the entity should reside in.\n", "des": "Key-Value annotations for declarative keyspace configuration."}
{"index": 2983, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "Package: resource\n\nSub Packages: \npackage resource.authentication; // OAuth 2.0 Resource Server Authentications and supporting classes and interfaces.\npackage resource.introspection; // OAuth 2.0 Introspection supporting classes and interfaces.\npackage resource.web; // OAuth 2.0 Resource Server Filter's and supporting classes and interfaces.\n\nClasses and Interfaces: \n@Deprecated public class BearerTokenAuthenticationToken extends BearerTokenAuthenticationToken;\npublic final class BearerTokenError extends org.springframework.security.oauth2.core.OAuth2Error; // A representation of a Bearer Token Error.\npublic final class BearerTokenErrorCodes extends Object; // Standard error codes defined by the OAuth 2.0 Authorization Framework: Bearer Token Usage.\npublic final class BearerTokenErrors extends Object; // A factory for creating BearerTokenError instances that correspond to the registered Bearer Token Error Codes.\npublic class InvalidBearerTokenException extends org.springframework.security.oauth2.core.OAuth2AuthenticationException; // An OAuth2AuthenticationException that indicates an invalid bearer token.\n", "des": "OAuth 2.0 Resource Server core classes and interfaces providing support."}
{"index": 708, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: http\n\nClasses and Interfaces: \nClass BaseHttpInboundEndpointSpec<S extends BaseHttpInboundEndpointSpec<S,E>,E extends org.springframework.integration.http.inbound.HttpRequestHandlingEndpointSupport>;\nClass BaseHttpInboundEndpointSpec.CrossOriginSpec; // A fluent API for the CrossOrigin.\nClass BaseHttpInboundEndpointSpec.RequestMappingSpec; // A fluent API for the RequestMapping.\nClass Http; // The HTTP components Factory.\nClass HttpControllerEndpointSpec; // The BaseHttpInboundEndpointSpec implementation for the HttpRequestHandlingController.\nClass HttpMessageHandlerSpec; // The MessageHandlerSpec implementation for the HttpRequestExecutingMessageHandler.\nClass HttpRequestHandlerEndpointSpec; // The BaseHttpInboundEndpointSpec implementation for the HttpRequestHandlingMessagingGateway.\n", "des": "Provides HTTP Components support for Spring Integration Java DSL."}
{"index": 1661, "repo": "jena-core-4.9.0", "code": "Package: transitiveReasoner\n\nClasses and Interfaces: \npublic class TransitiveEngine extends Object; // Uses two transitive graph caches to store a subclass and a subproperty lattice and use them within a larger inference graph.\npublic class TransitiveGraphCache extends Object implements Finder; // Datastructure used to represent a closed transitive reflexive relation.\npublic class TransitiveInfGraph extends BaseInfGraph; // Implementation of InfGraph used by the TransitiveReasoner.\npublic class TransitiveReasoner extends Object implements Reasoner; // A simple \"reasoner\" used to help with API development.\npublic class TransitiveReasonerFactory extends Object implements ReasonerFactory; // Factory class for creating blank instances of the transitive reasoner.\n", "des": "This package contains a reasoner which supports transitive-reflexive closure of subPropertyOf and subClassOf relations."}
{"index": 2907, "repo": "spring-boot-maven-plugin-3.1.1", "code": "Package: maven\n\nClasses and Interfaces: \npublic abstract class AbstractAotMojo extends AbstractDependencyFilterMojo; // Abstract base class for AOT processing MOJOs.\nprotected static class AbstractAotMojo.Errors extends Object implements DiagnosticListener<JavaFileObject>; // DiagnosticListener used to collect errors.\npublic abstract class AbstractDependencyFilterMojo extends org.apache.maven.plugin.AbstractMojo; // A base mojo filtering the dependencies of the project.\nprotected static class AbstractDependencyFilterMojo.ExcludeTestScopeArtifactFilter extends org.apache.maven.shared.artifact.filter.collection.AbstractArtifactFeatureFilter; // ArtifactFilter to exclude test scope dependencies.\nprotected static class AbstractDependencyFilterMojo.RuntimeArtifactFilter extends Object implements org.apache.maven.artifact.resolver.filter.ArtifactFilter; // ArtifactFilter that only include runtime scopes.\npublic abstract class AbstractPackagerMojo extends AbstractDependencyFilterMojo; // Abstract base class for classes that work with an Packager.\npublic static enum AbstractPackagerMojo.LayoutType extends Enum<AbstractPackagerMojo.LayoutType>; // Archive layout types.\npublic abstract class AbstractRunMojo extends AbstractDependencyFilterMojo; // Base class to run a Spring Boot application.\npublic class ArtifactsLibraries extends Object implements org.springframework.boot.loader.tools.Libraries; // Libraries backed by Maven Artifacts.\n@Mojo(name=\"build-image\", defaultPhase=PACKAGE, requiresProject=true, threadSafe=true, requiresDependencyResolution=COMPILE_PLUS_RUNTIME, requiresDependencyCollection=COMPILE_PLUS_RUNTIME) @Execute(phase=PACKAGE) public class BuildImageForkMojo extends BuildImageMojo; // Package an application into an OCI image using a buildpack, forking the lifecycle to make sure that package ran.\npublic abstract class BuildImageMojo extends AbstractPackagerMojo; // Package an application into an OCI image using a buildpack.\n", "des": "Maven plugin for Spring Boot."}
{"index": 1828, "repo": "spring-test-6.0.11", "code": "Package: http\n\nSub Packages: \npackage http.client; // Mock implementations of client-side HTTP abstractions.\n\nClasses and Interfaces: \npublic class MockHttpInputMessage extends Object implements org.springframework.http.HttpInputMessage; // Mock implementation of HttpInputMessage.\npublic class MockHttpOutputMessage extends Object implements org.springframework.http.HttpOutputMessage; // Mock implementation of HttpOutputMessage.\n", "des": "Mock implementations of client/server-side HTTP abstractions."}
{"index": 3652, "repo": "solr-core-9.3.0", "code": "Package: handler\n\nSub Packages: \npackage handler.admin; // SolrRequestHandler implementations for powering he Solr Admin UI\npackage handler.api; // V2 utilities useful for all API implementations.\npackage handler.component; // SearchComponent implementations for use in SearchHandler\npackage handler.configsets; // V2 API classes for performing CRUD operations on configsets.\npackage handler.designer; // The SchemaDesignerAPI and supporting classes.\npackage handler.export; // Solr's Export Handler Functionality\npackage handler.loader; // ContentStreamLoader implementations for use in ContentStreamHandlerBase implementations\npackage handler.tagger; // The TaggerRequestHandler and supporting classes.\n\nClasses and Interfaces: \nInterface AnalysisRequestHandlerBase.TokenTrackingAttribute; // This is an Attribute used to track the positions of tokens in the analysis chain.\nInterface NestedRequestHandler; // An interface for RequestHandlers need to handle all paths under its registered path\nInterface ReplicationHandler.PollListener;\nClass AnalysisRequestHandlerBase; // A base class for all analysis request handlers.\nClass AnalysisRequestHandlerBase.AnalysisContext; // Serves as the context of an analysis process.\nClass AnalysisRequestHandlerBase.ListBasedTokenStream; // TokenStream that iterates over a list of pre-existing Tokens\nClass AnalysisRequestHandlerBase.TokenTrackingAttributeImpl; // Implementation of AnalysisRequestHandlerBase.TokenTrackingAttribute.\nClass AnalyzeEvaluator;\nClass BlobHandler;\nClass CatStream;\nClass CatStream.CrawlFile;\nClass ClassifyStream; // The classify expression retrieves a model trained by the train expression and uses it to classify documents from a stream Syntax: classif(model(...), anyStream(...), field=\"body\")\nClass ClusterAPI; // All V2 APIs that have a prefix of /api/cluster/\nClass ClusterAPI.RoleInfo;\nClass ContentStreamHandlerBase; // Shares common code between various handlers that manipulate ContentStream objects.\nClass DocumentAnalysisRequestHandler; // An analysis handler that provides a breakdown of the analysis process of provided documents.\nClass DumpRequestHandler;\nClass ExportHandler;\nClass ExportHandler.ExportHandlerStreamFactory;\nClass FieldAnalysisRequestHandler; // Provides the ability to specify multiple field types and field names in the same request.\nClass GraphHandler; // Solr Request Handler for graph traversal with streaming functions that responds with GraphML markup.\nClass GraphHandler.DummyErrorStream;\n", "des": "Concrete implementations of SolrRequestHandler"}
{"index": 3423, "repo": "hibernate-core-5.6.15.Final", "code": "Package: boot\n\nSub Packages: \npackage boot.registry; // Defines service registry contracts application are likely to want to utilize for configuring Hibernate behavior.\npackage boot.xsd; // Support for XSD handling, specifically for ORM mappings (Hibernate's `hbm.xml` and JPA's `orm.xml`) and config files (Hibernate's `cfg.xml` and JPA's `persistence.xml`)\n\nClasses and Interfaces: \nInterface AttributeConverterInfo; // Delayed information about an AttributeConverter.\nInterface Metadata; // Represents the ORM model as determined from all provided mapping sources.\nInterface MetadataBuilder; // Contract for specifying various overrides to be used in metamodel building.\nInterface SessionFactoryBuilder; // The contract for building a SessionFactory given a number of options.\nClass CacheRegionDefinition; // Models the definition of caching settings for a particular region.\nClass JaccPermissionDefinition;\nClass MetadataSources; // Entry point into working with sources of metadata information (mapping XML, annotations).\nEnum CacheRegionDefinition.CacheRegionType;\nEnum SchemaAutoTooling; // Defines the possible values for \"hbm2ddl_auto\"\nEnum TempTableDdlTransactionHandling; // Enum describing how creation and dropping of temporary tables should be done in terms of transaction handling.\nClass InvalidMappingException;\nClass MappingException; // Indicates a problem parsing a mapping document.\nClass MappingNotFoundException;\nClass UnsupportedOrmXsdVersionException;\n", "des": "This package contains the contracts that make up the Hibernate native bootstrapping API (building a SessionFactory)."}
{"index": 1461, "repo": "spring-data-redis-3.1.2", "code": "Package: cdi\n\nClasses and Interfaces: \npublic abstract class CdiBean<T> extends Object implements jakarta.enterprise.inject.spi.Bean<T>, jakarta.enterprise.inject.spi.PassivationCapable; // Base class for Bean wrappers.\npublic class RedisKeyValueAdapterBean extends CdiBean<RedisKeyValueAdapter>; // CdiBean to create RedisKeyValueAdapter instances.\npublic class RedisKeyValueTemplateBean extends CdiBean<org.springframework.data.keyvalue.core.KeyValueOperations>; // CdiBean to create RedisKeyValueTemplate instances.\npublic class RedisRepositoryBean<T> extends CdiRepositoryBean<T>; // CdiRepositoryBean to create Redis repository instances.\npublic class RedisRepositoryExtension extends CdiRepositoryExtensionSupport; // CDI extension to export Redis repositories.\n", "des": "CDI support for Redis specific repository implementation."}
{"index": 2533, "repo": "spring-security-core-6.1.2", "code": "Package: mapping\n\nClasses and Interfaces: \npublic interface Attributes2GrantedAuthoritiesMapper; // Interface to be implemented by classes that can map a list of security attributes (such as roles or group names) to a collection of Spring Security GrantedAuthoritys.\npublic interface GrantedAuthoritiesMapper; // Mapping interface which can be injected into the authentication layer to convert the authorities loaded from storage into those which will be used in the Authentication object.\npublic class MapBasedAttributes2GrantedAuthoritiesMapper extends Object implements Attributes2GrantedAuthoritiesMapper, MappableAttributesRetriever, org.springframework.beans.factory.InitializingBean; // This class implements the Attributes2GrantedAuthoritiesMapper and MappableAttributesRetriever interfaces based on the supplied Map.\npublic interface MappableAttributesRetriever; // Interface to be implemented by classes that can retrieve a list of mappable security attribute strings (for example the list of all available J2EE roles in a web or EJB application).\npublic class NullAuthoritiesMapper extends Object implements GrantedAuthoritiesMapper;\npublic class SimpleAttributes2GrantedAuthoritiesMapper extends Object implements Attributes2GrantedAuthoritiesMapper, org.springframework.beans.factory.InitializingBean; // This class implements the Attributes2GrantedAuthoritiesMapper interface by doing a one-to-one mapping from roles to Spring Security GrantedAuthorities.\npublic final class SimpleAuthorityMapper extends Object implements GrantedAuthoritiesMapper, org.springframework.beans.factory.InitializingBean; // Simple one-to-one GrantedAuthoritiesMapper which allows for case conversion of the authority name and the addition of a string prefix (which defaults to ROLE_ ).\npublic class SimpleMappableAttributesRetriever extends Object implements MappableAttributesRetriever; // This class implements the MappableAttributesRetriever interface by just returning a list of mappable attributes as previously set using the corresponding setter method.\n", "des": "Strategies for mapping a list of attributes (such as roles or LDAP groups) to a list of GrantedAuthoritys."}
{"index": 698, "repo": "jackson-databind-2.15.2", "code": "Package: internal\n\nClasses and Interfaces: \nClass PrivateMaxEntriesMap<K,V>; // A hash table supporting full concurrency of retrievals, adjustable expected concurrency for updates, and a maximum capacity to bound the map by.\nClass PrivateMaxEntriesMap.Builder<K,V>; // A builder that creates PrivateMaxEntriesMap instances.\n", "des": "This package contains an implementation of a bounded ConcurrentMap data structure."}
{"index": 2006, "repo": "spring-boot-devtools-3.1.1", "code": "Package: devtools\n\nSub Packages: \npackage devtools.autoconfigure; // Auto-configuration for spring-boot-devtools.\npackage devtools.classpath; // Support for classpath monitoring.\npackage devtools.env; // DevTools classes relating to Spring Framework's Environment.\npackage devtools.filewatch; // Class to watch the local filesystem for changes.\npackage devtools.livereload; // Support for the livereload protocol.\npackage devtools.logger; // Devtools specific logging concerns.\npackage devtools.restart; // Application restart support.\npackage devtools.settings; // Classes for loading DevTools settings.\npackage devtools.system; // Devtools system support classes.\n\nClasses and Interfaces: \npublic final class RemoteSpringApplication extends Object; // Application that can be used to establish a link to remotely running Spring Boot code.\n", "des": "Spring Boot developer tools."}
{"index": 2743, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: repeat\n\nSub Packages: \npackage repeat.callback; // Infrastructure implementations of repeat callback concerns.\npackage repeat.context; // Infrastructure implementations of repeat context concerns.\npackage repeat.exception; // Infrastructure implementations of repeat exception handler concerns.\npackage repeat.interceptor; // Infrastructure implementations of repeat aop concerns.\npackage repeat.listener; // Infrastructure implementations of repeat interceptor concerns.\npackage repeat.policy; // Infrastructure implementations of repeat policy concerns.\npackage repeat.support; // Infrastructure implementations of repeat support concerns.\n\nClasses and Interfaces: \npublic interface CompletionPolicy; // Interface for batch completion policies, to enable batch operations to strategise normal completion conditions.\npublic interface RepeatCallback; // Callback interface for batch operations.\npublic interface RepeatContext extends org.springframework.core.AttributeAccessor; // Base interface for context which controls the state and completion / termination of a batch step.\npublic class RepeatException extends org.springframework.core.NestedRuntimeException;\npublic interface RepeatListener; // Interface for listeners to the batch process.\n@FunctionalInterface public interface RepeatOperations; // The main interface providing access to batch operations.\npublic enum RepeatStatus extends Enum<RepeatStatus>;\n", "des": "Infrastructure implementations of repeat concerns."}
{"index": 3809, "repo": "lucene-analysis-common-9.7.0", "code": "Package: reverse\n\nClasses and Interfaces: \nClass ReverseStringFilter; // Reverse token string, for example \"country\" => \"yrtnuoc\".\nClass ReverseStringFilterFactory; // Factory for ReverseStringFilter.\n", "des": "Filter to reverse token text."}
{"index": 3466, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface DdlTransactionIsolator; // Provides access to a Connection that is isolated from any \"current transaction\" with the designed purpose of performing DDL commands\nInterface SynchronizationRegistry; // Manages a registry of (local) JTA Synchronization instances\nInterface SynchronizationRegistryImplementor; // SPI contract for SynchronizationRegistry implementors.\nInterface TransactionCoordinator; // Models the coordination of all transaction related flows.\nInterface TransactionCoordinator.TransactionDriver; // Provides the means for \"local transactions\" (as transaction drivers) to control the underlying \"physical transaction\" currently associated with the TransactionCoordinator.\nInterface TransactionCoordinatorBuilder; // Builder for TransactionCoordinator instances\nInterface TransactionCoordinatorBuilder.Options; // Access to options to are specific to each TransactionCoordinator instance\nInterface TransactionCoordinatorOwner; // Models an owner of a TransactionCoordinator.\nEnum TransactionStatus; // Enumeration of statuses in which a transaction facade (Transaction) might be.\n", "des": "Extended SPI contracts for the resource-level transaction capabilities of Hibernate."}
{"index": 1459, "repo": "spring-data-redis-3.1.2", "code": "Package: listener\n\nSub Packages: \npackage listener.adapter; // Message listener adapter package.\n\nClasses and Interfaces: \npublic class ChannelTopic extends Object implements Topic; // Channel topic implementation (maps to a Redis channel).\npublic class KeyExpirationEventMessageListener extends KeyspaceEventMessageListener implements ApplicationEventPublisherAware; // MessageListener publishing RedisKeyExpiredEvents via ApplicationEventPublisher by listening to Redis keyspace notifications for key expirations.\npublic abstract class KeyspaceEventMessageListener extends Object implements MessageListener, InitializingBean, DisposableBean; // Base MessageListener implementation for listening to Redis keyspace notifications.\npublic class PatternTopic extends Object implements Topic; // Pattern topic (matching multiple channels).\npublic class ReactiveRedisMessageListenerContainer extends Object implements DisposableBean; // Container providing a stream of ReactiveSubscription.ChannelMessage for messages received via Redis Pub/Sub listeners.\npublic class RedisMessageListenerContainer extends Object implements InitializingBean, DisposableBean, BeanNameAware, SmartLifecycle; // Container providing asynchronous behaviour for Redis message listeners.\npublic interface Topic; // Topic for a Redis message.\n", "des": "Base package for Redis message listener / pubsub container facility"}
{"index": 3326, "repo": "opencms-core-15.0", "code": "Package: git\n\nClasses and Interfaces: \nClass CmsGitActionResultPanel; // Dialog that prints the result of the execution of a git action.\nClass CmsGitAppConfiguration; // App configuration for the Git checkin tool.\nClass CmsGitCheckin; // The class provides methods to automatically export modules from OpenCms and check in the exported, unzipped modules into some git repository.\nClass CmsGitConfiguration; // Access to a single git configuration file.\nClass CmsGitToolOptionsPanel; // Main widget for the Git check-in tool.\nClass Messages; // Message bundle class.\n", "des": "This package contains the app classes for the git check in functionality."}
{"index": 2329, "repo": "spring-boot-3.1.1", "code": "Package: reactive\n\nClasses and Interfaces: \npublic abstract class ApplicationContextServerWebExchangeMatcher<C> extends Object implements org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher; // ApplicationContext backed ServerWebExchangeMatcher.\n", "des": "Classes and utilities for reactive Spring Security."}
{"index": 350, "repo": "lucene-analyzers-kuromoji-8.11.2", "code": "Package: dict\n\nClasses and Interfaces: \nInterface Dictionary; // Dictionary interface for retrieving morphological data by id.\nClass BinaryDictionary; // Base class for a binary-encoded in-memory dictionary.\nClass CharacterDefinition; // Character category data.\nClass ConnectionCosts; // n-gram connection cost data\nClass TokenInfoDictionary; // Binary dictionary implementation for a known-word dictionary model: Words are encoded into an FST mapping to a list of wordIDs.\nClass TokenInfoFST; // Thin wrapper around an FST with root-arc caching for Japanese.\nClass UnknownDictionary; // Dictionary for unknown-word handling.\nClass UserDictionary; // Class for building a User Dictionary.\nEnum BinaryDictionary.ResourceScheme; // Used to specify where (dictionary) resources get loaded from.\n", "des": "Kuromoji dictionary implementation."}
{"index": 2637, "repo": "spring-integration-sftp-6.1.2", "code": "Package: filters\n\nClasses and Interfaces: \npublic class SftpPersistentAcceptOnceFileListFilter extends org.springframework.integration.file.filters.AbstractPersistentAcceptOnceFileListFilter<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Persistent file list filter using the server's file timestamp to detect if we've already 'seen' this file.\npublic class SftpRegexPatternFileListFilter extends org.springframework.integration.file.filters.AbstractRegexPatternFileListFilter<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Implementation of AbstractRegexPatternFileListFilter for SFTP.\npublic class SftpSimplePatternFileListFilter extends org.springframework.integration.file.filters.AbstractSimplePatternFileListFilter<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Implementation of AbstractSimplePatternFileListFilter for SFTP.\npublic class SftpSystemMarkerFilePresentFileListFilter extends org.springframework.integration.file.filters.AbstractMarkerFilePresentFileListFilter<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // SFTP implementation of AbstractMarkerFilePresentFileListFilter.\n", "des": "Provides classes supporting SFTP file filtering."}
{"index": 3755, "repo": "lucene-facet-9.7.0", "code": "Package: rangeonrange\n\nClasses and Interfaces: \nClass DoubleRange; // Represents a double range for RangeOnRange faceting\nClass DoubleRangeOnRangeFacetCounts; // Represents counts for double range on range faceting.\nClass LongRange; // Represents a long range for RangeOnRange faceting\nClass LongRangeOnRangeFacetCounts; // Represents counts for long range on range faceting.\nClass Range; // Base class for a single labeled range.\n", "des": "Provides range on range faceting capabilities."}
{"index": 1484, "repo": "tribuo-core-4.3.1", "code": "Package: impl\n\nClasses and Interfaces: \npublic class ArrayExample<T extends Output<T>> extends Example<T>; // An Example backed by two arrays, one of String and one of double.\npublic final class BinaryFeaturesExample<T extends Output<T>> extends Example<T>; // An Example backed by a single array of feature names.\npublic final class DatasetDataCarrier<T extends Output<T>> extends Object; // Serialization carrier for common fields in Dataset.\npublic class IndexedArrayExample<T extends Output<T>> extends ArrayExample<T>; // A version of ArrayExample which also has the id numbers.\npublic static class IndexedArrayExample.FeatureTuple extends Object; // A tuple of the feature name, id and value.\npublic class ListExample<T extends Output<T>> extends Example<T> implements Serializable; // This class will not be performant until value types are available in Java.\npublic final class ModelDataCarrier<T extends Output<T>> extends Object; // Serialization carrier for common fields in Model and SequenceModel.\n", "des": "Provides implementations of base classes and interfaces from org.tribuo."}
{"index": 670, "repo": "commons-lang3-3.12.0", "code": "Package: function\n\nClasses and Interfaces: \nInterface FailableBiConsumer<T,U,E extends Throwable>; // A functional interface like BiConsumer that declares a Throwable.\nInterface FailableBiFunction<T,U,R,E extends Throwable>; // A functional interface like BiFunction that declares a Throwable.\nInterface FailableBiPredicate<T,U,E extends Throwable>; // A functional interface like BiPredicate that declares a Throwable.\nInterface FailableBooleanSupplier<E extends Throwable>; // A functional interface like BooleanSupplier that declares a Throwable.\nInterface FailableCallable<R,E extends Throwable>; // A functional interface like Callable that declares a Throwable.\nInterface FailableConsumer<T,E extends Throwable>; // A functional interface like Consumer that declares a Throwable.\nInterface FailableDoubleBinaryOperator<E extends Throwable>; // A functional interface like DoubleBinaryOperator that declares a Throwable.\nInterface FailableDoubleConsumer<E extends Throwable>; // A functional interface like DoubleConsumer that declares a Throwable.\nInterface FailableDoubleFunction<R,E extends Throwable>; // A functional interface like DoubleFunction that declares a Throwable.\nInterface FailableDoublePredicate<E extends Throwable>; // A functional interface like DoublePredicate that declares a Throwable.\nInterface FailableDoubleSupplier<E extends Throwable>; // A functional interface like DoubleSupplier that declares a Throwable.\nInterface FailableDoubleToIntFunction<E extends Throwable>; // A functional interface like DoubleToIntFunction that declares a Throwable.\nInterface FailableDoubleToLongFunction<E extends Throwable>; // A functional interface like DoubleToLongFunction that declares a Throwable.\nInterface FailableDoubleUnaryOperator<E extends Throwable>; // A functional interface like DoubleUnaryOperator that declares a Throwable.\nInterface FailableFunction<T,R,E extends Throwable>; // A functional interface like Function that declares a Throwable.\nInterface FailableIntBinaryOperator<E extends Throwable>; // A functional interface like IntBinaryOperator that declares a Throwable.\nInterface FailableIntConsumer<E extends Throwable>; // A functional interface like IntConsumer that declares a Throwable.\nInterface FailableIntFunction<R,E extends Throwable>; // A functional interface like IntFunction that declares a Throwable.\n", "des": "Provides functional interfaces to complement those in java.lang.function and utilities for working with Java 8 lambdas."}
{"index": 773, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: en\n\nClasses and Interfaces: \nClass AbstractWordsFileFilterFactory; // Abstract parent class for analysis factories that accept a stopwords file as input.\nClass EnglishAnalyzer; // Analyzer for English.\nClass EnglishMinimalStemFilter; // A TokenFilter that applies EnglishMinimalStemmer to stem English words.\nClass EnglishMinimalStemFilterFactory; // Factory for EnglishMinimalStemFilter.\nClass EnglishMinimalStemmer; // Minimal plural stemmer for English.\nClass EnglishPossessiveFilter; // TokenFilter that removes possessives (trailing 's) from words.\nClass EnglishPossessiveFilterFactory; // Factory for EnglishPossessiveFilter.\nClass KStemFilter; // A high-performance kstem filter for english.\nClass KStemFilterFactory; // Factory for KStemFilter.\nClass KStemmer; // This class implements the Kstem algorithm\nClass PorterStemFilter; // Transforms the token stream as per the Porter stemming algorithm.\nClass PorterStemFilterFactory; // Factory for PorterStemFilter.\n", "des": "Analyzer for English."}
{"index": 1446, "repo": "spring-data-redis-3.1.2", "code": "Package: jedis\n\nClasses and Interfaces: \npublic interface JedisClientConfiguration; // Redis client configuration for jedis.\npublic static class JedisClientConfiguration.DefaultJedisClientConfigurationBuilder extends Object implements JedisClientConfiguration.JedisClientConfigurationBuilder, JedisClientConfiguration.JedisPoolingClientConfigurationBuilder, JedisClientConfiguration.JedisSslClientConfigurationBuilder; // Default JedisClientConfiguration.JedisClientConfigurationBuilder implementation to build an immutable JedisClientConfiguration.\npublic static interface JedisClientConfiguration.JedisClientConfigurationBuilder; // Builder for JedisClientConfiguration.\npublic static interface JedisClientConfiguration.JedisPoolingClientConfigurationBuilder; // Builder for Pooling-related JedisClientConfiguration.\npublic static interface JedisClientConfiguration.JedisSslClientConfigurationBuilder; // Builder for SSL-related JedisClientConfiguration.\npublic class JedisClusterConnection extends Object implements RedisClusterConnection; // RedisClusterConnection implementation on top of JedisCluster. Uses the native JedisCluster api where possible and falls back to direct node communication using Jedis where needed.\nprotected static interface JedisClusterConnection.JedisClusterCommandCallback<T> extends ClusterCommandExecutor.ClusterCommandCallback<redis.clients.jedis.Jedis,T>; // Jedis specific ClusterCommandExecutor.ClusterCommandCallback.\npublic static class JedisClusterConnection.JedisClusterTopologyProvider extends Object implements ClusterTopologyProvider; // Jedis specific implementation of ClusterTopologyProvider.\nprotected static interface JedisClusterConnection.JedisMultiKeyClusterCommandCallback<T> extends ClusterCommandExecutor.MultiKeyClusterCommandCallback<redis.clients.jedis.Jedis,T>; // Jedis specific ClusterCommandExecutor.MultiKeyClusterCommandCallback.\npublic class JedisConnection extends AbstractRedisConnection; // RedisConnection implementation on top of Jedis library.\npublic class JedisConnectionFactory extends Object implements InitializingBean, DisposableBean, RedisConnectionFactory; // Connection factory creating Jedis based connections.\npublic class JedisExceptionConverter extends Object implements Converter<Exception,DataAccessException>; // Converts Exceptions thrown from Jedis to DataAccessExceptions\npublic class JedisScriptReturnConverter extends Object implements Converter<Object,Object>; // Converts the value returned by Jedis script eval to the expected ReturnType\npublic class JedisSentinelConnection extends Object implements RedisSentinelConnection;\n", "des": "Connection package for Jedis library."}
{"index": 1885, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: activedirectory\n\nClasses and Interfaces: \npublic class ActiveDirectoryRealm extends AbstractLdapRealm; // A Realm that authenticates with an active directory LDAP server to determine the roles for a particular user.\n", "des": "Realms that acquire security data from a Microsoft Active Directory."}
{"index": 3675, "repo": "solr-core-9.3.0", "code": "Package: packagemanager\n\nClasses and Interfaces: \nClass DefaultPackageRepository; // This is a serializable bean (for the JSON that is stored in /repository.json) representing a repository of Solr packages.\nClass PackageManager; // Handles most of the management of packages that are already installed in Solr.\nClass PackageRepository; // Abstract class for a repository, holding SolrPackage items.\nClass PackageUtils;\nClass RepositoryManager; // Handles most of the management of repositories and packages present in external repositories.\nClass SolrPackage; // Describes a package (along with all released versions) as it appears in a repository.\nClass SolrPackage.Artifact;\nClass SolrPackage.Command;\nClass SolrPackage.Manifest;\nClass SolrPackage.Plugin;\nClass SolrPackage.SolrPackageRelease;\nClass SolrPackageInstance; // Describes one instance of a package as it exists in Solr when installed.\n", "des": "This package contains Package Manager (CLI) implementation"}
{"index": 1212, "repo": "commons-math3-3.6.1", "code": "Package: interval\n\nClasses and Interfaces: \nInterface BinomialConfidenceInterval; // Interface to generate confidence intervals for a binomial proportion.\nClass AgrestiCoullInterval; // Implements the Agresti-Coull method for creating a binomial proportion confidence interval.\nClass ClopperPearsonInterval; // Implements the Clopper-Pearson method for creating a binomial proportion confidence interval.\nClass ConfidenceInterval; // Represents an interval estimate of a population parameter.\nClass IntervalUtils; // Factory methods to generate confidence intervals for a binomial proportion.\nClass NormalApproximationInterval; // Implements the normal approximation method for creating a binomial proportion confidence interval.\nClass WilsonScoreInterval; // Implements the Wilson score method for creating a binomial proportion confidence interval.\n", "des": "Classes providing binomial proportion confidence interval construction."}
{"index": 240, "repo": "nutch-2.4", "code": "Package: impl\n\nClasses and Interfaces: \nClass CrawlServiceImpl;\nClass NutchInstanceServiceImpl;\nClass NutchServiceImpl;\nClass SeedListServiceImpl;\n", "des": "Contains service implementation classes for Web UI"}
{"index": 804, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: shingle\n\nClasses and Interfaces: \nClass FixedShingleFilter; // A FixedShingleFilter constructs shingles (token n-grams) from a token stream.\nClass FixedShingleFilterFactory; // Factory for FixedShingleFilter Parameters are: shingleSize - how many tokens should be combined into each shingle (default: 2) tokenSeparator - how tokens should be joined together in the shingle (default: space) fillerToken - what should be added in place of stop words (default: _ )\nClass ShingleAnalyzerWrapper; // A ShingleAnalyzerWrapper wraps a ShingleFilter around another Analyzer.\nClass ShingleFilter; // A ShingleFilter constructs shingles (token n-grams) from a token stream.\nClass ShingleFilterFactory; // Factory for ShingleFilter.\n", "des": "Word n-gram filters."}
{"index": 3118, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: reflection\n\nClasses and Interfaces: \nInterface AttributeConverterDefinitionCollector;\nClass ClassLoaderAccessLazyImpl; // A ClassLoaderAccess implementation based on lazy access to MetadataBuildingOptions\nClass PersistentAttributeFilter;\n", "des": "Defines the capability to merge mapping information from both annotations and orm.xml sources into a unified set of metadata in the Hibernate commons-annotations model."}
{"index": 525, "repo": "commons-vfs2-2.9.0", "code": "Package: http5\n\nClasses and Interfaces: \nClass Http5FileContentInfoFactory; // Creates FileContentInfoFactory instances for http5 provider.\nClass Http5FileNameParser; // FileNameParser implementation for http5 provider, setting default port to 80.\nClass Http5FileObject<FS extends Http5FileSystem>; // A file object backed by Apache HttpComponents HttpClient v5.\nClass Http5FileProvider; // FileProvider implementation using HttpComponents HttpClient v5 library.\nClass Http5FileSystem; // http5 file system.\nClass Http5FileSystemConfigBuilder; // Configuration options builder utility for http5 provider.\n", "des": "The HTTP5 File Provider"}
{"index": 402, "repo": "commons-jexl3-3.3", "code": "Package: annotations\n\nClasses and Interfaces: \nAnnotation Type NoJexl; // Indicates JEXL Introspection should not see this element.\n", "des": "Provides annotation for introspection services."}
{"index": 3132, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: jndi\n\nSub Packages: \npackage jndi.spi; // The SPI contracts for Hibernate JNDI support\n\nClasses and Interfaces: \nClass JndiException; // An exception indicating trouble accessing JNDI\nClass JndiNameException; // Indicates a problem with a given JNDI name being deemed as not valid.\n", "des": "Support for JNDI within Hibernate"}
{"index": 618, "repo": "freemarker-2.3.32", "code": "Package: cache\n\nClasses and Interfaces: \nInterface CacheStorage; // Cache storage abstracts away the storage aspects of a cache - associating an object with a key, retrieval and removal via the key.\nInterface CacheStorageWithGetSize; // A cache storage that has a getSize() method for returning the current number of cache entries.\nInterface ConcurrentCacheStorage; // An optional interface for cache storage that knows whether it can be concurrently accessible without synchronization.\nInterface StatefulTemplateLoader; // Interface that can be implemented by TemplateLoader-s that maintain some sort of internal state (i.e.\nInterface TemplateLoader; // FreeMarker loads template \"files\" through objects that implement this interface, thus the templates need not be real files, and can come from any kind of data source (like classpath, servlet context, database, etc).\nClass AndMatcher; // Logical \"and\" operation among the given matchers.\nClass ByteArrayTemplateLoader; // A TemplateLoader that uses a Map with byte[] as its source of templates.\nClass ClassTemplateLoader; // A TemplateLoader that can load templates from the \"classpath\".\nClass ConditionalTemplateConfigurationFactory; // Returns the given TemplateConfiguration directly, or another TemplateConfigurationFactory's result, when the specified matcher matches the template source.\nClass FileExtensionMatcher; // Matches the file extension; unlike other matchers, by default case insensitive.\nClass FileNameGlobMatcher; // As opposed to PathGlobMatcher, it only compares the \"file name\" part (the part after the last /) of the source name with the given glob.\nClass FileTemplateLoader; // A TemplateLoader that uses files inside a specified directory as the source of templates.\nClass FirstMatchTemplateConfigurationFactory; // Returns the first non-null result of the child factories, ignoring all further child factories.\nClass MergingTemplateConfigurationFactory; // Returns the merged results of all the child factories.\nClass MruCacheStorage; // A cache storage that implements a two-level Most Recently Used cache.\nClass MultiTemplateLoader; // A TemplateLoader that uses a set of other loaders to load the templates.\nClass NotMatcher; // Logical \"not\" operation on the given matcher.\nClass NullCacheStorage; // A cache storage that doesn't store anything.\nClass OrMatcher; // Logical \"or\" operation among the given matchers.\n", "des": "Template loading and caching."}
{"index": 3138, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: persistent\n\nClasses and Interfaces: \nClass DeleteHandlerImpl;\nClass Helper;\nClass PersistentTableBulkIdStrategy; // This is a strategy that mimics temporary tables for databases which do not support temporary tables.\nClass UpdateHandlerImpl;\n", "des": "Package contains an implementation of MultiTableBulkIdStrategy based on the use of a persistent (ANSI SQL term) table to hold id values."}
{"index": 481, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: range\n\nClasses and Interfaces: \nInterface RangeTracker<PositionT>; // A RangeTracker is a thread-safe helper object for implementing dynamic work rebalancing in position-based BoundedSource.BoundedReader subclasses.\nClass ByteKey; // A class representing a key consisting of an array of bytes.\nClass ByteKeyRange; // A class representing a range of ByteKeys.\nClass ByteKeyRangeTracker; // A RangeTracker for ByteKeys in ByteKeyRanges.\nClass OffsetRange; // A restriction represented by a range of integers [from, to).\nClass OffsetRange.Coder; // A coder for OffsetRanges.\nClass OffsetRangeTracker; // A RangeTracker for non-negative positions of type long.\n", "des": "Provides thread-safe helpers for implementing dynamic work rebalancing in position-based bounded sources."}
{"index": 719, "repo": "commons-codec-1.16.0", "code": "Package: binary\n\nClasses and Interfaces: \nClass Base16; // Provides Base16 encoding and decoding.\nClass Base16InputStream; // Provides Base16 encoding and decoding in a streaming fashion (unlimited size).\nClass Base16OutputStream; // Provides Hex encoding and decoding in a streaming fashion (unlimited size).\nClass Base32; // Provides Base32 encoding and decoding as defined by RFC 4648.\nClass Base32InputStream; // Provides Base32 encoding and decoding in a streaming fashion (unlimited size).\nClass Base32OutputStream; // Provides Base32 encoding and decoding in a streaming fashion (unlimited size).\nClass Base64; // Provides Base64 encoding and decoding as defined by RFC 2045.\nClass Base64InputStream; // Provides Base64 encoding and decoding in a streaming fashion (unlimited size).\nClass Base64OutputStream; // Provides Base64 encoding and decoding in a streaming fashion (unlimited size).\nClass BaseNCodec; // Abstract superclass for Base-N encoders and decoders.\nClass BaseNCodecInputStream; // Abstract superclass for Base-N input streams.\nClass BaseNCodecOutputStream; // Abstract superclass for Base-N output streams.\nClass BinaryCodec; // Converts between byte arrays and strings of \"0\"s and \"1\"s.\nClass CharSequenceUtils; // Operations on CharSequence that are null safe.\nClass Hex; // Converts hexadecimal Strings.\nClass StringUtils; // Converts String to and from bytes using the encodings required by the Java specification.\n", "des": "Base64, Base32, Binary, and Hexadecimal String encoding and decoding."}
{"index": 1406, "repo": "spring-boot-actuator-3.1.1", "code": "Package: ldap\n\nClasses and Interfaces: \npublic class LdapHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for configured LDAP server(s).\n", "des": "Actuator support for LDAP."}
{"index": 1471, "repo": "spring-boot-configuration-processor-3.1.1", "code": "Package: fieldvalues\n\nSub Packages: \npackage fieldvalues.javac; // Field value parsing for the standard Java compiler.\n\nClasses and Interfaces: \n@FunctionalInterface public interface FieldValuesParser; // Parser which can be used to obtain the field values from an TypeElement.\n", "des": "Abstraction for field value parsing."}
{"index": 3190, "repo": "tomcat-api-10.1", "code": "Package: classfile\n\nClasses and Interfaces: \nClass AnnotationElementValue;\nClass AnnotationEntry; // Represents one annotation in the annotation table\nClass Annotations; // base class for annotations\nClass ArrayElementValue;\nClass ClassElementValue;\nClass ClassParser; // Wrapper class that parses a given Java .class file.\nClass Constant; // Abstract superclass for classes to represent the different constant types in the constant pool of a class file.\nClass ConstantClass; // This class is derived from the abstract Constant and represents a reference to a (external) class.\nClass ConstantDouble; // This class is derived from the abstract Constant and represents a reference to a Double object.\nClass ConstantFloat; // This class is derived from the abstract Constant and represents a reference to a float object.\nClass ConstantInteger; // This class is derived from the abstract Constant and represents a reference to an int object.\nClass ConstantLong; // This class is derived from the abstract Constant and represents a reference to a long object.\nClass ConstantPool; // This class represents the constant pool, i.e., a table of constants, of a parsed classfile.\nClass ConstantUtf8; // Extends the abstract Constant to represent a reference to a UTF-8 encoded string.\nClass ElementValue; // The element_value structure is documented at https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-4.html#jvms-4.7.16.1\nClass ElementValuePair; // An annotation's element value pair.\nClass EnumElementValue;\nClass JavaClass; // Represents a Java class, i.e., the data structures, constant pool, fields, methods and commands contained in a Java .class file.\nClass SimpleElementValue;\nClass ClassFormatException; // Thrown when the BCEL attempts to read a class file and determines that a class is malformed or otherwise cannot be interpreted as a class file.\n", "des": "This package contains the classes that describe the structure of a Java class file and a class file parser."}
{"index": 1581, "repo": "spring-security-oauth2-client-6.1.2", "code": "Package: userinfo\n\nClasses and Interfaces: \npublic class OidcReactiveOAuth2UserService extends Object implements ReactiveOAuth2UserService<OidcUserRequest,org.springframework.security.oauth2.core.oidc.user.OidcUser>; // An implementation of an ReactiveOAuth2UserService that supports OpenID Connect 1.0 Provider's.\npublic class OidcUserRequest extends OAuth2UserRequest; // Represents a request the OidcUserService uses when initiating a request to the UserInfo Endpoint.\npublic class OidcUserService extends Object implements OAuth2UserService<OidcUserRequest,org.springframework.security.oauth2.core.oidc.user.OidcUser>; // An implementation of an OAuth2UserService that supports OpenID Connect 1.0 Provider's.\n", "des": "Classes and interfaces providing support to the client for initiating requests to the OpenID Connect 1.0 Provider's UserInfo Endpoint."}
{"index": 1541, "repo": "spring-context-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \n@Configuration(proxyBeanMethods=false) public abstract class AbstractAsyncConfiguration extends Object implements ImportAware; // Abstract base Configuration class providing common structure for enabling Spring's asynchronous method execution capability.\npublic class AnnotationAsyncExecutionInterceptor extends org.springframework.aop.interceptor.AsyncExecutionInterceptor; // Specialization of AsyncExecutionInterceptor that delegates method execution to an Executor based on the Async annotation.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Reflective public @interface Async; // Annotation that marks a method as a candidate for asynchronous execution.\npublic class AsyncAnnotationAdvisor extends org.springframework.aop.support.AbstractPointcutAdvisor implements org.springframework.beans.factory.BeanFactoryAware; // Advisor that activates asynchronous method execution through the Async annotation.\npublic class AsyncAnnotationBeanPostProcessor extends org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor; // Bean post-processor that automatically applies asynchronous invocation behavior to any bean that carries the Async annotation at class or method-level by adding a corresponding AsyncAnnotationAdvisor to the exposed proxy (either an existing AOP proxy or a newly generated proxy that implements all the target's interfaces).\npublic class AsyncConfigurationSelector extends AdviceModeImportSelector<EnableAsync>; // Selects which implementation of AbstractAsyncConfiguration should be used based on the value of EnableAsync.mode() on the importing @Configuration class.\npublic interface AsyncConfigurer; // Interface to be implemented by @Configuration classes annotated with @EnableAsync that wish to customize the Executor instance used when processing async method invocations or the AsyncUncaughtExceptionHandler instance used to process exception thrown from async method with void return type.\n@Deprecated(since=\"6.0\") public class AsyncConfigurerSupport extends Object implements AsyncConfigurer;\n@Deprecated(since=\"6.0\") public class AsyncResult<V> extends Object implements org.springframework.util.concurrent.ListenableFuture<V>;\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(AsyncConfigurationSelector.class) public @interface EnableAsync; // Enables Spring's asynchronous method execution capability, similar to functionality found in Spring's <task:*> XML namespace.\n", "des": "Annotation support for asynchronous method execution."}
{"index": 568, "repo": "hadoop-common-3.3.4", "code": "Package: net\n\nClasses and Interfaces: \nInterface DNSToSwitchMapping; // An interface that must be implemented to allow pluggable DNS-name/IP-address to RackID resolvers.\nInterface DomainNameResolver; // This interface provides methods for the failover proxy to get IP addresses of the associated servers (NameNodes, RBF routers etc).\nInterface InnerNode.Factory<N extends org.apache.hadoop.net.InnerNode>;\nClass AbstractDNSToSwitchMapping; // This is a base class for DNS to Switch mappings.\nClass CachedDNSToSwitchMapping; // A cached implementation of DNSToSwitchMapping that takes an raw DNSToSwitchMapping and stores the resolved network location in a cache.\nClass DNSDomainNameResolver; // DNSDomainNameResolver wraps up the default DNS service for forward/reverse DNS lookup.\nClass InnerNodeImpl; // InnerNode represents a switch/router of a data center or rack.\nClass InnerNodeImpl.Factory;\nClass ScriptBasedMapping; // This class implements the DNSToSwitchMapping interface using a script configured via the CommonConfigurationKeysPublic.NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY option.\nClass ScriptBasedMapping.RawScriptBasedMapping; // This is the uncached script mapping that is fed into the cache managed by the superclass CachedDNSToSwitchMapping\nClass SocksSocketFactory; // Specialized SocketFactory to create sockets with a SOCKS proxy\nClass StandardSocketFactory; // Specialized SocketFactory to create sockets with a SOCKS proxy\nClass TableMapping; // Simple DNSToSwitchMapping implementation that reads a 2 column text file.\nClass ConnectTimeoutException; // Thrown by NetUtils.connect(java.net.Socket, java.net.SocketAddress, int) if it times out while connecting to the remote host.\nClass NetworkTopology.InvalidTopologyException;\n", "des": "Network-related classes."}
{"index": 3752, "repo": "lucene-facet-9.7.0", "code": "Package: facet\n\nSub Packages: \npackage facet.facetset; // Provides FacetSets faceting capabilities which allows users to facet on high dimensional field values.\npackage facet.range; // Provides range faceting capabilities.\npackage facet.rangeonrange; // Provides range on range faceting capabilities.\npackage facet.sortedset; // Provides faceting capabilities over facets that were indexed with SortedSetDocValuesFacetField.\npackage facet.taxonomy; // Taxonomy of Categories.\n\nClasses and Interfaces: \nClass DrillDownQuery; // A Query for drill-down over facet categories.\nClass DrillSideways; // Computes drill down and sideways counts for the provided DrillDownQuery.\nClass DrillSideways.ConcurrentDrillSidewaysResult<R>; // Result of a concurrent drill sideways search, including the Facets and TopDocs.\nClass DrillSideways.DrillSidewaysResult; // Result of a drill sideways search, including the Facets and TopDocs.\nClass FacetCountsWithFilterQuery; // Base class for facet counts.\nClass FacetField; // Add an instance of this to your Document for every facet label.\nClass FacetQuery; // A term Query over a FacetField.\nClass FacetResult; // Counts or aggregates for a single dimension.\nClass Facets; // Common base class for all facets implementations.\nClass FacetsCollector; // Collects hits for subsequent faceting.\nClass FacetsCollector.MatchingDocs; // Holds the documents that were matched in the LeafReaderContext.\nClass FacetsCollectorManager; // A CollectorManager implementation which produces FacetsCollector and produces a merged FacetsCollector.\nClass FacetsConfig; // Records per-dimension configuration.\nClass FacetsConfig.DimConfig; // Holds the configuration for one dimension\nClass FacetUtils; // Utility class with a single method for getting a DocIdSetIterator that skips deleted docs\nClass LabelAndValue; // Single label and its value, usually contained in a FacetResult.\nClass LongValueFacetCounts; // Facets implementation that computes counts for all unique long values, more efficiently counting small values (0-1023) using an int array, and switching to a HashMap for values above 1023.\nClass MultiDoubleValues; // Per-segment, per-document double values, which can be calculated at search-time.\n", "des": "Faceted search."}
{"index": 2134, "repo": "spring-context-support-6.0.11", "code": "Package: quartz\n\nClasses and Interfaces: \npublic class AdaptableJobFactory extends Object implements JobFactory; // JobFactory implementation that supports Runnable objects as well as standard Quartz Job instances.\npublic class CronTriggerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<CronTrigger>, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // A Spring FactoryBean for creating a Quartz CronTrigger instance, supporting bean-style usage for trigger configuration.\npublic class DelegatingJob extends Object implements Job; // Simple Quartz Job adapter that delegates to a given Runnable instance.\npublic class JobDetailFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobDetail>, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // A Spring FactoryBean for creating a Quartz JobDetail instance, supporting bean-style usage for JobDetail configuration.\npublic class JobMethodInvocationFailedException extends org.springframework.core.NestedRuntimeException; // Unchecked exception that wraps an exception thrown from a target method.\npublic class LocalDataSourceJobStore extends JobStoreCMT; // Subclass of Quartz's JobStoreCMT class that delegates to a Spring-managed DataSource instead of using a Quartz-managed JDBC connection pool.\npublic class LocalTaskExecutorThreadPool extends Object implements ThreadPool; // Quartz ThreadPool adapter that delegates to a Spring-managed Executor instance, specified on SchedulerFactoryBean.\npublic class MethodInvokingJobDetailFactoryBean extends org.springframework.beans.support.ArgumentConvertingMethodInvoker implements org.springframework.beans.factory.FactoryBean<JobDetail>, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // FactoryBean that exposes a JobDetail object which delegates job execution to a specified (static or non-static) method.\npublic static class MethodInvokingJobDetailFactoryBean.MethodInvokingJob extends QuartzJobBean; // Quartz Job implementation that invokes a specified method.\n", "des": "Support classes for the open source scheduler Quartz, allowing to set up Quartz Schedulers, JobDetails and Triggers as beans in a Spring context."}
{"index": 483, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: options\n\nClasses and Interfaces: \nInterface ApplicationNameOptions; // Options that allow setting the application name.\nInterface DefaultValueFactory<T>; // An interface used with the Default.InstanceFactory annotation to specify the class that will be an instance factory to produce default values for a given getter on PipelineOptions.\nInterface ExecutorOptions; // Options for configuring the ScheduledExecutorService used throughout the Java runtime.\nInterface ExperimentalOptions; // Apache Beam provides a number of experimental features that can be enabled with this flag.\nInterface FileStagingOptions; // File staging related options.\nInterface ManualDockerEnvironmentOptions; // Pipeline options to tune DockerEnvironment.\nInterface PipelineOptions; // PipelineOptions are used to configure Pipelines.\nInterface PipelineOptionsRegistrar; // PipelineOptions creators have the ability to automatically have their PipelineOptions registered with this SDK by creating a ServiceLoader entry and a concrete implementation of this interface.\nInterface PortablePipelineOptions; // Pipeline options common to all portable runners.\nInterface RemoteEnvironmentOptions; // Options that are used to control configuration of the remote environment.\nInterface SdkHarnessOptions; // Options that are used to control configuration of the SDK harness.\nInterface SdkHarnessOptions.MaxCacheMemoryUsageMb; // Specifies the maximum amount of memory to use within the current SDK harness instance.\nInterface StreamingOptions; // Options used to configure streaming.\nInterface ValueProvider<T>; // A ValueProvider abstracts the notion of fetching a value that may or may not be currently available.\nClass DefaultPipelineOptionsRegistrar; // A PipelineOptionsRegistrar containing the PipelineOptions subclasses available by default.\nClass ExecutorOptions.ScheduledExecutorServiceFactory; // Returns the default ScheduledExecutorService to use within the Apache Beam SDK.\nClass ManualDockerEnvironmentOptions.Options; // Register the ManualDockerEnvironmentOptions.\nClass PipelineOptions.AtomicLongFactory; // DefaultValueFactory which supplies an ID that is guaranteed to be unique within the given process.\nClass PipelineOptions.DirectRunner; // A DefaultValueFactory that obtains the class of the DirectRunner if it exists on the classpath, and throws an exception otherwise.\nClass PipelineOptions.JobNameFactory; // Returns a normalized job name constructed from ApplicationNameOptions.getAppName(), the local system user name (if available), the current time, and a random integer.\n", "des": "Defines PipelineOptions for configuring pipeline execution."}
{"index": 2166, "repo": "wicket-core-10.0.0-M1", "code": "Package: cookies\n\nClasses and Interfaces: \npublic class CookieDefaults extends Object implements org.apache.wicket.util.io.IClusterable; // This class provides default values that are used by CookieUtils class when it creates cookies.\npublic static enum CookieDefaults.SameSite extends Enum<CookieDefaults.SameSite>;\npublic class CookieUtils extends Object; // Helper class to simplify Cookie handling.\n", "des": "Persistence support for forms."}
{"index": 2670, "repo": "spring-data-jdbc-3.1.2", "code": "Package: query\n\nClasses and Interfaces: \npublic abstract class AbstractJdbcQuery extends Object implements RepositoryQuery; // Base class for queries based on a repository method.\nprotected static class AbstractJdbcQuery.ConvertingRowMapper<T> extends Object implements RowMapper<Object>; // Delegating RowMapper that reads a row into T and converts it afterwards into Object.\npublic static interface AbstractJdbcQuery.RowMapperFactory; // Factory to create a RowMapper for a given class.\npublic class JdbcQueryMethod extends QueryMethod; // QueryMethod implementation that implements a method by executing the query from a Query annotation on that method.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Modifying; // Indicates a method should be regarded as modifying query.\npublic class PartTreeJdbcQuery extends AbstractJdbcQuery; // An AbstractJdbcQuery implementation based on a PartTree.\n@Retention(RUNTIME) @Target(METHOD) @Documented public @interface Query; // Annotation to provide SQL statements that will get used for executing the method.\npublic class StringBasedJdbcQuery extends AbstractJdbcQuery; // A query to be executed based on a repository method, it's annotated SQL query and the arguments provided to the method.\n", "des": "Query derivation mechanism for JDBC specific repositories."}
{"index": 3710, "repo": "solr-core-9.3.0", "code": "Package: fst\n\nClasses and Interfaces: \nClass AnalyzingInfixLookupFactory; // Factory for AnalyzingInfixSuggester\nClass AnalyzingLookupFactory; // Factory for AnalyzingSuggester\nClass BlendedInfixLookupFactory; // Factory for BlendedInfixLookupFactory\nClass FreeTextLookupFactory; // LookupFactory implementation for FreeTextSuggester\nClass FSTLookupFactory; // Factory for FSTCompletionLookup\nClass FuzzyLookupFactory; // Factory for FuzzySuggester\nClass WFSTLookupFactory; // Factory for WFSTCompletionLookup\n", "des": "Factories for FST and Analyzing based Suggesters"}
{"index": 2068, "repo": "spring-webmvc-6.0.11", "code": "Package: handler\n\nClasses and Interfaces: \npublic abstract class AbstractDetectingUrlHandlerMapping extends AbstractUrlHandlerMapping; // Abstract implementation of the HandlerMapping interface, detecting URL mappings for handler beans through introspection of all defined beans in the application context.\npublic abstract class AbstractHandlerExceptionResolver extends Object implements HandlerExceptionResolver, org.springframework.core.Ordered; // Abstract base class for HandlerExceptionResolver implementations.\npublic abstract class AbstractHandlerMapping extends org.springframework.web.context.support.WebApplicationObjectSupport implements HandlerMapping, org.springframework.core.Ordered, org.springframework.beans.factory.BeanNameAware; // Abstract base class for HandlerMapping implementations.\npublic abstract class AbstractHandlerMethodExceptionResolver extends AbstractHandlerExceptionResolver; // Abstract base class for HandlerExceptionResolver implementations that support handling exceptions from handlers of type HandlerMethod.\npublic abstract class AbstractHandlerMethodMapping<T> extends AbstractHandlerMapping implements org.springframework.beans.factory.InitializingBean; // Abstract base class for HandlerMapping implementations that define a mapping between a request and a HandlerMethod.\npublic abstract class AbstractUrlHandlerMapping extends AbstractHandlerMapping implements MatchableHandlerMapping; // Abstract base class for URL-mapped HandlerMapping implementations.\npublic class BeanNameUrlHandlerMapping extends AbstractDetectingUrlHandlerMapping; // Implementation of the HandlerMapping interface that maps from URLs to beans with names that start with a slash (\"/\"), similar to how Struts maps URLs to action names.\npublic class ConversionServiceExposingInterceptor extends Object implements HandlerInterceptor; // Interceptor that places the configured ConversionService in request scope so it's available during request processing.\npublic class DispatcherServletWebRequest extends org.springframework.web.context.request.ServletWebRequest; // ServletWebRequest subclass that is aware of DispatcherServlet's request context, such as the Locale determined by the configured LocaleResolver.\npublic class HandlerExceptionResolverComposite extends Object implements HandlerExceptionResolver, org.springframework.core.Ordered; // A HandlerExceptionResolver that delegates to a list of other HandlerExceptionResolvers.\npublic class HandlerMappingIntrospector extends Object implements org.springframework.web.cors.CorsConfigurationSource, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // Helper class to get information from the HandlerMapping that would serve a specific request.\n", "des": "Provides standard HandlerMapping implementations, including abstract base classes for custom implementations."}
{"index": 743, "repo": "spring-data-solr-4.3.15", "code": "Package: support\n\nClasses and Interfaces: \nClass MappingSolrEntityInformation<T,ID>; // Solr specific implementation of AbstractEntityInformation\nClass SimpleSolrRepository<T,ID extends Serializable>; // Solr specific repository implementation.\nClass SolrEntityInformationCreatorImpl;\nClass SolrRepositoryFactory; // Factory to create SolrRepository\nClass SolrRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable>; // Spring FactoryBean implementation to ease container based configuration for XML namespace and JavaConfig.\n", "des": "Repository support classes for bootstrapping application context."}
{"index": 890, "repo": "commons-jcs3-core-3.1", "code": "Package: jcs3\n\nSub Packages: \npackage jcs3.access; // Contains classes for accessing the cache.\npackage jcs3.auxiliary; // Root package for auxiliary caches.\npackage jcs3.engine; // Interfaces used by the core and the auxiliary caches.\n\nClasses and Interfaces: \nClass JCS; // Simple class for using JCS.\n", "des": "Contains the class JCS which provides a simple interface for clients to use JCS."}
{"index": 1207, "repo": "commons-math3-3.6.1", "code": "Package: descriptive\n\nSub Packages: \npackage descriptive.moment; // Summary statistics based on moments.\npackage descriptive.rank; // Summary statistics based on ranks.\npackage descriptive.summary; // Other summary statistics.\n\nClasses and Interfaces: \nInterface StatisticalMultivariateSummary; // Reporting interface for basic multivariate statistics.\nInterface StatisticalSummary; // Reporting interface for basic univariate statistics.\nInterface StorelessUnivariateStatistic; // Extends the definition of UnivariateStatistic with StorelessUnivariateStatistic.increment(double) and StorelessUnivariateStatistic.incrementAll(double[]) methods for adding values and updating internal state.\nInterface UnivariateStatistic; // Base interface implemented by all statistics.\nInterface WeightedEvaluation; // Weighted evaluation for statistics.\nClass AbstractStorelessUnivariateStatistic; // Abstract implementation of the StorelessUnivariateStatistic interface.\nClass AbstractUnivariateStatistic; // Abstract base class for all implementations of the UnivariateStatistic interface.\nClass AggregateSummaryStatistics; // An aggregator for SummaryStatistics from several data sets or data set partitions.\nClass DescriptiveStatistics; // Maintains a dataset of values of a single variable and computes descriptive statistics based on stored data.\nClass MultivariateSummaryStatistics; // Computes summary statistics for a stream of n-tuples added using the addValue method.\nClass StatisticalSummaryValues; // Value object representing the results of a univariate statistical summary.\nClass SummaryStatistics; // Computes summary statistics for a stream of data values added using the addValue method.\nClass SynchronizedDescriptiveStatistics; // Implementation of DescriptiveStatistics that is safe to use in a multithreaded environment.\nClass SynchronizedMultivariateSummaryStatistics; // Implementation of MultivariateSummaryStatistics that is safe to use in a multithreaded environment.\nClass SynchronizedSummaryStatistics; // Implementation of SummaryStatistics that is safe to use in a multithreaded environment.\n", "des": "Generic univariate summary statistic objects."}
{"index": 3404, "repo": "commons-imaging-1.0-alpha3", "code": "Package: rgbe\n\nClasses and Interfaces: \nClass RgbeImageParser; // Parser for Radiance HDR images\nClass RgbeImagingParameters; // Rgbe format parameters.\n", "des": "The Radiance HDR image format."}
{"index": 1941, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: integration\n\nClasses and Interfaces: \n@AutoConfiguration(after={DataSourceAutoConfiguration.class,JmxAutoConfiguration.class,TaskSchedulingAutoConfiguration.class}) @ConditionalOnClass(org.springframework.integration.config.EnableIntegration.class) @EnableConfigurationProperties({IntegrationProperties.class,JmxProperties.class}) public class IntegrationAutoConfiguration extends Object; // Auto-configuration for Spring Integration.\n@Configuration(proxyBeanMethods=false) @ConditionalOnMissingBean(org.springframework.integration.config.IntegrationComponentScanRegistrar.class) @Import(org.springframework.boot.autoconfigure.integration.IntegrationAutoConfigurationScanRegistrar.class) protected static class IntegrationAutoConfiguration.IntegrationComponentScanConfiguration extends Object; // Integration component scan configuration.\n@Configuration(proxyBeanMethods=false) @EnableIntegration protected static class IntegrationAutoConfiguration.IntegrationConfiguration extends Object; // Basic Spring Integration configuration.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.integration.jdbc.store.JdbcMessageStore.class) @ConditionalOnSingleCandidate(javax.sql.DataSource.class) @Conditional(org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration.OnIntegrationDatasourceInitializationCondition.class) protected static class IntegrationAutoConfiguration.IntegrationJdbcConfiguration extends Object; // Integration JDBC configuration.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.integration.jmx.config.EnableIntegrationMBeanExport.class) @ConditionalOnMissingBean(value=org.springframework.integration.monitor.IntegrationMBeanExporter.class, search=CURRENT) @ConditionalOnBean(javax.management.MBeanServer.class) @ConditionalOnProperty(prefix=\"spring.jmx\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) protected static class IntegrationAutoConfiguration.IntegrationJmxConfiguration extends Object; // Spring Integration JMX configuration.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.integration.config.EnableIntegrationManagement.class) @ConditionalOnMissingBean(value=org.springframework.integration.config.IntegrationManagementConfigurer.class, name=\"integrationManagementConfigurer\", search=CURRENT) protected static class IntegrationAutoConfiguration.IntegrationManagementConfiguration extends Object; // Integration management configuration.\n", "des": "Auto-configuration for Spring Integration."}
{"index": 1829, "repo": "spring-test-6.0.11", "code": "Package: client\n\nSub Packages: \npackage client.reactive; // Mock implementations of reactive HTTP client contracts.\n\nClasses and Interfaces: \npublic class MockClientHttpRequest extends MockHttpOutputMessage implements org.springframework.http.client.ClientHttpRequest; // Mock implementation of ClientHttpRequest.\npublic class MockClientHttpResponse extends MockHttpInputMessage implements org.springframework.http.client.ClientHttpResponse; // Mock implementation of ClientHttpResponse.\n", "des": "Mock implementations of client-side HTTP abstractions."}
{"index": 2373, "repo": "pulsar-client-api-3.0.0", "code": "Package: schema\n\nClasses and Interfaces: \n@Public @Stable public class Field extends Object; // A field in a record, consisting of a field name, index, and Schema for the field value.\n@Public @Stable public interface FieldSchemaBuilder<T extends FieldSchemaBuilder<T>>; // Build a field for a record.\npublic interface GenericObject; // This is an abstraction over the logical value that is store into a Message.\n@Public @Stable public interface GenericRecord extends GenericObject; // An interface represents a message with schema.\n@Public @Stable public interface GenericRecordBuilder; // Generic Record Builder to build a GenericRecord.\n@Public @Stable public interface GenericSchema<T extends GenericRecord> extends Schema<T>; // A schema that serializes and deserializes between GenericRecord and bytes.\npublic interface KeyValueSchema<K,V> extends Schema<KeyValue<K,V>>; // This interface models a Schema that is composed of two parts.\n@Public @Stable public interface RecordSchemaBuilder; // Building the schema for a GenericRecord.\n@Public @Stable public interface SchemaBuilder; // Builder to build schema.\n@Public @Stable public interface SchemaDefinition<T>; // Interface for schema definition.\n@Public @Stable public interface SchemaDefinitionBuilder<T>; // Builder to build schema definition SchemaDefinition.\n@Private @Stable public interface SchemaInfoProvider; // Schema Provider.\n@Public @Stable public interface SchemaReader<T>; // Deserialize messages from bytes.\n@Public @Stable @FunctionalInterface public interface SchemaWriter<T>; // Serialize messages into bytes.\n", "des": "Schema definitions for Pulsar Client API."}
{"index": 802, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: ro\n\nClasses and Interfaces: \nClass RomanianAnalyzer; // Analyzer for Romanian.\n", "des": "Analyzer for Romanian."}
{"index": 579, "repo": "commons-collections-3.2.2", "code": "Package: comparators\n\nClasses and Interfaces: \nClass BooleanComparator; // A Comparator for Boolean objects that can sort either true or false first.\nClass ComparableComparator; // A Comparator that compares Comparable objects.\nClass ComparatorChain; // A ComparatorChain is a Comparator that wraps one or more Comparators in sequence.\nClass FixedOrderComparator; // A Comparator which imposes a specific order on a specific set of Objects.\nClass NullComparator; // A Comparator that will compare nulls to be either lower or higher than other objects.\nClass ReverseComparator; // Reverses the order of another comparator by reversing the arguments to its compare method.\nClass TransformingComparator; // Decorates another Comparator with transformation behavior.\n", "des": "This package contains implementations of the Comparator interface."}
{"index": 2324, "repo": "spring-boot-3.1.1", "code": "Package: reactor\n\nClasses and Interfaces: \npublic class DebugAgentEnvironmentPostProcessor extends Object implements EnvironmentPostProcessor, org.springframework.core.Ordered; // EnvironmentPostProcessor to enable the Reactor Debug Agent if available.\n", "des": "Support classes for Reactor integration."}
{"index": 1256, "repo": "spring-core-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class ClassHintUtils extends Object; // Utilities for core hint inference on Spring-managed classes, specifically for proxy types such as interface-based JDK proxies and CGLIB-generated subclasses which need proxy/reflection hints.\npublic class FilePatternResourceHintsRegistrar extends Object; // Register the necessary resource hints for loading files from the classpath.\n", "des": "Convenience classes for using runtime hints."}
{"index": 2201, "repo": "spring-data-commons-3.1.2", "code": "Package: crossstore\n\nClasses and Interfaces: \npublic interface ChangeSet; // Interface representing the set of changes in an entity.\npublic interface ChangeSetBacked; // Interface introduced to objects exposing ChangeSet information\npublic class ChangeSetBackedTransactionSynchronization extends Object implements TransactionSynchronization;\npublic interface ChangeSetPersister<K>; // Interface to be implemented by classes that can synchronize between data stores and ChangeSets.\npublic static class ChangeSetPersister.NotFoundException extends Exception; // Exception thrown in alternate control flow if getPersistentState finds no entity data.\npublic class HashMapChangeSet extends Object implements ChangeSet; // Simple ChangeSet implementation backed by a HashMap.\n", "des": "Support for cross-store persistence."}
{"index": 1094, "repo": "hbase-server-3.0.0-alpha-4", "code": "Package: hfile\n\nSub Packages: \npackage hfile.bucket; // Provides BucketCache, an implementation of BlockCache.\n\nClasses and Interfaces: \nInterface BlockCache; // Block cache interface.\nInterface BlockCompressedSizePredicator; // Allows for defining different compression rate predicates on its implementing classes.\nInterface BlockIndexChunk;\nInterface Cacheable; // Cacheable is an interface that allows for an object to be cached.\nInterface CacheableDeserializer<T extends Cacheable>; // Interface for a deserializer.\nInterface CachedBlock;\nInterface FirstLevelBlockCache; // In-memory BlockCache that may be backed by secondary layer(s).\nInterface HFile.CachingBlockReader; // An abstraction used by the block index.\nInterface HFile.Reader; // An interface used by clients to open and iterate an HFile.\nInterface HFile.Writer; // API required to write an HFile\nInterface HFileDataBlockEncoder; // Controls what kind of data block encoding is used.\nInterface HFileIndexBlockEncoder; // Controls what kind of index block encoding is used.\nInterface HFileIndexBlockEncoder.EncodedSeeker;\nInterface HFileScanner; // A scanner allows you to position yourself within a HFile and scan through it.\nInterface InlineBlockWriter; // A way to write \"inline\" blocks into an HFile.\nInterface ResizableBlockCache; // BlockCache which is resizable.\nClass AgeSnapshot; // Snapshot of block cache age in cache.\nClass BlockCacheFactory;\nClass BlockCacheKey; // Cache Key for use with implementations of BlockCache\nClass BlockCacheUtil; // Utilty for aggregating counts in CachedBlocks and toString/toJSON CachedBlocks and BlockCaches.\nClass BlockCacheUtil.CachedBlocksByFile; // Use one of these to keep a running account of cached blocks by file.\nClass BlockWithScanInfo; // BlockWithScanInfo is wrapper class for HFileBlock with other attributes.\nClass BloomFilterMetrics;\nClass CacheableDeserializerIdManager; // This class is used to manage the identifiers for CacheableDeserializer.\nClass CacheConfig; // Stores all of the cache objects and configuration for a single HFile.\nClass CacheStats; // Class that implements cache metrics.\nClass ChecksumUtil; // Utility methods to compute and validate checksums.\n", "des": "Provides implementations of HFile and HFile BlockCache."}
{"index": 51, "repo": "ignite-core-2.15.0", "code": "Package: lru\n\nClasses and Interfaces: \nInterface LruEvictionPolicyMBean; // MBean for LRU eviction policy.\nClass LruEvictionPolicy<K,V>; // Eviction policy based on Least Recently Used (LRU) algorithm and supports batch eviction.\nClass LruEvictionPolicyFactory<K,V>; // Factory class for LruEvictionPolicy.\n", "des": "Contains cache LRU eviction policy implementations."}
{"index": 1093, "repo": "hbase-server-3.0.0-alpha-4", "code": "Package: coprocessor\n\nClasses and Interfaces: \nInterface BulkLoadObserver; // Coprocessors implement this interface to observe and mediate bulk load operations.\nInterface CoprocessorHost.ObserverGetter<C,O>; // Implementations defined function to get an observer of type O from a coprocessor of type C.\nInterface CoprocessorService; // Since 2.0.\nInterface EndpointObserver; // Coprocessors implement this interface to observe and mediate endpoint invocations on a region.\nInterface HasMasterServices; // Since 2.0.0 to be removed in 3.0.0.\nInterface HasRegionServerServices; // Since 2.0.0 to be removed in 3.0.0.\nInterface MasterCoprocessor;\nInterface MasterCoprocessorEnvironment;\nInterface MasterObserver; // Defines coprocessor hooks for interacting with operations on the HMaster process.\nInterface ObserverContext<E extends CoprocessorEnvironment>; // Carries the execution state for a given invocation of an Observer coprocessor (RegionObserver, MasterObserver, or WALObserver) method.\nInterface RegionCoprocessor;\nInterface RegionCoprocessorEnvironment;\nInterface RegionObserver; // Coprocessors implement this interface to observe and mediate client actions on the region.\nInterface RegionServerCoprocessor;\nInterface RegionServerCoprocessorEnvironment;\nInterface RegionServerObserver; // Defines coprocessor hooks for interacting with operations on the HRegionServer process.\nInterface WALCoprocessor; // WALCoprocessor don't support loading services using Coprocessor.getServices().\nInterface WALCoprocessorEnvironment;\nInterface WALObserver; // It's provided to have a way for coprocessors to observe, rewrite, or skip WALEdits as they are being written to the WAL.\nClass BaseEnvironment<C extends Coprocessor>; // Encapsulation of the environment of each coprocessor\nClass CoprocessorHost<C extends Coprocessor,E extends CoprocessorEnvironment<C>>; // Provides the common setup framework and runtime services for coprocessor invocation from HBase services.\nClass MetaTableMetrics; // A coprocessor that collects metrics from meta table.\nClass MetricsCoprocessor; // Utility class for tracking metrics for various types of coprocessors.\n", "des": "Table of Contents"}
{"index": 1483, "repo": "tribuo-core-4.3.1", "code": "Package: hash\n\nClasses and Interfaces: \npublic final class HashCodeHasher extends Hasher; // Hashes names using String.hashCode().\npublic static final class HashCodeHasher.HashCodeHasherProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // Provenance for the HashCodeHasher.\npublic final class HashedFeatureMap extends ImmutableFeatureMap; // A FeatureMap used by the HashingTrainer to provide feature name hashing and guarantee that the Model does not contain feature name information, but still works with unhashed features names.\npublic abstract class Hasher extends Object implements com.oracle.labs.mlrg.olcut.config.Configurable, com.oracle.labs.mlrg.olcut.provenance.Provenancable<com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance>, Serializable, ProtoSerializable<org.tribuo.protos.core.HasherProto>; // An abstract base class for hash functions used to hash the names of features.\npublic class HashingOptions extends Object implements com.oracle.labs.mlrg.olcut.config.Options; // An Options implementation which provides CLI arguments for the model hashing functionality.\npublic static enum HashingOptions.ModelHashingType extends Enum<HashingOptions.ModelHashingType>; // Supported types of hashes in CLI programs.\npublic final class HashingTrainer<T extends Output<T>> extends Object implements Trainer<T>; // A Trainer which hashes the Dataset before the Model is produced.\npublic final class MessageDigestHasher extends Hasher; // Hashes Strings using the supplied MessageDigest type.\npublic static final class MessageDigestHasher.MessageDigestHasherProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // Provenance for MessageDigestHasher.\npublic final class ModHashCodeHasher extends Hasher; // Hashes names using String.hashCode(), then reduces the dimension.\npublic static final class ModHashCodeHasher.ModHashCodeHasherProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // Provenance for the ModHashCodeHasher.\n", "des": "Provides the base interface and implementations of the Model hashing which obscures the feature names stored in a model."}
{"index": 1068, "repo": "hadoop-yarn-common-3.3.6", "code": "Package: pb\n\nClasses and Interfaces: \nClass PlacementConstraintFromProtoConverter; // PlacementConstraintFromProtoConverter generates an PlacementConstraint.AbstractConstraint given a YarnProtos.PlacementConstraintProto.\nClass PlacementConstraintToProtoConverter; // PlacementConstraintToProtoConverter generates a YarnProtos.PlacementConstraintProto given a PlacementConstraint.AbstractConstraint.\n", "des": "API related to protobuf objects that are not backed by PBImpl classes."}
{"index": 2277, "repo": "spring-data-elasticsearch-5.1.2", "code": "Package: cluster\n\nClasses and Interfaces: \npublic class ClusterHealth extends Object; // Information about the cluster health.\npublic static final class ClusterHealth.ClusterHealthBuilder extends Object;\npublic interface ClusterOperations; // Elasticsearch operations on cluster level.\npublic interface ReactiveClusterOperations; // Reactive Elasticsearch operations on cluster level.\n", "des": "Interfaces and classes related to Elasticsearch cluster information and management."}
{"index": 536, "repo": "commons-vfs2-2.9.0", "code": "Package: zip\n\nClasses and Interfaces: \nClass ZipFileObject; // A file in a ZIP file system.\nClass ZipFileProvider; // A file system provider for ZIP files.\nClass ZipFileSystem; // A read-only file system for ZIP and JAR files.\nClass ZipFileSystemConfigBuilder;\n", "des": "The Zip File Provider."}
{"index": 2012, "repo": "spring-boot-devtools-3.1.1", "code": "Package: logger\n\nClasses and Interfaces: \npublic final class DevToolsLogFactory extends Object; // Devtools deferred logging support.\n", "des": "Devtools specific logging concerns."}
{"index": 2454, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: export\n\nSub Packages: \npackage export.appoptics; // Support for exporting actuator metrics to AppOptics.\npackage export.atlas; // Support for exporting actuator metrics to Atlas.\npackage export.datadog; // Support for exporting actuator metrics to Datadog.\npackage export.dynatrace; // Support for exporting actuator metrics to Dynatrace.\npackage export.elastic; // Support for exporting actuator metrics to Elastic.\npackage export.ganglia; // Support for exporting actuator metrics to Ganglia.\npackage export.graphite; // Support for exporting actuator metrics to Graphite.\npackage export.humio; // Support for exporting actuator metrics to Humio.\npackage export.influx; // Support for exporting actuator metrics to InfluxDB.\npackage export.jmx; // Support for exporting actuator metrics to JMX.\npackage export.kairos; // Support for exporting actuator metrics to KairosDB.\npackage export.newrelic; // Support for exporting actuator metrics to New Relic.\npackage export.otlp; // Support for exporting actuator metrics to OTLP.\npackage export.prometheus; // Support for exporting actuator metrics to Prometheus.\npackage export.properties; // Base properties and adapters used when exporting actuator metrics.\npackage export.signalfx; // Support for exporting actuator metrics to SignalFX.\npackage export.simple; // Support for exporting actuator metrics to a simple in-memory store.\npackage export.stackdriver; // Support for exporting actuator metrics to Stackdriver.\npackage export.statsd; // Support for exporting actuator metrics to StatsD.\npackage export.wavefront; // Support for exporting actuator metrics to Wavefront.\n\nClasses and Interfaces: \n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.metrics.export.OnMetricsExportEnabledCondition.class) public @interface ConditionalOnEnabledMetricsExport; // @Conditional that checks whether a metrics exporter is enabled.\n", "des": "Auto-configuration for metrics exporter."}
{"index": 672, "repo": "commons-lang3-3.12.0", "code": "Package: mutable\n\nClasses and Interfaces: \nInterface Mutable<T>; // Provides mutable access to a value.\nClass MutableBoolean; // A mutable boolean wrapper.\nClass MutableByte; // A mutable byte wrapper.\nClass MutableDouble; // A mutable double wrapper.\nClass MutableFloat; // A mutable float wrapper.\nClass MutableInt; // A mutable int wrapper.\nClass MutableLong; // A mutable long wrapper.\nClass MutableObject<T>; // A mutable Object wrapper.\nClass MutableShort; // A mutable short wrapper.\n", "des": "Provides typed mutable wrappers to primitive values and Object."}
{"index": 3524, "repo": "opennlp-tools-2.2.0", "code": "Package: nkjp\n\nClasses and Interfaces: \nClass NKJPSegmentationDocument;\nClass NKJPSegmentationDocument.Pointer;\nClass NKJPSentenceSampleStream;\nClass NKJPSentenceSampleStreamFactory<P>;\nClass NKJPTextDocument; // The National corpus of Polish (NKJP) format.\n", "des": "Experimental package related to the National corpus of Polish NKJP format."}
{"index": 2267, "repo": "spring-vault-core-3.0.4", "code": "Package: configuration\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(VaultRepositoriesRegistrar.class) @QueryCreatorType(value=VaultQueryCreator.class, repositoryQueryType=VaultPartTreeQuery.class) public @interface EnableVaultRepositories; // Annotation to activate Vault repositories.\npublic class VaultRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport; // Vault specific ImportBeanDefinitionRegistrar.\npublic class VaultRepositoryConfigurationExtension extends KeyValueRepositoryConfigurationExtension; // RepositoryConfigurationExtension for Vault.\n", "des": "Support infrastructure for the configuration of Vault specific repositories."}
{"index": 2991, "repo": "spring-ldap-core-3.1.0", "code": "Package: typeconversion\n\nSub Packages: \npackage typeconversion.impl; // Provides an implementation of the ConverterManager interface.\n\nClasses and Interfaces: \npublic final class ConverterException extends NamingException; // Thrown by the conversion framework to indicate an error condition - typically a failed type conversion.\npublic interface ConverterManager; // A simple interface to be implemented to provide type conversion functionality.\n", "des": "Provides an interface to be implemented to create a type conversion framework."}
{"index": 2453, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: data\n\nClasses and Interfaces: \n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnClass(org.springframework.data.repository.Repository.class) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) @EnableConfigurationProperties(MetricsProperties.class) public class RepositoryMetricsAutoConfiguration extends Object; // Auto-configuration for Spring Data Repository metrics.\n", "des": "Auto-configuration for Spring Data actuator metrics."}
{"index": 2787, "repo": "spring-expression-6.0.11", "code": "Package: ast\n\nClasses and Interfaces: \npublic class Assign extends SpelNodeImpl; // Represents assignment.\npublic abstract class AstUtils extends Object; // Utilities methods for use in the Ast classes.\npublic class BeanReference extends SpelNodeImpl; // Represents a bean reference to a type, for example @foo or @'foo.bar'.\npublic class BooleanLiteral extends Literal; // Represents the literal values TRUE and FALSE.\npublic class CompoundExpression extends SpelNodeImpl; // Represents a DOT separated expression sequence, such as property1.property2.methodOne().\npublic class ConstructorReference extends SpelNodeImpl; // Represents the invocation of a constructor.\npublic class Elvis extends SpelNodeImpl; // Represents the elvis operator ?:.\npublic class FloatLiteral extends Literal; // Expression language AST node that represents a float literal.\npublic class FunctionReference extends SpelNodeImpl; // A function reference is of the form \"#someFunction(a,b,c)\".\npublic class Identifier extends SpelNodeImpl; // An 'identifier' SpelNode.\npublic class Indexer extends SpelNodeImpl; // An Indexer can index into some proceeding structure to access a particular piece of it.\npublic class InlineList extends SpelNodeImpl; // Represent a list in an expression, e.g.\npublic class InlineMap extends SpelNodeImpl; // Represent a map in an expression, e.g.\npublic class IntLiteral extends Literal; // Expression language AST node that represents an integer literal.\npublic abstract class Literal extends SpelNodeImpl; // Common superclass for nodes representing literals (boolean, string, number, etc).\npublic class LongLiteral extends Literal; // Expression language AST node that represents a long integer literal.\npublic class MethodReference extends SpelNodeImpl; // Expression language AST node that represents a method reference.\npublic class NullLiteral extends Literal; // Expression language AST node that represents null.\npublic class OpAnd extends Operator; // Represents the boolean AND operation.\npublic class OpDec extends Operator; // Decrement operator.\npublic class OpDivide extends Operator; // Implements division operator.\npublic class OpEQ extends Operator; // Implements the equality operator.\npublic abstract class Operator extends SpelNodeImpl; // Common supertype for operators that operate on either one or two operands.\n", "des": "SpEL's abstract syntax tree."}
{"index": 2492, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: quartz\n\nClasses and Interfaces: \n@AutoConfiguration(after=org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration.class) @ConditionalOnClass(org.quartz.Scheduler.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.quartz.QuartzEndpoint.class) @EnableConfigurationProperties(QuartzEndpointProperties.class) public class QuartzEndpointAutoConfiguration extends Object; // Auto-configuration for QuartzEndpoint.\n@ConfigurationProperties(\"management.endpoint.quartz\") public class QuartzEndpointProperties extends Object; // Configuration properties for QuartzEndpoint.\n", "des": "Auto-configuration for actuator Quartz Scheduler concerns."}
{"index": 1300, "repo": "groovy-all-4.0.13", "code": "Package: inspect\n\nClasses and Interfaces: \npublic class Inspector extends Object; // The Inspector provides a unified access to an object's information that can be determined by introspection.\npublic static class Inspector.MemberComparator extends Object implements Comparator<Object>, Serializable;\npublic static class Inspector.MemberComparatorWithValue extends Object implements Comparator<Object>, Serializable;\n", "des": "Classes for inspecting object properties through introspection."}
{"index": 2767, "repo": "spring-jms-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(JmsBootstrapConfiguration.class) public @interface EnableJms; // Enable JMS listener annotated endpoints that are created under the cover by a JmsListenerContainerFactory.\n@Configuration(proxyBeanMethods=false) @Role(2) public class JmsBootstrapConfiguration extends Object; // @Configuration class that registers a JmsListenerAnnotationBeanPostProcessor bean capable of processing Spring's @JmsListener annotation.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(JmsListeners.class) @MessageMapping public @interface JmsListener; // Annotation that marks a method to be the target of a JMS message listener on the specified JmsListener.destination().\npublic class JmsListenerAnnotationBeanPostProcessor extends Object implements org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor, org.springframework.core.Ordered, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.SmartInitializingSingleton; // Bean post-processor that registers methods annotated with JmsListener to be invoked by a JMS message listener container created under the cover by a JmsListenerContainerFactory according to the attributes of the annotation.\n@FunctionalInterface public interface JmsListenerConfigurer; // Optional interface to be implemented by a Spring managed bean willing to customize how JMS listener endpoints are configured.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface JmsListeners; // Container annotation that aggregates several JmsListener annotations.\n", "des": "Annotations and support classes for declarative JMS listener endpoints."}
{"index": 84, "repo": "ignite-core-2.15.0", "code": "Package: tcp\n\nSub Packages: \npackage tcp.internal; // Contains connection health-checkers for TCP/IP-based implementation of communication SPI.\npackage tcp.messages; // Contains implementation messages.\n\nClasses and Interfaces: \nInterface TcpCommunicationSpiMBean; // MBean provide access to TCP-based communication SPI.\nClass AttributeNames; // fix it in the ticket https://ggsystems.atlassian.net/browse/GG-29546\nClass ClientExceptionsUtils; // Utils to analyze client-related exceptions.\nClass TcpCommunicationMetricsListener; // Statistics for TcpCommunicationSpi.\nClass TcpCommunicationSpi; // TcpCommunicationSpi is default communication SPI which uses TCP/IP protocol and Java NIO to communicate with other nodes.\n", "des": "Contains default TCP/IP-based implementation for communication SPI."}
{"index": 1355, "repo": "spring-tx-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \npublic class PersistenceExceptionTranslationAdvisor extends org.springframework.aop.support.AbstractPointcutAdvisor; // Spring AOP exception translation aspect for use at Repository or DAO layer level.\npublic class PersistenceExceptionTranslationPostProcessor extends org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor; // Bean post-processor that automatically applies persistence exception translation to any bean marked with Spring's @Repository annotation, adding a corresponding PersistenceExceptionTranslationAdvisor to the exposed proxy (either an existing AOP proxy or a newly generated proxy that implements all of the target's interfaces).\n", "des": "Annotation support for DAOs."}
{"index": 2297, "repo": "spring-boot-3.1.1", "code": "Package: logging\n\nClasses and Interfaces: \npublic class LoggingApplicationListener extends Object implements org.springframework.context.event.GenericApplicationListener; // An ApplicationListener that configures the LoggingSystem.\n", "des": "Logging integration with Spring's Application Context."}
{"index": 3530, "repo": "opennlp-tools-2.2.0", "code": "Package: ml\n\nSub Packages: \npackage ml.maxent; // Package related to ML by means of the Maximum Entropy (ME) algorithm.\npackage ml.model; // Package related to ML models and feature selection techniques.\npackage ml.naivebayes; // Package related to ML by means of the Naive Bayes algorithm.\npackage ml.perceptron; // Package related to ML by means of the perceptron algorithm.\n\nClasses and Interfaces: \nInterface EventModelSequenceTrainer<T>; // A specialized Trainer that is based on a 'EventModelSequence' approach.\nInterface EventTrainer; // A specialized Trainer that is based on an Event approach.\nInterface SequenceTrainer;\nClass AbstractEventModelSequenceTrainer; // A basic EventModelSequenceTrainer implementation that processes events.\nClass AbstractEventTrainer; // A basic EventTrainer implementation.\nClass AbstractTrainer;\nClass ArrayMath; // Utility class for simple vector arithmetic.\nClass BeamSearch<T>; // Performs k-best search over a sequence.\nClass TrainerFactory; // A factory to initialize Trainer instances depending on a trainer type configured via TrainingParameters.\nEnum TrainerFactory.TrainerType;\n", "des": "Package related to Machine Learning (ML) features of OpenNLP, the related ML models, and trainers."}
{"index": 910, "repo": "commons-compress-1.23.0", "code": "Package: jar\n\nClasses and Interfaces: \nClass JarArchiveEntry;\nClass JarArchiveInputStream; // Implements an input stream that can read entries from jar files.\nClass JarArchiveOutputStream; // Subclass that adds a special extra field to the very first entry which allows the created archive to be used as an executable jar on Solaris.\n", "des": "Provides stream classes for reading and writing archives using the ZIP format with some extensions for the special case of JAR archives."}
{"index": 3825, "repo": "lucene-analysis-common-9.7.0", "code": "Package: collation\n\nSub Packages: \npackage collation.tokenattributes; // Custom AttributeImpl for indexing collation keys as index terms.\n\nClasses and Interfaces: \nClass CollationAttributeFactory; // Converts each token into its CollationKey, and then encodes the bytes as an index term.\nClass CollationDocValuesField; // Indexes collation keys as a single-valued SortedDocValuesField.\nClass CollationKeyAnalyzer; // Configures KeywordTokenizer with CollationAttributeFactory.\n", "des": "Unicode collation support."}
{"index": 2171, "repo": "wicket-spring-10.0.0-M1", "code": "Package: annot\n\nClasses and Interfaces: \npublic class AnnotProxyFieldValueFactory extends Object implements org.apache.wicket.injection.IFieldValueFactory; // IFieldValueFactory that uses LazyInitProxyFactory to create proxies for Spring dependencies based on the SpringBean annotation applied to a field.\n@Retention(RUNTIME) @Target(FIELD) @Documented public @interface SpringBean; // Annotation used to tag a field as a placeholder for a spring bean.\npublic class SpringComponentInjector extends org.apache.wicket.injection.Injector implements org.apache.wicket.application.IComponentInstantiationListener, org.apache.wicket.IBehaviorInstantiationListener; // IComponentInstantiationListener that injects component and behavior properties annotated with SpringBean annotations.\n", "des": "This package contains all the classes to make your wicket components and other pojos @SpringBean annotation aware."}
{"index": 2413, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: availability\n\nClasses and Interfaces: \n@AutoConfiguration(after=org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration.class) public class AvailabilityHealthContributorAutoConfiguration extends Object; // Auto-configuration for AvailabilityStateHealthIndicator.\n@AutoConfiguration(after={AvailabilityHealthContributorAutoConfiguration.class,org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration.class}) @Conditional(org.springframework.boot.actuate.autoconfigure.availability.AvailabilityProbesAutoConfiguration.ProbesCondition.class) public class AvailabilityProbesAutoConfiguration extends Object; // Auto-configuration for availability probes.\n", "des": "Auto-configuration that extends health endpoints so that they can be used as availability probes."}
{"index": 1198, "repo": "commons-math3-3.6.1", "code": "Package: general\n\nClasses and Interfaces: \nInterface Preconditioner; // As of 3.1 (to be removed in 4.0).\nClass AbstractDifferentiableOptimizer; // As of 3.1 (to be removed in 4.0).\nClass AbstractLeastSquaresOptimizer; // As of 3.1 (to be removed in 4.0).\nClass AbstractScalarDifferentiableOptimizer; // As of 3.1 (to be removed in 4.0).\nClass GaussNewtonOptimizer; // As of 3.1 (to be removed in 4.0).\nClass LevenbergMarquardtOptimizer; // As of 3.1 (to be removed in 4.0).\nClass NonLinearConjugateGradientOptimizer; // As of 3.1 (to be removed in 4.0).\nClass NonLinearConjugateGradientOptimizer.IdentityPreconditioner; // Default identity preconditioner.\nEnum ConjugateGradientFormula; // As of 3.1 (to be removed in 4.0).\n", "des": "This package provides optimization algorithms that require derivatives."}
{"index": 168, "repo": "ignite-core-2.15.0", "code": "Package: cache\n\nClasses and Interfaces: \nClass GridCacheCommandHandler; // Command handler for API requests.\nClass GridCacheRestMetrics; // Grid cache metrics for rest.\nClass GridCacheRestResponse; // Adds affinity node ID to cache responses.\n", "des": "REST in-memory data grid commands."}
{"index": 2400, "repo": "spring-batch-core-5.0.2", "code": "Package: dao\n\nClasses and Interfaces: \npublic abstract class AbstractJdbcBatchMetadataDao extends Object implements org.springframework.beans.factory.InitializingBean; // Encapsulates common functionality needed by JDBC batch metadata DAOs - provides jdbcTemplate for subclasses and handles table prefixes.\npublic class DefaultExecutionContextSerializer extends Object implements ExecutionContextSerializer; // An implementation of the ExecutionContextSerializer that produces/consumes Base64 content.\npublic interface ExecutionContextDao; // DAO interface for persisting and retrieving ExecutionContexts.\npublic class Jackson2ExecutionContextStringSerializer extends Object implements ExecutionContextSerializer; // Implementation that uses Jackson2 to provide (de)serialization.\npublic class JdbcExecutionContextDao extends AbstractJdbcBatchMetadataDao implements ExecutionContextDao; // JDBC DAO for ExecutionContext.\npublic class JdbcJobExecutionDao extends AbstractJdbcBatchMetadataDao implements JobExecutionDao, org.springframework.beans.factory.InitializingBean; // JDBC implementation of JobExecutionDao.\npublic class JdbcJobInstanceDao extends AbstractJdbcBatchMetadataDao implements JobInstanceDao, org.springframework.beans.factory.InitializingBean; // JDBC implementation of JobInstanceDao.\npublic class JdbcStepExecutionDao extends AbstractJdbcBatchMetadataDao implements StepExecutionDao, org.springframework.beans.factory.InitializingBean; // JDBC implementation of StepExecutionDao. Allows customization of the tables names used by Spring Batch for step meta data via a prefix property. Uses sequences or tables (via Spring's DataFieldMaxValueIncrementer abstraction) to create all primary keys before inserting a new row.\npublic interface JobExecutionDao; // Data Access Object for job executions.\npublic interface JobInstanceDao; // Data Access Object for job instances.\npublic class NoSuchObjectException extends RuntimeException; // This exception identifies that a batch domain object is invalid, which is generally caused by an invalid ID.\npublic interface StepExecutionDao;\n", "des": "Specific implementations of dao concerns."}
{"index": 2163, "repo": "wicket-core-10.0.0-M1", "code": "Package: servlet\n\nClasses and Interfaces: \npublic abstract class AbstractRequestWrapperFactory extends Object; // A factory of HttpServletRequest wrappers.\npublic class ErrorAttributes extends Object; // Represents additional error attributes present in a ServletRequest when the servlet container is handling an error or a forward to an error page mapped by error-page element in web.xml.\npublic class FilterFactoryManager extends Object implements Iterable<AbstractRequestWrapperFactory>; // A very simple manager for web filter factories.\npublic class ForwardAttributes extends Object; // Represents additional attributes present in a ServletRequest when the servlet container is handling a forward to another path than the initially requested one.\npublic abstract class MultipartServletWebRequest extends ServletWebRequest implements IMultipartWebRequest; // Servlet specific WebRequest subclass for multipart content uploads.\npublic class MultipartServletWebRequestImpl extends MultipartServletWebRequest; // Servlet specific WebRequest subclass for multipart content uploads.\npublic class ResponseIOException extends WicketRuntimeException implements IWicketInternalException; // Distinct IO exceptions from the those triggered while responding a request.\npublic class SecuredRemoteAddressRequestWrapperFactory extends AbstractRequestWrapperFactory; // Sets ServletRequest.isSecure() to true if ServletRequest.getRemoteAddr() matches one of the securedRemoteAddresses of this filter.\npublic static class SecuredRemoteAddressRequestWrapperFactory.Config extends Object;\npublic class ServletWebRequest extends org.apache.wicket.request.http.WebRequest; // WebRequest subclass that wraps a HttpServletRequest object.\npublic class ServletWebResponse extends org.apache.wicket.request.http.WebResponse; // WebResponse that wraps a ServletWebResponse.\npublic class UploadInfo extends Object implements org.apache.wicket.util.io.IClusterable; // Holds information about an upload, also has useful querying methods.\npublic class WicketSessionFilter extends Object implements jakarta.servlet.Filter; // This filter can be used to make the Wicket WebSession instances available to non-wicket servlets.\npublic class XForwardedRequestWrapper extends jakarta.servlet.http.HttpServletRequestWrapper; // See XForwardedFilter\npublic class XForwardedRequestWrapperFactory extends AbstractRequestWrapperFactory; // Request wrapper factory to integrate \"X-Forwarded-For\" and \"X-Forwarded-Proto\" HTTP headers.\npublic static class XForwardedRequestWrapperFactory.Config extends Object; // Filter Config\n", "des": "Java Servlet specific implementation of Wicket http classes."}
{"index": 3124, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: unique\n\nClasses and Interfaces: \nInterface UniqueDelegate; // Dialect-level delegate in charge of applying \"uniqueness\" to a column.\nClass DB2UniqueDelegate; // DB2 does not allow unique constraints on nullable columns.\nClass DefaultUniqueDelegate; // The default UniqueDelegate implementation for most dialects.\nClass InformixUniqueDelegate; // Informix requires the constraint name to come last on the alter table.\nClass MySQLUniqueDelegate;\n", "des": "Support for Dialect-specific unique constraint definition"}
{"index": 2191, "repo": "spring-security-web-6.1.2", "code": "Package: savedrequest\n\nClasses and Interfaces: \npublic class CookieRequestCache extends Object implements RequestCache; // An Implementation of RequestCache which saves the original request URI in a cookie.\npublic class DefaultSavedRequest extends Object implements SavedRequest; // Represents central information from a HttpServletRequest.\npublic static class DefaultSavedRequest.Builder extends Object;\npublic class Enumerator<T> extends Object implements Enumeration<T>; // Adapter that wraps an Enumeration around a Java 2 collection Iterator.\npublic final class FastHttpDateFormat extends Object; // Utility class to generate HTTP dates.\npublic class HttpSessionRequestCache extends Object implements RequestCache; // RequestCache which stores the SavedRequest in the HttpSession.\npublic class NullRequestCache extends Object implements RequestCache; // Null implementation of RequestCache.\npublic interface RequestCache; // Implements \"saved request\" logic, allowing a single request to be retrieved and restarted after redirecting to an authentication mechanism.\npublic class RequestCacheAwareFilter extends org.springframework.web.filter.GenericFilterBean; // Responsible for reconstituting the saved request if one is cached and it matches the current request.\npublic class SavedCookie extends Object implements Serializable; // Stores off the values of a cookie in a serializable holder\npublic interface SavedRequest extends Serializable; // Encapsulates the functionality required of a cached request for both an authentication mechanism (typically form-based login) to redirect to the original URL and for a RequestCache to build a wrapped request, reproducing the original request data.\npublic class SimpleSavedRequest extends Object implements SavedRequest; // A Bean implementation of SavedRequest\n", "des": "Classes related to the caching of an HttpServletRequest which requires authentication."}
{"index": 3392, "repo": "commons-imaging-1.0-alpha3", "code": "Package: icns\n\nClasses and Interfaces: \nClass IcnsImageParser;\nClass IcnsImagingParameters; // Icns format parameters.\n", "des": "The ICNS image format."}
{"index": 1416, "repo": "spring-boot-actuator-3.1.1", "code": "Package: prometheus\n\nClasses and Interfaces: \npublic class PrometheusPushGatewayManager extends Object; // Class that can be used to manage the pushing of metrics to a Prometheus PushGateway.\npublic static enum PrometheusPushGatewayManager.ShutdownOperation extends Enum<PrometheusPushGatewayManager.ShutdownOperation>; // The operation that should be performed on shutdown.\n@WebEndpoint(id=\"prometheus\") public class PrometheusScrapeEndpoint extends Object; // @Endpoint that outputs metrics in a format that can be scraped by the Prometheus server.\npublic enum TextOutputFormat extends Enum<TextOutputFormat> implements Producible<TextOutputFormat>; // A Producible enum for supported Prometheus TextFormat.\n", "des": "Actuator support for exporting metrics to Prometheus."}
{"index": 1041, "repo": "commons-io-2.13.0", "code": "Package: io\n\nSub Packages: \npackage io.build; // Provides classes to implement IO builders.\npackage io.charset; // Provides classes to work with code from java.nio.charset.\npackage io.comparator; // Provides various Comparator implementations for Files.\npackage io.file; // Provides extensions in the realm of java.nio.file.\npackage io.filefilter; // Provides the an interface IOFileFilter that combines both FileFilter and FilenameFilter.\npackage io.function; // Provides IO-only related functional interfaces for lambda expressions and method references.\npackage io.input; // Provides implementations of input classes, such as InputStream and Reader.\npackage io.monitor; // Provides a component for monitoring file system events (directory and file create, update and delete events).\npackage io.output; // Provides implementations of output classes, such as OutputStream and Writer.\npackage io.serialization; // Provides a framework for controlling the deserialization of classes.\n\nClasses and Interfaces: \nClass ByteOrderMark; // Byte Order Mark (BOM) representation.\nClass ByteOrderParser; // Converts Strings to ByteOrder instances.\nClass Charsets; // Charsets required of every implementation of the Java platform.\nClass CopyUtils; // Use IOUtils.\nClass DirectoryWalker<T>; // Apache Commons IO no longer uses this class.\nClass EndianUtils; // Helps with different endian systems.\nClass FileCleaner; // Use FileCleaningTracker\nClass FileCleaningTracker; // Keeps track of files awaiting deletion, and deletes them when an associated marker object is reclaimed by the garbage collector.\nClass FileDeleteStrategy; // Strategy for deleting files.\nClass FilenameUtils; // General file name and file path manipulation utilities.\nClass FileSystemUtils; // As of 2.6 deprecated without replacement.\nClass FileUtils; // General file manipulation utilities.\nClass HexDump; // Dumps data in hexadecimal format.\nClass IOUtils; // General IO stream manipulation utilities.\nClass LineIterator; // An Iterator over the lines in a Reader.\nClass RandomAccessFiles; // Works on RandomAccessFile.\nClass ThreadUtils; // Helps work with threads.\nEnum FileSystem; // Abstracts an OS' file system details, currently supporting the single use case of converting a file name String to a legal file name with FileSystem.toLegalFileName(String, char).\n", "des": "Provides classes for working with streams, readers, writers and files."}
{"index": 2809, "repo": "spring-integration-ip-6.1.2", "code": "Package: dsl\n\nClasses and Interfaces: \npublic abstract class AbstractConnectionFactorySpec<S extends AbstractConnectionFactorySpec<S,C>,C extends AbstractConnectionFactory> extends org.springframework.integration.dsl.IntegrationComponentSpec<S,C>; // An IntegrationComponentSpec for AbstractConnectionFactorys.\npublic abstract class AbstractUdpOutboundChannelAdapterSpec<S extends AbstractUdpOutboundChannelAdapterSpec<S>> extends org.springframework.integration.dsl.MessageHandlerSpec<S,UnicastSendingMessageHandler>; // A MessageHandlerSpec for UDP MessageHandlers.\npublic final class Tcp extends Object; // Factory methods for TCP.\npublic abstract class TcpClientConnectionFactorySpec<S extends TcpClientConnectionFactorySpec<S,C>,C extends AbstractClientConnectionFactory> extends AbstractConnectionFactorySpec<S,C>; // An AbstractConnectionFactorySpec for AbstractClientConnectionFactorys.\npublic class TcpInboundChannelAdapterSpec extends org.springframework.integration.dsl.MessageProducerSpec<TcpInboundChannelAdapterSpec,TcpReceivingChannelAdapter> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessageProducerSpec for TcpReceivingChannelAdapters.\npublic class TcpInboundGatewaySpec extends org.springframework.integration.dsl.MessagingGatewaySpec<TcpInboundGatewaySpec,TcpInboundGateway> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessagingGatewaySpec for TcpInboundGateways.\npublic class TcpNetClientConnectionFactorySpec extends TcpClientConnectionFactorySpec<TcpNetClientConnectionFactorySpec,TcpNetClientConnectionFactory>; // TcpClientConnectionFactorySpec for TcpNetClientConnectionFactorys.\npublic class TcpNetServerConnectionFactorySpec extends TcpServerConnectionFactorySpec<TcpNetServerConnectionFactorySpec,TcpNetServerConnectionFactory>; // TcpServerConnectionFactorySpec for TcpNetServerConnectionFactorys.\npublic class TcpNioClientConnectionFactorySpec extends TcpClientConnectionFactorySpec<TcpNioClientConnectionFactorySpec,TcpNioClientConnectionFactory>; // TcpClientConnectionFactorySpec for TcpNioClientConnectionFactorys.\npublic class TcpNioServerConnectionFactorySpec extends TcpServerConnectionFactorySpec<TcpNioServerConnectionFactorySpec,TcpNioServerConnectionFactory>; // TcpServerConnectionFactorySpec for TcpNioServerConnectionFactorys.\n", "des": "Provides TCP/UDP Component support for the Java DSL."}
{"index": 3593, "repo": "lucene-test-framework-9.7.0", "code": "Package: index\n\nClasses and Interfaces: \nInterface RandomIndexWriter.TestPoint; // Simple interface that is executed for each TP InfoStream component message.\nClass AlcoholicMergePolicy; // Merge policy for testing, it is like an alcoholic.\nClass AllDeletedFilterReader; // Filters the incoming reader and makes all documents appear deleted.\nClass AssertingDirectoryReader; // A DirectoryReader that wraps all its subreaders with AssertingLeafReader\nClass AssertingLeafReader; // A FilterLeafReader that can be used to apply additional checks for tests.\nClass AssertingLeafReader.AssertingBinaryDocValues; // Wraps a BinaryDocValues but with additional asserts\nClass AssertingLeafReader.AssertingBits; // Wraps a Bits but with additional asserts\nClass AssertingLeafReader.AssertingFields; // Wraps a Fields but with additional asserts\nClass AssertingLeafReader.AssertingImpactsEnum; // Wraps a ImpactsEnum with additional checks\nClass AssertingLeafReader.AssertingNumericDocValues; // Wraps a NumericDocValues but with additional asserts\nClass AssertingLeafReader.AssertingPointValues; // Wraps a SortedSetDocValues but with additional asserts\nClass AssertingLeafReader.AssertingPostingsEnum; // Wraps a docsenum with additional checks\nClass AssertingLeafReader.AssertingSortedDocValues; // Wraps a SortedDocValues but with additional asserts\nClass AssertingLeafReader.AssertingSortedNumericDocValues; // Wraps a SortedNumericDocValues but with additional asserts\nClass AssertingLeafReader.AssertingSortedSetDocValues; // Wraps a SortedSetDocValues but with additional asserts\nClass AssertingLeafReader.AssertingStoredFields; // Wraps a StoredFields but with additional asserts\nClass AssertingLeafReader.AssertingTerms; // Wraps a Terms but with additional asserts\nClass AssertingLeafReader.AssertingTermVectors; // Wraps a TermVectors but with additional asserts\nClass BaseCompoundFormatTestCase; // Abstract class to do basic tests for a compound format.\nClass BaseCompressingDocValuesFormatTestCase; // Extends BaseDocValuesFormatTestCase to add compression checks.\nClass BaseDocValuesFormatTestCase; // Abstract class to do basic tests for a docvalues format.\nClass BaseFieldInfoFormatTestCase; // Abstract class to do basic tests for fis format.\n", "des": "Support for testing of indexes."}
{"index": 3033, "repo": "spring-web-6.0.11", "code": "Package: reactive\n\nClasses and Interfaces: \npublic class HiddenHttpMethodFilter extends Object implements WebFilter; // Reactive WebFilter that converts posted method parameters into HTTP methods, retrievable via HttpRequest.getMethod().\npublic class ServerHttpObservationFilter extends Object implements WebFilter; // WebFilter that creates observations for HTTP exchanges.\npublic class ServerWebExchangeContextFilter extends Object implements WebFilter; // Inserts an attribute in the Reactor Context that makes the current ServerWebExchange available under the attribute name ServerWebExchangeContextFilter.EXCHANGE_CONTEXT_ATTRIBUTE.\n", "des": "WebFilter implementations for use in reactive web applications."}
{"index": 2233, "repo": "spring-data-commons-3.1.2", "code": "Package: web\n\nSub Packages: \npackage web.config; // Spring Data web configuration.\npackage web.querydsl; // Querydsl-specific web support.\n\nClasses and Interfaces: \npublic class HateoasPageableHandlerMethodArgumentResolver extends PageableHandlerMethodArgumentResolver implements org.springframework.hateoas.server.mvc.UriComponentsContributor; // Extension of PageableHandlerMethodArgumentResolver that also supports enhancing URIs using Spring HATEOAS support.\npublic class HateoasSortHandlerMethodArgumentResolver extends SortHandlerMethodArgumentResolver implements org.springframework.hateoas.server.mvc.UriComponentsContributor; // Extension of SortHandlerMethodArgumentResolver that also supports enhancing URIs using Spring HATEOAS support.\n@Documented @Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) public @interface JsonPath; // Annotation to explicitly declare a JSON Path expression on a projection interface.\npublic class JsonProjectingMethodInterceptorFactory extends Object implements MethodInterceptorFactory; // MethodInterceptorFactory to create a MethodInterceptor that will\npublic interface PageableArgumentResolver extends HandlerMethodArgumentResolver; // Argument resolver to extract a Pageable object from a NativeWebRequest for a particular MethodParameter.\n@Documented @Retention(RUNTIME) @Target(PARAMETER) public @interface PageableDefault; // Annotation to set defaults when injecting a Pageable into a controller method.\npublic class PageableHandlerMethodArgumentResolver extends PageableHandlerMethodArgumentResolverSupport implements PageableArgumentResolver; // Extracts paging information from web requests and thus allows injecting Pageable instances into controller methods.\npublic abstract class PageableHandlerMethodArgumentResolverSupport extends Object; // Base class providing methods for handler method argument resolvers to create paging information from web requests and thus allows injecting Pageable instances into controller methods.\npublic class PagedResourcesAssembler<T> extends Object implements org.springframework.hateoas.server.RepresentationModelAssembler<Page<T>,org.springframework.hateoas.PagedModel<org.springframework.hateoas.EntityModel<T>>>; // RepresentationModelAssembler to easily convert Page instances into PagedModel.\n", "des": "Integration with Spring MVC."}
{"index": 1217, "repo": "commons-text-1.10.0", "code": "Package: text\n\nSub Packages: \npackage text.diff; // Provides algorithms for diff between strings.\npackage text.io; // StringSubstitutorReader is a Reader that performs string substitution on a source Reader using a StringSubstitutor.\npackage text.lookup; // Provides algorithms for looking up strings for use with a StringSubstitutor.\npackage text.matcher; // Provides algorithms for matching up strings for use with a StringSubstitutor.\npackage text.numbers; // Provides algorithms for converting numbers to strings.\npackage text.similarity; // Provides algorithms for string similarity.\npackage text.translate; // An API for creating text translation routines from a set of smaller building blocks.\n\nClasses and Interfaces: \nInterface Builder<T>; // The Builder interface is designed to designate a class as a builder object in the Builder design pattern.\nInterface CharacterPredicate; // A predicate for selecting code points.\nInterface FormatFactory; // Format factory.\nInterface TextRandomProvider; // TextRandomProvider implementations are used by RandomStringGenerator as a source of randomness.\nClass AlphabetConverter; // Convert from one alphabet to another, with the possibility of leaving certain characters unencoded.\nClass CaseUtils; // Case manipulation operations on Strings that contain words.\nClass CompositeFormat; // Formats using one formatter and parses using a different formatter.\nClass ExtendedMessageFormat; // Extends java.text.MessageFormat to allow pluggable/additional formatting options for embedded format elements.\nClass FormattableUtils; // Provides utilities for working with the Formattable interface.\nClass RandomStringGenerator; // Generates random Unicode strings containing the specified number of code points.\nClass RandomStringGenerator.Builder; // A builder for generating RandomStringGenerator instances.\nClass StrBuilder; // Deprecated as of 1.3, use TextStringBuilder instead.\nClass StringEscapeUtils; // Escapes and unescapes Strings for Java, Java Script, HTML and XML.\nClass StringEscapeUtils.Builder; // Convenience wrapper for StringBuilder providing escape methods.\nClass StringSubstitutor; // Substitutes variables within a string by values.\nClass StringTokenizer; // Tokenizes a string based on delimiters (separators) and supporting quoting and ignored character concepts.\nClass StrLookup<V>; // Deprecated as of 1.3, use StringLookupFactory instead.\n", "des": "Basic classes for text handling."}
{"index": 872, "repo": "calcite-core-1.34.0", "code": "Package: util\n\nSub Packages: \npackage util.format; // Utility classes for handling format strings.\npackage util.graph; // Graph-theoretic algorithms and data structures.\npackage util.javac; // Provides compilers for Java code.\npackage util.mapping; // Support for algebraic maps.\npackage util.trace; // Tracing services.\n\nClasses and Interfaces: \nInterface CalciteParserException; // Tagging interface to allow a SqlParseException to be identified without adding a dependency on it from client-side code.\nInterface CalciteValidatorException; // Tagging interface to allow a SqlValidatorException to be identified without adding a dependency on it from client-side code.\nInterface Compatible; // Compatibility layer.\nInterface Glossary; // A collection of terms.\nInterface JdbcType<T>; // Maps Java types to their corresponding getters in JDBC.\nInterface Litmus; // Callback to be called when a test for validity succeeds or fails.\nInterface PartiallyOrderedSet.Ordering<E>; // Ordering relation.\nInterface PrecedenceClimbingParser.Special; // Callback defining the behavior of a special function.\nInterface RangeSets.Consumer<C extends Comparable<C>>; // Consumer of Range values.\nInterface RangeSets.Handler<C extends Comparable<C>,R>; // Deconstructor for Range values.\nInterface ReflectiveVisitDispatcher<R extends ReflectiveVisitor,E>; // Interface for looking up methods relating to reflective visitation.\nInterface ReflectiveVisitor; // Object which can be a target for a reflective visitation (see ReflectUtil.invokeVisitor(ReflectiveVisitor, Object, Class, String).\nInterface ReflectUtil.MethodDispatcher<T>; // Can invoke a method on an object of type E with return type T.\nInterface SaffronProperties; // As of release 1.19, replaced by CalciteSystemProperty\nInterface Source; // Source of data.\nInterface TryThreadLocal.Memo; // Remembers to set the value back.\nClass BarfingInvocationHandler; // A class derived from BarfingInvocationHandler handles a method call by looking for a method in itself with identical parameters.\nClass Benchmark; // Helps to run benchmarks by running the same task repeatedly and averaging the running times.\n", "des": "Provides utility classes."}
{"index": 465, "repo": "jackson-core-2.15.2", "code": "Package: base\n\nClasses and Interfaces: \nClass GeneratorBase; // This base class implements part of API that a JSON generator exposes to applications, adds shared internal methods that sub-classes can use and adds some abstract methods sub-classes must implement.\nClass ParserBase; // Intermediate base class used by all Jackson JsonParser implementations.\nClass ParserMinimalBase; // Intermediate base class used by all Jackson JsonParser implementations, but does not add any additional fields that depend on particular method of obtaining input.\n", "des": "Base classes used by concrete Parser and Generator implementations; contain functionality that is not specific to JSON or input abstraction (byte vs char)."}
{"index": 1186, "repo": "commons-math3-3.6.1", "code": "Package: sampling\n\nClasses and Interfaces: \nInterface FieldFixedStepHandler<T extends RealFieldElement<T>>; // This interface represents a handler that should be called after each successful fixed step.\nInterface FieldStepHandler<T extends RealFieldElement<T>>; // This interface represents a handler that should be called after each successful step.\nInterface FieldStepInterpolator<T extends RealFieldElement<T>>; // This interface represents an interpolator over the last step during an ODE integration.\nInterface FixedStepHandler; // This interface represents a handler that should be called after each successful fixed step.\nInterface StepHandler; // This interface represents a handler that should be called after each successful step.\nInterface StepInterpolator; // This interface represents an interpolator over the last step during an ODE integration.\nClass AbstractFieldStepInterpolator<T extends RealFieldElement<T>>; // This abstract class represents an interpolator over the last step during an ODE integration.\nClass AbstractStepInterpolator; // This abstract class represents an interpolator over the last step during an ODE integration.\nClass DummyStepHandler; // This class is a step handler that does nothing.\nClass FieldStepNormalizer<T extends RealFieldElement<T>>; // This class wraps an object implementing FieldFixedStepHandler into a FieldStepHandler.\nClass NordsieckStepInterpolator; // This class implements an interpolator for integrators using Nordsieck representation.\nClass StepNormalizer; // This class wraps an object implementing FixedStepHandler into a StepHandler.\nEnum StepNormalizerBounds; // Step normalizer bounds settings.\nEnum StepNormalizerMode; // Step normalizer modes.\n", "des": "This package provides classes to handle sampling steps during Ordinary Differential Equations integration."}
{"index": 3629, "repo": "lucene-misc-9.7.0", "code": "Package: index\n\nClasses and Interfaces: \nInterface IndexRearranger.DocumentSelector; // Select document within a CodecReader\nClass BinaryDocValueSelector; // Select documents using binary doc values\nClass IndexRearranger; // Copy and rearrange index according to document selectors, from input dir to output dir.\nClass IndexSplitter; // Command-line tool that enables listing segments in an index, copying specific segments to another index, and deleting segments from an index.\nClass MultiPassIndexSplitter; // This tool splits input index into multiple equal parts.\nClass PKIndexSplitter; // Split an index based on a Query.\n", "des": "Misc index tools and index support."}
{"index": 3557, "repo": "guava-32.1.1-jre", "code": "Package: html\n\nClasses and Interfaces: \nClass HtmlEscapers; // Escaper instances suitable for strings to be included in HTML attribute values and most elements' text contents.\n", "des": "Escapers for HTML."}
{"index": 582, "repo": "commons-collections-3.2.2", "code": "Package: keyvalue\n\nClasses and Interfaces: \nClass AbstractKeyValue; // Abstract pair class to assist with creating KeyValue and Map.Entry implementations.\nClass AbstractMapEntry; // Abstract Pair class to assist with creating correct Map.Entry implementations.\nClass AbstractMapEntryDecorator; // Provides a base decorator that allows additional functionality to be added to a Map.Entry.\nClass DefaultKeyValue; // A mutable KeyValue pair that does not implement Map.Entry.\nClass DefaultMapEntry; // A restricted implementation of Map.Entry that prevents the Map.Entry contract from being broken.\nClass MultiKey; // A MultiKey allows multiple map keys to be merged together.\nClass TiedMapEntry; // A Map.Entry tied to a map underneath.\nClass UnmodifiableMapEntry; // A Map.Entry that throws UnsupportedOperationException when setValue is called.\n", "des": "This package contains implementations of collection and map related key/value classes."}
{"index": 1520, "repo": "spring-context-6.0.11", "code": "Package: datetime\n\nSub Packages: \npackage datetime.standard; // Integration with the JSR-310 java.time package in JDK 8.\n\nClasses and Interfaces: \npublic class DateFormatter extends Object implements Formatter<Date>; // A formatter for Date types.\npublic class DateFormatterRegistrar extends Object implements FormatterRegistrar; // Configures basic date formatting for use with Spring, primarily for DateTimeFormat declarations.\npublic class DateTimeFormatAnnotationFormatterFactory extends EmbeddedValueResolutionSupport implements AnnotationFormatterFactory<DateTimeFormat>; // Formats fields annotated with the DateTimeFormat annotation using a DateFormatter.\n", "des": "Formatters for java.util.Date properties."}
{"index": 480, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: fs\n\nClasses and Interfaces: \nInterface MoveOptions; // An object that configures FileSystems.copy(java.util.List<org.apache.beam.sdk.io.fs.ResourceId>, java.util.List<org.apache.beam.sdk.io.fs.ResourceId>, org.apache.beam.sdk.io.fs.MoveOptions...), FileSystems.rename(java.util.List<org.apache.beam.sdk.io.fs.ResourceId>, java.util.List<org.apache.beam.sdk.io.fs.ResourceId>, org.apache.beam.sdk.io.fs.MoveOptions...), and FileSystems.delete(java.util.Collection<org.apache.beam.sdk.io.fs.ResourceId>, org.apache.beam.sdk.io.fs.MoveOptions...).\nInterface ResolveOptions; // An object that configures ResourceId.resolve(java.lang.String, org.apache.beam.sdk.io.fs.ResolveOptions).\nInterface ResourceId; // An identifier which represents a file-like resource.\nClass CreateOptions; // An abstract class that contains common configuration options for creating resources.\nClass CreateOptions.Builder<BuilderT extends CreateOptions.Builder<BuilderT>>; // An abstract builder for CreateOptions.\nClass CreateOptions.StandardCreateOptions; // A standard configuration options with builder.\nClass CreateOptions.StandardCreateOptions.Builder; // Builder for CreateOptions.StandardCreateOptions.\nClass MatchResult; // The result of FileSystem.match(java.util.List<java.lang.String>).\nClass MatchResult.Metadata; // MatchResult.Metadata of a matched file.\nClass MatchResult.Metadata.Builder; // Builder class for MatchResult.Metadata.\nClass MetadataCoder; // A Coder for MatchResult.Metadata.\nClass MetadataCoderV2; // A Coder for MatchResult.Metadata that includes MatchResult.Metadata.lastModifiedMillis().\nClass ResourceIdCoder; // A Coder for ResourceId.\nClass ResourceIdTester; // A utility to test ResourceId implementations.\nEnum EmptyMatchTreatment; // Options for allowing or disallowing filepatterns that match no resources in FileSystems.match(java.util.List<java.lang.String>).\nEnum MatchResult.Status; // Status of a MatchResult.\n", "des": "Apache Beam FileSystem interfaces and their default implementations."}
{"index": 2009, "repo": "spring-boot-devtools-3.1.1", "code": "Package: env\n\nClasses and Interfaces: \npublic class DevToolsHomePropertiesPostProcessor extends Object implements org.springframework.boot.env.EnvironmentPostProcessor; // EnvironmentPostProcessor to add devtools properties from the user's home directory.\n@Order(2147483647) public class DevToolsPropertyDefaultsPostProcessor extends Object implements org.springframework.boot.env.EnvironmentPostProcessor; // EnvironmentPostProcessor to add properties that make sense when working at development time.\n", "des": "DevTools classes relating to Spring Framework's Environment."}
{"index": 403, "repo": "commons-jexl3-3.3", "code": "Package: introspection\n\nClasses and Interfaces: \nInterface JexlMethod; // Interface used for regular method invocation.\nInterface JexlPermissions; // This interface describes permissions used by JEXL introspection that constrain which packages/classes/constructors/fields/methods are made visible to JEXL scripts.\nInterface JexlPropertyGet; // Interface for getting values that appear to be properties.\nInterface JexlPropertySet; // Interface used for setting values that appear to be properties.\nInterface JexlUberspect; // 'Federated' introspection/reflection interface to allow JEXL introspection behavior to be customized.\nInterface JexlUberspect.PropertyResolver; // Abstracts getting property setter and getter.\nInterface JexlUberspect.ResolverStrategy; // Determines property resolution strategy.\nClass JexlPermissions.ClassPermissions; // A permission delegation that augments the RESTRICTED permission with an explicit set of classes.\nClass JexlPermissions.Delegate; // A base for permission delegation allowing functional refinement.\nClass JexlSandbox; // A sandbox describes permissions on a class by explicitly allowing or forbidding access to methods and properties through \"allowlists\" and \"blocklists\".\nClass JexlSandbox.BlackSet; // since 3.2, use BlockSet\nClass JexlSandbox.Names; // A base set of names.\nClass JexlSandbox.Permissions; // Contains the allow or block lists for properties and methods for a given class.\nClass JexlSandbox.WhiteSet; // since 3.2, use AllowSet\nEnum JexlUberspect.JexlResolver; // The various builtin property resolvers.\n", "des": "Provides high-level introspective services."}
{"index": 7, "repo": "connect-api-3.5.0", "code": "Package: rest\n\nClasses and Interfaces: \nInterface ConnectRestExtension; // A plugin interface to allow registration of new JAX-RS resources like Filters, REST endpoints, providers, etc.\nInterface ConnectRestExtensionContext; // The interface provides the ability for ConnectRestExtension implementations to access the JAX-RS Configurable and cluster state ConnectClusterState.\n", "des": "Provides a pluggable interface for altering the behavior of the Connect REST API."}
{"index": 2392, "repo": "spring-batch-core-5.0.2", "code": "Package: state\n\nClasses and Interfaces: \npublic abstract class AbstractState extends Object implements State;\npublic class DecisionState extends AbstractState; // State that requires a decider to make the status decision.\npublic class EndState extends AbstractState; // State implementation for ending a job if it is in progress and continuing if just starting.\npublic interface FlowExecutionAggregator; // Strategy interface for aggregating FlowExecution instances into a single exit status.\npublic class FlowState extends AbstractState implements FlowHolder; // State that delegates to a Flow\npublic class MaxValueFlowExecutionAggregator extends Object implements FlowExecutionAggregator; // Implementation of the FlowExecutionAggregator interface that aggregates FlowExecutionStatus', using the status with the high precedence as the aggregate status.\npublic class SplitState extends AbstractState implements FlowHolder; // A State implementation that splits a Flow into multiple parallel subflows.\npublic class StepState extends AbstractState implements StepLocator, StepHolder; // State implementation that delegates to a FlowExecutor to execute the specified Step.\n", "des": "States used in defining the underlying Spring Batch state machine"}
{"index": 2704, "repo": "spring-integration-ftp-6.1.2", "code": "Package: inbound\n\nClasses and Interfaces: \npublic class FtpInboundFileSynchronizer extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<org.apache.commons.net.ftp.FTPFile>; // An implementation of AbstractInboundFileSynchronizer for FTP.\npublic class FtpInboundFileSynchronizingMessageSource extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizingMessageSource<org.apache.commons.net.ftp.FTPFile>; // A MessageSource implementation for FTP.\npublic class FtpStreamingMessageSource extends org.springframework.integration.file.remote.AbstractRemoteFileStreamingMessageSource<org.apache.commons.net.ftp.FTPFile>; // Message source for streaming FTP remote file contents.\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 958, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: mapping\n\nSub Packages: \npackage mapping.jaxb; // Provides JAXB2-based EndpointMapping implementations.\n\nClasses and Interfaces: \nClass AbstractAnnotationMethodEndpointMapping<T>; // Abstract base for EndpointMapping implementations that map classes tagged with an annotation.\nClass AbstractEndpointMapping; // Abstract base class for EndpointMapping implementations.\nClass AbstractMapBasedEndpointMapping; // Abstract base class for endpoint mapping that are based on a Map.\nClass AbstractMethodEndpointMapping<T>; // Abstract base class for MethodEndpoint mappings.\nClass AbstractQNameEndpointMapping; // Abstract base class for EndpointMappings that resolve qualified names as registration keys.\nClass PayloadRootAnnotationMethodEndpointMapping; // Implementation of the EndpointMapping interface that uses the PayloadRoot annotation to map methods to request payload root elements.\nClass PayloadRootQNameEndpointMapping; // Implementation of the EndpointMapping interface to map from the qualified name of the request payload root element.\nClass SimpleMethodEndpointMapping; // Simple subclass of AbstractMethodEndpointMapping that maps from the local name of the request payload to methods.\nClass UriEndpointMapping; // Implementation of the EndpointMapping interface to map from the full request URI or request URI path to endpoint beans.\nClass XPathPayloadEndpointMapping; // Implementation of the EndpointMapping interface that maps to endpoint using an XPath expression.\n", "des": "Provides miscellaneous endpoints EndpointMapping implementations."}
{"index": 1360, "repo": "spring-tx-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \n@Configuration public abstract class AbstractTransactionManagementConfiguration extends Object implements org.springframework.context.annotation.ImportAware; // Abstract base @Configuration class providing common structure for enabling Spring's annotation-driven transaction management capability.\npublic class AnnotationTransactionAttributeSource extends AbstractFallbackTransactionAttributeSource implements Serializable; // Implementation of the TransactionAttributeSource interface for working with transaction metadata in JDK 1.5+ annotation format.\npublic class Ejb3TransactionAnnotationParser extends Object implements TransactionAnnotationParser, Serializable; // Strategy implementation for parsing EJB3's TransactionAttribute annotation.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(TransactionManagementConfigurationSelector.class) public @interface EnableTransactionManagement; // Enables Spring's annotation-driven transaction management capability, similar to the support found in Spring's <tx:*> XML namespace.\npublic enum Isolation extends Enum<Isolation>; // Enumeration that represents transaction isolation levels for use with the @Transactional annotation, corresponding to the TransactionDefinition interface.\npublic class JtaTransactionAnnotationParser extends Object implements TransactionAnnotationParser, Serializable; // Strategy implementation for parsing JTA 1.2's Transactional annotation.\npublic enum Propagation extends Enum<Propagation>; // Enumeration that represents transaction propagation behaviors for use with the Transactional annotation, corresponding to the TransactionDefinition interface.\n@Configuration(proxyBeanMethods=false) @Role(2) @ImportRuntimeHints(org.springframework.transaction.annotation.TransactionRuntimeHints.class) public class ProxyTransactionManagementConfiguration extends AbstractTransactionManagementConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable proxy-based annotation-driven transaction management.\npublic class SpringTransactionAnnotationParser extends Object implements TransactionAnnotationParser, Serializable; // Strategy implementation for parsing Spring's Transactional annotation.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Inherited @Documented @Reflective public @interface Transactional; // Describes a transaction attribute on an individual method or on a class.\npublic interface TransactionAnnotationParser; // Strategy interface for parsing known transaction annotation types.\npublic class TransactionManagementConfigurationSelector extends org.springframework.context.annotation.AdviceModeImportSelector<EnableTransactionManagement>; // Selects which implementation of AbstractTransactionManagementConfiguration should be used based on the value of EnableTransactionManagement.mode() on the importing @Configuration class.\n", "des": "Spring's support for annotation-based transaction demarcation."}
{"index": 690, "repo": "jackson-databind-2.15.2", "code": "Package: jsontype\n\nSub Packages: \npackage jsontype.impl; // Package that contains standard implementations for TypeResolverBuilder and TypeIdResolver.\n\nClasses and Interfaces: \nInterface TypeIdResolver; // Interface that defines standard API for converting types to type identifiers and vice versa.\nInterface TypeResolverBuilder<T extends TypeResolverBuilder<T>>; // Interface that defines builders that are configured based on annotations (like JsonTypeInfo or JAXB annotations), and produce type serializers and deserializers used for handling type information embedded in JSON to allow for safe polymorphic type handling.\nClass BasicPolymorphicTypeValidator; // Standard BasicPolymorphicTypeValidator implementation that users may want to use for constructing validators based on simple class hierarchy and/or name patterns to allow and/or deny certain subtypes.\nClass BasicPolymorphicTypeValidator.Builder; // Builder class for configuring and constructing immutable BasicPolymorphicTypeValidator instances.\nClass BasicPolymorphicTypeValidator.NameMatcher; // General matcher interface (predicate) for validating unresolved subclass class name.\nClass BasicPolymorphicTypeValidator.TypeMatcher; // General matcher interface (predicate) for validating class values (base type or resolved subtype)\nClass DefaultBaseTypeLimitingValidator; // PolymorphicTypeValidator that will only allow polymorphic handling if the base type is NOT one of potential dangerous base types (see DefaultBaseTypeLimitingValidator.isUnsafeBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.JavaType) for specific list of such base types).\nClass NamedType; // Simple container class for types with optional logical name, used as external identifier\nClass PolymorphicTypeValidator; // Interface for classes that handle validation of class-name - based subtypes used with Polymorphic Deserialization: both via \"default typing\" and explicit @JsonTypeInfo when using Java Class name as Type Identifier.\nClass PolymorphicTypeValidator.Base; // Shared base class with partial implementation (with all validation calls returning PolymorphicTypeValidator.Validity.INDETERMINATE) and convenience methods for indicating failure reasons.\nClass SubtypeResolver; // Helper object used for handling registration on resolving of super-types to sub-types.\n", "des": "Package that contains interfaces that define how to implement functionality for dynamically resolving type during deserialization."}
{"index": 993, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: support\n\nSub Packages: \npackage support.creator; // Provides the generic WebServiceMessageCreator interface, and implementations.\npackage support.matcher; // Provides the generic WebServiceMessageMatcher interface, and implementations.\n\nClasses and Interfaces: \nClass AssertionErrors; // JUnit independent assertion class.\nClass MockStrategiesHelper; // Helper class for for loading default implementations of an interface.\nClass SourceAssertionError; // Subclass of AssertionError that also contains a Source for more context.\n", "des": "Support classes for the testing framework, used by the classes in the org.springframework.ws.test.client and org.springframework.ws.test.server packages."}
{"index": 2828, "repo": "spring-data-r2dbc-3.1.2", "code": "Package: convert\n\nClasses and Interfaces: \npublic class EntityRowMapper<T> extends Object implements BiFunction<Row,RowMetadata,T>; // Maps a Row to an entity of type T, including entities referenced.\n@WritingConverter public abstract class EnumWriteSupport<E extends Enum<E>> extends Object implements Converter<E,E>; // Support class to natively write Enum values to the database.\npublic class MappingR2dbcConverter extends BasicRelationalConverter implements R2dbcConverter; // Converter for R2DBC.\npublic interface R2dbcConverter extends EntityReader<Object,Row>, EntityWriter<Object,OutboundRow>, RelationalConverter; // Central R2DBC specific converter interface.\npublic class R2dbcCustomConversions extends CustomConversions; // Value object to capture custom conversion.\n", "des": "R2DBC-specific conversion and converter implementations."}
{"index": 1673, "repo": "spring-boot-cli-3.1.1", "code": "Package: shell\n\nClasses and Interfaces: \npublic class CommandCompleter extends jline.console.completer.StringsCompleter; // JLine Completer for Spring Boot Commands.\npublic class PromptCommand extends AbstractCommand; // Command to change the Shell prompt.\npublic class Shell extends Object; // A shell for Spring Boot.\npublic class ShellCommand extends AbstractCommand; // Command to start a nested REPL shell.\npublic class ShellExitException extends CommandException; // Exception used to stop the Shell.\npublic class ShellPrompts extends Object; // Abstraction to manage a stack of prompts.\n", "des": "Classes for running a nested shell in the CLI."}
{"index": 1429, "repo": "spring-boot-actuator-3.1.1", "code": "Package: quartz\n\nClasses and Interfaces: \n@Endpoint(id=\"quartz\") public class QuartzEndpoint extends Object; // Endpoint to expose Quartz Scheduler jobs and triggers.\npublic static final class QuartzEndpoint.CalendarIntervalTriggerDescriptor extends QuartzEndpoint.TriggerDescriptor; // Description of a CalendarIntervalTrigger.\npublic static final class QuartzEndpoint.CronTriggerDescriptor extends QuartzEndpoint.TriggerDescriptor; // Description of a CronTrigger.\npublic static final class QuartzEndpoint.CustomTriggerDescriptor extends QuartzEndpoint.TriggerDescriptor; // Description of a custom Trigger.\npublic static final class QuartzEndpoint.DailyTimeIntervalTriggerDescriptor extends QuartzEndpoint.TriggerDescriptor; // Description of a DailyTimeIntervalTrigger.\npublic static class QuartzEndpoint.GroupNamesDescriptor extends Object; // Description of group names.\npublic static final class QuartzEndpoint.QuartzDescriptor extends Object implements OperationResponseBody; // Description of available job and trigger group names.\npublic static class QuartzEndpoint.QuartzGroupsDescriptor extends Object implements OperationResponseBody; // Description of each group identified by name.\npublic static final class QuartzEndpoint.QuartzJobDetailsDescriptor extends Object implements OperationResponseBody; // Description of a Quartz Job.\npublic static final class QuartzEndpoint.QuartzJobGroupSummaryDescriptor extends Object implements OperationResponseBody; // Description of the jobs in a given group.\npublic static final class QuartzEndpoint.QuartzJobSummaryDescriptor extends Object; // Description of a Quartz Job.\npublic static final class QuartzEndpoint.QuartzTriggerGroupSummaryDescriptor extends Object implements OperationResponseBody; // Description of the triggers in a given group.\npublic static final class QuartzEndpoint.QuartzTriggerGroupSummaryDescriptor.Triggers extends Object;\npublic static final class QuartzEndpoint.SimpleTriggerDescriptor extends QuartzEndpoint.TriggerDescriptor; // Description of a SimpleTrigger.\npublic abstract static class QuartzEndpoint.TriggerDescriptor extends Object; // Base class for descriptions of a Trigger.\n@EndpointWebExtension(endpoint=QuartzEndpoint.class) @ImportRuntimeHints(org.springframework.boot.actuate.quartz.QuartzEndpointWebExtension.QuartzEndpointWebExtensionRuntimeHints.class) public class QuartzEndpointWebExtension extends Object; // @EndpointWebExtension for the QuartzEndpoint.\n", "des": "Actuator support for Quartz Scheduler."}
{"index": 3712, "repo": "solr-core-9.3.0", "code": "Package: tst\n\nClasses and Interfaces: \nClass TSTLookupFactory; // Factory for TSTLookup\n", "des": "Factories for TST based Suggesters"}
{"index": 1275, "repo": "spring-core-6.0.11", "code": "Package: io\n\nSub Packages: \npackage io.buffer; // Generic abstraction for working with byte buffer implementations.\npackage io.support; // Support classes for Spring's resource abstraction.\n\nClasses and Interfaces: \npublic abstract class AbstractFileResolvingResource extends AbstractResource; // Abstract base class for resources which resolve URLs into File references, such as UrlResource or ClassPathResource.\npublic abstract class AbstractResource extends Object implements Resource; // Convenience base class for Resource implementations, pre-implementing typical behavior.\npublic class ByteArrayResource extends AbstractResource; // Resource implementation for a given byte array.\npublic class ClassPathResource extends AbstractFileResolvingResource; // Resource implementation for class path resources.\npublic class ClassRelativeResourceLoader extends DefaultResourceLoader; // ResourceLoader implementation that interprets plain resource paths as relative to a given java.lang.Class.\npublic interface ContextResource extends Resource; // Extended interface for a resource that is loaded from an enclosing 'context', e.g.\npublic class DefaultResourceLoader extends Object implements ResourceLoader; // Default implementation of the ResourceLoader interface.\nprotected static class DefaultResourceLoader.ClassPathContextResource extends ClassPathResource implements ContextResource; // ClassPathResource that explicitly expresses a context-relative path through implementing the ContextResource interface.\npublic class DescriptiveResource extends AbstractResource; // Simple Resource implementation that holds a resource description but does not point to an actually readable resource.\npublic class FileSystemResource extends AbstractResource implements WritableResource; // Resource implementation for java.io.File and java.nio.file.Path handles with a file system target.\npublic class FileSystemResourceLoader extends DefaultResourceLoader; // ResourceLoader implementation that resolves plain paths as file system resources rather than as class path resources (the latter is DefaultResourceLoader's default strategy).\npublic class FileUrlResource extends UrlResource implements WritableResource; // Subclass of UrlResource which assumes file resolution, to the degree of implementing the WritableResource interface for it.\npublic class InputStreamResource extends AbstractResource; // Resource implementation for a given InputStream.\npublic interface InputStreamSource; // Simple interface for objects that are sources for an InputStream.\npublic class PathResource extends AbstractResource implements WritableResource; // Resource implementation for Path handles, performing all operations and transformations via the Path API.\n@FunctionalInterface public interface ProtocolResolver; // A resolution strategy for protocol-specific resource handles.\n", "des": "Generic abstraction for (file-based) resources, used throughout the framework."}
{"index": 3814, "repo": "lucene-analysis-common-9.7.0", "code": "Package: snowball\n\nClasses and Interfaces: \nClass SnowballFilter; // A filter that stems words using a Snowball-generated stemmer.\nClass SnowballPorterFilterFactory; // Factory for SnowballFilter, with configurable language\n", "des": "TokenFilter and Analyzer implementations that use a modified version of Snowball stemmers."}
{"index": 864, "repo": "calcite-core-1.34.0", "code": "Package: pretty\n\nClasses and Interfaces: \nClass SqlFormatOptions; // Data structure to hold options for SqlPrettyWriter.setFormatOptions(SqlFormatOptions).\nClass SqlPrettyWriter; // Pretty printer for SQL statements.\n", "des": "Provides a pretty-printer for SQL statements."}
{"index": 3604, "repo": "lucene-queries-9.7.0", "code": "Package: valuesource\n\nClasses and Interfaces: \nClass BoolFunction; // Abstract parent class for those ValueSource implementations which apply boolean logic to their values\nClass ByteKnnVectorFieldSource; // An implementation for retrieving FunctionValues instances for byte knn vectors fields.\nClass BytesRefFieldSource; // An implementation for retrieving FunctionValues instances for string based fields.\nClass ByteVectorSimilarityFunction; // ByteVectorSimilarityFunction returns a similarity function between two knn vectors with byte elements.\nClass ComparisonBoolFunction; // Base class for comparison operators useful within an \"if\"/conditional.\nClass ConstKnnByteVectorValueSource; // Function that returns a constant byte vector value for every document.\nClass ConstKnnFloatValueSource; // Function that returns a constant float vector value for every document.\nClass ConstNumberSource; // ConstNumberSource is the base class for all constant numbers\nClass ConstValueSource; // ConstValueSource returns a constant for all documents\nClass DefFunction; // ValueSource implementation which only returns the values from the provided ValueSources which are available for a particular docId.\nClass DivFloatFunction; // Function to divide \"a\" by \"b\"\nClass DocFreqValueSource; // DocFreqValueSource returns the number of documents containing the term.\nClass DoubleConstValueSource; // Function that returns a constant double value for every document.\nClass DoubleFieldSource; // Obtains double field values from LeafReader.getNumericDocValues(java.lang.String) and makes those values available as other numeric types, casting as needed.\nClass DualFloatFunction; // Abstract ValueSource implementation which wraps two ValueSources and applies an extendible float function to their values.\nClass EnumFieldSource; // Obtains int field values from LeafReader.getNumericDocValues(java.lang.String) and makes those values available as other numeric types, casting as needed.\nClass FieldCacheSource; // A base class for ValueSource implementations that retrieve values for a single field from DocValues.\nClass FloatFieldSource; // Obtains float field values from LeafReader.getNumericDocValues(java.lang.String) and makes those values available as other numeric types, casting as needed.\nClass FloatKnnVectorFieldSource; // An implementation for retrieving FunctionValues instances for float knn vectors fields.\n", "des": "A variety of functions to use with FunctionQuery."}
{"index": 264, "repo": "nutch-2.4", "code": "Package: anchor\n\nClasses and Interfaces: \nClass AnchorIndexingFilter; // Indexing filter that offers an option to either index all inbound anchor text for a document or deduplicate anchors.\n", "des": "An indexing plugin for inbound anchor text."}
{"index": 1424, "repo": "spring-boot-actuator-3.1.1", "code": "Package: client\n\nClasses and Interfaces: \n@Deprecated(since=\"3.0.0\", forRemoval=true) public class DefaultWebClientExchangeTagsProvider extends Object implements WebClientExchangeTagsProvider;\npublic class ObservationWebClientCustomizer extends Object implements org.springframework.boot.web.reactive.function.client.WebClientCustomizer; // WebClientCustomizer that configures the WebClient to record request observations.\n@Deprecated(since=\"3.0.0\", forRemoval=true) public final class WebClientExchangeTags extends Object;\n@FunctionalInterface @Deprecated(since=\"3.0.0\", forRemoval=true) public interface WebClientExchangeTagsProvider;\n", "des": "Actuator support for WebClient metrics."}
{"index": 2372, "repo": "pulsar-client-api-3.0.0", "code": "Package: interceptor\n\nClasses and Interfaces: \n@Public @Stable public interface ProducerInterceptor extends AutoCloseable; // A plugin interface that allows you to intercept (and possibly mutate) the messages received by the producer before they are published to the Pulsar brokers.\n@Private @Stable public class ProducerInterceptorWrapper extends Object implements ProducerInterceptor; // A wrapper for old style producer interceptor.\n", "des": "Pulsar interceptors."}
{"index": 1337, "repo": "groovy-all-4.0.13", "code": "Package: runtime\n\nSub Packages: \npackage runtime.metaclass; // Internal classes related to Groovy's metaclass implementation.\npackage runtime.typehandling; // Classes used to execute special actions based on the type.\npackage runtime.wrappers; // Groovy wrapper classes for primitive types.\n\nClasses and Interfaces: \npublic abstract class AbstractComparator<T> extends Object implements Comparator<T>;\npublic class ArrayTypeUtils extends Object; // Utilities for handling array types\npublic class ArrayUtil extends Object; // This is a generated class used internally during the writing of bytecode within the CallSiteWriter logic.\npublic class BytecodeInterface8 extends Object; // This class contains methods special to optimizations used directly from bytecode in Groovy 1.8\npublic final class ComposedClosure<V> extends Closure<V>; // A wrapper for Closure to support composition.\npublic abstract class ConversionHandler extends Object implements InvocationHandler, Serializable; // This class is a general adapter to map a call to a Java interface to a given delegate.\npublic class ConvertedClosure extends ConversionHandler implements Serializable; // This class is a general adapter to adapt a closure to any Java interface.\npublic class ConvertedMap extends ConversionHandler; // This class is a general adapter to adapt a map of closures to any Java interface.\npublic final class CurriedClosure<V> extends Closure<V>; // A wrapper for Closure to support currying.\npublic class DefaultCachedMethodKey extends MethodKey; // A default implementation of MethodKey\npublic class DefaultGroovyMethods extends DefaultGroovyMethodsSupport; // This class defines new groovy methods which appear on normal JDK classes inside the Groovy environment.\npublic class DefaultGroovyMethodsSupport extends Object; // Support methods for DefaultGroovyMethods and PluginDefaultMethods.\npublic class DefaultGroovyStaticMethods extends Object; // This class defines all the new static groovy methods which appear on normal JDK classes inside the Groovy environment.\npublic class DefaultMethodKey extends MethodKey; // A default implementation of MethodKey\npublic class EncodingGroovyMethods extends Object; // This class defines all the encoding/decoding groovy methods which enhance the normal JDK classes when inside the Groovy environment.\npublic class EncodingGroovyMethodsSupport extends Object; // Keep this constant in a separate file as it is troublesome for Antlr to parse for doc purposes.\npublic class FlushingStreamWriter extends OutputStreamWriter; // Stream writer which flushes after each write operation.\n", "des": "Runtime classes for Groovy - whether the dynamic interpreter is being used, the compiler or the bytecode generator."}
{"index": 248, "repo": "nutch-2.4", "code": "Package: automaton\n\nClasses and Interfaces: \nClass AutomatonURLFilter; // RegexURLFilterBase implementation based on the dk.brics.automaton Finite-State Automata for JavaTM.\n", "des": "URL filter plugin based on dk.brics.automaton Finite-State Automata for JavaTM."}
{"index": 3876, "repo": "solr-ltr-9.3.0", "code": "Package: model\n\nClasses and Interfaces: \nInterface NeuralNetworkModel.Activation;\nInterface NeuralNetworkModel.Layer;\nClass AdapterModel; // A scoring model whose initialization is completed via its AdapterModel.init(SolrResourceLoader) method.\nClass DefaultWrapperModel; // A scoring model that fetches the wrapped model from SolrResourceLoader.\nClass LinearModel; // A scoring model that computes scores using a dot product.\nClass LTRScoringModel; // A scoring model computes scores that can be used to rerank documents.\nClass MultipleAdditiveTreesModel; // A scoring model that computes scores based on the summation of multiple weighted trees.\nClass NeuralNetworkModel; // A scoring model that computes document scores using a neural network.\nClass WrapperModel; // A scoring model that wraps the other model.\nClass ModelException;\n", "des": "Contains Model related classes"}
{"index": 3669, "repo": "solr-core-9.3.0", "code": "Package: jul\n\nClasses and Interfaces: \nClass JulInfo;\nClass JulWatcher;\nClass RecordHandler;\n", "des": "JUL based implementation of LogWatcher"}
{"index": 1312, "repo": "groovy-all-4.0.13", "code": "Package: model\n\nClasses and Interfaces: \npublic class ClosureModel extends Object implements ValueModel, NestedValueModel; // Represents a value model using a closure to extract the value from some source model and an optional write closure for updating the value.\npublic class DefaultTableColumn extends TableColumn; // Represents a column using a ValueModel to extract the value.\npublic class DefaultTableModel extends AbstractTableModel; // A default table model made up of PropertyModels on a Value model.\nprotected static class DefaultTableModel.MyTableColumnModel extends DefaultTableColumnModel;\npublic class FormModel extends Object; // Represents a number of field models which can be ValueModel, PropertyModel, TableModel, TreeModel or nested FormModel instances\npublic interface NestedValueModel; // Represents a nested value model such as a PropertyModel or a ClosureModel\npublic class PropertyModel extends Object implements ValueModel, NestedValueModel; // Represents a property of a value as a model.\npublic class ValueHolder extends Object implements ValueModel; // A simple ValueModel implementation which is a holder of an object value.\npublic interface ValueModel; // Represents a model of a value\n", "des": "An MVC model package for working with user interfaces and data structures and arbitrary Java and Groovy objects"}
{"index": 3532, "repo": "opennlp-tools-2.2.0", "code": "Package: io\n\nClasses and Interfaces: \nClass BinaryGISModelReader; // A GISModelReader that reads models from a binary format.\nClass BinaryGISModelWriter; // A GISModelWriter that writes models in a binary format.\nClass BinaryQNModelReader; // A QNModelReader that reads models from a binary format.\nClass BinaryQNModelWriter; // A QNModelWriter that writes models in a binary format.\nClass GISModelReader; // The base class for readers of GIS models.\nClass GISModelWriter; // The base class for writers of GIS models.\nClass QNModelReader; // The base class for readers of QN models.\nClass QNModelWriter; // The base class for writers of models.\n", "des": "Package related to the I/O functionality of the maxent package including reading and writing models in several formats."}
{"index": 3167, "repo": "gson-2.10.1", "code": "Package: reflect\n\nClasses and Interfaces: \nClass TypeToken<T>; // Represents a generic type T.\n", "des": "This package provides utility classes for finding type information for generic types."}
{"index": 1206, "repo": "commons-math3-3.6.1", "code": "Package: correlation\n\nClasses and Interfaces: \nClass Covariance; // Computes covariances for pairs of arrays or columns of a matrix.\nClass KendallsCorrelation; // Implementation of Kendall's Tau-b rank correlation.\nClass PearsonsCorrelation; // Computes Pearson's product-moment correlation coefficients for pairs of arrays or columns of a matrix.\nClass SpearmansCorrelation; // Spearman's rank correlation.\nClass StorelessCovariance; // Covariance implementation that does not require input data to be stored in memory.\n", "des": "Correlations/Covariance computations."}
{"index": 2995, "repo": "spring-web-6.0.11", "code": "Package: client\n\nSub Packages: \npackage client.observation; // This package provides support for client HTTP Observation.\npackage client.reactive; // Abstractions for reactive HTTP client support including ClientHttpRequest and ClientHttpResponse as well as a ClientHttpConnector.\npackage client.support; // This package provides generic HTTP support classes, to be used by higher-level classes like RestTemplate.\n\nClasses and Interfaces: \npublic abstract class AbstractClientHttpRequest extends Object implements ClientHttpRequest; // Abstract base for ClientHttpRequest that makes sure that headers and body are not written multiple times.\npublic abstract class AbstractClientHttpRequestFactoryWrapper extends Object implements ClientHttpRequestFactory; // Abstract base class for ClientHttpRequestFactory implementations that decorate another request factory.\n@Deprecated(since=\"6.0\") public abstract class AbstractClientHttpResponse extends Object implements ClientHttpResponse;\npublic class BufferingClientHttpRequestFactory extends AbstractClientHttpRequestFactoryWrapper; // Wrapper for a ClientHttpRequestFactory that buffers all outgoing and incoming streams in memory.\npublic interface ClientHttpRequest extends HttpRequest, HttpOutputMessage; // Represents a client-side HTTP request.\n@FunctionalInterface public interface ClientHttpRequestExecution; // Represents the context of a client-side HTTP request execution.\n@FunctionalInterface public interface ClientHttpRequestFactory; // Factory for ClientHttpRequest objects.\n@FunctionalInterface public interface ClientHttpRequestInitializer; // Callback interface for initializing a ClientHttpRequest prior to it being used.\n@FunctionalInterface public interface ClientHttpRequestInterceptor; // Intercepts client-side HTTP requests.\npublic interface ClientHttpResponse extends HttpInputMessage, Closeable; // Represents a client-side HTTP response.\npublic class HttpComponentsClientHttpRequestFactory extends Object implements ClientHttpRequestFactory, org.springframework.beans.factory.DisposableBean; // ClientHttpRequestFactory implementation that uses Apache HttpComponents HttpClient to create requests.\npublic class InterceptingClientHttpRequestFactory extends AbstractClientHttpRequestFactoryWrapper; // ClientHttpRequestFactory wrapper with support for ClientHttpRequestInterceptors.\npublic final class MultipartBodyBuilder extends Object; // Prepare the body of a multipart request, resulting in a MultiValueMap<String, HttpEntity>.\npublic static interface MultipartBodyBuilder.PartBuilder; // Builder that allows for further customization of part headers.\n", "des": "Contains an abstraction over client-side HTTP."}
{"index": 2876, "repo": "spring-integration-core-6.1.2", "code": "Package: routingslip\n\nClasses and Interfaces: \npublic class ExpressionEvaluatingRoutingSlipRouteStrategy extends Object implements RoutingSlipRouteStrategy, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // The Expression based RoutingSlipRouteStrategy implementation.\npublic static class ExpressionEvaluatingRoutingSlipRouteStrategy.RequestAndReply extends Object;\n@FunctionalInterface public interface RoutingSlipRouteStrategy; // The RoutingSlip strategy to determine the next replyChannel.\n", "des": "Provides classes supporting the RoutingSlip pattern."}
{"index": 1770, "repo": "spring-data-mongodb-4.1.2", "code": "Package: cdi\n\nClasses and Interfaces: \npublic class MongoRepositoryBean<T> extends CdiRepositoryBean<T>; // CdiRepositoryBean to create Mongo repository instances.\npublic class MongoRepositoryExtension extends CdiRepositoryExtensionSupport; // CDI extension to export Mongo repositories.\n", "des": "CDI support for MongoDB specific repository implementation."}
{"index": 2982, "repo": "pulsar-broker-3.0.0", "code": "Package: servlet\n\nClasses and Interfaces: \npublic interface AdditionalServletWithPulsarService extends AdditionalServlet; // The additional servlet with pulsarService interface for support additional servlet to get pulsarService.\n", "des": "Pulsar broker servlet plugin."}
{"index": 607, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: namespace\n\nClasses and Interfaces: \nClass AbstractWiringNamespace; // Wiring Capability and Requirement Namespaces base class.\nClass BundleNamespace; // Bundle Capability and Requirement Namespace.\nClass ExecutionEnvironmentNamespace; // Execution Environment Capability and Requirement Namespace.\nClass HostNamespace; // Host Capability and Requirement Namespace.\nClass IdentityNamespace; // Identity Capability and Requirement Namespace.\nClass PackageNamespace; // Package Capability and Requirement Namespace.\n", "des": "Namespace Package Version 1.0."}
{"index": 3798, "repo": "lucene-analysis-common-9.7.0", "code": "Package: minhash\n\nClasses and Interfaces: \nClass MinHashFilter; // Generate min hash tokens from an incoming stream of tokens.\nClass MinHashFilterFactory; // TokenFilterFactory for MinHashFilter.\n", "des": "MinHash filtering (for LSH)."}
{"index": 508, "repo": "commons-vfs2-2.9.0", "code": "Package: cache\n\nClasses and Interfaces: \nClass AbstractFilesCache; // Abstract base class for FilesCache implementations.\nClass DefaultFilesCache; // A simple FilesCache implementation.\nClass LRUFilesCache; // This implementation caches every file using LRUMap.\nClass NullFilesCache; // A FilesCache implementation.\nClass OnCallRefreshFileObject; // This decorator refreshes the fileObject data on every call.\nClass SoftRefFilesCache; // This implementation caches every file as long as it is strongly reachable by the JVM.\nClass WeakRefFilesCache; // This implementation caches every file as long as it is strongly reachable by the java vm.\n", "des": "VFS File caching"}
{"index": 3440, "repo": "hibernate-core-5.6.15.Final", "code": "Package: lock\n\nClasses and Interfaces: \nInterface LockingStrategy; // A strategy abstraction for how locks are obtained in the underlying database.\nClass AbstractSelectLockingStrategy; // Base LockingStrategy implementation to support implementations based on issuing SQL SELECT statements\nClass OptimisticForceIncrementLockingStrategy; // An optimistic locking strategy that forces an increment of the version (after verifying that version hasn't changed).\nClass OptimisticLockingStrategy; // An optimistic locking strategy that verifies that the version hasn't changed (prior to transaction commit).\nClass PessimisticForceIncrementLockingStrategy; // A pessimistic locking strategy that increments the version immediately (obtaining an exclusive write lock).\nClass PessimisticReadSelectLockingStrategy; // A pessimistic locking strategy where the locks are obtained through select statements.\nClass PessimisticReadUpdateLockingStrategy; // A pessimistic locking strategy where the locks are obtained through update statements.\nClass PessimisticWriteSelectLockingStrategy; // A pessimistic locking strategy where the locks are obtained through select statements.\nClass PessimisticWriteUpdateLockingStrategy; // A pessimistic locking strategy where the locks are obtained through update statements.\nClass SelectLockingStrategy; // A locking strategy where the locks are obtained through select statements.\nClass UpdateLockingStrategy; // A locking strategy where the locks are obtained through update statements.\nClass LockingStrategyException; // Represents an error trying to apply a LockingStrategy to an entity\nClass OptimisticEntityLockException; // Represents an error trying to apply an optimistic LockingStrategy to an entity\nClass PessimisticEntityLockException; // Represents an error trying to apply a pessimistic LockingStrategy to an entity\n", "des": "Support for Dialect-specific locking strategies"}
{"index": 1434, "repo": "spring-boot-actuator-3.1.1", "code": "Package: startup\n\nClasses and Interfaces: \n@Endpoint(id=\"startup\") @ImportRuntimeHints(org.springframework.boot.actuate.startup.StartupEndpoint.StartupEndpointRuntimeHints.class) public class StartupEndpoint extends Object; // @Endpoint to expose the timeline of the application startup.\npublic static final class StartupEndpoint.StartupDescriptor extends Object implements OperationResponseBody; // Description of an application startup.\n", "des": "Actuator support for ApplicationStartup."}
{"index": 1100, "repo": "fontbox-3.0.0-beta1", "code": "Package: afm\n\nClasses and Interfaces: \nClass AFMParser; // This class is used to parse AFM(Adobe Font Metrics) documents.\nClass CharMetric; // This class represents a single character metric.\nClass Composite; // This class represents composite character data.\nClass CompositePart; // This class represents a part of composite character data.\nClass FontMetrics; // This is the outermost AFM type.\nClass KernPair; // This represents some kern pair data.\nClass Ligature; // This class represents a ligature, which is an entry of the CharMetrics.\nClass TrackKern; // This class represents a piece of track kerning data.\n", "des": "This package holds classes used to parse AFM(Adobe Font Metrics) files."}
{"index": 1683, "repo": "spring-integration-mqtt-6.1.2", "code": "Package: core\n\nClasses and Interfaces: \npublic abstract class AbstractMqttClientManager<T,C> extends Object implements ClientManager<T,C>, org.springframework.context.ApplicationEventPublisherAware; // Abstract class for MQTT client managers which can be a base for any common v3/v5 client manager implementation.\npublic interface ClientManager<T,C> extends org.springframework.context.SmartLifecycle, MqttComponent<C>; // A utility abstraction over MQTT client which can be used in any MQTT-related component without need to handle generic client callbacks, reconnects etc.\n@FunctionalInterface public static interface ClientManager.ConnectCallback; // A contract for a custom callback on connectComplete event from the client.\npublic class DefaultMqttPahoClientFactory extends Object implements MqttPahoClientFactory; // Creates a default MqttClient and a set of options as configured.\npublic static class DefaultMqttPahoClientFactory.Will extends Object;\npublic interface MqttComponent<T> extends org.springframework.beans.factory.BeanNameAware; // A component that interfaces with MQTT.\npublic interface MqttPahoClientFactory;\npublic interface MqttPahoComponent extends MqttComponent<org.eclipse.paho.client.mqttv3.MqttConnectOptions>; // An extension of MqttComponent for Eclipse Paho components.\npublic class Mqttv3ClientManager extends AbstractMqttClientManager<org.eclipse.paho.client.mqttv3.IMqttAsyncClient,org.eclipse.paho.client.mqttv3.MqttConnectOptions> implements org.eclipse.paho.client.mqttv3.MqttCallbackExtended; // A client manager implementation for MQTT v3 protocol.\npublic class Mqttv5ClientManager extends AbstractMqttClientManager<org.eclipse.paho.mqttv5.client.IMqttAsyncClient,org.eclipse.paho.mqttv5.client.MqttConnectionOptions> implements org.eclipse.paho.mqttv5.client.MqttCallback; // A client manager implementation for MQTT v5 protocol.\n", "des": "Provides core classes of the MqttAdapter module."}
{"index": 3577, "repo": "lucene-sandbox-9.7.0", "code": "Package: search\n\nClasses and Interfaces: \nClass CombinedFieldQuery; // A Query that treats multiple fields as a single stream and scores terms as if you had indexed them as a single term in a single field.\nClass CombinedFieldQuery.Builder; // A builder for CombinedFieldQuery.\nClass CoveringQuery; // A Query that allows to have a configurable number or required matches per document.\nClass LargeNumHitsTopDocsCollector; // Optimized collector for large number of hits.\nClass LatLonPointPrototypeQueries; // Holder class for prototype sandboxed queries\nClass MultiRangeQuery; // Abstract class for range queries involving multiple ranges against physical points such as IntPoints All ranges are logically ORed together\nClass MultiRangeQuery.Builder; // A builder for multirange queries.\nClass MultiRangeQuery.RangeClause; // Representation of a single clause in a MultiRangeQuery\nClass PhraseWildcardQuery; // A generalized version of PhraseQuery, built with one or more MultiTermQuery that provides term expansions for multi-terms (one of the expanded terms must match).\nClass PhraseWildcardQuery.Builder; // Builds a PhraseWildcardQuery.\nClass PhraseWildcardQuery.MultiTerm; // Phrase term with expansions.\nClass PhraseWildcardQuery.PhraseTerm; // All PhraseWildcardQuery.PhraseTerm are light and immutable.\nClass PhraseWildcardQuery.SingleTerm; // Phrase term with no expansion.\nClass PhraseWildcardQuery.TermBytesTermState; // Holds a pair of term bytes - term state.\nClass PhraseWildcardQuery.TermData; // Holds the TermState for all the collected Term, for a specific phrase term, for all segments.\nClass PhraseWildcardQuery.TermsData; // Holds the TermState and TermStatistics for all the matched and collected Term, for all phrase terms, for all segments.\nClass PhraseWildcardQuery.TermStats; // Accumulates the doc freq and total term freq.\nClass PhraseWildcardQuery.TestCounters; // Test counters incremented when assertions are enabled.\nClass ProfilerCollector; // This class wraps a Collector and times the execution of: - setScorer() - collect() - doSetNextReader() - needsScores()\nClass ProfilerCollectorResult; // Public class for profiled timings of the Collectors used in the search.\n", "des": "This package contains a flexible graph-based proximity query, TermAutomatonQuery, and geospatial queries."}
{"index": 2363, "repo": "spring-boot-3.1.1", "code": "Package: view\n\nClasses and Interfaces: \npublic class MustacheView extends org.springframework.web.servlet.view.AbstractTemplateView; // Spring MVC View using the Mustache template engine.\npublic class MustacheViewResolver extends org.springframework.web.servlet.view.AbstractTemplateViewResolver; // Spring MVC ViewResolver for Mustache.\n", "des": "Additional Views for use with Web MVC."}
{"index": 1011, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: namespace\n\nClasses and Interfaces: \nClass QNameEditor; // PropertyEditor for javax.xml.namespace.QName, to populate a property of type QName from a String value.\nClass QNameUtils; // Helper class for using QName.\nClass SimpleNamespaceContext; // Simple javax.xml.namespace.NamespaceContext implementation.\n", "des": "Provides classes that help with XML Namespace processing."}
{"index": 3216, "repo": "commons-configuration2-2.9.0", "code": "Package: convert\n\nClasses and Interfaces: \nInterface ConversionHandler; // An interface defining the possible data type conversions supported by the configuration framework.\nInterface ListDelimiterHandler; // Definition of an interface that controls the handling of list delimiters in configuration properties.\nInterface ValueTransformer; // Definition of an interface used by ListDelimiterHandler to perform additional transformations on behalf of a configuration when a property value is escaped.\nClass AbstractListDelimiterHandler; // An abstract base class for concrete ListDelimiterHandler implementations.\nClass DefaultConversionHandler; // A default implementation of the ConversionHandler interface.\nClass DefaultListDelimiterHandler; // The default implementation of the ListDelimiterHandler interface.\nClass DisabledListDelimiterHandler; // A specialized implementation of the ListDelimiterHandler interface which disables list splitting.\nClass LegacyListDelimiterHandler; // A specialized implementation of ListDelimiterHandler which simulates the list delimiter handling as it was used by PropertiesConfiguration in Commons Configuration 1.x.\nClass PropertyConverter; // A utility class to convert the configuration properties into any type.\n", "des": "This package contains interfaces and classes related to data type conversions."}
{"index": 3463, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface AnyAttributeFetch; // Models the requested fetching of an \"any\" attribute.\nInterface AttributeFetch; // Models a Fetch that is specifically for an attribute.\nInterface BidirectionalEntityReference; // Represents the circular side of a bi-directional entity association.\nInterface CollectionAttributeFetch; // Models the requested fetching of a persistent collection attribute.\nInterface CollectionFetchableElement; // A collection element which is a FetchSource.\nInterface CollectionFetchableIndex; // A collection index which is a FetchSource.\nInterface CollectionQuerySpace; // Models a QuerySpace for a persistent collection.\nInterface CollectionReference; // Represents a reference to a persistent collection either as a Return or as a CollectionAttributeFetch.\nInterface CollectionReturn; // Models the a persistent collection as root Return.\nInterface CompositeAttributeFetch; // Models the requested fetching of a composite attribute.\nInterface CompositeFetch; // Models the requested fetching of a composition (component/embeddable), which may or may not be an attribute.\nInterface CompositeQuerySpace; // Models a QuerySpace for a composition (component/embeddable).\nInterface EntityFetch; // Models the requested fetching of an entity attribute.\nInterface EntityIdentifierDescription; // Descriptor for the identifier of an entity as a FetchSource (which allows for key-many-to-one handling).\nInterface EntityQuerySpace; // Models a QuerySpace specific to an entity (EntityPersister).\nInterface EntityReference; // Represents a reference to an entity either as a return, fetch, or collection element or index.\nInterface EntityReturn; // Models the an entity as root Return.\nInterface Fetch; // Contract for associations that are being fetched.\nInterface FetchSource; // Contract for a FetchSource (aka, the thing that owns the fetched attribute).\nInterface Join; // Represents a join in the QuerySpace-sense.\nInterface JoinDefinedByMetadata; // Specialization of a Join that is defined by the metadata.\nInterface LoadPlan; // Describes a plan for performing a load of results.\nInterface QuerySpace; // Defines a persister reference (either entity or collection) or a composite reference.\nInterface QuerySpaces; // Models a collection of QuerySpace references and exposes the ability to find a QuerySpace by its UID\nInterface Return; // Represents a return value in the query results.\n", "des": "Defines the SPI for the building blocks that make up a LoadPlan."}
{"index": 1158, "repo": "commons-math3-3.6.1", "code": "Package: fitting\n\nSub Packages: \npackage fitting.leastsquares; // This package provides algorithms that minimize the residuals between observations and model values.\n\nClasses and Interfaces: \nClass AbstractCurveFitter; // Base class that contains common code for fitting parametric univariate real functions y = f(pi;x), where x is the independent variable and the pi are the parameters.\nClass AbstractCurveFitter.TheoreticalValuesFunction; // Vector function for computing function theoretical values.\nClass CurveFitter<T extends ParametricUnivariateFunction>; // As of 3.3.\nClass GaussianCurveFitter; // Fits points to a Gaussian function.\nClass GaussianCurveFitter.ParameterGuesser; // Guesses the parameters norm, mean, and sigma of a Gaussian.Parametric based on the specified observed points.\nClass GaussianFitter; // As of 3.3.\nClass GaussianFitter.ParameterGuesser; // Guesses the parameters norm, mean, and sigma of a Gaussian.Parametric based on the specified observed points.\nClass HarmonicCurveFitter; // Fits points to a harmonic oscillator function.\nClass HarmonicCurveFitter.ParameterGuesser; // This class guesses harmonic coefficients from a sample.\nClass HarmonicFitter; // As of 3.3.\nClass HarmonicFitter.ParameterGuesser; // This class guesses harmonic coefficients from a sample.\nClass PolynomialCurveFitter; // Fits points to a polynomial function.\nClass PolynomialFitter; // As of 3.3.\nClass SimpleCurveFitter; // Fits points to a user-defined function.\nClass WeightedObservedPoint; // This class is a simple container for weighted observed point in curve fitting.\nClass WeightedObservedPoints; // Simple container for weighted observed points used in curve fitting algorithms.\n", "des": "Classes to perform curve fitting."}
{"index": 2325, "repo": "spring-boot-3.1.1", "code": "Package: context\n\nClasses and Interfaces: \npublic class RSocketPortInfoApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>; // ApplicationContextInitializer that sets Environment properties for the ports that RSocketServer servers are actually listening on.\npublic class RSocketServerBootstrap extends Object implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.SmartLifecycle; // Bootstrap an RSocketServer and start it with the application context.\npublic class RSocketServerInitializedEvent extends org.springframework.context.ApplicationEvent; // Event to be published after the application context is refreshed and the RSocketServer is ready.\n", "des": "RSocket integrations with Spring Framework's ApplicationContext."}
{"index": 2430, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: expose\n\nClasses and Interfaces: \npublic enum EndpointExposure extends Enum<EndpointExposure>; // Technologies that can be used to expose an endpoint.\npublic class IncludeExcludeEndpointFilter<E extends org.springframework.boot.actuate.endpoint.ExposableEndpoint<?>> extends Object implements org.springframework.boot.actuate.endpoint.EndpointFilter<E>; // EndpointFilter that will filter endpoints based on include and exclude patterns.\n", "des": "Endpoint exposure logic used for auto-configuration and conditions."}
{"index": 1748, "repo": "spring-data-mongodb-4.1.2", "code": "Package: core\n\nSub Packages: \npackage core.aggregation; // Support for the MongoDB aggregation framework.\npackage core.annotation; // Core Spring Data MongoDB annotations not limited to a special use case (like Query,...).\npackage core.convert; // Spring Data MongoDB specific converter infrastructure.\npackage core.encryption; // Infrastructure for explicit encryption mechanism of Client-Side Field Level Encryption.\npackage core.geo; // Support for MongoDB geo-spatial queries.\npackage core.index; // Support for MongoDB document indexing.\npackage core.mapping; // Infrastructure for the MongoDB document-to-object mapping subsystem.\npackage core.mapreduce; // Support for MongoDB map-reduce operations.\npackage core.messaging; // MongoDB specific messaging support for listening to eg.\npackage core.query; // MongoDB specific query and update support.\npackage core.schema; // MongoDB-specific JSON schema implementation classes.\npackage core.script; // Abstraction classes javascript function execution within MongoDB Server.\npackage core.spel; // Support classes to transform SpEL expressions into MongoDB expressions.\npackage core.validation; // MongoDB schema validation specifics.\n\nClasses and Interfaces: \npublic interface BulkOperations; // Bulk operations for insert/update/remove actions on a collection.\npublic static enum BulkOperations.BulkMode extends Enum<BulkOperations.BulkMode>; // Mode for bulk operation.\npublic class ChangeStreamEvent<T> extends Object; // Message implementation specific to MongoDB Change Streams.\npublic class ChangeStreamOptions extends Object; // Options applicable to MongoDB Change Streams.\npublic static class ChangeStreamOptions.ChangeStreamOptionsBuilder extends Object; // Builder for creating ChangeStreamOptions.\npublic interface CollectionCallback<T>; // Callback interface for executing actions against a MongoCollection.\npublic class CollectionOptions extends Object; // Provides a simple wrapper to encapsulate the variety of settings you can use when creating a collection.\npublic static class CollectionOptions.CollectionChangeStreamOptions extends Object; // Encapsulation of options applied to define collections change stream behaviour.\npublic static class CollectionOptions.TimeSeriesOptions extends Object; // Options applicable to Time Series collections.\npublic static class CollectionOptions.ValidationOptions extends Object; // Encapsulation of ValidationOptions options.\npublic interface CollectionPreparer<T>; // Interface for functional preparation of a MongoCollection.\n", "des": "MongoDB core support."}
{"index": 3449, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface ConnectionObserver; // An observer of logical connection events.\nInterface InvalidatableWrapper<T>; // Specialized JdbcWrapper contract for wrapped objects that can additioanlly be invalidated\nInterface JdbcCoordinator; // Coordinates JDBC-related activities.\nInterface JdbcServices; // Contract for services around JDBC operations.\nInterface JdbcWrapper<T>; // Generic contract for wrapped JDBC objects.\nInterface NonDurableConnectionObserver; // Additional optional contract for connection observers to indicate that they should be released when the physical connection is released.\nInterface ResultSetReturn; // Contract for extracting ResultSets from Statements, executing Statements, managing Statement/ResultSet resources, and logging statement calls.\nInterface ResultSetWrapper;\nInterface SchemaNameResolver; // Contract for resolving the schema of a Connection.\nInterface SqlExceptionHelper.WarningHandler; // Contract for handling warnings\nInterface StatementPreparer; // Contracting for preparing SQL statements\nClass ConnectionObserverAdapter; // A no-op adapter for ConnectionObserver.\nClass SqlExceptionHelper; // Helper for handling SQLExceptions in various manners.\nClass SqlExceptionHelper.StandardWarningHandler; // Standard SQLWarning handler for logging warnings\nClass SqlExceptionHelper.WarningHandlerLoggingSupport; // Basic support for SqlExceptionHelper.WarningHandler implementations which handle warnings\nClass SqlStatementLogger; // Centralize logging for SQL statements.\nClass TypeInfo; // Models type info extracted from DatabaseMetaData.getTypeInfo()\nEnum TypeNullability; // Describes the instrinsic nullability of a data type as reported by the JDBC driver.\nEnum TypeSearchability; // Describes the searchability of a data type as reported by the JDBC driver.\n", "des": "SPI contracts for supporting various aspects of JDBC interaction"}
{"index": 1188, "repo": "commons-math3-3.6.1", "code": "Package: linear\n\nClasses and Interfaces: \nClass LinearConstraint; // A linear constraint for a linear optimization problem.\nClass LinearConstraintSet; // Class that represents a set of linear constraints.\nClass LinearObjectiveFunction; // An objective function for a linear optimization problem.\nClass LinearOptimizer; // Base class for implementing linear optimizers.\nClass NonNegativeConstraint; // A constraint for a linear optimization problem indicating whether all variables must be restricted to non-negative values.\nClass SimplexSolver; // Solves a linear problem using the \"Two-Phase Simplex\" method.\nClass SolutionCallback; // A callback object that can be provided to a linear optimizer to keep track of the best solution found.\nEnum PivotSelectionRule; // Pivot selection rule to the use for a Simplex solver.\nEnum Relationship; // Types of relationships between two cells in a Solver LinearConstraint.\nClass NoFeasibleSolutionException; // This class represents exceptions thrown by optimizers when no solution fulfills the constraints.\nClass UnboundedSolutionException; // This class represents exceptions thrown by optimizers when a solution escapes to infinity.\n", "des": "Optimization algorithms for linear constrained problems."}
{"index": 2604, "repo": "wicket-util-10.0.0-M1", "code": "Package: crypt\n\nClasses and Interfaces: \npublic abstract class AbstractCrypt extends Object implements ICrypt; // Abstract base class for JCE based ICrypt implementations.\npublic class CharEncoding extends Object; // Character encoding names required of every implementation of the Java platform.\npublic class CipherUtils extends Object; // Utility class meant to help building Cipher.\npublic class CryptFactoryCachingDecorator extends Object implements ICryptFactory; // ICryptFactory decorator that caches the call to ICryptFactory.newCrypt()\npublic interface ICrypt; // Encryption and decryption implementations are accessed through this interface.\npublic interface ICryptFactory; // Interface used to generate crypt objects\npublic class NoCrypt extends Object implements ICrypt; // Due to legal reasons in some countries the JRE is shipped without a security provider.\npublic class NoCryptFactory extends Object implements ICryptFactory; // Crypt factory implementation for noop NoCrypt class\npublic class StringUtils extends Object; // Converts String to and from bytes using the encodings required by the Java specification.\npublic class SunJceCrypt extends AbstractCrypt; // Provide some simple means to encrypt and decrypt strings such as passwords.\npublic class TrivialCrypt extends AbstractCrypt; // THIS CLASS IS FOR TESTING PURPOSES ONLY.\n", "des": "Encryption support for forms."}
{"index": 2705, "repo": "spring-integration-ftp-6.1.2", "code": "Package: outbound\n\nClasses and Interfaces: \npublic class FtpMessageHandler extends org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<org.apache.commons.net.ftp.FTPFile>; // The FTP specific FileTransferringMessageHandler extension.\n", "des": "Provides classes for the FTP outbound channel adapter."}
