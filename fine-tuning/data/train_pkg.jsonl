{"index": 398, "repo": "amqp-client-5.18.0", "code": "package utility;\n\nInterface SensibleClone<T extends SensibleClone<T>>; // This interface exists as a workaround for the annoyingness of java.lang.Cloneable.\nClass BlockingCell<T>; // Simple one-shot IPC mechanism.\nClass BlockingValueOrException<V,E extends Throwable & SensibleClone<E>>;\nClass IntAllocator; // A class for allocating integers from a given range that uses a BitSet representation of the free integers.\nClass Utility; // Catch-all holder class for static helper methods.\nClass ValueOrException<V,E extends Throwable & SensibleClone<E>>;\n", "des": "Utility package of helper classes, mostly used in the implementation code."}
{"index": 502, "repo": "beam-sdks-java-core-2.49.0", "code": "package windowing;\n\nClass AfterAll; // A composite Trigger that fires when all of its sub-triggers are ready.\nClass AfterEach; // A composite Trigger that executes its sub-triggers in order.\nClass AfterFirst; // A composite Trigger that fires once after at least one of its sub-triggers have fired.\nClass AfterPane; // A Trigger that fires at some point after a specified number of input elements have arrived.\nClass AfterProcessingTime; // A Trigger trigger that fires at a specified point in processing time, relative to when input first arrives.\nClass AfterSynchronizedProcessingTime; // FOR INTERNAL USE ONLY.\nClass AfterWatermark; // AfterWatermark triggers fire based on progress of the system watermark.\nClass AfterWatermark.AfterWatermarkEarlyAndLate;\nClass AfterWatermark.FromEndOfWindow; // A watermark trigger targeted relative to the end of the window.\nClass BoundedWindow; // A BoundedWindow represents window information assigned to data elements.\nClass CalendarWindows; // A collection of WindowFns that windows values into calendar-based windows such as spans of days, months, or years.\nClass CalendarWindows.DaysWindows; // A WindowFn that windows elements into periods measured by days.\nClass CalendarWindows.MonthsWindows; // A WindowFn that windows elements into periods measured by months.\nClass CalendarWindows.YearsWindows; // A WindowFn that windows elements into periods measured by years.\nClass DefaultTrigger; // A trigger that is equivalent to Repeatedly.forever(AfterWatermark.pastEndOfWindow()).\nClass FixedWindows; // A WindowFn that windows values into fixed-size timestamp-based windows.\nClass GlobalWindow; // The default window into which all data is placed (via GlobalWindows).\nClass GlobalWindow.Coder; // GlobalWindow.Coder for encoding and decoding GlobalWindows.\nClass GlobalWindows; // A WindowFn that assigns all data to the same window.\nClass IntervalWindow; // An implementation of BoundedWindow that represents an interval from IntervalWindow.start (inclusive) to IntervalWindow.end (exclusive).\nClass IntervalWindow.IntervalWindowCoder; // Encodes an IntervalWindow as a pair of its upper bound and duration.\nClass MergeOverlappingIntervalWindows; // For internal use only; no backwards compatibility guarantees.\nClass Never; // A Trigger which never fires.\n", "des": "Defines the Window transform for dividing the elements in a PCollection into windows, and the Trigger for controlling when those elements are output."}
{"index": 3145, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface AliasResolutionContext; // Provides aliases that are used by load queries and ResultSet processors.\nInterface CollectionReferenceAliases;\nInterface EntityReferenceAliases; // Aggregates the alias/suffix information in relation to an EntityReference todo : add a contract (interface) that can be shared by entity and collection alias info objects as lhs/rhs of a join ?\nInterface LoadQueryDetails;\nInterface LockModeResolver;\n", "des": "Defines the SPI for the load query generated for the LoadPlan and the ResultSet processor."}
{"index": 895, "repo": "commons-jcs3-core-3.1", "code": "package remote;\n\nClass AbstractRemoteAuxiliaryCache<K,V>; // Abstract base for remote caches.\nClass AbstractRemoteCacheListener<K,V>; // Shared listener base.\nClass AbstractRemoteCacheNoWaitFacade<K,V>; // An abstract base for the No Wait Facade.\nClass CommonRemoteCacheAttributes; // Attributes common to remote cache client and server.\nClass RemoteCache<K,V>; // Client proxy for an RMI remote cache.\nClass RemoteCacheAttributes; // These objects are used to configure the remote cache client.\nClass RemoteCacheFactory; // The RemoteCacheFactory creates remote caches for the cache hub.\nClass RemoteCacheFailoverRunner<K,V>; // Functionality moved to RemoteCacheNoWaitFacade\nClass RemoteCacheListener<K,V>; // Registered with RemoteCache server.\nClass RemoteCacheManager; // An instance of RemoteCacheManager corresponds to one remote connection of a specific host and port.\nClass RemoteCacheMonitor; // Used to monitor and repair any failed connection for the remote cache service.\nClass RemoteCacheNoWait<K,V>; // The RemoteCacheNoWait wraps the RemoteCacheClient.\nClass RemoteCacheNoWaitFacade<K,V>; // Used to provide access to multiple services under nowait protection.\nClass RemoteLocation; // Location of the RMI registry.\nClass RemoteUtils; // This class provides some basic utilities for doing things such as starting the registry properly.\n", "des": "Root package for the remote auxiliary cache."}
{"index": 2782, "repo": "spring-security-ldap-6.1.2", "code": "package search;\n\npublic class FilterBasedLdapUserSearch extends Object implements LdapUserSearch; // LdapUserSearch implementation which uses an Ldap filter to locate the user.\npublic interface LdapUserSearch; // Obtains a user's information from the LDAP directory given a login name.\n", "des": "LdapUserSearch implementations."}
{"index": 3152, "repo": "tika-core-2.8.0", "code": "package tika;\n\npackage tika.config; // Tika configuration tools.\npackage tika.detect; // Media type detection.\npackage tika.exception; // Tika exception.\npackage tika.extractor; // Extraction of component documents.\npackage tika.fork; // Forked parser.\npackage tika.io; // IO utilities.\npackage tika.metadata; // Multi-valued metadata container, and set of constant metadata fields.\npackage tika.mime; // Media type information.\npackage tika.parser; // Tika parsers.\npackage tika.sax; // SAX utilities.\npackage tika.utils; // Utilities.\nClass Tika; // Facade class for accessing Tika functionality.\n", "des": "Apache Tika."}
{"index": 3080, "repo": "spring-ws-core-4.0.5", "code": "package client;\n\npackage client.core; // Contains core classes for SOAP-specific client-side Spring-WS support.\npublic class SoapFaultClientException extends WebServiceFaultException; // Thrown by SoapFaultMessageResolver when the response message has a fault.\n", "des": "Contains classes for SOAP-specific client-side Spring-WS support."}
{"index": 1336, "repo": "groovy-all-4.0.13", "code": "package reflection;\n\npublic class CacheAccessControlException extends GroovyRuntimeException;\npublic class CachedClass extends Object;\npublic static class CachedClass.CachedMethodComparatorByName extends Object implements Comparator<CachedMethod>;\npublic static class CachedClass.CachedMethodComparatorWithString extends Object implements Comparator;\npublic class CachedConstructor extends ParameterTypes;\npublic class CachedField extends MetaProperty;\npublic class CachedMethod extends MetaMethod implements Comparable;\npublic class ClassInfo extends Object implements Finalizable; // Handle for all information we want to keep about the class\npublic static interface ClassInfo.ClassInfoAction;\npublic class ClassLoaderForClassArtifacts extends ClassLoader;\npublic abstract class GeneratedMetaMethod extends MetaMethod;\npublic static class GeneratedMetaMethod.DgmMethodRecord extends Object implements Serializable;\npublic static class GeneratedMetaMethod.Proxy extends GeneratedMetaMethod;\npublic interface GroovyClassValue<T>; // Abstraction for Java version dependent ClassValue implementations.\npublic static interface GroovyClassValue.ComputeValue<T>;\npublic class MixinInMetaClass extends Object;\npublic class ParameterTypes extends Object;\npublic class ReflectionCache extends Object;\npublic class ReflectionUtils extends Object; // This class contains utility methods to determine which class called the current class to multiple levels of depth.\npublic class SunClassLoader extends ClassLoader; // Special class loader, which when running on Sun VM allows to generate accessor classes for any method\n", "des": "Internal classes for assisting with reflection."}
{"index": 3316, "repo": "opencms-core-15.0", "code": "package security;\n\nInterface I_CmsAuthorizationHandler; // Defines general authorization methods.\nInterface I_CmsAuthorizationHandler.I_PrivilegedLoginAction; // Class providing the privileged login action.\nInterface I_CmsCredentialsResolver; // This interface can be used to override or replace user names or passwords which occur in the OpenCms configuration, for example to hide passwords from users who can read the configuration files.\nInterface I_CmsLoginAction; // Interface used to provide a protected login method.\nInterface I_CmsPasswordGenerator;\nInterface I_CmsPasswordHandler; // Defines methods for OpenCms password validation.\nInterface I_CmsPasswordSecurityEvaluator; // Password handler implementing this interface allow the password security to be evaluated.\nInterface I_CmsPermissionHandler; // Permission handler interface.\nInterface I_CmsPrincipal; // Representation of an identity in the cms (currently user or group), used to define permissions on a resource.\nInterface I_CmsValidationHandler; // Defines general validation methods.\nClass CmsAccessControlEntry; // An access control entry defines the permissions of a user or group for a distinct resource.\nClass CmsAccessControlList; // An access control list contains the permission sets of all principals for a distinct resource that are calculated on the permissions defined by various access control entries.\nClass CmsAdvancedPasswordHandler; // Validates the user passwords in with advanced password requirements.\nClass CmsDefaultAuthorizationHandler; // Defines default authorization methods.\nClass CmsDefaultCredentialsResolver; // Default implementation of a I_CmsCredentialResolver, which does nothing but return the credential which was passed in.\nClass CmsDefaultPasswordGenerator; // Default Password Generator class.\nClass CmsDefaultPasswordHandler; // Default implementation for OpenCms password validation, just checks if a password is at last 4 characters long.\nClass CmsDefaultPermissionHandler; // Generic base driver interface.\nClass CmsDefaultValidationHandler; // Default implementation for the validation handler.\nClass CmsOrganizationalUnit; // An organizational unit in OpenCms.\nClass CmsOrgUnitManager; // This manager provide access to the organizational unit related operations.\nClass CmsPasswordInfo; // Validating bean for changing the password.\nClass CmsPermissionSet; // An immutable permission set that contains both allowed and denied permissions as bitsets.\nClass CmsPermissionSetCustom; // A custom permission set that can be modified during runtime and contains both allowed and denied permissions as bitsets.\n", "des": "Access control and security classes for the OpenCms ACL permission system."}
{"index": 3050, "repo": "spring-web-6.0.11", "code": "package pattern;\n\npublic class PathPattern extends Object implements Comparable<PathPattern>; // Representation of a parsed path pattern.\npublic static class PathPattern.PathMatchInfo extends Object; // Holder for URI variables and path parameters (matrix variables) extracted based on the pattern for a given matched path.\npublic static class PathPattern.PathRemainingMatchInfo extends Object; // Holder for the result of a match on the start of a pattern.\npublic class PathPatternParser extends Object; // Parser for URI path patterns producing PathPattern instances that can then be matched to requests.\npublic class PathPatternRouteMatcher extends Object implements org.springframework.util.RouteMatcher; // RouteMatcher built on PathPatternParser that uses PathContainer and PathPattern as parsed representations of routes and patterns.\npublic class PatternParseException extends IllegalArgumentException; // Exception that is thrown when there is a problem with the pattern being parsed.\npublic static enum PatternParseException.PatternMessage extends Enum<PatternParseException.PatternMessage>; // The messages that can be included in a PatternParseException when there is a parse failure.\n", "des": "Dedicated support for matching HTTP request paths."}
{"index": 1955, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package liquibase;\n\npublic class DataSourceClosingSpringLiquibase extends liquibase.integration.spring.SpringLiquibase implements org.springframework.beans.factory.DisposableBean; // A custom SpringLiquibase extension that closes the underlying DataSource once the database has been migrated.\n@AutoConfiguration(after={DataSourceAutoConfiguration.class,HibernateJpaAutoConfiguration.class}) @ConditionalOnClass({liquibase.integration.spring.SpringLiquibase.class,liquibase.change.DatabaseChange.class}) @ConditionalOnProperty(prefix=\"spring.liquibase\", name=\"enabled\", matchIfMissing=true) @Conditional(org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration.LiquibaseDataSourceCondition.class) @Import(org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration.LiquibaseAutoConfigurationRuntimeHints.class) public class LiquibaseAutoConfiguration extends Object; // Auto-configuration for Liquibase.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.jdbc.core.ConnectionCallback.class) @ConditionalOnMissingBean(liquibase.integration.spring.SpringLiquibase.class) @EnableConfigurationProperties(LiquibaseProperties.class) public static class LiquibaseAutoConfiguration.LiquibaseConfiguration extends Object;\npublic interface LiquibaseConnectionDetails extends ConnectionDetails; // Details required for Liquibase to establish a connection to an SQL service using JDBC.\n@Target({FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Qualifier public @interface LiquibaseDataSource; // Qualifier annotation for a DataSource to be injected in to Liquibase.\n@ConfigurationProperties(prefix=\"spring.liquibase\", ignoreUnknownFields=false) public class LiquibaseProperties extends Object; // Configuration properties to configure SpringLiquibase.\n", "des": "Auto-configuration for Liquibase."}
{"index": 3322, "repo": "opencms-core-15.0", "code": "package actions;\n\nInterface I_CmsADEAction; // Interface for actions used within the ADE context.\nInterface I_CmsDefaultAction; // Marks workplace actions as an default action to be executed on item click within the file table.\nInterface I_CmsWorkplaceAction; // Workplace action interface.\nClass A_CmsEditFileAction; // Action to edit a file given by the file param.\nClass A_CmsGalleryDialogAction; // Class representing an abstract gallery dialog action.\nClass A_CmsJSPAction; // Abstract class for actions to display a JSP file in a vaadin window.\nClass A_CmsToolbarAction; // Workplace action only visible in the toolbar context menus, not within the file table.\nClass A_CmsWorkplaceAction; // Abstract workplace actions class providing helper methods.\nClass CmsAboutDialogAction; // The about dialog action.\nClass CmsAvailabilityDialogAction; // The availability dialog action.\nClass CmsCategoriesDialogAction; // The categories dialog action.\nClass CmsChangeTypeDialogAction; // The change type dialog action.\nClass CmsContextMenuActionItem; // A workplace action context menu item.\nClass CmsCopyDialogAction; // The copy move dialog action.\nClass CmsCopyPageDialogAction; // Action for the 'copy page' dialog.\nClass CmsCopyToProjectDialogAction; // The copy to project dialog action.\nClass CmsDeleteDialogAction; // The delete dialog action.\nClass CmsDirectPublishDialogAction; // The direct publish dialog action.\nClass CmsDisplayAction; // The display action.\nClass CmsEditCodeDialogAction; // The edit control code dialog action.\nClass CmsEditContentAction; // Action to logout.\nClass CmsEditDialogAction; // The edit dialog action.\nClass CmsEditPageAction; // The edit page action.\nClass CmsEditPointerAction; // Action for editing external links resources.\nClass CmsEditPropertyAction; // The edit table property action.\nClass CmsEditSmallElementsAction; // Action to logout.\nClass CmsEditUserDialogAction; // The delete dialog action.\nClass CmsFavoriteDialogAction; // The action for the favorite dialog.\nClass CmsFormEditDialogAction; // The form edit dialog action.\nClass CmsGalleryDialogAction; // The gallery dialog action.\nClass CmsGalleryOptimizeDialogAction; // The gallery optimize dialog action.\n", "des": "Contains classes for workplace actions."}
{"index": 3441, "repo": "hibernate-core-5.6.15.Final", "code": "package lock;\n\nInterface LockingStrategy; // A strategy abstraction for how locks are obtained in the underlying database.\nClass AbstractSelectLockingStrategy; // Base LockingStrategy implementation to support implementations based on issuing SQL SELECT statements\nClass OptimisticForceIncrementLockingStrategy; // An optimistic locking strategy that forces an increment of the version (after verifying that version hasn't changed).\nClass OptimisticLockingStrategy; // An optimistic locking strategy that verifies that the version hasn't changed (prior to transaction commit).\nClass PessimisticForceIncrementLockingStrategy; // A pessimistic locking strategy that increments the version immediately (obtaining an exclusive write lock).\nClass PessimisticReadSelectLockingStrategy; // A pessimistic locking strategy where the locks are obtained through select statements.\nClass PessimisticReadUpdateLockingStrategy; // A pessimistic locking strategy where the locks are obtained through update statements.\nClass PessimisticWriteSelectLockingStrategy; // A pessimistic locking strategy where the locks are obtained through select statements.\nClass PessimisticWriteUpdateLockingStrategy; // A pessimistic locking strategy where the locks are obtained through update statements.\nClass SelectLockingStrategy; // A locking strategy where the locks are obtained through select statements.\nClass UpdateLockingStrategy; // A locking strategy where the locks are obtained through update statements.\nClass LockingStrategyException; // Represents an error trying to apply a LockingStrategy to an entity\nClass OptimisticEntityLockException; // Represents an error trying to apply an optimistic LockingStrategy to an entity\nClass PessimisticEntityLockException; // Represents an error trying to apply a pessimistic LockingStrategy to an entity\n", "des": "Support for Dialect-specific locking strategies"}
{"index": 434, "repo": "kafka-streams-3.5.0", "code": "package query;\n\nInterface Query<R>; // Marker interface that all interactive queries must implement (see KafkaStreams.query(StateQueryRequest)).\nInterface QueryResult<R>; // Container for a single partition's result when executing a StateQueryRequest.\nClass KeyQuery<K,V>; // Interactive query for retrieving a single record based on its key.\nClass Position; // A representation of a position vector with respect to a set of topic partitions.\nClass PositionBound; // A class bounding the processing state Position during queries.\nClass QueryConfig; // Runtime configuration parameters\nClass RangeQuery<K,V>; // Interactive query for issuing range queries and scans over KeyValue stores.\nClass StateQueryRequest<R>; // The request object for Interactive Queries.\nClass StateQueryRequest.InStore; // A progressive builder interface for creating StoreQueryRequests.\nClass StateQueryResult<R>; // The response object for interactive queries.\nClass WindowKeyQuery<K,V>;\nClass WindowRangeQuery<K,V>;\nEnum FailureReason; // This enumeration type captures the various top-level reasons that a particular partition of a store would fail to execute a query.\n", "des": "Provides a query API (aka Interactive Queries) over state stores, for extracting data from a stateful Kafka Streams application."}
{"index": 2616, "repo": "wicket-util-10.0.0-M1", "code": "package thread;\n\n@FunctionalInterface public interface ICode; // Interface to an arbitrary piece of code that runs and can do logging.\npublic final class Lock extends Object; // Type-safe monitor class to be used in place of Object for readability.\npublic final class Task extends Object; // Runs a block of code periodically.\n", "des": "Threading utilities."}
{"index": 3886, "repo": "solr-solrj-9.3.0", "code": "package embedded;\n\nClass SSLConfig; // Encapsulates settings related to SSL Configuration.\n", "des": "SolrJ client implementations for embedded solr access."}
{"index": 2525, "repo": "spring-security-core-6.1.2", "code": "package vote;\n\n@Deprecated public abstract class AbstractAccessDecisionManager extends Object implements AccessDecisionManager, org.springframework.beans.factory.InitializingBean, org.springframework.context.MessageSourceAware;\n@Deprecated public abstract class AbstractAclVoter extends Object implements AccessDecisionVoter<org.aopalliance.intercept.MethodInvocation>;\n@Deprecated public class AffirmativeBased extends AbstractAccessDecisionManager;\n@Deprecated public class AuthenticatedVoter extends Object implements AccessDecisionVoter<Object>;\n@Deprecated public class ConsensusBased extends AbstractAccessDecisionManager;\n@Deprecated public class RoleHierarchyVoter extends RoleVoter;\n@Deprecated public class RoleVoter extends Object implements AccessDecisionVoter<Object>;\n@Deprecated public class UnanimousBased extends AbstractAccessDecisionManager;\n", "des": "Implements a vote-based approach to authorization decisions."}
{"index": 2240, "repo": "spring-security-acl-6.1.2", "code": "package model;\n\npublic interface AccessControlEntry extends Serializable; // Represents an individual permission assignment within an Acl.\npublic interface Acl extends Serializable; // Represents an access control list (ACL) for a domain object.\npublic interface AclCache; // A caching layer for JdbcAclService.\npublic abstract class AclDataAccessException extends RuntimeException; // Abstract base class for Acl data operations.\npublic interface AclService; // Provides retrieval of Acl instances.\npublic class AlreadyExistsException extends AclDataAccessException; // Thrown if an Acl entry already exists for the object.\npublic interface AuditableAccessControlEntry extends AccessControlEntry; // Represents an ACE that provides auditing information.\npublic interface AuditableAcl extends MutableAcl; // A mutable ACL that provides audit capabilities.\npublic class ChildrenExistException extends AclDataAccessException; // Thrown if an Acl cannot be deleted because children Acls exist.\npublic interface MutableAcl extends Acl; // A mutable Acl.\npublic interface MutableAclService extends AclService; // Provides support for creating and storing Acl instances.\npublic class NotFoundException extends AclDataAccessException; // Thrown if an ACL-related object cannot be found.\npublic interface ObjectIdentity extends Serializable; // Represents the identity of an individual domain object instance.\npublic interface ObjectIdentityGenerator; // Strategy which creates an ObjectIdentity from an object identifier (such as a primary key) and type information.\npublic interface ObjectIdentityRetrievalStrategy; // Strategy interface that provides the ability to determine which ObjectIdentity will be returned for a particular domain object\npublic interface OwnershipAcl extends MutableAcl; // A mutable ACL that provides ownership capabilities.\npublic interface Permission extends Serializable; // Represents a permission granted to a Sid for a given domain object.\npublic interface PermissionGrantingStrategy; // Allow customization of the logic for determining whether a permission or permissions are granted to a particular sid or sids by an Acl.\npublic interface Sid extends Serializable; // A security identity recognised by the ACL system.\npublic interface SidRetrievalStrategy; // Strategy interface that provides an ability to determine the Sid instances applicable for an Authentication.\npublic class UnloadedSidException extends AclDataAccessException; // Thrown if an Acl cannot perform an operation because it only loaded a subset of Sids and the caller has requested details for an unloaded Sid .\n", "des": "Interfaces and shared classes to manage access control lists (ACLs) for domain object instances."}
{"index": 308, "repo": "pdfbox-3.0.0-beta1", "code": "package measurement;\n\nClass PDMeasureDictionary; // This class represents a measure dictionary.\nClass PDNumberFormatDictionary; // This class represents a number format dictionary.\nClass PDRectlinearMeasureDictionary; // This class represents a rectlinear measure dictionary.\nClass PDViewportDictionary; // This class represents a viewport dictionary.\n", "des": "The measurement package contains classes that work with elements specifying measure properties."}
{"index": 2593, "repo": "spring-rabbit-3.0.6", "code": "package api;\n\npublic interface ChannelAwareBatchMessageListener extends ChannelAwareMessageListener; // Used to receive a batch of messages if the container supports it.\n@FunctionalInterface public interface ChannelAwareMessageListener extends org.springframework.amqp.core.MessageListener; // A message listener that is aware of the Channel on which the message was received.\n@FunctionalInterface public interface RabbitListenerErrorHandler; // An error handler which is called when a {code @RabbitListener} method throws an exception.\n", "des": "Provides Additional APIs for listeners."}
{"index": 2539, "repo": "spring-security-core-6.1.2", "code": "package cache;\n\npublic class NullUserCache extends Object implements UserCache; // Does not perform any caching.\npublic class SpringCacheBasedUserCache extends Object implements UserCache; // Caches UserDetails instances in a Spring defined Cache.\n", "des": "Implementations of UserCache."}
{"index": 1456, "repo": "spring-data-redis-3.1.2", "code": "package script;\n\npublic class DefaultReactiveScriptExecutor<K> extends Object implements ReactiveScriptExecutor<K>; // Default implementation of ReactiveScriptExecutor.\npublic class DefaultRedisScript<T> extends Object implements RedisScript<T>, InitializingBean; // Default implementation of RedisScript.\npublic class DefaultScriptExecutor<K> extends Object implements ScriptExecutor<K>; // Default implementation of ScriptExecutor.\npublic abstract class DigestUtils extends Object; // Utilties for working with MessageDigest\npublic interface ReactiveScriptExecutor<K>; // Executes RedisScripts using reactive infrastructure.\npublic interface RedisScript<T>; // A script to be executed using the Redis scripting support available as of version 2.6\npublic interface ScriptExecutor<K>; // Executes RedisScripts\npublic class ScriptingException extends NestedRuntimeException; // RuntimeException thrown when issues occur with RedisScripts\n", "des": "Lua script execution abstraction."}
{"index": 3417, "repo": "commons-imaging-1.0-alpha3", "code": "package icc;\n\nClass IccConstants;\nClass IccProfileInfo;\nClass IccProfileParser;\nClass IccTag;\nEnum IccTagDataTypes;\nEnum IccTagTypes;\n", "des": "ICC color profile."}
{"index": 3023, "repo": "spring-web-6.0.11", "code": "package support;\n\npublic class ConfigurableWebBindingInitializer extends Object implements WebBindingInitializer; // Convenient WebBindingInitializer for declarative configuration in a Spring application context.\npublic class DefaultDataBinderFactory extends Object implements WebDataBinderFactory; // Create a WebRequestDataBinder instance and initialize it with a WebBindingInitializer.\npublic class DefaultSessionAttributeStore extends Object implements SessionAttributeStore; // Default implementation of the SessionAttributeStore interface, storing the attributes in the WebRequest session (i.e.\npublic interface SessionAttributeStore; // Strategy interface for storing model attributes in a backend session.\npublic interface SessionStatus; // Simple interface that can be injected into handler methods, allowing them to signal that their session processing is complete.\npublic class SimpleSessionStatus extends Object implements SessionStatus; // Simple implementation of the SessionStatus interface, keeping the complete flag as an instance variable.\npublic class SpringWebConstraintValidatorFactory extends Object implements ConstraintValidatorFactory; // JSR-303 ConstraintValidatorFactory implementation that delegates to the current Spring WebApplicationContext for creating autowired ConstraintValidator instances.\n@FunctionalInterface public interface WebArgumentResolver; // SPI for resolving custom arguments for a specific handler method parameter.\npublic interface WebBindingInitializer; // Callback interface for initializing a WebDataBinder for performing data binding in the context of a specific web request.\npublic interface WebDataBinderFactory; // A factory for creating a WebDataBinder instance for a named target object.\npublic class WebExchangeBindException extends ServerWebInputException implements org.springframework.validation.BindingResult; // ServerWebInputException subclass that indicates a data binding or validation failure.\npublic class WebExchangeDataBinder extends WebDataBinder; // Specialized DataBinder to perform data binding from URL query parameters or form data in the request data to Java objects.\npublic class WebRequestDataBinder extends WebDataBinder; // Special DataBinder to perform data binding from web request parameters to JavaBeans, including support for multipart files.\n", "des": "Support classes for web data binding."}
{"index": 1031, "repo": "hadoop-aws-3.3.6", "code": "package magic;\n\nClass MagicCommitTracker; // Put tracker for Magic commits.\nClass MagicS3GuardCommitter; // This is a dedicated committer which requires the \"magic\" directory feature of the S3A Filesystem to be enabled; it then uses paths for task and job attempts in magic paths, so as to ensure that the final output goes direct to the destination directory.\nClass MagicS3GuardCommitterFactory; // Factory for the Magic committer.\n", "des": "This is the \"Magic\" committer and support."}
{"index": 2998, "repo": "spring-web-6.0.11", "code": "package reactive;\n\npublic abstract class AbstractClientHttpRequest extends Object implements ClientHttpRequest; // Base class for ClientHttpRequest implementations.\npublic interface ClientHttpConnector; // Abstraction over HTTP clients driving the underlying HTTP client to connect to the origin server and provide all necessary infrastructure to send a ClientHttpRequest and receive a ClientHttpResponse.\npublic interface ClientHttpRequest extends ReactiveHttpOutputMessage; // Represents a client-side reactive HTTP request.\npublic class ClientHttpRequestDecorator extends Object implements ClientHttpRequest; // Wraps another ClientHttpRequest and delegates all methods to it.\npublic interface ClientHttpResponse extends ReactiveHttpInputMessage; // Represents a client-side reactive HTTP response.\npublic class ClientHttpResponseDecorator extends Object implements ClientHttpResponse; // Wraps another ClientHttpResponse and delegates all methods to it.\npublic class HttpComponentsClientHttpConnector extends Object implements ClientHttpConnector, Closeable; // ClientHttpConnector implementation for the Apache HttpComponents HttpClient 5.x.\npublic class JdkClientHttpConnector extends Object implements ClientHttpConnector; // ClientHttpConnector for the Java HttpClient.\npublic class JdkHttpClientResourceFactory extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Factory to manage JDK HttpClient resources such as a shared Executor within the lifecycle of a Spring ApplicationContext.\npublic class JettyClientHttpConnector extends Object implements ClientHttpConnector; // ClientHttpConnector for the Jetty Reactive Streams HttpClient.\npublic class JettyResourceFactory extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Factory to manage Jetty resources, i.e.\npublic class ReactorClientHttpConnector extends Object implements ClientHttpConnector; // Reactor-Netty implementation of ClientHttpConnector.\npublic class ReactorNetty2ClientHttpConnector extends Object implements ClientHttpConnector; // Reactor Netty 2 (Netty 5) implementation of ClientHttpConnector.\npublic class ReactorNetty2ResourceFactory extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Factory to manage Reactor Netty resources, i.e.\n", "des": "Abstractions for reactive HTTP client support including ClientHttpRequest and ClientHttpResponse as well as a ClientHttpConnector."}
{"index": 2488, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package batch;\n\n@AutoConfiguration(after=ObservationAutoConfiguration.class) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @ConditionalOnClass({io.micrometer.observation.ObservationRegistry.class,org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor.class}) public class BatchObservationAutoConfiguration extends Object; // Auto-configuration for instrumentation of Spring Batch Jobs.\n", "des": "Auto-configuration for Spring Batch observations."}
{"index": 1862, "repo": "spring-test-6.0.11", "code": "package webdriver;\n\npublic class MockMvcHtmlUnitDriverBuilder extends MockMvcWebConnectionBuilderSupport<MockMvcHtmlUnitDriverBuilder>; // MockMvcHtmlUnitDriverBuilder simplifies the building of an HtmlUnitDriver that delegates to MockMvc and optionally delegates to an actual connection for specific requests.\npublic class WebConnectionHtmlUnitDriver extends org.openqa.selenium.htmlunit.HtmlUnitDriver; // WebConnectionHtmlUnitDriver enables configuration of the WebConnection for an HtmlUnitDriver instance.\n", "des": "Server-side support for testing Spring MVC applications with MockMvc and the Selenium HtmlUnitDriver."}
{"index": 3329, "repo": "opencms-core-15.0", "code": "package lists;\n\nInterface CmsOptionDialog.I_OptionHandler; // Dialog handler to handle the selected option.\nClass CmsListManager; // Manager for list configuration files.\nClass CmsListManagerConfiguration; // The list manager app configuration.\nClass CmsOptionDialog; // Option dialog.\nClass CmsResultFacets; // Displays search result facets.\nClass CmsResultTable; // Table to display the list manager search results.\n", "des": "This package contains the app classes for the list configurations manager."}
{"index": 3296, "repo": "opencms-core-15.0", "code": "package mail;\n\nClass CmsHtmlMail; // This class is used to send an HTML formatted email with optional attachments.\nClass CmsInputStreamDataSource; // DataSource implementation that may be filled with content from an InputStream.\nClass CmsMailHost; // Contains the configuration of an individual mail host.\nClass CmsMailSettings; // Contains the settings for the OpenCms mail service.\nClass CmsMailTransport; // Sends an email using a Thread, so that the application can continue without waiting for the mail to be send.\nClass CmsMailUtil; // Contains utility methods for dealing with emails.\nClass CmsMultiPartMail; // This class is used to send multi-part internet email like messages with attachments.\nClass CmsSimpleMail; // This class is used to send simple text internet email messages without attachments.\nClass CmsVfsDataSource; // DataSource wrapper for VFS resources, allows easy sending of VFS resources as email attachments.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Provides utility classes to generate email messages using the OpenCms email configuration."}
{"index": 2188, "repo": "spring-security-web-6.1.2", "code": "package context;\n\npublic abstract class AbstractSecurityWebApplicationInitializer extends Object implements org.springframework.web.WebApplicationInitializer; // Registers the DelegatingFilterProxy to use the springSecurityFilterChain before any other registered Filter.\npublic final class DelegatingSecurityContextRepository extends Object implements SecurityContextRepository;\n@Deprecated public final class HttpRequestResponseHolder extends Object;\npublic class HttpSessionSecurityContextRepository extends Object implements SecurityContextRepository; // A SecurityContextRepository implementation which stores the security context in the HttpSession between requests.\npublic final class NullSecurityContextRepository extends Object implements SecurityContextRepository;\npublic final class RequestAttributeSecurityContextRepository extends Object implements SecurityContextRepository; // Stores the SecurityContext on a ServletRequest.setAttribute(String, Object) so that it can be restored when different dispatch types occur.\n@Deprecated public abstract class SaveContextOnUpdateOrErrorResponseWrapper extends OnCommittedResponseWrapper;\npublic class SecurityContextHolderFilter extends org.springframework.web.filter.GenericFilterBean; // A Filter that uses the SecurityContextRepository to obtain the SecurityContext and set it on the SecurityContextHolder.\n@Deprecated public class SecurityContextPersistenceFilter extends org.springframework.web.filter.GenericFilterBean;\npublic interface SecurityContextRepository; // Strategy used for persisting a SecurityContext between requests.\n", "des": "Classes which are responsible for maintaining the security context between HTTP requests."}
{"index": 973, "repo": "spring-ws-3.0.10.RELEASE", "code": "package security;\n\npackage security.callback; // Contains generic CallbackHandler implementations.\npackage security.support; // Contains support classes for handling WS-Security messages.\npackage security.wss4j2; // Contains classes for using the Apache WSS4J 2.0 WS-Security implementation within Spring-WS.\npackage security.xwss; // Contains classes for using the XML and WebServices Security WS-Security implementation within Spring-WS.\nClass AbstractWsSecurityInterceptor; // Interceptor base class for interceptors that handle WS-Security.\nClass WsSecurityException; // Exception indicating that something went wrong during WS-Security executions.\nClass WsSecurityFaultException; // Exception indicating that a WS-Security executions should result in a SOAP Fault.\nClass WsSecuritySecurementException; // Exception indicating that something went wrong during the securement of a message.\nClass WsSecurityValidationException; // Exception indicating that something went wrong during the validation of a message.\n", "des": "Provides WS-Security implementation classes."}
{"index": 58, "repo": "ignite-core-2.15.0", "code": "package transactions;\n\nInterface Transaction; // Ignite cache transaction.\nInterface TransactionMetrics; // Transaction metrics, shared across all caches.\nEnum TransactionConcurrency; // Transaction concurrency control.\nEnum TransactionIsolation; // Defines different cache transaction isolation levels.\nEnum TransactionState; // Cache transaction state.\nClass TransactionAlreadyCompletedException; // Exception thrown whenever Mvcc transaction has been finished before operation finished.\nClass TransactionDeadlockException; // Transaction deadlock exception.\nClass TransactionDuplicateKeyException; // Exception thrown whenever transaction tries to inserts entry with same mvcc version more than once.\nClass TransactionException; // Base class for all transaction related exceptions.\nClass TransactionHeuristicException; // Exception thrown whenever grid transaction enters an unknown state.\nClass TransactionMixedModeException; // Exception thrown whenever transaction spans over MVCC and non-MVCC caches.\nClass TransactionOptimisticException; // Exception thrown whenever grid transactions fail optimistically.\nClass TransactionRollbackException; // Exception thrown whenever grid transactions has been automatically rolled back.\nClass TransactionSerializationException; // Exception thrown whenever transaction can't be serialized due to write conflict.\nClass TransactionTimeoutException; // Exception thrown whenever transactions time out.\nClass TransactionUnsupportedConcurrencyException; // Exception thrown whenever transaction concurrency level is not supported.\n", "des": "Contains transaction-related classes."}
{"index": 3538, "repo": "opennlp-tools-2.2.0", "code": "package namefind;\n\nInterface DocumentNameFinder; // Interface for processing an entire document allowing a TokenNameFinder to use context from the entire document.\nInterface NameContextGenerator; // Interface for generating the context for a name finder by specifying a set of feature generators.\nInterface RegexNameFinderFactory.RegexAble;\nInterface TokenNameFinder; // The interface for name finders which provide name tags for a sequence of tokens.\nInterface TokenNameFinderEvaluationMonitor; // A marker interface for evaluating name finders.\nClass BilouCodec; // The default SequenceCodec implementation according to the BILOU scheme.\nClass BilouNameFinderSequenceValidator; // A SequenceValidator implementation for the BilouCodec.\nClass BioCodec; // The default SequenceCodec implementation according to the BIO scheme: B: 'beginning' of a NE I: 'inside', the word is inside a NE O: 'outside', the word is a regular word outside a NE See also the paper by Roth D.\nClass DefaultNameContextGenerator; // A NameContextGenerator implementation for determining contextual features for a tag-chunk style named-entity recognizer.\nClass DictionaryNameFinder; // This is a Dictionary based name finder.\nClass NameFinderEventStream; // Class for creating an event stream out of data files for training an TokenNameFinder.\nClass NameFinderME; // A maximum-entropy-based name finder implementation.\nClass NameFinderSequenceValidator; // The default name finder SequenceValidator implementation.\nClass NameSample; // Encapsulates names for a single unit of text.\nClass NameSampleDataStream; // The NameSampleDataStream class converts tagged strings provided by a DataStream to NameSample objects.\nClass NameSampleSequenceStream; // A SequenceStream implementation encapsulating samples.\nClass NameSampleTypeFilter; // A stream which removes name samples which do not have a certain type.\nClass RegexNameFinder; // A TokenNameFinder implementation based on a series of regular expressions.\nClass RegexNameFinderFactory; // Returns a RegexNameFinder based on a selection of defaults or a configuration and a selection of defaults.\nClass TokenNameFinderCrossValidator; // Cross validator for TokenNameFinder.\nClass TokenNameFinderEvaluator; // The TokenNameFinderEvaluator measures the performance of the given TokenNameFinder with the provided reference samples.\nClass TokenNameFinderFactory; // The factory that provides TokenNameFinder default implementations and resources.\n", "des": "Package related to finding proper names and numeric amounts."}
{"index": 3068, "repo": "spring-ws-core-4.0.5", "code": "package jaxb;\n\npublic abstract class AbstractJaxb2PayloadMethodProcessor extends AbstractPayloadMethodProcessor; // Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations that use JAXB2.\npublic class JaxbElementPayloadMethodProcessor extends AbstractJaxb2PayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports JAXBElement objects.\npublic class XmlRootElementPayloadMethodProcessor extends AbstractJaxb2PayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports parameters annotated with @XmlRootElement or @XmlType, and return values annotated with @XmlRootElement.\n", "des": "Provides JAXB2-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces."}
{"index": 241, "repo": "nutch-2.4", "code": "package api;\n\nClass HttpBase;\nClass HttpRobotRulesParser; // This class is used for parsing robots for urls belonging to HTTP protocol.\nClass BlockedException;\nClass HttpException;\n", "des": "Common API used by HTTP plugins (http, httpclient)"}
{"index": 2850, "repo": "spring-integration-core-6.1.2", "code": "package annotation;\n\npublic abstract class AnnotationMetadataAdapter extends Object implements org.springframework.core.type.AnnotationMetadata; // An AnnotationMetadata implementation to expose a metadata by the provided Map of attributes.\npublic interface MethodAnnotationPostProcessor<T extends Annotation>; // Strategy interface for post-processing annotated methods.\n", "des": "Provides classes supporting annotation-based configuration."}
{"index": 953, "repo": "spring-ws-3.0.10.RELEASE", "code": "package method;\n\npackage method.dom; // Provides DOM-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces.\npackage method.jaxb; // Provides JAXB2-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces.\nInterface MethodArgumentResolver; // Strategy interface used to resolve method parameters into arguments.\nInterface MethodReturnValueHandler; // Strategy interface used to handle method return values.\nClass AbstractPayloadMethodProcessor; // Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations based on RequestPayload and ResponsePayload annotations.\nClass AbstractPayloadSourceMethodProcessor; // Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations based on Sources.\nClass MarshallingPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that uses Marshaller and Unmarshaller to support marshalled objects.\nClass MessageContextMethodArgumentResolver; // Implementation of MethodArgumentResolver that supports MessageContext arguments.\nClass SourcePayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports Source objects.\nClass StaxPayloadMethodArgumentResolver; // Implementation of MethodArgumentResolver that supports StAX XMLStreamReader and XMLEventReader arguments.\nClass XPathParamMethodArgumentResolver; // Implementation of MethodArgumentResolver that supports the @XPathParam annotation.\n", "des": "Provides the MethodArgumentResolver and MethodReturnValueHandler abstractions, and various implementations thereof."}
{"index": 851, "repo": "calcite-core-1.34.0", "code": "package stream;\n\nInterface StreamRules.DeltaAggregateTransposeRule.DeltaAggregateTransposeRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaFilterTransposeRule.DeltaFilterTransposeRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaJoinTransposeRule.DeltaJoinTransposeRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaProjectTransposeRule.DeltaProjectTransposeRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaSortTransposeRule.DeltaSortTransposeRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaTableScanRule.DeltaTableScanRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaTableScanToEmptyRule.DeltaTableScanToEmptyRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaUnionTransposeRule.DeltaUnionTransposeRuleConfig; // Rule configuration.\nClass Chi; // Relational operator that converts a stream to a relation.\nClass Delta; // Relational operator that converts a relation to a stream.\nClass LogicalChi; // Sub-class of Chi not targeted at any particular engine or calling convention.\nClass LogicalDelta; // Sub-class of Delta not targeted at any particular engine or calling convention.\nClass StreamRules; // Rules and relational operators for streaming relational expressions.\nClass StreamRules.DeltaAggregateTransposeRule; // Planner rule that pushes a Delta through an Aggregate.\nClass StreamRules.DeltaFilterTransposeRule; // Planner rule that pushes a Delta through a Filter.\nClass StreamRules.DeltaJoinTransposeRule; // Planner rule that pushes a Delta through a Join.\nClass StreamRules.DeltaProjectTransposeRule; // Planner rule that pushes a Delta through a Project.\nClass StreamRules.DeltaSortTransposeRule; // Planner rule that pushes a Delta through an Sort.\nClass StreamRules.DeltaTableScanRule; // Planner rule that pushes a Delta into a TableScan of a StreamableTable.\nClass StreamRules.DeltaTableScanToEmptyRule; // Planner rule that converts Delta over a TableScan of a table other than StreamableTable to an empty Values.\nClass StreamRules.DeltaUnionTransposeRule; // Planner rule that pushes a Delta through an Union.\n", "des": "Defines relational expressions for streaming."}
{"index": 1417, "repo": "spring-boot-actuator-3.1.1", "code": "package http;\n\npublic enum Outcome extends Enum<Outcome>; // The outcome of an HTTP request.\n", "des": "Support classes for HTTP-related metrics."}
{"index": 1219, "repo": "commons-text-1.10.0", "code": "package io;\n\nClass StringSubstitutorReader; // A Reader that performs string substitution on a source Reader using a StringSubstitutor.\n", "des": "StringSubstitutorReader is a Reader that performs string substitution on a source Reader using a StringSubstitutor."}
{"index": 3039, "repo": "spring-web-6.0.11", "code": "package support;\n\npublic interface AsyncHandlerMethodReturnValueHandler extends HandlerMethodReturnValueHandler; // A return value handler that supports async types.\npublic class CompositeUriComponentsContributor extends Object implements UriComponentsContributor; // A UriComponentsContributor containing a list of other contributors to delegate to and also encapsulating a specific ConversionService to use for formatting method argument values as Strings.\npublic interface HandlerMethodArgumentResolver; // Strategy interface for resolving method parameters into argument values in the context of a given request.\npublic class HandlerMethodArgumentResolverComposite extends Object implements HandlerMethodArgumentResolver; // Resolves method parameters by delegating to a list of registered HandlerMethodArgumentResolvers.\npublic interface HandlerMethodReturnValueHandler; // Strategy interface to handle the value returned from the invocation of a handler method.\npublic class HandlerMethodReturnValueHandlerComposite extends Object implements HandlerMethodReturnValueHandler; // Handles method return values by delegating to a list of registered HandlerMethodReturnValueHandlers.\npublic class InvocableHandlerMethod extends HandlerMethod; // Extension of HandlerMethod that invokes the underlying method with argument values resolved from the current HTTP request through a list of HandlerMethodArgumentResolver.\npublic class ModelAndViewContainer extends Object; // Records model and view related decisions made by HandlerMethodArgumentResolvers and HandlerMethodReturnValueHandlers during the course of invocation of a controller method.\npublic interface UriComponentsContributor; // Strategy for contributing to the building of a UriComponents by looking at a method parameter and an argument value and deciding what part of the target URL should be updated.\n", "des": "Generic support classes for handler method processing."}
{"index": 2258, "repo": "spring-vault-core-3.0.4", "code": "package event;\n\npublic class AfterLoginEvent extends AuthenticationEvent; // Event published after logging into Vault.\npublic class AfterLoginTokenRenewedEvent extends AuthenticationEvent; // Event published after renewing a login token.\npublic class AfterLoginTokenRevocationEvent extends AuthenticationEvent; // Event published after revoking a login token.\npublic class AuthenticationErrorEvent extends ApplicationEvent; // Generic event class for authentication error events.\n@FunctionalInterface public interface AuthenticationErrorListener; // Listener for Vault exceptional AuthenticationEvents.\npublic abstract class AuthenticationEvent extends ApplicationEvent; // Abstract base class for authentication events.\n@FunctionalInterface public interface AuthenticationListener; // Listener for Vault AuthenticationEvents.\npublic class BeforeLoginTokenRenewedEvent extends AuthenticationEvent; // Event published before renewing a login token.\npublic class BeforeLoginTokenRevocationEvent extends AuthenticationEvent; // Event published before revoking a login token.\npublic class LoginFailedEvent extends AuthenticationErrorEvent; // Event published before renewing a login token.\npublic class LoginTokenExpiredEvent extends AuthenticationEvent; // Event published when dropping an expired login token.\npublic class LoginTokenRenewalFailedEvent extends AuthenticationErrorEvent; // Generic event class for authentication error events.\npublic class LoginTokenRevocationFailedEvent extends AuthenticationErrorEvent; // Generic event class for authentication error events.\n", "des": "Support classes for authentication application events."}
{"index": 3486, "repo": "opennlp-uima-2.2.0", "code": "package sentdetect;\n\nInterface SentenceModelResource;\nClass AbstractSentenceDetector;\nClass SentenceDetector; // OpenNLP Sentence annotator.\nClass SentenceModelResourceImpl;\n", "des": "Package related to identifying sentence boundaries."}
{"index": 3175, "repo": "tomcat-api-10.1", "code": "package servlets;\n\nClass CGIServlet; // CGI-invoking servlet for web applications, used to execute scripts which comply to the Common Gateway Interface (CGI) specification and are named in the path-info used to invoke this servlet.\nClass CGIServlet.HTTPHeaderInputStream; // This is an input stream specifically for reading HTTP headers.\nClass DefaultServlet; // The default resource-serving servlet for most web applications, used to serve static resources such as HTML pages and images.\nClass DefaultServlet.CompressionFormat;\nClass WebdavServlet; // Servlet which adds support for WebDAV level 2.\n", "des": "This package contains Servlets that implement some of the standard functionality provided by the Catalina servlet container."}
{"index": 950, "repo": "spring-ws-3.0.10.RELEASE", "code": "package server;\n\npackage server.endpoint; // Provides standard endpoint, and EndpointAdapter implementations.\nInterface EndpointAdapter; // Interface that must be implemented for each endpoint type to handle a message request.\nInterface EndpointExceptionResolver; // Defines the interface for objects than can resolve exceptions thrown during endpoint execution.\nInterface EndpointInterceptor; // Workflow interface that allows for customized endpoint invocation chains.\nInterface EndpointMapping; // Defines a mapping between message requests and endpoint objects.\nInterface SmartEndpointInterceptor; // Extension of the EndpointInterceptor interface that adds a way to decide whether the interceptor should intercept a given message context.\nClass EndpointInvocationChain; // Endpoint invocation chain, consisting of an endpoint object and any preprocessing interceptors.\nClass MessageDispatcher; // Central dispatcher for use within Spring-WS, dispatching Web service messages to registered endpoints.\n", "des": "Contains classes for server-side Spring-WS support."}
{"index": 2146, "repo": "wicket-core-10.0.0-M1", "code": "package form;\n\npackage form.upload; // Support for upload forms (using multipart requests).\npackage form.validation; // Support for form validation.\npublic abstract class AbstractCheckSelector extends LabeledWebMarkupContainer implements IHeaderContributor; // Base class for all Javascript-based \"select-all\" checkboxes.\npublic abstract class AbstractChoice<T,E> extends FormComponent<T>; // Abstract base class for all choice (html select) options.\npublic static enum AbstractChoice.LabelPosition extends Enum<AbstractChoice.LabelPosition>; // An enumeration of possible positions of the label for a choice\npublic abstract class AbstractSingleSelectChoice<T> extends AbstractChoice<T,T>; // Abstract base class for single-select choices.\npublic abstract class AbstractSubmitLink extends AbstractLink implements IFormSubmittingComponent; // Abstract class for links that are capable of submitting a form.\npublic abstract class AbstractTextComponent<T> extends FormComponent<T>; // Abstract base class for TextArea and TextField.\npublic static interface AbstractTextComponent.ITextFormatProvider; // Text components that implement this interface are know to be able to provide a pattern for formatting output and parsing input.\npublic class AutoLabelResolver extends Object implements IComponentResolver; // Resolver that implements the wicket:for attribute functionality.\nprotected static class AutoLabelResolver.AutoLabel extends TransparentWebMarkupContainer; // Component that is attached to the <label> tag and takes care of writing out the label text as well as setting classes on the <label> tag\npublic static final class AutoLabelResolver.AutoLabelMarker extends Object implements Serializable; // Marker used to track whether or not a form component has an associated auto label by its mere presense as well as some attributes of the component across requests.\npublic class AutoLabelTagHandler extends AbstractMarkupFilter; // Markup filter that identifies tags with the wicket:for attribute.\npublic class AutoLabelTextResolver extends Object implements IComponentResolver; // Resolver that provides the <wicket:label> tag, which will output a FormComponent's label without requiring a manual extra component such as Label or FormComponentLabel.\npublic class Button extends FormComponent<String> implements IFormSubmittingComponent; // A form button.\n", "des": "HTML Forms and form components."}
{"index": 3603, "repo": "lucene-queries-9.7.0", "code": "package function;\n\npackage function.docvalues; // FunctionValues for different data types.\npackage function.valuesource; // A variety of functions to use with FunctionQuery.\nClass FunctionMatchQuery; // A query that retrieves all documents with a DoubleValues value matching a predicate\nClass FunctionQuery; // Returns a score for each document based on a ValueSource, often some function of the value of a field.\nClass FunctionRangeQuery; // A Query wrapping a ValueSource that matches docs in which the values in the value source match a configured range.\nClass FunctionScoreQuery; // A query that wraps another query, and uses a DoubleValuesSource to replace or modify the wrapped query's score\nClass FunctionValues; // Represents field values as different types.\nClass FunctionValues.ValueFiller; // Abstraction of the logic required to fill the value of a specified doc into a reusable MutableValue.\nClass IndexReaderFunctions; // Class exposing static helper methods for generating DoubleValuesSource instances over some IndexReader statistics\nClass ValueSource; // Instantiates FunctionValues for a particular reader.\nClass ValueSourceScorer; // Scorer which returns the result of FunctionValues.floatVal(int) as the score for a document, and which filters out documents that don't match ValueSourceScorer.matches(int).\n", "des": "Queries that compute score based upon a function."}
{"index": 2732, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class LdifReaderBuilder extends Object; // Creates a fully qualified LdifReader.\npublic class MappingLdifReaderBuilder<T> extends Object; // Creates a fully qualified MappingLdifReader.\n", "des": "Builders for LDIF related components."}
{"index": 3823, "repo": "lucene-analysis-common-9.7.0", "code": "package tr;\n\nClass ApostropheFilter; // Strips all characters after an apostrophe (including the apostrophe itself).\nClass ApostropheFilterFactory; // Factory for ApostropheFilter.\nClass TurkishAnalyzer; // Analyzer for Turkish.\nClass TurkishLowerCaseFilter; // Normalizes Turkish token text to lower case.\nClass TurkishLowerCaseFilterFactory; // Factory for TurkishLowerCaseFilter.\n", "des": "Analyzer for Turkish."}
{"index": 2138, "repo": "wicket-core-10.0.0-M1", "code": "package lang;\n\npublic final class PropertyResolver extends Object; // This class parses expressions to lookup or set a value on the object that is given.\npublic abstract static class PropertyResolver.AbstractGetAndSet extends Object implements PropertyResolver.IGetAndSet;\npublic static class PropertyResolver.CachingPropertyLocator extends Object implements PropertyResolver.IPropertyLocator; // A wrapper for another PropertyResolver.IPropertyLocator that caches results of PropertyResolver.CachingPropertyLocator.get(Class, String).\npublic static class PropertyResolver.DefaultPropertyLocator extends Object implements PropertyResolver.IPropertyLocator; // Default locator supporting Java Beans properties, maps, lists and method invocations.\npublic static interface PropertyResolver.IGetAndSet; // A property to get and set.\npublic static interface PropertyResolver.IPropertyLocator; // A locator of properties.\npublic class PropertyResolverConverter extends Object implements org.apache.wicket.util.io.IClusterable;\npublic class WicketObjects extends Object; // Object (de)serialization utilities.\npublic static interface WicketObjects.IObjectSizeOfStrategy; // Interface that enables users to plugin the way object sizes are calculated with Wicket.\npublic static final class WicketObjects.SerializingObjectSizeOfStrategy extends Object implements WicketObjects.IObjectSizeOfStrategy; // WicketObjects.IObjectSizeOfStrategy that works by serializing the object to an instance of ByteCountingOutputStream, which records the number of bytes written to it.\n", "des": "Java utilities."}
{"index": 3501, "repo": "poi-5.2.3", "code": "package eventfilesystem;\n\nInterface POIFSReaderListener; // Interface POIFSReaderListener\nClass POIFSReader; // An event-driven reader for POIFS file systems.\nClass POIFSReaderEvent; // Class POIFSReaderEvent\n", "des": "The eventfilesystem is an efficient method for reading OLE 2 CDF files."}
{"index": 1900, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package availability;\n\n@AutoConfiguration public class ApplicationAvailabilityAutoConfiguration extends Object; // EnableAutoConfiguration for ApplicationAvailabilityBean.\n", "des": "Auto-configuration for application availability features."}
{"index": 1359, "repo": "spring-tx-6.0.11", "code": "package transaction;\n\npackage transaction.annotation; // Spring's support for annotation-based transaction demarcation.\npackage transaction.config; // Support package for declarative transaction configuration, with XML schema being the primary configuration format.\npackage transaction.event; // Spring's support for listening to transaction events.\npackage transaction.interceptor; // AOP-based solution for declarative transaction demarcation.\npackage transaction.jta; // Transaction SPI implementation for JTA.\npackage transaction.reactive; // Support classes for reactive transaction management.\npackage transaction.support; // Support classes for the org.springframework.transaction package.\npublic class CannotCreateTransactionException extends TransactionException; // Exception thrown when a transaction can't be created using an underlying transaction API such as JTA.\npublic class HeuristicCompletionException extends TransactionException; // Exception that represents a transaction failure caused by a heuristic decision on the side of the transaction coordinator.\npublic class IllegalTransactionStateException extends TransactionUsageException; // Exception thrown when the existence or non-existence of a transaction amounts to an illegal state according to the transaction propagation behavior that applies.\npublic class InvalidIsolationLevelException extends TransactionUsageException; // Exception that gets thrown when an invalid isolation level is specified, i.e.\npublic class InvalidTimeoutException extends TransactionUsageException; // Exception that gets thrown when an invalid timeout is specified, that is, the specified timeout valid is out of range or the transaction manager implementation doesn't support timeouts.\npublic class NestedTransactionNotSupportedException extends CannotCreateTransactionException; // Exception thrown when attempting to work with a nested transaction but nested transactions are not supported by the underlying backend.\npublic class NoTransactionException extends TransactionUsageException; // Exception thrown when an operation is attempted that relies on an existing transaction (such as setting rollback status) and there is no existing transaction.\npublic interface PlatformTransactionManager extends TransactionManager; // This is the central interface in Spring's imperative transaction infrastructure.\npublic interface ReactiveTransaction extends TransactionExecution; // Representation of an ongoing reactive transaction.\npublic interface ReactiveTransactionManager extends TransactionManager; // This is the central interface in Spring's reactive transaction infrastructure.\npublic interface SavepointManager; // Interface that specifies an API to programmatically manage transaction savepoints in a generic fashion.\npublic interface TransactionDefinition; // Interface that defines Spring-compliant transaction properties.\n", "des": "Spring's core transaction management APIs (independent of any specific transaction management system); an exception hierarchy for Spring's transaction infrastructure; and transaction manager, definition, and status interfaces."}
{"index": 834, "repo": "calcite-core-1.34.0", "code": "package hep;\n\nClass HepPlanner; // HepPlanner is a heuristic implementation of the RelOptPlanner interface.\nClass HepProgram; // HepProgram specifies the order in which rules should be attempted by HepPlanner.\nClass HepProgramBuilder; // HepProgramBuilder creates instances of HepProgram.\nClass HepRelVertex; // HepRelVertex wraps a real RelNode as a vertex in a DAG representing the entire query expression.\nClass HepRuleCall; // HepRuleCall implements RelOptRuleCall for a HepPlanner.\nEnum HepMatchOrder; // HepMatchOrder specifies the order of graph traversal when looking for rule matches.\n", "des": "Provides a heuristic planner implementation for the interfaces in org.apache.calcite.plan."}
{"index": 2509, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jersey;\n\n@ManagementContextConfiguration(value=CHILD, proxyBeanMethods=false) @Import(org.springframework.boot.actuate.autoconfigure.web.jersey.JerseyManagementContextConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.glassfish.jersey.server.ResourceConfig.class) @ConditionalOnMissingClass(\"org.springframework.web.servlet.DispatcherServlet\") public class JerseyChildManagementContextConfiguration extends Object; // @ManagementContextConfiguration for Jersey infrastructure when a separate management context with a web server running on a different port is required.\n@ManagementContextConfiguration(value=SAME, proxyBeanMethods=false) @EnableConfigurationProperties(org.springframework.boot.autoconfigure.jersey.JerseyProperties.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.glassfish.jersey.server.ResourceConfig.class) @ConditionalOnMissingClass(\"org.springframework.web.servlet.DispatcherServlet\") public class JerseySameManagementContextConfiguration extends Object; // @ManagementContextConfiguration for Jersey infrastructure when the management context is the same as the main application context.\npublic interface ManagementContextResourceConfigCustomizer; // Callback interface that can be implemented by beans wishing to customize Jersey's ResourceConfig in the management context before it is used.\n", "des": "Configuration for a Jersey-based management context."}
{"index": 3585, "repo": "lucene-test-framework-9.7.0", "code": "package compressing;\n\npackage compressing.dummy; // Dummy CompressingCodec implementation used for testing.\nClass CompressingCodec; // A codec that uses Lucene90CompressingStoredFieldsFormat for its stored fields and delegates to the default codec for everything else.\nClass DeflateWithPresetCompressingCodec; // CompressionCodec that uses DeflateWithPresetDictCompressionMode.\nClass FastCompressingCodec; // CompressionCodec that uses CompressionMode.FAST\nClass FastDecompressionCompressingCodec; // CompressionCodec that uses CompressionMode.FAST_DECOMPRESSION\nClass HighCompressionCompressingCodec; // CompressionCodec that uses CompressionMode.HIGH_COMPRESSION\nClass LZ4WithPresetCompressingCodec; // CompressionCodec that uses LZ4WithPresetDictCompressionMode.\n", "des": "Support for testing Lucene90CompressingStoredFieldsFormat."}
{"index": 276, "repo": "pdfbox-3.0.0-beta1", "code": "package operator;\n\npackage operator.graphics; // This package contains implementations of all of the PDF graphics operators.\nClass DrawObject; // Do: Draws an XObject.\nClass Operator; // An Operator in a PDF content stream.\nClass OperatorName;\nClass OperatorProcessor; // Processes a PDF operator.\nClass MissingOperandException; // Throw when a PDF operator is missing required operands.\n", "des": "This package contains implementations of all of the PDF operators."}
{"index": 1613, "repo": "spring-data-neo4j-7.1.2", "code": "package support;\n\n@Retention(RUNTIME) @Target(FIELD) @Inherited @ConvertWith(converter=org.springframework.data.neo4j.core.support.DateLongConverter.class) @API(status=STABLE, since=\"6.0\") public @interface DateLong; // Indicates SDN to store dates as long in the database.\n@Retention(RUNTIME) @Target(FIELD) @Inherited @ConvertWith(converterFactory=org.springframework.data.neo4j.core.support.DateStringConverterFactory.class) @API(status=STABLE, since=\"6.0\") public @interface DateString; // Indicates SDN 6 to store dates as String in the database.\n@API(status=STABLE, since=\"6.0\") public final class RetryExceptionPredicate extends Object implements Predicate<Throwable>; // A predicate indicating true for throwables that can be safely retried and false in any other case.\npublic enum UserAgent extends Enum<UserAgent>; // Representation of a user agent containing sensible information to identify queries generated by or executed via Spring Data Neo4j.\n@API(status=STABLE, since=\"6.0\") public final class UUIDStringGenerator extends Object implements IdGenerator<String>; // A generator providing UUIDs.\n", "des": "This package provides a couple of support classes that might be helpful in your domain, for example a predicate indicating that some transaction may be retried and additional converters and id generators."}
{"index": 1775, "repo": "spring-data-mongodb-4.1.2", "code": "package json;\n\npublic class ParameterBindingContext extends Object; // Reusable context for binding parameters to a placeholder or a SpEL expression within a JSON structure.\npublic class ParameterBindingDocumentCodec extends Object implements org.bson.codecs.CollectibleCodec<org.bson.Document>; // A Codec implementation that allows binding parameters to placeholders or SpEL expressions when decoding a JSON String.\npublic class ParameterBindingJsonReader extends org.bson.AbstractBsonReader; // Reads a JSON and evaluates placehoders and SpEL expressions.\n@FunctionalInterface public interface ValueProvider; // A value provider to retrieve bindable values by their parameter index.\n", "des": "MongoDB driver-specific utility classes for Json conversion."}
{"index": 215, "repo": "nutch-2.4", "code": "package plugin;\n\nInterface FieldPluggable;\nInterface Pluggable; // Defines the capability of a class to be plugged into Nutch.\nClass Extension; // An Extension is a kind of listener descriptor that will be installed on a concrete ExtensionPoint that acts as kind of Publisher.\nClass ExtensionPoint; // The ExtensionPoint provide meta information of a extension point.\nClass Plugin; // A nutch-plugin is an container for a set of custom logic that provide extensions to the nutch core functionality or another plugin that provides an API for extending.\nClass PluginClassLoader; // The PluginClassLoader is a child-first classloader that only contains classes of the runtime libraries setuped in the plugin manifest file and exported libraries of plugins that are required plugins.\nClass PluginDescriptor; // The PluginDescriptor provide access to all meta information of a nutch-plugin, as well to the internationalizable resources and the plugin own classloader.\nClass PluginManifestParser; // The PluginManifestParser parser just parse the manifest file in all plugin directories.\nClass PluginRepository; // The plugin repositority is a registry of all plugins.\nClass CircularDependencyException; // CircularDependencyException will be thrown if a circular dependency is detected.\nClass MissingDependencyException; // MissingDependencyException will be thrown if a plugin dependency cannot be found.\nClass PluginRuntimeException; // PluginRuntimeException will be thrown until a exception in the plugin managemnt occurs.\n", "des": "The Nutch Plugin System."}
{"index": 113, "repo": "ignite-core-2.15.0", "code": "package cmdline;\n\nClass AboutDialog; // About dialog.\nClass CdcCommandLineStartup; // This class defines command-line Ignite Capture Data Change startup.\nClass CommandLineRandomNumberGenerator; // Generates a random number and prints it to the console.\nClass CommandLineStartup; // This class defines command-line Ignite startup.\nClass CommandLineTransformer; // This class is a workaround for a versatile problems with passing arguments to the Ignite Windows batch launcher scripts.\n", "des": "Contains default command line startup."}
{"index": 3330, "repo": "opencms-core-15.0", "code": "package logfile;\n\nInterface I_CmsLogDownloadProvider; // Provides log file download functionality.\nClass CmsDefaultLogDownloadProvider; // Default implementation for the log download functionality.\nClass CmsLogChannelTable; // Class for table to display and edit Log channels.\nClass CmsLogDownloadDialog; // Class for the Download dialog.\nClass CmsLogDownloadDialog.ZipGenerator; // Helper class for generating the zip file for the log download.\nClass CmsLogFileApp; // Main class of Log management app.\nClass CmsLogFileConfiguration; // Configuration class for Log management app.\nClass CmsLogFileOptionProvider; // Provides log files which should be available as options in the OpenCms log file viewer.\nClass CmsLogFileView; // Class for the view of log files.\nClass CmsLogFileViewSettings; // Class for the log file view settings dialog.\n", "des": "Contains classes of the site manager app."}
{"index": 49, "repo": "ignite-core-2.15.0", "code": "package eviction;\n\npackage eviction.fifo; // Contains cache FIFO eviction policy implementations.\npackage eviction.lru; // Contains cache LRU eviction policy implementations.\npackage eviction.sorted; // Contains cache sorted eviction policy implementation.\nInterface EvictableEntry<K,V>; // Evictable cache entry passed into EvictionPolicy.\nInterface EvictionFilter<K,V>; // Eviction filter to specify which entries should not be evicted.\nInterface EvictionPolicy<K,V>; // Pluggable cache eviction policy.\nClass AbstractEvictionPolicy<K,V>; // Common functionality implementation for eviction policies with max size/max memory and batch eviction support.\nClass AbstractEvictionPolicyFactory<T>; // Common functionality implementation for eviction policies factories.\n", "des": "Contains cache eviction policy implementations."}
{"index": 2250, "repo": "spring-data-keyvalue-3.1.2", "code": "package support;\n\npublic class KeyValueRepositoryFactory extends RepositoryFactorySupport; // RepositoryFactorySupport specific of handing KeyValueRepository.\npublic class KeyValueRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends RepositoryFactoryBeanSupport<T,S,ID>; // FactoryBean to create KeyValueRepository.\npublic class QuerydslKeyValuePredicateExecutor<T> extends Object implements ListQuerydslPredicateExecutor<T>; // QuerydslPredicateExecutor capable of applying Predicates using CollQuery.\n@Deprecated public class QuerydslKeyValueRepository<T,ID> extends SimpleKeyValueRepository<T,ID> implements QuerydslPredicateExecutor<T>;\npublic class SimpleKeyValueRepository<T,ID> extends Object implements KeyValueRepository<T,ID>; // Simple KeyValueRepository implementation.\n", "des": "Support infrastructure for query derivation of key/value specific repositories."}
{"index": 3459, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface Callback; // Represents a JPA event callback (the method).\nInterface CallbackBuilder;\nInterface CallbackBuilder.CallbackRegistrar;\nInterface CallbackDefinition;\nInterface CallbackRegistrar;\nInterface CallbackRegistry; // Registry of Callbacks by entity and type\nInterface CallbackRegistryConsumer; // Contract for injecting the registry of Callbacks into event listeners.\nEnum CallbackType;\n", "des": "The SPI contracts for supporting JPA lifecycle callbacks."}
{"index": 2237, "repo": "spring-security-acl-6.1.2", "code": "package afterinvocation;\n\npublic abstract class AbstractAclProvider extends Object implements org.springframework.security.access.AfterInvocationProvider; // Abstract AfterInvocationProvider which provides commonly-used ACL-related services.\npublic class AclEntryAfterInvocationCollectionFilteringProvider extends AbstractAclProvider; // Given a Collection of domain object instances returned from a secure object invocation, remove any Collection elements the principal does not have appropriate permission to access as defined by the AclService.\npublic class AclEntryAfterInvocationProvider extends AbstractAclProvider implements org.springframework.context.MessageSourceAware; // Given a domain object instance returned from a secure object invocation, ensures the principal has appropriate permission as defined by the AclService.\n", "des": "After-invocation providers for collection and array filtering."}
{"index": 2323, "repo": "spring-boot-3.1.1", "code": "package init;\n\npublic class R2dbcScriptDatabaseInitializer extends AbstractScriptDatabaseInitializer; // An InitializingBean that initializes a database represented by an R2DBC ConnectionFactory.\n", "des": "Support for initialization of an SQL database using an R2DBC ConnectionFactory."}
{"index": 2900, "repo": "spring-integration-amqp-6.1.2", "code": "package inbound;\n\npublic class AmqpInboundChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.integration.context.OrderlyShutdownCapable; // Adapter that receives Messages from an AMQP Queue, converts them into Spring Integration Messages, and sends the results to a Message Channel.\npublic static enum AmqpInboundChannelAdapter.BatchMode extends Enum<AmqpInboundChannelAdapter.BatchMode>; // Defines the payload type when the listener container is configured with consumerBatchEnabled.\npublic class AmqpInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport; // Adapter that receives Messages from an AMQP Queue, converts them into Spring Integration Messages, and sends the results to a Message Channel.\npublic class AmqpMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<Object>; // A pollable MessageSource for RabbitMQ.\npublic static class AmqpMessageSource.AmqpAckCallback extends Object implements org.springframework.integration.acks.AcknowledgmentCallback;\npublic static class AmqpMessageSource.AmqpAckCallbackFactory extends Object implements org.springframework.integration.acks.AcknowledgmentCallbackFactory<AmqpMessageSource.AmqpAckInfo>;\npublic static class AmqpMessageSource.AmqpAckInfo extends Object; // Information for building an AmqpAckCallback.\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 675, "repo": "commons-lang3-3.12.0", "code": "package text;\n\npackage text.translate; // An API for creating text translation routines from a set of smaller building blocks.\nInterface FormatFactory; // as of 3.6, use commons-text FormatFactory instead\nClass CompositeFormat; // as of 3.6, use commons-text CompositeFormat instead\nClass ExtendedMessageFormat; // as of 3.6, use commons-text ExtendedMessageFormat instead\nClass FormattableUtils; // as of 3.6, use commons-text FormattableUtils instead\nClass StrBuilder; // as of 3.6, use commons-text TextStringBuilder instead\nClass StrLookup<V>; // as of 3.6, use commons-text StringLookupFactory instead\nClass StrMatcher; // as of 3.6, use commons-text StringMatcherFactory instead\nClass StrSubstitutor; // as of 3.6, use commons-text StringSubstitutor instead\nClass StrTokenizer; // as of 3.6, use commons-text StringTokenizer instead\nClass WordUtils; // as of 3.6, use commons-text WordUtils instead\n", "des": "Provides classes for handling and manipulating text, partly as an extension to java.text."}
{"index": 2839, "repo": "spring-data-r2dbc-3.1.2", "code": "package support;\n\npublic abstract class ArrayUtils extends Object; // Utilities for array interaction.\n", "des": "Support infrastructure for the configuration of R2DBC-specific repositories."}
{"index": 1262, "repo": "spring-core-6.0.11", "code": "package internal;\n\npublic class CustomizerRegistry extends Object;\npublic interface Function<K,V>;\npublic class LoadingCache<K,KK,V> extends Object;\n", "des": "Spring's repackaging of the CGLIB core internal package (for internal use only)."}
{"index": 2556, "repo": "pulsar-common-3.0.0", "code": "package data;\n\npublic class LookupData extends Object; // This class encapsulates lookup data.\n", "des": "Lookup data."}
{"index": 1792, "repo": "spring-integration-file-6.1.2", "code": "package synchronizer;\n\npublic abstract class AbstractInboundFileSynchronizer<F> extends Object implements InboundFileSynchronizer, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, Closeable; // Base class charged with knowing how to connect to a remote file system, scan it for new files and then download the files.\npublic abstract class AbstractInboundFileSynchronizingMessageSource<F> extends org.springframework.integration.endpoint.AbstractFetchLimitingMessageSource<File> implements org.springframework.integration.support.management.ManageableLifecycle; // Factors out the common logic between the FTP and SFTP adapters.\n@FunctionalInterface public interface InboundFileSynchronizer; // Strategy for synchronizing from a remote File system to a local directory.\n", "des": "Provides classes supporting the synchronization of remote and local file directories."}
{"index": 3709, "repo": "solr-core-9.3.0", "code": "package spelling;\n\npackage spelling.suggest; // APIs and classes used by the SpellCheckComponent\nClass AbstractLuceneSpellChecker; // Abstract base class for all Lucene-based spell checking implementations.\nClass ConjunctionSolrSpellChecker; // This class lets a query be run through multiple spell checkers.\nClass DirectSolrSpellChecker; // Spellchecker implementation that uses DirectSpellChecker\nClass FileBasedSpellChecker; // A spell checker implementation that loads words from a text file (one word per line).\nClass IndexBasedSpellChecker; // A spell checker implementation that loads words from Solr as well as arbitrary Lucene indices.\nClass PossibilityIterator; // Given a list of possible Spelling Corrections for multiple mis-spelled words in a query, This iterator returns Possible Correction combinations ordered by reasonable probability that such a combination will return actual hits if re-queried.\nClass PossibilityIterator.RankedSpellPossibility;\nClass QueryConverter; // The QueryConverter is an abstract base class defining a method for converting input \"raw\" queries into a set of tokens for spell checking.\nClass ResultEntry;\nClass SolrSpellChecker; // Refer to https://solr.apache.org/guide/solr/latest/query-guide/spell-checking.html for more details.\nClass SpellCheckCollation;\nClass SpellCheckCollator;\nClass SpellCheckCorrection;\nClass SpellingOptions;\nClass SpellingQueryConverter; // Converts the query string to a Collection of Lucene tokens using a regular expression.\nClass SpellingResult; // Implementations of SolrSpellChecker must return suggestions as SpellResult instance.\nClass SuggestQueryConverter; // Passes the entire query string to the configured analyzer as-is.\nClass Token;\nClass WordBreakSolrSpellChecker; // A spellchecker that breaks and combines words.\nEnum WordBreakSolrSpellChecker.BreakSuggestionTieBreaker; // Specify a value on the \"breakSugestionTieBreaker\" parameter.\n", "des": "APIs and classes used by the SpellCheckComponent"}
{"index": 2194, "repo": "spring-security-web-6.1.2", "code": "package util;\n\npublic abstract class OnCommittedResponseWrapper extends jakarta.servlet.http.HttpServletResponseWrapper; // Base class for response wrappers which encapsulate the logic for handling an event when the HttpServletResponse is committed.\npublic class RedirectUrlBuilder extends Object; // Internal class for building redirect URLs.\npublic abstract class TextEscapeUtils extends Object; // Internal utility for escaping characters in HTML strings.\npublic class ThrowableAnalyzer extends Object; // Handler for analyzing Throwable instances.\npublic interface ThrowableCauseExtractor; // Interface for handlers extracting the cause out of a specific Throwable type.\npublic final class UrlUtils extends Object; // Provides static methods for composing URLs.\n", "des": "Web utility classes."}
{"index": 3811, "repo": "lucene-analysis-common-9.7.0", "code": "package ro;\n\nClass RomanianAnalyzer; // Analyzer for Romanian.\n", "des": "Analyzer for Romanian."}
{"index": 3840, "repo": "lucene-core-9.7.0", "code": "package blocktree;\n\nClass FieldReader; // BlockTree's implementation of Terms.\nClass Lucene90BlockTreeTermsReader; // A block-based terms index and dictionary that assigns terms to variable length blocks according to how they share prefixes.\nClass Lucene90BlockTreeTermsWriter; // Block-based terms index and dictionary writer.\nClass Stats; // BlockTree statistics for a single field returned by FieldReader.getStats().\n", "des": "BlockTree terms dictionary."}
{"index": 430, "repo": "kafka-streams-3.5.0", "code": "package errors;\n\nInterface DeserializationExceptionHandler; // Interface that specifies how an exception from source node deserialization (e.g., reading from Kafka) should be handled.\nInterface ProductionExceptionHandler; // Interface that specifies how an exception when attempting to produce a result to Kafka should be handled.\nInterface StreamsUncaughtExceptionHandler;\nClass DefaultProductionExceptionHandler; // ProductionExceptionHandler that always instructs streams to fail when an exception happens while attempting to produce result records.\nClass LogAndContinueExceptionHandler; // Deserialization handler that logs a deserialization exception and then signals the processing pipeline to continue processing more records.\nClass LogAndFailExceptionHandler; // Deserialization handler that logs a deserialization exception and then signals the processing pipeline to stop processing more records and fail.\nEnum DeserializationExceptionHandler.DeserializationHandlerResponse; // Enumeration that describes the response from the exception handler.\nEnum ProductionExceptionHandler.ProductionExceptionHandlerResponse;\nEnum StreamsUncaughtExceptionHandler.StreamThreadExceptionResponse; // Enumeration that describes the response from the exception handler.\nClass BrokerNotFoundException; // Indicates that none of the specified brokers could be found.\nClass InvalidStateStoreException; // Indicates that there was a problem when trying to access a StateStore.\nClass InvalidStateStorePartitionException; // Indicates that the specific state store being queried via StoreQueryParameters used a partitioning that is not assigned to this instance.\nClass LockException; // Indicates that the state store directory lock could not be acquired because another thread holds the lock.\nClass MissingSourceTopicException;\nClass ProcessorStateException; // Indicates a processor state operation (e.g.\nClass StateStoreMigratedException; // Indicates that the state store being queried is closed although the Kafka Streams state is RUNNING or REBALANCING.\nClass StateStoreNotAvailableException; // Indicates that the state store being queried is already closed.\nClass StreamsException; // StreamsException is the top-level exception type generated by Kafka Streams, and indicates errors have occurred during a StreamThread's processing.\nClass StreamsNotStartedException; // Indicates that Kafka Streams is in state CREATED and thus state stores cannot be queries yet.\nClass StreamsRebalancingException; // Indicates that Kafka Streams is in state REBALANCING and thus cannot be queried by default.\n", "des": "Provides common exception classes for Streams applications."}
{"index": 3609, "repo": "lucene-queries-9.7.0", "code": "package spans;\n\nInterface SpanCollector; // An interface defining the collection of postings information from the leaves of a Spans\nClass FieldMaskingSpanQuery; // Wrapper to allow SpanQuery objects participate in composite single-field SpanQueries by 'lying' about their search field.\nClass FilterSpans; // A Spans implementation wrapping another spans instance, allowing to filter spans matches easily by implementing FilterSpans.accept(org.apache.lucene.queries.spans.Spans)\nClass NearSpansOrdered; // A Spans that is formed from the ordered subspans of a SpanNearQuery where the subspans do not overlap and have a maximum slop between them.\nClass NearSpansUnordered; // Similar to NearSpansOrdered, but for the unordered case.\nClass SpanContainingQuery; // Keep matches that contain another SpanScorer.\nClass SpanDisiWrapper; // Wrapper used in SpanDisiPriorityQueue.\nClass SpanFirstQuery; // Matches spans near the beginning of a field.\nClass SpanMultiTermQueryWrapper<Q extends MultiTermQuery>; // Wraps any MultiTermQuery as a SpanQuery, so it can be nested within other SpanQuery classes.\nClass SpanMultiTermQueryWrapper.SpanRewriteMethod; // Abstract class that defines how the query is rewritten.\nClass SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite; // A rewrite method that first translates each term into a SpanTermQuery in a BooleanClause.Occur.SHOULD clause in a BooleanQuery, and keeps the scores as computed by the query.\nClass SpanNearQuery; // Matches spans which are near one another.\nClass SpanNearQuery.Builder; // A builder for SpanNearQueries\nClass SpanNotQuery; // Removes matches which overlap with another SpanQuery or which are within x tokens before or y tokens after another SpanQuery.\nClass SpanOrQuery; // Matches the union of its clauses.\nClass SpanPositionCheckQuery; // Base class for filtering a SpanQuery based on the position of a match.\nClass SpanPositionRangeQuery; // Checks to see if the SpanPositionCheckQuery.getMatch() lies between a start and end position\nClass SpanQuery; // Base class for span-based queries.\nClass Spans; // Iterates through combinations of start/end positions per-doc.\nClass SpanScorer; // A basic Scorer over Spans.\n", "des": "The calculus of spans."}
{"index": 1044, "repo": "commons-io-2.13.0", "code": "package comparator;\n\nClass CompositeFileComparator; // Compare two files using a set of delegate file Comparator.\nClass DefaultFileComparator; // Compares two files using the default File.compareTo(File) method.\nClass DirectoryFileComparator; // Compare two files using the File.isDirectory() method.\nClass ExtensionFileComparator; // Compare the file name extensions for order (see FilenameUtils.getExtension(String)).\nClass LastModifiedFileComparator; // Compare the last modified date/time of two files for order (see FileUtils.lastModifiedUnchecked(File)).\nClass NameFileComparator; // Compare the names of two files for order (see File.getName()).\nClass PathFileComparator; // Compare the path of two files for order (see File.getPath()).\nClass SizeFileComparator; // Compare the length/size of two files for order (see File.length() and FileUtils.sizeOfDirectory(File)).\n", "des": "Provides various Comparator implementations for Files."}
{"index": 2969, "repo": "pulsar-broker-3.0.0", "code": "package storage;\n\n@Private @Unstable public interface ManagedLedgerStorage extends AutoCloseable; // Storage to access ManagedLedgers.\n", "des": "The storage layer for Apache Pulsar."}
{"index": 2571, "repo": "pulsar-common-3.0.0", "code": "package keystoretls;\n\npublic class KeyStoreSSLContext extends Object; // KeyStoreSSLContext that mainly wrap a SSLContext to provide SSL context for both webservice and netty.\npublic static enum KeyStoreSSLContext.Mode extends Enum<KeyStoreSSLContext.Mode>; // Connection Mode for TLS.\npublic class NetSslContextBuilder extends SslContextAutoRefreshBuilder<SSLContext>; // Similar to `DefaultSslContextBuilder`, which build `javax.net.ssl.SSLContext` for web service.\npublic class NettySSLContextAutoRefreshBuilder extends SslContextAutoRefreshBuilder<KeyStoreSSLContext>; // SSL context builder for Netty.\npublic class SSLContextValidatorEngine extends Object; // SSLContextValidatorEngine to validate 2 SSlContext.\n@FunctionalInterface public static interface SSLContextValidatorEngine.SSLEngineProvider;\n", "des": "Helpers to work with events from the non-blocking I/O client-server framework."}
{"index": 652, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package utils;\n\nInterface FederationStateStoreFacade.Func<T,TResult>; // Encapsulates a method that has one parameter and returns a value of the type specified by the TResult parameter.\nClass FederationRegistryClient; // Helper class that handles reads and writes to Yarn Registry to support UAM HA and second attempt.\nClass FederationStateStoreFacade; // The FederationStateStoreFacade is an utility wrapper that provides singleton access to the Federation state store.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 3822, "repo": "lucene-analysis-common-9.7.0", "code": "package th;\n\nClass ThaiAnalyzer; // Analyzer for Thai language.\nClass ThaiTokenizer; // Tokenizer that use BreakIterator to tokenize Thai text.\nClass ThaiTokenizerFactory; // Factory for ThaiTokenizer.\n", "des": "Analyzer for Thai."}
{"index": 1910, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package cassandra;\n\n@AutoConfiguration(after=CassandraAutoConfiguration.class) @ConditionalOnClass({com.datastax.oss.driver.api.core.CqlSession.class,org.springframework.data.cassandra.core.CassandraAdminOperations.class}) @ConditionalOnBean(com.datastax.oss.driver.api.core.CqlSession.class) public class CassandraDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's Cassandra support.\n@AutoConfiguration(after=CassandraDataAutoConfiguration.class) @ConditionalOnClass({com.datastax.oss.driver.api.core.CqlSession.class,org.springframework.data.cassandra.core.ReactiveCassandraTemplate.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(com.datastax.oss.driver.api.core.CqlSession.class) public class CassandraReactiveDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's reactive Cassandra support.\n@AutoConfiguration(after=CassandraReactiveDataAutoConfiguration.class) @ConditionalOnClass({org.springframework.data.cassandra.ReactiveSession.class,org.springframework.data.cassandra.repository.ReactiveCassandraRepository.class}) @ConditionalOnRepositoryType(store=\"cassandra\", type=REACTIVE) @ConditionalOnMissingBean(org.springframework.data.cassandra.repository.support.ReactiveCassandraRepositoryFactoryBean.class) @Import(org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesRegistrar.class) public class CassandraReactiveRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's Cassandra Reactive Repositories.\n", "des": "Auto-configuration for Spring Data Cassandra."}
{"index": 1569, "repo": "spring-restdocs-core-3.0.0", "code": "package payload;\n\npublic abstract class AbstractBodySnippet extends TemplatedSnippet; // Abstract TemplatedSnippet subclass that provides a base for snippets that document a RESTful resource's request or response body.\npublic abstract class AbstractFieldsSnippet extends TemplatedSnippet; // Abstract TemplatedSnippet subclass that provides a base for snippets that document a RESTful resource's request or response fields.\npublic class FieldDescriptor extends IgnorableDescriptor<FieldDescriptor>; // A description of a field found in a request or response payload.\npublic class FieldDoesNotExistException extends RuntimeException; // A FieldDoesNotExistException is thrown when a requested field does not exist in a payload.\npublic class FieldPathPayloadSubsectionExtractor extends Object implements PayloadSubsectionExtractor<FieldPathPayloadSubsectionExtractor>; // A PayloadSubsectionExtractor that extracts the subsection of the JSON payload identified by a field path.\npublic class FieldTypeRequiredException extends RuntimeException; // A FieldTypeRequiredException is thrown when a field's type cannot be determined automatically and, therefore, must be explicitly provided.\npublic interface FieldTypeResolver; // Resolves the type of a field in a request or response payload.\npublic enum JsonFieldType extends Enum<JsonFieldType>; // An enumeration of the possible types for a field in a JSON request or response payload.\npublic abstract class PayloadDocumentation extends Object; // Static factory methods for documenting a RESTful API's request and response payloads.\npublic interface PayloadSubsectionExtractor<T extends PayloadSubsectionExtractor<T>>; // Strategy interface for extracting a subsection of a payload.\npublic class RequestBodySnippet extends AbstractBodySnippet; // A Snippet that documents the body of a request.\npublic class RequestFieldsSnippet extends AbstractFieldsSnippet; // A Snippet that documents the fields in a request.\npublic class RequestPartBodySnippet extends AbstractBodySnippet; // A Snippet that documents the body of a request part.\npublic class RequestPartFieldsSnippet extends AbstractFieldsSnippet; // A Snippet that documents the fields in a request part.\npublic class ResponseBodySnippet extends AbstractBodySnippet; // A Snippet that documents the body of a response.\npublic class ResponseFieldsSnippet extends AbstractFieldsSnippet; // A Snippet that documents the fields in a response.\npublic class SubsectionDescriptor extends FieldDescriptor; // A description of a subsection, i.e.\n", "des": "Documenting the payload of a RESTful API's requests and responses."}
{"index": 800, "repo": "lucene-analyzers-common-8.11.2", "code": "package query;\n\nClass QueryAutoStopWordAnalyzer; // An Analyzer used primarily at query time to wrap another analyzer and provide a layer of protection which prevents very common words from being passed into queries.\n", "des": "Automatically filter high-frequency stopwords."}
{"index": 1250, "repo": "spring-integration-smb-6.1.2", "code": "package session;\n\npublic class SmbConfig extends Object; // Data holder class for a SMB share configuration.\npublic class SmbFileInfo extends org.springframework.integration.file.remote.AbstractFileInfo<jcifs.smb.SmbFile>; // An AbstractFileInfo implementation for SMB protocol.\npublic class SmbRemoteFileTemplate extends org.springframework.integration.file.remote.RemoteFileTemplate<jcifs.smb.SmbFile>; // The SMB-specific RemoteFileTemplate implementation.\npublic class SmbSession extends Object implements org.springframework.integration.file.remote.session.Session<jcifs.smb.SmbFile>; // Implementation of the Session interface for Server Message Block (SMB) also known as Common Internet File System (CIFS).\npublic class SmbSessionFactory extends SmbConfig implements org.springframework.integration.file.remote.session.SessionFactory<jcifs.smb.SmbFile>; // The SMB session factory.\npublic class SmbShare extends jcifs.smb.SmbFile; // The SmbFile extension to represent an SMB share directory.\n", "des": "SMB Remote Session abstraction support classes."}
{"index": 2035, "repo": "spring-messaging-6.0.11", "code": "package service;\n\npublic class DestinationVariableArgumentResolver extends Object implements RSocketServiceArgumentResolver; // RSocketServiceArgumentResolver for a @DestinationVariable annotated argument.\npublic class MetadataArgumentResolver extends Object implements RSocketServiceArgumentResolver; // RSocketServiceArgumentResolver for metadata entries.\npublic class PayloadArgumentResolver extends Object implements RSocketServiceArgumentResolver; // RSocketServiceArgumentResolver for @Payload annotated arguments.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Reflective(org.springframework.messaging.rsocket.service.RSocketExchangeReflectiveProcessor.class) public @interface RSocketExchange; // Annotation to declare a method on an RSocket service interface as an RSocket endpoint.\npublic final class RSocketRequestValues extends Object; // Container for RSocket request values extracted from an @RSocketExchange-annotated method and argument values passed to it.\npublic static final class RSocketRequestValues.Builder extends Object; // Builder for RSocketRequestValues.\npublic interface RSocketServiceArgumentResolver; // Resolve an argument from an @RSocketExchange-annotated method to one or more RSocket request values.\npublic final class RSocketServiceProxyFactory extends Object; // Factory for creating a client proxy given an RSocket service interface with @RSocketExchange methods.\npublic static final class RSocketServiceProxyFactory.Builder extends Object; // Builder to create an RSocketServiceProxyFactory.\n", "des": "Annotations to declare an RSocket service contract with request methods along with a proxy factory backed by an RSocketRequester."}
{"index": 1056, "repo": "commons-rdf-api-0.5.0", "code": "package experimental;\n\nInterface RDFParser; // Parse an RDF source into a target (e.g.\nInterface RDFParser.ParseResult; // The result of RDFParser.parse() indicating parsing completed.\n", "des": "Experimental Commons RDF features."}
{"index": 2369, "repo": "camel-base-4.0.0-RC1", "code": "package scan;\n\npublic class AnnotatedWithAnyPackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter; // Package scan filter for testing if a given class is annotated with any of the annotations.\npublic class AnnotatedWithPackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter; // Package scan filter for testing if a given class is annotated with a certain annotation.\npublic class AssignableToPackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter; // Package scan filter for testing if a given class is assignable to another class.\npublic class CompositePackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter; // CompositePackageScanFilter allows multiple PackageScanFilters to be composed into a single filter.\npublic class InvertingPackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter; // Package scan filter for inverting the match result of a subfilter.\n", "des": "Package scan classes."}
{"index": 3513, "repo": "opennlp-tools-2.2.0", "code": "package doccat;\n\nInterface DoccatEvaluationMonitor; // A marker interface for evaluating doccat.\nInterface DocumentCategorizer; // Interface for classes which categorize documents.\nInterface FeatureGenerator; // Interface for generating features for document categorization.\nClass BagOfWordsFeatureGenerator; // Generates a feature for each word in a document.\nClass DoccatCrossValidator; // Cross validator for DocumentCategorizer.\nClass DoccatFactory; // The factory that provides Doccat default implementations and resources.\nClass DoccatModel; // A model for document categorization\nClass DocumentCategorizerEvaluator; // The DocumentCategorizerEvaluator measures the performance of the given DocumentCategorizer with the provided reference samples.\nClass DocumentCategorizerEventStream; // Iterator-like class for modeling document classification events.\nClass DocumentCategorizerME; // A Max-Ent based implementation of DocumentCategorizer.\nClass DocumentSample; // Class which holds a classified document and its category.\nClass DocumentSampleStream; // Reads in string encoded training samples, parses them and outputs DocumentSample objects.\nClass NGramFeatureGenerator; // Generates ngram features for a document.\n", "des": "Package for classifying a document into a category."}
{"index": 3805, "repo": "lucene-analysis-common-9.7.0", "code": "package path;\n\nClass PathHierarchyTokenizer; // Tokenizer for path-like hierarchies.\nClass PathHierarchyTokenizerFactory; // Factory for PathHierarchyTokenizer.\nClass ReversePathHierarchyTokenizer; // Tokenizer for domain-like hierarchies.\n", "des": "Analysis components for path-like strings such as filenames."}
{"index": 508, "repo": "commons-vfs2-2.9.0", "code": "package cache;\n\nClass AbstractFilesCache; // Abstract base class for FilesCache implementations.\nClass DefaultFilesCache; // A simple FilesCache implementation.\nClass LRUFilesCache; // This implementation caches every file using LRUMap.\nClass NullFilesCache; // A FilesCache implementation.\nClass OnCallRefreshFileObject; // This decorator refreshes the fileObject data on every call.\nClass SoftRefFilesCache; // This implementation caches every file as long as it is strongly reachable by the JVM.\nClass WeakRefFilesCache; // This implementation caches every file as long as it is strongly reachable by the java vm.\n", "des": "VFS File caching"}
{"index": 1646, "repo": "jena-core-4.9.0", "code": "package impl;\n\npublic class AdhocDatatype extends BaseDatatype;\npublic class AllCapabilities extends Object implements Capabilities; // A default implementation of capabilities, in which everything is allowed, size is accurate, and graphs may be completely empty.\npublic abstract class BaseGraphMaker extends Object implements GraphMaker; // This base class provides convenience functions for the three \"usual\" graph makers and a place to hold the reification style for the graphs it constructs.\npublic class CollectionGraph extends GraphBase; // A simple graph implementation that wraps a collection of triples.\npublic abstract class GraphBase extends Object implements GraphWithPerform; // GraphBase is an implementation of Graph that provides some convenient base functionality for Graph implementations.\npublic class GraphMatcher extends Object; // An implementation of graph isomorphism for Graph equality.\npublic class GraphPlain extends WrappedGraph; // A version of Graph that enforces term equality even if the base graph uses value-indexing.\npublic interface GraphWithPerform extends Graph; // GraphWithPerform is an implementation interface that extends Graph with the performAdd and performDelete methods used by GraphBase to invoke non-notifying versions of add and delete.\npublic interface LiteralLabel;\npublic class LiteralLabelFactory extends Object;\npublic class SimpleEventManager extends Object implements GraphEventManager; // Simple implementation of GraphEventManager for GraphBase to use.\npublic class SimpleGraphMaker extends BaseGraphMaker; // A SimpleGraphFactory produces memory-based graphs and records them in a local map.\npublic class SimpleTransactionHandler extends TransactionHandlerBase;\npublic abstract class TransactionHandlerBase extends Object implements TransactionHandler; // A base for transaction handlers; provide implementations of execute* operations using the fundamental begin-commit-abort.\npublic interface TripleStore; // TripleStore - interface for bulk storage of triples used in composed graphs.\npublic class WrappedCapabilities extends Object implements Capabilities;\npublic class WrappedGraph extends Object implements GraphWithPerform; // A wrapper class which simply defers all operations to its base.\n", "des": "This package provides basic implementations of Graph interfaces such as EventManager and Capabilities."}
{"index": 1959, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package mustache;\n\n@AutoConfiguration @ConditionalOnClass(com.samskivert.mustache.Mustache.class) @EnableConfigurationProperties(MustacheProperties.class) @Import({org.springframework.boot.autoconfigure.mustache.MustacheServletWebConfiguration.class,org.springframework.boot.autoconfigure.mustache.MustacheReactiveWebConfiguration.class}) public class MustacheAutoConfiguration extends Object; // Auto-configuration for Mustache.\n@ConfigurationProperties(prefix=\"spring.mustache\") public class MustacheProperties extends Object; // @ConfigurationProperties for Mustache.\npublic static class MustacheProperties.Reactive extends Object;\npublic static class MustacheProperties.Servlet extends Object;\npublic class MustacheResourceTemplateLoader extends Object implements com.samskivert.mustache.Mustache.TemplateLoader, org.springframework.context.ResourceLoaderAware; // Mustache TemplateLoader implementation that uses a prefix, suffix and the Spring Resource abstraction to load a template from a file, classpath, URL etc.\npublic class MustacheTemplateAvailabilityProvider extends Object implements TemplateAvailabilityProvider; // TemplateAvailabilityProvider that provides availability information for Mustache view templates.\n", "des": "Auto-configuration for Mustache."}
{"index": 2029, "repo": "spring-messaging-6.0.11", "code": "package support;\n\npublic abstract class AbstractNamedValueMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Abstract base class to resolve method arguments from a named value, e.g.\nprotected static class AbstractNamedValueMethodArgumentResolver.NamedValueInfo extends Object; // Represents a named value declaration.\npublic class AnnotationExceptionHandlerMethodResolver extends AbstractExceptionHandlerMethodResolver; // A subclass of AbstractExceptionHandlerMethodResolver that looks for MessageExceptionHandler-annotated methods in a given class.\npublic class DefaultMessageHandlerMethodFactory extends Object implements MessageHandlerMethodFactory, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // The default MessageHandlerMethodFactory implementation creating an InvocableHandlerMethod with the necessary HandlerMethodArgumentResolver instances to detect and process most of the use cases defined by MessageMapping.\npublic class DestinationVariableMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver; // Resolve for @DestinationVariable method parameters.\npublic class HeaderMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver; // Resolver for @Header arguments.\npublic class HeadersMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Argument resolver for headers.\npublic interface MessageHandlerMethodFactory; // A factory for InvocableHandlerMethod that is suitable to process an incoming Message\npublic class MessageMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // HandlerMethodArgumentResolver for Message method arguments.\npublic class MethodArgumentNotValidException extends MethodArgumentResolutionException; // Exception to be thrown when a method argument fails validation perhaps as a result of @Valid style validation, or perhaps because it is required.\npublic class MethodArgumentTypeMismatchException extends MethodArgumentResolutionException; // Exception that indicates that a method argument has not the expected type.\npublic class PayloadMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // A resolver to extract and convert the payload of a message using a MessageConverter.\n", "des": "Support classes for working with annotated message-handling methods."}
{"index": 50, "repo": "ignite-core-2.15.0", "code": "package fifo;\n\nInterface FifoEvictionPolicyMBean; // MBean for FIFO eviction policy.\nClass FifoEvictionPolicy<K,V>; // Eviction policy based on First In First Out (FIFO) algorithm and supports batch eviction.\nClass FifoEvictionPolicyFactory<K,V>; // Factory class for FifoEvictionPolicy.\n", "des": "Contains cache FIFO eviction policy implementations."}
{"index": 586, "repo": "org.apache.karaf.main-2.4.4", "code": "package adaptor;\n\nClass EclipseStarter; // Special startup class for the Eclipse Platform.\nClass LocationManager; // This class is used to manage the various Locations for Eclipse.\n", "des": "Provides API to start the platform."}
{"index": 2669, "repo": "spring-data-jdbc-3.1.2", "code": "package core;\n\npackage core.convert; // JDBC-specific conversion classes.\npublic interface JdbcAggregateOperations; // Specifies operations one can perform on a database, based on an Domain Type.\npublic class JdbcAggregateTemplate extends Object implements JdbcAggregateOperations; // JdbcAggregateOperations implementation, storing aggregates in and obtaining them from a JDBC data store.\npublic class UnableToSetId extends NonTransientDataAccessException; // Signals failure to set the id property of an entity.\n", "des": "Core JDBC implementation."}
{"index": 503, "repo": "beam-sdks-java-core-2.49.0", "code": "package util;\n\npackage util.common; // Defines utilities shared by multiple PipelineRunner implementations.\nInterface BackOff; // Back-off policy when retrying an operation.\nInterface HistogramData.BucketType;\nInterface MutationDetector; // An object for detecting illegal mutations.\nInterface NameUtils.NameOverride; // Classes may implement this interface to change how names are generated for their instances.\nInterface ShardedFile; // Bare-bones class for using sharded files.\nInterface Sleeper; // Sleeper interface to use for requesting the current thread to sleep as specified in Thread.sleep(long).\nInterface ThrowingRunnable; // Like Runnable but allowed to throw any exception.\nInterface ThrowingSupplier<T>; // Like Supplier but allowed to throw any exception.\nInterface Weighted; // Interface representing an object that has a weight, in unspecified units.\nInterface WindowedValue.SingleWindowedValue; // A WindowedValue which holds exactly single window per value.\nClass ApiSurface; // Represents the API surface of a package prefix.\nClass AppliedCombineFn<K,InputT,AccumT,OutputT>; // A CombineFnBase.GlobalCombineFn with a fixed accumulator coder.\nClass BackOffUtils; // Utilities for BackOff.\nClass BitSetCoder; // use BitSetCoder instead\nClass BucketingFunction; // Keep track of the minimum/maximum/sum of a set of timestamped long values.\nClass BufferedElementCountingOutputStream; // Provides an efficient encoding for Iterables containing small values by buffering up to bufferSize bytes of data before prefixing the count.\nClass ByteBuddyUtils; // Utilities for working with Byte Buddy.\nClass ByteStringOutputStream; // An OutputStream that produces ByteStrings.\nClass CoderUtils; // Utilities for working with Coders.\nClass CombineContextFactory; // Factory that produces Combine.Context based on different inputs.\nClass CombineFnUtil; // Static utility methods that create combine function instances.\nClass DoFnInfo<InputT,OutputT>; // Wrapper class holding the necessary information to serialize a DoFn.\nClass DoFnWithExecutionInformation; // The data that the Java SDK harness needs to execute a DoFn.\nClass EmptyOnDeserializationThreadLocal<T>; // A Serializable ThreadLocal which discards any \"stored\" objects.\n", "des": "For internal use only; no backwards compatibility guarantees."}
{"index": 110, "repo": "ignite-core-2.15.0", "code": "package logger;\n\npackage logger.java; // Contains Java logging implementation for logging.\nClass NullLogger; // Logger which does not output anything.\n", "des": "Contains logging functionality used throughout the system."}
{"index": 990, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass DefaultStrategiesHelper; // Helper class for for loading default implementations of an interface.\nClass MarshallingUtils; // Helper class for endpoints and endpoint mappings that use marshalling.\nClass WebUtils; // Miscellaneous utilities for web applications.\n", "des": "Provides general helper classes for Spring Web Services."}
{"index": 2738, "repo": "spring-batch-infrastructure-5.0.2", "code": "package util;\n\npublic class ExecutionContextUserSupport extends Object; // Facilitates assigning names to objects persisting data in ExecutionContext and generating keys for ExecutionContext based on the name.\npublic final class FileUtils extends Object; // Utility methods for files used in batch processing.\n", "des": "Infrastructure utility classes."}
{"index": 3017, "repo": "spring-web-6.0.11", "code": "package reactive;\n\npackage reactive.observation; // Instrumentation for observing reactive HTTP server applications.\npublic abstract class AbstractListenerReadPublisher<T> extends Object implements Publisher<T>; // Abstract base class for Publisher implementations that bridge between event-listener read APIs and Reactive Streams.\npublic abstract class AbstractListenerServerHttpResponse extends AbstractServerHttpResponse; // Abstract base class for listener-based server responses.\npublic abstract class AbstractListenerWriteFlushProcessor<T> extends Object implements Processor<Publisher<? extends T>,Void>; // An alternative to AbstractListenerWriteProcessor but instead writing a Publisher<Publisher<T>> with flush boundaries enforces after the completion of each nested Publisher.\npublic abstract class AbstractListenerWriteProcessor<T> extends Object implements Processor<T,Void>; // Abstract base class for Processor implementations that bridge between event-listener write APIs and Reactive Streams.\npublic abstract class AbstractServerHttpRequest extends Object implements ServerHttpRequest; // Common base class for ServerHttpRequest implementations.\npublic abstract class AbstractServerHttpResponse extends Object implements ServerHttpResponse; // Base class for ServerHttpResponse implementations.\npublic class ChannelSendOperator<T> extends reactor.core.publisher.Mono<Void> implements reactor.core.Scannable; // Given a write function that accepts a source Publisher<T> to write with and returns Publisher<Void> for the result, this operator helps to defer the invocation of the write function, until we know if the source publisher will begin publishing without an error.\npublic class ContextPathCompositeHandler extends Object implements HttpHandler; // HttpHandler delegating requests to one of several HttpHandler's based on simple, prefix-based mappings.\npublic interface HttpHandler; // Lowest level contract for reactive HTTP request handling that serves as a common denominator across different runtimes.\npublic interface HttpHandlerDecoratorFactory extends Function<HttpHandler,HttpHandler>; // Contract for applying a decorator to an HttpHandler.\npublic class HttpHeadResponseDecorator extends ServerHttpResponseDecorator; // ServerHttpResponse decorator for HTTP HEAD requests.\npublic class JettyHttpHandlerAdapter extends ServletHttpHandlerAdapter; // ServletHttpHandlerAdapter extension that uses Jetty APIs for writing to the response with ByteBuffer.\n", "des": "Abstractions for reactive HTTP server support including a ServerHttpRequest and ServerHttpResponse along with an HttpHandler for processing."}
{"index": 2471, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package signalfx;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.signalfx.SignalFxMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"signalfx\") @EnableConfigurationProperties(SignalFxProperties.class) public class SignalFxMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to SignalFX.\n@ConfigurationProperties(prefix=\"management.signalfx.metrics.export\") public class SignalFxProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring metrics export to SignalFX.\npublic class SignalFxPropertiesConfigAdapter extends StepRegistryPropertiesConfigAdapter<SignalFxProperties> implements io.micrometer.signalfx.SignalFxConfig; // Adapter to convert SignalFxProperties to a SignalFxConfig.\n", "des": "Support for exporting actuator metrics to SignalFX."}
{"index": 865, "repo": "calcite-core-1.34.0", "code": "package type;\n\nInterface ExtraSqlTypes; // Holds constants associated with SQL types introduced after the earliest version of Java supported by Farrago (this currently means anything introduced in JDK 1.6 or later).\nInterface ImplicitCastOperandTypeChecker; // An operand type checker that supports implicit type cast, see TypeCoercion.builtinFunctionCoercion(SqlCallBinding, List, List) for details.\nInterface SqlOperandHandler; // Strategy interface to process operands of an operator call.\nInterface SqlOperandMetadata; // Extension to SqlOperandTypeChecker that also provides names and types of particular operands.\nInterface SqlOperandTypeChecker; // Strategy interface to check for allowed operand types of an operator call.\nInterface SqlOperandTypeInference; // Strategy to infer unknown types of the operands of an operator call.\nInterface SqlReturnTypeInference; // Strategy interface to infer the type of an operator call from the type of the operands.\nInterface SqlSingleOperandTypeChecker; // SqlSingleOperandTypeChecker is an extension of SqlOperandTypeChecker for implementations which are capable of checking the type of a single operand in isolation.\nInterface SqlTypeMappingRule; // Interface that defines rules within type mappings.\nInterface SqlTypeTransform; // Strategy to transform one type to another.\nClass AbstractSqlType; // Abstract base class for SQL implementations of RelDataType.\nClass ArraySqlType; // SQL array type.\nClass AssignableOperandTypeChecker; // AssignableOperandTypeChecker implements SqlOperandTypeChecker by verifying that the type of each argument is assignable to a predefined set of parameter types (under the SQL definition of \"assignable\").\nClass BasicSqlType; // BasicSqlType represents a standard atomic SQL type (excluding interval types).\nClass ComparableOperandTypeChecker; // Type checking strategy which verifies that types have the required attributes to be used as arguments to comparison operators.\nClass CompositeOperandTypeChecker; // This class allows multiple existing SqlOperandTypeChecker rules to be combined into one rule.\nClass CompositeSingleOperandTypeChecker; // Allows multiple SqlSingleOperandTypeChecker rules to be combined into one rule.\nClass CursorReturnTypeInference; // Returns the rowtype of a cursor of the operand at a particular 0-based ordinal position.\nClass ExplicitOperandTypeChecker; // Parameter type-checking strategy for Explicit Type.\nClass ExplicitOperandTypeInference; // ExplicitOperandTypeInferences implements SqlOperandTypeInference by explicitly supplying a type for each parameter.\n", "des": "SQL type system."}
{"index": 3133, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package jndi;\n\npackage jndi.spi; // The SPI contracts for Hibernate JNDI support\nClass JndiException; // An exception indicating trouble accessing JNDI\nClass JndiNameException; // Indicates a problem with a given JNDI name being deemed as not valid.\n", "des": "Support for JNDI within Hibernate"}
{"index": 162, "repo": "ignite-core-2.15.0", "code": "package port;\n\nInterface GridPortListener; // Listener for port change events.\nClass GridPortProcessor; // Registers and deregisters all ports used by SPI and Manager.\nClass GridPortRecord; // This class defines record about port use.\n", "des": "TODO."}
{"index": 2081, "repo": "spring-webmvc-6.0.11", "code": "package view;\n\npackage view.document; // Support classes for document generation, providing View implementations for PDF and Excel.\npackage view.feed; // Support classes for feed generation, providing View implementations for Atom and RSS.\npackage view.freemarker; // Support classes for the integration of FreeMarker as Spring web view technology.\npackage view.groovy; // Support classes for the integration of Groovy Templates as Spring web view technology.\npackage view.json; // Support classes for providing a View implementation based on JSON serialization.\npackage view.script; // Support classes for views based on the JSR-223 script engine abstraction (as included in Java 6+), e.g.\npackage view.xml; // Support classes for providing a View implementation based on XML Marshalling.\npackage view.xslt; // Support classes for XSLT, providing a View implementation for XSLT stylesheets.\npublic abstract class AbstractCachingViewResolver extends org.springframework.web.context.support.WebApplicationObjectSupport implements ViewResolver; // Convenient base class for ViewResolver implementations.\n@FunctionalInterface public static interface AbstractCachingViewResolver.CacheFilter; // Filter that determines if view should be cached.\npublic abstract class AbstractTemplateView extends AbstractUrlBasedView; // Adapter base class for template-based view technologies such as FreeMarker, with the ability to use request and session attributes in their model and the option to expose helper objects for Spring's FreeMarker macro library.\npublic abstract class AbstractTemplateViewResolver extends UrlBasedViewResolver; // Abstract base class for template view resolvers, in particular for FreeMarker views.\npublic abstract class AbstractUrlBasedView extends AbstractView implements org.springframework.beans.factory.InitializingBean; // Abstract base class for URL-based views.\npublic abstract class AbstractView extends org.springframework.web.context.support.WebApplicationObjectSupport implements View, org.springframework.beans.factory.BeanNameAware; // Abstract base class for View implementations.\npublic class BeanNameViewResolver extends org.springframework.web.context.support.WebApplicationObjectSupport implements ViewResolver, org.springframework.core.Ordered; // A simple implementation of ViewResolver that interprets a view name as a bean name in the current application context, i.e.\n", "des": "Provides standard View and ViewResolver implementations, including abstract base classes for custom implementations."}
{"index": 1828, "repo": "spring-test-6.0.11", "code": "package http;\n\npackage http.client; // Mock implementations of client-side HTTP abstractions.\npublic class MockHttpInputMessage extends Object implements org.springframework.http.HttpInputMessage; // Mock implementation of HttpInputMessage.\npublic class MockHttpOutputMessage extends Object implements org.springframework.http.HttpOutputMessage; // Mock implementation of HttpOutputMessage.\n", "des": "Mock implementations of client/server-side HTTP abstractions."}
{"index": 2222, "repo": "spring-data-commons-3.1.2", "code": "package query;\n\npackage query.parser; // Support classes for parsing queries from method names.\npublic final class DefaultParameters extends Parameters<DefaultParameters,Parameter>; // Default implementation of Parameters.\npublic class ExtensionAwareQueryMethodEvaluationContextProvider extends Object implements QueryMethodEvaluationContextProvider; // An QueryMethodEvaluationContextProvider that assembles an EvaluationContext from a list of EvaluationContextExtension instances.\npublic interface FluentQuery<T>; // Fluent interface to define and run a query along with projection and sorting and.\npublic static interface FluentQuery.FetchableFluentQuery<T> extends FluentQuery<T>; // Fetchable extension FluentQuery allowing to materialize results from the underlying query.\npublic static interface FluentQuery.ReactiveFluentQuery<T> extends FluentQuery<T>; // Reactive extension FluentQuery allowing to materialize results from the underlying query.\npublic interface ListQueryByExampleExecutor<T> extends QueryByExampleExecutor<T>; // Interface to allow execution of Query by Example Example instances.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface Param; // Annotation to bind method parameters to a query via a named parameter.\npublic class Parameter extends Object; // Class to abstract a single parameter of a query method.\npublic interface ParameterAccessor extends Iterable<Object>; // Interface to access method parameters.\npublic class ParameterOutOfBoundsException extends RuntimeException; // Exception to be thrown when trying to access a Parameter with an invalid index inside a Parameters instance.\npublic abstract class Parameters<S extends Parameters<S,T>,T extends Parameter> extends Object implements Streamable<T>; // Abstracts method parameters that have to be bound to query parameters or applied to the query independently.\npublic class ParametersParameterAccessor extends Object implements ParameterAccessor; // ParameterAccessor implementation using a Parameters instance to find special parameters.\npublic interface QueryByExampleExecutor<T>; // Interface to allow execution of Query by Example Example instances.\npublic final class QueryCreationException extends RepositoryCreationException; // Exception to be thrown if a query cannot be created from a Method.\npublic interface QueryLookupStrategy; // Strategy interface for which way to lookup RepositoryQuerys.\npublic static enum QueryLookupStrategy.Key extends Enum<QueryLookupStrategy.Key>;\npublic class QueryMethod extends Object; // Abstraction of a method that is designated to execute a finder query.\n", "des": "Support classes to work with query methods."}
{"index": 1599, "repo": "spring-websocket-6.0.11", "code": "package support;\n\npublic abstract class AbstractHandshakeHandler extends Object implements HandshakeHandler, org.springframework.context.Lifecycle; // A base class for HandshakeHandler implementations, independent of the Servlet API.\npublic class DefaultHandshakeHandler extends AbstractHandshakeHandler implements org.springframework.web.context.ServletContextAware; // A default HandshakeHandler implementation, extending AbstractHandshakeHandler with Servlet-specific initialization support.\npublic class HandshakeInterceptorChain extends Object; // A helper class that assists with invoking a list of handshake interceptors.\npublic class HttpSessionHandshakeInterceptor extends Object implements HandshakeInterceptor; // An interceptor to copy information from the HTTP session to the \"handshake attributes\" map to be made available via WebSocketSession.getAttributes().\npublic class OriginHandshakeInterceptor extends Object implements HandshakeInterceptor; // An interceptor to check request Origin header value against a collection of allowed origins.\npublic class WebSocketHandlerMapping extends org.springframework.web.servlet.handler.SimpleUrlHandlerMapping implements org.springframework.context.SmartLifecycle; // Extension of SimpleUrlHandlerMapping with support for more precise mapping of WebSocket handshake requests to handlers of type WebSocketHttpRequestHandler.\npublic class WebSocketHttpRequestHandler extends Object implements org.springframework.web.HttpRequestHandler, org.springframework.context.Lifecycle, org.springframework.web.context.ServletContextAware; // A HttpRequestHandler for processing WebSocket handshake requests.\n", "des": "Server-side support classes including container-specific strategies for upgrading a request."}
{"index": 3371, "repo": "opencms-core-15.0", "code": "package galleries;\n\nClass A_CmsAjaxGallery; // Provides the general helper methods to generate the content of a gallery dialog used in the XML content editors, WYSIWYG editors and context menu.\nClass CmsAjaxDownloadGallery; // Provides the specific constants, members and helper methods to generate the content of the download gallery dialog used in the XML content editors, WYSIWYG editors and context menu.\nClass CmsAjaxImageGallery; // Provides the specific constants, members and helper methods to generate the content of the image gallery dialog used in the XML content editors, WYSIWYG editors and context menu.\nClass CmsAjaxLinkGallery; // Provides the specific constants, members and helper methods to generate the content of the external link gallery dialog used in the XML content editors, WYSIWYG editors and context menu.\nClass CmsOpenGallery; // Provides methods for open gallery dialog.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains the various \"Galleries\" which are available in the editors and widgets of the OpenCms Workplace."}
{"index": 2201, "repo": "spring-data-commons-3.1.2", "code": "package crossstore;\n\npublic interface ChangeSet; // Interface representing the set of changes in an entity.\npublic interface ChangeSetBacked; // Interface introduced to objects exposing ChangeSet information\npublic class ChangeSetBackedTransactionSynchronization extends Object implements TransactionSynchronization;\npublic interface ChangeSetPersister<K>; // Interface to be implemented by classes that can synchronize between data stores and ChangeSets.\npublic static class ChangeSetPersister.NotFoundException extends Exception; // Exception thrown in alternate control flow if getPersistentState finds no entity data.\npublic class HashMapChangeSet extends Object implements ChangeSet; // Simple ChangeSet implementation backed by a HashMap.\n", "des": "Support for cross-store persistence."}
{"index": 1000, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass JmsTransportUtils; // Collection of utility methods to work with JMS transports.\n", "des": "Classes supporting the org.springframework.ws.transport.jms package."}
{"index": 1905, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package condition;\n\npublic abstract class AbstractNestedCondition extends SpringBootCondition implements org.springframework.context.annotation.ConfigurationCondition; // Abstract base class for nested conditions.\nprotected static class AbstractNestedCondition.MemberMatchOutcomes extends Object;\npublic abstract class AllNestedConditions extends AbstractNestedCondition; // Condition that will match when all nested class conditions match.\n@Order(2147483627) public abstract class AnyNestedCondition extends AbstractNestedCondition; // Condition that will match when any nested class condition matches.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.condition.OnBeanCondition.class) public @interface ConditionalOnBean; // @Conditional that only matches when beans meeting all the specified requirements are already contained in the BeanFactory.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.condition.OnClassCondition.class) public @interface ConditionalOnClass; // @Conditional that only matches when the specified classes are on the classpath.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.condition.OnCloudPlatformCondition.class) public @interface ConditionalOnCloudPlatform; // @Conditional that matches when the specified cloud platform is active.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.autoconfigure.condition.OnExpressionCondition.class) public @interface ConditionalOnExpression; // Configuration annotation for a conditional element that depends on the value of a SpEL expression.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.condition.OnJavaCondition.class) public @interface ConditionalOnJava; // @Conditional that matches based on the JVM version the application is running on.\npublic static enum ConditionalOnJava.Range extends Enum<ConditionalOnJava.Range>; // Range options.\n", "des": "@Condition annotations and supporting classes."}
{"index": 1588, "repo": "spring-websocket-6.0.11", "code": "package standard;\n\npublic abstract class ConvertingEncoderDecoderSupport<T,M> extends Object; // Base class that can be used to implement a standard Encoder and/or Decoder.\npublic abstract static class ConvertingEncoderDecoderSupport.BinaryDecoder<T> extends ConvertingEncoderDecoderSupport<T,ByteBuffer> implements Decoder.Binary<T>; // A binary jakarta.websocket.Encoder that delegates to Spring's conversion service.\npublic abstract static class ConvertingEncoderDecoderSupport.BinaryEncoder<T> extends ConvertingEncoderDecoderSupport<T,ByteBuffer> implements Encoder.Binary<T>; // A binary jakarta.websocket.Encoder that delegates to Spring's conversion service.\npublic abstract static class ConvertingEncoderDecoderSupport.TextDecoder<T> extends ConvertingEncoderDecoderSupport<T,String> implements Decoder.Text<T>; // A Text jakarta.websocket.Encoder that delegates to Spring's conversion service.\npublic abstract static class ConvertingEncoderDecoderSupport.TextEncoder<T> extends ConvertingEncoderDecoderSupport<T,String> implements Encoder.Text<T>; // A text jakarta.websocket.Encoder that delegates to Spring's conversion service.\npublic class StandardToWebSocketExtensionAdapter extends WebSocketExtension; // A subclass of WebSocketExtension that can be constructed from a Extension.\npublic class StandardWebSocketHandlerAdapter extends Endpoint; // Adapts a WebSocketHandler to the standard WebSocket for Java API.\npublic class StandardWebSocketSession extends AbstractWebSocketSession<Session>; // A WebSocketSession for use with the standard WebSocket for Java API.\npublic class WebSocketToStandardExtensionAdapter extends Object implements Extension; // Adapt an instance of WebSocketExtension to the Extension interface.\n", "des": "Adapter classes for the standard Jakarta WebSocket API."}
{"index": 2526, "repo": "spring-security-core-6.1.2", "code": "package authentication;\n\npackage authentication.dao; // An AuthenticationProvider which relies upon a data access object.\npackage authentication.event; // Authentication success and failure events which can be published to the Spring application context.\npackage authentication.jaas; // An authentication provider for JAAS.\npublic abstract class AbstractAuthenticationToken extends Object implements Authentication, CredentialsContainer; // Base class for Authentication objects.\npublic abstract class AbstractUserDetailsReactiveAuthenticationManager extends Object implements ReactiveAuthenticationManager, org.springframework.context.MessageSourceAware; // A base ReactiveAuthenticationManager that allows subclasses to override and work with UserDetails objects.\npublic class AccountExpiredException extends AccountStatusException; // Thrown if an authentication request is rejected because the account has expired.\npublic abstract class AccountStatusException extends AuthenticationException; // Base class for authentication exceptions which are caused by a particular user account status (locked, disabled etc).\npublic class AccountStatusUserDetailsChecker extends Object implements UserDetailsChecker, org.springframework.context.MessageSourceAware;\npublic class AnonymousAuthenticationProvider extends Object implements AuthenticationProvider, org.springframework.context.MessageSourceAware; // An AuthenticationProvider implementation that validates AnonymousAuthenticationTokens.\npublic class AnonymousAuthenticationToken extends AbstractAuthenticationToken implements Serializable; // Represents an anonymous Authentication.\npublic class AuthenticationCredentialsNotFoundException extends AuthenticationException; // Thrown if an authentication request is rejected because there is no Authentication object in the SecurityContext.\npublic interface AuthenticationDetailsSource<C,T>; // Provides a Authentication.getDetails() object for a given web request.\npublic interface AuthenticationEventPublisher;\npublic interface AuthenticationManager; // Processes an Authentication request.\npublic interface AuthenticationManagerResolver<C>; // An interface for resolving an AuthenticationManager based on the provided context\npublic class AuthenticationObservationContext extends io.micrometer.observation.Observation.Context; // An Observation.Context used during authentications\npublic final class AuthenticationObservationConvention extends Object implements io.micrometer.observation.ObservationConvention<AuthenticationObservationContext>; // An ObservationConvention for translating authentications into KeyValues.\npublic interface AuthenticationProvider; // Indicates a class can process a specific Authentication implementation.\npublic class AuthenticationServiceException extends AuthenticationException; // Thrown if an authentication request could not be processed due to a system problem.\npublic interface AuthenticationTrustResolver; // Evaluates Authentication tokens\n", "des": "Core classes and interfaces related to user authentication, which are used throughout Spring Security."}
{"index": 661, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package webapp;\n\nInterface AppInfoProvider; // Classes implementing this interface are used in the LogServlet for providing various application related information.\nInterface YarnWebServiceParams; // Common web service parameters which could be used in RM/NM/AHS WebService.\nClass AppAttemptBlock;\nClass AppBlock;\nClass AppsBlock;\nClass ContainerBlock;\nClass ErrorsAndWarningsBlock;\nClass ErrorsAndWarningsBlock.ErrorMetrics;\nClass ErrorsAndWarningsBlock.MetricsBase;\nClass ErrorsAndWarningsBlock.WarningMetrics;\nClass LogServlet; // Extracts aggregated logs and related information.\nClass LogWebService; // Support only ATSv2 client only.\nClass LogWebServiceUtils; // Log web service utils class.\nClass WebPageUtils;\nClass WebServices;\nClass WrappedLogMetaRequest; // WrappedLogMetaRequest is wrapping a log request initiated by the client.\nClass WrappedLogMetaRequest.Builder;\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 3745, "repo": "lucene-queryparser-9.7.0", "code": "package intervalfn;\n\nClass After; // Node that represents Intervals.after(IntervalsSource, IntervalsSource).\nClass AnalyzedText; // Node that represents Intervals.analyzedText(String, Analyzer, String, int, boolean).\nClass AtLeast; // Node that represents Intervals.atLeast(int, IntervalsSource...).\nClass Before; // Node that represents Intervals.before(IntervalsSource, IntervalsSource).\nClass ContainedBy; // Node that represents Intervals.containedBy(IntervalsSource, IntervalsSource).\nClass Containing; // Node that represents Intervals.containing(IntervalsSource, IntervalsSource).\nClass Extend; // Node that represents Intervals.extend(IntervalsSource, int, int).\nClass FuzzyTerm; // An interval function equivalent to FuzzyQuery.\nClass IntervalFunction; // Representation of an interval function that can be converted to IntervalsSource.\nClass MaxGaps; // Node that represents Intervals.maxgaps(int, IntervalsSource).\nClass MaxWidth; // Node that represents Intervals.maxwidth(int, IntervalsSource).\nClass NonOverlapping; // Node that represents Intervals.nonOverlapping(IntervalsSource, IntervalsSource) .\nClass NotContainedBy; // Node that represents Intervals.notContainedBy(IntervalsSource, IntervalsSource).\nClass NotContaining; // Node that represents Intervals.notContaining(IntervalsSource, IntervalsSource).\nClass NotWithin; // Node that represents Intervals.notWithin(IntervalsSource, int, IntervalsSource).\nClass Or; // Node that represents Intervals.or(IntervalsSource...).\nClass Ordered; // Node that represents Intervals.ordered(IntervalsSource...).\nClass Overlapping; // Node that represents Intervals.overlapping(IntervalsSource, IntervalsSource).\nClass Phrase; // Node that represents Intervals.phrase(String...).\nClass Unordered; // Node that represents Intervals.unordered(IntervalsSource...).\nClass UnorderedNoOverlaps; // Node that represents Intervals.unorderedNoOverlaps(IntervalsSource, IntervalsSource).\nClass Wildcard; // Node that represents Intervals.wildcard(BytesRef).\nClass Within; // Node that represents Intervals.within(IntervalsSource, int, IntervalsSource).\n", "des": "This package contains classes that implement interval function support for the standard syntax parser."}
{"index": 1447, "repo": "spring-data-redis-3.1.2", "code": "package lettuce;\n\npackage lettuce.observability; // Integration of Micrometer Tracing for Lettuce Observability.\npublic interface LettuceClientConfiguration; // Redis client configuration for lettuce.\npublic static class LettuceClientConfiguration.LettuceClientConfigurationBuilder extends Object;\npublic static class LettuceClientConfiguration.LettuceSslClientConfigurationBuilder extends Object; // Builder for SSL-related LettuceClientConfiguration.\npublic class LettuceClusterConnection extends LettuceConnection implements RedisClusterConnection, DefaultedRedisClusterConnection; // RedisClusterConnection implementation on top of Lettuce Redis client.\nprotected static interface LettuceClusterConnection.LettuceClusterCommandCallback<T> extends ClusterCommandExecutor.ClusterCommandCallback<io.lettuce.core.cluster.api.sync.RedisClusterCommands<byte[],byte[]>,T>; // Lettuce specific implementation of ClusterCommandExecutor.ClusterCommandCallback.\nprotected static interface LettuceClusterConnection.LettuceMultiKeyClusterCommandCallback<T> extends ClusterCommandExecutor.MultiKeyClusterCommandCallback<io.lettuce.core.cluster.api.sync.RedisClusterCommands<byte[],byte[]>,T>; // Lettuce specific implementation of ClusterCommandExecutor.MultiKeyClusterCommandCallback.\npublic class LettuceConnection extends AbstractRedisConnection; // RedisConnection implementation on top of Lettuce Redis client.\npublic static interface LettuceConnection.PipeliningFlushPolicy; // Strategy interface to control pipelining flush behavior.\npublic static interface LettuceConnection.PipeliningFlushState; // State object associated with flushing of the currently ongoing pipeline.\npublic class LettuceConnectionFactory extends Object implements InitializingBean, DisposableBean, RedisConnectionFactory, ReactiveRedisConnectionFactory; // Connection factory creating Lettuce-based connections.\n@FunctionalInterface public interface LettuceConnectionProvider; // Defines a provider for Lettuce connections.\n@FunctionalInterface public static interface LettuceConnectionProvider.TargetAware; // Extension to LettuceConnectionProvider for providers that allow connection creation to specific nodes.\npublic abstract class LettuceConverters extends Converters; // Lettuce type converters\npublic class LettuceExceptionConverter extends Object implements Converter<Exception,DataAccessException>; // Converts Lettuce Exceptions to DataAccessExceptions\n", "des": "Connection package for Lettuce Redis client."}
{"index": 1284, "repo": "spring-core-6.0.11", "code": "package task;\n\npackage task.support; // Support classes for Spring's TaskExecutor abstraction.\n@Deprecated(since=\"6.0\") public interface AsyncListenableTaskExecutor extends AsyncTaskExecutor;\npublic interface AsyncTaskExecutor extends TaskExecutor; // Extended interface for asynchronous TaskExecutor implementations, offering support for Callable.\npublic class SimpleAsyncTaskExecutor extends CustomizableThreadCreator implements AsyncListenableTaskExecutor, Serializable; // TaskExecutor implementation that fires up a new Thread for each task, executing it asynchronously.\npublic class SyncTaskExecutor extends Object implements TaskExecutor, Serializable; // TaskExecutor implementation that executes each task synchronously in the calling thread.\n@FunctionalInterface public interface TaskDecorator; // A callback interface for a decorator to be applied to any Runnable about to be executed.\n@FunctionalInterface public interface TaskExecutor extends Executor; // Simple task executor interface that abstracts the execution of a Runnable.\npublic class TaskRejectedException extends RejectedExecutionException; // Exception thrown when a TaskExecutor rejects to accept a given task for execution.\n@Deprecated public class TaskTimeoutException extends TaskRejectedException;\n", "des": "This package defines Spring's core TaskExecutor abstraction, and provides SyncTaskExecutor and SimpleAsyncTaskExecutor implementations."}
{"index": 844, "repo": "calcite-core-1.34.0", "code": "package logical;\n\nClass LogicalAggregate; // LogicalAggregate is a relational operator which eliminates duplicates and computes totals.\nClass LogicalCalc; // A relational expression which computes project expressions and also filters.\nClass LogicalCorrelate; // A relational operator that performs nested-loop joins.\nClass LogicalExchange; // Sub-class of Exchange not targeted at any particular engine or calling convention.\nClass LogicalFilter; // Sub-class of Filter not targeted at any particular engine or calling convention.\nClass LogicalIntersect; // Sub-class of Intersect not targeted at any particular engine or calling convention.\nClass LogicalJoin; // Sub-class of Join not targeted at any particular engine or calling convention.\nClass LogicalMatch; // Sub-class of Match not targeted at any particular engine or calling convention.\nClass LogicalMinus; // Sub-class of Minus not targeted at any particular engine or calling convention.\nClass LogicalProject; // Sub-class of Project not targeted at any particular engine or calling convention.\nClass LogicalRepeatUnion; // Sub-class of RepeatUnion not targeted at any particular engine or calling convention.\nClass LogicalSnapshot; // Sub-class of Snapshot not targeted at any particular engine or calling convention.\nClass LogicalSort; // Sub-class of Sort not targeted at any particular engine or calling convention.\nClass LogicalSortExchange; // Sub-class of SortExchange not targeted at any particular engine or calling convention.\nClass LogicalTableFunctionScan; // Sub-class of TableFunctionScan not targeted at any particular engine or calling convention.\nClass LogicalTableModify; // Sub-class of TableModify not targeted at any particular engine or calling convention.\nClass LogicalTableScan; // A LogicalTableScan reads all the rows from a RelOptTable.\nClass LogicalTableSpool; // Sub-class of TableSpool not targeted at any particular engine or calling convention.\nClass LogicalUnion; // Sub-class of Union not targeted at any particular engine or calling convention.\nClass LogicalValues; // Sub-class of Values not targeted at any particular engine or calling convention.\nClass LogicalWindow; // Sub-class of Window not targeted at any particular engine or calling convention.\nClass ToLogicalConverter; // Shuttle to convert any rel plan to a plan with all logical nodes.\n", "des": "Defines logical relational expressions."}
{"index": 531, "repo": "commons-vfs2-2.9.0", "code": "package res;\n\nClass ResourceFileName; // A resource file URI.\nClass ResourceFileNameParser; // Slightly modified filename parser for resource URIs.\nClass ResourceFileProvider; // The Resource provider.\nClass ResourceFileSystemConfigBuilder; // The config BUILDER for various FTP configuration options.\n", "des": "The Resource File Provider"}
{"index": 1375, "repo": "spring-boot-actuator-3.1.1", "code": "package cassandra;\n\npublic class CassandraDriverHealthIndicator extends AbstractHealthIndicator; // Simple implementation of a HealthIndicator returning status information for Cassandra data stores.\npublic class CassandraDriverReactiveHealthIndicator extends AbstractReactiveHealthIndicator; // Simple implementation of a ReactiveHealthIndicator returning status information for Cassandra data stores.\n", "des": "Actuator support for Cassandra."}
{"index": 2697, "repo": "spring-integration-http-6.1.2", "code": "package management;\n\n@RestController @RequestMapping(\"${spring.integration.graph.controller.request.mapping.path:/integration}\") public class IntegrationGraphController extends Object; // The REST Controller to provide the management API over IntegrationGraphServer.\n", "des": "Provides classes related to management support."}
{"index": 2802, "repo": "spring-security-oauth2-core-6.1.2", "code": "package core;\n\npackage core.endpoint; // Support classes that model the OAuth 2.0 Request and Response messages from the Authorization Endpoint and Token Endpoint.\npackage core.oidc; // Core classes and interfaces providing support for OpenID Connect Core 1.0.\npackage core.user; // Provides a model for an OAuth 2.0 representation of a user Principal.\npublic abstract class AbstractOAuth2Token extends Object implements OAuth2Token, Serializable; // Base class for OAuth 2.0 Token implementations.\npublic final class AuthenticationMethod extends Object implements Serializable; // The authentication method used when sending bearer access tokens in resource requests to resource servers.\npublic final class AuthorizationGrantType extends Object implements Serializable; // An authorization grant is a credential representing the resource owner's authorization (to access it's protected resources) to the client and used by the client to obtain an access token.\npublic interface ClaimAccessor; // An \"accessor\" for a set of claims that may be used for assertions.\npublic final class ClientAuthenticationMethod extends Object implements Serializable; // The authentication method used when authenticating the client with the authorization server.\npublic final class DefaultOAuth2AuthenticatedPrincipal extends Object implements OAuth2AuthenticatedPrincipal, Serializable; // A domain object that wraps the attributes of an OAuth 2.0 token.\npublic final class DelegatingOAuth2TokenValidator<T extends OAuth2Token> extends Object implements OAuth2TokenValidator<T>; // A composite validator\npublic class OAuth2AccessToken extends AbstractOAuth2Token; // An implementation of an AbstractOAuth2Token representing an OAuth 2.0 Access Token.\npublic static final class OAuth2AccessToken.TokenType extends Object implements Serializable; // Access Token Types.\npublic interface OAuth2AuthenticatedPrincipal extends org.springframework.security.core.AuthenticatedPrincipal; // An AuthenticatedPrincipal that represents the principal associated with an OAuth 2.0 token.\npublic class OAuth2AuthenticationException extends org.springframework.security.core.AuthenticationException; // This exception is thrown for all OAuth 2.0 related Authentication errors.\npublic class OAuth2AuthorizationException extends RuntimeException; // Base exception for OAuth 2.0 Authorization errors.\npublic class OAuth2DeviceCode extends AbstractOAuth2Token; // An implementation of an AbstractOAuth2Token representing a device code as part of the OAuth 2.0 Device Authorization Grant.\npublic class OAuth2Error extends Object implements Serializable; // A representation of an OAuth 2.0 Error.\n", "des": "Core classes and interfaces providing support for the OAuth 2.0 Authorization Framework."}
{"index": 1253, "repo": "spring-core-6.0.11", "code": "package hint;\n\npackage hint.annotation; // Annotation support for runtime hints.\npackage hint.predicate; // Predicate support for runtime hints.\npackage hint.support; // Convenience classes for using runtime hints.\npublic abstract class AbstractTypeReference extends Object implements TypeReference; // Base TypeReference implementation that ensures consistent behaviour for equals(), hashCode(), and toString() based on the canonical name.\npublic class BindingReflectionHintsRegistrar extends Object; // Register the necessary reflection hints so that the specified type can be bound at runtime.\npublic interface ConditionalHint; // Contract for runtime hints that only apply if the described condition is met.\npublic final class ExecutableHint extends MemberHint; // A hint that describes the need for reflection on a Method or Constructor.\npublic static class ExecutableHint.Builder extends Object; // Builder for ExecutableHint.\npublic enum ExecutableMode extends Enum<ExecutableMode>; // Represent the need of reflection for a given Executable.\npublic final class FieldHint extends MemberHint; // A hint that describes the need for reflection on a Field.\npublic class JavaSerializationHint extends Object implements ConditionalHint; // A hint that describes the need for Java serialization at runtime.\npublic static class JavaSerializationHint.Builder extends Object; // Builder for JavaSerializationHint.\npublic final class JdkProxyHint extends Object implements ConditionalHint; // A hint that describes the need for a JDK interface-based Proxy.\npublic static class JdkProxyHint.Builder extends Object; // Builder for JdkProxyHint.\npublic enum MemberCategory extends Enum<MemberCategory>; // Predefined Member categories.\npublic abstract class MemberHint extends Object; // Base hint that describes the need for reflection on a Member.\npublic class ProxyHints extends Object; // Gather the need for using proxies at runtime.\npublic class ReflectionHints extends Object; // Gather the need for reflection at runtime.\npublic final class ResourceBundleHint extends Object implements ConditionalHint; // A hint that describes the need to access a ResourceBundle.\npublic static class ResourceBundleHint.Builder extends Object; // Builder for ResourceBundleHint.\npublic class ResourceHints extends Object; // Gather the need for resources available at runtime.\npublic final class ResourcePatternHint extends Object implements ConditionalHint; // A hint that describes resources that should be made available at runtime.\npublic final class ResourcePatternHints extends Object; // A collection of ResourcePatternHint describing whether resources should be made available at runtime using a matching algorithm based on include/exclude patterns.\n", "des": "Support for registering the need for reflection, resources, java serialization and proxies at runtime."}
{"index": 2109, "repo": "spring-webflux-6.0.11", "code": "package client;\n\n@Deprecated(since=\"6.0.3\", forRemoval=true) public class JettyWebSocketClient extends Object implements WebSocketClient, org.springframework.context.Lifecycle;\npublic class ReactorNetty2WebSocketClient extends Object implements WebSocketClient; // WebSocketClient implementation for use with Reactor Netty for Netty 5.\npublic class ReactorNettyWebSocketClient extends Object implements WebSocketClient; // WebSocketClient implementation for use with Reactor Netty.\npublic class StandardWebSocketClient extends Object implements WebSocketClient; // WebSocketClient implementation for use with the Jakarta WebSocket API.\npublic class TomcatWebSocketClient extends StandardWebSocketClient; // WebSocketClient implementation for use with Tomcat, based on the Jakarta WebSocket API.\npublic class UndertowWebSocketClient extends Object implements WebSocketClient; // Undertow based implementation of WebSocketClient.\npublic interface WebSocketClient; // Contract for reactive-style handling of a WebSocket session.\n", "des": "Client support for WebSocket interactions."}
{"index": 3173, "repo": "tomcat-api-10.1", "code": "package ha;\n\nInterface CatalinaCluster; // A CatalinaCluster interface allows to plug in and out the different cluster implementations\nInterface ClusterDeployer; // A ClusterDeployer interface allows to plug in and out the different deployment implementations\nInterface ClusterManager; // The common interface used by all cluster manager.\nInterface ClusterMessage;\nInterface ClusterSession;\nInterface ClusterValve; // Cluster valves are a simple extension to the Tomcat valve architecture with a small addition of being able to reference the cluster component in the container it sits in.\nClass ClusterListener; // Receive SessionID cluster change from other backup node after primary session node is failed.\nClass ClusterMessageBase;\nClass ClusterRuleSet; // RuleSet for processing the contents of a Cluster definition element.\n", "des": "This package contains code for Clustering, the base class of a Cluster is org.apache.catalina.Cluster implementations of this class is done when implementing a new Cluster protocol"}
{"index": 864, "repo": "calcite-core-1.34.0", "code": "package pretty;\n\nClass SqlFormatOptions; // Data structure to hold options for SqlPrettyWriter.setFormatOptions(SqlFormatOptions).\nClass SqlPrettyWriter; // Pretty printer for SQL statements.\n", "des": "Provides a pretty-printer for SQL statements."}
{"index": 556, "repo": "hadoop-common-3.3.4", "code": "package sftp;\n\nClass SFTPFileSystem; // SFTP FileSystem.\n", "des": "SFTP FileSystem package."}
{"index": 13, "repo": "connect-api-3.5.0", "code": "package util;\n\nClass ConnectorUtils; // Utilities that connector implementations might find useful.\n", "des": "Provides common utilities that can be used in component implementations."}
{"index": 3560, "repo": "guava-32.1.1-jre", "code": "package math;\n\nClass BigDecimalMath; // A class for arithmetic on BigDecimal that is not covered by its built-in methods.\nClass BigIntegerMath; // A class for arithmetic on values of type BigInteger.\nClass DoubleMath; // A class for arithmetic on doubles that is not covered by Math.\nClass IntMath; // A class for arithmetic on values of type int.\nClass LinearTransformation; // The representation of a linear transformation between real numbers x and y.\nClass LinearTransformation.LinearTransformationBuilder; // This is an intermediate stage in the construction process.\nClass LongMath; // A class for arithmetic on values of type long.\nClass PairedStats; // An immutable value object capturing some basic statistics about a collection of paired double values (e.g.\nClass PairedStatsAccumulator; // A mutable object which accumulates paired double values (e.g.\nClass Quantiles; // Provides a fluent API for calculating quantiles.\nClass Quantiles.Scale; // Describes the point in a fluent API chain where only the scale (i.e.\nClass Quantiles.ScaleAndIndex; // Describes the point in a fluent API chain where the scale and a single quantile index (i.e.\nClass Quantiles.ScaleAndIndexes; // Describes the point in a fluent API chain where the scale and a multiple quantile indexes (i.e.\nClass Stats; // A bundle of statistical summary values -- sum, count, mean/average, min and max, and several forms of variance -- that were computed from a single set of zero or more floating-point values.\nClass StatsAccumulator; // A mutable object which accumulates double values and tracks some basic statistics over all the values added so far.\n", "des": "Arithmetic functions operating on primitive values and on BigInteger and BigDecimal instances."}
{"index": 3903, "repo": "solr-solrj-9.3.0", "code": "package util;\n\nInterface Cache<K,​V>;\nInterface Compressor;\nInterface ContentStream;\nInterface DataEntry; // This represents a data entry in the payload/stream.\nInterface DataEntry.EntryListener;\nInterface DataEntry.FastDecoder;\nInterface ExecutorUtil.InheritableThreadLocalProvider; // Any class which wants to carry forward the threadlocal values to the threads run by threadpools must implement this interface and the implementation should be registered here\nInterface JavaBinCodec.ObjectResolver; // Allows extension of JavaBinCodec to support serialization of arbitrary data types.\nInterface JavaBinCodec.WritableDocFields;\nInterface JsonRecordReader.Handler; // Implement this interface to stream records as and when one is found.\nInterface JsonTextWriter;\nInterface ReflectMapWriter;\nInterface RetryUtil.BooleanRetryCmd;\nInterface RetryUtil.RetryCmd;\nInterface TextWriter;\nInterface Utf8CharSequence; // A byte[] backed String\nInterface Utils.InputStreamConsumer<T>;\nInterface ValidatingJsonMap.PredicateWithErrMsg<T>;\nInterface XML.Writable;\nClass ByteArrayUtf8CharSequence; // A mutable byte[] backed Utf8CharSequence.\nClass BytesBlock;\nClass BytesOutputStream;\nClass BytesOutputStream.Bytes;\nClass ByteUtils;\nClass CollectionUtil; // Methods for creating collections with exact sizes, and other convenience methods\nClass CommandOperation;\nClass CommonTestInjection; // Allows random faults to be injected in running code during test runs across all solr packages.\nClass ContentStreamBase; // Three concrete implementations for ContentStream - one for File/URL/String\nClass ContentStreamBase.ByteArrayStream; // Construct a ContentStream from a File\nClass ContentStreamBase.FileStream; // Construct a ContentStream from a File\nClass ContentStreamBase.StringStream; // Construct a ContentStream from a String\nClass ContentStreamBase.URLStream; // Construct a ContentStream from a URL This uses a URLConnection to get the content stream\nClass DataInputInputStream; // An abstract DataInput that extends InputStream\nClass DOMUtil;\nClass ExecutorUtil;\nClass ExecutorUtil.MDCAwareThreadPoolExecutor;\nClass FastInputStream; // Single threaded buffered InputStream Internal Solr use only, subject to change.\nClass FastJavaBinDecoder;\nClass FastOutputStream; // Single threaded buffered OutputStream Internal Solr use only, subject to change.\n", "des": "Common utility classes reused on both clients & server."}
{"index": 3137, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package graph;\n\nInterface AttributeNode<J>; // Hibernate extension to the JPA entity-graph AttributeNode contract.\nInterface Graph<J>; // A container for AttributeNodes.\nInterface GraphNode<J>; // Commonality between AttributeNode and Graph.\nInterface RootGraph<J>; // Hibernate extension to the JPA EntityGraph contract.\nInterface SubGraph<J>; // Hibernate extension to the JPA entity-graph Subgraph contract.\nClass EntityGraphs; // A collection of EntityGraph utilities.\nClass GraphParser; // Parser for string representations of JPA EntityGraph (RootGraph) and Subgraph (SubGraph), using a simple syntax defined by the `graph.g` Antlr grammar.\nEnum GraphSemantic; // JPA defines 2 distinct semantics for applying an EntityGraph.\nClass CannotBecomeEntityGraphException; // Indicates an illegal attempt to make a Graph become an EntityGraph via Graph.makeRootGraph(String, boolean).\nClass CannotContainSubGraphException; // Indicates an attempt was made to add a (key)? sub-graph to an attribute type that does not support (key)? sub-graphs.\nClass InvalidGraphException; // Thrown by GraphParser to indicate textual entity graph representation parsing errors.\n", "des": "Hibernate's (extended) support for JPA's entity graphs"}
{"index": 868, "repo": "calcite-core-1.34.0", "code": "package implicit;\n\nInterface TypeCoercion; // Default strategies to coerce differing types that participate in operations into compatible ones.\nInterface TypeCoercionFactory; // Factory for TypeCoercion objects.\nClass AbstractTypeCoercion; // Base class for all the type coercion rules.\nClass TypeCoercionImpl; // Default implementation of Calcite implicit type cast.\nClass TypeCoercions; // Factory class for type coercion instantiation of different sql dialects.\n", "des": "SQL Implicit Type Cast"}
{"index": 3724, "repo": "solr-core-9.3.0", "code": "package tracing;\n\nClass HttpServletCarrier; // A Carrier for extract Span context out of request headers\nClass SolrRequestCarrier; // An OpenTracing Carrier for injecting Span context through SolrRequest\nClass TraceUtils; // Utilities for distributed tracing.\n", "des": "Tracing related utilities"}
{"index": 526, "repo": "commons-vfs2-2.9.0", "code": "package http5s;\n\nClass Http5sFileNameParser; // FileNameParser implementation for http5s provider, setting default port to 443.\nClass Http5sFileProvider; // http5s provider that uses HttpComponents HttpClient.\n", "des": "The HTTP5S File Provider"}
{"index": 2445, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jms;\n\n@AutoConfiguration(after={org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration.class,org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration.class}) @ConditionalOnClass(jakarta.jms.ConnectionFactory.class) @ConditionalOnBean(jakarta.jms.ConnectionFactory.class) @ConditionalOnEnabledHealthIndicator(\"jms\") public class JmsHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.jms.JmsHealthIndicator,jakarta.jms.ConnectionFactory>; // Auto-configuration for JmsHealthIndicator.\n", "des": "Auto-configuration for actuator JMS concerns."}
{"index": 889, "repo": "cassandra-all-4.1.2", "code": "package async;\n\nClass NettyStreamingChannel;\nClass NettyStreamingConnectionFactory;\nClass StreamCompressionSerializer; // A serialiazer for stream compressed files (see package-level documentation).\nClass StreamingMultiplexedChannel; // Responsible for sending StreamMessages to a given peer.\n", "des": "Non-blocking streaming with netty"}
{"index": 429, "repo": "kafka-streams-3.5.0", "code": "package streams;\n\npackage streams.errors; // Provides common exception classes for Streams applications.\npackage streams.kstream; // Provides a high-level programming model (DSL) to express a (stateful) data flow computation over input streams and tables.\npackage streams.processor; // Provides a low-level programming model (Processor API, aka, PAPI) to express a (stateful) data flow computation over input topics.\npackage streams.query; // Provides a query API (aka Interactive Queries) over state stores, for extracting data from a stateful Kafka Streams application.\npackage streams.state; // Provides interfaces for managing the intermediate state of a stateful streams application.\nInterface KafkaClientSupplier; // KafkaClientSupplier can be used to provide custom Kafka clients to a KafkaStreams instance.\nInterface KafkaStreams.StateListener; // Listen to KafkaStreams.State change events.\nInterface StreamsMetadata; // Metadata of a Kafka Streams client.\nInterface StreamsMetrics; // The Kafka Streams metrics interface for adding metric sensors and collecting metric values.\nInterface TaskMetadata; // Metadata of a task.\nInterface ThreadMetadata; // Metadata of a stream thread.\nInterface TopologyDescription; // A meta representation of a topology.\nInterface TopologyDescription.GlobalStore; // Represents a global store.\nInterface TopologyDescription.Node; // A node of a topology.\nInterface TopologyDescription.Processor; // A processor node of a topology.\nInterface TopologyDescription.Sink; // A sink node of a topology.\nInterface TopologyDescription.Source; // A source node of a topology.\nInterface TopologyDescription.Subtopology; // A connected sub-graph of a Topology.\nClass KafkaStreams; // A Kafka client that allows for performing continuous computation on input coming from one or more input topics and sends output to zero, one, or more output topics.\nClass KafkaStreams.CloseOptions; // Class that handles options passed in case of KafkaStreams instance scale down\nClass KeyQueryMetadata; // Represents all the metadata related to a key, where a particular key resides in a KafkaStreams application.\nClass KeyValue<K,V>; // A key-value pair defined for a single Kafka Streams record.\nClass LagInfo; // Encapsulates information about lag, at a store partition replica (active or standby).\n", "des": "Provides the Kafka Streams library for building streaming data applications."}
{"index": 2325, "repo": "spring-boot-3.1.1", "code": "package context;\n\npublic class RSocketPortInfoApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>; // ApplicationContextInitializer that sets Environment properties for the ports that RSocketServer servers are actually listening on.\npublic class RSocketServerBootstrap extends Object implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.SmartLifecycle; // Bootstrap an RSocketServer and start it with the application context.\npublic class RSocketServerInitializedEvent extends org.springframework.context.ApplicationEvent; // Event to be published after the application context is refreshed and the RSocketServer is ready.\n", "des": "RSocket integrations with Spring Framework's ApplicationContext."}
{"index": 2036, "repo": "spring-messaging-6.0.11", "code": "package simp;\n\npackage simp.annotation; // Annotations and for handling messages from SImple Messaging Protocols such as STOMP.\npackage simp.broker; // Provides a \"simple\" message broker implementation along with an abstract base class and other supporting types such as a registry for subscriptions.\npackage simp.config; // Configuration support for WebSocket messaging using higher level messaging protocols.\npackage simp.stomp; // Generic support for simple messaging protocols (like STOMP).\npackage simp.user; // Support for handling messages to \"user\" destinations (i.e.\npublic class SimpAttributes extends Object; // A wrapper class for access to attributes associated with a SiMP session (e.g.\npublic abstract class SimpAttributesContextHolder extends Object; // Holder class to expose SiMP attributes associated with a session (e.g.\npublic abstract class SimpLogging extends Object; // Holds the shared logger named \"org.springframework.web.SimpLogging\" to use for STOMP over WebSocket messaging when logging for \"org.springframework.messaging.simp\" is off but logging for \"org.springframework.web\" is on.\npublic class SimpMessageHeaderAccessor extends NativeMessageHeaderAccessor; // A base class for working with message headers in simple messaging protocols that support basic messaging patterns.\npublic class SimpMessageMappingInfo extends Object implements MessageCondition<SimpMessageMappingInfo>; // MessageCondition for SImple Messaging Protocols.\npublic interface SimpMessageSendingOperations extends MessageSendingOperations<String>; // A specialization of MessageSendingOperations with methods for use with the Spring Framework support for Simple Messaging Protocols (like STOMP).\npublic enum SimpMessageType extends Enum<SimpMessageType>; // A generic representation of different kinds of messages found in simple messaging protocols like STOMP.\npublic class SimpMessageTypeMessageCondition extends AbstractMessageCondition<SimpMessageTypeMessageCondition>; // MessageCondition that matches by the message type obtained via SimpMessageHeaderAccessor.getMessageType(Map).\npublic class SimpMessagingTemplate extends AbstractMessageSendingTemplate<String> implements SimpMessageSendingOperations; // An implementation of SimpMessageSendingOperations.\n", "des": "Generic support for Simple Messaging Protocols including protocols such as STOMP."}
{"index": 2600, "repo": "spring-rabbit-3.0.6", "code": "package micrometer;\n\npublic enum RabbitListenerObservation extends Enum<RabbitListenerObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // Spring Rabbit Observation for listeners.\npublic static class RabbitListenerObservation.DefaultRabbitListenerObservationConvention extends Object implements RabbitListenerObservationConvention; // Default RabbitListenerObservationConvention for Rabbit listener key values.\npublic static enum RabbitListenerObservation.ListenerLowCardinalityTags extends Enum<RabbitListenerObservation.ListenerLowCardinalityTags> implements io.micrometer.common.docs.KeyName; // Low cardinality tags.\npublic interface RabbitListenerObservationConvention extends io.micrometer.observation.ObservationConvention<RabbitMessageReceiverContext>; // ObservationConvention for Rabbit listener key values.\npublic class RabbitMessageReceiverContext extends io.micrometer.observation.transport.ReceiverContext<org.springframework.amqp.core.Message>; // ReceiverContext for Messages.\npublic class RabbitMessageSenderContext extends io.micrometer.observation.transport.SenderContext<org.springframework.amqp.core.Message>; // SenderContext for Messages.\npublic enum RabbitTemplateObservation extends Enum<RabbitTemplateObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // Spring RabbitMQ Observation for RabbitTemplate.\npublic static class RabbitTemplateObservation.DefaultRabbitTemplateObservationConvention extends Object implements RabbitTemplateObservationConvention; // Default RabbitTemplateObservationConvention for Rabbit template key values.\npublic static enum RabbitTemplateObservation.TemplateLowCardinalityTags extends Enum<RabbitTemplateObservation.TemplateLowCardinalityTags> implements io.micrometer.common.docs.KeyName; // Low cardinality tags.\npublic interface RabbitTemplateObservationConvention extends io.micrometer.observation.ObservationConvention<RabbitMessageSenderContext>; // ObservationConvention for Rabbit template key values.\n", "des": "Provides classes for Micrometer support."}
{"index": 2698, "repo": "spring-integration-http-6.1.2", "code": "package multipart;\n\npublic class DefaultMultipartFileReader extends Object implements MultipartFileReader<org.springframework.web.multipart.MultipartFile>; // MultipartFileReader implementation that reads the MultipartFile content directly into a new MultipartFile instance that is not restricted to the HTTP request scope.\npublic class FileCopyingMultipartFileReader extends Object implements MultipartFileReader<org.springframework.web.multipart.MultipartFile>; // MultipartFileReader implementation that copies the MultipartFile's content to a new temporary File in the specified directory.\npublic interface MultipartFileReader<T>; // Strategy for reading MultipartFile content.\npublic class MultipartHttpInputMessage extends org.springframework.http.server.ServletServerHttpRequest implements org.springframework.web.multipart.MultipartRequest;\npublic class SimpleMultipartFileReader extends Object implements MultipartFileReader<Object>; // MultipartFileReader implementation that does not maintain metadata from the original MultipartFile instance.\npublic class UploadedMultipartFile extends Object implements org.springframework.web.multipart.MultipartFile; // A MultipartFile implementation that represents an uploaded File.\n", "des": "Provides classes supporting multipart HTTP requests."}
{"index": 2065, "repo": "spring-webmvc-6.0.11", "code": "package annotation;\n\npublic class AsyncSupportConfigurer extends Object; // Helps with configuring options for asynchronous request processing.\npublic class ContentNegotiationConfigurer extends Object; // Creates a ContentNegotiationManager and configures it with one or more ContentNegotiationStrategy instances.\npublic class CorsRegistration extends Object; // Assists with the creation of a CorsConfiguration instance for a given URL path pattern.\npublic class CorsRegistry extends Object; // Assists with the registration of global, URL pattern based CorsConfiguration mappings.\npublic class DefaultServletHandlerConfigurer extends Object; // Configures a request handler for serving static resources by forwarding the request to the Servlet container's \"default\" Servlet.\n@Configuration(proxyBeanMethods=false) public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport; // A subclass of WebMvcConfigurationSupport that detects and delegates to all beans of type WebMvcConfigurer allowing them to customize the configuration provided by WebMvcConfigurationSupport.\n@Retention(RUNTIME) @Target(TYPE) @Documented @Import(DelegatingWebMvcConfiguration.class) public @interface EnableWebMvc; // Adding this annotation to an @Configuration class imports the Spring MVC configuration from WebMvcConfigurationSupport, e.g.:\npublic class InterceptorRegistration extends Object; // Assists with the creation of a MappedInterceptor.\npublic class InterceptorRegistry extends Object; // Helps with configuring a list of mapped interceptors.\npublic class PathMatchConfigurer extends Object; // Configure path matching options.\npublic class RedirectViewControllerRegistration extends Object; // Assist with the registration of a single redirect view controller.\npublic class ResourceChainRegistration extends Object; // Assists with the registration of resource resolvers and transformers.\npublic class ResourceHandlerRegistration extends Object; // Encapsulates information required to create a resource handler.\npublic class ResourceHandlerRegistry extends Object; // Stores registrations of resource handlers for serving static resources such as images, css files and others through Spring MVC including setting cache headers optimized for efficient loading in a web browser.\npublic class UrlBasedViewResolverRegistration extends Object; // Assist with configuring a UrlBasedViewResolver.\npublic class ViewControllerRegistration extends Object; // Assist with the registration of a single view controller.\npublic class ViewControllerRegistry extends Object; // Assists with the registration of simple automated controllers pre-configured with status code and/or a view.\n", "des": "Annotation-based setup for Spring MVC."}
{"index": 1595, "repo": "spring-websocket-6.0.11", "code": "package messaging;\n\npublic abstract class AbstractSubProtocolEvent extends org.springframework.context.ApplicationEvent; // A base class for events for a message received from a WebSocket client and parsed into a higher-level sub-protocol (e.g.\npublic class DefaultSimpUserRegistry extends Object implements org.springframework.messaging.simp.user.SimpUserRegistry, org.springframework.context.event.SmartApplicationListener; // A default implementation of SimpUserRegistry that relies on AbstractSubProtocolEvent application context events to keep track of connected users and their subscriptions.\npublic class SessionConnectedEvent extends AbstractSubProtocolEvent; // A connected event represents the server response to a client's connect request.\npublic class SessionConnectEvent extends AbstractSubProtocolEvent; // Event raised when a new WebSocket client using a Simple Messaging Protocol (e.g.\npublic class SessionDisconnectEvent extends AbstractSubProtocolEvent; // Event raised when the session of a WebSocket client using a Simple Messaging Protocol (e.g.\npublic class SessionSubscribeEvent extends AbstractSubProtocolEvent; // Event raised when a new WebSocket client using a Simple Messaging Protocol (e.g.\npublic class SessionUnsubscribeEvent extends AbstractSubProtocolEvent; // Event raised when a new WebSocket client using a Simple Messaging Protocol (e.g.\npublic class StompSubProtocolErrorHandler extends Object implements SubProtocolErrorHandler<byte[]>; // A SubProtocolErrorHandler for use with STOMP.\npublic class StompSubProtocolHandler extends Object implements SubProtocolHandler, org.springframework.context.ApplicationEventPublisherAware; // A SubProtocolHandler for STOMP that supports versions 1.0, 1.1, and 1.2 of the STOMP specification.\npublic static interface StompSubProtocolHandler.Stats; // Contract for access to session counters.\npublic interface SubProtocolErrorHandler<P>; // A contract for handling sub-protocol errors sent to clients.\npublic interface SubProtocolHandler; // A contract for handling WebSocket messages as part of a higher level protocol, referred to as \"sub-protocol\" in the WebSocket RFC specification.\n", "des": "WebSocket integration for Spring's messaging module."}
{"index": 3838, "repo": "lucene-core-9.7.0", "code": "package compressing;\n\nClass CompressionMode; // A compression mode.\nClass Compressor; // A data compressor.\nClass Decompressor; // A decompressor.\nClass MatchingReaders; // Computes which segments have identical field name to number mappings, which allows stored fields and term vectors in this codec to be bulk-merged.\n", "des": "Compressing helper classes."}
{"index": 1945, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jersey;\n\n@AutoConfiguration(before=DispatcherServletAutoConfiguration.class, after=JacksonAutoConfiguration.class) @ConditionalOnClass({org.glassfish.jersey.server.spring.SpringComponentProvider.class,jakarta.servlet.ServletRegistration.class}) @ConditionalOnBean(type=\"org.glassfish.jersey.server.ResourceConfig\") @ConditionalOnWebApplication(type=SERVLET) @AutoConfigureOrder(-2147483648) @EnableConfigurationProperties(JerseyProperties.class) public class JerseyAutoConfiguration extends Object implements org.springframework.web.context.ServletContextAware; // Auto-configuration for Jersey.\n@Order(-2147483648) public static final class JerseyAutoConfiguration.JerseyWebApplicationInitializer extends Object implements org.springframework.web.WebApplicationInitializer;\n@ConfigurationProperties(prefix=\"spring.jersey\") public class JerseyProperties extends Object; // @ConfigurationProperties for Jersey.\npublic static class JerseyProperties.Filter extends Object;\npublic static class JerseyProperties.Servlet extends Object;\npublic static enum JerseyProperties.Type extends Enum<JerseyProperties.Type>;\n@FunctionalInterface public interface ResourceConfigCustomizer; // Callback interface that can be implemented by beans wishing to customize Jersey's ResourceConfig before it is used.\n", "des": "Auto-configuration for Jersey."}
{"index": 3012, "repo": "spring-web-6.0.11", "code": "package smile;\n\npublic class MappingJackson2SmileHttpMessageConverter extends AbstractJackson2HttpMessageConverter; // Implementation of HttpMessageConverter that can read and write Smile data format (\"binary JSON\") using the dedicated Jackson 2.x extension.\n", "des": "Provides an HttpMessageConverter for the Smile data format (\"binary JSON\")."}
{"index": 2736, "repo": "spring-batch-infrastructure-5.0.2", "code": "package support;\n\npackage support.builder; // Builders for support classes.\npublic abstract class AbstractFileItemWriter<T> extends AbstractItemStreamItemWriter<T> implements ResourceAwareItemWriterItemStream<T>, org.springframework.beans.factory.InitializingBean; // Base class for item writers that write data to a file or stream.\npublic abstract class AbstractItemCountingItemStreamItemReader<T> extends AbstractItemStreamItemReader<T>; // Abstract superclass for ItemReaders that supports restart by storing item count in the ExecutionContext (therefore requires item ordering to be preserved between runs).\npublic abstract class AbstractItemStreamItemReader<T> extends ItemStreamSupport implements ItemStreamReader<T>; // Base class for ItemReader implementations.\npublic abstract class AbstractItemStreamItemWriter<T> extends ItemStreamSupport implements ItemStreamWriter<T>; // Base class for ItemWriter implementations.\npublic class ClassifierCompositeItemProcessor<I,O> extends Object implements ItemProcessor<I,O>; // Calls one of a collection of ItemProcessors, based on a router pattern implemented through the provided Classifier.\npublic class ClassifierCompositeItemWriter<T> extends Object implements ItemWriter<T>; // Calls one of a collection of ItemWriters for each item, based on a router pattern implemented through the provided Classifier.\npublic class CompositeItemProcessor<I,O> extends Object implements ItemProcessor<I,O>, org.springframework.beans.factory.InitializingBean; // Composite ItemProcessor that passes the item through a sequence of injected ItemTransformers (return value of previous transformation is the entry value of the next). Note the user is responsible for injecting a chain of ItemProcessors that conforms to declared input and output types.\npublic class CompositeItemStream extends Object implements ItemStream; // Simple ItemStream that delegates to a list of other streams.\npublic class CompositeItemWriter<T> extends Object implements ItemStreamWriter<T>, org.springframework.beans.factory.InitializingBean; // Calls a collection of ItemWriters in fixed-order sequence. The implementation is thread-safe if all delegates are thread-safe.\npublic class IteratorItemReader<T> extends Object implements ItemReader<T>; // An ItemReader that pulls data from a Iterator or Iterable using the constructors.\n", "des": "Internal support package"}
{"index": 906, "repo": "commons-compress-1.23.0", "code": "package arj;\n\nClass ArjArchiveEntry; // An entry in an ARJ archive.\nClass ArjArchiveEntry.HostOs; // The known values for HostOs.\nClass ArjArchiveInputStream; // Implements the \"arj\" archive format as an InputStream.\n", "des": "Provides stream classes for reading archives using the ARJ format."}
{"index": 1732, "repo": "spring-jdbc-6.0.11", "code": "package lookup;\n\npublic abstract class AbstractRoutingDataSource extends AbstractDataSource implements org.springframework.beans.factory.InitializingBean; // Abstract DataSource implementation that routes AbstractRoutingDataSource.getConnection() calls to one of various target DataSources based on a lookup key.\npublic class BeanFactoryDataSourceLookup extends Object implements DataSourceLookup, org.springframework.beans.factory.BeanFactoryAware; // DataSourceLookup implementation based on a Spring BeanFactory.\n@FunctionalInterface public interface DataSourceLookup; // Strategy interface for looking up DataSources by name.\npublic class DataSourceLookupFailureException extends org.springframework.dao.NonTransientDataAccessException; // Exception to be thrown by a DataSourceLookup implementation, indicating that the specified DataSource could not be obtained.\npublic class IsolationLevelDataSourceRouter extends AbstractRoutingDataSource; // DataSource that routes to one of various target DataSources based on the current transaction isolation level.\npublic class JndiDataSourceLookup extends org.springframework.jndi.JndiLocatorSupport implements DataSourceLookup; // JNDI-based DataSourceLookup implementation.\npublic class MapDataSourceLookup extends Object implements DataSourceLookup; // Simple DataSourceLookup implementation that relies on a map for doing lookups.\npublic class SingleDataSourceLookup extends Object implements DataSourceLookup; // An implementation of the DataSourceLookup that simply wraps a single given DataSource, returned for any data source name.\n", "des": "Provides a strategy for looking up JDBC DataSources by name."}
{"index": 1707, "repo": "spring-integration-jmx-6.1.2", "code": "package monitor;\n\npublic class IntegrationJmxAttributeSource extends org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource; // The AnnotationJmxAttributeSource extension to resolve ManagedResources via IntegrationManagedResource on classes.\n@ManagedResource public class IntegrationMBeanExporter extends org.springframework.jmx.export.MBeanExporter implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor; // MBean exporter for Spring Integration components in an existing application.\n", "des": "Provides classes related to Spring Integration managed resources."}
{"index": 2950, "repo": "spring-integration-xml-6.1.2", "code": "package result;\n\npublic class DomResultFactory extends Object implements ResultFactory;\npublic interface ResultFactory; // Factory to create a Result possibly taking into account the provided message payload instance.\npublic class StringResultFactory extends Object implements ResultFactory;\n", "des": "Provides ResultFactory that will return Result, possibly taking into account payload instance."}
{"index": 1913, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jdbc;\n\n@AutoConfiguration(after={JdbcTemplateAutoConfiguration.class,DataSourceTransactionManagerAutoConfiguration.class}) @ConditionalOnBean({org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations.class,org.springframework.transaction.PlatformTransactionManager.class}) @ConditionalOnClass({org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations.class,org.springframework.data.jdbc.repository.config.AbstractJdbcConfiguration.class}) @ConditionalOnProperty(prefix=\"spring.data.jdbc.repositories\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) public class JdbcRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's JDBC Repositories.\n", "des": "Auto-configuration for Spring Data JDBC."}
{"index": 2092, "repo": "spring-webflux-6.0.11", "code": "package config;\n\npublic class CorsRegistration extends Object; // Assists with the creation of a CorsConfiguration instance for a given URL path pattern.\npublic class CorsRegistry extends Object; // Assists with the registration of global, URL pattern based CorsConfiguration mappings.\n@Configuration(proxyBeanMethods=false) public class DelegatingWebFluxConfiguration extends WebFluxConfigurationSupport; // A subclass of WebFluxConfigurationSupport that detects and delegates to all beans of type WebFluxConfigurer allowing them to customize the configuration provided by WebFluxConfigurationSupport.\n@Retention(RUNTIME) @Target(TYPE) @Documented @Import(DelegatingWebFluxConfiguration.class) public @interface EnableWebFlux; // Adding this annotation to an @Configuration class imports the Spring WebFlux configuration from WebFluxConfigurationSupport that enables use of annotated controllers and functional endpoints.\npublic class PathMatchConfigurer extends Object; // Assist with configuring HandlerMapping's with path matching options.\npublic class ResourceChainRegistration extends Object; // Assists with the registration of resource resolvers and transformers.\npublic class ResourceHandlerRegistration extends Object; // Assist with creating and configuring a static resources handler.\npublic class ResourceHandlerRegistry extends Object; // Stores registrations of resource handlers for serving static resources such as images, css files and others through Spring WebFlux including setting cache headers optimized for efficient loading in a web browser.\npublic class UrlBasedViewResolverRegistration extends Object; // Assist with configuring properties of a UrlBasedViewResolver.\npublic class ViewResolverRegistry extends Object; // Assist with the configuration of a chain of ViewResolver's supporting different template mechanisms.\npublic class WebFluxConfigurationSupport extends Object implements org.springframework.context.ApplicationContextAware; // The main class for Spring WebFlux configuration.\npublic interface WebFluxConfigurer; // Defines callback methods to customize the configuration for WebFlux applications enabled via @EnableWebFlux.\npublic class WebFluxConfigurerComposite extends Object implements WebFluxConfigurer; // A WebFluxConfigurer that delegates to one or more others.\n", "des": "Spring WebFlux configuration infrastructure."}
{"index": 356, "repo": "hive-exec-4.0.0-alpha-2", "code": "package vector;\n\nInterface ParquetDataColumnReader; // The interface to wrap the underlying Parquet dictionary and non dictionary encoded page reader.\nInterface VectorizedColumnReader;\nClass BaseVectorizedColumnReader; // It's column level Parquet reader which is used to read a batch of records for a column, part of the code is referred from Apache Spark and Apache Parquet.\nClass BaseVectorizedColumnReader.NullIntIterator;\nClass BaseVectorizedColumnReader.RLEIntIterator;\nClass BaseVectorizedColumnReader.ValuesReaderIntIterator;\nClass ParquetDataColumnReaderFactory; // Parquet file has self-describing schema which may differ from the user required schema (e.g.\nClass ParquetDataColumnReaderFactory.DefaultParquetDataColumnReader; // The default data column reader for existing Parquet page reader which works for both dictionary or non dictionary types, Mirror from dictionary encoding path.\nClass ParquetDataColumnReaderFactory.TypesFromBooleanPageReader; // The reader who reads from the underlying boolean value value.\nClass ParquetDataColumnReaderFactory.TypesFromDecimalPageReader; // The reader who reads from the underlying decimal value value.\nClass ParquetDataColumnReaderFactory.TypesFromDoublePageReader; // The reader who reads from the underlying double value value.\nClass ParquetDataColumnReaderFactory.TypesFromFloatPageReader; // The reader who reads from the underlying float value value.\nClass ParquetDataColumnReaderFactory.TypesFromInt32DecimalPageReader; // The reader who reads from the underlying decimal value which is stored in an INT32 physical type.\nClass ParquetDataColumnReaderFactory.TypesFromInt32PageReader; // The reader who reads from the underlying int32 value value.\nClass ParquetDataColumnReaderFactory.TypesFromInt64DecimalPageReader; // The reader who reads from the underlying decimal value which is stored in an INT64 physical type.\nClass ParquetDataColumnReaderFactory.TypesFromInt64PageReader; // The reader who reads from the underlying int64 value value.\nClass ParquetDataColumnReaderFactory.TypesFromInt96PageReader; // The reader who reads from the underlying Timestamp value value.\nClass ParquetDataColumnReaderFactory.TypesFromStringPageReader; // The reader who reads from the underlying UTF8 string.\n", "des": "Hive Parquet Vectorized Reader related."}
{"index": 3866, "repo": "lucene-spatial-extras-9.7.0", "code": "package prefix;\n\npackage prefix.tree; // This package is about SpatialPrefixTree and any supporting classes.\nClass AbstractPrefixTreeQuery; // Base class for Lucene Queries on SpatialPrefixTree fields.\nClass AbstractVisitingPrefixTreeQuery; // Traverses a SpatialPrefixTree indexed field, using the template and visitor design patterns for subclasses to guide the traversal and collect matching documents.\nClass AbstractVisitingPrefixTreeQuery.VNode; // A visitor node/cell found via the query shape for AbstractVisitingPrefixTreeQuery.VisitorTemplate.\nClass BytesRefIteratorTokenStream; // A TokenStream used internally by PrefixTreeStrategy.\nClass CellToBytesRefIterator; // A reset'able BytesRefIterator wrapper around an Iterator of Cells.\nClass ContainsPrefixTreeQuery; // Finds docs where its indexed shape CONTAINS the query shape.\nClass HeatmapFacetCounter; // Computes spatial facets in two dimensions as a grid of numbers.\nClass HeatmapFacetCounter.Heatmap; // Response structure\nClass IntersectsPrefixTreeQuery; // A Query matching documents that have an SpatialRelation.INTERSECTS (i.e.\nClass NumberRangePrefixTreeStrategy; // A PrefixTree based on Number/Date ranges.\nClass NumberRangePrefixTreeStrategy.Facets; // Facet response information\nClass NumberRangePrefixTreeStrategy.Facets.FacetParentVal; // Holds a block of detailLevel counts aggregated to their parent level.\nClass PointPrefixTreeFieldCacheProvider; // Implementation of ShapeFieldCacheProvider designed for PrefixTreeStrategys that index points (AND ONLY POINTS!).\nClass PrefixTreeFacetCounter; // Computes facets on cells for PrefixTreeStrategy.\nClass PrefixTreeFacetCounter.FacetVisitor; // A callback/visitor of facet counts.\nClass PrefixTreeStrategy; // An abstract SpatialStrategy based on SpatialPrefixTree.\nClass RecursivePrefixTreeStrategy; // A PrefixTreeStrategy which uses AbstractVisitingPrefixTreeQuery.\nClass TermQueryPrefixTreeStrategy; // A basic implementation of PrefixTreeStrategy using a large TermInSetQuery of all the cells from SpatialPrefixTree.getTreeCellIterator(org.locationtech.spatial4j.shape.Shape, int).\nClass WithinPrefixTreeQuery; // Finds docs where its indexed shape is WITHIN the query shape.\n", "des": "Prefix Tree Strategy."}
{"index": 793, "repo": "lucene-analyzers-common-8.11.2", "code": "package ngram;\n\nClass EdgeNGramFilterFactory; // Creates new instances of EdgeNGramTokenFilter.\nClass EdgeNGramTokenFilter; // Tokenizes the given token into n-grams of given size(s).\nClass EdgeNGramTokenizer; // Tokenizes the input from an edge into n-grams of given size(s).\nClass EdgeNGramTokenizerFactory; // Creates new instances of EdgeNGramTokenizer.\nClass NGramFilterFactory; // Factory for NGramTokenFilter.\nClass NGramTokenFilter; // Tokenizes the input into n-grams of the given size(s).\nClass NGramTokenizer; // Tokenizes the input into n-grams of the given size(s).\nClass NGramTokenizerFactory; // Factory for NGramTokenizer.\n", "des": "Character n-gram tokenizers and filters."}
{"index": 3049, "repo": "spring-web-6.0.11", "code": "package util;\n\npackage util.pattern; // Dedicated support for matching HTTP request paths.\npublic class ContentCachingRequestWrapper extends HttpServletRequestWrapper; // HttpServletRequest wrapper that caches all content read from the input stream and reader, and allows this content to be retrieved via a byte array.\npublic class ContentCachingResponseWrapper extends HttpServletResponseWrapper; // HttpServletResponse wrapper that caches all content written to the output stream and writer, and allows this content to be retrieved via a byte array.\n@Deprecated public class CookieGenerator extends Object;\npublic class DefaultUriBuilderFactory extends Object implements UriBuilderFactory; // UriBuilderFactory that relies on UriComponentsBuilder for the actual building of the URI.\npublic static enum DefaultUriBuilderFactory.EncodingMode extends Enum<DefaultUriBuilderFactory.EncodingMode>; // Enum to represent multiple URI encoding strategies.\npublic abstract class HtmlUtils extends Object; // Utility class for HTML escaping.\npublic class HttpSessionMutexListener extends Object implements HttpSessionListener; // Servlet HttpSessionListener that automatically exposes the session mutex when an HttpSession gets created.\npublic class IntrospectorCleanupListener extends Object implements ServletContextListener; // Listener that flushes the JDK's JavaBeans Introspector cache on web app shutdown.\npublic abstract class JavaScriptUtils extends Object; // Utility class for JavaScript escaping.\n@Deprecated(since=\"6.0\") public class NestedServletException extends ServletException;\npublic abstract class ServletContextPropertyUtils extends Object; // Helper class for resolving placeholders in texts.\npublic abstract class ServletRequestPathUtils extends Object; // Utility class to assist with preparation and access to the lookup path for request mapping purposes.\npublic abstract class TagUtils extends Object; // Utility class for tag library related code, exposing functionality such as translating Strings to web scopes.\npublic interface UriBuilder; // Builder-style methods to prepare and expand a URI template with variables.\npublic interface UriBuilderFactory extends UriTemplateHandler; // Factory to create UriBuilder instances with shared configuration such as a base URI, an encoding mode strategy, and others across all URI builder instances created through a factory.\npublic abstract class UriComponents extends Object implements Serializable; // Represents an immutable collection of URI components, mapping component type to String values.\npublic static interface UriComponents.UriTemplateVariables; // Defines the contract for URI Template variables.\npublic class UriComponentsBuilder extends Object implements UriBuilder, Cloneable; // Builder for UriComponents.\n", "des": "Miscellaneous web utility classes, such as HTML escaping and cookie handling."}
{"index": 403, "repo": "commons-jexl3-3.3", "code": "package introspection;\n\nInterface JexlMethod; // Interface used for regular method invocation.\nInterface JexlPermissions; // This interface describes permissions used by JEXL introspection that constrain which packages/classes/constructors/fields/methods are made visible to JEXL scripts.\nInterface JexlPropertyGet; // Interface for getting values that appear to be properties.\nInterface JexlPropertySet; // Interface used for setting values that appear to be properties.\nInterface JexlUberspect; // 'Federated' introspection/reflection interface to allow JEXL introspection behavior to be customized.\nInterface JexlUberspect.PropertyResolver; // Abstracts getting property setter and getter.\nInterface JexlUberspect.ResolverStrategy; // Determines property resolution strategy.\nClass JexlPermissions.ClassPermissions; // A permission delegation that augments the RESTRICTED permission with an explicit set of classes.\nClass JexlPermissions.Delegate; // A base for permission delegation allowing functional refinement.\nClass JexlSandbox; // A sandbox describes permissions on a class by explicitly allowing or forbidding access to methods and properties through \"allowlists\" and \"blocklists\".\nClass JexlSandbox.BlackSet; // since 3.2, use BlockSet\nClass JexlSandbox.Names; // A base set of names.\nClass JexlSandbox.Permissions; // Contains the allow or block lists for properties and methods for a given class.\nClass JexlSandbox.WhiteSet; // since 3.2, use AllowSet\nEnum JexlUberspect.JexlResolver; // The various builtin property resolvers.\n", "des": "Provides high-level introspective services."}
{"index": 2769, "repo": "spring-jms-6.0.11", "code": "package config;\n\npublic abstract class AbstractJmsListenerContainerFactory<C extends AbstractMessageListenerContainer> extends Object implements JmsListenerContainerFactory<C>; // Base JmsListenerContainerFactory for Spring's base container implementation.\npublic abstract class AbstractJmsListenerEndpoint extends Object implements JmsListenerEndpoint; // Base model for a JMS listener endpoint.\npublic class DefaultJcaListenerContainerFactory extends JmsActivationSpecConfig implements JmsListenerContainerFactory<JmsMessageEndpointManager>; // A JmsListenerContainerFactory implementation to build a JCA-based JmsMessageEndpointManager.\npublic class DefaultJmsListenerContainerFactory extends AbstractJmsListenerContainerFactory<DefaultMessageListenerContainer>; // A JmsListenerContainerFactory implementation to build a regular DefaultMessageListenerContainer.\npublic abstract class JmsListenerConfigUtils extends Object; // Configuration constants for internal sharing across subpackages.\npublic interface JmsListenerContainerFactory<C extends MessageListenerContainer>; // Factory of MessageListenerContainer based on a JmsListenerEndpoint definition.\npublic interface JmsListenerEndpoint; // Model for a JMS listener endpoint.\npublic class JmsListenerEndpointRegistrar extends Object implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // Helper bean for registering JmsListenerEndpoint with a JmsListenerEndpointRegistry.\npublic class JmsListenerEndpointRegistry extends Object implements org.springframework.beans.factory.DisposableBean, org.springframework.context.SmartLifecycle, org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>; // Creates the necessary MessageListenerContainer instances for the registered endpoints.\npublic class JmsNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // A NamespaceHandler for the JMS namespace.\npublic class MethodJmsListenerEndpoint extends AbstractJmsListenerEndpoint implements org.springframework.beans.factory.BeanFactoryAware; // A JmsListenerEndpoint providing the method to invoke to process an incoming message for this endpoint.\npublic class SimpleJmsListenerContainerFactory extends AbstractJmsListenerContainerFactory<SimpleMessageListenerContainer>; // A JmsListenerContainerFactory implementation to build a standard SimpleMessageListenerContainer.\npublic class SimpleJmsListenerEndpoint extends AbstractJmsListenerEndpoint; // A JmsListenerEndpoint simply providing the MessageListener to invoke to process an incoming message for this endpoint.\n", "des": "Support package for declarative messaging configuration, with Java configuration and XML schema support."}
{"index": 1089, "repo": "graal-sdk-1.0.0-rc7", "code": "package word;\n\nInterface ComparableWord; // A machine-word-sized value that can be compared for equality.\nInterface Pointer; // Lowest-level memory access of native C memory.\nInterface PointerBase; // Marker interface for all word types that have the semantic of a pointer (but not necessarily all the memory access methods defined in Pointer).\nInterface SignedWord; // Represents a signed word-sized value.\nInterface UnsignedWord; // Represents an unsigned word-sized value.\nInterface WordBase; // The root of the interface hierarchy for machine-word-sized values.\nClass LocationIdentity; // Marker interface for location identities.\nClass WordFactory; // Provides factory method to create machine-word-sized values.\n", "des": "This package provides a low-level mechanism to use machine-word-sized values in Java."}
{"index": 2398, "repo": "spring-batch-core-5.0.2", "code": "package support;\n\npublic abstract class AbstractPartitionHandler extends Object implements PartitionHandler; // Base PartitionHandler implementation providing common base features.\npublic class DefaultStepExecutionAggregator extends Object implements StepExecutionAggregator; // Convenience class for aggregating a set of StepExecution instances into a single result.\npublic class MultiResourcePartitioner extends Object implements Partitioner; // Implementation of Partitioner that locates multiple resources and associates their file names with execution context keys.\n@FunctionalInterface public interface Partitioner; // Central strategy interface for creating input parameters for a partitioned step in the form of ExecutionContext instances.\npublic interface PartitionNameProvider; // Optional interface for Partitioner implementations that need to use a custom naming scheme for partitions.\npublic class PartitionStep extends AbstractStep; // Implementation of Step which partitions the execution and spreads the load using a PartitionHandler.\npublic class RemoteStepExecutionAggregator extends Object implements StepExecutionAggregator, org.springframework.beans.factory.InitializingBean; // Convenience class for aggregating a set of StepExecution instances when the input comes from remote steps, so the data need to be refreshed from the repository.\npublic class SimplePartitioner extends Object implements Partitioner; // Simplest possible implementation of Partitioner.\npublic class SimpleStepExecutionSplitter extends Object implements StepExecutionSplitter, org.springframework.beans.factory.InitializingBean; // Generic implementation of StepExecutionSplitter that delegates to a Partitioner to generate ExecutionContext instances.\n@FunctionalInterface public interface StepExecutionAggregator; // Strategy for a aggregating step executions, usually when they are the result of partitioned or remote execution.\npublic class TaskExecutorPartitionHandler extends AbstractPartitionHandler implements StepHolder, org.springframework.beans.factory.InitializingBean; // A PartitionHandler that uses a TaskExecutor to execute the partitioned Step locally in multiple threads.\n", "des": "Implementation of common partition components."}
{"index": 3409, "repo": "commons-imaging-1.0-alpha3", "code": "package fieldtypes;\n\nClass FieldType; // TIFF field types.\nClass FieldTypeAscii;\nClass FieldTypeByte;\nClass FieldTypeDouble;\nClass FieldTypeFloat;\nClass FieldTypeLong;\nClass FieldTypeRational;\nClass FieldTypeShort;\n", "des": "TIFF field types."}
{"index": 3587, "repo": "lucene-test-framework-9.7.0", "code": "package cranky;\n\nClass CrankyCodec; // Codec for testing that throws random IOExceptions\n", "des": "Codec for testing that throws random IOExceptions"}
{"index": 1608, "repo": "spring-data-neo4j-7.1.2", "code": "package core;\n\npackage core.convert; // Provides a set of simples types that SDN supports.\npackage core.mapping; // The main mapping framework.\npackage core.schema; // This package contains the schema that is defined by a set of classes, representing nodes and relationships and their properties.\npackage core.support; // This package provides a couple of support classes that might be helpful in your domain, for example a predicate indicating that some transaction may be retried and additional converters and id generators.\npackage core.transaction; // Contains the core infrastructure for translating unmanaged Neo4j transaction into Spring managed transactions.\n@API(status=STABLE, since=\"6.0\") public final class DatabaseSelection extends Object; // A value holder indicating a database selection based on an optional name.\n@API(status=STABLE, since=\"6.0\") @FunctionalInterface public interface DatabaseSelectionProvider; // A provider interface that knows in which database repositories or either the reactive or imperative template should work.\n@API(status=STABLE, since=\"6.1\") public interface FluentFindOperation; // FluentFindOperation allows creation and execution of Neo4j find operations in a fluent API style.\npublic static interface FluentFindOperation.ExecutableFind<T> extends FluentFindOperation.FindWithProjection<T>; // Entry point for creating executable find operations.\npublic static interface FluentFindOperation.FindWithProjection<T> extends FluentFindOperation.FindWithQuery<T>; // Result type override (Optional).\npublic static interface FluentFindOperation.FindWithQuery<T> extends FluentFindOperation.TerminatingFindWithoutQuery<T>; // Terminating operations invoking the actual query execution.\npublic static interface FluentFindOperation.TerminatingFind<T> extends FluentFindOperation.TerminatingFindWithoutQuery<T>; // Triggers find execution by calling one of the terminating methods.\npublic static interface FluentFindOperation.TerminatingFindWithoutQuery<T>; // Trigger find execution by calling one of the terminating methods from a state where no query is yet defined.\n@API(status=STABLE, since=\"6.1\") public interface FluentNeo4jOperations extends FluentFindOperation, FluentSaveOperation; // An additional interface accompanying the Neo4jOperations and adding a couple of fluent operations, especially around finding and projecting things.\n", "des": "This package contains the core infrastructure for creating an imperative or reactive client that can execute queries."}
{"index": 442, "repo": "hbase-client-3.0.0-alpha-4", "code": "package protobuf;\n\nClass ProtobufMagic; // Protobufs utility.\nClass ProtobufMessageConverter; // This class converts PB Messages to various representations, like: JSON string: ProtobufMessageConverter.toJsonElement(MessageOrBuilder) JSON object (gson): ProtobufMessageConverter.toJsonElement(MessageOrBuilder) Java objects (Boolean, Number, String, List, Map): ProtobufMessageConverter.toJavaObject(JsonElement)\n", "des": "Holds classes generated from protobuf src/main/protobuf definition files."}
{"index": 739, "repo": "spring-data-solr-4.3.15", "code": "package repository;\n\npackage repository.cdi; // Cdi extension.\npackage repository.config; // Repository configuration and extension support.\npackage repository.query; // Apache Solr specific repository query methods and executions.\npackage repository.support; // Repository support classes for bootstrapping application context.\nInterface SolrCrudRepository<T,ID extends Serializable>;\nInterface SolrRepository<T,ID extends Serializable>;\nAnnotation Type Boost; // Increase document score by boosting search criteria hit\nAnnotation Type Facet;\nAnnotation Type Highlight;\nAnnotation Type Pivot;\nAnnotation Type Query;\nAnnotation Type Score; // since 4.0.\nAnnotation Type SelectiveStats; // Definition of field selective statistical that shall be executed within the request.\nAnnotation Type Spellcheck; // Enable Solr spellcheck component for a repository query method.\nAnnotation Type Stats; // Statistics definition to be performed within a Query.\n", "des": "Solr specific repository implementation."}
{"index": 1176, "repo": "commons-math3-3.6.1", "code": "package distance;\n\nInterface DistanceMeasure; // Interface for distance measures of n-dimensional vectors.\nClass CanberraDistance; // Calculates the Canberra distance between two points.\nClass ChebyshevDistance; // Calculates the L∞ (max of abs) distance between two points.\nClass EarthMoversDistance; // Calculates the Earh Mover's distance (also known as Wasserstein metric) between two distributions.\nClass EuclideanDistance; // Calculates the L2 (Euclidean) distance between two points.\nClass ManhattanDistance; // Calculates the L1 (sum of abs) distance between two points.\n", "des": "Common distance measures."}
{"index": 2134, "repo": "spring-context-support-6.0.11", "code": "package quartz;\n\npublic class AdaptableJobFactory extends Object implements JobFactory; // JobFactory implementation that supports Runnable objects as well as standard Quartz Job instances.\npublic class CronTriggerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<CronTrigger>, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // A Spring FactoryBean for creating a Quartz CronTrigger instance, supporting bean-style usage for trigger configuration.\npublic class DelegatingJob extends Object implements Job; // Simple Quartz Job adapter that delegates to a given Runnable instance.\npublic class JobDetailFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobDetail>, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // A Spring FactoryBean for creating a Quartz JobDetail instance, supporting bean-style usage for JobDetail configuration.\npublic class JobMethodInvocationFailedException extends org.springframework.core.NestedRuntimeException; // Unchecked exception that wraps an exception thrown from a target method.\npublic class LocalDataSourceJobStore extends JobStoreCMT; // Subclass of Quartz's JobStoreCMT class that delegates to a Spring-managed DataSource instead of using a Quartz-managed JDBC connection pool.\npublic class LocalTaskExecutorThreadPool extends Object implements ThreadPool; // Quartz ThreadPool adapter that delegates to a Spring-managed Executor instance, specified on SchedulerFactoryBean.\npublic class MethodInvokingJobDetailFactoryBean extends org.springframework.beans.support.ArgumentConvertingMethodInvoker implements org.springframework.beans.factory.FactoryBean<JobDetail>, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // FactoryBean that exposes a JobDetail object which delegates job execution to a specified (static or non-static) method.\npublic static class MethodInvokingJobDetailFactoryBean.MethodInvokingJob extends QuartzJobBean; // Quartz Job implementation that invokes a specified method.\n", "des": "Support classes for the open source scheduler Quartz, allowing to set up Quartz Schedulers, JobDetails and Triggers as beans in a Spring context."}
{"index": 3034, "repo": "spring-web-6.0.11", "code": "package reactive;\n\npublic class HiddenHttpMethodFilter extends Object implements WebFilter; // Reactive WebFilter that converts posted method parameters into HTTP methods, retrievable via HttpRequest.getMethod().\npublic class ServerHttpObservationFilter extends Object implements WebFilter; // WebFilter that creates observations for HTTP exchanges.\npublic class ServerWebExchangeContextFilter extends Object implements WebFilter; // Inserts an attribute in the Reactor Context that makes the current ServerWebExchange available under the attribute name ServerWebExchangeContextFilter.EXCHANGE_CONTEXT_ATTRIBUTE.\n", "des": "WebFilter implementations for use in reactive web applications."}
{"index": 3774, "repo": "lucene-analysis-common-9.7.0", "code": "package core;\n\nClass DecimalDigitFilter; // Folds all Unicode digits in [:General_Category=Decimal_Number:] to Basic Latin digits (0-9).\nClass DecimalDigitFilterFactory; // Factory for DecimalDigitFilter.\nClass FlattenGraphFilter; // Converts an incoming graph token stream, such as one from SynonymGraphFilter, into a flat form so that all nodes form a single linear chain with no side paths.\nClass FlattenGraphFilterFactory; // Factory for FlattenGraphFilter.\nClass KeywordAnalyzer; // \"Tokenizes\" the entire stream as a single token.\nClass KeywordTokenizer; // Emits the entire input as a single token.\nClass KeywordTokenizerFactory; // Factory for KeywordTokenizer.\nClass LetterTokenizer; // A LetterTokenizer is a tokenizer that divides text at non-letters.\nClass LetterTokenizerFactory; // Factory for LetterTokenizer.\nClass LowerCaseFilter; // Normalizes token text to lower case.\nClass LowerCaseFilterFactory; // Factory for LowerCaseFilter.\nClass SimpleAnalyzer; // An Analyzer that filters LetterTokenizer with LowerCaseFilter\nClass StopAnalyzer; // Filters LetterTokenizer with LowerCaseFilter and StopFilter.\nClass StopFilter; // Removes stop words from a token stream.\nClass StopFilterFactory; // Factory for StopFilter.\nClass TypeTokenFilter; // Removes tokens whose types appear in a set of blocked types from a token stream.\nClass TypeTokenFilterFactory; // Factory class for TypeTokenFilter.\nClass UnicodeWhitespaceAnalyzer; // An Analyzer that uses UnicodeWhitespaceTokenizer.\nClass UnicodeWhitespaceTokenizer; // A UnicodeWhitespaceTokenizer is a tokenizer that divides text at whitespace.\nClass UpperCaseFilter; // Normalizes token text to UPPER CASE.\nClass UpperCaseFilterFactory; // Factory for UpperCaseFilter.\nClass WhitespaceAnalyzer; // An Analyzer that uses WhitespaceTokenizer.\nClass WhitespaceTokenizer; // A tokenizer that divides text at whitespace characters as defined by Character.isWhitespace(int).\nClass WhitespaceTokenizerFactory; // Factory for WhitespaceTokenizer.\n", "des": "Basic, general-purpose analysis components."}
{"index": 2448, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package logging;\n\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.logging.LogFileWebEndpoint.class) @EnableConfigurationProperties(LogFileWebEndpointProperties.class) public class LogFileWebEndpointAutoConfiguration extends Object; // Auto-configuration for LogFileWebEndpoint.\n@ConfigurationProperties(prefix=\"management.endpoint.logfile\") public class LogFileWebEndpointProperties extends Object; // Configuration properties for LogFileWebEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.logging.LoggersEndpoint.class) public class LoggersEndpointAutoConfiguration extends Object; // Auto-configuration for the LoggersEndpoint.\n", "des": "Auto-configuration for actuator logging concerns."}
{"index": 2672, "repo": "spring-r2dbc-6.0.11", "code": "package r2dbc;\n\npackage r2dbc.connection; // Provides a utility class for easy ConnectionFactory access, a ReactiveTransactionManager for a single ConnectionFactory, and various simple ConnectionFactory implementations.\npackage r2dbc.core; // Core domain types around DatabaseClient.\npublic class BadSqlGrammarException extends org.springframework.dao.InvalidDataAccessResourceUsageException; // Exception thrown when SQL specified is invalid.\npublic class UncategorizedR2dbcException extends org.springframework.dao.UncategorizedDataAccessException; // Exception thrown when we can't classify a R2dbcException into one of our generic data access exceptions.\n", "des": "The classes in this package make R2DBC easier to use and reduce the likelihood of common errors."}
{"index": 2816, "repo": "spring-integration-ip-6.1.2", "code": "package util;\n\npublic final class RegexUtils extends Object; // Regular Expression Utilities.\npublic final class TestingUtilities extends Object; // Convenience class providing methods for testing IP components.\n", "des": "Provides utilities for IP support."}
{"index": 867, "repo": "calcite-core-1.34.0", "code": "package validate;\n\npackage validate.implicit; // SQL Implicit Type Cast\nInterface AggregatingScope; // An extension to the SqlValidatorScope interface which indicates that the scope is aggregating.\nInterface SqlConformance; // Enumeration of valid SQL compatibility modes.\nInterface SqlMoniker; // An interface of an object identifier that represents a SqlIdentifier.\nInterface SqlNameMatcher; // Checks whether two names are the same according to a case-sensitivity policy.\nInterface SqlValidator; // Validates the parse tree of a SQL statement, and provides semantic information about the parse tree.\nInterface SqlValidator.Config; // Interface to define the configuration for a SqlValidator.\nInterface SqlValidatorCatalogReader; // Supplies catalog information for SqlValidator.\nInterface SqlValidatorNamespace; // A namespace describes the relation returned by a section of a SQL query.\nInterface SqlValidatorScope; // Name-resolution scope.\nInterface SqlValidatorScope.Resolved; // Callback from SqlValidatorScope.resolve(java.util.List<java.lang.String>, org.apache.calcite.sql.validate.SqlNameMatcher, boolean, org.apache.calcite.sql.validate.SqlValidatorScope.Resolved).\nInterface SqlValidatorTable; // Supplies a SqlValidator with the metadata for a table.\nInterface SqlValidatorUtil.Suggester; // Suggests candidates for unique names, given the number of attempts so far and the number of expressions in the project list.\nInterface SqlValidatorWithHints; // Extends SqlValidator to allow discovery of useful data such as fully qualified names of SQL objects, alternative valid SQL objects that can be used in the SQL statement (dubbed as hints).\nClass AggregatingSelectScope; // Scope for resolving identifiers within a SELECT statement that has a GROUP BY clause.\nClass AggregatingSelectScope.Resolved; // Information about an aggregating scope that can only be determined after validation has occurred.\nClass AliasNamespace; // Namespace for an AS t(c1, c2, ...) clause.\nClass CollectNamespace; // Namespace for COLLECT and TABLE constructs.\nClass DelegatingNamespace; // An implementation of SqlValidatorNamespace that delegates all methods to an underlying object.\nClass DelegatingScope; // A scope which delegates all requests to its parent scope.\nClass DelegatingSqlValidatorCatalogReader; // Implementation of SqlValidatorCatalogReader that passes all calls to a parent catalog reader.\n", "des": "SQL validation."}
{"index": 3897, "repo": "solr-solrj-9.3.0", "code": "package api;\n\nInterface CollectionConfig;\nInterface HashRange; // A range of hash that is stored in a shard\nInterface Resource; // A binary resource.\nInterface Resource.Consumer;\nInterface Router; // identify shards for a given routing key or document id\nInterface Shard; // A shard of a collection\nInterface ShardReplica; // replica of a shard\nInterface SimpleMap<T>; // A simplified read-only key-value structure.\nInterface SolrCluster; // Represents a Solr cluster\nInterface SolrCollection; // Represents a collection in Solr\nInterface SolrNode; // A read only view of a Solr node\nEnum ApiType; // Types of API calls\n", "des": "API interfaces for core SolrCloud classes"}
{"index": 1171, "repo": "commons-math3-3.6.1", "code": "package oned;\n\nClass Arc; // This class represents an arc on a circle.\nClass ArcsSet; // This class represents a region of a circle: a set of arcs.\nClass ArcsSet.Split; // Class holding the results of the split method.\nClass LimitAngle; // This class represents a 1D oriented hyperplane on the circle.\nClass S1Point; // This class represents a point on the 1-sphere.\nClass Sphere1D; // This class implements a one-dimensional sphere (i.e.\nClass SubLimitAngle; // This class represents sub-hyperplane for LimitAngle.\nClass ArcsSet.InconsistentStateAt2PiWrapping; // Specialized exception for inconsistent BSP tree state inconsistency.\nClass Sphere1D.NoSubSpaceException; // Specialized exception for inexistent sub-space.\n", "des": "This package provides basic geometry components on the 1-sphere."}
{"index": 275, "repo": "pdfbox-3.0.0-beta1", "code": "package contentstream;\n\npackage contentstream.operator; // This package contains implementations of all of the PDF operators.\nInterface PDContentStream; // A content stream.\nClass PDFGraphicsStreamEngine; // PDFStreamEngine subclass for advanced processing of graphics.\nClass PDFStreamEngine; // Processes a PDF content stream and executes certain operations.\n", "des": "This package contains provides classes for working with content streams."}
{"index": 3169, "repo": "gson-2.10.1", "code": "package stream;\n\nClass JsonReader; // Reads a JSON (RFC 7159) encoded value as a stream of tokens.\nClass JsonWriter; // Writes a JSON (RFC 7159) encoded value to a stream, one token at a time.\nEnum JsonToken; // A structure, name or value type in a JSON-encoded string.\nClass MalformedJsonException; // Thrown when a reader encounters malformed JSON.\n", "des": "This package provides classes for processing JSON in an efficient streaming way."}
{"index": 3468, "repo": "hibernate-core-5.6.15.Final", "code": "package converter;\n\nClass AttributeConverterMutabilityPlanImpl<T>; // The standard approach for defining a MutabilityPlan for converted (AttributeConverter) values is to always assume that they are immutable to make sure that dirty checking, deep copying and second-level caching all work properly no matter what.\nClass AttributeConverterSqlTypeDescriptorAdapter; // Adapter for incorporating JPA AttributeConverter handling into the SqlTypeDescriptor contract.\nClass AttributeConverterTypeAdapter<T>; // Adapts the Hibernate Type contract to incorporate JPA AttributeConverter calls.\n", "des": "Support for handling JPA AttributeConverter instances as part of the Hibernate Type system."}
{"index": 1565, "repo": "spring-restdocs-core-3.0.0", "code": "package http;\n\npublic abstract class HttpDocumentation extends Object; // Static factory methods for documenting a RESTful API's HTTP requests.\npublic class HttpRequestSnippet extends TemplatedSnippet; // A Snippet that documents an HTTP request.\npublic class HttpResponseSnippet extends TemplatedSnippet; // A Snippet that documents an HTTP response.\n", "des": "Documenting the HTTP request sent to a RESTful API and the HTTP response that is returned."}
{"index": 2805, "repo": "spring-security-oauth2-core-6.1.2", "code": "package endpoint;\n\npublic final class OidcParameterNames extends Object; // Standard parameter names defined in the OAuth Parameters Registry and used by the authorization endpoint and token endpoint.\n", "des": "Support classes that model the OpenID Connect Core 1.0 Request and Response messages from the Authorization Endpoint and Token Endpoint."}
{"index": 3850, "repo": "lucene-core-9.7.0", "code": "package comparators;\n\nClass DocComparator; // Comparator that sorts by asc _doc\nClass DoubleComparator; // Comparator based on Double.compare(double, double) for numHits.\nClass FloatComparator; // Comparator based on Float.compare(float, float) for numHits.\nClass IntComparator; // Comparator based on Integer.compare(int, int) for numHits.\nClass LongComparator; // Comparator based on Long.compare(long, long) for numHits.\nClass MinDocIterator; // Docs iterator that starts iterating from a configurable minimum document\nClass NumericComparator<T extends Number>; // Abstract numeric comparator for comparing numeric values.\nClass TermOrdValComparator; // Sorts by field's natural Term sort order, using ordinals.\n", "des": "Comparators, used to compare hits so as to determine their sort order when collecting the top results with TopFieldCollector."}
{"index": 3308, "repo": "opencms-core-15.0", "code": "package jobs;\n\nClass CmsCreateImageSizeJob; // A schedulable OpenCms job to calculate image size information.\nClass CmsDeleteExpiredResourcesJob; // A schedulable OpenCms job to delete expired resources.\nClass CmsHistoryClearJob; // A schedulable OpenCms job to clear the history.\nClass CmsImageCacheCleanupJob; // A schedulable OpenCms job that clear the image cache for the scaled images created by the CmsImageLoader.\nClass CmsPublishJob; // Scheduled job for time based publishing.\nClass CmsPublishScheduledJob; // Scheduled job for time based publishing.\nClass CmsRemoveOldDbLogEntriesJob; // A scheduled job which removes entries older than a given amount of time from the CMS_LOG table, to improve database performance.\nClass CmsSearchIndexOptimizeJob; // A schedulable OpenCms job that optimizes the Lucene based search indexes at runtime.\nClass CmsStaticExportJob; // A schedulable OpenCms job to write a complete static export (e.g.\nClass CmsUnsubscribeDeletedResourcesJob; // A scheduled OpenCms job to unsubscribe deleted resources.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Some predefined implementations for often used scheduled job tasks."}
{"index": 392, "repo": "amqp-client-5.18.0", "code": "package client;\n\npackage client.impl; // Implementations of interfaces specified in the client API, and their supporting classes.\nInterface AddressResolver; // Strategy interface to get the potential servers to connect to.\nInterface AMQP;\nInterface AMQP.Access.Request;\nInterface AMQP.Access.RequestOk;\nInterface AMQP.Basic.Ack;\nInterface AMQP.Basic.Cancel;\nInterface AMQP.Basic.CancelOk;\nInterface AMQP.Basic.Consume;\nInterface AMQP.Basic.ConsumeOk;\nInterface AMQP.Basic.Deliver;\nInterface AMQP.Basic.Get;\nInterface AMQP.Basic.GetEmpty;\nInterface AMQP.Basic.GetOk;\nInterface AMQP.Basic.Nack;\nInterface AMQP.Basic.Publish;\nInterface AMQP.Basic.Qos;\nInterface AMQP.Basic.QosOk;\nInterface AMQP.Basic.Recover;\nInterface AMQP.Basic.RecoverAsync;\nInterface AMQP.Basic.RecoverOk;\nInterface AMQP.Basic.Reject;\nInterface AMQP.Basic.Return;\nInterface AMQP.Channel.Close;\nInterface AMQP.Channel.CloseOk;\nInterface AMQP.Channel.Flow;\nInterface AMQP.Channel.FlowOk;\nInterface AMQP.Channel.Open;\nInterface AMQP.Channel.OpenOk;\nInterface AMQP.Confirm.Select;\nInterface AMQP.Confirm.SelectOk;\nInterface AMQP.Connection.Blocked;\nInterface AMQP.Connection.Close;\nInterface AMQP.Connection.CloseOk;\nInterface AMQP.Connection.Open;\nInterface AMQP.Connection.OpenOk;\nInterface AMQP.Connection.Secure;\nInterface AMQP.Connection.SecureOk;\nInterface AMQP.Connection.Start;\nInterface AMQP.Connection.StartOk;\nInterface AMQP.Connection.Tune;\nInterface AMQP.Connection.TuneOk;\nInterface AMQP.Connection.Unblocked;\nInterface AMQP.Connection.UpdateSecret;\nInterface AMQP.Connection.UpdateSecretOk;\nInterface AMQP.Exchange.Bind;\nInterface AMQP.Exchange.BindOk;\nInterface AMQP.Exchange.Declare;\nInterface AMQP.Exchange.DeclareOk;\nInterface AMQP.Exchange.Delete;\nInterface AMQP.Exchange.DeleteOk;\nInterface AMQP.Exchange.Unbind;\nInterface AMQP.Exchange.UnbindOk;\nInterface AMQP.Queue.Bind;\nInterface AMQP.Queue.BindOk;\nInterface AMQP.Queue.Declare;\n", "des": "The client API proper: classes and interfaces representing the AMQP connections, channels, and wire-protocol framing descriptors."}
{"index": 2234, "repo": "spring-data-commons-3.1.2", "code": "package config;\n\n@Retention(RUNTIME) @Target({TYPE,ANNOTATION_TYPE}) @Inherited @Import({SpringDataWebConfigurationImportSelector.class,QuerydslActivator.class}) public @interface EnableSpringDataWebSupport; // Annotation to automatically register the following beans for usage with Spring MVC.\npublic static class EnableSpringDataWebSupport.QuerydslActivator extends Object implements ImportSelector; // Import selector to register QuerydslWebConfiguration as configuration class if Querydsl is on the classpath.\npublic static class EnableSpringDataWebSupport.SpringDataWebConfigurationImportSelector extends Object implements ImportSelector, ResourceLoaderAware; // Import selector to import the appropriate configuration class depending on whether Spring HATEOAS is present on the classpath.\n@Configuration(proxyBeanMethods=false) public class HateoasAwareSpringDataWebConfiguration extends SpringDataWebConfiguration; // JavaConfig class to register PagedResourcesAssembler, PagedResourcesAssemblerArgumentResolver, SlicedResourcesAssembler and SlicedResourcesAssemblerArgumentResolver.\n@FunctionalInterface public interface PageableHandlerMethodArgumentResolverCustomizer; // Callback interface that can be implemented by beans wishing to customize the PageableHandlerMethodArgumentResolver configuration.\n@Configuration(proxyBeanMethods=false) public class ProjectingArgumentResolverRegistrar extends Object; // Configuration class to register a BeanPostProcessor to augment RequestMappingHandlerAdapter with a ProxyingHandlerMethodArgumentResolver.\n@Configuration(proxyBeanMethods=false) public class QuerydslWebConfiguration extends Object implements WebMvcConfigurer; // Querydsl-specific web configuration for Spring Data.\n@Configuration(proxyBeanMethods=false) public class ReactiveQuerydslWebConfiguration extends Object implements WebFluxConfigurer; // Querydsl-specific web configuration for Spring Data.\npublic interface SortHandlerMethodArgumentResolverCustomizer; // Callback interface that can be implemented by beans wishing to customize the SortHandlerMethodArgumentResolver configuration.\npublic class SpringDataJacksonConfiguration extends Object implements SpringDataJacksonModules; // JavaConfig class to export Jackson specific configuration.\npublic interface SpringDataJacksonModules; // Marker interface to describe configuration classes that ship Jackson modules that are supposed to be added to the Jackson ObjectMapper configured for EnableSpringDataWebSupport.\n", "des": "Spring Data web configuration."}
{"index": 1851, "repo": "spring-test-6.0.11", "code": "package web;\n\npublic abstract class AbstractGenericWebContextLoader extends AbstractContextLoader implements AotContextLoader; // Abstract, generic extension of AbstractContextLoader that loads a GenericWebApplicationContext.\npublic class AnnotationConfigWebContextLoader extends AbstractGenericWebContextLoader; // Concrete implementation of AbstractGenericWebContextLoader that loads bean definitions from annotated classes.\npublic class GenericGroovyXmlWebContextLoader extends GenericXmlWebContextLoader; // Concrete implementation of AbstractGenericWebContextLoader that loads bean definitions from Groovy scripts and XML configuration files.\npublic class GenericXmlWebContextLoader extends AbstractGenericWebContextLoader; // Concrete implementation of AbstractGenericWebContextLoader that loads bean definitions from XML resources.\npublic class ServletTestExecutionListener extends AbstractTestExecutionListener; // TestExecutionListener which provides mock Servlet API support to WebApplicationContexts loaded by the Spring TestContext Framework.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface WebAppConfiguration; // @WebAppConfiguration is a class-level annotation that is used to declare that the ApplicationContext loaded for an integration test should be a WebApplicationContext.\npublic class WebDelegatingSmartContextLoader extends AbstractDelegatingSmartContextLoader; // WebDelegatingSmartContextLoader is a concrete implementation of AbstractDelegatingSmartContextLoader that delegates to a GenericXmlWebContextLoader (or a GenericGroovyXmlWebContextLoader if Groovy is present on the classpath) and an AnnotationConfigWebContextLoader.\npublic class WebMergedContextConfiguration extends MergedContextConfiguration; // WebMergedContextConfiguration encapsulates the merged context configuration declared on a test class and all of its superclasses and enclosing classes via @ContextConfiguration, @WebAppConfiguration, @ActiveProfiles, and @TestPropertySource.\npublic class WebTestContextBootstrapper extends DefaultTestContextBootstrapper; // Web-specific implementation of the TestContextBootstrapper SPI.\n", "des": "Web support classes for the Spring TestContext Framework."}
{"index": 3827, "repo": "lucene-analysis-common-9.7.0", "code": "package tokenattributes;\n\nClass CollatedTermAttributeImpl; // Extension of CharTermAttributeImpl that encodes the term text as a binary Unicode collation key instead of as UTF-8 bytes.\n", "des": "Custom AttributeImpl for indexing collation keys as index terms."}
{"index": 379, "repo": "mahout-core-14.1", "code": "package math;\n\npackage math.function; // Core interfaces for functions, comparisons and procedures on objects and primitive data types.\npackage math.list; // Resizable lists holding objects or primitive data types such as int, double, etc.\npackage math.map; // Automatically growing and shrinking maps holding objects or primitive data types such as int, double, etc.\nInterface Matrix; // The basic interface including numerous convenience functions\nInterface MatrixTimesOps; // Optional interface for optimized matrix multiplications.\nInterface QR;\nInterface Swapper; // Interface for an object that knows how to swap elements at two positions (a,b).\nInterface Vector; // The basic interface including numerous convenience functions\nInterface Vector.Element; // A holder for information about a specific item in the Vector.\nInterface VectorIterable;\nClass AbstractMatrix; // A few universal implementations of convenience functions for a JVM-backed matrix.\nClass AbstractMatrix.TransposeViewVector;\nClass AbstractVector; // Implementations of generic capabilities like sum of elements and dot products\nClass Algebra;\nClass Arrays; // Array manipulations; complements java.util.Arrays.\nClass BinarySearch;\nClass Centroid; // A centroid is a weighted vector.\nClass CholeskyDecomposition; // Cholesky decomposition shamelessly ported from JAMA.\nClass ConstantVector; // Implements a vector with all the same values.\nClass DelegatingVector; // A delegating vector provides an easy way to decorate vectors with weights or id's and such while keeping all of the Vector functionality.\nClass DenseMatrix; // Matrix of doubles implemented using a 2-d array\nClass DenseSymmetricMatrix; // Economy packaging for a dense symmetric in-core matrix.\nClass DenseVector; // Implements vector as an array of doubles\nClass DiagonalMatrix;\nClass FileBasedMatrix; // Provides a way to get data from a file and treat it as if it were a matrix, but avoids putting all that data onto the Java heap.\nClass FileBasedSparseBinaryMatrix; // Provides a way to get data from a file and treat it as if it were a matrix, but avoids putting all that data onto the Java heap.\nClass FileBasedSparseBinaryMatrix.BinaryReadOnlyElement;\nClass Matrices;\nClass MatrixSlice;\n", "des": "Core base classes; Operations on primitive arrays such as sorting, partitioning and permuting."}
{"index": 1931, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package servlet;\n\n@AutoConfiguration(after=GraphQlAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.server.webmvc.GraphQlHttpHandler.class}) @ConditionalOnBean(org.springframework.graphql.ExecutionGraphQlService.class) @EnableConfigurationProperties(GraphQlCorsProperties.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.graphql.servlet.GraphQlWebMvcAutoConfiguration.GraphiQlResourceHints.class) public class GraphQlWebMvcAutoConfiguration extends Object; // Auto-configuration for enabling Spring GraphQL over Spring MVC.\n@Configuration(proxyBeanMethods=false) public static class GraphQlWebMvcAutoConfiguration.GraphQlEndpointCorsConfiguration extends Object implements org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass({jakarta.websocket.server.ServerContainer.class,org.springframework.web.socket.WebSocketHandler.class}) @ConditionalOnProperty(prefix=\"spring.graphql.websocket\", name=\"path\") public static class GraphQlWebMvcAutoConfiguration.WebSocketConfiguration extends Object;\n", "des": "Auto-configuration classes for MVC support in Spring GraphQL."}
{"index": 2119, "repo": "spring-retry-2.0.2", "code": "package support;\n\npublic class Args extends Object; // A root object containing the method arguments to use in expression evaluation.\npublic class DefaultRetryState extends Object implements RetryState;\npublic class RetrySimulation extends Object; // The results of a simulation.\npublic static class RetrySimulation.SleepSequence extends Object;\npublic class RetrySimulator extends Object; // A RetrySimulator is a tool for exercising retry + backoff operations.\npublic final class RetrySynchronizationManager extends Object; // Global variable support for retry clients.\npublic class RetryTemplate extends Object implements RetryOperations; // Template class that simplifies the execution of operations with retry semantics.\npublic class RetryTemplateBuilder extends Object; // Builder that provides a fluent API to configure new instances of RetryTemplate.\n", "des": "Infrastructure implementations of retry support concerns."}
{"index": 1624, "repo": "spring-kafka-3.0.9", "code": "package core;\n\npackage core.reactive; // Reactive component for consumer and producer.\npublic class ABSwitchCluster extends Object implements Supplier<String>; // A Supplier for bootstrap servers that can toggle between 2 lists of servers.\npublic class CleanupConfig extends Object; // Specifies time of KafkaStreams.cleanUp() execution.\npublic interface ConsumerFactory<K,V>; // The strategy to produce a Consumer instance(s).\npublic static interface ConsumerFactory.Listener<K,V>; // Called whenever a consumer is added or removed.\npublic interface ConsumerPostProcessor<K,V> extends Function<org.apache.kafka.clients.consumer.Consumer<K,V>,org.apache.kafka.clients.consumer.Consumer<K,V>>; // Called by consumer factories to perform post processing on newly created consumers.\npublic class DefaultKafkaConsumerFactory<K,V> extends KafkaResourceFactory implements ConsumerFactory<K,V>, org.springframework.beans.factory.BeanNameAware; // The ConsumerFactory implementation to produce new Consumer instances for provided Map configs and optional Deserializers on each ConsumerFactory.createConsumer() invocation.\npublic class DefaultKafkaProducerFactory<K,V> extends KafkaResourceFactory implements ProducerFactory<K,V>, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextStoppedEvent>, org.springframework.beans.factory.DisposableBean; // The ProducerFactory implementation for a singleton shared Producer instance.\nprotected static class DefaultKafkaProducerFactory.CloseSafeProducer<K,V> extends Object implements org.apache.kafka.clients.producer.Producer<K,V>; // A wrapper class for the delegate.\npublic class KafkaAdmin extends KafkaResourceFactory implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.SmartInitializingSingleton, KafkaAdminOperations; // An admin that delegates to an AdminClient to create topics defined in the application context.\npublic static class KafkaAdmin.NewTopics extends Object; // Wrapper for a collection of NewTopic to facilitate declaring multiple topics as a single bean.\npublic interface KafkaAdminOperations; // Provides a number of convenience methods wrapping AdminClient.\n", "des": "Package for kafka core components"}
{"index": 1147, "repo": "commons-math3-3.6.1", "code": "package gauss;\n\nClass BaseRuleFactory<T extends Number>; // Base class for rules that determines the integration nodes and their weights.\nClass GaussIntegrator; // Class that implements the Gaussian rule for integrating a weighted function.\nClass GaussIntegratorFactory; // Class that provides different ways to compute the nodes and weights to be used by the Gaussian integration rule.\nClass HermiteRuleFactory; // Factory that creates a Gauss-type quadrature rule using Hermite polynomials of the first kind.\nClass LegendreHighPrecisionRuleFactory; // Factory that creates Gauss-type quadrature rule using Legendre polynomials.\nClass LegendreRuleFactory; // Factory that creates Gauss-type quadrature rule using Legendre polynomials.\nClass SymmetricGaussIntegrator; // This class's implements integrate method assuming that the integral is symmetric about 0.\n", "des": "Gauss family of quadrature schemes."}
{"index": 1316, "repo": "groovy-all-4.0.13", "code": "package util;\n\npublic abstract class AbstractFactory extends Object implements Factory;\npublic interface BufferedIterator<T> extends Iterator<T>; // An iterator that allows examining the next element without consuming it.\npublic abstract class BuilderSupport extends GroovyObjectSupport; // Base class for creating arbitrary nested trees of objects or events.\npublic class CharsetToolkit extends Object; // Utility class to guess the encoding of a given text file.\npublic class ClosureComparator<T> extends Object implements Comparator<T>, Serializable; // A Comparator which uses a closure to compare 2 values being equal\npublic class ConfigObject extends GroovyObjectSupport implements Writable, Map, Cloneable; // A ConfigObject at a simple level is a Map that creates configuration entries (other ConfigObjects) when referencing them.\npublic abstract class DelegatingScript extends Script; // Script that performs method invocations and property access like Closure does.\npublic class Eval extends Object; // Allow easy integration from Groovy into Java through convenience methods.\npublic class Expando extends GroovyObjectSupport; // Represents a dynamically expandable bean.\npublic interface Factory;\npublic abstract class FactoryBuilderSupport extends Binding; // Mix of BuilderSupport and SwingBuilder's factory support.\npublic class GroovyCollections extends Object; // A Collections utility class\npublic class GroovyScriptEngine extends Object implements ResourceConnector; // Specific script engine able to reload modified scripts as well as dealing properly with dependent scripts.\npublic interface IFileNameFinder;\npublic class IndentPrinter extends Object; // A helper class for printing indented text.\npublic class MapEntry extends Object implements Map.Entry; // A Map.Entry implementation.\npublic class Node extends Object implements Serializable, Cloneable; // Represents an arbitrary tree node which can be used for structured metadata or any arbitrary XML-like tree.\npublic class NodeBuilder extends BuilderSupport; // A helper class for creating nested trees of Node objects for handling arbitrary data\npublic class NodeList extends ArrayList; // A List implementation which is returned by queries on a Node which provides some XPath like helper methods for GPath.\npublic class NodePrinter extends Object; // A helper class for creating nested trees of data\npublic class ObjectGraphBuilder extends FactoryBuilderSupport; // A builder for creating object graphs. Each node defines the class to be created and the property on its parent (if any) at the same time.\n", "des": "Various Groovy utilities for working with nodes, builders, logging, and other things."}
{"index": 701, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package channel;\n\nClass DirectChannelSpec;\nClass ExecutorChannelSpec;\nClass LoadBalancingChannelSpec<S extends MessageChannelSpec<S,C>,C extends org.springframework.integration.channel.AbstractMessageChannel>;\nClass MessageChannels;\nClass MessageChannelSpec<S extends MessageChannelSpec<S,C>,C extends org.springframework.integration.channel.AbstractMessageChannel>;\nClass PriorityChannelSpec;\nClass PublishSubscribeChannelSpec<S extends PublishSubscribeChannelSpec<S>>;\nClass QueueChannelSpec;\nClass QueueChannelSpec.MessageStoreSpec; // The ChannelMessageStore-specific QueueChannelSpec extension.\nClass RendezvousChannelSpec;\nClass WireTapSpec; // The IntegrationComponentSpec implementation for the WireTap component.\n", "des": "Contains MessageChannel Builders DSL."}
{"index": 3511, "repo": "opennlp-tools-2.2.0", "code": "package commons;\n\nInterface Sample; // Represents a generic type of processable elements.\nInterface Trainer; // Represents a common base for training implementations.\nAnnotation Type Internal; // Classes, fields, or methods annotated &#64;Internal are for OpenNLP internal use only.\nAnnotation Type ThreadSafe; // Classes, fields, or methods annotated &#64;ThreadSafe are safe to use in multithreading contexts.\n", "des": "Package related to common interfaces used in different contexts."}
{"index": 789, "repo": "lucene-analyzers-common-8.11.2", "code": "package lt;\n\nClass LithuanianAnalyzer; // Analyzer for Lithuanian.\n", "des": "Analyzer for Lithuanian."}
{"index": 81, "repo": "ignite-core-2.15.0", "code": "package roundrobin;\n\nInterface RoundRobinLoadBalancingSpiMBean; // Management bean for RoundRobinLoadBalancingSpi SPI.\nClass RoundRobinLoadBalancingSpi; // This SPI iterates through nodes in round-robin fashion and pick the next sequential node.\n", "des": "Contains default round-robin implementation for load balancing SPI."}
{"index": 3243, "repo": "opencms-core-15.0", "code": "package shared;\n\npackage shared.rpc; // Contains the RPC service interfaces used by the XML content editor.\nClass CmsComplexWidgetData; // Bean which holds the necessary data for complex value widgets in the Acacia editor.\nClass CmsContentDefinition; // Contains all information needed for editing an XMLContent.\nClass CmsEditHandlerData; // Data which needs to be passed to the edit handler when using the 'new' button for an editable list element.\nClass CmsEditorConstants; // Constants used for content editor integration.\nClass CmsExternalWidgetConfiguration; // External widget configuration settings.\nClass CmsSaveResult; // Stores the editor save result information.\n", "des": "Contains data beans used on the server side as well as on the client side of the XML content editor."}
{"index": 3315, "repo": "opencms-core-15.0", "code": "package spellchecking;\n\nClass CmsSolrSpellchecker; // CmsSolrSpellchecker is used to perform spellchecking in OpenCms by using Solr.\nClass CmsSpellcheckDictionaryIndexer; // Helping class for manipulating the Solr spellchecker indices.\n", "des": "Contains the SOLR based spellcheck service classes."}
{"index": 3291, "repo": "opencms-core-15.0", "code": "package state;\n\nInterface I_CmsSearchStateCommon; // Class for keeping the state of the common search options.\nInterface I_CmsSearchStateDidYouMean; // Class for keeping the state of the spellcheck search options.\nInterface I_CmsSearchStateFacet; // Interface for the state all facet types have in common.\nInterface I_CmsSearchStateGeoFilter; // Interface for the Geo filter state.\nInterface I_CmsSearchStatePagination; // Interface for pagination states.\nInterface I_CmsSearchStateSorting; // Interface for sorting states.\nClass CmsSearchStateCommon; // Class for handling the state of the common search options.\nClass CmsSearchStateDidYouMean; // Class for handling the state of the \"Did you mean?\" search options.\nClass CmsSearchStateFacet; // Class for keeping the state common for all facet types.\nClass CmsSearchStateGeoFilter; // Class keeping the state of the Geo filter.\nClass CmsSearchStatePagination; // Class for keeping the state for the pagination.\nClass CmsSearchStateSorting; // Class for keeping the state of the sorting options.\n", "des": "API classes for the state of the search form support provided for server-side Solr search."}
{"index": 3154, "repo": "tika-core-2.8.0", "code": "package detect;\n\nInterface Detector; // Content type detector.\nInterface EncodingDetector; // Character encoding detector.\nClass AutoDetectReader; // An input stream reader that automatically detects the character encoding to be used for converting bytes to characters.\nClass CompositeDetector; // Content type detector that combines multiple different detection mechanisms.\nClass CompositeEncodingDetector;\nClass DefaultDetector; // A composite detector based on all the Detector implementations available through the service provider mechanism.\nClass DefaultEncodingDetector; // A composite encoding detector based on all the EncodingDetector implementations available through the service provider mechanism.\nClass DefaultProbDetector; // A version of DefaultDetector for probabilistic mime detectors, which use statistical techniques to blend the results of differing underlying detectors when attempting to detect the type of a given file.\nClass EmptyDetector; // Dummy detector that returns application/octet-stream for all documents.\nClass FileCommandDetector; // This runs the linux 'file' command against a file.\nClass MagicDetector; // Content type detection based on magic bytes, i.e.\nClass NameDetector; // Content type detection based on the resource name.\nClass NNExampleModelDetector;\nClass NNTrainedModel;\nClass NNTrainedModelBuilder;\nClass NonDetectingEncodingDetector; // Always returns the charset passed in via the initializer\nClass OverrideDetector;\nClass TextDetector; // Content type detection of plain text documents.\nClass TextStatistics; // Utility class for computing a histogram of the bytes seen in a stream.\nClass TrainedModel;\nClass TrainedModelDetector;\nClass TypeDetector; // Content type detection based on a content type hint.\nClass XmlRootExtractor; // Utility class that uses a SAXParser to determine the namespace URI and local name of the root element of an XML file.\nClass ZeroSizeFileDetector; // Detector to identify zero length files as application/x-zerovalue\n", "des": "Media type detection."}
{"index": 1618, "repo": "spring-data-neo4j-7.1.2", "code": "package support;\n\n@API(status=STABLE, since=\"6.1\") public interface CypherdslConditionExecutor<T>; // An interface that can be added to any repository so that queries can be enriched by conditions of the Cypher-DSL.\n@API(status=STABLE, since=\"6.1\") public interface CypherdslStatementExecutor<T>; // An interface that can be added to any imperative repository so that the repository exposes several methods taking in a Statement from the Cypher-DSL, that allows for full customization of the queries executed in a programmatic way in contrast to provide custom queries declaratively via @Query annotations.\npublic interface Neo4jEntityInformation<T,ID> extends EntityInformation<T,ID>; // Neo4j specific contract for entity informations.\n@API(status=INTERNAL, since=\"6.0.2\") public final class Neo4jEvaluationContextExtension extends Object implements EvaluationContextExtension; // This class registers the Neo4j SpEL Support it is registered by the appropriate repository factories as a root bean.\n@API(status=INTERNAL, since=\"6.0\") public final class Neo4jRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends TransactionalRepositoryFactoryBeanSupport<T,S,ID>; // Special adapter for Springs FactoryBean interface to allow easy setup of repository factories via Spring configuration.\n@API(status=INTERNAL, since=\"6.0\") public final class Neo4jRepositoryFactoryCdiBean<T> extends CdiRepositoryBean<T>; // The CDI pendant to the Neo4jRepositoryFactoryBean.\n@API(status=STABLE, since=\"6.3.3\") public interface ReactiveCypherdslConditionExecutor<T>; // An interface that can be added to any repository so that queries can be enriched by conditions of the Cypher-DSL.\n@API(status=STABLE, since=\"6.1\") public interface ReactiveCypherdslStatementExecutor<T>; // An interface that can be added to any reactive repository so that the repository exposes several methods taking in a Statement from the Cypher-DSL, that allows for full customization of the queries executed in a programmatic way in contrast to provide custom queries declaratively via @Query annotations.\n", "des": "This package provides a couple of public support classes for building custom imperative and reactive Spring Data Neo4j repository base classes."}
{"index": 3902, "repo": "solr-solrj-9.3.0", "code": "package params;\n\nInterface AnalysisParams; // Defines the request parameters used by all analysis request handlers.\nInterface CollectionAdminParams;\nInterface CollectionParams;\nInterface CommonAdminParams;\nInterface CommonParams; // Parameters used across many handlers\nInterface ConfigSetParams; // ConfigSets API related parameters and actions.\nInterface CursorMarkParams; // Parameters and constants used when dealing with cursor based requests across large sorted result sets.\nInterface DisMaxParams; // A collection of params used in DisMaxRequestHandler, both for Plugin initialization and for Requests.\nInterface EventParams;\nInterface ExpandParams; // Expand parameters\nInterface FacetParams; // Facet parameters\nInterface GroupParams; // Group parameters\nInterface HighlightParams;\nInterface MoreLikeThisParams; // Params for MoreLikeThisHandler.\nInterface QueryElevationParams; // Parameters used with the QueryElevationComponent\nInterface ShardParams; // Parameters used for distributed search.\nInterface SimpleParams; // Parameters used by the SimpleQParser.\nInterface SpatialParams;\nInterface SpellingParams; // Parameters used for spellchecking\nInterface StatsParams; // Stats Parameters\nInterface StreamParams; // Streaming Expressions Parameters and Properties.\nInterface TermsParams;\nInterface TermVectorParams;\nInterface UpdateParams; // A collection of standard params used by Update handlers\nClass AppendedSolrParams; // SolrParams wrapper which acts similar to DefaultSolrParams except that it \"appends\" the values of multi-value params from both sub instances, so that all of the values are returned.\nClass CoreAdminParams;\nClass DefaultSolrParams;\nClass MapSolrParams; // SolrParams implementation that can be built from and is backed by a Map.\nClass ModifiableSolrParams; // This class is similar to MultiMapSolrParams except you can edit the parameters after it is initialized.\nClass MultiMapSolrParams;\nClass RequiredSolrParams; // This is a simple wrapper to SolrParams that will throw a 400 exception if you ask for a parameter that does not exist.\nClass SolrParams; // SolrParams is designed to hold parameters to Solr, often from the request coming into Solr.\nEnum CollectionParams.CollectionAction; // (Mostly) Collection API actions that can be sent by nodes to the Overseer over the /overseer/collection-queue-work ZooKeeper queue.\nEnum CollectionParams.LockLevel;\nEnum CommonParams.EchoParamStyle; // valid values for: echoParams\n", "des": "Parameter constants and enumerations."}
{"index": 1813, "repo": "spring-aop-6.0.11", "code": "package dynamic;\n\npublic abstract class AbstractRefreshableTargetSource extends Object implements TargetSource, Refreshable; // Abstract TargetSource implementation that wraps a refreshable target object.\npublic class BeanFactoryRefreshableTargetSource extends AbstractRefreshableTargetSource; // Refreshable TargetSource that fetches fresh target beans from a BeanFactory.\npublic interface Refreshable; // Interface to be implemented by dynamic target objects, which support reloading and optionally polling for updates.\n", "des": "Support for dynamic, refreshable TargetSource implementations for use with Spring AOP."}
{"index": 3554, "repo": "guava-32.1.1-jre", "code": "package escape;\n\nClass ArrayBasedCharEscaper; // A CharEscaper that uses an array to quickly look up replacement characters for a given char value.\nClass ArrayBasedEscaperMap; // An implementation-specific parameter class suitable for initializing ArrayBasedCharEscaper or ArrayBasedUnicodeEscaper instances.\nClass ArrayBasedUnicodeEscaper; // A UnicodeEscaper that uses an array to quickly look up replacement characters for a given code point.\nClass CharEscaper; // An object that converts literal text into a format safe for inclusion in a particular context (such as an XML document).\nClass CharEscaperBuilder; // Simple helper class to build a \"sparse\" array of objects based on the indexes that were added to it.\nClass Escaper; // An object that converts literal text into a format safe for inclusion in a particular context (such as an XML document).\nClass Escapers; // Static utility methods pertaining to Escaper instances.\nClass Escapers.Builder; // A builder for simple, fast escapers.\nClass UnicodeEscaper; // An Escaper that converts literal text into a format safe for inclusion in a particular context (such as an XML document).\n", "des": "Interfaces, utilities, and simple implementations of escapers and encoders."}
{"index": 3404, "repo": "commons-imaging-1.0-alpha3", "code": "package psd;\n\nClass PsdHeaderInfo;\nClass PsdImageContents;\nClass PsdImageParser;\nClass PsdImagingParameters; // Psd format parameters.\n", "des": "The PSD image format."}
{"index": 3301, "repo": "opencms-core-15.0", "code": "package notification;\n\nClass A_CmsNotification; // Abstract class to create a notfication which will be send as a html mail to a user in OpenCms.\nClass CmsContentNotification; // The E-Mail to be written to responsibles of resources.\nClass CmsContentNotificationJob; // Scheduled job that checks the system for resources that will shortly expire, be released, or will be outdated.\nClass CmsExtendedNotificationCause; // Class to encapsulate a resource and the cause of its notification.\nClass CmsNotificationCandidates; // The basic class for the content notification feature in OpenCms.\nClass CmsNotificationCause; // Objects of this class are serialized in the additional infos of a user to store, which resources were already confirmed by the user.\nClass CmsNotificationMacroResolver; // MacroResolver for Notifications.\nClass CmsPublishNotification; // Class to send a notification to an OpenCms user with a summary of warnings and errors occurred while publishing the project.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains classes for the automatical notification of outdated, expiring or released content."}
{"index": 327, "repo": "kafka-clients-3.5.0", "code": "package quota;\n\nClass ClientQuotaAlteration; // Describes a configuration alteration to be made to a client quota entity.\nClass ClientQuotaAlteration.Op;\nClass ClientQuotaEntity; // Describes a client quota entity, which is a mapping of entity types to their names.\nClass ClientQuotaFilter; // Describes a client quota entity filter.\nClass ClientQuotaFilterComponent; // Describes a component for applying a client quota filter.\n", "des": "Provides mechanisms for enforcing resource quotas."}
{"index": 2215, "repo": "spring-data-commons-3.1.2", "code": "package cdi;\n\npublic abstract class CdiRepositoryBean<T> extends Object implements jakarta.enterprise.inject.spi.Bean<T>, jakarta.enterprise.inject.spi.PassivationCapable; // Base class for Bean wrappers.\npublic interface CdiRepositoryConfiguration; // Interface containing the configurable options for the Spring Data repository subsystem using CDI.\npublic class CdiRepositoryContext extends Object; // Context for CDI repositories.\npublic abstract class CdiRepositoryExtensionSupport extends Object implements jakarta.enterprise.inject.spi.Extension; // Base class for Extension implementations that create instances for Spring Data repositories.\n@Documented @Retention(RUNTIME) @Target({TYPE,ANNOTATION_TYPE}) @Inherited public @interface Eager; // Annotation to mark repository interfaces to be instantiated eagerly in a CDI context.\n", "des": "Base classes to implement CDI support for repositories."}
{"index": 3689, "repo": "solr-core-9.3.0", "code": "package search;\n\npackage search.facet; // APIs and classes for the JSON Facet API.\npackage search.function; // Solr implementations of ValueSource for function queries.\npackage search.grouping; // APIs and classes for implementing result grouping\npackage search.join; // Classes related to joins.\npackage search.mlt; // APIs and classes for implementing MoreLikeThis (mlt) QueryParser.\npackage search.neural; // APIs and classes for implementing Neural (Dense Retrieval) QueryParsers.\npackage search.similarities; // Factories for various built-in Lucene ranking models.\npackage search.stats; // APIs and Classes implementing the Stats component used for document frequency calculations.\nInterface CacheRegenerator; // Implementations of CacheRegenerator are used in autowarming to populate a new cache based on an old cache.\nInterface DocIterator; // Simple Iterator of document Ids which may include score information.\nInterface DocList; // DocList represents the result of a query: an ordered list of document ids with optional score.\nInterface DocSetProducer;\nInterface ExtendedQuery; // The ExtendedQuery interface provides extra metadata to a query.\nInterface PostFilter; // The PostFilter interface provides a mechanism to further filter documents after they have already gone through the main query and other filters.\nInterface SolrCache<K,​V>; // Primary API for dealing with Solr's internal caches.\nClass AbstractReRankQuery;\nClass AnalyticsQuery; // Note: This API is experimental and may change in non backward-compatible ways in the future\nClass BitDocSet; // A FixedBitSet based implementation of a DocSet.\nClass BitsFilteredPostingsEnum;\nClass BoolQParserPlugin; // Create a boolean query from sub queries.\nClass BoostQParserPlugin; // Create a boosted query from the input value.\nClass CacheConfig; // Contains the knowledge of how cache config is stored in the solrconfig.xml file, and implements a factory to create caches.\nClass CaffeineCache<K,​V>; // A SolrCache backed by the Caffeine caching library [1].\nClass CancellableCollector; // Allows a query to be cancelled\nClass CollapsingQParserPlugin; // The CollapsingQParserPlugin is a PostFilter that performs field collapsing.\n", "des": "APIs and classes for parsing and processing search requests"}
{"index": 3781, "repo": "lucene-analysis-common-9.7.0", "code": "package en;\n\nClass AbstractWordsFileFilterFactory; // Abstract parent class for analysis factories that accept a stopwords file as input.\nClass EnglishAnalyzer; // Analyzer for English.\nClass EnglishMinimalStemFilter; // A TokenFilter that applies EnglishMinimalStemmer to stem English words.\nClass EnglishMinimalStemFilterFactory; // Factory for EnglishMinimalStemFilter.\nClass EnglishMinimalStemmer; // Minimal plural stemmer for English.\nClass EnglishPossessiveFilter; // TokenFilter that removes possessives (trailing 's) from words.\nClass EnglishPossessiveFilterFactory; // Factory for EnglishPossessiveFilter.\nClass KStemFilter; // A high-performance kstem filter for english.\nClass KStemFilterFactory; // Factory for KStemFilter.\nClass KStemmer; // This class implements the Kstem algorithm\nClass PorterStemFilter; // Transforms the token stream as per the Porter stemming algorithm.\nClass PorterStemFilterFactory; // Factory for PorterStemFilter.\n", "des": "Analyzer for English."}
{"index": 2463, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package humio;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.humio.HumioMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"humio\") @EnableConfigurationProperties(HumioProperties.class) public class HumioMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Humio.\n@ConfigurationProperties(prefix=\"management.humio.metrics.export\") public class HumioProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring Humio metrics export.\n", "des": "Support for exporting actuator metrics to Humio."}
{"index": 1800, "repo": "spring-aop-6.0.11", "code": "package aspectj;\n\npackage aspectj.annotation; // Classes enabling AspectJ 5 @Annotated classes to be used in Spring AOP.\npackage aspectj.autoproxy; // Base classes enabling auto-proxying based on AspectJ.\npublic abstract class AbstractAspectJAdvice extends Object implements Advice, AspectJPrecedenceInformation, Serializable; // Base class for AOP Alliance Advice classes wrapping an AspectJ aspect or an AspectJ-annotated advice method.\npublic interface AspectInstanceFactory extends org.springframework.core.Ordered; // Interface implemented to provide an instance of an AspectJ aspect.\npublic class AspectJAdviceParameterNameDiscoverer extends Object implements org.springframework.core.ParameterNameDiscoverer; // ParameterNameDiscoverer implementation that tries to deduce parameter names for an advice method from the pointcut expression, returning, and throwing clauses.\npublic static class AspectJAdviceParameterNameDiscoverer.AmbiguousBindingException extends RuntimeException; // Thrown in response to an ambiguous binding being detected when trying to resolve a method's parameter names.\npublic class AspectJAfterAdvice extends AbstractAspectJAdvice implements MethodInterceptor, AfterAdvice, Serializable; // Spring AOP advice wrapping an AspectJ after advice method.\npublic class AspectJAfterReturningAdvice extends AbstractAspectJAdvice implements AfterReturningAdvice, AfterAdvice, Serializable; // Spring AOP advice wrapping an AspectJ after-returning advice method.\npublic class AspectJAfterThrowingAdvice extends AbstractAspectJAdvice implements MethodInterceptor, AfterAdvice, Serializable; // Spring AOP advice wrapping an AspectJ after-throwing advice method.\npublic abstract class AspectJAopUtils extends Object; // Utility methods for dealing with AspectJ advisors.\npublic class AspectJAroundAdvice extends AbstractAspectJAdvice implements MethodInterceptor, Serializable; // Spring AOP around advice (MethodInterceptor) that wraps an AspectJ advice method.\npublic class AspectJExpressionPointcut extends AbstractExpressionPointcut implements ClassFilter, IntroductionAwareMethodMatcher, org.springframework.beans.factory.BeanFactoryAware; // Spring Pointcut implementation that uses the AspectJ weaver to evaluate a pointcut expression.\n", "des": "AspectJ integration package."}
{"index": 2654, "repo": "spring-data-cassandra-4.1.2", "code": "package init;\n\npublic class CannotReadScriptException extends ScriptException; // Thrown by ScriptUtils if a CQL script cannot be read.\npublic class CompositeKeyspacePopulator extends Object implements KeyspacePopulator; // Composite KeyspacePopulator that delegates to a list of given KeyspacePopulator implementations, executing all scripts.\n@FunctionalInterface public interface KeyspacePopulator; // Strategy used to populate, initialize, or clean up a Cassandra keyspace.\npublic class ResourceKeyspacePopulator extends Object implements KeyspacePopulator; // Populates, initializes, or cleans up a keyspace using CQL scripts defined in external resources.\npublic abstract class ScriptException extends DataAccessException; // Root of the hierarchy of data access exceptions that are related to processing of CQL scripts.\npublic class ScriptParseException extends ScriptException; // Thrown by ScriptUtils if a CQL script cannot be properly parsed.\npublic class ScriptStatementFailedException extends ScriptException; // Thrown by ScriptUtils if a statement in an CQL script failed when executing it against the target database.\npublic abstract class ScriptUtils extends Object; // Generic utility methods for working with CQL scripts.\npublic class SessionFactoryInitializer extends Object implements InitializingBean, DisposableBean; // Used to set up a keyspace during initialization and clean up a keyspace during destruction.\npublic class UncategorizedScriptException extends ScriptException; // Thrown when we cannot determine anything more specific than \"something went wrong while processing a CQL script\": for example, a Exception from Cassandra that we cannot pinpoint more precisely.\n", "des": "Provides extensible support for initializing databases through scripts."}
{"index": 3349, "repo": "opencms-core-15.0", "code": "package diff;\n\nInterface I_CmsDiffProvider; // Interface for classes which display a comparison widget in the comparison view of the history dialog.\nClass A_CmsAttributeDiff; // Abstract super class for displaying differences between a set of properties / attributes.\nClass A_CmsAttributeDiff.IsAttributeDifference; // Predicate used to check if an attribute comparison bean actually represents a difference.\nClass CmsAttributeDiff; // Displays changes between attributes (size, modification date, etc.\nClass CmsImageDiff; // Displays two image versions side by side, scaled.\nClass CmsPropertyCompareBean; // Represents a row in an attribute comparison table.\nClass CmsPropertyDiff; // Displays differences between the sets of properties of two versions of a resource.\nClass CmsShowVersionButtons; // Provides buttons for showing the two versions being compared.\nClass CmsTextDiff; // Interprets two versions of a resource as text files, and shows a diff view for the two texts.\nClass CmsTextDiffPanel; // Widget used to display a colorized diff view for two texts.\nClass CmsValueCompareBean; // Represents a row of the XML content value comparison table.\nClass CmsValueDiff; // Displays either a diff for the XML file, or a table displaying the differences between individual content values, allowing the user to switch between the two views.\nClass CmsVersionMacroResolver;\n", "des": "Contains code for the comparison view of the file history dialog."}
{"index": 152, "repo": "ignite-core-2.15.0", "code": "package binary;\n\nInterface BinaryMetadataUpdatedListener; // Interface allows any component to register for events of binary metadata updates.\nInterface CacheObjectBinaryProcessorImpl.TestBinaryContext.TestBinaryContextListener;\nClass BinaryMetadataKey; // Key for binary metadata.\nClass CacheObjectBinaryProcessorImpl; // Binary processor implementation.\nClass CacheObjectBinaryProcessorImpl.TestBinaryContext;\nClass IgniteBinaryImpl; // IgniteBinary implementation.\nClass MetadataRemoveAcceptedMessage; // Acknowledge message for MetadataRemoveProposedMessage: see its javadoc for detailed description of protocol.\nClass MetadataRemoveProposedMessage; // MetadataRemoveProposedMessage and MetadataRemoveAcceptedMessage messages make a basis for discovery-based protocol for manage metadata describing objects in binary format stored in Ignite caches.\nClass MetadataRequestMessage; // As DiscoveryCustomMessage messages are delivered to client nodes asynchronously it is possible that server nodes are allowed to send to clients some BinaryObjects clients don't have metadata for.\nClass MetadataResponseMessage; // Carries latest version of metadata to client as a response for MetadataRequestMessage.\nClass MetadataUpdateAcceptedMessage; // Acknowledge message for MetadataUpdateProposedMessage: see its javadoc for detailed description of protocol.\nClass MetadataUpdateProposedMessage; // MetadataUpdateProposedMessage and MetadataUpdateAcceptedMessage messages make a basis for discovery-based protocol for exchanging metadata describing objects in binary format stored in Ignite caches.\n", "des": "Implementation of binary processor."}
{"index": 2671, "repo": "spring-data-jdbc-3.1.2", "code": "package query;\n\npublic abstract class AbstractJdbcQuery extends Object implements RepositoryQuery; // Base class for queries based on a repository method.\nprotected static class AbstractJdbcQuery.ConvertingRowMapper<T> extends Object implements RowMapper<Object>; // Delegating RowMapper that reads a row into T and converts it afterwards into Object.\npublic static interface AbstractJdbcQuery.RowMapperFactory; // Factory to create a RowMapper for a given class.\npublic class JdbcQueryMethod extends QueryMethod; // QueryMethod implementation that implements a method by executing the query from a Query annotation on that method.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Modifying; // Indicates a method should be regarded as modifying query.\npublic class PartTreeJdbcQuery extends AbstractJdbcQuery; // An AbstractJdbcQuery implementation based on a PartTree.\n@Retention(RUNTIME) @Target(METHOD) @Documented public @interface Query; // Annotation to provide SQL statements that will get used for executing the method.\npublic class StringBasedJdbcQuery extends AbstractJdbcQuery; // A query to be executed based on a repository method, it's annotated SQL query and the arguments provided to the method.\n", "des": "Query derivation mechanism for JDBC specific repositories."}
{"index": 3295, "repo": "opencms-core-15.0", "code": "package lock;\n\nClass CmsLock; // Represents the lock state of a VFS resource.\nClass CmsLockActionRecord; // Bean class which keeps track of a locking action performed on a resource.\nClass CmsLockFilter; // A filter to retrieve the locks.\nClass CmsLockManager; // The CmsLockManager is used by the Cms application to detect the lock state of a resource.\nClass CmsLockType; // Indicates the different possible lock types.\nClass CmsLockUtil; // Locking utility class.\nClass CmsLockUtil.LockedFile; // Helper to handle the lock reports together with the files.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsLockActionRecord.LockChange; // A type for the different locking actions.\nClass CmsLockException; // Signals that a particular action was invoked on resource with an insufficient lock state.\n", "des": "The lock state of the resources in the VFS is handled with these classes."}
{"index": 2619, "repo": "wicket-util-10.0.0-M1", "code": "package watch;\n\npublic interface IModifiable; // Interface to get the last time something was modified.\npublic interface IModificationWatcher; // Monitors one or more IModifiable objects, calling a IChangeListener when a given object's modification time changes.\npublic class ModificationWatcher extends Object implements IModificationWatcher; // Monitors one or more IModifiable objects, calling a IChangeListener when a given object's modification time changes.\nprotected static final class ModificationWatcher.Entry extends Object; // Container class for holding modifiable entries to watch.\n", "des": "This package provides modification watchers."}
{"index": 2213, "repo": "spring-data-commons-3.1.2", "code": "package binding;\n\n@FunctionalInterface public interface MultiValueBinding<T extends com.querydsl.core.types.Path<? extends S>,S>; // MultiValueBinding creates a Predicate out of given Path and collection value.\n@FunctionalInterface public interface OptionalValueBinding<T extends com.querydsl.core.types.Path<? extends S>,S>; // OptionalValueBinding creates a Predicate out of given Path and value.\npublic interface QuerydslBinderCustomizer<T extends com.querydsl.core.types.EntityPath<?>>; // A component that will customize QuerydslBindings for the given entity path.\npublic interface QuerydslBinderCustomizerDefaults extends QuerydslBinderCustomizer<com.querydsl.core.types.EntityPath<?>>; // A component for QuerydslBindings customization acting as default customizer the given entity path regardless of the domain type.\npublic class QuerydslBindings extends Object; // QuerydslBindings allows definition of path specific bindings.\npublic class QuerydslBindingsFactory extends Object implements ApplicationContextAware; // Factory to create QuerydslBindings using an EntityPathResolver.\n@Target({PARAMETER,TYPE}) @Retention(RUNTIME) public @interface QuerydslPredicate; // Annotation to customize the binding of HTTP request parameters to a Querydsl Predicate in Spring MVC handler methods.\npublic class QuerydslPredicateBuilder extends Object; // Builder assembling Predicate out of PropertyValues.\n@FunctionalInterface public interface SingleValueBinding<T extends com.querydsl.core.types.Path<? extends S>,S>; // SingleValueBinding creates a Predicate out of given Path and value.\n", "des": "Base classes to implement CDI support for repositories."}
{"index": 136, "repo": "ignite-core-2.15.0", "code": "package checkpoint;\n\nClass GridCheckpointManager; // This class defines a checkpoint manager.\nClass GridCheckpointRequest; // This class defines checkpoint request.\n", "des": "TODO."}
{"index": 1385, "repo": "spring-boot-actuator-3.1.1", "code": "package invoke;\n\npackage invoke.convert; // Converter support for actuator endpoints.\npackage invoke.reflect; // Endpoint reflection support.\npublic final class MissingParametersException extends InvalidEndpointRequestException; // RuntimeException thrown when an endpoint invocation does not contain required parameters.\n@FunctionalInterface public interface OperationInvoker; // Interface to perform an operation invocation.\n@FunctionalInterface public interface OperationInvokerAdvisor; // Allows additional functionality to be applied to an OperationInvoker.\npublic interface OperationParameter; // A single operation parameter.\npublic interface OperationParameters extends Iterable<OperationParameter>; // A collection of operation parameters.\npublic final class ParameterMappingException extends InvalidEndpointRequestException; // A ParameterMappingException is thrown when a failure occurs during operation parameter mapping.\n@FunctionalInterface public interface ParameterValueMapper; // Maps parameter values to the required type when invoking an endpoint.\n", "des": "Interfaces and classes relating to invoking operation methods."}
{"index": 3100, "repo": "jena-querybuilder-4.9.0", "code": "package querybuilder;\n\npackage querybuilder.clauses; // Interfaces that describe various SPARQL clauses as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321.\npackage querybuilder.handlers; // Classes that implement SPARQL clauses but do not return instances of the builder.\npackage querybuilder.rewriters; // Classes to rewrite Query algebra, expressions and other objects to handle variable replacement for the prepared statement functionality.\npublic abstract class AbstractQueryBuilder<T extends AbstractQueryBuilder<T>> extends Object implements Cloneable, PrologClause<T>, ValuesClause<T>; // Base class for all QueryBuilders.\npublic class AskBuilder extends AbstractQueryBuilder<AskBuilder> implements DatasetClause<AskBuilder>, WhereClause<AskBuilder>, SolutionModifierClause<AskBuilder>; // Builder for SPARQL Ask Queries.\npublic class ConstructBuilder extends AbstractQueryBuilder<ConstructBuilder> implements DatasetClause<ConstructBuilder>, WhereClause<ConstructBuilder>, SolutionModifierClause<ConstructBuilder>, ConstructClause<ConstructBuilder>; // Builder for SPARQL Construct Queries.\npublic class Converters extends Object; // A collection of static methods to convert from Objects to various types used in Query and Update construction.\npublic class DescribeBuilder extends AbstractQueryBuilder<DescribeBuilder> implements DatasetClause<DescribeBuilder>, WhereClause<DescribeBuilder>, SolutionModifierClause<DescribeBuilder>, SelectClause<DescribeBuilder>; // Builder for SPARQL Describe Queries.\npublic class ExprFactory extends Object; // Create expressions.\npublic enum Order extends Enum<Order>; // The order for the ORDER BY modifiers.\npublic class SelectBuilder extends AbstractQueryBuilder<SelectBuilder> implements DatasetClause<SelectBuilder>, WhereClause<SelectBuilder>, SolutionModifierClause<SelectBuilder>, SelectClause<SelectBuilder>; // Builder for SPARQL Select Queries.\npublic class UpdateBuilder extends Object; // Class to build update requests.\npublic class WhereBuilder extends AbstractQueryBuilder<WhereBuilder> implements WhereClause<WhereBuilder>; // A simple implementation of WhereClause for use in building complex sub queries where a SelectBuilder or similar implementation is more than is needed.\n", "des": "A utility package to simplify the building of ARQ queries in code."}
{"index": 1525, "repo": "spring-context-6.0.11", "code": "package classloading;\n\npackage classloading.glassfish; // Support for class instrumentation on GlassFish.\npackage classloading.jboss; // Support for class instrumentation on JBoss AS 6 and 7.\npackage classloading.tomcat; // Support for class instrumentation on Tomcat.\npublic class InstrumentationLoadTimeWeaver extends Object implements LoadTimeWeaver; // LoadTimeWeaver relying on VM Instrumentation.\npublic interface LoadTimeWeaver; // Defines the contract for adding one or more ClassFileTransformers to a ClassLoader.\npublic class ReflectiveLoadTimeWeaver extends Object implements LoadTimeWeaver; // LoadTimeWeaver which uses reflection to delegate to an underlying ClassLoader with well-known transformation hooks.\npublic class ResourceOverridingShadowingClassLoader extends ShadowingClassLoader; // Subclass of ShadowingClassLoader that overrides attempts to locate certain files.\npublic class ShadowingClassLoader extends org.springframework.core.DecoratingClassLoader; // ClassLoader decorator that shadows an enclosing ClassLoader, applying registered transformers to all affected classes.\npublic class SimpleInstrumentableClassLoader extends org.springframework.core.OverridingClassLoader; // Simplistic implementation of an instrumentable ClassLoader.\npublic class SimpleLoadTimeWeaver extends Object implements LoadTimeWeaver; // LoadTimeWeaver that builds and exposes a SimpleInstrumentableClassLoader.\npublic class SimpleThrowawayClassLoader extends org.springframework.core.OverridingClassLoader; // ClassLoader that can be used to load classes without bringing them into the parent loader.\npublic class WeavingTransformer extends Object; // ClassFileTransformer-based weaver, allowing for a list of transformers to be applied on a class byte array.\n", "des": "Support package for load time weaving based on class loaders, as required by JPA providers (but not JPA-specific)."}
{"index": 3726, "repo": "lucene-queryparser-9.7.0", "code": "package charstream;\n\nInterface CharStream; // This interface describes a character stream that maintains line and column number positions of the characters.\nClass FastCharStream; // An efficient implementation of JavaCC's CharStream interface.\n", "des": "This package contains reusable parts for javacc-generated grammars (query parsers)."}
{"index": 3750, "repo": "lucene-queryparser-9.7.0", "code": "package query;\n\nInterface DistanceSubQuery; // Interface for queries that can be nested as subqueries into a span near.\nInterface SimpleTerm.MatchingTermVisitor; // Callback to visit each matching term during \"rewrite\" in SimpleTerm.MatchingTermVisitor.visitMatchingTerm(Term)\nClass AndQuery; // Factory for conjunctions\nClass BasicQueryFactory; // Factory for creating basic term queries\nClass ComposedQuery; // Base class for composite queries (such as AND/OR/NOT)\nClass DistanceQuery; // Factory for NEAR queries\nClass FieldsQuery; // Forms an OR query of the provided query across multiple fields.\nClass NotQuery; // Factory for prohibited clauses\nClass OrQuery; // Factory for disjunctions\nClass SimpleTerm; // Base class for queries that expand to sets of simple terms.\nClass SpanNearClauseFactory; // Factory for SpanOrQuery\nClass SrndPrefixQuery; // Query that matches String prefixes\nClass SrndQuery; // Lowest level base class for surround queries\nClass SrndTermQuery; // Simple single-term clause\nClass SrndTruncQuery; // Query that matches wildcards\nClass TooManyBasicQueries; // Exception thrown when BasicQueryFactory would exceed the limit of query clauses.\n", "des": "This package contains SrndQuery and its subclasses."}
{"index": 3490, "repo": "poi-5.2.3", "code": "package wellknown;\n\nClass PropertyIDMap; // This is a dictionary which maps property ID values to property ID strings.\n", "des": "Specific support for DocumentSummaryInformation, SummaryInformation types."}
{"index": 1079, "repo": "graal-sdk-1.0.0-rc7", "code": "package c;\n\npackage c.constant; // This package provides parts of the Java / C interface that are related to C constants.\npackage c.function; // This package provides parts of the Java / C interface that are related to C functions.\npackage c.struct; // This package provides parts of the Java / C interface that are related to C structures.\npackage c.type; // This package provides parts of the Java / C interface that are related to standard C pointer types, as well as utility functions to convert between Java types and C types.\nInterface CContext.Directives; // Describes a C context.\nAnnotation Type CContext; // Defines the context for most other annotations of the C interface: the C header files that need to be imported, the C macros that need to be defined to properly configure these headers, and additional flags that should be passed to the C compiler when analyzing the definitions.\n", "des": "This package and its sub-packages provide a fast and lightweight interface between Java code and C code."}
{"index": 1241, "repo": "spring-hateoas-2.1.2", "code": "package core;\n\npublic abstract class AbstractEntityLinks extends Object implements EntityLinks; // Implementation base class to delegate the higher level methods of EntityLinks by delegating to the more fine grained ones to reduce the implementation effort for actual implementation classes.\npublic class AnnotationAttribute extends Object; // Simply helper to reference a dedicated attribute of an Annotation.\npublic class AnnotationLinkRelationProvider extends Object implements LinkRelationProvider, Ordered; // LinkRelationProvider that evaluates the Relation annotation on entity types.\npublic class AnnotationMappingDiscoverer extends Object implements MappingDiscoverer; // MappingDiscoverer implementation that inspects mappings from a particular annotation.\npublic class CachingMappingDiscoverer extends Object implements MappingDiscoverer; // Caching adapter of MappingDiscoverer.\npublic class ControllerEntityLinks extends AbstractEntityLinks; // EntityLinks implementation which assumes a certain URI mapping structure: A class-level ExposesResourceFor annotation to declare that the annotated controller exposes collection and item resources for. An RequestMapping annotation to form the base URI of the collection resource. A controller method with a mapping annotation to actually handle at least one HTTP method. A controller method that maps a subordinate resource taking a path variable to identify an item resource.\npublic class ControllerEntityLinksFactoryBean extends AbstractFactoryBean<ControllerEntityLinks> implements ApplicationContextAware; // FactoryBean implementation to create ControllerEntityLinks instances looking up controller classes from an ApplicationContext.\npublic class DefaultLinkRelationProvider extends Object implements LinkRelationProvider, Ordered; // Default implementation of LinkRelationProvider to simply use the uncapitalized version of the given type's name as item resource LinkRelation as well as an appended List for the collection resource LinkRelation.\npublic class DelegatingEntityLinks extends Object implements EntityLinks; // EntityLinks implementation that delegates to the EntityLinks instances registered in the PluginRegistry given on instance creation.\npublic class DelegatingLinkRelationProvider extends Object implements LinkRelationProvider;\npublic class DummyInvocationUtils extends Object; // Utility methods to capture dummy method invocations.\npublic interface EmbeddedWrapper; // A wrapper to handle values to be embedded into a EntityModel.\npublic class EmbeddedWrappers extends Object; // Interface to mark objects that are aware of the rel they'd like to be exposed under.\npublic class EvoInflectorLinkRelationProvider extends DefaultLinkRelationProvider; // LinkRelationProvider implementation using the Evo Inflector implementation of an algorithmic approach to English plurals.\n", "des": "Implementations of core API interfaces."}
{"index": 309, "repo": "pdfbox-3.0.0-beta1", "code": "package pagenavigation;\n\nClass PDThread; // This a single thread in a PDF document.\nClass PDThreadBead; // This a single bead in a thread in a PDF document.\nClass PDTransition; // Represents a page transition as defined in paragraph 12.4.4.1 of PDF 32000-1:2008\nEnum PDTransitionDimension; // The dimension in which the specified transition effect shall occur.\nEnum PDTransitionDirection; // The direction in which the specified transition effect shall moves, expressed in degrees counterclockwise starting from a left-to-right direction.\nEnum PDTransitionMotion; // The direction of motion for the specified transition effect.\nEnum PDTransitionStyle; // The transition style that shall be used when moving to the page from another during a presentation.\n", "des": "A package to allow provide access to PDF page navigation functionality."}
{"index": 1606, "repo": "spring-websocket-6.0.11", "code": "package session;\n\npublic abstract class AbstractHttpSockJsSession extends AbstractSockJsSession; // An abstract base class for use with HTTP transport SockJS sessions.\npublic abstract class AbstractSockJsSession extends Object implements SockJsSession; // An abstract base class for SockJS sessions implementing SockJsSession.\npublic class PollingSockJsSession extends AbstractHttpSockJsSession; // A SockJS session for use with polling HTTP transports.\npublic abstract class StreamingSockJsSession extends AbstractHttpSockJsSession; // A SockJS session for use with streaming HTTP transports.\npublic class WebSocketServerSockJsSession extends AbstractSockJsSession implements NativeWebSocketSession; // A SockJS session for use with the WebSocket transport.\n", "des": "SockJS specific implementations of WebSocketSession."}
{"index": 534, "repo": "commons-vfs2-2.9.0", "code": "package temp;\n\nClass TemporaryFileProvider; // A provider for temporary files.\n", "des": "The Temporary Filespace Provider."}
{"index": 2627, "repo": "shiro-web-2.0.0-alpha-2", "code": "package authc;\n\npublic class AnonymousFilter extends PathMatchingFilter; // Filter that allows access to a path immediately without performing security checks of any kind.\npublic abstract class AuthenticatingFilter extends AuthenticationFilter; // An AuthenticationFilter that is capable of automatically performing an authentication attempt based on the incoming request.\npublic abstract class AuthenticationFilter extends AccessControlFilter; // Base class for all Filters that require the current user to be authenticated.\npublic class BasicHttpAuthenticationFilter extends AuthenticatingFilter; // Requires the requesting user to be authenticated for the request to continue, and if they're not, requires the user to login via the HTTP Basic protocol-specific challenge.\npublic class BearerHttpAuthenticationFilter extends AuthenticatingFilter; // Requires the requesting user to be authenticated for the request to continue, and if they're not, requires the user to login via the HTTP Bearer protocol-specific challenge.\npublic class FormAuthenticationFilter extends AuthenticatingFilter; // Requires the requesting user to be authenticated for the request to continue, and if they are not, forces the user to login via by redirecting them to the loginUrl you configure.\npublic class LogoutFilter extends AdviceFilter; // Simple Filter that, upon receiving a request, will immediately log-out the currently executing subject and then redirect them to a configured redirectUrl.\npublic class PassThruAuthenticationFilter extends AuthenticationFilter; // An authentication filter that redirects the user to the login page when they are trying to access a protected resource.\npublic class UserFilter extends AccessControlFilter; // Filter that allows access to resources if the accessor is a known user, which is defined as having a known principal.\n", "des": "Servlet Filter implementations specific to controlling access based on a subject's authentication status, or those that can execute authentications (log-ins) directly."}
{"index": 17, "repo": "commons-collections4-4.4", "code": "package collection;\n\nInterface CompositeCollection.CollectionMutator<E>; // Pluggable strategy to handle changes to the composite.\nClass AbstractCollectionDecorator<E>; // Decorates another Collection to provide additional behaviour.\nClass CompositeCollection<E>; // Decorates a collection of other collections to provide a single unified view.\nClass IndexedCollection<K,C>; // An IndexedCollection is a Map-like view onto a Collection.\nClass PredicatedCollection<E>; // Decorates another Collection to validate that additions match a specified predicate.\nClass PredicatedCollection.Builder<E>; // Builder for creating predicated collections.\nClass SynchronizedCollection<E>; // Decorates another Collection to synchronize its behaviour for a multi-threaded environment.\nClass TransformedCollection<E>; // Decorates another Collection to transform objects that are added.\nClass UnmodifiableBoundedCollection<E>; // UnmodifiableBoundedCollection decorates another BoundedCollection to ensure it can't be altered.\nClass UnmodifiableCollection<E>; // Decorates another Collection to ensure it can't be altered.\n", "des": "This package contains implementations of the Collection interface."}
{"index": 1670, "repo": "spring-boot-cli-3.1.1", "code": "package encodepassword;\n\npublic class EncodePasswordCommand extends OptionParsingCommand; // Command to encode passwords for use with Spring Security.\n", "des": "CLI command for password encoding."}
{"index": 2679, "repo": "spring-data-jpa-3.1.2", "code": "package convert;\n\npackage convert.threeten; // Spring Data JPA specific JSR-310 converters.\npublic class QueryByExamplePredicateBuilder extends Object; // QueryByExamplePredicateBuilder creates a single CriteriaBuilder.and(Predicate...) combined Predicate for a given Example.\n", "des": "Spring Data JPA specific converter infrastructure."}
{"index": 1635, "repo": "spring-kafka-3.0.9", "code": "package support;\n\npackage support.converter; // Package for kafka converters\npackage support.mapping; // Provides classes related to type mapping.\npackage support.micrometer; // Provides classes to support Micrometer.\npublic abstract class AbstractKafkaHeaderMapper extends Object implements KafkaHeaderMapper; // Base for Kafka header mappers.\nprotected static interface AbstractKafkaHeaderMapper.HeaderMatcher; // A matcher for headers.\nprotected static class AbstractKafkaHeaderMapper.NeverMatchHeaderMatcher extends Object implements AbstractKafkaHeaderMapper.HeaderMatcher; // A matcher that never matches a set of headers.\nprotected static class AbstractKafkaHeaderMapper.SimplePatternBasedHeaderMatcher extends Object implements AbstractKafkaHeaderMapper.HeaderMatcher; // A pattern-based header matcher that matches if the specified header matches the specified simple pattern.\npublic interface Acknowledgment; // Handle for acknowledging the processing of a ConsumerRecord.\npublic final class AllowDenyCollectionManager<T> extends Object; // Class for managing Allow / Deny collections and its predicates.\npublic class CompositeProducerInterceptor<K,V> extends Object implements org.apache.kafka.clients.producer.ProducerInterceptor<K,V>, Closeable; // A ProducerInterceptor that delegates to a collection of interceptors.\npublic class CompositeProducerListener<K,V> extends Object implements ProducerListener<K,V>; // A ProducerListener that delegates to a collection of listeners.\npublic class DefaultKafkaHeaderMapper extends AbstractKafkaHeaderMapper; // Default header mapper for Apache Kafka.\npublic static class DefaultKafkaHeaderMapper.NonTrustedHeaderType extends Object; // Represents a header that could not be decoded due to an untrusted type.\npublic class EndpointHandlerMethod extends Object; // Handler method for retrying endpoints.\npublic class ExponentialBackOffWithMaxRetries extends org.springframework.util.backoff.ExponentialBackOff; // Subclass of ExponentialBackOff that allows the specification of the maximum number of retries rather than the maximum elapsed time.\npublic final class JacksonMimeTypeModule extends com.fasterxml.jackson.databind.module.SimpleModule; // A SimpleModule extension for MimeType serialization.\npublic final class JacksonPresent extends Object; // The utility to check if Jackson JSON processor is present in the classpath.\npublic final class JacksonUtils extends Object; // The utilities for Jackson ObjectMapper instances.\n", "des": "Package for kafka support"}
{"index": 2523, "repo": "spring-security-core-6.1.2", "code": "package method;\n\n@Deprecated public abstract class AbstractFallbackMethodSecurityMetadataSource extends AbstractMethodSecurityMetadataSource;\n@Deprecated public abstract class AbstractMethodSecurityMetadataSource extends Object implements MethodSecurityMetadataSource;\n@Deprecated public final class DelegatingMethodSecurityMetadataSource extends AbstractMethodSecurityMetadataSource;\n@Deprecated public class MapBasedMethodSecurityMetadataSource extends AbstractFallbackMethodSecurityMetadataSource implements org.springframework.beans.factory.BeanClassLoaderAware;\npublic interface MethodSecurityMetadataSource extends SecurityMetadataSource;\n@Target(PARAMETER) @Retention(RUNTIME) @Documented @Deprecated public @interface P;\n", "des": "Provides SecurityMetadataSource implementations for securing Java method invocations via different AOP libraries."}
{"index": 3364, "repo": "opencms-core-15.0", "code": "package workflow;\n\nInterface CmsDefaultPublishResourceFormatter.I_PublishResourceValidator; // Validator which can exclude some resources from publishing and supplies a status object for the excluded resources.\nInterface I_CmsPublishResourceFormatter; // 'Formats' a ResourceMap containing resources for publishing by creating a list of CmsPublishResource beans with the appropriate status informations to display.\nInterface I_CmsWorkflowManager; // Workflow manager interface.\nClass A_CmsWorkflowManager; // Abstract class which provides common functionality for workflow managers, like initialization of the configuration parameters.\nClass CmsDefaultPublishResourceFormatter; // Default formatter class for publish resources.\nClass CmsDefaultPublishResourceFormatter.DefaultComparator; // Compares publish resources by their sort date.\nClass CmsDefaultWorkflowManager; // The default implementation of the workflow manager interface, which offers only publish functionality.\nClass CmsExtendedPublishResourceFormatter; // Publish resource formatter for the extended workflow manager.\nClass CmsExtendedRealProjectWrapper; // Project wrapper which specially handles the 'release' workflow by reading resources of a project regardless of publish permissions.\nClass CmsExtendedWorkflowManager; // The default workflow manager implementation, which supports 2 basic actions, Release and Publish.\nClass CmsWorkflowNotification; // Notification class for the workflow 'release' action.\nClass CmsWorkflowResources; // Set of workflow resources, and an optional workflow.\nClass Messages; // The message bundle for the workflow package.\nClass CmsInvalidActionException; // An exception which indicates that a user tried to execute an invalid workflow action.\nClass CmsNewParentNotInWorkflowException; // An exception which indicates that the user tried to trigger a workflow action for a set of resources for which some parent folder is not included in the set, but has the resource state 'new'.\n", "des": "Classes related to publishing and workflow."}
{"index": 3289, "repo": "opencms-core-15.0", "code": "package controller;\n\nInterface I_CmsSearchController; // Interface all search controllers must implement.\nInterface I_CmsSearchControllerCommon; // Interface to get controllers state and configuration - version for common search configurations.\nInterface I_CmsSearchControllerDidYouMean; // Interface the \"Did you mean ...?\" controller must implement.\nInterface I_CmsSearchControllerFacetField; // Interface to get controllers state and configuration - version for field facets.\nInterface I_CmsSearchControllerFacetQuery; // Interface to get controllers state and configuration - version for the query facet.\nInterface I_CmsSearchControllerFacetRange; // Interface to get controllers state and configuration - version for field facets.\nInterface I_CmsSearchControllerFacetsField; // Interface the controller for all field facets must implement - just allow access to the single controllers.\nInterface I_CmsSearchControllerFacetsRange; // Interface the controller for all range facets must implement - just allow access to the single controllers.\nInterface I_CmsSearchControllerGeoFilter; // Interface to get controllers state and configuration - version for the Geo filter.\nInterface I_CmsSearchControllerHighlighting; // Interface to get controllers configuration - version for highlighting.\nInterface I_CmsSearchControllerMain; // Interface for the main search controller.\nInterface I_CmsSearchControllerPagination; // Interface to get controllers state and configuration - version for pagination.\nInterface I_CmsSearchControllerSorting; // Interface to get controllers state and configuration - version for common search configurations.\nClass CmsSearchController; // The main controller that allows to access all single sub-controllers.\nClass CmsSearchControllerCommon; // Search controller for the common search options.\nClass CmsSearchControllerDidYouMean; // Controller for the \"Did you mean ...?\" feature.\nClass CmsSearchControllerFacetField; // Search controller for the field facet options.\nClass CmsSearchControllerFacetQuery; // Search controller for the query facet options.\nClass CmsSearchControllerFacetRange; // Search controller for the field facet options.\nClass CmsSearchControllerFacetsField; // Search controller as aggregation of all single field facet controllers.\nClass CmsSearchControllerFacetsRange; // Search controller as aggregation of all single field facet controllers.\nClass CmsSearchControllerGeoFilter; // Search controller for the Geo filter.\nClass CmsSearchControllerHighlighting; // Controller for highlighting options.\nClass CmsSearchControllerPagination; // Controller for the pagination.\nClass CmsSearchControllerSorting; // Controller for sorting options.\n", "des": "API classes for the controllers of the search form support provided for server-side Solr search."}
{"index": 494, "repo": "beam-sdks-java-core-2.49.0", "code": "package state;\n\nInterface BagState<T>; // A ReadableState cell containing a bag of values.\nInterface CombiningState<InputT,AccumT,OutputT>; // A ReadableState cell defined by a Combine.CombineFn, accepting multiple input values, combining them as specified into accumulators, and producing a single output value.\nInterface GroupingState<InputT,OutputT>; // A ReadableState cell that combines multiple input values and outputs a single value of a different type.\nInterface MapState<K,V>; // A ReadableState cell mapping keys to values.\nInterface MultimapState<K,V>; // A ReadableState cell mapping keys to bags of values.\nInterface OrderedListState<T>; // A ReadableState cell containing a list of values sorted by timestamp.\nInterface ReadableState<T>; // A State that can be read via ReadableState.read().\nInterface SetState<T>; // A ReadableState cell containing a set of elements.\nInterface State; // A state cell, supporting a State.clear() operation.\nInterface StateBinder; // For internal use only; no backwards-compatibility guarantees.\nInterface StateContext<W extends BoundedWindow>; // For internal use only; no backwards-compatibility guarantees.\nInterface StateSpec<StateT extends State>; // A specification of a persistent state cell.\nInterface StateSpec.Cases<ResultT>; // Cases for doing a \"switch\" on the type of StateSpec.\nInterface Timer; // A timer for a specified time domain that can be set to register the desire for further processing at particular time in its specified time domain.\nInterface TimerMap;\nInterface Timers; // Interface for interacting with time.\nInterface TimerSpec; // A specification for a Timer.\nInterface ValueState<T>; // A ReadableState cell containing a single value.\nInterface WatermarkHoldState; // For internal use only; no backwards-compatibility guarantees.\nClass ReadableStates; // For internal use only; no backwards-compatibility guarantees.\nClass StateContexts; // For internal use only; no backwards-compatibility guarantees.\nClass StateKeySpec;\nClass StateSpec.Cases.WithDefault<ResultT>; // A base class for a visitor with a default method for cases it is not interested in.\nClass StateSpecs; // Static methods for working with StateSpecs.\n", "des": "Classes and interfaces for interacting with state."}
{"index": 1936, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package hazelcast;\n\n@AutoConfiguration @ConditionalOnClass(com.hazelcast.core.HazelcastInstance.class) @EnableConfigurationProperties(HazelcastProperties.class) @Import({org.springframework.boot.autoconfigure.hazelcast.HazelcastClientConfiguration.class,org.springframework.boot.autoconfigure.hazelcast.HazelcastServerConfiguration.class}) public class HazelcastAutoConfiguration extends Object; // Auto-configuration for Hazelcast IMDG.\n@FunctionalInterface public interface HazelcastConfigCustomizer; // Callback interface that can be implemented by beans wishing to customize the Hazelcast server configuration.\npublic abstract class HazelcastConfigResourceCondition extends ResourceCondition; // SpringBootCondition used to check if the Hazelcast configuration is available.\n@AutoConfiguration(after={HazelcastAutoConfiguration.class,HibernateJpaAutoConfiguration.class}) @ConditionalOnClass({com.hazelcast.core.HazelcastInstance.class,org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.class}) @Import(org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration.HazelcastInstanceEntityManagerFactoryDependsOnPostProcessor.class) public class HazelcastJpaDependencyAutoConfiguration extends Object; // Additional configuration to ensure that EntityManagerFactory beans depend on the hazelcastInstance bean.\n@ConfigurationProperties(prefix=\"spring.hazelcast\") public class HazelcastProperties extends Object; // Configuration properties for the hazelcast integration.\n", "des": "Auto-configuration for Hazelcast."}
{"index": 19, "repo": "commons-collections4-4.4", "code": "package functors;\n\nInterface PredicateDecorator<T>; // Defines a predicate that decorates one or more other predicates.\nClass AbstractQuantifierPredicate<T>; // Abstract base class for quantification predicates, e.g.\nClass AllPredicate<T>; // Predicate implementation that returns true if all the predicates return true.\nClass AndPredicate<T>; // Predicate implementation that returns true if both the predicates return true.\nClass AnyPredicate<T>; // Predicate implementation that returns true if any of the predicates return true.\nClass CatchAndRethrowClosure<E>; // Closure that catches any checked exception and re-throws it as a FunctorException runtime exception.\nClass ChainedClosure<E>; // Closure implementation that chains the specified closures together.\nClass ChainedTransformer<T>; // Transformer implementation that chains the specified transformers together.\nClass CloneTransformer<T>; // Transformer implementation that returns a clone of the input object.\nClass ClosureTransformer<T>; // Transformer implementation that calls a Closure using the input object and then returns the input.\nClass ComparatorPredicate<T>; // Predicate that compares the input object with the one stored in the predicate using a comparator.\nClass ConstantFactory<T>; // Factory implementation that returns the same constant each time.\nClass ConstantTransformer<I,O>; // Transformer implementation that returns the same constant each time.\nClass DefaultEquator<T>; // Default Equator implementation.\nClass EqualPredicate<T>; // Predicate implementation that returns true if the input is the same object as the one stored in this predicate by equals.\nClass ExceptionClosure<E>; // Closure implementation that always throws an exception.\nClass ExceptionFactory<T>; // Factory implementation that always throws an exception.\nClass ExceptionPredicate<T>; // Predicate implementation that always throws an exception.\nClass ExceptionTransformer<I,O>; // Transformer implementation that always throws an exception.\nClass FactoryTransformer<I,O>; // Transformer implementation that calls a Factory and returns the result.\nClass FalsePredicate<T>; // Predicate implementation that always returns false.\nClass ForClosure<E>; // Closure implementation that calls another closure n times, like a for loop.\nClass IdentityPredicate<T>; // Predicate implementation that returns true if the input is the same object as the one stored in this predicate.\n", "des": "This package contains implementations of the Closure, Predicate, Transformer and Factory interfaces."}
{"index": 1695, "repo": "spring-data-couchbase-5.1.2", "code": "package repository;\n\npackage repository.config; // This package contains the support classes to configure repositories in the context of Couchbase.\npackage repository.query; // This package contains classes related to query derivation and concrete ways of querying couchbase.\npackage repository.support; // This package contains the Couchbase implementations to support the Spring Data repository abstraction.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE,TYPE}) @Documented public @interface Collection; // Collection Annotation\n@NoRepositoryBean public interface CouchbaseRepository<T,ID> extends PagingAndSortingRepository<T,ID>, CrudRepository<T,ID>; // Couchbase specific Repository interface.\npublic interface DynamicProxyable<REPO>; // The generic parameter needs to be REPO which is either a CouchbaseRepository parameterized on T,ID or a ReactiveCouchbaseRepository parameterized on T,ID. i.e.: interface AirportRepository extends CouchbaseRepository<Airport, String>, DynamicProxyable<AirportRepository>\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE,TYPE}) @Documented public @interface Options; // Scope Annotation\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Query; // Annotation to support the use of N1QL queries with Couchbase.\n@NoRepositoryBean public interface ReactiveCouchbaseRepository<T,ID> extends ReactiveSortingRepository<T,ID>, ReactiveCrudRepository<T,ID>; // Couchbase-specific ReactiveSortingRepository implementation.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE,TYPE}) @Documented public @interface ScanConsistency; // Scan Consistency Annotation\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE,TYPE}) @Documented public @interface Scope; // Scope Annotation\n", "des": "This package contains the Couchbase interfaces to support the Spring Data repository abstraction."}
{"index": 2631, "repo": "shiro-web-2.0.0-alpha-2", "code": "package servlet;\n\npublic abstract class AbstractFilter extends ServletContextSupport implements javax.servlet.Filter; // Base abstract Filter simplifying Filter initialization and access to init parameters.\npublic abstract class AbstractShiroFilter extends OncePerRequestFilter; // Abstract base class that provides all standard Shiro request filtering behavior and expects subclasses to implement configuration-specific logic (INI, XML, .properties, etc.).\npublic abstract class AdviceFilter extends OncePerRequestFilter; // A Servlet Filter that enables AOP-style \"around\" advice for a ServletRequest via preHandle, postHandle, and afterCompletion hooks.\npublic interface Cookie; // Interface representing HTTP cookie operations, supporting pojo-style getters and setters for all attributes which includes HttpOnly support.\npublic static enum Cookie.SameSiteOptions extends Enum<Cookie.SameSiteOptions>; // The SameSite attribute of the Set-Cookie HTTP response header allows you to declare if your cookie should be restricted to a first-party or same-site context.\n@Deprecated public interface HttpSessionContext;\n@Deprecated public class IniShiroFilter extends AbstractShiroFilter;\npublic abstract class NameableFilter extends AbstractFilter implements org.apache.shiro.lang.util.Nameable; // Allows a filter to be named via JavaBeans-compatible NameableFilter.getName()/NameableFilter.setName(String) methods.\npublic abstract class OncePerRequestFilter extends NameableFilter; // Filter base class that guarantees to be just executed once per request, on any servlet container.\npublic class ProxiedFilterChain extends Object implements javax.servlet.FilterChain; // A proxied filter chain is a FilterChain instance that proxies an original FilterChain as well as a List of other Filters that might need to execute prior to the final wrapped original chain.\npublic class ServletContextSupport extends Object; // Base implementation for any components that need to access the web application's ServletContext.\npublic class ShiroFilter extends AbstractShiroFilter; // Primary Shiro Filter for web applications configuring Shiro via Servlet <listener> in web.xml.\npublic class ShiroHttpServletRequest extends javax.servlet.http.HttpServletRequestWrapper; // A ShiroHttpServletRequest wraps the Servlet container's original ServletRequest instance, but ensures that all HttpServletRequest invocations that require Shiro's support (getRemoteUser, getSession, etc.) can be executed first by Shiro as necessary before allowing the underlying Servlet container instance's method to be invoked.\n", "des": "Shiro-specific implementations of the Servlet API (Servlet Filters, et al.)."}
{"index": 3647, "repo": "solr-core-9.3.0", "code": "package plugins;\n\nClass AffinityPlacementConfig; // Configuration bean for AffinityPlacementFactory.\nClass AffinityPlacementFactory; // This factory is instantiated by config from its class name.\nClass MinimizeCoresPlacementFactory; // Factory for creating MinimizeCoresPlacementFactory.MinimizeCoresPlacementPlugin, a Placement plugin implementing placing replicas to minimize number of cores per Node, while not placing two replicas of the same shard on the same node.\nClass OrderedNodePlacementPlugin;\nClass OrderedNodePlacementPlugin.WeightedNode; // A class that determines the weight of a given node and the replicas that reside on it.\nClass RandomPlacementFactory; // Factory for creating RandomPlacementFactory.RandomPlacementPlugin, a placement plugin implementing random placement for new collection creation while preventing two replicas of same shard from being placed on same node..\nClass RandomPlacementFactory.RandomPlacementPlugin;\nClass SimplePlacementFactory; // Factory for creating SimplePlacementFactory.SimplePlacementPlugin, a placement plugin implementing the logic from the old LegacyAssignStrategy.\nClass SimplePlacementFactory.SimplePlacementPlugin;\n", "des": "Sample plugin implementations."}
{"index": 1877, "repo": "shiro-core-2.0.0-alpha-2", "code": "package aop;\n\npublic abstract class AnnotationsAuthorizingMethodInterceptor extends AuthorizingMethodInterceptor; // An AnnotationsAuthorizingMethodInterceptor is a MethodInterceptor that asserts a given method is authorized to execute based on one or more configured AuthorizingAnnotationMethodInterceptors.\npublic class AuthenticatedAnnotationHandler extends AuthorizingAnnotationHandler; // Handles RequiresAuthentication annotations and ensures the calling subject is authenticated before allowing access.\npublic class AuthenticatedAnnotationMethodInterceptor extends AuthorizingAnnotationMethodInterceptor; // Checks to see if a @RequiresAuthenticated annotation is declared, and if so, ensures the calling Subject.isAuthenticated() before invoking the method.\npublic abstract class AuthorizingAnnotationHandler extends AnnotationHandler; // An AnnotationHandler that executes authorization (access control) behavior based on directive(s) found in a JSR-175 Annotation.\npublic abstract class AuthorizingAnnotationMethodInterceptor extends AnnotationMethodInterceptor; // An AnnotationMethodInterceptor that asserts the calling code is authorized to execute the method before allowing the invocation to continue by inspecting code annotations to perform an access control check.\npublic abstract class AuthorizingMethodInterceptor extends MethodInterceptorSupport; // Basic abstract class to support intercepting methods that perform authorization (access control) checks.\npublic class DenyAllAnnotationHandler extends AuthorizingAnnotationHandler; // This AnnotationHandler denys access from any subject (anonymous or logged in user).\npublic class GuestAnnotationHandler extends AuthorizingAnnotationHandler; // Checks to see if a @RequiresGuest annotation is declared, and if so, ensures the calling Subject does not have an identity before invoking the method.\npublic class GuestAnnotationMethodInterceptor extends AuthorizingAnnotationMethodInterceptor; // Checks to see if a @RequiresGuest annotation is declared, and if so, ensures the calling Subject does not have an identity before invoking the method.\npublic class PermissionAnnotationHandler extends AuthorizingAnnotationHandler; // Checks to see if a @RequiresPermissions annotation is declared, and if so, performs a permission check to see if the calling Subject is allowed continued access.\npublic class PermissionAnnotationMethodInterceptor extends AuthorizingAnnotationMethodInterceptor; // Checks to see if a @RequiresPermissions annotation is declared, and if so, performs a permission check to see if the calling Subject is allowed to call the method.\npublic class PermitAllAnnotationHandler extends AuthorizingAnnotationHandler; // This AnnotationHandler allows access from any subject (anonymous or logged in user).\n", "des": "Contains AOP implementation support classes specifically used for authorization operations, particularly supporting AOP Method Interceptors and JSR-175 metadata Annotations."}
{"index": 331, "repo": "kafka-clients-3.5.0", "code": "package secured;\n\nClass OAuthBearerLoginCallbackHandler; // See org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginCallbackHandler\nClass OAuthBearerValidatorCallbackHandler; // See org.apache.kafka.common.security.oauthbearer.OAuthBearerValidatorCallbackHandler\n", "des": "This package is deprecated."}
{"index": 3268, "repo": "opencms-core-15.0", "code": "package file;\n\npackage file.collectors; // Collectors allow to gather lists of OpenCms resources from the OpenCms VFS using specific rules.\npackage file.history; // This package contains the classes to deal with the OpenCms VFS history archive.\npackage file.types; // The implementations of the core resource types for the VFS are located here.\npackage file.wrapper; // This package contains classes and interfaces used to access OpenCms through a wrapped CmsObject.\nInterface I_CmsResource; // Common ancestor interface for CmsFile and CmsFolder as well as for CmsHistoryFile and CmsHistoryFolder.\nClass CmsFile; // A file resource in the OpenCms VFS.\nClass CmsFolder; // A folder resource in the OpenCms VFS.\nClass CmsGroup; // A group principal in the OpenCms permission system.\nClass CmsLinkRewriter; // A class used to rewrite links and relations in one subtree such that relations from that subtree to another given subtree replaced with relations to the first subtree.\nClass CmsObject; // This pivotal class provides all authorized access to the OpenCms VFS resources.\nClass CmsProject; // Describes an OpenCms project, which contains a set of VFS resources that are being worked on at the same time.\nClass CmsProject.CmsProjectType; // Enumeration class for project types.\nClass CmsProperty; // Represents a property (meta-information) mapped to a VFS resource.\nClass CmsProperty.CmsPropertyLocaleTransformer; // Transforms a given properties map, to a map where the returned values for a property are dependent on the locale.\nClass CmsPropertyDefinition; // Defines a property name, so that CmsProperty instances can be created with that name.\nClass CmsPropertyDefinition.CmsPropertyType; // Enumeration class for property types.\nClass CmsRequestContext; // Stores the information about the current users OpenCms context, for example the requested URI, the current project, the selected site and more.\nClass CmsResource; // Base class for all OpenCms VFS resources like CmsFile or CmsFolder.\nClass CmsResource.CmsResourceCopyMode; // Enumeration class for resource copy modes.\nClass CmsResource.CmsResourceDeleteMode; // Enumeration class for resource delete modes.\nClass CmsResource.CmsResourceUndoMode; // Enumeration class for resource undo changes modes.\nClass CmsResourceBuilder; // This class allows the developer to build a CmsResource object by filling out individual fields one after the other.\nClass CmsResourceFilter; // Provides filters for resource result sets obtained from requests to the OpenCms VFS.\n", "des": "This important package provides the methods to access the OpenCms VFS repository with the permissions of an authenticated user."}
{"index": 505, "repo": "beam-sdks-java-core-2.49.0", "code": "package values;\n\nInterface PCollectionView<T>; // A PCollectionView<T> is an immutable view of a PCollection as a value of type T that can be accessed as a side input to a ParDo transform.\nInterface PCollectionViews.HasDefaultValue<T>;\nInterface PCollectionViews.IsSingletonView<T>;\nInterface PCollectionViews.TypeDescriptorSupplier<T>;\nInterface PInput; // The interface for things that might be input to a PTransform.\nInterface POutput; // The interface for things that might be output from a PTransform.\nInterface PValue; // For internal use.\nInterface TypeDescriptors.TypeVariableExtractor<InputT,OutputT>; // A helper interface for use with TypeDescriptors.extractFromTypeParameters(Object, Class, TypeVariableExtractor).\nClass EncodableThrowable; // A wrapper around a Throwable for use with coders.\nClass FailsafeValueInSingleWindow<T,ErrorT>; // An immutable tuple of value, timestamp, window, and pane.\nClass FailsafeValueInSingleWindow.Coder<T,ErrorT>; // A coder for FailsafeValueInSingleWindow.\nClass KV<K,V>; // An immutable key/value pair.\nClass KV.OrderByKey<K extends java.lang.Comparable<? super K>,V>; // A Comparator that orders KVs by the natural ordering of their keys.\nClass KV.OrderByValue<K,V extends java.lang.Comparable<? super V>>; // A Comparator that orders KVs by the natural ordering of their values.\nClass PBegin; // PBegin is the \"input\" to a root PTransform, such as Read or Create.\nClass PCollection<T>; // A PCollection<T> is an immutable collection of values of type T.\nClass PCollectionList<T>; // A PCollectionList<T> is an immutable list of homogeneously typed PCollection<T>s.\nClass PCollectionRowTuple; // A PCollectionRowTuple is an immutable tuple of PCollections, \"keyed\" by a string tag.\nClass PCollectionTuple; // A PCollectionTuple is an immutable tuple of heterogeneously-typed PCollections, \"keyed\" by TupleTags.\nClass PCollectionViews; // For internal use only; no backwards compatibility guarantees.\n", "des": "Defines PCollection and other classes for representing data in a Pipeline."}
{"index": 2520, "repo": "spring-security-core-6.1.2", "code": "package intercept;\n\npackage intercept.aopalliance; // Enforces security for AOP Alliance MethodInvocations, such as via Spring AOP.\npackage intercept.aspectj; // Enforces security for AspectJ JointPoints, delegating secure object callbacks to the calling aspect.\n@Deprecated public abstract class AbstractSecurityInterceptor extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.MessageSourceAware;\n@Deprecated public interface AfterInvocationManager;\n@Deprecated public class AfterInvocationProviderManager extends Object implements AfterInvocationManager, org.springframework.beans.factory.InitializingBean;\n@Deprecated public class InterceptorStatusToken extends Object;\n@Deprecated public class MethodInvocationPrivilegeEvaluator extends Object implements org.springframework.beans.factory.InitializingBean;\n@Deprecated public class RunAsImplAuthenticationProvider extends Object implements org.springframework.beans.factory.InitializingBean, AuthenticationProvider, org.springframework.context.MessageSourceAware;\n@Deprecated public interface RunAsManager;\n@Deprecated public class RunAsManagerImpl extends Object implements RunAsManager, org.springframework.beans.factory.InitializingBean;\n@Deprecated public class RunAsUserToken extends AbstractAuthenticationToken;\n", "des": "Abstract level security interception classes which are responsible for enforcing the configured security constraints for a secure object."}
{"index": 2320, "repo": "spring-boot-3.1.1", "code": "package jpa;\n\npackage jpa.hibernate; // Hibernate Support classes.\npublic class EntityManagerFactoryBuilder extends Object; // Convenient builder for JPA EntityManagerFactory instances.\n", "des": "JPA Support classes."}
{"index": 2199, "repo": "spring-data-commons-3.1.2", "code": "package config;\n\npublic class BeanComponentDefinitionBuilder extends Object; // Helper to create BeanComponentDefinition more easily.\npublic interface ConfigurationUtils; // Helper class to centralize common functionality that needs to be used in various places of the configuration implementation.\npublic abstract class ParsingUtils extends Object; // Utility methods for BeanDefinitionParser implementations.\npublic class TypeFilterParser extends Object; // Parser to populate the given ClassPathScanningCandidateComponentProvider with TypeFilters parsed from the given Element's children.\npublic static enum TypeFilterParser.Type extends Enum<TypeFilterParser.Type>;\n", "des": "Basic support for creating custom Spring namespaces and JavaConfig."}
{"index": 1887, "repo": "shiro-core-2.0.0-alpha-2", "code": "package jndi;\n\npublic class JndiRealmFactory extends JndiLocator implements RealmFactory; // Looks up one or more Realm instances from JNDI using specified jndiNames.\n", "des": "Support for acquiring Realms from JNDI, particularly useful for configuring Shiro in JEE or EJB environments."}
{"index": 742, "repo": "spring-data-solr-4.3.15", "code": "package query;\n\nInterface SolrEntityInformation<T,ID>;\nInterface SolrEntityInformationCreator;\nInterface SolrParameterAccessor;\nClass AbstractSolrQuery; // Base implementation of a solr specific RepositoryQuery\nClass BindableSolrParameter; // Used to provide additional information on parameters used in query definition.\nClass PartTreeSolrQuery; // Solr specific implementation of a query derived from method name\nClass SolrParameters;\nClass SolrParametersParameterAccessor; // Implementation of SolrParameterAccessor\nClass SolrQueryMethod; // Solr specific implementation of QueryMethod taking care of Query\nClass StringBasedSolrQuery; // Solr specific implementation of RepositoryQuery that can handle string based queries\n", "des": "Apache Solr specific repository query methods and executions."}
{"index": 2293, "repo": "spring-boot-3.1.1", "code": "package context;\n\npackage context.annotation; // Classes related to Spring's ApplicationContext annotations.\npackage context.config; // External configuration support allowing 'application.properties' to be loaded and used within a Spring Boot application.\npackage context.event; // ApplicationEvents triggered by Spring Boot.\npackage context.logging; // Logging integration with Spring's Application Context.\npackage context.properties; // Support for external configuration properties.\npublic class ApplicationPidFileWriter extends Object implements org.springframework.context.ApplicationListener<SpringApplicationEvent>, org.springframework.core.Ordered; // An ApplicationListener that saves application PID into file.\npublic class ConfigurationWarningsApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>; // ApplicationContextInitializer to report warnings for common misconfiguration mistakes.\n@FunctionalInterface protected static interface ConfigurationWarningsApplicationContextInitializer.Check; // A single check that can be applied.\nprotected static class ConfigurationWarningsApplicationContextInitializer.ComponentScanPackageCheck extends Object implements ConfigurationWarningsApplicationContextInitializer.Check; // ConfigurationWarningsApplicationContextInitializer.Check for @ComponentScan on problematic package.\nprotected static final class ConfigurationWarningsApplicationContextInitializer.ConfigurationWarningsPostProcessor extends Object implements org.springframework.core.PriorityOrdered, org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor; // BeanDefinitionRegistryPostProcessor to report warnings.\npublic class ContextIdApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>, org.springframework.core.Ordered; // ApplicationContextInitializer that sets the Spring ApplicationContext ID.\npublic class FileEncodingApplicationListener extends Object implements org.springframework.context.ApplicationListener<ApplicationEnvironmentPreparedEvent>, org.springframework.core.Ordered; // An ApplicationListener that halts application startup if the system file encoding does not match an expected value set in the environment.\npublic class TypeExcludeFilter extends Object implements org.springframework.core.type.filter.TypeFilter, org.springframework.beans.factory.BeanFactoryAware; // Provides exclusion TypeFilters that are loaded from the BeanFactory and automatically applied to SpringBootApplication scanning.\n", "des": "Classes related to Spring's ApplicationContext."}
{"index": 206, "repo": "nutch-2.4", "code": "package html;\n\nClass HtmlIndexingFilter; // Add raw HTML content of a document to the index.\n", "des": "Index raw HTML content."}
{"index": 1133, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package timelineservice;\n\nClass NMTimelineEvent; // Event posted to NMTimelinePublisher which in turn publishes it to timelineservice v2.\nClass NMTimelinePublisher; // Metrics publisher service that publishes data to the timeline service v.2.\nEnum NMTimelineEventType; // Type of NMTimelineEvent.\n", "des": "Package org.apache.hadoop.yarn.server.nodemanager.timelineservice contains classes related to publishing container events and other NM lifecycle events to ATSv2."}
{"index": 2227, "repo": "spring-data-commons-3.1.2", "code": "package spi;\n\npublic interface EvaluationContextExtension extends ExtensionIdAware; // SPI to allow adding a set of properties and function definitions accessible via the root of an EvaluationContext provided by an ExtensionAwareQueryMethodEvaluationContextProvider.\npublic interface ExtensionIdAware; // Marker interface for Spring Data EvaluationContext extensions.\npublic class Function extends Object; // Value object to represent a function.\npublic interface ReactiveEvaluationContextExtension extends ExtensionIdAware; // SPI to resolve a EvaluationContextExtension to make it accessible via the root of an EvaluationContext provided by a ExtensionAwareQueryMethodEvaluationContextProvider.\n", "des": "Service provider interfaces to extend the query execution mechanism."}
{"index": 3163, "repo": "tika-core-2.8.0", "code": "package sax;\n\npackage sax.xpath; // XPath utilities\nInterface ContentHandlerDecoratorFactory;\nInterface ContentHandlerFactory; // Interface to allow easier injection of code for getting a new ContentHandler\nInterface SafeContentHandler.Output; // Internal interface that allows both character and ignorable whitespace content to be filtered the same way.\nInterface WriteLimiter;\nClass AbstractRecursiveParserWrapperHandler; // This is a special handler to be used only with the RecursiveParserWrapper.\nClass BasicContentHandlerFactory; // Basic factory for creating common types of ContentHandlers\nClass BodyContentHandler; // Content handler decorator that only passes everything inside the XHTML <body/> tag to the underlying handler.\nClass CleanPhoneText; // Class to help de-obfuscate phone numbers in text.\nClass ContentHandlerDecorator; // Decorator base class for the ContentHandler interface.\nClass DIFContentHandler;\nClass ElementMappingContentHandler; // Content handler decorator that maps element QNames using a Map.\nClass ElementMappingContentHandler.TargetElement;\nClass EmbeddedContentHandler; // Content handler decorator that prevents the EmbeddedContentHandler.startDocument() and EmbeddedContentHandler.endDocument() events from reaching the decorated handler.\nClass EndDocumentShieldingContentHandler; // A wrapper around a ContentHandler which will ignore normal SAX calls to EndDocumentShieldingContentHandler.endDocument(), and only fire them later.\nClass ExpandedTitleContentHandler; // Content handler decorator which wraps a TransformerHandler in order to allow the TITLE tag to render as <title></title> rather than <title/> which is accomplished by calling the ContentHandler.characters(char[], int, int) method with a length of 1 but a zero length char array.\nClass Link;\nClass LinkContentHandler; // Content handler that collects links from an XHTML document.\nClass OfflineContentHandler; // Content handler decorator that always returns an empty stream from the OfflineContentHandler.resolveEntity(String, String) method to prevent potential network or other external resources from being accessed by an XML parser.\nClass PhoneExtractingContentHandler; // Class used to extract phone numbers while parsing.\nClass RecursiveParserWrapperHandler; // This is the default implementation of AbstractRecursiveParserWrapperHandler.\nClass RichTextContentHandler; // Content handler for Rich Text, it will extract XHTML <img/> tag <alt/> attribute and XHTML <a/> tag <name/> attribute into the output.\n", "des": "SAX utilities."}
{"index": 2847, "repo": "spring-integration-core-6.1.2", "code": "package codec;\n\npackage codec.kryo; // The Kryo specific Codec classes.\npublic interface Codec; // Interface for classes that perform both encode (serialize) and decode (deserialize) on multiple classes.\npublic class CodecMessageConverter extends IntegrationObjectSupport implements org.springframework.messaging.converter.MessageConverter; // A MessageConverter that delegates to a Codec to convert.\npublic class CompositeCodec extends Object implements Codec; // A Codec that can delegate to one out of many Codecs, each mapped to a class.\n", "des": "Provides base classes for the Codec abstraction."}
{"index": 1567, "repo": "spring-restdocs-core-3.0.0", "code": "package operation;\n\npackage operation.preprocess; // Support for preprocessing an operation prior to it being documented.\npublic class ConversionException extends RuntimeException; // An exception that can be thrown by RequestConverter and ResponseConverter implementations to indicate that a failure has occurred during conversion.\npublic final class FormParameters extends LinkedMultiValueMap<String,String>; // A request's form parameters, derived from its form URL encoded body content.\npublic interface Operation; // Describes an operation performed on a RESTful service.\npublic interface OperationRequest; // The request that was sent as part of performing an operation on a RESTful service.\npublic class OperationRequestFactory extends Object; // A factory for creating OperationRequests.\npublic interface OperationRequestPart; // A part of a multipart request.\npublic class OperationRequestPartFactory extends Object; // A factory for creating OperationRequestParts.\npublic interface OperationResponse; // The response that was received as part of performing an operation on a RESTful service.\npublic class OperationResponseFactory extends Object; // A factory for creating OperationResponses.\npublic final class QueryParameters extends LinkedMultiValueMap<String,String>; // A request's query parameters, derived from its URI's query string.\npublic interface RequestConverter<R>; // A RequestConverter is used to convert an implementation-specific request into an OperationRequest.\npublic final class RequestCookie extends Object; // A representation of a Cookie received in a request.\npublic interface ResponseConverter<R>; // A ResponseConverter is used to convert an implementation-specific response into an OperationResponse.\npublic final class ResponseCookie extends Object; // A representation of a Cookie returned in a response.\npublic class StandardOperation extends Object implements Operation; // Standard implementation of Operation.\n", "des": "Operation API that describes a request that was sent and the response that was received when calling a RESTful API."}
{"index": 332, "repo": "kafka-clients-3.5.0", "code": "package plain;\n\nClass PlainAuthenticateCallback;\nClass PlainLoginModule;\n", "des": "Provides implementation to use plaintext credentials authentication for securing Kafka clusters."}
{"index": 1492, "repo": "wicket-extensions-10.0.0-M1", "code": "package breadcrumb;\n\npackage breadcrumb.panel; // This package contains a panel based implementation of bread crumb participants.\npublic class BreadCrumbBar extends org.apache.wicket.markup.html.panel.Panel implements IBreadCrumbModel; // A component that renders bread crumbs.\npublic abstract class BreadCrumbLink extends org.apache.wicket.markup.html.link.Link<Void>; // A link that when clicked will set the the active bread crumb participant to the one that is returned by BreadCrumbLink.getParticipant(String).\npublic final class BreadCrumbModelListenerSupport extends Object implements org.apache.wicket.util.io.IClusterable; // Utility class for working with bread crumb model listeners.\npublic class DefaultBreadCrumbsModel extends Object implements IBreadCrumbModel; // Default breadcrumb model implementation that should be good for 99% of the use cases out there.\npublic interface IBreadCrumbModel extends org.apache.wicket.util.io.IClusterable; // Bread crumbs provide a means to track certain history of client actions.\npublic interface IBreadCrumbModelListener extends EventListener, org.apache.wicket.util.io.IClusterable; // Bread crumb model listeners get notified by bread crumb models of activation, addition and removal events.\npublic interface IBreadCrumbParticipant extends org.apache.wicket.util.io.IClusterable; // Bread crumb participants function as proxies for components that are part of a bread crumb hierarchy.\n", "des": "Package for working with bread crumb components."}
{"index": 1187, "repo": "commons-math3-3.6.1", "code": "package optim;\n\npackage optim.linear; // Optimization algorithms for linear constrained problems.\npackage optim.univariate; // One-dimensional optimization algorithms.\nInterface ConvergenceChecker<PAIR>; // This interface specifies how to check if an optimization algorithm has converged.\nInterface OptimizationData; // Marker interface.\nInterface OptimizationProblem<PAIR>; // Common settings for all optimization problems.\nClass AbstractConvergenceChecker<PAIR>; // Base class for all convergence checker implementations.\nClass AbstractOptimizationProblem<PAIR>; // Base class for implementing optimization problems.\nClass BaseMultiStartMultivariateOptimizer<PAIR>; // Base class multi-start optimizer for a multivariate function.\nClass BaseMultivariateOptimizer<PAIR>; // Base class for implementing optimizers for multivariate functions.\nClass BaseOptimizer<PAIR>; // Base class for implementing optimizers.\nClass InitialGuess; // Starting point (first guess) of the optimization procedure.\nClass MaxEval; // Maximum number of evaluations of the function to be optimized.\nClass MaxIter; // Maximum number of iterations performed by an (iterative) algorithm.\nClass PointValuePair; // This class holds a point and the value of an objective function at that point.\nClass PointVectorValuePair; // This class holds a point and the vectorial value of an objective function at that point.\nClass SimpleBounds; // Simple optimization constraints: lower and upper bounds.\nClass SimplePointChecker<PAIR extends Pair<double[],? extends Object>>; // Simple implementation of the ConvergenceChecker interface using only point coordinates.\nClass SimpleValueChecker; // Simple implementation of the ConvergenceChecker interface using only objective function values.\nClass SimpleVectorValueChecker; // Simple implementation of the ConvergenceChecker interface using only objective function values.\n", "des": "Generally, optimizers are algorithms that will either minimize or maximize a scalar function, called the objective function."}
{"index": 1536, "repo": "spring-context-6.0.11", "code": "package notification;\n\npublic class ModelMBeanNotificationPublisher extends Object implements NotificationPublisher; // NotificationPublisher implementation that uses the infrastructure provided by the ModelMBean interface to track javax.management.NotificationListeners and send Notifications to those listeners.\n@FunctionalInterface public interface NotificationPublisher; // Simple interface allowing Spring-managed MBeans to publish JMX notifications without being aware of how those notifications are being transmitted to the MBeanServer.\npublic interface NotificationPublisherAware extends org.springframework.beans.factory.Aware; // Interface to be implemented by any Spring-managed resource that is to be registered with an MBeanServer and wishes to send JMX javax.management.Notifications.\npublic class UnableToSendNotificationException extends JmxException; // Thrown when a JMX Notification is unable to be sent.\n", "des": "Provides supporting infrastructure to allow Spring-created MBeans to send JMX notifications."}
{"index": 2974, "repo": "pulsar-broker-3.0.0", "code": "package exception;\n\npackage exception.buffer; // Exceptions thrown when encountering errors in transaction buffer.\npackage exception.coordinator; // Exceptions thrown when encountering errors in transaction buffer.\npackage exception.pendingack; // Exceptions thrown when encountering errors in transaction buffer.\npublic abstract class TransactionException extends Exception; // The base exception class for the errors thrown from Transaction.\npublic static class TransactionException.TransactionNotSealedException extends TransactionException; // Exception is thrown when opening a reader on a transaction that is not sealed yet.\npublic static class TransactionException.TransactionSealedException extends TransactionException; // Exception thrown if a transaction is already sealed.\npublic static class TransactionException.TransactionStatusException extends TransactionException; // Exceptions are thrown when operations are applied to a transaction which is not in expected txn status.\n", "des": "Exceptions thrown when encountering errors in transaction buffer."}
{"index": 3855, "repo": "lucene-core-9.7.0", "code": "package bkd;\n\nInterface PointReader; // One pass iterator through all points previously written with a PointWriter, abstracting away whether points are read from (offline) disk or simple arrays in heap.\nInterface PointValue; // Represents a dimensional point value written in the BKD tree.\nInterface PointWriter; // Appends many points, and then at the end provides a PointReader to iterate those points.\nClass BKDConfig; // Basic parameters for indexing points on the BKD tree.\nClass BKDRadixSelector; // Offline Radix selector for BKD tree.\nClass BKDRadixSelector.PathSlice; // Sliced reference to points in an PointWriter.\nClass BKDReader; // Handles reading a block KD-tree in byte[] space previously written with BKDWriter.\nClass BKDWriter; // Recursively builds a block KD-tree to assign all incoming points in N-dim space to smaller and smaller N-dim rectangles (cells) until the number of points in a given rectangle is <= config.maxPointsInLeafNode.\nClass HeapPointReader; // Utility class to read buffered points from in-heap arrays.\nClass HeapPointWriter; // Utility class to write new points into in-heap arrays.\nClass MutablePointTreeReaderUtils; // Utility APIs for sorting and partitioning buffered points.\nClass OfflinePointReader; // Reads points from disk in a fixed-with format, previously written with OfflinePointWriter.\nClass OfflinePointWriter; // Writes points to disk in a fixed-with format.\n", "des": "Block KD-tree, implementing the generic spatial data structure described in this paper."}
{"index": 2186, "repo": "spring-security-web-6.1.2", "code": "package ui;\n\npublic class DefaultLoginPageGeneratingFilter extends org.springframework.web.filter.GenericFilterBean; // For internal use with namespace configuration in the case where a user doesn't configure a login page.\npublic class DefaultLogoutPageGeneratingFilter extends org.springframework.web.filter.OncePerRequestFilter; // Generates a default log out page.\n", "des": "Authentication user-interface rendering code."}
{"index": 884, "repo": "mahout-math-0.13.0", "code": "package map;\n\nClass AbstractByteByteMap;\nClass AbstractByteCharMap;\nClass AbstractByteDoubleMap;\nClass AbstractByteFloatMap;\nClass AbstractByteIntMap;\nClass AbstractByteLongMap;\nClass AbstractByteObjectMap<T>;\nClass AbstractByteShortMap;\nClass AbstractCharByteMap;\nClass AbstractCharCharMap;\nClass AbstractCharDoubleMap;\nClass AbstractCharFloatMap;\nClass AbstractCharIntMap;\nClass AbstractCharLongMap;\nClass AbstractCharObjectMap<T>;\nClass AbstractCharShortMap;\nClass AbstractDoubleByteMap;\nClass AbstractDoubleCharMap;\nClass AbstractDoubleDoubleMap;\nClass AbstractDoubleFloatMap;\nClass AbstractDoubleIntMap;\nClass AbstractDoubleLongMap;\nClass AbstractDoubleObjectMap<T>;\nClass AbstractDoubleShortMap;\nClass AbstractFloatByteMap;\nClass AbstractFloatCharMap;\nClass AbstractFloatDoubleMap;\nClass AbstractFloatFloatMap;\nClass AbstractFloatIntMap;\nClass AbstractFloatLongMap;\nClass AbstractFloatObjectMap<T>;\nClass AbstractFloatShortMap;\nClass AbstractIntByteMap;\nClass AbstractIntCharMap;\nClass AbstractIntDoubleMap;\nClass AbstractIntFloatMap;\nClass AbstractIntIntMap;\nClass AbstractIntLongMap;\nClass AbstractIntObjectMap<T>;\nClass AbstractIntShortMap;\nClass AbstractLongByteMap;\nClass AbstractLongCharMap;\nClass AbstractLongDoubleMap;\nClass AbstractLongFloatMap;\nClass AbstractLongIntMap;\nClass AbstractLongLongMap;\nClass AbstractLongObjectMap<T>;\nClass AbstractLongShortMap;\nClass AbstractObjectByteMap<T>;\nClass AbstractObjectCharMap<T>;\nClass AbstractObjectDoubleMap<T>;\nClass AbstractObjectFloatMap<T>;\nClass AbstractObjectIntMap<T>;\nClass AbstractObjectLongMap<T>;\nClass AbstractObjectShortMap<T>;\nClass AbstractShortByteMap;\nClass AbstractShortCharMap;\nClass AbstractShortDoubleMap;\nClass AbstractShortFloatMap;\nClass AbstractShortIntMap;\nClass AbstractShortLongMap;\nClass AbstractShortObjectMap<T>;\nClass AbstractShortShortMap;\nClass HashFunctions; // Provides various hash functions.\n", "des": "Automatically growing and shrinking maps holding objects or primitive data types such as int, double, etc."}
{"index": 3339, "repo": "opencms-core-15.0", "code": "package sitemanager;\n\nClass CmsCreateSiteThread; // Report thread to save site configurations.\nClass CmsDeleteSiteDialog; // Dialog for deleting Sites.\nClass CmsEditSiteForm; // Class for the Form to edit or add a site.\nClass CmsGlobalForm; // Class for the Global configuration dialog.\nClass CmsSiteManager; // Manager class for the Site manager app.\nClass CmsSiteManagerConfiguration; // Configuration class for the site management app.\nClass CmsSitesTable; // Class to create Vaadin Table object with all available sites.\nClass CmsSitesWebserverThread; // Executes a script file.\nClass CmsWebServerConfigForm; // Class for the Web server configuration form and execution of script.\nClass CmsWorkplaceServerWidget; // Layout for workplace server configuration.\nEnum CmsSitesTable.TableProperty; // Table properties.\n", "des": "Contains classes of the site manager app."}
{"index": 1664, "repo": "jena-core-4.9.0", "code": "package util;\n\npackage util.iterator; // A package for defining useful iterators and iterator operations, including concatenation, mapping, filtering, empty and singleton iterators, iterator wrappers, and the ExtendedIterator class used in many places in Jena.\npublic abstract class CharEncoding extends Object; // This class provides a number of static methods which interact with java.nio.charset.Charset to analyze and transform the strings identifying character encodings.\npublic class CollectionFactory extends Object; // CollectionFactory - a central place for allocating sets and maps, mostly so that it's easy to plug in new implementations (eg trove).\npublic interface FileManager;\npublic class FileManagerImpl extends Object implements FileManager; // FileManager A FileManager provides access to named file-like resources by opening InputStreams to things in the filing system, by URL (http: and file:) and found by the classloader.\npublic class FileUtils extends Object;\npublic class IteratorCollection extends Object;\npublic class JenaXMLInput extends Object; // Create XML input methods.\npublic class LocationMapper extends Object; // Alternative locations for URIs.\npublic interface Locator; // Interface to things that open streams by some string reference\n@Deprecated public class LocatorClassLoader extends Object implements Locator;\n@Deprecated public class LocatorFile extends Object implements Locator;\n@Deprecated public class LocatorURL extends Object implements Locator;\n@Deprecated public class LocatorZip extends Object implements Locator;\npublic abstract class ModelCollector extends Object implements IdentityFinishCollector.UnorderedIdentityFinishCollector<Model,Model>;\npublic static class ModelCollector.ConcurrentModelCollector extends ModelCollector implements IdentityFinishCollector.ConcurrentUnorderedIdentityFinishCollector<Model,Model>;\npublic static class ModelCollector.IntersectionModelCollector extends ModelCollector;\npublic static class ModelCollector.UnionModelCollector extends ModelCollector;\npublic class MonitorGraph extends WrappedGraph; // Graph wrapper which provides normal access to an underlying graph but also maintains a snapshot of the triples it was last known to contain.\npublic class MonitorModel extends ModelCom; // Model wrapper which provides normal access to an underlying model but also maintains a snapshot of the triples it was last known to contain.\n", "des": "Miscellaneous collection of utility classes."}
{"index": 3236, "repo": "opencms-core-15.0", "code": "package configuration;\n\npackage configuration.formatters; // Classes for handling formatter configurations.\nInterface I_CmsConfigurationObject<X extends I_CmsConfigurationObject<X>>; // Interface for a single named configuration object that can either be merged with other configuration objects or disable a configuration object with the same name.\nInterface I_CmsGlobalConfigurationCache; // This is interface is intended to be used in combination with the CmsGlobalConfigurationCacheEventHandler class.\nClass CmsADEConfigCacheState; // An immutable object which represents the complete ADE configuration (sitemap and module configurations) at a certain instant in time.\nClass CmsADEConfigData; // A class which represents the accessible configuration data at a given point in a sitemap.\nClass CmsADEConfigDataInternal; // Represents a parsed sitemap or module configuration.\nClass CmsADEConfigDataInternal.AttributeValue; // Represents the value of an attribute, with additional information about where the value originated from.\nClass CmsADEConfigurationSequence; // Represents a sequence of inherited module/sitemap configurations, together with an index into that list.\nClass CmsADEManager; // This is the main class used to access the ADE configuration and also accomplish some other related tasks like loading/saving favorite and recent lists.\nClass CmsConfigurationReader; // A class to parse ADE sitemap or module configuration files and create configuration objects from them.\nClass CmsContentFolderDescriptor; // A bean which represents the location configured for content elements of a specific type in a sitemap configuration.\nClass CmsDetailNameCache; // A cache which stores structure ids for URL names.\nClass CmsElementView; // Represents a element view for the container page editor.\nClass CmsElementView.ElementViewComparator; // The element view comparator.\nClass CmsFormatterUtils; // Helper class for formatter-related functionality.\nClass CmsFunctionAvailability; // Helper class for computing dynamic function availability based on sitemap configuration settings.\nClass CmsFunctionReference; // Bean for representing a named dynamic function reference from the configuration.\nClass CmsGlobalConfigurationCacheEventHandler; // This event handler manages cache instances which are instances of the interface I_CmsGlobalConfigurationCache.\nClass CmsModelPageConfig; // This class contains the model page configuration for a sitemap region.\nClass CmsModelPageConfigWithoutResource; // This class contains the model page configuration for a sitemap region, without the actual resource.\n", "des": "Contains the ade configuration classes."}
{"index": 175, "repo": "ignite-core-2.15.0", "code": "package request;\n\nClass DataStructuresRequest;\nClass GridRestAuthenticationRequest; // Grid authentication request.\nClass GridRestBaselineRequest; // Grid command topology request.\nClass GridRestCacheRequest; // Cache command request descriptor.\nClass GridRestChangeStateRequest;\nClass GridRestClusterNameRequest; // Grid command request of cluster name.\nClass GridRestClusterStateRequest;\nClass GridRestLogRequest; // Grid command request of log file.\nClass GridRestNodeStateBeforeStartRequest; // Request to manage and obtain information about node before its start.\nClass GridRestRequest; // Grid command request.\nClass GridRestTaskRequest; // Grid task command request.\nClass GridRestTopologyRequest; // Grid command topology request.\nClass GridRestWarmUpRequest; // Grid warm-up request.\nClass RestQueryRequest; // Sql query request.\nClass RestUserActionRequest; // User request.\nEnum RestQueryRequest.QueryType; // Supported query types.\n", "des": "REST requests."}
{"index": 3801, "repo": "lucene-analysis-common-9.7.0", "code": "package ne;\n\nClass NepaliAnalyzer; // Analyzer for Nepali.\n", "des": "Analyzer for Nepali."}
{"index": 2470, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package properties;\n\npublic class PropertiesConfigAdapter<T> extends Object; // Base class for properties to config adapters.\npublic abstract class PushRegistryProperties extends Object; // Base class for properties that configure a metrics registry that pushes aggregated metrics on a regular interval.\npublic abstract class PushRegistryPropertiesConfigAdapter<T extends PushRegistryProperties> extends PropertiesConfigAdapter<T> implements io.micrometer.core.instrument.push.PushRegistryConfig; // Base class for PushRegistryProperties to PushRegistryConfig adapters.\npublic abstract class StepRegistryProperties extends PushRegistryProperties; // PushRegistryProperties extensions for registries that are step-normalized.\npublic abstract class StepRegistryPropertiesConfigAdapter<T extends StepRegistryProperties> extends PushRegistryPropertiesConfigAdapter<T>; // Base class for StepRegistryProperties to StepRegistryConfig adapters.\n", "des": "Base properties and adapters used when exporting actuator metrics."}
{"index": 3077, "repo": "spring-ws-core-4.0.5", "code": "package messageid;\n\npublic interface MessageIdStrategy; // Strategy interface that encapsulates the creation and validation of WS-Addressing MessageIDs.\npublic class UuidMessageIdStrategy extends Object implements MessageIdStrategy; // Implementation of the MessageIdStrategy interface that uses a UUID to generate a Message Id.\n", "des": "Contains various strategies for generating WS-Addressing MessageIDs."}
{"index": 2842, "repo": "spring-integration-core-6.1.2", "code": "package aggregator;\n\npublic abstract class AbstractAggregatingMessageGroupProcessor extends Object implements MessageGroupProcessor, org.springframework.beans.factory.BeanFactoryAware; // Base class for MessageGroupProcessor implementations that aggregate the group of Messages into a single Message.\npublic abstract class AbstractCorrelatingMessageHandler extends AbstractMessageProducingHandler implements DiscardingMessageHandler, org.springframework.context.ApplicationEventPublisherAware, ManageableLifecycle; // Abstract Message handler that holds a buffer of correlated messages in a MessageStore.\nprotected static class AbstractCorrelatingMessageHandler.SequenceAwareMessageGroup extends SimpleMessageGroup;\npublic class AggregatingMessageHandler extends AbstractCorrelatingMessageHandler; // Aggregator specific implementation of AbstractCorrelatingMessageHandler.\npublic class BarrierMessageHandler extends AbstractReplyProducingMessageHandler implements MessageTriggerAction, DiscardingMessageHandler; // A message handler that suspends the thread until a message with corresponding correlation is passed into the trigger method or the timeout occurs.\npublic class CorrelatingMessageBarrier extends AbstractMessageHandler implements MessageSource<Object>; // This Endpoint serves as a barrier for messages that should not be processed yet.\n@FunctionalInterface public interface CorrelationStrategy; // Strategy for determining how messages can be correlated.\npublic class DefaultAggregateHeadersFunction extends Object implements Function<MessageGroup,Map<String,Object>>; // The Function implementation for a default headers merging in the aggregator component.\npublic class DefaultAggregatingMessageGroupProcessor extends AbstractAggregatingMessageGroupProcessor; // This implementation of MessageGroupProcessor will take the messages from the MessageGroup and pass them on in a single message with a Collection as a payload.\npublic class DelegatingMessageGroupProcessor extends Object implements MessageGroupProcessor, org.springframework.beans.factory.BeanFactoryAware, ManageableLifecycle; // The MessageGroupProcessor implementation with delegation to the provided delegate and optional aggregation for headers.\npublic class ExpressionEvaluatingCorrelationStrategy extends Object implements CorrelationStrategy, org.springframework.beans.factory.BeanFactoryAware; // CorrelationStrategy implementation that evaluates an expression.\npublic class ExpressionEvaluatingMessageGroupProcessor extends AbstractAggregatingMessageGroupProcessor; // A MessageGroupProcessor implementation that evaluates a SpEL expression.\n", "des": "Provides classes related to message aggregation."}
{"index": 1650, "repo": "jena-core-4.9.0", "code": "package impl;\n\npublic abstract class AbstractProfile extends Object implements Profile; // Abstract base class to provide shared implementation for ontology language profiles.\npublic class AllDifferentImpl extends OntResourceImpl implements AllDifferent; // Implementation of the abstraction of axioms that denote the single name assumption.\npublic class AllValuesFromRestrictionImpl extends RestrictionImpl implements AllValuesFromRestriction; // Implementation of the allValuesFrom restriction abstraction.\npublic class AnnotationPropertyImpl extends OntPropertyImpl implements AnnotationProperty; // Implementation for ontology abstraction of annotation property\npublic abstract class BooleanClassDescriptionImpl extends OntClassImpl implements BooleanClassDescription; // Shared implementation for implementations of Boolean clas expressions.\npublic class CardinalityQRestrictionImpl extends QualifiedRestrictionImpl implements CardinalityQRestriction; // Implementation of the exact qualified cardinality restriction\npublic class CardinalityRestrictionImpl extends RestrictionImpl implements CardinalityRestriction; // Implementation of the cardinality restriction abstraction.\npublic class ComplementClassImpl extends OntClassImpl implements ComplementClass; // Implementation of a node representing a complement class description.\npublic class DataRangeImpl extends OntResourceImpl implements DataRange; // Default implementation of the interface that defines a closed enumeration of concrete values for the range of a property.\npublic class DatatypePropertyImpl extends OntPropertyImpl implements DatatypeProperty; // Implementation of the datatype property abstraction\npublic class EnumeratedClassImpl extends OntClassImpl implements EnumeratedClass; // Implementation of a node representing an enumerated class description.\npublic class FunctionalPropertyImpl extends OntPropertyImpl implements FunctionalProperty; // Implementation of the functional property abstraction\npublic class HasValueRestrictionImpl extends RestrictionImpl implements HasValueRestriction; // Implementation of the hasValue restriction abstraction.\npublic class IndividualImpl extends OntResourceImpl implements Individual; // Implementation for the ontology abstraction representing ontology class descriptions.\npublic class IntersectionClassImpl extends BooleanClassDescriptionImpl implements IntersectionClass; // Implementation of a node representing an intersection class description.\npublic class InverseFunctionalPropertyImpl extends ObjectPropertyImpl implements InverseFunctionalProperty; // Implementation of the functional property abstraction\npublic class MaxCardinalityQRestrictionImpl extends QualifiedRestrictionImpl implements MaxCardinalityQRestriction; // Implementation of the max qualified cardinality restriction\npublic class MaxCardinalityRestrictionImpl extends RestrictionImpl implements MaxCardinalityRestriction; // Implementation of the max cardinality restriction abstraction.\n", "des": "Provides default implementations for the abstractions defined in the org.apache.jena.ontology package."}
{"index": 412, "repo": "spring-social-core-1.1.6.RELEASE", "code": "package support;\n\nClass BufferingClientHttpResponse;\nClass ClientHttpRequestFactorySelector; // Chooses a request factory.\nClass ClientHttpRequestFactorySelector.HttpComponentsClientRequestFactoryCreator;\nClass FormMapHttpMessageConverter; // Message converter that reads form-encoded data into a flat Map<String, String>.\nClass HttpRequestDecorator; // Extension of HttpRequestWrapper that supports adding new HttpHeaders to the wrapped HttpRequest.\nClass LoggingErrorHandler;\nClass ParameterMap; // Generally useful base class for creating MultiValueMaps that store HTTP query parameters.\nClass URIBuilder; // Builds up a URI from individual URI components.\nClass URIBuilderException; // Exception thrown when URIBuilder can't build the specified URI.\n", "des": "Internal utilities and helpers used by the Spring Social core module."}
{"index": 689, "repo": "jackson-databind-2.15.2", "code": "package jsonschema;\n\nInterface SchemaAware; // Since 2.15, we recommend use of external JSON Schema generator module\nClass JsonSchema; // Since 2.2, we recommend use of external JSON Schema generator module\nAnnotation Type JsonSerializableSchema; // Since 2.15, we recommend use of external JSON Schema generator module\n", "des": "Classes needed for JSON schema support (currently just ability to generate schemas using serialization part of data mapping)"}
{"index": 3797, "repo": "lucene-analysis-common-9.7.0", "code": "package lt;\n\nClass LithuanianAnalyzer; // Analyzer for Lithuanian.\n", "des": "Analyzer for Lithuanian."}
{"index": 3597, "repo": "lucene-test-framework-9.7.0", "code": "package similarities;\n\nClass AssertingSimilarity; // wraps a similarity with checks for testing\nClass BaseSimilarityTestCase; // Abstract class to do basic tests for a similarity.\nClass RandomSimilarity; // Similarity implementation that randomizes Similarity implementations per-field.\n", "des": "Support for testing similarities."}
{"index": 984, "repo": "spring-ws-3.0.10.RELEASE", "code": "package annotation;\n\nEnum FaultCode; // Enumeration that represents the standard SOAP Fault codes for use with the JDK 1.5+ SoapFault annotation.\nAnnotation Type SoapAction; // Marks an endpoint method as the handler for an incoming request.\nAnnotation Type SoapActions; // Marks an endpoint method as containing multiple SoapActions.\nAnnotation Type SoapFault; // Marks an exception class with the fault elements that should be returned whenever this exception is thrown.\nAnnotation Type SoapHeader; // Marks an endpoint method parameter to be resolved as a single or a list of SoapHeaderElement.\n", "des": "JDK 1.5+ annotations for Spring-WS SOAP endpoints."}
{"index": 2452, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package amqp;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnClass({com.rabbitmq.client.ConnectionFactory.class,org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.class}) @ConditionalOnBean({org.springframework.amqp.rabbit.connection.ConnectionFactory.class,io.micrometer.core.instrument.MeterRegistry.class}) public class RabbitMetricsAutoConfiguration extends Object; // Auto-configuration for metrics on all available connection factories.\n", "des": "Auto-configuration for RabbitMQ metrics."}
{"index": 2230, "repo": "spring-data-commons-3.1.2", "code": "package type;\n\npackage type.classreading; // Support classes for reading annotation and class-level metadata.\n@Deprecated public interface MethodsMetadata extends ClassMetadata;\n", "des": "Core support package for type introspection."}
{"index": 3387, "repo": "commons-imaging-1.0-alpha3", "code": "package bytesource;\n\nClass ByteSource;\nClass ByteSourceArray;\nClass ByteSourceFile;\nClass ByteSourceInputStream;\n", "des": "Encapsulates sources from which data may be read."}
{"index": 266, "repo": "nutch-2.4", "code": "package metadata;\n\nClass MetadataIndexer; // Indexer which can be configured to extract metadata from the crawldb, parse metadata or content metadata.\n", "des": "Indexing filter to add document metadata to the index."}
{"index": 184, "repo": "ignite-core-2.15.0", "code": "package ipc;\n\npackage ipc.loopback; // Loopback IPC utility classes.\nInterface IpcEndpoint; // IPC endpoint used for point-to-point communication.\nInterface IpcServerEndpoint; // IPC server endpoint that is capable for client connections accepting.\nClass IpcEndpointFactory; // endpoint factory for inter-process communication.\nClass IpcToNioAdapter<T>; // Allows to re-use existing GridNioFilters on IPC (specifically shared memory IPC) communications.\nEnum IpcEndpointType; // IPC endpoint type.\nClass IpcEndpointBindException; // Represents exception occurred during IPC endpoint binding.\n", "des": "IPC utility classes."}
{"index": 2809, "repo": "spring-integration-ip-6.1.2", "code": "package config;\n\npublic abstract class IpAdapterParserUtils extends Object; // Utility methods and constants for IP adapter parsers.\npublic class IpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for Spring Integration's ip namespace.\npublic class TcpConnectionFactoryFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<AbstractConnectionFactory> implements org.springframework.context.Lifecycle, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.ApplicationContextAware; // Instantiates a TcpN(et|io)(Server|Client)ConnectionFactory, depending on type and using-nio attributes.\npublic class TcpConnectionFactoryParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;\npublic class TcpInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser; // Channel Adapter that receives TCP stream frames and maps them to Messages.\npublic class TcpInboundGatewayParser extends org.springframework.integration.config.xml.AbstractInboundGatewayParser;\npublic class TcpOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\npublic class TcpOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the <outbound-gateway> element of the integration 'jms' namespace.\npublic class UdpInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser; // Channel Adapter that receives UDP datagram packets and maps them to Messages.\npublic class UdpOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers, factory beans."}
{"index": 229, "repo": "nutch-2.4", "code": "package model;\n\nClass NutchConfig;\nClass NutchInstance;\nClass SeedList;\nClass SeedUrl;\n", "des": "Contains model classes for Web UI"}
{"index": 3831, "repo": "lucene-highlighter-9.7.0", "code": "package matchhighlight;\n\nInterface MatchHighlighter.FieldValueHighlighter; // Actual per-field highlighter.\nInterface MatchRegionRetriever.FieldValueProvider; // An abstraction that provides document values for a given field.\nInterface MatchRegionRetriever.MatchOffsetsConsumer; // A callback for accepting a single document (and its associated leaf reader, leaf document ID) and its match offset ranges, as indicated by the Matches interface retrieved for the query.\nInterface OffsetsRetrievalStrategy; // Determines how match offset regions are computed from MatchesIterator.\nInterface OffsetsRetrievalStrategySupplier; // A per-field supplier of OffsetsRetrievalStrategy.\nInterface PassageAdjuster; // Adjusts the range of one or more passages over a given value.\nClass BreakIteratorShrinkingAdjuster; // A PassageAdjuster that adjusts the Passage range to word boundaries hinted by the given BreakIterator.\nClass FieldValueHighlighters; // A factory of MatchHighlighter.FieldValueHighlighter classes that cover typical use cases (verbatim values, highlights, abbreviations).\nClass MatchHighlighter; // An example highlighter that combines several lower-level highlighting utilities in this package into a fully featured, ready-to-use component.\nClass MatchHighlighter.DocHighlights; // Single document's highlights.\nClass MatchHighlighter.QueryOffsetRange; // An OffsetRange of a match, together with the source query that caused it.\nClass MatchRegionRetriever; // Utility class to compute a list of \"match regions\" for a given query, searcher and document(s) using Matches API.\nClass OffsetRange; // A non-empty range of offset positions.\nClass OffsetsFromMatchIterator; // This strategy retrieves offsets directly from MatchesIterator, if they are available, otherwise it falls back to using OffsetsFromPositions.\nClass OffsetsFromPositions; // This strategy applies to fields with stored positions but no offsets.\nClass OffsetsFromTokens; // This strategy works for fields where we know the match occurred but there are no known positions or offsets.\nClass OffsetsFromValues; // This strategy works for fields where we know the match occurred but there are no known positions or offsets.\nClass Passage; // A passage is a fragment of source text, scored and possibly with a list of sub-offsets (markers) to be highlighted.\n", "des": "This package contains several components useful to build a highlighter on top of the Matches API."}
{"index": 1474, "repo": "spring-shell-core-3.1.2", "code": "package shell;\n\npackage shell.jline; // Contains classes that leverage the JLine library to hook into the Spring Shell REPL.\npackage shell.result; // Contains strategies for dealing with results of commands.\npublic class Availability extends Object; // Indicates whether or not a command is currently available.\n@FunctionalInterface public interface AvailabilityProvider extends Supplier<Availability>; // Interface resolving Availability.\npublic final class AvailabilityReflectiveProcessor extends Object implements org.springframework.aot.hint.annotation.ReflectiveProcessor; // A ReflectiveProcessor implementation that registers methods of a return type Availability from a target which is a class.\npublic interface Command;\npublic static class Command.Help extends Object; // Encapsulates help metadata about a shell command.\npublic class CommandNotCurrentlyAvailable extends RuntimeException; // Indicates that a command exists but is currently not invokable.\npublic class CommandNotFound extends RuntimeException; // A result to be handled by the ResultHandler when no command could be mapped to user input\n@FunctionalInterface public interface CompletingParsedLine; // An extension of ParsedLine that, being aware of the quoting and escaping rules of the Parser that produced it, knows if and how a completion candidate should be escaped/quoted.\npublic class CompletionContext extends Object; // Represents the buffer context in which completion was triggered.\npublic class CompletionProposal extends Object; // Represents a proposal for TAB completion, made not only of the text to append, but also metadata about the proposal.\n@Order(0) public class DefaultShellApplicationRunner extends Object implements ShellApplicationRunner; // Default ShellApplicationRunner which dispatches to the first ordered ShellRunner able to handle the shell.\npublic class ExitRequest extends RuntimeException; // This exception, when thrown and caught, will ask the shell to gracefully shutdown.\npublic interface Input; // Represents the input buffer to the shell.\npublic interface InputProvider; // To be implemented by components able to provide a \"line\" of user input, whether interactively or by batch.\npublic class JnaRuntimeHints extends Object implements org.springframework.aot.hint.RuntimeHintsRegistrar;\npublic interface MethodTargetRegistrar; // Strategy interface for registering commands.\npublic class ParameterResolverMissingException extends RuntimeException; // Thrown when no ParameterResolver is found for a parameter during a resolve operation.\n", "des": "Contains core classes for Spring Shell, irrespective of the way commands are actually implemented."}
{"index": 2037, "repo": "spring-messaging-6.0.11", "code": "package annotation;\n\npackage annotation.support; // Support classes for handling messages from simple messaging protocols (like STOMP).\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface SendToUser; // Indicates the return value of a message-handling method should be sent as a Message to the specified destination(s) further prepended with \"/user/{username}\" where the user name is extracted from the headers of the input message being handled.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Reflective(MessageMappingReflectiveProcessor.class) public @interface SubscribeMapping; // Annotation for mapping subscription messages onto specific handler methods based on the destination of a subscription.\n", "des": "Annotations and for handling messages from SImple Messaging Protocols such as STOMP."}
{"index": 3313, "repo": "opencms-core-15.0", "code": "package galleries;\n\nClass CmsGalleryNameMacroResolver; // Macro resolver used to resolve macros for the gallery name mapping.\nClass CmsGallerySearch; // Contains the functions for the gallery search.\nClass CmsGallerySearchParameters; // Parameters used for the gallery search index.\nClass CmsGallerySearchResult;\nClass CmsGallerySearchResultList; // The search result list for the gallery search index.\nEnum CmsGallerySearchParameters.CmsGallerySortParam; // Sort parameter constants.\n", "des": "Implements the search functions for the OpenCms Gallery search index, which is used by the Advanced Direct Edit (ADE) functions."}
{"index": 604, "repo": "org.apache.karaf.main-2.4.4", "code": "package service;\n\nInterface EventHook; // As of 1.1.\nInterface EventListenerHook; // OSGi Framework Service Event Listener Hook Service.\nInterface FindHook; // OSGi Framework Service Find Hook Service.\nInterface ListenerHook; // OSGi Framework Service Listener Hook Service.\nInterface ListenerHook.ListenerInfo; // Information about a Service Listener.\n", "des": "Framework Service Hooks Package Version 1.1."}
{"index": 378, "repo": "zookeeper-jute-3.8.2", "code": "package generated;\n\nInterface RccConstants; // Token literal values and constants.\nClass Rcc;\nClass RccTokenManager; // Token Manager.\nClass SimpleCharStream; // An implementation of interface CharStream, where the stream is assumed to contain only ASCII characters (without unicode processing).\nClass Token; // Describes the input token stream.\nClass ParseException; // This exception is thrown when parse errors are encountered.\nClass TokenMgrError; // Token Manager Error.\n", "des": "This package contains code generated by JavaCC from the Hadoop record syntax file rcc.jj."}
{"index": 3058, "repo": "spring-ws-core-4.0.5", "code": "package config;\n\npublic class WebServicesNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for the 'web-services' namespace.\n", "des": "Provides an namespace handler for the Spring Web Services namespace."}
{"index": 580, "repo": "commons-collections-3.2.2", "code": "package functors;\n\nInterface PredicateDecorator; // Defines a predicate that decorates one or more other predicates.\nClass AllPredicate; // Predicate implementation that returns true if all the predicates return true.\nClass AndPredicate; // Predicate implementation that returns true if both the predicates return true.\nClass AnyPredicate; // Predicate implementation that returns true if any of the predicates return true.\nClass ChainedClosure; // Closure implementation that chains the specified closures together.\nClass ChainedTransformer; // Transformer implementation that chains the specified transformers together.\nClass CloneTransformer; // Transformer implementation that returns a clone of the input object.\nClass ClosureTransformer; // Transformer implementation that calls a Closure using the input object and then returns the input.\nClass ConstantFactory; // Factory implementation that returns the same constant each time.\nClass ConstantTransformer; // Transformer implementation that returns the same constant each time.\nClass EqualPredicate; // Predicate implementation that returns true if the input is the same object as the one stored in this predicate by equals.\nClass ExceptionClosure; // Closure implementation that always throws an exception.\nClass ExceptionFactory; // Factory implementation that always throws an exception.\nClass ExceptionPredicate; // Predicate implementation that always throws an exception.\nClass ExceptionTransformer; // Transformer implementation that always throws an exception.\nClass FactoryTransformer; // Transformer implementation that calls a Factory and returns the result.\nClass FalsePredicate; // Predicate implementation that always returns false.\nClass ForClosure; // Closure implementation that calls another closure n times, like a for loop.\nClass IdentityPredicate; // Predicate implementation that returns true if the input is the same object as the one stored in this predicate.\nClass IfClosure; // Closure implementation acts as an if statement calling one or other closure based on a predicate.\nClass InstanceofPredicate; // Predicate implementation that returns true if the input is an instanceof the type stored in this predicate.\nClass InstantiateFactory; // Factory implementation that creates a new object instance by reflection.\nClass InstantiateTransformer; // Transformer implementation that creates a new object instance by reflection.\nClass InvokerTransformer; // Transformer implementation that creates a new object instance by reflection.\nClass MapTransformer; // Transformer implementation that returns the value held in a specified map using the input parameter as a key.\nClass NonePredicate; // Predicate implementation that returns true if none of the predicates return true.\nClass NOPClosure; // Closure implementation that does nothing.\n", "des": "This package contains implementations of the Closure, Predicate, Transformer and Factory interfaces."}
{"index": 3271, "repo": "opencms-core-15.0", "code": "package types;\n\nInterface I_CmsResourceType; // Resource type descriptors for all resources in the VFS.\nClass A_CmsResourceType; // Base implementation for resource type classes.\nClass A_CmsResourceTypeFolderBase; // Resource type descriptor for the type \"folder\".\nClass A_CmsResourceTypeLinkParseable; // Base implementation for resource types implementing the I_CmsLinkParseable interface.\nClass CmsResourceTypeBinary; // Resource type descriptor for the type \"binary\".\nClass CmsResourceTypeFolder; // Resource type descriptor for the type \"folder\".\nClass CmsResourceTypeFolderExtended; // Resource type descriptor for extended folder types (like for example the workplace galleries).\nClass CmsResourceTypeFolderSubSitemap; // Resource type descriptor for sub site map folder types.\nClass CmsResourceTypeFunctionConfig; // Resource type class for the second version of dynamic functions.\nClass CmsResourceTypeHtmlRedirect; // The HTML redirect resource type.\nClass CmsResourceTypeImage; // Resource type descriptor for the type \"image\".\nClass CmsResourceTypeImage.CmsImageAdjuster; // A data container for image size and scale operations.\nClass CmsResourceTypeJsp; // Resource type descriptor for the type \"jsp\".\nClass CmsResourceTypeLocaleIndependentXmlContent; // Special resource type for locale independent XML contents.\nClass CmsResourceTypeMacroFormatter; // The macro formatter resource type.\nClass CmsResourceTypePlain; // Resource type descriptor for the type \"plain\".\nClass CmsResourceTypePointer; // Resource type descriptor for the type \"pointer\".\nClass CmsResourceTypeSeoFile; // The SEO file resource type.\nClass CmsResourceTypeSubsitemapContentFolder; // Content type class for subsitemap content folders.\nClass CmsResourceTypeUnknown; // Resource type descriptor used in case the given resource type class in the XML configuration could not be instantiated.\nClass CmsResourceTypeUnknownFile; // Resource type descriptor for unknown file types.\nClass CmsResourceTypeUnknownFolder; // Resource type descriptor for unknown folder types.\nClass CmsResourceTypeXmlAdeConfiguration; // Custom resource type for ADE configurations.\nClass CmsResourceTypeXmlContainerPage; // Resource type descriptor for the type \"containerpage\".\nClass CmsResourceTypeXmlContent; // Resource type descriptor for the type \"xmlcontent\".\nClass CmsResourceTypeXmlPage; // Resource type descriptor for the type \"xmlpage\".\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum I_CmsResourceType.Formatter; // Resource formatter.\n", "des": "The implementations of the core resource types for the VFS are located here."}
{"index": 144, "repo": "ignite-core-2.15.0", "code": "package failover;\n\nClass GridFailoverContextImpl; // GridFailoverContext implementation.\nClass GridFailoverManager; // Grid failover spi manager.\n", "des": "TODO."}
{"index": 591, "repo": "org.apache.karaf.main-2.4.4", "code": "package datalocation;\n\nInterface Location; // A Location represents a URL which may have a default value, may be read only, may or may not have a current value and may be cascaded on to a parent location.\n", "des": "Provides the Location service."}
{"index": 516, "repo": "commons-vfs2-2.9.0", "code": "package bzip2;\n\nClass Bzip2FileObject; // the bzip2 file.\nClass Bzip2FileProvider; // Provides access to the content of bzip2 compressed files.\nClass Bzip2FileSystem; // Filesytem to handle compressed files using the bzip2 method.\n", "des": "The BZIP2 File Provider"}
{"index": 1935, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package hateoas;\n\n@ConfigurationProperties(prefix=\"spring.hateoas\") public class HateoasProperties extends Object; // properties for Spring HATEOAS.\n@AutoConfiguration(after={WebMvcAutoConfiguration.class,JacksonAutoConfiguration.class,HttpMessageConvertersAutoConfiguration.class,RepositoryRestMvcAutoConfiguration.class}) @ConditionalOnClass({org.springframework.hateoas.EntityModel.class,org.springframework.web.bind.annotation.RequestMapping.class,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.class,org.springframework.plugin.core.Plugin.class}) @ConditionalOnWebApplication @EnableConfigurationProperties(HateoasProperties.class) public class HypermediaAutoConfiguration extends Object; // Auto-configuration for Spring HATEOAS's @EnableHypermediaSupport.\n@Configuration(proxyBeanMethods=false) @ConditionalOnMissingBean(org.springframework.hateoas.client.LinkDiscoverers.class) @ConditionalOnClass(com.fasterxml.jackson.databind.ObjectMapper.class) @EnableHypermediaSupport(type=HAL) protected static class HypermediaAutoConfiguration.HypermediaConfiguration extends Object;\n", "des": "Auto-configuration for Spring HATEOAS."}
{"index": 1257, "repo": "spring-core-6.0.11", "code": "package nativex;\n\npublic class FileNativeConfigurationWriter extends NativeConfigurationWriter; // A NativeConfigurationWriter implementation that writes the configuration to disk.\npublic abstract class NativeConfigurationWriter extends Object; // Write RuntimeHints as GraalVM native configuration.\n", "des": "Support for generating GraalVM native configuration from runtime hints."}
{"index": 2243, "repo": "spring-data-keyvalue-3.1.2", "code": "package event;\n\npublic class KeyValueEvent<T> extends ApplicationEvent; // KeyValueEvent gets published for operations executed by eg.\npublic static class KeyValueEvent.AfterDeleteEvent<T> extends KeyValueEvent<T>; // KeyValueEvent after removing an object by with a given key.\npublic static class KeyValueEvent.AfterDropKeySpaceEvent<T> extends KeyValueEvent<T>; // KeyValueEvent after removing all elements in a given keyspace.\npublic static class KeyValueEvent.AfterGetEvent<T> extends KeyValueEvent<T>; // KeyValueEvent after loading an object by its key.\npublic static class KeyValueEvent.AfterInsertEvent<T> extends KeyValueEvent<T>; // KeyValueEvent after inserting an object by with a given key.\npublic static class KeyValueEvent.AfterUpdateEvent<T> extends KeyValueEvent<T>; // KeyValueEvent after updating an object by with a given key.\npublic static class KeyValueEvent.BeforeDeleteEvent<T> extends KeyValueEvent<T>; // KeyValueEvent before removing an object by with a given key.\npublic static class KeyValueEvent.BeforeDropKeySpaceEvent<T> extends KeyValueEvent<T>; // KeyValueEvent before removing all elements in a given keyspace.\npublic static class KeyValueEvent.BeforeGetEvent<T> extends KeyValueEvent<T>; // KeyValueEvent raised before loading an object by its key.\npublic static class KeyValueEvent.BeforeInsertEvent<T> extends KeyValueEvent<T>; // KeyValueEvent before inserting an object by with a given key.\npublic static class KeyValueEvent.BeforeUpdateEvent<T> extends KeyValueEvent<T>; // KeyValueEvent before updating an object by with a given key.\n", "des": "Support classes for key-value events, like standard persistence lifecycle events."}
{"index": 766, "repo": "lucene-analyzers-common-8.11.2", "code": "package hyphenation;\n\nInterface PatternConsumer; // This interface is used to connect the XML pattern file parser to the hyphenation tree.\nClass ByteVector; // This class implements a simple byte vector with access to the underlying array.\nClass CharVector; // This class implements a simple char vector with access to the underlying array.\nClass Hyphen; // This class represents a hyphen.\nClass Hyphenation; // This class represents a hyphenated word.\nClass HyphenationTree; // This tree structure stores the hyphenation patterns in an efficient way for fast lookup.\nClass PatternParser; // A SAX document handler to read and parse hyphenation patterns from a XML file.\nClass TernaryTree; // Ternary Search Tree.\n", "des": "Hyphenation code for the CompoundWordTokenFilter."}
{"index": 1679, "repo": "spring-oxm-6.0.11", "code": "package mime;\n\npublic interface MimeContainer; // Represents a container for MIME attachments Concrete implementations might adapt a SOAPMessage or an email message.\npublic interface MimeMarshaller extends Marshaller; // Subinterface of Marshaller that can use MIME attachments to optimize storage of binary data.\npublic interface MimeUnmarshaller extends Unmarshaller; // Subinterface of Unmarshaller that can use MIME attachments to optimize storage of binary data.\n", "des": "Contains (un)marshallers optimized to store binary data in MIME attachments."}
{"index": 629, "repo": "freemarker-2.3.32", "code": "package util;\n\nInterface ModelFactory; // Interface used to create various wrapper models in the ModelCache.\nInterface WrapperTemplateModel; // A generic interface for template models that wrap some underlying object, and wish to provide access to that wrapped object.\nClass IdentityHashMap; // Use IdentityHashMap instead.\nClass ModelCache; // Internally used by various wrapper implementations to implement model caching.\n", "des": "Various classes used by freemarker.ext but might be useful outside it too."}
{"index": 1312, "repo": "groovy-all-4.0.13", "code": "package model;\n\npublic class ClosureModel extends Object implements ValueModel, NestedValueModel; // Represents a value model using a closure to extract the value from some source model and an optional write closure for updating the value.\npublic class DefaultTableColumn extends TableColumn; // Represents a column using a ValueModel to extract the value.\npublic class DefaultTableModel extends AbstractTableModel; // A default table model made up of PropertyModels on a Value model.\nprotected static class DefaultTableModel.MyTableColumnModel extends DefaultTableColumnModel;\npublic class FormModel extends Object; // Represents a number of field models which can be ValueModel, PropertyModel, TableModel, TreeModel or nested FormModel instances\npublic interface NestedValueModel; // Represents a nested value model such as a PropertyModel or a ClosureModel\npublic class PropertyModel extends Object implements ValueModel, NestedValueModel; // Represents a property of a value as a model.\npublic class ValueHolder extends Object implements ValueModel; // A simple ValueModel implementation which is a holder of an object value.\npublic interface ValueModel; // Represents a model of a value\n", "des": "An MVC model package for working with user interfaces and data structures and arbitrary Java and Groovy objects"}
{"index": 546, "repo": "spring-mobile-device-1.1.5.RELEASE", "code": "package util;\n\nClass ResolverUtils; // Static helper for determining how to handle the combination of device and site preference.\n", "des": "Spring Mobile utilities"}
{"index": 217, "repo": "nutch-2.4", "code": "package scoring;\n\npackage scoring.link; // Scoring filter\npackage scoring.opic; // Scoring filter implementing a variant of the Online Page Importance Computation (OPIC) algorithm.\npackage scoring.tld; // Top Level Domain Scoring plugin.\nInterface ScoringFilter; // A contract defining behavior of scoring plugins.\nClass ScoreDatum;\nClass ScoringFilters; // Creates and caches ScoringFilter implementing plugins.\nClass ScoringFilterException; // Specialized exception for errors during scoring.\n", "des": "The ScoringFilter interface."}
{"index": 3030, "repo": "spring-web-6.0.11", "code": "package support;\n\npublic abstract class AbstractRefreshableWebApplicationContext extends org.springframework.context.support.AbstractRefreshableConfigApplicationContext implements ConfigurableWebApplicationContext, org.springframework.ui.context.ThemeSource; // AbstractRefreshableApplicationContext subclass which implements the ConfigurableWebApplicationContext interface for web environments.\npublic class AnnotationConfigWebApplicationContext extends AbstractRefreshableWebApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry; // WebApplicationContext implementation which accepts component classes as input — in particular @Configuration classes, but also plain @Component classes as well as JSR-330 compliant classes using jakarta.inject annotations.\npublic class ContextExposingHttpServletRequest extends HttpServletRequestWrapper; // HttpServletRequest decorator that makes all Spring beans in a given WebApplicationContext accessible as request attributes, through lazy checking once an attribute gets accessed.\npublic class GenericWebApplicationContext extends org.springframework.context.support.GenericApplicationContext implements ConfigurableWebApplicationContext, org.springframework.ui.context.ThemeSource; // Subclass of GenericApplicationContext, suitable for web environments.\npublic class GroovyWebApplicationContext extends AbstractRefreshableWebApplicationContext implements groovy.lang.GroovyObject; // WebApplicationContext implementation which takes its configuration from Groovy bean definition scripts and/or XML files, as understood by a GroovyBeanDefinitionReader.\npublic class HttpRequestHandlerServlet extends HttpServlet; // Simple HttpServlet that delegates to an HttpRequestHandler bean defined in Spring's root web application context.\npublic class RequestHandledEvent extends org.springframework.context.ApplicationEvent; // Event raised when a request is handled within an ApplicationContext.\npublic class ServletConfigPropertySource extends org.springframework.core.env.EnumerablePropertySource<ServletConfig>; // PropertySource that reads init parameters from a ServletConfig object.\npublic class ServletContextAttributeExporter extends Object implements ServletContextAware; // Exporter that takes Spring-defined objects and exposes them as ServletContext attributes.\npublic class ServletContextAttributeFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Object>, ServletContextAware; // FactoryBean that fetches a specific, existing ServletContext attribute.\npublic class ServletContextAwareProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor; // BeanPostProcessor implementation that passes the ServletContext to beans that implement the ServletContextAware interface.\n", "des": "Classes supporting the org.springframework.web.context package, such as WebApplicationContext implementations and various utility classes."}
{"index": 1537, "repo": "spring-context-6.0.11", "code": "package support;\n\npublic class ConnectorServerFactoryBean extends MBeanRegistrationSupport implements org.springframework.beans.factory.FactoryBean<JMXConnectorServer>, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // FactoryBean that creates a JSR-160 JMXConnectorServer, optionally registers it with the MBeanServer, and then starts it.\npublic abstract class JmxUtils extends Object; // Collection of generic utility methods to support Spring JMX.\npublic class MBeanRegistrationSupport extends Object; // Provides supporting infrastructure for registering MBeans with an MBeanServer.\npublic class MBeanServerConnectionFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<MBeanServerConnection>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // FactoryBean that creates a JMX 1.2 MBeanServerConnection to a remote MBeanServer exposed via a JMXServerConnector.\npublic class MBeanServerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<MBeanServer>, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // FactoryBean that obtains a MBeanServer reference through the standard JMX 1.2 MBeanServerFactory API.\npublic enum MetricType extends Enum<MetricType>; // Represents how the measurement values of a ManagedMetric will change over time.\npublic class NotificationListenerHolder extends Object; // Helper class that aggregates a NotificationListener, a NotificationFilter, and an arbitrary handback object, as well as the names of MBeans from which the listener wishes to receive Notifications.\npublic final class ObjectNameManager extends Object; // Helper class for the creation of ObjectName instances.\npublic enum RegistrationPolicy extends Enum<RegistrationPolicy>; // Indicates registration behavior when attempting to register an MBean that already exists.\n", "des": "Contains support classes for connecting to local and remote MBeanServers and for exposing an MBeanServer to remote clients."}
{"index": 1461, "repo": "spring-data-redis-3.1.2", "code": "package cdi;\n\npublic abstract class CdiBean<T> extends Object implements jakarta.enterprise.inject.spi.Bean<T>, jakarta.enterprise.inject.spi.PassivationCapable; // Base class for Bean wrappers.\npublic class RedisKeyValueAdapterBean extends CdiBean<RedisKeyValueAdapter>; // CdiBean to create RedisKeyValueAdapter instances.\npublic class RedisKeyValueTemplateBean extends CdiBean<org.springframework.data.keyvalue.core.KeyValueOperations>; // CdiBean to create RedisKeyValueTemplate instances.\npublic class RedisRepositoryBean<T> extends CdiRepositoryBean<T>; // CdiRepositoryBean to create Redis repository instances.\npublic class RedisRepositoryExtension extends CdiRepositoryExtensionSupport; // CDI extension to export Redis repositories.\n", "des": "CDI support for Redis specific repository implementation."}
{"index": 509, "repo": "commons-vfs2-2.9.0", "code": "package events;\n\nClass AbstractFileChangeEvent; // A change event that knows how to notify a listener.\nClass ChangedEvent; // File changed event.\nClass CreateEvent; // File creation event.\nClass DeleteEvent; // File deletion event.\n", "des": "VFS Events"}
{"index": 930, "repo": "commons-compress-1.23.0", "code": "package nls;\n\nClass Messages; // This class retrieves strings from a resource bundle and returns them, formatting them with MessageFormat when required.\n", "des": "Internal package."}
{"index": 2296, "repo": "spring-boot-3.1.1", "code": "package event;\n\npublic class ApplicationContextInitializedEvent extends SpringApplicationEvent; // Event published when a SpringApplication is starting up and the ApplicationContext is prepared and ApplicationContextInitializers have been called but before any bean definitions are loaded.\npublic class ApplicationEnvironmentPreparedEvent extends SpringApplicationEvent; // Event published when a SpringApplication is starting up and the Environment is first available for inspection and modification.\npublic class ApplicationFailedEvent extends SpringApplicationEvent; // Event published by a SpringApplication when it fails to start.\npublic class ApplicationPreparedEvent extends SpringApplicationEvent; // Event published as when a SpringApplication is starting up and the ApplicationContext is fully prepared but not refreshed.\npublic class ApplicationReadyEvent extends SpringApplicationEvent; // Event published as late as conceivably possible to indicate that the application is ready to service requests.\npublic class ApplicationStartedEvent extends SpringApplicationEvent; // Event published once the application context has been refreshed but before any application and command line runners have been called.\npublic class ApplicationStartingEvent extends SpringApplicationEvent; // Event published as early as conceivably possible as soon as a SpringApplication has been started - before the Environment or ApplicationContext is available, but after the ApplicationListeners have been registered.\npublic abstract class SpringApplicationEvent extends org.springframework.context.ApplicationEvent; // Base class for ApplicationEvent related to a SpringApplication.\n", "des": "ApplicationEvents triggered by Spring Boot."}
{"index": 2154, "repo": "wicket-core-10.0.0-M1", "code": "package pages;\n\npublic abstract class AbstractErrorPage extends WebPage; // A parent page for all pages that are used to show an error to the user.\npublic class AccessDeniedPage extends AbstractErrorPage; // Page expired error page.\npublic class BrowserInfoForm extends GenericPanel<ClientProperties>; // Form for posting JavaScript properties.\npublic class BrowserInfoPage extends WebPage; // This page uses a form post right after the page has loaded in the browser, using JavaScript or alternative means to detect and pass on settings to the embedded form.\npublic class ExceptionErrorPage extends AbstractErrorPage; // Shows a runtime exception on a nice HTML page.\npublic class InternalErrorPage extends AbstractErrorPage; // Internal error display page.\npublic class PageExpiredErrorPage extends AbstractErrorPage; // Page expired error page.\npublic class RedirectPage extends WebPage; // Page that let the browser redirect.\n", "des": "Default special purpose pages for error and feedback support."}
{"index": 146, "repo": "ignite-core-2.15.0", "code": "package loadbalancer;\n\nClass GridLoadBalancerAdapter; // This adapter allows for graceful exception when load balancer gets marshalled.\nClass GridLoadBalancerManager; // Load balancing manager.\n", "des": "TODO."}
{"index": 3661, "repo": "solr-core-9.3.0", "code": "package loader;\n\nClass CborLoader; // This class can load a single document or a stream of documents in CBOR format this is equivalent of loading a single json documet or an array of json documents\nClass ContentStreamLoader; // Load a ContentStream into Solr\nClass CSVLoader;\nClass CSVLoaderBase;\nClass JavabinLoader; // Update handler which uses the JavaBin format\nClass JsonLoader;\nClass XMLLoader;\n", "des": "ContentStreamLoader implementations for use in ContentStreamHandlerBase implementations"}
{"index": 1399, "repo": "spring-boot-actuator-3.1.1", "code": "package hazelcast;\n\npublic class HazelcastHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for Hazelcast.\n", "des": "Actuator support for Hazelcast."}
{"index": 80, "repo": "ignite-core-2.15.0", "code": "package adaptive;\n\nInterface AdaptiveLoadBalancingSpiMBean; // Management MBean for AdaptiveLoadBalancingSpi SPI.\nInterface AdaptiveLoadProbe; // Pluggable implementation of node load probing.\nClass AdaptiveCpuLoadProbe; // Implementation of node load probing based on CPU load.\nClass AdaptiveJobCountLoadProbe; // Implementation of node load probing based on active and waiting job count.\nClass AdaptiveLoadBalancingSpi; // Load balancing SPI that adapts to overall node performance.\nClass AdaptiveProcessingTimeLoadProbe; // Implementation of node load probing based on total job processing time.\n", "des": "Contains adaptive load balancing SPI."}
{"index": 2099, "repo": "spring-webflux-6.0.11", "code": "package resource;\n\npublic abstract class AbstractFileNameVersionStrategy extends Object implements VersionStrategy; // Abstract base class for filename suffix based VersionStrategy implementations, e.g.\npublic abstract class AbstractPrefixVersionStrategy extends Object implements VersionStrategy; // Abstract base class for VersionStrategy implementations that insert a prefix into the URL path, e.g.\npublic abstract class AbstractResourceResolver extends Object implements ResourceResolver; // Base ResourceResolver providing consistent logging.\npublic class CachingResourceResolver extends AbstractResourceResolver; // A ResourceResolver that resolves resources from a Cache or otherwise delegates to the resolver chain and caches the result.\npublic class CachingResourceTransformer extends Object implements ResourceTransformer; // A ResourceTransformer that checks a Cache to see if a previously transformed resource exists in the cache and returns it if found, or otherwise delegates to the resolver chain and caches the result.\npublic class ContentVersionStrategy extends AbstractFileNameVersionStrategy; // A VersionStrategy that calculates a Hex MD5 hash from the content of the resource and appends it to the file name, e.g.\npublic class CssLinkResourceTransformer extends ResourceTransformerSupport; // A ResourceTransformer implementation that modifies links in a CSS file to match the public URL paths that should be exposed to clients (e.g.\nprotected abstract static class CssLinkResourceTransformer.AbstractLinkParser extends Object implements CssLinkResourceTransformer.LinkParser; // Abstract base class for CssLinkResourceTransformer.LinkParser implementations.\n@FunctionalInterface protected static interface CssLinkResourceTransformer.LinkParser; // Extract content chunks that represent links.\npublic class EncodedResourceResolver extends AbstractResourceResolver; // Resolver that delegates to the chain, and if a resource is found, it then attempts to find an encoded (e.g.\npublic class FixedVersionStrategy extends AbstractPrefixVersionStrategy; // A VersionStrategy that relies on a fixed version applied as a request path prefix, e.g.\npublic interface HttpResource extends org.springframework.core.io.Resource; // Extended interface for a Resource to be written to an HTTP response.\npublic class PathResourceResolver extends AbstractResourceResolver; // A simple ResourceResolver that tries to find a resource under the given locations matching to the request path.\npublic interface ResourceResolver; // A strategy for resolving a request to a server-side resource.\npublic interface ResourceResolverChain; // A contract for invoking a chain of ResourceResolvers where each resolver is given a reference to the chain allowing it to delegate when necessary.\n", "des": "Support classes for serving static resources."}
{"index": 936, "repo": "commons-compress-1.23.0", "code": "package parallel;\n\nInterface InputStreamSupplier; // Supplies input streams.\nInterface ScatterGatherBackingStore; // Store intermediate payload in a scatter-gather scenario.\nInterface ScatterGatherBackingStoreSupplier; // Supplies ScatterGatherBackingStore instances.\nClass FileBasedScatterGatherBackingStore; // ScatterGatherBackingStore that is backed by a path.\n", "des": "Provides common API classes for parallel compression features."}
{"index": 2176, "repo": "spring-security-web-6.1.2", "code": "package intercept;\n\npublic class AuthorizationFilter extends org.springframework.web.filter.GenericFilterBean; // An authorization filter that restricts access to the URL using AuthorizationManager.\npublic class DefaultFilterInvocationSecurityMetadataSource extends Object implements FilterInvocationSecurityMetadataSource; // Default implementation of FilterInvocationDefinitionSource.\npublic interface FilterInvocationSecurityMetadataSource extends org.springframework.security.access.SecurityMetadataSource; // Marker interface for SecurityMetadataSource implementations that are designed to perform lookups keyed on FilterInvocations.\n@Deprecated public class FilterSecurityInterceptor extends org.springframework.security.access.intercept.AbstractSecurityInterceptor implements jakarta.servlet.Filter;\npublic final class RequestAuthorizationContext extends Object; // An HttpServletRequest authorization context.\npublic class RequestKey extends Object;\npublic final class RequestMatcherDelegatingAuthorizationManager extends Object implements org.springframework.security.authorization.AuthorizationManager<jakarta.servlet.http.HttpServletRequest>; // An AuthorizationManager which delegates to a specific AuthorizationManager based on a RequestMatcher evaluation.\npublic static final class RequestMatcherDelegatingAuthorizationManager.Builder extends Object; // A builder for RequestMatcherDelegatingAuthorizationManager.\n", "des": "Enforcement of security for HTTP requests, typically by the URL requested."}
{"index": 3350, "repo": "opencms-core-15.0", "code": "package permissions;\n\nInterface CmsPermissionView.PermissionChangeHandler; // Permission change handler.\nInterface CmsPrincipalSelect.I_PrincipalSelectHandler; // Handles the principal selection.\nInterface I_CmsPrincipalSelect; // Interface for use of CmsPrincipleSelectDialog.\nClass CmsPermissionBean; // Bean for permissions which have changed.\nClass CmsPermissionDialog; // The permission dialog.\nClass CmsPermissionView; // Displays the permission settings for a single principal.\nClass CmsPermissionViewTable; // Table for the ACE Entries.\nClass CmsPrincipalSelect; // The principal select widget.\nClass CmsPrincipalSelectDialog; // Class for the dialog to show the principal table.\nClass CmsPrincipalSelectExtension; // The principal select extension.\nClass CmsPrincipalTable; // Table to selecet principals used in the CmsPrincipalSelect vaadin element.\nEnum CmsPrincipalSelect.PrincipalType; // Type of principal.\nEnum CmsPrincipalSelect.WidgetType; // The widget types.\n", "des": "Contains permission dialog classes."}
{"index": 54, "repo": "ignite-core-2.15.0", "code": "package annotations;\n\nAnnotation Type QueryGroupIndex; // Describes group index.\nAnnotation Type QueryGroupIndex.List; // List of group indexes for type.\nAnnotation Type QuerySqlField; // Annotates fields for SQL queries.\nAnnotation Type QuerySqlField.Group; // Describes group of index and position of field in this group.\nAnnotation Type QuerySqlFunction; // Annotates public static methods in classes to be used in SQL queries as custom functions.\nAnnotation Type QueryTextField; // Annotation for fields to be indexed for full text search using Lucene.\n", "des": "Contains query-related annotations."}
{"index": 541, "repo": "commons-geometry-core-1.0", "code": "package partitioning;\n\npackage partitioning.bsp; // This package contains classes related to Binary Space Partitioning (BSP) trees.\nInterface BoundarySource<C extends HyperplaneConvexSubset<? extends Point<?>>>; // Interface representing an object that can produce region boundaries as a stream of hyperplane convex subsets.\nInterface EmbeddingHyperplane<P extends Point<P>,S extends Point<S>>; // Hyperplane that also embeds a subspace.\nInterface Hyperplane<P extends Point<P>>; // Interface representing a hyperplane, which in a space of dimension n is a subspace of dimension n - 1.\nInterface HyperplaneBoundedRegion<P extends Point<P>>; // Interface representing regions with boundaries defined by hyperplanes or portions of hyperplanes.\nInterface HyperplaneConvexSubset<P extends Point<P>>; // Extension of the HyperplaneSubset interface with the additional restriction that instances represent convex regions of space.\nInterface HyperplaneSubset<P extends Point<P>>; // Interface representing a subset of the points lying in a hyperplane.\nInterface Splittable<P extends Point<P>,S extends Splittable<P,S>>; // Interface representing objects that can be split by Hyperplanes.\nClass AbstractConvexHyperplaneBoundedRegion<P extends Point<P>,S extends HyperplaneConvexSubset<P>>; // Base class for convex hyperplane-bounded regions.\nClass AbstractConvexHyperplaneBoundedRegion.ConvexRegionBoundaryBuilder<P extends Point<P>,S extends HyperplaneConvexSubset<P>>; // Internal class encapsulating the logic for building convex region boundaries from collections of hyperplanes.\nClass AbstractHyperplane<P extends Point<P>>; // Base class for hyperplane implementations.\nClass BoundaryList<P extends Point<P>,S extends HyperplaneConvexSubset<P>>; // Simple implementation of BoundarySource containing boundaries stored in a list.\nClass Split<T>; // Class containing the result of splitting an object with a hyperplane.\nEnum HyperplaneLocation; // Enumeration containing possible locations of a point with respect to a hyperplane.\nEnum SplitLocation; // Enumeration representing the location of a split object with respect to its splitting hyperplane.\n", "des": "This package contains code related to partitioning of spaces by hyperplanes."}
{"index": 135, "repo": "ignite-core-2.15.0", "code": "package managers;\n\npackage managers.checkpoint; // TODO.\npackage managers.collision; // TODO.\npackage managers.communication; // TODO.\npackage managers.deployment; // TODO.\npackage managers.discovery; // TODO.\npackage managers.encryption; // Encryption manager classes.\npackage managers.eventstorage; // TODO.\npackage managers.failover; // TODO.\npackage managers.indexing; // Indexing manager classes.\npackage managers.loadbalancer; // TODO.\nInterface GridManager; // This interface defines life-cycle for kernal manager.\nClass GridManagerAdapter<T extends IgniteSpi>; // Convenience adapter for grid managers.\nClass IgniteMBeansManager; // Class that registers and unregisters MBeans for kernal.\n", "des": "TODO."}
{"index": 2610, "repo": "wicket-util-10.0.0-M1", "code": "package listener;\n\npublic final class ChangeListenerSet<T> extends ListenerCollection<IChangeListener<T>>; // Holds a set of IChangeListeners.\n@FunctionalInterface public interface IChangeListener<T>; // Generic \"something changed\" listener interface.\npublic abstract class ListenerCollection<T> extends Object implements Serializable, Iterable<T>; // Represents a collection of listeners.\nprotected static interface ListenerCollection.INotifier<T>; // Used to notify a listener.\n", "des": "Listener/ Observer utilities."}
{"index": 1194, "repo": "commons-math3-3.6.1", "code": "package univariate;\n\nClass BracketFinder; // Provide an interval that brackets a local optimum of a function.\nClass BrentOptimizer; // For a function defined on some interval (lo, hi), this class finds an approximation x to the point at which the function attains its minimum.\nClass MultiStartUnivariateOptimizer; // Special implementation of the UnivariateOptimizer interface adding multi-start features to an existing optimizer.\nClass SearchInterval; // Search interval and (optional) start value.\nClass SimpleUnivariateValueChecker; // Simple implementation of the ConvergenceChecker interface that uses only objective function values.\nClass UnivariateObjectiveFunction; // Scalar function to be optimized.\nClass UnivariateOptimizer; // Base class for a univariate scalar function optimizer.\nClass UnivariatePointValuePair; // This class holds a point and the value of an objective function at this point.\n", "des": "One-dimensional optimization algorithms."}
{"index": 177, "repo": "ignite-core-2.15.0", "code": "package segmentation;\n\nInterface GridSegmentationProcessor; // Kernal processor responsible for checking network segmentation issues.\n", "des": "Segmentation processor."}
{"index": 2740, "repo": "spring-batch-infrastructure-5.0.2", "code": "package xml;\n\npackage xml.builder; // Builders for Stax event item reader and writer.\npackage xml.stax; // Item reader and writer based on Stax.\npublic class StaxEventItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean; // Item reader for reading XML input based on StAX.\npublic class StaxEventItemWriter<T> extends AbstractItemStreamItemWriter<T> implements ResourceAwareItemWriterItemStream<T>, org.springframework.beans.factory.InitializingBean; // An implementation of ItemWriter which uses StAX and Marshaller for serializing object to XML.\npublic interface StaxWriterCallback; // Callback interface for writing to an XML file - useful e.g.\n", "des": "Infrastructure implementations of xml input and output."}
{"index": 3845, "repo": "lucene-core-9.7.0", "code": "package document;\n\nClass BinaryDocValuesField; // Field that stores a per-document BytesRef value.\nClass BinaryPoint; // An indexed binary field for fast range filters.\nClass BinaryRangeDocValues; // A binary representation of a range that wraps a BinaryDocValues field\nClass DateTools; // Provides support for converting dates to strings and vice-versa.\nClass Document; // Documents are the unit of indexing and search.\nClass DocumentStoredFieldVisitor; // A StoredFieldVisitor that creates a Document from stored fields.\nClass DoubleDocValuesField; // Syntactic sugar for encoding doubles as NumericDocValues via Double.doubleToRawLongBits(double).\nClass DoubleField; // Field that stores a per-document double value for scoring, sorting or value retrieval and index the field for fast range filters.\nClass DoublePoint; // An indexed double field for fast range filters.\nClass DoubleRange; // An indexed Double Range field.\nClass DoubleRangeDocValuesField; // DocValues field for DoubleRange.\nClass FeatureField; // Field that can be used to store static scoring factors into documents.\nClass Field; // Expert: directly create a field for a document.\nClass FieldType; // Describes the properties of a field.\nClass FloatDocValuesField; // Syntactic sugar for encoding floats as NumericDocValues via Float.floatToRawIntBits(float).\nClass FloatField; // Field that stores a per-document float value for scoring, sorting or value retrieval and index the field for fast range filters.\nClass FloatPoint; // An indexed float field for fast range filters.\nClass FloatRange; // An indexed Float Range field.\nClass FloatRangeDocValuesField; // DocValues field for FloatRange.\nClass InetAddressPoint; // An indexed 128-bit InetAddress field.\nClass InetAddressRange; // An indexed InetAddress Range Field\nClass IntField; // Field that stores a per-document int value for scoring, sorting or value retrieval and index the field for fast range filters.\nClass IntPoint; // An indexed int field for fast range filters.\nClass IntRange; // An indexed Integer Range field.\nClass IntRangeDocValuesField; // DocValues field for IntRange.\n", "des": "The logical representation of a Document for indexing and searching."}
{"index": 284, "repo": "pdfbox-3.0.0-beta1", "code": "package filespecification;\n\nClass PDComplexFileSpecification; // This represents a file specification.\nClass PDEmbeddedFile; // This represents an embedded file in a file specification.\nClass PDFileSpecification; // This represents a file specification.\nClass PDSimpleFileSpecification; // A file specification that is just a string.\n", "des": "The file specification package defines classes that are used for the PDF File Specification logic."}
{"index": 2004, "repo": "spring-integration-ws-6.1.2", "code": "package config;\n\npublic class WebServiceHeaderEnricherParser extends org.springframework.integration.config.xml.HeaderEnricherParserSupport;\npublic class WebServiceInboundGatewayParser extends org.springframework.integration.config.xml.AbstractInboundGatewayParser;\npublic class WebServiceOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractOutboundGatewayParser; // Parser for the <outbound-gateway/> element in the 'ws' namespace.\npublic class WsIntegrationConfigurationInitializer extends Object implements org.springframework.integration.config.IntegrationConfigurationInitializer; // The IntegrationConfigurationInitializer implementation for the WebService module.\npublic class WsNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler;\n", "des": "Contains parser classes for the Web Services namespace support."}
{"index": 3340, "repo": "opencms-core-15.0", "code": "package user;\n\nInterface I_CmsFilterableTable; // Interface for tables which support a filter function.\nInterface I_CmsOuTreeType; // Interface for OU tree types.\nInterface I_CmsPasswordFetcher; // Interface for fetching randomly generated passwords.\nInterface I_CmsToggleTable; // Interface for toggable tables.\nInterface I_CmsTreeTypeProvider; // Interface for providers of tree types in the account management overview tree.\nClass A_CmsEditUserGroupRoleDialog; // Abstract class for dialogs to change role or groups of a given user.\nClass A_CmsImportExportUserDialog; // Class to export user.\nClass CmsAccountsApp; // App for the OU Management.\nClass CmsAccountsAppConfiguration; // Configuration for Account Management app.\nClass CmsAdditionalInfosDialog; // Class for the Additional User info dialog.\nClass CmsAvailableRoleOrPrincipalTable; // Table showing available items from A_CmsEditUserGroupRoleDialog.\nClass CmsCsvWriter; // Helper to produce Csv files.\nClass CmsCurrentRoleOrPrincipalTable; // Class for the table to view and edit groups of a given user.\nClass CmsDefaultTreeTypeProvider; // Default tree type provider implementation.\nClass CmsDeleteMultiplePrincipalDialog; // Dialog for delete multiple principal.\nClass CmsDeleteOUDialog; // Dialog for delete of principals and ous.\nClass CmsGeneratePasswordDialog; // Dialog to generate a random password.\nClass CmsGroupEditDialog; // Class for the dialog to edit or create a CmsGroup.\nClass CmsGroupEditParameters; // The group edit parameters.\nClass CmsGroupsOfUserTable; // Table showing all Groups of a user.\nClass CmsGroupTable; // Class for the table containing groups of a ou.\nClass CmsImportExportUserDialog; // Dialog for CSV im- and export.\nClass CmsImportUserThread; // Class for the import user thread.\nClass CmsMoveUserToOU; // Dialog to change OU of given user.\nClass CmsNewElementDialog; // Dialog to create new element.\nClass CmsOUEditDialog; // Class for the ou edit and new dialog.\nClass CmsOUHandler; // Ou Handler.\nClass CmsOUTable; // Class to show ous in table for account management.\nClass CmsOuTree; // Class for the OU Tree.\n", "des": "Contains classes of the user manager app."}
{"index": 1037, "repo": "hadoop-aws-3.3.6", "code": "package statistics;\n\npackage statistics.impl; // Statistics collection for the S3A connector: implementation.\nInterface BlockOutputStreamStatistics; // Block output stream statistics.\nInterface ChangeTrackerStatistics; // Interface for change tracking statistics.\nInterface CommitterStatistics; // Statistics for S3A committers.\nInterface CountersAndGauges; // This is the foundational API for collecting S3A statistics.\nInterface DelegationTokenStatistics; // Instrumentation exported to for S3A Delegation Token support.\nInterface PutTrackerStatistics; // Interface for PUT tracking.\nInterface S3AInputStreamStatistics; // Statistics updated by a S3AInputStream during its use.\nInterface S3AMultipartUploaderStatistics; // Statistics for the S3A multipart uploader.\nInterface S3AStatisticInterface; // Base Interface for S3A Statistics, as a way of managing them.\nInterface S3AStatisticsContext; // This is the statistics context for ongoing operations in S3A.\nInterface StatisticsFromAwsSdk; // interface to receive statistics events from the AWS SDK by way of AwsStatisticsCollector.\nEnum StatisticTypeEnum; // Enum of statistic types.\n", "des": "Statistics collection for the S3A connector: interfaces."}
{"index": 2303, "repo": "spring-boot-3.1.1", "code": "package source;\n\npublic final class ConfigurationProperty extends Object implements OriginProvider, Comparable<ConfigurationProperty>; // A single configuration property obtained from a ConfigurationPropertySource consisting of a name, value and optional origin.\npublic interface ConfigurationPropertyCaching; // Interface that can be used to control configuration property source caches.\npublic final class ConfigurationPropertyName extends Object implements Comparable<ConfigurationPropertyName>; // A configuration property name composed of elements separated by dots.\npublic static enum ConfigurationPropertyName.Form extends Enum<ConfigurationPropertyName.Form>; // The various forms that a non-indexed element value can take.\npublic final class ConfigurationPropertyNameAliases extends Object implements Iterable<ConfigurationPropertyName>; // Maintains a mapping of ConfigurationPropertyName aliases.\n@FunctionalInterface public interface ConfigurationPropertySource; // A source of ConfigurationProperties.\npublic final class ConfigurationPropertySources extends Object; // Provides access to ConfigurationPropertySources.\npublic enum ConfigurationPropertyState extends Enum<ConfigurationPropertyState>; // The state of content from a ConfigurationPropertySource.\npublic class InvalidConfigurationPropertyNameException extends RuntimeException; // Exception thrown when ConfigurationPropertyName has invalid characters.\npublic class InvalidConfigurationPropertyValueException extends RuntimeException; // Exception thrown when a configuration property value is invalid.\npublic interface IterableConfigurationPropertySource extends ConfigurationPropertySource, Iterable<ConfigurationPropertyName>; // A ConfigurationPropertySource with a fully Iterable set of entries.\npublic class MapConfigurationPropertySource extends Object implements IterableConfigurationPropertySource; // A ConfigurationPropertySource backed by a Map and using standard name mapping rules.\npublic class MutuallyExclusiveConfigurationPropertiesException extends RuntimeException; // Exception thrown when more than one mutually exclusive configuration property has been configured.\npublic class UnboundElementsSourceFilter extends Object implements Function<ConfigurationPropertySource,Boolean>; // Function used to determine if a ConfigurationPropertySource should be included when determining unbound elements.\n", "des": "Sources for external configuration properties."}
{"index": 84, "repo": "ignite-core-2.15.0", "code": "package tcp;\n\npackage tcp.internal; // Contains connection health-checkers for TCP/IP-based implementation of communication SPI.\npackage tcp.messages; // Contains implementation messages.\nInterface TcpCommunicationSpiMBean; // MBean provide access to TCP-based communication SPI.\nClass AttributeNames; // fix it in the ticket https://ggsystems.atlassian.net/browse/GG-29546\nClass ClientExceptionsUtils; // Utils to analyze client-related exceptions.\nClass TcpCommunicationMetricsListener; // Statistics for TcpCommunicationSpi.\nClass TcpCommunicationSpi; // TcpCommunicationSpi is default communication SPI which uses TCP/IP protocol and Java NIO to communicate with other nodes.\n", "des": "Contains default TCP/IP-based implementation for communication SPI."}
{"index": 496, "repo": "beam-sdks-java-core-2.49.0", "code": "package transforms;\n\npackage transforms.display; // Defines HasDisplayData for annotating components which provide display data used within UIs and diagnostic tools.\npackage transforms.join; // Defines the CoGroupByKey transform for joining multiple PCollections.\npackage transforms.reflect; // For internal use only; no backwards-compatibility guarantees.\npackage transforms.resourcehints; // Defines ResourceHints for configuring pipeline execution.\npackage transforms.splittabledofn; // Defines utilities related to splittable DoFn.\npackage transforms.windowing; // Defines the Window transform for dividing the elements in a PCollection into windows, and the Trigger for controlling when those elements are output.\nInterface Combine.AccumulatingCombineFn.Accumulator<InputT,AccumT,OutputT>; // The type of mutable accumulator values used by this AccumulatingCombineFn.\nInterface CombineFnBase.GlobalCombineFn<InputT,AccumT,OutputT>; // For internal use only; no backwards-compatibility guarantees.\nInterface CombineWithContext.RequiresContextInternal; // An internal interface for signaling that a GloballyCombineFn or a PerKeyCombineFn needs to access CombineWithContext.Context.\nInterface Contextful.Fn<InputT,OutputT>; // A function from an input to an output that may additionally access Contextful.Fn.Context when computing the result.\nInterface DoFn.BundleFinalizer; // A parameter that is accessible during @StartBundle, @ProcessElement and @FinishBundle that allows the caller to register a callback that will be invoked after the bundle has been successfully completed and the runner has commit the output.\nInterface DoFn.BundleFinalizer.Callback; // An instance of a function that will be invoked after bundle finalization.\nInterface DoFn.MultiOutputReceiver; // Receives tagged output for a multi-output function.\nInterface DoFn.OutputReceiver<T>; // Receives values of the given type.\nInterface ExternalTransformBuilder<ConfigT,InputT extends PInput,OutputT extends POutput>; // An interface for building a transform from an externally provided configuration.\nInterface Materialization<T>; // For internal use only; no backwards-compatibility guarantees.\nInterface Materializations.IterableView<V>; // Represents the PrimitiveViewT supplied to the ViewFn when it declares to use the iterable materialization.\n", "des": "Defines PTransforms for transforming data in a pipeline."}
{"index": 3446, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface Batch; // Conceptually models a batch.\nInterface BatchBuilder; // A builder for Batch instances\nInterface BatchKey; // Unique key for batch identification.\nInterface BatchObserver; // An observer contract for batch events.\n", "des": "Defines contracts for JDBC batching support."}
{"index": 3253, "repo": "opencms-core-15.0", "code": "package rpc;\n\nInterface I_CmsSitemapService; // Handles all RPC services related to the sitemap.\nInterface I_CmsSitemapServiceAsync; // Handles all RPC services related to the sitemap.\n", "des": "Shared RPC interfaces."}
{"index": 1783, "repo": "spring-integration-file-6.1.2", "code": "package event;\n\npublic abstract class FileIntegrationEvent extends org.springframework.integration.events.IntegrationEvent;\n", "des": "ApplicationEvents generated by the file module."}
{"index": 52, "repo": "ignite-core-2.15.0", "code": "package sorted;\n\nInterface SortedEvictionPolicyMBean; // MBean for sorted eviction policy.\nClass SortedEvictionPolicy<K,V>; // Cache eviction policy which will select the minimum cache entry for eviction.\nClass SortedEvictionPolicyFactory<K,V>; // Factory class for SortedEvictionPolicy.\n", "des": "Contains cache sorted eviction policy implementation."}
{"index": 3645, "repo": "solr-core-9.3.0", "code": "package placement;\n\npackage placement.impl; // Implementation classes (not visible to plugins, subject to change at any time) for the interfaces in org.apache.solr.cluster.placement and to make them work with the rest of Solr.\npackage placement.plugins; // Sample plugin implementations.\nInterface AttributeFetcher; // Instances of this interface are used to fetch various attributes from nodes (and other sources) in the cluster.\nInterface AttributeValues;\nInterface BalancePlan; // A fully specified plan or instructions for replica balancing to be applied to the cluster.\nInterface BalancePlanFactory; // Allows plugins to create BalancePlans telling the Solr layer how to balance replicas following the processing of a BalanceRequest.\nInterface BalanceRequest; // A cluster related placement request that Solr asks a PlacementPlugin to resolve and compute replica balancing plan for replicas that already exist across a set of Nodes.\nInterface CollectionMetrics; // Collection-level metrics.\nInterface DeleteCollectionRequest; // Delete collection request.\nInterface DeleteReplicasRequest; // Delete replicas request.\nInterface DeleteShardsRequest; // Delete shards request.\nInterface Metric<T>; // Metric-related attribute of a node or replica.\nInterface ModificationRequest; // Collection modification request.\nInterface NodeMetric<T>; // Node metric identifier, corresponding to a node-level metric registry and the internal metric name.\nInterface PlacementContext; // Placement context makes it easier to pass around and access main placement-related components.\nInterface PlacementPlan; // A fully specified plan or instructions for placement, deletion or move to be applied to the cluster.\nInterface PlacementPlanFactory; // Allows plugins to create PlacementPlans telling the Solr layer where to create replicas following the processing of a PlacementRequest.\nInterface PlacementPlugin; // Implemented by external plugins to control replica placement and movement on the search cluster (as well as other things such as cluster elasticity?) when cluster changes are required (initiated elsewhere, most likely following a Collection API call).\nInterface PlacementPluginConfig; // Configuration beans should use this interface to define public (mutable) configuration properties.\nInterface PlacementPluginFactory<T extends PlacementPluginConfig>; // Factory implemented by client code and configured in container plugins (see ContainerPluginsApi.editAPI) allowing the creation of instances of PlacementPlugin to be used for replica placement computation.\n", "des": "This package contains interfaces visible by plugins (i.e."}
{"index": 1240, "repo": "spring-hateoas-2.1.2", "code": "package server;\n\npackage server.core; // Implementations of core API interfaces.\npackage server.mvc; // Spring MVC helper classes to build Links and assemble RepresentationModel types.\npackage server.reactive; // Spring WebFlux components to build Links and assemble RepresentationModel types.\npublic interface EntityLinks extends org.springframework.plugin.core.Plugin<Class<?>>; // Accessor to links pointing to controllers backing an entity type.\n@Inherited @Documented @Retention(RUNTIME) @Target(TYPE) public @interface ExposesResourceFor; // Annotation to demarcate controllers that expose URI templates of a structure according to ControllerEntityLinks.\npublic interface LinkBuilder; // Builder to ease building Link instances.\npublic interface LinkBuilderFactory<T extends LinkBuilder>; // Factory for LinkBuilder instances.\npublic interface LinkRelationProvider extends org.springframework.plugin.core.Plugin<LinkRelationProvider.LookupContext>; // API to provide LinkRelations for collections and items of the given type.\npublic static class LinkRelationProvider.LookupContext extends Object; // LinkRelationProvider selection context for item resource relation lookups (LinkRelationProvider.LookupContext.forItemResourceRelLookup(Class), collection resource relation lookups LinkRelationProvider.LookupContext.forCollectionResourceRelLookup(Class) or both LinkRelationProvider.LookupContext.forType(Class).\npublic interface MethodLinkBuilderFactory<T extends LinkBuilder> extends LinkBuilderFactory<T>; // Extension of LinkBuilderFactory for implementations that also support creating LinkBuilders by pointing to a method.\npublic interface RepresentationModelAssembler<T,D extends RepresentationModel<?>>; // Interface for components that convert a domain type into a RepresentationModel.\npublic interface RepresentationModelProcessor<T extends RepresentationModel<?>>; // SPI interface to allow components to process the RepresentationModel instances returned from Spring MVC controllers.\npublic interface SimpleRepresentationModelAssembler<T> extends RepresentationModelAssembler<T,EntityModel<T>>; // A RepresentationModelAssembler based purely on the domain type, using EntityRepresentationModel<T> as the enclosing representation model type.\npublic class TypedEntityLinks<T> extends Object; // Entity links API to create Links and LinkBuilder instances based on an identifier function.\n", "des": "Server-side components for hypermedia handling."}
{"index": 2389, "repo": "spring-batch-core-5.0.2", "code": "package builder;\n\npublic class FlowBuilder<Q> extends Object; // A builder for a flow of steps that can be executed as a job or as part of a job.\npublic static class FlowBuilder.SplitBuilder<Q> extends Object; // A builder for building a split state.\npublic static class FlowBuilder.TransitionBuilder<Q> extends Object; // A builder for transitions within a flow.\npublic static class FlowBuilder.UnterminatedFlowBuilder<Q> extends Object; // A builder for continuing a flow from a decision state.\npublic class FlowBuilderException extends RuntimeException;\npublic class FlowJobBuilder extends JobBuilderHelper<FlowJobBuilder>; // A job builder for FlowJob instances.\npublic class JobBuilder extends JobBuilderHelper<JobBuilder>; // Convenience for building jobs of various kinds.\npublic class JobBuilderException extends RuntimeException;\npublic abstract class JobBuilderHelper<B extends JobBuilderHelper<B>> extends Object; // A base class and utility for other job builders providing access to common properties like job repository.\npublic static class JobBuilderHelper.CommonJobProperties extends Object;\npublic class JobFlowBuilder extends FlowBuilder<FlowJobBuilder>;\npublic class SimpleJobBuilder extends JobBuilderHelper<SimpleJobBuilder>;\n", "des": "Job and flow level builders for java based configuration of batch jobs"}
{"index": 931, "repo": "commons-compress-1.23.0", "code": "package pack200;\n\nInterface NewAttributeBands.AttributeLayoutElement; // An AttributeLayoutElement is a part of an attribute layout and has one or more bands associated with it, which transmit the AttributeElement data for successive Attributes of this type.\nClass Archive; // Archive is the main entry point to pack200 and represents a packed archive.\nClass AttributeDefinitionBands; // Attribute Definition bands define how any unknown attributes should be read by the decompressor.\nClass AttributeDefinitionBands.AttributeDefinition;\nClass BandSet; // Abstract superclass for a set of bands\nClass BcBands; // Bytecode bands (corresponds to the bc_bands set of bands in the pack200 specification)\nClass BHSDCodec; // A BHSD codec is a means of encoding integer values as a sequence of bytes or vice versa using a specified \"BHSD\" encoding mechanism.\nClass CanonicalCodecFamilies; // Sets of codecs that share characteristics.\nClass ClassBands; // Class bands (corresponds to the class_bands set of bands in the pack200 specification)\nClass Codec; // A Codec allows a sequence of bytes to be decoded into integer values (or vice versa).\nClass CodecEncoding; // CodecEncoding is used to get the right Codec for a given meta-encoding\nClass ConstantPoolEntry; // Abstract superclass for constant pool entries.\nClass CpBands; // Pack200 Constant Pool Bands\nClass CPClass; // Constant pool entry for a class.\nClass CPConstant<T extends CPConstant<T>>; // Abstract superclass for constant pool constant entries such as numbers or Strings.\nClass CPDouble; // Constant pool entry for a double.\nClass CPFloat; // Constant pool entry for a float.\nClass CPInt; // Constant pool entry for an int.\nClass CPLong; // Constant pool entry for a long.\nClass CPMethodOrField; // Constant pool entry for a method or field.\nClass CPNameAndType; // Constant pool entry for a name and type pair.\nClass CPSignature; // Constant pool entry for a signature.\nClass CPString; // Constant pool entry for a String.\nClass CPUTF8; // Constant pool entry for a UTF8 entry, used for storing long Strings.\nClass FileBands; // Bands containing information about files in the pack200 archive and the file contents for non-class-files.\n", "des": "Internal package."}
{"index": 1430, "repo": "spring-boot-actuator-3.1.1", "code": "package r2dbc;\n\npublic class ConnectionFactoryHealthIndicator extends AbstractReactiveHealthIndicator; // A HealthIndicator to validate a R2DBC ConnectionFactory.\n", "des": "Actuator support for R2DBC."}
{"index": 2421, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package condition;\n\n@Endpoint(id=\"conditions\") public class ConditionsReportEndpoint extends Object; // @Endpoint to expose the ConditionEvaluationReport.\npublic static final class ConditionsReportEndpoint.ConditionsDescriptor extends Object implements org.springframework.boot.actuate.endpoint.OperationResponseBody; // A description of an application's condition evaluation.\npublic static final class ConditionsReportEndpoint.ContextConditionsDescriptor extends Object; // A description of an application context's condition evaluation, primarily intended for serialization to JSON.\npublic static class ConditionsReportEndpoint.MessageAndConditionDescriptor extends Object; // Adapts ConditionEvaluationReport.ConditionAndOutcome to a JSON friendly structure.\npublic static class ConditionsReportEndpoint.MessageAndConditionsDescriptor extends Object; // Adapts ConditionEvaluationReport.ConditionAndOutcomes to a JSON friendly structure.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=ConditionsReportEndpoint.class) public class ConditionsReportEndpointAutoConfiguration extends Object; // Auto-configuration for the ConditionsReportEndpoint.\n", "des": "Auto-configuration for actuator condition concerns."}
{"index": 2290, "repo": "spring-boot-3.1.1", "code": "package availability;\n\npublic interface ApplicationAvailability; // Provides availability state information for the application.\npublic class ApplicationAvailabilityBean extends Object implements ApplicationAvailability, org.springframework.context.ApplicationListener<AvailabilityChangeEvent<?>>; // Bean that provides an ApplicationAvailability implementation by listening for change events.\npublic class AvailabilityChangeEvent<S extends AvailabilityState> extends org.springframework.context.PayloadApplicationEvent<S>; // ApplicationEvent sent when the AvailabilityState of the application changes.\npublic interface AvailabilityState; // Tagging interface used on ApplicationAvailability states.\npublic enum LivenessState extends Enum<LivenessState> implements AvailabilityState; // \"Liveness\" state of the application.\npublic enum ReadinessState extends Enum<ReadinessState> implements AvailabilityState; // \"Readiness\" state of the application.\n", "des": "Support for describing the availability of Spring Boot applications."}
{"index": 489, "repo": "beam-sdks-java-core-2.49.0", "code": "package logicaltypes;\n\nClass Date; // A date without a time-zone.\nClass DateTime; // A datetime without a time-zone.\nClass EnumerationType; // This Schema.LogicalType represent an enumeration over a fixed set of values.\nClass EnumerationType.Value; // This class represents a single enum value.\nClass FixedBytes; // A LogicalType representing a fixed-length byte array.\nClass FixedPrecisionNumeric; // Fixed precision numeric types used to represent jdbc NUMERIC and DECIMAL types.\nClass FixedString; // A LogicalType representing a fixed-length string.\nClass MicrosInstant; // A timestamp represented as microseconds since the epoch.\nClass NanosDuration; // A duration represented in nanoseconds.\nClass NanosInstant; // A timestamp represented as nanoseconds since the epoch.\nClass OneOfType; // A logical type representing a union of fields.\nClass OneOfType.Value; // Represents a single OneOf value.\nClass PassThroughLogicalType<T>; // A base class for LogicalTypes that use the same Java type as the underlying base type.\nClass PythonCallable; // A logical type for PythonCallableSource objects.\nClass SchemaLogicalType; // A schema represented as a serialized proto bytes.\nClass SqlTypes; // Beam Schema.LogicalTypes corresponding to SQL data types.\nClass Time; // A time without a time-zone.\nClass UnknownLogicalType<T>; // A base class for logical types that are not understood by the Java SDK.\nClass UuidLogicalType; // Base class for types representing UUID as two long values.\nClass VariableBytes; // A LogicalType representing a variable-length byte array with specified maximum length.\nClass VariableString; // A LogicalType representing a variable-length string with specified maximum length.\n", "des": "A set of common LogicalTypes for use with schemas."}
{"index": 971, "repo": "spring-ws-3.0.10.RELEASE", "code": "package saaj;\n\npackage saaj.support; // Support classes for working with the SOAP with Attachments API for Java (SAAJ).\nClass SaajSoapMessage; // SAAJ-specific implementation of the SoapMessage interface.\nClass SaajSoapMessageFactory; // SAAJ-specific implementation of the WebServiceMessageFactory.\nClass SaajAttachmentException;\nClass SaajSoapBodyException;\nClass SaajSoapElementException;\nClass SaajSoapEnvelopeException;\nClass SaajSoapFaultException;\nClass SaajSoapHeaderException;\nClass SaajSoapMessageCreationException;\nClass SaajSoapMessageException;\n", "des": "SOAP with Attachments API for Java (SAAJ) support for Spring-WS soap message infrastructure."}
{"index": 1183, "repo": "commons-math3-3.6.1", "code": "package ode;\n\npackage ode.events; // This package provides classes to handle discrete events occurring during Ordinary Differential Equations integration.\npackage ode.nonstiff; // This package provides classes to solve non-stiff Ordinary Differential Equations problems.\npackage ode.sampling; // This package provides classes to handle sampling steps during Ordinary Differential Equations integration.\nInterface FieldSecondaryEquations<T extends RealFieldElement<T>>; // This interface allows users to add secondary differential equations to a primary set of differential equations.\nInterface FirstOrderDifferentialEquations; // This interface represents a first order differential equations set.\nInterface FirstOrderFieldDifferentialEquations<T extends RealFieldElement<T>>; // This interface represents a first order differential equations set.\nInterface FirstOrderFieldIntegrator<T extends RealFieldElement<T>>; // This interface represents a first order integrator for differential equations.\nInterface FirstOrderIntegrator; // This interface represents a first order integrator for differential equations.\nInterface MainStateJacobianProvider; // Interface expanding first order differential equations in order to compute exactly the main state jacobian matrix for partial derivatives equations.\nInterface MultistepIntegrator.NordsieckTransformer; // as of 3.6 this unused interface is deprecated\nInterface ODEIntegrator; // This interface defines the common parts shared by integrators for first and second order differential equations.\nInterface Parameterizable; // This interface enables to process any parameterizable object.\nInterface ParameterizedODE; // Interface to compute by finite difference Jacobian matrix for some parameter when computing partial derivatives equations.\nInterface ParameterJacobianProvider; // Interface to compute exactly Jacobian matrix for some parameter when computing partial derivatives equations.\nInterface SecondaryEquations; // This interface allows users to add secondary differential equations to a primary set of differential equations.\nInterface SecondOrderDifferentialEquations; // This interface represents a second order differential equations set.\nInterface SecondOrderIntegrator; // This interface represents a second order integrator for differential equations.\nClass AbstractFieldIntegrator<T extends RealFieldElement<T>>; // Base class managing common boilerplate for all integrators.\nClass AbstractIntegrator; // Base class managing common boilerplate for all integrators.\n", "des": "This package provides classes to solve Ordinary Differential Equations problems."}
{"index": 3267, "repo": "opencms-core-15.0", "code": "package timing;\n\nInterface I_CmsProfilingHandler; // Profiling handler interface which gets informed of method call durations.\nClass CmsDefaultProfilingHandler; // Default profiling handler which only has a single instance and delegates method calls to its registered child handlers.\nClass CmsProfilingInvocationHandler; // Invocation handler used to measure method calls durations.\nClass CmsThreadStatsTreeProfilingHandler; // Builds up a tree whose nodes correspond to stack trace lines of the threads calling this profiling handler.\nClass CmsThreadStatsTreeProfilingHandler.Node; // The tree node.\n", "des": "Utility classes for profiling driver calls."}
{"index": 139, "repo": "ignite-core-2.15.0", "code": "package deployment;\n\nInterface GridDeploymentInfo; // Deployment info.\nInterface GridDeploymentStore; // Interface for all deployment stores.\nClass GridDeployment; // Represents single class deployment.\nClass GridDeploymentInfoBean; // Deployment info bean.\nClass GridDeploymentManager; // Deployment manager.\nClass GridDeploymentMetadata; // Deployment metadata.\nClass GridDeploymentPerLoaderStore; // Deployment storage for DeploymentMode.PRIVATE and DeploymentMode.ISOLATED modes.\nClass GridDeploymentPerVersionStore; // Deployment storage for DeploymentMode.SHARED and DeploymentMode.CONTINUOUS modes.\nClass GridDeploymentRequest; // Deployment request.\nClass GridDeploymentResponse; // Grid deployment response containing requested resource bytes.\nClass P2PClassLoadingIssues;\nClass P2PClassNotFoundException; // A specialication of ClassNotFoundException thrown when a class cannot be loaded during P2P class-loading.\n", "des": "TODO."}
{"index": 2636, "repo": "spring-integration-sftp-6.1.2", "code": "package config;\n\npublic class SftpInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileInboundChannelAdapterParser; // Parser for 'sftp:inbound-channel-adapter'\npublic class SftpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Provides namespace support for using SFTP.\npublic class SftpOutboundChannelAdapterParser extends org.springframework.integration.file.config.RemoteFileOutboundChannelAdapterParser; // Parser for SFTP Outbound Channel Adapters.\npublic class SftpOutboundGatewayParser extends org.springframework.integration.file.config.AbstractRemoteFileOutboundGatewayParser;\npublic class SftpStreamingInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileStreamingInboundChannelAdapterParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 2922, "repo": "groovy-4.0.13", "code": "package time;\n\npublic abstract class BaseDuration extends Object implements Comparable<BaseDuration>; // Base class for date and time durations.\npublic abstract static class BaseDuration.From extends Object;\npublic class DatumDependentDuration extends BaseDuration; // DatumDependentDuration represents durations whose length in milliseconds cannot be determined without knowing the datum point.\npublic class Duration extends BaseDuration; // Duration represents time periods which have values independent of the context.\npublic class TimeCategory extends Object; // Apply a number of methods to allow convenient Date/Time manipulation,such as:\npublic class TimeDatumDependentDuration extends DatumDependentDuration; // TimeDatumDuration represents a time period which results from an arithmetic operation between a TimeDuration object and a DatumDuration object\npublic class TimeDuration extends Duration; // TimeDuration represents time periods expressed in units of hours, minutes, seconds and milliseconds.\n", "des": "Classes for easily manipulating Dates and times."}
{"index": 295, "repo": "pdfbox-3.0.0-beta1", "code": "package color;\n\nClass PDCalGray; // A CalGray colour space is a special case of a single-component CIE-based colour space.\nClass PDCalRGB; // A CalRGB colour space is a CIE-based colour space with one transformation stage instead of two.\nClass PDCIEBasedColorSpace; // CIE-based colour spaces specify colours in a way that is independent of the characteristics of any particular output device.\nClass PDCIEDictionaryBasedColorSpace; // CIE-based colour spaces that use a dictionary.\nClass PDColor; // A color value, consisting of one or more color components, or for pattern color spaces, a name and optional color components.\nClass PDColorSpace; // A color space specifies how the colours of graphics objects will be painted on the page.\nClass PDDeviceCMYK; // Allows colors to be specified according to the subtractive CMYK (cyan, magenta, yellow, black) model typical of printers and other paper-based output devices.\nClass PDDeviceColorSpace; // Device colour spaces directly specify colours or shades of gray produced by an output device.\nClass PDDeviceGray; // A color space with black, white, and intermediate shades of gray.\nClass PDDeviceN; // DeviceN colour spaces may contain an arbitrary number of colour components.\nClass PDDeviceNAttributes; // Contains additional information about the components of colour space.\nClass PDDeviceNProcess; // A DeviceN Process Dictionary\nClass PDDeviceRGB; // Colours in the DeviceRGB colour space are specified according to the additive RGB (red-green-blue) colour model.\nClass PDGamma; // A gamma array, or collection of three floating point parameters used for color operations.\nClass PDICCBased; // ICCBased color spaces are based on a cross-platform color profile as defined by the International Color Consortium (ICC).\nClass PDIndexed; // An Indexed colour space specifies that an area is to be painted using a colour table of arbitrary colours from another color space.\nClass PDJPXColorSpace; // A color space embedded in a JPX file.\nClass PDLab; // A Lab colour space is a CIE-based ABC colour space with two transformation stages.\n", "des": "This package deals with colors that are stored in a PDF document."}
{"index": 1017, "repo": "spring-ws-3.0.10.RELEASE", "code": "package commons;\n\nClass CommonsXsdSchema; // Implementation of the XsdSchema interface that uses Apache WS-Commons XML Schema.\nClass CommonsXsdSchemaCollection; // Implementation of the XsdSchemaCollection that uses Apache WS-Commons XML Schema.\nClass CommonsXsdSchemaException; // Commons XmlSchema version of the XsdSchemaException.\n", "des": "Contains a implementation of the XsdSchema interfaces that uses Apache WS-Commons XML Schema."}
{"index": 3363, "repo": "opencms-core-15.0", "code": "package serialdate;\n\nInterface I_CmsSerialDateBean; // Interface for serial date beans.\nClass A_CmsSerialDateBean; // Abstract base class for serial date beans.\nClass CmsSerialDateBeanDaily; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a daily base.\nClass CmsSerialDateBeanFactory; // Wrapper for the value stored by the CmsSerialDateWidget that provides easy access.\nClass CmsSerialDateBeanIndividual; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified as individual dates.\nClass CmsSerialDateBeanMonthly; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a monthly base.\nClass CmsSerialDateBeanMonthlyWeeks; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a monthly base.\nClass CmsSerialDateBeanSingle; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles single events.\nClass CmsSerialDateBeanWeekly; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a weekly base.\nClass CmsSerialDateBeanWorkingDays; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a daily base.\nClass CmsSerialDateBeanYearly; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a yearly base.\nClass CmsSerialDateBeanYearlyWeekday; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a yearly base.\nClass CmsSerialDateValue; // Server-side implementation of I_CmsSerialDateValue.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains the server-side widget implementation, for the serial date widget.."}
{"index": 996, "repo": "spring-ws-3.0.10.RELEASE", "code": "package transport;\n\npackage transport.context; // Abstraction for determining the current TransportInputStream and TransportOutputStream.\npackage transport.http; // Package providing support for handling messages via HTTP.\npackage transport.jms; // Package providing support for handling messages via JMS.\npackage transport.mail; // Package providing support for handling messages via email.\npackage transport.support; // Classes supporting the org.springframework.ws.transport package.\npackage transport.xmpp; // Package providing support for handling messages via xmpp.\nInterface EndpointAwareWebServiceConnection; // Sub-interface of WebServiceConnection that is aware of any server-side situations where an endpoint is not found.\nInterface FaultAwareWebServiceConnection; // Sub-interface of WebServiceConnection that is aware of any Fault messages received.\nInterface HeadersAwareReceiverWebServiceConnection; // Interface to define access to header information for certain WebServiceConnection implementations.\nInterface HeadersAwareSenderWebServiceConnection;\nInterface TransportConstants; // Declares useful transport constants.\nInterface WebServiceConnection; // Represents a point-to-point connection that a client can use for sending WebServiceMessage objects directly to a remote party.\nInterface WebServiceMessageReceiver; // Defines the methods for classes capable of receiving WebServiceMessage instances coming in on a transport.\nInterface WebServiceMessageSender; // Defines the methods for classes capable of sending and receiving WebServiceMessage instances across a transport.\nClass AbstractReceiverConnection; // Abstract base class for WebServiceConnection implementations used for receiving requests.\nClass AbstractSenderConnection; // Abstract base class for WebServiceConnection implementations used for sending requests.\nClass AbstractWebServiceConnection; // Abstract base class for WebServiceConnection implementations.\nClass TransportInputStream; // A TransportInputStream is an input stream with MIME input headers.\nClass TransportOutputStream; // A TransportOutputStream is an output stream with MIME input headers.\nClass TransportException; // Abstract base class for exceptions related to the transport layer.\n", "des": "Contains the TransportRequest and TransportResponse interfaces."}
{"index": 566, "repo": "hadoop-common-3.3.4", "code": "package sink;\n\nClass FileSink; // A metrics sink that writes to a file\nClass GraphiteSink; // A metrics sink that writes to a Graphite server\nClass GraphiteSink.Graphite;\nClass PrometheusMetricsSink; // Metrics sink for prometheus exporter.\nClass RollingFileSystemSink; // This class is a metrics sink that uses FileSystem to write the metrics logs.\nClass StatsDSink; // A metrics sink that writes metrics to a StatsD daemon.\nClass StatsDSink.StatsD; // Class that sends UDP packets to StatsD daemon.\n", "des": "Builtin metrics sinks"}
{"index": 1068, "repo": "hadoop-yarn-common-3.3.6", "code": "package pb;\n\nClass PlacementConstraintFromProtoConverter; // PlacementConstraintFromProtoConverter generates an PlacementConstraint.AbstractConstraint given a YarnProtos.PlacementConstraintProto.\nClass PlacementConstraintToProtoConverter; // PlacementConstraintToProtoConverter generates a YarnProtos.PlacementConstraintProto given a PlacementConstraint.AbstractConstraint.\n", "des": "API related to protobuf objects that are not backed by PBImpl classes."}
{"index": 3022, "repo": "spring-web-6.0.11", "code": "package annotation;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface ControllerAdvice; // Specialization of @Component for classes that declare @ExceptionHandler, @InitBinder, or @ModelAttribute methods to be shared across multiple @Controller classes.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface CookieValue; // Annotation to indicate that a method parameter is bound to an HTTP cookie.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface CrossOrigin; // Annotation for permitting cross-origin requests on specific handler classes and/or handler methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented @RequestMapping(method=DELETE) public @interface DeleteMapping; // Annotation for mapping HTTP DELETE requests onto specific handler methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Reflective(org.springframework.web.bind.annotation.ExceptionHandlerReflectiveProcessor.class) public @interface ExceptionHandler; // Annotation for handling exceptions in specific handler classes and/or handler methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented @RequestMapping(method=GET) public @interface GetMapping; // Annotation for mapping HTTP GET requests onto specific handler methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Reflective public @interface InitBinder; // Annotation that identifies methods that initialize the WebDataBinder which will be used for populating command and form object arguments of annotated handler methods.\n@Target(ANNOTATION_TYPE) @Retention(RUNTIME) public @interface Mapping; // Meta annotation that indicates a web mapping annotation.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface MatrixVariable; // Annotation which indicates that a method parameter should be bound to a name-value pair within a path segment.\n@Target({PARAMETER,METHOD}) @Retention(RUNTIME) @Documented @Reflective public @interface ModelAttribute; // Annotation that binds a method parameter or method return value to a named model attribute, exposed to a web view.\n@Target(METHOD) @Retention(RUNTIME) @Documented @RequestMapping(method=PATCH) public @interface PatchMapping; // Annotation for mapping HTTP PATCH requests onto specific handler methods.\n", "des": "Annotations for binding requests to controllers and handler methods as well as for binding request parameters to method arguments."}
{"index": 2657, "repo": "spring-data-cassandra-4.1.2", "code": "package util;\n\n@Deprecated public class CassandraFutureAdapter<T> extends Object implements ListenableFuture<T>;\npublic class StatementBuilder<S extends com.datastax.oss.driver.api.querybuilder.BuildableQuery> extends Object; // Functional builder for Cassandra statements.\n@FunctionalInterface public static interface StatementBuilder.BindFunction<S>; // Binding function.\npublic static enum StatementBuilder.ParameterHandling extends Enum<StatementBuilder.ParameterHandling>; // Enumeration to represent how parameters are rendered.\n@FunctionalInterface public interface TermFactory; // Factory for Term objects encapsulating a binding value.\n", "des": "Utility classes for basic CQL interaction."}
{"index": 1503, "repo": "spring-context-6.0.11", "code": "package concurrent;\n\npublic class ConcurrentMapCache extends AbstractValueAdaptingCache; // Simple Cache implementation based on the core JDK java.util.concurrent package.\npublic class ConcurrentMapCacheFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ConcurrentMapCache>, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // FactoryBean for easy configuration of a ConcurrentMapCache when used within a Spring container.\npublic class ConcurrentMapCacheManager extends Object implements CacheManager, org.springframework.beans.factory.BeanClassLoaderAware; // CacheManager implementation that lazily builds ConcurrentMapCache instances for each ConcurrentMapCacheManager.getCache(java.lang.String) request.\n", "des": "Implementation package for java.util.concurrent based caches."}
{"index": 280, "repo": "pdfbox-3.0.0-beta1", "code": "package pdfparser;\n\nClass BaseParser; // This class is used to contain parsing logic that will be used by all parsers.\nClass BruteForceParser; // Brute force parser to be used as last resort if a malformed pdf can't be read.\nClass COSParser; // COS-Parser which first reads startxref and xref tables in order to know valid objects and parse only these objects.\nClass FDFParser;\nClass PDFObjectStreamParser; // This will parse a PDF 1.5 object stream and extract the object with given object number from the stream.\nClass PDFParser;\nClass PDFStreamParser; // This will parse a PDF byte stream and extract operands and such.\nClass PDFXRefStream;\nClass PDFXrefStreamParser; // This will parse a PDF 1.5 (or better) Xref stream and extract the xref information from the stream.\nClass XrefTrailerResolver; // This class will collect all XRef/trailer objects and creates correct xref/trailer information after all objects are read using startxref and 'Prev' information (unused XRef/trailer objects are discarded).\nEnum XrefTrailerResolver.XRefType; // The XRefType of a trailer.\n", "des": "The pdfparser package contains classes to parse PDF documents and objects within the document."}
{"index": 1549, "repo": "spring-context-6.0.11", "code": "package support;\n\npublic class RefreshableScriptTargetSource extends org.springframework.aop.target.dynamic.BeanFactoryRefreshableTargetSource; // Subclass of BeanFactoryRefreshableTargetSource that determines whether a refresh is required through the given ScriptFactory.\npublic class ResourceScriptSource extends Object implements ScriptSource; // ScriptSource implementation based on Spring's Resource abstraction.\npublic class ScriptFactoryPostProcessor extends Object implements org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, ResourceLoaderAware, org.springframework.beans.factory.DisposableBean, org.springframework.core.Ordered; // BeanPostProcessor that handles ScriptFactory definitions, replacing each factory with the actual scripted Java object generated by it.\npublic class StandardScriptEvalException extends RuntimeException; // Exception decorating a ScriptException coming out of JSR-223 script evaluation, i.e.\npublic class StandardScriptEvaluator extends Object implements ScriptEvaluator, org.springframework.beans.factory.BeanClassLoaderAware; // javax.script (JSR-223) based implementation of Spring's ScriptEvaluator strategy interface.\npublic class StandardScriptFactory extends Object implements ScriptFactory, org.springframework.beans.factory.BeanClassLoaderAware; // ScriptFactory implementation based on the JSR-223 script engine abstraction (as included in Java).\npublic abstract class StandardScriptUtils extends Object; // Common operations for dealing with a JSR-223 ScriptEngine.\npublic class StaticScriptSource extends Object implements ScriptSource; // Static implementation of the ScriptSource interface, encapsulating a given String that contains the script source text.\n", "des": "Support classes for Spring's scripting package."}
{"index": 2629, "repo": "shiro-web-2.0.0-alpha-2", "code": "package mgt;\n\npublic enum DefaultFilter extends Enum<DefaultFilter>; // Enum representing all of the default Shiro Filter instances available to web applications.\npublic class DefaultFilterChainManager extends Object implements FilterChainManager; // Default FilterChainManager implementation maintaining a map of Filter instances (key: filter name, value: Filter) as well as a map of NamedFilterLists created from these Filters (key: filter chain name, value: NamedFilterList).\npublic interface FilterChainManager; // A FilterChainManager manages the creation and modification of Filter chains from an available pool of Filter instances.\npublic interface FilterChainResolver; // A FilterChainResolver can resolve an appropriate FilterChain to execute during a ServletRequest.\npublic interface NamedFilterList extends List<javax.servlet.Filter>; // A NamedFilterList is a List of Filter instances that is uniquely identified by a name.\npublic class PathMatchingFilterChainResolver extends Object implements FilterChainResolver; // A FilterChainResolver that resolves FilterChains based on url path matching, as determined by a configurable PathMatcher.\npublic class SimpleNamedFilterList extends Object implements NamedFilterList; // Simple NamedFilterList implementation that is supported by a backing List instance and a simple name property.\n", "des": "The filter 'mgt' (management) package contains components used in managing Filters that are available for filter chain construction, the filter chains themselves, as well as resolving filter chains based by name."}
{"index": 1545, "repo": "spring-context-6.0.11", "code": "package scripting;\n\npackage scripting.bsh; // Package providing integration of BeanShell (and BeanShell2) into Spring's scripting infrastructure.\npackage scripting.config; // Support package for Spring's dynamic language machinery, with XML schema being the primary configuration format.\npackage scripting.groovy; // Package providing integration of Groovy into Spring's scripting infrastructure.\npackage scripting.support; // Support classes for Spring's scripting package.\npublic class ScriptCompilationException extends org.springframework.core.NestedRuntimeException; // Exception to be thrown on script compilation failure.\npublic interface ScriptEvaluator; // Spring's strategy interface for evaluating a script.\npublic interface ScriptFactory; // Script definition interface, encapsulating the configuration of a specific script as well as a factory method for creating the actual scripted Java Object.\npublic interface ScriptSource; // Interface that defines the source of a script.\n", "des": "Core interfaces for Spring's scripting support."}
{"index": 2496, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package reactive;\n\npublic final class EndpointRequest extends Object; // Factory that can be used to create a ServerWebExchangeMatcher for actuator endpoint locations.\npublic static final class EndpointRequest.EndpointServerWebExchangeMatcher extends org.springframework.boot.security.reactive.ApplicationContextServerWebExchangeMatcher<T>; // The ServerWebExchangeMatcher used to match against actuator endpoints.\npublic static final class EndpointRequest.LinksServerWebExchangeMatcher extends org.springframework.boot.security.reactive.ApplicationContextServerWebExchangeMatcher<T>; // The ServerWebExchangeMatcher used to match against the links endpoint.\n@AutoConfiguration(before=org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration.class, after={HealthEndpointAutoConfiguration.class,InfoEndpointAutoConfiguration.class,WebEndpointAutoConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration.class}) @ConditionalOnClass({org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity.class,org.springframework.security.web.server.WebFilterChainProxy.class}) @ConditionalOnMissingBean({org.springframework.security.web.server.SecurityWebFilterChain.class,org.springframework.security.web.server.WebFilterChainProxy.class}) @ConditionalOnWebApplication(type=REACTIVE) public class ReactiveManagementWebSecurityAutoConfiguration extends Object; // Auto-configuration for Reactive Spring Security when actuator is on the classpath.\n", "des": "Auto-configuration for actuator security using WebFlux."}
{"index": 1127, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package fpga;\n\npackage fpga.discovery; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\nInterface AbstractFpgaVendorPlugin; // FPGA plugin interface for vendor to implement.\nClass FpgaDevice; // A class that represents an FPGA card.\nClass FpgaDiscoverer;\nClass FpgaNodeResourceUpdateHandler;\nClass FpgaResourcePlugin;\nClass IntelFpgaOpenclPlugin; // Intel FPGA for OpenCL plugin.\nClass IntelFpgaOpenclPlugin.InnerShellExecutor; // Helper class to run aocl diagnose & determine major/minor numbers.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 3858, "repo": "lucene-core-9.7.0", "code": "package graph;\n\nClass GraphTokenStreamFiniteStrings; // Consumes a TokenStream and creates an Automaton where the transition labels are terms from the TermToBytesRefAttribute.\n", "des": "Utility classes for working with token streams as graphs."}
{"index": 1932, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package template;\n\n@AutoConfiguration(after=WebMvcAutoConfiguration.class) @ConditionalOnClass(groovy.text.markup.MarkupTemplateEngine.class) @EnableConfigurationProperties(GroovyTemplateProperties.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateRuntimeHints.class) public class GroovyTemplateAutoConfiguration extends Object; // Auto-configuration support for Groovy templates in MVC.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer.class) public static class GroovyTemplateAutoConfiguration.GroovyMarkupConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass({jakarta.servlet.Servlet.class,org.springframework.context.i18n.LocaleContextHolder.class,org.springframework.web.servlet.view.UrlBasedViewResolver.class}) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnProperty(name=\"spring.groovy.template.enabled\", matchIfMissing=true) public static class GroovyTemplateAutoConfiguration.GroovyWebConfiguration extends Object;\npublic class GroovyTemplateAvailabilityProvider extends PathBasedTemplateAvailabilityProvider; // TemplateAvailabilityProvider that provides availability information for Groovy view templates.\nprotected static final class GroovyTemplateAvailabilityProvider.GroovyTemplateAvailabilityProperties extends PathBasedTemplateAvailabilityProvider.TemplateAvailabilityProperties;\n@ConfigurationProperties(prefix=\"spring.groovy.template\", ignoreUnknownFields=true) public class GroovyTemplateProperties extends AbstractTemplateViewResolverProperties; // @ConfigurationProperties for configuring Groovy templates.\n", "des": "Auto-configuration for Groovy templates."}
{"index": 1950, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jooq;\n\n@FunctionalInterface public interface DefaultConfigurationCustomizer; // Callback interface that can be implemented by beans wishing to customize the DefaultConfiguration whilst retaining default auto-configuration.\n@AutoConfiguration(after={DataSourceAutoConfiguration.class,TransactionAutoConfiguration.class}) @ConditionalOnClass(org.jooq.DSLContext.class) @ConditionalOnBean(javax.sql.DataSource.class) public class JooqAutoConfiguration extends Object; // Auto-configuration for JOOQ.\n@Configuration(proxyBeanMethods=false) @ConditionalOnMissingBean(org.jooq.DSLContext.class) @EnableConfigurationProperties(JooqProperties.class) public static class JooqAutoConfiguration.DslContextConfiguration extends Object;\npublic class JooqExceptionTranslator extends Object implements org.jooq.ExecuteListener; // Transforms SQLException into a Spring-specific DataAccessException.\n@ConfigurationProperties(prefix=\"spring.jooq\") public class JooqProperties extends Object; // Configuration properties for the JOOQ database library.\npublic class SpringTransactionProvider extends Object implements org.jooq.TransactionProvider; // Allows Spring Transaction to be used with JOOQ.\n", "des": "Auto-configuration for JOOQ."}
{"index": 3872, "repo": "lucene-spatial-extras-9.7.0", "code": "package vector;\n\nClass DistanceValueSource; // A DoubleValuesSource that returns the distance for a PointVectorStrategy.\nClass PointVectorStrategy; // Simple SpatialStrategy which represents Points in two numeric fields.\n", "des": "Spatial strategy that uses two fields."}
{"index": 345, "repo": "hadoop-hdfs-3.3.6", "code": "package command;\n\nClass CancelCommand; // Cancels a running plan.\nClass Command; // Common interface for command handling.\nClass ExecuteCommand; // executes a given plan.\nClass HelpCommand; // Help Command prints out detailed help about each command.\nClass PlanCommand; // Class that implements Plan Command.\nClass QueryCommand; // Gets the current status of disk balancer command.\nClass ReportCommand; // Executes the report command.\n", "des": "Commands for disk balancer command line tool."}
{"index": 2475, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package wavefront;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after={MetricsAutoConfiguration.class,WavefrontAutoConfiguration.class}) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass({io.micrometer.wavefront.WavefrontMeterRegistry.class,com.wavefront.sdk.common.WavefrontSender.class}) @ConditionalOnEnabledMetricsExport(\"wavefront\") @EnableConfigurationProperties(WavefrontProperties.class) @Import(WavefrontSenderConfiguration.class) public class WavefrontMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Wavefront.\npublic class WavefrontPropertiesConfigAdapter extends PushRegistryPropertiesConfigAdapter<WavefrontProperties.Metrics.Export> implements io.micrometer.wavefront.WavefrontConfig; // Adapter to convert WavefrontProperties to a WavefrontConfig.\n", "des": "Support for exporting actuator metrics to Wavefront."}
{"index": 1739, "repo": "spring-batch-integration-5.0.2", "code": "package async;\n\npublic class AsyncItemProcessor<I,O> extends Object implements org.springframework.batch.item.ItemProcessor<I,Future<O>>, org.springframework.beans.factory.InitializingBean; // An ItemProcessor that delegates to a nested processor and in the background.\npublic class AsyncItemWriter<T> extends Object implements org.springframework.batch.item.ItemStreamWriter<Future<T>>, org.springframework.beans.factory.InitializingBean;\npublic class StepExecutionInterceptor extends Object implements org.springframework.messaging.support.ChannelInterceptor; // A ChannelInterceptor that adds the current StepExecution (if there is one) as a header to the message.\n", "des": "Components for executing item processing asynchronously and writing the results when processing is complete."}
{"index": 1025, "repo": "hadoop-aws-3.3.6", "code": "package impl;\n\nInterface NoopSpan.SpanActivationCallbacks; // Activation callbacks.\nClass AbstractAuditSpanImpl; // Base class for the audit spans implementations..\nClass AbstractOperationAuditor; // This is a long-lived service which is created in S3A FS initialize (make it fast!) which provides context for tracking operations made to S3.\nClass ActiveAuditManagerS3A; // Thread management for the active audit.\nClass LoggingAuditor; // The LoggingAuditor logs operations at DEBUG (in SDK Request) and in span lifecycle and S3 request class construction at TRACE.\nClass NoopAuditManagerS3A; // Simple No-op audit manager for use before a real audit chain is set up, and for testing.\nClass NoopAuditor; // An audit service which returns the NoopSpan.\nClass NoopSpan; // A minimal span with no direct side effects.\nClass S3AInternalAuditConstants; // Internal constants; not intended for public use, or for use by any external implementations.\n", "des": "The internal implementations of auditing support."}
{"index": 2828, "repo": "spring-data-r2dbc-3.1.2", "code": "package config;\n\n@Configuration(proxyBeanMethods=false) public abstract class AbstractR2dbcConfiguration extends Object implements ApplicationContextAware; // Base class for Spring Data R2DBC configuration containing bean declarations that must be registered for Spring Data R2DBC to work.\n@Inherited @Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.r2dbc.config.R2dbcAuditingRegistrar.class) public @interface EnableR2dbcAuditing; // Annotation to enable auditing in R2DBC via annotation configuration.\npublic class PersistentEntitiesFactoryBean extends Object implements FactoryBean<PersistentEntities>; // Simple helper to be able to wire the PersistentEntities from a R2dbcMappingContext bean available in the application context.\n", "des": "Configuration classes for Spring Data R2DBC."}
{"index": 297, "repo": "pdfbox-3.0.0-beta1", "code": "package image;\n\nInterface PDImage; // An image in a PDF document.\nClass CCITTFactory; // Factory for creating a PDImageXObject containing a CCITT Fax compressed TIFF image.\nClass JPEGFactory; // Factory for creating a PDImageXObject containing a JPEG compressed image.\nClass LosslessFactory; // Factory for creating a PDImageXObject containing a lossless compressed image.\nClass PDImageXObject; // An Image XObject.\nClass PDInlineImage; // An inline image object which uses a special syntax to express the data for a small image directly within the content stream.\n", "des": "This package deals with images that are stored in a PDF document."}
{"index": 2700, "repo": "spring-integration-http-6.1.2", "code": "package support;\n\npublic class DefaultHttpHeaderMapper extends Object implements org.springframework.integration.mapping.HeaderMapper<org.springframework.http.HttpHeaders>, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // Default HeaderMapper implementation for HTTP.\npublic class IntegrationWebExchangeBindException extends org.springframework.web.bind.support.WebExchangeBindException; // A WebExchangeBindException extension for validation error with a failed message context.\n", "des": "Provides classes to support Http endpoints, including header mapping."}
{"index": 2232, "repo": "spring-data-commons-3.1.2", "code": "package util;\n\npublic class AnnotatedTypeScanner extends Object implements ResourceLoaderAware, EnvironmentAware; // Scanner to find types with annotations on the classpath.\npublic class AnnotationDetectionFieldCallback extends Object implements ReflectionUtils.FieldCallback; // A ReflectionUtils.FieldCallback that will inspect each field for a given annotation.\npublic class AnnotationDetectionMethodCallback<A extends Annotation> extends Object implements ReflectionUtils.MethodCallback; // ReflectionUtils.MethodCallback to find annotations of a given type.\npublic abstract class BeanLookup extends Object; // Simple helper to allow lenient lookup of beans of a given type from a ListableBeanFactory.\npublic interface CastUtils;\n@Deprecated(since=\"3.0\", forRemoval=true) public class ClassTypeInformation<S> extends Object;\npublic interface CloseableIterator<T> extends Iterator<T>, Closeable; // A CloseableIterator serves as a bridging data structure for the underlying data store specific results that can be wrapped in a Java 8 java.util.stream.Stream.\npublic interface CustomCollectionRegistrar; // An SPI to register custom collection types.\npublic class CustomCollections extends Object; // Central API to expose information about custom collections present for Spring Data.\npublic class DirectFieldAccessFallbackBeanWrapper extends BeanWrapperImpl; // Custom extension of BeanWrapperImpl that falls back to direct field access in case the object or type being wrapped does not use accessor methods.\npublic final class KotlinReflectionUtils extends Object; // Reflection utility methods specific to Kotlin reflection.\npublic class Lazy<T> extends Object implements Supplier<T>; // Simple value type to delay the creation of an object using a Supplier returning the produced object for subsequent lookups.\npublic class MethodInvocationRecorder extends Object; // API to record method invocations via method references on a proxy.\npublic static interface MethodInvocationRecorder.PropertyNameDetectionStrategy;\npublic static class MethodInvocationRecorder.Recorded<T> extends Object;\npublic static interface MethodInvocationRecorder.Recorded.ToCollectionConverter<T,S> extends Function<T,Collection<S>>;\npublic static interface MethodInvocationRecorder.Recorded.ToMapConverter<T,S> extends Function<T,Map<?,S>>;\npublic abstract class NullableUtils extends Object; // Utility methods to introspect nullability rules declared in packages, classes and methods.\npublic class NullableWrapper extends Object; // Simple value object to wrap a nullable delegate.\n", "des": "Core utility APIs such as a type information framework to resolve generic types."}
{"index": 1452, "repo": "spring-data-redis-3.1.2", "code": "package convert;\n\npublic class Bucket extends Object; // Bucket is the data bag for Redis hash structures to be used with RedisData.\npublic static class Bucket.BucketPropertyPath extends Object; // Value object representing a path within a Bucket.\npublic class CompositeIndexResolver extends Object implements IndexResolver; // Composite IndexResolver implementation that iterates over a given collection of delegate IndexResolver instances.\npublic class DefaultRedisTypeMapper extends DefaultTypeMapper<Bucket.BucketPropertyPath> implements RedisTypeMapper; // Default implementation of RedisTypeMapper allowing configuration of the key to lookup and store type information via Bucket.BucketPropertyPath in buckets.\npublic class GeoIndexedPropertyValue extends Object implements IndexedData; // IndexedData implementation indicating storage of data within a Redis GEO structure.\npublic interface IndexedData; // IndexedData represents a secondary index for a property path in a given keyspace.\npublic interface IndexResolver; // IndexResolver extracts secondary index structures to be applied on a given path, PersistentProperty and value.\npublic abstract class Jsr310Converters extends Object; // Helper class to register JSR-310 specific Converter implementations in case the we're running on Java 8.\npublic class KeyspaceConfiguration extends Object; // KeyspaceConfiguration allows programmatic setup of keyspaces and time to live options for certain types.\npublic static class KeyspaceConfiguration.KeyspaceSettings extends Object;\npublic class MappingConfiguration extends Object; // MappingConfiguration is used for programmatic configuration of secondary indexes, key prefixes, expirations and the such.\npublic class MappingRedisConverter extends Object implements RedisConverter, InitializingBean; // RedisConverter implementation creating flat binary map structure out of a given domain type.\npublic static class MappingRedisConverter.BinaryKeyspaceIdentifier extends Object; // Value object representing a binary Redis Hash/Object identifier composed from keyspace and object id in the form of keyspace:id.\npublic static class MappingRedisConverter.KeyspaceIdentifier extends Object; // Value object representing a Redis Hash/Object identifier composed from keyspace and object id in the form of keyspace:id.\npublic class PathIndexResolver extends Object implements IndexResolver; // IndexResolver implementation considering properties annotated with Indexed or paths set up in IndexConfiguration.\npublic interface RedisConverter extends EntityConverter<RedisPersistentEntity<?>,RedisPersistentProperty,Object,RedisData>; // Redis specific EntityConverter.\npublic class RedisCustomConversions extends CustomConversions; // Value object to capture custom conversion.\n", "des": "Converters for Redis repository support utilizing mapping metadata."}
{"index": 897, "repo": "commons-jcs3-core-3.1", "code": "package behavior;\n\nInterface ICache<K,V>; // This is the top level interface for all cache like structures.\nInterface ICacheElement<K,V>; // Every item is the cache is wrapped in an ICacheElement.\nInterface ICacheElementSerialized<K,V>; // This interface defines the behavior of the serialized element wrapper.\nInterface ICacheEventQueue<K,V>; // Interface for a cache event queue.\nInterface ICacheListener<K,V>; // Used to receive a cache event notification.\nInterface ICacheObserver; // Used to register interest in receiving cache changes.\nInterface ICacheService<K,V>; // Used to retrieve and update the cache.\nInterface ICacheServiceAdmin; // Description of the Interface\nInterface ICacheServiceNonLocal<K,V>; // Used to retrieve and update non local caches, such as the remote and lateral caches.\nInterface ICacheType; // Interface implemented by a specific cache.\nInterface ICompositeCacheAttributes; // This defines the minimal behavior for the Cache Configuration settings.\nInterface ICompositeCacheManager; // I need the interface so I can plug in mock managers for testing.\nInterface IElementAttributes; // Interface for cache element attributes classes.\nInterface IElementSerializer; // Defines the behavior for cache element serializers.\nInterface IProvideScheduler; // Marker interface for providers of the central ScheduledExecutorService\nInterface IRequireScheduler; // Marker interface to allow the injection of a central ScheduledExecutorService for all modules requiring scheduled background operations.\nInterface IShutdownObservable; // ShutdownObservers can observe ShutdownObservable objects.\nInterface IShutdownObserver; // This interface is required of all shutdown observers.\nInterface IZombie; // Interface to mark an object as zombie for error recovery purposes.\nEnum ICacheEventQueue.QueueType;\nEnum ICacheType.CacheType;\nEnum ICompositeCacheAttributes.DiskUsagePattern;\n", "des": "Interfaces used by the core and the auxiliary caches."}
{"index": 3577, "repo": "lucene-sandbox-9.7.0", "code": "package queries;\n\nClass FuzzyLikeThisQuery; // Fuzzifies ALL terms provided as strings and then picks the best n differentiating terms.\n", "des": "Additional queries (some may have caveats or limitations)"}
{"index": 2012, "repo": "spring-boot-devtools-3.1.1", "code": "package logger;\n\npublic final class DevToolsLogFactory extends Object; // Devtools deferred logging support.\n", "des": "Devtools specific logging concerns."}
{"index": 1759, "repo": "spring-data-mongodb-4.1.2", "code": "package messaging;\n\npublic interface Cancelable; // Cancelable allows stopping long running tasks and freeing underlying resources.\npublic class ChangeStreamRequest<T> extends Object implements SubscriptionRequest<com.mongodb.client.model.changestream.ChangeStreamDocument<org.bson.Document>,T,ChangeStreamRequest.ChangeStreamRequestOptions>; // SubscriptionRequest implementation to be used for listening to Change Streams via a MessageListenerContainer using the synchronous MongoDB Java driver.\npublic static class ChangeStreamRequest.ChangeStreamRequestBuilder<T> extends Object; // Builder for creating ChangeStreamRequest.\npublic static class ChangeStreamRequest.ChangeStreamRequestOptions extends Object implements SubscriptionRequest.RequestOptions; // SubscriptionRequest.RequestOptions implementation specific to a ChangeStreamRequest.\npublic class DefaultMessageListenerContainer extends Object implements MessageListenerContainer; // Simple Executor based MessageListenerContainer implementation for running tasks like listening to MongoDB Change Streams and tailable cursors.\npublic interface Message<S,T>; // General message abstraction for any type of Event / Message published by MongoDB server to the client.\npublic static class Message.MessageProperties extends Object;\npublic static class Message.MessageProperties.MessagePropertiesBuilder extends Object; // Builder for Message.MessageProperties.\n@FunctionalInterface public interface MessageListener<S,T>; // Listener interface to receive delivery of Messages.\npublic interface MessageListenerContainer extends SmartLifecycle; // Internal abstraction used by the framework representing a message listener container.\npublic interface Subscription extends Cancelable; // The Subscription is the link between the SubscriptionRequest and the actual running Task.\npublic interface SubscriptionRequest<S,T,O extends SubscriptionRequest.RequestOptions>; // The actual SubscriptionRequest sent to the MessageListenerContainer.\npublic static interface SubscriptionRequest.RequestOptions; // Options for specifying the behaviour of the SubscriptionRequest.\npublic class TailableCursorRequest<T> extends Object implements SubscriptionRequest<org.bson.Document,T,SubscriptionRequest.RequestOptions>; // SubscriptionRequest implementation to be used to listen to query results in a Capped Collection using a Tailable Cursor.\npublic static class TailableCursorRequest.TailableCursorRequestBuilder<T> extends Object; // Builder for creating TailableCursorRequest.\npublic static class TailableCursorRequest.TailableCursorRequestOptions extends Object implements SubscriptionRequest.RequestOptions; // SubscriptionRequest.RequestOptions implementation specific to a TailableCursorRequest.\n", "des": "MongoDB specific messaging support for listening to eg."}
{"index": 1816, "repo": "spring-integration-mail-6.1.2", "code": "package dsl;\n\npublic class ImapIdleChannelAdapterSpec extends org.springframework.integration.dsl.MessageProducerSpec<ImapIdleChannelAdapterSpec,ImapIdleChannelAdapter> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessageProducerSpec for a ImapIdleChannelAdapter.\npublic class ImapMailInboundChannelAdapterSpec extends MailInboundChannelAdapterSpec<ImapMailInboundChannelAdapterSpec,ImapMailReceiver>; // A MailInboundChannelAdapterSpec for IMAP.\npublic final class Mail extends Object; // The factory for Spring Integration Mail components.\npublic class MailHeadersBuilder extends org.springframework.integration.support.MapBuilder<MailHeadersBuilder,String,Object>; // The Mail specific MapBuilder implementation.\npublic abstract class MailInboundChannelAdapterSpec<S extends MailInboundChannelAdapterSpec<S,R>,R extends AbstractMailReceiver> extends org.springframework.integration.dsl.MessageSourceSpec<S,MailReceivingMessageSource> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessageSourceSpec for a MailReceivingMessageSource.\npublic class MailSendingMessageHandlerSpec extends org.springframework.integration.dsl.MessageHandlerSpec<MailSendingMessageHandlerSpec,MailSendingMessageHandler>;\npublic class Pop3MailInboundChannelAdapterSpec extends MailInboundChannelAdapterSpec<Pop3MailInboundChannelAdapterSpec,Pop3MailReceiver>; // A MailInboundChannelAdapterSpec for POP3.\n", "des": "Provides Mail Components for the Java DSL."}
{"index": 1481, "repo": "tribuo-core-4.3.1", "code": "package evaluation;\n\npackage evaluation.metrics; // This package contains the infrastructure classes for building evaluation metrics.\npublic abstract class AbstractEvaluator<T extends Output<T>,C extends MetricContext<T>,E extends Evaluation<T>,M extends EvaluationMetric<T,C>> extends Object implements Evaluator<T,E>; // Base class for evaluators.\npublic class CrossValidation<T extends Output<T>,E extends Evaluation<T>> extends Object; // A class that does k-fold cross-validation.\npublic final class DescriptiveStats extends Object; // Descriptive statistics calculated across a list of doubles.\npublic interface Evaluation<T extends Output<T>> extends com.oracle.labs.mlrg.olcut.provenance.Provenancable<EvaluationProvenance>; // An immutable evaluation of a specific model and dataset.\npublic final class EvaluationAggregator extends Object; // Aggregates metrics from a list of evaluations, or a list of models and datasets.\n@FunctionalInterface public interface EvaluationRenderer<T extends Output<T>,E extends Evaluation<T>>; // Renders an Evaluation into a String.\npublic interface Evaluator<T extends Output<T>,E extends Evaluation<T>>; // An evaluation factory which produces immutable Evaluations of a given Dataset using the given Model.\npublic class KFoldSplitter<T extends Output<T>> extends Object; // A k-fold splitter to be used in cross-validation.\npublic static class KFoldSplitter.TrainTestFold<T extends Output<T>> extends Object; // Stores a train/test split for a dataset.\npublic final class OnlineEvaluator<T extends Output<T>,E extends Evaluation<T>> extends Object; // An evaluator which aggregates predictions and produces Evaluations covering all the Predictions it has seen or created.\npublic class TrainTestSplitter<T extends Output<T>> extends Object; // Splits data into training and testing sets.\npublic static class TrainTestSplitter.SplitDataSourceProvenance extends Object implements DataSourceProvenance; // Provenance for a split data source.\n", "des": "Evaluation base classes, along with code for train/test splits and cross validation."}
{"index": 1738, "repo": "spring-jdbc-6.0.11", "code": "package xml;\n\npublic class Jdbc4SqlXmlHandler extends Object implements SqlXmlHandler; // Default implementation of the SqlXmlHandler interface.\npublic class SqlXmlFeatureNotImplementedException extends org.springframework.dao.InvalidDataAccessApiUsageException; // Exception thrown when the underlying implementation does not support the requested feature of the API.\npublic interface SqlXmlHandler; // Abstraction for handling XML fields in specific databases.\npublic interface SqlXmlValue extends SqlValue; // Subinterface of SqlValue that supports passing in XML data to specified column and adds a cleanup callback, to be invoked after the value has been set and the corresponding statement has been executed.\npublic interface XmlBinaryStreamProvider; // Interface defining handling involved with providing OutputStream data for XML input.\npublic interface XmlCharacterStreamProvider; // Interface defining handling involved with providing Writer data for XML input.\npublic interface XmlResultProvider; // Interface defining handling involved with providing Result data for XML input.\n", "des": "Abstraction for handling fields of SQLXML data type."}
{"index": 2783, "repo": "spring-security-ldap-6.1.2", "code": "package server;\n\n@Deprecated public class ApacheDSContainer extends Object implements EmbeddedLdapServerContainer, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, org.springframework.context.Lifecycle, org.springframework.context.ApplicationContextAware;\npublic interface EmbeddedLdapServerContainer; // Provides lifecycle services for an embedded LDAP server.\npublic class UnboundIdContainer extends Object implements EmbeddedLdapServerContainer, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, org.springframework.context.Lifecycle, org.springframework.context.ApplicationContextAware;\n", "des": "Embedded Apache Directory Server implementation, as used by the configuration namespace."}
{"index": 3358, "repo": "opencms-core-15.0", "code": "package sitemap;\n\nInterface I_CmsLocaleCompareContext; // Provides information about the current state of the locale comparison editor.\nClass CmsCopyPageDialog; // Dialog used to copy container pages including their elements.\nClass CmsLocaleComparePanel; // View used to compare sitemaps across locales.\nClass CmsLocaleLinkTargetSelectionDialog; // Dialog used to select a resource which should be linked to a locale group.\nClass CmsSitemapExtension; // Extension used for the Vaadin dialogs in the sitemap editor.\nClass CmsSitemapTreeController; // Manages the sitemap tree in the 'locale comparison' view in the sitemap editor.\nClass CmsSitemapTreeDataProvider; // Loads node data for the sitemap tree.\nClass CmsSitemapTreeNode; // Widget displaying a sitemap tree node, with an openable area for its children.\nClass CmsSitemapTreeNodeData; // Represents the data of a sitemap tree node.\nClass CmsSitemapTreeNodeOpener; // Button used for opening / closing tree levels.\nClass CmsSitemapUI; // UI class for Vaadin dialogs in the sitemap editor.\nClass CmsUnlinkDialog; // Dialog to confirm detaching a resource from a locale group.\n", "des": "Vaadin GUI components and utilities for use in the sitemap editor."}
{"index": 1765, "repo": "spring-data-mongodb-4.1.2", "code": "package gridfs;\n\npublic class GridFsCriteria extends Criteria; // GridFs-specific helper class to define Criterias.\npublic interface GridFsObject<ID,CONTENT>; // A common interface when dealing with GridFs items using Spring Data.\npublic static class GridFsObject.Options extends Object; // Additional, context relevant information.\npublic interface GridFsOperations extends ResourcePatternResolver; // Collection of operations to store and read files from MongoDB GridFS.\npublic class GridFsResource extends InputStreamResource implements GridFsObject<Object,InputStream>; // GridFSFile based Resource implementation.\npublic class GridFsTemplate extends Object implements GridFsOperations, ResourcePatternResolver; // GridFsOperations implementation to store content into MongoDB GridFS.\npublic class GridFsUpload<ID> extends Object implements GridFsObject<ID,InputStream>; // Upload descriptor for a GridFS file upload.\npublic static class GridFsUpload.GridFsUploadBuilder<T> extends Object; // Builder to create GridFsUpload in a fluent way.\npublic interface ReactiveGridFsOperations; // Collection of operations to store and read files from MongoDB GridFS using reactive infrastructure.\npublic class ReactiveGridFsResource extends Object implements GridFsObject<Object,org.reactivestreams.Publisher<DataBuffer>>; // Reactive GridFSFile based Resource implementation.\npublic class ReactiveGridFsTemplate extends Object implements ReactiveGridFsOperations; // ReactiveGridFsOperations implementation to store content into MongoDB GridFS.\npublic class ReactiveGridFsUpload<ID> extends Object implements GridFsObject<ID,org.reactivestreams.Publisher<DataBuffer>>; // Upload descriptor for a GridFS file upload.\npublic static class ReactiveGridFsUpload.ReactiveGridFsUploadBuilder<T> extends Object; // Builder to create ReactiveGridFsUpload in a fluent way.\n", "des": "Support for MongoDB GridFS feature."}
{"index": 2789, "repo": "spring-expression-6.0.11", "code": "package standard;\n\npublic final class SpelCompiler extends Object implements org.springframework.asm.Opcodes; // A SpelCompiler will take a regular parsed expression and create (and load) a class containing byte code that does the same thing as that expression.\npublic class SpelExpression extends Object implements Expression; // A SpelExpression represents a parsed (valid) expression that is ready to be evaluated in a specified context.\npublic class SpelExpressionParser extends TemplateAwareExpressionParser; // SpEL parser.\n", "des": "SpEL's standard parser implementation."}
{"index": 2217, "repo": "spring-data-commons-3.1.2", "code": "package core;\n\npackage core.support; // Base classes to implement repositories for various data stores.\npublic interface CrudMethods; // Meta-information about the CRUD methods of a repository.\npublic interface EntityInformation<T,ID> extends EntityMetadata<T>; // Extension of EntityMetadata to add functionality to query information of entity instances.\npublic interface EntityMetadata<T>; // Metadata for entity types.\npublic interface NamedQueries; // Abstraction of a map of NamedQueries that can be looked up by their names.\npublic class RepositoryCreationException extends InvalidDataAccessApiUsageException; // Exception thrown in the context of repository creation.\npublic interface RepositoryInformation extends RepositoryMetadata; // Additional repository specific information\npublic abstract class RepositoryInformationSupport extends Object implements RepositoryInformation; // Common base class for RepositoryInformation that delays resolution of RepositoryMetadata and the repository base to the latest possible time.\npublic interface RepositoryMetadata; // Metadata for repository interfaces.\n", "des": "Core abstractions for repository implementation."}
{"index": 1989, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package validation;\n\n@AutoConfiguration @ConditionalOnClass(jakarta.validation.executable.ExecutableValidator.class) @ConditionalOnResource(resources=\"classpath:META-INF/services/jakarta.validation.spi.ValidationProvider\") @Import(org.springframework.boot.autoconfigure.validation.PrimaryDefaultValidatorPostProcessor.class) public class ValidationAutoConfiguration extends Object; // Auto-configuration to configure the validation infrastructure.\n@FunctionalInterface public interface ValidationConfigurationCustomizer; // Callback interface that can be used to customize Configuration.\npublic class ValidatorAdapter extends Object implements org.springframework.validation.SmartValidator, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Validator implementation that delegates calls to another Validator.\n", "des": "Auto-configuration for (JSR-303) Validation."}
{"index": 2982, "repo": "pulsar-broker-3.0.0", "code": "package util;\n\npublic class LogIndexLagBackoff extends Object;\n", "des": "Implementation of a transaction tools."}
{"index": 3361, "repo": "opencms-core-15.0", "code": "package util;\n\nInterface I_CmsCloseable; // Closeable interface that throws no exceptions.\nInterface I_CmsHtmlConverter; // HTML converters can be used to clean up HTML code and/or pretty print the code.\nInterface I_CmsHtmlNodeVisitor; // Interface for a combination of a visitor of HTML documents along with the hook to start the parser / lexer that triggers the visit.\nInterface I_CmsMacroResolver; // Describes a macro mapper, which is used to efficiently resolve macros in the form of %(key) or ${key} in an input String.\nInterface I_CmsRegexSubstitution; // Interface for generating a substitution for a pattern in a string.\nClass A_CmsHtmlConverter;\nClass A_CmsModeIntEnumeration; // Base class for all integer mode enumeration classes.\nClass A_CmsModeStringEnumeration; // Base class for all string mode enumeration classes.\nClass CmsByteArrayDataSource; // A DataSource backed by a byte array.\nClass CmsCollectionsGenericWrapper; // Provides Map wrapping utility functions for Java generics.\nClass CmsCollectionsGenericWrapper.MapWrapper<K,​V>; // Wrapper for lazy maps providing a better containsKey implementation.\nClass CmsConstantMap<K,​V>; // Returns the constant Object the map was initialized with for all CmsConstantMap.get(Object) calls, regardless of what the actual key is.\nClass CmsDataTypeUtil; // Utilities to handle basic data types.\nClass CmsDateUtil; // Utilities to get and set formated dates in OpenCms.\nClass CmsDefaultSet<T>; // A utility class used for keeping track of a set of objects.\nClass CmsExpiringValue<T>; // Simple utility class for caching a single value with a given cache expiration time.\nClass CmsFileUtil; // Provides File utility functions.\nClass CmsFileUtil.FileWalkState; // Data bean which walkFileSystem passes to its callback.\nClass CmsGeoUtil; // Utility methods for processing geo coordinates.\nClass CmsHtml2TextConverter; // Extracts the HTML page content.\nClass CmsHtmlConverter; // HTML cleaner and pretty printer.\nClass CmsHtmlConverterJTidy; // HTML cleaner and pretty printer using JTidy.\nClass CmsHtmlConverterOption; // Represents a single HTML converter configuration as defined in the OpenCms configuration file opencms-vfs.xml.\n", "des": "Utility functions for String manipulation and other often used tasks."}
{"index": 2164, "repo": "wicket-core-10.0.0-M1", "code": "package resource;\n\npublic final class CircularDependencyException extends WicketRuntimeException; // Thrown when a circular dependency is detected between resources.\npublic class CompositeCssCompressor extends Object implements IScopeAwareTextResourceProcessor, ICssCompressor; // Used to apply several ICssCompressor to the CSS compression. Usage:\npublic class CompositeJavaScriptCompressor extends Object implements IScopeAwareTextResourceProcessor, IJavaScriptCompressor; // Used to apply several IJavaScriptCompressor to the javascript compression. Usage:\npublic class CoreLibrariesContributor extends Object; // A helper class that contributes all required JavaScript resources needed for Wicket Ajax functionality\npublic class CssUrlReplacer extends Object implements IScopeAwareTextResourceProcessor, ICssCompressor; // This compressor is used to replace URLs within CSS files with URLs created from PackageResourceReferences that belongs to their corresponding resources (e.g images).The scope of the CSS file is used to create the PackageResourceReferences.\npublic class FileSystemJarPathService extends Object implements FileSystemPathService; // Gets the actual path for a jar file system\npublic interface FileSystemPathService; // Gets the actual path for a specific file system.\npublic class FileSystemResource extends AbstractResource; // Used to provide resources based on the on Java NIO FileSystem API. For more information see FileSystemResourceReference\npublic class FileSystemResourceReference extends ResourceReference; // This resource reference is used to provide a reference to a resource based on Java NIO FileSystem API. To implement a mime type detection refer to the documentation of Files.probeContentType(Path) and provide an implementation for java.nio.file.spi.FileTypeDetector in the META-INF/services folder for jars or in the /WEB-INF/classes/META-INF/services folder for webapps You can optionally override FileSystemResourceReference.getFileSystemResource() to provide an inline mime type detection, which is preferred to the default detection. Example:\n@FunctionalInterface public interface IPropertiesChangeListener; // To be implemented by listeners interested in PropertiesFactory events fired after a change to the properties has been detected\npublic interface IPropertiesFactory; // Implementations are responsible for locating Properties objects, which are a thin wrapper around ValueMap and is used to locate localized messages.\npublic interface IPropertiesFactoryContext; // environment required for properties factory\npublic interface IPropertiesLoader; // Property loaders as used by PropertiesFactory to load properties\n", "des": "Locale aware resouce loaders."}
{"index": 3664, "repo": "solr-core-9.3.0", "code": "package index;\n\nClass DefaultMergePolicyFactory; // A MergePolicyFactory for the default MergePolicy.\nClass LogByteSizeMergePolicyFactory; // A MergePolicyFactory for LogByteSizeMergePolicy objects.\nClass LogDocMergePolicyFactory; // A MergePolicyFactory for LogDocMergePolicy objects.\nClass MergePolicyFactory; // A factory for creating a MergePolicy.\nClass MergePolicyFactoryArgs;\nClass NoMergePolicyFactory;\nClass SimpleMergePolicyFactory; // A MergePolicyFactory for simple MergePolicy objects.\nClass SlowCompositeReaderWrapper; // This class forces a composite reader (eg a MultiReader or DirectoryReader) to emulate a LeafReader.\nClass SortingMergePolicy;\nClass SortingMergePolicyFactory; // A MergePolicyFactory for SortingMergePolicy objects.\nClass TieredMergePolicyFactory; // A MergePolicyFactory for TieredMergePolicy objects.\nClass UpgradeIndexMergePolicyFactory; // A MergePolicyFactory for UpgradeIndexMergePolicy objects.\nClass WrapperMergePolicyFactory; // A MergePolicyFactory for wrapping additional factories.\n", "des": "Indexing related classes."}
{"index": 1943, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jdbc;\n\npackage jdbc.metadata; // Auto-configuration for JDBC Metadata.\n@AutoConfiguration(before=SqlInitializationAutoConfiguration.class) @ConditionalOnClass({javax.sql.DataSource.class,org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType.class}) @ConditionalOnMissingBean(type=\"io.r2dbc.spi.ConnectionFactory\") @EnableConfigurationProperties(DataSourceProperties.class) @Import(DataSourcePoolMetadataProvidersConfiguration.class) public class DataSourceAutoConfiguration extends Object; // Auto-configuration for DataSource.\n@Configuration(proxyBeanMethods=false) @Conditional(org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.EmbeddedDatabaseCondition.class) @ConditionalOnMissingBean({javax.sql.DataSource.class,javax.sql.XADataSource.class}) @Import(EmbeddedDataSourceConfiguration.class) protected static class DataSourceAutoConfiguration.EmbeddedDatabaseConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @Conditional(org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.PooledDataSourceCondition.class) @ConditionalOnMissingBean({javax.sql.DataSource.class,javax.sql.XADataSource.class}) @Import({org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration.Hikari.class,org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration.Tomcat.class,org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration.Dbcp2.class,org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration.OracleUcp.class,org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration.Generic.class,org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration.class}) protected static class DataSourceAutoConfiguration.PooledDataSourceConfiguration extends Object;\n@ConfigurationProperties(prefix=\"spring.datasource\") public class DataSourceProperties extends Object implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Base class for configuration of a data source.\npublic static class DataSourceProperties.Xa extends Object; // XA Specific datasource settings.\n", "des": "Auto-configuration for JDBC."}
{"index": 1965, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package netty;\n\npublic final class ReactorNettyConfigurations extends Object; // Configurations for Reactor Netty.\n@Configuration(proxyBeanMethods=false) @EnableConfigurationProperties(ReactorNettyProperties.class) public static class ReactorNettyConfigurations.ReactorResourceFactoryConfiguration extends Object;\n@ConfigurationProperties(prefix=\"spring.reactor.netty\") public class ReactorNettyProperties extends Object; // Configuration properties for Reactor Netty.\n", "des": "Auto-configuration for Reactor Netty."}
{"index": 1182, "repo": "commons-math3-3.6.1", "code": "package util;\n\nInterface MapDataVisualization; // Interface for algorithms that compute some metrics of the projection of data on a 2D-map.\nInterface MapVisualization; // Interface for algorithms that compute some property of a 2D-map.\nClass HitHistogram; // Computes the hit histogram.\nClass LocationFinder; // Helper class to find the grid coordinates of a neuron.\nClass LocationFinder.Location; // Container holding a (row, column) pair.\nClass QuantizationError; // Computes the quantization error histogram.\nClass SmoothedDataHistogram; // Visualization of high-dimensional data projection on a 2D-map.\nClass TopographicErrorHistogram; // Computes the topographic error histogram.\nClass UnifiedDistanceMatrix; // U-Matrix visualization of high-dimensional data projection.\n", "des": "Utilities to visualize two-dimensional neural networks."}
{"index": 3896, "repo": "solr-solrj-9.3.0", "code": "package util;\n\nInterface AsyncListener<T>; // Listener for async requests\nInterface Cancellable;\nClass ClientUtils;\nClass Constants;\nClass SolrBasicAuthentication; // BasicAuthentication that does not care about uri and realm\nClass SolrIdentifierValidator; // Ensures that provided identifiers align with Solr's recommendations/requirements for choosing collection, core, etc identifiers.\nEnum SolrIdentifierValidator.IdentifierType;\n", "des": "Utilities for Solr client applications."}
{"index": 2857, "repo": "spring-integration-core-6.1.2", "code": "package support;\n\npublic class FixedSubscriberChannelPrototype extends Object implements org.springframework.messaging.MessageChannel; // An \"artificial\" MessageChannel implementation which will be unwrapped to the FixedSubscriberChannel on the bean registration phase.\npublic record MessageChannelReference(String name) extends Record implements org.springframework.messaging.MessageChannel; // An \"artificial\" MessageChannel implementation which will be unwrapped to the MessageChannel bean on the bean registration phase.\n", "des": "Provides various support classes used across Spring Integration Java DSL Components."}
{"index": 1445, "repo": "spring-data-redis-3.1.2", "code": "package convert;\n\npublic abstract class Converters extends Object; // Common type converters.\npublic class ListConverter<S,T> extends Object implements Converter<List<S>,List<T>>; // Converts a List of values of one type to a List of values of another type\npublic class LongToBooleanConverter extends Object implements Converter<Long,Boolean>; // Converts Longs to Booleans\npublic class MapConverter<S,T> extends Object implements Converter<Map<S,S>,Map<T,T>>; // Converts a Map of values of one key/value type to a Map of values of another type\npublic enum MapToPropertiesConverter extends Enum<MapToPropertiesConverter> implements Converter<Map<?,?>,Properties>;\npublic class SetConverter<S,T> extends Object implements Converter<Set<S>,Set<T>>; // Converts a Set of values of one type to a Set of values of another type preserving item order.\npublic class StringToDataTypeConverter extends Object implements Converter<String,DataType>; // Converts Strings to DataTypes\npublic class StringToPropertiesConverter extends Object implements Converter<String,Properties>; // Converts Strings to Properties\npublic class StringToRedisClientInfoConverter extends Object implements Converter<String[],List<RedisClientInfo>>; // Converter implementation to create one RedisClientInfo per line entry in given String array.\npublic class TransactionResultConverter<T> extends Object implements Converter<List<Object>,List<Object>>; // Converts the results of transaction exec using a supplied Queue of FutureResults.\n", "des": "Redis specific converters used for sending data and parsing responses."}
{"index": 2257, "repo": "spring-vault-core-3.0.4", "code": "package authentication;\n\npackage authentication.event; // Support classes for authentication application events.\n@Deprecated(since=\"2.2\", forRemoval=true) public class AppIdAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory;\n@Deprecated(since=\"2.2\", forRemoval=true) public class AppIdAuthenticationOptions extends Object;\npublic static class AppIdAuthenticationOptions.AppIdAuthenticationOptionsBuilder extends Object; // Builder for AppIdAuthenticationOptions.\n@Deprecated(since=\"2.2\", forRemoval=true) @FunctionalInterface public interface AppIdUserIdMechanism;\npublic class AppRoleAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory; // AppRole implementation of ClientAuthentication.\npublic class AppRoleAuthenticationOptions extends Object; // Authentication options for AppRoleAuthentication.\npublic static class AppRoleAuthenticationOptions.AppRoleAuthenticationOptionsBuilder extends Object; // Builder for AppRoleAuthenticationOptions.\npublic static interface AppRoleAuthenticationOptions.RoleId; // RoleId type encapsulating how the roleId is actually obtained.\npublic static interface AppRoleAuthenticationOptions.SecretId; // SecretId type encapsulating how the secretId is actually obtained.\npublic abstract class AuthenticationEventPublisher extends Object; // Publisher for AuthenticationEvents.\npublic class AuthenticationSteps extends Object; // Authentication DSL allowing flow composition to create a VaultToken.\npublic static class AuthenticationSteps.HttpRequest<T> extends Object; // Value object representing a HTTP request.\npublic static class AuthenticationSteps.HttpRequestBuilder extends Object; // Builder for AuthenticationSteps.HttpRequest.\npublic static class AuthenticationSteps.Node<T> extends Object; // Intermediate authentication step with authentication flow operators represented as node.\npublic static class AuthenticationSteps.Pair<L,R> extends Object; // A tuple of two things.\npublic class AuthenticationStepsExecutor extends Object implements ClientAuthentication; // Synchronous executor for AuthenticationSteps using RestOperations to login using authentication flows.\n@FunctionalInterface public interface AuthenticationStepsFactory; // Factory interface for components that create AuthenticationSteps.\npublic class AuthenticationStepsOperator extends Object implements VaultTokenSupplier; // VaultTokenSupplier using AuthenticationSteps to create an authentication flow emitting VaultToken.\npublic class AwsEc2Authentication extends Object implements ClientAuthentication, AuthenticationStepsFactory; // AWS-EC2 login implementation.\npublic class AwsEc2AuthenticationOptions extends Object; // Authentication options for AwsEc2Authentication.\n", "des": "Support for authentication and session management."}
{"index": 3509, "repo": "opennlp-tools-2.2.0", "code": "package chunker;\n\nInterface Chunker; // The interface for chunkers which provide chunk tags for a sequence of tokens.\nInterface ChunkerContextGenerator; // Interface for a BeamSearchContextGenerator used in syntactic chunking.\nInterface ChunkerEvaluationMonitor; // A marker interface for evaluating chunkers.\nClass ChunkerCrossValidator; // Cross validator for Chunker.\nClass ChunkerEvaluator; // The ChunkerEvaluator measures the performance of the given Chunker with the provided reference samples.\nClass ChunkerEventStream; // Class for creating an event stream out of data files for training a Chunker.\nClass ChunkerFactory;\nClass ChunkerME; // The class represents a maximum-entropy-based Chunker.\nClass ChunkerModel; // The ChunkerModel is the model used by a learnable Chunker.\nClass ChunkSample; // Class for holding chunks for a single unit of text.\nClass ChunkSampleSequenceStream; // A SequenceStream implementation encapsulating samples.\nClass ChunkSampleStream; // Parses the conll 2000 shared task shallow parser training data.\nClass DefaultChunkerContextGenerator; // Features based on chunking model described in Fei Sha and Fernando Pereira.\nClass DefaultChunkerSequenceValidator; // The default chunker SequenceValidator implementation.\n", "des": "Package related to finding non-recursive syntactic annotation such as noun phrase chunks."}
{"index": 233, "repo": "nutch-2.4", "code": "package components;\n\nClass ColorEnumLabel<E extends java.lang.Enum<E>>; // Label which renders connection status as bootstrap label\nClass ColorEnumLabelBuilder<E extends java.lang.Enum<E>>;\nClass CpmIteratorAdapter<T>; // This is iterator adapter, which wraps iterable items with CompoundPropertyModel.\n", "des": "Contains component classes for Web UI"}
{"index": 1611, "repo": "spring-data-neo4j-7.1.2", "code": "package callback;\n\n@FunctionalInterface @API(status=STABLE, since=\"6.3.0\") public interface AfterConvertCallback<T> extends EntityCallback<T>; // A callback that can be used to modify an instance of a Neo4jPersistentEntity after it has been converted: That is, when a Neo4j record has been fully processed and the entity and all its associations have been processed.\n@API(status=STABLE, since=\"6.0.2\") public final class AuditingBeforeBindCallback extends Object implements BeforeBindCallback<Object>, Ordered; // EntityCallback to populate auditing related fields on an entity about to be bound to a record.\n@FunctionalInterface @API(status=STABLE, since=\"6.0.2\") public interface BeforeBindCallback<T> extends EntityCallback<T>; // Entity callback triggered before an Entity is bound to a record (represented by a java.util.Map<String, Object>).\n@API(status=INTERNAL, since=\"6.0.2\") public final class EventSupport extends Object; // Utility class that orchestrates EntityCallbacks.\n@API(status=STABLE, since=\"6.0.2\") public final class ReactiveAuditingBeforeBindCallback extends Object implements ReactiveBeforeBindCallback<Object>, Ordered; // Reactive EntityCallback to populate auditing related fields on an entity about to be bound to a record.\n@FunctionalInterface @API(status=STABLE, since=\"6.0.2\") public interface ReactiveBeforeBindCallback<T> extends EntityCallback<T>; // Entity callback triggered before an Entity is bound to a record (represented by a java.util.Map<String, Object>).\n@API(status=INTERNAL, since=\"6.0.2\") public final class ReactiveEventSupport extends Object; // Utility class that orchestrates EntityCallbacks.\n", "des": "This package contains the callback API."}
{"index": 1604, "repo": "spring-websocket-6.0.11", "code": "package transport;\n\npackage transport.handler; // TransportHandler implementation classes as well as a concrete SockJsService.\npackage transport.session; // SockJS specific implementations of WebSocketSession.\npublic interface SockJsServiceConfig; // Provides transport handling code with access to the SockJsService configuration options they need to have access to.\npublic interface SockJsSession extends WebSocketSession; // SockJS extension of Spring's standard WebSocketSession.\npublic interface SockJsSessionFactory; // A factory for creating a SockJS session.\npublic interface TransportHandler; // Handle a SockJS session URL, i.e.\npublic class TransportHandlingSockJsService extends AbstractSockJsService implements SockJsServiceConfig, org.springframework.context.Lifecycle; // A basic implementation of SockJsService with support for SPI-based transport handling and session management.\npublic enum TransportType extends Enum<TransportType>; // SockJS transport types.\n", "des": "Server-side support for SockJS transports including TransportHandler implementations for processing incoming requests, their session counterparts for sending messages over the various transports, and DefaultSockJsService."}
{"index": 2639, "repo": "spring-integration-sftp-6.1.2", "code": "package gateway;\n\npublic class SftpOutboundGateway extends org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Outbound Gateway for performing remote file operations via SFTP.\n", "des": "Provides classes supporting SFTP gateways."}
{"index": 3573, "repo": "lucene-sandbox-9.7.0", "code": "package payloads;\n\nClass PayloadSpanCollector; // SpanCollector for collecting payloads\nClass PayloadSpanUtil; // Experimental class to get set of payloads for most standard Lucene queries.\n", "des": "Experimental classes for interacting with payloads"}
{"index": 3248, "repo": "opencms-core-15.0", "code": "package publish;\n\npackage publish.shared; // Classes for the publish dialog which are used by both the client and the server.\nInterface I_CmsPublishRelatedResourceProvider; // Interface used to generate mode-specific 'related resources' for the publish dialog in addition to resources linked by normal relations.\nInterface I_CmsVirtualProject; // This interface can be used to implement a new option in the publish dialog's project selector.\nClass A_CmsPublishGroupHelper<RESOURCE,​GROUP>; // Helper class for splitting a publish list into publish groups.\nClass ClientMessages;\nClass CmsCollectorPublishListHelper; // Helper class used to determine which resources from a collector list should be included in a publish list.\nClass CmsCurrentPageProject; // Virtual project which includes the currently edited resource and all its related resources.\nClass CmsDefaultCollectorPublishListProvider; // Default implementation of the I_CmsCollectorPublishListProvider interface.\nClass CmsDefaultPublishGroupHelper; // Default implementation of the publish group helper which operates on CmsPublishResource objects.\nClass CmsDirectPublishProject; // Virtual project for 'direct publishing' of resources.\nClass CmsDummyRelatedResourceProvider; // Dummy implementation of the I_CmsRelatedResourceProvider interface which doesn't actually add any related resources.\nClass CmsMyChangesProject; // Virtual project for the \"My changes\" mode in the publish dialog.\nClass CmsPublish; // ADE publishing features.\nClass CmsPublishActionElement;\nClass CmsPublishListHelper; // Helper functions used to collect information for the publish dialog.\nClass CmsPublishRelationFinder; // Helper class for finding all related resources for a set of resources to be published, for use with the new ADE publish dialog.\nClass CmsPublishRelationFinder.ResourceMap; // A map from resources to sets of resources, which automtically instantiates an empty set when accessing a key that doesn't exist via get().\nClass CmsPublishService; // The implementation of the publish service.\nClass CmsRealProjectVirtualWrapper; // Wrapper to use real OpenCms projects through the I_CmsVirtualProject interface.\nClass CmsSinglePublishGroupHelper; // Publish group helper which only puts all publish resources into a single group.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum A_CmsPublishGroupHelper.GroupAge; // An enum representing the age of a publish list resource.\n", "des": "This package contains the server-side classes for the publish module."}
{"index": 3334, "repo": "opencms-core-15.0", "code": "package publishqueue;\n\nClass CmsPublishQueue; // Class for the Publish queue app.\nClass CmsPublishQueueConfiguration; // Configuration class for the publish queue app.\nClass CmsPublishReport; // Vertical Layout showing a publish report of a publish job.\nClass CmsPublishResources; // Class for the published resources dialog.\nClass CmsQueuedTable; // Class for Vaadin Table showing history queue elements.\n", "des": "Contains classes of the publish queue app."}
{"index": 3297, "repo": "opencms-core-15.0", "code": "package main;\n\nInterface I_CmsEventListener; // Implement this interface in case your class has to react to CmsEvents that are thrown by system.\nInterface I_CmsRequestHandler; // Describes an OpenCms request handler.\nInterface I_CmsResourceInit; // This interface checks the requested resource from the OpenCms request context and returns it to the calling method, which will usually be OpenCms.initResource(CmsObject, String, HttpServletRequest, HttpServletResponse).\nInterface I_CmsSessionDestroyHandler; // Interface used for notifying objects stored in a session when the session is destroyed.\nInterface I_CmsSessionStorageProvider; // This interface is used to define the session storage implementation provider.\nInterface I_CmsShellCommands; // Provides scriptable access to a class from the CmsShell.\nInterface I_CmsStartStopHandler; // Interface for plugins that need to be called during startup and shutdown.\nInterface I_CmsThrowable; // Provides localized Exception handling based on the OpenCms default locale.\nClass A_CmsAuthorizationHandler; // Abstract class to grant the needed access to the session manager.\nClass CmsAliasResourceHandler; // Resource init handler for detail-pages.\nClass CmsBroadcast; // A single broadcast message, send from one OpenCms user to another.\nClass CmsContextInfo; // Contains user information for automated creation of a CmsRequestContext during system runtime.\nClass CmsDefaultSessionStorageProvider; // The default session storage provider implementation.\nClass CmsDuplicateRemovingLogBuffer; // Class used to collect log messages and later write them to the actual log but with duplicates removed.\nClass CmsDuplicateRemovingLogBuffer.Entry; // Entry to write to the log.\nClass CmsEvent; // Event class for OpenCms for system wide events that are thrown by various operations (e.g.\nClass CmsEventManager; // Manager that controls the OpenCms event system.\nClass CmsHttpAuthenticationSettings; // Contains the settings to handle HTTP basic authentication.\nClass CmsLog; // Provides the OpenCms logging mechanism.\nClass CmsPermalinkResourceHandler; // Resource init handler that loads a resource given its permalink.\nClass CmsProtectedStaticFileHandler; // Resource init handler that provides an alternative way of serving static files like images or binary files, using the API authorization mechanism instead of the normal authorization handler.\nClass CmsServletContainerSettings; // Stores specific servlet container options, that might influence OpenCms behavior.\n", "des": "Provides the main OpenCms \"operating system\"."}
{"index": 3497, "repo": "poi-5.2.3", "code": "package util;\n\nClass CellRangeAddress8Bit; // See OOO documentation: excelfileformat.pdf sec 2.5.14 - 'Cell Range Address'\nClass HSSFColor; // Intends to provide support for the very evil index to triplet issue and will likely replace the color constants interface for HSSF 2.0.\nClass LazilyConcatenatedByteArray; // Utility for delaying the concatenation of multiple byte arrays.\nClass RKUtil; // Utility class for helping convert RK numbers.\nEnum HSSFColor.HSSFColorPredefined; // Predefined HSSFColors with their given palette index (and an optional 2nd index)\n", "des": "The util package contains tools needed for writing HSSF files that are not necesarily \"real\" HSSF concepts."}
{"index": 193, "repo": "ignite-core-2.15.0", "code": "package internal;\n\nInterface GPC<T>; // Defines internal typedef for GridPlainCallable.\nInterface GPR; // Defines internal typedef for GridPlainRunnable.\nClass A; // Defines internal typedef for GridArgumentCheck.\nClass CU; // Defines internal typedef for GridCacheUtils.\nClass D; // Convenience alias for GridDebug class.\nClass LT; // Defines internal typedef for GridLogThrottle.\nClass S; // Defines internal typedef for GridToStringBuilder.\nClass SB; // Defines internal typedef for GridStringBuilder.\nClass U; // Defines internal typedef for IgniteUtils.\n", "des": "Contains internal typedefs."}
{"index": 3341, "repo": "opencms-core-15.0", "code": "package components;\n\npackage components.editablegroup; // Contains components for editing a homogeneous list of Vaadin components, often used for multivalued fields in dialogs.\npackage components.extensions; // Contains Vaadin UI extensions.\npackage components.fileselect; // Contains components for selecting resources.\nInterface CmsAutoItemCreatingComboBox.I_NewValueHandler; // Handles automatic creation of new values.\nInterface CmsFileTable.I_FolderSelectHandler; // Handles folder selects in the file table.\nInterface CmsResourceTable.I_ResourcePropertyProvider; // Provides item property values for additional table columns.\nInterface CmsUploadButton.I_UploadListener; // Upload listener interface.\nInterface I_CmsFilePropertyEditHandler; // File table inline edit handler.\nInterface I_CmsWindowCloseListener; // Window close listener.\nClass A_CmsFocusShortcutListener; // Shortcut listener that will only be active, while the given text field has the keyboard focus.\nClass CmsAppViewLayout; // The layout used within the app view.\nClass CmsAutoItemCreatingComboBox; // A combo box which automatically creates a new option if setValue is called with an item id not already contained in the data source.\nClass CmsBasicDialog; // Basic dialog class with a content panel and button bar.\nClass CmsBasicReportPage; // Page to display a report.\nClass CmsBreadCrumb; // The bread crumb component.\nClass CmsBrowserFrame; // Extending the browser frame class to allow setting of the iFrame name attribute.\nClass CmsButtonFormRow<T extends com.vaadin.ui.Component>; // Form row with button.\nClass CmsConfirmationDialog; // Basic confirmation dialog.\nClass CmsCopyToClipboardButton; // The copy to clip-board/select text button.\nClass CmsDateField; // Convenience subclass of PopupDateField which comes preconfigured with a resolution and validation error message.\nClass CmsErrorDialog; // Dialog used to display error stack traces in the workplace.\nClass CmsExtendedSiteSelector; // Site selector widget which also optionally offers subsite options.\nClass CmsExtendedSiteSelector.SiteSelectorOption; // Class representing a single option.\nClass CmsExternalLayout; // Single component container that can render the given component in any HTML element.\nClass CmsFakeWindow; // Layout which looks like a Vaadin window without actually being a window.\n", "des": "Contains some reusable GUI components for Vaadin UI."}
{"index": 2468, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package otlp;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.registry.otlp.OtlpMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"otlp\") @EnableConfigurationProperties(OtlpProperties.class) public class OtlpMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to OTLP.\n@ConfigurationProperties(prefix=\"management.otlp.metrics.export\") public class OtlpProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring OTLP metrics export.\n", "des": "Support for exporting actuator metrics to OTLP."}
{"index": 2505, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package zipkin;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration.class) @ConditionalOnClass(zipkin2.reporter.Sender.class) @Import({org.springframework.boot.actuate.autoconfigure.tracing.zipkin.ZipkinConfigurations.SenderConfiguration.class,org.springframework.boot.actuate.autoconfigure.tracing.zipkin.ZipkinConfigurations.ReporterConfiguration.class,org.springframework.boot.actuate.autoconfigure.tracing.zipkin.ZipkinConfigurations.BraveConfiguration.class,org.springframework.boot.actuate.autoconfigure.tracing.zipkin.ZipkinConfigurations.OpenTelemetryConfiguration.class}) @ConditionalOnEnabledTracing @EnableConfigurationProperties(ZipkinProperties.class) public class ZipkinAutoConfiguration extends Object; // Auto-configuration for Zipkin.\npublic interface ZipkinConnectionDetails extends org.springframework.boot.autoconfigure.service.connection.ConnectionDetails; // Details required to establish a connection to a Zipkin server.\n@ConfigurationProperties(\"management.zipkin.tracing\") public class ZipkinProperties extends Object; // Configuration properties for ZipkinAutoConfiguration.\n@FunctionalInterface public interface ZipkinRestTemplateBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the RestTemplateBuilder used to send spans to Zipkin.\n@FunctionalInterface public interface ZipkinWebClientBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the WebClient.Builder used to send spans to Zipkin.\n", "des": "Auto-configuration for tracing with Zipkin."}
{"index": 2107, "repo": "spring-webflux-6.0.11", "code": "package socket;\n\npackage socket.adapter; // Classes adapting Spring's Reactive WebSocket API to and from WebSocket runtimes.\npackage socket.client; // Client support for WebSocket interactions.\npackage socket.server; // Server support for WebSocket interactions.\npublic final class CloseStatus extends Object; // Representation of WebSocket \"close\" status codes and reasons.\npublic class HandshakeInfo extends Object; // Simple container of information related to the handshake request that started the WebSocketSession session.\npublic interface WebSocketHandler; // Handler for a WebSocket session.\npublic class WebSocketMessage extends Object; // Representation of a WebSocket message.\npublic static enum WebSocketMessage.Type extends Enum<WebSocketMessage.Type>; // WebSocket message types.\npublic interface WebSocketSession; // Represents a WebSocket session.\n", "des": "Abstractions and support classes for reactive WebSocket interactions."}
{"index": 1420, "repo": "spring-boot-actuator-3.1.1", "code": "package startup;\n\npublic class StartupTimeMetricsListener extends Object implements org.springframework.context.event.SmartApplicationListener; // Binds application startup metrics in response to ApplicationStartedEvent and ApplicationReadyEvent.\n", "des": "Actuator support for startup metrics."}
{"index": 1778, "repo": "slf4j-api-2.0.7", "code": "package spi;\n\npublic interface CallerBoundaryAware; // Additional interface to LoggingEventBuilder and LoggingEvent.\npublic class DefaultLoggingEventBuilder extends Object implements LoggingEventBuilder, CallerBoundaryAware; // Default implementation of LoggingEventBuilder\npublic interface LocationAwareLogger extends Logger; // An optional interface helping integration with logging systems capable of extracting location information.\npublic interface LoggerFactoryBinder;\npublic interface LoggingEventAware; // A logger capable of logging from org.slf4j.event.LoggingEvent implements this interface.\npublic interface LoggingEventBuilder; // This is the main interface in slf4j's fluent API for creating logging events.\npublic interface MarkerFactoryBinder;\npublic interface MDCAdapter; // This interface abstracts the service offered by various MDC implementations.\npublic class NOPLoggingEventBuilder extends Object implements LoggingEventBuilder; // A no-operation implementation of LoggingEventBuilder.\npublic interface SLF4JServiceProvider; // This interface based on ServiceLoader paradigm.\n", "des": "Classes and interfaces which are internal to SLF4J."}
{"index": 366, "repo": "commons-geometry-euclidean-1.0", "code": "package mesh;\n\nInterface Mesh<F extends Mesh.Face>; // Interface representing a 3D mesh data structure.\nInterface Mesh.Face; // Interface representing a single face in a mesh.\nInterface TriangleMesh; // Interface representing a mesh composed entirely of triangular faces.\nInterface TriangleMesh.Face; // Interface representing a single triangular face in a mesh.\nClass SimpleTriangleMesh; // A simple implementation of the TriangleMesh interface.\nClass SimpleTriangleMesh.Builder; // Builder class for creating mesh instances.\n", "des": "This package contains types representing 3D mesh data structures."}
{"index": 2599, "repo": "spring-rabbit-3.0.6", "code": "package support;\n\npackage support.micrometer; // Provides classes for Micrometer support.\npublic class ActiveObjectCounter<T> extends Object; // A mechanism to keep track of active objects.\npublic class ArgumentBuilder extends org.springframework.amqp.utils.MapBuilder<ArgumentBuilder,String,Object>; // A builder for argument maps.\npublic class ConsumerCancelledException extends RuntimeException; // Thrown when the broker cancels the consumer and the message queue is drained.\npublic class DefaultMessagePropertiesConverter extends Object implements MessagePropertiesConverter; // Default implementation of the MessagePropertiesConverter strategy.\npublic class Delivery extends Object; // Encapsulates an arbitrary message - simple \"bean\" holder structure.\npublic class ExpressionFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<org.springframework.expression.Expression>; // FactoryBean for creating Expression instances.\n@FunctionalInterface public interface ListenerContainerAware; // MessageListeners that also implement this interface can have configuration verified during initialization.\npublic class ListenerExecutionFailedException extends org.springframework.amqp.AmqpException; // Exception to be thrown when the execution of a listener method failed.\npublic interface MessagePropertiesConverter; // Strategy interface for converting between Spring AMQP MessageProperties and RabbitMQ BasicProperties.\npublic final class RabbitExceptionTranslator extends Object; // Translates Rabbit Exceptions to the AmqpException class hierarchy.\npublic class ValueExpression<V> extends Object implements org.springframework.expression.Expression; // A very simple hardcoded implementation of the Expression interface that represents an immutable value.\n", "des": "Provides support classes for Spring Rabbit."}
{"index": 83, "repo": "ignite-core-2.15.0", "code": "package communication;\n\npackage communication.tcp; // Contains default TCP/IP-based implementation for communication SPI.\nInterface CommunicationListener<T extends Serializable>; // Listener SPI notifies IO manager with.\nInterface CommunicationSpi<T extends Serializable>; // Communication SPI is responsible for data exchange between nodes.\n", "des": "Contains APIs for grid communication SPI."}
{"index": 3218, "repo": "commons-configuration2-2.9.0", "code": "package event;\n\nInterface EventListener<T extends Event>; // Definition of a generic event listener interface.\nInterface EventSource; // An interface for configuration implementations which support registration of event listeners.\nClass BaseEventSource; // A base class for objects that can generate configuration events.\nClass ConfigurationErrorEvent; // An event class that is used for reporting errors that occurred while processing configuration properties.\nClass ConfigurationEvent; // An event class for reporting updates on a configuration object.\nClass Event; // The base class for all events generated by this library.\nClass EventListenerList; // A class for managing event listeners for an event source.\nClass EventListenerList.EventListenerIterator<T extends Event>; // A special Iterator implementation used by the getEventListenerIterator() method.\nClass EventListenerRegistrationData<T extends Event>; // A data class holding information about an event listener registration.\nClass EventType<T extends Event>; // A class representing an event type.\n", "des": "This package contains interfaces and classes for receiving notifications about changes at configurations."}
{"index": 428, "repo": "hive-serde-4.0.0-alpha-2", "code": "package typeinfo;\n\nClass BaseCharTypeInfo;\nClass BaseCharUtils;\nClass CharTypeInfo;\nClass DecimalTypeInfo;\nClass HiveDecimalUtils;\nClass ListTypeInfo; // A List Type has homogeneous elements.\nClass MapTypeInfo; // A Map Type has homogeneous keys and homogeneous values.\nClass PrimitiveTypeInfo; // There are limited number of Primitive Types.\nClass StructTypeInfo; // StructTypeInfo represents the TypeInfo of a struct.\nClass TimestampLocalTZTypeInfo;\nClass TypeInfo; // Stores information about a type.\nClass TypeInfoFactory; // TypeInfoFactory can be used to create the TypeInfo object for any types.\nClass TypeInfoUtils; // TypeInfoUtils.\nClass TypeInfoUtils.PrimitiveParts;\nClass UnionTypeInfo; // UnionTypeInfo represents the TypeInfo of an union.\nClass VarcharTypeInfo;\n", "des": "This package provides the implementation of the SerDe type system."}
{"index": 2695, "repo": "spring-integration-http-6.1.2", "code": "package dsl;\n\npublic abstract class BaseHttpInboundEndpointSpec<S extends BaseHttpInboundEndpointSpec<S,E>,E extends HttpRequestHandlingEndpointSupport> extends HttpInboundEndpointSupportSpec<S,E>; // A base MessagingGatewaySpec for the HttpRequestHandlingEndpointSupport implementations.\npublic abstract class BaseHttpMessageHandlerSpec<S extends BaseHttpMessageHandlerSpec<S,E>,E extends AbstractHttpRequestExecutingMessageHandler> extends org.springframework.integration.dsl.MessageHandlerSpec<S,E> implements org.springframework.integration.dsl.ComponentsRegistration; // The base MessageHandlerSpec for AbstractHttpRequestExecutingMessageHandlers.\npublic final class Http extends Object; // The HTTP components Factory.\npublic class HttpControllerEndpointSpec extends BaseHttpInboundEndpointSpec<HttpControllerEndpointSpec,HttpRequestHandlingController>; // The BaseHttpInboundEndpointSpec implementation for the HttpRequestHandlingController.\npublic abstract class HttpInboundEndpointSupportSpec<S extends HttpInboundEndpointSupportSpec<S,E>,E extends BaseHttpInboundEndpoint> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,E> implements org.springframework.integration.dsl.ComponentsRegistration;\npublic static final class HttpInboundEndpointSupportSpec.CrossOriginSpec extends Object; // A fluent API for the CrossOrigin.\npublic static final class HttpInboundEndpointSupportSpec.RequestMappingSpec extends Object; // A fluent API for the RequestMapping.\npublic class HttpMessageHandlerSpec extends BaseHttpMessageHandlerSpec<HttpMessageHandlerSpec,HttpRequestExecutingMessageHandler>; // The BaseHttpMessageHandlerSpec implementation for the HttpRequestExecutingMessageHandler.\npublic class HttpRequestHandlerEndpointSpec extends BaseHttpInboundEndpointSpec<HttpRequestHandlerEndpointSpec,HttpRequestHandlingMessagingGateway>; // The BaseHttpInboundEndpointSpec implementation for the HttpRequestHandlingMessagingGateway.\n", "des": "Provides HTTP Components support for Spring Integration Java DSL."}
{"index": 2892, "repo": "spring-integration-core-6.1.2", "code": "package utils;\n\npublic final class IntegrationUtils extends Object; // General utility methods.\npublic final class PatternMatchUtils extends Object; // Utility methods for pattern matching.\n", "des": "Provides global utility support classes for the runtime system."}
{"index": 1832, "repo": "spring-test-6.0.11", "code": "package web;\n\npackage web.server; // Mock implementations of Spring's reactive server web API abstractions.\npublic class DelegatingServletInputStream extends ServletInputStream; // Delegating implementation of ServletInputStream.\npublic class DelegatingServletOutputStream extends ServletOutputStream; // Delegating implementation of ServletOutputStream.\npublic class MockAsyncContext extends Object implements AsyncContext; // Mock implementation of the AsyncContext interface.\npublic class MockBodyContent extends BodyContent; // Mock implementation of the BodyContent class.\npublic class MockCookie extends Cookie; // Extension of Cookie with extra attributes, as defined in RFC 6265.\npublic class MockFilterChain extends Object implements FilterChain; // Mock implementation of the FilterChain interface.\npublic class MockFilterConfig extends Object implements FilterConfig; // Mock implementation of the FilterConfig interface.\npublic class MockHttpServletMapping extends Object implements HttpServletMapping; // Mock implementation of HttpServletMapping.\npublic class MockHttpServletRequest extends Object implements HttpServletRequest; // Mock implementation of the HttpServletRequest interface.\npublic class MockHttpServletResponse extends Object implements HttpServletResponse; // Mock implementation of the HttpServletResponse interface.\npublic class MockHttpSession extends Object implements HttpSession; // Mock implementation of the HttpSession interface.\npublic class MockJspWriter extends JspWriter; // Mock implementation of the JspWriter class.\npublic class MockMultipartFile extends Object implements org.springframework.web.multipart.MultipartFile; // Mock implementation of the MultipartFile interface.\npublic class MockMultipartHttpServletRequest extends MockHttpServletRequest implements org.springframework.web.multipart.MultipartHttpServletRequest; // Mock implementation of the MultipartHttpServletRequest interface.\npublic class MockPageContext extends PageContext; // Mock implementation of the PageContext interface.\npublic class MockPart extends Object implements Part; // Mock implementation of jakarta.servlet.http.Part.\npublic class MockRequestDispatcher extends Object implements RequestDispatcher; // Mock implementation of the RequestDispatcher interface.\npublic class MockServletConfig extends Object implements ServletConfig; // Mock implementation of the ServletConfig interface.\npublic class MockServletContext extends Object implements ServletContext; // Mock implementation of the ServletContext interface.\npublic class MockSessionCookieConfig extends Object implements SessionCookieConfig; // Mock implementation of the SessionCookieConfig interface.\n", "des": "A comprehensive set of Servlet API 6.0 mock objects, targeted at usage with Spring's Web MVC framework."}
{"index": 2715, "repo": "spring-batch-infrastructure-5.0.2", "code": "package database;\n\npackage database.builder; // Builders for database item readers and writers.\npackage database.orm; // Support classes for components using various ORM related technologies.\npackage database.support; // Support classes for database specific semantics.\npublic abstract class AbstractCursorItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean; // Abstract base class for any simple item reader that opens a database cursor and continually retrieves the next row in the ResultSet.\npublic abstract class AbstractPagingItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean; // Abstract ItemStreamReader for to extend when reading database records in a paging fashion.\npublic class BeanPropertyItemSqlParameterSourceProvider<T> extends Object implements ItemSqlParameterSourceProvider<T>; // A convenient implementation for providing BeanPropertySqlParameterSource when the item has JavaBean properties that correspond to names used for parameters in the SQL statement.\npublic class ExtendedConnectionDataSourceProxy extends Object implements org.springframework.jdbc.datasource.SmartDataSource, org.springframework.beans.factory.InitializingBean; // Implementation of SmartDataSource that is capable of keeping a single JDBC Connection which is NOT closed after each use even if Connection.close() is called.\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateCursorItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean;\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateItemReaderHelper<T> extends Object implements org.springframework.beans.factory.InitializingBean;\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean;\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernatePagingItemReader<T> extends AbstractPagingItemReader<T> implements org.springframework.beans.factory.InitializingBean;\npublic interface ItemPreparedStatementSetter<T>; // A convenient strategy for SQL updates, acting effectively as the inverse of RowMapper.\n", "des": "Infrastructure implementations of database based item readers and writers."}
{"index": 2801, "repo": "spring-amqp-3.0.6", "code": "package utils;\n\npublic final class JavaUtils extends Object; // Chained utility methods to simplify some Java repetitive code.\npublic class MapBuilder<B extends MapBuilder<B,K,V>,K,V> extends Object; // A Builder pattern implementation for a Map.\npublic final class SerializationUtils extends Object; // Static utility to help with serialization.\n", "des": "Provides utility classes to support Spring AMQP."}
{"index": 880, "repo": "mahout-math-0.13.0", "code": "package math;\n\nClass Arithmetic; // Arithmetic functions.\nClass Constants; // Defines some useful constants.\nClass Polynomial; // Polynomial functions.\n", "des": "Tools for basic and advanced mathematics: Arithmetics and Algebra, Polynomials and Chebyshev series, Bessel and Airy functions, Function Objects for generic function evaluation, etc."}
{"index": 1198, "repo": "commons-math3-3.6.1", "code": "package general;\n\nInterface Preconditioner; // As of 3.1 (to be removed in 4.0).\nClass AbstractDifferentiableOptimizer; // As of 3.1 (to be removed in 4.0).\nClass AbstractLeastSquaresOptimizer; // As of 3.1 (to be removed in 4.0).\nClass AbstractScalarDifferentiableOptimizer; // As of 3.1 (to be removed in 4.0).\nClass GaussNewtonOptimizer; // As of 3.1 (to be removed in 4.0).\nClass LevenbergMarquardtOptimizer; // As of 3.1 (to be removed in 4.0).\nClass NonLinearConjugateGradientOptimizer; // As of 3.1 (to be removed in 4.0).\nClass NonLinearConjugateGradientOptimizer.IdentityPreconditioner; // Default identity preconditioner.\nEnum ConjugateGradientFormula; // As of 3.1 (to be removed in 4.0).\n", "des": "This package provides optimization algorithms that require derivatives."}
{"index": 2294, "repo": "spring-boot-3.1.1", "code": "package annotation;\n\npublic abstract class Configurations extends Object; // A set of @Configuration classes that can be registered in ApplicationContext.\n@FunctionalInterface public interface DeterminableImports; // Interface that can be implemented by ImportSelector and ImportBeanDefinitionRegistrar implementations when they can determine imports early.\npublic final class ImportCandidates extends Object implements Iterable<String>; // Contains @Configuration import candidates, usually auto-configurations.\npublic class UserConfigurations extends Configurations implements org.springframework.core.PriorityOrdered; // Configurations representing user-defined @Configuration classes (i.e.\n", "des": "Classes related to Spring's ApplicationContext annotations."}
{"index": 1134, "repo": "hadoop-yarn-api-3.3.6", "code": "package ams;\n\nInterface ApplicationMasterServiceContext; // This is a marker interface for a context object that is injected into the ApplicationMasterService processor.\nInterface ApplicationMasterServiceProcessor; // Interface to abstract out the the actual processing logic of the Application Master Service.\nClass ApplicationMasterServiceUtils; // Utility methods to be used by ApplicationMasterServiceProcessor.\n", "des": "Public api for Application Master Service interceptors."}
{"index": 2271, "repo": "spring-vault-core-3.0.4", "code": "package query;\n\npublic class VaultPartTreeQuery extends KeyValuePartTreeQuery; // Vault-specific KeyValuePartTreeQuery.\npublic class VaultQuery extends Object; // Vault query consisting of a single Predicate.\npublic class VaultQueryCreator extends AbstractQueryCreator<KeyValueQuery<VaultQuery>,VaultQuery>; // Query creator for Vault queries.\n", "des": "Query derivation mechanism for Vault specific repositories."}
{"index": 3649, "repo": "solr-core-9.3.0", "code": "package backup;\n\npackage backup.repository; // BackupRepository Providing backup/restore repository interfaces to plug different storage systems\nClass AggregateBackupStats; // Aggregate stats from multiple ShardBackupMetadata\nClass BackupFilePaths; // Utility class for getting paths related to backups, or parsing information out of those paths.\nClass BackupId; // Represents the ID of a particular backup.\nClass BackupManager; // This class implements functionality to create a backup with extension points provided to integrate with different types of file-systems.\nClass BackupProperties; // Represents a backup[-*].properties file, responsible for holding whole-collection and whole-backup metadata.\nClass Checksum; // Represents checksum information for an index file being backed up.\nClass ShardBackupId; // Represents the ID of a particular backup point for a particular shard.\nClass ShardBackupMetadata; // Represents the shard-backup metadata file.\nClass ShardBackupMetadata.BackedFile;\n", "des": "Core classes for Solr's Backup/Restore functionality"}
{"index": 1844, "repo": "spring-test-6.0.11", "code": "package junit4;\n\npackage junit4.rules; // Custom JUnit 4 Rules used in the Spring TestContext Framework.\npackage junit4.statements; // Custom JUnit 4 Statements used in the Spring TestContext Framework.\npublic abstract class AbstractJUnit4SpringContextTests extends Object implements org.springframework.context.ApplicationContextAware; // Abstract base test class which integrates the Spring TestContext Framework with explicit ApplicationContext testing support in a JUnit 4 environment.\n@Transactional public abstract class AbstractTransactionalJUnit4SpringContextTests extends AbstractJUnit4SpringContextTests; // Abstract transactional extension of AbstractJUnit4SpringContextTests which adds convenience functionality for JDBC access.\npublic class SpringJUnit4ClassRunner extends BlockJUnit4ClassRunner; // SpringJUnit4ClassRunner is a custom extension of JUnit's BlockJUnit4ClassRunner which provides functionality of the Spring TestContext Framework to standard JUnit tests by means of the TestContextManager and associated support classes and annotations.\npublic final class SpringRunner extends SpringJUnit4ClassRunner; // SpringRunner is an alias for the SpringJUnit4ClassRunner.\n", "des": "Support classes for integrating the Spring TestContext Framework with JUnit 4.12 or higher."}
{"index": 613, "repo": "org.apache.karaf.main-2.4.4", "code": "package packageadmin;\n\nInterface ExportedPackage; // The PackageAdmin service has been replaced by the org.osgi.framework.wiring package.\nInterface PackageAdmin; // This service has been replaced by the org.osgi.framework.wiring package.\nInterface RequiredBundle; // The PackageAdmin service has been replaced by the org.osgi.framework.wiring package.\n", "des": "Package Admin Package Version 1.2."}
{"index": 3610, "repo": "lucene-suggest-9.7.0", "code": "package spell;\n\nInterface Dictionary; // A simple interface representing a Dictionary.\nInterface StringDistance; // Interface for string distances.\nClass CombineSuggestion; // A suggestion generated by combining one or more original query terms\nClass DirectSpellChecker; // Simple automaton-based spellchecker.\nClass DirectSpellChecker.ScoreTerm; // Holds a spelling correction for internal usage inside DirectSpellChecker.\nClass HighFrequencyDictionary; // HighFrequencyDictionary: terms taken from the given field of a Lucene index, which appear in a number of documents above a given threshold.\nClass JaroWinklerDistance; // Similarity measure for short strings such as person names.\nClass LevenshteinDistance; // Levenshtein edit distance class.\nClass LuceneDictionary; // Lucene Dictionary: terms taken from the given field of a Lucene index.\nClass LuceneLevenshteinDistance; // Damerau-Levenshtein (optimal string alignment) implemented in a consistent way as Lucene's FuzzyTermsEnum with the transpositions option enabled.\nClass NGramDistance; // N-Gram version of edit distance based on paper by Grzegorz Kondrak, \"N-gram similarity and distance\".\nClass PlainTextDictionary; // Dictionary represented by a text file.\nClass SpellChecker; // Spell Checker class (Main class). (initially inspired by the David Spencer code).\nClass SuggestWord; // SuggestWord, used in suggestSimilar method in SpellChecker class.\nClass SuggestWordFrequencyComparator; // Frequency first, then score.\nClass SuggestWordQueue; // Sorts SuggestWord instances\nClass SuggestWordScoreComparator; // Score first, then frequency\nClass WordBreakSpellChecker; // A spell checker whose sole function is to offer suggestions by combining multiple terms into one word and/or breaking terms into multiple words.\nEnum SuggestMode; // Set of strategies for suggesting related terms\nEnum WordBreakSpellChecker.BreakSuggestionSortMethod; // Determines the order to list word break suggestions\n", "des": "Suggest alternate spellings for words."}
{"index": 155, "repo": "ignite-core-2.15.0", "code": "package cacheobject;\n\nInterface IgniteCacheObjectProcessor; // Cache objects processor.\nClass NoOpBinary;\nClass UserCacheObjectByteArrayImpl; // Wraps value provided by user, must be copied before stored in cache.\nClass UserCacheObjectImpl; // Wraps value provided by user, must be serialized before stored in cache.\nClass UserKeyCacheObjectImpl; // Wraps key provided by user, must be serialized before stored in cache.\n", "des": "Cache object processor."}
{"index": 242, "repo": "nutch-2.4", "code": "package api;\n\nClass RegexRule; // A generic regular expression rule.\nClass RegexURLFilterBase; // Generic URL filter based on regular expressions.\n", "des": "Generic URL filter library, abstracting away from regular expression implementations."}
{"index": 3813, "repo": "lucene-analysis-common-9.7.0", "code": "package shingle;\n\nClass FixedShingleFilter; // A FixedShingleFilter constructs shingles (token n-grams) from a token stream.\nClass FixedShingleFilterFactory; // Factory for FixedShingleFilter\nClass ShingleAnalyzerWrapper; // A ShingleAnalyzerWrapper wraps a ShingleFilter around another Analyzer.\nClass ShingleFilter; // A ShingleFilter constructs shingles (token n-grams) from a token stream.\nClass ShingleFilterFactory; // Factory for ShingleFilter.\n", "des": "Word n-gram filters."}
{"index": 1858, "repo": "spring-test-6.0.11", "code": "package server;\n\npublic class CookieAssertions extends Object; // Assertions on cookies of the response.\npublic class EntityExchangeResult<T> extends ExchangeResult; // ExchangeResult sub-class that exposes the response body fully extracted to a representation of type <T>.\npublic class ExchangeResult extends Object; // Container for request and response details for exchanges performed through WebTestClient.\npublic class FluxExchangeResult<T> extends ExchangeResult; // ExchangeResult variant with the response body decoded as Flux<T> but not yet consumed.\npublic class HeaderAssertions extends Object; // Assertions on headers of the response.\npublic class HttpHandlerConnector extends Object implements org.springframework.http.client.reactive.ClientHttpConnector; // Connector that handles requests by invoking an HttpHandler rather than making actual requests to a network socket.\npublic static final class HttpHandlerConnector.FailureAfterResponseCompletedException extends RuntimeException; // Indicates that an error occurred after the server response was completed, via ReactiveHttpOutputMessage.writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>) or ReactiveHttpOutputMessage.setComplete(), and can no longer be changed.\npublic class JsonPathAssertions extends Object; // JsonPath assertions.\npublic interface MockServerClientHttpResponse extends org.springframework.http.client.reactive.ClientHttpResponse; // Simple ClientHttpResponse extension that also exposes a result object from the underlying mock server exchange for further assertions on the state of the server response after the request is performed.\npublic interface MockServerConfigurer; // Contract that frameworks or applications can use to pre-package a set of customizations to a WebTestClient.MockServerSpec and expose that as a shortcut.\npublic class StatusAssertions extends Object; // Assertions on the response status.\npublic interface WebTestClient; // Client for testing web servers that uses WebClient internally to perform requests while also providing a fluent API to verify responses.\npublic static interface WebTestClient.BodyContentSpec; // Spec for expectations on the response body content.\npublic static interface WebTestClient.BodySpec<B,S extends WebTestClient.BodySpec<B,S>>; // Spec for expectations on the response body decoded to a single Object.\n", "des": "Support for testing Spring WebFlux server endpoints via WebTestClient."}
{"index": 2595, "repo": "spring-rabbit-3.0.6", "code": "package support;\n\npublic final class ContainerUtils extends Object; // Utility methods for listener containers.\n", "des": "Provides support classes for listeners."}
{"index": 1255, "repo": "spring-core-6.0.11", "code": "package predicate;\n\npublic class ProxyHintsPredicates extends Object; // Generator of ProxyHints predicates, testing whether the given hints match the expected behavior for proxies.\npublic class ReflectionHintsPredicates extends Object; // Generator of ReflectionHints predicates, testing whether the given hints match the expected behavior for reflection.\npublic static class ReflectionHintsPredicates.ConstructorHintPredicate extends ReflectionHintsPredicates.ExecutableHintPredicate<Constructor<?>>;\npublic abstract static class ReflectionHintsPredicates.ExecutableHintPredicate<T extends Executable> extends Object implements Predicate<RuntimeHints>;\npublic static class ReflectionHintsPredicates.FieldHintPredicate extends Object implements Predicate<RuntimeHints>;\npublic static class ReflectionHintsPredicates.MethodHintPredicate extends ReflectionHintsPredicates.ExecutableHintPredicate<Method>;\npublic static class ReflectionHintsPredicates.TypeHintPredicate extends Object implements Predicate<RuntimeHints>;\npublic class ResourceHintsPredicates extends Object; // Generator of ResourceHints predicates, testing whether the given hints match the expected behavior for resources.\npublic abstract class RuntimeHintsPredicates extends Object; // Static generator of predicates that test whether the given RuntimeHints instance matches the expected behavior for reflection, resource, serialization, or proxy generation.\npublic class SerializationHintsPredicates extends Object; // Generator of SerializationHints predicates, testing whether the given hints match the expected behavior for serialization.\n", "des": "Predicate support for runtime hints."}
{"index": 1013, "repo": "spring-ws-3.0.10.RELEASE", "code": "package transform;\n\nInterface TraxUtils.ResultCallback; // Callback interface invoked on each sort of Result.\nInterface TraxUtils.SourceCallback; // Callback interface invoked on each sort of Source.\nClass ResourceSource; // Convenient subclass of SAXSource that reads from a Spring Resource.\nClass StringResult; // Convenient subclass of StreamResult that writes to a StringWriter.\nClass StringSource; // Convenient subclass of StreamSource that reads from a StringReader.\nClass TransformerFactoryUtils;\nClass TransformerHelper; // Helper class for Transformer usage.\nClass TransformerObjectSupport; // Convenient base class for objects that use a Transformer.\nClass TraxUtils; // Convenient utility methods for dealing with TrAX.\n", "des": "Provides classes that help with XML transformations."}
{"index": 46, "repo": "ignite-core-2.15.0", "code": "package cache;\n\npackage cache.affinity; // Contains cache node affinity implementations.\npackage cache.eviction; // Contains cache eviction policy implementations.\npackage cache.query; // Contains APIs for creating and executing cache queries.\npackage cache.store; // Contains cache store interfaces.\nInterface CacheEntry<K,V>; // Cache entry that extends Cache.Entry by providing additional entry related information.\nInterface CacheEntryEventSerializableFilter<K,V>; // This filter adds Serializable interface to CacheEntryEventFilter object.\nInterface CacheEntryProcessor<K,V,T>; // This processor adds Serializable interface to EntryProcessor object.\nInterface CacheEntryVersion; // Entry event order.\nInterface CacheInterceptor<K,V>; // Cache interceptor.\nInterface CacheMetrics; // Cache metrics used to obtain statistics on cache itself.\nClass CacheInterceptorAdapter<K,V>; // Cache interceptor convenience adapter.\nClass CacheInterceptorEntry<K,V>; // A cache interceptor map entry.\nClass CacheKeyConfiguration; // Configuration defining various aspects of cache keys without explicit usage of annotations on user classes.\nClass CacheManager; // Implementation of JSR-107 CacheManager.\nClass CachingProvider; // Implementation of JSR-107 CachingProvider.\nClass QueryEntity; // Query entity is a description of cache entry (composed of key and value) in a way of how it must be indexed and can be queried.\nClass QueryEntityPatch; // Query entity patch which contain SchemaAbstractOperation operations for changing query entity.\nClass QueryIndex; // Contains list of fields to be indexed.\nEnum CacheAtomicityMode; // Cache atomicity mode controls whether cache should maintain fully transactional semantics or more light-weight atomic behavior.\nEnum CacheMode; // Enumeration of all supported caching modes.\nEnum CachePeekMode; // Enumeration of all supported cache peek modes.\nEnum CacheRebalanceMode; // Cache rebalance mode.\nEnum CacheWriteSynchronizationMode; // Mode indicating how Ignite should wait for write replies from other nodes.\nEnum PartitionLossPolicy; // Partition loss policy.\nEnum QueryIndexType; // Index type.\nEnum ReadRepairStrategy; // Read repair strategies.\nClass CacheExistsException; // Exception thrown when cache must be created but it already exists.\nClass CachePartialUpdateException; // Exception thrown from non-transactional cache in case when update succeeded only partially.\n", "des": "Contains main Data Grid APIs."}
{"index": 3188, "repo": "tomcat-api-10.1", "code": "package pool2;\n\npackage pool2.impl; // Object pooling API implementations.\nInterface KeyedObjectPool<K,​V>; // A \"keyed\" pooling interface.\nInterface KeyedPooledObjectFactory<K,​V>; // An interface defining life-cycle methods for instances to be served by a KeyedObjectPool.\nInterface ObjectPool<T>; // A pooling simple interface.\nInterface PooledObject<T>; // Defines the wrapper that is used to track the additional information, such as state, for the pooled objects.\nInterface PooledObjectFactory<T>; // An interface defining life-cycle methods for instances to be served by an ObjectPool.\nInterface SwallowedExceptionListener; // Pools that unavoidably swallow exceptions may be configured with an instance of this listener so the user may receive notification of when this happens.\nInterface TrackedUse; // Allows pooled objects to make information available about when and how they were used available to the object pool.\nInterface UsageTracking<T>; // This interface may be implemented by an object pool to enable clients (primarily those clients that wrap pools to provide pools with extended features) to provide additional information to the pool relating to object using allowing more informed decisions and reporting to be made regarding abandoned objects.\nClass BaseObject; // A base class for common functionality.\nClass BaseObjectPool<T>; // A simple base implementation of ObjectPool.\nClass PoolUtils; // This class consists exclusively of static methods that operate on or return ObjectPool or KeyedObjectPool related interfaces.\nEnum DestroyMode; // Destroy context provided to object factories via destroyObject and invalidateObject methods.\nEnum PooledObjectState; // Provides all possible states of a PooledObject.\n", "des": "Object pooling API."}
{"index": 1623, "repo": "spring-kafka-3.0.9", "code": "package config;\n\npublic abstract class AbstractKafkaListenerContainerFactory<C extends AbstractMessageListenerContainer<K,V>,K,V> extends Object implements KafkaListenerContainerFactory<C>, org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.InitializingBean, org.springframework.context.ApplicationContextAware; // Base KafkaListenerContainerFactory for Spring's base container implementation.\npublic abstract class AbstractKafkaListenerEndpoint<K,V> extends Object implements KafkaListenerEndpoint, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // Base model for a Kafka listener endpoint.\npublic class CompositeKafkaStreamsCustomizer extends Object implements KafkaStreamsCustomizer; // Composite KafkaStreamsCustomizer customizes KafkaStreams by delegating to a list of provided KafkaStreamsCustomizer.\npublic class CompositeKafkaStreamsInfrastructureCustomizer extends Object implements KafkaStreamsInfrastructureCustomizer; // Composite KafkaStreamsInfrastructureCustomizer customizes KafkaStreams by delegating to a list of provided KafkaStreamsInfrastructureCustomizer.\npublic class ConcurrentKafkaListenerContainerFactory<K,V> extends AbstractKafkaListenerContainerFactory<ConcurrentMessageListenerContainer<K,V>,K,V>; // A KafkaListenerContainerFactory implementation to build a ConcurrentMessageListenerContainer.\n@FunctionalInterface public interface ContainerCustomizer<K,V,C extends AbstractMessageListenerContainer<K,V>>; // Called by the container factory after the container is created and configured.\npublic abstract class KafkaListenerConfigUtils extends Object; // Configuration constants for internal sharing across subpackages.\npublic interface KafkaListenerContainerFactory<C extends MessageListenerContainer>; // Factory for MessageListenerContainers.\npublic interface KafkaListenerEndpoint; // Model for a Kafka listener endpoint.\npublic class KafkaListenerEndpointRegistrar extends Object implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // Helper bean for registering KafkaListenerEndpoint with a KafkaListenerEndpointRegistry.\n", "des": "Package for kafka configuration"}
{"index": 2510, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package mappings;\n\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.web.mappings.MappingsEndpoint.class) public class MappingsEndpointAutoConfiguration extends Object; // Auto-configuration for MappingsEndpoint.\n", "des": "Classes for auto-configuration of actuator web request mapping concerns."}
{"index": 1384, "repo": "spring-boot-actuator-3.1.1", "code": "package annotation;\n\npublic abstract class AbstractDiscoveredEndpoint<O extends Operation> extends AbstractExposableEndpoint<O> implements DiscoveredEndpoint<O>; // Abstract base class for endpoints discovered by a EndpointDiscoverer.\npublic abstract class AbstractDiscoveredOperation extends Object implements Operation; // Abstract base class for endpoints operations discovered by a EndpointDiscoverer.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Reflective(org.springframework.boot.actuate.endpoint.annotation.OperationReflectiveProcessor.class) public @interface DeleteOperation; // Identifies a method on an @Endpoint as being a delete operation.\npublic interface DiscoveredEndpoint<O extends Operation> extends ExposableEndpoint<O>; // An endpoint discovered by an EndpointDiscoverer.\npublic class DiscoveredOperationMethod extends OperationMethod; // An OperationMethod discovered by an EndpointDiscoverer.\npublic abstract class DiscovererEndpointFilter extends Object implements EndpointFilter<DiscoveredEndpoint<?>>; // EndpointFilter the matches based on the EndpointDiscoverer the created the endpoint.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Reflective public @interface Endpoint; // Identifies a type as being an actuator endpoint that provides information about the running application.\n@Target({FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Qualifier public @interface EndpointConverter; // Qualifier for beans that are needed to convert @Endpoint input parameters.\npublic abstract class EndpointDiscoverer<E extends ExposableEndpoint<O>,O extends Operation> extends Object implements EndpointsSupplier<E>; // A Base for EndpointsSupplier implementations that discover @Endpoint beans and @EndpointExtension beans in an application context.\nprotected static final class EndpointDiscoverer.OperationKey extends Object; // A key generated for an Operation based on specific criteria from the actual operation implementation.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Reflective public @interface EndpointExtension; // Annotation primarily used as a meta-annotation to indicate that an annotation provides extension support for an endpoint.\n@Target(TYPE) @Retention(RUNTIME) @Documented public @interface FilteredEndpoint; // Annotation that can be used on an @Endpoint to implement implicit filtering.\n", "des": "Annotation support for actuator endpoints."}
{"index": 216, "repo": "nutch-2.4", "code": "package protocol;\n\npackage protocol.file; // Protocol plugin which supports retrieving local file resources.\npackage protocol.ftp; // Protocol plugin which supports retrieving documents via the ftp protocol.\npackage protocol.http; // Protocol plugin which supports retrieving documents via the http protocol.\npackage protocol.httpclient; // Protocol plugin which supports retrieving documents via the HTTP and HTTPS protocols, optionally with Basic, Digest and NTLM authentication schemes for web server as well as proxy server.\npackage protocol.sftp; // Protocol plugin which supports retrieving documents via the sftp protocol.\nInterface Protocol; // A retriever of url content.\nInterface ProtocolStatusCodes;\nInterface RobotRules; // This class holds the rules which were parsed from a robots.txt file, and can test paths against those rules.\nClass Content;\nClass ProtocolFactory; // Creates and caches Protocol plugins.\nClass ProtocolOutput; // Simple aggregate to pass from protocol plugins both content and protocol status.\nClass ProtocolStatusUtils;\nClass RobotRulesParser; // This class uses crawler-commons for handling the parsing of robots.txt files.\nClass ProtocolException;\nClass ProtocolNotFound;\n", "des": "Classes related to the Protocol interface, see also org.apache.nutch.net.protocols."}
{"index": 2089, "repo": "spring-webmvc-6.0.11", "code": "package xslt;\n\npublic class XsltView extends AbstractUrlBasedView; // XSLT-driven View that allows for response context to be rendered as the result of an XSLT transformation.\npublic class XsltViewResolver extends UrlBasedViewResolver; // ViewResolver implementation that resolves instances of XsltView by translating the supplied view name into the URL of the XSLT stylesheet.\n", "des": "Support classes for XSLT, providing a View implementation for XSLT stylesheets."}
{"index": 1869, "repo": "spring-security-cas-6.1.2", "code": "package authentication;\n\npublic interface ServiceAuthenticationDetails extends Serializable; // In order for the CasAuthenticationProvider to provide the correct service url to authenticate the ticket, the returned value of Authentication.getDetails() should implement this interface when tickets can be sent to any URL rather than only ServiceProperties.getService().\npublic class ServiceAuthenticationDetailsSource extends Object implements org.springframework.security.authentication.AuthenticationDetailsSource<jakarta.servlet.http.HttpServletRequest,ServiceAuthenticationDetails>; // The AuthenticationDetailsSource that is set on the CasAuthenticationFilter should return a value that implements ServiceAuthenticationDetails if the application needs to authenticate dynamic service urls.\n", "des": "Authentication processing mechanisms which respond to the submission of authentication credentials using CAS."}
{"index": 2339, "repo": "spring-boot-3.1.1", "code": "package util;\n\npublic class Instantiator<T> extends Object; // Simple factory used to instantiate objects by injecting available parameters.\npublic static interface Instantiator.AvailableParameters; // Callback used to register available parameters.\npublic static interface Instantiator.FailureHandler; // Strategy for handling a failure that occurs when instantiating a type.\npublic final class LambdaSafe extends Object; // Utility that can be used to invoke lambdas in a safe way.\npublic static final class LambdaSafe.Callback<C,A> extends LambdaSafe.LambdaSafeCallback<C,A,LambdaSafe.Callback<C,A>>; // Represents a single callback that can be invoked in a lambda safe way.\npublic static final class LambdaSafe.Callbacks<C,A> extends LambdaSafe.LambdaSafeCallback<C,A,LambdaSafe.Callbacks<C,A>>; // Represents a collection of callbacks that can be invoked in a lambda safe way.\npublic static final class LambdaSafe.InvocationResult<R> extends Object; // The result of a callback which may be a value, null or absent entirely if the callback wasn't suitable.\nprotected abstract static class LambdaSafe.LambdaSafeCallback<C,A,SELF extends LambdaSafe.LambdaSafeCallback<C,A,SELF>> extends Object; // Abstract base class for lambda safe callbacks.\n", "des": "Contains miscellaneous utility classes."}
{"index": 536, "repo": "commons-vfs2-2.9.0", "code": "package zip;\n\nClass ZipFileObject; // A file in a ZIP file system.\nClass ZipFileProvider; // A file system provider for ZIP files.\nClass ZipFileSystem; // A read-only file system for ZIP and JAR files.\nClass ZipFileSystemConfigBuilder;\n", "des": "The Zip File Provider."}
{"index": 2285, "repo": "jcl-over-slf4j-2.0.7", "code": "package logging;\n\npackage logging.impl; // SLF4J based implementation of commons-logging wrapper APIs.\npublic interface Log; // A simple logging interface abstracting logging APIs.\npublic class LogConfigurationException extends RuntimeException; // An exception that is thrown only if a suitable LogFactory or Log instance cannot be created by the corresponding factory methods.\npublic abstract class LogFactory extends Object; // Factory for creating Log instances, which always delegates to an instance of SLF4JLogFactory.\n", "des": "Jakarta Commons Logging implemented over SLF4J."}
{"index": 218, "repo": "nutch-2.4", "code": "package storage;\n\nClass Host; // Host represents a store of webpages or other data which resides on a server or other computer so that it can be accessed over the Internet\nClass Host.Builder; // RecordBuilder for Host instances.\nClass Host.Tombstone;\nClass ParseStatus; // A nested container representing parse status data captured from invocation of parsers on fetch of a WebPage\nClass ParseStatus.Builder; // RecordBuilder for ParseStatus instances.\nClass ParseStatus.Tombstone;\nClass ProtocolStatus; // A nested container representing data captured from web server responses.\nClass ProtocolStatus.Builder; // RecordBuilder for ProtocolStatus instances.\nClass ProtocolStatus.Tombstone;\nClass StorageUtils; // Entry point to Gora store/mapreduce functionality.\nClass WebPage; // WebPage is the primary data structure in Nutch representing crawl data for a given WebPage at some point in time\nClass WebPage.Builder; // RecordBuilder for WebPage instances.\nClass WebPage.Tombstone;\nClass WebTableCreator;\nEnum Host.Field; // Enum containing all data bean's fields.\nEnum Mark;\nEnum ParseStatus.Field; // Enum containing all data bean's fields.\nEnum ProtocolStatus.Field; // Enum containing all data bean's fields.\nEnum WebPage.Field; // Enum containing all data bean's fields.\n", "des": "Representation (web pages, host metadata) of data in abstracted storage."}
{"index": 3581, "repo": "lucene-test-framework-9.7.0", "code": "package asserting;\n\nClass AssertingCodec; // Acts like the default codec but with additional asserts.\nClass AssertingDocValuesFormat; // Just like the default but with additional asserts.\nClass AssertingKnnVectorsFormat; // Wraps the default KnnVectorsFormat and provides additional assertions.\nClass AssertingLiveDocsFormat; // Just like the default live docs format but with additional asserts.\nClass AssertingNormsFormat; // Just like the default but with additional asserts.\nClass AssertingPointsFormat; // Just like the default point format but with additional asserts.\nClass AssertingPostingsFormat; // Just like the default postings format but with additional asserts.\nClass AssertingStoredFieldsFormat; // Just like the default stored fields format but with additional asserts.\nClass AssertingTermVectorsFormat; // Just like the default vectors format but with additional asserts.\n", "des": "Codec for testing that asserts various contracts of the codec apis."}
{"index": 1351, "repo": "spring-integration-kafka-6.1.2", "code": "package support;\n\npublic final class KafkaIntegrationHeaders extends Object; // Headers specifically for Spring Integration components.\npublic class KafkaSendFailureException extends org.springframework.messaging.MessagingException; // An exception that is the payload of an ErrorMessage when a send fails.\npublic class RawRecordHeaderErrorMessageStrategy extends Object implements org.springframework.integration.support.ErrorMessageStrategy; // ErrorMessageStrategy extension that adds the raw record as a header to the ErrorMessage.\n", "des": "Provides support classes."}
{"index": 718, "repo": "commons-codec-1.16.0", "code": "package codec;\n\npackage codec.binary; // Base64, Base32, Binary, and Hexadecimal String encoding and decoding.\npackage codec.cli; // Command line utility.\npackage codec.digest; // Simplifies common MessageDigest tasks and includes a libc crypt(3) compatible crypt method that supports DES, MD5, SHA-256 and SHA-512 based algorithms as well as the Apache specific \"$apr1$\" variant.\npackage codec.language; // Language and phonetic encoders.\npackage codec.net; // Network related encoding and decoding.\nInterface BinaryDecoder; // Defines common decoding methods for byte array decoders.\nInterface BinaryEncoder; // Defines common encoding methods for byte array encoders.\nInterface Decoder; // Provides the highest level of abstraction for Decoders.\nInterface Encoder; // Provides the highest level of abstraction for Encoders.\nInterface StringDecoder; // Defines common decoding methods for String decoders.\nInterface StringEncoder; // Defines common encoding methods for String encoders.\nClass CharEncoding; // Character encoding names required of every implementation of the Java platform.\nClass Charsets; // Charsets required of every implementation of the Java platform.\nClass Resources; // Consider this class package private.\nClass StringEncoderComparator; // Compares Strings using a StringEncoder.\nEnum CodecPolicy; // Defines encoding and decoding policies.\nClass DecoderException; // Thrown when there is a failure condition during the decoding process.\nClass EncoderException; // Thrown when there is a failure condition during the encoding process.\n", "des": "Interfaces and classes used by the various implementations in the sub-packages."}
{"index": 2407, "repo": "spring-batch-core-5.0.2", "code": "package item;\n\npublic class BatchRetryTemplate extends Object implements org.springframework.retry.RetryOperations; // A special purpose retry template that deals specifically with multi-valued stateful retry.\npublic class ChunkMonitor extends ItemStreamSupport; // Manage the offset data between the last successful commit and updates made to an input chunk.\npublic static class ChunkMonitor.ChunkMonitorData extends Object;\npublic class ChunkOrientedTasklet<I> extends Object implements Tasklet; // A Tasklet implementing variations on read-process-write item handling.\npublic interface ChunkProcessor<I>; // Interface defined for processing Chunks.\npublic interface ChunkProvider<T>; // Interface for providing Chunks to be processed, used by the ChunkOrientedTasklet\npublic class DefaultItemFailureHandler extends ItemListenerSupport<Object,Object>; // Default implementation of the ItemListenerSupport class that writes all exceptions via commons logging.\npublic class FaultTolerantChunkProcessor<I,O> extends SimpleChunkProcessor<I,O>; // FaultTolerant implementation of the ChunkProcessor interface, that allows for skipping or retry of items that cause exceptions during writing.\npublic class FaultTolerantChunkProvider<I> extends SimpleChunkProvider<I>; // FaultTolerant implementation of the ChunkProvider interface, that allows for skipping or retry of items that cause exceptions during reading or processing.\npublic class ForceRollbackForWriteSkipException extends RuntimeException; // Fatal exception to be thrown when a rollback must be forced, typically after catching an exception that otherwise would not cause a rollback.\n@FunctionalInterface public interface KeyGenerator; // Interface for defining keys to uniquely identify items.\npublic class SimpleChunkProcessor<I,O> extends Object implements ChunkProcessor<I>, org.springframework.beans.factory.InitializingBean; // Simple implementation of the ChunkProcessor interface that handles basic item writing and processing.\npublic class SimpleChunkProvider<I> extends Object implements ChunkProvider<I>; // Simple implementation of the ChunkProvider interface that does basic chunk providing from an ItemReader.\npublic class SimpleRetryExceptionHandler extends org.springframework.retry.listener.RetryListenerSupport implements ExceptionHandler; // An ExceptionHandler that is aware of the retry context so that it can distinguish between a fatal exception and one that can be retried.\npublic class SkipOverflowException extends SkipException;\n", "des": "Specific implementations of step concerns for item-oriented approach."}
{"index": 738, "repo": "spring-data-solr-4.3.15", "code": "package schema;\n\nInterface ContentParser;\nInterface SchemaDefinition.SchemaField;\nInterface SchemaOperations; // Operations interface for executing modification on a managed schema.\nClass DefaultSchemaOperations; // SchemaOperations implementation based on SolrTemplate.\nClass MappingJacksonRequestContentParser;\nClass MappingJacksonResponseParser;\nClass SchemaDefinition;\nClass SchemaDefinition.CopyFieldDefinition;\nClass SchemaDefinition.CopyFieldDefinition.Builder;\nClass SchemaDefinition.FieldDefinition;\nClass SchemaDefinition.FieldDefinition.Builder;\nClass SchemaDefinition.FieldDefinitionBuilder;\nClass SchemaDefinition.Filter;\nClass SchemaDefinition.Tokenizer;\nClass SolrJsonRequest;\nClass SolrJsonResponse;\nClass SolrPersistentEntitySchemaCreator;\nClass SolrSchemaResolver;\nClass SolrSchemaWriter;\nEnum SolrPersistentEntitySchemaCreator.Feature;\nClass SchemaModificationException; // NonTransientDataAccessException raised when schema modification requests fail.\n", "des": "Everything Apache Solr schema specific."}
{"index": 3703, "repo": "solr-core-9.3.0", "code": "package neural;\n\nClass KnnQParser;\nClass KnnQParserPlugin; // A neural query parser to run K-nearest neighbors search on Dense Vector fields.\n", "des": "APIs and classes for implementing Neural (Dense Retrieval) QueryParsers."}
{"index": 3328, "repo": "opencms-core-15.0", "code": "package linkvalidation;\n\nInterface I_CmsUpdatableComponent; // Interface with method to update a vaadin table.\nClass A_CmsLinkValidator; // Validator for links.\nClass CmsExternalLinksValidatorThread; // Thread for extern link validation.\nClass CmsInternalResources; // Class for the layout for choosing the resources.\nClass CmsLinkInFolderValidationApp; // App to check relations of resources in folder to other folder.\nClass CmsLinkInFolderValidationConfiguration; // Configuration for Check relation to resources outside of folder - app.\nClass CmsLinkValidationApp; // Class for the Link validation app.\nClass CmsLinkValidationConfiguration; // Configuration for Link Validation app.\nClass CmsLinkValidationExternal; // Class for the external link validation.\nClass CmsLinkValidationExternalApp; // Class for the Link validation app.\nClass CmsLinkValidationExternalConfiguration; // Configuration for Link Validation app.\nClass CmsLinkValidationFolder; // Class for the folder for the link validation tools.\nClass CmsLinkValidationInternalTable; // Result table for broken internal relations.\nClass CmsResourceListDialog; // Dialog to show list of resources.\n", "des": "Contains classes of the link validation app."}
{"index": 2133, "repo": "spring-context-support-6.0.11", "code": "package javamail;\n\npublic class ConfigurableMimeFileTypeMap extends FileTypeMap implements org.springframework.beans.factory.InitializingBean; // Spring-configurable FileTypeMap implementation that will read MIME type to file extension mappings from a standard JavaMail MIME type mapping file, using a standard MimetypesFileTypeMap underneath.\npublic class InternetAddressEditor extends PropertyEditorSupport; // Editor for java.mail.internet.InternetAddress, to directly populate an InternetAddress property.\npublic interface JavaMailSender extends MailSender; // Extended MailSender interface for JavaMail, supporting MIME messages both as direct arguments and through preparation callbacks.\npublic class JavaMailSenderImpl extends Object implements JavaMailSender; // Production implementation of the JavaMailSender interface, supporting both JavaMail MimeMessages and Spring SimpleMailMessages.\npublic class MimeMailMessage extends Object implements MailMessage; // Implementation of the MailMessage interface for a JavaMail MIME message, to let message population code interact with a simple message or a MIME message through a common interface.\npublic class MimeMessageHelper extends Object; // Helper class for populating a MimeMessage.\n@FunctionalInterface public interface MimeMessagePreparator; // Callback interface for the preparation of JavaMail MIME messages.\n", "des": "JavaMail support for Spring's mail infrastructure."}
{"index": 472, "repo": "jackson-core-2.15.2", "code": "package util;\n\nInterface DefaultPrettyPrinter.Indenter; // Interface that defines objects that can produce indentation used to separate object entries and array values.\nInterface Instantiatable<T>; // Add-on interface used to indicate things that may be \"blueprint\" objects which can not be used as is, but are used for creating usable per-process (serialization, deserialization) instances, using Instantiatable.createInstance() method.\nInterface JacksonFeature; // Basic API implemented by Enums used for simple Jackson \"features\": on/off settings and capabilities exposed as something that can be internally represented as bit sets.\nClass BufferRecycler; // This is a small utility class, whose main functionality is to allow simple reuse of raw byte/char buffers.\nClass BufferRecyclers; // Helper entity used to control access to simple buffer recyling scheme used for some encoding, decoding tasks.\nClass ByteArrayBuilder; // Helper class that is similar to ByteArrayOutputStream in usage, but more geared to Jackson use cases internally.\nClass DefaultIndenter; // Default linefeed-based indenter, used by DefaultPrettyPrinter (unless overridden).\nClass DefaultPrettyPrinter; // Default PrettyPrinter implementation that uses 2-space indentation with platform-default linefeeds.\nClass DefaultPrettyPrinter.FixedSpaceIndenter; // This is a very simple indenter that only adds a single space for indentation.\nClass DefaultPrettyPrinter.NopIndenter; // Dummy implementation that adds no indentation whatsoever\nClass InternCache; // Singleton class that adds a simple first-level cache in front of regular String.intern() functionality.\nClass JacksonFeatureSet<F extends JacksonFeature>; // Container similar to EnumSet meant for storing sets of JacksonFeatures (usually Enums): main difference being that these sets are immutable.\nClass JsonGeneratorDelegate;\nClass JsonParserDelegate; // Helper class that implements delegation pattern for JsonParser, to allow for simple overridability of basic parsing functionality.\nClass JsonParserSequence; // Helper class that can be used to sequence multiple physical JsonParsers to create a single logical sequence of tokens, as a single JsonParser.\nClass MinimalPrettyPrinter; // PrettyPrinter implementation that adds no indentation, just implements everything necessary for value output to work as expected, and provide simpler extension points to allow for creating simple custom implementations that add specific decoration or overrides.\nClass ReadConstrainedTextBuffer;\n", "des": "Utility classes used by Jackson Core functionality."}
{"index": 2178, "repo": "spring-security-web-6.1.2", "code": "package logout;\n\npublic final class CompositeLogoutHandler extends Object implements LogoutHandler; // Performs a logout through all the LogoutHandler implementations.\npublic final class CookieClearingLogoutHandler extends Object implements LogoutHandler; // A logout handler which clears either - A defined list of cookie names, using the context path as the cookie path OR - A given list of Cookies\npublic class DelegatingLogoutSuccessHandler extends Object implements LogoutSuccessHandler; // Delegates to logout handlers based on matched request matchers\npublic class ForwardLogoutSuccessHandler extends Object implements LogoutSuccessHandler; // LogoutSuccessHandler implementation that will perform a request dispatcher \"forward\" to the specified target URL.\npublic final class HeaderWriterLogoutHandler extends Object implements LogoutHandler;\npublic class HttpStatusReturningLogoutSuccessHandler extends Object implements LogoutSuccessHandler; // Implementation of the LogoutSuccessHandler.\npublic class LogoutFilter extends org.springframework.web.filter.GenericFilterBean; // Logs a principal out.\npublic interface LogoutHandler; // Indicates a class that is able to participate in logout handling.\npublic final class LogoutSuccessEventPublishingLogoutHandler extends Object implements LogoutHandler, org.springframework.context.ApplicationEventPublisherAware; // A logout handler which publishes LogoutSuccessEvent\npublic interface LogoutSuccessHandler; // Strategy that is called after a successful logout by the LogoutFilter, to handle redirection or forwarding to the appropriate destination.\npublic class SecurityContextLogoutHandler extends Object implements LogoutHandler; // Performs a logout by modifying the SecurityContextHolder.\npublic class SimpleUrlLogoutSuccessHandler extends AbstractAuthenticationTargetUrlRequestHandler implements LogoutSuccessHandler; // Handles the navigation on logout by delegating to the AbstractAuthenticationTargetUrlRequestHandler base class logic.\n", "des": "Logout functionality based around a filter which handles a specific logout URL."}
{"index": 2487, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package observation;\n\npackage observation.batch; // Auto-configuration for Spring Batch observations.\npackage observation.graphql; // Auto-configuration for Spring GraphQL observations.\n@AutoConfiguration(after={CompositeMeterRegistryAutoConfiguration.class,MicrometerTracingAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.observation.ObservationRegistry.class) @EnableConfigurationProperties(ObservationProperties.class) public class ObservationAutoConfiguration extends Object; // Auto-configuration for the Micrometer Observation API.\n@ConfigurationProperties(\"management.observations\") public class ObservationProperties extends Object; // @ConfigurationProperties for configuring Micrometer observations.\npublic static class ObservationProperties.Http extends Object;\npublic static class ObservationProperties.Http.Client extends Object;\npublic static class ObservationProperties.Http.Client.ClientRequests extends Object;\npublic static class ObservationProperties.Http.Server extends Object;\npublic static class ObservationProperties.Http.Server.ServerRequests extends Object;\n@FunctionalInterface public interface ObservationRegistryCustomizer<T extends io.micrometer.observation.ObservationRegistry>; // Callback interface that can be used to customize auto-configured observation registries.\n", "des": "Auto-configuration for the Micrometer Observation API."}
{"index": 2756, "repo": "spring-beans-6.0.11", "code": "package annotation;\n\npublic interface AnnotatedBeanDefinition extends BeanDefinition; // Extended BeanDefinition interface that exposes AnnotationMetadata about its bean class - without requiring the class to be loaded yet.\npublic class AnnotatedGenericBeanDefinition extends GenericBeanDefinition implements AnnotatedBeanDefinition; // Extension of the GenericBeanDefinition class, adding support for annotation metadata exposed through the AnnotatedBeanDefinition interface.\npublic class AnnotationBeanWiringInfoResolver extends Object implements BeanWiringInfoResolver; // BeanWiringInfoResolver that uses the Configurable annotation to identify which classes need autowiring.\npublic enum Autowire extends Enum<Autowire>; // Enumeration determining autowiring status: that is, whether a bean should have its dependencies automatically injected by the Spring container using setter injection.\n@Target({CONSTRUCTOR,METHOD,PARAMETER,FIELD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface Autowired; // Marks a constructor, field, setter method, or config method as to be autowired by Spring's dependency injection facilities.\npublic class AutowiredAnnotationBeanPostProcessor extends Object implements SmartInstantiationAwareBeanPostProcessor, MergedBeanDefinitionPostProcessor, BeanRegistrationAotProcessor, org.springframework.core.PriorityOrdered, BeanFactoryAware; // BeanPostProcessor implementation that autowires annotated fields, setter methods, and arbitrary config methods.\npublic abstract class BeanFactoryAnnotationUtils extends Object; // Convenience methods performing bean lookups related to Spring-specific annotations, for example Spring's @Qualifier annotation.\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented public @interface Configurable; // Marks a class as being eligible for Spring-driven configuration.\npublic class CustomAutowireConfigurer extends Object implements BeanFactoryPostProcessor, BeanClassLoaderAware, org.springframework.core.Ordered; // A BeanFactoryPostProcessor implementation that allows for convenient registration of custom autowire qualifier types.\npublic class InitDestroyAnnotationBeanPostProcessor extends Object implements DestructionAwareBeanPostProcessor, MergedBeanDefinitionPostProcessor, BeanRegistrationAotProcessor, org.springframework.core.PriorityOrdered, Serializable; // BeanPostProcessor implementation that invokes annotated init and destroy methods.\npublic class InjectionMetadata extends Object; // Internal class for managing injection metadata.\npublic abstract static class InjectionMetadata.InjectedElement extends Object; // A single injected element.\n", "des": "Support package for annotation-driven bean configuration."}
{"index": 3710, "repo": "solr-core-9.3.0", "code": "package suggest;\n\npackage suggest.fst; // Factories for FST and Analyzing based Suggesters\npackage suggest.jaspell; // Factories for JaSpell based Suggesters\npackage suggest.tst; // Factories for TST based Suggesters\nInterface SuggesterParams;\nClass DictionaryFactory; // Encapsulates shared fields for all types of dictionaryFactory classes\nClass DocumentDictionaryFactory; // Factory for DocumentDictionary\nClass DocumentExpressionDictionaryFactory; // Factory for DocumentValueSourceDictionary\nClass FileDictionaryFactory; // Factory for FileDictionary\nClass HighFrequencyDictionaryFactory; // Factory for HighFrequencyDictionary\nClass LookupFactory; // Suggester factory for creating Lookup instances.\nClass SolrSuggester; // Responsible for loading the lookup and dictionary Implementations specified by the SolrConfig.\nClass Suggester;\nClass SuggesterOptions; // Encapsulates the inputs required to be passed on to the underlying suggester in SolrSuggester\nClass SuggesterResult; // Encapsulates the results returned by the suggester in SolrSuggester\n", "des": "APIs and classes used by the SpellCheckComponent"}
{"index": 2581, "repo": "camel-api-4.0.0-RC1", "code": "package annotations;\n\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"cloud\") public @interface CloudServiceFactory;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"component\") public @interface Component;\n@Retention(RUNTIME) @Documented @Target(TYPE) public @interface ConstantProvider; // Internal annotation to mark a class as having constant fields for the source code generator.\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"dataformat\") public @interface Dataformat;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"dev-console\") public @interface DevConsole; // Marks a class as a custom developer console.\n@Target(FIELD) @Retention(RUNTIME) public @interface DslProperty; // Internal annotation used to include fields otherwise excluded because annotate with XmlTransient.\n@Retention(RUNTIME) @Documented @Target({METHOD,FIELD}) public @interface ExternalSchemaElement; // Annotation to be used for JAXB property (field or method) annotated with @XmlAnyElement to highlight which actual elements do we expect (not to be enforced by JAXB, but by Camel itself).\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"health-check\") public @interface HealthCheck; // Marks a class as a custom health-check or health-check repository.\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"#jdk#\") public @interface JdkService;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"language\") public @interface Language;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"periodic-task\") public @interface PeriodicTask;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"properties-function\") public @interface PropertiesFunction;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"resource-resolver\") public @interface ResourceResolver;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"routes-loader\") public @interface RoutesLoader;\n", "des": "SPI annotations for plugins"}
{"index": 3430, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface StrategyCreator<T>;\nInterface StrategySelector; // Service which acts as a registry for named strategy implementations.\nClass StrategySelectionException; // Indicates a problem performing the selection/resolution.\n", "des": "Defines actual contract used for strategy selection : StrategySelector."}
{"index": 3798, "repo": "lucene-analysis-common-9.7.0", "code": "package lv;\n\nClass LatvianAnalyzer; // Analyzer for Latvian.\nClass LatvianStemFilter; // A TokenFilter that applies LatvianStemmer to stem Latvian words.\nClass LatvianStemFilterFactory; // Factory for LatvianStemFilter.\nClass LatvianStemmer; // Light stemmer for Latvian.\n", "des": "Analyzer for Latvian."}
{"index": 2798, "repo": "spring-amqp-3.0.6", "code": "package support;\n\npackage support.converter; // Provides classes for supporting message conversion.\npackage support.postprocessor; // Package for Spring AMQP message post processors.\npublic interface AmqpHeaderMapper extends org.springframework.messaging.support.HeaderMapper<MessageProperties>; // Strategy interface for mapping messaging Message headers to an outbound MessageProperties (e.g.\npublic abstract class AmqpHeaders extends Object; // Pre-defined names and prefixes to be used for setting and/or retrieving AMQP MessageProperties from/to Message Headers.\npublic class AmqpMessageHeaderAccessor extends org.springframework.messaging.support.NativeMessageHeaderAccessor; // A MessageHeaderAccessor implementation giving access to AMQP-specific headers.\n@FunctionalInterface public interface ConditionalExceptionLogger; // For components that support customization of the logging of certain events, users can provide an implementation of this interface to modify the existing logging behavior.\n@FunctionalInterface public interface ConsumerTagStrategy; // A strategy interface to determine the consumer tag to be used when issuing a basicConsume operation.\npublic final class SendRetryContextAccessor extends Object; // Type safe accessor for retried message sending.\npublic class SimpleAmqpHeaderMapper extends org.springframework.messaging.support.AbstractHeaderMapper<MessageProperties> implements AmqpHeaderMapper; // Simple implementation of AmqpHeaderMapper.\n", "des": "Package for Spring AMQP support classes."}
{"index": 35, "repo": "ignite-core-2.15.0", "code": "package cluster;\n\nInterface BaselineNode; // Interface representing a single node from baseline topology.\nInterface ClusterGroup; // Defines a cluster group which contains all or a subset of cluster nodes.\nInterface ClusterMetrics; // This class represents runtime information on a cluster.\nInterface ClusterNode; // Interface representing a single cluster node.\nInterface ClusterStartNodeResult; // Cluster start node result information.\nEnum ClusterState; // Cluster states.\nClass ClusterGroupEmptyException; // This exception defines illegal call on empty cluster group.\nClass ClusterTopologyException; // This exception is used to indicate error with the cluster topology (e.g., crashed node, etc.).\n", "des": "Contains cluster-related classes."}
{"index": 197, "repo": "ignite-core-2.15.0", "code": "package mindrot;\n\nClass BCrypt; // BCrypt implements OpenBSD-style Blowfish password hashing using the scheme described in \"A Future-Adaptable Password Scheme\" by Niels Provos and David Mazieres.\n", "des": "Package contains class that from jbcrypt."}
{"index": 1195, "repo": "commons-math3-3.6.1", "code": "package optimization;\n\npackage optimization.direct; // This package provides optimization algorithms that don't require derivatives.\npackage optimization.fitting; // This package provides classes to perform curve fitting.\npackage optimization.general; // This package provides optimization algorithms that require derivatives.\npackage optimization.linear; // This package provides optimization algorithms for linear constrained problems.\npackage optimization.univariate; // Univariate real functions minimum finding algorithms.\nInterface BaseMultivariateOptimizer<FUNC extends MultivariateFunction>; // As of 3.1 (to be removed in 4.0).\nInterface BaseMultivariateSimpleBoundsOptimizer<FUNC extends MultivariateFunction>; // As of 3.1 (to be removed in 4.0).\nInterface BaseMultivariateVectorOptimizer<FUNC extends MultivariateVectorFunction>; // As of 3.1 (to be removed in 4.0).\nInterface BaseOptimizer<PAIR>; // As of 3.1 (to be removed in 4.0).\nInterface ConvergenceChecker<PAIR>; // As of 3.1 (to be removed in 4.0).\nInterface DifferentiableMultivariateOptimizer; // As of 3.1 (to be removed in 4.0).\nInterface DifferentiableMultivariateVectorOptimizer; // As of 3.1 (to be removed in 4.0).\nInterface MultivariateDifferentiableOptimizer; // As of 3.1 (to be removed in 4.0).\nInterface MultivariateDifferentiableVectorOptimizer; // As of 3.1 (to be removed in 4.0).\nInterface MultivariateOptimizer; // As of 3.1 (to be removed in 4.0).\nInterface OptimizationData; // As of 3.1 (to be removed in 4.0).\nClass AbstractConvergenceChecker<PAIR>; // As of 3.1 (to be removed in 4.0).\nClass BaseMultivariateMultiStartOptimizer<FUNC extends MultivariateFunction>; // As of 3.1 (to be removed in 4.0).\nClass BaseMultivariateVectorMultiStartOptimizer<FUNC extends MultivariateVectorFunction>; // As of 3.1 (to be removed in 4.0).\nClass DifferentiableMultivariateMultiStartOptimizer; // As of 3.1 (to be removed in 4.0).\n", "des": "All classes and sub-packages of this package are deprecated."}
{"index": 3176, "repo": "tomcat-api-10.1", "code": "package session;\n\nClass Constants; // Manifest constants for the org.apache.catalina.session package.\nClass DataSourceStore; // Implementation of the Store interface that stores serialized session objects in a database.\nClass FileStore; // Concrete implementation of the Store interface that utilizes a file per saved Session in a configured directory.\nClass ManagerBase; // Minimal implementation of the Manager interface that supports no session persistence or distributable capabilities.\nClass ManagerBase.SessionTiming;\nClass PersistentManager; // Implementation of the Manager interface that makes use of a Store to swap active Sessions to disk.\nClass PersistentManagerBase; // Extends the ManagerBase class to implement most of the functionality required by a Manager which supports any kind of persistence, even if only for restarts.\nClass StandardManager; // Standard implementation of the Manager interface that provides simple session persistence across restarts of this component (such as when the entire server is shut down and restarted, or when a particular web application is reloaded.\nClass StandardSession; // Standard implementation of the Session interface.\nClass StandardSessionFacade; // Facade for the StandardSession object.\nClass StoreBase; // Abstract implementation of the Store interface to support most of the functionality required by a Store.\nClass TooManyActiveSessionsException; // An exception that indicates the maximum number of active sessions has been reached and the server is refusing to create any new sessions.\n", "des": "This package contains the standard Manager and Session implementations that represent the collection of active sessions and the individual sessions themselves, respectively, that are associated with a Context."}
{"index": 2440, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package health;\n\npublic abstract class AbstractCompositeHealthContributorConfiguration<C,I extends C,B> extends Object; // Base class for health contributor configurations that can combine source beans into a composite.\npublic abstract class CompositeHealthContributorConfiguration<I extends org.springframework.boot.actuate.health.HealthIndicator,B> extends AbstractCompositeHealthContributorConfiguration<org.springframework.boot.actuate.health.HealthContributor,I,B>; // Base class for health contributor configurations that can combine source beans into a composite.\npublic abstract class CompositeReactiveHealthContributorConfiguration<I extends org.springframework.boot.actuate.health.ReactiveHealthIndicator,B> extends AbstractCompositeHealthContributorConfiguration<org.springframework.boot.actuate.health.ReactiveHealthContributor,I,B>; // Base class for health contributor configurations that can combine source beans into a composite.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.health.OnEnabledHealthIndicatorCondition.class) public @interface ConditionalOnEnabledHealthIndicator; // @Conditional that checks whether a default health indicator is enabled.\n@AutoConfiguration public class HealthContributorAutoConfiguration extends Object; // Auto-configuration for health contributors.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.health.HealthEndpoint.class) @EnableConfigurationProperties(HealthEndpointProperties.class) @Import({org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration.class,org.springframework.boot.actuate.autoconfigure.health.ReactiveHealthEndpointConfiguration.class,org.springframework.boot.actuate.autoconfigure.health.HealthEndpointWebExtensionConfiguration.class,org.springframework.boot.actuate.autoconfigure.health.HealthEndpointReactiveWebExtensionConfiguration.class}) public class HealthEndpointAutoConfiguration extends Object; // Auto-configuration for HealthEndpoint.\n@ConfigurationProperties(\"management.endpoint.health\") public class HealthEndpointProperties extends HealthProperties; // Configuration properties for HealthEndpoint.\npublic static class HealthEndpointProperties.Group extends HealthProperties; // A health endpoint group.\n", "des": "Auto-configuration for actuator health concerns."}
{"index": 2521, "repo": "spring-security-core-6.1.2", "code": "package aopalliance;\n\n@Deprecated public class MethodSecurityInterceptor extends AbstractSecurityInterceptor implements org.aopalliance.intercept.MethodInterceptor;\n@Deprecated public class MethodSecurityMetadataSourceAdvisor extends org.springframework.aop.support.AbstractPointcutAdvisor implements org.springframework.beans.factory.BeanFactoryAware;\n", "des": "Enforces security for AOP Alliance MethodInvocations, such as via Spring AOP."}
{"index": 771, "repo": "lucene-analyzers-common-8.11.2", "code": "package de;\n\nClass GermanAnalyzer; // Analyzer for German language.\nClass GermanLightStemFilter; // A TokenFilter that applies GermanLightStemmer to stem German words.\nClass GermanLightStemFilterFactory; // Factory for GermanLightStemFilter.\nClass GermanLightStemmer; // Light Stemmer for German.\nClass GermanMinimalStemFilter; // A TokenFilter that applies GermanMinimalStemmer to stem German words.\nClass GermanMinimalStemFilterFactory; // Factory for GermanMinimalStemFilter.\nClass GermanMinimalStemmer; // Minimal Stemmer for German.\nClass GermanNormalizationFilter; // Normalizes German characters according to the heuristics of the German2 snowball algorithm.\nClass GermanNormalizationFilterFactory; // Factory for GermanNormalizationFilter.\nClass GermanStemFilter; // A TokenFilter that stems German words.\nClass GermanStemFilterFactory; // Factory for GermanStemFilter.\nClass GermanStemmer; // A stemmer for German words.\n", "des": "Analyzer for German."}
{"index": 529, "repo": "commons-vfs2-2.9.0", "code": "package local;\n\nClass DefaultLocalFileProvider; // A file system provider, which uses direct file access.\nClass GenericFileNameParser; // A general-purpose file name parser.\nClass LocalFile; // A file object implementation which uses direct file access.\nClass LocalFileName; // A local file URI.\nClass LocalFileNameParser; // A name parser.\nClass LocalFileSystem; // A local file system.\nClass WindowsFileName; // A local file URI.\nClass WindowsFileNameParser; // A parser for Windows file names.\n", "des": "The Local File Provider."}
{"index": 196, "repo": "ignite-core-2.15.0", "code": "package jsr166;\n\nClass ConcurrentHashMap8<K,V>; // need for java deserialization ConcurrentHashMap8 from old nodes.\nClass ConcurrentLinkedDeque8<E>; // An unbounded concurrent deque based on linked nodes.\nClass ConcurrentLinkedDeque8.Node<E>;\nClass ConcurrentLinkedHashMap<K,V>; // A hash table supporting full concurrency of retrievals and adjustable expected concurrency for updates.\nClass ConcurrentLinkedHashMap.HashEntry<K,V>; // ConcurrentHashMap list entry.\nEnum ConcurrentLinkedHashMap.QueuePolicy; // Defines queue policy for this hash map.\n", "des": "Package contains classes that from JSR166."}
{"index": 1837, "repo": "spring-test-6.0.11", "code": "package aot;\n\npublic interface AotContextLoader extends SmartContextLoader; // Strategy interface for loading an ApplicationContext for build-time AOT processing as well as run-time AOT execution for an integration test managed by the Spring TestContext Framework.\npublic interface AotTestAttributes; // Holder for metadata specific to ahead-of-time (AOT) support in the Spring TestContext Framework.\npublic class AotTestContextInitializers extends Object; // AotTestContextInitializers provides mappings from test classes to AOT-optimized context initializers.\npublic interface AotTestExecutionListener extends TestExecutionListener; // AotTestExecutionListener is an extension of the TestExecutionListener SPI that allows a listener to optionally provide ahead-of-time (AOT) support.\npublic abstract class TestAotProcessor extends org.springframework.context.aot.AbstractAotProcessor<Void>; // Filesystem-based ahead-of-time (AOT) processing base implementation that scans the provided classpath roots for Spring integration test classes and then generates AOT artifacts for those test classes in the configured output directories.\npublic class TestContextAotException extends RuntimeException; // Thrown if an error occurs during AOT build-time processing or AOT run-time execution in the Spring TestContext Framework.\npublic class TestContextAotGenerator extends Object; // TestContextAotGenerator generates AOT artifacts for integration tests that depend on support from the Spring TestContext Framework.\npublic interface TestRuntimeHintsRegistrar; // Contract for registering RuntimeHints for integration tests run with the Spring TestContext Framework based on the ClassLoader of the deployment unit.\n", "des": "Ahead-of-time (AOT) support for the Spring TestContext Framework."}
{"index": 3870, "repo": "lucene-spatial-extras-9.7.0", "code": "package spatial4j;\n\nClass Geo3dBinaryCodec; // Geo3d implementation of BinaryCodec\nClass Geo3dCircleShape; // Specialization of a Geo3dShape which represents a Circle.\nClass Geo3dDistanceCalculator; // Geo3d implementation of DistanceCalculator\nClass Geo3dPointShape; // Specialization of a Geo3dShape which represents a Point.\nClass Geo3dRectangleShape; // Specialization of a Geo3dShape which represents a Rectangle.\nClass Geo3dShape<T extends GeoAreaShape>; // A Spatial4j Shape wrapping a GeoAreaShape (\"Geo3D\") -- a 3D planar geometry based Spatial4j Shape implementation.\nClass Geo3dShapeFactory; // Geo3d implementation of S2ShapeFactory\nClass Geo3dSpatialContextFactory; // Geo3d implementation of SpatialContextFactory\n", "des": "Spatial4j stuff that ideally belongs in Spatial4j (isn't related to Lucene)."}
{"index": 2724, "repo": "spring-batch-infrastructure-5.0.2", "code": "package function;\n\npublic class FunctionItemProcessor<I,O> extends Object implements ItemProcessor<I,O>; // An ItemProcessor implementation that delegates to a Function\n", "des": "Adapters for java.util.function components."}
{"index": 2159, "repo": "wicket-core-10.0.0-M1", "code": "package transformer;\n\npublic abstract class AbstractOutputTransformerContainer extends MarkupContainer implements ITransformer; // This abstract container provides the means to post-process the markup generated by its child components (excluding the containers tag)\npublic abstract class AbstractTransformerBehavior extends Behavior implements ITransformer; // A Behavior which can be added to any component.\n@FunctionalInterface public interface ITransformer; // A common interface to be implemented by AbstractOutputTransformerContainers and AbstractTransformerBehaviors which post-process the output markup of a component.\npublic class NoopOutputTransformerContainer extends AbstractOutputTransformerContainer; // An implementation of an output transformer which does nothing.\npublic class XsltOutputTransformerContainer extends AbstractOutputTransformerContainer; // A container which output markup will be processes by a XSLT processor prior to writing the output into the web response.\npublic class XsltTransformer extends Object implements ITransformer; // A processor to XSLT transform the output generated by a Component.\npublic class XsltTransformerBehavior extends AbstractTransformerBehavior; // An IBehavior which can be added to any component except ListView.\n", "des": "Transformers are able to post-process (transform) the output generated by a Component."}
{"index": 319, "repo": "kafka-clients-3.5.0", "code": "package acl;\n\nClass AccessControlEntry; // Represents an access control entry.\nClass AccessControlEntryFilter; // Represents a filter which matches access control entries.\nClass AclBinding; // Represents a binding between a resource pattern and an access control entry.\nClass AclBindingFilter; // A filter which can match AclBinding objects.\nEnum AclOperation; // Represents an operation which an ACL grants or denies permission to perform.\nEnum AclPermissionType; // Represents whether an ACL grants or denies permissions.\n", "des": "Provides classes representing Access Control Lists for authorization of clients"}
{"index": 251, "repo": "nutch-2.4", "code": "package regex;\n\nClass RegexURLFilter; // Filters URLs based on a file of regular expressions using the Java Regex implementation.\n", "des": "URL filter plugin to include and/or exclude URLs matching Java regular expressions."}
{"index": 2309, "repo": "spring-boot-3.1.1", "code": "package jackson;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface JsonComponent; // @Component that provides JsonSerializer, JsonDeserializer or KeyDeserializer implementations to be registered with Jackson when JsonComponentModule is in use.\npublic static enum JsonComponent.Scope extends Enum<JsonComponent.Scope>; // The various scopes under which a serializer/deserializer can be registered.\npublic class JsonComponentModule extends com.fasterxml.jackson.databind.module.SimpleModule implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // Spring Bean and Jackson Module to register @JsonComponent annotated beans.\n@Target(TYPE) @Retention(RUNTIME) @Documented public @interface JsonMixin; // Provides a mixin class implementation that registers with Jackson when using JsonMixinModule.\npublic class JsonMixinModule extends com.fasterxml.jackson.databind.module.SimpleModule; // Spring Bean and Jackson Module to find and register @JsonMixin-annotated classes.\npublic final class JsonMixinModuleEntries extends Object; // Provide the mapping of json mixin class to consider.\npublic static class JsonMixinModuleEntries.Builder extends Object; // Builder for JsonMixinModuleEntries.\npublic abstract class JsonObjectDeserializer<T> extends com.fasterxml.jackson.databind.JsonDeserializer<T>; // Helper base class for JsonDeserializer implementations that deserialize objects.\npublic abstract class JsonObjectSerializer<T> extends com.fasterxml.jackson.databind.JsonSerializer<T>; // Helper base class for JsonSerializer implementations that serialize objects.\n", "des": "Custom enhancements and support for the Jackson project."}
{"index": 292, "repo": "pdfbox-3.0.0-beta1", "code": "package fdf;\n\nClass FDFAnnotation; // This represents an FDF annotation that is part of the FDF document.\nClass FDFAnnotationCaret; // This represents a Caret FDF annotation.\nClass FDFAnnotationCircle; // This represents a Circle FDF annotation.\nClass FDFAnnotationFileAttachment; // This represents a FileAttachment FDF annotation.\nClass FDFAnnotationFreeText; // This represents a FreeText FDF annotation.\nClass FDFAnnotationHighlight; // This represents a Highlight FDF annotation.\nClass FDFAnnotationInk; // This represents a Ink FDF annotation.\nClass FDFAnnotationLine; // This represents a Line FDF annotation.\nClass FDFAnnotationLink; // This represents a Polygon FDF annotation.\nClass FDFAnnotationPolygon; // This represents a Polygon FDF annotation.\nClass FDFAnnotationPolyline; // This represents a Polyline FDF annotation.\nClass FDFAnnotationSound; // This represents a Sound FDF annotation.\nClass FDFAnnotationSquare; // This represents a Square FDF annotation.\nClass FDFAnnotationSquiggly; // This represents a Squiggly FDF annotation.\nClass FDFAnnotationStamp; // This represents a Stamp FDF annotation.\nClass FDFAnnotationStrikeOut; // This represents a StrikeOut FDF annotation.\nClass FDFAnnotationText; // This represents a Text FDF annotation.\nClass FDFAnnotationTextMarkup; // This abstract class is used as a superclass for the different FDF annotations with text markup attributes.\nClass FDFAnnotationUnderline; // This represents a Underline FDF annotation.\nClass FDFCatalog; // This represents an FDF catalog that is part of the FDF document.\nClass FDFDictionary; // This represents an FDF dictionary that is part of the FDF document.\nClass FDFDocument; // This is the in-memory representation of the FDF document.\nClass FDFField; // This represents an FDF field that is part of the FDF document.\nClass FDFIconFit; // This represents an Icon fit dictionary for an FDF field.\nClass FDFJavaScript; // This represents an FDF JavaScript dictionary that is part of the FDF document.\nClass FDFNamedPageReference; // This represents an FDF named page reference that is part of the FDF field.\n", "des": "The fdf package will handle all of the logic used for FDF objects inside of the PDF/FDF document."}
{"index": 2005, "repo": "spring-integration-ws-6.1.2", "code": "package dsl;\n\npublic abstract class BaseWsInboundGatewaySpec<S extends BaseWsInboundGatewaySpec<S,E>,E extends AbstractWebServiceInboundGateway> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,E>; // Base MessagingGatewaySpec for web services.\npublic abstract class BaseWsOutboundGatewaySpec<S extends BaseWsOutboundGatewaySpec<S,E>,E extends AbstractWebServiceOutboundGateway> extends org.springframework.integration.dsl.MessageHandlerSpec<S,E>; // The base MessageHandlerSpec for AbstractWebServiceOutboundGateways.\npublic class MarshallingWsInboundGatewaySpec extends BaseWsInboundGatewaySpec<MarshallingWsInboundGatewaySpec,MarshallingWebServiceInboundGateway>; // The spec for a MarshallingWebServiceInboundGateway.\npublic class MarshallingWsOutboundGatewaySpec extends BaseWsOutboundGatewaySpec<MarshallingWsOutboundGatewaySpec,MarshallingWebServiceOutboundGateway>; // The spec for a MarshallingWebServiceOutboundGateway.\npublic static class MarshallingWsOutboundGatewaySpec.MarshallingWsOutboundGatewayNoTemplateSpec extends BaseWsOutboundGatewaySpec<MarshallingWsOutboundGatewaySpec.MarshallingWsOutboundGatewayNoTemplateSpec,MarshallingWebServiceOutboundGateway>; // Spec for a MarshallingWebServiceOutboundGateway where an external WebServiceTemplate is not provided.\npublic class SimpleWsInboundGatewaySpec extends BaseWsInboundGatewaySpec<SimpleWsInboundGatewaySpec,SimpleWebServiceInboundGateway>; // The spec for a SimpleWebServiceInboundGateway.\npublic class SimpleWsOutboundGatewaySpec extends BaseWsOutboundGatewaySpec<SimpleWsOutboundGatewaySpec,SimpleWebServiceOutboundGateway>; // The spec for a SimpleWebServiceOutboundGateway.\npublic static class SimpleWsOutboundGatewaySpec.SimpleWsOutboundGatewayNoTemplateSpec extends BaseWsOutboundGatewaySpec<SimpleWsOutboundGatewaySpec.SimpleWsOutboundGatewayNoTemplateSpec,SimpleWebServiceOutboundGateway>; // Spec for a SimpleWebServiceOutboundGateway where an external WebServiceTemplate is not provided.\npublic final class Ws extends Object; // Factory class for web service components.\n", "des": "Contains classes for DSL support."}
{"index": 362, "repo": "commons-geometry-euclidean-1.0", "code": "package internal;\n\nClass AbstractPathConnector<E extends AbstractPathConnector.ConnectableElement<E>>; // Abstract base class for joining unconnected path elements into connected, directional paths.\nClass AbstractPathConnector.ConnectableElement<E extends AbstractPathConnector.ConnectableElement<E>>; // Class used to represent connectable path elements for use with AbstractPathConnector.\nClass EuclideanUtils; // Class containing utilities and algorithms intended to be internal to the library.\nClass Matrices; // This class consists exclusively of static matrix utility methods.\nClass Vectors; // This class consists exclusively of static vector utility methods.\n", "des": "This package contains Euclidean geometry utilities and classes intended for internal use only."}
{"index": 687, "repo": "jackson-databind-2.15.2", "code": "package jdk14;\n\nClass JDK14Util; // Helper class to support some of JDK 14 (and later) features without Jackson itself being run on (or even built with) Java 14.\n", "des": "Contains helper class(es) needed to support some of JDK14+ features without requiring running or building using JDK 14."}
{"index": 1782, "repo": "spring-integration-file-6.1.2", "code": "package dsl;\n\npublic class FileInboundChannelAdapterSpec extends org.springframework.integration.dsl.MessageSourceSpec<FileInboundChannelAdapterSpec,FileReadingMessageSource> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessageSourceSpec for a FileReadingMessageSource.\npublic abstract class Files extends Object; // The Spring Integration File components Factory.\npublic class FileSplitterSpec extends org.springframework.integration.dsl.MessageHandlerSpec<FileSplitterSpec,FileSplitter>; // The MessageHandlerSpec for the FileSplitter.\npublic abstract class FileTransferringMessageHandlerSpec<F,S extends FileTransferringMessageHandlerSpec<F,S>> extends org.springframework.integration.dsl.MessageHandlerSpec<S,FileTransferringMessageHandler<F>> implements org.springframework.integration.dsl.ComponentsRegistration; // The MessageHandlerSpec for the FileTransferringMessageHandler.\npublic class FileWritingMessageHandlerSpec extends org.springframework.integration.dsl.MessageHandlerSpec<FileWritingMessageHandlerSpec,FileWritingMessageHandler> implements org.springframework.integration.dsl.ComponentsRegistration; // The MessageHandlerSpec for the FileWritingMessageHandler.\npublic abstract class RemoteFileInboundChannelAdapterSpec<F,S extends RemoteFileInboundChannelAdapterSpec<F,S,MS>,MS extends AbstractInboundFileSynchronizingMessageSource<F>> extends org.springframework.integration.dsl.MessageSourceSpec<S,MS> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessageSourceSpec for an AbstractInboundFileSynchronizingMessageSource.\npublic abstract class RemoteFileOutboundGatewaySpec<F,S extends RemoteFileOutboundGatewaySpec<F,S>> extends org.springframework.integration.dsl.MessageHandlerSpec<S,AbstractRemoteFileOutboundGateway<F>> implements org.springframework.integration.dsl.ComponentsRegistration; // The MessageHandlerSpec for the AbstractRemoteFileOutboundGateway.\n", "des": "Provides File Components support for Spring Integration Java DSL."}
{"index": 2677, "repo": "spring-r2dbc-6.0.11", "code": "package binding;\n\npublic class Bindings extends Object implements Iterable<Bindings.Binding>; // Value object representing value and null bindings for a Statement using BindMarkers.\npublic abstract static class Bindings.Binding extends Object; // Base class for value objects representing a value or a NULL binding.\npublic interface BindMarker; // A bind marker represents a single bindable parameter within a query.\n@FunctionalInterface public interface BindMarkers; // Bind markers represent placeholders in SQL queries for substitution for an actual parameter.\n@FunctionalInterface public interface BindMarkersFactory; // This class creates new BindMarkers instances to bind parameter to a specific Statement.\npublic final class BindMarkersFactoryResolver extends Object; // Resolves a BindMarkersFactory from a ConnectionFactory using BindMarkersFactoryResolver.BindMarkerFactoryProvider.\n@FunctionalInterface public static interface BindMarkersFactoryResolver.BindMarkerFactoryProvider; // SPI to extend Spring's default R2DBC BindMarkersFactory discovery mechanism.\npublic static class BindMarkersFactoryResolver.NoBindMarkersFactoryException extends org.springframework.dao.NonTransientDataAccessException; // Exception thrown when BindMarkersFactoryResolver cannot resolve a BindMarkersFactory.\npublic interface BindTarget; // Target to apply bindings to.\npublic class MutableBindings extends Bindings; // Mutable extension to Bindings for Value and null bindings for a Statement using BindMarkers.\n", "des": "Classes providing an abstraction over SQL bind markers."}
{"index": 1700, "repo": "drill-common-1.21.1", "code": "package common;\n\npackage common.config; // Internal configuration state definitions.\npackage common.exceptions; // Various exceptions used in logical, physical and execution contexts.\npackage common.types; // Logical data types.\npackage common.util; // Utilities useful across packages.\npublic final class AutoCloseablePointer<T extends AutoCloseable> extends Object implements AutoCloseable; // A class similar to Pointer<>, but with features unique to holding AutoCloseable pointers.\npublic class AutoCloseables extends Object; // Utilities for AutoCloseable classes.\npublic static interface AutoCloseables.Closeable extends AutoCloseable;\npublic class CatastrophicFailure extends Object;\npublic class DeferredException extends Object implements AutoCloseable; // Collects one or more exceptions that may occur, using suppressed exceptions.\npublic class DrillAutoCloseables extends Object; // Provides functionality comparable to Guava's Closeables for AutoCloseables.\npublic abstract class EventProcessor<T> extends Object; // Process events serially. Our use of listeners that deliver events directly can sometimes cause problems when events are delivered recursively in the middle of event handling by the same object.\npublic class HistoricalLog extends Object; // Utility class that can be used to log activity within a class for later logging and debugging.\npublic final class KerberosUtil extends Object;\npublic class PlanStringBuilder extends Object; // Builds a string in Drill's \"plan string\" format: that shown in the text version of EXPLAIN PLAN FOR output.\npublic abstract class SelfCleaningRunnable extends Object implements Runnable; // A wrapper for Runnables that provides a hook to do cleanup.\npublic class StackTrace extends Object; // Convenient way of obtaining and manipulating stack traces for debugging.\npublic class Typifier extends Object; // This class attempts to infer the data type of an unknown data type.\npublic final class Version extends Object implements Comparable<Version>; // Encapsulates version information and provides ordering\n", "des": "Logical (execution-engine-independent) element definitions."}
{"index": 625, "repo": "freemarker-2.3.32", "code": "package jsp;\n\nClass EventForwarding; // An instance of this class should be registered as a <listener> in the web.xml descriptor in order to correctly dispatch events to event listeners that are specified in TLD files.\nClass FreemarkerTag; // This feature is not supported anymore, also, it uses the deprecated default Configuration.\nClass TaglibFactory; // A hash model associated with a servlet context that can load JSP tag libraries associated with that servlet context.\nClass TaglibFactory.ClasspathMetaInfTldSource; // To search TLD-s under META-INF/**/*.tld inside classpath root containers, that is, in directories and jar-s that are in the classpath (or are visible for the class loader otherwise).\nClass TaglibFactory.ClearMetaInfTldSource; // When it occurs in the TaglibFactory.MetaInfTldSource list, all TaglibFactory.MetaInfTldSource-s before it will be disabled.\nClass TaglibFactory.MetaInfTldSource; // A location within which we will look for META-INF/**/*.tld-s.\nClass TaglibFactory.WebInfPerLibJarMetaInfTldSource; // To search TLD-s under sevletContext:/WEB-INF/lib/*.{jar,zip}/META-INF/**/*.tld, as requested by the JSP specification.\n", "des": "Classes for two-way FreeMarker-JSP integration."}
{"index": 306, "repo": "pdfbox-3.0.0-beta1", "code": "package outline;\n\nClass PDDocumentOutline; // This represents an outline in a pdf document.\nClass PDOutlineItem; // This represents an outline item in a pdf document.\nClass PDOutlineNode; // Base class for a node in the outline of a PDF document.\n", "des": "The outline package allows for a PDF outline(bookmarks) to be created."}
{"index": 1424, "repo": "spring-boot-actuator-3.1.1", "code": "package client;\n\n@Deprecated(since=\"3.0.0\", forRemoval=true) public class DefaultWebClientExchangeTagsProvider extends Object implements WebClientExchangeTagsProvider;\npublic class ObservationWebClientCustomizer extends Object implements org.springframework.boot.web.reactive.function.client.WebClientCustomizer; // WebClientCustomizer that configures the WebClient to record request observations.\n@Deprecated(since=\"3.0.0\", forRemoval=true) public final class WebClientExchangeTags extends Object;\n@FunctionalInterface @Deprecated(since=\"3.0.0\", forRemoval=true) public interface WebClientExchangeTagsProvider;\n", "des": "Actuator support for WebClient metrics."}
{"index": 3496, "repo": "poi-5.2.3", "code": "package usermodel;\n\nInterface HSSFShapeContainer; // An interface that indicates whether a class can contain children.\nInterface HSSFShapeTypes;\nClass DVConstraint; // Data Validation Constraint\nClass EscherGraphics; // Translates Graphics calls into escher calls.\nClass EscherGraphics2d; // Translates Graphics2d calls into escher calls.\nClass FontDetails; // Stores width and height details about a font.\nClass HeaderFooter; // Common class for HSSFHeader and HSSFFooter.\nClass HSSFAnchor; // An anchor is what specifics the position of a shape within a client object or within another containing shape.\nClass HSSFAutoFilter; // Represents autofiltering for the specified worksheet.\nClass HSSFBorderFormatting; // High level representation for Border Formatting component of Conditional Formatting settings\nClass HSSFCell; // High level representation of a cell in a row of a spreadsheet.\nClass HSSFCellStyle; // High level representation of the style of a cell in a sheet of a workbook.\nClass HSSFChart; // Has methods for construction of a chart object.\nClass HSSFChart.HSSFSeries; // A series in a chart\nClass HSSFChildAnchor;\nClass HSSFClientAnchor; // A client anchor is attached to an excel worksheet.\nClass HSSFColorScaleFormatting; // High level representation for Color Scale / Color Gradient Formatting component of Conditional Formatting settings\nClass HSSFCombobox;\nClass HSSFComment; // Represents a cell comment - a sticky note associated with a cell.\nClass HSSFConditionalFormatting; // HSSFConditionalFormatting class encapsulates all settings of Conditional Formatting.\nClass HSSFConditionalFormattingRule; // High level representation of Conditional Formatting Rule.\nClass HSSFConditionalFormattingThreshold; // High level representation for Icon / Multi-State / Databar / Colour Scale change thresholds\nClass HSSFCreationHelper;\nClass HSSFDataBarFormatting; // High level representation for DataBar / Data-Bar Formatting component of Conditional Formatting settings\nClass HSSFDataFormat; // Identifies both built-in and user defined formats within a workbook.\n", "des": "The usermodel package maps HSSF low level structures to familiar workbook/sheet model"}
{"index": 320, "repo": "kafka-clients-3.5.0", "code": "package annotation;\n\nClass InterfaceStability; // Annotation to inform users of how much to rely on a particular package, class or method not changing over time.\nAnnotation Type InterfaceStability.Evolving; // Compatibility may be broken at minor release (i.e.\nAnnotation Type InterfaceStability.Stable; // Compatibility is maintained in major, minor and patch releases with one exception: compatibility may be broken in a major release (i.e.\nAnnotation Type InterfaceStability.Unstable; // No guarantee is provided as to reliability or stability across any level of release granularity.\n", "des": "Provides annotations used on Kafka APIs."}
{"index": 3325, "repo": "opencms-core-15.0", "code": "package dbmanager;\n\nInterface I_CmsReportApp; // Interface for Apps, which run an import thread for files.\nClass A_CmsHTTPImportForm; // Abstract class for HTTP imports.\nClass A_CmsImportForm; // Abstract class for a form to import a file.\nClass A_CmsServerImportForm; // Abstract class for the import from a folder on the server.\nClass CmsAddExportResourcesDialog; // Dialog used to enter a list of paths to be added to the resources in the database export dialog.\nClass CmsAddPropertyDefinitionDialog; // Class for dialog to create property definition.\nClass CmsDbExportApp; // Class for the database export function.\nClass CmsDbExportConfiguration; // Configuration for Database manager app.\nClass CmsDbExportView; // Class for the Export dialog.\nClass CmsDbImportApp; // Class for the database import app.\nClass CmsDbImportHTTP; // HTTP import class.\nClass CmsDbImportHTTPConfiguration; // Configuration for Database manager app.\nClass CmsDbImportServer; // Class for the import from server option.\nClass CmsDbImportServerConfiguration; // Class for app configuration.\nClass CmsDbManager; // Class for database manager app.\nClass CmsDbManagerConfiguration; // Configuration for Database manager app.\nClass CmsDbManagerFolder; // Class for the app folder.\nClass CmsDbPropertiesApp; // Class for the property definition app.\nClass CmsDbPropertiesAppConfiguration; // Configuration class for property app.\nClass CmsDbRemovePublishLocks; // Remove publish locks.\nClass CmsDbRemovePubLocksApp; // App for the remove publish-locks function.\nClass CmsDbRemovePubLocksConfiguration; // Class for app configuration.\nClass CmsDbStaticExportApp; // Class for the database static export app.\nClass CmsDbStaticExportConfiguration; // Configuration for Database manager app.\nClass CmsDbStaticExportView; // Class for the static export view.\nClass CmsDbSynchDialog; // Class for the synchronization dialog.\nClass CmsDbSynchronizationApp; // Class for the database synchronization app.\nClass CmsDbSynchronizationConfiguration; // Configuration class for the synchronization app.\nClass CmsDbSynchronizationView; // Synchronization layout class.\nClass CmsExportThreadDialog; // The export thread report.\nClass CmsImportFile;\nClass CmsPropertyDeleteDialog; // Dialog to delete property definitions.\nClass CmsPropertyTable; // Class for the table containing all property definitions in the system.\n", "des": "Contains classes of the cache admin app."}
{"index": 3665, "repo": "solr-core-9.3.0", "code": "package csv;\n\nClass CharBuffer; // A simple StringBuffer replacement that aims to reduce copying as much as possible.\nClass CSVParser; // Parses CSV files according to the specified configuration.\nClass CSVPrinter; // Print values as a comma separated list.\nClass CSVStrategy; // CSVStrategy\nClass CSVUtils; // Utility methods for dealing with CSV files\n", "des": "Internal classes used for reading/writing CSV"}
{"index": 3654, "repo": "solr-core-9.3.0", "code": "package admin;\n\npackage admin.api; // V2 API implementations for \"admin\" APIs.\nInterface BaseHandlerApiSupport.ApiCommand;\nInterface CoreAdminHandler.CoreAdminOp;\nClass AdminHandlersProxy; // Static methods to proxy calls to an Admin (GET) API to other nodes in the cluster and return a combined response\nClass BaseHandlerApiSupport; // This is a utility class to provide an easy mapping of request handlers which support multiple commands to the V2 API format (core admin api, collections api).\nClass ClusterStatus;\nClass CollectionsHandler;\nClass ColStatus; // Report low-level details of collection.\nClass ConfigSetsHandler; // A SolrRequestHandler for ConfigSets API requests.\nClass ContainerPluginsApi; // API to maintain container-level plugin configurations.\nClass CoreAdminHandler;\nClass CoreAdminHandler.CallInfo;\nClass CoreAdminHandler.CoreAdminAsyncTracker;\nClass CoreAdminHandler.CoreAdminAsyncTracker.TaskObject; // Helper class to manage the tasks to be tracked.\nClass HealthCheckHandler; // Health Check Handler for reporting the health of a specific node.\nClass IndexSizeEstimator; // Estimates the raw size of all uncompressed indexed data by scanning term, docValues and stored fields data.\nClass IndexSizeEstimator.Estimate;\nClass IndexSizeEstimator.Item;\nClass IndexSizeEstimator.ItemPriorityQueue;\nClass IndexSizeEstimator.MapWriterSummaryStatistics;\nClass InfoHandler;\nClass InstallCoreDataOp; // v1 shim implementation of the \"Install Core Data\" API, a core-admin API used to implement the \"Install Shard Data\" Collection-Admin functionality\nClass LoggingHandler; // A request handler to show which loggers are registered and allows you to set them\nClass LukeRequestHandler; // Exposes the internal lucene index.\nClass MetricsCollectorHandler; // Handler to collect and aggregate metric reports.\nClass MetricsHandler; // Request handler to return metrics\nClass PluginInfoHandler;\nClass PropertiesRequestHandler;\nClass SecurityConfHandler;\nClass SecurityConfHandler.SecurityConfig; // Object to hold security.json as nested Map<String,Object> and optionally its version.\nClass SecurityConfHandlerLocal; // Security Configuration Handler which works on standalone local files\nClass SecurityConfHandlerZk; // Security Configuration Handler which works with Zookeeper\nClass SegmentsInfoRequestHandler; // This handler exposes information about last commit generation segments\n", "des": "SolrRequestHandler implementations for powering he Solr Admin UI"}
{"index": 1987, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package transaction;\n\npackage transaction.jta; // Auto-configuration for JTA.\n@FunctionalInterface public interface PlatformTransactionManagerCustomizer<T extends org.springframework.transaction.PlatformTransactionManager>; // Callback interface that can be implemented by beans wishing to customize PlatformTransactionManagers whilst retaining default auto-configuration.\n@AutoConfiguration @ConditionalOnClass(org.springframework.transaction.PlatformTransactionManager.class) @EnableConfigurationProperties(TransactionProperties.class) public class TransactionAutoConfiguration extends Object; // Auto-configuration for Spring transaction.\n@Configuration(proxyBeanMethods=false) @ConditionalOnBean(org.springframework.transaction.TransactionManager.class) @ConditionalOnMissingBean(org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration.class) public static class TransactionAutoConfiguration.EnableTransactionManagementConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @EnableTransactionManagement(proxyTargetClass=true) @ConditionalOnProperty(prefix=\"spring.aop\", name=\"proxy-target-class\", havingValue=\"true\", matchIfMissing=true) public static class TransactionAutoConfiguration.EnableTransactionManagementConfiguration.CglibAutoProxyConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @EnableTransactionManagement(proxyTargetClass=false) @ConditionalOnProperty(prefix=\"spring.aop\", name=\"proxy-target-class\", havingValue=\"false\") public static class TransactionAutoConfiguration.EnableTransactionManagementConfiguration.JdkDynamicAutoProxyConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @ConditionalOnSingleCandidate(org.springframework.transaction.PlatformTransactionManager.class) public static class TransactionAutoConfiguration.TransactionTemplateConfiguration extends Object;\npublic class TransactionManagerCustomizers extends Object; // A collection of PlatformTransactionManagerCustomizer.\n@ConfigurationProperties(prefix=\"spring.transaction\") public class TransactionProperties extends Object implements PlatformTransactionManagerCustomizer<org.springframework.transaction.support.AbstractPlatformTransactionManager>; // Configuration properties that can be applied to an AbstractPlatformTransactionManager.\n", "des": "Auto-configuration for transaction support."}
{"index": 138, "repo": "ignite-core-2.15.0", "code": "package communication;\n\nInterface GridDisconnectListener; // Node disconnect listener interface.\nInterface GridMessageListener; // Listener for messages received from remote nodes.\nInterface TransmissionHandler; // Class represents a handler for the set of files considered to be transferred from the remote node.\nClass GridIoManager; // This class represents the internal grid communication (input and output) manager which is placed as a layer of indirection between the IgniteKernal and CommunicationSpi.\nClass GridIoMessage; // Wrapper for all grid messages.\nClass GridIoMessageFactory; // Message factory implementation.\nClass GridIoPolicy; // This enumeration defines different types of communication message processing by the communication manager.\nClass GridIoSecurityAwareMessage;\nClass GridIoUserMessage; // User message wrapper.\nClass IgniteIoTestMessage;\nClass IgniteMessageFactoryImpl; // Message factory implementation which is responsible for instantiation of all communication messages.\nClass TraceRunnable; // Wrapper of Runnable which incject tracing to execution.\nClass TransmissionMeta; // Class represents a file meta information to send to the remote node.\nEnum TransmissionPolicy; // Class represents ways of data handling for a file ready to be sent through an opened transmission sender session.\nClass TransmissionCancelledException; // Exception is used to cancel a file transmission operation on the receiver.\n", "des": "TODO."}
{"index": 3003, "repo": "spring-web-6.0.11", "code": "package multipart;\n\npublic class DefaultPartHttpMessageReader extends LoggingCodecSupport implements HttpMessageReader<Part>; // Default HttpMessageReader for parsing \"multipart/form-data\" requests to a stream of Parts.\npublic interface FilePart extends Part; // Specialization of Part that represents an uploaded file received in a multipart request.\npublic interface FilePartEvent extends PartEvent; // Represents an event triggered for a file upload.\npublic interface FormFieldPart extends Part; // Specialization of Part for a form field.\npublic interface FormPartEvent extends PartEvent; // Represents an event triggered for a form field.\npublic class MultipartHttpMessageReader extends LoggingCodecSupport implements HttpMessageReader<org.springframework.util.MultiValueMap<String,Part>>; // HttpMessageReader for reading \"multipart/form-data\" requests into a MultiValueMap<String, Part>.\npublic class MultipartHttpMessageWriter extends MultipartWriterSupport implements HttpMessageWriter<org.springframework.util.MultiValueMap<String,?>>; // HttpMessageWriter for writing a MultiValueMap<String, ?> as multipart form data, i.e.\npublic class MultipartWriterSupport extends LoggingCodecSupport; // Support class for multipart HTTP message writers.\npublic interface Part; // Representation for a part in a \"multipart/form-data\" request.\npublic interface PartEvent; // Represents an event for a \"multipart/form-data\" request.\npublic class PartEventHttpMessageReader extends LoggingCodecSupport implements HttpMessageReader<PartEvent>; // HttpMessageReader for parsing \"multipart/form-data\" requests to a stream of PartEvent elements.\npublic class PartEventHttpMessageWriter extends MultipartWriterSupport implements HttpMessageWriter<PartEvent>; // HttpMessageWriter for writing PartEvent objects.\npublic class PartHttpMessageWriter extends MultipartWriterSupport implements HttpMessageWriter<Part>; // HttpMessageWriter for writing with Part.\n", "des": "Multipart support."}
{"index": 1555, "repo": "spring-context-6.0.11", "code": "package annotation;\n\n@Target({TYPE,METHOD,PARAMETER}) @Retention(RUNTIME) @Documented public @interface Validated; // Variant of JSR-303's Valid, supporting the specification of validation groups.\npublic abstract class ValidationAnnotationUtils extends Object; // Utility class for handling validation annotations.\n", "des": "Support classes for annotation-based constraint evaluation, e.g."}
{"index": 1376, "repo": "spring-boot-actuator-3.1.1", "code": "package context;\n\npackage context.properties; // Actuator support relating to external configuration properties.\n@Endpoint(id=\"shutdown\", enableByDefault=false) public class ShutdownEndpoint extends Object implements org.springframework.context.ApplicationContextAware; // @Endpoint to shutdown the ApplicationContext.\npublic static class ShutdownEndpoint.ShutdownDescriptor extends Object implements OperationResponseBody; // Description of the shutdown.\n", "des": "Actuator support relating to Spring Context."}
{"index": 385, "repo": "mahout-core-14.1", "code": "package map;\n\nClass AbstractByteByteMap;\nClass AbstractByteCharMap;\nClass AbstractByteDoubleMap;\nClass AbstractByteFloatMap;\nClass AbstractByteIntMap;\nClass AbstractByteLongMap;\nClass AbstractByteObjectMap<T>;\nClass AbstractByteShortMap;\nClass AbstractCharByteMap;\nClass AbstractCharCharMap;\nClass AbstractCharDoubleMap;\nClass AbstractCharFloatMap;\nClass AbstractCharIntMap;\nClass AbstractCharLongMap;\nClass AbstractCharObjectMap<T>;\nClass AbstractCharShortMap;\nClass AbstractDoubleByteMap;\nClass AbstractDoubleCharMap;\nClass AbstractDoubleDoubleMap;\nClass AbstractDoubleFloatMap;\nClass AbstractDoubleIntMap;\nClass AbstractDoubleLongMap;\nClass AbstractDoubleObjectMap<T>;\nClass AbstractDoubleShortMap;\nClass AbstractFloatByteMap;\nClass AbstractFloatCharMap;\nClass AbstractFloatDoubleMap;\nClass AbstractFloatFloatMap;\nClass AbstractFloatIntMap;\nClass AbstractFloatLongMap;\nClass AbstractFloatObjectMap<T>;\nClass AbstractFloatShortMap;\nClass AbstractIntByteMap;\nClass AbstractIntCharMap;\nClass AbstractIntDoubleMap;\nClass AbstractIntFloatMap;\nClass AbstractIntIntMap;\nClass AbstractIntLongMap;\nClass AbstractIntObjectMap<T>;\nClass AbstractIntShortMap;\nClass AbstractLongByteMap;\nClass AbstractLongCharMap;\nClass AbstractLongDoubleMap;\nClass AbstractLongFloatMap;\nClass AbstractLongIntMap;\nClass AbstractLongLongMap;\nClass AbstractLongObjectMap<T>;\nClass AbstractLongShortMap;\nClass AbstractObjectByteMap<T>;\nClass AbstractObjectCharMap<T>;\nClass AbstractObjectDoubleMap<T>;\nClass AbstractObjectFloatMap<T>;\nClass AbstractObjectIntMap<T>;\nClass AbstractObjectLongMap<T>;\nClass AbstractObjectShortMap<T>;\nClass AbstractShortByteMap;\nClass AbstractShortCharMap;\nClass AbstractShortDoubleMap;\nClass AbstractShortFloatMap;\nClass AbstractShortIntMap;\nClass AbstractShortLongMap;\nClass AbstractShortObjectMap<T>;\nClass AbstractShortShortMap;\nClass HashFunctions; // Provides various hash functions.\n", "des": "Automatically growing and shrinking maps holding objects or primitive data types such as int, double, etc."}
{"index": 3264, "repo": "opencms-core-15.0", "code": "package mysql;\n\nClass CmsHistoryDriver; // MySQL implementation of the history driver methods.\nClass CmsProjectDriver; // MySQL implementation of the project driver methods.\nClass CmsSqlManager; // MySQL implementation of the SQL manager.\nClass CmsSubscriptionDriver; // MySQL implementation of the subscription driver.\nClass CmsUserDriver; // MySQL implementation of the user driver methods.\nClass CmsVfsDriver; // MySQL implementation of the VFS driver methods.\n", "des": "MySQL4+ implementation of the OpenCms database connector."}
{"index": 500, "repo": "beam-sdks-java-core-2.49.0", "code": "package resourcehints;\n\nInterface ResourceHintsOptions; // Options that are used to control configuration of the remote environment.\nClass ResourceHint; // Provides a definition of a resource hint known to the SDK.\nClass ResourceHints; // Pipeline authors can use resource hints to provide additional information to runners about the desired aspects of the execution environment.\nClass ResourceHintsOptions.EmptyListDefault;\nClass ResourceHintsOptions.Options; // Register the ResourceHintsOptions.\n", "des": "Defines ResourceHints for configuring pipeline execution."}
{"index": 1124, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package nec;\n\nClass NECVEPlugin; // A device framework plugin which supports NEC Vector Engine.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1074, "repo": "hadoop-yarn-common-3.3.6", "code": "package dao;\n\nClass ConfInfo; // This class stores the Scheduler Configuration.\nClass ConfInfo.ConfItem; // This class stores the Configuration Property.\nClass QueueConfigInfo; // Information for adding or updating a queue to scheduler configuration for this queue.\nClass SchedConfUpdateInfo; // Information for making scheduler configuration changes (supports adding, removing, or updating a queue, as well as global scheduler conf changes).\n", "des": "Data structures for scheduler configuration mutation info."}
{"index": 1292, "repo": "spring-core-6.0.11", "code": "package backoff;\n\n@FunctionalInterface public interface BackOff; // Provide a BackOffExecution that indicates the rate at which an operation should be retried.\n@FunctionalInterface public interface BackOffExecution; // Represent a particular back-off execution.\npublic class ExponentialBackOff extends Object implements BackOff; // Implementation of BackOff that increases the back off period for each retry attempt.\npublic class FixedBackOff extends Object implements BackOff; // A simple BackOff implementation that provides a fixed interval between two attempts and a maximum number of retries.\n", "des": "A generic back-off abstraction."}
{"index": 3286, "repo": "opencms-core-15.0", "code": "package simplesearch;\n\npackage simplesearch.daterestrictions; // Contains classes for dealing with restrictions in list configurations.\npackage simplesearch.preconfiguredrestrictions; // Helpers for the preconfigured filter query part of the list configuration (ie.\nClass CmsCategoryFolderRestrictionBean; // Wrapper for a combined category and folder restriction.\nClass CmsConfigParserUtils; // Utils to read and update the list configuration.\nClass CmsConfigurationBean; // The list configuration data.\nClass CmsGeoFilterBean; // Bean representing a Geo filter.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsConfigurationBean.CombinationMode; // Enum representing how filter queries should be combined in a search.\n", "des": "Helpers to convert the list configuration XML content into a suitable bean, used by the CmsSimpleSearchConfigurationParser and the List manager app."}
{"index": 1708, "repo": "spring-boot-test-3.1.1", "code": "package context;\n\npackage context.assertj; // AssertJ support for ApplicationContexts.\npackage context.runner; // Test utilities to run application contexts for testing.\npublic final class AnnotatedClassFinder extends Object; // Utility class to find a class annotated with a particular annotation in a hierarchy.\npublic class ConfigDataApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>; // ApplicationContextInitializer that can be used with the ContextConfiguration.initializers() to trigger loading of ConfigData such as application.properties.\n@FunctionalInterface @Deprecated(since=\"3.0.0\", forRemoval=true) public interface DefaultTestExecutionListenersPostProcessor;\npublic class FilteredClassLoader extends URLClassLoader implements org.springframework.core.SmartClassLoader; // Test URLClassLoader that can filter the classes and resources it can load.\npublic static final class FilteredClassLoader.ClassFilter extends Object implements Predicate<String>; // Filter to restrict the classes that can be loaded.\npublic static final class FilteredClassLoader.ClassPathResourceFilter extends Object implements Predicate<String>; // Filter to restrict the resources that can be loaded.\npublic static final class FilteredClassLoader.PackageFilter extends Object implements Predicate<String>; // Filter to restrict the packages that can be loaded.\npublic class ReactiveWebMergedContextConfiguration extends org.springframework.test.context.MergedContextConfiguration; // Encapsulates the merged context configuration declared on a test class and all of its superclasses for a reactive web application.\npublic class SpringBootContextLoader extends org.springframework.test.context.support.AbstractContextLoader implements org.springframework.test.context.aot.AotContextLoader; // A ContextLoader that can be used to test Spring Boot applications (those that normally startup using SpringApplication).\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @BootstrapWith(SpringBootTestContextBootstrapper.class) @ExtendWith(org.springframework.test.context.junit.jupiter.SpringExtension.class) public @interface SpringBootTest; // Annotation that can be specified on a test class that runs Spring Boot based tests.\n", "des": "Classes and annotations related to configuring Spring's ApplicationContext for tests."}
{"index": 3170, "repo": "tomcat-api-10.1", "code": "package ant;\n\npackage ant.jmx; // This package contains a set of JMX Task implementations for Ant (version 1.6 or later) that can be used to interact with the Remote JMX JSR 160 RMI Adaptor to get/set attributes, invoke MBean operations and query for Mbeans inside a running instance of Tomcat.\nClass AbstractCatalinaCommandTask;\nClass AbstractCatalinaTask; // Abstract base class for Ant tasks that interact with the Manager web application for dynamically deploying and undeploying applications.\nClass BaseRedirectorHelperTask; // Abstract base class to add output redirection support for Catalina Ant tasks.\nClass DeployTask; // Ant task that implements the /deploy command, supported by the Tomcat manager application.\nClass FindLeaksTask; // Ant task that implements the /findleaks command, supported by the Tomcat manager application.\nClass JKStatusUpdateTask; // Ant task that implements the /status command, supported by the mod_jk status (1.2.9) application.\nClass JMXGetTask; // Ant task that implements the JMX Get command (/jmxproxy/?\nClass JMXQueryTask; // Ant task that implements the JMX Query command (/jmxproxy/?\nClass JMXSetTask; // Ant task that implements the JMX Set command (/jmxproxy/?\nClass ListTask; // Ant task that implements the /list command, supported by the Tomcat manager application.\nClass ReloadTask; // Ant task that implements the /reload command, supported by the Tomcat manager application.\nClass ResourcesTask; // Ant task that implements the /resources command, supported by the Tomcat manager application.\nClass ServerinfoTask; // Ant task that implements the /serverinfo command supported by the Tomcat manager application.\nClass SessionsTask; // Ant task that implements the /sessions command supported by the Tomcat manager application.\nClass SslConnectorCiphersTask; // Ant task that implements the /sslConnectorCiphers command supported by the Tomcat manager application.\nClass StartTask; // Ant task that implements the /start command, supported by the Tomcat manager application.\nClass StopTask; // Ant task that implements the /stop command, supported by the Tomcat manager application.\n", "des": "This package contains a set of Task implementations for Ant (version 1.6.x or later) that can be used to interact with the Manager application to deploy, undeploy, list, reload, start and stop web applications from a running instance of Tomcat."}
{"index": 85, "repo": "ignite-core-2.15.0", "code": "package internal;\n\nInterface CommunicationListenerEx<T extends Serializable>; // Extended communication SPI listener to provide Channel opened events.\nInterface ConnectionPolicy; // Connection policy.\nInterface ConnectionRequestor; // Helper interface to ask other nodes to open connections.\nInterface TcpCommunicationNodeConnectionCheckFuture; // Tcp Communication Node Connection Check Future.\nInterface TcpConnectionIndexAwareMessage;\nClass ClusterStateProvider; // This class must be removed.\nClass CommunicationDiscoveryEventListener; // Listener on discovery events.\nClass CommunicationTcpUtils; // Common communication spi logic.\nClass CommunicationWorker; // Works with connections states.\nClass ConnectFuture; // Connect future which uses as a marker of type connection releted with TCP.\nClass ConnectGateway; // Lock and error control work flow.\nClass ConnectionClientPool; // Registry of client connections.\nClass ConnectionKey; // Connection Key.\nClass ConnectionRequestFuture; // Marker future implementation, just like ConnectFuture, but meaning that we're waiting for the inverse connection.\nClass DisconnectedSessionInfo; // Class marker that say that connection must be interacted.\nClass FirstConnectionPolicy; // First connection policy.\nClass GridNioServerWrapper; // Should be removed.\nClass HandshakeTimeoutObject; // Callback that is intended to be executed after timeout on handshake.\nClass InboundConnectionHandler; // This class implement NioListener which process handshake stage, and transmit messages to session.\nClass RoundRobinConnectionPolicy; // Round robin connection policy.\nClass TcpCommunicationConfigInitializer; // Only may implement it TcpCommunicationSpi.\nClass TcpCommunicationConfiguration; // Class of configuration for TcpCommunicationSpi segregation.\nClass TcpCommunicationConnectionCheckFuture; // Tcp Communication Connection Check Future.\nClass TcpCommunicationSpiMBeanImpl; // MBean implementation for TcpCommunicationSpi.\nClass TcpConnectionRequestDiscoveryMessage; // Message is part of communication via discovery protocol.\nClass TcpHandshakeExecutor; // Executor for synchronously establishing a connection with a node.\nClass TcpInverseConnectionResponseMessage; // Inverse connection response message sent by client node as a response to inverse connection request received by discovery.\nClass HandshakeException; // Internal exception class for proper timeout handling.\nClass NodeUnreachableException; // Exception is thrown by TcpCommunicationSpi when some or all addresses of a node are unreachable and direct communication connection cannot be established.\n", "des": "Contains connection health-checkers for TCP/IP-based implementation of communication SPI."}
{"index": 2674, "repo": "spring-r2dbc-6.0.11", "code": "package init;\n\npublic class CannotReadScriptException extends ScriptException; // Thrown by ScriptUtils if an SQL script cannot be read.\npublic class CompositeDatabasePopulator extends Object implements DatabasePopulator; // Composite DatabasePopulator that delegates to a list of given DatabasePopulator implementations, executing all scripts.\npublic class ConnectionFactoryInitializer extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Used to set up a database during initialization and clean up a database during destruction.\n@FunctionalInterface public interface DatabasePopulator; // Strategy used to populate, initialize, or clean up a database.\npublic class ResourceDatabasePopulator extends Object implements DatabasePopulator; // Populates, initializes, or cleans up a database using SQL scripts defined in external resources.\npublic abstract class ScriptException extends org.springframework.dao.DataAccessException; // Root of the hierarchy of data access exceptions that are related to processing of SQL scripts.\npublic class ScriptParseException extends ScriptException; // Thrown by ScriptUtils if an SQL script cannot be properly parsed.\npublic class ScriptStatementFailedException extends ScriptException; // Thrown by ScriptUtils if a statement in an SQL script failed when executing it against the target database.\npublic abstract class ScriptUtils extends Object; // Generic utility methods for working with SQL scripts in conjunction with R2DBC.\npublic class UncategorizedScriptException extends ScriptException; // Thrown when we cannot determine anything more specific than \"something went wrong while processing an SQL script\": for example, an R2dbcException from R2DBC that we cannot pinpoint more precisely.\n", "des": "Provides extensible support for initializing databases through scripts."}
{"index": 3303, "repo": "opencms-core-15.0", "code": "package relations;\n\nInterface I_CmsCustomLinkRenderer; // Interface used to inject custom link handling behavior into HTML/link content fields.\nInterface I_CmsLinkParseable; // This interface serves to retrieve all links from a given file by parsing.\nClass CmsCategory; // Represents a category, that is just a folder.\nClass CmsCategoryService; // Provides several simplified methods for manipulating category relations.\nClass CmsExternalLinksValidationResult; // Stores the result of a pointer link validation.\nClass CmsExternalLinksValidator; // Class to validate pointer links.\nClass CmsInternalLinksValidator; // Util class to find broken links in a bundle of resources.\nClass CmsInternalRelationsValidationJob; // A schedulable OpenCms job to validate internal relations.\nClass CmsLink; // A single link entry in the link table.\nClass CmsLinkInfo; // Immutable bean representing most of the information in a CmsLink.\nClass CmsLinkUpdateUtil; // An utility class for updating the link xml node.\nClass CmsRelation; // A relation between two opencms resources.\nClass CmsRelationDeleteValidator; // Util class to find broken links in a bundle of resources to be deleted.\nClass CmsRelationFilter; // A filter to retrieve the relations for a given resource.\nClass CmsRelationPublishValidator; // Util class to find broken links in a bundle of resources to be published.\nClass CmsRelationSystemValidator; // Validates relations of resources in the OpenCms VFS.\nClass CmsRelationType; // Wrapper class for the different types of relations.\nClass CmsRelationValidatorInfoEntry; // Relation validator entry information bean.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsRelationType.CopyBehavior; // Enum representing how relations should be handled while copying resources.\n", "des": "Classes to represent and validate the internal and external links/relations of resources in the OpenCms VFS."}
{"index": 267, "repo": "nutch-2.4", "code": "package more;\n\nClass MoreIndexingFilter; // Add (or reset) a few metaData properties as respective fields (if they are available), so that they can be accurately used within the search index.\n", "des": "A more indexing plugin, adds \"more\" index fields: last modified date, MIME type, content length."}
{"index": 2401, "repo": "spring-batch-core-5.0.2", "code": "package support;\n\npublic abstract class AbstractJobRepositoryFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobRepository>, org.springframework.beans.factory.InitializingBean; // A FactoryBean that automates the creation of a SimpleJobRepository.\npublic class JobRepositoryFactoryBean extends AbstractJobRepositoryFactoryBean implements org.springframework.beans.factory.InitializingBean; // A FactoryBean that automates the creation of a SimpleJobRepository using JDBC DAO implementations which persist batch metadata in database.\npublic class SimpleJobRepository extends Object implements JobRepository; // Implementation of JobRepository that stores job instances, job executions, and step executions using the injected DAOs.\n", "des": "Specific implementations of repository concerns."}
{"index": 2754, "repo": "spring-beans-6.0.11", "code": "package beans;\n\npackage beans.factory; // The core package implementing Spring's lightweight Inversion of Control (IoC) container.\npackage beans.propertyeditors; // Properties editors used to convert from String values to object types such as java.util.Properties.\npackage beans.support; // Classes supporting the org.springframework.beans package, such as utility classes for sorting and holding lists of beans.\npublic abstract class AbstractNestablePropertyAccessor extends AbstractPropertyAccessor; // A basic ConfigurablePropertyAccessor that provides the necessary infrastructure for all typical use cases.\nprotected abstract static class AbstractNestablePropertyAccessor.PropertyHandler extends Object; // A handler for a specific property.\nprotected static class AbstractNestablePropertyAccessor.PropertyTokenHolder extends Object; // Holder class used to store property tokens.\npublic abstract class AbstractPropertyAccessor extends TypeConverterSupport implements ConfigurablePropertyAccessor; // Abstract implementation of the PropertyAccessor interface.\npublic interface BeanInfoFactory; // Strategy interface for creating BeanInfo instances for Spring beans.\npublic class BeanInstantiationException extends FatalBeanException; // Exception thrown when instantiation of a bean failed.\npublic class BeanMetadataAttribute extends Object implements BeanMetadataElement; // Holder for a key-value style attribute that is part of a bean definition.\npublic class BeanMetadataAttributeAccessor extends org.springframework.core.AttributeAccessorSupport implements BeanMetadataElement; // Extension of AttributeAccessorSupport, holding attributes as BeanMetadataAttribute objects in order to keep track of the definition source.\npublic interface BeanMetadataElement; // Interface to be implemented by bean metadata elements that carry a configuration source object.\npublic abstract class BeansException extends org.springframework.core.NestedRuntimeException; // Abstract superclass for all exceptions thrown in the beans package and subpackages.\npublic abstract class BeanUtils extends Object; // Static convenience methods for JavaBeans: for instantiating beans, checking bean property types, copying bean properties, etc.\npublic interface BeanWrapper extends ConfigurablePropertyAccessor; // The central interface of Spring's low-level JavaBeans infrastructure.\npublic class BeanWrapperImpl extends AbstractNestablePropertyAccessor implements BeanWrapper; // Default BeanWrapper implementation that should be sufficient for all typical use cases.\npublic final class CachedIntrospectionResults extends Object; // Internal class that caches JavaBeans PropertyDescriptor information for a Java class.\n", "des": "This package contains interfaces and classes for manipulating Java beans."}
{"index": 1511, "repo": "spring-context-6.0.11", "code": "package event;\n\npublic abstract class AbstractApplicationEventMulticaster extends Object implements ApplicationEventMulticaster, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware; // Abstract implementation of the ApplicationEventMulticaster interface, providing the basic listener registration facility.\npublic abstract class ApplicationContextEvent extends ApplicationEvent; // Base class for events raised for an ApplicationContext.\npublic interface ApplicationEventMulticaster; // Interface to be implemented by objects that can manage a number of ApplicationListener objects and publish events to them.\npublic class ApplicationListenerMethodAdapter extends Object implements GenericApplicationListener; // GenericApplicationListener adapter that delegates the processing of an event to an EventListener annotated method.\npublic class ContextClosedEvent extends ApplicationContextEvent; // Event raised when an ApplicationContext gets closed.\npublic class ContextRefreshedEvent extends ApplicationContextEvent; // Event raised when an ApplicationContext gets initialized or refreshed.\npublic class ContextStartedEvent extends ApplicationContextEvent; // Event raised when an ApplicationContext gets started.\npublic class ContextStoppedEvent extends ApplicationContextEvent; // Event raised when an ApplicationContext gets stopped.\npublic class DefaultEventListenerFactory extends Object implements EventListenerFactory, org.springframework.core.Ordered; // Default EventListenerFactory implementation that supports the regular EventListener annotation.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Reflective public @interface EventListener; // Annotation that marks a method as a listener for application events.\npublic interface EventListenerFactory; // Strategy interface for creating ApplicationListener for methods annotated with EventListener.\npublic class EventListenerMethodProcessor extends Object implements org.springframework.beans.factory.SmartInitializingSingleton, ApplicationContextAware, org.springframework.beans.factory.config.BeanFactoryPostProcessor; // Registers EventListener methods as individual ApplicationListener instances.\npublic class EventPublicationInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, ApplicationEventPublisherAware, org.springframework.beans.factory.InitializingBean; // Interceptor that publishes an ApplicationEvent to all ApplicationListeners registered with an ApplicationEventPublisher after each successful method invocation.\npublic interface GenericApplicationListener extends SmartApplicationListener; // Extended variant of the standard ApplicationListener interface, exposing further metadata such as the supported event and source type.\n", "des": "Support classes for application events, like standard context events."}
{"index": 713, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package scripting;\n\nClass ScriptMessageSourceSpec; // The MessageSourceSpec for Dynamic Language Scripts.\nClass Scripts; // The factory for Dynamic Language Scripts (Groovy, Ruby, Python, JavaScript etc.).\nClass ScriptSpec; // The MessageProcessorSpec implementation for the DslScriptExecutingMessageProcessor.\n", "des": "Provides Scripting Components support for Spring Integration Java DSL."}
{"index": 674, "repo": "commons-lang3-3.12.0", "code": "package stream;\n\nClass Streams; // Provides utility functions, and classes for working with the java.util.stream package, or more generally, with Java 8 lambdas.\nClass Streams.ArrayCollector<O>; // A Collector type for arrays.\nClass Streams.FailableStream<O>; // A reduced, and simplified version of a Stream with failable method signatures.\n", "des": "Provides utility classes to complement those in java.util.stream."}
{"index": 1265, "repo": "spring-core-6.0.11", "code": "package transform;\n\npackage transform.impl; // Spring's repackaging of the CGLIB transform impl package (for internal use only).\npublic abstract class AbstractClassFilterTransformer extends AbstractClassTransformer;\npublic abstract class AbstractClassLoader extends ClassLoader;\npublic abstract class AbstractClassTransformer extends ClassTransformer;\npublic class AnnotationVisitorTee extends AnnotationVisitor;\npublic abstract class ClassEmitterTransformer extends ClassEmitter;\npublic interface ClassFilter;\npublic class ClassFilterTransformer extends AbstractClassFilterTransformer;\npublic class ClassReaderGenerator extends Object implements ClassGenerator;\npublic class ClassTransformerChain extends AbstractClassTransformer;\npublic interface ClassTransformerFactory;\npublic class ClassTransformerTee extends ClassTransformer;\npublic class ClassVisitorTee extends ClassVisitor;\npublic class FieldVisitorTee extends FieldVisitor;\npublic interface MethodFilter;\npublic class MethodFilterTransformer extends AbstractClassTransformer;\npublic class MethodVisitorTee extends MethodVisitor;\npublic class TransformingClassGenerator extends Object implements ClassGenerator;\npublic class TransformingClassLoader extends AbstractClassLoader;\n", "des": "Spring's repackaging of the CGLIB transform package (for internal use only)."}
{"index": 3374, "repo": "opencms-core-15.0", "code": "package tools;\n\npackage tools.scheduler; // This package contains the tool classes for the job management related administration views.\nInterface I_CmsHtmlIconButton; // Interface for html buttons with icon.\nInterface I_CmsToolHandler; // Interface for an admin tool handler.\nClass A_CmsHtmlIconButton; // Default skeleton for an html icon button.\nClass A_CmsToolHandler; // Helper class to build easily other admin tool handlers.\nClass CmsDefaultToolHandler; // Default admin tool handler.\nClass CmsExplorerDialog; // Dialog for explorer views in the administration view.\nClass CmsHtmlIconButtonStyleEnum; // Wrapper class for the different style of icon buttons.\nClass CmsIdentifiableObjectContainer<T>; // Default implementation of a named object container.\nClass CmsInvisibleToolHandler; // This tool handler just hides the tool for the user, but the tool can still be invoked explicitly, usefull for tool that requires an argument, like edit tools.\nClass CmsOfflineToolHandler; // This tool handler disables the tool if in online project.\nClass CmsOnlyAdminToolHandler; // This tool handler hides the tool to non admin users.\nClass CmsTool; // Implementation of an administration tool.\nClass CmsToolDialog; // Helper class that encapsulates all the code for the \"new\" style of the administration dialogs.\nClass CmsToolGroup; // This is an admin tool group, it just generates the html code for the group structure.\nClass CmsToolMacroResolver; // Resolves special macros for the admin view.\nClass CmsToolManager; // Manages the registered tools, actualizing its state every time the workplace is reinitialize.\nClass CmsToolRootHandler; // Admin tool handler for tool roots.\nClass CmsToolUserData; // Store for some administration view parameters, for each user, used by the CmsToolManager.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains the base classes for implementing a tool in the OpenCms Workplace \"Administration\" view."}
{"index": 189, "repo": "ignite-core-2.15.0", "code": "package scala;\n\nAnnotation Type impl; // Documentation annotation for Scala.\n", "des": "Scala supporting classes."}
{"index": 236, "repo": "nutch-2.4", "code": "package menu;\n\nClass VerticalMenu;\n", "des": "Contains menu page classes for Web UI"}
{"index": 826, "repo": "calcite-core-1.34.0", "code": "package java;\n\nInterface JavaTypeFactory; // Type factory that can register Java classes as record types.\nClass AbstractQueryableTable; // Abstract base class for implementing Table.\nClass ReflectiveSchema; // Implementation of Schema that exposes the public fields and methods in a Java object.\nClass ReflectiveSchema.Factory; // Factory that creates a schema by instantiating an object and looking at its public fields.\nAnnotation Type Array; // Annotation that indicates that a field is an array type.\nAnnotation Type Map; // Annotation that indicates that a field is a map type.\n", "des": "Query provider based on Java in-memory data structures."}
{"index": 3098, "repo": "spring-ws-core-4.0.5", "code": "package wsdl11;\n\npackage wsdl11.provider; // Provides a contribution strategy for WSDL definitions.\npublic class DefaultWsdl11Definition extends Object implements Wsdl11Definition, org.springframework.beans.factory.InitializingBean; // Convenient implementation of Wsdl11Definition that creates a SOAP 1.1 or 1.2 binding based on naming conventions in one or more inlined XSD schemas.\npublic class ProviderBasedWsdl4jDefinition extends Wsdl4jDefinition implements org.springframework.beans.factory.InitializingBean; // Implementation of the Wsdl11Definition that uses a provider-based mechanism to populate a WSDL4J Definition.\npublic class SimpleWsdl11Definition extends Object implements Wsdl11Definition, org.springframework.beans.factory.InitializingBean; // The default Wsdl11Definition implementation.\npublic interface Wsdl11Definition extends WsdlDefinition; // Models a WSDL 1.1-specific WsdlDefinition.\npublic class Wsdl4jDefinition extends Object implements Wsdl11Definition; // Implementation of the Wsdl11Definition based on WSDL4J.\npublic class Wsdl4jDefinitionException extends WsdlDefinitionException; // Subclass of WsdlDefinitionException that wraps WSDLExceptions.\n", "des": "Contains interfaces and classes specific to WSDL 1.1."}
{"index": 2235, "repo": "spring-data-commons-3.1.2", "code": "package querydsl;\n\npublic class QuerydslPredicateArgumentResolver extends QuerydslPredicateArgumentResolverSupport implements HandlerMethodArgumentResolver; // HandlerMethodArgumentResolver to allow injection of Predicate into Spring MVC controller methods.\npublic abstract class QuerydslPredicateArgumentResolverSupport extends Object; // HandlerMethodArgumentResolver to allow injection of Predicate into Spring MVC controller methods.\npublic class ReactiveQuerydslPredicateArgumentResolver extends QuerydslPredicateArgumentResolverSupport implements SyncHandlerMethodArgumentResolver; // HandlerMethodArgumentResolver to allow injection of Predicate into Spring WebFlux controller methods.\n", "des": "Querydsl-specific web support."}
{"index": 751, "repo": "artemis-odb-2.3.0", "code": "package annotations;\n\nEnum LinkPolicy.Policy;\nAnnotation Type All; // Auto-configures fields or systems pertaining to aspects.\nAnnotation Type AspectDescriptor; // Auto-configures fields pertaining to aspects.\nAnnotation Type DelayedComponentRemoval; // Extends the lifecycle of this component type, ensuring removed instances are retrievable until all listeners have been notified - regardless of removal method.\nAnnotation Type EntityId; // Marks int and IntBag fields as holding entity id:s.\nAnnotation Type Exclude; // Auto-configures fields or systems pertaining to aspects.\nAnnotation Type Fluid; // Customize how the fluid generator processes your class.\nAnnotation Type FluidMethod; // Customize how the fluid generator processes a component method.\nAnnotation Type LinkPolicy; // Annotation for entity-referencing fields in component types.\nAnnotation Type One; // Auto-configures fields or systems pertaining to aspects.\nAnnotation Type PooledWeaver; // Transforms a Component into a PooledComponent.\nAnnotation Type PrefabData; // Holds the path or identifier for Prefab types.\nAnnotation Type PreserveProcessVisiblity; // When optimizing an EntityProcessingSystem, don't reduce the visibility of BaseSystem.process().\nAnnotation Type Profile; // Profile EntitySystems with user-specified profiler class, implementing ArtemisProfiler.\nAnnotation Type SkipWire; // Skip reflective dependency injection on annotated field or class.\nAnnotation Type Transient; // Never persisted when serializing.\nAnnotation Type UnstableApi; // Classes marked with this annotation may undergo extensive refactoring between releases.\nAnnotation Type Wire; // Customizes reflective injection of ComponentMapper, EntitySystem, Manager, and registered types via WorldConfiguration.register(java.lang.Object).\n", "des": "Annotations used by Artemis, both runtime and during compilation,"}
{"index": 1489, "repo": "tribuo-core-4.3.1", "code": "package transform;\n\npackage transform.transformations; // Provides implementations of standard transformations like binning, scaling, taking logs and exponents.\npublic interface Transformation extends com.oracle.labs.mlrg.olcut.config.Configurable, com.oracle.labs.mlrg.olcut.provenance.Provenancable<TransformationProvenance>; // An interface representing a class of transformations which can be applied to a feature.\npublic class TransformationMap extends Object implements com.oracle.labs.mlrg.olcut.config.Configurable, com.oracle.labs.mlrg.olcut.provenance.Provenancable<com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance>; // A carrier type for a set of transformations to be applied to a Dataset.\npublic static final class TransformationMap.TransformationList extends Object implements com.oracle.labs.mlrg.olcut.config.Configurable, com.oracle.labs.mlrg.olcut.provenance.Provenancable<com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance>; // A carrier type as OLCUT does not support nested generics.\npublic interface TransformationProvenance extends com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // A tag interface for provenances in the transformation system.\npublic class TransformedModel<T extends Output<T>> extends Model<T>; // Wraps a Model with it's TransformerMap so all Examples are transformed appropriately before the model makes predictions.\npublic interface Transformer extends ProtoSerializable<org.tribuo.protos.core.TransformerProto>, Serializable; // A fitted Transformation which can apply a transform to the input value.\npublic final class TransformerMap extends Object implements ProtoSerializable<org.tribuo.protos.core.TransformerMapProto>, com.oracle.labs.mlrg.olcut.provenance.Provenancable<TransformerMap.TransformerMapProvenance>, Serializable; // A collection of Transformers which can be applied to a Dataset or Example.\npublic static final class TransformerMap.TransformerMapProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Provenance for TransformerMap.\n", "des": "Provides infrastructure for applying transformations to a Dataset."}
{"index": 2241, "repo": "spring-data-keyvalue-3.1.2", "code": "package annotation;\n\n@Documented @Retention(RUNTIME) @Target({METHOD,TYPE}) public @interface KeySpace; // Marker interface for methods with Persistent annotations indicating the presence of a dedicated keyspace the entity should reside in.\n", "des": "Key-Value annotations for declarative keyspace configuration."}
{"index": 2410, "repo": "spring-batch-core-5.0.2", "code": "package tasklet;\n\npublic class CallableTaskletAdapter extends Object implements Tasklet, org.springframework.beans.factory.InitializingBean; // Adapts a Callable<RepeatStatus> to the Tasklet interface.\npublic interface CommandRunner; // Strategy interface for executing commands.\npublic class ConfigurableSystemProcessExitCodeMapper extends Object implements SystemProcessExitCodeMapper; // Maps exit codes to ExitStatus according to injected map.\npublic class JvmCommandRunner extends Object implements CommandRunner; // Implementation of the CommandRunner interface that calls the standard Runtime.exec(java.lang.String) method.\npublic class MethodInvokingTaskletAdapter extends AbstractMethodInvokingDelegator<Object> implements Tasklet; // A Tasklet that wraps a method in a POJO.\npublic class SimpleSystemProcessExitCodeMapper extends Object implements SystemProcessExitCodeMapper; // Simple SystemProcessExitCodeMapper implementation that performs following mapping: 0 -> ExitStatus.FINISHED else -> ExitStatus.FAILED\npublic interface StoppableTasklet extends Tasklet; // An extension to the Tasklet interface to allow users to add logic for stopping a tasklet.\npublic class SystemCommandException extends RuntimeException; // Exception indicating failed execution of system command.\npublic class SystemCommandTasklet extends Object implements StepExecutionListener, StoppableTasklet, org.springframework.beans.factory.InitializingBean; // Tasklet that executes a system command.\npublic interface SystemProcessExitCodeMapper; // Maps the exit code of a system process to ExitStatus value returned by a system command.\n@FunctionalInterface public interface Tasklet; // Strategy for processing in a step.\npublic class TaskletStep extends AbstractStep; // Simple implementation of executing the step as a call to a Tasklet, possibly repeated, and each call surrounded by a transaction.\npublic class UncheckedTransactionException extends RuntimeException; // Convenience wrapper for a checked exception so that it can cause a rollback and be extracted afterwards.\n", "des": "Interfaces and generic implementations of tasklet concerns."}
{"index": 656, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package security;\n\nClass TimelineAuthenticationFilter; // Timeline authentication filter provides delegation token support for ATSv1 and ATSv2.\nClass TimelineAuthenticationFilterInitializer; // Initializes TimelineAuthenticationFilter which provides support for Kerberos HTTP SPNEGO authentication.\nClass TimelineDelgationTokenSecretManagerService; // Abstract implementation of delegation token manager service for different versions of timeline service.\n", "des": "Package org.apache.hadoop.server.timeline.security contains classes related to timeline authentication filters and abstract delegation token service for ATSv1 and ATSv2."}
{"index": 2144, "repo": "wicket-core-10.0.0-M1", "code": "package basic;\n\npublic class EnclosureContainer extends WebMarkupContainer; // <wicket:enclosure> is nice and prevents that users have to add boilerplate to their application.\npublic class EnumLabel<T extends Enum<T>> extends WebComponent implements IGenericComponent<T,EnumLabel<T>>; // A Label component that is used to render an enum value.\npublic class Label extends WebComponent; // A Label component replaces its body with the String version of its model object returned by getModelObjectAsString().\npublic class MultiLineLabel extends WebComponent; // A MultiLineLabel component replaces its body with the model object.\n", "des": "Basic HTML components."}
{"index": 1373, "repo": "spring-boot-actuator-3.1.1", "code": "package beans;\n\n@Endpoint(id=\"beans\") public class BeansEndpoint extends Object; // @Endpoint to expose details of an application's beans, grouped by application context.\npublic static final class BeansEndpoint.BeanDescriptor extends Object; // Description of a bean.\npublic static final class BeansEndpoint.BeansDescriptor extends Object implements OperationResponseBody; // Description of an application's beans.\npublic static final class BeansEndpoint.ContextBeansDescriptor extends Object; // Description of an application context beans.\n", "des": "Actuator support relating to Spring Beans."}
{"index": 642, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package manager;\n\nInterface FederationPolicyManager; // Implementors need to provide the ability to serliaze a policy and its configuration as a SubClusterPolicyConfiguration, as well as provide (re)initialization mechanics for the underlying FederationAMRMProxyPolicy and FederationRouterPolicy.\nClass AbstractPolicyManager; // This class provides basic implementation for common methods that multiple policies will need to implement.\nClass HashBroadcastPolicyManager; // Policy that routes applications via hashing of their queuename, and broadcast resource requests.\nClass HomePolicyManager; // Policy manager which uses the UniformRandomRouterPolicy for the Router and HomeAMRMProxyPolicy as the AMRMProxy policy to find the RM.\nClass PriorityBroadcastPolicyManager; // Policy that allows operator to configure \"weights\" for routing.\nClass RejectAllPolicyManager; // This class represents a simple implementation of a FederationPolicyManager.\nClass UniformBroadcastPolicyManager; // This class represents a simple implementation of a FederationPolicyManager.\nClass WeightedLocalityPolicyManager; // Policy that allows operator to configure \"weights\" for routing.\n", "des": "Various implementation of FederationPolicyManager."}
{"index": 2566, "repo": "pulsar-common-3.0.0", "code": "package sasl;\n\npublic class JAASCredentialsContainer extends Object implements Closeable; // JAAS Credentials Container.\npublic class KerberosName extends Object; // This class implements parsing and handling of Kerberos principal names.\npublic static class KerberosName.BadFormatString extends IOException;\npublic static class KerberosName.NoMatchingRule extends IOException;\npublic class SaslConstants extends Object; // SASL Constants.\npublic class TGTRefreshThread extends Thread; // TGT Refresh Thread.\n", "des": "Implementation of Simple Authentication and Security Layer."}
{"index": 1272, "repo": "spring-core-6.0.11", "code": "package converter;\n\npublic interface ConditionalConverter; // Allows a Converter, GenericConverter or ConverterFactory to conditionally execute based on attributes of the source and target TypeDescriptor.\npublic interface ConditionalGenericConverter extends GenericConverter, ConditionalConverter; // A GenericConverter that may conditionally execute based on attributes of the source and target TypeDescriptor.\n@FunctionalInterface public interface Converter<S,T>; // A converter converts a source object of type S to a target of type T.\npublic interface ConverterFactory<S,R>; // A factory for \"ranged\" converters that can convert objects from S to subtypes of R.\npublic interface ConverterRegistry; // For registering converters with a type conversion system.\npublic class ConvertingComparator<S,T> extends Object implements Comparator<S>; // A Comparator that converts values before they are compared.\npublic interface GenericConverter; // Generic converter interface for converting between two or more types.\npublic static final class GenericConverter.ConvertiblePair extends Object; // Holder for a source-to-target class pair.\n", "des": "SPI to implement Converters for the type conversion system."}
{"index": 1033, "repo": "hadoop-aws-3.3.6", "code": "package impl;\n\nInterface ContextAccessors; // An interface to implement for providing accessors to S3AFileSystem-level API calls.\nInterface CopyFromLocalOperation.CopyFromLocalOperationCallbacks; // Define the contract for CopyFromLocalOperation to interact with any external resources.\nInterface CreateFileBuilder.CreateFileBuilderCallbacks; // Callbacks for creating the file.\nInterface DirectoryPolicy; // Interface for Directory Marker policies to implement.\nInterface GetContentSummaryOperation.GetContentSummaryCallbacks; // Callbacks used by the operation.\nInterface HeaderProcessing.HeaderProcessingCallbacks;\nInterface ListingOperationCallbacks; // These are all the callbacks which Listing operations need, derived from the actual appropriate S3AFileSystem methods.\nInterface MkdirOperation.MkdirCallbacks; // Callbacks used by mkdir.\nInterface OperationCallbacks; // These are all the callbacks which the RenameOperation and DeleteOperation operations need, derived from the appropriate S3AFileSystem methods.\nInterface RequestFactoryImpl.PrepareRequest; // This is a callback for anything to \"prepare\" every request after creation.\nClass AbstractStoreOperation; // Base class of operations in the store.\nClass ActiveOperationContext; // Context for any active operation.\nClass BulkDeleteRetryHandler; // Handler for bulk delete retry events.\nClass CallableSupplier<T>; // A bridge from Callable to Supplier; catching exceptions raised by the callable and wrapping them as appropriate.\nClass ChangeDetectionPolicy; // Object change detection policy.\nClass ChangeTracker; // Change tracking for input streams: the version ID or etag of the object is tracked and compared on open/re-open.\nClass ConfigureShadedAWSSocketFactory; // This interacts with the Shaded httpclient library used in the full AWS SDK.\nClass CopyFromLocalOperation; // Implementation of CopyFromLocalOperation.\nClass CopyOutcome; // Extracts the outcome of a TransferManager-executed copy operation.\nClass CreateFileBuilder; // Builder used in create file; takes a callback to the operation to create the file.\nClass CreateFileBuilder.CreateFileOptions; // Create file options as built from the builder set or the classic entry point.\nClass DeleteOperation; // Implementation of the delete() operation.\nClass DirectoryPolicyImpl; // Implementation of directory policy.\nClass DirMarkerTracker; // Tracks directory markers which have been reported in object listings.\n", "des": "Implementation classes private to the S3A store."}
{"index": 3820, "repo": "lucene-analysis-common-9.7.0", "code": "package ta;\n\nClass TamilAnalyzer; // Analyzer for Tamil.\n", "des": "Analyzer for Tamil."}
{"index": 303, "repo": "pdfbox-3.0.0-beta1", "code": "package digitalsignature;\n\npackage digitalsignature.visible; // This is the visual signature part that help creating the visual representation for the digital signature.\nInterface ExternalSigningSupport; // Interface for external signature creation scenarios.\nInterface SignatureInterface; // Providing an interface for accessing necessary functions for signing a PDF document.\nClass COSFilterInputStream; // A filtered stream that includes the bytes that are in the (begin,length) intervals passed in the constructor.\nClass PDPropBuild; // A signature build dictionary as specified in the PDF Signature Build Dictionary Specification.\nClass PDPropBuildDataDict; // The general property dictionaries from the build property dictionary.\nClass PDSeedValue; // This represents a pdf signature seed value dictionary.\nClass PDSeedValueCertificate; // This class represents a certificate seed value dictionary that is in the seed value which puts constraints on certificates when signing documents.\nClass PDSeedValueMDP; // This MDP dictionary is a part of the seed value dictionary and define if a author signature or a certification signature should be use.\nClass PDSeedValueTimeStamp; // If exist, it describe where the signature handler can request a RFC3161 timestamp and if it is a must have for the signature.\nClass PDSignature; // This represents a digital signature that can be attached to a document.\nClass SignatureOptions; // This contains the visual signature as a COSDocument, its preferred size and the page.\nClass SigningSupport; // Class to be used when creating PDF signatures externally.\n", "des": "The digital signature library will manage signatures that are stored in the PDF document."}
{"index": 1228, "repo": "spring-hateoas-2.1.2", "code": "package hateoas;\n\npackage hateoas.client; // Client side support.\npackage hateoas.config; // Spring container configuration support.\npackage hateoas.mediatype; // Spring container configuration support.\npackage hateoas.server; // Server-side components for hypermedia handling.\npackage hateoas.support; // Support utilities for hypermedia handling.\npublic final class Affordance extends Object implements Iterable<AffordanceModel>; // Hold the AffordanceModels for all supported media types.\npublic abstract class AffordanceModel extends Object; // Collection of attributes needed to render any form of hypermedia.\npublic static interface AffordanceModel.InputPayloadMetadata extends AffordanceModel.PayloadMetadata; // Payload metadata for incoming requests.\npublic static interface AffordanceModel.Named; // A named component.\npublic static interface AffordanceModel.PayloadMetadata; // Metadata about payloads.\npublic static interface AffordanceModel.PropertyMetadata extends AffordanceModel.Named; // Metadata about the property model of a representation.\npublic static interface AffordanceModel.PropertyMetadataConfigured<T>; // SPI for a type that can get AffordanceModel.PropertyMetadata applied.\npublic class CollectionModel<T> extends RepresentationModel<CollectionModel<T>> implements Iterable<T>, ResolvableTypeProvider; // General helper to easily create a wrapper for a collection of entities.\npublic class EntityModel<T> extends RepresentationModel<EntityModel<T>>; // A simple EntityModel wrapping a domain object and adding links to it.\npublic final class IanaLinkRelations extends Object; // Capture standard IANA-based link relations.\npublic class IanaUriSchemes extends Object; // A list of well-defined URI schemes governed by IANA.\n@Documented @Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface InputType; // Annotation to declare a dedicated input type for a property of an representation model.\npublic class Link extends Object implements Serializable; // Value object for links.\npublic interface LinkRelation; // Interface for defining link relations.\npublic class Links extends Object implements Iterable<Link>; // Value object to represent a list of Links.\n", "des": "Value objects to ease creating Links and link driven representations for REST webservices."}
{"index": 115, "repo": "ignite-core-2.15.0", "code": "package jdk;\n\nClass JdkMarshaller; // Implementation of Marshaller based on JDK serialization mechanism.\n", "des": "Contains JDK java.io based marshaller."}
{"index": 450, "repo": "camel-core-3.0.0-RC1", "code": "package model;\n\npackage model.cloud; // The JAXB POJOs for the remote service call DSL\npackage model.config; // The JAXB POJOs for various configurations for the XML Configuration of the routing rules.\npackage model.dataformat; // The JAXB POJOs for the Data Formats used to marshal and unmarshal objects to and from streams inside components\npackage model.language; // The JAXB POJOs for the Expression and Predicate plugins for the XML Configuration.\npackage model.loadbalancer; // The JAXB POJOs for the Load Balancer EIP pattern for the XML Configuration.\npackage model.rest; // The JAXB POJOs for the REST DSL\npackage model.transformer; // The JAXB POJOs for the Transformers used to transform message contents according to declared data types inside components\npackage model.validator; // The JAXB POJOs for the Transformers used to transform message contents according to declared data types inside components\nInterface Block; // Interface to add block featuring to the XML element type.\nInterface DefinitionPropertyPlaceholderConfigurer; // To be used for configuring property placeholder options on the EIP models.\nInterface EndpointRequiredDefinition; // A ProcessorDefinition that requires to be configured with an Endpoint such as SendDefinition.\nInterface ExecutorServiceAwareDefinition<Type extends ProcessorDefinition<?>>; // Enables definitions to support concurrency using ExecutorService\nInterface Model; // Model interface\nInterface ModelCamelContext; // Model level interface for the CamelContext\nInterface OtherAttributesAware; // Models can support being configured with any other attributes to shadow existing options to be used for property placeholders.\nInterface OutputNode; // Marker interface to mark a ProcessorDefinition that supports outputs\nInterface RouteContainer; // Container to hold Route.\nClass AdviceWithDefinition; // Temporary model used internally by advice-with\nClass AggregateDefinition; // Aggregates many messages into a single message\nClass BeanDefinition; // Calls a java bean\nClass CatchDefinition; // Catches exceptions as part of a try, catch, finally block\nClass ChoiceDefinition; // Routes messages based on a series of predicates\nClass ClaimCheckDefinition; // The Claim Check EIP allows you to replace message content with a claim check (a unique key), which can be used to retrieve the message content at a later time.\nClass Constants; // Various constants.\nClass ContextScanDefinition; // Scans for Java RouteBuilder instances in the context Registry.\n", "des": "The JAXB POJOs for the XML Configuration of the routing rules."}
{"index": 3879, "repo": "solr-ltr-9.3.0", "code": "package transform;\n\nClass LTRFeatureLoggerTransformerFactory; // This transformer will take care to generate and append in the response the features declared in the feature store of the current reranking model, or a specified feature store.\nClass LTRInterleavingTransformerFactory;\n", "des": "APIs and implementations of DocTransformer for modifying documents in Solr request responses"}
{"index": 1459, "repo": "spring-data-redis-3.1.2", "code": "package listener;\n\npackage listener.adapter; // Message listener adapter package.\npublic class ChannelTopic extends Object implements Topic; // Channel topic implementation (maps to a Redis channel).\npublic class KeyExpirationEventMessageListener extends KeyspaceEventMessageListener implements ApplicationEventPublisherAware; // MessageListener publishing RedisKeyExpiredEvents via ApplicationEventPublisher by listening to Redis keyspace notifications for key expirations.\npublic abstract class KeyspaceEventMessageListener extends Object implements MessageListener, InitializingBean, DisposableBean; // Base MessageListener implementation for listening to Redis keyspace notifications.\npublic class PatternTopic extends Object implements Topic; // Pattern topic (matching multiple channels).\npublic class ReactiveRedisMessageListenerContainer extends Object implements DisposableBean; // Container providing a stream of ReactiveSubscription.ChannelMessage for messages received via Redis Pub/Sub listeners.\npublic class RedisMessageListenerContainer extends Object implements InitializingBean, DisposableBean, BeanNameAware, SmartLifecycle; // Container providing asynchronous behaviour for Redis message listeners.\npublic interface Topic; // Topic for a Redis message.\n", "des": "Base package for Redis message listener / pubsub container facility"}
{"index": 1379, "repo": "spring-boot-actuator-3.1.1", "code": "package elasticsearch;\n\npublic class ElasticsearchReactiveHealthIndicator extends AbstractReactiveHealthIndicator; // HealthIndicator for an Elasticsearch cluster using a ReactiveElasticsearchClient.\n", "des": "Actuator support for Elasticsearch dependent on Spring Data."}
{"index": 2794, "repo": "shiro-spring-2.0.0-alpha-2", "code": "package web;\n\npublic class ShiroFilterFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.config.BeanPostProcessor; // FactoryBean to be used in Spring-based web applications for defining the master Shiro Filter.\npublic class ShiroUrlPathHelper extends org.springframework.web.util.UrlPathHelper; // A Spring UrlPathHelper that uses Shiro's path resolution logic.\n", "des": "Spring-specific components for use in Spring-based web applications."}
{"index": 499, "repo": "beam-sdks-java-core-2.49.0", "code": "package reflect;\n\nInterface DoFnInvoker<InputT,OutputT>; // Interface for invoking the DoFn processing methods.\nInterface DoFnInvoker.ArgumentProvider<InputT,OutputT>; // Interface for runner implementors to provide implementations of extra context information.\nInterface DoFnSignature.DoFnMethod; // A method delegated to an annotated method of an underlying DoFn.\nInterface DoFnSignature.MethodWithExtraParameters; // A method delegated to an annotated method of an underlying DoFn that accepts a dynamic list of parameters.\nInterface DoFnSignature.Parameter.Cases<ResultT>; // An interface for destructuring a DoFnSignature.Parameter.\nInterface OnTimerInvoker<InputT,OutputT>; // Interface for invoking the DoFn.OnTimer method for a particular timer.\nClass DoFnInvoker.BaseArgumentProvider<InputT,OutputT>; // This DoFnInvoker.ArgumentProvider throws UnsupportedOperationException for all parameters.\nClass DoFnInvoker.DelegatingArgumentProvider<InputT,OutputT>; // An DoFnInvoker.ArgumentProvider that forwards all calls to the supplied delegate.\nClass DoFnInvoker.FakeArgumentProvider<InputT,OutputT>; // A fake DoFnInvoker.ArgumentProvider used during testing.\nClass DoFnInvokers; // Static utilities for working with DoFnInvoker.\nClass DoFnSignature; // Describes the signature of a DoFn, in particular, which features it uses, which extra context it requires, types of the input and output elements, etc.\nClass DoFnSignature.BundleMethod; // Describes a DoFn.StartBundle or DoFn.FinishBundle method.\nClass DoFnSignature.FieldAccessDeclaration; // Decscribes a field access declaration.\nClass DoFnSignature.GetInitialRestrictionMethod; // Describes a DoFn.GetInitialRestriction method.\nClass DoFnSignature.GetInitialWatermarkEstimatorStateMethod; // Describes a DoFn.GetInitialWatermarkEstimatorState method.\nClass DoFnSignature.GetRestrictionCoderMethod; // Describes a DoFn.GetRestrictionCoder method.\nClass DoFnSignature.GetSizeMethod; // Describes a DoFn.GetSize method.\nClass DoFnSignature.GetWatermarkEstimatorStateCoderMethod; // Describes a DoFn.GetRestrictionCoder method.\nClass DoFnSignature.LifecycleMethod; // Describes a DoFn.Setup or DoFn.Teardown method.\n", "des": "For internal use only; no backwards-compatibility guarantees."}
{"index": 835, "repo": "calcite-core-1.34.0", "code": "package visualizer;\n\nClass RuleMatchVisualizer; // This is a tool to visualize the rule match process of a RelOptPlanner.\n", "des": "A visualizer showing how the rules are applied step-by-step."}
{"index": 2319, "repo": "spring-boot-3.1.1", "code": "package origin;\n\npublic interface Origin; // Interface that uniquely represents the origin of an item.\n@FunctionalInterface public interface OriginLookup<K>; // An interface that may be implemented by an object that can lookup Origin information from a given key.\n@FunctionalInterface public interface OriginProvider; // Interface to provide access to the origin of an item.\npublic class OriginTrackedResource extends Object implements org.springframework.core.io.Resource, OriginProvider; // Decorator that can be used to add Origin information to a Resource or WritableResource.\npublic static class OriginTrackedResource.OriginTrackedWritableResource extends OriginTrackedResource implements org.springframework.core.io.WritableResource; // Variant of OriginTrackedResource for WritableResource instances.\npublic class OriginTrackedValue extends Object implements OriginProvider; // A wrapper for an Object value and Origin.\npublic class PropertySourceOrigin extends Object implements Origin; // Origin from a PropertySource.\npublic class SystemEnvironmentOrigin extends Object implements Origin; // Origin for an item loaded from the system environment.\npublic class TextResourceOrigin extends Object implements Origin; // Origin for an item loaded from a text resource.\npublic static final class TextResourceOrigin.Location extends Object; // A location (line and column number) within the resource.\n", "des": "Support for item origin tracking."}
{"index": 2340, "repo": "spring-boot-3.1.1", "code": "package validation;\n\npackage validation.beanvalidation; // Utilities and classes related to bean validation.\npublic class MessageInterpolatorFactory extends Object implements org.springframework.beans.factory.ObjectFactory<jakarta.validation.MessageInterpolator>; // ObjectFactory that can be used to create a MessageInterpolator.\n", "des": "Utilities and classes related to validation."}
{"index": 765, "repo": "lucene-analyzers-common-8.11.2", "code": "package compound;\n\npackage compound.hyphenation; // Hyphenation code for the CompoundWordTokenFilter.\nClass CompoundWordTokenFilterBase; // Base class for decomposition token filters.\nClass DictionaryCompoundWordTokenFilter; // A TokenFilter that decomposes compound words found in many Germanic languages.\nClass DictionaryCompoundWordTokenFilterFactory; // Factory for DictionaryCompoundWordTokenFilter.\nClass HyphenationCompoundWordTokenFilter; // A TokenFilter that decomposes compound words found in many Germanic languages.\nClass HyphenationCompoundWordTokenFilterFactory; // Factory for HyphenationCompoundWordTokenFilter.\n", "des": "A filter that decomposes compound words you find in many Germanic languages into the word parts."}
{"index": 260, "repo": "nutch-2.4", "code": "package html;\n\nClass DOMBuilder; // This class takes SAX events (in addition to some extra events that SAX doesn't handle yet) and adds the result to a document or document fragment.\nClass DOMContentUtils; // A collection of methods for extracting content from DOM trees.\nClass DOMContentUtils.LinkParams;\nClass HTMLMetaProcessor; // Class for parsing META Directives from DOM trees.\nClass HtmlParser;\nClass XMLCharacterRecognizer; // Class used to verify whether the specified ch conforms to the XML 1.0 definition of whitespace.\n", "des": "An HTML document parsing plugin."}
{"index": 3278, "repo": "opencms-core-15.0", "code": "package tools;\n\nClass CmsContainerPageCopier; // Helper class for copying container pages including some of their elements.\nEnum CmsContainerPageCopier.CopyMode; // Enum representing the element copy mode.\nClass CmsContainerPageCopier.NoCustomReplacementException; // Exception indicating that no custom replacement element was found for a type which requires replacement.\n", "des": "Tools for i18n."}
{"index": 1010, "repo": "spring-ws-3.0.10.RELEASE", "code": "package dom;\n\nClass DomContentHandler; // SAX ContentHandler that transforms callback calls to DOM Nodes.\n", "des": "Provides classes that help with DOM: the Document Object Model."}
{"index": 36, "repo": "ignite-core-2.15.0", "code": "package configuration;\n\nInterface AddressResolver; // Provides resolution between external and internal addresses.\nInterface CommunicationFailureContext; // Communication Failure Context.\nInterface CommunicationFailureResolver; // Communication Failure Resolver.\nInterface ConnectorMessageInterceptor; // Interface for user-defined object interceptors.\nInterface PlatformConfiguration; // Platform configuration marker interface.\nInterface QueryEngineConfiguration; // Interface for the configuration of the query engine.\nInterface TopologyValidator; // Topology validator is used to verify that cluster topology is valid for further cache operations.\nInterface WarmUpConfiguration; // Warm-up configuration marker interface.\nClass AtomicConfiguration; // Configuration for atomic data structures.\nClass BasicAddressResolver; // Basic implementation of AddressResolver.\nClass BinaryConfiguration; // Configuration object for Ignite Binary Objects.\nClass CacheConfiguration<K,V>; // This class defines grid cache configuration.\nClass CacheConfiguration.IgniteAllNodesPredicate; // Filter that accepts all nodes.\nClass ClientConfiguration; // TcpIgniteClient configuration.\nClass ClientConnectorConfiguration; // Client connector configuration.\nClass ClientTransactionConfiguration; // Thin client transactions configuration.\nClass CollectionConfiguration; // Configuration for Ignite collections.\nClass ConnectorConfiguration; // REST access configuration.\nClass DataRegionConfiguration; // This class allows defining custom data regions' configurations with various parameters for Apache Ignite page memory (see DataStorageConfiguration.\nClass DataStorageConfiguration; // A durable memory configuration for an Apache Ignite node.\nClass DefaultCommunicationFailureResolver; // Default Communication Failure Resolver.\nClass EncryptionConfiguration; // Encryption configuration.\nClass ExecutorConfiguration; // Custom thread pool configuration for compute tasks.\nClass IgniteConfiguration; // This class defines grid runtime configuration.\nClass IgniteReflectionFactory<T>; // Factory implementation that use reflection to create instance of given class.\nClass LoadAllWarmUpConfiguration; // \"Load All\" warm-up configuration that loads data into persistent data region until it reaches DataRegionConfiguration.getMaxSize() with index priority.\nClass MemoryConfiguration; // Use DataStorageConfiguration instead.\nClass MemoryPolicyConfiguration; // Use DataRegionConfiguration instead.\nClass NearCacheConfiguration<K,V>; // Client (near) cache configuration.\nClass NoOpWarmUpConfiguration; // Noop warm-up configuration.\nClass OdbcConfiguration;\nClass PersistentStoreConfiguration; // Use DataStorageConfiguration instead.\n", "des": "Contains configuration-related classes."}
{"index": 3403, "repo": "commons-imaging-1.0-alpha3", "code": "package pnm;\n\nClass PnmImageParser;\nClass PnmImagingParameters; // Pnm format parameters.\n", "des": "The PNM image format family."}
{"index": 1852, "repo": "spring-test-6.0.11", "code": "package jdbc;\n\npublic abstract class JdbcTestUtils extends Object; // JdbcTestUtils is a collection of JDBC related utility functions intended to simplify standard database testing scenarios.\n", "des": "Support classes for tests based on JDBC."}
{"index": 347, "repo": "hadoop-hdfs-3.3.6", "code": "package datamodel;\n\nClass DiskBalancerCluster; // DiskBalancerCluster represents the nodes that we are working against.\nClass DiskBalancerDataNode; // DiskBalancerDataNode represents a DataNode that exists in the cluster.\nClass DiskBalancerVolume; // DiskBalancerVolume represents a volume in the DataNode.\nClass DiskBalancerVolumeSet; // DiskBalancerVolumeSet is a collection of storage devices on the data node which are of similar StorageType.\n", "des": "Disk Balancer Data Model is the Data Model for the cluster that Disk Balancer is working against."}
{"index": 1393, "repo": "spring-boot-actuator-3.1.1", "code": "package annotation;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Endpoint @FilteredEndpoint(org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointFilter.class) public @interface ControllerEndpoint; // Identifies a type as being an endpoint that is only exposed over Spring MVC or Spring WebFlux.\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointDiscoverer.ControllerEndpointDiscovererRuntimeHints.class) public class ControllerEndpointDiscoverer extends EndpointDiscoverer<ExposableControllerEndpoint,Operation> implements ControllerEndpointsSupplier; // EndpointDiscoverer for controller endpoints.\n@FunctionalInterface public interface ControllerEndpointsSupplier extends EndpointsSupplier<ExposableControllerEndpoint>; // EndpointsSupplier for controller endpoints.\n@Target(TYPE) @Retention(RUNTIME) @Documented @EndpointExtension(filter=org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointFilter.class) public @interface EndpointWebExtension; // Identifies a type as being a Web-specific extension of an @Endpoint.\npublic interface ExposableControllerEndpoint extends ExposableEndpoint<Operation>, PathMappedEndpoint; // Information describing an endpoint that can be exposed over Spring MVC or Spring WebFlux.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Endpoint @FilteredEndpoint(org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointFilter.class) @ResponseBody public @interface RestControllerEndpoint; // Identifies a type as being a REST endpoint that is only exposed over Spring MVC or Spring WebFlux.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Endpoint @FilteredEndpoint(org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointFilter.class) public @interface ServletEndpoint; // Identifies a type as being an endpoint that supplies a servlet to expose.\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointDiscoverer.ServletEndpointDiscovererRuntimeHints.class) public class ServletEndpointDiscoverer extends EndpointDiscoverer<ExposableServletEndpoint,Operation> implements ServletEndpointsSupplier; // EndpointDiscoverer for servlet endpoints.\n", "des": "Annotation support for actuator web endpoints."}
{"index": 568, "repo": "hadoop-common-3.3.4", "code": "package net;\n\nInterface DNSToSwitchMapping; // An interface that must be implemented to allow pluggable DNS-name/IP-address to RackID resolvers.\nInterface DomainNameResolver; // This interface provides methods for the failover proxy to get IP addresses of the associated servers (NameNodes, RBF routers etc).\nInterface InnerNode.Factory<N extends org.apache.hadoop.net.InnerNode>;\nClass AbstractDNSToSwitchMapping; // This is a base class for DNS to Switch mappings.\nClass CachedDNSToSwitchMapping; // A cached implementation of DNSToSwitchMapping that takes an raw DNSToSwitchMapping and stores the resolved network location in a cache.\nClass DNSDomainNameResolver; // DNSDomainNameResolver wraps up the default DNS service for forward/reverse DNS lookup.\nClass InnerNodeImpl; // InnerNode represents a switch/router of a data center or rack.\nClass InnerNodeImpl.Factory;\nClass ScriptBasedMapping; // This class implements the DNSToSwitchMapping interface using a script configured via the CommonConfigurationKeysPublic.NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY option.\nClass ScriptBasedMapping.RawScriptBasedMapping; // This is the uncached script mapping that is fed into the cache managed by the superclass CachedDNSToSwitchMapping\nClass SocksSocketFactory; // Specialized SocketFactory to create sockets with a SOCKS proxy\nClass StandardSocketFactory; // Specialized SocketFactory to create sockets with a SOCKS proxy\nClass TableMapping; // Simple DNSToSwitchMapping implementation that reads a 2 column text file.\nClass ConnectTimeoutException; // Thrown by NetUtils.connect(java.net.Socket, java.net.SocketAddress, int) if it times out while connecting to the remote host.\nClass NetworkTopology.InvalidTopologyException;\n", "des": "Network-related classes."}
{"index": 1220, "repo": "commons-text-1.10.0", "code": "package lookup;\n\nInterface BiStringLookup<U>; // Lookups a String key for a String value.\nInterface StringLookup; // Lookups a String key for a String value.\nClass StringLookupFactory; // Create instances of string lookups or access singleton string lookups implemented in this package.\nEnum DefaultStringLookup; // An enumeration defining StringLookup objects available through StringLookupFactory.\n", "des": "Provides algorithms for looking up strings for use with a StringSubstitutor."}
{"index": 1091, "repo": "lucene-analyzers-smartcn-8.11.2", "code": "package hhmm;\n\nClass HHMMSegmenter; // Finds the optimal segmentation of a sentence into Chinese words\nClass SegToken; // SmartChineseAnalyzer internal token\nClass SegTokenFilter; // Filters a SegToken by converting full-width latin to half-width, then lowercasing latin.\n", "des": "SmartChineseAnalyzer Hidden Markov Model package."}
{"index": 2127, "repo": "spring-context-support-6.0.11", "code": "package caffeine;\n\npublic class CaffeineCache extends org.springframework.cache.support.AbstractValueAdaptingCache; // Spring Cache adapter implementation on top of a Caffeine Cache instance.\npublic class CaffeineCacheManager extends Object implements org.springframework.cache.CacheManager; // CacheManager implementation that lazily builds CaffeineCache instances for each CaffeineCacheManager.getCache(java.lang.String) request.\n", "des": "Support classes for the open source cache in Caffeine library, allowing to set up Caffeine caches within Spring's cache abstraction."}
{"index": 3659, "repo": "solr-core-9.3.0", "code": "package designer;\n\nInterface SampleDocumentsLoader;\nInterface SchemaDesignerConstants;\nInterface SchemaSuggester;\nClass DefaultSampleDocumentsLoader;\nClass DefaultSchemaSuggester;\nClass ManagedSchemaDiff; // Utility methods for comparing managed index schemas\nClass SampleDocuments;\nClass SchemaDesignerAPI; // All V2 APIs that have a prefix of /api/schema-designer/\n", "des": "The SchemaDesignerAPI and supporting classes."}
{"index": 1177, "repo": "commons-math3-3.6.1", "code": "package neuralnet;\n\npackage neuralnet.oned; // One-dimensional neural networks.\npackage neuralnet.sofm; // Self Organizing Feature Map.\npackage neuralnet.twod; // Two-dimensional neural networks.\nInterface FeatureInitializer; // Defines how to assign the first value of a neuron's feature.\nInterface UpdateAction; // Describes how to update the network in response to a training sample.\nClass FeatureInitializerFactory; // Creates functions that will select the initial values of a neuron's features.\nClass MapUtils; // Utilities for network maps.\nClass Network; // Neural network, composed of Neuron instances and the links between them.\nClass Network.NeuronIdentifierComparator; // Comparator that prescribes an order of the neurons according to the increasing order of their identifier.\nClass Neuron; // Describes a neuron element of a neural network.\nEnum SquareNeighbourhood; // Defines neighbourhood types.\n", "des": "Neural networks."}
{"index": 3806, "repo": "lucene-analysis-common-9.7.0", "code": "package pattern;\n\nClass PatternCaptureGroupFilterFactory; // Factory for PatternCaptureGroupTokenFilter.\nClass PatternCaptureGroupTokenFilter; // CaptureGroup uses Java regexes to emit multiple tokens - one for each capture group in one or more patterns.\nClass PatternReplaceCharFilter; // CharFilter that uses a regular expression for the target of replace string.\nClass PatternReplaceCharFilterFactory; // Factory for PatternReplaceCharFilter.\nClass PatternReplaceFilter; // A TokenFilter which applies a Pattern to each token in the stream, replacing match occurrences with the specified replacement string.\nClass PatternReplaceFilterFactory; // Factory for PatternReplaceFilter.\nClass PatternTokenizer; // This tokenizer uses regex pattern matching to construct distinct tokens for the input stream.\nClass PatternTokenizerFactory; // Factory for PatternTokenizer.\nClass PatternTypingFilter; // Set a type attribute to a parameterized value when tokens are matched by any of a several regex patterns.\nClass PatternTypingFilter.PatternTypingRule; // Value holding class for pattern typing rules.\nClass PatternTypingFilterFactory; // Provides a filter that will analyze tokens with the analyzer from an arbitrary field type.\nClass SimplePatternSplitTokenizer; // This tokenizer uses a Lucene RegExp or (expert usage) a pre-built determinized Automaton, to locate tokens.\nClass SimplePatternSplitTokenizerFactory; // Factory for SimplePatternSplitTokenizer, for producing tokens by splitting according to the provided regexp.\nClass SimplePatternTokenizer; // This tokenizer uses a Lucene RegExp or (expert usage) a pre-built determinized Automaton, to locate tokens.\nClass SimplePatternTokenizerFactory; // Factory for SimplePatternTokenizer, for matching tokens based on the provided regexp.\n", "des": "Set of components for pattern-based (regex) analysis."}
{"index": 3877, "repo": "solr-ltr-9.3.0", "code": "package model;\n\nInterface NeuralNetworkModel.Activation;\nInterface NeuralNetworkModel.Layer;\nClass AdapterModel; // A scoring model whose initialization is completed via its AdapterModel.init(SolrResourceLoader) method.\nClass DefaultWrapperModel; // A scoring model that fetches the wrapped model from SolrResourceLoader.\nClass LinearModel; // A scoring model that computes scores using a dot product.\nClass LTRScoringModel; // A scoring model computes scores that can be used to rerank documents.\nClass MultipleAdditiveTreesModel; // A scoring model that computes scores based on the summation of multiple weighted trees.\nClass NeuralNetworkModel; // A scoring model that computes document scores using a neural network.\nClass WrapperModel; // A scoring model that wraps the other model.\nClass ModelException;\n", "des": "Contains Model related classes"}
{"index": 334, "repo": "kafka-clients-3.5.0", "code": "package delegation;\n\nClass DelegationToken; // A class representing a delegation token.\nClass TokenInformation; // A class representing a delegation token details.\n", "des": "Provides mechanism for delegating authorization to a distinct Principal for securing Kafka clusters."}
{"index": 3467, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface DdlTransactionIsolator; // Provides access to a Connection that is isolated from any \"current transaction\" with the designed purpose of performing DDL commands\nInterface SynchronizationRegistry; // Manages a registry of (local) JTA Synchronization instances\nInterface SynchronizationRegistryImplementor; // SPI contract for SynchronizationRegistry implementors.\nInterface TransactionCoordinator; // Models the coordination of all transaction related flows.\nInterface TransactionCoordinator.TransactionDriver; // Provides the means for \"local transactions\" (as transaction drivers) to control the underlying \"physical transaction\" currently associated with the TransactionCoordinator.\nInterface TransactionCoordinatorBuilder; // Builder for TransactionCoordinator instances\nInterface TransactionCoordinatorBuilder.Options; // Access to options to are specific to each TransactionCoordinator instance\nInterface TransactionCoordinatorOwner; // Models an owner of a TransactionCoordinator.\nEnum TransactionStatus; // Enumeration of statuses in which a transaction facade (Transaction) might be.\n", "des": "Extended SPI contracts for the resource-level transaction capabilities of Hibernate."}
{"index": 3487, "repo": "opennlp-uima-2.2.0", "code": "package tokenize;\n\nInterface TokenizerModelResource; // A TokenizerModel which can be shared between AnalysisEngines and loaded via the UIMA resource model.\nClass AbstractTokenizer;\nClass SimpleTokenizer; // OpenNLP Simple Tokenizer annotator.\nClass Tokenizer; // OpenNLP Tokenizer annotator.\nClass TokenizerModelResourceImpl;\nClass WhitespaceTokenizer; // OpenNLP Whitespace Tokenizer annotator.\n", "des": "Package related to finding tokens or word segments."}
{"index": 1753, "repo": "spring-data-mongodb-4.1.2", "code": "package encryption;\n\npublic interface Encryption<S,T>; // Component responsible for encrypting and decrypting values.\npublic interface EncryptionContext; // Context to encapsulate encryption for a specific MongoPersistentProperty.\npublic interface EncryptionKey; // The EncryptionKey represents a Data Encryption Key reference that can be either direct via the key id or its Key Alternative Name.\npublic static enum EncryptionKey.Type extends Enum<EncryptionKey.Type>; // The key reference type.\n@FunctionalInterface public interface EncryptionKeyResolver; // Interface to obtain a Data Encryption Key that is valid in a given context.\npublic class EncryptionOptions extends Object; // Options, like the EncryptionOptions.algorithm(), to apply when encrypting values.\npublic class MongoClientEncryption extends Object implements Encryption<org.bson.BsonValue,org.bson.BsonBinary>; // ClientEncryption based Encryption implementation.\n", "des": "Infrastructure for explicit encryption mechanism of Client-Side Field Level Encryption."}
{"index": 3310, "repo": "opencms-core-15.0", "code": "package documents;\n\nInterface I_CmsDocumentFactory; // Used to create index Lucene Documents for OpenCms resources, controls the text extraction algorithm used for a specific OpenCms resource type / MIME type combination.\nInterface I_CmsSearchExtractor; // Defines a text extractor for the integrated search engine.\nInterface I_CmsTermHighlighter; // Highlights arbitrary terms, used for generation of search excerpts.\nClass A_CmsVfsDocument; // Base document factory class for a VFS CmsResource, just requires a specialized implementation of I_CmsSearchExtractor.extractContent(CmsObject, CmsResource, I_CmsSearchIndex) for text extraction from the binary document content.\nClass CmsDocumentContainerPage; // Lucene document factory class to extract index data from a resource of type CmsResourceTypeContainerPage.\nClass CmsDocumentDependency; // Provides the dependency information about one search result document, used to generate the list of document search results.\nClass CmsDocumentGeneric; // Lucene document factory class for indexing data from a generic CmsResource.\nClass CmsDocumentHtml; // Lucene document factory class to extract index data from a cms resource containing plain html data.\nClass CmsDocumentMsOfficeOLE2; // Lucene document factory class to extract text data from a VFS resource that is an OLE 2 MS Office document.\nClass CmsDocumentMsOfficeOOXML; // Lucene document factory class to extract text data from a VFS resource that is an OOXML MS Office document.\nClass CmsDocumentOpenOffice; // Lucene document factory class to extract index data from a cms resource containing Open Document Format data.\nClass CmsDocumentPdf; // Lucene document factory class to extract index data from a cms resource containing Adobe pdf data.\nClass CmsDocumentPlainText; // Lucene document factory class to extract index data from a cms resource containing plain text data.\nClass CmsDocumentRtf; // Lucene document factory class to extract index data from a cms resource containing RTF data.\nClass CmsDocumentXmlContent; // Lucene document factory class to extract index data from an OpenCms VFS resource of type CmsResourceTypeXmlContent.\nClass CmsDocumentXmlPage; // Lucene document factory class to extract index data from a cms resource of type CmsResourceTypeXmlPage.\nClass CmsExtractionResultCache; // Implements a disk cache that stores text extraction results in the RFS.\nClass CmsTermHighlighterHtml; // Default highlighter implementation used for generation of search excerpts.\n", "des": "Handles indexing different sorts of document and resource type from the OpenCms VFS for the full text search."}
{"index": 2256, "repo": "spring-vault-core-3.0.4", "code": "package annotation;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Repeatable(VaultPropertySources.class) @Import(org.springframework.vault.annotation.VaultPropertySourceRegistrar.class) public @interface VaultPropertySource; // Annotation providing a convenient and declarative mechanism for adding a VaultPropertySource to Spring's Environment.\npublic static enum VaultPropertySource.Renewal extends Enum<VaultPropertySource.Renewal>;\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(org.springframework.vault.annotation.VaultPropertySourceRegistrar.class) public @interface VaultPropertySources; // Container annotation that aggregates several VaultPropertySource annotations.\n", "des": "Annotation support for the Spring Vault."}
{"index": 165, "repo": "ignite-core-2.15.0", "code": "package message;\n\nInterface GridClientMessage; // Interface for all client messages.\nClass GridClientAbstractMessage; // This class provides implementation for commit message fields and cannot be used directly.\nClass GridClientAuthenticationRequest; // Client authentication request.\nClass GridClientBinaryMetaData; // Binary meta data sent from client.\nClass GridClientCacheBean; // Cache bean.\nClass GridClientCacheRequest; // Generic cache request.\nClass GridClientClusterNameRequest;\nClass GridClientClusterStateRequest; // Use GridClientClusterStateRequestV2\nClass GridClientClusterStateRequestV2; // Enhanced version of GridClientClusterStateRequest.\nClass GridClientHandshakeRequest; // A client handshake request, containing version info and a marshaller ID.\nClass GridClientHandshakeResponse; // A client handshake response, containing result code.\nClass GridClientNodeBean; // Node bean.\nClass GridClientNodeMetricsBean; // Node metrics bean.\nClass GridClientNodeStateBeforeStartRequest; // Request to manage and obtain information about node before its start.\nClass GridClientPingPacket; // Fictive ping packet.\nClass GridClientResponse; // Bean representing client operation result.\nClass GridClientStateRequest; // Use GridClientClusterStateRequest instead.\nClass GridClientTaskRequest; // Task command request.\nClass GridClientTaskResultBean; // Task result.\nClass GridClientTopologyRequest; // Topology command request.\nClass GridClientWarmUpRequest;\nClass GridRouterRequest; // Container for routed message information.\nClass GridRouterResponse;\nEnum GridClientCacheRequest.GridCacheOperation; // Available cache operations.\n", "des": "Defines messages that are used in binary TCP communication between Ignite clients and nodes."}
{"index": 1174, "repo": "commons-math3-3.6.1", "code": "package clustering;\n\npackage clustering.evaluation; // Cluster evaluation methods.\nInterface Clusterable; // Interface for n-dimensional points that can be clustered together.\nClass CentroidCluster<T extends Clusterable>; // A Cluster used by centroid-based clustering algorithms.\nClass Cluster<T extends Clusterable>; // Cluster holding a set of Clusterable points.\nClass Clusterer<T extends Clusterable>; // Base class for clustering algorithms.\nClass DBSCANClusterer<T extends Clusterable>; // DBSCAN (density-based spatial clustering of applications with noise) algorithm.\nClass DoublePoint; // A simple implementation of Clusterable for points with double coordinates.\nClass FuzzyKMeansClusterer<T extends Clusterable>; // Fuzzy K-Means clustering algorithm.\nClass KMeansPlusPlusClusterer<T extends Clusterable>; // Clustering algorithm based on David Arthur and Sergei Vassilvitski k-means++ algorithm.\nClass MultiKMeansPlusPlusClusterer<T extends Clusterable>; // A wrapper around a k-means++ clustering algorithm which performs multiple trials and returns the best solution.\nEnum KMeansPlusPlusClusterer.EmptyClusterStrategy; // Strategies to use for replacing an empty cluster.\n", "des": "Clustering algorithms."}
{"index": 696, "repo": "jackson-databind-2.15.2", "code": "package type;\n\nClass ArrayType; // Array types represent Java arrays, both primitive and object valued.\nClass ClassKey; // Key class, used as an efficient and accurate key for locating per-class values, such as JsonSerializers.\nClass ClassStack; // Simple helper class used to keep track of 'call stack' for classes being referenced (as well as unbound variables)\nClass CollectionLikeType; // Type that represents things that act similar to Collection; but may or may not be instances of that interface.\nClass CollectionType; // Type that represents Java Collection types (Lists, Sets).\nClass MapLikeType; // Type that represents Map-like types; things that consist of key/value pairs but that do not necessarily implement Map, but that do not have enough introspection functionality to allow for some level of generic handling.\nClass MapType; // Type that represents \"true\" Java Map types.\nClass PlaceholderForType; // Helper type used when introspecting bindings for already resolved types, needed for specialization.\nClass ReferenceType; // Specialized SimpleType for types that are referential types, that is, values that can be dereferenced to another value (or null), of different type.\nClass ResolvedRecursiveType; // Internal placeholder type used for self-references.\nClass SimpleType; // Simple types are defined as anything other than one of recognized container types (arrays, Collections, Maps).\nClass TypeBase;\nClass TypeBindings; // Helper class used for resolving type parameters for given class\nClass TypeFactory; // Class used for creating concrete JavaType instances, given various inputs.\nClass TypeModifier; // Class that defines API that can be used to modify details of JavaType instances constructed using TypeFactory.\nClass TypeParser; // Simple recursive-descent parser for parsing canonical JavaType representations and constructing type instances.\nEnum LogicalType; // Set of logical types (or type categories, classes of classes), used for defining applicability of configuration like coercion configuration.\n", "des": "Package that contains concrete implementations of JavaType, as well as the factory (TypeFactory) for constructing instances from various input data types (like Class, Type) and programmatically (for structured types, arrays, Lists and Maps)."}
{"index": 1717, "repo": "spring-boot-test-3.1.1", "code": "package client;\n\npublic class LocalHostUriTemplateHandler extends org.springframework.boot.web.client.RootUriTemplateHandler; // UriTemplateHandler will automatically prefix relative URIs with localhost:${local.server.port}.\npublic class MockServerRestTemplateCustomizer extends Object implements org.springframework.boot.web.client.RestTemplateCustomizer; // RestTemplateCustomizer that can be applied to a RestTemplateBuilder instances to add MockRestServiceServer support.\npublic class RootUriRequestExpectationManager extends Object implements org.springframework.test.web.client.RequestExpectationManager; // RequestExpectationManager that strips the specified root URI from the request before verification.\npublic class TestRestTemplate extends Object; // Convenient alternative of RestTemplate that is suitable for integration tests.\nprotected static class TestRestTemplate.CustomHttpComponentsClientHttpRequestFactory extends org.springframework.http.client.HttpComponentsClientHttpRequestFactory; // HttpComponentsClientHttpRequestFactory to apply customizations.\npublic static enum TestRestTemplate.HttpClientOption extends Enum<TestRestTemplate.HttpClientOption>; // Options used to customize the Apache HTTP Client.\n", "des": "Web client test utilities."}
{"index": 549, "repo": "commons-rdf-rdf4j-0.5.0", "code": "package experimental;\n\nClass RDF4JParser; // RDF4J-based parser.\n", "des": "Experimental Commons RDF RDF4J implementations."}
{"index": 1022, "repo": "hadoop-aws-3.3.6", "code": "package s3a;\n\npackage s3a.api; // Where the interfaces for classes implemented in o.a.h.fs.s3a.impl should go.\npackage s3a.audit; // Support for auditing and ultimately tracing operations.\npackage s3a.auth; // Authentication and permissions support.\npackage s3a.commit; // Support for committing the output of analytics jobs directly to S3.\npackage s3a.impl; // Implementation classes private to the S3A store.\npackage s3a.prefetch; // High performance s3 input stream which reads in blocks and can cache blocks in the local filesystem.\npackage s3a.s3guard; // This package contained S3Guard support; now the feature has been removed, its contents are limited to the public command line and some methods still used by directory marker code.\npackage s3a.select; // Support for S3 Select.\npackage s3a.statistics; // Statistics collection for the S3A connector: interfaces.\npackage s3a.tools; // S3A Command line tools independent of S3Guard.\nInterface Invoker.Retried; // Callback for retry and notification operations.\nInterface S3AInputStream.InputStreamCallbacks; // Callbacks for input stream IO.\nInterface S3AUtils.CallOnLocatedFileStatus; // An interface for use in lambda-expressions working with directory tree listings.\nInterface S3AUtils.LocatedFileStatusMap<T>; // An interface for use in lambda-expressions working with directory tree listings.\nInterface S3ClientFactory; // This interface will be replaced by one which uses the AWS SDK V2 S3 client as part of upgrading S3A to SDK V2.\nInterface WriteOperationHelper.WriteOperationHelperCallbacks; // Callbacks for writeOperationHelper.\nInterface WriteOperations; // Operations to update the store.\nClass AnonymousAWSCredentialsProvider; // This class will be replaced by one that implements AWS SDK V2's AwsCredentialProvider as part of upgrading S3A to SDK V2.\nClass ArnResource; // Represents an Arn Resource, this can be an accesspoint or bucket.\nClass AWSCredentialProviderList; // A list of providers.\nClass Constants; // Constants used with the S3AFileSystem.\n", "des": "S3A Filesystem."}
{"index": 3555, "repo": "guava-32.1.1-jre", "code": "package eventbus;\n\nInterface SubscriberExceptionHandler; // Handler for exceptions thrown by event subscribers.\nClass AsyncEventBus; // An EventBus that takes the Executor of your choice and uses it to dispatch events, allowing dispatch to occur asynchronously.\nClass DeadEvent; // Wraps an event that was posted, but which had no subscribers and thus could not be delivered.\nClass EventBus; // Dispatches events to listeners, and provides ways for listeners to register themselves.\nClass SubscriberExceptionContext; // Context for an exception thrown by a subscriber.\nAnnotation Type AllowConcurrentEvents; // Marks an event subscriber method as being thread-safe.\nAnnotation Type Subscribe; // Marks a method as an event subscriber.\n", "des": "Discouraged in favor of dependency injection and concurrency frameworks, EventBus allows publish-subscribe-style communication."}
{"index": 3390, "repo": "commons-imaging-1.0-alpha3", "code": "package bmp;\n\nClass BmpImageParser;\nClass BmpImagingParameters; // Bmp format parameters.\n", "des": "The BMP image format."}
{"index": 3245, "repo": "opencms-core-15.0", "code": "package detailpage;\n\nInterface I_CmsDetailPageHandler; // Interface for classes which can find the detail page for a given resource, and determine whether a given detail page / detail content combination is valid.\nClass CmsDefaultDetailPageHandler; // This class uses information from the detail page information stored in the sitemap to find/recognize the detail pages for a given resource.\nClass CmsDetailPageConfigurationWriter; // Class for writing detail page information to an XML configuration file.\nClass CmsDetailPageInfo; // Data bean containing the information for a detail page.\nClass CmsDetailPageResourceHandler; // Resource init handler for detail-pages.\nClass CmsDetailPageUtil; // This is a utility class which provides convenience methods for finding detail page names for resources which include the URL names of the resources themselves.\nClass CmsPermissiveDetailPageHandler; // Original detail page handler implementing the detail page logic from OpenCms versions up to 11.0.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains functions for the detail pages in OpenCms."}
{"index": 1149, "repo": "commons-math3-3.6.1", "code": "package polynomials;\n\nClass PolynomialFunction; // Immutable representation of a real polynomial function with real coefficients.\nClass PolynomialFunction.Parametric; // Dedicated parametric polynomial class.\nClass PolynomialFunctionLagrangeForm; // Implements the representation of a real polynomial function in Lagrange Form.\nClass PolynomialFunctionNewtonForm; // Implements the representation of a real polynomial function in Newton Form.\nClass PolynomialSplineFunction; // Represents a polynomial spline function.\nClass PolynomialsUtils; // A collection of static methods that operate on or return polynomials.\n", "des": "Univariate real polynomials implementations, seen as differentiable univariate real functions."}
{"index": 1960, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package neo4j;\n\n@FunctionalInterface public interface ConfigBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the Config through a Config.ConfigBuilder whilst retaining default auto-configuration.\n@AutoConfiguration @ConditionalOnClass(org.neo4j.driver.Driver.class) @EnableConfigurationProperties(Neo4jProperties.class) public class Neo4jAutoConfiguration extends Object; // Auto-configuration for Neo4j.\npublic interface Neo4jConnectionDetails extends ConnectionDetails; // Details required to establish a connection to a Neo4j service.\n@ConfigurationProperties(prefix=\"spring.neo4j\") public class Neo4jProperties extends Object; // Configuration properties for Neo4j.\npublic static class Neo4jProperties.Authentication extends Object;\npublic static class Neo4jProperties.Pool extends Object;\npublic static class Neo4jProperties.Security extends Object;\npublic static enum Neo4jProperties.Security.TrustStrategy extends Enum<Neo4jProperties.Security.TrustStrategy>;\n", "des": "Auto-configuration for Neo4j."}
{"index": 1084, "repo": "graal-sdk-1.0.0-rc7", "code": "package options;\n\nInterface OptionDescriptors; // An interface to a set of OptionDescriptors.\nInterface OptionValues; // Represents a set of option values based on an OptionDescriptor.\nClass OptionDescriptor; // Represents metadata for a single option.\nClass OptionKey<T>; // Represents the option key for an option specification.\nClass OptionType<T>; // Represents a type of an option that allows to convert string values to Java values.\nEnum OptionCategory; // Categorizes options according to user relevance.\n", "des": "The Graal-SDK options package contains reusable collection classes for options."}
{"index": 1614, "repo": "spring-data-neo4j-7.1.2", "code": "package transaction;\n\n@API(status=STABLE, since=\"6.1.1\") public sealed interface Neo4jBookmarkManager; // Responsible for storing, updating and retrieving the bookmarks of Neo4j's transaction.\n@API(status=STABLE, since=\"6.1.1\") public final class Neo4jBookmarksUpdatedEvent extends ApplicationEvent; // This event will be published after a Neo4j transaction manager physically committed a transaction without errors and received a new set of bookmarks from the cluster.\n@API(status=STABLE, since=\"6.0\") public final class Neo4jTransactionManager extends AbstractPlatformTransactionManager implements ApplicationContextAware; // Dedicated PlatformTransactionManager for native Neo4j transactions.\n@API(status=STABLE, since=\"6.2\") public static final class Neo4jTransactionManager.Builder extends Object; // A builder for Neo4jTransactionManager.\npublic final class Neo4jTransactionUtils extends Object; // Internal use only.\n@API(status=STABLE, since=\"6.0\") public final class ReactiveNeo4jTransactionManager extends AbstractReactiveTransactionManager implements ApplicationContextAware;\n@API(status=STABLE, since=\"6.2\") public static final class ReactiveNeo4jTransactionManager.Builder extends Object; // A builder for ReactiveNeo4jTransactionManager.\n", "des": "Contains the core infrastructure for translating unmanaged Neo4j transaction into Spring managed transactions."}
{"index": 3641, "repo": "solr-core-9.3.0", "code": "package overseer;\n\nInterface ZkStateWriter.ZkWriteCallback;\nClass ClusterStateMutator;\nClass CollectionMutator;\nClass NodeMutator;\nClass ReplicaMutator;\nClass SliceMutator;\nClass ZkStateWriter; // ZkStateWriter is responsible for writing updates to the cluster state stored in ZooKeeper for collections each of which gets their own individual state.json in ZK.\nClass ZkWriteCommand;\nEnum OverseerAction; // Enum of actions supported by the overseer only.\n", "des": "Classes for updating cluster state in SolrCloud mode."}
{"index": 307, "repo": "pdfbox-3.0.0-beta1", "code": "package form;\n\nInterface ScriptingHandler;\nClass FieldUtils; // A set of utility methods to help with common AcroForm form and field related functions.\nClass PDAcroForm; // An interactive form, also known as an AcroForm.\nClass PDButton; // A button field represents an interactive control on the screen that the user can manipulate with the mouse.\nClass PDCheckBox; // A check box toggles between two states, on and off.\nClass PDChoice; // A choice field contains several text items, one or more of which shall be selected as the field value.\nClass PDComboBox; // A combo box consisting of a drop-down list.\nClass PDField; // A field in an interactive form.\nClass PDFieldFactory; // A PDField factory.\nClass PDFieldTree; // The field tree.\nClass PDListBox; // A scrollable list box.\nClass PDNonTerminalField; // A non terminal field in an interactive form.\nClass PDPushButton; // A pushbutton is a purely interactive control that responds immediately to user input without retaining a permanent value.\nClass PDRadioButton; // Radio button fields contain a set of related buttons that can each be on or off.\nClass PDSignatureField; // A signature field is a form field that contains a digital signature.\nClass PDTerminalField; // A field in an interactive form.\nClass PDTextField; // A text field is a box or space for text fill-in data typically entered from a keyboard.\nClass PDVariableText; // Base class for fields which use \"Variable Text\".\nClass PDXFAResource; // An XML Forms Architecture (XFA) resource.\n", "des": "The interactive package contains classes for handling Interactive Forms, also known as \"AcroForms\"."}
{"index": 3834, "repo": "lucene-core-9.7.0", "code": "package analysis;\n\npackage analysis.standard; // Fast, general-purpose grammar-based tokenizer StandardTokenizer implements the Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29.\npackage analysis.tokenattributes; // General-purpose attributes for text analysis.\nClass AbstractAnalysisFactory; // Abstract parent class for analysis factories TokenizerFactory, TokenFilterFactory and CharFilterFactory.\nClass AnalysisSPILoader<S extends AbstractAnalysisFactory>; // Helper class for loading named SPIs from classpath (e.g.\nClass Analyzer; // An Analyzer builds TokenStreams, which analyze text.\nClass Analyzer.ReuseStrategy; // Strategy defining how TokenStreamComponents are reused per call to Analyzer.tokenStream(String, java.io.Reader).\nClass Analyzer.TokenStreamComponents; // This class encapsulates the outer components of a token stream.\nClass AnalyzerWrapper; // Extension to Analyzer suitable for Analyzers which wrap other Analyzers.\nClass AutomatonToTokenStream; // Converts an Automaton into a TokenStream.\nClass CachingTokenFilter; // This class can be used if the token attributes of a TokenStream are intended to be consumed more than once.\nClass CharacterUtils; // Utility class to write tokenizers or token filters.\nClass CharacterUtils.CharacterBuffer; // A simple IO buffer to use with CharacterUtils.fill(CharacterBuffer, Reader).\nClass CharArrayMap<V>; // A simple class that stores key Strings as char[]'s in a hash table.\nClass CharArraySet; // A simple class that stores Strings as char[]'s in a hash table.\nClass CharFilter; // Subclasses of CharFilter can be chained to filter a Reader They can be used as Reader with additional offset correction.\nClass CharFilterFactory; // Abstract parent class for analysis factories that create CharFilter instances.\nClass DelegatingAnalyzerWrapper; // An analyzer wrapper, that doesn't allow to wrap components or readers.\nClass FilteringTokenFilter; // Abstract base class for TokenFilters that may remove tokens.\nClass GraphTokenFilter; // An abstract TokenFilter that exposes its input stream as a graph\nClass LowerCaseFilter; // Normalizes token text to lower case.\nClass StopFilter; // Removes stop words from a token stream.\n", "des": "Text analysis."}
{"index": 538, "repo": "commons-vfs2-2.9.0", "code": "package util;\n\nInterface Cryptor;\nClass CombinedResources;\nClass CryptorFactory; // Factory to create an instance of a Cryptor.\nClass DefaultCryptor; // Allows passwords to be encrypted and decrypted.\nClass DelegatingFileSystemOptionsBuilder; // This class use reflection to set a configuration value using the fileSystemConfigBuilder associated the a scheme.\nClass EncryptUtil; // Allows passwords to be encrypted and decrypted.\nClass FileObjectUtils; // Utility methods for FileObject.\nClass Messages; // Formats messages.\nClass MonitorInputStream; // An InputStream that provides buffering and end-of-stream monitoring.\nClass MonitorOutputStream; // An OutputStream that provides buffering and end-of-stream monitoring.\nClass MonitorRandomAccessContent; // A RandomAccessContent that provides end-of-stream monitoring.\nClass Os; // Use Apache Commons Lang's SystemUtils.\nClass OsFamily; // Use Apache Commons Lang's SystemUtils.\nClass PosixPermissions; // UNIX permissions.\nClass RawMonitorInputStream; // An InputStream that provides end-of-stream monitoring.\nClass URIUtils; // The URI escape and character encoding and decoding utility.\nClass UserAuthenticatorUtils; // Helps with authentication.\nClass WeakRefFileListener; // Wraps a listener with a WeakReference.\nEnum PosixPermissions.Type; // Permission types.\nEnum RandomAccessMode; // An enumerated type representing the modes of a random access content.\n", "des": "Utility classes used by the VFS."}
{"index": 105, "repo": "ignite-core-2.15.0", "code": "package failure;\n\nInterface FailureHandler; // Provides facility to handle failures by custom user implementations, which can be configured by IgniteConfiguration.setFailureHandler(FailureHandler) method.\nClass AbstractFailureHandler; // Abstract superclass for FailureHandler implementations.\nClass FailureContext; // Failure context contains information about failure type and exception if applicable.\nClass NoOpFailureHandler; // Just ignores any failure.\nClass RestartProcessFailureHandler; // This handler could be used only with ignite.\nClass StopNodeFailureHandler; // Handler will stop node in case of critical error using IgnitionEx.stop(nodeName, true, true) call.\nClass StopNodeOrHaltFailureHandler; // Handler will try to stop node if tryStop value is true.\nEnum FailureType; // Types of failures.\n", "des": "Contains Failure handling public API with standard FailureHandler implementations."}
{"index": 3789, "repo": "lucene-analysis-common-9.7.0", "code": "package gl;\n\nClass GalicianAnalyzer; // Analyzer for Galician.\nClass GalicianMinimalStemFilter; // A TokenFilter that applies GalicianMinimalStemmer to stem Galician words.\nClass GalicianMinimalStemFilterFactory; // Factory for GalicianMinimalStemFilter.\nClass GalicianMinimalStemmer; // Minimal Stemmer for Galician\nClass GalicianStemFilter; // A TokenFilter that applies GalicianStemmer to stem Galician words.\nClass GalicianStemFilterFactory; // Factory for GalicianStemFilter.\nClass GalicianStemmer; // Galician stemmer implementing \"Regras do lematizador para o galego\".\n", "des": "Analyzer for Galician."}
{"index": 863, "repo": "calcite-core-1.34.0", "code": "package parser;\n\nInterface SqlParser.Config; // Interface to define the configuration for a SQL parser.\nInterface SqlParserImplFactory; // Factory for SqlAbstractParserImpl objects.\nClass Span; // Builder for SqlParserPos.\nClass SqlParser; // A SqlParser parses a SQL statement.\nClass SqlParser.ConfigBuilder;\nClass SqlParserPos; // SqlParserPos represents the position of a parsed token within SQL statement text.\nClass SqlParserUtil; // Utility methods relating to parsing SQL.\nClass SqlParserUtil.ParsedCollation; // The components of a collation definition, per the SQL standard.\nClass SqlParserUtil.ToTreeListItem; // Class that holds a SqlOperator and a SqlParserPos.\nClass StringAndPos; // Contains a string, the offset of a token within the string, and a parser position containing the beginning and end line number.\nClass SqlParseException; // SqlParseException defines a checked exception corresponding to SqlParser.\nClass SqlParserUtil.MalformedUnicodeEscape; // Thrown by SqlParserUtil.replaceEscapedChars(String).\n", "des": "Provides a SQL parser."}
{"index": 3260, "repo": "opencms-core-15.0", "code": "package generic;\n\nClass CmsHistoryDriver; // Generic (ANSI-SQL) database server implementation of the history driver methods.\nClass CmsProjectDriver; // Generic (ANSI-SQL) implementation of the project driver methods.\nClass CmsPublishHistoryCleanupFilter; // Filter object that describes what to clean up in a publish history cleanup operation.\nClass CmsSqlManager; // Generic (ANSI-SQL) implementation of the SQL manager.\nClass CmsSubscriptionDriver; // Generic implementation of the user tracking and subscription driver interface.\nClass CmsUserDriver; // Generic (ANSI-SQL) database server implementation of the user driver methods.\nClass CmsUserQueryBuilder; // Default implementation of the user query builder.\nClass CmsVfsDriver; // Generic (ANSI-SQL) database server implementation of the VFS driver methods.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsPublishHistoryCleanupFilter.Mode; // Mode of operation for publish history cleanup.\n", "des": "Generic (ANSI-SQL) implementation of the OpenCms database connector."}
{"index": 3563, "repo": "guava-32.1.1-jre", "code": "package reflect;\n\nInterface TypeToInstanceMap<B extends @Nullable java.lang.Object>; // A map, each entry of which maps a TypeToken to an instance of that type.\nClass AbstractInvocationHandler; // Abstract implementation of InvocationHandler that handles Object.equals(java.lang.Object), Object.hashCode() and Object.toString().\nClass ClassPath; // Scans the source of a ClassLoader and finds all loadable classes and resources.\nClass ClassPath.ClassInfo; // Represents a class that can be loaded through ClassPath.ClassInfo.load().\nClass ClassPath.ResourceInfo; // Represents a class path resource that can be either a class file or any other resource file loadable from the class path.\nClass ImmutableTypeToInstanceMap<B>; // A type-to-instance map backed by an ImmutableMap.\nClass ImmutableTypeToInstanceMap.Builder<B>; // A builder for creating immutable type-to-instance maps.\nClass Invokable<T,​R>; // Wrapper around either a Method or a Constructor.\nClass MutableTypeToInstanceMap<B extends @Nullable java.lang.Object>; // A mutable type-to-instance map.\nClass Parameter; // Represents a method or constructor parameter.\nClass Reflection; // Static utilities relating to Java reflection.\nClass TypeParameter<T>; // Captures a free type variable that can be used in TypeToken.where(com.google.common.reflect.TypeParameter<X>, com.google.common.reflect.TypeToken<X>).\nClass TypeResolver; // An object of this class encapsulates type mappings from type variables.\nClass TypeToken<T>; // A Type with generics.\n", "des": "Utilities for reflection."}
{"index": 188, "repo": "ignite-core-2.15.0", "code": "package ssl;\n\nClass BlockingSslHandler;\nClass GridNioSslFilter; // Implementation of SSL filter using SSLEngine\nClass GridSslMeta;\n", "des": "Implementation of Secure Socket Layer filter for NIO server based on SSLEngine class."}
{"index": 2577, "repo": "camel-api-4.0.0-RC1", "code": "package cluster;\n\npublic interface CamelClusterEventListener; // Marker interface for cluster events\npublic static interface CamelClusterEventListener.Leadership extends CamelClusterEventListener;\npublic static interface CamelClusterEventListener.Membership extends CamelClusterEventListener;\npublic interface CamelClusterMember extends HasId;\npublic interface CamelClusterService extends Service, CamelContextAware, IdAware, Ordered;\n@FunctionalInterface public static interface CamelClusterService.Selector;\npublic interface CamelClusterView extends Service, CamelContextAware; // Represents the View of the cluster at some given period of time.\npublic interface CamelPreemptiveClusterService extends CamelClusterService; // A CamelPreemptiveClusterService is a CamelClusterService that manages CamelPreemptiveClusterViews.\npublic interface CamelPreemptiveClusterView extends CamelClusterView; // A CamelPreemptiveClusterView is a CamelClusterView that can be externally disabled by another controller.\n", "des": "Camel Cluster support"}
{"index": 265, "repo": "nutch-2.4", "code": "package basic;\n\nClass BasicIndexingFilter; // Adds basic searchable fields to a document.\n", "des": "A basic indexing plugin, adds basic fields: url, host, title, content, etc."}
{"index": 2208, "repo": "spring-data-commons-3.1.2", "code": "package callback;\n\n@Reflective(PublicMethodReflectiveProcessor.class) public interface EntityCallback<T>; // Marker interface for entity callbacks to be implemented in specific callback subtypes.\npublic interface EntityCallbacks; // Interface to be implemented by objects that can manage a number of EntityCallback objects and invoke these with a specific entity.\npublic interface ReactiveEntityCallbacks; // Interface to be implemented by objects that can manage a number of EntityCallback objects and invoke these with a specific entity.\n", "des": "Mapping callback API and implementation base classes."}
{"index": 68, "repo": "ignite-core-2.15.0", "code": "package cache;\n\nInterface CacheCheckpointSpiMBean; // Management bean that provides general administrative and configuration information about cache checkpoint SPI.\nClass CacheCheckpointSpi; // This class defines cache-based implementation for checkpoint SPI.\n", "des": "Contains cache-based implementation for checkpoint SPI."}
{"index": 243, "repo": "nutch-2.4", "code": "package file;\n\nClass File; // This class is a protocol plugin used for file: scheme.\nClass FileResponse; // FileResponse.java mimics file replies as http response.\nClass FileError; // Thrown for File error codes.\nClass FileException;\n", "des": "Protocol plugin which supports retrieving local file resources."}
{"index": 1308, "repo": "groovy-all-4.0.13", "code": "package servlet;\n\npublic abstract class AbstractHttpServlet extends HttpServlet implements ResourceConnector; // A base class dealing with common HTTP servlet API housekeeping aspects.\npublic class GroovyServlet extends AbstractHttpServlet; // This servlet will run Groovy scripts as Groovlets.\npublic class ServletBinding extends Binding; // Servlet-specific binding extension to lazy load the writer or the output stream from the response.\npublic class ServletCategory extends Object; // Servlet support.\npublic class TemplateServlet extends AbstractHttpServlet; // A generic servlet for serving (mostly HTML) templates.\n", "des": "Support for Groovlets which are Servlets written as a simple Groovy script."}
{"index": 3213, "repo": "commons-configuration2-2.9.0", "code": "package beanutils;\n\nInterface BeanCreationContext; // Definition of a context object storing all required information for the creation of a bean.\nInterface BeanDeclaration; // Definition of an interface for declaring a bean in a configuration file.\nInterface BeanFactory; // Definition of an interface for bean factories.\nClass BeanHelper; // A helper class for creating bean instances that are defined in configuration files.\nClass CombinedBeanDeclaration; // A special implementation of the BeanDeclaration interface which allows combining multiple BeanDeclaration objects.\nClass ConfigurationDynaBean; // The ConfigurationDynaBean dynamically reads and writes configurations properties from a wrapped configuration-collection Configuration instance.\nClass ConfigurationDynaClass; // The ConfigurationDynaClass dynamically determines properties for a ConfigurationDynaBean from a wrapped configuration-collection Configuration instance.\nClass ConstructorArg; // A class representing an argument for a constructor invocation to be used by a BeanDeclaration.\nClass DefaultBeanFactory; // The default implementation of the BeanFactory interface.\nClass XMLBeanDeclaration; // An implementation of the BeanDeclaration interface that is suitable for XML configuration files.\n", "des": "In this package a Configuration implementation can be found that implements the DynaBean interface."}
{"index": 731, "repo": "spring-data-solr-4.3.15", "code": "package solr;\n\npackage solr.core; // Provides the classes necessary for Solr support.\npackage solr.repository; // Solr specific repository implementation.\npackage solr.server; // SolrClient configuration and spring integration.\nClass VersionUtil; // Version util uses ClassUtils.isPresent(String, ClassLoader) to determine presence of certain classes that are unique to some libraries, which allows to en-/disable some of the features in eg.\nClass UncategorizedSolrException; // SolrClient threw an exception that could not be mapped.\n", "des": "Root stuff used through out Spring Data for Apache Solr."}
{"index": 1070, "repo": "hadoop-yarn-common-3.3.6", "code": "package api;\n\npackage api.impl; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\nClass AppAdminClient; // Client for managing applications.\nClass TimelineClient; // A client library that can be used to post some information in terms of a number of conceptual entities.\nClass TimelineReaderClient; // A client library that can be used to get Timeline Entities associated with application, application attempt or containers.\nClass TimelineV2Client; // A client library that can be used to post some information in terms of a number of conceptual entities.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 445, "repo": "lucene-analyzers-icu-8.11.2", "code": "package tokenattributes;\n\nInterface ScriptAttribute; // This attribute stores the UTR #24 script value for a token of text.\nClass ScriptAttributeImpl; // Implementation of ScriptAttribute that stores the script as an integer.\n", "des": "Additional ICU-specific Attributes for text analysis."}
{"index": 716, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package tuple;\n\nClass Tuple; // A Tuple is an immutable Collection of objects, each of which can be of an arbitrary type.\nClass Tuple1<T1>; // A tuple that holds a single value.\nClass Tuple2<T1,T2>; // A tuple that holds two values.\nClass Tuples; // The Tuple factory.\n", "des": "Tuples provide a type-safe way to specify multiple parameters."}
{"index": 1248, "repo": "spring-integration-smb-6.1.2", "code": "package inbound;\n\npublic class SmbInboundFileSynchronizer extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<jcifs.smb.SmbFile>; // An implementation of AbstractInboundFileSynchronizer for SMB.\npublic class SmbInboundFileSynchronizingMessageSource extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizingMessageSource<jcifs.smb.SmbFile>; // A MessageSource implementation for SMB.\npublic class SmbStreamingMessageSource extends org.springframework.integration.file.remote.AbstractRemoteFileStreamingMessageSource<jcifs.smb.SmbFile>; // Message source for streaming SMB remote file contents.\n", "des": "Inbound Channel Adapters implementations for SMB protocol."}
{"index": 2053, "repo": "spring-ws-security-4.0.5", "code": "package callback;\n\npublic abstract class AbstractCallbackHandler extends Object implements CallbackHandler; // Abstract implementation of a CallbackHandler.\npublic class CallbackHandlerChain extends AbstractCallbackHandler; // Represents a chain of CallbackHandlers.\npublic class CleanupCallback extends Object implements Callback, Serializable; // Underlying security services instantiate and pass a CleanupCallback to the handle method of a CallbackHandler to clean up security state.\n", "des": "Contains generic CallbackHandler implementations."}
{"index": 1455, "repo": "spring-data-redis-3.1.2", "code": "package query;\n\npublic abstract class QueryUtils extends Object; // Utilities for SortQuery implementations.\npublic interface SortCriterion<K>; // Internal interface part of the Sort DSL.\npublic interface SortQuery<K>; // High-level abstraction over a Redis SORT (generified equivalent of SortParameters).\npublic class SortQueryBuilder<K> extends Object; // Simple builder class for constructing SortQuery.\n", "des": "Query package for Redis template."}
{"index": 498, "repo": "beam-sdks-java-core-2.49.0", "code": "package join;\n\nClass CoGbkResult; // A row result of a CoGroupByKey.\nClass CoGbkResult.CoGbkResultCoder; // A Coder for CoGbkResults.\nClass CoGbkResultSchema; // A schema for the results of a CoGroupByKey.\nClass CoGroupByKey<K>; // A PTransform that performs a CoGroupByKey on a tuple of tables.\nClass KeyedPCollectionTuple<K>; // An immutable tuple of keyed PCollections with key type K.\nClass KeyedPCollectionTuple.TaggedKeyedPCollection<K,V>; // A utility class to help ensure coherence of tag and input PCollection types.\nClass RawUnionValue; // This corresponds to an integer union tag and value.\nClass UnionCoder; // A UnionCoder encodes RawUnionValues.\n", "des": "Defines the CoGroupByKey transform for joining multiple PCollections."}
{"index": 820, "repo": "commons-rng-simple-1.5", "code": "package simple;\n\npackage simple.internal; // Utilities for seed conversion.\nClass JDKRandomBridge; // Subclass of Random that delegates to a RestorableUniformRandomProvider instance but will otherwise rely on the base class for generating all the random types.\nClass JDKRandomWrapper; // Wraps a Random instance to implement UniformRandomProvider.\nClass ThreadLocalRandomSource; // This class provides a thread-local UniformRandomProvider.\nEnum RandomSource; // This class provides the API for creating generators of random numbers.\n", "des": "This package provides factory methods by which low-level classes implemented in module \"commons-rng-core\" are instantiated."}
{"index": 1509, "repo": "spring-context-6.0.11", "code": "package aot;\n\npublic abstract class AbstractAotProcessor<T> extends Object; // Abstract base class for filesystem-based ahead-of-time (AOT) processing.\npublic static final class AbstractAotProcessor.Settings extends Object; // Common settings for AOT processors.\npublic static final class AbstractAotProcessor.Settings.Builder extends Object; // Fluent builder API for AbstractAotProcessor.Settings.\n@FunctionalInterface public interface AotApplicationContextInitializer<C extends ConfigurableApplicationContext> extends ApplicationContextInitializer<C>; // Specialized ApplicationContextInitializer used to initialize a ConfigurableApplicationContext using artifacts that were generated ahead-of-time.\npublic class ApplicationContextAotGenerator extends Object; // Process an ApplicationContext and its BeanFactory to generate code that represents the state of the bean factory, as well as the necessary hints that can be used at runtime in a constrained environment.\npublic abstract class ContextAotProcessor extends AbstractAotProcessor<org.springframework.javapoet.ClassName>; // Filesystem-based ahead-of-time (AOT) processing base implementation.\n", "des": "AOT support for application contexts."}
{"index": 633, "repo": "freemarker-2.3.32", "code": "package utility;\n\nInterface DateUtil.CalendarFieldsToDateConverter; // Used internally by DateUtil; don't use its implementations for anything else.\nInterface DateUtil.DateToISO8601CalendarFactory; // Used internally by DateUtil; don't use its implementations for anything else.\nInterface ObjectFactory<T>; // Used for the trivial cases of the factory pattern.\nInterface ObjectWrapperWithAPISupport; // Experimental - subject to change: Implemented by ObjectWrapper-s to help TemplateModel-s to implement the someValue?api operation.\nInterface RichObjectWrapper; // Experimental - subject to change: Union of the interfaces that a typical feature rich ObjectWrapper is expected to implement.\nInterface WriteProtectable; // Implemented by objects that can be made permanently read-only.\nClass CaptureOutput; // Use block-assignments instead, like <assign x>...</assign>.\nClass ClassUtil;\nClass Collections12; // Not needed anymore, as FreeMarker now requires higher than Java 1.3\nClass CollectionUtils;\nClass Constants; // Frequently used constant TemplateModel values.\nClass DateUtil; // Date and time related utilities.\nClass DateUtil.TrivialCalendarFieldsToDateConverter; // Non-thread-safe implementation that hard-references a calendar internally.\nClass DateUtil.TrivialDateToISO8601CalendarFactory; // Non-thread-safe factory that hard-references a calendar internally.\nClass DeepUnwrap; // Utility methods for unwrapping TemplateModel-s.\nClass DOMNodeModel; // Use NodeModel instead\nClass Execute; // Gives FreeMarker the the ability to execute external commands.\nClass HtmlEscape; // Performs an HTML escape of a given template fragment.\nClass JythonRuntime; // A crude first pass at an embeddable Jython interpreter\nClass NormalizeNewlines; // Transformer that supports FreeMarker legacy behavior: all newlines appearing within the transformed area will be transformed into the platform's default newline.\nClass NullWriter; // A Writer that simply drops what it gets.\nClass NumberUtil; // Number- and math-related utilities.\nClass ObjectConstructor; // An object that you can make available in a template to instantiate arbitrary beans-wrapped objects in a template.\nClass OptimizerUtil;\nClass SecurityUtilities;\n", "des": "Various classes used by core FreeMarker code but might be useful outside of it too."}
{"index": 3693, "repo": "solr-core-9.3.0", "code": "package grouping;\n\npackage grouping.collector; // Grouping related Collectors\npackage grouping.distributed; // Internal classes used to implement distributed result grouping\npackage grouping.endresulttransformer; // APIs and classes for transforming result grouping results into the appropriate response format\nInterface Command<T>; // Defines a grouping command.\nClass CommandHandler; // Responsible for executing a search with a number of Command instances.\nClass CommandHandler.Builder;\nClass GroupingSpecification; // Encapsulates the grouping options like fields group sort and more specified by clients.\n", "des": "APIs and classes for implementing result grouping"}
{"index": 2918, "repo": "groovy-4.0.13", "code": "package inspect;\n\npublic class Inspector extends Object; // The Inspector provides a unified access to an object's information that can be determined by introspection.\npublic static class Inspector.MemberComparator extends Object implements Comparator<Object>, Serializable;\npublic static class Inspector.MemberComparatorWithValue extends Object implements Comparator<Object>, Serializable;\n", "des": "Classes for inspecting object properties through introspection."}
{"index": 343, "repo": "hadoop-hdfs-3.3.6", "code": "package web;\n\nClass DatanodeHttpServer; // Data node HTTP Server Class.\nClass DatanodeHttpServer.MapBasedFilterConfig; // Since the DataNode HTTP server is not implemented in terms of the servlet API, it takes some extra effort to obtain an instance of the filter.\n", "des": "Data node HTTP classes."}
{"index": 2483, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package task;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class,org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration.class,org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.core.instrument.binder.jvm.ExecutorServiceMetrics.class) @ConditionalOnBean({java.util.concurrent.Executor.class,io.micrometer.core.instrument.MeterRegistry.class}) public class TaskExecutorMetricsAutoConfiguration extends Object; // Auto-configuration for metrics on all available task executors and task schedulers.\n", "des": "Auto-configuration for task execution and scheduling metrics."}
{"index": 1215, "repo": "commons-math3-3.6.1", "code": "package transform;\n\nInterface RealTransformer; // Interface for one-dimensional data sets transformations producing real results.\nClass FastCosineTransformer; // Implements the Fast Cosine Transform for transformation of one-dimensional real data sets.\nClass FastFourierTransformer; // Implements the Fast Fourier Transform for transformation of one-dimensional real or complex data sets.\nClass FastHadamardTransformer; // Implements the Fast Hadamard Transform (FHT).\nClass FastSineTransformer; // Implements the Fast Sine Transform for transformation of one-dimensional real data sets.\nClass TransformUtils; // Useful functions for the implementation of various transforms.\nEnum DctNormalization; // This enumeration defines the various types of normalizations that can be applied to discrete cosine transforms (DCT).\nEnum DftNormalization; // This enumeration defines the various types of normalizations that can be applied to discrete Fourier transforms (DFT).\nEnum DstNormalization; // This enumeration defines the various types of normalizations that can be applied to discrete sine transforms (DST).\nEnum TransformType; // This enumeration defines the type of transform which is to be computed.\n", "des": "Implementations of transform methods, including Fast Fourier transforms."}
{"index": 1572, "repo": "spring-restdocs-core-3.0.0", "code": "package templates;\n\npackage templates.mustache; // JMustache-based implementation of the template API.\npublic class StandardTemplateResourceResolver extends Object implements TemplateResourceResolver; // Standard implementation of TemplateResourceResolver.\npublic interface Template; // A compiled Template that can be rendered to a String.\npublic interface TemplateEngine; // A TemplateEngine is used to render documentation snippets.\npublic interface TemplateFormat; // A TemplateFormat provides information about a particular template format, such as Asciidoctor or Markdown.\npublic abstract class TemplateFormats extends Object; // An enumeration of the built-in formats for which templates are provided.\npublic interface TemplateResourceResolver; // A TemplateResourceResolver is responsible for resolving a name for a template into a Resource from which the template can be read.\n", "des": "Template API used to render documentation snippets."}
{"index": 1111, "repo": "fontbox-3.0.0-beta1", "code": "package util;\n\npackage util.autodetect; // This package contains utility classes to manage local fonts.\nClass BoundingBox; // This is an implementation of a bounding box.\n", "des": "This package contains utility classes used by various font types."}
{"index": 910, "repo": "commons-compress-1.23.0", "code": "package jar;\n\nClass JarArchiveEntry;\nClass JarArchiveInputStream; // Implements an input stream that can read entries from jar files.\nClass JarArchiveOutputStream; // Subclass that adds a special extra field to the very first entry which allows the created archive to be used as an executable jar on Solaris.\n", "des": "Provides stream classes for reading and writing archives using the ZIP format with some extensions for the special case of JAR archives."}
{"index": 1777, "repo": "slf4j-api-2.0.7", "code": "package helpers;\n\npublic abstract class AbstractLogger extends Object implements Logger, Serializable; // An abstract implementation which delegates actual logging work to the AbstractLogger.handleNormalizedLoggingCall(Level, Marker, String, Object[], Throwable) method.\npublic class BasicMarker extends Object implements Marker; // A simple implementation of the Marker interface.\npublic class BasicMarkerFactory extends Object implements IMarkerFactory; // An almost trivial implementation of the IMarkerFactory interface which creates BasicMarker instances.\npublic class BasicMDCAdapter extends Object implements MDCAdapter; // Basic MDC implementation, which can be used with logging systems that lack out-of-the-box MDC support.\n@Documented @Target(METHOD) @Retention(RUNTIME) public @interface CheckReturnValue; // Used to annotate methods in the LoggingEventBuilder interface which return an instance of LoggingEventBuilder (usually as this).\npublic class FormattingTuple extends Object; // Holds the results of formatting done by MessageFormatter.\npublic abstract class LegacyAbstractLogger extends AbstractLogger; // Provides minimal default implementations for LegacyAbstractLogger.isTraceEnabled(Marker), LegacyAbstractLogger.isDebugEnabled(Marker) and other similar methods.\npublic abstract class MarkerIgnoringBase extends Object implements Logger;\npublic final class MessageFormatter extends Object; // Formats messages according to very simple substitution rules.\npublic class NOP_FallbackServiceProvider extends Object implements SLF4JServiceProvider;\npublic class NOPLogger extends Object implements Logger; // A direct NOP (no operation) implementation of Logger.\npublic class NOPLoggerFactory extends Object implements ILoggerFactory; // NOPLoggerFactory is a trivial implementation of ILoggerFactory which always returns the unique instance of NOPLogger.\npublic class NOPMDCAdapter extends Object implements MDCAdapter; // This adapter is an empty implementation of the MDCAdapter interface.\npublic class NormalizedParameters extends Object; // Holds normalized call parameters.\npublic class SubstituteLogger extends Object implements Logger; // A logger implementation which logs via a delegate logger.\npublic class SubstituteLoggerFactory extends Object implements ILoggerFactory; // SubstituteLoggerFactory manages instances of SubstituteLogger.\npublic class SubstituteServiceProvider extends Object implements SLF4JServiceProvider;\npublic class ThreadLocalMapOfStacks extends Object; // A simple implementation of ThreadLocal backed Map containing values of type Deque.\n", "des": "Helper classes."}
{"index": 3009, "repo": "spring-web-6.0.11", "code": "package feed;\n\npublic abstract class AbstractWireFeedHttpMessageConverter<T extends com.rometools.rome.feed.WireFeed> extends AbstractHttpMessageConverter<T>; // Abstract base class for Atom and RSS Feed message converters, using the ROME tools project.\npublic class AtomFeedHttpMessageConverter extends AbstractWireFeedHttpMessageConverter<com.rometools.rome.feed.atom.Feed>; // Implementation of HttpMessageConverter that can read and write Atom feeds.\npublic class RssChannelHttpMessageConverter extends AbstractWireFeedHttpMessageConverter<com.rometools.rome.feed.rss.Channel>; // Implementation of HttpMessageConverter that can read and write RSS feeds.\n", "des": "Provides HttpMessageConverter implementations for handling Atom and RSS feeds."}
{"index": 3708, "repo": "solr-core-9.3.0", "code": "package cache;\n\nClass HttpCacheHeaderUtil;\nEnum Method;\n", "des": "Caching related classes used in the Solr HTTP API"}
{"index": 418, "repo": "hadoop-azure-3.3.6", "code": "package oauth2;\n\nInterface IdentityTransformerInterface; // IdentityTransformerInterface defines the set of translation operations that any identity transformer implementation must provide.\nClass AccessTokenProvider; // Returns an Azure Active Directory token when requested.\nClass AzureADAuthenticator; // This class provides convenience methods to obtain AAD tokens.\nClass AzureADToken; // Object representing the AAD access token to use when making HTTP requests to Azure Data Lake Storage.\nClass ClientCredsTokenProvider; // Provides tokens based on client credentials.\nClass CustomTokenProviderAdapter; // Provides tokens based on custom implementation, following the Adapter Design Pattern.\nClass IdentityTransformer; // Perform transformation for Azure Active Directory identities used in owner, group and acls.\nClass LocalIdentityTransformer; // A subclass of IdentityTransformer that translates the AAD to Local identity using IdentityHandler.\nClass MsiTokenProvider; // Provides tokens based on Azure VM's Managed Service Identity.\nClass QueryParams; // Utilities class http query parameters.\nClass RefreshTokenBasedTokenProvider; // Provides tokens based on refresh token.\nClass UserPasswordTokenProvider; // Provides tokens based on username and password.\nClass AzureADAuthenticator.HttpException; // This exception class contains the http error code, requestId and error message, it is thrown when AzureADAuthenticator failed to get the Azure Active Directory token.\nClass AzureADAuthenticator.UnexpectedResponseException; // An unexpected HTTP response was raised, such as text coming back from what should be an OAuth endpoint.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 2331, "repo": "spring-boot-3.1.1", "code": "package init;\n\npackage init.dependency; // Infrastructure for establishing database initialization bean dependencies.\npublic abstract class AbstractScriptDatabaseInitializer extends Object implements org.springframework.context.ResourceLoaderAware, org.springframework.beans.factory.InitializingBean; // Base class for an InitializingBean that performs SQL database initialization using schema (DDL) and data (DML) scripts.\npublic static class AbstractScriptDatabaseInitializer.Scripts extends Object implements Iterable<org.springframework.core.io.Resource>; // Scripts to be used to initialize the database.\npublic enum DatabaseInitializationMode extends Enum<DatabaseInitializationMode>; // Supported database initialization modes.\npublic class DatabaseInitializationSettings extends Object; // Settings for initializing an SQL database.\n", "des": "Support for initialization of an SQL database."}
{"index": 1803, "repo": "spring-aop-6.0.11", "code": "package config;\n\npublic abstract class AbstractInterceptorDrivenBeanDefinitionDecorator extends Object implements org.springframework.beans.factory.xml.BeanDefinitionDecorator; // Base implementation for BeanDefinitionDecorators wishing to add an interceptor to the resulting bean.\npublic class AdviceEntry extends Object implements org.springframework.beans.factory.parsing.ParseState.Entry; // ParseState entry representing an advice element.\npublic class AdvisorComponentDefinition extends org.springframework.beans.factory.parsing.AbstractComponentDefinition; // ComponentDefinition that bridges the gap between the advisor bean definition configured by the <aop:advisor> tag and the component definition infrastructure.\npublic class AdvisorEntry extends Object implements org.springframework.beans.factory.parsing.ParseState.Entry; // ParseState entry representing an advisor.\npublic abstract class AopConfigUtils extends Object; // Utility class for handling registration of AOP auto-proxy creators.\npublic class AopNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for the aop namespace.\npublic abstract class AopNamespaceUtils extends Object; // Utility class for handling registration of auto-proxy creators used internally by the 'aop' namespace tags.\npublic class AspectComponentDefinition extends org.springframework.beans.factory.parsing.CompositeComponentDefinition; // ComponentDefinition that holds an aspect definition, including its nested pointcuts.\npublic class AspectEntry extends Object implements org.springframework.beans.factory.parsing.ParseState.Entry; // ParseState entry representing an aspect.\npublic class MethodLocatingFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Method>, org.springframework.beans.factory.BeanFactoryAware; // FactoryBean implementation that locates a Method on a specified bean.\npublic class PointcutComponentDefinition extends org.springframework.beans.factory.parsing.AbstractComponentDefinition; // ComponentDefinition implementation that holds a pointcut definition.\npublic class PointcutEntry extends Object implements org.springframework.beans.factory.parsing.ParseState.Entry; // ParseState entry representing a pointcut.\n", "des": "Support package for declarative AOP configuration, with XML schema being the primary configuration format."}
{"index": 1233, "repo": "spring-hateoas-2.1.2", "code": "package collectionjson;\n\npublic class CollectionJsonLinkDiscoverer extends JsonPathLinkDiscoverer; // LinkDiscoverer implementation based on JSON Collection link structure.\npublic class Jackson2CollectionJsonModule extends com.fasterxml.jackson.databind.module.SimpleModule; // Jackson 2 module implementation to render CollectionModel, EntityModel, and RepresentationModel instances in Collection+JSON compatible JSON.\n", "des": "Value objects to build Collection+JSON representations."}
{"index": 2854, "repo": "spring-integration-core-6.1.2", "code": "package dispatcher;\n\npublic abstract class AbstractDispatcher extends Object implements MessageDispatcher; // Base class for MessageDispatcher implementations.\npublic class AggregateMessageDeliveryException extends org.springframework.messaging.MessageDeliveryException; // An Exception that encapsulates an aggregated group of Exceptions for use by dispatchers that may try multiple handler invocations within a single dispatch operation.\npublic class BroadcastingDispatcher extends AbstractDispatcher implements org.springframework.beans.factory.BeanFactoryAware; // A broadcasting dispatcher implementation.\n@FunctionalInterface public interface LoadBalancingStrategy; // Strategy for determining the iteration order of a MessageHandler list.\npublic interface MessageDispatcher; // Strategy interface for dispatching messages to handlers.\n@FunctionalInterface public interface MessageHandlingTaskDecorator; // The strategy to decorate MessageHandlingRunnable tasks to be used with the Executor.\npublic class PartitionedDispatcher extends AbstractDispatcher; // An AbstractDispatcher implementation for distributing messages to dedicated threads according to the key determined by the provided function against the message to dispatch.\npublic class RoundRobinLoadBalancingStrategy extends Object implements LoadBalancingStrategy; // Round-robin implementation of LoadBalancingStrategy.\npublic class UnicastingDispatcher extends AbstractDispatcher; // Implementation of MessageDispatcher that will attempt to send a Message to at most one of its handlers.\n", "des": "Provides classes related to dispatching messages."}
{"index": 2813, "repo": "spring-integration-ip-6.1.2", "code": "package connection;\n\npublic abstract class AbstractClientConnectionFactory extends AbstractConnectionFactory; // Abstract class for client connection factories; client connection factories establish outgoing connections.\npublic abstract class AbstractConnectionFactory extends org.springframework.integration.context.IntegrationObjectSupport implements ConnectionFactory, org.springframework.context.ApplicationEventPublisherAware; // Base class for all connection factories.\npublic abstract class AbstractServerConnectionFactory extends AbstractConnectionFactory implements TcpServerConnectionFactory, org.springframework.scheduling.SchedulingAwareRunnable, org.springframework.integration.context.OrderlyShutdownCapable; // Base class for all server connection factories.\npublic abstract class AbstractTcpConnectionSupport extends Object; // Base class for TCP Connection Support implementations.\npublic class CachingClientConnectionFactory extends AbstractClientConnectionFactory implements org.springframework.beans.factory.DisposableBean; // Connection factory that caches connections from the underlying target factory.\npublic interface ClientModeCapable; // Edpoints implementing this interface are capable of running in client-mode.\npublic class ClientModeConnectionManager extends Object implements Runnable; // Intended to be run on a schedule, simply gets the connection from a client connection factory each time it is run.\npublic interface ConnectionFactory extends org.springframework.integration.support.management.ManageableLifecycle; // A factory used to create TcpConnection objects.\npublic class DefaultTcpNetConnectionSupport extends AbstractTcpConnectionSupport implements TcpNetConnectionSupport; // Default implementation of TcpNetConnectionSupport.\npublic class DefaultTcpNetSocketFactorySupport extends Object implements TcpSocketFactorySupport; // Implementation of TcpSocketFactorySupport for non-SSL sockets ServerSocket and Socket.\npublic class DefaultTcpNetSSLSocketFactorySupport extends Object implements TcpSocketFactorySupport; // Implementation of TcpSocketFactorySupport for SSL sockets SSLServerSocket and SSLSocket.\npublic class DefaultTcpNioConnectionSupport extends AbstractTcpConnectionSupport implements TcpNioConnectionSupport; // Implementation of TcpNioConnectionSupport for non-SSL NIO connections.\npublic class DefaultTcpNioSSLConnectionSupport extends AbstractTcpConnectionSupport implements TcpNioConnectionSupport; // Implementation of TcpNioConnectionSupport for SSL NIO connections.\npublic class DefaultTcpSocketSupport extends Object implements TcpSocketSupport; // Default implementation of TcpSocketSupport; makes no changes to sockets.\n", "des": "All things related to tcp connections - client and server factories; listener and sender interfaces."}
{"index": 1942, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jackson;\n\n@FunctionalInterface public interface Jackson2ObjectMapperBuilderCustomizer; // Callback interface that can be implemented by beans wishing to further customize the ObjectMapper through Jackson2ObjectMapperBuilder retaining its default auto-configuration.\n@AutoConfiguration @ConditionalOnClass(com.fasterxml.jackson.databind.ObjectMapper.class) public class JacksonAutoConfiguration extends Object; // Auto configuration for Jackson.\n@ConfigurationProperties(prefix=\"spring.jackson\") public class JacksonProperties extends Object; // Configuration properties to configure Jackson.\npublic static enum JacksonProperties.ConstructorDetectorStrategy extends Enum<JacksonProperties.ConstructorDetectorStrategy>;\n", "des": "Auto-configuration for Jackson."}
{"index": 3817, "repo": "lucene-analysis-common-9.7.0", "code": "package sv;\n\nClass SwedishAnalyzer; // Analyzer for Swedish.\nClass SwedishLightStemFilter; // A TokenFilter that applies SwedishLightStemmer to stem Swedish words.\nClass SwedishLightStemFilterFactory; // Factory for SwedishLightStemFilter.\nClass SwedishLightStemmer; // Light Stemmer for Swedish.\nClass SwedishMinimalStemFilter; // A TokenFilter that applies SwedishMinimalStemmer to stem Swedish words.\nClass SwedishMinimalStemFilterFactory; // Factory for SwedishMinimalStemFilter.\nClass SwedishMinimalStemmer; // Minimal Stemmer for Swedish.\n", "des": "Analyzer for Swedish."}
{"index": 2923, "repo": "groovy-4.0.13", "code": "package util;\n\npublic abstract class AbstractFactory extends Object implements Factory;\npublic interface BufferedIterator<T> extends Iterator<T>; // An iterator that allows examining the next element without consuming it.\npublic abstract class BuilderSupport extends GroovyObjectSupport; // Base class for creating arbitrary nested trees of objects or events.\npublic class CharsetToolkit extends Object; // Utility class to guess the encoding of a given text file.\npublic class ClosureComparator<T> extends Object implements Comparator<T>, Serializable; // A Comparator which uses a closure to compare 2 values being equal\npublic class ConfigObject extends GroovyObjectSupport implements Writable, Map, Cloneable; // A ConfigObject at a simple level is a Map that creates configuration entries (other ConfigObjects) when referencing them.\npublic abstract class DelegatingScript extends Script; // Script that performs method invocations and property access like Closure does.\npublic class Eval extends Object; // Allow easy integration from Groovy into Java through convenience methods.\npublic class Expando extends GroovyObjectSupport; // Represents a dynamically expandable bean.\npublic interface Factory;\npublic abstract class FactoryBuilderSupport extends Binding; // Mix of BuilderSupport and SwingBuilder's factory support.\npublic class GroovyCollections extends Object; // A Collections utility class\npublic class GroovyScriptEngine extends Object implements ResourceConnector; // Specific script engine able to reload modified scripts as well as dealing properly with dependent scripts.\npublic interface IFileNameFinder;\npublic class IndentPrinter extends Object; // A helper class for printing indented text.\npublic class MapEntry extends Object implements Map.Entry; // A Map.Entry implementation.\npublic class Node extends Object implements Serializable, Cloneable; // Represents an arbitrary tree node which can be used for structured metadata or any arbitrary XML-like tree.\npublic class NodeBuilder extends BuilderSupport; // A helper class for creating nested trees of Node objects for handling arbitrary data\npublic class NodeList extends ArrayList; // A List implementation which is returned by queries on a Node which provides some XPath like helper methods for GPath.\npublic class NodePrinter extends Object; // A helper class for creating nested trees of data\npublic class ObjectGraphBuilder extends FactoryBuilderSupport; // A builder for creating object graphs. Each node defines the class to be created and the property on its parent (if any) at the same time.\n", "des": "Various Groovy utilities for working with nodes, builders, logging, and other things."}
{"index": 454, "repo": "camel-core-3.0.0-RC1", "code": "package language;\n\nClass ConstantExpression; // To use a constant value in Camel expressions or predicates.\nClass ExchangePropertyExpression; // To use a Camel Exchange property in expressions or predicates.\nClass ExpressionDefinition; // A useful base class for an expression\nClass GroovyExpression; // To use Groovy scripts in Camel expressions or predicates.\nClass HeaderExpression; // To use a Camel Message header in expressions or predicates.\nClass Hl7TerserExpression; // To use HL7 terser scripts in Camel expressions or predicates.\nClass JsonPathExpression; // To use JsonPath in Camel expressions or predicates.\nClass LanguageExpression; // To use the specified language in Camel expressions or predicates.\nClass MethodCallExpression; // To use a Java bean (aka method call) in Camel expressions or predicates.\nClass MvelExpression; // To use MVEL scripts in Camel expressions or predicates.\nClass NamespaceAwareExpression; // A useful base class for any expression which may be namespace or XML content aware such as XPathExpression or XQueryExpression\nClass OgnlExpression; // To use OGNL scripts in Camel expressions or predicates.\nClass RefExpression; // Reference to an existing Camel expression or predicate, which is looked up from the Camel registry.\nClass SimpleExpression; // To use Camels built-in Simple language in Camel expressions or predicates.\nClass SpELExpression; // To use Spring Expression Language (SpEL) in Camel expressions or predicates.\nClass TokenizerExpression; // To use Camel message body or header with a tokenizer in Camel expressions or predicates.\nClass XMLTokenizerExpression; // To use Camel message body or header with a XML tokenizer in Camel expressions or predicates.\nClass XPathExpression; // To use XPath (XML) in Camel expressions or predicates.\nClass XQueryExpression; // To use XQuery (XML) in Camel expressions or predicates.\n", "des": "The JAXB POJOs for the Expression and Predicate plugins for the XML Configuration."}
{"index": 1058, "repo": "avro-1.11.2", "code": "package data;\n\nInterface ErrorBuilder<T>; // Interface for error builders\nInterface RecordBuilder<T>; // Interface for record builders\nClass Json; // Utilities for reading and writing arbitrary Json data in Avro format.\nClass Json.ObjectReader; // DatumReader for arbitrary Json data using the object model described in JsonProperties.\nClass Json.ObjectWriter; // DatumWriter for arbitrary Json data using the object model described in JsonProperties.\nClass RecordBuilderBase<T extends IndexedRecord>; // Abstract base class for RecordBuilder implementations.\nClass TimeConversions;\nClass TimeConversions.DateConversion;\nClass TimeConversions.LocalTimestampMicrosConversion;\nClass TimeConversions.LocalTimestampMillisConversion;\nClass TimeConversions.TimeMicrosConversion;\nClass TimeConversions.TimeMillisConversion;\nClass TimeConversions.TimestampMicrosConversion;\nClass TimeConversions.TimestampMillisConversion;\n", "des": "Interfaces and base classes shared by generic, specific and reflect."}
{"index": 1850, "repo": "spring-test-6.0.11", "code": "package util;\n\npublic abstract class TestContextResourceUtils extends Object; // Utility methods for working with resources within the Spring TestContext Framework.\npublic abstract class TestContextSpringFactoriesUtils extends Object; // Collection of utilities for working with SpringFactoriesLoader within the Spring TestContext Framework.\n", "des": "Common utilities used within the Spring TestContext Framework."}
{"index": 3669, "repo": "solr-core-9.3.0", "code": "package logging;\n\npackage logging.jul; // JUL based implementation of LogWatcher\npackage logging.log4j2; // LOG4J2 based implementation of LogWatcher\nClass CircularList<T>; // FIFO Circular List.\nClass DeprecationLog; // Utility to log a deprecation.\nClass ListenerConfig;\nClass LoggerInfo; // Wrapper class for Logger implementations\nClass LogWatcher<E>; // A Class to monitor Logging events and hold N events in memory\nClass LogWatcherConfig; // Defines the configuration of a LogWatcher\nClass MDCLoggingContext; // Set's per thread context info for logging.\nClass MDCSnapshot; // Takes a 'snapshot' of the current MDC context map which is restored on (auto) close.\n", "des": "APIs related to capturing log event info in the LoggingHandler"}
{"index": 905, "repo": "commons-compress-1.23.0", "code": "package ar;\n\nClass ArArchiveEntry; // Represents an archive entry in the \"ar\" format.\nClass ArArchiveInputStream; // Implements the \"ar\" archive format as an input stream.\nClass ArArchiveOutputStream; // Implements the \"ar\" archive format as an output stream.\n", "des": "Provides stream classes for reading and writing archives using the AR format."}
{"index": 3166, "repo": "gson-2.10.1", "code": "package gson;\n\npackage gson.annotations; // This package provides annotations that can be used with Gson.\npackage gson.reflect; // This package provides utility classes for finding type information for generic types.\npackage gson.stream; // This package provides classes for processing JSON in an efficient streaming way.\nInterface ExclusionStrategy; // A strategy (or policy) definition that is used to decide whether or not a field or class should be serialized or deserialized as part of the JSON output/input.\nInterface FieldNamingStrategy; // A mechanism for providing custom field naming in Gson.\nInterface InstanceCreator<T>; // This interface is implemented to create instances of a class that does not define a no-args constructor.\nInterface JsonDeserializationContext; // Context for deserialization that is passed to a custom deserializer during invocation of its JsonDeserializer.deserialize(JsonElement, Type, JsonDeserializationContext) method.\nInterface JsonDeserializer<T>; // Interface representing a custom deserializer for JSON.\nInterface JsonSerializationContext; // Context for serialization that is passed to a custom serializer during invocation of its JsonSerializer.serialize(Object, Type, JsonSerializationContext) method.\nInterface JsonSerializer<T>; // Interface representing a custom serializer for JSON.\nInterface ReflectionAccessFilter; // Filter for determining whether reflection based serialization and deserialization is allowed for a class.\nInterface ToNumberStrategy; // A strategy that is used to control how numbers should be deserialized for Object and Number when a concrete type of the deserialized number is unknown in advance.\nInterface TypeAdapterFactory; // Creates type adapters for set of related types.\nClass FieldAttributes; // A data object that stores attributes of a field.\nClass Gson; // This is the main class for using Gson.\nClass GsonBuilder; // Use this builder to construct a Gson instance when you need to set configuration options other than the default.\nClass JsonArray; // A class representing an array type in JSON.\nClass JsonElement; // A class representing an element of JSON.\nClass JsonNull; // A class representing a JSON null value.\nClass JsonObject; // A class representing an object type in Json.\nClass JsonParser; // A parser to parse JSON into a parse tree of JsonElements.\nClass JsonPrimitive; // A class representing a JSON primitive value.\nClass JsonStreamParser; // A streaming parser that allows reading of multiple JsonElements from the specified reader asynchronously.\n", "des": "This package provides the Gson class to convert Json to Java and vice-versa."}
{"index": 1892, "repo": "shiro-core-2.0.0-alpha-2", "code": "package eis;\n\npublic abstract class AbstractSessionDAO extends Object implements SessionDAO; // An abstract SessionDAO implementation that performs some sanity checks on session creation and reading and allows for pluggable Session ID generation strategies if desired.\npublic abstract class CachingSessionDAO extends AbstractSessionDAO implements org.apache.shiro.cache.CacheManagerAware; // An CachingSessionDAO is a SessionDAO that provides a transparent caching layer between the components that use it and the underlying EIS (Enterprise Information System) session backing store (for example, filesystem, database, enterprise grid/cloud, etc.).\npublic class EnterpriseCacheSessionDAO extends CachingSessionDAO; // SessionDAO implementation that relies on an enterprise caching product as the EIS system of record for all sessions.\npublic class JavaUuidSessionIdGenerator extends Object implements SessionIdGenerator; // SessionIdGenerator that generates String values of JDK UUID's as the session IDs.\npublic class MemorySessionDAO extends AbstractSessionDAO; // Simple memory-based implementation of the SessionDAO that stores all of its sessions in an in-memory ConcurrentMap.\npublic class RandomSessionIdGenerator extends Object implements SessionIdGenerator; // Generates session IDs by using a Random instance to generate random IDs.\npublic interface SessionDAO; // Data Access Object design pattern specification to enable Session access to an EIS (Enterprise Information System).\npublic interface SessionIdGenerator; // Interface allowing pluggable session ID generation strategies to be used with various SessionDAO implementations.\n", "des": "EIS (Enterprise Information System)-tier components that can perform CRUD operations for sessions using any EIS API."}
{"index": 1933, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package gson;\n\n@AutoConfiguration @ConditionalOnClass(com.google.gson.Gson.class) @EnableConfigurationProperties(GsonProperties.class) public class GsonAutoConfiguration extends Object; // Auto-configuration for Gson.\n@FunctionalInterface public interface GsonBuilderCustomizer; // Callback interface that can be implemented by beans wishing to further customize the Gson through GsonBuilder retaining its default auto-configuration.\n@ConfigurationProperties(prefix=\"spring.gson\") public class GsonProperties extends Object; // Configuration properties to configure Gson.\n", "des": "Auto-configuration for GSON."}
{"index": 3073, "repo": "spring-ws-core-4.0.5", "code": "package support;\n\npublic abstract class NamespaceUtils extends Object; // Helper class for handling @Namespace annotations.\npublic abstract class PayloadRootUtils extends Object; // Helper class for determining the root qualified name of a Web Service payload.\n", "des": "Provides helper classes for EndpointAdapter, EndpointInteceptor, and EndpointMapping implementations."}
{"index": 3059, "repo": "spring-ws-core-4.0.5", "code": "package context;\n\npublic abstract class AbstractMessageContext extends Object implements MessageContext; // Abstract base class for MessageContext instances.\npublic class DefaultMessageContext extends AbstractMessageContext; // Default implementation of MessageContext.\npublic interface MessageContext; // Context holder for message requests.\n", "des": "Contains the MessageContext interface and implementations thereof."}
{"index": 2219, "repo": "spring-data-commons-3.1.2", "code": "package history;\n\npackage history.support; // Value objects to implement core repository interfaces for historiography.\n@NoRepositoryBean public interface RevisionRepository<T,ID,N extends Number & Comparable<N>> extends Repository<T,ID>; // A repository which can access entities held in a variety of Revisions.\n", "des": "API for repositories using historiography."}
{"index": 458, "repo": "camel-core-3.0.0-RC1", "code": "package validator;\n\nClass CustomValidatorDefinition; // Represents a CustomValidator.\nClass EndpointValidatorDefinition; // Represents an endpoint Validator which leverages camel validator component such as Validator Component and Bean Validator Component to perform content validation.\nClass PredicateValidatorDefinition; // Represents a predicate Validator which leverages expression or predicates to perform content validation.\nClass ValidatorDefinition; // Represents a Validator which declaratively validates message content according to the input type declared by InputTypeDefinition and/or output type declared by OutputTypeDefinition.\nClass ValidatorsDefinition; // To configure validators.\n", "des": "The JAXB POJOs for the Transformers used to transform message contents according to declared data types inside components"}
{"index": 2642, "repo": "spring-integration-sftp-6.1.2", "code": "package server;\n\npublic abstract class ApacheMinaSftpEvent extends org.springframework.integration.file.remote.server.FileServerEvent; // ApplicationEvent generated from Apache Mina sftp events.\npublic class ApacheMinaSftpEventListener extends Object implements org.apache.sshd.sftp.server.SftpEventListener, org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // A listener for SFTP events emitted by an Apache Mina sshd/sftp server.\npublic class DirectoryCreatedEvent extends ApacheMinaSftpEvent; // An event emitted when a directory is created.\npublic class FileWrittenEvent extends ApacheMinaSftpEvent; // An event that is emitted when a file is written.\npublic class PathMovedEvent extends ApacheMinaSftpEvent; // An event emitted when a path is moved.\npublic class PathRemovedEvent extends ApacheMinaSftpEvent; // An event emitted when a file or directory is removed.\npublic class SessionClosedEvent extends ApacheMinaSftpEvent; // An event emitted when a session is closed.\npublic class SessionOpenedEvent extends ApacheMinaSftpEvent; // An event emitted when a session is opened.\n", "des": "Provides classes related to SFTP servers."}
{"index": 3146, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface AnyAttributeFetch; // Models the requested fetching of an \"any\" attribute.\nInterface AttributeFetch; // Models a Fetch that is specifically for an attribute.\nInterface BidirectionalEntityReference; // Represents the circular side of a bi-directional entity association.\nInterface CollectionAttributeFetch; // Models the requested fetching of a persistent collection attribute.\nInterface CollectionFetchableElement; // A collection element which is a FetchSource.\nInterface CollectionFetchableIndex; // A collection index which is a FetchSource.\nInterface CollectionQuerySpace; // Models a QuerySpace for a persistent collection.\nInterface CollectionReference; // Represents a reference to a persistent collection either as a Return or as a CollectionAttributeFetch.\nInterface CollectionReturn; // Models the a persistent collection as root Return.\nInterface CompositeAttributeFetch; // Models the requested fetching of a composite attribute.\nInterface CompositeFetch; // Models the requested fetching of a composition (component/embeddable), which may or may not be an attribute.\nInterface CompositeQuerySpace; // Models a QuerySpace for a composition (component/embeddable).\nInterface EntityFetch; // Models the requested fetching of an entity attribute.\nInterface EntityIdentifierDescription; // Descriptor for the identifier of an entity as a FetchSource (which allows for key-many-to-one handling).\nInterface EntityQuerySpace; // Models a QuerySpace specific to an entity (EntityPersister).\nInterface EntityReference; // Represents a reference to an entity either as a return, fetch, or collection element or index.\nInterface EntityReturn; // Models the an entity as root Return.\nInterface Fetch; // Contract for associations that are being fetched.\nInterface FetchSource; // Contract for a FetchSource (aka, the thing that owns the fetched attribute).\nInterface Join; // Represents a join in the QuerySpace-sense.\nInterface JoinDefinedByMetadata; // Specialization of a Join that is defined by the metadata.\nInterface LoadPlan; // Describes a plan for performing a load of results.\nInterface QuerySpace; // Defines a persister reference (either entity or collection) or a composite reference.\nInterface QuerySpaces; // Models a collection of QuerySpace references and exposes the ability to find a QuerySpace by its UID\nInterface Return; // Represents a return value in the query results.\n", "des": "Defines the SPI for the building blocks that make up a LoadPlan."}
{"index": 3686, "repo": "solr-core-9.3.0", "code": "package schema;\n\npackage schema.analysis; // Analysis-related functionality for RESTful API access to managed resources related to the schema, such as stopwords, protected words, and synonyms.\nClass FieldTypeXmlAdapter; // Utility class for converting a JSON definition of a FieldType into the XML format expected by the FieldTypePluginLoader.\n", "des": "Provides RESTful API access to managed resources in the Solr Schema."}
{"index": 3025, "repo": "spring-web-6.0.11", "code": "package support;\n\npublic class RestGatewaySupport extends Object; // Convenient superclass for application classes that need REST access.\n", "des": "Classes supporting the org.springframework.web.client package."}
{"index": 490, "repo": "beam-sdks-java-core-2.49.0", "code": "package parser;\n\npackage parser.generated; // Defines utilities for deailing with schemas.\nClass FieldAccessDescriptorParser; // Parser for textual field-access selector.\n", "des": "Defines utilities for deailing with schemas."}
{"index": 3521, "repo": "opennlp-tools-2.2.0", "code": "package leipzig;\n\nClass LeipzigLanguageSampleStream;\nClass LeipzigLanguageSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\n", "des": "Experimental package related to the Leipzig corpus format."}
{"index": 2722, "repo": "spring-batch-infrastructure-5.0.2", "code": "package separator;\n\npublic class DefaultRecordSeparatorPolicy extends SimpleRecordSeparatorPolicy; // A RecordSeparatorPolicy that treats all lines as record endings, as long as they do not have unterminated quotes, and do not end in a continuation marker.\npublic class JsonRecordSeparatorPolicy extends SimpleRecordSeparatorPolicy; // JSON-based record separator.\npublic interface RecordSeparatorPolicy; // Policy for text file-based input sources to determine the end of a record, e.g.\npublic class SimpleRecordSeparatorPolicy extends Object implements RecordSeparatorPolicy; // Simplest possible RecordSeparatorPolicy - treats all lines as record endings.\npublic class SuffixRecordSeparatorPolicy extends DefaultRecordSeparatorPolicy; // A RecordSeparatorPolicy that looks for an exact match for a String at the end of a line (e.g.\n", "des": "Infrastructure implementations of io file support separator concerns."}
{"index": 2691, "repo": "spring-data-jpa-3.1.2", "code": "package util;\n\npublic final class BeanDefinitionUtils extends Object; // Utility methods to work with BeanDefinition instances from BeanFactoryPostProcessors.\npublic static class BeanDefinitionUtils.EntityManagerFactoryBeanDefinition extends Object; // Value object to represent a BeanDefinition for an EntityManagerFactory with a dedicated bean name.\npublic class JpaMetamodel extends Object; // Wrapper around the JPA Metamodel to be able to apply some fixes against bugs in provider implementations.\n", "des": "Spring Data JPA utilities."}
{"index": 2559, "repo": "pulsar-common-3.0.0", "code": "package net;\n\npublic class ServiceURI extends Object; // ServiceURI represents service uri within pulsar cluster.\n", "des": "Classes for network configuration."}
{"index": 1544, "repo": "spring-context-6.0.11", "code": "package support;\n\npublic final class CronExpression extends Object; // Representation of a crontab expression that can calculate the next time it matches.\n@Deprecated(since=\"5.3\", forRemoval=true) public class CronSequenceGenerator extends Object;\npublic class CronTrigger extends Object implements Trigger; // Trigger implementation for cron expressions.\npublic class DelegatingErrorHandlingRunnable extends Object implements Runnable; // Runnable wrapper that catches any exception or error thrown from its delegate Runnable and allows an ErrorHandler to handle it.\npublic class MethodInvokingRunnable extends org.springframework.beans.support.ArgumentConvertingMethodInvoker implements Runnable, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Adapter that implements the Runnable interface as a configurable method invocation based on Spring's MethodInvoker.\npublic class PeriodicTrigger extends Object implements Trigger; // A trigger for periodic task execution.\npublic class ScheduledMethodRunnable extends Object implements Runnable; // Variant of MethodInvokingRunnable meant to be used for processing of no-arg scheduled methods.\npublic class SimpleTriggerContext extends Object implements TriggerContext; // Simple data holder implementation of the TriggerContext interface.\npublic abstract class TaskUtils extends Object; // Utility methods for decorating tasks with error handling.\n", "des": "Generic support classes for scheduling."}
{"index": 3280, "repo": "opencms-core-15.0", "code": "package json;\n\nInterface I_CmsJsonifable; // To convert objects to json.\nInterface I_JSONString; // The I_JSONString interface allows a toJSONString() method so that a class can change the behavior of JSONObject.toString(), JSONArray.toString(), and JSONWriter.value(Object).\nClass CDL; // This provides static methods to convert comma delimited text into a JSONArray, and to covert a JSONArray into comma delimited text.\nClass JSONArray; // A JSONArray is an ordered sequence of values.\nClass JSONML; // This provides static methods to convert an XML text into a JSONObject, and to convert a JSONObject into an XML text using the JsonML transform.\nClass JSONObject; // A JSONObject is an unordered collection of name/value pairs.\nClass JSONObject.Null; // JSONObject.NULL is equivalent to the value that JavaScript calls null, whilst Java's null is equivalent to the value that JavaScript calls undefined.\nClass JSONStringer; // JSONStringer provides a quick and convenient way of producing JSON text.\nClass JSONTokener; // A JSONTokener takes a source string and extracts characters and tokens from it.\nClass JSONWriter; // JSONWriter provides a quick and convenient way of producing JSON text.\nClass XML; // This provides static methods to convert an XML text into a JSONObject, and to covert a JSONObject into an XML text.\nClass XMLTokener; // The XMLTokener extends the JSONTokener to provide additional methods for the parsing of XML texts.\nClass JSONException; // The JSONException is thrown by the JSON.org classes when things are amiss.\n", "des": "Classes to create JSON objects and arrays for JavaScript in OpenCms."}
{"index": 923, "repo": "commons-compress-1.23.0", "code": "package lzma;\n\nClass LZMACompressorInputStream; // LZMA decompressor.\nClass LZMACompressorOutputStream; // LZMA compressor.\nClass LZMAUtils; // Utility code for the lzma compression format.\n", "des": "Provides stream classes using the \"stand-alone\" LZMA algorithm."}
{"index": 2110, "repo": "spring-webflux-6.0.11", "code": "package server;\n\npackage server.support; // Server-side support classes for WebSocket requests.\npackage server.upgrade; // Holds implementations of RequestUpgradeStrategy.\npublic interface RequestUpgradeStrategy; // A strategy for upgrading an HTTP request to a WebSocket session depending on the underlying network runtime.\npublic interface WebSocketService; // A service to delegate WebSocket-related HTTP requests to.\n", "des": "Server support for WebSocket interactions."}
{"index": 584, "repo": "commons-collections-3.2.2", "code": "package map;\n\nInterface CompositeMap.MapMutator; // This interface allows definition for all of the indeterminate mutators in a CompositeMap, as well as providing a hook for callbacks on key collisions.\nClass AbstractHashedMap; // An abstract implementation of a hash-based map which provides numerous points for subclasses to override.\nClass AbstractHashedMap.EntrySet; // EntrySet implementation.\nClass AbstractHashedMap.EntrySetIterator; // EntrySet iterator.\nClass AbstractHashedMap.HashEntry; // HashEntry used to store the data.\nClass AbstractHashedMap.HashIterator; // Base Iterator\nClass AbstractHashedMap.HashMapIterator; // MapIterator implementation.\nClass AbstractHashedMap.KeySet; // KeySet implementation.\nClass AbstractHashedMap.KeySetIterator; // KeySet iterator.\nClass AbstractHashedMap.Values; // Values implementation.\nClass AbstractHashedMap.ValuesIterator; // Values iterator.\nClass AbstractLinkedMap; // An abstract implementation of a hash-based map that links entries to create an ordered map and which provides numerous points for subclasses to override.\nClass AbstractLinkedMap.EntrySetIterator; // EntrySet iterator.\nClass AbstractLinkedMap.KeySetIterator; // KeySet iterator.\nClass AbstractLinkedMap.LinkEntry; // LinkEntry that stores the data.\nClass AbstractLinkedMap.LinkIterator; // Base Iterator that iterates in link order.\nClass AbstractLinkedMap.LinkMapIterator; // MapIterator implementation.\nClass AbstractLinkedMap.ValuesIterator; // Values iterator.\nClass AbstractMapDecorator; // Provides a base decorator that enables additional functionality to be added to a Map via decoration.\nClass AbstractOrderedMapDecorator; // Provides a base decorator that enables additional functionality to be added to an OrderedMap via decoration.\nClass AbstractReferenceMap; // An abstract implementation of a hash-based map that allows the entries to be removed by the garbage collector.\nClass AbstractReferenceMap.ReferenceEntry; // A MapEntry implementation for the map.\nClass AbstractSortedMapDecorator; // Provides a base decorator that enables additional functionality to be added to a Map via decoration.\nClass CaseInsensitiveMap; // A case-insensitive Map.\nClass CompositeMap; // Decorates a map of other maps to provide a single unified view.\n", "des": "This package contains implementations of the Map, IterableMap, OrderedMap and SortedMap interfaces."}
{"index": 1807, "repo": "spring-aop-6.0.11", "code": "package target;\n\npublic abstract class AbstractBeanFactoryBasedTargetSourceCreator extends Object implements TargetSourceCreator, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.DisposableBean; // Convenient superclass for TargetSourceCreator implementations that require creating multiple instances of a prototype bean.\npublic class LazyInitTargetSourceCreator extends AbstractBeanFactoryBasedTargetSourceCreator; // TargetSourceCreator that enforces a LazyInitTargetSource for each bean that is defined as \"lazy-init\".\npublic class QuickTargetSourceCreator extends AbstractBeanFactoryBasedTargetSourceCreator; // Convenient TargetSourceCreator using bean name prefixes to create one of three well-known TargetSource types: : CommonsPool2TargetSource % ThreadLocalTargetSource ! PrototypeTargetSource\n", "des": "Various TargetSourceCreator implementations for use with Spring's AOP auto-proxying support."}
{"index": 2506, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package wavefront;\n\n@AutoConfiguration @ConditionalOnClass({com.wavefront.sdk.common.application.ApplicationTags.class,com.wavefront.sdk.common.WavefrontSender.class}) @EnableConfigurationProperties(WavefrontProperties.class) public class WavefrontAutoConfiguration extends Object; // Auto-configuration for Wavefront common infrastructure.\n@ConfigurationProperties(prefix=\"management.wavefront\") public class WavefrontProperties extends Object; // Configuration properties to configure Wavefront.\npublic static class WavefrontProperties.Application extends Object;\npublic static class WavefrontProperties.Metrics extends Object;\npublic static class WavefrontProperties.Metrics.Export extends PushRegistryProperties;\npublic static class WavefrontProperties.Sender extends Object;\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(com.wavefront.sdk.common.WavefrontSender.class) @EnableConfigurationProperties(WavefrontProperties.class) public class WavefrontSenderConfiguration extends Object; // Configuration for WavefrontSender.\n", "des": "Classes shared between Wavefront tracing and metrics."}
{"index": 3687, "repo": "solr-core-9.3.0", "code": "package analysis;\n\nClass BaseManagedTokenFilterFactory; // Abstract based class for implementing TokenFilterFactory objects that are managed by the REST API.\nClass ManagedStopFilterFactory; // TokenFilterFactory that uses the ManagedWordSetResource implementation for managing stop words using the REST API.\nClass ManagedSynonymFilterFactory;\nClass ManagedSynonymFilterFactory.SynonymManager; // ManagedResource implementation for synonyms, which are so specialized that it makes sense to implement this class as an inner class as it has little application outside the SynonymFilterFactory use cases.\nClass ManagedSynonymGraphFilterFactory; // TokenFilterFactory and ManagedResource implementation for doing CRUD on synonyms using the REST API.\nClass ManagedSynonymGraphFilterFactory.SynonymManager; // ManagedResource implementation for synonyms, which are so specialized that it makes sense to implement this class as an inner class as it has little application outside the SynonymFilterFactory use cases.\nClass ManagedWordSetResource; // ManagedResource implementation for managing a set of words using the REST API; useful for managing stop words and/or protected words for analysis components like the KeywordMarkerFilter.\n", "des": "Analysis-related functionality for RESTful API access to managed resources related to the schema, such as stopwords, protected words, and synonyms."}
{"index": 2287, "repo": "spring-boot-3.1.1", "code": "package boot;\n\npackage boot.admin; // Administration support for Spring Boot applications.\npackage boot.ansi; // Support classes to provide ANSI color output.\npackage boot.availability; // Support for describing the availability of Spring Boot applications.\npackage boot.builder; // Fluent 'builder' style API to construct a SpringApplication.\npackage boot.cloud; // Low level support for Cloud deployments.\npackage boot.context; // Classes related to Spring's ApplicationContext.\npackage boot.convert; // Support for type conversion.\npackage boot.diagnostics; // Support for failure analysis and reporting.\npackage boot.env; // Spring Environment support.\npackage boot.info; // Support for providing information about an application.\npackage boot.jackson; // Custom enhancements and support for the Jackson project.\npackage boot.jdbc; // Support for Java Database Connectivity (JDBC).\npackage boot.jms; // Support for Java Message Service (JMS).\npackage boot.json; // Support for parsing JSON.\npackage boot.logging; // Support and abstractions across several logging libraries.\npackage boot.origin; // Support for item origin tracking.\npackage boot.r2dbc; // Support for R2DBC connectivity.\npackage boot.reactor; // Support classes for Reactor integration.\npackage boot.ssl; // Management of trust material that can be used to establish an SSL connection.\npackage boot.system; // General system support classes.\npackage boot.task; // Utilities and classes related to task execution and scheduling.\npackage boot.util; // Contains miscellaneous utility classes.\npackage boot.validation; // Utilities and classes related to validation.\npublic interface ApplicationArguments; // Provides access to the arguments that were used to run a SpringApplication.\n@FunctionalInterface public interface ApplicationContextFactory; // Strategy interface for creating the ConfigurableApplicationContext used by a SpringApplication.\n@FunctionalInterface public interface ApplicationRunner; // Interface used to indicate that a bean should run when it is contained within a SpringApplication.\n@FunctionalInterface public interface Banner; // Interface class for writing a banner programmatically.\npublic static enum Banner.Mode extends Enum<Banner.Mode>; // An enumeration of possible values for configuring the Banner.\n", "des": "Core Spring Boot classes."}
{"index": 1036, "repo": "hadoop-aws-3.3.6", "code": "package select;\n\nClass InternalSelectConstants; // Constants for internal use in the org.apache.hadoop.fs.s3a module itself.\nClass SelectBinding; // Class to do the S3 select binding and build a select request from the supplied arguments/configuration.\nClass SelectConstants; // Options related to S3 Select.\nClass SelectInputStream; // An input stream for S3 Select return values.\nClass SelectTool; // This is a CLI tool for the select operation, which is available through the S3Guard command.\n", "des": "Support for S3 Select."}
{"index": 376, "repo": "zookeeper-jute-3.8.2", "code": "package jute;\n\npackage jute.compiler; // This package contains classes needed for code generation from the hadoop record compiler.\nInterface Index; // Interface that acts as an iterator for deserializing maps.\nInterface InputArchive; // Interface that all the Deserializers have to implement.\nInterface OutputArchive; // Interface that all the serializers have to implement.\nInterface Record; // Interface that is implemented by generated classes.\nClass BinaryInputArchive;\nClass BinaryOutputArchive;\nClass RecordReader; // Front-end interface to deserializers.\nClass RecordWriter; // Front-end for serializers.\nClass ToStringOutputArchive;\nClass Utils; // Various utility functions for Hadoop record I/O runtime.\n", "des": "Hadoop record I/O contains classes and a record description language translator for simplifying serialization and deserialization of records in a language-neutral manner."}
{"index": 3829, "repo": "lucene-analysis-common-9.7.0", "code": "package ext;\n\nClass ArabicStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass ArmenianStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass BasqueStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass CatalanStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass DanishStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass DutchStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass EnglishStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass EstonianStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass FinnishStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass FrenchStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass German2Stemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass GermanStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass GreekStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass HindiStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass HungarianStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass IndonesianStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass IrishStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass ItalianStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass KpStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass LithuanianStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass LovinsStemmer; // This class implements the stemming algorithm defined by a snowball script.\n", "des": "Autogenerated snowball stemmer implementations."}
{"index": 492, "repo": "beam-sdks-java-core-2.49.0", "code": "package transforms;\n\nInterface Cast.Validator; // Interface for statically validating casts.\nInterface SchemaTransform; // An abstraction to create schema capable and aware transforms.\nInterface SchemaTransformProvider; // Provider to create SchemaTransform instances for use in Beam SQL and other SDKs.\nClass AddFields; // A transform to add new nullable fields to a PCollection's schema.\nClass AddFields.Inner<T>; // Inner PTransform for AddFields.\nClass Cast<T>; // Set of utilities for casting rows between schemas.\nClass Cast.CompatibilityError; // Describes compatibility errors during casting.\nClass Cast.Narrowing; // Narrowing changes type without guarantee to preserve data.\nClass Cast.Widening; // Widening changes to type that can represent any possible value of the original type.\nClass CoGroup; // A transform that performs equijoins across multiple schema PCollections.\nClass CoGroup.By; // Defines the set of fields to extract for the join key, as well as other per-input join options.\nClass CoGroup.ExpandCrossProduct; // A PTransform that calculates the cross-product join.\nClass CoGroup.Impl; // The implementing PTransform.\nClass CoGroup.Result;\nClass Convert; // A set of utilities for converting between different objects supporting schemas.\nClass DropFields; // A transform to drop fields from a schema.\nClass DropFields.Inner<T>; // Implementation class for DropFields.\nClass Filter; // A PTransform for filtering a collection of schema types.\nClass Filter.Inner<T>; // Implementation of the filter.\nClass Group; // A generic grouping transform for schema PCollections.\nClass Group.AggregateCombiner<InputT>; // a PTransform that does a combine using an aggregation built up by calls to aggregateField and aggregateFields.\nClass Group.ByFields<InputT>; // a PTransform that groups schema elements based on the given fields.\nClass Group.CombineFieldsByFields<InputT>; // a PTransform that does a per-key combine using an aggregation built up by calls to aggregateField and aggregateFields.\nClass Group.CombineFieldsGlobally<InputT>; // a PTransform that does a global combine using an aggregation built up by calls to aggregateField and aggregateFields.\n", "des": "Defines transforms that work on PCollections with schemas.."}
{"index": 469, "repo": "jackson-core-2.15.2", "code": "package async;\n\nClass NonBlockingByteBufferJsonParser; // Non-blocking parser implementation for JSON content that takes its input via ByteBuffer instance(s) passed.\nClass NonBlockingJsonParser; // Non-blocking parser implementation for JSON content that takes its input via byte[] passed.\nClass NonBlockingJsonParserBase; // Intermediate base class for non-blocking JSON parsers.\nClass NonBlockingUtf8JsonParserBase; // Non-blocking parser base implementation for JSON content.\n", "des": "Non-blocking (\"async\") JSON parser implementation."}
{"index": 2953, "repo": "spring-integration-xml-6.1.2", "code": "package source;\n\npublic class DomSourceFactory extends Object implements SourceFactory; // SourceFactory implementation which supports creation of a DOMSource from a Document, File or String payload.\npublic interface SourceFactory; // Factory to create a Source possibly taking into account the provided message payload instance.\npublic class StringSourceFactory extends Object implements SourceFactory; // SourceFactory implementation which supports creation of a StringSource from a Document, File or String payload\n", "des": "Provides various SourceFactory implementations."}
{"index": 1201, "repo": "commons-math3-3.6.1", "code": "package primes;\n\nClass Primes; // Methods related to prime numbers in the range of int: primality test prime number generation factorization\n", "des": "Methods related to prime numbers like primality test, factor decomposition."}
{"index": 93, "repo": "ignite-core-2.15.0", "code": "package ipfinder;\n\npackage ipfinder.jdbc; // Contains JDBC IP finder implementation.\npackage ipfinder.multicast; // Contains multicast-based IP finder.\npackage ipfinder.sharedfs; // Contains shared filesystem-based IP finder.\npackage ipfinder.vm; // Contains local JVM-based IP finder.\nInterface TcpDiscoveryIpFinder; // IP finder interface for TcpDiscoverySpi.\nClass TcpDiscoveryIpFinderAdapter; // IP finder interface implementation adapter.\n", "des": "Contains IP finder interface and adapter."}
{"index": 1527, "repo": "spring-context-6.0.11", "code": "package jboss;\n\npublic class JBossLoadTimeWeaver extends Object implements LoadTimeWeaver; // LoadTimeWeaver implementation for JBoss's instrumentable ClassLoader.\n", "des": "Support for class instrumentation on JBoss AS 6 and 7."}
{"index": 525, "repo": "commons-vfs2-2.9.0", "code": "package http5;\n\nClass Http5FileContentInfoFactory; // Creates FileContentInfoFactory instances for http5 provider.\nClass Http5FileNameParser; // FileNameParser implementation for http5 provider, setting default port to 80.\nClass Http5FileObject<FS extends Http5FileSystem>; // A file object backed by Apache HttpComponents HttpClient v5.\nClass Http5FileProvider; // FileProvider implementation using HttpComponents HttpClient v5 library.\nClass Http5FileSystem; // http5 file system.\nClass Http5FileSystemConfigBuilder; // Configuration options builder utility for http5 provider.\n", "des": "The HTTP5 File Provider"}
{"index": 1, "repo": "connect-api-3.5.0", "code": "package connector;\n\npackage connector.policy; // Provides pluggable interfaces for policies controlling how users can configure connectors.\nInterface ConnectorContext; // ConnectorContext allows Connectors to proactively interact with the Kafka Connect runtime.\nInterface Task; // Tasks contain the code that actually copies data to/from another system.\nClass Connector; // Connectors manage integration of Kafka Connect with another system, either as an input that ingests data into Kafka or an output that passes data to an external system.\nClass ConnectRecord<R extends ConnectRecord<R>>; // Base class for records containing data to be copied to/from Kafka.\n", "des": "Provides interfaces for Connector and Task implementations."}
{"index": 664, "repo": "commons-lang3-3.12.0", "code": "package builder;\n\nInterface Builder<T>; // The Builder interface is designed to designate a class as a builder object in the Builder design pattern.\nInterface Diffable<T>; // Diffable classes can be compared with other objects for differences.\nClass CompareToBuilder; // Assists in implementing Comparable.compareTo(Object) methods.\nClass Diff<T>; // A Diff contains the differences between two Diffable class fields.\nClass DiffBuilder<T>; // Assists in implementing Diffable.diff(Object) methods.\nClass DiffResult<T>; // A DiffResult contains a collection of the differences between two Diffable objects.\nClass EqualsBuilder; // Assists in implementing Object.equals(Object) methods.\nClass HashCodeBuilder; // Assists in implementing Object.hashCode() methods.\nClass MultilineRecursiveToStringStyle; // Works with ToStringBuilder to create a \"deep\" toString.\nClass RecursiveToStringStyle; // Works with ToStringBuilder to create a \"deep\" toString.\nClass ReflectionDiffBuilder<T>; // Assists in implementing Diffable.diff(Object) methods.\nClass ReflectionToStringBuilder; // Assists in implementing Object.toString() methods using reflection.\nClass StandardToStringStyle; // Works with ToStringBuilder to create a toString.\nClass ToStringBuilder; // Assists in implementing Object.toString() methods.\nClass ToStringStyle; // Controls String formatting for ToStringBuilder.\nAnnotation Type EqualsExclude; // Use this annotation to exclude a field from being used by the various reflectionEquals methods defined on EqualsBuilder.\nAnnotation Type HashCodeExclude; // Use this annotation to exclude a field from being used by the various reflectionHashcode methods defined on HashCodeBuilder.\nAnnotation Type ToStringExclude; // Use this annotation to exclude a field from being used by the ReflectionToStringBuilder.\nAnnotation Type ToStringSummary; // Use this annotation on the fields to get the summary instead of the detailed information when using ReflectionToStringBuilder.\n", "des": "Assists in creating consistent equals(Object), toString(), hashCode(), and compareTo(Object) methods."}
{"index": 1655, "repo": "jena-core-4.9.0", "code": "package xmlinput0;\n\npublic interface ALiteral extends ANode; // A string literal property value from an RDF/XML file.\npublic interface AResource; // A URI or blank node reported to a StatementHandler.\npublic class ARP0 extends Object implements ARPConfig; // Another RDF Parser.\npublic interface ARPConfig; // Used to set event handlers and options on ARP0, SAX2Model, and SAX2RDF instances.\npublic interface ARPErrorNumbers; // Error numbers used by ARP.\npublic interface ARPEventHandler extends StatementHandler, ExtendedHandler, NamespaceHandler; // Convenience generalization of all ARP handler interfaces.\npublic class ARPHandlers extends Object; // The interface to set the various handlers on ARP.\npublic class ARPOptions extends Object implements ARPErrorNumbers; // The interface to set the various options on ARP.\npublic class DOM2Model extends SAX2Model; // Transform DOM nodes of RDF.XML into Jena Models.\npublic interface ExtendedHandler; // Extended callbacks from a reader to an RDF application.\npublic class FatalParsingErrorException extends RuntimeException; // This exception should only be seen in user code when using SAX2RDF or SAX2Model.\npublic interface NamespaceHandler; // The interface for being notified about namespace use in an RDF/XML document.\npublic class NTriple extends Object implements ARPErrorNumbers; // A command line interface into ARP.\npublic class ParseException extends ParseException; // An exception during the RDF processing of ARP.\npublic class RDFXMLReader0 extends Object implements RDFReaderI, ARPErrorNumbers; // Interface between Jena and ARP.\npublic class SAX2Model extends SAX2RDF; // Use arbitrary SAX input to Jena.\npublic class SAX2RDF extends SAX2RDFImpl implements ARPConfig; // Allows connecting an arbitrary source of SAX events with ARP.\npublic interface StatementHandler; // The callback from a reader to an RDF application.\npublic class StAX2Model extends Object; // A collection of convenient functions to parse an XML stream using ARP.\npublic class StAX2SAX extends Object; // Bridge StAX and SAX parsing.\npublic class XMLLiteralType0 extends BaseDatatype implements RDFDatatype; // Builtin data type to represent XMLLiteral (i.e.\n", "des": "A parser for RDF/XML."}
{"index": 969, "repo": "spring-ws-3.0.10.RELEASE", "code": "package client;\n\npackage client.core; // Contains core classes for SOAP-specific client-side Spring-WS support.\nClass SoapFaultClientException; // Thrown by SoapFaultMessageResolver when the response message has a fault.\n", "des": "Contains classes for SOAP-specific client-side Spring-WS support."}
{"index": 2901, "repo": "spring-integration-amqp-6.1.2", "code": "package outbound;\n\npublic abstract class AbstractAmqpOutboundEndpoint extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements org.springframework.integration.support.management.ManageableLifecycle; // A base AbstractReplyProducingMessageHandler extension for AMQP message handlers.\nprotected static final class AbstractAmqpOutboundEndpoint.CorrelationDataWrapper extends org.springframework.amqp.rabbit.connection.CorrelationData;\npublic class AmqpOutboundEndpoint extends AbstractAmqpOutboundEndpoint implements org.springframework.amqp.rabbit.core.RabbitTemplate.ConfirmCallback, org.springframework.amqp.rabbit.core.RabbitTemplate.ReturnsCallback; // Adapter that converts and sends Messages to an AMQP Exchange.\npublic class AsyncAmqpOutboundGateway extends AbstractAmqpOutboundEndpoint; // An outbound gateway where the sending thread is released immediately and the reply is sent on the async template's listener container thread.\npublic class RabbitStreamMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler; // MessageHandler based on RabbitStreamOperations.\n", "des": "Provides classes supporting outbound endpoints."}
{"index": 2725, "repo": "spring-batch-infrastructure-5.0.2", "code": "package jms;\n\npackage jms.builder; // Builders for JMS item reader and writer.\npublic class JmsItemReader<T> extends Object implements ItemReader<T>, org.springframework.beans.factory.InitializingBean; // An ItemReader for JMS using a JmsTemplate.\npublic class JmsItemWriter<T> extends Object implements ItemWriter<T>; // An ItemWriter for JMS using a JmsTemplate.\npublic class JmsMethodArgumentsKeyGenerator extends Object implements org.springframework.retry.interceptor.MethodArgumentsKeyGenerator; // A MethodArgumentsKeyGenerator for JMS\npublic class JmsMethodInvocationRecoverer<T> extends Object implements org.springframework.retry.interceptor.MethodInvocationRecoverer<T>;\npublic class JmsNewMethodArgumentsIdentifier<T> extends Object implements org.springframework.retry.interceptor.NewMethodArgumentsIdentifier; // A NewMethodArgumentsIdentifier for JMS that looks for a message in the arguments and checks its delivery status.\n", "des": "JMS based reader/writer and related components."}
{"index": 2459, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package dynatrace;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.dynatrace.DynatraceMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"dynatrace\") @EnableConfigurationProperties(DynatraceProperties.class) public class DynatraceMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Dynatrace.\n@ConfigurationProperties(prefix=\"management.dynatrace.metrics.export\") public class DynatraceProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring Dynatrace metrics export.\npublic static class DynatraceProperties.V1 extends Object;\npublic static class DynatraceProperties.V2 extends Object;\n", "des": "Support for exporting actuator metrics to Dynatrace."}
{"index": 1363, "repo": "spring-tx-6.0.11", "code": "package interceptor;\n\npublic abstract class AbstractFallbackTransactionAttributeSource extends Object implements TransactionAttributeSource, org.springframework.context.EmbeddedValueResolverAware; // Abstract implementation of TransactionAttributeSource that caches attributes for methods and implements a fallback policy: 1.\npublic class BeanFactoryTransactionAttributeSourceAdvisor extends org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor; // Advisor driven by a TransactionAttributeSource, used to include a transaction advice bean for methods that are transactional.\npublic class CompositeTransactionAttributeSource extends Object implements TransactionAttributeSource, Serializable; // Composite TransactionAttributeSource implementation that iterates over a given array of TransactionAttributeSource instances.\npublic class DefaultTransactionAttribute extends DefaultTransactionDefinition implements TransactionAttribute; // Spring's common transaction attribute implementation.\npublic abstract class DelegatingTransactionAttribute extends DelegatingTransactionDefinition implements TransactionAttribute, Serializable; // TransactionAttribute implementation that delegates all calls to a given target TransactionAttribute instance.\npublic class MatchAlwaysTransactionAttributeSource extends Object implements TransactionAttributeSource, Serializable; // Very simple implementation of TransactionAttributeSource which will always return the same TransactionAttribute for all methods fed to it.\npublic class MethodMapTransactionAttributeSource extends Object implements TransactionAttributeSource, org.springframework.context.EmbeddedValueResolverAware, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Simple TransactionAttributeSource implementation that allows attributes to be stored per method in a Map.\npublic class NameMatchTransactionAttributeSource extends Object implements TransactionAttributeSource, org.springframework.context.EmbeddedValueResolverAware, org.springframework.beans.factory.InitializingBean, Serializable; // Simple TransactionAttributeSource implementation that allows attributes to be matched by registered name.\npublic class NoRollbackRuleAttribute extends RollbackRuleAttribute; // Tag subclass of RollbackRuleAttribute that has the opposite behavior to the RollbackRuleAttribute superclass.\npublic class RollbackRuleAttribute extends Object implements Serializable; // Rule determining whether a given exception should cause a rollback.\npublic class RuleBasedTransactionAttribute extends DefaultTransactionAttribute implements Serializable; // TransactionAttribute implementation that works out whether a given exception should cause transaction rollback by applying a number of rollback rules, both positive and negative.\npublic interface TransactionalProxy extends org.springframework.aop.SpringProxy; // A marker interface for manually created transactional proxies.\n", "des": "AOP-based solution for declarative transaction demarcation."}
{"index": 3127, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package jdbc;\n\npackage jdbc.spi; // SPI contracts for supporting various aspects of JDBC interaction\nInterface BinaryStream; // Wraps a binary stream to also provide the length which is needed when binding.\nInterface BlobImplementer; // Marker interface for non-contextually created Blob instances..\nInterface CharacterStream; // Wraps a character stream (reader) to also provide the length (number of characters) which is needed when binding.\nInterface ClobImplementer; // Marker interface for non-contextually created Clob instances..\nInterface LobCreationContext; // Provides callback access into the context in which the LOB is to be created.\nInterface LobCreationContext.Callback<T>; // The callback contract for making use of the JDBC Connection.\nInterface LobCreator; // Contract for creating various LOB references.\nInterface NClobImplementer; // Marker interface for non-contextually created java.sql.NClob instances..\nInterface WrappedBlob; // Contract for Blob wrappers.\nInterface WrappedClob; // Contract for Clob wrappers.\nInterface WrappedNClob; // Contract for NClob wrappers.\nClass AbstractLobCreator; // Convenient base class for proxy-based LobCreator for handling wrapping.\nClass BlobProxy; // Manages aspects of representing Blob objects.\nClass ClobProxy; // Manages aspects of proxying Clobs for non-contextual creation, including proxy creation and handling proxy invocations.\nClass ColumnNameCache;\nClass ContextualLobCreator; // LobCreator implementation using contextual creation against the JDBC Connection class's LOB creation methods.\nClass NClobProxy; // Manages aspects of proxying java.sql.NClobs for non-contextual creation, including proxy creation and handling proxy invocations.\nClass NonContextualLobCreator; // LobCreator implementation using non-contextual or local creation, meaning that we generate the LOB references ourselves as opposed to delegating to the JDBC Connection.\nClass ReaderInputStream; // Exposes a Reader as an InputStream.\nClass ResultSetWrapperProxy;\nClass SerializableBlobProxy; // Manages aspects of proxying Blobs to add serializability.\nClass SerializableClobProxy; // Manages aspects of proxying Clobs to add serializability.\n", "des": "Support for various aspects of JDBC interaction"}
{"index": 3406, "repo": "commons-imaging-1.0-alpha3", "code": "package tiff;\n\npackage tiff.constants; // TIFF constants.\npackage tiff.datareaders; // TIFF data readers.\npackage tiff.fieldtypes; // TIFF field types.\npackage tiff.photometricinterpreters; // Classes for TIFF photometric interpretation (specifies the intended interpretation of the image pixel data).\npackage tiff.taginfos; // Classes for the TIFF tags.\npackage tiff.write; // TIFF writers.\nInterface TiffReader.Listener;\nClass JpegImageData;\nClass TiffContents;\nClass TiffDirectory; // Provides methods and elements for accessing an Image File Directory (IFD) from a TIFF file.\nClass TiffDirectory.ImageDataElement;\nClass TiffElement;\nClass TiffElement.DataElement;\nClass TiffElement.Stub;\nClass TiffField; // A TIFF field in a TIFF directory.\nClass TiffHeader;\nClass TiffImageData;\nClass TiffImageData.ByteSourceData;\nClass TiffImageData.Data;\nClass TiffImageData.Strips;\nClass TiffImageData.Tiles;\nClass TiffImageMetadata;\nClass TiffImageMetadata.Directory;\nClass TiffImageMetadata.GPSInfo;\nClass TiffImageMetadata.TiffMetadataItem;\nClass TiffImageParser;\nClass TiffImagingParameters; // Tiff format parameters.\nClass TiffRasterData; // Provides a simple container for numeric-raster data.\nClass TiffRasterDataFloat; // Provides a simple container for floating-point data.\nClass TiffRasterDataInt; // Provides a simple container for floating-point data.\nClass TiffRasterStatistics; // Collects and stores a set of simple statistics from the input raster.\nClass TiffReader;\nEnum TiffRasterDataType; // Provides an enumeration indicating the type of data for an instance of a TiffRasterData class.\n", "des": "Provides classes and methods for reading and writing Tagged Image File Format (TIFF) files."}
{"index": 2405, "repo": "spring-batch-core-5.0.2", "code": "package builder;\n\npublic abstract class AbstractTaskletStepBuilder<B extends AbstractTaskletStepBuilder<B>> extends StepBuilderHelper<B>; // Base class for step builders that want to build a TaskletStep.\npublic class FaultTolerantStepBuilder<I,O> extends SimpleStepBuilder<I,O>; // A step builder for fully fault tolerant chunk-oriented item processing steps.\npublic class FlowStepBuilder extends StepBuilderHelper<FlowStepBuilder>; // A step builder for FlowStep instances.\npublic class JobStepBuilder extends StepBuilderHelper<JobStepBuilder>; // A step builder for JobStep instances.\npublic class PartitionStepBuilder extends StepBuilderHelper<PartitionStepBuilder>; // Step builder for PartitionStep instances.\npublic class SimpleStepBuilder<I,O> extends AbstractTaskletStepBuilder<SimpleStepBuilder<I,O>>; // Step builder for simple item processing (chunk oriented) steps.\npublic class StepBuilder extends StepBuilderHelper<StepBuilder>; // Convenient entry point for building all kinds of steps.\npublic class StepBuilderException extends RuntimeException; // Utility exception thrown by builders when they encounter unexpected checked exceptions.\npublic abstract class StepBuilderHelper<B extends StepBuilderHelper<B>> extends Object; // A base class and utility for other step builders providing access to common properties like job repository and listeners.\npublic static class StepBuilderHelper.CommonStepProperties extends Object;\npublic class TaskletStepBuilder extends AbstractTaskletStepBuilder<TaskletStepBuilder>; // Builder for tasklet step based on a custom tasklet (not item oriented).\n", "des": "Step level builders for java based job configuration."}
{"index": 2848, "repo": "spring-integration-core-6.1.2", "code": "package kryo;\n\npublic abstract class AbstractKryoCodec extends Object implements Codec; // Base class for Codecs using Kryo.\npublic abstract class AbstractKryoRegistrar extends Object implements KryoRegistrar; // Base class for KryoRegistrar implementations.\npublic class CompositeKryoRegistrar extends AbstractKryoRegistrar; // A KryoRegistrar that delegates and validates registrations across all components.\npublic class FileKryoRegistrar extends AbstractKryoRegistrar; // A KryoRegistrar used to validateRegistration a File serializer.\npublic class FileSerializer extends com.esotericsoftware.kryo.Serializer<File>; // A custom Kryo Serializer for serializing File payloads.\npublic class KryoClassListRegistrar extends AbstractKryoRegistrar; // A KryoRegistrar used to validateRegistration a list of Java classes.\npublic class KryoClassMapRegistrar extends AbstractKryoRegistrar; // A KryoRegistrar implementation backed by a Map used to explicitly set the registration ID for each class.\npublic interface KryoRegistrar; // Strategy interface used by PojoCodec to configure registrations classes consistently across Kryo instances.\npublic class KryoRegistrationRegistrar extends AbstractKryoRegistrar; // A KryoRegistrar implementation backed by a List of Registration.\npublic class MessageCodec extends PojoCodec; // PojoCodec configured to encode/decode Message<?>s.\npublic class MessageKryoRegistrar extends AbstractKryoRegistrar; // Registers common MessageHeader types and Serializers.\npublic class PojoCodec extends AbstractKryoCodec; // Kryo Codec that can encode and decode arbitrary types.\npublic final class RegistrationIds extends Object; // Default registration ids for serializers provided by the framework.\n", "des": "The Kryo specific Codec classes."}
{"index": 2634, "repo": "shiro-web-2.0.0-alpha-2", "code": "package support;\n\npublic class DefaultWebSubjectContext extends org.apache.shiro.subject.support.DefaultSubjectContext implements WebSubjectContext; // Default WebSubjectContext implementation that provides for additional storage and retrieval of a ServletRequest and ServletResponse.\npublic class WebDelegatingSubject extends org.apache.shiro.subject.support.DelegatingSubject implements WebSubject; // Default WebSubject implementation that additional ensures the ability to retain a servlet request/response pair to be used by internal shiro components as necessary during the request execution.\n", "des": "Supporting implementations of org.apache.shiro.web.subject package interfaces."}
{"index": 3864, "repo": "lucene-spatial-extras-9.7.0", "code": "package bbox;\n\nClass BBoxOverlapRatioValueSource; // The algorithm is implemented as envelope on envelope (rect on rect) overlays rather than complex polygon on complex polygon overlays.\nClass BBoxSimilarityValueSource; // A base class for calculating a spatial relevance rank per document from a provided ShapeValuesSource returning a Rectangle per-document.\nClass BBoxStrategy; // A SpatialStrategy for indexing and searching Rectangles by storing its coordinates in numeric fields.\n", "des": "Bounding Box Spatial Strategy"}
{"index": 3014, "repo": "spring-web-6.0.11", "code": "package xml;\n\npublic abstract class AbstractJaxb2HttpMessageConverter<T> extends AbstractXmlHttpMessageConverter<T>; // Abstract base class for HttpMessageConverters that use JAXB2.\npublic abstract class AbstractXmlHttpMessageConverter<T> extends AbstractHttpMessageConverter<T>; // Abstract base class for HttpMessageConverters that convert from/to XML.\npublic class Jaxb2CollectionHttpMessageConverter<T extends Collection> extends AbstractJaxb2HttpMessageConverter<T> implements GenericHttpMessageConverter<T>; // An HttpMessageConverter that can read XML collections using JAXB2.\npublic class Jaxb2RootElementHttpMessageConverter extends AbstractJaxb2HttpMessageConverter<Object>; // Implementation of HttpMessageConverter that can read and write XML using JAXB2.\npublic class MappingJackson2XmlHttpMessageConverter extends AbstractJackson2HttpMessageConverter; // Implementation of HttpMessageConverter that can read and write XML using Jackson 2.x extension component for reading and writing XML encoded data.\npublic class MarshallingHttpMessageConverter extends AbstractXmlHttpMessageConverter<Object>; // Implementation of HttpMessageConverter that can read and write XML using Spring's Marshaller and Unmarshaller abstractions.\npublic class SourceHttpMessageConverter<T extends Source> extends AbstractHttpMessageConverter<T>; // Implementation of HttpMessageConverter that can read and write Source objects.\n", "des": "Provides HttpMessageConverter implementations for handling XML."}
{"index": 3695, "repo": "solr-core-9.3.0", "code": "package distributed;\n\npackage distributed.command; // Internal classes used to implement distributed result grouping\npackage distributed.requestfactory; // Internal classes used to implement distributed result grouping\npackage distributed.responseprocessor; // Internal classes used to implement distributed result grouping\npackage distributed.shardresultserializer; // Internal classes used to implement distributed result grouping\nInterface ShardRequestFactory; // Responsible for creating shard requests to the shards in the cluster to perform distributed grouping.\nInterface ShardResponseProcessor; // Responsible for processing shard responses.\n", "des": "Internal classes used to implement distributed result grouping"}
{"index": 1856, "repo": "spring-test-6.0.11", "code": "package match;\n\npublic class ContentRequestMatchers extends Object; // Factory for request content RequestMatcher's.\npublic class JsonPathRequestMatchers extends Object; // Factory for assertions on the request content using JsonPath expressions.\npublic abstract class MockRestRequestMatchers extends Object; // Static factory methods for RequestMatcher classes.\npublic class XpathRequestMatchers extends Object; // Factory methods for request content RequestMatcher implementations that use an XPath expression.\n", "des": "Contains built-in RequestMatcher implementations."}
{"index": 3092, "repo": "spring-ws-core-4.0.5", "code": "package support;\n\npublic class DefaultStrategiesHelper extends Object; // Helper class for for loading default implementations of an interface.\npublic abstract class MarshallingUtils extends Object; // Helper class for endpoints and endpoint mappings that use marshalling.\npublic abstract class WebUtils extends Object; // Miscellaneous utilities for web applications.\n", "des": "Provides general helper classes for Spring Web Services."}
{"index": 1380, "repo": "spring-boot-actuator-3.1.1", "code": "package mongo;\n\npublic class MongoHealthIndicator extends AbstractHealthIndicator; // Simple implementation of a HealthIndicator returning status information for Mongo data stores.\npublic class MongoReactiveHealthIndicator extends AbstractReactiveHealthIndicator; // A ReactiveHealthIndicator for Mongo.\n", "des": "Actuator support for Mongo dependent on Spring Data."}
{"index": 2621, "repo": "spring-integration-jms-6.1.2", "code": "package config;\n\npublic class JmsChannelFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<AbstractJmsChannel> implements org.springframework.context.SmartLifecycle, org.springframework.beans.factory.BeanNameAware;\npublic class JmsChannelParser extends org.springframework.integration.config.xml.AbstractChannelParser; // Parser for the 'channel' and 'publish-subscribe-channel' elements of the Spring Integration JMS namespace.\npublic class JmsHeaderEnricherParser extends org.springframework.integration.config.xml.HeaderEnricherParserSupport; // Header enricher for JMS specific values.\npublic class JmsInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Parser for the <inbound-channel-adapter/> element of the 'jms' namespace.\npublic class JmsMessageDrivenEndpointParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the <message-driven-channel-adapter> element and the <inbound-gateway> element of the 'jms' namespace.\npublic class JmsNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for Spring Integration's jms namespace.\npublic class JmsOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the <outbound-channel-adapter/> element of the jms namespace.\npublic class JmsOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the <outbound-gateway> element of the integration 'jms' namespace.\n", "des": "Provides classes for configuration - parsers, namespace handlers, factory beans."}
{"index": 2659, "repo": "spring-data-cassandra-4.1.2", "code": "package mapping;\n\npackage mapping.event; // Event callback infrastructure for Cassandra mapping subsystem.\n@Deprecated public class BasicCassandraMappingContext extends CassandraMappingContext;\npublic class BasicCassandraPersistentEntity<T> extends BasicPersistentEntity<T,CassandraPersistentProperty> implements CassandraPersistentEntity<T>, ApplicationContextAware; // Cassandra specific BasicPersistentEntity implementation that adds Cassandra specific metadata.\npublic class BasicCassandraPersistentEntityMetadataVerifier extends Object implements CassandraPersistentEntityMetadataVerifier; // Default implementation for Cassandra Persistent Entity Verification.\npublic class BasicCassandraPersistentProperty extends AnnotationBasedPersistentProperty<CassandraPersistentProperty> implements CassandraPersistentProperty, ApplicationContextAware; // Cassandra specific AnnotationBasedPersistentProperty implementation.\npublic class BasicCassandraPersistentTupleEntity<T> extends BasicCassandraPersistentEntity<T>; // Cassandra Tuple-specific PersistentEntity for a mapped tuples.\npublic class BasicCassandraPersistentTupleProperty extends BasicCassandraPersistentProperty; // Cassandra Tuple specific CassandraPersistentProperty implementation.\npublic class BasicMapId extends Object implements MapId; // Simple implementation of MapId.\npublic class CachingCassandraPersistentProperty extends BasicCassandraPersistentProperty; // BasicCassandraPersistentProperty that pre-computes primary key and embedded flags.\n@Deprecated public enum CassandraColumnAnnotationComparator extends Enum<CassandraColumnAnnotationComparator> implements Comparator<Column>;\npublic class CassandraMappingContext extends AbstractMappingContext<BasicCassandraPersistentEntity<?>,CassandraPersistentProperty> implements ApplicationContextAware, BeanClassLoaderAware; // Default implementation of a MappingContext for Cassandra using CassandraPersistentEntity and CassandraPersistentProperty as primary abstractions.\npublic interface CassandraPersistentEntity<T> extends PersistentEntity<T,CassandraPersistentProperty>; // Cassandra specific PersistentEntity abstraction.\n@FunctionalInterface public interface CassandraPersistentEntityMetadataVerifier; // Interface for Cassandra Persistent Entity Mapping Verification.\npublic interface CassandraPersistentProperty extends PersistentProperty<CassandraPersistentProperty>, ApplicationContextAware; // Cassandra specific PersistentProperty extension.\npublic enum CassandraPersistentPropertyComparator extends Enum<CassandraPersistentPropertyComparator> implements Comparator<CassandraPersistentProperty>; // Comparator implementation that orders CassandraPersistentProperty instances.\npublic enum CassandraPrimaryKeyColumnAnnotationComparator extends Enum<CassandraPrimaryKeyColumnAnnotationComparator> implements Comparator<PrimaryKeyColumn>; // Comparator implementation that uses, in order, the...\n", "des": "Infrastructure for the Apache Cassandra row-to-object mapping subsystem."}
{"index": 3227, "repo": "commons-configuration2-2.9.0", "code": "package tree;\n\npackage tree.xpath; // This package contains the XPathExpressionEngine class which enables XPATH support for querying configuration properties.\nInterface ConfigurationNodeVisitor<T>; // Definition of a Visitor interface for a configuration node structure.\nInterface ExpressionEngine; // Definition of an interface for evaluating keys for hierarchical configurations.\nInterface InMemoryNodeModelSupport; // A specialized version of the NodeModelSupport interface which allows querying an InMemoryNodeModel.\nInterface NodeHandler<T>; // Definition of an interface for accessing the data of a configuration node.\nInterface NodeKeyResolver<T>; // Definition of an interface which allows resolving a (property) key for different manipulating operations.\nInterface NodeMatcher<C>; // An interface for matching nodes based on specific criteria.\nInterface NodeModel<T>; // Definition of an interface describing a model based on a nodes structure.\nInterface NodeModelSupport<T>; // An interface to be implemented by objects that support a NodeModel.\nInterface ReferenceNodeHandler; // An extension of the NodeHandler interface which allows access to so-called references stored for a node.\nClass ConfigurationNodeVisitorAdapter<T>; // A simple adapter class that simplifies writing custom node visitor implementations.\nClass DefaultConfigurationKey; // A simple class that supports creation of and iteration on configuration keys supported by a DefaultExpressionEngine object.\nClass DefaultExpressionEngine; // A default implementation of the ExpressionEngine interface providing the \"native\" expression language for hierarchical configurations.\nClass DefaultExpressionEngineSymbols; // A class representing the various symbols that are supported in keys recognized by DefaultExpressionEngine.\nClass DefaultExpressionEngineSymbols.Builder; // A builder class for creating instances of DefaultExpressionEngineSymbols.\nClass ImmutableNode; // An immutable default implementation for configuration nodes.\nClass ImmutableNode.Builder; // A builder class for creating instances of ImmutableNode.\nClass InMemoryNodeModel; // A specialized node model implementation which operates on ImmutableNode structures.\nClass MergeCombiner; // A specialized implementation of the NodeCombiner interface that performs a merge from two passed in node hierarchies.\nClass NodeAddData<T>; // A simple data class used by ExpressionEngine to store the results of the prepareAdd() operation.\nClass NodeCombiner; // A base class for node combiner implementations.\nClass NodeHandlerDecorator<T>; // An abstract base class for decorators of a NodeHandler.\n", "des": "A package with helper and utility classes used by hierarchical configurations."}
{"index": 3824, "repo": "lucene-analysis-common-9.7.0", "code": "package util;\n\nClass CharArrayIterator; // A CharacterIterator used internally for use with BreakIterator\nClass CharTokenizer; // An abstract base class for simple, character-oriented tokenizers.\nClass ElisionFilter; // Removes elisions from a TokenStream.\nClass ElisionFilterFactory; // Factory for ElisionFilter.\nClass FilesystemResourceLoader; // Simple ResourceLoader that opens resource files from the local file system, optionally resolving against a base directory.\nClass OpenStringBuilder; // A StringBuilder that allows one to access the array.\nClass RollingCharBuffer; // Acts like a forever growing char[] as you read characters into it from the provided reader, but internally it uses a circular buffer to only hold the characters that haven't been freed yet.\nClass SegmentingTokenizerBase; // Breaks text into sentences with a BreakIterator and allows subclasses to decompose these sentences into words.\nClass StemmerUtil; // Some commonly-used stemming functions\nClass UnicodeProps; // This file contains unicode properties used by various CharTokenizers.\n", "des": "Utility functions for text analysis."}
{"index": 2265, "repo": "spring-vault-core-3.0.4", "code": "package event;\n\npublic class AfterSecretLeaseRenewedEvent extends SecretLeaseEvent; // Event published after renewing a Lease for a RequestedSecret.\npublic class AfterSecretLeaseRevocationEvent extends SecretLeaseEvent; // Event published after revoking a Lease for a RequestedSecret.\npublic class BeforeSecretLeaseRevocationEvent extends SecretLeaseEvent; // Event published before revoking a Lease for a RequestedSecret.\n@FunctionalInterface public interface LeaseErrorListener; // Listener for Vault exceptional SecretLeaseEvents.\n@FunctionalInterface public interface LeaseListener; // Listener for Vault SecretLeaseEvents.\npublic abstract class LeaseListenerAdapter extends Object implements LeaseListener, LeaseErrorListener; // Empty listener adapter implementing LeaseListener and LeaseErrorListener.\npublic class SecretLeaseCreatedEvent extends SecretLeaseEvent; // Event published after obtaining secrets potentially associated with a Lease.\npublic class SecretLeaseErrorEvent extends SecretLeaseEvent; // Event published when caught an Exception during secret retrieval and lease interaction.\npublic abstract class SecretLeaseEvent extends ApplicationEvent; // Abstract base class for Lease based events associated with RequestedSecret.\npublic class SecretLeaseExpiredEvent extends SecretLeaseEvent; // Event published after an expired Lease for a RequestedSecret was observed.\npublic class SecretLeaseRotatedEvent extends SecretLeaseCreatedEvent; // Event published after rotating secrets.\npublic class SecretNotFoundEvent extends SecretLeaseEvent; // Event published after secrets could not be found for a RequestedSecret.\n", "des": "Support classes for lease application events."}
{"index": 1726, "repo": "spring-jdbc-6.0.11", "code": "package namedparam;\n\npublic abstract class AbstractSqlParameterSource extends Object implements SqlParameterSource; // Abstract base class for SqlParameterSource implementations.\npublic class BeanPropertySqlParameterSource extends AbstractSqlParameterSource; // SqlParameterSource implementation that obtains parameter values from bean properties of a given JavaBean object.\npublic class EmptySqlParameterSource extends Object implements SqlParameterSource; // A simple empty implementation of the SqlParameterSource interface.\npublic class MapSqlParameterSource extends AbstractSqlParameterSource; // SqlParameterSource implementation that holds a given Map of parameters.\npublic class NamedParameterJdbcDaoSupport extends JdbcDaoSupport; // Extension of JdbcDaoSupport that exposes a NamedParameterJdbcTemplate as well.\npublic interface NamedParameterJdbcOperations; // Interface specifying a basic set of JDBC operations allowing the use of named parameters rather than the traditional '?' placeholders.\npublic class NamedParameterJdbcTemplate extends Object implements NamedParameterJdbcOperations; // Template class with a basic set of JDBC operations, allowing the use of named parameters rather than traditional '?' placeholders.\npublic abstract class NamedParameterUtils extends Object; // Helper methods for named parameter parsing.\npublic class ParsedSql extends Object; // Holds information about a parsed SQL statement.\npublic interface SqlParameterSource; // Interface that defines common functionality for objects that can offer parameter values for named SQL parameters, serving as argument for NamedParameterJdbcTemplate operations.\npublic abstract class SqlParameterSourceUtils extends Object; // Class that provides helper methods for the use of SqlParameterSource, in particular with NamedParameterJdbcTemplate.\n", "des": "JdbcTemplate variant with named parameter support."}
{"index": 595, "repo": "org.apache.karaf.main-2.4.4", "code": "package resolver;\n\nInterface BaseDescription; // This class represents a base description object for a state.\nInterface BundleDelta; // BundleDeltas represent the changes related to an individual bundle between two states.\nInterface BundleDescription; // This class represents a specific version of a bundle in the system.\nInterface BundleSpecification; // A representation of one bundle import constraint as seen in a bundle manifest and managed by a state and resolver.\nInterface ExportPackageDescription; // This class represents a specific version of an exported package in the system.\nInterface GenericDescription; // A description of a generic capability.\nInterface GenericSpecification; // A specification which depends on a generic capability\nInterface HostSpecification; // A representation of one host bundle constraint as seen in a bundle manifest and managed by a state and resolver.\nInterface ImportPackageSpecification; // A representation of one package import constraint as seen in a bundle manifest and managed by a state and resolver.\nInterface NativeCodeDescription; // This class represents a native code description.\nInterface NativeCodeSpecification; // This class represents a native code specification.\nInterface PlatformAdmin; // Framework service which allows bundle programmers to inspect the bundles and packages known to the Framework.\nInterface Resolver; // An implementation of a resolver which resolves the constraints of the bundles in a system.\nInterface ResolverError; // ResolverErrors represent a single error that prevents a bundle from resolving in a State object.\nInterface State; // The state of a system as reported by a resolver.\nInterface StateDelta; // A state delta contains all the changes to bundles within a state.\nInterface StateHelper; // A helper class that provides convenience methods for manipulating state objects.\nInterface StateObjectFactory; // A factory for states and their component objects.\nInterface VersionConstraint; // VersionConstraints represent the relationship between two bundles (in the case of bundle requires) or a bundle and a package (in the case of import/export).\nClass DisabledInfo; // A disabled info represents a policy decision to disable a bundle which exists in a State.\nClass StateWire; // A state wire represents a decision made by a resolver to wire a requirement to a capability.\nClass VersionRange; // This class represents a version range.\nClass ResolverHookException; // A runtime exception thrown by a resolver to indicate that a resolver hook threw an unexpected exception and the resolve operation terminated.\n", "des": "Provides the Equinox resolver API."}
{"index": 3461, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface ExpandingCollectionQuerySpace; // Describes a collection query space that allows adding joins with other query spaces; used while building a CollectionQuerySpace.\nInterface ExpandingCompositeQuerySpace; // Describes a composite query space that allows adding joins with other query spaces; used while building a CompositeQuerySpace.\nInterface ExpandingEntityIdentifierDescription; // Describes an entity identifier description that allows adding fetches; used while building a EntityIdentifierDescription.\nInterface ExpandingEntityQuerySpace; // Describes an entity query space that allows adding joins with other query spaces; used while building an EntityQuerySpace.\nInterface ExpandingFetchSource; // Describes the internal contract for things which can contain fetches.\nInterface ExpandingQuerySpace; // Describes a query space that allows adding joins with other query spaces; used while building a QuerySpace.\nInterface ExpandingQuerySpaces; // Models a collection of QuerySpace references and exposes the ability to create an ExpandingQuerySpace for \"returns\" and fetches; used when building a load plan.\nInterface LoadPlanBuildingAssociationVisitationStrategy; // Specialized AssociationVisitationStrategy implementation for building LoadPlan instances.\nInterface LoadPlanBuildingContext; // Provides access to context needed in building a LoadPlan.\nClass LoadPlanTreePrinter; // Prints a LoadPlan graph and its QuerySpaces graph as tree structures.\nClass MetamodelDrivenLoadPlanBuilder; // A metadata-driven builder of LoadPlans.\nClass QuerySpaceTreePrinter; // Prints a QuerySpaces graph as a tree structure.\nClass ReturnGraphTreePrinter; // Prints a Return graph as a tree structure.\nClass TreePrinterHelper; // A singleton helper class for printing tree structures using indentation.\n", "des": "Defines the SPI for building a metamodel-driven LoadPlan"}
{"index": 2964, "repo": "spring-integration-redis-6.1.2", "code": "package store;\n\npublic class RedisChannelMessageStore extends Object implements org.springframework.integration.store.ChannelMessageStore, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.BeanClassLoaderAware; // Specialized Redis ChannelMessageStore that uses a list to back a QueueChannel.\npublic class RedisChannelPriorityMessageStore extends RedisChannelMessageStore implements org.springframework.integration.store.PriorityCapableChannelMessageStore; // Specialized Redis PriorityCapableChannelMessageStore that uses lists to back a QueueChannel.\npublic class RedisMessageStore extends org.springframework.integration.store.AbstractKeyValueMessageStore implements org.springframework.beans.factory.BeanClassLoaderAware; // Redis implementation of the key/value style MessageStore and MessageGroupStore\n", "des": "Provides classes related to the Redis message store."}
{"index": 3400, "repo": "commons-imaging-1.0-alpha3", "code": "package xmp;\n\nClass JpegRewriter; // Interface for Exif write/update/remove functionality for Jpeg/JFIF images.\nClass JpegRewriter.JFIFPiece;\nClass JpegRewriter.JFIFPieces;\nClass JpegRewriter.JFIFPieceSegment;\nClass JpegXmpParser;\nClass JpegXmpRewriter; // Interface for Exif write/update/remove functionality for Jpeg/JFIF images.\nClass JpegRewriter.JpegSegmentOverflowException;\n", "des": "JPEG image format XMP metadata."}
{"index": 3093, "repo": "spring-ws-core-4.0.5", "code": "package transport;\n\npackage transport.context; // Abstraction for determining the current TransportInputStream and TransportOutputStream.\npackage transport.http; // Package providing support for handling messages via HTTP.\npackage transport.support; // Classes supporting the org.springframework.ws.transport package.\npublic abstract class AbstractReceiverConnection extends AbstractWebServiceConnection implements HeadersAwareReceiverWebServiceConnection; // Abstract base class for WebServiceConnection implementations used for receiving requests.\npublic abstract class AbstractSenderConnection extends AbstractWebServiceConnection implements HeadersAwareSenderWebServiceConnection; // Abstract base class for WebServiceConnection implementations used for sending requests.\npublic abstract class AbstractWebServiceConnection extends Object implements WebServiceConnection; // Abstract base class for WebServiceConnection implementations.\npublic interface EndpointAwareWebServiceConnection extends WebServiceConnection; // Sub-interface of WebServiceConnection that is aware of any server-side situations where an endpoint is not found.\npublic interface FaultAwareWebServiceConnection extends WebServiceConnection; // Sub-interface of WebServiceConnection that is aware of any Fault messages received.\npublic interface HeadersAwareReceiverWebServiceConnection; // Interface to define access to header information for certain WebServiceConnection implementations.\npublic interface HeadersAwareSenderWebServiceConnection;\npublic interface TransportConstants; // Declares useful transport constants.\npublic abstract class TransportException extends IOException; // Abstract base class for exceptions related to the transport layer.\npublic abstract class TransportInputStream extends InputStream; // A TransportInputStream is an input stream with MIME input headers.\npublic abstract class TransportOutputStream extends OutputStream; // A TransportOutputStream is an output stream with MIME input headers.\npublic interface WebServiceConnection extends AutoCloseable; // Represents a point-to-point connection that a client can use for sending WebServiceMessage objects directly to a remote party.\npublic interface WebServiceMessageReceiver; // Defines the methods for classes capable of receiving WebServiceMessage instances coming in on a transport.\npublic interface WebServiceMessageSender; // Defines the methods for classes capable of sending and receiving WebServiceMessage instances across a transport.\n", "des": "Contains the TransportRequest and TransportResponse interfaces."}
{"index": 2827, "repo": "groovy-xml-4.0.13", "code": "package streamingmarkupsupport;\n\npublic class BaseMarkupBuilder extends Builder;\npublic abstract class Builder extends groovy.lang.GroovyObjectSupport;\nprotected abstract static class Builder.Built extends groovy.lang.GroovyObjectSupport;\npublic class StreamingMarkupWriter extends Writer;\n", "des": "XmlBuilder related classes to support streaming XML."}
{"index": 2920, "repo": "groovy-4.0.13", "code": "package lang;\n\npublic interface AdaptingMetaClass extends MetaClass; // An interface for MetaClass instances that \"adapt\" other MetaClass instances such as a proxy or delegating MetaClass.\npublic class BenchmarkInterceptor extends Object implements Interceptor; // Interceptor that registers the timestamp of each method call before and after invocation.\npublic class Binding extends GroovyObjectSupport; // Represents the variable bindings of a script which can be altered from outside the script object or created outside of a script and passed into it.\npublic interface Buildable;\n@Documented @Retention(SOURCE) @Target(TYPE) public @interface Category; // Transforms an instance-style Groovy class or interface to become a static-style conventional Groovy category.\npublic abstract class Closure<V> extends GroovyObjectSupport implements Cloneable, Runnable, GroovyCallable<V>, Serializable; // Represents any closure object in Groovy.\npublic class ClosureException extends RuntimeException; // An exception thrown by a closure invocation\npublic interface ClosureInvokingMethod; // An interface for MetaMethods that invoke closures to implements.\n@Documented @Retention(RUNTIME) @Target({FIELD,METHOD}) public @interface Delegate; // Annotation to automatically delegate part of the functionality of an owner class to the annotated delegation target.\n@Documented @Retention(RUNTIME) @Target({PARAMETER,METHOD}) public @interface DelegatesTo; // This annotation can be used by API or DSL writers to document parameters which accept a closure.\n@Retention(RUNTIME) @Target(PARAMETER) public static @interface DelegatesTo.Target; // Parameter annotation used to specify the delegate for a @DelegatesTo annotated parameter of the same method.\npublic class DelegatingMetaClass extends Object implements MetaClass, MutableMetaClass, GroovyObject;\npublic class DeprecationException extends RuntimeException; // Use this exception to mark a method implementation as being deprecated.\npublic class EmptyRange<T extends Comparable> extends AbstractList<T> implements Range<T>; // Constructing Ranges like 0..<0\npublic class ExpandoMetaClass extends MetaClassImpl implements GroovyObject; // ExpandoMetaClass is a MetaClass that behaves like an Expando, allowing the addition or replacement of methods, properties and constructors on the fly.\n", "des": "Core Groovy language classes for implementing data structures, closures, metadata and so forth."}
{"index": 3317, "repo": "opencms-core-15.0", "code": "package site;\n\npackage site.xmlsitemap; // Contains classes related to XML sitemap generation.\nClass CmsAlternativeSiteRootMapping; // Describes a mapping rule that selects a different site root based on whether the requested path matches a set of prefixes or not.\nClass CmsSite; // Describes a configured site in OpenCms.\nClass CmsSiteManagerImpl; // Manages all configured sites in OpenCms.\nClass CmsSiteMatcher; // A matcher object to compare request data against the configured sites.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsSite.LocalizationMode; // The site localization modes.\nEnum CmsSiteMatcher.RedirectMode; // Represents the different redirect modes for a site alias.\nEnum CmsSSLMode; // Enumeration for different SSL Modes of sites.\n", "des": "Provides access to the multi-site configuration of OpenCms."}
{"index": 288, "repo": "pdfbox-3.0.0-beta1", "code": "package markedcontent;\n\nClass PDMarkedContent; // A marked content.\nClass PDPropertyList; // A property list is a dictionary containing private information meaningful to the conforming writer creating the marked content.\n", "des": "The marked content package provides a mechanism for modeling marked-content sequences."}
{"index": 2343, "repo": "spring-boot-3.1.1", "code": "package codec;\n\n@FunctionalInterface public interface CodecCustomizer; // Callback interface that can be used to customize codecs configuration for an HTTP client and/or server with a CodecConfigurer.\n", "des": "Support for web-based codecs."}
{"index": 908, "repo": "commons-compress-1.23.0", "code": "package dump;\n\nClass DumpArchiveConstants; // Various constants associated with dump archives.\nClass DumpArchiveEntry; // This class represents an entry in a Dump archive.\nClass DumpArchiveInputStream; // The DumpArchiveInputStream reads a UNIX dump archive as an InputStream.\nClass DumpArchiveSummary; // This class represents identifying information about a Dump archive volume.\nEnum DumpArchiveConstants.COMPRESSION_TYPE; // The type of compression.\nEnum DumpArchiveConstants.SEGMENT_TYPE; // The type of tape segment.\nEnum DumpArchiveEntry.PERMISSION;\nEnum DumpArchiveEntry.TYPE;\nClass DumpArchiveException; // Dump Archive Exception\nClass InvalidFormatException; // Invalid Format Exception.\nClass ShortFileException; // Short File Exception.\nClass UnrecognizedFormatException; // Unrecognized Format Exception.\nClass UnsupportedCompressionAlgorithmException; // Unsupported compression algorithm.\n", "des": "This package provides stream classes for reading archives using the Unix DUMP format."}
{"index": 2368, "repo": "camel-base-4.0.0-RC1", "code": "package event;\n\npublic abstract class AbstractContextEvent extends EventObject implements org.apache.camel.spi.CamelEvent.CamelContextEvent; // Base class for CamelContext events.\npublic abstract class AbstractExchangeEvent extends EventObject implements org.apache.camel.spi.CamelEvent.ExchangeEvent; // Base class for Exchange events.\npublic abstract class AbstractRouteEvent extends EventObject implements org.apache.camel.spi.CamelEvent.RouteEvent; // Base class for CamelContext events.\npublic abstract class AbstractStepEvent extends AbstractExchangeEvent; // Base class for step events.\npublic class CamelContextInitializedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextInitializedEvent;\npublic class CamelContextInitializingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextInitializingEvent;\npublic class CamelContextReloadedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextReloadedEvent;\npublic class CamelContextReloadFailureEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextReloadFailureEvent;\npublic class CamelContextReloadingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextReloadingEvent;\npublic class CamelContextResumedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextResumedEvent;\npublic class CamelContextResumeFailureEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextResumeFailureEvent;\npublic class CamelContextResumingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextResumingEvent;\npublic class CamelContextRoutesStartedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextRoutesStartedEvent;\npublic class CamelContextRoutesStartingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextRoutesStartingEvent;\npublic class CamelContextRoutesStoppedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextRoutesStoppedEvent;\npublic class CamelContextRoutesStoppingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextRoutesStoppingEvent;\n", "des": "Camel management events"}
{"index": 1667, "repo": "spring-boot-cli-3.1.1", "code": "package cli;\n\npackage cli.command; // Command infrastructure for the CLI.\npackage cli.util; // Utility classes for the CLI.\npublic class DefaultCommandFactory extends Object implements CommandFactory; // Default implementation of CommandFactory.\npublic final class SpringCli extends Object; // Spring Command Line Interface.\n", "des": "Main entry point of the Spring Boot CLI."}
{"index": 1020, "repo": "commons-email-1.5", "code": "package resolver;\n\nClass DataSourceBaseResolver; // Base class for various resolvers.\nClass DataSourceClassPathResolver; // Creates a DataSource based on an class path.\nClass DataSourceCompositeResolver; // A composite data source resolver.\nClass DataSourceFileResolver; // Creates a DataSource based on an URL.\nClass DataSourceUrlResolver; // Creates a DataSource based on an URL.\n", "des": "Contains implementation classes to resolve data sources from the following locations: class path file system URL"}
{"index": 830, "repo": "calcite-core-1.34.0", "code": "package jdbc;\n\nInterface CalciteConnection; // Extension to Calcite's implementation of JDBC connection allows schemas to be defined dynamically.\nInterface CalcitePrepare; // API for a service that prepares statements for execution.\nInterface CalcitePrepare.Context; // Context for preparing a statement.\nInterface CalcitePrepare.SparkHandler; // Callback to register Spark as the main engine.\nInterface CalcitePrepare.SparkHandler.RuleSetBuilder; // Allows Spark to declare the rules it needs.\nClass CalciteFactory; // Extension of AvaticaFactory for Calcite.\nClass CalciteJdbc41Factory; // Implementation of AvaticaFactory for Calcite and JDBC 4.1 (corresponds to JDK 1.7).\nClass CalciteMetaImpl; // Helper for implementing the getXxx methods such as AvaticaDatabaseMetaData.getTables(java.lang.String, java.lang.String, java.lang.String, java.lang.String[]).\nClass CalcitePrepare.AnalyzeViewResult; // The result of analyzing a view.\nClass CalcitePrepare.CalciteSignature<T>; // The result of preparing a query.\nClass CalcitePrepare.ConvertResult; // The result of parsing and validating a SQL query and converting it to relational algebra.\nClass CalcitePrepare.Dummy; // Namespace that allows us to define non-abstract methods inside an interface.\nClass CalcitePrepare.ParseResult; // The result of parsing and validating a SQL query.\nClass CalcitePrepare.Query<T>; // A union type of the three possible ways of expressing a query: as a SQL string, a Queryable or a RelNode.\nClass CalciteResultSet; // Implementation of ResultSet for the Calcite engine.\nClass CalciteRootSchema;\nClass CalciteSchema; // Schema.\nClass CalciteSchema.Entry; // Entry in a schema, such as a table or sub-schema.\nClass CalciteSchema.FunctionEntry; // Membership of a function in a schema.\nClass CalciteSchema.FunctionEntryImpl; // Implementation of CalciteSchema.FunctionEntry where all properties are held in fields.\nClass CalciteSchema.LatticeEntry; // Membership of a lattice in a schema.\nClass CalciteSchema.LatticeEntryImpl; // Implementation of CalciteSchema.LatticeEntry where all properties are held in fields.\n", "des": "JDBC driver for Calcite."}
{"index": 2156, "repo": "wicket-core-10.0.0-M1", "code": "package parser;\n\npackage parser.filter; // Default parsing extensions.\npublic abstract class AbstractMarkupFilter extends Object implements IMarkupFilter; // Base class for markup filters\npublic interface IMarkupFilter; // Wicket uses a streaming XML parser to read the markup.\npublic interface IXmlPullParser; // The interface of a streaming XML parser as required by Wicket.\npublic static enum IXmlPullParser.HttpTagType extends Enum<IXmlPullParser.HttpTagType>; // The last element found\npublic class TagStack extends Object; // Stack to push and pop HTML elements asserting its structure.\npublic final class XmlPullParser extends Object implements IXmlPullParser; // A fairly shallow markup pull parser which parses a markup string of a given type of markup (for example, html, xml, vxml or wml) into ComponentTag and RawMarkup tokens.\npublic class XmlTag extends Object; // A subclass of MarkupElement which represents a tag including namespace and its optional attributes.\npublic static enum XmlTag.TagType extends Enum<XmlTag.TagType>; // Enumerated type for different kinds of component tags.\n", "des": "The default parsing engine of Wicket."}
{"index": 2757, "repo": "spring-beans-6.0.11", "code": "package aot;\n\npublic final class AotServices<T> extends Object implements Iterable<T>; // A collection of AOT services that can be loaded from a SpringFactoriesLoader or obtained from a ListableBeanFactory.\npublic static class AotServices.Loader extends Object; // Loader class used to actually load the services.\npublic static enum AotServices.Source extends Enum<AotServices.Source>; // Sources from which services were obtained.\n@FunctionalInterface public interface AutowiredArguments; // Resolved arguments to be autowired.\npublic class AutowiredArgumentsCodeGenerator extends Object; // Code generator to apply AutowiredArguments.\npublic final class AutowiredFieldValueResolver extends Object; // Resolver used to support the autowiring of fields.\npublic final class AutowiredMethodArgumentsResolver extends Object; // Resolver used to support the autowiring of methods.\n@FunctionalInterface public interface BeanFactoryInitializationAotContribution; // AOT contribution from a BeanFactoryInitializationAotProcessor used to initialize a bean factory.\n@FunctionalInterface public interface BeanFactoryInitializationAotProcessor; // AOT processor that makes bean factory initialization contributions by processing ConfigurableListableBeanFactory instances.\npublic interface BeanFactoryInitializationCode; // Interface that can be used to configure the code that will be generated to perform bean factory initialization.\npublic final class BeanInstanceSupplier<T> extends Object implements InstanceSupplier<T>; // Specialized InstanceSupplier that provides the factory Method used to instantiate the underlying bean instance, if any.\n@FunctionalInterface public interface BeanRegistrationAotContribution; // AOT contribution from a BeanRegistrationAotProcessor used to register a single bean definition.\n@FunctionalInterface public interface BeanRegistrationAotProcessor; // AOT processor that makes bean registration contributions by processing RegisteredBean instances.\npublic interface BeanRegistrationCode; // Interface that can be used to configure the code that will be generated to perform registration of a single bean.\npublic interface BeanRegistrationCodeFragments; // Generate the various fragments of code needed to register a bean.\npublic class BeanRegistrationCodeFragmentsDecorator extends Object implements BeanRegistrationCodeFragments; // A BeanRegistrationCodeFragments decorator implementation.\n@FunctionalInterface public interface BeanRegistrationExcludeFilter; // Filter that can be used to exclude AOT processing of a RegisteredBean.\n", "des": "AOT support for bean factories."}
{"index": 3575, "repo": "lucene-sandbox-9.7.0", "code": "package document;\n\nClass BigIntegerPoint; // An indexed 128-bit BigInteger field.\nClass DoublePointMultiRangeBuilder; // Builder for multi range queries for DoublePoints\nClass FloatPointMultiRangeBuilder; // Builder for multi range queries for FloatPoints\nClass FloatPointNearestNeighbor; // KNN search on top of N dimensional indexed float points.\nClass HalfFloatPoint; // An indexed half-float field for fast range filters.\nClass IntPointMultiRangeBuilder; // Builder for multi range queries for IntPoints\nClass LatLonBoundingBox; // An indexed 2-Dimension Bounding Box field for the Geospatial Lat/Lon Coordinate system\nClass LongPointMultiRangeBuilder; // Builder for multi range queries for LongPoints\n", "des": "This package contains several point types: BigIntegerPoint for 128-bit integers LatLonPoint for latitude/longitude geospatial points"}
{"index": 3055, "repo": "spring-ws-core-4.0.5", "code": "package support;\n\npackage support.destination; // Provides the DestinationProvider interface.\npackage support.interceptor; // Provides the ClientInterceptor interface, and validating interceptors.\npublic abstract class WebServiceAccessor extends org.springframework.xml.transform.TransformerObjectSupport implements org.springframework.beans.factory.InitializingBean; // Base class for WebServiceTemplate and other WS-accessing helpers.\n", "des": "Classes supporting the org.springframework.ws.client.core package."}
{"index": 2594, "repo": "spring-rabbit-3.0.6", "code": "package exception;\n\npublic class FatalListenerExecutionException extends org.springframework.amqp.AmqpException; // Exception to be thrown when the execution of a listener method failed with an irrecoverable problem.\npublic class FatalListenerStartupException extends org.springframework.amqp.AmqpException; // Exception to be thrown when the execution of a listener method failed on startup.\npublic class MessageRejectedWhileStoppingException extends org.springframework.amqp.AmqpException; // Exception class that indicates a rejected message on shutdown.\n", "des": "Provides classes for listener exceptions."}
{"index": 305, "repo": "pdfbox-3.0.0-beta1", "code": "package destination;\n\nClass PDDestination; // This represents a destination in a PDF document.\nClass PDNamedDestination; // This represents a destination to a page by referencing it with a name.\nClass PDPageDestination; // This represents a destination to a page, see subclasses for specific parameters.\nClass PDPageFitDestination; // This represents a destination to a page and the page contents will be magnified to just fit on the screen.\nClass PDPageFitHeightDestination; // This represents a destination to a page at a x location and the height is magnified to just fit on the screen.\nClass PDPageFitRectangleDestination; // This represents a destination to a page at a y location and the width is magnified to just fit on the screen.\nClass PDPageFitWidthDestination; // This represents a destination to a page at a y location and the width is magnified to just fit on the screen.\nClass PDPageXYZDestination; // This represents a destination to a page at an x,y coordinate with a zoom setting.\n", "des": "The destination package allows destinations into a pdf document to be specified."}
{"index": 1100, "repo": "fontbox-3.0.0-beta1", "code": "package afm;\n\nClass AFMParser; // This class is used to parse AFM(Adobe Font Metrics) documents.\nClass CharMetric; // This class represents a single character metric.\nClass Composite; // This class represents composite character data.\nClass CompositePart; // This class represents a part of composite character data.\nClass FontMetrics; // This is the outermost AFM type.\nClass KernPair; // This represents some kern pair data.\nClass Ligature; // This class represents a ligature, which is an entry of the CharMetrics.\nClass TrackKern; // This class represents a piece of track kerning data.\n", "des": "This package holds classes used to parse AFM(Adobe Font Metrics) files."}
{"index": 605, "repo": "org.apache.karaf.main-2.4.4", "code": "package weaving;\n\nInterface WeavingHook; // OSGi Framework Weaving Hook Service.\nInterface WovenClass; // A class being woven.\nClass WeavingException; // A weaving exception used to indicate that the class load should be failed but the weaving hook must not be blacklisted by the framework.\n", "des": "Framework Weaving Hooks Package Version 1.0."}
{"index": 2056, "repo": "spring-ws-security-4.0.5", "code": "package callback;\n\npublic abstract class AbstractWsPasswordCallbackHandler extends AbstractCallbackHandler; // Abstract base class for CallbackHandler implementations that handle WSPasswordCallback callbacks.\npublic class KeyStoreCallbackHandler extends AbstractWsPasswordCallbackHandler implements org.springframework.beans.factory.InitializingBean; // Callback handler that uses Java Security KeyStores to handle cryptographic callbacks.\npublic class SimplePasswordValidationCallbackHandler extends AbstractWsPasswordCallbackHandler implements org.springframework.beans.factory.InitializingBean; // Simple callback handler that validates passwords against a in-memory Properties object.\npublic class SpringSecurityPasswordValidationCallbackHandler extends AbstractWsPasswordCallbackHandler implements org.springframework.beans.factory.InitializingBean; // Callback handler that validates a plain text or digest password using an Spring Security UserDetailsService.\npublic class UsernameTokenPrincipalCallback extends Object implements Callback, Serializable; // Underlying security services instantiate and pass a UsernameTokenPrincipalCallback to the handle method of a CallbackHandler to pass a security WSUsernameTokenPrincipal.\n", "des": "Contains CallbackHandler implementations for WSS4J 2.0."}
{"index": 743, "repo": "spring-data-solr-4.3.15", "code": "package support;\n\nClass MappingSolrEntityInformation<T,ID>; // Solr specific implementation of AbstractEntityInformation\nClass SimpleSolrRepository<T,ID extends Serializable>; // Solr specific repository implementation.\nClass SolrEntityInformationCreatorImpl;\nClass SolrRepositoryFactory; // Factory to create SolrRepository\nClass SolrRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable>; // Spring FactoryBean implementation to ease container based configuration for XML namespace and JavaConfig.\n", "des": "Repository support classes for bootstrapping application context."}
{"index": 3444, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface ConfigurationService; // Provides access to the initial user-provided configuration values.\nInterface ConfigurationService.Converter<T>; // Simple conversion contract for converting an untyped object to a specified type.\nClass StandardConverters; // Standard set of setting converters\n", "des": "SPI Package for the configuration service."}
{"index": 2414, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package availability;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration.class) public class AvailabilityHealthContributorAutoConfiguration extends Object; // Auto-configuration for AvailabilityStateHealthIndicator.\n@AutoConfiguration(after={AvailabilityHealthContributorAutoConfiguration.class,org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration.class}) @Conditional(org.springframework.boot.actuate.autoconfigure.availability.AvailabilityProbesAutoConfiguration.ProbesCondition.class) public class AvailabilityProbesAutoConfiguration extends Object; // Auto-configuration for availability probes.\n", "des": "Auto-configuration that extends health endpoints so that they can be used as availability probes."}
{"index": 1923, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package elasticsearch;\n\n@AutoConfiguration(after={JacksonAutoConfiguration.class,JsonbAutoConfiguration.class,ElasticsearchRestClientAutoConfiguration.class}) @ConditionalOnClass(co.elastic.clients.elasticsearch.ElasticsearchClient.class) @Import({org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchClientConfigurations.ElasticsearchTransportConfiguration.class,org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchClientConfigurations.ElasticsearchClientConfiguration.class}) public class ElasticsearchClientAutoConfiguration extends Object; // Auto-configuration for Elasticsearch's Java client.\npublic interface ElasticsearchConnectionDetails extends ConnectionDetails; // Details required to establish a connection to an Elasticsearch service.\npublic static record ElasticsearchConnectionDetails.Node(String hostname, int port, ElasticsearchConnectionDetails.Node.Protocol protocol, String username, String password) extends Record; // An Elasticsearch node.\npublic static enum ElasticsearchConnectionDetails.Node.Protocol extends Enum<ElasticsearchConnectionDetails.Node.Protocol>; // Connection protocol.\n@ConfigurationProperties(\"spring.elasticsearch\") public class ElasticsearchProperties extends Object; // Configuration properties for Elasticsearch.\npublic static class ElasticsearchProperties.Restclient extends Object;\npublic static class ElasticsearchProperties.Restclient.Sniffer extends Object;\npublic static class ElasticsearchProperties.Restclient.Ssl extends Object;\n@AutoConfiguration(after=SslAutoConfiguration.class) @ConditionalOnClass(org.elasticsearch.client.RestClientBuilder.class) @EnableConfigurationProperties(ElasticsearchProperties.class) @Import({org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientConfigurations.RestClientBuilderConfiguration.class,org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientConfigurations.RestClientConfiguration.class,org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientConfigurations.RestClientSnifferConfiguration.class}) public class ElasticsearchRestClientAutoConfiguration extends Object; // Auto-configuration for Elasticsearch REST clients.\n", "des": "Auto-configuration for Elasticsearch client."}
{"index": 734, "repo": "spring-data-solr-4.3.15", "code": "package geo;\n\nClass GeoConverters;\nClass Point;\nEnum GeoConverters.DistanceToStringConverter; // Converts a Distance to a solrReadable request parameter.\nEnum GeoConverters.Point2DToStringConverter; // Converts a Point to a solrReadable request parameter.\nEnum GeoConverters.Point3DToStringConverter; // Converts a Point to a solrReadable request parameter.\nEnum GeoConverters.StringToPointConverter; // Converts comma separated string to Point.\n", "des": "Apache Solr geo specifics."}
{"index": 548, "repo": "commons-rdf-rdf4j-0.5.0", "code": "package rdf4j;\n\npackage rdf4j.experimental; // Experimental Commons RDF RDF4J implementations.\nInterface ClosableIterable<T>; // An Iterable which should be AutoCloseable.close()d after use.\nInterface RDF4JBlankNode; // Marker interface for RDF4J implementations of Commons RDF BlankNode.\nInterface RDF4JBlankNodeOrIRI; // Marker interface for RDF4J implementations of Commons RDF BlankNodeOrIRI (e.g.\nInterface RDF4JDataset; // Marker interface for RDF4J implementations of Dataset.\nInterface RDF4JGraph; // Marker interface for RDF4J implementations of Graph.\nInterface RDF4JGraphLike<T extends TripleLike>; // Marker interface for RDF4J implementations of GraphLike.\nInterface RDF4JIRI; // Marker interface for RDF4J implementations of Commons RDF IRI.\nInterface RDF4JLiteral; // Marker interface for RDF4J implementations of Commons RDF Literal.\nInterface RDF4JQuad; // Marker interface for RDF4J implementations of Quad.\nInterface RDF4JTerm; // Marker interface for RDF4J implementations of RDFTerm.\nInterface RDF4JTriple; // Marker interface for RDF4J implementations of Triple.\nInterface RDF4JTripleLike; // Marker interface for RDF4J implementations of TripleLike statements.\nClass RDF4J; // RDF4J implementation of RDF.\nEnum RDF4J.Option;\n", "des": "Commons RDF integration with RDF4J."}
{"index": 461, "repo": "commons-geometry-spherical-1.0", "code": "package oned;\n\nClass AngularInterval; // Class representing an angular interval of size greater than zero to 2pi.\nClass AngularInterval.Convex; // Class representing an angular interval with the additional property that the region is convex.\nClass CutAngle; // Class representing an oriented point in 1-dimensional spherical space, meaning an azimuth angle and a direction (increasing or decreasing angles) along the circle.\nClass CutAngles; // Class containing factory methods for constructing CutAngle instances.\nClass Point1S; // This class represents a point on the 1-sphere, or in other words, an azimuth angle on a circle.\nClass RegionBSPTree1S; // BSP tree representing regions in 1D spherical space.\nClass RegionBSPTree1S.RegionNode1S; // BSP tree node for one dimensional spherical space.\nClass Transform1S; // Implementation of the Transform interface for spherical 1D points.\n", "des": "This package provides basic geometry components on the 1-sphere."}
{"index": 3269, "repo": "opencms-core-15.0", "code": "package collectors;\n\nInterface I_CmsCollectorPostCreateHandler; // Interface which can be used to add custom code to execute after a user has created a new content via a collector list.\nInterface I_CmsCollectorPublishListProvider; // Interface which should be used for collectors which can provide their own publish list.\nInterface I_CmsResourceCollector; // A collector that generates list of CmsResource objects from the VFS.\nClass A_CmsResourceCollector; // Provides some helpful base implementations for resource collector classes.\nClass CmsAddCategoriesPostCreateHandler; // A post create handler that adds categories to newly created resources (that are not a copy of an existing resource).\nClass CmsCategoryResourceCollector; // A collector to fetch XML contents in a folder or the current site filtered by one or more given category types.\nClass CmsChangedResourceCollector; // A resource collector that collects resources changed in a given time frame and supports flexible sorting based on resource dates.\nClass CmsCollectorData; // Data structure for the collector, parsed from the collector parameters.\nClass CmsDateResourceCollector; // A default resource collector that supports flexible sorting based on resource dates.\nClass CmsDateResourceComparator; // Comparator for sorting resource objects based on dates.\nClass CmsDefaultPostCreateHandler; // Default implementation for the post-create handler interface.\nClass CmsDefaultResourceCollector; // A default resource collector to generate some example list of resources from the VFS.\nClass CmsExtendedCollectorData; // Extended data structure for the collector, parsed from the collector parameters.\nClass CmsPriorityDateResourceComparator; // Comparator for sorting resource objects based on priority and date.\nClass CmsPriorityResourceCollector; // A collector to fetch sorted XML contents in a folder or subtree based on their priority and date or title values.\nClass CmsPriorityTitleResourceComparator; // Comparator for sorting resource objects based on priority and title.\nClass CmsPropertyResourceComparator; // Comparator for sorting resource objects based on a selected property value.\nClass CmsSolrCollector; // A Solr collector.\nClass CmsSubscriptionCollector; // A collector that returns visited or subscribed resources depending on the current user and parameters.\nClass CmsTimeFrameCategoryCollector; // A collector that allows to collect resources within a time range based upon a configurable property that contains a time stamp.\nClass ComparatorInverter; // Wrapper around a comparator that inverts comparison results which may e.g.\n", "des": "Collectors allow to gather lists of OpenCms resources from the OpenCms VFS using specific rules."}
{"index": 582, "repo": "commons-collections-3.2.2", "code": "package keyvalue;\n\nClass AbstractKeyValue; // Abstract pair class to assist with creating KeyValue and Map.Entry implementations.\nClass AbstractMapEntry; // Abstract Pair class to assist with creating correct Map.Entry implementations.\nClass AbstractMapEntryDecorator; // Provides a base decorator that allows additional functionality to be added to a Map.Entry.\nClass DefaultKeyValue; // A mutable KeyValue pair that does not implement Map.Entry.\nClass DefaultMapEntry; // A restricted implementation of Map.Entry that prevents the Map.Entry contract from being broken.\nClass MultiKey; // A MultiKey allows multiple map keys to be merged together.\nClass TiedMapEntry; // A Map.Entry tied to a map underneath.\nClass UnmodifiableMapEntry; // A Map.Entry that throws UnsupportedOperationException when setValue is called.\n", "des": "This package contains implementations of collection and map related key/value classes."}
{"index": 278, "repo": "pdfbox-3.0.0-beta1", "code": "package cos;\n\nInterface COSUpdateInfo;\nInterface ICOSParser;\nInterface ICOSVisitor; // An interface for visiting a PDF document at the type (COS) level.\nClass COSArray; // An array of PDFBase objects as part of the PDF document.\nClass COSBase; // The base object that all objects in the PDF document will extend.\nClass COSBoolean; // This class represents a boolean value in the PDF document.\nClass COSDictionary; // This class represents a dictionary where name/value pairs reside.\nClass COSDocument; // This is the in-memory representation of the PDF document.\nClass COSDocumentState; // An instance of COSDocumentState collects all known states a COSDocument may have and shall allow their evaluation.\nClass COSFloat; // This class represents a floating point number in a PDF document.\nClass COSIncrement; // A COSIncrement starts at a given COSUpdateInfo to collect updates, that have been made to a COSDocument and therefore should be added to it´s next increment.\nClass COSInputStream; // An InputStream which reads from an encoded COS stream.\nClass COSInteger; // This class represents an integer number in a PDF document.\nClass COSName; // A PDF Name object.\nClass COSNull; // This class represents a null PDF object.\nClass COSNumber; // This class represents an abstract number in a PDF document.\nClass COSObject; // This class represents a PDF object.\nClass COSObjectKey; // Object representing the physical reference to an indirect pdf object.\nClass COSOutputStream; // An OutputStream which writes to an encoded COS stream.\nClass COSStream; // This class represents a stream object in a PDF document.\nClass COSString; // A string object, which may be a text string, a PDFDocEncoded string, ASCII string, or byte string.\nClass COSUpdateState; // A COSUpdateState instance manages update states for a COSUpdateInfo.\n", "des": "These are the low level objects that make up a PDF document."}
{"index": 3180, "repo": "tomcat-api-10.1", "code": "package logging;\n\nInterface Log; // A simple logging interface abstracting logging APIs.\nClass LogFactory; // This is a modified LogFactory that uses a simple ServiceLoader based discovery mechanism with a default of using JDK based logging.\nClass LogConfigurationException; // An exception that is thrown only if a suitable LogFactory or Log instance cannot be created by the corresponding factory methods.\n", "des": "Overview"}
{"index": 2720, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class FlatFileItemReaderBuilder<T> extends Object; // A builder implementation for the FlatFileItemReader.\npublic static class FlatFileItemReaderBuilder.DelimitedBuilder<T> extends Object; // A builder for constructing a DelimitedLineTokenizer\npublic static class FlatFileItemReaderBuilder.FixedLengthBuilder<T> extends Object; // A builder for constructing a FixedLengthTokenizer\npublic class FlatFileItemWriterBuilder<T> extends Object; // A builder implementation for the FlatFileItemWriter\npublic static class FlatFileItemWriterBuilder.DelimitedBuilder<T> extends Object; // A builder for constructing a DelimitedLineAggregator\npublic static class FlatFileItemWriterBuilder.FormattedBuilder<T> extends Object; // A builder for constructing a FormatterLineAggregator.\npublic class MultiResourceItemReaderBuilder<T> extends Object; // A builder implementation for the MultiResourceItemReader.\npublic class MultiResourceItemWriterBuilder<T> extends Object; // A builder implementation for the MultiResourceItemWriter.\n", "des": "Builders for file item readers and writers."}
{"index": 3508, "repo": "poi-5.2.3", "code": "package util;\n\nInterface DelayableLittleEndianOutput; // Implementors of this interface allow client code to 'delay' writing to a certain section of a data output stream. A typical application is for writing BIFF records when the size is not known until well after the header has been written.\nInterface FixedField; // behavior of a field at a fixed location within a byte array\nInterface GenericRecordJsonWriter.GenericRecordHandler;\nInterface GenericRecordXmlWriter.GenericRecordHandler;\nInterface LittleEndianConsts; // a repository for constants shared by classes within this package\nInterface LittleEndianInput;\nInterface LittleEndianOutput;\nInterface TempFileCreationStrategy; // Interface used by the TempFile utility class to create temporary files.\nClass ArrayUtil; // Utility classes for dealing with arrays.\nClass BitField; // Manage operations dealing with bit-mapped fields.\nClass BitFieldFactory; // Returns immutable Bitfield instances.\nClass ByteField; // representation of a byte (8-bit) field at a fixed location within a byte array\nClass CodePageUtil; // Utilities for working with Microsoft CodePages.\nClass CodepointsUtil;\nClass Configurator; // Helper for fetching int values from system properties\nClass DefaultTempFileCreationStrategy; // Default implementation of the TempFileCreationStrategy used by TempFile: Files are collected into one directory and by default are deleted on exit from the VM.\nClass Dimension2DDouble;\nClass DrawingDump; // Dump out the aggregated escher records\nClass FontMetricsDumper;\nClass GenericRecordJsonWriter;\nClass GenericRecordUtil;\nClass GenericRecordUtil.AnnotatedFlag;\nClass GenericRecordXmlWriter;\nClass HexDump; // dump data in hexadecimal format\nClass HexRead; // Utilities to read hex from files.\nClass IntegerField; // representation of an integer (32-bit) field at a fixed location within a byte array\n", "des": "Top-level util package are classes that are useful throughout the project."}
{"index": 1615, "repo": "spring-data-neo4j-7.1.2", "code": "package repository;\n\npackage repository.config; // Configuration infrastructure for Neo4j specific repositories, especially dedicated annotations to enable imperative and reactive Spring Data Neo4j repositories.\npackage repository.query; // A set of annotations for providing custom queries to repositories.\npackage repository.support; // This package provides a couple of public support classes for building custom imperative and reactive Spring Data Neo4j repository base classes.\n@NoRepositoryBean public interface Neo4jRepository<T,ID> extends PagingAndSortingRepository<T,ID>, QueryByExampleExecutor<T>, CrudRepository<T,ID>; // Neo4j specific Repository interface.\n@API(status=STABLE, since=\"6.0\") public class NoResultException extends EmptyResultDataAccessException; // Throw when a query doesn't return a required result.\n@NoRepositoryBean public interface ReactiveNeo4jRepository<T,ID> extends ReactiveSortingRepository<T,ID>, ReactiveQueryByExampleExecutor<T>, ReactiveCrudRepository<T,ID>; // Neo4j specific Repository interface with reactive support.\n", "des": "This package provides the Neo4j imperative and reactive repository API."}
{"index": 1699, "repo": "spring-data-couchbase-5.1.2", "code": "package support;\n\npublic class BasicQuery extends Query; // BasicQuery for Querydsl\n@SupportedAnnotationTypes({\"com.querydsl.core.annotations.*\",\"org.springframework.data.couchbase.core.mapping.*\"}) @SupportedSourceVersion(RELEASE_6) public class CouchbaseAnnotationProcessor extends com.querydsl.apt.AbstractQuerydslProcessor; // Annotation processor to create Querydsl query types for QueryDsl annotated classes.\npublic class CouchbaseRepositoryBase<T,ID> extends Object; // Common base for SimpleCouchbaseRepository and SimpleReactiveCouchbaseRepository\npublic class CouchbaseRepositoryFactory extends RepositoryFactorySupport; // Factory to create SimpleCouchbaseRepository instances.\npublic class CouchbaseRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends RepositoryFactoryBeanSupport<T,S,ID>; // The factory bean to create repositories.\npublic interface CrudMethodMetadata;\npublic class DBRef extends Object; // DB references\npublic class DynamicInvocationHandler<T> extends Object implements InvocationHandler; // Invocation Handler for scope/collection/options proxy for repositories\npublic class MappingCouchbaseEntityInformation<T,ID> extends PersistentEntityInformation<T,ID> implements CouchbaseEntityInformation<T,ID>; // Entity Information container.\npublic class QuerydslCouchbasePredicateExecutor<T> extends QuerydslPredicateExecutorSupport<T> implements QuerydslPredicateExecutor<T>; // Couchbase-specific QuerydslPredicateExecutor that allows execution Predicates in various forms.\npublic class QuerydslPredicateExecutorSupport<T> extends Object;\npublic class ReactiveCouchbaseRepositoryFactory extends ReactiveRepositoryFactorySupport;\npublic class ReactiveCouchbaseRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends RepositoryFactoryBeanSupport<T,S,ID>;\npublic class SimpleCouchbaseRepository<T,ID> extends CouchbaseRepositoryBase<T,ID> implements CouchbaseRepository<T,ID>; // Repository base implementation for Couchbase.\npublic class SimpleReactiveCouchbaseRepository<T,ID> extends CouchbaseRepositoryBase<T,ID> implements ReactiveCouchbaseRepository<T,ID>; // Reactive repository base implementation for Couchbase.\npublic class SpringDataCouchbaseQuery<T> extends AbstractCouchbaseQueryDSL<Q> implements com.querydsl.core.Fetchable<T>;\n", "des": "This package contains the Couchbase implementations to support the Spring Data repository abstraction."}
{"index": 1716, "repo": "spring-boot-test-3.1.1", "code": "package util;\n\npublic abstract class ApplicationContextTestUtils extends Object; // Application context related test utilities.\npublic final class TestPropertyValues extends Object; // Test utilities for adding properties.\npublic static final class TestPropertyValues.Pair extends Object; // A single name value pair.\npublic static enum TestPropertyValues.Type extends Enum<TestPropertyValues.Type>; // The type of property source.\n", "des": "General purpose test utilities."}
{"index": 2785, "repo": "spring-expression-6.0.11", "code": "package expression;\n\npackage expression.common; // Common utility classes behind the Spring Expression Language.\npackage expression.spel; // SpEL's central implementation package.\npublic class AccessException extends Exception; // An AccessException is thrown by an accessor if it has an unexpected problem.\npublic interface BeanResolver; // A bean resolver can be registered with the evaluation context and will kick in for bean references: @myBeanName and &myBeanName expressions.\npublic interface ConstructorExecutor; // Executors are built by resolvers and can be cached by the infrastructure to repeat an operation quickly without going back to the resolvers.\n@FunctionalInterface public interface ConstructorResolver; // A constructor resolver attempts to locate a constructor and returns a ConstructorExecutor that can be used to invoke that constructor.\npublic interface EvaluationContext; // Expressions are executed in an evaluation context.\npublic class EvaluationException extends ExpressionException; // Represent an exception that occurs during expression evaluation.\npublic interface Expression; // An expression capable of evaluating itself against context objects.\npublic class ExpressionException extends RuntimeException; // Superclass for exceptions that can occur whilst processing expressions.\npublic class ExpressionInvocationTargetException extends EvaluationException; // This exception wraps (as cause) a checked exception thrown by some method that SpEL invokes.\npublic interface ExpressionParser; // Parses expression strings into compiled expressions that can be evaluated.\npublic interface MethodExecutor; // MethodExecutors are built by the resolvers and can be cached by the infrastructure to repeat an operation quickly without going back to the resolvers.\n@FunctionalInterface public interface MethodFilter; // MethodFilter instances allow SpEL users to fine tune the behaviour of the method resolution process.\npublic interface MethodResolver; // A method resolver attempts to locate a method and returns a command executor that can be used to invoke that method.\npublic enum Operation extends Enum<Operation>; // Supported operations that an OperatorOverloader can implement for any pair of operands.\npublic interface OperatorOverloader; // By default the mathematical operators Operation support simple types like numbers.\npublic class ParseException extends ExpressionException; // Represent an exception that occurs during expression parsing.\npublic interface ParserContext; // Input provided to an expression parser that can influence an expression parsing/compilation routine.\npublic interface PropertyAccessor; // A property accessor is able to read from (and possibly write to) an object's properties.\n", "des": "Core abstractions behind the Spring Expression Language."}
{"index": 156, "repo": "ignite-core-2.15.0", "code": "package closure;\n\nInterface AffinityTask; // Affinity mapped task.\nClass GridClosureProcessor;\nClass GridClosureProcessor.C1<T,R>;\nClass GridClosureProcessor.C1MLA<T,R>;\nClass GridClosureProcessor.C2<R>;\nClass GridClosureProcessor.C2MLA<R>;\nClass GridClosureProcessor.C4;\nClass GridClosureProcessor.C4MLA;\nClass GridPeerDeployAwareTaskAdapter<T,R>; // Peer deployment aware task adapter.\n", "des": "TODO."}
{"index": 202, "repo": "nutch-2.4", "code": "package crawl;\n\nInterface FetchSchedule; // This interface defines the contract for implementations that manipulate fetch times and re-fetch intervals.\nClass AbstractFetchSchedule; // This class provides common methods for implementations of FetchSchedule.\nClass AdaptiveFetchSchedule; // This class implements an adaptive re-fetch algorithm.\nClass CrawlStatus;\nClass DbUpdateMapper;\nClass DbUpdateReducer;\nClass DbUpdaterJob;\nClass DefaultFetchSchedule; // This class implements the default re-fetch schedule.\nClass FetchScheduleFactory; // Creates and caches a FetchSchedule implementation.\nClass GeneratorJob;\nClass GeneratorJob.SelectorEntry;\nClass GeneratorJob.SelectorEntryComparator;\nClass GeneratorMapper;\nClass GeneratorReducer; // Reduce class for generate The #reduce() method write a random integer to all generated URLs.\nClass InjectorJob; // This class takes a flat file of URLs and adds them to the of pages to be crawled.\nClass InjectorJob.UrlMapper;\nClass MD5Signature; // Default implementation of a page signature.\nClass NutchWritable;\nClass Signature;\nClass SignatureComparator;\nClass SignatureFactory; // Factory class, which instantiates a Signature implementation according to the current Configuration configuration.\nClass TextMD5Signature; // Default implementation of a page signature.\nClass TextProfileSignature; // An implementation of a page signature.\nClass URLPartitioner; // Partition urls by host, domain name or IP depending on the value of the parameter 'partition.url.mode' which can be 'byHost', 'byDomain' or 'byIP'\nClass URLPartitioner.FetchEntryPartitioner;\nClass URLPartitioner.SelectorEntryPartitioner;\nClass URLWebPage;\nClass UrlWithScore; // A writable comparable container for an url with score.\nClass UrlWithScore.UrlOnlyPartitioner; // A partitioner by {url}.\nClass UrlWithScore.UrlScoreComparator; // Compares by {url,score}.\nClass UrlWithScore.UrlScoreComparator.UrlOnlyComparator; // Compares by {url}.\nClass WebTableReader; // Displays information about the entries of the webtable\nClass WebTableReader.WebTableRegexMapper; // Filters the entries from the table based on a regex\nClass WebTableReader.WebTableStatCombiner;\nClass WebTableReader.WebTableStatMapper;\n", "des": "Crawl control code and tools to run the crawler."}
{"index": 3292, "repo": "opencms-core-15.0", "code": "package util;\n\nInterface I_CmsFormatterInfo; // Common interface for accessing formatter / resource type infos in JSPs.\nInterface I_CmsJspDeviceSelector; // This interface supports the basic functionality for the device detection.\nClass A_CmsJspCustomContextBean; // Base class for context sensitive custom beans that supports creation via CmsJspStandardContextBean.getBean(String className).\nClass CmsContainerTypeInfoWrapper; // Wrapper bean for querying information related to a container type in JSPs.\nClass CmsDynamicFunctionBeanWrapper; // A wrapper class for using dynamic function beans inside JSPs via the EL.\nClass CmsDynamicFunctionFormatWrapper; // Wrapper class for dynamic function formats which can be used from JSP EL.\nClass CmsErrorBean; // Class to display the error dialog.\nClass CmsFormatterInfoWrapper; // Wrapper class for accessing formatter information from JSPs.\nClass CmsFunctionRenderer; // Class used for rendering dynamic functions (v2).\nClass CmsJspCategoryAccessBean; // Bean for easy access to categories of a resource in JSPs.\nClass CmsJspContainerPageWrapper; // Wrapper for using container pages in JSPs.\nClass CmsJspContentAccessBean; // Allows access to the individual elements of an XML content, usually used inside a loop of a <cms:contentload> tag.\nClass CmsJspContentAccessValueWrapper; // Allows direct access to XML content values, with possible iteration of sub-nodes.\nClass CmsJspContentAccessValueWrapper.NullValueInfo; // The null value info, used to generate RDFA and DND annotations for null values.\nClass CmsJspContentAttachmentsBean; // Allows accessing 'attachments' of an XML content via the EL in JSP code, which in OpenCms are defined as the contents of its detail-only containers.\nClass CmsJspContentLoadBean; // Allows JSP access to the results of a <cms:contentload ...\nClass CmsJspDateSeriesBean; // Bean for easy access to information of an event series.\nClass CmsJspDeviceSelector; // This class provides the detection for different devices, so that the <cms:device type=\"...\">-Tag can detect which device sends the HTTP request.\nClass CmsJspDeviceSelectorDesktopMobileTablet; // Device selector class which distinguishes between the cases \"desktop\", \"mobile\" and \"tablet\".\n", "des": "Utility classes to be used for JSP pages."}
{"index": 486, "repo": "beam-sdks-java-core-2.49.0", "code": "package annotations;\n\nClass DefaultSchema.DefaultSchemaProvider; // SchemaProvider for default schemas.\nClass DefaultSchema.DefaultSchemaProviderRegistrar; // Registrar for default schemas.\nAnnotation Type DefaultSchema; // The DefaultSchema annotation specifies a SchemaProvider class to handle obtaining a schema and row for the specified class.\nAnnotation Type SchemaCaseFormat; // When used on a POJO, Java Bean, or AutoValue class the specified case format will be used for all the generated Schema fields.\nAnnotation Type SchemaCreate; // Can be put on a constructor or a static method, in which case that constructor or method will be used to created instance of the class by Beam's schema code.\nAnnotation Type SchemaFieldDescription; // When used on a POJO field, a Java Bean getter, or an AutoValue getter, the specified description is used for the generated schema field.\nAnnotation Type SchemaFieldName; // When used on a POJO field, a Java Bean getter, or an AutoValue getter, the specified name is used for the generated schema field.\nAnnotation Type SchemaFieldNumber; // When used on a POJO field, a Java Bean getter, or an AutoValue getter, the generated field will have the specified index.\nAnnotation Type SchemaIgnore; // When used on a POJO field or a JavaBean getter, that field or getter is ignored from the inferred schema.\n", "des": "Defines Schema and other classes for representing schema'd data in a Pipeline."}
{"index": 3225, "repo": "commons-configuration2-2.9.0", "code": "package spring;\n\nClass ConfigurationPropertiesFactoryBean; // FactoryBean which wraps a Commons CompositeConfiguration object for usage with PropertiesLoaderSupport.\nClass ConfigurationPropertySource; // Allow use of Apache Commons Configuration Objects as Spring PropertySources\n", "des": "A package containing integrations for the Spring Framework."}
{"index": 790, "repo": "lucene-analyzers-common-8.11.2", "code": "package lv;\n\nClass LatvianAnalyzer; // Analyzer for Latvian.\nClass LatvianStemFilter; // A TokenFilter that applies LatvianStemmer to stem Latvian words.\nClass LatvianStemFilterFactory; // Factory for LatvianStemFilter.\nClass LatvianStemmer; // Light stemmer for Latvian.\n", "des": "Analyzer for Latvian."}
{"index": 390, "repo": "hbase-mapreduce-3.0.0-alpha-4", "code": "package mapred;\n\nInterface TableMap<K extends org.apache.hadoop.io.WritableComparable<? super K>,V>; // Scan an HBase table to sort by a specified sort column.\nInterface TableReduce<K extends org.apache.hadoop.io.WritableComparable,V>; // Write a table, sorting by the input key\nClass Driver; // Driver for hbase mapreduce jobs.\nClass GroupingTableMap; // Extract grouping columns from input record\nClass HRegionPartitioner<K2,V2>; // This is used to partition the output keys into groups of keys.\nClass IdentityTableMap; // Pass the given key and record as-is to reduce\nClass IdentityTableReduce; // Write to table each key, record pair\nClass MultiTableSnapshotInputFormat; // MultiTableSnapshotInputFormat generalizes TableSnapshotInputFormat allowing a MapReduce job to run over one or more table snapshots, with one or more scans configured for each.\nClass RowCounter; // A job with a map to count rows.\nClass TableInputFormat; // Convert HBase tabular data into a format that is consumable by Map/Reduce.\nClass TableInputFormatBase; // A Base for TableInputFormats.\nClass TableMapReduceUtil; // Utility for TableMap and TableReduce\nClass TableOutputFormat; // Convert Map/Reduce output and write it to an HBase table\nClass TableOutputFormat.TableRecordWriter; // Convert Reduce output (key, value) to (HStoreKey, KeyedDataArrayWritable) and write to an HBase table.\nClass TableRecordReader; // Iterate over an HBase table data, return (Text, RowResult) pairs\nClass TableRecordReaderImpl; // Iterate over an HBase table data, return (Text, RowResult) pairs\nClass TableSnapshotInputFormat; // TableSnapshotInputFormat allows a MapReduce job to run over a table snapshot.\nClass TableSnapshotInputFormat.TableSnapshotRegionSplit;\nClass TableSplit; // A table split corresponds to a key range [low, high)\n", "des": "Provides HBase MapReduce Input/OutputFormats, a table indexing MapReduce job, and utility methods."}
{"index": 3748, "repo": "lucene-queryparser-9.7.0", "code": "package simple;\n\nClass SimpleQueryParser; // SimpleQueryParser is used to parse human readable query syntax.\n", "des": "A simple query parser for human-entered queries."}
{"index": 3562, "repo": "guava-32.1.1-jre", "code": "package primitives;\n\nClass Booleans; // Static utility methods pertaining to boolean primitives, that are not already found in either Boolean or Arrays.\nClass Bytes; // Static utility methods pertaining to byte primitives, that are not already found in either Byte or Arrays, and interpret bytes as neither signed nor unsigned.\nClass Chars; // Static utility methods pertaining to char primitives, that are not already found in either Character or Arrays.\nClass Doubles; // Static utility methods pertaining to double primitives, that are not already found in either Double or Arrays.\nClass Floats; // Static utility methods pertaining to float primitives, that are not already found in either Float or Arrays.\nClass ImmutableDoubleArray; // An immutable array of double values, with an API resembling List.\nClass ImmutableDoubleArray.Builder; // A builder for ImmutableDoubleArray instances; obtained using ImmutableDoubleArray.builder(int).\nClass ImmutableIntArray; // An immutable array of int values, with an API resembling List.\nClass ImmutableIntArray.Builder; // A builder for ImmutableIntArray instances; obtained using ImmutableIntArray.builder(int).\nClass ImmutableLongArray; // An immutable array of long values, with an API resembling List.\nClass ImmutableLongArray.Builder; // A builder for ImmutableLongArray instances; obtained using ImmutableLongArray.builder(int).\nClass Ints; // Static utility methods pertaining to int primitives, that are not already found in either Integer or Arrays.\nClass Longs; // Static utility methods pertaining to long primitives, that are not already found in either Long or Arrays.\nClass Primitives; // Contains static utility methods pertaining to primitive types and their corresponding wrapper types.\nClass Shorts; // Static utility methods pertaining to short primitives, that are not already found in either Short or Arrays.\nClass SignedBytes; // Static utility methods pertaining to byte primitives that interpret values as signed.\nClass UnsignedBytes; // Static utility methods pertaining to byte primitives that interpret values as unsigned (that is, any negative value b is treated as the positive value 256 + b).\nClass UnsignedInteger; // A wrapper class for unsigned int values, supporting arithmetic operations.\nClass UnsignedInts; // Static utility methods pertaining to int primitives that interpret values as unsigned (that is, any negative value x is treated as the positive value 2^32 + x).\n", "des": "Static utilities for the eight primitive types and void, and value types for treating them as unsigned or storing them in immutable arrays."}
{"index": 449, "repo": "camel-core-3.0.0-RC1", "code": "package builder;\n\nInterface AdviceWithTask; // Task or command being executed when using the advice with feature.\nInterface EndpointConsumerBuilder; // Type-safe endpoint DSL for building consumer endpoints.\nInterface EndpointProducerBuilder; // Type-safe endpoint DSL for building producer endpoints.\nInterface ErrorHandlerBuilder; // A builder of a Error Handler\nInterface FlexibleAggregationStrategy.CompletionAwareMixin;\nInterface FlexibleAggregationStrategy.TimeoutAwareMixin;\nClass AdviceWithBuilder<T extends ProcessorDefinition<?>>; // A builder when using the advice with feature.\nClass AdviceWithRouteBuilder; // A RouteBuilder which has extended capabilities when using the advice with feature.\nClass AdviceWithTasks; // AdviceWithTask tasks which are used by the AdviceWithRouteBuilder.\nClass AggregationStrategies; // Toolbox class to create commonly used Aggregation Strategies in a fluent manner.\nClass AggregationStrategyClause<T>;\nClass Builder; // A helper class for including portions of the expression and predicate Java DSL Implementation of this builder should favor build expressions using the definition classes from the org.apache.camel.model.language package, to build the routes using the same types as it would happen when using XML DSL.\nClass BuilderSupport; // Base class for implementation inheritance for different clauses in the Java DSL\nClass DataFormatClause<T extends ProcessorDefinition<?>>; // An expression for constructing the different possible DataFormat options.\nClass DeadLetterChannelBuilder; // A builder of a Dead Letter Channel\nClass DefaultErrorHandlerBuilder; // The default error handler builder.\nClass EnrichClause<T extends ProcessorDefinition<?>>;\nClass ErrorHandlerBuilderRef; // Represents a proxy to an error handler builder which is resolved by named reference\nClass ErrorHandlerBuilderSupport; // Base class for builders of error handling.\nClass ExchangeBuilder; // Builder to create Exchange and add headers and set body on the Exchange Message.\nClass ExpressionBuilder; // A helper class for working with expressions.\nClass ExpressionClause<T>; // Represents an expression clause within the DSL which when the expression is complete the clause continues to another part of the DSL\nClass ExpressionClauseSupport<T>; // A support class for building expression clauses.\nClass FlexibleAggregationStrategy<E>; // The Flexible Aggregation Strategy is a highly customizable, fluently configurable aggregation strategy.\n", "des": "The Camel Domain Specific Language for creating Routes, Predicates, Expressions and Error Handlers."}
{"index": 2376, "repo": "pulsar-client-api-3.0.0", "code": "package api;\n\npublic final class AuthData extends Object; // Authentication data.\npublic class EncryptionContext extends Object; // Class representing an encryption context.\npublic static class EncryptionContext.EncryptionKey extends Object; // Encryption key with metadata.\n", "des": "Common data classes used in the Pulsar Client API."}
{"index": 3860, "repo": "lucene-core-9.7.0", "code": "package hppc;\n\nClass BitMixer; // Bit mixing utilities.\nClass IntIntHashMap; // A hash map of int to int, implemented using open addressing with linear probing for collision resolution.\nClass IntIntHashMap.AbstractIterator<E>; // Simplifies the implementation of iterators a bit.\nClass IntIntHashMap.BufferAllocationException; // BufferAllocationException forked from HPPC\n", "des": "package holding hppc related classes."}
{"index": 2694, "repo": "spring-integration-http-6.1.2", "code": "package converter;\n\npublic class MultipartAwareFormHttpMessageConverter extends Object implements org.springframework.http.converter.HttpMessageConverter<org.springframework.util.MultiValueMap<String,?>>; // An HttpMessageConverter implementation that delegates to an instance of AllEncompassingFormHttpMessageConverter while adding the capability to read multipart/form-data content in an HTTP request.\npublic class SerializingHttpMessageConverter extends org.springframework.http.converter.AbstractHttpMessageConverter<Serializable>; // An HttpMessageConverter implementation for Serializable instances.\n", "des": "Provides classes supporting message conversion."}
{"index": 1939, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package influx;\n\n@AutoConfiguration @ConditionalOnClass(org.influxdb.InfluxDB.class) @EnableConfigurationProperties(InfluxDbProperties.class) @ConditionalOnProperty(\"spring.influx.url\") public class InfluxDbAutoConfiguration extends Object; // Auto-configuration for InfluxDB.\n@FunctionalInterface public interface InfluxDbCustomizer; // Callback interface that can be implemented by beans wishing to further customize InfluxDB whilst retaining default auto-configuration.\n@FunctionalInterface public interface InfluxDbOkHttpClientBuilderProvider extends Supplier<okhttp3.OkHttpClient.Builder>; // Provide the OkHttpClient.Builder to use to customize the auto-configured InfluxDB instance.\n@ConfigurationProperties(prefix=\"spring.influx\") public class InfluxDbProperties extends Object; // Configuration properties for InfluxDB.\n", "des": "Auto-configuration for InfluxDB."}
{"index": 1971, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package resource;\n\npackage resource.reactive; // Auto-configuration for Spring Security's Reactive OAuth2 resource server.\npackage resource.servlet; // Auto-configuration for Spring Security's OAuth2 resource server.\npublic class IssuerUriCondition extends SpringBootCondition; // Condition for creating JwtDecoder by oidc issuer location.\npublic class KeyValueCondition extends SpringBootCondition; // Condition for creating a jwt decoder using a public key value.\n@ConfigurationProperties(prefix=\"spring.security.oauth2.resourceserver\") public class OAuth2ResourceServerProperties extends Object; // OAuth 2.0 resource server properties.\npublic static class OAuth2ResourceServerProperties.Jwt extends Object;\npublic static class OAuth2ResourceServerProperties.Opaquetoken extends Object;\n", "des": "Support for Spring Security's OAuth2 resource server."}
{"index": 416, "repo": "hadoop-azure-3.3.6", "code": "package commit;\n\nInterface ResilientCommitByRename; // API exclusively for committing files.\nClass AbfsManifestStoreOperations; // Extension of StoreOperationsThroughFileSystem with ABFS awareness.\nClass AzureManifestCommitterFactory; // A Committer for the manifest committer which performs all bindings needed to work best with abfs.\n", "des": "Support for manifest committer."}
{"index": 1704, "repo": "drill-common-1.21.1", "code": "package util;\n\npublic class ConstructorChecker extends Object;\npublic class DataInputInputStream extends InputStream;\npublic class DataOutputOutputStream extends OutputStream;\npublic class DrillDateTimeFormatter extends Object; // Extends regular Instant.parse(java.lang.CharSequence) with more formats.\npublic class DrillExceptionUtil extends Object; // Utility class which contain methods for conversion Drill ProtoBuf Error and Throwable\npublic class DrillFileUtils extends Object;\npublic class DrillStringUtils extends Object;\npublic class GuavaPatcher extends Object;\npublic class GuavaUtils extends Object; // Utility class which contain methods for conversion guava and shaded guava classes.\npublic class ProtobufPatcher extends Object;\n", "des": "Utilities useful across packages."}
{"index": 2712, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class AmqpItemReaderBuilder<T> extends Object; // A builder implementation for the AmqpItemReader\npublic class AmqpItemWriterBuilder<T> extends Object; // A builder implementation for the AmqpItemWriter\n", "des": "Builders for AMQP item reader and writer."}
{"index": 3865, "repo": "lucene-spatial-extras-9.7.0", "code": "package composite;\n\nClass CompositeSpatialStrategy; // A composite SpatialStrategy based on RecursivePrefixTreeStrategy (RPT) and SerializedDVStrategy (SDV).\nClass CompositeVerifyQuery; // A Query that considers an \"indexQuery\" to have approximate results, and a follow-on ShapeValuesSource is called to verify each hit from TwoPhaseIterator.matches().\nClass IntersectsRPTVerifyQuery; // A spatial Intersects predicate that distinguishes an approximated match from an exact match based on which cells are within the query shape.\n", "des": "Composite strategies."}
{"index": 176, "repo": "ignite-core-2.15.0", "code": "package schedule;\n\nClass IgniteNoopScheduleProcessor; // No-op implementation of IgniteScheduleProcessorAdapter, throws exception on usage attempt.\nClass IgniteScheduleProcessorAdapter; // Schedules cron-based execution of grid tasks and closures.\n", "des": "TODO."}
{"index": 1879, "repo": "shiro-core-2.0.0-alpha-2", "code": "package concurrent;\n\npublic class SubjectAwareExecutor extends Object implements Executor; // Executor implementation that will automatically first associate any argument Runnable instances with the currently available Subject and then dispatch the Subject-enabled runnable to an underlying delegate Executor instance.\npublic class SubjectAwareExecutorService extends SubjectAwareExecutor implements ExecutorService; // ExecutorService implementation that will automatically first associate any argument Runnable or Callable instances with the currently available subject and then dispatch the Subject-enabled runnable or callable to an underlying delegate ExecutorService instance.\npublic class SubjectAwareScheduledExecutorService extends SubjectAwareExecutorService implements ScheduledExecutorService; // Same concept as the SubjectAwareExecutorService but additionally supports the ScheduledExecutorService interface.\n", "des": "Executor, ExecutorService, and ScheduledExecutorService implementations for transparent Subject association with threads in an asynchronous execution environment."}
{"index": 1999, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package webservices;\n\npackage webservices.client; // Auto-configuration for Spring Web Services Clients.\n@AutoConfiguration(after=ServletWebServerFactoryAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.springframework.ws.transport.http.MessageDispatcherServlet.class) @ConditionalOnMissingBean(org.springframework.ws.config.annotation.WsConfigurationSupport.class) @EnableConfigurationProperties(WebServicesProperties.class) public class WebServicesAutoConfiguration extends Object; // Auto-configuration for Spring Web Services.\n@Configuration(proxyBeanMethods=false) @EnableWs protected static class WebServicesAutoConfiguration.WsConfiguration extends Object;\n@ConfigurationProperties(prefix=\"spring.webservices\") public class WebServicesProperties extends Object; // @ConfigurationProperties for Spring Web Services.\npublic static class WebServicesProperties.Servlet extends Object;\n", "des": "Auto-configuration for Spring Web Services."}
{"index": 737, "repo": "spring-data-solr-4.3.15", "code": "package result;\n\nInterface CountEntry;\nInterface Cursor<T>; // Cursor provides a lazy loading abstraction for fetching documents.\nInterface FacetAndHighlightPage<T>; // FacetAndHighlightPage holds a page for each field targeted by the facet query, each highlight returned by the highlight query as well as the page values returned by the solr query\nInterface FacetEntry; // FacetEntry is returned as result of a FacetQuery holding the key (eg. fieldname, query,...), value and valueCount for the requested facet\nInterface FacetFieldEntry; // Entry for facet on field\nInterface FacetPage<T>; // FacetPage holds a page for each field targeted by the facet query as well as the page values returned by facet.query\nInterface FacetPivotFieldEntry; // Entry for facet pivot field.\nInterface FacetQueryEntry; // Facet Entry for facet via query\nInterface FacetQueryResult<T>; // Hold the results of a solr facet query.\nInterface FieldStatsResult; // Specialization of StatsResult to represent statistic information for a field.\nInterface GroupEntry<T>; // Representation of a group in a GroupResult.\nInterface GroupPage<T>; // Representation of a Group result page, holding one GroupResult for each grouping requested on a org.springframework.data.solr.core.query.GroupQuery.\nInterface GroupResult<T>; // Representation of a group in response to group request (i.e. , , ) will have a GroupResult representation.\nInterface HighlightPage<T>; // HighlightPage holds a page for each field targeted by the highlight query as well as the page values returned by the solr query\nInterface HighlightQueryResult<T>; // Hold the results of a solr highlight query.\nInterface PageKey;\nInterface ScoredPage<T>; // Specific type of Page holding max score information.\nInterface SpellcheckedPage<T>;\nInterface SpellcheckQueryResult;\nInterface StatsPage<T>; // Representation of a Stats result page, holding one FieldStatsResult for each field statistic requested on a Query through StatsOptions.\nInterface StatsResult; // Contract to define representation of statistic information requested using StatsOptions.\nInterface TermsEntry;\nInterface TermsFieldEntry;\nInterface TermsPage;\nClass DelegatingCursor<T>; // DelegatingCursor is a base Cursor implementation that temporarily holds data fetched in one run and delegates iteration.\n", "des": "Query result abstractions for Solr returned NamedList."}
{"index": 3041, "repo": "spring-web-6.0.11", "code": "package support;\n\npublic abstract class AbstractMultipartHttpServletRequest extends HttpServletRequestWrapper implements MultipartHttpServletRequest; // Abstract base implementation of the MultipartHttpServletRequest interface.\npublic class ByteArrayMultipartFileEditor extends org.springframework.beans.propertyeditors.ByteArrayPropertyEditor; // Custom PropertyEditor for converting MultipartFiles to byte arrays.\npublic class DefaultMultipartHttpServletRequest extends AbstractMultipartHttpServletRequest; // Default implementation of the MultipartHttpServletRequest interface.\npublic class MissingServletRequestPartException extends ServletException implements ErrorResponse; // Signals the part of a \"multipart/form-data\" request, identified by name could not be found.\npublic class MultipartFilter extends OncePerRequestFilter; // Servlet Filter that resolves multipart requests via a MultipartResolver.\npublic final class MultipartResolutionDelegate extends Object; // A common delegate for HandlerMethodArgumentResolver implementations which need to resolve MultipartFile and Part arguments.\npublic class RequestPartServletServerHttpRequest extends ServletServerHttpRequest; // ServerHttpRequest implementation that accesses one part of a multipart request.\npublic class StandardMultipartHttpServletRequest extends AbstractMultipartHttpServletRequest; // Spring MultipartHttpServletRequest adapter, wrapping a Servlet HttpServletRequest and its Part objects.\npublic class StandardServletMultipartResolver extends Object implements MultipartResolver; // Standard implementation of the MultipartResolver interface, based on the Servlet Part API.\npublic abstract class StandardServletPartUtils extends Object; // Utility methods for standard Servlet Part handling.\npublic class StringMultipartFileEditor extends PropertyEditorSupport; // Custom PropertyEditor for converting MultipartFiles to Strings.\n", "des": "Support classes for the multipart resolution framework."}
{"index": 137, "repo": "ignite-core-2.15.0", "code": "package collision;\n\nClass GridCollisionJobContextAdapter; // Adapter for CollisionJobContext.\nClass GridCollisionManager; // This class defines a collision manager.\n", "des": "TODO."}
{"index": 1063, "repo": "avro-1.11.2", "code": "package path;\n\nInterface PathElement; // root interface for all pieces of an AvroPath expression\nInterface PathPredicate; // a predicate is a filter that restricts items selected by a LocationStep\nInterface PathTracingException<T extends Throwable>; // interface for exceptions that can trace the AvroPath of an error\nInterface PositionalPathPredicate; // filters items by their context position\nClass ArrayPositionPredicate; // Returns items by their position (numeric index) in an array\nClass LocationStep; // Selects items based on their \"path\" (name of a property under which they are stored) relative to the context.\nClass MapKeyPredicate; // Returns items by their position (string key under which they are stored) in a map\nClass UnionTypePredicate; // Returns items by their position (numeric index of type) in a union schema\nClass TracingAvroTypeException; // an AvroTypeException with extra fields used to trace back the path to a bad value through an object graph\nClass TracingClassCastException; // a ClassCastException with extra fields used to trace back the path to a bad value through an object graph\nClass TracingNullPointException; // a NullPointerException with extra fields used to trace back the path to a null value through an object graph\n", "des": "Interfaces and base classes for AvroPath."}
{"index": 2024, "repo": "spring-messaging-6.0.11", "code": "package converter;\n\npublic abstract class AbstractJsonMessageConverter extends AbstractMessageConverter; // Common base class for plain JSON converters, e.g.\npublic abstract class AbstractMessageConverter extends Object implements SmartMessageConverter; // Abstract base class for SmartMessageConverter implementations including support for common properties and a partial implementation of the conversion methods, mainly to check if the converter supports the conversion based on the payload class and MIME type.\npublic class ByteArrayMessageConverter extends AbstractMessageConverter; // A MessageConverter that supports MIME type \"application/octet-stream\" with the payload converted to and from a byte[].\npublic class CompositeMessageConverter extends Object implements SmartMessageConverter; // A MessageConverter that delegates to a list of registered converters to be invoked until one of them returns a non-null result.\n@FunctionalInterface public interface ContentTypeResolver; // Resolve the content type for a message.\npublic class DefaultContentTypeResolver extends Object implements ContentTypeResolver; // A default ContentTypeResolver that checks the MessageHeaders.CONTENT_TYPE header or falls back to a default value.\npublic class GenericMessageConverter extends SimpleMessageConverter; // An extension of the SimpleMessageConverter that uses a ConversionService to convert the payload of the message to the requested type.\npublic class GsonMessageConverter extends AbstractJsonMessageConverter; // Implementation of MessageConverter that can read and write JSON using Google Gson.\npublic class JsonbMessageConverter extends AbstractJsonMessageConverter; // Implementation of MessageConverter that can read and write JSON using the JSON Binding API.\npublic class KotlinSerializationJsonMessageConverter extends AbstractJsonMessageConverter; // Implementation of MessageConverter that can read and write JSON using kotlinx.serialization.\npublic class MappingJackson2MessageConverter extends AbstractMessageConverter; // A Jackson 2 based MessageConverter implementation.\npublic class MarshallingMessageConverter extends AbstractMessageConverter; // Implementation of MessageConverter that can read and write XML using Spring's Marshaller and Unmarshaller abstractions.\npublic class MessageConversionException extends MessagingException; // An exception raised by MessageConverter implementations.\npublic interface MessageConverter; // A converter to turn the payload of a Message from serialized form to a typed Object and vice versa.\npublic class ProtobufJsonFormatMessageConverter extends ProtobufMessageConverter; // Subclass of ProtobufMessageConverter for use with the official \"com.google.protobuf:protobuf-java-util\" library for JSON support.\n", "des": "Provides support for message conversion."}
{"index": 2753, "repo": "spring-batch-infrastructure-5.0.2", "code": "package transaction;\n\npublic class FlushFailedException extends RuntimeException; // Unchecked exception indicating that an error has occurred while trying to flush a buffer.\npublic class ResourcelessTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager;\npublic class TransactionAwareBufferedWriter extends Writer; // Wrapper for a FileChannel that delays actually writing to or closing the buffer if a transaction is active.\npublic class TransactionAwareProxyFactory<T> extends Object; // Factory for transaction aware objects (like lists, sets, maps).\n", "des": "Infrastructure implementations of support transaction concerns."}
{"index": 3398, "repo": "commons-imaging-1.0-alpha3", "code": "package iptc;\n\nInterface IptcType;\nClass IptcBlock; // Represents an IPTC block, a set of key-value pairs of Photoshop IPTC data.\nClass IptcConstants;\nClass IptcParser;\nClass IptcRecord;\nClass IptcTypeLookup;\nClass JpegIptcRewriter; // Interface for Exif write/update/remove functionality for Jpeg/JFIF images.\nClass PhotoshopApp13Data;\nEnum IptcTypes;\n", "des": "JPEG image format IPTC metadata."}
{"index": 368, "repo": "commons-geometry-euclidean-1.0", "code": "package shape;\n\nClass Parallelepiped; // Class representing parallelepipeds, i.e.\nClass Parallelepiped.Builder; // Class designed to aid construction of Parallelepiped instances.\nClass Sphere; // Class representing a 3 dimensional sphere in Euclidean space.\n", "des": "This package provides utilities for constructing basic 3D shapes."}
{"index": 1578, "repo": "spring-security-oauth2-client-6.1.2", "code": "package authentication;\n\npublic class OAuth2AuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // An implementation of an AbstractAuthenticationToken that represents an OAuth 2.0 Authentication.\npublic class OAuth2AuthorizationCodeAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider; // An implementation of an AuthenticationProvider for the OAuth 2.0 Authorization Code Grant.\npublic class OAuth2AuthorizationCodeAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // An AbstractAuthenticationToken for the OAuth 2.0 Authorization Code Grant.\npublic class OAuth2AuthorizationCodeReactiveAuthenticationManager extends Object implements org.springframework.security.authentication.ReactiveAuthenticationManager; // An implementation of an AuthenticationProvider for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.\npublic class OAuth2LoginAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider; // An implementation of an AuthenticationProvider for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.\npublic class OAuth2LoginAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // An AbstractAuthenticationToken for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.\npublic class OAuth2LoginReactiveAuthenticationManager extends Object implements org.springframework.security.authentication.ReactiveAuthenticationManager; // An implementation of an AuthenticationProvider for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.\n", "des": "Support classes and interfaces for authenticating and authorizing a client with an OAuth 2.0 Authorization Server using a specific authorization grant flow."}
{"index": 2622, "repo": "spring-integration-jms-6.1.2", "code": "package dsl;\n\npublic final class Jms extends Object; // Factory class for JMS components.\npublic class JmsDefaultListenerContainerSpec extends JmsListenerContainerSpec<JmsDefaultListenerContainerSpec,org.springframework.jms.listener.DefaultMessageListenerContainer>; // A DefaultMessageListenerContainer specific JmsListenerContainerSpec extension.\npublic abstract class JmsDestinationAccessorSpec<S extends JmsDestinationAccessorSpec<S,A>,A extends org.springframework.jms.support.destination.JmsDestinationAccessor> extends org.springframework.integration.dsl.IntegrationComponentSpec<S,A>; // A base IntegrationComponentSpec for JmsDestinationAccessors.\npublic class JmsInboundChannelAdapterSpec<S extends JmsInboundChannelAdapterSpec<S>> extends org.springframework.integration.dsl.MessageSourceSpec<S,JmsDestinationPollingSource>; // A MessageSourceSpec for a JmsDestinationPollingSource.\npublic static class JmsInboundChannelAdapterSpec.JmsInboundChannelSpecTemplateAware extends JmsInboundChannelAdapterSpec<JmsInboundChannelAdapterSpec.JmsInboundChannelSpecTemplateAware> implements org.springframework.integration.dsl.ComponentsRegistration; // A JmsTemplate-based JmsInboundChannelAdapterSpec extension.\npublic class JmsInboundGatewaySpec<S extends JmsInboundGatewaySpec<S>> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,JmsInboundGateway>; // A MessagingGatewaySpec for a JmsInboundGateway.\npublic static class JmsInboundGatewaySpec.JmsInboundGatewayListenerContainerSpec<S extends JmsListenerContainerSpec<S,C>,C extends org.springframework.jms.listener.AbstractMessageListenerContainer> extends JmsInboundGatewaySpec<JmsInboundGatewaySpec.JmsInboundGatewayListenerContainerSpec<S,C>>; // An AbstractMessageListenerContainer-based JmsInboundGatewaySpec extension.\npublic class JmsListenerContainerSpec<S extends JmsListenerContainerSpec<S,C>,C extends org.springframework.jms.listener.AbstractMessageListenerContainer> extends JmsDestinationAccessorSpec<S,C>; // A JmsDestinationAccessorSpec for JmsListenerContainerSpecs.\npublic class JmsMessageChannelSpec<S extends JmsMessageChannelSpec<S,T>,T extends AbstractJmsChannel> extends JmsPollableMessageChannelSpec<S,T>; // A JmsMessageChannelSpec for subscribable AbstractJmsChannels.\n", "des": "Provides JMS Component support for the Java DSL."}
{"index": 38, "repo": "ignite-core-2.15.0", "code": "package lifecycle;\n\nInterface LifecycleAware; // All components provided in Ignite configuration can implement this interface.\nInterface LifecycleBean; // A bean that reacts to node lifecycle events defined in LifecycleEventType.\nEnum LifecycleEventType; // Node lifecycle event types.\n", "des": "Contains lifecycle-related classes."}
{"index": 818, "repo": "lucene-analyzers-common-8.11.2", "code": "package snowball;\n\npackage snowball.ext; // Autogenerated snowball stemmer implementations.\nClass Among; // This is the rev 502 of the Snowball SVN trunk, now located at GitHub, but modified: made abstract and introduced abstract method stem to avoid expensive reflection in filter class.\nClass SnowballProgram; // This is the rev 502 of the Snowball SVN trunk, now located at GitHub, but modified: made abstract and introduced abstract method stem to avoid expensive reflection in filter class.\n", "des": "Snowball stemmer API"}
{"index": 1120, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package docker;\n\nClass DockerClient;\nClass DockerCommand;\nClass DockerCommandExecutor; // Utility class for executing common docker operations.\nClass DockerExecCommand; // Encapsulates the docker exec command and its command line arguments.\nClass DockerImagesCommand; // Encapsulates the docker images command and its command line arguments.\nClass DockerInspectCommand; // Encapsulates the docker inspect command and its command line arguments.\nClass DockerKillCommand; // Encapsulates the docker kill command and its command line arguments.\nClass DockerLoadCommand;\nClass DockerPullCommand; // Encapsulates the docker pull command and its command line arguments.\nClass DockerRmCommand; // Encapsulates the docker rm command and its command line arguments.\nClass DockerRunCommand;\nClass DockerStartCommand; // Encapsulates the docker start command and its command line arguments.\nClass DockerStopCommand; // Encapsulates the docker stop command and its command line arguments.\nClass DockerVolumeCommand; // Docker Volume Command, run \"docker volume --help\" for more details.\nEnum DockerCommandExecutor.DockerContainerStatus; // Potential states that the docker status can return.\n", "des": "Package containing classes related to Docker commands and common operations used within the @{link DockerLinuxContainerRuntime}."}
{"index": 1630, "repo": "spring-kafka-3.0.9", "code": "package requestreply;\n\npublic class AggregatingReplyingKafkaTemplate<K,V,R> extends ReplyingKafkaTemplate<K,V,Collection<org.apache.kafka.clients.consumer.ConsumerRecord<K,R>>> implements BatchConsumerAwareMessageListener<K,Collection<org.apache.kafka.clients.consumer.ConsumerRecord<K,R>>>; // A replying template that aggregates multiple replies with the same correlation id.\npublic final class CorrelationKey extends Object; // Wrapper for byte[] that can be used as a hash key.\npublic class KafkaReplyTimeoutException extends KafkaException; // Exception when a reply is not received within a timeout.\npublic interface ReplyingKafkaOperations<K,V,R>; // Request/reply operations.\npublic class ReplyingKafkaTemplate<K,V,R> extends KafkaTemplate<K,V> implements BatchMessageListener<K,R>, org.springframework.beans.factory.InitializingBean, org.springframework.context.SmartLifecycle, org.springframework.beans.factory.DisposableBean, ReplyingKafkaOperations<K,V,R>, ConsumerSeekAware; // A KafkaTemplate that implements request/reply semantics.\npublic class RequestReplyFuture<K,V,R> extends CompletableFuture<org.apache.kafka.clients.consumer.ConsumerRecord<K,R>>; // A CompletableFuture for requests/replies.\npublic class RequestReplyMessageFuture<K,V> extends CompletableFuture<org.springframework.messaging.Message<?>>; // A listenable future for Message replies.\npublic class RequestReplyTypedMessageFuture<K,V,P> extends RequestReplyMessageFuture<K,V>; // A listenable future for Message replies with a specific payload type.\n", "des": "Provides classes for request/reply semantics."}
{"index": 2664, "repo": "spring-data-cassandra-4.1.2", "code": "package cdi;\n\npublic class CassandraRepositoryBean<T> extends CdiRepositoryBean<T>; // A bean which represents a Cassandra repository.\npublic class CassandraRepositoryExtension extends CdiRepositoryExtensionSupport; // A portable CDI extension which registers beans for Spring Data Cassandra repositories.\n", "des": "CDI support for Apache Cassandra specific repository implementation."}
{"index": 1247, "repo": "spring-integration-smb-6.1.2", "code": "package filters;\n\npublic class SmbPersistentAcceptOnceFileListFilter extends org.springframework.integration.file.filters.AbstractPersistentAcceptOnceFileListFilter<jcifs.smb.SmbFile>; // Implementation of AbstractPersistentAcceptOnceFileListFilter for SMB.\npublic class SmbRegexPatternFileListFilter extends org.springframework.integration.file.filters.AbstractRegexPatternFileListFilter<jcifs.smb.SmbFile>; // Implementation of AbstractRegexPatternFileListFilter for SMB.\npublic class SmbSimplePatternFileListFilter extends org.springframework.integration.file.filters.AbstractSimplePatternFileListFilter<jcifs.smb.SmbFile>; // Implementation of AbstractSimplePatternFileListFilter for SMB.\npublic class SmbSystemMarkerFilePresentFileListFilter extends org.springframework.integration.file.filters.AbstractMarkerFilePresentFileListFilter<jcifs.smb.SmbFile>; // Implementation of AbstractMarkerFilePresentFileListFilter for SMB.\n", "des": "SMB Namespace support classes."}
{"index": 2312, "repo": "spring-boot-3.1.1", "code": "package metadata;\n\npublic abstract class AbstractDataSourcePoolMetadata<T extends DataSource> extends Object implements DataSourcePoolMetadata; // A base DataSourcePoolMetadata implementation.\npublic class CommonsDbcp2DataSourcePoolMetadata extends AbstractDataSourcePoolMetadata<org.apache.commons.dbcp2.BasicDataSource>; // DataSourcePoolMetadata for an Apache Commons DBCP2 DataSource.\npublic class CompositeDataSourcePoolMetadataProvider extends Object implements DataSourcePoolMetadataProvider; // A DataSourcePoolMetadataProvider implementation that returns the first DataSourcePoolMetadata that is found by one of its delegate.\npublic interface DataSourcePoolMetadata; // Provides access meta-data that is commonly available from most pooled DataSource implementations.\n@FunctionalInterface public interface DataSourcePoolMetadataProvider; // Provide a DataSourcePoolMetadata based on a DataSource.\npublic class HikariDataSourcePoolMetadata extends AbstractDataSourcePoolMetadata<com.zaxxer.hikari.HikariDataSource>; // DataSourcePoolMetadata for a Hikari DataSource.\npublic class OracleUcpDataSourcePoolMetadata extends AbstractDataSourcePoolMetadata<oracle.ucp.jdbc.PoolDataSource>; // DataSourcePoolMetadata for an Oracle UCP DataSource.\npublic class TomcatDataSourcePoolMetadata extends AbstractDataSourcePoolMetadata<org.apache.tomcat.jdbc.pool.DataSource>; // DataSourcePoolMetadata for a Tomcat DataSource.\n", "des": "Support for accessing JDBC DataSource metadata."}
{"index": 477, "repo": "beam-sdks-java-core-2.49.0", "code": "package function;\n\nInterface CloseableThrowingConsumer<ExceptionT extends java.lang.Exception,T>; // A ThrowingConsumer that can be closed.\nInterface ThrowingBiConsumer<T1,T2>; // A BiConsumer which can throw Exceptions.\nInterface ThrowingBiFunction<T1,T2,T3>; // A BiFunction which can throw Exceptions.\nInterface ThrowingConsumer<ExceptionT extends java.lang.Exception,T>; // A Consumer which can throw Exceptions.\nInterface ThrowingFunction<T1,T2>; // A Function which can throw Exceptions.\nInterface ThrowingRunnable; // A Runnable which can throw Exceptions.\n", "des": "Java 8 functional interface extensions."}
{"index": 1498, "repo": "wicket-extensions-10.0.0-M1", "code": "package model;\n\npublic abstract class AbstractCheckBoxModel extends Object implements org.apache.wicket.model.IModel<Boolean>; // Model adapter that makes working with models for checkboxes easier.\n", "des": "Convenience models."}
{"index": 999, "repo": "spring-ws-3.0.10.RELEASE", "code": "package jms;\n\npackage jms.support; // Classes supporting the org.springframework.ws.transport.jms package.\nInterface JmsTransportConstants; // Declares JMS-specific transport constants.\nClass JmsMessageReceiver; // Convenience base class for JMS server-side transport objects.\nClass JmsMessageSender; // WebServiceMessageSender implementation that uses JMS Messages.\nClass JmsReceiverConnection; // Implementation of WebServiceConnection that is used for server-side JMS access.\nClass JmsSenderConnection; // Implementation of WebServiceConnection that is used for client-side JMS access.\nClass WebServiceMessageListener; // Spring SessionAwareMessageListener that can be used to handle incoming Message service requests.\nClass JmsTransportException; // Exception that is thrown when an error occurs in the JMS transport.\n", "des": "Package providing support for handling messages via JMS."}
{"index": 1647, "repo": "jena-core-4.9.0", "code": "package irix;\n\npublic class Chars3986 extends Object; // Characters and character classes\npublic class IRIException extends JenaException; // Exception thrown due to IRI problems.\npublic interface IRIProvider; // Provider: an implementation of a factory for IRIs.\npublic class IRIProviderAny extends Object implements IRIProvider; // Non-resolving provider that accepts anything string for <...>.\npublic class IRIProviderJDK extends Object implements IRIProvider; // IRIProvider implemented using java.net.URI.\npublic class IRIProviderJenaIRI extends Object implements IRIProvider; // Provider for IRIx using the jena-iri module.\npublic static class IRIProviderJenaIRI.IRIxJena extends IRIx; // IRIx implementation for the jena-iri provider.\npublic class IRIs extends Object; // Operations in support of IRIx.\npublic abstract class IRIx extends Object; // Support for RFC3986 IRIs.\npublic class IRIxResolver extends Object; // A resolver is a base IRI and a policy for resolution.\npublic static class IRIxResolver.Builder extends Object;\npublic class RelativeIRIException extends IRIException; // Exception thrown due to relative IRIs when not permitted.\npublic class SetupJenaIRI extends Object; // Setup of jena-iri package IRI Factory for parsing and for checking.\npublic class SystemIRIx extends Object; // System setup and configuration.\n", "des": "Support for RFC3986 IRIs."}
{"index": 2742, "repo": "spring-batch-infrastructure-5.0.2", "code": "package stax;\n\npublic class DefaultFragmentEventReader extends Object implements FragmentEventReader; // Default implementation of FragmentEventReader\npublic interface FragmentEventReader extends XMLEventReader; // Interface for event readers which support treating XML fragments as standalone XML documents by wrapping the fragments with StartDocument and EndDocument events.\npublic class NoStartEndDocumentStreamWriter extends Object; // Delegating XMLEventWriter, which ignores start and end document events, but passes through everything else.\npublic class UnclosedElementCollectingEventWriter extends Object; // Delegating XMLEventWriter, which collects the QNames of elements that were opened but not closed.\npublic class UnopenedElementClosingEventWriter extends Object; // Delegating XMLEventWriter, which writes EndElement events that match a given collection of QNames directly to the underlying java.io.Writer instead of to the delegate XMLEventWriter.\n", "des": "Item reader and writer based on Stax."}
{"index": 3705, "repo": "solr-core-9.3.0", "code": "package stats;\n\nClass CollectionStats; // Modifiable version of CollectionStatistics useful for aggregation of per-shard stats.\nClass ExactSharedStatsCache; // This class implements exact caching of statistics.\nClass ExactStatsCache; // This class implements exact caching of statistics.\nClass ExactStatsCache.ExactStatsSource;\nClass LocalStatsCache; // Default implementation that simply ignores global term statistics, and always uses local term statistics.\nClass LocalStatsSource; // Convenience class that wraps a local SolrIndexSearcher to provide local statistics.\nClass LRUStatsCache; // Unlike ExactStatsCache this implementation preserves term stats across queries in a set of LRU caches (with the same life-cycle as SolrIndexSearcher), and based on surface features of a query it determines the need to send additional requests to retrieve local term and collection statistics from shards.\nClass StatsCache; // This class represents a cache of global document frequency information for selected terms.\nClass StatsCache.StatsCacheMetrics;\nClass StatsSource; // The purpose of this class is only to provide two pieces of information necessary to create Weight from a Query, that is TermStatistics for a term and CollectionStatistics for the whole collection.\nClass StatsUtil; // Various utilities for de/serialization of term stats and collection stats.\nClass TermStats; // Modifiable version of TermStatistics useful for aggregation of per-shard stats.\n", "des": "APIs and Classes implementing the Stats component used for document frequency calculations."}
{"index": 1110, "repo": "fontbox-3.0.0-beta1", "code": "package type1;\n\nInterface Type1CharStringReader; // Something which can read Type 1 CharStrings, namely Type 1 and CFF fonts.\nClass Type1Font; // Represents an Adobe Type 1 (.pfb) font.\nClass DamagedFontException; // Thrown when a font is damaged and cannot be read.\n", "des": "This package holds classes used to parse Type1-Fonts."}
{"index": 1705, "repo": "spring-integration-jmx-6.1.2", "code": "package jmx;\n\npackage jmx.config; // Provides classes for configuration - parsers, namespace handlers.\npublic class AttributePollingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<Object>; // A MessageSource implementation that retrieves the current value of a JMX attribute each time AbstractMessageSource.receive() is invoked.\npublic class DefaultMBeanAttributeFilter extends Object implements MBeanAttributeFilter;\npublic class DefaultMBeanObjectConverter extends Object implements MBeanObjectConverter;\npublic abstract class JmxHeaders extends Object; // Constants for JMX related Message Header keys.\n@FunctionalInterface public interface MBeanAttributeFilter;\n@FunctionalInterface public interface MBeanObjectConverter;\npublic class MBeanTreePollingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<Object>; // A MessageSource implementation that retrieves a snapshot of a filtered subset of the MBean tree.\npublic class NamedFieldsMBeanAttributeFilter extends Object implements MBeanAttributeFilter;\npublic class NotificationListeningMessageProducer extends org.springframework.integration.endpoint.MessageProducerSupport implements NotificationListener, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>; // A JMX NotificationListener implementation that will send Messages containing the JMX Notification instances as their payloads.\npublic class NotificationPublishingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler; // An AbstractMessageHandler implementation to publish an incoming message as a JMX Notification.\n@ManagedResource @IntegrationManagedResource public static class NotificationPublishingMessageHandler.PublisherDelegate extends Object implements org.springframework.jmx.export.notification.NotificationPublisherAware; // Simple class used for the actual MBean instances to be registered.\npublic class NotNamedFieldsMBeanAttributeFilter extends Object implements MBeanAttributeFilter;\npublic class OperationInvokingMessageHandler extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler; // A MessageHandler implementation for invoking JMX operations based on the Message sent to its AbstractMessageHandler.handleMessage(Message) method.\n", "des": "Base package for JMX support."}
{"index": 2948, "repo": "spring-integration-xml-6.1.2", "code": "package xml;\n\npackage xml.config; // Contains parser classes for the XML namespace support.\npackage xml.result; // Provides ResultFactory that will return Result, possibly taking into account payload instance.\npackage xml.router; // Provides XML message routers.\npackage xml.selector; // Provides XML-centric MessageSelector implementations.\npackage xml.source; // Provides various SourceFactory implementations.\npackage xml.splitter; // Provides implementations of AbstractMessageSplitter.\npackage xml.transformer; // Provides Transformer and Enricher implementations.\npackage xml.xpath; // Provides XPath supporting classes.\npublic class AggregatedXmlMessageValidationException extends RuntimeException; // The validation exception which aggregate all the XML validation errors.\npublic class DefaultXmlPayloadConverter extends Object implements XmlPayloadConverter; // Default implementation of XmlPayloadConverter.\npublic interface XmlPayloadConverter; // Converter for creating XML Document, Node or Source instances from other types (e.g.\n", "des": "Root package of the XML Module."}
{"index": 3655, "repo": "solr-core-9.3.0", "code": "package api;\n\nClass AddReplicaPropertyAPI; // V2 API for adding a property to a collection replica\nClass AddReplicaPropertyAPI.AddReplicaPropertyRequestBody;\nClass AdminAPIBase; // A common parent for \"admin\" (i.e.\nClass AliasPropertyAPI; // V2 APIs for managing and inspecting properties for collection aliases\nClass AliasPropertyAPI.GetAliasPropertyResponse;\nClass AliasPropertyAPI.GetAllAliasPropertiesResponse;\nClass AliasPropertyAPI.UpdateAliasPropertiesRequestBody;\nClass AliasPropertyAPI.UpdateAliasPropertyRequestBody;\nClass AllCoresStatusAPI; // V2 API for retrieving status information for all cores on the receiving node.\nClass BackupAPIBase; // Base class that facilitates reuse of common validation logic for collection-backup APIs.\nClass BalanceReplicasAPI; // V2 API for balancing the replicas that already exist across a set of nodes.\nClass BalanceReplicasAPI.BalanceReplicasRequestBody;\nClass BalanceShardUniqueAPI; // V2 API for insuring that a particular property is distributed evenly amongst the physical nodes comprising a collection.\nClass BalanceShardUniqueAPI.BalanceShardUniqueRequestBody;\nClass CancelTaskAPI; // V2 API for cancelling a currently running \"task\".\nClass CollectionPropertyAPI; // V2 API for modifying collection-level properties.\nClass CollectionPropertyAPI.UpdateCollectionPropertyRequestBody;\nClass CollectionStatusAPI; // V2 API for displaying basic information about a single collection.\nClass CoreAdminAPIBase; // A common parent for admin Core Jersey-based APIs.\nClass CoreReplicationAPI; // V2 APIs for inspecting and replicating indices\nClass CoreReplicationAPI.FileListResponse; // Response for CoreReplicationAPI.fetchFileList(long).\nClass CoreReplicationAPI.FileMetaData; // Contained in CoreReplicationAPI.FileListResponse, this holds metadata from a file for an index\nClass CoreReplicationAPI.IndexVersionResponse; // Response for CoreReplicationAPI.fetchIndexVersion().\nClass CoreSnapshotAPI; // V2 API for Creating, Listing, and Deleting Core Snapshots.\nClass CoreSnapshotAPI.CreateSnapshotResponse; // The Response for CoreSnapshotAPI's CoreSnapshotAPI.createSnapshot(String, String, String)\nClass CoreSnapshotAPI.DeleteSnapshotResponse; // The Response for CoreSnapshotAPI's CoreSnapshotAPI.deleteSnapshot(String, String, String)\n", "des": "V2 API implementations for \"admin\" APIs."}
{"index": 3873, "repo": "solr-ltr-9.3.0", "code": "package ltr;\n\npackage ltr.feature; // Contains Feature related classes\npackage ltr.interleaving; // Contains Various Interleaving auxiliary classes\npackage ltr.model; // Contains Model related classes\npackage ltr.norm; // A normalizer normalizes the value of a feature.\npackage ltr.search; // APIs and classes for parsing and processing search requests\npackage ltr.store; // Contains feature and model store related classes.\nClass CSVFeatureLogger; // A feature logger that logs in csv format.\nClass DocInfo;\nClass FeatureLogger; // FeatureLogger can be registered in a model and provide a strategy for logging the feature values.\nClass LTRRescorer; // Implements the rescoring logic.\nClass LTRScoringQuery; // The ranking query that is run, reranking results using the LTRScoringModel algorithm\nClass LTRScoringQuery.FeatureInfo;\nClass LTRThreadModule; // The LTRThreadModule is optionally used by the LTRQParserPlugin and LTRFeatureLoggerTransformerFactory classes to parallelize the creation of Feature.FeatureWeight objects.\nClass SolrQueryRequestContextUtils;\nEnum FeatureLogger.FeatureFormat;\n", "des": "This package contains the main logic for performing the reranking using a Learning to Rank model."}
{"index": 2519, "repo": "spring-security-core-6.1.2", "code": "package hierarchicalroles;\n\npublic class CycleInRoleHierarchyException extends RuntimeException; // Exception that is thrown because of a cycle in the role hierarchy definition\npublic final class NullRoleHierarchy extends Object implements RoleHierarchy;\npublic interface RoleHierarchy; // The simple interface of a role hierarchy.\npublic class RoleHierarchyAuthoritiesMapper extends Object implements GrantedAuthoritiesMapper;\npublic class RoleHierarchyImpl extends Object implements RoleHierarchy; // This class defines a role hierarchy for use with various access checking components.\npublic final class RoleHierarchyUtils extends Object; // Utility methods for RoleHierarchy.\n", "des": "Role hierarchy implementation."}
{"index": 951, "repo": "spring-ws-3.0.10.RELEASE", "code": "package endpoint;\n\npackage endpoint.adapter; // Provides miscellaneous EndpointAdapter implementations.\npackage endpoint.annotation; // JDK 1.5+ annotations for Spring-WS endpoints.\npackage endpoint.interceptor; // Provides miscellaneous endpoints EndpointInterceptor implementations.\npackage endpoint.mapping; // Provides miscellaneous endpoints EndpointMapping implementations.\npackage endpoint.support; // Provides helper classes for EndpointAdapter, EndpointInteceptor, and EndpointMapping implementations.\nInterface MessageEndpoint; // Defines the basic contract for Web Services interested in the entire message payload.\nInterface PayloadEndpoint; // Defines the basic contract for Web Services interested in just the message payload.\nClass AbstractDom4jPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractDomPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractEndpointExceptionResolver; // Abstract base class for EndpointExceptionResolvers.\nClass AbstractJDomPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractLoggingInterceptor; // Abstract base class for EndpointInterceptor instances that log a part of a WebServiceMessage.\nClass AbstractMarshallingPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractSaxPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractStaxEventPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractStaxPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractStaxStreamPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractValidatingMarshallingPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractXomPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass MethodEndpoint; // Represents a bean method that will be invoked as part of an incoming Web service message.\n", "des": "Provides standard endpoint, and EndpointAdapter implementations."}
{"index": 2355, "repo": "spring-boot-3.1.1", "code": "package server;\n\npublic abstract class AbstractReactiveWebServerFactory extends AbstractConfigurableWebServerFactory implements ConfigurableReactiveWebServerFactory; // Abstract base class for ReactiveWebServerFactory implementations.\npublic interface ConfigurableReactiveWebServerFactory extends ConfigurableWebServerFactory, ReactiveWebServerFactory; // Configurable ReactiveWebServerFactory.\n@FunctionalInterface public interface ReactiveWebServerFactory extends WebServerFactory; // Factory interface that can be used to create a reactive WebServer.\n", "des": "Reactive web server abstractions."}
{"index": 888, "repo": "cassandra-all-4.1.2", "code": "package hints;\n\nInterface HintsServiceMBean;\nInterface InputPosition; // Marker interface for file positions as provided by the various ChecksummedDataReader implementations.\nInterface SerializableHintMessage;\nClass ChecksummedDataInput; // A RandomAccessReader wrapper that calculates the CRC in place.\nClass CompressedChecksummedDataInput;\nClass CompressedHintsWriter;\nClass EncryptedChecksummedDataInput;\nClass EncryptedHintsWriter;\nClass Hint; // Encapsulates the hinted mutation, its creation time, and the gc grace seconds param for each table involved.\nClass HintMessage; // The message we use to dispatch and forward hints.\nClass HintMessage.Serializer;\nClass HintsService; // A singleton-ish wrapper over various hints components: - a catalog of all hints stores - a single-threaded write executor - a multi-threaded dispatch executor - the buffer pool for writing hints into - an optional scheduled task to clean up the applicable hints files The front-end for everything hints related.\nClass HintVerbHandler; // Verb handler used both for hint dispatch and streaming.\nClass PendingHintsInfo;\n", "des": "Hints subsystem consists of several components."}
{"index": 514, "repo": "commons-vfs2-2.9.0", "code": "package vcs;\n\nInterface VcsAdd;\nInterface VcsCheckout;\nInterface VcsCommit;\nInterface VcsCommitListener;\nInterface VcsDelete;\nInterface VcsLog;\nInterface VcsLogEntryHandler;\nInterface VcsModifyListener;\nInterface VcsRevert; // Restores pristine working copy file and cancels all local modifications.\nInterface VcsUpdate;\nInterface VcsUpdateListener;\nClass VcsLogEntry;\nEnum VcsStatus;\n", "des": "VFS version control operations."}
{"index": 828, "repo": "calcite-core-1.34.0", "code": "package config;\n\nInterface CalciteConnectionConfig; // Interface for reading connection properties within Calcite code.\nClass CalciteConnectionConfigImpl; // Implementation of CalciteConnectionConfig.\nClass CalciteSystemProperty<T>; // A Calcite specific system property that is used to configure various aspects of the framework.\nEnum CalciteConnectionProperty; // Properties that may be specified on the JDBC connect string.\nEnum CharLiteralStyle; // Styles of character literal.\nEnum Lex; // Named, built-in lexical policy.\nEnum NullCollation; // Strategy for how NULL values are to be sorted if NULLS FIRST or NULLS LAST are not specified in an item in the ORDER BY clause.\n", "des": "Configuration."}
{"index": 2728, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class JsonFileItemWriterBuilder<T> extends Object; // Builder for JsonFileItemWriter.\npublic class JsonItemReaderBuilder<T> extends Object; // A builder for JsonItemReader.\n", "des": "Builders for JSON item reader and writer."}
{"index": 2933, "repo": "groovy-4.0.13", "code": "package messages;\n\npublic class ExceptionMessage extends Message; // A class for error messages produced by the parser system.\npublic class LocatedMessage extends SimpleMessage; // A base class for compilation messages.\npublic abstract class Message extends Object; // A base class for compilation messages.\npublic class SimpleMessage extends Message; // A base class for compilation messages.\npublic class SyntaxErrorMessage extends Message; // A class for error messages produced by the parser system.\npublic class WarningMessage extends LocatedMessage; // A class for warning messages.\n", "des": "Error message classes."}
{"index": 545, "repo": "spring-mobile-device-1.1.5.RELEASE", "code": "package switcher;\n\nInterface SiteSwitcherHandler;\nInterface SiteUrlFactory; // Strategy for constructing different site URLs, such as the 'mobile' site URL.\nClass AbstractSitePathUrlFactory; // Abstract SiteUrlFactory implementation that differentiates each site by the HTTP request path.\nClass AbstractSiteUrlFactory; // Abstract implementation of the SiteUrlFactory interface.\nClass MobileSitePathUrlFactory; // Path based site URL factory implementation that handles requests for the \"mobile\" site.\nClass NormalSitePathUrlFactory; // Path based site URL factory implementation that handles requests for the \"normal\" site.\nClass SiteSwitcherHandlerInterceptor; // A Spring MVC interceptor that switches the user between the mobile, normal, and tablet sites by employing a specific switching algorithm.\nClass SiteSwitcherRequestFilter; // A Servlet 2.3 Filter that switches the user between the mobile and normal site by employing a specific switching algorithm.\nClass StandardSiteSwitcherHandler;\nClass StandardSiteUrlFactory; // Site URL factory implementation that differentiates each site by the value of the server name field.\nClass TabletSitePathUrlFactory; // Path based site URL factory implementation that handles requests for the \"tablet\" site.\n", "des": "Mobile site switcher for Spring MVC-based web apps."}
{"index": 1249, "repo": "spring-integration-smb-6.1.2", "code": "package outbound;\n\npublic class SmbMessageHandler extends org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<jcifs.smb.SmbFile>; // The SMB specific FileTransferringMessageHandler extension.\npublic class SmbOutboundGateway extends org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway<jcifs.smb.SmbFile>; // Outbound Gateway for performing remote file operations via SMB.\n", "des": "Outbound Channel Adapter implementations for SMB protocol."}
{"index": 1603, "repo": "spring-websocket-6.0.11", "code": "package support;\n\npublic abstract class AbstractSockJsService extends Object implements SockJsService, org.springframework.web.cors.CorsConfigurationSource; // An abstract base class for SockJsService implementations that provides SockJS path resolution and handling of static SockJS requests (e.g.\npublic class SockJsHttpRequestHandler extends Object implements org.springframework.web.HttpRequestHandler, org.springframework.web.cors.CorsConfigurationSource, org.springframework.context.Lifecycle, org.springframework.web.context.ServletContextAware; // An HttpRequestHandler that allows mapping a SockJsService to requests in a Servlet container.\n", "des": "Support classes for SockJS including an AbstractSockJsService implementation."}
{"index": 2683, "repo": "spring-data-jpa-3.1.2", "code": "package mapping;\n\npublic class JpaMetamodelMappingContext extends AbstractMappingContext<org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<?>,JpaPersistentProperty>; // MappingContext implementation based on a Jpa Metamodel.\npublic interface JpaPersistentEntity<T> extends PersistentEntity<T,JpaPersistentProperty>; // Interface for a JPA-specific entity.\npublic interface JpaPersistentProperty extends PersistentProperty<JpaPersistentProperty>; // Interface for a JPA-specific PersistentProperty.\n", "des": "JPA specific support classes for the Spring Data mapping subsystem."}
{"index": 1694, "repo": "spring-data-couchbase-5.1.2", "code": "package query;\n\npublic class AnalyticsQuery extends Object;\npublic enum Consistency extends Enum<Consistency>; // Enumeration of different consistency configurations to be used by the queries generated by the framework.\n@Documented @Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Deprecated public @interface Dimensional;\npublic enum FetchType extends Enum<FetchType>; // Setting for specify when to fetch the associated entities\npublic enum HashSide extends Enum<HashSide>; // Hash side to specify hash join.\npublic class Meta extends Object; // Meta-data for Query instances.\npublic static enum Meta.MetaKey extends Enum<Meta.MetaKey>;\npublic class N1QLExpression extends Object; // A N1QL Query Expression\n@Target(FIELD) @Retention(RUNTIME) public @interface N1qlJoin; // This annotation is targeted for entity field which is a list of the associated entities fetched by ANSI Join across the entities available from Couchbase Server 5.5\n@Deprecated @Target(TYPE) @Retention(RUNTIME) public @interface N1qlPrimaryIndexed;\npublic class N1QLQuery extends Query;\n@Target(TYPE) @Retention(RUNTIME) @Deprecated public @interface N1qlSecondaryIndexed;\npublic class OptionsBuilder extends Object; // Methods for building Options objects for Couchbae APIs.\npublic class Query extends Object;\npublic class QueryCriteria extends Object implements QueryCriteriaDefinition;\npublic static enum QueryCriteria.ChainOperator extends Enum<QueryCriteria.ChainOperator>;\npublic interface QueryCriteriaDefinition;\npublic class StringQuery extends Query; // Query created from the string in @Query annotation in the repository interface.\n@Documented @Target(METHOD) @Retention(RUNTIME) @Deprecated public @interface View;\n@Target(TYPE) @Retention(RUNTIME) @Deprecated public @interface ViewIndexed;\n@Documented @Target(METHOD) @Retention(RUNTIME) public @interface WithConsistency; // Annotation to set the scan consistency of N1QL queries with Couchbase.\n", "des": "This package contains annotations and classes relative to querying with Couchbase (whether through views or N1QL) and the associated indexes."}
{"index": 2707, "repo": "spring-integration-ftp-6.1.2", "code": "package server;\n\npublic abstract class ApacheMinaFtpEvent extends org.springframework.integration.file.remote.server.FileServerEvent; // ApplicationEvent generated from Apache Mina ftp events.\npublic class ApacheMinaFtplet extends org.apache.ftpserver.ftplet.DefaultFtplet implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // A listener for FTP events emitted by an Apache Mina ftp server.\npublic class DirectoryCreatedEvent extends FtpRequestEvent; // An event emitted when a directory is created.\npublic class FileWrittenEvent extends FtpRequestEvent; // An event that is emitted when a file is written.\npublic abstract class FtpRequestEvent extends ApacheMinaFtpEvent; // Base class for all events having an FtpRequest.\npublic class PathMovedEvent extends FtpRequestEvent; // An event emitted when a path is moved.\npublic class PathRemovedEvent extends FtpRequestEvent; // An event emitted when a file or directory is removed.\npublic class SessionClosedEvent extends ApacheMinaFtpEvent; // An event emitted when a session is closed.\npublic class SessionOpenedEvent extends ApacheMinaFtpEvent; // An event emitted when a session is opened.\n", "des": "Provides classes related to FTP servers."}
{"index": 1524, "repo": "spring-context-6.0.11", "code": "package support;\n\npublic class DefaultFormattingConversionService extends FormattingConversionService; // A specialization of FormattingConversionService configured by default with converters and formatters appropriate for most applications.\npublic class FormatterPropertyEditorAdapter extends PropertyEditorSupport; // Adapter that bridges between Formatter and PropertyEditor.\npublic class FormattingConversionService extends org.springframework.core.convert.support.GenericConversionService implements FormatterRegistry, EmbeddedValueResolverAware; // A ConversionService implementation designed to be configured as a FormatterRegistry.\npublic class FormattingConversionServiceFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<FormattingConversionService>, EmbeddedValueResolverAware, org.springframework.beans.factory.InitializingBean; // A factory providing convenient access to a FormattingConversionService configured with converters and formatters for common types such as numbers and datetimes.\n", "des": "Support classes for the formatting package, providing common implementations as well as adapters."}
{"index": 3604, "repo": "lucene-queries-9.7.0", "code": "package docvalues;\n\nClass BoolDocValues; // Abstract FunctionValues implementation which supports retrieving boolean values.\nClass DocTermsIndexDocValues; // Serves as base class for FunctionValues based on DocTermsIndex.\nClass DoubleDocValues; // Abstract FunctionValues implementation which supports retrieving double values.\nClass FloatDocValues; // Abstract FunctionValues implementation which supports retrieving float values.\nClass IntDocValues; // Abstract FunctionValues implementation which supports retrieving int values.\nClass LongDocValues; // Abstract FunctionValues implementation which supports retrieving long values.\nClass StrDocValues; // Abstract FunctionValues implementation which supports retrieving String values.\nClass DocTermsIndexDocValues.DocTermsIndexException; // Custom Exception to be thrown when the DocTermsIndex for a field cannot be generated\n", "des": "FunctionValues for different data types."}
{"index": 2992, "repo": "spring-ldap-core-3.1.0", "code": "package typeconversion;\n\npackage typeconversion.impl; // Provides an implementation of the ConverterManager interface.\npublic final class ConverterException extends NamingException; // Thrown by the conversion framework to indicate an error condition - typically a failed type conversion.\npublic interface ConverterManager; // A simple interface to be implemented to provide type conversion functionality.\n", "des": "Provides an interface to be implemented to create a type conversion framework."}
{"index": 3498, "repo": "poi-5.2.3", "code": "package common;\n\nInterface POIFSConstants; // A repository for constants shared by POI classes.\nClass POIFSBigBlockSize; // A class describing attributes of the Big Block Size\n", "des": "common package contains constants and other classes shared across all POIFS subpackages"}
{"index": 1345, "repo": "groovy-all-4.0.13", "code": "package vmplugin;\n\npublic interface VMPlugin; // Interface to access VM version based actions.\npublic class VMPluginFactory extends Object; // Factory class to get functionality based on the VM version.\n", "des": "JVM version specific classes."}
{"index": 3837, "repo": "lucene-core-9.7.0", "code": "package codecs;\n\npackage codecs.compressing; // Compressing helper classes.\npackage codecs.lucene90; // Lucene 9.0 file format.\npackage codecs.lucene94; // Lucene 9.4 file format.\npackage codecs.lucene95; // Lucene 9.5 file format.\npackage codecs.perfield; // Postings format that can delegate to different formats per-field.\nClass BlockTermState; // Holds all state required for PostingsReaderBase to produce a PostingsEnum without re-seeking the terms dict.\nClass BufferingKnnVectorsWriter; // Buffers up pending vector value(s) per doc, then flushes when segment flushes.\nClass Codec; // Encodes/decodes an inverted index segment.\nClass CodecUtil; // Utility class for reading and writing versioned headers.\nClass CompetitiveImpactAccumulator; // This class accumulates the (freq, norm) pairs that may produce competitive scores.\nClass CompoundDirectory; // A read-only Directory that consists of a view over a compound file.\nClass CompoundFormat; // Encodes/decodes compound files\nClass DocValuesConsumer; // Abstract API that consumes numeric, binary and sorted docvalues.\nClass DocValuesFormat; // Encodes/decodes per-document values.\nClass DocValuesProducer; // Abstract API that produces numeric, binary, sorted, sortedset, and sortednumeric docvalues.\nClass FieldInfosFormat; // Encodes/decodes FieldInfos\nClass FieldsConsumer; // Abstract API that consumes terms, doc, freq, prox, offset and payloads postings.\nClass FieldsProducer; // Abstract API that produces terms, doc, freq, prox, offset and payloads postings.\nClass FilterCodec; // A codec that forwards all its method calls to another codec.\nClass KnnFieldVectorsWriter<T>; // Vectors' writer for a field\nClass KnnVectorsFormat; // Encodes/decodes per-document vector and any associated indexing structures required to support nearest-neighbor search\nClass KnnVectorsReader; // Reads vectors from an index.\nClass KnnVectorsWriter; // Writes vectors to an index.\nClass KnnVectorsWriter.MergedVectorValues; // View over multiple vector values supporting iterator-style access via DocIdMerger.\nClass LiveDocsFormat; // Format for live/deleted documents\n", "des": "Codecs API: API for customization of the encoding and structure of the index."}
{"index": 141, "repo": "ignite-core-2.15.0", "code": "package discovery;\n\nInterface CustomEventListener<T extends DiscoveryCustomMessage>; // Listener interface.\nInterface DiscoveryCustomMessage; // DiscoveryCustomMessage messages are handled by discovery protocol which provides some guarantees around them.\nInterface DiscoveryServerOnlyCustomMessage; // DiscoveryServerOnlyCustomMessage is the special subtype of the DiscoveryCustomMessage message that is delivered only on server nodes of the cluster.\nInterface IgniteClusterNode;\nInterface IgniteDiscoverySpi;\nInterface IgniteDiscoverySpiInternalListener; // For TESTING only.\nClass ClusterMetricsImpl; // Cluster metrics proxy.\nClass ConsistentIdMapper; // Class is needed for map UUID to consistent id and vice versa.\nClass CustomMessageWrapper;\nClass DiscoCache;\nClass DiscoveryLocalJoinData; // Information about local join event.\nClass DiscoveryMessageResultsCollector<M,R>;\nClass DiscoveryMessageResultsCollector.NodeMessage<M>;\nClass GridDiscoveryManager; // Discovery SPI manager.\nClass GridDiscoveryTopologySnapshot; // Topology snapshot managed by discovery manager.\nClass SecurityAwareCustomMessageWrapper; // Extends CustomMessageWrapper with ID of security subject that initiated the current message.\nClass IncompleteDeserializationException; // Exception which can be used to access a message which failed to be deserialized completely using Java serialization.\n", "des": "TODO."}
{"index": 1072, "repo": "hadoop-yarn-common-3.3.6", "code": "package metrics;\n\nInterface EventTypeMetrics<T extends Enum<T>>;\nClass CustomResourceMetrics; // This is base class for allocated and available metrics for custom resources.\nClass CustomResourceMetricValue; // Class that holds metrics values for custom resources in a map keyed with the name of the custom resource.\nClass DisableEventTypeMetrics;\nClass GenericEventTypeMetrics<T extends Enum<T>>;\nClass GenericEventTypeMetrics.EventTypeMetricsBuilder<T extends Enum<T>>; // Builder class for GenericEventTypeMetrics.\n", "des": "Provides common metrics (available, allocated) for custom resources."}
{"index": 2267, "repo": "spring-vault-core-3.0.4", "code": "package configuration;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(VaultRepositoriesRegistrar.class) @QueryCreatorType(value=VaultQueryCreator.class, repositoryQueryType=VaultPartTreeQuery.class) public @interface EnableVaultRepositories; // Annotation to activate Vault repositories.\npublic class VaultRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport; // Vault specific ImportBeanDefinitionRegistrar.\npublic class VaultRepositoryConfigurationExtension extends KeyValueRepositoryConfigurationExtension; // RepositoryConfigurationExtension for Vault.\n", "des": "Support infrastructure for the configuration of Vault specific repositories."}
{"index": 479, "repo": "beam-sdks-java-core-2.49.0", "code": "package io;\n\npackage io.fs; // Apache Beam FileSystem interfaces and their default implementations.\npackage io.range; // Provides thread-safe helpers for implementing dynamic work rebalancing in position-based bounded sources.\nInterface AvroIO.RecordFormatter<ElementT>; // Users can achieve the same by providing this transform in a ParDo before using write in AvroIO AvroIO.write(Class).\nInterface AvroSink.DatumWriterFactory<T>;\nInterface AvroSource.DatumReaderFactory<T>;\nInterface CompressedSource.DecompressingChannelFactory; // Factory interface for creating channels that decompress the content of an underlying channel.\nInterface FileBasedSink.OutputFileHints; // Provides hints about how to generate output files, such as a suggested filename suffix (e.g.\nInterface FileBasedSink.WritableByteChannelFactory; // Implementations create instances of WritableByteChannel used by FileBasedSink and related classes to allow decorating, or otherwise transforming, the raw data that would normally be written directly to the WritableByteChannel passed into FileBasedSink.WritableByteChannelFactory.create(WritableByteChannel).\nInterface FileIO.Sink<ElementT>; // Specifies how to write elements to individual files in FileIO.write() and FileIO.writeDynamic().\nInterface FileIO.Write.FileNaming; // A policy for generating names for shard files.\nInterface FileSystemRegistrar; // A registrar that creates FileSystem instances from PipelineOptions.\nInterface ShardingFunction<UserT,DestinationT>; // Function for assigning ShardedKeys to input elements for sharded WriteFiles.\nInterface TextRowCountEstimator.SamplingStrategy; // Sampling Strategy shows us when should we stop reading further files.\nInterface UnboundedSource.CheckpointMark; // A marker representing the progress and state of an UnboundedSource.UnboundedReader.\nClass AvroIO; // Avro related classes are deprecated in module beam-sdks-java-core and will be eventually removed.\nClass AvroIO.Parse<T>; // Implementation of AvroIO.parseGenericRecords(org.apache.beam.sdk.transforms.SerializableFunction<org.apache.avro.generic.GenericRecord, T>).\nClass AvroIO.ParseAll<T>; // See AvroIO.parseAllGenericRecords(SerializableFunction) for details.\n", "des": "Defines transforms for reading and writing common storage formats, including AvroIO, and TextIO."}
{"index": 1291, "repo": "spring-core-6.0.11", "code": "package util;\n\npackage util.backoff; // A generic back-off abstraction.\npackage util.comparator; // Useful generic java.util.Comparator implementations, such as an invertible comparator and a compound comparator.\npackage util.concurrent; // Useful generic java.util.concurrent.Future extensions.\npackage util.function; // Useful generic java.util.function helper classes.\npackage util.unit; // Useful unit data types.\npackage util.xml; // Miscellaneous utility classes for XML parsing and transformation, such as error handlers that log warnings via Commons Logging.\npublic class AlternativeJdkIdGenerator extends Object implements IdGenerator; // An IdGenerator that uses SecureRandom for the initial seed and Random thereafter, instead of calling UUID.randomUUID() every time as JdkIdGenerator does.\npublic class AntPathMatcher extends Object implements PathMatcher; // PathMatcher implementation for Ant-style path patterns.\nprotected static class AntPathMatcher.AntPathStringMatcher extends Object; // Tests whether a string matches against a pattern via a Pattern.\nprotected static class AntPathMatcher.AntPatternComparator extends Object implements Comparator<String>; // The default Comparator implementation returned by AntPathMatcher.getPatternComparator(String).\npublic abstract class Assert extends Object; // Assertion utility class that assists in validating arguments.\npublic class AutoPopulatingList<E> extends Object implements List<E>, Serializable; // Simple List wrapper class that allows for elements to be automatically populated as they are requested.\n@FunctionalInterface public static interface AutoPopulatingList.ElementFactory<E>; // Factory interface for creating elements for an index-based access data structure such as a List.\npublic static class AutoPopulatingList.ElementInstantiationException extends RuntimeException; // Exception to be thrown from ElementFactory.\n@Deprecated(since=\"6.0.5\", forRemoval=true) public abstract class Base64Utils extends Object;\npublic abstract class ClassUtils extends Object; // Miscellaneous java.lang.Class utility methods.\npublic abstract class CollectionUtils extends Object; // Miscellaneous collection utility methods.\npublic class CommonsLogWriter extends Writer; // java.io.Writer adapter for a Commons Logging Log.\npublic class CompositeIterator<E> extends Object implements Iterator<E>; // Composite iterator that combines multiple other iterators, as registered via CompositeIterator.add(Iterator).\n", "des": "Miscellaneous utility classes, such as utilities for working with strings, classes, collections, reflection, etc."}
{"index": 1235, "repo": "spring-hateoas-2.1.2", "code": "package forms;\n\npublic class HalFormsConfiguration extends Object; // HAL-FORMS specific configuration extension of HalConfiguration.\npublic class HalFormsLinkDiscoverer extends HalLinkDiscoverer; // HAL-FORMS based JsonPathLinkDiscoverer.\npublic interface HalFormsOptions; // Representation of HAL-FORMS options attribute.\npublic abstract static class HalFormsOptions.AbstractHalFormsOptions<T extends HalFormsOptions.AbstractHalFormsOptions<T>> extends Object implements HalFormsOptions;\npublic static class HalFormsOptions.Inline extends HalFormsOptions.AbstractHalFormsOptions<HalFormsOptions.Inline>;\npublic static class HalFormsOptions.Remote extends HalFormsOptions.AbstractHalFormsOptions<HalFormsOptions.Remote>; // Representation of a remote options element.\npublic class HalFormsPromptedValue extends Object; // A value object to describe prompted values for HAL-FORMS options' inline attribute or responses of resources pointed to by the link object.\npublic class Jackson2HalFormsModule extends com.fasterxml.jackson.databind.module.SimpleModule; // Serialize / deserialize all the parts of HAL-FORMS documents using Jackson.\n", "des": "HAL-FORMS extension media type."}
{"index": 1703, "repo": "drill-common-1.21.1", "code": "package types;\n\npublic enum BooleanType extends Enum<BooleanType>; // Enum that contains two boolean types: TRUE and FALSE.\npublic class Types extends Object;\n", "des": "Logical data types."}
{"index": 364, "repo": "commons-geometry-euclidean-1.0", "code": "package threed;\n\npackage threed.line; // This package provides classes and utilities for lines in 3D Euclidean space.\npackage threed.mesh; // This package contains types representing 3D mesh data structures.\npackage threed.rotation; // This package provides components related to rotations in 3 dimensional Euclidean space.\npackage threed.shape; // This package provides utilities for constructing basic 3D shapes.\nInterface BoundarySource3D; // Extension of the BoundarySource interface for Euclidean 3D space.\nInterface ConvexPolygon3D; // Interface representing a closed, finite convex polygon in Euclidean 3D space.\nInterface PlaneConvexSubset; // Interface representing a finite or infinite convex subset of points in a plane in Euclidean 3D space.\nInterface PlaneConvexSubset.Embedded; // Interface used to represent plane convex subsets as embedded 2D subspace regions.\nInterface PlaneSubset; // Interface representing a subset of points in a plane in Euclidean 3D space.\nInterface PlaneSubset.Embedded; // Interface used to represent plane subsets as embedded 2D subspace regions.\nInterface Triangle3D; // Interface representing a triangle in Euclidean 3D space.\nClass AffineTransformMatrix3D; // Class using a matrix to represent affine transformations in 3 dimensional Euclidean space.\nClass BoundaryList3D; // BoundarySource3D implementation that uses boundaries stored in a list.\nClass Bounds3D; // Class containing minimum and maximum points defining a 3D axis-aligned bounding box.\nClass Bounds3D.Builder; // Class used to construct Bounds3D instances.\nClass ConvexVolume; // Class representing a finite or infinite convex volume in Euclidean 3D space.\nClass EmbeddedTreePlaneSubset; // Class representing an arbitrary subset of a plane using a RegionBSPTree2D.\nClass EmbeddingPlane; // Extension of the Plane class that supports embedding of 2D subspaces in the plane.\nClass EmbeddingPlane.SubspaceTransform; // Class containing a transformed plane instance along with a subspace (2D) transform.\nClass Plane; // Class representing a plane in 3 dimensional Euclidean space.\nClass Planes; // Class containing factory methods for constructing Plane and PlaneSubset instances.\nClass RegionBSPTree3D; // Binary space partitioning (BSP) tree representing a region in three dimensional Euclidean space.\n", "des": "This package provides basic 3D geometry components."}
{"index": 160, "repo": "ignite-core-2.15.0", "code": "package job;\n\nClass GridJobProcessor; // Responsible for all grid job execution and communication.\nClass GridJobWorker; // Job worker.\nClass JobWorkerInterruptionTimeoutObject; // Timeout object for delayed worker interruption.\nEnum ComputeJobStatusEnum; // Compute job status.\n", "des": "TODO."}
{"index": 1919, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package redis;\n\npublic interface ClientResourcesBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the ClientResources through a ClientResources.Builder whilst retaining default auto-configuration.\n@FunctionalInterface public interface JedisClientConfigurationBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the JedisClientConfiguration through a JedisClientConfiguration.JedisClientConfigurationBuilder whilst retaining default auto-configuration.\n@FunctionalInterface public interface LettuceClientConfigurationBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the LettuceClientConfiguration through a LettuceClientConfiguration.LettuceClientConfigurationBuilder whilst retaining default auto-configuration.\n@AutoConfiguration @ConditionalOnClass(org.springframework.data.redis.core.RedisOperations.class) @EnableConfigurationProperties(RedisProperties.class) @Import({org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration.class,org.springframework.boot.autoconfigure.data.redis.JedisConnectionConfiguration.class}) public class RedisAutoConfiguration extends Object; // Auto-configuration for Spring Data's Redis support.\npublic interface RedisConnectionDetails extends ConnectionDetails; // Details required to establish a connection to a Redis service.\npublic static interface RedisConnectionDetails.Cluster; // Redis cluster configuration.\npublic static record RedisConnectionDetails.Node(String host, int port) extends Record; // A node in a sentinel or cluster configuration.\npublic static interface RedisConnectionDetails.Sentinel; // Redis sentinel configuration.\npublic static interface RedisConnectionDetails.Standalone; // Redis standalone configuration.\n@ConfigurationProperties(prefix=\"spring.data.redis\") public class RedisProperties extends Object; // Configuration properties for Redis.\npublic static enum RedisProperties.ClientType extends Enum<RedisProperties.ClientType>; // Type of Redis client to use.\npublic static class RedisProperties.Cluster extends Object; // Cluster properties.\npublic static class RedisProperties.Jedis extends Object; // Jedis client properties.\npublic static class RedisProperties.Lettuce extends Object; // Lettuce client properties.\npublic static class RedisProperties.Lettuce.Cluster extends Object;\npublic static class RedisProperties.Lettuce.Cluster.Refresh extends Object;\n", "des": "Auto-configuration for Spring Data Redis."}
{"index": 3662, "repo": "solr-core-9.3.0", "code": "package tagger;\n\nInterface TagClusterReducer;\nInterface TaggingAttribute; // Attribute used by the Tagger to decide if a token can start a new tag.\nClass OffsetCorrector;\nClass Tagger; // Tags maximum string of words in a corpus.\nClass TaggerRequestHandler; // Scans posted text, looking for matching strings in the Solr index.\nClass TaggingAttributeImpl; // Implementation of the TaggingAttribute\nClass TagLL; // This is a Tag -- a startOffset, endOffset and value.\nClass XmlOffsetCorrector; // Corrects offsets to adjust for XML formatted data.\n", "des": "The TaggerRequestHandler and supporting classes."}
{"index": 590, "repo": "org.apache.karaf.main-2.4.4", "code": "package launch;\n\nClass Equinox; // The System Bundle implementation for the Equinox Framework.\nClass EquinoxFactory; // The framework factory implementation for the Equinox framework.\n", "des": "Provides the Equinox framework launch API."}
{"index": 3634, "repo": "lucene-misc-9.7.0", "code": "package fst;\n\nClass ListOfOutputs<T>; // Wraps another Outputs implementation and encodes one or more of its output values.\nClass UpToTwoPositiveIntOutputs; // An FST Outputs implementation where each output is one or two non-negative long values.\nClass UpToTwoPositiveIntOutputs.TwoLongs; // Holds two long outputs.\n", "des": "Misc FST classes."}
{"index": 1991, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package client;\n\n@AutoConfiguration(after=HttpMessageConvertersAutoConfiguration.class) @ConditionalOnClass(org.springframework.web.client.RestTemplate.class) @Conditional(org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration.NotReactiveWebApplicationCondition.class) public class RestTemplateAutoConfiguration extends Object; // Auto-configuration for RestTemplate.\npublic final class RestTemplateBuilderConfigurer extends Object; // Configure RestTemplateBuilder with sensible defaults.\n", "des": "Auto-configuration for web clients."}
{"index": 1246, "repo": "spring-integration-smb-6.1.2", "code": "package dsl;\n\npublic final class Smb extends Object; // The factory for SMB components.\npublic class SmbInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileInboundChannelAdapterSpec<jcifs.smb.SmbFile,SmbInboundChannelAdapterSpec,SmbInboundFileSynchronizingMessageSource>; // A RemoteFileInboundChannelAdapterSpec for an SmbInboundFileSynchronizingMessageSource.\npublic class SmbMessageHandlerSpec extends org.springframework.integration.file.dsl.FileTransferringMessageHandlerSpec<jcifs.smb.SmbFile,SmbMessageHandlerSpec>; // A FileTransferringMessageHandlerSpec for SMB.\npublic class SmbOutboundGatewaySpec extends org.springframework.integration.file.dsl.RemoteFileOutboundGatewaySpec<jcifs.smb.SmbFile,SmbOutboundGatewaySpec>; // A RemoteFileOutboundGatewaySpec for SMB.\npublic class SmbStreamingInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileStreamingInboundChannelAdapterSpec<jcifs.smb.SmbFile,SmbStreamingInboundChannelAdapterSpec,SmbStreamingMessageSource>; // A RemoteFileStreamingInboundChannelAdapterSpec for a SmbStreamingMessageSource.\n", "des": "Provides SMB Components for the Java DSL."}
{"index": 1184, "repo": "commons-math3-3.6.1", "code": "package events;\n\nInterface EventHandler; // This interface represents a handler for discrete events triggered during ODE integration.\nInterface FieldEventHandler<T extends RealFieldElement<T>>; // This interface represents a handler for discrete events triggered during ODE integration.\nClass EventFilter; // Wrapper used to detect only increasing or decreasing events.\nClass EventState; // This class handles the state for one event handler during integration steps.\nClass FieldEventState<T extends RealFieldElement<T>>; // This class handles the state for one event handler during integration steps.\nEnum Action; // Enumerate for actions to be performed when an event occurs during ODE integration.\nEnum EventHandler.Action; // Enumerate for actions to be performed when an event occurs.\nEnum FilterType; // Enumerate for filtering events.\n", "des": "This package provides classes to handle discrete events occurring during Ordinary Differential Equations integration."}
{"index": 2652, "repo": "spring-data-cassandra-4.1.2", "code": "package legacy;\n\n@Deprecated(since=\"4.0\", forRemoval=true) public interface AsyncCqlOperations;\n@Deprecated(since=\"4.0\", forRemoval=true) public class AsyncCqlTemplate extends CassandraAccessor implements AsyncCqlOperations;\nprotected static class AsyncCqlTemplate.AsyncRowCallbackHandlerResultSetExtractor extends Object implements AsyncResultSetExtractor<Void>; // Adapter to enable use of a RowCallbackHandler inside a ResultSetExtractor.\n@Deprecated(since=\"4.0\", forRemoval=true) @FunctionalInterface public interface AsyncPreparedStatementCreator;\n@Deprecated(since=\"4.0\", forRemoval=true) @FunctionalInterface public interface AsyncResultSetExtractor<T>;\n@Deprecated(since=\"4.0\", forRemoval=true) public class AsyncRowMapperResultSetExtractor<T> extends Object implements AsyncResultSetExtractor<List<T>>;\n@Deprecated(since=\"4.0\", forRemoval=true) @FunctionalInterface public interface AsyncSessionCallback<T>;\n", "des": "CQL legacy core asynchronous support for easier migration."}
{"index": 3595, "repo": "lucene-test-framework-9.7.0", "code": "package mockfile;\n\nClass DisableFsyncFS; // Disables actual calls to fsync.\nClass ExtrasFS; // Adds extra files/subdirectories when directories are created.\nClass FilterAsynchronousFileChannel; // A FilterAsynchronousFileChannel contains another AsynchronousFileChannel, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterDirectoryStream; // A FilterDirectoryStream contains another DirectoryStream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterFileChannel; // A FilterFileChannel contains another FileChannel, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterFileStore; // A FilterFileStore contains another FileStore, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterFileSystem; // A FilterFileSystem contains another FileSystem, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterFileSystemProvider; // A FilterFileSystemProvider contains another FileSystemProvider, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterInputStream2; // A FilterInputStream2 contains another InputStream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterOutputStream2; // A FilterOutputStream2 contains another OutputStream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterPath; // A FilterPath contains another Path, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterSeekableByteChannel; // A FilterSeekableByteChannel contains another SeekableByteChannel, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass HandleLimitFS; // FileSystem that throws exception if file handles in use exceeds a specified limit.\nClass HandleTrackingFS; // Base class for tracking file handles.\nClass LeakFS; // FileSystem that tracks open handles.\nClass MockFileSystemTestCase; // Base class for testing mockfilesystems.\n", "des": "Support for testing/debugging with virtual filesystems"}
{"index": 128, "repo": "ignite-core-2.15.0", "code": "package view;\n\nInterface FiltrableSystemView<R>; // System view with filtering capabilities.\nInterface SystemView<R>; // Implementation provides data for some internal Ignite objects.\nInterface SystemViewRowAttributeWalker<R>; // Utility class for quick iteration over row properties.\nInterface SystemViewRowAttributeWalker.AttributeVisitor; // Attribute visitor.\nInterface SystemViewRowAttributeWalker.AttributeWithValueVisitor; // Attribute visitor.\nClass BaselineNodeAttributeView; // Baseline node attribute representation for a SystemView.\nClass BaselineNodeView; // Baseline topology node representation for a SystemView.\nClass BinaryMetadataView; // BinaryMetadata representation for the SystemView.\nClass CacheGroupIoView; // Cache group IO statistics representation for a SystemView.\nClass CacheGroupView; // Cache group representation for the SystemView.\nClass CachePagesListView; // Pages-list representation for a SystemView.\nClass CacheView; // Cache representation for a SystemView.\nClass ClientConnectionView; // Client connection system view row.\nClass ClusterNodeView; // Cluster node representation for a SystemView.\nClass ComputeJobView; // Compute job representation for a SystemView.\nClass ComputeTaskView; // Compute task representation for a SystemView.\nClass ConfigurationView; // Configuration value representation for a SystemView.\nClass ContinuousQueryView; // Continuous query representation for a SystemView.\nClass MetastorageView; // Metastorage key representation for a SystemView.\nClass MetricsView; // Metrics representation for a SystemView.\nClass NodeAttributeView; // Node attribute representation for a SystemView.\nClass NodeMetricsView; // Node metrics representation for a SystemView.\nClass PagesListView; // Pages-list representation for a SystemView.\nClass PagesTimestampHistogramView; // Pages timestamp histogramm representation for a SystemView.\nClass PartitionStateView; // Partition state representation for a SystemView.\nClass ScanQueryView; // Scan query iterator representation for a SystemView.\nClass ServiceView; // Service representation for a SystemView.\nClass SnapshotView; // Snapshot representation for a SystemView.\nClass SqlQueryHistoryView; // SQL query history representation for a SystemView.\nClass SqlQueryView; // SQL query representation for a SystemView.\nClass StripedExecutorTaskView; // StripedExecutor task representation for a SystemView.\n", "des": "Contains SystemView clases that exists in Ignite."}
{"index": 1156, "repo": "commons-math3-3.6.1", "code": "package util;\n\nInterface ExceptionContextProvider; // Interface for accessing the context data structure stored in Commons Math exceptions.\nInterface Localizable; // Interface for localizable strings.\nClass ArgUtils; // Utility class for transforming the list of arguments passed to constructors of exceptions.\nClass DummyLocalizable; // Dummy implementation of the Localizable interface, without localization.\nClass ExceptionContext; // Class that contains the actual implementation of the functionality mandated by the ExceptionContext interface.\nEnum LocalizedFormats; // Enumeration for localized messages formats used in exceptions messages.\n", "des": "Classes supporting exception localization."}
{"index": 2513, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package servlet;\n\n@Controller public class ManagementErrorEndpoint extends Object; // @Controller for handling \"/error\" path when the management servlet is in a child context.\n@FunctionalInterface public interface ManagementServletContext; // Provides information about the management servlet context for MVC controllers to use.\n@AutoConfiguration @ConditionalOnClass(jakarta.servlet.Servlet.class) @ConditionalOnWebApplication(type=SERVLET) public class ServletManagementContextAutoConfiguration extends Object; // Auto-configuration for Servlet-specific management context concerns.\n@Configuration(proxyBeanMethods=false) @ConditionalOnProperty(prefix=\"management.server\", name=\"add-application-context-header\", havingValue=\"true\") protected static class ServletManagementContextAutoConfiguration.ApplicationContextFilterConfiguration extends Object;\n", "des": "Actuator Spring MVC support."}
{"index": 559, "repo": "hadoop-common-3.3.4", "code": "package io;\n\npackage io.serializer; // This package provides a mechanism for using different serialization frameworks in Hadoop.\nInterface ByteBufferPool;\nInterface Closeable; // use java.io.Closeable\nInterface MapFile.Reader.Option;\nInterface MapFile.Writer.Option;\nInterface RawComparator<T>; // A Comparator that operates directly on byte representations of objects.\nInterface ReadaheadPool.ReadaheadRequest; // An outstanding readahead request that has been submitted to the pool.\nInterface SequenceFile.Reader.Option; // A tag interface for all of the Reader options\nInterface SequenceFile.Sorter.RawKeyValueIterator; // The interface to iterate over raw keys/values of SequenceFiles.\nInterface SequenceFile.ValueBytes; // The interface to 'raw' values of SequenceFiles.\nInterface SequenceFile.Writer.Option;\nInterface Stringifier<T>; // Stringifier interface offers two methods to convert an object to a string representation and restore the object given its string representation.\nInterface Writable; // A serializable object which implements a simple, efficient, serialization protocol, based on DataInput and DataOutput.\nInterface WritableComparable<T>; // A Writable which is also Comparable.\nInterface WritableFactory; // A factory for a class of Writable.\nClass AbstractMapWritable; // Abstract base class for MapWritable and SortedMapWritable Unlike org.apache.nutch.crawl.MapWritable, this class allows creation of MapWritable<Writable, MapWritable> so the CLASS_TO_ID and ID_TO_CLASS maps travel with the class instead of being static.\nClass ArrayFile; // A dense file-based mapping from integers to values.\nClass ArrayFile.Reader; // Provide access to an existing array file.\nClass ArrayFile.Writer; // Write a new array file.\nClass ArrayPrimitiveWritable; // This is a wrapper class.\nClass ArrayWritable; // A Writable for arrays containing instances of a class.\nClass BinaryComparable; // Interface supported by WritableComparable types supporting ordering/permutation by a representative set of bytes.\nClass BloomMapFile; // This class extends MapFile and provides very much the same functionality.\nClass BloomMapFile.Reader;\nClass BloomMapFile.Writer;\nClass BooleanWritable; // A WritableComparable for booleans.\nClass BooleanWritable.Comparator; // A Comparator optimized for BooleanWritable.\n", "des": "Generic i/o code for use when reading and writing data to the network, to databases, and to files."}
{"index": 1680, "repo": "spring-oxm-6.0.11", "code": "package support;\n\npublic abstract class AbstractMarshaller extends Object implements Marshaller, Unmarshaller; // Abstract implementation of the Marshaller and Unmarshaller interface.\npublic class MarshallingSource extends SAXSource; // Source implementation that uses a Marshaller.Can be constructed with a Marshaller and an object to be marshalled.\npublic abstract class SaxResourceUtils extends Object; // Convenient utility methods for dealing with SAX.\n", "des": "Provides generic support classes for using Spring's O/X Mapping integration within various scenario's."}
{"index": 2359, "repo": "spring-boot-3.1.1", "code": "package error;\n\n@Order(-2147483648) public class DefaultErrorAttributes extends Object implements ErrorAttributes, org.springframework.web.servlet.HandlerExceptionResolver, org.springframework.core.Ordered; // Default implementation of ErrorAttributes.\npublic interface ErrorAttributes; // Provides access to error attributes which can be logged or presented to the user.\npublic interface ErrorController; // Marker interface used to identify a @Controller that should be used to render errors.\n", "des": "Spring MVC error handling infrastructure."}
{"index": 3658, "repo": "solr-core-9.3.0", "code": "package configsets;\n\nClass ConfigSetAPIBase; // Parent class for all APIs that manipulate configsets\nClass CreateConfigSetAPI; // V2 API for creating a new configset as a copy of an existing one.\nClass DeleteConfigSetAPI; // V2 API for deleting an existing configset\nClass ListConfigSetsAPI; // V2 API for adding or updating a single file within a configset.\nClass ListConfigSetsAPI.ListConfigsetsResponse; // Response body POJO for the ListConfigSetsAPI resource.\nClass UploadConfigSetAPI; // V2 API for uploading a new configset (or overwriting an existing one).\nClass UploadConfigSetFileAPI; // V2 API for adding or updating a single file within a configset.\n", "des": "V2 API classes for performing CRUD operations on configsets."}
{"index": 1313, "repo": "groovy-all-4.0.13", "code": "package text;\n\npackage text.markup; // Contains a template engine facilitating generation of XML-like markup with optional type checking.\npublic class GStringTemplateEngine extends TemplateEngine; // Processes template source files substituting variables and expressions into placeholders in a template source text to produce the desired output using a streaming approach.\npublic class SimpleTemplateEngine extends TemplateEngine; // Processes template source files substituting variables and expressions into placeholders in a template source text to produce the desired output.\npublic class StreamingTemplateEngine extends TemplateEngine; // Processes template source files substituting variables and expressions into placeholders in a template source text to produce the desired output using a closure based approach.\npublic interface Template; // A template is a block of text with an associated binding that can be output to a writer or evaluated to a string.\npublic abstract class TemplateEngine extends Object; // A template engine is a factory for creating a Template instance for a given text input.\npublic class TemplateExecutionException extends Exception; // A custom exception class to flag template execution errors\npublic class TemplateParseException extends RuntimeException; // A custom exception class to flag template parsing errors\npublic class XmlTemplateEngine extends TemplateEngine; // Template engine for use in templating scenarios where both the template source and the expected output are intended to be XML.\n", "des": "Contains the text processing utilities including templating APIs and default implementations."}
{"index": 75, "repo": "ignite-core-2.15.0", "code": "package noop;\n\nClass NoopCollisionSpi; // No-op implementation of CollisionSpi.\n", "des": "Contains default no-op collision SPI implementation."}
{"index": 2152, "repo": "wicket-core-10.0.0-M1", "code": "package link;\n\npublic abstract class AbstractLink extends WebMarkupContainer; // Base class that that contains functionality for rendering disabled links.\npublic class BookmarkablePageLink<T> extends Link<T>; // Renders a stable link which can be cached in a web browser and used at a later time.\npublic class ClientSideImageMap extends Panel; // A client-side image map implementation which allows you to \"attach\" the map to any existing Image component.\npublic class DisabledAttributeLinkBehavior extends Behavior; // A behavior to add attribute \"disabled\" to a Link component when it is disabled.\npublic class DownloadLink extends Link<File>; // A link that streams a file to the client.\npublic class ExternalLink extends AbstractLink; // A simple anchor link (<a href=\"http://url\">) pointing to any URL.\npublic class InlineFrame extends WebMarkupContainer implements IRequestListener; // Implementation of an inline frame component.\npublic abstract class Link<T> extends AbstractLink implements IRequestListener, IGenericComponent<T,Link<T>>; // Implementation of a hyperlink component.\npublic class PopupCloseLink<T> extends Link<T>; // Closes a popup window and cleans up any related session page map for the popup.\npublic static final class PopupCloseLink.ClosePopupPage extends WebPage; // ClosePopupPage closes the popup window.\npublic class PopupSettings extends Object implements org.apache.wicket.util.io.IClusterable; // A popup specification can be used as a property of the Linkclasses to specify that the link should be rendered with an onClick javascript event handler that opens a new window with the links' URL.\npublic class ResourceLink<T> extends Link<T> implements IRequestListener; // A link to any ResourceReference.\npublic abstract class StatelessLink<T> extends Link<T>; // This link is stateless that means that the url to this link could generate a new page before the link onClick is called.\n", "des": "Link components."}
{"index": 485, "repo": "beam-sdks-java-core-2.49.0", "code": "package schemas;\n\npackage schemas.annotations; // Defines Schema and other classes for representing schema'd data in a Pipeline.\npackage schemas.io; // Provides abstractions for schema-aware IOs.\npackage schemas.logicaltypes; // A set of common LogicalTypes for use with schemas.\npackage schemas.parser; // Defines utilities for deailing with schemas.\npackage schemas.transforms; // Defines transforms that work on PCollections with schemas..\npackage schemas.utils; // Defines utilities for deailing with schemas.\nInterface Factory<T>; // A Factory interface for schema-related objects for a specific Java type.\nInterface FieldValueGetter<ObjectT,ValueT>; // For internal use only; no backwards-compatibility guarantees.\nInterface FieldValueSetter<ObjectT,ValueT>; // For internal use only; no backwards-compatibility guarantees.\nInterface ProjectionConsumer; // A ProjectionConsumer is a Schema-aware operation (such as a DoFn or PTransform) that has a FieldAccessDescriptor describing which fields the operation accesses.\nInterface ProjectionProducer<T>; // A factory for operations that execute a projection on a Schema-aware PCollection.\nInterface Schema.LogicalType<InputT,BaseT>; // A LogicalType allows users to define a custom schema type.\nInterface SchemaProvider; // Concrete implementations of this class allow creation of schema service objects that vend a Schema for a specific type.\nInterface SchemaProviderRegistrar; // SchemaProvider creators have the ability to automatically have their schemaProvider registered with this SDK by creating a ServiceLoader entry and a concrete implementation of this interface.\nInterface SchemaUserTypeCreator; // A creator interface for user types that have schemas.\nClass AutoValueSchema; // A SchemaProvider for AutoValue classes.\nClass AutoValueSchema.AbstractGetterTypeSupplier; // FieldValueTypeSupplier that's based on AutoValue getters.\nClass AvroRecordSchema; // Avro related classes are deprecated in module beam-sdks-java-core and will be eventually removed.\nClass CachingFactory<CreatedT>; // A wrapper around a Factory that assumes the schema parameter never changes.\nClass FieldAccessDescriptor; // Used inside of a DoFn to describe which fields in a schema type need to be accessed for processing.\nClass FieldAccessDescriptor.FieldDescriptor; // Description of a single field.\n", "des": "Defines Schema and other classes for representing schema'd data in a Pipeline."}
{"index": 2336, "repo": "spring-boot-3.1.1", "code": "package system;\n\npublic class ApplicationHome extends Object; // Provides access to the application home directory.\npublic class ApplicationPid extends Object; // An application process ID.\npublic class ApplicationTemp extends Object; // Provides access to an application specific temporary directory.\npublic enum JavaVersion extends Enum<JavaVersion>; // Known Java versions.\npublic final class SystemProperties extends Object; // Access to system properties.\n", "des": "General system support classes."}
{"index": 3063, "repo": "spring-ws-core-4.0.5", "code": "package server;\n\npackage server.endpoint; // Provides standard endpoint, and EndpointAdapter implementations.\npublic interface EndpointAdapter; // Interface that must be implemented for each endpoint type to handle a message request.\npublic interface EndpointExceptionResolver; // Defines the interface for objects than can resolve exceptions thrown during endpoint execution.\npublic interface EndpointInterceptor; // Workflow interface that allows for customized endpoint invocation chains.\npublic class EndpointInvocationChain extends Object; // Endpoint invocation chain, consisting of an endpoint object and any preprocessing interceptors.\npublic interface EndpointMapping; // Defines a mapping between message requests and endpoint objects.\npublic class MessageDispatcher extends Object implements WebServiceMessageReceiver, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationContextAware; // Central dispatcher for use within Spring-WS, dispatching Web service messages to registered endpoints.\npublic interface SmartEndpointInterceptor extends EndpointInterceptor; // Extension of the EndpointInterceptor interface that adds a way to decide whether the interceptor should intercept a given message context.\n", "des": "Contains classes for server-side Spring-WS support."}
{"index": 67, "repo": "ignite-core-2.15.0", "code": "package checkpoint;\n\npackage checkpoint.cache; // Contains cache-based implementation for checkpoint SPI.\npackage checkpoint.jdbc; // Contains JDBC implementation for checkpoint SPI.\npackage checkpoint.noop; // Contains default no-op checkpoint SPI implementation.\npackage checkpoint.sharedfs; // Contains shared file system implementation for checkpoint SPI.\nInterface CheckpointListener; // Listener for notifications of checkpoints removed by CheckpointSpi.\nInterface CheckpointSpi; // Checkpoint SPI provides an ability to save an intermediate job state.\n", "des": "Contains APIs for checkpoint SPI."}
{"index": 3536, "repo": "opennlp-tools-2.2.0", "code": "package naivebayes;\n\nClass BinaryNaiveBayesModelReader; // A NaiveBayesModelReader that reads models from a binary format.\nClass BinaryNaiveBayesModelWriter; // A NaiveBayesModelWriter that writes models in a binary format.\nClass LogProbabilities<T>; // Class implementing the probability distribution over labels returned by a classifier as a log of probabilities.\nClass LogProbability<T>; // A class implementing the logarithmic Probability for a label.\nClass NaiveBayesEvalParameters; // Specialized parameters for the evaluation of a naive bayes classifier\nClass NaiveBayesModel; // A MaxentModel implementation of the multinomial Naive Bayes classifier model.\nClass NaiveBayesModelReader; // The base class for readers of models.\nClass NaiveBayesModelWriter; // The base class for NaiveBayesModel writers.\nClass NaiveBayesTrainer; // Trains models using the combination of EM algorithm and Naive Bayes classifier which is described in:\nClass PlainTextNaiveBayesModelReader; // A NaiveBayesModelReader that reads models from a plain text format.\nClass PlainTextNaiveBayesModelWriter; // A NaiveBayesModelWriter that writes models in a plain text format.\nClass Probabilities<T>; // Class implementing the probability distribution over labels returned by a classifier.\nClass Probability<T>; // Class implementing the probability for a label.\n", "des": "Package related to ML by means of the Naive Bayes algorithm."}
{"index": 3094, "repo": "spring-ws-core-4.0.5", "code": "package context;\n\npublic class DefaultTransportContext extends Object implements TransportContext; // Default implementation of the TransportContext interface.\npublic interface TransportContext; // Strategy interface for determining the current WebServiceConnection.\npublic abstract class TransportContextHolder extends Object; // Simple holder class that associates a TransportContext instance with the current thread.\n", "des": "Abstraction for determining the current TransportInputStream and TransportOutputStream."}
{"index": 1841, "repo": "spring-test-6.0.11", "code": "package jdbc;\n\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Inherited @Repeatable(SqlGroup.class) public @interface Sql; // @Sql is used to annotate a test class or test method to configure SQL Sql.scripts() and Sql.statements() to be executed against a given database during integration tests.\npublic static enum Sql.ExecutionPhase extends Enum<Sql.ExecutionPhase>; // Enumeration of phases that dictate when SQL scripts are executed.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface SqlConfig; // @SqlConfig defines metadata that is used to determine how to parse and execute SQL scripts configured via the @Sql annotation.\npublic static enum SqlConfig.ErrorMode extends Enum<SqlConfig.ErrorMode>; // Enumeration of modes that dictate how errors are handled while executing SQL statements.\npublic static enum SqlConfig.TransactionMode extends Enum<SqlConfig.TransactionMode>; // Enumeration of modes that dictate whether SQL scripts should be executed within a transaction and what the transaction propagation behavior should be.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Inherited public @interface SqlGroup; // Container annotation that aggregates several @Sql annotations.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Inherited public @interface SqlMergeMode; // @SqlMergeMode is used to annotate a test class or test method to configure whether method-level @Sql declarations are merged with class-level @Sql declarations.\npublic static enum SqlMergeMode.MergeMode extends Enum<SqlMergeMode.MergeMode>; // Enumeration of modes that dictate whether method-level @Sql declarations are merged with class-level @Sql declarations.\npublic class SqlScriptsTestExecutionListener extends AbstractTestExecutionListener implements AotTestExecutionListener; // TestExecutionListener that provides support for executing SQL scripts and inlined statements configured via the @Sql annotation.\n", "des": "JDBC support classes for the Spring TestContext Framework, including support for declarative SQL script execution via @Sql."}
{"index": 2508, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package exchanges;\n\n@AutoConfiguration @ConditionalOnWebApplication @ConditionalOnProperty(prefix=\"management.httpexchanges.recording\", name=\"enabled\", matchIfMissing=true) @ConditionalOnBean(org.springframework.boot.actuate.web.exchanges.HttpExchangeRepository.class) @EnableConfigurationProperties(HttpExchangesProperties.class) public class HttpExchangesAutoConfiguration extends Object; // Auto-configuration to record HTTP exchanges.\n@AutoConfiguration(after=HttpExchangesAutoConfiguration.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.web.exchanges.HttpExchangesEndpoint.class) public class HttpExchangesEndpointAutoConfiguration extends Object; // Auto-configuration for the HttpExchangesEndpoint.\n@ConfigurationProperties(prefix=\"management.httpexchanges\") public class HttpExchangesProperties extends Object; // Configuration properties for recording HTTP exchanges.\npublic static class HttpExchangesProperties.Recording extends Object; // Recording properties.\n", "des": "Auto-configuration for actuator HTTP exchanges."}
{"index": 389, "repo": "commons-dbcp2-2.9.0", "code": "package managed;\n\nInterface TransactionContextListener; // A listener for transaction completion events.\nInterface XAConnectionFactory; // XAConnectionFactory is an extension of ConnectionFactory used to create connections in a transaction managed environment.\nClass BasicManagedDataSource; // BasicManagedDataSource is an extension of BasicDataSource which creates ManagedConnections.\nClass DataSourceXAConnectionFactory; // An implementation of XAConnectionFactory which uses a real XADataSource to obtain connections and XAResources.\nClass LocalXAConnectionFactory; // An implementation of XAConnectionFactory which manages non-XA connections in XA transactions.\nClass LocalXAConnectionFactory.LocalXAResource; // LocalXAResource is a fake XAResource for non-XA connections.\nClass ManagedConnection<C extends Connection>; // ManagedConnection is responsible for managing a database connection in a transactional environment (typically called \"Container Managed\").\nClass ManagedDataSource<C extends Connection>; // The ManagedDataSource is a PoolingDataSource that creates ManagedConnections.\nClass PoolableManagedConnection; // PoolableConnection that unregisters from TransactionRegistry on Connection real destroy.\nClass PoolableManagedConnectionFactory; // A PoolableConnectionFactory that creates PoolableManagedConnections.\nClass TransactionContext; // TransactionContext represents the association between a single XAConnectionFactory and a Transaction.\nClass TransactionRegistry; // TransactionRegistry tracks Connections and XAResources in a transacted environment for a single XAConnectionFactory.\n", "des": "This package provides support for pooling of ManagedConnections."}
{"index": 2253, "repo": "spring-batch-test-5.0.2", "code": "package test;\n\npackage test.context; // APIs for the configuration of Spring Batch test support.\n@Deprecated(since=\"5.0\", forRemoval=true) public abstract class AssertFile extends Object;\n@Deprecated(since=\"5.0\", forRemoval=true) public class DataSourceInitializer extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean;\npublic class ExecutionContextTestUtils extends Object; // Convenience class for accessing ExecutionContext values from job and step executions.\npublic class JobLauncherTestUtils extends Object; // Utility class for testing batch jobs.\npublic class JobRepositoryTestUtils extends Object; // Convenience class for creating and removing JobExecution instances from a database.\npublic class JobScopeTestExecutionListener extends Object implements org.springframework.test.context.TestExecutionListener; // A TestExecutionListener that sets up job-scope context for dependency injection into unit tests.\npublic class JobScopeTestUtils extends Object; // Utility class for creating and manipulating JobScope in unit tests.\npublic class MetaDataInstanceFactory extends Object; // Convenience methods for creating test instances of JobExecution, JobInstance and StepExecution.\npublic class StepRunner extends Object; // Utility class for executing steps outside of a Job.\npublic class StepScopeTestExecutionListener extends Object implements org.springframework.test.context.TestExecutionListener; // A TestExecutionListener that sets up step-scope context for dependency injection into unit tests.\npublic class StepScopeTestUtils extends Object; // Utility class for creating and manipulating StepScope in unit tests.\n", "des": "Utility classes for batch job/step testing."}
{"index": 3744, "repo": "lucene-queryparser-9.7.0", "code": "package nodes;\n\npackage nodes.intervalfn; // This package contains classes that implement interval function support for the standard syntax parser.\nClass AbstractRangeQueryNode<T extends FieldValuePairQueryNode<?>>; // This class should be extended by nodes intending to represent range queries.\nClass BooleanModifierNode; // A BooleanModifierNode has the same behaviour as ModifierQueryNode, it only indicates that this modifier was added by BooleanQuery2ModifierNodeProcessor and not by the user.\nClass IntervalQueryNode; // Node that represents an interval function.\nClass MinShouldMatchNode; // Node that represents a minimum-should-match restriction on a GroupQueryNode.\nClass MultiPhraseQueryNode; // A MultiPhraseQueryNode indicates that its children should be used to build a MultiPhraseQuery instead of PhraseQuery.\nClass PointQueryNode; // This query node represents a field query that holds a point value.\nClass PointRangeQueryNode; // This query node represents a range query composed by PointQueryNode bounds, which means the bound values are Numbers.\nClass PrefixWildcardQueryNode; // A PrefixWildcardQueryNode represents wildcardquery that matches abc* or *.\nClass RegexpQueryNode; // A RegexpQueryNode represents RegexpQuery query Examples: /[a-z]|[0-9]/\nClass SynonymQueryNode; // QueryNode for clauses that are synonym of each other.\nClass TermRangeQueryNode; // This query node represents a range query composed by FieldQueryNode bounds, which means the bound values are strings.\nClass WildcardQueryNode; // A WildcardQueryNode represents wildcard query This does not apply to phrases.\n", "des": "Standard Lucene Query Nodes."}
{"index": 816, "repo": "lucene-analyzers-common-8.11.2", "code": "package collation;\n\npackage collation.tokenattributes; // Custom AttributeImpl for indexing collation keys as index terms.\nClass CollationAttributeFactory; // Converts each token into its CollationKey, and then encodes the bytes as an index term.\nClass CollationDocValuesField; // Indexes collation keys as a single-valued SortedDocValuesField.\nClass CollationKeyAnalyzer; // Configures KeywordTokenizer with CollationAttributeFactory.\n", "des": "Unicode collation support."}
{"index": 2434, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package web;\n\npackage web.reactive; // Auto-configuration for exposing actuator web endpoints using WebFlux.\npackage web.servlet; // Auto-configuration for exposing actuator web endpoints using Spring MVC.\n@ConfigurationProperties(prefix=\"management.endpoints.web.cors\") public class CorsEndpointProperties extends Object; // Configuration properties for web endpoints' CORS support.\n@ManagementContextConfiguration(proxyBeanMethods=false) @ConditionalOnWebApplication(type=SERVLET) public class ServletEndpointManagementContextConfiguration extends Object; // @ManagementContextConfiguration for servlet endpoints.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.glassfish.jersey.server.ResourceConfig.class) @ConditionalOnMissingClass(\"org.springframework.web.servlet.DispatcherServlet\") public static class ServletEndpointManagementContextConfiguration.JerseyServletEndpointManagementContextConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.web.servlet.DispatcherServlet.class) public static class ServletEndpointManagementContextConfiguration.WebMvcServletEndpointManagementContextConfiguration extends Object;\n@AutoConfiguration(after=EndpointAutoConfiguration.class) @ConditionalOnWebApplication @EnableConfigurationProperties(WebEndpointProperties.class) public class WebEndpointAutoConfiguration extends Object; // Auto-configuration for web @Endpoint support.\n@ConfigurationProperties(prefix=\"management.endpoints.web\") public class WebEndpointProperties extends Object; // Configuration properties for web management endpoints.\npublic static class WebEndpointProperties.Discovery extends Object;\npublic static class WebEndpointProperties.Exposure extends Object;\n", "des": "Auto-configuration for the Actuator's web endpoints."}
{"index": 1928, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package reactive;\n\n@AutoConfiguration(after=GraphQlAutoConfiguration.class) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.server.webflux.GraphQlHttpHandler.class}) @ConditionalOnBean(org.springframework.graphql.ExecutionGraphQlService.class) @EnableConfigurationProperties(GraphQlCorsProperties.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.graphql.reactive.GraphQlWebFluxAutoConfiguration.GraphiQlResourceHints.class) public class GraphQlWebFluxAutoConfiguration extends Object; // Auto-configuration for enabling Spring GraphQL over WebFlux.\n@Configuration(proxyBeanMethods=false) public static class GraphQlWebFluxAutoConfiguration.GraphQlEndpointCorsConfiguration extends Object implements org.springframework.web.reactive.config.WebFluxConfigurer;\n@Configuration(proxyBeanMethods=false) @ConditionalOnProperty(prefix=\"spring.graphql.websocket\", name=\"path\") public static class GraphQlWebFluxAutoConfiguration.WebSocketConfiguration extends Object;\n", "des": "Auto-configuration classes for WebFlux support in Spring GraphQL."}
{"index": 3347, "repo": "opencms-core-15.0", "code": "package availability;\n\nClass CmsAvailabilityDialog; // Availability dialog.\nClass CmsAvailabilityInfoBean; // A bean that holds the informations of the availability dialog.\n", "des": "Contains code for the availability dialog."}
{"index": 2989, "repo": "spring-ldap-core-3.1.0", "code": "package annotations;\n\n@Target(FIELD) @Retention(RUNTIME) public @interface Attribute; // Maps a Java field to an LDAP attribute.\npublic static enum Attribute.Type extends Enum<Attribute.Type>; // The Type attribute indicates whether a field is regarded as binary based or string based by the LDAP JNDI provider.\n@Target(FIELD) @Retention(RUNTIME) public @interface DnAttribute; // Maps a Java field to a component of an entry's distinguished name.\n@Target(TYPE) @Retention(RUNTIME) @Documented public @interface Entry; // This annotation marks a Java class to be persisted in an LDAP directory.\n@Target(FIELD) @Retention(RUNTIME) public @interface Id; // This annotation marks a Java field as containing the Distinguished Name of an LDAP Entry.\n@Target(FIELD) @Retention(RUNTIME) public @interface Transient; // This annotation identifies a field in an Entry annotated class that should not be persisted to LDAP.\n", "des": "Provides a set of annotations to describe the mapping of a Java class to an LDAP entry."}
{"index": 2016, "repo": "spring-boot-devtools-3.1.1", "code": "package classloader;\n\npublic class ClassLoaderFile extends Object implements Serializable; // A single file that may be served from a ClassLoader.\npublic static enum ClassLoaderFile.Kind extends Enum<ClassLoaderFile.Kind>; // The kinds of class load files.\n@FunctionalInterface public interface ClassLoaderFileRepository; // A container for files that may be served from a ClassLoader.\npublic class ClassLoaderFiles extends Object implements ClassLoaderFileRepository, Serializable; // ClassLoaderFileRepository that maintains a collection of ClassLoaderFile items grouped by source directories.\npublic static class ClassLoaderFiles.SourceDirectory extends Object implements Serializable; // An individual source directory that is being managed by the collection.\npublic class ClassLoaderFileURLStreamHandler extends URLStreamHandler; // URLStreamHandler for the contents of a ClassLoaderFile.\npublic class RestartClassLoader extends URLClassLoader implements org.springframework.core.SmartClassLoader; // Disposable ClassLoader used to support application restarting.\n", "des": "Classloaders used for reload support."}
{"index": 3874, "repo": "solr-ltr-9.3.0", "code": "package feature;\n\nClass Feature; // A recipe for computing a feature.\nClass FieldLengthFeature; // This feature returns the length of a field (in terms) for the current document.\nClass FieldValueFeature; // This feature returns the value of a field in the current document.\nClass OriginalScoreFeature; // This feature returns the original score that the document had before performing the reranking.\nClass SolrFeature; // This feature allows you to reuse any Solr query as a feature.\nClass ValueFeature; // This feature allows to return a constant given value for the current document.\nClass FeatureException;\n", "des": "Contains Feature related classes"}
{"index": 3807, "repo": "lucene-analysis-common-9.7.0", "code": "package payloads;\n\nInterface PayloadEncoder; // Mainly for use with the DelimitedPayloadTokenFilter, converts char buffers to BytesRef.\nClass AbstractEncoder; // Base class for payload encoders.\nClass DelimitedPayloadTokenFilter; // Characters before the delimiter are the \"token\", those after are the payload.\nClass DelimitedPayloadTokenFilterFactory; // Factory for DelimitedPayloadTokenFilter.\nClass FloatEncoder; // Encode a character array Float as a BytesRef.\nClass IdentityEncoder; // Does nothing other than convert the char array to a byte array using the specified encoding.\nClass IntegerEncoder; // Encode a character array Integer as a BytesRef.\nClass NumericPayloadTokenFilter; // Assigns a payload to a token based on the TypeAttribute\nClass NumericPayloadTokenFilterFactory; // Factory for NumericPayloadTokenFilter.\nClass PayloadHelper; // Utility methods for encoding payloads.\nClass TokenOffsetPayloadTokenFilter; // Adds the OffsetAttribute.startOffset() and OffsetAttribute.endOffset() First 4 bytes are the start\nClass TokenOffsetPayloadTokenFilterFactory; // Factory for TokenOffsetPayloadTokenFilter.\nClass TypeAsPayloadTokenFilter; // Makes the TypeAttribute a payload.\nClass TypeAsPayloadTokenFilterFactory; // Factory for TypeAsPayloadTokenFilter.\n", "des": "Provides various convenience classes for creating payloads on Tokens."}
{"index": 2572, "repo": "pulsar-common-3.0.0", "code": "package netty;\n\npublic class ChannelFutures extends Object; // Static utility methods for operating on ChannelFutures.\npublic class DnsResolverUtil extends Object;\npublic class EventLoopUtil extends Object;\npublic final class NettyChannelUtil extends Object; // Contains utility methods for working with Netty Channels.\npublic class NettyFutureUtil extends Object; // Contains utility methods for working with Netty Futures.\n", "des": "Helpers to work with events from the non-blocking I/O client-server framework."}
{"index": 1394, "repo": "spring-boot-actuator-3.1.1", "code": "package jersey;\n\npublic class JerseyEndpointResourceFactory extends Object; // A factory for creating Jersey Resources for web endpoint operations.\npublic class JerseyHealthEndpointAdditionalPathResourceFactory extends JerseyEndpointResourceFactory; // A factory for creating Jersey Resources for health groups with additional path.\n", "des": "Jersey support for actuator endpoints."}
{"index": 1809, "repo": "spring-aop-6.0.11", "code": "package scope;\n\npublic class DefaultScopedObject extends Object implements ScopedObject, Serializable; // Default implementation of the ScopedObject interface.\npublic interface ScopedObject extends RawTargetAccess; // An AOP introduction interface for scoped objects.\npublic class ScopedProxyFactoryBean extends ProxyConfig implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.BeanFactoryAware, AopInfrastructureBean; // Convenient proxy factory bean for scoped objects.\npublic abstract class ScopedProxyUtils extends Object; // Utility class for creating a scoped proxy.\n", "des": "Support for AOP-based scoping of target objects, with configurable backend."}
{"index": 3184, "repo": "tomcat-api-10.1", "code": "package dbcp2;\n\npackage dbcp2.cpdsadapter; // This package contains one public class which is a ConnectionPoolDataSource (CPDS) implementation that can be used to adapt older Driver based JDBC implementations.\npackage dbcp2.datasources; // This package contains two DataSources: PerUserPoolDataSource and SharedPoolDataSource which provide a database connection pool.\npackage dbcp2.managed; // This package provides support for pooling of ManagedConnections.\nInterface BasicDataSourceMXBean; // Interface to keep API compatibility.\nInterface ConnectionFactory; // Abstract factory interface for creating Connections.\nInterface DataSourceMXBean; // Defines the methods that will be made available via JMX.\nInterface PoolableConnectionMXBean; // Defines the attributes and methods that will be exposed via JMX for PoolableConnection instances.\nClass AbandonedTrace; // Tracks connection usage for recovering and reporting abandoned connections.\nClass BasicDataSource; // Basic implementation of javax.sql.DataSource that is configured via JavaBeans properties.\nClass BasicDataSourceFactory; // JNDI object factory that creates an instance of BasicDataSource that has been configured based on the RefAddr values of the specified Reference, which must match the names and data types of the BasicDataSource bean properties with the following exceptions: connectionInitSqls must be passed to this factory as a single String using semicolon to delimit the statements whereas BasicDataSource requires a collection of Strings.\nClass Constants; // Constants.\nClass DataSourceConnectionFactory; // A DataSource-based implementation of ConnectionFactory.\nClass DelegatingCallableStatement; // A base delegating implementation of CallableStatement.\nClass DelegatingConnection<C extends Connection>; // A base delegating implementation of Connection.\nClass DelegatingDatabaseMetaData; // A base delegating implementation of DatabaseMetaData.\nClass DelegatingPreparedStatement; // A base delegating implementation of PreparedStatement.\nClass DelegatingResultSet; // A base delegating implementation of ResultSet.\nClass DelegatingStatement; // A base delegating implementation of Statement.\nClass DriverConnectionFactory; // A Driver-based implementation of ConnectionFactory.\nClass DriverManagerConnectionFactory; // A DriverManager-based implementation of ConnectionFactory.\nClass Jdbc41Bridge; // Defines bridge methods to JDBC 4.1 (Java 7) methods to allow call sites to operate safely (without AbstractMethodError) when using a JDBC driver written for JDBC 4.0 (Java 6).\n", "des": "Database Connection Pool API."}
{"index": 1622, "repo": "spring-kafka-3.0.9", "code": "package aot;\n\npublic class KafkaAvroBeanRegistrationAotProcessor extends Object implements org.springframework.beans.factory.aot.BeanRegistrationAotProcessor; // Detect and register Avro types for Apache Kafka listeners.\npublic class KafkaRuntimeHints extends Object implements org.springframework.aot.hint.RuntimeHintsRegistrar; // RuntimeHintsRegistrar for Spring for Apache Kafka.\n", "des": "Provides classes to support Spring AOT."}
{"index": 1755, "repo": "spring-data-mongodb-4.1.2", "code": "package index;\n\n@Target(TYPE) @Documented @Repeatable(CompoundIndexes.class) @Retention(RUNTIME) public @interface CompoundIndex; // Mark a class to use compound indexes.\npublic class CompoundIndexDefinition extends Index; // Index definition to span multiple keys.\n@Target(TYPE) @Documented @Retention(RUNTIME) public @interface CompoundIndexes; // Container annotation that allows to collect multiple CompoundIndex annotations.\npublic class GeospatialIndex extends Object implements IndexDefinition; // Value object to capture data to create a geo index.\n@Target({FIELD,ANNOTATION_TYPE}) @Retention(RUNTIME) public @interface GeoSpatialIndexed; // Mark a field to be indexed using MongoDB's geospatial indexing feature.\npublic enum GeoSpatialIndexType extends Enum<GeoSpatialIndexType>; // Geoposatial index type.\npublic class HashedIndex extends Object implements IndexDefinition; // IndexDefinition implementation for MongoDB Hashed Indexes maintaining entries with hashes of the values of the indexed field.\n@Target({ANNOTATION_TYPE,FIELD}) @Retention(RUNTIME) public @interface HashIndexed; // Annotation for a property that should be used as key for a Hashed Index.\npublic class Index extends Object implements IndexDefinition;\npublic interface IndexDefinition;\npublic enum IndexDirection extends Enum<IndexDirection>;\n@Target({ANNOTATION_TYPE,FIELD}) @Retention(RUNTIME) public @interface Indexed; // Mark a field to be indexed using MongoDB's indexing feature.\npublic final class IndexField extends Object; // Value object for an index field.\npublic interface IndexFilter; // Use IndexFilter to create the partial filter expression used when creating Partial Indexes.\npublic class IndexInfo extends Object; // Index information for a MongoDB index.\npublic interface IndexOperations; // Index operations on a collection.\npublic interface IndexOperationsAdapter extends IndexOperations; // Adapter for creating synchronous IndexOperations.\n@FunctionalInterface public interface IndexOperationsProvider; // Provider interface to obtain IndexOperations by MongoDB collection name.\npublic class IndexOptions extends Object; // Changeable properties of an index.\npublic static enum IndexOptions.Unique extends Enum<IndexOptions.Unique>;\npublic abstract class IndexPredicate extends Object;\npublic interface IndexResolver; // IndexResolver finds those IndexDefinitions to be created for a given class.\n", "des": "Support for MongoDB document indexing."}
{"index": 2687, "repo": "spring-data-jpa-3.1.2", "code": "package config;\n\npublic class AuditingBeanDefinitionParser extends Object implements BeanDefinitionParser; // BeanDefinitionParser for the auditing element.\n@Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.jpa.repository.config.JpaAuditingRegistrar.class) public @interface EnableJpaAuditing; // Annotation to enable auditing in JPA via annotation configuration.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(org.springframework.data.jpa.repository.config.JpaRepositoriesRegistrar.class) public @interface EnableJpaRepositories; // Annotation to enable JPA repositories.\npublic class JpaMetamodelMappingContextFactoryBean extends AbstractFactoryBean<JpaMetamodelMappingContext> implements ApplicationContextAware; // FactoryBean to setup JpaMetamodelMappingContext instances from Spring configuration.\npublic class JpaRepositoryConfigExtension extends RepositoryConfigurationExtensionSupport; // JPA specific configuration extension parsing custom attributes from the XML namespace and EnableJpaRepositories annotation.\npublic static class JpaRepositoryConfigExtension.JpaRepositoryRegistrationAotProcessor extends RepositoryRegistrationAotProcessor; // A RepositoryRegistrationAotProcessor implementation that maintains aot repository setup but skips domain type inspection which is handled by the core framework support for PersistenceManagedTypes.\npublic class JpaRepositoryNameSpaceHandler extends NamespaceHandlerSupport; // Simple namespace handler for repositories namespace.\n", "des": "Classes for JPA namespace configuration."}
{"index": 1319, "repo": "groovy-all-4.0.13", "code": "package slurpersupport;\n\npublic class Attribute extends GPathResult; // Lazy evaluated representation of a node attribute.\npublic class Attributes extends NodeChildren; // Lazy evaluated representation of a node's attributes.\npublic class FilteredAttributes extends Attributes; // Lazy evaluated representation of a node's attributes filtered by a Closure.\npublic class FilteredNodeChildren extends NodeChildren; // Lazy evaluated representation of child nodes filtered by a Closure.\npublic abstract class GPathResult extends GroovyObjectSupport implements Writable, Buildable, Iterable; // Base class for representing lazy evaluated GPath expressions.\npublic class NamespaceAwareHashMap extends HashMap<String,String>;\npublic class NoChildren extends GPathResult; // Lazy evaluated representation of a GPath expression returning no children.\npublic class Node extends Object implements Writable; // Represents a node.\npublic class NodeChild extends GPathResult; // Lazy evaluated representation of a child node.\npublic class NodeChildren extends GPathResult; // Lazy evaluated representation of child nodes.\npublic abstract class NodeIterator extends Object implements Iterator; // Helper class for iterating through nodes.\npublic class NodeParents extends NodeChildren; // Lazy evaluated representation of parent nodes without duplicates\npublic abstract class ReplacementNode extends Object implements Buildable, Writable; // Helper base class used for lazy updates.\n", "des": "Helper classes for XmlSlurper."}
{"index": 3116, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface BasicProxyFactory; // A proxy factory for \"basic proxy\" generation.\nInterface BytecodeEnhancementMetadata; // Encapsulates bytecode enhancement information about a particular entity.\nInterface BytecodeProvider; // Contract for providers of bytecode services to Hibernate.\nInterface ClassTransformer; // A persistence provider provides an instance of this interface to the PersistenceUnitInfo.addTransformer method.\nInterface ProxyFactoryFactory; // An interface for factories of proxy factory instances.\nInterface ReflectionOptimizer; // Represents reflection optimization for a particular class.\nInterface ReflectionOptimizer.AccessOptimizer; // Represents optimized entity property access.\nInterface ReflectionOptimizer.InstantiationOptimizer; // Represents optimized entity instantiation.\nClass ByteCodeHelper; // A helper for reading byte code from various input sources.\nClass ClassLoadingStrategyHelper;\nClass InstrumentedClassLoader; // A specialized ClassLoader which performs bytecode enhancement on class definitions as they are loaded into the ClassLoader scope.\nClass NotInstrumentedException; // Indicates a condition where an instrumented/enhanced class was expected, but the class was not instrumented/enhanced.\n", "des": "Package defining bytecode code enhancement (instrumentation) support."}
{"index": 1953, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package ldap;\n\npackage ldap.embedded; // Auto-configuration for embedded LDAP.\n@AutoConfiguration @ConditionalOnClass(org.springframework.ldap.core.ContextSource.class) @EnableConfigurationProperties(LdapProperties.class) public class LdapAutoConfiguration extends Object; // Auto-configuration for LDAP.\n@ConfigurationProperties(prefix=\"spring.ldap\") public class LdapProperties extends Object; // Configuration properties for LDAP.\npublic static class LdapProperties.Template extends Object; // settings.\n", "des": "Auto-configuration for LDAP."}
{"index": 2864, "repo": "spring-integration-core-6.1.2", "code": "package handler;\n\npackage handler.advice; // Provides classes that are used to advise MessageHandlers with cross-cutting concerns.\npackage handler.support; // Provides classes for message handlers support.\npublic abstract class AbstractMessageHandler extends MessageHandlerSupport implements org.springframework.messaging.MessageHandler, reactor.core.CoreSubscriber<org.springframework.messaging.Message<?>>; // Base class for MessageHandler implementations.\npublic abstract class AbstractMessageProcessor<T> extends AbstractExpressionEvaluator implements MessageProcessor<T>;\npublic abstract class AbstractMessageProducingHandler extends AbstractMessageHandler implements MessageProducer, HeaderPropagationAware; // The base AbstractMessageHandler implementation for the MessageProducer.\npublic abstract class AbstractReactiveMessageHandler extends MessageHandlerSupport implements org.springframework.messaging.ReactiveMessageHandler; // Base class for ReactiveMessageHandler implementations.\npublic abstract class AbstractReplyProducingMessageHandler extends AbstractMessageProducingHandler implements org.springframework.beans.factory.BeanClassLoaderAware; // Base class for MessageHandlers that are capable of producing replies.\npublic static interface AbstractReplyProducingMessageHandler.RequestHandler; // An implementation of this interface is used to wrap the AbstractReplyProducingMessageHandler.handleRequestMessage(Message) method.\npublic abstract class AbstractReplyProducingPostProcessingMessageHandler extends AbstractReplyProducingMessageHandler implements PostProcessingMessageHandler;\npublic class BeanNameMessageProcessor<T> extends Object implements MessageProcessor<T>, org.springframework.beans.factory.BeanFactoryAware; // An \"artificial\" MessageProcessor for lazy-load of target bean by its name.\npublic class BridgeHandler extends AbstractReplyProducingMessageHandler; // A simple MessageHandler implementation that passes the request Message directly to the output channel without modifying it.\npublic interface CompositeMessageHandler extends org.springframework.messaging.MessageHandler; // Classes implementing this interface delegate to a list of handlers.\n@ManagedResource @IntegrationManagedResource public class DelayHandler extends AbstractReplyProducingMessageHandler implements DelayHandlerManagement, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>; // A MessageHandler that is capable of delaying the continuation of a Message flow based on the result of evaluation delayExpression on an inbound Message or a default delay value configured on this handler.\n", "des": "Provides classes implementing various types of message handler."}
{"index": 1938, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package codec;\n\n@AutoConfiguration(after=JacksonAutoConfiguration.class) @ConditionalOnClass({org.springframework.http.codec.CodecConfigurer.class,org.springframework.web.reactive.function.client.WebClient.class}) @EnableConfigurationProperties(CodecProperties.class) public class CodecsAutoConfiguration extends Object; // Auto-configuration for Encoders and Decoders.\n", "des": "Auto-configuration for HTTP codecs."}
{"index": 2402, "repo": "spring-batch-core-5.0.2", "code": "package scope;\n\npackage scope.context; // Implementation of the contexts for each of the custom bean scopes in Spring Batch (Job and Step).\npublic abstract class BatchScopeSupport extends Object implements org.springframework.beans.factory.config.Scope, org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.core.Ordered; // ScopeSupport.\nprotected static class BatchScopeSupport.Scopifier extends org.springframework.beans.factory.config.BeanDefinitionVisitor; // Helper class to scan a bean definition hierarchy and force the use of auto-proxy for step scoped beans.\npublic class JobScope extends BatchScopeSupport; // Scope for job context.\npublic class StepScope extends BatchScopeSupport; // Scope for step context.\n", "des": "Implementation of Spring Batch specific bean scopes (Job and Step)."}
{"index": 2587, "repo": "spring-rabbit-3.0.6", "code": "package batch;\n\npublic interface BatchingStrategy; // Strategy for batching messages.\npublic class MessageBatch extends Object; // An object encapsulating a Message containing the batch of messages, the exchange, and routing key.\npublic class SimpleBatchingStrategy extends Object implements BatchingStrategy; // A simple batching strategy that supports only one exchange/routingKey; includes a batch size, a batched message size limit and a timeout.\n", "des": "Provides classes for message batching."}
{"index": 1673, "repo": "spring-boot-cli-3.1.1", "code": "package shell;\n\npublic class CommandCompleter extends jline.console.completer.StringsCompleter; // JLine Completer for Spring Boot Commands.\npublic class PromptCommand extends AbstractCommand; // Command to change the Shell prompt.\npublic class Shell extends Object; // A shell for Spring Boot.\npublic class ShellCommand extends AbstractCommand; // Command to start a nested REPL shell.\npublic class ShellExitException extends CommandException; // Exception used to stop the Shell.\npublic class ShellPrompts extends Object; // Abstraction to manage a stack of prompts.\n", "des": "Classes for running a nested shell in the CLI."}
{"index": 424, "repo": "mahout-mr-0.13.0", "code": "package kmeans;\n\nClass Kluster;\nClass KMeansDriver;\nClass RandomSeedGenerator; // Given an Input Path containing a SequenceFile, randomly select k vectors and write them to the output file as a Kluster representing the initial centroid to use.\n", "des": "This package provides an implementation of the k-means clustering algorithm."}
{"index": 2478, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package mongo;\n\n@AutoConfiguration(before=org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration.class, after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass(com.mongodb.MongoClientSettings.class) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class MongoMetricsAutoConfiguration extends Object; // Auto-configuration for Mongo metrics.\n", "des": "Auto-configuration for Mongo metrics."}
{"index": 848, "repo": "calcite-core-1.34.0", "code": "package rel2sql;\n\nClass RelToSqlConverter; // Utility to convert relational expressions to SQL abstract syntax tree.\nClass SqlImplementor; // State for generating a SQL statement.\nClass SqlImplementor.Context; // Context for translating a RexNode expression (within a RelNode) into a SqlNode expression (within a SQL parse tree).\nClass SqlImplementor.SimpleContext; // Simple implementation of SqlImplementor.Context that cannot handle sub-queries or correlations.\nEnum SqlImplementor.Clause; // Clauses in a SQL query.\n", "des": "Translates a relational expression to SQL parse tree."}
{"index": 879, "repo": "mahout-math-0.13.0", "code": "package function;\n\nInterface ByteByteProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteCharProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteComparator; // A comparison function which imposes a total ordering on some collection of elements.\nInterface ByteDoubleProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteFloatProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteIntProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteLongProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteObjectProcedure<T>; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteProcedure; // Interface that represents a procedure object: a procedure that takes a single argument and does not return a value.\nInterface ByteShortProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharByteProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharCharProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharComparator; // A comparison function which imposes a total ordering on some collection of elements.\nInterface CharDoubleProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharFloatProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharIntProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharLongProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharObjectProcedure<T>; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\n", "des": "Core interfaces for functions, comparisons and procedures on objects and primitive data types."}
{"index": 1470, "repo": "spring-boot-configuration-processor-3.1.1", "code": "package configurationprocessor;\n\npackage configurationprocessor.fieldvalues; // Abstraction for field value parsing.\npackage configurationprocessor.metadata; // The configuration properties meta-data model and JSON writing support.\n@SupportedAnnotationTypes({\"org.springframework.boot.autoconfigure.AutoConfiguration\",\"org.springframework.boot.context.properties.ConfigurationProperties\",\"org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpoint\",\"org.springframework.boot.actuate.endpoint.annotation.Endpoint\",\"org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpoint\",\"org.springframework.boot.actuate.endpoint.web.annotation.RestControllerEndpoint\",\"org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpoint\",\"org.springframework.boot.actuate.endpoint.web.annotation.WebEndpoint\",\"org.springframework.context.annotation.Configuration\"}) public class ConfigurationMetadataAnnotationProcessor extends AbstractProcessor; // Annotation Processor that writes meta-data file for @ConfigurationProperties.\npublic class MetadataCollector extends Object; // Used by ConfigurationMetadataAnnotationProcessor to collect ConfigurationMetadata.\npublic class MetadataStore extends Object; // A MetadataStore is responsible for the storage of metadata on the filesystem.\n", "des": "Annotation processor to create @ConfigurationProperties meta-data files."}
{"index": 2930, "repo": "groovy-4.0.13", "code": "package asm;\n\npublic class AssertionWriter extends Object;\npublic class BinaryBooleanExpressionHelper extends BinaryIntExpressionHelper; // Binary write operations specialised for Booleans\npublic class BinaryDoubleExpressionHelper extends BinaryLongExpressionHelper;\npublic class BinaryExpressionHelper extends Object;\npublic class BinaryExpressionMultiTypeDispatcher extends BinaryExpressionHelper; // This class is for internal use only! This class will dispatch to the right type adapters according to the kind of binary expression that is provided.\npublic abstract class BinaryExpressionWriter extends Object; // Base class for writing primitive typed operations\npublic class BinaryFloatExpressionHelper extends BinaryExpressionWriter;\npublic class BinaryIntExpressionHelper extends BinaryExpressionWriter;\npublic class BinaryLongExpressionHelper extends BinaryExpressionWriter;\npublic class BinaryObjectExpressionHelper extends BinaryExpressionWriter;\npublic class BytecodeDumper extends Object implements BytecodeProcessor; // A utility class which can be used in test cases to dump generated bytecode.\npublic class BytecodeHelper extends Object; // A helper class for bytecode generation with AsmClassGenerator.\npublic class BytecodeVariable extends Object; // Represents compile time variable metadata while compiling a method.\npublic class CallSiteWriter extends Object; // This class represents non-public API used by AsmClassGenerator.\npublic class ClosureWriter extends Object;\nprotected static class ClosureWriter.CorrectAccessedVariableVisitor extends CodeVisitorSupport;\nprotected static interface ClosureWriter.UseExistingReference;\npublic class CompileStack extends Object; // Manages different aspects of the code of a code block like handling labels, defining variables, and scopes.\npublic static class CompileStack.BlockRecorder extends Object;\nprotected static class CompileStack.LabelRange extends Object;\npublic class DelegatingController extends WriterController; // This class will delegate all calls to a WriterController given in the constructor.\npublic class ExpressionAsVariableSlot extends BytecodeExpression; // Helper class that takes an Expression and if visited will load it normally, storing the result in a helper variable, which then can be requested after the visit is completed.\npublic class InvocationWriter extends Object;\npublic class LambdaWriter extends ClosureWriter;\npublic class MethodCaller extends Object; // A helper class to invoke methods more easily in ASM\npublic class MethodCallerMultiAdapter extends Object;\npublic class MethodPointerExpressionWriter extends Object; // Generates bytecode for method pointer expressions.\n", "des": "Helper classes for ASMClassGenerator."}
{"index": 3270, "repo": "opencms-core-15.0", "code": "package history;\n\nInterface I_CmsHistoryResource; // A historical version of a resource in the OpenCms VFS resource history.\nClass CmsHistoryFile; // A historical version of a file in the OpenCms VFS resource history.\nClass CmsHistoryFolder; // A historical version of a file in the OpenCms VFS resource history.\nClass CmsHistoryPrincipal; // Describes an OpenCms historical principal entry.\nClass CmsHistoryProject; // Describes an OpenCms historical project entry.\nClass CmsHistoryResourceHandler; // Resource init handler that loads historical versions of resources.\n", "des": "This package contains the classes to deal with the OpenCms VFS history archive."}
{"index": 87, "repo": "ignite-core-2.15.0", "code": "package deployment;\n\npackage deployment.local; // Contains default local deployment SPI implementation.\nInterface DeploymentListener; // Listener for deployment events.\nInterface DeploymentResource; // Generic abstraction over deployed resource containing resource's name, class and corresponding class loader.\nInterface DeploymentSpi; // Grid deployment SPI is in charge of deploying tasks and classes from different sources.\nClass DeploymentResourceAdapter; // Simple adapter for DeploymentResource interface.\nAnnotation Type IgnoreIfPeerClassLoadingDisabled; // This annotation is for all implementations of DeploymentSpi that may be ignored if peer class loading is disabled.\n", "des": "Contains APIs for deployment SPI."}
{"index": 2899, "repo": "spring-integration-amqp-6.1.2", "code": "package dsl;\n\npublic abstract class AbstractMessageListenerContainerSpec<S extends AbstractMessageListenerContainerSpec<S,C>,C extends org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer> extends MessageListenerContainerSpec<S,C>; // Base class for container specs for containers that extend AbstractMessageListenerContainer.\npublic final class Amqp extends Object; // Factory class for AMQP components.\npublic class AmqpAsyncOutboundGatewaySpec extends AmqpBaseOutboundEndpointSpec<AmqpAsyncOutboundGatewaySpec,AsyncAmqpOutboundGateway>;\npublic class AmqpBaseInboundChannelAdapterSpec<S extends AmqpBaseInboundChannelAdapterSpec<S>> extends org.springframework.integration.dsl.MessageProducerSpec<S,AmqpInboundChannelAdapter>; // The base MessageProducerSpec implementation for a AmqpInboundChannelAdapter.\npublic class AmqpBaseInboundGatewaySpec<S extends AmqpBaseInboundGatewaySpec<S>> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,AmqpInboundGateway>; // A base MessagingGatewaySpec implementation for AmqpInboundGateway endpoint options.\npublic abstract class AmqpBaseOutboundEndpointSpec<S extends AmqpBaseOutboundEndpointSpec<S,E>,E extends AbstractAmqpOutboundEndpoint> extends org.springframework.integration.dsl.MessageHandlerSpec<S,E>; // The base MessageHandlerSpec for AbstractAmqpOutboundEndpoints.\npublic class AmqpInboundChannelAdapterDMLCSpec extends AmqpInboundChannelAdapterSpec<AmqpInboundChannelAdapterDMLCSpec,org.springframework.amqp.rabbit.listener.DirectMessageListenerContainer>; // Spec for an inbound channel adapter with a DirectMessageListenerContainer.\npublic class AmqpInboundChannelAdapterSMLCSpec extends AmqpInboundChannelAdapterSpec<AmqpInboundChannelAdapterSMLCSpec,org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer>; // Spec for an inbound channel adapter with a SimpleMessageListenerContainer.\n", "des": "Provides AMQP Component support for the Java DSL."}
{"index": 821, "repo": "commons-rng-simple-1.5", "code": "package internal;\n\nInterface Seed2ArrayConverter<IN,OUT>; // Seed converter to create an output array type.\nInterface SeedConverter<IN,OUT>; // Seed converter.\nClass ByteArray2IntArray; // Creates a int[] from a byte[].\nClass ByteArray2LongArray; // Creates a long[] from a byte[].\nClass Int2Long; // Converts a Integer to an Long.\nClass IntArray2Int; // Creates a single value by \"xor\" of all the values in the input array.\nClass IntArray2LongArray; // Creates a long[] from an int[].\nClass Long2Int; // Converts a Long to an Integer.\nClass Long2IntArray; // Uses a long value to seed a SplitMix64 RNG and create a int[] with the requested number of random values.\nClass Long2LongArray; // Uses a Long value to seed a SplitMix64 RNG and create a long[] with the requested number of random values.\nClass LongArray2IntArray; // Creates an int[] from a long[].\nClass LongArray2Long; // Creates a single value by \"xor\" of all the values in the input array.\nClass NoOpConverter<SEED>; // Dummy converter that simply passes on its input.\nClass ProviderBuilder; // RNG builder.\nClass SeedConverterComposer<IN,TRANS,OUT>; // Composes two converters.\nClass SeedFactory; // Utilities related to seeding.\nEnum NativeSeedType; // The native seed type.\nEnum ProviderBuilder.RandomSourceInternal; // Identifiers of the generators.\n", "des": "Utilities for seed conversion."}
{"index": 3125, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package unique;\n\nInterface UniqueDelegate; // Dialect-level delegate in charge of applying \"uniqueness\" to a column.\nClass DB2UniqueDelegate; // DB2 does not allow unique constraints on nullable columns.\nClass DefaultUniqueDelegate; // The default UniqueDelegate implementation for most dialects.\nClass InformixUniqueDelegate; // Informix requires the constraint name to come last on the alter table.\nClass MySQLUniqueDelegate;\n", "des": "Support for Dialect-specific unique constraint definition"}
{"index": 2713, "repo": "spring-batch-infrastructure-5.0.2", "code": "package data;\n\npackage data.builder; // Builders for Spring Data item readers and writers.\npublic abstract class AbstractPaginatedDataItemReader<T> extends AbstractItemCountingItemStreamItemReader<T>; // A base class that handles basic reading logic based on the paginated semantics of Spring Data's paginated facilities.\npublic class MongoItemReader<T> extends AbstractPaginatedDataItemReader<T> implements org.springframework.beans.factory.InitializingBean; // Restartable ItemReader that reads documents from MongoDB via a paging technique.\npublic class MongoItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean; // A ItemWriter implementation that writes to a MongoDB store using an implementation of Spring Data's MongoOperations.\n@Deprecated public class Neo4jItemReader<T> extends AbstractPaginatedDataItemReader<T> implements org.springframework.beans.factory.InitializingBean;\n@Deprecated public class Neo4jItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean;\npublic class RepositoryItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean; // A ItemReader that reads records utilizing a PagingAndSortingRepository.\npublic class RepositoryItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean; // A ItemWriter wrapper for a CrudRepository from Spring Data.\n", "des": "Spring Data related readers and writers."}
{"index": 2708, "repo": "spring-integration-ftp-6.1.2", "code": "package session;\n\npublic abstract class AbstractFtpSessionFactory<T extends org.apache.commons.net.ftp.FTPClient> extends Object implements org.springframework.integration.file.remote.session.SessionFactory<org.apache.commons.net.ftp.FTPFile>; // Base class for FTP SessionFactory implementations.\npublic class DefaultFtpSessionFactory extends AbstractFtpSessionFactory<org.apache.commons.net.ftp.FTPClient>; // Default implementation of FTP SessionFactory.\npublic class DefaultFtpsSessionFactory extends AbstractFtpSessionFactory<org.apache.commons.net.ftp.FTPSClient>; // SessionFactory for FTPS.\npublic class FtpFileInfo extends org.springframework.integration.file.remote.AbstractFileInfo<org.apache.commons.net.ftp.FTPFile>; // A FileInfo implementation for FTP/FTPS.\npublic class FtpRemoteFileTemplate extends org.springframework.integration.file.remote.RemoteFileTemplate<org.apache.commons.net.ftp.FTPFile>; // FTP version of RemoteFileTemplate providing type-safe access to the underlying FTPClient object.\npublic static enum FtpRemoteFileTemplate.ExistsMode extends Enum<FtpRemoteFileTemplate.ExistsMode>; // The FtpRemoteFileTemplate.exists(String) operation mode.\npublic class FtpSession extends Object implements org.springframework.integration.file.remote.session.Session<org.apache.commons.net.ftp.FTPFile>; // Implementation of Session for FTP.\n", "des": "Provides classes supporting FTP sessions."}
{"index": 1534, "repo": "spring-context-6.0.11", "code": "package metadata;\n\npublic abstract class AbstractJmxAttribute extends Object; // Base class for all JMX metadata classes.\npublic class InvalidMetadataException extends JmxException; // Thrown by the JmxAttributeSource when it encounters incorrect metadata on a managed resource or one of its methods.\npublic interface JmxAttributeSource; // Interface used by the MetadataMBeanInfoAssembler to read source-level metadata from a managed resource's class.\npublic abstract class JmxMetadataUtils extends Object; // Utility methods for converting Spring JMX metadata into their plain JMX equivalents.\npublic class ManagedAttribute extends AbstractJmxAttribute; // Metadata that indicates to expose a given bean property as JMX attribute.\npublic class ManagedMetric extends AbstractJmxAttribute; // Metadata that indicates to expose a given bean property as a JMX attribute, with additional descriptor properties that indicate that the attribute is a metric.\npublic class ManagedNotification extends Object; // Metadata that indicates a JMX notification emitted by a bean.\npublic class ManagedOperation extends AbstractJmxAttribute; // Metadata that indicates to expose a given method as JMX operation.\npublic class ManagedOperationParameter extends Object; // Metadata about JMX operation parameters.\npublic class ManagedResource extends AbstractJmxAttribute; // Metadata indicating that instances of an annotated class are to be registered with a JMX server.\n", "des": "Provides generic JMX metadata classes and basic support for reading JMX metadata in a provider-agnostic manner."}
{"index": 1543, "repo": "spring-context-6.0.11", "code": "package config;\n\npublic class AnnotationDrivenBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Parser for the 'annotation-driven' element of the 'task' namespace.\npublic class ContextLifecycleScheduledTaskRegistrar extends ScheduledTaskRegistrar implements org.springframework.beans.factory.SmartInitializingSingleton; // ScheduledTaskRegistrar subclass which redirects the actual scheduling of tasks to the ContextLifecycleScheduledTaskRegistrar.afterSingletonsInstantiated() callback (as of 4.1.2).\npublic class CronTask extends TriggerTask; // TriggerTask implementation defining a Runnable to be executed according to a standard cron expression.\npublic class ExecutorBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the 'executor' element of the 'task' namespace.\npublic class FixedDelayTask extends IntervalTask; // Specialization of IntervalTask for fixed-delay semantics.\npublic class FixedRateTask extends IntervalTask; // Specialization of IntervalTask for fixed-rate semantics.\npublic class IntervalTask extends Task; // Task implementation defining a Runnable to be executed at a given millisecond interval which may be treated as fixed-rate or fixed-delay depending on context.\npublic final class ScheduledTask extends Object; // A representation of a scheduled task at runtime, used as a return value for scheduling methods.\npublic interface ScheduledTaskHolder; // Common interface for exposing locally scheduled tasks.\npublic class ScheduledTaskRegistrar extends Object implements ScheduledTaskHolder, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Helper bean for registering tasks with a TaskScheduler, typically using cron expressions.\npublic class ScheduledTasksBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the 'scheduled-tasks' element of the scheduling namespace.\npublic class SchedulerBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the 'scheduler' element of the 'task' namespace.\npublic class Task extends Object; // Holder class defining a Runnable to be executed as a task, typically at a scheduled time or interval.\n", "des": "Support package for declarative scheduling configuration, with XML schema being the primary configuration format."}
{"index": 2874, "repo": "spring-integration-core-6.1.2", "code": "package metadata;\n\npublic interface ConcurrentMetadataStore extends MetadataStore; // Supports atomic updates to values in the store.\npublic interface ListenableMetadataStore extends ConcurrentMetadataStore; // ConcurrentMetadataStore with the ability of registering MetadataStoreListener callbacks, to be invoked when changes occur in the metadata store.\n@ManagedResource public interface MetadataStore; // Strategy interface for storing metadata from certain adapters to avoid duplicate delivery of messages, for example.\npublic interface MetadataStoreListener; // A callback to be invoked whenever a value changes in the data store.\npublic abstract class MetadataStoreListenerAdapter extends Object implements MetadataStoreListener; // Base implementation for a MetadataStoreListener.\npublic class PropertiesPersistingMetadataStore extends Object implements ConcurrentMetadataStore, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, Closeable, Flushable; // Properties file-based implementation of MetadataStore.\npublic class SimpleMetadataStore extends Object implements ConcurrentMetadataStore; // Simple implementation of MetadataStore that uses a ConcurrentMap for the data store.\n", "des": "Provides classes supporting metadata stores."}
{"index": 615, "repo": "org.apache.karaf.main-2.4.4", "code": "package startlevel;\n\nInterface StartLevel; // This service has been replaced by the org.osgi.framework.startlevel package.\n", "des": "Start Level Package Version 1.1."}
{"index": 1502, "repo": "spring-context-6.0.11", "code": "package annotation;\n\n@Configuration(proxyBeanMethods=false) public abstract class AbstractCachingConfiguration extends Object implements ImportAware; // Abstract base @Configuration class providing common structure for enabling Spring's annotation-driven cache management capability.\nprotected static class AbstractCachingConfiguration.CachingConfigurerSupplier extends Object;\npublic class AnnotationCacheOperationSource extends AbstractFallbackCacheOperationSource implements Serializable; // Implementation of the CacheOperationSource interface for working with caching metadata in annotation format.\n@FunctionalInterface protected static interface AnnotationCacheOperationSource.CacheOperationProvider; // Callback interface providing CacheOperation instance(s) based on a given CacheAnnotationParser.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Inherited @Documented @Reflective public @interface Cacheable; // Annotation indicating that the result of invoking a method (or all methods in a class) can be cached.\npublic interface CacheAnnotationParser; // Strategy interface for parsing known caching annotation types.\n@Target(TYPE) @Retention(RUNTIME) @Documented public @interface CacheConfig; // @CacheConfig provides a mechanism for sharing common cache-related settings at the class level.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Inherited @Documented @Reflective public @interface CacheEvict; // Annotation indicating that a method (or all methods on a class) triggers a cache evict operation.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Inherited @Documented @Reflective public @interface CachePut; // Annotation indicating that a method (or all methods on a class) triggers a cache put operation.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Inherited @Documented @Reflective public @interface Caching; // Group annotation for multiple cache annotations (of different or the same type).\npublic class CachingConfigurationSelector extends AdviceModeImportSelector<EnableCaching>; // Selects which implementation of AbstractCachingConfiguration should be used based on the value of EnableCaching.mode() on the importing @Configuration class.\npublic interface CachingConfigurer; // Interface to be implemented by @Configuration classes annotated with @EnableCaching that wish or need to specify explicitly how caches are resolved and how keys are generated for annotation-driven cache management.\n@Deprecated(since=\"6.0\") public class CachingConfigurerSupport extends Object implements CachingConfigurer;\n", "des": "Annotations and supporting classes for declarative cache management."}
{"index": 3778, "repo": "lucene-analysis-common-9.7.0", "code": "package de;\n\nClass GermanAnalyzer; // Analyzer for German language.\nClass GermanLightStemFilter; // A TokenFilter that applies GermanLightStemmer to stem German words.\nClass GermanLightStemFilterFactory; // Factory for GermanLightStemFilter.\nClass GermanLightStemmer; // Light Stemmer for German.\nClass GermanMinimalStemFilter; // A TokenFilter that applies GermanMinimalStemmer to stem German words.\nClass GermanMinimalStemFilterFactory; // Factory for GermanMinimalStemFilter.\nClass GermanMinimalStemmer; // Minimal Stemmer for German.\nClass GermanNormalizationFilter; // Normalizes German characters according to the heuristics of the German2 snowball algorithm.\nClass GermanNormalizationFilterFactory; // Factory for GermanNormalizationFilter.\nClass GermanStemFilter; // A TokenFilter that stems German words.\nClass GermanStemFilterFactory; // Factory for GermanStemFilter.\nClass GermanStemmer; // A stemmer for German words.\n", "des": "Analyzer for German."}
{"index": 2837, "repo": "spring-data-r2dbc-3.1.2", "code": "package query;\n\npublic abstract class AbstractR2dbcQuery extends Object implements RepositoryQuery; // Base class for reactive RepositoryQuery implementations for R2DBC.\npublic interface BindableQuery extends Supplier<String>; // Interface declaring a query that supplies SQL and can bind parameters to a DatabaseClient.GenericExecuteSpec.\npublic class PartTreeR2dbcQuery extends AbstractR2dbcQuery; // An AbstractR2dbcQuery implementation based on a PartTree.\npublic class R2dbcQueryMethod extends QueryMethod; // Reactive specific implementation of QueryMethod.\npublic class StringBasedR2dbcQuery extends AbstractR2dbcQuery; // String-based StringBasedR2dbcQuery implementation.\n", "des": "Query support for R2DBC repositories."}
{"index": 735, "repo": "spring-data-solr-4.3.15", "code": "package mapping;\n\nInterface SolrPersistentEntity<T>;\nInterface SolrPersistentProperty;\nClass SimpleSolrMappingContext; // Solr specific implementation of MappingContext\nClass SimpleSolrPersistentEntity<T>; // Solr specific PersistentEntity implementation holding eg. name of solr core.\nClass SimpleSolrPersistentProperty; // Solr specific PersistentProperty implementation processing taking Field into account\nClass SolrMappingEventPublisher;\nClass SolrSimpleTypes; // Set of type that do not need to be converted into a solr readable format\nEnum SolrPersistentProperty.PropertyToFieldNameConverter;\nAnnotation Type ChildDocument; // Marker interface for Apache Solr child document can be used as an alternative to Field.child().\nAnnotation Type Dynamic; // Declare a field as dynamic.\nAnnotation Type Indexed;\nAnnotation Type Score; // Defines the annotated field to store the score of a document within search result.\nAnnotation Type SolrDocument;\n", "des": "All the mapping things!"}
{"index": 2255, "repo": "spring-vault-core-3.0.4", "code": "package vault;\n\npackage vault.annotation; // Annotation support for the Spring Vault.\npackage vault.authentication; // Support for authentication and session management.\npackage vault.client; // Spring Vault Client abstraction.\npackage vault.config; // Spring configuration for Vault.\npackage vault.core; // Vault core support.\npackage vault.security; // Integration with Spring Security.\npackage vault.support; // Classes supporting the Vault packages, such as value objects.\npublic class VaultException extends NestedRuntimeException; // The Spring Vault specific NestedRuntimeException implementation.\n", "des": "Spring support for Hashicorp Vault."}
{"index": 2646, "repo": "spring-data-cassandra-4.1.2", "code": "package core;\n\npackage core.convert; // Spring Data Cassandra specific converter infrastructure.\npackage core.cql; // CQL core support.\npackage core.legacy; // Apache Cassandra legacy asynchronous support for easier migration.\npackage core.mapping; // Infrastructure for the Apache Cassandra row-to-object mapping subsystem.\npackage core.query; // Apache Cassandra specific query and update support.\npublic interface AsyncCassandraOperations; // Interface specifying a basic set of asynchronous Cassandra operations.\npublic class AsyncCassandraTemplate extends Object implements AsyncCassandraOperations, ApplicationEventPublisherAware, ApplicationContextAware; // Primary implementation of AsyncCassandraOperations.\npublic static interface AsyncCassandraTemplate.AsyncPreparedStatementHandler extends AsyncPreparedStatementCreator, PreparedStatementBinder, CqlProvider; // General callback interface used to create and bind prepared CQL statements.\npublic interface CassandraAdminOperations extends CassandraOperations; // Operations for managing a Cassandra keyspace.\npublic class CassandraAdminTemplate extends CassandraTemplate implements CassandraAdminOperations; // Default implementation of CassandraAdminOperations.\npublic interface CassandraBatchOperations; // Batch operations for insert/update/delete actions on a table.\npublic interface CassandraOperations extends FluentCassandraOperations; // Interface specifying a basic set of Cassandra operations.\npublic class CassandraPersistentEntitySchemaCreator extends Object; // Schema creation support for Cassandra based on CassandraMappingContext and CassandraPersistentEntity.\npublic class CassandraPersistentEntitySchemaDropper extends Object; // Schema drop support for Cassandra based on CassandraMappingContext and CassandraPersistentEntity.\npublic class CassandraTemplate extends Object implements CassandraOperations, ApplicationEventPublisherAware, ApplicationContextAware; // Primary implementation of CassandraOperations.\npublic static class CassandraTemplate.PreparedStatementHandler extends Object implements PreparedStatementCreator, PreparedStatementBinder, CqlProvider; // Utility class to prepare a SimpleStatement and bind values associated with the statement to a BoundStatement.\npublic class DeleteOptions extends WriteOptions; // Extension to WriteOptions for use with DELETE operations.\npublic static class DeleteOptions.DeleteOptionsBuilder extends WriteOptions.WriteOptionsBuilder; // Builder for DeleteOptions.\npublic class EntityWriteResult<T> extends WriteResult; // The result of a write operation for an entity.\npublic interface ExecutableDeleteOperation; // ExecutableDeleteOperation allows creation and execution of Cassandra DELETE operations in a fluent API style.\npublic static interface ExecutableDeleteOperation.DeleteWithQuery; // Filtering (optional).\npublic static interface ExecutableDeleteOperation.DeleteWithTable; // Table override (optional).\n", "des": "Apache Cassandra core support."}
{"index": 2650, "repo": "spring-data-cassandra-4.1.2", "code": "package generator;\n\npublic class AddColumnCqlGenerator extends ColumnChangeCqlGenerator<AddColumnSpecification>; // CQL generator for generating an ADD clause of an ALTER TABLE statement.\npublic class AlterColumnCqlGenerator extends ColumnChangeCqlGenerator<AlterColumnSpecification>; // CQL generator for generating an ALTER column clause of an ALTER TABLE statement.\npublic class AlterKeyspaceCqlGenerator extends KeyspaceOptionsCqlGenerator<AlterKeyspaceSpecification>; // CQL generator for generating ALTER TABLE statements.\npublic class AlterTableCqlGenerator extends TableOptionsCqlGenerator<AlterTableSpecification>; // CQL generator for generating ALTER TABLE statements.\npublic class AlterUserTypeCqlGenerator extends UserTypeNameCqlGenerator<AlterUserTypeSpecification>; // CQL generator for generating ALTER TYPE statements.\npublic abstract class ColumnChangeCqlGenerator<T extends ColumnChangeSpecification> extends Object; // Base class for column change CQL generators.\npublic class CreateIndexCqlGenerator extends IndexNameCqlGenerator<CreateIndexSpecification>; // CQL generator for generating a CREATE INDEX statement.\npublic class CreateKeyspaceCqlGenerator extends KeyspaceOptionsCqlGenerator<CreateKeyspaceSpecification>; // CQL generator for generating a CREATE TABLE statement.\npublic class CreateTableCqlGenerator extends TableOptionsCqlGenerator<TableSpecification<CreateTableSpecification>>; // CQL generator for generating a CREATE TABLE statement.\npublic class CreateUserTypeCqlGenerator extends UserTypeNameCqlGenerator<CreateUserTypeSpecification>; // CQL generator for generating a CREATE TYPE statement.\npublic class DropColumnCqlGenerator extends ColumnChangeCqlGenerator<DropColumnSpecification>; // CQL generator for generating a DROP column clause of an ALTER TABLE statement.\npublic class DropIndexCqlGenerator extends IndexNameCqlGenerator<DropIndexSpecification>; // CQL generator for generating a DROP INDEX statement.\npublic class DropKeyspaceCqlGenerator extends KeyspaceNameCqlGenerator<DropKeyspaceSpecification>; // CQL generator for generating a DROP TABLE statement.\npublic class DropTableCqlGenerator extends TableNameCqlGenerator<DropTableSpecification>; // CQL generator for generating a DROP TABLE statement.\npublic class DropUserTypeCqlGenerator extends UserTypeNameCqlGenerator<DropUserTypeSpecification>; // CQL generator for generating a DROP TYPE statement.\n", "des": "CQL generators for Keyspace object actions."}
{"index": 579, "repo": "commons-collections-3.2.2", "code": "package comparators;\n\nClass BooleanComparator; // A Comparator for Boolean objects that can sort either true or false first.\nClass ComparableComparator; // A Comparator that compares Comparable objects.\nClass ComparatorChain; // A ComparatorChain is a Comparator that wraps one or more Comparators in sequence.\nClass FixedOrderComparator; // A Comparator which imposes a specific order on a specific set of Objects.\nClass NullComparator; // A Comparator that will compare nulls to be either lower or higher than other objects.\nClass ReverseComparator; // Reverses the order of another comparator by reversing the arguments to its compare method.\nClass TransformingComparator; // Decorates another Comparator with transformation behavior.\n", "des": "This package contains implementations of the Comparator interface."}
{"index": 2420, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package servlet;\n\n@AutoConfiguration(after={ServletManagementContextAutoConfiguration.class,HealthEndpointAutoConfiguration.class,InfoEndpointAutoConfiguration.class}) @ConditionalOnProperty(prefix=\"management.cloudfoundry\", name=\"enabled\", matchIfMissing=true) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.springframework.web.servlet.DispatcherServlet.class) @ConditionalOnBean(org.springframework.web.servlet.DispatcherServlet.class) @ConditionalOnCloudPlatform(CLOUD_FOUNDRY) public class CloudFoundryActuatorAutoConfiguration extends Object; // Auto-configuration to expose actuator endpoints for Cloud Foundry to use.\n@ConditionalOnClass({org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer.class,org.springframework.security.config.annotation.web.builders.WebSecurity.class}) @Configuration(proxyBeanMethods=false) public static class CloudFoundryActuatorAutoConfiguration.IgnoredCloudFoundryPathsWebSecurityConfiguration extends Object; // WebSecurityConfigurer to tell Spring Security to ignore cloudfoundry specific paths.\n@EndpointCloudFoundryExtension(endpoint=org.springframework.boot.actuate.health.HealthEndpoint.class) public class CloudFoundryHealthEndpointWebExtension extends Object; // @EndpointExtension for the HealthEndpoint that always exposes full health details.\n@EndpointCloudFoundryExtension(endpoint=org.springframework.boot.actuate.info.InfoEndpoint.class) public class CloudFoundryInfoEndpointWebExtension extends Object; // @EndpointExtension for the InfoEndpoint that always exposes full git details.\n", "des": "Auto-configuration for actuator Cloud Foundry concerns using Spring MVC."}
{"index": 2822, "repo": "spring-orm-6.0.11", "code": "package support;\n\npublic class OpenEntityManagerInViewFilter extends org.springframework.web.filter.OncePerRequestFilter; // Servlet Filter that binds a JPA EntityManager to the thread for the entire processing of the request.\npublic class OpenEntityManagerInViewInterceptor extends EntityManagerFactoryAccessor implements org.springframework.web.context.request.AsyncWebRequestInterceptor; // Spring web request interceptor that binds a JPA EntityManager to the thread for the entire processing of the request.\npublic class PersistenceAnnotationBeanPostProcessor extends Object implements org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor, org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor, org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor, org.springframework.beans.factory.aot.BeanRegistrationAotProcessor, org.springframework.core.PriorityOrdered, org.springframework.beans.factory.BeanFactoryAware, Serializable; // BeanPostProcessor that processes PersistenceUnit and PersistenceContext annotations, for injection of the corresponding JPA resources EntityManagerFactory and EntityManager.\npublic class SharedEntityManagerBean extends EntityManagerFactoryAccessor implements org.springframework.beans.factory.FactoryBean<EntityManager>, org.springframework.beans.factory.InitializingBean; // FactoryBean that exposes a shared JPA EntityManager reference for a given EntityManagerFactory.\n", "des": "Classes supporting the org.springframework.orm.jpa package."}
{"index": 3679, "repo": "solr-core-9.3.0", "code": "package query;\n\nClass FilterQuery; // A filtered query wrapped around another query similar to BooleanClause.Occur.FILTER -- it scores as 0.\nClass SolrRangeQuery;\n", "des": "Solr Queries"}
{"index": 729, "repo": "mina-core-3.0.0-M2", "code": "package tcp;\n\nInterface TcpSessionConfig; // A IoSessionConfig for socket based sessions.\nClass AbstractTcpClient; // Base class for TCP based Clients\nClass AbstractTcpServer; // Base class for TCP based Servers\nClass DefaultTcpSessionConfig; // Implementation for the socket session configuration.\nClass ProxyTcpSessionConfig; // This class proxy the inner java.net.Socket configuration with the SocketSessionConfig of the session.\n", "des": "Shared plumber for TCP transport implementations."}
{"index": 1557, "repo": "spring-context-6.0.11", "code": "package support;\n\npublic class BindingAwareConcurrentModel extends ConcurrentModel; // Subclass of ConcurrentModel that automatically removes the BindingResult object when its corresponding target attribute is replaced through regular Map operations.\npublic class BindingAwareModelMap extends ExtendedModelMap; // Subclass of ExtendedModelMap that automatically removes a BindingResult object if the corresponding target attribute gets replaced through regular Map operations.\n", "des": "Support classes for handling validation results."}
{"index": 914, "repo": "commons-compress-1.23.0", "code": "package changes;\n\nClass ChangeSet; // ChangeSet collects and performs changes to an archive.\nClass ChangeSetPerformer; // Performs ChangeSet operations on a stream.\nClass ChangeSetResults; // Stores the results of an performed ChangeSet operation.\n", "des": "EXPERIMENTAL support for changesets that are applied to archives."}
{"index": 62, "repo": "ignite-core-2.15.0", "code": "package socket;\n\nInterface SocketMessageConverter<T>; // Socket message converter.\nClass SocketStreamer<T,K,V>; // Server that receives data from TCP socket, converts it to key-value pairs using StreamTupleExtractor and streams into IgniteDataStreamer instance.\n", "des": "Contains socket streamer implementation."}
{"index": 279, "repo": "pdfbox-3.0.0-beta1", "code": "package filter;\n\nClass DecodeOptions; // Options that may be passed to a Filter to request special handling when decoding the stream.\nClass DecodeResult; // The result of a filter decode operation.\nClass Filter; // A filter for stream data.\nClass FilterFactory; // Factory for Filter classes.\nClass JPXFilter; // Decompress data encoded using the wavelet-based JPEG 2000 standard, reproducing the original data.\nClass LZWFilter; // This is the filter used for the LZWDecode filter.\nClass Predictor; // Helper class to contain predictor decoding used by Flate and LZW filter.\nClass MissingImageReaderException; // Thrown when a required JAI ImageReader is missing.\n", "des": "This package will hold the PDFBox implementations of the filters that are used in PDF documents."}
{"index": 736, "repo": "spring-data-solr-4.3.15", "code": "package query;\n\npackage query.result; // Query result abstractions for Solr returned NamedList.\nInterface CalculatedField;\nInterface FacetAndHighlightQuery; // A Query that combines a FacetQuery and a HighlightQuery\nInterface FacetQuery; // Query to be used for faceting.\nInterface Field; // Defines a Field that can be used within Criteria.\nInterface FilterQuery; // Filter Queries are simple solr Queries applied after executing the original query.\nInterface Function;\nInterface Function.Context; // The Function.Context the Function is used in.\nInterface HighlightQuery;\nInterface PivotField; // Defines a field that could be used within a pivot facet query.\nInterface Query; // A Query that can be translated into a solr understandable Query.\nInterface QueryParameter; // Query Parameter to be used when executing query against solr server\nInterface QueryStringHolder; // Class holding a solr readable QueryString that can be used with the q parameter.\nInterface SolrDataQuery; // Common interface for any Query\nInterface TermsQuery;\nInterface Update; // Update one or more fields of a Document without touching the others.\nInterface UpdateField;\nInterface ValueHoldingField;\nClass AbstractFacetAndHighlightQueryDecorator; // General purpose FacetAndHighlightQuery decorator.\nClass AbstractFacetQueryDecorator; // General purpose FacetQuery decorator.\nClass AbstractFunction;\nClass AbstractHighlightQueryDecorator; // General purpose HighlightQuery decorator.\nClass AbstractQueryDecorator; // General purpose Query abstract decorator.\nClass AnyCriteria;\nClass Criteria; // Criteria is the central class when constructing queries.\nClass Criteria.Predicate; // Single entry to be used when defining search criteria\nClass Crotch;\nClass CurrencyFunction; // Implementation of currency(field_name,[CODE])\nClass DefaultValueFunction; // Implementation of def(field|function,defaultValue)\nClass DistanceField; // Implementation of CalculatedField for geodist\nClass DistanceFunction; // Implementation of dist(power, pointA, pointB)\nClass DistanceFunction.Builder;\nClass DivideFunction; // Implementation of div(x,y)\nClass DivideFunction.Builder;\nClass ExistsFunction; // Implementation of exists(field|function)\nClass FacetOptions; // Set of options that can be set on a FacetQuery\nClass FacetOptions.FacetParameter;\n", "des": "Query abstractions for SolrQuery."}
{"index": 651, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package utils;\n\nClass FederationApplicationHomeSubClusterStoreInputValidator; // Utility class to validate the inputs to FederationApplicationHomeSubClusterStore, allows a fail fast mechanism for invalid user inputs.\nClass FederationMembershipStateStoreInputValidator; // Utility class to validate the inputs to FederationMembershipStateStore, allows a fail fast mechanism for invalid user inputs.\nClass FederationPolicyStoreInputValidator; // Utility class to validate the inputs to FederationPolicyStore, allows a fail fast mechanism for invalid user inputs.\nClass FederationStateStoreUtils; // Common utility methods used by the store implementations.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1075, "repo": "hadoop-yarn-common-3.3.6", "code": "package hamlet;\n\nInterface HamletSpec._;\nInterface HamletSpec._Anchor;\nInterface HamletSpec._Block; // %block -(FORM|FIELDSET)\nInterface HamletSpec._Body;\nInterface HamletSpec._Cell;\nInterface HamletSpec._Child;\nInterface HamletSpec._Content;\nInterface HamletSpec._Dl;\nInterface HamletSpec._FieldSet;\nInterface HamletSpec._FontSize; // Part of %pre.exclusion\nInterface HamletSpec._FontStyle; // %fontstyle -(%pre.exclusion)\nInterface HamletSpec._Form;\nInterface HamletSpec._FormCtrl;\nInterface HamletSpec._Head;\nInterface HamletSpec._Html;\nInterface HamletSpec._ImgObject; // Part of %pre.exclusion\nInterface HamletSpec._InsDel; // INS and DEL are unusual for HTML \"in that they may serve as either block-level or inline elements (but not both)\".\nInterface HamletSpec._Label;\nInterface HamletSpec._Legend;\nInterface HamletSpec._Li;\nInterface HamletSpec._Object;\nInterface HamletSpec._Option;\nInterface HamletSpec._Param;\nInterface HamletSpec._RawContent;\nInterface HamletSpec._Script;\nInterface HamletSpec._Special; // %special -(A|%pre.exclusion)\nInterface HamletSpec._SubSup; // Part of %pre.exclusion\nInterface HamletSpec._Table;\nInterface HamletSpec._TableCol;\nInterface HamletSpec._TableRow;\nInterface HamletSpec._Tr;\nInterface HamletSpec.A;\nInterface HamletSpec.ABBR;\nInterface HamletSpec.ACRONYM;\nInterface HamletSpec.ADDRESS;\nInterface HamletSpec.AREA;\nInterface HamletSpec.Attrs; // %attrs\nInterface HamletSpec.B;\nInterface HamletSpec.BASE;\nInterface HamletSpec.BDO; // The dir attribute is required for the BDO element\nInterface HamletSpec.Block; // %block\nInterface HamletSpec.BLOCKQUOTE;\n", "des": "Deprecated."}
{"index": 3380, "repo": "opencms-core-15.0", "code": "package types;\n\nInterface I_CmsXmlContentValue; // Provides access to the value of a specific XML content node.\nInterface I_CmsXmlSchemaType; // Describes a type in an OpenCms XML schema based content definition.\nInterface I_CmsXmlValidateWithMessage; // Interface to provide specific error messages on validation\nClass A_CmsXmlContentValue; // Base class for XML content value implementations.\nClass A_CmsXmlValueCdataBase; // Base class for XML content value implementations that require only a simple XML cdata text node.\nClass A_CmsXmlValueTextBase; // Base class for XML content value implementations that require only a simple XML plain text node.\nClass CmsXmlBooleanValue; // Describes the XML content type \"OpenCmsBoolean\".\nClass CmsXmlCategoryValue; // Describes the XML content type \"OpenCmsVfsFile\".\nClass CmsXmlColorValue; // Describes the XML content type \"OpenCmsColor\".\nClass CmsXmlDateTimeValue; // Describes the XML content type \"OpenCmsDateTime\".\nClass CmsXmlDisplayFormatterValue; // XML value type for display formatters.\nClass CmsXmlDynamicCategoryValue; // Describes the XML content type \"OpenCmsVfsFile\".\nClass CmsXmlHtmlValue; // Describes the XML content type \"OpenCmsHtml\".\nClass CmsXmlLocaleValue; // Describes the XML content type \"OpenCmsLocale\".\nClass CmsXmlNestedContentDefinition; // A nested content XML definition that is included by another XML content definition.\nClass CmsXmlPlainTextStringValue; // Describes the XML content type \"OpenCmsPlainTextString\".\nClass CmsXmlSerialDateValue; // Describes the XML content type \"OpenCmsSerialDate\".\nClass CmsXmlStringValue; // Describes the XML content type \"OpenCmsString\".\nClass CmsXmlVarLinkValue; // Describes the XML content type \"OpenCmsVarLink\".\nClass CmsXmlVfsFileValue; // Describes the XML content type \"OpenCmsVfsFile\".\nClass CmsXmlVfsImageValue; // Describes the XML content type \"OpenCmsVfsImage\".\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum I_CmsXmlContentValue.SearchContentType; // The available search types for element searchsetting.\n", "des": "Contains the basic XML content type definitions, used for XML content and XML pages."}
{"index": 456, "repo": "camel-core-3.0.0-RC1", "code": "package rest;\n\nInterface RestContainer; // Container to hold Rest.\nClass DeleteVerbDefinition; // Rest DELETE command\nClass GetVerbDefinition; // Rest GET command\nClass HeadVerbDefinition; // Rest HEAD command\nClass PatchVerbDefinition; // Rest PATCH command\nClass PostVerbDefinition; // Rest POST command\nClass PutVerbDefinition; // Rest PUT command\nClass RestBindingDefinition; // To configure rest binding\nClass RestConfigurationDefinition; // To configure rest\nClass RestConstants;\nClass RestDefinition; // Defines a rest service using the rest-dsl\nClass RestOperationParamDefinition; // To specify the rest operation parameters using Swagger.\nClass RestOperationResponseHeaderDefinition; // To specify the rest operation response headers using Swagger.\nClass RestOperationResponseMsgDefinition; // To specify the rest operation response messages using Swagger.\nClass RestPropertyDefinition; // A key value pair\nClass RestsDefinition; // A series of rest services defined using the rest-dsl\nClass RestSecuritiesDefinition; // To configure rest security definitions.\nClass RestSecurityApiKey; // Rest security basic auth definition\nClass RestSecurityBasicAuth; // Rest security basic auth definition\nClass RestSecurityDefinition; // To specify the rest security definitions using Swagger.\nClass RestSecurityOAuth2; // Rest security OAuth2 definition\nClass SecurityDefinition; // Rest security definition\nClass VerbDefinition; // Rest command\nEnum CollectionFormat;\nEnum RestBindingMode;\nEnum RestHostNameResolver; // To configure the rest hostname resolver\nEnum RestParamType; // Rest parameter types\n", "des": "The JAXB POJOs for the REST DSL"}
{"index": 383, "repo": "mahout-core-14.1", "code": "package stat;\n\nClass Gamma; // Partially deprecated until unit tests are in place.\nClass Probability; // Partially deprecated until unit tests are in place.\n", "des": "Tools for basic and advanced statistics: Estimators, Gamma functions, Beta functions, Probabilities, Special integrals, etc."}
{"index": 934, "repo": "commons-compress-1.23.0", "code": "package forms;\n\nClass ByteCodeForm;\nClass ByteForm; // This class implements the form for bytecodes which have single byte operands.\nClass ClassRefForm; // This class implements the byte code form for those bytecodes which have class references (and only class references).\nClass ClassSpecificReferenceForm; // Abstract superclass of all classes that have class-specific references to constant pool information.\nClass DoubleForm; // This class implements the byte code form for those bytecodes which have double references (and only double references).\nClass FieldRefForm; // This class implements the byte code form for those bytecodes which have field references (and only field references).\nClass FloatRefForm; // This class implements the byte code form for those bytecodes which have float references (and only float references).\nClass IincForm; // This class implements the byte code form for the iinc instruction.\nClass IMethodRefForm; // This class implements the byte code form for those bytecodes which have IMethod references (and only IMethod references).\nClass InitMethodReferenceForm; // Abstract superclass of those classes which look up init methods (these are class specific methods).\nClass IntRefForm; // This class implements the byte code form for those bytecodes which have int references (and only int references).\nClass LabelForm; // This class implements the byte code form for those bytecodes which have label references (and only label references).\nClass LocalForm; // This class implements the byte code form for those bytecodes which have float references (and only float references).\nClass LongForm; // This class implements the byte code form for those bytecodes which have long references (and only long references).\nClass LookupSwitchForm;\nClass MethodRefForm; // This class implements the byte code form for those bytecodes which have regular method references (and only regular method references).\nClass MultiANewArrayForm; // This class implements the byte code form for the multianewarray instruction.\nClass NarrowClassRefForm; // This class is used for representations of cldc and cldc_w.\nClass NewClassRefForm; // This class is an extension of the ClassRefForm.\nClass NewInitMethodRefForm; // This class is used to determine which init method should be called, based on the last class which was sent a constructor message.\n", "des": "Internal package."}
{"index": 3589, "repo": "lucene-test-framework-9.7.0", "code": "package ramonly;\n\nClass RAMOnlyPostingsFormat; // Stores all postings data in RAM, but writes a small token (header + single int) to identify which \"slot\" the index is using in RAM HashMap.\n", "des": "Codec for testing that never writes to disk."}
{"index": 3779, "repo": "lucene-analysis-common-9.7.0", "code": "package el;\n\nClass GreekAnalyzer; // Analyzer for the Greek language.\nClass GreekLowerCaseFilter; // Normalizes token text to lower case, removes some Greek diacritics, and standardizes final sigma to sigma.\nClass GreekLowerCaseFilterFactory; // Factory for GreekLowerCaseFilter.\nClass GreekStemFilter; // A TokenFilter that applies GreekStemmer to stem Greek words.\nClass GreekStemFilterFactory; // Factory for GreekStemFilter.\nClass GreekStemmer; // A stemmer for Greek words, according to: Development of a Stemmer for the Greek Language. Georgios Ntais\n", "des": "Analyzer for Greek."}
{"index": 2091, "repo": "spring-webflux-6.0.11", "code": "package accept;\n\npublic class FixedContentTypeResolver extends Object implements RequestedContentTypeResolver; // Resolver that always resolves to a fixed list of media types.\npublic class HeaderContentTypeResolver extends Object implements RequestedContentTypeResolver; // Resolver that looks at the 'Accept' header of the request.\npublic class ParameterContentTypeResolver extends Object implements RequestedContentTypeResolver; // Resolver that checks a query parameter and uses it to look up a matching MediaType.\npublic interface RequestedContentTypeResolver; // Strategy to resolve the requested media types for a ServerWebExchange.\npublic class RequestedContentTypeResolverBuilder extends Object; // Builder for a composite RequestedContentTypeResolver that delegates to other resolvers each implementing a different strategy to determine the requested content type -- e.g.\npublic static class RequestedContentTypeResolverBuilder.ParameterResolverConfigurer extends Object; // Helper to create and configure ParameterContentTypeResolver.\n", "des": "RequestedContentTypeResolver strategy and implementations to resolve the requested content type for a given request."}
{"index": 3503, "repo": "poi-5.2.3", "code": "package property;\n\nInterface Child; // This interface defines methods for finding and setting sibling Property instances\nInterface Parent; // Behavior for parent (directory) properties\nInterface PropertyConstants; // Interface PropertyConstants\nClass DirectoryProperty; // Directory property\nClass DirectoryProperty.PropertyComparator;\nClass DocumentProperty; // Trivial extension of Property for POIFSDocuments\nClass Property; // This abstract base class is the ancestor of all classes implementing POIFS Property behavior.\nClass PropertyTable; // This class embodies the Property Table for a POIFSFileSystem; this is basically the directory for all of the documents in the filesystem and looks up entries in the filesystem to their chain of blocks.\nClass RootProperty; // Root property\n", "des": "property package contains high and low level Property structures for POIFS."}
{"index": 0, "repo": "connect-api-3.5.0", "code": "package components;\n\nInterface Versioned; // Connect requires some components implement this interface to define a version string.\n", "des": "Provides common interfaces used to describe pluggable components."}
{"index": 2476, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jdbc;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnClass({javax.sql.DataSource.class,io.micrometer.core.instrument.MeterRegistry.class}) @ConditionalOnBean({javax.sql.DataSource.class,io.micrometer.core.instrument.MeterRegistry.class}) public class DataSourcePoolMetricsAutoConfiguration extends Object; // Auto-configuration for metrics on all available datasources.\n", "des": "Auto-configuration for JPA metrics."}
{"index": 107, "repo": "ignite-core-2.15.0", "code": "package plugin;\n\npackage plugin.platform; // Contains platform plugins management API.\nInterface CachePluginConfiguration<K,V>; // Cache plugin configuration.\nInterface CachePluginContext<C extends CachePluginConfiguration>; // Cache plugin context.\nInterface CachePluginProvider<C extends CachePluginConfiguration>; // Cache plugin provider is a point for processing of properties which provide specific CachePluginConfiguration.\nInterface CacheTopologyValidatorProvider; // The CacheTopologyValidatorProvider is used to pass an implementation of TopologyValidators for a specific cache through Ignite plugin extensions mechanism.\nInterface Extension; // Marker interface for extensions.\nInterface ExtensionRegistry; // Context that allows to register extensions.\nInterface IgnitePlugin; // Marker interface for all Ignite plugins.\nInterface PluginConfiguration; // Plugin configuration.\nInterface PluginContext; // Plugin context.\nInterface PluginProvider<C extends PluginConfiguration>; // Pluggable Ignite component.\nClass PluginNotFoundException; // Exception thrown if plugin is not found.\nClass PluginValidationException; // Plugin validation exception.\n", "des": "Contains plugins management API."}
{"index": 645, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package store;\n\npackage store.exception; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage store.impl; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage store.metrics; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage store.records; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage store.utils; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\nInterface FederationApplicationHomeSubClusterStore; // FederationApplicationHomeSubClusterStore maintains the state of all Applications that have been submitted to the federated cluster.\nInterface FederationMembershipStateStore; // FederationMembershipStateStore maintains the state of all subcluster(s) as encapsulated by SubClusterInfo for all the subcluster(s) that are participating in federation.\nInterface FederationPolicyStore; // The FederationPolicyStore provides a key-value interface to access the policies configured for the system.\nInterface FederationStateStore; // FederationStore extends the three interfaces used to coordinate the state of a federated cluster: FederationApplicationHomeSubClusterStore, FederationMembershipStateStore, and FederationPolicyStore.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 2771, "repo": "spring-jms-6.0.11", "code": "package core;\n\npackage core.support; // Classes supporting the org.springframework.jms.core package.\n@FunctionalInterface public interface BrowserCallback<T>; // Callback for browsing the messages in a JMS queue.\npublic interface JmsMessageOperations extends org.springframework.messaging.core.MessageSendingOperations<Destination>, org.springframework.messaging.core.MessageReceivingOperations<Destination>, org.springframework.messaging.core.MessageRequestReplyOperations<Destination>; // A specialization of MessageSendingOperations, MessageReceivingOperations and MessageRequestReplyOperations for JMS related operations that allow to specify a destination name rather than the actual Destination.\npublic class JmsMessagingTemplate extends org.springframework.messaging.core.AbstractMessagingTemplate<Destination> implements JmsMessageOperations, org.springframework.beans.factory.InitializingBean; // An implementation of JmsMessageOperations.\npublic interface JmsOperations; // Specifies a basic set of JMS operations.\npublic class JmsTemplate extends JmsDestinationAccessor implements JmsOperations; // Helper class that simplifies synchronous JMS access code.\n@FunctionalInterface public interface MessageCreator; // Creates a JMS message given a Session.\n@FunctionalInterface public interface MessagePostProcessor; // To be used with JmsTemplate's send method that converts an object to a message.\n@FunctionalInterface public interface ProducerCallback<T>; // Callback for sending a message to a JMS destination.\n@FunctionalInterface public interface SessionCallback<T>; // Callback for executing any number of operations on a provided Session.\n", "des": "Core package of the JMS support."}
{"index": 849, "repo": "calcite-core-1.34.0", "code": "package rules;\n\npackage rules.materialize; // Provides a materialized rewriting algorithm encapsulated within a planner rule.\nInterface AbstractJoinExtractFilterRule.Config; // Rule configuration.\nInterface AggregateCaseToFilterRule.Config; // Rule configuration.\nInterface AggregateExpandDistinctAggregatesRule.Config; // Rule configuration.\nInterface AggregateExpandWithinDistinctRule.Config; // Rule configuration.\nInterface AggregateExtractProjectRule.Config; // Rule configuration.\nInterface AggregateFilterTransposeRule.Config; // Rule configuration.\nInterface AggregateJoinJoinRemoveRule.Config; // Rule configuration.\nInterface AggregateJoinRemoveRule.Config; // Rule configuration.\nInterface AggregateJoinTransposeRule.Config; // Rule configuration.\nInterface AggregateMergeRule.Config; // Rule configuration.\nInterface AggregateProjectConstantToDummyJoinRule.Config; // Rule configuration.\nInterface AggregateProjectMergeRule.Config; // Rule configuration.\nInterface AggregateProjectPullUpConstantsRule.Config; // Rule configuration.\nInterface AggregateProjectStarTableRule.Config; // Rule configuration.\nInterface AggregateReduceFunctionsRule.Config; // Rule configuration.\nInterface AggregateRemoveRule.Config; // Rule configuration.\nInterface AggregateStarTableRule.Config; // Rule configuration.\nInterface AggregateUnionAggregateRule.Config; // Rule configuration.\nInterface AggregateUnionTransposeRule.Config; // Rule configuration.\nInterface AggregateValuesRule.Config; // Rule configuration.\nInterface CalcMergeRule.Config; // Rule configuration.\nInterface CalcRemoveRule.Config; // Rule configuration.\nInterface CalcSplitRule.Config; // Rule configuration.\nInterface CoerceInputsRule.Config; // Rule configuration.\nInterface DateRangeRules.FilterDateRangeRule.FilterDateRangeRuleConfig; // Rule configuration.\nInterface ExchangeRemoveConstantKeysRule.Config; // Rule configuration.\nInterface FilterAggregateTransposeRule.Config; // Rule configuration.\nInterface FilterCalcMergeRule.Config; // Rule configuration.\nInterface FilterCorrelateRule.Config; // Rule configuration.\nInterface FilterFlattenCorrelatedConditionRule.Config; // Rule configuration.\nInterface FilterJoinRule.Config; // Rule configuration.\nInterface FilterJoinRule.FilterIntoJoinRule.FilterIntoJoinRuleConfig; // Rule configuration.\nInterface FilterJoinRule.JoinConditionPushRule.JoinConditionPushRuleConfig; // Rule configuration.\n", "des": "Provides a core set of planner rules."}
{"index": 2014, "repo": "spring-boot-devtools-3.1.1", "code": "package server;\n\n@FunctionalInterface public interface AccessManager; // Provides access control for a Dispatcher.\npublic class Dispatcher extends Object; // Dispatcher used to route incoming remote server requests to a Handler.\npublic class DispatcherFilter extends Object implements jakarta.servlet.Filter; // Servlet filter providing integration with the remote server Dispatcher.\n@FunctionalInterface public interface Handler; // A single handler that is able to process an incoming remote server request.\n@FunctionalInterface public interface HandlerMapper; // Interface to provide a mapping between a ServerHttpRequest and a Handler.\npublic class HttpHeaderAccessManager extends Object implements AccessManager; // AccessManager that checks for the presence of an HTTP header secret.\npublic class HttpStatusHandler extends Object implements Handler; // Handler that responds with a specific HttpStatus.\npublic class UrlHandlerMapper extends Object implements HandlerMapper; // HandlerMapper implementation that maps incoming URLs.\n", "des": "Server support for a remotely running Spring Boot application."}
{"index": 302, "repo": "pdfbox-3.0.0-beta1", "code": "package annotation;\n\nInterface AnnotationFilter; // Simple interface allowing the use of an annotation filter visitor.\nClass PDAnnotation; // A PDF annotation.\nClass PDAnnotationCaret;\nClass PDAnnotationCircle;\nClass PDAnnotationFileAttachment; // This is the class that represents a file attachment.\nClass PDAnnotationFreeText;\nClass PDAnnotationHighlight;\nClass PDAnnotationInk;\nClass PDAnnotationLine; // This is the class that represents a line annotation.\nClass PDAnnotationLink; // This is the class that represents a link annotation.\nClass PDAnnotationMarkup; // This class represents the additional fields of a Markup type Annotation.\nClass PDAnnotationPolygon;\nClass PDAnnotationPolyline;\nClass PDAnnotationPopup; // This is the class that represents a popup annotation.\nClass PDAnnotationRubberStamp; // This is the class that represents a rubber stamp annotation.\nClass PDAnnotationSound;\nClass PDAnnotationSquare;\nClass PDAnnotationSquareCircle; // This is the class that represents a rectangular or elliptical annotation introduced in PDF 1.3 specification .\nClass PDAnnotationSquiggly;\nClass PDAnnotationStrikeout;\nClass PDAnnotationText; // This is the class that represents a text annotation.\nClass PDAnnotationTextMarkup; // This is the abstract class that represents a text markup annotation introduced in the PDF 1.3 specification, except Squiggly lines in 1.4.\nClass PDAnnotationUnderline;\nClass PDAnnotationUnknown; // This is the class that represents an arbitrary Unknown Annotation type.\nClass PDAnnotationWidget; // This is the class that represents a widget annotation.\nClass PDAppearanceCharacteristicsDictionary; // This class represents an appearance characteristics dictionary.\nClass PDAppearanceDictionary; // An appearance dictionary specifying how the annotation shall be presented visually on the page.\nClass PDAppearanceEntry; // An entry in an appearance dictionary.\nClass PDAppearanceStream; // An appearance stream is a form XObject, a self-contained content stream that shall be rendered inside the annotation rectangle.\nClass PDBorderEffectDictionary; // This class represents a PDF /BE entry the border effect dictionary.\nClass PDBorderStyleDictionary; // This class represents a PDF /BS entry the border style dictionary.\nClass PDExternalDataDictionary; // This class represents an external data dictionary.\n", "des": "The annotation package contains classes that work with PDF annotation elements."}
{"index": 2385, "repo": "spring-batch-core-5.0.2", "code": "package converter;\n\npublic class DateToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<Date,String>; // Converter implementation from Date to String.\npublic class DefaultJobParametersConverter extends Object implements JobParametersConverter; // Converter for JobParameters instances that uses a simple naming convention for converting job parameters.\npublic class JobParametersConversionException extends RuntimeException; // Exception to report an error when converting job parameters.\npublic interface JobParametersConverter; // A factory for JobParameters instances.\npublic class JsonJobParametersConverter extends DefaultJobParametersConverter; // Converter for JobParameters instances that uses a JSON naming convention for converting job parameters.\npublic static record JsonJobParametersConverter.JobParameterDefinition(String value, String type, String identifying) extends Record;\npublic class LocalDateTimeToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<LocalDateTime,String>; // Converter implementation from LocalDateTime to String.\npublic class LocalDateToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<LocalDate,String>; // Converter implementation from LocalDate to String.\npublic class LocalTimeToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<LocalTime,String>; // Converter implementation from LocalTime to String.\npublic class StringToDateConverter extends Object implements org.springframework.core.convert.converter.Converter<String,Date>; // Converter implementation from String to Date.\npublic class StringToLocalDateConverter extends Object implements org.springframework.core.convert.converter.Converter<String,LocalDate>; // Converter implementation from String to LocalDate.\npublic class StringToLocalDateTimeConverter extends Object implements org.springframework.core.convert.converter.Converter<String,LocalDateTime>; // Converter implementation from String to LocalDateTime.\npublic class StringToLocalTimeConverter extends Object implements org.springframework.core.convert.converter.Converter<String,LocalTime>; // Converter implementation from String to LocalTime.\n", "des": "Support classes for implementations of the batch APIs."}
{"index": 2569, "repo": "pulsar-common-3.0.0", "code": "package util;\n\npackage util.collections; // Set of different collections working in the concurrent environment.\npackage util.keystoretls; // Helpers to work with events from the non-blocking I/O client-server framework.\npackage util.netty; // Helpers to work with events from the non-blocking I/O client-server framework.\npublic abstract class BaseGenerateDocumentation extends Object;\nprotected static class BaseGenerateDocumentation.CategoryComparator extends Object implements Comparator<org.apache.commons.lang3.tuple.Pair<Field,org.apache.pulsar.common.util.BaseGenerateDocumentation.FieldContextWrapper>>, Serializable;\npublic interface BCLoader; // This interface declares a Bouncy Castle provider Loader.\npublic class ClassLoaderUtils extends Object; // Helper methods wrt Classloading.\npublic class CmdGenerateDocs extends Object;\npublic class Codec extends Object;\npublic class CompletableFutureCancellationHandler extends Object; // Implements cancellation and timeout support for CompletableFutures.\npublic class DateFormatter extends Object; // Date-time String formatter utility class.\npublic class DefaultSslContextBuilder extends SslContextAutoRefreshBuilder<SSLContext>;\npublic class DirectMemoryUtils extends Object;\npublic class ExceptionHandler extends Object; // Util class to place some special handling of exceptions.\npublic final class FieldParser extends Object; // Generic value converter.\npublic class FileModifiedTimeUpdater extends Object; // Class working with file's modified time.\npublic class FutureUtil extends Object; // This class is aimed at simplifying work with CompletableFuture.\n@ThreadSafe public static class FutureUtil.Sequencer<T> extends Object;\npublic class GracefulExecutorServicesShutdown extends Object; // This a builder like class for providing a fluent API for graceful shutdown Executors are added with the GracefulExecutorServicesShutdown.shutdown(ExecutorService...) method.\npublic interface Hash; // This interface declares a hash function.\npublic class KeyManagerProxy extends X509ExtendedKeyManager; // This class wraps X509ExtendedKeyManager and gives opportunity to refresh key-manager with refreshed certs without changing SslContext.\npublic class KeyStoreHolder extends Object; // Holder for the secure key store.\npublic class Murmur3_32Hash extends Object implements Hash; // Implementation of the MurmurHash3 non-cryptographic hash function.\n", "des": "Common utils."}
{"index": 3056, "repo": "spring-ws-core-4.0.5", "code": "package destination;\n\npublic abstract class AbstractCachingDestinationProvider extends Object implements DestinationProvider; // Abstract base class for DestinationProvider implementations that cache destination URI.\npublic interface DestinationProvider; // Strategy interface for providing a WebServiceTemplate destination URI at runtime.\npublic class DestinationProvisionException extends WebServiceClientException; // Thrown by a DestinationProvider when it cannot provide a destination.\npublic class Wsdl11DestinationProvider extends AbstractCachingDestinationProvider; // Implementation of the DestinationProvider that resolves a destination URI from a WSDL file.\n", "des": "Provides the DestinationProvider interface."}
{"index": 1947, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package activemq;\n\n@AutoConfiguration(before=JmsAutoConfiguration.class, after=JndiConnectionFactoryAutoConfiguration.class) @ConditionalOnClass({jakarta.jms.ConnectionFactory.class,org.apache.activemq.ActiveMQConnectionFactory.class}) @ConditionalOnMissingBean(jakarta.jms.ConnectionFactory.class) @EnableConfigurationProperties({ActiveMQProperties.class,JmsProperties.class}) @Import({org.springframework.boot.autoconfigure.jms.activemq.ActiveMQXAConnectionFactoryConfiguration.class,org.springframework.boot.autoconfigure.jms.activemq.ActiveMQConnectionFactoryConfiguration.class}) public class ActiveMQAutoConfiguration extends Object; // Auto-configuration to integrate with an ActiveMQ broker.\n@FunctionalInterface public interface ActiveMQConnectionFactoryCustomizer; // Callback interface that can be implemented by beans wishing to customize the ActiveMQConnectionFactory whilst retaining default auto-configuration.\n@ConfigurationProperties(prefix=\"spring.activemq\") public class ActiveMQProperties extends Object; // Configuration properties for ActiveMQ.\npublic static class ActiveMQProperties.Packages extends Object;\n", "des": "Auto-configuration for ActiveMQ."}
{"index": 3326, "repo": "opencms-core-15.0", "code": "package filehistory;\n\nClass CmsFileHistoryApp; // App for the history settings and clearing of history.\nClass CmsFileHistoryConfiguration; // Configuration class of file history app.\nClass CmsFileHistoryFolder; // Class for the folder with the file history apps.\nClass CmsFileHistoryPanel; // Class for the clear file history dialog and execution.\nClass CmsFileHistorySettings; // Class for the history settings dialog.\nClass CmsHistoryClearThread; // Clears the file history of the OpenCms database.\n", "des": "Contains classes of the file history app."}
{"index": 2472, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package simple;\n\n@AutoConfiguration(before=CompositeMeterRegistryAutoConfiguration.class, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @EnableConfigurationProperties(SimpleProperties.class) @ConditionalOnMissingBean(io.micrometer.core.instrument.MeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"simple\") public class SimpleMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to a SimpleMeterRegistry.\n@ConfigurationProperties(prefix=\"management.simple.metrics.export\") public class SimpleProperties extends Object; // @ConfigurationProperties for configuring metrics export to a SimpleMeterRegistry.\npublic class SimplePropertiesConfigAdapter extends PropertiesConfigAdapter<SimpleProperties> implements io.micrometer.core.instrument.simple.SimpleConfig; // Adapter to convert SimpleProperties to a SimpleConfig.\n", "des": "Support for exporting actuator metrics to a simple in-memory store."}
{"index": 955, "repo": "spring-ws-3.0.10.RELEASE", "code": "package jaxb;\n\nClass AbstractJaxb2PayloadMethodProcessor; // Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations that use JAXB2.\nClass JaxbElementPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports JAXBElement objects.\nClass XmlRootElementPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports parameters annotated with @XmlRootElement or @XmlType, and return values annotated with @XmlRootElement.\n", "des": "Provides JAXB2-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces."}
{"index": 3753, "repo": "lucene-facet-9.7.0", "code": "package facet;\n\npackage facet.facetset; // Provides FacetSets faceting capabilities which allows users to facet on high dimensional field values.\npackage facet.range; // Provides range faceting capabilities.\npackage facet.rangeonrange; // Provides range on range faceting capabilities.\npackage facet.sortedset; // Provides faceting capabilities over facets that were indexed with SortedSetDocValuesFacetField.\npackage facet.taxonomy; // Taxonomy of Categories.\nClass DrillDownQuery; // A Query for drill-down over facet categories.\nClass DrillSideways; // Computes drill down and sideways counts for the provided DrillDownQuery.\nClass DrillSideways.ConcurrentDrillSidewaysResult<R>; // Result of a concurrent drill sideways search, including the Facets and TopDocs.\nClass DrillSideways.DrillSidewaysResult; // Result of a drill sideways search, including the Facets and TopDocs.\nClass FacetCountsWithFilterQuery; // Base class for facet counts.\nClass FacetField; // Add an instance of this to your Document for every facet label.\nClass FacetQuery; // A term Query over a FacetField.\nClass FacetResult; // Counts or aggregates for a single dimension.\nClass Facets; // Common base class for all facets implementations.\nClass FacetsCollector; // Collects hits for subsequent faceting.\nClass FacetsCollector.MatchingDocs; // Holds the documents that were matched in the LeafReaderContext.\nClass FacetsCollectorManager; // A CollectorManager implementation which produces FacetsCollector and produces a merged FacetsCollector.\nClass FacetsConfig; // Records per-dimension configuration.\nClass FacetsConfig.DimConfig; // Holds the configuration for one dimension\nClass FacetUtils; // Utility class with a single method for getting a DocIdSetIterator that skips deleted docs\nClass LabelAndValue; // Single label and its value, usually contained in a FacetResult.\nClass LongValueFacetCounts; // Facets implementation that computes counts for all unique long values, more efficiently counting small values (0-1023) using an int array, and switching to a HashMap for values above 1023.\nClass MultiDoubleValues; // Per-segment, per-document double values, which can be calculated at search-time.\n", "des": "Faceted search."}
{"index": 3370, "repo": "opencms-core-15.0", "code": "package explorer;\n\nClass CmsExplorerTypeAccess; // Explorer type access object, encapsulates access control entries and lists of a explorer type.\nClass CmsExplorerTypeAccessFlushListener; // Class which listens for cache flush events to uncache cached access control settings.\nClass CmsExplorerTypeSettings; // Holds all information to build the explorer context menu of a resource type and information for the new resource dialog.\nClass CmsIconRule; // An icon configuration rule for an explorer type.\nClass CmsResourceUtil; // Provides CmsResource utility functions.\nClass CmsResourceUtil.CmsResourceProjectState; // Enumeration class for defining the resource project state.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains the functions that generate the Workplace \"Explorer\" view, also contains the \"New resource\" wizard."}
{"index": 974, "repo": "spring-ws-3.0.10.RELEASE", "code": "package callback;\n\nClass AbstractCallbackHandler; // Abstract implementation of a CallbackHandler.\nClass CallbackHandlerChain; // Represents a chain of CallbackHandlers.\nClass CleanupCallback; // Underlying security services instantiate and pass a CleanupCallback to the handle method of a CallbackHandler to clean up security state.\n", "des": "Contains generic CallbackHandler implementations."}
{"index": 1758, "repo": "spring-data-mongodb-4.1.2", "code": "package mapreduce;\n\n@Deprecated public class MapReduceCounts extends Object;\n@Deprecated public class MapReduceOptions extends Object;\n@Deprecated public class MapReduceResults<T> extends Object implements Iterable<T>;\n@Deprecated public class MapReduceTiming extends Object;\n", "des": "Support for MongoDB map-reduce operations."}
{"index": 2944, "repo": "spring-security-config-6.1.2", "code": "package authentication;\n\npublic abstract class AbstractUserDetailsServiceBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\npublic class AuthenticationManagerBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Registers the central ProviderManager used by the namespace configuration, and allows the configuration of an alias, allowing users to reference it in their beans and clearly see where the name is coming from.\npublic static final class AuthenticationManagerBeanDefinitionParser.NullAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider; // Provider which doesn't provide any service.\npublic class AuthenticationManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authentication.AuthenticationManager>, org.springframework.beans.factory.BeanFactoryAware; // Factory bean for the namespace AuthenticationManager, which allows a more meaningful error message to be reported in the NoSuchBeanDefinitionException, if the user has forgotten to declare the <authentication-manager> element.\npublic class AuthenticationProviderBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Wraps a UserDetailsService bean with a DaoAuthenticationProvider and registers the latter with the ProviderManager.\npublic class JdbcUserServiceBeanDefinitionParser extends AbstractUserDetailsServiceBeanDefinitionParser;\npublic class PasswordEncoderParser extends Object; // Stateful parser for the <password-encoder> element.\npublic class UserServiceBeanDefinitionParser extends AbstractUserDetailsServiceBeanDefinitionParser;\n", "des": "Parsing of <authentication-manager> and related elements."}
{"index": 1016, "repo": "spring-ws-3.0.10.RELEASE", "code": "package xsd;\n\npackage xsd.commons; // Contains a implementation of the XsdSchema interfaces that uses Apache WS-Commons XML Schema.\nInterface XsdSchema; // Represents an abstraction for XSD schemas.\nInterface XsdSchemaCollection; // Represents an abstraction for a collection of XSD schemas.\nClass SimpleXsdSchema; // The default XsdSchema implementation.\nClass XsdSchemaException; // Base class for all WSDL definition exceptions.\n", "des": "Provides an abstraction over XSD XML schemas."}
{"index": 2043, "repo": "spring-messaging-6.0.11", "code": "package support;\n\npublic abstract class AbstractHeaderMapper<T> extends Object implements HeaderMapper<T>; // A base HeaderMapper implementation.\npublic abstract class AbstractMessageChannel extends Object implements MessageChannel, InterceptableChannel, org.springframework.beans.factory.BeanNameAware; // Abstract base class for MessageChannel implementations.\npublic abstract class AbstractSubscribableChannel extends AbstractMessageChannel implements SubscribableChannel; // Abstract base class for SubscribableChannel implementations.\npublic interface ChannelInterceptor; // Interface for interceptors that are able to view and/or modify the Messages being sent-to and/or received-from a MessageChannel.\npublic class ErrorMessage extends GenericMessage<Throwable>; // A GenericMessage with a Throwable payload.\npublic interface ExecutorChannelInterceptor extends ChannelInterceptor; // An extension of ChannelInterceptor with callbacks to intercept the asynchronous sending of a Message to a specific subscriber through an Executor.\npublic class ExecutorSubscribableChannel extends AbstractSubscribableChannel; // A SubscribableChannel that sends messages to each of its subscribers.\npublic class GenericMessage<T> extends Object implements Message<T>, Serializable; // An implementation of Message with a generic payload.\npublic interface HeaderMapper<T>; // Generic strategy interface for mapping MessageHeaders to and from other types of objects.\npublic class IdTimestampMessageHeaderInitializer extends Object implements MessageHeaderInitializer; // A MessageHeaderInitializer to customize the strategy for ID and TIMESTAMP message header generation.\npublic class ImmutableMessageChannelInterceptor extends Object implements ChannelInterceptor; // A simpler interceptor that calls MessageHeaderAccessor.setImmutable() on the headers of messages passed through the preSend method.\npublic interface InterceptableChannel; // A MessageChannel that maintains a list ChannelInterceptors and allows interception of message sending.\npublic final class MessageBuilder<T> extends Object; // A builder for creating a GenericMessage (or ErrorMessage if the payload is of type Throwable).\npublic interface MessageHandlingRunnable extends Runnable; // Extension of the Runnable interface with methods to obtain the MessageHandler and Message to be handled.\npublic class MessageHeaderAccessor extends Object; // Wrapper around MessageHeaders that provides extra features such as strongly typed accessors for specific headers, the ability to leave headers in a Message mutable, and the option to suppress automatic generation of id and timestamp headers.\npublic interface MessageHeaderInitializer; // Callback interface for initializing a MessageHeaderAccessor.\n", "des": "Provides implementations of Message along with a MessageBuilder and MessageHeaderAccessor for building and working with messages and message headers, as well as various MessageChannel implementations and channel interceptor support."}
{"index": 891, "repo": "commons-jcs3-core-3.1", "code": "package access;\n\nClass AbstractCacheAccess<K,V>; // This class provides the common methods for all types of access to the cache.\nClass CacheAccess<K,V>; // This class provides an interface for all types of access to the cache.\nClass GroupCacheAccess<K,V>; // Access for groups.\n", "des": "Contains classes for accessing the cache."}
{"index": 2150, "repo": "wicket-core-10.0.0-M1", "code": "package resource;\n\npublic abstract class BlobImageResource extends DynamicImageResource; // An ImageResource subclass for dynamic images that come from database BLOB fields.\npublic class BufferedDynamicImageResource extends DynamicImageResource; // A DynamicImageResource subclass that holds a BufferedImage generated by code elsewhere.\npublic class DefaultButtonImageResource extends RenderedDynamicImageResource; // Automatically generates a basic button image.\npublic class DefaultButtonImageResourceFactory extends Object implements IResourceFactory; // A factory which creates default button images.\npublic final class LocalizedImageResource extends Object implements org.apache.wicket.util.io.IClusterable; // THIS CLASS IS INTENDED FOR INTERNAL USE IN IMPLEMENTING LOCALE SENSITIVE COMPONENTS THAT USE IMAGE RESOURCES AND SHOULD NOT BE USED DIRECTLY BY END-USERS.\npublic abstract class RenderedDynamicImageResource extends DynamicImageResource; // A DynamicImageResource subclass that allows easy rendering of regeneratable (unbuffered) dynamic images.\n", "des": "Resource support for image components."}
{"index": 798, "repo": "lucene-analyzers-common-8.11.2", "code": "package payloads;\n\nInterface PayloadEncoder; // Mainly for use with the DelimitedPayloadTokenFilter, converts char buffers to BytesRef.\nClass AbstractEncoder; // Base class for payload encoders.\nClass DelimitedPayloadTokenFilter; // Characters before the delimiter are the \"token\", those after are the payload.\nClass DelimitedPayloadTokenFilterFactory; // Factory for DelimitedPayloadTokenFilter.\nClass FloatEncoder; // Encode a character array Float as a BytesRef.\nClass IdentityEncoder; // Does nothing other than convert the char array to a byte array using the specified encoding.\nClass IntegerEncoder; // Encode a character array Integer as a BytesRef.\nClass NumericPayloadTokenFilter; // Assigns a payload to a token based on the TypeAttribute\nClass NumericPayloadTokenFilterFactory; // Factory for NumericPayloadTokenFilter.\nClass PayloadHelper; // Utility methods for encoding payloads.\nClass TokenOffsetPayloadTokenFilter; // Adds the OffsetAttribute.startOffset() and OffsetAttribute.endOffset() First 4 bytes are the start\nClass TokenOffsetPayloadTokenFilterFactory; // Factory for TokenOffsetPayloadTokenFilter.\nClass TypeAsPayloadTokenFilter; // Makes the TypeAttribute a payload.\nClass TypeAsPayloadTokenFilterFactory; // Factory for TypeAsPayloadTokenFilter.\n", "des": "Provides various convenience classes for creating payloads on Tokens."}
{"index": 3489, "repo": "poi-5.2.3", "code": "package hpsf;\n\npackage hpsf.wellknown; // Specific support for DocumentSummaryInformation, SummaryInformation types.\nClass Array;\nClass Blob;\nClass ClassID; // Represents a class ID (16 bytes).\nClass ClipboardData;\nClass CodePageString;\nClass Currency;\nClass CustomProperties; // Maintains the instances of CustomProperty that belong to a DocumentSummaryInformation.\nClass CustomProperty; // This class represents custom properties in the document summary information stream.\nClass Date;\nClass Decimal;\nClass DocumentSummaryInformation; // Convenience class representing a DocumentSummary Information stream in a Microsoft Office document.\nClass Filetime; // The Windows FILETIME structure holds a date and time associated with a file.\nClass GUID;\nClass HPSFPropertiesOnlyDocument; // A version of POIDocument which allows access to the HPSF Properties, but no other document contents.\nClass IndirectPropertyName;\nClass Property; // A property in a Section of a PropertySet.\nClass PropertySet; // Represents a property set in the Horrible Property Set Format (HPSF).\nClass PropertySetFactory; // Factory class to create instances of SummaryInformation, DocumentSummaryInformation and PropertySet.\nClass Section; // Represents a section in a PropertySet.\nClass SummaryInformation; // Convenience class representing a Summary Information stream in a Microsoft Office document.\nClass Thumbnail; // Class to manipulate data in the Clipboard Variant (VT_CF) format.\nClass TypedPropertyValue;\nClass UnicodeString;\nClass Variant; // The Variant types as defined by Microsoft's COM.\nClass VariantBool;\nClass VariantSupport; // Supports reading and writing of variant data.\nClass Vector; // Holder for vector-type properties\nClass VersionedStream;\nEnum ClassIDPredefined;\nClass HPSFException; // This exception is the superclass of all other checked exceptions thrown in this package.\nClass HPSFRuntimeException; // This exception is the superclass of all other unchecked exceptions thrown in this package.\nClass IllegalPropertySetDataException; // This exception is thrown when there is an illegal value set in a PropertySet.\nClass IllegalVariantTypeException; // This exception is thrown if HPSF encounters a variant type that is illegal in the current context.\n", "des": "Processes streams in the Horrible Property Set Format (HPSF) in POI filesystems."}
{"index": 1789, "repo": "spring-integration-file-6.1.2", "code": "package handler;\n\npublic class FileTransferringMessageHandler<F> extends org.springframework.integration.handler.AbstractMessageHandler; // A MessageHandler implementation that transfers files to a remote server.\n", "des": "Provides classes supporting remote file message handlers."}
{"index": 1751, "repo": "spring-data-mongodb-4.1.2", "code": "package convert;\n\npackage convert.encryption; // Converters integrating with explicit encryption mechanism of Client-Side Field Level Encryption.\npublic abstract class AbstractMongoConverter extends Object implements MongoConverter, InitializingBean; // Base class for MongoConverter implementations.\npublic interface DbRefProxyHandler;\npublic interface DbRefResolver extends ReferenceResolver; // Used to resolve associations annotated with DBRef.\npublic interface DbRefResolverCallback; // Callback interface to be used in conjunction with DbRefResolver.\npublic class DefaultDbRefResolver extends DefaultReferenceResolver implements DbRefResolver, ReferenceResolver; // A DbRefResolver that resolves DBRefs by delegating to a DbRefResolverCallback than is able to generate lazy loading proxies.\npublic class DefaultMongoTypeMapper extends DefaultTypeMapper<org.bson.conversions.Bson> implements MongoTypeMapper; // Default implementation of MongoTypeMapper allowing configuration of the key to lookup and store type information in Document.\npublic static final class DefaultMongoTypeMapper.DocumentTypeAliasAccessor extends Object implements TypeAliasAccessor<org.bson.conversions.Bson>; // TypeAliasAccessor to store aliases in a Document.\npublic class DefaultReferenceResolver extends Object implements ReferenceResolver; // ReferenceResolver implementation that uses a given ReferenceLookupDelegate to load and convert entity associations expressed via a persitent property.\npublic class DocumentReferenceSource extends Object; // The source object to resolve document references upon.\npublic interface JsonSchemaMapper; // JsonSchemaMapper allows mapping a given Document containing a $jsonSchema to the fields of a given domain type.\npublic interface LazyLoadingProxy; // Allows direct interaction with the underlying LazyLoadingInterceptor.\npublic final class LazyLoadingProxyFactory extends Object; // ProxyFactory to create a proxy for PersistentProperty.getType() to resolve a reference lazily.\npublic static class LazyLoadingProxyFactory.LazyLoadingInterceptor extends Object implements MethodInterceptor, MethodInterceptor, Serializable;\npublic class MappingMongoConverter extends AbstractMongoConverter implements ApplicationContextAware; // MongoConverter that uses a MappingContext to do sophisticated mapping of domain objects to Document.\nprotected static interface MappingMongoConverter.ConversionContext; // Conversion context defining an interface for graph-traversal-based conversion of documents.\n", "des": "Spring Data MongoDB specific converter infrastructure."}
{"index": 960, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass NamespaceUtils; // Helper class for handling @Namespace annotations.\nClass PayloadRootUtils; // Helper class for determining the root qualified name of a Web Service payload.\n", "des": "Provides helper classes for EndpointAdapter, EndpointInteceptor, and EndpointMapping implementations."}
{"index": 2818, "repo": "spring-orm-6.0.11", "code": "package hibernate5;\n\npackage hibernate5.support; // Classes supporting the org.springframework.orm.hibernate5 package.\n@FunctionalInterface public interface HibernateCallback<T>; // Callback interface for Hibernate code.\npublic class HibernateExceptionTranslator extends Object implements org.springframework.dao.support.PersistenceExceptionTranslator; // PersistenceExceptionTranslator capable of translating HibernateException instances to Spring's DataAccessException hierarchy.\npublic class HibernateJdbcException extends org.springframework.dao.UncategorizedDataAccessException; // Hibernate-specific subclass of UncategorizedDataAccessException, for JDBC exceptions that Hibernate wrapped.\npublic class HibernateObjectRetrievalFailureException extends ObjectRetrievalFailureException; // Hibernate-specific subclass of ObjectRetrievalFailureException.\npublic interface HibernateOperations; // Interface that specifies a common set of Hibernate operations as well as a general HibernateOperations.execute(org.springframework.orm.hibernate5.HibernateCallback<T>) method for Session-based lambda expressions.\npublic class HibernateOptimisticLockingFailureException extends ObjectOptimisticLockingFailureException; // Hibernate-specific subclass of ObjectOptimisticLockingFailureException.\npublic class HibernateQueryException extends org.springframework.dao.InvalidDataAccessResourceUsageException; // Hibernate-specific subclass of InvalidDataAccessResourceUsageException, thrown on invalid HQL query syntax.\npublic class HibernateSystemException extends org.springframework.dao.UncategorizedDataAccessException; // Hibernate-specific subclass of UncategorizedDataAccessException, for Hibernate system errors that do not match any concrete org.springframework.dao exceptions.\npublic class HibernateTemplate extends Object implements HibernateOperations, org.springframework.beans.factory.InitializingBean; // Helper class that simplifies Hibernate data access code.\npublic class HibernateTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.support.ResourceTransactionManager, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // PlatformTransactionManager implementation for a single Hibernate SessionFactory.\n", "des": "Package providing integration of Hibernate 5.x with Spring concepts."}
{"index": 3067, "repo": "spring-ws-core-4.0.5", "code": "package dom;\n\npublic class Dom4jPayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports dom4j elements.\npublic class DomPayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports W3C DOM elements.\npublic class JDomPayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports JDOM elements.\npublic class XomPayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports XOM elements.\n", "des": "Provides DOM-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces."}
{"index": 1631, "repo": "spring-kafka-3.0.9", "code": "package retrytopic;\n\npublic class BackOffValuesGenerator extends Object; // Generates the backoff values from the provided maxAttempts value and BackOffPolicy.\npublic class DeadLetterPublishingRecovererFactory extends Object; // Creates and configures the DeadLetterPublishingRecoverer that will be used to forward the messages using the DestinationTopicResolver.\n@FunctionalInterface public static interface DeadLetterPublishingRecovererFactory.DeadLetterPublisherCreator; // Implement this interface to create each DeadLetterPublishingRecoverer.\npublic class DefaultDestinationTopicProcessor extends Object implements DestinationTopicProcessor; // Default implementation of the DestinationTopicProcessor interface.\npublic class DefaultDestinationTopicResolver extends ExceptionClassifier implements DestinationTopicResolver, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>, org.springframework.context.ApplicationContextAware; // Default implementation of the DestinationTopicResolver interface.\npublic static class DefaultDestinationTopicResolver.DestinationTopicHolder extends Object;\npublic class DestinationTopic extends Object; // Representation of a Destination Topic to which messages can be forwarded, such as retry topics and dlt.\npublic static class DestinationTopic.Properties extends Object;\npublic interface DestinationTopicContainer; // Provides methods to store and retrieve DestinationTopic instances.\npublic interface DestinationTopicProcessor; // The DestinationTopicProcessor creates and registers the DestinationTopic instances in the provided DestinationTopicProcessor.Context, also providing callback interfaces to be called upon the context properties.\npublic static class DestinationTopicProcessor.Context extends Object;\npublic class DestinationTopicPropertiesFactory extends Object; // Creates a list of DestinationTopic.Properties based on the provided configurations.\npublic static class DestinationTopicPropertiesFactory.DestinationTopicSuffixes extends Object;\npublic interface DestinationTopicResolver extends DestinationTopicContainer; // Provides methods for resolving the destination to which a message that failed to be processed should be forwarded to.\npublic enum DltStrategy extends Enum<DltStrategy>; // Strategies for handling DLT processing.\n@FunctionalInterface public interface EndpointCustomizer; // Customizes main, retry and DLT endpoints in the Retry Topic functionality and returns the resulting topic names.\npublic static class EndpointCustomizer.TopicNamesHolder extends Object;\npublic class EndpointCustomizerFactory extends Object; // Creates the EndpointCustomizer that will be used by the RetryTopicConfigurer to customize the main, retry and DLT endpoints.\n", "des": "Package for retryable topic handling."}
{"index": 375, "repo": "calcite-linq4j-1.34.0", "code": "package tree;\n\nInterface CallSiteBinder; // Creates a DynamicExpression that represents a dynamic operation bound by the provided CallSiteBinder.\nInterface Expressions.FluentList<T>; // Fluent list.\nInterface ExpressionVisitor; // Represents a visitor or rewriter for expression trees.\nInterface FunctionExpression.Invokable; // Function that can be invoked with a variable number of arguments.\nInterface Node; // Parse tree node.\nInterface Primitive.Sink; // A place to send a value.\nInterface Primitive.Source; // A place from which to read a value.\nInterface PseudoField; // Contains the parts of the Field class needed for code generation, but might be implemented differently.\nInterface TableExpressionFactory; // Factory for creating table expressions that may be used in generated code for accessing table data.\nInterface Types.RecordField; // Field that belongs to a record.\nInterface Types.RecordType; // Base class for record-like types that do not mapped to (currently loaded) Java Class objects.\nInterface Visitor<R>; // Node visitor.\nClass AbstractNode; // Abstract implementation of Node.\nClass ArrayLengthRecordField; // Length field of a RecordType.\nClass BinaryExpression; // Represents an expression that has a binary operator.\nClass BlockBuilder; // Builder for BlockStatement.\nClass Blocks; // Helper methods concerning BlockStatements.\nClass BlockStatement; // Represents a block that contains a sequence of expressions where variables can be defined.\nClass CatchBlock; // Represents a catch statement in a try block.\nClass ClassDeclaration; // Declaration of a class.\nClass ClassDeclarationFinder; // Entry point for optimizers that factor out deterministic expressions to final static fields.\nClass ConditionalExpression; // Represents an expression that has a conditional operator.\nClass ConditionalStatement; // Represents an expression that has a conditional operator.\nClass ConstantExpression; // Represents an expression that has a constant value.\nClass ConstantUntypedNull; // Represents a constant null of unknown type Java allows type inference for such nulls, thus \"null\" cannot always be replaced to (Object)null and vise versa.\nClass ConstructorDeclaration; // Declaration of a constructor.\nClass DeclarationStatement; // Expression that declares and optionally initializes a variable.\n", "des": "Object model for Java expressions."}
{"index": 1348, "repo": "spring-integration-kafka-6.1.2", "code": "package dsl;\n\npublic abstract class AbstractKafkaChannelSpec<S extends AbstractKafkaChannelSpec<S,C>,C extends AbstractKafkaChannel> extends org.springframework.integration.dsl.MessageChannelSpec<S,C>; // Spec for a message channel backed by an Apache Kafka topic.\npublic final class Kafka extends Object; // Factory class for Apache Kafka components.\npublic class KafkaInboundChannelAdapterSpec<K,V> extends org.springframework.integration.dsl.MessageSourceSpec<KafkaInboundChannelAdapterSpec<K,V>,KafkaMessageSource<K,V>>; // Spec for a polled Apache Kafka inbound channel adapter.\npublic class KafkaInboundGatewaySpec<K,V,R,S extends KafkaInboundGatewaySpec<K,V,R,S>> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,KafkaInboundGateway<K,V,R>> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessagingGatewaySpec implementation for the KafkaInboundGateway.\npublic static class KafkaInboundGatewaySpec.KafkaInboundGatewayListenerContainerSpec<K,V,R> extends KafkaInboundGatewaySpec<K,V,R,KafkaInboundGatewaySpec.KafkaInboundGatewayListenerContainerSpec<K,V,R>>; // A ConcurrentMessageListenerContainer configuration KafkaInboundGatewaySpec extension.\npublic class KafkaMessageDrivenChannelAdapterSpec<K,V,S extends KafkaMessageDrivenChannelAdapterSpec<K,V,S>> extends org.springframework.integration.dsl.MessageProducerSpec<S,KafkaMessageDrivenChannelAdapter<K,V>> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessageProducerSpec implementation for the KafkaMessageDrivenChannelAdapter.\npublic static class KafkaMessageDrivenChannelAdapterSpec.KafkaMessageDrivenChannelAdapterListenerContainerSpec<K,V> extends KafkaMessageDrivenChannelAdapterSpec<K,V,KafkaMessageDrivenChannelAdapterSpec.KafkaMessageDrivenChannelAdapterListenerContainerSpec<K,V>>; // A ConcurrentMessageListenerContainer configuration KafkaMessageDrivenChannelAdapterSpec extension.\n", "des": "Provides Spring Integration Java DSL Components support for Apache Kafka."}
{"index": 1669, "repo": "spring-boot-cli-3.1.1", "code": "package core;\n\npublic class HelpCommand extends AbstractCommand; // Internal Command used for 'help' requests.\npublic class HintCommand extends AbstractCommand; // Internal Command to provide hints for shell auto-completion.\npublic class VersionCommand extends AbstractCommand; // Command to display the 'version' number.\n", "des": "Core CLI commands."}
{"index": 1217, "repo": "commons-text-1.10.0", "code": "package text;\n\npackage text.diff; // Provides algorithms for diff between strings.\npackage text.io; // StringSubstitutorReader is a Reader that performs string substitution on a source Reader using a StringSubstitutor.\npackage text.lookup; // Provides algorithms for looking up strings for use with a StringSubstitutor.\npackage text.matcher; // Provides algorithms for matching up strings for use with a StringSubstitutor.\npackage text.numbers; // Provides algorithms for converting numbers to strings.\npackage text.similarity; // Provides algorithms for string similarity.\npackage text.translate; // An API for creating text translation routines from a set of smaller building blocks.\nInterface Builder<T>; // The Builder interface is designed to designate a class as a builder object in the Builder design pattern.\nInterface CharacterPredicate; // A predicate for selecting code points.\nInterface FormatFactory; // Format factory.\nInterface TextRandomProvider; // TextRandomProvider implementations are used by RandomStringGenerator as a source of randomness.\nClass AlphabetConverter; // Convert from one alphabet to another, with the possibility of leaving certain characters unencoded.\nClass CaseUtils; // Case manipulation operations on Strings that contain words.\nClass CompositeFormat; // Formats using one formatter and parses using a different formatter.\nClass ExtendedMessageFormat; // Extends java.text.MessageFormat to allow pluggable/additional formatting options for embedded format elements.\nClass FormattableUtils; // Provides utilities for working with the Formattable interface.\nClass RandomStringGenerator; // Generates random Unicode strings containing the specified number of code points.\nClass RandomStringGenerator.Builder; // A builder for generating RandomStringGenerator instances.\nClass StrBuilder; // Deprecated as of 1.3, use TextStringBuilder instead.\nClass StringEscapeUtils; // Escapes and unescapes Strings for Java, Java Script, HTML and XML.\nClass StringEscapeUtils.Builder; // Convenience wrapper for StringBuilder providing escape methods.\nClass StringSubstitutor; // Substitutes variables within a string by values.\nClass StringTokenizer; // Tokenizes a string based on delimiters (separators) and supporting quoting and ignored character concepts.\nClass StrLookup<V>; // Deprecated as of 1.3, use StringLookupFactory instead.\nClass StrMatcher; // Deprecated as of 1.3, use StringMatcherFactory instead.\n", "des": "Basic classes for text handling."}
{"index": 248, "repo": "nutch-2.4", "code": "package automaton;\n\nClass AutomatonURLFilter; // RegexURLFilterBase implementation based on the dk.brics.automaton Finite-State Automata for JavaTM.\n", "des": "URL filter plugin based on dk.brics.automaton Finite-State Automata for JavaTM."}
{"index": 1080, "repo": "graal-sdk-1.0.0-rc7", "code": "package constant;\n\nClass CConstant.ValueAccess; // Allows access to the value of a CConstant during image generation.\nAnnotation Type CConstant; // Denotes a method as a C constant value.\nAnnotation Type CEnum; // Annotation to import a C enumeration to Java.\nAnnotation Type CEnumConstant; // Provides additional properties for a field (i.e., an enumeration value) of Java enumeration annotated with CEnum.\nAnnotation Type CEnumLookup; // Annotation for a method that returns the Java enumeration object for a given C integer value.\nAnnotation Type CEnumValue; // Annotation for a method that returns the C integer value for a Java enumeration object.\n", "des": "This package provides parts of the Java / C interface that are related to C constants."}
{"index": 3692, "repo": "solr-core-9.3.0", "code": "package distance;\n\nClass GeoDistValueSourceParser; // Parses \"geodist\" creating HaversineConstFunction or HaversineFunction or calling SpatialStrategy.makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double).\nClass GeohashFunction;\nClass GeohashHaversineFunction;\nClass HaversineConstFunction; // Haversine function with one point constant\nClass HaversineFunction; // Calculate the Haversine formula (distance) between any two points on a sphere Takes in four value sources: (latA, lonA); (latB, lonB).\nClass SquaredEuclideanFunction; // While not strictly a distance, the Sq.\nClass StringDistanceFunction;\nClass VectorDistanceFunction; // Calculate the p-norm for a Vector.\n", "des": "Solr implementations of ValueSource for distance based function queries."}
{"index": 2427, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package redis;\n\n@AutoConfiguration(after={org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration.class,RedisReactiveHealthContributorAutoConfiguration.class}) @ConditionalOnClass(org.springframework.data.redis.connection.RedisConnectionFactory.class) @ConditionalOnBean(org.springframework.data.redis.connection.RedisConnectionFactory.class) @ConditionalOnEnabledHealthIndicator(\"redis\") public class RedisHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.data.redis.RedisHealthIndicator,org.springframework.data.redis.connection.RedisConnectionFactory>; // Auto-configuration for RedisHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration.class) @ConditionalOnClass({org.springframework.data.redis.connection.ReactiveRedisConnectionFactory.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory.class) @ConditionalOnEnabledHealthIndicator(\"redis\") public class RedisReactiveHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.data.redis.RedisReactiveHealthIndicator,org.springframework.data.redis.connection.ReactiveRedisConnectionFactory>; // Auto-configuration for RedisReactiveHealthIndicator.\n", "des": "Auto-configuration for actuator Redis concerns dependent on Spring Data."}
{"index": 2061, "repo": "slf4j-ext-2.0.7", "code": "package instrumentation;\n\npublic class JavassistHelper extends Object; // Helper methods for Javassist functionality.\npublic class LogTransformer extends Object implements ClassFileTransformer; // LogTransformer does the work of analyzing each class, and if appropriate add log statements to each method to allow logging entry/exit.\npublic static class LogTransformer.Builder extends Object; // Builder provides a flexible way of configuring some of many options on the parent class instead of providing many constructors.\npublic class ToStringHelper extends Object;\n", "des": "Java instrumentation routines for SLF4J."}
{"index": 1842, "repo": "spring-test-6.0.11", "code": "package jupiter;\n\npackage jupiter.web; // Web support for integrating the Spring TestContext Framework with the JUnit Jupiter extension model in JUnit 5.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @ExtendWith(DisabledIfCondition.class) public @interface DisabledIf; // @DisabledIf is used to signal that the annotated test class or test method is disabled and should not be executed if the supplied DisabledIf.expression() evaluates to true.\npublic class DisabledIfCondition extends Object; // DisabledIfCondition is an ExecutionCondition that supports the @DisabledIf annotation when using the Spring TestContext Framework in conjunction with JUnit 5's Jupiter programming model.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @ExtendWith(EnabledIfCondition.class) public @interface EnabledIf; // @EnabledIf is used to signal that the annotated test class or test method is enabled and should be executed if the supplied EnabledIf.expression() evaluates to true.\npublic class EnabledIfCondition extends Object; // EnabledIfCondition is an ExecutionCondition that supports the @EnabledIf annotation when using the Spring TestContext Framework in conjunction with JUnit 5's Jupiter programming model.\npublic class SpringExtension extends Object implements org.junit.jupiter.api.extension.BeforeAllCallback, org.junit.jupiter.api.extension.AfterAllCallback, org.junit.jupiter.api.extension.TestInstancePostProcessor, org.junit.jupiter.api.extension.BeforeEachCallback, org.junit.jupiter.api.extension.AfterEachCallback, org.junit.jupiter.api.extension.BeforeTestExecutionCallback, org.junit.jupiter.api.extension.AfterTestExecutionCallback, org.junit.jupiter.api.extension.ParameterResolver; // SpringExtension integrates the Spring TestContext Framework into JUnit 5's Jupiter programming model.\n", "des": "Core support for integrating the Spring TestContext Framework with the JUnit Jupiter extension model in JUnit 5."}
{"index": 3800, "repo": "lucene-analysis-common-9.7.0", "code": "package miscellaneous;\n\nInterface ConcatenateGraphFilter.BytesRefBuilderTermAttribute; // Attribute providing access to the term builder and UTF-16 conversion\nClass ASCIIFoldingFilter; // This class converts alphabetic, numeric, and symbolic Unicode characters which are not in the first 127 ASCII characters (the \"Basic Latin\" Unicode block) into their ASCII equivalents, if one exists.\nClass ASCIIFoldingFilterFactory; // Factory for ASCIIFoldingFilter.\nClass CapitalizationFilter; // A filter to apply normal capitalization rules to Tokens.\nClass CapitalizationFilterFactory; // Factory for CapitalizationFilter.\nClass CodepointCountFilter; // Removes words that are too long or too short from the stream.\nClass CodepointCountFilterFactory; // Factory for CodepointCountFilter.\nClass ConcatenateGraphFilter; // Concatenates/Joins every incoming token with a separator into one output token for every path through the token stream (which is a graph).\nClass ConcatenateGraphFilter.BytesRefBuilderTermAttributeImpl; // Implementation of ConcatenateGraphFilter.BytesRefBuilderTermAttribute\nClass ConcatenateGraphFilterFactory; // Factory for ConcatenateGraphFilter.\nClass ConcatenatingTokenStream; // A TokenStream that takes an array of input TokenStreams as sources, and concatenates them together.\nClass ConditionalTokenFilter; // Allows skipping TokenFilters based on the current set of attributes.\nClass ConditionalTokenFilterFactory; // Abstract parent class for analysis factories that create ConditionalTokenFilter instances\nClass DateRecognizerFilter; // Filters all tokens that cannot be parsed to a date, using the provided DateFormat.\nClass DateRecognizerFilterFactory; // Factory for DateRecognizerFilter.\nClass DelimitedTermFrequencyTokenFilter; // Characters before the delimiter are the \"token\", the textual integer after is the term frequency.\nClass DelimitedTermFrequencyTokenFilterFactory; // Factory for DelimitedTermFrequencyTokenFilter.\nClass DropIfFlaggedFilter; // Allows Tokens with a given combination of flags to be dropped.\nClass DropIfFlaggedFilterFactory; // Provides a filter that will drop tokens matching a set of flags.\nClass EmptyTokenStream; // An always exhausted token stream.\nClass FingerprintFilter; // Filter outputs a single token which is a concatenation of the sorted and de-duplicated set of input tokens.\n", "des": "Miscellaneous Tokenstreams."}
{"index": 2406, "repo": "spring-batch-core-5.0.2", "code": "package factory;\n\npublic class FaultTolerantStepFactoryBean<T,S> extends SimpleStepFactoryBean<T,S>; // Factory bean for step that provides options for configuring skip behavior.\npublic class SimpleStepFactoryBean<T,S> extends Object implements org.springframework.beans.factory.FactoryBean<Step>, org.springframework.beans.factory.BeanNameAware; // Most common configuration options for simple steps should be found here.\n", "des": "Factories for step level components."}
{"index": 972, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass SaajContentHandler; // SAX ContentHandler that transforms callback calls to the creation of SAAJ Nodes and SOAPElements.\nClass SaajUtils; // Collection of generic utility methods to work with SAAJ.\nClass SaajXmlReader; // SAX XMLReader that reads from a SAAJ Node.\n", "des": "Support classes for working with the SOAP with Attachments API for Java (SAAJ)."}
{"index": 399, "repo": "solr-dataimporthandler-8.11.2", "code": "package dataimport;\n\npackage dataimport.config; // Utility classes for parsing & modeling DIH configuration.\nInterface DIHCache; // A cache that allows a DIH entity's data to persist locally prior being joined to other data and/or indexed.\nInterface DIHWriter;\nInterface EventListener; // Event listener for DataImportHandler This API is experimental and subject to change\nInterface XPathRecordReader.Handler; // Implement this interface to stream records as and when one is found.\nClass BinContentStreamDataSource; // A data source implementation which can be used to read binary stream from content streams.\nClass BinFileDataSource; // A DataSource which reads from local files\nClass BinURLDataSource; // A data source implementation which can be used to read binary streams using HTTP.\nClass CachePropertyUtil;\nClass ClobTransformer; // Transformer instance which converts a Clob to a String.\nClass ConfigParseUtil;\nClass ContentStreamDataSource; // A DataSource implementation which reads from the ContentStream of a POST request\nClass Context; // This abstract class gives access to all available objects.\nClass ContextImpl; // An implementation for the Context\nClass DataImporter; // Stores all configuration information for pulling and indexing data.\nClass DataImportHandler; // since 8.6; see Deprecations\nClass DataSource<T>; // Provides data from a source with a given query.\nClass DateFormatEvaluator; // Formats values using a given date format.\nClass DateFormatTransformer; // Transformer instance which creates Date instances out of Strings.\nClass DebugInfo;\nClass DIHCacheSupport;\nClass DIHProperties; // Implementations write out properties about the last data import for use by the next import.\nClass DIHWriterBase;\nClass DocBuilder; // DocBuilder is responsible for creating Solr documents out of the given configuration.\nClass DocBuilder.Statistics;\nClass EntityProcessor; // An instance of entity processor serves an entity.\nClass EntityProcessorBase; // Base class for all implementations of EntityProcessor\nClass EntityProcessorWrapper; // A Wrapper over EntityProcessor instance which performs transforms and handles multi-row outputs correctly.\nClass Evaluator; // Pluggable functions for resolving variables\nClass Evaluator.VariableWrapper;\nClass FieldReaderDataSource; // This can be useful for users who have a DB field containing xml and wish to use a nested XPathEntityProcessor\n", "des": "DataImportHandler and related code."}
{"index": 813, "repo": "lucene-analyzers-common-8.11.2", "code": "package tr;\n\nClass ApostropheFilter; // Strips all characters after an apostrophe (including the apostrophe itself).\nClass ApostropheFilterFactory; // Factory for ApostropheFilter.\nClass TurkishAnalyzer; // Analyzer for Turkish.\nClass TurkishLowerCaseFilter; // Normalizes Turkish token text to lower case.\nClass TurkishLowerCaseFilterFactory; // Factory for TurkishLowerCaseFilter.\n", "des": "Analyzer for Turkish."}
{"index": 746, "repo": "spring-data-solr-4.3.15", "code": "package support;\n\nClass EmbeddedSolrServerFactory; // The EmbeddedSolrServerFactory allows hosting of an SolrServer instance in embedded mode.\nClass EmbeddedSolrServerFactoryBean; // Implementation of FactoryBean for registration of an EmbeddedSolrServer as a Spring bean.\nClass HttpSolrClientFactory; // The HttpSolrClientFactory replaces HttpSolrServerFactory from version 1.x and configures an HttpSolrClient to work with the provided core.\nClass HttpSolrClientFactoryBean; // HttpSolrClientFactoryBean replaces HttpSolrServerFactoryBean from version 1.x.\nClass SolrClientUtils; // SolrClientUtils replaces SolrServerUtils from version 1.x\n", "des": "Everything SolrClient and EmbeddedSolrServer related."}
{"index": 1627, "repo": "spring-kafka-3.0.9", "code": "package listener;\n\npackage listener.adapter; // Provides classes for adapting listeners.\npublic abstract class AbstractConsumerSeekAware extends Object implements ConsumerSeekAware; // Manages the ConsumerSeekAware.ConsumerSeekCallback s for the listener.\npublic abstract class AbstractKafkaBackOffManagerFactory extends Object implements KafkaBackOffManagerFactory, org.springframework.context.ApplicationContextAware; // Base class for KafkaBackOffManagerFactory implementations.\npublic abstract class AbstractMessageListenerContainer<K,V> extends Object implements GenericMessageListenerContainer<K,V>, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.ApplicationContextAware; // The base implementation for the MessageListenerContainer.\n@FunctionalInterface public interface AcknowledgingConsumerAwareMessageListener<K,V> extends MessageListener<K,V>; // Listener for handling incoming Kafka messages, propagating an acknowledgment handle that recipients can invoke when the message has been processed.\n@FunctionalInterface public interface AcknowledgingMessageListener<K,V> extends MessageListener<K,V>; // Listener for handling incoming Kafka messages, propagating an acknowledgment handle that recipients can invoke when the message has been processed.\n@FunctionalInterface public interface AfterRollbackProcessor<K,V>; // Invoked by a listener container with remaining, unprocessed, records (including the failed record).\npublic interface BackOffHandler; // Handler for the provided back off time, listener container and exception.\n@FunctionalInterface public interface BatchAcknowledgingConsumerAwareMessageListener<K,V> extends BatchMessageListener<K,V>; // Listener for handling a batch of incoming Kafka messages, propagating an acknowledgment handle that recipients can invoke when the message has been processed.\n@FunctionalInterface public interface BatchAcknowledgingMessageListener<K,V> extends BatchMessageListener<K,V>; // Listener for handling a batch of incoming Kafka messages, propagating an acknowledgment handle that recipients can invoke when the message has been processed.\n@FunctionalInterface public interface BatchConsumerAwareMessageListener<K,V> extends BatchMessageListener<K,V>; // Listener for handling a batch of incoming Kafka messages; the list is created from the consumer records object returned by a poll.\n", "des": "Package for kafka listeners"}
{"index": 840, "repo": "calcite-core-1.34.0", "code": "package convert;\n\nInterface Converter; // A relational expression implements the interface Converter to indicate that it converts a physical attribute, or trait, of a relational expression from one value to another.\nInterface ConverterRule.Config; // Rule configuration.\nInterface TraitMatchingRule.Config; // Rule configuration.\nClass ConverterImpl; // Abstract implementation of Converter.\nClass ConverterRule; // Abstract base class for a rule which converts from one calling convention to another without changing semantics.\nClass NoneConverter; // NoneConverter converts a plan from inConvention to Convention.NONE.\nClass TraitMatchingRule; // TraitMatchingRule adapts a converter rule, restricting it to fire only when its input already matches the expected output trait.\n", "des": "Defines relational expressions and rules for converting between calling conventions."}
{"index": 3640, "repo": "solr-core-9.3.0", "code": "package collections;\n\nInterface Assign.AssignStrategy; // Strategy for assigning replicas to nodes.\nInterface CollApiCmds.CollectionApiCommand; // Interface implemented by all Collection API commands.\nInterface CollectionCommandContext; // Data passed to Collection API command execution, to allow calls from either the OverseerCollectionMessageHandler when commands are executed on the Overseer, or - in a future change - allow Collection API commands to be executed in a distributed way, unrelated to and not depending upon Overseer abstractions (including overseer collection message handling).\nClass AddReplicaCmd;\nClass AddReplicaCmd.CreateReplica; // A data structure to keep all information required to create a new replica in one place.\nClass Assign;\nClass Assign.AssignRequest;\nClass Assign.AssignRequestBuilder;\nClass BackupCmd;\nClass BalanceReplicasCmd;\nClass CategoryRoutedAlias;\nClass CollApiCmds; // This class contains \"smaller\" Collection API commands implementation, the interface implemented by all commands and the class mapping a collection action to the actual command.\nClass CollApiCmds.AddReplicaPropCmd;\nClass CollApiCmds.BalanceShardsUniqueCmd;\nClass CollApiCmds.CommandMap; // Map CollectionParams.CollectionAction to instances of CollApiCmds.CollectionApiCommand and being usable by both OverseerCollectionMessageHandler and DistributedCollectionConfigSetCommandRunner so that the mappings do not have to be maintained in two places.\nClass CollApiCmds.DeleteReplicaPropCmd;\nClass CollApiCmds.MockOperationCmd;\nClass CollApiCmds.ModifyCollectionCmd;\nClass CollApiCmds.RebalanceLeadersCmd;\nClass CollApiCmds.ReloadCollectionCmd;\nClass CollectionApiLockFactory; // This class implements a higher level locking abstraction for the Collection API using lower level read and write locks.\nClass CollectionHandlingUtils; // This class contains helper methods used by commands of the Collection API.\nClass CollectionHandlingUtils.ShardRequestTracker;\nClass CreateAliasCmd;\nClass CreateCollectionCmd;\nClass CreateShardCmd;\nClass CreateSnapshotCmd; // This class implements the functionality of creating a collection level snapshot.\nClass DeleteAliasCmd;\nClass DeleteBackupCmd; // An overseer command used to delete files associated with incremental backups.\nClass DeleteCollectionCmd;\nClass DeleteNodeCmd;\nClass DeleteReplicaCmd;\n", "des": "Package related to internal implementations of the SolrCloud collections api"}
{"index": 1522, "repo": "spring-context-6.0.11", "code": "package number;\n\npackage number.money; // Integration with the JSR-354 javax.money package.\npublic abstract class AbstractNumberFormatter extends Object implements Formatter<Number>; // Abstract formatter for Numbers, providing a AbstractNumberFormatter.getNumberFormat(java.util.Locale) template method.\npublic class CurrencyStyleFormatter extends AbstractNumberFormatter; // A BigDecimal formatter for number values in currency style.\npublic class NumberFormatAnnotationFormatterFactory extends EmbeddedValueResolutionSupport implements AnnotationFormatterFactory<NumberFormat>; // Formats fields annotated with the NumberFormat annotation.\npublic class NumberStyleFormatter extends AbstractNumberFormatter; // A general-purpose number formatter using NumberFormat's number style.\npublic class PercentStyleFormatter extends AbstractNumberFormatter; // A formatter for number values in percent style.\n", "des": "Formatters for java.lang.Number properties."}
{"index": 1469, "repo": "spring-data-redis-3.1.2", "code": "package util;\n\npublic final class ByteUtils extends Object; // Some handy methods for dealing with byte arrays.\npublic abstract class RedisAssertions extends Object; // Abstract utility class for common assertions used in Spring Data Redis.\n", "des": "Commonly used stuff for data manipulation throughout different driver specific implementations."}
{"index": 3226, "repo": "commons-configuration2-2.9.0", "code": "package sync;\n\nInterface Synchronizer; // An interface controlling synchronization of configuration instances.\nInterface SynchronizerSupport; // Definition of an interface for objects that can be associated with a Synchronizer.\nClass ReadWriteSynchronizer; // A special implementation of Synchronizer based on the JDK's ReentrantReadWriteLock class.\nEnum LockMode; // An enumeration used by SynchronizerSupport to specify how an object is locked.\nEnum NoOpSynchronizer; // An implementation of the Synchronizer interface which does not perform any synchronization.\n", "des": "A package containing interfaces and classes related to synchronization of configurations."}
{"index": 1764, "repo": "spring-data-mongodb-4.1.2", "code": "package validation;\n\npublic interface Validator; // Provides a validator object to be used for collection validation via CollectionOptions.ValidationOptions.\n", "des": "MongoDB schema validation specifics."}
{"index": 3547, "repo": "opennlp-tools-2.2.0", "code": "package util;\n\npackage util.ext; // Package containing extension loading code.\npackage util.featuregen; // This package contains classes for generating sequence features.\nInterface BeamSearchContextGenerator<T>; // Interface for context generators used with a sequence beam search.\nInterface InputStreamFactory; // Allows repeated reads through a stream for certain model building types.\nInterface ObjectStream<T>; // Reads objects from a stream.\nInterface ResetableIterator<E>; // This interface makes an Iterator resettable.\nInterface SequenceCodec<T>; // A codec for sequences of type SequenceCodec.\nInterface SequenceValidator<T>;\nClass AbstractEventStream<T>; // A base ObjectStream implementation for events.\nClass AbstractObjectStream<T>; // A base ObjectStream implementation.\nClass BaseToolFactory; // Base class for all tool factories.\nClass Cache<K,​V>; // Provides fixed size, pre-allocated, least recently used replacement cache.\nClass CollectionObjectStream<E>; // An ObjectStream implementation that works on a Collection of CollectionObjectStream as source for elements.\nClass DownloadUtil; // This class facilitates the downloading of pretrained OpenNLP models.\nClass EventTraceStream;\nClass FilterObjectStream<S,​T>; // Abstract base class for filtering streams.\nClass MarkableFileInputStreamFactory; // A factory that creates MarkableFileInputStream from a File\nClass MutableInt; // This is a non-thread safe mutable int.\nClass ObjectStreamUtils;\nClass ParagraphStream; // A FilterObjectStream which merges text lines into paragraphs.\nClass PlainTextByLineStream; // Reads a plain text file and returns each line as a String object.\nClass ReverseListIterator<T>; // An iterator for a list which returns values in the opposite order as the typical list iterator.\nClass Sequence; // Represents a weighted sequence of outcomes.\nClass Span; // Class for storing start and end integer offsets.\nClass StringList; // A StringList is an immutable list of Strings.\nClass StringUtil;\nClass TokenTag;\nClass TrainingParameters; // Declares and handles default parameters used for or during training models.\nClass Version; // The Version class represents the OpenNLP Tools library version.\nClass XmlUtil;\nEnum DownloadUtil.ModelType; // The type of model.\n", "des": "Package containing utility data structures and algorithms used by multiple other packages."}
{"index": 2165, "repo": "wicket-core-10.0.0-M1", "code": "package response;\n\npublic class ByteArrayResponse extends org.apache.wicket.request.Response; // Response used to capture output as a byte array\npublic class NullResponse extends org.apache.wicket.request.Response; // Response implementation that discards all output.\npublic class StringResponse extends org.apache.wicket.request.Response; // Response object that writes to an AppendingStringBuffer.\n", "des": "Several response implementations."}
{"index": 373, "repo": "calcite-linq4j-1.34.0", "code": "package linq4j;\n\npackage linq4j.function; // Contains definitions of functions and predicates.\npackage linq4j.tree; // Object model for Java expressions.\nInterface Enumerable<T>; // Exposes the enumerator, which supports a simple iteration over a collection.\nInterface Enumerator<T>; // Supports a simple iteration over a collection.\nInterface ExtendedEnumerable<TSource>; // Extension methods in Enumerable.\nInterface ExtendedOrderedEnumerable<T>; // Extension methods for OrderedEnumerable.\nInterface ExtendedOrderedQueryable<T>; // Extension methods for OrderedQueryable.\nInterface Grouping<K,V>; // Represents a collection of objects that have a common key.\nInterface Lookup<K,V>; // Represents a collection of keys each mapped to one or more values.\nInterface OrderedEnumerable<T>; // Represents the result of applying a sorting operation to an Enumerable.\nInterface OrderedQueryable<T>; // Represents the result of applying a sorting operation to a Queryable.\nInterface Queryable<T>; // Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.\nInterface QueryableDefaults.Replayable<T>; // Replayable.\nInterface QueryableFactory<T>; // Factory for building Queryable objects.\nInterface QueryProvider; // Defines methods to create and execute queries that are described by a Queryable object.\nInterface RawEnumerable<T>; // Exposes the enumerator, which supports a simple iteration over a collection, without the extension methods.\nInterface RawQueryable<T>; // Core methods that define a Queryable.\nClass AbstractEnumerable<T>; // Abstract implementation of the Enumerable interface that implements the extension methods.\nClass AbstractEnumerable2<T>; // Abstract implementation of the Enumerable interface that implements the extension methods.\nClass AbstractQueryable<T>; // Abstract implementation of the Queryable interface that implements the extension methods.\nClass BaseQueryable<TSource>; // Skeleton implementation of Queryable.\nClass CartesianProductEnumerator<T,E>; // Enumerator over the cartesian product of enumerators.\nClass DefaultEnumerable<T>; // Implementation of the Enumerable interface that implements the extension methods by calling into the Extensions class.\n", "des": "Language-integrated query for Java (linq4j) main package."}
{"index": 2106, "repo": "spring-webflux-6.0.11", "code": "package script;\n\npublic class RenderingContext extends Object; // Context passed to ScriptTemplateView render function in order to make the application context, the locale, the template loader and the url available on scripting side.\npublic interface ScriptTemplateConfig; // Interface to be implemented by objects that configure and manage a JSR-223 ScriptEngine for automatic lookup in a web environment.\npublic class ScriptTemplateConfigurer extends Object implements ScriptTemplateConfig; // An implementation of the Spring WebFlux ScriptTemplateConfig for creating a ScriptEngine for use in a web application.\npublic class ScriptTemplateView extends AbstractUrlBasedView; // An AbstractUrlBasedView subclass designed to run any template library based on a JSR-223 script engine.\npublic class ScriptTemplateViewResolver extends UrlBasedViewResolver; // Convenience subclass of UrlBasedViewResolver that supports ScriptTemplateView and custom subclasses of it.\n", "des": "Support classes for views based on the JSR-223 script engine abstraction (as included in Java 6+), e.g."}
{"index": 2710, "repo": "spring-batch-infrastructure-5.0.2", "code": "package adapter;\n\npublic abstract class AbstractMethodInvokingDelegator<T> extends Object implements org.springframework.beans.factory.InitializingBean; // Superclass for delegating classes which dynamically call a custom method of injected object.\npublic static class AbstractMethodInvokingDelegator.InvocationTargetThrowableWrapper extends RuntimeException; // Used to wrap a Throwable (not an Exception) thrown by a reflectively-invoked delegate.\npublic class DynamicMethodInvocationException extends RuntimeException; // Indicates an error has been encountered while trying to dynamically invoke a method e.g.\npublic class HippyMethodInvoker extends org.springframework.util.MethodInvoker; // A MethodInvoker that is a bit relaxed about its arguments.\npublic class ItemProcessorAdapter<I,O> extends AbstractMethodInvokingDelegator<O> implements ItemProcessor<I,O>; // Invokes a custom method on a delegate plain old Java object which itself processes an item.\npublic class ItemReaderAdapter<T> extends AbstractMethodInvokingDelegator<T> implements ItemReader<T>; // Invokes a custom method on a delegate plain old Java object which itself provides an item.\npublic class ItemWriterAdapter<T> extends AbstractMethodInvokingDelegator<T> implements ItemWriter<T>; // Delegates item processing to a custom method - passes the item as an argument for the delegate method.\npublic class PropertyExtractingDelegatingItemWriter<T> extends AbstractMethodInvokingDelegator<T> implements ItemWriter<T>; // Delegates processing to a custom method - extracts property values from item object and uses them as arguments for the delegate method.\n", "des": "Adapters for Plain Old Java Objects."}
{"index": 802, "repo": "lucene-analyzers-common-8.11.2", "code": "package ro;\n\nClass RomanianAnalyzer; // Analyzer for Romanian.\n", "des": "Analyzer for Romanian."}
{"index": 795, "repo": "lucene-analyzers-common-8.11.2", "code": "package no;\n\nClass NorwegianAnalyzer; // Analyzer for Norwegian.\nClass NorwegianLightStemFilter; // A TokenFilter that applies NorwegianLightStemmer to stem Norwegian words.\nClass NorwegianLightStemFilterFactory; // Factory for NorwegianLightStemFilter.\nClass NorwegianLightStemmer; // Light Stemmer for Norwegian.\nClass NorwegianMinimalStemFilter; // A TokenFilter that applies NorwegianMinimalStemmer to stem Norwegian words.\nClass NorwegianMinimalStemFilterFactory; // Factory for NorwegianMinimalStemFilter.\nClass NorwegianMinimalStemmer; // Minimal Stemmer for Norwegian Bokmål (no-nb) and Nynorsk (no-nn)\n", "des": "Analyzer for Norwegian."}
{"index": 2601, "repo": "spring-rabbit-3.0.6", "code": "package transaction;\n\npublic class RabbitTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.support.ResourceTransactionManager, org.springframework.beans.factory.InitializingBean; // PlatformTransactionManager implementation for a single Rabbit ConnectionFactory.\n", "des": "Provides classes supporting transactions in Spring Rabbit."}
{"index": 668, "repo": "commons-lang3-3.12.0", "code": "package event;\n\nClass EventListenerSupport<L>; // An EventListenerSupport object can be used to manage a list of event listeners of a particular type.\nClass EventUtils; // Provides some useful event-based utility methods.\n", "des": "Provides some useful event-based utilities."}
{"index": 2038, "repo": "spring-messaging-6.0.11", "code": "package support;\n\npublic class MissingSessionUserException extends MessagingException; // MessagingException thrown when a session is missing.\npublic class PrincipalMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Resolver for arguments of type Principal, including Optional<Principal>.\npublic class SendToMethodReturnValueHandler extends Object implements HandlerMethodReturnValueHandler; // A HandlerMethodReturnValueHandler for sending to destinations specified in a SendTo or SendToUser method-level annotations.\npublic class SimpAnnotationMethodMessageHandler extends AbstractMethodMessageHandler<SimpMessageMappingInfo> implements org.springframework.context.EmbeddedValueResolverAware, org.springframework.context.SmartLifecycle; // A handler for messages delegating to @MessageMapping and @SubscribeMapping annotated methods.\npublic class SubscriptionMethodReturnValueHandler extends Object implements HandlerMethodReturnValueHandler; // HandlerMethodReturnValueHandler for replying directly to a subscription.\n", "des": "Support classes for handling messages from simple messaging protocols (like STOMP)."}
{"index": 1720, "repo": "spring-boot-test-3.1.1", "code": "package server;\n\n@FunctionalInterface public interface WebTestClientBuilderCustomizer; // A customizer for a WebTestClient.Builder.\n", "des": "Spring Boot support for testing Spring WebFlux server endpoints via WebTestClient."}
{"index": 2409, "repo": "spring-batch-core-5.0.2", "code": "package skip;\n\npublic class AlwaysSkipItemSkipPolicy extends Object implements SkipPolicy; // Implementation of the SkipPolicy interface that will always return that an item should be skipped.\npublic class CompositeSkipPolicy extends Object implements SkipPolicy;\npublic class ExceptionClassifierSkipPolicy extends Object implements SkipPolicy; // A SkipPolicy that depends on an exception classifier to make its decision, and then delegates to the classifier result.\npublic class LimitCheckingItemSkipPolicy extends Object implements SkipPolicy; // SkipPolicy that determines whether or not reading should continue based upon how many items have been skipped.\npublic class NeverSkipItemSkipPolicy extends Object implements SkipPolicy; // SkipPolicy implementation that always returns false, indicating that an item should not be skipped.\npublic class NonSkippableProcessException extends SkipException; // Fatal exception to be thrown when a process operation could not be skipped.\npublic class NonSkippableReadException extends SkipException; // Fatal exception to be thrown when a read operation could not be skipped.\npublic class NonSkippableWriteException extends SkipException; // Fatal exception to be thrown when a process operation could not be skipped.\npublic abstract class SkipException extends UnexpectedJobExecutionException; // Base exception indicating that the skip has failed or caused a failure.\npublic class SkipLimitExceededException extends SkipException; // Exception indicating that the skip limit for a particular Step has been exceeded.\npublic class SkipListenerFailedException extends UnexpectedJobExecutionException; // Special exception to indicate a failure in a skip listener.\n@FunctionalInterface public interface SkipPolicy; // Policy for determining whether or not some processing should be skipped.\npublic class SkipPolicyFailedException extends UnexpectedJobExecutionException; // Special exception to indicate a failure in a skip policy.\n", "des": "Specific implementations of skip concerns for items in a step."}
{"index": 3843, "repo": "lucene-core-9.7.0", "code": "package lucene95;\n\nClass Lucene95Codec; // Implements the Lucene 9.5 index format\nClass Lucene95HnswVectorsFormat; // Lucene 9.5 vector format, which encodes numeric vector values and an optional associated graph connecting the documents having values.\nClass Lucene95HnswVectorsReader; // Reads vectors from the index segments along with index data structures supporting KNN search.\nClass Lucene95HnswVectorsWriter; // Writes vector values and knn graphs to index segments.\nEnum Lucene95Codec.Mode; // Configuration option for the codec.\n", "des": "Lucene 9.5 file format."}
{"index": 213, "repo": "nutch-2.4", "code": "package parse;\n\npackage parse.html; // An HTML document parsing plugin.\npackage parse.js; // Parser and parse filter plugin to extract all (possible) links from JavaScript files and embedded JavaScript code snippets.\npackage parse.tika; // Parse various document formats with help of Apache Tika.\npackage parse.metatags; // Parse filter to extract meta tags: keywords, description, etc.\nInterface ParseFilter; // Extension point for DOM-based parsers.\nInterface Parser; // A parser for content generated by a Protocol implementation.\nInterface ParseStatusCodes;\nClass HTMLMetaTags; // This class holds the information about HTML \"meta\" tags extracted from a page.\nClass NutchSitemapParse;\nClass NutchSitemapParser;\nClass Outlink;\nClass OutlinkExtractor; // Extractor to extract Outlinks / URLs from plain text using Regular Expressions.\nClass Parse;\nClass ParseFilters; // Creates and caches ParseFilter implementing plugins.\nClass ParsePluginList; // This class represents a natural ordering for which parsing plugin should get called for a particular mimeType.\nClass ParsePluginsReader; // A reader to load the information stored in the $NUTCH_HOME/conf/parse-plugins.xml file.\nClass ParserChecker; // Parser checker, useful for testing parser.\nClass ParserFactory; // Creates and caches Parser plugins.\nClass ParserJob;\nClass ParserJob.ParserMapper;\nClass ParseStatusUtils;\nClass ParseUtil; // A Utility class containing methods to simply perform parsing utilities such as iterating through a preferred list of Parsers to obtain Parse objects.\nEnum ParseUtil.ChangeFrequency;\nClass ParseException;\nClass ParserNotFound;\n", "des": "The Parse interface and related classes."}
{"index": 3836, "repo": "lucene-core-9.7.0", "code": "package tokenattributes;\n\nInterface BytesTermAttribute; // This attribute can be used if you have the raw term bytes to be indexed.\nInterface CharTermAttribute; // The term text of a Token.\nInterface FlagsAttribute; // This attribute can be used to pass different flags down the Tokenizer chain, e.g.\nInterface KeywordAttribute; // This attribute can be used to mark a token as a keyword.\nInterface OffsetAttribute; // The start and end character offset of a Token.\nInterface PayloadAttribute; // The payload of a Token.\nInterface PositionIncrementAttribute; // Determines the position of this token relative to the previous Token in a TokenStream, used in phrase searching.\nInterface PositionLengthAttribute; // Determines how many positions this token spans.\nInterface SentenceAttribute; // This attribute tracks what sentence a given token belongs to as well as potentially other sentence specific attributes.\nInterface TermFrequencyAttribute; // Sets the custom term frequency of a term within one document.\nInterface TermToBytesRefAttribute; // This attribute is requested by TermsHashPerField to index the contents.\nInterface TypeAttribute; // A Token's lexical type.\nClass BytesTermAttributeImpl; // Implementation class for BytesTermAttribute.\nClass CharTermAttributeImpl; // Default implementation of CharTermAttribute.\nClass FlagsAttributeImpl; // Default implementation of FlagsAttribute.\nClass KeywordAttributeImpl; // Default implementation of KeywordAttribute.\nClass OffsetAttributeImpl; // Default implementation of OffsetAttribute.\nClass PackedTokenAttributeImpl; // Default implementation of the common attributes used by Lucene: CharTermAttribute TypeAttribute PositionIncrementAttribute PositionLengthAttribute OffsetAttribute TermFrequencyAttribute\nClass PayloadAttributeImpl; // Default implementation of PayloadAttribute.\nClass PositionIncrementAttributeImpl; // Default implementation of PositionIncrementAttribute.\nClass PositionLengthAttributeImpl; // Default implementation of PositionLengthAttribute.\nClass SentenceAttributeImpl; // Default implementation of SentenceAttribute.\nClass TermFrequencyAttributeImpl; // Default implementation of TermFrequencyAttribute.\nClass TypeAttributeImpl; // Default implementation of TypeAttribute.\n", "des": "General-purpose attributes for text analysis."}
{"index": 2326, "repo": "spring-boot-3.1.1", "code": "package messaging;\n\n@FunctionalInterface public interface RSocketStrategiesCustomizer; // Callback interface that can be used to customize codecs configuration for an RSocket client and/or server with RSocketStrategies.\n", "des": "Support for RSocket-based messaging."}
{"index": 1479, "repo": "tribuo-core-4.3.1", "code": "package datasource;\n\npublic class AggregateConfigurableDataSource<T extends Output<T>> extends Object implements ConfigurableDataSource<T>; // Aggregates multiple ConfigurableDataSources, uses AggregateDataSource.IterationOrder to control the iteration order.\npublic static class AggregateConfigurableDataSource.AggregateConfigurableDataSourceProvenance extends com.oracle.labs.mlrg.olcut.provenance.impl.SkeletalConfiguredObjectProvenance implements DataSourceProvenance; // Provenance for the AggregateConfigurableDataSource.\npublic class AggregateDataSource<T extends Output<T>> extends Object implements DataSource<T>; // Aggregates multiple DataSources, uses AggregateDataSource.IterationOrder to control the iteration order.\npublic static class AggregateDataSource.AggregateDataSourceProvenance extends Object implements DataSourceProvenance; // Provenance for the AggregateDataSource.\npublic static enum AggregateDataSource.IterationOrder extends Enum<AggregateDataSource.IterationOrder>; // Specifies the iteration order of the inner sources.\npublic final class IDXDataSource<T extends Output<T>> extends Object implements ConfigurableDataSource<T>; // A DataSource which can read IDX formatted data (i.e., MNIST).\npublic static class IDXDataSource.IDXData extends Object; // Java side representation for an IDX file.\npublic static final class IDXDataSource.IDXDataSourceProvenance extends com.oracle.labs.mlrg.olcut.provenance.impl.SkeletalConfiguredObjectProvenance implements DataSourceProvenance; // Provenance class for IDXDataSource.\npublic static enum IDXDataSource.IDXType extends Enum<IDXDataSource.IDXType>; // The possible IDX input formats.\npublic final class LibSVMDataSource<T extends Output<T>> extends Object implements ConfigurableDataSource<T>; // A DataSource which can read LibSVM formatted data.\npublic static final class LibSVMDataSource.LibSVMDataSourceProvenance extends com.oracle.labs.mlrg.olcut.provenance.impl.SkeletalConfiguredObjectProvenance implements DataSourceProvenance; // The provenance for a LibSVMDataSource.\npublic class ListDataSource<T extends Output<T>> extends Object implements DataSource<T>; // A data source which wraps up a list of Examples along with their DataSourceProvenance and an OutputFactory.\n", "des": "Simple data sources for ingesting or aggregating data."}
{"index": 393, "repo": "amqp-client-5.18.0", "code": "package impl;\n\npackage impl.nio; // NIO network connector.\npackage impl.recovery; // Implementation of connection and topology recovery.\nInterface AMQChannel.RpcContinuation;\nInterface AMQImpl.MethodVisitor;\nInterface CredentialsProvider; // Provider interface for establishing credentials for connecting to the broker.\nInterface CredentialsRefreshService; // Provider interface to refresh credentials when appropriate and perform an operation once the credentials have been renewed.\nInterface ErrorOnWriteListener; // Listener called when a connection gets an IO error trying to write on the socket.\nInterface FrameHandler; // Interface to a frame handler.\nInterface FrameHandlerFactory;\nInterface NetworkConnection;\nInterface RpcWrapper;\nClass AbstractFrameHandlerFactory;\nClass AbstractMetricsCollector; // Base class for MetricsCollector.\nClass AMQBasicProperties;\nClass AMQChannel; // Base class modelling an AMQ channel.\nClass AMQChannel.BlockingRpcContinuation<T>;\nClass AMQChannel.SimpleBlockingRpcContinuation;\nClass AMQCommand; // AMQP 0-9-1-specific implementation of Command which accumulates method, header and body from a series of frames, unless these are supplied at construction time.\nClass AMQConnection; // Concrete class representing and managing an AMQP connection to a broker.\nClass AMQContentHeader; // Implementation of ContentHeader - specialized by autogenerated code in AMQP.java.\nClass AMQImpl;\nClass AMQImpl.Access;\nClass AMQImpl.Access.Request;\nClass AMQImpl.Access.RequestOk;\nClass AMQImpl.Basic;\nClass AMQImpl.Basic.Ack;\nClass AMQImpl.Basic.Cancel;\nClass AMQImpl.Basic.CancelOk;\nClass AMQImpl.Basic.Consume;\nClass AMQImpl.Basic.ConsumeOk;\nClass AMQImpl.Basic.Deliver;\nClass AMQImpl.Basic.Get;\nClass AMQImpl.Basic.GetEmpty;\nClass AMQImpl.Basic.GetOk;\nClass AMQImpl.Basic.Nack;\nClass AMQImpl.Basic.Publish;\nClass AMQImpl.Basic.Qos;\nClass AMQImpl.Basic.QosOk;\nClass AMQImpl.Basic.Recover;\nClass AMQImpl.Basic.RecoverAsync;\nClass AMQImpl.Basic.RecoverOk;\nClass AMQImpl.Basic.Reject;\nClass AMQImpl.Basic.Return;\nClass AMQImpl.Channel;\n", "des": "Implementations of interfaces specified in the client API, and their supporting classes."}
{"index": 3323, "repo": "opencms-core-15.0", "code": "package apps;\n\npackage apps.cacheadmin; // Contains classes of the cache admin app.\npackage apps.dbmanager; // Contains classes of the cache admin app.\npackage apps.filehistory; // Contains classes of the file history app.\npackage apps.git; // This package contains the app classes for the git check in functionality.\npackage apps.linkvalidation; // Contains classes of the link validation app.\npackage apps.lists; // This package contains the app classes for the list configurations manager.\npackage apps.logfile; // Contains classes of the site manager app.\npackage apps.modules; // Contains classes of the module manager app.\npackage apps.projects; // The project manager app classes.\npackage apps.publishqueue; // Contains classes of the publish queue app.\npackage apps.scheduler; // The scheduled jobs manager app classes.\npackage apps.search; // Contains classes of the source search app.\npackage apps.searchindex; // Contains classes of the searchindex app.\npackage apps.sessions; // Contains classes of the site manager app.\npackage apps.sitemanager; // Contains classes of the site manager app.\npackage apps.user; // Contains classes of the user manager app.\nInterface I_CmsAppButtonProvider; // Generates app launcher buttons.\nInterface I_CmsAppCategory; // App category interface.\nInterface I_CmsAppSettings; // Used to write app settings to the user.\nInterface I_CmsAppUIContext; // The app ui context.\nInterface I_CmsCachableApp; // Apps implementing this interface will be stored in the user session so returning to the app will be quicker and use less resources.\nInterface I_CmsContextProvider; // Provides the dialog context to context menus and other context sensitive dialogs.\nInterface I_CmsCRUDApp<T>; // Interface for apps which perform CRUD operations on any kind of element like CmsSites or CmsScheduledJobs.\nInterface I_CmsFolderAppCategory; // Displays a sub menu in the app launch pad.\nInterface I_CmsHasAppLaunchCommand; // Implement this interface for apps that require special app launch actions.\nInterface I_CmsHasOrder; // Sortable configuration item interface.\nInterface I_CmsHasShortcutActions; // To provide shortcut actions an app may implement this intreface.\nInterface I_CmsMenuItem; // Workplace view menu item.\n", "des": "Contains code for workplace apps."}
{"index": 1141, "repo": "hadoop-yarn-api-3.3.6", "code": "package resource;\n\nClass ResourceUtils; // Helper class to read the resource-types to be supported by the system.\n", "des": "Package org.apache.hadoop.yarn.util.resource contains classes which is used as utility class for resource profile computations."}
{"index": 328, "repo": "kafka-clients-3.5.0", "code": "package resource;\n\nClass Resource; // Represents a cluster resource with a tuple of (type, name).\nClass ResourcePattern; // Represents a pattern that is used by ACLs to match zero or more Resources.\nClass ResourcePatternFilter; // Represents a filter that can match ResourcePattern.\nEnum PatternType; // Resource pattern type.\nEnum ResourceType; // Represents a type of resource which an ACL can be applied to.\n", "des": "Provides client handles representing logical resources in a Kafka cluster."}
{"index": 1580, "repo": "spring-security-oauth2-client-6.1.2", "code": "package authentication;\n\npublic class OidcAuthorizationCodeAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider; // An implementation of an AuthenticationProvider for the OpenID Connect Core 1.0 Authorization Code Grant Flow.\npublic class OidcAuthorizationCodeReactiveAuthenticationManager extends Object implements org.springframework.security.authentication.ReactiveAuthenticationManager; // An implementation of an AuthenticationProvider for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.\npublic final class OidcIdTokenDecoderFactory extends Object implements org.springframework.security.oauth2.jwt.JwtDecoderFactory<ClientRegistration>; // A factory that provides a JwtDecoder used for OidcIdToken signature verification.\npublic final class OidcIdTokenValidator extends Object implements org.springframework.security.oauth2.core.OAuth2TokenValidator<org.springframework.security.oauth2.jwt.Jwt>; // An OAuth2TokenValidator responsible for validating the claims in an ID Token.\npublic final class ReactiveOidcIdTokenDecoderFactory extends Object implements org.springframework.security.oauth2.jwt.ReactiveJwtDecoderFactory<ClientRegistration>; // A factory that provides a ReactiveJwtDecoder used for OidcIdToken signature verification.\n", "des": "Support classes and interfaces for authenticating and authorizing a client with an OpenID Connect 1.0 Provider using a specific authorization grant flow."}
{"index": 3887, "repo": "solr-solrj-9.3.0", "code": "package impl;\n\nInterface ClusterStateProvider; // Provides cluster state from some source\nInterface HttpClientBuilderFactory; // Factory interface for configuring SolrHttpClientBuilder.\nInterface HttpListenerFactory;\nInterface SolrHttpClientBuilder.AuthSchemeRegistryProvider;\nInterface SolrHttpClientBuilder.CookieSpecRegistryProvider;\nInterface SolrHttpClientBuilder.CredentialsProviderProvider;\nClass AuthenticationStoreHolder;\nClass BaseHttpClusterStateProvider;\nClass BaseHttpSolrClient;\nClass BinaryRequestWriter; // A RequestWriter which writes requests in the javabin format\nClass BinaryRequestWriter.BAOS;\nClass BinaryResponseParser;\nClass CloudHttp2SolrClient; // SolrJ client class to communicate with SolrCloud using Http2SolrClient.\nClass CloudHttp2SolrClient.Builder; // Constructs CloudHttp2SolrClient instances from provided configuration.\nClass CloudLegacySolrClient;\nClass CloudLegacySolrClient.Builder; // Constructs CloudLegacySolrClient instances from provided configuration.\nClass CloudSolrClient;\nClass CloudSolrClient.Builder; // Constructs CloudSolrClient instances from provided configuration.\nClass CloudSolrClient.RouteResponse<T extends LBSolrClient.Req>;\nClass ConcurrentUpdateHttp2SolrClient;\nClass ConcurrentUpdateHttp2SolrClient.Builder; // Constructs ConcurrentUpdateHttp2SolrClient instances from provided configuration.\nClass ConcurrentUpdateSolrClient;\nClass ConcurrentUpdateSolrClient.Builder; // Constructs ConcurrentUpdateSolrClient instances from provided configuration.\nClass DelegationTokenHttpSolrClient;\nClass Http2ClusterStateProvider;\nClass Http2SolrClient; // Difference between this Http2SolrClient and HttpSolrClient: Http2SolrClient sends requests in HTTP/2 Http2SolrClient can point to multiple urls Http2SolrClient does not expose its internal httpClient like HttpSolrClient.getHttpClient(), sharing connection pools should be done by Http2SolrClient.Builder.withHttpClient(Http2SolrClient)\nClass Http2SolrClient.Builder;\nClass Http2SolrClient.OutStream;\nClass HttpClientUtil;\nClass HttpClientUtil.GzipDecompressingEntity;\nClass HttpClientUtil.SocketFactoryRegistryProvider;\nClass HttpClusterStateProvider;\nClass HttpListenerFactory.RequestResponseListener;\nClass HttpSolrClient;\nClass HttpSolrClient.Builder;\nClass HttpSolrClient.HttpUriRequestResponse;\n", "des": "Concrete implementations of client API classes."}
{"index": 3186, "repo": "tomcat-api-10.1", "code": "package datasources;\n\nClass InstanceKeyDataSource; // The base class for SharedPoolDataSource and PerUserPoolDataSource.\nClass PerUserPoolDataSource; // A pooling DataSource appropriate for deployment within J2EE environment.\nClass PerUserPoolDataSourceFactory; // A JNDI ObjectFactory which creates SharedPoolDataSources\nClass SharedPoolDataSource; // A pooling DataSource appropriate for deployment within J2EE environment.\nClass SharedPoolDataSourceFactory; // A JNDI ObjectFactory which creates SharedPoolDataSources\n", "des": "This package contains two DataSources: PerUserPoolDataSource and SharedPoolDataSource which provide a database connection pool."}
{"index": 2915, "repo": "spring-xml-4.0.5", "code": "package xpath;\n\npublic abstract class AbstractXPathTemplate extends TransformerObjectSupport implements XPathOperations; // Abstract base class for implementations of XPathOperations.\npublic class JaxenXPathTemplate extends AbstractXPathTemplate; // Implementation of XPathOperations that uses Jaxen.\npublic class Jaxp13XPathTemplate extends AbstractXPathTemplate; // Implementation of XPathOperations that uses JAXP 1.3.\npublic interface NodeCallbackHandler; // An interface used by XPathOperations implementations for processing Node objects on a per-node basis.\npublic interface NodeMapper<T>; // An interface used by XPathOperations implementations for mapping Node objects on a per-node basis.\npublic class XPathException extends XmlException; // Exception thrown when an error occurs during XPath processing.\npublic interface XPathExpression; // Defines the contract for a precompiled XPath expression.\npublic abstract class XPathExpressionFactory extends Object; // Factory for compiled XPathExpressions, being aware of JAXP 1.3+ XPath functionality, and Jaxen.\npublic class XPathExpressionFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<XPathExpression>, org.springframework.beans.factory.InitializingBean; // Spring FactoryBean for XPathExpression object.\npublic interface XPathOperations; // Interface that specifies a basic set of XPath operations, implemented by various XPathTemplates.\npublic class XPathParseException extends XPathException; // Exception throws when a XPath expression cannot be parsed.\n", "des": "Provides XPathTemplate implementations, and various classes for XPath evaluation using JAXP 1.3, and Jaxen."}
{"index": 2955, "repo": "spring-integration-xml-6.1.2", "code": "package transformer;\n\npackage transformer.support; // Contains support classes for Transformers.\npublic abstract class AbstractXmlTransformer extends org.springframework.integration.transformer.AbstractTransformer; // Super class for XML transformers.\npublic class MarshallingTransformer extends AbstractXmlTransformer; // An implementation of AbstractTransformer that delegates to an OXM Marshaller.\npublic class ResultToDocumentTransformer extends Object implements ResultTransformer; // Creates a Document from a Result payload.\npublic class ResultToStringTransformer extends Object implements ResultTransformer; // Converts the passed Result to an instance of String.\npublic interface ResultTransformer; // Implementations of this class allow for the transformation of Result objects to other formats.\npublic class SourceCreatingTransformer extends org.springframework.integration.transformer.AbstractPayloadTransformer<Object,Source>; // Transforms the payload to a Source using a SourceFactory.\npublic class UnmarshallingTransformer extends org.springframework.integration.transformer.AbstractPayloadTransformer<Object,Object>; // An implementation of Transformer that delegates to an OXM Unmarshaller.\npublic class XPathHeaderEnricher extends org.springframework.integration.transformer.HeaderEnricher; // Transformer implementation that evaluates XPath expressions against the message payload and inserts the result of the evaluation into a message header.\npublic class XPathTransformer extends org.springframework.integration.transformer.AbstractTransformer; // Transformer implementation that evaluates an XPath expression against the inbound Message payload and returns a Message whose payload is the result of that evaluation.\npublic class XsltPayloadTransformer extends AbstractXmlTransformer implements org.springframework.beans.factory.BeanClassLoaderAware; // Thread safe XSLT transformer implementation which returns a transformed Source, Document, or String.\n", "des": "Provides Transformer and Enricher implementations."}
{"index": 2288, "repo": "spring-boot-3.1.1", "code": "package admin;\n\npublic interface SpringApplicationAdminMXBean; // An MBean contract to control and monitor a running SpringApplication over JMX.\npublic class SpringApplicationAdminMXBeanRegistrar extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.context.event.GenericApplicationListener, org.springframework.context.EnvironmentAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Register a SpringApplicationAdminMXBean implementation to the platform MBeanServer.\n", "des": "Administration support for Spring Boot applications."}
{"index": 2028, "repo": "spring-messaging-6.0.11", "code": "package reactive;\n\npublic abstract class AbstractNamedValueMethodArgumentResolver extends Object implements SyncHandlerMethodArgumentResolver; // Abstract base class to resolve method arguments from a named value, e.g.\nprotected static class AbstractNamedValueMethodArgumentResolver.NamedValueInfo extends Object; // Represents a named value declaration.\npublic class ContinuationHandlerMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // No-op resolver for method arguments of type Continuation.\npublic class DestinationVariableMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver; // Resolve for @DestinationVariable method parameters.\npublic class HeaderMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver; // Resolver for @Header arguments.\npublic class HeadersMethodArgumentResolver extends Object implements SyncHandlerMethodArgumentResolver; // Argument resolver for headers.\npublic class MessageMappingMessageHandler extends AbstractMethodMessageHandler<CompositeMessageCondition> implements org.springframework.context.EmbeddedValueResolverAware; // Extension of AbstractMethodMessageHandler for reactive, non-blocking handling of messages via @MessageMapping methods.\npublic class PayloadMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // A resolver to extract and decode the payload of a message using a Decoder, where the payload is expected to be a Publisher of DataBuffer.\n", "des": "Support classes for working with annotated message-handling methods with non-blocking, reactive contracts."}
{"index": 583, "repo": "commons-collections-3.2.2", "code": "package list;\n\nClass AbstractLinkedList; // An abstract implementation of a linked list which provides numerous points for subclasses to override.\nClass AbstractLinkedList.LinkedListIterator; // A list iterator over the linked list.\nClass AbstractLinkedList.LinkedSubList; // The sublist implementation for AbstractLinkedList.\nClass AbstractLinkedList.LinkedSubListIterator; // A list iterator over the linked sub list.\nClass AbstractLinkedList.Node; // A node within the linked list.\nClass AbstractListDecorator; // Decorates another List to provide additional behaviour.\nClass AbstractSerializableListDecorator; // Serializable subclass of AbstractListDecorator.\nClass CursorableLinkedList; // A List implementation with a ListIterator that allows concurrent modifications to the underlying list.\nClass CursorableLinkedList.Cursor; // An extended ListIterator that allows concurrent changes to the underlying list.\nClass CursorableLinkedList.SubCursor; // A cursor for the sublist based on LinkedSubListIterator.\nClass FixedSizeList; // Decorates another List to fix the size preventing add/remove.\nClass GrowthList; // Decorates another List to make it seamlessly grow when indices larger than the list size are used on add and set, avoiding most IndexOutOfBoundsExceptions.\nClass LazyList; // Decorates another List to create objects in the list on demand.\nClass NodeCachingLinkedList; // A List implementation that stores a cache of internal Node objects in an effort to reduce wasteful object creation.\nClass PredicatedList; // Decorates another List to validate that all additions match a specified predicate.\nClass SetUniqueList; // Decorates a List to ensure that no duplicates are present much like a Set.\nClass SynchronizedList; // Decorates another List to synchronize its behaviour for a multi-threaded environment.\nClass TransformedList; // Decorates another List to transform objects that are added.\nClass TreeList; // A List implementation that is optimised for fast insertions and removals at any index in the list.\nClass TypedList; // Decorates another List to validate that elements added are of a specific type.\nClass UnmodifiableList; // Decorates another List to ensure it can't be altered.\n", "des": "This package contains implementations of the List interface."}
{"index": 2830, "repo": "spring-data-r2dbc-3.1.2", "code": "package core;\n\npublic class DefaultReactiveDataAccessStrategy extends Object implements ReactiveDataAccessStrategy; // Default ReactiveDataAccessStrategy implementation.\npublic interface FluentR2dbcOperations extends ReactiveSelectOperation, ReactiveInsertOperation, ReactiveUpdateOperation, ReactiveDeleteOperation; // Stripped down interface providing access to a fluent API that specifies a basic set of reactive R2DBC operations.\npublic interface R2dbcEntityOperations extends FluentR2dbcOperations; // Interface specifying a basic set of reactive R2DBC operations using entities.\npublic class R2dbcEntityTemplate extends Object implements R2dbcEntityOperations, BeanFactoryAware, ApplicationContextAware; // Implementation of R2dbcEntityOperations.\n@Deprecated public interface ReactiveDataAccessStrategy;\n@FunctionalInterface public static interface ReactiveDataAccessStrategy.NamedParameterProvider; // Interface to retrieve parameters for named parameter processing.\npublic interface ReactiveDeleteOperation; // The ReactiveDeleteOperation interface allows creation and execution of DELETE operations in a fluent API style.\npublic static interface ReactiveDeleteOperation.DeleteWithQuery extends ReactiveDeleteOperation.TerminatingDelete; // Required filter.\npublic static interface ReactiveDeleteOperation.DeleteWithTable extends ReactiveDeleteOperation.TerminatingDelete; // Table override (optional).\npublic static interface ReactiveDeleteOperation.ReactiveDelete extends ReactiveDeleteOperation.DeleteWithTable, ReactiveDeleteOperation.DeleteWithQuery; // The ReactiveDeleteOperation.ReactiveDelete interface provides methods for constructing DELETE operations in a fluent way.\npublic static interface ReactiveDeleteOperation.TerminatingDelete; // Trigger DELETE operation by calling one of the terminating methods.\npublic interface ReactiveInsertOperation; // The ReactiveInsertOperation interface allows creation and execution of INSERT operations in a fluent API style.\npublic static interface ReactiveInsertOperation.InsertWithTable<T> extends ReactiveInsertOperation.TerminatingInsert<T>; // Table override (optional).\npublic static interface ReactiveInsertOperation.ReactiveInsert<T> extends ReactiveInsertOperation.InsertWithTable<T>; // The ReactiveInsertOperation.ReactiveInsert interface provides methods for constructing INSERT operations in a fluent way.\npublic static interface ReactiveInsertOperation.TerminatingInsert<T>; // Trigger INSERT execution by calling one of the terminating methods.\npublic interface ReactiveSelectOperation; // The ReactiveSelectOperation interface allows creation and execution of SELECT operations in a fluent API style.\n", "des": "Core domain types around DatabaseClient."}
{"index": 1223, "repo": "commons-text-1.10.0", "code": "package similarity;\n\nInterface EditDistance<R>; // Interface for Edit Distances.\nInterface SimilarityScore<R>; // Interface for the concept of a string similarity score.\nClass CosineDistance; // Measures the cosine distance between two character sequences.\nClass CosineSimilarity; // Measures the Cosine similarity of two vectors of an inner product space and compares the angle between them.\nClass EditDistanceFrom<R>; // This stores a EditDistance implementation and a CharSequence \"left\" string.\nClass FuzzyScore; // A matching algorithm that is similar to the searching algorithms implemented in editors such as Sublime Text, TextMate, Atom and others.\nClass HammingDistance; // The hamming distance between two strings of equal length is the number of positions at which the corresponding symbols are different.\nClass IntersectionResult; // Represents the intersection result between two sets.\nClass IntersectionSimilarity<T>; // Measures the intersection of two sets created from a pair of character sequences.\nClass JaccardDistance; // Measures the Jaccard distance of two sets of character sequence.\nClass JaccardSimilarity; // Measures the Jaccard similarity (aka Jaccard index) of two sets of character sequence.\nClass JaroWinklerDistance; // Measures the Jaro-Winkler distance of two character sequences.\nClass JaroWinklerSimilarity; // A similarity algorithm indicating the percentage of matched characters between two character sequences.\nClass LevenshteinDetailedDistance; // An algorithm for measuring the difference between two character sequences.\nClass LevenshteinDistance; // An algorithm for measuring the difference between two character sequences.\nClass LevenshteinResults; // Container class to store Levenshtein distance between two character sequences.\nClass LongestCommonSubsequence; // A similarity algorithm indicating the length of the longest common subsequence between two strings.\nClass LongestCommonSubsequenceDistance; // An edit distance algorithm based on the length of the longest common subsequence between two strings.\nClass SimilarityScoreFrom<R>; // This stores a SimilarityScore implementation and a CharSequence \"left\" string.\n", "des": "Provides algorithms for string similarity."}
{"index": 3215, "repo": "commons-configuration2-2.9.0", "code": "package combined;\n\nInterface CombinedBuilderProperties<T>; // Definition of a properties interface for the parameters of a combined configuration builder.\nInterface ConfigurationBuilderProvider; // An interface for creating builders for configuration sources of a CombinedConfigurationBuilder.\nInterface MultiFileBuilderProperties<T>; // Definition of a properties interface for the parameters of a multiple file configuration builder.\nClass BaseConfigurationBuilderProvider; // A fully-functional, reflection-based implementation of the ConfigurationBuilderProvider interface which can deal with the default tags defining configuration sources.\nClass CombinedBuilderParametersImpl; // A specialized parameters object for a CombinedConfigurationBuilder.\nClass CombinedConfigurationBuilder; // A specialized ConfigurationBuilder implementation that creates a CombinedConfiguration from multiple configuration sources defined by an XML-based configuration definition file.\nClass CombinedConfigurationBuilderProvider; // A specialized ConfigurationBuilderProvider implementation which deals with combined configuration builders.\nClass ConfigurationDeclaration; // A specialized BeanDeclaration implementation that represents the declaration of a configuration source.\nClass FileExtensionConfigurationBuilderProvider; // A specialized implementation of ConfigurationBuilderProvider which determines the name of the result configuration class based on the extension of the file to load.\nClass MultiFileBuilderParametersImpl; // A specialized parameters object for MultiFileConfigurationBuilder.\nClass MultiFileConfigurationBuilder<T extends FileBasedConfiguration>; // A specialized ConfigurationBuilder implementation providing access to multiple file-based configurations based on a file name pattern.\nClass MultiFileConfigurationBuilderProvider; // A specialized ConfigurationBuilderProvider implementation for integrating MultiFileConfigurationBuilder with CombinedConfigurationBuilder.\nClass ReloadingCombinedConfigurationBuilder; // An extension of CombinedConfigurationBuilder which also supports reloading operations.\nClass ReloadingMultiFileConfigurationBuilder<T extends FileBasedConfiguration>; // A specialized MultiFileConfigurationBuilder implementation which adds support for reloading.\n", "des": "A package containing the implementation of the builder for combined configurations."}
{"index": 741, "repo": "spring-data-solr-4.3.15", "code": "package config;\n\nClass AbstractSolrConfiguration; // Spring Data for Apache Solr base configuration using JavaConfig.\nClass SolrRepositoryConfigExtension; // RepositoryConfigurationExtension implementation to configure Solr repository configuration support, evaluating the EnableSolrRepositories annotation or the equivalent XML element.\nAnnotation Type EnableSolrRepositories; // Annotation to enable Solr repositories.\n", "des": "Repository configuration and extension support."}
{"index": 785, "repo": "lucene-analyzers-common-8.11.2", "code": "package hy;\n\nClass ArmenianAnalyzer; // Analyzer for Armenian.\n", "des": "Analyzer for Armenian."}
{"index": 507, "repo": "commons-vfs2-2.9.0", "code": "package auth;\n\nClass StaticUserAuthenticator; // Provides always the same credentials data passed in with the constructor.\n", "des": "VFS Authentication implementation"}
{"index": 1607, "repo": "spring-data-neo4j-7.1.2", "code": "package config;\n\n@Configuration @API(status=STABLE, since=\"6.0\") public abstract class AbstractNeo4jConfig extends Object; // Base class for imperative SDN configuration using JavaConfig.\n@Configuration @API(status=STABLE, since=\"6.0\") public abstract class AbstractReactiveNeo4jConfig extends Object; // Base class for reactive SDN configuration using JavaConfig.\n@API(status=STABLE, since=\"6.0\") @Documented @Retention(RUNTIME) @Qualifier public @interface Builtin; // An internally used CDI Qualifier to mark all beans produced by our configuration support as built in.\n@Inherited @Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.neo4j.config.Neo4jAuditingRegistrar.class) public @interface EnableNeo4jAuditing; // Annotation to enable auditing for SDN entities via annotation configuration.\n@Inherited @Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.neo4j.config.ReactiveNeo4jAuditingRegistrar.class) public @interface EnableReactiveNeo4jAuditing; // Annotation to enable auditing for SDN entities using reactive infrastructure via annotation configuration.\n@API(status=STABLE, since=\"6.0\") public final class Neo4jCdiExtension extends CdiRepositoryExtensionSupport; // This CDI extension enables Spring Data Neo4j on a CDI 2.0 compatible CDI container.\n@API(status=STABLE, since=\"6.0.2\") public final class Neo4jEntityScanner extends Object; // A utility class providing a way to discover an initial entity set for a Neo4jMappingContext.\n", "des": "This package contains configuration related support classes that can be used for application specific, annotated configuration classes."}
{"index": 3416, "repo": "commons-imaging-1.0-alpha3", "code": "package xpm;\n\nClass XpmImageParser;\nClass XpmImagingParameters; // Xpm format parameters.\n", "des": "The X PixMap image format."}
{"index": 3756, "repo": "lucene-facet-9.7.0", "code": "package rangeonrange;\n\nClass DoubleRange; // Represents a double range for RangeOnRange faceting\nClass DoubleRangeOnRangeFacetCounts; // Represents counts for double range on range faceting.\nClass LongRange; // Represents a long range for RangeOnRange faceting\nClass LongRangeOnRangeFacetCounts; // Represents counts for long range on range faceting.\nClass Range; // Base class for a single labeled range.\n", "des": "Provides range on range faceting capabilities."}
{"index": 694, "repo": "jackson-databind-2.15.2", "code": "package ser;\n\npackage ser.impl; // Contains implementation classes of serialization part of data binding.\nInterface BeanPropertyFilter; // Since 2.3: use PropertyFilter instead.\nInterface ContextualSerializer; // Add-on interface that JsonSerializers can implement to get a callback that can be used to create contextual instances of serializer to use for handling properties of supported type.\nInterface PropertyFilter; // Interface that defines API for filter objects use (as configured using JsonFilter) for filtering bean properties to serialize.\nInterface ResolvableSerializer; // Interface used to indicate serializers that want to do post-processing after construction and being added to SerializerProvider, but before being used.\nInterface Serializers; // Interface that defines API for simple extensions that can provide additional serializers for various types.\nClass AnyGetterWriter; // Class similar to BeanPropertyWriter, but that will be used for serializing JsonAnyGetter annotated (Map) properties\nClass BasicSerializerFactory; // Factory class that can provide serializers for standard JDK classes, as well as custom classes that extend standard classes or implement one of \"well-known\" interfaces (such as Collection).\nClass BeanPropertyWriter; // Base bean property handler class, which implements common parts of reflection-based functionality for accessing a property value and serializing it.\nClass BeanSerializer; // Serializer class that can serialize Java objects that map to JSON Object output.\nClass BeanSerializerBuilder; // Builder class used for aggregating deserialization information about a POJO, in order to build a JsonSerializer for serializing intances.\nClass BeanSerializerFactory; // Factory class that can provide serializers for any regular Java beans (as defined by \"having at least one get method recognizable as bean accessor\" -- where Object.getClass() does not count); as well as for \"standard\" JDK types.\nClass BeanSerializerModifier; // Abstract class that defines API for objects that can be registered (for BeanSerializerFactory to participate in constructing BeanSerializer instances.\nClass ContainerSerializer<T>; // Intermediate base class for serializers used for serializing types that contain element(s) of other types, such as arrays, Collections (Lists, Sets etc) and Maps and iterable things (Iterators).\nClass DefaultSerializerProvider; // Standard implementation used by ObjectMapper: adds methods only exposed to ObjectMapper, as well as constructors.\nClass DefaultSerializerProvider.Impl; // Concrete implementation that defines factory method(s), defined as final.\n", "des": "Contains implementation classes of serialization part of data binding."}
{"index": 810, "repo": "lucene-analyzers-common-8.11.2", "code": "package synonym;\n\nClass SolrSynonymParser; // Parser for the Solr synonyms format.\nClass SynonymFilter; // Use SynonymGraphFilter instead, but be sure to also use FlattenGraphFilter at index time (not at search time) as well.\nClass SynonymFilterFactory; // Use SynonymGraphFilterFactory instead, but be sure to also use FlattenGraphFilterFactory at index time (not at search time) as well.\nClass SynonymGraphFilter; // Applies single- or multi-token synonyms from a SynonymMap to an incoming TokenStream, producing a fully correct graph output.\nClass SynonymGraphFilterFactory; // Factory for SynonymGraphFilter.\nClass SynonymMap; // A map of synonyms, keys and values are phrases.\nClass SynonymMap.Builder; // Builds an FSTSynonymMap.\nClass SynonymMap.Parser; // Abstraction for parsing synonym files.\nClass WordnetSynonymParser; // Parser for wordnet prolog format\n", "des": "Analysis components for Synonyms."}
{"index": 2390, "repo": "spring-batch-core-5.0.2", "code": "package flow;\n\npackage flow.support; // Basic implementations of flow constructs\npublic interface Flow;\npublic class FlowExecution extends Object implements Comparable<FlowExecution>;\npublic class FlowExecutionException extends Exception;\npublic class FlowExecutionStatus extends Object implements Comparable<FlowExecutionStatus>; // Represents the status of FlowExecution.\npublic interface FlowExecutor; // Context and execution strategy for FlowJob to allow it to delegate its execution step by step.\npublic interface FlowHolder; // Convenient interface for components that contain nested flows.\npublic class FlowJob extends AbstractJob; // Implementation of the Job interface that allows for complex flows of steps, rather than requiring sequential execution.\npublic class FlowStep extends AbstractStep; // A Step implementation that delegates to a Flow.\n@FunctionalInterface public interface JobExecutionDecider; // Interface allowing for programmatic access to the decision on what the status of a flow should be.\npublic class JobFlowExecutor extends Object implements FlowExecutor; // Implementation of FlowExecutor for use in components that need to execute a flow related to a JobExecution.\npublic interface State;\n", "des": "Flow related constructs including Flow interface, executors, and related exceptions"}
{"index": 551, "repo": "hadoop-common-3.3.4", "code": "package key;\n\nInterface KeyProviderCryptoExtension.CryptoExtension; // CryptoExtension is a type of Extension that exposes methods to generate EncryptedKeys and to decrypt the same.\nInterface KeyProviderDelegationTokenExtension.DelegationTokenExtension; // DelegationTokenExtension is a type of Extension that exposes methods needed to work with Delegation Tokens.\nInterface KeyProviderExtension.Extension; // A marker interface for the KeyProviderExtension subclass implement.\nClass CachingKeyProvider; // A KeyProviderExtension implementation providing a short lived cache for KeyVersions and Metadatato avoid burst of requests to hit the underlying KeyProvider.\nClass JavaKeyStoreProvider.Factory; // The factory to create JksProviders, which is used by the ServiceLoader.\nClass JavaKeyStoreProvider.KeyMetadata; // An adapter between a KeyStore Key and our Metadata.\nClass KeyProvider; // A provider of secret key material for Hadoop applications.\nClass KeyProvider.KeyVersion; // The combination of both the key version name and the key material.\nClass KeyProvider.Metadata; // Key metadata that is associated with the key.\nClass KeyProvider.Options; // Options when creating key objects.\nClass KeyProviderCryptoExtension.EncryptedKeyVersion; // An encrypted encryption key (EEK) and related information.\nClass KeyProviderDelegationTokenExtension; // A KeyProvider extension with the ability to add a renewer's Delegation Tokens to the provided Credentials.\nClass KeyProviderExtension<E extends KeyProviderExtension.Extension>; // This is a utility class used to extend the functionality of KeyProvider, that takes a KeyProvider and an Extension.\nClass KeyProviderFactory; // A factory to create a list of KeyProvider based on the path given in a Configuration.\nClass KeyShell; // This program is the CLI utility for the KeyProvider facilities in Hadoop.\nClass UserProvider.Factory;\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1798, "repo": "spring-aop-6.0.11", "code": "package intercept;\n\npublic interface ConstructorInterceptor extends Interceptor; // Intercepts the construction of a new object.\npublic interface ConstructorInvocation extends Invocation; // Description of an invocation to a constructor, given to an interceptor upon constructor-call.\npublic interface Interceptor extends Advice; // This interface represents a generic interceptor.\npublic interface Invocation extends Joinpoint; // This interface represents an invocation in the program.\npublic interface Joinpoint; // This interface represents a generic runtime joinpoint (in the AOP terminology).\n@FunctionalInterface public interface MethodInterceptor extends Interceptor; // Intercepts calls on an interface on its way to the target.\npublic interface MethodInvocation extends Invocation; // Description of an invocation to a method, given to an interceptor upon method-call.\n", "des": "The AOP Alliance reflective interception abstraction."}
{"index": 350, "repo": "lucene-analyzers-kuromoji-8.11.2", "code": "package dict;\n\nInterface Dictionary; // Dictionary interface for retrieving morphological data by id.\nClass BinaryDictionary; // Base class for a binary-encoded in-memory dictionary.\nClass CharacterDefinition; // Character category data.\nClass ConnectionCosts; // n-gram connection cost data\nClass TokenInfoDictionary; // Binary dictionary implementation for a known-word dictionary model: Words are encoded into an FST mapping to a list of wordIDs.\nClass TokenInfoFST; // Thin wrapper around an FST with root-arc caching for Japanese.\nClass UnknownDictionary; // Dictionary for unknown-word handling.\nClass UserDictionary; // Class for building a User Dictionary.\nEnum BinaryDictionary.ResourceScheme; // Used to specify where (dictionary) resources get loaded from.\n", "des": "Kuromoji dictionary implementation."}
{"index": 2762, "repo": "spring-beans-6.0.11", "code": "package support;\n\npublic abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory implements AutowireCapableBeanFactory; // Abstract bean factory superclass that implements default bean creation, with the full capabilities specified by the RootBeanDefinition class.\npublic abstract class AbstractBeanDefinition extends BeanMetadataAttributeAccessor implements BeanDefinition, Cloneable; // Base class for concrete, full-fledged BeanDefinition classes, factoring out common properties of GenericBeanDefinition, RootBeanDefinition, and ChildBeanDefinition.\npublic abstract class AbstractBeanDefinitionReader extends Object implements BeanDefinitionReader, org.springframework.core.env.EnvironmentCapable; // Abstract base class for bean definition readers which implement the BeanDefinitionReader interface.\npublic abstract class AbstractBeanFactory extends FactoryBeanRegistrySupport implements ConfigurableBeanFactory; // Abstract base class for BeanFactory implementations, providing the full capabilities of the ConfigurableBeanFactory SPI.\npublic class AutowireCandidateQualifier extends BeanMetadataAttributeAccessor; // Qualifier for resolving autowire candidates.\npublic interface AutowireCandidateResolver; // Strategy interface for determining whether a specific bean definition qualifies as an autowire candidate for a specific dependency.\npublic final class BeanDefinitionBuilder extends Object; // Programmatic means of constructing BeanDefinitions using the builder pattern.\npublic class BeanDefinitionDefaults extends Object; // A simple holder for BeanDefinition property defaults.\npublic class BeanDefinitionOverrideException extends BeanDefinitionStoreException; // Subclass of BeanDefinitionStoreException indicating an invalid override attempt: typically registering a new definition for the same bean name while DefaultListableBeanFactory.isAllowBeanDefinitionOverriding() is false.\npublic interface BeanDefinitionReader; // Simple interface for bean definition readers that specifies load methods with Resource and String location parameters.\npublic abstract class BeanDefinitionReaderUtils extends Object; // Utility methods that are useful for bean definition reader implementations.\npublic interface BeanDefinitionRegistry extends org.springframework.core.AliasRegistry; // Interface for registries that hold bean definitions, for example RootBeanDefinition and ChildBeanDefinition instances.\npublic interface BeanDefinitionRegistryPostProcessor extends BeanFactoryPostProcessor; // Extension to the standard BeanFactoryPostProcessor SPI, allowing for the registration of further bean definitions before regular BeanFactoryPostProcessor detection kicks in.\npublic class BeanDefinitionValidationException extends FatalBeanException; // Exception thrown when the validation of a bean definition failed.\n", "des": "Classes supporting the org.springframework.beans.factory package."}
{"index": 1652, "repo": "jena-core-4.9.0", "code": "package model;\n\npackage model.impl; // This package contains implementations of the interfaces defined in the .model package, eg ModelCom for Model, ResourceImpl for Resource, and so on.\npublic interface Alt extends Container; // An RDF Alternative container.\npublic class AltHasNoDefaultException extends JenaException; // Exception thrown if an Alt has no default statement.\npublic class AnonId extends Object; // System id for an anonymous node.\npublic interface Bag extends Container; // An RDF Bag container.\npublic interface Container extends Resource; // An RDF Container.\npublic class DoesNotReifyException extends JenaException; // This exception may be raised when an attempt to convert an RDFNode to a ReifiedStatement fails because the RDFNode does not correspond to a reification.\npublic class EmptyListException extends JenaException; // A exception that is thrown when an operation is attempted on an empty (nil) list that actually requires a list of length one or more.\npublic class EmptyListUpdateException extends JenaException; // Exception that is thrown when an attept is made to perform a side-effectful operation on an RDFList that is the empty list, or rdf:nil.\npublic class HasNoModelException extends JenaException; // Exception to throw when a Statement or Resource (which don't have a useful common supertype, alas) don't have an associated model.\npublic interface InfModel extends Model; // An extension to the normal Model interface that supports access to any underlying inference capability.\npublic class InvalidListException extends JenaException; // A exception that is thrown when an operation is attempted on a list that is not well-formed, and is being processed in strict mode.\npublic class ListIndexException extends JenaException; // A exception that is thrown when an operation attempts to access an indexed list element beyond the length of the list.\npublic interface Literal extends RDFNode; // An RDF Literal.\npublic class LiteralRequiredException extends JenaException; // Exception to throw when an RDFNode required to be a Literal isn't, or when a literal Node is required but a non-literal Node supplied.\npublic interface Model extends ModelCon, ModelGraphInterface, RDFReaderF, RDFWriterF, PrefixMapping, Lock; // An RDF Model.\npublic interface ModelChangedListener; // The interface for classes that listen for model-changed events.\n", "des": "A package for creating and manipulating RDF graphs."}
{"index": 3024, "repo": "spring-web-6.0.11", "code": "package client;\n\npackage client.support; // Classes supporting the org.springframework.web.client package.\npublic class DefaultResponseErrorHandler extends Object implements ResponseErrorHandler; // Spring's default implementation of the ResponseErrorHandler interface.\npublic class ExtractingResponseErrorHandler extends DefaultResponseErrorHandler; // Implementation of ResponseErrorHandler that uses HttpMessageConverters to convert HTTP error responses to RestClientExceptions.\npublic class HttpClientErrorException extends HttpStatusCodeException; // Exception thrown when an HTTP 4xx is received.\npublic static final class HttpClientErrorException.BadRequest extends HttpClientErrorException; // HttpClientErrorException for status HTTP 400 Bad Request.\npublic static final class HttpClientErrorException.Conflict extends HttpClientErrorException; // HttpClientErrorException for status HTTP 409 Conflict.\npublic static final class HttpClientErrorException.Forbidden extends HttpClientErrorException; // HttpClientErrorException for status HTTP 403 Forbidden.\npublic static final class HttpClientErrorException.Gone extends HttpClientErrorException; // HttpClientErrorException for status HTTP 410 Gone.\npublic static final class HttpClientErrorException.MethodNotAllowed extends HttpClientErrorException; // HttpClientErrorException for status HTTP 405 Method Not Allowed.\npublic static final class HttpClientErrorException.NotAcceptable extends HttpClientErrorException; // HttpClientErrorException for status HTTP 406 Not Acceptable.\npublic static final class HttpClientErrorException.NotFound extends HttpClientErrorException; // HttpClientErrorException for status HTTP 404 Not Found.\npublic static final class HttpClientErrorException.TooManyRequests extends HttpClientErrorException; // HttpClientErrorException for status HTTP 429 Too Many Requests.\npublic static final class HttpClientErrorException.Unauthorized extends HttpClientErrorException; // HttpClientErrorException for status HTTP 401 Unauthorized.\npublic static final class HttpClientErrorException.UnprocessableEntity extends HttpClientErrorException; // HttpClientErrorException for status HTTP 422 Unprocessable Entity.\npublic static final class HttpClientErrorException.UnsupportedMediaType extends HttpClientErrorException; // HttpClientErrorException for status HTTP 415 Unsupported Media Type.\npublic class HttpMessageConverterExtractor<T> extends Object implements ResponseExtractor<T>; // Response extractor that uses the given entity converters to convert the response into a type T.\npublic class HttpServerErrorException extends HttpStatusCodeException; // Exception thrown when an HTTP 5xx is received.\npublic static final class HttpServerErrorException.BadGateway extends HttpServerErrorException; // HttpServerErrorException for HTTP status 502 Bad Gateway.\npublic static final class HttpServerErrorException.GatewayTimeout extends HttpServerErrorException; // HttpServerErrorException for status HTTP 504 Gateway Timeout.\n", "des": "Core package of the client-side web support."}
{"index": 1382, "repo": "spring-boot-actuator-3.1.1", "code": "package elasticsearch;\n\npublic class ElasticsearchRestClientHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for an Elasticsearch cluster using a RestClient.\n", "des": "Actuator support for Elasticsearch."}
{"index": 222, "repo": "nutch-2.4", "code": "package util;\n\npackage util.domain; // Classes for domain name analysis.\nClass Bytes; // Utility class that handles byte arrays, conversions to/from other types, comparisons, hash code generation, manufacturing keys for HashMaps or HashSets, etc.\nClass Bytes.ByteArrayComparator; // Byte array comparator class.\nClass CommandRunner;\nClass DeflateUtils; // A collection of utility methods for working on deflated data.\nClass DomUtil;\nClass EncodingDetector; // A simple class for detecting character encodings.\nClass FSUtils; // Utility methods for common filesystem operations.\nClass GenericWritableConfigurable; // A generic Writable wrapper that can inject Configuration to Configurables\nClass GZIPUtils; // A collection of utility methods for working on GZIPed data.\nClass HadoopFSUtil;\nClass Histogram<E>;\nClass IdentityPageReducer;\nClass LockUtil; // Utility methods for handling application-level locking.\nClass MimeUtil;\nClass NodeWalker; // A utility class that allows the walking of any DOM tree using a stack instead of recursion.\nClass NutchConfiguration; // Utility to create Hadoop Configurations that include Nutch-specific resources.\nClass NutchJob; // A Job for Nutch jobs.\nClass NutchJobConf; // A JobConf for Nutch jobs.\nClass NutchTool;\nClass ObjectCache;\nClass Pair<F,S>;\nClass PrefixStringMatcher; // A class for efficiently matching Strings against a set of prefixes.\nClass StringUtil; // A collection of String processing utility methods.\nClass SuffixStringMatcher; // A class for efficiently matching Strings against a set of suffixes.\nClass TableUtil;\nClass TimingUtil;\nClass ToolUtil;\nClass TrieStringMatcher; // TrieStringMatcher is a base class for simple tree-based string matching.\nClass URLUtil; // Utility class for URL analysis\nClass WebPageWritable;\n", "des": "Miscellaneous utility classes."}
{"index": 1008, "repo": "spring-ws-3.0.10.RELEASE", "code": "package provider;\n\nInterface BindingsProvider; // Strategy for adding Bindings to a Definition.\nInterface ImportsProvider; // Strategy for adding Imports to a Definition.\nInterface MessagesProvider; // Strategy for adding Messages to a Definition.\nInterface PortTypesProvider; // Strategy for adding PortTypes to a Definition.\nInterface ServicesProvider; // Strategy for adding Services to a Definition.\nInterface TypesProvider; // Strategy for adding Types to a Definition.\nClass AbstractPortTypesProvider; // Abstract base class for PortTypesProvider implementations.\nClass DefaultConcretePartProvider; // Default implementation of the BindingsProvider and ServicesProvider interfaces.\nClass DefaultMessagesProvider; // Default implementation of the MessagesProvider.\nClass InliningXsdSchemaTypesProvider; // Implementation of TypesProvider that inlines a XsdSchema or XsdSchemaCollection into the WSDL.\nClass Soap11Provider; // Implementation of the BindingsProvider and ServicesProvider interfaces that are SOAP 1.1 specific.\nClass Soap12Provider; // Implementation of the BindingsProvider and ServicesProvider interfaces that are SOAP 1.2 specific.\nClass SoapProvider; // Implementation of the BindingsProvider and ServicesProvider interfaces that supports SOAP 1.1 and SOAP 1.2.\nClass SuffixBasedMessagesProvider; // Implementation of the MessagesProvider interface that is based on suffixes.\nClass SuffixBasedPortTypesProvider; // Implementation of the PortTypesProvider interface that is based on suffixes.\n", "des": "Provides a contribution strategy for WSDL definitions."}
{"index": 1672, "repo": "spring-boot-cli-3.1.1", "code": "package options;\n\npublic class OptionHandler extends Object; // Delegate used by OptionParsingCommand to parse options and run the command.\npublic interface OptionHelp; // Help for a specific option.\n", "des": "Support classes for handling command line options."}
{"index": 1641, "repo": "jena-core-4.9.0", "code": "package xsd;\n\npackage xsd.impl; // Provides implementations of the XSD datatype.\npublic class AbstractDateTime extends Object implements Comparable<AbstractDateTime>; // Base class for representation of XSD duration, time, date/time and related datatype instances.\npublic class IllegalDateTimeFieldException extends JenaException; // Exception thrown when attempting to access a field of an XSDDateTime object that is not legal for the current date/time type.\npublic class XSDbase64Binary extends XSDbinary; // Implement base64binary type.\npublic abstract class XSDbinary extends XSDDatatype; // Root class for XSD datatypes with binary values, xsd:hexBinary and xsd:base64Binary.\npublic class XSDDatatype extends BaseDatatype; // Representation of an XSD datatype based on the Xerces-2 XSD implementation.\npublic static class XSDDatatype.XSDGenericType extends XSDDatatype; // Generic XML Schema datatype (outside the xsd: namespace)\npublic class XSDDateTime extends AbstractDateTime; // Represent an XSD date/time value.\npublic class XSDDuration extends AbstractDateTime; // Represent an XSD duration value.\npublic class XSDhexBinary extends XSDbinary; // Implement hexbinary type.\n", "des": "Provides datatype definitions for the XML Schema datatypes support by Jena."}
{"index": 1450, "repo": "spring-data-redis-3.1.2", "code": "package util;\n\npublic abstract class AbstractSubscription extends Object implements Subscription; // Base implementation for a subscription handling the channel/pattern registration so subclasses only have to deal with the actual registration/unregistration.\npublic class ByteArraySet extends Object implements Set<ByteArrayWrapper>;\npublic class ByteArrayWrapper extends Object implements Comparable<ByteArrayWrapper>; // Simple wrapper class used for wrapping arrays so they can be used as keys inside maps.\npublic abstract class DecodeUtils extends Object; // Simple class containing various decoding utilities.\n", "des": "Internal utility package for encoding/decoding Strings to byte[] (using Base64) library."}
{"index": 2415, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package beans;\n\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.beans.BeansEndpoint.class) public class BeansEndpointAutoConfiguration extends Object; // Auto-configuration for the BeansEndpoint.\n", "des": "Auto-configuration for actuator Spring Bean concerns."}
{"index": 1066, "repo": "avro-1.11.2", "code": "package util;\n\nClass ByteBufferInputStream; // Utility to present ByteBuffer data as an InputStream.\nClass ByteBufferOutputStream; // Utility to collect data written to an OutputStream in ByteBuffers.\nClass ClassUtils;\nClass MapEntry<K,V>; // An implementation of Map.Entry with well-defined member names.\nClass MapUtil;\nClass NonCopyingByteArrayOutputStream; // Utility to make data written to an ByteArrayOutputStream directly available as a ByteBuffer.\nClass RandomData; // Generates schema data as Java objects with random values.\nClass ReusableByteArrayInputStream;\nClass ReusableByteBufferInputStream;\nClass SchemaUtil;\nClass Utf8; // A Utf8 string.\nClass WeakIdentityHashMap<K,V>; // Implements a combination of WeakHashMap and IdentityHashMap.\n", "des": "Common utility classes."}
{"index": 2553, "repo": "pulsar-common-3.0.0", "code": "package intercept;\n\npublic class AppendBrokerTimestampMetadataInterceptor extends Object implements BrokerEntryMetadataInterceptor; // A plugin interface that allows you to intercept the client requests to the Pulsar brokers and add timestamp from broker side metadata for each entry.\npublic class AppendIndexMetadataInterceptor extends Object implements BrokerEntryMetadataInterceptor;\n@LimitedPrivate @Stable public interface BrokerEntryMetadataInterceptor; // A plugin interface that allows you to intercept the client requests to the Pulsar brokers and add metadata for each entry from broker side.\npublic class BrokerEntryMetadataUtils<T> extends Object; // A tool class for loading BrokerEntryMetadataInterceptor classes.\npublic class InterceptException extends Exception; // Base exception for the broker interceptor.\npublic interface ManagedLedgerPayloadProcessor;\npublic static interface ManagedLedgerPayloadProcessor.Processor;\n", "des": "Classes needed for broker interceptor."}
{"index": 2824, "repo": "groovy-xml-4.0.13", "code": "package xml;\n\npackage xml.dom; // Groovy XML Dom processing classes.\npackage xml.slurpersupport; // Helper classes for XmlSlurper.\npackage xml.streamingmarkupsupport; // XmlBuilder related classes to support streaming XML.\npublic class DOMBuilder extends groovy.util.BuilderSupport; // A helper class for creating a W3C DOM tree\npublic class FactorySupport extends Object; // Support class for creating XML Factories\npublic class MarkupBuilder extends groovy.util.BuilderSupport; // A helper class for creating XML or HTML markup.\npublic static enum MarkupBuilder.CharFilter extends Enum<MarkupBuilder.CharFilter>;\npublic static class MarkupBuilder.DefaultXmlEscapingFunction extends Object implements Function<Character,Optional<String>>;\npublic class MarkupBuilderHelper extends Object; // A helper class for MarkupBuilder.\npublic class Namespace extends Object; // A simple helper class which acts as a factory of QName instances.\npublic class NamespaceBuilder extends Object; // A helper class for creating namespaces for GroovyMarkup\npublic class NamespaceBuilderSupport extends groovy.util.BuilderSupport; // A helper class for creating namespaced GroovyMarkup\npublic class SAXBuilder extends groovy.util.BuilderSupport; // A builder for generating W3C SAX events.\npublic class XmlNodePrinter extends Object; // Prints a groovy.util.Node (as used with XmlParser) including all children in XML format.\nprotected static class XmlNodePrinter.NamespaceContext extends Object;\npublic class XmlParser extends Object implements ContentHandler; // A helper class for parsing XML into a tree of Node instances for a simple way of processing XML.\npublic class XmlSlurper extends DefaultHandler; // Parse XML into a document tree that may be traversed similar to XPath expressions.\npublic class XmlUtil extends Object; // Used for pretty printing XML content and other XML related utilities.\n", "des": "Groovy markup builder classes for working with SAX and W3C DOM and Groovy markup."}
{"index": 1825, "repo": "pulsar-client-original-3.0.0", "code": "package transaction;\n\npublic interface TransactionBufferHandler; // Interface of transaction buffer handler.\npublic class TransactionBuilderImpl extends Object implements TransactionBuilder; // The default implementation of transaction builder to build transactions.\npublic class TransactionCoordinatorClientImpl extends Object implements TransactionCoordinatorClient; // Transaction coordinator client based topic assigned.\npublic class TransactionImpl extends Object implements Transaction, io.netty.util.TimerTask; // The default implementation of Transaction.\n", "des": "Transaction client implementation."}
{"index": 2495, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package scheduling;\n\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint.class) public class ScheduledTasksEndpointAutoConfiguration extends Object; // Auto-configuration for ScheduledTasksEndpoint.\n", "des": "Auto-configuration for actuator scheduling concerns."}
{"index": 1535, "repo": "spring-context-6.0.11", "code": "package naming;\n\npublic class IdentityNamingStrategy extends Object implements ObjectNamingStrategy; // An implementation of the ObjectNamingStrategy interface that creates a name based on the identity of a given instance.\npublic class KeyNamingStrategy extends Object implements ObjectNamingStrategy, org.springframework.beans.factory.InitializingBean; // ObjectNamingStrategy implementation that builds ObjectName instances from the key used in the \"beans\" map passed to MBeanExporter.\npublic class MetadataNamingStrategy extends Object implements ObjectNamingStrategy, org.springframework.beans.factory.InitializingBean; // An implementation of the ObjectNamingStrategy interface that reads the ObjectName from the source-level metadata.\n@FunctionalInterface public interface ObjectNamingStrategy; // Strategy interface that encapsulates the creation of ObjectName instances.\npublic interface SelfNaming; // Interface that allows infrastructure components to provide their own ObjectNames to the MBeanExporter.\n", "des": "Provides a strategy for ObjectName creation."}
{"index": 3558, "repo": "guava-32.1.1-jre", "code": "package html;\n\nClass HtmlEscapers; // Escaper instances suitable for strings to be included in HTML attribute values and most elements' text contents.\n", "des": "Escapers for HTML."}
{"index": 2644, "repo": "spring-data-cassandra-4.1.2", "code": "package cassandra;\n\npackage cassandra.config; // Spring Data Cassandra factory beans and configuration.\npackage cassandra.core; // Apache Cassandra core support.\npackage cassandra.observability; // Infrastructure to provide driver observability using Micrometer.\npackage cassandra.repository; // Apache Cassandra specific repository implementation.\npackage cassandra.util; // Map and SpEL utility infrastructure.\npublic class CassandraAuthenticationException extends PermissionDeniedDataAccessException; // Spring data access exception for a Cassandra authentication failure.\npublic class CassandraConnectionFailureException extends DataAccessResourceFailureException; // Spring data access exception for Cassandra when no host is available.\npublic class CassandraInsufficientReplicasAvailableException extends TransientDataAccessException; // Spring data access exception for Cassandra when insufficient replicas are available for a given consistency level.\npublic class CassandraInternalException extends DataAccessException; // Spring data access exception for a Cassandra internal error.\npublic class CassandraInvalidConfigurationInQueryException extends InvalidDataAccessApiUsageException; // Spring data access exception for a Cassandra query that is syntactically correct but has an invalid configuration clause.\npublic class CassandraInvalidQueryException extends InvalidDataAccessApiUsageException; // Spring data access exception for a Cassandra query that's syntactically correct but invalid.\npublic class CassandraKeyspaceExistsException extends CassandraSchemaElementExistsException; // Spring data access exception for Cassandra when a keyspace being created already exists.\npublic final class CassandraManagedTypes extends Object implements ManagedTypes; // Cassandra-specific extension to ManagedTypes.\npublic class CassandraQuerySyntaxException extends InvalidDataAccessApiUsageException; // Spring data access exception for a Cassandra query syntax error.\npublic class CassandraReadTimeoutException extends QueryTimeoutException; // Cassandra-specific exception for a server-side timeout during a read query.\npublic class CassandraSchemaElementExistsException extends NonTransientDataAccessException; // Spring data access exception for when Cassandra schema element being created already exists.\n@Deprecated public static enum CassandraSchemaElementExistsException.ElementType extends Enum<CassandraSchemaElementExistsException.ElementType>;\npublic class CassandraTableExistsException extends CassandraSchemaElementExistsException; // Spring data access exception for when a Cassandra table being created already exists.\npublic class CassandraTraceRetrievalException extends TransientDataAccessException; // Spring data access exception for a Cassandra trace retrieval exception.\npublic class CassandraTruncateException extends TransientDataAccessException; // Spring data access exception for a Cassandra truncate exception.\n", "des": "Spring Data's Cassandra abstraction."}
{"index": 254, "repo": "nutch-2.4", "code": "package basic;\n\nClass BasicURLNormalizer; // Converts URLs to a normal form: remove dot segments in path: /./ or /../ remove default ports, e.g.\n", "des": "URL normalizer performing basic normalizations: remove default ports and dot segments in path."}
{"index": 1169, "repo": "commons-math3-3.6.1", "code": "package partitioning;\n\npackage partitioning.utilities; // This package provides multidimensional ordering features for partitioning.\nInterface BSPTree.LeafMerger<S extends Space>; // This interface gather the merging operations between a BSP tree leaf and another BSP tree.\nInterface BSPTree.VanishingCutHandler<S extends Space>; // This interface handles the corner cases when an internal node cut sub-hyperplane vanishes.\nInterface BSPTreeVisitor<S extends Space>; // This interface is used to visit BSP tree nodes.\nInterface Embedding<S extends Space,T extends Space>; // This interface defines mappers between a space and one of its sub-spaces.\nInterface Hyperplane<S extends Space>; // This interface represents an hyperplane of a space.\nInterface Region<S extends Space>; // This interface represents a region of a space as a partition.\nInterface SubHyperplane<S extends Space>; // This interface represents the remaining parts of an hyperplane after other parts have been chopped off.\nInterface Transform<S extends Space,T extends Space>; // This interface represents an inversible affine transform in a space.\nClass AbstractRegion<S extends Space,T extends Space>; // Abstract class for all regions, independently of geometry type or dimension.\nClass AbstractSubHyperplane<S extends Space,T extends Space>; // This class implements the dimension-independent parts of SubHyperplane.\nClass BoundaryAttribute<S extends Space>; // Class holding boundary attributes.\nClass BoundaryProjection<S extends Space>; // Class holding the result of point projection on region boundary.\nClass BSPTree<S extends Space>; // This class represent a Binary Space Partition tree.\nClass NodesSet<S extends Space>; // Set of BSP tree nodes.\nClass RegionFactory<S extends Space>; // This class is a factory for Region.\nClass SubHyperplane.SplitSubHyperplane<U extends Space>; // Class holding the results of the split method.\nEnum BSPTreeVisitor.Order; // Enumerate for visit order with respect to plus sub-tree, minus sub-tree and cut sub-hyperplane.\nEnum Region.Location; // Enumerate for the location of a point with respect to the region.\n", "des": "This package provides classes to implement Binary Space Partition trees."}
{"index": 3083, "repo": "spring-ws-core-4.0.5", "code": "package support;\n\npublic class SaajContentHandler extends Object implements ContentHandler; // SAX ContentHandler that transforms callback calls to the creation of SAAJ Nodes and SOAPElements.\npublic abstract class SaajUtils extends Object; // Collection of generic utility methods to work with SAAJ.\npublic class SaajXmlReader extends org.springframework.xml.sax.AbstractXmlReader; // SAX XMLReader that reads from a SAAJ Node.\n", "des": "Support classes for working with the SOAP with Attachments API for Java (SAAJ)."}
{"index": 3353, "repo": "opencms-core-15.0", "code": "package login;\n\nClass CmsChangePasswordDialog; // Dialog used to change the password.\nClass CmsForgotPasswordDialog; // Dialog to request a password reset link if you forgot your passsword.\nClass CmsInactiveUserMessages; // Helper class for getting localized messages for the 'lock inactive users' feature.\nClass CmsLockInactiveAccountsJob; // Scheduled job for locking user accounts which have not been logged into for longer than the configured time.\nClass CmsLoginController; // Controller class which actually handles the login dialog logic.\nClass CmsLoginController.CmsLoginTargetInfo; // Represents the login target information.\nClass CmsLoginController.LoginContext; // The login context.\nClass CmsLoginController.UserAgreementHelper; // Helper subclass of CmsLoginUserAgreement which can be used without a page context.\nClass CmsLoginForm; // Login form.\nClass CmsLoginHelper; // Utility to login users to the OpenCms workplace.\nClass CmsLoginHelper.LoginParameters; // Holds the current login parameters.\nClass CmsLoginOuSelector; // Widget used to allow the user to search and select an organizational unit.\nClass CmsLoginPasswordField; // Password field for the login dialog.\nClass CmsLoginTargetOpener; // Server side component used to open the login target for a logged in user.\nClass CmsLoginUI; // The UI class for the Vaadin-based login dialog.\nClass CmsLoginUI.Parameters; // Parameters which are initialized during the initial page load of the login dialog.\nClass CmsLoginUserField; // Widget for the user name field of the login dialog.\nClass CmsPasswordChangeNotification; // Notification used to send password change link to user.\nClass CmsPasswordForm; // The change password form.\nClass CmsSecondFactorDialog; // Dialog used to ask the user for a verification code generated from his second factor, using an authenticator app.\nClass CmsSecondFactorSetupDialog; // Dialog used to set up two-factor authentication for a user.\nClass CmsSetPasswordDialog; // Dialog used to change the password.\nClass CmsTokenValidator; // Helper class for dealing with authorization tokens for the 'forgot password' functionality.\n", "des": "Contains the user interface components for the Vaadin-based login dialog."}
{"index": 2667, "repo": "spring-data-cassandra-4.1.2", "code": "package support;\n\npublic class CassandraRepositoryFactory extends RepositoryFactorySupport; // Factory to create CassandraRepository instances.\npublic class CassandraRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends RepositoryFactoryBeanSupport<T,S,ID>; // FactoryBean to create CassandraRepository instances.\npublic class MappingCassandraEntityInformation<T,ID> extends PersistentEntityInformation<T,ID> implements CassandraEntityInformation<T,ID>; // CassandraEntityInformation implementation using a CassandraPersistentEntity instance to lookup the necessary information.\npublic class ReactiveCassandraRepositoryFactory extends ReactiveRepositoryFactorySupport; // Factory to create ReactiveCassandraRepository instances.\npublic class ReactiveCassandraRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends RepositoryFactoryBeanSupport<T,S,ID>; // FactoryBean to create ReactiveCassandraRepository instances.\npublic class SimpleCassandraRepository<T,ID> extends Object implements CassandraRepository<T,ID>; // Repository base implementation for Cassandra.\npublic class SimpleReactiveCassandraRepository<T,ID> extends Object implements ReactiveCassandraRepository<T,ID>; // Reactive repository base implementation for Cassandra.\n", "des": "Support infrastructure for query derivation of Apache Cassandra specific repositories."}
{"index": 3771, "repo": "lucene-analysis-common-9.7.0", "code": "package commongrams;\n\nClass CommonGramsFilter; // Construct bigrams for frequently occurring terms while indexing.\nClass CommonGramsFilterFactory; // Constructs a CommonGramsFilter.\nClass CommonGramsQueryFilter; // Wrap a CommonGramsFilter optimizing phrase queries by only returning single words when they are not a member of a bigram.\nClass CommonGramsQueryFilterFactory; // Construct CommonGramsQueryFilter.\n", "des": "Construct n-grams for frequently occurring terms and phrases."}
{"index": 1645, "repo": "jena-core-4.9.0", "code": "package compose;\n\npublic abstract class CompositionBase extends GraphBase; // Base class for graphs that are composed of multiple sub-graphs.\npublic class Delta extends CompositionBase implements Graph; // Graph operation for wrapping a base graph and leaving it unchanged while recording all the attempted updates for later access.\npublic class Difference extends Dyadic implements Graph; // Class representing the dynamic set difference L - R of two graphs.\npublic class DisjointUnion extends Dyadic; // DisjointUnion - a version of Union that assumes the graphs are disjoint, and hence that find need not do duplicate-removal.\npublic abstract class Dyadic extends CompositionBase; // Base class for the two-operand composition operations; has two graphs L and R\npublic class Intersection extends Dyadic implements Graph; // The dynamic intersection of two graphs L and R.\npublic class MultiUnion extends Polyadic; // A graph implementation that presents the union of zero or more subgraphs, one of which is distinguished as the updateable graph.\npublic abstract class Polyadic extends CompositionBase; // A base class for composition graphs that are composed from zero or more sub-graphs (thus providing a basis for polyadic composition operators).\npublic class PolyadicPrefixMappingImpl extends PrefixMappingImpl implements PrefixMapping;\npublic class Union extends Dyadic implements Graph; // A class representing the dynamic union of two graphs.\n", "des": "This package defines simple composite graphs - union, intersection, difference, and update-tracking."}
{"index": 170, "repo": "ignite-core-2.15.0", "code": "package top;\n\nClass GridTopologyCommandHandler; // Command handler for API requests.\n", "des": "REST topology commands."}
{"index": 1972, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package reactive;\n\n@FunctionalInterface public interface JwkSetUriReactiveJwtDecoderBuilderCustomizer; // Callback interface for the customization of the NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder used to create the auto-configured ReactiveJwtDecoder for a JWK set URI that has been configured directly or obtained through an issuer URI.\n@AutoConfiguration(before={ReactiveSecurityAutoConfiguration.class,ReactiveUserDetailsServiceAutoConfiguration.class}) @EnableConfigurationProperties(OAuth2ResourceServerProperties.class) @ConditionalOnClass(org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity.class) @ConditionalOnWebApplication(type=REACTIVE) @Import({org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerConfiguration.JwtConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerConfiguration.OpaqueTokenConfiguration.class}) public class ReactiveOAuth2ResourceServerAutoConfiguration extends Object; // Auto-configuration for Reactive OAuth2 resource server support.\n", "des": "Auto-configuration for Spring Security's Reactive OAuth2 resource server."}
{"index": 2921, "repo": "groovy-4.0.13", "code": "package security;\n\npublic final class GroovyCodeSourcePermission extends BasicPermission; // Permission required to explicitly specify a codebase for a groovy script whose codebase cannot be determined.\n", "des": "Security-related classes"}
{"index": 3, "repo": "connect-api-3.5.0", "code": "package data;\n\nInterface Schema; // Definition of an abstract data type.\nClass ConnectSchema;\nClass Date; // A date representing a calendar day with no time of day or timezone.\nClass Decimal; // An arbitrary-precision signed decimal number.\nClass Field; // A field in a Struct, consisting of a field name, index, and Schema for the field value.\nClass SchemaAndValue; // A composite containing a Schema and associated value\nClass SchemaBuilder; // SchemaBuilder provides a fluent API for constructing Schema objects.\nClass SchemaProjector; // SchemaProjector is a utility to project a value between compatible schemas and throw exceptions when non compatible schemas are provided.\nClass Struct; // A structured record containing a set of named fields with values, each field using an independent Schema.\nClass Time; // A time representing a specific point in a day, not tied to any specific date.\nClass Timestamp; // A timestamp representing an absolute time, without timezone information.\nClass Values; // Utility for converting from one Connect value to a different form.\nEnum Schema.Type; // The type of a schema.\n", "des": "Provides classes for representing data and schemas handled by Connect."}
{"index": 3324, "repo": "opencms-core-15.0", "code": "package cacheadmin;\n\nInterface CmsFlushCache.I_CloseableDialog; // Interface for the dialogs.\nClass CmsCacheAdminApp; // Vaadin app for Cache Administration.\nClass CmsCacheAdminConfiguration; // Configuration for Cache Administration vaadin-tool.\nClass CmsCacheFolder; // Class for the Cache folder.\nClass CmsCacheViewApp; // Class for the app which shows the content of caches.\nClass CmsCacheViewFlexConfiguration; // Configuration class for the view flex cache app.\nClass CmsCacheViewImageConfiguration; // Configuration class for the image cache view app.\nClass CmsConfirmSimpleFlushDialog; // Dialog to confirm flush without any options.\nClass CmsFlexCacheCleanDialog; // Dialog for clean flex cache.\nClass CmsFlexCacheTable; // Table showong content of flex cache.\nClass CmsFlushButtonHolderDialog; // Dialog for the flush actions.\nClass CmsFlushCache; // Vaadin Layout with Buttons to clear the different types of cache.\nClass CmsImageCacheCleanDialog; // Dialog to clean Image Cache.\nClass CmsImageCacheHelper; // Image Cache helper.\nClass CmsImageCacheHolder; // Helper class for getting information about cached images.\nClass CmsImageCacheInput; // class for the input dialog to search for cached images.\nClass CmsImageCacheTable; // Table to show entries of image cache.\nClass CmsImageVariationsTable; // Table showing information about variations of images.\nClass CmsVariationBean; // Bean for Variations im image resources.\nClass CmsVariationsDialog; // Class for the dialog to show variations of flex cache and image cache.\nEnum CmsCacheViewApp.Mode; // Modes to run this app.\n", "des": "Contains classes of the cache admin app."}
{"index": 1397, "repo": "spring-boot-actuator-3.1.1", "code": "package env;\n\n@Endpoint(id=\"env\") public class EnvironmentEndpoint extends Object; // @Endpoint to expose environment information.\npublic static final class EnvironmentEndpoint.EnvironmentDescriptor extends Object implements OperationResponseBody; // Description of an Environment.\npublic static final class EnvironmentEndpoint.EnvironmentEntryDescriptor extends Object; // Description of an entry of the Environment.\npublic static final class EnvironmentEndpoint.PropertySourceDescriptor extends Object; // Description of a PropertySource.\npublic static final class EnvironmentEndpoint.PropertySourceEntryDescriptor extends Object; // Description of a particular entry of PropertySource.\npublic static final class EnvironmentEndpoint.PropertySummaryDescriptor extends Object; // Description of a particular entry of the Environment.\npublic static final class EnvironmentEndpoint.PropertyValueDescriptor extends Object; // Description of a property's value, including its origin if available.\n@EndpointWebExtension(endpoint=EnvironmentEndpoint.class) public class EnvironmentEndpointWebExtension extends Object; // @EndpointWebExtension for the EnvironmentEndpoint.\n", "des": "Actuator support for Spring Framework's Environment."}
{"index": 3561, "repo": "guava-32.1.1-jre", "code": "package net;\n\nClass HostAndPort; // An immutable representation of a host and port.\nClass HostSpecifier; // A syntactically valid host specifier, suitable for use in a URI.\nClass HttpHeaders; // Contains constant definitions for the HTTP header field names.\nClass HttpHeaders.ReferrerPolicyValues; // Values for the Referrer-Policy header.\nClass InetAddresses; // Static utility methods pertaining to InetAddress instances.\nClass InetAddresses.TeredoInfo; // A simple immutable data class to encapsulate the information to be found in a Teredo address.\nClass InternetDomainName; // An immutable well-formed internet domain name, such as com or foo.co.uk.\nClass MediaType; // Represents an Internet Media Type (also known as a MIME Type or Content Type).\nClass PercentEscaper; // A UnicodeEscaper that escapes some set of Java characters using a UTF-8 based percent encoding scheme.\nClass UrlEscapers; // Escaper instances suitable for strings to be included in particular sections of URLs.\n", "des": "Utility methods and classes for networking (such as IP addresses and domain names)."}
{"index": 1898, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package amqp;\n\npublic abstract class AbstractConnectionFactoryConfigurer<T extends org.springframework.amqp.rabbit.connection.AbstractConnectionFactory> extends Object; // Configures Rabbit ConnectionFactory with sensible defaults.\npublic abstract class AbstractRabbitListenerContainerFactoryConfigurer<T extends org.springframework.amqp.rabbit.config.AbstractRabbitListenerContainerFactory<?>> extends Object; // Configure RabbitListenerContainerFactory with sensible defaults.\npublic class CachingConnectionFactoryConfigurer extends AbstractConnectionFactoryConfigurer<org.springframework.amqp.rabbit.connection.CachingConnectionFactory>; // Configures Rabbit CachingConnectionFactory with sensible defaults.\n@FunctionalInterface public interface ConnectionFactoryCustomizer; // Callback interface that can be implemented by beans wishing to customize the auto-configured RabbitMQ ConnectionFactory.\npublic final class DirectRabbitListenerContainerFactoryConfigurer extends AbstractRabbitListenerContainerFactoryConfigurer<org.springframework.amqp.rabbit.config.DirectRabbitListenerContainerFactory>; // Configure DirectRabbitListenerContainerFactoryConfigurer with sensible defaults.\n@FunctionalInterface public interface EnvironmentBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the auto-configured Environment that is created by an EnvironmentBuilder.\n@AutoConfiguration @ConditionalOnClass({org.springframework.amqp.rabbit.core.RabbitTemplate.class,com.rabbitmq.client.Channel.class}) @EnableConfigurationProperties(RabbitProperties.class) @Import({org.springframework.boot.autoconfigure.amqp.RabbitAnnotationDrivenConfiguration.class,org.springframework.boot.autoconfigure.amqp.RabbitStreamConfiguration.class}) public class RabbitAutoConfiguration extends Object; // Auto-configuration for RabbitTemplate.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.amqp.rabbit.core.RabbitMessagingTemplate.class) @ConditionalOnMissingBean(org.springframework.amqp.rabbit.core.RabbitMessagingTemplate.class) @Import(RabbitTemplateConfiguration.class) protected static class RabbitAutoConfiguration.MessagingTemplateConfiguration extends Object;\n", "des": "Auto-configuration for RabbitMQ."}
{"index": 3033, "repo": "spring-web-6.0.11", "code": "package filter;\n\npackage filter.reactive; // WebFilter implementations for use in reactive web applications.\npublic abstract class AbstractRequestLoggingFilter extends OncePerRequestFilter; // Base class for Filters that perform logging operations before and after a request is processed.\npublic class CharacterEncodingFilter extends OncePerRequestFilter; // Servlet Filter that allows one to specify a character encoding for requests.\npublic class CommonsRequestLoggingFilter extends AbstractRequestLoggingFilter; // Simple request logging filter that writes the request URI (and optionally the query string) to the Commons Log.\npublic class CompositeFilter extends Object implements Filter; // A generic composite servlet Filter that just delegates its behavior to a chain (list) of user-supplied filters, achieving the functionality of a FilterChain, but conveniently using only Filter instances.\npublic class CorsFilter extends OncePerRequestFilter; // Filter to handle CORS pre-flight requests and intercept CORS simple and actual requests with a CorsProcessor, and to update the response, e.g.\npublic class DelegatingFilterProxy extends GenericFilterBean; // Proxy for a standard Servlet Filter, delegating to a Spring-managed bean that implements the Filter interface.\npublic class FormContentFilter extends OncePerRequestFilter; // Filter that parses form data for HTTP PUT, PATCH, and DELETE requests and exposes it as Servlet request parameters.\npublic class ForwardedHeaderFilter extends OncePerRequestFilter; // Extract values from \"Forwarded\" and \"X-Forwarded-*\" headers, wrap the request and response, and make they reflect the client-originated protocol and address in the following methods: getServerName() getServerPort() getScheme() isSecure() sendRedirect(String).\npublic abstract class GenericFilterBean extends Object implements Filter, org.springframework.beans.factory.BeanNameAware, org.springframework.context.EnvironmentAware, org.springframework.core.env.EnvironmentCapable, ServletContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Simple base implementation of Filter which treats its config parameters (init-param entries within the filter tag in web.xml) as bean properties.\npublic class HiddenHttpMethodFilter extends OncePerRequestFilter; // Filter that converts posted method parameters into HTTP methods, retrievable via HttpServletRequest.getMethod().\n", "des": "Provides generic filter base classes allowing for bean-style configuration."}
{"index": 670, "repo": "commons-lang3-3.12.0", "code": "package function;\n\nInterface FailableBiConsumer<T,U,E extends Throwable>; // A functional interface like BiConsumer that declares a Throwable.\nInterface FailableBiFunction<T,U,R,E extends Throwable>; // A functional interface like BiFunction that declares a Throwable.\nInterface FailableBiPredicate<T,U,E extends Throwable>; // A functional interface like BiPredicate that declares a Throwable.\nInterface FailableBooleanSupplier<E extends Throwable>; // A functional interface like BooleanSupplier that declares a Throwable.\nInterface FailableCallable<R,E extends Throwable>; // A functional interface like Callable that declares a Throwable.\nInterface FailableConsumer<T,E extends Throwable>; // A functional interface like Consumer that declares a Throwable.\nInterface FailableDoubleBinaryOperator<E extends Throwable>; // A functional interface like DoubleBinaryOperator that declares a Throwable.\nInterface FailableDoubleConsumer<E extends Throwable>; // A functional interface like DoubleConsumer that declares a Throwable.\nInterface FailableDoubleFunction<R,E extends Throwable>; // A functional interface like DoubleFunction that declares a Throwable.\nInterface FailableDoublePredicate<E extends Throwable>; // A functional interface like DoublePredicate that declares a Throwable.\nInterface FailableDoubleSupplier<E extends Throwable>; // A functional interface like DoubleSupplier that declares a Throwable.\nInterface FailableDoubleToIntFunction<E extends Throwable>; // A functional interface like DoubleToIntFunction that declares a Throwable.\nInterface FailableDoubleToLongFunction<E extends Throwable>; // A functional interface like DoubleToLongFunction that declares a Throwable.\nInterface FailableDoubleUnaryOperator<E extends Throwable>; // A functional interface like DoubleUnaryOperator that declares a Throwable.\nInterface FailableFunction<T,R,E extends Throwable>; // A functional interface like Function that declares a Throwable.\nInterface FailableIntBinaryOperator<E extends Throwable>; // A functional interface like IntBinaryOperator that declares a Throwable.\nInterface FailableIntConsumer<E extends Throwable>; // A functional interface like IntConsumer that declares a Throwable.\nInterface FailableIntFunction<R,E extends Throwable>; // A functional interface like IntFunction that declares a Throwable.\nInterface FailableIntPredicate<E extends Throwable>; // A functional interface like IntPredicate that declares a Throwable.\n", "des": "Provides functional interfaces to complement those in java.lang.function and utilities for working with Java 8 lambdas."}
{"index": 3168, "repo": "gson-2.10.1", "code": "package reflect;\n\nClass TypeToken<T>; // Represents a generic type T.\n", "des": "This package provides utility classes for finding type information for generic types."}
{"index": 1849, "repo": "spring-test-6.0.11", "code": "package transaction;\n\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface AfterTransaction; // Test annotation which indicates that the annotated void method should be executed after a transaction is ended for a test method configured to run within a transaction via Spring's @Transactional annotation.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface BeforeTransaction; // Test annotation which indicates that the annotated void method should be executed before a transaction is started for a test method configured to run within a transaction via Spring's @Transactional annotation.\npublic abstract class TestContextTransactionUtils extends Object; // Utility methods for working with transactions and data access related beans within the Spring TestContext Framework.\npublic final class TestTransaction extends Object; // TestTransaction provides a collection of static utility methods for programmatic interaction with test-managed transactions within test methods, before methods, and after methods.\npublic class TransactionalTestExecutionListener extends AbstractTestExecutionListener; // TestExecutionListener that provides support for executing tests within test-managed transactions by honoring Spring's @Transactional annotation.\n", "des": "Transactional support classes for the Spring TestContext Framework."}
{"index": 1216, "repo": "commons-math3-3.6.1", "code": "package util;\n\nInterface DoubleArray; // Provides a standard interface for double arrays.\nInterface Incrementor.MaxCountExceededCallback; // Defines a method to be called at counter exhaustion.\nInterface IntegerSequence.Incrementor.MaxCountExceededCallback; // Defines a method to be called at counter exhaustion.\nInterface IterationListener; // The listener interface for receiving events occurring in an iterative algorithm.\nInterface MathArrays.Function; // Real-valued function that operate on an array or a part of it.\nInterface NumberTransformer; // Subclasses implementing this interface can transform Objects to doubles.\nInterface PivotingStrategyInterface; // A strategy to pick a pivoting index of an array for doing partitioning.\nClass ArithmeticUtils; // Some useful, arithmetics related, additions to the built-in functions in Math.\nClass BigReal; // Arbitrary precision decimal number.\nClass BigRealField; // Representation of real numbers with arbitrary precision field.\nClass CentralPivotingStrategy; // A mid point strategy based on the average of begin and end indices.\nClass Combinations; // Utility to create combinations (n, k) of k elements in a set of n elements.\nClass CombinatoricsUtils; // Combinatorial utilities.\nClass CompositeFormat; // Base class for formatters of composite objects (complex numbers, vectors ...).\nClass ContinuedFraction; // Provides a generic means to evaluate continued fractions.\nClass Decimal64; // This class wraps a double value in an object.\nClass Decimal64Field; // The field of double precision floating-point numbers.\nClass DefaultTransformer; // A Default NumberTransformer for java.lang.Numbers and Numeric Strings.\nClass FastMath; // Faster, more accurate, portable alternative to Math and StrictMath for large scale computation.\nClass Incrementor; // Use IntegerSequence.Incrementor instead.\nClass IntegerSequence; // Provides a sequence of integers.\nClass IntegerSequence.Incrementor; // Utility that increments a counter until a maximum is reached, at which point, the instance will by default throw a MaxCountExceededException.\nClass IntegerSequence.Range; // Generates a sequence of integers.\nClass IterationEvent; // The root class from which all events occurring while running an IterationManager should be derived.\nClass IterationManager; // This abstract class provides a general framework for managing iterative algorithms.\n", "des": "Convenience routines and common data structures used throughout the commons-math library."}
{"index": 2063, "repo": "spring-webmvc-6.0.11", "code": "package servlet;\n\npackage servlet.config; // Defines the XML configuration namespace for Spring MVC.\npackage servlet.function; // Provides the types that make up Spring's functional web framework for Servlet environments.\npackage servlet.handler; // Provides standard HandlerMapping implementations, including abstract base classes for custom implementations.\npackage servlet.i18n; // Locale support classes for Spring's web MVC framework.\npackage servlet.mvc; // Standard controller implementations for the Servlet MVC framework that comes with Spring.\npackage servlet.resource; // Support classes for serving static resources.\npackage servlet.support; // Support classes for Spring's web MVC framework.\npackage servlet.tags; // This package contains Spring's JSP standard tag library for JSP 2.0+.\npackage servlet.theme; // Theme support classes for Spring's web MVC framework.\npackage servlet.view; // Provides standard View and ViewResolver implementations, including abstract base classes for custom implementations.\npublic interface AsyncHandlerInterceptor extends HandlerInterceptor; // Extends HandlerInterceptor with a callback method invoked after the start of asynchronous request handling.\npublic class DispatcherServlet extends FrameworkServlet; // Central dispatcher for HTTP request handlers/controllers, e.g.\npublic final class FlashMap extends HashMap<String,Object> implements Comparable<FlashMap>; // A FlashMap provides a way for one request to store attributes intended for use in another.\npublic interface FlashMapManager; // A strategy interface for retrieving and saving FlashMap instances.\npublic abstract class FrameworkServlet extends HttpServletBean implements org.springframework.context.ApplicationContextAware; // Base servlet for Spring's web framework.\npublic interface HandlerAdapter; // MVC framework SPI, allowing parameterization of the core MVC workflow.\npublic interface HandlerExceptionResolver; // Interface to be implemented by objects that can resolve exceptions thrown during handler mapping or execution, in the typical case to error views.\npublic class HandlerExecutionChain extends Object; // Handler execution chain, consisting of handler object and any handler interceptors.\npublic interface HandlerInterceptor; // Workflow interface that allows for customized handler execution chains.\npublic interface HandlerMapping; // Interface to be implemented by objects that define a mapping between requests and handler objects.\n", "des": "Provides servlets that integrate with the application context infrastructure, and the core interfaces and classes for the Spring web MVC framework."}
{"index": 1523, "repo": "spring-context-6.0.11", "code": "package money;\n\npublic class CurrencyUnitFormatter extends Object implements Formatter<javax.money.CurrencyUnit>; // Formatter for JSR-354 CurrencyUnit values, from and to currency code Strings.\npublic class Jsr354NumberFormatAnnotationFormatterFactory extends EmbeddedValueResolutionSupport implements AnnotationFormatterFactory<NumberFormat>; // Formats MonetaryAmount fields annotated with Spring's common NumberFormat annotation.\npublic class MonetaryAmountFormatter extends Object implements Formatter<javax.money.MonetaryAmount>; // Formatter for JSR-354 MonetaryAmount values, delegating to MonetaryAmountFormat.format(javax.money.MonetaryAmount) and MonetaryAmountFormat.parse(java.lang.CharSequence).\n", "des": "Integration with the JSR-354 javax.money package."}
{"index": 3481, "repo": "dagger-producers-2.47", "code": "package producers;\n\npackage producers.monitoring; // This package provides hooks for monitoring producers.\nInterface Producer<T>; // An interface that represents the production of a type T.\nClass Produced<T>; // An interface that represents the result of a production of type T, or an exception that was thrown during that production.\nClass Producers; // Utility methods to create Producers.\nEnum CancellationPolicy.Propagation; // Enumeration of the options for what happens to a parent component when one of its child components is cancelled.\nAnnotation Type CancellationPolicy; // Annotates a production component or subcomponent to specify its policy when a child component is cancelled.\nAnnotation Type ProducerModule; // Annotates a class that contributes Produces bindings to the production component.\nAnnotation Type Produces; // Annotates methods of a producer module to create a production binding.\nAnnotation Type Production; // Qualifies a type that will be provided to the framework for use internally.\nAnnotation Type ProductionComponent; // Annotates an interface or abstract class for which a fully-formed, dependency-injected implementation is to be generated from a set of modules.\nAnnotation Type ProductionComponent.Builder; // A builder for a production component.\nAnnotation Type ProductionComponent.Factory; // A factory for a production component.\nAnnotation Type ProductionScope; // A scope annotation for provision bindings that are tied to the lifetime of a ProductionComponent or ProductionSubcomponent.\nAnnotation Type ProductionSubcomponent; // A subcomponent that inherits the bindings from a parent Component, Subcomponent, ProductionComponent, or ProductionSubcomponent.\nAnnotation Type ProductionSubcomponent.Builder; // A builder for a production subcomponent.\nAnnotation Type ProductionSubcomponent.Factory; // A factory for a production subcomponent.\n", "des": "This package contains the public API for Dagger 2's producer functionality."}
{"index": 527, "repo": "commons-vfs2-2.9.0", "code": "package https;\n\nClass HttpsFileNameParser; // Implementation for https.\nClass HttpsFileProvider; // An HTTPS provider that uses commons-httpclient.\n", "des": "The HTTPS File Provider"}
{"index": 922, "repo": "commons-compress-1.23.0", "code": "package lz77support;\n\nInterface LZ77Compressor.Callback; // Callback invoked while the compressor processes data.\nClass AbstractLZ77CompressorInputStream; // Encapsulates code common to LZ77 decompressors.\nClass LZ77Compressor; // Helper class for compression algorithms that use the ideas of LZ77.\nClass LZ77Compressor.BackReference; // Represents a back-reference.\nClass LZ77Compressor.Block; // Base class representing blocks the compressor may emit.\nClass LZ77Compressor.EOD; // A simple \"we are done\" marker.\nClass LZ77Compressor.LiteralBlock; // Represents a literal block of data.\nClass Parameters; // Parameters of the compressor.\nClass Parameters.Builder; // Builder for Parameters instances.\nEnum LZ77Compressor.Block.BlockType; // Enumeration of the block types the compressor may emit.\n", "des": "Provides utility classes for LZ77 based algorithms."}
{"index": 2180, "repo": "spring-security-web-6.1.2", "code": "package j2ee;\n\npublic class J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource extends Object implements org.springframework.security.authentication.AuthenticationDetailsSource<jakarta.servlet.http.HttpServletRequest,PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails>, org.springframework.beans.factory.InitializingBean; // Implementation of AuthenticationDetailsSource which converts the user's J2EE roles (as obtained by calling HttpServletRequest.isUserInRole(String)) into GrantedAuthoritys and stores these in the authentication details object.\npublic class J2eePreAuthenticatedProcessingFilter extends AbstractPreAuthenticatedProcessingFilter; // This AbstractPreAuthenticatedProcessingFilter implementation is based on the J2EE container-based authentication mechanism.\npublic class WebXmlMappableAttributesRetriever extends Object implements org.springframework.context.ResourceLoaderAware, org.springframework.security.core.authority.mapping.MappableAttributesRetriever, org.springframework.beans.factory.InitializingBean; // This MappableAttributesRetriever implementation reads the list of defined J2EE roles from a web.xml file and returns these from { WebXmlMappableAttributesRetriever.getMappableAttributes().\n", "des": "Pre-authentication support for container-authenticated requests."}
{"index": 1929, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package rsocket;\n\n@AutoConfiguration(after={GraphQlAutoConfiguration.class,RSocketMessagingAutoConfiguration.class}) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.execution.GraphQlSource.class,io.rsocket.core.RSocketServer.class,reactor.netty.http.server.HttpServer.class}) @ConditionalOnBean({org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.class,org.springframework.graphql.data.method.annotation.support.AnnotatedControllerConfigurer.class}) @ConditionalOnProperty(prefix=\"spring.graphql.rsocket\", name=\"mapping\") public class GraphQlRSocketAutoConfiguration extends Object; // Auto-configuration for enabling Spring GraphQL over RSocket.\n@AutoConfiguration(after=RSocketRequesterAutoConfiguration.class) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.client.RSocketGraphQlClient.class,org.springframework.messaging.rsocket.RSocketRequester.class,io.rsocket.RSocket.class,io.rsocket.transport.netty.client.TcpClientTransport.class}) public class RSocketGraphQlClientAutoConfiguration extends Object; // Auto-configuration for RSocketGraphQlClient.\n", "des": "Auto-configuration classes for RSocket integration with GraphQL."}
{"index": 444, "repo": "lucene-analyzers-icu-8.11.2", "code": "package segmentation;\n\nClass DefaultICUTokenizerConfig; // Default ICUTokenizerConfig that is generally applicable to many languages.\nClass ICUTokenizer; // Breaks text into words according to UAX #29: Unicode Text Segmentation (http://www.unicode.org/reports/tr29/)\nClass ICUTokenizerConfig; // Class that allows for tailored Unicode Text Segmentation on a per-writing system basis.\nClass ICUTokenizerFactory; // Factory for ICUTokenizer.\n", "des": "Tokenizer that breaks text into words with the Unicode Text Segmentation algorithm."}
{"index": 419, "repo": "hadoop-azure-3.3.6", "code": "package security;\n\nClass AbfsDelegationTokenIdentifier; // Delegation token Identifier for ABFS delegation tokens.\nClass AbfsDelegationTokenManager; // Class for delegation token Manager.\nClass AbfsDtFetcher; // A DT fetcher for Abfs.\nClass AbfssDtFetcher; // The DT Fetcher for abfss.\nClass AbfsTokenRenewer; // Token Renewer for renewing ABFS delegation tokens with remote service.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1861, "repo": "spring-test-6.0.11", "code": "package htmlunit;\n\npackage htmlunit.webdriver; // Server-side support for testing Spring MVC applications with MockMvc and the Selenium HtmlUnitDriver.\npublic final class DelegatingWebConnection extends Object implements com.gargoylesoftware.htmlunit.WebConnection; // Implementation of WebConnection that allows delegating to various WebConnection implementations.\npublic static final class DelegatingWebConnection.DelegateWebConnection extends Object; // The delegate web connection.\npublic final class HostRequestMatcher extends Object implements WebRequestMatcher; // A WebRequestMatcher that allows matching on the host and optionally the port of WebRequest#getUrl().\npublic class MockMvcWebClientBuilder extends MockMvcWebConnectionBuilderSupport<MockMvcWebClientBuilder>; // MockMvcWebClientBuilder simplifies the creation of an HtmlUnit WebClient that delegates to a MockMvc instance.\npublic final class MockMvcWebConnection extends Object implements com.gargoylesoftware.htmlunit.WebConnection; // MockMvcWebConnection enables MockMvc to transform a WebRequest into a WebResponse.\npublic abstract class MockMvcWebConnectionBuilderSupport<T extends MockMvcWebConnectionBuilderSupport<T>> extends Object; // Support class that simplifies the creation of a WebConnection that uses MockMvc and optionally delegates to a real WebConnection for specific requests.\npublic final class UrlRegexRequestMatcher extends Object implements WebRequestMatcher; // A WebRequestMatcher that allows matching on WebRequest#getUrl().toExternalForm() using a regular expression.\n@FunctionalInterface public interface WebRequestMatcher; // Strategy for matching on a WebRequest.\n", "des": "Server-side support for testing Spring MVC applications with MockMvc and HtmlUnit."}
{"index": 3492, "repo": "poi-5.2.3", "code": "package eventusermodel;\n\nInterface HSSFListener; // Interface for use with the HSSFRequest and HSSFEventFactory.\nClass AbortableHSSFListener; // Abstract class for use with the HSSFRequest and HSSFEventFactory, which allows for the halting of processing.\nClass EventWorkbookBuilder; // When working with the EventUserModel, if you want to process formulas, you need an instance of InternalWorkbook to pass to a HSSFWorkbook, to finally give to HSSFFormulaParser, and this will build you stub ones.\nClass EventWorkbookBuilder.SheetRecordCollectingListener; // A wrapping HSSFListener which will collect BoundSheetRecords and ExternSheetRecords as they go past, so you can create a Stub InternalWorkbook from them once required.\nClass FormatTrackingHSSFListener; // A proxy HSSFListener that keeps track of the document formatting records, and provides an easy way to look up the format strings used by cells from their ids.\nClass HSSFEventFactory; // Low level event based HSSF reader.\nClass HSSFRequest; // An HSSFRequest object should be constructed registering an instance or multiple instances of HSSFListener with each Record.sid you wish to listen for.\nClass MissingRecordAwareHSSFListener; // A HSSFListener which tracks rows and columns, and will trigger your HSSFListener for all rows and cells, even the ones that aren't actually stored in the file.\nClass HSSFUserException; // This exception is provided as a way for API users to throw exceptions from their event handling code.\n", "des": "HSSF eventmodel Package provides an event-based API for reading HSSF files."}
{"index": 705, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package feed;\n\nClass Feed; // The Spring Integration Feed components Factory.\nClass FeedEntryMessageSourceSpec; // A MessageSourceSpec for a FeedEntryMessageSource.\n", "des": "Provides Feed Components support for Spring Integration Java DSL."}
{"index": 1052, "repo": "commons-io-2.13.0", "code": "package monitor;\n\nInterface FileAlterationListener; // Receives events of file system modifications.\nClass FileAlterationListenerAdaptor; // Convenience FileAlterationListener implementation that does nothing.\nClass FileAlterationMonitor; // A runnable that spawns a monitoring thread triggering any registered FileAlterationObserver at a specified interval.\nClass FileAlterationObserver; // FileAlterationObserver represents the state of files below a root directory, checking the file system and notifying listeners of create, change or delete events.\nClass FileEntry; // The state of a file or directory, capturing the following File attributes at a point in time.\n", "des": "Provides a component for monitoring file system events (directory and file create, update and delete events)."}
{"index": 2438, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package flyway;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.class) @ConditionalOnClass(org.flywaydb.core.Flyway.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.flyway.FlywayEndpoint.class) public class FlywayEndpointAutoConfiguration extends Object; // Auto-configuration for FlywayEndpoint.\n", "des": "Auto-configuration for actuator Flyway concerns."}
{"index": 2807, "repo": "spring-security-oauth2-core-6.1.2", "code": "package user;\n\npublic class DefaultOAuth2User extends Object implements OAuth2User, Serializable; // The default implementation of an OAuth2User.\npublic interface OAuth2User extends OAuth2AuthenticatedPrincipal; // A representation of a user Principal that is registered with an OAuth 2.0 Provider.\npublic class OAuth2UserAuthority extends Object implements org.springframework.security.core.GrantedAuthority; // A GrantedAuthority that may be associated to an OAuth2User.\n", "des": "Provides a model for an OAuth 2.0 representation of a user Principal."}
{"index": 1691, "repo": "spring-data-couchbase-5.1.2", "code": "package translation;\n\npublic class JacksonTranslationService extends Object implements TranslationService, InitializingBean; // A Jackson JSON Translator that implements the TranslationService contract.\npublic interface TranslationService; // Defines a translation service to encode/decode responses into the CouchbaseStorable format.\n", "des": "This package contains a service interface to translate entities to a Couchbase storable format, and its implementations."}
{"index": 3888, "repo": "solr-solrj-9.3.0", "code": "package request;\n\npackage request.beans; // Annotated Data objects used in V2 Requests\npackage request.json; // Allows sending of requests using Solr's JSON query/faceting API\npackage request.schema; // Convenience classes for making Schema API requests.\nInterface ApiMapping.CommandMeta;\nInterface ApiMapping.V2EndPoint;\nInterface CollectionAdminRequest.RoutedAliasAdminRequest;\nInterface IsUpdateRequest; // Marker class so that we can determine which requests are updates.\nInterface JavaBinUpdateRequestCodec.StreamingUpdateHandler;\nInterface RequestWriter.ContentWriter;\nClass AbstractUpdateRequest;\nClass ApiMapping; // Types and utilities used by many ApiMapping classes.\nClass CollectionAdminRequest<T extends CollectionAdminResponse>; // This class is experimental and subject to change.\nClass CollectionAdminRequest.AddReplica;\nClass CollectionAdminRequest.AddReplicaProp;\nClass CollectionAdminRequest.AddRole;\nClass CollectionAdminRequest.AsyncCollectionAdminRequest; // Base class for asynchronous collection admin requests\nClass CollectionAdminRequest.AsyncCollectionSpecificAdminRequest;\nClass CollectionAdminRequest.AsyncShardSpecificAdminRequest;\nClass CollectionAdminRequest.Backup;\nClass CollectionAdminRequest.BalanceShardUnique;\nClass CollectionAdminRequest.ClusterProp;\nClass CollectionAdminRequest.ClusterStatus;\nClass CollectionAdminRequest.CollectionAdminRoleRequest;\nClass CollectionAdminRequest.CollectionProp;\nClass CollectionAdminRequest.ColStatus;\nClass CollectionAdminRequest.Create;\nClass CollectionAdminRequest.CreateAlias;\nClass CollectionAdminRequest.CreateCategoryRoutedAlias;\nClass CollectionAdminRequest.CreateShard;\nClass CollectionAdminRequest.CreateSnapshot;\nClass CollectionAdminRequest.CreateTimeRoutedAlias;\nClass CollectionAdminRequest.Delete;\nClass CollectionAdminRequest.DeleteAlias;\nClass CollectionAdminRequest.DeleteBackup; // SolrRequest class for the \"Backup Deletion\" API.\nClass CollectionAdminRequest.DeleteNode;\nClass CollectionAdminRequest.DeleteReplica;\nClass CollectionAdminRequest.DeleteReplicaProp;\nClass CollectionAdminRequest.DeleteShard;\nClass CollectionAdminRequest.DeleteSnapshot;\nClass CollectionAdminRequest.DeleteStatus;\nClass CollectionAdminRequest.DimensionalRoutedAlias;\nClass CollectionAdminRequest.ForceLeader;\nClass CollectionAdminRequest.InstallShard;\nClass CollectionAdminRequest.List;\nClass CollectionAdminRequest.ListAliases;\n", "des": "Convenience classes for dealing with various types of Solr requests."}
{"index": 2480, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package r2dbc;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class,org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration.class}) @ConditionalOnClass({io.r2dbc.pool.ConnectionPool.class,io.micrometer.core.instrument.MeterRegistry.class}) @ConditionalOnBean({io.r2dbc.spi.ConnectionFactory.class,io.micrometer.core.instrument.MeterRegistry.class}) public class ConnectionPoolMetricsAutoConfiguration extends Object; // Auto-configuration for metrics on all available R2DBC connection factories.\n", "des": "Auto-configuration for R2DBC metrics."}
{"index": 832, "repo": "calcite-core-1.34.0", "code": "package model;\n\nClass JsonColumn; // JSON object representing a column.\nClass JsonCustomSchema; // JSON schema element that represents a custom schema.\nClass JsonCustomTable; // Custom table schema element.\nClass JsonFunction; // Function schema element.\nClass JsonJdbcSchema; // JSON object representing a schema that maps to a JDBC database.\nClass JsonLattice; // Element that describes a star schema and provides a framework for defining, recognizing, and recommending materialized views at various levels of aggregation.\nClass JsonMapSchema; // JSON object representing a schema whose tables are explicitly specified.\nClass JsonMaterialization; // Element that describes how a table is a materialization of a query.\nClass JsonMeasure; // An aggregate function applied to a column (or columns) of a lattice.\nClass JsonRoot; // Root schema element.\nClass JsonSchema; // Schema schema element.\nClass JsonStream; // Information about whether a table allows streaming.\nClass JsonTable; // Table schema element.\nClass JsonTile; // Materialized view within a JsonLattice.\nClass JsonType; // Type schema element.\nClass JsonTypeAttribute; // JSON object representing a type attribute.\nClass JsonView; // View schema element.\nClass ModelHandler; // Reads a model and creates schema objects accordingly.\nEnum JsonSchema.Type; // Built-in schema types.\nEnum ModelHandler.ExtraOperand; // Extra operands automatically injected into a JsonCustomSchema.operand, as extra context for the adapter.\n", "des": "Provides model files, in JSON format, defining schemas and other metadata."}
{"index": 885, "repo": "cassandra-all-4.1.2", "code": "package types;\n\nInterface GettableByIndexData; // Collection of (typed) CQL values that can be retrieved by index (starting at zero).\nInterface GettableByNameData; // Collection of (typed) CQL values that can be retrieved by name.\nInterface GettableData; // Collection of (typed) CQL values that can be retrieved either by index (starting at zero) or by name.\nInterface SettableByIndexData<T extends SettableByIndexData<T>>; // Collection of (typed) CQL values that can be set by index (starting at zero).\nInterface SettableByNameData<T extends SettableData<T>>; // Collection of (typed) CQL values that can set by name.\nInterface SettableData<T extends SettableData<T>>; // Collection of (typed) CQL values that can be set either by index (starting at zero) or by name.\nClass AbstractGettableData;\nClass CodecRegistry; // A registry for TypeCodecs.\nClass CodecUtils; // A set of utility methods to deal with type conversion and serialization.\nClass DataType; // Data types supported by cassandra.\nClass DataType.CollectionType; // Instances of this class represent collection types, that is, lists, sets or maps.\nClass DataType.CustomType; // A \"custom\" type is a type that cannot be expressed as a CQL type.\nClass DataType.NativeType; // Instances of this class represent CQL native types, also known as CQL primitive types.\nClass DataTypeClassNameParser;\nClass Duration; // Represents a duration.\nClass LocalDate; // A date with no time components, no time zone, in the ISO 8601 calendar.\nClass Metadata; // Keeps metadata on the connected cluster, including known nodes and schema definitions.\nClass ParseUtils; // Simple utility class used to help parsing CQL values (mainly UDT and collection ones).\nClass TupleType; // A tuple type.\nClass TupleValue; // A value for a Tuple.\nClass TypeCodec<T>; // A Codec that can serialize and deserialize to and from a given CQL type and a given Java Type.\nClass TypeCodec.AbstractCollectionCodec<E,C extends java.util.Collection<E>>; // Base class for codecs mapping CQL lists and sets to Java collections.\nClass TypeCodec.AbstractMapCodec<K,V>; // Base class for codecs mapping CQL maps to a Java Map.\n", "des": "Contains pieces of the Java Driver that are needed to handle data types in C* User-Defined-Functions/Aggregates."}
{"index": 1644, "repo": "jena-core-4.9.0", "code": "package graph;\n\npackage graph.compose; // This package defines simple composite graphs - union, intersection, difference, and update-tracking.\npackage graph.impl; // This package provides basic implementations of Graph interfaces such as EventManager and Capabilities.\npublic class BlankNodeId extends Object; // System identifier for a blank node.\npublic interface Capabilities; // Interface for expressing capabilities.\n@Deprecated public class Factory extends Object;\npublic interface FrontsNode; // HasNode - interface for objects that front a Node in some context.\npublic interface FrontsTriple; // FrontsTriple (see also FrontsNode) is an interface for things that can be seen as wrappers round triples.\npublic interface GetTriple; // this interface describes types that can have a triple extracted using a getTriple method.\npublic interface Graph; // The interface to be satisfied by implementations maintaining collections of RDF triples.\npublic interface GraphEventManager extends GraphListener; // The component of a graph responsible for managing events and listeners.\npublic class GraphEvents extends Object; // GraphEvents is the base class for Jena general graph events.\npublic class GraphExtract extends Object; // GraphExtract offers a very simple recursive extraction of a subgraph with a specified root in some supergraph.\npublic interface GraphListener; // Interface for listening to graph-level update events.\npublic interface GraphMaker; // A factory for providing instances of named graphs with appropriate storage models.\npublic class GraphMemFactory extends Object; // A factory class for creating memory Graphs.\npublic class GraphUtil extends Object; // An ad-hoc collection of useful code for graphs\npublic class JenaNodeException extends JenaException;\npublic abstract class Node extends Object implements Serializable; // A Node has five subtypes: Node_Blank, Node_Anon, Node_URI, Node_Variable, and Node_ANY.\npublic class Node_ANY extends Node_Fluid; // A Node_ANY (there should be only one) is a meta-node that is used to stand for any other node in a query.\npublic class Node_Blank extends Node_Concrete; // RDF blank nodes, ie nodes with identity but without URIs.\npublic abstract class Node_Concrete extends Node; // This is the class of \"concrete\" nodes, ie those which correspond to actual RDF data - URIs, blank nodes, and literals.\n", "des": "This package defines the Graph and Node family of classes, which form the underlying datatypes of the Jena system."}
{"index": 2994, "repo": "spring-ldap-core-3.1.0", "code": "package converters;\n\npublic final class FromStringConverter extends Object implements Converter; // A Converter from a String to any class which has a single argument public constructor taking a String.\npublic final class ToStringConverter extends Object implements Converter; // A Converter from any class to a String via the toString method.\n", "des": "Provides some basic implementations of the Converter interface."}
{"index": 1307, "repo": "groovy-all-4.0.13", "code": "package security;\n\npublic final class GroovyCodeSourcePermission extends BasicPermission; // Permission required to explicitly specify a codebase for a groovy script whose codebase cannot be determined.\n", "des": "Security-related classes"}
{"index": 2356, "repo": "spring-boot-3.1.1", "code": "package server;\n\npublic abstract class AbstractConfigurableWebServerFactory extends Object implements ConfigurableWebServerFactory; // Abstract base class for ConfigurableWebServerFactory implementations.\n@Deprecated(since=\"3.1.0\", forRemoval=true) public final class CertificateFileSslStoreProvider extends Object implements SslStoreProvider;\npublic class Compression extends Object; // Simple server-independent abstraction for compression configuration.\npublic interface ConfigurableWebServerFactory extends WebServerFactory, ErrorPageRegistry; // A configurable WebServerFactory.\npublic class Cookie extends Object; // Cookie properties.\npublic static enum Cookie.SameSite extends Enum<Cookie.SameSite>; // SameSite values.\npublic class ErrorPage extends Object; // Simple server-independent abstraction for error pages.\n@FunctionalInterface public interface ErrorPageRegistrar; // Interface to be implemented by types that register ErrorPages.\npublic class ErrorPageRegistrarBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.beans.factory.BeanFactoryAware; // BeanPostProcessor that applies all ErrorPageRegistrars from the bean factory to ErrorPageRegistry beans.\n@FunctionalInterface public interface ErrorPageRegistry; // Interface for a registry that holds ErrorPages.\n@FunctionalInterface public interface GracefulShutdownCallback; // A callback for the result of a graceful shutdown request.\npublic enum GracefulShutdownResult extends Enum<GracefulShutdownResult>; // The result of a graceful shutdown request.\npublic class Http2 extends Object; // Simple server-independent abstraction for HTTP/2 configuration.\npublic sealed class MimeMappings extends Object implements Iterable<MimeMappings.Mapping>; // Simple server-independent abstraction for mime mappings.\npublic static final class MimeMappings.Mapping extends Object; // A single mime mapping.\npublic class PortInUseException extends WebServerException; // A PortInUseException is thrown when a web server fails to start due to a port already being in use.\npublic enum Shutdown extends Enum<Shutdown>; // Configuration for shutting down a WebServer.\npublic class Ssl extends Object; // Simple server-independent abstraction for SSL configuration.\npublic static enum Ssl.ClientAuth extends Enum<Ssl.ClientAuth>; // Client authentication types.\n", "des": "Support for embedded web servers."}
{"index": 3857, "repo": "lucene-core-9.7.0", "code": "package fst;\n\nInterface FSTStore; // Abstraction for reading/writing bytes necessary for FST.\nClass ByteSequenceOutputs; // An FST Outputs implementation where each output is a sequence of bytes.\nClass BytesRefFSTEnum<T>; // Enumerates all input (BytesRef) + output pairs in an FST.\nClass BytesRefFSTEnum.InputOutput<T>; // Holds a single input (BytesRef) + output pair.\nClass CharSequenceOutputs; // An FST Outputs implementation where each output is a sequence of characters.\nClass FST<T>; // Represents an finite state machine (FST), using a compact byte[] format.\nClass FST.Arc<T>; // Represents a single arc.\nClass FST.BytesReader; // Reads bytes stored in an FST.\nClass FSTCompiler<T>; // Builds a minimal FST (maps an IntsRef term to an arbitrary output) from pre-sorted terms with outputs.\nClass FSTCompiler.Builder<T>; // Fluent-style constructor for FST FSTCompiler.\nClass IntSequenceOutputs; // An FST Outputs implementation where each output is a sequence of ints.\nClass IntsRefFSTEnum<T>; // Enumerates all input (IntsRef) + output pairs in an FST.\nClass IntsRefFSTEnum.InputOutput<T>; // Holds a single input (IntsRef) + output pair.\nClass NoOutputs; // A null FST Outputs implementation; use this if you just want to build an FSA.\nClass OffHeapFSTStore; // Provides off heap storage of finite state machine (FST), using underlying index input instead of byte store on heap\nClass OnHeapFSTStore; // Provides storage of finite state machine (FST), using byte array or byte store allocated on heap.\nClass Outputs<T>; // Represents the outputs for an FST, providing the basic algebra required for building and traversing the FST.\nClass PairOutputs<A,​B>; // An FST Outputs implementation, holding two other outputs.\nClass PairOutputs.Pair<A,​B>; // Holds a single pair of two outputs.\n", "des": "Finite state transducers"}
{"index": 3288, "repo": "opencms-core-15.0", "code": "package preconfiguredrestrictions;\n\nClass CmsRestrictionRule; // A single restriction rule, telling for which field and type what kind of restriction should be enforced.\nClass CmsRestrictionRuleParser; // Parser for restriction rules.\nClass CmsRestrictionsBean; // Wraps the preconfigured restrictions.\nClass CmsRestrictionsBean.FieldValues; // The values in one input field.\nEnum CmsRestrictionRule.MatchType; // Match type of the restriction, i.e., how the values should be treated.\nEnum CmsRestrictionsBean.FieldValues.FieldType; // The type describes how values in that input field should be handled.\n", "des": "Helpers for the preconfigured filter query part of the list configuration (ie."}
{"index": 1332, "repo": "groovy-all-4.0.13", "code": "package control;\n\npackage control.io; // Internal classes for Groovier Input/Output.\npackage control.messages; // Error message classes.\npublic class AnnotationConstantsVisitor extends ClassCodeVisitorSupport; // Resolves constants in annotation definitions.\npublic class ASTTransformationsContext extends Object; // Stores state information about global AST transformations applied to a compilation unit.\npublic interface BytecodeProcessor;\npublic class ClassNodeResolver extends Object; // This class is used as a pluggable way to resolve class names.\npublic static class ClassNodeResolver.LookupResult extends Object; // Helper class to return either a SourceUnit or ClassNode.\npublic class CompilationFailedException extends GroovyRuntimeException; // Thrown when compilation fails from source errors.\npublic class CompilationUnit extends ProcessingUnit; // The CompilationUnit collects all compilation data as it is generated by the compiler system.\n@FunctionalInterface public static interface CompilationUnit.ClassgenCallback; // A callback interface you can use during the classgen phase of compilation as the compiler traverses the ClassNode tree.\n@Deprecated public abstract static class CompilationUnit.GroovyClassOperation extends Object implements CompilationUnit.IGroovyClassOperation;\n@FunctionalInterface public static interface CompilationUnit.IGroovyClassOperation;\n@FunctionalInterface public static interface CompilationUnit.IPrimaryClassNodeOperation;\n@FunctionalInterface public static interface CompilationUnit.ISourceUnitOperation;\n@Deprecated public abstract static class CompilationUnit.PrimaryClassNodeOperation extends Object implements CompilationUnit.IPrimaryClassNodeOperation;\n@FunctionalInterface public static interface CompilationUnit.ProgressCallback; // A callback interface you can use to get a callback after every unit of the compile process.\n@Deprecated public abstract static class CompilationUnit.SourceUnitOperation extends Object implements CompilationUnit.ISourceUnitOperation;\npublic enum CompilePhase extends Enum<CompilePhase>; // The phases of the GroovyCompiler.\npublic class CompilerConfiguration extends Object; // Compilation control flags and coordination stuff.\npublic class ConfigurationException extends RuntimeException implements GroovyExceptionInterface; // Thrown when configuration data is invalid.\npublic class ErrorCollector extends Object implements Serializable; // A base class for collecting messages and errors during processing.\npublic class GenericsVisitor extends ClassCodeVisitorSupport; // Verify correct usage of generics.\npublic interface HasCleanup; // An interface for things that need to be cleaned up after operations complete.\npublic abstract class InstanceOfVerifier extends ClassCodeVisitorSupport;\n", "des": "Compiler control classes."}
{"index": 3531, "repo": "opennlp-tools-2.2.0", "code": "package ml;\n\npackage ml.maxent; // Package related to ML by means of the Maximum Entropy (ME) algorithm.\npackage ml.model; // Package related to ML models and feature selection techniques.\npackage ml.naivebayes; // Package related to ML by means of the Naive Bayes algorithm.\npackage ml.perceptron; // Package related to ML by means of the perceptron algorithm.\nInterface EventModelSequenceTrainer<T>; // A specialized Trainer that is based on a 'EventModelSequence' approach.\nInterface EventTrainer; // A specialized Trainer that is based on an Event approach.\nInterface SequenceTrainer;\nClass AbstractEventModelSequenceTrainer; // A basic EventModelSequenceTrainer implementation that processes events.\nClass AbstractEventTrainer; // A basic EventTrainer implementation.\nClass AbstractTrainer;\nClass ArrayMath; // Utility class for simple vector arithmetic.\nClass BeamSearch<T>; // Performs k-best search over a sequence.\nClass TrainerFactory; // A factory to initialize Trainer instances depending on a trainer type configured via TrainingParameters.\nEnum TrainerFactory.TrainerType;\n", "des": "Package related to Machine Learning (ML) features of OpenNLP, the related ML models, and trainers."}
{"index": 1402, "repo": "spring-boot-actuator-3.1.1", "code": "package info;\n\n@ImportRuntimeHints(org.springframework.boot.actuate.info.BuildInfoContributor.BuildInfoContributorRuntimeHints.class) public class BuildInfoContributor extends InfoPropertiesInfoContributor<org.springframework.boot.info.BuildProperties>; // An InfoContributor that exposes BuildProperties.\npublic class EnvironmentInfoContributor extends Object implements InfoContributor; // An InfoContributor that provides all environment entries prefixed with info.\n@ImportRuntimeHints(org.springframework.boot.actuate.info.GitInfoContributor.GitInfoContributorRuntimeHints.class) public class GitInfoContributor extends InfoPropertiesInfoContributor<org.springframework.boot.info.GitProperties>; // An InfoContributor that exposes GitProperties.\npublic final class Info extends Object; // Carries information of the application.\npublic static class Info.Builder extends Object; // Builder for creating immutable Info instances.\n@FunctionalInterface public interface InfoContributor; // Contributes additional info details.\n@Endpoint(id=\"info\") public class InfoEndpoint extends Object; // @Endpoint to expose arbitrary application information.\npublic abstract class InfoPropertiesInfoContributor<T extends org.springframework.boot.info.InfoProperties> extends Object implements InfoContributor; // A base InfoContributor to expose an InfoProperties.\npublic static enum InfoPropertiesInfoContributor.Mode extends Enum<InfoPropertiesInfoContributor.Mode>; // Defines how properties should be exposed.\n@ImportRuntimeHints(org.springframework.boot.actuate.info.JavaInfoContributor.JavaInfoContributorRuntimeHints.class) public class JavaInfoContributor extends Object implements InfoContributor; // An InfoContributor that exposes JavaInfo.\npublic class MapInfoContributor extends Object implements InfoContributor; // A simple InfoContributor that exposes a map.\n@ImportRuntimeHints(org.springframework.boot.actuate.info.OsInfoContributor.OsInfoContributorRuntimeHints.class) public class OsInfoContributor extends Object implements InfoContributor; // An InfoContributor that exposes OsInfo.\npublic class SimpleInfoContributor extends Object implements InfoContributor; // A simple InfoContributor that exposes a single detail.\n", "des": "Classes for application info."}
{"index": 1197, "repo": "commons-math3-3.6.1", "code": "package fitting;\n\nClass CurveFitter<T extends ParametricUnivariateFunction>; // As of 3.1 (to be removed in 4.0).\nClass GaussianFitter; // As of 3.1 (to be removed in 4.0).\nClass GaussianFitter.ParameterGuesser; // Guesses the parameters norm, mean, and sigma of a Gaussian.Parametric based on the specified observed points.\nClass HarmonicFitter; // As of 3.1 (to be removed in 4.0).\nClass HarmonicFitter.ParameterGuesser; // This class guesses harmonic coefficients from a sample.\nClass PolynomialFitter; // As of 3.1 (to be removed in 4.0).\nClass WeightedObservedPoint; // As of 3.1 (to be removed in 4.0).\n", "des": "This package provides classes to perform curve fitting."}
{"index": 3036, "repo": "spring-web-6.0.11", "code": "package el;\n\npublic class SpringBeanFacesELResolver extends ELResolver; // JSF ELResolver that delegates to the Spring root WebApplicationContext, resolving name references to Spring-defined beans.\npublic class WebApplicationContextFacesELResolver extends ELResolver; // Special JSF ELResolver that exposes the Spring WebApplicationContext instance under a variable named \"webApplicationContext\".\n", "des": "ELResolvers for integrating a JSF web layer with a Spring service layer which is hosted in a Spring root WebApplicationContext."}
{"index": 3212, "repo": "commons-configuration2-2.9.0", "code": "package configuration2;\n\npackage configuration2.beanutils; // In this package a Configuration implementation can be found that implements the DynaBean interface.\npackage configuration2.builder; // This package contains the implementations of configuration builder classes used to create new Configuration objects.\npackage configuration2.convert; // This package contains interfaces and classes related to data type conversions.\npackage configuration2.event; // This package contains interfaces and classes for receiving notifications about changes at configurations.\npackage configuration2.ex; // This package contains all exception classes used by this library.\npackage configuration2.interpol; // A package with helper classes used for interpolation (variable substitution).\npackage configuration2.io; // A package with classes related to I/O operations.\npackage configuration2.plist; // Configuration classes supporting NeXT / OpenStep /GNUStep style configuration.\npackage configuration2.reloading; // This package contains classes and interfaces related to the reloading mechanism.\npackage configuration2.resolver; // A package containing EntityResolvers.\npackage configuration2.spring; // A package containing integrations for the Spring Framework.\npackage configuration2.sync; // A package containing interfaces and classes related to synchronization of configurations.\npackage configuration2.tree; // A package with helper and utility classes used by hierarchical configurations.\npackage configuration2.web; // This package contains some implementations of the Configuration interface that are useful in web environments.\nInterface Configuration; // The main Configuration interface.\nInterface ConfigurationComparator; // Comparator for configurations interface.\nInterface ConfigurationConsumer<T>; // A Configuration task that may throw a ConfigurationException.\nInterface ConfigurationDecoder; // An interface for decoding encoded values from a configuration source.\nInterface FileBasedConfiguration; // An interface which combines the FileBased and Configuration interfaces.\nInterface HierarchicalConfiguration<T>; // An interface for mutable hierarchical configurations.\nInterface ImmutableConfiguration; // The main interface for accessing configuration data in a read-only fashion.\nInterface ImmutableHierarchicalConfiguration; // An interface for immutable hierarchical configurations.\nInterface Initializable; // Definition of an interface to be implemented by Configuration implementations which support a special initialization method.\nInterface PropertiesConfiguration.IOFactory; // Definition of an interface that allows customization of read and write operations.\nClass AbstractConfiguration; // Abstract configuration class.\n", "des": "The Configuration main package."}
{"index": 781, "repo": "lucene-analyzers-common-8.11.2", "code": "package gl;\n\nClass GalicianAnalyzer; // Analyzer for Galician.\nClass GalicianMinimalStemFilter; // A TokenFilter that applies GalicianMinimalStemmer to stem Galician words.\nClass GalicianMinimalStemFilterFactory; // Factory for GalicianMinimalStemFilter.\nClass GalicianMinimalStemmer; // Minimal Stemmer for Galician\nClass GalicianStemFilter; // A TokenFilter that applies GalicianStemmer to stem Galician words.\nClass GalicianStemFilterFactory; // Factory for GalicianStemFilter.\nClass GalicianStemmer; // Galician stemmer implementing \"Regras do lematizador para o galego\".\n", "des": "Analyzer for Galician."}
{"index": 2984, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "package resource;\n\npackage resource.authentication; // OAuth 2.0 Resource Server Authentications and supporting classes and interfaces.\npackage resource.introspection; // OAuth 2.0 Introspection supporting classes and interfaces.\npackage resource.web; // OAuth 2.0 Resource Server Filter's and supporting classes and interfaces.\n@Deprecated public class BearerTokenAuthenticationToken extends BearerTokenAuthenticationToken;\npublic final class BearerTokenError extends org.springframework.security.oauth2.core.OAuth2Error; // A representation of a Bearer Token Error.\npublic final class BearerTokenErrorCodes extends Object; // Standard error codes defined by the OAuth 2.0 Authorization Framework: Bearer Token Usage.\npublic final class BearerTokenErrors extends Object; // A factory for creating BearerTokenError instances that correspond to the registered Bearer Token Error Codes.\npublic class InvalidBearerTokenException extends org.springframework.security.oauth2.core.OAuth2AuthenticationException; // An OAuth2AuthenticationException that indicates an invalid bearer token.\n", "des": "OAuth 2.0 Resource Server core classes and interfaces providing support."}
{"index": 65, "repo": "ignite-core-2.15.0", "code": "package maintenance;\n\nInterface MaintenanceAction<T>; // Maintenance action interface enables user to execute operations related to a particular MaintenanceTask.\nInterface MaintenanceRegistry; // MaintenanceRegistry is a service local to each Ignite node that allows to request performing maintenance actions on that particular node.\nInterface MaintenanceWorkflowCallback; // Abstraction to decouple interaction between MaintenanceRegistry and components that may require maintenance.\nClass MaintenanceTask; // Represents request to handle maintenance situation.\n", "des": "Contains public interfaces for maintenance mechanism."}
{"index": 2249, "repo": "spring-data-keyvalue-3.1.2", "code": "package query;\n\npublic class CachingKeyValuePartTreeQuery extends KeyValuePartTreeQuery; // KeyValuePartTreeQuery implementation deriving queries from PartTree using a predefined AbstractQueryCreator that caches the once created query.\npublic class KeyValuePartTreeQuery extends Object implements RepositoryQuery; // RepositoryQuery implementation deriving queries from PartTree using a predefined AbstractQueryCreator.\npublic static interface KeyValuePartTreeQuery.QueryCreatorFactory<T extends AbstractQueryCreator<?,?>>; // Factory class for obtaining AbstractQueryCreator instances for a given PartTree and ParameterAccessor.\npublic class SpelQueryCreator extends AbstractQueryCreator<KeyValueQuery<SpelExpression>,String>; // AbstractQueryCreator to create SpelExpression based KeyValueQuerys.\n", "des": "Query derivation mechanism for key/value specific repositories providing a generic SpEL based implementation."}
{"index": 780, "repo": "lucene-analyzers-common-8.11.2", "code": "package ga;\n\nClass IrishAnalyzer; // Analyzer for Irish.\nClass IrishLowerCaseFilter; // Normalises token text to lower case, handling t-prothesis and n-eclipsis (i.e., that 'nAthair' should become 'n-athair')\nClass IrishLowerCaseFilterFactory; // Factory for IrishLowerCaseFilter.\n", "des": "Analyzer for Irish."}
{"index": 2130, "repo": "spring-context-support-6.0.11", "code": "package interceptor;\n\npublic abstract class AbstractFallbackJCacheOperationSource extends Object implements JCacheOperationSource; // Abstract implementation of JCacheOperationSource that caches attributes for methods and implements a fallback policy: 1.\npublic abstract class AnnotationJCacheOperationSource extends AbstractFallbackJCacheOperationSource; // Implementation of the JCacheOperationSource interface that reads the JSR-107 CacheResult, CachePut, CacheRemove and CacheRemoveAll annotations.\npublic class BeanFactoryJCacheOperationSourceAdvisor extends org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor; // Advisor driven by a JCacheOperationSource, used to include a cache advice bean for methods that are cacheable.\npublic class DefaultJCacheOperationSource extends AnnotationJCacheOperationSource implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.SmartInitializingSingleton; // The default JCacheOperationSource implementation delegating default operations to configurable services with sensible defaults when not present.\npublic class JCacheAspectSupport extends org.springframework.cache.interceptor.AbstractCacheInvoker implements org.springframework.beans.factory.InitializingBean; // Base class for JSR-107 caching aspects, such as the JCacheInterceptor or an AspectJ aspect.\npublic class JCacheInterceptor extends JCacheAspectSupport implements org.aopalliance.intercept.MethodInterceptor, Serializable; // AOP Alliance MethodInterceptor for declarative cache management using JSR-107 caching annotations.\npublic interface JCacheOperation<A extends Annotation> extends org.springframework.cache.interceptor.BasicOperation, javax.cache.annotation.CacheMethodDetails<A>; // Model the base of JSR-107 cache operation through an interface contract.\npublic interface JCacheOperationSource; // Interface used by JCacheInterceptor.\n@Deprecated(since=\"6.0.10\", forRemoval=true) public abstract class JCacheOperationSourcePointcut extends org.springframework.aop.support.StaticMethodMatcherPointcut implements Serializable;\npublic class SimpleExceptionCacheResolver extends org.springframework.cache.interceptor.AbstractCacheResolver; // A simple CacheResolver that resolves the exception cache based on a configurable CacheManager and the name of the cache: CacheResultOperation.getExceptionCacheName().\n", "des": "AOP-based solution for declarative caching demarcation using JSR-107 annotations."}
{"index": 827, "repo": "calcite-core-1.34.0", "code": "package jdbc;\n\nInterface JdbcRel; // Relational expression that uses JDBC calling convention.\nInterface JdbcSchema.Foo; // Do not use.\nClass JdbcCatalogSchema; // Schema based upon a JDBC catalog (database).\nClass JdbcConvention; // Calling convention for relational operations that occur in a JDBC database.\nClass JdbcImplementor; // State for generating a SQL statement.\nClass JdbcQueryProvider; // Implementation of QueryProvider that talks to JDBC databases.\nClass JdbcRules; // Rules and relational operators for JdbcConvention calling convention.\nClass JdbcRules.JdbcAggregate; // Aggregate operator implemented in JDBC convention.\nClass JdbcRules.JdbcAggregateRule; // Rule to convert a Aggregate to a JdbcRules.JdbcAggregate.\nClass JdbcRules.JdbcCalc;\nClass JdbcRules.JdbcFilter; // Implementation of Filter in jdbc calling convention.\nClass JdbcRules.JdbcFilterRule; // Rule to convert a Filter to an JdbcRules.JdbcFilter.\nClass JdbcRules.JdbcIntersect; // Intersect operator implemented in JDBC convention.\nClass JdbcRules.JdbcIntersectRule; // Rule to convert a Intersect to a JdbcRules.JdbcIntersect.\nClass JdbcRules.JdbcJoin; // Join operator implemented in JDBC convention.\nClass JdbcRules.JdbcJoinRule; // Rule that converts a join to JDBC.\nClass JdbcRules.JdbcMinus; // Minus operator implemented in JDBC convention.\nClass JdbcRules.JdbcMinusRule; // Rule to convert a Minus to a JdbcRules.JdbcMinus.\nClass JdbcRules.JdbcProject; // Implementation of Project in jdbc calling convention.\nClass JdbcRules.JdbcProjectRule; // Rule to convert a Project to an JdbcRules.JdbcProject.\nClass JdbcRules.JdbcSort; // Sort operator implemented in JDBC convention.\nClass JdbcRules.JdbcSortRule; // Rule to convert a Sort to an JdbcRules.JdbcSort.\nClass JdbcRules.JdbcTableModificationRule; // Rule that converts a table-modification to JDBC.\nClass JdbcRules.JdbcTableModify; // Table-modification operator implemented in JDBC convention.\nClass JdbcRules.JdbcUnion; // Union operator implemented in JDBC convention.\nClass JdbcRules.JdbcUnionRule; // Rule to convert an Union to a JdbcRules.JdbcUnion.\nClass JdbcRules.JdbcValues; // Values operator implemented in JDBC convention.\nClass JdbcRules.JdbcValuesRule; // Rule that converts a values operator to JDBC.\n", "des": "Query provider based on a JDBC data source."}
{"index": 3537, "repo": "opennlp-tools-2.2.0", "code": "package perceptron;\n\nClass BinaryPerceptronModelReader; // A PerceptronModelReader that reads models from a binary format.\nClass BinaryPerceptronModelWriter; // A PerceptronModelWriter that writes models in a binary format.\nClass PerceptronModel; // A model implementation based one the perceptron algorithm.\nClass PerceptronModelReader; // The base class for readers of models.\nClass PerceptronModelWriter; // The base class for PerceptronModel writers.\nClass PerceptronTrainer; // Trains models using the perceptron algorithm.\nClass SimplePerceptronSequenceTrainer; // Trains models with sequences using the perceptron algorithm.\n", "des": "Package related to ML by means of the perceptron algorithm."}
{"index": 2673, "repo": "spring-r2dbc-6.0.11", "code": "package connection;\n\npackage connection.init; // Provides extensible support for initializing databases through scripts.\npackage connection.lookup; // Provides a strategy for looking up R2DBC ConnectionFactories by name.\npublic abstract class ConnectionFactoryUtils extends Object; // Helper class that provides static methods for obtaining R2DBC Connections from a ConnectionFactory.\npublic class ConnectionHolder extends org.springframework.transaction.support.ResourceHolderSupport; // Resource holder wrapping a R2DBC Connection.\npublic class DelegatingConnectionFactory extends Object implements ConnectionFactory, Wrapped<ConnectionFactory>; // R2DBC ConnectionFactory implementation that delegates all calls to a given target ConnectionFactory.\npublic class R2dbcTransactionManager extends org.springframework.transaction.reactive.AbstractReactiveTransactionManager implements org.springframework.beans.factory.InitializingBean; // ReactiveTransactionManager implementation for a single R2DBC ConnectionFactory.\npublic class SingleConnectionFactory extends DelegatingConnectionFactory implements org.springframework.beans.factory.DisposableBean; // Implementation of DelegatingConnectionFactory that wraps a single R2DBC Connection which is not closed after use.\npublic class TransactionAwareConnectionFactoryProxy extends DelegatingConnectionFactory; // Proxy for a target R2DBC ConnectionFactory, adding awareness of Spring-managed transactions.\n", "des": "Provides a utility class for easy ConnectionFactory access, a ReactiveTransactionManager for a single ConnectionFactory, and various simple ConnectionFactory implementations."}
{"index": 2966, "repo": "spring-integration-redis-6.1.2", "code": "package util;\n\npublic final class RedisLockRegistry extends Object implements org.springframework.integration.support.locks.ExpirableLockRegistry, org.springframework.beans.factory.DisposableBean; // Implementation of ExpirableLockRegistry providing a distributed lock using Redis.\npublic static enum RedisLockRegistry.RedisLockType extends Enum<RedisLockRegistry.RedisLockType>; // The mode in which this registry is going to work with locks.\n", "des": "Provides utility classes."}
{"index": 836, "repo": "calcite-core-1.34.0", "code": "package volcano;\n\nInterface AbstractConverter.ExpandConversionRule.Config; // Rule configuration.\nClass AbstractConverter; // Converts a relational expression to any given output convention.\nClass AbstractConverter.ExpandConversionRule; // Rule that converts an AbstractConverter into a chain of converters from the source relation to the target traits.\nClass RelSubset; // Subset of an equivalence class where all relational expressions have the same physical properties.\nClass RuleQueue; // A data structure that manages rule matches for RuleDriver.\nClass VolcanoPlanner; // VolcanoPlanner optimizes queries by transforming expressions selectively according to a dynamic programming algorithm.\nClass VolcanoRelMetadataProvider;\nClass VolcanoRuleCall; // VolcanoRuleCall implements the RelOptRuleCall interface for VolcanoPlanner.\nClass VolcanoTimeoutException; // Indicates that planning timed out.\n", "des": "Optimizes relational expressions."}
{"index": 1109, "repo": "fontbox-3.0.0-beta1", "code": "package gsub;\n\nClass LigatureSetTable; // This class is a part of the GSUB — Glyph Substitution Table system of tables in the Open Type Font specs.\nClass LigatureTable; // This class is a part of the GSUB — Glyph Substitution Table system of tables in the Open Type Font specs.\nClass LookupTypeLigatureSubstitutionSubstFormat1; // This class is a part of the GSUB — Glyph Substitution Table system of tables in the Open Type Font specs.\nClass LookupTypeMultipleSubstitutionFormat1;\nClass LookupTypeSingleSubstFormat1; // This class is a part of the GSUB — Glyph Substitution Table system of tables in the Open Type Font specs.\nClass LookupTypeSingleSubstFormat2; // This class is a part of the GSUB — Glyph Substitution Table system of tables in the Open Type Font specs.\nClass SequenceTable; // This class is a part of the GSUB — Glyph Substitution Table system of tables in the Open Type Font specs.\n", "des": "This package contains the highly obfuscated GSUB, aka, Glyph Substitution Table system of tables from the Open Type Font specs."}
{"index": 1349, "repo": "spring-integration-kafka-6.1.2", "code": "package inbound;\n\npublic class KafkaErrorSendingMessageRecoverer extends org.springframework.integration.core.ErrorMessagePublisher implements org.springframework.kafka.listener.ConsumerRecordRecoverer; // An extension of ErrorMessagePublisher that can be used in a CommonErrorHandler for recovering Kafka delivery failures.\npublic interface KafkaInboundEndpoint; // Implementations of this interface will generally support a retry template for retrying incoming deliveries and this supports adding common attributes to the retry context.\npublic class KafkaInboundGateway<K,V,R> extends org.springframework.integration.gateway.MessagingGatewaySupport implements KafkaInboundEndpoint, org.springframework.integration.core.Pausable, org.springframework.integration.context.OrderlyShutdownCapable; // Inbound gateway.\npublic class KafkaMessageDrivenChannelAdapter<K,V> extends org.springframework.integration.endpoint.MessageProducerSupport implements KafkaInboundEndpoint, org.springframework.integration.context.OrderlyShutdownCapable, org.springframework.integration.core.Pausable; // Message-driven channel adapter.\npublic static enum KafkaMessageDrivenChannelAdapter.ListenerMode extends Enum<KafkaMessageDrivenChannelAdapter.ListenerMode>; // The listener mode for the container, record or batch.\npublic class KafkaMessageSource<K,V> extends org.springframework.integration.endpoint.AbstractMessageSource<Object> implements org.springframework.integration.core.Pausable; // Polled message source for Apache Kafka.\npublic static class KafkaMessageSource.KafkaAckCallback<K,V> extends Object implements org.springframework.integration.acks.AcknowledgmentCallback, org.springframework.kafka.support.Acknowledgment; // AcknowledgmentCallback for Kafka.\npublic static record KafkaMessageSource.KafkaAckCallbackFactory<K,V>(org.springframework.kafka.listener.ConsumerProperties consumerProperties) extends Record implements org.springframework.integration.acks.AcknowledgmentCallbackFactory<KafkaMessageSource.KafkaAckInfo<K,V>>; // AcknowledgmentCallbackFactory for KafkaAckInfo.\n", "des": "Provides Spring Integration inbound components for Apache Kafka."}
{"index": 758, "repo": "lucene-analyzers-common-8.11.2", "code": "package boost;\n\nClass DelimitedBoostTokenFilter; // Characters before the delimiter are the \"token\", those after are the boost.\nClass DelimitedBoostTokenFilterFactory; // Factory for DelimitedBoostTokenFilter.\n", "des": "Provides various convenience classes for creating boosts on Tokens."}
{"index": 619, "repo": "freemarker-2.3.32", "code": "package core;\n\nInterface DirectiveCallPlace; // Gives information about the place where a directive is called from, also lets you attach a custom data object to that place.\nInterface ParserConfiguration; // Don't implement this interface yourself; use the existing implementation(s).\nInterface TemplateClassResolver; // Used by built-ins and other template language features that get a class based on a string.\nInterface TemplateMarkupOutputModel<MO extends TemplateMarkupOutputModel<MO>>; // \"markup output\" template language data-type; stores markup (some kind of \"rich text\" / structured format, as opposed to plain text) that meant to be printed as template output.\nClass AbstractJSONLikeFormat; // Defines the methods in CFormat that are the same for all JSON-like languages.\nClass AliasTemplateDateFormatFactory; // Creates an alias to another format, so that the format can be referred to with a simple name in the template, rather than as a concrete pattern or other kind of format string.\nClass AliasTemplateNumberFormatFactory; // Creates an alias to another format, so that the format can be referred to with a simple name in the template, rather than as a concrete pattern or other kind of format string.\nClass ArithmeticEngine; // Used for implementing the arithmetic operations and number comparisons in the template language.\nClass ArithmeticEngine.BigDecimalEngine; // This is the default arithmetic engine in FreeMarker.\nClass ArithmeticEngine.ConservativeEngine; // An arithmetic engine that conservatively widens the operation arguments to extent that they can hold the result of the operation.\nClass BuiltInForNodeEx;\nClass CFormat; // Defines a format (usually a computer language) that's used by the c, cn built-ins, and for the \"c\" and \"computer\" number_format, and the \"c\" boolean_format.\nClass CombinedMarkupOutputFormat; // Represents two markup formats nested into each other.\nClass CommandLine; // Will be removed (main method in a library, often classified as CWE-489 \"Leftover Debug Code\").\nClass CommonMarkupOutputFormat<MO extends CommonTemplateMarkupOutputModel>; // Common superclass for implementing MarkupOutputFormat-s that use a CommonTemplateMarkupOutputModel subclass.\n", "des": "The seldom used or advanced parts of the fundamental FreeMarker API, compared to freemarker.template."}
{"index": 348, "repo": "hadoop-hdfs-3.3.6", "code": "package planner;\n\nInterface Planner; // Planner interface allows different planners to be created.\nInterface Step; // A step in the plan.\nClass GreedyPlanner; // Greedy Planner is a simple planner that computes the largest possible move at any point of time given a volumeSet.\nClass MoveStep; // Ignore fields with default values.\nClass NodePlan; // NodePlan is a set of volumeSetPlans.\nClass PlannerFactory; // Returns a planner based on the user defined tags.\n", "des": "Planner takes a DiskBalancerVolumeSet, threshold and computes a series of steps that lead to an even data distribution between volumes of this DiskBalancerVolumeSet."}
{"index": 1501, "repo": "spring-context-6.0.11", "code": "package cache;\n\npackage cache.annotation; // Annotations and supporting classes for declarative cache management.\npackage cache.concurrent; // Implementation package for java.util.concurrent based caches.\npackage cache.config; // Support package for declarative caching configuration, with XML schema being the primary configuration format.\npackage cache.interceptor; // AOP-based solution for declarative caching demarcation.\npackage cache.support; // Support classes for the org.springframework.cache package.\npublic interface Cache; // Interface that defines common cache operations.\npublic static class Cache.ValueRetrievalException extends RuntimeException; // Wrapper exception to be thrown from Cache.get(Object, Callable) in case of the value loader callback failing with an exception.\n@FunctionalInterface public static interface Cache.ValueWrapper; // A (wrapper) object representing a cache value.\npublic interface CacheManager; // Spring's central cache manager SPI.\n", "des": "Spring's generic cache abstraction."}
{"index": 2779, "repo": "spring-security-ldap-6.1.2", "code": "package ldap;\n\npackage ldap.authentication; // The LDAP authentication provider package.\npackage ldap.ppolicy; // Implementation of password policy functionality based on the Password Policy for LDAP Directories.\npackage ldap.search; // LdapUserSearch implementations.\npackage ldap.server; // Embedded Apache Directory Server implementation, as used by the configuration namespace.\npackage ldap.userdetails; // LDAP-focused UserDetails implementations which map from a ubset of the data contained in some of the standard LDAP types (such as InetOrgPerson).\npublic class DefaultLdapUsernameToDnMapper extends Object implements LdapUsernameToDnMapper; // This implementation appends a name component to the userDnBase context using the usernameAttributeName property.\npublic class DefaultSpringSecurityContextSource extends org.springframework.ldap.core.support.LdapContextSource; // ContextSource implementation which uses Spring LDAP's LdapContextSource as a base class.\npublic interface LdapUsernameToDnMapper; // Constructs an Ldap Distinguished Name from a username.\npublic final class LdapUtils extends Object; // LDAP Utility methods.\npublic class SpringSecurityLdapTemplate extends org.springframework.ldap.core.LdapTemplate; // Extension of Spring LDAP's LdapTemplate class which adds extra functionality required by Spring Security.\n", "des": "Spring Security's LDAP module."}
{"index": 354, "repo": "hive-exec-4.0.0-alpha-2", "code": "package errors;\n\nInterface ErrorHeuristic; // Classes implementing ErrorHeuristic are able to generate a possible cause and solution for Hive jobs that have failed by examining the query, task log files, and the job configuration.\nClass DataCorruptErrorHeuristic; // Detects the condition where there is a error with one of the input files in the query.\nClass ErrorAndSolution; // Immutable class for storing a possible error and a resolution suggestion.\nClass MapAggrMemErrorHeuristic; // Detects out-of-memory errors when hash tables in map-based aggregation group by queries take up too much memory.\nClass RegexErrorHeuristic; // Simple heuristic where the query and the lines of the task log file are run through regular expressions to see if they resemble a known error condition.\nClass ScriptErrorHeuristic; // Detects when a query has failed because a user's script that was specified in transform returns a non-zero error code.\nClass TaskLogProcessor; // TaskLogProcessor reads the logs from failed task attempts and tries to figure out what the cause of the error was using various heuristics.\nClass DataConstraintViolationError; // Error class, thrown when arguments's constraints violate.\n", "des": "Generates execution error messages using heuristics."}
{"index": 2311, "repo": "spring-boot-3.1.1", "code": "package init;\n\npublic class DataSourceScriptDatabaseInitializer extends AbstractScriptDatabaseInitializer; // InitializingBean that performs DataSource initialization using schema (DDL) and data (DML) scripts.\npublic class PlatformPlaceholderDatabaseDriverResolver extends Object; // Utility class that can resolve placeholder text with the actual DatabaseDriver platform.\n", "des": "Support for initialization of an SQL database using a JDBC DataSource."}
{"index": 2749, "repo": "spring-batch-infrastructure-5.0.2", "code": "package listener;\n\npublic class CompositeRepeatListener extends Object implements RepeatListener; // Allows a user to register one or more RepeatListeners to be notified on batch events.\n@Deprecated public class RepeatListenerSupport extends Object implements RepeatListener;\n", "des": "Infrastructure implementations of repeat interceptor concerns."}
{"index": 2102, "repo": "spring-webflux-6.0.11", "code": "package method;\n\npackage method.annotation; // Infrastructure for annotation-based handler method processing.\npublic abstract class AbstractHandlerMethodMapping<T> extends AbstractHandlerMapping implements org.springframework.beans.factory.InitializingBean; // Abstract base class for HandlerMapping implementations that define a mapping between a request and a HandlerMethod.\npublic interface HandlerMethodArgumentResolver; // Strategy to resolve the argument value for a method parameter in the context of the current HTTP request.\npublic abstract class HandlerMethodArgumentResolverSupport extends Object implements HandlerMethodArgumentResolver; // Base class for HandlerMethodArgumentResolver implementations with access to a ReactiveAdapterRegistry and methods to check for method parameter support.\npublic class InvocableHandlerMethod extends org.springframework.web.method.HandlerMethod; // Extension of HandlerMethod that invokes the underlying method with argument values resolved from the current HTTP request through a list of HandlerMethodArgumentResolver.\npublic final class RequestMappingInfo extends Object implements RequestCondition<RequestMappingInfo>; // Request mapping information.\npublic static interface RequestMappingInfo.Builder; // Defines a builder for creating a RequestMappingInfo.\npublic static class RequestMappingInfo.BuilderConfiguration extends Object; // Container for configuration options used for request mapping purposes.\npublic abstract class RequestMappingInfoHandlerMapping extends AbstractHandlerMethodMapping<RequestMappingInfo>; // Abstract base class for classes for which RequestMappingInfo defines the mapping between a request and a handler method.\npublic interface SyncHandlerMethodArgumentResolver extends HandlerMethodArgumentResolver; // An extension of HandlerMethodArgumentResolver for implementations that are synchronous in nature and do not block to resolve values.\npublic class SyncInvocableHandlerMethod extends org.springframework.web.method.HandlerMethod; // Extension of HandlerMethod that invokes the underlying method via InvocableHandlerMethod but uses sync argument resolvers only and thus can return directly a HandlerResult with no async wrappers.\n", "des": "Infrastructure for handler method processing."}
{"index": 3452, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface JndiService; // Service providing simplified access to JNDI related features needed by Hibernate.\n", "des": "The SPI contracts for Hibernate JNDI support"}
{"index": 1164, "repo": "commons-math3-3.6.1", "code": "package oned;\n\nClass Euclidean1D; // This class implements a one-dimensional space.\nClass Interval; // This class represents a 1D interval.\nClass IntervalsSet; // This class represents a 1D region: a set of intervals.\nClass OrientedPoint; // This class represents a 1D oriented hyperplane.\nClass SubOrientedPoint; // This class represents sub-hyperplane for OrientedPoint.\nClass Vector1D; // This class represents a 1D vector.\nClass Vector1DFormat; // Formats a 1D vector in components list format \"{x}\".\nClass Euclidean1D.NoSubSpaceException; // Specialized exception for inexistent sub-space.\n", "des": "This package provides basic 1D geometry components."}
{"index": 2141, "repo": "wicket-core-10.0.0-M1", "code": "package feedback;\n\npublic class ComponentFeedbackMessageFilter extends Object implements IFeedbackMessageFilter; // Filter for accepting feedback messages for a particular component.\npublic class ContainerFeedbackMessageFilter extends Object implements IFeedbackMessageFilter; // Filter for child-of relationship\npublic class DefaultCleanupFeedbackMessageFilter extends Object implements IFeedbackMessageFilter; // The default message filter used to cleanup feedback messages.\npublic class ErrorLevelFeedbackMessageFilter extends Object implements IFeedbackMessageFilter; // Filter for accepting feedback messages with minimum level.\npublic class ExactLevelFeedbackMessageFilter extends Object implements IFeedbackMessageFilter; // Filter for accepting feedback messages of a certain error level.\npublic class FeedbackCollector extends Object; // Collects feedback messages from all the places where they can be stored.\npublic class FeedbackDelay extends Object implements Serializable, AutoCloseable; // Postpone calling IFeedback.beforeRender() after other components.\npublic class FeedbackMessage extends Object implements IDetachable; // Represents a generic message meant for the end-user/ pages.\npublic final class FeedbackMessages extends Object implements org.apache.wicket.util.io.IClusterable, Iterable<FeedbackMessage>; // Holds list of feedback messages.\npublic class FeedbackMessagesModel extends Object implements IModel<List<FeedbackMessage>>; // Model for extracting feedback messages.\npublic class FencedFeedbackPanel extends FeedbackPanel; // A specialized feedback panel that only displays messages from inside a fence defined by a container component.\npublic interface IFeedback; // Interface for components that present some kind of feedback to the user, normally based on the feedback messages attached to various components on a given page.\npublic interface IFeedbackContributor; // Implementations of this interface can contribute feedback messages\n@FunctionalInterface public interface IFeedbackMessageFilter extends org.apache.wicket.util.io.IClusterable, Predicate<FeedbackMessage>; // Interface for filtering feedback messages.\n", "des": "Classes related to showing user feedback, generally as the result of form submission and/or validation."}
{"index": 2727, "repo": "spring-batch-infrastructure-5.0.2", "code": "package json;\n\npackage json.builder; // Builders for JSON item reader and writer.\npublic class GsonJsonObjectMarshaller<T> extends Object implements JsonObjectMarshaller<T>; // A json object marshaller that uses Google Gson to marshal an object into a json representation.\npublic class GsonJsonObjectReader<T> extends Object implements JsonObjectReader<T>; // Implementation of JsonObjectReader based on Google Gson.\npublic class JacksonJsonObjectMarshaller<T> extends Object implements JsonObjectMarshaller<T>; // A json object marshaller that uses Jackson to marshal an object into a json representation.\npublic class JacksonJsonObjectReader<T> extends Object implements JsonObjectReader<T>; // Implementation of JsonObjectReader based on Jackson.\npublic class JsonFileItemWriter<T> extends AbstractFileItemWriter<T>; // Item writer that writes data in json format to an output file.\npublic class JsonItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>; // ItemStreamReader implementation that reads Json objects from a Resource having the following format:\npublic interface JsonObjectMarshaller<T>; // Strategy interface to marshal an object into a json representation.\npublic interface JsonObjectReader<T>; // Strategy interface for Json readers.\n", "des": "Infrastructure implementations of JSON input and output."}
{"index": 898, "repo": "commons-jcs3-core-3.1", "code": "package control;\n\nClass CompositeCache<K,V>; // This is the primary hub for a single cache/region.\nClass CompositeCacheConfigurator; // This class configures JCS based on a properties object.\nClass CompositeCacheManager; // Manages a composite cache.\n", "des": "The primary cache classes and the hub."}
{"index": 7, "repo": "connect-api-3.5.0", "code": "package rest;\n\nInterface ConnectRestExtension; // A plugin interface to allow registration of new JAX-RS resources like Filters, REST endpoints, providers, etc.\nInterface ConnectRestExtensionContext; // The interface provides the ability for ConnectRestExtension implementations to access the JAX-RS Configurable and cluster state ConnectClusterState.\n", "des": "Provides a pluggable interface for altering the behavior of the Connect REST API."}
{"index": 1737, "repo": "spring-jdbc-6.0.11", "code": "package rowset;\n\npublic class ResultSetWrappingSqlRowSet extends Object implements SqlRowSet; // The default implementation of Spring's SqlRowSet interface, wrapping a ResultSet, catching any SQLExceptions and translating them to a corresponding Spring InvalidResultSetAccessException.\npublic class ResultSetWrappingSqlRowSetMetaData extends Object implements SqlRowSetMetaData; // The default implementation of Spring's SqlRowSetMetaData interface, wrapping a ResultSetMetaData instance, catching any SQLExceptions and translating them to a corresponding Spring InvalidResultSetAccessException.\npublic interface SqlRowSet extends Serializable; // Mirror interface for RowSet, representing a disconnected variant of ResultSet data.\npublic interface SqlRowSetMetaData; // Metadata interface for Spring's SqlRowSet, analogous to JDBC's ResultSetMetaData.\n", "des": "Provides a convenient holder for disconnected result sets."}
{"index": 455, "repo": "camel-core-3.0.0-RC1", "code": "package loadbalancer;\n\nClass CustomLoadBalancerDefinition; // Custom load balancer\nClass FailoverLoadBalancerDefinition; // Failover load balancer The failover load balancer is capable of trying the next processor in case an Exchange failed with an exception during processing.\nClass RandomLoadBalancerDefinition; // Random load balancer The random load balancer selects a random endpoint for each exchange.\nClass RoundRobinLoadBalancerDefinition; // Round robin load balancer The round robin load balancer will use the next endpoint for each message.\nClass StickyLoadBalancerDefinition; // Sticky load balancer Sticky load balancing using an Expression to calculate a correlation key to perform the sticky load balancing; rather like jsessionid in the web or JMSXGroupID in JMS.\nClass TopicLoadBalancerDefinition; // Topic load balancer The topic load balancer sends to all destinations (rather like JMS Topics)\nClass WeightedLoadBalancerDefinition; // Weighted load balancer The weighted load balancing policy allows you to specify a processing load distribution ratio for each server with respect to others.\n", "des": "The JAXB POJOs for the Load Balancer EIP pattern for the XML Configuration."}
{"index": 2696, "repo": "spring-integration-http-6.1.2", "code": "package inbound;\n\npublic class BaseHttpInboundEndpoint extends org.springframework.integration.gateway.MessagingGatewaySupport implements org.springframework.integration.context.OrderlyShutdownCapable; // The MessagingGatewaySupport extension for HTTP Inbound endpoints with basic properties.\npublic class CrossOrigin extends Object; // The mapping to permit cross origin requests (CORS) for HttpRequestHandlingEndpointSupport.\npublic class HttpRequestHandlingController extends HttpRequestHandlingEndpointSupport implements org.springframework.web.servlet.mvc.Controller; // Inbound HTTP endpoint that implements Spring's Controller interface to be used with a DispatcherServlet front controller.\npublic abstract class HttpRequestHandlingEndpointSupport extends BaseHttpInboundEndpoint; // Base class for HTTP request handling endpoints.\npublic class HttpRequestHandlingMessagingGateway extends HttpRequestHandlingEndpointSupport implements org.springframework.web.HttpRequestHandler; // Inbound Messaging Gateway that handles HTTP Requests.\npublic final class IntegrationRequestMappingHandlerMapping extends org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping implements org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>, org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor; // The HandlerMapping implementation that detects and registers RequestMappingInfos for HttpRequestHandlingEndpointSupport from a Spring Integration HTTP configuration of <inbound-channel-adapter/> and <inbound-gateway/> elements.\npublic class RequestMapping extends Object; // Class for mapping web requests onto specific HttpRequestHandlingEndpointSupport.\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 2442, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package info;\n\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.info.OnEnabledInfoContributorCondition.class) public @interface ConditionalOnEnabledInfoContributor; // @Conditional that checks whether an info contributor is enabled.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration.class) @EnableConfigurationProperties(InfoContributorProperties.class) public class InfoContributorAutoConfiguration extends Object; // Auto-configuration for standard InfoContributors.\npublic enum InfoContributorFallback extends Enum<InfoContributorFallback>; // Controls the fallback behavior when the primary property that controls whether an info contributor is enabled is not set.\n@ConfigurationProperties(\"management.info\") public class InfoContributorProperties extends Object; // Configuration properties for core info contributors.\npublic static class InfoContributorProperties.Git extends Object;\n@AutoConfiguration(after=InfoContributorAutoConfiguration.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.info.InfoEndpoint.class) public class InfoEndpointAutoConfiguration extends Object; // Auto-configuration for the InfoEndpoint.\n", "des": "Auto-configuration for actuator info concerns."}
{"index": 3674, "repo": "solr-core-9.3.0", "code": "package jmx;\n\nInterface JmxMetricsReporter.JmxCounterMBean;\nInterface JmxMetricsReporter.JmxGaugeMBean;\nInterface JmxMetricsReporter.JmxHistogramMBean;\nInterface JmxMetricsReporter.JmxMeterMBean;\nInterface JmxMetricsReporter.JmxTimerMBean;\nInterface JmxMetricsReporter.MetricMBean;\nClass JmxMetricsReporter; // This is a modified copy of Dropwizard's JmxReporter and classes that it internally uses, with a few important differences: this class knows that it can directly use MetricsMap as a dynamic MBean.\nClass JmxMetricsReporter.Builder; // Builder for the JmxMetricsReporter class.\nClass JmxObjectNameFactory; // Factory to create MBean names for a given metric.\n", "des": "This package contains components that support SolrJmxReporter."}
{"index": 3120, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface LazyInitializable; // Hibernate \"wraps\" a java collection in an instance of PersistentCollection.\nInterface PersistentCollection; // Persistent collections are treated as value objects by Hibernate.\n", "des": "SPI definitions for persistent collections"}
{"index": 964, "repo": "spring-ws-3.0.10.RELEASE", "code": "package messageid;\n\nInterface MessageIdStrategy; // Strategy interface that encapsulates the creation and validation of WS-Addressing MessageIDs.\nClass UuidMessageIdStrategy; // Implementation of the MessageIdStrategy interface that uses a UUID to generate a Message Id.\n", "des": "Contains various strategies for generating WS-Addressing MessageIDs."}
{"index": 2778, "repo": "spring-jms-6.0.11", "code": "package destination;\n\npublic class BeanFactoryDestinationResolver extends Object implements DestinationResolver, org.springframework.beans.factory.BeanFactoryAware; // DestinationResolver implementation based on a Spring BeanFactory.\npublic interface CachingDestinationResolver extends DestinationResolver; // Extension of the DestinationResolver interface, exposing methods for clearing the cache.\npublic class DestinationResolutionException extends JmsException; // Thrown by a DestinationResolver when it cannot resolve a destination name.\n@FunctionalInterface public interface DestinationResolver; // Strategy interface for resolving JMS destinations.\npublic class DynamicDestinationResolver extends Object implements DestinationResolver; // Simple DestinationResolver implementation resolving destination names as dynamic destinations.\npublic abstract class JmsDestinationAccessor extends JmsAccessor; // Base class for JmsTemplate and other JMS-accessing gateway helpers, adding destination-related properties to JmsAccessor's common properties.\npublic class JndiDestinationResolver extends org.springframework.jndi.JndiLocatorSupport implements CachingDestinationResolver; // DestinationResolver implementation which interprets destination names as JNDI locations (with a configurable fallback strategy).\n", "des": "Support classes for Spring's JMS framework."}
{"index": 3608, "repo": "lucene-queries-9.7.0", "code": "package payloads;\n\nInterface PayloadDecoder; // Defines a way of converting payloads to float values, for use by PayloadScoreQuery\nInterface PayloadMatcher; // Defines an interface for testing if two payloads should be consider to match\nClass AveragePayloadFunction; // Calculate the final score as the average score of all payloads seen.\nClass MaxPayloadFunction; // Returns the maximum payload score seen, else 1 if there are no payloads on the doc.\nClass MinPayloadFunction; // Calculates the minimum payload seen\nClass PayloadFunction; // An abstract class that defines a way for PayloadScoreQuery instances to transform the cumulative effects of payload scores for a document.\nClass PayloadMatcherFactory; // Creates a payload matcher object based on a payload type and an operation.\nClass PayloadScoreQuery; // A Query class that uses a PayloadFunction to modify the score of a wrapped SpanQuery\nClass SpanPayloadCheckQuery; // Only return those matches that have a specific payload at the given position.\nClass SumPayloadFunction; // Calculate the final score as the sum of scores of all payloads seen.\nEnum SpanPayloadCheckQuery.MatchOperation; // The payload type.\nEnum SpanPayloadCheckQuery.PayloadType; // The payload type.\n", "des": "The payloads package provides Query mechanisms for finding and using payloads."}
{"index": 2259, "repo": "spring-vault-core-3.0.4", "code": "package client;\n\npublic class ClientHttpConnectorFactory extends Object; // Factory for ClientHttpConnector that supports ReactorClientHttpConnector and JettyClientHttpConnector.\npublic static class ClientHttpConnectorFactory.HttpComponents extends Object; // Utility methods to create ClientHttpRequestFactory using Apache Http Components.\npublic static class ClientHttpConnectorFactory.JdkHttpClient extends Object; // ClientHttpRequestFactory using the JDK's HttpClient.\npublic static class ClientHttpConnectorFactory.JettyClient extends Object; // Utility methods to create ClientHttpRequestFactory using the Jetty Client.\npublic static class ClientHttpConnectorFactory.ReactorNetty extends Object; // ClientHttpConnector for Reactor Netty.\npublic class ClientHttpRequestFactoryFactory extends Object; // Factory for ClientHttpRequestFactory that supports Apache HTTP Components, OkHttp, Netty and the JDK HTTP client (in that order).\npublic static class ClientHttpRequestFactoryFactory.HttpComponents extends Object; // Utilities to create a ClientHttpRequestFactory for Apache Http Components.\npublic static class ClientHttpRequestFactoryFactory.OkHttp3 extends Object; // Utilities to create a ClientHttpRequestFactory for the OkHttpClient.\npublic class ReactiveVaultClients extends Object; // Vault Client factory to create WebClient configured to the needs of accessing Vault.\n@FunctionalInterface public interface ReactiveVaultEndpointProvider; // Component that provides reactively a VaultEndpoint.\npublic class RestTemplateBuilder extends Object; // Builder that can be used to configure and create a RestTemplate.\n@FunctionalInterface public interface RestTemplateCustomizer; // Callback interface that can be used to customize a RestTemplate.\n@FunctionalInterface public interface RestTemplateFactory; // Factory interface that produces a RestTemplate object.\n@FunctionalInterface public interface RestTemplateRequestCustomizer<T extends ClientHttpRequest>; // Callback interface that can be used to customize the ClientHttpRequest sent from a RestTemplate.\npublic class SimpleVaultEndpointProvider extends Object implements VaultEndpointProvider; // VaultEndpointProvider returning a static VaultEndpoint.\npublic class VaultClients extends Object; // Vault Client factory to create RestTemplate configured to the needs of accessing Vault.\npublic static class VaultClients.PrefixAwareUriBuilderFactory extends DefaultUriBuilderFactory;\npublic class VaultEndpoint extends Object implements Serializable; // Value object that defines Vault connection coordinates.\n@FunctionalInterface public interface VaultEndpointProvider; // Component that provides a VaultEndpoint.\npublic abstract class VaultHttpHeaders extends Object; // Class providing utility methods to create Vault HTTP headers.\n", "des": "Spring Vault Client abstraction."}
{"index": 2404, "repo": "spring-batch-core-5.0.2", "code": "package step;\n\npackage step.builder; // Step level builders for java based job configuration.\npackage step.factory; // Factories for step level components.\npackage step.item; // Specific implementations of step concerns for item-oriented approach.\npackage step.job; // JobStep and related components.\npackage step.skip; // Specific implementations of skip concerns for items in a step.\npackage step.tasklet; // Interfaces and generic implementations of tasklet concerns.\npublic abstract class AbstractStep extends Object implements Step, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.BeanNameAware; // A Step implementation that provides common behavior to subclasses, including registering and calling listeners.\npublic class FatalStepExecutionException extends UnexpectedJobExecutionException;\npublic class NoSuchStepException extends RuntimeException; // Exception to signal that a step was requested that is unknown or does not exist.\npublic class NoWorkFoundStepExecutionListener extends Object implements StepExecutionListener; // Fails the step if no items have been processed ( item count is 0).\npublic interface StepHolder; // Interface for holders of a Step as a convenience for callers who need access to the underlying instance.\npublic interface StepInterruptionPolicy; // Strategy interface for an interruption policy.\npublic interface StepLocator; // Interface for locating a Step instance by name.\npublic class StepLocatorStepFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Step>; // Convenience factory for Step instances given a StepLocator.\npublic class ThreadStepInterruptionPolicy extends Object implements StepInterruptionPolicy; // Policy that checks the current thread to see if it has been interrupted.\n", "des": "Specific implementations of step concerns."}
{"index": 2026, "repo": "spring-messaging-6.0.11", "code": "package handler;\n\npackage handler.annotation; // Annotations and support classes for handling messages.\npackage handler.invocation; // Common infrastructure for invoking message handler methods.\npublic abstract class AbstractMessageCondition<T extends AbstractMessageCondition<T>> extends Object implements MessageCondition<T>; // Base class for MessageCondition's that pre-declares abstract methods AbstractMessageCondition.getContent() and AbstractMessageCondition.getToStringInfix() in order to provide implementations of AbstractMessageCondition.equals(Object), AbstractMessageCondition.hashCode(), and AbstractMessageCondition.toString().\npublic class CompositeMessageCondition extends Object implements MessageCondition<CompositeMessageCondition>; // Composite MessageCondition that delegates to other message conditions.\npublic class DestinationPatternsMessageCondition extends AbstractMessageCondition<DestinationPatternsMessageCondition>; // MessageCondition to match the destination header of a Message against one or more patterns through a RouteMatcher.\npublic class HandlerMethod extends Object; // Encapsulates information about a handler method consisting of a method and a bean.\npublic interface MessageCondition<T>; // Contract for mapping conditions to messages.\npublic interface MessagingAdviceBean extends org.springframework.core.Ordered; // Represents a Spring-managed bean with cross-cutting functionality to be applied to one or more Spring beans with annotation-based message handling methods.\n", "des": "Basic abstractions for working with message handler methods."}
{"index": 669, "repo": "commons-lang3-3.12.0", "code": "package exception;\n\nInterface ExceptionContext; // Allows the storage and retrieval of contextual information based on label-value pairs for exceptions.\nClass DefaultExceptionContext; // Default implementation of the context storing the label-value pairs for contexted exceptions.\nClass ExceptionUtils; // Provides utilities for manipulating and examining Throwable objects.\nClass CloneFailedException; // Exception thrown when a clone cannot be created.\nClass ContextedException; // An exception that provides an easy and safe way to add contextual information.\nClass ContextedRuntimeException; // A runtime exception that provides an easy and safe way to add contextual information.\n", "des": "Provides functionality for Exceptions."}
{"index": 3082, "repo": "spring-ws-core-4.0.5", "code": "package saaj;\n\npackage saaj.support; // Support classes for working with the SOAP with Attachments API for Java (SAAJ).\npublic class SaajAttachmentException extends AttachmentException;\npublic class SaajSoapBodyException extends SoapBodyException;\npublic class SaajSoapElementException extends SoapElementException;\npublic class SaajSoapEnvelopeException extends SoapEnvelopeException;\npublic class SaajSoapFaultException extends SoapFaultException;\npublic class SaajSoapHeaderException extends SoapHeaderException;\npublic class SaajSoapMessage extends AbstractSoapMessage; // SAAJ-specific implementation of the SoapMessage interface.\npublic class SaajSoapMessageCreationException extends SoapMessageCreationException;\npublic class SaajSoapMessageException extends SoapMessageException;\npublic class SaajSoapMessageFactory extends Object implements SoapMessageFactory, org.springframework.beans.factory.InitializingBean; // SAAJ-specific implementation of the WebServiceMessageFactory.\n", "des": "SOAP with Attachments API for Java (SAAJ) support for Spring-WS soap message infrastructure."}
{"index": 2538, "repo": "spring-security-core-6.1.2", "code": "package userdetails;\n\npackage userdetails.cache; // Implementations of UserCache.\npackage userdetails.jdbc; // Exposes a JDBC-based authentication repository, implementing org.springframework.security.core.userdetails.UserDetailsService UserDetailsService.\npackage userdetails.memory; // Exposes an in-memory authentication repository.\npublic interface AuthenticationUserDetailsService<T extends Authentication>; // Interface that allows for retrieving a UserDetails object based on an Authentication object.\npublic class MapReactiveUserDetailsService extends Object implements ReactiveUserDetailsService, ReactiveUserDetailsPasswordService; // A Map based implementation of ReactiveUserDetailsService\npublic interface ReactiveUserDetailsPasswordService; // An API for changing a UserDetails password.\npublic interface ReactiveUserDetailsService; // An API for finding the UserDetails by username.\npublic class User extends Object implements UserDetails, CredentialsContainer; // Models core user information retrieved by a UserDetailsService.\npublic static final class User.UserBuilder extends Object; // Builds the user to be added.\npublic interface UserCache; // Provides a cache of UserDetails objects.\npublic interface UserDetails extends Serializable; // Provides core user information.\npublic class UserDetailsByNameServiceWrapper<T extends Authentication> extends Object implements AuthenticationUserDetailsService<T>, org.springframework.beans.factory.InitializingBean; // This implementation for AuthenticationUserDetailsService wraps a regular Spring Security UserDetailsService implementation, to retrieve a UserDetails object based on the user name contained in an Authentication object.\npublic interface UserDetailsChecker; // Called by classes which make use of a UserDetailsService to check the status of the loaded UserDetails object.\npublic interface UserDetailsPasswordService; // An API for changing a UserDetails password.\npublic interface UserDetailsService; // Core interface which loads user-specific data.\npublic class UsernameNotFoundException extends AuthenticationException; // Thrown if an UserDetailsService implementation cannot locate a User by its username.\n", "des": "The standard interfaces for implementing user data DAOs."}
{"index": 3768, "repo": "lucene-analysis-common-9.7.0", "code": "package cjk;\n\nClass CJKAnalyzer; // An Analyzer that tokenizes text with StandardTokenizer, normalizes content with CJKWidthFilter, folds case with LowerCaseFilter, forms bigrams of CJK with CJKBigramFilter, and filters stopwords with StopFilter\nClass CJKBigramFilter; // Forms bigrams of CJK terms that are generated from StandardTokenizer or ICUTokenizer.\nClass CJKBigramFilterFactory; // Factory for CJKBigramFilter.\nClass CJKWidthCharFilter; // A CharFilter that normalizes CJK width differences: Folds fullwidth ASCII variants into the equivalent basic latin Folds halfwidth Katakana variants into the equivalent kana\nClass CJKWidthCharFilterFactory; // Factory for CJKWidthCharFilter.\nClass CJKWidthFilter; // A TokenFilter that normalizes CJK width differences: Folds fullwidth ASCII variants into the equivalent basic latin Folds halfwidth Katakana variants into the equivalent kana\nClass CJKWidthFilterFactory; // Factory for CJKWidthFilter.\n", "des": "Analyzer for Chinese, Japanese, and Korean, which indexes bigrams."}
{"index": 1584, "repo": "spring-security-oauth2-client-6.1.2", "code": "package web;\n\npublic final class AuthenticatedPrincipalOAuth2AuthorizedClientRepository extends Object implements OAuth2AuthorizedClientRepository; // An implementation of an OAuth2AuthorizedClientRepository that delegates to the provided OAuth2AuthorizedClientService if the current Principal is authenticated, otherwise, to the default (or provided) OAuth2AuthorizedClientRepository if the current request is unauthenticated (or anonymous).\npublic interface AuthorizationRequestRepository<T extends org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest>; // Implementations of this interface are responsible for the persistence of OAuth2AuthorizationRequest between requests.\npublic final class DefaultOAuth2AuthorizationRequestResolver extends Object implements OAuth2AuthorizationRequestResolver; // An implementation of an OAuth2AuthorizationRequestResolver that attempts to resolve an OAuth2AuthorizationRequest from the provided HttpServletRequest using the default request URI pattern /oauth2/authorization/{registrationId}.\npublic final class DefaultOAuth2AuthorizedClientManager extends Object implements OAuth2AuthorizedClientManager; // The default implementation of an OAuth2AuthorizedClientManager for use within the context of a HttpServletRequest.\npublic static class DefaultOAuth2AuthorizedClientManager.DefaultContextAttributesMapper extends Object implements Function<OAuth2AuthorizeRequest,Map<String,Object>>; // The default implementation of the contextAttributesMapper.\npublic final class DefaultReactiveOAuth2AuthorizedClientManager extends Object implements ReactiveOAuth2AuthorizedClientManager; // The default implementation of a ReactiveOAuth2AuthorizedClientManager for use within the context of a ServerWebExchange.\npublic static class DefaultReactiveOAuth2AuthorizedClientManager.DefaultContextAttributesMapper extends Object implements Function<OAuth2AuthorizeRequest,reactor.core.publisher.Mono<Map<String,Object>>>; // The default implementation of the contextAttributesMapper.\npublic final class HttpSessionOAuth2AuthorizationRequestRepository extends Object implements AuthorizationRequestRepository<org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest>; // An implementation of an AuthorizationRequestRepository that stores OAuth2AuthorizationRequest in the HttpSession.\npublic final class HttpSessionOAuth2AuthorizedClientRepository extends Object implements OAuth2AuthorizedClientRepository; // An implementation of an OAuth2AuthorizedClientRepository that stores OAuth2AuthorizedClient's in the HttpSession.\n", "des": "OAuth 2.0 Client Filter's and supporting classes and interfaces."}
{"index": 301, "repo": "pdfbox-3.0.0-beta1", "code": "package action;\n\nClass PDAction; // This represents an action that can be executed in a PDF document.\nClass PDActionEmbeddedGoTo; // This represents a embedded go-to action that can be executed in a PDF document.\nClass PDActionFactory; // This class will take a dictionary and determine which type of action to create.\nClass PDActionGoTo; // This represents a go-to action that can be executed in a PDF document.\nClass PDActionHide; // This represents a thread action that can be executed in a PDF document.\nClass PDActionImportData;\nClass PDActionJavaScript; // This represents a JavaScript action.\nClass PDActionLaunch; // This represents a launch action that can be executed in a PDF document.\nClass PDActionMovie;\nClass PDActionNamed; // This represents a named action in a PDF document.\nClass PDActionRemoteGoTo; // This represents a remote go-to action that can be executed in a PDF document.\nClass PDActionResetForm;\nClass PDActionSound; // This represents a Sound action that can be executed in a PDF document.\nClass PDActionSubmitForm; // This represents a Submit-Form action that can be executed in a PDF document.\nClass PDActionThread; // This represents a thread action that can be executed in a PDF document.\nClass PDActionURI; // This represents a URI action that can be executed in a PDF document.\nClass PDAdditionalActions; // This represents a dictionary of actions that occur due to events.\nClass PDAnnotationAdditionalActions; // This class represents an annotation's dictionary of actions that occur due to events.\nClass PDDocumentCatalogAdditionalActions; // This class represents a document catalog's dictionary of actions that occur due to events.\nClass PDFormFieldAdditionalActions; // This class represents a form field's dictionary of actions that occur due to events.\nClass PDPageAdditionalActions; // This class represents a page object's dictionary of actions that occur due to events.\nClass PDTargetDirectory; // A target dictionary specifying path information to the target document.\nClass PDURIDictionary; // This is the implementation of an URI dictionary.\nClass PDWindowsLaunchParams; // Launch parameters for the windows OS.\nEnum OpenMode; // This will specify whether to open the destination document in a new window.\n", "des": "This package represents actions that can be performed in a PDF document."}
{"index": 2584, "repo": "spring-rabbit-3.0.6", "code": "package rabbit;\n\npackage rabbit.annotation; // Annotations and supporting classes for declarative Rabbit listener endpoint\npackage rabbit.aot; // Provides classes to support Spring AOT.\npackage rabbit.batch; // Provides classes for message batching.\npackage rabbit.config; // Provides classes supporting the Rabbit XML namespace.\npackage rabbit.connection; // Provides classes related to connections.\npackage rabbit.core; // Provides core classes for Spring Rabbit.\npackage rabbit.listener; // Provides classes for message listener containers.\npackage rabbit.log4j2; // Provides classes supporting Log4j 2 appenders.\npackage rabbit.logback; // Provides classes supporting Logback appenders.\npackage rabbit.retry; // Provides classes supporting retries.\npackage rabbit.support; // Provides support classes for Spring Rabbit.\npackage rabbit.transaction; // Provides classes supporting transactions in Spring Rabbit.\npublic class AsyncRabbitTemplate extends Object implements org.springframework.amqp.core.AsyncAmqpTemplate, ChannelAwareMessageListener, RabbitTemplate.ReturnsCallback, RabbitTemplate.ConfirmCallback, org.springframework.beans.factory.BeanNameAware, org.springframework.context.SmartLifecycle; // Provides asynchronous send and receive operations returning a CompletableFuture allowing the caller to obtain the reply later, using get() or a callback.\npublic class RabbitConverterFuture<C> extends RabbitFuture<C>; // A RabbitFuture with a return type of the template's generic parameter.\npublic abstract class RabbitFuture<T> extends CompletableFuture<T>; // Base class for CompletableFutures returned by AsyncRabbitTemplate.\npublic class RabbitMessageFuture extends RabbitFuture<org.springframework.amqp.core.Message>; // A RabbitFuture with a return type of Message.\npublic class TimeoutTask extends Object implements Runnable; // A Runnable used to time out a RabbitFuture.\n", "des": "Provides top-level classes for Spring Rabbit."}
{"index": 1326, "repo": "groovy-all-4.0.13", "code": "package ant;\n\npublic class AntProjectPropertiesDelegate extends Hashtable<String,Object>;\npublic abstract class CompileTaskSupport extends org.apache.tools.ant.taskdefs.MatchingTask; // Support for compilation related tasks.\npublic class FileIterator extends Object implements Iterator<File>; // FileIterator is an iterator over a number of files from a collection of FileSet instances.\npublic class FileScanner extends org.apache.tools.ant.Task; // FileScanner is a bean which allows the iteration over a number of files from a collection of FileSet instances.\npublic class FileSystemCompilerFacade extends Object; // This is a helper class, to provide a controlled entry point for the groovyc ant task forked mode.\npublic class GenerateStubsTask extends CompileTaskSupport; // Generates Java stubs from Groovy sources.\npublic class Groovy extends org.apache.tools.ant.taskdefs.Java; // Executes a series of Groovy statements.\npublic class Groovyc extends org.apache.tools.ant.taskdefs.MatchingTask; // Compiles Groovy source files using Ant.\npublic class GroovycTask extends CompileTaskSupport; // Compiles Groovy source files.\npublic class Groovydoc extends org.apache.tools.ant.Task; // Access to the GroovyDoc tool from Ant.\npublic class LoggingHelper extends Object; // Helper to make logging from Ant easier.\npublic class RootLoaderRef extends org.apache.tools.ant.taskdefs.MatchingTask; // Sets the RootLoader as reference.\npublic class UberCompileTask extends org.apache.tools.ant.Task; // Compiles Java and Groovy source files.\npublic class VerifyClass extends org.apache.tools.ant.taskdefs.MatchingTask; // Verify Class files.\n", "des": "Ant tasks for working with Groovy - such as groovyc for compiling Groovy source code to Java bytecode"}
{"index": 796, "repo": "lucene-analyzers-common-8.11.2", "code": "package path;\n\nClass PathHierarchyTokenizer; // Tokenizer for path-like hierarchies.\nClass PathHierarchyTokenizerFactory; // Factory for PathHierarchyTokenizer.\nClass ReversePathHierarchyTokenizer; // Tokenizer for domain-like hierarchies.\n", "des": "Analysis components for path-like strings such as filenames."}
{"index": 3832, "repo": "lucene-highlighter-9.7.0", "code": "package uhighlight;\n\nInterface CharArrayMatcher; // Matches a character array\nInterface LabelledCharArrayMatcher; // Associates a label with a CharArrayMatcher to distinguish different sources for terms in highlighting\nClass AnalysisOffsetStrategy; // Provides a base class for analysis based offset strategies to extend from.\nClass CustomSeparatorBreakIterator; // A BreakIterator that breaks the text whenever a certain separator, provided as a constructor argument, is found.\nClass DefaultPassageFormatter; // Creates a formatted snippet from the top passages.\nClass FieldHighlighter; // Internal highlighter abstraction that operates on a per field basis.\nClass FieldOffsetStrategy; // Ultimately returns an OffsetsEnum yielding potentially highlightable words in the text.\nClass LengthGoalBreakIterator; // Wraps another BreakIterator to skip past breaks that would result in passages that are too short.\nClass MemoryIndexOffsetStrategy; // Uses an Analyzer on content to get offsets and then populates a MemoryIndex.\nClass NoOpOffsetStrategy; // Never returns offsets.\nClass OffsetsEnum; // An enumeration/iterator of a term and its offsets for use by FieldHighlighter.\nClass OffsetsEnum.MultiOffsetsEnum; // A view over several OffsetsEnum instances, merging them in-place\nClass OffsetsEnum.OfMatchesIterator; // Based on a MatchesIterator; does not look at submatches.\nClass OffsetsEnum.OfMatchesIteratorWithSubs; // Based on a MatchesIterator with submatches.\nClass OffsetsEnum.OfPostings; // Based on a PostingsEnum -- the typical/standard OE impl.\nClass OverlaySingleDocTermsLeafReader; // Overlays a 2nd LeafReader for the terms of one field, otherwise the primary reader is consulted.\nClass Passage; // Represents a passage (typically a sentence of the document).\nClass PassageFormatter; // Creates a formatted snippet from the top passages.\nClass PassageScorer; // Ranks passages found by UnifiedHighlighter.\nClass PhraseHelper; // Helps the FieldOffsetStrategy with position sensitive queries (e.g.\nClass PostingsOffsetStrategy; // Uses offsets in postings -- IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS.\n", "des": "The UnifiedHighlighter -- a flexible highlighter that can get offsets from postings, term vectors, or analysis."}
{"index": 353, "repo": "hive-exec-4.0.0-alpha-2", "code": "package exec;\n\npackage exec.errors; // Generates execution error messages using heuristics.\nInterface BucketMatcher;\nInterface DynamicValueRegistry;\nInterface FileSinkOperator.RecordWriter; // RecordWriter.\nInterface HashTableLoader; // HashTableLoader is an interface used by MapJoinOperator used to load the hashtables needed to process the join.\nInterface IConfigureJobConf; // Enables an operator to be able to make changes to the JobConf.\nInterface NodeUtils.Function<T>;\nInterface ObjectCache; // ObjectCache.\nInterface Operator.OperatorFunc; // OperatorFunc.\nInterface PTFPartition.PTFPartitionIterator<T>;\nInterface RecordReader; // RecordReader.\nInterface RecordWriter; // RecordWriter.\nInterface TopNHash.BinaryCollector; // For interaction between operator and top-n hash.\nInterface Utilities.SupplierWithCheckedException<T,X extends Exception>;\nClass AbstractFileMergeOperator<T extends FileMergeDesc>; // Fast file merge operator for ORC and RCfile.\nClass AbstractMapJoinOperator<T extends MapJoinDesc>;\nClass AbstractMapOperator; // Abstract Map operator.\nClass AddToClassPathAction; // Helper class to create UDFClassLoader when running under a security manager.\nClass AppMasterEventOperator; // AppMasterEventOperator sends any rows it receives to the Tez AM.\nClass ArchiveUtils; // ArchiveUtils.\nClass ArchiveUtils.HarPathHelper; // HarPathHelper helps to create har:/ URIs for locations inside of archive.\nClass ArchiveUtils.PartSpecInfo; // PartSpecInfo keeps fields and values extracted from partial partition info which is prefix of the full info.\nClass AutoProgressor; // AutoProgressor periodically sends updates to the job tracker so that it doesn't consider this task attempt dead if there is a long period of inactivity.\nClass BinaryRecordReader; // Read from a binary stream and treat each 1000 bytes (configurable via hive.binary.record.max.length) as a record.\nClass BoundaryCache; // Cache for storing boundaries found within a partition - used for PTF functions.\nClass ByteWritable;\nClass ByteWritable.Comparator; // A Comparator optimized for BytesWritable.\nClass CollectOperator; // Buffers rows emitted by other operators.\n", "des": "Hive QL execution tasks, operators, functions and other handlers."}
{"index": 1381, "repo": "spring-boot-actuator-3.1.1", "code": "package redis;\n\npublic class RedisHealthIndicator extends AbstractHealthIndicator; // Simple implementation of a HealthIndicator returning status information for Redis data stores.\npublic class RedisReactiveHealthIndicator extends AbstractReactiveHealthIndicator; // A ReactiveHealthIndicator for Redis.\n", "des": "Actuator support for Redis dependent on Spring Data."}
{"index": 1944, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package metadata;\n\n@Configuration(proxyBeanMethods=false) public class DataSourcePoolMetadataProvidersConfiguration extends Object; // Register the DataSourcePoolMetadataProvider instances for the supported data sources.\n", "des": "Auto-configuration for JDBC Metadata."}
{"index": 1906, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package context;\n\n@AutoConfiguration @EnableConfigurationProperties public class ConfigurationPropertiesAutoConfiguration extends Object; // Auto-configuration for @ConfigurationProperties beans.\n@AutoConfiguration @EnableConfigurationProperties(LifecycleProperties.class) public class LifecycleAutoConfiguration extends Object; // Auto-configuration relating to the application context's lifecycle.\n@ConfigurationProperties(prefix=\"spring.lifecycle\") public class LifecycleProperties extends Object; // Configuration properties for lifecycle processing.\n@AutoConfiguration @ConditionalOnMissingBean(name=\"messageSource\", search=CURRENT) @AutoConfigureOrder(-2147483648) @Conditional(ResourceBundleCondition.class) @EnableConfigurationProperties public class MessageSourceAutoConfiguration extends Object; // Auto-configuration for MessageSource.\nprotected static class MessageSourceAutoConfiguration.ResourceBundleCondition extends SpringBootCondition;\npublic class MessageSourceProperties extends Object; // Configuration properties for Message Source.\n@AutoConfiguration @AutoConfigureOrder(-2147483648) public class PropertyPlaceholderAutoConfiguration extends Object; // Auto-configuration for PropertySourcesPlaceholderConfigurer.\n", "des": "Auto-configuration for the Spring context."}
{"index": 2115, "repo": "spring-retry-2.0.2", "code": "package context;\n\npublic class RetryContextSupport extends org.springframework.core.AttributeAccessorSupport implements RetryContext;\n", "des": "Infrastructure implementations of retry context concerns."}
{"index": 2716, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateCursorItemReaderBuilder<T> extends Object;\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateItemWriterBuilder<T> extends Object;\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernatePagingItemReaderBuilder<T> extends Object;\npublic class JdbcBatchItemWriterBuilder<T> extends Object; // A builder implementation for the JdbcBatchItemWriter.\npublic class JdbcCursorItemReaderBuilder<T> extends Object; // Builder for the JdbcCursorItemReader\npublic class JdbcPagingItemReaderBuilder<T> extends Object; // This is a builder for the JdbcPagingItemReader.\npublic class JpaCursorItemReaderBuilder<T> extends Object; // Builder for JpaCursorItemReader.\npublic class JpaItemWriterBuilder<T> extends Object; // A builder for the JpaItemWriter.\npublic class JpaPagingItemReaderBuilder<T> extends Object; // Creates a fully qualified JpaPagingItemReader.\npublic class StoredProcedureItemReaderBuilder<T> extends Object; // A fluent builder API for the configuration of a StoredProcedureItemReader.\n", "des": "Builders for database item readers and writers."}
{"index": 2896, "repo": "spring-integration-core-6.1.2", "code": "package util;\n\npublic abstract class AbstractExpressionEvaluator extends Object implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean;\npublic class AcceptOnceCollectionFilter<T> extends Object implements CollectionFilter<T>; // An implementation of CollectionFilter that remembers the elements passed in the previous invocation in order to avoid returning those elements more than once.\npublic class AnnotatedMethodFilter extends Object implements org.springframework.expression.MethodFilter; // A MethodFilter implementation that enables the following: matching on method name, if available exclusion of void-returning methods if 'requiresReply' is true limiting to annotated methods if at least one is present .\npublic class BeanFactoryTypeConverter extends Object implements org.springframework.expression.TypeConverter, org.springframework.beans.factory.BeanFactoryAware;\npublic class CallerBlocksPolicy extends Object implements RejectedExecutionHandler; // A RejectedExecutionHandler that blocks the caller until the executor has room in its queue, or a timeout occurs (in which case a RejectedExecutionException is thrown.\n@FunctionalInterface public interface CheckedFunction<T,R>; // A Function-like interface which allows throwing Error.\npublic abstract class ClassUtils extends Object;\npublic interface CloseableIterator<E> extends Iterator<E>, AutoCloseable; // A CloseableIterator is intended to be used when it may hold resources (such as file or socket handles).\n@FunctionalInterface public interface CollectionFilter<T>; // Base strategy for filtering out a subset of a Collection of elements.\npublic class CompositeExecutor extends Object implements Executor; // An Executor that encapsulates two underlying executors.\npublic class CompoundTrigger extends Object implements org.springframework.scheduling.Trigger; // A Trigger that delegates the Trigger.nextExecutionTime(TriggerContext) to one of two Triggers.\npublic final class CoroutinesUtils extends Object; // Additional utilities for working with Kotlin Coroutines.\npublic class DynamicPeriodicTrigger extends Object implements org.springframework.scheduling.Trigger; // This is a dynamically changeable Trigger.\npublic class ErrorHandlingTaskExecutor extends Object implements org.springframework.core.task.TaskExecutor; // A TaskExecutor implementation that wraps an existing Executor instance in order to catch any exceptions.\n", "des": "Provides core utility classes."}
{"index": 1396, "repo": "spring-boot-actuator-3.1.1", "code": "package servlet;\n\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping.AbstractWebMvcEndpointHandlerMappingRuntimeHints.class) public abstract class AbstractWebMvcEndpointHandlerMapping extends org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping implements org.springframework.beans.factory.InitializingBean; // A custom HandlerMapping that makes web endpoints available over HTTP using Spring MVC.\n@FunctionalInterface protected static interface AbstractWebMvcEndpointHandlerMapping.LinksHandler; // Handler providing actuator links at the root endpoint.\n@FunctionalInterface protected static interface AbstractWebMvcEndpointHandlerMapping.ServletWebOperation; // A servlet web operation that can be handled by Spring MVC.\npublic class AdditionalHealthEndpointPathsWebMvcHandlerMapping extends AbstractWebMvcEndpointHandlerMapping; // A custom HandlerMapping that allows health groups to be mapped to an additional path.\npublic class ControllerEndpointHandlerMapping extends org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping; // HandlerMapping that exposes @ControllerEndpoint and @RestControllerEndpoint annotated endpoints over Spring MVC.\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.servlet.WebMvcEndpointHandlerMapping.WebMvcEndpointHandlerMappingRuntimeHints.class) public class WebMvcEndpointHandlerMapping extends AbstractWebMvcEndpointHandlerMapping; // A custom HandlerMapping that makes web endpoints available over HTTP using Spring MVC.\n", "des": "Spring MVC support for actuator endpoints."}
{"index": 425, "repo": "mahout-mr-0.13.0", "code": "package ep;\n\nInterface EvolutionaryProcess.Function<T>;\nInterface Payload<T>; // Payloads for evolutionary state must be copyable and updatable.\nClass EvolutionaryProcess<T extends Payload<U>,U>; // Allows evolutionary optimization where the state function can't be easily packaged for the optimizer to execute.\nClass Mapping; // Provides coordinate tranformations so that evolution can proceed on the entire space of reals but have the output limited and squished in convenient (and safe) ways.\nClass Mapping.Exponential;\nClass Mapping.Identity;\nClass Mapping.LogLimit;\nClass Mapping.SoftLimit;\nClass State<T extends Payload<U>,U>; // Records evolutionary state and provides a mutation operation for recorded-step meta-mutation.\n", "des": "Provides basic evolutionary optimization using recorded-step mutation."}
{"index": 1663, "repo": "jena-core-4.9.0", "code": "package impl;\n\npublic class JenaParameters extends Object; // This class holds global, static, configuration parameters that affect the behaviour of the Jena API.\npublic class PrefixMappingImpl extends Object implements PrefixMapping; // An implementation of PrefixMapping.\n", "des": "This package provides \"standard\" implementations for the interfaces defined by .shared, notably an implementation of PrefixMapping."}
{"index": 3214, "repo": "commons-configuration2-2.9.0", "code": "package builder;\n\npackage builder.combined; // A package containing the implementation of the builder for combined configurations.\npackage builder.fluent; // This package defines a fluent API for setting up fully configured configuration builders.\nInterface BasicBuilderProperties<T>; // Definition of a properties interface for basic parameters which are supported by all ConfigurationBuilder implementations derived from BasicConfigurationBuilder.\nInterface BuilderParameters; // An interface to be implemented by objects which can be used to parameterize a ConfigurationBuilder.\nInterface ConfigurationBuilder<T extends ImmutableConfiguration>; // Definition of an interface for objects that can create ImmutableConfiguration or Configuration objects of a specific type.\nInterface DatabaseBuilderProperties<T>; // Definition of a properties interface for parameters of a database configuration.\nInterface DefaultParametersHandler<T>; // Definition of an interface for setting default values for specific configuration parameter objects.\nInterface EventListenerProvider; // Definition of an interface that is evaluated by a ConfigurationBuilder to initialize event listeners.\nInterface FileBasedBuilderProperties<T>; // Definition of a properties interface for parameters of file-based configurations.\nInterface HierarchicalBuilderProperties<T>; // Definition of a parameters interface for hierarchical configurations.\nInterface INIBuilderProperties<T>; // Definition of a parameters interface for INI configurations.\nInterface JndiBuilderProperties<T>; // Definition of a properties interface for parameters of a JNDI configuration.\nInterface PropertiesBuilderProperties<T>; // Definition of a parameters interface for properties configurations.\nInterface ReloadingDetectorFactory; // Definition of an interface for objects which can create a ReloadingDetector.\nInterface XMLBuilderProperties<T>; // Definition of a parameters interface for XML configurations.\nClass BasicBuilderParameters; // An implementation of BuilderParameters which handles the parameters of a ConfigurationBuilder common to all concrete Configuration implementations.\nClass BasicConfigurationBuilder<T extends ImmutableConfiguration>; // An implementation of the ConfigurationBuilder interface which is able to create different concrete ImmutableConfiguration implementations based on reflection.\nClass BuilderConfigurationWrapperFactory; // A class that allows the creation of configuration objects wrapping a ConfigurationBuilder.\nClass ConfigurationBuilderEvent; // A base event class for events generated by a ConfigurationBuilder.\nClass ConfigurationBuilderResultCreatedEvent; // A specialized event class which is generated by a ConfigurationBuilder when a result configuration has been created.\n", "des": "This package contains the implementations of configuration builder classes used to create new Configuration objects."}
{"index": 3155, "repo": "tika-core-2.8.0", "code": "package exception;\n\nClass ZeroByteFileException.IgnoreZeroByteFileException;\nClass AccessPermissionException; // Exception to be thrown when a document does not allow content extraction.\nClass CorruptedFileException; // This exception should be thrown when the parse absolutely, positively has to stop.\nClass EncryptedDocumentException;\nClass FileTooLongException;\nClass RuntimeSAXException; // Use this to throw a SAXException in subclassed methods that don't throw SAXExceptions\nClass TikaConfigException; // Tika Config Exception is an exception to occur when there is an error in Tika config file and/or one or more of the parsers failed to initialize from that erroneous config.\nClass TikaException; // Tika exception\nClass TikaMemoryLimitException;\nClass TikaTimeoutException; // Runtime/unchecked version of TimeoutException\nClass UnsupportedFormatException; // Parsers should throw this exception when they encounter a file format that they do not support.\nClass WriteLimitReachedException;\nClass ZeroByteFileException; // Exception thrown by the AutoDetectParser when a file contains zero-bytes.\n", "des": "Tika exception."}
{"index": 2980, "repo": "pulsar-broker-3.0.0", "code": "package recover;\n\npublic class TransactionRecoverTrackerImpl extends Object implements TransactionRecoverTracker; // The transaction recover tracker implementation TransactionRecoverTracker.\n", "des": "Implementation of a transaction recover tracker."}
{"index": 3733, "repo": "lucene-queryparser-9.7.0", "code": "package messages;\n\nClass QueryParserMessages; // Flexible Query Parser message bundle class\n", "des": "Messages usually used by query parser implementations."}
{"index": 2701, "repo": "spring-integration-ftp-6.1.2", "code": "package config;\n\npublic class FtpInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileInboundChannelAdapterParser; // Parser for the FTP 'inbound-channel-adapter' element.\npublic class FtpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Provides namespace support for using FTP\npublic class FtpOutboundChannelAdapterParser extends org.springframework.integration.file.config.RemoteFileOutboundChannelAdapterParser; // Parser for FTP Outbound Channel Adapters.\npublic class FtpOutboundGatewayParser extends org.springframework.integration.file.config.AbstractRemoteFileOutboundGatewayParser;\npublic class FtpStreamingInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileStreamingInboundChannelAdapterParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 2760, "repo": "spring-beans-6.0.11", "code": "package parsing;\n\npublic abstract class AbstractComponentDefinition extends Object implements ComponentDefinition; // Base implementation of ComponentDefinition that provides a basic implementation of AbstractComponentDefinition.getDescription() which delegates to ComponentDefinition.getName().\npublic class AliasDefinition extends Object implements BeanMetadataElement; // Representation of an alias that has been registered during the parsing process.\npublic class BeanComponentDefinition extends BeanDefinitionHolder implements ComponentDefinition; // ComponentDefinition based on a standard BeanDefinition, exposing the given bean definition as well as inner bean definitions and bean references for the given bean.\npublic class BeanDefinitionParsingException extends BeanDefinitionStoreException; // Exception thrown when a bean definition reader encounters an error during the parsing process.\npublic class BeanEntry extends Object implements ParseState.Entry; // ParseState entry representing a bean definition.\npublic interface ComponentDefinition extends BeanMetadataElement; // Interface that describes the logical view of a set of BeanDefinitions and BeanReferences as presented in some configuration context.\npublic class CompositeComponentDefinition extends AbstractComponentDefinition; // ComponentDefinition implementation that holds one or more nested ComponentDefinition instances, aggregating them into a named group of components.\npublic class ConstructorArgumentEntry extends Object implements ParseState.Entry; // ParseState entry representing a (possibly indexed) constructor argument.\npublic interface DefaultsDefinition extends BeanMetadataElement; // Marker interface for a defaults definition, extending BeanMetadataElement to inherit source exposure.\npublic class EmptyReaderEventListener extends Object implements ReaderEventListener; // Empty implementation of the ReaderEventListener interface, providing no-op implementations of all callback methods.\npublic class FailFastProblemReporter extends Object implements ProblemReporter; // Simple ProblemReporter implementation that exhibits fail-fast behavior when errors are encountered.\npublic class ImportDefinition extends Object implements BeanMetadataElement; // Representation of an import that has been processed during the parsing process.\npublic class Location extends Object; // Class that models an arbitrary location in a resource.\npublic class NullSourceExtractor extends Object implements SourceExtractor; // Simple implementation of SourceExtractor that returns null as the source metadata.\npublic final class ParseState extends Object; // Simple ArrayDeque-based structure for tracking the logical position during a parsing process.\npublic static interface ParseState.Entry; // Marker interface for entries into the ParseState.\npublic class PassThroughSourceExtractor extends Object implements SourceExtractor; // Simple SourceExtractor implementation that just passes the candidate source metadata object through for attachment.\n", "des": "Support infrastructure for bean definition parsing."}
{"index": 552, "repo": "hadoop-common-3.3.4", "code": "package fs;\n\npackage fs.audit; // Public classes for adding information to any auditing information picked up by filesystem clients.\npackage fs.http; // Filesystem implementations that allow Hadoop to read directly from HTTP / HTTPS endpoints.\npackage fs.protocolPB; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage fs.sftp; // SFTP FileSystem package.\npackage fs.statistics; // This package contains support for statistic collection and reporting.\nInterface Abortable; // Abort data being written to a stream, so that close() does not write the data.\nInterface Abortable.AbortableResult; // Interface for the result of aborts; allows subclasses to extend (IOStatistics etc) or for future enhancements if ever needed.\nInterface BatchedRemoteIterator.BatchedEntries<E>;\nInterface BatchListingOperations; // Interface filesystems MAY implement to offer a batched list.\nInterface BlockStoragePolicySpi; // A storage policy specifies the placement of block replicas on specific storage types.\nInterface ByteBufferPositionedReadable; // Implementers of this interface provide a positioned read API that writes to a ByteBuffer rather than a byte[].\nInterface ByteBufferReadable; // Implementers of this interface provide a read API that writes to a ByteBuffer, not a byte[].\nInterface CanSetDropBehind;\nInterface CanSetReadahead;\nInterface CanUnbuffer; // FSDataInputStreams implement this interface to indicate that they can clear their buffers on request.\nInterface DelegationTokenRenewer.Renewable; // The renewable interface used by the renewer.\nInterface EtagSource; // An optional interface for FileStatus subclasses to implement to provide access to etags.\nInterface FSBuilder<S,B extends FSBuilder<S,B>>; // The base interface which various FileSystem FileContext Builder interfaces can extend, and which underlying implementations will then implement.\nInterface FsConstants; // FileSystem related constants.\nInterface FSProtos.FileStatusProtoOrBuilder;\nInterface FSProtos.FsPermissionProtoOrBuilder;\nInterface FSProtos.LocalFileSystemPathHandleProtoOrBuilder;\nInterface FutureDataInputStreamBuilder; // Builder for input streams and subclasses whose return value is actually a completable future: this allows for better asynchronous operation.\nInterface GetSpaceUsed;\nInterface GlobalStorageStatistics.StorageStatisticsProvider; // A callback API for creating new StorageStatistics instances.\n", "des": "An abstract file system API."}
{"index": 448, "repo": "zookeeper-3.8.2", "code": "package server;\n\nInterface ConnectionMXBean; // This MBean represents a client connection.\nInterface DataTreeMXBean; // Zookeeper data tree MBean.\nInterface NodeHashMap; // The interface defined to manage the hash based on the entries in the nodes map.\nInterface RequestProcessor; // RequestProcessors are chained together to process transactions.\nInterface ServerStats.Provider;\nInterface SessionTracker; // This is the basic interface that ZooKeeperServer uses to track sessions.\nInterface SessionTracker.Session;\nInterface SessionTracker.SessionExpirer;\nInterface ZooKeeperServerListener; // Listener for the critical resource events.\nInterface ZooKeeperServerMXBean; // ZooKeeper server MBean.\nClass AuthenticationHelper; // Contains helper methods to enforce authentication\nClass BlueThrottle; // Implements a token-bucket based rate limiting mechanism with optional probabilistic dropping inspired by the BLUE queue management algorithm [1].\nClass ByteBufferInputStream;\nClass ByteBufferOutputStream;\nClass ConnectionBean; // Implementation of connection MBean interface.\nClass ContainerManager; // Manages cleanup of container ZNodes.\nClass DatadirCleanupManager; // This class manages the cleanup of snapshots and corresponding transaction logs by scheduling the auto purge task with the specified 'autopurge.purgeInterval'.\nClass DataNode; // This class contains the data for a node in the data tree.\nClass DataTree; // This class maintains the tree data structure.\nClass DataTree.ProcessTxnResult;\nClass DataTreeBean; // This class implements the data tree MBean.\nClass DigestCalculator; // Defines how to calculate the digest for a given node.\nClass DumbWatcher; // A empty watcher implementation used in bench and unit test.\nClass ExpiryQueue<E>; // ExpiryQueue tracks elements in time sorted fixed duration buckets.\nClass FinalRequestProcessor; // This Request processor actually applies any transaction associated with a request and services any queries.\nClass NettyServerCnxn;\nClass NettyServerCnxnFactory;\nClass NIOServerCnxn; // This class handles communication with clients using NIO.\nClass NIOServerCnxnFactory; // NIOServerCnxnFactory implements a multi-threaded ServerCnxnFactory using NIO non-blocking socket calls.\nClass NodeHashMapImpl; // a simple wrapper to ConcurrentHashMap that recalculates a digest after each mutation.\nClass ObserverBean; // ObserverBean\n", "des": "ZooKeeper server theory of operation"}
{"index": 2350, "repo": "spring-boot-3.1.1", "code": "package context;\n\npublic class AnnotationConfigReactiveWebApplicationContext extends org.springframework.context.annotation.AnnotationConfigApplicationContext implements ConfigurableReactiveWebApplicationContext; // ConfigurableReactiveWebApplicationContext that accepts annotated classes as input - in particular @Configuration-annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations.\npublic class AnnotationConfigReactiveWebServerApplicationContext extends ReactiveWebServerApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry; // ReactiveWebServerApplicationContext that accepts annotated classes as input - in particular @Configuration-annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations.\npublic interface ConfigurableReactiveWebApplicationContext extends org.springframework.context.ConfigurableApplicationContext, ReactiveWebApplicationContext; // Interface to provide configuration for a reactive web application.\npublic interface ConfigurableReactiveWebEnvironment extends org.springframework.core.env.ConfigurableEnvironment; // Specialization of ConfigurableEnvironment for reactive application contexts.\npublic class GenericReactiveWebApplicationContext extends org.springframework.context.support.GenericApplicationContext implements ConfigurableReactiveWebApplicationContext; // Subclass of GenericApplicationContext, suitable for reactive web environments.\npublic interface ReactiveWebApplicationContext extends org.springframework.context.ApplicationContext; // Interface to provide configuration for a reactive web application.\npublic class ReactiveWebServerApplicationContext extends GenericReactiveWebApplicationContext implements ConfigurableWebServerApplicationContext; // A GenericReactiveWebApplicationContext that can be used to bootstrap itself from a contained ReactiveWebServerFactory bean.\npublic class ReactiveWebServerInitializedEvent extends WebServerInitializedEvent; // Event to be published after the WebServer is ready.\npublic class StandardReactiveWebEnvironment extends org.springframework.core.env.StandardEnvironment implements ConfigurableReactiveWebEnvironment; // Environment implementation to be used by Reactive-based web applications.\n", "des": "Reactive based web integrations with Spring's ApplicationContext."}
{"index": 27, "repo": "commons-collections4-4.4", "code": "package queue;\n\nClass AbstractQueueDecorator<E>; // Decorates another Queue to provide additional behaviour.\nClass CircularFifoQueue<E>; // CircularFifoQueue is a first-in first-out queue with a fixed size that replaces its oldest element if full.\nClass PredicatedQueue<E>; // Decorates another Queue to validate that additions match a specified predicate.\nClass SynchronizedQueue<E>; // Decorates another Queue to synchronize its behaviour for a multi-threaded environment.\nClass TransformedQueue<E>; // Decorates another Queue to transform objects that are added.\nClass UnmodifiableQueue<E>; // Decorates another Queue to ensure it can't be altered.\n", "des": "This package contains implementations for the Queue interface."}
{"index": 2145, "repo": "wicket-core-10.0.0-M1", "code": "package border;\n\npublic class Body extends WebMarkupContainer; // This is a simple Container component which can be used to build Border like components.\npublic abstract class Border extends WebMarkupContainer implements IComponentResolver, IQueueRegion; // A border component has associated markup which is drawn and determines placement of markup and/or components nested within the border component.\npublic class BorderBehavior extends Behavior; // This is a behavior implementation that can be used if you have markup that should be around a component.\npublic abstract class BorderPanel extends Panel; // Whereas a Panel replaces the body markup with the associated markup file, a BorderPanel assumes a that Body component renders the body markup including any number of Wicket Components.\n", "des": "Border components."}
{"index": 2226, "repo": "spring-data-commons-3.1.2", "code": "package util;\n\npublic abstract class ClassUtils extends Object; // Utility class to work with classes.\npublic abstract class QueryExecutionConverters extends Object; // Converters to potentially wrap the execution of a repository method into a variety of wrapper types potentially being available on the classpath.\npublic static interface QueryExecutionConverters.ExecutionAdapter;\npublic static interface QueryExecutionConverters.ThrowingSupplier;\npublic static final class QueryExecutionConverters.WrapperType extends Object;\npublic abstract class ReactiveWrapperConverters extends Object; // Conversion support for reactive wrapper types.\n@Deprecated(since=\"3.0\", forRemoval=true) public abstract class ReactiveWrappers extends Object;\n@Deprecated(since=\"3.0\", forRemoval=true) public static enum ReactiveWrappers.ReactiveLibrary extends Enum<ReactiveWrappers.ReactiveLibrary>;\npublic abstract class TxUtils extends Object; // Simple constants holder.\n", "des": "Utility classes for repository implementations."}
{"index": 1697, "repo": "spring-data-couchbase-5.1.2", "code": "package query;\n\npackage query.support; // This package contains support classes for query derivation and other ways of querying couchbase (helper classes).\npublic abstract class AbstractCouchbaseQuery extends AbstractCouchbaseQueryBase<CouchbaseOperations> implements RepositoryQuery; // RepositoryQuery implementation for Couchbase.\npublic abstract class AbstractCouchbaseQueryBase<CouchbaseOperationsType> extends Object implements RepositoryQuery; // RepositoryQuery implementation for Couchbase.\npublic abstract class AbstractN1qlBasedQuery extends Object implements RepositoryQuery; // Abstract base for all Couchbase RepositoryQuery.\npublic abstract class AbstractReactiveCouchbaseQuery extends AbstractCouchbaseQueryBase<ReactiveCouchbaseOperations> implements RepositoryQuery; // Base class for reactive RepositoryQuery implementations for Couchbase.\npublic class ConvertingIterator extends Object implements Iterator<Object>; // An Iterator<Object> that converts values to their stored Class if warranted.\npublic interface CouchbaseEntityInformation<T,ID> extends EntityInformation<T,ID>; // Marker interface for the Couchbase Entity Information.\npublic class CouchbasePartTree extends PartTree; // Extend PartTree to parse out distinct fields\npublic class CouchbaseQueryMethod extends QueryMethod; // Represents a query method with couchbase extensions, allowing to discover if View-based query or N1QL-based query must be used.\n@Deprecated public class CouchbaseRepositoryQuery extends Object implements RepositoryQuery;\npublic class CountFragment extends Object; // An utility entity that allows to extract total row count out of a COUNT(*) N1QL query.\npublic class N1qlCountQueryCreator extends OldN1qlQueryCreator;\npublic class N1qlMutateQueryCreator extends AbstractQueryCreator<N1QLExpression,N1QLExpression> implements PartTreeN1qlQueryCreator; // N1qlMutateQueryCreator allows to create queries for delete operations.\npublic class N1qlQueryCreator extends AbstractQueryCreator<Query,QueryCriteria>;\n@Deprecated public class N1qlRepositoryQueryExecutor extends Object;\npublic class OldN1qlQueryCreator extends AbstractQueryCreator<N1QLExpression,N1QLExpression> implements PartTreeN1qlQueryCreator; // This Query Creator is responsible for parsing a PartTree (representing a method name) into the WHERE clause of a N1QL query.\n", "des": "This package contains classes related to query derivation and concrete ways of querying couchbase."}
{"index": 1797, "repo": "spring-aop-6.0.11", "code": "package aop;\n\npublic interface Advice; // Tag interface for Advice.\npublic class AspectException extends RuntimeException; // Superclass for all AOP infrastructure exceptions.\n", "des": "The core AOP Alliance advice marker."}
{"index": 3419, "repo": "commons-imaging-1.0-alpha3", "code": "package palette;\n\nInterface MedianCut;\nInterface Palette; // Color palette.\nClass ColorCountComparator; // A comparator for {#link ColorCount} elements.\nClass Dithering; // Dithering algorithms to use when quantizing an image to palette form.\nClass LongestAxisMedianCut;\nClass MedianCutQuantizer;\nClass MostPopulatedBoxesMedianCut;\nClass PaletteFactory; // Factory for creating palettes.\nClass QuantizedPalette;\nClass SimplePalette;\n", "des": "Color quantization and palette manipulation tools."}
{"index": 2651, "repo": "spring-data-cassandra-4.1.2", "code": "package keyspace;\n\npublic class AddColumnSpecification extends ColumnTypeChangeSpecification; // Value object representing a specification to add a column.\npublic class AlterColumnSpecification extends ColumnTypeChangeSpecification; // Value object representing a specification to alter a column.\npublic class AlterKeyspaceSpecification extends KeyspaceOptionsSpecification<AlterKeyspaceSpecification>; // Object to configure a ALTER KEYSPACE specification.\npublic class AlterTableSpecification extends TableOptionsSpecification<AlterTableSpecification>; // Object to configure a ALTER TABLE specification.\npublic class AlterUserTypeSpecification extends UserTypeNameSpecification; // Object to configure a ALTER TYPE specification.\npublic abstract class ColumnChangeSpecification extends Object; // Base value object class for column change specifications.\npublic class ColumnSpecification extends Object; // Object to configure a CQL column specification.\npublic abstract class ColumnTypeChangeSpecification extends ColumnChangeSpecification; // Base value object class for column changes that include DataType information.\npublic class CqlStringUtils extends Object;\npublic class CreateIndexSpecification extends IndexNameSpecification<CreateIndexSpecification> implements IndexDescriptor; // Object to configure a CREATE INDEX specification.\npublic static enum CreateIndexSpecification.ColumnFunction extends Enum<CreateIndexSpecification.ColumnFunction>; // Column functions to specify indexing behavior.\npublic class CreateKeyspaceSpecification extends KeyspaceOptionsSpecification<CreateKeyspaceSpecification> implements KeyspaceDescriptor; // Object to configure a CREATE KEYSPACE specification.\npublic class CreateTableSpecification extends TableSpecification<CreateTableSpecification>; // Object to configure a CREATE TABLE specification.\npublic class CreateUserTypeSpecification extends UserTypeSpecification<CreateUserTypeSpecification>; // Object to configure a CREATE TYPE specification.\npublic class DataCenterReplication extends Object; // Value object representing replication factor for a given data center.\npublic class DefaultOption extends Object implements Option; // A default implementation of Option.\npublic class DropColumnSpecification extends ColumnChangeSpecification; // Value object representing a specification to drop a column.\npublic class DropIndexSpecification extends IndexNameSpecification<DropIndexSpecification>; // Value object representing a DROP INDEX specification.\npublic class DropKeyspaceSpecification extends KeyspaceActionSpecification; // Object to configure a DROP KEYSPACE specification.\npublic class DropTableSpecification extends TableNameSpecification; // Object to configure a DROP TABLE specification.\npublic class DropUserTypeSpecification extends UserTypeNameSpecification; // Object to configure a DROP TYPE specification.\npublic class FieldSpecification extends Object; // Base value object class to specify user type fields.\n", "des": "Keyspace object action specifications such as CREATE TABLE, DROP INDEX."}
{"index": 3314, "repo": "opencms-core-15.0", "code": "package solr;\n\npackage solr.spellchecking; // Contains the SOLR based spellcheck service classes.\nInterface I_CmsSolrIndexWriter; // Interface for Solr index writers.\nInterface I_CmsSolrPostSearchProcessor; // The post document processor can be used in order to manipulate search results after the OpenCms permission check has been done.\nClass CmsSolrConfiguration; // The Solr configuration class.\nClass CmsSolrDocument; // A search document implementation for Solr indexes.\nClass CmsSolrDocumentContainerPage; // Lucene document factory class to extract index data from a resource of type CmsResourceTypeContainerPage.\nClass CmsSolrDocumentXmlContent; // Special document text extraction factory for Solr index.\nClass CmsSolrField; // An individual field for the Solr search index.\nClass CmsSolrFieldConfiguration; // The search field implementation for Solr.\nClass CmsSolrIndex; // Implements the search within an Solr index.\nClass CmsSolrIndexWriter; // Implements the index writer for the Solr server used by OpenCms.\nClass CmsSolrLinkProcessor; // This Solr post processor generates for each found document the corresponding link and adds this link into the resulting document as field.\nClass CmsSolrQuery; // A Solr search query.\nClass CmsSolrQueryUtil; // Utilities for building and analyzing Solr queries.\nClass CmsSolrResultList; // Encapsulates a list of 'OpenCms resource documents' (CmsSearchResource).\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "The package contains the Solr search integration."}
{"index": 3670, "repo": "solr-core-9.3.0", "code": "package jul;\n\nClass JulInfo;\nClass JulWatcher;\nClass RecordHandler;\n", "des": "JUL based implementation of LogWatcher"}
{"index": 2187, "repo": "spring-security-web-6.1.2", "code": "package www;\n\npublic class BasicAuthenticationConverter extends Object implements AuthenticationConverter; // Converts from a HttpServletRequest to UsernamePasswordAuthenticationToken that can be authenticated.\npublic class BasicAuthenticationEntryPoint extends Object implements AuthenticationEntryPoint, org.springframework.beans.factory.InitializingBean; // Used by the ExceptionTranslationFilter to commence authentication via the BasicAuthenticationFilter.\npublic class BasicAuthenticationFilter extends org.springframework.web.filter.OncePerRequestFilter; // Processes a HTTP request's BASIC authorization headers, putting the result into the SecurityContextHolder.\npublic class DigestAuthenticationEntryPoint extends Object implements AuthenticationEntryPoint, org.springframework.beans.factory.InitializingBean, org.springframework.core.Ordered; // Used by the SecurityEnforcementFilter to commence authentication via the DigestAuthenticationFilter.\npublic class DigestAuthenticationFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.MessageSourceAware; // Processes a HTTP request's Digest authorization headers, putting the result into the SecurityContextHolder.\npublic class NonceExpiredException extends org.springframework.security.core.AuthenticationException; // Thrown if an authentication request is rejected because the digest nonce has expired.\n", "des": "WWW-Authenticate based authentication mechanism implementations: Basic and Digest authentication."}
{"index": 3031, "repo": "spring-web-6.0.11", "code": "package cors;\n\npackage cors.reactive; // Reactive support for CORS (Cross-Origin Resource Sharing), based on a common CorsProcessor strategy.\npublic class CorsConfiguration extends Object; // A container for CORS configuration along with methods to check against the actual origin, HTTP methods, and headers of a given request.\npublic interface CorsConfigurationSource; // Interface to be implemented by classes (usually HTTP request handlers) that provides a CorsConfiguration instance based on the provided request.\npublic interface CorsProcessor; // A strategy that takes a request and a CorsConfiguration and updates the response.\npublic abstract class CorsUtils extends Object; // Utility class for CORS request handling based on the CORS W3C recommendation.\npublic class DefaultCorsProcessor extends Object implements CorsProcessor; // The default implementation of CorsProcessor, as defined by the CORS W3C recommendation.\npublic class UrlBasedCorsConfigurationSource extends Object implements CorsConfigurationSource; // CorsConfigurationSource that uses URL path patterns to select the CorsConfiguration for a request.\n", "des": "Support for CORS (Cross-Origin Resource Sharing), based on a common CorsProcessor strategy."}
{"index": 2997, "repo": "spring-web-6.0.11", "code": "package observation;\n\npublic enum ClientHttpObservationDocumentation extends Enum<ClientHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation; // Documented KeyValues for HTTP client observations.\npublic static enum ClientHttpObservationDocumentation.HighCardinalityKeyNames extends Enum<ClientHttpObservationDocumentation.HighCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic static enum ClientHttpObservationDocumentation.LowCardinalityKeyNames extends Enum<ClientHttpObservationDocumentation.LowCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic class ClientRequestObservationContext extends io.micrometer.observation.transport.RequestReplySenderContext<ClientHttpRequest,ClientHttpResponse>; // Context that holds information for metadata collection during the client HTTP exchanges observations.\npublic interface ClientRequestObservationConvention extends io.micrometer.observation.ObservationConvention<ClientRequestObservationContext>; // Interface for an ObservationConvention for client HTTP exchanges.\npublic class DefaultClientRequestObservationConvention extends Object implements ClientRequestObservationConvention; // Default implementation for a ClientRequestObservationConvention, extracting information from the ClientRequestObservationContext.\n", "des": "This package provides support for client HTTP Observation."}
{"index": 44, "repo": "ignite-core-2.15.0", "code": "package events;\n\nInterface CacheConsistencyViolationEvent.EntriesInfo; // Inconsistent entries mapping.\nInterface CacheConsistencyViolationEvent.EntryInfo; // Inconsistent entry info.\nInterface Event; // Grid events are used for notification about what happens within the grid.\nInterface EventType; // Contains event type constants.\nClass BaselineChangedEvent; // Baseline changed event.\nClass BaselineConfigurationChangedEvent; // Baseline configuration changed event.\nClass CacheConsistencyViolationEvent; // This is an experimental API.\nClass CacheEvent; // In-memory database (cache) event.\nClass CacheObjectTransformedEvent;\nClass CacheQueryExecutedEvent<K,V>; // Cache query execution event.\nClass CacheQueryReadEvent<K,V>; // Cache query read event.\nClass CacheRebalancingEvent; // In-memory database (cache) rebalancing event.\nClass CheckpointEvent; // Grid checkpoint event.\nClass ClusterActivationEvent; // Use ClusterStateChangeEvent instead.\nClass ClusterStateChangeEvent; // Cluster state change event.\nClass ClusterStateChangeStartedEvent; // Cluster state change started event.\nClass ClusterTagUpdatedEvent; // Event type indicating that cluster tag has been updated.\nClass DeploymentEvent; // Grid deployment event.\nClass DiscoveryEvent; // Grid discovery event.\nClass EventAdapter; // Base adapter for the events.\nClass JobEvent; // Grid job event.\nClass NodeValidationFailedEvent; // This event is triggered if any of GridComponents fail to validate the joining node while join message processing.\nClass PageReplacementStartedEvent; // Event type indicating that page replacement started in one of the configured data regions.\nClass SnapshotEvent; // Event indicating the cluster snapshot operation result state with the given name.\nClass SqlQueryExecutionEvent; // Query execution event.\nClass TaskEvent; // Grid task event.\nClass TransactionStateChangedEvent; // Event indicates transaction state change.\nClass WalSegmentArchivedEvent; // Event indicates the completion of WAL segment file transition to archive.\nClass WalSegmentCompactedEvent; // Event indicates the completion of WAL segment compaction.\n", "des": "Contains Event Subscription functionality together with various events emitted by Ignite."}
{"index": 3451, "repo": "hibernate-core-5.6.15.Final", "code": "package jndi;\n\npackage jndi.spi; // The SPI contracts for Hibernate JNDI support\nClass JndiException; // An exception indicating trouble accessing JNDI\nClass JndiNameException; // Indicates a problem with a given JNDI name being deemed as not valid.\n", "des": "Support for JNDI within Hibernate"}
{"index": 2034, "repo": "spring-messaging-6.0.11", "code": "package support;\n\npublic class RSocketFrameTypeMessageCondition extends AbstractMessageCondition<RSocketFrameTypeMessageCondition>; // A condition to assist with mapping onto handler methods based on the RSocket frame type.\npublic class RSocketMessageHandler extends MessageMappingMessageHandler; // Extension of MessageMappingMessageHandler for handling RSocket requests with @ConnectMapping and @MessageMapping methods.\npublic class RSocketPayloadReturnValueHandler extends AbstractEncoderMethodReturnValueHandler; // Extension of AbstractEncoderMethodReturnValueHandler that handles encoded content by wrapping data buffers as RSocket payloads and by passing those through the RSocketPayloadReturnValueHandler.RESPONSE_HEADER header.\npublic class RSocketRequesterMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Resolves arguments of type RSocket that can be used for making requests to the remote peer.\n", "des": "Support classes for working with annotated RSocket stream handling methods."}
{"index": 1660, "repo": "jena-core-4.9.0", "code": "package impl;\n\npublic class BBRuleContext extends Object implements RuleContext; // Implementation of RuleContext for use in the backward chaining interpreter.\npublic class BFRuleContext extends Object implements RuleContext; // An implementation of the generic RuleContext interface used by the basic forward (BF) rule engine.\npublic class BindingStack extends Object implements BindingEnvironment; // Provides a trail of possible variable bindings for a forward rule.\npublic class BindingVector extends Object implements BindingEnvironment; // An implementation of a binding environment that maintains a single array of bound values for the variables in a rule.\npublic class BindingVectorMultiSet extends Object; // A multi set of BindingVector's divided in buckets matching an unique combination of values at given indices managed by RETEQueue\npublic class ChoicePointFrame extends GenericChoiceFrame; // Represents a single frame in the LP interpreter's choice point stack, represents the OR part of the search tree.\npublic class ConsumerChoicePointFrame extends GenericTripleMatchFrame implements LPAgendaEntry, LPInterpreterState; // Frame in the LPInterpreter's control stack used to represent matching to the results of a tabled predicate.\npublic class EnvironmentFrame extends FrameObject; // Represents a single frame in the LP interpreter's environment stack.\npublic class EnvironmentFrameWithDerivation extends EnvironmentFrame; // Extension of the normal AND-stack environment frame to support incremental derivation logging.\npublic class FrameObject extends Object; // Base class for stack frame objects.\npublic class FRuleEngine extends Object implements FRuleEngineI; // The processing engine for forward production rules.\npublic static class FRuleEngine.RuleStore extends Object; // Structure used to wrap up processed rule indexes.\npublic interface FRuleEngineI; // Rule engines implement the internals of forward rule inference graphs and the forward part of hybrid graphs.\npublic class FRuleEngineIFactory extends Object; // Factory class for creating FRuleEngineI.\npublic class Generator extends Object implements LPAgendaEntry, LPInterpreterContext; // A generator represents a set of memoized results for a single tabled subgoal.\npublic class GenericChoiceFrame extends FrameObject; // Core properties of choice frames used use to represent the OR state of the backtracking search.\n", "des": "Internal implementation objects used by the rule system interpreters and compilers."}
{"index": 421, "repo": "mahout-mr-0.13.0", "code": "package inmem;\n\nClass InMemBuilder;\nClass InMemInputFormat;\nClass InMemInputFormat.InMemInputSplit; // Custom InputSplit that indicates how many trees are built by each mapper\nClass InMemInputFormat.InMemRecordReader;\nClass InMemMapper;\n", "des": "In-memory mapreduce implementation of Random Decision Forests"}
{"index": 1401, "repo": "spring-boot-actuator-3.1.1", "code": "package influx;\n\npublic class InfluxDbHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for InfluxDB.\n", "des": "Actuator support for InfluxDB."}
{"index": 1678, "repo": "spring-oxm-6.0.11", "code": "package jaxb;\n\npublic class Jaxb2Marshaller extends Object implements MimeMarshaller, MimeUnmarshaller, GenericMarshaller, GenericUnmarshaller, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Implementation of the GenericMarshaller interface for JAXB 2.2.\n", "des": "Package providing integration of JAXB with Spring's O/X Mapping support."}
{"index": 63, "repo": "ignite-core-2.15.0", "code": "package security;\n\nInterface SecurityCredentialsProvider; // Security credentials provider for specifying security credentials.\nInterface SecurityPermissionSet; // Security permission set for authorized security subjects.\nInterface SecuritySubject; // Security subject representing authenticated node with a set of permissions.\nClass AuthenticationContext; // Authentication context.\nClass SecurityBasicPermissionSet; // Simple implementation of SecurityPermissionSet interface.\nClass SecurityCredentials; // Security credentials used for node authentication.\nClass SecurityCredentialsBasicProvider; // Basic implementation for SecurityCredentialsProvider.\nClass SecurityPermissionSetBuilder; // Provides a convenient way to create a permission set.\nEnum SecurityPermission; // Supported security permissions within grid.\nEnum SecuritySubjectType; // Supported security subject types.\nClass SecurityException; // Common security exception for the grid.\n", "des": "Contains APIs for security, authentication, and authorization."}
{"index": 3192, "repo": "tomcat-api-10.1", "code": "package buf;\n\nInterface ByteChunk.ByteInputChannel; // Input interface, used when the buffer is empty.\nInterface ByteChunk.ByteOutputChannel; // When we need more space we'll either grow the buffer ( up to the limit ) or send it to a channel.\nInterface CharChunk.CharInputChannel; // Input interface, used when the buffer is empty.\nInterface CharChunk.CharOutputChannel; // When we need more space we'll either grow the buffer ( up to the limit ) or send it to a channel.\nClass AbstractChunk; // Base class for the *Chunk implementation to reduce duplication.\nClass Ascii; // This class implements some basic ASCII character handling functions.\nClass Asn1Parser; // This is a very basic ASN.1 parser that provides the limited functionality required by Tomcat.\nClass Asn1Writer;\nClass B2CConverter; // NIO based character decoder.\nClass ByteBufferHolder; // Simple wrapper for a ByteBuffer that remembers if the buffer has been flipped or not.\nClass ByteBufferUtils;\nClass ByteChunk; // This class is used to represent a chunk of bytes, and utilities to manipulate byte[].\nClass C2BConverter; // NIO based character encoder.\nClass CharChunk; // Utilities to manipulate char chunks.\nClass CharsetCache;\nClass CharsetUtil;\nClass HexUtils; // Tables useful when converting byte arrays to and from strings of hexadecimal digits.\nClass MessageBytes; // This class is used to represent a subarray of bytes in an HTTP message.\nClass StringCache; // This class implements a String cache for ByteChunk and CharChunk.\nClass StringUtils; // Utility methods to build a separated list from a given set (not java.util.Set) of inputs and return that list as a string or append it to an existing StringBuilder.\nClass UDecoder; // All URL decoding happens here.\nClass UEncoder; // Efficient implementation of a UTF-8 encoder.\nClass UriUtil; // Utility class for working with URIs and URLs.\nClass Utf8Encoder; // Encodes characters as bytes using UTF-8.\nEnum EncodedSolidusHandling;\nEnum UEncoder.SafeCharsSet;\nClass ByteChunk.BufferOverflowException;\n", "des": "Buffers and Encodings"}
{"index": 850, "repo": "calcite-core-1.34.0", "code": "package materialize;\n\nInterface MaterializedViewAggregateRule.Config; // Rule configuration.\nInterface MaterializedViewOnlyAggregateRule.Config; // Rule configuration.\nInterface MaterializedViewOnlyFilterRule.Config; // Rule configuration.\nInterface MaterializedViewOnlyJoinRule.Config; // Rule configuration.\nInterface MaterializedViewProjectAggregateRule.Config; // Rule configuration.\nInterface MaterializedViewProjectFilterRule.Config; // Rule configuration.\nInterface MaterializedViewProjectJoinRule.Config; // Rule configuration.\nInterface MaterializedViewRule.Config; // Rule configuration.\nClass MaterializedViewAggregateRule<C extends MaterializedViewAggregateRule.Config>; // Materialized view rewriting for aggregate.\nClass MaterializedViewJoinRule<C extends MaterializedViewRule.Config>; // Materialized view rewriting for join.\nClass MaterializedViewOnlyAggregateRule; // Rule that matches Aggregate.\nClass MaterializedViewOnlyFilterRule; // Rule that matches Filter.\nClass MaterializedViewOnlyJoinRule; // Rule that matches Join.\nClass MaterializedViewProjectAggregateRule; // Rule that matches Project on Aggregate.\nClass MaterializedViewProjectFilterRule; // Rule that matches Project on Filter.\nClass MaterializedViewProjectJoinRule; // Rule that matches Project on Join.\nClass MaterializedViewRule<C extends MaterializedViewRule.Config>; // Planner rule that converts a Project followed by Aggregate or an Aggregate to a scan (and possibly other operations) over a materialized view.\nClass MaterializedViewRule.Edge; // Edge for graph.\nClass MaterializedViewRule.EquivalenceClasses; // Class representing an equivalence class, i.e., a set of equivalent columns\nClass MaterializedViewRule.NodeLineage; // Expression lineage details.\nClass MaterializedViewRule.ViewPartialRewriting; // View partitioning result.\nClass MaterializedViewRules; // Collection of rules pertaining to materialized views.\nEnum MaterializedViewRule.MatchModality; // Complete, view partial, or query partial.\n", "des": "Provides a materialized rewriting algorithm encapsulated within a planner rule."}
{"index": 978, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass CryptoFactoryBean; // Spring factory bean for a WSS4J Crypto.\n", "des": "Contains support classes for working with WSS4J 2.0."}
{"index": 2008, "repo": "spring-boot-devtools-3.1.1", "code": "package classpath;\n\npublic class ClassPathChangedEvent extends org.springframework.context.ApplicationEvent; // ApplicationEvent containing details of a classpath change.\npublic class ClassPathDirectories extends Object implements Iterable<File>; // Provides access to entries on the classpath that refer to directories.\npublic class ClassPathFileSystemWatcher extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, org.springframework.context.ApplicationContextAware; // Encapsulates a FileSystemWatcher to watch the local classpath directories for changes.\n@FunctionalInterface public interface ClassPathRestartStrategy; // Strategy interface used to determine when a changed classpath file should trigger a full application restart.\npublic class PatternClassPathRestartStrategy extends Object implements ClassPathRestartStrategy; // Ant style pattern based ClassPathRestartStrategy.\n", "des": "Support for classpath monitoring."}
{"index": 3205, "repo": "tomcat-api-10.1", "code": "package modeler;\n\npackage modeler.modules; // Implementation classes - should not be used directly.\nInterface RegistryMBean; // Interface for modeler MBeans.\nClass AttributeInfo; // Internal configuration information for an Attribute descriptor.\nClass BaseAttributeFilter; // Implementation of NotificationFilter for attribute change notifications.\nClass BaseModelMBean; // Basic implementation of the DynamicMBean interface, which supports the minimal requirements of the interface contract.\nClass BaseNotificationBroadcaster; // Implementation of NotificationBroadcaster for attribute change notifications.\nClass FeatureInfo; // Convenience base class for AttributeInfo and OperationInfo classes that will be used to collect configuration information for the ModelMBean beans exposed for management.\nClass ManagedBean; // Internal configuration information for a managed bean (MBean) descriptor.\nClass NoDescriptorRegistry; // An implementation of the MBean registry that effectively disables MBean registration.\nClass NotificationInfo; // Internal configuration information for a Notification descriptor.\nClass OperationInfo; // Internal configuration information for an Operation descriptor.\nClass ParameterInfo; // Internal configuration information for a Parameter descriptor.\nClass Registry; // Registry for modeler MBeans.\nClass Util;\n", "des": "The Modeler component of the Commons project offers convenient support for configuring and instantiating Model MBeans (management beans), as described in the JMX Specification."}
{"index": 2195, "repo": "spring-data-commons-3.1.2", "code": "package annotation;\n\n@Documented @Target({ANNOTATION_TYPE,TYPE,FIELD,METHOD}) @Retention(RUNTIME) public @interface AccessType; // Annotation to define how Spring Data shall access values of persistent properties.\npublic static enum AccessType.Type extends Enum<AccessType.Type>;\n@Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface CreatedBy; // Declares a field as the one representing the principal that created the entity containing the field.\n@Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface CreatedDate; // Declares a field as the one representing the date the entity containing the field was created.\n@Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface Id; // Demarcates an identifier.\n@Target(TYPE) @Retention(RUNTIME) public @interface Immutable; // Annotation for persistent entities to indicate the class is designed in immutable way.\n@Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface LastModifiedBy; // Declares a field as the one representing the principal that recently modified the entity containing the field.\n@Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface LastModifiedDate; // Declares a field as the one representing the date the entity containing the field was recently modified.\n@Retention(RUNTIME) @Target({CONSTRUCTOR,ANNOTATION_TYPE}) @Deprecated public @interface PersistenceConstructor;\n@Retention(RUNTIME) @Target({CONSTRUCTOR,METHOD,ANNOTATION_TYPE}) public @interface PersistenceCreator; // Marker annotation to declare a constructor or factory method annotation as factory/preferred constructor annotation.\n@Indexed @Retention(RUNTIME) @Reflective @Target({TYPE,FIELD,PARAMETER}) public @interface Persistent; // Annotation to generally identify persistent types, fields and parameters.\n@Retention(RUNTIME) @Target(ANNOTATION_TYPE) public @interface QueryAnnotation; // Meta-Annotation to mark a store specific annotation as a query annotation.\n@Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface ReadOnlyProperty; // Marks a field to be read-only for the mapping framework and therefore will not be persisted.\n", "des": "Core annotations being used by Spring Data."}
{"index": 1333, "repo": "groovy-all-4.0.13", "code": "package io;\n\npublic abstract class AbstractReaderSource extends Object implements ReaderSource; // For ReaderSources that can choose a parent class, a base that provides common functionality.\npublic class FileReaderSource extends AbstractReaderSource; // A ReaderSource for source files.\npublic class InputStreamReaderSource extends AbstractReaderSource; // A ReaderSource for source strings.\npublic class NullWriter extends Writer; // A Writer that eats its input.\npublic interface ReaderSource extends HasCleanup; // An interface for things that can supply (and potentially resupply) a Reader on a source stream.\npublic class StringReaderSource extends AbstractReaderSource; // A ReaderSource for source strings.\npublic class URLReaderSource extends AbstractReaderSource; // A ReaderSource for source files hosted at a URL.\n", "des": "Internal classes for Groovier Input/Output."}
{"index": 782, "repo": "lucene-analyzers-common-8.11.2", "code": "package hi;\n\nClass HindiAnalyzer; // Analyzer for Hindi.\nClass HindiNormalizationFilter; // A TokenFilter that applies HindiNormalizer to normalize the orthography.\nClass HindiNormalizationFilterFactory; // Factory for HindiNormalizationFilter.\nClass HindiNormalizer; // Normalizer for Hindi.\nClass HindiStemFilter; // A TokenFilter that applies HindiStemmer to stem Hindi words.\nClass HindiStemFilterFactory; // Factory for HindiStemFilter.\nClass HindiStemmer; // Light Stemmer for Hindi.\n", "des": "Analyzer for Hindi."}
{"index": 2971, "repo": "pulsar-broker-3.0.0", "code": "package buffer;\n\npackage buffer.impl; // The implementation of a transaction buffer.\npackage buffer.metadata; // The transaction buffer snapshot metadata.\npublic interface AbortedTxnProcessor;\n@Beta public interface TransactionBuffer; // A class represent a transaction buffer.\npublic interface TransactionBufferClientStats;\n@Beta public interface TransactionBufferProvider; // A provider that provides TransactionBuffer.\n@Beta public interface TransactionBufferReader extends AutoCloseable; // A reader to read entries of a given transaction from transaction buffer.\npublic interface TransactionCursor; // The transaction Cursor maintains the index of all transactions.\n@Beta public interface TransactionEntry extends Entry, AutoCloseable; // A class represents an entry appended to a transaction.\n@Beta public interface TransactionMeta; // The metadata for the transaction in the transaction buffer.\n", "des": "Implementation of a transaction buffer."}
{"index": 2300, "repo": "spring-boot-3.1.1", "code": "package bind;\n\npackage bind.handler; // General BindHandler implementations.\npackage bind.validation; // Binding validation support.\npublic abstract class AbstractBindHandler extends Object implements BindHandler; // Abstract base class for BindHandler implementations.\npublic final class Bindable<T> extends Object; // Source that can be bound by a Binder.\npublic static enum Bindable.BindRestriction extends Enum<Bindable.BindRestriction>; // Restrictions that can be applied when binding values.\npublic class BindableRuntimeHintsRegistrar extends Object implements org.springframework.aot.hint.RuntimeHintsRegistrar; // RuntimeHintsRegistrar that can be used to register ReflectionHints for Bindable types, discovering any nested type it may expose through a property.\n@FunctionalInterface public interface BindConstructorProvider; // Strategy interface used to determine a specific constructor to use when binding.\npublic interface BindContext; // Context information for use by BindHandlers.\npublic class Binder extends Object; // A container object which Binds objects from one or more ConfigurationPropertySources.\npublic class BindException extends RuntimeException implements OriginProvider; // Exception thrown when binding fails.\npublic interface BindHandler; // Callback interface that can be used to handle additional logic during element binding.\npublic enum BindMethod extends Enum<BindMethod>; // Configuration property binding methods.\npublic final class BindResult<T> extends Object; // A container object to return the result of a Binder bind operation.\npublic class BoundPropertiesTrackingBindHandler extends AbstractBindHandler; // BindHandler that can be used to track bound configuration properties.\n@Target({CONSTRUCTOR,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface ConstructorBinding; // Annotation that can be used to indicate which constructor to use when binding configuration properties using constructor arguments rather than by calling setters.\npublic abstract class DataObjectPropertyName extends Object; // Internal utility to help when dealing with data object property names.\n@Retention(RUNTIME) @Target({PARAMETER,RECORD_COMPONENT}) @Documented public @interface DefaultValue; // Annotation that can be used to specify the default value when binding to an immutable property.\n@Retention(RUNTIME) @Target(PARAMETER) @Documented public @interface Name; // Annotation that can be used to specify the name when binding to an immutable property.\n", "des": "Support for @ConfigurationProperties binding."}
{"index": 1096, "repo": "hbase-server-3.0.0-alpha-4", "code": "package ipc;\n\nInterface HBaseRPCErrorHandler; // An interface for calling out of RPC for error conditions.\nInterface PriorityFunction; // Function to figure priority of incoming request.\nInterface QueueBalancer; // Interface for balancing requests across IPC queues\nInterface RpcCall; // Interface of all necessary to carry out a RPC method invocation on the server.\nInterface RpcCallback; // Denotes a callback action that has to be executed at the end of an Rpc Call.\nInterface RpcCallContext; // Interface of all necessary to carry out a RPC service invocation on the server.\nInterface RpcServer.CallCleanup;\nInterface RpcServerInterface;\nClass AdaptiveLifoCoDelCallQueue; // Adaptive LIFO blocking queue utilizing CoDel algorithm to prevent queue overloading.\nClass AnnotationReadingPriorityFunction<T extends HBaseRpcServicesBase<?>>; // Reads special method annotations and table names to figure a priority for use by QoS facility in ipc; e.g: rpcs to hbase:meta get priority.\nClass BalancedQueueRpcExecutor; // An RpcExecutor that will balance requests evenly across all its queues, but still remains efficient with a single queue via an inlinable queue balancing mechanism.\nClass CallQueueInfo;\nClass CallRunner; // The request processing logic, which is usually executed in thread pools provided by an RpcScheduler.\nClass FastPathBalancedQueueRpcExecutor; // Balanced queue executor with a fastpath.\nClass FastPathRpcHandler;\nClass FastPathRWQueueRpcExecutor; // RPC Executor that extends RWQueueRpcExecutor with fast-path feature, used in FastPathBalancedQueueRpcExecutor.\nClass FifoRpcScheduler; // A very simple RpcScheduler} that serves incoming requests in order.\nClass HeapByteBufAllocator; // A pooled ByteBufAllocator that does not prefer direct buffers regardless of platform settings.\nClass MasterFifoRpcScheduler; // A special RpcScheduler} only used for master.\nClass MetaRWQueueRpcExecutor; // RPC Executor that uses different queues for reads and writes for meta.\nClass MetricsHBaseServer;\nClass MetricsHBaseServerWrapperImpl;\nClass NettyRpcServer; // An RPC server with Netty4 implementation.\nClass PluggableBlockingQueue; // Abstract class template for defining a pluggable blocking queue implementation to be used by the 'pluggable' call queue type in the RpcExecutor.\n", "des": "Tools to help define network clients and servers."}
{"index": 1718, "repo": "spring-boot-test-3.1.1", "code": "package htmlunit;\n\npackage htmlunit.webdriver; // Selenium support classes.\npublic class LocalHostWebClient extends com.gargoylesoftware.htmlunit.WebClient; // WebClient will automatically prefix relative URLs with localhost:${local.server.port}.\n", "des": "HtmlUnit support classes."}
{"index": 1440, "repo": "spring-boot-actuator-3.1.1", "code": "package reactive;\n\npublic class DispatcherHandlerMappingDescription extends Object; // A description of a mapping known to a DispatcherServlet.\npublic class DispatcherHandlerMappingDetails extends Object; // Details of a DispatcherHandler mapping.\n@ImportRuntimeHints(org.springframework.boot.actuate.web.mappings.reactive.DispatcherHandlersMappingDescriptionProvider.DispatcherHandlersMappingDescriptionProviderRuntimeHints.class) public class DispatcherHandlersMappingDescriptionProvider extends Object implements MappingDescriptionProvider; // A MappingDescriptionProvider that introspects the HandlerMappings that are known to a DispatcherHandler.\npublic class HandlerFunctionDescription extends Object; // Description of a HandlerFunction.\npublic class RequestMappingConditionsDescription extends Object; // Description of the conditions of a RequestMappingInfo.\npublic static class RequestMappingConditionsDescription.MediaTypeExpressionDescription extends Object; // A description of a MediaTypeExpression in a request mapping condition.\npublic static class RequestMappingConditionsDescription.NameValueExpressionDescription extends Object; // A description of a NameValueExpression in a request mapping condition.\n", "des": "Actuator reactive request mappings support."}
{"index": 103, "repo": "ignite-core-2.15.0", "code": "package eventstorage;\n\npackage eventstorage.memory; // Contains default in-memory implementation for event storage SPI.\nInterface EventStorageSpi; // This SPI provides local node events storage.\nClass NoopEventStorageSpi; // No-op implementation of EventStorageSpi.\n", "des": "Contains APIs for event storage SPI."}
{"index": 1311, "repo": "groovy-all-4.0.13", "code": "package impl;\n\npublic class ClosureRenderer extends Object implements ListCellRenderer, TableCellRenderer, TreeCellRenderer;\npublic class DefaultAction extends AbstractAction; // A default action implementation\npublic class ListWrapperListModel<E> extends AbstractListModel; // A ListModel implementation that's backed by a live List.\npublic class TableLayout extends JPanel; // Represents a HTML style table layout\npublic class TableLayoutCell extends Object; // Represents a cell in a table layout.\npublic class TableLayoutRow extends Object; // Represents a row in a table layout\n", "des": "Implementation classes for SwingBuilder"}
{"index": 1433, "repo": "spring-boot-actuator-3.1.1", "code": "package session;\n\n@Endpoint(id=\"sessions\") public class SessionsEndpoint extends Object; // @Endpoint to expose a user's Sessions.\npublic static final class SessionsEndpoint.SessionDescriptor extends Object implements OperationResponseBody; // Description of user's session.\npublic static final class SessionsEndpoint.SessionsDescriptor extends Object implements OperationResponseBody; // Description of user's sessions.\n", "des": "Actuator support for Spring Session."}
{"index": 3172, "repo": "tomcat-api-10.1", "code": "package authenticator;\n\nClass AuthenticatorBase; // Basic implementation of the Valve interface that enforces the <security-constraint> elements in the web application deployment descriptor.\nClass BasicAuthenticator; // An Authenticator and Valve implementation of HTTP BASIC Authentication, as outlined in RFC 7617: \"The 'Basic' HTTP Authentication Scheme\"\nClass BasicAuthenticator.BasicCredentials; // Parser for an HTTP Authorization header for BASIC authentication as per RFC 2617 section 2, and the Base64 encoded credentials as per RFC 2045 section 6.8.\nClass Constants;\nClass DigestAuthenticator; // An Authenticator and Valve implementation of HTTP DIGEST Authentication, as outlined in RFC 7616: \"HTTP Digest Authentication\"\nClass DigestAuthenticator.DigestInfo;\nClass DigestAuthenticator.NonceInfo;\nClass FormAuthenticator; // An Authenticator and Valve implementation of FORM BASED Authentication, as described in the Servlet API Specification.\nClass NonLoginAuthenticator; // An Authenticator and Valve implementation that checks only security constraints not involving user authentication.\nClass SavedRequest; // Object that saves the critical information from a request so that form-based authentication can reproduce it once the user has been authenticated.\nClass SingleSignOn; // A Valve that supports a \"single sign on\" user experience, where the security identity of a user who successfully authenticates to one web application is propagated to other web applications in the same security domain.\nClass SingleSignOnEntry; // A class that represents entries in the cache of authenticated users.\nClass SingleSignOnListener;\nClass SingleSignOnSessionKey; // Key used by SSO to identify a session.\nClass SpnegoAuthenticator; // A SPNEGO authenticator that uses the SPNEGO/Kerberos support built in to Java 6.\nClass SpnegoAuthenticator.AcceptAction; // This class gets a gss credential via a privileged action.\nClass SpnegoAuthenticator.AuthenticateAction;\nClass SpnegoAuthenticator.SpnegoTokenFixer; // This class implements a hack around an incompatibility between the SPNEGO implementation in Windows and the SPNEGO implementation in Java 8 update 40 onwards.\nClass SSLAuthenticator; // An Authenticator and Valve implementation of authentication that utilizes SSL certificates to identify client users.\nEnum AuthenticatorBase.AllowCorsPreflight;\n", "des": "This package contains Authenticator implementations for the various supported authentication methods (BASIC, DIGEST, and FORM)."}
{"index": 680, "repo": "jackson-databind-2.15.2", "code": "package annotation;\n\nClass JsonPOJOBuilder.Value; // Simple value container for containing values read from JsonPOJOBuilder annotation instance.\nClass NoClass; // Marker class used with annotations to indicate \"no class\".\nEnum JsonSerialize.Inclusion;\nEnum JsonSerialize.Typing; // Enumeration used with JsonSerialize.typing() property to define whether type detection is based on dynamic runtime type (DYNAMIC) or declared type (STATIC).\nAnnotation Type EnumNaming; // Annotation that can be used to indicate a EnumNamingStrategy to use for annotated class.\nAnnotation Type JacksonStdImpl; // Marker interface used to indicate implementation classes (serializers, deserializers etc) that are standard ones Jackson uses; not custom ones that application has added.\nAnnotation Type JsonAppend; // Annotation used to add \"virtual\" properties that will be written after regular properties during serialization.\nAnnotation Type JsonAppend.Attr; // Definition of a single attribute-backed property.\nAnnotation Type JsonAppend.Prop; // Definition of a single general virtual property.\nAnnotation Type JsonDeserialize; // Annotation use for configuring deserialization aspects, by attaching to \"setter\" methods or fields, or to value classes.\nAnnotation Type JsonNaming; // Annotation that can be used to indicate a PropertyNamingStrategy to use for annotated class.\nAnnotation Type JsonPOJOBuilder; // Annotation used to configure details of a Builder class: instances of which are used as Builders for deserialized POJO values, instead of POJOs being instantiated using constructors or factory methods.\nAnnotation Type JsonSerialize; // Annotation used for configuring serialization aspects, by attaching to \"getter\" methods or fields, or to value classes.\nAnnotation Type JsonTypeIdResolver; // Annotation that can be used to plug a custom type identifier handler (TypeIdResolver) to be used by TypeSerializers and TypeDeserializers for converting between java types and type id included in JSON content.\nAnnotation Type JsonTypeResolver; // Annotation that can be used to explicitly define custom resolver used for handling serialization and deserialization of type information, needed for handling of polymorphic types (or sometimes just for linking abstract types to concrete types)\nAnnotation Type JsonValueInstantiator; // Annotation that can be used to indicate a ValueInstantiator to use for creating instances of specified type.\n", "des": "Annotations that directly depend on classes in databinding bundle (not just Jackson core) and cannot be included in Jackson core annotations package (because it cannot have any external dependencies)."}
{"index": 1093, "repo": "hbase-server-3.0.0-alpha-4", "code": "package coprocessor;\n\nInterface BulkLoadObserver; // Coprocessors implement this interface to observe and mediate bulk load operations.\nInterface CoprocessorHost.ObserverGetter<C,O>; // Implementations defined function to get an observer of type O from a coprocessor of type C.\nInterface CoprocessorService; // Since 2.0.\nInterface EndpointObserver; // Coprocessors implement this interface to observe and mediate endpoint invocations on a region.\nInterface HasMasterServices; // Since 2.0.0 to be removed in 3.0.0.\nInterface HasRegionServerServices; // Since 2.0.0 to be removed in 3.0.0.\nInterface MasterCoprocessor;\nInterface MasterCoprocessorEnvironment;\nInterface MasterObserver; // Defines coprocessor hooks for interacting with operations on the HMaster process.\nInterface ObserverContext<E extends CoprocessorEnvironment>; // Carries the execution state for a given invocation of an Observer coprocessor (RegionObserver, MasterObserver, or WALObserver) method.\nInterface RegionCoprocessor;\nInterface RegionCoprocessorEnvironment;\nInterface RegionObserver; // Coprocessors implement this interface to observe and mediate client actions on the region.\nInterface RegionServerCoprocessor;\nInterface RegionServerCoprocessorEnvironment;\nInterface RegionServerObserver; // Defines coprocessor hooks for interacting with operations on the HRegionServer process.\nInterface WALCoprocessor; // WALCoprocessor don't support loading services using Coprocessor.getServices().\nInterface WALCoprocessorEnvironment;\nInterface WALObserver; // It's provided to have a way for coprocessors to observe, rewrite, or skip WALEdits as they are being written to the WAL.\nClass BaseEnvironment<C extends Coprocessor>; // Encapsulation of the environment of each coprocessor\nClass CoprocessorHost<C extends Coprocessor,E extends CoprocessorEnvironment<C>>; // Provides the common setup framework and runtime services for coprocessor invocation from HBase services.\nClass MetaTableMetrics; // A coprocessor that collects metrics from meta table.\nClass MetricsCoprocessor; // Utility class for tracking metrics for various types of coprocessors.\n", "des": "Table of Contents"}
{"index": 91, "repo": "ignite-core-2.15.0", "code": "package tcp;\n\npackage tcp.internal; // Contains internal implementation.\npackage tcp.ipfinder; // Contains IP finder interface and adapter.\npackage tcp.messages; // Contains implementation messages.\nInterface TcpDiscoverySpiMBean; // Management bean for TcpDiscoverySpi.\nClass TcpDiscoverySpi; // Discovery SPI implementation that uses TCP/IP for node discovery.\n", "des": "Contains default TCP/IP implementation for discovery SPI."}
{"index": 2302, "repo": "spring-boot-3.1.1", "code": "package validation;\n\npublic class BindValidationException extends RuntimeException; // Error thrown when validation fails during a bind operation.\npublic class ValidationBindHandler extends AbstractBindHandler; // BindHandler to apply Validators to bound results.\npublic class ValidationErrors extends Object implements Iterable<org.springframework.validation.ObjectError>; // A collection of ObjectErrors caused by bind validation failures.\n", "des": "Binding validation support."}
{"index": 1585, "repo": "spring-websocket-6.0.11", "code": "package socket;\n\npackage socket.adapter; // Classes adapting Spring's WebSocket API to and from WebSocket providers.\npackage socket.client; // Client-side abstractions for WebSocket applications.\npackage socket.config; // Configuration support for WebSocket request handling.\npackage socket.handler; // Convenient WebSocketHandler implementations and decorators.\npackage socket.messaging; // WebSocket integration for Spring's messaging module.\npackage socket.server; // Server-side abstractions for WebSocket interactions.\npackage socket.sockjs; // Top-level SockJS types.\npublic abstract class AbstractWebSocketMessage<T> extends Object implements WebSocketMessage<T>; // A message that can be handled or sent on a WebSocket connection.\npublic final class BinaryMessage extends AbstractWebSocketMessage<ByteBuffer>; // A binary WebSocket message.\npublic final class CloseStatus extends Object implements Serializable; // Represents a WebSocket close status code and reason.\npublic final class PingMessage extends AbstractWebSocketMessage<ByteBuffer>; // A WebSocket ping message.\npublic final class PongMessage extends AbstractWebSocketMessage<ByteBuffer>; // A WebSocket pong message.\npublic interface SubProtocolCapable; // An interface for WebSocket handlers that support sub-protocols as defined in RFC 6455.\npublic final class TextMessage extends AbstractWebSocketMessage<String>; // A text WebSocket message.\npublic class WebSocketExtension extends Object; // Represents a WebSocket extension as defined in the RFC 6455.\npublic interface WebSocketHandler; // A handler for WebSocket messages and lifecycle events.\npublic class WebSocketHttpHeaders extends org.springframework.http.HttpHeaders; // An HttpHeaders variant that adds support for the HTTP headers defined by the WebSocket specification RFC 6455.\npublic interface WebSocketMessage<T>; // A message that can be handled or sent on a WebSocket connection.\npublic interface WebSocketSession extends Closeable; // A WebSocket session abstraction.\n", "des": "Common abstractions and Spring configuration support for WebSocket applications."}
{"index": 1101, "repo": "fontbox-3.0.0-beta1", "code": "package cff;\n\nInterface CFFCharset; // A CFF charset.\nInterface CFFParser.ByteSource; // Source from which bytes may be read in the future.\nInterface DataInput; // This interface defines some functionality to read a CFF font.\nInterface FDSelect;\nClass CFFCIDFont; // A Type 0 CIDFont represented in a CFF file.\nClass CFFEncoding; // A CFF Type 1-equivalent Encoding.\nClass CFFExpertCharset; // This is specialized CFFCharset.\nClass CFFExpertEncoding; // This is specialized CFFEncoding.\nClass CFFExpertSubsetCharset; // This is specialized CFFCharset.\nClass CFFFont; // An Adobe Compact Font Format (CFF) font.\nClass CFFISOAdobeCharset; // This is specialized CFFCharset.\nClass CFFOperator; // This class represents a CFF operator.\nClass CFFParser; // This class represents a parser for a CFF font.\nClass CFFStandardEncoding; // This is specialized CFFEncoding.\nClass CFFStandardString; // This class represents a standard SID to String mapping.\nClass CFFType1Font; // A Type 1-equivalent font program represented in a CFF file.\nClass CharStringCommand; // This class represents a CharStringCommand.\nClass CIDKeyedType2CharString; // A CID-Keyed Type 2 CharString.\nClass DataInputByteArray; // This class implements the DataInput interface using a byte buffer as source.\nClass DataInputRandomAccessRead; // This class implements the DataInput interface using a RandomAccessRead as source.\nClass Type1CharString; // This class represents and renders a Type 1 CharString.\nClass Type1CharStringParser; // This class represents a converter for a mapping into a Type 1 sequence.\nClass Type1FontUtil; // This class contains some helper methods handling Type1-Fonts.\nClass Type2CharString; // Represents a Type 2 CharString by converting it into an equivalent Type 1 CharString.\nClass Type2CharStringParser; // This class represents a converter for a mapping into a Type2-sequence.\nEnum CharStringCommand.Key;\nEnum CharStringCommand.Type1KeyWord; // Enum of all valid type1 key words\n", "des": "This package holds classes used to parse CFF/Type2-Fonts (aka Type1C-Fonts)."}
{"index": 2183, "repo": "spring-security-web-6.1.2", "code": "package rememberme;\n\npublic abstract class AbstractRememberMeServices extends Object implements RememberMeServices, org.springframework.beans.factory.InitializingBean, LogoutHandler, org.springframework.context.MessageSourceAware; // Base class for RememberMeServices implementations.\npublic class CookieTheftException extends RememberMeAuthenticationException;\npublic class InMemoryTokenRepositoryImpl extends Object implements PersistentTokenRepository; // Simple PersistentTokenRepository implementation backed by a Map.\npublic class InvalidCookieException extends RememberMeAuthenticationException; // Exception thrown by a RememberMeServices implementation to indicate that a submitted cookie is of an invalid format or has expired.\npublic class JdbcTokenRepositoryImpl extends org.springframework.jdbc.core.support.JdbcDaoSupport implements PersistentTokenRepository; // JDBC based persistent login token repository implementation.\npublic class PersistentRememberMeToken extends Object;\npublic class PersistentTokenBasedRememberMeServices extends AbstractRememberMeServices; // RememberMeServices implementation based on Barry Jaspan's Improved Persistent Login Cookie Best Practice.\npublic interface PersistentTokenRepository; // The abstraction used by PersistentTokenBasedRememberMeServices to store the persistent login tokens for a user.\npublic class RememberMeAuthenticationException extends org.springframework.security.core.AuthenticationException; // This exception is thrown when an Authentication exception occurs while using the remember-me authentication.\npublic class RememberMeAuthenticationFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.ApplicationEventPublisherAware; // Detects if there is no Authentication object in the SecurityContext, and populates the context with a remember-me authentication token if a RememberMeServices implementation so requests.\npublic class TokenBasedRememberMeServices extends AbstractRememberMeServices; // Identifies previously remembered users by a Base-64 encoded cookie.\npublic static enum TokenBasedRememberMeServices.RememberMeTokenAlgorithm extends Enum<TokenBasedRememberMeServices.RememberMeTokenAlgorithm>;\n", "des": "Support for remembering a user between different web sessions."}
{"index": 2064, "repo": "spring-webmvc-6.0.11", "code": "package config;\n\npackage config.annotation; // Annotation-based setup for Spring MVC.\npublic class CorsBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // BeanDefinitionParser that parses a cors element in order to set the CORS configuration in the various {AbstractHandlerMapping} beans created by AnnotationDrivenBeanDefinitionParser, ResourcesBeanDefinitionParser and ViewControllerBeanDefinitionParser.\npublic class FreeMarkerConfigurerBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parse the <mvc:freemarker-configurer> MVC namespace element and register FreeMarkerConfigurer bean.\npublic class GroovyMarkupConfigurerBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser; // Parse the <mvc:groovy-configurer> MVC namespace element and register a GroovyConfigurer bean.\npublic class MvcNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for Spring MVC configuration namespace.\npublic abstract class MvcNamespaceUtils extends Object; // Convenience methods for use in MVC namespace BeanDefinitionParsers.\npublic class ScriptTemplateConfigurerBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser; // Parse the <mvc:script-template-configurer> MVC namespace element and register a ScriptTemplateConfigurer bean.\npublic class ViewResolversBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Parses the view-resolvers MVC namespace element and registers ViewResolver bean definitions.\n", "des": "Defines the XML configuration namespace for Spring MVC."}
{"index": 436, "repo": "commons-pool2-2.11.1", "code": "package pool2;\n\npackage pool2.impl; // Object pooling API implementations.\npackage pool2.proxy; // Object pooling proxy implementation.\nInterface KeyedObjectPool<K,V>; // A \"keyed\" pooling interface.\nInterface KeyedPooledObjectFactory<K,V>; // An interface defining life-cycle methods for instances to be served by a KeyedObjectPool.\nInterface ObjectPool<T>; // A pooling simple interface.\nInterface PooledObject<T>; // Defines the wrapper that is used to track the additional information, such as state, for the pooled objects.\nInterface PooledObjectFactory<T>; // An interface defining life-cycle methods for instances to be served by an ObjectPool.\nInterface SwallowedExceptionListener; // Pools that unavoidably swallow exceptions may be configured with an instance of this listener so the user may receive notification of when this happens.\nInterface TrackedUse; // Allows pooled objects to make information available about when and how they were used available to the object pool.\nInterface UsageTracking<T>; // This interface may be implemented by an object pool to enable clients (primarily those clients that wrap pools to provide pools with extended features) to provide additional information to the pool relating to object using allowing more informed decisions and reporting to be made regarding abandoned objects.\nClass BaseKeyedPooledObjectFactory<K,V>; // A base implementation of KeyedPooledObjectFactory.\nClass BaseObject; // A base class for common functionality.\nClass BaseObjectPool<T>; // A simple base implementation of ObjectPool.\nClass BasePooledObjectFactory<T>; // A base implementation of PoolableObjectFactory.\nClass PoolUtils; // This class consists exclusively of static methods that operate on or return ObjectPool or KeyedObjectPool related interfaces.\nEnum DestroyMode; // Destroy context provided to object factories via destroyObject and invalidateObject methods.\nEnum PooledObjectState; // Provides all possible states of a PooledObject.\n", "des": "Object pooling API."}
{"index": 1494, "repo": "wicket-extensions-10.0.0-M1", "code": "package basic;\n\npublic class DefaultLinkParser extends LinkParser; // This implementation adds link render strategies for email addresses and urls.\n@FunctionalInterface public interface ILinkParser; // ILinkParser parses an input text and performs modifications according to its render strategies.\n@FunctionalInterface public interface ILinkRenderStrategy; // An implementation of ILinkRenderStrategy transforms a link target (e.g.\npublic class LinkParser extends Object implements ILinkParser; // This base implementation iterates over all provided ILinkRenderStrategy implementations and applies them to the input text.\npublic class SmartLinkLabel extends org.apache.wicket.markup.html.basic.Label; // If you have email addresses or web URLs in the data that you are displaying, then you can automatically display those pieces of data as hyperlinks, you will not have to take any action to convert that data.\npublic class SmartLinkMultiLineLabel extends org.apache.wicket.markup.html.basic.MultiLineLabel; // If you have email addresses or web URLs in the data that you are displaying, then you can automatically display those pieces of data as hyperlinks, you will not have to take any action to convert that data.\n", "des": "Basic extensions."}
{"index": 2223, "repo": "spring-data-commons-3.1.2", "code": "package parser;\n\npublic abstract class AbstractQueryCreator<T,S> extends Object; // Base class for query creators that create criteria based queries from a PartTree.\npublic class Part extends Object; // A single part of a method name that has to be transformed into a query part.\npublic static enum Part.IgnoreCaseType extends Enum<Part.IgnoreCaseType>; // The various types of ignore case that are supported.\npublic static enum Part.Type extends Enum<Part.Type>; // The type of a method name part.\npublic class PartTree extends Object implements Streamable<PartTree.OrPart>; // Class to parse a String into a tree or PartTree.OrParts consisting of simple Part instances in turn.\npublic static class PartTree.OrPart extends Object implements Streamable<Part>; // A part of the parsed source that results from splitting up the resource around Or keywords.\n", "des": "Support classes for parsing queries from method names."}
{"index": 466, "repo": "jackson-core-2.15.2", "code": "package exc;\n\nClass InputCoercionException; // Exception type for read-side problems that are not direct decoding (\"parsing\") problems (those would be reported as JsonParseExceptions), but rather result from failed attempts to convert specific Java value out of valid but incompatible input value.\nClass StreamConstraintsException; // Exception type used to indicate violations of stream constraints (for example StreamReadConstraints) when reading or writing content.\nClass StreamReadException; // Intermediate base class for all read-side streaming processing problems, including parsing and input value coercion problems.\nClass StreamWriteException; // Intermediate base class for all read-side streaming processing problems, including parsing and input value coercion problems.\n", "des": "Package for some of JsonProcessingException subtypes contained by streaming API."}
{"index": 1957, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package mail;\n\n@ConfigurationProperties(prefix=\"spring.mail\") public class MailProperties extends Object; // Configuration properties for email support.\n@AutoConfiguration @ConditionalOnClass({jakarta.mail.internet.MimeMessage.class,jakarta.activation.MimeType.class,org.springframework.mail.MailSender.class}) @ConditionalOnMissingBean(org.springframework.mail.MailSender.class) @Conditional(org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration.MailSenderCondition.class) @EnableConfigurationProperties(MailProperties.class) @Import({org.springframework.boot.autoconfigure.mail.MailSenderJndiConfiguration.class,org.springframework.boot.autoconfigure.mail.MailSenderPropertiesConfiguration.class}) public class MailSenderAutoConfiguration extends Object; // Auto configuration for email support.\n@AutoConfiguration(after=MailSenderAutoConfiguration.class) @ConditionalOnProperty(prefix=\"spring.mail\", value=\"test-connection\") @ConditionalOnSingleCandidate(org.springframework.mail.javamail.JavaMailSenderImpl.class) public class MailSenderValidatorAutoConfiguration extends Object; // Auto configuration for testing mail service connectivity on startup.\n", "des": "Auto-configuration for email support."}
{"index": 3861, "repo": "lucene-core-9.7.0", "code": "package mutable;\n\nClass MutableValue; // Base class for all mutable values.\nClass MutableValueBool; // MutableValue implementation of type boolean.\nClass MutableValueDate; // MutableValue implementation of type Date.\nClass MutableValueDouble; // MutableValue implementation of type double.\nClass MutableValueFloat; // MutableValue implementation of type float.\nClass MutableValueInt; // MutableValue implementation of type int.\nClass MutableValueLong; // MutableValue implementation of type long.\nClass MutableValueStr; // MutableValue implementation of type String.\n", "des": "Comparable object wrappers"}
{"index": 3625, "repo": "solr-test-framework-9.3.0", "code": "package spelling;\n\nClass SampleComparator; // Comparator for testing purposes\n", "des": "Mock classes for testing spelling."}
{"index": 2606, "repo": "wicket-util-10.0.0-M1", "code": "package diff;\n\npackage diff.myers; // The diff.myers package implements Gene Myers' differencing algorithm.\npublic class AddDelta extends Delta; // Holds an add-delta between to revisions of a text.\npublic class ChangeDelta extends Delta; // Holds an change-delta between to revisions of a text.\npublic class Chunk extends ToString; // Holds a information about a part of the text involved in a differencing or patching operation.\npublic class DeleteDelta extends Delta; // Holds a delete-delta between to revisions of a text.\npublic abstract class Delta extends ToString; // Holds a \"delta\" difference between to revisions of a text.\npublic class Diff extends ToString; // Implements a differencing engine that works on arrays of Object.\npublic interface DiffAlgorithm; // A simple interface for implementations of differencing algorithms.\npublic class DifferentiationFailedException extends DiffException; // Thrown whenever the differencing engine cannot produce the differences between two revisions of ta text.\npublic class DiffException extends Exception; // Base class for all exceptions emanating from this package.\npublic class PatchFailedException extends DiffException; // Thrown whenever a delta cannot be applied as a patch to a given text.\npublic class Revision extends ToString; // A Revision holds the series of deltas that describe the differences between two sequences.\npublic interface RevisionVisitor; // Definition of a Visitor interface for Revisions See \"Design Patterns\" by the Gang of Four\npublic class ToString extends Object; // This class delegates handling of the to a StringBuilder based version.\n", "des": "The diff package implements the differencing engine that JRCS uses."}
{"index": 653, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package metrics;\n\nClass AMRMClientRelayerMetrics; // Metrics for FederationInterceptor Internals.\nClass OpportunisticSchedulerMetrics; // Metrics for Opportunistic Scheduler.\nEnum AMRMClientRelayerMetrics.RequestType; // Easier classification of request types for logging metrics.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1581, "repo": "spring-security-oauth2-client-6.1.2", "code": "package userinfo;\n\npublic class OidcReactiveOAuth2UserService extends Object implements ReactiveOAuth2UserService<OidcUserRequest,org.springframework.security.oauth2.core.oidc.user.OidcUser>; // An implementation of an ReactiveOAuth2UserService that supports OpenID Connect 1.0 Provider's.\npublic class OidcUserRequest extends OAuth2UserRequest; // Represents a request the OidcUserService uses when initiating a request to the UserInfo Endpoint.\npublic class OidcUserService extends Object implements OAuth2UserService<OidcUserRequest,org.springframework.security.oauth2.core.oidc.user.OidcUser>; // An implementation of an OAuth2UserService that supports OpenID Connect 1.0 Provider's.\n", "des": "Classes and interfaces providing support to the client for initiating requests to the OpenID Connect 1.0 Provider's UserInfo Endpoint."}
{"index": 1490, "repo": "tribuo-core-4.3.1", "code": "package transformations;\n\npublic final class BinningTransformation extends Object implements Transformation; // A Transformation which bins values.\npublic static final class BinningTransformation.BinningTransformationProvenance extends Object implements TransformationProvenance; // Provenance for BinningTransformation.\npublic static final class BinningTransformation.BinningTransformer extends Object implements Transformer; // The implementation of a Transformer which splits the input into n bins.\npublic static enum BinningTransformation.BinningType extends Enum<BinningTransformation.BinningType>; // The allowed binning types.\npublic class IDFTransformation extends Object implements Transformation; // A feature transformation that computes the IDF for features and then transforms them with a TF-IDF weighting.\npublic static final class IDFTransformation.IDFTransformationProvenance extends Object implements TransformationProvenance; // Provenance for IDFTransformation.\npublic final class LinearScalingTransformation extends Object implements Transformation; // A Transformation which takes an observed distribution and rescales it so all values are between the desired min and max.\npublic static final class LinearScalingTransformation.LinearScalingTransformationProvenance extends Object implements TransformationProvenance; // Provenance for LinearScalingTransformation.\npublic final class MeanStdDevTransformation extends Object implements Transformation; // A Transformation which takes an observed distribution and rescales it so it has the desired mean and standard deviation.\npublic static final class MeanStdDevTransformation.MeanStdDevTransformationProvenance extends Object implements TransformationProvenance; // Provenance for MeanStdDevTransformation.\npublic final class SimpleTransform extends Object implements Transformer, Transformation, TransformStatistics; // This is used for stateless functions such as exp, log, addition or multiplication by a constant.\npublic static enum SimpleTransform.Operation extends Enum<SimpleTransform.Operation>; // Operations understood by this Transformation.\npublic static final class SimpleTransform.SimpleTransformProvenance extends Object implements TransformationProvenance; // Provenance for SimpleTransform.\n", "des": "Provides implementations of standard transformations like binning, scaling, taking logs and exponents."}
{"index": 3660, "repo": "solr-core-9.3.0", "code": "package export;\n\nInterface IntComp;\nClass ExportWriter; // Prepares and writes the documents requested by /export requests\nClass ExportWriterStream; // Stream implementation that helps supporting 'expr' streaming in export writer.\nClass IntComp.IntAsc;\nClass IntComp.IntDesc;\nClass IntValue;\nClass LongValue;\nClass ExportWriter.IgnoreException;\n", "des": "Solr's Export Handler Functionality"}
{"index": 3178, "repo": "tomcat-api-10.1", "code": "package tribes;\n\nInterface Channel; // Channel interface A channel is a representation of a group of nodes all participating in some sort of communication with each other. The channel is the main API class for Tribes, this is essentially the only class that an application needs to be aware of.\nInterface ChannelInterceptor; // A ChannelInterceptor is an interceptor that intercepts messages and membership messages in the channel stack.\nInterface ChannelInterceptor.InterceptorEvent;\nInterface ChannelListener; // An interface to listens to incoming messages from a channel.\nInterface ChannelMessage; // Message that is passed through the interceptor stack after the data serialized in the Channel object and then passed down to the interceptor and eventually down to the ChannelSender component\nInterface ChannelReceiver; // ChannelReceiver Interface The ChannelReceiver interface is the data receiver component at the bottom layer, the IO layer (for layers see the javadoc for the Channel interface).\nInterface ChannelSender; // ChannelReceiver Interface The ChannelSender interface is the data sender component at the bottom layer, the IO layer (for layers see the javadoc for the Channel interface). The channel sender must support \"silent\" members, ie, be able to send a message to a member that is not in the membership, but is part of the destination parameter\nInterface ErrorHandler; // The ErrorHandler class is used when sending messages that are sent asynchronously and the application still needs to get confirmation when the message was sent successfully or when a message errored out.\nInterface Heartbeat; // Can be implemented by the ChannelListener and Membership listeners to receive heartbeat notifications from the Channel\nInterface JmxChannel;\nInterface ManagedChannel; // Channel interface A managed channel interface gives you access to the components of the channels such as senders, receivers, interceptors etc for configurations purposes\nInterface Member; // The Member interface, defines a member in the group.\nInterface MembershipListener; // The MembershipListener interface is used as a callback to the membership service.\nInterface MembershipProvider;\nInterface MembershipService; // MembershipService Interface The MembershipService interface is the membership component at the bottom layer, the IO layer (for layers see the javadoc for the Channel interface).\nInterface MessageListener; // The listener to be registered with the ChannelReceiver, internal Tribes component.\nClass ByteMessage; // A byte message is not serialized and deserialized by the channel instead it is sent as a byte array By default Tribes uses java serialization when it receives an object to be sent over the wire.\n", "des": "QuickStart"}
{"index": 1301, "repo": "groovy-all-4.0.13", "code": "package io;\n\npublic class EncodingAwareBufferedWriter extends BufferedWriter; // A buffered writer only for OutputStreamWriter that is aware of the encoding of the OutputStreamWriter.\npublic enum FileType extends Enum<FileType>; // Represents particular files of interest.\npublic enum FileVisitResult extends Enum<FileVisitResult>; // Represents special return values for the 'preDir', 'postDir' and 'visit'/supplied Closures used with ResourceGroovyMethods.traverse(java.io.File, java.util.Map, groovy.lang.Closure) and related methods to control subsequent traversal behavior.\npublic class GroovyPrintStream extends PrintStream; // A PrintStream that outputs objects in Groovy style.\npublic class GroovyPrintWriter extends PrintWriter; // A PrintWriter that outputs objects in Groovy style.\npublic class LineColumnReader extends BufferedReader; // The LineColumnReader is an extension to BufferedReader that keeps track of the line and column information of where the cursor is.\npublic class PlatformLineWriter extends Writer; // A buffered writer that gobbles any \\r characters and replaces every \\n with a platform specific newline.\n", "des": "Classes for Groovier Input/Output."}
{"index": 1188, "repo": "commons-math3-3.6.1", "code": "package linear;\n\nClass LinearConstraint; // A linear constraint for a linear optimization problem.\nClass LinearConstraintSet; // Class that represents a set of linear constraints.\nClass LinearObjectiveFunction; // An objective function for a linear optimization problem.\nClass LinearOptimizer; // Base class for implementing linear optimizers.\nClass NonNegativeConstraint; // A constraint for a linear optimization problem indicating whether all variables must be restricted to non-negative values.\nClass SimplexSolver; // Solves a linear problem using the \"Two-Phase Simplex\" method.\nClass SolutionCallback; // A callback object that can be provided to a linear optimizer to keep track of the best solution found.\nEnum PivotSelectionRule; // Pivot selection rule to the use for a Simplex solver.\nEnum Relationship; // Types of relationships between two cells in a Solver LinearConstraint.\nClass NoFeasibleSolutionException; // This class represents exceptions thrown by optimizers when no solution fulfills the constraints.\nClass UnboundedSolutionException; // This class represents exceptions thrown by optimizers when a solution escapes to infinity.\n", "des": "Optimization algorithms for linear constrained problems."}
{"index": 1178, "repo": "commons-math3-3.6.1", "code": "package oned;\n\nClass NeuronString; // Neural network with the topology of a one-dimensional line.\n", "des": "One-dimensional neural networks."}
{"index": 3821, "repo": "lucene-analysis-common-9.7.0", "code": "package te;\n\nClass TeluguAnalyzer; // Analyzer for Telugu.\nClass TeluguNormalizationFilter; // A TokenFilter that applies TeluguNormalizer to normalize the orthography.\nClass TeluguNormalizationFilterFactory; // Factory for TeluguNormalizationFilter.\nClass TeluguNormalizer; // Normalizer for Telugu.\nClass TeluguStemFilter; // A TokenFilter that applies TeluguStemmer to stem Telugu words.\nClass TeluguStemFilterFactory; // Factory for TeluguStemFilter.\nClass TeluguStemmer; // Stemmer for Telugu.\n", "des": "Analyzer for Telugu Language."}
{"index": 909, "repo": "commons-compress-1.23.0", "code": "package examples;\n\nInterface CloseableConsumer; // Callback that is informed about a closable resource that has been wrapped around a passed in stream or channel by Expander or Archiver when Expander or Archiver no longer need them.\nClass Archiver; // Provides a high level API for creating archives.\nClass Expander; // Provides a high level API for expanding archives.\n", "des": "Contains example code that is not guaranteed to provide a stable API across releases of Commons Compress."}
{"index": 3572, "repo": "lucene-codecs-9.7.0", "code": "package sharedterms;\n\nClass FieldMetadataTermState; // Pair of FieldMetadata and BlockTermState for a specific field.\nClass STBlockLine; // Represents a term and its details stored in the BlockTermState.\nClass STBlockLine.Serializer; // Reads block lines encoded incrementally, with all fields corresponding to the term of the line.\nClass STBlockReader; // Reads terms blocks with the Shared Terms format.\nClass STBlockWriter; // Writes terms blocks with the Shared Terms format.\nClass STIntersectBlockReader; // The \"intersect\" TermsEnum response to STUniformSplitTerms.intersect(CompiledAutomaton, BytesRef), intersecting the terms with an automaton.\nClass STMergingBlockReader; // TermsEnum used when merging segments, to enumerate the terms of an input segment and get all the fields TermStates of each term.\nClass STUniformSplitPostingsFormat; // PostingsFormat based on the Uniform Split technique and supporting Shared Terms.\nClass STUniformSplitTerms; // Extends UniformSplitTerms for a shared-terms dictionary, with all the fields of a term in the same block line.\nClass STUniformSplitTermsReader; // A block-based terms index and dictionary based on the Uniform Split technique, and sharing all the fields terms in the same dictionary, with all the fields of a term in the same block line.\nClass STUniformSplitTermsWriter; // Extends UniformSplitTermsWriter by sharing all the fields terms in the same dictionary and by writing all the fields of a term in the same block line.\nClass UnionFieldMetadataBuilder; // Builds a FieldMetadata that is the union of multiple FieldMetadata.\n", "des": "Pluggable term index / block terms dictionary implementations."}
{"index": 3739, "repo": "lucene-queryparser-9.7.0", "code": "package precedence;\n\npackage precedence.processors; // Lucene Precedence Query Parser Processors\nClass PrecedenceQueryParser; // This query parser works exactly as the standard query parser ( StandardQueryParser ), except that it respect the boolean precedence, so <a AND b OR c AND d> is parsed to <(+a +b) (+c +d)> instead of <+a +b +c +d>.\n", "des": "Precedence Query Parser Implementation"}
{"index": 3891, "repo": "solr-solrj-9.3.0", "code": "package schema;\n\nClass AbstractSchemaRequest<T extends SolrResponse>;\nClass AnalyzerDefinition;\nClass FieldTypeDefinition;\nClass SchemaRequest; // This class offers access to the operations exposed by the Solr Schema API.\nClass SchemaRequest.AddCopyField; // Adds a new copy field rule to the schema of the specified collection.\nClass SchemaRequest.AddDynamicField; // Adds a new dynamic field rule to the schema of the specified collection.\nClass SchemaRequest.AddField; // Adds a new field definition to the schema.\nClass SchemaRequest.AddFieldType; // Update request used to add a new field type to the schema.\nClass SchemaRequest.CopyFields; // Schema API request that retrieves the source and destination of each copy field in the schema.\nClass SchemaRequest.DeleteCopyField; // Deletes a copy field rule from the schema of the specified collection.\nClass SchemaRequest.DeleteDynamicField; // Deletes a dynamic field rule from your schema.\nClass SchemaRequest.DeleteField; // Removes a field definition from the schema.\nClass SchemaRequest.DeleteFieldType; // Removes a field type from the schema of the specified collection.\nClass SchemaRequest.DynamicField; // Schema API request that lists the dynamic field definition for the specified field contained in the schema.\nClass SchemaRequest.DynamicFields; // Schema API request that lists the dynamic field definitions contained in the schema.\nClass SchemaRequest.Field; // Schema API request that lists the field definition for the specified field contained in the schema.\nClass SchemaRequest.Fields; // Schema API request class that lists the field definitions contained in the schema.\nClass SchemaRequest.FieldType; // Schema API request that retrieves the type definitions for the specified field type contained in the schema.\nClass SchemaRequest.FieldTypes; // Schema API request that lists the types definitions contained in the schema.\nClass SchemaRequest.GlobalSimilarity; // Retrieves the class name of the global similarity defined (if any) in the schema.\nClass SchemaRequest.MultiUpdate; // The Schema API offers the possibility to perform one or more add requests in a single command.\nClass SchemaRequest.ReplaceDynamicField; // Replaces a dynamic field rule in the schema of the specified collection.\nClass SchemaRequest.ReplaceField; // Replaces a field's definition.\nClass SchemaRequest.ReplaceFieldType; // Replaces a field type in schema belonging to the schema of the specified collection.\n", "des": "Convenience classes for making Schema API requests."}
{"index": 3544, "repo": "opennlp-tools-2.2.0", "code": "package sentdetect;\n\nInterface EndOfSentenceScanner; // Scans CharSequence, StringBuffer, and char[] for the offsets of sentence ending characters.\nInterface SDContextGenerator; // Interface for SentenceDetectorME context generators.\nInterface SentenceDetector; // The interface for sentence detectors, which find the sentence boundaries in a text.\nInterface SentenceDetectorEvaluationMonitor;\nClass DefaultEndOfSentenceScanner; // Default implementation of the EndOfSentenceScanner.\nClass DefaultSDContextGenerator; // Generate event contexts for maxent decisions for sentence detection.\nClass EmptyLinePreprocessorStream; // ObjectStream to clean up empty lines for empty line separated document streams. - Skips empty line at training data start - Transforms multiple empty lines in a row into one - Replaces white space lines with empty lines - TODO: Terminates last document with empty line if it is missing This stream should be used by the components that mark empty lines to mark document boundaries.\nClass NewlineSentenceDetector; // The Newline SentenceDetector assumes that sentences are line delimited and recognizes one sentence per non-empty line.\nClass SDCrossValidator; // A cross validator for sentence detectors.\nClass SDEventStream;\nClass SentenceDetectorEvaluator; // The SentenceDetectorEvaluator measures the performance of the given SentenceDetector with the provided reference SentenceSamples.\nClass SentenceDetectorFactory; // The factory that provides SentenceDetector default implementations and resources\nClass SentenceDetectorME; // A sentence detector for splitting up raw text into sentences.\nClass SentenceModel; // The SentenceModel is the model used by a learnable SentenceDetector.\nClass SentenceSample; // A SentenceSample contains a document with begin indexes of the individual sentences.\nClass SentenceSampleStream; // This class is a stream filter which reads a sentence by line samples from an ObjectStream and converts them into SentenceSample objects.\n", "des": "Package related to identifying sentence boundaries."}
{"index": 1891, "repo": "shiro-core-2.0.0-alpha-2", "code": "package mgt;\n\npackage mgt.eis; // EIS (Enterprise Information System)-tier components that can perform CRUD operations for sessions using any EIS API.\npublic abstract class AbstractNativeSessionManager extends AbstractSessionManager implements NativeSessionManager, org.apache.shiro.event.EventBusAware; // Abstract implementation supporting the NativeSessionManager interface, supporting SessionListeners and application of the globalSessionTimeout.\npublic abstract class AbstractSessionManager extends Object implements SessionManager; // Base abstract class of the SessionManager interface, enabling configuration of an application-wide globalSessionTimeout.\npublic abstract class AbstractValidatingSessionManager extends AbstractNativeSessionManager implements ValidatingSessionManager, org.apache.shiro.lang.util.Destroyable; // Default business-tier implementation of the ValidatingSessionManager interface.\npublic class DefaultSessionContext extends MapContext implements SessionContext; // Default implementation of the SessionContext interface which provides getters and setters that wrap interaction with the underlying backing context map.\npublic class DefaultSessionKey extends Object implements SessionKey, Serializable; // Default implementation of the SessionKey interface, which allows setting and retrieval of a concrete sessionId that the SessionManager implementation can use to look up a Session instance.\npublic class DefaultSessionManager extends AbstractValidatingSessionManager implements org.apache.shiro.cache.CacheManagerAware; // Default business-tier implementation of a ValidatingSessionManager.\npublic class DelegatingSession extends Object implements Session, Serializable; // A DelegatingSession is a client-tier representation of a server side Session.\npublic class ExecutorServiceSessionValidationScheduler extends Object implements SessionValidationScheduler, Runnable; // SessionValidationScheduler implementation that uses a ScheduledExecutorService to call ValidatingSessionManager.validateSessions() every sessionValidationInterval milliseconds.\npublic class ImmutableProxiedSession extends ProxiedSession; // Implementation of the Session interface that proxies another Session, but does not allow any 'write' operations to the underlying session.\npublic interface NativeSessionManager extends SessionManager; // A Native session manager is one that manages sessions natively - that is, it is directly responsible for the creation, persistence and removal of Session instances and their lifecycles.\npublic interface SessionContext extends Map<String,Object>; // A SessionContext is a 'bucket' of data presented to a SessionFactory which interprets this data to construct Session instances.\npublic interface SessionFactory; // A simple factory class that instantiates concrete Session instances.\n", "des": "SessionManager components supporting enterprise session management."}
{"index": 3527, "repo": "opennlp-tools-2.2.0", "code": "package langdetect;\n\nInterface LanguageDetector; // The interface for LanguageDetector which predicts the Language for a context.\nInterface LanguageDetectorContextGenerator; // A context generator interface for LanguageDetector.\nInterface LanguageDetectorEvaluationMonitor; // A marker interface for evaluating language detectors.\nClass DefaultLanguageDetectorContextGenerator; // A context generator for language detector.\nClass Language; // Class for holding the document language and its confidence\nClass LanguageDetectorConfig;\nClass LanguageDetectorCrossValidator; // Cross validator for LanguageDetector.\nClass LanguageDetectorEvaluator; // The LanguageDetectorEvaluator measures the performance of the given LanguageDetector with the provided reference LanguageSamples.\nClass LanguageDetectorEventStream; // Iterator-like class for modeling an event stream of samples.\nClass LanguageDetectorFactory; // Default factory used by LanguageDetector.\nClass LanguageDetectorME; // Implements a learnable LanguageDetector.\nClass LanguageDetectorModel; // The LanguageDetectorModel is the model used by a learnable LanguageDetector.\nClass LanguageDetectorSampleStream; // This class reads in string encoded training samples, parses them and outputs LanguageSample objects.\nClass LanguageSample; // Holds a classified document and its Language.\nClass ProbingLanguageDetectionResult; // A data container encapsulating language detection results.\n", "des": "Package related to predicting languages from samples of text."}
{"index": 3818, "repo": "lucene-analysis-common-9.7.0", "code": "package synonym;\n\npackage synonym.word2vec; // Analysis components for Synonyms using Word2Vec model.\nClass SolrSynonymParser; // Parser for the Solr synonyms format.\nClass SynonymFilter;\nClass SynonymFilterFactory;\nClass SynonymGraphFilter; // Applies single- or multi-token synonyms from a SynonymMap to an incoming TokenStream, producing a fully correct graph output.\nClass SynonymGraphFilterFactory; // Factory for SynonymGraphFilter.\nClass SynonymMap; // A map of synonyms, keys and values are phrases.\nClass SynonymMap.Builder; // Builds an FSTSynonymMap.\nClass SynonymMap.Parser; // Abstraction for parsing synonym files.\nClass WordnetSynonymParser; // Parser for wordnet prolog format\n", "des": "Analysis components for Synonyms."}
{"index": 1788, "repo": "spring-integration-file-6.1.2", "code": "package gateway;\n\npublic abstract class AbstractRemoteFileOutboundGateway<F> extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler; // Base class for Outbound Gateways that perform remote file operations.\npublic static enum AbstractRemoteFileOutboundGateway.Command extends Enum<AbstractRemoteFileOutboundGateway.Command>; // Enumeration of commands supported by the gateways.\npublic static enum AbstractRemoteFileOutboundGateway.Option extends Enum<AbstractRemoteFileOutboundGateway.Option>; // Enumeration of options supported by various commands.\n", "des": "Provides classes supporting remote file gateways."}
{"index": 1754, "repo": "spring-data-mongodb-4.1.2", "code": "package geo;\n\npublic interface GeoJson<T extends Iterable<?>>; // Interface definition for structures defined in GeoJSON format.\npublic class GeoJsonGeometryCollection extends Object implements GeoJson<Iterable<GeoJson<?>>>; // Defines a GeoJsonGeometryCollection that consists of a List of GeoJson objects.\npublic class GeoJsonLineString extends GeoJsonMultiPoint; // GeoJsonLineString is defined as list of at least 2 Points.\npublic class GeoJsonModule extends com.fasterxml.jackson.databind.module.SimpleModule; // A Jackson Module to register custom JsonDeserializers for GeoJSON types.\npublic class GeoJsonMultiLineString extends Object implements GeoJson<Iterable<GeoJsonLineString>>; // GeoJsonMultiLineString is defined as list of GeoJsonLineStrings.\npublic class GeoJsonMultiPoint extends Object implements GeoJson<Iterable<Point>>; // GeoJsonMultiPoint is defined as list of Points.\npublic class GeoJsonMultiPolygon extends Object implements GeoJson<Iterable<GeoJsonPolygon>>; // GeoJsonMultiPolygon is defined as a list of GeoJsonPolygons.\npublic class GeoJsonPoint extends Point implements GeoJson<List<Double>>; // GeoJson representation of Point.\npublic class GeoJsonPolygon extends Polygon implements GeoJson<List<GeoJsonLineString>>; // GeoJson representation of Polygon.\npublic class Sphere extends Object implements Shape; // Represents a geospatial sphere value.\n", "des": "Support for MongoDB geo-spatial queries."}
{"index": 1531, "repo": "spring-context-6.0.11", "code": "package export;\n\npackage export.annotation; // Annotations for MBean exposure.\npackage export.assembler; // Provides a strategy for MBeanInfo assembly.\npackage export.metadata; // Provides generic JMX metadata classes and basic support for reading JMX metadata in a provider-agnostic manner.\npackage export.naming; // Provides a strategy for ObjectName creation.\npackage export.notification; // Provides supporting infrastructure to allow Spring-created MBeans to send JMX notifications.\npublic class MBeanExporter extends MBeanRegistrationSupport implements MBeanExportOperations, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.SmartInitializingSingleton, org.springframework.beans.factory.DisposableBean; // JMX exporter that allows for exposing any Spring-managed bean to a JMX MBeanServer, without the need to define any JMX-specific information in the bean classes.\npublic interface MBeanExporterListener; // A listener that allows application code to be notified when an MBean is registered and unregistered via an MBeanExporter.\npublic class MBeanExportException extends JmxException; // Exception thrown in case of failure when exporting an MBean.\npublic interface MBeanExportOperations; // Interface that defines the set of MBean export operations that are intended to be accessed by application developers during application runtime.\npublic class NotificationListenerBean extends NotificationListenerHolder implements org.springframework.beans.factory.InitializingBean; // Helper class that aggregates a NotificationListener, a NotificationFilter, and an arbitrary handback object.\npublic class SpringModelMBean extends RequiredModelMBean; // Extension of the RequiredModelMBean class that ensures the thread context ClassLoader is switched for the managed resource's ClassLoader before any invocations occur.\npublic class UnableToRegisterMBeanException extends MBeanExportException; // Exception thrown when we are unable to register an MBean, for example because of a naming conflict.\n", "des": "This package provides declarative creation and registration of Spring-managed beans as JMX MBeans."}
{"index": 1395, "repo": "spring-boot-actuator-3.1.1", "code": "package reactive;\n\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.reactive.AbstractWebFluxEndpointHandlerMapping.AbstractWebFluxEndpointHandlerMappingRuntimeHints.class) public abstract class AbstractWebFluxEndpointHandlerMapping extends org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping; // A custom HandlerMapping that makes web endpoints available over HTTP using Spring WebFlux.\nprotected static final class AbstractWebFluxEndpointHandlerMapping.ElasticSchedulerInvoker extends Object implements OperationInvoker; // An OperationInvoker that performs the invocation of a blocking operation on a separate thread using Reactor's bounded elastic scheduler.\n@FunctionalInterface protected static interface AbstractWebFluxEndpointHandlerMapping.LinksHandler; // Reactive handler providing actuator links at the root endpoint.\n@FunctionalInterface protected static interface AbstractWebFluxEndpointHandlerMapping.ReactiveWebOperation; // A reactive web operation that can be handled by WebFlux.\npublic class AdditionalHealthEndpointPathsWebFluxHandlerMapping extends AbstractWebFluxEndpointHandlerMapping; // A custom HandlerMapping that allows health groups to be mapped to an additional path.\npublic class ControllerEndpointHandlerMapping extends org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping; // HandlerMapping that exposes @ControllerEndpoint and @RestControllerEndpoint annotated endpoints over Spring WebFlux.\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.WebFluxEndpointHandlerMappingRuntimeHints.class) public class WebFluxEndpointHandlerMapping extends AbstractWebFluxEndpointHandlerMapping implements org.springframework.beans.factory.InitializingBean; // A custom HandlerMapping that makes web endpoints available over HTTP using Spring WebFlux.\n", "des": "Spring WebFlux support for actuator endpoints."}
{"index": 2861, "repo": "spring-integration-core-6.1.2", "code": "package filter;\n\npublic abstract class AbstractMessageProcessingSelector extends Object implements MessageSelector, org.springframework.beans.factory.BeanFactoryAware, ManageableLifecycle; // A base class for MessageSelector implementations that delegate to a MessageProcessor.\npublic class ExpressionEvaluatingSelector extends AbstractMessageProcessingSelector; // A MessageSelector implementation that evaluates a SpEL expression.\npublic class MessageFilter extends AbstractReplyProducingPostProcessingMessageHandler implements DiscardingMessageHandler, ManageableLifecycle; // Message Handler that delegates to a MessageSelector.\npublic class MethodInvokingSelector extends AbstractMessageProcessingSelector; // A method-invoking implementation of MessageSelector.\n", "des": "Provides classes supporting the filter pattern."}
{"index": 2661, "repo": "spring-data-cassandra-4.1.2", "code": "package query;\n\npublic class CassandraPageRequest extends PageRequest; // Cassandra-specific PageRequest implementation providing access to paging state.\npublic abstract class ColumnName extends Object; // Value object representing a column name.\npublic class Columns extends Object implements Iterable<ColumnName>; // Value object to abstract column names involved in a CQL query.\npublic static class Columns.ColumnSelector extends Object implements Columns.Selector; // Column selection.\npublic static class Columns.FunctionCall extends Object implements Columns.Selector; // Function call selector with alias support.\npublic static interface Columns.Selector; // Strategy interface to render a column selection.\npublic class Criteria extends Object implements CriteriaDefinition; // Basic class for creating queries.\npublic interface CriteriaDefinition; // Criteria definition for a ColumnName exposing a CriteriaDefinition.Predicate.\npublic static interface CriteriaDefinition.Operator; // Strategy interface to represent a CQL predicate operator.\npublic static enum CriteriaDefinition.Operators extends Enum<CriteriaDefinition.Operators> implements CriteriaDefinition.Operator; // Commonly used CQL operators.\npublic static class CriteriaDefinition.Predicate extends Object; // Represents an operator associated with its value.\n@FunctionalInterface public interface Filter extends Streamable<CriteriaDefinition>; // Filter consisting of CriteriaDefinitions to be used with SELECT, UPDATE and DELETE queries.\npublic class Query extends Object implements Filter; // Query object representing CriteriaDefinitions, Columns, Sort, paging state and QueryOptions for a CQL query.\npublic class Update extends Object; // Update object representing a set of update operations.\npublic static interface Update.AddToBuilder; // Builder to add a single element/multiple elements to a collection associated with a ColumnName.\npublic static class Update.AddToMapOp extends Update.AssignmentOp; // Add element(s) to Map operation.\npublic static class Update.AddToOp extends Update.AssignmentOp; // Add element(s) to collection operation.\npublic static enum Update.AddToOp.Mode extends Enum<Update.AddToOp.Mode>;\npublic abstract static class Update.AssignmentOp extends Object; // Abstract class for an update assignment related to a specific ColumnName.\npublic static class Update.IncrOp extends Update.AssignmentOp; // Increment operation.\npublic static interface Update.RemoveFromBuilder; // Builder to remove a single element/multiple elements from a collection associated with a ColumnName.\npublic static class Update.RemoveOp extends Update.AssignmentOp; // Remove operation.\n", "des": "Apache Cassandra specific query and update support."}
{"index": 1855, "repo": "spring-test-6.0.11", "code": "package client;\n\npackage client.match; // Contains built-in RequestMatcher implementations.\npackage client.response; // Contains built-in ResponseCreator implementations.\npublic abstract class AbstractRequestExpectationManager extends Object implements RequestExpectationManager; // Base class for RequestExpectationManager implementations responsible for storing expectations and actual requests, and checking for unsatisfied expectations at the end.\nprotected static class AbstractRequestExpectationManager.RequestExpectationGroup extends Object; // Helper class to manage a group of remaining expectations.\npublic class DefaultRequestExpectation extends Object implements RequestExpectation; // Default implementation of RequestExpectation that simply delegates to the request matchers and the response creator it contains.\nprotected static class DefaultRequestExpectation.RequestCount extends Object; // Helper class that keeps track of actual vs expected request count.\npublic final class ExpectedCount extends Object; // A simple type representing a range for an expected count.\npublic class MockMvcClientHttpRequestFactory extends Object implements org.springframework.http.client.ClientHttpRequestFactory; // A ClientHttpRequestFactory for requests executed via MockMvc.\npublic final class MockRestServiceServer extends Object; // Main entry point for client-side REST testing.\npublic static interface MockRestServiceServer.MockRestServiceServerBuilder; // Builder to create a MockRestServiceServer.\npublic interface RequestExpectation extends ResponseActions, RequestMatcher, ResponseCreator; // An extension of ResponseActions that also implements RequestMatcher and ResponseCreator\npublic interface RequestExpectationManager; // Encapsulates the behavior required to implement MockRestServiceServer including its public API (create expectations + verify/reset) along with an extra method for verifying actual requests.\n@FunctionalInterface public interface RequestMatcher; // A contract for matching requests to expectations.\npublic interface ResponseActions; // A contract for setting up request expectations and defining a response.\n@FunctionalInterface public interface ResponseCreator; // A contract for creating a ClientHttpResponse.\npublic class SimpleRequestExpectationManager extends AbstractRequestExpectationManager; // Simple RequestExpectationManager that matches requests to expectations sequentially, i.e.\npublic class UnorderedRequestExpectationManager extends AbstractRequestExpectationManager; // RequestExpectationManager that matches requests to expectations regardless of the order of declaration of expected requests.\n", "des": "Contains client-side REST testing support."}
{"index": 3770, "repo": "lucene-analysis-common-9.7.0", "code": "package classic;\n\nClass ClassicAnalyzer; // Filters ClassicTokenizer with ClassicFilter, LowerCaseFilter and StopFilter, using a list of English stop words.\nClass ClassicFilter; // Normalizes tokens extracted with ClassicTokenizer.\nClass ClassicFilterFactory; // Factory for ClassicFilter.\nClass ClassicTokenizer; // A grammar-based tokenizer constructed with JFlex\nClass ClassicTokenizerFactory; // Factory for ClassicTokenizer.\n", "des": "Fast, general-purpose grammar-based tokenizers."}
{"index": 2545, "repo": "pulsar-common-3.0.0", "code": "package zstd;\n\npublic class ZStdRawCompressor extends Object; // Expose ZstdFrameCompressor which is a package protected class.\npublic class ZStdRawDecompressor extends Object; // Exposes ZstdFrameDecompressor which is package protected.\n", "des": "Helper class to access AirCompressor package private classes."}
{"index": 2529, "repo": "spring-security-core-6.1.2", "code": "package jaas;\n\npackage jaas.event; // JAAS authentication events which can be published to the Spring application context by the JAAS authentication provider.\npackage jaas.memory; // An in memory JAAS implementation.\npublic abstract class AbstractJaasAuthenticationProvider extends Object implements AuthenticationProvider, org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.InitializingBean, org.springframework.context.ApplicationListener<SessionDestroyedEvent>; // An AuthenticationProvider implementation that retrieves user details from a JAAS login configuration.\npublic interface AuthorityGranter; // The AuthorityGranter interface is used to map a given principal to role names.\npublic class DefaultJaasAuthenticationProvider extends AbstractJaasAuthenticationProvider; // Creates a LoginContext using the Configuration provided to it.\npublic class DefaultLoginExceptionResolver extends Object implements LoginExceptionResolver; // This LoginExceptionResolver simply wraps the LoginException with an AuthenticationServiceException.\npublic interface JaasAuthenticationCallbackHandler; // The JaasAuthenticationCallbackHandler is similar to the javax.security.auth.callback.CallbackHandler interface in that it defines a handle method.\npublic class JaasAuthenticationProvider extends AbstractJaasAuthenticationProvider; // An AuthenticationProvider implementation that retrieves user details from a JAAS login configuration.\npublic class JaasAuthenticationToken extends UsernamePasswordAuthenticationToken; // UsernamePasswordAuthenticationToken extension to carry the Jaas LoginContext that the user was logged into\npublic final class JaasGrantedAuthority extends Object implements GrantedAuthority; // GrantedAuthority which, in addition to the assigned role, holds the principal that an AuthorityGranter used as a reason to grant this authority.\npublic class JaasNameCallbackHandler extends Object implements JaasAuthenticationCallbackHandler; // The most basic Callbacks to be handled when using a LoginContext from JAAS, are the NameCallback and PasswordCallback.\npublic class JaasPasswordCallbackHandler extends Object implements JaasAuthenticationCallbackHandler; // The most basic Callbacks to be handled when using a LoginContext from JAAS, are the NameCallback and PasswordCallback.\npublic interface LoginExceptionResolver; // The JaasAuthenticationProvider takes an instance of LoginExceptionResolver to resolve LoginModule specific exceptions to Spring Security AuthenticationExceptions.\npublic class SecurityContextLoginModule extends Object implements LoginModule; // An implementation of LoginModule that uses a Spring Security SecurityContext to provide authentication.\n", "des": "An authentication provider for JAAS."}
{"index": 3360, "repo": "opencms-core-15.0", "code": "package table;\n\nClass CmsBeanTableBuilder<T>; // Builds a table based on a given bean class.\nClass CmsTableUtil; // Contains utility methods for Vaadin tables.\nAnnotation Type Column; // Annotation used to mark up bean properties with metadata for table columns.\n", "des": "Contains utility classes for dealing with Vaadin tables."}
{"index": 1721, "repo": "spring-boot-test-3.1.1", "code": "package server;\n\n@Target({FIELD,METHOD,PARAMETER,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Value(\"${local.management.port}\") public @interface LocalManagementPort; // Annotation at the field or method/constructor parameter level that injects the HTTP management port that was allocated at runtime.\n@Target({FIELD,METHOD,PARAMETER,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Value(\"${local.server.port}\") public @interface LocalServerPort; // Annotation at the field or method/constructor parameter level that injects the HTTP server port that was allocated at runtime.\n", "des": "Web server test utilities and support classes."}
{"index": 3582, "repo": "lucene-test-framework-9.7.0", "code": "package blockterms;\n\nClass LuceneFixedGap; // Customized version of Lucene90PostingsFormat that uses FixedGapTermsIndexWriter.\nClass LuceneVarGapDocFreqInterval; // Customized version of Lucene90PostingsFormat that uses VariableGapTermsIndexWriter with a fixed interval, but forcing high docfreq terms to be indexed terms.\nClass LuceneVarGapFixedInterval; // Customized version of Lucene90PostingsFormat that uses VariableGapTermsIndexWriter with a fixed interval.\n", "des": "Codecs for testing that support org.apache.lucene.codecs.blockterms."}
{"index": 915, "repo": "commons-compress-1.23.0", "code": "package compressors;\n\npackage compressors.brotli; // Provides stream class for decompressing streams using the Brotli algorithm based on Google's Brotli decoder.\npackage compressors.bzip2; // Provides stream classes for compressing and decompressing streams using the BZip2 algorithm.\npackage compressors.deflate; // Provides a stream classes that allow (de)compressing streams using the DEFLATE algorithm.\npackage compressors.deflate64; // Provides a stream that allows decompressing streams using the DEFLATE64(tm) algorithm.\npackage compressors.gzip; // Provides stream classes for compressing and decompressing streams using the GZip algorithm.\npackage compressors.lz4; // Provides stream classes for the LZ4 algorithm.\npackage compressors.lz77support; // Provides utility classes for LZ77 based algorithms.\npackage compressors.lzma; // Provides stream classes using the \"stand-alone\" LZMA algorithm.\npackage compressors.lzw; // Generic LZW implementation.\npackage compressors.pack200; // Provides stream classes for compressing and decompressing streams using the Pack200 algorithm used to compress Java archives.\npackage compressors.snappy; // Provides stream classes for the Snappy algorithm.\npackage compressors.xz; // Provides stream classes for compressing and decompressing streams using the XZ algorithm.\npackage compressors.z; // Provides stream classes for decompressing streams using the \"compress\" algorithm used to write .Z files.\npackage compressors.zstandard; // Provides stream class for (de)compressing streams using the Zstandard algorithm based on Zstandard JNI.\nInterface CompressorStreamProvider; // Creates Compressor CompressorInputStreams and CompressorOutputStreams.\nClass CompressorInputStream;\nClass CompressorOutputStream;\nClass CompressorStreamFactory; // Factory to create Compressor[In|Out]putStreams from names.\nClass FileNameUtil; // File name mapping code for the compression formats.\nClass CompressorException; // Compressor related exception\n", "des": "Provides a unified API and factories for dealing with compressed streams."}
{"index": 3381, "repo": "dagger-2.47", "code": "package dagger;\n\npackage dagger.assisted; // This package contains the API for Dagger's assisted injection.\npackage dagger.multibindings; // This package contains the API by which Dagger allows you to bind several objects into a collection that can be injected without depending directly on each of the individual bindings.\nInterface Lazy<T>; // A handle to a lazily-computed value.\nInterface MembersInjector<T>; // Injects dependencies into the fields and methods on instances of type T.\nAnnotation Type Binds; // Annotates abstract methods of a Module that delegate bindings.\nAnnotation Type BindsInstance; // Marks a method on a component builder or a parameter on a component factory as binding an instance to some key within the component.\nAnnotation Type BindsOptionalOf; // Annotates methods that declare bindings for Optional containers of values from bindings that may or may not be present in the component.\nAnnotation Type Component; // Annotates an interface or abstract class for which a fully-formed, dependency-injected implementation is to be generated from a set of Component.modules().\nAnnotation Type Component.Builder; // A builder for a component.\nAnnotation Type Component.Factory; // A factory for a component.\nAnnotation Type MapKey; // Identifies annotation types that are used to associate keys with values returned by provider methods in order to compose a map.\nAnnotation Type Module; // Annotates a class that contributes to the object graph.\nAnnotation Type Provides; // Annotates methods of a module to create a provider method binding.\nAnnotation Type Reusable; // A scope that indicates that the object returned by a binding may be (but might not be) reused.\nAnnotation Type Subcomponent; // A subcomponent that inherits the bindings from a parent Component or Subcomponent.\nAnnotation Type Subcomponent.Builder; // A builder for a subcomponent.\nAnnotation Type Subcomponent.Factory; // A factory for a subcomponent.\n", "des": "This package contains the public API for the Dagger 2 dependency injection framework."}
{"index": 1432, "repo": "spring-boot-actuator-3.1.1", "code": "package security;\n\npublic abstract class AbstractAuthenticationAuditListener extends Object implements org.springframework.context.ApplicationListener<org.springframework.security.authentication.event.AbstractAuthenticationEvent>, org.springframework.context.ApplicationEventPublisherAware; // Abstract ApplicationListener to expose Spring Security authentication events as AuditEvents.\npublic abstract class AbstractAuthorizationAuditListener extends Object implements org.springframework.context.ApplicationListener<org.springframework.security.authorization.event.AuthorizationEvent>, org.springframework.context.ApplicationEventPublisherAware; // Abstract ApplicationListener to expose Spring Security authorization denied and authorization granted events as AuditEvents.\npublic class AuthenticationAuditListener extends AbstractAuthenticationAuditListener; // Default implementation of AbstractAuthenticationAuditListener.\npublic class AuthorizationAuditListener extends AbstractAuthorizationAuditListener; // Default implementation of AbstractAuthorizationAuditListener.\n", "des": "Actuator support for security."}
{"index": 1137, "repo": "hadoop-yarn-api-3.3.6", "code": "package timelineservice;\n\nClass ApplicationAttemptEntity; // This entity represents an application attempt.\nClass ApplicationEntity; // This entity represents an application.\nClass ClusterEntity; // This entity represents a YARN cluster.\nClass ContainerEntity; // This entity represents a container belonging to an application attempt.\nClass FlowActivityEntity; // Entity that represents a record for flow activity.\nClass FlowRunEntity; // This entity represents a flow run.\nClass HierarchicalTimelineEntity; // This class extends timeline entity and defines parent-child relationships with other entities.\nClass QueueEntity; // This entity represents a queue.\nClass SubApplicationEntity; // This entity represents a user defined entities to be stored under sub application table.\nClass TimelineDomain; // This class contains the information about a timeline service domain, which is used to a user to host a number of timeline entities, isolating them from others'.\nClass TimelineEntities; // This class hosts a set of timeline entities.\nClass TimelineEntity; // The basic timeline entity data structure for timeline service v2.\nClass TimelineEntity.Identifier; // Identifier of timeline entity(entity id + entity type).\nClass TimelineEvent; // This class contains the information of an event that belongs to an entity.\nClass TimelineMetric; // This class contains the information of a metric that is related to some entity.\nClass TimelineMetricCalculator; // A calculator for timeline metrics.\nClass TimelineWriteResponse; // A class that holds a list of put errors.\nClass TimelineWriteResponse.TimelineWriteError; // A class that holds the error code for one entity.\nClass UserEntity; // This entity represents a user.\nEnum TimelineEntityType; // Defines type of entity.\nEnum TimelineMetric.Type; // Type of metric.\nEnum TimelineMetricOperation; // Aggregation operations.\n", "des": "Package org.apache.hadoop.yarn.api.records.timelineservice contains classes which define the data model for ATSv2."}
{"index": 1601, "repo": "spring-websocket-6.0.11", "code": "package client;\n\npublic abstract class AbstractClientSockJsSession extends Object implements WebSocketSession; // Base class for SockJS client implementations of WebSocketSession.\npublic abstract class AbstractXhrTransport extends Object implements XhrTransport; // Abstract base class for XHR transport implementations to extend.\npublic interface InfoReceiver; // A component that can execute the SockJS \"Info\" request that needs to be performed before the SockJS session starts in order to check server endpoint capabilities such as whether the endpoint permits use of WebSocket.\npublic class JettyXhrTransport extends AbstractXhrTransport implements org.springframework.context.Lifecycle; // An XHR transport based on Jetty's HttpClient.\npublic class RestTemplateXhrTransport extends AbstractXhrTransport; // An XhrTransport implementation that uses a RestTemplate.\npublic class SockJsClient extends Object implements WebSocketClient, org.springframework.context.Lifecycle; // A SockJS implementation of WebSocketClient with fallback alternatives that simulate a WebSocket interaction through plain HTTP streaming and long polling techniques.\npublic class SockJsUrlInfo extends Object; // Container for the base URL of a SockJS endpoint with additional helper methods to derive related SockJS URLs: specifically, the info and transport URLs.\npublic interface Transport; // A client-side implementation for a SockJS transport.\npublic interface TransportRequest; // Exposes information, typically to Transport and session implementations, about a request to connect to a SockJS server endpoint over a given transport.\npublic class UndertowXhrTransport extends AbstractXhrTransport; // An XHR transport based on Undertow's UndertowClient.\npublic class WebSocketClientSockJsSession extends AbstractClientSockJsSession implements NativeWebSocketSession; // An extension of AbstractClientSockJsSession wrapping and delegating to an actual WebSocket session.\npublic class WebSocketTransport extends Object implements Transport, org.springframework.context.Lifecycle; // A SockJS Transport that uses a WebSocketClient.\npublic class XhrClientSockJsSession extends AbstractClientSockJsSession; // An extension of AbstractClientSockJsSession for use with HTTP transports simulating a WebSocket session.\npublic interface XhrTransport extends Transport, InfoReceiver; // A SockJS Transport that uses HTTP requests to simulate a WebSocket interaction.\n", "des": "SockJS client implementation of WebSocketClient."}
{"index": 3697, "repo": "solr-core-9.3.0", "code": "package requestfactory;\n\nClass SearchGroupsRequestFactory; // Concrete implementation of ShardRequestFactory that creates ShardRequest instances for getting the search groups from all shards.\nClass StoredFieldsShardRequestFactory;\nClass TopGroupsShardRequestFactory; // Concrete implementation of ShardRequestFactory that creates ShardRequest instances for getting the top groups from all shards.\n", "des": "Internal classes used to implement distributed result grouping"}
{"index": 2391, "repo": "spring-batch-core-5.0.2", "code": "package support;\n\npackage support.state; // States used in defining the underlying Spring Batch state machine\npublic class DefaultStateTransitionComparator extends Object implements Comparator<StateTransition>; // Sorts by decreasing specificity of pattern, based on just counting wildcards (with * taking precedence over ?).\npublic class SimpleFlow extends Object implements Flow, org.springframework.beans.factory.InitializingBean; // A Flow that branches conditionally depending on the exit status of the last State.\npublic final class StateTransition extends Object; // Value object representing a potential transition from one State to another.\n", "des": "Basic implementations of flow constructs"}
{"index": 116, "repo": "ignite-core-2.15.0", "code": "package binary;\n\nInterface BinaryCollectionFactory<K>; // Collection factory.\nInterface BinaryField; // Binary object field.\nInterface BinaryIdMapper; // Type and field ID mapper for binary objects.\nInterface Binarylizable; // Interface that allows to implement custom serialization logic for binary objects.\nInterface BinaryMapFactory<K,V>; // Map factory.\nInterface BinaryNameMapper; // Maps type and field names to different names.\nInterface BinaryObject; // Wrapper for binary object in binary format.\nInterface BinaryObjectBuilder; // Binary object builder.\nInterface BinaryRawReader; // Raw reader for binary objects.\nInterface BinaryRawWriter; // Raw writer for binary object.\nInterface BinaryReader; // Reader for binary objects used in Binarylizable implementations.\nInterface BinarySerializer; // Interface that allows to implement custom serialization logic for binary objects.\nInterface BinaryType; // Binary type meta data.\nInterface BinaryWriter; // Writer for binary object used in Binarylizable implementations.\nClass BinaryBasicIdMapper; // Base binary ID mapper implementation.\nClass BinaryBasicNameMapper; // Base binary name mapper implementation.\nClass BinaryReflectiveSerializer; // Binary serializer which writes object fields using reflection.\nClass BinaryTypeConfiguration; // Defines configuration properties for a specific binary type.\nClass BinaryInvalidTypeException; // Exception indicating that class needed for deserialization of binary object does not exist.\nClass BinaryObjectException; // Exception indicating binary object serialization error.\n", "des": "Contains Ignite Binary Objects API classes."}
{"index": 2211, "repo": "spring-data-commons-3.1.2", "code": "package projection;\n\npublic final class Accessor extends Object; // Helper value to abstract an accessor.\npublic class DefaultMethodInvokingMethodInterceptor extends Object implements MethodInterceptor; // Method interceptor to invoke default methods on the repository proxy.\npublic class EntityProjection<M,D> extends Object implements Streamable<EntityProjection.PropertyProjection<?,?>>; // Descriptor for a top-level mapped type representing a view onto a domain type structure.\npublic static class EntityProjection.ContainerPropertyProjection<M,D> extends EntityProjection.PropertyProjection<M,D>; // Descriptor for a property-level type along its potential projection that is held within a Collection-like or Map-like container.\npublic static enum EntityProjection.ProjectionType extends Enum<EntityProjection.ProjectionType>; // Projection type.\npublic static class EntityProjection.PropertyProjection<M,D> extends EntityProjection<M,D>; // Descriptor for a property-level type along its potential projection.\npublic class EntityProjectionIntrospector extends Object; // This class is introspects the returned type in the context of a domain type for all reachable properties (w/o cycles) to determine which property paths are subject to projection.\npublic static interface EntityProjectionIntrospector.ProjectionPredicate; // Represents a predicate (boolean-valued function) of a target type and its underlying type.\npublic interface MethodInterceptorFactory; // SPI to create MethodInterceptor instances based on the given source object and the target type to produce.\npublic interface ProjectionFactory; // A factory to create projecting instances for other objects usually used to allow easy creation of representation projections to define which properties of a domain objects shall be exported in which way.\npublic interface ProjectionInformation; // Information about a projection type.\npublic class SpelAwareProxyProjectionFactory extends Object implements BeanFactoryAware; // A ProxyProjectionFactory that adds support to use Value-annotated methods on a projection interface to evaluate the contained SpEL expression to define the outcome of the method call.\nprotected static class SpelAwareProxyProjectionFactory.SpelAwareProjectionInformation extends Object;\npublic interface TargetAware extends TargetClassAware, RawTargetAccess; // Extension of TargetClassAware to be able to ignore the getter on JSON rendering.\n", "des": "Projection subsystem."}
{"index": 822, "repo": "calcite-core-1.34.0", "code": "package calcite;\n\npackage calcite.config; // Configuration.\npackage calcite.interpreter; // Provides an implementation of relational expressions using an interpreter.\npackage calcite.jdbc; // JDBC driver for Calcite.\npackage calcite.materialize; // Management of materialized query results.\npackage calcite.model; // Provides model files, in JSON format, defining schemas and other metadata.\npackage calcite.plan; // Defines interfaces for constructing rule-based optimizers of relational expressions.\npackage calcite.prepare; // Preparation of queries (parsing, planning and implementation).\npackage calcite.profile; // Utilities to analyze data sets.\npackage calcite.rel; // Defines relational expressions.\npackage calcite.rex; // Provides a language for representing row-expressions.\npackage calcite.runtime; // Utilities required at runtime.\npackage calcite.schema; // Schema SPI.\npackage calcite.server; // Provides a server for hosting Calcite connections.\npackage calcite.sql; // Provides a SQL parser and object model.\npackage calcite.sql2rel; // Translates a SQL parse tree to relational expression.\npackage calcite.statistic; // Implementations of statistics providers.\npackage calcite.tools; // Provides utility classes.\npackage calcite.util; // Provides utility classes.\nInterface DataContext; // Runtime context allowing access to the tables in a database.\nClass DataContexts; // Utilities for DataContext.\nClass Demo; // Demo.\nEnum DataContext.Variable; // Variable that may be asked for in a call to DataContext.get(java.lang.String).\nAnnotation Type CalciteImmutable; // Annotation to be used to convert interfaces/abstract classes into Immutable POJO using Immutables package.\n", "des": "Main package for Calcite, the dynamic data management platform."}
{"index": 2269, "repo": "spring-vault-core-3.0.4", "code": "package core;\n\npublic class MappingVaultEntityInformation<T,ID> extends PersistentEntityInformation<T,ID> implements VaultEntityInformation<T,ID>; // VaultEntityInformation implementation using a VaultPersistentEntity instance to lookup the necessary information.\npublic interface VaultEntityInformation<T,ID> extends EntityInformation<T,ID>; // Vault-specific EntityInformation.\npublic class VaultKeyValueAdapter extends AbstractKeyValueAdapter; // Vault-specific KeyValueAdapter.\npublic class VaultKeyValueTemplate extends KeyValueTemplate; // Vault-specific KeyValueTemplate.\n", "des": "Spring Vault core repository implementation."}
{"index": 476, "repo": "beam-sdks-java-core-2.49.0", "code": "package expansion;\n\nInterface ExternalTransformRegistrar; // A registrar which contains a mapping from URNs to available ExternalTransformBuilders.\n", "des": "Contains classes needed to expose transforms to other SDKs."}
{"index": 640, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package dao;\n\nClass WeightedPolicyInfo; // This is a DAO class for the configuration of parameteres for federation policies.\n", "des": "DAO objects for serializing/deserializing policy configurations."}
{"index": 2484, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jetty;\n\n@AutoConfiguration(after=CompositeMeterRegistryAutoConfiguration.class) @ConditionalOnWebApplication @ConditionalOnClass({io.micrometer.core.instrument.binder.jetty.JettyServerThreadPoolMetrics.class,org.eclipse.jetty.server.Server.class}) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class JettyMetricsAutoConfiguration extends Object; // Auto-configuration for Jetty metrics.\n", "des": "Auto-configuration for Jetty actuator metrics."}
{"index": 3346, "repo": "opencms-core-15.0", "code": "package dialogs;\n\npackage dialogs.availability; // Contains code for the availability dialog.\npackage dialogs.history; // Contains code for the file history dialog.\npackage dialogs.permissions; // Contains permission dialog classes.\nInterface I_CmsHasTitle; // Implementing classes provide a title.\nClass A_CmsSelectResourceTypeDialog;\nClass CmsChangeTypeDialog; // Dialog for changing the resource type.\nClass CmsCopyMoveDialog; // The copy move dialog.\nClass CmsCopyToProjectDialog; // The copy to project dialog.\nClass CmsDeleteDialog; // Dialog for deleting resources.\nClass CmsEmbeddedDialogContext; // Context for dialogs embedded into plain GWT modules.\nClass CmsEmbeddedDialogsUI; // Separate UI for VAADIN based dialog embedded into a GWT module.\nClass CmsGalleryOptimizeDialog; // Class representing a dialog for optimizing galleries.\nClass CmsNewDialog; // Dialog for creating new resources.\nClass CmsProjectSelectDialog; // The project select dialog.\nClass CmsPublishScheduledDialog; // The publish schedule dialog.\nClass CmsReindexDialog; // Dialog used to change resource modification times.\nClass CmsRestoreDeletedDialog; // Dialog for restoring deleted resources in a folder.\nClass CmsSecureExportDialog; // Dialog used to change resource modification times.\nClass CmsSiteSelectDialog; // The site select dialog.\nClass CmsTouchDialog; // Dialog used to change resource modification times.\nClass CmsUndeleteDialog; // Dialog used to change resource modification times.\nClass CmsUndoDialog; // Dialog used to change resource modification times.\nClass CmsUserDataDialog; // Dialog to edit the user data.\nClass Messages; // Message bundle class.\nEnum CmsCopyMoveDialog.Action; // The copy/move actions.\nEnum CmsCopyMoveDialog.DialogMode; // The dialog mode.\n", "des": "Contains code for workplace dialogs."}
{"index": 970, "repo": "spring-ws-3.0.10.RELEASE", "code": "package core;\n\nClass SoapActionCallback; // WebServiceMessageCallback implementation that sets the SOAP Action header on the message.\nClass SoapFaultMessageResolver; // Simple fault resolver that simply throws a SoapFaultClientException when a fault occurs.\n", "des": "Contains core classes for SOAP-specific client-side Spring-WS support."}
{"index": 191, "repo": "ignite-core-2.15.0", "code": "package tostring;\n\nClass CircularStringBuilder; // Basic string builder over circular buffer.\nClass GridToStringBuilder; // Provides auto-generation framework for toString() output.\nClass SBLimitedLength;\nAnnotation Type GridToStringExclude; // Attach this annotation to a field or a class to indicate that this field or fields of this class should not be included in toString() output.\nAnnotation Type GridToStringInclude; // Attach this annotation to a field or a class to indicate that this field or fields of this class should be included in toString() output.\nAnnotation Type GridToStringOrder; // Attach this annotation to a field to provide its order in toString() output.\n", "des": "Common utility classes for threads."}
{"index": 1773, "repo": "spring-data-mongodb-4.1.2", "code": "package support;\n\npublic class MappingMongoEntityInformation<T,ID> extends PersistentEntityInformation<T,ID> implements MongoEntityInformation<T,ID>; // MongoEntityInformation implementation using a MongoPersistentEntity instance to lookup the necessary information.\n@SupportedAnnotationTypes({\"com.querydsl.core.annotations.*\",\"org.springframework.data.mongodb.core.mapping.*\"}) @SupportedSourceVersion(RELEASE_6) public class MongoAnnotationProcessor extends com.querydsl.apt.AbstractQuerydslProcessor; // Annotation processor to create Querydsl query types for QueryDsl annotated classes.\npublic class MongoRepositoryFactory extends RepositoryFactorySupport; // Factory to create MongoRepository instances.\npublic class MongoRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends RepositoryFactoryBeanSupport<T,S,ID>; // FactoryBean to create MongoRepository instances.\npublic class QuerydslMongoPredicateExecutor<T> extends Object implements QuerydslPredicateExecutor<T>; // MongoDB-specific QuerydslPredicateExecutor that allows execution Predicates in various forms.\npublic abstract class QuerydslRepositorySupport extends Object; // Base class to create repository implementations based on Querydsl.\npublic class ReactiveMongoRepositoryFactory extends ReactiveRepositoryFactorySupport; // Factory to create ReactiveMongoRepository instances.\npublic class ReactiveMongoRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends RepositoryFactoryBeanSupport<T,S,ID>; // FactoryBean to create ReactiveMongoRepository instances.\npublic class ReactiveQuerydslMongoPredicateExecutor<T> extends Object implements ReactiveQuerydslPredicateExecutor<T>; // MongoDB-specific QuerydslPredicateExecutor that allows execution Predicates in various forms.\npublic class SimpleMongoRepository<T,ID> extends Object implements MongoRepository<T,ID>; // Repository base implementation for Mongo.\npublic class SimpleReactiveMongoRepository<T,ID extends Serializable> extends Object implements ReactiveMongoRepository<T,ID>; // Reactive repository base implementation for Mongo.\npublic class SpringDataMongodbQuery<T> extends com.querydsl.mongodb.document.AbstractMongodbQuery<Q> implements com.querydsl.core.Fetchable<T>; // Spring Data specific simple Fetchable Query implementation.\n", "des": "Support infrastructure for query derivation of MongoDB specific repositories."}
{"index": 2570, "repo": "pulsar-common-3.0.0", "code": "package collections;\n\npublic class BitSetRecyclable extends Object implements Cloneable, Serializable; // This this copy of BitSet.\npublic class ConcurrentBitSet extends BitSet; // Safe multithreaded version of BitSet.\npublic class ConcurrentBitSetRecyclable extends ConcurrentBitSet; // Safe multithreaded version of BitSet and leverage netty recycler.\npublic class ConcurrentLongHashMap<V> extends Object; // Map from long to an Object.\npublic static class ConcurrentLongHashMap.Builder<T> extends Object; // Builder of ConcurrentLongHashMap.\npublic static interface ConcurrentLongHashMap.EntryProcessor<V>; // Processor for one key-value entry, where the key is long.\npublic class ConcurrentLongLongPairHashMap extends Object; // Concurrent hash map where both keys and values are composed of pairs of longs.\npublic static interface ConcurrentLongLongPairHashMap.BiConsumerLongPair; // A BiConsumer Long pair.\npublic static class ConcurrentLongLongPairHashMap.Builder extends Object; // Builder of ConcurrentLongLongPairHashMap.\npublic static interface ConcurrentLongLongPairHashMap.LongLongPairFunction; // A Long pair function.\npublic static interface ConcurrentLongLongPairHashMap.LongLongPairPredicate; // A Long pair predicate.\npublic static class ConcurrentLongLongPairHashMap.LongPair extends Object implements Comparable<ConcurrentLongLongPairHashMap.LongPair>; // A pair of long values.\npublic class ConcurrentLongPairSet extends Object implements LongPairSet; // Concurrent hash set where values are composed of pairs of longs.\npublic static class ConcurrentLongPairSet.Builder extends Object; // Builder of ConcurrentLongPairSet.\npublic static interface ConcurrentLongPairSet.ConsumerLong; // Represents a function that accepts an object of the LongPair type.\npublic static class ConcurrentLongPairSet.LongPair extends Object implements Comparable<ConcurrentLongPairSet.LongPair>; // Class representing two long values.\npublic static interface ConcurrentLongPairSet.LongPairConsumer; // Represents a function that accepts two long arguments.\npublic class ConcurrentOpenHashMap<K,V> extends Object; // Concurrent hash map.\npublic static class ConcurrentOpenHashMap.Builder<K,V> extends Object; // Builder of ConcurrentOpenHashMap.\npublic class ConcurrentOpenHashSet<V> extends Object; // Concurrent hash set.\n", "des": "Set of different collections working in the concurrent environment."}
{"index": 3546, "repo": "opennlp-tools-2.2.0", "code": "package tokenize;\n\nInterface Detokenizer; // A Detokenizer merges tokens back to their detokenized representation.\nInterface TokenContextGenerator; // Interface for context generators required for TokenizerME.\nInterface Tokenizer; // The interface for tokenizers, which segment a string into its tokens.\nInterface TokenizerEvaluationMonitor; // A marker interface for evaluating tokenizers.\nClass DefaultTokenContextGenerator; // A default TokenContextGenerator which produces events for maxent decisions for tokenization.\nClass DetokenizationDictionary;\nClass DetokenizerEvaluator; // The DetokenizerEvaluator measures the performance of the given Detokenizer with the provided reference samples.\nClass DictionaryDetokenizer; // A rule based detokenizer.\nClass SimpleTokenizer; // A basic Tokenizer implementation which performs tokenization using character classes.\nClass TokenizerCrossValidator; // A cross validator for tokenizers.\nClass TokenizerEvaluator; // The TokenizerEvaluator measures the performance of the given Tokenizer with the provided reference samples.\nClass TokenizerFactory; // The factory that provides Tokenizer default implementation and resources.\nClass TokenizerME; // A Tokenizer for converting raw text into separated tokens.\nClass TokenizerModel; // The TokenizerModel is the model used by a learnable Tokenizer.\nClass TokenizerStream; // The TokenizerStream uses a Tokenizer to tokenize the input string and output samples.\nClass TokenSample; // A TokenSample is text with token spans.\nClass TokenSampleStream; // This class is a stream filter which reads in string encoded samples and creates samples out of them.\nClass TokSpanEventStream; // This class reads the samples via an Iterator and converts the samples into events which can be used by the maxent library for training.\nClass WhitespaceTokenizer; // A basic Tokenizer implementation which performs tokenization using white spaces.\nClass WhitespaceTokenStream; // This stream formats ObjectStream of samples into whitespace separated token strings.\nClass WordpieceTokenizer; // A Tokenizer implementation which performs tokenization using word pieces.\nEnum DetokenizationDictionary.Operation;\nEnum Detokenizer.DetokenizationOperation; // This enum contains an operation for every token to merge the tokens together to their detokenized form.\n", "des": "Contains classes related to finding token or words in a string."}
{"index": 574, "repo": "commons-collections-3.2.2", "code": "package collections;\n\npackage collections.bag; // This package contains implementations of the Bag and SortedBag interfaces.\npackage collections.bidimap; // This package contains implementations of the BidiMap, OrderedBidiMap and SortedBidiMap interfaces.\npackage collections.buffer; // This package contains implementations of the Buffer interface.\npackage collections.collection; // This package contains implementations of the Collection interface.\npackage collections.comparators; // This package contains implementations of the Comparator interface.\npackage collections.functors; // This package contains implementations of the Closure, Predicate, Transformer and Factory interfaces.\npackage collections.iterators; // This package contains implementations of the Iterator interface.\npackage collections.keyvalue; // This package contains implementations of collection and map related key/value classes.\npackage collections.list; // This package contains implementations of the List interface.\npackage collections.map; // This package contains implementations of the Map, IterableMap, OrderedMap and SortedMap interfaces.\npackage collections.set; // This package contains implementations of the Set and SortedSet interfaces.\nInterface Bag; // Defines a collection that counts the number of times an object appears in the collection.\nInterface BidiMap; // Defines a map that allows bidirectional lookup between key and values.\nInterface BoundedCollection; // Defines a collection that is bounded in size.\nInterface BoundedMap; // Defines a map that is bounded in size.\nInterface Buffer; // Defines a collection that allows objects to be removed in some well-defined order.\nInterface Closure; // Defines a functor interface implemented by classes that do something.\nInterface Factory; // Defines a functor interface implemented by classes that create objects.\nInterface IterableMap; // Defines a map that can be iterated directly without needing to create an entry set.\nInterface KeyValue; // Defines a simple key value pair.\nInterface MapIterator; // Defines an iterator that operates over a Map.\nInterface MultiMap; // Defines a map that holds a collection of values against each key.\nInterface OrderedBidiMap; // Defines a map that allows bidirectional lookup between key and values and retains and provides access to an ordering.\nInterface OrderedIterator; // Defines an iterator that operates over an ordered collection.\nInterface OrderedMap; // Defines a map that maintains order and allows both forward and backward iteration through that order.\n", "des": "This package contains the interfaces and utilities shared across all the subpackages of this component."}
{"index": 1926, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package graphql;\n\npackage graphql.data; // Auto-configuration classes for data integrations with GraphQL.\npackage graphql.reactive; // Auto-configuration classes for WebFlux support in Spring GraphQL.\npackage graphql.rsocket; // Auto-configuration classes for RSocket integration with GraphQL.\npackage graphql.security; // Auto-configuration classes for Security support in Spring GraphQL.\npackage graphql.servlet; // Auto-configuration classes for MVC support in Spring GraphQL.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.graphql.DefaultGraphQlSchemaCondition.class) public @interface ConditionalOnGraphQlSchema; // @Conditional that only matches when a GraphQL schema is defined for the application, through schema files or infrastructure beans.\n@AutoConfiguration @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.execution.GraphQlSource.class}) @ConditionalOnGraphQlSchema @EnableConfigurationProperties(GraphQlProperties.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.graphql.GraphQlAutoConfiguration.GraphQlResourcesRuntimeHints.class) public class GraphQlAutoConfiguration extends Object; // Auto-configuration for creating a Spring GraphQL base infrastructure.\n@ConfigurationProperties(prefix=\"spring.graphql.cors\") public class GraphQlCorsProperties extends Object; // Configuration properties for GraphQL endpoint's CORS support.\n@ConfigurationProperties(prefix=\"spring.graphql\") public class GraphQlProperties extends Object; // properties for Spring GraphQL.\npublic static class GraphQlProperties.Graphiql extends Object;\npublic static class GraphQlProperties.Rsocket extends Object;\npublic static class GraphQlProperties.Schema extends Object;\npublic static class GraphQlProperties.Schema.Introspection extends Object;\npublic static class GraphQlProperties.Schema.Printer extends Object;\npublic static class GraphQlProperties.Websocket extends Object;\n@FunctionalInterface public interface GraphQlSourceBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize properties of Builder whilst retaining default auto-configuration.\n", "des": "Auto-configuration for Spring GraphQL."}
{"index": 3426, "repo": "hibernate-core-5.6.15.Final", "code": "package naming;\n\nInterface EntityNaming;\nInterface ImplicitAnyDiscriminatorColumnNameSource; // Context for determining the implicit name for an ANY mapping's discriminator column.\nInterface ImplicitAnyKeyColumnNameSource; // Context for determining the implicit name for an ANY mapping's key column.\nInterface ImplicitBasicColumnNameSource; // Context for determining the implicit name related to basic values.\nInterface ImplicitCollectionTableNameSource; // Context for determining the implicit name for a collection table.\nInterface ImplicitConstraintNameSource; // Common implicit name source traits for all constraint naming: FK, UK, index\nInterface ImplicitDiscriminatorColumnNameSource; // Context for determining the implicit name of an entity's discriminator column.\nInterface ImplicitEntityNameSource; // Context for determining the implicit name of an entity's primary table\nInterface ImplicitForeignKeyNameSource;\nInterface ImplicitIdentifierColumnNameSource; // Context for determining the implicit name of an entity's identifier column.\nInterface ImplicitIndexColumnNameSource;\nInterface ImplicitIndexNameSource;\nInterface ImplicitJoinColumnNameSource; // Context for determining the implicit name of a \"join column\" (think JoinColumn).\nInterface ImplicitJoinTableNameSource; // Context for determining the implicit name for a join table.\nInterface ImplicitMapKeyColumnNameSource; // Context for determining the implicit name of a column used to back the key of a Map.\nInterface ImplicitNameSource; // Common contract for all implicit naming sources\nInterface ImplicitNamingStrategy; // Pluggable strategy for applying implicit naming rules when an explicit name is not given.\nInterface ImplicitPrimaryKeyJoinColumnNameSource; // Used to help determine the implicit name of columns which are part of a primary-key, well simultaneously being part of a foreign-key (join).\nInterface ImplicitTenantIdColumnNameSource; // Context for determining the implicit name of an entity's tenant identifier column.\nInterface ImplicitUniqueKeyNameSource;\nInterface NamingStrategyHelper; // Helper contract for dealing with naming strategies.\nInterface PhysicalNamingStrategy; // Pluggable strategy contract for applying physical naming rules for database object names.\nClass CamelCaseToUnderscoresNamingStrategy; // Originally copied from Spring Boot as this strategy is popular there (original name is SpringPhysicalNamingStrategy).\nClass DatabaseIdentifier; // Models an identifier (name), retrieved from the database.\nClass Identifier; // Models an identifier (name), which may or may not be quoted.\n", "des": "Represents a proposed new approach to allowing hooks into the process of determining the name of database objects (tables, columns, constraints, etc)."}
{"index": 3889, "repo": "solr-solrj-9.3.0", "code": "package beans;\n\nClass BackupCollectionPayload; // V2 API POJO for the /v2/collections 'backup-collection' command.\nClass ClusterPropPayload;\nClass ClusterPropPayload.Cluster;\nClass ClusterPropPayload.CollectionDefaults;\nClass ClusterPropPayload.Defaults;\nClass CreateConfigPayload;\nClass CreateCorePayload;\nClass CreateShardPayload;\nClass DeleteBasicAuthUserPayload;\nClass MigrateDocsPayload;\nClass ModifyCollectionPayload;\nClass MoveReplicaPayload;\nClass OverseerOperationPayload;\nClass PackagePayload; // Just a container class for POJOs used in Package APIs\nClass PackagePayload.AddVersion;\nClass PackagePayload.DelVersion;\nClass PluginMeta; // POJO for a plugin metadata used in container plugins\nClass PrepareCoreRecoveryPayload;\nClass RateLimiterPayload; // POJO for Rate Limiter Metadata Configuration\nClass RebalanceLeadersPayload;\nClass RejoinLeaderElectionPayload;\nClass RequestApplyCoreUpdatesPayload;\nClass RequestBufferUpdatesPayload;\nClass RequestCoreRecoveryPayload;\nClass RequestSyncShardPayload;\nClass SetRuleBasedAuthPermissionPayload;\nClass SplitShardPayload;\nClass UpdateRuleBasedAuthPermissionPayload;\nClass V2ApiConstants;\n", "des": "Annotated Data objects used in V2 Requests"}
{"index": 471, "repo": "jackson-core-2.15.2", "code": "package type;\n\nClass ResolvedType; // Type abstraction that represents Java type that has been resolved (i.e.\nClass TypeReference<T>; // This generic abstract class is used for obtaining full generics type information by sub-classing; it must be converted to ResolvedType implementation (implemented by JavaType from \"databind\" bundle) to be used.\nClass WritableTypeId; // This is a simple value class used between core streaming and higher level databinding to pass information about type ids to write.\nEnum WritableTypeId.Inclusion; // Enumeration of values that matches enum `As` from annotation `JsonTypeInfo`: separate definition to avoid dependency between streaming core and annotations packages; also allows more flexibility in case new values needed at this level of internal API.\n", "des": "Contains classes needed for type introspection, mostly used by data binding functionality."}
{"index": 618, "repo": "freemarker-2.3.32", "code": "package cache;\n\nInterface CacheStorage; // Cache storage abstracts away the storage aspects of a cache - associating an object with a key, retrieval and removal via the key.\nInterface CacheStorageWithGetSize; // A cache storage that has a getSize() method for returning the current number of cache entries.\nInterface ConcurrentCacheStorage; // An optional interface for cache storage that knows whether it can be concurrently accessible without synchronization.\nInterface StatefulTemplateLoader; // Interface that can be implemented by TemplateLoader-s that maintain some sort of internal state (i.e.\nInterface TemplateLoader; // FreeMarker loads template \"files\" through objects that implement this interface, thus the templates need not be real files, and can come from any kind of data source (like classpath, servlet context, database, etc).\nClass AndMatcher; // Logical \"and\" operation among the given matchers.\nClass ByteArrayTemplateLoader; // A TemplateLoader that uses a Map with byte[] as its source of templates.\nClass ClassTemplateLoader; // A TemplateLoader that can load templates from the \"classpath\".\nClass ConditionalTemplateConfigurationFactory; // Returns the given TemplateConfiguration directly, or another TemplateConfigurationFactory's result, when the specified matcher matches the template source.\nClass FileExtensionMatcher; // Matches the file extension; unlike other matchers, by default case insensitive.\nClass FileNameGlobMatcher; // As opposed to PathGlobMatcher, it only compares the \"file name\" part (the part after the last /) of the source name with the given glob.\nClass FileTemplateLoader; // A TemplateLoader that uses files inside a specified directory as the source of templates.\nClass FirstMatchTemplateConfigurationFactory; // Returns the first non-null result of the child factories, ignoring all further child factories.\nClass MergingTemplateConfigurationFactory; // Returns the merged results of all the child factories.\nClass MruCacheStorage; // A cache storage that implements a two-level Most Recently Used cache.\nClass MultiTemplateLoader; // A TemplateLoader that uses a set of other loaders to load the templates.\nClass NotMatcher; // Logical \"not\" operation on the given matcher.\nClass NullCacheStorage; // A cache storage that doesn't store anything.\nClass OrMatcher; // Logical \"or\" operation among the given matchers.\nClass PathGlobMatcher; // Matches the whole template source name (also known as template source path) with the given glob.\n", "des": "Template loading and caching."}
{"index": 1831, "repo": "spring-test-6.0.11", "code": "package reactive;\n\npublic final class MockServerHttpRequest extends org.springframework.http.server.reactive.AbstractServerHttpRequest; // Mock extension of AbstractServerHttpRequest for use in tests without an actual server.\npublic static interface MockServerHttpRequest.BaseBuilder<B extends MockServerHttpRequest.BaseBuilder<B>>; // Request builder exposing properties not related to the body.\npublic static interface MockServerHttpRequest.BodyBuilder extends MockServerHttpRequest.BaseBuilder<MockServerHttpRequest.BodyBuilder>; // A builder that adds a body to the request.\npublic class MockServerHttpResponse extends org.springframework.http.server.reactive.AbstractServerHttpResponse; // Mock extension of AbstractServerHttpResponse for use in tests without an actual server.\n", "des": "Mock implementations of reactive HTTP server contracts."}
{"index": 1674, "repo": "spring-boot-cli-3.1.1", "code": "package status;\n\npublic final class ExitStatus extends Object; // Encapsulation of the outcome of a command.\n", "des": "CLI command status."}
{"index": 1658, "repo": "jena-core-4.9.0", "code": "package rulesys;\n\npackage rulesys.builtins; // Implementations of the Builtin class which provides primitive operations to the rule engines.\npackage rulesys.impl; // Internal implementation objects used by the rule system interpreters and compilers.\npublic interface BackwardRuleInfGraphI extends SilentAddI, InfGraph; // This interface collects together those operations that the backchaining engine needs to invoke in the parent InfGraph.\npublic class BasicForwardRuleInfGraph extends BaseInfGraph implements ForwardRuleInfGraphI; // An inference graph interface that runs a set of forward chaining rules to conclusion on each added triple and stores the entire result set.\npublic class BasicForwardRuleReasoner extends Object implements Reasoner; // Reasoner implementation which augments or transforms an RDF graph according to a set of rules.\npublic interface BindingEnvironment; // Interface through which the current bound values of variables can be found.\npublic interface Builtin; // Rules employ builtins to do all tests and actions other than simple triple matches and triple creation.\npublic class BuiltinException extends JenaException; // Exceptions thrown by runtime errors in executing rule system builtin operations.\npublic abstract class BuiltinRegistry extends Object;\npublic interface ClauseEntry; // Common interface for all objects that can go into rules.\npublic class FBRuleInfGraph extends BasicForwardRuleInfGraph implements BackwardRuleInfGraphI; // An inference graph that uses a mixture of forward and backward chaining rules.\npublic static class FBRuleInfGraph.RuleStore extends Object; // Structure used to wrap up pre-processed/compiled rule sets.\npublic class FBRuleReasoner extends Object implements RuleReasoner; // Rule-based reasoner interface.\npublic interface ForwardRuleInfGraphI extends InfGraph, SilentAddI; // This interface collects together the operations on the InfGraph which are needed to support the forward rule engine.\npublic class Functor extends Object implements ClauseEntry; // A functor comprises a functor name and a list of arguments.\npublic class FunctorDatatype extends BaseDatatype; // Datatype definition for functor-valued literals.\npublic class GenericRuleReasoner extends FBRuleReasoner; // A reasoner interface that is able to invoke any of the useful rule engine combinations.\npublic static class GenericRuleReasoner.RuleMode extends Object; // Class used as an enum for describing rule modes.\n", "des": "Provides a selection of simple rule engines for Jena inference models."}
{"index": 2270, "repo": "spring-vault-core-3.0.4", "code": "package mapping;\n\npublic class BasicVaultPersistentEntity<T> extends BasicKeyValuePersistentEntity<T,VaultPersistentProperty> implements VaultPersistentEntity<T>; // VaultPersistentEntity implementation.\n@Documented @Inherited @Retention(RUNTIME) @Target(TYPE) @KeySpace public @interface Secret; // Secret marks objects as aggregate roots to be stored in Vault.\npublic class VaultMappingContext extends KeyValueMappingContext<VaultPersistentEntity<?>,VaultPersistentProperty>; // Mapping context for Vault-specific entities.\npublic interface VaultPersistentEntity<T> extends KeyValuePersistentEntity<T,VaultPersistentProperty>; // Vault specific PersistentEntity.\npublic class VaultPersistentProperty extends KeyValuePersistentProperty<VaultPersistentProperty>; // Vault-specific KeyValuePersistentProperty.\npublic abstract class VaultSimpleTypes extends Object; // Simple constant holder for a SimpleTypeHolder enriched with Vault-specific simple (JSON) types.\n", "des": "Infrastructure for the Vault JSON-to-object mapping subsystem."}
{"index": 699, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package dsl;\n\npackage dsl.amqp; // Provides AMQP Components support for Spring Integration Java DSL.\npackage dsl.channel; // Contains MessageChannel Builders DSL.\npackage dsl.config; // Provides config classes of the Spring Integration Java DSL.\npackage dsl.context; // The context support classes for Spring Integration Java DSL.\npackage dsl.core; // Provides core classes of the Spring Integration Java DSL.\npackage dsl.feed; // Provides Feed Components support for Spring Integration Java DSL.\npackage dsl.file; // Provides File Components support for Spring Integration Java DSL.\npackage dsl.ftp; // Provides FTP Components support for Spring Integration Java DSL.\npackage dsl.http; // Provides HTTP Components support for Spring Integration Java DSL.\npackage dsl.jms; // Provides JMS Components support for Spring Integration Java DSL.\npackage dsl.jpa; // Provides JPA Components support for Spring Integration Java DSL.\npackage dsl.kafka; // Provides Kafka Components support for Spring Integration Java DSL.\npackage dsl.mail; // Provides Mail Components support for Spring Integration Java DSL.\npackage dsl.scripting; // Provides Scripting Components support for Spring Integration Java DSL.\npackage dsl.sftp; // Provides SFTP Components support for Spring Integration Java DSL.\npackage dsl.support; // Provides various support classes used across Spring Integration Java DSL Components.\npackage dsl.transaction; // Provides classes supporting Transactions.\nInterface IntegrationFlow; // The main Integration DSL abstraction.\nInterface IntegrationFlows.ChannelsFunction; // The Channels-specific Function.\nInterface IntegrationFlows.MessageProducersFunction; // The MessageProducers-specific Function.\nInterface IntegrationFlows.MessageSourcesFunction; // The MessageSources-specific Function.\nInterface IntegrationFlows.MessagingGatewaysFunction; // The MessagingGateways-specific Function.\nClass AbstractRouterSpec<S extends AbstractRouterSpec<S,R>,R extends org.springframework.integration.router.AbstractMessageRouter>; // A MessageHandlerSpec for AbstractMessageRouters.\nClass Adapters;\nClass AggregatorSpec; // A CorrelationHandlerSpec for an AggregatingMessageHandler.\nClass BarrierSpec; // A MessageHandlerSpec for the BarrierMessageHandler.\nClass Channels;\n", "des": "Root package of the Spring Integration Java DSL."}
{"index": 3477, "repo": "hilt-android-2.47", "code": "package lifecycle;\n\nInterface RetainedLifecycle; // A class for registered listeners on a retained lifecycle (generally backed up by a ViewModel).\nInterface RetainedLifecycle.OnClearedListener; // Listener for when the retained lifecycle is cleared.\nAnnotation Type HiltViewModel; // Identifies a ViewModel for construction injection.\n", "des": "This package contains Hilt APIs for Android applications."}
{"index": 1057, "repo": "avro-1.11.2", "code": "package avro;\n\npackage avro.data; // Interfaces and base classes shared by generic, specific and reflect.\npackage avro.file; // A container file for Avro data.\npackage avro.generic; // A generic representation for Avro data.\npackage avro.io; // Utilities for Encoding and Decoding Avro data.\npackage avro.path; // Interfaces and base classes for AvroPath.\npackage avro.reflect; // Use Java reflection to generate schemas and protocols for existing classes.\npackage avro.specific; // Generate specific Java classes for schemas and protocols.\npackage avro.util; // Common utility classes.\nInterface LogicalTypes.LogicalTypeFactory; // Factory interface and SPI for logical types.\nInterface SchemaValidationStrategy; // An interface for validating the compatibility of a single schema against another.\nInterface SchemaValidator; // A SchemaValidator has one method, which validates that a Schema is compatible with the other schemas provided.\nClass Conversion<T>; // Conversion between generic and logical type instances.\nClass Conversions;\nClass Conversions.DecimalConversion;\nClass Conversions.UUIDConversion;\nClass JsonProperties; // Base class for objects that have JSON-valued properties.\nClass JsonProperties.Null;\nClass LogicalType; // Logical types provides an opt-in way to extend Avro's types.\nClass LogicalTypes;\nClass LogicalTypes.Date; // Date represents a date without a time\nClass LogicalTypes.Decimal; // Decimal represents arbitrary-precision fixed-scale decimal numbers\nClass LogicalTypes.LocalTimestampMicros;\nClass LogicalTypes.LocalTimestampMillis;\nClass LogicalTypes.TimeMicros; // TimeMicros represents a time in microseconds without a date\nClass LogicalTypes.TimeMillis; // TimeMillis represents a time in milliseconds without a date\nClass LogicalTypes.TimestampMicros; // TimestampMicros represents a date and time in microseconds\nClass LogicalTypes.TimestampMillis; // TimestampMillis represents a date and time in milliseconds\nClass Protocol; // A set of messages forming an application protocol.\nClass Resolver; // Encapsulate schema-resolution logic in an easy-to-consume representation.\nClass Resolver.Action; // An abstract class for an action to be taken to resolve a writer's schema (found in public instance variable writer) against a reader's schema (in reader).\n", "des": "Avro kernel classes."}
{"index": 921, "repo": "commons-compress-1.23.0", "code": "package lz4;\n\nClass BlockLZ4CompressorInputStream; // CompressorInputStream for the LZ4 block format.\nClass BlockLZ4CompressorOutputStream; // CompressorOutputStream for the LZ4 block format.\nClass FramedLZ4CompressorInputStream; // CompressorInputStream for the LZ4 frame format.\nClass FramedLZ4CompressorOutputStream; // CompressorOutputStream for the LZ4 frame format.\nClass FramedLZ4CompressorOutputStream.Parameters; // Parameters of the LZ4 frame format.\nClass XXHash32; // Implementation of the xxhash32 hash algorithm.\nEnum FramedLZ4CompressorOutputStream.BlockSize; // The block sizes supported by the format.\n", "des": "Provides stream classes for the LZ4 algorithm."}
{"index": 979, "repo": "spring-ws-3.0.10.RELEASE", "code": "package xwss;\n\npackage xwss.callback; // Contains CallbackHandler implementations for XWSS.\nClass XwsSecurityInterceptor; // WS-Security endpoint interceptor that is based on Sun's XML and Web Services Security package (XWSS).\nClass XwsSecurityFaultException; // XWSS-specific version of the WsSecurityFaultException.\nClass XwsSecuritySecurementException; // XWSS-specific version of the WsSecuritySecurementException.\nClass XwsSecurityValidationException; // XWSS-specific version of the WsSecurityValidationException.\n", "des": "Contains classes for using the XML and WebServices Security WS-Security implementation within Spring-WS."}
{"index": 3719, "repo": "solr-core-9.3.0", "code": "package configuration;\n\npackage configuration.providers; // TODO\nInterface SSLCredentialProvider; // Interface for different source of SSL configurations.\nClass SSLConfigurations; // Dedicated object to handle Solr configurations\nClass SSLConfigurations.SysProps;\nClass SSLConfigurationsFactory;\nClass SSLCredentialProviderFactory; // Class responsible to build SSL credential providers\nEnum SSLCredentialProvider.CredentialType;\n", "des": "Common Util APIs related to Solr configuration."}
{"index": 1639, "repo": "spring-kafka-3.0.9", "code": "package transaction;\n\n@Deprecated public class ChainedKafkaTransactionManager<K,V> extends org.springframework.data.transaction.ChainedTransactionManager implements KafkaAwareTransactionManager<K,V>;\npublic interface KafkaAwareTransactionManager<K,V> extends org.springframework.transaction.PlatformTransactionManager; // A transaction manager that can provide a ProducerFactory.\npublic class KafkaTransactionManager<K,V> extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements KafkaAwareTransactionManager<K,V>; // PlatformTransactionManager implementation for a single Kafka ProducerFactory.\n", "des": "Provides classes related to transactions."}
{"index": 3254, "repo": "opencms-core-15.0", "code": "package cache;\n\nInterface I_CmsLruCacheObject; // Defines the methods which an object being cached by CmsFlexLruCache must implement.\nClass CmsLruCache; // Implements an LRU (last recently used) cache.\nClass CmsMemoryObjectCache; // A singleton memory cache, that stores objects related with keys.\nClass CmsVfsCache; // Configurable VFS based cache, for caching objects related to offline/online resources.\nClass CmsVfsDiskCache; // Implements a RFS file based disk cache, that handles parameter based versions of VFS files, providing a cache for the \"online\" and another for the \"offline\" project.\nClass CmsVfsMemoryObjectCache; // Implements a memory cache, that stores objects related to VFS files, providing a cache for the \"online\" and another for the \"offline\" project.\nClass CmsVfsNameBasedDiskCache; // Implements a name based RFS file based disk cache, that handles parameter based versions of VFS files.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Implementations of specialized caches used in OpenCms."}
{"index": 2787, "repo": "spring-expression-6.0.11", "code": "package spel;\n\npackage spel.ast; // SpEL's abstract syntax tree.\npackage spel.standard; // SpEL's standard parser implementation.\npackage spel.support; // SpEL's default implementations for various core abstractions.\npublic class CodeFlow extends Object implements org.springframework.asm.Opcodes; // Manages the class being generated by the compilation process.\n@FunctionalInterface public static interface CodeFlow.ClinitAdder; // Interface used to generate clinit static initializer blocks.\n@FunctionalInterface public static interface CodeFlow.FieldAdder; // Interface used to generate fields.\npublic interface CompilablePropertyAccessor extends PropertyAccessor, org.springframework.asm.Opcodes; // A compilable property accessor is able to generate bytecode that represents the access operation, facilitating compilation to bytecode of expressions that use the accessor.\npublic abstract class CompiledExpression extends Object; // Base superclass for compiled expressions.\npublic class ExpressionState extends Object; // ExpressionState is for maintaining per-expression-evaluation state: any changes to it are not seen by other expressions, but it gives a place to hold local variables and for component expressions in a compound expression to communicate state.\npublic class InternalParseException extends RuntimeException; // Wraps a real parse exception.\npublic enum SpelCompilerMode extends Enum<SpelCompilerMode>; // Captures the possible configuration settings for a compiler that can be used when evaluating expressions.\npublic class SpelEvaluationException extends EvaluationException; // Root exception for Spring EL related exceptions.\npublic enum SpelMessage extends Enum<SpelMessage>; // Contains all the messages that can be produced by the Spring Expression Language.\npublic static enum SpelMessage.Kind extends Enum<SpelMessage.Kind>; // Message kinds.\npublic interface SpelNode; // Represents a node in the AST for a parsed expression.\npublic class SpelParseException extends ParseException; // Root exception for Spring EL related exceptions.\npublic class SpelParserConfiguration extends Object; // Configuration object for the SpEL expression parser.\n", "des": "SpEL's central implementation package."}
{"index": 1596, "repo": "spring-websocket-6.0.11", "code": "package server;\n\npackage server.jetty; // Server-side support for the Jetty 9+ WebSocket API.\npackage server.standard; // Server-side classes for use with standard JSR-356 WebSocket endpoints.\npackage server.support; // Server-side support classes including container-specific strategies for upgrading a request.\npublic class HandshakeFailureException extends org.springframework.core.NestedRuntimeException; // Thrown when handshake processing failed to complete due to an internal, unrecoverable error.\npublic interface HandshakeHandler; // Contract for processing a WebSocket handshake request.\npublic interface HandshakeInterceptor; // Interceptor for WebSocket handshake requests.\npublic interface RequestUpgradeStrategy; // A server-specific strategy for performing the actual upgrade to a WebSocket exchange.\n", "des": "Server-side abstractions for WebSocket interactions."}
{"index": 1317, "repo": "groovy-all-4.0.13", "code": "package xml;\n\npackage xml.dom; // Groovy XML Dom processing classes.\npackage xml.slurpersupport; // Helper classes for XmlSlurper.\npackage xml.streamingmarkupsupport; // XmlBuilder related classes to support streaming XML.\npublic class DOMBuilder extends BuilderSupport; // A helper class for creating a W3C DOM tree\npublic class FactorySupport extends Object; // Support class for creating XML Factories\npublic class MarkupBuilder extends BuilderSupport; // A helper class for creating XML or HTML markup.\npublic static enum MarkupBuilder.CharFilter extends Enum<MarkupBuilder.CharFilter>;\npublic static class MarkupBuilder.DefaultXmlEscapingFunction extends Object implements Function<Character,Optional<String>>;\npublic class MarkupBuilderHelper extends Object; // A helper class for MarkupBuilder.\npublic class Namespace extends Object; // A simple helper class which acts as a factory of QName instances.\npublic class NamespaceBuilder extends Object; // A helper class for creating namespaces for GroovyMarkup\npublic class NamespaceBuilderSupport extends BuilderSupport; // A helper class for creating namespaced GroovyMarkup\npublic class SAXBuilder extends BuilderSupport; // A builder for generating W3C SAX events.\npublic class XmlNodePrinter extends Object; // Prints a groovy.util.Node (as used with XmlParser) including all children in XML format.\nprotected static class XmlNodePrinter.NamespaceContext extends Object;\npublic class XmlParser extends Object implements ContentHandler; // A helper class for parsing XML into a tree of Node instances for a simple way of processing XML.\npublic class XmlSlurper extends DefaultHandler; // Parse XML into a document tree that may be traversed similar to XPath expressions.\npublic class XmlUtil extends Object; // Used for pretty printing XML content and other XML related utilities.\n", "des": "Groovy markup builder classes for working with SAX and W3C DOM and Groovy markup."}
{"index": 779, "repo": "lucene-analyzers-common-8.11.2", "code": "package fr;\n\nClass FrenchAnalyzer; // Analyzer for French language.\nClass FrenchLightStemFilter; // A TokenFilter that applies FrenchLightStemmer to stem French words.\nClass FrenchLightStemFilterFactory; // Factory for FrenchLightStemFilter.\nClass FrenchLightStemmer; // Light Stemmer for French.\nClass FrenchMinimalStemFilter; // A TokenFilter that applies FrenchMinimalStemmer to stem French words.\nClass FrenchMinimalStemFilterFactory; // Factory for FrenchMinimalStemFilter.\nClass FrenchMinimalStemmer; // Light Stemmer for French.\n", "des": "Analyzer for French."}
{"index": 524, "repo": "commons-vfs2-2.9.0", "code": "package http4s;\n\nClass Http4sFileNameParser; // FileNameParser implementation for http4s provider, setting default port to 443.\nClass Http4sFileProvider; // http4s provider that uses HttpComponents HttpClient.\n", "des": "The HTTP4S File Provider"}
{"index": 1890, "repo": "shiro-core-2.0.0-alpha-2", "code": "package session;\n\npackage session.mgt; // SessionManager components supporting enterprise session management.\npublic class ExpiredSessionException extends StoppedSessionException; // A special case of a StoppedSessionException.\npublic class InvalidSessionException extends SessionException; // Exception thrown when attempting to interact with the system under an established session when that session is considered invalid.\npublic class ProxiedSession extends Object implements Session; // Simple Session implementation that immediately delegates all corresponding calls to an underlying proxied session instance.\npublic interface Session; // A Session is a stateful data context associated with a single Subject (user, daemon process, etc.) who interacts with a software system over a period of time.\npublic class SessionException extends org.apache.shiro.lang.ShiroException; // General security exception attributed to problems during interaction with the system during a session.\npublic interface SessionListener; // Interface to be implemented by components that wish to be notified of events that occur during a Session's life cycle.\npublic class SessionListenerAdapter extends Object implements SessionListener; // Simple adapter implementation of the SessionListener interface, effectively providing no-op implementations of all methods.\npublic class StoppedSessionException extends InvalidSessionException; // Exception thrown when attempting to interact with the system under a session that has been stopped.\npublic class UnknownSessionException extends InvalidSessionException; // Exception thrown when attempting to interact with the system under the pretense of a particular session (e.g.\n", "des": "Components related to managing sessions, the time-based data contexts in which a Subject interacts with an application."}
{"index": 3516, "repo": "opennlp-tools-2.2.0", "code": "package ad;\n\nClass ADChunkSampleStream; // Parser for Floresta Sita(c)tica Arvores Deitadas corpus, output to for the Portuguese Chunker training.\nClass ADChunkSampleStreamFactory<P>; // A Factory to create a Arvores Deitadas ChunkStream from the command line utility.\nClass ADNameSampleStream; // Parser for Floresta Sita(c)tica Arvores Deitadas corpus, output to for the Portuguese NER training.\nClass ADNameSampleStreamFactory<P>; // A Factory to create a Arvores Deitadas NameSampleDataStream from the command line utility.\nClass ADPOSSampleStream; // Note: Do not use this class, internal use only!\nClass ADPOSSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass ADSentenceSampleStream; // Note: Do not use this class, internal use only!\nClass ADSentenceSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass ADSentenceStream; // Stream filter which merges text lines into sentences, following the Arvores Deitadas syntax.\nClass ADSentenceStream.Sentence;\nClass ADSentenceStream.SentenceParser; // Parses a sample of AD corpus.\nClass ADSentenceStream.SentenceParser.Leaf; // Represents the AD leaf\nClass ADSentenceStream.SentenceParser.Node; // Represents the AD node\nClass ADSentenceStream.SentenceParser.TreeElement; // Represents a tree element, Node or Leaf\nClass ADTokenSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass PortugueseContractionUtility; // Utility class to handle Portuguese contractions.\n", "des": "Experimental package related to the Arvores Deitadas corpus format."}
{"index": 1671, "repo": "spring-boot-cli-3.1.1", "code": "package init;\n\npublic class InitCommand extends OptionParsingCommand; // Command that initializes a project using Spring initializr.\npublic class ReportableException extends RuntimeException; // Exception with a message that can be reported to the user.\n", "des": "CLI command for initializing a new application using Spring Initializr."}
{"index": 3808, "repo": "lucene-analysis-common-9.7.0", "code": "package pt;\n\nClass PortugueseAnalyzer; // Analyzer for Portuguese.\nClass PortugueseLightStemFilter; // A TokenFilter that applies PortugueseLightStemmer to stem Portuguese words.\nClass PortugueseLightStemFilterFactory; // Factory for PortugueseLightStemFilter.\nClass PortugueseLightStemmer; // Light Stemmer for Portuguese\nClass PortugueseMinimalStemFilter; // A TokenFilter that applies PortugueseMinimalStemmer to stem Portuguese words.\nClass PortugueseMinimalStemFilterFactory; // Factory for PortugueseMinimalStemFilter.\nClass PortugueseMinimalStemmer; // Minimal Stemmer for Portuguese\nClass PortugueseStemFilter; // A TokenFilter that applies PortugueseStemmer to stem Portuguese words.\nClass PortugueseStemFilterFactory; // Factory for PortugueseStemFilter.\nClass PortugueseStemmer; // Portuguese stemmer implementing the RSLP (Removedor de Sufixos da Lingua Portuguesa) algorithm.\nClass RSLPStemmerBase; // Base class for stemmers that use a set of RSLP-like stemming steps.\nClass RSLPStemmerBase.Rule; // A basic rule, with no exceptions.\nClass RSLPStemmerBase.RuleWithSetExceptions; // A rule with a set of whole-word exceptions.\nClass RSLPStemmerBase.RuleWithSuffixExceptions; // A rule with a set of exceptional suffixes.\nClass RSLPStemmerBase.Step; // A step containing a list of rules.\n", "des": "Analyzer for Portuguese."}
{"index": 3540, "repo": "opennlp-tools-2.2.0", "code": "package parser;\n\npackage parser.chunking; // Package containing code for performing full syntactic parsing using shift/reduce-style decisions.\npackage parser.treeinsert; // Package containing experimental code for performing full syntactic parsing using attachment decisions.\nInterface GapLabeler; // Represents a labeler for nodes which contain traces so that these traces can be predicted by a Parser.\nInterface HeadRules; // Encoder for head rules associated with parsing.\nInterface Parser; // Defines common methods for full-syntactic parsers.\nInterface ParserEvaluationMonitor; // A marker interface for evaluating parsers.\nClass AbstractBottomUpParser; // Abstract class which contains code to tag and chunk parses for bottom up parsing and leaves implementation of advancing parses and completing parses to extend class.\nClass AbstractContextGenerator; // Abstract class containing many of the methods used to generate contexts for parsing.\nClass AbstractParserEventStream; // Abstract class extended by parser event streams which perform tagging and chunking.\nClass ChunkContextGenerator; // Creates predictive context for the pre-chunking phases of parsing.\nClass ChunkSampleStream;\nClass Cons; // Holds feature information about a specific Parse node.\nClass Constituent; // Holds constituents when reading parses.\nClass Parse; // Data structure for holding parse constituents.\nClass ParserChunkerFactory;\nClass ParserChunkerSequenceValidator; // The parser chunker SequenceValidator implementation.\nClass ParserCrossValidator; // Cross validator for a Parser.\nClass ParserEvaluator; // This implementation of Evaluator behaves like EVALB with no exceptions, e.g, without removing punctuation tags, or equality between ADVP and PRT, as in COLLINS convention.\nClass ParserFactory;\nClass ParserModel; // This is the default ParserModel implementation.\nClass ParseSampleStream;\nClass PosSampleStream;\nEnum ParserEventTypeEnum; // Enumeration of event types for a Parser.\nEnum ParserType; // Enumeration of supported Parser types.\n", "des": "Package containing common code for performing full syntactic parsing."}
{"index": 3223, "repo": "commons-configuration2-2.9.0", "code": "package reloading;\n\nInterface ManagedReloadingDetectorMBean; // MBean definition for managing configuration reload.\nInterface ReloadingControllerSupport; // Definition of an interface to be implemented by components which support reloading operations managed by a ReloadingController.\nInterface ReloadingDetector; // An interface to be implemented by objects which can detect whether a reload operation is required.\nClass CombinedReloadingController; // A specialized ReloadingController implementation which manages an arbitrary number of other ReloadingController objects.\nClass FileHandlerReloadingDetector; // A specialized implementation of ReloadingDetector which monitors a file specified by a FileHandler.\nClass ManagedReloadingDetector; // A strategy to reload configuration based on management requests.\nClass PeriodicReloadingTrigger; // A timer-based trigger for reloading checks.\nClass ReloadingController; // A class for adding support for reload operations in a generic way.\nClass ReloadingEvent; // An event that is fired when a reload operation is required.\nClass VFSFileHandlerReloadingDetector; // A file-based reloading strategy that uses Commons VFS to determine when a file was changed.\n", "des": "This package contains classes and interfaces related to the reloading mechanism."}
{"index": 1148, "repo": "commons-math3-3.6.1", "code": "package interpolation;\n\nInterface BivariateGridInterpolator; // Interface representing a bivariate real interpolating function where the sample points must be specified on a regular grid.\nInterface MultivariateInterpolator; // Interface representing a univariate real interpolating function.\nInterface TrivariateGridInterpolator; // Interface representing a trivariate real interpolating function where the sample points must be specified on a regular grid.\nInterface UnivariateInterpolator; // Interface representing a univariate real interpolating function.\nClass AkimaSplineInterpolator; // Computes a cubic spline interpolation for the data set using the Akima algorithm, as originally formulated by Hiroshi Akima in his 1970 paper \"A New Method of Interpolation and Smooth Curve Fitting Based on Local Procedures.\" J.\nClass BicubicInterpolatingFunction; // Function that implements the bicubic spline interpolation.\nClass BicubicInterpolator; // Generates a bicubic interpolating function.\nClass BicubicSplineInterpolatingFunction; // as of 3.4 replaced by PiecewiseBicubicSplineInterpolatingFunction\nClass BicubicSplineInterpolator; // as of 3.4 replaced by PiecewiseBicubicSplineInterpolator\nClass DividedDifferenceInterpolator; // Implements the Divided Difference Algorithm for interpolation of real univariate functions.\nClass FieldHermiteInterpolator<T extends FieldElement<T>>; // Polynomial interpolator using both sample values and sample derivatives.\nClass HermiteInterpolator; // Polynomial interpolator using both sample values and sample derivatives.\nClass InterpolatingMicrosphere; // Utility class for the MicrosphereProjectionInterpolator algorithm.\nClass InterpolatingMicrosphere2D; // Utility class for the MicrosphereProjectionInterpolator algorithm.\nClass LinearInterpolator; // Implements a linear function for interpolation of real univariate functions.\nClass LoessInterpolator; // Implements the Local Regression Algorithm (also Loess, Lowess) for interpolation of real univariate functions.\nClass MicrosphereInterpolatingFunction; // Code will be removed in 4.0.\nClass MicrosphereInterpolator; // Code will be removed in 4.0.\nClass MicrosphereProjectionInterpolator; // Interpolator that implements the algorithm described in William Dudziak's MS thesis.\n", "des": "Univariate real functions interpolation algorithms."}
{"index": 3445, "repo": "hibernate-core-5.6.15.Final", "code": "package jdbc;\n\npackage jdbc.spi; // SPI contracts for supporting various aspects of JDBC interaction\nInterface BinaryStream; // Wraps a binary stream to also provide the length which is needed when binding.\nInterface BlobImplementer; // Marker interface for non-contextually created Blob instances..\nInterface CharacterStream; // Wraps a character stream (reader) to also provide the length (number of characters) which is needed when binding.\nInterface ClobImplementer; // Marker interface for non-contextually created Clob instances..\nInterface LobCreationContext; // Provides callback access into the context in which the LOB is to be created.\nInterface LobCreationContext.Callback<T>; // The callback contract for making use of the JDBC Connection.\nInterface LobCreator; // Contract for creating various LOB references.\nInterface NClobImplementer; // Marker interface for non-contextually created java.sql.NClob instances..\nInterface WrappedBlob; // Contract for Blob wrappers.\nInterface WrappedClob; // Contract for Clob wrappers.\nInterface WrappedNClob; // Contract for NClob wrappers.\nClass AbstractLobCreator; // Convenient base class for proxy-based LobCreator for handling wrapping.\nClass BlobProxy; // Manages aspects of representing Blob objects.\nClass ClobProxy; // Manages aspects of proxying Clobs for non-contextual creation, including proxy creation and handling proxy invocations.\nClass ColumnNameCache;\nClass ContextualLobCreator; // LobCreator implementation using contextual creation against the JDBC Connection class's LOB creation methods.\nClass NClobProxy; // Manages aspects of proxying java.sql.NClobs for non-contextual creation, including proxy creation and handling proxy invocations.\nClass NonContextualLobCreator; // LobCreator implementation using non-contextual or local creation, meaning that we generate the LOB references ourselves as opposed to delegating to the JDBC Connection.\nClass ReaderInputStream; // Exposes a Reader as an InputStream.\nClass ResultSetWrapperProxy;\nClass SerializableBlobProxy; // Manages aspects of proxying Blobs to add serializability.\nClass SerializableClobProxy; // Manages aspects of proxying Clobs to add serializability.\n", "des": "Support for various aspects of JDBC interaction"}
{"index": 2968, "repo": "pulsar-broker-3.0.0", "code": "package protocol;\n\n@LimitedPrivate @Evolving public interface ProtocolHandler extends AutoCloseable; // The protocol handler interface for support additional protocols on Pulsar brokers.\npublic class ProtocolHandlerDefinition extends Object; // Metadata information about a Pulsar protocol handler.\npublic class ProtocolHandlers extends Object implements AutoCloseable; // A collection of loaded handlers.\n", "des": "Pulsar broker protocol handlers."}
{"index": 3449, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface DialectFactory; // A factory for generating Dialect instances.\nInterface DialectResolutionInfo; // Exposes information about the database and JDBC driver that can be used in resolving the appropriate Dialect to use.\nInterface DialectResolutionInfoSource; // Contract for the source of DialectResolutionInfo.\nInterface DialectResolver; // Contract for determining the Dialect to use based on information about the database / driver.\nClass BasicDialectResolver; // Intended as support for custom resolvers which match a single db name (with optional version info).\nClass BasicSQLExceptionConverter; // A helper to centralize conversion of SQLExceptions to JDBCExceptions.\nClass DatabaseMetaDataDialectResolutionInfoAdapter; // An implementation of DialectResolutionInfo that delegates calls to a wrapped DatabaseMetaData.\n", "des": "Contracts supporting Dialect resolution (from JDBC metadata) and Dialect building."}
{"index": 3222, "repo": "commons-configuration2-2.9.0", "code": "package plist;\n\nInterface PropertyListParserConstants; // Token literal values and constants.\nClass PropertyListConfiguration; // NeXT / OpenStep style configuration.\nClass PropertyListParserTokenManager; // Token Manager.\nClass SimpleCharStream; // An implementation of interface CharStream, where the stream is assumed to contain only ASCII characters (without unicode processing).\nClass Token; // Describes the input token stream.\nClass XMLPropertyListConfiguration; // Property list file (plist) in XML FORMAT as used by Mac OS X (http://www.apple.com/DTDs/PropertyList-1.0.dtd).\nClass ParseException; // This exception is thrown when parse errors are encountered.\nClass TokenMgrError; // Token Manager Error.\n", "des": "Configuration classes supporting NeXT / OpenStep /GNUStep style configuration."}
{"index": 273, "repo": "nutch-2.4", "code": "package reltag;\n\nClass RelTagIndexingFilter; // An IndexingFilter that adds tag field(s) to the document.\nClass RelTagParser; // Adds microformat rel-tags of document if found.\n", "des": "A microformats Rel-Tag Parser/Indexer/Querier plugin."}
{"index": 829, "repo": "calcite-core-1.34.0", "code": "package interpreter;\n\nInterface BindableRel; // Relational expression that can implement itself in Bindable convention.\nInterface Bindables.BindableTableScanRule.Config; // Rule configuration.\nInterface Compiler; // Context while converting a tree of RelNode to a program that can be run by an Interpreter.\nInterface InterpretableRel; // Relational expression that can implement itself using an interpreter.\nInterface Node; // Relational expression that can be executed using an interpreter.\nInterface Scalar; // Compiled scalar expression.\nInterface Scalar.Producer; // Produces a Scalar when a query is executed.\nInterface Sink; // Sink to which to send rows.\nInterface Source; // Source of rows.\nClass AggregateNode; // Interpreter node that implements an Aggregate.\nClass AggregateNode.BigDecimalSum; // Implementation of SUM over BigDecimal values as a user-defined aggregate.\nClass AggregateNode.DoubleSum; // Implementation of SUM over DOUBLE values as a user-defined aggregate.\nClass AggregateNode.IntSum; // Implementation of SUM over INTEGER values as a user-defined aggregate.\nClass AggregateNode.LongSum; // Implementation of SUM over BIGINT values as a user-defined aggregate.\nClass AggregateNode.MaxBigDecimal; // Implementation of MAX function to calculate the maximum of BigDecimal values as a user-defined aggregate.\nClass AggregateNode.MaxDouble; // Implementation of MAX function to calculate the maximum of double and real values as a user-defined aggregate.\nClass AggregateNode.MaxFloat; // Implementation of MAX function to calculate the maximum of float values as a user-defined aggregate.\nClass AggregateNode.MaxInt; // Implementation of MAX function to calculate the maximum of integer values as a user-defined aggregate.\nClass AggregateNode.MaxLong; // Implementation of MAX function to calculate the maximum of long values as a user-defined aggregate.\nClass AggregateNode.MinBigDecimal; // Implementation of MIN function to calculate the minimum of BigDecimal values as a user-defined aggregate.\nClass AggregateNode.MinBoolean; // Implementation of MIN function to calculate the minimum of boolean values as a user-defined aggregate.\nClass AggregateNode.MinDouble; // Implementation of MIN function to calculate the minimum of double and real values as a user-defined aggregate.\nClass AggregateNode.MinFloat; // Implementation of MIN function to calculate the minimum of float values as a user-defined aggregate.\n", "des": "Provides an implementation of relational expressions using an interpreter."}
{"index": 417, "repo": "hadoop-azure-3.3.6", "code": "package extensions;\n\nInterface BoundDTExtension; // An optional extension for custom extensions, so as to support tighter integration.\nInterface CustomDelegationTokenManager; // Interface for Managing the Delegation tokens.\nInterface CustomTokenProviderAdaptee; // This interface provides an extensibility model for customizing the acquisition of Azure Active Directory Access Tokens.\nInterface SASTokenProvider; // Interface to support SAS authorization.\nClass ExtensionHelper; // Classes to help with use of extensions, expecially those implementing @BoundDTExtension.\n", "des": "This package is for extension points under ABFS; There are no stability guarantees as these extension points are deep inside the ABFS implementation code."}
{"index": 1226, "repo": "spring-plugin-core-3.0.0", "code": "package config;\n\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented @Import(PluginRegistriesBeanDefinitionRegistrar.class) public @interface EnablePluginRegistries; // Enables exposure of PluginRegistry instances for the configured Plugin types\npublic class PluginListDefinitionParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser; // Bean definition parser to register <list /> elements from the plugin namespace.\npublic class PluginNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // Simple namespace handler for plugin-config namespace.\npublic class PluginRegistriesBeanDefinitionRegistrar extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar; // ImportBeanDefinitionRegistrar to register PluginRegistryFactoryBean instances for type listed in EnablePluginRegistries.\npublic class PluginRegistryDefinitionParser extends PluginListDefinitionParser; // Simple extension of PluginListDefinitionParser.\n", "des": "This package contains configuration support classes to ease registry configuration with Spring namespaces."}
{"index": 2770, "repo": "spring-jms-6.0.11", "code": "package connection;\n\npublic class CachingConnectionFactory extends SingleConnectionFactory; // SingleConnectionFactory subclass that adds Session caching as well as MessageProducer and MessageConsumer caching.\npublic class ChainedExceptionListener extends Object implements ExceptionListener; // Implementation of the JMS ExceptionListener interface that supports chaining, allowing the addition of multiple ExceptionListener instances in order.\npublic abstract class ConnectionFactoryUtils extends Object; // Helper class for managing a JMS ConnectionFactory, in particular for obtaining transactional JMS resources for a given ConnectionFactory.\npublic static interface ConnectionFactoryUtils.ResourceFactory; // Callback interface for resource creation.\npublic class DelegatingConnectionFactory extends Object implements SmartConnectionFactory, QueueConnectionFactory, TopicConnectionFactory, org.springframework.beans.factory.InitializingBean; // ConnectionFactory implementation that delegates all calls to a given target ConnectionFactory, adapting specific create(Queue/Topic)Connection calls to the target ConnectionFactory if necessary (e.g.\npublic class JmsResourceHolder extends org.springframework.transaction.support.ResourceHolderSupport; // Resource holder wrapping a JMS Connection and a JMS Session.\npublic class JmsTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.support.ResourceTransactionManager, org.springframework.beans.factory.InitializingBean; // PlatformTransactionManager implementation for a single JMS ConnectionFactory.\npublic interface SessionProxy extends Session; // Subinterface of Session to be implemented by Session proxies.\npublic class SingleConnectionFactory extends Object implements ConnectionFactory, QueueConnectionFactory, TopicConnectionFactory, ExceptionListener, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // A JMS ConnectionFactory adapter that returns the same Connection from all SingleConnectionFactory.createConnection() calls, and ignores calls to Connection.close().\npublic interface SmartConnectionFactory extends ConnectionFactory; // Extension of the jakarta.jms.ConnectionFactory interface, indicating how to release Connections obtained from it.\npublic class SynchedLocalTransactionFailedException extends JmsException; // Exception thrown when a synchronized local transaction failed to complete (after the main transaction has already completed).\npublic class TransactionAwareConnectionFactoryProxy extends Object implements ConnectionFactory, QueueConnectionFactory, TopicConnectionFactory; // Proxy for a target JMS ConnectionFactory, adding awareness of Spring-managed transactions.\n", "des": "Provides a PlatformTransactionManager implementation for a single JMS ConnectionFactory, and a SingleConnectionFactory adapter."}
{"index": 1448, "repo": "spring-data-redis-3.1.2", "code": "package observability;\n\npublic class LettuceObservationContext extends io.micrometer.observation.transport.SenderContext<Object>; // Micrometer Observation.Context holding Lettuce contextual details.\npublic class MicrometerTracingAdapter extends Object implements io.lettuce.core.tracing.Tracing; // Tracing adapter using Micrometer's Observation.\npublic enum RedisObservation extends Enum<RedisObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // A Redis-based Observation.\n", "des": "Integration of Micrometer Tracing for Lettuce Observability."}
{"index": 3815, "repo": "lucene-analysis-common-9.7.0", "code": "package snowball;\n\nClass SnowballFilter; // A filter that stems words using a Snowball-generated stemmer.\nClass SnowballPorterFilterFactory; // Factory for SnowballFilter, with configurable language\n", "des": "TokenFilter and Analyzer implementations that use a modified version of Snowball stemmers."}
{"index": 201, "repo": "nutch-2.4", "code": "package normalizer;\n\nInterface Normalizable;\nClass SimpleStringNormalizer;\n", "des": "Normalizers for jsoup-extractor"}
{"index": 1683, "repo": "spring-integration-mqtt-6.1.2", "code": "package core;\n\npublic abstract class AbstractMqttClientManager<T,C> extends Object implements ClientManager<T,C>, org.springframework.context.ApplicationEventPublisherAware; // Abstract class for MQTT client managers which can be a base for any common v3/v5 client manager implementation.\npublic interface ClientManager<T,C> extends org.springframework.context.SmartLifecycle, MqttComponent<C>; // A utility abstraction over MQTT client which can be used in any MQTT-related component without need to handle generic client callbacks, reconnects etc.\n@FunctionalInterface public static interface ClientManager.ConnectCallback; // A contract for a custom callback on connectComplete event from the client.\npublic class DefaultMqttPahoClientFactory extends Object implements MqttPahoClientFactory; // Creates a default MqttClient and a set of options as configured.\npublic static class DefaultMqttPahoClientFactory.Will extends Object;\npublic interface MqttComponent<T> extends org.springframework.beans.factory.BeanNameAware; // A component that interfaces with MQTT.\npublic interface MqttPahoClientFactory;\npublic interface MqttPahoComponent extends MqttComponent<org.eclipse.paho.client.mqttv3.MqttConnectOptions>; // An extension of MqttComponent for Eclipse Paho components.\npublic class Mqttv3ClientManager extends AbstractMqttClientManager<org.eclipse.paho.client.mqttv3.IMqttAsyncClient,org.eclipse.paho.client.mqttv3.MqttConnectOptions> implements org.eclipse.paho.client.mqttv3.MqttCallbackExtended; // A client manager implementation for MQTT v3 protocol.\npublic class Mqttv5ClientManager extends AbstractMqttClientManager<org.eclipse.paho.mqttv5.client.IMqttAsyncClient,org.eclipse.paho.mqttv5.client.MqttConnectionOptions> implements org.eclipse.paho.mqttv5.client.MqttCallback; // A client manager implementation for MQTT v5 protocol.\n", "des": "Provides core classes of the MqttAdapter module."}
{"index": 3274, "repo": "opencms-core-15.0", "code": "package gwt;\n\npackage gwt.shared; // Core shared stuff.\nInterface I_CmsClientMessageBundle; // Convenient client message bundle interface.\nInterface I_CmsCoreProvider; // Convenience interface to provide core server-side data to the client.\nInterface I_CmsFormValidator; // Interface for handling the server-side validation of a whole form.\nInterface I_CmsValidationService; // This interface is the server-side counterpart to the org.opencms.gwt.client.validation.I_CmsValidator.\nClass A_CmsClientMessageBundle; // Convenience class to access the localized messages of this OpenCms package.\nClass ClientMessages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsAliasHelper; // This class contains the real implementations of service methods related to aliases.\nClass CmsBrokenLinkRenderer; // A helper class used to generate the necessary information for displaying links which will be broken if the user tries to delete a file in the ADE GUI.\nClass CmsClientUserSettingConverter; // Helper class to deal with loading and saving user preferences from the ADE user interface.\nClass CmsCoreService; // Provides general core services.\nClass CmsDefaultFormValidator; // A form validator which does nothing special and just validates form field values independently of each other.\nClass CmsDefaultResourceStatusProvider; // Helper class to generate all the data which is necessary for the resource status dialog(s).\nClass CmsDummySerializationPolicy; // A serialization policy which allows serialization and deserialization of all classes.\nClass CmsGwtActionElement; // Sitemap action used to generate the sitemap editor.\nClass CmsGwtService; // Wrapper for GWT services served through OpenCms.\nClass CmsGwtServiceContext; // This class contains the data that should be cached for a specific service class.\nClass CmsIconUtil; // Utility class to generate the resource icon CSS.\nClass CmsLogService; // Handles client side logging.\nClass CmsMessagesService; // Exports the register client messages into a single JavaScript resource.\nClass CmsPrefetchSerializationPolicy; // A GWT serialization policy for pre-fetching.\nClass CmsPropertyEditorHelper; // Helper class responsible for loading / saving properties when using the property dialog.\nClass CmsQuickLaunchProvider; // Provides the data for the buttons in the quick launch menu.\nClass CmsResourceStatusConstants; // Constants for the resource info dialog.\n", "des": "Provides core support for GWT."}
{"index": 300, "repo": "pdfbox-3.0.0-beta1", "code": "package state;\n\nClass PDExtendedGraphicsState; // An extended graphics state dictionary.\nClass PDGraphicsState; // The current state of the graphics parameters when executing a content stream.\nClass PDSoftMask; // Soft mask.\nClass PDTextState; // This class will hold the current state of the text parameters when executing a content stream.\nEnum RenderingIntent; // Rendering intent.\nEnum RenderingMode; // Text Rendering Mode.\n", "des": "This package deals with graphics states within the PDF document."}
{"index": 1389, "repo": "spring-boot-actuator-3.1.1", "code": "package jackson;\n\npublic interface EndpointObjectMapper; // Interface used to supply the ObjectMapper that should be used when serializing OperationResponseBody endpoint results.\n", "des": "Jackson support classes for actuator endpoints."}
{"index": 2883, "repo": "spring-integration-core-6.1.2", "code": "package support;\n\npackage support.context; // Provides classes supporting use of the application context.\npackage support.converter; // Provides classes supporting message conversion.\npackage support.json; // Provides classes supporting json.\npackage support.locks; // Provides classes related to locking resources.\npackage support.management; // Provides classes related to management support.\npackage support.utils; // Provides global utility support classes for the runtime system.\npublic abstract class AbstractIntegrationMessageBuilder<T> extends Object;\npublic class DefaultErrorMessageStrategy extends Object implements ErrorMessageStrategy; // A simple ErrorMessageStrategy implementations which produces a error message with original message if the AttributeAccessor has ErrorMessageUtils.INPUT_MESSAGE_CONTEXT_KEY attribute.\npublic class DefaultMessageBuilderFactory extends Object implements MessageBuilderFactory;\n@FunctionalInterface public interface ErrorMessageStrategy; // A strategy to build an ErrorMessage based on the provided Throwable and AttributeAccessor as a context.\npublic final class ErrorMessageUtils extends Object; // Utilities for building error messages.\npublic class IdGenerators extends Object; // Alternative IdGenerator implementations.\npublic static class IdGenerators.JdkIdGenerator extends Object implements org.springframework.util.IdGenerator; // UUID.randomUUID().\npublic static class IdGenerators.SimpleIncrementingIdGenerator extends Object implements org.springframework.util.IdGenerator; // Based on the two AtomicLongs, for topBits and bottomBits, respectively.\npublic class MapBuilder<B extends MapBuilder<B,K,V>,K,V> extends Object; // A Builder pattern implementation for the Map.\npublic final class MessageBuilder<T> extends AbstractIntegrationMessageBuilder<T>; // The default message builder; creates immutable GenericMessages.\npublic interface MessageBuilderFactory;\n@FunctionalInterface public interface MessageDecorator; // The Message decoration contract.\npublic class MessagingExceptionWrapper extends org.springframework.messaging.MessagingException; // A wrapper exception for a MessagingException used to convey the cause and original message to a MessagePublishingErrorHandler.\npublic class MutableMessage<T> extends Object implements org.springframework.messaging.Message<T>, Serializable; // An implementation of Message with a generic payload.\npublic final class MutableMessageBuilder<T> extends AbstractIntegrationMessageBuilder<T>; // Specialized message builder that can be used within a component to avoid the overhead of having to build multiple messages for mutations within that component.\n", "des": "Base core support package."}
{"index": 1163, "repo": "commons-math3-3.6.1", "code": "package enclosing;\n\nInterface Encloser<S extends Space,P extends Point<S>>; // Interface for algorithms computing enclosing balls.\nInterface SupportBallGenerator<S extends Space,P extends Point<S>>; // Interface for generating balls based on support points.\nClass EnclosingBall<S extends Space,P extends Point<S>>; // This class represents a ball enclosing some points.\nClass WelzlEncloser<S extends Space,P extends Point<S>>; // Class implementing Emo Welzl algorithm to find the smallest enclosing ball in linear time.\n", "des": "This package provides interfaces and classes related to the smallest enclosing ball problem."}
{"index": 2774, "repo": "spring-jms-6.0.11", "code": "package adapter;\n\npublic abstract class AbstractAdaptableMessageListener extends Object implements MessageListener, SessionAwareMessageListener<Message>; // An abstract JMS MessageListener adapter providing the necessary infrastructure to extract the payload of a JMS Message.\npublic class JmsResponse<T> extends Object; // Return type of any JMS listener method used to indicate the actual response destination alongside the response itself.\npublic class ListenerExecutionFailedException extends JmsException; // Exception to be thrown when the execution of a listener method failed.\npublic class MessageListenerAdapter extends AbstractAdaptableMessageListener implements SubscriptionNameProvider; // Message listener adapter that delegates the handling of messages to target listener methods via reflection, with flexible message type conversion.\npublic class MessagingMessageListenerAdapter extends AbstractAdaptableMessageListener implements SubscriptionNameProvider; // A MessageListener adapter that invokes a configurable InvocableHandlerMethod.\npublic class ReplyFailureException extends JmsException; // Exception to be thrown when the reply of a message failed to be sent.\n", "des": "Message listener adapter mechanism that delegates to target listener methods, converting messages to appropriate message content types (such as String or byte array) that get passed into listener methods."}
{"index": 3533, "repo": "opennlp-tools-2.2.0", "code": "package io;\n\nClass BinaryGISModelReader; // A GISModelReader that reads models from a binary format.\nClass BinaryGISModelWriter; // A GISModelWriter that writes models in a binary format.\nClass BinaryQNModelReader; // A QNModelReader that reads models from a binary format.\nClass BinaryQNModelWriter; // A QNModelWriter that writes models in a binary format.\nClass GISModelReader; // The base class for readers of GIS models.\nClass GISModelWriter; // The base class for writers of GIS models.\nClass QNModelReader; // The base class for readers of QN models.\nClass QNModelWriter; // The base class for writers of models.\n", "des": "Package related to the I/O functionality of the maxent package including reading and writing models in several formats."}
{"index": 532, "repo": "commons-vfs2-2.9.0", "code": "package sftp;\n\nInterface IdentityProvider; // Provides identity to a JSch.\nInterface IdentityRepositoryFactory; // Creates instances of JSch IdentityRepository.\nClass BytesIdentityInfo; // Structure for an identity based on byte arrays.\nClass IdentityInfo; // Structure for an identity based on Files.\nClass SftpClientFactory; // Create a JSch Session instance.\nClass SftpFileNameParser; // Implementation for SFTP.\nClass SftpFileObject; // An SFTP file.\nClass SftpFileProvider; // A provider for accessing files over SFTP.\nClass SftpFileSystem; // Represents the files on an SFTP server.\nClass SftpFileSystemConfigBuilder; // The config builder for various SFTP configuration options.\nClass SftpFileSystemConfigBuilder.ProxyType; // Proxy type.\nClass SftpStreamProxy; // Stream based proxy for JSch.\nClass TrustEveryoneUserInfo; // Helper class to trust a new host.\nClass UserIsOwnerPosixPermissions; // Pretends that the current user is always the owner and in the same group.\n", "des": "The SFTP Provider."}
{"index": 2231, "repo": "spring-data-commons-3.1.2", "code": "package classreading;\n\n@Deprecated public interface MethodsMetadataReader extends MetadataReader;\n@Deprecated public class MethodsMetadataReaderFactory extends SimpleMetadataReaderFactory;\n", "des": "Support classes for reading annotation and class-level metadata."}
{"index": 2447, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package liquibase;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration.class) @ConditionalOnClass(liquibase.integration.spring.SpringLiquibase.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.liquibase.LiquibaseEndpoint.class) public class LiquibaseEndpointAutoConfiguration extends Object; // Auto-configuration for LiquibaseEndpoint.\n", "des": "Auto-configuration for actuator Liquibase concerns."}
{"index": 2486, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package neo4j;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration.class) @ConditionalOnClass(org.neo4j.driver.Driver.class) @ConditionalOnBean(org.neo4j.driver.Driver.class) @ConditionalOnEnabledHealthIndicator(\"neo4j\") @Import({org.springframework.boot.actuate.autoconfigure.neo4j.Neo4jHealthContributorConfigurations.Neo4jReactiveConfiguration.class,org.springframework.boot.actuate.autoconfigure.neo4j.Neo4jHealthContributorConfigurations.Neo4jConfiguration.class}) public class Neo4jHealthContributorAutoConfiguration extends Object; // Auto-configuration for Neo4jReactiveHealthIndicator and Neo4jHealthIndicator.\n", "des": "Auto-configuration for actuator Neo4J concerns."}
{"index": 754, "repo": "artemis-odb-2.3.0", "code": "package utils;\n\nInterface ArtemisProfiler;\nInterface ImmutableBag<E>; // A non-modifiable bag.\nInterface ImmutableIntBag<E>; // A non-modifiable intbag.\nClass Bag<E>; // Collection type a bit like ArrayList but does not preserve the order of its entities, speedwise it is very good, especially suited for games.\nClass BitVector; // Performance optimized bitset implementation.\nClass ConverterUtil;\nClass EntityBuilder; // Non-reusable entity creation helper for rapid prototyping.\nClass IntBag; // Collection type a bit like ArrayList but does not preserve the order of its entities, speedwise it is very good, especially suited for games.\nClass IntBagIterator; // Base iterator for IntBag\nClass IntDeque; // Missing tests and missing methods: (push|peek|pop)(Back|Front).\nClass ShortBag; // Collection type a bit like ArrayList but does not preserve the order of its entities, speedwise it is very good, especially suited for games.\nClass Sort; // Provides methods to sort arrays of objects.\nEnum IntBagIterator.State;\n", "des": "Helper classes."}
{"index": 2623, "repo": "wicket-request-10.0.0-M1", "code": "package request;\n\npublic class HttpHeaderCollection extends Object; // A multivalue map of headers names and header values suitable for processing http request and response headers.\n@FunctionalInterface public interface IExceptionMapper; // Maps exception to IRequestHandler.\npublic interface ILogData extends Serializable; // Base interface for log data collected by request handlers.\npublic interface ILoggableRequestHandler extends IRequestHandler; // A loggable request handler is a IRequestHandler that is capable of delivering log data.\npublic interface IRequestCycle;\n@FunctionalInterface public interface IRequestHandler; // A request handler is the base entity that is the subject of a request.\npublic interface IRequestHandlerDelegate extends IRequestHandler; // A IRequestHandler that delegates the actual work to another IRequestHandler.\npublic interface IRequestMapper; // Maps IRequestHandler(s) into Url(s) and Request(s) to IRequestHandler(s).\npublic interface IRequestParameters; // Represents request parameters.\npublic interface IUrlRenderer; // An interface that a Url can implement if it knows how to render itself as full url or relative to a base url\npublic interface IWritableRequestParameters extends IRequestParameters; // Request parameters that can be modified.\npublic abstract class Request extends Object; // Request object.\npublic abstract class RequestHandlerExecutor extends Object; // Manages executions of IRequestHandlers.\npublic static class RequestHandlerExecutor.ReplaceHandlerException extends RuntimeException; // Exception to stop current request handler and execute a new one.\npublic abstract class Response extends Object; // Abstract base class for different implementations of response writing.\npublic class Url extends Object implements Serializable; // Represents the URL to an external resource or internal resource/component.\npublic static final class Url.QueryParameter extends Object implements Serializable; // Represents a single query parameter\npublic static enum Url.StringMode extends Enum<Url.StringMode>; // Modes with which urls can be stringized\npublic class UrlRenderer extends Object; // Takes care of rendering URLs.\npublic class UrlUtils extends Object; // Various url utilities\n", "des": "Package for classes that have generic (protocol independent) support for request cycle processing."}
{"index": 258, "repo": "nutch-2.4", "code": "package opic;\n\nClass OPICScoringFilter; // This plugin implements a variant of an Online Page Importance Computation (OPIC) score, described in this paper: Abiteboul, Serge and Preda, Mihai and Cobena, Gregory (2003), Adaptive On-Line Page Importance Computation .\n", "des": "Scoring filter implementing a variant of the Online Page Importance Computation (OPIC) algorithm."}
{"index": 528, "repo": "commons-vfs2-2.9.0", "code": "package jar;\n\nClass JarFileObject; // A file in a Jar file system.\nClass JarFileProvider; // A file system provider for Jar files.\nClass JarFileSystem; // A read-only file system for Jar files.\nClass JarURLConnectionImpl; // A default URL connection that will work for most file systems.\n", "des": "The Jar File Provider."}
{"index": 659, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package csi;\n\npackage csi.exception; // This package contains volume related exception classes.\nClass CsiConstants; // CSI constants.\nClass VolumeCapabilityRange; // Volume capability range that specified in a volume resource request, this range defines the desired min/max capacity.\nClass VolumeCapabilityRange.VolumeCapabilityBuilder; // The builder used to build a VolumeCapabilityRange instance.\nClass VolumeId; // Unique ID for a volume.\nClass VolumeMetaData; // VolumeMetaData defines all valid info for a CSI compatible volume.\nClass VolumeMetaData.VolumeSpecBuilder; // The builder used to build a VolumeMetaData instance.\n", "des": "This package contains common volume related classes."}
{"index": 1808, "repo": "spring-aop-6.0.11", "code": "package interceptor;\n\npublic abstract class AbstractMonitoringInterceptor extends AbstractTraceInterceptor; // Base class for monitoring interceptors, such as performance monitors.\npublic abstract class AbstractTraceInterceptor extends Object implements MethodInterceptor, Serializable; // Base MethodInterceptor implementation for tracing.\npublic abstract class AsyncExecutionAspectSupport extends Object implements org.springframework.beans.factory.BeanFactoryAware; // Base class for asynchronous method execution aspects, such as org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor or org.springframework.scheduling.aspectj.AnnotationAsyncExecutionAspect.\npublic class AsyncExecutionInterceptor extends AsyncExecutionAspectSupport implements MethodInterceptor, org.springframework.core.Ordered; // AOP Alliance MethodInterceptor that processes method invocations asynchronously, using a given AsyncTaskExecutor.\n@FunctionalInterface public interface AsyncUncaughtExceptionHandler; // A strategy for handling uncaught exceptions thrown from asynchronous methods.\npublic class ConcurrencyThrottleInterceptor extends org.springframework.util.ConcurrencyThrottleSupport implements MethodInterceptor, Serializable; // Interceptor that throttles concurrent access, blocking invocations if a specified concurrency limit is reached.\npublic class CustomizableTraceInterceptor extends AbstractTraceInterceptor; // MethodInterceptor implementation that allows for highly customizable method-level tracing, using placeholders.\npublic class DebugInterceptor extends SimpleTraceInterceptor; // AOP Alliance MethodInterceptor that can be introduced in a chain to display verbose information about intercepted invocations to the logger.\npublic abstract class ExposeBeanNameAdvisors extends Object; // Convenient methods for creating advisors that may be used when autoproxying beans created with the Spring IoC container, binding the bean name to the current invocation.\npublic final class ExposeInvocationInterceptor extends Object implements MethodInterceptor, org.springframework.core.PriorityOrdered, Serializable; // Interceptor that exposes the current MethodInvocation as a thread-local object.\npublic class PerformanceMonitorInterceptor extends AbstractMonitoringInterceptor; // Simple AOP Alliance MethodInterceptor for performance monitoring.\npublic class SimpleAsyncUncaughtExceptionHandler extends Object implements AsyncUncaughtExceptionHandler; // A default AsyncUncaughtExceptionHandler that simply logs the exception.\npublic class SimpleTraceInterceptor extends AbstractTraceInterceptor; // Simple AOP Alliance MethodInterceptor that can be introduced in a chain to display verbose trace information about intercepted method invocations, with method entry and method exit info.\n", "des": "Provides miscellaneous interceptor implementations."}
{"index": 2289, "repo": "spring-boot-3.1.1", "code": "package ansi;\n\npublic final class Ansi8BitColor extends Object implements AnsiElement; // AnsiElement implementation for ANSI 8-bit foreground or background color codes.\npublic enum AnsiBackground extends Enum<AnsiBackground> implements AnsiElement; // Ansi background colors.\npublic enum AnsiColor extends Enum<AnsiColor> implements AnsiElement; // Ansi colors.\npublic interface AnsiElement; // An ANSI encodable element.\npublic abstract class AnsiOutput extends Object; // Generates ANSI encoded output, automatically attempting to detect if the terminal supports ANSI.\npublic static enum AnsiOutput.Enabled extends Enum<AnsiOutput.Enabled>; // Possible values to pass to AnsiOutput.setEnabled(org.springframework.boot.ansi.AnsiOutput.Enabled).\npublic class AnsiPropertySource extends org.springframework.core.env.PropertySource<AnsiElement>; // PropertyResolver for AnsiStyle, AnsiColor, AnsiBackground and Ansi8BitColor elements.\npublic enum AnsiStyle extends Enum<AnsiStyle> implements AnsiElement; // Ansi styles.\n", "des": "Support classes to provide ANSI color output."}
{"index": 1331, "repo": "groovy-all-4.0.13", "code": "package asm;\n\npublic class AssertionWriter extends Object;\npublic class BinaryBooleanExpressionHelper extends BinaryIntExpressionHelper; // Binary write operations specialised for Booleans\npublic class BinaryDoubleExpressionHelper extends BinaryLongExpressionHelper;\npublic class BinaryExpressionHelper extends Object;\npublic class BinaryExpressionMultiTypeDispatcher extends BinaryExpressionHelper; // This class is for internal use only! This class will dispatch to the right type adapters according to the kind of binary expression that is provided.\npublic abstract class BinaryExpressionWriter extends Object; // Base class for writing primitive typed operations\npublic class BinaryFloatExpressionHelper extends BinaryExpressionWriter;\npublic class BinaryIntExpressionHelper extends BinaryExpressionWriter;\npublic class BinaryLongExpressionHelper extends BinaryExpressionWriter;\npublic class BinaryObjectExpressionHelper extends BinaryExpressionWriter;\npublic class BytecodeDumper extends Object implements BytecodeProcessor; // A utility class which can be used in test cases to dump generated bytecode.\npublic class BytecodeHelper extends Object; // A helper class for bytecode generation with AsmClassGenerator.\npublic class BytecodeVariable extends Object; // Represents compile time variable metadata while compiling a method.\npublic class CallSiteWriter extends Object; // This class represents non-public API used by AsmClassGenerator.\npublic class ClosureWriter extends Object;\nprotected static class ClosureWriter.CorrectAccessedVariableVisitor extends CodeVisitorSupport;\nprotected static interface ClosureWriter.UseExistingReference;\npublic class CompileStack extends Object; // Manages different aspects of the code of a code block like handling labels, defining variables, and scopes.\npublic static class CompileStack.BlockRecorder extends Object;\nprotected static class CompileStack.LabelRange extends Object;\npublic class DelegatingController extends WriterController; // This class will delegate all calls to a WriterController given in the constructor.\npublic class ExpressionAsVariableSlot extends BytecodeExpression; // Helper class that takes an Expression and if visited will load it normally, storing the result in a helper variable, which then can be requested after the visit is completed.\npublic class InvocationWriter extends Object;\npublic class LambdaWriter extends ClosureWriter;\npublic class MethodCaller extends Object; // A helper class to invoke methods more easily in ASM\npublic class MethodCallerMultiAdapter extends Object;\npublic class MethodPointerExpressionWriter extends Object; // Generates bytecode for method pointer expressions.\n", "des": "Helper classes for ASMClassGenerator."}
{"index": 2140, "repo": "wicket-core-10.0.0-M1", "code": "package string;\n\npublic class ComponentRenderer extends Object; // A helper class for rendering components and pages.\npublic class ComponentStrings extends Object;\npublic final class CssUtils extends Object; // Utility methods for CSS.\npublic class JavaScriptStripper extends Object; // Strips comments and whitespace from javascript\npublic class JavaScriptUtils extends Object; // Provide some helpers to write javascript related tags to the response object.\n", "des": "String utilities."}
{"index": 3795, "repo": "lucene-analysis-common-9.7.0", "code": "package in;\n\nClass IndicNormalizationFilter; // A TokenFilter that applies IndicNormalizer to normalize text in Indian Languages.\nClass IndicNormalizationFilterFactory; // Factory for IndicNormalizationFilter.\nClass IndicNormalizer; // Normalizes the Unicode representation of text in Indian languages.\n", "des": "Analyzer for Indian languages."}
{"index": 722, "repo": "commons-codec-1.16.0", "code": "package language;\n\npackage language.bm; // Implementation details of the Beider-Morse codec.\nClass AbstractCaverphone; // Encodes a string into a Caverphone value.\nClass Caverphone; // 1.5 Replaced by Caverphone2, will be removed in 2.0.\nClass Caverphone1; // Encodes a string into a Caverphone 1.0 value.\nClass Caverphone2; // Encodes a string into a Caverphone 2.0 value.\nClass ColognePhonetic; // Encodes a string into a Cologne Phonetic value.\nClass DaitchMokotoffSoundex; // Encodes a string into a Daitch-Mokotoff Soundex value.\nClass DoubleMetaphone; // Encodes a string into a double metaphone value.\nClass MatchRatingApproachEncoder; // Match Rating Approach Phonetic Algorithm Developed by Western Airlines in 1977.\nClass Metaphone; // Encodes a string into a Metaphone value.\nClass Nysiis; // Encodes a string into a NYSIIS value.\nClass RefinedSoundex; // Encodes a string into a Refined Soundex value.\nClass Soundex; // Encodes a string into a Soundex value.\n", "des": "Language and phonetic encoders."}
{"index": 616, "repo": "org.apache.karaf.main-2.4.4", "code": "package url;\n\nInterface URLConstants; // Defines standard names for property keys associated with URLStreamHandlerService and java.net.ContentHandler services.\nInterface URLStreamHandlerService; // Service interface with public versions of the protected java.net.URLStreamHandler methods.\nInterface URLStreamHandlerSetter; // Interface used by URLStreamHandlerService objects to call the setURL method on the proxy URLStreamHandler object.\nClass AbstractURLStreamHandlerService; // Abstract implementation of the URLStreamHandlerService interface.\n", "des": "URL Stream and Content Handlers Package Version 1.0."}
{"index": 468, "repo": "jackson-core-2.15.2", "code": "package json;\n\npackage json.async; // Non-blocking (\"async\") JSON parser implementation.\nClass ByteSourceJsonBootstrapper; // This class is used to determine the encoding of byte stream that is to contain JSON content.\nClass DupDetector; // Helper class used if JsonParser.Feature.STRICT_DUPLICATE_DETECTION is enabled.\nClass JsonGeneratorImpl; // Intermediate base class shared by JSON-backed generators like UTF8JsonGenerator and WriterBasedJsonGenerator.\nClass JsonReadContext; // Extension of JsonStreamContext, which implements core methods needed, and also exposes more complete API to parser implementation classes.\nClass JsonWriteContext; // Extension of JsonStreamContext, which implements core methods needed, and also exposes more complete API to generator implementation classes.\nClass PackageVersion; // Automatically generated from PackageVersion.java.in during packageVersion-generate execution of maven-replacer-plugin in pom.xml.\nClass ReaderBasedJsonParser; // This is a concrete implementation of JsonParser, which is based on a Reader to handle low-level character conversion tasks.\nClass UTF8DataInputJsonParser; // This is a concrete implementation of JsonParser, which is based on a DataInput as the input source.\nClass UTF8JsonGenerator;\nClass UTF8StreamJsonParser; // This is a concrete implementation of JsonParser, which is based on a InputStream as the input source.\nClass WriterBasedJsonGenerator; // JsonGenerator that outputs JSON content using a Writer which handles character encoding.\nEnum JsonReadFeature; // Token reader (parser) features specific to JSON backend.\nEnum JsonWriteFeature; // Token writer features specific to JSON backend.\n", "des": "JSON-specific parser and generator implementation classes that Jackson defines and uses."}
{"index": 3718, "repo": "solr-core-9.3.0", "code": "package circuitbreaker;\n\nClass CircuitBreaker; // Default class to define circuit breakers for Solr.\nClass CircuitBreaker.CircuitBreakerConfig;\nClass CircuitBreakerManager; // Manages all registered circuit breaker instances.\nClass CPUCircuitBreaker; // Tracks current CPU usage and triggers if the specified threshold is breached.\nClass MemoryCircuitBreaker; // Tracks the current JVM heap usage and triggers if it exceeds the defined percentage of the maximum heap size allocated to the JVM.\n", "des": "Support for triggering exceptions on excessive resource usage"}
{"index": 3386, "repo": "commons-imaging-1.0-alpha3", "code": "package common;\n\npackage common.bytesource; // Encapsulates sources from which data may be read.\npackage common.itu_t4; // Provides ITU-T T.4 and T.6 compression classes.\npackage common.mylzw; // Provides LZW compression.\nInterface BufferedImageFactory;\nInterface ImageMetadata;\nInterface ImageMetadata.ImageMetadataItem;\nInterface XmpEmbeddable; // Implementations support embedding the Extensible Metadata Platform tags.\nClass BasicCParser; // A rudimentary preprocessor and parser for the C programming language.\nClass BinaryConstant;\nClass BinaryFileParser;\nClass BinaryFunctions; // Convenience methods for various binary and I/O operations.\nClass BinaryOutputStream;\nClass ByteConversions; // Convenience methods for converting data types to and from byte arrays.\nClass GenericImageMetadata;\nClass GenericImageMetadata.GenericImageMetadataItem;\nClass ImageBuilder; // A utility class primary intended for storing data obtained by reading image files.\nClass PackBits;\nClass RationalNumber; // Rational number, as used by the TIFF image format.\nClass RgbBufferedImageFactory;\nClass SimpleBufferedImageFactory;\nClass XmpImagingParameters; // Parameters for formats that support Xmp.\nClass ZlibDeflate; // Utility class to compress/decompress bytes using the ZLIB deflate/inflate compression.\n", "des": "Provides utility classes that are employed across multiple image formats and sub-packages."}
{"index": 3702, "repo": "solr-core-9.3.0", "code": "package mlt;\n\nClass CloudMLTQParser;\nClass MLTContentQParserPlugin;\nClass MLTQParserPlugin; // Usage: {!mlt qf=queryField1,queryField2}uniqueId\nClass SimpleMLTQParser;\n", "des": "APIs and classes for implementing MoreLikeThis (mlt) QueryParser."}
{"index": 1687, "repo": "spring-integration-mqtt-6.1.2", "code": "package support;\n\npublic class DefaultPahoMessageConverter extends Object implements MqttMessageConverter, org.springframework.beans.factory.BeanFactoryAware; // Default implementation for mapping to/from Messages.\npublic final class MqttHeaderAccessor extends Object; // Helper for typed access to incoming MQTT message headers.\npublic class MqttHeaderMapper extends Object implements org.springframework.integration.mapping.HeaderMapper<org.eclipse.paho.mqttv5.common.packet.MqttProperties>; // The default HeaderMapper implementation for MQTT v5 message properties mapping.\npublic final class MqttHeaders extends Object; // Spring Integration headers.\npublic interface MqttMessageConverter extends org.springframework.messaging.converter.MessageConverter; // Extension of MessageConverter allowing the topic to be added as a header.\npublic final class MqttUtils extends Object; // MQTT Utilities.\n", "des": "Provides various support classes used across Spring Integration MqttAdapter Components."}
{"index": 3900, "repo": "solr-solrj-9.3.0", "code": "package cloud;\n\nInterface CollectionStatePredicate; // Interface to determine if a set of liveNodes and a collection's state matches some expecatations.\nInterface DocCollection.CollectionStateProps; // JSON properties related to a collection's state.\nInterface DocCollection.PrsSupplier;\nInterface NodesSysProps; // Fetch a node's system properties.\nInterface Replica.ReplicaStateProps; // JSON properties related to a replica's state.\nInterface Slice.SliceStateProps; // JSON properties related to a slice's state.\nInterface SolrClassLoader; // A generic interface to load plugin classes\nClass Aliases; // Holds collection aliases -- virtual collections that point to one or more other collections.\nClass ClusterState; // Immutable state of the cloud.\nClass ClusterState.CollectionRef;\nClass CompositeIdRouter; // CompositeIdRouter partitions ids based on a CompositeIdRouter.SEPARATOR, hashes each partition and merges the hashes together to map the id to a slice.\nClass CompositeIdRouter.KeyParser; // Helper class to calculate parts, masks etc for an id.\nClass DocCollection; // Models a Collection in zookeeper (but that Java name is obviously taken, hence \"DocCollection\")\nClass DocRouter; // Class to partition int range into n ranges.\nClass DocRouter.Range;\nClass HashBasedRouter;\nClass ImplicitDocRouter; // This document router is for custom sharding\nClass PerReplicaStates; // This represents the individual replica states in a collection This is an immutable object.\nClass PerReplicaStates.Operation;\nClass PerReplicaStates.State; // The state of a replica as stored as a node under /collections/collection-name/state.json/replica-state\nClass PlainIdRouter;\nClass Replica;\nClass ReplicaPosition;\nClass RoutingRule; // Used for routing docs with particular keys into another collection\nClass Slice; // A Slice contains immutable information about a logical shard (all replicas that share the same shard id).\nClass ZkCoreNodeProps;\nClass ZkNodeProps; // ZkNodeProps contains generic immutable properties.\nEnum PerReplicaStates.Operation.Type;\nEnum Replica.State; // The replica's state.\nEnum Replica.Type;\nEnum Slice.State; // The slice's state.\n", "des": "Common Solr Cloud and ZooKeeper related classes reused on both clients & server."}
{"index": 2812, "repo": "spring-integration-ip-6.1.2", "code": "package tcp;\n\npackage tcp.connection; // All things related to tcp connections - client and server factories; listener and sender interfaces.\npackage tcp.serializer; // Byte array (de)serializers for putting some protocol on the wire so that incoming messages can be constructed from stream data.\npublic class TcpInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport implements TcpListener, TcpSender, ClientModeCapable, org.springframework.integration.context.OrderlyShutdownCapable; // Inbound Gateway using a server connection factory - threading is controlled by the factory.\npublic class TcpOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements TcpSender, TcpListener, org.springframework.integration.support.management.ManageableLifecycle; // TCP outbound gateway that uses a client connection factory.\npublic class TcpReceivingChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport implements TcpListener, ClientModeCapable, org.springframework.integration.context.OrderlyShutdownCapable; // Tcp inbound channel adapter using a TcpConnection to receive data - if the connection factory is a server factory, this Listener owns the connections.\npublic class TcpSendingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler implements TcpSender, org.springframework.integration.support.management.ManageableLifecycle, ClientModeCapable; // Tcp outbound channel adapter using a TcpConnection to send data - if the connection factory is a server factory, the TcpListener owns the connections.\n", "des": "Base package for TCP Support."}
{"index": 3132, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface ConnectionObserver; // An observer of logical connection events.\nInterface InvalidatableWrapper<T>; // Specialized JdbcWrapper contract for wrapped objects that can additioanlly be invalidated\nInterface JdbcCoordinator; // Coordinates JDBC-related activities.\nInterface JdbcServices; // Contract for services around JDBC operations.\nInterface JdbcWrapper<T>; // Generic contract for wrapped JDBC objects.\nInterface NonDurableConnectionObserver; // Additional optional contract for connection observers to indicate that they should be released when the physical connection is released.\nInterface ResultSetReturn; // Contract for extracting ResultSets from Statements, executing Statements, managing Statement/ResultSet resources, and logging statement calls.\nInterface ResultSetWrapper;\nInterface SchemaNameResolver; // Contract for resolving the schema of a Connection.\nInterface SqlExceptionHelper.WarningHandler; // Contract for handling warnings\nInterface StatementPreparer; // Contracting for preparing SQL statements\nClass ConnectionObserverAdapter; // A no-op adapter for ConnectionObserver.\nClass SqlExceptionHelper; // Helper for handling SQLExceptions in various manners.\nClass SqlExceptionHelper.StandardWarningHandler; // Standard SQLWarning handler for logging warnings\nClass SqlExceptionHelper.WarningHandlerLoggingSupport; // Basic support for SqlExceptionHelper.WarningHandler implementations which handle warnings\nClass SqlStatementLogger; // Centralize logging for SQL statements.\nClass TypeInfo; // Models type info extracted from DatabaseMetaData.getTypeInfo()\nEnum TypeNullability; // Describes the instrinsic nullability of a data type as reported by the JDBC driver.\nEnum TypeSearchability; // Describes the searchability of a data type as reported by the JDBC driver.\n", "des": "SPI contracts for supporting various aspects of JDBC interaction"}
{"index": 794, "repo": "lucene-analyzers-common-8.11.2", "code": "package nl;\n\nClass DutchAnalyzer; // Analyzer for Dutch language.\n", "des": "Analyzer for Dutch."}
{"index": 2418, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package cloudfoundry;\n\npackage cloudfoundry.reactive; // Auto-configuration for actuator Cloud Foundry concerns using WebFlux.\npackage cloudfoundry.servlet; // Auto-configuration for actuator Cloud Foundry concerns using Spring MVC.\npublic enum AccessLevel extends Enum<AccessLevel>; // The specific access level granted to the cloud foundry user that's calling the endpoints.\npublic class CloudFoundryAuthorizationException extends RuntimeException; // Authorization exceptions thrown to limit access to the endpoints.\npublic static enum CloudFoundryAuthorizationException.Reason extends Enum<CloudFoundryAuthorizationException.Reason>; // Reasons why the exception can be thrown.\n@ImportRuntimeHints(org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer.CloudFoundryWebEndpointDiscovererRuntimeHints.class) public class CloudFoundryWebEndpointDiscoverer extends org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointDiscoverer; // WebEndpointDiscoverer for Cloud Foundry that uses Cloud Foundry specific extensions for the HealthEndpoint.\n@Target(TYPE) @Retention(RUNTIME) @Documented @EndpointExtension(filter=org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryEndpointFilter.class) public @interface EndpointCloudFoundryExtension; // Identifies a type as being a Cloud Foundry specific extension for an @Endpoint.\npublic class SecurityResponse extends Object; // Response from the Cloud Foundry security interceptors.\npublic class Token extends Object; // The JSON web token provided with each request that originates from Cloud Foundry.\n", "des": "Auto-configuration for actuator Cloud Foundry concerns."}
{"index": 2820, "repo": "spring-orm-6.0.11", "code": "package jpa;\n\npackage jpa.persistenceunit; // Internal support for managing JPA persistence units.\npackage jpa.support; // Classes supporting the org.springframework.orm.jpa package.\npackage jpa.vendor; // Support classes for adapting to specific JPA vendors.\npublic abstract class AbstractEntityManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<EntityManagerFactory>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, EntityManagerFactoryInfo, org.springframework.dao.support.PersistenceExceptionTranslator, Serializable; // Abstract FactoryBean that creates a local JPA EntityManagerFactory instance within a Spring application context.\npublic class DefaultJpaDialect extends Object implements JpaDialect, Serializable; // Default implementation of the JpaDialect interface.\npublic abstract class EntityManagerFactoryAccessor extends Object implements org.springframework.beans.factory.BeanFactoryAware; // Base class for any class that needs to access a JPA EntityManagerFactory, usually in order to obtain a JPA EntityManager.\npublic interface EntityManagerFactoryInfo; // Metadata interface for a Spring-managed JPA EntityManagerFactory.\npublic abstract class EntityManagerFactoryUtils extends Object; // Helper class featuring methods for JPA EntityManager handling, allowing for reuse of EntityManager instances within transactions.\npublic class EntityManagerHolder extends org.springframework.transaction.support.ResourceHolderSupport; // Resource holder wrapping a JPA EntityManager.\npublic interface EntityManagerProxy extends EntityManager; // Subinterface of EntityManager to be implemented by EntityManager proxies.\npublic abstract class ExtendedEntityManagerCreator extends Object; // Delegate for creating a variety of EntityManager proxies that follow the JPA spec's semantics for \"extended\" EntityManagers.\npublic interface JpaDialect extends org.springframework.dao.support.PersistenceExceptionTranslator; // SPI strategy that encapsulates certain functionality that standard JPA 3.0 does not offer, such as access to the underlying JDBC Connection.\npublic class JpaObjectRetrievalFailureException extends ObjectRetrievalFailureException; // JPA-specific subclass of ObjectRetrievalFailureException.\n", "des": "Package providing integration of JPA (Java Persistence API) with Spring concepts."}
{"index": 1875, "repo": "shiro-core-2.0.0-alpha-2", "code": "package authz;\n\npackage authz.annotation; // Annotations used to restrict which classes, instances, or methods may be accessed or invoked depending on the caller's access abilities or authentication state.\npackage authz.aop; // Contains AOP implementation support classes specifically used for authorization operations, particularly supporting AOP Method Interceptors and JSR-175 metadata Annotations.\npackage authz.permission; // Support and default implementations for Shiro's Permission interface.\npublic class AuthorizationException extends org.apache.shiro.lang.ShiroException; // Exception thrown if there is a problem during authorization (access control check).\npublic interface AuthorizationInfo extends Serializable; // AuthorizationInfo represents a single Subject's stored authorization data (roles, permissions, etc.) used during authorization (access control) checks only.\npublic interface Authorizer; // An Authorizer performs authorization (access control) operations for any given Subject (aka 'application user').\npublic class HostUnauthorizedException extends UnauthorizedException; // Thrown when a particular client (that is, host address) has not been enabled to access the system or if the client has been enabled access but is not permitted to perform a particular operation or access a particular resource.\npublic class ModularRealmAuthorizer extends Object implements Authorizer, PermissionResolverAware, RolePermissionResolverAware; // A ModularRealmAuthorizer is an Authorizer implementation that consults one or more configured Realms during an authorization operation.\npublic interface Permission; // A Permission represents the ability to perform an action or access a resource.\npublic class SimpleAuthorizationInfo extends Object implements AuthorizationInfo; // Simple POJO implementation of the AuthorizationInfo interface that stores roles and permissions as internal attributes.\npublic class SimpleRole extends Object implements Serializable; // A simple representation of a security role that has a name and a collection of permissions.\npublic class UnauthenticatedException extends AuthorizationException; // Exception thrown when attempting to execute an authorization action when a successful authentication hasn't yet occurred.\npublic class UnauthorizedException extends AuthorizationException; // Thrown to indicate a requested operation or access to a requested resource is not allowed.\n", "des": "Core interfaces and exceptions supporting Authorization (access control)."}
{"index": 274, "repo": "nutch-2.4", "code": "package nutch;\n\nClass CCIndexingFilter; // Adds basic searchable fields to a document.\nClass CCParseFilter; // Adds metadata identifying the Creative Commons license used, if any.\nClass CCParseFilter.Walker; // Walks DOM tree, looking for RDF in comments and licenses in anchors.\n", "des": "Sample plugins that parse and index Creative Commons medadata."}
{"index": 3355, "repo": "opencms-core-15.0", "code": "package components;\n\nInterface I_CmsGwtDialogClientRpc; // Server-to-client Interface for the GWT dialog extension.\nInterface I_CmsGwtDialogServerRpc; // Client-to-server rpc interface for the GWT dialog extension.\nClass CmsAutoGrowingTextAreaState; // The scroll position CSS shared state.\nClass CmsBreadCrumbState; // The bread crumb state.\nClass CmsCopyToClipboardState; // The copy to clip-board/select text button shared state.\nClass CmsExternalLayoutState; // The external layout state.\nClass CmsGwtContextMenuButtonState; // Context menu button widget state.\nClass CmsHistoryState; // The history state.\nClass CmsMaxHeightState; // The max height shared state.\nClass CmsPasswordFieldState; // Widget state for the special password field used by the login dialog.\nClass CmsReportWidgetState; // Report widget state.\nClass CmsScrollPositionCssState; // The scroll position CSS shared state.\nClass CmsUploadAreaState; // The upload button state.\nClass CmsUploadState; // The upload button state.\nEnum CmsUploadState.UploadType; // The upload types.\n", "des": "Contains Vaadin component state classes and other RPC classes."}
{"index": 263, "repo": "nutch-2.4", "code": "package metatags;\n\nClass MetaTagsParser; // Parse HTML meta tags (keywords, description) and store them in the parse metadata so that they can be indexed with the index-metadata plugin with the prefix 'metatag.'.\n", "des": "Parse filter to extract meta tags: keywords, description, etc."}
{"index": 3890, "repo": "solr-solrj-9.3.0", "code": "package json;\n\nClass DirectJsonQueryRequest; // Represents a query using the JSON Query DSL\nClass DomainMap;\nClass HeatmapFacetMap; // Represents a \"heatmap\" facet in a JSON request query.\nClass JsonFacetMap<B extends JsonFacetMap<B>>; // A common parent for a small set of classes that allow easier composition of JSON facet objects.\nClass JsonQueryRequest; // Represents a query using the JSON Query DSL\nClass QueryFacetMap; // Represents a \"query\" facet in a JSON query request.\nClass RangeFacetMap; // Represents a \"range\" facet in a JSON request query.\nClass TermsFacetMap; // Represents a \"terms\" facet in a JSON query request.\nEnum HeatmapFacetMap.HeatmapFormat;\nEnum RangeFacetMap.OtherBuckets;\nEnum TermsFacetMap.FacetMethod;\n", "des": "Allows sending of requests using Solr's JSON query/faceting API"}
{"index": 3482, "repo": "dagger-producers-2.47", "code": "package monitoring;\n\nInterface ProductionComponentTimingRecorder; // A hook for recording timing of the execution of production components.\nInterface ProductionComponentTimingRecorder.Factory;\nClass ProducerMonitor; // A hook for monitoring the execution of individual producer methods.\nClass ProducerTimingRecorder; // A hook for recording the timing of the execution of individual producer methods.\nClass ProducerToken; // A token that represents an individual producer method.\nClass ProductionComponentMonitor; // A hook for monitoring execution of production components.\nClass ProductionComponentMonitor.Factory;\nClass TimingProductionComponentMonitor; // A monitor that measures the timing of the execution of a production component, and logs those timings with the given recorder.\nClass TimingProductionComponentMonitor.Factory;\nClass TimingRecorders; // Utility methods relating to timing.\n", "des": "This package provides hooks for monitoring producers."}
{"index": 1487, "repo": "tribuo-core-4.3.1", "code": "package impl;\n\npublic final class EmptyDatasetProvenance extends DatasetProvenance; // An empty DatasetProvenance, should not be used except by the provenance removal system.\npublic final class EmptyDataSourceProvenance extends Object implements DataSourceProvenance; // An empty DataSourceProvenance, should not be used except by the provenance removal system.\npublic final class EmptyTrainerProvenance extends Object implements TrainerProvenance; // An empty TrainerProvenance, should not be used except by the provenance removal system.\npublic final class FeatureSelectorProvenanceImpl extends com.oracle.labs.mlrg.olcut.provenance.impl.SkeletalConfiguredObjectProvenance implements FeatureSelectorProvenance; // An implementation of FeatureSelectorProvenance which delegates everything to SkeletalConfiguredObjectProvenance.\npublic final class TimestampedTrainerProvenance extends Object implements TrainerProvenance; // A TrainerProvenance with a timestamp, used when there was no trainer involved in model construction (e.g., creating an EnsembleModel from existing models).\npublic final class TrainerProvenanceImpl extends SkeletalTrainerProvenance; // An implementation of TrainerProvenance that delegates everything to SkeletalTrainerProvenance.\n", "des": "Provides internal implementations for empty provenance classes and TrainerProvenance."}
{"index": 638, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package policies;\n\npackage policies.amrmproxy; // AMRMPRoxy policies.\npackage policies.dao; // DAO objects for serializing/deserializing policy configurations.\npackage policies.exceptions; // Exceptions for policies.\npackage policies.manager; // Various implementation of FederationPolicyManager.\npackage policies.router; // Router policies.\nInterface ConfigurableFederationPolicy; // This interface provides a general method to reinitialize a policy.\nClass AbstractConfigurableFederationPolicy; // Base abstract class for a weighted ConfigurableFederationPolicy.\nClass FederationPolicyInitializationContext; // Context to (re)initialize a FederationAMRMProxyPolicy and FederationRouterPolicy.\nClass FederationPolicyInitializationContextValidator; // Helper class used to factor out common validation steps for policies.\nClass FederationPolicyUtils; // Utility class for Federation policy.\nClass RouterPolicyFacade; // This class provides a facade to the policy subsystem, and handles the lifecycle of policies (e.g., refresh from remote, default behaviors etc.).\n", "des": "Federation Policies."}
{"index": 1274, "repo": "spring-core-6.0.11", "code": "package env;\n\npublic abstract class AbstractEnvironment extends Object implements ConfigurableEnvironment; // Abstract base class for Environment implementations.\npublic abstract class AbstractPropertyResolver extends Object implements ConfigurablePropertyResolver; // Abstract base class for resolving properties against any underlying source.\npublic abstract class CommandLinePropertySource<T> extends EnumerablePropertySource<T>; // Abstract base class for PropertySource implementations backed by command line arguments.\npublic class CompositePropertySource extends EnumerablePropertySource<Object>; // Composite PropertySource implementation that iterates over a set of PropertySource instances.\npublic interface ConfigurableEnvironment extends Environment, ConfigurablePropertyResolver; // Configuration interface to be implemented by most if not all Environment types.\npublic interface ConfigurablePropertyResolver extends PropertyResolver; // Configuration interface to be implemented by most if not all PropertyResolver types.\npublic abstract class EnumerablePropertySource<T> extends PropertySource<T>; // A PropertySource implementation capable of interrogating its underlying source object to enumerate all possible property name/value pairs.\npublic interface Environment extends PropertyResolver; // Interface representing the environment in which the current application is running.\npublic interface EnvironmentCapable; // Interface indicating a component that contains and exposes an Environment reference.\npublic class JOptCommandLinePropertySource extends CommandLinePropertySource<joptsimple.OptionSet>; // CommandLinePropertySource implementation backed by a JOpt OptionSet.\npublic class MapPropertySource extends EnumerablePropertySource<Map<String,Object>>; // PropertySource that reads keys and values from a Map object.\npublic class MissingRequiredPropertiesException extends IllegalStateException; // Exception thrown when required properties are not found.\npublic class MutablePropertySources extends Object implements PropertySources; // The default implementation of the PropertySources interface.\n@FunctionalInterface public interface Profiles; // Profile predicate that may be accepted by an Environment.\npublic class PropertiesPropertySource extends MapPropertySource; // PropertySource implementation that extracts properties from a Properties object.\npublic interface PropertyResolver; // Interface for resolving properties against any underlying source.\npublic abstract class PropertySource<T> extends Object; // Abstract base class representing a source of name/value property pairs.\npublic static class PropertySource.StubPropertySource extends PropertySource<Object>; // PropertySource to be used as a placeholder in cases where an actual property source cannot be eagerly initialized at application context creation time.\n", "des": "Spring's environment abstraction consisting of bean definition profile and hierarchical property source support."}
{"index": 1465, "repo": "spring-data-redis-3.1.2", "code": "package support;\n\npublic class QueryByExampleRedisExecutor<T> extends Object implements QueryByExampleExecutor<T>, BeanFactoryAware, BeanClassLoaderAware; // Repository fragment implementing Redis Query-by-Example operations.\npublic class RedisRepositoryFactory extends org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactory; // RepositoryFactorySupport specific of handing Redis KeyValueRepository.\npublic class RedisRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactoryBean<T,S,ID>; // Adapter for Springs FactoryBean interface to allow easy setup of RedisRepositoryFactory via Spring configuration.\n", "des": "Spring context specific factory support."}
{"index": 2777, "repo": "spring-jms-6.0.11", "code": "package converter;\n\npublic class MappingJackson2MessageConverter extends Object implements SmartMessageConverter, org.springframework.beans.factory.BeanClassLoaderAware; // Message converter that uses Jackson 2.x to convert messages to and from JSON.\npublic class MarshallingMessageConverter extends Object implements MessageConverter, org.springframework.beans.factory.InitializingBean; // Spring JMS MessageConverter that uses a Marshaller and Unmarshaller.\npublic class MessageConversionException extends JmsException; // Thrown by MessageConverter implementations when the conversion of an object to/from a Message fails.\npublic interface MessageConverter; // Strategy interface that specifies a converter between Java objects and JMS messages.\npublic enum MessageType extends Enum<MessageType>; // Constants that indicate a target message type to convert to: a TextMessage, a BytesMessage, a MapMessage or an ObjectMessage.\npublic class MessagingMessageConverter extends Object implements MessageConverter, org.springframework.beans.factory.InitializingBean; // Convert a Message from the messaging abstraction to and from a Message using an underlying MessageConverter for the payload and a JmsHeaderMapper to map the JMS headers to and from standard message headers.\npublic class SimpleMessageConverter extends Object implements MessageConverter; // A simple message converter which is able to handle TextMessages, BytesMessages, MapMessages, and ObjectMessages.\npublic interface SmartMessageConverter extends MessageConverter; // An extended MessageConverter SPI with conversion hint support.\n", "des": "Provides a MessageConverter abstraction to convert between Java objects and JMS messages."}
{"index": 1746, "repo": "spring-data-mongodb-4.1.2", "code": "package mongodb;\n\npackage mongodb.config; // Spring XML namespace configuration for MongoDB specific repositories.\npackage mongodb.core; // MongoDB core support.\npackage mongodb.gridfs; // Support for MongoDB GridFS feature.\npackage mongodb.monitor; // MongoDB specific JMX monitoring support.\npackage mongodb.observability; // Infrastructure to provide driver observability using Micrometer.\npackage mongodb.repository; // MongoDB specific repository implementation.\npackage mongodb.util; // MongoDB driver-specific utility classes for Bson and DBObject interaction.\npublic class BindableMongoExpression extends Object implements MongoExpression; // A MongoExpression using the ParameterBindingDocumentCodec for parsing a raw (json) expression.\npublic class BulkOperationException extends DataAccessException; // Is thrown when errors occur during bulk operations.\npublic class ClientSessionException extends NonTransientDataAccessException; // NonTransientDataAccessException specific to MongoDB ClientSession related data access failures such as reading data using an already closed session.\n@FunctionalInterface public interface CodecRegistryProvider; // Provider interface to obtain CodecRegistry from the underlying MongoDB Java driver.\npublic class InvalidMongoDbApiUsageException extends InvalidDataAccessApiUsageException;\npublic class LazyLoadingException extends UncategorizedDataAccessException;\npublic abstract class MongoCollectionUtils extends Object; // Helper class featuring helper methods for working with MongoDb collections.\npublic interface MongoDatabaseFactory extends CodecRegistryProvider, MongoSessionProvider; // Interface for factories creating MongoDatabase instances.\npublic class MongoDatabaseUtils extends Object; // Helper class for managing a MongoDatabase instances via MongoDatabaseFactory.\n@FunctionalInterface public interface MongoExpression; // Wrapper object for MongoDB expressions like $toUpper : $name that manifest as Document when passed on to the driver.\npublic final class MongoManagedTypes extends Object implements ManagedTypes;\n@FunctionalInterface public interface MongoSessionProvider; // A simple interface for obtaining a ClientSession to be consumed by MongoOperations and MongoDB native operations that support causal consistency and transactions.\npublic class MongoTransactionException extends ClientSessionException; // A specific ClientSessionException related to issues with a transaction such as aborted or non existing transactions.\npublic class MongoTransactionManager extends AbstractPlatformTransactionManager implements ResourceTransactionManager, InitializingBean; // A PlatformTransactionManager implementation that manages ClientSession based transactions for a single MongoDatabaseFactory.\n", "des": "Spring Data's MongoDB abstraction."}
{"index": 3129, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface ConnectionProvider; // A contract for obtaining JDBC connections.\nInterface JdbcConnectionAccess; // Provides centralized access to JDBC connections.\nInterface MultiTenantConnectionProvider; // A specialized Connection provider contract used when the application is using multi-tenancy support requiring tenant aware connections.\nClass AbstractDataSourceBasedMultiTenantConnectionProviderImpl; // Basic support for implementations of MultiTenantConnectionProvider based on DataSources.\nClass AbstractMultiTenantConnectionProvider; // Basic support for MultiTenantConnectionProvider implementations using individual ConnectionProvider instances per tenant behind the scenes.\nClass DataSourceBasedMultiTenantConnectionProviderImpl; // A concrete implementation of the MultiTenantConnectionProvider contract bases on a number of reasonable assumptions.\n", "des": "Defines contracts for accessing JDBC Connections"}
{"index": 702, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package config;\n\nClass DslIntegrationConfigurationInitializer; // The Java DSL Integration infrastructure beanFactory initializer.\nClass IntegrationFlowBeanPostProcessor; // A BeanPostProcessor to parse IntegrationFlow beans and register their components as beans in the provided BeanFactory, if necessary.\n", "des": "Provides config classes of the Spring Integration Java DSL."}
{"index": 777, "repo": "lucene-analyzers-common-8.11.2", "code": "package fa;\n\nClass PersianAnalyzer; // Analyzer for Persian.\nClass PersianCharFilter; // CharFilter that replaces instances of Zero-width non-joiner with an ordinary space.\nClass PersianCharFilterFactory; // Factory for PersianCharFilter.\nClass PersianNormalizationFilter; // A TokenFilter that applies PersianNormalizer to normalize the orthography.\nClass PersianNormalizationFilterFactory; // Factory for PersianNormalizationFilter.\nClass PersianNormalizer; // Normalizer for Persian.\n", "des": "Analyzer for Persian."}
{"index": 3711, "repo": "solr-core-9.3.0", "code": "package fst;\n\nClass AnalyzingInfixLookupFactory; // Factory for AnalyzingInfixSuggester\nClass AnalyzingLookupFactory; // Factory for AnalyzingSuggester\nClass BlendedInfixLookupFactory; // Factory for BlendedInfixLookupFactory\nClass FreeTextLookupFactory; // LookupFactory implementation for FreeTextSuggester\nClass FSTLookupFactory; // Factory for FSTCompletionLookup\nClass FuzzyLookupFactory; // Factory for FuzzySuggester\nClass WFSTLookupFactory; // Factory for WFSTCompletionLookup\n", "des": "Factories for FST and Analyzing based Suggesters"}
{"index": 1745, "repo": "spring-batch-integration-5.0.2", "code": "package step;\n\n@Deprecated(since=\"5.0\", forRemoval=true) public class DelegateStep extends AbstractStep;\n", "des": "Support classes related to steps when used with Spring Integration."}
{"index": 255, "repo": "nutch-2.4", "code": "package pass;\n\nClass PassURLNormalizer; // This URLNormalizer doesn't change urls.\n", "des": "URL normalizer dummy which does not change URLs."}
{"index": 3220, "repo": "commons-configuration2-2.9.0", "code": "package interpol;\n\nInterface Lookup; // Definition of an interface for looking up variables during interpolation.\nClass ConfigurationInterpolator; // A class that handles interpolation (variable substitution) for configuration objects.\nClass ConstantLookup; // Looks up constant fields in classes.\nClass EnvironmentLookup;\nClass ExprLookup; // Lookup that allows expressions to be evaluated.\nClass ExprLookup.Variable; // The key and corresponding object that will be made available to the JexlContext for use in expressions.\nClass ExprLookup.Variables; // List wrapper used to allow the Variables list to be created as beans in DefaultConfigurationBuilder.\nClass InterpolatorSpecification; // A simple value class defining a ConfigurationInterpolator.\nClass InterpolatorSpecification.Builder; // A builder class for creating instances of InterpolatorSpecification.\nClass SystemPropertiesLookup;\nEnum DefaultLookups; // An enumeration class defining constants for built-in Lookup objects available for Configuration instances.\nEnum DummyLookup; // A simple dummy Lookup implementation.\n", "des": "A package with helper classes used for interpolation (variable substitution)."}
{"index": 786, "repo": "lucene-analyzers-common-8.11.2", "code": "package id;\n\nClass IndonesianAnalyzer; // Analyzer for Indonesian (Bahasa)\nClass IndonesianStemFilter; // A TokenFilter that applies IndonesianStemmer to stem Indonesian words.\nClass IndonesianStemFilterFactory; // Factory for IndonesianStemFilter.\nClass IndonesianStemmer; // Stemmer for Indonesian.\n", "des": "Analyzer for Indonesian."}
{"index": 1820, "repo": "pulsar-client-original-3.0.0", "code": "package impl;\n\npackage impl.auth; // Pulsar Client authentication.\npackage impl.customroute; // Pulsar Client customized routing mode.\npackage impl.schema; // Pulsar Client schema.\npackage impl.transaction; // Transaction client implementation.\npublic abstract class AbstractBatchMessageContainer extends Object implements BatchMessageContainerBase; // Batch message container framework.\npublic interface AcknowledgmentsGroupingTracker extends AutoCloseable; // Acknowledgments grouping tracker.\npublic class AuthenticationUtil extends Object;\npublic class AutoClusterFailover extends Object implements ServiceUrlProvider;\npublic static class AutoClusterFailover.AutoClusterFailoverBuilderImpl extends Object implements AutoClusterFailoverBuilder;\npublic class Backoff extends Object;\npublic class BackoffBuilder extends Object;\npublic interface BatchMessageContainerBase extends BatchMessageContainer;\npublic class BatchMessageIdImpl extends MessageIdImpl;\npublic class BinaryProtoLookupService extends Object implements LookupService;\npublic static class BinaryProtoLookupService.LookupDataResult extends Object;\npublic class ChunkMessageIdImpl extends MessageIdImpl;\npublic class ClientBuilderImpl extends Object implements ClientBuilder;\npublic class ClientCnx extends PulsarHandler; // Channel handler for the Pulsar client.\nprotected static enum ClientCnx.State extends Enum<ClientCnx.State>;\npublic class ClientCnxIdleState extends Object;\npublic static enum ClientCnxIdleState.State extends Enum<ClientCnxIdleState.State>; // Indicates the usage status of the connection and whether it has been released.\npublic class ConnectionHandler extends Object;\npublic class ConnectionPool extends Object implements AutoCloseable;\npublic abstract class ConsumerBase<T> extends Object implements Consumer<T>;\nprotected static final class ConsumerBase.OpBatchReceive<T> extends Object;\npublic class ConsumerBuilderImpl<T> extends Object implements ConsumerBuilder<T>;\npublic class ConsumerId extends Object implements Comparable<ConsumerId>;\npublic class ConsumerImpl<T> extends ConsumerBase<T>;\npublic class ConsumerInterceptors<T> extends Object implements Closeable; // A container that hold the list ConsumerInterceptor and wraps calls to the chain of custom interceptors.\npublic class ConsumerStatsDisabled extends Object implements ConsumerStatsRecorder;\npublic interface ConsumerStatsRecorder extends ConsumerStats;\npublic class ConsumerStatsRecorderImpl extends Object implements ConsumerStatsRecorder;\n", "des": "Pulsar Client implementation."}
{"index": 543, "repo": "spring-mobile-device-1.1.5.RELEASE", "code": "package device;\n\npackage device.site; // Ability for the user to specify whether they prefer the mobile or normal site.\npackage device.switcher; // Mobile site switcher for Spring MVC-based web apps.\npackage device.util; // Spring Mobile utilities\npackage device.view; // Device aware view resolution for Spring MVC-based web apps.\nInterface Device; // A model for the user agent or device that submitted the current request.\nInterface DeviceResolver; // Service interface for resolving Devices that originate web requests with the application.\nClass DeviceHandlerMethodArgumentResolver; // Spring MVC HandlerMethodArgumentResolver that resolves @Controller MethodParameters of type Device to the value of the web request's current device attribute.\nClass DeviceResolverHandlerInterceptor; // A Spring MVC interceptor that resolves the Device that originated the web request before any request handler is invoked.\nClass DeviceResolverRequestFilter; // A Servlet 2.3 Filter that resolves the Device that originated the web request.\nClass DeviceUtils; // Static helper for accessing request-scoped Device values.\nClass DeviceWebArgumentResolver; // Spring MVC WebArgumentResolver that resolves @Controller MethodParameters of type Device to the value of the web request's current device attribute.\nClass LiteDeviceResolver; // A \"lightweight\" device resolver algorithm based on Wordpress's Mobile pack.\nEnum DevicePlatform; // Enumeration for the platform of device that has been resolved\nEnum DeviceType; // Enumeration for the type of device that has been resolved\n", "des": "Public API for device resolution."}
{"index": 2975, "repo": "pulsar-broker-3.0.0", "code": "package buffer;\n\npublic abstract class TransactionBufferException extends TransactionException; // The base exception class for the errors thrown from Transaction Buffer.\npublic static class TransactionBufferException.EndOfTransactionException extends TransactionBufferException; // Exception thrown when reaching end of a transaction.\npublic static class TransactionBufferException.TransactionNotFoundException extends TransactionBufferException; // Exception is thrown when the transaction is not found in the transaction buffer.\n", "des": "Exceptions thrown when encountering errors in transaction buffer."}
{"index": 212, "repo": "nutch-2.4", "code": "package protocols;\n\nInterface Response; // A response interface.\nClass HttpDateFormat; // class to handle HTTP dates.\nClass ProtocolException; // Use ProtocolException instead.\n", "des": "Helper classes related to the Protocol interface, sea also org.apache.nutch.protocol."}
{"index": 39, "repo": "ignite-core-2.15.0", "code": "package resources;\n\nClass SpringResource.DEFAULT; // Dummy class to compensate for impossibility of having default null value for annotation method.\nAnnotation Type CacheNameResource; // Annotates a field or a setter method for injection of grid cache name.\nAnnotation Type CacheStoreSessionResource; // Annotates a field or a setter method for injection of current CacheStoreSession instance.\nAnnotation Type IgniteInstanceResource; // Annotates a field or a setter method for injection of current Ignite instance.\nAnnotation Type JobContextResource; // Annotates a field or a setter method for injection of ComputeJobContext instance.\nAnnotation Type LoadBalancerResource; // Annotates a field or a setter method for injection of ComputeLoadBalancer.\nAnnotation Type LoggerResource; // Annotates a field or a setter method for injection of IgniteLogger.\nAnnotation Type ServiceContextResource; // Annotates a field or a setter method for injecting a service context into a service instance.\nAnnotation Type ServiceResource; // Annotates a field or a setter method for injection of Ignite service(s) by specified service name.\nAnnotation Type SpringApplicationContextResource; // Annotates a field or a setter method for injection of Spring ApplicationContext resource.\nAnnotation Type SpringResource; // Annotates a field or a setter method for injection of resource from Spring ApplicationContext.\nAnnotation Type TaskContinuousMapperResource; // Annotates a field or a setter method for injection of ComputeTaskContinuousMapper resource.\nAnnotation Type TaskSessionResource; // Annotates a field or a setter method for injection of ComputeTaskSession resource.\n", "des": "Contains resource injection annotations."}
{"index": 1977, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package saml2;\n\n@AutoConfiguration(before=SecurityAutoConfiguration.class) @ConditionalOnClass(org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository.class) @ConditionalOnWebApplication(type=SERVLET) @Import({org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyRegistrationConfiguration.class,org.springframework.boot.autoconfigure.security.saml2.Saml2LoginConfiguration.class}) @EnableConfigurationProperties(Saml2RelyingPartyProperties.class) public class Saml2RelyingPartyAutoConfiguration extends Object; // Auto-configuration for Spring Security's SAML 2.0 authentication support.\n@ConfigurationProperties(\"spring.security.saml2.relyingparty\") public class Saml2RelyingPartyProperties extends Object; // SAML2 relying party properties.\npublic static class Saml2RelyingPartyProperties.AssertingParty extends Object; // Represents a remote Identity Provider.\npublic static class Saml2RelyingPartyProperties.AssertingParty.Singlesignon extends Object; // Single sign on details for an Identity Provider.\npublic static class Saml2RelyingPartyProperties.AssertingParty.Verification extends Object; // Verification details for an Identity Provider.\npublic static class Saml2RelyingPartyProperties.AssertingParty.Verification.Credential extends Object;\npublic static class Saml2RelyingPartyProperties.Decryption extends Object;\npublic static class Saml2RelyingPartyProperties.Decryption.Credential extends Object;\npublic static class Saml2RelyingPartyProperties.Registration extends Object; // Represents a SAML Relying Party.\npublic static class Saml2RelyingPartyProperties.Registration.Acs extends Object;\npublic static class Saml2RelyingPartyProperties.Registration.Signing extends Object;\npublic static class Saml2RelyingPartyProperties.Registration.Signing.Credential extends Object;\npublic static class Saml2RelyingPartyProperties.Singlelogout extends Object; // Single logout details.\n", "des": "Auto-configuration for Spring Security's SAML 2.0."}
{"index": 239, "repo": "nutch-2.4", "code": "package service;\n\npackage service.impl; // Contains service implementation classes for Web UI\nInterface CrawlService;\nInterface NutchInstanceService;\nInterface NutchService;\nInterface SeedListService;\n", "des": "Provides service classes and interfaces for Web UI"}
{"index": 617, "repo": "org.apache.karaf.main-2.4.4", "code": "package tracker;\n\nInterface BundleTrackerCustomizer<T>; // The BundleTrackerCustomizer interface allows a BundleTracker to customize the Bundles that are tracked.\nInterface ServiceTrackerCustomizer<S,T>; // The ServiceTrackerCustomizer interface allows a ServiceTracker to customize the service objects that are tracked.\nClass BundleTracker<T>; // The BundleTracker class simplifies tracking bundles much like the ServiceTracker simplifies tracking services.\nClass ServiceTracker<S,T>; // The ServiceTracker class simplifies using services from the Framework's service registry.\n", "des": "Tracker Package Version 1.5."}
{"index": 791, "repo": "lucene-analyzers-common-8.11.2", "code": "package minhash;\n\nClass MinHashFilter; // Generate min hash tokens from an incoming stream of tokens.\nClass MinHashFilterFactory; // TokenFilterFactory for MinHashFilter.\n", "des": "MinHash filtering (for LSH)."}
{"index": 2906, "repo": "spring-aspects-6.0.11", "code": "package aspectj;\n\n@Configuration(proxyBeanMethods=false) @Role(2) public class AspectJAsyncConfiguration extends org.springframework.scheduling.annotation.AbstractAsyncConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based asynchronous method execution.\n", "des": "AspectJ-based scheduling support."}
{"index": 598, "repo": "org.apache.karaf.main-2.4.4", "code": "package signedcontent;\n\nInterface SignedContent; // A SignedContent object represents content which may be signed.\nInterface SignedContentEntry; // A SignedContentEntry represents a content entry which may be signed.\nInterface SignedContentFactory; // A factory used to create SignedContent objects.\nInterface SignerInfo; // A SignerInfo object represents a single signer chain.\nClass InvalidContentException; // Indicates that signed content is invalid according to one of the signers.\n", "des": "Equinox Signed Content"}
{"index": 1334, "repo": "groovy-all-4.0.13", "code": "package messages;\n\npublic class ExceptionMessage extends Message; // A class for error messages produced by the parser system.\npublic class LocatedMessage extends SimpleMessage; // A base class for compilation messages.\npublic abstract class Message extends Object; // A base class for compilation messages.\npublic class SimpleMessage extends Message; // A base class for compilation messages.\npublic class SyntaxErrorMessage extends Message; // A class for error messages produced by the parser system.\npublic class WarningMessage extends LocatedMessage; // A class for warning messages.\n", "des": "Error message classes."}
{"index": 453, "repo": "camel-core-3.0.0-RC1", "code": "package dataformat;\n\nClass Any23DataFormat; // Any23 data format is used for parsing data to RDF.\nClass ASN1DataFormat; // The ASN.1 data format is used for file transfer with telecommunications protocols.\nClass AvroDataFormat; // The Avro data format is used for serialization and deserialization of messages using Apache Avro binary dataformat.\nClass BarcodeDataFormat; // The Barcode data format is used for creating barccode images (such as QR-Code)\nClass Base64DataFormat; // The Base64 data format is used for base64 encoding and decoding.\nClass BeanioDataFormat; // The BeanIO data format is used for working with flat payloads (such as CSV, delimited, or fixed length formats).\nClass BindyDataFormat; // The Bindy data format is used for working with flat payloads (such as CSV, delimited, fixed length formats, or FIX messages).\nClass CBORDataFormat; // CBOR data format is used for unmarshal a CBOR payload to POJO or to marshal POJO back to CBOR payload.\nClass CryptoDataFormat; // Crypto data format is used for encrypting and decrypting of messages using Java Cryptographic Extension.\nClass CsvDataFormat; // The CSV data format is used for handling CSV payloads.\nClass CustomDataFormat; // To use a custom data format implementation that does not come out of the box from Apache Camel.\nClass DataFormatsDefinition; // To configure data formats\nClass FhirDataformat;\nClass FhirJsonDataFormat; // The FHIR JSon data format is used to marshall/unmarshall to/from FHIR objects to/from JSON.\nClass FhirXmlDataFormat; // The FHIR XML data format is used to marshall/unmarshall from/to FHIR objects to/from XML.\nClass FlatpackDataFormat; // The Flatpack data format is used for working with flat payloads (such as CSV, delimited, or fixed length formats).\nClass GrokDataFormat; // The Grok data format is used for unmarshalling unstructured data to objects using Logstash based Grok patterns.\nClass GzipDataFormat; // The GZip data format is a message compression and de-compression format (which works with the popular gzip/gunzip tools).\n", "des": "The JAXB POJOs for the Data Formats used to marshal and unmarshal objects to and from streams inside components"}
{"index": 2125, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "package run;\n\n@DisableCachingByDefault(because=\"Application should always run\") public abstract class BootRun extends JavaExec; // Custom JavaExec task for running a Spring Boot application.\n", "des": "Support for running Spring Boot applications."}
{"index": 2374, "repo": "pulsar-client-api-3.0.0", "code": "package transaction;\n\n@Public @Evolving public interface Transaction; // The class represents a transaction within Pulsar.\npublic static enum Transaction.State extends Enum<Transaction.State>;\n@Private @Evolving public interface TransactionBufferClient; // The transaction buffer client to commit and abort transactions on topics or subscription.\n@Private @Evolving public class TransactionBufferClientException extends IOException; // Exceptions for transaction buffer client.\npublic static class TransactionBufferClientException.ReachMaxPendingOpsException extends TransactionBufferClientException; // Thrown when transaction buffer op over max pending numbers.\npublic static class TransactionBufferClientException.RequestTimeoutException extends TransactionBufferClientException; // Thrown when operation timeout.\n@Public @Evolving public interface TransactionBuilder; // The builder to build a transaction for Pulsar.\n@Private @Evolving public interface TransactionCoordinatorClient extends Closeable; // Transaction coordinator client.\npublic static enum TransactionCoordinatorClient.State extends Enum<TransactionCoordinatorClient.State>; // State of the transaction coordinator client.\n@Private @Evolving public class TransactionCoordinatorClientException extends IOException; // Exceptions for transaction coordinator client.\npublic static class TransactionCoordinatorClientException.CoordinatorClientStateException extends TransactionCoordinatorClientException; // Thrown when transaction coordinator with unexpected state.\npublic static class TransactionCoordinatorClientException.CoordinatorNotFoundException extends TransactionCoordinatorClientException; // Thrown when transaction coordinator not found in broker side.\npublic static class TransactionCoordinatorClientException.InvalidTxnStatusException extends TransactionCoordinatorClientException; // Thrown when transaction switch to a invalid status.\npublic static class TransactionCoordinatorClientException.MetaStoreHandlerNotExistsException extends TransactionCoordinatorClientException; // Thrown when transaction meta store handler not exists.\npublic static class TransactionCoordinatorClientException.MetaStoreHandlerNotReadyException extends TransactionCoordinatorClientException; // Thrown when send request to transaction meta store but the transaction meta store handler not ready.\npublic static class TransactionCoordinatorClientException.TransactionNotFoundException extends TransactionCoordinatorClientException; // Thrown when transaction not found in transaction coordinator.\n@Public @Evolving public class TxnID extends Object implements Serializable; // An identifier for representing a transaction.\n", "des": "Pulsar transaction related API."}
{"index": 1377, "repo": "spring-boot-actuator-3.1.1", "code": "package properties;\n\n@Endpoint(id=\"configprops\") public class ConfigurationPropertiesReportEndpoint extends Object implements org.springframework.context.ApplicationContextAware; // @Endpoint to expose application properties from @ConfigurationProperties annotated beans.\npublic static final class ConfigurationPropertiesReportEndpoint.ConfigurationPropertiesBeanDescriptor extends Object; // Description of a @ConfigurationProperties bean.\npublic static final class ConfigurationPropertiesReportEndpoint.ConfigurationPropertiesDescriptor extends Object implements OperationResponseBody; // Description of an application's @ConfigurationProperties beans.\npublic static final class ConfigurationPropertiesReportEndpoint.ContextConfigurationPropertiesDescriptor extends Object; // Description of an application context's @ConfigurationProperties beans.\nprotected static class ConfigurationPropertiesReportEndpoint.GenericSerializerModifier extends com.fasterxml.jackson.databind.ser.BeanSerializerModifier; // BeanSerializerModifier to return only relevant configuration properties.\n@EndpointWebExtension(endpoint=ConfigurationPropertiesReportEndpoint.class) public class ConfigurationPropertiesReportEndpointWebExtension extends Object; // @EndpointWebExtension for the ConfigurationPropertiesReportEndpoint.\n", "des": "Actuator support relating to external configuration properties."}
{"index": 3367, "repo": "opencms-core-15.0", "code": "package comparison;\n\nClass CmsAttributeComparison; // Comparison of resource attributes.\nClass CmsDiffViewMode; // Wrapper class for the different types of diff modes.\nClass CmsElementComparison; // Comparison of two xml page elements.\nClass CmsHistoryListUtil; // Utility methods for the history list.\nClass CmsHtmlDifferenceConfiguration; // OpenCms Html Diff operation configuration class.\nClass CmsResourceComparison; // Comparison of two OpenCms resources.\nClass CmsXmlContentElementComparison; // Comparison of two xml content elements.\nClass CmsXmlDocumentComparison; // A comparison of properties, attributes and elements of xml documents.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Utilities for comparing different versions of resources, used by both the classic workplace and the new Vaadin-based workplace."}
{"index": 1151, "repo": "commons-math3-3.6.1", "code": "package complex;\n\nClass Complex; // Representation of a Complex number, i.e.\nClass ComplexField; // Representation of the complex numbers field.\nClass ComplexFormat; // Formats a Complex number in cartesian format \"Re(c) + Im(c)i\".\nClass ComplexUtils; // Static implementations of common Complex utilities functions.\nClass Quaternion; // This class implements quaternions (Hamilton's hypercomplex numbers).\nClass RootsOfUnity; // A helper class for the computation and caching of the n-th roots of unity.\n", "des": "Complex number type and implementations of complex transcendental functions."}
{"index": 369, "repo": "commons-geometry-euclidean-1.0", "code": "package twod;\n\npackage twod.path; // This package provides classes for working with connected sequences of line segments and other line subsets.\npackage twod.rotation; // This package provides components related to rotations in 2 dimensional Euclidean space.\npackage twod.shape; // This package provides utilities for constructing basic 2D shapes.\nInterface BoundarySource2D; // Extension of the BoundarySource interface for Euclidean 2D space.\nInterface Linecastable2D; // Interface for objects that support linecast operations in Euclidean 2D space.\nClass AffineTransformMatrix2D; // Class using a matrix to represent affine transformations in 2 dimensional Euclidean space.\nClass BoundaryList2D; // BoundarySource2D implementation that uses boundaries stored in a list.\nClass Bounds2D; // Class containing minimum and maximum points defining a 2D axis-aligned bounding box.\nClass Bounds2D.Builder; // Class used to construct Bounds2D instances.\nClass ConvexArea; // Class representing a finite or infinite convex area in Euclidean 2D space.\nClass EmbeddedTreeLineSubset; // Class representing an arbitrary subset of a line using a RegionBSPTree1D.\nClass Line; // This class represents an oriented line in the 2D plane.\nClass Line.SubspaceTransform; // Class containing a transformed line instance along with a subspace (1D) transform.\nClass LinecastPoint2D; // Class representing intersections resulting from linecast operations in Euclidean 2D space.\nClass LineConvexSubset; // Class representing a convex subset of a line in 2D Euclidean space.\nClass Lines; // Class containing factory methods for constructing Line and LineSubset instances.\nClass LineSubset; // Class representing a subset of points on a line in 2D Euclidean space.\nClass PolarCoordinates; // Class representing polar coordinates in 2 dimensional Euclidean space.\nClass Ray; // Class representing a ray in 2D Euclidean space.\nClass RegionBSPTree2D; // Binary space partitioning (BSP) tree representing a region in two dimensional Euclidean space.\nClass RegionBSPTree2D.PartitionedRegionBuilder2D; // Class used to build regions in Euclidean 2D space by inserting boundaries into a BSP tree containing \"partitions\", i.e.\n", "des": "This package provides basic 2D geometry components."}
{"index": 228, "repo": "nutch-2.4", "code": "package config;\n\nClass CustomDaoFactory;\nClass CustomTableCreator;\nClass NutchGuiConfiguration;\nClass SpringConfiguration;\n", "des": "Contains config classes for Web UI"}
{"index": 1129, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package gpu;\n\nClass AssignedGpuDevice; // In addition to GpuDevice, this include container id and more runtime information related to who is using the GPU device if possible\nClass GpuDevice; // This class is used to represent GPU device while allocation.\nClass GpuDiscoverer;\nClass GpuDockerCommandPluginFactory; // Factory to create GpuDocker Command Plugin instance\nClass GpuNodeResourceUpdateHandler;\nClass GpuResourcePlugin;\nClass NvidiaBinaryHelper; // Executes the \"nvidia-smi\" command and returns an object based on its output.\nClass NvidiaDockerV1CommandPlugin; // Implementation to use nvidia-docker v1 as GPU docker command plugin.\nClass NvidiaDockerV2CommandPlugin; // Implementation to use nvidia-docker v2 as GPU docker command plugin.\nClass GpuDeviceSpecificationException; // This exception is to be thrown when allowed GPU device specification is empty or invalid.\n", "des": "Package for GPU support classes."}
{"index": 940, "repo": "spring-ws-3.0.10.RELEASE", "code": "package core;\n\npackage core.support; // Convenient super class for application classes that need Web service access.\nInterface FaultMessageResolver; // Defines the interface for objects than can resolve fault WebServiceMessages.\nInterface SourceExtractor<T>; // Callback interface for extracting a result object from a Source instance.\nInterface WebServiceMessageCallback; // Generic callback interface for code that operates on a WebServiceMessage.\nInterface WebServiceMessageExtractor<T>; // Callback interface for extracting a result object from a WebServiceMessage instance.\nInterface WebServiceOperations; // Specifies a basic set of Web service operations.\nClass SimpleFaultMessageResolver; // Simple fault resolver that simply throws a WebServiceFaultException when a fault occurs.\nClass WebServiceTemplate; // The central class for client-side Web services. It provides a message-driven approach to sending and receiving WebServiceMessage instances.\n", "des": "Core package of the Spring-WS client-side support."}
{"index": 3191, "repo": "tomcat-api-10.1", "code": "package classfile;\n\nClass AnnotationElementValue;\nClass AnnotationEntry; // Represents one annotation in the annotation table\nClass Annotations; // base class for annotations\nClass ArrayElementValue;\nClass ClassElementValue;\nClass ClassParser; // Wrapper class that parses a given Java .class file.\nClass Constant; // Abstract superclass for classes to represent the different constant types in the constant pool of a class file.\nClass ConstantClass; // This class is derived from the abstract Constant and represents a reference to a (external) class.\nClass ConstantDouble; // This class is derived from the abstract Constant and represents a reference to a Double object.\nClass ConstantFloat; // This class is derived from the abstract Constant and represents a reference to a float object.\nClass ConstantInteger; // This class is derived from the abstract Constant and represents a reference to an int object.\nClass ConstantLong; // This class is derived from the abstract Constant and represents a reference to a long object.\nClass ConstantPool; // This class represents the constant pool, i.e., a table of constants, of a parsed classfile.\nClass ConstantUtf8; // Extends the abstract Constant to represent a reference to a UTF-8 encoded string.\nClass ElementValue; // The element_value structure is documented at https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-4.html#jvms-4.7.16.1\nClass ElementValuePair; // An annotation's element value pair.\nClass EnumElementValue;\nClass JavaClass; // Represents a Java class, i.e., the data structures, constant pool, fields, methods and commands contained in a Java .class file.\nClass SimpleElementValue;\nClass ClassFormatException; // Thrown when the BCEL attempts to read a class file and determines that a class is malformed or otherwise cannot be interpreted as a class file.\n", "des": "This package contains the classes that describe the structure of a Java class file and a class file parser."}
{"index": 3000, "repo": "spring-web-6.0.11", "code": "package codec;\n\npackage codec.cbor; // CBOR encoder and decoder support.\npackage codec.json; // JSON encoder and decoder support.\npackage codec.multipart; // Multipart support.\npackage codec.protobuf; // Provides an encoder and a decoder for Google Protocol Buffers.\npackage codec.support; // Provides implementations of ClientCodecConfigurer and ServerCodecConfigurer based on the converter implementations from org.springframework.http.codec.json and co.\npackage codec.xml; // XML encoder and decoder support.\npublic interface ClientCodecConfigurer extends CodecConfigurer; // Extension of CodecConfigurer for HTTP message reader and writer options relevant on the client side.\npublic static interface ClientCodecConfigurer.ClientDefaultCodecs extends CodecConfigurer.DefaultCodecs; // CodecConfigurer.DefaultCodecs extension with extra client-side options.\npublic interface CodecConfigurer; // Defines a common interface for configuring either client or server HTTP message readers and writers.\npublic static interface CodecConfigurer.CustomCodecs; // Registry for custom HTTP message readers and writers.\npublic static interface CodecConfigurer.DefaultCodecConfig; // Exposes the values of properties configured through CodecConfigurer.defaultCodecs() that are applied to default codecs.\npublic static interface CodecConfigurer.DefaultCodecs; // Customize or replace the HTTP message readers and writers registered by default.\npublic static interface CodecConfigurer.MultipartCodecs; // Registry and container for multipart HTTP message writers.\npublic class DecoderHttpMessageReader<T> extends Object implements HttpMessageReader<T>; // HttpMessageReader that wraps and delegates to a Decoder.\npublic class EncoderHttpMessageWriter<T> extends Object implements HttpMessageWriter<T>; // HttpMessageWriter that wraps and delegates to an Encoder.\npublic class FormHttpMessageReader extends LoggingCodecSupport implements HttpMessageReader<org.springframework.util.MultiValueMap<String,String>>; // Implementation of an HttpMessageReader to read HTML form data, i.e.\npublic class FormHttpMessageWriter extends LoggingCodecSupport implements HttpMessageWriter<org.springframework.util.MultiValueMap<String,String>>; // HttpMessageWriter for writing a MultiValueMap<String, String> as HTML form data, i.e.\n", "des": "Provides implementations of Encoder and Decoder for web use."}
{"index": 3796, "repo": "lucene-analysis-common-9.7.0", "code": "package it;\n\nClass ItalianAnalyzer; // Analyzer for Italian.\nClass ItalianLightStemFilter; // A TokenFilter that applies ItalianLightStemmer to stem Italian words.\nClass ItalianLightStemFilterFactory; // Factory for ItalianLightStemFilter.\nClass ItalianLightStemmer; // Light Stemmer for Italian.\n", "des": "Analyzer for Italian."}
{"index": 859, "repo": "calcite-core-1.34.0", "code": "package advise;\n\nClass SqlAdvisor; // An assistant which offers hints and corrections to a partially-formed SQL statement.\nClass SqlAdvisor.ValidateErrorInfo; // Text and position info of a validator or parser exception.\nClass SqlAdvisorGetHintsFunction; // Table function that returns completion hints for a given SQL statement.\nClass SqlAdvisorGetHintsFunction2; // Table function that returns completion hints for a given SQL statement.\nClass SqlAdvisorHint; // This class is used to return values for (String, int, String[]).\nClass SqlAdvisorHint2; // This class is used to return values for (String, int, String[]).\nClass SqlAdvisorValidator; // SqlAdvisorValidator is used by SqlAdvisor to traverse the parse tree of a SQL statement, not for validation purpose but for setting up the scopes and namespaces to facilitate retrieval of SQL statement completion hints.\nClass SqlSimpleParser; // A simple parser that takes an incomplete and turn it into a syntactically correct statement.\nClass SqlSimpleParser.IdToken; // Token representing an identifier.\nClass SqlSimpleParser.Token; // Token.\nClass SqlSimpleParser.Tokenizer; // Tokenizer.\n", "des": "Provides hints and corrections for editing SQL statements."}
{"index": 2924, "repo": "groovy-4.0.13", "code": "package concurrentlinkedhashmap;\n\n@ThreadSafe public final class ConcurrentLinkedHashMap<K,V> extends AbstractMap<K,V> implements ConcurrentMap<K,V>, Serializable; // A hash table supporting full concurrency of retrievals, adjustable expected concurrency for updates, and a maximum capacity to bound the map by.\npublic static final class ConcurrentLinkedHashMap.Builder<K,V> extends Object; // A builder that creates ConcurrentLinkedHashMap instances.\n@ThreadSafe public interface EntryWeigher<K,V>; // A class that can determine the weight of an entry.\n@ThreadSafe public interface EvictionListener<K,V>; // A listener registered for notification when an entry is evicted.\n@ThreadSafe public interface Weigher<V>; // A class that can determine the weight of a value.\npublic final class Weighers extends Object; // A common set of Weigher and EntryWeigher implementations.\n", "des": "This package contains an implementation of a bounded ConcurrentMap data structure."}
{"index": 2413, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package audit;\n\n@AutoConfiguration @ConditionalOnBean(org.springframework.boot.actuate.audit.AuditEventRepository.class) @ConditionalOnProperty(prefix=\"management.auditevents\", name=\"enabled\", matchIfMissing=true) public class AuditAutoConfiguration extends Object; // Auto-configuration for AuditEvents.\n@AutoConfiguration(after=AuditAutoConfiguration.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.audit.AuditEventsEndpoint.class) public class AuditEventsEndpointAutoConfiguration extends Object; // Auto-configuration for the AuditEventsEndpoint.\n", "des": "Auto-configuration for actuator audit concerns."}
{"index": 225, "repo": "nutch-2.4", "code": "package client;\n\npackage client.impl; // Contains implementation of client classes and interfaces for Web UI\npackage client.model; // Contains model classes of client for Web UI\nInterface NutchClient;\nClass NutchClientFactory;\n", "des": "Provides client classes and interfaces for Web UI"}
{"index": 1023, "repo": "hadoop-aws-3.3.6", "code": "package api;\n\nInterface RequestFactory; // Factory for S3 objects.\nClass UnsupportedRequestException; // An operation is unsupported.\n", "des": "Where the interfaces for classes implemented in o.a.h.fs.s3a.impl should go."}
{"index": 148, "repo": "ignite-core-2.15.0", "code": "package mxbean;\n\nClass IgniteStandardMXBean; // Extension of standard Java MBean.\n", "des": "Contains internal mxbeans stuff."}
{"index": 572, "repo": "hadoop-common-3.3.4", "code": "package util;\n\npackage util.functional; // Support for functional programming within the Hadoop APIs.\nInterface CleanerUtil.BufferCleaner; // Pass in an implementation of this interface to cleanup ByteBuffers.\nInterface ExitCodeProvider; // Get the exit code of an exception.\nInterface GcTimeMonitor.GcTimeAlertHandler; // The user can provide an instance of a class implementing this interface when initializing a GcTimeMonitor to receive alerts when GC time percentage exceeds the specified threshold.\nInterface IdentityHashStore.Visitor<K,V>;\nInterface IPList;\nInterface LightWeightCache.Entry; // Entries of LightWeightCache.\nInterface LightWeightGSet.LinkedElement; // Elements of LightWeightGSet.\nInterface Progressable; // A facility for reporting progress.\nInterface Shell.CommandExecutor;\nInterface Tool; // A tool interface that supports handling of generic command-line options.\nClass ApplicationClassLoader; // A URLClassLoader for application isolation.\nClass AutoCloseableLock; // This is a wrap class of a ReentrantLock.\nClass BasicDiskValidator; // BasicDiskValidator is a wrapper around DiskChecker.\nClass CacheableIPList; // CacheableIPList loads a list of subnets from a file.\nClass CloseableReferenceCount; // A closeable object that maintains a reference count.\nClass CombinedIPList; // Util class to stores ips/hosts/subnets.\nClass CombinedIPWhiteList;\nClass ComparableVersion; // Generic implementation of version comparison.\nClass DurationInfo; // A duration with logging of final state at info or debug in the close() call.\nClass FastNumberFormat; // Fast thread-safe version of NumberFormat\nClass FileBasedIPList; // FileBasedIPList loads a list of subnets in CIDR format and ip addresses from a file.\nClass FindClass; // This entry point exists for diagnosing classloader problems: is a class or resource present -and if so, where?\nClass GcTimeMonitor; // This class monitors the percentage of time the JVM is paused in GC within the specified observation window, say 1 minute.\nClass GcTimeMonitor.Builder;\nClass GcTimeMonitor.GcData; // Encapsulates data about GC pauses measured at the specific timestamp.\nClass HostsFileReader.HostDetails; // An atomic view of the included and excluded hosts\n", "des": "Common utilities."}
{"index": 3514, "repo": "opennlp-tools-2.2.0", "code": "package entitylinker;\n\nInterface EntityLinker<T extends Span>; // EntityLinkers establish connections with external data to enrich extracted entities.\nClass BaseLink; // Represents a minimal tuple of information.\nClass EntityLinkerFactory; // Generates a EntityLinker instances via a properties file configuration.\nClass EntityLinkerProperties; // Properties wrapper for EntityLinker implementations.\nClass LinkedSpan<T extends BaseLink>; // A default, extended Span that holds additional information about a Span.\n", "des": "Package related to linking entities to external data sources."}
{"index": 1123, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package resourceplugin;\n\npackage resourceplugin.deviceframework; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage resourceplugin.fpga; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage resourceplugin.gpu; // Package for GPU support classes.\nInterface DockerCommandPlugin; // Interface to make different resource plugins (e.g.\nInterface ResourcePlugin; // ResourcePlugin is an interface for node manager to easier support discovery/manage/isolation for new resource types.\nClass NodeResourceUpdaterPlugin; // Plugins to handle resources on a node.\nClass ResourcePluginManager; // Manages ResourcePlugin configured on this NodeManager.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 3586, "repo": "lucene-test-framework-9.7.0", "code": "package dummy;\n\nClass DummyCompressingCodec; // CompressionCodec that does not compress data, useful for testing.\n", "des": "Dummy CompressingCodec implementation used for testing."}
{"index": 2744, "repo": "spring-batch-infrastructure-5.0.2", "code": "package repeat;\n\npackage repeat.callback; // Infrastructure implementations of repeat callback concerns.\npackage repeat.context; // Infrastructure implementations of repeat context concerns.\npackage repeat.exception; // Infrastructure implementations of repeat exception handler concerns.\npackage repeat.interceptor; // Infrastructure implementations of repeat aop concerns.\npackage repeat.listener; // Infrastructure implementations of repeat interceptor concerns.\npackage repeat.policy; // Infrastructure implementations of repeat policy concerns.\npackage repeat.support; // Infrastructure implementations of repeat support concerns.\npublic interface CompletionPolicy; // Interface for batch completion policies, to enable batch operations to strategise normal completion conditions.\npublic interface RepeatCallback; // Callback interface for batch operations.\npublic interface RepeatContext extends org.springframework.core.AttributeAccessor; // Base interface for context which controls the state and completion / termination of a batch step.\npublic class RepeatException extends org.springframework.core.NestedRuntimeException;\npublic interface RepeatListener; // Interface for listeners to the batch process.\n@FunctionalInterface public interface RepeatOperations; // The main interface providing access to batch operations.\npublic enum RepeatStatus extends Enum<RepeatStatus>;\n", "des": "Infrastructure implementations of repeat concerns."}
{"index": 2030, "repo": "spring-messaging-6.0.11", "code": "package invocation;\n\npackage invocation.reactive; // Common infrastructure for invoking message handler methods with non-blocking, and reactive contracts.\npublic abstract class AbstractAsyncReturnValueHandler extends Object implements AsyncHandlerMethodReturnValueHandler; // Convenient base class for AsyncHandlerMethodReturnValueHandler implementations that support only asynchronous (Future-like) return values and merely serve as adapters of such types to Spring's ListenableFuture.\npublic abstract class AbstractExceptionHandlerMethodResolver extends Object; // Cache exception handling method mappings and provide options to look up a method that should handle an exception.\npublic abstract class AbstractMethodMessageHandler<T> extends Object implements MessageHandler, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // Abstract base class for HandlerMethod-based message handling.\npublic interface AsyncHandlerMethodReturnValueHandler extends HandlerMethodReturnValueHandler; // An extension of HandlerMethodReturnValueHandler for handling async, Future-like return value types that support success and error callbacks.\npublic class CompletableFutureReturnValueHandler extends AbstractAsyncReturnValueHandler; // Support for CompletableFuture (and as of 4.3.7 also CompletionStage) as a return value type.\npublic interface HandlerMethodArgumentResolver; // Strategy interface for resolving method parameters into argument values in the context of a given Message.\npublic class HandlerMethodArgumentResolverComposite extends Object implements HandlerMethodArgumentResolver; // Resolves method parameters by delegating to a list of registered HandlerMethodArgumentResolvers.\npublic interface HandlerMethodReturnValueHandler; // Strategy interface to handle the value returned from the invocation of a method handling a Message.\npublic class HandlerMethodReturnValueHandlerComposite extends Object implements AsyncHandlerMethodReturnValueHandler; // A HandlerMethodReturnValueHandler that wraps and delegates to others.\npublic class InvocableHandlerMethod extends HandlerMethod; // Extension of HandlerMethod that invokes the underlying method with argument values resolved from the current HTTP request through a list of HandlerMethodArgumentResolver.\n@Deprecated(since=\"6.0\") public class ListenableFutureReturnValueHandler extends AbstractAsyncReturnValueHandler;\npublic class MethodArgumentResolutionException extends MessagingException; // Common exception resulting from the invocation of HandlerMethodArgumentResolver.\npublic class ReactiveReturnValueHandler extends AbstractAsyncReturnValueHandler; // Support for single-value reactive types (like Mono or Single) as a return value type.\n", "des": "Common infrastructure for invoking message handler methods."}
{"index": 1259, "repo": "spring-core-6.0.11", "code": "package cglib;\n\npackage cglib.beans; // Spring's repackaging of the CGLIB beans package (for internal use only).\npackage cglib.core; // Spring's repackaging of the CGLIB core package (for internal use only).\npackage cglib.proxy; // Spring's repackaging of the CGLIB proxy package (for internal use only).\npackage cglib.reflect; // Spring's repackaging of the CGLIB reflect package (for internal use only).\npackage cglib.transform; // Spring's repackaging of the CGLIB transform package (for internal use only).\npackage cglib.util; // Spring's repackaging of the CGLIB util package (for internal use only).\npublic final class SpringCglibInfo extends Object; // Empty class used to ensure that the org.springframework.cglib package is processed during javadoc generation.\n", "des": "Spring's repackaging of CGLIB 3.3 (with Spring-specific patches; for internal use only)."}
{"index": 2392, "repo": "spring-batch-core-5.0.2", "code": "package state;\n\npublic abstract class AbstractState extends Object implements State;\npublic class DecisionState extends AbstractState; // State that requires a decider to make the status decision.\npublic class EndState extends AbstractState; // State implementation for ending a job if it is in progress and continuing if just starting.\npublic interface FlowExecutionAggregator; // Strategy interface for aggregating FlowExecution instances into a single exit status.\npublic class FlowState extends AbstractState implements FlowHolder; // State that delegates to a Flow\npublic class MaxValueFlowExecutionAggregator extends Object implements FlowExecutionAggregator; // Implementation of the FlowExecutionAggregator interface that aggregates FlowExecutionStatus', using the status with the high precedence as the aggregate status.\npublic class SplitState extends AbstractState implements FlowHolder; // A State implementation that splits a Flow into multiple parallel subflows.\npublic class StepState extends AbstractState implements StepLocator, StepHolder; // State implementation that delegates to a FlowExecutor to execute the specified Step.\n", "des": "States used in defining the underlying Spring Batch state machine"}
{"index": 959, "repo": "spring-ws-3.0.10.RELEASE", "code": "package jaxb;\n\nClass XmlRootElementEndpointMapping; // Implementation of the EndpointMapping interface that uses the JAXB2 XmlRootElement annotation to map methods to request payload root elements.\n", "des": "Provides JAXB2-based EndpointMapping implementations."}
{"index": 2045, "repo": "spring-messaging-6.0.11", "code": "package reactor;\n\npublic abstract class AbstractNioBufferReactorNettyCodec<P> extends Object implements ReactorNettyCodec<P>; // Convenient base class for ReactorNettyCodec implementations that need to work with NIO ByteBuffers.\npublic class ReactorNetty2TcpClient<P> extends Object implements TcpOperations<P>; // Reactor Netty based implementation of TcpOperations.\npublic class ReactorNetty2TcpConnection<P> extends Object implements TcpConnection<P>; // Reactor Netty based implementation of TcpConnection.\npublic interface ReactorNettyCodec<P>; // Simple holder for a decoding Function and an encoding BiConsumer to use with Reactor Netty.\npublic class ReactorNettyTcpClient<P> extends Object implements TcpOperations<P>; // Reactor Netty based implementation of TcpOperations.\npublic class ReactorNettyTcpConnection<P> extends Object implements TcpConnection<P>; // Reactor Netty based implementation of TcpConnection.\npublic interface TcpMessageCodec<P>; // Contract to encode and decode a Message to and from a ByteBuffer allowing a higher-level protocol (e.g.\n", "des": "Contains support for TCP messaging based on Reactor."}
{"index": 870, "repo": "calcite-core-1.34.0", "code": "package statistic;\n\nClass CachingSqlStatisticProvider; // Implementation of SqlStatisticProvider that reads and writes a cache.\nClass QuerySqlStatisticProvider; // Implementation of SqlStatisticProvider that generates and executes SQL queries.\nEnum MapSqlStatisticProvider; // Implementation of SqlStatisticProvider that looks up values in a table.\n", "des": "Implementations of statistics providers."}
{"index": 3119, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package reflection;\n\nInterface AttributeConverterDefinitionCollector;\nClass ClassLoaderAccessLazyImpl; // A ClassLoaderAccess implementation based on lazy access to MetadataBuildingOptions\nClass PersistentAttributeFilter;\n", "des": "Defines the capability to merge mapping information from both annotations and orm.xml sources into a unified set of metadata in the Hibernate commons-annotations model."}
{"index": 3319, "repo": "opencms-core-15.0", "code": "package staticexport;\n\nInterface I_CmsLinkSubstitutionHandler; // Allows to configure customized link substitution behavior.\nInterface I_CmsStaticExportHandler; // Provides a method for scrubbing files from the export folder that might have been changed, so that the export is newly created after the next request to the resource.\nClass A_CmsOnDemandStaticExportHandler; // Abstract implementation for the I_CmsStaticExportHandler interface.\nClass A_CmsStaticExportHandler; // Abstract base implementation for the I_CmsStaticExportHandler interface.\nClass CmsAdvancedLinkSubstitutionHandler; // Advanced link substitution behavior.\nClass CmsAfterPublishMultiLanguageStaticExportHandler; // Extended after publish static export handler, supporting multi-language exports.\nClass CmsAfterPublishStaticExportHandler; // Implementation for the I_CmsStaticExportHandler interface.\nClass CmsDefaultLinkSubstitutionHandler; // Default link substitution behavior.\nClass CmsExportFolderMatcher; // This class provides a file name matcher to find out those resources which must be part of a static export.\nClass CmsExportname; // A bean for a export name.\nClass CmsExportname.CmsExportNameComparator; // A export name comparator.\nClass CmsLinkManager; // Does the link replacement for the ≶link> tags.\nClass CmsLinkProcessor; // Implements the HTML parser node visitor pattern to exchange all links on the page.\nClass CmsLinkTable; // Maintains a table of links for an element of a CmsXmlPage.\nClass CmsLinkTable.LinkKeyComparator; // Comparator used to deterministically order the link table.\nClass CmsLocalePrefixLinkSubstitutionHandler; // Link substitution handler required to render single tree localized sites.\nClass CmsOnDemandHtmlSubTreeHandler; // Concrete OnDemandExportHandler.\nClass CmsOnDemandStaticExportHandler; // Concrete OnDemandExportHandler.\nClass CmsPrefixFileFilter; // Implements the file filter used to guess the right suffix of a deleted jsp file.\nClass CmsStaticExportData; // Provides a data structure for the result of an export request.\nClass CmsStaticExportExportRule; // Help class for storing of export-rules.\nClass CmsStaticExportManager; // Provides the functionality to export resources from the OpenCms VFS to the file system.\nClass CmsStaticExportRequest; // Wrapper for static export requests, required for parameter based requests.\n", "des": "Contains the functionality for the static HTML page export."}
{"index": 3255, "repo": "opencms-core-15.0", "code": "package configuration;\n\npackage configuration.preferences; // Classes to build the user preferences dialog.\nInterface I_CmsConfigurationParameterHandler; // Used for classes that are configurable using <param name=\"name\">value</param> in the XML configuration.\nInterface I_CmsNeedsAdminCmsObject; // Interface for configured classes that need a CmsObject with admin privileges.\nInterface I_CmsXmlConfiguration; // Each configurable element in OpenCms must implement this interface.\nInterface I_CmsXmlConfigurationWithUpdateHandler; // Interface for configurations which should run custom logic when the configuration is written back by OpenCms.\nClass A_CmsXmlConfiguration; // Abstract base implementation for xml configurations.\nClass CmsAdditionalLogFolderConfig; // Bean containing additional log folders available for the log file viewer.\nClass CmsConfigurationCopyResource; // Describes a resource to copy during the creation of a new resource.\nClass CmsConfigurationManager; // Configuration manager for digesting the OpenCms XML configuration.\nClass CmsDefaultUserSettings; // Default user workplace settings, used as default values for worklace settings in the user preferences.\nClass CmsDefaultUserSettings.CmsPublishRelatedResourcesMode; // Enumeration class for defining the publish related resources mode.\nClass CmsDigesterResourceTypeCreationFactory; // Factory to create resource type instances from the XML configuration.\nClass CmsElementWithAttrsParamConfigHelper; // Helper class for parsing an element with no content but several attributes into a subclass of I_CmsConfigurationParameterHandler.\nClass CmsElementWithSubElementsParamConfigHelper; // Helper class for parsing an element with several sub-elements which are text-valued (i.e.\nClass CmsImportExportConfiguration; // Import / export master configuration class.\nClass CmsModuleConfiguration; // Modules configuration class.\nClass CmsParameterConfiguration; // Provides convenient access to configuration parameters.\nClass CmsParameterConfiguration.ParameterReader; // Used to read parameter lines from a property file.\nClass CmsParameterConfiguration.ParameterTokenizer; // This class divides property value into tokens separated by \",\".\nClass CmsParameterStore; // Class for accessing global 'weighted' configuration parameters defined in parameter files in the VFS.\nClass CmsParameterStore.WeightedValue; // An individual weighted parameter value, with a 'source' attribute for better debuggability.\nClass CmsRemoteShellConfiguration; // RMI shell server configuration.\nClass CmsSchedulerConfiguration; // Scheduled jobs configuration class.\n", "des": "Reads and writes the XML based OpenCms configuration files."}
{"index": 873, "repo": "calcite-core-1.34.0", "code": "package format;\n\nInterface FormatElement; // A format element in a format string.\nInterface FormatModel; // Describes the format strings used by a formatting function such as FORMAT_TIMESTAMP or CAST(string AS DATE FORMAT formatString).\nClass FormatModels; // Utilities for FormatModel.\nEnum FormatElementEnum; // Implementation of FormatElement containing the standard format elements.\n", "des": "Utility classes for handling format strings."}
{"index": 2959, "repo": "spring-integration-redis-6.1.2", "code": "package config;\n\npublic class RedisChannelParser extends org.springframework.integration.config.xml.AbstractChannelParser; // Parser for the 'channel' and 'publish-subscribe-channel' elements of the Spring Integration Redis namespace.\npublic class RedisInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser;\npublic class RedisNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for Spring Integration's 'redis' namespace.\npublic class RedisOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the <outbound-channel-adapter/> component.\npublic class RedisOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the <int-redis:outbound-gateway/> component.\npublic class RedisQueueInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser; // Parser for the <queue-inbound-channel-adapter> element of the 'redis' namespace.\npublic class RedisQueueInboundGatewayParser extends org.springframework.integration.config.xml.AbstractInboundGatewayParser; // Parser for the <queue-inbound-gateway> element of the 'redis' namespace.\npublic class RedisQueueOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the <int-redis:queue-outbound-channel-adapter> element.\npublic class RedisQueueOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the <int-redis:queue-outbound-channel-adapter> element.\npublic class RedisStoreInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Parser for Redis store inbound adapters\npublic class RedisStoreOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the <redis:store-outbound-channel-adapter> element.\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 983, "repo": "spring-ws-3.0.10.RELEASE", "code": "package endpoint;\n\npackage endpoint.annotation; // JDK 1.5+ annotations for Spring-WS SOAP endpoints.\npackage endpoint.interceptor; // Provides miscellaneous endpoints EndpointInterceptor implementations for SOAP purposes.\npackage endpoint.mapping; // Provides miscellaneous endpoints EndpointMapping implementations for SOAP purposes.\nClass AbstractFaultCreatingValidatingMarshallingPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractSoapFaultDefinitionExceptionResolver; // Abstract base class for SOAP-based EndpointExceptionResolver implementations that depend on SoapFaultDefinition.\nClass SimpleSoapExceptionResolver; // Simple, SOAP-specific EndpointExceptionResolver implementation that stores the exception's message as the fault string.\nClass SoapFaultAnnotationExceptionResolver; // Implementation of the EndpointExceptionResolver interface that uses the SoapFault annotation to map exceptions to SOAP Faults.\nClass SoapFaultDefinition; // Defines properties for a SOAP Fault.\nClass SoapFaultDefinitionEditor; // PropertyEditor for SoapFaultDefinition objects.\nClass SoapFaultMappingExceptionResolver; // Exception resolver that allows for mapping exception class names to SOAP Faults.\n", "des": "Provides EndpointAdapter, EndpointMapping, and EndpointExceptionResolver implementations for SOAP."}
{"index": 805, "repo": "lucene-analyzers-common-8.11.2", "code": "package sinks;\n\nClass TeeSinkTokenFilter; // This TokenFilter provides the ability to set aside attribute states that have already been analyzed.\nClass TeeSinkTokenFilter.SinkTokenStream; // TokenStream output from a tee.\n", "des": "TeeSinkTokenFilter."}
{"index": 1612, "repo": "spring-data-neo4j-7.1.2", "code": "package schema;\n\n@Retention(RUNTIME) @Target(FIELD) @Inherited @ConvertWith(converterFactory=org.springframework.data.neo4j.core.schema.CompositePropertyConverterFactory.class) @API(status=STABLE, since=\"6.0\") public @interface CompositeProperty; // This annotation indicates a persistent property that is composed of multiple properties on a node or relationship.\npublic static final class CompositeProperty.DefaultToMapConverter<K> extends Object implements Neo4jPersistentPropertyToMapConverter<K,Map<K,Object>>; // The default implementation, passing map properties through as they are on the way to the graph and possibly applying a post processor on the way out of the graph.\npublic static final class CompositeProperty.NoopTransformation extends Object implements BiFunction<CompositeProperty.Phase,String,String>; // The default operation for transforming the keys.\npublic static enum CompositeProperty.Phase extends Enum<CompositeProperty.Phase>; // Phase of the mapping currently taking place.\n@Retention(RUNTIME) @Target(FIELD) @Documented @API(status=STABLE, since=\"6.0\") public @interface DynamicLabels; // This annotation can be used on a field of type Collection<String>.\n@Retention(RUNTIME) @Target({FIELD,ANNOTATION_TYPE}) @Documented @Inherited @API(status=STABLE, since=\"6.0\") public @interface GeneratedValue; // Indicates a generated id.\npublic static final class GeneratedValue.InternalIdGenerator extends Object implements IdGenerator<Void>; // This IdGenerator does nothing.\npublic static final class GeneratedValue.UUIDGenerator extends Object implements IdGenerator<UUID>; // This generator is automatically applied when a field of type UUID is annotated with @Id and @GeneratedValue.\n@Retention(RUNTIME) @Target({FIELD,ANNOTATION_TYPE}) @Documented @Inherited @API(status=STABLE, since=\"6.0\") public @interface Id; // This annotation is included here for completeness.\n@FunctionalInterface @API(status=STABLE, since=\"6.0\") public interface IdGenerator<T>; // Interface for generating ids for entities.\n", "des": "This package contains the schema that is defined by a set of classes, representing nodes and relationships and their properties."}
{"index": 30, "repo": "commons-collections4-4.4", "code": "package splitmap;\n\nClass AbstractIterableGetMapDecorator<K,V>; // IterableGet that uses a Map<K, V> for the Get<K, V> implementation.\nClass TransformedSplitMap<J,K,U,V>; // Decorates another Map to transform objects that are added.\n", "des": "The \"split map\" concept is that of an object that implements the Put and Get interfaces, with differing generic types."}
{"index": 1516, "repo": "spring-context-6.0.11", "code": "package weaving;\n\npublic class AspectJWeavingEnabler extends Object implements org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.beans.factory.BeanClassLoaderAware, LoadTimeWeaverAware, org.springframework.core.Ordered; // Post-processor that registers AspectJ's ClassPreProcessorAgentAdapter with the Spring application context's default LoadTimeWeaver.\npublic class DefaultContextLoadTimeWeaver extends Object implements LoadTimeWeaver, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.DisposableBean; // Default LoadTimeWeaver bean for use in an application context, decorating an automatically detected internal LoadTimeWeaver.\npublic interface LoadTimeWeaverAware extends org.springframework.beans.factory.Aware; // Interface to be implemented by any object that wishes to be notified of the application context's default LoadTimeWeaver.\npublic class LoadTimeWeaverAwareProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.beans.factory.BeanFactoryAware; // BeanPostProcessor implementation that passes the context's default LoadTimeWeaver to beans that implement the LoadTimeWeaverAware interface.\n", "des": "Load-time weaving support for a Spring application context, building on Spring's LoadTimeWeaver abstraction."}
{"index": 3803, "repo": "lucene-analysis-common-9.7.0", "code": "package nl;\n\nClass DutchAnalyzer; // Analyzer for Dutch language.\n", "des": "Analyzer for Dutch."}
{"index": 3199, "repo": "tomcat-api-10.1", "code": "package fileupload;\n\npackage fileupload.disk; // A disk-based implementation of the FileItem interface.\npackage fileupload.impl; // Implementations and exceptions utils.\npackage fileupload.servlet; // An implementation of FileUpload for use in servlets conforming to JSR 53.\npackage fileupload.util; // This package contains various IO related utility classes or methods, which are basically reusable and not necessarily restricted to the scope of a file upload.\nInterface FileItem; // This class represents a file or form item that was received within a multipart/form-data POST request.\nInterface FileItemFactory; // A factory interface for creating FileItem instances.\nInterface FileItemHeaders; // This class provides support for accessing the headers for a file or form item that was received within a multipart/form-data POST request.\nInterface FileItemHeadersSupport; // Interface that will indicate that FileItem or FileItemStream implementations will accept the headers read for the item.\nInterface FileItemIterator; // An iterator, as returned by FileUploadBase.getItemIterator(RequestContext).\nInterface FileItemStream; // This interface provides access to a file or form item that was received within a multipart/form-data POST request.\nInterface ProgressListener; // The ProgressListener may be used to display a progress bar or do stuff like that.\nInterface RequestContext; // Abstracts access to the request information needed for file uploads.\nInterface UploadContext; // Enhanced access to the request information needed for file uploads, which fixes the Content Length data access in RequestContext.\nClass ByteArrayOutputStream; // This class implements an output stream in which the data is written into a byte array.\nClass DeferredFileOutputStream; // An output stream which will retain data in memory until a specified threshold is reached, and only then commit it to disk.\nClass FileUpload; // High level API for processing file uploads.\nClass FileUploadBase; // High level API for processing file uploads.\nClass FileUtils; // General file manipulation utilities.\nClass IOUtils; // General IO stream manipulation utilities.\nClass MultipartStream; // Low level API for processing file uploads.\nClass MultipartStream.ProgressNotifier; // Internal class, which is used to invoke the ProgressListener.\nClass ParameterParser; // A simple parser intended to parse sequences of name/value pairs.\nClass ThresholdingOutputStream; // An output stream which triggers an event when a specified number of bytes of data have been written to it.\n", "des": "NOTE: This code has been copied from commons-fileupload trunk 1.3 and commons-io 1.4 and package renamed to avoid clashes with any web apps that may wish to use these libraries."}
{"index": 2384, "repo": "spring-batch-core-5.0.2", "code": "package xml;\n\npublic abstract class AbstractFlowParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\npublic abstract class AbstractListenerParser extends Object;\npublic abstract class AbstractStepParser extends Object; // Internal parser for the <step/> elements inside a job.\npublic class BeanDefinitionUtils extends Object;\npublic class ChunkElementParser extends Object; // Internal parser for the <chunk/> element inside a step.\npublic class CoreNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport;\npublic class CoreNamespacePostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.context.ApplicationContextAware; // Post-process jobs and steps defined using the batch namespace to inject dependencies.\npublic class CoreNamespaceUtils extends Object; // Utility methods used in parsing of the batch core namespace.\npublic class DecisionParser extends Object; // Internal parser for the <decision/> elements inside a job.\npublic class ExceptionElementParser extends Object;\npublic class FlowElementParser extends Object; // Internal parser for the <flow/> elements inside a job.\npublic class InlineFlowParser extends AbstractFlowParser;\npublic class InlineStepParser extends AbstractStepParser; // Internal parser for the <step/> elements inside a job.\npublic class JobExecutionListenerParser extends AbstractListenerParser; // Parser for a step listener element.\npublic class JobParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the <job/> element in the Batch namespace.\npublic class JobParserJobFactoryBean extends Object implements org.springframework.beans.factory.SmartFactoryBean<FlowJob>; // This FactoryBean is used by the batch namespace parser to create FlowJob objects.\npublic class JobRepositoryParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the <job-repository/> element in the Batch namespace.\npublic class SimpleFlowFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<SimpleFlow>, org.springframework.beans.factory.InitializingBean; // Convenience factory for SimpleFlow instances for use in the XML namespace.\n", "des": "Parsers for XML based configuration"}
{"index": 1294, "repo": "spring-core-6.0.11", "code": "package concurrent;\n\n@Deprecated(since=\"6.0\") public class CompletableToListenableFutureAdapter<T> extends Object implements ListenableFuture<T>;\n@Deprecated(since=\"6.0\") @FunctionalInterface public interface FailureCallback;\n@Deprecated(since=\"6.0\") public abstract class FutureAdapter<T,S> extends Object implements Future<T>;\npublic abstract class FutureUtils extends Object; // Convenience utilities for working with Future and implementations.\n@Deprecated(since=\"6.0\") public interface ListenableFuture<T> extends Future<T>;\n@Deprecated(since=\"6.0\") public abstract class ListenableFutureAdapter<T,S> extends FutureAdapter<T,S> implements ListenableFuture<T>;\n@Deprecated(since=\"6.0\") public interface ListenableFutureCallback<T> extends SuccessCallback<T>, FailureCallback;\n@Deprecated(since=\"6.0\") public class ListenableFutureCallbackRegistry<T> extends Object;\n@Deprecated(since=\"6.0\") public class ListenableFutureTask<T> extends FutureTask<T> implements ListenableFuture<T>;\n@Deprecated(since=\"6.0\") public class MonoToListenableFutureAdapter<T> extends CompletableToListenableFutureAdapter<T>;\n@Deprecated(since=\"6.0\") public class SettableListenableFuture<T> extends Object implements ListenableFuture<T>;\n@Deprecated(since=\"6.0\") @FunctionalInterface public interface SuccessCallback<T>;\n", "des": "Useful generic java.util.concurrent.Future extensions."}
{"index": 1517, "repo": "spring-context-6.0.11", "code": "package config;\n\npublic class JeeNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for the 'jee' namespace.\n", "des": "Support package for EJB/Jakarta EE-related configuration, with XML schema being the primary configuration format."}
{"index": 1662, "repo": "jena-core-4.9.0", "code": "package shared;\n\npackage shared.impl; // This package provides \"standard\" implementations for the interfaces defined by .shared, notably an implementation of PrefixMapping.\npublic class AccessDeniedException extends OperationDeniedException; // Superclass of exceptions thrown when permissions do not allow an operation on a graph.\npublic class AddDeniedException extends AccessDeniedException; // Exception to throw for a denied add operation\npublic class AlreadyExistsException extends JenaException; // Exception to throw when an attempt is made to create a named object (eg persistent model) when an object of that name already exists.\npublic class AlreadyReifiedException extends CannotReifyException; // The exception raised by reifyAs if a node is already bound to a single reified triple.\npublic class AssertionFailureException extends JenaException; // Exception to throw when an assertion fails.\npublic class AuthenticationRequiredException extends OperationDeniedException; // Exception to indicate that authentication is required for the operation to proceed.\npublic class BadBooleanException extends JenaException; // Exception to throw when a string cannot be converted to a Boolean value.\npublic class BadCharLiteralException extends JenaException; // Exception to throw when a literal required to be a single character isn't.\npublic class BadDescriptionException extends JenaException; // Exception to throw if a model (or graph) is a bad description\npublic class BadDescriptionMultipleRootsException extends BadDescriptionException; // Exception to throw if a Description contains multiple roots of a specified type.\npublic class BadDescriptionNoRootException extends BadDescriptionException; // Exception to throw if a Description has no root of a specified type\n@Deprecated public class BadURIException extends JenaException;\npublic class BrokenException extends JenaException; // An exception to throw if an internal error is detected.\npublic class CannotCreateException extends OperationDeniedException;\npublic class CannotEncodeCharacterException extends JenaException; // Exception to throw when a character cannot be encoded into some context for some reason.\npublic class CannotReifyException extends JenaException; // The exception thrown by reifyAs if a node is bound to bits and pieces of (an)other triple(s).\npublic class ClosedException extends JenaException; // Exception that may be thrown if an operation is attempted on a closed graph.\npublic class ConfigException extends JenaException; // An Exception indicating that Jena is not working because it is not correctly configured.\npublic class DeleteDeniedException extends AccessDeniedException; // Exception to throw if a delete is denied.\n", "des": "This package defines some classes common to the Jena API and SPI levels, in particular the JenaException class from which all Jena-specific exceptions hang, and the interface PrefixMapping for translation to and from QNames."}
{"index": 2121, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "package plugin;\n\n@DisableCachingByDefault(because=\"Not worth caching\") public class ResolveMainClassName extends DefaultTask; // Task for resolving the name of the application's main class.\npublic class SpringBootAotPlugin extends Object implements Plugin<Project>; // Gradle plugin for Spring Boot AOT.\npublic class SpringBootPlugin extends Object implements Plugin<Project>; // Gradle plugin for Spring Boot.\n", "des": "Central classes for the Spring Boot Gradle plugin."}
{"index": 2880, "repo": "spring-integration-core-6.1.2", "code": "package selector;\n\npublic class MessageSelectorChain extends Object implements MessageSelector; // A message selector implementation that passes incoming messages through a chain of selectors.\npublic static enum MessageSelectorChain.VotingStrategy extends Enum<MessageSelectorChain.VotingStrategy>;\npublic class MetadataStoreSelector extends Object implements MessageSelector; // The MessageSelector implementation using a ConcurrentMetadataStore and MessageProcessor.\npublic class PayloadTypeSelector extends Object implements MessageSelector; // A MessageSelector implementation that checks the type of the Message payload.\npublic class UnexpiredMessageSelector extends Object implements MessageSelector; // A MessageSelector that accepts Messages that are not yet expired.\n", "des": "Provides classes related to message selection."}
{"index": 573, "repo": "hadoop-common-3.3.4", "code": "package functional;\n\nInterface BiFunctionRaisingIOE<T,U,R>; // Function of arity 2 which may raise an IOException.\nInterface CallableRaisingIOE<R>; // This is a callable which only raises an IOException.\nInterface ConsumerRaisingIOE<T>; // Version of java.util.function.Consumer which raises exceptions.\nInterface FunctionRaisingIOE<T,R>; // Function of arity 1 which may raise an IOException.\nInterface InvocationRaisingIOE; // This is a lambda-expression which may raises an IOException.\nClass CommonCallableSupplier<T>; // A bridge from Callable to Supplier; catching exceptions raised by the callable and wrapping them as appropriate.\nClass FutureIO; // Future IO Helper methods.\nClass RemoteIterators; // A set of remote iterators supporting transformation and filtering, with IOStatisticsSource passthrough, and of conversions of the iterators to lists/arrays and of performing actions on the values.\n", "des": "Support for functional programming within the Hadoop APIs."}
{"index": 1477, "repo": "tribuo-core-4.3.1", "code": "package tribuo;\n\npackage tribuo.dataset; // Provides utility datasets which subsample or otherwise transform the wrapped dataset.\npackage tribuo.datasource; // Simple data sources for ingesting or aggregating data.\npackage tribuo.ensemble; // Provides an interface for model prediction combinations, two base classes for ensemble models, a base class for ensemble excuses, and a Bagging implementation.\npackage tribuo.evaluation; // Evaluation base classes, along with code for train/test splits and cross validation.\npackage tribuo.hash; // Provides the base interface and implementations of the Model hashing which obscures the feature names stored in a model.\npackage tribuo.impl; // Provides implementations of base classes and interfaces from org.tribuo.\npackage tribuo.protos; // Classes which control the serialization of Tribuo objects to and from protocol buffers.\npackage tribuo.provenance; // Provides Tribuo specific infrastructure for the Provenance system which tracks models and datasets.\npackage tribuo.sequence; // Provides core classes for working with sequences of Examples.\npackage tribuo.transform; // Provides infrastructure for applying transformations to a Dataset.\npackage tribuo.util; // Provides utilities which don't have other Tribuo dependencies.\npublic class CategoricalIDInfo extends CategoricalInfo implements VariableIDInfo; // Same as a CategoricalInfo, but with an additional int id field.\npublic class CategoricalInfo extends SkeletalVariableInfo; // Stores information about Categorical features.\npublic interface ConfigurableDataSource<T extends Output<T>> extends DataSource<T>, com.oracle.labs.mlrg.olcut.config.Configurable; // It's a DataSource that's also Configurable.\npublic abstract class Dataset<T extends Output<T>> extends Object implements Iterable<Example<T>>, ProtoSerializable<org.tribuo.protos.core.DatasetProto>, com.oracle.labs.mlrg.olcut.provenance.Provenancable<DatasetProvenance>, Serializable; // A class for sets of data, which are used to train and evaluate classifiers.\n", "des": "Provides the core interfaces and classes for using Tribuo."}
{"index": 1908, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package dao;\n\n@AutoConfiguration @ConditionalOnClass(org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor.class) public class PersistenceExceptionTranslationAutoConfiguration extends Object; // Auto-configuration for Spring's persistence exception translation.\n", "des": "Auto-configuration for Spring DAO."}
{"index": 3366, "repo": "opencms-core-15.0", "code": "package commons;\n\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains often used OpenCms Workplace dialogs, for example for file operations, user preferences and project based operations like publishing."}
{"index": 3606, "repo": "lucene-queries-9.7.0", "code": "package intervals;\n\nInterface IntervalMatchesIterator; // An extension of MatchesIterator that allows it to be treated as an IntervalIterator\nClass FilteredIntervalsSource; // An IntervalsSource that filters the intervals from another IntervalsSource\nClass IntervalFilter; // Wraps an IntervalIterator and passes through those intervals that match the IntervalFilter.accept() function\nClass IntervalIterator; // A DocIdSetIterator that also allows iteration over matching intervals in a document.\nClass IntervalQuery; // A query that retrieves documents containing intervals returned from an IntervalsSource\nClass Intervals; // Factory functions for creating interval sources.\nClass IntervalsSource; // A helper class for IntervalQuery that provides an IntervalIterator for a given field and segment\n", "des": "Intervals queries"}
{"index": 1130, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package scheduler;\n\nInterface ResourceUtilizationTracker; // This interface abstracts out how a container contributes to Resource Utilization of the node.\nClass AllocationBasedResourceUtilizationTracker; // An implementation of the ResourceUtilizationTracker that equates resource utilization with the total resource allocated to the container.\nClass ContainerScheduler; // The ContainerScheduler manages a collection of runnable containers.\nClass ContainerSchedulerEvent; // Events consumed by the ContainerScheduler.\nClass UpdateContainerSchedulerEvent; // Update Event consumed by the ContainerScheduler.\nEnum ContainerSchedulerEventType; // Event types associated with ContainerSchedulerEvent.\n", "des": "Container Scheduler"}
{"index": 3062, "repo": "spring-ws-core-4.0.5", "code": "package dom;\n\npublic class DomPoxMessage extends Object implements PoxMessage; // Implementation of the PoxMessage interface that is based on a DOM Document.\npublic class DomPoxMessageException extends PoxMessageException; // Specific subclass of PoxMessageException for DOM Plain Old XML messages.\npublic class DomPoxMessageFactory extends org.springframework.xml.transform.TransformerObjectSupport implements WebServiceMessageFactory; // Implementation of the WebServiceMessageFactory interface that creates a DomPoxMessage.\n", "des": "Contains an implementation of the POX interfaces that is based on DOM."}
{"index": 1411, "repo": "spring-boot-actuator-3.1.1", "code": "package metrics;\n\npackage metrics.amqp; // Actuator support for RabbitMQ Java Client metrics.\npackage metrics.annotation; // Support classes for handler method metrics.\npackage metrics.cache; // Actuator support for cache metrics.\npackage metrics.data; // Actuator support for Spring Data Repository metrics.\npackage metrics.http; // Support classes for HTTP-related metrics.\npackage metrics.jdbc; // Actuator support for JDBC metrics.\npackage metrics.r2dbc; // Actuator support for R2DBC metrics.\npackage metrics.startup; // Actuator support for startup metrics.\npackage metrics.system; // Actuator support for system metrics.\n@FunctionalInterface public interface AutoTimer; // Strategy that can be used to apply Timers automatically instead of using @Timed.\n@Endpoint(id=\"metrics\") public class MetricsEndpoint extends Object; // An @Endpoint for exposing the metrics held by a MeterRegistry.\npublic static final class MetricsEndpoint.AvailableTag extends Object; // A set of tags for further dimensional drill-down and their potential values.\npublic static final class MetricsEndpoint.MetricDescriptor extends Object implements OperationResponseBody; // Description of a metric.\npublic static final class MetricsEndpoint.MetricNamesDescriptor extends Object implements OperationResponseBody; // Description of metric names.\npublic static final class MetricsEndpoint.Sample extends Object; // A measurement sample combining a statistic and a value.\n", "des": "Core actuator support for metrics."}
{"index": 23, "repo": "commons-collections4-4.4", "code": "package map;\n\nInterface CompositeMap.MapMutator<K,V>; // This interface allows definition for all of the indeterminate mutators in a CompositeMap, as well as providing a hook for callbacks on key collisions.\nInterface PassiveExpiringMap.ExpirationPolicy<K,V>; // A policy to determine the expiration time for key-value entries.\nClass AbstractHashedMap<K,V>; // An abstract implementation of a hash-based map which provides numerous points for subclasses to override.\nClass AbstractHashedMap.EntrySet<K,V>; // EntrySet implementation.\nClass AbstractHashedMap.EntrySetIterator<K,V>; // EntrySet iterator.\nClass AbstractHashedMap.HashEntry<K,V>; // HashEntry used to store the data.\nClass AbstractHashedMap.HashIterator<K,V>; // Base Iterator\nClass AbstractHashedMap.HashMapIterator<K,V>; // MapIterator implementation.\nClass AbstractHashedMap.KeySet<K>; // KeySet implementation.\nClass AbstractHashedMap.KeySetIterator<K>; // KeySet iterator.\nClass AbstractHashedMap.Values<V>; // Values implementation.\nClass AbstractHashedMap.ValuesIterator<V>; // Values iterator.\nClass AbstractIterableMap<K,V>; // Provide a basic IterableMap implementation.\nClass AbstractLinkedMap<K,V>; // An abstract implementation of a hash-based map that links entries to create an ordered map and which provides numerous points for subclasses to override.\nClass AbstractLinkedMap.EntrySetIterator<K,V>; // EntrySet iterator.\nClass AbstractLinkedMap.KeySetIterator<K>; // KeySet iterator.\nClass AbstractLinkedMap.LinkEntry<K,V>; // LinkEntry that stores the data.\nClass AbstractLinkedMap.LinkIterator<K,V>; // Base Iterator that iterates in link order.\nClass AbstractLinkedMap.LinkMapIterator<K,V>; // MapIterator implementation.\nClass AbstractLinkedMap.ValuesIterator<V>; // Values iterator.\nClass AbstractMapDecorator<K,V>; // Provides a base decorator that enables additional functionality to be added to a Map via decoration.\n", "des": "This package contains implementations of the Map, IterableMap, OrderedMap and SortedMap interfaces."}
{"index": 2618, "repo": "wicket-util-10.0.0-M1", "code": "package value;\n\npublic final class AttributeMap extends ValueMap; // Map of values, extending ValueMap with methods for generating (HTML) markup attributes.\npublic class CopyOnWriteValueMap extends Object implements IValueMap, Serializable; // An implementation of IValueMap that makes a copy when a caller tries to change an immutable Map.\npublic class IntValue extends Object implements Comparable<IntValue>, Serializable; // A base class based on the Java int primitive for value classes that want to implement standard operations on that value without the pain of aggregating an Integer object.\npublic interface IValueMap extends Map<String,Object>; // A Map interface that holds values, parses Strings, and exposes a variety of convenience methods.\npublic class LongValue extends Object implements Comparable<LongValue>, Serializable; // A base class based on the Java long primitive for value classes that want to implement standard operations on that value without the pain of aggregating a Long object.\npublic class ValueMap extends LinkedHashMap<String,Object> implements IValueMap; // A IValueMap implementation that holds values, parses Strings, and exposes a variety of convenience methods.\n", "des": "This package provides casting utilities."}
{"index": 1285, "repo": "spring-core-6.0.11", "code": "package support;\n\n@Deprecated(since=\"6.0.5\", forRemoval=true) public class ConcurrentExecutorAdapter extends Object implements Executor;\npublic class ExecutorServiceAdapter extends AbstractExecutorService; // Adapter that takes a Spring TaskExecutor and exposes a full java.util.concurrent.ExecutorService for it.\npublic class TaskExecutorAdapter extends Object implements AsyncListenableTaskExecutor; // Adapter that takes a JDK java.util.concurrent.Executor and exposes a Spring TaskExecutor for it.\n", "des": "Support classes for Spring's TaskExecutor abstraction."}
{"index": 2198, "repo": "spring-data-commons-3.1.2", "code": "package config;\n\npublic class AnnotationAuditingConfiguration extends Object implements AuditingConfiguration; // Default implementation for AuditingConfiguration.\npublic abstract class AuditingBeanDefinitionRegistrarSupport extends Object implements ImportBeanDefinitionRegistrar; // A ImportBeanDefinitionRegistrar that serves as a base class for store specific implementations for configuring audit support.\npublic interface AuditingConfiguration; // Configuration information for auditing.\npublic class AuditingHandlerBeanDefinitionParser extends AbstractSingleBeanDefinitionParser; // BeanDefinitionParser that parses an AuditingHandler BeanDefinition\npublic class IsNewAwareAuditingHandlerBeanDefinitionParser extends AuditingHandlerBeanDefinitionParser; // AuditingHandlerBeanDefinitionParser that will register am IsNewAwareAuditingHandler.\n", "des": "Types to abstract authentication concepts."}
{"index": 2443, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package integration;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration.class) @ConditionalOnClass(org.springframework.integration.graph.IntegrationGraphServer.class) @ConditionalOnBean(org.springframework.integration.config.IntegrationConfigurationBeanFactoryPostProcessor.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.integration.IntegrationGraphEndpoint.class) public class IntegrationGraphEndpointAutoConfiguration extends Object; // Auto-configuration for the IntegrationGraphEndpoint.\n", "des": "Auto-configuration for actuator Spring Integration concerns."}
{"index": 2147, "repo": "wicket-core-10.0.0-M1", "code": "package upload;\n\npublic class FileDescription extends Object implements Serializable; // Description of file properties as in browser client side.\npublic abstract class FilesSelectedBehavior extends OnChangeAjaxBehavior; // OnChangeAjaxBehavior that streams back to server properties of the selected file(s) (at client side), before uploading it (them).\npublic class FileUpload extends Object; // Model for file uploads.\npublic class FileUploadField extends FormComponent<List<FileUpload>>; // Form component that corresponds to a <input type=\"file\">.\npublic class MultiFileUploadField extends FormComponentPanel<Collection<FileUpload>>; // Form component that allows the user to select multiple files to upload via a single <input type=\"file\"/> field.\n", "des": "Support for upload forms (using multipart requests)."}
{"index": 3389, "repo": "commons-imaging-1.0-alpha3", "code": "package mylzw;\n\nInterface MyLzwCompressor.Listener;\nInterface MyLzwDecompressor.Listener;\nClass BitsToByteInputStream;\nClass MyBitInputStream;\nClass MyBitOutputStream;\nClass MyLzwCompressor;\nClass MyLzwDecompressor;\n", "des": "Provides LZW compression."}
{"index": 3427, "repo": "hibernate-core-5.6.15.Final", "code": "package registry;\n\npackage registry.selector; // Defines a feature-set around named registration of implementations of various contracts and the ability to select those implementations.\nInterface BootstrapServiceRegistry; // Provides the most basic services needed.\nInterface StandardServiceInitiator<R extends Service>; // Contract for an initiator of services that target the standard ServiceRegistry.\nInterface StandardServiceRegistry; // Specialization of the ServiceRegistry contract mainly for type safety.\nClass BootstrapServiceRegistryBuilder; // Builder for BootstrapServiceRegistry instances.\nClass StandardServiceRegistryBuilder; // Builder for standard ServiceRegistry instances.\n", "des": "Defines service registry contracts application are likely to want to utilize for configuring Hibernate behavior."}
{"index": 3524, "repo": "opennlp-tools-2.2.0", "code": "package muc;\n\nClass Muc6NameSampleStreamFactory;\nClass MucNameContentHandler;\nClass MucNameSampleStream;\nClass SgmlParser; // SAX style SGML parser.\nClass SgmlParser.ContentHandler;\n", "des": "Experimental package related to the MUC corpus format."}
{"index": 2544, "repo": "spring-security-core-6.1.2", "code": "package util;\n\npublic final class FieldUtils extends Object; // Offers static methods for directly manipulating fields.\npublic class InMemoryResource extends org.springframework.core.io.AbstractResource; // An in memory implementation of Spring's Resource interface.\npublic final class MethodInvocationUtils extends Object; // Static utility methods for creating MethodInvocations usable within Spring Security.\npublic class SimpleMethodInvocation extends Object implements org.aopalliance.intercept.MethodInvocation; // Represents the AOP Alliance MethodInvocation.\n", "des": "General utility classes used throughout the Spring Security framework."}
{"index": 1742, "repo": "spring-batch-integration-5.0.2", "code": "package xml;\n\npublic class BatchIntegrationNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // The namespace handler for the Spring Batch Integration namespace.\npublic class JobLaunchingGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // The parser for the Job-Launching Gateway, which will instantiate a JobLaunchingGatewayParser.\npublic class RemoteChunkingManagerParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser; // Parser for the remote-chunking-manager namespace element.\npublic class RemoteChunkingWorkerParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser; // Parser for the remote-chunking-worker namespace element.\n", "des": "APIs for the configuration of Spring Integration components through XML."}
{"index": 3241, "repo": "opencms-core-15.0", "code": "package rpc;\n\nInterface I_CmsContainerpageService; // The RPC service interface used by the container-page editor.\nInterface I_CmsContainerpageServiceAsync; // The RPC service asynchronous interface used by the container-page editor.\n", "des": "Contains the container page editor service interfaces."}
{"index": 693, "repo": "jackson-databind-2.15.2", "code": "package node;\n\nInterface JsonNodeCreator; // Interface that defines common \"creator\" functionality implemented both by JsonNodeFactory and ContainerNode (that is, JSON Object and Array nodes).\nClass ArrayNode; // Node class that represents Arrays mapped from JSON content.\nClass BaseJsonNode; // Abstract base class common to all standard JsonNode implementations.\nClass BigIntegerNode; // Numeric node that contains simple 64-bit integer values.\nClass BinaryNode; // Value node that contains Base64 encoded binary value, which will be output and stored as Json String value.\nClass BooleanNode; // This concrete value class is used to contain boolean (true / false) values.\nClass ContainerNode<T extends ContainerNode<T>>; // This intermediate base class is used for all container nodes, specifically, array and object nodes.\nClass DecimalNode; // Numeric node that contains values that do not fit in simple integer (int, long) or floating point (double) values.\nClass DoubleNode; // Numeric node that contains 64-bit (\"double precision\") floating point values simple 32-bit integer values.\nClass FloatNode; // JsonNode implementation for efficiently containing 32-bit `float` values.\nClass IntNode; // Numeric node that contains simple 32-bit integer values.\nClass JsonNodeFactory; // Base class that specifies methods for getting access to Node instances (newly constructed, or shared, depending on type), as well as basic implementation of the methods.\nClass LongNode; // Numeric node that contains simple 64-bit integer values.\nClass MissingNode; // This singleton node class is generated to denote \"missing nodes\" along paths that do not exist.\nClass NullNode; // This singleton value class is used to contain explicit JSON null value.\nClass NumericNode; // Intermediate value node used for numeric nodes.\nClass ObjectNode; // Node that maps to JSON Object structures in JSON content.\nClass POJONode; // Value node that contains a wrapped POJO, to be serialized as a JSON constructed through data mapping (usually done by calling ObjectMapper).\nClass ShortNode; // Numeric node that contains simple 16-bit integer values.\nClass TextNode; // Value node that contains a text value.\nClass TreeTraversingParser; // Facade over JsonNode that implements JsonParser to allow accessing contents of JSON tree in alternate form (stream of tokens).\n", "des": "Contains concrete JsonNode implementations Jackson uses for the Tree model."}
{"index": 2983, "repo": "pulsar-broker-3.0.0", "code": "package servlet;\n\npublic interface AdditionalServletWithPulsarService extends AdditionalServlet; // The additional servlet with pulsarService interface for support additional servlet to get pulsarService.\n", "des": "Pulsar broker servlet plugin."}
{"index": 2403, "repo": "spring-batch-core-5.0.2", "code": "package context;\n\npublic class ChunkContext extends org.springframework.core.AttributeAccessorSupport; // Context object for weakly typed data stored for the duration of a chunk (usually a group of items processed together in a transaction).\npublic class JobContext extends SynchronizedAttributeAccessor; // A context object that can be used to interrogate the current JobExecution and some of its associated properties using expressions based on bean paths.\npublic class JobScopeManager extends Object; // Convenient aspect to wrap a single threaded job execution, where the implementation of the Job is not job scope aware (i.e.\npublic class JobSynchronizationManager extends Object; // Central convenience class for framework use in managing the job scope context.\npublic class StepContext extends SynchronizedAttributeAccessor; // A context object that can be used to interrogate the current StepExecution and some of its associated properties using expressions based on bean paths.\npublic abstract class StepContextRepeatCallback extends Object implements RepeatCallback; // Convenient base class for clients who need to do something in a repeat callback inside a Step.\npublic class StepScopeManager extends Object; // Convenient aspect to wrap a single threaded step execution, where the implementation of the Step is not step scope aware (i.e.\npublic class StepSynchronizationManager extends Object; // Central convenience class for framework use in managing the step scope context.\npublic abstract class SynchronizationManagerSupport<E,C> extends Object; // Central convenience class for framework use in managing the scope context.\n", "des": "Implementation of the contexts for each of the custom bean scopes in Spring Batch (Job and Step)."}
{"index": 1055, "repo": "commons-rdf-api-0.5.0", "code": "package api;\n\nInterface BlankNode; // A RDF-1.1 Blank Node, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014. Note: Blank nodes are disjoint from IRIs and literals.\nInterface BlankNodeOrIRI; // This interface represents the RDFTerms that may be used in the subject position of an RDF-1.1 Triple as well as the graph name position of a Quad.\nInterface Dataset; // An RDF 1.1 Dataset, a set of RDF quads, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014.\nInterface Graph; // An RDF 1.1 Graph, a set of RDF triples, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014.\nInterface GraphLike<T extends TripleLike>; // A \"graph-like\" interface that contains TripleLike statements.\nInterface IRI; // An RDF-1.1 IRI, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014.\nInterface Literal; // An RDF-1.1 Literal, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014.\nInterface Quad; // A Quad is a statement in a RDF-1.1 Dataset, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Working Group Note published on 25 February 2014.\nInterface QuadLike<G extends RDFTerm>; // A generalised \"quad-like\" interface, extended by Quad.\nInterface RDF; // A RDF implementation.\nInterface RDFSyntax; // An RDF syntax, e.g.\nInterface RDFTerm; // An RDF-1.1 Term, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014.\nInterface RDFTermFactory;\nInterface Triple; // An RDF-1.1 Triple, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014.\n", "des": "Commons RDF, a common library of RDF 1.1 concepts."}
{"index": 1279, "repo": "spring-core-6.0.11", "code": "package metrics;\n\npackage metrics.jfr; // Support package for recording startup metrics using Java Flight Recorder.\npublic interface ApplicationStartup; // Instruments the application startup phase using steps.\npublic interface StartupStep; // Step recording metrics about a particular phase or action happening during the ApplicationStartup.\npublic static interface StartupStep.Tag; // Simple key/value association for storing step metadata.\npublic static interface StartupStep.Tags extends Iterable<StartupStep.Tag>; // Immutable collection of StartupStep.Tag.\n", "des": "Support package for recording metrics during application startup."}
{"index": 666, "repo": "commons-lang3-3.12.0", "code": "package concurrent;\n\npackage concurrent.locks; // Provides support classes for multi-threaded programming.\nInterface CircuitBreaker<T>; // An interface describing a Circuit Breaker component.\nInterface Computable<I,O>; // Definition of an interface for a wrapper around a calculation that takes a single parameter and returns a result.\nInterface ConcurrentInitializer<T>; // Definition of an interface for the thread-safe initialization of objects.\nClass AbstractCircuitBreaker<T>; // Base class for circuit breakers.\nClass AtomicInitializer<T>; // A specialized implementation of the ConcurrentInitializer interface based on an AtomicReference variable.\nClass AtomicSafeInitializer<T>; // A specialized ConcurrentInitializer implementation which is similar to AtomicInitializer, but ensures that the AtomicSafeInitializer.initialize() method is called only once.\nClass BackgroundInitializer<T>; // A class that allows complex initialization operations in a background task.\nClass BasicThreadFactory; // An implementation of the ThreadFactory interface that provides some configuration options for the threads it creates.\nClass BasicThreadFactory.Builder; // A builder class for creating instances of BasicThreadFactory.\nClass CallableBackgroundInitializer<T>; // A specialized BackgroundInitializer implementation that wraps a Callable object.\nClass ConcurrentUtils; // An utility class providing functionality related to the java.util.concurrent package.\nClass ConstantInitializer<T>; // A very simple implementation of the ConcurrentInitializer interface which always returns the same object.\nClass EventCountCircuitBreaker; // A simple implementation of the Circuit Breaker pattern that counts specific events.\nClass LazyInitializer<T>; // This class provides a generic implementation of the lazy initialization pattern.\nClass Memoizer<I,O>; // Definition of an interface for a wrapper around a calculation that takes a single parameter and returns a result.\nClass MultiBackgroundInitializer; // A specialized BackgroundInitializer implementation that can deal with multiple background initialization tasks.\nClass MultiBackgroundInitializer.MultiBackgroundInitializerResults; // A data class for storing the results of the background initialization performed by MultiBackgroundInitializer.\nClass ThresholdCircuitBreaker; // A simple implementation of the Circuit Breaker pattern that opens if the requested increment amount is greater than a given threshold.\nClass TimedSemaphore; // A specialized semaphore implementation that provides a number of permits in a given time frame.\nEnum AbstractCircuitBreaker.State; // An internal enumeration representing the different states of a circuit breaker.\n", "des": "Provides support classes for multi-threaded programming."}
{"index": 3037, "repo": "spring-web-6.0.11", "code": "package method;\n\npackage method.annotation; // Support classes for annotation-based handler method processing.\npackage method.support; // Generic support classes for handler method processing.\npublic class ControllerAdviceBean extends Object implements org.springframework.core.Ordered; // Encapsulates information about an @ControllerAdvice Spring-managed bean without necessarily requiring it to be instantiated.\npublic class HandlerMethod extends Object; // Encapsulates information about a handler method consisting of a method and a bean.\npublic final class HandlerTypePredicate extends Object implements Predicate<Class<?>>; // A Predicate to match request handling component types if any of the following selectors match: Base packages -- for selecting handlers by their package.\npublic static class HandlerTypePredicate.Builder extends Object; // A HandlerTypePredicate builder.\n", "des": "Common infrastructure for handler method processing, as used by Spring MVC's org.springframework.web.servlet.mvc.method package."}
{"index": 1656, "repo": "jena-core-4.9.0", "code": "package xmloutput;\n\npublic interface RDFXMLWriterI extends RDFWriterI; // This interface only adds documentation to RDFWriterI.\n", "des": "Writing RDF/XML."}
{"index": 1688, "repo": "spring-data-couchbase-5.1.2", "code": "package config;\n\n@Configuration public abstract class AbstractCouchbaseConfiguration extends Object; // Base class for Spring Data Couchbase configuration using JavaConfig.\npublic class BeanNames extends Object; // Contains default bean names for Couchbase beans.\n", "des": "This package contains all classes needed for specific configuration of Spring Data Couchbase."}
{"index": 2832, "repo": "spring-data-r2dbc-3.1.2", "code": "package mapping;\n\npackage mapping.event; // Mapping event callback infrastructure for the R2DBC row-to-object mapping subsystem.\npublic class OutboundRow extends Object implements Map<SqlIdentifier,Parameter>, Cloneable; // Representation of a Row to be written through a INSERT or UPDATE statement.\npublic class R2dbcMappingContext extends RelationalMappingContext; // R2DBC-specific extension to RelationalMappingContext.\npublic class R2dbcSimpleTypeHolder extends SimpleTypeHolder; // Simple constant holder for a SimpleTypeHolder enriched with R2DBC specific simple types.\n", "des": "Domain objects for R2DBC."}
{"index": 2371, "repo": "pulsar-client-api-3.0.0", "code": "package api;\n\npackage api.interceptor; // Pulsar interceptors.\npackage api.schema; // Schema definitions for Pulsar Client API.\npackage api.transaction; // Pulsar transaction related API.\n@LimitedPrivate @Stable public interface Authentication extends Closeable, Serializable; // Interface of authentication providers.\n@LimitedPrivate @Stable public interface AuthenticationDataProvider extends Serializable; // Interface for accessing data which are used in variety of authentication schemes on client side.\n@LimitedPrivate @Stable public final class AuthenticationFactory extends Object; // Factory class that allows to create Authentication instances for all the supported authentication methods.\n@Public @Evolving public interface AutoClusterFailoverBuilder; // AutoClusterFailoverBuilder is used to configure and create instance of ServiceUrlProvider.\npublic static enum AutoClusterFailoverBuilder.FailoverPolicy extends Enum<AutoClusterFailoverBuilder.FailoverPolicy>;\n@Public @Stable public interface BatcherBuilder extends Serializable; // Batcher builder.\n@Public @Stable public interface BatchMessageContainer; // Batch message container for individual messages being published until they are batched and sent to broker.\n@Public @Stable public class BatchReceivePolicy extends Object implements Serializable; // Configuration for message batch receive Consumer.batchReceive() Consumer.batchReceiveAsync().\npublic static class BatchReceivePolicy.Builder extends Object; // Builder of BatchReceivePolicy.\n@Public @Stable public interface ClientBuilder extends Serializable, Cloneable; // Builder interface that is used to configure and construct a PulsarClient instance.\n@Public @Stable public enum CompressionType extends Enum<CompressionType>; // The compression type that can be specified on a Producer.\n@Public @Stable public interface Consumer<T> extends Closeable, MessageAcknowledger; // An interface that abstracts behavior of Pulsar's consumer.\n@Public @Stable public interface ConsumerBuilder<T> extends Cloneable; // ConsumerBuilder is used to configure and create instances of Consumer.\n@Public @Stable public enum ConsumerCryptoFailureAction extends Enum<ConsumerCryptoFailureAction>; // The action a consumer should take when a consumer receives a message that it cannot decrypt.\n@Public @Stable public interface ConsumerEventListener extends Serializable; // Listener on the consumer state changes.\n@Public @Stable public interface ConsumerInterceptor<T> extends AutoCloseable; // A plugin interface that allows you to intercept (and possibly mutate) messages received by the consumer.\n", "des": "Pulsar Client API."}
{"index": 1980, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package connection;\n\npublic interface ConnectionDetails; // Base interface for types that provide the details required to establish a connection to a remote service.\npublic class ConnectionDetailsFactories extends Object; // A registry of ConnectionDetailsFactory instances.\npublic interface ConnectionDetailsFactory<S,D extends ConnectionDetails>; // A factory to create ConnectionDetails from a given source.\npublic class ConnectionDetailsFactoryNotFoundException extends RuntimeException; // RuntimeException thrown when a ConnectionDetailsFactory could not be found.\npublic class ConnectionDetailsNotFoundException extends RuntimeException; // RuntimeException thrown when required ConnectionDetails could not be found.\n", "des": "Support for service connections that affect auto-configuration."}
{"index": 1405, "repo": "spring-boot-actuator-3.1.1", "code": "package jms;\n\npublic class JmsHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for a JMS ConnectionFactory.\n", "des": "Actuator support for JMS."}
{"index": 1805, "repo": "spring-aop-6.0.11", "code": "package adapter;\n\npublic interface AdvisorAdapter; // Interface allowing extension to the Spring AOP framework to allow handling of new Advisors and Advice types.\npublic class AdvisorAdapterRegistrationManager extends Object implements org.springframework.beans.factory.config.BeanPostProcessor; // BeanPostProcessor that registers AdvisorAdapter beans in the BeanFactory with an AdvisorAdapterRegistry (by default the GlobalAdvisorAdapterRegistry).\npublic interface AdvisorAdapterRegistry; // Interface for registries of Advisor adapters.\npublic class AfterReturningAdviceInterceptor extends Object implements MethodInterceptor, AfterAdvice, Serializable; // Interceptor to wrap an AfterReturningAdvice.\npublic class DefaultAdvisorAdapterRegistry extends Object implements AdvisorAdapterRegistry, Serializable; // Default implementation of the AdvisorAdapterRegistry interface.\npublic final class GlobalAdvisorAdapterRegistry extends Object; // Singleton to publish a shared DefaultAdvisorAdapterRegistry instance.\npublic class MethodBeforeAdviceInterceptor extends Object implements MethodInterceptor, BeforeAdvice, Serializable; // Interceptor to wrap a MethodBeforeAdvice.\npublic class ThrowsAdviceInterceptor extends Object implements MethodInterceptor, AfterAdvice; // Interceptor to wrap an after-throwing advice.\npublic class UnknownAdviceTypeException extends IllegalArgumentException; // Exception thrown when an attempt is made to use an unsupported Advisor or Advice type.\n", "des": "SPI package allowing Spring AOP framework to handle arbitrary advice types."}
{"index": 3136, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface NativeQueryInterpreter; // Service contract for dealing with native queries.\nInterface ParameterParser.Recognizer; // Maybe better named a Journaler.\nInterface QueryPlanCache.QueryPlanCreator;\nClass AbstractParameterDescriptor; // NOTE: Consider this contract (and its sub-contracts) as incubating as we transition to 6.0 and SQM\nClass EntityGraphQueryHint; // Encapsulates a JPA EntityGraph provided through a JPQL query hint.\nClass FilterQueryPlan; // Extends an HQLQueryPlan to maintain a reference to the collection-role name being filtered.\nClass HQLQueryPlan; // Defines a query execution plan for an HQL query (or filter).\nClass NamedParameterDescriptor; // Descriptor regarding a named parameter.\nClass NativeQueryInterpreterInitiator;\nClass NativeSQLQueryPlan; // Defines a query execution plan for a native-SQL query.\nClass OrdinalParameterDescriptor; // Descriptor regarding an ordinal parameter.\nClass ParameterParser; // The single available method ParameterParser.parse(java.lang.String, org.hibernate.engine.query.spi.ParameterParser.Recognizer) is responsible for parsing a query string and recognizing tokens in relation to parameters (either named, JPA-style, or ordinal) and providing callbacks about such recognitions.\nClass ParamLocationRecognizer; // Implements a parameter parser recognizer specifically for the purpose of journaling parameter locations.\nClass ParamLocationRecognizer.InFlightJpaOrdinalParameterState; // Internal in-flight representation of a recognized named parameter\nClass ParamLocationRecognizer.InFlightNamedParameterState; // Internal in-flight representation of a recognized named parameter\nClass ParamLocationRecognizer.InFlightOrdinalParameterState; // Internal in-flight representation of a recognized named parameter\nClass QueryPlanCache; // Acts as a cache for compiled query plans, as well as query-parameter metadata.\nClass ReturnMetadata; // Metadata about the query return(s).\n", "des": "Defines support for query plans and stored metadata about queries"}
{"index": 3070, "repo": "spring-ws-core-4.0.5", "code": "package interceptor;\n\npublic abstract class AbstractValidatingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointInterceptor, org.springframework.beans.factory.InitializingBean; // Abstract base class for EndpointInterceptor implementations that validate part of the message using a schema.\npublic class DelegatingSmartEndpointInterceptor extends Object implements SmartEndpointInterceptor; // Implementation of the SmartEndpointInterceptor interface that delegates to a delegate EndpointInterceptor.\npublic class EndpointInterceptorAdapter extends Object implements EndpointInterceptor; // Default implementation of the EndpointInterceptor interface, for simplified implementation of pre-only/post-only interceptors.\npublic class PayloadLoggingInterceptor extends AbstractLoggingInterceptor; // Simple EndpointInterceptor that logs the payload of request and response messages.\npublic class PayloadTransformingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointInterceptor, org.springframework.beans.factory.InitializingBean; // Interceptor that transforms the payload of WebServiceMessages using XSLT stylesheet.\n", "des": "Provides miscellaneous endpoints EndpointInterceptor implementations."}
{"index": 433, "repo": "kafka-streams-3.5.0", "code": "package api;\n\nInterface FixedKeyProcessor<KIn,VIn,VOut>; // A processor of key-value pair records where keys are immutable.\nInterface FixedKeyProcessorContext<KForward,VForward>; // Processor context interface for FixedKeyRecord.\nInterface FixedKeyProcessorSupplier<KIn,VIn,VOut>; // A processor supplier that can create one or more FixedKeyProcessor instances.\nInterface ProcessingContext; // Processor context interface.\nInterface Processor<KIn,VIn,KOut,VOut>; // A processor of key-value pair records.\nInterface ProcessorContext<KForward,VForward>; // Processor context interface for Record.\nInterface ProcessorSupplier<KIn,VIn,KOut,VOut>; // A processor supplier that can create one or more Processor instances.\nInterface RecordMetadata;\nClass ContextualFixedKeyProcessor<KIn,VIn,VOut>; // An abstract implementation of FixedKeyProcessor that manages the FixedKeyProcessorContext instance and provides default no-op implementation of FixedKeyProcessor.close().\nClass ContextualProcessor<KIn,VIn,KOut,VOut>; // An abstract implementation of Processor that manages the ProcessorContext instance and provides default no-op implementation of Processor.close().\nClass FixedKeyRecord<K,V>; // A data class representing an incoming record with fixed key for processing in a FixedKeyProcessor or a record to forward to downstream processors via FixedKeyProcessorContext.\nClass InternalFixedKeyRecordFactory;\nClass Record<K,V>; // A data class representing an incoming record for processing in a Processor or a record to forward to downstream processors via ProcessorContext.\n", "des": "Provides a low-level programming model (Processor API, aka, PAPI) to express a (stateful) data flow computation over input topics."}
{"index": 512, "repo": "commons-vfs2-2.9.0", "code": "package impl;\n\nClass DecoratedFileObject; // Base class to build a fileObject decoration.\nClass DefaultFileContentInfo; // The default file content information.\nClass DefaultFileMonitor; // A polling FileMonitor implementation.\nClass DefaultFileReplicator; // A simple file replicator and temporary file store.\nClass DefaultFileSystemConfigBuilder; // Default options usable for all file systems.\nClass DefaultFileSystemManager; // The default file system manager implementation.\nClass DefaultProviderConfiguration; // Same as ProviderConfiguration but for the default provider.\nClass FileContentInfoFilenameFactory; // The FileContentInfoFilenameFactory.\nClass PrivilegedFileReplicator; // A file replicator that wraps another file replicator, performing the replication as a privileged action.\nClass ProviderConfiguration; // This class describes the configuration for a provider.\nClass StandardFileSystemManager; // A FileSystemManager that configures itself from an XML (Default: providers.xml) configuration file.\nClass SynchronizedFileObject; // This decorator synchronize all access to the FileObject.\nClass VFSClassLoader; // A class loader that can load classes and resources from a search path.\nClass VirtualFileName; // A simple Filename to hold the scheme for to be created virtual file system.\nClass VirtualFileProvider; // A virtual file system provider.\nClass VirtualFileSystem; // A logical file system, made up of set of junctions, or links, to files from other file systems.\n", "des": "The standard VFS implementation."}
{"index": 2567, "repo": "pulsar-common-3.0.0", "code": "package schema;\n\npublic class LongSchemaVersion extends Object implements SchemaVersion; // Long schema version.\n", "des": "Implementation of the common of the pulsar schema."}
{"index": 1486, "repo": "tribuo-core-4.3.1", "code": "package provenance;\n\npackage provenance.impl; // Provides internal implementations for empty provenance classes and TrainerProvenance.\npublic interface ConfiguredDataSourceProvenance extends DataSourceProvenance, com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // A tag interface for configurable data source provenance.\npublic interface DataProvenance extends com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Tag interface for data sources provenances.\npublic class DatasetProvenance extends Object implements DataProvenance, com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Base class for dataset provenance.\npublic interface DataSourceProvenance extends DataProvenance, com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Data source provenance.\npublic class EnsembleModelProvenance extends ModelProvenance; // Model provenance for ensemble models.\npublic final class EvaluationProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Provenance for evaluations.\npublic interface FeatureSelectorProvenance extends com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // A tag interface for feature selection algorithms.\npublic final class FeatureSetProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Contains provenance information for an instance of a SelectedFeatureSet.\npublic class ModelProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Contains provenance information for an instance of a Model.\npublic interface OutputFactoryProvenance extends com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // A tag provenance for an output factory.\npublic class SimpleDataSourceProvenance extends Object implements DataSourceProvenance; // This class stores a String describing the data source, along with a timestamp.\npublic abstract class SkeletalTrainerProvenance extends com.oracle.labs.mlrg.olcut.provenance.impl.SkeletalConfiguredObjectProvenance implements TrainerProvenance; // The skeleton of a TrainerProvenance that extracts the configured parameters.\n", "des": "Provides Tribuo specific infrastructure for the Provenance system which tracks models and datasets."}
{"index": 2031, "repo": "spring-messaging-6.0.11", "code": "package reactive;\n\npublic abstract class AbstractEncoderMethodReturnValueHandler extends Object implements HandlerMethodReturnValueHandler; // Base class for a return value handler that encodes return values to Flux<DataBuffer> through the configured Encoders.\npublic abstract class AbstractMethodMessageHandler<T> extends Object implements ReactiveMessageHandler, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.BeanNameAware; // Abstract base class for reactive HandlerMethod-based message handling.\npublic class ArgumentResolverConfigurer extends Object; // Assist with configuration for handler method argument resolvers.\npublic interface HandlerMethodArgumentResolver; // Strategy interface for resolving method parameters into argument values in the context of a given Message.\npublic class HandlerMethodArgumentResolverComposite extends Object implements HandlerMethodArgumentResolver; // Resolves method parameters by delegating to a list of registered HandlerMethodArgumentResolvers.\npublic interface HandlerMethodReturnValueHandler; // Handle the return value from the invocation of an annotated Message handling method.\npublic class HandlerMethodReturnValueHandlerComposite extends Object implements HandlerMethodReturnValueHandler; // A HandlerMethodReturnValueHandler that wraps and delegates to others.\npublic class InvocableHandlerMethod extends HandlerMethod; // Extension of HandlerMethod that invokes the underlying method with argument values resolved from the current HTTP request through a list of HandlerMethodArgumentResolver.\npublic class ReturnValueHandlerConfigurer extends Object; // Assist with configuration for handler method return value handlers.\npublic interface SyncHandlerMethodArgumentResolver extends HandlerMethodArgumentResolver; // An extension of HandlerMethodArgumentResolver for implementations that are synchronous in nature and do not block to resolve values.\n", "des": "Common infrastructure for invoking message handler methods with non-blocking, and reactive contracts."}
{"index": 2113, "repo": "spring-retry-2.0.2", "code": "package retry;\n\npackage retry.backoff; // Infrastructure implementations of retry backoff concerns.\npackage retry.context; // Infrastructure implementations of retry context concerns.\npackage retry.interceptor; // Infrastructure implementations of retry aop concerns.\npackage retry.listener; // Infrastructure implementations of retry interceptor concerns.\npackage retry.policy; // Infrastructure implementations of retry policy concerns.\npackage retry.support; // Infrastructure implementations of retry support concerns.\npublic class ExhaustedRetryException extends RetryException;\npublic interface RecoveryCallback<T>; // Callback for stateful retry after all tries are exhausted.\npublic interface RetryCallback<T,E extends Throwable>; // Callback interface for an operation that can be retried using a RetryOperations.\npublic interface RetryContext extends org.springframework.core.AttributeAccessor; // Low-level access to ongoing retry operation.\npublic class RetryException extends org.springframework.core.NestedRuntimeException;\npublic interface RetryListener; // Interface for listener that can be used to add behaviour to a retry.\npublic interface RetryOperations; // Defines the basic set of operations implemented by RetryOperations to execute operations with configurable retry behaviour.\npublic interface RetryPolicy extends Serializable; // A RetryPolicy is responsible for allocating and managing resources needed by RetryOperations.\npublic interface RetryState; // Stateful retry is characterised by having to recognise the items that are being processed, so this interface is used primarily to provide a cache key in between failed attempts.\npublic interface RetryStatistics; // Interface for statistics reporting of retry attempts.\npublic class TerminatedRetryException extends RetryException;\n", "des": "Infrastructure implementations of retry concerns."}
{"index": 3698, "repo": "solr-core-9.3.0", "code": "package responseprocessor;\n\nClass SearchGroupShardResponseProcessor; // Concrete implementation for merging SearchGroup instances from shard responses.\nClass StoredFieldsShardResponseProcessor; // Concrete implementation for processing the stored field values from shard responses.\nClass TopGroupsShardResponseProcessor; // Concrete implementation for merging TopGroups instances from shard responses.\n", "des": "Internal classes used to implement distributed result grouping"}
{"index": 2353, "repo": "spring-boot-3.1.1", "code": "package client;\n\n@FunctionalInterface public interface WebClientCustomizer; // Callback interface that can be used to customize a WebClient.Builder.\n", "des": "Spring WebFlux WebClient support abstractions."}
{"index": 25, "repo": "commons-collections4-4.4", "code": "package multiset;\n\nClass AbstractMapMultiSet<E>; // Abstract implementation of the MultiSet interface to simplify the creation of subclass implementations.\nClass AbstractMapMultiSet.EntrySetIterator<E>; // Inner class EntrySetIterator.\nClass AbstractMapMultiSet.MultiSetEntry<E>; // Inner class MultiSetEntry.\nClass AbstractMapMultiSet.MutableInteger; // Mutable integer class for storing the data.\nClass AbstractMapMultiSet.UniqueSetIterator<E>; // Inner class UniqueSetIterator.\nClass AbstractMultiSet<E>; // Abstract implementation of the MultiSet interface to simplify the creation of subclass implementations.\nClass AbstractMultiSet.AbstractEntry<E>; // Inner class AbstractEntry.\nClass AbstractMultiSet.EntrySet<E>; // Inner class EntrySet.\nClass AbstractMultiSet.UniqueSet<E>; // Inner class UniqueSet.\nClass AbstractMultiSetDecorator<E>; // Decorates another MultSet to provide additional behaviour.\nClass HashMultiSet<E>; // Implements MultiSet, using a HashMap to provide the data storage.\nClass PredicatedMultiSet<E>; // Decorates another MultiSet to validate that additions match a specified predicate.\nClass SynchronizedMultiSet<E>; // Decorates another MultiSet to synchronize its behaviour for a multi-threaded environment.\nClass UnmodifiableMultiSet<E>; // Decorates another MultiSet to ensure it can't be altered.\n", "des": "This package contains implementations of the MultiSet interface."}
{"index": 2662, "repo": "spring-data-cassandra-4.1.2", "code": "package observability;\n\npublic class CassandraObservationContext extends io.micrometer.observation.transport.SenderContext<Object>; // A Observation.Context for CqlSession.\npublic interface CassandraObservationConvention extends io.micrometer.observation.ObservationConvention<CassandraObservationContext>; // ObservationConvention for Cassandra.\npublic interface CassandraObservationSupplier; // Returns the Cassandra Observation.\npublic final class ObservableCqlSessionFactory extends Object; // Factory to wrap a CqlSession with a CqlSessionObservationInterceptor.\npublic class ObservableCqlSessionFactoryBean extends AbstractFactoryBean<com.datastax.oss.driver.api.core.CqlSession>; // Factory bean to construct a CqlSession integrated with given ObservationRegistry.\npublic class ObservableReactiveSession extends Object implements ReactiveSession; // Instrumented ReactiveSession for observability.\npublic final class ObservableReactiveSessionFactory extends Object; // Factory to wrap a ReactiveSession with ObservableReactiveSession.\npublic class ObservableReactiveSessionFactoryBean extends AbstractFactoryBean<ReactiveSession>; // Factory bean to construct a ReactiveSession integrated with given ObservationRegistry.\npublic enum ObservationRequestTracker extends Enum<ObservationRequestTracker> implements com.datastax.oss.driver.api.core.tracker.RequestTracker; // Trace implementation of the RequestTracker.\n", "des": "Infrastructure to provide driver observability using Micrometer."}
{"index": 1467, "repo": "spring-data-redis-3.1.2", "code": "package atomic;\n\npublic class RedisAtomicDouble extends Number implements Serializable, BoundKeyOperations<String>; // Atomic double backed by Redis.\npublic class RedisAtomicInteger extends Number implements Serializable, BoundKeyOperations<String>; // Atomic integer backed by Redis.\npublic class RedisAtomicLong extends Number implements Serializable, BoundKeyOperations<String>; // Atomic long backed by Redis.\n", "des": "Small toolkit mirroring the java.util.atomic package in Redis."}
{"index": 1088, "repo": "graal-sdk-1.0.0-rc7", "code": "package proxy;\n\nInterface Proxy; // Proxy interfaces allow to mimic guest language objects, arrays, executables, primitives and native objects in Graal languages.\nInterface ProxyArray; // Interface to be implemented to mimic guest language arrays.\nInterface ProxyExecutable; // Interface to be implemented to mimic guest language objects that are executable.\nInterface ProxyInstantiable; // Interface to be implemented to mimic guest language objects that are instantiable.\nInterface ProxyNativeObject; // Interface to be implemented to mimic native pointers.\nInterface ProxyObject; // Interface to be implemented to mimic guest language objects that contain members.\n", "des": "The Graal SDK proxy interfaces allow to mimic guest language objects, arrays, executables, primitives and native objects in Graal languages."}
{"index": 1280, "repo": "spring-core-6.0.11", "code": "package jfr;\n\npublic class FlightRecorderApplicationStartup extends Object implements ApplicationStartup; // ApplicationStartup implementation for the Java Flight Recorder.\n", "des": "Support package for recording startup metrics using Java Flight Recorder."}
{"index": 772, "repo": "lucene-analyzers-common-8.11.2", "code": "package el;\n\nClass GreekAnalyzer; // Analyzer for the Greek language.\nClass GreekLowerCaseFilter; // Normalizes token text to lower case, removes some Greek diacritics, and standardizes final sigma to sigma.\nClass GreekLowerCaseFilterFactory; // Factory for GreekLowerCaseFilter.\nClass GreekStemFilter; // A TokenFilter that applies GreekStemmer to stem Greek words.\nClass GreekStemFilterFactory; // Factory for GreekStemFilter.\nClass GreekStemmer; // A stemmer for Greek words, according to: Development of a Stemmer for the Greek Language. Georgios Ntais\n", "des": "Analyzer for Greek."}
{"index": 2560, "repo": "pulsar-common-3.0.0", "code": "package policies;\n\npackage policies.data; // Definition of different data structures for policies.\npackage policies.impl; // Implementation of policies.\npackage policies.path; // Paths for pulsar policies.\npublic interface NamespaceIsolationPolicy; // Namespace isolation policy.\n", "des": "Common policies."}
{"index": 3114, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\npackage spi.interceptor; // interceptor implementations\nInterface CollectionTracker; // Interface to be implemented by collection trackers that hold the expected size od collections, a simplified Map<String, int>.\nInterface EnhancementContext; // The context for performing an enhancement.\nInterface Enhancer; // Class responsible for performing enhancement.\nInterface LazyPropertyInitializer; // Contract for controlling how lazy properties get initialized.\nInterface LazyPropertyInitializer.InterceptorImplementor;\nInterface UnloadedClass;\nInterface UnloadedField;\nClass DefaultEnhancementContext; // default implementation of EnhancementContext.\nClass EnhancementContextWrapper;\nClass EnhancerConstants; // Constants used during enhancement.\nClass EnhancementException; // An exception indicating some kind of problem performing bytecode enhancement.\n", "des": "package defining bytecode code enhancement (instrumentation) support."}
{"index": 1383, "repo": "spring-boot-actuator-3.1.1", "code": "package endpoint;\n\npackage endpoint.annotation; // Annotation support for actuator endpoints.\npackage endpoint.invoke; // Interfaces and classes relating to invoking operation methods.\npackage endpoint.jackson; // Jackson support classes for actuator endpoints.\npackage endpoint.jmx; // JMX support for actuator endpoints.\npackage endpoint.web; // Web support for actuator endpoints.\npublic abstract class AbstractExposableEndpoint<O extends Operation> extends Object implements ExposableEndpoint<O>; // Abstract base class for ExposableEndpoint implementations.\npublic enum ApiVersion extends Enum<ApiVersion> implements Producible<ApiVersion>; // API versions supported for the actuator API.\n@FunctionalInterface public interface EndpointFilter<E extends ExposableEndpoint<?>>; // Strategy class that can be used to filter endpoints.\npublic final class EndpointId extends Object; // An identifier for an actuator endpoint.\n@FunctionalInterface public interface EndpointsSupplier<E extends ExposableEndpoint<?>>; // Provides access to a collection of endpoints.\npublic interface ExposableEndpoint<O extends Operation>; // Information describing an endpoint that can be exposed in some technology specific way.\npublic class InvalidEndpointRequestException extends RuntimeException; // Indicate that an endpoint request is invalid.\npublic class InvocationContext extends Object; // The context for the invocation of an operation.\npublic interface Operation; // An operation on an endpoint.\npublic interface OperationArgumentResolver; // Resolver for an argument of an Operation.\npublic interface OperationResponseBody; // Tagging interface used to indicate that an operation result is intended to be returned in the body of the response.\npublic enum OperationType extends Enum<OperationType>; // An enumeration of the different types of operation supported by an endpoint.\npublic interface Producible<E extends Enum<E> & Producible<E>>; // Interface that can be implemented by any Enum that represents a finite set of producible mime-types.\npublic class ProducibleOperationArgumentResolver extends Object implements OperationArgumentResolver; // An OperationArgumentResolver for producible enums.\npublic final class SanitizableData extends Object; // Value object that represents the data that can be used by a SanitizingFunction.\npublic class Sanitizer extends Object; // Strategy that should be used by endpoint implementations to sanitize potentially sensitive keys.\n", "des": "Endpoint support."}
{"index": 1666, "repo": "jena-core-4.9.0", "code": "package vocabulary;\n\npublic class AS extends Object; // The standard Activity Stream vocabulary.\npublic class DC extends DC_11;\npublic class DC_10 extends Object; // Dublin Core version 1.0 vocabulary.\npublic class DC_11 extends Object; // Vocabulary definitions from file:vocabularies/dublin-core_11.xml\npublic class DCAT extends Object; // Constants for the W3C Data Catalog Vocabulary.\npublic class DCTerms extends Object; // Vocabulary definitions from vocabularies/dublin-core_terms.xml\npublic class DCTypes extends Object; // Vocabulary definitions from vocabularies/dublin-core_types.xml\npublic class LocationMappingVocab extends Object; // Vocabulary definitions from Vocabularies/location-mapping-rdfs.n3\npublic class OA extends Object; // The standard Open Annotation vocabulary.\npublic class OntDocManagerVocab extends Object; // Vocabulary definitions from file:vocabularies/ont-manager.rdf\npublic class OntEventsVocab extends Object; // Vocabulary definitions from file:vocabularies/ont-event.rdf\npublic class ORG extends Object; // Constants for the W3C Organization Ontology.\npublic class OWL extends Object; // Vocabulary definitions from file:vocabularies/owl.owl\npublic static class OWL.Init extends Object; // OWL constants are used during Jena initialization.\npublic class OWL2 extends Object; // OWL2 vocabulary.\npublic class OWLResults extends Object; // The vocabulary used by WebOnt to encode results of test runs.\npublic class OWLTest extends Object; // The vocabulary used by the WebOnt working group to define test manifests.\npublic class RDF extends Object; // The standard RDF vocabulary.\npublic static class RDF.Init extends Object; // RDF constants are used during Jena initialization.\npublic static final class RDF.Nodes extends Object; // The same items of vocabulary, but at the Node level, parked inside a nested class so that there's a simple way to refer to them.\npublic class RDFS extends Object; // RDFS vocabulary items\npublic static class RDFS.Init extends Object; // RDFS constants are used during Jena initialization.\npublic static class RDFS.Nodes extends Object; // The RDFS vocabulary, expressed for the SPI layer in terms of .graph Nodes.\n", "des": "A package containing constant classes with predefined constant objects for classes and properties defined in well known vocabularies."}
{"index": 432, "repo": "kafka-streams-3.5.0", "code": "package processor;\n\npackage processor.api; // Provides a low-level programming model (Processor API, aka, PAPI) to express a (stateful) data flow computation over input topics.\nInterface BatchingStateRestoreCallback; // Interface for batching restoration of a StateStore It is expected that implementations of this class will not call the StateRestoreCallback.restore(byte[], byte[]) method.\nInterface Cancellable; // Cancellable interface returned in ProcessorContext.schedule(Duration, PunctuationType, Punctuator).\nInterface CommitCallback; // Stores can register this callback to be notified upon successful commit.\nInterface ConnectedStoreProvider; // Provides a set of StoreBuilders that will be automatically added to the topology and connected to the associated processor.\nInterface Processor<K,V>; // Since 3.0.\nInterface ProcessorContext; // Processor context interface.\nInterface ProcessorSupplier<K,V>; // Since 3.0.\nInterface Punctuator; // A functional interface used as an argument to ProcessorContext.schedule(Duration, PunctuationType, Punctuator).\nInterface RecordContext; // The context associated with the current record being processed by a Processor\nInterface StateRestoreCallback; // Restoration logic for log-backed state stores upon restart, it takes one record at a time from the logs to apply to the restoring state.\nInterface StateRestoreListener; // Class for listening to various states of the restoration process of a StateStore.\nInterface StateStore; // A storage engine for managing state maintained by a stream processor.\nInterface StateStoreContext; // State store context interface.\nInterface StreamPartitioner<K,V>; // Determine how records are distributed among the partitions in a Kafka topic.\nInterface TimestampExtractor; // An interface that allows the Kafka Streams framework to extract a timestamp from an instance of ConsumerRecord.\nInterface TopicNameExtractor<K,V>; // An interface that allows to dynamically determine the name of the Kafka topic to send at the sink node of the topology.\nClass AbstractProcessor<K,V>; // Since 3.0.\nClass FailOnInvalidTimestamp; // Retrieves embedded metadata timestamps from Kafka messages.\nClass LogAndSkipOnInvalidTimestamp; // Retrieves embedded metadata timestamps from Kafka messages.\nClass TaskId; // The task ID representation composed as subtopology (aka topicGroupId) plus the assigned partition ID.\n", "des": "Provides a low-level programming model (Processor API, aka, PAPI) to express a (stateful) data flow computation over input topics."}
{"index": 264, "repo": "nutch-2.4", "code": "package anchor;\n\nClass AnchorIndexingFilter; // Indexing filter that offers an option to either index all inbound anchor text for a document or deduplicate anchors.\n", "des": "An indexing plugin for inbound anchor text."}
{"index": 3614, "repo": "lucene-suggest-9.7.0", "code": "package fst;\n\nInterface BytesRefSorter; // Collects BytesRef and then allows one to iterate over their sorted order.\nClass ExternalRefSorter; // An implementation of a BytesRefSorter that allows appending BytesRefs to an OfflineSorter and returns a Closeable ExternalRefSorter.ByteSequenceIterator that iterates over sequences stored on disk.\nClass ExternalRefSorter.ByteSequenceIterator; // Iterates over BytesRefs in a file, closes the reader when the iterator is exhausted.\nClass FSTCompletion; // Finite state automata based implementation of \"autocomplete\" functionality.\nClass FSTCompletion.Completion; // A single completion for a given key.\nClass FSTCompletionBuilder; // Finite state automata based implementation of \"autocomplete\" functionality.\nClass FSTCompletionLookup; // An adapter from Lookup API to FSTCompletion.\nClass WFSTCompletionLookup; // Suggester based on a weighted FST: it first traverses the prefix, then walks the n shortest paths to retrieve top-ranked suggestions.\n", "des": "Finite-state based autosuggest."}
{"index": 878, "repo": "mahout-math-0.13.0", "code": "package math;\n\npackage math.function; // Core interfaces for functions, comparisons and procedures on objects and primitive data types.\npackage math.list; // Resizable lists holding objects or primitive data types such as int, double, etc.\npackage math.map; // Automatically growing and shrinking maps holding objects or primitive data types such as int, double, etc.\nInterface Matrix; // The basic interface including numerous convenience functions\nInterface MatrixTimesOps; // Optional interface for optimized matrix multiplications.\nInterface QR;\nInterface Swapper; // Interface for an object that knows how to swap elements at two positions (a,b).\nInterface Vector; // The basic interface including numerous convenience functions\nInterface Vector.Element; // A holder for information about a specific item in the Vector.\nInterface VectorIterable;\nClass AbstractMatrix; // A few universal implementations of convenience functions for a JVM-backed matrix.\nClass AbstractMatrix.TransposeViewVector;\nClass AbstractVector; // Implementations of generic capabilities like sum of elements and dot products\nClass Algebra;\nClass Arrays; // Array manipulations; complements java.util.Arrays.\nClass BinarySearch;\nClass Centroid; // A centroid is a weighted vector.\nClass CholeskyDecomposition; // Cholesky decomposition shamelessly ported from JAMA.\nClass ConstantVector; // Implements a vector with all the same values.\nClass DelegatingVector; // A delegating vector provides an easy way to decorate vectors with weights or id's and such while keeping all of the Vector functionality.\nClass DenseMatrix; // Matrix of doubles implemented using a 2-d array\nClass DenseSymmetricMatrix; // Economy packaging for a dense symmetric in-core matrix.\nClass DenseVector; // Implements vector as an array of doubles\nClass DiagonalMatrix;\nClass FileBasedMatrix; // Provides a way to get data from a file and treat it as if it were a matrix, but avoids putting all that data onto the Java heap.\nClass FileBasedSparseBinaryMatrix; // Provides a way to get data from a file and treat it as if it were a matrix, but avoids putting all that data onto the Java heap.\nClass FileBasedSparseBinaryMatrix.BinaryReadOnlyElement;\nClass Matrices;\nClass MatrixSlice;\n", "des": "Core base classes; Operations on primitive arrays such as sorting, partitioning and permuting."}
{"index": 3691, "repo": "solr-core-9.3.0", "code": "package function;\n\npackage function.distance; // Solr implementations of ValueSource for distance based function queries.\nInterface SolrComparisonBoolFunction.Compare;\nClass CollapseScoreFunction;\nClass CollapseScoreFunction.CollapseScoreFunctionValues;\nClass ConcatStringFunction; // ConcatStringFunction concatenates the string values of its components in the order given.\nClass DualDoubleFunction; // Abstract ValueSource implementation which wraps two ValueSources and applies an extendible double function to their values.\nClass EqualFunction; // Compares two values for equality.\nClass FieldNameValueSource; // Placeholder value source.\nClass FileFloatSource; // Obtains float field values from an external file.\nClass FileFloatSource.ReloadCacheRequestHandler;\nClass MultiStringFunction; // Abstract ValueSource implementation which wraps multiple ValueSources and applies an extendible string function to their values.\nClass OrdFieldSource; // Obtains the ordinal of the field value from LeafReader.getSortedDocValues(java.lang.String).\nClass ReverseOrdFieldSource; // Obtains the ordinal of the field value from LeafReader.getSortedDocValues(java.lang.String) and reverses the order.\nClass SolrComparisonBoolFunction; // Refines ComparisonBoolFunction to compare based on a 'long' or 'double' depending on if the any of the FunctionValues are LongDocValues.\nClass ValueSourceRangeFilter; // RangeFilter over a ValueSource.\n", "des": "Solr implementations of ValueSource for function queries."}
{"index": 1657, "repo": "jena-core-4.9.0", "code": "package reasoner;\n\npackage reasoner.rulesys; // Provides a selection of simple rule engines for Jena inference models.\npackage reasoner.transitiveReasoner; // This package contains a reasoner which supports transitive-reflexive closure of subPropertyOf and subClassOf relations.\npublic abstract class BaseInfGraph extends GraphBase implements InfGraph; // A base level implementation of the InfGraph interface.\npublic static class BaseInfGraph.InfCapabilities extends AllCapabilities; // An InfCapabilities notes that size may not be accurate.\npublic static class BaseInfGraph.InfFindSafeCapabilities extends BaseInfGraph.InfCapabilities; // An InfCapabilities notes that size may not be accurate.\npublic static class BaseInfGraph.InfTransactionHandler extends TransactionHandlerBase implements TransactionHandler;\npublic interface Derivation; // Derivation records are used to determine how an inferred triple was derived from a set of source triples and a reasoner.\npublic class FGraph extends Object implements Finder; // Wrapper round a Graph to implement the slightly modified Finder interface.\npublic interface Finder; // Minimal interface for preforming simple pattern find operations.\npublic class FinderUtil extends Object; // Some simple helper methods used when working with Finders, particularly to compose them into cascade sequences.\npublic class IllegalParameterException extends ReasonerException; // Exception used to signal that a configuration parameter was used (typically in a setParameter call) that was not understood - either because it was not a recognized parameter URI or its value range was incorrect.\npublic interface InfGraph extends Graph; // Extends the Graph interface to give additional means to query an inferred graph.\npublic interface Reasoner; // The minimal interface to which all reasoners (or reasoner adaptors) conform.\npublic class ReasonerException extends JenaException; // Exception signalling some generic problem with the reasoning subsystem.\npublic interface ReasonerFactory; // The interface through which a reasoner (inference engine) can be instantiated.\npublic class ReasonerRegistry extends Object; // A global registry of known reasoner modules.\npublic class StandardValidityReport extends Object implements ValidityReport; // Default implementation of ValidityReport which simply stores a list of precomputed Report records.\npublic class TriplePattern extends Object implements ClauseEntry; // Datastructure which defines a triple pattern as used in simple rules and in find interfaces.\n", "des": "The Jena2 reasoner subsystem is designed to allow a range of inference engines to be plugged into Jena."}
{"index": 814, "repo": "lucene-analyzers-common-8.11.2", "code": "package util;\n\nInterface ResourceLoader; // Abstraction for loading resources (streams, files, and classes).\nInterface ResourceLoaderAware; // Interface for a component that needs to be initialized by an implementation of ResourceLoader.\nClass AbstractAnalysisFactory; // Abstract parent class for analysis factories TokenizerFactory, TokenFilterFactory and CharFilterFactory.\nClass AnalysisSPILoader<S extends AbstractAnalysisFactory>; // Helper class for loading named SPIs from classpath (e.g.\nClass CharArrayIterator; // A CharacterIterator used internally for use with BreakIterator\nClass CharFilterFactory; // Abstract parent class for analysis factories that create CharFilter instances.\nClass CharTokenizer; // An abstract base class for simple, character-oriented tokenizers.\nClass ClasspathResourceLoader; // Simple ResourceLoader that uses ClassLoader.getResourceAsStream(String) and Class.forName(String,boolean,ClassLoader) to open resources and classes, respectively.\nClass ElisionFilter; // Removes elisions from a TokenStream.\nClass ElisionFilterFactory; // Factory for ElisionFilter.\nClass FilesystemResourceLoader; // Simple ResourceLoader that opens resource files from the local file system, optionally resolving against a base directory.\nClass OpenStringBuilder; // A StringBuilder that allows one to access the array.\nClass RollingCharBuffer; // Acts like a forever growing char[] as you read characters into it from the provided reader, but internally it uses a circular buffer to only hold the characters that haven't been freed yet.\nClass SegmentingTokenizerBase; // Breaks text into sentences with a BreakIterator and allows subclasses to decompose these sentences into words.\nClass StemmerUtil; // Some commonly-used stemming functions\nClass TokenFilterFactory; // Abstract parent class for analysis factories that create TokenFilter instances.\nClass TokenizerFactory; // Abstract parent class for analysis factories that create Tokenizer instances.\nClass UnicodeProps; // This file contains unicode properties used by various CharTokenizers.\n", "des": "Utility functions for text analysis."}
{"index": 3247, "repo": "opencms-core-15.0", "code": "package shared;\n\nInterface I_CmsBinaryPreviewProvider; // Constants interface for binary resource preview.\nInterface I_CmsGalleryConfiguration; // The gallery configuration interface.\nInterface I_CmsGalleryProviderConstants; // Shared constants interface.\nInterface I_CmsGalleryTreeEntry<T>; // Common interface for accessing sitemap/VFS entry beans as tree nodes.\nInterface I_CmsImagePreviewProvider; // Constants interface for binary resource preview.\nClass CmsGalleryActionInfo; // Represents information about whether a gallery folder should use a custom upload action.\nClass CmsGalleryConfiguration; // The gallery configuration.\nClass CmsGalleryDataBean; // This bean holding the gallery dialog information required for displaying the content of the gallery tabs.\nClass CmsGalleryFolderBean; // Represents a gallery folder.\nClass CmsGallerySearchBean; // This bean represents the current search object.\nClass CmsGalleryTabConfiguration; // A bean containing a configuration for the gallery dialog's available tabs, consisting of a list of tabs and a default tab to display first.\nClass CmsGalleryTreeEntry; // Gallery tree entry class.\nClass CmsImageInfoBean; // Bean holding image info to be display in the resource preview dialog.\nClass CmsPoint; // A point in 2D space.\nClass CmsResourceInfoBean; // This bean contains the preview content for the selected item.\nClass CmsResourceTypeBean; // Bean representing resource type information.\nClass CmsResultItemBean; // A specific bean holding all info to be displayed in org.opencms.ade.galleries.client.ui.CmsResultListItems.\nClass CmsSitemapEntryBean; // A sitemap entry bean.\nClass CmsSiteSelectorOption; // Bean class which represents an option for the site selector in the gallery dialog.\nClass CmsVfsEntryBean; // Represents a single VFS resource entry for use by the VFS tab of the galleries.\nEnum CmsGallerySearchScope; // An enum that represents the possible search scope choices in the ADE gallery search tab.\nEnum CmsResourceTypeBean.Origin; // Enum for data source from which resource type bean was constructed.\nEnum CmsResourceTypeBean.TypeVisibility; // Enum representing the visibility of a resource type in the bean.\nEnum CmsSiteSelectorOption.Type; // Enum for indicating the site type.\nEnum I_CmsGalleryProviderConstants.GalleryMode; // Gallery mode constants.\n", "des": "Contains the shared client/server side gallery dialog classes."}
{"index": 2541, "repo": "spring-security-core-6.1.2", "code": "package memory;\n\npublic class UserAttribute extends Object; // Used by InMemoryUserDetailsManager to temporarily store the attributes associated with a user.\npublic class UserAttributeEditor extends PropertyEditorSupport; // Property editor that creates a UserAttribute from a comma separated list of values.\n", "des": "Exposes an in-memory authentication repository."}
{"index": 521, "repo": "commons-vfs2-2.9.0", "code": "package hdfs;\n\nClass HdfsFileContentInfoFactory; // Creates FileContentInfo instances for HDFS.\nClass HdfsFileObject; // A VFS representation of an HDFS file.\nClass HdfsFileProvider; // FileProvider for HDFS files.\nClass HdfsFileSystem; // A VFS FileSystem that interacts with HDFS.\nClass HdfsFileSystemConfigBuilder; // Configuration settings for the HdfsFileSystem.\nClass HdfsRandomAccessContent; // Provides random access to content in an HdfsFileObject.\nEnum HdfsFileAttributes; // HDFS file content attributes.\n", "des": "The HDFS File Provider"}
{"index": 3207, "repo": "tomcat-api-10.1", "code": "package scan;\n\nClass AbstractInputStreamJar; // Base implementation of Jar for implementations that use a JarInputStream to access the JAR file.\nClass Constants; // String constants for the scan package.\nClass JarFactory; // Provide a mechanism to obtain objects that implement Jar.\nClass JarFileUrlJar; // Implementation of Jar that is optimised for file based JAR URLs that refer directly to a JAR file (e.g URLs of the form jar:file: ... .jar!\nClass JarFileUrlNestedJar; // Implementation of Jar that is optimised for file based JAR URLs that refer to a JAR file nested inside a WAR (e.g URLs of the form jar:file: ... .war!\nClass NonClosingJarInputStream; // When using a JarInputStream with an XML parser, the stream will be closed by the parser.\nClass ReferenceCountedJar; // This class provides a wrapper around Jar that uses reference counting to close and re-create the wrapped Jar instance as required.\nClass StandardJarScanFilter;\nClass StandardJarScanner; // The default JarScanner implementation scans the WEB-INF/lib directory followed by the provided classloader and then works up the classloader hierarchy.\nClass UrlJar; // Implementation of Jar that is optimised for non-file based JAR URLs.\n", "des": "This package contains the common classes used to perform configuration scanning for Catalina and Jasper."}
{"index": 2197, "repo": "spring-data-commons-3.1.2", "code": "package auditing;\n\npackage auditing.config; // Types to abstract authentication concepts.\npublic interface AuditableBeanWrapper<T>; // Interface to abstract the ways setting the auditing information can be implemented.\npublic interface AuditableBeanWrapperFactory; // A factory to lookup AuditableBeanWrappers.\npublic class AuditingHandler extends AuditingHandlerSupport implements InitializingBean; // Auditing handler to mark entity objects created and modified.\npublic abstract class AuditingHandlerSupport extends Object; // Support class to implement auditing handlers.\npublic enum CurrentDateTimeProvider extends Enum<CurrentDateTimeProvider> implements DateTimeProvider; // Default DateTimeProvider simply creating new LocalDateTime instances for each method call.\npublic interface DateTimeProvider; // SPI to calculate the current time to be used when auditing.\npublic class IsNewAwareAuditingHandler extends AuditingHandler; // AuditingHandler extension that uses PersistentEntity.isNew(Object) to expose a generic IsNewAwareAuditingHandler.markAudited(Object) method that will route calls to AuditingHandler.markCreated(Object) or AuditingHandler.markModified(Object) based on the IsNewStrategy determined from the factory.\npublic class MappingAuditableBeanWrapperFactory extends Object; // AuditableBeanWrapperFactory that will create am AuditableBeanWrapper using mapping information obtained from a MappingContext to detect auditing configuration and eventually invoking setting the auditing values.\npublic class ReactiveAuditingHandler extends AuditingHandlerSupport; // Auditing handler to mark entity objects created and modified.\npublic class ReactiveIsNewAwareAuditingHandler extends ReactiveAuditingHandler; // AuditingHandler extension that uses PersistentEntity.isNew(Object) to expose a generic ReactiveIsNewAwareAuditingHandler.markAudited(Object) method that will route calls to ReactiveAuditingHandler.markCreated(Object) or ReactiveAuditingHandler.markModified(Object) based on the IsNewStrategy determined from the factory.\n", "des": "General support for entity auditing."}
{"index": 2492, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package servlet;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class,ObservationAutoConfiguration.class}) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({org.springframework.web.servlet.DispatcherServlet.class,io.micrometer.observation.Observation.class}) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @EnableConfigurationProperties({MetricsProperties.class,ObservationProperties.class}) public class WebMvcObservationAutoConfiguration extends Object; // Auto-configuration for instrumentation of Spring Web MVC servlet-based request mappings.\n", "des": "Auto-configuration for Spring MVC observation support."}
{"index": 600, "repo": "org.apache.karaf.main-2.4.4", "code": "package util;\n\nClass ManifestElement; // This class represents a single manifest element.\nClass NLS; // Common superclass for all message bundle classes.\nClass TextProcessor; // This class is used to process strings that have special semantic meaning (such as file paths) in RTL-oriented locales so that they render in a way that does not corrupt the semantic meaning of the string but also maintains compliance with the Unicode BiDi algorithm of rendering Bidirectional text.\n", "des": "Provides utility classes for NLS support and bundle manifest header parsing."}
{"index": 3458, "repo": "hibernate-core-5.6.15.Final", "code": "package enhanced;\n\nInterface AccessCallback; // Contract for providing callback access to a DatabaseStructure, typically from the Optimizer.\nInterface DatabaseStructure; // Encapsulates definition of the underlying data structure backing a sequence-style generator.\nInterface InitialValueAwareOptimizer; // Marker interface for optimizer which wishes to know the user-specified initial value.\nInterface Optimizer; // Performs optimization on an optimizable identifier generator.\nClass AbstractOptimizer; // Common support for optimizer implementations.\nClass HiLoOptimizer; // Optimizer which applies a 'hilo' algorithm in memory to achieve optimization.\nClass LegacyHiLoAlgorithmOptimizer; // Slight variation from HiLoOptimizer, maintaining compatibility with the values generated by the legacy Hibernate hilo based generators.\nClass NoopOptimizer; // An optimizer that performs no optimization.\nClass OptimizerFactory; // Factory for Optimizer instances.\nClass PooledLoOptimizer; // Variation of PooledOptimizer which interprets the incoming database value as the lo value, rather than the hi value.\nClass PooledLoThreadLocalOptimizer; // Variation of PooledOptimizer which interprets the incoming database value as the lo value, rather than the hi value, as well as using thread local to cache the generation state.\nClass PooledOptimizer; // Optimizer which uses a pool of values, storing the next low value of the range in the database.\nClass SequenceStructure; // Describes a sequence.\nClass SequenceStyleGenerator; // Generates identifier values based on a sequence-style database structure.\nClass TableGenerator; // An enhanced version of table-based id generation.\nClass TableStructure; // Describes a table used to mimic sequence behavior\nEnum StandardOptimizerDescriptor; // Enumeration of the standard Hibernate id generation optimizers.\n", "des": "Enhanced/improved versions of table and sequence based identifier generators targeting portability and unified configuration"}
{"index": 2364, "repo": "spring-boot-3.1.1", "code": "package client;\n\npublic class HttpWebServiceMessageSenderBuilder extends Object; // WebServiceMessageSender builder that can detect a suitable HTTP library based on the classpath.\npublic class WebServiceTemplateBuilder extends Object; // Builder that can be used to configure and create a WebServiceTemplate.\n@FunctionalInterface public interface WebServiceTemplateCustomizer; // Callback interface that can be used to customize a WebServiceTemplate.\n", "des": "Web Services client utilities."}
{"index": 2792, "repo": "shiro-spring-2.0.0-alpha-2", "code": "package remoting;\n\npublic class SecureRemoteInvocationExecutor extends org.springframework.remoting.support.DefaultRemoteInvocationExecutor; // An implementation of the Spring RemoteInvocationExecutor that binds a sessionId to the incoming thread to make it available to the SecurityManager implementation during the thread execution.\npublic class SecureRemoteInvocationFactory extends org.springframework.remoting.support.DefaultRemoteInvocationFactory; // A RemoteInvocationFactory that passes the session ID to the server via a RemoteInvocation attribute.\n", "des": "Support to enable Spring-based remote method invocations to carry a Shiro session ID as part of the invocation payload, allowing remote clients to perform security operations."}
{"index": 3683, "repo": "solr-core-9.3.0", "code": "package response;\n\npackage response.transform; // APIs and implementations of DocTransformer for modifying documents in Solr request responses\nInterface BinaryQueryResponseWriter; // Implementations of BinaryQueryResponseWriter are used to write response in binary format.\nInterface QueryResponseWriter; // Implementations of QueryResponseWriter are used to format responses to query requests.\nClass BasicResultContext;\nClass BinaryResponseWriter;\nClass BinaryResponseWriter.Resolver;\nClass CborResponseWriter; // A response writer impl that can write results in CBOR (cbor.io) format when wt=cbor.\nClass CSVResponseWriter; // Response writer for csv data\nClass DocsStreamer; // This streams SolrDocuments from a DocList and applies transformer\nClass GeoJSONResponseWriter; // Extend the standard JSONResponseWriter to support GeoJSON.\nClass GraphMLResponseWriter;\nClass JacksonJsonWriter; // A JSON ResponseWriter that uses jackson.\nClass JacksonJsonWriter.WriterImpl;\nClass JSONResponseWriter;\nClass JSONWriter;\nClass PHPResponseWriter;\nClass PHPSerializedResponseWriter; // A description of the PHP serialization format can be found here: http://www.hurring.com/scott/code/perl/serialize/\nClass PythonResponseWriter;\nClass QueryResponseWriterUtil; // Static utility methods relating to QueryResponseWriters\nClass RawResponseWriter; // Writes a ContentStream directly to the output.\nClass ResultContext; // A class to hold the QueryResult and the Query\nClass RubyResponseWriter;\nClass SchemaXmlResponseWriter;\nClass SchemaXmlWriter;\nClass SmileResponseWriter;\nClass SmileResponseWriter.SmileWriter;\nClass SolrQueryResponse; // SolrQueryResponse is used by a query handler to return the response to a query request.\nClass TabularResponseWriter; // Base response writer for table-oriented data\nClass TextResponseWriter; // Base class for text-oriented response writers.\nClass XMLResponseWriter;\nClass XMLWriter;\n", "des": "API and implementations of QueryResponseWriter for formatting Solr request responses"}
{"index": 2275, "repo": "spring-data-elasticsearch-5.1.2", "code": "package elc;\n\npublic class Aggregation extends Object; // Class to combine an Elasticsearch Aggregate with its name.\npublic class AutoCloseableElasticsearchClient extends co.elastic.clients.elasticsearch.ElasticsearchClient implements AutoCloseable; // Extension of the ElasticsearchClient class that implements AutoCloseable.\npublic abstract class ChildTemplate<T extends co.elastic.clients.transport.Transport,CLIENT extends co.elastic.clients.ApiClient<T,CLIENT>> extends Object; // base class for a template that uses one of the ElasticsearchClient's child clients like ElasticsearchClusterClient or ElasticsearchIndicesClient.\n@FunctionalInterface public static interface ChildTemplate.ClientCallback<CLIENT,RESULT>; // Callback interface to be used with ChildTemplate.execute(ClientCallback) for operating directly on the client.\npublic class ClusterTemplate extends ChildTemplate<co.elastic.clients.transport.ElasticsearchTransport,co.elastic.clients.elasticsearch.cluster.ElasticsearchClusterClient> implements ClusterOperations; // Implementation of the ClusterOperations interface using en ElasticsearchClusterClient.\npublic class CriteriaQueryException extends UncategorizedDataAccessException;\npublic class ElasticsearchAggregation extends Object implements AggregationContainer<Aggregation>; // AggregationContainer for a Aggregation that holds Elasticsearch data.\npublic class ElasticsearchAggregations extends Object implements AggregationsContainer<List<ElasticsearchAggregation>>; // AggregationsContainer implementation for the Elasticsearch aggregations.\npublic class ElasticsearchClientBeanDefinitionParser extends AbstractBeanDefinitionParser;\npublic class ElasticsearchClientFactoryBean extends Object implements FactoryBean<co.elastic.clients.elasticsearch.ElasticsearchClient>, InitializingBean, DisposableBean; // ElasticsearchClientFactoryBean\npublic final class ElasticsearchClients extends Object; // Utility class to create the different Elasticsearch clients\npublic static interface ElasticsearchClients.ElasticsearchHttpClientConfigurationCallback extends ClientConfiguration.ClientConfigurationCallback<org.apache.http.impl.nio.client.HttpAsyncClientBuilder>; // ClientConfiguration.ClientConfigurationCallback to configure the Elasticsearch RestClient's Http client with a HttpAsyncClientBuilder\npublic static interface ElasticsearchClients.ElasticsearchRestClientConfigurationCallback extends ClientConfiguration.ClientConfigurationCallback<org.elasticsearch.client.RestClientBuilder>; // ClientConfiguration.ClientConfigurationCallback to configure the RestClient client with a RestClientBuilder\npublic abstract class ElasticsearchConfiguration extends ElasticsearchConfigurationSupport; // Base class for a @Configuration class to set up the Elasticsearch connection using the Elasticsearch Client.\n", "des": "This package contains classes that use the new Elasticsearch client library (co.elastic.clients:elasticsearch-java) to access Elasticsearch."}
{"index": 1702, "repo": "drill-common-1.21.1", "code": "package exceptions;\n\npublic class ChildErrorContext extends Object implements CustomErrorContext; // Represents an additional level of error context detail that adds to that provided by some outer context.\npublic interface CustomErrorContext; // Generic mechanism to pass error context throughout the row set mechanism and scan framework.\npublic class DrillConfigurationException extends DrillException;\npublic class DrillError extends Error;\npublic class DrillException extends Exception;\npublic class DrillIOException extends IOException;\npublic class DrillRuntimeException extends RuntimeException;\npublic class EmptyErrorContext extends Object implements CustomErrorContext;\npublic class ErrorHelper extends Object; // Utility class that handles error message generation from protobuf error objects.\npublic class RetryAfterSpillException extends Exception; // Special exception to be caught by caller, who is supposed to free memory by spilling and try again\npublic class UserException extends DrillRuntimeException; // Base class for all user exception.\npublic static class UserException.Builder extends Object; // Builder class for DrillUserException.\npublic class UserExceptionUtils extends Object; // Provides utilities (such as retrieving hints) to add more context to UserExceptions.\npublic class UserRemoteException extends UserException; // Wraps a DrillPBError object so we don't need to rebuilt it multiple times when sending it to the client.\n", "des": "Various exceptions used in logical, physical and execution contexts."}
{"index": 1609, "repo": "spring-data-neo4j-7.1.2", "code": "package convert;\n\n@Retention(RUNTIME) @Target({ANNOTATION_TYPE,FIELD}) @Inherited @Documented @API(status=STABLE, since=\"6.0\") public @interface ConvertWith; // This annotation can be used to define either custom conversions for single attributes by specifying a custom Neo4jPersistentPropertyConverter and if needed, a custom factory to create that converter or the annotation can be used to build custom meta-annotated annotations like @org.springframework.data.neo4j.core.support.DateLong.\npublic static final class ConvertWith.UnsetConverter extends Object implements Neo4jPersistentPropertyConverter<Object>; // Indicates an unset converter.\n@API(status=STABLE, since=\"6.0\") public final class Neo4jConversions extends CustomConversions;\n@API(status=STABLE, since=\"6.0\") public interface Neo4jConversionService; // This service orchestrates a standard Spring conversion service with Neo4jConversions registered.\n@API(status=STABLE, since=\"6.0\") public interface Neo4jPersistentPropertyConverter<T>; // This interface represents a pair of methods capable of converting values of type T to and from values.\npublic interface Neo4jPersistentPropertyConverterFactory; // This interface needs to be implemented to provide custom configuration for a Neo4jPersistentPropertyConverter.\n@API(status=STABLE, since=\"6.0\") public interface Neo4jPersistentPropertyToMapConverter<K,P>; // You need to provide an implementation of this interface in case you want to store a property of an entity as separate properties on a node.\n@API(status=STABLE, since=\"6.0\") public final class Neo4jSimpleTypes extends Object; // A list of Neo4j simple types: All attributes that can be mapped to a property.\n", "des": "Provides a set of simples types that SDN supports."}
{"index": 2328, "repo": "spring-boot-3.1.1", "code": "package server;\n\npublic interface ConfigurableRSocketServerFactory; // A configurable RSocketServerFactory.\npublic interface RSocketServer; // Simple interface that represents a fully configured RSocket server.\npublic static enum RSocketServer.Transport extends Enum<RSocketServer.Transport>; // Choice of transport protocol for the RSocket server.\n@FunctionalInterface public interface RSocketServerCustomizer; // Callback interface that can be used to customize a RSocketServer.\npublic class RSocketServerException extends RuntimeException; // Exceptions thrown by an RSocket server.\n@FunctionalInterface public interface RSocketServerFactory; // Factory interface that can be used to create a reactive RSocketServer.\n", "des": "Support for RSocket servers."}
{"index": 3656, "repo": "solr-core-9.3.0", "code": "package api;\n\nClass V2ApiUtils; // Utilities helpful for common V2 API declaration tasks.\n", "des": "V2 utilities useful for all API implementations."}
{"index": 346, "repo": "hadoop-hdfs-3.3.6", "code": "package connectors;\n\nInterface ClusterConnector; // ClusterConnector interface hides all specifics about how we communicate to the HDFS cluster.\nClass ConnectorFactory; // Connector factory creates appropriate connector based on the URL.\nClass JsonNodeConnector; // A connector that understands JSON data cluster models.\n", "des": "Connectors package is a set of logical connectors that connect to various data sources to read the hadoop cluster information."}
{"index": 3772, "repo": "lucene-analysis-common-9.7.0", "code": "package compound;\n\npackage compound.hyphenation; // Hyphenation code for the CompoundWordTokenFilter.\nClass CompoundWordTokenFilterBase; // Base class for decomposition token filters.\nClass DictionaryCompoundWordTokenFilter; // A TokenFilter that decomposes compound words found in many Germanic languages.\nClass DictionaryCompoundWordTokenFilterFactory; // Factory for DictionaryCompoundWordTokenFilter.\nClass HyphenationCompoundWordTokenFilter; // A TokenFilter that decomposes compound words found in many Germanic languages.\nClass HyphenationCompoundWordTokenFilterFactory; // Factory for HyphenationCompoundWordTokenFilter.\n", "des": "A filter that decomposes compound words you find in many Germanic languages into the word parts."}
{"index": 359, "repo": "hive-exec-4.0.0-alpha-2", "code": "package generic;\n\nInterface Collector; // Collector gets data from a source.\nInterface GenericUDAFEvaluator.AggregationBuffer; // use GenericUDAFEvaluator.AbstractAggregationBuffer instead\nInterface GenericUDAFParameterInfo; // A callback interface used in conjunction with GenericUDAFResolver2 interface that allows for a more extensible and flexible means of discovering the parameter types provided for UDAF invocation.\nInterface GenericUDAFPercentileCont.PercentileCalculator<U>;\nInterface GenericUDAFResolver; // Use GenericUDAFResolver2 instead.\nInterface GenericUDAFResolver2;\nInterface GenericUDF.DeferredObject; // A Deferred Object allows us to do lazy-evaluation and short-circuiting.\nInterface GenericUDFBridge.UdfWhitelistChecker;\nInterface ISupportStreamingModeForWindowing; // A GenericUDAF mode that provides it results as a List to the WindowingTableFunction (so it is a WindowFunctionInfo.isPivotResult() return true) may support this interface.\nClass AbstractGenericUDAFResolver;\nClass AbstractGenericUDFReflect; // common class for reflective UDFs\nClass BaseMaskUDF;\nClass GenericUDAFApproximateDistinct;\nClass GenericUDAFApproximateDistinct.CountApproximateDistinctEvaluator;\nClass GenericUDAFApproximateDistinct.HyperLogLogEvaluator;\nClass GenericUDAFAverage; // GenericUDAFAverage.\nClass GenericUDAFAverage.AbstractGenericUDAFAverageEvaluator<TYPE>;\nClass GenericUDAFAverage.GenericUDAFAverageEvaluatorDecimal;\nClass GenericUDAFAverage.GenericUDAFAverageEvaluatorDouble;\nClass GenericUDAFBinarySetFunctions;\nClass GenericUDAFBinarySetFunctions.RegrAvgX;\nClass GenericUDAFBinarySetFunctions.RegrAvgY;\nClass GenericUDAFBinarySetFunctions.RegrCount;\nClass GenericUDAFBinarySetFunctions.RegrIntercept;\nClass GenericUDAFBinarySetFunctions.RegrR2;\nClass GenericUDAFBinarySetFunctions.RegrSlope;\nClass GenericUDAFBinarySetFunctions.RegrSXX;\nClass GenericUDAFBinarySetFunctions.RegrSXY;\nClass GenericUDAFBinarySetFunctions.RegrSYY;\nClass GenericUDAFBloomFilter; // Generic UDF to generate Bloom Filter\n", "des": "Standard toolkit and framework for generic User-defined functions."}
{"index": 2561, "repo": "pulsar-common-3.0.0", "code": "package data;\n\npublic class AutoFailoverPolicyDataImpl extends Object implements AutoFailoverPolicyData; // The auto failover policy configuration data.\npublic static class AutoFailoverPolicyDataImpl.AutoFailoverPolicyDataImplBuilder extends Object implements AutoFailoverPolicyData.Builder;\npublic final class BrokerNamespaceIsolationDataImpl extends Object implements BrokerNamespaceIsolationData; // The namespace isolation data for a given broker.\npublic static class BrokerNamespaceIsolationDataImpl.BrokerNamespaceIsolationDataImplBuilder extends Object implements BrokerNamespaceIsolationData.Builder;\npublic final class ClusterDataImpl extends Object implements ClusterData, Cloneable; // The configuration data for a cluster.\npublic static class ClusterDataImpl.ClusterDataImplBuilder extends Object implements ClusterData.Builder;\npublic class EnsemblePlacementPolicyConfig extends Object;\npublic static class EnsemblePlacementPolicyConfig.ParseEnsemblePlacementPolicyConfigException extends Exception;\npublic final class FailureDomainImpl extends Object implements FailureDomain; // The data of a failure domain configuration in a cluster.\npublic static class FailureDomainImpl.FailureDomainImplBuilder extends Object implements FailureDomain.Builder;\npublic class FunctionInstanceStatsDataBaseImpl extends Object implements FunctionInstanceStatsDataBase; // Function instance statistics data base.\npublic class FunctionInstanceStatsDataImpl extends FunctionInstanceStatsDataBaseImpl implements FunctionInstanceStatsData; // Function instance statistics data.\npublic class FunctionInstanceStatsImpl extends Object implements FunctionInstanceStats; // Function instance statistics.\npublic class FunctionStatsImpl extends Object implements FunctionStats; // Statistics for Pulsar Function.\npublic class FunctionStatusUtil extends Object;\npublic class HierarchyTopicPolicies extends Object; // Topic policy hierarchy value container.\npublic class LocalPolicies extends Object; // Local policies.\npublic class NamespaceIsolationDataImpl extends Object implements NamespaceIsolationData; // The data of namespace isolation configuration.\npublic static class NamespaceIsolationDataImpl.NamespaceIsolationDataImplBuilder extends Object implements NamespaceIsolationData.Builder;\npublic enum NamespaceOperation extends Enum<NamespaceOperation>; // Namespace authorization operations.\npublic class OffloadPoliciesImpl extends Object implements Serializable, OffloadPolicies; // Definition of the offload policies.\npublic static class OffloadPoliciesImpl.OffloadPoliciesImplBuilder extends Object implements OffloadPolicies.Builder;\npublic class PersistentOfflineTopicStats extends Object; // This object is populated using meta data in zookeeper without actually bringing the topic online.\n", "des": "Definition of different data structures for policies."}
{"index": 2841, "repo": "spring-integration-core-6.1.2", "code": "package acks;\n\n@FunctionalInterface public interface AcknowledgmentCallback extends SimpleAcknowledgment; // A general abstraction over acknowledgments.\npublic static enum AcknowledgmentCallback.Status extends Enum<AcknowledgmentCallback.Status>;\n@FunctionalInterface public interface AcknowledgmentCallbackFactory<T>; // A factory for creating AcknowledgmentCallbacks.\npublic final class AckUtils extends Object; // Utility methods for acting on AcknowledgmentCallback headers.\n@FunctionalInterface public interface SimpleAcknowledgment; // Opaque object for manually acknowledging.\n", "des": "Provides classes related to message acknowledgment."}
{"index": 3846, "repo": "lucene-core-9.7.0", "code": "package geo;\n\nInterface Component2D; // 2D Geometry object that supports spatial relationships with bounding boxes, triangles and points.\nInterface Tessellator.Monitor; // Implementation of this interface will receive calls with internal data at each step of the triangulation algorithm.\nClass Circle; // Represents a circle on the earth's surface.\nClass GeoEncodingUtils; // reusable geopoint encoding methods\nClass GeoEncodingUtils.Component2DPredicate; // A predicate that checks whether a given point is within a component2D geometry.\nClass GeoEncodingUtils.DistancePredicate; // A predicate that checks whether a given point is within a distance of another point.\nClass Geometry; // Base class for LatLonGeometry and XYGeometry\nClass GeoUtils; // Basic reusable geo-spatial utility methods\nClass LatLonGeometry; // Lat/Lon Geometry object.\nClass Line; // Represents a line on the earth's surface.\nClass Point; // Represents a point on the earth's surface.\nClass Polygon; // Represents a closed polygon on the earth's surface.\nClass Rectangle; // Represents a lat/lon rectangle.\nClass SimpleWKTShapeParser; // Parses shape geometry represented in WKT format\nClass Tessellator; // Computes a triangular mesh tessellation for a given polygon.\nClass Tessellator.Node; // Circular Doubly-linked list used for polygon coordinates\nClass Tessellator.Triangle; // Triangle in the tessellated mesh\nClass XYCircle; // Represents a circle on the XY plane.\nClass XYEncodingUtils; // reusable cartesian geometry encoding methods\nClass XYGeometry; // Cartesian Geometry object.\nClass XYLine; // Represents a line in cartesian space.\nClass XYPoint; // Represents a point on the earth's surface.\nClass XYPolygon; // Represents a polygon in cartesian space.\nClass XYRectangle; // Represents a x/y cartesian rectangle.\nEnum Component2D.WithinRelation; // Used by withinTriangle to check the within relationship between a triangle and the query shape (e.g.\nEnum GeoUtils.WindingOrder; // used to define the orientation of 3 points -1 = Clockwise 0 = Colinear 1 = Counter-clockwise\n", "des": "Geospatial Utility Implementations for Lucene Core"}
{"index": 1723, "repo": "spring-jdbc-6.0.11", "code": "package config;\n\npublic class JdbcNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for JDBC configuration namespace.\npublic class SortedResourcesFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<org.springframework.core.io.Resource[]> implements org.springframework.context.ResourceLoaderAware; // FactoryBean implementation that takes a list of location Strings and creates a sorted array of Resource instances.\n", "des": "Defines the Spring JDBC configuration namespace."}
{"index": 1047, "repo": "commons-io-2.13.0", "code": "package spi;\n\nClass FileSystemProviders; // Helps to work with FileSystemProvider.\n", "des": "Provides extensions in the realm of java.nio.file.spi."}
{"index": 3878, "repo": "solr-ltr-9.3.0", "code": "package norm;\n\nClass IdentityNormalizer; // A Normalizer that normalizes a feature value to itself.\nClass MinMaxNormalizer; // A Normalizer to scale a feature value using a (min,max) range.\nClass Normalizer; // A normalizer normalizes the value of a feature.\nClass StandardNormalizer; // A Normalizer to scale a feature value around an average-and-standard-deviation distribution.\nClass NormalizerException;\n", "des": "A normalizer normalizes the value of a feature."}
{"index": 926, "repo": "commons-compress-1.23.0", "code": "package snappy;\n\nClass FramedSnappyCompressorInputStream; // CompressorInputStream for the framing Snappy format.\nClass FramedSnappyCompressorOutputStream; // CompressorOutputStream for the framing Snappy format.\nClass SnappyCompressorInputStream; // CompressorInputStream for the raw Snappy format.\nClass SnappyCompressorOutputStream; // CompressorOutputStream for the raw Snappy format.\nEnum FramedSnappyDialect; // Dialects of the framing format that FramedSnappyCompressorInputStream can deal with.\n", "des": "Provides stream classes for the Snappy algorithm."}
{"index": 3570, "repo": "lucene-codecs-9.7.0", "code": "package simpletext;\n\nClass SimpleTextCodec; // plain text index format.\nClass SimpleTextCompoundFormat; // plain text compound format.\nClass SimpleTextFieldInfosFormat; // plaintext field infos format\nClass SimpleTextKnnVectorsFormat; // For debugging, curiosity, transparency only!! Do not use this codec in production.\nClass SimpleTextKnnVectorsReader; // Reads vector values from a simple text format.\nClass SimpleTextKnnVectorsWriter; // Writes vector-valued fields in a plain text format\nClass SimpleTextLiveDocsFormat; // reads/writes plaintext live docs\nClass SimpleTextNormsFormat; // plain-text norms format.\nClass SimpleTextNormsFormat.SimpleTextNormsConsumer; // Writes plain-text norms.\nClass SimpleTextNormsFormat.SimpleTextNormsProducer; // Reads plain-text norms.\nClass SimpleTextPointsFormat; // For debugging, curiosity, transparency only!! Do not use this codec in production.\nClass SimpleTextSegmentInfoFormat; // plain text segments file format.\nClass SimpleTextStoredFieldsFormat; // plain text stored fields format.\nClass SimpleTextStoredFieldsReader; // reads plaintext stored fields\nClass SimpleTextStoredFieldsWriter; // Writes plain-text stored fields.\nClass SimpleTextTermVectorsFormat; // plain text term vectors format.\nClass SimpleTextTermVectorsReader; // Reads plain-text term vectors.\nClass SimpleTextTermVectorsWriter; // Writes plain-text term vectors.\n", "des": "Simpletext Codec: writes human readable postings."}
{"index": 724, "repo": "commons-codec-1.16.0", "code": "package net;\n\nClass BCodec; // Identical to the Base64 encoding defined by RFC 1521 and allows a character set to be specified.\nClass PercentCodec; // Implements the Percent-Encoding scheme, as described in HTTP 1.1 specification.\nClass QCodec; // Similar to the Quoted-Printable content-transfer-encoding defined in RFC 1521 and designed to allow text containing mostly ASCII characters to be decipherable on an ASCII terminal without decoding.\nClass QuotedPrintableCodec; // Codec for the Quoted-Printable section of RFC 1521.\nClass URLCodec; // Implements the 'www-form-urlencoded' encoding scheme, also misleadingly known as URL encoding.\n", "des": "Network related encoding and decoding."}
{"index": 2743, "repo": "spring-batch-infrastructure-5.0.2", "code": "package poller;\n\npublic class DirectPoller<S> extends Object implements Poller<S>; // A Poller that uses the callers thread to poll for a result as soon as it is asked for.\npublic interface Poller<T>; // Interface for polling a Callable instance provided by the user.\n", "des": "APIs for polling support."}
{"index": 3412, "repo": "commons-imaging-1.0-alpha3", "code": "package taginfos;\n\nClass TagInfo;\nClass TagInfoAny;\nClass TagInfoAscii;\nClass TagInfoAsciiOrByte;\nClass TagInfoAsciiOrRational;\nClass TagInfoByte;\nClass TagInfoByteOrShort;\nClass TagInfoBytes;\nClass TagInfoDirectory; // A LONG representing an offset to a TIFF directory.\nClass TagInfoDouble;\nClass TagInfoDoubles;\nClass TagInfoFloat;\nClass TagInfoFloats;\nClass TagInfoGpsText; // Used by some GPS tags and the EXIF user comment tag, this badly documented value is meant to contain the text encoding in the first 8 bytes followed by the non-null-terminated text in an unknown byte order.\nClass TagInfoLong;\nClass TagInfoLongOrIFD;\nClass TagInfoLongs;\nClass TagInfoRational;\nClass TagInfoRationals;\nClass TagInfoSByte;\nClass TagInfoSBytes;\nClass TagInfoShort;\nClass TagInfoShortOrLong;\nClass TagInfoShortOrLongOrRational;\nClass TagInfoShortOrRational;\nClass TagInfoShorts;\nClass TagInfoSLong;\nClass TagInfoSLongs;\nClass TagInfoSRational;\nClass TagInfoSRationals;\nClass TagInfoSShort;\nClass TagInfoSShorts;\nClass TagInfoUndefined;\nClass TagInfoUndefineds;\nClass TagInfoUnknown; // A TIFF tag whose definition isn't known.\nClass TagInfoUnknowns;\nClass TagInfoXpString; // Windows XP onwards store some tags using UTF-16LE, but the field type is byte - here we deal with this.\n", "des": "Classes for the TIFF tags."}
{"index": 824, "repo": "calcite-core-1.34.0", "code": "package enumerable;\n\npackage enumerable.impl; // Calcite-specific classes for implementation of regular and window aggregates.\nInterface AggAddContext; // Information for a call to AggImplementor.implementAdd(AggContext, AggAddContext).\nInterface AggContext; // Information on the aggregate calculation context.\nInterface AggImplementor; // Implements an aggregate function by generating expressions to initialize, add to, and get a result from, an accumulator.\nInterface AggregateLambdaFactory<TSource,TOrigAccumulate,TAccumulate,TResult,TKey>; // Generates lambda functions used in EnumerableAggregate.\nInterface AggResetContext; // Information for a call to AggImplementor.implementReset(AggContext, AggResetContext).\nInterface AggResultContext; // Information for a call to AggImplementor.implementResult(AggContext, AggResultContext)\nInterface CallImplementor; // Implements a call via given translator.\nInterface EnumerableBatchNestedLoopJoinRule.Config; // Rule configuration.\nInterface EnumerableFilterToCalcRule.Config; // Rule configuration.\nInterface EnumerableLimitRule.Config; // Rule configuration.\nInterface EnumerableLimitSortRule.Config; // Rule configuration.\nInterface EnumerableMergeUnionRule.Config; // Rule configuration.\nInterface EnumerableProjectToCalcRule.Config; // Rule configuration.\nInterface EnumerableRel; // A relational expression of one of the EnumerableConvention calling conventions.\nInterface LazyAggregateLambdaFactory.LazyAccumulator<TOrigAccumulate,TSource>; // Accumulate on the cached input sources.\nInterface MatchImplementor; // Implementor of Functions used in MATCH_RECOGNIZE Context.\nInterface NestedBlockBuilder; // Allows to build nested code blocks with tracking of current context.\nInterface NotNullImplementor; // Simplified version of CallImplementor that does not know about null semantics.\nInterface PhysType; // Physical type of a row.\nInterface RexImpTable.RexCallImplementor; // Null-safe implementor of RexCalls.\nInterface RexToLixTranslator.InputGetter; // Translates a field of an input to an expression.\nInterface TableFunctionCallImplementor; // Implements a table-valued function call.\nInterface WinAggAddContext; // Information for a call to AggImplementor.implementAdd(AggContext, AggAddContext).\n", "des": "Query optimizer rules for Java calling convention."}
{"index": 2540, "repo": "spring-security-core-6.1.2", "code": "package jdbc;\n\npublic class JdbcDaoImpl extends org.springframework.jdbc.core.support.JdbcDaoSupport implements UserDetailsService, org.springframework.context.MessageSourceAware; // UserDetailsService implementation which retrieves the user details (username, password, enabled flag, and authorities) from a database using JDBC queries.\n", "des": "Exposes a JDBC-based authentication repository, implementing org.springframework.security.core.userdetails.UserDetailsService UserDetailsService."}
{"index": 593, "repo": "org.apache.karaf.main-2.4.4", "code": "package environment;\n\nInterface Constants; // Constants used with the EnvironmentInfo service.\nInterface EnvironmentInfo; // A Framework service which gives access to the command line used to start this running framework as well as information about the environment such as the current operating system, machine architecture, locale and windowing system.\n", "des": "Provides the EnvironmentInfo service."}
{"index": 2846, "repo": "spring-integration-core-6.1.2", "code": "package interceptor;\n\npublic class GlobalChannelInterceptorWrapper extends Object implements org.springframework.core.Ordered;\npublic class MessageSelectingInterceptor extends Object implements org.springframework.messaging.support.ChannelInterceptor; // A ChannelInterceptor that delegates to a list of MessageSelectors to decide whether a Message should be accepted on the MessageChannel.\npublic class ObservationPropagationChannelInterceptor extends ThreadStatePropagationChannelInterceptor<io.micrometer.observation.Observation>; // The ExecutorChannelInterceptor implementation responsible for an Observation propagation from one message flow's thread to another through the MessageChannels involved in the flow.\npublic abstract class ThreadStatePropagationChannelInterceptor<S> extends Object implements org.springframework.messaging.support.ExecutorChannelInterceptor; // The ExecutorChannelInterceptor implementation responsible for the Thread (any?) state propagation from one message flow's thread to another through the MessageChannels involved in the flow.\npublic interface VetoCapableInterceptor; // ChannelInterceptors implementing this interface can veto global interception of a particular channel.\n@ManagedResource public class WireTap extends Object implements org.springframework.messaging.support.ChannelInterceptor, ManageableLifecycle, VetoCapableInterceptor, org.springframework.beans.factory.BeanFactoryAware; // A ChannelInterceptor that publishes a copy of the intercepted message to a secondary target while still sending the original message to the main channel.\n", "des": "Provides classes related to channel interception."}
{"index": 1880, "repo": "shiro-core-2.0.0-alpha-2", "code": "package dao;\n\npublic abstract class DataAccessException extends org.apache.shiro.lang.ShiroException; // Generic exception representing a problem when attempting to access data.\npublic class InvalidResourceUsageException extends DataAccessException; // Root exception indicating invalid or incorrect usage of a data access resource.\n", "des": "Package containing various components useful when building Data Access Objects (DAOs), including a generic Data Access Exception hierarchy."}
{"index": 1964, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package r2dbc;\n\n@FunctionalInterface public interface ConnectionFactoryOptionsBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the ConnectionFactoryOptions through a ConnectionFactoryOptions.Builder whilst retaining default auto-configuration.\n@AutoConfiguration(before={DataSourceAutoConfiguration.class,SqlInitializationAutoConfiguration.class}) @ConditionalOnClass(io.r2dbc.spi.ConnectionFactory.class) @ConditionalOnResource(resources=\"classpath:META-INF/services/io.r2dbc.spi.ConnectionFactoryProvider\") @EnableConfigurationProperties(R2dbcProperties.class) @Import({org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryConfigurations.PoolConfiguration.class,org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryConfigurations.GenericConfiguration.class,org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryDependentConfiguration.class}) public class R2dbcAutoConfiguration extends Object; // Auto-configuration for R2DBC.\npublic interface R2dbcConnectionDetails extends ConnectionDetails; // Details required to establish a connection to an SQL service using R2DBC.\n@ConfigurationProperties(prefix=\"spring.r2dbc\") public class R2dbcProperties extends Object; // Configuration properties for R2DBC.\npublic static class R2dbcProperties.Pool extends Object;\n@AutoConfiguration(before=TransactionAutoConfiguration.class) @ConditionalOnClass({org.springframework.r2dbc.connection.R2dbcTransactionManager.class,org.springframework.transaction.ReactiveTransactionManager.class}) @ConditionalOnSingleCandidate(io.r2dbc.spi.ConnectionFactory.class) @AutoConfigureOrder(2147483647) public class R2dbcTransactionManagerAutoConfiguration extends Object; // Auto-configuration for R2dbcTransactionManager.\n", "des": "Auto-Configuration for R2DBC."}
{"index": 2590, "repo": "spring-rabbit-3.0.6", "code": "package core;\n\npublic class AmqpNackReceivedException extends org.springframework.amqp.AmqpException; // An exception thrown when a negative acknowledgement received after publishing a message.\npublic class BatchingRabbitTemplate extends RabbitTemplate; // A RabbitTemplate that permits batching individual messages into a larger message.\npublic class BrokerEvent extends org.springframework.amqp.event.AmqpEvent; // Represents a broker event generated by the Event Exchange Plugin (https://www.rabbitmq.com/event-exchange.html).\npublic class BrokerEventListener extends Object implements org.springframework.amqp.core.MessageListener, org.springframework.context.ApplicationEventPublisherAware, ConnectionListener, org.springframework.context.SmartLifecycle; // When the event-exchange-plugin is enabled (see https://www.rabbitmq.com/event-exchange.html), if an object of this type is declared as a bean, selected events will be published as BrokerEvents.\n@FunctionalInterface public interface ChannelCallback<T>; // Basic callback for use in RabbitTemplate.\npublic class ConsumeOkNotReceivedException extends org.springframework.amqp.AmqpException; // Thrown when a blocking receive operation is performed but the consumeOk was not received before the receive timeout.\n@FunctionalInterface public interface CorrelationDataPostProcessor; // A callback invoked immediately before publishing a message to update, replace, or create correlation data for publisher confirms.\npublic class DeclarationExceptionEvent extends RabbitAdminEvent; // Application event published when a declaration exception occurs.\npublic final class DeclareExchangeConnectionListener extends Object implements ConnectionListener; // A ConnectionListener that will declare a single exchange when the connection is established.\n@ManagedResource(description=\"Admin Tasks\") public class RabbitAdmin extends Object implements org.springframework.amqp.core.AmqpAdmin, org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // RabbitMQ implementation of portable AMQP administrative operations for AMQP >= 0.9.1.\n", "des": "Provides core classes for Spring Rabbit."}
{"index": 2233, "repo": "spring-data-commons-3.1.2", "code": "package web;\n\npackage web.config; // Spring Data web configuration.\npackage web.querydsl; // Querydsl-specific web support.\npublic class HateoasPageableHandlerMethodArgumentResolver extends PageableHandlerMethodArgumentResolver implements org.springframework.hateoas.server.mvc.UriComponentsContributor; // Extension of PageableHandlerMethodArgumentResolver that also supports enhancing URIs using Spring HATEOAS support.\npublic class HateoasSortHandlerMethodArgumentResolver extends SortHandlerMethodArgumentResolver implements org.springframework.hateoas.server.mvc.UriComponentsContributor; // Extension of SortHandlerMethodArgumentResolver that also supports enhancing URIs using Spring HATEOAS support.\n@Documented @Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) public @interface JsonPath; // Annotation to explicitly declare a JSON Path expression on a projection interface.\npublic class JsonProjectingMethodInterceptorFactory extends Object implements MethodInterceptorFactory; // MethodInterceptorFactory to create a MethodInterceptor that will\npublic interface PageableArgumentResolver extends HandlerMethodArgumentResolver; // Argument resolver to extract a Pageable object from a NativeWebRequest for a particular MethodParameter.\n@Documented @Retention(RUNTIME) @Target(PARAMETER) public @interface PageableDefault; // Annotation to set defaults when injecting a Pageable into a controller method.\npublic class PageableHandlerMethodArgumentResolver extends PageableHandlerMethodArgumentResolverSupport implements PageableArgumentResolver; // Extracts paging information from web requests and thus allows injecting Pageable instances into controller methods.\npublic abstract class PageableHandlerMethodArgumentResolverSupport extends Object; // Base class providing methods for handler method argument resolvers to create paging information from web requests and thus allows injecting Pageable instances into controller methods.\npublic class PagedResourcesAssembler<T> extends Object implements org.springframework.hateoas.server.RepresentationModelAssembler<Page<T>,org.springframework.hateoas.PagedModel<org.springframework.hateoas.EntityModel<T>>>; // RepresentationModelAssembler to easily convert Page instances into PagedModel.\n", "des": "Integration with Spring MVC."}
{"index": 1412, "repo": "spring-boot-actuator-3.1.1", "code": "package amqp;\n\npublic class RabbitMetrics extends Object implements io.micrometer.core.instrument.binder.MeterBinder; // A MeterBinder for RabbitMQ Java Client metrics.\n", "des": "Actuator support for RabbitMQ Java Client metrics."}
{"index": 1550, "repo": "spring-context-6.0.11", "code": "package stereotype;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Indexed public @interface Component; // Indicates that an annotated class is a \"component\".\n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface Controller; // Indicates that an annotated class is a \"Controller\" (e.g.\n@Target(TYPE) @Retention(RUNTIME) @Documented public @interface Indexed; // Indicate that the annotated element represents a stereotype for the index.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface Repository; // Indicates that an annotated class is a \"Repository\", originally defined by Domain-Driven Design (Evans, 2003) as \"a mechanism for encapsulating storage, retrieval, and search behavior which emulates a collection of objects\".\n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface Service; // Indicates that an annotated class is a \"Service\", originally defined by Domain-Driven Design (Evans, 2003) as \"an operation offered as an interface that stands alone in the model, with no encapsulated state.\"\n", "des": "Annotations denoting the roles of types or methods in the overall architecture (at a conceptual, rather than implementation, level)."}
{"index": 3029, "repo": "spring-web-6.0.11", "code": "package async;\n\npublic class AsyncRequestTimeoutException extends RuntimeException implements ErrorResponse; // Exception to be thrown when an async request times out.\npublic interface AsyncWebRequest extends NativeWebRequest; // Extends NativeWebRequest with methods for asynchronous request processing.\npublic interface CallableProcessingInterceptor; // Intercepts concurrent request handling, where the concurrent result is obtained by executing a Callable on behalf of the application with an AsyncTaskExecutor.\npublic class DeferredResult<T> extends Object; // DeferredResult provides an alternative to using a Callable for asynchronous request processing.\n@FunctionalInterface public static interface DeferredResult.DeferredResultHandler; // Handles a DeferredResult value when set.\npublic interface DeferredResultProcessingInterceptor; // Intercepts concurrent request handling, where the concurrent result is obtained by waiting for a DeferredResult to be set from a thread chosen by the application (e.g.\npublic class StandardServletAsyncWebRequest extends ServletWebRequest implements AsyncWebRequest, AsyncListener; // A Servlet implementation of AsyncWebRequest.\npublic class TimeoutCallableProcessingInterceptor extends Object implements CallableProcessingInterceptor; // Sends a 503 (SERVICE_UNAVAILABLE) in case of a timeout if the response is not already committed.\npublic class TimeoutDeferredResultProcessingInterceptor extends Object implements DeferredResultProcessingInterceptor; // Sends a 503 (SERVICE_UNAVAILABLE) in case of a timeout if the response is not already committed.\npublic final class WebAsyncManager extends Object; // The central class for managing asynchronous request processing, mainly intended as an SPI and not typically used directly by application classes.\npublic class WebAsyncTask<V> extends Object implements org.springframework.beans.factory.BeanFactoryAware; // Holder for a Callable, a timeout value, and a task executor.\npublic abstract class WebAsyncUtils extends Object; // Utility methods related to processing asynchronous web requests.\n", "des": "Support for asynchronous request processing."}
{"index": 2869, "repo": "spring-integration-core-6.1.2", "code": "package leader;\n\npackage leader.event; // Temporary package until s-c-c-core is released.\npublic abstract class AbstractCandidate extends Object implements Candidate; // Base implementation of a Candidate.\npublic interface Candidate; // Interface that defines the contract for candidates to participate in a leader election.\n@FunctionalInterface public interface Context; // Interface that defines the context for candidate leadership.\npublic class DefaultCandidate extends AbstractCandidate; // Simple Candidate for leadership.\n", "des": "Temporary package until s-c-c-core is released."}
{"index": 3485, "repo": "opennlp-uima-2.2.0", "code": "package postag;\n\nInterface POSModelResource;\nClass POSModelResourceImpl;\nClass POSTagger; // OpenNLP Part Of Speech annotator.\n", "des": "Package related to part-of-speech tagging."}
{"index": 558, "repo": "hadoop-common-3.3.4", "code": "package lib;\n\nClass StaticUserWebFilter; // Provides a servlet filter that pretends to authenticate a fake user (Dr.Who) so that the web UI is usable for a secure cluster without authentication.\nClass StaticUserWebFilter.StaticUserFilter;\n", "des": "This package provides user-selectable (via configuration) classes that add functionality to the web UI."}
{"index": 2049, "repo": "spring-boot-loader-3.1.1", "code": "package jar;\n\npublic class Handler extends URLStreamHandler; // URLStreamHandler for Spring Boot loader JarFiles.\npublic class JarFile extends JarFile implements Iterable<JarEntry>; // Extended variant of JarFile that behaves in the same way but offers the following additional functionality.\n", "des": "Support for loading and manipulating JAR/WAR files."}
{"index": 1538, "repo": "spring-context-6.0.11", "code": "package jndi;\n\npackage jndi.support; // Support classes for JNDI usage, including a JNDI-based BeanFactory implementation.\npublic class JndiAccessor extends Object; // Convenient superclass for JNDI accessors, providing \"jndiTemplate\" and \"jndiEnvironment\" bean properties.\n@FunctionalInterface public interface JndiCallback<T>; // Callback interface to be implemented by classes that need to perform an operation (such as a lookup) in a JNDI context.\npublic class JndiLocatorDelegate extends JndiLocatorSupport; // JndiLocatorSupport subclass with public lookup methods, for convenient use as a delegate.\npublic abstract class JndiLocatorSupport extends JndiAccessor; // Convenient superclass for classes that can locate any number of JNDI objects.\npublic class JndiLookupFailureException extends org.springframework.core.NestedRuntimeException; // RuntimeException to be thrown in case of JNDI lookup failures, in particular from code that does not declare JNDI's checked NamingException: for example, from Spring's JndiObjectTargetSource.\npublic class JndiObjectFactoryBean extends JndiObjectLocator implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanClassLoaderAware; // FactoryBean that looks up a JNDI object.\npublic abstract class JndiObjectLocator extends JndiLocatorSupport implements org.springframework.beans.factory.InitializingBean; // Convenient superclass for JNDI-based service locators, providing configurable lookup of a specific JNDI resource.\npublic class JndiObjectTargetSource extends JndiObjectLocator implements org.springframework.aop.TargetSource; // AOP TargetSource that provides configurable JNDI lookups for getTarget() calls.\npublic class JndiPropertySource extends org.springframework.core.env.PropertySource<JndiLocatorDelegate>; // PropertySource implementation that reads properties from an underlying Spring JndiLocatorDelegate.\npublic class JndiTemplate extends Object; // Helper class that simplifies JNDI operations.\npublic class JndiTemplateEditor extends PropertyEditorSupport; // Properties editor for JndiTemplate objects.\npublic class TypeMismatchNamingException extends NamingException; // Exception thrown if a type mismatch is encountered for an object located in a JNDI environment.\n", "des": "The classes in this package make JNDI easier to use, facilitating the accessing of configuration stored in JNDI, and provide useful superclasses for JNDI access classes."}
{"index": 2613, "repo": "wicket-util-10.0.0-M1", "code": "package resource;\n\npublic abstract class AbstractResourceStream extends Object implements IResourceStream;\npublic abstract class AbstractResourceStreamWriter extends Object implements IResourceStreamWriter; // Base implementation of an IResourceStreamWriter so that you only have to override the IResourceStreamWriter.write(java.io.OutputStream).\npublic abstract class AbstractStringResourceStream extends AbstractResourceStream implements IStringResourceStream; // Base class for string resources.\npublic class FileResourceStream extends AbstractResourceStream implements IFixedLocationResourceStream; // A FileResourceStream is an IResource implementation for files.\npublic class FileSystemResourceStream extends AbstractResourceStream implements IFixedLocationResourceStream; // A FileSystemResourceStream is an IResourceStream implementation for Java NIO paths.\npublic interface IFixedLocationResourceStream; // Non-dynamic resource streams point to fixed locations, like a file or a url.\npublic interface IResourceStream extends IModifiable, IClusterable, Closeable; // Interface to a streamed resource.\npublic interface IResourceStreamWriter extends IResourceStream; // Special IResourceStream implementation that a Resource can return when it directly wants to write to an output stream instead of return the IResourceStream.getInputStream().\npublic interface IStringResourceStream extends IResourceStream; // A resource that can be converted to a String representation, possibly using an explicit Charset.\npublic final class ResourceStreamNotFoundException extends Exception; // Thrown if a required resource cannot be found.\npublic class ResourceStreamWrapper extends Object implements IResourceStream; // A IResourceStream that wraps another resource stream\npublic class ResourceUtils extends Object;\npublic static class ResourceUtils.PathLocale extends Object;\npublic class StringBufferResourceStream extends AbstractStringResourceStream; // A string resource that can be appended to.\npublic final class StringResourceStream extends AbstractStringResourceStream; // A StringResourceStream is an IResource implementation for strings.\npublic class XSLTResourceStream extends AbstractResourceStream; // IResourceStream that applies XSLT on an input IResourceStream.\npublic class ZipResourceStream extends AbstractResourceStream; // An IResourceStream that ZIPs a directory's contents on the fly\n", "des": "Base support for resources."}
{"index": 792, "repo": "lucene-analyzers-common-8.11.2", "code": "package miscellaneous;\n\nInterface ConcatenateGraphFilter.BytesRefBuilderTermAttribute; // Attribute providing access to the term builder and UTF-16 conversion\nClass ASCIIFoldingFilter; // This class converts alphabetic, numeric, and symbolic Unicode characters which are not in the first 127 ASCII characters (the \"Basic Latin\" Unicode block) into their ASCII equivalents, if one exists.\nClass ASCIIFoldingFilterFactory; // Factory for ASCIIFoldingFilter.\nClass CapitalizationFilter; // A filter to apply normal capitalization rules to Tokens.\nClass CapitalizationFilterFactory; // Factory for CapitalizationFilter.\nClass CodepointCountFilter; // Removes words that are too long or too short from the stream.\nClass CodepointCountFilterFactory; // Factory for CodepointCountFilter.\nClass ConcatenateGraphFilter; // Concatenates/Joins every incoming token with a separator into one output token for every path through the token stream (which is a graph).\nClass ConcatenateGraphFilter.BytesRefBuilderTermAttributeImpl; // Implementation of ConcatenateGraphFilter.BytesRefBuilderTermAttribute\nClass ConcatenateGraphFilterFactory; // Factory for ConcatenateGraphFilter.\nClass ConcatenatingTokenStream; // A TokenStream that takes an array of input TokenStreams as sources, and concatenates them together.\nClass ConditionalTokenFilter; // Allows skipping TokenFilters based on the current set of attributes.\nClass ConditionalTokenFilterFactory; // Abstract parent class for analysis factories that create ConditionalTokenFilter instances\nClass DateRecognizerFilter; // Filters all tokens that cannot be parsed to a date, using the provided DateFormat.\nClass DateRecognizerFilterFactory; // Factory for DateRecognizerFilter.\nClass DelimitedTermFrequencyTokenFilter; // Characters before the delimiter are the \"token\", the textual integer after is the term frequency.\nClass DelimitedTermFrequencyTokenFilterFactory; // Factory for DelimitedTermFrequencyTokenFilter.\nClass DropIfFlaggedFilter; // Allows Tokens with a given combination of flags to be dropped.\nClass DropIfFlaggedFilterFactory; // Provides a filter that will drop tokens matching a set of flags.\nClass EmptyTokenStream; // An always exhausted token stream.\nClass FingerprintFilter; // Filter outputs a single token which is a concatenation of the sorted and de-duplicated set of input tokens.\n", "des": "Miscellaneous Tokenstreams."}
{"index": 2006, "repo": "spring-boot-devtools-3.1.1", "code": "package devtools;\n\npackage devtools.autoconfigure; // Auto-configuration for spring-boot-devtools.\npackage devtools.classpath; // Support for classpath monitoring.\npackage devtools.env; // DevTools classes relating to Spring Framework's Environment.\npackage devtools.filewatch; // Class to watch the local filesystem for changes.\npackage devtools.livereload; // Support for the livereload protocol.\npackage devtools.logger; // Devtools specific logging concerns.\npackage devtools.restart; // Application restart support.\npackage devtools.settings; // Classes for loading DevTools settings.\npackage devtools.system; // Devtools system support classes.\npublic final class RemoteSpringApplication extends Object; // Application that can be used to establish a link to remotely running Spring Boot code.\n", "des": "Spring Boot developer tools."}
{"index": 2251, "repo": "spring-data-keyvalue-3.1.2", "code": "package map;\n\npublic class MapKeyValueAdapter extends AbstractKeyValueAdapter; // KeyValueAdapter implementation for Map.\n", "des": "Repository implementation backed by generic Map instances."}
{"index": 1409, "repo": "spring-boot-actuator-3.1.1", "code": "package mail;\n\npublic class MailHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for configured smtp server(s).\n", "des": "Actuator support for JavaMail."}
{"index": 1344, "repo": "groovy-all-4.0.13", "code": "package javac;\n\npublic class JavaAwareCompilationUnit extends CompilationUnit; // Compilation Unit capable of compiling Java source files.\npublic class JavaAwareResolveVisitor extends ResolveVisitor;\npublic class JavacCompilerFactory extends Object implements JavaCompilerFactory;\npublic class JavacJavaCompiler extends Object implements JavaCompiler;\npublic interface JavaCompiler;\npublic interface JavaCompilerFactory;\npublic class JavaStubCompilationUnit extends CompilationUnit; // Compilation unit to only generate stubs.\npublic class JavaStubGenerator extends Object;\npublic class MemJavaFileObject extends SimpleJavaFileObject; // Represents a Java source file in memory to compile\npublic class RawJavaFileObject extends SimpleJavaFileObject; // Represents a Java source file in file to compile\n", "des": "Classes related to the joint compiler."}
{"index": 678, "repo": "commons-lang3-3.12.0", "code": "package tuple;\n\nClass ImmutablePair<L,R>; // An immutable pair consisting of two Object elements.\nClass ImmutableTriple<L,M,R>; // An immutable triple consisting of three Object elements.\nClass MutablePair<L,R>; // A mutable pair consisting of two Object elements.\nClass MutableTriple<L,M,R>; // A mutable triple consisting of three Object elements.\nClass Pair<L,R>; // A pair consisting of two elements.\nClass Triple<L,M,R>; // A triple consisting of three elements.\n", "des": "Tuple classes, starting with a Pair class in version 3.0."}
{"index": 1925, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package freemarker;\n\n@AutoConfiguration @ConditionalOnClass({freemarker.template.Configuration.class,org.springframework.ui.freemarker.FreeMarkerConfigurationFactory.class}) @EnableConfigurationProperties(FreeMarkerProperties.class) @Import({org.springframework.boot.autoconfigure.freemarker.FreeMarkerServletWebConfiguration.class,org.springframework.boot.autoconfigure.freemarker.FreeMarkerReactiveWebConfiguration.class,org.springframework.boot.autoconfigure.freemarker.FreeMarkerNonWebConfiguration.class}) @ImportRuntimeHints(org.springframework.boot.autoconfigure.freemarker.FreeMarkerRuntimeHints.class) public class FreeMarkerAutoConfiguration extends Object; // Auto-configuration for FreeMarker.\n@ConfigurationProperties(prefix=\"spring.freemarker\") public class FreeMarkerProperties extends AbstractTemplateViewResolverProperties; // @ConfigurationProperties for configuring FreeMarker.\npublic class FreeMarkerTemplateAvailabilityProvider extends PathBasedTemplateAvailabilityProvider; // TemplateAvailabilityProvider that provides availability information for FreeMarker view templates.\nprotected static final class FreeMarkerTemplateAvailabilityProvider.FreeMarkerTemplateAvailabilityProperties extends PathBasedTemplateAvailabilityProvider.TemplateAvailabilityProperties;\n", "des": "Auto-configuration for FreeMarker."}
{"index": 2433, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jmx;\n\n@AutoConfiguration(after={org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration.class,EndpointAutoConfiguration.class}) @EnableConfigurationProperties({JmxEndpointProperties.class,org.springframework.boot.autoconfigure.jmx.JmxProperties.class}) @ConditionalOnProperty(prefix=\"spring.jmx\", name=\"enabled\", havingValue=\"true\") public class JmxEndpointAutoConfiguration extends Object; // Auto-configuration for JMX @Endpoint support.\n@ConfigurationProperties(\"management.endpoints.jmx\") public class JmxEndpointProperties extends Object; // Configuration properties for JMX export of endpoints.\npublic static class JmxEndpointProperties.Exposure extends Object;\n", "des": "Actuator JMX endpoint auto-configuration."}
{"index": 3484, "repo": "opennlp-uima-2.2.0", "code": "package namefind;\n\nInterface TokenNameFinderModelResource;\nClass DictionaryNameFinder;\nClass NameFinder; // OpenNLP Name annotator.\nClass TokenNameFinderModelResourceImpl;\n", "des": "Package related to finding proper names and numeric amounts."}
{"index": 1059, "repo": "avro-1.11.2", "code": "package file;\n\nInterface FileReader<D>; // Interface for reading data from a file.\nInterface SeekableInput; // An InputStream that supports seek and tell.\nInterface Syncable;\nClass BZip2Codec; // Implements bzip2 compression and decompression.\nClass Codec; // Interface for Avro-supported compression codecs for data files.\nClass CodecFactory; // Encapsulates the ability to specify and configure a compression codec.\nClass DataFileConstants; // Constants used in data files.\nClass DataFileReader<D>; // Random access to files written with DataFileWriter.\nClass DataFileReader12<D>; // Read files written by Avro version 1.2.\nClass DataFileStream<D>; // Streaming access to files written by DataFileWriter.\nClass DataFileStream.Header; // A handle that can be used to reopen a DataFile without re-reading the header of the stream.\nClass DataFileWriter<D>; // Stores in a file a sequence of data conforming to a schema.\nClass DeflateCodec; // Implements DEFLATE (RFC1951) compression and decompression.\nClass SeekableByteArrayInput; // A SeekableInput backed with data in a byte array.\nClass SeekableFileInput; // A FileInputStream that implements SeekableInput.\nClass SnappyCodec; // Implements Snappy compression and decompression.\nClass SyncableFileOutputStream; // An implementation of Syncable which writes to a file.\nClass XZCodec; // Implements xz compression and decompression.\nClass ZstandardCodec;\nClass DataFileWriter.AppendWriteException; // Thrown by DataFileWriter.append(Object) when an exception occurs while writing a datum to the buffer.\n", "des": "A container file for Avro data."}
{"index": 3053, "repo": "spring-ws-core-4.0.5", "code": "package core;\n\npackage core.support; // Convenient super class for application classes that need Web service access.\npublic interface FaultMessageResolver; // Defines the interface for objects than can resolve fault WebServiceMessages.\npublic class SimpleFaultMessageResolver extends Object implements FaultMessageResolver; // Simple fault resolver that simply throws a WebServiceFaultException when a fault occurs.\npublic interface SourceExtractor<T>; // Callback interface for extracting a result object from a Source instance.\npublic interface WebServiceMessageCallback; // Generic callback interface for code that operates on a WebServiceMessage.\npublic interface WebServiceMessageExtractor<T>; // Callback interface for extracting a result object from a WebServiceMessage instance.\npublic interface WebServiceOperations; // Specifies a basic set of Web service operations.\npublic class WebServiceTemplate extends WebServiceAccessor implements WebServiceOperations; // The central class for client-side Web services. It provides a message-driven approach to sending and receiving WebServiceMessage instances.\n", "des": "Core package of the Spring-WS client-side support."}
{"index": 3677, "repo": "solr-core-9.3.0", "code": "package parser;\n\nInterface QueryParserConstants; // Token literal values and constants.\nClass QueryParser;\nClass QueryParserTokenManager; // Token Manager.\nClass SolrQueryParserBase; // This class is overridden by QueryParser in QueryParser.jj and acts to separate the majority of the Java code from the .jj grammar file.\nClass SolrQueryParserBase.RawQuery;\nClass Token; // Describes the input token stream.\nEnum QueryParser.Operator; // The default operator for parsing queries.\nEnum SolrQueryParserBase.MagicFieldName; // Identifies the list of all known \"magic fields\" that trigger special parsing behavior\nEnum SolrQueryParserBase.SynonymQueryStyle; // Query strategy when analyzed query terms overlap the same position (ie synonyms) consider if pants and khakis are query time synonyms\nClass ParseException; // This exception is thrown when parse errors are encountered.\nClass TokenMgrError; // Token Manager Error.\n", "des": "Solr native variant of the Lucene Classic QueryParser"}
{"index": 954, "repo": "spring-ws-3.0.10.RELEASE", "code": "package dom;\n\nClass Dom4jPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports dom4j elements.\nClass DomPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports W3C DOM elements.\nClass JDomPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports JDOM elements.\nClass XomPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports XOM elements.\n", "des": "Provides DOM-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces."}
{"index": 2346, "repo": "spring-boot-3.1.1", "code": "package netty;\n\npublic class NettyReactiveWebServerFactory extends AbstractReactiveWebServerFactory; // ReactiveWebServerFactory that can be used to create NettyWebServers.\n@FunctionalInterface public interface NettyRouteProvider extends Function<reactor.netty.http.server.HttpServerRoutes,reactor.netty.http.server.HttpServerRoutes>; // Function that can add new routes to an HttpServerRoutes instance.\n@FunctionalInterface public interface NettyServerCustomizer extends Function<reactor.netty.http.server.HttpServer,reactor.netty.http.server.HttpServer>; // Mapping function that can be used to customize a Reactor Netty server instance.\npublic class NettyWebServer extends Object implements WebServer; // WebServer that can be used to control a Reactor Netty web server.\npublic class SslServerCustomizer extends Object implements NettyServerCustomizer; // NettyServerCustomizer that configures SSL for the given Reactor Netty server instance.\n", "des": "Embedded reactive web server implementation backed by Netty."}
{"index": 2849, "repo": "spring-integration-core-6.1.2", "code": "package config;\n\npackage config.annotation; // Provides classes supporting annotation-based configuration.\npackage config.xml; // Provides supporting XML-based configuration - parsers, namespace handlers.\npublic abstract class AbstractEvaluationContextFactoryBean extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // Abstract class for integration evaluation context factory beans.\npublic abstract class AbstractMethodAnnotationPostProcessor<T extends Annotation> extends Object implements MethodAnnotationPostProcessor<T>, org.springframework.beans.factory.BeanFactoryAware; // Base class for Method-level annotation post-processors.\nprotected static record AbstractMethodAnnotationPostProcessor.BeanDefinitionPropertiesMapper(org.springframework.beans.factory.config.BeanDefinition beanDefinition, List<Annotation> annotations) extends Record;\npublic abstract class AbstractSimpleMessageHandlerFactoryBean<H extends org.springframework.messaging.MessageHandler> extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.messaging.MessageHandler>, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationEventPublisherAware; // Factory bean to create and configure a MessageHandler.\npublic abstract class AbstractStandardMessageHandlerFactoryBean extends AbstractSimpleMessageHandlerFactoryBean<org.springframework.messaging.MessageHandler> implements org.springframework.beans.factory.DisposableBean; // Base class for FactoryBeans that create standard MessageHandler instances.\npublic class AggregatorAnnotationPostProcessor extends AbstractMethodAnnotationPostProcessor<Aggregator>; // Post-processor for the @Aggregator annotation.\npublic class AggregatorFactoryBean extends AbstractSimpleMessageHandlerFactoryBean<AggregatingMessageHandler>; // FactoryBean to create an AggregatingMessageHandler.\npublic class BridgeFromAnnotationPostProcessor extends AbstractMethodAnnotationPostProcessor<BridgeFrom>; // Post-processor for the @BridgeFrom annotation.\npublic class BridgeToAnnotationPostProcessor extends AbstractMethodAnnotationPostProcessor<BridgeTo>; // Post-processor for the @BridgeTo annotation.\n", "des": "Base package for configuration."}
{"index": 28, "repo": "commons-collections4-4.4", "code": "package sequence;\n\nInterface CommandVisitor<T>; // This interface should be implemented by user object to walk through EditScript objects.\nInterface ReplacementsHandler<T>; // This interface is devoted to handle synchronized replacement sequences.\nClass DeleteCommand<T>; // Command representing the deletion of one object of the first sequence.\nClass EditCommand<T>; // Abstract base class for all commands used to transform an objects sequence into another one.\nClass EditScript<T>; // This class gathers all the commands needed to transform one objects sequence into another objects sequence.\nClass InsertCommand<T>; // Command representing the insertion of one object of the second sequence.\nClass KeepCommand<T>; // Command representing the keeping of one object present in both sequences.\nClass ReplacementsFinder<T>; // This class handles sequences of replacements resulting from a comparison.\nClass SequencesComparator<T>; // This class allows to compare two objects sequences.\n", "des": "This package provides classes to compare two sequences of objects."}
{"index": 404, "repo": "commons-jexl3-3.3", "code": "package scripting;\n\nClass JexlScriptEngine; // Implements the JEXL ScriptEngine for JSF-223.\nClass JexlScriptEngineFactory; // Implements the JEXL ScriptEngineFactory for JSF-223.\nClass Main; // Test application for JexlScriptEngine (JSR-223 implementation).\n", "des": "Contains the JSR-223 Scripting Engine for JEXL script."}
{"index": 3234, "repo": "opencms-core-15.0", "code": "package shared;\n\npackage shared.rpc; // Contains the acacia editor RPC service interfaces.\nInterface I_CmsSerialDateValue; // Interface to access serial date values easily.\nClass A_CmsSerialDateValue; // The base class for implementations of serial date values.\nClass CmsAttributeConfiguration; // The attribute configuration.\nClass CmsContentDefinition; // Contains all information defining a content entity type.\nClass CmsEntity; // Serializable entity implementation.\nClass CmsEntityAttribute; // Serializable entity attribute implementation.\nClass CmsEntityChangeEvent; // Value change event for entities with an additional field that indicates the type of change.\nClass CmsEntityHtml; // The entity HTML representation including validation data.\nClass CmsSerialDateUtil; // Utility methods for the serial date widget.\nClass CmsTabInfo; // Form tab information bean.\nClass CmsType; // CmsEntity attribute type data.\nClass CmsValidationResult; // The entity validation result containing all errors and warnings for a set of entities.\nClass CmsWidgetUtil; // Helper with methods commonly used in editor widgets.\nClass I_CmsSerialDateValue.JsonKey; // The JSON keys used in the JSON representation of serial date specifications.\nEnum CmsEntityChangeEvent.ChangeType; // Enum indicating the type of changes.\nEnum I_CmsSerialDateValue.DateType; // Different types of serial dates.\nEnum I_CmsSerialDateValue.EndType; // Different types of conditions how serial dates can end.\nEnum I_CmsSerialDateValue.Month; // Months as enumeration.\nEnum I_CmsSerialDateValue.PatternType; // Type of the series.\nEnum I_CmsSerialDateValue.WeekDay; // Enumeration representing the week days.\nEnum I_CmsSerialDateValue.WeekOfMonth; // Possible weeks of a month.\n", "des": "Contains the acacia editor shared client/server classes."}
{"index": 2085, "repo": "spring-webmvc-6.0.11", "code": "package groovy;\n\npublic interface GroovyMarkupConfig; // Interface to be implemented by objects that configure and manage a Groovy MarkupTemplateEngine for automatic lookup in a web environment.\npublic class GroovyMarkupConfigurer extends groovy.text.markup.TemplateConfiguration implements GroovyMarkupConfig, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // An extension of Groovy's TemplateConfiguration and an implementation of Spring MVC's GroovyMarkupConfig for creating a MarkupTemplateEngine for use in a web application.\npublic class GroovyMarkupView extends AbstractTemplateView; // An AbstractTemplateView subclass based on Groovy XML/XHTML markup templates.\npublic class GroovyMarkupViewResolver extends AbstractTemplateViewResolver; // Convenience subclass of AbstractTemplateViewResolver that supports GroovyMarkupView (i.e.\n", "des": "Support classes for the integration of Groovy Templates as Spring web view technology."}
{"index": 406, "repo": "spring-social-core-1.1.6.RELEASE", "code": "package social;\n\npackage social.connect; // Framework for establishing connections between local users and users of ServiceProviders such as Twitter and Facebook.\npackage social.oauth1; // OAuth1 client.\npackage social.oauth2; // OAuth2 client.\npackage social.support; // Internal utilities and helpers used by the Spring Social core module.\nInterface ApiBinding; // Base interface that may be implemented by API bindings.\nInterface ServiceProvider<A>; // Top-level marker interface defining a ServiceProvider.\nInterface UserIdSource; // Strategy interface used to determine the account ID of the current user.\nClass ApiException; // Indicates that an error occurred while consuming a provider API.\nClass DuplicateStatusException; // Exception thrown when a duplicate status is posted.\nClass ExpiredAuthorizationException; // Exception indicating that the authorization presented to the server has expired.\nClass InsufficientPermissionException; // Exception thrown when attempting an operation that requires a permission not granted to the caller.\nClass InternalServerErrorException; // Exception indicating an internal error occurred on the server.\nClass InvalidAuthorizationException; // Exception indicating that the authorization used during an operation invocation is invalid.\nClass MissingAuthorizationException; // Exception indicating that an operation requiring authorization was attempted without providing authorization.\nClass NotAuthorizedException; // Indicates the client is not authorized to invoke the API.\nClass OperationNotPermittedException; // Indicates an operation was attempted that is not permitted.\nClass RateLimitExceededException; // Exception thrown when API calls are being rate-limited.\nClass RejectedAuthorizationException; // Exception indicating that the authorization used during an operation invocation is rejected by the server.\nClass ResourceNotFoundException; // Indicates that the requested provider API resource could not be found.\nClass RevokedAuthorizationException; // Exception indicating that the authorization used during an operation invocation has been revoked.\nClass ServerDownException; // Exception indicating that the server is down or being upgraded.\nClass ServerException; // Exception thrown when a server error occurs.\nClass ServerOverloadedException; // Exception indicating that the server is experiencing high load.\nClass SocialException; // Exception class indicating a problem occurred performing an operation against a service provider.\nClass UncategorizedApiException; // Indicates that an otherwise uncategorized error occurred while consuming a provider API.\n", "des": "Core Spring Social classes"}
{"index": 2268, "repo": "spring-vault-core-3.0.4", "code": "package convert;\n\npublic abstract class AbstractVaultConverter extends Object implements VaultConverter, InitializingBean; // Base class for VaultConverter implementations.\npublic class DefaultVaultTypeMapper extends DefaultTypeMapper<Map<String,Object>> implements VaultTypeMapper; // Default implementation of VaultTypeMapper allowing configuration of the key to lookup and store type information in SecretDocument.\npublic class MappingVaultConverter extends AbstractVaultConverter; // VaultConverter that uses a MappingContext to do sophisticated mapping of domain objects to SecretDocument.\npublic class SecretDocument extends Object; // Vault database exchange object containing data before/after it's exchanged with Vault.\npublic interface VaultConverter extends EntityConverter<VaultPersistentEntity<?>,VaultPersistentProperty,Object,SecretDocument>; // Central Vault-specific converter interface.\npublic class VaultCustomConversions extends CustomConversions; // Value object to capture custom conversion.\npublic interface VaultTypeMapper extends TypeMapper<Map<String,Object>>; // Vault-specific TypeMapper exposing that SecretDocuments might contain a type key.\n", "des": "Spring Vault specific converter infrastructure."}
{"index": 2733, "repo": "spring-batch-infrastructure-5.0.2", "code": "package mail;\n\npackage mail.builder; // Builders for JavaMail related components.\npackage mail.javamail; // JavaMail related components.\npublic class DefaultMailErrorHandler extends Object implements MailErrorHandler; // This MailErrorHandler implementation simply rethrows the exception it receives.\npublic interface MailErrorHandler; // This class is used to handle errors that occur when email messages are unable to be sent.\npublic class SimpleMailMessageItemWriter extends Object implements ItemWriter<org.springframework.mail.SimpleMailMessage>, org.springframework.beans.factory.InitializingBean; // A simple ItemWriter that can send mail messages.\n", "des": "Java Mail based components."}
{"index": 3668, "repo": "solr-core-9.3.0", "code": "package legacy;\n\nInterface LegacyNumericTokenStream.LegacyNumericTermAttribute; // Expert: Use this attribute to get the details of the currently generated token.\nClass BBoxStrategy;\nClass LegacyDoubleField;\nClass LegacyField;\nClass LegacyFieldType;\nClass LegacyFloatField;\nClass LegacyIntField;\nClass LegacyLongField;\nClass LegacyNumericRangeQuery<T extends Number>;\nClass LegacyNumericTokenStream;\nClass LegacyNumericTokenStream.LegacyNumericTermAttributeImpl; // Implementation of LegacyNumericTokenStream.LegacyNumericTermAttribute.\nClass LegacyNumericUtils;\nClass LegacyNumericUtils.IntRangeBuilder; // Callback for LegacyNumericUtils.splitIntRange(org.apache.solr.legacy.LegacyNumericUtils.IntRangeBuilder, int, int, int).\nClass LegacyNumericUtils.LongRangeBuilder; // Callback for LegacyNumericUtils.splitLongRange(org.apache.solr.legacy.LegacyNumericUtils.LongRangeBuilder, int, long, long).\nEnum LegacyNumericType;\n", "des": "Deprecated stuff!"}
{"index": 1512, "repo": "spring-context-6.0.11", "code": "package expression;\n\npublic final class AnnotatedElementKey extends Object implements Comparable<AnnotatedElementKey>; // Represent an AnnotatedElement on a particular Class and is suitable as a key.\npublic class BeanExpressionContextAccessor extends Object implements org.springframework.expression.PropertyAccessor; // EL property accessor that knows how to traverse the beans and contextual objects of a Spring BeanExpressionContext.\npublic class BeanFactoryAccessor extends Object implements org.springframework.expression.PropertyAccessor; // EL property accessor that knows how to traverse the beans of a Spring BeanFactory.\npublic class BeanFactoryResolver extends Object implements org.springframework.expression.BeanResolver; // EL bean resolver that operates against a Spring BeanFactory.\npublic abstract class CachedExpressionEvaluator extends Object; // Shared utility class used to evaluate and cache SpEL expressions that are defined on AnnotatedElement.\nprotected static class CachedExpressionEvaluator.ExpressionKey extends Object implements Comparable<CachedExpressionEvaluator.ExpressionKey>; // An expression key.\npublic class EnvironmentAccessor extends Object implements org.springframework.expression.PropertyAccessor; // Read-only EL property accessor that knows how to retrieve keys of a Spring Environment instance.\npublic class MapAccessor extends Object implements org.springframework.expression.spel.CompilablePropertyAccessor; // EL property accessor that knows how to traverse the keys of a standard Map.\npublic class MethodBasedEvaluationContext extends org.springframework.expression.spel.support.StandardEvaluationContext; // A method-based EvaluationContext that provides explicit support for method-based invocations.\npublic class StandardBeanExpressionResolver extends Object implements org.springframework.beans.factory.config.BeanExpressionResolver; // Standard implementation of the BeanExpressionResolver interface, parsing and evaluating Spring EL using Spring's expression module.\n", "des": "Expression parsing support within a Spring application context."}
{"index": 1076, "repo": "hadoop-yarn-common-3.3.6", "code": "package hamlet2;\n\nInterface HamletSpec.__;\nInterface HamletSpec._Anchor;\nInterface HamletSpec._Block; // %block -(FORM|FIELDSET)\nInterface HamletSpec._Body;\nInterface HamletSpec._Cell;\nInterface HamletSpec._Child;\nInterface HamletSpec._Content;\nInterface HamletSpec._Dl;\nInterface HamletSpec._FieldSet;\nInterface HamletSpec._FontSize; // Part of %pre.exclusion\nInterface HamletSpec._FontStyle; // %fontstyle -(%pre.exclusion)\nInterface HamletSpec._Form;\nInterface HamletSpec._FormCtrl;\nInterface HamletSpec._Head;\nInterface HamletSpec._Html;\nInterface HamletSpec._ImgObject; // Part of %pre.exclusion\nInterface HamletSpec._InsDel; // INS and DEL are unusual for HTML \"in that they may serve as either block-level or inline elements (but not both)\".\nInterface HamletSpec._Label;\nInterface HamletSpec._Legend;\nInterface HamletSpec._Li;\nInterface HamletSpec._Object;\nInterface HamletSpec._Option;\nInterface HamletSpec._Param;\nInterface HamletSpec._RawContent;\nInterface HamletSpec._Script;\nInterface HamletSpec._Special; // %special -(A|%pre.exclusion)\nInterface HamletSpec._SubSup; // Part of %pre.exclusion\nInterface HamletSpec._Table;\nInterface HamletSpec._TableCol;\nInterface HamletSpec._TableRow;\nInterface HamletSpec._Tr;\nInterface HamletSpec.A;\nInterface HamletSpec.ABBR;\nInterface HamletSpec.ACRONYM;\nInterface HamletSpec.ADDRESS;\nInterface HamletSpec.AREA;\nInterface HamletSpec.Attrs; // %attrs\nInterface HamletSpec.B;\nInterface HamletSpec.BASE;\nInterface HamletSpec.BDO; // The dir attribute is required for the BDO element\nInterface HamletSpec.Block; // %block\nInterface HamletSpec.BLOCKQUOTE;\n", "des": "This package is the replacement for org.apache.hadoop.yarn.webapp.hamlet."}
{"index": 1770, "repo": "spring-data-mongodb-4.1.2", "code": "package cdi;\n\npublic class MongoRepositoryBean<T> extends CdiRepositoryBean<T>; // CdiRepositoryBean to create Mongo repository instances.\npublic class MongoRepositoryExtension extends CdiRepositoryExtensionSupport; // CDI extension to export Mongo repositories.\n", "des": "CDI support for MongoDB specific repository implementation."}
{"index": 2898, "repo": "spring-integration-amqp-6.1.2", "code": "package config;\n\npublic class AmqpChannelFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<AbstractAmqpChannel> implements org.springframework.context.SmartLifecycle, org.springframework.beans.factory.BeanNameAware; // If point-to-point, we send to the default exchange with the routing key equal to \"[beanName]\" and we declare that same Queue and register a listener if message-driven or poll explicitly otherwise.\npublic class AmqpChannelParser extends org.springframework.integration.config.xml.AbstractChannelParser; // Parser for the 'channel' and 'publish-subscribe-channel' elements of the Spring Integration AMQP namespace.\npublic class AmqpInboundChannelAdapterParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the AMQP 'inbound-channel-adapter' element.\npublic class AmqpInboundGatewayParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the AMQP 'inbound-gateway' element.\npublic class AmqpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for the AMQP schema.\npublic class AmqpOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the AMQP 'outbound-channel-adapter' element.\npublic class AmqpOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the AMQP 'outbound-channel-adapter' element.\n", "des": "Provides classes for configuration - parsers, namespace handlers, factory beans."}
{"index": 1150, "repo": "commons-math3-3.6.1", "code": "package solvers;\n\nInterface BaseUnivariateSolver<FUNC extends UnivariateFunction>; // Interface for (univariate real) rootfinding algorithms.\nInterface BracketedRealFieldUnivariateSolver<T extends RealFieldElement<T>>; // Interface for (univariate real) root-finding algorithms that maintain a bracketed solution.\nInterface BracketedUnivariateSolver<FUNC extends UnivariateFunction>; // Interface for (univariate real) root-finding algorithms that maintain a bracketed solution.\nInterface DifferentiableUnivariateSolver; // as of 3.1, replaced by UnivariateDifferentiableSolver\nInterface PolynomialSolver; // Interface for (polynomial) root-finding algorithms.\nInterface UnivariateDifferentiableSolver; // Interface for (univariate real) rootfinding algorithms.\nInterface UnivariateSolver; // Interface for (univariate real) root-finding algorithms.\nClass AbstractDifferentiableUnivariateSolver; // as of 3.1, replaced by AbstractUnivariateDifferentiableSolver\nClass AbstractPolynomialSolver; // Base class for solvers.\nClass AbstractUnivariateDifferentiableSolver; // Provide a default implementation for several functions useful to generic solvers.\nClass AbstractUnivariateSolver; // Base class for solvers.\nClass BaseAbstractUnivariateSolver<FUNC extends UnivariateFunction>; // Provide a default implementation for several functions useful to generic solvers.\nClass BaseSecantSolver; // Base class for all bracketing Secant-based methods for root-finding (approximating a zero of a univariate real function).\nClass BisectionSolver; // Implements the bisection algorithm for finding zeros of univariate real functions.\nClass BracketingNthOrderBrentSolver; // This class implements a modification of the Brent algorithm.\nClass BrentSolver; // This class implements the Brent algorithm for finding zeros of real univariate functions.\nClass FieldBracketingNthOrderBrentSolver<T extends RealFieldElement<T>>; // This class implements a modification of the Brent algorithm.\nClass IllinoisSolver; // Implements the Illinois method for root-finding (approximating a zero of a univariate real function).\nClass LaguerreSolver; // Implements the Laguerre's Method for root finding of real coefficient polynomials.\n", "des": "Root finding algorithms, for univariate real functions."}
{"index": 1698, "repo": "spring-data-couchbase-5.1.2", "code": "package support;\n\npublic class AwtPointInShapeEvaluator extends PointInShapeEvaluator; // A default PointInShapeEvaluator implementation based on the JDK's java.awt.geom classes.\npublic class GeoUtils extends Object; // Utility class to deal with geo/dimensional indexed data and queries.\npublic class N1qlQueryCreatorUtils extends Object; // Utils for creating part tree expressions\npublic class N1qlUtils extends Object; // Utility class to deal with constructing well formed N1QL queries around Spring Data entities, so that the framework can use N1QL to find such entities (eg. restrict the bucket search to a particular type).\npublic abstract class PointInShapeEvaluator extends Object; // PointInShapeEvaluator can be used to tell if a particular Point is contained by a Polygon or Circle.\n", "des": "This package contains support classes for query derivation and other ways of querying couchbase (helper classes)."}
{"index": 599, "repo": "org.apache.karaf.main-2.4.4", "code": "package storagemanager;\n\nClass ManagedOutputStream; // Represents a managed output stream for target managed by a storage manager.\nClass StorageManager; // Storage managers provide a facility for tracking the state of a group of files having relationship with each others and being updated by several entities at the same time.\n", "des": "Provides the storage manager API."}
{"index": 3105, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package annotations;\n\nClass QueryHints; // Consolidation of hints available to Hibernate JPA queries.\nEnum CacheConcurrencyStrategy; // Cache concurrency strategy.\nEnum CacheModeType; // Enumeration for the different interaction modes between the session and the Level 2 Cache.\nEnum CascadeType; // Cascade types (can override default JPA cascades).\nEnum FetchMode; // Defines how the association should be fetched, compared to FetchType which defines when it should be fetched\nEnum FlushModeType; // Enumeration extending javax.persistence flush modes.\nEnum GenerationTime; // At what time(s) will the generation occur?\nEnum LazyCollectionOption; // Lazy options available for a collection.\nEnum LazyToOneOption; // Lazy options available for a ToOne association.\nEnum NotFoundAction; // Possible actions when the database contains a non-null fk with no matching target.\nEnum OnDeleteAction; // Possible actions for on-delete.\nEnum OptimisticLockType; // Possible optimistic locking strategies.\nEnum PolymorphismType; // Type of available polymorphism for a particular entity.\nEnum ResultCheckStyle; // Possible styles of checking return codes on SQL INSERT, UPDATE and DELETE queries.\nEnum SortType;\nEnum SourceType; // Where should Hibernate retrieve the value from? From the database, or from the current JVM?\nAnnotation Type AccessType;\nAnnotation Type Any; // Defines a ToOne-style association pointing to one of several entity types depending on a local discriminator, as opposed to discriminated inheritance where the discriminator is kept as part of the entity hierarchy.\nAnnotation Type AnyMetaDef;\nAnnotation Type AnyMetaDefs;\nAnnotation Type AttributeAccessor; // Names a persistent property access strategy (PropertyAccessStrategy) to use.\nAnnotation Type BatchSize; // Defines size for batch loading of collections or lazy entities.\nAnnotation Type Cache; // Add caching strategy to a root entity or a collection.\nAnnotation Type Cascade; // Apply a cascade strategy on an association.\nAnnotation Type Check; // Arbitrary SQL CHECK constraints which can be defined at the class, property or collection level.\nAnnotation Type CollectionId; // Describe an identifier column for a bag (ie an idbag).\nAnnotation Type CollectionType;\nAnnotation Type ColumnDefault; // Identifies the DEFAULT value to apply to the associated column via DDL.\nAnnotation Type Columns; // Support an array of columns.\n", "des": "Package containing all the Hibernate specific annotations."}
{"index": 2477, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jersey;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({org.glassfish.jersey.server.ResourceConfig.class,io.micrometer.core.instrument.binder.jersey.server.MetricsApplicationEventListener.class}) @ConditionalOnBean({io.micrometer.core.instrument.MeterRegistry.class,org.glassfish.jersey.server.ResourceConfig.class}) @EnableConfigurationProperties(MetricsProperties.class) public class JerseyServerMetricsAutoConfiguration extends Object; // Auto-configuration for Jersey server instrumentation.\n", "des": "Auto-configuration for Jersey actuator metrics."}
{"index": 74, "repo": "ignite-core-2.15.0", "code": "package jobstealing;\n\nInterface JobStealingCollisionSpiMBean; // Management MBean for job stealing based collision SPI.\nClass JobStealingCollisionSpi; // Collision SPI that supports job stealing from over-utilized nodes to under-utilized nodes.\nClass JobStealingRequest; // Job stealing request.\nAnnotation Type JobStealingDisabled; // This annotation disables job stealing if corresponding feature is configured.\n", "des": "Contains job stealing collision SPI implementation."}
{"index": 3305, "repo": "opencms-core-15.0", "code": "package repository;\n\nInterface I_CmsRepository; // Represents a repository.\nInterface I_CmsRepositoryItem; // This class represents items in the repository interface.\nInterface I_CmsRepositorySession; // A repository session which provides basic file and folder operations to the resources in the VFS of OpenCms.\nClass A_CmsRepository; // Abstract implementation of the repository interface I_CmsRepository.\nClass A_CmsRepositorySession; // Abstract implementation of the interface I_CmsRepositorySession to provide the functionality of filtering items.\nClass CmsPropertyName;\nClass CmsRepository; // Creates a repository session to access OpenCms.\nClass CmsRepositoryFilter; // This class is a filter for the repositories.\nClass CmsRepositoryItem; // Represents a single entry in the repository.\nClass CmsRepositoryLockInfo; // The class represents a lock to a I_CmsRepositoryItem.\nClass CmsRepositoryManager; // The RepositoryManager keeps a list with all configured I_CmsRepository and can be used to get a repository by its name.\nClass CmsRepositorySession; // This is the session class to work with the CmsRepository.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Package contains all classes and interfaces needed to create or use a repository to access the resources in the VFS."}
{"index": 2083, "repo": "spring-webmvc-6.0.11", "code": "package feed;\n\npublic abstract class AbstractAtomFeedView extends AbstractFeedView<com.rometools.rome.feed.atom.Feed>; // Abstract superclass for Atom Feed views, using the ROME package.\npublic abstract class AbstractFeedView<T extends com.rometools.rome.feed.WireFeed> extends AbstractView; // Abstract base class for Atom and RSS Feed views, using the ROME package.\npublic abstract class AbstractRssFeedView extends AbstractFeedView<com.rometools.rome.feed.rss.Channel>; // Abstract superclass for RSS Feed views, using the ROME package.\n", "des": "Support classes for feed generation, providing View implementations for Atom and RSS."}
{"index": 1863, "repo": "spring-test-6.0.11", "code": "package request;\n\npublic interface ConfigurableSmartRequestBuilder<B extends ConfigurableSmartRequestBuilder<B>> extends SmartRequestBuilder; // An extension of SmartRequestBuilder that can be configured with RequestPostProcessors.\npublic class MockHttpServletRequestBuilder extends Object implements ConfigurableSmartRequestBuilder<MockHttpServletRequestBuilder>, org.springframework.beans.Mergeable; // Default builder for MockHttpServletRequest required as input to perform requests in MockMvc.\npublic class MockMultipartHttpServletRequestBuilder extends MockHttpServletRequestBuilder; // Default builder for MockMultipartHttpServletRequest.\npublic abstract class MockMvcRequestBuilders extends Object; // Static factory methods for RequestBuilders.\n@FunctionalInterface public interface RequestPostProcessor; // Extension point for applications or 3rd party libraries that wish to further initialize a MockHttpServletRequest instance after it has been built by MockHttpServletRequestBuilder or its subclass MockMultipartHttpServletRequestBuilder.\n", "des": "Contains built-in RequestBuilder implementations."}
{"index": 726, "repo": "mina-core-3.0.0-M2", "code": "package executor;\n\nInterface Event; // A IoHandler event to be submitted to an IoHandlerExecutor.\nInterface EventVisitor; // Implement this interface for implementing different behavior on different Event.\nInterface IoHandlerExecutor; // A class in charge of executing IoHandler related events.\nClass CloseEvent; // A session was closed event.\nClass IdleEvent; // An IoSession is idle (no sent or receive events)\nClass OpenEvent; // An IoSession open Event\nClass OrderedHandlerExecutor; // Use this executor if you want the IoHandler events of a session to be executed in order and on the same thread.\nClass ReceiveEvent; // A IoSession received a message Event.\nClass SentEvent; // An IoSession sent a message Event\nClass UnorderHandlerExecutor; // (in progress)\n", "des": "Classes in charge of decoupling IoHandler event of the low level read/write/accept I/O threads ( SelectorLoop )."}
{"index": 2118, "repo": "spring-retry-2.0.2", "code": "package policy;\n\npublic class AlwaysRetryPolicy extends NeverRetryPolicy; // A RetryPolicy that always permits a retry.\npublic class BinaryExceptionClassifierRetryPolicy extends Object implements RetryPolicy; // A policy, that is based on BinaryExceptionClassifier.\npublic class CircuitBreakerRetryPolicy extends Object implements RetryPolicy;\npublic class CompositeRetryPolicy extends Object implements RetryPolicy; // A RetryPolicy that composes a list of other policies and delegates calls to them in order.\npublic class ExceptionClassifierRetryPolicy extends Object implements RetryPolicy; // A RetryPolicy that dynamically adapts to one of a set of injected policies according to the value of the latest exception.\npublic class ExpressionRetryPolicy extends SimpleRetryPolicy implements org.springframework.beans.factory.BeanFactoryAware; // Subclass of SimpleRetryPolicy that delegates to super.canRetry() and, if true, further evaluates an expression against the last thrown exception.\npublic class MapRetryContextCache extends Object implements RetryContextCache; // Map-based implementation of RetryContextCache.\npublic class MaxAttemptsRetryPolicy extends Object implements RetryPolicy; // Simple retry policy that is aware only about attempt count and retries a fixed number of times.\npublic class NeverRetryPolicy extends Object implements RetryPolicy; // A RetryPolicy that allows the first attempt but never permits a retry.\npublic class RetryCacheCapacityExceededException extends RetryException; // Exception that indicates that a cache limit was exceeded.\npublic interface RetryContextCache; // Simple map-like abstraction for stateful retry policies to use when storing and retrieving RetryContext instances.\npublic class SimpleRetryPolicy extends Object implements RetryPolicy; // Simple retry policy that retries a fixed number of times for a set of named exceptions (and subclasses).\npublic class SoftReferenceMapRetryContextCache extends Object implements RetryContextCache; // Map-based implementation of RetryContextCache.\npublic class TimeoutRetryPolicy extends Object implements RetryPolicy; // A RetryPolicy that allows a retry only if it hasn't timed out.\n", "des": "Infrastructure implementations of retry policy concerns."}
{"index": 672, "repo": "commons-lang3-3.12.0", "code": "package mutable;\n\nInterface Mutable<T>; // Provides mutable access to a value.\nClass MutableBoolean; // A mutable boolean wrapper.\nClass MutableByte; // A mutable byte wrapper.\nClass MutableDouble; // A mutable double wrapper.\nClass MutableFloat; // A mutable float wrapper.\nClass MutableInt; // A mutable int wrapper.\nClass MutableLong; // A mutable long wrapper.\nClass MutableObject<T>; // A mutable Object wrapper.\nClass MutableShort; // A mutable short wrapper.\n", "des": "Provides typed mutable wrappers to primitive values and Object."}
{"index": 2524, "repo": "spring-security-core-6.1.2", "code": "package prepost;\n\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface PostAuthorize; // Annotation for specifying a method access-control expression which will be evaluated after a method has been invoked.\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface PostFilter; // Annotation for specifying a method filtering expression which will be evaluated after a method has been invoked.\n@Deprecated public class PostInvocationAdviceProvider extends Object implements AfterInvocationProvider;\n@Deprecated public interface PostInvocationAttribute extends ConfigAttribute;\n@Deprecated public interface PostInvocationAuthorizationAdvice extends org.springframework.aop.framework.AopInfrastructureBean;\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface PreAuthorize; // Annotation for specifying a method access-control expression which will be evaluated to decide whether a method invocation is allowed or not.\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface PreFilter; // Annotation for specifying a method filtering expression which will be evaluated before a method has been invoked.\n@Deprecated public interface PreInvocationAttribute extends ConfigAttribute;\n@Deprecated public interface PreInvocationAuthorizationAdvice extends org.springframework.aop.framework.AopInfrastructureBean;\n@Deprecated public class PreInvocationAuthorizationAdviceVoter extends Object implements AccessDecisionVoter<org.aopalliance.intercept.MethodInvocation>;\n@Deprecated public class PrePostAdviceReactiveMethodInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor;\n@Deprecated public class PrePostAnnotationSecurityMetadataSource extends AbstractMethodSecurityMetadataSource;\npublic interface PrePostInvocationAttributeFactory extends org.springframework.aop.framework.AopInfrastructureBean;\n", "des": "Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter annotations."}
{"index": 1724, "repo": "spring-jdbc-6.0.11", "code": "package core;\n\npackage core.metadata; // Context metadata abstraction for the configuration and execution of table inserts and stored procedure calls.\npackage core.namedparam; // JdbcTemplate variant with named parameter support.\npackage core.simple; // Simplification layer for table inserts and stored procedure calls.\npackage core.support; // Classes supporting the org.springframework.jdbc.core package.\npublic class ArgumentPreparedStatementSetter extends Object implements PreparedStatementSetter, ParameterDisposer; // Simple adapter for PreparedStatementSetter that applies a given array of arguments.\npublic class ArgumentTypePreparedStatementSetter extends Object implements PreparedStatementSetter, ParameterDisposer; // Simple adapter for PreparedStatementSetter that applies given arrays of arguments and JDBC argument types.\npublic interface BatchPreparedStatementSetter; // Batch update callback interface used by the JdbcTemplate class.\npublic class BeanPropertyRowMapper<T> extends Object implements RowMapper<T>; // RowMapper implementation that converts a row into a new instance of the specified mapped target class.\n@FunctionalInterface public interface CallableStatementCallback<T>; // Generic callback interface for code that operates on a CallableStatement.\n@FunctionalInterface public interface CallableStatementCreator; // One of the three central callback interfaces used by the JdbcTemplate class.\npublic class CallableStatementCreatorFactory extends Object; // Helper class that efficiently creates multiple CallableStatementCreator objects with different parameters based on an SQL statement and a single set of parameter declarations.\npublic class ColumnMapRowMapper extends Object implements RowMapper<Map<String,Object>>; // RowMapper implementation that creates a java.util.Map for each row, representing all columns as key-value pairs: one entry for each column, with the column name as key.\n@FunctionalInterface public interface ConnectionCallback<T>; // Generic callback interface for code that operates on a JDBC Connection.\npublic class DataClassRowMapper<T> extends BeanPropertyRowMapper<T>; // RowMapper implementation that converts a row into a new instance of the specified mapped target class.\npublic interface DisposableSqlTypeValue extends SqlTypeValue; // Subinterface of SqlTypeValue that adds a cleanup callback, to be invoked after the value has been set and the corresponding statement has been executed.\npublic interface InterruptibleBatchPreparedStatementSetter extends BatchPreparedStatementSetter; // Extension of the BatchPreparedStatementSetter interface, adding a batch exhaustion check.\n", "des": "Provides the core JDBC framework, based on JdbcTemplate and its associated callback interfaces and helper objects."}
{"index": 2858, "repo": "spring-integration-core-6.1.2", "code": "package endpoint;\n\n@IntegrationManagedResource public abstract class AbstractEndpoint extends IntegrationObjectSupport implements ManageableSmartLifecycle, org.springframework.beans.factory.DisposableBean; // The base class for Message Endpoint implementations.\npublic abstract class AbstractFetchLimitingMessageSource<T> extends AbstractMessageSource<T> implements MessageSourceManagement; // A message source that can limit the number of remote objects it fetches.\n@IntegrationManagedResource public abstract class AbstractMessageSource<T> extends AbstractExpressionEvaluator implements MessageSource<T>, IntegrationInboundManagement, NamedComponent, org.springframework.beans.factory.BeanNameAware; // Abstract message source.\npublic abstract class AbstractPollingEndpoint extends AbstractEndpoint implements org.springframework.beans.factory.BeanClassLoaderAware; // An AbstractEndpoint extension for Polling Consumer pattern basics.\npublic class EventDrivenConsumer extends AbstractEndpoint implements IntegrationConsumer; // Message Endpoint that connects any MessageHandler implementation to a SubscribableChannel.\npublic class ExpressionEvaluatingMessageSource<T> extends AbstractMessageSource<T> implements ExpressionCapable;\npublic abstract class ExpressionMessageProducerSupport extends MessageProducerSupport; // A MessageProducerSupport sub-class that provides ExpressionMessageProducerSupport.payloadExpression evaluation with result as a payload for Message to send.\npublic interface IntegrationConsumer extends NamedComponent; // Message consumers implement this interface, the message handler within a consumer may or may not emit output messages.\npublic class MessageProcessorMessageSource extends AbstractMessageSource<Object>; // The MessageSource strategy implementation to produce a Message from underlying MessageProcessorMessageSource.messageProcessor for polling endpoints.\npublic abstract class MessageProducerSupport extends AbstractEndpoint implements MessageProducer, TrackableComponent, org.springframework.beans.factory.SmartInitializingSingleton, IntegrationPattern, IntegrationInboundManagement; // A support class for producer endpoints that provides a setter for the output channel and a convenience method for sending Messages.\npublic class MessageSourcePollingTemplate extends Object implements PollingOperations; // A PollingOperations used to ad-hoc poll a MessageSource.\npublic class MethodInvokingMessageSource extends AbstractMessageSource<Object> implements ManageableLifecycle; // A MessageSource implementation that invokes a no-argument method so that its return value may be sent to a channel.\npublic class PollingConsumer extends AbstractPollingEndpoint implements IntegrationConsumer; // Message Endpoint that connects any MessageHandler implementation to a PollableChannel.\n", "des": "Provides core classes related to Endpoints."}
{"index": 3104, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface AfterTransactionCompletionProcess; // Contract representing some process that needs to occur during after transaction completion.\nInterface BeforeTransactionCompletionProcess; // Contract representing some process that needs to occur during before transaction completion.\nInterface Executable; // An operation which may be scheduled for later execution.\n", "des": "Defines SPI hooks into the ActionQueue."}
{"index": 3505, "repo": "poi-5.2.3", "code": "package format;\n\nClass CellDateFormatter; // Formats a date value.\nClass CellElapsedFormatter; // This class implements printing out an elapsed time format.\nClass CellFormat; // Format a value according to the standard Excel behavior.\nClass CellFormatCondition; // This object represents a condition in a cell format.\nClass CellFormatPart; // Objects of this class represent a single part of a cell format expression.\nClass CellFormatResult; // This object contains the result of applying a cell format or cell format part to a value.\nClass CellFormatter; // This is the abstract supertype for the various cell formatters.\nClass CellGeneralFormatter; // A formatter for the default \"General\" cell format.\nClass CellNumberFormatter; // This class implements printing out a value using a number format.\nClass CellNumberPartHandler; // Internal helper class for CellNumberFormatter\nClass CellNumberStringMod; // Internal helper class for CellNumberFormatter This class represents a single modification to a result string.\nClass CellTextFormatter; // This class implements printing out text.\nClass SimpleFraction;\nEnum CellFormatType; // The different kinds of formats that the formatter understands.\n", "des": "This package contains classes that implement cell formatting"}
{"index": 1762, "repo": "spring-data-mongodb-4.1.2", "code": "package script;\n\n@Deprecated public class ExecutableMongoScript extends Object;\n@Deprecated public class NamedMongoScript extends Object;\n", "des": "Abstraction classes javascript function execution within MongoDB Server."}
{"index": 1320, "repo": "groovy-all-4.0.13", "code": "package streamingmarkupsupport;\n\npublic class BaseMarkupBuilder extends Builder;\npublic abstract class Builder extends GroovyObjectSupport;\nprotected abstract static class Builder.Built extends GroovyObjectSupport;\npublic class StreamingMarkupWriter extends Writer;\n", "des": "XmlBuilder related classes to support streaming XML."}
{"index": 333, "repo": "kafka-clients-3.5.0", "code": "package scram;\n\nClass ScramCredential; // SCRAM credential class that encapsulates the credential data persisted for each user that is accessible to the server.\nClass ScramCredentialCallback; // Callback used for SCRAM mechanisms.\nClass ScramExtensionsCallback; // Optional callback used for SCRAM mechanisms if any extensions need to be set in the SASL/SCRAM exchange.\nClass ScramLoginModule;\n", "des": "Provides adaptor to use the Salted Challenge Response Authentication Mechanism for securing Kafka clusters."}
{"index": 2504, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package wavefront;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,WavefrontAutoConfiguration.class}) @ConditionalOnClass({com.wavefront.sdk.common.WavefrontSender.class,io.micrometer.tracing.reporter.wavefront.WavefrontSpanHandler.class}) @ConditionalOnEnabledTracing @EnableConfigurationProperties(WavefrontProperties.class) @Import(WavefrontSenderConfiguration.class) public class WavefrontTracingAutoConfiguration extends Object; // Auto-configuration for Wavefront tracing.\n", "des": "Auto-configuration for tracing with Wavefront."}
{"index": 2799, "repo": "spring-amqp-3.0.6", "code": "package converter;\n\npublic abstract class AbstractJackson2MessageConverter extends AbstractMessageConverter implements org.springframework.beans.factory.BeanClassLoaderAware, SmartMessageConverter; // Abstract Jackson2 message converter.\npublic abstract class AbstractJavaTypeMapper extends Object implements org.springframework.beans.factory.BeanClassLoaderAware; // Abstract type mapper.\npublic abstract class AbstractMessageConverter extends Object implements MessageConverter; // Convenient base class for MessageConverter implementations.\npublic abstract class AllowedListDeserializingMessageConverter extends AbstractMessageConverter; // MessageConverters that potentially use Java deserialization.\npublic interface ClassMapper; // Strategy for setting metadata on messages such that one can create the class that needs to be instantiated when receiving a message.\npublic class ContentTypeDelegatingMessageConverter extends Object implements MessageConverter; // A composite MessageConverter that delegates to an actual MessageConverter based on the contentType header.\npublic class DefaultClassMapper extends Object implements ClassMapper, org.springframework.beans.factory.InitializingBean; // Maps to/from JSON using type information in the MessageProperties; the default name of the message property containing the type is \"__TypeId__\".\npublic class DefaultJackson2JavaTypeMapper extends AbstractJavaTypeMapper implements Jackson2JavaTypeMapper; // Jackson 2 type mapper.\npublic interface Jackson2JavaTypeMapper extends ClassMapper; // Strategy for setting metadata on messages such that one can create the class that needs to be instantiated when receiving a message.\npublic static enum Jackson2JavaTypeMapper.TypePrecedence extends Enum<Jackson2JavaTypeMapper.TypePrecedence>; // The precedence for type conversion - inferred from the method parameter or message headers.\npublic class Jackson2JsonMessageConverter extends AbstractJackson2MessageConverter; // JSON converter that uses the Jackson 2 Json library.\npublic class Jackson2XmlMessageConverter extends AbstractJackson2MessageConverter; // XML converter that uses the Jackson 2 Xml library.\npublic class MarshallingMessageConverter extends AbstractMessageConverter implements org.springframework.beans.factory.InitializingBean; // Spring Rabbit MessageConverter that uses a Marshaller and Unmarshaller.\npublic class MessageConversionException extends AmqpException; // Exception to be thrown by message converters if they encounter a problem with converting a message or object.\npublic interface MessageConverter; // Message converter interface.\n", "des": "Provides classes for supporting message conversion."}
{"index": 2142, "repo": "wicket-core-10.0.0-M1", "code": "package markup;\n\npackage markup.html; // Base package of HTML markup.\npackage markup.parser; // The default parsing engine of Wicket.\npackage markup.resolver; // Resolvers implement the IComponentResolver interface and must be registered with the application.\npackage markup.transformer; // Transformers are able to post-process (transform) the output generated by a Component.\npublic abstract class AbstractMarkupFragment extends Object implements IMarkupFragment; // A base implementation of IMarkupFragment.\npublic abstract class AbstractMarkupParser extends Object; // This is a base MarkupParser specifically for (X)HTML.\npublic class ComponentTag extends MarkupElement; // A subclass of MarkupElement which represents a \"significant\" markup tag, such as a component open tag.\npublic static interface ComponentTag.IAutoComponentFactory; // Factory that creates component during markup root container's initialization.\npublic class ContainerInfo extends Object; // Because Component has a reference to its parents, which eventually is the Page, keeping a \"copy\" of a component is very expensive.\npublic class DefaultMarkupCacheKeyProvider extends Object implements IMarkupCacheKeyProvider; // Wicket default implementation for the cache key used to reference the cached markup resource stream.\npublic class DefaultMarkupResourceStreamProvider extends Object implements IMarkupResourceStreamProvider; // Wicket default implementation for loading the markup resource stream associated with a MarkupContainer.\npublic class HtmlSpecialTag extends MarkupElement;\npublic interface IMarkupCache; // Each Wicket application has a single IMarkupCache associated with it (see MarkupSettings).\npublic interface IMarkupCacheKeyProvider; // To be implemented by MarkupContainers that wish to implement their own algorithms for the markup cache key.\npublic interface IMarkupFragment extends Iterable<MarkupElement>; // Any list of MarkupElements.\npublic interface IMarkupResourceStreamProvider; // To be implemented by MarkupContainer which wish to implement their own algorithms for loading the markup resource stream.\npublic class Markup extends AbstractMarkupFragment; // The content of a markup file, consisting of a list of markup elements.\npublic class MarkupCache extends Object implements IMarkupCache; // This is Wicket's default IMarkupCache implementation.\npublic static class MarkupCache.DefaultCacheImplementation<K,V> extends Object implements MarkupCache.ICache<K,V>;\npublic static interface MarkupCache.ICache<K,V>; // MarkupCache allows you to implement you own cache implementation.\n", "des": "Base package for markup."}
{"index": 1488, "repo": "tribuo-core-4.3.1", "code": "package sequence;\n\npublic abstract class AbstractSequenceEvaluator<T extends Output<T>,C extends MetricContext<T>,E extends SequenceEvaluation<T>,M extends EvaluationMetric<T,C>> extends Object implements SequenceEvaluator<T,E>; // Base class for sequence evaluators.\npublic final class HashingSequenceTrainer<T extends Output<T>> extends Object implements SequenceTrainer<T>; // A SequenceTrainer that hashes all the feature names on the way in.\npublic static class HashingSequenceTrainer.HashingSequenceTrainerProvenance extends SkeletalTrainerProvenance; // Provenance for HashingSequenceTrainer.\npublic class ImmutableSequenceDataset<T extends Output<T>> extends SequenceDataset<T> implements Serializable; // This is a SequenceDataset which has an ImmutableFeatureMap to store the feature information.\npublic class IndependentSequenceModel<T extends Output<T>> extends SequenceModel<T>; // A SequenceModel which independently predicts each element of the sequence.\npublic class IndependentSequenceTrainer<T extends Output<T>> extends Object implements SequenceTrainer<T>; // Trains a sequence model by training a regular model to independently predict every example in each sequence.\npublic class MinimumCardinalitySequenceDataset<T extends Output<T>> extends ImmutableSequenceDataset<T>; // This class creates a pruned dataset in which low frequency features that occur less than the provided minimum cardinality have been removed.\npublic static class MinimumCardinalitySequenceDataset.MinimumCardinalitySequenceDatasetProvenance extends DatasetProvenance; // Provenance for MinimumCardinalitySequenceDataset.\npublic class MutableSequenceDataset<T extends Output<T>> extends SequenceDataset<T>; // A MutableSequenceDataset is a SequenceDataset with a MutableFeatureMap which grows over time.\npublic abstract class SequenceDataset<T extends Output<T>> extends Object implements Iterable<SequenceExample<T>>, ProtoSerializable<org.tribuo.protos.core.SequenceDatasetProto>, com.oracle.labs.mlrg.olcut.provenance.Provenancable<DatasetProvenance>, Serializable; // A class for sets of data, which are used to train and evaluate classifiers.\n", "des": "Provides core classes for working with sequences of Examples."}
{"index": 2153, "repo": "wicket-core-10.0.0-M1", "code": "package list;\n\npublic class AbstractItem extends WebMarkupContainer; // A very simple Item.\npublic class ListItem<T> extends LoopItem implements IGenericComponent<T,ListItem<T>>; // Container that holds components in a ListView.\npublic class ListItemModel<T> extends Object implements IModel<T>; // Model for list items.\npublic abstract class ListView<T> extends AbstractRepeater; // A ListView is a repeater that makes it easy to display/work with Lists.\npublic abstract class Loop extends AbstractRepeater; // A very simple loop component whose model is an Integer defining the number of iterations the loop should render.\npublic class LoopItem extends AbstractItem; // A very simple Item.\npublic class OddEvenListItem<T> extends ListItem<T>; // ListItem that adds class=\"odd\" or class=\"even\" html attribute depending on its index.\npublic abstract class PageableListView<T> extends ListView<T> implements IPageableItems; // PageableListView is similar to ListView but provides in addition pageable views.\npublic abstract class PropertyListView<T> extends ListView<T>; // Simple ListVew subclass that wraps its item models in a CompoundPropertyModel.\n", "des": "List components for tabular data and such."}
{"index": 691, "repo": "jackson-databind-2.15.2", "code": "package impl;\n\nClass AsArrayTypeDeserializer; // Type deserializer used with JsonTypeInfo.As.WRAPPER_ARRAY inclusion mechanism.\nClass AsArrayTypeSerializer; // Type serializer that will embed type information in an array, as the first element, and actual value as the second element.\nClass AsDeductionTypeDeserializer; // A TypeDeserializer capable of deducing polymorphic types based on the fields available.\nClass AsDeductionTypeSerializer;\nClass AsExistingPropertyTypeSerializer; // Type serializer used with JsonTypeInfo.As.EXISTING_PROPERTY inclusion mechanism.\nClass AsExternalTypeDeserializer; // Type deserializer used with JsonTypeInfo.As.EXTERNAL_PROPERTY inclusion mechanism.\nClass AsExternalTypeSerializer; // Type serializer that preferably embeds type information as an \"external\" type property; embedded in enclosing JSON object.\nClass AsPropertyTypeDeserializer; // Type deserializer used with JsonTypeInfo.As.PROPERTY inclusion mechanism.\nClass AsPropertyTypeSerializer; // Type serializer that preferably embeds type information as an additional JSON Object property, if possible (when resulting serialization would use JSON Object).\nClass AsWrapperTypeDeserializer; // Type deserializer used with JsonTypeInfo.As.WRAPPER_OBJECT inclusion mechanism.\nClass AsWrapperTypeSerializer; // Type wrapper that tries to use an extra JSON Object, with a single entry that has type name as key, to serialize type information.\nClass ClassNameIdResolver; // TypeIdResolver implementation that converts between fully-qualified Java class names and (JSON) Strings.\nClass LaissezFaireSubTypeValidator; // Default PolymorphicTypeValidator used unless explicit one is constructed (and, in 2.11, MapperFeature.BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES not enabled).\nClass MinimalClassNameIdResolver;\nClass StdSubtypeResolver; // Standard SubtypeResolver implementation.\nClass StdTypeResolverBuilder; // Default TypeResolverBuilder implementation.\nClass SubTypeValidator; // Helper class used to encapsulate rules that determine subtypes that are invalid to use, even with default typing, mostly due to security concerns.\nClass TypeDeserializerBase; // Base class for all standard Jackson TypeDeserializers.\nClass TypeIdResolverBase; // Partial base implementation of TypeIdResolver: all custom implementations are strongly recommended to extend this class, instead of directly implementing TypeIdResolver.\nClass TypeNameIdResolver;\nClass TypeSerializerBase;\n", "des": "Package that contains standard implementations for TypeResolverBuilder and TypeIdResolver."}
{"index": 2532, "repo": "spring-security-core-6.1.2", "code": "package core;\n\npackage core.authority; // The default implementation of the GrantedAuthority interface.\npackage core.context; // Classes related to the establishment of a security context for the duration of a request (such as an HTTP or RMI invocation).\npackage core.session; // Session abstraction which is provided by the org.springframework.security.core.session.SessionInformation SessionInformation class.\npackage core.token; // A service for building secure random tokens.\npackage core.userdetails; // The standard interfaces for implementing user data DAOs.\npublic interface AuthenticatedPrincipal; // Representation of an authenticated Principal once an Authentication request has been successfully authenticated by the AuthenticationManager.authenticate(Authentication) method.\npublic interface Authentication extends Principal, Serializable; // Represents the token for an authentication request or for an authenticated principal once the request has been processed by the AuthenticationManager.authenticate(Authentication) method.\npublic abstract class AuthenticationException extends RuntimeException; // Abstract superclass for all exceptions related to an Authentication object being invalid for whatever reason.\npublic interface CredentialsContainer; // Indicates that the implementing object contains sensitive data, which can be erased using the eraseCredentials method.\npublic interface GrantedAuthority extends Serializable; // Represents an authority granted to an Authentication object.\npublic final class SpringSecurityCoreVersion extends Object; // Internal class used for checking version compatibility in a deployed application.\npublic class SpringSecurityMessageSource extends org.springframework.context.support.ResourceBundleMessageSource; // The default MessageSource used by Spring Security.\n@Target({TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface Transient; // A marker for Authentications that should never be stored across requests, for example a bearer token authentication\n", "des": "Core classes and interfaces related to user authentication and authorization, as well as the maintenance of a security context."}
{"index": 1779, "repo": "spring-integration-file-6.1.2", "code": "package file;\n\npackage file.aggregator; // Provides support classes for file-based aggregation logic.\npackage file.config; // Provides classes for configuration - parsers, namespace handlers, factory beans.\npackage file.dsl; // Provides File Components support for Spring Integration Java DSL.\npackage file.event; // ApplicationEvents generated by the file module.\npackage file.filters; // Provides classes supporting file filtering.\npackage file.locking; // Provides classes supporting file locking.\npackage file.remote; // Base package for supporting remote files.\npackage file.splitter; // Provides implementations of AbstractMessageSplitter.\npackage file.support; // Provides various support classes used across Spring Integration File Components.\npackage file.tail; // Classes used for tailing file system files.\npackage file.transformer; // Provides classes supporting the transformation of file contents to messages.\npublic class DefaultDirectoryScanner extends Object implements DirectoryScanner; // Default directory scanner and base class for other directory scanners.\npublic class DefaultFileNameGenerator extends org.springframework.integration.util.AbstractExpressionEvaluator implements FileNameGenerator; // Default implementation of the filename generator strategy.\npublic interface DirectoryScanner; // Strategy for scanning directories.\npublic abstract class FileHeaders extends Object; // Pre-defined header names to be used when storing or retrieving File-related values to/from integration Message Headers.\npublic interface FileLocker; // A FileLocker is a strategy that can ensure that files are only processed a single time.\n@FunctionalInterface public interface FileNameGenerator; // Strategy interface for generating a file name from a message.\npublic class FileReadingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<File> implements org.springframework.integration.support.management.ManageableLifecycle; // MessageSource that creates messages from a file system directory.\npublic static enum FileReadingMessageSource.WatchEventType extends Enum<FileReadingMessageSource.WatchEventType>;\npublic class FileWritingMessageHandler extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements org.springframework.integration.support.management.ManageableLifecycle, org.springframework.integration.handler.MessageTriggerAction; // A MessageHandler implementation that writes the Message payload to a file.\n", "des": "Base package for File support."}
{"index": 1155, "repo": "commons-math3-3.6.1", "code": "package exception;\n\npackage exception.util; // Classes supporting exception localization.\nClass ConvergenceException; // Error thrown when a numerical computation can not be performed because the numerical result failed to converge to a finite value.\nClass DimensionMismatchException; // Exception to be thrown when two dimensions differ.\nClass InsufficientDataException; // Exception to be thrown when there is insufficient data to perform a computation.\nClass MathArithmeticException; // Base class for arithmetic exceptions.\nClass MathIllegalArgumentException; // Base class for all preconditions violation exceptions.\nClass MathIllegalNumberException; // Base class for exceptions raised by a wrong number.\nClass MathIllegalStateException; // Base class for all exceptions that signal that the process throwing the exception is in a state that does not comply with the set of states that it is designed to be in.\nClass MathInternalError; // Exception triggered when something that shouldn't happen does happen.\nClass MathParseException; // Class to signal parse failures.\nClass MathRuntimeException; // As of release 4.0, all exceptions thrown by the Commons Math code (except NullArgumentException) inherit from this class.\nClass MathUnsupportedOperationException; // Base class for all unsupported features.\nClass MaxCountExceededException; // Exception to be thrown when some counter maximum value is exceeded.\nClass MultiDimensionMismatchException; // Exception to be thrown when two sets of dimensions differ.\nClass NoBracketingException; // Exception to be thrown when function values have the same sign at both ends of an interval.\nClass NoDataException; // Exception to be thrown when the required data is missing.\nClass NonMonotonicSequenceException; // Exception to be thrown when the a sequence of values is not monotonically increasing or decreasing.\nClass NotANumberException; // Exception to be thrown when a number is not a number.\nClass NotFiniteNumberException; // Exception to be thrown when a number is not finite.\nClass NotPositiveException; // Exception to be thrown when the argument is negative.\nClass NotStrictlyPositiveException; // Exception to be thrown when the argument is not greater than 0.\nClass NullArgumentException; // All conditions checks that fail due to a null argument must throw this exception.\nClass NumberIsTooLargeException; // Exception to be thrown when a number is too large.\nClass NumberIsTooSmallException; // Exception to be thrown when a number is too small.\n", "des": "Specialized exceptions for algorithms errors."}
{"index": 2537, "repo": "spring-security-core-6.1.2", "code": "package token;\n\npublic class DefaultToken extends Object implements Token; // The default implementation of Token.\npublic class KeyBasedPersistenceTokenService extends Object implements TokenService, org.springframework.beans.factory.InitializingBean; // Basic implementation of TokenService that is compatible with clusters and across machine restarts, without requiring database persistence.\npublic class SecureRandomFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<SecureRandom>; // Creates a SecureRandom instance.\npublic abstract class Sha512DigestUtils extends Object; // Provides SHA512 digest methods.\npublic interface Token; // A token issued by TokenService.\npublic interface TokenService; // Provides a mechanism to allocate and rebuild secure, randomised tokens.\n", "des": "A service for building secure random tokens."}
{"index": 801, "repo": "lucene-analyzers-common-8.11.2", "code": "package reverse;\n\nClass ReverseStringFilter; // Reverse token string, for example \"country\" => \"yrtnuoc\".\nClass ReverseStringFilterFactory; // Factory for ReverseStringFilter.\n", "des": "Filter to reverse token text."}
{"index": 2791, "repo": "shiro-spring-2.0.0-alpha-2", "code": "package spring;\n\npackage spring.remoting; // Support to enable Spring-based remote method invocations to carry a Shiro session ID as part of the invocation payload, allowing remote clients to perform security operations.\npackage spring.web; // Spring-specific components for use in Spring-based web applications.\npublic class LifecycleBeanPostProcessor extends Object implements org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor, org.springframework.core.PriorityOrdered; // Bean post processor for Spring that automatically calls the init() and/or destroy() methods on Shiro objects that implement the Initializable or Destroyable interfaces, respectfully.\npublic class ShiroEventBusBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor; // Spring BeanPostProcessor that detects, EventBusAware and classes containing @Subscribe methods.\n", "des": "Spring Application Framework support for enabling Shiro in spring applications."}
{"index": 409, "repo": "spring-social-core-1.1.6.RELEASE", "code": "package support;\n\nClass AbstractConnection<A>; // Base support class for Connection implementations.\nClass ConnectionFactoryRegistry; // A registry for service provider connection factories.\nClass OAuth1Connection<A>; // An OAuth1-based Connection implementation.\nClass OAuth1ConnectionFactory<A>; // Factory for creating OAuth1-based Connections.\nClass OAuth2Connection<A>; // An OAuth2-based Connection implementation.\nClass OAuth2ConnectionFactory<S>; // Factory for creating OAuth2-based Connections.\n", "des": "ServiceProvider Connect API implementation support."}
{"index": 2750, "repo": "spring-batch-infrastructure-5.0.2", "code": "package policy;\n\npublic class CompletionPolicySupport extends Object implements CompletionPolicy; // Very simple base class for CompletionPolicy implementations.\npublic class CompositeCompletionPolicy extends Object implements CompletionPolicy; // Composite policy that loops through a list of delegate policies and answers calls by a consensus.\npublic abstract class CountingCompletionPolicy extends DefaultResultCompletionPolicy; // Abstract base class for policies that need to count the number of occurrences of some event (e.g.\npublic class DefaultResultCompletionPolicy extends CompletionPolicySupport; // Very simple CompletionPolicy that bases its decision on the result of a batch operation.\npublic class SimpleCompletionPolicy extends DefaultResultCompletionPolicy; // Policy for terminating a batch after a fixed number of operations.\npublic class TimeoutTerminationPolicy extends CompletionPolicySupport; // Termination policy that times out after a fixed period.\n", "des": "Infrastructure implementations of repeat policy concerns."}
{"index": 3413, "repo": "commons-imaging-1.0-alpha3", "code": "package write;\n\nClass TiffImageWriterBase;\nClass TiffImageWriterLossless;\nClass TiffImageWriterLossy;\nClass TiffOutputDirectory;\nClass TiffOutputField;\nClass TiffOutputSet;\n", "des": "TIFF writers."}
{"index": 3881, "repo": "solr-ltr-9.3.0", "code": "package store;\n\npackage store.rest; // Contains the ManagedResource that encapsulate the feature and the model stores.\nClass FeatureStore;\nClass ModelStore; // Contains the model and features declared.\n", "des": "Contains feature and model store related classes."}
{"index": 3064, "repo": "spring-ws-core-4.0.5", "code": "package endpoint;\n\npackage endpoint.adapter; // Provides miscellaneous EndpointAdapter implementations.\npackage endpoint.annotation; // JDK 1.5+ annotations for Spring-WS endpoints.\npackage endpoint.interceptor; // Provides miscellaneous endpoints EndpointInterceptor implementations.\npackage endpoint.mapping; // Provides miscellaneous endpoints EndpointMapping implementations.\npackage endpoint.support; // Provides helper classes for EndpointAdapter, EndpointInteceptor, and EndpointMapping implementations.\n@Deprecated public abstract class AbstractDom4jPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\n@Deprecated public abstract class AbstractDomPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\npublic abstract class AbstractEndpointExceptionResolver extends Object implements EndpointExceptionResolver, org.springframework.core.Ordered; // Abstract base class for EndpointExceptionResolvers.\n@Deprecated public abstract class AbstractJDomPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\npublic abstract class AbstractLoggingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointInterceptor; // Abstract base class for EndpointInterceptor instances that log a part of a WebServiceMessage.\n@Deprecated public abstract class AbstractMarshallingPayloadEndpoint extends Object implements MessageEndpoint, org.springframework.beans.factory.InitializingBean;\n@Deprecated public abstract class AbstractSaxPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\n@Deprecated public abstract class AbstractStaxEventPayloadEndpoint extends AbstractStaxPayloadEndpoint implements MessageEndpoint;\n@Deprecated public abstract class AbstractStaxPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport;\n@Deprecated public abstract class AbstractStaxStreamPayloadEndpoint extends AbstractStaxPayloadEndpoint implements MessageEndpoint;\n@Deprecated public abstract class AbstractValidatingMarshallingPayloadEndpoint extends AbstractMarshallingPayloadEndpoint;\n@Deprecated public abstract class AbstractXomPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\npublic interface MessageEndpoint; // Defines the basic contract for Web Services interested in the entire message payload.\npublic final class MethodEndpoint extends Object; // Represents a bean method that will be invoked as part of an incoming Web service message.\n", "des": "Provides standard endpoint, and EndpointAdapter implementations."}
{"index": 3273, "repo": "opencms-core-15.0", "code": "package flex;\n\nClass CmsFlexBucketConfiguration; // Represents a Flex bucket configuration.\nClass CmsFlexCache; // This class implements the FlexCache.\nClass CmsFlexCache.CmsFlexCacheVariation; // A simple data container class for the FlexCache variations.\nClass CmsFlexCacheConfiguration; // Flex Cache configuration class.\nClass CmsFlexCacheEntry; // Contains the contents of a cached resource.\nClass CmsFlexCacheKey; // Key used to describe the caching behaviour of a specific resource.\nClass CmsFlexController; // Controller for getting access to the CmsObject, should be used as a request attribute.\nClass CmsFlexRequest; // Wrapper class for a HttpServletRequest.\nClass CmsFlexRequestContextInfo; // Contains information about the OpenCms request context required by the Flex implementation.\nClass CmsFlexRequestDispatcher; // Implementation of the RequestDispatcher interface to allow JSPs to be loaded from the OpenCms VFS.\nClass CmsFlexRequestKey; // Describes the caching behaviour (or caching options) for a Flex request.\nClass CmsFlexRequestKey.PathsBean; // Contains the root paths to be used for determining the buckets of a flex cache entry.\nClass CmsFlexResponse; // Wrapper class for a HttpServletResponse, required in order to process JSPs from the OpenCms VFS.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsFlexCacheException; // Signals an error of the Flex cache.\n", "des": "Provides low-level JSP integration funtionality for OpenCms, also implements the FlexCache, a declarative parameter-based cache."}
{"index": 2684, "repo": "spring-data-jpa-3.1.2", "code": "package provider;\n\npublic abstract class HibernateUtils extends Object; // Utility functions to work with Hibernate.\npublic enum PersistenceProvider extends Enum<PersistenceProvider> implements QueryExtractor, ProxyIdAccessor, QueryComment; // Enumeration representing persistence providers to be used.\npublic interface ProxyIdAccessor; // Interface for a persistence provider specific accessor of identifiers held in proxies.\npublic interface QueryComment; // Interface to hide different implementations of query hints that insert comments into a Query.\npublic interface QueryExtractor; // Interface to hide different implementations to extract the original JPA query string from a Query.\n", "des": "JPA provider-specific utilities."}
{"index": 77, "repo": "ignite-core-2.15.0", "code": "package indexing;\n\npackage indexing.noop; // Contains default no-op indexing SPI implementation.\nInterface IndexingQueryFilter; // Cache entry filter.\nInterface IndexingSpi; // Indexing SPI allows user to index cache content.\nClass IndexingQueryCacheFilter; // Indexing query filter for specific cache.\nClass IndexingQueryFilterImpl; // Indexing query filter.\n", "des": "Contains APIs for indexing SPI."}
{"index": 2825, "repo": "groovy-xml-4.0.13", "code": "package dom;\n\npublic class DOMCategory extends Object; // Category class which adds GPath style operations to Java's DOM classes.\n", "des": "Groovy XML Dom processing classes."}
{"index": 3153, "repo": "tika-core-2.8.0", "code": "package config;\n\nInterface Initializable; // Components that must do special processing across multiple fields at initialization time should implement this interface.\nInterface InitializableProblemHandler; // This is to be used to handle potential recoverable problems that might arise during initialization.\nInterface LoadErrorHandler; // Interface for error handling strategies in service class loading.\nClass ConfigBase;\nClass Param<T>; // This is a serializable model class for parameters from configuration file.\nClass ParamField; // This class stores metdata for Field annotation are used to map them to Param at runtime\nClass ServiceLoader; // Internal utility class that Tika uses to look up service providers.\nClass TikaActivator; // Bundle activator that adjust the class loading mechanism of the ServiceLoader class to work correctly in an OSGi environment.\nClass TikaConfig; // Parse xml config file.\nClass TikaConfigSerializer;\nClass TikaTaskTimeout;\nEnum TikaConfigSerializer.Mode;\nAnnotation Type Field; // Field annotation is a contract for binding Param value from Tika Configuration to an object.\n", "des": "Tika configuration tools."}
{"index": 1829, "repo": "spring-test-6.0.11", "code": "package client;\n\npackage client.reactive; // Mock implementations of reactive HTTP client contracts.\npublic class MockClientHttpRequest extends MockHttpOutputMessage implements org.springframework.http.client.ClientHttpRequest; // Mock implementation of ClientHttpRequest.\npublic class MockClientHttpResponse extends MockHttpInputMessage implements org.springframework.http.client.ClientHttpResponse; // Mock implementation of ClientHttpResponse.\n", "des": "Mock implementations of client-side HTTP abstractions."}
{"index": 2137, "repo": "wicket-core-10.0.0-M1", "code": "package authorization;\n\npublic class Action extends org.apache.wicket.util.lang.EnumeratedType; // A class for constructing singleton constants that represent a given component action that needs to be authorized.\npublic abstract class AuthorizationException extends WicketRuntimeException; // Base class for exceptions thrown as a result of authorization failure.\npublic interface IAuthorizationStrategy; // Authorization strategies specify aspect-like constraints on significant actions taken by the framework in a given application.\npublic static class IAuthorizationStrategy.AllowAllAuthorizationStrategy extends Object implements IAuthorizationStrategy;\n@FunctionalInterface public interface IUnauthorizedComponentInstantiationListener; // Interface to code that is called to handle unauthorized component instantiations.\n@FunctionalInterface public interface IUnauthorizedResourceRequestListener; // A listener that is notified when a request to some resource is not allowed.\npublic class UnauthorizedActionException extends AuthorizationException; // Exception that is thrown when an action is not authorized.\npublic class UnauthorizedInstantiationException extends AuthorizationException; // Exception that is thrown when the creation of a component is not allowed.\n", "des": "Contains classes that allow the user to specify authorization constraints via IAuthorizationStrategy."}
{"index": 2342, "repo": "spring-boot-3.1.1", "code": "package client;\n\npublic final class ClientHttpRequestFactories extends Object; // Utility class that can be used to create ClientHttpRequestFactory instances configured using given ClientHttpRequestFactorySettings.\npublic record ClientHttpRequestFactorySettings(Duration connectTimeout, Duration readTimeout, Boolean bufferRequestBody, SslBundle sslBundle) extends Record; // Settings that can be applied when creating a ClientHttpRequestFactory.\n@Deprecated(since=\"3.0.0\", forRemoval=true) public class ClientHttpRequestFactorySupplier extends Object implements Supplier<org.springframework.http.client.ClientHttpRequestFactory>;\npublic class RestTemplateBuilder extends Object; // Builder that can be used to configure and create a RestTemplate.\n@FunctionalInterface public interface RestTemplateCustomizer; // Callback interface that can be used to customize a RestTemplate.\n@FunctionalInterface public interface RestTemplateRequestCustomizer<T extends org.springframework.http.client.ClientHttpRequest>; // Callback interface that can be used to customize the ClientHttpRequest sent from a RestTemplate.\npublic class RootUriTemplateHandler extends Object implements org.springframework.web.util.UriTemplateHandler; // UriTemplateHandler to set the root for URI that starts with '/'.\n", "des": "Web client utilities."}
{"index": 1979, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package sendgrid;\n\n@AutoConfiguration @ConditionalOnClass(com.sendgrid.SendGrid.class) @ConditionalOnProperty(prefix=\"spring.sendgrid\", value=\"api-key\") @EnableConfigurationProperties(SendGridProperties.class) public class SendGridAutoConfiguration extends Object; // Auto-configuration for SendGrid.\n@ConfigurationProperties(prefix=\"spring.sendgrid\") public class SendGridProperties extends Object; // @ConfigurationProperties for SendGrid.\npublic static class SendGridProperties.Proxy extends Object;\n", "des": "Auto-configuration for SendGrid."}
{"index": 3742, "repo": "lucene-queryparser-9.7.0", "code": "package builders;\n\nInterface StandardQueryBuilder; // This interface should be implemented by every class that wants to build Query objects from QueryNode objects.\nClass AnyQueryNodeBuilder; // Builds a BooleanQuery of SHOULD clauses, possibly with some minimum number to match.\nClass BooleanQueryNodeBuilder; // Builds a BooleanQuery object from a BooleanQueryNode object.\nClass BoostQueryNodeBuilder; // This builder basically reads the Query object set on the BoostQueryNode child using QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID and applies the boost value defined in the BoostQueryNode.\nClass DummyQueryNodeBuilder; // This builder does nothing.\nClass FieldQueryNodeBuilder; // Builds a TermQuery object from a FieldQueryNode object.\nClass FuzzyQueryNodeBuilder; // Builds a FuzzyQuery object from a FuzzyQueryNode object.\nClass GroupQueryNodeBuilder; // Builds no object, it only returns the Query object set on the GroupQueryNode object using a QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID tag.\nClass IntervalQueryNodeBuilder; // Builds a Query from an IntervalQueryNode.\nClass MatchAllDocsQueryNodeBuilder; // Builds a MatchAllDocsQuery object from a MatchAllDocsQueryNode object.\nClass MatchNoDocsQueryNodeBuilder; // Builds a MatchNoDocsQuery object from a MatchNoDocsQueryNode object.\nClass MinShouldMatchNodeBuilder; // Builds a BooleanQuery from a MinShouldMatchNode.\nClass ModifierQueryNodeBuilder; // Builds no object, it only returns the Query object set on the ModifierQueryNode object using a QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID tag.\nClass MultiPhraseQueryNodeBuilder; // Builds a MultiPhraseQuery object from a MultiPhraseQueryNode object.\nClass PhraseQueryNodeBuilder; // Builds a PhraseQuery object from a TokenizedPhraseQueryNode object.\nClass PointRangeQueryNodeBuilder; // Builds PointValues range queries out of PointRangeQueryNodes.\nClass PrefixWildcardQueryNodeBuilder; // Builds a PrefixQuery object from a PrefixWildcardQueryNode object.\nClass RegexpQueryNodeBuilder; // Builds a RegexpQuery object from a RegexpQueryNode object.\n", "des": "Standard Lucene Query Node Builders."}
{"index": 3071, "repo": "spring-ws-core-4.0.5", "code": "package mapping;\n\npackage mapping.jaxb; // Provides JAXB2-based EndpointMapping implementations.\npublic abstract class AbstractAnnotationMethodEndpointMapping<T> extends AbstractMethodEndpointMapping<T>; // Abstract base for EndpointMapping implementations that map classes tagged with an annotation.\npublic abstract class AbstractEndpointMapping extends org.springframework.context.support.ApplicationObjectSupport implements EndpointMapping, org.springframework.core.Ordered; // Abstract base class for EndpointMapping implementations.\npublic abstract class AbstractMapBasedEndpointMapping extends AbstractEndpointMapping; // Abstract base class for endpoint mapping that are based on a Map.\npublic abstract class AbstractMethodEndpointMapping<T> extends AbstractEndpointMapping; // Abstract base class for MethodEndpoint mappings.\npublic abstract class AbstractQNameEndpointMapping extends AbstractMapBasedEndpointMapping; // Abstract base class for EndpointMappings that resolve qualified names as registration keys.\npublic class PayloadRootAnnotationMethodEndpointMapping extends AbstractAnnotationMethodEndpointMapping<QName>; // Implementation of the EndpointMapping interface that uses the PayloadRoot annotation to map methods to request payload root elements.\npublic class PayloadRootQNameEndpointMapping extends AbstractQNameEndpointMapping; // Implementation of the EndpointMapping interface to map from the qualified name of the request payload root element.\npublic class SimpleMethodEndpointMapping extends AbstractMethodEndpointMapping<String> implements org.springframework.beans.factory.InitializingBean; // Simple subclass of AbstractMethodEndpointMapping that maps from the local name of the request payload to methods.\npublic class UriEndpointMapping extends AbstractMapBasedEndpointMapping; // Implementation of the EndpointMapping interface to map from the full request URI or request URI path to endpoint beans.\npublic class XPathPayloadEndpointMapping extends AbstractMapBasedEndpointMapping implements org.springframework.beans.factory.InitializingBean; // Implementation of the EndpointMapping interface that maps to endpoint using an XPath expression.\n", "des": "Provides miscellaneous endpoints EndpointMapping implementations."}
{"index": 1153, "repo": "commons-math3-3.6.1", "code": "package distribution;\n\npackage distribution.fitting; // Fitting of parameters against distributions.\nInterface IntegerDistribution; // Interface for distributions on the integers.\nInterface MultivariateRealDistribution; // Base interface for multivariate distributions on the reals.\nInterface RealDistribution; // Base interface for distributions on the reals.\nClass AbstractIntegerDistribution; // Base class for integer-valued discrete distributions.\nClass AbstractMultivariateRealDistribution; // Base class for multivariate probability distributions.\nClass AbstractRealDistribution; // Base class for probability distributions on the reals.\nClass BetaDistribution; // Implements the Beta distribution.\nClass BinomialDistribution; // Implementation of the binomial distribution.\nClass CauchyDistribution; // Implementation of the Cauchy distribution.\nClass ChiSquaredDistribution; // Implementation of the chi-squared distribution.\nClass ConstantRealDistribution; // Implementation of the constant real distribution.\nClass EnumeratedDistribution<T>; // A generic implementation of a discrete probability distribution (Wikipedia) over a finite sample space, based on an enumerated list of <value, probability> pairs.\nClass EnumeratedIntegerDistribution; // Implementation of an integer-valued EnumeratedDistribution.\nClass EnumeratedRealDistribution; // Implementation of a real-valued EnumeratedDistribution.\nClass ExponentialDistribution; // Implementation of the exponential distribution.\nClass FDistribution; // Implementation of the F-distribution.\nClass GammaDistribution; // Implementation of the Gamma distribution.\nClass GeometricDistribution; // Implementation of the geometric distribution.\nClass GumbelDistribution; // This class implements the Gumbel distribution.\nClass HypergeometricDistribution; // Implementation of the hypergeometric distribution.\nClass KolmogorovSmirnovDistribution; // to be removed in version 4.0 - use KolmogorovSmirnovTest\nClass LaplaceDistribution; // This class implements the Laplace distribution.\nClass LevyDistribution; // This class implements the Lévy distribution.\nClass LogisticDistribution; // This class implements the Logistic distribution.\nClass LogNormalDistribution; // Implementation of the log-normal (gaussian) distribution.\nClass MixtureMultivariateNormalDistribution; // Multivariate normal mixture distribution.\nClass MixtureMultivariateRealDistribution<T extends MultivariateRealDistribution>; // Class for representing mixture model distributions.\n", "des": "Implementations of common discrete and continuous distributions."}
{"index": 1277, "repo": "spring-core-6.0.11", "code": "package support;\n\npublic class DefaultPropertySourceFactory extends Object implements PropertySourceFactory; // The default implementation for PropertySourceFactory, wrapping every resource in a ResourcePropertySource.\npublic class EncodedResource extends Object implements InputStreamSource; // Holder that combines a Resource descriptor with a specific encoding or Charset to be used for reading from the resource.\npublic class LocalizedResourceHelper extends Object; // Helper class for loading a localized resource, specified through name, extension and current locale.\npublic class PathMatchingResourcePatternResolver extends Object implements ResourcePatternResolver; // A ResourcePatternResolver implementation that is able to resolve a specified resource location path into one or more matching Resources.\npublic abstract class PropertiesLoaderSupport extends Object; // Base class for JavaBean-style components that need to load properties from one or more resources.\npublic abstract class PropertiesLoaderUtils extends Object; // Convenient utility methods for loading of java.util.Properties, performing standard handling of input streams.\npublic record PropertySourceDescriptor(List<String> locations, boolean ignoreResourceNotFound, String name, Class<? extends PropertySourceFactory> propertySourceFactory, String encoding) extends Record; // Describe a PropertySource.\npublic interface PropertySourceFactory; // Strategy interface for creating resource-based PropertySource wrappers.\npublic class PropertySourceProcessor extends Object; // Contribute property sources to the Environment.\npublic class ResourceArrayPropertyEditor extends PropertyEditorSupport; // Editor for Resource arrays, to automatically convert String location patterns (e.g.\npublic interface ResourcePatternResolver extends ResourceLoader; // Strategy interface for resolving a location pattern (for example, an Ant-style path pattern) into Resource objects.\npublic abstract class ResourcePatternUtils extends Object; // Utility class for determining whether a given URL is a resource location that can be loaded via a ResourcePatternResolver.\npublic class ResourcePropertySource extends PropertiesPropertySource; // Subclass of PropertiesPropertySource that loads a Properties object from a given Resource or resource location such as \"classpath:/com/myco/foo.properties\" or \"file:/path/to/file.xml\".\npublic class ResourceRegion extends Object; // Region of a Resource implementation, materialized by a position within the Resource and a byte count for the length of that region.\npublic class SpringFactoriesLoader extends Object; // General purpose factory loading mechanism for internal use within the framework.\n", "des": "Support classes for Spring's resource abstraction."}
{"index": 2395, "repo": "spring-batch-core-5.0.2", "code": "package listener;\n\npublic abstract class AbstractListenerFactoryBean<T> extends Object implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.InitializingBean; // FactoryBean implementation that builds a listener based on the various lifecycle methods or annotations that are provided.\n@Deprecated public class ChunkListenerSupport extends Object implements ChunkListener;\npublic class CompositeChunkListener extends Object implements ChunkListener;\npublic class CompositeItemProcessListener<T,S> extends Object implements ItemProcessListener<T,S>;\npublic class CompositeItemReadListener<T> extends Object implements ItemReadListener<T>;\npublic class CompositeItemWriteListener<S> extends Object implements ItemWriteListener<S>;\npublic class CompositeJobExecutionListener extends Object implements JobExecutionListener;\npublic class CompositeSkipListener<T,S> extends Object implements SkipListener<T,S>;\npublic class CompositeStepExecutionListener extends Object implements StepExecutionListener;\npublic class ExecutionContextPromotionListener extends Object implements StepExecutionListener, org.springframework.beans.factory.InitializingBean; // This class can be used to automatically promote items from the Step ExecutionContext to the Job ExecutionContext at the end of a step.\npublic class ItemListenerSupport<I,O> extends Object implements ItemReadListener<I>, ItemProcessListener<I,O>, ItemWriteListener<O>; // Basic no-op implementation of the ItemReadListener, ItemProcessListener, and ItemWriteListener interfaces.\n@Deprecated public class JobExecutionListenerSupport extends Object implements JobExecutionListener;\npublic class JobListenerFactoryBean extends AbstractListenerFactoryBean<JobExecutionListener>; // This AbstractListenerFactoryBean implementation is used to create a JobExecutionListener.\npublic enum JobListenerMetaData extends Enum<JobListenerMetaData> implements ListenerMetaData; // Enumeration for JobExecutionListener meta data, which ties together the names of methods, their interfaces, annotation, and expected arguments.\npublic class JobParameterExecutionContextCopyListener extends Object implements StepExecutionListener; // This class can be used to automatically copy items from the JobParameters to the Step ExecutionContext.\npublic interface ListenerMetaData; // A common interface for listener meta data enumerations.\n", "des": "Generic implementations of core batch listener interfaces."}
{"index": 2189, "repo": "spring-security-web-6.1.2", "code": "package jaasapi;\n\npublic class JaasApiIntegrationFilter extends org.springframework.web.filter.GenericFilterBean; // A Filter which attempts to obtain a JAAS Subject and continue the FilterChain running as that Subject.\n", "des": "Makes a JAAS Subject available as the current Subject."}
{"index": 1757, "repo": "spring-data-mongodb-4.1.2", "code": "package event;\n\npublic abstract class AbstractDeleteEvent<T> extends MongoMappingEvent<org.bson.Document>; // Base class for delete events.\npublic abstract class AbstractMongoEventListener<E> extends Object implements ApplicationListener<MongoMappingEvent<?>>; // Base class to implement domain class specific ApplicationListeners.\n@FunctionalInterface public interface AfterConvertCallback<T> extends EntityCallback<T>; // Callback being invoked after a domain object is materialized from a Document when reading results.\npublic class AfterConvertEvent<E> extends MongoMappingEvent<E>; // MongoMappingEvent thrown after convert of a document.\npublic class AfterDeleteEvent<T> extends AbstractDeleteEvent<T>; // Event being thrown after a single or a set of documents has/have been deleted.\npublic class AfterLoadEvent<T> extends MongoMappingEvent<org.bson.Document>; // Event to be triggered after loading Documents to be mapped onto a given type.\n@FunctionalInterface public interface AfterSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered after save of a Document.\npublic class AfterSaveEvent<E> extends MongoMappingEvent<E>; // MongoMappingEvent triggered after save of a document.\npublic class AuditingEntityCallback extends Object implements BeforeConvertCallback<Object>, Ordered; // EntityCallback to populate auditing related fields on an entity about to be saved.\n@FunctionalInterface public interface BeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\npublic class BeforeConvertEvent<T> extends MongoMappingEvent<T>; // Event being thrown before a domain object is converted to be persisted.\npublic class BeforeDeleteEvent<T> extends AbstractDeleteEvent<T>; // Event being thrown before a document is deleted.\n@FunctionalInterface public interface BeforeSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered before save of a document.\npublic class BeforeSaveEvent<E> extends MongoMappingEvent<E>; // MongoMappingEvent triggered before save of a document.\npublic class LoggingEventListener extends AbstractMongoEventListener<Object>; // ApplicationListener for Mongo mapping events logging the events.\npublic class MongoMappingEvent<T> extends ApplicationEvent; // Base ApplicationEvent triggered by Spring Data MongoDB.\n", "des": "Mapping event callback infrastructure for the MongoDB document-to-object mapping subsystem."}
{"index": 1799, "repo": "spring-aop-6.0.11", "code": "package aop;\n\npackage aop.aspectj; // AspectJ integration package.\npackage aop.config; // Support package for declarative AOP configuration, with XML schema being the primary configuration format.\npackage aop.framework; // Package containing Spring's basic AOP infrastructure, compliant with the AOP Alliance interfaces.\npackage aop.interceptor; // Provides miscellaneous interceptor implementations.\npackage aop.scope; // Support for AOP-based scoping of target objects, with configurable backend.\npackage aop.support; // Convenience classes for using Spring's AOP API.\npackage aop.target; // Various TargetSource implementations for use with Spring AOP.\npublic interface Advisor; // Base interface holding AOP advice (action to take at a joinpoint) and a filter determining the applicability of the advice (such as a pointcut).\npublic interface AfterAdvice extends Advice; // Common marker interface for after advice, such as AfterReturningAdvice and ThrowsAdvice.\npublic interface AfterReturningAdvice extends AfterAdvice; // After returning advice is invoked only on normal method return, not if an exception is thrown.\npublic class AopInvocationException extends org.springframework.core.NestedRuntimeException; // Exception that gets thrown when an AOP invocation failed because of misconfiguration or unexpected runtime issues.\npublic interface BeforeAdvice extends Advice; // Common marker interface for before advice, such as MethodBeforeAdvice.\n@FunctionalInterface public interface ClassFilter; // Filter that restricts matching of a pointcut or introduction to a given set of target classes.\npublic interface DynamicIntroductionAdvice extends Advice; // Subinterface of AOP Alliance Advice that allows additional interfaces to be implemented by an Advice, and available via a proxy using that interceptor.\npublic interface IntroductionAdvisor extends Advisor, IntroductionInfo; // Superinterface for advisors that perform one or more AOP introductions.\npublic interface IntroductionAwareMethodMatcher extends MethodMatcher; // A specialized type of MethodMatcher that takes into account introductions when matching methods.\npublic interface IntroductionInfo; // Interface supplying the information necessary to describe an introduction.\n", "des": "Core Spring AOP interfaces, built on AOP Alliance AOP interoperability interfaces."}
{"index": 744, "repo": "spring-data-solr-4.3.15", "code": "package server;\n\npackage server.config; // Config support for SolrClient.\npackage server.support; // Everything SolrClient and EmbeddedSolrServer related.\nInterface SolrClientFactory; // SolrClientFactory replaces SolrServerFactory from version 1.x and provides access to the solrj SolrClient.\n", "des": "SolrClient configuration and spring integration."}
{"index": 2349, "repo": "spring-boot-3.1.1", "code": "package error;\n\npublic final class ErrorAttributeOptions extends Object; // Options controlling the contents of ErrorAttributes.\npublic static enum ErrorAttributeOptions.Include extends Enum<ErrorAttributeOptions.Include>; // Error attributes that can be included in an error response.\n", "des": "Spring Web error handling infrastructure."}
{"index": 3545, "repo": "opennlp-tools-2.2.0", "code": "package th;\n\nClass SentenceContextGenerator; // Creates contexts/features for end-of-sentence detection in Thai text.\n", "des": "Package related to the processing of Thai data."}
{"index": 1053, "repo": "commons-io-2.13.0", "code": "package output;\n\nInterface AbstractByteArrayOutputStream.InputStreamConstructor<T extends InputStream>; // Constructor for an InputStream subclass.\nInterface UncheckedAppendable; // An Appendable that throws UncheckedIOException instead of IOException.\nClass AbstractByteArrayOutputStream; // This is the base class for implementing an output stream in which the data is written into a byte array.\nClass AppendableOutputStream<T extends Appendable>; // OutputStream implementation that writes the data to an Appendable Object.\nClass AppendableWriter<T extends Appendable>; // Writer implementation that writes the data to an Appendable Object.\nClass BrokenOutputStream; // Broken output stream.\nClass BrokenWriter; // Always throws an IOException from all Writer methods.\nClass ByteArrayOutputStream; // Implements a ThreadSafe version of AbstractByteArrayOutputStream using instance synchronization.\nClass ChunkedOutputStream; // OutputStream which breaks larger output blocks into chunks.\nClass ChunkedOutputStream.Builder; // Builds a new UnsynchronizedByteArrayOutputStream instance.\nClass ChunkedWriter; // Writer which breaks larger output blocks into chunks.\nClass ClosedOutputStream; // Throws an IOException on all attempts to write to the stream.\nClass ClosedWriter; // Throws an IOException on all attempts to write with ClosedWriter.close() implemented as a noop.\nClass CloseShieldOutputStream; // Proxy stream that prevents the underlying output stream from being closed.\nClass CloseShieldWriter; // Proxy writer that prevents the underlying writer from being closed.\nClass CountingOutputStream; // A decorating output stream that counts the number of bytes that have passed through the stream so far.\nClass DeferredFileOutputStream; // An output stream which will retain data in memory until a specified threshold is reached, and only then commit it to disk.\nClass DeferredFileOutputStream.Builder; // Builds a new DeferredFileOutputStream instance.\nClass DemuxOutputStream; // Forwards data to a stream that has been associated with this thread.\nClass FileWriterWithEncoding; // Writer of files that allows the encoding to be set.\nClass FileWriterWithEncoding.Builder; // Builds a new FileWriterWithEncoding instance.\nClass FilterCollectionWriter; // Abstract class for writing filtered character streams to a Collection of writers.\nClass LockableFileWriter; // FileWriter that will create and honor lock files to allow simple cross thread file lock handling.\nClass LockableFileWriter.Builder; // Builds a new LockableFileWriter instance.\n", "des": "Provides implementations of output classes, such as OutputStream and Writer."}
{"index": 1323, "repo": "groovy-all-4.0.13", "code": "package concurrentlinkedhashmap;\n\n@ThreadSafe public final class ConcurrentLinkedHashMap<K,V> extends AbstractMap<K,V> implements ConcurrentMap<K,V>, Serializable; // A hash table supporting full concurrency of retrievals, adjustable expected concurrency for updates, and a maximum capacity to bound the map by.\npublic static final class ConcurrentLinkedHashMap.Builder<K,V> extends Object; // A builder that creates ConcurrentLinkedHashMap instances.\n@ThreadSafe public interface EntryWeigher<K,V>; // A class that can determine the weight of an entry.\n@ThreadSafe public interface EvictionListener<K,V>; // A listener registered for notification when an entry is evicted.\n@ThreadSafe public interface Weigher<V>; // A class that can determine the weight of a value.\npublic final class Weighers extends Object; // A common set of Weigher and EntryWeigher implementations.\n", "des": "This package contains an implementation of a bounded ConcurrentMap data structure."}
{"index": 3559, "repo": "guava-32.1.1-jre", "code": "package io;\n\nInterface ByteArrayDataInput; // An extension of DataInput for reading from in-memory byte arrays; its methods offer identical functionality but do not throw IOException.\nInterface ByteArrayDataOutput; // An extension of DataOutput for writing to in-memory byte arrays; its methods offer identical functionality but do not throw IOException.\nInterface ByteProcessor<T extends @Nullable java.lang.Object>; // A callback interface to process bytes from a stream.\nInterface LineProcessor<T extends @Nullable java.lang.Object>; // A callback to be used with the streaming readLines methods.\nClass BaseEncoding; // A binary encoding scheme for reversibly translating between byte sequences and printable ASCII strings.\nClass ByteSink; // A destination to which bytes can be written, such as a file.\nClass ByteSource; // A readable source of bytes, such as a file.\nClass ByteStreams; // Provides utility methods for working with byte arrays and I/O streams.\nClass CharSink; // A destination to which characters can be written, such as a text file.\nClass CharSource; // A readable source of characters, such as a text file.\nClass CharStreams; // Provides utility methods for working with character streams.\nClass Closeables; // Utility methods for working with Closeable objects.\nClass Closer; // A Closeable that collects Closeable resources and closes them all when it is closed.\nClass CountingInputStream; // An InputStream that counts the number of bytes read.\nClass CountingOutputStream; // An OutputStream that counts the number of bytes written.\nClass FileBackedOutputStream; // An OutputStream that starts buffering to a byte array, but switches to file buffering once the data reaches a configurable size.\nClass Files; // Provides utility methods for working with files.\nClass Flushables; // Utility methods for working with Flushable objects.\nClass LineReader; // A class for reading lines of text.\nClass LittleEndianDataInputStream; // An implementation of DataInput that uses little-endian byte ordering for reading short, int, float, double, and long values.\nClass LittleEndianDataOutputStream; // An implementation of DataOutput that uses little-endian byte ordering for writing char, short, int, float, double, and long values.\nClass MoreFiles; // Static utilities for use with Path instances, intended to complement Files.\nClass PatternFilenameFilter; // File name filter that only accepts files matching a regular expression.\n", "des": "Utility methods and classes for I/O; for example input streams, output streams, readers, writers, and files."}
{"index": 250, "repo": "nutch-2.4", "code": "package prefix;\n\nClass PrefixURLFilter; // Filters URLs based on a file of URL prefixes.\n", "des": "URL filter plugin to include only URLs which match one of a given list of URL prefixes."}
{"index": 2179, "repo": "spring-security-web-6.1.2", "code": "package preauth;\n\npackage preauth.j2ee; // Pre-authentication support for container-authenticated requests.\npackage preauth.websphere; // Websphere-specific pre-authentication classes.\npackage preauth.x509; // X.509 client certificate authentication support.\npublic abstract class AbstractPreAuthenticatedProcessingFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.ApplicationEventPublisherAware; // Base class for processing filters that handle pre-authenticated authentication requests, where it is assumed that the principal has already been authenticated by an external system.\npublic class PreAuthenticatedAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider, org.springframework.beans.factory.InitializingBean, org.springframework.core.Ordered; // Processes a pre-authenticated authentication request.\npublic class PreAuthenticatedAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // Authentication implementation for pre-authenticated authentication.\npublic class PreAuthenticatedCredentialsNotFoundException extends org.springframework.security.core.AuthenticationException;\npublic class PreAuthenticatedGrantedAuthoritiesUserDetailsService extends Object implements org.springframework.security.core.userdetails.AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>; // This AuthenticationUserDetailsService implementation creates a UserDetails object based solely on the information contained in the given PreAuthenticatedAuthenticationToken.\npublic class PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails extends WebAuthenticationDetails implements org.springframework.security.core.authority.GrantedAuthoritiesContainer; // This WebAuthenticationDetails implementation allows for storing a list of pre-authenticated Granted Authorities.\npublic class RequestAttributeAuthenticationFilter extends AbstractPreAuthenticatedProcessingFilter; // A simple pre-authenticated filter which obtains the username from request attributes, for use with SSO systems such as Stanford WebAuth or Shibboleth.\npublic class RequestHeaderAuthenticationFilter extends AbstractPreAuthenticatedProcessingFilter; // A simple pre-authenticated filter which obtains the username from a request header, for use with systems such as CA Siteminder.\n", "des": "Support for \"pre-authenticated\" scenarios, where Spring Security assumes the incoming request has already been authenticated by some externally configured system."}
{"index": 2161, "repo": "wicket-core-10.0.0-M1", "code": "package http;\n\npackage http.request; // This package contains http (web) protocol dependent implementations of request processing strategies.\npackage http.servlet; // Java Servlet specific implementation of Wicket http classes.\npublic abstract class AbstractRequestLogger extends Object implements IRequestLogger; // Base class that collects request and session information for request logging to enable rich information about the events that transpired during a single request.\npublic class AjaxEnclosureListener extends Object implements AjaxRequestTarget.IListener; // This listener adds Enclosures to AjaxTarget, where the child controller of the said Enclosure is already added.\npublic class BufferedWebResponse extends org.apache.wicket.request.http.WebResponse implements IMetaDataBufferingWebResponse; // Subclass of WebResponse that buffers the actions and performs those on another response.\npublic class ClientProperties extends Object implements org.apache.wicket.util.io.IClusterable; // Description of various user agent (browser) properties.\npublic class ContextParamWebApplicationFactory extends Object implements IWebApplicationFactory; // Factory that creates application objects based on the class name specified in the ContextParamWebApplicationFactory.APP_CLASS_PARAM context variable.\npublic class FetchMetadataResourceIsolationPolicy extends Object implements IResourceIsolationPolicy; // Default resource isolation policy used in ResourceIsolationRequestCycleListener, based on https://web.dev/fetch-metadata/.\npublic interface IMetaDataBufferingWebResponse; // Any kind of response that buffers meta data such as cookies and headers and can unbuffer it into another response\npublic interface IMultipartWebRequest; // An interface providing access to multipart content uploads of a WebRequest\npublic interface IRequestLogger; // Interface for the request logger and viewer.\npublic static interface IRequestLogger.ISessionLogInfo; // This interface can be implemented in a custom session object.\npublic static class IRequestLogger.RequestData extends Object implements org.apache.wicket.util.io.IClusterable; // This class hold the information one request of a session has.\npublic static class IRequestLogger.SessionData extends Object implements org.apache.wicket.util.io.IClusterable, Comparable<IRequestLogger.SessionData>; // This class hold the information one request of a session has.\n@FunctionalInterface public interface IResourceIsolationPolicy; // Interface for the resource isolation policies.\n", "des": "HTTP implementation."}
{"index": 3147, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface Getter; // The contract for getting value for a persistent property from its container/owner\nInterface PropertyAccess; // Describes access to a particular persistent property in terms of getting and setting values.\nInterface PropertyAccessStrategy; // Describes a strategy for persistent property access (field, JavaBean-style property, etc).\nInterface PropertyAccessStrategyResolver; // Contract for resolving the PropertyAccessStrategy to use.\nInterface Setter; // The contract for setting a persistent property value into its container/owner\nClass EnhancedGetterMethodImpl;\nClass EnhancedSetterImpl; // A specialized Setter implementation for handling setting values into a bytecode-enhanced Class.\nClass GetterFieldImpl; // Field-based implementation of Getter\nClass GetterMethodImpl;\nClass SetterFieldImpl; // Field-based implementation of Setter\nClass SetterMethodImpl;\nEnum BuiltInPropertyAccessStrategies; // Describes the built-in externally-nameable PropertyAccessStrategy implementations.\nClass PropertyAccessBuildingException; // Indicates a problem while building a PropertyAccess\nClass PropertyAccessException; // Indicates a problem reading or writing value from/to a persistent property.\nClass PropertyAccessSerializationException;\n", "des": "Defines strategies for accessing the persistent properties of an entity or composite."}
{"index": 2517, "repo": "spring-security-core-6.1.2", "code": "package expression;\n\npackage expression.method; // Implementation of expression-based method security.\npublic abstract class AbstractSecurityExpressionHandler<T> extends Object implements SecurityExpressionHandler<T>, org.springframework.context.ApplicationContextAware; // Base implementation of the facade which isolates Spring Security's requirements for evaluating security expressions from the implementation of the underlying expression objects.\npublic class DenyAllPermissionEvaluator extends Object implements PermissionEvaluator; // A null PermissionEvaluator which denies all access.\npublic final class ExpressionUtils extends Object;\npublic interface SecurityExpressionHandler<T> extends org.springframework.aop.framework.AopInfrastructureBean; // Facade which isolates Spring Security's requirements for evaluating security expressions from the implementation of the underlying expression objects\npublic interface SecurityExpressionOperations; // Standard interface for expression root objects used with expression-based security.\npublic abstract class SecurityExpressionRoot extends Object implements SecurityExpressionOperations; // Base root object for use in Spring Security expression evaluations.\n", "des": "Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter annotations."}
{"index": 1736, "repo": "spring-jdbc-6.0.11", "code": "package lob;\n\npublic abstract class AbstractLobHandler extends Object implements LobHandler; // Abstract base class for LobHandler implementations.\npublic class DefaultLobHandler extends AbstractLobHandler; // Default implementation of the LobHandler interface.\npublic interface LobCreator extends Closeable; // Interface that abstracts potentially database-specific creation of large binary fields and large text fields.\npublic interface LobHandler; // Abstraction for handling large binary fields and large text fields in specific databases, no matter if represented as simple types or Large OBjects.\npublic class TemporaryLobCreator extends Object implements LobCreator; // LobCreator implementation based on temporary LOBs, using JDBC 4.0's Connection.createBlob() / Connection.createClob() mechanism.\n", "des": "Provides a strategy interface for Large OBject handling, as well as a customizable default implementation."}
{"index": 487, "repo": "beam-sdks-java-core-2.49.0", "code": "package io;\n\npackage io.payloads; // Provides abstractions for schema-aware IOs.\nInterface GenericDlqProvider; // A Provider for generic DLQ transforms that handle deserialization failures.\nInterface Providers.Identifyable;\nInterface SchemaIO; // An abstraction to create schema capable and aware IOs.\nInterface SchemaIOProvider; // Provider to create SchemaIO instances for use in Beam SQL and other SDKs.\nClass DeadLetteredTransform<InputT,OutputT>;\nClass Failure; // A generic failure of an SQL transform.\nClass Failure.Builder;\nClass GenericDlq; // Helper to generate a DLQ transform to write PCollection to an external system.\nClass Providers; // Helpers for implementing the \"Provider\" pattern.\nClass InvalidConfigurationException; // Exception thrown when the configuration for a SchemaIO is invalid.\nClass InvalidLocationException; // Exception thrown when the configuration for a SchemaIO is invalid.\nClass InvalidSchemaException; // Exception thrown when the schema for a SchemaIO is invalid.\n", "des": "Provides abstractions for schema-aware IOs."}
{"index": 3602, "repo": "lucene-queries-9.7.0", "code": "package queries;\n\npackage queries.function; // Queries that compute score based upon a function.\npackage queries.intervals; // Intervals queries\npackage queries.mlt; // Document similarity query generators.\npackage queries.payloads; // The payloads package provides Query mechanisms for finding and using payloads.\npackage queries.spans; // The calculus of spans.\nClass CommonTermsQuery; // A query that executes high-frequency terms in a optional sub-query to prevent slow queries due to \"common\" terms like stopwords.\n", "des": "Filters and Queries that add to core Lucene."}
{"index": 299, "repo": "pdfbox-3.0.0-beta1", "code": "package shading;\n\nClass AxialShadingContext; // AWT PaintContext for axial shading.\nClass AxialShadingPaint; // AWT Paint for axial shading.\nClass PDShading; // A Shading Resource.\nClass PDShadingType1; // Resources for a function based shading.\nClass PDShadingType2; // Resources for an axial shading.\nClass PDShadingType3; // Resources for a radial shading.\nClass PDShadingType4; // Resources for a shading type 4 (Free-Form Gouraud-Shaded Triangle Mesh).\nClass PDShadingType5; // Resources for a shading type 5 (Lattice-Form Gouraud-Shade Triangle Mesh).\nClass PDShadingType6; // Resources for a shading type 6 (Coons Patch Mesh).\nClass PDShadingType7; // Resources for a shading type 7 (Tensor-Product Patch Mesh).\nClass RadialShadingContext; // AWT PaintContext for radial shading.\nClass RadialShadingPaint; // AWT Paint for radial shading.\nClass ShadingContext; // A base class to handle what is common to all shading types.\nClass ShadingPaint<T extends PDShading>; // This is base class for all PDShading-Paints to allow other low level libraries access to the shading source data.\n", "des": "This package deals with shadings which are used for filling instead of a color."}
{"index": 3605, "repo": "lucene-queries-9.7.0", "code": "package valuesource;\n\nClass BoolFunction; // Abstract parent class for those ValueSource implementations which apply boolean logic to their values\nClass ByteKnnVectorFieldSource; // An implementation for retrieving FunctionValues instances for byte knn vectors fields.\nClass BytesRefFieldSource; // An implementation for retrieving FunctionValues instances for string based fields.\nClass ByteVectorSimilarityFunction; // ByteVectorSimilarityFunction returns a similarity function between two knn vectors with byte elements.\nClass ComparisonBoolFunction; // Base class for comparison operators useful within an \"if\"/conditional.\nClass ConstKnnByteVectorValueSource; // Function that returns a constant byte vector value for every document.\nClass ConstKnnFloatValueSource; // Function that returns a constant float vector value for every document.\nClass ConstNumberSource; // ConstNumberSource is the base class for all constant numbers\nClass ConstValueSource; // ConstValueSource returns a constant for all documents\nClass DefFunction; // ValueSource implementation which only returns the values from the provided ValueSources which are available for a particular docId.\nClass DivFloatFunction; // Function to divide \"a\" by \"b\"\nClass DocFreqValueSource; // DocFreqValueSource returns the number of documents containing the term.\nClass DoubleConstValueSource; // Function that returns a constant double value for every document.\nClass DoubleFieldSource; // Obtains double field values from LeafReader.getNumericDocValues(java.lang.String) and makes those values available as other numeric types, casting as needed.\nClass DualFloatFunction; // Abstract ValueSource implementation which wraps two ValueSources and applies an extendible float function to their values.\nClass EnumFieldSource; // Obtains int field values from LeafReader.getNumericDocValues(java.lang.String) and makes those values available as other numeric types, casting as needed.\nClass FieldCacheSource; // A base class for ValueSource implementations that retrieve values for a single field from DocValues.\nClass FloatFieldSource; // Obtains float field values from LeafReader.getNumericDocValues(java.lang.String) and makes those values available as other numeric types, casting as needed.\nClass FloatKnnVectorFieldSource; // An implementation for retrieving FunctionValues instances for float knn vectors fields.\nClass FloatVectorSimilarityFunction; // FloatVectorSimilarityFunction returns a similarity function between two knn vectors with float elements.\n", "des": "A variety of functions to use with FunctionQuery."}
{"index": 96, "repo": "ignite-core-2.15.0", "code": "package sharedfs;\n\nClass TcpDiscoverySharedFsIpFinder; // Shared filesystem-based IP finder.\n", "des": "Contains shared filesystem-based IP finder."}
{"index": 2097, "repo": "spring-webflux-6.0.11", "code": "package support;\n\npublic class HandlerFunctionAdapter extends Object implements HandlerAdapter; // HandlerAdapter implementation that supports HandlerFunctions.\npublic class RouterFunctionMapping extends AbstractHandlerMapping implements org.springframework.beans.factory.InitializingBean; // HandlerMapping implementation that supports RouterFunctions.\npublic class ServerRequestWrapper extends Object implements ServerRequest; // Implementation of the ServerRequest interface that can be subclassed to adapt the request in a handler filter function.\npublic static class ServerRequestWrapper.HeadersWrapper extends Object implements ServerRequest.Headers; // Implementation of the Headers interface that can be subclassed to adapt the headers in a handler filter function.\npublic class ServerResponseResultHandler extends Object implements HandlerResultHandler, org.springframework.beans.factory.InitializingBean, org.springframework.core.Ordered; // HandlerResultHandler implementation that supports ServerResponses.\n", "des": "Classes supporting the org.springframework.web.reactive.function.server package."}
{"index": 269, "repo": "nutch-2.4", "code": "package tld;\n\nClass TLDIndexingFilter; // Adds the Top level domain extensions to the index\n", "des": "Top Level Domain Indexing plugin."}
{"index": 3868, "repo": "lucene-spatial-extras-9.7.0", "code": "package query;\n\nClass SpatialArgs; // Principally holds the query Shape and the SpatialOperation.\nClass SpatialArgsParser; // Parses a string that usually looks like \"OPERATION(SHAPE)\" into a SpatialArgs object.\nClass SpatialOperation; // A predicate that compares a stored geometry to a supplied geometry.\nClass UnsupportedSpatialOperation; // Exception thrown when the SpatialStrategy cannot implement the requested operation.\n", "des": "Spatial Query options useful for client side requests"}
{"index": 1236, "repo": "spring-hateoas-2.1.2", "code": "package html;\n\npublic class HtmlInputType extends Object; // The types of HTML <input … /> elements.\n", "des": "Support for HTML media type."}
{"index": 3018, "repo": "spring-web-6.0.11", "code": "package observation;\n\npublic class DefaultServerRequestObservationConvention extends Object implements ServerRequestObservationConvention; // Default ServerRequestObservationConvention.\npublic enum ServerHttpObservationDocumentation extends Enum<ServerHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation; // Documented KeyValues for the HTTP server observations for reactive web applications.\npublic static enum ServerHttpObservationDocumentation.HighCardinalityKeyNames extends Enum<ServerHttpObservationDocumentation.HighCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic static enum ServerHttpObservationDocumentation.LowCardinalityKeyNames extends Enum<ServerHttpObservationDocumentation.LowCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic class ServerRequestObservationContext extends io.micrometer.observation.transport.RequestReplyReceiverContext<ServerHttpRequest,ServerHttpResponse>; // Context that holds information for metadata collection regarding reactive HTTP requests observations.\npublic interface ServerRequestObservationConvention extends io.micrometer.observation.ObservationConvention<ServerRequestObservationContext>; // Interface for an ObservationConvention for reactive HTTP requests.\n", "des": "Instrumentation for observing reactive HTTP server applications."}
{"index": 2586, "repo": "spring-rabbit-3.0.6", "code": "package aot;\n\npublic class RabbitRuntimeHints extends Object implements org.springframework.aot.hint.RuntimeHintsRegistrar; // RuntimeHintsRegistrar for spring-rabbit.\n", "des": "Provides classes to support Spring AOT."}
{"index": 2221, "repo": "spring-data-commons-3.1.2", "code": "package init;\n\npublic abstract class AbstractRepositoryPopulatorFactoryBean extends AbstractFactoryBean<ResourceReaderRepositoryPopulator> implements ApplicationListener<ContextRefreshedEvent>, ApplicationContextAware; // Base class for FactoryBeans creating ResourceReaderRepositoryPopulators.\npublic class Jackson2RepositoryPopulatorFactoryBean extends AbstractRepositoryPopulatorFactoryBean; // FactoryBean to set up a ResourceReaderRepositoryPopulator with a Jackson2ResourceReader.\npublic class Jackson2ResourceReader extends Object implements ResourceReader; // A ResourceReader using Jackson to read JSON into objects.\npublic class RepositoriesPopulatedEvent extends ApplicationEvent; // ApplicationEvent being thrown after a RepositoryPopulator has finished populating the Repositories available in the ApplicationContext.\npublic interface RepositoryPopulator; // Interface for components that will populate the Spring Data repositories with objects.\npublic interface ResourceReader;\npublic static enum ResourceReader.Type extends Enum<ResourceReader.Type>;\npublic class ResourceReaderRepositoryPopulator extends Object implements RepositoryPopulator, ApplicationEventPublisherAware; // A RepositoryPopulator using a ResourceReader to read objects from the configured Resources.\npublic class UnmarshallerRepositoryPopulatorFactoryBean extends AbstractRepositoryPopulatorFactoryBean; // FactoryBean to create a ResourceReaderRepositoryPopulator using an Unmarshaller.\npublic class UnmarshallingResourceReader extends Object implements ResourceReader;\n", "des": "Support for repository initialization using XML and JSON."}
{"index": 2845, "repo": "spring-integration-core-6.1.2", "code": "package channel;\n\npackage channel.interceptor; // Provides classes related to channel interception.\npublic abstract class AbstractExecutorChannel extends AbstractSubscribableChannel implements ExecutorChannelInterceptorAware; // The AbstractSubscribableChannel base implementation for those inheritors which logic may be based on the Executor.\n@IntegrationManagedResource public abstract class AbstractMessageChannel extends IntegrationObjectSupport implements org.springframework.messaging.MessageChannel, TrackableComponent, org.springframework.messaging.support.InterceptableChannel, IntegrationManagement, IntegrationPattern; // Base class for MessageChannel implementations providing common properties such as the channel name.\nprotected static class AbstractMessageChannel.ChannelInterceptorList extends Object; // A convenience wrapper class for the list of ChannelInterceptors.\npublic abstract class AbstractPollableChannel extends AbstractMessageChannel implements org.springframework.messaging.PollableChannel, ExecutorChannelInterceptorAware; // Base class for all pollable channels.\npublic abstract class AbstractSubscribableChannel extends AbstractMessageChannel implements org.springframework.messaging.SubscribableChannel, SubscribableChannelManagement; // Base implementation of MessageChannel that invokes the subscribed handler(s) by delegating to a MessageDispatcher.\npublic interface BroadcastCapableChannel extends org.springframework.messaging.SubscribableChannel; // A SubscribableChannel variant for implementations with broadcasting capabilities.\npublic class ChannelPurger extends Object; // A utility class for purging Messages from one or more QueueChannels.\npublic final class ChannelUtils extends Object; // Channel utilities.\npublic class DefaultHeaderChannelRegistry extends IntegrationObjectSupport implements HeaderChannelRegistry, ManageableLifecycle, Runnable; // Converts a channel to a name, retaining a reference to the channel keyed by the name.\nprotected static record DefaultHeaderChannelRegistry.MessageChannelWrapper(org.springframework.messaging.MessageChannel channel, long expireAt) extends Record;\npublic class DirectChannel extends AbstractSubscribableChannel; // A channel that invokes a single subscriber for each sent Message.\npublic class ExecutorChannel extends AbstractExecutorChannel; // An implementation of MessageChannel that delegates to an instance of UnicastingDispatcher which in turn delegates all dispatching invocations to an Executor.\npublic interface ExecutorChannelInterceptorAware extends org.springframework.messaging.support.InterceptableChannel; // The InterceptableChannel extension for the cases when the ExecutorChannelInterceptors may have reason (e.g.\n", "des": "Provides classes representing various channel types."}
{"index": 3611, "repo": "lucene-suggest-9.7.0", "code": "package suggest;\n\npackage suggest.analyzing; // Analyzer based autosuggest.\npackage suggest.document; // Support for document suggestion\npackage suggest.fst; // Finite-state based autosuggest.\npackage suggest.tst; // Ternary Search Tree based autosuggest.\nInterface InputIterator; // Interface for enumerating term,weight,payload triples for suggester consumption; currently only AnalyzingSuggester, FuzzySuggester and AnalyzingInfixSuggester support payloads.\nClass BitsProducer; // A producer of Bits per segment.\nClass BufferedInputIterator; // This wrapper buffers incoming elements.\nClass DocumentDictionary; // Dictionary with terms, weights, payload (optional) and contexts (optional) information taken from stored/indexed fields in a Lucene index.\nClass DocumentValueSourceDictionary; // Dictionary with terms and optionally payload and optionally contexts information taken from stored fields in a Lucene index.\nClass FileDictionary; // Dictionary represented by a text file.\nClass InMemorySorter; // An BytesRefSorter that keeps all the entries in memory.\nClass InputIterator.InputIteratorWrapper; // Wraps a BytesRefIterator as a suggester InputIterator, with all weights set to 1 and carries no payload\nClass Lookup; // Simple Lookup interface for CharSequence suggestions.\nClass Lookup.LookupPriorityQueue; // A PriorityQueue collecting a fixed size of high priority Lookup.LookupResult\nClass Lookup.LookupResult; // Result of a lookup.\nClass SortedInputIterator; // This wrapper buffers incoming elements and makes sure they are sorted based on given comparator.\nClass UnsortedInputIterator; // This wrapper buffers the incoming elements and makes sure they are in random order.\n", "des": "Support for Autocomplete/Autosuggest"}
{"index": 1303, "repo": "groovy-all-4.0.13", "code": "package builder;\n\npublic class JmxBuilderException extends RuntimeException; // Runtime exception used by JmxBuilder.\npublic class JmxBuilderModelMBean extends RequiredModelMBean implements NotificationListener; // The JmxBuilderModelMBean is the MBean class that proxies exported POGO/POJO inside the MBeanServer.\npublic class JmxEventEmitter extends NotificationBroadcasterSupport implements JmxEventEmitterMBean; // The JmxEventEmitter is a JMX Broadcaster class that is used to send generic events on the MBeanServer's event bus.\npublic interface JmxEventEmitterMBean; // This is the management interface for JmxEventEmitter.\npublic class JmxEventListener extends Object implements NotificationListener; // The JmxEventListener class is used by the builder to listen to events on the event bus.\n", "des": "Classes for the JMX Builder."}
{"index": 838, "repo": "calcite-core-1.34.0", "code": "package profile;\n\nInterface Profiler; // Analyzes data sets.\nInterface Profiler.Statistic; // Statistic produced by the profiler.\nClass Profiler.Column; // Column.\nClass Profiler.Distribution; // Value distribution, including cardinality and optionally values, of a column or set of columns.\nClass Profiler.FunctionalDependency; // Functional dependency.\nClass Profiler.Profile; // The result of profiling, contains various statistics about the data in a table.\nClass Profiler.RowCount; // Whole data set.\nClass Profiler.Unique; // Unique key.\nClass ProfilerImpl; // Implementation of Profiler that only investigates \"interesting\" combinations of columns.\nClass ProfilerImpl.Builder; // Builds a ProfilerImpl.\nClass SimpleProfiler; // Basic implementation of Profiler.\n", "des": "Utilities to analyze data sets."}
{"index": 1563, "repo": "spring-restdocs-core-3.0.0", "code": "package generate;\n\npublic class RestDocumentationGenerationException extends RuntimeException; // An exception that can be thrown when a failure occurs during REST documentation generation.\npublic final class RestDocumentationGenerator<REQ,RESP> extends Object; // A RestDocumentationGenerator is used to generate documentation snippets from the request and response of an operation performed on a service.\n", "des": "Classes that drive the generation of the documentation snippets."}
{"index": 2184, "repo": "spring-security-web-6.1.2", "code": "package session;\n\npublic abstract class AbstractSessionFixationProtectionStrategy extends Object implements SessionAuthenticationStrategy, org.springframework.context.ApplicationEventPublisherAware; // A base class for performing session fixation protection.\nprotected static final class AbstractSessionFixationProtectionStrategy.NullEventPublisher extends Object implements org.springframework.context.ApplicationEventPublisher;\npublic final class ChangeSessionIdAuthenticationStrategy extends AbstractSessionFixationProtectionStrategy; // Uses HttpServletRequest.changeSessionId() to protect against session fixation attacks.\npublic class CompositeSessionAuthenticationStrategy extends Object implements SessionAuthenticationStrategy; // A SessionAuthenticationStrategy that accepts multiple SessionAuthenticationStrategy implementations to delegate to.\npublic class ConcurrentSessionControlAuthenticationStrategy extends Object implements org.springframework.context.MessageSourceAware, SessionAuthenticationStrategy; // Strategy which handles concurrent session-control.\npublic final class NullAuthenticatedSessionStrategy extends Object implements SessionAuthenticationStrategy;\npublic class RegisterSessionAuthenticationStrategy extends Object implements SessionAuthenticationStrategy; // Strategy used to register a user with the SessionRegistry after successful Authentication.\npublic class SessionAuthenticationException extends org.springframework.security.core.AuthenticationException; // Thrown by an SessionAuthenticationStrategy to indicate that an authentication object is not valid for the current session, typically because the same user has exceeded the number of sessions they are allowed to have concurrently.\npublic interface SessionAuthenticationStrategy; // Allows pluggable support for HttpSession-related behaviour when an authentication occurs.\npublic class SessionFixationProtectionEvent extends org.springframework.security.authentication.event.AbstractAuthenticationEvent; // Indicates a session ID was changed for the purposes of session fixation protection.\npublic class SessionFixationProtectionStrategy extends AbstractSessionFixationProtectionStrategy; // Uses HttpServletRequest.invalidate() to protect against session fixation attacks.\n", "des": "Strategy interface and implementations for handling session-related behaviour for a newly authenticated user."}
{"index": 2087, "repo": "spring-webmvc-6.0.11", "code": "package script;\n\npublic class RenderingContext extends Object; // Context passed to ScriptTemplateView render function in order to make the application context, the locale, the template loader and the url available on scripting side.\npublic interface ScriptTemplateConfig; // Interface to be implemented by objects that configure and manage a JSR-223 ScriptEngine for automatic lookup in a web environment.\npublic class ScriptTemplateConfigurer extends Object implements ScriptTemplateConfig; // An implementation of Spring MVC's ScriptTemplateConfig for creating a ScriptEngine for use in a web application.\npublic class ScriptTemplateView extends AbstractUrlBasedView; // An AbstractUrlBasedView subclass designed to run any template library based on a JSR-223 script engine.\npublic class ScriptTemplateViewResolver extends UrlBasedViewResolver; // Convenience subclass of UrlBasedViewResolver that supports ScriptTemplateView and custom subclasses of it.\n", "des": "Support classes for views based on the JSR-223 script engine abstraction (as included in Java 6+), e.g."}
{"index": 415, "repo": "hadoop-azure-3.3.6", "code": "package azurebfs;\n\npackage azurebfs.commit; // Support for manifest committer.\npackage azurebfs.extensions; // This package is for extension points under ABFS; There are no stability guarantees as these extension points are deep inside the ABFS implementation code.\npackage azurebfs.oauth2; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage azurebfs.security; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\nClass Abfs; // Azure Blob File System implementation of AbstractFileSystem.\nClass AbfsConfiguration; // Configuration for Azure Blob FileSystem.\nClass AbfsCountersImpl; // Instrumentation of Abfs counters.\nClass Abfss; // Azure Blob File System implementation of AbstractFileSystem.\nClass AzureBlobFileSystem; // A FileSystem for reading and writing files stored on Windows Azure\nClass AzureBlobFileSystemStore; // Provides the bridging logic between Hadoop's abstract filesystem and Azure Storage.\nClass AzureBlobFileSystemStore.AzureBlobFileSystemStoreBuilder; // A builder class for AzureBlobFileSystemStore.\nClass SecureAzureBlobFileSystem; // A secure FileSystem for reading and writing files stored on Windows Azure\nEnum AbfsStatistic; // Statistic which are collected in Abfs.\n", "des": "A distributed implementation of FileSystem for reading and writing files on Azure Storage."}
{"index": 815, "repo": "lucene-analyzers-common-8.11.2", "code": "package wikipedia;\n\nClass WikipediaTokenizer; // Extension of StandardTokenizer that is aware of Wikipedia syntax.\nClass WikipediaTokenizerFactory; // Factory for WikipediaTokenizer.\n", "des": "Tokenizer that is aware of Wikipedia syntax."}
{"index": 658, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package timeline;\n\nClass TimelineServerUtils; // Set of utility methods to be used across timeline reader and collector.\n", "des": "Package org.apache.hadoop.server.util.timeline contains utility classes used by ATSv1 and ATSv2 on the server side."}
{"index": 3863, "repo": "lucene-spatial-extras-9.7.0", "code": "package spatial;\n\npackage spatial.bbox; // Bounding Box Spatial Strategy\npackage spatial.composite; // Composite strategies.\npackage spatial.prefix; // Prefix Tree Strategy.\npackage spatial.query; // Spatial Query options useful for client side requests\npackage spatial.serialized; // Strategies that serialize the shape (non-indexed).\npackage spatial.spatial4j; // Spatial4j stuff that ideally belongs in Spatial4j (isn't related to Lucene).\npackage spatial.util; // Advanced spatial utilities.\npackage spatial.vector; // Spatial strategy that uses two fields.\nClass ShapeValues; // Iterator over Shape objects for an index segment\nClass ShapeValuesSource; // Produces ShapeValues per-segment\nClass SpatialStrategy; // The SpatialStrategy encapsulates an approach to indexing and searching based on shapes.\n", "des": "Lucene advanced spatial search"}
{"index": 3321, "repo": "opencms-core-15.0", "code": "package ui;\n\npackage ui.actions; // Contains classes for workplace actions.\npackage ui.apps; // Contains code for workplace apps.\npackage ui.components; // Contains some reusable GUI components for Vaadin UI.\npackage ui.contextmenu; // Contains code for workplace context menu.\npackage ui.dialogs; // Contains code for workplace dialogs.\npackage ui.editors; // The available content editors.\npackage ui.login; // Contains the user interface components for the Vaadin-based login dialog.\npackage ui.report; // Contains the user interface components for reports.\npackage ui.sitemap; // Vaadin GUI components and utilities for use in the sitemap editor.\npackage ui.util; // Utilities for Vaadin workplace code.\nInterface I_CmsAppView; // Factory to create components.\nInterface I_CmsDialogContext; // Context for dialogs opened from the context menu.\nInterface I_CmsDialogContextWithAdeContext; // Interface for a dialog context which also has access to the ADE context for which it is used.\nInterface I_CmsEditPropertyContext; // Action context that allows direct editing of single properties.\nInterface I_CmsHasButtons; // Provides buttons for a dialog.\nInterface I_CmsUpdateListener<T>; // Handles updates to items of a given type.\nClass A_CmsDialogContext; // Abstract dialog context.\nClass A_CmsUI; // Abstract UI class providing access to the OpenCms context.\nClass CmsCssIcon; // An icon resource.\nClass CmsUserIconHelper; // Generates user ident-icons.\nClass CmsVaadinErrorHandler; // Error handler for uncaught Vaadin exceptions.\nClass CmsVaadinUtils; // Vaadin utility functions.\nClass CmsVaadinUtils.OptionGroupBuilder; // Helper class for building option groups.\nClass Messages; // Message bundle class.\nEnum CmsVaadinUtils.PropertyId; // Container property ids.\nEnum FontOpenCms; // The available OpenCms workplace icons.\nEnum I_CmsDialogContext.ContextType; // The available context types.\n", "des": "General code for the Vaadin UI."}
{"index": 2764, "repo": "spring-beans-6.0.11", "code": "package xml;\n\npublic abstract class AbstractBeanDefinitionParser extends Object implements BeanDefinitionParser; // Abstract BeanDefinitionParser implementation providing a number of convenience methods and a template method that subclasses must override to provide the actual parsing logic.\npublic abstract class AbstractSimpleBeanDefinitionParser extends AbstractSingleBeanDefinitionParser; // Convenient base class for when there exists a one-to-one mapping between attribute names on the element that is to be parsed and the property names on the Class being configured.\npublic abstract class AbstractSingleBeanDefinitionParser extends AbstractBeanDefinitionParser; // Base class for those BeanDefinitionParser implementations that need to parse and define just a single BeanDefinition.\npublic interface BeanDefinitionDecorator; // Interface used by the DefaultBeanDefinitionDocumentReader to handle custom, nested (directly under a <bean>) tags.\npublic interface BeanDefinitionDocumentReader; // SPI for parsing an XML document that contains Spring bean definitions.\npublic interface BeanDefinitionParser; // Interface used by the DefaultBeanDefinitionDocumentReader to handle custom, top-level (directly under <beans/>) tags.\npublic class BeanDefinitionParserDelegate extends Object; // Stateful delegate class used to parse XML bean definitions.\npublic class BeansDtdResolver extends Object implements EntityResolver; // EntityResolver implementation for the Spring beans DTD, to load the DTD from the Spring class path (or JAR file).\npublic class DefaultBeanDefinitionDocumentReader extends Object implements BeanDefinitionDocumentReader; // Default implementation of the BeanDefinitionDocumentReader interface that reads bean definitions according to the \"spring-beans\" DTD and XSD format (Spring's default XML bean definition format).\npublic class DefaultDocumentLoader extends Object implements DocumentLoader; // Spring's default DocumentLoader implementation.\npublic class DefaultNamespaceHandlerResolver extends Object implements NamespaceHandlerResolver; // Default implementation of the NamespaceHandlerResolver interface.\npublic class DelegatingEntityResolver extends Object implements EntityResolver; // EntityResolver implementation that delegates to a BeansDtdResolver and a PluggableSchemaResolver for DTDs and XML schemas, respectively.\npublic class DocumentDefaultsDefinition extends Object implements DefaultsDefinition; // Simple JavaBean that holds the defaults specified at the <beans> level in a standard Spring XML bean definition document: default-lazy-init, default-autowire, etc.\npublic interface DocumentLoader; // Strategy interface for loading an XML Document.\n", "des": "Contains an abstract XML-based BeanFactory implementation, including a standard \"spring-beans\" XSD."}
{"index": 2456, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package appoptics;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.appoptics.AppOpticsMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"appoptics\") @EnableConfigurationProperties(AppOpticsProperties.class) public class AppOpticsMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to AppOptics.\n@ConfigurationProperties(prefix=\"management.appoptics.metrics.export\") public class AppOpticsProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring AppOptics metrics export.\n", "des": "Support for exporting actuator metrics to AppOptics."}
{"index": 3737, "repo": "lucene-queryparser-9.7.0", "code": "package util;\n\nClass QueryNodeOperation; // Allow joining 2 QueryNode Trees, into one.\nClass StringUtils; // String manipulation routines\nClass UnescapedCharSequence; // CharsSequence with escaped chars information.\n", "des": "Utility classes to used with the Query Parser."}
{"index": 400, "repo": "solr-dataimporthandler-8.11.2", "code": "package config;\n\nClass ConfigNameConstants;\nClass ConfigParseUtil;\nClass DIHConfiguration; // Mapping for data-config.xml\nClass Entity;\nClass EntityField;\nClass EntityField.Builder;\nClass Field;\nClass Field.Builder;\nClass PropertyWriter;\nClass Script;\n", "des": "Utility classes for parsing & modeling DIH configuration."}
{"index": 1293, "repo": "spring-core-6.0.11", "code": "package comparator;\n\npublic class BooleanComparator extends Object implements Comparator<Boolean>, Serializable; // A Comparator for Boolean objects that can sort either true or false first.\npublic class ComparableComparator<T extends Comparable<T>> extends Object implements Comparator<T>; // Comparator that adapts Comparables to the Comparator interface.\npublic abstract class Comparators extends Object; // Convenient entry point with generically typed factory methods for common Spring Comparator variants.\npublic class InstanceComparator<T> extends Object implements Comparator<T>; // Compares objects based on an arbitrary class order.\npublic class NullSafeComparator<T> extends Object implements Comparator<T>; // A Comparator that will safely compare nulls to be lower or higher than other objects.\n", "des": "Useful generic java.util.Comparator implementations, such as an invertible comparator and a compound comparator."}
{"index": 2512, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package server;\n\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.web.server.OnManagementPortCondition.class) public @interface ConditionalOnManagementPort; // @Conditional that matches based on the configuration of the management port.\n@AutoConfiguration @AutoConfigureOrder(2147483647) @EnableConfigurationProperties({WebEndpointProperties.class,ManagementServerProperties.class}) public class ManagementContextAutoConfiguration extends Object; // Auto-configuration for the management context.\npublic enum ManagementPortType extends Enum<ManagementPortType>; // Port types that can be used to control how the management server is started.\n@ConfigurationProperties(prefix=\"management.server\", ignoreUnknownFields=true) public class ManagementServerProperties extends Object; // Properties for the management server (e.g.\npublic abstract class ManagementWebServerFactoryCustomizer<T extends org.springframework.boot.web.server.ConfigurableWebServerFactory> extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<T>, org.springframework.core.Ordered; // WebServerFactoryCustomizer that customizes the WebServerFactory used to create the management context's web server.\n", "des": "Actuator web server support."}
{"index": 700, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package amqp;\n\nClass Amqp; // Factory class for AMQP components.\nClass AmqpAsyncOutboundGatewaySpec;\nClass AmqpBaseInboundChannelAdapterSpec<S extends AmqpBaseInboundChannelAdapterSpec<S>>; // The base MessageProducerSpec implementation for a AmqpInboundChannelAdapter.\nClass AmqpBaseInboundGatewaySpec<S extends AmqpBaseInboundGatewaySpec<S>>; // A base MessagingGatewaySpec implementation for AmqpInboundGateway endpoint options.\nClass AmqpBaseOutboundEndpointSpec<S extends AmqpBaseOutboundEndpointSpec<S,E>,E extends org.springframework.integration.amqp.outbound.AbstractAmqpOutboundEndpoint>; // The base MessageHandlerSpec for AbstractAmqpOutboundEndpoints.\nClass AmqpInboundChannelAdapterSpec; // A MessageProducerSpec for AmqpInboundChannelAdapters.\nClass AmqpInboundGatewaySpec; // An AmqpBaseInboundGatewaySpec implementation for a AmqpInboundGateway.\nClass AmqpMessageChannelSpec<S extends AmqpMessageChannelSpec<S>>; // An AmqpPollableMessageChannelSpec for a message-driven PointToPointSubscribableAmqpChannel.\nClass AmqpOutboundEndpointSpec;\nClass AmqpPollableMessageChannelSpec<S extends AmqpPollableMessageChannelSpec<S>>; // A MessageChannelSpec for a AbstractAmqpChannels.\nClass AmqpPublishSubscribeMessageChannelSpec; // A AmqpMessageChannelSpec for PublishSubscribeAmqpChannels.\n", "des": "Provides AMQP Components support for Spring Integration Java DSL."}
{"index": 3712, "repo": "solr-core-9.3.0", "code": "package jaspell;\n\nClass JaspellLookup;\nClass JaspellLookupFactory; // Factory for JaspellLookup Note: This Suggester is not very RAM efficient.\nClass JaspellTernarySearchTrie;\nClass JaspellTernarySearchTrie.TSTNode; // An inner class of Ternary Search Trie that represents a node in the trie.\n", "des": "Factories for JaSpell based Suggesters"}
{"index": 3393, "repo": "commons-imaging-1.0-alpha3", "code": "package icns;\n\nClass IcnsImageParser;\nClass IcnsImagingParameters; // Icns format parameters.\n", "des": "The ICNS image format."}
{"index": 2094, "repo": "spring-webflux-6.0.11", "code": "package client;\n\npackage client.support; // Classes supporting the org.springframework.web.reactive.function.client package.\npublic enum ClientHttpObservationDocumentation extends Enum<ClientHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation; // Documented KeyValues for the HTTP client observations.\npublic static enum ClientHttpObservationDocumentation.HighCardinalityKeyNames extends Enum<ClientHttpObservationDocumentation.HighCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic static enum ClientHttpObservationDocumentation.LowCardinalityKeyNames extends Enum<ClientHttpObservationDocumentation.LowCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic interface ClientRequest; // Represents a typed, immutable, client-side HTTP request, as executed by the ExchangeFunction.\npublic static interface ClientRequest.Builder; // Defines a builder for a request.\npublic class ClientRequestObservationContext extends io.micrometer.observation.transport.RequestReplySenderContext<ClientRequest.Builder,ClientResponse>; // Context that holds information for metadata collection during the HTTP client exchange observations.\npublic interface ClientRequestObservationConvention extends io.micrometer.observation.ObservationConvention<ClientRequestObservationContext>; // Interface for an ObservationConvention related to HTTP client exchange observations.\npublic interface ClientResponse; // Represents an HTTP response, as returned by WebClient and also ExchangeFunction.\npublic static interface ClientResponse.Builder; // Defines a builder for a response.\npublic static interface ClientResponse.Headers; // Represents the headers of the HTTP response.\npublic class DefaultClientRequestObservationConvention extends Object implements ClientRequestObservationConvention; // Default implementation for a ClientRequestObservationConvention, extracting information from the ClientRequestObservationContext.\n@FunctionalInterface public interface ExchangeFilterFunction; // Represents a function that filters an exchange function.\npublic abstract class ExchangeFilterFunctions extends Object; // Static factory methods providing access to built-in implementations of ExchangeFilterFunction for basic authentication, error handling, etc.\n@Deprecated public static final class ExchangeFilterFunctions.Credentials extends Object;\n@FunctionalInterface public interface ExchangeFunction; // Represents a function that exchanges a request for a (delayed) ClientResponse.\npublic abstract class ExchangeFunctions extends Object; // Static factory methods to create an ExchangeFunction.\n", "des": "Provides a reactive WebClient that builds on top of the org.springframework.http.client.reactive reactive HTTP adapter layer."}
{"index": 2628, "repo": "shiro-web-2.0.0-alpha-2", "code": "package authz;\n\npublic abstract class AuthorizationFilter extends AccessControlFilter; // Superclass for authorization-related filters.\npublic class HostFilter extends AuthorizationFilter; // A Filter that can allow or deny access based on the host that sent the request.\npublic class HttpMethodPermissionFilter extends PermissionsAuthorizationFilter; // A filter that translates an HTTP Request's Method (e.g.\npublic final class IpAddressMatcher extends Object; // Matches a request based on IP Address or subnet mask matching against the remote address.\npublic class IpFilter extends AuthorizationFilter; // A Filter that requires the request to be from within a specific set of IP address ranges and / or not from with a specific (denied) set.\npublic interface IpSource; // Represents a source of information for IP restrictions (see IpFilter)\npublic class PermissionsAuthorizationFilter extends AuthorizationFilter; // Filter that allows access if the current user has the permissions specified by the mapped value, or denies access if the user does not have all of the permissions specified.\npublic class PortFilter extends AuthorizationFilter; // A Filter that requires the request to be on a specific port, and if not, redirects to the same URL on that port.\npublic class RolesAuthorizationFilter extends AuthorizationFilter; // Filter that allows access if the current user has the roles specified by the mapped value, or denies access if the user does not have all of the roles specified.\npublic class SslFilter extends PortFilter; // Filter which requires a request to be over SSL.\n", "des": "Servlet Filter implementations that perform authorization (access control) checks based on the Subject's abilities (for example, role or permission checks)."}
{"index": 2653, "repo": "spring-data-cassandra-4.1.2", "code": "package session;\n\npackage session.init; // Provides extensible support for initializing databases through scripts.\npackage session.lookup; // Provides a strategy for looking up SessionFactory.\npublic class DefaultBridgedReactiveSession extends Object implements ReactiveSession; // Default implementation of a ReactiveSession.\npublic class DefaultReactiveSessionFactory extends Object implements ReactiveSessionFactory; // Default implementation of ReactiveSessionFactory.\npublic class DefaultSessionFactory extends Object implements SessionFactory; // Default SessionFactory implementation.\n", "des": "Provides utility classes for simple CqlSession access and various session implementations."}
{"index": 2897, "repo": "spring-integration-amqp-6.1.2", "code": "package channel;\n\npublic abstract class AbstractAmqpChannel extends org.springframework.integration.channel.AbstractMessageChannel implements org.springframework.amqp.rabbit.connection.ConnectionListener; // The base AbstractMessageChannel implementation for AMQP.\npublic class PointToPointSubscribableAmqpChannel extends AbstractAmqpChannel; // The AbstractSubscribableAmqpChannel implementation for one-to-one subscription over AMQP queue.\npublic class PollableAmqpChannel extends AbstractAmqpChannel implements org.springframework.messaging.PollableChannel, org.springframework.integration.channel.ExecutorChannelInterceptorAware; // A PollableChannel implementation that is backed by an AMQP Queue.\npublic class PublishSubscribeAmqpChannel extends AbstractAmqpChannel implements org.springframework.integration.channel.BroadcastCapableChannel; // The AbstractSubscribableAmqpChannel extension for pub-sub semantics based on the FanoutExchange.\n", "des": "Provides classes related to AMQP-backed channels."}
{"index": 1982, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package init;\n\npublic class OnDatabaseInitializationCondition extends SpringBootCondition; // Condition that checks if the database initialization of a particular component should be considered.\n@ImportRuntimeHints(org.springframework.boot.autoconfigure.sql.init.SqlInitializationScriptsRuntimeHints.class) public class SqlDataSourceScriptDatabaseInitializer extends org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer; // DataSourceScriptDatabaseInitializer for the primary SQL database.\n@AutoConfiguration @EnableConfigurationProperties(SqlInitializationProperties.class) @Import({org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer.class,org.springframework.boot.autoconfigure.sql.init.R2dbcInitializationConfiguration.class,org.springframework.boot.autoconfigure.sql.init.DataSourceInitializationConfiguration.class}) @ConditionalOnProperty(prefix=\"spring.sql.init\", name=\"enabled\", matchIfMissing=true) @Conditional(org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration.SqlInitializationModeCondition.class) public class SqlInitializationAutoConfiguration extends Object; // Auto-configuration for initializing an SQL database.\n@ConfigurationProperties(\"spring.sql.init\") public class SqlInitializationProperties extends Object; // Configuration properties for initializing an SQL database.\n@ImportRuntimeHints(org.springframework.boot.autoconfigure.sql.init.SqlInitializationScriptsRuntimeHints.class) public class SqlR2dbcScriptDatabaseInitializer extends org.springframework.boot.r2dbc.init.R2dbcScriptDatabaseInitializer; // R2dbcScriptDatabaseInitializer for the primary SQL database.\n", "des": "Auto-configuration for basic script-based initialization of an SQL database."}
{"index": 1018, "repo": "hive-common-4.0.0-alpha-2", "code": "package datetime;\n\nClass HiveSqlDateTimeFormatter; // Formatter using SQL:2016 datetime patterns.\nClass HiveSqlDateTimeFormatter.Token; // Token representation.\nEnum HiveSqlDateTimeFormatter.TokenType; // Represents broad categories of tokens.\n", "des": "Deals with formatting and parsing of datetime objects."}
{"index": 646, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package exception;\n\nClass FederationStateStoreException; // Exception thrown by the FederationStateStore.\nClass FederationStateStoreInvalidInputException; // Exception thrown by the FederationMembershipStateStoreInputValidator, FederationApplicationHomeSubClusterStoreInputValidator, FederationPolicyStoreInputValidator if the input is invalid.\nClass FederationStateStoreRetriableException; // Exception thrown by the FederationStateStore, if it is a retriable exception.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 3488, "repo": "poi-5.2.3", "code": "package ddf;\n\nInterface EscherRecordFactory; // The escher record factory interface allows for the creation of escher records from a pointer into a data array.\nInterface EscherSerializationListener; // Interface for listening to escher serialization events.\nClass AbstractEscherOptRecord; // Common abstract class for EscherOptRecord and EscherTertiaryOptRecord\nClass DefaultEscherRecordFactory; // Generates escher records when provided the byte array containing those records.\nClass EscherArrayProperty; // Escher array properties are the most weird construction ever invented with all sorts of special cases.\nClass EscherBitmapBlip;\nClass EscherBlipRecord;\nClass EscherBoolProperty; // Represents a boolean property.\nClass EscherBSERecord; // The BSE record is related closely to the EscherBlipRecord and stores extra information about the blip.\nClass EscherChildAnchorRecord; // The escher child anchor record is used to specify the position of a shape under an existing group.\nClass EscherClientAnchorRecord; // The escher client anchor specifies which rows and cells the shape is bound to as well as the offsets within those cells.\nClass EscherClientDataRecord; // The EscherClientDataRecord is used to store client specific data about the position of a shape within a container.\nClass EscherColorRef; // An OfficeArtCOLORREF structure entry which also handles color extension opid data\nClass EscherComplexProperty; // A complex property differs from a simple property in that the data can not fit inside a 32 bit integer.\nClass EscherContainerRecord; // Escher container records store other escher records as children.\nClass EscherDggRecord; // This record defines the drawing groups used for a particular sheet.\nClass EscherDggRecord.FileIdCluster;\nClass EscherDgRecord; // This record simply holds the number of shapes in the drawing group and the last shape id used for this drawing group.\nClass EscherDump; // Used to dump the contents of escher records to a PrintStream.\nClass EscherMetafileBlip;\nClass EscherOptRecord; // The opt record is used to store property values for a shape.\nClass EscherProperty; // This is the abstract base class for all escher properties.\n", "des": "This package contains classes for decoding the Microsoft Office Drawing format otherwise known as escher henceforth known in POI as the Dreadful Drawing Format."}
{"index": 2062, "repo": "slf4j-ext-2.0.7", "code": "package profiler;\n\npublic enum DurationUnit extends Enum<DurationUnit>; // An enum of supported time units.\npublic class Profiler extends Object implements TimeInstrument; // A poor man's profiler to measure the time elapsed performing some lengthy task.\npublic class ProfilerRegistry extends Object; // A minimalist registry of profilers.\npublic class SpacePadder extends Object;\npublic class StopWatch extends Object implements TimeInstrument; // A very basic TimeInstrument which can be started and stopped once and only once.\npublic interface TimeInstrument; // This interface sets the methods that must be implemented by Profiler and StopWatch classes.\n", "des": "Poor man's profiler API"}
{"index": 1243, "repo": "spring-hateoas-2.1.2", "code": "package reactive;\n\npublic interface ReactiveRepresentationModelAssembler<T,D extends RepresentationModel<?>>; // Reactive variant of RepresentationModelAssembler combined with SimpleRepresentationModelAssembler.\npublic interface SimpleReactiveRepresentationModelAssembler<T> extends ReactiveRepresentationModelAssembler<T,EntityModel<T>>; // Reactive variant of RepresentationModelAssembler combined with SimpleRepresentationModelAssembler.\npublic class WebFluxLinkBuilder extends TemplateVariableAwareLinkBuilderSupport<WebFluxLinkBuilder>; // Utility for building reactive Links.\npublic static class WebFluxLinkBuilder.WebFluxBuilder extends Object;\npublic static class WebFluxLinkBuilder.WebFluxLink extends Object; // Intermediate representation of a Link within a reactive pipeline to easily add Affordances from method invocations.\n", "des": "Spring WebFlux components to build Links and assemble RepresentationModel types."}
{"index": 317, "repo": "kafka-clients-3.5.0", "code": "package producer;\n\nInterface Callback; // A callback interface that the user can implement to allow code to execute when the request is complete.\nInterface Partitioner; // Partitioner Interface\nInterface Producer<K,V>; // The interface for the KafkaProducer\nInterface ProducerInterceptor<K,V>; // A plugin interface that allows you to intercept (and possibly mutate) the records received by the producer before they are published to the Kafka cluster.\nClass KafkaProducer<K,V>; // A Kafka client that publishes records to the Kafka cluster.\nClass MockProducer<K,V>; // A mock of the producer interface you can use for testing code that uses Kafka.\nClass ProducerConfig; // Configuration for the Kafka Producer.\nClass ProducerRecord<K,V>; // A key/value pair to be sent to Kafka.\nClass RecordMetadata; // The metadata for a record that has been acknowledged by the server\nClass RoundRobinPartitioner; // The \"Round-Robin\" partitioner This partitioning strategy can be used when user wants to distribute the writes to all partitions equally.\nClass UniformStickyPartitioner; // Since 3.3.0, in order to use default partitioning logic remove the partitioner.class configuration setting and set partitioner.ignore.keys=true.\nClass BufferExhaustedException; // This exception is thrown if the producer cannot allocate memory for a record within max.block.ms due to the buffer being too full.\n", "des": "Provides a Kafka client for producing records to topics and/or partitions in a Kafka cluster."}
{"index": 1735, "repo": "spring-jdbc-6.0.11", "code": "package incrementer;\n\npublic abstract class AbstractColumnMaxValueIncrementer extends AbstractDataFieldMaxValueIncrementer; // Abstract base class for DataFieldMaxValueIncrementer implementations that use a column in a custom sequence table.\npublic abstract class AbstractDataFieldMaxValueIncrementer extends Object implements DataFieldMaxValueIncrementer, org.springframework.beans.factory.InitializingBean; // Base implementation of DataFieldMaxValueIncrementer that delegates to a single AbstractDataFieldMaxValueIncrementer.getNextKey() template method that returns a long.\npublic abstract class AbstractIdentityColumnMaxValueIncrementer extends AbstractColumnMaxValueIncrementer; // Abstract base class for DataFieldMaxValueIncrementer implementations which are based on identity columns in a sequence-like table.\npublic abstract class AbstractSequenceMaxValueIncrementer extends AbstractDataFieldMaxValueIncrementer; // Abstract base class for DataFieldMaxValueIncrementer implementations that use a database sequence.\npublic interface DataFieldMaxValueIncrementer; // Interface that defines contract of incrementing any data store field's maximum value.\npublic class Db2LuwMaxValueIncrementer extends AbstractSequenceMaxValueIncrementer; // DataFieldMaxValueIncrementer that retrieves the next value of a given sequence on DB2 LUW (for Linux, Unix and Windows).\npublic class Db2MainframeMaxValueIncrementer extends AbstractSequenceMaxValueIncrementer; // DataFieldMaxValueIncrementer that retrieves the next value of a given sequence on DB2 for the mainframe (z/OS, DB2/390, DB2/400).\npublic class DerbyMaxValueIncrementer extends AbstractIdentityColumnMaxValueIncrementer; // DataFieldMaxValueIncrementer that increments the maximum value of a given Derby table with the equivalent of an auto-increment column.\npublic class H2SequenceMaxValueIncrementer extends AbstractSequenceMaxValueIncrementer; // DataFieldMaxValueIncrementer that retrieves the next value of a given H2 sequence.\npublic class HanaSequenceMaxValueIncrementer extends AbstractSequenceMaxValueIncrementer; // DataFieldMaxValueIncrementer that retrieves the next value of a given SAP HANA sequence.\npublic class HsqlMaxValueIncrementer extends AbstractIdentityColumnMaxValueIncrementer; // DataFieldMaxValueIncrementer that increments the maximum value of a given HSQL table with the equivalent of an auto-increment column.\n", "des": "Provides a support framework for incrementing database table values via sequences, with implementations for various databases."}
{"index": 1245, "repo": "spring-integration-smb-6.1.2", "code": "package config;\n\npublic class SmbInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileInboundChannelAdapterParser; // Parser for the SMB 'inbound-channel-adapter' element.\npublic class SmbNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Provides namespace support for using SMB.\npublic class SmbOutboundChannelAdapterParser extends org.springframework.integration.file.config.RemoteFileOutboundChannelAdapterParser; // The parser for <Int-smb:outbound-channel-adapter>.\npublic class SmbOutboundGatewayParser extends org.springframework.integration.file.config.AbstractRemoteFileOutboundGatewayParser; // Parser for the SMB 'outbound-gateway' element.\npublic class SmbStreamingInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileStreamingInboundChannelAdapterParser; // Parser for the SMB 'inbound-streaming-channel-adapter' element.\n", "des": "SMB-specific file list filter classes."}
{"index": 2836, "repo": "spring-data-r2dbc-3.1.2", "code": "package config;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(org.springframework.data.r2dbc.repository.config.R2dbcRepositoriesRegistrar.class) public @interface EnableR2dbcRepositories; // Annotation to activate reactive relational repositories using R2DBC.\npublic class R2dbcRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport; // Reactive RepositoryConfigurationExtension for R2DBC.\n", "des": "Support infrastructure for the configuration of R2DBC-specific repositories."}
{"index": 2902, "repo": "spring-integration-amqp-6.1.2", "code": "package support;\n\npublic interface AmqpHeaderMapper extends org.springframework.integration.mapping.RequestReplyHeaderMapper<org.springframework.amqp.core.MessageProperties>; // A convenience interface that extends RequestReplyHeaderMapper, parameterized with MessageProperties.\npublic class AmqpMessageHeaderErrorMessageStrategy extends Object implements org.springframework.integration.support.ErrorMessageStrategy; // An ErrorMessageStrategy extension that adds the raw AMQP message as a header to the ErrorMessage.\npublic class BoundRabbitChannelAdvice extends Object implements org.springframework.integration.handler.advice.HandleMessageAdvice; // An advice that causes all downstream RabbitOperations operations to be executed on the same channel, as long as there are no thread handoffs, since the channel is bound to the thread.\npublic class DefaultAmqpHeaderMapper extends org.springframework.integration.mapping.AbstractHeaderMapper<org.springframework.amqp.core.MessageProperties> implements AmqpHeaderMapper; // Default implementation of AmqpHeaderMapper.\npublic final class EndpointUtils extends Object; // Utility methods for messaging endpoints.\npublic class ManualAckListenerExecutionFailedException extends org.springframework.amqp.rabbit.support.ListenerExecutionFailedException; // A ListenerExecutionFailedException enhanced with the channel and delivery tag.\npublic final class MappingUtils extends Object; // Utility methods used during message mapping.\npublic class NackedAmqpMessageException extends org.springframework.messaging.MessagingException; // An exception representing a negatively acknowledged message from a publisher confirm.\npublic class ReturnedAmqpMessageException extends org.springframework.messaging.MessagingException; // A MessagingException for a returned message.\n", "des": "Provides AMQP support classes."}
{"index": 1871, "repo": "shiro-core-2.0.0-alpha-2", "code": "package aop;\n\npublic abstract class AnnotationHandler extends Object; // Base support class for implementations that reads and processes JSR-175 annotations.\npublic abstract class AnnotationMethodInterceptor extends MethodInterceptorSupport; // MethodInterceptor that inspects a specific annotation on the method invocation before continuing its execution.\npublic interface AnnotationResolver; // Defines an AOP-framework-independent way of determining if an Annotation exists on a Method.\npublic class DefaultAnnotationResolver extends Object implements AnnotationResolver; // Default AnnotationResolver implementation that merely inspects the MethodInvocation's target method, and returns targetMethod.getAnnotation(class).\npublic interface MethodInterceptor; // A MethodInterceptor intercepts a MethodInvocation to perform before or after logic (aka 'advice').\npublic abstract class MethodInterceptorSupport extends Object implements MethodInterceptor; // This class is an abstraction of AOP method interceptor behavior specific to Shiro that leaves AOP implementation specifics to be handled by subclass implementations.\npublic interface MethodInvocation; // 3rd-party API independent representation of a method invocation.\n", "des": "Components used to support the framework's AOP/interception support classes."}
{"index": 1712, "repo": "spring-boot-test-3.1.1", "code": "package mockito;\n\n@Target({TYPE,FIELD}) @Retention(RUNTIME) @Documented @Repeatable(MockBeans.class) public @interface MockBean; // Annotation that can be used to add mocks to a Spring ApplicationContext.\n@Retention(RUNTIME) @Target(TYPE) @Documented public @interface MockBeans; // Container annotation that aggregates several @MockBean annotations.\npublic class MockitoPostProcessor extends Object implements org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.core.Ordered; // A BeanFactoryPostProcessor used to register and inject @MockBeans with the ApplicationContext.\npublic class MockitoTestExecutionListener extends org.springframework.test.context.support.AbstractTestExecutionListener; // TestExecutionListener to enable @MockBean and @SpyBean support.\npublic enum MockReset extends Enum<MockReset>; // Reset strategy used on a mock bean.\npublic class ResetMocksTestExecutionListener extends org.springframework.test.context.support.AbstractTestExecutionListener; // TestExecutionListener to reset any mock beans that have been marked with a MockReset.\npublic class SpringBootMockResolver extends Object implements org.mockito.plugins.MockResolver; // A MockResolver for testing Spring Boot applications with Mockito.\n@Target({TYPE,FIELD}) @Retention(RUNTIME) @Documented @Repeatable(SpyBeans.class) public @interface SpyBean; // Annotation that can be used to apply Mockito spies to a Spring ApplicationContext.\n@Retention(RUNTIME) @Target(TYPE) @Documented public @interface SpyBeans; // Container annotation that aggregates several @SpyBean annotations.\n", "des": "Mockito integration for Spring Boot tests."}
{"index": 1771, "repo": "spring-data-mongodb-4.1.2", "code": "package config;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(org.springframework.data.mongodb.repository.config.MongoRepositoriesRegistrar.class) public @interface EnableMongoRepositories; // Annotation to activate MongoDB repositories.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoriesRegistrar.class) public @interface EnableReactiveMongoRepositories; // Annotation to activate reactive MongoDB repositories.\npublic class MongoRepositoryConfigNamespaceHandler extends MongoNamespaceHandler; // NamespaceHandler to register repository configuration.\npublic class MongoRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport; // RepositoryConfigurationExtension for MongoDB.\npublic class ReactiveMongoRepositoryConfigurationExtension extends MongoRepositoryConfigurationExtension; // Reactive RepositoryConfigurationExtension for MongoDB.\n", "des": "Support infrastructure for the configuration of MongoDB specific repositories."}
{"index": 1371, "repo": "spring-boot-actuator-3.1.1", "code": "package listener;\n\npublic abstract class AbstractAuditListener extends Object implements org.springframework.context.ApplicationListener<AuditApplicationEvent>; // Abstract ApplicationListener to handle AuditApplicationEvents.\npublic class AuditApplicationEvent extends org.springframework.context.ApplicationEvent; // Spring ApplicationEvent to encapsulate AuditEvents.\npublic class AuditListener extends AbstractAuditListener; // The default AbstractAuditListener implementation.\n", "des": "Actuator auditing listeners."}
{"index": 2388, "repo": "spring-batch-core-5.0.2", "code": "package job;\n\npackage job.builder; // Job and flow level builders for java based configuration of batch jobs\npackage job.flow; // Flow related constructs including Flow interface, executors, and related exceptions\npublic abstract class AbstractJob extends Object implements Job, StepLocator, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // Abstract implementation of the Job interface.\npublic class CompositeJobParametersValidator extends Object implements JobParametersValidator, org.springframework.beans.factory.InitializingBean; // Composite JobParametersValidator that passes the job parameters through a sequence of injected JobParametersValidators\npublic class DefaultJobParametersValidator extends Object implements JobParametersValidator, org.springframework.beans.factory.InitializingBean; // Default implementation of JobParametersValidator.\npublic class SimpleJob extends AbstractJob; // Simple implementation of Job interface providing the ability to run a JobExecution.\npublic class SimpleStepHandler extends Object implements StepHandler, org.springframework.beans.factory.InitializingBean; // Implementation of StepHandler that manages repository and restart concerns.\npublic interface StepHandler; // Strategy interface for handling a Step on behalf of a Job.\n", "des": "Specific implementations of job concerns."}
{"index": 3454, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface NativeQueryInterpreter; // Service contract for dealing with native queries.\nInterface ParameterParser.Recognizer; // Maybe better named a Journaler.\nInterface QueryPlanCache.QueryPlanCreator;\nClass AbstractParameterDescriptor; // NOTE: Consider this contract (and its sub-contracts) as incubating as we transition to 6.0 and SQM\nClass EntityGraphQueryHint; // Encapsulates a JPA EntityGraph provided through a JPQL query hint.\nClass FilterQueryPlan; // Extends an HQLQueryPlan to maintain a reference to the collection-role name being filtered.\nClass HQLQueryPlan; // Defines a query execution plan for an HQL query (or filter).\nClass NamedParameterDescriptor; // Descriptor regarding a named parameter.\nClass NativeQueryInterpreterInitiator;\nClass NativeSQLQueryPlan; // Defines a query execution plan for a native-SQL query.\nClass OrdinalParameterDescriptor; // Descriptor regarding an ordinal parameter.\nClass ParameterParser; // The single available method ParameterParser.parse(java.lang.String, org.hibernate.engine.query.spi.ParameterParser.Recognizer) is responsible for parsing a query string and recognizing tokens in relation to parameters (either named, JPA-style, or ordinal) and providing callbacks about such recognitions.\nClass ParamLocationRecognizer; // Implements a parameter parser recognizer specifically for the purpose of journaling parameter locations.\nClass ParamLocationRecognizer.InFlightJpaOrdinalParameterState; // Internal in-flight representation of a recognized named parameter\nClass ParamLocationRecognizer.InFlightNamedParameterState; // Internal in-flight representation of a recognized named parameter\nClass ParamLocationRecognizer.InFlightOrdinalParameterState; // Internal in-flight representation of a recognized named parameter\nClass QueryPlanCache; // Acts as a cache for compiled query plans, as well as query-parameter metadata.\nClass ReturnMetadata; // Metadata about the query return(s).\n", "des": "Defines support for query plans and stored metadata about queries"}
{"index": 2542, "repo": "spring-security-core-6.1.2", "code": "package jackson2;\n\npublic class CoreJackson2Module extends com.fasterxml.jackson.databind.module.SimpleModule; // Jackson module for spring-security-core.\npublic final class SecurityJackson2Modules extends Object; // This utility class will find all the SecurityModules in classpath.\npublic abstract class SimpleGrantedAuthorityMixin extends Object; // Jackson Mixin class helps in serialize/deserialize SimpleGrantedAuthority.\n", "des": "Mix-in classes to add Jackson serialization support."}
{"index": 2838, "repo": "spring-data-r2dbc-3.1.2", "code": "package support;\n\npublic class R2dbcRepositoryFactory extends ReactiveRepositoryFactorySupport; // Factory to create R2dbcRepository instances.\npublic class R2dbcRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends RepositoryFactoryBeanSupport<T,S,ID> implements ApplicationContextAware; // FactoryBean to create R2dbcRepository instances.\n@Transactional(readOnly=true) public class SimpleR2dbcRepository<T,ID> extends Object implements R2dbcRepository<T,ID>; // Simple ReactiveSortingRepository implementation using R2DBC through DatabaseClient.\n", "des": "Support infrastructure for query derivation of R2DBC-specific repositories."}
{"index": 3032, "repo": "spring-web-6.0.11", "code": "package reactive;\n\npublic interface CorsConfigurationSource; // Interface to be implemented by classes (usually HTTP request handlers) that provides a CorsConfiguration instance based on the provided reactive request.\npublic interface CorsProcessor; // A strategy to apply CORS validation checks and updates to a ServerWebExchange, either rejecting through the response or adding CORS related headers, based on a pre-selected CorsConfiguration.\npublic abstract class CorsUtils extends Object; // Utility class for CORS reactive request handling based on the CORS W3C recommendation.\npublic class CorsWebFilter extends Object implements WebFilter; // WebFilter that handles CORS preflight requests and intercepts CORS simple and actual requests thanks to a CorsProcessor implementation (DefaultCorsProcessor by default) in order to add the relevant CORS response headers (like Access-Control-Allow-Origin) using the provided CorsConfigurationSource (for example an UrlBasedCorsConfigurationSource instance.\npublic class DefaultCorsProcessor extends Object implements CorsProcessor; // The default implementation of CorsProcessor, as defined by the CORS W3C recommendation.\npublic interface PreFlightRequestHandler; // Handler for CORS pre-flight requests.\npublic class PreFlightRequestWebFilter extends Object implements WebFilter; // WebFilter that handles pre-flight requests through a PreFlightRequestHandler and bypasses the rest of the chain.\npublic class UrlBasedCorsConfigurationSource extends Object implements CorsConfigurationSource; // CorsConfigurationSource that uses URL patterns to select the CorsConfiguration for a request.\n", "des": "Reactive support for CORS (Cross-Origin Resource Sharing), based on a common CorsProcessor strategy."}
{"index": 2209, "repo": "spring-data-commons-3.1.2", "code": "package context;\n\npublic abstract class AbstractMappingContext<E extends MutablePersistentEntity<?,P>,P extends PersistentProperty<P>> extends Object implements MappingContext<E,P>, ApplicationEventPublisherAware, ApplicationContextAware, InitializingBean; // Base class to build mapping metadata and thus create instances of PersistentEntity and PersistentProperty.\npublic class InvalidPersistentPropertyPath extends MappingException; // Exception to indicate a source path couldn't be resolved into a PersistentPropertyPath completely.\npublic interface MappingContext<E extends PersistentEntity<?,P>,P extends PersistentProperty<P>>; // This interface defines the overall context including all known PersistentEntity instances and methods to obtain instances on demand. it is used internally to establish associations between entities and also at runtime to obtain entities by name.\npublic class MappingContextEvent<E extends PersistentEntity<?,P>,P extends PersistentProperty<P>> extends ApplicationEvent; // Base implementation of an ApplicationEvent refering to a PersistentEntity.\npublic class PersistentEntities extends Object implements Streamable<PersistentEntity<?,? extends PersistentProperty<?>>>; // Value object to access PersistentEntity instances managed by MappingContexts.\n", "des": "Mapping context API and implementation base classes."}
{"index": 2020, "repo": "spring-boot-devtools-3.1.1", "code": "package client;\n\npublic class HttpTunnelConnection extends Object implements TunnelConnection; // TunnelConnection implementation that uses HTTP to transfer data.\npublic class TunnelClient extends Object implements org.springframework.beans.factory.SmartInitializingSingleton; // The client side component of a socket tunnel.\npublic interface TunnelClientListener; // Listener that can be used to receive TunnelClient events.\n@FunctionalInterface public interface TunnelConnection; // Interface used to manage socket tunnel connections.\n", "des": "Client side TCP tunnel support."}
{"index": 2170, "repo": "wicket-core-10.0.0-M1", "code": "package validator;\n\npublic abstract class AbstractRangeValidator<R extends Comparable<? super R> & Serializable,V extends Serializable> extends Behavior implements IValidator<V>; // Base class for validators that check if a given value falls within [min,max] range.\npublic static enum AbstractRangeValidator.Mode extends Enum<AbstractRangeValidator.Mode>; // Validator mode\npublic class CreditCardValidator extends Object implements IValidator<String>; // Checks if a credit card number is valid.\npublic static enum CreditCardValidator.CreditCard extends Enum<CreditCardValidator.CreditCard>;\npublic class DateValidator extends RangeValidator<Date>; // Validator for checking if a given date falls within [min,max] range.\npublic class EmailAddressValidator extends PatternValidator; // Validator for checking the form/pattern of email addresses.\npublic class PatternValidator extends Object implements IValidator<String>; // Validates an IValidatable by matching the value against a regular expression pattern.\npublic class RangeValidator<Z extends Comparable<? super Z> & Serializable> extends AbstractRangeValidator<Z,Z>; // Validator for checking if a given value falls within [min,max] range.\npublic class StringValidator extends AbstractRangeValidator<Integer,String>; // Validator for checking if length of a string falls within [min,max] range.\npublic class UrlValidator extends Object implements IValidator<String>; // Validator for checking URLs.\n", "des": "This package provides an implementation of Wicket's validation support."}
{"index": 3618, "repo": "solr-test-framework-9.3.0", "code": "package cloud;\n\nClass AbstractBasicDistributedZk2TestBase; // This test simply does a bunch of basic things in solrcloud mode and asserts things work as expected.\nClass AbstractBasicDistributedZkTestBase; // This test simply does a bunch of basic things in solrcloud mode and asserts things work as expected.\nClass AbstractChaosMonkeyNothingIsSafeTestBase;\nClass AbstractChaosMonkeySafeLeaderTestBase;\nClass AbstractDigestZkACLAndCredentialsProvidersTestBase;\nClass AbstractDigestZkACLAndCredentialsProvidersTestBase.AllAndReadonlyCredentialZkCredentialsInjector;\nClass AbstractDigestZkACLAndCredentialsProvidersTestBase.AllCredentialZkCredentialsInjector;\nClass AbstractDigestZkACLAndCredentialsProvidersTestBase.ConnectWithReadonlyCredsInjector;\nClass AbstractDigestZkACLAndCredentialsProvidersTestBase.NoCredentialZkCredentialsInjector;\nClass AbstractDigestZkACLAndCredentialsProvidersTestBase.WrongAllCredentialZkCredentialsInjector;\nClass AbstractDistribZkTestBase;\nClass AbstractFullDistribZkTestBase; // TODO: we should still test this works as a custom update chain as well as what we test now - the default update chain\nClass AbstractFullDistribZkTestBase.CloudJettyRunner;\nClass AbstractFullDistribZkTestBase.CloudSolrServerClient;\nClass AbstractMoveReplicaTestBase;\nClass AbstractRecoveryZkTestBase;\nClass AbstractRestartWhileUpdatingTestBase;\nClass AbstractSyncSliceTestBase; // Test sync phase that occurs when Leader goes down and a new Leader is elected.\nClass AbstractTlogReplayBufferedWhileIndexingTestBase;\nClass AbstractUnloadDistributedZkTestBase; // This test simply does a bunch of basic things in solrcloud mode and asserts things work as expected.\nClass AbstractZkTestCase; // Base test class for ZooKeeper tests.\nClass ChaosMonkey; // The monkey can stop random or specific jetties used with SolrCloud.\nClass CloudInspectUtil;\nClass ConfigRequest; // A class for making a request to the config handler.\nClass IpTables; // To use, tests must be able to run iptables, eg sudo chmod u+s iptables\nClass MiniSolrCloudCluster; // \"Mini\" SolrCloud cluster to be used for testing\n", "des": "Base classes and utilities for creating and testing Solr Cloud clusters."}
{"index": 2685, "repo": "spring-data-jpa-3.1.2", "code": "package repository;\n\npackage repository.cdi; // CDI support for Spring Data JPA Repositories.\npackage repository.config; // Classes for JPA namespace configuration.\npackage repository.query; // Query implementation to execute queries against JPA.\npackage repository.support; // JPA repository implementations.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface EntityGraph; // Annotation to configure the JPA 2.1 EntityGraphs that should be used on repository methods.\npublic static enum EntityGraph.EntityGraphType extends Enum<EntityGraph.EntityGraphType>; // Enum for JPA 2.1 EntityGraph types.\npublic interface JpaContext; // Interface for components to provide useful information about the current JPA setup within the current ApplicationContext.\n@NoRepositoryBean public interface JpaRepository<T,ID> extends ListCrudRepository<T,ID>, ListPagingAndSortingRepository<T,ID>, QueryByExampleExecutor<T>; // JPA specific extension of Repository.\npublic interface JpaSpecificationExecutor<T>; // Interface to allow execution of Specifications based on the JPA criteria API.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface Lock; // Annotation used to specify the LockModeType to be used when executing the query.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Meta; // Annotation to assign metadata to repository operations.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Modifying; // Indicates a query method should be considered as modifying query as that changes the way it needs to be executed.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Query; // Annotation to declare finder queries directly on repository methods.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface QueryHints; // Wrapper annotation to allow QueryHint annotations to be bound to methods.\n@FunctionalInterface public interface QueryRewriter; // Callback to rewrite a query and apply sorting and pagination settings that cannot be applied based on a regularly detectable scheme.\n", "des": "Interfaces and annotations for JPA specific repositories."}
{"index": 2535, "repo": "spring-security-core-6.1.2", "code": "package context;\n\npublic interface DeferredSecurityContext extends Supplier<SecurityContext>; // An interface that allows delayed access to a SecurityContext that may be generated.\npublic final class ListeningSecurityContextHolderStrategy extends Object implements SecurityContextHolderStrategy; // An API for notifying when the SecurityContext changes.\npublic final class ObservationSecurityContextChangedListener extends Object implements SecurityContextChangedListener; // A SecurityContextChangedListener that adds events to an existing Observation If no Observation is present when an event is fired, then the event is unrecorded.\npublic final class ReactiveSecurityContextHolder extends Object; // Allows getting and setting the Spring SecurityContext into a Context.\npublic interface SecurityContext extends Serializable; // Interface defining the minimum security information associated with the current thread of execution.\npublic class SecurityContextChangedEvent extends org.springframework.context.ApplicationEvent; // An event that represents a change in SecurityContext\n@FunctionalInterface public interface SecurityContextChangedListener; // A listener for SecurityContextChangedEvents\npublic class SecurityContextHolder extends Object; // Associates a given SecurityContext with the current execution thread.\npublic interface SecurityContextHolderStrategy; // A strategy for storing security context information against a thread.\npublic class SecurityContextImpl extends Object implements SecurityContext; // Base implementation of SecurityContext.\n@Transient public class TransientSecurityContext extends SecurityContextImpl; // A SecurityContext that is annotated with @Transient and thus should never be stored across requests.\n", "des": "Classes related to the establishment of a security context for the duration of a request (such as an HTTP or RMI invocation)."}
{"index": 2246, "repo": "spring-data-keyvalue-3.1.2", "code": "package query;\n\npublic class KeyValueQuery<T> extends Object;\n", "des": "Key/value specific query and abstractions."}
{"index": 2009, "repo": "spring-boot-devtools-3.1.1", "code": "package env;\n\npublic class DevToolsHomePropertiesPostProcessor extends Object implements org.springframework.boot.env.EnvironmentPostProcessor; // EnvironmentPostProcessor to add devtools properties from the user's home directory.\n@Order(2147483647) public class DevToolsPropertyDefaultsPostProcessor extends Object implements org.springframework.boot.env.EnvironmentPostProcessor; // EnvironmentPostProcessor to add properties that make sense when working at development time.\n", "des": "DevTools classes relating to Spring Framework's Environment."}
{"index": 1210, "repo": "commons-math3-3.6.1", "code": "package summary;\n\nClass Product; // Returns the product of the available values.\nClass Sum; // Returns the sum of the available values.\nClass SumOfLogs; // Returns the sum of the natural logs for this collection of values.\nClass SumOfSquares; // Returns the sum of the squares of the available values.\n", "des": "Other summary statistics."}
{"index": 856, "repo": "calcite-core-1.34.0", "code": "package impl;\n\nClass AbstractSchema; // Abstract implementation of Schema.\nClass AbstractSchema.Factory; // Schema factory that creates an AbstractSchema.\nClass AbstractTable; // Abstract base class for implementing Table.\nClass AbstractTableQueryable<T>; // Abstract implementation of Queryable for QueryableTable.\nClass AggregateFunctionImpl; // Implementation of AggregateFunction via user-defined class.\nClass DelegatingSchema; // Implementation of Schema that delegates to an underlying schema.\nClass ListTransientTable; // TransientTable backed by a Java list.\nClass LongSchemaVersion; // Implementation of SchemaVersion that uses a long value as representation.\nClass MaterializedViewTable; // Table that is a materialized view.\nClass MaterializedViewTable.MaterializedViewTableMacro; // Table function that returns the table that materializes a view.\nClass ModifiableViewTable; // Extension to ViewTable that is modifiable.\nClass ReflectiveFunctionBase; // Implementation of a function that is based on a method.\nClass ReflectiveFunctionBase.ParameterListBuilder; // Helps build lists of FunctionParameter.\nClass ScalarFunctionImpl; // Implementation of ScalarFunction.\nClass StarTable; // Virtual table that is composed of two or more tables joined together.\nClass StarTable.StarTableScan; // Relational expression that scans a StarTable.\nClass TableFunctionImpl; // Implementation of TableFunction based on a method.\nClass TableMacroImpl; // Implementation of TableMacro based on a method.\nClass ViewTable; // Table whose contents are defined using an SQL statement.\nClass ViewTableMacro; // Table function that implements a view.\n", "des": "Utilities to help implement Calcite's SPIs."}
{"index": 1676, "repo": "spring-oxm-6.0.11", "code": "package oxm;\n\npackage oxm.config; // Provides an namespace handler for the Spring Object/XML namespace.\npackage oxm.jaxb; // Package providing integration of JAXB with Spring's O/X Mapping support.\npackage oxm.mime; // Contains (un)marshallers optimized to store binary data in MIME attachments.\npackage oxm.support; // Provides generic support classes for using Spring's O/X Mapping integration within various scenario's.\npackage oxm.xstream; // Package providing integration of XStream with Spring's O/X Mapping support.\npublic interface GenericMarshaller extends Marshaller; // Subinterface of Marshaller that has support for generics.\npublic interface GenericUnmarshaller extends Unmarshaller; // Subinterface of Unmarshaller that has support for generics.\npublic interface Marshaller; // Defines the contract for Object XML Mapping Marshallers.\npublic abstract class MarshallingException extends XmlMappingException; // Base class for exception thrown when a marshalling or unmarshalling error occurs.\npublic class MarshallingFailureException extends MarshallingException; // Exception thrown on marshalling failure.\npublic class UncategorizedMappingException extends XmlMappingException; // Exception that indicates that the cause cannot be distinguished further.\npublic interface Unmarshaller; // Defines the contract for Object XML Mapping unmarshallers.\npublic class UnmarshallingFailureException extends MarshallingException; // Exception thrown on unmarshalling failure.\npublic class ValidationFailureException extends XmlMappingException; // Exception thrown on marshalling validation failure.\npublic abstract class XmlMappingException extends org.springframework.core.NestedRuntimeException; // Root of the hierarchy of Object XML Mapping exceptions.\n", "des": "Root package for Spring's O/X Mapping integration classes."}
{"index": 2155, "repo": "wicket-core-10.0.0-M1", "code": "package panel;\n\npublic abstract class AbstractMarkupSourcingStrategy extends Object implements IMarkupSourcingStrategy; // Implements boilerplate as needed by many markup sourcing strategies.\npublic abstract class AssociatedMarkupSourcingStrategy extends AbstractMarkupSourcingStrategy; // Boilerplate for a markup sourcing strategy which retrieves the markup from associated markup files.\npublic class BorderMarkupSourcingStrategy extends AssociatedMarkupSourcingStrategy; // The Border component's markup sourcing strategy\npublic class ComponentFeedbackPanel extends FeedbackPanel; // Convenience feedback panel that filters the feedback messages based on the component given in the constructor.\npublic final class DefaultMarkupSourcingStrategy extends AbstractMarkupSourcingStrategy; // This is a no-op sourcing strategy implementing the default behavior for most components.\npublic final class EmptyPanel extends Panel; // Panel that does absolutely nothing and that can be used to display an empty block.\npublic class FeedbackPanel extends Panel implements IFeedback; // A panel that displays FeedbackMessages in a list view.\npublic class Fragment extends WebMarkupContainer implements IQueueRegion; // Usually you either have a markup file or a xml tag with wicket:id=\"myComponent\" to associate markup with a component.\npublic class FragmentMarkupSourcingStrategy extends AbstractMarkupSourcingStrategy; // A markup sourcing strategy suitable for Fragment components.\npublic class GenericPanel<T> extends Panel implements IGenericComponent<T,GenericPanel<T>>; // A Panel with typesafe getters and setters for the model and its underlying object\npublic interface IMarkupSourcingStrategy; // Markup sourcing strategies determine whether a Component behaves like a \"Panel\" pulling its Markup from an associated Markup file, or like a Fragment pulling it from a another components Markup.\npublic abstract class Panel extends WebMarkupContainer implements IQueueRegion; // A panel is a reusable component that holds markup and other components.\npublic class PanelMarkupSourcingStrategy extends AssociatedMarkupSourcingStrategy; // The Panel components markup sourcing strategy.\n", "des": "Panel components."}
{"index": 1356, "repo": "spring-tx-6.0.11", "code": "package support;\n\npublic class ChainedPersistenceExceptionTranslator extends Object implements PersistenceExceptionTranslator; // Implementation of PersistenceExceptionTranslator that supports chaining, allowing the addition of PersistenceExceptionTranslator instances in order.\npublic abstract class DaoSupport extends Object implements org.springframework.beans.factory.InitializingBean; // Generic base class for DAOs, defining template methods for DAO initialization.\npublic abstract class DataAccessUtils extends Object; // Miscellaneous utility methods for DAO implementations.\npublic class PersistenceExceptionTranslationInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // AOP Alliance MethodInterceptor that provides persistence exception translation based on a given PersistenceExceptionTranslator.\n@FunctionalInterface public interface PersistenceExceptionTranslator; // Interface implemented by Spring integrations with data access technologies that throw runtime exceptions, such as JPA and Hibernate.\n", "des": "Support classes for DAO implementations, providing miscellaneous utility methods."}
{"index": 447, "repo": "lucene-analyzers-icu-8.11.2", "code": "package tokenattributes;\n\nClass ICUCollatedTermAttributeImpl; // Extension of CharTermAttributeImpl that encodes the term text as a binary Unicode collation key instead of as UTF-8 bytes.\n", "des": "Custom AttributeImpl for indexing collation keys as index terms."}
{"index": 3257, "repo": "opencms-core-15.0", "code": "package db;\n\npackage db.as400; // AS400 implementation of the OpenCms database connector.\npackage db.db2; // DB2 implementation of the OpenCms database connector.\npackage db.generic; // Generic (ANSI-SQL) implementation of the OpenCms database connector.\npackage db.hsqldb; // HSQLDB implementation of the OpenCms database connector.\npackage db.log; // This package contains the implementation classes for the DB log.\npackage db.mssql; // MS SQL implementation of the OpenCms database connector.\npackage db.mysql; // MySQL4+ implementation of the OpenCms database connector.\npackage db.oracle; // Oracle9+ implementation of the OpenCms database connector.\npackage db.postgresql; // PostgreSql implementation of the OpenCms database connector.\npackage db.timing; // Utility classes for profiling driver calls.\nInterface I_CmsCacheKey; // Describes the cache key generating methods.\nInterface I_CmsDbContextFactory; // This interface defines a factory to create runtime info objects.\nInterface I_CmsDriver; // Generic base driver interface.\nInterface I_CmsExportPointDriver; // Provides methods to write export points to the \"real\" file system.\nInterface I_CmsHistoryDriver; // Definitions of all required history driver methods.\nInterface I_CmsPreparedStatementParameter; // An interface which represents a parameter value which is going to be used in an SQL prepared statement.\nInterface I_CmsProjectDriver; // Definitions of all required project driver methods.\nInterface I_CmsQueryFragment; // An interface for classes which are used to generate SQL statements.\nInterface I_CmsSubscriptionDriver; // The interface for drivers handling subscriptions and user tracking.\nInterface I_CmsUserDriver; // Definitions of all required user driver methods.\nInterface I_CmsVfsDriver; // Definitions of all required VFS driver methods.\nClass CmsAlias; // This class represents an alias from a virtual path to a resource in the VFS.\nClass CmsAliasFilter; // This class is used for filtering aliases in database operations.\nClass CmsAliasManager; // The alias manager provides access to the aliases stored in the database.\nClass CmsCacheKey; // Generates the cache keys for the user and permission caches.\nClass CmsCacheSettings; // The settings of the OpenCms memory monitor.\nClass CmsCompositeQueryFragment; // A query fragment which aggregates the results from a list of other query fragments.\n", "des": "Low-level database connection and access functionality."}
{"index": 3005, "repo": "spring-web-6.0.11", "code": "package support;\n\npublic class DefaultClientCodecConfigurer extends Object implements ClientCodecConfigurer; // Default implementation of ClientCodecConfigurer.\npublic class DefaultServerCodecConfigurer extends Object implements ServerCodecConfigurer; // Default implementation of ServerCodecConfigurer.\n", "des": "Provides implementations of ClientCodecConfigurer and ServerCodecConfigurer based on the converter implementations from org.springframework.http.codec.json and co."}
{"index": 465, "repo": "jackson-core-2.15.2", "code": "package base;\n\nClass GeneratorBase; // This base class implements part of API that a JSON generator exposes to applications, adds shared internal methods that sub-classes can use and adds some abstract methods sub-classes must implement.\nClass ParserBase; // Intermediate base class used by all Jackson JsonParser implementations.\nClass ParserMinimalBase; // Intermediate base class used by all Jackson JsonParser implementations, but does not add any additional fields that depend on particular method of obtaining input.\n", "des": "Base classes used by concrete Parser and Generator implementations; contain functionality that is not specific to JSON or input abstraction (byte vs char)."}
{"index": 3785, "repo": "lucene-analysis-common-9.7.0", "code": "package fa;\n\nClass PersianAnalyzer; // Analyzer for Persian.\nClass PersianCharFilter; // CharFilter that replaces instances of Zero-width non-joiner with an ordinary space.\nClass PersianCharFilterFactory; // Factory for PersianCharFilter.\nClass PersianNormalizationFilter; // A TokenFilter that applies PersianNormalizer to normalize the orthography.\nClass PersianNormalizationFilterFactory; // Factory for PersianNormalizationFilter.\nClass PersianNormalizer; // Normalizer for Persian.\nClass PersianStemFilter; // A TokenFilter that applies PersianStemmer to stem Persian words.\nClass PersianStemFilterFactory; // Factory for PersianStemFilter.\nClass PersianStemmer; // Stemmer for Persian.\n", "des": "Analyzer for Persian."}
{"index": 3157, "repo": "tika-core-2.8.0", "code": "package fork;\n\nInterface ForkProxy;\nInterface ForkResource;\nClass ForkParser;\nClass ParserFactoryFactory; // Lightweight, easily serializable class that contains enough information to build a ParserFactory\n", "des": "Forked parser."}
{"index": 246, "repo": "nutch-2.4", "code": "package httpclient;\n\nInterface HttpAuthentication; // The base level of services required for Http Authentication\nClass DummySSLProtocolSocketFactory;\nClass DummyX509TrustManager;\nClass Http; // This class is a protocol plugin that configures an HTTP client for Basic, Digest and NTLM authentication schemes for web server as well as proxy server.\nClass HttpAuthenticationFactory; // Provides the Http protocol implementation with the ability to authenticate when prompted.\nClass HttpBasicAuthentication; // Implementation of RFC 2617 Basic Authentication.\nClass HttpResponse; // An HTTP response.\nClass HttpAuthenticationException; // Can be used to identify problems during creation of Authentication objects.\n", "des": "Protocol plugin which supports retrieving documents via the HTTP and HTTPS protocols, optionally with Basic, Digest and NTLM authentication schemes for web server as well as proxy server."}
{"index": 2437, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package env;\n\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.env.EnvironmentEndpoint.class) @EnableConfigurationProperties(EnvironmentEndpointProperties.class) public class EnvironmentEndpointAutoConfiguration extends Object; // Auto-configuration for the EnvironmentEndpoint.\n@ConfigurationProperties(\"management.endpoint.env\") public class EnvironmentEndpointProperties extends Object; // Configuration properties for EnvironmentEndpoint.\n", "des": "Auto-configuration for actuator Spring Environment concerns."}
{"index": 326, "repo": "kafka-clients-3.5.0", "code": "package stats;\n\nInterface Histogram.BinScheme; // An algorithm for determining the bin in which a value is to be placed as well as calculating the upper end of each bin.\nClass Avg; // A SampledStat that maintains a simple average over its samples.\nClass CumulativeCount; // A non-sampled version of WindowedCount maintained over all time.\nClass CumulativeSum; // An non-sampled cumulative total maintained over all time.\nClass Frequencies; // A CompoundStat that represents a normalized distribution with a Frequency metric for each bucketed value.\nClass Frequency; // Definition of a frequency metric used in a Frequencies compound statistic.\nClass Histogram;\nClass Histogram.ConstantBinScheme; // A scheme for calculating the bins where the width of each bin is a constant determined by the range of values and the number of bins.\nClass Histogram.LinearBinScheme; // A scheme for calculating the bins where the width of each bin is one more than the previous bin, and therefore the bin widths are increasing at a linear rate.\nClass Max; // A SampledStat that gives the max over its samples.\nClass Meter; // A compound stat that includes a rate metric and a cumulative total metric.\nClass Min; // A SampledStat that gives the min over its samples.\nClass Percentile;\nClass Percentiles; // A compound stat that reports one or more percentiles\nClass Rate; // The rate of the given quantity.\nClass SampledStat; // A SampledStat records a single scalar value measured over one or more samples.\nClass SimpleRate; // A simple rate the rate is incrementally calculated based on the elapsed time between the earliest reading and now.\nClass TokenBucket; // The TokenBucket is a MeasurableStat implementing a token bucket algorithm that is usable within a Sensor.\nClass Value; // An instantaneous value.\nClass WindowedCount; // A SampledStat that maintains a simple count of what it has seen.\nClass WindowedSum; // A SampledStat that maintains the sum of what it has seen.\nEnum Percentiles.BucketSizing;\n", "des": "Provides methods of statistically aggregating metrics upon emission."}
{"index": 1138, "repo": "hadoop-yarn-api-3.3.6", "code": "package resource;\n\nInterface PlacementConstraint.Visitable; // Interface used to enable the elements of the constraint tree to be visited.\nInterface PlacementConstraint.Visitor<T>; // Visitor API for a constraint tree.\nClass PlacementConstraint; // PlacementConstraint represents a placement constraint for a resource allocation.\nClass PlacementConstraint.AbstractConstraint; // Abstract class that acts as the superclass of all placement constraint classes.\nClass PlacementConstraint.And; // Class that represents a composite constraint that is a conjunction of other constraints.\nClass PlacementConstraint.CardinalityConstraint; // Class that represents a cardinality constraint.\nClass PlacementConstraint.CompositeConstraint<R extends PlacementConstraint.Visitable>; // Class that represents composite constraints, which comprise other constraints, forming a constraint tree.\nClass PlacementConstraint.DelayedOr; // Class that represents a composite constraint that comprises a list of timed placement constraints (see PlacementConstraint.TimedPlacementConstraint).\nClass PlacementConstraint.Or; // Class that represents a composite constraint that is a disjunction of other constraints.\nClass PlacementConstraint.SingleConstraint; // Consider a set of nodes N that belongs to the scope specified in the constraint.\nClass PlacementConstraint.TargetConstraint; // Class that represents a target constraint.\nClass PlacementConstraint.TargetExpression; // Class representing the target expressions that are used in placement constraints.\nClass PlacementConstraint.TimedPlacementConstraint; // Represents a timed placement constraint that has to be satisfied within a time window.\nClass PlacementConstraints; // This class contains various static methods for the applications to create placement constraints (see also PlacementConstraint).\nClass PlacementConstraints.PlacementTargets; // Class with static methods for constructing target expressions to be used in placement constraints.\nEnum PlacementConstraint.TargetExpression.TargetType; // Enum specifying the type of the target expression.\nEnum PlacementConstraint.TimedPlacementConstraint.DelayUnit; // The unit of scheduling delay.\n", "des": "API related to resources."}
{"index": 787, "repo": "lucene-analyzers-common-8.11.2", "code": "package in;\n\nClass IndicNormalizationFilter; // A TokenFilter that applies IndicNormalizer to normalize text in Indian Languages.\nClass IndicNormalizationFilterFactory; // Factory for IndicNormalizationFilter.\nClass IndicNormalizer; // Normalizes the Unicode representation of text in Indian languages.\n", "des": "Analyzer for Indian languages."}
{"index": 100, "repo": "ignite-core-2.15.0", "code": "package always;\n\nInterface AlwaysFailoverSpiMBean; // Management bean for AlwaysFailoverSpi.\nClass AlwaysFailoverSpi; // Failover SPI that always reroutes a failed job to another node.\n", "des": "Contains default \"always\" failover SPI."}
{"index": 3472, "repo": "tomcat-jspapi-10.1", "code": "package el;\n\nInterface FunctionMapper;\nInterface VariableResolver;\nClass Expression;\nClass ExpressionEvaluator;\nClass ImplicitObjectELResolver; // Provides resolution in EL for the implicit variables of a JSP page.\nClass ImportELResolver; // Providers resolution of imports and static imports in the Jakarta Server Pages ELResolver chain.\nClass NotFoundELResolver; // The final resolver of the Jakarta Server Pages ELResolver chain.\nClass ScopedAttributeELResolver; // An ELResolver for working with JSP scoped attributes which may have page, request, session or application scope.\nClass ELException;\nClass ELParseException;\n", "des": "Classes and interfaces for the JSP 2.0 Expression Language API."}
{"index": 1457, "repo": "spring-data-redis-3.1.2", "code": "package types;\n\npublic class Expiration extends Object; // Expiration holds a value with its associated TimeUnit.\npublic class RedisClientInfo extends Object; // RedisClientInfo provides general and statistical information about client connections.\npublic static enum RedisClientInfo.INFO extends Enum<RedisClientInfo.INFO>;\npublic static class RedisClientInfo.RedisClientInfoBuilder extends Object;\n", "des": "Redis domain specific types."}
{"index": 1007, "repo": "spring-ws-3.0.10.RELEASE", "code": "package wsdl11;\n\npackage wsdl11.provider; // Provides a contribution strategy for WSDL definitions.\nInterface Wsdl11Definition; // Models a WSDL 1.1-specific WsdlDefinition.\nClass DefaultWsdl11Definition; // Convenient implementation of Wsdl11Definition that creates a SOAP 1.1 or 1.2 binding based on naming conventions in one or more inlined XSD schemas.\nClass ProviderBasedWsdl4jDefinition; // Implementation of the Wsdl11Definition that uses a provider-based mechanism to populate a WSDL4J Definition.\nClass SimpleWsdl11Definition; // The default Wsdl11Definition implementation.\nClass Wsdl4jDefinition; // Implementation of the Wsdl11Definition based on WSDL4J.\nClass Wsdl4jDefinitionException; // Subclass of WsdlDefinitionException that wraps WSDLExceptions.\n", "des": "Contains interfaces and classes specific to WSDL 1.1."}
{"index": 2422, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package context;\n\npackage context.properties; // Auto-configuration for actuator property concerns.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.context.ShutdownEndpoint.class) public class ShutdownEndpointAutoConfiguration extends Object; // Auto-configuration for the ShutdownEndpoint.\n", "des": "Auto-configuration for actuator Spring Context concerns."}
{"index": 621, "repo": "freemarker-2.3.32", "code": "package ant;\n\nClass FreemarkerXmlTask; // FMPP is a more complete solution.\nClass JythonAntTask; // Used internally, public for technical reasons only.\nClass UnlinkedJythonOperationsImpl; // Used internally, public for technical reasons only.\n", "des": "Ant task to transform XML files with a template; a more powerful alternative is FMPP."}
{"index": 1780, "repo": "spring-integration-file-6.1.2", "code": "package aggregator;\n\npublic class FileAggregatingMessageGroupProcessor extends org.springframework.integration.aggregator.AbstractAggregatingMessageGroupProcessor; // An AbstractAggregatingMessageGroupProcessor implementation for file content collecting previously splitted by the FileSplitter with the markers option turned on.\npublic class FileAggregator extends Object implements org.springframework.integration.aggregator.CorrelationStrategy, org.springframework.integration.aggregator.ReleaseStrategy, org.springframework.integration.aggregator.GroupConditionProvider, org.springframework.integration.aggregator.MessageGroupProcessor, org.springframework.beans.factory.BeanFactoryAware; // A convenient component to utilize a FileSplitter.FileMarker-based aggregation logic.\npublic class FileMarkerReleaseStrategy extends Object implements org.springframework.integration.aggregator.ReleaseStrategy, org.springframework.integration.aggregator.GroupConditionProvider; // A ReleaseStrategy which makes a decision based on the presence of FileSplitter.FileMarker.Mark.END message in the group and its FileHeaders.LINE_COUNT header.\n", "des": "Provides support classes for file-based aggregation logic."}
{"index": 203, "repo": "nutch-2.4", "code": "package fetcher;\n\nClass FetchEntry;\nClass FetcherJob; // Multi-threaded fetcher.\nClass FetcherJob.FetcherMapper; // Mapper class for Fetcher.\nClass FetcherReducer;\n", "des": "The Nutch robot."}
{"index": 1786, "repo": "spring-integration-file-6.1.2", "code": "package remote;\n\npackage remote.aop; // Provides classes related to AOP.\npackage remote.gateway; // Provides classes supporting remote file gateways.\npackage remote.handler; // Provides classes supporting remote file message handlers.\npackage remote.server; // Provides classes related to file servers.\npackage remote.session; // Provides classes supporting remote file sessions.\npackage remote.synchronizer; // Provides classes supporting the synchronization of remote and local file directories.\npublic abstract class AbstractFileInfo<F> extends Object implements FileInfo<F>, Comparable<FileInfo<F>>; // Abstract implementation of FileInfo; provides a setter for the remote directory and a generic toString implementation.\npublic abstract class AbstractRemoteFileStreamingMessageSource<F> extends org.springframework.integration.endpoint.AbstractFetchLimitingMessageSource<InputStream> implements org.springframework.integration.support.management.ManageableLifecycle; // A message source that produces a message with an InputStream payload referencing a remote file.\n@FunctionalInterface public interface ClientCallback<C,T>; // RemoteFileTemplate callback with the underlying client instance providing access to lower level methods.\n@FunctionalInterface public interface ClientCallbackWithoutResult<C> extends ClientCallback<C,Object>; // RemoteFileTemplate callback with the underlying client instance providing access to lower level methods where no result is returned.\npublic interface FileInfo<F>; // Represents a remote file info - an abstraction over the underlying implementation.\n@FunctionalInterface public interface InputStreamCallback; // Callback for stream-based file retrieval using a RemoteFileOperations.\n@FunctionalInterface public interface MessageSessionCallback<F,T>; // Callback invoked by RemoteFileOperations.executeForMessage() - allows multiple operations on a session.\npublic interface RemoteFileOperations<F>; // Strategy for performing operations on remote files.\n@FunctionalInterface public static interface RemoteFileOperations.OperationsCallback<F,T>; // Callback for using the same session for multiple RemoteFileTemplate operations.\npublic class RemoteFileTemplate<F> extends Object implements RemoteFileOperations<F>, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.BeanFactoryAware; // A general abstraction for dealing with remote files.\npublic final class RemoteFileUtils extends Object; // Utility methods for supporting remote file operations.\n", "des": "Base package for supporting remote files."}
{"index": 3743, "repo": "lucene-queryparser-9.7.0", "code": "package config;\n\nClass FieldBoostMapFCListener; // This listener listens for every field configuration request and assign a StandardQueryConfigHandler.ConfigurationKeys.BOOST to the equivalent FieldConfig based on a defined map: fieldName -> boostValue stored in StandardQueryConfigHandler.ConfigurationKeys.FIELD_BOOST_MAP.\nClass FieldDateResolutionFCListener; // This listener listens for every field configuration request and assign a StandardQueryConfigHandler.ConfigurationKeys.DATE_RESOLUTION to the equivalent FieldConfig based on a defined map: fieldName -> DateTools.Resolution stored in StandardQueryConfigHandler.ConfigurationKeys.FIELD_DATE_RESOLUTION_MAP.\nClass FuzzyConfig; // Configuration parameters for FuzzyQuerys\nClass NumberDateFormat; // This Format parses Long into date strings and vice-versa.\nClass PointsConfig; // This class holds the configuration used to parse numeric queries and create PointValues queries.\nClass PointsConfigListener; // This listener is used to listen to FieldConfig requests in QueryConfigHandler and add StandardQueryConfigHandler.ConfigurationKeys.POINTS_CONFIG based on the StandardQueryConfigHandler.ConfigurationKeys.POINTS_CONFIG_MAP set in the QueryConfigHandler.\nClass StandardQueryConfigHandler; // This query configuration handler is used for almost every processor defined in the StandardQueryNodeProcessorPipeline processor pipeline.\nClass StandardQueryConfigHandler.ConfigurationKeys; // Class holding keys for StandardQueryNodeProcessorPipeline options.\nEnum StandardQueryConfigHandler.Operator; // Boolean Operator: AND or OR\n", "des": "Standard Lucene Query Configuration."}
{"index": 2605, "repo": "wicket-util-10.0.0-M1", "code": "package crypt;\n\npublic abstract class AbstractCrypt extends Object implements ICrypt; // Abstract base class for JCE based ICrypt implementations.\npublic class CharEncoding extends Object; // Character encoding names required of every implementation of the Java platform.\npublic class CipherUtils extends Object; // Utility class meant to help building Cipher.\npublic class CryptFactoryCachingDecorator extends Object implements ICryptFactory; // ICryptFactory decorator that caches the call to ICryptFactory.newCrypt()\npublic interface ICrypt; // Encryption and decryption implementations are accessed through this interface.\npublic interface ICryptFactory; // Interface used to generate crypt objects\npublic class NoCrypt extends Object implements ICrypt; // Due to legal reasons in some countries the JRE is shipped without a security provider.\npublic class NoCryptFactory extends Object implements ICryptFactory; // Crypt factory implementation for noop NoCrypt class\npublic class StringUtils extends Object; // Converts String to and from bytes using the encodings required by the Java specification.\npublic class SunJceCrypt extends AbstractCrypt; // Provide some simple means to encrypt and decrypt strings such as passwords.\npublic class TrivialCrypt extends AbstractCrypt; // THIS CLASS IS FOR TESTING PURPOSES ONLY.\n", "des": "Encryption support for forms."}
{"index": 200, "repo": "nutch-2.4", "code": "package extractor;\n\npackage extractor.normalizer; // Normalizers for jsoup-extractor\nClass JsoupDocument;\nClass JsoupDocument.DocumentField;\nClass JsoupDocumentReader;\nClass JsoupExtractorConstants;\n", "des": "core package of jsoup-extractor containing XML configuration parser, document structure"}
{"index": 778, "repo": "lucene-analyzers-common-8.11.2", "code": "package fi;\n\nClass FinnishAnalyzer; // Analyzer for Finnish.\nClass FinnishLightStemFilter; // A TokenFilter that applies FinnishLightStemmer to stem Finnish words.\nClass FinnishLightStemFilterFactory; // Factory for FinnishLightStemFilter.\nClass FinnishLightStemmer; // Light Stemmer for Finnish.\n", "des": "Analyzer for Finnish."}
{"index": 2315, "repo": "spring-boot-3.1.1", "code": "package logging;\n\npackage logging.java; // Support for 'Java Util Logging'.\npackage logging.log4j2; // Support for the Log4j 2 logging library.\npackage logging.logback; // Support for the Logback logging library.\npublic abstract class AbstractLoggingSystem extends LoggingSystem; // Abstract base class for LoggingSystem implementations.\nprotected static class AbstractLoggingSystem.LogLevels<T> extends Object; // Maintains a mapping between native levels and LogLevel.\npublic class DeferredLog extends Object implements org.apache.commons.logging.Log; // Deferred Log that can be used to store messages that shouldn't be written until the logging system is fully initialized.\n@FunctionalInterface public interface DeferredLogFactory; // Factory that can be used to create multiple DeferredLog instances that will switch over when appropriate.\npublic class DeferredLogs extends Object implements DeferredLogFactory; // A DeferredLogFactory implementation that manages a collection DeferredLog instances.\npublic class LogFile extends Object; // A reference to a log output file.\npublic final class LoggerConfiguration extends Object; // Immutable class that represents the configuration of a LoggingSystem's logger.\npublic static enum LoggerConfiguration.ConfigurationScope extends Enum<LoggerConfiguration.ConfigurationScope>; // Supported logger configurations scopes.\npublic static final class LoggerConfiguration.LevelConfiguration extends Object; // Logger level configuration.\npublic final class LoggerGroup extends Object; // A single logger group.\npublic final class LoggerGroups extends Object implements Iterable<LoggerGroup>; // Logger groups configured through the Spring Environment.\npublic class LoggingInitializationContext extends Object; // Context passed to the LoggingSystem during initialization.\npublic abstract class LoggingSystem extends Object; // Common abstraction over logging systems.\npublic interface LoggingSystemFactory; // Factory class used by LoggingSystem.get(ClassLoader) to find an actual implementation.\npublic class LoggingSystemProperties extends Object; // Utility to set system properties that can later be used by log configuration files.\npublic enum LogLevel extends Enum<LogLevel>; // Logging levels supported by a LoggingSystem.\n", "des": "Support and abstractions across several logging libraries."}
{"index": 3901, "repo": "solr-solrj-9.3.0", "code": "package luke;\n\nEnum FieldFlag;\n", "des": "Common constants used by the LukeRequestHandler."}
{"index": 3185, "repo": "tomcat-api-10.1", "code": "package cpdsadapter;\n\nClass DriverAdapterCPDS; // An adapter for JDBC drivers that do not include an implementation of ConnectionPoolDataSource, but still include a DriverManager implementation.\nClass PStmtKeyCPDS;\n", "des": "This package contains one public class which is a ConnectionPoolDataSource (CPDS) implementation that can be used to adapt older Driver based JDBC implementations."}
{"index": 2239, "repo": "spring-security-acl-6.1.2", "code": "package jdbc;\n\npublic class BasicLookupStrategy extends Object implements LookupStrategy; // Performs lookups in a manner that is compatible with ANSI SQL.\npublic class JdbcAclService extends Object implements AclService; // Simple JDBC-based implementation of AclService.\npublic class JdbcMutableAclService extends JdbcAclService implements MutableAclService; // Provides a base JDBC implementation of MutableAclService.\npublic interface LookupStrategy; // Performs lookups for AclService.\n", "des": "JDBC-based persistence of ACL information"}
{"index": 1139, "repo": "hadoop-yarn-api-3.3.6", "code": "package constraint;\n\nInterface PlacementConstraintParser.ConstraintTokenizer; // Tokenizer interface that used to parse an expression.\nClass PlacementConstraintParser; // Placement constraint expression parser.\nClass PlacementConstraintParser.BaseStringTokenizer; // A basic tokenizer that splits an expression by a given delimiter.\nClass PlacementConstraintParser.CardinalityConstraintParser; // Constraint parser used to parse a given target expression, such as \"cardinality, NODE, foo, 0, 1\".\nClass PlacementConstraintParser.ConjunctionConstraintParser; // Parser used to parse conjunction form of constraints, such as AND(A, ..., B), OR(A, ..., B).\nClass PlacementConstraintParser.ConjunctionTokenizer; // Tokenizer used to parse conjunction form of a constraint expression, [AND|OR](C1:C2:...:Cn).\nClass PlacementConstraintParser.ConstraintParser; // Constraint Parser used to parse placement constraints from a given expression.\nClass PlacementConstraintParser.MultipleConstraintsTokenizer; // Tokenizer used to handle a placement spec composed by multiple constraint expressions.\nClass PlacementConstraintParser.NodeConstraintParser; // Constraint parser used to parse a given target expression.\nClass PlacementConstraintParser.SourceTags; // A helper class to encapsulate source tags and allocations in the placement specification.\nClass PlacementConstraintParser.SourceTagsTokenizer; // Tokenizer used to parse allocation tags expression, which should be in tag(numOfAllocations) syntax.\nClass PlacementConstraintParser.TargetConstraintParser; // Constraint parser used to parse a given target expression, such as \"NOTIN, NODE, foo, bar\".\nClass PlacementConstraintParseException; // Exception when the placement constraint parser fails to parse an expression.\n", "des": "Package org.apache.hadoop.yarn.util.constraint contains classes which is used as utility class for placement constraints."}
{"index": 1484, "repo": "tribuo-core-4.3.1", "code": "package impl;\n\npublic class ArrayExample<T extends Output<T>> extends Example<T>; // An Example backed by two arrays, one of String and one of double.\npublic final class BinaryFeaturesExample<T extends Output<T>> extends Example<T>; // An Example backed by a single array of feature names.\npublic final class DatasetDataCarrier<T extends Output<T>> extends Object; // Serialization carrier for common fields in Dataset.\npublic class IndexedArrayExample<T extends Output<T>> extends ArrayExample<T>; // A version of ArrayExample which also has the id numbers.\npublic static class IndexedArrayExample.FeatureTuple extends Object; // A tuple of the feature name, id and value.\npublic class ListExample<T extends Output<T>> extends Example<T> implements Serializable; // This class will not be performant until value types are available in Java.\npublic final class ModelDataCarrier<T extends Output<T>> extends Object; // Serialization carrier for common fields in Model and SequenceModel.\n", "des": "Provides implementations of base classes and interfaces from org.tribuo."}
{"index": 1682, "repo": "spring-integration-mqtt-6.1.2", "code": "package xml;\n\npublic class MqttMessageDrivenChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser; // The MqttAdapter Message Driven Channel adapter parser.\npublic class MqttNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // The namespace handler for the MqttAdapter namespace.\npublic class MqttOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // The parser for the MqttAdapter Outbound Channel Adapter.\n", "des": "Provides parser classes to provide Xml namespace support for the MqttAdapter components."}
{"index": 3568, "repo": "lucene-codecs-9.7.0", "code": "package bloom;\n\nClass BloomFilterFactory; // Class used to create index-time FuzzySet appropriately configured for each field.\nClass BloomFilteringPostingsFormat; // A PostingsFormat useful for low doc-frequency fields such as primary keys.\nClass DefaultBloomFilterFactory; // Default policy is to allocate a bitset with 10% saturation given a unique term per document.\nClass FuzzySet; // A class used to represent a set of many, potentially large, values (e.g.\nClass HashFunction; // Base class for hashing functions that can be referred to by name.\nClass MurmurHash64; // This is a very fast, non-cryptographic hash suitable for general hash-based lookup.\nEnum FuzzySet.ContainsResult; // Result from FuzzySet.contains(BytesRef): can never return definitively YES (always MAYBE), but can sometimes definitely return NO.\n", "des": "Codec PostingsFormat for fast access to low-frequency terms such as primary key fields."}
{"index": 2200, "repo": "spring-data-commons-3.1.2", "code": "package convert;\n\npublic class ConfigurableTypeInformationMapper extends Object implements TypeInformationMapper; // TypeInformationMapper implementation that can be either set up using a MappingContext or manually set up Map of String aliases to types.\npublic interface ConverterBuilder; // API to easily set up GenericConverter instances using Java 8 lambdas, mostly in bidirectional fashion for easy registration as custom type converters of the Spring Data mapping subsystem.\npublic static interface ConverterBuilder.ConverterAware extends ConverterBuilder, ConverterBuilder.ReadingConverterAware, ConverterBuilder.WritingConverterAware; // A ConverterBuilder aware of both a reading and writing converter.\npublic static interface ConverterBuilder.ReadingConverterAware; // Exposes a reading converter.\npublic static interface ConverterBuilder.ReadingConverterBuilder<T,S> extends ConverterBuilder, ConverterBuilder.ReadingConverterAware; // Interface to represent an intermediate setup step of ConverterBuilder.ConverterAware defining a reading converter first.\npublic static interface ConverterBuilder.WritingConverterAware; // Exposes a writing converter.\npublic static interface ConverterBuilder.WritingConverterBuilder<S,T> extends ConverterBuilder, ConverterBuilder.WritingConverterAware; // Interface to represent an intermediate setup step of ConverterBuilder.ConverterAware defining a writing converter first.\npublic class CustomConversions extends Object; // Value object to capture custom conversion.\nprotected static class CustomConversions.ConverterConfiguration extends Object; // Value object holding the actual CustomConversions.StoreConversions and custom converters configured for registration.\nprotected static class CustomConversions.ConverterRegistrationIntent extends Object; // Value class tying together a CustomConversions.ConverterRegistration and its origin to allow fine grained registration based on store supported types.\nprotected static enum CustomConversions.ConverterRegistrationIntent.ConverterOrigin extends Enum<CustomConversions.ConverterRegistrationIntent.ConverterOrigin>;\npublic static class CustomConversions.StoreConversions extends Object; // Value type to capture store-specific extensions to the CustomConversions.\npublic class DefaultTypeMapper<S> extends Object implements TypeMapper<S>, BeanClassLoaderAware; // Default implementation of TypeMapper.\npublic class DtoInstantiatingConverter extends Object implements Converter<Object,Object>; // Spring Converter to create instances of the given DTO type from the source value handed into the conversion.\n", "des": "General purpose conversion framework to read objects from a data store abstraction and write it back."}
{"index": 339, "repo": "hadoop-hdfs-3.3.6", "code": "package hdfs;\n\npackage hdfs.protocolPB; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\nClass DFSUtil.ConfiguredNNAddress; // Represent one of the NameNodes configured in the cluster.\nClass DFSUtil.ServiceComparator; // Comparator for sorting DataNodeInfo[] based on decommissioned and entering_maintenance states.\nClass HdfsDtFetcher; // DtFetcher is an interface which permits the abstraction and separation of delegation token fetch implementaions across different packages and compilation units.\nClass SWebHdfsDtFetcher; // DtFetcher for SWebHdfsFileSystem using the base class HdfsDtFetcher impl.\nClass WebHdfsDtFetcher; // DtFetcher for WebHdfsFileSystem using the base class HdfsDtFetcher impl.\n", "des": "A distributed implementation of FileSystem."}
{"index": 3694, "repo": "solr-core-9.3.0", "code": "package collector;\n\nClass FilterCollector; // A collector that filters incoming doc ids that are not in the filter.\n", "des": "Grouping related Collectors"}
{"index": 214, "repo": "nutch-2.4", "code": "package extractor;\n\nClass JsoupHtmlParser;\nClass TestJsoupHtmlParser;\nClass ViewCountNormalizer;\n", "des": "Parse filter based on Jsoup"}
{"index": 3812, "repo": "lucene-analysis-common-9.7.0", "code": "package ru;\n\nClass RussianAnalyzer; // Analyzer for Russian language.\nClass RussianLightStemFilter; // A TokenFilter that applies RussianLightStemmer to stem Russian words.\nClass RussianLightStemFilterFactory; // Factory for RussianLightStemFilter.\nClass RussianLightStemmer; // Light Stemmer for Russian.\n", "des": "Analyzer for Russian."}
{"index": 1208, "repo": "commons-math3-3.6.1", "code": "package moment;\n\nClass GeometricMean; // Returns the geometric mean of the available values.\nClass Kurtosis; // Computes the Kurtosis of the available values.\nClass Mean; // Computes the arithmetic mean of a set of values.\nClass SecondMoment; // Computes a statistic related to the Second Central Moment.\nClass SemiVariance; // Computes the semivariance of a set of values with respect to a given cutoff value.\nClass Skewness; // Computes the skewness of the available values.\nClass StandardDeviation; // Computes the sample standard deviation.\nClass Variance; // Computes the variance of the available values.\nClass VectorialCovariance; // Returns the covariance matrix of the available vectors.\nClass VectorialMean; // Returns the arithmetic mean of the available vectors.\nEnum SemiVariance.Direction; // The direction of the semivariance - either upside or downside.\n", "des": "Summary statistics based on moments."}
{"index": 1914, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jpa;\n\n@AutoConfiguration(after={HibernateJpaAutoConfiguration.class,TaskExecutionAutoConfiguration.class}) @ConditionalOnBean(javax.sql.DataSource.class) @ConditionalOnClass(org.springframework.data.jpa.repository.JpaRepository.class) @ConditionalOnMissingBean({org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.class,org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension.class}) @ConditionalOnProperty(prefix=\"spring.data.jpa.repositories\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) @Import(org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration.JpaRepositoriesImportSelector.class) public class JpaRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's JPA Repositories.\n", "des": "Auto-configuration for Spring Data JPA."}
{"index": 329, "repo": "kafka-clients-3.5.0", "code": "package auth;\n\nInterface AuthenticateCallbackHandler;\nInterface AuthenticationContext; // An object representing contextual information from the authentication session.\nInterface KafkaPrincipalBuilder; // Pluggable principal builder interface which supports both SSL authentication through SslAuthenticationContext and SASL through SaslAuthenticationContext.\nInterface KafkaPrincipalSerde; // Serializer/Deserializer interface for KafkaPrincipal for the purpose of inter-broker forwarding.\nInterface Login; // Login interface for authentication.\nInterface SecurityProviderCreator; // An interface for generating security providers.\nInterface SslEngineFactory; // Plugin interface for allowing creation of SSLEngine object in a custom way.\nClass KafkaPrincipal; // Principals in Kafka are defined by a type and a name.\nClass PlaintextAuthenticationContext;\nClass SaslAuthenticationContext;\nClass SaslExtensions; // A simple immutable value object class holding customizable SASL extensions.\nClass SaslExtensionsCallback; // Optional callback used for SASL mechanisms if any extensions need to be set in the SASL exchange.\nClass SslAuthenticationContext;\nEnum SecurityProtocol;\n", "des": "Provides pluggable interfaces for implementing Kafka authentication mechanisms."}
{"index": 1026, "repo": "hadoop-aws-3.3.6", "code": "package auth;\n\npackage auth.delegation; // Extensible delegation token support for the S3A connector.\nInterface AwsSignerInitializer; // Interface which can be implemented to allow initialization of any custom signers which may be used by the S3AFileSystem.\nClass AbstractAWSCredentialProvider; // This class will be replaced by one that implements AWS SDK V2's AwsCredentialProvider as part of upgrading S3A to SDK V2.\nClass AbstractSessionCredentialsProvider; // This class will be replaced by one that implements AWS SDK V2's AwsCredentialProvider as part of upgrading S3A to SDK V2.\nClass AbstractSessionCredentialsProvider.NoCredentials; // A special set of null credentials which are not the anonymous class.\nClass AssumedRoleCredentialProvider; // This class will be replaced by one that implements AWS SDK V2's AwsCredentialProvider as part of upgrading S3A to SDK V2.\nClass IAMInstanceCredentialsProvider; // This class will be replaced by one that implements AWS SDK V2's AwsCredentialProvider as part of upgrading S3A to SDK V2.\nClass MarshalledCredentialBinding; // Class to bridge from the serializable/marshallabled MarshalledCredentialBinding class to/from AWS classes.\nClass MarshalledCredentialProvider; // AWS credential provider driven from marshalled session/full credentials (full, simple session or role).\nClass MarshalledCredentials; // Stores the credentials for a session or for a full login.\nClass RoleModel; // Jackson Role Model for Role Properties, for API clients and tests.\nClass RoleModel.Policy; // A policy is one or more statements.\nClass RoleModel.RoleElt; // Any element in a role.\nClass RoleModel.Statement; // A single statement.\nClass RolePolicies; // Operations, statements and policies covering the operations needed to work with S3.\nClass SignerManager; // Class to handle custom signers.\nClass STSClientFactory; // Factory for creating STS Clients.\nClass STSClientFactory.STSClient; // STS client connection with retries.\nEnum MarshalledCredentials.CredentialTypeRequired; // Enumeration of credential types for use in validation methods.\nEnum RoleModel.Effects; // Effect options.\n", "des": "Authentication and permissions support."}
{"index": 3181, "repo": "tomcat-api-10.1", "code": "package naming;\n\npackage naming.factory; // This package contains object factories used by the naming service.\npackage naming.java; // This package contains the URL context factory for the \"java\" namespace.\nClass AbstractRef;\nClass ContextAccessController; // Handles the access control on the JNDI contexts.\nClass ContextBindings; // Handles the associations : Object with a NamingContext Calling thread with a NamingContext Calling thread with object bound to the same naming context Thread context class loader with a NamingContext Thread context class loader with object bound to the same NamingContext The objects are typically Catalina Server or Context objects.\nClass EjbRef; // Represents a reference address to an EJB.\nClass HandlerRef; // Represents a reference handler for a web service.\nClass LookupRef; // Represents a reference to lookup.\nClass NameParserImpl; // Parses names.\nClass NamingContext; // Catalina JNDI Context implementation.\nClass NamingContextBindingsEnumeration; // Naming enumeration implementation.\nClass NamingContextEnumeration; // Naming enumeration implementation.\nClass NamingEntry; // Represents a binding in a NamingContext.\nClass ResourceEnvRef; // Represents a reference address to a resource environment.\nClass ResourceLinkRef; // Represents a reference address to a resource.\nClass ResourceRef; // Represents a reference address to a resource.\nClass SelectorContext; // Catalina JNDI Context implementation.\nClass ServiceRef; // Represents a reference web service.\nClass StringManager; // An internationalization / localization helper class which reduces the bother of handling ResourceBundles and takes care of the common cases of message formatting which otherwise require the creation of Object arrays and such.\nClass TransactionRef; // Represents a reference address to a transaction.\n", "des": "This package contains a memory based naming service provider."}
{"index": 2396, "repo": "spring-batch-core-5.0.2", "code": "package observability;\n\npublic class BatchJobContext extends io.micrometer.observation.Observation.Context implements Supplier<BatchJobContext>; // Observation context for batch jobs.\npublic enum BatchJobObservation extends Enum<BatchJobObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // Observation created around a Job execution.\npublic interface BatchJobObservationConvention extends io.micrometer.observation.ObservationConvention<BatchJobContext>; // ObservationConvention for BatchJobContext.\npublic final class BatchMetrics extends Object; // Central class for batch metrics.\npublic class BatchStepContext extends io.micrometer.observation.Observation.Context implements Supplier<BatchStepContext>; // Observation context for batch steps.\npublic enum BatchStepObservation extends Enum<BatchStepObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // Observation created around a step execution.\npublic interface BatchStepObservationConvention extends io.micrometer.observation.ObservationConvention<BatchStepContext>; // ObservationConvention for BatchStepContext.\npublic class DefaultBatchJobObservationConvention extends Object implements BatchJobObservationConvention; // Default BatchJobObservationConvention implementation.\npublic class DefaultBatchStepObservationConvention extends Object implements BatchStepObservationConvention; // Default BatchStepObservationConvention implementation.\n", "des": "This package contains APIs related to batch observability."}
{"index": 1378, "repo": "spring-boot-actuator-3.1.1", "code": "package couchbase;\n\npublic class CouchbaseHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for Couchbase.\npublic class CouchbaseReactiveHealthIndicator extends AbstractReactiveHealthIndicator; // A ReactiveHealthIndicator for Couchbase.\n", "des": "Actuator support for Couchbase."}
{"index": 133, "repo": "ignite-core-2.15.0", "code": "package streams;\n\nInterface BinaryInputStream; // Binary input stream.\nInterface BinaryMemoryAllocatorChunk; // Memory allocator chunk.\nInterface BinaryOutputStream; // Binary output stream.\nInterface BinaryStream; // Binary stream.\nClass BinaryAbstractInputStream; // Binary abstract input stream.\nClass BinaryAbstractOutputStream; // Base binary output stream.\nClass BinaryAbstractStream; // Binary abstract stream.\nClass BinaryByteBufferInputStream; // Input stream over ByteBuffer.\nClass BinaryHeapInputStream; // Binary heap input stream.\nClass BinaryHeapOutputStream; // Binary heap output stream.\nClass BinaryMemoryAllocator; // On-heap memory allocator.\nClass BinaryOffheapInputStream; // Binary off-heap input stream.\nClass BinaryOffheapOutputStream; // Binary offheap output stream.\n", "des": "Contains binary APIs implementation for streams."}
{"index": 1954, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package embedded;\n\n@AutoConfiguration(before=LdapAutoConfiguration.class) @EnableConfigurationProperties({LdapProperties.class,EmbeddedLdapProperties.class}) @ConditionalOnClass(com.unboundid.ldap.listener.InMemoryDirectoryServer.class) @Conditional(org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration.EmbeddedLdapCondition.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration.EmbeddedLdapAutoConfigurationRuntimeHints.class) public class EmbeddedLdapAutoConfiguration extends Object; // Auto-configuration for Embedded LDAP.\n@ConfigurationProperties(prefix=\"spring.ldap.embedded\") public class EmbeddedLdapProperties extends Object; // Configuration properties for Embedded LDAP.\npublic static class EmbeddedLdapProperties.Credential extends Object;\npublic static class EmbeddedLdapProperties.Validation extends Object;\n", "des": "Auto-configuration for embedded LDAP."}
{"index": 132, "repo": "ignite-core-2.15.0", "code": "package builder;\n\nInterface BinaryLazyValue;\nClass BinaryBuilderEnum;\nClass BinaryBuilderReader;\nClass BinaryModifiableLazyValue;\nClass BinaryObjectBuilderImpl;\nClass BinaryPlainBinaryObject;\n", "des": "Contains classes specific to binary builder API."}
{"index": 565, "repo": "hadoop-common-3.3.4", "code": "package lib;\n\nClass Interns; // Helpers to create interned metrics info.\nClass MetricsRegistry; // An optional metrics registry class for creating and maintaining a collection of MetricsMutables, making writing metrics source easier.\nClass MutableCounter; // The mutable counter (monotonically increasing) metric interface\nClass MutableCounterInt; // A mutable int counter for implementing metrics sources\nClass MutableCounterLong; // A mutable long counter\nClass MutableGauge; // The mutable gauge metric interface\nClass MutableGaugeFloat; // A mutable float gauge.\nClass MutableGaugeInt; // A mutable int gauge\nClass MutableGaugeLong; // A mutable long gauge\nClass MutableMetric; // The mutable metric interface\nClass MutableQuantiles; // Watches a stream of long values, maintaining online estimates of specific quantiles with provably low error bounds.\nClass MutableRate; // A convenient mutable metric for throughput measurement\nClass MutableRates; // Helper class to manage a group of mutable rate metrics This class synchronizes all accesses to the metrics it contains, so it should not be used in situations where there is high contention on the metrics.\nClass MutableRatesWithAggregation; // Helper class to manage a group of mutable rate metrics.\nClass MutableRollingAverages; // This class maintains a group of rolling average metrics.\nClass MutableStat; // A mutable metric with stats.\nEnum DefaultMetricsSystem; // The default metrics system singleton.\n", "des": "A collection of library classes for implementing metrics sources"}
{"index": 1854, "repo": "spring-test-6.0.11", "code": "package web;\n\npackage web.client; // Contains client-side REST testing support.\npackage web.servlet; // Contains server-side support for testing Spring MVC applications.\npublic abstract class ModelAndViewAssert extends Object; // A collection of assertions intended to simplify testing scenarios dealing with Spring Web MVC ModelAndView objects.\n", "des": "Helper classes for unit tests based on Spring's web support."}
{"index": 1515, "repo": "spring-context-6.0.11", "code": "package support;\n\npublic abstract class AbstractApplicationContext extends org.springframework.core.io.DefaultResourceLoader implements ConfigurableApplicationContext; // Abstract implementation of the ApplicationContext interface.\npublic abstract class AbstractMessageSource extends MessageSourceSupport implements HierarchicalMessageSource; // Abstract implementation of the HierarchicalMessageSource interface, implementing common handling of message variants, making it easy to implement a specific strategy for a concrete MessageSource.\npublic abstract class AbstractRefreshableApplicationContext extends AbstractApplicationContext; // Base class for ApplicationContext implementations which are supposed to support multiple calls to AbstractApplicationContext.refresh(), creating a new internal bean factory instance every time.\npublic abstract class AbstractRefreshableConfigApplicationContext extends AbstractRefreshableApplicationContext implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // AbstractRefreshableApplicationContext subclass that adds common handling of specified config locations.\npublic abstract class AbstractResourceBasedMessageSource extends AbstractMessageSource; // Abstract base class for MessageSource implementations based on resource bundle conventions, such as ResourceBundleMessageSource and ReloadableResourceBundleMessageSource.\npublic abstract class AbstractXmlApplicationContext extends AbstractRefreshableConfigApplicationContext; // Convenient base class for ApplicationContext implementations, drawing configuration from XML documents containing bean definitions understood by an XmlBeanDefinitionReader.\npublic abstract class ApplicationObjectSupport extends Object implements ApplicationContextAware; // Convenient superclass for application objects that want to be aware of the application context, e.g.\npublic class ClassPathXmlApplicationContext extends AbstractXmlApplicationContext; // Standalone XML application context, taking the context definition files from the class path, interpreting plain paths as class path resource names that include the package path (e.g.\npublic class ConversionServiceFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.core.convert.ConversionService>, org.springframework.beans.factory.InitializingBean; // A factory providing convenient access to a ConversionService configured with converters appropriate for most environments.\npublic class DefaultLifecycleProcessor extends Object implements LifecycleProcessor, org.springframework.beans.factory.BeanFactoryAware; // Default implementation of the LifecycleProcessor strategy.\npublic class DefaultMessageSourceResolvable extends Object implements MessageSourceResolvable, Serializable; // Spring's default implementation of the MessageSourceResolvable interface.\n", "des": "Classes supporting the org.springframework.context package, such as abstract base classes for ApplicationContext implementations and a MessageSource implementation."}
{"index": 99, "repo": "ignite-core-2.15.0", "code": "package failover;\n\npackage failover.always; // Contains default \"always\" failover SPI.\npackage failover.jobstealing; // Contains job stealing failover SPI.\npackage failover.never; // Contains \"never\" failover SPI.\nInterface FailoverContext; // This interface defines a set of operations available to failover SPI one a given failed job.\nInterface FailoverSpi; // Failover SPI provides developer with ability to supply custom logic for handling failed execution of a grid job.\n", "des": "Contains APIs for failover SPI."}
{"index": 1038, "repo": "hadoop-aws-3.3.6", "code": "package impl;\n\nInterface BondedS3AStatisticsContext.S3AFSStatisticsSource; // This is the interface which an integration source must implement for the integration.\nClass AbstractS3AStatisticsSource; // Base class for implementing IOStatistics sources in the S3 module.\nClass AwsStatisticsCollector; // Collect statistics from the AWS SDK and forward to an instance of StatisticsFromAwsSdk and thence into the S3A statistics.\nClass BondedS3AStatisticsContext; // An S3A statistics context which is bonded to a S3AInstrumentation instance -inevitably that of an S3AFileSystem instance.\nClass CountingChangeTracker; // A change tracker which increments an atomic long.\nClass EmptyS3AStatisticsContext; // Special statistics context, all of whose context operations are no-ops.\nClass EmptyS3AStatisticsContext.EmptyMultipartUploaderStatistics; // Multipart Uploader.\nClass S3AMultipartUploaderStatisticsImpl; // Implementation of the uploader statistics.\nClass StatisticsFromAwsSdkImpl; // Hook up AWS SDK Statistics to the S3 counters.\n", "des": "Statistics collection for the S3A connector: implementation."}
{"index": 183, "repo": "ignite-core-2.15.0", "code": "package future;\n\nClass AsyncFutureListener<V>; // Wraps listener and executes it in specified executor.\nClass CountDownFuture;\nClass GridCompoundFuture<T,R>; // Future composed of multiple inner futures.\nClass GridCompoundIdentityFuture<T>; // Compound future with reducer which accepts and produces results of the same type.\nClass GridEmbeddedFuture<A,B>; // Future which waits for embedded future to complete and then asynchronously executes provided closure with embedded future result.\nClass GridFinishedFuture<T>; // Future that is completed at creation time.\nClass GridFutureAdapter<R>; // Future adapter.\nClass IgniteFinishedFutureImpl<V>;\nClass IgniteFutureImpl<V>; // Implementation of public API future.\nClass IgniteRemoteMapTask<T,R>; // Util task that will execute ComputeTask on a given node.\n", "des": "Future related classes."}
{"index": 1970, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package servlet;\n\n@AutoConfiguration(before=SecurityAutoConfiguration.class) @ConditionalOnClass({org.springframework.security.config.annotation.web.configuration.EnableWebSecurity.class,org.springframework.security.oauth2.client.registration.ClientRegistration.class}) @ConditionalOnWebApplication(type=SERVLET) @Import({org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientRegistrationRepositoryConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2WebSecurityConfiguration.class}) public class OAuth2ClientAutoConfiguration extends Object; // Auto-configuration for OAuth client support.\n", "des": "Auto-configuration for Spring Security's OAuth 2 client."}
{"index": 1185, "repo": "commons-math3-3.6.1", "code": "package nonstiff;\n\nInterface FieldButcherArrayProvider<T extends RealFieldElement<T>>; // This interface represents an integrator based on Butcher arrays.\nClass AdamsBashforthFieldIntegrator<T extends RealFieldElement<T>>; // This class implements explicit Adams-Bashforth integrators for Ordinary Differential Equations.\nClass AdamsBashforthIntegrator; // This class implements explicit Adams-Bashforth integrators for Ordinary Differential Equations.\nClass AdamsFieldIntegrator<T extends RealFieldElement<T>>; // Base class for Adams-Bashforth and Adams-Moulton integrators.\nClass AdamsIntegrator; // Base class for Adams-Bashforth and Adams-Moulton integrators.\nClass AdamsMoultonFieldIntegrator<T extends RealFieldElement<T>>; // This class implements implicit Adams-Moulton integrators for Ordinary Differential Equations.\nClass AdamsMoultonIntegrator; // This class implements implicit Adams-Moulton integrators for Ordinary Differential Equations.\nClass AdamsNordsieckFieldTransformer<T extends RealFieldElement<T>>; // Transformer to Nordsieck vectors for Adams integrators.\nClass AdamsNordsieckTransformer; // Transformer to Nordsieck vectors for Adams integrators.\nClass AdaptiveStepsizeFieldIntegrator<T extends RealFieldElement<T>>; // This abstract class holds the common part of all adaptive stepsize integrators for Ordinary Differential Equations.\nClass AdaptiveStepsizeIntegrator; // This abstract class holds the common part of all adaptive stepsize integrators for Ordinary Differential Equations.\nClass ClassicalRungeKuttaFieldIntegrator<T extends RealFieldElement<T>>; // This class implements the classical fourth order Runge-Kutta integrator for Ordinary Differential Equations (it is the most often used Runge-Kutta method).\n", "des": "This package provides classes to solve non-stiff Ordinary Differential Equations problems."}
{"index": 609, "repo": "org.apache.karaf.main-2.4.4", "code": "package wiring;\n\nInterface BundleCapability; // A capability that has been declared from a bundle revision.\nInterface BundleRequirement; // A requirement that has been declared from a bundle revision.\nInterface BundleRevision; // Bundle Revision.\nInterface BundleRevisions; // The bundle revisions of a bundle.\nInterface BundleWire; // A wire connecting a BundleCapability to a BundleRequirement.\nInterface BundleWiring; // A wiring for a bundle.\nInterface FrameworkWiring; // Query and modify wiring information for the framework.\n", "des": "Framework Wiring Package Version 1.1."}
{"index": 3783, "repo": "lucene-analysis-common-9.7.0", "code": "package et;\n\nClass EstonianAnalyzer; // Analyzer for Estonian.\n", "des": "Analyzer for Estonian."}
{"index": 3816, "repo": "lucene-analysis-common-9.7.0", "code": "package sr;\n\nClass SerbianAnalyzer; // Analyzer for Serbian.\nClass SerbianNormalizationFilter; // Normalizes Serbian Cyrillic and Latin characters to \"bald\" Latin.\nClass SerbianNormalizationFilterFactory; // Factory for SerbianNormalizationFilter.\nClass SerbianNormalizationRegularFilter; // Normalizes Serbian Cyrillic to Latin.\n", "des": "Analyzer for Serbian."}
{"index": 467, "repo": "jackson-core-2.15.2", "code": "package format;\n\nInterface InputAccessor; // Interface used to expose beginning of a data file to data format detection code.\nClass DataFormatDetector; // Simple helper class that allows data format (content type) auto-detection, given an ordered set of JsonFactory instances to use for actual low-level detection.\nClass DataFormatMatcher; // Result object constructed by DataFormatDetector when requested to detect format of given input data.\nClass InputAccessor.Std; // Basic implementation that reads data from given InputStream and buffers it as necessary.\nEnum MatchStrength; // Enumeration used to indicate strength of match between data format and piece of data (typically beginning of a data file).\n", "des": "Package that contains interfaces needed for dynamic, pluggable format (auto)detection; as well as basic utility classes for simple format detection functionality."}
{"index": 1961, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package netty;\n\n@AutoConfiguration @ConditionalOnClass(io.netty.util.NettyRuntime.class) @EnableConfigurationProperties(NettyProperties.class) public class NettyAutoConfiguration extends Object; // Auto-configuration for Netty.\n@ConfigurationProperties(prefix=\"spring.netty\") public class NettyProperties extends Object; // @ConfigurationProperties for the Netty engine.\npublic static enum NettyProperties.LeakDetection extends Enum<NettyProperties.LeakDetection>;\n", "des": "Auto-configuration for the Netty library."}
{"index": 3731, "repo": "lucene-queryparser-9.7.0", "code": "package builders;\n\nInterface QueryBuilder; // This interface is used by implementors classes that builds some kind of object from a query tree.\nClass QueryTreeBuilder; // This class should be used when there is a builder for each type of node.\n", "des": "Necessary classes to implement query builders."}
{"index": 3107, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface ArchiveContext; // Describes the context for visiting the entries within an archive\nInterface ArchiveDescriptor; // Contract for visiting an archive, which might be a jar, a zip, an exploded directory, etc.\nInterface ArchiveDescriptorFactory; // Contract for building ArchiveDescriptor instances.\nInterface ArchiveEntry; // Represent an entry in the archive.\nInterface ArchiveEntryHandler; // Handler for archive entries, based on the classified type of the entry\nInterface InputStreamAccess; // Contract for building InputStreams, especially in on-demand situations\nInterface JarFileEntryUrlAdjuster; // Optional contract for ArchiveDescriptorFactory implementations to implement to be able to adjust <jar-file/> URL's defined in persistence.xml files.\nClass AbstractArchiveDescriptor; // Base support for ArchiveDescriptor implementors.\nClass AbstractArchiveDescriptorFactory;\nClass ArchiveException; // Indicates a problem accessing or visiting the archive\n", "des": "Defines the SPI for support of \"scanning\" of \"archives\"."}
{"index": 2116, "repo": "spring-retry-2.0.2", "code": "package interceptor;\n\npublic class FixedKeyGenerator extends Object implements MethodArgumentsKeyGenerator;\npublic interface MethodArgumentsKeyGenerator; // Interface that allows method parameters to be identified and tagged by a unique key.\npublic interface MethodInvocationRecoverer<T>; // Strategy interface for recovery action when processing of an item fails.\npublic abstract class MethodInvocationRetryCallback<T,E extends Throwable> extends Object implements RetryCallback<T,E>; // Callback class for a Spring AOP reflective `MethodInvocation` that can be retried using a RetryOperations.\npublic interface NewMethodArgumentsIdentifier; // Strategy interface to distinguish new arguments from ones that have been processed before, e.g.\npublic interface Retryable; // Marker interface for proxies that are providing retryable behaviour.\npublic abstract class RetryInterceptorBuilder<T extends org.aopalliance.intercept.MethodInterceptor> extends Object; // Simplified facade to make it easier and simpler to build a StatefulRetryOperationsInterceptor or (stateless) RetryOperationsInterceptor by providing a fluent interface to defining the behavior on error.\npublic static class RetryInterceptorBuilder.CircuitBreakerInterceptorBuilder extends RetryInterceptorBuilder<StatefulRetryOperationsInterceptor>;\npublic static class RetryInterceptorBuilder.StatefulRetryInterceptorBuilder extends RetryInterceptorBuilder<StatefulRetryOperationsInterceptor>;\npublic static class RetryInterceptorBuilder.StatelessRetryInterceptorBuilder extends RetryInterceptorBuilder<RetryOperationsInterceptor>;\npublic class RetryOperationsInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor; // A MethodInterceptor that can be used to automatically retry calls to a method on a service if it fails.\npublic class StatefulRetryOperationsInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor; // A MethodInterceptor that can be used to automatically retry calls to a method on a service if it fails.\n", "des": "Infrastructure implementations of retry aop concerns."}
{"index": 2887, "repo": "spring-integration-core-6.1.2", "code": "package locks;\n\npublic final class DefaultLockRegistry extends Object implements LockRegistry; // Default implementation of LockRegistry which uses Masked Hashcode algorithm to obtain locks.\npublic interface ExpirableLockRegistry extends LockRegistry; // A LockRegistry implementing this interface supports the removal of aged locks that are not currently locked.\n@FunctionalInterface public interface LockRegistry; // Strategy for maintaining a registry of shared locks.\npublic final class PassThruLockRegistry extends Object implements LockRegistry; // The LockRegistry implementation which has no effect.\npublic interface RenewableLockRegistry extends LockRegistry; // A LockRegistry implementing this interface supports the renewal of the time to live of a lock.\n", "des": "Provides classes related to locking resources."}
{"index": 18, "repo": "commons-collections4-4.4", "code": "package comparators;\n\nClass BooleanComparator; // A Comparator for Boolean objects that can sort either true or false first.\nClass ComparableComparator<E extends Comparable<? super E>>; // A Comparator that compares Comparable objects.\nClass ComparatorChain<E>; // A ComparatorChain is a Comparator that wraps one or more Comparators in sequence.\nClass FixedOrderComparator<T>; // A Comparator which imposes a specific order on a specific set of Objects.\nClass NullComparator<E>; // A Comparator that will compare nulls to be either lower or higher than other objects.\nClass ReverseComparator<E>; // Reverses the order of another comparator by reversing the arguments to its compare method.\nClass TransformingComparator<I,O>; // Decorates another Comparator with transformation behavior.\nEnum FixedOrderComparator.UnknownObjectBehavior; // Unknown object behavior enum.\n", "des": "This package contains implementations of the Comparator interface."}
{"index": 3239, "repo": "opencms-core-15.0", "code": "package inherited;\n\nClass CmsContainerConfiguration; // A bean representing a single configuration entry for the inherited container configuration.\nClass CmsContainerConfigurationCache; // A cache class for storing inherited container configurations.\nClass CmsContainerConfigurationCacheState; // A cache class for storing inherited container configurations.\nClass CmsContainerConfigurationGroup; // A class which represents all the configuration entries which have been read from an inherited container configuration file.\nClass CmsContainerConfigurationParser; // A parser class which reads data from inherited container configuration files.\nClass CmsContainerConfigurationWriter; // A helper class for writing inherited container configuration back to a VFS file.\nClass CmsInheritanceGroupUtils; // Utility methods for inheritance groups which don't fit anywhere else.\nClass CmsInheritanceReference; // Reference to an container inheritance configuration.\nClass CmsInheritanceReferenceParser; // Parser class for parsing inheritance container references.\nClass CmsInheritedContainerState; // The state of an inherited container at a given point in the VFS tree.\n", "des": "Contains classes used for reading and caching inheritance groups."}
{"index": 2464, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package influx;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.influx.InfluxMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"influx\") @EnableConfigurationProperties(InfluxProperties.class) public class InfluxMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Influx.\n@ConfigurationProperties(prefix=\"management.influx.metrics.export\") public class InfluxProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring Influx metrics export.\n", "des": "Support for exporting actuator metrics to InfluxDB."}
{"index": 2731, "repo": "spring-batch-infrastructure-5.0.2", "code": "package ldif;\n\npackage ldif.builder; // Builders for LDIF related components.\npublic class LdifReader extends AbstractItemCountingItemStreamItemReader<org.springframework.ldap.core.LdapAttributes> implements ResourceAwareItemReaderItemStream<org.springframework.ldap.core.LdapAttributes>, org.springframework.beans.factory.InitializingBean; // The LdifReader is an adaptation of the FlatFileItemReader built around an LdifParser.\npublic class MappingLdifReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean; // The MappingLdifReader is an adaptation of the FlatFileItemReader built around an LdifParser.\npublic interface RecordCallbackHandler; // This interface can be used to operate on skipped records during open in the LdifReader and the MappingLdifReader.\npublic interface RecordMapper<T>; // This interface should be implemented to map LdapAttributes objects to POJOs.\n", "des": "This package contains the classes required for using the LdifParser in Spring LDAP."}
{"index": 3148, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package transaction;\n\npackage transaction.spi; // Extended SPI contracts for the resource-level transaction capabilities of Hibernate.\nClass LocalSynchronizationException; // Wraps an exception thrown from a \"local synchronization\" (one registered in the SynchronizationRegistry).\nClass NullSynchronizationException; // Indicates an attempt to register a null synchronization.\nClass TransactionRequiredForJoinException; // Indicates a call to TransactionCoordinator.explicitJoin() that requires an active transaction where there currently is none.\n", "des": "Defines the resource-level transaction capabilities of Hibernate, which revolves around the TransactionCoordinator contract."}
{"index": 2493, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package quartz;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration.class) @ConditionalOnClass(org.quartz.Scheduler.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.quartz.QuartzEndpoint.class) @EnableConfigurationProperties(QuartzEndpointProperties.class) public class QuartzEndpointAutoConfiguration extends Object; // Auto-configuration for QuartzEndpoint.\n@ConfigurationProperties(\"management.endpoint.quartz\") public class QuartzEndpointProperties extends Object; // Configuration properties for QuartzEndpoint.\n", "des": "Auto-configuration for actuator Quartz Scheduler concerns."}
{"index": 3592, "repo": "lucene-test-framework-9.7.0", "code": "package vector;\n\nClass ConfigurableMCodec; // This codec allows customization of the number of connections made for an hnsw index.\n", "des": "Codecs for testing different vector formats."}
{"index": 2264, "repo": "spring-vault-core-3.0.4", "code": "package domain;\n\npublic class Lease extends Object; // A lease abstracting the lease Id, duration and its renewability.\npublic class RequestedSecret extends Object; // Represents a requested secret from a specific Vault path associated with a lease RequestedSecret.Mode.\npublic static enum RequestedSecret.Mode extends Enum<RequestedSecret.Mode>;\n", "des": "Lease domain classes."}
{"index": 3233, "repo": "opencms-core-15.0", "code": "package rpc;\n\nAnnotation Type SynchronizedRpcRequest;\n", "des": "Contains the compile time classes required to allow synchronous RPC calls."}
{"index": 1990, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package web;\n\npackage web.client; // Auto-configuration for web clients.\npackage web.embedded; // Configuration for embedded reactive and servlet web servers.\npackage web.format; // Support classes for web-specific formatting.\npackage web.reactive; // Auto-configuration for reactive web servers and Spring WebFlux.\npackage web.servlet; // Auto-configuration for servlet web servers and Spring MVC.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.web.OnEnabledResourceChainCondition.class) public @interface ConditionalOnEnabledResourceChain; // @Conditional that checks whether the Spring resource handling chain is enabled.\npublic class ErrorProperties extends Object; // Configuration properties for web error handling.\npublic static enum ErrorProperties.IncludeAttribute extends Enum<ErrorProperties.IncludeAttribute>; // Include error attributes options.\npublic static enum ErrorProperties.IncludeStacktrace extends Enum<ErrorProperties.IncludeStacktrace>; // Include Stacktrace attribute options.\npublic static class ErrorProperties.Whitelabel extends Object;\n@ConfigurationProperties(prefix=\"server\", ignoreUnknownFields=true) public class ServerProperties extends Object; // @ConfigurationProperties for a web server (e.g.\npublic static enum ServerProperties.ForwardHeadersStrategy extends Enum<ServerProperties.ForwardHeadersStrategy>; // Strategies for supporting forward headers.\npublic static class ServerProperties.Jetty extends Object; // Jetty properties.\npublic static class ServerProperties.Jetty.Accesslog extends Object; // Jetty access log properties.\npublic static enum ServerProperties.Jetty.Accesslog.FORMAT extends Enum<ServerProperties.Jetty.Accesslog.FORMAT>; // Log format for Jetty access logs.\npublic static class ServerProperties.Jetty.Threads extends Object; // Jetty thread properties.\npublic static class ServerProperties.Netty extends Object; // Netty properties.\npublic static class ServerProperties.Reactive extends Object; // Reactive server properties.\npublic static class ServerProperties.Reactive.Session extends Object;\npublic static class ServerProperties.Servlet extends Object; // Servlet server properties.\npublic static class ServerProperties.Tomcat extends Object; // Tomcat properties.\npublic static class ServerProperties.Tomcat.Accesslog extends Object; // Tomcat access log properties.\n", "des": "Auto-configuration for common web concerns."}
{"index": 3787, "repo": "lucene-analysis-common-9.7.0", "code": "package fr;\n\nClass FrenchAnalyzer; // Analyzer for French language.\nClass FrenchLightStemFilter; // A TokenFilter that applies FrenchLightStemmer to stem French words.\nClass FrenchLightStemFilterFactory; // Factory for FrenchLightStemFilter.\nClass FrenchLightStemmer; // Light Stemmer for French.\nClass FrenchMinimalStemFilter; // A TokenFilter that applies FrenchMinimalStemmer to stem French words.\nClass FrenchMinimalStemFilterFactory; // Factory for FrenchMinimalStemFilter.\nClass FrenchMinimalStemmer; // Light Stemmer for French.\n", "des": "Analyzer for French."}
{"index": 2833, "repo": "spring-data-r2dbc-3.1.2", "code": "package event;\n\n@FunctionalInterface public interface AfterConvertCallback<T> extends EntityCallback<T>; // Callback being invoked after a domain object is materialized from a row when reading results.\n@FunctionalInterface public interface AfterSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered after save of a OutboundRow.\n@FunctionalInterface public interface BeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\n@FunctionalInterface public interface BeforeSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered before save of a row.\npublic class ReactiveAuditingEntityCallback extends Object implements BeforeConvertCallback<Object>, Ordered; // Reactive EntityCallback to populate auditing related fields on an entity about to be saved.\n", "des": "Mapping event callback infrastructure for the R2DBC row-to-object mapping subsystem."}
{"index": 1403, "repo": "spring-boot-actuator-3.1.1", "code": "package integration;\n\n@Endpoint(id=\"integrationgraph\") public class IntegrationGraphEndpoint extends Object; // @Endpoint to expose the Spring Integration graph.\npublic static class IntegrationGraphEndpoint.GraphDescriptor extends Object implements OperationResponseBody; // Description of a Graph.\n", "des": "Actuator support for Spring Integration."}
{"index": 3620, "repo": "solr-test-framework-9.3.0", "code": "package core;\n\nClass AbstractBadConfigTestBase;\nClass MockDirectoryFactory; // Opens a directory with LuceneTestCase.newDirectory()\nClass MockFSDirectoryFactory; // Opens a directory with LuceneTestCase.newFSDirectory(Path)\nClass MockQuerySenderListenerReqHandler;\nClass TrackingBackupRepository;\n", "des": "Factories for Mock classes that can be used in test configurations"}
{"index": 2612, "repo": "wicket-util-10.0.0-M1", "code": "package parsers;\n\npublic final class CommaSeparatedVariableParser extends ListParser; // Parses out strings separated by commas.\npublic final class IntegerVariableAssignmentParser extends MetaPatternParser; // Parses integer variable assignments, such as \"x = 9\" or \"x=9\".\npublic class ListParser extends MetaPatternParser; // Parses an arbitrary list format with a pattern for list entries and a pattern for list separators.\npublic abstract class MetaPatternParser extends Object; // Base class for various MetaPattern based parsers.\npublic final class TagNameParser extends MetaPatternParser; // Parses XML tag names and attribute names which may include optional namespaces like \"namespace:name\" or \"name\".\npublic final class VariableAssignmentParser extends MetaPatternParser; // Parses key value assignment statements like \"foo=bar\" but also supporting namespaces like \"wicket:foo=bar\".\npublic final class WordParser extends MetaPatternParser; // Matches a 'word' surrounded by whitespace.\n", "des": "Regular Expressions meta pattern parsers."}
{"index": 235, "repo": "nutch-2.4", "code": "package instances;\n\nClass InstancePanel;\nClass InstancesPage;\n", "des": "Contains instances pages classes for Web UI"}
{"index": 3219, "repo": "commons-configuration2-2.9.0", "code": "package ex;\n\nClass ConfigurationException; // Any exception that occurs while initializing a Configuration object.\nClass ConfigurationRuntimeException; // A configuration related runtime exception.\nClass ConversionException; // Thrown when a property is incompatible with the type requested.\n", "des": "This package contains all exception classes used by this library."}
{"index": 3580, "repo": "lucene-test-framework-9.7.0", "code": "package standard;\n\nClass EmojiTokenizationTestUnicode_12_1; // This class was automatically generated by generateEmojiTokenizationTest.pl.\nClass WordBreakTestUnicode_12_1_0; // This class was automatically generated by generateJavaUnicodeWordBreakTest.pl from: http://www.unicode.org/Public/12.1.0/ucd/auxiliary/WordBreakTest.txt\n", "des": "Classes to support StandardAnalyzer component testing."}
{"index": 3594, "repo": "lucene-test-framework-9.7.0", "code": "package index;\n\nInterface RandomIndexWriter.TestPoint; // Simple interface that is executed for each TP InfoStream component message.\nClass AlcoholicMergePolicy; // Merge policy for testing, it is like an alcoholic.\nClass AllDeletedFilterReader; // Filters the incoming reader and makes all documents appear deleted.\nClass AssertingDirectoryReader; // A DirectoryReader that wraps all its subreaders with AssertingLeafReader\nClass AssertingLeafReader; // A FilterLeafReader that can be used to apply additional checks for tests.\nClass AssertingLeafReader.AssertingBinaryDocValues; // Wraps a BinaryDocValues but with additional asserts\nClass AssertingLeafReader.AssertingBits; // Wraps a Bits but with additional asserts\nClass AssertingLeafReader.AssertingFields; // Wraps a Fields but with additional asserts\nClass AssertingLeafReader.AssertingImpactsEnum; // Wraps a ImpactsEnum with additional checks\nClass AssertingLeafReader.AssertingNumericDocValues; // Wraps a NumericDocValues but with additional asserts\nClass AssertingLeafReader.AssertingPointValues; // Wraps a SortedSetDocValues but with additional asserts\nClass AssertingLeafReader.AssertingPostingsEnum; // Wraps a docsenum with additional checks\nClass AssertingLeafReader.AssertingSortedDocValues; // Wraps a SortedDocValues but with additional asserts\nClass AssertingLeafReader.AssertingSortedNumericDocValues; // Wraps a SortedNumericDocValues but with additional asserts\nClass AssertingLeafReader.AssertingSortedSetDocValues; // Wraps a SortedSetDocValues but with additional asserts\nClass AssertingLeafReader.AssertingStoredFields; // Wraps a StoredFields but with additional asserts\nClass AssertingLeafReader.AssertingTerms; // Wraps a Terms but with additional asserts\nClass AssertingLeafReader.AssertingTermVectors; // Wraps a TermVectors but with additional asserts\nClass BaseCompoundFormatTestCase; // Abstract class to do basic tests for a compound format.\nClass BaseCompressingDocValuesFormatTestCase; // Extends BaseDocValuesFormatTestCase to add compression checks.\nClass BaseDocValuesFormatTestCase; // Abstract class to do basic tests for a docvalues format.\nClass BaseFieldInfoFormatTestCase; // Abstract class to do basic tests for fis format.\n", "des": "Support for testing of indexes."}
{"index": 1322, "repo": "groovy-all-4.0.13", "code": "package binding;\n\npublic abstract class AbstractFullBinding extends Object implements FullBinding;\npublic class AggregateBinding extends Object implements BindingUpdatable; // An aggregation of multiple bindings\npublic class BindingProxy extends GroovyObjectSupport implements BindingUpdatable; // This class returns half bound FullBindings on the source half to the model object for every property reference (and I do mean every, valid or not, queried before or not).\npublic interface BindingUpdatable;\npublic class BindPath extends Object; // The bind path object.\npublic class ClosureSourceBinding extends Object implements SourceBinding;\npublic class ClosureTriggerBinding extends Object implements TriggerBinding, SourceBinding;\npublic class EventTriggerBinding extends Object implements TriggerBinding;\npublic interface FullBinding extends BindingUpdatable;\npublic class MutualPropertyBinding extends Object implements FullBinding;\npublic class PropertyBinding extends Object implements SourceBinding, TargetBinding, TriggerBinding;\npublic static enum PropertyBinding.UpdateStrategy extends Enum<PropertyBinding.UpdateStrategy>;\npublic class PropertyChangeProxyTargetBinding extends Object implements TargetBinding;\npublic class PropertyPathFullBinding extends AbstractFullBinding implements PropertyChangeListener; // A property path full binding\npublic interface SourceBinding;\npublic class SwingTimerTriggerBinding extends Object implements TriggerBinding;\npublic interface TargetBinding;\npublic interface TriggerBinding;\n", "des": "Classes related to property binding."}
{"index": 965, "repo": "spring-ws-3.0.10.RELEASE", "code": "package server;\n\nClass AbstractActionEndpointMapping; // Abstract base class for WS-Addressing Action-mapped EndpointMapping implementations.\nClass AbstractActionMethodEndpointMapping; // Abstract base class for WS-Addressing Action-mapped EndpointMapping implementations that map to MethodEndpoints.\nClass AbstractAddressingEndpointMapping; // Abstract base class for EndpointMapping implementations that handle WS-Addressing.\nClass AnnotationActionEndpointMapping; // Implementation of the EndpointMapping interface that uses the @Action annotation to map methods to a WS-Addressing Action header.\nClass SimpleActionEndpointMapping; // Implementation of the EndpointMapping interface to map from WS-Addressing Action Message Addressing Property to endpoint beans.\n", "des": "Contains servers-side WS-Addressing support, in the form of EndpointMappings."}
{"index": 947, "repo": "spring-ws-3.0.10.RELEASE", "code": "package mime;\n\nInterface Attachment; // Represents an attachment to a MimeMessage\nInterface MimeMessage; // Represents a Web service message with MIME attachments.\nClass AbstractMimeMessage; // Abstract implementation of the MimeMessage interface.\nClass AttachmentException; // Exception thrown when a MIME attachment could not be accessed.\n", "des": "Provides MIME functionality for use the Spring Web Services framework."}
{"index": 2281, "repo": "spring-data-elasticsearch-5.1.2", "code": "package highlight;\n\npublic class Highlight extends Object;\npublic abstract class HighlightCommonParameters extends Object;\npublic abstract static class HighlightCommonParameters.HighlightCommonParametersBuilder<SELF extends HighlightCommonParameters.HighlightCommonParametersBuilder<SELF>> extends Object;\npublic class HighlightField extends Object;\npublic class HighlightFieldParameters extends HighlightCommonParameters;\npublic static final class HighlightFieldParameters.HighlightFieldParametersBuilder extends HighlightCommonParameters.HighlightCommonParametersBuilder<HighlightFieldParameters.HighlightFieldParametersBuilder>;\npublic class HighlightParameters extends HighlightCommonParameters;\npublic static final class HighlightParameters.HighlightParametersBuilder extends HighlightCommonParameters.HighlightCommonParametersBuilder<HighlightParameters.HighlightParametersBuilder>;\n", "des": "classes to define highlight settings parameters of a query"}
{"index": 3237, "repo": "opencms-core-15.0", "code": "package formatters;\n\nClass CmsFormatterBeanParser; // Parses formatter beans from formatter configuration XML contents.\nClass CmsFormatterChangeSet; // This class represents the changes which can be made to formatters in a sitemap configuration file.\nClass CmsFormatterConfigurationCache; // A cache object which holds a collection of formatter configuration beans read from the VFS.\nClass CmsFormatterConfigurationCacheState; // Represents the currently cached collection of all formatter beans extracted from formatter configuration files.\nClass CmsFormatterIndex; // Helper class for keeping track of which keys map to which formatters, and which formatters are active, when evaluating the sitemap configuration.\nClass CmsSettingConfiguration; // Contains the setting-related data for a formatter bean.\nClass CmsSharedSettingKey; // A pair consisting of the include name of a setting definition and the formatter key (possibly null) for which the setting should be used, for use as a map key in a map of setting definitions.\nClass CmsFormatterBeanParser.ParseException; // Exception for the errors in the configuration file not covered by other exception types.\n", "des": "Classes for handling formatter configurations."}
{"index": 1566, "repo": "spring-restdocs-core-3.0.0", "code": "package hypermedia;\n\npublic abstract class HypermediaDocumentation extends Object; // Static factory methods for documenting a RESTful API that utilizes Hypermedia.\npublic class Link extends Object; // Representation of a link used in a Hypermedia-based API.\npublic class LinkDescriptor extends IgnorableDescriptor<LinkDescriptor>; // A description of a link found in a hypermedia API.\npublic interface LinkExtractor; // A LinkExtractor is used to extract links from a JSON response.\npublic class LinksSnippet extends TemplatedSnippet; // A Snippet that documents a RESTful resource's links.\n", "des": "Documenting a RESTful API that uses hypermedia."}
{"index": 493, "repo": "beam-sdks-java-core-2.49.0", "code": "package utils;\n\nInterface ByteBuddyUtils.TypeConversionsFactory;\nInterface FieldValueTypeSupplier; // A naming policy for schema fields.\nInterface RowSelector; // A selector interface for extracting fields from a row.\nClass AutoValueUtils; // Utilities for managing AutoValue schemas.\nClass AvroUtils; // Avro related classes are deprecated in module beam-sdks-java-core and will be eventually removed.\nClass AvroUtils.AvroConvertType;\nClass AvroUtils.AvroConvertValueForGetter;\nClass AvroUtils.AvroConvertValueForSetter;\nClass AvroUtils.FixedBytesField; // Wrapper for fixed byte fields.\nClass AvroUtils.TypeWithNullability; // Unwrap an AVRO schema into the base type an whether it is nullable.\nClass ByteBuddyUtils;\nClass ByteBuddyUtils.ConvertType; // Give a Java type, returns the Java type expected for use with Row.\nClass ByteBuddyUtils.ConvertValueForGetter; // Takes a StackManipulation that returns a value.\nClass ByteBuddyUtils.ConvertValueForSetter; // Row is going to call the setter with its internal Java type, however the user object being set might have a different type internally.\nClass ByteBuddyUtils.DefaultTypeConversionsFactory;\nClass ByteBuddyUtils.InjectPackageStrategy; // A naming strategy for ByteBuddy classes.\nClass ByteBuddyUtils.TransformingMap<K1,V1,K2,V2>;\nClass ByteBuddyUtils.TypeConversion<T>;\nClass ConvertHelpers; // Helper functions for converting between equivalent schema types.\nClass ConvertHelpers.ConvertedSchemaInformation<T>; // Return value after converting a schema.\nClass JavaBeanUtils; // A set of utilities to generate getter and setter classes for JavaBean objects.\nClass JsonUtils; // Utils to convert JSON records to Beam Row.\nClass POJOUtils; // A set of utilities to generate getter and setter classes for POJOs.\nClass ReflectUtils; // A set of reflection helper methods.\nClass ReflectUtils.ClassWithSchema; // Represents a class and a schema.\nClass SchemaZipFold<T>; // Visitor that zips schemas, and accepts pairs of fields and their types.\nClass SchemaZipFold.Context; // Context referring to a current position in a schema.\n", "des": "Defines utilities for deailing with schemas."}
{"index": 811, "repo": "lucene-analyzers-common-8.11.2", "code": "package te;\n\nClass TeluguAnalyzer; // Analyzer for Telugu.\nClass TeluguNormalizationFilter; // A TokenFilter that applies TeluguNormalizer to normalize the orthography.\nClass TeluguNormalizationFilterFactory; // Factory for TeluguNormalizationFilter.\nClass TeluguNormalizer; // Normalizer for Telugu.\nClass TeluguStemFilter; // A TokenFilter that applies TeluguStemmer to stem Telugu words.\nClass TeluguStemFilterFactory; // Factory for TeluguStemFilter.\nClass TeluguStemmer; // Stemmer for Telugu.\n", "des": "Analyzer for Telugu Language."}
{"index": 1278, "repo": "spring-core-6.0.11", "code": "package log;\n\npublic class LogAccessor extends Object; // A convenient accessor for Commons Logging, providing not only CharSequence based log methods but also Supplier based variants for use with Java 8 lambda expressions.\npublic final class LogDelegateFactory extends Object; // Factory for common Log delegates with Spring's logging conventions.\npublic abstract class LogFormatUtils extends Object; // Utility methods for formatting and logging messages.\npublic abstract class LogMessage extends Object implements CharSequence; // A simple log message type for use with Commons Logging, allowing for convenient lazy resolution of a given Supplier instance (typically bound to a lambda expression) or a printf-style format string (String.format(java.lang.String, java.lang.Object...)) in its LogMessage.toString().\n", "des": "Useful delegates for Spring's logging conventions."}
{"index": 806, "repo": "lucene-analyzers-common-8.11.2", "code": "package snowball;\n\nClass SnowballFilter; // A filter that stems words using a Snowball-generated stemmer.\nClass SnowballPorterFilterFactory; // Factory for SnowballFilter, with configurable language\n", "des": "TokenFilter and Analyzer implementations that use Snowball stemmers."}
{"index": 977, "repo": "spring-ws-3.0.10.RELEASE", "code": "package callback;\n\nClass AbstractWsPasswordCallbackHandler; // Abstract base class for CallbackHandler implementations that handle WSPasswordCallback callbacks.\nClass KeyStoreCallbackHandler; // Callback handler that uses Java Security KeyStores to handle cryptographic callbacks.\nClass SimplePasswordValidationCallbackHandler; // Simple callback handler that validates passwords against a in-memory Properties object.\nClass SpringSecurityPasswordValidationCallbackHandler; // Callback handler that validates a plain text or digest password using an Spring Security UserDetailsService.\nClass UsernameTokenPrincipalCallback; // Underlying security services instantiate and pass a UsernameTokenPrincipalCallback to the handle method of a CallbackHandler to pass a security WSUsernameTokenPrincipal.\n", "des": "Contains CallbackHandler implementations for WSS4J 2.0."}
{"index": 2507, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package web;\n\npackage web.exchanges; // Auto-configuration for actuator HTTP exchanges.\npackage web.jersey; // Configuration for a Jersey-based management context.\npackage web.mappings; // Classes for auto-configuration of actuator web request mapping concerns.\npackage web.reactive; // Configuration for a WebFlux-based management context.\npackage web.server; // Actuator web server support.\npackage web.servlet; // Actuator Spring MVC support.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Configuration public @interface ManagementContextConfiguration; // Specialized @Configuration class that defines configuration specific for the management context.\npublic final class ManagementContextFactory extends Object; // Factory for creating a separate management context when the management web server is running on a different port to the main application.\npublic enum ManagementContextType extends Enum<ManagementContextType>; // Enumeration of management context types.\n", "des": "Core classes for auto-configuration of actuator web concerns."}
{"index": 576, "repo": "commons-collections-3.2.2", "code": "package bidimap;\n\nClass AbstractBidiMapDecorator; // Provides a base decorator that enables additional functionality to be added to a BidiMap via decoration.\nClass AbstractDualBidiMap; // Abstract BidiMap implemented using two maps.\nClass AbstractDualBidiMap.BidiMapIterator; // Inner class MapIterator.\nClass AbstractDualBidiMap.EntrySet; // Inner class EntrySet.\nClass AbstractDualBidiMap.EntrySetIterator; // Inner class EntrySetIterator.\nClass AbstractDualBidiMap.KeySet; // Inner class KeySet.\nClass AbstractDualBidiMap.KeySetIterator; // Inner class KeySetIterator.\nClass AbstractDualBidiMap.MapEntry; // Inner class MapEntry.\nClass AbstractDualBidiMap.Values; // Inner class Values.\nClass AbstractDualBidiMap.ValuesIterator; // Inner class ValuesIterator.\nClass AbstractDualBidiMap.View; // Inner class View.\nClass AbstractOrderedBidiMapDecorator; // Provides a base decorator that enables additional functionality to be added to an OrderedBidiMap via decoration.\nClass AbstractSortedBidiMapDecorator; // Provides a base decorator that enables additional functionality to be added to a SortedBidiMap via decoration.\nClass DualHashBidiMap; // Implementation of BidiMap that uses two HashMap instances.\nClass DualTreeBidiMap; // Implementation of BidiMap that uses two TreeMap instances.\nClass DualTreeBidiMap.BidiOrderedMapIterator; // Inner class MapIterator.\nClass DualTreeBidiMap.ViewMap; // Internal sorted map view.\nClass TreeBidiMap; // Red-Black tree-based implementation of BidiMap where all objects added implement the Comparable interface.\nClass UnmodifiableBidiMap; // Decorates another BidiMap to ensure it can't be altered.\nClass UnmodifiableOrderedBidiMap; // Decorates another OrderedBidiMap to ensure it can't be altered.\nClass UnmodifiableSortedBidiMap; // Decorates another SortedBidiMap to ensure it can't be altered.\n", "des": "This package contains implementations of the BidiMap, OrderedBidiMap and SortedBidiMap interfaces."}
{"index": 1352, "repo": "spring-integration-stream-6.1.2", "code": "package stream;\n\npackage stream.config; // Provides classes for configuration - parsers, namespace handlers.\npublic class ByteStreamReadingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<byte[]>; // A pollable source for receiving bytes from an InputStream.\npublic class ByteStreamWritingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler; // A MessageHandler that writes a byte array to an OutputStream.\npublic class CharacterStreamReadingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<String> implements org.springframework.context.ApplicationEventPublisherAware; // A pollable source for Readers.\npublic class CharacterStreamWritingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler; // A MessageHandler that writes characters to a Writer.\npublic class StreamClosedEvent extends org.springframework.integration.events.IntegrationEvent; // Application event published when EOF is detected on a stream.\n", "des": "Base package for stream support."}
{"index": 3042, "repo": "spring-web-6.0.11", "code": "package server;\n\npackage server.adapter; // Implementations to adapt to the underlying org.springframework.http.client.reactive reactive HTTP adapter and HttpHandler.\npackage server.handler; // Provides common WebHandler implementations and a WebHandlerDecorator.\npackage server.i18n; // Locale related support classes.\npackage server.session; // Auxiliary interfaces and implementation classes for WebSession support.\npublic class MethodNotAllowedException extends ResponseStatusException; // Exception for errors that fit response status 405 (method not allowed).\npublic class MissingRequestValueException extends ServerWebInputException; // ServerWebInputException subclass that indicates a missing request value such as a request header, cookie value, query parameter, etc.\npublic class NotAcceptableStatusException extends ResponseStatusException; // Exception for errors that fit response status 406 (not acceptable).\npublic class ResponseStatusException extends ErrorResponseException; // Subclass of ErrorResponseException that accepts a \"reason\", and by default maps that to the \"detail\" of the ProblemDetail.\npublic class ServerErrorException extends ResponseStatusException; // Exception for an HttpStatus.INTERNAL_SERVER_ERROR that exposes extra information about a controller method that failed, or a controller method argument that could not be resolved.\npublic interface ServerWebExchange; // Contract for an HTTP request-response interaction.\npublic static interface ServerWebExchange.Builder; // Builder for mutating an existing ServerWebExchange.\npublic class ServerWebExchangeDecorator extends Object implements ServerWebExchange; // A convenient base class for classes that need to wrap another ServerWebExchange.\npublic class ServerWebInputException extends ResponseStatusException; // Exception for errors that fit response status 400 (bad request) for use in Spring Web applications.\npublic class UnsatisfiedRequestParameterException extends ServerWebInputException; // ServerWebInputException subclass that indicates an unsatisfied parameter condition, as typically expressed using an @RequestMapping annotation at the @Controller type level.\npublic class UnsupportedMediaTypeStatusException extends ResponseStatusException; // Exception for errors that fit response status 415 (unsupported media type).\npublic interface WebExceptionHandler; // Contract for handling exceptions during web server exchange processing.\npublic interface WebFilter; // Contract for interception-style, chained processing of Web requests that may be used to implement cross-cutting, application-agnostic requirements such as security, timeouts, and others.\n", "des": "Core interfaces and classes for Spring's generic, reactive web support."}
{"index": 3299, "repo": "opencms-core-15.0", "code": "package monitor;\n\nInterface I_CmsMemoryMonitorable; // Describes an object that can be memory monitored.\nClass CmsGroupListCache; // Cache for users' groups and data derived from those groups, like role membership.\nClass CmsMemoryMonitor; // Monitors OpenCms memory consumption.\nClass CmsMemoryMonitorConfiguration; // Memory Monitor configuration class.\nClass CmsMemoryStatus; // Data structure for dealing with memory status information.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsMemoryMonitor.CacheType; // Cache types.\n", "des": "Contains functions to monitor the OpenCms system status."}
{"index": 2157, "repo": "wicket-core-10.0.0-M1", "code": "package filter;\n\npublic final class EnclosureHandler extends AbstractMarkupFilter implements IComponentResolver; // This is a markup inline filter.\npublic class HeadForceTagIdHandler extends AbstractMarkupFilter; // Handler that sets unique tag id for every inline script and style element in <wicket:head>, unless the element already has one.\npublic final class HtmlHandler extends AbstractMarkupFilter; // This is a markup inline filter.\npublic final class HtmlHeaderSectionHandler extends AbstractMarkupFilter; // This is a markup inline filter.\npublic final class HtmlProblemFinder extends AbstractMarkupFilter; // This is a markup inline filter which by default is not added to the list of markup filter.\npublic final class InlineEnclosureHandler extends AbstractMarkupFilter implements IComponentResolver; // This is a markup inline filter.\npublic class OpenCloseTagExpander extends AbstractMarkupFilter; // MarkupFilter that expands certain open-close tag as separate open and close tags.\npublic final class RelativePathPrefixHandler extends AbstractMarkupFilter implements IComponentResolver; // The purpose of this filter is to make all \"href\", \"src\" and \"background\" attributes found in the markup which contain a relative URL like \"myDir/myPage.gif\" actually resolve in the output HTML, by prefixing them with with an appropriate path to make the link work properly, even if the current page is being displayed at a mounted URL or whatever.\npublic final class RootMarkupFilter extends AbstractMarkupFilter; // This is the root of all filters, which retrieves the next xml element from the xml parser.\npublic final class StyleAndScriptIdentifier extends AbstractMarkupFilter; // An IMarkupFilter that wraps the body of all <style> elements and <script> elements which are plain JavaScript in CDATA blocks.\npublic class WicketContainerTagHandler extends AbstractMarkupFilter; // This markup filter warns if a wicket:container tag has an attribute besides wicket:id.\npublic class WicketLinkTagHandler extends AbstractMarkupFilter implements IComponentResolver; // This is a markup inline filter.\npublic final class WicketMessageTagHandler extends AbstractMarkupFilter implements IComponentResolver; // This is a markup inline filter and a component resolver.\npublic static class WicketMessageTagHandler.AttributeLocalizer extends Behavior; // Attribute localizing behavior.\npublic final class WicketNamespaceHandler extends AbstractMarkupFilter; // This is a markup inline filter.\n", "des": "Default parsing extensions."}
{"index": 3407, "repo": "commons-imaging-1.0-alpha3", "code": "package constants;\n\nClass AdobePageMaker6TagConstants; // TIFF specification supplement 1 Enhancements for Adobe PageMaker(R) 6.0 software http://partners.adobe.com/public/developer/en/tiff/TIFFPM6.pdf\nClass AdobePhotoshopTagConstants; // TIFF specification supplement 2 Adobe Photoshop (R) TIFF Technical Notes http://partners.adobe.com/public/developer/en/tiff/TIFFphotoshop.pdf\nClass AliasSketchbookProTagConstants; // Alias Sketchbook Pro multi-layer TIFF http://www.awaresystems.be/imaging/tiff/tifftags/docs/alias.html\nClass DcfTagConstants; // Design rule for Camera Filesystem http://www.exif.org/dcf.PDF\nClass DngTagConstants; // Digital Negative (DNG) Specification http://www.adobe.com/products/dng/pdfs/dng_spec_1_3_0_0.pdf\nClass ExifTagConstants; // References: http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/EXIF.html http://tiki-lounge.com/~raf/tiff/fields.html http://www.awaresystems.be/imaging/tiff/tifftags.html \"Stonits\": http://www.anyhere.com/gward/pixformat/tiffluv.html\nClass GdalLibraryTagConstants; // GDAL library.\nClass GeoTiffTagConstants; // Geo Tiff.\nClass GpsTagConstants;\nClass HylaFaxTagConstants;\nClass MicrosoftHdPhotoTagConstants; // Microsoft's HDP/WDP file format.\nClass MicrosoftTagConstants; // Largely undocumented and derived by experimentation.\nClass MolecularDynamicsGelTagConstants; // Molecular Dynamics GEL file format http://www.awaresystems.be/imaging/tiff/tifftags/docs/gel.html\nClass OceScanjobTagConstants; // Oce Scanjob.\n", "des": "TIFF constants."}
{"index": 2890, "repo": "spring-integration-core-6.1.2", "code": "package micrometer;\n\npublic class MicrometerMetricsCaptor extends Object implements MetricsCaptor; // The Micrometer implementation of MetricsCaptor.\nprotected abstract static class MicrometerMetricsCaptor.AbstractMeter<M extends io.micrometer.core.instrument.Meter> extends Object implements MeterFacade;\nprotected static class MicrometerMetricsCaptor.MicroCounter extends MicrometerMetricsCaptor.AbstractMeter<io.micrometer.core.instrument.Counter> implements CounterFacade;\nprotected static class MicrometerMetricsCaptor.MicroCounterBuilder extends Object implements MetricsCaptor.CounterBuilder;\nprotected static class MicrometerMetricsCaptor.MicroGauge extends MicrometerMetricsCaptor.AbstractMeter<io.micrometer.core.instrument.Gauge> implements GaugeFacade;\nprotected static class MicrometerMetricsCaptor.MicroGaugeBuilder extends Object implements MetricsCaptor.GaugeBuilder;\nprotected static class MicrometerMetricsCaptor.MicroTimer extends MicrometerMetricsCaptor.AbstractMeter<io.micrometer.core.instrument.Timer> implements TimerFacade;\nprotected static class MicrometerMetricsCaptor.MicroTimerBuilder extends Object implements MetricsCaptor.TimerBuilder;\n@Configuration(proxyBeanMethods=false) public class MicrometerMetricsCaptorConfiguration extends Object; // A Configuration to add a MicrometerMetricsCaptor.\npublic class MicrometerMetricsCaptorImportSelector extends Object implements org.springframework.context.annotation.ImportSelector; // An ImportSelector to conditionally add a MicrometerMetricsCaptorConfiguration bean when io.micrometer.core.instrument.MeterRegistry is present in classpath.\n", "des": "Provides classes to support the use of Micrometer for metrics."}
{"index": 1917, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package neo4j;\n\n@AutoConfiguration(before=TransactionAutoConfiguration.class, after=Neo4jAutoConfiguration.class) @ConditionalOnClass({org.neo4j.driver.Driver.class,org.springframework.data.neo4j.core.transaction.Neo4jTransactionManager.class,org.springframework.transaction.PlatformTransactionManager.class}) @EnableConfigurationProperties(Neo4jDataProperties.class) @ConditionalOnBean(org.neo4j.driver.Driver.class) public class Neo4jDataAutoConfiguration extends Object; // Auto-configuration for Spring Data Neo4j.\n@ConfigurationProperties(prefix=\"spring.data.neo4j\") public class Neo4jDataProperties extends Object; // Configuration properties for Spring Data Neo4j.\n@AutoConfiguration(after=Neo4jDataAutoConfiguration.class) @ConditionalOnClass({org.neo4j.driver.Driver.class,org.springframework.data.neo4j.core.ReactiveNeo4jTemplate.class,org.springframework.transaction.ReactiveTransactionManager.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(org.neo4j.driver.Driver.class) public class Neo4jReactiveDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's reactive Neo4j support.\n", "des": "Auto-configuration for Spring Data Neo4j."}
{"index": 3431, "repo": "hibernate-core-5.6.15.Final", "code": "package xsd;\n\nClass ConfigXsdSupport; // Support for XSD handling related to Hibernate's `cfg.xml` and JPA's `persistence.xml`.\nClass LocalXsdResolver; // When Hibernate loads an XSD we fully expect that to be resolved from our jar file via ClassLoader resource look-up.\nClass MappingXsdSupport; // Support for XSD handling related to Hibernate's `hbm.xml` and JPA's `orm.xml`.\nClass XsdDescriptor; // Representation of a locally resolved XSD\n", "des": "Support for XSD handling, specifically for ORM mappings (Hibernate's `hbm.xml` and JPA's `orm.xml`) and config files (Hibernate's `cfg.xml` and JPA's `persistence.xml`)"}
{"index": 2917, "repo": "spring-xml-4.0.5", "code": "package commons;\n\npublic class CommonsXsdSchema extends Object implements XsdSchema; // Implementation of the XsdSchema interface that uses Apache WS-Commons XML Schema.\npublic class CommonsXsdSchemaCollection extends Object implements XsdSchemaCollection, org.springframework.beans.factory.InitializingBean, org.springframework.context.ResourceLoaderAware; // Implementation of the XsdSchemaCollection that uses Apache WS-Commons XML Schema.\npublic class CommonsXsdSchemaException extends XsdSchemaException; // Commons XmlSchema version of the XsdSchemaException.\n", "des": "Contains a implementation of the XsdSchema interfaces that uses Apache WS-Commons XML Schema."}
{"index": 2548, "repo": "pulsar-common-3.0.0", "code": "package allocator;\n\npublic class PulsarByteBufAllocator extends Object; // Holder of a ByteBuf allocator.\n", "des": "Classes implementing pulsar allocator."}
{"index": 3699, "repo": "solr-core-9.3.0", "code": "package shardresultserializer;\n\nInterface ShardResultTransformer<T,​R>; // A ShardResultTransformer is responsible for transforming a grouped shard result into group related structures (such as TopGroups and SearchGroup) and visa versa.\nClass SearchGroupsResultTransformer; // Implementation for transforming SearchGroup into a NamedList structure and visa versa.\nClass TopGroupsResultTransformer; // Implementation for transforming TopGroups and TopDocs into a NamedList structure and vice versa.\n", "des": "Internal classes used to implement distributed result grouping"}
{"index": 1575, "repo": "spring-cloud-task-core-3.0.3", "code": "package dao;\n\npublic class JdbcTaskExecutionDao extends Object implements TaskExecutionDao; // Stores Task Execution Information to a JDBC DataSource.\npublic class MapTaskExecutionDao extends Object implements TaskExecutionDao; // Stores Task Execution Information to a in-memory map.\npublic interface TaskExecutionDao; // Data Access Object for task executions.\n", "des": "Interface DAO and default implementations for storing and retrieving data for tasks from a repository."}
{"index": 1203, "repo": "commons-math3-3.6.1", "code": "package special;\n\nClass BesselJ; // This class provides computation methods related to Bessel functions of the first kind.\nClass BesselJ.BesselJResult; // Encapsulates the results returned by BesselJ.rjBesl(double, double, int).\nClass Beta; // This is a utility class that provides computation methods related to the Beta family of functions.\nClass Erf; // This is a utility class that provides computation methods related to the error functions.\nClass Gamma; // This is a utility class that provides computation methods related to the Γ (Gamma) family of functions.\n", "des": "Implementations of special functions such as Beta and Gamma."}
{"index": 2139, "repo": "wicket-core-10.0.0-M1", "code": "package locator;\n\npublic final class EmptyResourceNameIterator extends ResourceNameIterator; // A ResourceNameIterator that doesn't find any resources.\npublic class ExtensionResourceNameIterator extends Object implements Iterator<String>; // Iterate over a set of extensions.\npublic interface IResourceNameIterator extends Iterator<String>; // Contains the logic to locate a resource based on a path, style (see Session), variation, locale and extension strings.\npublic interface IResourceStreamLocator; // Interface for code that locates resources, taking into account variations for locale and style.\npublic class LocaleResourceNameIterator extends Object implements Iterator<String>; // Given a Locale it'll iterate over all possible combinations of the attrs making up the Locale.\npublic class OsgiResourceStreamLocator extends ResourceStreamLocator; // OSGI specific resource stream factory\npublic class ResourceNameIterator extends Object implements IResourceNameIterator; // Contains the logic to locate a resource based on a path, style (see Session), variation, locale and extension strings.\npublic class ResourceStreamLocator extends Object implements IResourceStreamLocator; // Locates Wicket resources.\npublic class StyleAndVariationResourceNameIterator extends Object implements Iterator<String>; // Iterate over all possible combinations of style and variation\n", "des": "Locators for finding/ loading resources."}
{"index": 462, "repo": "commons-geometry-spherical-1.0", "code": "package twod;\n\nInterface BoundarySource2S; // Extension of the BoundarySource interface for spherical 2D space.\nClass AbstractGreatArcConnector; // Abstract class for joining collections of great arcs into connected paths.\nClass AbstractGreatArcConnector.ConnectableGreatArc; // Internal class for connecting GreatArcs into GreatArcPaths.\nClass BoundaryList2S; // BoundarySource2S implementation that uses boundaries stored in a list.\nClass ConvexArea2S; // Class representing a convex area in 2D spherical space.\nClass EmbeddedTreeGreatCircleSubset; // Class representing an arbitrary subset of the points on a great circle using a RegionBSPTree1S.\nClass GreatArc; // Class representing a single, convex angular interval in a GreatCircle.\nClass GreatArcPath; // Class representing a connected sequence of GreatArc instances.\nClass GreatArcPath.Builder; // Class used to build arc paths.\nClass GreatCircle; // Class representing a great circle on the 2-sphere.\nClass GreatCircles; // Class containing factory methods for constructing GreatCircle and GreatCircleSubset instances.\nClass GreatCircleSubset; // Class representing a subset of the points in a great circle.\nClass InteriorAngleGreatArcConnector; // Great arc connector that selects between multiple connection options based on the resulting interior angle.\nClass InteriorAngleGreatArcConnector.Maximize; // Implementation of InteriorAngleGreatArcConnector that chooses arc connections that produce the largest interior angles.\nClass InteriorAngleGreatArcConnector.Minimize; // Implementation of InteriorAngleGreatArcConnector that chooses arc connections that produce the smallest interior angles.\nClass Point2S; // This class represents a point on the 2-sphere.\nClass RegionBSPTree2S; // BSP tree representing regions in 2D spherical space.\nClass RegionBSPTree2S.RegionNode2S; // BSP tree node for two dimensional spherical space.\nClass Transform2S; // Implementation of the Transform interface for spherical 2D points.\n", "des": "This package provides basic geometry components on the 2-sphere."}
{"index": 542, "repo": "commons-geometry-core-1.0", "code": "package bsp;\n\nInterface AbstractBSPTree.SubtreeInitializer<N extends AbstractBSPTree.AbstractNode<?,?>>; // Interface used to initialize newly created BSP subtrees, consisting of a single parent node and two child nodes.\nInterface BSPSubtree<P extends Point<P>,N extends BSPTree.Node<P,N>>; // Interface for types that form the root of BSP subtrees.\nInterface BSPTree<P extends Point<P>,N extends BSPTree.Node<P,N>>; // Interface for Binary Space Partitioning (BSP) trees.\nInterface BSPTree.Node<P extends Point<P>,N extends BSPTree.Node<P,N>>; // Interface for Binary Space Partitioning (BSP) tree nodes.\nInterface BSPTreeVisitor<P extends Point<P>,N extends BSPTree.Node<P,N>>; // Interface for visiting the nodes in a BSPTree or BSPSubtree.\nClass AbstractBSPTree<P extends Point<P>,N extends AbstractBSPTree.AbstractNode<P,N>>; // Abstract class for Binary Space Partitioning (BSP) tree implementations.\nClass AbstractBSPTree.AbstractNode<P extends Point<P>,N extends AbstractBSPTree.AbstractNode<P,N>>; // Abstract implementation of BSPTree.Node.\nClass AbstractBSPTreeMergeOperator<P extends Point<P>,N extends AbstractBSPTree.AbstractNode<P,N>>; // Class containing the basic algorithm for merging two AbstractBSPTree instances.\nClass AbstractPartitionedRegionBuilder<P extends Point<P>,N extends AbstractRegionBSPTree.AbstractRegionNode<P,N>>; // Class encapsulating logic for building regions by inserting boundaries into a BSP tree containing structural cuts, i.e.\nClass AbstractRegionBSPTree<P extends Point<P>,N extends AbstractRegionBSPTree.AbstractRegionNode<P,N>>; // Abstract BSPTree specialized for representing regions of space.\nClass AbstractRegionBSPTree.AbstractRegionNode<P extends Point<P>,N extends AbstractRegionBSPTree.AbstractRegionNode<P,N>>; // BSPTree.Node implementation for use with AbstractRegionBSPTrees.\n", "des": "This package contains classes related to Binary Space Partitioning (BSP) trees."}
{"index": 3899, "repo": "solr-solrj-9.3.0", "code": "package annotation;\n\nAnnotation Type JsonProperty; // Provides a 1:1 mapping from jackson's annotation.\n", "des": "Annotations mapping to Jackson"}
{"index": 2479, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jpa;\n\n@Configuration(proxyBeanMethods=false) @AutoConfigureAfter({MetricsAutoConfiguration.class,org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnClass({jakarta.persistence.EntityManagerFactory.class,org.hibernate.SessionFactory.class,org.hibernate.stat.HibernateMetrics.class,io.micrometer.core.instrument.MeterRegistry.class}) @ConditionalOnBean({jakarta.persistence.EntityManagerFactory.class,io.micrometer.core.instrument.MeterRegistry.class}) public class HibernateMetricsAutoConfiguration extends Object implements org.springframework.beans.factory.SmartInitializingSingleton; // Auto-configuration for metrics on all available Hibernate EntityManagerFactory instances that have statistics enabled.\n", "des": "Auto-configuration for JPA metrics."}
{"index": 1043, "repo": "commons-io-2.13.0", "code": "package charset;\n\nClass CharsetDecoders; // Works with CharsetDecoder.\nClass CharsetEncoders; // Works with CharsetEncoder.\n", "des": "Provides classes to work with code from java.nio.charset."}
{"index": 753, "repo": "artemis-odb-2.3.0", "code": "package systems;\n\nClass DelayedEntityProcessingSystem; // Tracks cooldown per entity, processing entity when its timer runs out.\nClass DelayedIteratingSystem; // Tracks cooldown per entity, processing entity when its timer runs out.\nClass EntityProcessingSystem; // Entity reference iterating system.\nClass IntervalEntityProcessingSystem; // Process a subset of entities every x ticks.\nClass IntervalEntitySystem; // A system that processes entities at a interval in milliseconds.\nClass IntervalIteratingSystem; // Process a subset of entities every x ticks.\nClass IntervalSystem; // Entity system processed at a certain interval, without iteration implementation.\nClass IteratingSystem; // Iterates over EntitySubscription member entities by entity identity.\n", "des": "Entity systems."}
{"index": 2084, "repo": "spring-webmvc-6.0.11", "code": "package freemarker;\n\npublic interface FreeMarkerConfig; // Interface to be implemented by objects that configure and manage a FreeMarker Configuration object in a web environment.\npublic class FreeMarkerConfigurer extends org.springframework.ui.freemarker.FreeMarkerConfigurationFactory implements FreeMarkerConfig, org.springframework.beans.factory.InitializingBean, org.springframework.context.ResourceLoaderAware; // JavaBean to configure FreeMarker for web usage, via the \"configLocation\" and/or \"freemarkerSettings\" and/or \"templateLoaderPath\" properties.\npublic class FreeMarkerView extends AbstractTemplateView; // View using the FreeMarker template engine.\npublic class FreeMarkerViewResolver extends AbstractTemplateViewResolver; // Convenience subclass of UrlBasedViewResolver that supports FreeMarkerView (i.e.\n", "des": "Support classes for the integration of FreeMarker as Spring web view technology."}
{"index": 1496, "repo": "wicket-extensions-10.0.0-M1", "code": "package export;\n\npublic abstract class AbstractDataExporter extends Object implements IDataExporter; // An abstract helper implementation of IDataExporter.\npublic abstract class AbstractExportableColumn<T,S> extends AbstractColumn<T,S> implements IExportableColumn<T,S>; // A helper implementation of IExportableColumn.\npublic class CSVDataExporter extends AbstractDataExporter; // An IDataExporter that exports data to a CSV file.\npublic class ExportToolbar extends AbstractToolbar; // A toolbar that provides links to download the data represented by all IExportableColumns in the table exported to formats supported by the IDataExporters configured.\npublic static class ExportToolbar.DataExportResourceStreamWriter extends org.apache.wicket.util.resource.AbstractResourceStreamWriter; // An IResourceStreamWriter which writes the exportable data from a table to an output stream.\npublic interface IDataExporter extends org.apache.wicket.util.io.IClusterable; // Exports data provided by a IDataProvider as described by IExportableColumns.\npublic interface IExportableColumn<T,S> extends IColumn<T,S>; // An IColumn that can be exported.\n", "des": "Package for exporting data tables."}
{"index": 2457, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package atlas;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.atlas.AtlasMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"atlas\") @EnableConfigurationProperties(AtlasProperties.class) public class AtlasMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Atlas.\n@ConfigurationProperties(prefix=\"management.atlas.metrics.export\") public class AtlasProperties extends Object; // @ConfigurationProperties for configuring Atlas metrics export.\n", "des": "Support for exporting actuator metrics to Atlas."}
{"index": 3401, "repo": "commons-imaging-1.0-alpha3", "code": "package pcx;\n\nClass PcxConstants;\nClass PcxImageParser;\nClass PcxImagingParameters; // Parameters used by the Pcx format.\n", "des": "The PCX image format."}
{"index": 858, "repo": "calcite-core-1.34.0", "code": "package sql;\n\npackage sql.advise; // Provides hints and corrections for editing SQL statements.\npackage sql.ddl; // Parse tree for SQL DDL statements.\npackage sql.dialect; // SQL unparsers for JDBC dialects.\npackage sql.fun; // Defines the set of standard SQL row-level functions and operators.\npackage sql.parser; // Provides a SQL parser.\npackage sql.pretty; // Provides a pretty-printer for SQL statements.\npackage sql.type; // SQL type system.\npackage sql.util; // Utility classes for the SQL object model, parsing, and validation.\npackage sql.validate; // SQL validation.\nInterface SqlDialect.Context; // Information for creating a dialect.\nInterface SqlDialectFactory; // Creates a SqlDialect appropriate for a given database metadata object.\nInterface SqlLiteral.SqlSymbol;\nInterface SqlOperandCountRange; // A class that describes how many operands an operator can take.\nInterface SqlOperatorTable; // SqlOperatorTable defines a directory interface for enumerating and looking up SQL operators and functions.\nInterface SqlSpecialOperator.TokenSequence; // List of tokens: the input to a parser.\nInterface SqlSplittableAggFunction; // Aggregate function that can be split into partial aggregates.\nInterface SqlSplittableAggFunction.Registry<E>; // Collection in which one can register an element.\nInterface SqlTableFunction; // A function that returns a table.\nInterface SqlWriter; // A SqlWriter is the target to construct a SQL statement from a parse tree.\nInterface SqlWriter.Frame; // A Frame is a piece of generated text which shares a common indentation level.\nInterface SqlWriter.FrameType; // Frame type.\nInterface SqlWriterConfig; // Configuration for SqlWriter and SqlPrettyWriter.\nInterface Symbolizable; // Sub-class should be a Enum and can convert to a SqlLiteral.\nClass ExplicitOperatorBinding; // ExplicitOperatorBinding implements SqlOperatorBinding via an underlying array of known operand types.\nClass SqlAbstractDateTimeLiteral; // A SQL literal representing a DATE, TIME or TIMESTAMP value.\nClass SqlAccessType; // SqlAccessType is represented by a set of allowed access types.\nClass SqlAggFunction; // Abstract base class for the definition of an aggregate function: an operator which aggregates sets of values into a result.\n", "des": "Provides a SQL parser and object model."}
{"index": 1191, "repo": "commons-math3-3.6.1", "code": "package noderiv;\n\nClass AbstractSimplex; // This class implements the simplex concept.\nClass BOBYQAOptimizer; // Powell's BOBYQA algorithm.\nClass CMAESOptimizer; // An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES) for non-linear, non-convex, non-smooth, global function minimization.\nClass CMAESOptimizer.PopulationSize; // Population size.\nClass CMAESOptimizer.Sigma; // Input sigma values.\nClass MultiDirectionalSimplex; // This class implements the multi-directional direct search method.\nClass NelderMeadSimplex; // This class implements the Nelder-Mead simplex algorithm.\nClass PowellOptimizer; // Powell's algorithm.\nClass SimplexOptimizer; // This class implements simplex-based direct search optimization.\n", "des": "This package provides optimization algorithms that do not require derivatives."}
{"index": 2554, "repo": "pulsar-common-3.0.0", "code": "package io;\n\npublic class ConfigFieldDefinition extends Object; // Information about a Pulsar connector config field.\n", "des": "Configuration classes for IO."}
{"index": 989, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass SoapUtils; // Contains various utility methods for handling SOAP messages.\n", "des": "Classes supporting the org.springframework.ws.soap package."}
{"index": 3729, "repo": "lucene-queryparser-9.7.0", "code": "package ext;\n\nClass ExtendableQueryParser; // The ExtendableQueryParser enables arbitrary query parser extension based on a customizable field naming scheme.\nClass ExtensionQuery; // ExtensionQuery holds all query components extracted from the original query string like the query field and the extension query string.\nClass Extensions; // The Extensions class represents an extension mapping to associate ParserExtension instances with extension keys.\nClass Extensions.Pair<Cur,​Cud>; // This class represents a generic pair.\nClass ParserExtension; // This class represents an extension base class to the Lucene standard QueryParser.\n", "des": "Extendable QueryParser provides a simple and flexible extension mechanism by overloading query field names."}
{"index": 157, "repo": "ignite-core-2.15.0", "code": "package datastreamer;\n\nInterface DataStreamerCacheUpdaters.InternalUpdater; // Marker interface for updaters which do not need to unwrap cache objects.\nClass DataStreamerCacheUpdaters; // Bundled factory for cache updaters.\nClass DataStreamerEntry;\nClass DataStreamerImpl<K,V>; // Data streamer implementation.\nClass DataStreamerImpl.IsolatedUpdater; // Isolated receiver which only loads entry initial value.\nClass DataStreamerRequest;\nClass DataStreamerResponse;\nClass DataStreamProcessor<K,V>; // Data stream processor.\n", "des": "Data streamer processor."}
{"index": 715, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package support;\n\npackage support.tuple; // Tuples provide a type-safe way to specify multiple parameters.\nInterface Consumer<T>; // Implementations accept a given value and perform work on the argument.\nInterface Function<T,R>; // Implementations of this class perform work on the given parameter and return a result of an optionally different type.\nInterface GenericHandler<P>; // A functional interface to specify MessageHandler logic with Java 8 Lambda expression: .<Integer>handle((p, h) -> p / 2)\nClass BeanNameMessageProcessor<T>; // An \"artificial\" MessageProcessor for lazy-load of target bean by its name.\nClass FixedSubscriberChannelPrototype; // An \"artificial\" MessageChannel implementation which will be unwrapped to the FixedSubscriberChannel on the bean registration phase.\nClass FunctionExpression<S>; // An Expression that simply invokes Function.apply(Object) on its provided Function.\nClass MapBuilder<B extends MapBuilder<B,K,V>,K,V>; // A Builder pattern implementation for the Map.\nClass MessageChannelReference; // An \"artificial\" MessageChannel implementation which will be unwrapped to the MessageChannel bean on the bean registration phase.\nClass MessageProcessorMessageSource; // The MessageSource strategy implementation to produce a Message from underlying MessageProcessorMessageSource.messageProcessor for polling endpoints.\nClass PropertiesBuilder; // A Builder pattern implementation for the Properties.\nClass StringStringMapBuilder; // A map builder creating a map with String keys and values.\nClass Transformers; // An utility class to provide methods for out-of-the-box Transformers.\n", "des": "Provides various support classes used across Spring Integration Java DSL Components."}
{"index": 1836, "repo": "spring-test-6.0.11", "code": "package context;\n\npackage context.aot; // Ahead-of-time (AOT) support for the Spring TestContext Framework.\npackage context.cache; // Support for context caching within the Spring TestContext Framework.\npackage context.event; // Test event support classes for the Spring TestContext Framework.\npackage context.jdbc; // JDBC support classes for the Spring TestContext Framework, including support for declarative SQL script execution via @Sql.\npackage context.junit4; // Support classes for integrating the Spring TestContext Framework with JUnit 4.12 or higher.\npackage context.support; // Support classes for the Spring TestContext Framework.\npackage context.testng; // Support classes for integrating the Spring TestContext Framework with TestNG.\npackage context.transaction; // Transactional support classes for the Spring TestContext Framework.\npackage context.util; // Common utilities used within the Spring TestContext Framework.\npackage context.web; // Web support classes for the Spring TestContext Framework.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface ActiveProfiles; // ActiveProfiles is a class-level annotation that is used to declare which active bean definition profiles should be used when loading an ApplicationContext for test classes.\n@FunctionalInterface public interface ActiveProfilesResolver; // Strategy interface for programmatically resolving which active bean definition profiles should be used when loading an ApplicationContext for a test class.\npublic interface ApplicationContextFailureProcessor; // Strategy for components that process failures related to application contexts within the Spring TestContext Framework.\npublic interface BootstrapContext; // BootstrapContext encapsulates the context in which the Spring TestContext Framework is bootstrapped.\npublic abstract class BootstrapUtils extends Object; // BootstrapUtils is a collection of utility methods to assist with bootstrapping the Spring TestContext Framework.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface BootstrapWith; // @BootstrapWith defines class-level metadata that is used to determine how to bootstrap the Spring TestContext Framework.\npublic interface CacheAwareContextLoaderDelegate; // A CacheAwareContextLoaderDelegate is responsible for loading and closing application contexts, interacting transparently with a ContextCache behind the scenes.\n", "des": "This package contains the Spring TestContext Framework which provides annotation-driven unit and integration testing support that is agnostic of the actual testing framework in use."}
{"index": 204, "repo": "nutch-2.4", "code": "package host;\n\nClass HostDb; // A caching wrapper for the host datastore.\nClass HostDbReader; // Display entries from the hostDB.\nClass HostDbUpdateJob; // Scans the web table and create host entries for each unique host.\nClass HostDbUpdateJob.Mapper; // Maps each WebPage to a host key.\nClass HostDbUpdateReducer; // Combines all WebPages with the same host key to create a Host object, with some statistics.\nClass HostInjectorJob; // Creates or updates an existing host table from a text file. The files contain one host name per line, optionally followed by custom metadata separated by tabs with the metadata key is separated from the corresponding value by '='.\nClass HostInjectorJob.UrlMapper;\n", "des": "Host database to store metadata per host."}
{"index": 1801, "repo": "spring-aop-6.0.11", "code": "package annotation;\n\npublic abstract class AbstractAspectJAdvisorFactory extends Object implements AspectJAdvisorFactory; // Abstract base class for factories that can create Spring AOP Advisors given AspectJ classes from classes honoring the AspectJ 5 annotation syntax.\nprotected static class AbstractAspectJAdvisorFactory.AspectJAnnotation extends Object; // Class modeling an AspectJ annotation, exposing its type enumeration and pointcut String.\nprotected static enum AbstractAspectJAdvisorFactory.AspectJAnnotationType extends Enum<AbstractAspectJAdvisorFactory.AspectJAnnotationType>; // Enum for AspectJ annotation types.\npublic class AnnotationAwareAspectJAutoProxyCreator extends AspectJAwareAdvisorAutoProxyCreator; // AspectJAwareAdvisorAutoProxyCreator subclass that processes all AspectJ annotation aspects in the current application context, as well as Spring Advisors.\npublic interface AspectJAdvisorFactory; // Interface for factories that can create Spring AOP Advisors from classes annotated with AspectJ annotation syntax.\npublic class AspectJProxyFactory extends ProxyCreatorSupport; // AspectJ-based proxy factory, allowing for programmatic building of proxies which include AspectJ aspects (code style as well annotation style).\npublic class AspectMetadata extends Object implements Serializable; // Metadata for an AspectJ aspect class, with an additional Spring AOP pointcut for the per clause.\npublic class BeanFactoryAspectInstanceFactory extends Object implements MetadataAwareAspectInstanceFactory, Serializable; // AspectInstanceFactory implementation backed by a Spring BeanFactory.\npublic class BeanFactoryAspectJAdvisorsBuilder extends Object; // Helper for retrieving @AspectJ beans from a BeanFactory and building Spring Advisors based on them, for use with auto-proxying.\npublic class LazySingletonAspectInstanceFactoryDecorator extends Object implements MetadataAwareAspectInstanceFactory, Serializable; // Decorator to cause a MetadataAwareAspectInstanceFactory to instantiate only once.\npublic interface MetadataAwareAspectInstanceFactory extends AspectInstanceFactory; // Subinterface of AspectInstanceFactory that returns AspectMetadata associated with AspectJ-annotated classes.\npublic class NotAnAtAspectException extends AopConfigException; // Extension of AopConfigException thrown when trying to perform an advisor generation operation on a class that is not an AspectJ annotation-style aspect.\n", "des": "Classes enabling AspectJ 5 @Annotated classes to be used in Spring AOP."}
{"index": 1840, "repo": "spring-test-6.0.11", "code": "package annotation;\n\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(AfterTestClassEvent.class) public @interface AfterTestClass; // @EventListener annotation used to consume an AfterTestClassEvent published by the EventPublishingTestExecutionListener.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(AfterTestExecutionEvent.class) public @interface AfterTestExecution; // @EventListener annotation used to consume an AfterTestExecutionEvent published by the EventPublishingTestExecutionListener.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(AfterTestMethodEvent.class) public @interface AfterTestMethod; // @EventListener annotation used to consume an AfterTestMethodEvent published by the EventPublishingTestExecutionListener.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(BeforeTestClassEvent.class) public @interface BeforeTestClass; // @EventListener annotation used to consume a BeforeTestClassEvent published by the EventPublishingTestExecutionListener.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(BeforeTestExecutionEvent.class) public @interface BeforeTestExecution; // @EventListener annotation used to consume a BeforeTestExecution published by the EventPublishingTestExecutionListener.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(BeforeTestMethodEvent.class) public @interface BeforeTestMethod; // @EventListener annotation used to consume a BeforeTestMethodEvent published by the EventPublishingTestExecutionListener.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(PrepareTestInstanceEvent.class) public @interface PrepareTestInstance; // @EventListener annotation used to consume a PrepareTestInstanceEvent published by the EventPublishingTestExecutionListener.\n", "des": "Test execution event annotations for the Spring TestContext Framework."}
{"index": 1564, "repo": "spring-restdocs-core-3.0.0", "code": "package headers;\n\npublic abstract class AbstractHeadersSnippet extends TemplatedSnippet; // Abstract TemplatedSnippet subclass that provides a base for snippets that document a RESTful resource's request or response headers.\npublic class HeaderDescriptor extends AbstractDescriptor<HeaderDescriptor>; // A description of a header found in a request or response.\npublic abstract class HeaderDocumentation extends Object; // Static factory methods for documenting a RESTful API's request and response headers.\npublic class RequestHeadersSnippet extends AbstractHeadersSnippet; // A Snippet that documents the headers in a request.\npublic class ResponseHeadersSnippet extends AbstractHeadersSnippet; // A Snippet that documents the headers in a response.\n", "des": "Documenting the headers of a RESTful API's requests and responses."}
{"index": 623, "repo": "freemarker-2.3.32", "code": "package dom;\n\nInterface XPathSupport;\nClass NodeModel; // A base class for wrapping a single W3C DOM Node as a FreeMarker template model.\nClass Transform; // Will be removed (main method in a library, often classified as CWE-489 \"Leftover Debug Code\").\n", "des": "Exposes DOM XML nodes to templates as easily traversable trees; see in the Manual."}
{"index": 2292, "repo": "spring-boot-3.1.1", "code": "package cloud;\n\npublic class CloudFoundryVcapEnvironmentPostProcessor extends Object implements EnvironmentPostProcessor, org.springframework.core.Ordered; // An EnvironmentPostProcessor that knows where to find VCAP (a.k.a.\npublic enum CloudPlatform extends Enum<CloudPlatform>; // Simple detection for well known cloud platforms.\n", "des": "Low level support for Cloud deployments."}
{"index": 3534, "repo": "opennlp-tools-2.2.0", "code": "package quasinewton;\n\nInterface Function; // Interface for a function.\nInterface QNMinimizer.Evaluator; // Evaluate quality of training parameters.\nClass ArrayMath;\nClass LineSearch; // Class that performs line search to find minimum.\nClass LineSearch.LineSearchResult; // Represents a LineSearch result.\nClass NegLogLikelihood; // Evaluate negative log-likelihood and its gradient from DataIndexer.\nClass ParallelNegLogLikelihood; // Evaluate negative log-likelihood and its gradient in parallel\nClass QNMinimizer; // Implementation of L-BFGS which supports L1-, L2-regularization and Elastic Net for solving convex optimization problems.\nClass QNMinimizer.L2RegFunction; // L2-regularized objective Function.\nClass QNModel; // A maximum entropy model which has been trained using the Quasi Newton (QN) algorithm.\nClass QNTrainer; // A Maxent model Trainer using L-BFGS algorithm.\n", "des": "Package related to ML by means of the Quasi Newton (QN) algorithm."}
{"index": 1949, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jmx;\n\n@AutoConfiguration @EnableConfigurationProperties(JmxProperties.class) @ConditionalOnClass(org.springframework.jmx.export.MBeanExporter.class) @ConditionalOnProperty(prefix=\"spring.jmx\", name=\"enabled\", havingValue=\"true\") public class JmxAutoConfiguration extends Object; // Auto-configuration to enable/disable Spring's @EnableMBeanExport mechanism based on configuration properties.\n@ConfigurationProperties(prefix=\"spring.jmx\") public class JmxProperties extends Object; // Configuration properties for JMX.\npublic class ParentAwareNamingStrategy extends org.springframework.jmx.export.naming.MetadataNamingStrategy implements org.springframework.context.ApplicationContextAware; // Extension of MetadataNamingStrategy that supports a parent ApplicationContext.\n", "des": "Auto-configuration for JMX."}
{"index": 451, "repo": "camel-core-3.0.0-RC1", "code": "package cloud;\n\nClass BlacklistServiceCallServiceFilterConfiguration;\nClass CachingServiceCallServiceDiscoveryConfiguration;\nClass CombinedServiceCallServiceDiscoveryConfiguration;\nClass CombinedServiceCallServiceFilterConfiguration;\nClass ConsulServiceCallServiceDiscoveryConfiguration;\nClass CustomServiceCallServiceFilterConfiguration;\nClass DefaultServiceCallServiceLoadBalancerConfiguration;\nClass DnsServiceCallServiceDiscoveryConfiguration;\nClass EtcdServiceCallServiceDiscoveryConfiguration;\nClass HealthyServiceCallServiceFilterConfiguration;\nClass KubernetesServiceCallServiceDiscoveryConfiguration;\nClass PassThroughServiceCallServiceFilterConfiguration;\nClass RibbonServiceCallServiceLoadBalancerConfiguration;\nClass ServiceCallConfigurationDefinition; // Remote service call configuration\nClass ServiceCallDefinition; // To call remote services\nClass ServiceCallDefinitionConstants;\nClass ServiceCallExpressionConfiguration;\nClass ServiceCallServiceChooserConfiguration;\nClass ServiceCallServiceDiscoveryConfiguration;\nClass ServiceCallServiceFilterConfiguration;\nClass ServiceCallServiceLoadBalancerConfiguration;\nClass StaticServiceCallServiceDiscoveryConfiguration;\nClass ZooKeeperServiceCallServiceDiscoveryConfiguration;\n", "des": "The JAXB POJOs for the remote service call DSL"}
{"index": 281, "repo": "pdfbox-3.0.0-beta1", "code": "package pdfwriter;\n\nClass ContentStreamWriter; // A class that will take a list of tokens and write out a stream with them.\nClass COSStandardOutputStream; // simple output stream with some minor features for generating \"pretty\" PDF files.\nClass COSWriter; // This class acts on a in-memory representation of a PDF document.\n", "des": "This is the persistence layer used to write the PDFBox documents to a stream."}
{"index": 663, "repo": "commons-lang3-3.12.0", "code": "package arch;\n\nClass Processor; // The Processor represents a microprocessor and defines some properties like architecture and type of the microprocessor.\nEnum Processor.Arch; // The Processor.Arch enum defines the architecture of a microprocessor.\nEnum Processor.Type; // The Processor.Type enum defines types of a microprocessor.\n", "des": "Provides classes to work with the values of the os.arch system property."}
{"index": 2149, "repo": "wicket-core-10.0.0-M1", "code": "package image;\n\npackage image.resource; // Resource support for image components.\npublic class ContextImage extends WebComponent; // Provides a context-relative image.\npublic class ContextPathGenerator extends Behavior; // A behavior that converts the provider url fragment to a context-relative url.\npublic class ExternalImage extends WebComponent; // A component to display external images.\npublic class ExternalSource extends ExternalImage; // A component which displays external images within a picture tag.\npublic class Image extends WebComponent implements IRequestListener; // An Image component displays localizable image resources.\npublic class InlineImage extends WebComponent; // The inline image is used to embed the complete image content within a HTML document.\npublic class NonCachingImage extends Image; // A subclass of Image that always adds random noise to the url every request to prevent the browser from caching the image.\npublic class Picture extends WebMarkupContainer; // A component which displays localizable image resources within source and image elements as responsive image.\npublic class Source extends Image; // A component which displays localizable image resources within a picture tag.\n", "des": "Image components."}
{"index": 763, "repo": "lucene-analyzers-common-8.11.2", "code": "package ckb;\n\nClass SoraniAnalyzer; // Analyzer for Sorani Kurdish.\nClass SoraniNormalizationFilter; // A TokenFilter that applies SoraniNormalizer to normalize the orthography.\nClass SoraniNormalizationFilterFactory; // Factory for SoraniNormalizationFilter.\nClass SoraniNormalizer; // Normalizes the Unicode representation of Sorani text.\nClass SoraniStemFilter; // A TokenFilter that applies SoraniStemmer to stem Sorani words.\nClass SoraniStemFilterFactory; // Factory for SoraniStemFilter.\nClass SoraniStemmer; // Light stemmer for Sorani\n", "des": "Analyzer for Sorani Kurdish."}
{"index": 685, "repo": "jackson-databind-2.15.2", "code": "package ext;\n\nClass CoreXMLDeserializers; // Container deserializers that handle \"core\" XML types: ones included in standard JDK 1.5.\nClass CoreXMLDeserializers.Std; // Combo-deserializer that supports deserialization of somewhat optional javax.xml types QName, Duration and XMLGregorianCalendar.\nClass CoreXMLSerializers; // Provider for serializers of XML types that are part of full JDK 1.5, but that some alleged 1.5 platforms are missing (Android, GAE).\nClass CoreXMLSerializers.XMLGregorianCalendarSerializer;\nClass DOMDeserializer<T>; // Base for serializers that allows parsing DOM Documents from JSON Strings.\nClass DOMDeserializer.DocumentDeserializer;\nClass DOMDeserializer.NodeDeserializer;\nClass DOMSerializer;\nClass Java7Handlers; // Since v2.15, Java7HandlersImpl is no longer loaded via reflection.\nClass Java7HandlersImpl; // Since v2.15, this is no longer loaded via reflection.\nClass Java7Support; // To support Java7-incomplete platforms, we will offer support for JDK 7 annotations through this class, loaded dynamically; if loading fails, support will be missing.\nClass Java7SupportImpl;\nClass NioPathDeserializer;\nClass NioPathSerializer;\nClass OptionalHandlerFactory; // Helper class used for isolating details of handling optional+external types (javax.xml classes) from standard factories that offer them.\nClass SqlBlobSerializer; // Serializer implementation for Blob to write as binary (for JSON and other formats Base64-encoded String, for binary formats as true binary).\n", "des": "Contains extended support for \"external\" packages: things that may or may not be present in runtime environment, but that are commonly enough used so that explicit support can be added."}
{"index": 3377, "repo": "opencms-core-15.0", "code": "package containerpage;\n\nInterface I_CmsADEConfiguration; // Configurable & expandable configuration.\nInterface I_CmsFormatterBean; // Interface representing a configured formatter.\nClass CmsADECache; // Cache object instance for simultaneously cache online and offline items.\nClass CmsADECacheSettings; // The cache settings for ADE.\nClass CmsADESessionCache; // ADE's session cache.\nClass CmsADESessionCache.LastPageBean; // Stores information about the container page which was last edited, so we can jump back to it later.\nClass CmsConfigurationFileFinder; // Helper class for locating configuration files by looking up their location in properties of another resource.\nClass CmsConfigurationItem; // A single item of the ADE file type configuration.\nClass CmsContainerBean; // One container of a container page.\nClass CmsContainerElementBean; // One element of a container in a container page.\nClass CmsContainerPageBean; // Describes one locale of a container page.\nClass CmsDynamicFunctionBean; // A class which contains the data parsed from a dynamic function XML content.\nClass CmsDynamicFunctionBean.Format; // A bean which contains a single format for a dynamic function, which contains of the function JSP, the container settings and the parameters.\nClass CmsDynamicFunctionParser; // The parser class for creating dynamic function beans from XML contents.\nClass CmsFlexFormatterBean; // Formatter configuration for flex formatters.\nClass CmsFormatterBean; // A bean containing formatter configuration data as strings.\nClass CmsFormatterConfiguration; // Represents a formatter configuration.\nClass CmsFormatterConfiguration.FormatterComparator; // This class is used to sort lists of formatter beans in order of importance.\nClass CmsFormatterConfiguration.IsDetail; // Predicate which checks whether the given formatter is a detail formatter.\nClass CmsFormatterConfiguration.IsDisplay; // Predicate which checks whether the given formatter is a display formatter.\nClass CmsFormatterConfiguration.IsSchemaFormatter; // Predicate to check whether the formatter is from a schema.\nClass CmsFunctionFormatterBean; // A bean containing formatter configuration data as strings.\nClass CmsGroupContainerBean; // A group container.\nClass CmsHtmlRedirectHandler; // Content handler for HTML redirects.\nClass CmsLazyFolder; // Helper class for creating a folder if it doesn'T already exist.\n", "des": "Contains functions for the ADE main pages, commonly called \"Container Pages\" in OpenCms."}
{"index": 1104, "repo": "fontbox-3.0.0-beta1", "code": "package pfb;\n\nClass PfbParser; // Parser for a pfb-file.\n", "des": "Classes that are used to parse pfb files."}
{"index": 70, "repo": "ignite-core-2.15.0", "code": "package noop;\n\nClass NoopCheckpointSpi; // No-op implementation of CheckpointSpi.\n", "des": "Contains default no-op checkpoint SPI implementation."}
{"index": 1343, "repo": "groovy-all-4.0.13", "code": "package groovydoc;\n\npublic class ArrayClassDocWrapper extends Object implements GroovyClassDoc;\npublic class ClasspathResourceManager extends Object implements ResourceManager;\npublic class ExternalGroovyClassDoc extends Object implements GroovyClassDoc; // Represents a class not in the codebase being processed.\npublic class FileOutputTool extends Object implements OutputTool;\npublic class FileSystemResourceManager extends Object implements ResourceManager;\npublic interface GroovyDocParserI;\npublic class GroovyDocTemplateEngine extends Object; // Process Groovydoc templates.\npublic class GroovyDocTool extends Object;\npublic class GroovyDocWriter extends Object; // Write GroovyDoc resources to destination.\npublic class GroovyRootDocBuilder extends Object;\npublic class LinkArgument extends Object; // Represents a link pair (href, packages).\npublic class MockOutputTool extends Object implements OutputTool;\npublic interface OutputTool;\npublic interface ResourceManager;\npublic class SimpleGroovyAbstractableElementDoc extends SimpleGroovyProgramElementDoc;\npublic class SimpleGroovyAnnotationRef extends Object implements GroovyAnnotationRef;\npublic class SimpleGroovyClassDoc extends SimpleGroovyAbstractableElementDoc implements GroovyClassDoc;\npublic class SimpleGroovyConstructorDoc extends SimpleGroovyExecutableMemberDoc implements GroovyConstructorDoc;\npublic class SimpleGroovyDoc extends Object implements GroovyDoc;\npublic class SimpleGroovyExecutableMemberDoc extends SimpleGroovyMemberDoc implements GroovyExecutableMemberDoc;\npublic class SimpleGroovyFieldDoc extends SimpleGroovyMemberDoc implements GroovyFieldDoc;\npublic class SimpleGroovyMemberDoc extends SimpleGroovyAbstractableElementDoc implements GroovyMemberDoc;\npublic class SimpleGroovyMethodDoc extends SimpleGroovyExecutableMemberDoc implements GroovyMethodDoc;\npublic class SimpleGroovyPackageDoc extends SimpleGroovyDoc implements GroovyPackageDoc;\npublic class SimpleGroovyParameter extends Object implements GroovyParameter;\npublic class SimpleGroovyProgramElementDoc extends SimpleGroovyDoc implements GroovyProgramElementDoc;\npublic class SimpleGroovyRootDoc extends SimpleGroovyDoc implements GroovyRootDoc;\npublic class SimpleGroovyTag extends Object implements GroovyTag; // Stores info about GroovyDoc tags.\npublic class SimpleGroovyType extends Object implements GroovyType;\n", "des": "GroovyDoc tool."}
{"index": 3629, "repo": "lucene-misc-9.7.0", "code": "package document;\n\nClass LazyDocument; // Defers actually loading a field's value until you ask for it.\n", "des": "Misc extensions of the Document/Field API."}
{"index": 3775, "repo": "lucene-analysis-common-9.7.0", "code": "package custom;\n\nClass CustomAnalyzer; // A general-purpose Analyzer that can be created with a builder-style API.\nClass CustomAnalyzer.Builder; // Builder for CustomAnalyzer.\nClass CustomAnalyzer.ConditionBuilder; // Factory class for a ConditionalTokenFilter\n", "des": "A general-purpose Analyzer that can be created with a builder-style API."}
{"index": 920, "repo": "commons-compress-1.23.0", "code": "package gzip;\n\nClass GzipCompressorInputStream; // Input stream that decompresses .gz files.\nClass GzipCompressorOutputStream; // Compressed output stream using the gzip format.\nClass GzipParameters; // Parameters for the GZIP compressor.\nClass GzipUtils; // Utility code for the gzip compression format.\n", "des": "Provides stream classes for compressing and decompressing streams using the GZip algorithm."}
{"index": 1268, "repo": "spring-core-6.0.11", "code": "package core;\n\npackage core.annotation; // Core support package for annotations, meta-annotations, and merged annotations with attribute overrides.\npackage core.codec; // Encoder and Decoder abstractions to convert between a reactive stream of bytes and Java objects.\npackage core.convert; // Type conversion system API.\npackage core.env; // Spring's environment abstraction consisting of bean definition profile and hierarchical property source support.\npackage core.io; // Generic abstraction for (file-based) resources, used throughout the framework.\npackage core.log; // Useful delegates for Spring's logging conventions.\npackage core.metrics; // Support package for recording metrics during application startup.\npackage core.serializer; // Root package for Spring's serializer interfaces and implementations.\npackage core.style; // Support for styling values as Strings, with ToStringCreator as central class.\npackage core.task; // This package defines Spring's core TaskExecutor abstraction, and provides SyncTaskExecutor and SimpleAsyncTaskExecutor implementations.\npackage core.type; // Core support package for type introspection.\npublic interface AliasRegistry; // Common interface for managing aliases.\npublic interface AttributeAccessor; // Interface defining a generic contract for attaching and accessing metadata to/from arbitrary objects.\npublic abstract class AttributeAccessorSupport extends Object implements AttributeAccessor, Serializable; // Support class for AttributeAccessors, providing a base implementation of all methods.\npublic final class BridgeMethodResolver extends Object; // Helper for resolving synthetic bridge Methods to the Method being bridged.\npublic final class CollectionFactory extends Object; // Factory for collections that is aware of common Java and Spring collection types.\npublic class ConfigurableObjectInputStream extends ObjectInputStream; // Special ObjectInputStream subclass that resolves class names against a specific ClassLoader.\npublic class Constants extends Object; // This class can be used to parse other classes containing constant definitions in public static final members.\npublic static class Constants.ConstantException extends IllegalArgumentException; // Exception thrown when the Constants class is asked for an invalid constant name.\npublic final class Conventions extends Object; // Provides methods to support various naming and other conventions used throughout the framework.\npublic abstract class CoroutinesUtils extends Object; // Utilities for working with Kotlin Coroutines.\n", "des": "Provides basic classes for exception handling and version detection, and other core helpers that are not specific to any part of the framework."}
{"index": 2174, "repo": "spring-security-web-6.1.2", "code": "package channel;\n\npublic abstract class AbstractRetryEntryPoint extends Object implements ChannelEntryPoint;\npublic interface ChannelDecisionManager; // Decides whether a web channel provides sufficient security.\npublic class ChannelDecisionManagerImpl extends Object implements ChannelDecisionManager, org.springframework.beans.factory.InitializingBean; // Implementation of ChannelDecisionManager.\npublic interface ChannelEntryPoint; // May be used by a ChannelProcessor to launch a web channel.\npublic class ChannelProcessingFilter extends org.springframework.web.filter.GenericFilterBean; // Ensures a web request is delivered over the required channel.\npublic interface ChannelProcessor; // Decides whether a web channel meets a specific security condition.\npublic class InsecureChannelProcessor extends Object implements org.springframework.beans.factory.InitializingBean, ChannelProcessor; // Ensures channel security is inactive by review of HttpServletRequest.isSecure() responses.\npublic class RetryWithHttpEntryPoint extends AbstractRetryEntryPoint; // Commences an insecure channel by retrying the original request using HTTP.\npublic class RetryWithHttpsEntryPoint extends AbstractRetryEntryPoint; // Commences a secure channel by retrying the original request using HTTPS.\npublic class SecureChannelProcessor extends Object implements org.springframework.beans.factory.InitializingBean, ChannelProcessor; // Ensures channel security is active by review of HttpServletRequest.isSecure() responses.\n", "des": "Classes that ensure web requests are received over required transport channels."}
{"index": 294, "repo": "pdfbox-3.0.0-beta1", "code": "package graphics;\n\npackage graphics.color; // This package deals with colors that are stored in a PDF document.\npackage graphics.form; // This package deals with Form XObjects that are stored in a PDF document.\npackage graphics.image; // This package deals with images that are stored in a PDF document.\npackage graphics.pattern; // This package deals with patterns which are used instead of colors.\npackage graphics.shading; // This package deals with shadings which are used for filling instead of a color.\npackage graphics.state; // This package deals with graphics states within the PDF document.\nClass PDFontSetting; // This class represents a font setting used for the graphics state.\nClass PDLineDashPattern; // A line dash pattern for stroking paths.\nClass PDPostScriptXObject; // A PostScript XObject.\nClass PDXObject; // An external object, or \"XObject\".\n", "des": "The PDModel graphics package deals with graphics states, operations, and parameters within the PDF document."}
{"index": 2645, "repo": "spring-data-cassandra-4.1.2", "code": "package config;\n\n@Configuration public abstract class AbstractCassandraConfiguration extends AbstractSessionConfiguration implements BeanClassLoaderAware; // Base class for Spring Data Cassandra configuration using JavaConfig.\n@Deprecated public abstract class AbstractCqlTemplateConfiguration extends AbstractSessionConfiguration;\npublic abstract class AbstractReactiveCassandraConfiguration extends AbstractCassandraConfiguration; // Extension to AbstractCassandraConfiguration providing Spring Data Cassandra configuration for Spring Data's Reactive Cassandra support using JavaConfig.\n@Configuration public abstract class AbstractSessionConfiguration extends Object implements BeanFactoryAware; // Spring Configuration class used to configure a Cassandra client application CqlSession connected to a Cassandra cluster.\npublic class CassandraAuditingBeanDefinitionParser extends AbstractSingleBeanDefinitionParser; // BeanDefinitionParser to register a AuditingEntityCallback to transparently set auditing information on an entity.\n@Deprecated public class CassandraCqlSessionFactoryBean extends CqlSessionFactoryBean;\npublic class CassandraCqlTemplateFactoryBean extends Object implements FactoryBean<CqlTemplate>, InitializingBean; // Factory for configuring a CqlTemplate.\npublic class CassandraEntityClassScanner extends Object; // Scans packages for Cassandra entities.\npublic class CassandraNamespaceHandler extends NamespaceHandlerSupport; // Namespace handler for spring-data-cassandra.\n@Deprecated public class CassandraSessionFactoryBean extends CqlSessionFactoryBean;\npublic class CassandraTemplateFactoryBean extends Object implements FactoryBean<CassandraTemplate>, InitializingBean; // Factory for configuring a CassandraTemplate.\npublic enum CompressionType extends Enum<CompressionType>; // Simple enumeration for the various compression types.\npublic class CqlNamespaceHandler extends NamespaceHandlerSupport; // Namespace handler for spring-cassandra.\npublic class CqlSessionFactoryBean extends Object implements FactoryBean<com.datastax.oss.driver.api.core.CqlSession>, InitializingBean, DisposableBean, PersistenceExceptionTranslator; // Factory for creating and configuring a Cassandra CqlSession, which is a thread-safe singleton.\npublic interface DefaultBeanNames extends DefaultCqlBeanNames;\npublic interface DefaultCqlBeanNames;\npublic interface DriverConfigLoaderBuilderConfigurer; // Callback interface that can be implemented by beans wishing to customize the ProgrammaticDriverConfigLoaderBuilder via a DriverConfigLoaderBuilderConfigurer whilst retaining default configuration.\n", "des": "Spring Data Cassandra factory beans and configuration."}
{"index": 2908, "repo": "spring-boot-maven-plugin-3.1.1", "code": "package maven;\n\npublic abstract class AbstractAotMojo extends AbstractDependencyFilterMojo; // Abstract base class for AOT processing MOJOs.\nprotected static class AbstractAotMojo.Errors extends Object implements DiagnosticListener<JavaFileObject>; // DiagnosticListener used to collect errors.\npublic abstract class AbstractDependencyFilterMojo extends org.apache.maven.plugin.AbstractMojo; // A base mojo filtering the dependencies of the project.\nprotected static class AbstractDependencyFilterMojo.ExcludeTestScopeArtifactFilter extends org.apache.maven.shared.artifact.filter.collection.AbstractArtifactFeatureFilter; // ArtifactFilter to exclude test scope dependencies.\nprotected static class AbstractDependencyFilterMojo.RuntimeArtifactFilter extends Object implements org.apache.maven.artifact.resolver.filter.ArtifactFilter; // ArtifactFilter that only include runtime scopes.\npublic abstract class AbstractPackagerMojo extends AbstractDependencyFilterMojo; // Abstract base class for classes that work with an Packager.\npublic static enum AbstractPackagerMojo.LayoutType extends Enum<AbstractPackagerMojo.LayoutType>; // Archive layout types.\npublic abstract class AbstractRunMojo extends AbstractDependencyFilterMojo; // Base class to run a Spring Boot application.\npublic class ArtifactsLibraries extends Object implements org.springframework.boot.loader.tools.Libraries; // Libraries backed by Maven Artifacts.\n@Mojo(name=\"build-image\", defaultPhase=PACKAGE, requiresProject=true, threadSafe=true, requiresDependencyResolution=COMPILE_PLUS_RUNTIME, requiresDependencyCollection=COMPILE_PLUS_RUNTIME) @Execute(phase=PACKAGE) public class BuildImageForkMojo extends BuildImageMojo; // Package an application into an OCI image using a buildpack, forking the lifecycle to make sure that package ran.\npublic abstract class BuildImageMojo extends AbstractPackagerMojo; // Package an application into an OCI image using a buildpack.\n", "des": "Maven plugin for Spring Boot."}
{"index": 650, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package pb;\n\nClass AddApplicationHomeSubClusterRequestPBImpl; // Protocol buffer based implementation of AddApplicationHomeSubClusterRequest.\nClass AddApplicationHomeSubClusterResponsePBImpl; // Protocol buffer based implementation of AddApplicationHomeSubClusterResponse.\nClass ApplicationHomeSubClusterPBImpl; // Protocol buffer based implementation of ApplicationHomeSubCluster.\nClass DeleteApplicationHomeSubClusterRequestPBImpl; // Protocol buffer based implementation of DeleteApplicationHomeSubClusterRequest.\nClass DeleteApplicationHomeSubClusterResponsePBImpl; // Protocol buffer based implementation of DeleteApplicationHomeSubClusterResponse.\nClass GetApplicationHomeSubClusterRequestPBImpl; // Protocol buffer based implementation of GetApplicationHomeSubClusterRequest.\nClass GetApplicationHomeSubClusterResponsePBImpl; // Protocol buffer based implementation of GetApplicationHomeSubClusterResponse.\nClass GetApplicationsHomeSubClusterRequestPBImpl; // Protocol buffer based implementation of GetApplicationsHomeSubClusterRequest.\nClass GetApplicationsHomeSubClusterResponsePBImpl; // Protocol buffer based implementation of GetApplicationsHomeSubClusterResponse.\nClass GetSubClusterInfoRequestPBImpl; // Protocol buffer based implementation of GetSubClusterInfoRequest.\nClass GetSubClusterInfoResponsePBImpl; // Protocol buffer based implementation of GetSubClusterInfoResponse.\nClass GetSubClusterPoliciesConfigurationsRequestPBImpl; // Protocol buffer based implementation of GetSubClusterPoliciesConfigurationsRequest.\nClass GetSubClusterPoliciesConfigurationsResponsePBImpl; // Protocol buffer based implementation of GetSubClusterPoliciesConfigurationsResponse.\nClass GetSubClusterPolicyConfigurationRequestPBImpl; // Protocol buffer based implementation of GetSubClusterPolicyConfigurationRequest.\nClass GetSubClusterPolicyConfigurationResponsePBImpl; // Protocol buffer based implementation of GetSubClusterPolicyConfigurationResponse.\nClass GetSubClustersInfoRequestPBImpl; // Protocol buffer based implementation of GetSubClustersInfoRequest.\nClass GetSubClustersInfoResponsePBImpl; // Protocol buffer based implementation of GetSubClustersInfoResponse.\nClass SetSubClusterPolicyConfigurationRequestPBImpl; // Protocol buffer based implementation of SetSubClusterPolicyConfigurationRequest.\nClass SetSubClusterPolicyConfigurationResponsePBImpl; // Protocol buffer based implementation of SetSubClusterPolicyConfigurationResponse.\nClass SubClusterDeregisterRequestPBImpl; // Protocol buffer based implementation of SubClusterDeregisterRequest.\nClass SubClusterDeregisterResponsePBImpl; // Protocol buffer based implementation of SubClusterDeregisterResponse.\nClass SubClusterHeartbeatRequestPBImpl; // Protocol buffer based implementation of SubClusterHeartbeatRequest.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 783, "repo": "lucene-analyzers-common-8.11.2", "code": "package hu;\n\nClass HungarianAnalyzer; // Analyzer for Hungarian.\nClass HungarianLightStemFilter; // A TokenFilter that applies HungarianLightStemmer to stem Hungarian words.\nClass HungarianLightStemFilterFactory; // Factory for HungarianLightStemFilter.\nClass HungarianLightStemmer; // Light Stemmer for Hungarian.\n", "des": "Analyzer for Hungarian."}
{"index": 2884, "repo": "spring-integration-core-6.1.2", "code": "package context;\n\npublic interface NamedComponent;\n", "des": "Provides classes supporting use of the application context."}
{"index": 313, "repo": "commons-geometry-enclosing-1.0-beta1", "code": "package threed;\n\nClass SphereGenerator; // Class generating a sphere from its support points.\nClass WelzlEncloser3D; // Extension of the WelzlEncloser class for Euclidean 3D space.\n", "des": "This package provides classes related to the smallest enclosing ball problem in three dimensions."}
{"index": 2354, "repo": "spring-boot-3.1.1", "code": "package view;\n\npublic class MustacheView extends org.springframework.web.reactive.result.view.AbstractUrlBasedView; // Spring WebFlux View using the Mustache template engine.\npublic class MustacheViewResolver extends org.springframework.web.reactive.result.view.UrlBasedViewResolver; // Spring WebFlux ViewResolver for Mustache.\n", "des": "Additional Views for use with WebFlux."}
{"index": 1756, "repo": "spring-data-mongodb-4.1.2", "code": "package mapping;\n\npackage mapping.event; // Mapping event callback infrastructure for the MongoDB document-to-object mapping subsystem.\npublic class BasicMongoPersistentEntity<T> extends BasicPersistentEntity<T,MongoPersistentProperty> implements MongoPersistentEntity<T>; // MongoDB specific MongoPersistentEntity implementation that adds Mongo specific meta-data such as the collection name and the like.\npublic class BasicMongoPersistentProperty extends AnnotationBasedPersistentProperty<MongoPersistentProperty> implements MongoPersistentProperty; // MongoDB specific PersistentProperty implementation.\npublic class CachingMongoPersistentProperty extends BasicMongoPersistentProperty; // MongoPersistentProperty caching access to CachingMongoPersistentProperty.isIdProperty() and CachingMongoPersistentProperty.getFieldName().\n@Documented @Retention(RUNTIME) @Target(FIELD) public @interface DBRef; // An annotation that indicates the annotated field is to be stored using a DBRef.\n@Inherited @Retention(RUNTIME) @Target(TYPE) public @interface Document; // Identifies a domain object to be persisted to MongoDB.\n@FunctionalInterface public interface DocumentPointer<T>; // A custom pointer to a linked document to be used along with DocumentReference for storing the linkage value.\n@Documented @Retention(RUNTIME) @Target(FIELD) public @interface DocumentReference; // A DocumentReference allows referencing entities in MongoDB using a flexible schema.\n@Documented @Retention(RUNTIME) @Target({TYPE,FIELD}) public @interface Encrypted; // Encrypted provides data required for MongoDB Client Side Field Level Encryption that is applied during schema resolution.\n@Retention(RUNTIME) @Target(FIELD) @Encrypted @ValueConverter public @interface ExplicitEncrypted; // ExplicitEncrypted is a field level ValueConverter annotation that indicates the target element is subject to encryption during the mapping process, in which a given domain type is converted into the store specific format.\n@Documented @Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface Field; // Annotation to define custom metadata for document fields.\npublic static enum Field.Write extends Enum<Field.Write>; // Enumeration of write strategies to define when a property is included for write conversion.\npublic enum FieldType extends Enum<FieldType>; // Enumeration of field value types that can be used to represent a Document field value.\n", "des": "Infrastructure for the MongoDB document-to-object mapping subsystem."}
{"index": 2100, "repo": "spring-webflux-6.0.11", "code": "package result;\n\npackage result.condition; // RequestCondition and implementations for matching requests based on different criteria.\npackage result.method; // Infrastructure for handler method processing.\npackage result.view; // Support for result handling through view resolution.\npublic abstract class HandlerResultHandlerSupport extends Object implements org.springframework.core.Ordered; // Base class for HandlerResultHandler with support for content negotiation and access to a ReactiveAdapter registry.\npublic class SimpleHandlerAdapter extends Object implements HandlerAdapter; // HandlerAdapter that allows using the plain WebHandler contract with the generic DispatcherHandler.\n", "des": "Support for various programming model styles including the invocation of different types of handlers, e.g."}
{"index": 3637, "repo": "solr-core-9.3.0", "code": "package cli;\n\nInterface CLIO;\nInterface Tool;\nClass ApiTool;\nClass AssertTool; // Asserts various conditions and exists with error code if fails, else continues with no output\nClass AuthTool;\nClass ConfigSetDownloadTool;\nClass ConfigSetUploadTool;\nClass ConfigTool; // Sends a POST to the Config API to perform a specified action.\nClass CreateCollectionTool; // Supports create_collection command in the bin/solr script.\nClass CreateCoreTool;\nClass CreateTool;\nClass DeleteTool;\nClass ExportTool;\nClass ExportTool.Info;\nClass HealthcheckTool;\nClass PackageTool;\nClass RunExampleTool; // Supports an interactive session with the user to launch (or relaunch the -e cloud example)\nClass SimplePostTool; // A simple utility class for posting raw updates to a Solr server.\nClass SimplePostTool.BAOS;\nClass SimplePostTool.PageFetcherResult; // Utility class to hold the result form a page fetch\nClass SolrCLI; // Command-line utility for working with Solr.\nClass SolrLogPostTool; // A command line tool for indexing Solr logs in the out-of-the-box log format.\nClass SolrLogPostTool.LogRecordReader;\nClass StatusTool;\nClass ToolBase;\nClass ZkCpTool;\nClass ZkLsTool;\nClass ZkMkrootTool;\nClass ZkMvTool;\nClass ZkRmTool;\nClass SolrCLI.AssertionFailureException;\n", "des": "Solr Command Line Interface classes"}
{"index": 154, "repo": "ignite-core-2.15.0", "code": "package pagemem;\n\nInterface LoadedPagesMap; // Interface for storing correspondence of page ID in a cache group to long value (address in offheap segment).\nInterface LoadedPagesMap.KeyPredicate; // Interface describing a predicate for Key (cache group ID, page ID).\nInterface PageMemoryEx; // Page memory with some persistence related additions.\nInterface PageMetrics; // Container for different memory page-related metrics.\nInterface PageReadWriteManager;\nInterface PageReplacementPolicyFactory; // Page replacement policy factory.\nInterface PagesWriteThrottlePolicy; // Throttling policy, encapsulates logic of delaying write operations.\nClass CheckpointMetricsTracker; // Tracks various checkpoint phases and stats.\nClass ClockPageReplacementFlags; // Clock page replacement algorithm implementation.\nClass ClockPageReplacementPolicy; // CLOCK page replacement policy implementation.\nClass ClockPageReplacementPolicyFactory; // ClockPageReplacementPolicy factory.\nClass DelayedDirtyPageStoreWrite; // Not thread safe and stateful class for page replacement of one page with write() delay.\nClass DelayedPageReplacementTracker; // Delayed page writes tracker.\nClass FullPageIdTable;\nClass PageMemoryImpl; // Page header structure is described by the following diagram.\nClass PageMetricsImpl;\nClass PageMetricsImpl.Builder; // Builder for PageMetricsImpl instances.\nClass PagePool;\nClass PageReadWriteManagerImpl;\nClass PageReplacementPolicy; // Abstract page replacement policy.\nClass PagesWriteSpeedBasedThrottle; // Throttles threads that generate dirty pages during ongoing checkpoint.\nClass PagesWriteThrottle; // Throttles threads that generate dirty pages during ongoing checkpoint.\nClass RandomLruPageReplacementPolicy; // Random-LRU page replacement policy implementation.\nClass RandomLruPageReplacementPolicyFactory; // RandomLruPageReplacementPolicy factory.\nClass ReplaceCandidate; // Replacement removal candidate.\nClass RobinHoodBackwardShiftHashMap; // Loaded pages mapping to relative pointer based on Robin Hood hashing: backward shift deletion algorithm.\nClass SegmentedLruPageList; // Pages Segmented-LRU (SLRU) list implementation.\nClass SegmentedLruPageReplacementPolicy; // Segmented-LRU page replacement policy implementation.\nClass SegmentedLruPageReplacementPolicyFactory; // SegmentedLruPageReplacementPolicy factory.\nEnum PageMemoryImpl.ThrottlingPolicy; // Throttling enabled and its type enum.\n", "des": "This package contains page memory implementation for case persitence is enabled."}
{"index": 1041, "repo": "commons-io-2.13.0", "code": "package io;\n\npackage io.build; // Provides classes to implement IO builders.\npackage io.charset; // Provides classes to work with code from java.nio.charset.\npackage io.comparator; // Provides various Comparator implementations for Files.\npackage io.file; // Provides extensions in the realm of java.nio.file.\npackage io.filefilter; // Provides the an interface IOFileFilter that combines both FileFilter and FilenameFilter.\npackage io.function; // Provides IO-only related functional interfaces for lambda expressions and method references.\npackage io.input; // Provides implementations of input classes, such as InputStream and Reader.\npackage io.monitor; // Provides a component for monitoring file system events (directory and file create, update and delete events).\npackage io.output; // Provides implementations of output classes, such as OutputStream and Writer.\npackage io.serialization; // Provides a framework for controlling the deserialization of classes.\nClass ByteOrderMark; // Byte Order Mark (BOM) representation.\nClass ByteOrderParser; // Converts Strings to ByteOrder instances.\nClass Charsets; // Charsets required of every implementation of the Java platform.\nClass CopyUtils; // Use IOUtils.\nClass DirectoryWalker<T>; // Apache Commons IO no longer uses this class.\nClass EndianUtils; // Helps with different endian systems.\nClass FileCleaner; // Use FileCleaningTracker\nClass FileCleaningTracker; // Keeps track of files awaiting deletion, and deletes them when an associated marker object is reclaimed by the garbage collector.\nClass FileDeleteStrategy; // Strategy for deleting files.\nClass FilenameUtils; // General file name and file path manipulation utilities.\nClass FileSystemUtils; // As of 2.6 deprecated without replacement.\nClass FileUtils; // General file manipulation utilities.\nClass HexDump; // Dumps data in hexadecimal format.\nClass IOUtils; // General IO stream manipulation utilities.\nClass LineIterator; // An Iterator over the lines in a Reader.\nClass RandomAccessFiles; // Works on RandomAccessFile.\nClass ThreadUtils; // Helps work with threads.\nEnum FileSystem; // Abstracts an OS' file system details, currently supporting the single use case of converting a file name String to a legal file name with FileSystem.toLegalFileName(String, char).\nEnum IOCase; // Enumeration of IO case sensitivity.\n", "des": "Provides classes for working with streams, readers, writers and files."}
{"index": 3357, "repo": "opencms-core-15.0", "code": "package rpc;\n\nInterface I_CmsContextMenuClientRpc; // Server to client RPC communication.\nInterface I_CmsContextMenuServerRpc; // The context menu server RPC.\nInterface I_CmsEditableGroupButtonsServerRpc; // Interface for the server side RPC for the CmsEditableGroupButtons component.\nInterface I_CmsEditorStateRPC; // Editor state RPCs\nInterface I_CmsEmbeddedDialogClientRPC; // Client RPC to handle embedded dialogs.\nInterface I_CmsEmbeddingServerRpc; // Client-to-server RPC for embedding Vaadin dialogs in GWT.\nInterface I_CmsGwtContextMenuServerRpc; // Server side RPC interface for the GWT based context menu buttons.\nInterface I_CmsJSPBrowserFrameRpc; // Rpc -interface for handling results from JSP displayed on an extended BrowserFrame.\nInterface I_CmsMaxHeightServerRpc; // The max height server interface.\nInterface I_CmsPollServerRpc; // The max height server interface.\nInterface I_CmsPrincipalSelectRpc; // The principal select RPC service.\nInterface I_CmsPropertyClientRpc; // Server-to-client Interface for the GWT dialog extension.\nInterface I_CmsPropertyServerRpc; // Client-to-server rpc interface for the GWT dialog extension.\nInterface I_CmsReportClientRpc; // Client RPC interface for the report widget.\nInterface I_CmsReportServerRpc; // Server RPC interface for the report widget.\nInterface I_CmsSitemapClientRpc; // Interface for the server-to-client RPC calls used by the sitemap extension.\nInterface I_CmsSitemapServerRpc; // Interface for the client-to-server rpc calls used by the sitemap extension.\nInterface I_CmsUploadRpc; // The upload RPC interface.\nInterface I_CmsWindowClientRpc; // Server-to-client RPC for CmsWindowExtension.\nInterface I_CmsWindowCloseServerRpc; // Handles window close calls.\nInterface I_CmsWindowServerRpc; // Client-to-server RPC interface for CmsWindowExtension.\n", "des": "Contains Vaadin RPC interfaces."}
{"index": 3583, "repo": "lucene-test-framework-9.7.0", "code": "package bloom;\n\nClass TestBloomFilteredLucenePostings; // A class used for testing BloomFilteringPostingsFormat with a concrete delegate (Lucene41).\n", "des": "Support for generating test indexes using the BloomFilteringPostingsFormat."}
{"index": 2781, "repo": "spring-security-ldap-6.1.2", "code": "package ppolicy;\n\npublic class PasswordPolicyAwareContextSource extends DefaultSpringSecurityContextSource; // Extended version of the DefaultSpringSecurityContextSource which adds support for the use of PasswordPolicyControl to make use of user account data stored in the directory.\npublic class PasswordPolicyControl extends Object implements Control; // A Password Policy request control.\npublic final class PasswordPolicyControlExtractor extends Object; // Obtains the PasswordPolicyControl from a context for use by other classes.\npublic class PasswordPolicyControlFactory extends ControlFactory; // Transforms a control object to a PasswordPolicyResponseControl object, if appropriate.\npublic interface PasswordPolicyData;\npublic enum PasswordPolicyErrorStatus extends Enum<PasswordPolicyErrorStatus>; // Defines status codes for use with PasswordPolicyException, with error codes (for message source lookup) and default messages.\npublic class PasswordPolicyException extends RuntimeException; // Generic exception raised by the ppolicy package.\npublic class PasswordPolicyResponseControl extends PasswordPolicyControl; // Represents the response control received when a PasswordPolicyControl is used when binding to a directory.\n", "des": "Implementation of password policy functionality based on the Password Policy for LDAP Directories."}
{"index": 231, "repo": "nutch-2.4", "code": "package assets;\n\nClass NutchUiCssReference;\n", "des": "Contains asset classes for Web UI"}
{"index": 683, "repo": "jackson-databind-2.15.2", "code": "package impl;\n\nClass BeanAsArrayBuilderDeserializer;\nClass BeanAsArrayDeserializer; // Variant of BeanDeserializer used for handling deserialization of POJOs when serialized as JSON Arrays, instead of JSON Objects.\nClass BeanPropertyMap; // Helper class used for storing mapping from property name to SettableBeanProperty instances.\nClass CreatorCandidate;\nClass CreatorCandidate.Param;\nClass CreatorCollector; // Container class for storing information on creators (based on annotations, visibility), to be able to build actual ValueInstantiator later on.\nClass ErrorThrowingDeserializer; // A deserializer that stores an Error caught during constructing of the deserializer, which needs to be deferred and only during actual attempt to deserialize a value of given type.\nClass ExternalTypeHandler; // Helper class that is used to flatten JSON structure when using \"external type id\" (see JsonTypeInfo.As.EXTERNAL_PROPERTY).\nClass ExternalTypeHandler.Builder;\nClass FailingDeserializer; // Special bogus \"serializer\" that will throw MismatchedInputException if an attempt is made to deserialize a value.\nClass FieldProperty; // This concrete sub-class implements property that is set directly assigning to a Field.\nClass InnerClassProperty; // This sub-class is used to handle special case of value being a non-static inner class.\nClass JavaUtilCollectionsDeserializers; // Helper class used to contain logic for deserializing \"special\" containers from java.util.Collections and java.util.Arrays.\nClass JDKValueInstantiators; // Container for a set of ValueInstantiators used for certain critical JDK value types, either as performance optimization for initialization time observed by profiling, or due to difficulty in otherwise finding constructors.\nClass ManagedReferenceProperty; // Wrapper property that is used to handle managed (forward) properties Basically just needs to delegate first to actual forward property, and then to back property.\nClass MergingSettableBeanProperty; // SettableBeanProperty implementation that will try to access value of the property first, and if non-null value found, pass that for update (using JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, Object)) instead of constructing a new value.\nClass MethodProperty; // This concrete sub-class implements property that is set using regular \"setter\" method.\n", "des": "Contains those implementation classes of deserialization part of data binding that are not considered part of public or semi-public interfaces."}
{"index": 2531, "repo": "spring-security-core-6.1.2", "code": "package memory;\n\npublic class InMemoryConfiguration extends Configuration; // An in memory representation of a JAAS configuration.\n", "des": "An in memory JAAS implementation."}
{"index": 414, "repo": "hadoop-azure-3.3.6", "code": "package metrics;\n\nClass AzureFileSystemInstrumentation; // A metrics source for the WASB file system to track all the metrics we care about for getting a clear picture of the performance/reliability/interaction of the Hadoop cluster with Azure Storage.\nClass AzureFileSystemMetricsSystem; // AzureFileSystemMetricsSystem\nClass BandwidthGaugeUpdater; // Internal implementation class to help calculate the current bytes uploaded/downloaded and the maximum bandwidth gauges.\nClass ErrorMetricUpdater; // An event listener to the ResponseReceived event from Azure Storage that will update error metrics appropriately when it gets that event.\nClass ResponseReceivedMetricUpdater; // An event listener to the ResponseReceived event from Azure Storage that will update metrics appropriately when it gets that event.\n", "des": "Infrastructure for a Metrics2 source that provides information on Windows Azure Filesystem for Hadoop instances."}
{"index": 2530, "repo": "spring-security-core-6.1.2", "code": "package event;\n\npublic abstract class JaasAuthenticationEvent extends org.springframework.context.ApplicationEvent; // Parent class for events fired by the JaasAuthenticationProvider.\npublic class JaasAuthenticationFailedEvent extends JaasAuthenticationEvent; // Fired when LoginContext.login throws a LoginException, or if any other exception is thrown during that time.\npublic class JaasAuthenticationSuccessEvent extends JaasAuthenticationEvent; // Fired by the JaasAuthenticationProvider after successfully logging the user into the LoginContext, handling all callbacks, and calling all AuthorityGranters.\n", "des": "JAAS authentication events which can be published to the Spring application context by the JAAS authentication provider."}
{"index": 482, "repo": "beam-sdks-java-core-2.49.0", "code": "package metrics;\n\nInterface Counter; // A metric that reports a single long value and can be incremented or decremented.\nInterface Distribution; // A metric that reports information about the distribution of reported values.\nInterface Gauge; // A metric that reports the latest value out of reported values.\nInterface Histogram; // A metric that reports information about the histogram of reported values.\nInterface Metric; // Marker interface for all user-facing metrics.\nInterface MetricsContainer; // Holds the metrics for a single step.\nInterface MetricsEnvironment.MetricsEnvironmentState; // Set the MetricsContainer for the associated MetricsEnvironment.\nInterface MetricsOptions; // Extension of PipelineOptions that defines MetricsSink specific options.\nInterface MetricsSink; // Interface for all metric sinks.\nClass DelegatingCounter; // Implementation of Counter that delegates to the instance for the current context.\nClass DelegatingDistribution; // Implementation of Distribution that delegates to the instance for the current context.\nClass DelegatingHistogram; // Implementation of Histogram that delegates to the instance for the current context.\nClass DistributionResult; // The result of a Distribution metric.\nClass GaugeResult; // The result of a Gauge metric.\nClass GaugeResult.EmptyGaugeResult; // Empty GaugeResult, representing no values reported.\nClass MetricFiltering; // Implements matching for metrics filters.\nClass MetricKey; // Metrics are keyed by the step name they are associated with and the name of the metric.\nClass MetricName; // The name of a metric consists of a MetricName.getNamespace() and a MetricName.getName().\nClass MetricNameFilter; // The name of a metric.\nClass MetricQueryResults; // The results of a query for metrics.\nClass MetricResult<T>; // The results of a single current metric.\nClass MetricResults; // Methods for interacting with the metrics of a pipeline that has been executed.\nClass Metrics; // The Metrics is a utility class for producing various kinds of metrics for reporting properties of an executing pipeline.\nClass MetricsEnvironment; // Manages and provides the metrics container associated with each thread.\nClass MetricsEnvironment.MetricsContainerHolder;\nClass MetricsFilter; // Simple POJO representing a filter for querying metrics.\nClass MetricsFilter.Builder; // Builder for creating a MetricsFilter.\n", "des": "Metrics allow exporting information about the execution of a pipeline."}
{"index": 3311, "repo": "opencms-core-15.0", "code": "package extractors;\n\nInterface I_CmsExtractionResult; // The result of a document text extraction.\nInterface I_CmsTextExtractor; // Allows extraction of the indexable \"plain\" text plus (optional) meta information from a given binary input document format.\nClass A_CmsTextExtractor; // Base utility class that allows extraction of the indexable \"plain\" text from a given document format.\nClass CmsExtractionResult; // The result of a document text extraction.\nClass CmsExtractorHtml; // Extracts the text from an HTML document.\nClass CmsExtractorMsOfficeOLE2; // Extracts text data from a VFS resource that is an OLE 2 MS Office document.\nClass CmsExtractorMsOfficeOOXML; // Extracts text data from a VFS resource that is an OOXML MS Office document.\nClass CmsExtractorOpenOffice; // Extracts the text from OpenOffice documents (.ods, .odf).\nClass CmsExtractorPdf; // Extracts the text from a PDF document.\nClass CmsExtractorRtf; // Extracts the text from a RTF document.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains a generic, low-level framework for extration of plain text content out of various popular file formats."}
{"index": 3078, "repo": "spring-ws-core-4.0.5", "code": "package server;\n\npublic abstract class AbstractActionEndpointMapping extends AbstractAddressingEndpointMapping; // Abstract base class for WS-Addressing Action-mapped EndpointMapping implementations.\npublic abstract class AbstractActionMethodEndpointMapping extends AbstractActionEndpointMapping; // Abstract base class for WS-Addressing Action-mapped EndpointMapping implementations that map to MethodEndpoints.\npublic abstract class AbstractAddressingEndpointMapping extends org.springframework.xml.transform.TransformerObjectSupport implements SoapEndpointMapping, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.core.Ordered; // Abstract base class for EndpointMapping implementations that handle WS-Addressing.\npublic class AnnotationActionEndpointMapping extends AbstractActionMethodEndpointMapping implements org.springframework.beans.factory.config.BeanPostProcessor; // Implementation of the EndpointMapping interface that uses the @Action annotation to map methods to a WS-Addressing Action header.\npublic class SimpleActionEndpointMapping extends AbstractActionEndpointMapping; // Implementation of the EndpointMapping interface to map from WS-Addressing Action Message Addressing Property to endpoint beans.\n", "des": "Contains servers-side WS-Addressing support, in the form of EndpointMappings."}
{"index": 1271, "repo": "spring-core-6.0.11", "code": "package convert;\n\npackage convert.converter; // SPI to implement Converters for the type conversion system.\npackage convert.support; // Default implementation of the type conversion system.\npublic abstract class ConversionException extends NestedRuntimeException; // Base class for exceptions thrown by the conversion system.\npublic class ConversionFailedException extends ConversionException; // Exception to be thrown when an actual type conversion attempt fails.\npublic interface ConversionService; // A service interface for type conversion.\npublic class ConverterNotFoundException extends ConversionException; // Exception to be thrown when a suitable converter could not be found in a given conversion service.\npublic final class Property extends Object; // A description of a JavaBeans Property that allows us to avoid a dependency on java.beans.PropertyDescriptor.\npublic class TypeDescriptor extends Object implements Serializable; // Contextual descriptor about a type to convert from or to.\n", "des": "Type conversion system API."}
{"index": 1441, "repo": "spring-boot-actuator-3.1.1", "code": "package servlet;\n\npublic class DispatcherServletMappingDescription extends Object; // A description of a mapping known to a DispatcherServlet.\npublic class DispatcherServletMappingDetails extends Object; // Details of a DispatcherServlet mapping.\n@ImportRuntimeHints(org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider.DispatcherServletsMappingDescriptionProviderRuntimeHints.class) public class DispatcherServletsMappingDescriptionProvider extends Object implements MappingDescriptionProvider; // A MappingDescriptionProvider that introspects the HandlerMappings that are known to one or more DispatcherServlets.\npublic class FilterRegistrationMappingDescription extends RegistrationMappingDescription<jakarta.servlet.FilterRegistration>; // A RegistrationMappingDescription derived from a FilterRegistration.\n@ImportRuntimeHints(org.springframework.boot.actuate.web.mappings.servlet.FiltersMappingDescriptionProvider.FiltersMappingDescriptionProviderRuntimeHints.class) public class FiltersMappingDescriptionProvider extends Object implements MappingDescriptionProvider; // A MappingDescriptionProvider that describes that mappings of any Filters registered with a ServletContext.\npublic class RegistrationMappingDescription<T extends jakarta.servlet.Registration> extends Object; // A mapping description derived from a Registration.\npublic class RequestMappingConditionsDescription extends Object; // Description of the conditions of a RequestMappingInfo.\npublic static class RequestMappingConditionsDescription.MediaTypeExpressionDescription extends Object; // A description of a MediaTypeExpression in a request mapping condition.\npublic static class RequestMappingConditionsDescription.NameValueExpressionDescription extends Object; // A description of a NameValueExpression in a request mapping condition.\npublic class ServletRegistrationMappingDescription extends RegistrationMappingDescription<jakarta.servlet.ServletRegistration>; // A mapping description derived from a ServletRegistration.\n@ImportRuntimeHints(org.springframework.boot.actuate.web.mappings.servlet.ServletsMappingDescriptionProvider.ServletsMappingDescriptionProviderRuntimeHints.class) public class ServletsMappingDescriptionProvider extends Object implements MappingDescriptionProvider; // A MappingDescriptionProvider that describes that mappings of any Servlets registered with a ServletContext.\n", "des": "Actuator servlet request mappings support."}
{"index": 1834, "repo": "spring-test-6.0.11", "code": "package server;\n\npublic final class MockServerWebExchange extends org.springframework.web.server.adapter.DefaultServerWebExchange; // Extension of DefaultServerWebExchange for use in tests, along with MockServerHttpRequest and MockServerHttpResponse.\npublic static class MockServerWebExchange.Builder extends Object; // Builder for a MockServerWebExchange.\npublic class MockWebSession extends Object implements org.springframework.web.server.WebSession; // Implementation of WebSession that delegates to a session instance obtained via InMemoryWebSessionStore.\n", "des": "Mock implementations of Spring's reactive server web API abstractions."}
{"index": 1547, "repo": "spring-context-6.0.11", "code": "package config;\n\npublic class LangNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler that supports the wiring of objects backed by dynamic languages such as Groovy, JRuby and BeanShell.\npublic abstract class LangNamespaceUtils extends Object; // Utilities for use with LangNamespaceHandler.\n", "des": "Support package for Spring's dynamic language machinery, with XML schema being the primary configuration format."}
{"index": 1873, "repo": "shiro-core-2.0.0-alpha-2", "code": "package credential;\n\npublic class AllowAllCredentialsMatcher extends Object implements CredentialsMatcher; // A credentials matcher that always returns true when matching credentials no matter what arguments are passed in.\npublic interface CredentialsMatcher; // Interface implemented by classes that can determine if an AuthenticationToken's provided credentials matches a corresponding account's credentials stored in the system.\npublic class DefaultPasswordService extends Object implements HashingPasswordService; // Default implementation of the PasswordService interface that relies on an internal HashService, HashFormat, and HashFormatFactory to function:\npublic class HashedCredentialsMatcher extends SimpleCredentialsMatcher; // A HashedCredentialMatcher provides support for hashing of supplied AuthenticationToken credentials before being compared to those in the AuthenticationInfo from the data store.\npublic interface HashingPasswordService extends PasswordService; // A HashingPasswordService is a PasswordService that performs password encryption and comparisons based on cryptographic Hashes.\npublic class PasswordMatcher extends Object implements CredentialsMatcher; // A CredentialsMatcher that employs best-practices comparisons for hashed text passwords.\npublic interface PasswordService; // A PasswordService supports common use cases when using passwords as a credentials mechanism.\npublic class Sha256CredentialsMatcher extends HashedCredentialsMatcher;\npublic class Sha384CredentialsMatcher extends HashedCredentialsMatcher;\npublic class Sha512CredentialsMatcher extends HashedCredentialsMatcher;\npublic class SimpleCredentialsMatcher extends org.apache.shiro.lang.codec.CodecSupport implements CredentialsMatcher; // Simple CredentialsMatcher implementation.\n", "des": "Support for validating credentials (such as passwords or X509 certificates) during authentication via the CredentialsMatcher interface and its supporting implementations."}
{"index": 3471, "repo": "tomcat-jspapi-10.1", "code": "package jsp;\n\npackage jsp.el; // Classes and interfaces for the JSP 2.0 Expression Language API.\npackage jsp.tagext; // Classes and interfaces for the definition of JavaServer Pages Tag Libraries.\nInterface HttpJspPage; // The HttpJspPage interface describes the interaction that a JSP Page Implementation Class must satisfy when using the HTTP protocol.\nInterface JspApplicationContext; // Stores application-scoped information for the JSP container.\nInterface JspPage; // The JspPage interface describes the generic interaction that a JSP Page Implementation class must satisfy; pages that use the HTTP protocol are described by the HttpJspPage interface.\nClass ErrorData; // Contains information about an error, for error pages.\nClass JspContext; // JspContext serves as the base class for the PageContext class and abstracts all information that is not specific to servlets.\nClass JspEngineInfo; // The JspEngineInfo is an abstract class that provides information on the current JSP engine.\nClass JspFactory; // The JspFactory is an abstract class that defines a number of factory methods available to a JSP page at runtime for the purposes of creating instances of various interfaces and classes used to support the JSP implementation.\nClass JspWriter; // The actions and template data in a JSP page is written using the JspWriter object that is referenced by the implicit variable out which is initialized automatically using methods in the PageContext object.\nClass PageContext; // PageContext extends JspContext to provide useful context information for when JSP technology is used in a Servlet environment.\nClass JspException; // A generic exception known to the JSP engine; uncaught JspExceptions will result in an invocation of the errorpage machinery.\nClass JspTagException; // Exception to be used by a Tag Handler to indicate some unrecoverable error.\nClass SkipPageException; // Exception to indicate the calling page must cease evaluation.\n", "des": "Classes and interfaces for the Core JSP 2.0 API."}
{"index": 3432, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\npackage spi.interceptor; // interceptor implementations\nInterface CollectionTracker; // Interface to be implemented by collection trackers that hold the expected size od collections, a simplified Map<String, int>.\nInterface EnhancementContext; // The context for performing an enhancement.\nInterface Enhancer; // Class responsible for performing enhancement.\nInterface LazyPropertyInitializer; // Contract for controlling how lazy properties get initialized.\nInterface LazyPropertyInitializer.InterceptorImplementor;\nInterface UnloadedClass;\nInterface UnloadedField;\nClass DefaultEnhancementContext; // default implementation of EnhancementContext.\nClass EnhancementContextWrapper;\nClass EnhancerConstants; // Constants used during enhancement.\nClass EnhancementException; // An exception indicating some kind of problem performing bytecode enhancement.\n", "des": "package defining bytecode code enhancement (instrumentation) support."}
{"index": 523, "repo": "commons-vfs2-2.9.0", "code": "package http4;\n\nClass Http4FileContentInfoFactory; // Creates FileContentInfoFactory instances for http4 provider.\nClass Http4FileNameParser; // FileNameParser implementation for http4 provider, setting default port to 80.\nClass Http4FileObject<FS extends Http4FileSystem>; // A file object backed by Apache HttpComponents HttpClient.\nClass Http4FileProvider; // FileProvider implementation using HttpComponents HttpClient library.\nClass Http4FileSystem; // http4 file system.\nClass Http4FileSystemConfigBuilder; // Configuration options builder utility for http4 provider.\n", "des": "The HTTP4 File Provider"}
{"index": 1387, "repo": "spring-boot-actuator-3.1.1", "code": "package reflect;\n\npublic class OperationMethod extends Object; // Information describing an operation method on an endpoint method.\npublic class ReflectiveOperationInvoker extends Object implements OperationInvoker; // An OperationInvoker that invokes an operation using reflection.\n", "des": "Endpoint reflection support."}
{"index": 1894, "repo": "shiro-core-2.0.0-alpha-2", "code": "package support;\n\npublic class DefaultSubjectContext extends MapContext implements SubjectContext; // Default implementation of the SubjectContext interface.\npublic class DelegatingSubject extends Object implements Subject; // Implementation of the Subject interface that delegates method calls to an underlying SecurityManager instance for security checks.\npublic class DisabledSessionException extends SessionException; // Exception thrown if attempting to create a new Subject session, but that Subject's sessions are disabled.\npublic class SubjectCallable<V> extends Object implements Callable<V>; // A SubjectCallable associates a Subject with a target/delegate Callable to ensure proper Subject thread-state management when the Callable executes.\npublic class SubjectRunnable extends Object implements Runnable; // A SubjectRunnable ensures that a target/delegate Runnable will execute such that any call to SecurityUtils.getSubject() during the Runnable's execution will return the associated Subject instance.\npublic class SubjectThreadState extends Object implements ThreadState; // Manages thread-state for Subject access (supporting SecurityUtils.getSubject() calls) during a thread's execution.\n", "des": "Concrete support implementations of most of the org.apache.shiro.subject interfaces."}
{"index": 2534, "repo": "spring-security-core-6.1.2", "code": "package mapping;\n\npublic interface Attributes2GrantedAuthoritiesMapper; // Interface to be implemented by classes that can map a list of security attributes (such as roles or group names) to a collection of Spring Security GrantedAuthoritys.\npublic interface GrantedAuthoritiesMapper; // Mapping interface which can be injected into the authentication layer to convert the authorities loaded from storage into those which will be used in the Authentication object.\npublic class MapBasedAttributes2GrantedAuthoritiesMapper extends Object implements Attributes2GrantedAuthoritiesMapper, MappableAttributesRetriever, org.springframework.beans.factory.InitializingBean; // This class implements the Attributes2GrantedAuthoritiesMapper and MappableAttributesRetriever interfaces based on the supplied Map.\npublic interface MappableAttributesRetriever; // Interface to be implemented by classes that can retrieve a list of mappable security attribute strings (for example the list of all available J2EE roles in a web or EJB application).\npublic class NullAuthoritiesMapper extends Object implements GrantedAuthoritiesMapper;\npublic class SimpleAttributes2GrantedAuthoritiesMapper extends Object implements Attributes2GrantedAuthoritiesMapper, org.springframework.beans.factory.InitializingBean; // This class implements the Attributes2GrantedAuthoritiesMapper interface by doing a one-to-one mapping from roles to Spring Security GrantedAuthorities.\npublic final class SimpleAuthorityMapper extends Object implements GrantedAuthoritiesMapper, org.springframework.beans.factory.InitializingBean; // Simple one-to-one GrantedAuthoritiesMapper which allows for case conversion of the authority name and the addition of a string prefix (which defaults to ROLE_ ).\npublic class SimpleMappableAttributesRetriever extends Object implements MappableAttributesRetriever; // This class implements the MappableAttributesRetriever interface by just returning a list of mappable attributes as previously set using the corresponding setter method.\n", "des": "Strategies for mapping a list of attributes (such as roles or LDAP groups) to a list of GrantedAuthoritys."}
{"index": 3786, "repo": "lucene-analysis-common-9.7.0", "code": "package fi;\n\nClass FinnishAnalyzer; // Analyzer for Finnish.\nClass FinnishLightStemFilter; // A TokenFilter that applies FinnishLightStemmer to stem Finnish words.\nClass FinnishLightStemFilterFactory; // Factory for FinnishLightStemFilter.\nClass FinnishLightStemmer; // Light Stemmer for Finnish.\n", "des": "Analyzer for Finnish."}
{"index": 2086, "repo": "spring-webmvc-6.0.11", "code": "package json;\n\npublic abstract class AbstractJackson2View extends AbstractView; // Abstract base class for Jackson based and content type independent AbstractView implementations.\npublic class MappingJackson2JsonView extends AbstractJackson2View; // Spring MVC View that renders JSON content by serializing the model for the current request using Jackson 2's ObjectMapper.\n", "des": "Support classes for providing a View implementation based on JSON serialization."}
{"index": 3115, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package interceptor;\n\nInterface BytecodeInterceptorLogging; // Logging related to bytecode enhancement interceptors\nInterface BytecodeLazyAttributeInterceptor;\nInterface EnhancementHelper.InheritanceChecker;\nInterface LazyFetchGroupMetadata; // Information about a particular bytecode lazy attribute grouping.\nInterface SessionAssociableInterceptor;\nClass AbstractInterceptor;\nClass AbstractLazyLoadInterceptor;\nClass BytecodeInterceptorLogging_$logger; // Warning this class consists of generated code.\nClass EnhancementAsProxyLazinessInterceptor;\nClass EnhancementHelper;\nClass LazyAttributeDescriptor; // Descriptor for an attribute which is enabled for bytecode lazy fetching\nClass LazyAttributeLoadingInterceptor; // Interceptor that loads attributes lazily\nClass LazyAttributesMetadata; // Information about all of the bytecode lazy attributes for an entity\n", "des": "interceptor implementations"}
{"index": 3474, "repo": "hilt-android-2.47", "code": "package android;\n\npackage android.components; // This package contains Hilt's built-in Components for Android.\npackage android.flags; // Runtime flags to control Hilt behavior for rollout of changes.\npackage android.lifecycle; // This package contains Hilt APIs for Android applications.\npackage android.migration; // This package contains Android APIs to help migrating a codebase to Hilt.\npackage android.qualifiers; // This package contains Hilt's built-in Android Qualifier annotations.\npackage android.scopes; // This package contains Hilt's built-in Android Scope annotations.\nInterface ActivityRetainedLifecycle; // A ActivityRetainedLifecycle class is associated with the lifecycle of the ActivityRetainedComponent.\nInterface ActivityRetainedLifecycle.OnClearedListener; // Listener for receiving a callback for when the ActivityRetainedComponent will no longer be used and destroyed.\nInterface ViewModelLifecycle; // A class for registering listeners on the ViewModel lifecycle.\nClass EarlyEntryPoints; // Static utility methods for accessing entry points annotated with EarlyEntryPoint.\nAnnotation Type AndroidEntryPoint; // Marks an Android component class to be setup for injection with the standard Hilt Dagger Android components.\nAnnotation Type EarlyEntryPoint; // An escape hatch for when a Hilt entry point usage needs to be called before the singleton component is available in a Hilt test.\nAnnotation Type HiltAndroidApp; // Annotation for marking the Application class where the Dagger components should be generated.\nAnnotation Type WithFragmentBindings; // Makes a View annotated with AndroidEntryPoint have access to fragment bindings.\n", "des": "This package contains Hilt APIs for Android applications."}
{"index": 3187, "repo": "tomcat-api-10.1", "code": "package managed;\n\nInterface TransactionContextListener; // A listener for transaction completion events.\nInterface XAConnectionFactory; // XAConnectionFactory is an extension of ConnectionFactory used to create connections in a transaction managed environment.\nClass BasicManagedDataSource; // BasicManagedDataSource is an extension of BasicDataSource which creates ManagedConnections.\nClass DataSourceXAConnectionFactory; // An implementation of XAConnectionFactory which uses a real XADataSource to obtain connections and XAResources.\nClass LocalXAConnectionFactory; // An implementation of XAConnectionFactory which manages non-XA connections in XA transactions.\nClass LocalXAConnectionFactory.LocalXAResource; // LocalXAResource is a fake XAResource for non-XA connections.\nClass ManagedConnection<C extends Connection>; // ManagedConnection is responsible for managing a database connection in a transactional environment (typically called \"Container Managed\").\nClass ManagedDataSource<C extends Connection>; // The ManagedDataSource is a PoolingDataSource that creates ManagedConnections.\nClass PoolableManagedConnection; // PoolableConnection that unregisters from TransactionRegistry on Connection real destroy.\nClass PoolableManagedConnectionFactory; // A PoolableConnectionFactory that creates PoolableManagedConnections.\nClass TransactionContext; // TransactionContext represents the association between a single XAConnectionFactory and a Transaction.\nClass TransactionRegistry; // TransactionRegistry tracks Connections and XAResources in a transacted environment for a single XAConnectionFactory.\n", "des": "This package provides support for pooling of ManagedConnections."}
{"index": 707, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package ftp;\n\nClass Ftp; // The factory for Spring Integration FTP components.\nClass FtpInboundChannelAdapterSpec; // A RemoteFileInboundChannelAdapterSpec for a FtpInboundFileSynchronizingMessageSource.\nClass FtpMessageHandlerSpec;\nClass FtpOutboundGatewaySpec;\n", "des": "Provides FTP Components support for Spring Integration Java DSL."}
{"index": 3869, "repo": "lucene-spatial-extras-9.7.0", "code": "package serialized;\n\nClass SerializedDVStrategy; // A SpatialStrategy based on serializing a Shape stored into BinaryDocValues.\n", "des": "Strategies that serialize the shape (non-indexed)."}
{"index": 2158, "repo": "wicket-core-10.0.0-M1", "code": "package resolver;\n\npublic final class AutoLinkResolver extends Object implements IComponentResolver; // The AutoLinkResolver is responsible to handle automatic link resolution.\npublic abstract static class AutoLinkResolver.AbstractAutolinkResolverDelegate extends Object implements AutoLinkResolver.IAutolinkResolverDelegate; // Abstract implementation that has a helper method for creating a resource reference.\npublic static final class AutoLinkResolver.AutolinkBookmarkablePageLink<T> extends BookmarkablePageLink<T> implements IComponentResolver; // Autolink components delegate component resolution to their parent components.\npublic static interface AutoLinkResolver.IAutolinkResolverDelegate; // Interface to delegate the actual resolving of auto components to.\npublic static final class AutoLinkResolver.PathInfo extends Object; // Encapsulates different aspects of a path.\npublic class ComponentResolvers extends Object; // Utility class for IComponentResolvers\npublic static interface ComponentResolvers.ResolverFilter;\npublic class HtmlHeaderResolver extends Object implements IComponentResolver; // This is a tag resolver which handles <head> and <wicket:head>tags.\npublic interface IComponentResolver extends org.apache.wicket.util.io.IClusterable; // IComponentResolvers are responsible for mapping component names to Wicket components.\npublic class WicketContainerResolver extends Object implements IComponentResolver; // This is a tag resolver which handles <wicket:container> Sometimes adding components in certain ways may lead to output of invalid markup.\npublic class WicketMessageResolver extends Object implements IComponentResolver; // This is a tag resolver which handles <wicket:message key=\"myKey\">Default Text</wicket:message>.\n", "des": "Resolvers implement the IComponentResolver interface and must be registered with the application."}
{"index": 2655, "repo": "spring-data-cassandra-4.1.2", "code": "package lookup;\n\npublic abstract class AbstractRoutingSessionFactory extends Object implements SessionFactory, InitializingBean; // Abstract SessionFactory implementation that routes AbstractRoutingSessionFactory.getSession() calls to one of various target factories based on a lookup key.\npublic class BeanFactorySessionFactoryLookup extends Object implements SessionFactoryLookup, BeanFactoryAware; // SessionFactoryLookup implementation based on a Spring BeanFactory.\npublic class MapSessionFactoryLookup extends Object implements SessionFactoryLookup; // Simple SessionFactoryLookup implementation that relies on a map for doing lookups.\n@FunctionalInterface public interface SessionFactoryLookup; // Strategy interface for looking up SessionFactory by name.\npublic class SessionFactoryLookupFailureException extends NonTransientDataAccessException; // Exception to be thrown by a SessionFactoryLookup implementation, indicating that the specified SessionFactory could not be obtained.\npublic class SingleSessionFactoryLookup extends Object implements SessionFactoryLookup; // An implementation of SessionFactoryLookup that simply wraps a single given SessionFactory, returned for any session factory name.\n", "des": "Provides a strategy for looking up SessionFactory."}
{"index": 1085, "repo": "graal-sdk-1.0.0-rc7", "code": "package polyglot;\n\npackage polyglot.io; // Input/Output support for the Graal-SDK polyglot API.\npackage polyglot.management; // The management package provides tools that monitor and instrument the behavior of guest language programs.\npackage polyglot.proxy; // The Graal SDK proxy interfaces allow to mimic guest language objects, arrays, executables, primitives and native objects in Graal languages.\nClass Context; // A polyglot context for Graal guest languages that allows to evaluate code.\nClass Engine; // An execution engine for Graal guest languages that allows to inspect the the installed guest languages, instruments and their available options.\nClass Instrument; // A handle for an instrument installed in an engine.\nClass Language; // A handle for a Graal language installed in an engine.\nClass Source; // Representation of a source code unit and its contents that can be evaluated in an execution context.\nClass SourceSection; // Description of contiguous section of text within a Source of program code.; supports multiple modes of access to the text and its location.\nClass TypeLiteral<T>; // Represents a generic type T.\nClass Value; // Represents a polyglot value that can be accessed using a set of language agnostic operations.\nClass PolyglotException; // A polyglot exception represents errors that contain Graal guest languages on the stack trace.\n", "des": "The Graal-SDK polyglot API allows to embed Graal languages in Java applications."}
{"index": 2172, "repo": "spring-security-web-6.1.2", "code": "package web;\n\npackage web.access; // Access-control related classes and packages.\npackage web.authentication; // Authentication processing mechanisms, which respond to the submission of authentication credentials using various protocols (eg BASIC, CAS, form login etc).\npackage web.context; // Classes which are responsible for maintaining the security context between HTTP requests.\npackage web.jaasapi; // Makes a JAAS Subject available as the current Subject.\npackage web.jackson2; // Mix-in classes to provide Jackson serialization support.\npackage web.savedrequest; // Classes related to the caching of an HttpServletRequest which requires authentication.\npackage web.servletapi; // Populates a Servlet request with a new Spring Security compliant HttpServletRequestWrapper.\npackage web.session; // Session management filters, HttpSession events and publisher classes.\npackage web.util; // Web utility classes.\npublic interface AuthenticationEntryPoint; // Used by ExceptionTranslationFilter to commence an authentication scheme.\npublic class DefaultRedirectStrategy extends Object implements RedirectStrategy; // Simple implementation of RedirectStrategy which is the default used throughout the framework.\npublic final class DefaultSecurityFilterChain extends Object implements SecurityFilterChain; // Standard implementation of SecurityFilterChain.\npublic class FilterChainProxy extends org.springframework.web.filter.GenericFilterBean; // Delegates Filter requests to a list of Spring-managed filter beans.\npublic static interface FilterChainProxy.FilterChainDecorator; // A strategy for decorating the provided filter chain with one that accounts for the SecurityFilterChain for a given request.\npublic static interface FilterChainProxy.FilterChainValidator;\npublic static final class FilterChainProxy.VirtualFilterChainDecorator extends Object implements FilterChainProxy.FilterChainDecorator; // A FilterChainProxy.FilterChainDecorator that uses the FilterChainProxy.VirtualFilterChain\npublic class FilterInvocation extends Object; // Holds objects associated with a HTTP filter.\npublic final class ObservationFilterChainDecorator extends Object implements FilterChainProxy.FilterChainDecorator; // A FilterChainProxy.FilterChainDecorator that wraps the chain in before and after observations\npublic interface PortMapper; // PortMapper implementations provide callers with information about which HTTP ports are associated with which HTTPS ports on the system, and vice versa.\npublic class PortMapperImpl extends Object implements PortMapper; // Concrete implementation of PortMapper that obtains HTTP:HTTPS pairs from the application context.\n", "des": "Spring Security's web security module."}
{"index": 2076, "repo": "spring-webmvc-6.0.11", "code": "package resource;\n\npublic abstract class AbstractResourceResolver extends Object implements ResourceResolver; // Base class for ResourceResolver implementations.\npublic abstract class AbstractVersionStrategy extends Object implements VersionStrategy; // Abstract base class for VersionStrategy implementations.\nprotected static class AbstractVersionStrategy.FileNameVersionPathStrategy extends Object implements VersionPathStrategy; // File name-based VersionPathStrategy, e.g.\nprotected static class AbstractVersionStrategy.PrefixVersionPathStrategy extends Object implements VersionPathStrategy; // A prefix-based VersionPathStrategy, e.g.\npublic class CachingResourceResolver extends AbstractResourceResolver; // A ResourceResolver that resolves resources from a Cache or otherwise delegates to the resolver chain and saves the result in the cache.\npublic class CachingResourceTransformer extends Object implements ResourceTransformer; // A ResourceTransformer that checks a Cache to see if a previously transformed resource exists in the cache and returns it if found, and otherwise delegates to the resolver chain and saves the result in the cache.\npublic class ContentVersionStrategy extends AbstractVersionStrategy; // A VersionStrategy that calculates a Hex MD5 hash from the content of the resource and appends it to the file name, e.g.\npublic class CssLinkResourceTransformer extends ResourceTransformerSupport; // A ResourceTransformer implementation that modifies links in a CSS file to match the public URL paths that should be exposed to clients (e.g.\nprotected abstract static class CssLinkResourceTransformer.AbstractLinkParser extends Object implements CssLinkResourceTransformer.LinkParser; // Abstract base class for CssLinkResourceTransformer.LinkParser implementations.\n@FunctionalInterface protected static interface CssLinkResourceTransformer.LinkParser; // Extract content chunks that represent links.\npublic class DefaultServletHttpRequestHandler extends Object implements org.springframework.web.HttpRequestHandler, org.springframework.web.context.ServletContextAware; // An HttpRequestHandler for serving static files using the Servlet container's \"default\" Servlet.\npublic class EncodedResourceResolver extends AbstractResourceResolver; // Resolver that delegates to the chain, and if a resource is found, it then attempts to find an encoded (e.g.\npublic class FixedVersionStrategy extends AbstractVersionStrategy; // A VersionStrategy that relies on a fixed version applied as a request path prefix, e.g.\npublic interface HttpResource extends org.springframework.core.io.Resource; // Extended interface for a Resource to be written to an HTTP response.\n", "des": "Support classes for serving static resources."}
{"index": 2879, "repo": "spring-integration-core-6.1.2", "code": "package scheduling;\n\npublic class PollerMetadata extends Object;\npublic class PollSkipAdvice extends Object implements org.aopalliance.intercept.MethodInterceptor; // An advice that can be added to a poller's advice chain that determines whether a poll should be skipped or not.\npublic interface PollSkipStrategy; // Implementations determine whether a particular poll should be skipped.\n@ManagedResource public class SimplePollSkipStrategy extends Object implements PollSkipStrategy; // A simple PollSkipStrategy to be used with a PollSkipAdvice.\n", "des": "Provides classes related to task scheduling."}
{"index": 1690, "repo": "spring-data-couchbase-5.1.2", "code": "package convert;\n\npackage convert.translation; // This package contains a service interface to translate entities to a Couchbase storable format, and its implementations.\npublic abstract class AbstractCouchbaseConverter extends Object implements CouchbaseConverter, InitializingBean; // An abstract CouchbaseConverter that provides the basics for the MappingCouchbaseConverter.\n@ReadingConverter public class BooleanToEnumConverterFactory extends Object implements ConverterFactory<Boolean,Enum>; // Reading Converter factory for Enums.\npublic class ConverterHasNoConversion extends RuntimeException; // PropertyValueConverter throws this when cannot convert the property.\npublic class CouchbaseConversionContext extends Object implements ValueConversionContext<CouchbasePersistentProperty>; // ValueConversionContext that allows to delegate read/write to an underlying CouchbaseConverter.\npublic interface CouchbaseConverter extends EntityConverter<CouchbasePersistentEntity<?>,CouchbasePersistentProperty,Object,CouchbaseDocument>, CouchbaseWriter<Object,CouchbaseDocument>, EntityReader<Object,CouchbaseDocument>; // Marker interface for the converter, identifying the types to and from that can be converted.\npublic class CouchbaseCustomConversions extends CustomConversions; // Value object to capture custom conversion.\npublic static class CouchbaseCustomConversions.CouchbaseConverterConfigurationAdapter extends Object; // CouchbaseCustomConversions.CouchbaseConverterConfigurationAdapter encapsulates creation of CustomConversions.ConverterConfiguration with CouchbaseDB specifics.\npublic class CouchbaseDocumentPropertyAccessor extends MapAccessor; // A property accessor for document properties.\npublic final class CouchbaseJsr310Converters extends Object; // Helper class to register JSR-310 specific Converter implementations.\n@WritingConverter public static enum CouchbaseJsr310Converters.DurationToStringConverter extends Enum<CouchbaseJsr310Converters.DurationToStringConverter> implements Converter<Duration,String>;\n@WritingConverter public static enum CouchbaseJsr310Converters.InstantToLongConverter extends Enum<CouchbaseJsr310Converters.InstantToLongConverter> implements Converter<Instant,Long>;\n@WritingConverter public static enum CouchbaseJsr310Converters.LocalDateTimeToLongConverter extends Enum<CouchbaseJsr310Converters.LocalDateTimeToLongConverter> implements Converter<LocalDateTime,Long>;\n@WritingConverter public static enum CouchbaseJsr310Converters.LocalDateToLongConverter extends Enum<CouchbaseJsr310Converters.LocalDateToLongConverter> implements Converter<LocalDate,Long>;\n", "des": "This package contains classes used for entity-to-JSON conversions, type mapping and writing."}
{"index": 510, "repo": "commons-vfs2-2.9.0", "code": "package filter;\n\nInterface ConditionalFileFilter; // Defines operations for conditional file filters.\nClass AgeFileFilter; // Filters files based on a cutoff time, can filter either newer files or files equal to or older.\nClass AndFileFilter; // A filter providing conditional AND logic across a list of file filters.\nClass CanExecuteFileFilter; // This filter accepts Files that can be executed.\nClass CanReadFileFilter; // This filter accepts Files that can be read.\nClass CanWriteFileFilter; // This filter accepts Files that can be written to.\nClass DirectoryFileFilter; // This filter accepts Files that are directories.\nClass EmptyFileFilter; // This filter accepts files or directories that are empty.\nClass FalseFileFilter; // A file filter that always returns false.\nClass FileFileFilter; // This filter accepts Files that are files (not directories).\nClass HiddenFileFilter; // This filter accepts Files that are hidden.\nClass NameFileFilter; // Filters file names for a certain name.\nClass NotFileFilter; // This filter produces a logical NOT of the filters specified.\nClass OrFileFilter; // A FileFilter providing conditional OR logic across a list of file filters.\nClass PrefixFileFilter; // Filters file names for a certain prefix.\nClass RegexFileFilter; // Filters files using supplied regular expression(s).\nClass SizeFileFilter; // Filters files based on size, can filter either smaller files or files equal to or larger than a given threshold.\nClass SizeRangeFileFilter; // Filter that accepts files whose size is >= minimum size and <= maximum size.\nClass SuffixFileFilter; // Filters files based on the suffix (what the file name ends with).\nClass SymbolicLinkFileFilter; // This filter accepts Files that are symbolic links.\nClass TrueFileFilter; // A file filter that always returns true.\nClass WildcardFileFilter; // Filters files using the supplied wildcards.\nEnum IOCase; // Enumeration of IO case sensitivity.\n", "des": "Implementations of org.apache.commons.vfs2.FileFilter."}
{"index": 2453, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package cache;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration.class}) @ConditionalOnBean(org.springframework.cache.CacheManager.class) @Import({org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMeterBinderProvidersConfiguration.class,org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMetricsRegistrarConfiguration.class}) public class CacheMetricsAutoConfiguration extends Object; // Auto-configuration for metrics on all available caches.\n", "des": "Auto-configuration for cache metrics."}
{"index": 2078, "repo": "spring-webmvc-6.0.11", "code": "package tags;\n\npackage tags.form; // Spring's form tag library for JSP views in Spring's Web MVC framework.\npublic interface ArgumentAware; // Allows implementing tag to utilize nested spring:argument tags.\npublic class ArgumentTag extends BodyTagSupport; // The <argument> tag is based on the JSTL fmt:param tag.\npublic class BindErrorsTag extends HtmlEscapingAwareTag; // This <hasBindErrors> tag provides an Errors instance in case of bind errors.\npublic class BindTag extends HtmlEscapingAwareTag implements EditorAwareTag; // The <bind> tag supports evaluation of binding errors for a certain bean or bean property.\npublic interface EditorAwareTag; // Interface to be implemented by JSP tags that expose a PropertyEditor for a property that they are currently bound to.\npublic class EscapeBodyTag extends HtmlEscapingAwareTag implements BodyTag; // The <escapeBody> tag is used to escape its enclosed body content, applying HTML escaping and/or JavaScript escaping.\npublic class EvalTag extends HtmlEscapingAwareTag; // The <eval> tag evaluates a Spring expression (SpEL) and either prints the result or assigns it to a variable.\npublic class HtmlEscapeTag extends RequestContextAwareTag; // The <htmlEscape> tag sets default HTML escape value for the current page.\npublic abstract class HtmlEscapingAwareTag extends RequestContextAwareTag; // Superclass for tags that output content that might get HTML-escaped.\npublic class MessageTag extends HtmlEscapingAwareTag implements ArgumentAware; // The <message> tag looks up a message in the scope of this page.\npublic class NestedPathTag extends TagSupport implements TryCatchFinally; // The <nestedPath> tag supports and assists with nested beans or bean properties in the model.\npublic class Param extends Object; // Bean used to pass name-value pair parameters from a ParamTag to a ParamAware tag.\npublic interface ParamAware; // Allows implementing tag to utilize nested spring:param tags.\npublic class ParamTag extends BodyTagSupport; // The <param> tag collects name-value parameters and passes them to a ParamAware ancestor in the tag hierarchy.\npublic abstract class RequestContextAwareTag extends TagSupport implements TryCatchFinally; // Superclass for all tags that require a RequestContext.\n@Deprecated(since=\"6.0\") public class ThemeTag extends MessageTag;\n", "des": "This package contains Spring's JSP standard tag library for JSP 2.0+."}
{"index": 929, "repo": "commons-compress-1.23.0", "code": "package zstandard;\n\nClass ZstdCompressorInputStream; // CompressorInputStream implementation to decode Zstandard encoded stream.\nClass ZstdCompressorOutputStream; // CompressorOutputStream implementation to create Zstandard encoded stream.\nClass ZstdUtils; // Utility code for the Zstandard compression format.\n", "des": "Provides stream class for (de)compressing streams using the Zstandard algorithm based on Zstandard JNI."}
{"index": 1145, "repo": "commons-math3-3.6.1", "code": "package function;\n\nClass Abs; // Absolute value function.\nClass Acos; // Arc-cosine function.\nClass Acosh; // Hyperbolic arc-cosine function.\nClass Add; // Add the two operands.\nClass Asin; // Arc-sine function.\nClass Asinh; // Hyperbolic arc-sine function.\nClass Atan; // Arc-tangent function.\nClass Atan2; // Arc-tangent function.\nClass Atanh; // Hyperbolic arc-tangent function.\nClass Cbrt; // Cube root function.\nClass Ceil; // ceil function.\nClass Constant; // Constant function.\nClass Cos; // Cosine function.\nClass Cosh; // Hyperbolic cosine function.\nClass Divide; // Divide the first operand by the second.\nClass Exp; // Exponential function.\nClass Expm1; // ex-1 function.\nClass Floor; // floor function.\nClass Gaussian; // Gaussian function.\nClass Gaussian.Parametric; // Parametric function where the input array contains the parameters of the Gaussian, ordered as follows: Norm Mean Standard deviation\nClass HarmonicOscillator; // simple harmonic oscillator function.\nClass HarmonicOscillator.Parametric; // Parametric function where the input array contains the parameters of the harmonic oscillator function, ordered as follows: Amplitude Angular frequency Phase\nClass Identity; // Identity function.\nClass Inverse; // Inverse function.\nClass Log; // Natural logarithm function.\nClass Log10; // Base 10 logarithm function.\nClass Log1p; // log(1 + p) function.\nClass Logistic; // Generalised logistic function.\nClass Logistic.Parametric; // Parametric function where the input array contains the parameters of the logistic function, ordered as follows: k m b q a n\nClass Logit; // Logit function.\nClass Logit.Parametric; // Parametric function where the input array contains the parameters of the logit function, ordered as follows: Lower bound Higher bound\nClass Max; // Maximum function.\nClass Min; // Minimum function.\nClass Minus; // Minus function.\nClass Multiply; // Multiply the two operands.\n", "des": "The function package contains function objects that wrap the methods contained in Math, as well as common mathematical functions such as the gaussian and sinc functions."}
{"index": 3522, "repo": "opennlp-tools-2.2.0", "code": "package letsmt;\n\nClass DetokenizeSentenceSampleStream;\nClass LetsmtDocument; // A structure to hold the letsmt document.\nClass LetsmtDocument.LetsmtDocumentHandler; // A content handler to receive and process SAX events.\nClass LetsmtDocument.LetsmtSentence;\nClass LetsmtSentenceStreamFactory<P>;\n", "des": "Experimental package related to the letsmt corpus format."}
{"index": 3174, "repo": "tomcat-api-10.1", "code": "package realm;\n\nInterface X509UsernameRetriever; // Provides an interface for retrieving a user name from an X509Certificate.\nClass AuthenticatedUserRealm; // This Realm is intended for use with Authenticator implementations (SSLAuthenticator, SpnegoAuthenticator) that authenticate the user as well as obtain the user credentials.\nClass CombinedRealm; // Realm implementation that contains one or more realms.\nClass DataSourceRealm; // Implementation of Realm that works with any JDBC JNDI DataSource.\nClass DigestCredentialHandlerBase; // Base implementation for the Tomcat provided CredentialHandlers.\nClass GenericPrincipal; // Generic implementation of java.security.Principal that is available for use by Realm implementations.\nClass JAASCallbackHandler; // Implementation of the JAAS CallbackHandler interface, used to negotiate delivery of the username and credentials that were specified to our constructor.\nClass JAASMemoryLoginModule; // Implementation of the JAAS LoginModule interface, primarily for use in testing JAASRealm.\nClass JAASRealm; // Implementation of Realm that authenticates users via the Java Authentication and Authorization Service (JAAS).\nClass JNDIRealm; // Implementation of Realm that works with a directory server accessed via the Java Naming and Directory Interface (JNDI) APIs.\nClass JNDIRealm.JNDIConnection; // Class holding the connection to the directory plus the associated non thread safe message formats.\nClass JNDIRealm.User; // A protected class representing a User\nClass LockOutRealm; // This class extends the CombinedRealm (hence it can wrap other Realms) to provide a user lock out mechanism if there are too many failed authentication attempts in a given period of time.\nClass LockOutRealm.LockRecord;\nClass MemoryRealm; // Simple implementation of Realm that reads an XML file to configure the valid users, passwords, and roles.\nClass MemoryRuleSet; // RuleSet for recognizing the users defined in the XML file processed by MemoryRealm.\nClass MessageDigestCredentialHandler; // This credential handler supports the following forms of stored passwords: encodedCredential - a hex encoded digest of the password digested using the configured digest {MD5}encodedCredential - a Base64 encoded MD5 digest of the password {SHA}encodedCredential - a Base64 encoded SHA1 digest of the password {SSHA}encodedCredential - 20 byte Base64 encoded SHA1 digest followed by variable length salt.\n", "des": "This package contains Realm implementations for the various supported realm technologies for authenticating users and identifying their associated roles."}
{"index": 2450, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package management;\n\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.management.HeapDumpWebEndpoint.class) public class HeapDumpWebEndpointAutoConfiguration extends Object; // Auto-configuration for HeapDumpWebEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.management.ThreadDumpEndpoint.class) public class ThreadDumpEndpointAutoConfiguration extends Object; // Auto-configuration for the ThreadDumpEndpoint.\n", "des": "Auto-configuration for actuator management concerns."}
{"index": 1009, "repo": "spring-ws-3.0.10.RELEASE", "code": "package xml;\n\npackage xml.dom; // Provides classes that help with DOM: the Document Object Model.\npackage xml.namespace; // Provides classes that help with XML Namespace processing.\npackage xml.sax; // Provides classes that help with SAX: the Simple API for XML.\npackage xml.transform; // Provides classes that help with XML transformations.\npackage xml.validation; // Provides classes for XML validation in JAXP 1.0 and JAXP 1.3.\npackage xml.xpath; // Provides XPathTemplate implementations, and various classes for XPath evaluation using JAXP 1.3, and Jaxen.\npackage xml.xsd; // Provides an abstraction over XSD XML schemas.\nClass DocumentBuilderFactoryUtils;\nClass JaxpVersion; // Helper class used to find the current version of JAXP.\nClass XMLInputFactoryUtils;\nClass XmlException; // Root of the hierarchy of XML exception.\n", "des": "Provides classes for XML handling: version detection and a base XML exception class."}
{"index": 1428, "repo": "spring-boot-actuator-3.1.1", "code": "package neo4j;\n\npublic class Neo4jHealthIndicator extends AbstractHealthIndicator; // HealthIndicator that tests the status of a Neo4j by executing a Cypher statement and extracting server and database information.\npublic final class Neo4jReactiveHealthIndicator extends AbstractReactiveHealthIndicator; // ReactiveHealthIndicator that tests the status of a Neo4j by executing a Cypher statement and extracting server and database information.\n", "des": "Actuator support for Neo4j."}
{"index": 1115, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package collectormanager;\n\nClass NMCollectorService; // Service that handles collector information.\n", "des": "Package org.apache.hadoop.yarn.server.nodemanager.collectormanager contains classes for handling timeline collector information."}
{"index": 588, "repo": "org.apache.karaf.main-2.4.4", "code": "package eventmgr;\n\nInterface EventDispatcher<K,V,E>; // The EventDispatcher interface contains the method that is called by the Event Manager to complete the event delivery to the event listener.\nClass CopyOnWriteIdentityMap<K,V>; // A copy-on-write identity map.\nClass EventListeners<K,V>; // As of 3.5.\nClass EventManager; // This class is the central class for the Event Manager.\nClass ListenerQueue<K,V,E>; // The ListenerQueue is used to snapshot the list of listeners at the time the event is fired.\n", "des": "Provides the event manager API."}
{"index": 1335, "repo": "groovy-all-4.0.13", "code": "package groovydoc;\n\npublic interface GroovyAnnotationRef;\npublic interface GroovyClassDoc extends GroovyType, GroovyProgramElementDoc;\npublic interface GroovyConstructorDoc extends GroovyExecutableMemberDoc;\npublic interface GroovyDoc extends Comparable<GroovyDoc>;\npublic interface GroovyDocErrorReporter;\npublic interface GroovyExecutableMemberDoc extends GroovyMemberDoc;\npublic interface GroovyFieldDoc extends GroovyMemberDoc;\npublic interface GroovyMemberDoc extends GroovyProgramElementDoc;\npublic interface GroovyMethodDoc extends GroovyExecutableMemberDoc;\npublic interface GroovyPackageDoc extends GroovyDoc;\npublic interface GroovyParameter;\npublic interface GroovyProgramElementDoc extends GroovyDoc;\npublic interface GroovyRootDoc extends GroovyDoc, GroovyDocErrorReporter;\npublic interface GroovyTag;\npublic interface GroovyType;\n", "des": "GroovyDoc internal classes."}
{"index": 1740, "repo": "spring-batch-integration-5.0.2", "code": "package chunk;\n\npublic class AsynchronousFailureException extends org.springframework.batch.item.ItemWriterException; // Exception indicating that a failure or early completion condition was detected in a remote worker.\npublic interface ChunkHandler<T>; // Interface for a remote worker in the Remote Chunking pattern.\npublic class ChunkMessageChannelItemWriter<T> extends Object implements StepExecutionListener, org.springframework.batch.item.ItemWriter<T>, org.springframework.batch.item.ItemStream, StepContributionSource;\nprotected static class ChunkMessageChannelItemWriter.LocalState extends Object;\n@MessageEndpoint public class ChunkProcessorChunkHandler<S> extends Object implements ChunkHandler<S>, org.springframework.beans.factory.InitializingBean; // A ChunkHandler based on a ChunkProcessor.\npublic class ChunkRequest<T> extends Object implements Serializable; // Encapsulation of a chunk of items to be processed remotely as part of a step execution.\npublic class ChunkResponse extends Object implements Serializable; // Encapsulates a response to processing a chunk of items, summarising the result as a StepContribution.\npublic class JmsRedeliveredExtractor extends Object;\npublic class MessageSourcePollerInterceptor extends Object implements org.springframework.messaging.support.ChannelInterceptor, org.springframework.beans.factory.InitializingBean; // A ChannelInterceptor that turns a pollable channel into a \"pass-thru channel\": if a client calls receive() on the channel it will delegate to a MessageSource to pull the message directly from an external source.\npublic class RemoteChunkHandlerFactoryBean<T> extends Object implements org.springframework.beans.factory.FactoryBean<ChunkHandler<T>>; // Convenient factory bean for a chunk handler that also converts an existing chunk-oriented step into a remote chunk manager.\npublic class RemoteChunkingManagerStepBuilder<I,O> extends FaultTolerantStepBuilder<I,O>; // Builder for a manager step in a remote chunking setup.\npublic class RemoteChunkingManagerStepBuilderFactory extends Object; // Convenient factory for a RemoteChunkingManagerStepBuilder which sets the JobRepository and PlatformTransactionManager automatically.\npublic class RemoteChunkingWorkerBuilder<I,O> extends Object; // Builder for a worker in a remote chunking setup.\n", "des": "Components for remote chunking."}
{"index": 2361, "repo": "spring-boot-3.1.1", "code": "package server;\n\npublic abstract class AbstractServletWebServerFactory extends AbstractConfigurableWebServerFactory implements ConfigurableServletWebServerFactory; // Abstract base class for ConfigurableServletWebServerFactory implementations.\npublic interface ConfigurableServletWebServerFactory extends ConfigurableWebServerFactory, ServletWebServerFactory, WebListenerRegistry; // A configurable ServletWebServerFactory.\n@FunctionalInterface public interface CookieSameSiteSupplier; // Strategy interface that can be used with ConfigurableServletWebServerFactory implementations in order to supply custom Cookie.SameSite values for specific cookies.\npublic class Encoding extends Object; // Configuration properties for server HTTP encoding.\npublic static enum Encoding.Type extends Enum<Encoding.Type>; // Type of HTTP message to consider for encoding configuration.\npublic class Jsp extends Object; // Configuration for the server's JSP servlet.\n@FunctionalInterface public interface ServletWebServerFactory extends WebServerFactory; // Factory interface that can be used to create a WebServer.\npublic class Session extends Object; // Session properties.\npublic static class Session.Cookie extends Cookie; // Session cookie properties.\npublic static enum Session.SessionTrackingMode extends Enum<Session.SessionTrackingMode>; // Available session tracking modes (mirrors SessionTrackingMode.\n", "des": "Servlet web server abstractions."}
{"index": 1281, "repo": "spring-core-6.0.11", "code": "package serializer;\n\npackage serializer.support; // Support classes for Spring's serializer abstraction.\npublic class DefaultDeserializer extends Object implements Deserializer<Object>; // A default Deserializer implementation that reads an input stream using Java serialization.\npublic class DefaultSerializer extends Object implements Serializer<Object>; // A Serializer implementation that writes an object to an output stream using Java serialization.\n@FunctionalInterface public interface Deserializer<T>; // A strategy interface for converting from data in an InputStream to an Object.\n@FunctionalInterface public interface Serializer<T>; // A strategy interface for streaming an object to an OutputStream.\n", "des": "Root package for Spring's serializer interfaces and implementations."}
{"index": 2625, "repo": "shiro-web-2.0.0-alpha-2", "code": "package env;\n\npublic class DefaultWebEnvironment extends org.apache.shiro.env.DefaultEnvironment implements MutableWebEnvironment; // Default WebEnvironment implementation based on a backing Map instance.\npublic class EnvironmentLoader extends Object; // An EnvironmentLoader is responsible for loading a web application's Shiro WebEnvironment (which includes the web app's WebSecurityManager) into the ServletContext at application startup.\npublic class EnvironmentLoaderListener extends EnvironmentLoader implements javax.servlet.ServletContextListener; // Bootstrap listener to startup and shutdown the web application's Shiro WebEnvironment at ServletContext startup and shutdown respectively.\npublic class IniWebEnvironment extends ResourceBasedWebEnvironment implements org.apache.shiro.lang.util.Initializable, org.apache.shiro.lang.util.Destroyable; // WebEnvironment implementation configured by an Ini instance or Ini resource locations.\npublic interface MutableWebEnvironment extends WebEnvironment; // A WebEnvironment that supports 'write' operations operations.\npublic abstract class ResourceBasedWebEnvironment extends DefaultWebEnvironment implements org.apache.shiro.config.ResourceConfigurable; // Abstract implementation for WebEnvironments that can be initialized via resource paths (config files).\npublic interface WebEnvironment extends org.apache.shiro.env.Environment; // A web-specific Environment instance, used in web applications.\n", "des": "Web-specific Environment implementation and support."}
{"index": 949, "repo": "spring-ws-3.0.10.RELEASE", "code": "package dom;\n\nClass DomPoxMessage; // Implementation of the PoxMessage interface that is based on a DOM Document.\nClass DomPoxMessageFactory; // Implementation of the WebServiceMessageFactory interface that creates a DomPoxMessage.\nClass DomPoxMessageException; // Specific subclass of PoxMessageException for DOM Plain Old XML messages.\n", "des": "Contains an implementation of the POX interfaces that is based on DOM."}
{"index": 2788, "repo": "spring-expression-6.0.11", "code": "package ast;\n\npublic class Assign extends SpelNodeImpl; // Represents assignment.\npublic abstract class AstUtils extends Object; // Utilities methods for use in the Ast classes.\npublic class BeanReference extends SpelNodeImpl; // Represents a bean reference to a type, for example @foo or @'foo.bar'.\npublic class BooleanLiteral extends Literal; // Represents the literal values TRUE and FALSE.\npublic class CompoundExpression extends SpelNodeImpl; // Represents a DOT separated expression sequence, such as property1.property2.methodOne().\npublic class ConstructorReference extends SpelNodeImpl; // Represents the invocation of a constructor.\npublic class Elvis extends SpelNodeImpl; // Represents the elvis operator ?:.\npublic class FloatLiteral extends Literal; // Expression language AST node that represents a float literal.\npublic class FunctionReference extends SpelNodeImpl; // A function reference is of the form \"#someFunction(a,b,c)\".\npublic class Identifier extends SpelNodeImpl; // An 'identifier' SpelNode.\npublic class Indexer extends SpelNodeImpl; // An Indexer can index into some proceeding structure to access a particular piece of it.\npublic class InlineList extends SpelNodeImpl; // Represent a list in an expression, e.g.\npublic class InlineMap extends SpelNodeImpl; // Represent a map in an expression, e.g.\npublic class IntLiteral extends Literal; // Expression language AST node that represents an integer literal.\npublic abstract class Literal extends SpelNodeImpl; // Common superclass for nodes representing literals (boolean, string, number, etc).\npublic class LongLiteral extends Literal; // Expression language AST node that represents a long integer literal.\npublic class MethodReference extends SpelNodeImpl; // Expression language AST node that represents a method reference.\npublic class NullLiteral extends Literal; // Expression language AST node that represents null.\npublic class OpAnd extends Operator; // Represents the boolean AND operation.\npublic class OpDec extends Operator; // Decrement operator.\npublic class OpDivide extends Operator; // Implements division operator.\npublic class OpEQ extends Operator; // Implements the equality operator.\npublic abstract class Operator extends SpelNodeImpl; // Common supertype for operators that operate on either one or two operands.\n", "des": "SpEL's abstract syntax tree."}
{"index": 919, "repo": "commons-compress-1.23.0", "code": "package deflate64;\n\nClass Deflate64CompressorInputStream; // Deflate64 decompressor.\n", "des": "Provides a stream that allows decompressing streams using the DEFLATE64(tm) algorithm."}
{"index": 3636, "repo": "solr-core-9.3.0", "code": "package api;\n\nInterface ApiSupport; // The interface that is implemented by a request handler to support the V2 end point\nInterface ConfigurablePlugin<T extends org.apache.solr.common.MapWriter>; // Implement this interface if your plugin needs to accept some configuration\nInterface ContainerPluginsRegistry.PluginRegistryListener; // Listener for notifications about added / deleted / modified plugins.\nClass AnnotatedApi; // This class implements an Api just from an annotated java class The class must have an annotation EndPoint Each method must have an annotation Command The methods that implement a command should have the first 2 parameters SolrQueryRequest and SolrQueryResponse or it may optionally have a third parameter which could be a java class annotated with jackson annotations.\nClass Api; // Every version 2 API must extend the this class.\nClass ApiBag;\nClass ApiBag.IntrospectApi;\nClass ApiBag.LazyLoadedApi;\nClass ApiBag.ReqHandlerToApi;\nClass ContainerPluginsRegistry; // This class manages the container-level plugins and their Api-s.\nClass CoordinatorV2HttpSolrCall;\nClass JerseyResource; // A marker parent type for all Jersey \"resource\" classes.\nClass PayloadObj<T>; // Holds the deserialized object for each command and also holds request , response objects\nClass V2HttpCall;\nClass V2HttpCall.CompositeApi;\nEnum ContainerPluginsRegistry.Diff;\nClass ApiBag.ExceptionWithErrObject;\nAnnotation Type Command;\nAnnotation Type EndPoint;\n", "des": "Commonly used classes for Solr V2 API."}
{"index": 3833, "repo": "lucene-highlighter-9.7.0", "code": "package vectorhighlight;\n\nInterface BoundaryScanner; // Finds fragment boundaries: pluggable into BaseFragmentsBuilder\nInterface FragListBuilder; // FragListBuilder is an interface for FieldFragList builder classes.\nInterface FragmentsBuilder; // FragmentsBuilder is an interface for fragments (snippets) builder classes.\nClass BaseFragListBuilder; // A abstract implementation of FragListBuilder.\nClass BaseFragmentsBuilder; // Base FragmentsBuilder implementation that supports colored pre/post tags and multivalued fields.\nClass BreakIteratorBoundaryScanner; // A BoundaryScanner implementation that uses BreakIterator to find boundaries in the text.\nClass FastVectorHighlighter; // Another highlighter implementation.\nClass FieldFragList; // FieldFragList has a list of \"frag info\" that is used by FragmentsBuilder class to create fragments (snippets).\nClass FieldFragList.WeightedFragInfo; // List of term offsets + weight for a frag info\nClass FieldFragList.WeightedFragInfo.SubInfo; // Represents the list of term offsets for some text\nClass FieldPhraseList; // FieldPhraseList has a list of WeightedPhraseInfo that is used by FragListBuilder to create a FieldFragList object.\nClass FieldPhraseList.WeightedPhraseInfo; // Represents the list of term offsets and boost for some text\nClass FieldPhraseList.WeightedPhraseInfo.Toffs; // Term offsets (start + end)\nClass FieldQuery; // FieldQuery breaks down query object into terms/phrases and keeps them in a QueryPhraseMap structure.\nClass FieldQuery.QueryPhraseMap; // Internal structure of a query for highlighting: represents a nested query structure\nClass FieldTermStack; // FieldTermStack is a stack that keeps query terms in the specified field of the document to be highlighted.\nClass FieldTermStack.TermInfo; // Single term with its position/offsets in the document and IDF weight.\nClass ScoreOrderFragmentsBuilder; // An implementation of FragmentsBuilder that outputs score-order fragments.\nClass ScoreOrderFragmentsBuilder.ScoreComparator; // Comparator for FieldFragList.WeightedFragInfo by boost, breaking ties by offset.\nClass SimpleBoundaryScanner; // Simple boundary scanner implementation that divides fragments based on a set of separator characters.\nClass SimpleFieldFragList; // A simple implementation of FieldFragList.\n", "des": "Another highlighter implementation based on term vectors."}
{"index": 51, "repo": "ignite-core-2.15.0", "code": "package lru;\n\nInterface LruEvictionPolicyMBean; // MBean for LRU eviction policy.\nClass LruEvictionPolicy<K,V>; // Eviction policy based on Least Recently Used (LRU) algorithm and supports batch eviction.\nClass LruEvictionPolicyFactory<K,V>; // Factory class for LruEvictionPolicy.\n", "des": "Contains cache LRU eviction policy implementations."}
{"index": 3183, "repo": "tomcat-api-10.1", "code": "package java;\n\nClass javaURLContextFactory; // Context factory for the \"java:\" namespace.\n", "des": "This package contains the URL context factory for the \"java\" namespace."}
{"index": 1360, "repo": "spring-tx-6.0.11", "code": "package annotation;\n\n@Configuration public abstract class AbstractTransactionManagementConfiguration extends Object implements org.springframework.context.annotation.ImportAware; // Abstract base @Configuration class providing common structure for enabling Spring's annotation-driven transaction management capability.\npublic class AnnotationTransactionAttributeSource extends AbstractFallbackTransactionAttributeSource implements Serializable; // Implementation of the TransactionAttributeSource interface for working with transaction metadata in JDK 1.5+ annotation format.\npublic class Ejb3TransactionAnnotationParser extends Object implements TransactionAnnotationParser, Serializable; // Strategy implementation for parsing EJB3's TransactionAttribute annotation.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(TransactionManagementConfigurationSelector.class) public @interface EnableTransactionManagement; // Enables Spring's annotation-driven transaction management capability, similar to the support found in Spring's <tx:*> XML namespace.\npublic enum Isolation extends Enum<Isolation>; // Enumeration that represents transaction isolation levels for use with the @Transactional annotation, corresponding to the TransactionDefinition interface.\npublic class JtaTransactionAnnotationParser extends Object implements TransactionAnnotationParser, Serializable; // Strategy implementation for parsing JTA 1.2's Transactional annotation.\npublic enum Propagation extends Enum<Propagation>; // Enumeration that represents transaction propagation behaviors for use with the Transactional annotation, corresponding to the TransactionDefinition interface.\n@Configuration(proxyBeanMethods=false) @Role(2) @ImportRuntimeHints(org.springframework.transaction.annotation.TransactionRuntimeHints.class) public class ProxyTransactionManagementConfiguration extends AbstractTransactionManagementConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable proxy-based annotation-driven transaction management.\npublic class SpringTransactionAnnotationParser extends Object implements TransactionAnnotationParser, Serializable; // Strategy implementation for parsing Spring's Transactional annotation.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Inherited @Documented @Reflective public @interface Transactional; // Describes a transaction attribute on an individual method or on a class.\npublic interface TransactionAnnotationParser; // Strategy interface for parsing known transaction annotation types.\npublic class TransactionManagementConfigurationSelector extends org.springframework.context.annotation.AdviceModeImportSelector<EnableTransactionManagement>; // Selects which implementation of AbstractTransactionManagementConfiguration should be used based on the value of EnableTransactionManagement.mode() on the importing @Configuration class.\n", "des": "Spring's support for annotation-based transaction demarcation."}
{"index": 1468, "repo": "spring-data-redis-3.1.2", "code": "package collections;\n\npublic abstract class AbstractRedisCollection<E> extends AbstractCollection<E> implements RedisCollection<E>; // Base implementation for RedisCollection.\npublic abstract class CollectionUtils extends Object; // Utility class used mainly for type conversion by the default collection implementations.\npublic class DefaultRedisList<E> extends AbstractRedisCollection<E> implements RedisList<E>; // Default implementation for RedisList.\npublic class DefaultRedisMap<K,V> extends Object implements RedisMap<K,V>; // Default implementation for RedisMap.\npublic class DefaultRedisSet<E> extends AbstractRedisCollection<E> implements RedisSet<E>; // Default implementation for RedisSet.\npublic class DefaultRedisZSet<E> extends AbstractRedisCollection<E> implements RedisZSet<E>; // Default implementation for RedisZSet.\npublic interface RedisCollection<E> extends RedisStore; // Redis extension for the Collection contract.\npublic class RedisCollectionFactoryBean extends Object implements InitializingBean, BeanNameAware, FactoryBean<RedisStore>; // Factory bean that facilitates creation of Redis-based collections.\npublic static enum RedisCollectionFactoryBean.CollectionType extends Enum<RedisCollectionFactoryBean.CollectionType>; // Collection types supported by this factory.\npublic interface RedisList<E> extends RedisCollection<E>, List<E>, BlockingDeque<E>; // Redis extension for the List contract.\npublic interface RedisMap<K,V> extends RedisStore, ConcurrentMap<K,V>; // Map view of a Redis hash.\npublic class RedisProperties extends Properties implements RedisMap<Object,Object>; // Properties extension for a Redis back-store.\npublic interface RedisSet<E> extends RedisCollection<E>, Set<E>; // Redis extension for the Set contract.\npublic interface RedisStore extends BoundKeyOperations<String>; // Basic interface for Redis-based collections.\npublic interface RedisZSet<E> extends RedisCollection<E>, Set<E>; // Redis ZSet (or sorted set (by weight)).\n", "des": "Package providing implementations for most of the java.util collections on top of Redis."}
{"index": 2682, "repo": "spring-data-jpa-3.1.2", "code": "package support;\n\npublic class AuditingBeanFactoryPostProcessor extends Object implements BeanFactoryPostProcessor; // BeanFactoryPostProcessor that ensures that the AnnotationBeanConfigurerAspect aspect is up and running before the EntityManagerFactory gets created as this already instantiates entity listeners and we need to get injection into Configurable to work in them.\n@Configurable public class AuditingEntityListener extends Object; // JPA entity listener to capture auditing information on persisting and updating entities.\n", "des": "Implementation classes for auditing with JPA."}
{"index": 2877, "repo": "spring-integration-core-6.1.2", "code": "package routingslip;\n\npublic class ExpressionEvaluatingRoutingSlipRouteStrategy extends Object implements RoutingSlipRouteStrategy, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // The Expression based RoutingSlipRouteStrategy implementation.\npublic static class ExpressionEvaluatingRoutingSlipRouteStrategy.RequestAndReply extends Object;\n@FunctionalInterface public interface RoutingSlipRouteStrategy; // The RoutingSlip strategy to determine the next replyChannel.\n", "des": "Provides classes supporting the RoutingSlip pattern."}
{"index": 2196, "repo": "spring-data-commons-3.1.2", "code": "package aot;\n\npublic interface AotContext; // The context in which the AOT processing happens.\npublic static interface AotContext.IntrospectedBeanDefinition; // Interface defining introspection methods for bean definitions.\npublic static interface AotContext.TypeIntrospector; // Type-based introspector to resolve Class from a type name and to introspect the bean factory for presence of beans.\npublic class ManagedTypesBeanFactoryInitializationAotProcessor extends Object implements BeanFactoryInitializationAotProcessor; // BeanFactoryInitializationAotProcessor implementation used to encapsulate common data infrastructure concerns and preprocess the ConfigurableListableBeanFactory ahead of the AOT compilation in order to prepare the Spring Data BeanDefinitions for AOT processing.\npublic class ManagedTypesBeanRegistrationAotProcessor extends Object implements BeanRegistrationAotProcessor; // BeanRegistrationAotProcessor handling module ManagedTypes instances.\npublic class PublicMethodReflectiveProcessor extends SimpleReflectiveProcessor;\npublic interface RegisteredBeanAotContribution extends BeanRegistrationAotContribution; // Extension to BeanRegistrationAotContribution that bases its contribution on a RegisteredBean.\n", "des": "Support for registering the need for reflection, resources, java serialization and proxies at runtime for Ahead of Time compilation."}
{"index": 1049, "repo": "commons-io-2.13.0", "code": "package function;\n\nInterface IOBaseStream<T,S extends IOBaseStream<T,S,B>,B extends BaseStream<T,B>>; // Like BaseStream but throws IOException.\nInterface IOBiConsumer<T,U>; // Like BiConsumer but throws IOException.\nInterface IOBiFunction<T,U,R>; // Like BiFunction but throws IOException.\nInterface IOBinaryOperator<T>; // Like BinaryOperator but throws IOException.\nInterface IOComparator<T>; // Like Comparator but throws IOException.\nInterface IOConsumer<T>; // Like Consumer but throws IOException.\nInterface IOFunction<T,R>; // Like Function but throws IOException.\nInterface IOIterator<E>; // Like Iterator but throws IOException.\nInterface IOPredicate<T>; // Like Predicate but throws IOException.\nInterface IOQuadFunction<T,U,V,W,R>; // Represents a function that accepts four arguments and produces a result.\nInterface IORunnable; // Like Runnable but throws IOException.\nInterface IOSpliterator<T>; // Like Spliterator but throws IOException.\nInterface IOStream<T>; // Like Stream but throws IOException.\nInterface IOSupplier<T>; // Like Supplier but throws IOException.\nInterface IOTriConsumer<T,U,V>; // Like BiConsumer but throws IOException.\nInterface IOTriFunction<T,U,V,R>; // Represents a function that accepts three arguments and produces a result.\nInterface IOUnaryOperator<T>; // Like UnaryOperator but throws IOException.\nClass Uncheck; // Unchecks calls by throwing UncheckedIOException instead of IOException.\n", "des": "Provides IO-only related functional interfaces for lambda expressions and method references."}
{"index": 740, "repo": "spring-data-solr-4.3.15", "code": "package cdi;\n\nClass SolrRepositoryBean<T>; // Uses CdiRepositoryBean to create SolrRepository instances.\nClass SolrRepositoryExtension;\n", "des": "Cdi extension."}
{"index": 980, "repo": "spring-ws-3.0.10.RELEASE", "code": "package callback;\n\npackage callback.jaas; // Contains CallbackHandler implementations for XWSS that use the Java Authentication and Authorization Service (JAAS).\nClass CryptographyCallbackHandler; // Default callback handler that handles cryptographic callback.\nClass DefaultTimestampValidator; // A default implementation of a TimestampValidationCallback.TimestampValidator.\nClass KeyStoreCallbackHandler; // Callback handler that uses Java Security KeyStores to handle cryptographic callbacks.\nClass MockValidationCallbackHandler; // Mock implementation of of callback handler that accepts all password and certificate validation callbacks.\nClass SimplePasswordValidationCallbackHandler; // Simple callback handler that validates passwords agains a in-memory Properties object.\nClass SimpleUsernamePasswordCallbackHandler; // Simple callback handler that supplies a username and password to a username token at runtime.\nClass SpringCertificateValidationCallbackHandler; // Callback handler that validates a certificate using an Spring Security AuthenticationManager.\nClass SpringDigestPasswordValidationCallbackHandler; // Callback handler that validates a password digest using an Spring Security UserDetailsService.\nClass SpringPlainTextPasswordValidationCallbackHandler; // Callback handler that validates a certificate uses an Spring Security AuthenticationManager.\nClass SpringUsernamePasswordCallbackHandler; // Callback handler that adds username/password information to a mesage using an Spring Security SecurityContext.\nClass XwssCallbackHandlerChain; // Represents a chain of CallbackHandlers.\n", "des": "Contains CallbackHandler implementations for XWSS."}
{"index": 1681, "repo": "spring-oxm-6.0.11", "code": "package xstream;\n\npublic class CatchAllConverter extends Object implements com.thoughtworks.xstream.converters.Converter; // XStream Converter that supports all classes, but throws exceptions for (un)marshalling.\npublic class XStreamMarshaller extends AbstractMarshaller implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Implementation of the Marshaller interface for XStream.\n", "des": "Package providing integration of XStream with Spring's O/X Mapping support."}
{"index": 224, "repo": "nutch-2.4", "code": "package webui;\n\npackage webui.client; // Provides client classes and interfaces for Web UI\npackage webui.config; // Contains config classes for Web UI\npackage webui.model; // Contains model classes for Web UI\npackage webui.pages; // Provides classes and interfaces of pages for Web UI\npackage webui.service; // Provides service classes and interfaces for Web UI\nClass NutchUiApplication;\nClass NutchUiServer;\n", "des": "Provides classes and interfaces for Web UI"}
{"index": 2455, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package export;\n\npackage export.appoptics; // Support for exporting actuator metrics to AppOptics.\npackage export.atlas; // Support for exporting actuator metrics to Atlas.\npackage export.datadog; // Support for exporting actuator metrics to Datadog.\npackage export.dynatrace; // Support for exporting actuator metrics to Dynatrace.\npackage export.elastic; // Support for exporting actuator metrics to Elastic.\npackage export.ganglia; // Support for exporting actuator metrics to Ganglia.\npackage export.graphite; // Support for exporting actuator metrics to Graphite.\npackage export.humio; // Support for exporting actuator metrics to Humio.\npackage export.influx; // Support for exporting actuator metrics to InfluxDB.\npackage export.jmx; // Support for exporting actuator metrics to JMX.\npackage export.kairos; // Support for exporting actuator metrics to KairosDB.\npackage export.newrelic; // Support for exporting actuator metrics to New Relic.\npackage export.otlp; // Support for exporting actuator metrics to OTLP.\npackage export.prometheus; // Support for exporting actuator metrics to Prometheus.\npackage export.properties; // Base properties and adapters used when exporting actuator metrics.\npackage export.signalfx; // Support for exporting actuator metrics to SignalFX.\npackage export.simple; // Support for exporting actuator metrics to a simple in-memory store.\npackage export.stackdriver; // Support for exporting actuator metrics to Stackdriver.\npackage export.statsd; // Support for exporting actuator metrics to StatsD.\npackage export.wavefront; // Support for exporting actuator metrics to Wavefront.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.metrics.export.OnMetricsExportEnabledCondition.class) public @interface ConditionalOnEnabledMetricsExport; // @Conditional that checks whether a metrics exporter is enabled.\n", "des": "Auto-configuration for metrics exporter."}
{"index": 169, "repo": "ignite-core-2.15.0", "code": "package redis;\n\nInterface GridRedisCommandHandler; // Command handler.\nClass GridRedisConnectionCommandHandler; // Redis connection handler.\nClass GridRedisRestCommandHandler; // Redis command handler done via REST.\n", "des": "Contains Redis protocol commands."}
{"index": 2007, "repo": "spring-boot-devtools-3.1.1", "code": "package autoconfigure;\n\n@Conditional({OnEnabledDevToolsCondition.class,org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.DevToolsDataSourceCondition.class}) @AutoConfiguration(after=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.class) @Import(org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.DatabaseShutdownExecutorEntityManagerFactoryDependsOnPostProcessor.class) public class DevToolsDataSourceAutoConfiguration extends Object; // Auto-configuration for DevTools-specific DataSource configuration.\n@ConfigurationProperties(prefix=\"spring.devtools\") public class DevToolsProperties extends Object; // Configuration properties for developer tools.\npublic static class DevToolsProperties.Livereload extends Object; // LiveReload properties.\npublic static class DevToolsProperties.Restart extends Object; // Restart properties.\n@ConditionalOnClass(io.r2dbc.spi.ConnectionFactory.class) @Conditional({OnEnabledDevToolsCondition.class,org.springframework.boot.devtools.autoconfigure.DevToolsR2dbcAutoConfiguration.DevToolsConnectionFactoryCondition.class}) @AutoConfiguration(after=org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration.class) public class DevToolsR2dbcAutoConfiguration extends Object; // Auto-configuration for DevTools-specific R2DBC configuration.\n@AutoConfiguration @ConditionalOnInitializedRestarter @EnableConfigurationProperties(DevToolsProperties.class) public class LocalDevToolsAutoConfiguration extends Object; // Auto-configuration for local development support.\npublic class OnEnabledDevToolsCondition extends org.springframework.boot.autoconfigure.condition.SpringBootCondition; // A condition that checks if DevTools should be enabled.\npublic class OptionalLiveReloadServer extends Object implements org.springframework.beans.factory.InitializingBean; // Manages an optional LiveReloadServer.\n", "des": "Auto-configuration for spring-boot-devtools."}
{"index": 698, "repo": "jackson-databind-2.15.2", "code": "package internal;\n\nClass PrivateMaxEntriesMap<K,V>; // A hash table supporting full concurrency of retrievals, adjustable expected concurrency for updates, and a maximum capacity to bound the map by.\nClass PrivateMaxEntriesMap.Builder<K,V>; // A builder that creates PrivateMaxEntriesMap instances.\n", "des": "This package contains an implementation of a bounded ConcurrentMap data structure."}
{"index": 1597, "repo": "spring-websocket-6.0.11", "code": "package jetty;\n\npublic class JettyRequestUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A RequestUpgradeStrategy for Jetty 11.\n", "des": "Server-side support for the Jetty 9+ WebSocket API."}
{"index": 1324, "repo": "groovy-all-4.0.13", "code": "package util;\n\npublic final class YamlConverter extends Object; // A converter for converting YAML to JSON, vice versa\n", "des": "Utility classes for YAML processing."}
{"index": 1002, "repo": "spring-ws-3.0.10.RELEASE", "code": "package monitor;\n\nInterface MonitoringStrategy; // Defines the contract for objects that monitor a given folder for new messages.\nClass AbstractMonitoringStrategy; // Abstract base class for the MonitoringStrategy interface.\nClass ImapIdleMonitoringStrategy; // Implementation of the MonitoringStrategy interface that uses the IMAP IDLE command for asynchronous message detection.\nClass PollingMonitoringStrategy; // Implementation of the MonitoringStrategy interface that uses a simple polling mechanism.\nClass Pop3PollingMonitoringStrategy; // Implementation of the MonitoringStrategy interface that uses a simple polling mechanism suitable for POP3 servers.\n", "des": "Provides the MonitoringStrategy interface and implementations."}
{"index": 511, "repo": "commons-vfs2-2.9.0", "code": "package function;\n\nInterface VfsConsumer<T>; // A Consumer that throws FileSystemException.\n", "des": "Functional interface types in the style of java.util.function."}
{"index": 1510, "repo": "spring-context-6.0.11", "code": "package config;\n\npublic class ContextNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for the 'context' namespace.\n", "des": "Support package for advanced application context configuration, with XML schema being the primary configuration format."}
{"index": 2114, "repo": "spring-retry-2.0.2", "code": "package backoff;\n\npublic interface BackOffContext extends Serializable;\npublic class BackOffInterruptedException extends RetryException; // Exception class signifiying that an attempt to back off using a BackOffPolicy was interrupted, most likely by an InterruptedException during a call to Thread.sleep(long).\npublic interface BackOffPolicy; // Strategy interface to control back off between attempts in a single retry operation.\npublic class BackOffPolicyBuilder extends Object; // Fluent API for creating a BackOffPolicy based on given attributes.\npublic class ExponentialBackOffPolicy extends Object implements SleepingBackOffPolicy<ExponentialBackOffPolicy>; // Implementation of BackOffPolicy that increases the back off period for each retry attempt in a given set up to a limit.\npublic class ExponentialRandomBackOffPolicy extends ExponentialBackOffPolicy; // Implementation of ExponentialBackOffPolicy that chooses a random multiple of the interval that would come from a simple deterministic exponential.\npublic class FixedBackOffPolicy extends StatelessBackOffPolicy implements SleepingBackOffPolicy<FixedBackOffPolicy>; // Implementation of BackOffPolicy that pauses for a fixed period of time before continuing.\npublic class NoBackOffPolicy extends StatelessBackOffPolicy; // Implementation of BackOffPolicy that performs a no-op and as such all retry operation in a given set proceed one after the other with no pause.\n@Deprecated public class ObjectWaitSleeper extends Object implements Sleeper;\npublic interface Sleeper extends Serializable; // Strategy interface for backoff policies to delegate the pausing of execution.\npublic interface SleepingBackOffPolicy<T extends SleepingBackOffPolicy<T>> extends BackOffPolicy; // A interface which can be mixed in by BackOffPolicys indicating that they sleep when backing off.\npublic abstract class StatelessBackOffPolicy extends Object implements BackOffPolicy; // Simple base class for BackOffPolicy implementations that maintain no state across invocations.\npublic class ThreadWaitSleeper extends Object implements Sleeper; // Simple Sleeper implementation that just blocks the current Thread with sleep period.\npublic class UniformRandomBackOffPolicy extends StatelessBackOffPolicy implements SleepingBackOffPolicy<UniformRandomBackOffPolicy>; // Implementation of BackOffPolicy that pauses for a random period of time before continuing.\n", "des": "Infrastructure implementations of retry backoff concerns."}
{"index": 1728, "repo": "spring-jdbc-6.0.11", "code": "package support;\n\npublic abstract class AbstractInterruptibleBatchPreparedStatementSetter extends Object implements InterruptibleBatchPreparedStatementSetter; // Abstract implementation of the InterruptibleBatchPreparedStatementSetter interface, combining the check for available values and setting of those into a single callback method AbstractInterruptibleBatchPreparedStatementSetter.setValuesIfAvailable(java.sql.PreparedStatement, int).\npublic abstract class AbstractLobCreatingPreparedStatementCallback extends Object implements PreparedStatementCallback<Integer>; // Abstract PreparedStatementCallback implementation that manages a LobCreator.\npublic abstract class AbstractLobStreamingResultSetExtractor<T> extends Object implements ResultSetExtractor<T>; // Abstract ResultSetExtractor implementation that assumes streaming of LOB data.\npublic abstract class AbstractSqlTypeValue extends Object implements SqlTypeValue; // Abstract implementation of the SqlTypeValue interface, for convenient creation of type values that are supposed to be passed into the PreparedStatement.setObject method.\n@Deprecated public class JdbcBeanDefinitionReader extends Object;\npublic abstract class JdbcDaoSupport extends org.springframework.dao.support.DaoSupport; // Convenient superclass for JDBC-based data access objects.\npublic class SqlLobValue extends Object implements DisposableSqlTypeValue; // Object to represent an SQL BLOB/CLOB value parameter.\n", "des": "Classes supporting the org.springframework.jdbc.core package."}
{"index": 946, "repo": "spring-ws-3.0.10.RELEASE", "code": "package context;\n\nInterface MessageContext; // Context holder for message requests.\nClass AbstractMessageContext; // Abstract base class for MessageContext instances.\nClass DefaultMessageContext; // Default implementation of MessageContext.\n", "des": "Contains the MessageContext interface and implementations thereof."}
{"index": 3517, "repo": "opennlp-tools-2.2.0", "code": "package brat;\n\nClass AnnotationConfiguration;\nClass AnnotatorNoteAnnotation;\nClass AttributeAnnotation;\nClass BratAnnotation;\nClass BratAnnotationStream; // Reads the annotations from the brat .ann annotation file.\nClass BratDocument; // Brat (brat rapid annotation tool) is based on the stav visualiser which was originally made in order to visualise BioNLP'11 Shared Task data.\nClass BratDocumentParser;\nClass BratDocumentStream;\nClass BratNameSampleStream; // Generates Name Sample objects for a Brat Document object.\nClass BratNameSampleStreamFactory;\nClass EventAnnotation;\nClass RelationAnnotation;\nClass SegmenterObjectStream<S,​T>;\nClass SpanAnnotation;\n", "des": "Experimental package related to the corpus format used by the \"brat rapid annotation tool\" (brat)."}
{"index": 1767, "repo": "spring-data-mongodb-4.1.2", "code": "package observability;\n\npublic class ContextProviderFactory extends Object; // Factory to create a ContextProvider to propagate the request context across tasks.\npublic interface MongoHandlerObservationConvention extends io.micrometer.observation.ObservationConvention<org.springframework.data.mongodb.observability.MongoHandlerContext>; // ObservationConvention for MongoHandlerContext.\npublic class MongoObservationCommandListener extends Object implements com.mongodb.event.CommandListener; // Implement MongoDB's CommandListener using Micrometer's Observation API.\n", "des": "Infrastructure to provide driver observability using Micrometer."}
{"index": 2057, "repo": "spring-ws-security-4.0.5", "code": "package support;\n\npublic class CryptoFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.apache.wss4j.common.crypto.Crypto>, org.springframework.beans.factory.InitializingBean; // Spring factory bean for a WSS4J Crypto.\n", "des": "Contains support classes for working with WSS4J 2.0."}
{"index": 876, "repo": "calcite-core-1.34.0", "code": "package mapping;\n\nInterface Mapping; // A Mapping is a relationship between a source domain to target domain of integers.\nInterface Mappings.CoreMapping; // Core interface of all mappings.\nInterface Mappings.FunctionMapping; // Mapping where every source has a target.\nInterface Mappings.SourceMapping; // Mapping suitable for sourcing columns.\nInterface Mappings.TargetMapping; // Mapping suitable for mapping columns to a target.\nClass AbstractSourceMapping; // Simple implementation of Mappings.TargetMapping where the number of sources and targets are specified as constructor parameters, and you just need to implement one method.\nClass AbstractTargetMapping; // Simple implementation of Mappings.TargetMapping where the number of sources and targets are specified as constructor parameters, and you just need to implement one method.\nClass IntPair; // An immutable pair of integers.\nClass Mappings; // Utility functions related to mappings.\nClass Mappings.AbstractMapping; // Abstract implementation of Mapping.\nClass Mappings.FiniteAbstractMapping; // Abstract implementation of mapping where both source and target domains are finite.\nClass Mappings.IdentityMapping; // The identity mapping, of a given size, or infinite.\nClass Mappings.OverridingSourceMapping; // Source mapping that returns the same result as a parent Mappings.SourceMapping except for specific overriding elements.\nClass Mappings.OverridingTargetMapping; // Target mapping that returns the same result as a parent Mappings.TargetMapping except for specific overriding elements.\nClass Mappings.PartialMapping; // A mapping where a source has at most one target, and every target has at most one source.\nEnum MappingType; // Describes the type of a mapping, from the most general MappingType.MULTI_FUNCTION (every element in the source and target domain can participate in many mappings) to the most restricted MappingType.BIJECTION (every element in the source and target domain must be paired with precisely one element in the other domain).\nClass Mappings.NoElementException; // Thrown when a mapping is expected to return one element but returns none.\nClass Mappings.TooManyElementsException; // Thrown when a mapping is expected to return one element but returns several.\n", "des": "Support for algebraic maps."}
{"index": 168, "repo": "ignite-core-2.15.0", "code": "package cache;\n\nClass GridCacheCommandHandler; // Command handler for API requests.\nClass GridCacheRestMetrics; // Grid cache metrics for rest.\nClass GridCacheRestResponse; // Adds affinity node ID to cache responses.\n", "des": "REST in-memory data grid commands."}
{"index": 1686, "repo": "spring-integration-mqtt-6.1.2", "code": "package outbound;\n\npublic abstract class AbstractMqttMessageHandler<T,C> extends org.springframework.integration.handler.AbstractMessageHandler implements org.springframework.integration.support.management.ManageableLifecycle, org.springframework.context.ApplicationEventPublisherAware; // Abstract class for MQTT outbound channel adapters.\npublic class MqttPahoMessageHandler extends AbstractMqttMessageHandler<org.eclipse.paho.client.mqttv3.IMqttAsyncClient,org.eclipse.paho.client.mqttv3.MqttConnectOptions> implements org.eclipse.paho.client.mqttv3.MqttCallback, MqttPahoComponent; // Eclipse Paho Implementation.\npublic class Mqttv5PahoMessageHandler extends AbstractMqttMessageHandler<org.eclipse.paho.mqttv5.client.IMqttAsyncClient,org.eclipse.paho.mqttv5.client.MqttConnectionOptions> implements org.eclipse.paho.mqttv5.client.MqttCallback, MqttComponent<org.eclipse.paho.mqttv5.client.MqttConnectionOptions>; // The AbstractMqttMessageHandler implementation for MQTT v5.\n", "des": "Provides Spring Integration components for doing outbound operations."}
{"index": 3231, "repo": "commons-release-plugin-1.8.1", "code": "package mojos;\n\nClass CommonsDistributionDetachmentMojo; // The purpose of this Maven mojo is to detach the artifacts generated by the maven-assembly-plugin, which for the Apache Commons Project do not get uploaded to Nexus, and putting those artifacts in the dev distribution location for Apache projects.\nClass CommonsDistributionStagingMojo; // This class checks out the dev distribution location, copies the distributions into that directory structure under the target/commons-release-plugin/scm directory.\nClass CommonsSiteCompressionMojo;\nClass CommonsStagingCleanupMojo; // This class checks out the dev distribution location, checks whether anything exists in the distribution location, and if it is non-empty it deletes all the resources there.\n", "des": "This package contains all the maven mojos for the commons-release-plugin."}
{"index": 1881, "repo": "shiro-core-2.0.0-alpha-2", "code": "package env;\n\npublic class BasicIniEnvironment extends DefaultEnvironment; // Basic usage:\npublic class DefaultEnvironment extends Object implements NamedObjectEnvironment, org.apache.shiro.lang.util.Destroyable; // Simple/default Environment implementation that stores Shiro objects as key-value pairs in a Map instance.\npublic interface Environment; // An Environment instance encapsulates all of the objects that Shiro requires to function.\npublic class EnvironmentException extends org.apache.shiro.lang.ShiroException; // Exception thrown for errors related to Environment instances or configuration.\npublic interface NamedObjectEnvironment extends Environment; // An environment that supports object lookup by name.\npublic class RequiredTypeException extends EnvironmentException; // Exception thrown when attempting to acquire an object of a required type and that object does not equal, extend, or implement a specified Class.\n", "des": "Concepts used to represent Shiro's aggregate state in an application."}
{"index": 3853, "repo": "lucene-core-9.7.0", "code": "package util;\n\npackage util.automaton; // Finite-state automaton for regular expressions.\npackage util.bkd; // Block KD-tree, implementing the generic spatial data structure described in this paper.\npackage util.compress; // Compression utilities.\npackage util.fst; // Finite state transducers\npackage util.graph; // Utility classes for working with token streams as graphs.\npackage util.hnsw; // Navigable Small-World graph, nominally Hierarchical but currently only has a single layer.\npackage util.hppc; // package holding hppc related classes.\npackage util.mutable; // Comparable object wrappers\npackage util.packed; // Packed integer arrays and streams.\nInterface Accountable; // An object whose RAM usage can be computed.\nInterface ArrayUtil.ByteArrayComparator; // Comparator for a fixed number of bytes.\nInterface Attribute; // Base interface for attributes.\nInterface AttributeReflector; // This interface is used to reflect contents of AttributeSource or AttributeImpl.\nInterface Bits; // Interface for Bitset-like structures.\nInterface BytesRefArray.IndexedBytesRefIterator; // An extension of BytesRefIterator that allows retrieving the index of the current element\nInterface BytesRefIterator; // A simple iterator interface for BytesRef iteration.\nInterface ClassLoaderUtils; // Helper class used by ServiceLoader to investigate parent/child relationships of ClassLoaders.\nInterface IOConsumer<T>; // An IO operation with a single input that may throw an IOException.\nInterface IOFunction<T,​R>; // A Function that may throw an IOException\nInterface IOSupplier<T>; // This is a result supplier that is allowed to throw an IOException.\nInterface IOUtils.IOConsumer<T>;\nInterface IOUtils.IOFunction<T,​R>;\nInterface NamedSPILoader.NamedSPI; // Interface to support NamedSPILoader.lookup(String) by name.\nInterface ResourceLoader; // Abstraction for loading resources (streams, files, and classes).\nInterface ResourceLoaderAware; // Interface for a component that needs to be initialized by an implementation of ResourceLoader.\nInterface RollingBuffer.Resettable; // Implement to reset an instance\nInterface Unwrappable<T>; // An object with this interface is a wrapper around another object (e.g., a filter with a delegate).\n", "des": "Some utility classes."}
{"index": 2503, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package prometheus;\n\n@AutoConfiguration(before=PrometheusMetricsExportAutoConfiguration.class, after=MicrometerTracingAutoConfiguration.class) @ConditionalOnBean(io.micrometer.tracing.Tracer.class) @ConditionalOnClass({io.micrometer.tracing.Tracer.class,io.prometheus.client.exemplars.tracer.common.SpanContextSupplier.class}) @ConditionalOnEnabledTracing public class PrometheusExemplarsAutoConfiguration extends Object; // Auto-configuration for Prometheus Exemplars with Micrometer Tracing.\n", "des": "Auto-configuration for Prometheus Exemplars with Micrometer Tracing."}
{"index": 597, "repo": "org.apache.karaf.main-2.4.4", "code": "package security;\n\nClass TrustEngine; // A TrustEngine is used to establish the authenticity of a Certificate chain.\n", "des": "Equinox security services"}
{"index": 1689, "repo": "spring-data-couchbase-5.1.2", "code": "package core;\n\npackage core.convert; // This package contains classes used for entity-to-JSON conversions, type mapping and writing.\npackage core.mapping; // This package contains interfaces and annotations relative to object-json mapping and the notion of a Couchbase Storable.\npackage core.query; // This package contains annotations and classes relative to querying with Couchbase (whether through views or N1QL) and the associated indexes.\n@Internal public abstract class AbstractTemplateSupport extends Object; // Base shared by Reactive and non-Reactive TemplateSupport\npublic interface CollectionCallback<T>; // Defines the callback which will be wrapped and executed on a bucket.\npublic class CouchbaseDataIntegrityViolationException extends DataIntegrityViolationException; // A Couchbase specific integrity violation exception, thrown as a result of failing db operations.\npublic class CouchbaseExceptionTranslator extends Object implements PersistenceExceptionTranslator; // Simple PersistenceExceptionTranslator for Couchbase.\npublic interface CouchbaseOperations extends FluentCouchbaseOperations; // Defines common operations on the Couchbase data source, most commonly implemented by CouchbaseTemplate.\npublic class CouchbaseQueryExecutionException extends DataRetrievalFailureException; // An DataRetrievalFailureException that denotes an error during a query (N1QL).\npublic class CouchbaseTemplate extends Object implements CouchbaseOperations, ApplicationContextAware; // Implements lower-level couchbase operations on top of the SDK with entity mapping capabilities.\npublic interface ExecutableExistsByIdOperation; // Insert Operations\npublic static interface ExecutableExistsByIdOperation.ExecutableExistsById extends ExecutableExistsByIdOperation.ExistsByIdInScope; // Provides methods for constructing KV exists operations in a fluent way.\npublic static interface ExecutableExistsByIdOperation.ExistsByIdInCollection<T> extends ExecutableExistsByIdOperation.ExistsByIdWithOptions<T>, InCollection<T>; // Fluent method to specify the collection.\npublic static interface ExecutableExistsByIdOperation.ExistsByIdInScope<T> extends ExecutableExistsByIdOperation.ExistsByIdInCollection<T>, InScope<T>; // Fluent method to specify the scope.\npublic static interface ExecutableExistsByIdOperation.ExistsByIdWithOptions<T> extends ExecutableExistsByIdOperation.TerminatingExistsById, WithExistsOptions<T>; // Fluent method to specify options.\npublic static interface ExecutableExistsByIdOperation.TerminatingExistsById extends OneAndAllExists; // Terminating operations invoking the actual execution.\npublic class ExecutableExistsByIdOperationSupport extends Object implements ExecutableExistsByIdOperation;\n", "des": "This package contains the specific implementations and core classes for Spring Data Couchbase internals."}
{"index": 3792, "repo": "lucene-analysis-common-9.7.0", "code": "package hunspell;\n\nInterface DictEntries; // An object representing homonym dictionary entries.\nInterface FragmentChecker; // An oracle for quickly checking that a specific part of a word can never be a valid word.\nInterface NGramFragmentChecker.NGramConsumer; // A callback for n-gram ranges in words\nClass AffixedWord; // An object representing the analysis result of a simple (non-compound) word\nClass AffixedWord.Affix; // An object representing a prefix or a suffix applied to a word stem\nClass DictEntry; // An object representing *.dic file entry with its word, flags and morphological data.\nClass Dictionary; // In-memory structure for the dictionary (.dic) and affix (.aff) data of a hunspell dictionary.\nClass EntrySuggestion; // Suggestion to add/edit dictionary entries to generate a given list of words created by WordFormGenerator.compress(java.util.List<java.lang.String>, java.util.Set<java.lang.String>, java.lang.Runnable).\nClass Hunspell; // A spell checker based on Hunspell dictionaries.\nClass HunspellStemFilter; // TokenFilter that uses hunspell affix rules and words to stem tokens.\nClass HunspellStemFilterFactory; // TokenFilterFactory that creates instances of HunspellStemFilter.\nClass NGramFragmentChecker; // A FragmentChecker based on all character n-grams possible in a certain language, keeping them in a relatively memory-efficient, but probabilistic data structure.\nClass Suggester; // A generator for misspelled word corrections based on Hunspell flags.\nClass WordFormGenerator; // A utility class used for generating possible word forms by adding affixes to stems (WordFormGenerator.getAllWordForms(String, String, Runnable)), and suggesting stems and flags to generate the given set of words (WordFormGenerator.compress(List, Set, Runnable)).\nEnum TimeoutPolicy; // A strategy determining what to do when Hunspell API calls take too much time\nClass SuggestionTimeoutException; // An exception thrown when Hunspell.suggest(java.lang.String) call takes too long, if TimeoutPolicy.THROW_EXCEPTION is used.\n", "des": "A Java implementation of Hunspell stemming and spell-checking algorithms (Hunspell), and a stemming TokenFilter (HunspellStemFilter) based on it."}
{"index": 2206, "repo": "spring-data-commons-3.1.2", "code": "package history;\n\npublic class AnnotationRevisionMetadata<N extends Number & Comparable<N>> extends Object implements RevisionMetadata<N>; // A RevisionMetadata implementation that inspects the given object for fields with the configured annotations and returns the field's values on calls to AnnotationRevisionMetadata.getRevisionInstant(), AnnotationRevisionMetadata.getRevisionInstant() and AnnotationRevisionMetadata.getRevisionNumber().\npublic final class Revision<N extends Number & Comparable<N>,T> extends Object implements Comparable<Revision<N,?>>; // Wrapper to contain RevisionMetadata as well as the revisioned entity.\npublic interface RevisionMetadata<N extends Number & Comparable<N>>; // Metadata about a revision.\npublic static enum RevisionMetadata.RevisionType extends Enum<RevisionMetadata.RevisionType>; // The type of a Revision.\npublic class Revisions<N extends Number & Comparable<N>,T> extends Object implements Streamable<Revision<N,T>>; // Simple wrapper class for a List of Revisions allowing to canonically access the latest revision.\npublic class RevisionSort extends Sort; // A dedicated Sort implementation that allows the definition of the ordering of revisions independently of the property name the revision number is held in.\n", "des": "Basic interfaces and value objects for histography API."}
{"index": 2913, "repo": "spring-xml-4.0.5", "code": "package transform;\n\npublic class ResourceSource extends SAXSource; // Convenient subclass of SAXSource that reads from a Spring Resource.\npublic class StringResult extends StreamResult; // Convenient subclass of StreamResult that writes to a StringWriter.\npublic class StringSource extends StreamSource; // Convenient subclass of StreamSource that reads from a StringReader.\npublic class TransformerFactoryUtils extends Object;\npublic class TransformerHelper extends Object; // Helper class for Transformer usage.\npublic abstract class TransformerObjectSupport extends Object; // Convenient base class for objects that use a Transformer.\npublic abstract class TraxUtils extends Object; // Convenient utility methods for dealing with TrAX.\npublic static interface TraxUtils.ResultCallback; // Callback interface invoked on each sort of Result.\npublic static interface TraxUtils.SourceCallback; // Callback interface invoked on each sort of Source.\n", "des": "Provides classes that help with XML transformations."}
{"index": 1589, "repo": "spring-websocket-6.0.11", "code": "package client;\n\npackage client.jetty; // Client-side support for the Jetty WebSocket API.\npackage client.standard; // Client-side classes for use with standard Jakarta WebSocket endpoints.\npublic abstract class AbstractWebSocketClient extends Object implements WebSocketClient; // Abstract base class for WebSocketClient implementations.\npublic abstract class ConnectionManagerSupport extends Object implements org.springframework.context.SmartLifecycle; // Base class for a connection manager that automates the process of connecting to a WebSocket server with the Spring ApplicationContext lifecycle.\npublic interface WebSocketClient; // Contract for initiating a WebSocket request.\npublic class WebSocketConnectionManager extends ConnectionManagerSupport; // WebSocket connection manager that connects to the server via WebSocketClient and handles the session with a WebSocketHandler.\n", "des": "Client-side abstractions for WebSocket applications."}
{"index": 3001, "repo": "spring-web-6.0.11", "code": "package cbor;\n\npublic class Jackson2CborDecoder extends AbstractJackson2Decoder; // Decode bytes into CBOR and convert to Object's with Jackson.\npublic class Jackson2CborEncoder extends AbstractJackson2Encoder; // Encode from an Object to bytes of CBOR objects using Jackson.\npublic class KotlinSerializationCborDecoder extends KotlinSerializationBinaryDecoder<kotlinx.serialization.cbor.Cbor>; // Decode a byte stream into CBOR and convert to Objects with kotlinx.serialization.\npublic class KotlinSerializationCborEncoder extends KotlinSerializationBinaryEncoder<kotlinx.serialization.cbor.Cbor>; // Encode from an Object stream to a byte stream of CBOR objects using kotlinx.serialization.\n", "des": "CBOR encoder and decoder support."}
{"index": 1024, "repo": "hadoop-aws-3.3.6", "code": "package audit;\n\npackage audit.impl; // The internal implementations of auditing support.\nInterface AuditManagerS3A; // Interface for Audit Managers auditing operations through the AWS libraries.\nInterface AuditSpanS3A; // An Audit Span with S3A integration, specifically callbacks from the AWS client SDK.\nInterface AWSAuditEventCallbacks; // Callbacks for audit spans.\nInterface OperationAuditor; // Interfaces for audit services to implement.\nClass AuditIntegration; // Support for integrating auditing within the S3A code.\nClass AWSRequestAnalyzer; // Extract information from a request.\nClass AWSRequestAnalyzer.RequestInfo; // Info about a request.\nClass OperationAuditorOptions; // Options for the OperationAuditor.\nClass S3AAuditConstants;\nClass S3LogParser; // Class to help parse AWS S3 Logs.\nClass S3LogVerbs; // Various verbs in the S3 logs.\nClass AuditFailureException; // This is in the AWS exception tree so that exceptions raised in the AWS SDK are correctly reported up.\nClass AuditOperationRejectedException; // The auditor has rejected the operation as forbidden/unavailable.\n", "des": "Support for auditing and ultimately tracing operations."}
{"index": 3167, "repo": "gson-2.10.1", "code": "package annotations;\n\nAnnotation Type Expose; // An annotation that indicates this member should be exposed for JSON serialization or deserialization.\nAnnotation Type JsonAdapter; // An annotation that indicates the Gson TypeAdapter to use with a class or field.\nAnnotation Type SerializedName; // An annotation that indicates this member should be serialized to JSON with the provided name value as its field name.\nAnnotation Type Since; // An annotation that indicates the version number since a member or a type has been present.\nAnnotation Type Until; // An annotation that indicates the version number until a member or a type should be present.\n", "des": "This package provides annotations that can be used with Gson."}
{"index": 2077, "repo": "spring-webmvc-6.0.11", "code": "package support;\n\npublic abstract class AbstractAnnotationConfigDispatcherServletInitializer extends AbstractDispatcherServletInitializer; // WebApplicationInitializer to register a DispatcherServlet and use Java-based Spring configuration.\npublic abstract class AbstractDispatcherServletInitializer extends org.springframework.web.context.AbstractContextLoaderInitializer; // Base class for WebApplicationInitializer implementations that register a DispatcherServlet in the servlet context.\npublic abstract class AbstractFlashMapManager extends Object implements FlashMapManager; // A base class for FlashMapManager implementations.\npublic class BindStatus extends Object; // Simple adapter to expose the bind status of a field or object.\npublic class JspAwareRequestContext extends RequestContext; // JSP-aware (and JSTL-aware) subclass of RequestContext, allowing for population of the context from a jakarta.servlet.jsp.PageContext.\npublic abstract class JstlUtils extends Object; // Helper class for preparing JSTL views, in particular for exposing a JSTL localization context.\npublic class RequestContext extends Object; // Context holder for request-specific state, like current web application context, current locale, current theme, and potential binding errors.\npublic abstract class RequestContextUtils extends Object; // Utility class for easy access to request-specific state which has been set by the DispatcherServlet.\npublic interface RequestDataValueProcessor; // A contract for inspecting and potentially modifying request data values such as URL query parameters or form field values before they are rendered by a view or before a redirect.\npublic class ServletUriComponentsBuilder extends org.springframework.web.util.UriComponentsBuilder; // UriComponentsBuilder with additional static factory methods to create links based on the current HttpServletRequest.\npublic class SessionFlashMapManager extends AbstractFlashMapManager; // Store and retrieve FlashMap instances to and from the HTTP session.\npublic abstract class WebContentGenerator extends org.springframework.web.context.support.WebApplicationObjectSupport; // Convenient superclass for any kind of web content generator, like AbstractController and WebContentInterceptor.\n", "des": "Support classes for Spring's web MVC framework."}
{"index": 3372, "repo": "opencms-core-15.0", "code": "package list;\n\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Generates the list views commonly used in the OpenCms Workplace \"Administration\" tools."}
{"index": 2563, "repo": "pulsar-common-3.0.0", "code": "package path;\n\npublic class PolicyPath extends Object; // Policy path utilities.\n", "des": "Paths for pulsar policies."}
{"index": 1258, "repo": "spring-core-6.0.11", "code": "package asm;\n\npublic abstract class AnnotationVisitor extends Object; // A visitor to visit a Java annotation.\npublic class Attribute extends Object; // A non standard class, field, method or Code attribute, as defined in the Java Virtual Machine Specification (JVMS).\npublic class ByteVector extends Object; // A dynamically extensible vector of bytes.\npublic class ClassReader extends Object; // A parser to make a ClassVisitor visit a ClassFile structure, as defined in the Java Virtual Machine Specification (JVMS).\npublic final class ClassTooLargeException extends IndexOutOfBoundsException; // Exception thrown when the constant pool of a class produced by a ClassWriter is too large.\npublic abstract class ClassVisitor extends Object; // A visitor to visit a Java class.\npublic class ClassWriter extends ClassVisitor; // A ClassVisitor that generates a corresponding ClassFile structure, as defined in the Java Virtual Machine Specification (JVMS).\npublic final class ConstantDynamic extends Object; // A constant whose value is computed at runtime, with a bootstrap method.\npublic abstract class FieldVisitor extends Object; // A visitor to visit a Java field.\npublic final class Handle extends Object; // A reference to a field or a method.\npublic class Label extends Object; // A position in the bytecode of a method.\npublic final class MethodTooLargeException extends IndexOutOfBoundsException; // Exception thrown when the Code attribute of a method produced by a ClassWriter is too large.\npublic abstract class MethodVisitor extends Object; // A visitor to visit a Java method.\npublic abstract class ModuleVisitor extends Object; // A visitor to visit a Java module.\npublic interface Opcodes; // The JVM opcodes, access flags and array type codes.\npublic abstract class RecordComponentVisitor extends Object; // A visitor to visit a record component.\npublic final class SpringAsmInfo extends Object; // Utility class exposing constants related to Spring's internal repackaging of the ASM bytecode library: currently based on ASM 9.x plus minor patches.\npublic final class Type extends Object; // A Java field or method type.\npublic final class TypePath extends Object; // The path to a type argument, wildcard bound, array element type, or static inner type within an enclosing type.\npublic class TypeReference extends Object; // A reference to a type appearing in a class, field or method declaration, or on an instruction.\n", "des": "Spring's repackaging of ASM 9.x (with Spring-specific patches; for internal use only)."}
{"index": 372, "repo": "commons-geometry-euclidean-1.0", "code": "package shape;\n\nClass Circle; // Class representing a circle in 2 dimensional Euclidean space.\nClass Parallelogram; // Class representing parallelograms, i.e.\nClass Parallelogram.Builder; // Class designed to aid construction of Parallelogram instances.\n", "des": "This package provides utilities for constructing basic 2D shapes."}
{"index": 968, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass AxiomUtils; // Collection of generic utility methods to work with Axiom.\n", "des": "Support classes for working with the AXis Object Model (AXIOM)."}
{"index": 446, "repo": "lucene-analyzers-icu-8.11.2", "code": "package collation;\n\npackage collation.tokenattributes; // Custom AttributeImpl for indexing collation keys as index terms.\nClass ICUCollationAttributeFactory; // Converts each token into its CollationKey, and then encodes bytes as an index term.\nClass ICUCollationDocValuesField; // Indexes collation keys as a single-valued SortedDocValuesField.\nClass ICUCollationKeyAnalyzer; // Configures KeywordTokenizer with ICUCollationAttributeFactory.\n", "des": "Unicode Collation support."}
{"index": 2218, "repo": "spring-data-commons-3.1.2", "code": "package support;\n\npublic abstract class AbstractEntityInformation<T,ID> extends Object implements EntityInformation<T,ID>; // Base class for implementations of EntityInformation.\npublic abstract class AbstractRepositoryMetadata extends Object implements RepositoryMetadata; // Base class for RepositoryMetadata implementations.\npublic class AnnotationRepositoryMetadata extends AbstractRepositoryMetadata; // RepositoryMetadata implementation inspecting the given repository interface for a RepositoryDefinition annotation.\npublic class DefaultCrudMethods extends Object implements CrudMethods; // Default implementation to discover CRUD methods based on the given RepositoryMetadata.\npublic class DefaultRepositoryMetadata extends AbstractRepositoryMetadata; // Default implementation of RepositoryMetadata.\npublic class DelegatingEntityInformation<T,ID> extends Object implements EntityInformation<T,ID>; // Useful base class to implement custom EntityInformations and delegate execution of standard methods from EntityInformation to a special implementation.\npublic class EventPublishingRepositoryProxyPostProcessor extends Object implements RepositoryProxyPostProcessor; // RepositoryProxyPostProcessor to register a MethodInterceptor to intercept CrudRepository.save(Object) and CrudRepository.delete(Object) methods and publish events potentially exposed via a method annotated with DomainEvents.\npublic class FragmentNotImplementedException extends RepositoryCreationException; // Exception thrown during repository creation or repository method invocation when invoking a repository method on a fragment without an implementation.\npublic class IncompleteRepositoryCompositionException extends RepositoryCreationException; // Exception thrown during repository creation when a the repository has custom methods that are not backed by a fragment or if no fragment could be found for a repository method invocation.\npublic class MethodInvocationValidator extends Object implements MethodInterceptor; // Interceptor enforcing required return value and method parameter constraints declared on repository query methods.\n@FunctionalInterface public interface MethodLookup; // Strategy interface providing predicates to resolve a method called on a composite to its implementation method.\npublic static final class MethodLookup.InvokedMethod extends Object; // Value object representing an invoked Method.\n@FunctionalInterface public static interface MethodLookup.MethodPredicate extends BiPredicate<MethodLookup.InvokedMethod,Method>; // A method predicate to be applied on the MethodLookup.InvokedMethod and method candidate.\npublic class PersistenceExceptionTranslationRepositoryProxyPostProcessor extends Object implements RepositoryProxyPostProcessor; // RepositoryProxyPostProcessor to register a PersistenceExceptionTranslationInterceptor on the repository proxy.\n", "des": "Base classes to implement repositories for various data stores."}
{"index": 3529, "repo": "opennlp-tools-2.2.0", "code": "package lemmatizer;\n\nInterface Lemmatizer; // The common interface for lemmatizers.\nInterface LemmatizerContextGenerator; // Interface for the context generator used for probabilistic Lemmatizer.\nInterface LemmatizerEvaluationMonitor; // A marker interface for evaluating lemmatizers.\nClass DefaultLemmatizerContextGenerator; // Simple feature generator for learning statistical lemmatizers.\nClass DefaultLemmatizerSequenceValidator; // The default lemmatizer SequenceValidator implementation.\nClass DictionaryLemmatizer; // A Lemmatizer implementation that works by simple dictionary lookup into a Map built from a file containing, for each line:\nClass LemmaSample; // Represents a lemmatized sentence.\nClass LemmaSampleEventStream; // Class for creating an event stream out of data files for training a probabilistic Lemmatizer.\nClass LemmaSampleSequenceStream; // A SequenceStream implementation encapsulating samples.\nClass LemmaSampleStream; // Reads data for training and testing the Lemmatizer.\nClass LemmatizerEvaluator; // The LemmatizerEvaluator measures the performance of the given Lemmatizer with the provided reference samples.\nClass LemmatizerFactory; // The factory that provides Lemmatizer default implementation and resources.\nClass LemmatizerME; // A probabilistic Lemmatizer implementation.\nClass LemmatizerModel; // The LemmatizerModel is the model used by a learnable Lemmatizer.\n", "des": "Package related to the lemmatizer functionality."}
{"index": 3108, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package naming;\n\nInterface EntityNaming;\nInterface ImplicitAnyDiscriminatorColumnNameSource; // Context for determining the implicit name for an ANY mapping's discriminator column.\nInterface ImplicitAnyKeyColumnNameSource; // Context for determining the implicit name for an ANY mapping's key column.\nInterface ImplicitBasicColumnNameSource; // Context for determining the implicit name related to basic values.\nInterface ImplicitCollectionTableNameSource; // Context for determining the implicit name for a collection table.\nInterface ImplicitConstraintNameSource; // Common implicit name source traits for all constraint naming: FK, UK, index\nInterface ImplicitDiscriminatorColumnNameSource; // Context for determining the implicit name of an entity's discriminator column.\nInterface ImplicitEntityNameSource; // Context for determining the implicit name of an entity's primary table\nInterface ImplicitForeignKeyNameSource;\nInterface ImplicitIdentifierColumnNameSource; // Context for determining the implicit name of an entity's identifier column.\nInterface ImplicitIndexColumnNameSource;\nInterface ImplicitIndexNameSource;\nInterface ImplicitJoinColumnNameSource; // Context for determining the implicit name of a \"join column\" (think JoinColumn).\nInterface ImplicitJoinTableNameSource; // Context for determining the implicit name for a join table.\nInterface ImplicitMapKeyColumnNameSource; // Context for determining the implicit name of a column used to back the key of a Map.\nInterface ImplicitNameSource; // Common contract for all implicit naming sources\nInterface ImplicitNamingStrategy; // Pluggable strategy for applying implicit naming rules when an explicit name is not given.\nInterface ImplicitPrimaryKeyJoinColumnNameSource; // Used to help determine the implicit name of columns which are part of a primary-key, well simultaneously being part of a foreign-key (join).\nInterface ImplicitTenantIdColumnNameSource; // Context for determining the implicit name of an entity's tenant identifier column.\nInterface ImplicitUniqueKeyNameSource;\nInterface NamingStrategyHelper; // Helper contract for dealing with naming strategies.\nInterface PhysicalNamingStrategy; // Pluggable strategy contract for applying physical naming rules for database object names.\nClass CamelCaseToUnderscoresNamingStrategy; // Originally copied from Spring Boot as this strategy is popular there (original name is SpringPhysicalNamingStrategy).\nClass DatabaseIdentifier; // Models an identifier (name), retrieved from the database.\nClass Identifier; // Models an identifier (name), which may or may not be quoted.\n", "des": "Represents a proposed new approach to allowing hooks into the process of determining the name of database objects (tables, columns, constraints, etc)."}
{"index": 611, "repo": "org.apache.karaf.main-2.4.4", "code": "package condpermadmin;\n\nInterface Condition; // The interface implemented by a Condition.\nInterface ConditionalPermissionAdmin; // Framework service to administer Conditional Permissions.\nInterface ConditionalPermissionInfo; // A list of Permissions guarded by a list of conditions with an access decision.\nInterface ConditionalPermissionUpdate; // Update the Conditional Permission Table.\nClass BundleLocationCondition; // Condition to test if the location of a bundle matches or does not match a pattern.\nClass BundleSignerCondition; // Condition to test if the signer of a bundle matches or does not match a pattern.\nClass ConditionInfo; // Condition representation used by the Conditional Permission Admin service.\n", "des": "Conditional Permission Admin Package Version 1.1."}
{"index": 1438, "repo": "spring-boot-actuator-3.1.1", "code": "package servlet;\n\npublic class HttpExchangesFilter extends org.springframework.web.filter.OncePerRequestFilter implements org.springframework.core.Ordered; // Servlet Filter for recording HTTP exchanges.\n", "des": "Actuator HTTP exchanges support for servlet servers."}
{"index": 2129, "repo": "spring-context-support-6.0.11", "code": "package config;\n\n@Configuration(proxyBeanMethods=false) public abstract class AbstractJCacheConfiguration extends org.springframework.cache.annotation.AbstractCachingConfiguration; // Abstract JSR-107 specific @Configuration class providing common structure for enabling JSR-107 annotation-driven cache management capability.\npublic interface JCacheConfigurer extends org.springframework.cache.annotation.CachingConfigurer; // Extension of CachingConfigurer for the JSR-107 implementation.\n@Deprecated(since=\"6.0\") public class JCacheConfigurerSupport extends org.springframework.cache.annotation.CachingConfigurerSupport implements JCacheConfigurer;\n@Configuration(proxyBeanMethods=false) @Role(2) public class ProxyJCacheConfiguration extends AbstractJCacheConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable proxy-based annotation-driven JSR-107 cache management.\n", "des": "Support package for declarative JSR-107 caching configuration."}
{"index": 2859, "repo": "spring-integration-core-6.1.2", "code": "package events;\n\npublic abstract class IntegrationEvent extends org.springframework.context.ApplicationEvent; // Base class for all ApplicationEvents generated by the framework.\n", "des": "ApplicationEvents generated by the Spring Integration framework."}
{"index": 1160, "repo": "commons-math3-3.6.1", "code": "package fraction;\n\nClass AbstractFormat; // Common part shared by both FractionFormat and BigFractionFormat.\nClass BigFraction; // Representation of a rational number without any overflow.\nClass BigFractionField; // Representation of the fractional numbers without any overflow field.\nClass BigFractionFormat; // Formats a BigFraction number in proper format or improper format.\nClass Fraction; // Representation of a rational number.\nClass FractionField; // Representation of the fractional numbers field.\nClass FractionFormat; // Formats a Fraction number in proper format or improper format.\nClass ProperBigFractionFormat; // Formats a BigFraction number in proper format.\nClass ProperFractionFormat; // Formats a Fraction number in proper format.\nClass FractionConversionException; // Error thrown when a double value cannot be converted to a fraction in the allowed number of iterations.\n", "des": "Fraction number type and fraction number formatting."}
{"index": 706, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package file;\n\nClass FileInboundChannelAdapterSpec; // A MessageSourceSpec for a FileReadingMessageSource.\nClass Files; // The Spring Integration File components Factory.\nClass FileSplitterSpec; // The MessageHandlerSpec for the FileSplitter.\nClass FileTransferringMessageHandlerSpec<F,S extends FileTransferringMessageHandlerSpec<F,S>>;\nClass FileWritingMessageHandlerSpec;\nClass RemoteFileInboundChannelAdapterSpec<F,S extends RemoteFileInboundChannelAdapterSpec<F,S,MS>,MS extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizingMessageSource<F>>; // A MessageSourceSpec for an AbstractInboundFileSynchronizingMessageSource.\nClass RemoteFileOutboundGatewaySpec<F,S extends RemoteFileOutboundGatewaySpec<F,S>>;\nClass TailAdapterSpec; // A MessageProducerSpec for file tailing adapters.\n", "des": "Provides File Components support for Spring Integration Java DSL."}
{"index": 3198, "repo": "tomcat-api-10.1", "code": "package http;\n\npackage http.fileupload; // NOTE: This code has been copied from commons-fileupload trunk 1.3 and commons-io 1.4 and package renamed to avoid clashes with any web apps that may wish to use these libraries.\nInterface CookieProcessor;\nClass ConcurrentDateFormat; // A thread safe wrapper around SimpleDateFormat that does not make use of ThreadLocal and - broadly - only creates enough SimpleDateFormat objects to satisfy the concurrency requirements.\nClass CookieProcessorBase;\nClass FastHttpDateFormat; // Utility class to generate HTTP dates.\nClass HeaderUtil;\nClass MimeHeaders; // Memory-efficient repository for Mime Headers.\nClass Parameters;\nClass RequestUtil;\nClass ResponseUtil;\nClass Rfc6265CookieProcessor;\nClass ServerCookie; // Server-side cookie representation.\nClass ServerCookies; // This class is not thread-safe.\nEnum Parameters.FailReason;\nEnum SameSiteCookies;\n", "des": "Special utils for handling HTTP-specific entities - headers, parameters, cookies, etc."}
{"index": 1202, "repo": "commons-math3-3.6.1", "code": "package random;\n\nInterface NormalizedRandomGenerator; // This interface represent a normalized random generator for scalars.\nInterface RandomData; // to be removed in 4.0.\nInterface RandomGenerator; // Interface extracted from java.util.Random.\nInterface RandomVectorGenerator; // This interface represents a random generator for whole vectors.\nClass AbstractRandomGenerator; // Abstract class implementing the RandomGenerator interface.\nClass AbstractWell; // This abstract class implements the WELL class of pseudo-random number generator from François Panneton, Pierre L'Ecuyer and Makoto Matsumoto.\nClass BitsStreamGenerator; // Base class for random number generators that generates bits streams.\nClass CorrelatedRandomVectorGenerator; // A RandomVectorGenerator that generates vectors with with correlated components.\nClass EmpiricalDistribution; // Represents an empirical probability distribution -- a probability distribution derived from observed data without making any assumptions about the functional form of the population distribution that the data come from.\nClass GaussianRandomGenerator; // This class is a gaussian normalized random generator for scalars.\nClass HaltonSequenceGenerator; // Implementation of a Halton sequence.\nClass ISAACRandom; // ISAAC: a fast cryptographic pseudo-random number generator ISAAC (Indirection, Shift, Accumulate, Add, and Count) generates 32-bit random numbers.\nClass JDKRandomGenerator; // Extension of java.util.Random to implement RandomGenerator.\nClass MersenneTwister; // This class implements a powerful pseudo-random number generator developed by Makoto Matsumoto and Takuji Nishimura during 1996-1997.\nClass RandomAdaptor; // Extension of java.util.Random wrapping a RandomGenerator.\nClass RandomDataGenerator; // Implements the RandomData interface using a RandomGenerator instance to generate non-secure data and a SecureRandom instance to provide data for the nextSecureXxx methods.\nClass RandomDataImpl; // to be removed in 4.0.\nClass RandomGeneratorFactory; // Utilities for creating RandomGenerator instances.\nClass SobolSequenceGenerator; // Implementation of a Sobol sequence.\nClass StableRandomGenerator; // This class provides a stable normalized random generator.\n", "des": "Random number and random data generators."}
{"index": 1748, "repo": "spring-data-mongodb-4.1.2", "code": "package core;\n\npackage core.aggregation; // Support for the MongoDB aggregation framework.\npackage core.annotation; // Core Spring Data MongoDB annotations not limited to a special use case (like Query,...).\npackage core.convert; // Spring Data MongoDB specific converter infrastructure.\npackage core.encryption; // Infrastructure for explicit encryption mechanism of Client-Side Field Level Encryption.\npackage core.geo; // Support for MongoDB geo-spatial queries.\npackage core.index; // Support for MongoDB document indexing.\npackage core.mapping; // Infrastructure for the MongoDB document-to-object mapping subsystem.\npackage core.mapreduce; // Support for MongoDB map-reduce operations.\npackage core.messaging; // MongoDB specific messaging support for listening to eg.\npackage core.query; // MongoDB specific query and update support.\npackage core.schema; // MongoDB-specific JSON schema implementation classes.\npackage core.script; // Abstraction classes javascript function execution within MongoDB Server.\npackage core.spel; // Support classes to transform SpEL expressions into MongoDB expressions.\npackage core.validation; // MongoDB schema validation specifics.\npublic interface BulkOperations; // Bulk operations for insert/update/remove actions on a collection.\npublic static enum BulkOperations.BulkMode extends Enum<BulkOperations.BulkMode>; // Mode for bulk operation.\npublic class ChangeStreamEvent<T> extends Object; // Message implementation specific to MongoDB Change Streams.\npublic class ChangeStreamOptions extends Object; // Options applicable to MongoDB Change Streams.\npublic static class ChangeStreamOptions.ChangeStreamOptionsBuilder extends Object; // Builder for creating ChangeStreamOptions.\npublic interface CollectionCallback<T>; // Callback interface for executing actions against a MongoCollection.\npublic class CollectionOptions extends Object; // Provides a simple wrapper to encapsulate the variety of settings you can use when creating a collection.\npublic static class CollectionOptions.CollectionChangeStreamOptions extends Object; // Encapsulation of options applied to define collections change stream behaviour.\npublic static class CollectionOptions.TimeSeriesOptions extends Object; // Options applicable to Time Series collections.\npublic static class CollectionOptions.ValidationOptions extends Object; // Encapsulation of ValidationOptions options.\npublic interface CollectionPreparer<T>; // Interface for functional preparation of a MongoCollection.\npublic interface CursorPreparer extends ReadPreferenceAware; // Simple callback interface to allow customization of a FindIterable.\n", "des": "MongoDB core support."}
{"index": 3685, "repo": "solr-core-9.3.0", "code": "package rest;\n\npackage rest.schema; // Provides RESTful API access to managed resources in the Solr Schema.\nInterface ManagedResource.ChildResourceSupport; // Marker interface to indicate a ManagedResource implementation class also supports managing child resources at path: /<resource>/{child}\nInterface ManagedResourceObserver; // Allows a Solr component to register as an observer of important ManagedResource events, such as when the managed data is loaded.\nInterface ManagedResourceStorage.StorageIO; // Hides the underlying storage implementation for data being managed by a ManagedResource.\nClass BaseSolrResource; // Base class for delegating REST-oriented requests to ManagedResources.\nClass ManagedResource; // Supports Solr components that have external data that needs to be managed using the REST API.\nClass ManagedResourceStorage; // Abstract base class that provides most of the functionality needed to store arbitrary data for managed resources.\nClass ManagedResourceStorage.FileStorageIO; // Local file-based storage implementation.\nClass ManagedResourceStorage.InMemoryStorageIO; // Memory-backed storage IO; not really intended for storage large amounts of data in production, but useful for testing and other transient workloads.\nClass ManagedResourceStorage.JsonStorage; // Default storage implementation that uses JSON as the storage format for managed data.\nClass ManagedResourceStorage.ZooKeeperStorageIO; // ZooKeeper based storage implementation that uses the SolrZkClient provided by the CoreContainer.\nClass RestManager; // Supports runtime mapping of REST API endpoints to ManagedResource implementations; endpoints can be registered at either the /schema or /config base paths, depending on which base path is more appropriate for the type of managed resource.\nClass RestManager.ManagedEndpoint; // Request handling needs a lightweight object to delegate a request to.\nClass RestManager.Registry; // Per-core registry of ManagedResources found during core initialization.\n", "des": "Solr RESTful APIs."}
{"index": 1263, "repo": "spring-core-6.0.11", "code": "package proxy;\n\npublic interface Callback; // All callback interfaces used by Enhancer extend this interface.\npublic interface CallbackFilter; // Map methods of subclasses generated by Enhancer to a particular callback.\npublic abstract class CallbackHelper extends Object implements CallbackFilter;\npublic interface Dispatcher extends Callback; // Dispatching Enhancer callback.\npublic class Enhancer extends AbstractClassGenerator; // Generates dynamic subclasses to enable method interception.\npublic interface Factory; // All enhanced instances returned by the Enhancer class implement this interface.\npublic interface FixedValue extends Callback; // Enhancer callback that simply returns the value to return from the proxied method.\npublic class InterfaceMaker extends AbstractClassGenerator; // Generates new interfaces at runtime.\npublic interface InvocationHandler extends Callback; // InvocationHandler replacement (unavailable under JDK 1.2).\npublic interface LazyLoader extends Callback; // Lazy-loading Enhancer callback.\npublic interface MethodInterceptor extends Callback; // General-purpose Enhancer callback which provides for \"around advice\".\npublic class MethodProxy extends Object; // Classes generated by Enhancer pass this object to the registered MethodInterceptor objects when an intercepted method is invoked.\npublic abstract class Mixin extends Object; // Mixin allows multiple objects to be combined into a single larger object.\npublic static class Mixin.Generator extends AbstractClassGenerator;\npublic interface NoOp extends Callback; // Methods using this Enhancer callback will delegate directly to the default (super) implementation in the base class.\npublic class Proxy extends Object implements Serializable; // This class is meant to be used as replacement for java.lang.reflect.Proxy under JDK 1.2.\npublic interface ProxyRefDispatcher extends Callback; // Dispatching Enhancer callback.\npublic class UndeclaredThrowableException extends CodeGenerationException; // Used by Proxy as a replacement for java.lang.reflect.UndeclaredThrowableException.\n", "des": "Spring's repackaging of the CGLIB proxy package (for internal use only)."}
{"index": 2763, "repo": "spring-beans-6.0.11", "code": "package wiring;\n\npublic class BeanConfigurerSupport extends Object implements BeanFactoryAware, InitializingBean, DisposableBean; // Convenient base class for bean configurers that can perform Dependency Injection on objects (however they may be created).\npublic class BeanWiringInfo extends Object; // Holder for bean wiring metadata information about a particular class.\npublic interface BeanWiringInfoResolver; // Strategy interface to be implemented by objects than can resolve bean name information, given a newly instantiated bean object.\npublic class ClassNameBeanWiringInfoResolver extends Object implements BeanWiringInfoResolver; // Simple default implementation of the BeanWiringInfoResolver interface, looking for a bean with the same name as the fully-qualified class name.\n", "des": "Mechanism to determine bean wiring metadata from a bean instance."}
{"index": 2536, "repo": "spring-security-core-6.1.2", "code": "package session;\n\npublic class AbstractSessionEvent extends org.springframework.context.ApplicationEvent; // Abstract superclass for all session related events.\npublic abstract class SessionCreationEvent extends AbstractSessionEvent; // Generic session creation event which indicates that a session (potentially represented by a security context) has begun.\npublic abstract class SessionDestroyedEvent extends AbstractSessionEvent; // Generic \"session termination\" event which indicates that a session (potentially represented by a security context) has ended.\npublic abstract class SessionIdChangedEvent extends AbstractSessionEvent; // Generic \"session ID changed\" event which indicates that a session identifier (potentially represented by a security context) has changed.\npublic class SessionInformation extends Object implements Serializable; // Represents a record of a session within the Spring Security framework.\npublic interface SessionRegistry; // Maintains a registry of SessionInformation instances.\npublic class SessionRegistryImpl extends Object implements SessionRegistry, org.springframework.context.ApplicationListener<AbstractSessionEvent>; // Default implementation of SessionRegistry which listens for SessionDestroyedEvents published in the Spring application context.\n", "des": "Session abstraction which is provided by the org.springframework.security.core.session.SessionInformation SessionInformation class."}
{"index": 3368, "repo": "opencms-core-15.0", "code": "package editors;\n\npackage editors.directedit; // Used to control the generation of the HTML for the \"direct edit\" buttons.\nInterface I_CmsEditorActionHandler; // Provides a method for performing an individual action if the user pressed a special button in the editor.\nInterface I_CmsEditorCssHandler; // Provides methods to determine the CSS style sheet URI for the editors based on the edited resource path.\nInterface I_CmsEditorHandler; // Provides a method for selecting an individual file editor.\nInterface I_CmsEditorTypeMatcher; // Provides a method for assigning additional resource types to editors.\nInterface I_CmsPreEditorActionDefinition; // Defines an action to be performed before the workplace editor is opened for the first time.\nClass A_CmsPreEditorActionDefinition; // Defines an action to be performed before the workplace editor is opened for the first time.\nClass CmsDefaultPageEditor; // Provides methods for building editors for the CmsDefaultPage page type.\nClass CmsDialogCopyLanguage; // Provides methods for the editor copy language dialog.\nClass CmsDialogElement; // Contains the setup information about a single dialog element.\nClass CmsDialogElements; // Provides methods for the editor elements dialog.\nClass CmsEditor; // Provides basic methods for building the file editors of OpenCms.\nClass CmsEditorActionDefault; // Provides a method to perform a user defined action when editing a page.\nClass CmsEditorBase; // Base class for all editors that turns of time warp deletion inherited from CmsWorkplace.\nClass CmsEditorCssHandlerDefault; // A default editor CSS handler to obtain the CSS style sheet path from the template property value of the template itself.\nClass CmsEditorDisplayOptions; // Provides methods to determine the display options of a workplace editor for the current user.\nClass CmsEditorFrameset; // Helper class to create the editor frameset.\nClass CmsEditorHandler; // This editor handler class returns the editor URI depending on various factors.\nClass CmsEditorSelector; // Selects the dialog which should be displayed by OpenCms depending on the configuration value.\nClass CmsEditorSessionInfo; // Stores editor session data.\nClass CmsPreEditorAction; // Handles the actions that should be performed before opening the editor frameset.\n", "des": "Base classes for the editors (WYSIWYG, plain text, XML content) used in the OpenCms Workplace."}
{"index": 1410, "repo": "spring-boot-actuator-3.1.1", "code": "package management;\n\n@WebEndpoint(id=\"heapdump\") public class HeapDumpWebEndpoint extends Object; // Web @Endpoint to expose heap dumps.\n@FunctionalInterface protected static interface HeapDumpWebEndpoint.HeapDumper; // Strategy interface used to dump the heap to a file.\nprotected static class HeapDumpWebEndpoint.HeapDumperUnavailableException extends RuntimeException; // Exception to be thrown if the HeapDumpWebEndpoint.HeapDumper cannot be created.\nprotected static class HeapDumpWebEndpoint.HotSpotDiagnosticMXBeanHeapDumper extends Object implements HeapDumpWebEndpoint.HeapDumper; // HeapDumpWebEndpoint.HeapDumper that uses com.sun.management.HotSpotDiagnosticMXBean, available on Oracle and OpenJDK, to dump the heap to a file.\n@Endpoint(id=\"threaddump\") public class ThreadDumpEndpoint extends Object; // @Endpoint to expose thread info.\npublic static final class ThreadDumpEndpoint.ThreadDumpDescriptor extends Object implements OperationResponseBody; // Description of a thread dump.\n", "des": "Actuator support for JVM management."}
{"index": 130, "repo": "ignite-core-2.15.0", "code": "package internal;\n\npackage internal.binary; // Contains binary APIs internal implementation.\npackage internal.executor; // Contains grid executor service implementation.\npackage internal.managers; // TODO.\npackage internal.mxbean; // Contains internal mxbeans stuff.\npackage internal.processors; // Package with Apache Ignite internal Processors.\npackage internal.suggestions; // Contains classes for configurations suggestions.\npackage internal.util; // System-wide utility routine and helper classes.\npackage internal.worker; // System worker registry and control MBean implementation.\nInterface ExecutorAwareMessage; // Message with specified custom executor must be processed in the appropriate thread pool.\nInterface GridComponent; // Interface for all main internal Ignite components (managers and processors).\nInterface GridInternalWrapper<T>; // Internal wrapper interface for custom resource injection logic.\nInterface GridKernalContext;\nInterface GridKernalGateway; // This interface guards access to implementations of public methods that access kernal functionality from the following main API interfaces: ClusterGroup Note that this kernal gateway should not be used to guard against method from the following non-rich interfaces since their implementations are already managed by their respective implementing classes: Ignite ClusterNode Kernal gateway is also responsible for notifying various futures about the change in kernal state so that issued futures could properly interrupt themselves when kernal becomes unavailable while future is held externally by the user.\nInterface GridProxyListener; // Interception listener is notified about method apply.\nInterface GridTaskSessionInternal; // Internal task session interface.\nInterface IgniteDiagnosticAware;\nInterface IgniteEx; // Extended Grid interface which provides some additional methods required for kernal and Visor.\nInterface IgniteInternalFuture<R>; // Extension for standard Future interface.\nInterface IgniteServicesEx; // Extended interface that provides additional internal methods for managing services.\nInterface IgniteTransactionsEx; // Extended interface to work with system transactions.\nInterface InvalidEnvironmentException; // Marker interface of invalid environment exception.\nInterface PlatformSecurityAwareJob; // Represents the base interface for all Platform Compute Jobs that wrap and execute user code.\nInterface ThinProtocolFeature; // The base feature class.\nClass AsyncSupportAdapter<T extends IgniteAsyncSupport>; // Adapter for IgniteAsyncSupport.\n", "des": "Contains main implementation."}
{"index": 981, "repo": "spring-ws-3.0.10.RELEASE", "code": "package jaas;\n\nClass AbstractJaasValidationCallbackHandler; // Abstract base class for integrating with JAAS.\nClass JaasCertificateValidationCallbackHandler; // Provides basic support for integrating with JAAS and certificates.\nClass JaasPlainTextPasswordValidationCallbackHandler; // Provides basic support for integrating with JAAS and plain text passwords.\n", "des": "Contains CallbackHandler implementations for XWSS that use the Java Authentication and Authorization Service (JAAS)."}
{"index": 474, "repo": "beam-sdks-java-core-2.49.0", "code": "package annotations;\n\nAnnotation Type Internal; // Signifies that a publicly accessible API (public class, method or field) is intended for internal use only and not for public consumption.\n", "des": "Defines annotations used across the SDK."}
{"index": 108, "repo": "ignite-core-2.15.0", "code": "package communication;\n\nInterface IgniteMessageFactory; // Message factory for all communication messages registered using IgniteMessageFactory.register(short, Supplier) method call.\nInterface IoPool; // The interface of IO Messaging Pool Extension.\nInterface Message; // Base class for all communication messages.\nInterface MessageFactory; // Use MessageFactoryProvider instead.\nInterface MessageFactoryProvider; // Provider of communication message factories.\nInterface MessageFormatter; // Provides a custom format for communication messages.\nInterface MessageReader; // Communication message reader.\nInterface MessageWriter; // Communication message writer.\nEnum MessageCollectionItemType; // Enum representing possible types of collection items.\n", "des": "Contains extendable components for communication."}
{"index": 3392, "repo": "commons-imaging-1.0-alpha3", "code": "package gif;\n\nClass GifImageMetadata;\nClass GifImageMetadataItem;\nClass GifImageParser;\nClass GifImagingParameters; // Gif format parameters.\nEnum DisposalMethod; // Describes the disposal of a GIF frame when rendering the animation.\n", "des": "The GIF image format."}
{"index": 1924, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package flyway;\n\n@AutoConfiguration(after={DataSourceAutoConfiguration.class,JdbcTemplateAutoConfiguration.class,HibernateJpaAutoConfiguration.class}) @ConditionalOnClass(org.flywaydb.core.Flyway.class) @Conditional(org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.FlywayDataSourceCondition.class) @ConditionalOnProperty(prefix=\"spring.flyway\", name=\"enabled\", matchIfMissing=true) @Import(org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.FlywayAutoConfigurationRuntimeHints.class) public class FlywayAutoConfiguration extends Object; // Auto-configuration for Flyway database migrations.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.jdbc.support.JdbcUtils.class) @ConditionalOnMissingBean(org.flywaydb.core.Flyway.class) @EnableConfigurationProperties(FlywayProperties.class) public static class FlywayAutoConfiguration.FlywayConfiguration extends Object;\n@FunctionalInterface public interface FlywayConfigurationCustomizer; // Callback interface that can be implemented by beans wishing to customize the flyway configuration.\npublic interface FlywayConnectionDetails extends ConnectionDetails; // Details required for Flyway to establish a connection to an SQL service using JDBC.\n@Target({FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Qualifier public @interface FlywayDataSource; // Qualifier annotation for a DataSource to be injected in to Flyway.\npublic class FlywayMigrationInitializer extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.core.Ordered; // InitializingBean used to trigger Flyway migration through the FlywayMigrationStrategy.\n@FunctionalInterface public interface FlywayMigrationStrategy; // Strategy used to initialize Flyway migration.\n@ConfigurationProperties(prefix=\"spring.flyway\") public class FlywayProperties extends Object; // Configuration properties for Flyway database migrations.\n", "des": "Auto-configuration for Flyway."}
{"index": 1390, "repo": "spring-boot-actuator-3.1.1", "code": "package jmx;\n\npackage jmx.annotation; // Annotation support for actuator JMX endpoints.\npublic class EndpointMBean extends Object implements DynamicMBean; // Adapter to expose a JMX endpoint as a DynamicMBean.\n@FunctionalInterface public interface EndpointObjectNameFactory; // A factory to create an ObjectName for an EndpointMBean.\npublic interface ExposableJmxEndpoint extends ExposableEndpoint<JmxOperation>; // Information describing an endpoint that can be exposed over JMX.\npublic class JacksonJmxOperationResponseMapper extends Object implements JmxOperationResponseMapper; // JmxOperationResponseMapper that delegates to a Jackson ObjectMapper to return a JSON response.\npublic class JmxEndpointExporter extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, org.springframework.beans.factory.BeanClassLoaderAware; // Exports JMX endpoints to a MBeanServer.\n@FunctionalInterface public interface JmxEndpointsSupplier extends EndpointsSupplier<ExposableJmxEndpoint>; // EndpointsSupplier for JMX endpoints.\npublic interface JmxOperation extends Operation; // An operation on a JMX endpoint.\npublic interface JmxOperationParameter; // Describes the parameters of an operation on a JMX endpoint.\npublic interface JmxOperationResponseMapper; // Maps an operation's response to a JMX-friendly form.\n", "des": "JMX support for actuator endpoints."}
{"index": 3810, "repo": "lucene-analysis-common-9.7.0", "code": "package reverse;\n\nClass ReverseStringFilter; // Reverse token string, for example \"country\" => \"yrtnuoc\".\nClass ReverseStringFilterFactory; // Factory for ReverseStringFilter.\n", "des": "Filter to reverse token text."}
{"index": 2929, "repo": "groovy-4.0.13", "code": "package classgen;\n\npackage classgen.asm; // Helper classes for ASMClassGenerator.\npublic class AnnotationVisitor extends Object; // An Annotation visitor responsible for: reading annotation metadata (@Retention, @Target, attribute types) verify that an AnnotationNode conforms to annotation meta enhancing an AnnotationNode AST to reflect real annotation meta\npublic class AsmClassGenerator extends ClassGenerator; // Generates Java class versions of Groovy classes using ASM.\npublic abstract class BytecodeExpression extends Expression; // Represents some custom bytecode generation by the compiler.\npublic abstract class BytecodeInstruction extends Object; // Helper class used by the class generator.\npublic class BytecodeSequence extends Statement; // This class represents a sequence of BytecodeInstructions or ASTNodes.\npublic class ClassCompletionVerifier extends ClassCodeVisitorSupport; // Checks that a class satisfies various conditions including: Incorrect class or method access modifiers No abstract methods appear in a non-abstract class Existence and correct visibility for inherited members Invalid attempts to override final members\npublic abstract class ClassGenerator extends ClassCodeVisitorSupport; // Abstract base class for generator of Java class versions of Groovy AST classes\npublic class ClassGeneratorException extends RuntimeException; // An exception thrown by the class generator\npublic class DummyClassGenerator extends ClassGenerator; // To generate a class that has all the fields and methods, except that fields are not initialized and methods are empty.\npublic class EnumCompletionVisitor extends ClassCodeVisitorSupport; // Enums have a parent constructor with two arguments from java.lang.Enum.\npublic class EnumVisitor extends ClassCodeVisitorSupport;\npublic class ExtendedVerifier extends ClassCodeVisitorSupport; // A specialized Groovy AST visitor meant to perform additional verifications upon the current AST.\npublic class FinalVariableAnalyzer extends ClassCodeVisitorSupport;\npublic static interface FinalVariableAnalyzer.VariableNotFinalCallback;\npublic class GeneratorContext extends Object; // A context shared across generations of a class and its inner classes.\npublic class InnerClassCompletionVisitor extends InnerClassVisitorHelper;\npublic class InnerClassVisitor extends InnerClassVisitorHelper;\npublic abstract class InnerClassVisitorHelper extends ClassCodeVisitorSupport;\npublic class ReturnAdder extends Object; // Utility class to add return statements.\n@FunctionalInterface public static interface ReturnAdder.ReturnStatementListener;\npublic class VariableScopeVisitor extends ClassCodeVisitorSupport; // Initializes the variable scopes for an AST.\n", "des": "Generates Java classes for Groovy classes using ASM."}
{"index": 1476, "repo": "spring-shell-core-3.1.2", "code": "package result;\n\npublic class AttributedCharSequenceResultHandler extends TerminalAwareResultHandler<org.jline.utils.AttributedCharSequence>; // A ResultHandler that knows how to render JLine's AttributedCharSequence.\n@FunctionalInterface public interface CommandNotFoundMessageProvider extends Function<CommandNotFoundMessageProvider.ProviderContext,String>; // Provider for a message used within CommandNotFoundResultHandler.\npublic static interface CommandNotFoundMessageProvider.ProviderContext; // Context for CommandNotFoundResultHandler.\npublic final class CommandNotFoundResultHandler extends TerminalAwareResultHandler<CommandNotFound>; // ResultHandler for CommandNotFound using CommandNotFoundMessageProvider to provide an error message.\npublic class DefaultResultHandler extends TerminalAwareResultHandler<Object>; // A simple ResultHandler that deals with Objects (hence comes as a last resort) and prints the Object.toString() value of results to standard out.\npublic interface GenericResultHandler;\npublic class GenericResultHandlerService extends Object implements ResultHandlerService; // Base implementation suitable for use in most environments.\npublic class ParameterValidationExceptionResultHandler extends TerminalAwareResultHandler<ParameterValidationException>; // Displays validation errors on the terminal.\n@Configuration(proxyBeanMethods=false) public class ResultHandlerConfig extends Object; // Used for explicit configuration of ResultHandlers.\npublic class ResultHandlerNotFoundException extends ResultHandlingException;\npublic class ResultHandlingException extends org.springframework.core.NestedRuntimeException;\npublic abstract class TerminalAwareResultHandler<T> extends Object implements ResultHandler<T>; // Base class for ResultHandlers that rely on JLine's Terminal.\npublic class TerminalSizeAwareResultHandler extends TerminalAwareResultHandler<org.springframework.shell.TerminalSizeAware>; // A ResultHandler that prints TerminalSizeAware according to the Terminal size.\npublic class ThrowableResultHandler extends TerminalAwareResultHandler<Throwable>; // A ResultHandler that prints thrown exceptions messages in red.\n", "des": "Contains strategies for dealing with results of commands."}
{"index": 172, "repo": "ignite-core-2.15.0", "code": "package version;\n\nClass GridVersionCommandHandler; // Handler for GridRestCommand.VERSION and GridRestCommand.NAME command.\n", "des": "REST version command."}
{"index": 1073, "repo": "hadoop-yarn-common-3.3.6", "code": "package metrics;\n\nClass AppAttemptMetricsConstants;\nClass ApplicationMetricsConstants;\nClass ContainerMetricsConstants;\n", "des": "Yarn Common Metrics package."}
{"index": 2101, "repo": "spring-webflux-6.0.11", "code": "package condition;\n\npublic abstract class AbstractRequestCondition<T extends AbstractRequestCondition<T>> extends Object implements RequestCondition<T>; // A base class for RequestCondition types providing implementations of AbstractRequestCondition.equals(Object), AbstractRequestCondition.hashCode(), and AbstractRequestCondition.toString().\npublic class CompositeRequestCondition extends AbstractRequestCondition<CompositeRequestCondition>; // Implements the RequestCondition contract by delegating to multiple RequestCondition types and using a logical conjunction (' && ') to ensure all conditions match a given request.\npublic final class ConsumesRequestCondition extends AbstractRequestCondition<ConsumesRequestCondition>; // A logical disjunction (' || ') request condition to match a request's 'Content-Type' header to a list of media type expressions.\npublic final class HeadersRequestCondition extends AbstractRequestCondition<HeadersRequestCondition>; // A logical conjunction (' && ') request condition that matches a request against a set of header expressions with syntax defined in RequestMapping.headers().\npublic interface MediaTypeExpression; // A contract for media type expressions (e.g.\npublic interface NameValueExpression<T>; // A contract for \"name!=value\" style expression used to specify request parameters and request header conditions in @RequestMapping.\npublic final class ParamsRequestCondition extends AbstractRequestCondition<ParamsRequestCondition>; // A logical conjunction (' && ') request condition that matches a request against a set parameter expressions with syntax defined in RequestMapping.params().\npublic final class PatternsRequestCondition extends AbstractRequestCondition<PatternsRequestCondition>; // A logical disjunction (' || ') request condition that matches a request against a set of URL path patterns.\npublic final class ProducesRequestCondition extends AbstractRequestCondition<ProducesRequestCondition>; // A logical disjunction (' || ') request condition to match a request's 'Accept' header to a list of media type expressions.\npublic interface RequestCondition<T>; // Contract for request mapping conditions.\npublic final class RequestConditionHolder extends AbstractRequestCondition<RequestConditionHolder>; // A holder for a RequestCondition useful when the type of the request condition is not known ahead of time, e.g.\npublic final class RequestMethodsRequestCondition extends AbstractRequestCondition<RequestMethodsRequestCondition>; // A logical disjunction (' || ') request condition that matches a request against a set of RequestMethods.\n", "des": "RequestCondition and implementations for matching requests based on different criteria."}
{"index": 882, "repo": "mahout-math-0.13.0", "code": "package stat;\n\nClass Gamma; // Partially deprecated until unit tests are in place.\nClass Probability; // Partially deprecated until unit tests are in place.\n", "des": "Tools for basic and advanced statistics: Estimators, Gamma functions, Beta functions, Probabilities, Special integrals, etc."}
{"index": 2597, "repo": "spring-rabbit-3.0.6", "code": "package logback;\n\npublic class AmqpAppender extends ch.qos.logback.core.AppenderBase<ch.qos.logback.classic.spi.ILoggingEvent>; // A Logback appender that publishes logging events to an AMQP Exchange.\nprotected static class AmqpAppender.Event extends Object; // Small helper class to encapsulate a LoggingEvent, its MDC properties, and the number of retries.\n", "des": "Provides classes supporting Logback appenders."}
{"index": 3447, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface ConnectionProvider; // A contract for obtaining JDBC connections.\nInterface JdbcConnectionAccess; // Provides centralized access to JDBC connections.\nInterface MultiTenantConnectionProvider; // A specialized Connection provider contract used when the application is using multi-tenancy support requiring tenant aware connections.\nClass AbstractDataSourceBasedMultiTenantConnectionProviderImpl; // Basic support for implementations of MultiTenantConnectionProvider based on DataSources.\nClass AbstractMultiTenantConnectionProvider; // Basic support for MultiTenantConnectionProvider implementations using individual ConnectionProvider instances per tenant behind the scenes.\nClass DataSourceBasedMultiTenantConnectionProviderImpl; // A concrete implementation of the MultiTenantConnectionProvider contract bases on a number of reasonable assumptions.\n", "des": "Defines contracts for accessing JDBC Connections"}
{"index": 1594, "repo": "spring-websocket-6.0.11", "code": "package handler;\n\npublic abstract class AbstractWebSocketHandler extends Object implements WebSocketHandler; // A convenient base class for WebSocketHandler implementation with empty methods.\npublic class BeanCreatingHandlerProvider<T> extends Object implements org.springframework.beans.factory.BeanFactoryAware; // Instantiates a target handler through a Spring BeanFactory and also provides an equivalent destroy method.\npublic class BinaryWebSocketHandler extends AbstractWebSocketHandler; // A convenient base class for WebSocketHandler implementations that process binary messages only.\npublic class ConcurrentWebSocketSessionDecorator extends WebSocketSessionDecorator; // Wrap a WebSocketSession to guarantee only one thread can send messages at a time.\npublic static enum ConcurrentWebSocketSessionDecorator.OverflowStrategy extends Enum<ConcurrentWebSocketSessionDecorator.OverflowStrategy>; // Enum for options of what to do when the buffer fills up.\npublic class ExceptionWebSocketHandlerDecorator extends WebSocketHandlerDecorator; // An exception handling WebSocketHandlerDecorator.\npublic class LoggingWebSocketHandlerDecorator extends WebSocketHandlerDecorator; // A WebSocketHandlerDecorator that adds logging to WebSocket lifecycle events.\npublic class PerConnectionWebSocketHandler extends Object implements WebSocketHandler, org.springframework.beans.factory.BeanFactoryAware; // A WebSocketHandler that initializes and destroys a WebSocketHandler instance for each WebSocket connection and delegates all other methods to it.\npublic class SessionLimitExceededException extends RuntimeException; // Raised when a WebSocket session has exceeded limits it has been configured for, e.g.\npublic class TextWebSocketHandler extends AbstractWebSocketHandler; // A convenient base class for WebSocketHandler implementations that process text messages only.\npublic class WebSocketHandlerDecorator extends Object implements WebSocketHandler; // Wraps another WebSocketHandler instance and delegates to it.\npublic interface WebSocketHandlerDecoratorFactory; // A factory for applying decorators to a WebSocketHandler.\npublic class WebSocketSessionDecorator extends Object implements WebSocketSession; // Wraps another WebSocketSession instance and delegates to it.\n", "des": "Convenient WebSocketHandler implementations and decorators."}
{"index": 3678, "repo": "solr-core-9.3.0", "code": "package pkg;\n\nInterface PackageListeners.Listener;\nClass PackageAPI; // This implements the public end points (/api/cluster/package) of package API.\nClass PackageAPI.Packages;\nClass PackageAPI.PkgVersion;\nClass PackageListeners;\nClass PackageListeners.Listener.Ctx;\nClass PackageListeningClassLoader; // A SolrClassLoader that is designed to listen to a set of packages.\nClass PackagePluginHolder<T>;\nClass SolrPackageLoader; // The class that holds a mapping of various packages and classloaders\n", "des": "Package management implementation"}
{"index": 1562, "repo": "spring-restdocs-core-3.0.0", "code": "package cookies;\n\npublic abstract class AbstractCookiesSnippet extends TemplatedSnippet; // Abstract TemplatedSnippet subclass that provides a base for snippets that document a RESTful resource's request or response cookies.\npublic class CookieDescriptor extends IgnorableDescriptor<CookieDescriptor>; // A description of a cookie found in a request or response.\npublic abstract class CookieDocumentation extends Object; // Static factory methods for documenting a RESTful API's request and response cookies.\npublic class RequestCookiesSnippet extends AbstractCookiesSnippet; // A Snippet that documents the cookies in a request.\npublic class ResponseCookiesSnippet extends AbstractCookiesSnippet; // A Snippet that documents the cookies in a response.\n", "des": "Documenting the cookies of a RESTful API's requests and responses."}
{"index": 3578, "repo": "lucene-sandbox-9.7.0", "code": "package search;\n\nClass CombinedFieldQuery; // A Query that treats multiple fields as a single stream and scores terms as if you had indexed them as a single term in a single field.\nClass CombinedFieldQuery.Builder; // A builder for CombinedFieldQuery.\nClass CoveringQuery; // A Query that allows to have a configurable number or required matches per document.\nClass LargeNumHitsTopDocsCollector; // Optimized collector for large number of hits.\nClass LatLonPointPrototypeQueries; // Holder class for prototype sandboxed queries\nClass MultiRangeQuery; // Abstract class for range queries involving multiple ranges against physical points such as IntPoints All ranges are logically ORed together\nClass MultiRangeQuery.Builder; // A builder for multirange queries.\nClass MultiRangeQuery.RangeClause; // Representation of a single clause in a MultiRangeQuery\nClass PhraseWildcardQuery; // A generalized version of PhraseQuery, built with one or more MultiTermQuery that provides term expansions for multi-terms (one of the expanded terms must match).\nClass PhraseWildcardQuery.Builder; // Builds a PhraseWildcardQuery.\nClass PhraseWildcardQuery.MultiTerm; // Phrase term with expansions.\nClass PhraseWildcardQuery.PhraseTerm; // All PhraseWildcardQuery.PhraseTerm are light and immutable.\nClass PhraseWildcardQuery.SingleTerm; // Phrase term with no expansion.\nClass PhraseWildcardQuery.TermBytesTermState; // Holds a pair of term bytes - term state.\nClass PhraseWildcardQuery.TermData; // Holds the TermState for all the collected Term, for a specific phrase term, for all segments.\nClass PhraseWildcardQuery.TermsData; // Holds the TermState and TermStatistics for all the matched and collected Term, for all phrase terms, for all segments.\nClass PhraseWildcardQuery.TermStats; // Accumulates the doc freq and total term freq.\nClass PhraseWildcardQuery.TestCounters; // Test counters incremented when assertions are enabled.\nClass ProfilerCollector; // This class wraps a Collector and times the execution of: - setScorer() - collect() - doSetNextReader() - needsScores()\nClass ProfilerCollectorResult; // Public class for profiled timings of the Collectors used in the search.\n", "des": "This package contains a flexible graph-based proximity query, TermAutomatonQuery, and geospatial queries."}
{"index": 2228, "repo": "spring-data-commons-3.1.2", "code": "package support;\n\npublic class ExampleMatcherAccessor extends Object; // Accessor for the ExampleMatcher to use in modules that support query by example (QBE) querying.\npublic interface IsNewStrategy; // Strategy interface to determine whether a given entity is to be considered new.\npublic abstract class PageableExecutionUtils extends Object; // Support for query execution using Pageable.\npublic enum PersistableIsNewStrategy extends Enum<PersistableIsNewStrategy> implements IsNewStrategy; // IsNewStrategy that invokes Persistable.isNew() on the given object.\npublic class WindowIterator<T> extends Object implements Iterator<T>; // An Iterator over multiple Windows obtained via a window function, that keeps track of the current ScrollPosition allowing scrolling across all result elements.\npublic static class WindowIterator.WindowIteratorBuilder<T> extends Object; // Builder API to construct a WindowIterator.\n", "des": "Core support classes."}
{"index": 1406, "repo": "spring-boot-actuator-3.1.1", "code": "package ldap;\n\npublic class LdapHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for configured LDAP server(s).\n", "des": "Actuator support for LDAP."}
{"index": 2568, "repo": "pulsar-common-3.0.0", "code": "package stats;\n\npublic class JvmDefaultGCMetricsLogger extends Object implements JvmGCMetricsLogger;\npublic class JvmG1GCMetricsLogger extends Object implements JvmGCMetricsLogger; // Logger for the JVM G1 GC metrics.\npublic interface JvmGCMetricsLogger; // JvmGCMetricsLogger can be implemented for each specific GC type which retrieves GC count and pause time and logs it into metrics.\npublic class JvmMetrics extends Object; // This class is responsible for providing JVM metrics.\npublic abstract class MetricsMixIn extends Object;\npublic class Rate extends Object;\n", "des": "Definition of classes responsible for statistics."}
{"index": 866, "repo": "calcite-core-1.34.0", "code": "package util;\n\nInterface SqlBasicVisitor.ArgHandler<R>; // Argument handler.\nInterface SqlVisitor<R>; // Visitor class, follows the visitor pattern.\nClass ChainedSqlOperatorTable; // ChainedSqlOperatorTable implements the SqlOperatorTable interface by chaining together any number of underlying operator table instances.\nClass IdPair<L,R>; // Similar to Pair but identity is based on identity of values.\nClass ListSqlOperatorTable; // Implementation of the SqlOperatorTable interface by using a list of operators.\nClass ReflectiveSqlOperatorTable; // ReflectiveSqlOperatorTable implements the SqlOperatorTable interface by reflecting the public fields of a subclass.\nClass SqlBasicVisitor<R>; // Basic implementation of SqlVisitor which does nothing at each node.\nClass SqlBasicVisitor.ArgHandlerImpl<R>; // Default implementation of SqlBasicVisitor.ArgHandler which merely calls SqlNode.accept(org.apache.calcite.sql.util.SqlVisitor<R>) on each operand.\nClass SqlBuilder; // Extension to StringBuilder for the purposes of creating SQL queries and expressions.\nClass SqlOperatorTables; // Utilities for SqlOperatorTables.\nClass SqlShuttle; // Basic implementation of SqlVisitor which returns each leaf node unchanged.\nClass SqlString; // String that represents a kocher SQL statement, expression, or fragment.\n", "des": "Utility classes for the SQL object model, parsing, and validation."}
{"index": 3526, "repo": "opennlp-tools-2.2.0", "code": "package ontonotes;\n\nInterface OntoNotesFormatParameters;\nClass DocumentToLineStream; // Reads a plain text file and return each line as a String object.\nClass OntoNotesNameSampleStream; // Name Sample Stream parser for the OntoNotes 4.0 corpus.\nClass OntoNotesNameSampleStreamFactory;\nClass OntoNotesParseSampleStream;\nClass OntoNotesParseSampleStreamFactory;\nClass OntoNotesPOSSampleStreamFactory;\n", "des": "Experimental package related to the OntoNotes 4.0 format."}
{"index": 2878, "repo": "spring-integration-core-6.1.2", "code": "package scattergather;\n\npublic class ScatterGatherHandler extends AbstractReplyProducingMessageHandler implements ManageableLifecycle; // The MessageHandler implementation for the Scatter-Gather EIP pattern.\n", "des": "Provides classes supporting the Scatter-Gather pattern."}
{"index": 3261, "repo": "opencms-core-15.0", "code": "package hsqldb;\n\nClass CmsHistoryDriver; // HSQLDB implementation of the history driver methods.\nClass CmsProjectDriver; // HSQLDB implementation of the project driver methods.\nClass CmsSqlManager; // HSQLDB implementation of the SQL Manager.\nClass CmsSubscriptionDriver; // HSQLDB implementation of the subscription driver.\nClass CmsUserDriver; // HSQLDB implementation of the user driver methods.\nClass CmsVfsDriver; // HSQLDB implementation of the VFS driver methods.\n", "des": "HSQLDB implementation of the OpenCms database connector."}
{"index": 709, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package jms;\n\nClass Jms; // Factory class for JMS components.\nClass JmsDefaultListenerContainerSpec; // A DefaultMessageListenerContainer specific JmsListenerContainerSpec extension.\nClass JmsDestinationAccessorSpec<S extends JmsDestinationAccessorSpec<S,A>,A extends org.springframework.jms.support.destination.JmsDestinationAccessor>; // A base IntegrationComponentSpec for JmsDestinationAccessors.\nClass JmsInboundChannelAdapterSpec<S extends JmsInboundChannelAdapterSpec<S>>; // A MessageSourceSpec for a JmsDestinationPollingSource.\nClass JmsInboundChannelAdapterSpec.JmsInboundChannelSpecTemplateAware; // A JmsTemplate-based JmsInboundChannelAdapterSpec extension.\nClass JmsInboundGateway;\nClass JmsInboundGatewaySpec<S extends JmsInboundGatewaySpec<S>>; // A MessagingGatewaySpec for a JmsInboundGateway.\nClass JmsInboundGatewaySpec.JmsInboundGatewayListenerContainerSpec<S extends JmsListenerContainerSpec<S,C>,C extends org.springframework.jms.listener.AbstractMessageListenerContainer>; // An AbstractMessageListenerContainer-based JmsInboundGatewaySpec extension.\nClass JmsListenerContainerSpec<S extends JmsListenerContainerSpec<S,C>,C extends org.springframework.jms.listener.AbstractMessageListenerContainer>; // A JmsDestinationAccessorSpec for JmsListenerContainerSpecs.\nClass JmsMessageChannelSpec<S extends JmsMessageChannelSpec<S>>; // A JmsMessageChannelSpec for subscribable AbstractJmsChannels.\nClass JmsMessageDrivenChannelAdapter;\nClass JmsMessageDrivenChannelAdapterSpec<S extends JmsMessageDrivenChannelAdapterSpec<S>>; // A MessageProducerSpec for JmsMessageDrivenChannelAdapters.\nClass JmsMessageDrivenChannelAdapterSpec.JmsMessageDrivenChannelAdapterListenerContainerSpec<S extends JmsListenerContainerSpec<S,C>,C extends org.springframework.jms.listener.AbstractMessageListenerContainer>;\nClass JmsOutboundChannelAdapterSpec<S extends JmsOutboundChannelAdapterSpec<S>>; // A MessageHandlerSpec for a JmsSendingMessageHandler.\nClass JmsOutboundChannelAdapterSpec.JmsOutboundChannelSpecTemplateAware; // A JmsTemplate-based JmsOutboundChannelAdapterSpec extension.\nClass JmsOutboundGatewaySpec; // A MessageHandlerSpec for a JmsOutboundGateway.\n", "des": "Provides JMS Components support for Spring Integration Java DSL."}
{"index": 1934, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package h2;\n\n@AutoConfiguration(after=DataSourceAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.h2.server.web.JakartaWebServlet.class) @ConditionalOnProperty(prefix=\"spring.h2.console\", name=\"enabled\", havingValue=\"true\") @EnableConfigurationProperties(H2ConsoleProperties.class) public class H2ConsoleAutoConfiguration extends Object; // Auto-configuration for H2's web console.\n@ConfigurationProperties(prefix=\"spring.h2.console\") public class H2ConsoleProperties extends Object; // Configuration properties for H2's console.\npublic static class H2ConsoleProperties.Settings extends Object;\n", "des": "Auto-configuration for H2's Console."}
{"index": 2052, "repo": "spring-ws-security-4.0.5", "code": "package security;\n\npackage security.callback; // Contains generic CallbackHandler implementations.\npackage security.support; // Contains support classes for handling WS-Security messages.\npackage security.wss4j2; // Contains classes for using the Apache WSS4J 2.0 WS-Security implementation within Spring-WS.\npublic abstract class AbstractWsSecurityInterceptor extends Object implements org.springframework.ws.soap.server.SoapEndpointInterceptor, org.springframework.ws.client.support.interceptor.ClientInterceptor; // Interceptor base class for interceptors that handle WS-Security.\npublic abstract class WsSecurityException extends org.springframework.ws.WebServiceException; // Exception indicating that something went wrong during WS-Security executions.\npublic abstract class WsSecurityFaultException extends WsSecurityException; // Exception indicating that a WS-Security executions should result in a SOAP Fault.\npublic abstract class WsSecuritySecurementException extends WsSecurityException; // Exception indicating that something went wrong during the securement of a message.\npublic abstract class WsSecurityValidationException extends WsSecurityException; // Exception indicating that something went wrong during the validation of a message.\n", "des": "Provides WS-Security implementation classes."}
{"index": 817, "repo": "lucene-analyzers-common-8.11.2", "code": "package tokenattributes;\n\nClass CollatedTermAttributeImpl; // Extension of CharTermAttributeImpl that encodes the term text as a binary Unicode collation key instead of as UTF-8 bytes.\n", "des": "Custom AttributeImpl for indexing collation keys as index terms."}
{"index": 1556, "repo": "spring-context-6.0.11", "code": "package beanvalidation;\n\npublic class BeanValidationPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.beans.factory.InitializingBean; // Simple BeanPostProcessor that checks JSR-303 constraint annotations in Spring-managed beans, throwing an initialization exception in case of constraint violations right before calling the bean's init method (if any).\npublic class CustomValidatorBean extends SpringValidatorAdapter implements Validator, org.springframework.beans.factory.InitializingBean; // Configurable bean class that exposes a specific JSR-303 Validator through its original interface as well as through the Spring Validator interface.\npublic class LocaleContextMessageInterpolator extends Object implements MessageInterpolator; // Delegates to a target MessageInterpolator implementation but enforces Spring's managed Locale.\npublic class LocalValidatorFactoryBean extends SpringValidatorAdapter implements ValidatorFactory, ApplicationContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // This is the central class for jakarta.validation (JSR-303) setup in a Spring application context: It bootstraps a jakarta.validation.ValidationFactory and exposes it through the Spring Validator interface as well as through the JSR-303 Validator interface and the ValidatorFactory interface itself.\npublic class MessageSourceResourceBundleLocator extends Object implements org.hibernate.validator.spi.resourceloading.ResourceBundleLocator; // Implementation of Hibernate Validator 4.3/5.x's ResourceBundleLocator interface, exposing a Spring MessageSource as localized MessageSourceResourceBundle.\npublic class MethodValidationInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor; // An AOP Alliance MethodInterceptor implementation that delegates to a JSR-303 provider for performing method-level validation on annotated methods.\npublic class MethodValidationPostProcessor extends org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor implements org.springframework.beans.factory.InitializingBean; // A convenient BeanPostProcessor implementation that delegates to a JSR-303 provider for performing method-level validation on annotated methods.\n", "des": "Support classes for integrating a JSR-303 Bean Validation provider (such as Hibernate Validator) into a Spring ApplicationContext and in particular with Spring's data binding and validation APIs."}
{"index": 1454, "repo": "spring-data-redis-3.1.2", "code": "package mapping;\n\npublic class BasicRedisPersistentEntity<T> extends org.springframework.data.keyvalue.core.mapping.BasicKeyValuePersistentEntity<T,RedisPersistentProperty> implements RedisPersistentEntity<T>; // RedisPersistentEntity implementation.\npublic class RedisMappingContext extends org.springframework.data.keyvalue.core.mapping.context.KeyValueMappingContext<RedisPersistentEntity<?>,RedisPersistentProperty>; // Redis specific MappingContext.\npublic interface RedisPersistentEntity<T> extends org.springframework.data.keyvalue.core.mapping.KeyValuePersistentEntity<T,RedisPersistentProperty>; // Redis specific PersistentEntity.\npublic class RedisPersistentProperty extends org.springframework.data.keyvalue.core.mapping.KeyValuePersistentProperty<RedisPersistentProperty>; // Redis specific PersistentProperty implementation.\n", "des": "Redis specific repository support mapping meta information."}
{"index": 1897, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package admin;\n\n@AutoConfiguration(after=JmxAutoConfiguration.class) @ConditionalOnProperty(prefix=\"spring.application.admin\", value=\"enabled\", havingValue=\"true\", matchIfMissing=false) public class SpringApplicationAdminJmxAutoConfiguration extends Object; // Register a JMX component that allows to administer the current application.\n", "des": "Auto-configuration for admin-related features."}
{"index": 550, "repo": "hadoop-common-3.3.4", "code": "package conf;\n\nInterface Configurable; // Something that may be configured with a Configuration.\nInterface Reconfigurable; // Something whose Configuration can be changed at run time.\nClass ConfigRedactor; // Tool for redacting sensitive information when displaying config parameters.\nClass Configuration; // Provides access to configuration parameters.\nClass Configuration.DeprecationDelta; // A pending addition to the global set of deprecated keys.\nClass Configuration.IntegerRanges; // A class that represents a set of positive integer ranges.\nClass Configured; // Base class for things that may be configured with a Configuration.\nClass ReconfigurableBase; // Utility base class for implementing the Reconfigurable interface.\nClass ReconfigurationServlet; // A servlet for changing a node's configuration.\nClass ReconfigurationUtil;\nClass ReconfigurationUtil.PropertyChange;\nClass StorageSize; // A class that contains the numeric value and the unit of measure.\nEnum StorageUnit; // Class that maintains different forms of Storage Units.\nClass ConfServlet.BadFormatException;\nClass ReconfigurationException; // Exception indicating that configuration property cannot be changed at run time.\n", "des": "Configuration of system parameters."}
{"index": 3898, "repo": "solr-solrj-9.3.0", "code": "package common;\n\npackage common.annotation; // Annotations mapping to Jackson\npackage common.cloud; // Common Solr Cloud and ZooKeeper related classes reused on both clients & server.\npackage common.luke; // Common constants used by the LukeRequestHandler.\npackage common.params; // Parameter constants and enumerations.\npackage common.util; // Common utility classes reused on both clients & server.\nInterface Callable<T>;\nInterface ConfigNode; // A generic interface that represents a config file, mostly XML Please note that this is an immutable, read-only object.\nInterface IteratorWriter; // Interface to help do push writing to an array\nInterface IteratorWriter.ItemWriter;\nInterface MapSerializable; // This is to facilitate just in time creation of objects before writing it to the response.\nInterface MapWriter; // Use this class to push all entries of a Map into an output.\nInterface MapWriter.EntryWriter; // An interface to push one entry at a time to the output.\nInterface NavigableObject; // This class contains helper methods for navigating deeply nested Objects.\nInterface PushWriter; // This is an interface to stream data out using a push API\nInterface SolrCloseable; // A Closeable that also allows checking whether it's been closed.\nInterface SpecProvider; // A generic interface for any class that is capable of providing its specification as a json schema\nClass ConditionalKeyMapWriter;\nClass ConditionalKeyMapWriter.EntryWriterWrapper;\nClass ConditionalMapWriter;\nClass ConditionalMapWriter.EntryWriterWrapper;\nClass ConfigNode.Helpers;\nClass EmptyEntityResolver; // This class provides several singletons of entity resolvers used by SAX and StAX in the Java API.\nClass EnumFieldValue; // Represents a Enum field value, which includes integer value (indicating the sort order) and string (displayed) value.\nClass LinkedHashMapWriter<V>;\nClass MapWriterMap;\nClass SolrCloseableLatch; // This class mimicks the operation of CountDownLatch, but it also periodically checks the state of the provided SolrCloseable and terminates the wait if it's closed by throwing an InterruptedException.\nClass SolrDocument; // A concrete representation of a document within a Solr index.\nClass SolrDocumentBase<T,​K>;\nClass SolrDocumentList; // Represent a list of SolrDocuments returned from a search.\n", "des": "Common classes reused on both clients & server for dealing with documents to be indexed and result documents."}
{"index": 2831, "repo": "spring-data-r2dbc-3.1.2", "code": "package dialect;\n\npublic final class BindTargetBinder extends Object; // Utility to bind Parameter to a BindTarget.\npublic class DialectResolver extends Object; // Resolves a R2dbcDialect from a ConnectionFactory using DialectResolver.R2dbcDialectProvider.\npublic static class DialectResolver.NoDialectException extends NonTransientDataAccessException; // Exception thrown when DialectResolver cannot resolve a R2dbcDialect.\npublic static interface DialectResolver.R2dbcDialectProvider; // SPI to extend Spring's default R2DBC Dialect discovery mechanism.\npublic class H2Dialect extends H2Dialect implements R2dbcDialect; // R2DBC dialect for H2.\npublic class MySqlDialect extends MySqlDialect implements R2dbcDialect; // An SQL dialect for MySQL.\n@WritingConverter public static enum MySqlDialect.BooleanToByteConverter extends Enum<MySqlDialect.BooleanToByteConverter> implements Converter<Boolean,Byte>; // Simple singleton to convert Booleans to their Byte representation.\n@ReadingConverter public static enum MySqlDialect.ByteToBooleanConverter extends Enum<MySqlDialect.ByteToBooleanConverter> implements Converter<Byte,Boolean>; // Simple singleton to convert Bytes to their Boolean representation.\npublic class OracleDialect extends OracleDialect implements R2dbcDialect; // An SQL dialect for Oracle.\npublic class PostgresDialect extends PostgresDialect implements R2dbcDialect; // An SQL dialect for Postgres.\npublic interface R2dbcDialect extends Dialect; // R2DBC-specific extension to Dialect.\npublic class SqlServerDialect extends SqlServerDialect implements R2dbcDialect; // An SQL dialect for Microsoft SQL Server.\n", "des": "Dialects abstract the SQL dialect of the underlying database."}
{"index": 10, "repo": "connect-api-3.5.0", "code": "package storage;\n\nInterface Converter; // The Converter interface provides support for translating between Kafka Connect's runtime data format and byte[].\nInterface HeaderConverter; // The HeaderConverter interface provides support for translating between Kafka Connect's runtime data format and byte[].\nInterface OffsetStorageReader; // OffsetStorageReader provides access to the offset storage used by sources.\nClass ConverterConfig; // Abstract class that defines the configuration options for Converter and HeaderConverter instances.\nClass SimpleHeaderConverter; // A HeaderConverter that serializes header values as strings and that deserializes header values to the most appropriate numeric, boolean, array, or map representation.\nClass StringConverter; // Converter and HeaderConverter implementation that only supports serializing to strings.\nClass StringConverterConfig; // Configuration options for StringConverter instances.\nEnum ConverterType; // The type of Converter and HeaderConverter.\n", "des": "Provides pluggable interfaces and some implementations for (de)serializing data to and from Kafka"}
{"index": 2225, "repo": "spring-data-commons-3.1.2", "code": "package support;\n\npublic class DefaultRepositoryInvokerFactory extends Object implements RepositoryInvokerFactory; // Default implementation of RepositoryInvokerFactory to inspect the requested repository type and create a matching RepositoryInvoker that suits the repository best.\npublic class DomainClassConverter<T extends ConversionService & ConverterRegistry> extends Object implements ConditionalGenericConverter, ApplicationContextAware; // Converter to convert arbitrary input into domain classes managed by Spring Data CrudRepositorys.\npublic class QueryMethodParameterConversionException extends RuntimeException; // Exception to represent a failed attempt to convert a source value into a query method parameter.\npublic class Repositories extends Object implements Iterable<Class<?>>; // Wrapper class to access repository instances obtained from a ListableBeanFactory.\npublic interface RepositoryInvocationInformation; // Meta-information about the methods a repository exposes.\npublic interface RepositoryInvoker extends RepositoryInvocationInformation; // API to invoke (CRUD) methods on Spring Data repository instances independently of the base interface they expose.\npublic interface RepositoryInvokerFactory; // Interface for a factory to create RepositoryInvoker instances for repositories managing a particular domain type.\n", "des": "Support classes for integration of the repository programming model with 3rd party frameworks."}
{"index": 2412, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package amqp;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration.class) @ConditionalOnClass(org.springframework.amqp.rabbit.core.RabbitTemplate.class) @ConditionalOnBean(org.springframework.amqp.rabbit.core.RabbitTemplate.class) @ConditionalOnEnabledHealthIndicator(\"rabbit\") public class RabbitHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.amqp.RabbitHealthIndicator,org.springframework.amqp.rabbit.core.RabbitTemplate>; // Auto-configuration for RabbitHealthIndicator.\n", "des": "Auto-configuration for actuator AMQP concerns."}
{"index": 3352, "repo": "opencms-core-15.0", "code": "package messagebundle;\n\nClass CmsMessageBundleEditor; // Controller for the VAADIN UI of the Message Bundle Editor.\nClass CmsMessageBundleEditorModel; // The class contains the logic behind the message translation editor.\nClass CmsMessageBundleEditorModel.CmsCaseInsensitiveStringComparator; // Comparator that compares strings case insensitive.\nClass CmsMessageBundleEditorModel.ConfigurableMessages; // Wrapper for the configurable messages for the column headers of the message bundle editor.\nClass CmsMessageBundleEditorModel.SortedProperties; // Extension of Properties to allow saving with keys alphabetically ordered and without time stamp as first comment.\nClass CmsMessageBundleEditorOptions; // View of the message bundle editor options, i.e., language/mode switcher, file name display and \"Add key\" option.\nClass CmsMessageBundleEditorTypes; // Types and helper classes used by the message bundle editor.\nClass CmsMessageBundleEditorTypes.Descriptor; // Helper for accessing Bundle descriptor XML contents.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsMessageBundleEditorTypes.BundleType; // Types of bundles editable by the Editor.\nEnum CmsMessageBundleEditorTypes.TableProperty; // The propertyIds of the table columns.\n", "des": "The data bindings and logic for the translator editor."}
{"index": 3118, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package support;\n\nInterface AbstractDomainDataRegion.Destructible; // Optional interface caching implementors can implement in their CachedDomainDataAccess impls to automatically have them destroyed when this region is destroyed\nInterface AbstractReadWriteAccess.Lockable; // Interface type implemented by all wrapper objects in the cache.\nInterface DomainDataStorageAccess; // Specialization of StorageAccess for domain data regions\nInterface StorageAccess; // A general read/write abstraction over the specific \"cache\" object from the caching provider.\nClass AbstractCachedDomainDataAccess;\nClass AbstractCollectionDataAccess;\nClass AbstractDomainDataRegion;\nClass AbstractEntityDataAccess;\nClass AbstractNaturalIdDataAccess;\nClass AbstractReadWriteAccess;\nClass AbstractReadWriteAccess.Item; // Wrapper type representing unlocked items.\nClass AbstractReadWriteAccess.SoftLockImpl; // Wrapper type representing locked items.\nClass AbstractRegion;\nClass CacheUtils;\nClass CollectionNonStrictReadWriteAccess; // Standard support for CollectionDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\nClass CollectionReadOnlyAccess; // Standard support for CollectionDataAccess using the AccessType.READ_ONLY access type.\nClass CollectionReadWriteAccess; // Standard support for CollectionDataAccess using the AccessType.READ_WRITE access type.\nClass CollectionTransactionAccess;\nClass DirectAccessRegionTemplate; // Bridge between DirectAccessRegion and StorageAccess\nClass DomainDataRegionImpl;\nClass DomainDataRegionTemplate; // Abstract implementation of DomainDataRegion based on implementations just needing to provide a DomainDataStorageAccess reference for basic caching support - DomainDataStorageAccess acts as a simple wrapper around some generalized cache actions such as put or get.\nClass EntityNonStrictReadWriteAccess; // Standard support for EntityDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\nClass EntityReadOnlyAccess; // Standard support for EntityDataAccess using the AccessType.READ_ONLY access type.\nClass EntityReadWriteAccess; // Standard support for EntityDataAccess using the AccessType.READ_WRITE access type.\nClass EntityTransactionalAccess;\nClass NaturalIdNonStrictReadWriteAccess; // Standard support for NaturalIdDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\nClass NaturalIdReadOnlyAccess; // Standard support for NaturalIdDataAccess using the AccessType.READ_ONLY access type.\n", "des": "Package intended for simplifying the worked needed to implement a caching provider."}
{"index": 2745, "repo": "spring-batch-infrastructure-5.0.2", "code": "package callback;\n\npublic class NestedRepeatCallback extends Object implements RepeatCallback; // Callback that delegates to another callback, via a RepeatOperations instance.\n", "des": "Infrastructure implementations of repeat callback concerns."}
{"index": 2394, "repo": "spring-batch-core-5.0.2", "code": "package support;\n\npublic class CommandLineJobRunner extends Object; // Basic launcher for starting jobs from the command line.\npublic class DataFieldMaxValueJobParametersIncrementer extends Object implements JobParametersIncrementer; // This incrementer uses a DataFieldMaxValueIncrementer to generate the sequence of values to use as job instance discriminator.\npublic interface ExitCodeMapper; // This interface should be implemented when an environment calling the batch framework has specific requirements regarding the operating system process return status.\npublic class JobOperatorFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobOperator>, org.springframework.beans.factory.InitializingBean; // Convenient factory bean that creates a transactional proxy around a JobOperator.\n@Deprecated(since=\"5.0\", forRemoval=true) public class JobRegistryBackgroundJobRunner extends Object;\npublic class JvmSystemExiter extends Object implements SystemExiter; // Implementation of the SystemExiter interface that calls the standards System.exit method.\npublic class RunIdIncrementer extends Object implements JobParametersIncrementer; // This incrementer increments a \"run.id\" parameter of type Long from the given job parameters.\npublic class RuntimeExceptionTranslator extends Object implements org.aopalliance.intercept.MethodInterceptor;\n@Deprecated(since=\"5.0.0\", forRemoval=true) public class SimpleJobLauncher extends Object implements JobLauncher, org.springframework.beans.factory.InitializingBean;\npublic class SimpleJobOperator extends Object implements JobOperator, org.springframework.beans.factory.InitializingBean; // Simple implementation of the JobOperator interface.\npublic class SimpleJvmExitCodeMapper extends Object implements ExitCodeMapper; // An implementation of ExitCodeMapper that can be configured through a map from batch exit codes (String) to integer results.\npublic interface SystemExiter; // Interface for exiting the JVM.\npublic class TaskExecutorJobLauncher extends SimpleJobLauncher; // Implementation of the JobLauncher interface based on a TaskExecutor.\n", "des": "Support classes for use in bootstrap and launch implementations or configurations."}
{"index": 386, "repo": "commons-dbcp2-2.9.0", "code": "package dbcp2;\n\npackage dbcp2.cpdsadapter; // This package contains one public class which is a ConnectionPoolDataSource (CPDS) implementation that can be used to adapt older Driver based JDBC implementations.\npackage dbcp2.datasources; // This package contains two DataSources: PerUserPoolDataSource and SharedPoolDataSource which provide a database connection pool.\npackage dbcp2.managed; // This package provides support for pooling of ManagedConnections.\nInterface BasicDataSourceMXBean; // Interface to keep API compatibility.\nInterface ConnectionFactory; // Abstract factory interface for creating Connections.\nInterface DataSourceMXBean; // Defines the methods that will be made available via JMX.\nInterface PoolableConnectionMXBean; // Defines the attributes and methods that will be exposed via JMX for PoolableConnection instances.\nClass AbandonedTrace; // Tracks connection usage for recovering and reporting abandoned connections.\nClass BasicDataSource; // Basic implementation of javax.sql.DataSource that is configured via JavaBeans properties.\nClass BasicDataSourceFactory; // JNDI object factory that creates an instance of BasicDataSource that has been configured based on the RefAddr values of the specified Reference, which must match the names and data types of the BasicDataSource bean properties with the following exceptions:\nClass Constants; // Constants.\nClass DataSourceConnectionFactory; // A DataSource-based implementation of ConnectionFactory.\nClass DelegatingCallableStatement; // A base delegating implementation of CallableStatement.\nClass DelegatingConnection<C extends Connection>; // A base delegating implementation of Connection.\nClass DelegatingDatabaseMetaData; // A base delegating implementation of DatabaseMetaData.\nClass DelegatingPreparedStatement; // A base delegating implementation of PreparedStatement.\nClass DelegatingResultSet; // A base delegating implementation of ResultSet.\nClass DelegatingStatement; // A base delegating implementation of Statement.\nClass DriverConnectionFactory; // A Driver-based implementation of ConnectionFactory.\nClass DriverManagerConnectionFactory; // A DriverManager-based implementation of ConnectionFactory.\nClass Jdbc41Bridge; // Defines bridge methods to JDBC 4.1 (Java 7) methods to allow call sites to operate safely (without AbstractMethodError) when using a JDBC driver written for JDBC 4.0 (Java 6).\nClass PoolableCallableStatement; // A DelegatingCallableStatement that cooperates with PoolingConnection to implement a pool of CallableStatements.\n", "des": "Database Connection Pool API."}
{"index": 1579, "repo": "spring-security-oauth2-client-6.1.2", "code": "package endpoint;\n\npublic abstract class AbstractOAuth2AuthorizationGrantRequest extends Object; // Base implementation of an OAuth 2.0 Authorization Grant request that holds an authorization grant credential and is used when initiating a request to the Authorization Server's Token Endpoint.\npublic abstract class AbstractWebClientReactiveOAuth2AccessTokenResponseClient<T extends AbstractOAuth2AuthorizationGrantRequest> extends Object implements ReactiveOAuth2AccessTokenResponseClient<T>; // Abstract base class for all of the WebClientReactive*TokenResponseClients that communicate to the Authorization Server's Token Endpoint.\npublic final class DefaultAuthorizationCodeTokenResponseClient extends Object implements OAuth2AccessTokenResponseClient<OAuth2AuthorizationCodeGrantRequest>; // The default implementation of an OAuth2AccessTokenResponseClient for the authorization_code grant.\npublic final class DefaultClientCredentialsTokenResponseClient extends Object implements OAuth2AccessTokenResponseClient<OAuth2ClientCredentialsGrantRequest>; // The default implementation of an OAuth2AccessTokenResponseClient for the client_credentials grant.\npublic final class DefaultJwtBearerTokenResponseClient extends Object implements OAuth2AccessTokenResponseClient<JwtBearerGrantRequest>; // The default implementation of an OAuth2AccessTokenResponseClient for the jwt-bearer grant.\n@Deprecated public final class DefaultPasswordTokenResponseClient extends Object implements OAuth2AccessTokenResponseClient<OAuth2PasswordGrantRequest>;\npublic final class DefaultRefreshTokenTokenResponseClient extends Object implements OAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>; // The default implementation of an OAuth2AccessTokenResponseClient for the refresh_token grant.\npublic class JwtBearerGrantRequest extends AbstractOAuth2AuthorizationGrantRequest; // A JWT Bearer Grant request that holds a Jwt assertion.\npublic class JwtBearerGrantRequestEntityConverter extends Object; // An implementation of an AbstractOAuth2AuthorizationGrantRequestEntityConverter that converts the provided JwtBearerGrantRequest to a RequestEntity representation of an OAuth 2.0 Access Token Request for the JWT Bearer Grant.\npublic final class NimbusJwtClientAuthenticationParametersConverter<T extends AbstractOAuth2AuthorizationGrantRequest> extends Object implements org.springframework.core.convert.converter.Converter<T,org.springframework.util.MultiValueMap<String,String>>; // A Converter that customizes the OAuth 2.0 Access Token Request parameters by adding a signed JSON Web Token (JWS) to be used for client authentication at the Authorization Server's Token Endpoint.\n", "des": "Classes and interfaces providing support to the client for initiating requests to the Authorization Server's Protocol Endpoints."}
{"index": 730, "repo": "mina-core-3.0.0-M2", "code": "package udp;\n\nInterface UdpSessionConfig; // A IoSessionConfig for UDP based sessions.\nClass AbstractUdpClient; // Base class for UDP based Clients\nClass AbstractUdpServer; // Base implementation for all the UDP servers.\nClass DefaultUdpSessionConfig; // Implementation for the UDP session configuration.\n", "des": "Shared plumber UDP transport implementations."}
{"index": 725, "repo": "mina-core-3.0.0-M2", "code": "package api;\n\nInterface IoClient; // Connects to several end-points, communicates with the server, and fires events to org.apache.mina.service.IoHandlers.\nInterface IoFilter; // Filter are interceptors/processors for incoming data received/sent.\nInterface IoFuture<V>; // A simple extension that allows listeners to register and receive results asynchronously via registered listeners.\nInterface IoFutureListener<V>; // A listener that asynchronously receives the result of a future computation.\nInterface IoHandler; // Handle all the I/O events generated by a IoService.\nInterface IoServer; // A network server bound to a local address.\nInterface IoService; // Base interface for all IoServers and IoClients that provide I/O service and manage IoSession s.\nInterface IoSession; // A handle which represents a connection between two end-points regardless of transport types.\nInterface IoSessionConfig; // The configuration of IoSession.\nClass AbstractIoFilter; // A convenient IoFilter implementation to be sub-classed for easier IoFilter implementation.\nClass AbstractIoFutureListener<V>; // Convenient base implementation for IoFutureListener. if something wrong happen the exception is rethrown, which will produce an exception caught event for the session\nClass AbstractIoHandler; // A convenient IoHandler implementation to be sub-classed for easier IoHandler implementation.\nEnum IdleStatus; // Represents the type of idleness of IoSession.\nEnum IoSession.SessionState; // State of a IoSession\nClass ConfigurationException; // A RuntimeException thrown when something wrong happened during IoService or IoSession configuration.\nClass MinaRuntimeException; // Something very wrong happened in the low level part of I/O processing.\n", "des": "Base API for the MINA library."}
{"index": 2946, "repo": "spring-security-config-6.1.2", "code": "package ldap;\n\npublic abstract class AbstractLdapAuthenticationManagerFactory<T extends org.springframework.security.ldap.authentication.AbstractLdapAuthenticator> extends Object; // Creates an AuthenticationManager that can perform LDAP authentication.\npublic class ContextSourceSettingPostProcessor extends Object implements org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.core.Ordered; // Checks for the presence of a ContextSource instance.\npublic class EmbeddedLdapServerContextSourceFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.ldap.DefaultSpringSecurityContextSource>, org.springframework.beans.factory.DisposableBean, org.springframework.context.ApplicationContextAware; // Creates a DefaultSpringSecurityContextSource used to perform LDAP authentication and starts and in-memory LDAP server.\npublic class LdapBindAuthenticationManagerFactory extends AbstractLdapAuthenticationManagerFactory<org.springframework.security.ldap.authentication.BindAuthenticator>; // Creates an AuthenticationManager that can perform LDAP authentication using bind authentication.\npublic class LdapPasswordComparisonAuthenticationManagerFactory extends AbstractLdapAuthenticationManagerFactory<org.springframework.security.ldap.authentication.PasswordComparisonAuthenticator>; // Creates an AuthenticationManager that can perform LDAP authentication using password comparison.\npublic class LdapProviderBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Ldap authentication provider namespace configuration.\npublic class LdapServerBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\npublic class LdapUserServiceBeanDefinitionParser extends AbstractUserDetailsServiceBeanDefinitionParser;\n", "des": "Security namespace support for LDAP authentication."}
{"index": 994, "repo": "spring-ws-3.0.10.RELEASE", "code": "package creator;\n\nInterface WebServiceMessageCreator; // Defines the general contract for creating messages used in test scenarios.\nClass AbstractMessageCreator; // Abstract base class for the WebServiceMessageCreator interface.\nClass PayloadMessageCreator; // Implementation of WebServiceMessageCreator that creates a request based on a Source.\nClass SoapEnvelopeMessageCreator; // Implementation of WebServiceMessageCreator that creates a request based on a SOAP envelope Source.\n", "des": "Provides the generic WebServiceMessageCreator interface, and implementations."}
{"index": 3126, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface ConfigurationService; // Provides access to the initial user-provided configuration values.\nInterface ConfigurationService.Converter<T>; // Simple conversion contract for converting an untyped object to a specified type.\nClass StandardConverters; // Standard set of setting converters\n", "des": "SPI Package for the configuration service."}
{"index": 846, "repo": "calcite-core-1.34.0", "code": "package janino;\n\nInterface RelMetadataHandlerGeneratorUtil.HandlerNameAndGeneratedCode; // Contains Name and code that been generated for MetadataHandler.\nClass CacheUtil; // Functions used by generated code.\nClass DescriptiveCacheKey; // A key used in caching with descriptive to string.\nClass RelMetadataHandlerGeneratorUtil; // Generates the MetadataHandler code.\n", "des": "Code for generating metadata handlers."}
{"index": 43, "repo": "ignite-core-2.15.0", "code": "package messaging;\n\nClass MessagingListenActor<T>; // Convenience actor-base adapter for IgniteMessaging.localListen(Object, IgniteBiPredicate) method.\n", "des": "Contains Topic-based Messaging functionality."}
{"index": 1948, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package artemis;\n\n@AutoConfiguration(before=JmsAutoConfiguration.class, after=JndiConnectionFactoryAutoConfiguration.class) @ConditionalOnClass({jakarta.jms.ConnectionFactory.class,org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory.class}) @ConditionalOnMissingBean(jakarta.jms.ConnectionFactory.class) @EnableConfigurationProperties({ArtemisProperties.class,JmsProperties.class}) @Import({org.springframework.boot.autoconfigure.jms.artemis.ArtemisEmbeddedServerConfiguration.class,org.springframework.boot.autoconfigure.jms.artemis.ArtemisXAConnectionFactoryConfiguration.class,org.springframework.boot.autoconfigure.jms.artemis.ArtemisConnectionFactoryConfiguration.class}) public class ArtemisAutoConfiguration extends Object; // Auto-configuration to integrate with an Artemis broker.\n@FunctionalInterface public interface ArtemisConfigurationCustomizer; // Callback interface that can be implemented by beans wishing to customize the Artemis JMS server Configuration before it is used by an auto-configured EmbeddedActiveMQ instance.\npublic enum ArtemisMode extends Enum<ArtemisMode>; // Define the mode in which Artemis can operate.\npublic class ArtemisNoOpBindingRegistry extends Object implements org.apache.activemq.artemis.spi.core.naming.BindingRegistry; // A no-op implementation of the BindingRegistry.\n@ConfigurationProperties(prefix=\"spring.artemis\") public class ArtemisProperties extends Object; // Configuration properties for Artemis.\npublic static class ArtemisProperties.Embedded extends Object; // Configuration for an embedded Artemis server.\n", "des": "Auto-configuration for Artemis."}
{"index": 3464, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface AnyAttributeFetch; // Models the requested fetching of an \"any\" attribute.\nInterface AttributeFetch; // Models a Fetch that is specifically for an attribute.\nInterface BidirectionalEntityReference; // Represents the circular side of a bi-directional entity association.\nInterface CollectionAttributeFetch; // Models the requested fetching of a persistent collection attribute.\nInterface CollectionFetchableElement; // A collection element which is a FetchSource.\nInterface CollectionFetchableIndex; // A collection index which is a FetchSource.\nInterface CollectionQuerySpace; // Models a QuerySpace for a persistent collection.\nInterface CollectionReference; // Represents a reference to a persistent collection either as a Return or as a CollectionAttributeFetch.\nInterface CollectionReturn; // Models the a persistent collection as root Return.\nInterface CompositeAttributeFetch; // Models the requested fetching of a composite attribute.\nInterface CompositeFetch; // Models the requested fetching of a composition (component/embeddable), which may or may not be an attribute.\nInterface CompositeQuerySpace; // Models a QuerySpace for a composition (component/embeddable).\nInterface EntityFetch; // Models the requested fetching of an entity attribute.\nInterface EntityIdentifierDescription; // Descriptor for the identifier of an entity as a FetchSource (which allows for key-many-to-one handling).\nInterface EntityQuerySpace; // Models a QuerySpace specific to an entity (EntityPersister).\nInterface EntityReference; // Represents a reference to an entity either as a return, fetch, or collection element or index.\nInterface EntityReturn; // Models the an entity as root Return.\nInterface Fetch; // Contract for associations that are being fetched.\nInterface FetchSource; // Contract for a FetchSource (aka, the thing that owns the fetched attribute).\nInterface Join; // Represents a join in the QuerySpace-sense.\nInterface JoinDefinedByMetadata; // Specialization of a Join that is defined by the metadata.\nInterface LoadPlan; // Describes a plan for performing a load of results.\nInterface QuerySpace; // Defines a persister reference (either entity or collection) or a composite reference.\nInterface QuerySpaces; // Models a collection of QuerySpace references and exposes the ability to find a QuerySpace by its UID\nInterface Return; // Represents a return value in the query results.\n", "des": "Defines the SPI for the building blocks that make up a LoadPlan."}
{"index": 2304, "repo": "spring-boot-3.1.1", "code": "package convert;\n\npublic class ApplicationConversionService extends org.springframework.format.support.FormattingConversionService; // A specialization of FormattingConversionService configured by default with converters and formatters appropriate for most Spring Boot applications.\n@Target({FIELD,PARAMETER}) @Retention(RUNTIME) @Documented public @interface DataSizeUnit; // Annotation that can be used to change the default unit used when converting a DataSize.\n@Documented @Retention(RUNTIME) @Target({METHOD,FIELD,PARAMETER,ANNOTATION_TYPE}) public @interface Delimiter; // Declares a field or method parameter should be converted to collection using the specified delimiter.\n@Target({FIELD,PARAMETER}) @Retention(RUNTIME) @Documented public @interface DurationFormat; // Annotation that can be used to indicate the format to use when converting a Duration.\npublic enum DurationStyle extends Enum<DurationStyle>; // Duration format styles.\n@Target({FIELD,PARAMETER}) @Retention(RUNTIME) @Documented public @interface DurationUnit; // Annotation that can be used to change the default unit used when converting a Duration.\n@Target({FIELD,PARAMETER}) @Retention(RUNTIME) @Documented public @interface PeriodFormat; // Annotation that can be used to indicate the format to use when converting a Period.\npublic enum PeriodStyle extends Enum<PeriodStyle>; // A standard set of Period units.\n@Target({FIELD,PARAMETER}) @Retention(RUNTIME) @Documented public @interface PeriodUnit; // Annotation that can be used to change the default unit used when converting a Period.\n", "des": "Support for type conversion."}
{"index": 636, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package pb;\n\nClass AppCollectorDataPBImpl;\nClass ContainerQueuingLimitPBImpl; // Implementation of ContainerQueuingLimit interface.\nClass MasterKeyPBImpl;\nClass NodeHealthStatusPBImpl;\nClass NodeStatusPBImpl;\nClass OpportunisticContainersStatusPBImpl; // Protocol Buffer implementation of OpportunisticContainersStatus.\n", "des": "Server records PB implementations."}
{"index": 1528, "repo": "spring-context-6.0.11", "code": "package tomcat;\n\npublic class TomcatLoadTimeWeaver extends Object implements LoadTimeWeaver; // LoadTimeWeaver implementation for Tomcat's new org.apache.tomcat.InstrumentableClassLoader.\n", "des": "Support for class instrumentation on Tomcat."}
{"index": 61, "repo": "ignite-core-2.15.0", "code": "package stream;\n\npackage stream.socket; // Contains socket streamer implementation.\nInterface StreamMultipleTupleExtractor<T,K,V>; // Stream tuple extractor to convert a single message to zero, one or many tuples.\nInterface StreamReceiver<K,V>; // Updates cache with batch of entries.\nInterface StreamSingleTupleExtractor<T,K,V>; // Stream tuple extractor to convert a message to a single Ignite key-value tuple.\nInterface StreamTupleExtractor<T,K,V>; // Will be removed in 2.0.0.\nClass StreamAdapter<T,K,V>; // Convenience adapter for streamers.\nClass StreamTransformer<K,V>; // Convenience adapter to transform update existing values in streaming cache based on the previously cached value.\nClass StreamVisitor<K,V>; // Convenience adapter to visit every key-value tuple in the stream.\n", "des": "Contains Ignite Streamer classes."}
{"index": 76, "repo": "ignite-core-2.15.0", "code": "package priorityqueue;\n\nInterface PriorityQueueCollisionSpiMBean; // Management bean that provides access to the priority queue collision SPI configuration.\nClass PriorityQueueCollisionSpi; // This class provides implementation for Collision SPI based on priority queue.\n", "des": "Contains priority based collision SPI implementation."}
{"index": 1418, "repo": "spring-boot-actuator-3.1.1", "code": "package jdbc;\n\npublic class DataSourcePoolMetrics extends Object implements io.micrometer.core.instrument.binder.MeterBinder; // A MeterBinder for a DataSource.\n", "des": "Actuator support for JDBC metrics."}
{"index": 902, "repo": "commons-jcs3-core-3.1", "code": "package soft;\n\nClass SoftReferenceMemoryCache<K,V>; // A JCS IMemoryCache that has SoftReference to all its values.\n", "des": "A memory plugin implemented using soft references."}
{"index": 1103, "repo": "fontbox-3.0.0-beta1", "code": "package encoding;\n\nClass BuiltInEncoding; // A font's built-in encoding.\nClass Encoding; // A PostScript Encoding vector.\nClass MacRomanEncoding; // This is the MacRomanEncoding.\nClass StandardEncoding; // Adobe Standard Encoding\n", "des": "This package contains the implementations for all of the encodings that are used in PDF documents."}
{"index": 775, "repo": "lucene-analyzers-common-8.11.2", "code": "package et;\n\nClass EstonianAnalyzer; // Analyzer for Estonian.\n", "des": "Analyzer for Estonian."}
{"index": 2957, "repo": "spring-integration-xml-6.1.2", "code": "package xpath;\n\npublic enum XPathEvaluationType extends Enum<XPathEvaluationType>; // Enumeration of different types of XPath evaluation used to indicate the type of evaluation that should be carried out using a provided XPath expression.\npublic final class XPathUtils extends Object; // Utility class for 'xpath' support.\n", "des": "Provides XPath supporting classes."}
{"index": 285, "repo": "pdfbox-3.0.0-beta1", "code": "package function;\n\npackage function.type4; // This package contains Type 4 function support.\nClass PDFunction; // This class represents a function in a PDF document.\nClass PDFunctionType0; // This class represents a type 0 function in a PDF document.\nClass PDFunctionType2; // This class represents a Type 2 (exponential interpolation) function in a PDF document.\nClass PDFunctionType3; // This class represents a Type 3 (stitching) function in a PDF document.\nClass PDFunctionType4; // This class represents a Type 4 (PostScript calculator) function in a PDF document.\nClass PDFunctionTypeIdentity; // The identity function.\n", "des": "This package contains functions that are available in the PDF specification."}
{"index": 1506, "repo": "spring-context-6.0.11", "code": "package support;\n\npublic abstract class AbstractCacheManager extends Object implements CacheManager, org.springframework.beans.factory.InitializingBean; // Abstract base class implementing the common CacheManager methods.\npublic abstract class AbstractValueAdaptingCache extends Object implements Cache; // Common base class for Cache implementations that need to adapt null values (and potentially other such special values) before passing them on to the underlying store.\npublic class CompositeCacheManager extends Object implements CacheManager, org.springframework.beans.factory.InitializingBean; // Composite CacheManager implementation that iterates over a given collection of delegate CacheManager instances.\npublic class NoOpCache extends Object implements Cache; // A no operation Cache implementation suitable for disabling caching.\npublic class NoOpCacheManager extends Object implements CacheManager; // A basic, no operation CacheManager implementation suitable for disabling caching, typically used for backing cache declarations without an actual backing store.\npublic final class NullValue extends Object implements Serializable; // Simple serializable class that serves as a null replacement for cache stores which otherwise do not support null values.\npublic class SimpleCacheManager extends AbstractCacheManager; // Simple cache manager working against a given collection of caches.\npublic class SimpleValueWrapper extends Object implements Cache.ValueWrapper; // Straightforward implementation of Cache.ValueWrapper, simply holding the value as given at construction and returning it from SimpleValueWrapper.get().\n", "des": "Support classes for the org.springframework.cache package."}
{"index": 1221, "repo": "commons-text-1.10.0", "code": "package matcher;\n\nInterface StringMatcher; // Determines if a character array portion matches.\nClass StringMatcherFactory; // Provides access to matchers defined in this package.\n", "des": "Provides algorithms for matching up strings for use with a StringSubstitutor."}
{"index": 2826, "repo": "groovy-xml-4.0.13", "code": "package slurpersupport;\n\npublic class Attribute extends GPathResult; // Lazy evaluated representation of a node attribute.\npublic class Attributes extends NodeChildren; // Lazy evaluated representation of a node's attributes.\npublic class FilteredAttributes extends Attributes; // Lazy evaluated representation of a node's attributes filtered by a Closure.\npublic class FilteredNodeChildren extends NodeChildren; // Lazy evaluated representation of child nodes filtered by a Closure.\npublic abstract class GPathResult extends groovy.lang.GroovyObjectSupport implements groovy.lang.Writable, groovy.lang.Buildable, Iterable; // Base class for representing lazy evaluated GPath expressions.\npublic class NamespaceAwareHashMap extends HashMap<String,String>;\npublic class NoChildren extends GPathResult; // Lazy evaluated representation of a GPath expression returning no children.\npublic class Node extends Object implements groovy.lang.Writable; // Represents a node.\npublic class NodeChild extends GPathResult; // Lazy evaluated representation of a child node.\npublic class NodeChildren extends GPathResult; // Lazy evaluated representation of child nodes.\npublic abstract class NodeIterator extends Object implements Iterator; // Helper class for iterating through nodes.\npublic class NodeParents extends NodeChildren; // Lazy evaluated representation of parent nodes without duplicates\npublic abstract class ReplacementNode extends Object implements groovy.lang.Buildable, groovy.lang.Writable; // Helper base class used for lazy updates.\n", "des": "Helper classes for XmlSlurper."}
{"index": 3475, "repo": "hilt-android-2.47", "code": "package components;\n\nInterface ActivityComponent; // A Hilt component that has the lifetime of the activity.\nInterface ActivityRetainedComponent; // A Hilt component that has the lifetime of a configuration surviving activity.\nInterface FragmentComponent; // A Hilt component that has the lifetime of the fragment.\nInterface ServiceComponent; // A Hilt component that has the lifetime of the service.\nInterface ViewComponent; // A Hilt component that has the lifetime of the view.\nInterface ViewModelComponent; // A Hilt component that has the lifetime of a single ViewModel.\nInterface ViewWithFragmentComponent; // A Hilt component that has the lifetime of the view.\n", "des": "This package contains Hilt's built-in Components for Android."}
{"index": 3892, "repo": "solr-solrj-9.3.0", "code": "package response;\n\npackage response.json; // Allows parsing of JSON query/faceting API responses\npackage response.schema; // Convenience classes for dealing with Schema API responses.\nClass AnalysisResponseBase; // A base class for all analysis responses.\nClass AnalysisResponseBase.AnalysisPhase; // A phase in the analysis process.\nClass AnalysisResponseBase.TokenInfo; // Holds all information of a token as part of an analysis phase.\nClass Cluster; // This class represents a cluster of Solr Docs .\nClass ClusteringResponse; // Encapsulates responses from ClusteringComponent\nClass CollectionAdminResponse;\nClass ConfigSetAdminResponse; // No special handling at this time.\nClass ConfigSetAdminResponse.List;\nClass CoreAdminResponse;\nClass DelegationTokenResponse; // Delegation Token responses\nClass DelegationTokenResponse.Cancel;\nClass DelegationTokenResponse.Get;\nClass DelegationTokenResponse.Renew;\nClass DocumentAnalysisResponse; // A response that is returned by processing the DocumentAnalysisRequest.\nClass DocumentAnalysisResponse.DocumentAnalysis; // An analysis process breakdown of a document.\nClass DocumentAnalysisResponse.FieldAnalysis; // An analysis process breakdown for a specific field.\nClass FacetField; // A utility class to hold the facet response.\nClass FacetField.Count;\nClass FieldAnalysisResponse; // A response that is returned by processing the FieldAnalysisRequest.\nClass FieldAnalysisResponse.Analysis; // The analysis of a field.\nClass FieldStatsInfo; // Holds stats info\nClass Group; // Represents a group.\nClass GroupCommand; // This class represents the result of a group command.\nClass GroupResponse; // Overall grouping result.\nClass HealthCheckResponse;\nClass IntervalFacet; // Objects of this class will contain the result of all the intervals defined for a specific field.\nClass IntervalFacet.Count; // Holds counts for facet intervals defined in a field\nClass LukeResponse; // This is an incomplete representation of the data returned from Luke\nClass LukeResponse.FieldInfo;\nClass LukeResponse.FieldTypeInfo;\nClass PivotField;\nClass QueryResponse;\nClass RangeFacet<B,​G>; // Represents a range facet result\nClass RangeFacet.Count;\nClass RangeFacet.Currency;\nClass RangeFacet.Date;\nClass RangeFacet.Numeric;\n", "des": "Convenience classes for dealing with various types of Solr responses."}
{"index": 852, "repo": "calcite-core-1.34.0", "code": "package type;\n\nInterface RelDataType; // RelDataType represents the type of a scalar expression or entire row returned from a relational expression.\nInterface RelDataTypeFactory; // RelDataTypeFactory is a factory for datatype descriptors.\nInterface RelDataTypeFactory.FieldInfo;\nInterface RelDataTypeFamily; // RelDataTypeFamily represents a family of related types.\nInterface RelDataTypeField; // RelDataTypeField represents the definition of a field in a structured RelDataType.\nInterface RelDataTypePrecedenceList; // RelDataTypePrecedenceList defines a type precedence list for a particular type.\nInterface RelDataTypeSystem; // Type system.\nInterface RelProtoDataType; // Can be converted into a RelDataType given a RelDataTypeFactory.\nInterface TimeFrame; // Time frame.\nInterface TimeFrameSet.Builder; // Builds a collection of time frames.\nClass DelegatingTypeSystem; // Implementation of RelDataTypeSystem that sends all methods to an underlying object.\nClass DynamicRecordType; // Specific type of RelRecordType that corresponds to a dynamic table, where columns are created as they are requested.\nClass DynamicRecordTypeImpl; // Implementation of RelDataType for a dynamic table.\nClass RelCrossType; // Type of the cartesian product of two or more sets of records.\nClass RelDataTypeFactory.Builder; // Fluid API to build a list of fields.\nClass RelDataTypeFactory.FieldInfoBuilder;\nClass RelDataTypeFactoryImpl; // Abstract base for implementations of RelDataTypeFactory.\nClass RelDataTypeField.ToFieldIndex; // Use RelDataTypeField::getIndex\nClass RelDataTypeField.ToFieldName; // Use RelDataTypeField::getName\nClass RelDataTypeFieldImpl; // Default implementation of RelDataTypeField.\nClass RelDataTypeImpl; // RelDataTypeImpl is an abstract base for implementations of RelDataType.\nClass RelDataTypeSystemImpl; // Default implementation of RelDataTypeSystem, providing parameters from the SQL standard.\nClass RelRecordType; // RelRecordType represents a structured type having named fields.\nClass TimeFrames; // Utilities for TimeFrame.\nClass TimeFrameSet; // Set of TimeFrame definitions.\nEnum RelDataTypeComparability; // RelDataTypeComparability is an enumeration of the categories of comparison operators which types may support.\nEnum StructKind; // Describes a policy for resolving fields in record types.\n", "des": "Defines a type system for relational expressions."}
{"index": 321, "repo": "kafka-clients-3.5.0", "code": "package config;\n\npackage config.provider; // Provides a pluggable interface and some implementations for late-binding in configuration values.\nInterface ConfigChangeCallback; // A callback passed to ConfigProvider for subscribing to changes.\nInterface ConfigDef.Recommender; // This is used by the ConfigDef.validate(Map) to get valid values for a configuration given the current configuration values in order to perform full configuration validation and visibility modification.\nInterface ConfigDef.Validator; // Validation logic the user may provide to perform single configuration validation.\nClass AbstractConfig; // A convenient base class for configurations to extend.\nClass Config;\nClass ConfigData; // Configuration data from a ConfigProvider.\nClass ConfigDef; // This class is used for specifying the set of expected configurations.\nClass ConfigDef.CaseInsensitiveValidString;\nClass ConfigDef.CompositeValidator;\nClass ConfigDef.ConfigKey;\nClass ConfigDef.LambdaValidator;\nClass ConfigDef.ListSize;\nClass ConfigDef.NonEmptyString;\nClass ConfigDef.NonEmptyStringWithoutControlChars;\nClass ConfigDef.NonNullValidator;\nClass ConfigDef.Range; // Validation logic for numeric ranges\nClass ConfigDef.ValidList;\nClass ConfigDef.ValidString;\nClass ConfigResource; // A class representing resources that have configs.\nClass ConfigTransformer; // This class wraps a set of ConfigProvider instances and uses them to perform transformations.\nClass ConfigTransformerResult; // The result of a transformation from ConfigTransformer.\nClass ConfigValue;\nClass LogLevelConfig; // This class holds definitions for log level configurations related to Kafka's application logging.\nClass SaslConfigs;\nClass SecurityConfig; // Contains the common security config for SSL and SASL\nClass SslConfigs;\nClass TopicConfig; // Keys that can be used to configure a topic.\nEnum ConfigDef.Importance; // The importance level for a configuration\nEnum ConfigDef.Type; // The config types\nEnum ConfigDef.Width; // The width of a configuration value\nEnum ConfigResource.Type; // Type of resource.\nEnum SslClientAuth; // Describes whether the server should require or request client authentication.\nClass ConfigException; // Thrown if the user supplies an invalid configuration\n", "des": "Provides common mechanisms for defining, parsing, validating, and documenting user-configurable parameters."}
{"index": 3391, "repo": "commons-imaging-1.0-alpha3", "code": "package dcx;\n\nClass DcxImageParser;\n", "des": "The DCX image format."}
{"index": 3434, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface BasicProxyFactory; // A proxy factory for \"basic proxy\" generation.\nInterface BytecodeEnhancementMetadata; // Encapsulates bytecode enhancement information about a particular entity.\nInterface BytecodeProvider; // Contract for providers of bytecode services to Hibernate.\nInterface ClassTransformer; // A persistence provider provides an instance of this interface to the PersistenceUnitInfo.addTransformer method.\nInterface ProxyFactoryFactory; // An interface for factories of proxy factory instances.\nInterface ReflectionOptimizer; // Represents reflection optimization for a particular class.\nInterface ReflectionOptimizer.AccessOptimizer; // Represents optimized entity property access.\nInterface ReflectionOptimizer.InstantiationOptimizer; // Represents optimized entity instantiation.\nClass ByteCodeHelper; // A helper for reading byte code from various input sources.\nClass ClassLoadingStrategyHelper;\nClass InstrumentedClassLoader; // A specialized ClassLoader which performs bytecode enhancement on class definitions as they are loaded into the ClassLoader scope.\nClass NotInstrumentedException; // Indicates a condition where an instrumented/enhanced class was expected, but the class was not instrumented/enhanced.\n", "des": "Package defining bytecode code enhancement (instrumentation) support."}
{"index": 1181, "repo": "commons-math3-3.6.1", "code": "package twod;\n\npackage twod.util; // Utilities to visualize two-dimensional neural networks.\nClass NeuronSquareMesh2D; // Neural network with the topology of a two-dimensional surface.\nEnum NeuronSquareMesh2D.HorizontalDirection; // Horizontal (along row) direction.\nEnum NeuronSquareMesh2D.VerticalDirection; // Vertical (along column) direction.\n", "des": "Two-dimensional neural networks."}
{"index": 20, "repo": "commons-collections4-4.4", "code": "package iterators;\n\nClass AbstractEmptyMapIterator<K,V>; // Provides an implementation of an empty map iterator.\nClass AbstractIteratorDecorator<E>; // Provides basic behaviour for decorating an iterator with extra functionality.\nClass AbstractListIteratorDecorator<E>; // Provides basic behaviour for decorating a list iterator with extra functionality.\nClass AbstractMapIteratorDecorator<K,V>; // Provides basic behaviour for decorating a map iterator with extra functionality.\nClass AbstractOrderedMapIteratorDecorator<K,V>; // Provides basic behaviour for decorating an ordered map iterator with extra functionality.\nClass AbstractUntypedIteratorDecorator<I,O>; // Provides basic behaviour for decorating an iterator with extra functionality without committing the generic type of the Iterator implementation.\nClass ArrayIterator<E>; // Implements an Iterator over any array.\nClass ArrayListIterator<E>; // Implements a ListIterator over an array.\nClass BoundedIterator<E>; // Decorates another iterator to return elements in a specific range.\nClass CollatingIterator<E>; // Provides an ordered iteration over the elements contained in a collection of ordered Iterators.\nClass EmptyIterator<E>; // Provides an implementation of an empty iterator.\nClass EmptyListIterator<E>; // Provides an implementation of an empty list iterator.\nClass EmptyMapIterator<K,V>; // Provides an implementation of an empty map iterator.\nClass EmptyOrderedIterator<E>; // Provides an implementation of an empty ordered iterator.\nClass EmptyOrderedMapIterator<K,V>; // Provides an implementation of an empty ordered map iterator.\nClass EntrySetMapIterator<K,V>; // Implements a MapIterator using a Map entrySet.\nClass EnumerationIterator<E>; // Adapter to make Enumeration instances appear to be Iterator instances.\nClass FilterIterator<E>; // Decorates another Iterator using a predicate to filter elements.\nClass FilterListIterator<E>; // Decorates another ListIterator using a predicate to filter elements.\nClass IteratorChain<E>; // An IteratorChain is an Iterator that wraps a number of Iterators.\nClass IteratorEnumeration<E>; // Adapter to make an Iterator instance appear to be an Enumeration instance.\nClass IteratorIterable<E>; // Adapter to make an Iterator instance appear to be an Iterable instance.\n", "des": "This package contains implementations of the Iterator interface."}
{"index": 1541, "repo": "spring-context-6.0.11", "code": "package annotation;\n\n@Configuration(proxyBeanMethods=false) public abstract class AbstractAsyncConfiguration extends Object implements ImportAware; // Abstract base Configuration class providing common structure for enabling Spring's asynchronous method execution capability.\npublic class AnnotationAsyncExecutionInterceptor extends org.springframework.aop.interceptor.AsyncExecutionInterceptor; // Specialization of AsyncExecutionInterceptor that delegates method execution to an Executor based on the Async annotation.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Reflective public @interface Async; // Annotation that marks a method as a candidate for asynchronous execution.\npublic class AsyncAnnotationAdvisor extends org.springframework.aop.support.AbstractPointcutAdvisor implements org.springframework.beans.factory.BeanFactoryAware; // Advisor that activates asynchronous method execution through the Async annotation.\npublic class AsyncAnnotationBeanPostProcessor extends org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor; // Bean post-processor that automatically applies asynchronous invocation behavior to any bean that carries the Async annotation at class or method-level by adding a corresponding AsyncAnnotationAdvisor to the exposed proxy (either an existing AOP proxy or a newly generated proxy that implements all the target's interfaces).\npublic class AsyncConfigurationSelector extends AdviceModeImportSelector<EnableAsync>; // Selects which implementation of AbstractAsyncConfiguration should be used based on the value of EnableAsync.mode() on the importing @Configuration class.\npublic interface AsyncConfigurer; // Interface to be implemented by @Configuration classes annotated with @EnableAsync that wish to customize the Executor instance used when processing async method invocations or the AsyncUncaughtExceptionHandler instance used to process exception thrown from async method with void return type.\n@Deprecated(since=\"6.0\") public class AsyncConfigurerSupport extends Object implements AsyncConfigurer;\n@Deprecated(since=\"6.0\") public class AsyncResult<V> extends Object implements org.springframework.util.concurrent.ListenableFuture<V>;\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(AsyncConfigurationSelector.class) public @interface EnableAsync; // Enables Spring's asynchronous method execution capability, similar to functionality found in Spring's <task:*> XML namespace.\n", "des": "Annotation support for asynchronous method execution."}
{"index": 3038, "repo": "spring-web-6.0.11", "code": "package annotation;\n\npublic abstract class AbstractCookieValueMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver; // A base abstract class to resolve method arguments annotated with @CookieValue.\npublic abstract class AbstractNamedValueMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Abstract base class for resolving method arguments from a named value.\nprotected static class AbstractNamedValueMethodArgumentResolver.NamedValueInfo extends Object; // Represents the information about a named value, including name, whether it's required and a default value.\npublic abstract class AbstractWebArgumentResolverAdapter extends Object implements HandlerMethodArgumentResolver; // An abstract base class adapting a WebArgumentResolver to the HandlerMethodArgumentResolver contract.\npublic class ErrorsMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Resolves Errors method arguments.\npublic class ExceptionHandlerMethodResolver extends Object; // Discovers @ExceptionHandler methods in a given class, including all of its superclasses, and helps to resolve a given Exception to the exception types supported by a given Method.\npublic class ExpressionValueMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver; // Resolves method arguments annotated with @Value.\npublic class InitBinderDataBinderFactory extends DefaultDataBinderFactory; // Adds initialization to a WebDataBinder via @InitBinder methods.\npublic class MapMethodProcessor extends Object implements HandlerMethodArgumentResolver, HandlerMethodReturnValueHandler; // Resolves Map method arguments and handles Map return values.\npublic class MethodArgumentConversionNotSupportedException extends org.springframework.beans.ConversionNotSupportedException; // A ConversionNotSupportedException raised while resolving a method argument.\npublic class MethodArgumentTypeMismatchException extends org.springframework.beans.TypeMismatchException; // A TypeMismatchException raised while resolving a controller method argument.\npublic class ModelAttributeMethodProcessor extends Object implements HandlerMethodArgumentResolver, HandlerMethodReturnValueHandler; // Resolve @ModelAttribute annotated method arguments and handle return values from @ModelAttribute annotated methods.\npublic final class ModelFactory extends Object; // Assist with initialization of the Model before controller method invocation and with updates to it after the invocation.\npublic class ModelMethodProcessor extends Object implements HandlerMethodArgumentResolver, HandlerMethodReturnValueHandler; // Resolves Model arguments and handles Model return values.\npublic class RequestHeaderMapMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Resolves Map method arguments annotated with @RequestHeader.\n", "des": "Support classes for annotation-based handler method processing."}
{"index": 3566, "repo": "lucene-codecs-9.7.0", "code": "package blockterms;\n\nClass BlockTermsReader; // Handles a terms dict, but decouples all details of doc/freqs/positions reading to an instance of PostingsReaderBase.\nClass BlockTermsWriter; // Writes terms dict, block-encoding (column stride) each term's metadata for each set of terms between two index terms.\nClass FixedGapTermsIndexReader; // TermsIndexReader for simple every Nth terms indexes.\nClass FixedGapTermsIndexWriter; // Selects every Nth term as and index term, and hold term bytes (mostly) fully expanded in memory.\nClass TermsIndexReaderBase; // BlockTermsReader interacts with an instance of this class to manage its terms index.\nClass TermsIndexReaderBase.FieldIndexEnum; // Similar to TermsEnum, except, the only \"metadata\" it reports for a given indexed term is the long fileOffset into the main terms dictionary file.\nClass TermsIndexWriterBase; // Base class for terms index implementations to plug into BlockTermsWriter.\nClass VariableGapTermsIndexReader; // See VariableGapTermsIndexWriter\nClass VariableGapTermsIndexWriter; // Selects index terms according to provided pluggable VariableGapTermsIndexWriter.IndexTermSelector, and stores them in a prefix trie that's loaded entirely in RAM stored as an FST.\nClass VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector; // Sets an index term when docFreq >= docFreqThresh, or every interval terms.\nClass VariableGapTermsIndexWriter.EveryNTermSelector; // Same policy as FixedGapTermsIndexWriter\nClass VariableGapTermsIndexWriter.IndexTermSelector; // Hook for selecting which terms should be placed in the terms index.\n", "des": "Pluggable term index / block terms dictionary implementations."}
{"index": 2666, "repo": "spring-data-cassandra-4.1.2", "code": "package query;\n\npublic abstract class AbstractCassandraQuery extends CassandraRepositoryQuerySupport; // Base class for RepositoryQuery implementations for Cassandra.\npublic abstract class AbstractReactiveCassandraQuery extends CassandraRepositoryQuerySupport; // Base class for reactive RepositoryQuery implementations for Cassandra.\npublic interface CassandraEntityInformation<T,ID> extends EntityInformation<T,ID>, CassandraEntityMetadata<T>; // Cassandra specific EntityInformation.\npublic interface CassandraEntityMetadata<T> extends EntityMetadata<T>; // Extension of EntityMetadata to additionally expose the table name an entity shall be persisted to.\npublic interface CassandraParameterAccessor extends ParameterAccessor; // Cassandra-specific ParameterAccessor exposing a Cassandra types that are supported by the driver and parameter type.\npublic class CassandraParameters extends Parameters<CassandraParameters,org.springframework.data.cassandra.repository.query.CassandraParameters.CassandraParameter>; // Custom extension of Parameters discovering additional properties of query method parameters.\npublic class CassandraParametersParameterAccessor extends ParametersParameterAccessor implements CassandraParameterAccessor; // Cassandra-specific ParameterAccessor exposing Cassandra types that are supported by the driver and parameter type.\npublic class CassandraQueryMethod extends QueryMethod; // Cassandra specific implementation of QueryMethod.\npublic abstract class CassandraRepositoryQuerySupport extends Object implements RepositoryQuery; // Base class for Cassandra RepositoryQuery implementations providing common infrastructure such as EntityInstantiators and QueryStatementCreator.\npublic class PartTreeCassandraQuery extends AbstractCassandraQuery; // RepositoryQuery implementation for Cassandra.\npublic class ReactiveCassandraQueryMethod extends CassandraQueryMethod; // Reactive specific implementation of CassandraQueryMethod.\npublic class ReactivePartTreeCassandraQuery extends AbstractReactiveCassandraQuery; // Reactive PartTree RepositoryQuery implementation for Cassandra.\npublic class ReactiveStringBasedCassandraQuery extends AbstractReactiveCassandraQuery; // String-based AbstractReactiveCassandraQuery implementation.\npublic class StringBasedCassandraQuery extends AbstractCassandraQuery; // String-based AbstractCassandraQuery implementation.\n", "des": "Query derivation mechanism for Apache Cassandra specific repositories."}
{"index": 2888, "repo": "spring-integration-core-6.1.2", "code": "package management;\n\npackage management.metrics; // Provides interfaces related to 5.0 metrics.\npackage management.micrometer; // Provides classes to support the use of Micrometer for metrics.\npackage management.observation; // Provides classes to support of Micrometer Observation API.\npublic interface IntegrationInboundManagement extends IntegrationManagement; // Marker interface indicating that this IntegrationManagement component initiates message flow.\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented public @interface IntegrationManagedResource; // Clone of ManagedResource limiting beans thus annotated so that they will only be exported by the IntegrationMBeanExporter and prevented from being exported by other MBeanExporters (if present).\npublic interface IntegrationManagement extends NamedComponent, org.springframework.beans.factory.DisposableBean; // Base interface for Integration managed components.\npublic static class IntegrationManagement.ManagementOverrides extends Object; // Toggles to inform the management configurer to not set these properties since the user has manually configured them in a bean definition.\npublic interface ManageableLifecycle extends org.springframework.context.Lifecycle; // Makes Lifecycle methods manageable.\npublic interface ManageableSmartLifecycle extends org.springframework.context.SmartLifecycle, ManageableLifecycle; // Extend ManageableLifecycle to make those methods manageable.\npublic interface MappingMessageRouterManagement; // Exposes channel mapping operations when the router is proxied.\n@IntegrationManagedResource public interface MessageSourceManagement; // Message sources implementing this interface have additional properties that can be set or examined using JMX.\npublic interface SubscribableChannelManagement; // Metrics for subscribable channels.\n@IntegrationManagedResource public interface TrackableComponent extends NamedComponent;\n", "des": "Provides classes related to management support."}
{"index": 2307, "repo": "spring-boot-3.1.1", "code": "package env;\n\npublic class ConfigTreePropertySource extends org.springframework.core.env.EnumerablePropertySource<Path> implements OriginLookup<String>; // PropertySource backed by a directory tree that contains files for each value.\npublic static enum ConfigTreePropertySource.Option extends Enum<ConfigTreePropertySource.Option>; // Property source options.\npublic static interface ConfigTreePropertySource.Value extends CharSequence, org.springframework.core.io.InputStreamSource; // A value returned from the property source which exposes the contents of the property file.\n@FunctionalInterface public interface EnvironmentPostProcessor; // Allows for customization of the application's Environment prior to the application context being refreshed.\npublic class EnvironmentPostProcessorApplicationListener extends Object implements org.springframework.context.event.SmartApplicationListener, org.springframework.core.Ordered; // SmartApplicationListener used to trigger EnvironmentPostProcessors registered in the spring.factories file.\n@FunctionalInterface public interface EnvironmentPostProcessorsFactory; // Factory interface used by the EnvironmentPostProcessorApplicationListener to create the EnvironmentPostProcessor instances.\npublic final class OriginTrackedMapPropertySource extends org.springframework.core.env.MapPropertySource implements OriginLookup<String>; // OriginLookup backed by a Map containing OriginTrackedValues.\npublic class PropertiesPropertySourceLoader extends Object implements PropertySourceLoader; // Strategy to load '.properties' files into a PropertySource.\npublic interface PropertySourceLoader; // Strategy interface located through SpringFactoriesLoader and used to load a PropertySource.\npublic class RandomValuePropertySource extends org.springframework.core.env.PropertySource<Random>; // PropertySource that returns a random value for any property that starts with \"random.\".\npublic class RandomValuePropertySourceEnvironmentPostProcessor extends Object implements EnvironmentPostProcessor, org.springframework.core.Ordered; // EnvironmentPostProcessor to add the RandomValuePropertySource.\npublic class SpringApplicationJsonEnvironmentPostProcessor extends Object implements EnvironmentPostProcessor, org.springframework.core.Ordered; // An EnvironmentPostProcessor that parses JSON from spring.application.json or equivalently SPRING_APPLICATION_JSON and adds it as a map property source to the Environment.\n", "des": "Spring Environment support."}
{"index": 11, "repo": "connect-api-3.5.0", "code": "package transforms;\n\npackage transforms.predicates; // Provides a pluggable interface for describing when a Transformation should be applied to a record.\nInterface Transformation<R extends ConnectRecord<R>>; // Single message transformation for Kafka Connect record types.\n", "des": "Provides a pluggable interface for altering data which is being moved by Connect."}
{"index": 3052, "repo": "spring-ws-core-4.0.5", "code": "package client;\n\npackage client.core; // Core package of the Spring-WS client-side support.\npackage client.support; // Classes supporting the org.springframework.ws.client.core package.\npublic abstract class WebServiceClientException extends WebServiceException; // Exception thrown whenever an error occurs on the client-side.\npublic class WebServiceFaultException extends WebServiceClientException; // Thrown by SimpleFaultMessageResolver when the response message has a fault.\npublic class WebServiceIOException extends WebServiceClientException; // Exception thrown whenever an I/O error occurs on the client-side.\npublic class WebServiceTransformerException extends WebServiceClientException; // Exception thrown whenever a transformation error occurs on the client-side.\npublic class WebServiceTransportException extends WebServiceIOException; // Exception thrown whenever a transport error occurs on the client-side.\n", "des": "Contains classes for client-side Spring-WS support, allowing for Spring-style Web service access."}
{"index": 3856, "repo": "lucene-core-9.7.0", "code": "package compress;\n\nClass LowercaseAsciiCompression; // Utility class that can efficiently compress arrays that mostly contain characters in the [0x1F,0x3F) or [0x5F,0x7F) ranges, which notably include all digits, lowercase characters, '.', '-' and '_'.\nClass LZ4; // LZ4 compression and decompression routines.\nClass LZ4.FastCompressionHashTable; // Simple lossy LZ4.HashTable that only stores the last ocurrence for each hash on 2^14 bytes of memory.\nClass LZ4.HighCompressionHashTable; // A higher-precision LZ4.HashTable.\n", "des": "Compression utilities."}
{"index": 1725, "repo": "spring-jdbc-6.0.11", "code": "package metadata;\n\npublic class CallMetaDataContext extends Object; // Class to manage context meta-data used for the configuration and execution of a stored procedure call.\npublic interface CallMetaDataProvider; // Interface specifying the API to be implemented by a class providing call meta-data.\npublic final class CallMetaDataProviderFactory extends Object; // Factory used to create a CallMetaDataProvider implementation based on the type of database being used.\npublic class CallParameterMetaData extends Object; // Holder of meta-data for a specific parameter that is used for call processing.\npublic class Db2CallMetaDataProvider extends GenericCallMetaDataProvider; // DB2 specific implementation for the CallMetaDataProvider interface.\npublic class DerbyCallMetaDataProvider extends GenericCallMetaDataProvider; // Derby specific implementation for the CallMetaDataProvider interface.\npublic class DerbyTableMetaDataProvider extends GenericTableMetaDataProvider; // The Derby specific implementation of TableMetaDataProvider.\npublic class GenericCallMetaDataProvider extends Object implements CallMetaDataProvider; // A generic implementation of the CallMetaDataProvider interface.\npublic class GenericTableMetaDataProvider extends Object implements TableMetaDataProvider; // A generic implementation of the TableMetaDataProvider interface which should provide enough features for all supported databases.\npublic class HanaCallMetaDataProvider extends GenericCallMetaDataProvider; // SAP HANA specific implementation for the CallMetaDataProvider interface.\npublic class HsqlTableMetaDataProvider extends GenericTableMetaDataProvider; // The HSQL specific implementation of TableMetaDataProvider.\npublic class OracleCallMetaDataProvider extends GenericCallMetaDataProvider; // Oracle-specific implementation for the CallMetaDataProvider interface.\npublic class OracleTableMetaDataProvider extends GenericTableMetaDataProvider; // Oracle-specific implementation of the TableMetaDataProvider.\npublic class PostgresCallMetaDataProvider extends GenericCallMetaDataProvider; // Postgres-specific implementation for the CallMetaDataProvider interface.\npublic class PostgresTableMetaDataProvider extends GenericTableMetaDataProvider; // The PostgreSQL specific implementation of TableMetaDataProvider.\npublic class SqlServerCallMetaDataProvider extends GenericCallMetaDataProvider; // SQL Server specific implementation for the CallMetaDataProvider interface.\npublic class SybaseCallMetaDataProvider extends GenericCallMetaDataProvider; // Sybase specific implementation for the CallMetaDataProvider interface.\npublic class TableMetaDataContext extends Object; // Class to manage context meta-data used for the configuration and execution of operations on a database table.\npublic interface TableMetaDataProvider; // Interface specifying the API to be implemented by a class providing table meta-data.\n", "des": "Context metadata abstraction for the configuration and execution of table inserts and stored procedure calls."}
{"index": 833, "repo": "calcite-core-1.34.0", "code": "package plan;\n\npackage plan.hep; // Provides a heuristic planner implementation for the interfaces in org.apache.calcite.plan.\npackage plan.visualizer; // A visualizer showing how the rules are applied step-by-step.\npackage plan.volcano; // Optimizes relational expressions.\nInterface CommonRelSubExprRule.Config; // Rule configuration.\nInterface Context; // Provides library users a way to store data within the planner session and access it within rules.\nInterface Convention; // Calling convention trait.\nInterface RelDigest; // The digest is the exact representation of the corresponding RelNode, at anytime, anywhere.\nInterface RelHintsPropagator; // Customize the propagation of the RelHints from the root relational expression of a rule call RelOptRuleCall to the new equivalent expression.\nInterface RelImplementor; // This is a marker interface for a callback used to convert a tree of relational expressions into a plan.\nInterface RelMultipleTrait; // Trait for which a given relational expression can have multiple values.\nInterface RelOptConnection; // The planner's view of a connection to a database.\nInterface RelOptCost; // RelOptCost defines an interface for optimizer cost in terms of number of rows processed, CPU cost, and I/O cost.\nInterface RelOptCostFactory; // Cost model for query planning.\nInterface RelOptListener; // RelOptListener defines an interface for listening to events which occur during the optimization process.\nInterface RelOptNode; // Node in a planner.\nInterface RelOptPlanner; // A RelOptPlanner is a query optimizer: it transforms a relational expression into a semantically equivalent relational expression, according to a given set of rules and a cost model.\nInterface RelOptPlanner.Executor; // Use RexExecutor\nInterface RelOptSchema; // A RelOptSchema is a set of RelOptTable objects.\nInterface RelOptSchemaWithSampling; // Extension to RelOptSchema with support for sample data-sets.\nInterface RelOptTable; // Represents a relational dataset in a RelOptSchema.\nInterface RelOptTable.ToRelContext; // Contains the context needed to convert a a table into a relational expression.\nInterface RelOptTable.ViewExpander; // Can expand a view into relational expressions.\nInterface RelRule.Config; // Rule configuration.\n", "des": "Defines interfaces for constructing rule-based optimizers of relational expressions."}
{"index": 129, "repo": "ignite-core-2.15.0", "code": "package tracing;\n\nInterface SpiSpecificSpan; // Logical piece of a trace that insulates spi specific logic.\nInterface TracingConfigurationManager; // Allows to configure tracing, read the configuration and restore it to the defaults.\nInterface TracingSpi<S extends SpiSpecificSpan>; // Tracing SPI interface.\nClass NoopSpiSpecificSpan; // Noop and null-safe implementation of SpiSpecificSpan.\nClass NoopTracingSpi; // Noop and null-safe implementation of Tracing SPI.\nClass TracingConfigurationCoordinates; // Specifies to which traces, specific configuration will be applied.\nClass TracingConfigurationCoordinates.Builder; // TracingConfigurationCoordinates builder.\nClass TracingConfigurationParameters; // Set of tracing configuration parameters like sampling rate or included scopes.\nClass TracingConfigurationParameters.Builder; // TracingConfigurationParameters builder.\nEnum Scope; // Tracing span scope.\nEnum SpanStatus; // Various statuses for Spans execution.\n", "des": "Contains common classes and interfaces for tracing SPI implementations."}
{"index": 1392, "repo": "spring-boot-actuator-3.1.1", "code": "package web;\n\npackage web.annotation; // Annotation support for actuator web endpoints.\npackage web.jersey; // Jersey support for actuator endpoints.\npackage web.reactive; // Spring WebFlux support for actuator endpoints.\npackage web.servlet; // Spring MVC support for actuator endpoints.\npublic class EndpointLinksResolver extends Object; // A resolver for links to web endpoints.\npublic class EndpointMapping extends Object; // A value object for the base mapping for endpoints.\npublic class EndpointMediaTypes extends Object; // Media types that are, by default, produced and consumed by an endpoint.\npublic final class EndpointServlet extends Object; // Contains details of a servlet that is exposed as an actuator endpoint.\npublic interface ExposableServletEndpoint extends ExposableEndpoint<Operation>, PathMappedEndpoint; // Information describing an endpoint that can be exposed by registering a servlet.\npublic interface ExposableWebEndpoint extends ExposableEndpoint<WebOperation>, PathMappedEndpoint; // Information describing an endpoint that can be exposed over the web.\npublic class Link extends Object; // Details for a link in a HAL-formatted response.\n@FunctionalInterface public interface PathMappedEndpoint; // Interface that can be implemented by an ExposableEndpoint that is mapped to a root web path.\npublic class PathMappedEndpoints extends Object implements Iterable<PathMappedEndpoint>; // A collection of path mapped endpoints.\n@FunctionalInterface public interface PathMapper; // Strategy interface used to provide a mapping between an endpoint ID and the root path where it will be exposed.\npublic class ServletEndpointRegistrar extends Object implements org.springframework.boot.web.servlet.ServletContextInitializer; // ServletContextInitializer to register servlet endpoints.\npublic enum WebEndpointHttpMethod extends Enum<WebEndpointHttpMethod>; // An enumeration of HTTP methods supported by web endpoint operations.\npublic final class WebEndpointResponse<T> extends Object; // A WebEndpointResponse can be returned by an operation on a @EndpointWebExtension to provide additional, web-specific information such as the HTTP status code.\n@FunctionalInterface public interface WebEndpointsSupplier extends EndpointsSupplier<ExposableWebEndpoint>; // EndpointsSupplier for web endpoints.\npublic interface WebOperation extends Operation; // An operation on a web endpoint.\npublic final class WebOperationRequestPredicate extends Object; // A predicate for a request to an operation on a web endpoint.\n", "des": "Web support for actuator endpoints."}
{"index": 2867, "repo": "spring-integration-core-6.1.2", "code": "package history;\n\npublic class HistoryWritingMessagePostProcessor extends Object implements org.springframework.messaging.core.MessagePostProcessor;\npublic final class MessageHistory extends Object implements List<Properties>, Serializable;\npublic static class MessageHistory.Entry extends Properties; // Inner class for each Entry in the history.\n@ManagedResource @IntegrationManagedResource public class MessageHistoryConfigurer extends Object implements ManageableSmartLifecycle, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;\n", "des": "Provides classes supporting the capture of message history."}
{"index": 3011, "repo": "spring-web-6.0.11", "code": "package protobuf;\n\npublic class KotlinSerializationProtobufHttpMessageConverter extends KotlinSerializationBinaryHttpMessageConverter<kotlinx.serialization.protobuf.ProtoBuf>; // Implementation of HttpMessageConverter that can read and write Protocol Buffers using kotlinx.serialization.\npublic class ProtobufHttpMessageConverter extends AbstractHttpMessageConverter<com.google.protobuf.Message>; // An HttpMessageConverter that reads and writes com.google.protobuf.Messages using Google Protocol Buffers.\npublic class ProtobufJsonFormatHttpMessageConverter extends ProtobufHttpMessageConverter; // Subclass of ProtobufHttpMessageConverter which enforces the use of Protobuf 3 and its official library \"com.google.protobuf:protobuf-java-util\" for JSON processing.\n", "des": "Provides an HttpMessageConverter implementation for handling Google Protocol Buffers."}
{"index": 3615, "repo": "lucene-suggest-9.7.0", "code": "package tst;\n\nClass TernaryTreeNode; // The class creates a TST node.\nClass TSTAutocomplete; // Ternary Search Trie implementation.\nClass TSTLookup; // Suggest implementation based on a Ternary Search Tree\n", "des": "Ternary Search Tree based autosuggest."}
{"index": 2117, "repo": "spring-retry-2.0.2", "code": "package listener;\n\npublic class MethodInvocationRetryListenerSupport extends Object implements RetryListener; // Empty method implementation of RetryListener with focus on the AOP reflective method invocations providing convenience retry listener type-safe (with a `MethodInvocationRetryCallback` callback parameter) specific methods.\n@Deprecated(since=\"2.0.1\", forRemoval=true) public class RetryListenerSupport extends Object implements RetryListener;\n", "des": "Infrastructure implementations of retry interceptor concerns."}
{"index": 874, "repo": "calcite-core-1.34.0", "code": "package graph;\n\nInterface AttributedDirectedGraph.AttributedEdgeFactory<V,E>; // Factory for edges that have attributes.\nInterface DirectedGraph<V,E>; // Directed graph.\nInterface DirectedGraph.EdgeFactory<V,E>; // Factory for edges.\nClass AttributedDirectedGraph<V,E extends DefaultEdge>; // Directed graph where edges have attributes and allows multiple edges between any two vertices provided that their attributes are different.\nClass BreadthFirstIterator<V,E extends DefaultEdge>; // Iterates over the vertices in a directed graph in breadth-first order.\nClass CycleDetector<V,E extends DefaultEdge>; // Detects cycles in directed graphs.\nClass DefaultDirectedGraph<V,E extends DefaultEdge>; // Default implementation of DirectedGraph.\nClass DefaultEdge; // Default implementation of Edge.\nClass DepthFirstIterator<V,E extends DefaultEdge>; // Iterates over the vertices in a directed graph in depth-first order.\nClass Graphs; // Miscellaneous graph utilities.\nClass Graphs.FrozenGraph<V,E extends DefaultEdge>; // Immutable grap.\nClass TopologicalOrderIterator<V,E extends DefaultEdge>; // Iterates over the edges of a graph in topological order.\n", "des": "Graph-theoretic algorithms and data structures."}
{"index": 1061, "repo": "avro-1.11.2", "code": "package io;\n\npackage io.parsing; // Implementation of Avro schemas as LL(1) grammars.\nInterface DatumReader<D>; // Read data of a schema.\nInterface DatumWriter<D>; // Write data of a schema.\nInterface FastReaderBuilder.ExecutionStep;\nInterface FastReaderBuilder.FieldReader;\nInterface FastReaderBuilder.ReusingFieldReader;\nClass BinaryData; // Utilities for binary-encoded data.\nClass BinaryDecoder; // An Decoder for binary-format data.\nClass BinaryEncoder; // An abstract Encoder for Avro's binary encoding.\nClass BlockingBinaryEncoder; // A BinaryEncoder implementation that writes large arrays and maps as a sequence of blocks.\nClass BufferedBinaryEncoder; // An Encoder for Avro's binary encoding.\nClass Decoder; // Low-level support for de-serializing Avro values.\nClass DecoderFactory; // A factory for creating and configuring Decoders.\nClass DirectBinaryEncoder; // An Encoder for Avro's binary encoding that does not buffer output.\nClass Encoder; // Low-level support for serializing Avro values.\nClass EncoderFactory; // A factory for creating and configuring Encoder instances.\nClass FastReaderBuilder;\nClass FastReaderBuilder.MapReader;\nClass FastReaderBuilder.RecordReader;\nClass JsonDecoder; // A Decoder for Avro's JSON data encoding.\nClass JsonEncoder; // An Encoder for Avro's JSON data encoding.\nClass ParsingDecoder; // Base class for parser-based Decoders.\nClass ParsingEncoder; // Base class for parser-based Encoders.\nClass ResolvingDecoder; // Decoder that performs type-resolution between the reader's and writer's schemas.\nClass ValidatingDecoder; // An implementation of Decoder that ensures that the sequence of operations conforms to a schema.\nClass ValidatingEncoder; // An implementation of Encoder that wraps another Encoder and ensures that the sequence of operations conforms to the provided schema.\nEnum FastReaderBuilder.RecordReader.Stage;\n", "des": "Utilities for Encoding and Decoding Avro data."}
{"index": 226, "repo": "nutch-2.4", "code": "package impl;\n\nInterface CrawlingCycleListener;\nClass CrawlingCycle; // This class implements crawl cycle as in crawl script\nClass NutchClientImpl;\nClass RemoteCommand;\nClass RemoteCommandBuilder;\nClass RemoteCommandExecutor; // This class executes remote job and waits for success/failure result\nClass RemoteCommandsBatchFactory;\n", "des": "Contains implementation of client classes and interfaces for Web UI"}
{"index": 607, "repo": "org.apache.karaf.main-2.4.4", "code": "package namespace;\n\nClass AbstractWiringNamespace; // Wiring Capability and Requirement Namespaces base class.\nClass BundleNamespace; // Bundle Capability and Requirement Namespace.\nClass ExecutionEnvironmentNamespace; // Execution Environment Capability and Requirement Namespace.\nClass HostNamespace; // Host Capability and Requirement Namespace.\nClass IdentityNamespace; // Identity Capability and Requirement Namespace.\nClass PackageNamespace; // Package Capability and Requirement Namespace.\n", "des": "Namespace Package Version 1.0."}
{"index": 185, "repo": "ignite-core-2.15.0", "code": "package loopback;\n\nClass IpcClientTcpEndpoint; // Loopback IPC endpoint based on socket.\nClass IpcServerTcpEndpoint; // Server loopback IPC endpoint.\n", "des": "Loopback IPC utility classes."}
{"index": 2295, "repo": "spring-boot-3.1.1", "code": "package config;\n\npublic class AnsiOutputApplicationListener extends Object implements org.springframework.context.ApplicationListener<ApplicationEnvironmentPreparedEvent>, org.springframework.core.Ordered; // An ApplicationListener that configures AnsiOutput depending on the value of the property spring.output.ansi.enabled.\npublic final class ConfigData extends Object; // Configuration data that has been loaded from a ConfigDataResource and may ultimately contribute property sources to Spring's Environment.\npublic static enum ConfigData.Option extends Enum<ConfigData.Option>; // Option flags that can be applied.\npublic static final class ConfigData.Options extends Object; // A set of ConfigData.Option flags.\n@FunctionalInterface public static interface ConfigData.PropertySourceOptions; // Strategy interface used to supply ConfigData.Options for a given PropertySource.\npublic class ConfigDataEnvironmentPostProcessor extends Object implements EnvironmentPostProcessor, org.springframework.core.Ordered; // EnvironmentPostProcessor that loads and applies ConfigData to Spring's Environment.\npublic interface ConfigDataEnvironmentUpdateListener extends EventListener; // EventListener to listen to Environment updates triggered by the ConfigDataEnvironmentPostProcessor.\npublic abstract class ConfigDataException extends RuntimeException; // Abstract base class for configuration data exceptions.\npublic interface ConfigDataLoader<R extends ConfigDataResource>; // Strategy class that can be used to load ConfigData for a given ConfigDataResource.\npublic interface ConfigDataLoaderContext; // Context provided to ConfigDataLoader methods.\npublic final class ConfigDataLocation extends Object implements OriginProvider; // A user specified location that can be resolved to one or more config data resources.\npublic class ConfigDataLocationNotFoundException extends ConfigDataNotFoundException; // ConfigDataNotFoundException thrown when a ConfigDataLocation cannot be found.\npublic interface ConfigDataLocationResolver<R extends ConfigDataResource>; // Strategy interface used to resolve locations into one or more resources.\npublic interface ConfigDataLocationResolverContext; // Context provided to ConfigDataLocationResolver methods.\npublic enum ConfigDataNotFoundAction extends Enum<ConfigDataNotFoundAction>; // Action to take when an uncaught ConfigDataNotFoundException is thrown.\npublic abstract class ConfigDataNotFoundException extends ConfigDataException implements OriginProvider; // ConfigDataNotFoundException thrown when a ConfigData cannot be found.\npublic abstract class ConfigDataResource extends Object; // A single resource from which ConfigData can be loaded.\n", "des": "External configuration support allowing 'application.properties' to be loaded and used within a Spring Boot application."}
{"index": 3179, "repo": "tomcat-api-10.1", "code": "package valves;\n\nInterface AbstractAccessLogValve.AccessLogElement; // AccessLogElement writes the partial message into the buffer.\nInterface AbstractAccessLogValve.CachedElement; // Marks an AccessLogElement as needing to be have the value cached at the start of the request rather than just recorded at the end as the source data for the element may not be available at the end of the request.\nClass AbstractAccessLogValve; // Abstract implementation of the Valve interface that generates a web server access log with the detailed line contents matching a configurable pattern.\nClass AbstractAccessLogValve.ByteSentElement; // write bytes sent, excluding HTTP headers - %b, %B\nClass AbstractAccessLogValve.ConnectionStatusElement; // Write connection status when response is completed - %X\nClass AbstractAccessLogValve.CookieElement; // write a specific cookie - %{xxx}c\nClass AbstractAccessLogValve.DateFormatCache; // Cache structure for formatted timestamps based on seconds.\nClass AbstractAccessLogValve.ElapsedTimeElement; // write time taken to process the request - %D, %T\nClass AbstractAccessLogValve.FirstByteTimeElement; // write time until first byte is written (commit time) in millis - %F\nClass AbstractAccessLogValve.HeaderElement; // write incoming headers - %{xxx}i\nClass AbstractAccessLogValve.HttpStatusCodeElement; // write HTTP status code of the response - %s\nClass AbstractAccessLogValve.LocalAddrElement; // write local IP address - %A\nClass AbstractAccessLogValve.LogicalUserNameElement; // write remote logical username from identd (always returns '-') - %l\nClass AbstractAccessLogValve.MethodElement; // write request method (GET, POST, etc.) - %m\nClass AbstractAccessLogValve.QueryElement; // write Query string (prepended with a '?'\nClass AbstractAccessLogValve.RequestAttributeElement; // write an attribute in the ServletRequest - %{xxx}r\nClass AbstractAccessLogValve.RequestElement; // write first line of the request (method and request URI) - %r\nClass AbstractAccessLogValve.RequestURIElement; // write requested URL path - %U\nClass AbstractAccessLogValve.ResponseHeaderElement; // write a specific response header - %{xxx}o\n", "des": "This package contains a variety of small Valve implementations that do not warrant being packaged separately."}
{"index": 2335, "repo": "spring-boot-3.1.1", "code": "package pem;\n\npublic class PemSslStoreBundle extends Object implements SslStoreBundle; // SslStoreBundle backed by PEM-encoded certificates and private keys.\npublic record PemSslStoreDetails(String type, String certificate, String privateKey, String privateKeyPassword) extends Record; // Details for an individual trust or key store in a PemSslStoreBundle.\n", "des": "SSL trust material provider for PEM-encoded certificates."}
{"index": 3621, "repo": "solr-test-framework-9.3.0", "code": "package embedded;\n\nClass JettyConfig;\nClass JettyConfig.Builder;\nClass JettySolrRunner; // Run solr using jetty\nClass JettySolrRunner.DebugFilter;\nClass JettySolrRunner.Servlet404; // This is a stupid hack to give jetty something to attach to\n", "des": "Classes for running embedded Solr Jetty Servers in tests."}
{"index": 697, "repo": "jackson-databind-2.15.2", "code": "package util;\n\npackage util.internal; // This package contains an implementation of a bounded ConcurrentMap data structure.\nInterface Annotations; // Interface that defines interface for accessing contents of a collection of annotations.\nInterface Converter<IN,OUT>; // Helper interface for things that convert Objects of one type to another.\nInterface LookupCache<K,V>; // An interface describing the required API for the Jackson-databind Type cache.\nInterface Named; // Simple tag interface mostly to allow sorting by name.\nClass ArrayBuilders; // Helper class that contains set of distinct builders for different arrays of primitive values.\nClass ArrayBuilders.BooleanBuilder;\nClass ArrayBuilders.ByteBuilder;\nClass ArrayBuilders.DoubleBuilder;\nClass ArrayBuilders.FloatBuilder;\nClass ArrayBuilders.IntBuilder;\nClass ArrayBuilders.LongBuilder;\nClass ArrayBuilders.ShortBuilder;\nClass ArrayIterator<T>; // Iterator implementation used to efficiently expose contents of an Array as read-only iterator.\nClass BeanUtil; // Helper class that contains functionality needed by both serialization and deserialization side.\nClass ByteBufferBackedInputStream; // Simple InputStream implementation that exposes currently available content of a ByteBuffer.\nClass ByteBufferBackedOutputStream; // Simple OutputStream implementation that appends content written in given ByteBuffer instance.\nClass ClassUtil;\nClass ClassUtil.Ctor; // Value class used for caching Constructor declarations; used because caching done by JDK appears to be somewhat inefficient for some use cases.\nClass CompactStringObjectMap; // Specialized lookup class that implements functionality similar to Map, but for special case of key always being String and using more compact (and memory-access friendly) hashing scheme.\nClass Converter.None; // This marker class is only to be used with annotations, to indicate that no converter is to be used.\nClass EnumResolver; // Helper class used to resolve String values (either JSON Object field names or regular String values) into Java Enum instances.\nClass EnumValues; // Helper class used for storing String serializations of Enums, to match to/from external representations.\nClass ExceptionUtil; // Utility methods for dealing with exceptions/throwables\nClass IgnorePropertiesUtil;\nClass IgnorePropertiesUtil.Checker; // Helper class to encapsulate logic from static shouldIgnore method of util class.\nClass ISO8601DateFormat; // Use StdDateFormat instead\nClass ISO8601Utils;\n", "des": "Utility classes for Mapper package."}
{"index": 1766, "repo": "spring-data-mongodb-4.1.2", "code": "package monitor;\n\npublic abstract class AbstractMonitor extends Object; // Base class to encapsulate common configuration settings when connecting to a database\n@ManagedResource(description=\"Assertion Metrics\") public class AssertMetrics extends AbstractMonitor; // JMX Metrics for assertions\n@ManagedResource(description=\"Background Flushing Metrics\") public class BackgroundFlushingMetrics extends AbstractMonitor; // JMX Metrics for Background Flushing\n@ManagedResource(description=\"Btree Metrics\") public class BtreeIndexCounters extends AbstractMonitor; // JMX Metrics for B-tree index counters\n@ManagedResource(description=\"Connection metrics\") public class ConnectionMetrics extends AbstractMonitor; // JMX Metrics for Connections\n@ManagedResource(description=\"Global Lock Metrics\") public class GlobalLockMetrics extends AbstractMonitor; // JMX Metrics for Global Locks\n@ManagedResource(description=\"Memory Metrics\") public class MemoryMetrics extends AbstractMonitor; // JMX Metrics for Memory\n@ManagedResource(description=\"Operation Counters\") public class OperationCounters extends AbstractMonitor; // JMX Metrics for Operation counters\n@ManagedResource(description=\"Server Information\") public class ServerInfo extends AbstractMonitor; // Expose basic server information via JMX\n", "des": "MongoDB specific JMX monitoring support."}
{"index": 2181, "repo": "spring-security-web-6.1.2", "code": "package websphere;\n\npublic class WebSpherePreAuthenticatedProcessingFilter extends AbstractPreAuthenticatedProcessingFilter; // This AbstractPreAuthenticatedProcessingFilter implementation is based on WebSphere authentication.\npublic class WebSpherePreAuthenticatedWebAuthenticationDetailsSource extends Object implements org.springframework.security.authentication.AuthenticationDetailsSource<jakarta.servlet.http.HttpServletRequest,PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails>; // This AuthenticationDetailsSource implementation will set the pre-authenticated granted authorities based on the WebSphere groups for the current WebSphere user, mapped using the configured Attributes2GrantedAuthoritiesMapper.\n", "des": "Websphere-specific pre-authentication classes."}
{"index": 2032, "repo": "spring-messaging-6.0.11", "code": "package rsocket;\n\npackage rsocket.annotation; // Annotations and support classes for handling RSocket streams.\npackage rsocket.service; // Annotations to declare an RSocket service contract with request methods along with a proxy factory backed by an RSocketRequester.\npublic class DefaultMetadataExtractor extends Object implements MetadataExtractor, MetadataExtractorRegistry; // Default MetadataExtractor implementation that relies on Decoders to deserialize the content of metadata entries.\npublic interface MetadataExtractor; // Strategy to extract a map of value(s) from Payload metadata, which could be composite metadata with multiple entries.\npublic interface MetadataExtractorRegistry; // Stores registrations of extractors for metadata entries.\npublic abstract class PayloadUtils extends Object; // Static utility methods to create Payload from DataBuffers and vice versa.\n@FunctionalInterface public interface RSocketConnectorConfigurer; // Strategy to apply configuration to an RSocketConnector.\npublic interface RSocketRequester extends reactor.core.Disposable; // A thin wrapper around a sending RSocket with a fluent API accepting and returning higher level Objects for input and for output, along with methods to prepare routing and other metadata.\npublic static interface RSocketRequester.Builder; // Builder to create a requester by connecting to a server.\npublic static interface RSocketRequester.MetadataSpec<S extends RSocketRequester.MetadataSpec<S>>; // Spec for providing additional composite metadata entries.\npublic static interface RSocketRequester.RequestSpec extends RSocketRequester.MetadataSpec<RSocketRequester.RequestSpec>, RSocketRequester.RetrieveSpec; // Spec to declare the input for an RSocket request.\npublic static interface RSocketRequester.RetrieveSpec; // Spec to declare the expected output for an RSocket request.\npublic interface RSocketStrategies; // Access to strategies for use by RSocket requester and responder components.\npublic static interface RSocketStrategies.Builder; // The builder options for creating RSocketStrategies.\n", "des": "Support for the RSocket protocol."}
{"index": 3456, "repo": "hibernate-core-5.6.15.Final", "code": "package id;\n\npackage id.persistent; // Package contains an implementation of MultiTableBulkIdStrategy based on the use of a persistent (ANSI SQL term) table to hold id values.\nInterface AbstractMultiTableBulkIdStrategyImpl.PreparationContext;\nInterface IdTableInfo;\nInterface IdTableSupport;\nInterface MultiTableBulkIdStrategy; // Generalized strategy contract for handling multi-table bulk HQL operations.\nInterface MultiTableBulkIdStrategy.DeleteHandler; // Handler for dealing with multi-table HQL bulk delete statements.\nInterface MultiTableBulkIdStrategy.UpdateHandler; // Handler for dealing with multi-table HQL bulk update statements.\nClass AbstractIdsBulkIdHandler; // Base class for all strategies that select the ids to be updated/deleted prior to executing the update/delete operation.\nClass AbstractMultiTableBulkIdStrategyImpl<TT extends IdTableInfo,​CT extends AbstractMultiTableBulkIdStrategyImpl.PreparationContext>; // Convenience base class for MultiTableBulkIdStrategy implementations.\nClass AbstractTableBasedBulkIdHandler; // Convenience base class for MultiTableBulkIdStrategy.UpdateHandler and MultiTableBulkIdStrategy.DeleteHandler implementations through TableBasedUpdateHandlerImpl and TableBasedDeleteHandlerImpl respectively.\nClass AbstractTableBasedBulkIdHandler.ProcessedWhereClause;\nClass IdTableHelper;\nClass IdTableSupportStandardImpl;\nClass TableBasedDeleteHandlerImpl;\nClass TableBasedUpdateHandlerImpl;\n", "des": "Support for multi-table update and delete statements via id-tables."}
{"index": 1867, "repo": "spring-security-cas-6.1.2", "code": "package authentication;\n\npublic final class CasAssertionAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // Temporary authentication object needed to load the user details service.\npublic class CasAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider, org.springframework.beans.factory.InitializingBean, org.springframework.context.MessageSourceAware; // An AuthenticationProvider implementation that integrates with JA-SIG Central Authentication Service (CAS).\npublic class CasAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken implements Serializable; // Represents a successful CAS Authentication.\npublic class CasServiceTicketAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // An Authentication implementation that is designed to process CAS service ticket.\npublic final class NullStatelessTicketCache extends Object implements StatelessTicketCache; // Implementation of @link StatelessTicketCache that has no backing cache.\npublic class SpringCacheBasedTicketCache extends Object implements StatelessTicketCache; // Caches tickets using a Spring IoC defined Cache.\npublic interface StatelessTicketCache; // Caches CAS service tickets and CAS proxy tickets for stateless connections.\n", "des": "An AuthenticationProvider that can process CAS service tickets and proxy tickets."}
{"index": 2124, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "package bundling;\n\npublic interface BootArchive extends Task; // A Spring Boot \"fat\" archive task.\n@DisableCachingByDefault public abstract class BootBuildImage extends DefaultTask; // A Task for bundling an application into an OCI image using a buildpack.\n@DisableCachingByDefault(because=\"Not worth caching\") public abstract class BootJar extends Jar implements BootArchive; // A custom Jar task that produces a Spring Boot executable jar.\n@DisableCachingByDefault(because=\"Not worth caching\") public abstract class BootWar extends War implements BootArchive; // A custom War task that produces a Spring Boot executable war.\npublic class CacheSpec extends Object; // Configuration for an image building cache.\npublic abstract static class CacheSpec.VolumeCacheSpec extends Object; // Configuration for an image building cache stored in a Docker volume.\npublic abstract class DockerSpec extends Object; // Encapsulates Docker configuration options.\npublic abstract static class DockerSpec.DockerRegistrySpec extends Object; // Encapsulates Docker registry authentication configuration options.\npublic class LaunchScriptConfiguration extends Object implements Serializable; // Encapsulates the configuration of the launch script for an executable jar or war.\npublic abstract class LayeredSpec extends Object; // Encapsulates the configuration for a layered archive.\npublic static class LayeredSpec.ApplicationSpec extends LayeredSpec.IntoLayersSpec<LayeredSpec.IntoLayerSpec>; // An LayeredSpec.IntoLayersSpec that controls the layers to which application classes and resources belong.\npublic static class LayeredSpec.DependenciesIntoLayerSpec extends LayeredSpec.IntoLayerSpec; // Spec that controls the dependencies that should be part of a particular layer.\npublic static class LayeredSpec.DependenciesSpec extends LayeredSpec.IntoLayersSpec<LayeredSpec.DependenciesIntoLayerSpec> implements Serializable; // An LayeredSpec.IntoLayersSpec that controls the layers to which dependencies belong.\npublic static class LayeredSpec.IntoLayerSpec extends Object implements Serializable; // Spec that controls the content that should be part of a particular layer.\npublic abstract static class LayeredSpec.IntoLayersSpec<S extends LayeredSpec.IntoLayerSpec> extends Object implements Serializable; // Base class for specs that control the layers to which a category of content should belong.\npublic enum ZipCompression extends Enum<ZipCompression>; // An enumeration of supported compression options for an entry in a ZIP archive.\n", "des": "Support for creating executable jars and wars."}
{"index": 1196, "repo": "commons-math3-3.6.1", "code": "package direct;\n\nClass AbstractSimplex; // As of 3.1 (to be removed in 4.0).\nClass BaseAbstractMultivariateOptimizer<FUNC extends MultivariateFunction>; // As of 3.1 (to be removed in 4.0).\nClass BaseAbstractMultivariateSimpleBoundsOptimizer<FUNC extends MultivariateFunction>; // As of 3.1 (to be removed in 4.0).\nClass BaseAbstractMultivariateVectorOptimizer<FUNC extends MultivariateVectorFunction>; // As of 3.1 (to be removed in 4.0).\nClass BOBYQAOptimizer; // As of 3.1 (to be removed in 4.0).\nClass CMAESOptimizer; // As of 3.1 (to be removed in 4.0).\nClass CMAESOptimizer.PopulationSize; // Population size.\nClass CMAESOptimizer.Sigma; // Input sigma values.\nClass MultiDirectionalSimplex; // As of 3.1 (to be removed in 4.0).\nClass MultivariateFunctionMappingAdapter; // As of 3.1 (to be removed in 4.0).\nClass MultivariateFunctionPenaltyAdapter; // As of 3.1 (to be removed in 4.0).\nClass NelderMeadSimplex; // As of 3.1 (to be removed in 4.0).\nClass PowellOptimizer; // As of 3.1 (to be removed in 4.0).\nClass SimplexOptimizer; // As of 3.1 (to be removed in 4.0).\n", "des": "This package provides optimization algorithms that don't require derivatives."}
{"index": 1190, "repo": "commons-math3-3.6.1", "code": "package gradient;\n\nInterface Preconditioner; // This interface represents a preconditioner for differentiable scalar objective function optimizers.\nClass NonLinearConjugateGradientOptimizer; // Non-linear conjugate gradient optimizer.\nClass NonLinearConjugateGradientOptimizer.BracketingStep; // As of v3.3, this class is not used anymore.\nClass NonLinearConjugateGradientOptimizer.IdentityPreconditioner; // Default identity preconditioner.\nEnum NonLinearConjugateGradientOptimizer.Formula; // Available choices of update formulas for the updating the parameter that is used to compute the successive conjugate search directions.\n", "des": "This package provides optimization algorithms that require derivatives."}
{"index": 1021, "repo": "commons-email-1.5", "code": "package util;\n\nClass IDNEmailAddressConverter; // Converts email addresses containing International Domain Names into an ASCII representation suitable for sending an email.\nClass MimeMessageParser; // Parses a MimeMessage and stores the individual parts such a plain text, HTML text and attachments.\nClass MimeMessageUtils; // Static helper methods.\n", "des": "This package provides some utility classes."}
{"index": 3410, "repo": "commons-imaging-1.0-alpha3", "code": "package photometricinterpreters;\n\npackage photometricinterpreters.floatingpoint; // Provides supplemental photometric interpreters for TIFF products based on floating-point data.\nClass PhotometricInterpreter; // Interpreter for photometric information in TIFF images.\nClass PhotometricInterpreterBiLevel;\nClass PhotometricInterpreterCieLab;\nClass PhotometricInterpreterCmyk;\nClass PhotometricInterpreterLogLuv; // Photometric interpretation Logluv support.\nClass PhotometricInterpreterPalette;\nClass PhotometricInterpreterRgb;\nClass PhotometricInterpreterYCbCr;\n", "des": "Classes for TIFF photometric interpretation (specifies the intended interpretation of the image pixel data)."}
{"index": 3759, "repo": "lucene-facet-9.7.0", "code": "package directory;\n\nInterface DirectoryTaxonomyWriter.OrdinalMap; // Mapping from old ordinal to new ordinals, used when merging indexes with separate taxonomies.\nClass DirectoryTaxonomyReader; // A TaxonomyReader which retrieves stored taxonomy information from a Directory.\nClass DirectoryTaxonomyWriter; // TaxonomyWriter which uses a Directory to store the taxonomy information on disk, and keeps an additional in-memory cache of some or all categories.\nClass DirectoryTaxonomyWriter.DiskOrdinalMap; // DirectoryTaxonomyWriter.OrdinalMap maintained on file system\nClass DirectoryTaxonomyWriter.MemoryOrdinalMap; // DirectoryTaxonomyWriter.OrdinalMap maintained in memory\n", "des": "Taxonomy index implementation using on top of a Directory."}
{"index": 890, "repo": "commons-jcs3-core-3.1", "code": "package jcs3;\n\npackage jcs3.access; // Contains classes for accessing the cache.\npackage jcs3.auxiliary; // Root package for auxiliary caches.\npackage jcs3.engine; // Interfaces used by the core and the auxiliary caches.\nClass JCS; // Simple class for using JCS.\n", "des": "Contains the class JCS which provides a simple interface for clients to use JCS."}
{"index": 2810, "repo": "spring-integration-ip-6.1.2", "code": "package dsl;\n\npublic abstract class AbstractConnectionFactorySpec<S extends AbstractConnectionFactorySpec<S,C>,C extends AbstractConnectionFactory> extends org.springframework.integration.dsl.IntegrationComponentSpec<S,C>; // An IntegrationComponentSpec for AbstractConnectionFactorys.\npublic abstract class AbstractUdpOutboundChannelAdapterSpec<S extends AbstractUdpOutboundChannelAdapterSpec<S>> extends org.springframework.integration.dsl.MessageHandlerSpec<S,UnicastSendingMessageHandler>; // A MessageHandlerSpec for UDP MessageHandlers.\npublic final class Tcp extends Object; // Factory methods for TCP.\npublic abstract class TcpClientConnectionFactorySpec<S extends TcpClientConnectionFactorySpec<S,C>,C extends AbstractClientConnectionFactory> extends AbstractConnectionFactorySpec<S,C>; // An AbstractConnectionFactorySpec for AbstractClientConnectionFactorys.\npublic class TcpInboundChannelAdapterSpec extends org.springframework.integration.dsl.MessageProducerSpec<TcpInboundChannelAdapterSpec,TcpReceivingChannelAdapter> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessageProducerSpec for TcpReceivingChannelAdapters.\npublic class TcpInboundGatewaySpec extends org.springframework.integration.dsl.MessagingGatewaySpec<TcpInboundGatewaySpec,TcpInboundGateway> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessagingGatewaySpec for TcpInboundGateways.\npublic class TcpNetClientConnectionFactorySpec extends TcpClientConnectionFactorySpec<TcpNetClientConnectionFactorySpec,TcpNetClientConnectionFactory>; // TcpClientConnectionFactorySpec for TcpNetClientConnectionFactorys.\npublic class TcpNetServerConnectionFactorySpec extends TcpServerConnectionFactorySpec<TcpNetServerConnectionFactorySpec,TcpNetServerConnectionFactory>; // TcpServerConnectionFactorySpec for TcpNetServerConnectionFactorys.\npublic class TcpNioClientConnectionFactorySpec extends TcpClientConnectionFactorySpec<TcpNioClientConnectionFactorySpec,TcpNioClientConnectionFactory>; // TcpClientConnectionFactorySpec for TcpNioClientConnectionFactorys.\npublic class TcpNioServerConnectionFactorySpec extends TcpServerConnectionFactorySpec<TcpNioServerConnectionFactorySpec,TcpNioServerConnectionFactory>; // TcpServerConnectionFactorySpec for TcpNioServerConnectionFactorys.\n", "des": "Provides TCP/UDP Component support for the Java DSL."}
{"index": 1368, "repo": "log4j-over-slf4j-2.0.7", "code": "package log4j;\n\npublic interface Appender; // Implement this interface for your own strategies for outputting log statements.\npublic class AppenderSkeleton extends Object implements OptionHandler;\npublic class BasicConfigurator extends Object; // A minimal (nop) implementation of BasicConfigurator.\npublic class Category extends Object; // This class is a minimal implementation of the original org.apache.log4j.Category class (as found in log4j 1.2) by delegation of all calls to a Logger instance.\npublic class ConsoleAppender extends WriterAppender; // Skeleton implementation of ConsoleAppender\npublic class FileAppender extends WriterAppender;\npublic class Layout extends Object; // This class is a minimal implementation of the original Log4J class.\npublic class Level extends Priority implements Serializable; // Defines the minimum set of levels recognized by the system, that is OFF, FATAL, ERROR, WARN, INFO, DEBUG and ALL.\npublic class Logger extends Category; // This class is a minimal implementation of the original org.apache.log4j.Logger class (as found in log4j 1.2) delegating all calls to a Logger instance.\npublic class LogManager extends Object; // This class is a minimal implementation of the original org.apache.log4j.LogManager class (as found in log4j 1.2) delegating all calls to SLF4J.\npublic class MDC extends Object;\npublic class NDC extends Object; // A log4j's NDC implemented in terms of SLF4J MDC primitives.\npublic class PatternLayout extends Layout; // This class is a minimal implementation of the original Log4J class.\npublic class Priority extends Object; // Refrain from using this class directly, use the Level class instead.\npublic class PropertyConfigurator extends Object implements Configurator; // A no-op implementation of PropertyConfigurator.\npublic class RollingFileAppender extends Object; // This class is a minimal implementation of the original Log4J class.\npublic class SimpleLayout extends Layout;\npublic class WriterAppender extends AppenderSkeleton;\n", "des": "An rather minimal but sufficient implementation redirecting all calls to a log4j logger to a logback logger."}
{"index": 209, "repo": "nutch-2.4", "code": "package hbase;\n\nClass HBaseIndexWriter;\nClass HBaseMappingReader;\n", "des": "Index writer plugin for Apache HBase."}
{"index": 3758, "repo": "lucene-facet-9.7.0", "code": "package taxonomy;\n\npackage taxonomy.directory; // Taxonomy index implementation using on top of a Directory.\npackage taxonomy.writercache; // Improves indexing time by caching a map of CategoryPath to their Ordinal.\nInterface TaxonomyWriter; // TaxonomyWriter is the interface which the faceted-search library uses to dynamically build the taxonomy at indexing time.\nClass AssociationAggregationFunction; // Specify aggregation logic used in TaxonomyFacetIntAssociations and TaxonomyFacetFloatAssociations.\nClass AssociationFacetField; // Add an instance of this to your Document to add a facet label associated with an arbitrary byte[].\nClass BackCompatSortedNumericDocValues;\nClass CachedOrdinalsReader;\nClass CachedOrdinalsReader.CachedOrds; // Holds the cached ordinals in two parallel int[] arrays.\nClass DocValuesOrdinalsReader;\nClass FacetLabel; // Holds a sequence of string components, specifying the hierarchical name of a category.\nClass FastTaxonomyFacetCounts; // Computes facets counts, assuming the default encoding into DocValues was used.\nClass FloatAssociationFacetField; // Add an instance of this to your Document to add a facet label associated with a float.\nClass FloatTaxonomyFacets;\nClass IntAssociationFacetField; // Add an instance of this to your Document to add a facet label associated with an int.\nClass IntTaxonomyFacets;\nClass LRUHashMap<K,​V>; // LRUHashMap is an extension of Java's HashMap, which has a bounded size(); When it reaches that size, each time a new element is added, the least recently used (LRU) entry is removed.\nClass OrdinalMappingLeafReader; // A FilterLeafReader for updating facets ordinal references, based on an ordinal map.\nClass OrdinalsReader;\nClass OrdinalsReader.OrdinalsSegmentReader; // Returns ordinals for documents in one segment.\nClass ParallelTaxonomyArrays; // Returns 3 arrays for traversing the taxonomy: parents: parents[i] denotes the parent of category ordinal i.\nClass PrintTaxonomyStats; // Prints how many ords are under each dimension.\nClass SearcherTaxonomyManager; // Manages near-real-time reopen of both an IndexSearcher and a TaxonomyReader.\n", "des": "Taxonomy of Categories."}
{"index": 94, "repo": "ignite-core-2.15.0", "code": "package jdbc;\n\nInterface JdbcIpFinderDialect; // SQL dialect to use with TcpDiscoveryJdbcIpFinder.\nClass BasicJdbcIpFinderDialect; // Basic JDBC dialect to use along with TcpDiscoveryJdbcIpFinder.\nClass OracleJdbcIpFinderDialect; // Oracle JDBC dialect to use along with TcpDiscoveryJdbcIpFinder.\nClass TcpDiscoveryJdbcIpFinder; // JDBC-based IP finder.\n", "des": "Contains JDBC IP finder implementation."}
{"index": 3776, "repo": "lucene-analysis-common-9.7.0", "code": "package cz;\n\nClass CzechAnalyzer; // Analyzer for Czech language.\nClass CzechStemFilter; // A TokenFilter that applies CzechStemmer to stem Czech words.\nClass CzechStemFilterFactory; // Factory for CzechStemFilter.\nClass CzechStemmer; // Light Stemmer for Czech.\n", "des": "Analyzer for Czech."}
{"index": 3351, "repo": "opencms-core-15.0", "code": "package editors;\n\npackage editors.messagebundle; // The data bindings and logic for the translator editor.\nInterface I_CmsEditor; // Interface for resource editors.\nClass A_CmsFrameEditor; // Class to extended by frame based editors.\nClass CmsAcaciaEditor; // The acacia XML content editor.\nClass CmsEditorStateExtension; // Extension for iFrame embedded editors storing the changed state of the edited content.\nClass CmsSourceEditor; // The plain text editor.\nClass CmsSourceEditor.EditorSettings; // Stores the editor settings.\nClass CmsXmlContentEditor; // The acacia XML content editor.\nClass CmsXmlPageEditor; // The acacia XML content editor.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "The available content editors."}
{"index": 1112, "repo": "fontbox-3.0.0-beta1", "code": "package autodetect;\n\nInterface FontDirFinder; // Implementers provide find method for searching native operating system for available fonts.\nClass FontFileFinder; // Helps to autodetect/locate available operating system fonts.\nClass MacFontDirFinder; // Mac font directory finder.\nClass NativeFontDirFinder; // Native font finder base class.\nClass OS400FontDirFinder; // Font finder for OS/400 systems.\nClass UnixFontDirFinder; // Unix font directory finder.\nClass WindowsFontDirFinder; // FontFinder for native Windows platforms.\n", "des": "This package contains utility classes to manage local fonts."}
{"index": 1874, "repo": "shiro-core-2.0.0-alpha-2", "code": "package pam;\n\npublic abstract class AbstractAuthenticationStrategy extends Object implements AuthenticationStrategy; // Abstract base implementation for Shiro's concrete AuthenticationStrategy implementations.\npublic class AllSuccessfulStrategy extends AbstractAuthenticationStrategy; // AuthenticationStrategy implementation that requires all configured realms to successfully process the submitted AuthenticationToken during the log-in attempt.\npublic class AtLeastOneSuccessfulStrategy extends AbstractAuthenticationStrategy; // AuthenticationStrategy implementation that requires at least one configured realm to successfully process the submitted AuthenticationToken during the log-in attempt.\npublic interface AuthenticationStrategy; // A AuthenticationStrategy implementation assists the ModularRealmAuthenticator during the log-in process in a pluggable realm (PAM) environment.\npublic class FirstSuccessfulStrategy extends AbstractAuthenticationStrategy; // AuthenticationStrategy implementation that only accepts the account data from the first successfully consulted Realm and ignores all subsequent realms.\npublic class ModularRealmAuthenticator extends AbstractAuthenticator; // A ModularRealmAuthenticator delegates account lookups to a pluggable (modular) collection of Realms.\npublic class ShortCircuitIterationException extends AuthenticationException; // Exception thrown during the authentication process using FirstSuccessfulStrategy, with stopAfterFirstSuccess set.\npublic class UnsupportedTokenException extends AuthenticationException; // Exception thrown during the authentication process when an AuthenticationToken implementation is encountered that is not supported by one or more configured Realms.\n", "des": "Support for PAM, or Pluggable Authentication Modules, which is the capability to authenticate a user against multiple configurable (pluggable) modules (Shiro calls these Realms)."}
{"index": 1978, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package servlet;\n\npublic class AntPathRequestMatcherProvider extends Object implements RequestMatcherProvider; // RequestMatcherProvider that provides an AntPathRequestMatcher.\npublic final class PathRequest extends Object; // Factory that can be used to create a RequestMatcher for commonly used paths.\npublic static final class PathRequest.H2ConsoleRequestMatcher extends org.springframework.boot.security.servlet.ApplicationContextRequestMatcher<H2ConsoleProperties>; // The request matcher used to match against h2 console path.\n@FunctionalInterface public interface RequestMatcherProvider; // Interface that can be used to provide a RequestMatcher that can be used with Spring Security.\n@AutoConfiguration(before=UserDetailsServiceAutoConfiguration.class) @ConditionalOnClass(org.springframework.security.authentication.DefaultAuthenticationEventPublisher.class) @EnableConfigurationProperties(SecurityProperties.class) @Import({org.springframework.boot.autoconfigure.security.servlet.SpringBootWebSecurityConfiguration.class,SecurityDataConfiguration.class}) public class SecurityAutoConfiguration extends Object; // Auto-configuration for Spring Security.\n@AutoConfiguration(after=SecurityAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @EnableConfigurationProperties(SecurityProperties.class) @ConditionalOnClass({org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer.class,org.springframework.security.config.http.SessionCreationPolicy.class}) public class SecurityFilterAutoConfiguration extends Object; // Auto-configuration for Spring Security's Filter.\npublic final class StaticResourceRequest extends Object; // Used to create a RequestMatcher for static resources in commonly used locations.\npublic static final class StaticResourceRequest.StaticResourceRequestMatcher extends org.springframework.boot.security.servlet.ApplicationContextRequestMatcher<DispatcherServletPath>; // The request matcher used to match against resource Locations.\n", "des": "Auto-configuration for Servlet-based Spring Security."}
{"index": 3819, "repo": "lucene-analysis-common-9.7.0", "code": "package word2vec;\n\nClass Dl4jModelReader; // Dl4jModelReader reads the file generated by the library Deeplearning4j and provide a Word2VecModel with normalized vectors\nClass TermAndBoost; // Wraps a term and boost\nClass Word2VecModel; // Word2VecModel is a class representing the parsed Word2Vec model containing the vectors for each word in dictionary\nClass Word2VecSynonymFilter; // Applies single-token synonyms from a Word2Vec trained network to an incoming TokenStream.\nClass Word2VecSynonymFilterFactory; // Factory for Word2VecSynonymFilter.\nClass Word2VecSynonymProvider; // The Word2VecSynonymProvider generates the list of sysnonyms of a term.\nClass Word2VecSynonymProviderFactory; // Supply Word2Vec Word2VecSynonymProvider cache avoiding that multiple instances of Word2VecSynonymFilterFactory will instantiate multiple instances of the same SynonymProvider.\n", "des": "Analysis components for Synonyms using Word2Vec model."}
{"index": 1573, "repo": "spring-restdocs-core-3.0.0", "code": "package mustache;\n\npublic final class AsciidoctorTableCellContentLambda extends Object implements org.springframework.restdocs.mustache.Mustache.Lambda; // A Mustache.Lambda that escapes | characters so that the do not break the table's formatting.\npublic class MustacheTemplate extends Object implements Template; // An adapter that exposes a compiled Mustache template as a Template.\npublic class MustacheTemplateEngine extends Object implements TemplateEngine; // A Mustache-based TemplateEngine implemented using JMustache.\n", "des": "JMustache-based implementation of the template API."}
{"index": 2872, "repo": "spring-integration-core-6.1.2", "code": "package support;\n\npublic final class JsonHeaders extends Object; // Pre-defined names and prefixes to be used for setting and/or retrieving JSON entries from/to Message Headers and other adapter, e.g.\n", "des": "Support classes for mapping."}
{"index": 2104, "repo": "spring-webflux-6.0.11", "code": "package view;\n\npackage view.freemarker; // Support classes for the integration of FreeMarker as Spring web view technology.\npackage view.script; // Support classes for views based on the JSR-223 script engine abstraction (as included in Java 6+), e.g.\npublic abstract class AbstractUrlBasedView extends AbstractView implements org.springframework.beans.factory.InitializingBean; // Abstract base class for URL-based views.\npublic abstract class AbstractView extends Object implements View, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationContextAware; // Base class for View implementations.\npublic class BindStatus extends Object; // Simple adapter to expose the bind status of a field or object.\npublic class HttpMessageWriterView extends Object implements View; // View that writes model attribute(s) with an HttpMessageWriter.\npublic class RedirectView extends AbstractUrlBasedView; // View that redirects to an absolute or context relative URL.\npublic interface Rendering; // Public API for HTML rendering.\npublic static interface Rendering.Builder<B extends Rendering.Builder<B>>; // Defines a builder for Rendering.\npublic static interface Rendering.RedirectBuilder extends Rendering.Builder<Rendering.RedirectBuilder>; // Extends Rendering.Builder with extra options for redirect scenarios.\npublic class RequestContext extends Object; // Context holder for request-specific state, like the MessageSource to use, current locale, binding errors, etc.\npublic interface RequestDataValueProcessor; // A contract for inspecting and potentially modifying request data values such as URL query parameters or form field values before they are rendered by a view or before a redirect.\npublic class UrlBasedViewResolver extends ViewResolverSupport implements ViewResolver, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // A ViewResolver that allows direct resolution of symbolic view names to URLs without explicit mapping definitions.\npublic interface View; // Contract to render HandlerResult to the HTTP response.\n", "des": "Support for result handling through view resolution."}
{"index": 1302, "repo": "groovy-all-4.0.13", "code": "package jmx;\n\npackage jmx.builder; // Classes for the JMX Builder.\npublic class GroovyMBean extends GroovyObjectSupport; // A GroovyObject facade for an underlying MBean which acts like a normal groovy object but which is actually implemented via an underlying JMX MBean.\n", "des": "Classes for working with the Java Management Extensions (JMX) technology."}
{"index": 1882, "repo": "shiro-core-2.0.0-alpha-2", "code": "package jndi;\n\npublic interface JndiCallback; // Callback interface to be implemented by classes that need to perform an operation (such as a lookup) in a JNDI context.\npublic class JndiLocator extends Object; // Convenient superclass for JNDI accessors, providing \"jndiTemplate\" and \"jndiEnvironment\" bean properties.\npublic class JndiObjectFactory<T> extends JndiLocator implements org.apache.shiro.lang.util.Factory<T>; // A factory implementation intended to be used to look up objects in jndi.\npublic class JndiTemplate extends Object; // Helper class that simplifies JNDI operations.\n", "des": "Enables accessing objects located in JNDI that might be useful when configuring a Shiro-enabled application."}
{"index": 3177, "repo": "tomcat-api-10.1", "code": "package ssi;\n\nInterface SSICommand; // The interface that all SSI commands ( SSIEcho, SSIInclude, ...) must implement.\nInterface SSIExternalResolver; // Interface used by SSIMediator to talk to the 'outside world' ( usually a servlet )\nClass ByteArrayServletOutputStream; // Class that extends ServletOutputStream, used as a wrapper from within SsiInclude\nClass ExpressionParseTree; // Represents a parsed expression.\nClass ExpressionTokenizer; // Parses an expression string to return the individual tokens.\nClass ResponseIncludeWrapper; // An HttpServletResponseWrapper, used from SSIServletExternalResolver\nClass SSIConditional; // SSI command that handles all conditional directives.\nClass SSIConfig; // Implements the Server-side #exec command\nClass SSIEcho; // Return the result associated with the supplied Server Variable.\nClass SSIExec; // Implements the Server-side #exec command\nClass SSIFilter; // Filter to process SSI requests within a webpage.\nClass SSIFlastmod; // Implements the Server-side #flastmod command\nClass SSIFsize; // Implements the Server-side #fsize command\nClass SSIInclude; // Implements the Server-side #include command\nClass SSIMediator; // Allows the different SSICommand implementations to share data/talk to each other\nClass SSIPrintenv; // Implements the Server-side #printenv command\nClass SSIProcessor; // The entry point to SSI processing.\nClass SSIServlet; // Servlet to process SSI requests within a webpage.\nClass SSIServletExternalResolver; // An implementation of SSIExternalResolver that is used with servlets.\nClass SSIServletExternalResolver.ServletContextAndPath;\nClass SSIServletRequestUtil;\nClass SSISet; // Implements the Server-side #set command\nClass SSIStopProcessingException; // Exception used to tell SSIProcessor that it should stop processing SSI commands.\n", "des": "This package contains code that is used by the SsiInvoker."}
{"index": 1369, "repo": "spring-boot-actuator-3.1.1", "code": "package amqp;\n\npublic class RabbitHealthIndicator extends AbstractHealthIndicator; // Simple implementation of a HealthIndicator returning status information for the RabbitMQ messaging system.\n", "des": "Actuator support for AMQP and RabbitMQ."}
{"index": 367, "repo": "commons-geometry-euclidean-1.0", "code": "package rotation;\n\nInterface Rotation3D; // Interface representing a generic rotation in 3-dimensional Euclidean space.\nClass AxisAngleSequence; // Class representing a sequence of axis-angle rotations.\nClass QuaternionRotation; // Class using a unit-length quaternion to represent rotations in 3-dimensional Euclidean space.\nEnum AxisReferenceFrame; // Enum defining the possible reference frames for locating axis positions during a rotation sequence.\nEnum AxisSequence; // Enum containing rotation axis sequences for use in defining 3 dimensional rotations.\nEnum AxisSequenceType; // Defines different types of rotation axis sequences.\n", "des": "This package provides components related to rotations in 3 dimensional Euclidean space."}
{"index": 710, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package jpa;\n\nClass Jpa; // Factory class for JPA components.\nClass JpaBaseOutboundEndpointSpec<S extends JpaBaseOutboundEndpointSpec<S>>; // The base MessageHandlerSpec for JPA Outbound endpoints.\nClass JpaInboundChannelAdapterSpec; // A MessageSourceSpec for a JpaPollingChannelAdapter.\nClass JpaRetrievingOutboundGatewaySpec; // A JpaBaseOutboundEndpointSpec extension for the JpaOutboundGateway with OutboundGatewayType.RETRIEVING mode.\nClass JpaUpdatingOutboundEndpointSpec; // A JpaBaseOutboundEndpointSpec extension for the updating JpaOutboundGateway mode.\n", "des": "Provides JPA Components support for Spring Integration Java DSL."}
{"index": 3202, "repo": "tomcat-api-10.1", "code": "package servlet;\n\nClass ServletRequestContext; // Provides access to the request information needed for a request made to an HTTP servlet.\n", "des": "An implementation of FileUpload for use in servlets conforming to JSR 53."}
{"index": 3875, "repo": "solr-ltr-9.3.0", "code": "package interleaving;\n\npackage interleaving.algorithms; // Contains Various Interleaving Algorithms\nInterface Interleaving; // Interleaving considers two ranking models: modelA and modelB. For a given query, each model returns its ranked list of documents La = (a1,a2,...) and Lb = (b1, b2, ...). An Interleaving algorithm creates a unique ranked list I = (i1, i2, ...). This list is created by interleaving elements from the two lists la and lb as described by the implementation algorithm. Each element Ij is labelled TeamA if it is selected from La and TeamB if it is selected from Lb.\nClass InterleavingResult;\nClass LTRInterleavingQuery; // A learning to rank Query with Interleaving, will incapsulate two models, and delegate to it the rescoring of the documents.\nClass LTRInterleavingRescorer; // Implements the rescoring logic.\nClass LTRInterleavingScoringQuery;\nClass OriginalRankingLTRScoringQuery;\n", "des": "Contains Various Interleaving auxiliary classes"}
{"index": 1006, "repo": "spring-ws-3.0.10.RELEASE", "code": "package wsdl;\n\npackage wsdl.wsdl11; // Contains interfaces and classes specific to WSDL 1.1.\nInterface WsdlDefinition; // Represents an abstraction for WSDL definitions.\nClass WsdlDefinitionException; // Base class for all WSDL definition exceptions.\n", "des": "Provides the WSDL functionality of the Spring Web Services framework."}
{"index": 423, "repo": "mahout-mr-0.13.0", "code": "package sgd;\n\nInterface Gradient; // Provides the ability to inject a gradient into the SGD logistic regresion.\nInterface PriorFunction; // A prior is used to regularize the learning algorithm.\nInterface RecordFactory; // A record factor understands how to convert a line of data into fields and then into a vector.\nClass AbstractOnlineLogisticRegression; // Generic definition of a 1 of n logistic regression classifier that returns probabilities in response to a feature vector.\nClass AdaptiveLogisticRegression; // This is a meta-learner that maintains a pool of ordinary OnlineLogisticRegression learners.\nClass AdaptiveLogisticRegression.TrainingExample;\nClass AdaptiveLogisticRegression.Wrapper; // Provides a shim between the EP optimization stuff and the CrossFoldLearner.\nClass CrossFoldLearner; // Does cross-fold validation of log-likelihood and AUC on several online logistic regression models.\nClass CsvRecordFactory; // Converts CSV data lines to vectors.\nClass DefaultGradient; // Implements the basic logistic training law.\nClass ElasticBandPrior; // Implements a linear combination of L1 and L2 priors.\nClass GradientMachine; // Online gradient machine learner that tries to minimize the label ranking hinge loss.\nClass L1; // Implements the Laplacian or bi-exponential prior.\nClass L2; // Implements the Gaussian prior.\nClass MixedGradient; // Provides a stochastic mixture of ranking updates and normal logistic updates.\nClass ModelDissector; // Uses sample data to reverse engineer a feature-hashed model.\nClass ModelDissector.Weight;\nClass ModelSerializer; // Provides the ability to store SGD model-related objects as binary files.\nClass OnlineLogisticRegression; // Extends the basic on-line logistic regression learner with a specific set of learning rate annealing schedules.\nClass PassiveAggressive; // Online passive aggressive learner that tries to minimize the label ranking hinge loss.\nClass PolymorphicWritable; // Utilities that write a class name and then serialize using writables.\nClass RankingGradient; // Uses the difference between this instance and recent history to get a gradient that optimizes ranking performance.\nClass TPrior; // Provides a t-distribution as a prior.\n", "des": "Implements a variety of on-line logistric regression classifiers using SGD-based algorithms."}
{"index": 530, "repo": "commons-vfs2-2.9.0", "code": "package ram;\n\nClass RamFileObject; // A RAM File contains a single RAM FileData instance, it provides methods to access the data by implementing FileObject interface.\nClass RamFileOutputStream; // OutputStream to a RamFile.\nClass RamFileProvider; // RAM File Provider.\nClass RamFileRandomAccessContent; // RAM File Random Access Content.\nClass RamFileSystem; // A RAM File System.\nClass RamFileSystemConfigBuilder; // Config Builder for the RAM file system.\n", "des": "The RAM File Provider."}
{"index": 3006, "repo": "spring-web-6.0.11", "code": "package xml;\n\npublic class Jaxb2XmlDecoder extends org.springframework.core.codec.AbstractDecoder<Object>; // Decode from a bytes stream containing XML elements to a stream of Objects (POJOs).\npublic class Jaxb2XmlEncoder extends org.springframework.core.codec.AbstractSingleValueEncoder<Object>; // Encode from single value to a byte stream containing XML elements.\npublic class XmlEventDecoder extends org.springframework.core.codec.AbstractDecoder<XMLEvent>; // Decodes a DataBuffer stream into a stream of XMLEvents.\n", "des": "XML encoder and decoder support."}
{"index": 3099, "repo": "spring-ws-core-4.0.5", "code": "package provider;\n\npublic abstract class AbstractPortTypesProvider extends Object implements PortTypesProvider; // Abstract base class for PortTypesProvider implementations.\npublic interface BindingsProvider; // Strategy for adding Bindings to a Definition.\npublic class DefaultConcretePartProvider extends Object implements BindingsProvider, ServicesProvider; // Default implementation of the BindingsProvider and ServicesProvider interfaces.\npublic class DefaultMessagesProvider extends Object implements MessagesProvider; // Default implementation of the MessagesProvider.\npublic interface ImportsProvider; // Strategy for adding Imports to a Definition.\npublic class InliningXsdSchemaTypesProvider extends org.springframework.xml.transform.TransformerObjectSupport implements TypesProvider; // Implementation of TypesProvider that inlines a XsdSchema or XsdSchemaCollection into the WSDL.\npublic interface MessagesProvider; // Strategy for adding Messages to a Definition.\npublic interface PortTypesProvider; // Strategy for adding PortTypes to a Definition.\npublic interface ServicesProvider; // Strategy for adding Services to a Definition.\npublic class Soap11Provider extends DefaultConcretePartProvider; // Implementation of the BindingsProvider and ServicesProvider interfaces that are SOAP 1.1 specific.\npublic class Soap12Provider extends DefaultConcretePartProvider; // Implementation of the BindingsProvider and ServicesProvider interfaces that are SOAP 1.2 specific.\npublic class SoapProvider extends Object implements BindingsProvider, ServicesProvider; // Implementation of the BindingsProvider and ServicesProvider interfaces that supports SOAP 1.1 and SOAP 1.2.\npublic class SuffixBasedMessagesProvider extends DefaultMessagesProvider; // Implementation of the MessagesProvider interface that is based on suffixes.\npublic class SuffixBasedPortTypesProvider extends AbstractPortTypesProvider; // Implementation of the PortTypesProvider interface that is based on suffixes.\npublic interface TypesProvider; // Strategy for adding Types to a Definition.\n", "des": "Provides a contribution strategy for WSDL definitions."}
{"index": 1327, "repo": "groovy-all-4.0.13", "code": "package ast;\n\npackage ast.expr; // AST nodes for Groovy expressions\npackage ast.stmt; // AST nodes for Groovy statements\npublic class AnnotatedNode extends ASTNode implements GroovydocHolder<AnnotatedNode>; // Base class for any AST node which is capable of being annotated\npublic class AnnotationNode extends ASTNode; // Represents an annotation which can be attached to interfaces, classes, methods, fields, parameters, and other places.\npublic class ASTNode extends Object implements NodeMetaDataHandler; // Base class for any AST node.\npublic class AstToTextHelper extends Object; // Helper class for converting AST into text.\npublic abstract class ClassCodeExpressionTransformer extends ClassCodeVisitorSupport implements ExpressionTransformer; // Transforms expressions in a whole class.\npublic abstract class ClassCodeVisitorSupport extends CodeVisitorSupport implements ErrorCollecting, GroovyClassVisitor;\npublic class ClassHelper extends Object; // Helper for ClassNode and classes handling them.\npublic class ClassNode extends AnnotatedNode; // Represents a class in the AST.\npublic abstract class CodeVisitorSupport extends Object implements GroovyCodeVisitor; // Abstract base class for any GroovyCodeVisitor which by default just walks the code and expression tree\npublic class CompileUnit extends Object implements NodeMetaDataHandler; // Represents the entire contents of a compilation step which consists of one or more ModuleNode instances.\npublic class ConstructorNode extends MethodNode; // Represents a constructor declaration\npublic class DynamicVariable extends Object implements Variable;\npublic class EnumConstantClassNode extends InnerClassNode; // Represents the anonymous inner class for an enum constant.\npublic class FieldNode extends AnnotatedNode implements Variable; // Represents a field (member variable)\npublic class GenericsType extends ASTNode; // This class is used to describe generic type signatures for ClassNodes.\npublic static class GenericsType.GenericsTypeName extends Object; // Represents GenericsType name.\npublic interface GroovyClassVisitor; // A special visitor for working with the structure of a class.\npublic interface GroovyCodeVisitor; // An implementation of the visitor pattern for working with ASTNodes.\npublic class GroovyCodeVisitorAdapter extends Object implements GroovyCodeVisitor;\npublic class ImportNode extends AnnotatedNode; // Represents an import statement.\npublic class InnerClassNode extends ClassNode; // Represents an inner class declaration\n", "des": "Groovy AST nodes for the syntax of the language"}
{"index": 1870, "repo": "shiro-core-2.0.0-alpha-2", "code": "package shiro;\n\npackage shiro.aop; // Components used to support the framework's AOP/interception support classes.\npackage shiro.authc; // Core interfaces and exceptions concerning Authentication (the act of logging-in).\npackage shiro.authz; // Core interfaces and exceptions supporting Authorization (access control).\npackage shiro.concurrent; // Executor, ExecutorService, and ScheduledExecutorService implementations for transparent Subject association with threads in an asynchronous execution environment.\npackage shiro.dao; // Package containing various components useful when building Data Access Objects (DAOs), including a generic Data Access Exception hierarchy.\npackage shiro.env; // Concepts used to represent Shiro's aggregate state in an application.\npackage shiro.jndi; // Enables accessing objects located in JNDI that might be useful when configuring a Shiro-enabled application.\npackage shiro.mgt; // Provides the master SecurityManager interface and a default implementation hierarchy for managing all aspects of Shiro's functionality in an application.\npackage shiro.realm; // Components and sub-packages used in supporting the core Realm interface.\npackage shiro.session; // Components related to managing sessions, the time-based data contexts in which a Subject interacts with an application.\npackage shiro.subject; // Components supporting the Subject interface, the most important concept in Shiro's API.\npackage shiro.util; // Your run-of-the-mill 'util' package for components and logic widely used across the framework that can't find their home into a proper OO hierarchy (or, most likely for things used across many hierarchies).\npublic abstract class SecurityUtils extends Object; // Accesses the currently accessible Subject for the calling code depending on runtime environment.\npublic class UnavailableSecurityManagerException extends org.apache.shiro.lang.ShiroException; // Exception thrown when attempting to acquire the application's SecurityManager instance, but Shiro's lookup heuristics cannot find one.\n", "des": "This package primarily exists as a root classpath distinction, but it does contain two core classes widely used by applications, SecurityUtils and ShiroException."}
{"index": 3375, "repo": "opencms-core-15.0", "code": "package scheduler;\n\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "This package contains the tool classes for the job management related administration views."}
{"index": 823, "repo": "calcite-core-1.34.0", "code": "package clone;\n\nClass CloneSchema; // Schema that contains in-memory copies of tables from a JDBC schema.\nClass CloneSchema.Factory; // Schema factory that creates a CloneSchema.\n", "des": "Provides utility classes."}
{"index": 933, "repo": "commons-compress-1.23.0", "code": "package bytecode;\n\npackage bytecode.forms; // Internal package.\nClass AnnotationDefaultAttribute; // AnnotationDefault class file attribute\nClass AnnotationsAttribute; // Abstract superclass for Annotations attributes\nClass AnnotationsAttribute.Annotation; // Class to represent the annotation structure for class file attributes\nClass AnnotationsAttribute.ElementValue;\nClass Attribute; // Abstract superclass for class file attributes\nClass BCIRenumberedAttribute; // Abstract superclass for attributes that have some part encoded with a BCI renumbering\nClass ByteCode; // A bytecode class file entry.\nClass ClassConstantPool; // The Class constant pool\nClass ClassFile; // ClassFile is used to represent and write out Java class files.\nClass ClassFileEntry; // The abstract superclass for all types of class file entries.\nClass CodeAttribute;\nClass ConstantPoolEntry; // Abstract superclass for constant pool entries\nClass ConstantValueAttribute; // An Attribute representing a constant.\nClass CPClass; // Constant pool entry for a class\nClass CPConstant; // Abstract superclass for constant pool constant entries such as numbers or Strings\nClass CPConstantNumber; // Abstract superclass for constant pool entries that are numbers.\nClass CPDouble; // Double constant pool entry.\nClass CPField; // Field constant pool entry.\nClass CPFieldRef; // Field reference constant pool entry.\nClass CPFloat; // Float constant pool entry.\nClass CPInteger; // Integer constant pool entry.\nClass CPInterfaceMethodRef; // Interface method reference constant pool entry.\nClass CPLong; // Long constant pool entry.\nClass CPMember; // Superclass for member constant pool entries, such as fields or methods.\nClass CPMethod; // Method constant pool entry.\nClass CPMethodRef; // Method reference constant pool entry.\nClass CPNameAndType; // Name and Type pair constant pool entry.\nClass CPRef; // Abstract superclass for reference constant pool entries, such as a method or field reference.\nClass CPString; // String constant pool entry.\nClass CPUTF8; // UTF8 constant pool entry, used for storing long Strings.\nClass DeprecatedAttribute; // Deprecated class file attribute.\nClass EnclosingMethodAttribute; // Enclosing method class file attribute.\nClass ExceptionsAttribute; // Exceptions class file attribute\nClass ExceptionTableEntry; // An entry in an exception table.\nClass InnerClassesAttribute; // Inner classes class file attribute\nClass LineNumberTableAttribute; // Line number table\n", "des": "Internal package."}
{"index": 1071, "repo": "hadoop-yarn-common-3.3.6", "code": "package impl;\n\nClass DirectTimelineWriter; // A simple writer class for storing Timeline data into Leveldb store.\nClass FileSystemTimelineWriter; // A simple writer class for storing Timeline data in any storage that implements a basic FileSystem interface.\nClass TimelineClientImpl;\nClass TimelineConnector; // Utility Connector class which is used by timeline clients to securely get connected to the timeline server.\nClass TimelineConnector.TimelineClientRetryOp; // Abstract class for an operation that should be retried by timeline client.\nClass TimelineConnector.TimelineClientRetryOpForOperateDelegationToken;\nClass TimelineReaderClientImpl; // Implementation of TimelineReaderClient interface.\nClass TimelineV2ClientImpl; // Implementation of timeline v2 client interface.\nClass TimelineWriter; // Base writer class to write the Timeline data.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 3519, "repo": "opennlp-tools-2.2.0", "code": "package frenchtreebank;\n\nClass ConstitParseSampleStream;\nClass ConstitParseSampleStreamFactory; // Note: Do not use this class, internal use only!\n", "des": "Experimental package related to the French Treebank format."}
{"index": 745, "repo": "spring-data-solr-4.3.15", "code": "package config;\n\nClass EmbeddedSolrServerBeanDefinitionParser; // Implementation of BeanDefinitionParser that parses embedded-solr-server element.\nClass HttpSolrClientBeanDefinitionParser; // HttpSolrClientBeanDefinitionParser replaces HttpSolrServerBeanDefinitionParser from version 1.x.\n", "des": "Config support for SolrClient."}
{"index": 3344, "repo": "opencms-core-15.0", "code": "package fileselect;\n\nInterface I_CmsSelectionHandler<T>; // Handles selection of a generic type T.\nClass A_CmsFileSelectField<T>; // Abstract file select field.\nClass CmsNavigationFilter; // Filter used to hide folder tree items which are not either navigation items themselves or are required to navigate from the site root to a navigation item.\nClass CmsPathSelectField; // File path select field.\nClass CmsResourceSelectDialog; // Dialog with a site selector and file tree which can be used to select resources.\nClass CmsResourceSelectDialog.Options; // Class for site select options.\nClass CmsResourceSelectDialogContents; // Contents of the resource select dialog, filled using the declarative layout mechanism.\nClass CmsResourceTreeContainer; // The data container for the sitmeap folder selection tree.\nClass CmsResourceTreeTable; // Tree subclass used to display VFS resource trees.\nClass CmsResourceTreeTable.FileSorter; // Extends the default sorting to differentiate between files and folder when sorting by name.\n", "des": "Contains components for selecting resources."}
{"index": 2204, "repo": "spring-data-commons-3.1.2", "code": "package geo;\n\npackage geo.format; // Formatters for geo-spatial types.\npublic class Box extends Object implements Shape; // Represents a geospatial box value\npublic class Circle extends Object implements Shape; // Represents a geospatial circle value\npublic class CustomMetric extends Object implements Metric; // Value object to create custom Metrics on the fly.\npublic final class Distance extends Object implements Serializable, Comparable<Distance>; // Value object to represent distances in a given metric.\npublic class GeoModule extends com.fasterxml.jackson.databind.module.SimpleModule; // Custom module to deserialize the geo-spatial value objects using Jackson 2.\npublic class GeoPage<T> extends PageImpl<GeoResult<T>>; // Custom Page to carry the average distance retrieved from the GeoResults the GeoPage is set up from.\npublic final class GeoResult<T> extends Object implements Serializable; // Value object capturing some arbitrary object plus a distance.\npublic class GeoResults<T> extends Object implements Iterable<GeoResult<T>>, Serializable; // Value object to capture GeoResults as well as the average distance they have.\npublic interface Metric extends Serializable; // Interface for Metrics that can be applied to a base scale.\npublic enum Metrics extends Enum<Metrics> implements Metric; // Commonly used Metrics.\npublic class Point extends Object implements Serializable; // Represents a geospatial point value.\npublic class Polygon extends Object implements Iterable<Point>, Shape; // Simple value object to represent a Polygon.\npublic interface Shape extends Serializable; // Common interface for all shapes.\n", "des": "Value types representing geo-spatial concepts."}
{"index": 1118, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package launcher;\n\nInterface AbstractContainersLauncher; // Pluggable ContainersLauncher interface for processing ContainersLauncherEvents.\nClass ContainerCleanup; // Cleanup the container.\nClass ContainerLaunch;\nClass ContainerLaunch.ShellScriptBuilder;\nClass ContainerRelaunch; // Relaunch container.\nClass ContainersLauncher; // The launcher for the containers.\nClass ContainersLauncherEvent;\nClass RecoveredContainerLaunch; // This is a ContainerLaunch which has been recovered after an NM restart (for rolling upgrades).\nClass RecoverPausedContainerLaunch; // This is a ContainerLaunch which has been recovered after an NM restart for pause containers (for rolling upgrades)\nClass SignalContainersLauncherEvent;\nEnum ContainersLauncherEventType;\n", "des": "This package contains classes related to NM container launch."}
{"index": 2105, "repo": "spring-webflux-6.0.11", "code": "package freemarker;\n\npublic interface FreeMarkerConfig; // Interface to be implemented by objects that configure and manage a FreeMarker Configuration object in a web environment.\npublic class FreeMarkerConfigurer extends org.springframework.ui.freemarker.FreeMarkerConfigurationFactory implements FreeMarkerConfig, org.springframework.beans.factory.InitializingBean, org.springframework.context.ResourceLoaderAware; // Configures FreeMarker for web usage via the \"configLocation\" and/or \"freemarkerSettings\" and/or \"templateLoaderPath\" properties.\npublic class FreeMarkerView extends AbstractUrlBasedView; // A View implementation that uses the FreeMarker template engine.\npublic class FreeMarkerViewResolver extends UrlBasedViewResolver; // A ViewResolver for resolving FreeMarkerView instances, i.e.\n", "des": "Support classes for the integration of FreeMarker as Spring web view technology."}
{"index": 3109, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package registry;\n\npackage registry.selector; // Defines a feature-set around named registration of implementations of various contracts and the ability to select those implementations.\nInterface BootstrapServiceRegistry; // Provides the most basic services needed.\nInterface StandardServiceInitiator<R extends Service>; // Contract for an initiator of services that target the standard ServiceRegistry.\nInterface StandardServiceRegistry; // Specialization of the ServiceRegistry contract mainly for type safety.\nClass BootstrapServiceRegistryBuilder; // Builder for BootstrapServiceRegistry instances.\nClass StandardServiceRegistryBuilder; // Builder for standard ServiceRegistry instances.\n", "des": "Defines service registry contracts application are likely to want to utilize for configuring Hibernate behavior."}
{"index": 1853, "repo": "spring-test-6.0.11", "code": "package util;\n\npublic abstract class AopTestUtils extends Object; // AopTestUtils is a collection of AOP-related utility methods for use in unit and integration testing scenarios.\npublic abstract class AssertionErrors extends Object; // Test assertions that are independent of any third-party assertion library.\npublic class ExceptionCollector extends Object; // ExceptionCollector is a test utility for executing code blocks, collecting exceptions, and generating a single AssertionError containing any exceptions encountered as suppressed exceptions.\n@FunctionalInterface public static interface ExceptionCollector.Executable; // Executable is a functional interface that can be used to implement any generic block of code that potentially throws a Throwable.\npublic class JsonExpectationsHelper extends Object; // A helper class for assertions on JSON content.\npublic class JsonPathExpectationsHelper extends Object; // A helper class for applying assertions via JSON path expressions.\npublic abstract class ReflectionTestUtils extends Object; // ReflectionTestUtils is a collection of reflection-based utility methods for use in unit and integration testing scenarios.\npublic class TestSocketUtils extends Object; // Simple utility for finding available TCP ports on localhost for use in integration testing scenarios.\npublic class XmlExpectationsHelper extends Object; // A helper class for assertions on XML content.\npublic class XpathExpectationsHelper extends Object; // A helper class for applying assertions via XPath expressions.\n", "des": "General utility classes for use in unit and integration tests."}
{"index": 244, "repo": "nutch-2.4", "code": "package ftp;\n\nClass Client; // Client.java encapsulates functionalities necessary for nutch to get dir list and retrieve file from an FTP server.\nClass Ftp; // This class is a protocol plugin used for ftp: scheme.\nClass FtpResponse; // FtpResponse.java mimics ftp replies as http response.\nClass FtpRobotRulesParser; // This class is used for parsing robots for urls belonging to FTP protocol.\nClass PrintCommandListener; // This is a support class for logging all ftp command/reply traffic.\nClass FtpError; // Thrown for Ftp error codes.\nClass FtpException; // Superclass for important exceptions thrown during FTP talk, that must be handled with care.\nClass FtpExceptionBadSystResponse; // Exception indicating bad reply of SYST command.\nClass FtpExceptionCanNotHaveDataConnection; // Exception indicating failure of opening data connection.\nClass FtpExceptionControlClosedByForcedDataClose; // Exception indicating control channel is closed by server end, due to forced closure of data channel at client (our) end.\nClass FtpExceptionUnknownForcedDataClose; // Exception indicating unrecognizable reply from server after forced closure of data channel by client (our) side.\n", "des": "Protocol plugin which supports retrieving documents via the ftp protocol."}
{"index": 2515, "repo": "spring-security-core-6.1.2", "code": "package annotation;\n\n@Deprecated public interface AnnotationMetadataExtractor<A extends Annotation>;\n@Deprecated public class Jsr250MethodSecurityMetadataSource extends AbstractFallbackMethodSecurityMetadataSource;\n@Deprecated public class Jsr250SecurityConfig extends SecurityConfig;\n@Deprecated public class Jsr250Voter extends Object implements AccessDecisionVoter<Object>;\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface Secured; // Java 5 annotation for describing service layer security attributes.\n@Deprecated public class SecuredAnnotationSecurityMetadataSource extends AbstractFallbackMethodSecurityMetadataSource;\n", "des": "Support for JSR-250 and Spring Security @Secured annotations."}
{"index": 1306, "repo": "groovy-all-4.0.13", "code": "package interceptor;\n\npublic class MockProxyMetaClass extends ProxyMetaClass; // The ProxyMetaClass for the MockInterceptor.\n", "des": "The groovy.mock.interceptor is an all-groovy mock testing library."}
{"index": 1315, "repo": "groovy-all-4.0.13", "code": "package time;\n\npublic abstract class BaseDuration extends Object implements Comparable<BaseDuration>; // Base class for date and time durations.\npublic abstract static class BaseDuration.From extends Object;\npublic class DatumDependentDuration extends BaseDuration; // DatumDependentDuration represents durations whose length in milliseconds cannot be determined without knowing the datum point.\npublic class Duration extends BaseDuration; // Duration represents time periods which have values independent of the context.\npublic class TimeCategory extends Object; // Apply a number of methods to allow convenient Date/Time manipulation,such as:\npublic class TimeDatumDependentDuration extends DatumDependentDuration; // TimeDatumDuration represents a time period which results from an arithmetic operation between a TimeDuration object and a DatumDuration object\npublic class TimeDuration extends Duration; // TimeDuration represents time periods expressed in units of hours, minutes, seconds and milliseconds.\n", "des": "Classes for easily manipulating Dates and times."}
{"index": 3752, "repo": "lucene-queryparser-9.7.0", "code": "package builders;\n\nInterface SpanQueryBuilder; // Interface for retrieving a SpanQuery.\nClass BooleanQueryBuilder; // Builder for BooleanQuery\nClass BoostingTermBuilder; // Builder for PayloadScoreQuery\nClass ConstantScoreQueryBuilder; // Builder for ConstantScoreQuery\nClass DisjunctionMaxQueryBuilder; // Builder for DisjunctionMaxQuery\nClass FuzzyLikeThisQueryBuilder; // Builder for FuzzyLikeThisQuery\nClass LikeThisQueryBuilder; // Builder for MoreLikeThisQuery\nClass MatchAllDocsQueryBuilder; // Builder for MatchAllDocsQuery\nClass PointRangeQueryBuilder; // Creates a range query across 1D PointValues.\nClass RangeQueryBuilder; // Builder for TermRangeQuery\nClass SpanBuilderBase; // Base class for building SpanQuerys\nClass SpanFirstBuilder; // Builder for SpanFirstQuery\nClass SpanNearBuilder; // Builder for SpanNearQuery\nClass SpanNotBuilder; // Builder for SpanNotQuery\nClass SpanOrBuilder; // Builder for SpanOrQuery\nClass SpanOrTermsBuilder; // Builder that analyzes the text into a SpanOrQuery\nClass SpanPositionRangeBuilder; // Builder for SpanPositionRangeQuery\nClass SpanQueryBuilderFactory; // Factory for SpanQueryBuilders\nClass SpanTermBuilder; // Builder for SpanTermQuery\nClass TermQueryBuilder; // Builder for TermQuery\nClass TermsQueryBuilder; // Builds a BooleanQuery from all of the terms found in the XML element using the choice of analyzer\nClass UserInputQueryBuilder; // UserInputQueryBuilder uses 1 of 2 strategies for thread-safe parsing: 1) Synchronizing access to \"parse\" calls on a previously supplied QueryParser or..\n", "des": "XML Parser factories for different Lucene Query/Filters."}
{"index": 2949, "repo": "spring-integration-xml-6.1.2", "code": "package config;\n\npublic class IntegrationXmlNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler;\npublic class MarshallingTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser;\npublic class UnmarshallingTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser;\npublic class XmlPayloadValidatingFilterParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\npublic class XPathExpressionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the <xpath-expression> element.\npublic class XPathFilterParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the <xpath-filter> element.\npublic class XPathHeaderEnricherParser extends org.springframework.integration.config.xml.AbstractTransformerParser; // Parser for <xpath-header-enricher> elements.\npublic class XPathMessageSplitterParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\npublic class XPathRouterParser extends org.springframework.integration.config.xml.AbstractRouterParser; // Parser for the <xpath-router/> element.\npublic class XPathTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser; // Parser for the 'xpath-transformer' element.\npublic class XsltPayloadTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser;\n", "des": "Contains parser classes for the XML namespace support."}
{"index": 2912, "repo": "spring-xml-4.0.5", "code": "package sax;\n\npublic abstract class AbstractXmlReader extends Object implements XMLReader; // Abstract base class for SAX XMLReader implementations.\npublic abstract class SaxUtils extends Object; // Convenient utility methods for dealing with SAX.\n", "des": "Provides classes that help with SAX: the Simple API for XML."}
{"index": 2729, "repo": "spring-batch-infrastructure-5.0.2", "code": "package kafka;\n\npackage kafka.builder; // Builders for Apache Kafka item reader and writer.\npublic class KafkaItemReader<K,V> extends AbstractItemStreamItemReader<V>; // An ItemReader implementation for Apache Kafka.\npublic class KafkaItemWriter<K,T> extends KeyValueItemWriter<K,T>; // An ItemWriter implementation for Apache Kafka using a KafkaTemplate with default topic configured.\n", "des": "Apache Kafka related readers and writers"}
{"index": 2446, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package ldap;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration.class) @ConditionalOnClass(org.springframework.ldap.core.LdapOperations.class) @ConditionalOnBean(org.springframework.ldap.core.LdapOperations.class) @ConditionalOnEnabledHealthIndicator(\"ldap\") public class LdapHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.ldap.LdapHealthIndicator,org.springframework.ldap.core.LdapOperations>; // Auto-configuration for LdapHealthIndicator.\n", "des": "Auto-configuration for actuator LDAP concerns."}
{"index": 3298, "repo": "opencms-core-15.0", "code": "package module;\n\nInterface I_CmsModuleAction; // Module action classes in OpenCms must implement this interface.\nClass A_CmsModuleAction; // Simple base implementation of the I_CmsModuleAction interface, extend this class for more sophisticated module action implementations.\nClass CmsModule; // Describes an OpenCms module.\nClass CmsModuleDependency; // Describes an OpenCms module dependency.\nClass CmsModuleImportData; // Module data read from a module zip file.\nClass CmsModuleImportExportHandler; // Import/export handler implementation for Cms modules.\nClass CmsModuleImportExportRepository; // Class which manages import/export of modules from repositories configured in opencms-importexport.xml.\nClass CmsModuleImportExportRepository.ModuleExportData; // Holds exported module data and a modification date.\nClass CmsModuleLog; // This class is responsible for reading and writing module import/export log messages, to be used by CmsResourceWrapperModules.\nClass CmsModuleManager; // Manages the modules of an OpenCms installation.\nClass CmsModuleUpdater; // Class used for updating modules.\nClass CmsModuleVersion; // A version number for an OpenCms module.\nClass CmsModuleXmlHandler; // Adds the XML handler rules for import and export of a single module.\nClass CmsReplaceModuleInfo; // Status after updating a module.\nClass CmsResourceImportData; // Import data for a single resource.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsModule.ExportMode; // The available module export modes.\nEnum CmsModuleLog.Action; // Action type.\nEnum CmsModuleXmlHandler.XmlWriteMode; // Enum used to distinguish whether we want to generate the XML for a module export's manifest or the XML for writing back opencms-modules.xml.\n", "des": "OpenCms modules provide a powerful, standardized way to extend the core OpenCms functionality."}
{"index": 655, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package service;\n\nInterface SystemServiceManager; // Marker interface for starting services from RM.\n", "des": "Package org.apache.hadoop.yarn.server.service contains service related classes."}
{"index": 1437, "repo": "spring-boot-actuator-3.1.1", "code": "package reactive;\n\npublic class HttpExchangesWebFilter extends Object implements org.springframework.web.server.WebFilter, org.springframework.core.Ordered; // A WebFilter for recording HTTP exchanges.\n", "des": "Actuator HTTP exchanges support for reactive servers."}
{"index": 1711, "repo": "spring-boot-test-3.1.1", "code": "package json;\n\npublic abstract class AbstractJsonMarshalTester<T> extends Object; // Base class for AssertJ based JSON marshal testers.\nprotected abstract static class AbstractJsonMarshalTester.FieldInitializer<M> extends Object; // Utility class used to support field initialization.\npublic class BasicJsonTester extends Object; // AssertJ based JSON tester that works with basic JSON strings.\npublic class GsonTester<T> extends AbstractJsonMarshalTester<T>; // AssertJ based JSON tester backed by Gson.\npublic class JacksonTester<T> extends AbstractJsonMarshalTester<T>; // AssertJ based JSON tester backed by Jackson.\npublic class JsonbTester<T> extends AbstractJsonMarshalTester<T>; // AssertJ based JSON tester backed by Jsonb.\npublic final class JsonContent<T> extends Object implements org.assertj.core.api.AssertProvider<JsonContentAssert>; // JSON content usually created from a JSON tester.\npublic class JsonContentAssert extends org.assertj.core.api.AbstractAssert<JsonContentAssert,CharSequence>; // AssertJ Assert for JsonContent.\npublic final class ObjectContent<T> extends Object implements org.assertj.core.api.AssertProvider<ObjectContentAssert<T>>; // Object content usually created from AbstractJsonMarshalTester.\npublic class ObjectContentAssert<A> extends org.assertj.core.api.AbstractObjectAssert<ObjectContentAssert<A>,A>; // AssertJ Assert for ObjectContent.\n", "des": "Support for testing JSON."}
{"index": 2552, "repo": "pulsar-common-3.0.0", "code": "package functions;\n\npublic abstract class JsonIgnorePropertiesMixIn extends Object;\npublic class UpdateOptionsImpl extends Object implements UpdateOptions; // Options while updating the sink.\npublic class Utils extends Object; // Helper class to work with configuration.\n", "des": "Classes needed for pulsar functions."}
{"index": 3871, "repo": "lucene-spatial-extras-9.7.0", "code": "package util;\n\nClass CachingDoubleValueSource; // Caches the doubleVal of another value source in a HashMap so that it is computed only once.\nClass DistanceToShapeValueSource; // The distance from a provided Point to a Point retrieved from an ShapeValuesSource.\nClass ReciprocalDoubleValuesSource; // Transforms a DoubleValuesSource using the formula v = k / (v + k)\nClass ShapeAreaValueSource; // The area of a Shape retrieved from an ShapeValuesSource\nClass ShapeFieldCache<T extends org.locationtech.spatial4j.shape.Shape>; // Bounded Cache of Shapes associated with docIds.\nClass ShapeFieldCacheDistanceValueSource; // A DoubleValuesSource that returns the spatial distance between an input point and a document's points in ShapeFieldCacheProvider.\nClass ShapeFieldCacheProvider<T extends org.locationtech.spatial4j.shape.Shape>; // Provides access to a ShapeFieldCache for a given LeafReader.\nClass ShapeValuesPredicate; // Compares a shape from a provided ShapeValuesSource with a given Shape and sees if it matches a given SpatialOperation (the predicate).\n", "des": "Advanced spatial utilities."}
{"index": 3043, "repo": "spring-web-6.0.11", "code": "package adapter;\n\npublic abstract class AbstractReactiveWebInitializer extends Object implements WebApplicationInitializer; // Base class for a WebApplicationInitializer that installs a Spring Reactive Web Application on a Servlet container.\npublic class DefaultServerWebExchange extends Object implements ServerWebExchange; // Default implementation of ServerWebExchange.\npublic class ForwardedHeaderTransformer extends Object implements Function<ServerHttpRequest,ServerHttpRequest>; // Extract values from \"Forwarded\" and \"X-Forwarded-*\" headers to override the request URI (i.e.\npublic class HttpWebHandlerAdapter extends WebHandlerDecorator implements HttpHandler; // Default adapter of WebHandler to the HttpHandler contract.\npublic final class WebHttpHandlerBuilder extends Object; // This builder has two purposes:\npublic static class WebHttpHandlerBuilder.SpringWebBlockHoundIntegration extends Object implements reactor.blockhound.integration.BlockHoundIntegration; // BlockHoundIntegration for spring-web classes.\n", "des": "Implementations to adapt to the underlying org.springframework.http.client.reactive reactive HTTP adapter and HttpHandler."}
{"index": 1077, "repo": "graal-sdk-1.0.0-rc7", "code": "package collections;\n\nInterface EconomicMap<K,V>; // Memory efficient map data structure.\nInterface EconomicSet<E>; // Memory efficient set data structure.\nInterface MapCursor<K,V>; // Cursor to iterate over a mutable map.\nInterface UnmodifiableEconomicMap<K,V>; // Unmodifiable memory efficient map data structure.\nInterface UnmodifiableEconomicSet<E>; // Unmodifiable memory efficient set data structure.\nInterface UnmodifiableMapCursor<K,V>; // Cursor to iterate over a map without changing its contents.\nClass Equivalence; // Strategy for comparing two objects.\nClass Pair<L,R>; // Utility class representing a pair of values.\n", "des": "The Graal-SDK collections package contains memory efficient data structures."}
{"index": 1458, "repo": "spring-data-redis-3.1.2", "code": "package hash;\n\npublic class BeanUtilsHashMapper<T> extends Object implements HashMapper<T,String,String>; // HashMapper based on Apache Commons BeanUtils project.\npublic class DecoratingStringHashMapper<T> extends Object implements HashMapper<T,String,String>; // Delegating hash mapper used for flattening objects into Strings.\npublic interface HashMapper<T,K,V>; // Core mapping contract between Java types and Redis hashes/maps.\npublic class Jackson2HashMapper extends Object implements HashMapper<Object,String,Object>; // ObjectMapper based HashMapper implementation that allows flattening.\npublic class ObjectHashMapper extends Object implements HashMapper<Object,byte[],byte[]>; // HashMapper based on MappingRedisConverter.\n", "des": "Dedicated support package for Redis hashes."}
{"index": 3730, "repo": "lucene-queryparser-9.7.0", "code": "package core;\n\npackage core.builders; // Necessary classes to implement query builders.\npackage core.config; // Base classes used to configure the query processing.\npackage core.messages; // Messages usually used by query parser implementations.\npackage core.nodes; // Query nodes commonly used by query parser implementations.\npackage core.parser; // Necessary interfaces to implement text parsers.\npackage core.processors; // Interfaces and implementations used by query node processors\npackage core.util; // Utility classes to used with the Query Parser.\nClass QueryParserHelper; // This class is a helper for the query parser framework, it does all the three query parser phrases at once: text parsing, query processing and query building.\nClass QueryNodeException; // This exception should be thrown if something wrong happens when dealing with QueryNodes.\nClass QueryNodeParseException; // This should be thrown when an exception happens during the query parsing from string to the query node tree.\nClass QueryNodeError; // Error class with NLS support\n", "des": "Core classes of the flexible query parser framework."}
{"index": 481, "repo": "beam-sdks-java-core-2.49.0", "code": "package range;\n\nInterface RangeTracker<PositionT>; // A RangeTracker is a thread-safe helper object for implementing dynamic work rebalancing in position-based BoundedSource.BoundedReader subclasses.\nClass ByteKey; // A class representing a key consisting of an array of bytes.\nClass ByteKeyRange; // A class representing a range of ByteKeys.\nClass ByteKeyRangeTracker; // A RangeTracker for ByteKeys in ByteKeyRanges.\nClass OffsetRange; // A restriction represented by a range of integers [from, to).\nClass OffsetRange.Coder; // A coder for OffsetRanges.\nClass OffsetRangeTracker; // A RangeTracker for non-negative positions of type long.\n", "des": "Provides thread-safe helpers for implementing dynamic work rebalancing in position-based bounded sources."}
{"index": 220, "repo": "nutch-2.4", "code": "package arc;\n\nClass ArcInputFormat; // A input format the reads arc files.\nClass ArcRecordReader; // The ArchRecordReader class provides a record reader which reads records from arc files.\n", "des": "Tools to read the Arc file format."}
{"index": 3238, "repo": "opencms-core-15.0", "code": "package containerpage;\n\npackage containerpage.inherited; // Contains classes used for reading and caching inheritance groups.\npackage containerpage.shared; // Contains the shared container page editor classes.\nInterface I_CmsResourceTypeEnabledCheck; // Checks whether types are enabled for Add/New dialogs.\nClass ClientMessages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsAddDialogTypeHelper; // Helper class for preparing the resource type lists for gallery and new dialog.\nClass CmsContainerpageActionElement; // Action element for container-page editor includes.\nClass CmsContainerpageService; // The RPC service used by the container-page editor.\nClass CmsDetailOnlyContainerPageBuilder; // This is a simple helper class to more easily produce container page beans to be used as detail-only containers.\nClass CmsDetailOnlyContainerPageBuilder.ContainerInfo; // Bean containing the information for a single container.\nClass CmsDetailOnlyContainerUtil; // Static utility class for functions related to detail-only containers.\nClass CmsElementUtil; // Utility class to generate the element data objects used within the container-page editor.\nClass CmsModelGroupHelper; // Handles all model group specific tasks.\nClass CmsRelationTargetListBean; // Helper bean used to collect a list of resources (usually relation targets) and keep track of whether any of them have the \"changed\" state.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains the container page editor service classes."}
{"index": 3240, "repo": "opencms-core-15.0", "code": "package shared;\n\npackage shared.rpc; // Contains the container page editor service interfaces.\nClass CmsCntPageData; // Convenience class to provide server-side information to the client.\nClass CmsContainer; // Container bean.\nClass CmsContainerElement; // Bean holding basic container element information.\nClass CmsContainerElementData; // Bean holding all element information including it's formatted contents.\nClass CmsContainerPageGalleryData; // Gallery data loaded initially for the 'Add' menu in the page editor.\nClass CmsContainerPageRpcContext; // Bean containing the 'context' of the edited container page for use in RPC calls.\nClass CmsCreateElementData; // Bean containing the needed data when creating a new resource.\nClass CmsDialogOptions; // Option dialog data.\nClass CmsDialogOptions.Option; // Describes a dialog option.\nClass CmsDialogOptionsAndInfo; // Holds both a bean containing edit handler dialog options and a resource info bean for a selected resource.\nClass CmsElementLockInfo; // Contains lock information for a container page element.\nClass CmsElementSettingsConfig; // Represents the setting configuration for a container element.\nClass CmsElementViewInfo; // Element view info.\nClass CmsFormatterConfig; // Formatter configuration data.\nClass CmsFormatterConfigCollection; // Bean which holds a list of formatter configurations (client-side) which can be retrieved by key or id.\nClass CmsGroupContainer; // Group container bean.\nClass CmsGroupContainerSaveResult; // Bean which holds the results of saving a group container.\nClass CmsInheritanceContainer; // The inheritance container data.\nClass CmsInheritanceInfo; // A class whose instances are added to container element beans to provide information about container inheritance.\nClass CmsLocaleLinkBean; // Bean representing a link to a different locale variant.\nClass CmsRemovedElementStatus; // A bean used to store information about a container page element which was just removed.\nEnum CmsCntPageData.ElementDeleteMode; // The element delte modes.\nEnum CmsCntPageData.ElementReuseMode; // Enum representing the different ways dropping elements on a container page can be handled.\nEnum CmsContainerElement.ModelGroupState; // The model group states.\n", "des": "Contains the shared container page editor classes."}
{"index": 109, "repo": "ignite-core-2.15.0", "code": "package platform;\n\nInterface PlatformCachePluginConfigurationClosure; // Platform cache configuration handler: updates plugin configuration using data sent from platform code.\nInterface PlatformCachePluginConfigurationClosureFactory; // Factory for @PlatformCachePluginConfigurationClosure with a unique id.\nInterface PlatformPluginConfigurationClosure; // Platform configuration handler: updates plugin configuration using data sent from platform code.\nInterface PlatformPluginConfigurationClosureFactory; // Factory for @PlatformPluginConfigurationClosure with a unique id.\n", "des": "Contains platform plugins management API."}
{"index": 3348, "repo": "opencms-core-15.0", "code": "package history;\n\npackage history.diff; // Contains code for the comparison view of the file history dialog.\nClass CmsHistoryDialog; // Dialog used to change resource modification times.\nClass CmsHistoryRow; // Represents a row of the file history table.\n", "des": "Contains code for the file history dialog."}
{"index": 257, "repo": "nutch-2.4", "code": "package link;\n\nClass LinkAnalysisScoringFilter;\n", "des": "Scoring filter"}
{"index": 3203, "repo": "tomcat-api-10.1", "code": "package util;\n\npackage util.mime; // MIME decoder implementation, imported and retailed from Apache Geronimo.\nInterface Closeable; // Interface of an object, which may be closed.\nClass FileItemHeadersImpl; // Default implementation of the FileItemHeaders interface.\nClass LimitedInputStream; // An input stream, which limits its data size.\nClass Streams; // Utility class for working with streams.\n", "des": "This package contains various IO related utility classes or methods, which are basically reusable and not necessarily restricted to the scope of a file upload."}
{"index": 3523, "repo": "opennlp-tools-2.2.0", "code": "package masc;\n\nClass MascDocument;\nClass MascDocumentStream;\nClass MascNamedEntityParser; // A class to process the MASC Named entity stand-off annotation file\nClass MascNamedEntitySampleStream;\nClass MascNamedEntitySampleStreamFactory<P>;\nClass MascPennTagParser; // A class for parsing MASC's Penn tagging/tokenization stand-off annotation\nClass MascPOSSampleStream;\nClass MascPOSSampleStreamFactory<P>;\nClass MascSentence;\nClass MascSentenceSampleStream;\nClass MascSentenceSampleStreamFactory<P>;\nClass MascToken; // A specialized Span to express tokens in documents.\nClass MascTokenSampleStream;\nClass MascTokenSampleStreamFactory<P>;\nClass MascWord;\n", "des": "Experimental package related to the MASC corpus format."}
{"index": 3216, "repo": "commons-configuration2-2.9.0", "code": "package fluent;\n\nInterface CombinedBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties of a builder for a combined configuration.\nInterface DatabaseBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties for a database configuration.\nInterface FileBasedBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties of a configuration of a file-based configuration builder.\nInterface HierarchicalBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties for a hierarchical configuration.\nInterface INIBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties for a INI configuration.\nInterface JndiBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties for a JNDI configuration.\nInterface MultiFileBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties of a builder managing multiple file-based configurations.\nInterface PropertiesBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties for a properties configuration.\nInterface XMLBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties for a XML configuration.\nClass Configurations; // A convenience class which simplifies the creation of standard configurations and their builders.\nClass Parameters; // A convenience class for creating parameter objects for initializing configuration builder objects.\n", "des": "This package defines a fluent API for setting up fully configured configuration builders."}
{"index": 1358, "repo": "spring-tx-6.0.11", "code": "package support;\n\npublic class LocalConnectionFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.InitializingBean; // FactoryBean that creates a local JCA connection factory in \"non-managed\" mode (as defined by the Java Connector Architecture specification).\npublic class ResourceAdapterFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ResourceAdapter>, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // FactoryBean that bootstraps the specified JCA 1.7 ResourceAdapter, starting it with a local BootstrapContext and exposing it for bean references.\npublic class SimpleBootstrapContext extends Object implements BootstrapContext; // Simple implementation of the JCA 1.7 BootstrapContext interface, used for bootstrapping a JCA ResourceAdapter in a local environment.\n", "des": "Provides generic support classes for JCA usage within Spring, mainly for local setup of a JCA ResourceAdapter and/or ConnectionFactory."}
{"index": 3470, "repo": "poi-ooxml-5.2.3", "code": "package binary;\n\nInterface XSSFBSheetHandler.SheetContentsHandler; // You need to implement this to handle the results of the sheet parsing.\nClass XSSFBCommentsTable;\nClass XSSFBHyperlinksTable;\nClass XSSFBParser; // Experimental parser for Microsoft's ooxml xlsb format.\nClass XSSFBRelation; // Need to have this mirror class of XSSFRelation because of conflicts with regular ooxml relations.\nClass XSSFBSharedStringsTable;\nClass XSSFBSheetHandler;\nClass XSSFBStylesTable; // This is a very thin shim to gather number formats from styles.bin files.\nClass XSSFBUtils;\nClass XSSFHyperlinkRecord; // This is a read only record that maintains information about a hyperlink.\nEnum XSSFBRecordType;\nClass XSSFBParseException; // Parse exception while reading an xssfb.\n", "des": "The org.apache.poi.xssf.binary package includes necessary underlying components for streaming/read-only processing of xlsb files."}
{"index": 3483, "repo": "opennlp-uima-2.2.0", "code": "package chunker;\n\nInterface ChunkerModelResource;\nClass Chunker; // OpenNLP Chunker annotator.\nClass ChunkerModelResourceImpl;\n", "des": "Package related to finding non-recursive syntactic annotation such as noun phrase chunks."}
{"index": 3725, "repo": "solr-core-9.3.0", "code": "package vector;\n\nClass ByteDenseVectorParser;\nClass DenseVectorParser;\nClass FloatDenseVectorParser;\nEnum DenseVectorParser.BuilderPhase;\n", "des": "Utilities for dense vector search"}
{"index": 1519, "repo": "spring-context-6.0.11", "code": "package annotation;\n\n@Documented @Retention(RUNTIME) @Target({METHOD,FIELD,PARAMETER,ANNOTATION_TYPE}) public @interface DateTimeFormat; // Declares that a field or method parameter should be formatted as a date or time.\npublic static enum DateTimeFormat.ISO extends Enum<DateTimeFormat.ISO>; // Common ISO date time format patterns.\n@Documented @Retention(RUNTIME) @Target({METHOD,FIELD,PARAMETER,ANNOTATION_TYPE}) public @interface NumberFormat; // Declares that a field or method parameter should be formatted as a number.\npublic static enum NumberFormat.Style extends Enum<NumberFormat.Style>; // Common number format styles.\n", "des": "Annotations for declaratively configuring field formatting rules."}
{"index": 2279, "repo": "spring-data-elasticsearch-5.1.2", "code": "package event;\n\n@FunctionalInterface public interface AfterConvertCallback<T> extends EntityCallback<T>; // Callback being invoked after a domain object is materialized from a Document when reading results.\n@FunctionalInterface public interface AfterLoadCallback<T> extends EntityCallback<Document>; // Callback being invoked after a Document is read from Elasticsearch and before it is converted into a domain object.\n@FunctionalInterface public interface AfterSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered after save of an entity.\npublic class AuditingEntityCallback extends Object implements BeforeConvertCallback<Object>, Ordered; // EntityCallback to populate auditing related fields on an entity about to be saved.\n@FunctionalInterface public interface BeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\n@FunctionalInterface public interface ReactiveAfterConvertCallback<T> extends EntityCallback<T>; // Callback being invoked after a domain object is materialized from a Document when reading results.\n@FunctionalInterface public interface ReactiveAfterLoadCallback<T> extends EntityCallback<Document>; // Callback being invoked after a Document is read from Elasticsearch and before it is converted into a domain object.\n@FunctionalInterface public interface ReactiveAfterSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered after save of an entity.\npublic class ReactiveAuditingEntityCallback extends Object implements ReactiveBeforeConvertCallback<Object>, Ordered; // EntityCallback to populate auditing related fields on an entity about to be saved.\n@FunctionalInterface public interface ReactiveBeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\n", "des": "classes and interfaces related to Spring Data Elasticsearch events and callbacks."}
{"index": 2986, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "package introspection;\n\npublic class BadOpaqueTokenException extends OAuth2IntrospectionException; // An exception similar to BadCredentialsException that indicates an opaque token that is invalid in some way.\npublic class NimbusOpaqueTokenIntrospector extends Object implements OpaqueTokenIntrospector; // A Nimbus implementation of OpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint.\npublic class NimbusReactiveOpaqueTokenIntrospector extends Object implements ReactiveOpaqueTokenIntrospector; // A Nimbus implementation of ReactiveOpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint.\npublic final class OAuth2IntrospectionAuthenticatedPrincipal extends Object implements org.springframework.security.oauth2.core.OAuth2TokenIntrospectionClaimAccessor, org.springframework.security.oauth2.core.OAuth2AuthenticatedPrincipal, Serializable; // A domain object that wraps the attributes of OAuth 2.0 Token Introspection.\npublic class OAuth2IntrospectionException extends RuntimeException; // Base exception for all OAuth 2.0 Introspection related errors\n@FunctionalInterface public interface OpaqueTokenAuthenticationConverter; // Convert a successful introspection result into an authentication result.\n@FunctionalInterface public interface OpaqueTokenIntrospector; // A contract for introspecting and verifying an OAuth 2.0 token.\n@FunctionalInterface public interface ReactiveOpaqueTokenAuthenticationConverter; // Convert a successful introspection result into an authentication result.\n@FunctionalInterface public interface ReactiveOpaqueTokenIntrospector; // A contract for introspecting and verifying an OAuth 2.0 token.\npublic class SpringOpaqueTokenIntrospector extends Object implements OpaqueTokenIntrospector; // A Spring implementation of OpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint.\npublic class SpringReactiveOpaqueTokenIntrospector extends Object implements ReactiveOpaqueTokenIntrospector; // A Spring implementation of ReactiveOpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint.\n", "des": "OAuth 2.0 Introspection supporting classes and interfaces."}
{"index": 439, "repo": "hbase-client-3.0.0-alpha-4", "code": "package client;\n\npackage client.coprocessor; // Provides client classes for invoking Coprocessor RPC protocols Overview Example Usage\nInterface Admin; // The administrative API for HBase.\nInterface AdvancedScanResultConsumer; // This is the low level API for asynchronous scan.\nInterface AdvancedScanResultConsumer.ScanController; // Used to suspend or stop a scan, or get a scan cursor if available.\nInterface AdvancedScanResultConsumer.ScanResumer; // Used to resume a scan.\nInterface AsyncAdmin; // The asynchronous administrative API for HBase.\nInterface AsyncAdminBuilder; // For creating AsyncAdmin.\nInterface AsyncAdminRequestRetryingCaller.Callable<T>;\nInterface AsyncBufferedMutator; // Used to communicate with a single HBase table in batches.\nInterface AsyncBufferedMutatorBuilder; // For creating AsyncBufferedMutator.\nInterface AsyncConnection; // The asynchronous version of Connection.\nInterface AsyncMasterRequestRpcRetryingCaller.Callable<T>;\nInterface AsyncServerRequestRpcRetryingCaller.Callable<T>;\nInterface AsyncTable<C extends ScanResultConsumerBase>; // The interface for asynchronous version of Table.\nInterface AsyncTable.CheckAndMutateBuilder; // Since 3.0.0, will be removed in 4.0.0.\nInterface AsyncTable.CheckAndMutateWithFilterBuilder; // Since 3.0.0, will be removed in 4.0.0.\nInterface AsyncTable.CoprocessorCallback<R>; // The callback when we want to execute a coprocessor call on a range of regions.\nInterface AsyncTable.CoprocessorServiceBuilder<S,R>; // Helper class for sending coprocessorService request that executes a coprocessor call on regions which are covered by a range.\nInterface AsyncTableBuilder<C extends ScanResultConsumerBase>; // For creating AsyncTable.\nInterface AsyncTableRegionLocator; // The asynchronous version of RegionLocator.\nInterface Attributes;\nInterface BufferedMutator; // Used to communicate with a single HBase table similar to Table but meant for batched, asynchronous puts.\nInterface BufferedMutator.ExceptionListener; // Listens for asynchronous exceptions on a BufferedMutator.\nInterface ColumnFamilyDescriptor; // An ColumnFamilyDescriptor contains information about a column family such as the number of versions, compression settings, etc.\nInterface Connection; // A cluster connection encapsulating lower level individual connections to actual servers and a connection to zookeeper.\n", "des": "Provides HBase Client"}
{"index": 2245, "repo": "spring-data-keyvalue-3.1.2", "code": "package context;\n\npublic class KeyValueMappingContext<E extends KeyValuePersistentEntity<?,P>,P extends KeyValuePersistentProperty<P>> extends AbstractMappingContext<E,P>; // Default implementation of a MappingContext using KeyValuePersistentEntity and KeyValuePersistentProperty as primary abstractions.\n", "des": "Infrastructure for the Key-Value mapping context."}
{"index": 3848, "repo": "lucene-core-9.7.0", "code": "package tests;\n\nInterface ConcurrentMergeSchedulerAccess; // Access to ConcurrentMergeScheduler internals exposed to the test framework.\nInterface IndexPackageAccess; // Access to org.apache.lucene.index package internals exposed to the test framework.\nInterface IndexPackageAccess.FieldInfosBuilder; // Public type exposing FieldInfo internal builders.\nInterface IndexWriterAccess; // Access to IndexWriter internals exposed to the test framework.\nInterface SegmentReaderAccess; // Access to SegmentReader internals exposed to the test framework.\nClass TestSecrets; // A set of static methods returning accessors for internal, package-private functionality in Lucene.\n", "des": "Internal bridges to package-private internals, for use by the lucene test framework only."}
{"index": 2635, "repo": "shiro-web-2.0.0-alpha-2", "code": "package tags;\n\npublic class AuthenticatedTag extends SecureTag; // JSP tag that renders the tag body only if the current user has executed a successful authentication attempt during their current session.\npublic class GuestTag extends SecureTag; // JSP tag that renders the tag body if the current user is not known to the system, either because they haven't logged in yet, or because they have no 'RememberMe' identity.\npublic class HasAnyRolesTag extends RoleTag; // Displays body content if the current user has any of the roles specified.\npublic class HasPermissionTag extends PermissionTag;\npublic class HasRoleTag extends RoleTag;\npublic class LacksPermissionTag extends PermissionTag;\npublic class LacksRoleTag extends RoleTag;\npublic class NotAuthenticatedTag extends SecureTag; // JSP tag that renders the tag body only if the current user has not executed a successful authentication attempt during their current session.\npublic abstract class PermissionTag extends SecureTag;\npublic class PrincipalTag extends SecureTag; // Tag used to print out the String value of a user's default principal, or a specific principal as specified by the tag's attributes.\npublic abstract class RoleTag extends SecureTag;\npublic abstract class SecureTag extends javax.servlet.jsp.tagext.TagSupport;\npublic class UserTag extends SecureTag; // JSP tag that renders the tag body if the current user known to the system, either from a successful login attempt (not necessarily during the current session) or from 'RememberMe' services.\n", "des": "Provides the Shiro JSP Tag Library implementations."}
{"index": 1256, "repo": "spring-core-6.0.11", "code": "package support;\n\npublic abstract class ClassHintUtils extends Object; // Utilities for core hint inference on Spring-managed classes, specifically for proxy types such as interface-based JDK proxies and CGLIB-generated subclasses which need proxy/reflection hints.\npublic class FilePatternResourceHintsRegistrar extends Object; // Register the necessary resource hints for loading files from the classpath.\n", "des": "Convenience classes for using runtime hints."}
{"index": 2934, "repo": "groovy-4.0.13", "code": "package reflection;\n\npublic class CacheAccessControlException extends GroovyRuntimeException;\npublic class CachedClass extends Object;\npublic static class CachedClass.CachedMethodComparatorByName extends Object implements Comparator<CachedMethod>;\npublic static class CachedClass.CachedMethodComparatorWithString extends Object implements Comparator;\npublic class CachedConstructor extends ParameterTypes;\npublic class CachedField extends MetaProperty;\npublic class CachedMethod extends MetaMethod implements Comparable;\npublic class ClassInfo extends Object implements Finalizable; // Handle for all information we want to keep about the class\npublic static interface ClassInfo.ClassInfoAction;\npublic class ClassLoaderForClassArtifacts extends ClassLoader;\npublic abstract class GeneratedMetaMethod extends MetaMethod;\npublic static class GeneratedMetaMethod.DgmMethodRecord extends Object implements Serializable;\npublic static class GeneratedMetaMethod.Proxy extends GeneratedMetaMethod;\npublic interface GroovyClassValue<T>; // Abstraction for Java version dependent ClassValue implementations.\npublic static interface GroovyClassValue.ComputeValue<T>;\npublic class MixinInMetaClass extends Object;\npublic class ParameterTypes extends Object;\npublic class ReflectionCache extends Object;\npublic class ReflectionUtils extends Object; // This class contains utility methods to determine which class called the current class to multiple levels of depth.\npublic class SunClassLoader extends ClassLoader; // Special class loader, which when running on Sun VM allows to generate accessor classes for any method\n", "des": "Internal classes for assisting with reflection."}
{"index": 1895, "repo": "shiro-core-2.0.0-alpha-2", "code": "package util;\n\npublic abstract class AbstractFactory<T> extends Object implements org.apache.shiro.lang.util.Factory<T>; // TODO - Class JavaDoc\npublic class AntPathMatcher extends Object implements PatternMatcher; // PathMatcher implementation for Ant-style path patterns.\npublic class CollectionUtils extends Object; // Static helper class for use dealing with Collections.\n@Deprecated public abstract class JavaEnvironment extends Object;\npublic class JdbcUtils extends Object; // A set of static helper methods for managing JDBC API objects.\npublic class MapContext extends Object implements Map<String,Object>, Serializable; // A MapContext provides a common base for context-based data storage in a Map.\npublic interface PatternMatcher; // Interface for components that can match source strings against a specified pattern string.\npublic class PermissionUtils extends Object; // Utility class to help with String-to-Permission object resolution.\npublic class RegExPatternMatcher extends Object implements PatternMatcher; // PatternMatcher implementation that uses standard java.util.regex objects.\npublic abstract class ThreadContext extends Object; // A ThreadContext provides a means of binding and unbinding objects to the current thread based on key/value pairs.\npublic interface ThreadState; // A ThreadState instance manages any state that might need to be bound and/or restored during a thread's execution.\n", "des": "Your run-of-the-mill 'util' package for components and logic widely used across the framework that can't find their home into a proper OO hierarchy (or, most likely for things used across many hierarchies)."}
{"index": 2260, "repo": "spring-vault-core-3.0.4", "code": "package config;\n\n@Configuration(proxyBeanMethods=false) public abstract class AbstractReactiveVaultConfiguration extends AbstractVaultConfiguration; // Base class for Spring Vault configuration using JavaConfig for a reactive infrastructure.\n@Configuration(proxyBeanMethods=false) public abstract class AbstractVaultConfiguration extends Object implements ApplicationContextAware; // Base class for Spring Vault configuration using JavaConfig.\npublic static class AbstractVaultConfiguration.ClientFactoryWrapper extends Object implements InitializingBean, DisposableBean; // Wrapper for ClientHttpRequestFactory to not expose the bean globally.\npublic static class AbstractVaultConfiguration.TaskSchedulerWrapper extends Object implements InitializingBean, DisposableBean; // Wrapper to keep ThreadPoolTaskScheduler local to Spring Vault and to not expose the bean globally.\n@Configuration public class EnvironmentVaultConfiguration extends AbstractVaultConfiguration implements ApplicationContextAware; // Configuration using Spring's Environment to configure Spring Vault endpoint, SSL options and authentication options.\n", "des": "Spring configuration for Vault."}
{"index": 2055, "repo": "spring-ws-security-4.0.5", "code": "package wss4j2;\n\npackage wss4j2.callback; // Contains CallbackHandler implementations for WSS4J 2.0.\npackage wss4j2.support; // Contains support classes for working with WSS4J 2.0.\npublic class Wss4jSecurityFaultException extends WsSecurityFaultException; // WSS4J-specific version of the WsSecurityFaultException.\npublic class Wss4jSecurityInterceptor extends AbstractWsSecurityInterceptor implements org.springframework.beans.factory.InitializingBean; // A WS-Security endpoint interceptor based on Apache's WSS4J.\npublic class Wss4jSecuritySecurementException extends WsSecuritySecurementException; // WSS4J-specific version of the WsSecuritySecurementException.\npublic class Wss4jSecurityValidationException extends WsSecurityValidationException; // WSS4J-specific version of the WsSecurityValidationException.\n", "des": "Contains classes for using the Apache WSS4J 2.0 WS-Security implementation within Spring-WS."}
{"index": 1126, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package deviceframework;\n\nClass AssignedDevice; // Device wrapper class used for NM REST API.\nClass DeviceMappingManager; // Schedule device resource based on requirements and do book keeping It holds all device type resource and can do scheduling as a default scheduler.\nClass DevicePluginAdapter; // The DevicePluginAdapter will adapt existing hooks.\nClass DeviceResourceDockerRuntimePluginImpl; // Bridge DevicePlugin and the hooks related to lunch Docker container.\nClass DeviceResourceHandlerImpl; // The Hooks into container lifecycle.\nClass DeviceResourceUpdaterImpl; // Hooks into NodeStatusUpdater to update resource.\nClass ShellWrapper; // A shell Wrapper to ease testing.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1168, "repo": "commons-math3-3.6.1", "code": "package hull;\n\nInterface ConvexHull<S extends Space,P extends Point<S>>; // This class represents a convex hull.\nInterface ConvexHullGenerator<S extends Space,P extends Point<S>>; // Interface for convex hull generators.\n", "des": "This package provides interfaces and classes related to the convex hull problem."}
{"index": 2637, "repo": "spring-integration-sftp-6.1.2", "code": "package dsl;\n\npublic final class Sftp extends Object; // The factory for SFTP components.\npublic class SftpInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileInboundChannelAdapterSpec<org.apache.sshd.sftp.client.SftpClient.DirEntry,SftpInboundChannelAdapterSpec,SftpInboundFileSynchronizingMessageSource>; // A RemoteFileInboundChannelAdapterSpec for an SftpInboundFileSynchronizingMessageSource.\npublic class SftpMessageHandlerSpec extends org.springframework.integration.file.dsl.FileTransferringMessageHandlerSpec<org.apache.sshd.sftp.client.SftpClient.DirEntry,SftpMessageHandlerSpec>;\npublic class SftpOutboundGatewaySpec extends org.springframework.integration.file.dsl.RemoteFileOutboundGatewaySpec<org.apache.sshd.sftp.client.SftpClient.DirEntry,SftpOutboundGatewaySpec>;\npublic class SftpStreamingInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileStreamingInboundChannelAdapterSpec<org.apache.sshd.sftp.client.SftpClient.DirEntry,SftpStreamingInboundChannelAdapterSpec,SftpStreamingMessageSource>;\n", "des": "Provides SFTP Components for the Java DSL."}
{"index": 3131, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface DialectFactory; // A factory for generating Dialect instances.\nInterface DialectResolutionInfo; // Exposes information about the database and JDBC driver that can be used in resolving the appropriate Dialect to use.\nInterface DialectResolutionInfoSource; // Contract for the source of DialectResolutionInfo.\nInterface DialectResolver; // Contract for determining the Dialect to use based on information about the database / driver.\nClass BasicDialectResolver; // Intended as support for custom resolvers which match a single db name (with optional version info).\nClass BasicSQLExceptionConverter; // A helper to centralize conversion of SQLExceptions to JDBCExceptions.\nClass DatabaseMetaDataDialectResolutionInfoAdapter; // An implementation of DialectResolutionInfo that delegates calls to a wrapped DatabaseMetaData.\n", "des": "Contracts supporting Dialect resolution (from JDBC metadata) and Dialect building."}
{"index": 985, "repo": "spring-ws-3.0.10.RELEASE", "code": "package interceptor;\n\nClass AbstractFaultCreatingValidatingInterceptor; // Subclass of AbstractValidatingInterceptor that creates a SOAP Fault whenever the request message cannot be validated.\nClass DelegatingSmartSoapEndpointInterceptor; // Implementation of the SmartSoapEndpointInterceptor interface that delegates to a delegate SoapEndpointInterceptor.\nClass PayloadRootSmartSoapEndpointInterceptor; // Implementation of the SmartSoapEndpointInterceptor interface that only intercepts requests that have a specified namespace URI or local part (or both) as payload root.\nClass PayloadValidatingInterceptor; // Interceptor that validates the contents of WebServiceMessages using a schema.\nClass SoapActionSmartEndpointInterceptor; // Implementation of the SmartEndpointInterceptor interface that only intercepts requests that have a specified soap action.\nClass SoapEnvelopeLoggingInterceptor; // SOAP-specific EndpointInterceptor that logs the complete request and response envelope of SoapMessage messages.\n", "des": "Provides miscellaneous endpoints EndpointInterceptor implementations for SOAP purposes."}
{"index": 473, "repo": "beam-sdks-java-core-2.49.0", "code": "package sdk;\n\npackage sdk.annotations; // Defines annotations used across the SDK.\npackage sdk.coders; // Defines Coders to specify how data is encoded to and decoded from byte strings.\npackage sdk.expansion; // Contains classes needed to expose transforms to other SDKs.\npackage sdk.function; // Java 8 functional interface extensions.\npackage sdk.harness; // Utilities for configuring worker environment.\npackage sdk.io; // Defines transforms for reading and writing common storage formats, including AvroIO, and TextIO.\npackage sdk.metrics; // Metrics allow exporting information about the execution of a pipeline.\npackage sdk.options; // Defines PipelineOptions for configuring pipeline execution.\npackage sdk.runners; // For internal use only; no backwards compatibility guarantees.\npackage sdk.schemas; // Defines Schema and other classes for representing schema'd data in a Pipeline.\npackage sdk.state; // Classes and interfaces for interacting with state.\npackage sdk.testing; // Defines utilities for unit testing Apache Beam pipelines.\npackage sdk.transforms; // Defines PTransforms for transforming data in a pipeline.\npackage sdk.util; // For internal use only; no backwards compatibility guarantees.\npackage sdk.values; // Defines PCollection and other classes for representing data in a Pipeline.\nInterface Pipeline.PipelineVisitor; // For internal use only; no backwards-compatibility guarantees.\nInterface PipelineResult; // Result of Pipeline.run().\nClass Pipeline; // A Pipeline manages a directed acyclic graph of PTransforms, and the PCollections that the PTransforms consume and produce.\nClass Pipeline.PipelineVisitor.Defaults; // Default no-op Pipeline.PipelineVisitor that enters all composite transforms.\nClass PipelineRunner<ResultT extends PipelineResult>; // A PipelineRunner runs a Pipeline.\nEnum Pipeline.PipelineVisitor.CompositeBehavior; // Control enum for indicating whether or not a traversal should process the contents of a composite transform or not.\nEnum PipelineResult.State; // Possible job states, for both completed and ongoing jobs.\nClass Pipeline.PipelineExecutionException; // Thrown during execution of a Pipeline, whenever user code within that Pipeline throws an exception.\n", "des": "Provides a simple, powerful model for building both batch and streaming parallel data processing Pipelines."}
{"index": 31, "repo": "commons-collections4-4.4", "code": "package trie;\n\npackage trie.analyzer; // This package contains various KeyAnalyzer implementations.\nClass AbstractBitwiseTrie<K,V>; // This class provides some basic Trie functionality and utility methods for actual bitwise Trie implementations.\nClass KeyAnalyzer<K>; // Defines the interface to analyze Trie keys on a bit level.\nClass PatriciaTrie<E>; // Implementation of a PATRICIA Trie (Practical Algorithm to Retrieve Information Coded in Alphanumeric).\nClass UnmodifiableTrie<K,V>; // An unmodifiable Trie.\n", "des": "This package contains implementations of the Trie interface."}
{"index": 407, "repo": "spring-social-core-1.1.6.RELEASE", "code": "package connect;\n\npackage connect.jdbc; // JDBC-based ConnectionRepository implementation.\npackage connect.support; // ServiceProvider Connect API implementation support.\nInterface ApiAdapter<A>; // An adapter that bridges between the uniform Connection model and a specific provider API model.\nInterface Connection<A>; // A link to a service provider user.\nInterface ConnectionFactoryLocator; // A ServiceLocator for ConnectionFactory instances.\nInterface ConnectionRepository; // Data access interface for saving and restoring Connection objects from a persistent store.\nInterface ConnectionSignUp; // A command that signs up a new user in the event no user id could be mapped from a Connection.\nInterface ConnectionValues; // A configuration interface used to set values on a Connection from a specific service provider API instance.\nInterface UsersConnectionRepository; // A data access interface for managing a global store of users connections to service providers.\nClass ConnectionData; // A data transfer object that allows the internal state of a Connection to be persisted and transferred between layers of an application.\nClass ConnectionFactory<A>; // Base abstraction for factories that construct service provider Connection instances.\nClass ConnectionKey; // The unique business key for a Connection instance.\nClass UserProfile; // A normalized model representing a service provider user profile.\nClass UserProfileBuilder; // Builder for constructing a UserProfile instance returned by ApiAdapter.fetchUserProfile(Object) Makes it easy to construct a profile instance where some of the individual fields may be null.\nClass ConnectionRepositoryException; // Base exception class for ConnectionRepository failures.\nClass DuplicateConnectionException; // Thrown by a ConnectionRepository when attempting to add a Connection and a connection already exists with the given key.\nClass NoSuchConnectionException; // Thrown by a ConnectionRepository when attempting to fetch a Connection and no such connection exists with the provided key.\nClass NotConnectedException; // Thrown by a ConnectionRepository when attempting to fetch a \"primary\" connection and the user is not connected to the provider in question.\n", "des": "Framework for establishing connections between local users and users of ServiceProviders such as Twitter and Facebook."}
{"index": 3588, "repo": "lucene-test-framework-9.7.0", "code": "package mockrandom;\n\nClass MockRandomPostingsFormat; // Randomly combines terms index impl w/ postings impls.\n", "des": "Frankenstein codec for testing that pieces together random components."}
{"index": 1715, "repo": "spring-boot-test-3.1.1", "code": "package system;\n\npublic interface CapturedOutput extends CharSequence; // Provides access to System.out and System.err output that has been captured by the OutputCaptureExtension or OutputCaptureRule.\npublic class OutputCaptureExtension extends Object implements org.junit.jupiter.api.extension.BeforeAllCallback, org.junit.jupiter.api.extension.AfterAllCallback, org.junit.jupiter.api.extension.BeforeEachCallback, org.junit.jupiter.api.extension.AfterEachCallback, org.junit.jupiter.api.extension.ParameterResolver; // JUnit Jupiter @Extension to capture System.out and System.err.\npublic class OutputCaptureRule extends Object implements org.junit.rules.TestRule, CapturedOutput; // JUnit @Rule to capture output from System.out and System.err.\n", "des": "Classes for System-related testing."}
{"index": 2500, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package system;\n\n@AutoConfiguration(before=HealthContributorAutoConfiguration.class) @ConditionalOnEnabledHealthIndicator(\"diskspace\") @EnableConfigurationProperties(DiskSpaceHealthIndicatorProperties.class) public class DiskSpaceHealthContributorAutoConfiguration extends Object; // Auto-configuration for DiskSpaceHealthIndicator.\n@ConfigurationProperties(prefix=\"management.health.diskspace\") public class DiskSpaceHealthIndicatorProperties extends Object; // External configuration properties for DiskSpaceHealthIndicator.\n", "des": "Auto-configuration for actuator system concerns."}
{"index": 3867, "repo": "lucene-spatial-extras-9.7.0", "code": "package tree;\n\nInterface Cell; // Represents a grid cell.\nInterface CellCanPrune; // Grid cells that share nothing with other cells when calling Cell.getNextLevelCells(Shape) might implement this interface.\nInterface NumberRangePrefixTree.NRShape; // Base interface for Shapes this prefix tree supports.\nInterface NumberRangePrefixTree.UnitNRShape; // A unit value Shape implemented as a stack of numbers, one for each level in the prefix tree.\nInterface S2ShapeFactory; // Shape factory for Spatial contexts that support S2 geometry.\nClass CellIterator; // An Iterator of SpatialPrefixTree Cells.\nClass DateRangePrefixTree; // A PrefixTree for date ranges in which the levels of the tree occur at natural periods of time (e.g.\nClass GeohashPrefixTree; // A SpatialPrefixTree based on Geohashes.\nClass GeohashPrefixTree.Factory; // Factory for creating GeohashPrefixTree instances with useful defaults\nClass LegacyCell; // The base for the original two SPT's: Geohash and Quad.\nClass NumberRangePrefixTree; // A SpatialPrefixTree for single-dimensional numbers and number ranges of fixed precision values (not floating point).\nClass PackedQuadPrefixTree; // Uses a compact binary representation of 8 bytes to encode a spatial quad trie.\nClass PackedQuadPrefixTree.Factory; // Factory for creating PackedQuadPrefixTree instances with useful defaults.\nClass QuadPrefixTree; // A SpatialPrefixTree which uses a quad tree in which an indexed term will be generated for each cell, 'A', 'B', 'C', 'D'.\nClass QuadPrefixTree.Factory; // Factory for creating QuadPrefixTree instances with useful defaults\nClass S2PrefixTree; // Spatial prefix tree for S2 Geometry.\nClass S2PrefixTree.Factory; // Factory for creating S2PrefixTree instances with useful defaults\nClass SpatialPrefixTree; // A spatial Prefix Tree, or Trie, which decomposes shapes into prefixed strings at variable lengths corresponding to variable precision.\nClass SpatialPrefixTreeFactory; // Abstract Factory for creating SpatialPrefixTree instances with useful defaults and passed on configurations defined in a Map.\n", "des": "This package is about SpatialPrefixTree and any supporting classes."}
{"index": 3425, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface ArchiveContext; // Describes the context for visiting the entries within an archive\nInterface ArchiveDescriptor; // Contract for visiting an archive, which might be a jar, a zip, an exploded directory, etc.\nInterface ArchiveDescriptorFactory; // Contract for building ArchiveDescriptor instances.\nInterface ArchiveEntry; // Represent an entry in the archive.\nInterface ArchiveEntryHandler; // Handler for archive entries, based on the classified type of the entry\nInterface InputStreamAccess; // Contract for building InputStreams, especially in on-demand situations\nInterface JarFileEntryUrlAdjuster; // Optional contract for ArchiveDescriptorFactory implementations to implement to be able to adjust <jar-file/> URL's defined in persistence.xml files.\nClass AbstractArchiveDescriptor; // Base support for ArchiveDescriptor implementors.\nClass AbstractArchiveDescriptorFactory;\nClass ArchiveException; // Indicates a problem accessing or visiting the archive\n", "des": "Defines the SPI for support of \"scanning\" of \"archives\"."}
{"index": 3520, "repo": "opennlp-tools-2.2.0", "code": "package irishsentencebank;\n\nClass IrishSentenceBankDocument; // A structure to hold an Irish Sentence Bank document, which is a collection of tokenized sentences.\nClass IrishSentenceBankDocument.IrishSentenceBankFlex;\nClass IrishSentenceBankDocument.IrishSentenceBankSentence;\nClass IrishSentenceBankSentenceStreamFactory<P>;\nClass IrishSentenceBankTokenSampleStreamFactory<P>;\n", "des": "Experimental package related to the Irish Sentence Bank format."}
{"index": 3515, "repo": "opennlp-tools-2.2.0", "code": "package formats;\n\npackage formats.ad; // Experimental package related to the Arvores Deitadas corpus format.\npackage formats.brat; // Experimental package related to the corpus format used by the \"brat rapid annotation tool\" (brat).\npackage formats.conllu; // Experimental package related to the CoNNL-U format.\npackage formats.frenchtreebank; // Experimental package related to the French Treebank format.\npackage formats.irishsentencebank; // Experimental package related to the Irish Sentence Bank format.\npackage formats.leipzig; // Experimental package related to the Leipzig corpus format.\npackage formats.letsmt; // Experimental package related to the letsmt corpus format.\npackage formats.masc; // Experimental package related to the MASC corpus format.\npackage formats.muc; // Experimental package related to the MUC corpus format.\npackage formats.nkjp; // Experimental package related to the National corpus of Polish NKJP format.\npackage formats.ontonotes; // Experimental package related to the OntoNotes 4.0 format.\nInterface NameSampleDataStreamFactory.Parameters;\nInterface ParseSampleStreamFactory.Parameters;\nInterface WordTagSampleStreamFactory.Parameters;\nClass AbstractSampleStreamFactory<T,​P>; // Base class for sample stream factories.\nClass BioNLP2004NameSampleStream; // A sample stream for the training files of the BioNLP/NLPBA 2004 shared task.\nClass BioNLP2004NameSampleStreamFactory<P>;\nClass ChunkerSampleStreamFactory<P>; // Factory producing OpenNLP ChunkSampleStreams.\nClass Conll02NameSampleStream; // Parser for the Dutch and Spanish ner training files of the CONLL 2002 shared task.\nClass Conll02NameSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass Conll03NameSampleStream; // An import stream which can parse the CONLL03 data.\nClass Conll03NameSampleStreamFactory<P>;\nClass ConllXPOSSampleStream; // Parses the data from the CONLL 06 shared task into POS Samples.\n", "des": "Experimental package related to converting various corpora to OpenNLP Format."}
{"index": 1166, "repo": "commons-math3-3.6.1", "code": "package twod;\n\npackage twod.hull; // This package provides algorithms to generate the convex hull for a set of points in an two-dimensional euclidean space.\nClass DiskGenerator; // Class generating an enclosing ball from its support points.\nClass Euclidean2D; // This class implements a two-dimensional space.\nClass Line; // This class represents an oriented line in the 2D plane.\nClass PolygonsSet; // This class represents a 2D region: a set of polygons.\nClass Segment; // Simple container for a two-points segment.\nClass SubLine; // This class represents a sub-hyperplane for Line.\nClass Vector2D; // This class represents a 2D vector.\nClass Vector2DFormat; // Formats a 2D vector in components list format \"{x; y}\".\n", "des": "This package provides basic 2D geometry components."}
{"index": 1192, "repo": "commons-math3-3.6.1", "code": "package vector;\n\npackage vector.jacobian; // This package provides optimization algorithms that require derivatives.\nClass JacobianMultivariateVectorOptimizer; // All classes and interfaces in this package are deprecated.\nClass ModelFunction; // All classes and interfaces in this package are deprecated.\nClass ModelFunctionJacobian; // All classes and interfaces in this package are deprecated.\nClass MultiStartMultivariateVectorOptimizer;\nClass MultivariateVectorOptimizer;\nClass Target; // All classes and interfaces in this package are deprecated.\nClass Weight; // All classes and interfaces in this package are deprecated.\n", "des": "Algorithms for optimizing a vector function."}
{"index": 3680, "repo": "solr-core-9.3.0", "code": "package request;\n\npackage request.json; // JSON related classes\npackage request.macro; // Parameter substitution / macro expansion.\nInterface SolrQueryRequest; // Container for a request to execute a query.\nInterface SolrRequestHandler; // Implementations of SolrRequestHandler are called to handle query requests.\nClass DelegatingSolrQueryRequest; // A SolrQueryRequest implementation that defers to a delegate in all cases.\nClass DocValuesFacets; // Computes term facets for docvalues field (single or multivalued).\nClass DocValuesStats; // Computes term stats for docvalues field (single or multivalued).\nClass IntervalFacets; // Computes interval facets for docvalues field (single or multivalued).\nClass IntervalFacets.FacetInterval; // Helper class to match and count of documents in specified intervals\nClass LocalSolrQueryRequest;\nClass RegexBytesRefFilter; // An implementation of Predicate which returns true if the BytesRef matches the supplied regular expression.\nClass SimpleFacets; // A class that generates simple Facet information for a request.\nClass SimpleFacets.CountPair<K extends Comparable<? super K>,​V extends Comparable<? super V>>; // A simple key=>val pair whose natural order is such that higher vals come before lower vals.\nClass SimpleFacets.ParsedParams;\nClass SolrQueryRequestBase; // Base implementation of SolrQueryRequest that provides some convenience methods for accessing parameters, and manages an IndexSearcher reference.\nClass SolrRequestInfo; // Information about the Solr request/response held in a ThreadLocal.\nClass SubstringBytesRefFilter; // An implementation of Predicate which returns true if the BytesRef contains a given substring.\n", "des": "APIs and classes for dealing with Solr requests"}
{"index": 1298, "repo": "groovy-all-4.0.13", "code": "package ui;\n\npackage ui.text; // Text processing helpers for the interactive command line terminal.\npublic abstract class ConsoleSupport extends Object; // Base class for console\npublic class ConsoleTextEditor extends JScrollPane; // Component which provides a styled editor for the console.\npublic class SystemOutputInterceptor extends FilterOutputStream; // Intercepts System.out/System.err.\n", "des": "An interactive command line terminal along with a Swing console for evaluating Groovy scripts and inspecting objects, AST and bytecode information."}
{"index": 1270, "repo": "spring-core-6.0.11", "code": "package codec;\n\npublic abstract class AbstractDataBufferDecoder<T> extends AbstractDecoder<T>; // Abstract base class for Decoder implementations that can decode a DataBuffer directly to the target element type.\npublic abstract class AbstractDecoder<T> extends Object implements Decoder<T>; // Abstract base class for Decoder implementations.\npublic abstract class AbstractEncoder<T> extends Object implements Encoder<T>; // Abstract base class for Encoder implementations.\npublic abstract class AbstractSingleValueEncoder<T> extends AbstractEncoder<T>; // Abstract base class for Encoder classes that can only deal with a single value.\npublic class ByteArrayDecoder extends AbstractDataBufferDecoder<byte[]>; // Decoder for byte arrays.\npublic class ByteArrayEncoder extends AbstractEncoder<byte[]>; // Encoder for byte arrays.\npublic class ByteBufferDecoder extends AbstractDataBufferDecoder<ByteBuffer>; // Decoder for ByteBuffers.\npublic class ByteBufferEncoder extends AbstractEncoder<ByteBuffer>; // Encoder for ByteBuffers.\npublic final class CharSequenceEncoder extends AbstractEncoder<CharSequence>; // Encode from a CharSequence stream to a bytes stream.\npublic class CodecException extends NestedRuntimeException; // General error that indicates a problem while encoding and decoding to and from an Object stream.\npublic class DataBufferDecoder extends AbstractDataBufferDecoder<DataBuffer>; // Simple pass-through decoder for DataBuffers.\npublic class DataBufferEncoder extends AbstractEncoder<DataBuffer>; // Simple pass-through encoder for DataBuffers.\npublic interface Decoder<T>; // Strategy for decoding a DataBuffer input stream into an output stream of elements of type <T>.\npublic class DecodingException extends CodecException; // Indicates an issue with decoding the input stream with a focus on content related issues such as a parse failure.\npublic interface Encoder<T>; // Strategy to encode a stream of Objects of type <T> into an output stream of bytes.\npublic class EncodingException extends CodecException; // Indicates an issue with encoding the input Object stream with a focus on not being able to encode Objects.\npublic abstract class Hints extends Object; // Constants and convenience methods for working with hints.\npublic class Netty5BufferDecoder extends AbstractDataBufferDecoder<io.netty5.buffer.Buffer>; // Decoder for Buffers.\npublic class Netty5BufferEncoder extends AbstractEncoder<io.netty5.buffer.Buffer>; // Encoder for Buffers.\n", "des": "Encoder and Decoder abstractions to convert between a reactive stream of bytes and Java objects."}
{"index": 3343, "repo": "opencms-core-15.0", "code": "package extensions;\n\nInterface CmsMaxHeightExtension.I_HeightChangeHandler; // Callback interfaces for height change notifications.\nClass CmsAutoGrowingTextArea; // Extension to add a CSS class to any component depending on it's scroll position.\nClass CmsEmbeddedDialogExtension; // The extension that provides RPC communication between the client and server side of embedded VAADIN dialogs.\nClass CmsGwtDialogExtension; // Extension used to open existing GWT based dialogs (from ADE, etc.) from the server side, for use in context menu actions.\nClass CmsHistoryExtension; // Extension to allow clientside history back and forward.\nClass CmsJSPBrowserFrameExtension; // Vaadin extension class for a BrowserFrame to display a JSP.\nClass CmsMaxHeightExtension; // Allows the use of max height in combination with vaadin layout components.\nClass CmsPollServerExtension; // Allows the use of max height in combination with vaadin layout components.\nClass CmsPropertyDialogExtension; // Extension used for the GWT-based property dialog called from the workplace.\nClass CmsScrollPositionCss; // Extension to add a CSS class to any component depending on it's scroll position.\nClass CmsUploadAreaExtension; // Extends the given component to be an upload drop area.\nClass CmsWindowCloseExtension; // Makes window close events available on the server side.\nClass CmsWindowExtension; // Extension used to open new browser windows.\n", "des": "Contains Vaadin UI extensions."}
{"index": 3616, "repo": "solr-test-framework-9.3.0", "code": "package solr;\n\npackage solr.analysis; // Factories for Mock analysis classes that can be used in test configurations.\npackage solr.cloud; // Base classes and utilities for creating and testing Solr Cloud clusters.\npackage solr.core; // Factories for Mock classes that can be used in test configurations\npackage solr.embedded; // Classes for running embedded Solr Jetty Servers in tests.\npackage solr.handler; // Concrete implementations of org.apache.solr.request.SolrRequestHandler\npackage solr.search; // Mock classes for testing search.\npackage solr.spelling; // Mock classes for testing spelling.\npackage solr.util; // Misc utilities useful when implementing test cases.\nClass BaseDistributedSearchTestCase; // Helper base class for distributed search test cases\nClass BaseDistributedSearchTestCase.RandDate;\nClass BaseDistributedSearchTestCase.RandVal;\nClass EmbeddedSolrServerTestBase;\nClass JSONTestUtil;\nClass SolrIgnoredThreadsFilter; // This ignores those threads in Solr for which there is no way to clean up after a suite.\nClass SolrJettyTestBase;\nClass SolrTestCase; // All Solr test cases should derive from this class eventually.\nClass SolrTestCaseHS;\nClass SolrTestCaseHS.Client;\nClass SolrTestCaseHS.Client.Tester;\nClass SolrTestCaseHS.ClientProvider;\nClass SolrTestCaseHS.SolrInstance;\nClass SolrTestCaseHS.SolrInstances;\nClass SolrTestCaseJ4; // A junit4 Solr test harness that extends SolrTestCase and, by extension, LuceneTestCase.\nClass SolrTestCaseJ4.BVal;\nClass SolrTestCaseJ4.Doc;\nClass SolrTestCaseJ4.Fld;\nClass SolrTestCaseJ4.FldType;\nClass SolrTestCaseJ4.FVal;\nClass SolrTestCaseJ4.IRange;\nClass SolrTestCaseJ4.IVals;\nClass SolrTestCaseJ4.IValsPercent;\nClass SolrTestCaseJ4.RandomizingCloudHttp2SolrClientBuilder; // A variant of CloudHttp2SolrClient.Builder that will randomize some internal settings.\nClass SolrTestCaseJ4.RandomizingCloudSolrClientBuilder;\nClass SolrTestCaseJ4.SVal;\nClass SolrTestCaseJ4.Vals;\n", "des": "Common base classes for implementing tests."}
{"index": 2316, "repo": "spring-boot-3.1.1", "code": "package java;\n\npublic class JavaLoggingSystem extends AbstractLoggingSystem; // LoggingSystem for java.util.logging.\n@Order(2147483647) public static class JavaLoggingSystem.Factory extends Object implements LoggingSystemFactory; // LoggingSystemFactory that returns JavaLoggingSystem if possible.\npublic class SimpleFormatter extends Formatter; // Simple 'Java Logging' Formatter.\n", "des": "Support for 'Java Util Logging'."}
{"index": 2214, "repo": "spring-data-commons-3.1.2", "code": "package repository;\n\npackage repository.cdi; // Base classes to implement CDI support for repositories.\npackage repository.config; // Support classes for repository namespace and JavaConfig integration.\npackage repository.core; // Core abstractions for repository implementation.\npackage repository.history; // API for repositories using historiography.\npackage repository.init; // Support for repository initialization using XML and JSON.\npackage repository.query; // Support classes to work with query methods.\npackage repository.reactive; // Support for reactive repositories.\npackage repository.support; // Support classes for integration of the repository programming model with 3rd party frameworks.\npackage repository.util; // Utility classes for repository implementations.\n@NoRepositoryBean public interface CrudRepository<T,ID> extends Repository<T,ID>; // Interface for generic CRUD operations on a repository for a specific type.\n@NoRepositoryBean public interface ListCrudRepository<T,ID> extends CrudRepository<T,ID>; // Interface for generic CRUD operations on a repository for a specific type.\n@NoRepositoryBean public interface ListPagingAndSortingRepository<T,ID> extends PagingAndSortingRepository<T,ID>; // Repository fragment to provide methods to retrieve entities using the pagination and sorting abstraction.\n@Retention(RUNTIME) @Target(TYPE) @Documented public @interface NoRepositoryBean; // Annotation to exclude repository interfaces from being picked up and thus in consequence getting an instance being created.\n@NoRepositoryBean public interface PagingAndSortingRepository<T,ID> extends Repository<T,ID>; // Repository fragment to provide methods to retrieve entities using the pagination and sorting abstraction.\n@Indexed public interface Repository<T,ID>; // Central repository marker interface.\n@Indexed @Documented @Retention(RUNTIME) @Target(TYPE) @Inherited public @interface RepositoryDefinition; // Annotation to demarcate interfaces a repository proxy shall be created for.\n", "des": "Central interfaces for repository abstraction."}
{"index": 1576, "repo": "spring-cloud-task-core-3.0.3", "code": "package support;\n\npublic enum DatabaseType extends Enum<DatabaseType>; // Enum representing a database type, such as DB2 or oracle.\npublic class SimpleTaskExplorer extends Object implements TaskExplorer; // TaskExplorer for that gathers task information from a task repository.\npublic class SimpleTaskNameResolver extends Object implements TaskNameResolver, org.springframework.context.ApplicationContextAware; // Simple implementation of the TaskNameResolver interface.\npublic class SimpleTaskRepository extends Object implements TaskRepository; // Records the task execution information to the log and to TaskExecutionDao provided.\npublic class TaskExecutionDaoFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<TaskExecutionDao>; // A FactoryBean implementation that creates the appropriate TaskExecutionDao based on the provided information.\npublic final class TaskRepositoryInitializer extends Object implements org.springframework.beans.factory.InitializingBean; // Utility for initializing the Task Repository's datasource.\n", "des": "Classes used for setting up and supporting a task repositories."}
{"index": 1884, "repo": "shiro-core-2.0.0-alpha-2", "code": "package realm;\n\npackage realm.activedirectory; // Realms that acquire security data from a Microsoft Active Directory.\npackage realm.jdbc; // Realms that acquire security data from an RDBMS (Relational Database Management System) using the JDBC API.\npackage realm.jndi; // Support for acquiring Realms from JNDI, particularly useful for configuring Shiro in JEE or EJB environments.\npackage realm.ldap; // Realms that acquire security data from an LDAP (Lightweight Directory Access Protocol) server utilizing LDAP/Naming APIs.\npackage realm.text; // Realms that acquire security data from text-based data sources such as Files or text streams.\npublic abstract class AuthenticatingRealm extends CachingRealm implements org.apache.shiro.lang.util.Initializable; // A top-level abstract implementation of the Realm interface that only implements authentication support (log-in) operations and leaves authorization (access control) behavior to subclasses.\npublic abstract class AuthorizingRealm extends AuthenticatingRealm implements Authorizer, org.apache.shiro.lang.util.Initializable, PermissionResolverAware, RolePermissionResolverAware; // An AuthorizingRealm extends the AuthenticatingRealm's capabilities by adding Authorization (access control) support.\npublic abstract class CachingRealm extends Object implements Realm, org.apache.shiro.lang.util.Nameable, org.apache.shiro.cache.CacheManagerAware, LogoutAware; // A very basic abstract extension point for the Realm interface that provides caching support for subclasses.\npublic interface Realm; // A Realm is a security component that can access application-specific security entities such as users, roles, and permissions to determine authentication and authorization operations.\npublic interface RealmFactory; // Enables Shiro end-users to configure and initialize one or more Realm instances in any manner desired.\npublic class SimpleAccountRealm extends AuthorizingRealm; // A simple implementation of the Realm interface that uses a set of configured user accounts and roles to support authentication and authorization.\n", "des": "Components and sub-packages used in supporting the core Realm interface."}
{"index": 2795, "repo": "spring-amqp-3.0.6", "code": "package amqp;\n\npackage amqp.core; // Provides core classes for the spring AMQP abstraction.\npackage amqp.event; // Classes related to application events\npackage amqp.support; // Package for Spring AMQP support classes.\npackage amqp.utils; // Provides utility classes to support Spring AMQP.\npublic class AmqpApplicationContextClosedException extends AmqpException; // Thrown when the connection factory has been destroyed during context close; the factory can no longer open connections.\npublic class AmqpAuthenticationException extends AmqpException; // Runtime wrapper for an authentication exception.\npublic class AmqpConnectException extends AmqpException; // RuntimeException wrapper for an ConnectException which can be commonly thrown from AMQP operations if the remote process dies or there is a network issue.\npublic class AmqpException extends RuntimeException; // Base RuntimeException for errors that occur when executing AMQP operations.\npublic class AmqpIllegalStateException extends AmqpException; // Equivalent of an IllegalStateException but within the AmqpException hierarchy.\npublic class AmqpIOException extends AmqpException; // RuntimeException wrapper for an IOException which can be commonly thrown from AMQP operations.\npublic class AmqpRejectAndDontRequeueException extends AmqpException; // Exception for listener implementations used to indicate the basic.reject will be sent with requeue=false in order to enable features such as DLQ.\npublic class AmqpRemoteException extends AmqpException; // An exception that wraps an exception thrown by the server in a request/reply scenario.\npublic class AmqpResourceNotAvailableException extends AmqpException; // The AmqpException thrown when some resource can't be accessed.\npublic class AmqpTimeoutException extends AmqpException; // Exception thrown when some time-bound operation fails to execute in the desired time.\npublic class AmqpUnsupportedEncodingException extends AmqpException; // RuntimeException for unsupported encoding in an AMQP operation.\npublic class ImmediateAcknowledgeAmqpException extends AmqpException; // Special exception for listener implementations that want to signal that the current batch of messages should be acknowledged immediately (i.e.\npublic class ImmediateRequeueAmqpException extends AmqpException; // The special AmqpException to be thrown from the listener (e.g.\npublic class UncategorizedAmqpException extends AmqpException; // A \"catch-all\" exception type within the AmqpException hierarchy when no more specific cause is known.\n", "des": "Base package for Spring AMQP."}
{"index": 1752, "repo": "spring-data-mongodb-4.1.2", "code": "package encryption;\n\npublic interface EncryptingConverter<S,T> extends MongoValueConverter<S,T>; // A specialized MongoValueConverter for encryptiong and decrypting properties.\npublic class MongoEncryptionConverter extends Object implements EncryptingConverter<Object,Object>; // Default implementation of EncryptingConverter.\n", "des": "Converters integrating with explicit encryption mechanism of Client-Side Field Level Encryption."}
{"index": 3835, "repo": "lucene-core-9.7.0", "code": "package standard;\n\nClass StandardAnalyzer; // Filters StandardTokenizer with LowerCaseFilter and StopFilter, using a configurable list of stop words.\nClass StandardTokenizer; // A grammar-based tokenizer constructed with JFlex.\nClass StandardTokenizerFactory; // Factory for StandardTokenizer.\nClass StandardTokenizerImpl; // This class implements Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29.\n", "des": "Fast, general-purpose grammar-based tokenizer StandardTokenizer implements the Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29."}
{"index": 2543, "repo": "spring-security-core-6.1.2", "code": "package provisioning;\n\npublic interface GroupManager; // Allows management of groups of authorities and their members.\npublic class InMemoryUserDetailsManager extends Object implements UserDetailsManager, UserDetailsPasswordService; // Non-persistent implementation of UserDetailsManager which is backed by an in-memory map.\npublic class JdbcUserDetailsManager extends JdbcDaoImpl implements UserDetailsManager, GroupManager; // Jdbc user management service, based on the same table structure as its parent class, JdbcDaoImpl.\npublic interface UserDetailsManager extends UserDetailsService; // An extension of the UserDetailsService which provides the ability to create new users and update existing ones.\n", "des": "Contains simple user and authority group account provisioning interfaces together with a a JDBC-based implementation."}
{"index": 2167, "repo": "wicket-core-10.0.0-M1", "code": "package template;\n\npublic final class CssTemplate extends TextTemplateDecorator; // Decorates a TextTemplate with CSS tags.\npublic final class JavaScriptTemplate extends TextTemplateDecorator; // Decorates a TextTemplate with JavaScript tags.\npublic class PackageTextTemplate extends TextTemplate; // A String resource that can be appended to.\npublic abstract class TextTemplate extends org.apache.wicket.util.resource.AbstractStringResourceStream; // Represents a text template that can do variable interpolation.\npublic abstract class TextTemplateDecorator extends TextTemplate; // Provides the ability to 'decorate' the actual template contents before it is contributed to the header.\n", "des": "Resource extensions that make working with header contributions easier and more maintainable."}
{"index": 3101, "repo": "jena-querybuilder-4.9.0", "code": "package clauses;\n\npublic interface ConstructClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the ConstructClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rConstructTemplate\npublic interface DatasetClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the DatasetClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rDatasetClause\npublic interface PrologClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the PrologClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rPrologue\npublic interface SelectClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the SelectClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rSelectClause\npublic interface SolutionModifierClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the SolutionClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rSolutionModifier\npublic interface ValuesClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the ValueClause as per https://www.w3.org/TR/sparql11-query/#rValuesClause Conceptually this the values clause constructs a table comprising columns named by variables and rows of data for those columns.\npublic interface WhereClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the WhereClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rWhereClause\n", "des": "Interfaces that describe various SPARQL clauses as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321."}
{"index": 2853, "repo": "spring-integration-core-6.1.2", "code": "package core;\n\npublic interface AsyncMessagingOperations;\npublic class AsyncMessagingTemplate extends MessagingTemplate implements AsyncMessagingOperations;\npublic class ErrorMessagePublisher extends Object implements org.springframework.beans.factory.BeanFactoryAware; // The component which can be used as general purpose of errors publishing.\n@FunctionalInterface public interface GenericHandler<P>; // A functional interface to specify MessageHandler logic with Java 8 Lambda expression:\n@FunctionalInterface public interface GenericSelector<S>; // Generic (lambda) strategy interface for selector.\n@FunctionalInterface public interface GenericTransformer<S,T>; // Generic (lambda) strategy interface for transformer.\npublic interface MessageProducer; // Base interface for any component that is capable of sending messages to a MessageChannel.\n@FunctionalInterface public interface MessageSelector extends GenericSelector<org.springframework.messaging.Message<?>>; // Strategy interface for message selection.\n@FunctionalInterface public interface MessageSource<T> extends IntegrationPattern; // Base interface for any source of Messages that can be polled.\npublic class MessagingTemplate extends org.springframework.messaging.core.GenericMessagingTemplate;\npublic interface Pausable extends ManageableLifecycle; // Endpoints implementing this interface can be paused/resumed.\n", "des": "Provides core classes."}
{"index": 2337, "repo": "spring-boot-3.1.1", "code": "package task;\n\npublic class TaskExecutorBuilder extends Object; // Builder that can be used to configure and create a TaskExecutor.\n@FunctionalInterface public interface TaskExecutorCustomizer; // Callback interface that can be used to customize a ThreadPoolTaskExecutor.\npublic class TaskSchedulerBuilder extends Object; // Builder that can be used to configure and create a TaskScheduler.\n@FunctionalInterface public interface TaskSchedulerCustomizer; // Callback interface that can be used to customize a ThreadPoolTaskScheduler.\n", "des": "Utilities and classes related to task execution and scheduling."}
{"index": 3435, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\npackage spi.support; // Package intended for simplifying the worked needed to implement a caching provider.\nInterface CacheImplementor; // SPI contract for Hibernate's second-level cache engine\nInterface CacheKeysFactory;\nInterface CacheTransactionSynchronization; // Defines a context object that a RegionFactory is asked to create (RegionFactory.createTransactionContext(org.hibernate.engine.spi.SharedSessionContractImplementor)}) when a Hibernate Session is created.\nInterface DirectAccessRegion; // Specialized Region whose data is accessed directly (not requiring key/item wrapping, e.g.\nInterface DomainDataRegion; // A Region for cacheable domain data - entity, collection, natural-id.\nInterface ExtendedStatisticsSupport; // Optional Region contract defining support for extra statistic information\nInterface QueryCache;\nInterface QueryResultsCache; // Defines the responsibility for managing query result data caching in regards to a specific region.\nInterface QueryResultsRegion; // Defines the contract for a cache region which will specifically be used to store query results.\nInterface Region; // Contract for a named \"region\".\nInterface RegionFactory; // Contract for building second level cache regions.\nInterface SecondLevelCacheLogger;\nInterface TimestampsCache; // Wrapper for a TimestampsRegion adding handling of stale results\nInterface TimestampsCacheFactory; // Responsible for building the TimestampsRegionAccessFactory to use for managing query results in regards to staleness of the underlying tables (sometimes called \"query spaces\" or \"table spaces\")\nInterface TimestampsRegion;\nInterface UpdateTimestampsCache;\nClass AbstractCacheTransactionSynchronization;\nClass AbstractRegionFactory;\nClass FilterKey; // Allows cached queries to be keyed by enabled filters.\nClass QueryKey; // A key that identifies a particular query with bound parameter values.\nClass QuerySpacesHelper;\nClass SecondLevelCacheLogger_$logger; // Warning this class consists of generated code.\nClass StandardCacheTransactionSynchronization;\n", "des": "Defines the integration aspect of Hibernate's second-level caching allowing \"caching back ends\" to be plugged in as a caching provider."}
{"index": 1976, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package rsocket;\n\n@AutoConfiguration @EnableRSocketSecurity @ConditionalOnClass(org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor.class) public class RSocketSecurityAutoConfiguration extends Object; // Auto-configuration for Spring Security for an RSocket server.\n", "des": "Auto-configuration for RSocket support in Spring Security."}
{"index": 3139, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package persistent;\n\nClass DeleteHandlerImpl;\nClass Helper;\nClass PersistentTableBulkIdStrategy; // This is a strategy that mimics temporary tables for databases which do not support temporary tables.\nClass UpdateHandlerImpl;\n", "des": "Package contains an implementation of MultiTableBulkIdStrategy based on the use of a persistent (ANSI SQL term) table to hold id values."}
{"index": 1225, "repo": "spring-plugin-core-3.0.0", "code": "package core;\n\npackage core.config; // This package contains configuration support classes to ease registry configuration with Spring namespaces.\npackage core.support; // This package contains support classes to create bean lists or plugin registry instances out of beans implementing a certain interface.\npublic class OrderAwarePluginRegistry<T extends Plugin<S>,S> extends SimplePluginRegistry<T,S>; // PluginRegistry implementation that be made aware of a certain ordering of Plugins.\npublic interface Plugin<S>; // Central interface for plugins for the system.\npublic interface PluginRegistry<T extends Plugin<S>,S> extends Iterable<T>; // Registry for Plugins.\npublic abstract class PluginRegistrySupport<T extends Plugin<S>,S> extends Object implements PluginRegistry<T,S>, Iterable<T>; // Base class for PluginRegistry implementations.\npublic class SimplePluginRegistry<T extends Plugin<S>,S> extends PluginRegistrySupport<T,S>; // Basic implementation of PluginRegistry.\n", "des": "This package contains the core plugin API."}
{"index": 1810, "repo": "spring-aop-6.0.11", "code": "package support;\n\npackage support.annotation; // Annotation support for AOP pointcuts.\npublic abstract class AbstractBeanFactoryPointcutAdvisor extends AbstractPointcutAdvisor implements org.springframework.beans.factory.BeanFactoryAware; // Abstract BeanFactory-based PointcutAdvisor that allows for any Advice to be configured as reference to an Advice bean in a BeanFactory.\npublic abstract class AbstractExpressionPointcut extends Object implements ExpressionPointcut, Serializable; // Abstract superclass for expression pointcuts, offering location and expression properties.\npublic abstract class AbstractGenericPointcutAdvisor extends AbstractPointcutAdvisor; // Abstract generic PointcutAdvisor that allows for any Advice to be configured.\npublic abstract class AbstractPointcutAdvisor extends Object implements PointcutAdvisor, org.springframework.core.Ordered, Serializable; // Abstract base class for PointcutAdvisor implementations.\npublic abstract class AbstractRegexpMethodPointcut extends StaticMethodMatcherPointcut implements Serializable; // Abstract base regular expression pointcut bean.\npublic abstract class AopUtils extends Object; // Utility methods for AOP support code.\npublic abstract class ClassFilters extends Object; // Static utility methods for composing ClassFilters.\npublic class ComposablePointcut extends Object implements Pointcut, Serializable; // Convenient class for building up pointcuts.\npublic class ControlFlowPointcut extends Object implements Pointcut, ClassFilter, MethodMatcher, Serializable; // Pointcut and method matcher for use in simple cflow-style pointcut.\npublic class DefaultBeanFactoryPointcutAdvisor extends AbstractBeanFactoryPointcutAdvisor; // Concrete BeanFactory-based PointcutAdvisor that allows for any Advice to be configured as reference to an Advice bean in the BeanFactory, as well as the Pointcut to be configured through a bean property.\npublic class DefaultIntroductionAdvisor extends Object implements IntroductionAdvisor, ClassFilter, org.springframework.core.Ordered, Serializable; // Simple IntroductionAdvisor implementation that by default applies to any class.\npublic class DefaultPointcutAdvisor extends AbstractGenericPointcutAdvisor implements Serializable; // Convenient Pointcut-driven Advisor implementation.\npublic class DelegatePerTargetObjectIntroductionInterceptor extends IntroductionInfoSupport implements IntroductionInterceptor; // Convenient implementation of the IntroductionInterceptor interface.\n", "des": "Convenience classes for using Spring's AOP API."}
{"index": 3306, "repo": "opencms-core-15.0", "code": "package rmi;\n\nInterface I_CmsRemoteShell; // Remote interface for executing shell commands.\nInterface I_CmsRemoteShellProvider; // Used to create new instances of I_CmsRemoteShell.\nClass CmsRemoteShell; // RMI object which wraps a CmsShell and can be used for shell command execution.\nClass CmsRemoteShellClient; // Client application used to connect locally to the CmsShell server.\nClass CmsRemoteShellConstants; // Constants used by both the shell server and the client application.\nClass CmsRemoteShellProvider; // Remote object responsible for creating new remote shell instances.\nClass CmsRemoteShellServer; // This class is used to initialize the RMI mechanism and export the object used to access the remote shell.\nClass CmsShellCommandResult; // An object containing the output of a remote shell command and also the updated values for some of the internal state fields of the client application.\n", "des": "The CmsRemoteShell allows to manipulate a running server using OpenCms shell commands."}
{"index": 2397, "repo": "spring-batch-core-5.0.2", "code": "package partition;\n\npackage partition.support; // Implementation of common partition components.\n@FunctionalInterface public interface PartitionHandler; // Interface defining the responsibilities of controlling the execution of a partitioned StepExecution.\npublic interface StepExecutionSplitter; // Strategy interface for generating input contexts for a partitioned step execution independent from the fabric they are going to run on.\n", "des": "Interfaces for partitioning components."}
{"index": 2648, "repo": "spring-data-cassandra-4.1.2", "code": "package cql;\n\npackage cql.converter; // CQL specific converters.\npackage cql.generator; // CQL generators for Keyspace object actions.\npackage cql.keyspace; // Keyspace object action specifications such as CREATE TABLE, DROP INDEX.\npackage cql.legacy; // CQL legacy core asynchronous support for easier migration.\npackage cql.session; // Provides utility classes for simple CqlSession access and various session implementations.\npackage cql.support; // Support classes for the CQL framework.\npackage cql.util; // Utility classes for basic CQL interaction.\npublic class ArgumentPreparedStatementBinder extends Object implements PreparedStatementBinder; // Simple adapter for PreparedStatementBinder that applies a given array of arguments.\npublic interface AsyncCqlOperations; // Interface specifying a basic set of CQL asynchronously executed operations.\npublic class AsyncCqlTemplate extends CassandraAccessor implements AsyncCqlOperations; // This is the central class in the CQL core package for asynchronous Cassandra data access. It simplifies the use of CQL and helps to avoid common errors.\nprotected static class AsyncCqlTemplate.AsyncRowCallbackHandlerResultSetExtractor extends Object implements AsyncResultSetExtractor<Void>; // Adapter to enable use of a RowCallbackHandler inside a ResultSetExtractor.\n@FunctionalInterface public interface AsyncPreparedStatementCreator; // One of the two central callback interfaces used by the AsyncCqlTemplate class.\n@FunctionalInterface public interface AsyncResultSetExtractor<T>; // Callback interface used by AsyncCqlTemplate's query methods.\npublic class AsyncRowMapperResultSetExtractor<T> extends Object implements AsyncResultSetExtractor<List<T>>; // Adapter implementation of the ResultSetExtractor interface that delegates to a RowMapper which is supposed to create an object for each row.\n@FunctionalInterface public interface AsyncSessionCallback<T>; // Generic callback interface for code that operates asynchronously on a Cassandra CqlSession.\npublic class BeanPropertyRowMapper<T> extends Object implements RowMapper<T>; // RowMapper implementation that converts a Row into a new instance of the specified mapped target class.\n@Deprecated public class CachedPreparedStatementCreator extends Object implements PreparedStatementCreator;\npublic class CassandraAccessor extends Object implements InitializingBean; // CassandraAccessor provides access to a Cassandra SessionFactory and the CassandraExceptionTranslator.\npublic class CassandraExceptionTranslator extends Object implements CqlExceptionTranslator; // Simple PersistenceExceptionTranslator for Cassandra.\n", "des": "CQL core support."}
{"index": 6, "repo": "connect-api-3.5.0", "code": "package health;\n\nInterface ConnectClusterDetails; // Provides immutable Connect cluster information, such as the ID of the backing Kafka cluster.\nInterface ConnectClusterState; // Provides the ability to lookup connector metadata, including status and configurations, as well as immutable cluster information such as Kafka cluster ID.\nClass AbstractState; // Provides the current status for a connector or a task, along with an identifier for its Connect worker\nClass ConnectorHealth; // Provides basic health information about the connector and its tasks.\nClass ConnectorState; // Describes the status, worker ID, and any errors associated with a connector.\nClass TaskState; // Describes the state, IDs, and any errors of a connector task.\nEnum ConnectorType; // Enum definition that identifies the type of the connector.\n", "des": "Provides an API for describing the state of a running Connect cluster to ConnectRestExtension instances."}
{"index": 3287, "repo": "opencms-core-15.0", "code": "package daterestrictions;\n\nInterface I_CmsDateRestriction; // Interface for date restrictions used in list configurations.\nClass CmsDateFromTodayRestriction; // Date restrictions for a fixed number of time units going backward or forward from the current time.\nClass CmsDatePastFutureRestriction; // A restriction which selects either all entries in the past (from the current time) or all entries in the future.\nClass CmsDateRangeRestriction; // Restriction to a date between a fixed start and end date, but only one of them has to be given.\nClass CmsDateRestrictionParser; // Parses date restrictions in a list configuration.\nEnum I_CmsDateRestriction.TimeDirection; // Enum representing a direction in time (past / future).\nEnum I_CmsDateRestriction.TimeUnit; // Enum representing a time unit.\n", "des": "Contains classes for dealing with restrictions in list configurations."}
{"index": 3263, "repo": "opencms-core-15.0", "code": "package mssql;\n\nClass CmsHistoryDriver; // MS SQL implementation of the history driver methods.\nClass CmsProjectDriver; // MS SQL implementation of the project driver methods.\nClass CmsSqlManager; // MS SQL implementation of the SQL manager.\nClass CmsSubscriptionDriver; // MSSQL implementation of the subscription driver.\nClass CmsUserDriver; // MS SQL implementation of the user driver methods.\nClass CmsVfsDriver; // MS SQL implementation of the VFS driver methods.\n", "des": "MS SQL implementation of the OpenCms database connector."}
{"index": 749, "repo": "ignite-indexing-2.15.0", "code": "package dml;\n\nInterface DmlArgument; // DML argument\nInterface KeyValueSupplier; // Method to construct new instances of keys and values on SQL MERGE and INSERT, as well as to build new values during UPDATE - a function that takes a row selected from DB and then transforms it into new object.\nClass DmlArguments; // DML arguments factory.\nClass DmlAstUtils; // AST utils for DML\nClass DmlBatchSender; // Batch sender class.\nClass DmlBulkLoadDataConverter; // Converts a row of values to actual key+value using UpdatePlan.processRow(List).\nClass DmlDistributedPlanInfo; // Additional information about distributed update plan.\nClass DmlDistributedUpdateRun; // Context for DML operation on reducer node.\nClass DmlPageProcessingErrorResult; // Result of splitting keys whose processing resulted into an exception from those skipped by logic of EntryProcessors (most likely INSERT duplicates, or UPDATE/DELETE keys whose values had been modified concurrently), counting and collecting entry processor exceptions.\nClass DmlPageProcessingResult; // Result of processing an individual page with IgniteCache.invokeAll(java.util.Map<? extends K, ? extends javax.cache.processor.EntryProcessor<K, V, T>>, java.lang.Object...) including error details, if any.\nClass DmlUpdateResultsIterator; // DML update results iterator.\nClass DmlUpdateSingleEntryIterator<T>;\nClass DmlUtils; // DML utility methods.\nClass FastUpdate; // Arguments for fast, query-less UPDATE or DELETE - key and, optionally, value and new value.\nClass UpdatePlan; // Update plan - where to take data to update cache from and how to construct new keys and values, if needed.\nClass UpdatePlanBuilder; // Logic for building update plans performed by DmlStatementsProcessor.\nEnum UpdateMode; // DML statement execution plan type - MERGE/INSERT from rows or subquery, or UPDATE/DELETE from subquery or literals/params based.\n", "des": "Contains routines for executing DML statements on top of H2."}
{"index": 3480, "repo": "hilt-android-2.47", "code": "package scopes;\n\nAnnotation Type ActivityRetainedScoped; // Scope annotation for bindings that should exist for the life of an activity, surviving configuration.\nAnnotation Type ActivityScoped; // Scope annotation for bindings that should exist for the life of an activity.\nAnnotation Type FragmentScoped; // Scope annotation for bindings that should exist for the life of a fragment.\nAnnotation Type ServiceScoped; // Scope annotation for bindings that should exist for the life of a service.\nAnnotation Type ViewModelScoped; // Scope annotation for bindings that should exist for the life of a a single ViewModel.\nAnnotation Type ViewScoped; // Scope annotation for bindings that should exist for the life of a View.\n", "des": "This package contains Hilt's built-in Android Scope annotations."}
{"index": 2766, "repo": "spring-beans-6.0.11", "code": "package support;\n\npublic class ArgumentConvertingMethodInvoker extends org.springframework.util.MethodInvoker; // Subclass of MethodInvoker that tries to convert the given arguments for the actual target method via a TypeConverter.\npublic class MutableSortDefinition extends Object implements SortDefinition, Serializable; // Mutable implementation of the SortDefinition interface.\npublic class PagedListHolder<E> extends Object implements Serializable; // PagedListHolder is a simple state holder for handling lists of objects, separating them into pages.\npublic class PropertyComparator<T> extends Object implements Comparator<T>; // PropertyComparator performs a comparison of two beans, evaluating the specified bean property via a BeanWrapper.\npublic class ResourceEditorRegistrar extends Object implements PropertyEditorRegistrar; // PropertyEditorRegistrar implementation that populates a given PropertyEditorRegistry (typically a BeanWrapper used for bean creation within an org.springframework.context.ApplicationContext) with resource editors.\npublic interface SortDefinition; // Definition for sorting bean instances by a property.\n", "des": "Classes supporting the org.springframework.beans package, such as utility classes for sorting and holding lists of beans."}
{"index": 2780, "repo": "spring-security-ldap-6.1.2", "code": "package authentication;\n\npublic abstract class AbstractLdapAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider, org.springframework.context.MessageSourceAware; // Base class for the standard LdapAuthenticationProvider and the ActiveDirectoryLdapAuthenticationProvider.\npublic abstract class AbstractLdapAuthenticator extends Object implements LdapAuthenticator, org.springframework.beans.factory.InitializingBean, org.springframework.context.MessageSourceAware; // Base class for the authenticator implementations.\npublic class BindAuthenticator extends AbstractLdapAuthenticator; // An authenticator which binds as a user.\npublic class LdapAuthenticationProvider extends AbstractLdapAuthenticationProvider; // An AuthenticationProvider implementation that authenticates against an LDAP server.\npublic interface LdapAuthenticator; // The strategy interface for locating and authenticating an Ldap user.\npublic final class NullLdapAuthoritiesPopulator extends Object implements LdapAuthoritiesPopulator;\npublic final class PasswordComparisonAuthenticator extends AbstractLdapAuthenticator; // An LdapAuthenticator which compares the login password with the value stored in the directory using a remote LDAP \"compare\" operation.\npublic class SpringSecurityAuthenticationSource extends Object implements org.springframework.ldap.core.AuthenticationSource; // An AuthenticationSource to retrieve authentication information stored in Spring Security's SecurityContextHolder.\npublic class UserDetailsServiceLdapAuthoritiesPopulator extends Object implements LdapAuthoritiesPopulator; // Simple LdapAuthoritiesPopulator which delegates to a UserDetailsService, using the name which was supplied at login as the username.\n", "des": "The LDAP authentication provider package."}
{"index": 262, "repo": "nutch-2.4", "code": "package tika;\n\nClass DOMContentUtils; // A collection of methods for extracting content from DOM trees.\nClass HTMLMetaProcessor; // Class for parsing META Directives from DOM trees.\nClass TikaParser; // Wrapper for Tika parsers.\n", "des": "Parse various document formats with help of Apache Tika."}
{"index": 2945, "repo": "spring-security-config-6.1.2", "code": "package http;\n\npublic final class ChannelAttributeFactory extends Object; // Used as a factory bean to create config attribute values for the requires-channel attribute.\npublic class CorsBeanDefinitionParser extends Object; // Parser for the CorsFilter.\npublic class CsrfBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Parser for the CsrfFilter.\npublic class DefaultFilterChainValidator extends Object implements org.springframework.security.web.FilterChainProxy.FilterChainValidator;\npublic class FilterChainBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\npublic class FilterChainMapBeanDefinitionDecorator extends Object implements org.springframework.beans.factory.xml.BeanDefinitionDecorator; // Sets the filter chain Map for a FilterChainProxy bean declaration.\n@Deprecated public class FilterInvocationSecurityMetadataSourceParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\npublic class FormLoginBeanDefinitionParser extends Object;\npublic class HeadersBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Parser for the HeadersFilter.\npublic class HttpFirewallBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Injects the supplied HttpFirewall bean reference into the FilterChainProxy.\npublic class HttpSecurityBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Sets up HTTP security: filter stack and protected URLs.\npublic static final class HttpSecurityBeanDefinitionParser.ChildAuthenticationManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authentication.AuthenticationManager>;\npublic static final class HttpSecurityBeanDefinitionParser.FilterChainDecoratorFactory extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.web.FilterChainProxy.FilterChainDecorator>;\npublic static class HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor extends Object implements org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;\npublic enum MatcherType extends Enum<MatcherType>; // Defines the RequestMatcher types supported by the namespace.\n", "des": "Parsing of the <http> namespace element."}
{"index": 397, "repo": "amqp-client-5.18.0", "code": "package jsonrpc;\n\nInterface JsonRpcMapper; // Abstraction to handle JSON parsing and generation.\nClass DefaultJsonRpcMapper; // use JacksonJsonRpcMapper instead\nClass JacksonJsonRpcMapper; // JsonRpcMapper based on Jackson.\nClass JsonRpcClient; // JSON-RPC is a lightweight RPC mechanism using JSON as a data language for request and reply messages.\nClass JsonRpcMapper.JsonRpcRequest;\nClass JsonRpcMapper.JsonRpcResponse;\nClass JsonRpcServer; // JSON-RPC Server class.\nClass ParameterDescription; // Description of a single JSON-RPC procedure parameter.\nClass ProcedureDescription; // Description of a single JSON-RPC procedure.\nClass ServiceDescription; // Description of a JSON-RPC service.\nClass JsonRpcException; // Thrown when a JSON-RPC service indicates an error occurred during a call.\nClass JsonRpcMappingException;\n", "des": "JSON-RPC client and server classes for supporting JSON-RPC over an AMQP transport."}
{"index": 3164, "repo": "tika-core-2.8.0", "code": "package xpath;\n\nClass AttributeMatcher; // Final evaluation state of a .../@* XPath expression.\nClass ChildMatcher; // Intermediate evaluation state of a .../*... XPath expression.\nClass CompositeMatcher; // Composite XPath evaluation state.\nClass ElementMatcher; // Final evaluation state of an XPath expression that targets an element.\nClass Matcher; // XPath element matcher.\nClass MatchingContentHandler; // Content handler decorator that only passes the elements, attributes, and text nodes that match the given XPath expression.\nClass NamedAttributeMatcher; // Final evaluation state of a .../@name XPath expression.\nClass NamedElementMatcher; // Intermediate evaluation state of a .../name... XPath expression.\nClass NodeMatcher; // Final evaluation state of a .../node() XPath expression.\nClass SubtreeMatcher; // Evaluation state of a ...//... XPath expression.\nClass TextMatcher; // Final evaluation state of a .../text() XPath expression.\nClass XPathParser; // Parser for a very simple XPath subset.\n", "des": "XPath utilities"}
{"index": 426, "repo": "commons-geometry-hull-1.0-beta1", "code": "package hull;\n\nInterface ConvexHull<P extends Point<P>>; // This class represents a convex hull.\nInterface ConvexHullGenerator<P extends Point<P>>; // Interface for convex hull generators.\n", "des": "This package provides interfaces and classes related to the convex hull problem."}
{"index": 3135, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package profile;\n\nClass Association; // Models the association of a given fetch.\nClass Fetch; // Models an individual fetch within a profile.\nClass FetchProfile; // A 'fetch profile' allows a user to dynamically modify the fetching strategy used for particular associations at runtime, whereas that information was historically only statically defined in the metadata.\nEnum Fetch.Style; // The type or style of fetch.\n", "des": "Models the fetch profiles defined by the application"}
{"index": 3525, "repo": "opennlp-tools-2.2.0", "code": "package nkjp;\n\nClass NKJPSegmentationDocument;\nClass NKJPSegmentationDocument.Pointer;\nClass NKJPSentenceSampleStream;\nClass NKJPSentenceSampleStreamFactory<P>;\nClass NKJPTextDocument; // The National corpus of Polish (NKJP) format.\n", "des": "Experimental package related to the National corpus of Polish NKJP format."}
{"index": 3110, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface ClassLoaderService; // A service for interacting with class loaders.\nInterface ClassLoaderService.Work<T>;\nClass ClassLoadingException; // Indicates a problem performing class loading.\n", "des": "The class loading service SPI."}
{"index": 3567, "repo": "lucene-codecs-9.7.0", "code": "package blocktreeords;\n\nClass BlockTreeOrdsPostingsFormat; // Uses OrdsBlockTreeTermsWriter with Lucene90PostingsWriter.\nClass OrdsBlockTreeTermsReader; // See OrdsBlockTreeTermsWriter.\nClass OrdsBlockTreeTermsWriter; // This is just like Lucene90BlockTreeTermsWriter, except it also stores a version per term, and adds a method to its TermsEnum implementation to seekExact only if the version is >= the specified version.\nClass OrdsSegmentTermsEnum; // Iterates through terms in this field.\n", "des": "Same postings format as Lucene50, except the terms dictionary also supports ords, i.e."}
{"index": 686, "repo": "jackson-databind-2.15.2", "code": "package introspect;\n\nInterface ClassIntrospector.MixInResolver; // Interface used for decoupling details of how mix-in annotation definitions are accessed (via this interface), and how they are stored (defined by classes that implement the interface)\nInterface DefaultAccessorNamingStrategy.BaseNameValidator; // Definition of a handler API to use for checking whether given base name (remainder of accessor method name after removing prefix) is acceptable based on various rules.\nInterface TypeResolutionContext; // Interface that defines API used by members (like AnnotatedMethod) to dynamically resolve types they have.\nInterface VisibilityChecker<T extends VisibilityChecker<T>>; // Interface for object used for determine which property elements (methods, fields, constructors) can be auto-detected, with respect to their visibility modifiers.\nInterface WithMember<T>;\nClass AccessorNamingStrategy; // API for handlers used to \"mangle\" names of \"getter\" and \"setter\" methods to find implicit property names.\nClass AccessorNamingStrategy.Base; // Helper class that implements all abstract methods with dummy implementations.\nClass AccessorNamingStrategy.Provider; // Interface for provider (factory) for constructing AccessorNamingStrategy for given type of deserialization target\nClass Annotated; // Shared base class used for anything on which annotations (included within a AnnotationMap).\nClass AnnotatedAndMetadata<A extends Annotated,M>; // Silly little \"Pair\" class needed for 2-element tuples (without adding dependency to one of 3rd party packages that has one).\nClass AnnotatedClass;\nClass AnnotatedClass.Creators;\nClass AnnotatedClassResolver; // Helper class that contains logic for resolving annotations to construct AnnotatedClass instances.\nClass AnnotatedConstructor;\nClass AnnotatedField; // Object that represents non-static (and usually non-transient/volatile) fields of a class.\nClass AnnotatedFieldCollector;\nClass AnnotatedMember; // Intermediate base class for annotated entities that are members of a class; fields, methods and constructors.\nClass AnnotatedMethod;\nClass AnnotatedMethodCollector;\nClass AnnotatedMethodMap; // Simple helper class used to keep track of collection of AnnotatedMethods, accessible by lookup.\nClass AnnotatedParameter; // Object that represents method parameters, mostly so that associated annotations can be processed conveniently.\nClass AnnotatedWithParams; // Intermediate base class that encapsulates features that constructors and methods share.\n", "des": "Functionality needed for Bean introspection, required for detecting accessors and mutators for Beans, as well as locating and handling method annotations."}
{"index": 1113, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package deviceplugin;\n\nInterface DevicePlugin; // A must interface for vendor plugin to implement.\nInterface DevicePluginScheduler; // An optional interface to implement if custom device scheduling is needed.\nClass Device; // Represent one \"device\" resource.\nClass Device.Builder; // Builder for Device.\nClass DeviceRegisterRequest; // Contains plugin register request info.\nClass DeviceRegisterRequest.Builder; // Builder class for construct DeviceRegisterRequest.\nClass DeviceRuntimeSpec; // This is a spec used to prepare and run container.\nClass DeviceRuntimeSpec.Builder; // Builder for DeviceRuntimeSpec.\nClass MountDeviceSpec; // Describe one device mount.\nClass MountDeviceSpec.Builder; // Builder for MountDeviceSpec.\nClass MountVolumeSpec; // Describe one volume mount.\nClass MountVolumeSpec.Builder; // Builder for MountVolumeSpec.\nClass VolumeSpec; // Describe one volume creation or deletion.\nClass VolumeSpec.Builder; // Builder for VolumeSpec.\nEnum YarnRuntimeType; // YarnRuntime parameter enum for DevicePlugin.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1032, "repo": "hadoop-aws-3.3.6", "code": "package staging;\n\nClass DirectoryStagingCommitter; // This commits to a directory.\nClass DirectoryStagingCommitterFactory; // Factory for the Directory committer.\nClass PartitionedStagingCommitter; // Partitioned committer.\nClass PartitionedStagingCommitterFactory; // Factory for the PartitionedStagingCommitter.\nClass Paths; // Path operations for the staging committers.\nClass StagingCommitter; // Committer based on the contributed work of the Netflix multipart committers. The working directory of each task is actually under a temporary path in the local filesystem; jobs write directly into it.\nClass StagingCommitterConstants; // Internal staging committer constants.\nClass StagingCommitterFactory; // Factory for the staging committer.\nEnum ConflictResolution; // Enum of conflict resolution algorithms.\n", "des": "The staging committers."}
{"index": 1078, "repo": "graal-sdk-1.0.0-rc7", "code": "package nativeimage;\n\npackage nativeimage.c; // This package and its sub-packages provide a fast and lightweight interface between Java code and C code.\nInterface Feature; // Features allow clients to intercept the native image generation and run custom initialization code at various stages.\nInterface Feature.AfterAnalysisAccess; // Access methods available for Feature.afterAnalysis(org.graalvm.nativeimage.Feature.AfterAnalysisAccess).\nInterface Feature.AfterCompilationAccess; // Access methods available for Feature.afterCompilation(org.graalvm.nativeimage.Feature.AfterCompilationAccess).\nInterface Feature.AfterHeapLayoutAccess; // Access methods available for Feature.afterHeapLayout(org.graalvm.nativeimage.Feature.AfterHeapLayoutAccess).\nInterface Feature.AfterImageWriteAccess; // Access methods available for Feature.afterImageWrite(org.graalvm.nativeimage.Feature.AfterImageWriteAccess).\nInterface Feature.AfterRegistrationAccess; // Access methods available for Feature.afterRegistration(org.graalvm.nativeimage.Feature.AfterRegistrationAccess).\nInterface Feature.BeforeAnalysisAccess; // Access methods available for Feature.beforeAnalysis(org.graalvm.nativeimage.Feature.BeforeAnalysisAccess).\nInterface Feature.BeforeCompilationAccess; // Access methods available for Feature.beforeCompilation(org.graalvm.nativeimage.Feature.BeforeCompilationAccess).\nInterface Feature.BeforeImageWriteAccess; // Access methods available for Feature.beforeImageWrite(org.graalvm.nativeimage.Feature.BeforeImageWriteAccess).\nInterface Feature.CompilationAccess; // Access methods available for Feature.beforeCompilation(org.graalvm.nativeimage.Feature.BeforeCompilationAccess) and Feature.afterCompilation(org.graalvm.nativeimage.Feature.AfterCompilationAccess).\nInterface Feature.DuringAnalysisAccess; // Access methods available for Feature.duringAnalysis(org.graalvm.nativeimage.Feature.DuringAnalysisAccess).\nInterface Feature.DuringSetupAccess; // Access methods available for Feature.duringSetup(org.graalvm.nativeimage.Feature.DuringSetupAccess).\nInterface Feature.FeatureAccess; // Access methods that are available for all feature methods.\nInterface Feature.IsInConfigurationAccess; // Access methods available for Feature.isInConfiguration(org.graalvm.nativeimage.Feature.IsInConfigurationAccess).\n", "des": "The Graal-SDK native-image API allows to customize the native image generation, i.e., the ahead-of-time compilation of Java code to standalone executables."}
{"index": 3290, "repo": "opencms-core-15.0", "code": "package result;\n\nInterface I_CmsSearchResourceBean; // Interface for a single search result, as wrapped JSP EL friendly.\nInterface I_CmsSearchResultWrapper; // Interface of the JSP EL friendly wrapper for all Solr search results and the search form controller.\nInterface I_CmsSearchStateParameters; // Interface for the search state parameters.\nClass CmsSearchResourceBean; // JSP EL friendly wrapper class for a single search result (document).\nClass CmsSearchResultWrapper; // Wrapper for the whole search result.\nClass CmsSearchStateParameters; // State parameter wrapper that allows to manipulate the request parameters representing the state of the current search.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "API classes for the result of the search form support provided for server-side Solr search."}
{"index": 3338, "repo": "opencms-core-15.0", "code": "package sessions;\n\nClass CmsBroadCastConfigurtion; // Configuration class of app.\nClass CmsEditLoginView; // Class for the Edit Login View.\nClass CmsKillSessionDialog; // Class for the dialog to kill sessions.\nClass CmsSendBroadcastDialog; // Class for the dialiog to send broadcasts.\nClass CmsSessionsApp; // Class for the broadcast app.\nClass CmsSessionsTable; // Class for the table to show all current sessions.\nClass CmsUserInfoDialog; // Dialog to show user information and to switch to user session.\n", "des": "Contains classes of the site manager app."}
{"index": 1632, "repo": "spring-kafka-3.0.9", "code": "package jaas;\n\npublic class KafkaJaasLoginModuleInitializer extends Object implements org.springframework.beans.factory.SmartInitializingSingleton, org.springframework.beans.factory.DisposableBean; // Contains properties for setting up an AppConfigurationEntry that can be used for the Kafka client.\npublic static enum KafkaJaasLoginModuleInitializer.ControlFlag extends Enum<KafkaJaasLoginModuleInitializer.ControlFlag>; // Control flag values for login configuration.\n", "des": "Provides classes related to jaas."}
{"index": 2428, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package elasticsearch;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration.class) @ConditionalOnClass(org.elasticsearch.client.RestClient.class) @ConditionalOnBean(org.elasticsearch.client.RestClient.class) @ConditionalOnEnabledHealthIndicator(\"elasticsearch\") public class ElasticsearchRestHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.elasticsearch.ElasticsearchRestClientHealthIndicator,org.elasticsearch.client.RestClient>; // Auto-configuration for ElasticsearchRestClientHealthIndicator.\n", "des": "Auto-configuration for actuator Elasticsearch concerns."}
{"index": 205, "repo": "nutch-2.4", "code": "package indexer;\n\npackage indexer.html; // Index raw HTML content.\npackage indexer.anchor; // An indexing plugin for inbound anchor text.\npackage indexer.basic; // A basic indexing plugin, adds basic fields: url, host, title, content, etc.\npackage indexer.metadata; // Indexing filter to add document metadata to the index.\npackage indexer.more; // A more indexing plugin, adds \"more\" index fields: last modified date, MIME type, content length.\npackage indexer.subcollection; // Indexing filter to assign documents to subcollections.\npackage indexer.tld; // Top Level Domain Indexing plugin.\nInterface IndexCleaningFilter; // Extension point for indexing.\nInterface IndexingFilter; // Extension point for indexing.\nInterface IndexWriter;\nClass CleaningJob;\nClass CleaningJob.CleanMapper;\nClass CleaningJob.CleanReducer;\nClass IndexCleaningFilters; // Creates and caches IndexCleaningFilter implementing plugins.\nClass IndexerOutputFormat;\nClass IndexingFilters; // Creates and caches IndexingFilter implementing plugins.\nClass IndexingFiltersChecker; // Reads and parses a URL and run the indexers on it.\nClass IndexingJob;\nClass IndexingJob.IndexerMapper;\nClass IndexUtil; // Utility to create an indexed document from a webpage.\nClass IndexWriters; // Creates and caches IndexWriter implementing plugins.\nClass NutchDocument; // A NutchDocument is the unit of indexing.\nClass IndexingException;\n", "des": "Index content, configure and run indexing and cleaning jobs to add, update, and delete documents from an index."}
{"index": 995, "repo": "spring-ws-3.0.10.RELEASE", "code": "package matcher;\n\nInterface WebServiceMessageMatcher; // Defines the general contract for matching messages to expectations.\nClass AbstractSoapMessageMatcher; // Abstract base class for SOAP-specific WebServiceMessageMatcher implementations.\nClass DiffMatcher; // Implementation of WebServiceMessageMatcher based on XMLUnit's Diff.\nClass PayloadDiffMatcher; // Matches Source payloads.\nClass SchemaValidatingMatcher; // Uses the XmlValidator to validate request payload.\nClass SoapEnvelopeDiffMatcher; // Matches Source SOAP envelopes.\nClass SoapHeaderMatcher; // Matches SOAP headers.\nClass XPathExpectationsHelper; // Helper class for dealing with XPath expectations.\n", "des": "Provides the generic WebServiceMessageMatcher interface, and implementations."}
{"index": 2338, "repo": "spring-boot-3.1.1", "code": "package classreading;\n\npublic class ConcurrentReferenceCachingMetadataReaderFactory extends org.springframework.core.type.classreading.SimpleMetadataReaderFactory; // Caching implementation of the MetadataReaderFactory interface backed by a ConcurrentReferenceHashMap, caching MetadataReader per Spring Resource handle (i.e.\n", "des": "Support classes for reading annotation and class-level metadata."}
{"index": 881, "repo": "mahout-math-0.13.0", "code": "package engine;\n\nClass MersenneTwister; // MersenneTwister (MT19937) is one of the strongest uniform pseudo-random number generators known so far; at the same time it is quick.\nClass RandomEngine; // Abstract base class for uniform pseudo-random number generating engines.\n", "des": "Engines generating strong uniformly distributed pseudo-random numbers; Needed by all JET probability distributions since they rely on uniform random numbers to generate random numbers from their own distribution."}
{"index": 180, "repo": "ignite-core-2.15.0", "code": "package timeout;\n\nInterface GridTimeoutObject; // All objects that can timeout should implement this interface.\nClass GridSpiTimeoutObject; // Wrapper for IgniteSpiTimeoutObject.\nClass GridTimeoutObjectAdapter; // Default implementation for GridTimeoutObject.\nClass GridTimeoutProcessor; // Detects timeout events and processes them.\n", "des": "TODO."}
{"index": 1661, "repo": "jena-core-4.9.0", "code": "package transitiveReasoner;\n\npublic class TransitiveEngine extends Object; // Uses two transitive graph caches to store a subclass and a subproperty lattice and use them within a larger inference graph.\npublic class TransitiveGraphCache extends Object implements Finder; // Datastructure used to represent a closed transitive reflexive relation.\npublic class TransitiveInfGraph extends BaseInfGraph; // Implementation of InfGraph used by the TransitiveReasoner.\npublic class TransitiveReasoner extends Object implements Reasoner; // A simple \"reasoner\" used to help with API development.\npublic class TransitiveReasonerFactory extends Object implements ReasonerFactory; // Factory class for creating blank instances of the transitive reasoner.\n", "des": "This package contains a reasoner which supports transitive-reflexive closure of subPropertyOf and subClassOf relations."}
{"index": 2576, "repo": "camel-api-4.0.0-RC1", "code": "package cloud;\n\npublic interface DiscoverableService;\npublic interface ServiceCallConstants;\n@FunctionalInterface public interface ServiceChooser; // Allows SPIs to implement custom Service Chooser.\npublic interface ServiceChooserAware; // An interface to represent an object which wishes to be injected with a ServiceChooser\n@FunctionalInterface public interface ServiceChooserFactory extends ServiceFactory<ServiceChooser>; // A factory to create ServiceChooser\npublic interface ServiceDefinition; // Represents a Service.\npublic interface ServiceDiscovery; // Allows SPIs to implement custom Service Discovery.\npublic interface ServiceDiscoveryAware; // An interface to represent an object which wishes to be injected with a ServiceDiscovery\n@FunctionalInterface public interface ServiceDiscoveryFactory extends ServiceFactory<ServiceDiscovery>; // A factory to create ServiceDiscovery\n@FunctionalInterface public interface ServiceExpressionFactory extends ServiceFactory<Expression>; // A factory to create Expression\n@FunctionalInterface public interface ServiceFactory<T>;\n@FunctionalInterface public interface ServiceFilter; // Allows SPIs to implement custom Service Filter.\npublic interface ServiceFilterAware; // An interface to represent an object which wishes to be injected with a ServiceFilter\n@FunctionalInterface public interface ServiceFilterFactory extends ServiceFactory<ServiceFilter>; // A factory to create ServiceFilter\npublic interface ServiceHealth;\n@FunctionalInterface public interface ServiceLoadBalancer; // Represents a Load Balancer.\n@FunctionalInterface public interface ServiceLoadBalancerFactory extends ServiceFactory<ServiceLoadBalancer>; // A factory to create LoadBalancer\n@FunctionalInterface public interface ServiceLoadBalancerFunction<T>; // Represents a load balancer function to be executed by the LoadBalancer.\npublic interface ServiceRegistry extends Service, CamelContextAware, IdAware, Ordered;\n@FunctionalInterface public static interface ServiceRegistry.Selector; // A selector used to pick up a service among a list.\n", "des": "Camel cloud"}
{"index": 186, "repo": "ignite-core-2.15.0", "code": "package gridfunc;\n\nClass AlwaysFalsePredicate<E>; // Defines a predicate which accepts a parameter and always returns false\nClass AlwaysTruePredicate<E>; // Defines a predicate which accepts a parameter and always returns true\nClass AlwaysTrueReducer<T>; // Reducer which always returns true from IgniteReducer.collect(Object)\nClass AtomicIntegerFactoryCallable; // Atomic integer factory.\nClass CacheEntryGetValueClosure; // Cache entry to get-value transformer closure.\nClass CacheEntryHasPeekPredicate; // Cache entry has-peek-value predicate.\nClass ClusterNodeGetIdClosure; // Grid node to node ID transformer closure.\nClass ConcurrentHashSetFactoryCallable; // Concurrent hash set factory.\nClass ConcurrentMapFactoryCallable; // Concurrent hash map factory.\nClass ContainsNodeIdsPredicate<T extends ClusterNode>; // Grid node predicate evaluating on the given node IDs.\nClass ContainsPredicate<T>; // Predicate which returns true if it receives an element that is contained in the passed in collection.\nClass EntryByKeyEvaluationPredicate<K,V>; // Predicate evaluates to true for given value.\nClass EqualsClusterNodeIdPredicate<T extends ClusterNode>; // Creates grid node predicate evaluating on the given node ID.\nClass EqualsUuidPredicate; // UUID equals predicate.\nClass FlatCollectionWrapper<T>; // Wrapper which iterable over the elements of the inner collections.\nClass FlatIterator<T>; // Iterator over the elements of given iterators.\nClass HasEqualIdPredicate<T extends ClusterNode>; // ClusterNode has equal id predicate.\nClass HasNotEqualIdPredicate<T extends ClusterNode>; // ClusterNode node has NOT equal id predicate.\nClass IdentityClosure; // Identity closure.\nClass IntSumReducer; // Reducer that calculates sum of integer elements.\nClass IsAllPredicate<T>; // Predicate that evaluates to true if each of its component preds evaluates to true.\nClass IsNotAllPredicate<T>; // Negated predicate.\nClass IsNotNullPredicate<E>; // Defines a predicate which checks a parameter on null.\nClass LongSumReducer; // Reducer that calculates sum of long integer elements.\nClass MapFactoryCallable; // Hash map factory.\nClass MultipleIterator<T>; // Concatenates multiple iterators as single one.\nClass NoOpClosure; // Absolute closure that does nothing.\n", "des": "Contains utilities classes for GridFunc."}
{"index": 3651, "repo": "solr-core-9.3.0", "code": "package snapshots;\n\nClass CollectionSnapshotMetaData; // This class defines the meta-data about a collection level snapshot\nClass CollectionSnapshotMetaData.CoreSnapshotMetaData;\nClass SolrSnapshotManager; // This class provides functionality required to handle the data files corresponding to Solr snapshots.\nClass SolrSnapshotMetaDataManager; // This class is responsible to manage the persistent snapshots meta-data for the Solr indexes.\nClass SolrSnapshotMetaDataManager.SnapshotMetaData; // A class defining the meta-data for a specific snapshot.\nEnum CollectionSnapshotMetaData.SnapshotStatus;\n", "des": "Core classes for Solr's persistent snapshots functionality"}
{"index": 171, "repo": "ignite-core-2.15.0", "code": "package user;\n\nClass UserActionCommandHandler; // User actions handler.\n", "des": "REST user commands."}
{"index": 1386, "repo": "spring-boot-actuator-3.1.1", "code": "package convert;\n\npublic class ConversionServiceParameterValueMapper extends Object implements ParameterValueMapper; // ParameterValueMapper backed by a ConversionService.\npublic class IsoOffsetDateTimeConverter extends Object implements org.springframework.core.convert.converter.Converter<String,OffsetDateTime>; // A String to OffsetDateTime Converter that uses ISO offset parsing.\n", "des": "Converter support for actuator endpoints."}
{"index": 1685, "repo": "spring-integration-mqtt-6.1.2", "code": "package inbound;\n\n@ManagedResource @IntegrationManagedResource public abstract class AbstractMqttMessageDrivenChannelAdapter<T,C> extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.context.ApplicationEventPublisherAware, ClientManager.ConnectCallback; // Abstract class for MQTT Message-Driven Channel Adapters.\npublic class MqttPahoMessageDrivenChannelAdapter extends AbstractMqttMessageDrivenChannelAdapter<org.eclipse.paho.client.mqttv3.IMqttAsyncClient,org.eclipse.paho.client.mqttv3.MqttConnectOptions> implements org.eclipse.paho.client.mqttv3.MqttCallbackExtended, MqttPahoComponent; // Eclipse Paho Implementation.\npublic class Mqttv5PahoMessageDrivenChannelAdapter extends AbstractMqttMessageDrivenChannelAdapter<org.eclipse.paho.mqttv5.client.IMqttAsyncClient,org.eclipse.paho.mqttv5.client.MqttConnectionOptions> implements org.eclipse.paho.mqttv5.client.MqttCallback, MqttComponent<org.eclipse.paho.mqttv5.client.MqttConnectionOptions>; // The AbstractMqttMessageDrivenChannelAdapter implementation for MQTT v5.\n", "des": "Provides inbound Spring Integration MqttAdapter components."}
{"index": 3103, "repo": "jena-querybuilder-4.9.0", "code": "package rewriters;\n\npublic class AbstractRewriter<T> extends Object; // The base class for rewriters.\npublic class BuildElementVisitor extends Object implements ElementVisitor; // An element visitor that does an in-place modification of the elements to fix union-of-one and similar issues.\npublic class ElementRewriter extends AbstractRewriter<Element> implements ElementVisitor; // A rewriter that implements an ElementVisitor\npublic class ExprRewriter extends AbstractRewriter<Expr> implements ExprVisitor; // A rewriter that implements an ExprVisitor\npublic class PathRewriter extends AbstractRewriter<Path> implements PathVisitor; // A rewriter that implements PathVisitor.\n", "des": "Classes to rewrite Query algebra, expressions and other objects to handle variable replacement for the prepared statement functionality."}
{"index": 2668, "repo": "spring-data-cassandra-4.1.2", "code": "package util;\n\npublic class MapBuilder<K,V> extends Object implements Map<K,V>; // Builder for maps, which also conveniently implements Map via delegation for convenience so you don't have to actually MapBuilder.build() it.\npublic class SpelUtils extends Object; // Evaluates a SpEL expression.\n", "des": "Map and SpEL utility infrastructure."}
{"index": 261, "repo": "nutch-2.4", "code": "package js;\n\nClass JSParseFilter; // This class is a heuristic link extractor for JavaScript files and code snippets.\n", "des": "Parser and parse filter plugin to extract all (possible) links from JavaScript files and embedded JavaScript code snippets."}
{"index": 2494, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package r2dbc;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration.class) @ConditionalOnClass(io.r2dbc.spi.ConnectionFactory.class) @ConditionalOnBean(io.r2dbc.spi.ConnectionFactory.class) @ConditionalOnEnabledHealthIndicator(\"r2dbc\") public class ConnectionFactoryHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.r2dbc.ConnectionFactoryHealthIndicator,io.r2dbc.spi.ConnectionFactory>; // Auto-configuration for ConnectionFactoryHealthIndicator.\n", "des": "Auto-configuration for actuator R2DBC."}
{"index": 1355, "repo": "spring-tx-6.0.11", "code": "package annotation;\n\npublic class PersistenceExceptionTranslationAdvisor extends org.springframework.aop.support.AbstractPointcutAdvisor; // Spring AOP exception translation aspect for use at Repository or DAO layer level.\npublic class PersistenceExceptionTranslationPostProcessor extends org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor; // Bean post-processor that automatically applies persistence exception translation to any bean marked with Spring's @Repository annotation, adding a corresponding PersistenceExceptionTranslationAdvisor to the exposed proxy (either an existing AOP proxy or a newly generated proxy that implements all of the target's interfaces).\n", "des": "Annotation support for DAOs."}
{"index": 3333, "repo": "opencms-core-15.0", "code": "package projects;\n\nClass CmsEditProjectForm; // The edit project form component.\nClass CmsProjectHistoryTable; // The project history table.\nClass CmsProjectManager; // The project manager app.\nClass CmsProjectManagerConfiguration; // The project manager app configuration.\nClass CmsProjectOverviewConfiguration; // The project overview app configuration.\nClass CmsProjectsTable; // The projects table.\nClass CmsProjectsTable.ProjectResources;\n", "des": "The project manager app classes."}
{"index": 883, "repo": "mahout-math-0.13.0", "code": "package list;\n\nClass AbstractByteList; // Abstract base class for resizable lists holding byte elements; abstract.\nClass AbstractCharList; // Abstract base class for resizable lists holding char elements; abstract.\nClass AbstractDoubleList; // Abstract base class for resizable lists holding double elements; abstract.\nClass AbstractFloatList; // Abstract base class for resizable lists holding float elements; abstract.\nClass AbstractIntList; // Abstract base class for resizable lists holding int elements; abstract.\nClass AbstractList; // Abstract base class for resizable lists holding objects or primitive data types such as int, float, etc.\nClass AbstractLongList; // Abstract base class for resizable lists holding long elements; abstract.\nClass AbstractObjectList<T>; // Abstract base class for resizable lists holding objects or primitive data types such as int, float, etc.First see the package summary and javadoc tree view to get the broad picture.\nClass AbstractShortList; // Abstract base class for resizable lists holding short elements; abstract.\nClass ByteArrayList; // Resizable list holding byte elements; implemented with arrays.\nClass CharArrayList; // Resizable list holding char elements; implemented with arrays.\nClass DoubleArrayList; // Resizable list holding double elements; implemented with arrays.\nClass FloatArrayList; // Resizable list holding float elements; implemented with arrays.\nClass IntArrayList; // Resizable list holding int elements; implemented with arrays.\nClass LongArrayList; // Resizable list holding long elements; implemented with arrays.\nClass ObjectArrayList<T>; // Resizable list holding ${valueType} elements; implemented with arrays.\nClass ShortArrayList; // Resizable list holding short elements; implemented with arrays.\nClass SimpleLongArrayList; // Resizable list holding long elements; implemented with arrays; not efficient; just to demonstrate which methods you must override to implement a fully functional list.\n", "des": "Resizable lists holding objects or primitive data types such as int, double, etc."}
{"index": 875, "repo": "calcite-core-1.34.0", "code": "package javac;\n\nInterface JavaCompiler; // The interface JavaCompiler represents an interface to invoke a regular Java compiler.\nClass JaninoCompiler; // JaninoCompiler implements the JavaCompiler interface by calling Janino.\nClass JaninoCompiler.JaninoCompilerArgs; // Arguments to an invocation of the Janino compiler.\nClass JavaCompilerArgs; // A JavaCompilerArgs holds the arguments for a JavaCompiler.\n", "des": "Provides compilers for Java code."}
{"index": 3266, "repo": "opencms-core-15.0", "code": "package postgresql;\n\nClass CmsHistoryDriver; // PostgreSql implementation of the history driver methods.\nClass CmsProjectDriver; // PostgreSql implementation of the project driver methods.\nClass CmsSqlManager; // PostgreSql implementation of the SQL manager.\nClass CmsSubscriptionDriver; // PostgreSQL implementation of the subscription driver.\nClass CmsUserDriver; // PostgreSql implementation of the user driver methods.\nClass CmsVfsDriver; // PostgreSql implementation of the VFS driver methods.\n", "des": "PostgreSql implementation of the OpenCms database connector."}
{"index": 2608, "repo": "wicket-util-10.0.0-M1", "code": "package file;\n\npublic class File extends File implements IModifiable; // Simple extension of File that adds an implementation of IModifiable for files.\npublic class FileCleaner extends Object implements IFileCleaner; // Default implementation of IFileCleaner that uses Apache commons-io FileCleaningTracker to track and clean the temporary created files.\npublic class FileCleanerTrackerAdapter extends org.apache.commons.io.FileCleaningTracker; // Adapts IFileCleaner to FileCleaningTracker\npublic class Files extends Object; // File utility methods.\npublic class Folder extends File; // This folder subclass provides some type safety and extensibility for \"files\" that hold other files.\npublic static interface Folder.FileFilter; // Filter for files\npublic static interface Folder.FolderFilter; // Filter for folders\npublic class FolderDeleteStrategy extends org.apache.commons.io.FileDeleteStrategy; // A FileDeleteStrategy that can delete folders.\npublic interface IFileCleaner; // Keeps track of files awaiting deletion, and deletes them when an associated marker object is reclaimed by the garbage collector.\n@FunctionalInterface public interface IResourceFinder; // Knows how to find resources.\npublic class Path extends Object implements IResourceFinder; // An IResourceFinder that looks for its resources in a filesystem path.\npublic class WebXmlFile extends Object; // A utility class providing helper methods in dealing with web.xml\n", "des": "File utilities."}
{"index": 769, "repo": "lucene-analyzers-common-8.11.2", "code": "package cz;\n\nClass CzechAnalyzer; // Analyzer for Czech language.\nClass CzechStemFilter; // A TokenFilter that applies CzechStemmer to stem Czech words.\nClass CzechStemFilterFactory; // Factory for CzechStemFilter.\nClass CzechStemmer; // Light Stemmer for Czech.\n", "des": "Analyzer for Czech."}
{"index": 90, "repo": "ignite-core-2.15.0", "code": "package isolated;\n\nClass IsolatedDiscoverySpi; // Special discovery SPI implementation to start a single-node cluster in \"isolated\" mode.\nClass IsolatedNode; // Special isolated node.\n", "des": "Contains implementation of special \"isolated\" mode for single-node cluster."}
{"index": 3876, "repo": "solr-ltr-9.3.0", "code": "package algorithms;\n\nClass TeamDraftInterleaving; // Interleaving was introduced the first time by Joachims in [1, 2]. Team Draft Interleaving is among the most successful and used interleaving approaches[3]. Team Draft Interleaving implements a method similar to the way in which captains select their players in team-matches. Team Draft Interleaving produces a fair distribution of ranking models’ elements in the final interleaved list. \"Team draft interleaving\" has also proved to overcome an issue of the \"Balanced interleaving\" approach, in determining the winning model[4].\n", "des": "Contains Various Interleaving Algorithms"}
{"index": 3763, "repo": "lucene-analysis-common-9.7.0", "code": "package bn;\n\nClass BengaliAnalyzer; // Analyzer for Bengali.\nClass BengaliNormalizationFilter; // A TokenFilter that applies BengaliNormalizer to normalize the orthography.\nClass BengaliNormalizationFilterFactory; // Factory for BengaliNormalizationFilter.\nClass BengaliNormalizer; // Normalizer for Bengali.\nClass BengaliStemFilter; // A TokenFilter that applies BengaliStemmer to stem Bengali words.\nClass BengaliStemFilterFactory; // Factory for BengaliStemFilter.\nClass BengaliStemmer; // Stemmer for Bengali.\n", "des": "Analyzer for Bengali Language."}
{"index": 3842, "repo": "lucene-core-9.7.0", "code": "package lucene94;\n\nClass Lucene94FieldInfosFormat; // Lucene 9.0 Field Infos format.\n", "des": "Lucene 9.4 file format."}
{"index": 2498, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package session;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.session.SessionAutoConfiguration.class) @ConditionalOnClass(org.springframework.session.FindByIndexNameSessionRepository.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.session.SessionsEndpoint.class) public class SessionsEndpointAutoConfiguration extends Object; // Auto-configuration for SessionsEndpoint.\n", "des": "Auto-configuration for actuator Spring Sessions concerns."}
{"index": 1787, "repo": "spring-integration-file-6.1.2", "code": "package aop;\n\npublic class RotatingServerAdvice extends Object implements org.springframework.integration.aop.MessageSourceMutator; // A smart poller advice that rotates across multiple remote servers/directories.\npublic interface RotationPolicy; // A strategy for rotating advices to allow reconfiguring the message source before and/or after a poll.\npublic static class RotationPolicy.KeyDirectory extends Object; // A key for a thread-local store and its related directory pair.\npublic class StandardRotationPolicy extends Object implements RotationPolicy; // Standard rotation policy; iterates over key/directory pairs; when the end is reached, starts again at the beginning.\n", "des": "Provides classes related to AOP."}
{"index": 391, "repo": "hbase-mapreduce-3.0.0-alpha-4", "code": "package mapreduce;\n\nInterface VisibilityExpressionResolver; // Interface to convert visibility expressions into Tags for storing along with Cells in HFiles.\nClass CellCounter; // A job with a a map and reduce phase to count cells in a table.\nClass CellCreator; // Facade to create Cells for HFileOutputFormat.\nClass CellSerialization;\nClass CellSerialization.CellDeserializer;\nClass CellSerialization.CellSerializer;\nClass CellSortReducer; // Emits sorted Cells.\nClass CopyTable; // Tool used to copy a table to another one which can be on a different setup.\nClass DefaultVisibilityExpressionResolver; // This implementation creates tags by expanding expression using label ordinal.\nClass Driver; // Driver for hbase mapreduce jobs.\nClass Export; // Export an HBase table.\nClass ExportUtils; // Some helper methods are used by Export and org.apache.hadoop.hbase.coprocessor.Export (in hbase-endpooint).\nClass ExtendedCellSerialization; // Similar to CellSerialization, but includes the sequenceId from an ExtendedCell.\nClass ExtendedCellSerialization.ExtendedCellDeserializer;\nClass ExtendedCellSerialization.ExtendedCellSerializer;\nClass GroupingTableMapper; // Extract grouping columns from input record.\nClass HashTable;\nClass HashTable.HashMapper;\nClass HashTable.TableHash;\nClass HFileInputFormat; // Simple MR input format for HFiles.\nClass HFileOutputFormat2; // Writes HFiles.\nClass HRegionPartitioner<KEY,VALUE>; // This is used to partition the output keys into groups of keys.\nClass IdentityTableMapper; // Pass the given key and record as-is to the reduce phase.\nClass IdentityTableReducer; // Convenience class that simply writes all values (which must be Put or Delete instances) passed to it out to the configured HBase table.\nClass Import; // Import data written by Export.\nClass Import.CellImporter; // A mapper that just writes out KeyValues.\nClass Import.CellReducer;\nClass Import.CellSortImporter;\nClass Import.CellWritableComparable;\nClass Import.CellWritableComparable.CellWritableComparator;\nClass Import.CellWritableComparablePartitioner;\nClass Import.Importer; // Write table content out to files in hdfs.\nClass ImportTsv; // Tool to import data from a TSV file.\n", "des": "Provides HBase MapReduce Input/OutputFormats, a table indexing MapReduce job, and utility methods."}
{"index": 3720, "repo": "solr-core-9.3.0", "code": "package providers;\n\nClass AbstractSSLCredentialProvider; // Abstract provider with default implementation\nClass EnvSSLCredentialProvider; // Environment variable based SSL configuration provider\nClass EnvSSLCredentialProvider.EnvVars;\nClass SysPropSSLCredentialProvider; // System property based SSL configuration provider\n", "des": "TODO"}
{"index": 37, "repo": "ignite-core-2.15.0", "code": "package lang;\n\nInterface IgniteAsyncSupport; // since 2.0.\nInterface IgniteBiClosure<E1,E2,R>; // Defines generic closure with two parameters.\nInterface IgniteBiInClosure<E1,E2>; // Closure with two in-parameters and void return type.\nInterface IgniteBiPredicate<E1,E2>; // Defines a predicate which accepts two parameters and returns true or false.\nInterface IgniteCallable<V>; // Grid-aware adapter for Callable implementations.\nInterface IgniteClosure<E,R>; // Defines generic closure with one parameter.\nInterface IgniteFuture<V>; // Future with simplified exception handling, functional programming support and ability to listen for future completion via functional callback.\nInterface IgniteInClosure<E>; // Closure with one in-parameter and void return type.\nInterface IgniteOutClosure<T>; // Closure that does not take any parameters and returns a value.\nInterface IgnitePredicate<E>; // Defines a predicate which accepts a parameter and returns true or false.\nInterface IgniteProducer<T>; // Defines a producer which can throw IgniteCheckedException.\nInterface IgniteReducer<E,R>; // Defines generic reducer that collects multiple values and reduces them into one.\nInterface IgniteRunnable; // Grid-aware adapter for Runnable implementations.\nClass IgniteBiTuple<V1,V2>; // Convenience class representing mutable tuple of two values.\nClass IgniteProductVersion; // Represents node version.\nClass IgniteUuid; // This is a faster performing version of UUID.\nClass IgniteFutureCancelledException; // Future computation cannot be retrieved because it was cancelled.\nClass IgniteFutureTimeoutException; // Future computation completion is timed out.\nAnnotation Type IgniteAsyncCallback; // If callback has this annotation then it will be executing in another thread.\nAnnotation Type IgniteAsyncSupported; // since 2.0.\nAnnotation Type IgniteExperimental; // This annotation marks API elements (such as interfaces, methods, annotations and whole API packages) as experimental meaning that the API is not finalized yet and may be changed or replaced in future Ignite releases.\n", "des": "Contains general language constructs and functional APIs for distributed computations."}
{"index": 2348, "repo": "spring-boot-3.1.1", "code": "package undertow;\n\npublic interface ConfigurableUndertowWebServerFactory extends ConfigurableWebServerFactory; // ConfigurableWebServerFactory for Undertow-specific features.\n@FunctionalInterface public interface HttpHandlerFactory; // Factory used by UndertowServletWebServer to add HttpHandlers.\n@FunctionalInterface public interface UndertowBuilderCustomizer; // Callback interface that can be used to customize an Undertow Undertow.Builder.\n@FunctionalInterface public interface UndertowDeploymentInfoCustomizer; // Callback interface that can be used to customize an Undertow DeploymentInfo.\npublic class UndertowReactiveWebServerFactory extends AbstractReactiveWebServerFactory implements ConfigurableUndertowWebServerFactory; // ReactiveWebServerFactory that can be used to create UndertowWebServers.\npublic class UndertowServletWebServer extends UndertowWebServer; // WebServer that can be used to control an embedded Undertow server.\npublic class UndertowServletWebServerFactory extends AbstractServletWebServerFactory implements ConfigurableUndertowWebServerFactory, org.springframework.context.ResourceLoaderAware; // ServletWebServerFactory that can be used to create UndertowServletWebServers.\npublic class UndertowWebServer extends Object implements WebServer; // WebServer that can be used to control an Undertow web server.\n", "des": "Embedded reactive and servlet web server implementations backed by Undertow."}
{"index": 2862, "repo": "spring-integration-core-6.1.2", "code": "package gateway;\n\npublic class AnnotationGatewayProxyFactoryBean<T> extends GatewayProxyFactoryBean<T>; // A GatewayProxyFactoryBean extension for Java configuration.\npublic class GatewayMessageHandler extends AbstractReplyProducingMessageHandler implements ManageableLifecycle; // The AbstractReplyProducingMessageHandler implementation for mid-flow Gateway.\npublic class GatewayMethodMetadata extends Object; // Represents the metadata associated with a Gateway method.\npublic class GatewayProxyFactoryBean<T> extends AbstractEndpoint implements TrackableComponent, org.springframework.beans.factory.FactoryBean<T>, org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.BeanClassLoaderAware, IntegrationManagement; // Generates a proxy for the provided service interface to enable interaction with messaging components without application code being aware of them allowing for POJO-style interaction.\n@IntegrationManagedResource public abstract class MessagingGatewaySupport extends AbstractEndpoint implements TrackableComponent, IntegrationInboundManagement, IntegrationPattern; // A convenient base class for connecting application code to MessageChannels for sending, receiving, or request-reply operations.\nprotected static class MessagingGatewaySupport.ConvertingMessagingTemplate extends MessagingTemplate; // The MessagingTemplate extension to increase MessagingGatewaySupport.ConvertingMessagingTemplate.doConvert(Object, Map, MessagePostProcessor) visibility to get access to the request message from an observation context.\npublic final class MethodArgsHolder extends Object; // Simple wrapper class containing a Method and an object array containing the arguments for an invocation of that method.\npublic interface MethodArgsMessageMapper extends InboundMessageMapper<MethodArgsHolder>; // Implementations of this interface are InboundMessageMappers that map a MethodArgsHolder to a Message.\n@FunctionalInterface public interface RequestReplyExchanger; // Interface for a request/reply Message exchange.\n", "des": "Provides classes supporting messaging gateways."}
{"index": 2768, "repo": "spring-jms-6.0.11", "code": "package annotation;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(JmsBootstrapConfiguration.class) public @interface EnableJms; // Enable JMS listener annotated endpoints that are created under the cover by a JmsListenerContainerFactory.\n@Configuration(proxyBeanMethods=false) @Role(2) public class JmsBootstrapConfiguration extends Object; // @Configuration class that registers a JmsListenerAnnotationBeanPostProcessor bean capable of processing Spring's @JmsListener annotation.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(JmsListeners.class) @MessageMapping public @interface JmsListener; // Annotation that marks a method to be the target of a JMS message listener on the specified JmsListener.destination().\npublic class JmsListenerAnnotationBeanPostProcessor extends Object implements org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor, org.springframework.core.Ordered, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.SmartInitializingSingleton; // Bean post-processor that registers methods annotated with JmsListener to be invoked by a JMS message listener container created under the cover by a JmsListenerContainerFactory according to the attributes of the annotation.\n@FunctionalInterface public interface JmsListenerConfigurer; // Optional interface to be implemented by a Spring managed bean willing to customize how JMS listener endpoints are configured.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface JmsListeners; // Container annotation that aggregates several JmsListener annotations.\n", "des": "Annotations and support classes for declarative JMS listener endpoints."}
{"index": 2985, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "package authentication;\n\npublic abstract class AbstractOAuth2TokenAuthenticationToken<T extends org.springframework.security.oauth2.core.OAuth2Token> extends org.springframework.security.authentication.AbstractAuthenticationToken; // Base class for AbstractAuthenticationToken implementations that expose common attributes between different OAuth 2.0 Access Token Formats.\n@Transient public class BearerTokenAuthentication extends AbstractOAuth2TokenAuthenticationToken<org.springframework.security.oauth2.core.OAuth2AccessToken>; // An Authentication token that represents a successful authentication as obtained through a bearer token.\npublic class BearerTokenAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // An Authentication that contains a Bearer Token.\npublic class DelegatingJwtGrantedAuthoritiesConverter extends Object implements org.springframework.core.convert.converter.Converter<org.springframework.security.oauth2.jwt.Jwt,Collection<org.springframework.security.core.GrantedAuthority>>; // A Jwt to GrantedAuthority Converter that is a composite of converters.\npublic class JwtAuthenticationConverter extends Object implements org.springframework.core.convert.converter.Converter<org.springframework.security.oauth2.jwt.Jwt,org.springframework.security.authentication.AbstractAuthenticationToken>;\npublic final class JwtAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider; // An AuthenticationProvider implementation of the Jwt-encoded Bearer Tokens for protecting OAuth 2.0 Resource Servers.\n@Transient public class JwtAuthenticationToken extends AbstractOAuth2TokenAuthenticationToken<org.springframework.security.oauth2.jwt.Jwt>; // An implementation of an AbstractOAuth2TokenAuthenticationToken representing a Jwt Authentication.\npublic final class JwtBearerTokenAuthenticationConverter extends Object implements org.springframework.core.convert.converter.Converter<org.springframework.security.oauth2.jwt.Jwt,org.springframework.security.authentication.AbstractAuthenticationToken>; // A Converter that takes a Jwt and converts it into a BearerTokenAuthentication.\n", "des": "OAuth 2.0 Resource Server Authentications and supporting classes and interfaces."}
{"index": 2514, "repo": "spring-security-core-6.1.2", "code": "package access;\n\npackage access.annotation; // Support for JSR-250 and Spring Security @Secured annotations.\npackage access.event; // Authorization event and listener classes.\npackage access.expression; // Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter annotations.\npackage access.hierarchicalroles; // Role hierarchy implementation.\npackage access.intercept; // Abstract level security interception classes which are responsible for enforcing the configured security constraints for a secure object.\npackage access.method; // Provides SecurityMetadataSource implementations for securing Java method invocations via different AOP libraries.\npackage access.prepost; // Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter annotations.\npackage access.vote; // Implements a vote-based approach to authorization decisions.\n@Deprecated public interface AccessDecisionManager;\n@Deprecated public interface AccessDecisionVoter<S>;\npublic class AccessDeniedException extends RuntimeException; // Thrown if an Authentication object does not hold a required authority.\n@Deprecated public interface AfterInvocationProvider;\npublic class AuthorizationServiceException extends AccessDeniedException; // Thrown if an authorization request could not be processed due to a system problem.\npublic interface ConfigAttribute extends Serializable; // Stores a security system related configuration attribute.\npublic interface PermissionCacheOptimizer extends org.springframework.aop.framework.AopInfrastructureBean; // Allows permissions to be pre-cached when using pre or post filtering with expressions\npublic interface PermissionEvaluator extends org.springframework.aop.framework.AopInfrastructureBean; // Strategy used in expression evaluation to determine whether a user has a permission or permissions for a given domain object.\npublic class SecurityConfig extends Object implements ConfigAttribute; // Stores a ConfigAttribute as a String.\npublic interface SecurityMetadataSource extends org.springframework.aop.framework.AopInfrastructureBean; // Implemented by classes that store and can identify the ConfigAttributes that applies to a given secure object invocation.\n", "des": "Core access-control related code, including security metadata related classes, interception code, access control annotations, EL support and voter-based implementations of the central AccessDecisionManager interface."}
{"index": 2670, "repo": "spring-data-jdbc-3.1.2", "code": "package convert;\n\npublic class BasicJdbcConverter extends BasicRelationalConverter implements JdbcConverter, ApplicationContextAware; // RelationalConverter that uses a MappingContext to apply basic conversion of relational values to property values.\npublic class BatchJdbcOperations extends Object; // Counterpart to NamedParameterJdbcOperations containing methods for performing batch updates with generated keys.\npublic class CascadingDataAccessStrategy extends Object implements DataAccessStrategy; // Delegates each method to the DataAccessStrategys passed to the constructor in turn until the first that does not throw an exception.\npublic interface DataAccessStrategy extends RelationResolver; // Abstraction for accesses to the database that should be implementable with a single SQL statement per method and relates to a single entity as opposed to JdbcAggregateOperations which provides interactions related to complete aggregates.\npublic class DefaultDataAccessStrategy extends Object implements DataAccessStrategy; // The default DataAccessStrategy is to generate SQL statements based on metadata from the entity.\npublic class DefaultJdbcTypeFactory extends Object implements JdbcTypeFactory; // A JdbcTypeFactory that performs the conversion by utilizing JdbcOperations.execute(ConnectionCallback).\npublic class DelegatingDataAccessStrategy extends Object implements DataAccessStrategy; // Delegates all method calls to an instance set after construction.\npublic class EntityRowMapper<T> extends Object implements RowMapper<T>; // Maps a ResultSet to an entity of type T, including entities referenced.\npublic final class Identifier extends Object; // Identifier represents a composite id of an entity that may be composed of one or many parts.\n@FunctionalInterface public static interface Identifier.IdentifierConsumer; // Represents an operation that accepts identifier key parts (name, value and target type) defining a contract to consume Identifier values.\npublic class InsertStrategyFactory extends Object; // Factory which selects and builds the appropriate InsertStrategy or BatchInsertStrategy based on whether the insert is expected to generate ids.\npublic final class InsertSubject<T> extends Object; // The subject of an insert, described by the entity instance and its Identifier, where identifier contains information about data that needs to be considered for the insert but which is not part of the entity.\npublic interface JdbcArrayColumns extends ArrayColumns; // ArrayColumns that offer JDBC-specific functionality.\npublic static enum JdbcArrayColumns.DefaultSupport extends Enum<JdbcArrayColumns.DefaultSupport> implements JdbcArrayColumns; // Default ArrayColumns implementation for dialects that do not support array-typed columns.\n", "des": "JDBC-specific conversion classes."}
{"index": 2441, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package influx;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration.class) @ConditionalOnClass(org.influxdb.InfluxDB.class) @ConditionalOnBean(org.influxdb.InfluxDB.class) @ConditionalOnEnabledHealthIndicator(\"influxdb\") public class InfluxDbHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.influx.InfluxDbHealthIndicator,org.influxdb.InfluxDB>; // Auto-configuration for InfluxDbHealthIndicator.\n", "des": "Auto-configuration for actuator InfluxDB concerns."}
{"index": 1824, "repo": "pulsar-client-original-3.0.0", "code": "package reader;\n\npublic abstract class AbstractMultiVersionAvroBaseReader<T> extends AbstractMultiVersionReader<T>; // The abstract class of multi version avro base reader.\npublic abstract class AbstractMultiVersionReader<T> extends Object implements SchemaReader<T>; // The multi version reader abstract class, implement it will handle the multi version schema.\npublic class AvroReader<T> extends Object implements SchemaReader<T>;\npublic class JacksonJsonReader<T> extends Object implements SchemaReader<T>; // Reader implementation for reading objects from JSON.\n@Deprecated public class JsonReader<T> extends Object implements SchemaReader<T>;\npublic class MultiVersionAvroReader<T> extends AbstractMultiVersionAvroBaseReader<T>; // A multi version avro reader.\npublic class ProtobufNativeReader<T extends com.google.protobuf.GeneratedMessageV3> extends ProtobufReader<T>;\npublic class ProtobufReader<T extends com.google.protobuf.GeneratedMessageV3> extends Object implements SchemaReader<T>;\n", "des": "Pulsar Client schema reader."}
{"index": 620, "repo": "freemarker-2.3.32", "code": "package debug;\n\nInterface DebuggedEnvironment; // Represents the debugger-side mirror of a debugged Environment object in the remote VM.\nInterface Debugger; // The main debugger interface.\nInterface DebuggerListener; // An interface for components that wish to receive debugging events.\nInterface DebugModel; // Represents the debugger-side mirror of a TemplateModel object, a Template object, or a Configuration object.\nClass Breakpoint; // Represents a breakpoint location consisting of a template name and a line number.\nClass DebuggerClient; // A utility class that allows you to connect to the FreeMarker debugger service running on a specific host and port.\nClass EnvironmentSuspendedEvent; // Event describing a suspension of an environment (ie because it hit a breakpoint).\n", "des": "Debugging API; experimental status, might change! This is to support debugging in IDE-s."}
{"index": 2693, "repo": "spring-integration-http-6.1.2", "code": "package config;\n\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Import(IntegrationGraphControllerRegistrar.class) public @interface EnableIntegrationGraphController; // Enables the IntegrationGraphController if org.springframework.web.servlet.DispatcherServlet or org.springframework.web.reactive.DispatcherHandler is present in the classpath.\npublic final class HttpContextUtils extends Object; // Utility class for accessing HTTP integration components from the BeanFactory.\npublic class HttpInboundEndpointParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the 'inbound-channel-adapter' and 'inbound-gateway' elements of the 'http' namespace.\npublic class HttpIntegrationConfigurationInitializer extends Object implements org.springframework.integration.config.IntegrationConfigurationInitializer; // The HTTP Integration infrastructure beanFactory initializer.\npublic class HttpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for Spring Integration's http namespace.\npublic class HttpOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the 'outbound-channel-adapter' element of the http namespace.\npublic class HttpOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the 'outbound-gateway' element of the http namespace.\npublic class IntegrationGraphControllerParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // The BeanDefinitionParser for the <int-http:graph-controller> component.\npublic class IntegrationGraphControllerRegistrar extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar; // Registers the necessary beans for EnableIntegrationGraphController.\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 3839, "repo": "lucene-core-9.7.0", "code": "package lucene90;\n\npackage lucene90.blocktree; // BlockTree terms dictionary.\npackage lucene90.compressing; // Lucene 9.0 compressing format.\nClass DeflateWithPresetDictCompressionMode; // A compression mode that trades speed for compression ratio.\nClass IndexedDISI; // Disk-based implementation of a DocIdSetIterator which can return the index of the current document, i.e.\nClass Lucene90CompoundFormat; // Lucene 9.0 compound file format\nClass Lucene90DocValuesFormat; // Lucene 9.0 DocValues format.\nClass Lucene90LiveDocsFormat; // Lucene 9.0 live docs format\nClass Lucene90NormsFormat; // Lucene 9.0 Score normalization format.\nClass Lucene90PointsFormat; // Lucene 9.0 point format, which encodes dimensional values in a block KD-tree structure for fast 1D range and N dimensional shape intersection filtering.\nClass Lucene90PointsReader; // Reads point values previously written with Lucene90PointsWriter\nClass Lucene90PointsWriter; // Writes dimensional values\nClass Lucene90PostingsFormat; // Lucene 5.0 postings format, which encodes postings in packed integer blocks for fast decode.\nClass Lucene90PostingsFormat.IntBlockTermState; // Holds all state required for Lucene90PostingsReader to produce a PostingsEnum without re-seeking the terms dict.\nClass Lucene90PostingsReader; // Concrete class that reads docId(maybe frq,pos,offset,payloads) list with postings format.\nClass Lucene90PostingsWriter; // Concrete class that writes docId(maybe frq,pos,offset,payloads) list with postings format.\nClass Lucene90SegmentInfoFormat; // Lucene 9.0 Segment info format.\nClass Lucene90StoredFieldsFormat; // Lucene 9.0 stored fields format.\nClass Lucene90TermVectorsFormat; // Lucene 9.0 term vectors format.\nClass LZ4WithPresetDictCompressionMode; // A compression mode that compromises on the compression ratio to provide fast compression and decompression.\nEnum Lucene90StoredFieldsFormat.Mode; // Configuration option for stored fields.\n", "des": "Lucene 9.0 file format."}
{"index": 2551, "repo": "pulsar-common-3.0.0", "code": "package exception;\n\npublic abstract class PulsarExceptionBase extends Exception;\n", "des": "Exception classes"}
{"index": 2377, "repo": "pulsar-client-api-3.0.0", "code": "package classification;\n\n@Public @Stable public class InterfaceAudience extends Object; // Annotation to inform users of a package, class or method's intended audience.\n@Documented @Retention(RUNTIME) public static @interface InterfaceAudience.LimitedPrivate; // Intended for use only within the project(s) specified in the annotation.\n@Documented @Retention(RUNTIME) public static @interface InterfaceAudience.Private; // Intended for use only within the project itself.\n@Documented @Retention(RUNTIME) public static @interface InterfaceAudience.Public; // Intended for use by any project or application.\n@Public @Stable public class InterfaceStability extends Object; // Annotation to inform users of how much to rely on a particular package, class or method not changing over time.\n@Documented public static @interface InterfaceStability.Evolving; // Evolving, but can break compatibility at minor release (i.e.\n@Documented public static @interface InterfaceStability.Stable; // Can evolve while retaining compatibility for minor release boundaries.; can break compatibility only at major release (ie.\n@Documented public static @interface InterfaceStability.Unstable; // No guarantee is provided as to reliability or stability across any level of release granularity.\n", "des": "Annotations used across the whole project."}
{"index": 1876, "repo": "shiro-core-2.0.0-alpha-2", "code": "package annotation;\n\npublic enum Logical extends Enum<Logical>; // An enum for specifying a logical operation that can be used for interpreting authorization annotations\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface RequiresAuthentication; // Requires the current Subject to have been authenticated during their current session for the annotated class/instance/method to be accessed or invoked.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface RequiresGuest; // Requires the current Subject to be a \"guest\", that is, they are not authenticated or remembered from a previous session for the annotated class/instance/method to be accessed or invoked.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface RequiresPermissions; // Requires the current executor's Subject to imply a particular permission in order to execute the annotated method.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface RequiresRoles; // Requires the currently executing Subject to have all of the specified roles.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface RequiresUser; // Requires the current Subject to be an application user for the annotated class/instance/method to be accessed or invoked.\n", "des": "Annotations used to restrict which classes, instances, or methods may be accessed or invoked depending on the caller's access abilities or authentication state."}
{"index": 2741, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class StaxEventItemReaderBuilder<T> extends Object; // A fluent builder for the StaxEventItemReader\npublic class StaxEventItemWriterBuilder<T> extends Object; // A builder for the StaxEventItemWriter.\n", "des": "Builders for Stax event item reader and writer."}
{"index": 410, "repo": "spring-social-core-1.1.6.RELEASE", "code": "package oauth1;\n\nInterface OAuth1Operations; // A service interface for the OAuth 1 flow.\nInterface OAuth1ServiceProvider<A>; // A ServiceProvider that uses the OAuth 1.0 protocol.\nClass AbstractOAuth1ApiBinding; // Base class for OAuth 1-based provider API bindings.\nClass AbstractOAuth1ServiceProvider<S>; // Base class for ServiceProviders that use the OAuth1 protocol.\nClass AuthorizedRequestToken; // A OAuth 1.0 request token that has been authorized by the user.\nClass GenericOAuth1ConnectionFactory; // Generic implementation of an OAuth1ConnectionFactory that carries no intrinsic knowledge of the API it will be creating connections against.\nClass GenericOAuth1ServiceProvider; // Generic implementation of OAuth1ServiceProvider that carries no intrinsic knowledge of the API it will be creating connections against.\nClass OAuth1Parameters; // Parameters for building an OAuth1 authorize URL.\nClass OAuth1Template; // OAuth10Operations implementation that uses REST-template to make the OAuth calls.\nClass OAuthToken; // Holds an OAuth token and secret.\nEnum OAuth1Version; // Various versions ofthe OAuth1 Core specification.\n", "des": "OAuth1 client."}
{"index": 3007, "repo": "spring-web-6.0.11", "code": "package converter;\n\npackage converter.cbor; // Provides an HttpMessageConverter for the CBOR data format.\npackage converter.feed; // Provides HttpMessageConverter implementations for handling Atom and RSS feeds.\npackage converter.json; // Provides HttpMessageConverter implementations for handling JSON.\npackage converter.protobuf; // Provides an HttpMessageConverter implementation for handling Google Protocol Buffers.\npackage converter.smile; // Provides an HttpMessageConverter for the Smile data format (\"binary JSON\").\npackage converter.support; // Provides a comprehensive HttpMessageConverter variant for form handling.\npackage converter.xml; // Provides HttpMessageConverter implementations for handling XML.\npublic abstract class AbstractGenericHttpMessageConverter<T> extends AbstractHttpMessageConverter<T> implements GenericHttpMessageConverter<T>; // Abstract base class for most GenericHttpMessageConverter implementations.\npublic abstract class AbstractHttpMessageConverter<T> extends Object implements HttpMessageConverter<T>; // Abstract base class for most HttpMessageConverter implementations.\npublic abstract class AbstractKotlinSerializationHttpMessageConverter<T extends kotlinx.serialization.SerialFormat> extends AbstractGenericHttpMessageConverter<Object>; // Abstract base class for HttpMessageConverter implementations that use Kotlin serialization.\npublic class BufferedImageHttpMessageConverter extends Object implements HttpMessageConverter<BufferedImage>; // Implementation of HttpMessageConverter that can read and write BufferedImages.\npublic class ByteArrayHttpMessageConverter extends AbstractHttpMessageConverter<byte[]>; // Implementation of HttpMessageConverter that can read and write byte arrays.\npublic class FormHttpMessageConverter extends Object implements HttpMessageConverter<org.springframework.util.MultiValueMap<String,?>>; // Implementation of HttpMessageConverter to read and write 'normal' HTML forms and also to write (but not read) multipart data (e.g.\npublic interface GenericHttpMessageConverter<T> extends HttpMessageConverter<T>; // A specialization of HttpMessageConverter that can convert an HTTP request into a target object of a specified generic type and a source object of a specified generic type into an HTTP response.\npublic class HttpMessageConversionException extends org.springframework.core.NestedRuntimeException; // Thrown by HttpMessageConverter implementations when a conversion attempt fails.\npublic interface HttpMessageConverter<T>; // Strategy interface for converting from and to HTTP requests and responses.\n", "des": "Provides an HttpMessageConverter abstraction to convert between Java objects and HTTP input/output messages."}
{"index": 903, "repo": "commons-jcs3-core-3.1", "code": "package config;\n\nClass OptionConverter; // This class is based on the log4j class org.apache.log4j.helpers.OptionConverter that was made by Ceki Gülcü Simon Kitching; Avy Sharell (sharell@online.fr) Anders Kristensen Matthieu Verbert (mve@zurich.ibm.com) A convenience class to convert property values to specific types.\nClass PropertySetter; // This class is based on the log4j class org.apache.log4j.config.PropertySetter that was made by Anders Kristensen General purpose Object property setter.\nClass PropertySetterException; // This class is based on the log4j class org.apache.log4j.config.PropertySetter that was made by Anders Kristensen Thrown when an error is encountered whilst attempting to set a property using the PropertySetterutility class.\n", "des": "This package contains utility classes that are used when configuring the cache."}
{"index": 3569, "repo": "lucene-codecs-9.7.0", "code": "package memory;\n\nClass DirectPostingsFormat; // Wraps Lucene90PostingsFormat format for on-disk storage, but then at read time loads and stores all terms and postings directly in RAM as byte[], int[].\nClass FSTPostingsFormat; // FST term dict + Lucene50PBF\nClass FSTTermsReader; // FST-based terms dictionary reader.\nClass FSTTermsWriter; // FST-based term dict, using metadata as FST output.\n", "des": "Term dictionary, DocValues or Postings formats that are read entirely into memory."}
{"index": 1916, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package mongo;\n\n@AutoConfiguration(after=MongoAutoConfiguration.class) @ConditionalOnClass({com.mongodb.client.MongoClient.class,org.springframework.data.mongodb.core.MongoTemplate.class}) @EnableConfigurationProperties(MongoProperties.class) @Import({org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration.class,org.springframework.boot.autoconfigure.data.mongo.MongoDatabaseFactoryConfiguration.class,org.springframework.boot.autoconfigure.data.mongo.MongoDatabaseFactoryDependentConfiguration.class}) public class MongoDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's mongo support.\n@AutoConfiguration(after=MongoReactiveAutoConfiguration.class) @ConditionalOnClass({com.mongodb.reactivestreams.client.MongoClient.class,org.springframework.data.mongodb.core.ReactiveMongoTemplate.class}) @ConditionalOnBean(com.mongodb.reactivestreams.client.MongoClient.class) @EnableConfigurationProperties(MongoProperties.class) @Import(org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration.class) public class MongoReactiveDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's reactive mongo support.\n@AutoConfiguration(after=MongoReactiveDataAutoConfiguration.class) @ConditionalOnClass({com.mongodb.reactivestreams.client.MongoClient.class,org.springframework.data.mongodb.repository.ReactiveMongoRepository.class}) @ConditionalOnMissingBean({org.springframework.data.mongodb.repository.support.ReactiveMongoRepositoryFactoryBean.class,org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoryConfigurationExtension.class}) @ConditionalOnRepositoryType(store=\"mongodb\", type=REACTIVE) @Import(org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesRegistrar.class) public class MongoReactiveRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's Mongo Reactive Repositories.\n", "des": "Auto-configuration for Spring Data Mongo."}
{"index": 857, "repo": "calcite-core-1.34.0", "code": "package server;\n\nInterface CalciteServer; // Server.\nInterface CalciteServerStatement; // Statement within a Calcite server.\nInterface DdlExecutor; // Executes DDL commands.\nClass DdlExecutorImpl; // Abstract implementation of DdlExecutor.\n", "des": "Provides a server for hosting Calcite connections."}
{"index": 727, "repo": "mina-core-3.0.0-M2", "code": "package bio;\n\nClass BioUdpServer; // A java blocking I/O based UDP server.\nClass BioUdpSession; // A IoSession for BioUdpServer\n", "des": "Transport implementation base on blocking I/O Socket"}
{"index": 3331, "repo": "opencms-core-15.0", "code": "package modules;\n\npackage modules.edit; // Contains classes of the module manager app used to edit modules.\nClass A_CmsModuleImportForm; // Abstract superclass for the module import forms.\nClass CmsImportTabForm; // Module import dialog with two tabs, one for importing via HTTP and one for importing from the server.\nClass CmsModuleApp; // Main module manager app class.\nClass CmsModuleApp.Attributes; // Additional app attributes for the module manager.\nClass CmsModuleApp.Icons; // Contains the icon constants for the module manager.\nClass CmsModuleApp.States; // Contains the different navigation states for the module maanger.\nClass CmsModuleAppConfiguration; // App configuration for the module maanger app.\nClass CmsModuleExportDialog; // The module export dialog.\nClass CmsModuleImportFile; // A bean representing a module zip file to be imported.\nClass CmsModuleImportForm; // The form for importing modules via HTTP.\nClass CmsModuleImportThread; // Report thread for importing a module.\nClass CmsModuleInfoDialog; // Widget to display the list of resource / explorer types defined in a module.\nClass CmsModuleRow; // Represents a row of the modules overview table.\nClass CmsModuleTable<T>; // Overview list for module information.\nClass CmsNewTypeForm;\nClass CmsServerModuleImportForm; // The form for importing a module from the application server.\nClass CmsSiteSelectDialog; // The dialog for selecting a site when exporting / deleting a module without a module site.\n", "des": "Contains classes of the module manager app."}
{"index": 1042, "repo": "commons-io-2.13.0", "code": "package build;\n\nClass AbstractOrigin<T,B extends AbstractOrigin<T,B>>; // Abstracts the origin of data for builders like a File, Path, Reader, Writer, InputStream, OutputStream, and URI.\nClass AbstractOrigin.ByteArrayOrigin; // A byte[] origin.\nClass AbstractOrigin.CharSequenceOrigin; // A CharSequence origin.\nClass AbstractOrigin.FileOrigin; // A File origin.\nClass AbstractOrigin.InputStreamOrigin; // An InputStream origin.\nClass AbstractOrigin.OutputStreamOrigin; // An OutputStream origin.\nClass AbstractOrigin.PathOrigin; // A Path origin.\nClass AbstractOrigin.ReaderOrigin; // An Reader origin.\nClass AbstractOrigin.URIOrigin; // A URI origin.\nClass AbstractOrigin.WriterOrigin; // An Writer origin.\nClass AbstractOriginSupplier<T,B extends AbstractOriginSupplier<T,B>>; // Abstracts building an instance of T.\nClass AbstractStreamBuilder<T,B extends AbstractStreamBuilder<T,B>>; // Abstracts building a typed instance of T.\nClass AbstractSupplier<T,B extends AbstractSupplier<T,B>>; // Abstracts supplying an instance of T.\n", "des": "Provides classes to implement IO builders."}
{"index": 1518, "repo": "spring-context-6.0.11", "code": "package format;\n\npackage format.annotation; // Annotations for declaratively configuring field formatting rules.\npackage format.datetime; // Formatters for java.util.Date properties.\npackage format.number; // Formatters for java.lang.Number properties.\npackage format.support; // Support classes for the formatting package, providing common implementations as well as adapters.\npublic interface AnnotationFormatterFactory<A extends Annotation>; // A factory that creates formatters to format values of fields annotated with a particular Annotation.\npublic interface Formatter<T> extends Printer<T>, Parser<T>; // Formats objects of type T.\npublic interface FormatterRegistrar; // Registers Converters and Formatters with a FormattingConversionService through the FormatterRegistry SPI.\npublic interface FormatterRegistry extends org.springframework.core.convert.converter.ConverterRegistry; // A registry of field formatting logic.\n@FunctionalInterface public interface Parser<T>; // Parses text strings to produce instances of T.\n@FunctionalInterface public interface Printer<T>; // Prints objects of type T for display.\n", "des": "An API for defining Formatters to format field model values for display in a UI."}
{"index": 2322, "repo": "spring-boot-3.1.1", "code": "package r2dbc;\n\npackage r2dbc.init; // Support for initialization of an SQL database using an R2DBC ConnectionFactory.\npublic final class ConnectionFactoryBuilder extends Object; // Builder for ConnectionFactory.\npublic enum EmbeddedDatabaseConnection extends Enum<EmbeddedDatabaseConnection>; // Connection details for embedded databases compatible with R2DBC.\npublic class OptionsCapableConnectionFactory extends Object implements io.r2dbc.spi.Wrapped<io.r2dbc.spi.ConnectionFactory>, io.r2dbc.spi.ConnectionFactory; // ConnectionFactory capable of providing access to the ConnectionFactoryOptions from which it was built.\n", "des": "Support for R2DBC connectivity."}
{"index": 2278, "repo": "spring-data-elasticsearch-5.1.2", "code": "package document;\n\npublic interface Document extends StringObjectMap<Document>; // A representation of a Elasticsearch document as extended Map.\npublic class Explanation extends Object; // class that holds explanations returned from an Elasticsearch search.\npublic class NestedMetaData extends Object; // meta data returned for nested inner hits.\npublic interface SearchDocument extends Document; // Extension to Document exposing search response related data.\npublic class SearchDocumentAdapter extends Object implements SearchDocument; // SearchDocument implementation using a Document delegate.\npublic class SearchDocumentResponse extends Object; // This represents the complete search response from Elasticsearch, including the returned documents.\n@FunctionalInterface public static interface SearchDocumentResponse.EntityCreator<T> extends Function<SearchDocument,CompletableFuture<T>>; // A function to convert a SearchDocument async into an entity.\n", "des": "Classes related to the Document structure of Elasticsearch documents and search responses."}
{"index": 1117, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package task;\n\nClass DeletionTask; // DeletionTasks are supplied to the DeletionService for deletion.\nClass DockerContainerDeletionTask; // DeletionTask handling the removal of Docker containers.\nClass FileDeletionTask; // DeletionTask handling the removal of files (and directories).\nEnum DeletionTaskType; // Available types of DeletionTasks.\n", "des": "Package containing DeletionTasks for use with the DeletionService."}
{"index": 134, "repo": "ignite-core-2.15.0", "code": "package executor;\n\nClass GridExecutorService; // An ExecutorService that executes each submitted task in grid through Ignite instance, normally configured using Ignite.executorService() method.\n", "des": "Contains grid executor service implementation."}
{"index": 660, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package exception;\n\nClass InvalidVolumeException; // This exception is thrown when a volume is found not valid.\nClass VolumeException; // Base class for all volume related exceptions.\nClass VolumeProvisioningException; // Exception throws when volume provisioning is failed.\n", "des": "This package contains volume related exception classes."}
{"index": 2993, "repo": "spring-ldap-core-3.1.0", "code": "package impl;\n\npackage impl.converters; // Provides some basic implementations of the Converter interface.\npublic class ConversionServiceConverterManager extends Object implements ConverterManager;\npublic static final class ConversionServiceConverterManager.NameToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<Name,String>;\npublic static final class ConversionServiceConverterManager.StringToNameConverter extends Object implements org.springframework.core.convert.converter.Converter<String,Name>;\npublic interface Converter; // Interface specifying the conversion between two classes\npublic final class ConverterManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean; // A utility class to allow ConverterManagerImpl instances to be easily configured via spring.xml.\npublic static final class ConverterManagerFactoryBean.ConverterConfig extends Object; // Configuration information for a single Converter instance.\npublic final class ConverterManagerImpl extends Object implements ConverterManager; // An implementation of ConverterManager.\npublic class StringConverter extends Object;\n", "des": "Provides an implementation of the ConverterManager interface."}
{"index": 2814, "repo": "spring-integration-ip-6.1.2", "code": "package serializer;\n\npublic abstract class AbstractByteArraySerializer extends Object implements org.springframework.core.serializer.Serializer<byte[]>, org.springframework.core.serializer.Deserializer<byte[]>, org.springframework.context.ApplicationEventPublisherAware; // Base class for (de)serializers that provide a mechanism to reconstruct a byte array from an arbitrary stream.\npublic abstract class AbstractPooledBufferByteArraySerializer extends AbstractByteArraySerializer; // Base class for deserializers that cannot determine the buffer size needed.\npublic class ByteArrayCrLfSerializer extends AbstractPooledBufferByteArraySerializer; // Reads data in an InputStream to a byte[]; data must be terminated by \\r\\n (not included in resulting byte[]).\npublic class ByteArrayElasticRawDeserializer extends Object implements org.springframework.core.serializer.Deserializer<byte[]>; // A deserializer that uses a ByteArrayOutputStream instead of a fixed buffer, allowing the buffer to grow as needed.\npublic class ByteArrayLengthHeaderSerializer extends AbstractByteArraySerializer; // Reads data in an InputStream to a byte[]; data must be preceded by a binary length (network byte order, not included in resulting byte[]).\npublic class ByteArrayLfSerializer extends ByteArraySingleTerminatorSerializer;\npublic class ByteArrayRawSerializer extends AbstractPooledBufferByteArraySerializer; // A byte array (de)serializer that does nothing with the payload; sends it raw.\npublic class ByteArraySingleTerminatorSerializer extends AbstractPooledBufferByteArraySerializer; // Reads data in an InputStream to a byte[]; data must be terminated by a single byte (not included in resulting byte[]).\npublic class ByteArrayStxEtxSerializer extends AbstractPooledBufferByteArraySerializer; // Reads data in an InputStream to a byte[]; data must be prefixed by <stx> and terminated by <etx> (not included in resulting byte[]).\npublic class MapJsonSerializer extends Object implements org.springframework.core.serializer.Serializer<Map<?,?>>, org.springframework.core.serializer.Deserializer<Map<?,?>>; // Serializes a Map as JSON.\npublic class SoftEndOfStreamException extends RuntimeException; // Used to communicate that a stream has closed, but between logical messages.\npublic final class TcpCodecs extends Object; // Factory class to create TCP Serializer/Deserializers used to encode/decode messages to/from a TCP stream.\n", "des": "Byte array (de)serializers for putting some protocol on the wire so that incoming messages can be constructed from stream data."}
{"index": 497, "repo": "beam-sdks-java-core-2.49.0", "code": "package display;\n\nInterface DisplayData.Builder; // Utility to build up display data from a component and its included subcomponents.\nInterface HasDisplayData; // Marker interface for PTransforms and components to specify display data used within UIs and diagnostic tools.\nClass DisplayData; // Static display data associated with a pipeline component.\nClass DisplayData.Identifier; // Unique identifier for a display data item within a component.\nClass DisplayData.Item; // Items are the unit of display data.\nClass DisplayData.ItemSpec<T>; // Specifies an DisplayData.Item to register as display data.\nClass DisplayData.Path; // Structured path of registered display data within a component hierarchy.\nEnum DisplayData.Type; // Display data type.\n", "des": "Defines HasDisplayData for annotating components which provide display data used within UIs and diagnostic tools."}
{"index": 942, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\npackage support.destination; // Provides the DestinationProvider interface.\npackage support.interceptor; // Provides the ClientInterceptor interface, and validating interceptors.\nClass WebServiceAccessor; // Base class for WebServiceTemplate and other WS-accessing helpers.\n", "des": "Classes supporting the org.springframework.ws.client.core package."}
{"index": 365, "repo": "commons-geometry-euclidean-1.0", "code": "package line;\n\nInterface Linecastable3D; // Interface for objects that support linecast operations in Euclidean 3D space.\nClass EmbeddedTreeLineSubset3D; // Class representing an arbitrary subset of a line in 3D Euclidean space using a RegionBSPTree1D.\nClass Line3D; // Class representing a line in 3D space.\nClass Line3D.SubspaceTransform; // Class containing a transformed line instance along with a subspace (1D) transform.\nClass LinecastPoint3D; // Class representing intersections resulting from linecast operations in Euclidean 3D space.\nClass LineConvexSubset3D; // Class representing a convex subset of a line in 3D Euclidean space.\nClass Lines3D; // Class containing factory methods for constructing Line3D and LineSubset3D instances.\nClass LineSubset3D; // Class representing a subset of a line in 3D Euclidean space.\nClass Ray3D; // Class representing a ray in 3D Euclidean space.\nClass ReverseRay3D; // Class representing a portion of a line in 3D Euclidean space that starts at infinity and continues in the direction of the line up to a single end point.\nClass Segment3D; // Class representing a line segment in 3D Euclidean space.\n", "des": "This package provides classes and utilities for lines in 3D Euclidean space."}
{"index": 843, "repo": "calcite-core-1.34.0", "code": "package hint;\n\nInterface Hintable; // Hintable is a kind of RelNode that can attach RelHints.\nInterface HintOptionChecker; // A HintOptionChecker validates the options of a RelHint.\nInterface HintPredicate; // A HintPredicate indicates whether a RelNode can apply the specified hint.\nClass CompositeHintPredicate; // A HintPredicate to combine multiple hint predicates into one.\nClass HintPredicates; // A collection of hint predicates.\nClass HintStrategy; // Represents a hint strategy entry of HintStrategyTable.\nClass HintStrategy.Builder; // Builder for HintStrategy.\nClass HintStrategyTable; // A collection of HintStrategys.\nClass HintStrategyTable.Builder; // Builder for HintStrategyTable.\nClass HintStrategyTable.HintErrorLogger; // Implementation of Litmus that returns a status code, it logs warnings for fail check and does not throw.\nClass NodeTypeHintPredicate; // A hint predicate that specifies which kind of relational expression the hint can be applied to.\nClass RelHint; // Hint attached to a relation expression.\nClass RelHint.Builder; // Builder for RelHint.\nEnum CompositeHintPredicate.Composition; // How hint predicates are composed.\n", "des": "Defines hints interfaces and utilities for relational expressions."}
{"index": 2135, "repo": "spring-context-support-6.0.11", "code": "package freemarker;\n\npublic class FreeMarkerConfigurationFactory extends Object; // Factory that configures a FreeMarker Configuration.\npublic class FreeMarkerConfigurationFactoryBean extends FreeMarkerConfigurationFactory implements org.springframework.beans.factory.FactoryBean<freemarker.template.Configuration>, org.springframework.beans.factory.InitializingBean, org.springframework.context.ResourceLoaderAware; // Factory bean that creates a FreeMarker Configuration and provides it as bean reference.\npublic abstract class FreeMarkerTemplateUtils extends Object; // Utility class for working with FreeMarker.\npublic class SpringTemplateLoader extends Object implements freemarker.cache.TemplateLoader; // FreeMarker TemplateLoader adapter that loads via a Spring ResourceLoader.\n", "des": "Support classes for setting up FreeMarker within a Spring application context."}
{"index": 3259, "repo": "opencms-core-15.0", "code": "package db2;\n\nClass CmsHistoryDriver; // DB2 implementation of the history driver methods.\nClass CmsProjectDriver; // DB2 implementation of the project driver methods.\nClass CmsSqlManager; // DB2 implementation of the SQL Manager.\nClass CmsSubscriptionDriver; // DB2 implementation of the subscription driver.\nClass CmsUserDriver; // DB2 implementation of the user driver methods.\nClass CmsVfsDriver; // DB2 implementation of the VFS driver methods.\n", "des": "DB2 implementation of the OpenCms database connector."}
{"index": 484, "repo": "beam-sdks-java-core-2.49.0", "code": "package runners;\n\nInterface PipelineRunnerRegistrar; // For internal use only; no backwards-compatibility guarantees.\nInterface PTransformMatcher; // For internal use only; no backwards-compatibility guarantees.\nInterface PTransformOverrideFactory<InputT extends PInput,OutputT extends POutput,TransformT extends PTransform<? super InputT,OutputT>>; // For internal use only; no backwards-compatibility guarantees.\nClass AppliedPTransform<InputT extends PInput,OutputT extends POutput,TransformT extends PTransform<? super InputT,OutputT>>; // For internal use only; no backwards-compatibility guarantees.\nClass PTransformOverride; // For internal use only; no backwards-compatibility guarantees.\nClass PTransformOverrideFactory.PTransformReplacement<InputT extends PInput,OutputT extends POutput>; // A PTransform that replaces an AppliedPTransform, and the input required to do so.\nClass PTransformOverrideFactory.ReplacementOutput; // A mapping between original TaggedPValue outputs and their replacements.\nClass TransformHierarchy; // For internal use only; no backwards-compatibility guarantees.\n", "des": "For internal use only; no backwards compatibility guarantees."}
{"index": 892, "repo": "commons-jcs3-core-3.1", "code": "package auxiliary;\n\npackage auxiliary.disk; // The primary disk auxiliary.\npackage auxiliary.lateral; // Root package for the lateral cache family.\npackage auxiliary.remote; // Root package for the remote auxiliary cache.\nInterface AuxiliaryCache<K,V>; // Tag interface for auxiliary caches.\nInterface AuxiliaryCacheAttributes; // This is a nominal interface that auxiliary cache attributes should implement.\nInterface AuxiliaryCacheFactory; // All auxiliary caches must have a factory that the cache configurator can use to create instances.\nClass AbstractAuxiliaryCache<K,V>; // This holds convenience methods used by most auxiliary caches.\nClass AbstractAuxiliaryCacheAttributes; // This has common attributes used by all auxiliaries.\nClass AbstractAuxiliaryCacheEventLogging<K,V>; // All ICacheEvents are defined as final.\nClass AbstractAuxiliaryCacheFactory; // Base class for auxiliary cache factories.\nClass AbstractAuxiliaryCacheMonitor; // Used to monitor and repair any failed connection for the lateral cache service.\nClass AuxiliaryCacheConfigurator; // Configuration util for auxiliary caches.\n", "des": "Root package for auxiliary caches."}
{"index": 601, "repo": "org.apache.karaf.main-2.4.4", "code": "package framework;\n\npackage framework.launch; // Framework Launch Package Version 1.1.\npackage framework.namespace; // Namespace Package Version 1.0.\npackage framework.startlevel; // Framework Start Level Package Version 1.0.\npackage framework.wiring; // Framework Wiring Package Version 1.1.\nInterface AllServiceListener; // A ServiceEvent listener that does not filter based upon package wiring.\nInterface Bundle; // An installed bundle in the Framework.\nInterface BundleActivator; // Customizes the starting and stopping of a bundle.\nInterface BundleContext; // A bundle's execution context within the Framework.\nInterface BundleListener; // A BundleEvent listener.\nInterface BundleReference; // A reference to a Bundle.\nInterface Configurable; // As of 1.2.\nInterface Constants; // Defines standard names for the OSGi environment system properties, service properties, and Manifest header attribute keys.\nInterface Filter; // An RFC 1960-based Filter.\nInterface FrameworkListener; // A FrameworkEvent listener.\nInterface ServiceFactory<S>; // Allows services to provide customized service objects in the OSGi environment.\nInterface ServiceListener; // A ServiceEvent listener.\nInterface ServiceReference<S>; // A reference to a service.\nInterface ServiceRegistration<S>; // A registered service.\nInterface SynchronousBundleListener; // A synchronous BundleEvent listener.\nInterface UnfilteredServiceListener; // A ServiceEvent listener that does not filter based upon any filter string specified to BundleContext.addServiceListener(ServiceListener, String).\nClass AdaptPermission; // A bundle's authority to adapt an object to a type.\nClass AdminPermission; // A bundle's authority to perform specific privileged administrative operations on or to get sensitive information about a bundle.\nClass BundleEvent; // An event from the Framework describing a bundle lifecycle change.\nClass BundlePermission; // A bundle's authority to require or provide a bundle or to receive or attach fragments.\nClass CapabilityPermission; // A bundle's authority to provide or require a capability.\nClass FrameworkEvent; // A general event from the Framework.\nClass FrameworkUtil; // Framework Utility class.\nClass PackagePermission; // A bundle's authority to import or export a package.\nClass ServiceEvent; // An event from the Framework describing a service lifecycle change.\nClass ServicePermission; // A bundle's authority to register or get a service.\n", "des": "Framework Package Version 1.7."}
