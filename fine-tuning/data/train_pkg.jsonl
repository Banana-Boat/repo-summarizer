{"index": 0, "repo": "connect-api-3.5.0", "code": "package components;\n\nInterface Versioned; // Connect requires some components implement this interface to define a version string.\n", "des": "Provides common interfaces used to describe pluggable components."}
{"index": 1, "repo": "connect-api-3.5.0", "code": "package connector;\n\npackage connector.policy; // Provides pluggable interfaces for policies controlling how users can configure connectors.\nInterface ConnectorContext; // ConnectorContext allows Connectors to proactively interact with the Kafka Connect runtime.\nInterface Task; // Tasks contain the code that actually copies data to/from another system.\nClass Connector; // Connectors manage integration of Kafka Connect with another system, either as an input that ingests data into Kafka or an output that passes data to an external system.\nClass ConnectRecord<R extends ConnectRecord<R>>; // Base class for records containing data to be copied to/from Kafka.\n", "des": "Provides interfaces for Connector and Task implementations."}
{"index": 2, "repo": "connect-api-3.5.0", "code": "package policy;\n\nInterface ConnectorClientConfigOverridePolicy; // An interface for enforcing a policy on overriding of Kafka client configs via the connector configs.\nClass ConnectorClientConfigRequest;\nEnum ConnectorClientConfigRequest.ClientType;\n", "des": "Provides pluggable interfaces for policies controlling how users can configure connectors."}
{"index": 3, "repo": "connect-api-3.5.0", "code": "package data;\n\nInterface Schema; // Definition of an abstract data type.\nClass ConnectSchema;\nClass Date; // A date representing a calendar day with no time of day or timezone.\nClass Decimal; // An arbitrary-precision signed decimal number.\nClass Field; // A field in a Struct, consisting of a field name, index, and Schema for the field value.\nClass SchemaAndValue; // A composite containing a Schema and associated value\nClass SchemaBuilder; // SchemaBuilder provides a fluent API for constructing Schema objects.\nClass SchemaProjector; // SchemaProjector is a utility to project a value between compatible schemas and throw exceptions when non compatible schemas are provided.\nClass Struct; // A structured record containing a set of named fields with values, each field using an independent Schema.\nClass Time; // A time representing a specific point in a day, not tied to any specific date.\nClass Timestamp; // A timestamp representing an absolute time, without timezone information.\nClass Values; // Utility for converting from one Connect value to a different form.\nEnum Schema.Type; // The type of a schema.\n", "des": "Provides classes for representing data and schemas handled by Connect."}
{"index": 4, "repo": "connect-api-3.5.0", "code": "package errors;\n\nClass AlreadyExistsException; // Indicates the operation tried to create an entity that already exists.\nClass ConnectException; // ConnectException is the top-level exception type generated by Kafka Connect and connector implementations.\nClass DataException; // Base class for all Kafka Connect data API exceptions.\nClass IllegalWorkerStateException; // Indicates that a method has been invoked illegally or at an invalid time by a connector or task.\nClass NotFoundException; // Indicates that an operation attempted to modify or delete a connector or task that is not present on the worker.\nClass RetriableException; // An exception that indicates the operation can be reattempted.\nClass SchemaBuilderException; // Indicates an error while building a schema via SchemaBuilder\nClass SchemaProjectorException; // Indicates an error while projecting a schema via SchemaProjector\n", "des": "Provides common exception classes for Connect, used by the framework and plugins to communicate failures."}
{"index": 5, "repo": "connect-api-3.5.0", "code": "package header;\n\nInterface Header; // A Header is a key-value pair, and multiple headers can be included with the key, value, and timestamp in each Kafka message.\nInterface Headers; // A mutable ordered collection of Header objects.\nInterface Headers.HeaderTransform; // A function to transform the supplied Header.\nClass ConnectHeaders; // A basic Headers implementation.\n", "des": "Provides an API for application-defined metadata attached to Connect records."}
{"index": 6, "repo": "connect-api-3.5.0", "code": "package health;\n\nInterface ConnectClusterDetails; // Provides immutable Connect cluster information, such as the ID of the backing Kafka cluster.\nInterface ConnectClusterState; // Provides the ability to lookup connector metadata, including status and configurations, as well as immutable cluster information such as Kafka cluster ID.\nClass AbstractState; // Provides the current status for a connector or a task, along with an identifier for its Connect worker\nClass ConnectorHealth; // Provides basic health information about the connector and its tasks.\nClass ConnectorState; // Describes the status, worker ID, and any errors associated with a connector.\nClass TaskState; // Describes the state, IDs, and any errors of a connector task.\nEnum ConnectorType; // Enum definition that identifies the type of the connector.\n", "des": "Provides an API for describing the state of a running Connect cluster to ConnectRestExtension instances."}
{"index": 7, "repo": "connect-api-3.5.0", "code": "package rest;\n\nInterface ConnectRestExtension; // A plugin interface to allow registration of new JAX-RS resources like Filters, REST endpoints, providers, etc.\nInterface ConnectRestExtensionContext; // The interface provides the ability for ConnectRestExtension implementations to access the JAX-RS Configurable and cluster state ConnectClusterState.\n", "des": "Provides a pluggable interface for altering the behavior of the Connect REST API."}
{"index": 8, "repo": "connect-api-3.5.0", "code": "package sink;\n\nInterface ErrantRecordReporter; // Component that a SinkTask can use to report problematic records (and their corresponding problems) as it writes them through SinkTask.put(java.util.Collection).\nInterface SinkConnectorContext; // A context to allow a SinkConnector to interact with the Kafka Connect runtime.\nInterface SinkTaskContext; // Context passed to SinkTasks, allowing them to access utilities in the Kafka Connect runtime.\nClass SinkConnector; // SinkConnectors implement the Connector interface to send Kafka data to another system.\nClass SinkRecord; // SinkRecord is a ConnectRecord that has been read from Kafka and includes the kafkaOffset of the record in the Kafka topic-partition in addition to the standard fields.\nClass SinkTask; // SinkTask is a Task that takes records loaded from Kafka and sends them to another system.\n", "des": "Provides an API for implementing sink connectors which write Kafka records to external applications."}
{"index": 9, "repo": "connect-api-3.5.0", "code": "package source;\n\nInterface SourceConnectorContext; // A context to allow a SourceConnector to interact with the Kafka Connect runtime.\nInterface SourceTaskContext; // SourceTaskContext is provided to SourceTasks to allow them to interact with the underlying runtime.\nInterface TransactionContext; // Provided to source tasks to allow them to define their own producer transaction boundaries when exactly-once support is enabled.\nClass SourceConnector; // SourceConnectors implement the connector interface to pull data from another system and send it to Kafka.\nClass SourceRecord; // SourceRecords are generated by SourceTasks and passed to Kafka Connect for storage in Kafka.\nClass SourceTask; // SourceTask is a Task that pulls records from another system for storage in Kafka.\nEnum ConnectorTransactionBoundaries; // An enum to represent the level of support for connector-defined transaction boundaries.\nEnum ExactlyOnceSupport; // An enum to represent the level of support for exactly-once semantics from a source connector.\nEnum SourceTask.TransactionBoundary; // Represents the permitted values for the SourceTask.TRANSACTION_BOUNDARY_CONFIG property.\n", "des": "Provides an API for implementing source connectors which read data from external applications into Kafka."}
{"index": 10, "repo": "connect-api-3.5.0", "code": "package storage;\n\nInterface Converter; // The Converter interface provides support for translating between Kafka Connect's runtime data format and byte[].\nInterface HeaderConverter; // The HeaderConverter interface provides support for translating between Kafka Connect's runtime data format and byte[].\nInterface OffsetStorageReader; // OffsetStorageReader provides access to the offset storage used by sources.\nClass ConverterConfig; // Abstract class that defines the configuration options for Converter and HeaderConverter instances.\nClass SimpleHeaderConverter; // A HeaderConverter that serializes header values as strings and that deserializes header values to the most appropriate numeric, boolean, array, or map representation.\nClass StringConverter; // Converter and HeaderConverter implementation that only supports serializing to strings.\nClass StringConverterConfig; // Configuration options for StringConverter instances.\nEnum ConverterType; // The type of Converter and HeaderConverter.\n", "des": "Provides pluggable interfaces and some implementations for (de)serializing data to and from Kafka"}
{"index": 11, "repo": "connect-api-3.5.0", "code": "package transforms;\n\npackage transforms.predicates; // Provides a pluggable interface for describing when a Transformation should be applied to a record.\nInterface Transformation<R extends ConnectRecord<R>>; // Single message transformation for Kafka Connect record types.\n", "des": "Provides a pluggable interface for altering data which is being moved by Connect."}
{"index": 12, "repo": "connect-api-3.5.0", "code": "package predicates;\n\nInterface Predicate<R extends ConnectRecord<R>>; // A predicate on records.\n", "des": "Provides a pluggable interface for describing when a Transformation should be applied to a record."}
{"index": 13, "repo": "connect-api-3.5.0", "code": "package util;\n\nClass ConnectorUtils; // Utilities that connector implementations might find useful.\n", "des": "Provides common utilities that can be used in component implementations."}
{"index": 14, "repo": "commons-collections4-4.4", "code": "package collections4;\n\npackage collections4.bag; // This package contains implementations of the Bag and SortedBag interfaces.\npackage collections4.bidimap; // This package contains implementations of the BidiMap, OrderedBidiMap and SortedBidiMap interfaces.\npackage collections4.collection; // This package contains implementations of the Collection interface.\npackage collections4.comparators; // This package contains implementations of the Comparator interface.\npackage collections4.functors; // This package contains implementations of the Closure, Predicate, Transformer and Factory interfaces.\npackage collections4.iterators; // This package contains implementations of the Iterator interface.\npackage collections4.keyvalue; // This package contains implementations of collection and map related key/value classes.\npackage collections4.list; // This package contains implementations of the List interface.\npackage collections4.map; // This package contains implementations of the Map, IterableMap, OrderedMap and SortedMap interfaces.\npackage collections4.multimap; // This package contains implementations of the MultiValuedMap interfaces.\npackage collections4.multiset; // This package contains implementations of the MultiSet interface.\npackage collections4.properties; // This package contains classes to extend or customize the behavior of Properties.\npackage collections4.queue; // This package contains implementations for the Queue interface.\npackage collections4.sequence; // This package provides classes to compare two sequences of objects.\npackage collections4.set; // This package contains implementations of the Set, SortedSet and NavigableSet interfaces.\npackage collections4.splitmap; // The \"split map\" concept is that of an object that implements the Put and Get interfaces, with differing generic types.\npackage collections4.trie; // This package contains implementations of the Trie interface.\nInterface Bag<E>; // Defines a collection that counts the number of times an object appears in the collection.\nInterface BidiMap<K,V>; // Defines a map that allows bidirectional lookup between key and values.\nInterface BoundedCollection<E>; // Defines a collection that is bounded in size.\nInterface BoundedMap<K,V>; // Defines a map that is bounded in size.\nInterface Closure<T>; // Defines a functor interface implemented by classes that do something.\nInterface Equator<T>; // An equation function, which determines equality between objects of type T.\n", "des": "This package contains the interfaces and utilities shared across all the subpackages of this component."}
{"index": 15, "repo": "commons-collections4-4.4", "code": "package bag;\n\nClass AbstractBagDecorator<E>; // Decorates another Bag to provide additional behaviour.\nClass AbstractMapBag<E>; // Abstract implementation of the Bag interface to simplify the creation of subclass implementations.\nClass AbstractMapBag.MutableInteger; // Mutable integer class for storing the data.\nClass AbstractSortedBagDecorator<E>; // Decorates another SortedBag to provide additional behaviour.\nClass CollectionBag<E>; // Decorates another Bag to comply with the Collection contract.\nClass CollectionSortedBag<E>; // Decorates another SortedBag to comply with the Collection contract.\nClass HashBag<E>; // Implements Bag, using a HashMap to provide the data storage.\nClass PredicatedBag<E>; // Decorates another Bag to validate that additions match a specified predicate.\nClass PredicatedSortedBag<E>; // Decorates another SortedBag to validate that additions match a specified predicate.\nClass SynchronizedBag<E>; // Decorates another Bag to synchronize its behaviour for a multi-threaded environment.\nClass SynchronizedSortedBag<E>; // Decorates another SortedBag to synchronize its behaviour for a multi-threaded environment.\nClass TransformedBag<E>; // Decorates another Bag to transform objects that are added.\nClass TransformedSortedBag<E>; // Decorates another SortedBag to transform objects that are added.\nClass TreeBag<E>; // Implements SortedBag, using a TreeMap to provide the data storage.\nClass UnmodifiableBag<E>; // Decorates another Bag to ensure it can't be altered.\nClass UnmodifiableSortedBag<E>; // Decorates another SortedBag to ensure it can't be altered.\n", "des": "This package contains implementations of the Bag and SortedBag interfaces."}
{"index": 16, "repo": "commons-collections4-4.4", "code": "package bidimap;\n\nClass AbstractBidiMapDecorator<K,V>; // Provides a base decorator that enables additional functionality to be added to a BidiMap via decoration.\nClass AbstractDualBidiMap<K,V>; // Abstract BidiMap implemented using two maps.\nClass AbstractDualBidiMap.BidiMapIterator<K,V>; // Inner class MapIterator.\nClass AbstractDualBidiMap.EntrySet<K,V>; // Inner class EntrySet.\nClass AbstractDualBidiMap.EntrySetIterator<K,V>; // Inner class EntrySetIterator.\nClass AbstractDualBidiMap.KeySet<K>; // Inner class KeySet.\nClass AbstractDualBidiMap.KeySetIterator<K>; // Inner class KeySetIterator.\nClass AbstractDualBidiMap.MapEntry<K,V>; // Inner class MapEntry.\nClass AbstractDualBidiMap.Values<V>; // Inner class Values.\nClass AbstractDualBidiMap.ValuesIterator<V>; // Inner class ValuesIterator.\nClass AbstractDualBidiMap.View<K,V,E>; // Inner class View.\nClass AbstractOrderedBidiMapDecorator<K,V>; // Provides a base decorator that enables additional functionality to be added to an OrderedBidiMap via decoration.\nClass AbstractSortedBidiMapDecorator<K,V>; // Provides a base decorator that enables additional functionality to be added to a SortedBidiMap via decoration.\nClass DualHashBidiMap<K,V>; // Implementation of BidiMap that uses two HashMap instances.\nClass DualLinkedHashBidiMap<K,V>; // Implementation of BidiMap that uses two LinkedHashMap instances.\nClass DualTreeBidiMap<K,V>; // Implementation of BidiMap that uses two TreeMap instances.\nClass DualTreeBidiMap.BidiOrderedMapIterator<K,V>; // Inner class MapIterator.\nClass DualTreeBidiMap.ViewMap<K,V>; // Internal sorted map view.\n", "des": "This package contains implementations of the BidiMap, OrderedBidiMap and SortedBidiMap interfaces."}
{"index": 17, "repo": "commons-collections4-4.4", "code": "package collection;\n\nInterface CompositeCollection.CollectionMutator<E>; // Pluggable strategy to handle changes to the composite.\nClass AbstractCollectionDecorator<E>; // Decorates another Collection to provide additional behaviour.\nClass CompositeCollection<E>; // Decorates a collection of other collections to provide a single unified view.\nClass IndexedCollection<K,C>; // An IndexedCollection is a Map-like view onto a Collection.\nClass PredicatedCollection<E>; // Decorates another Collection to validate that additions match a specified predicate.\nClass PredicatedCollection.Builder<E>; // Builder for creating predicated collections.\nClass SynchronizedCollection<E>; // Decorates another Collection to synchronize its behaviour for a multi-threaded environment.\nClass TransformedCollection<E>; // Decorates another Collection to transform objects that are added.\nClass UnmodifiableBoundedCollection<E>; // UnmodifiableBoundedCollection decorates another BoundedCollection to ensure it can't be altered.\nClass UnmodifiableCollection<E>; // Decorates another Collection to ensure it can't be altered.\n", "des": "This package contains implementations of the Collection interface."}
{"index": 18, "repo": "commons-collections4-4.4", "code": "package comparators;\n\nClass BooleanComparator; // A Comparator for Boolean objects that can sort either true or false first.\nClass ComparableComparator<E extends Comparable<? super E>>; // A Comparator that compares Comparable objects.\nClass ComparatorChain<E>; // A ComparatorChain is a Comparator that wraps one or more Comparators in sequence.\nClass FixedOrderComparator<T>; // A Comparator which imposes a specific order on a specific set of Objects.\nClass NullComparator<E>; // A Comparator that will compare nulls to be either lower or higher than other objects.\nClass ReverseComparator<E>; // Reverses the order of another comparator by reversing the arguments to its compare method.\nClass TransformingComparator<I,O>; // Decorates another Comparator with transformation behavior.\nEnum FixedOrderComparator.UnknownObjectBehavior; // Unknown object behavior enum.\n", "des": "This package contains implementations of the Comparator interface."}
{"index": 19, "repo": "commons-collections4-4.4", "code": "package functors;\n\nInterface PredicateDecorator<T>; // Defines a predicate that decorates one or more other predicates.\nClass AbstractQuantifierPredicate<T>; // Abstract base class for quantification predicates, e.g.\nClass AllPredicate<T>; // Predicate implementation that returns true if all the predicates return true.\nClass AndPredicate<T>; // Predicate implementation that returns true if both the predicates return true.\nClass AnyPredicate<T>; // Predicate implementation that returns true if any of the predicates return true.\nClass CatchAndRethrowClosure<E>; // Closure that catches any checked exception and re-throws it as a FunctorException runtime exception.\nClass ChainedClosure<E>; // Closure implementation that chains the specified closures together.\nClass ChainedTransformer<T>; // Transformer implementation that chains the specified transformers together.\nClass CloneTransformer<T>; // Transformer implementation that returns a clone of the input object.\nClass ClosureTransformer<T>; // Transformer implementation that calls a Closure using the input object and then returns the input.\nClass ComparatorPredicate<T>; // Predicate that compares the input object with the one stored in the predicate using a comparator.\nClass ConstantFactory<T>; // Factory implementation that returns the same constant each time.\nClass ConstantTransformer<I,O>; // Transformer implementation that returns the same constant each time.\nClass DefaultEquator<T>; // Default Equator implementation.\nClass EqualPredicate<T>; // Predicate implementation that returns true if the input is the same object as the one stored in this predicate by equals.\nClass ExceptionClosure<E>; // Closure implementation that always throws an exception.\nClass ExceptionFactory<T>; // Factory implementation that always throws an exception.\nClass ExceptionPredicate<T>; // Predicate implementation that always throws an exception.\nClass ExceptionTransformer<I,O>; // Transformer implementation that always throws an exception.\nClass FactoryTransformer<I,O>; // Transformer implementation that calls a Factory and returns the result.\nClass FalsePredicate<T>; // Predicate implementation that always returns false.\nClass ForClosure<E>; // Closure implementation that calls another closure n times, like a for loop.\nClass IdentityPredicate<T>; // Predicate implementation that returns true if the input is the same object as the one stored in this predicate.\n", "des": "This package contains implementations of the Closure, Predicate, Transformer and Factory interfaces."}
{"index": 20, "repo": "commons-collections4-4.4", "code": "package iterators;\n\nClass AbstractEmptyMapIterator<K,V>; // Provides an implementation of an empty map iterator.\nClass AbstractIteratorDecorator<E>; // Provides basic behaviour for decorating an iterator with extra functionality.\nClass AbstractListIteratorDecorator<E>; // Provides basic behaviour for decorating a list iterator with extra functionality.\nClass AbstractMapIteratorDecorator<K,V>; // Provides basic behaviour for decorating a map iterator with extra functionality.\nClass AbstractOrderedMapIteratorDecorator<K,V>; // Provides basic behaviour for decorating an ordered map iterator with extra functionality.\nClass AbstractUntypedIteratorDecorator<I,O>; // Provides basic behaviour for decorating an iterator with extra functionality without committing the generic type of the Iterator implementation.\nClass ArrayIterator<E>; // Implements an Iterator over any array.\nClass ArrayListIterator<E>; // Implements a ListIterator over an array.\nClass BoundedIterator<E>; // Decorates another iterator to return elements in a specific range.\nClass CollatingIterator<E>; // Provides an ordered iteration over the elements contained in a collection of ordered Iterators.\nClass EmptyIterator<E>; // Provides an implementation of an empty iterator.\nClass EmptyListIterator<E>; // Provides an implementation of an empty list iterator.\nClass EmptyMapIterator<K,V>; // Provides an implementation of an empty map iterator.\nClass EmptyOrderedIterator<E>; // Provides an implementation of an empty ordered iterator.\nClass EmptyOrderedMapIterator<K,V>; // Provides an implementation of an empty ordered map iterator.\nClass EntrySetMapIterator<K,V>; // Implements a MapIterator using a Map entrySet.\nClass EnumerationIterator<E>; // Adapter to make Enumeration instances appear to be Iterator instances.\nClass FilterIterator<E>; // Decorates another Iterator using a predicate to filter elements.\nClass FilterListIterator<E>; // Decorates another ListIterator using a predicate to filter elements.\nClass IteratorChain<E>; // An IteratorChain is an Iterator that wraps a number of Iterators.\nClass IteratorEnumeration<E>; // Adapter to make an Iterator instance appear to be an Enumeration instance.\nClass IteratorIterable<E>; // Adapter to make an Iterator instance appear to be an Iterable instance.\n", "des": "This package contains implementations of the Iterator interface."}
{"index": 21, "repo": "commons-collections4-4.4", "code": "package keyvalue;\n\nClass AbstractKeyValue<K,V>; // Abstract pair class to assist with creating KeyValue and Map.Entry implementations.\nClass AbstractMapEntry<K,V>; // Abstract Pair class to assist with creating correct Map.Entry implementations.\nClass AbstractMapEntryDecorator<K,V>; // Provides a base decorator that allows additional functionality to be added to a Map.Entry.\nClass DefaultKeyValue<K,V>; // A mutable KeyValue pair that does not implement Map.Entry.\nClass DefaultMapEntry<K,V>; // A restricted implementation of Map.Entry that prevents the Map.Entry contract from being broken.\nClass MultiKey<K>; // A MultiKey allows multiple map keys to be merged together.\nClass TiedMapEntry<K,V>; // A Map.Entry tied to a map underneath.\nClass UnmodifiableMapEntry<K,V>; // A Map.Entry that throws UnsupportedOperationException when setValue is called.\n", "des": "This package contains implementations of collection and map related key/value classes."}
{"index": 22, "repo": "commons-collections4-4.4", "code": "package list;\n\nClass AbstractLinkedList<E>; // An abstract implementation of a linked list which provides numerous points for subclasses to override.\nClass AbstractLinkedList.LinkedListIterator<E>; // A list iterator over the linked list.\nClass AbstractLinkedList.LinkedSubList<E>; // The sublist implementation for AbstractLinkedList.\nClass AbstractLinkedList.LinkedSubListIterator<E>; // A list iterator over the linked sub list.\nClass AbstractLinkedList.Node<E>; // A node within the linked list.\nClass AbstractListDecorator<E>; // Decorates another List to provide additional behaviour.\nClass AbstractSerializableListDecorator<E>; // Serializable subclass of AbstractListDecorator.\nClass CursorableLinkedList<E>; // A List implementation with a ListIterator that allows concurrent modifications to the underlying list.\nClass CursorableLinkedList.Cursor<E>; // An extended ListIterator that allows concurrent changes to the underlying list.\nClass CursorableLinkedList.SubCursor<E>; // A cursor for the sublist based on LinkedSubListIterator.\nClass FixedSizeList<E>; // Decorates another List to fix the size preventing add/remove.\nClass GrowthList<E>; // Decorates another List to make it seamlessly grow when indices larger than the list size are used on add and set, avoiding most IndexOutOfBoundsExceptions.\nClass LazyList<E>; // Decorates another List to create objects in the list on demand.\nClass NodeCachingLinkedList<E>; // A List implementation that stores a cache of internal Node objects in an effort to reduce wasteful object creation.\nClass PredicatedList<E>; // Decorates another List to validate that all additions match a specified predicate.\nClass SetUniqueList<E>; // Decorates a List to ensure that no duplicates are present much like a Set.\nClass TransformedList<E>; // Decorates another List to transform objects that are added.\nClass TreeList<E>; // A List implementation that is optimised for fast insertions and removals at any index in the list.\nClass UnmodifiableList<E>; // Decorates another List to ensure it can't be altered.\n", "des": "This package contains implementations of the List interface."}
{"index": 23, "repo": "commons-collections4-4.4", "code": "package map;\n\nInterface CompositeMap.MapMutator<K,V>; // This interface allows definition for all of the indeterminate mutators in a CompositeMap, as well as providing a hook for callbacks on key collisions.\nInterface PassiveExpiringMap.ExpirationPolicy<K,V>; // A policy to determine the expiration time for key-value entries.\nClass AbstractHashedMap<K,V>; // An abstract implementation of a hash-based map which provides numerous points for subclasses to override.\nClass AbstractHashedMap.EntrySet<K,V>; // EntrySet implementation.\nClass AbstractHashedMap.EntrySetIterator<K,V>; // EntrySet iterator.\nClass AbstractHashedMap.HashEntry<K,V>; // HashEntry used to store the data.\nClass AbstractHashedMap.HashIterator<K,V>; // Base Iterator\nClass AbstractHashedMap.HashMapIterator<K,V>; // MapIterator implementation.\nClass AbstractHashedMap.KeySet<K>; // KeySet implementation.\nClass AbstractHashedMap.KeySetIterator<K>; // KeySet iterator.\nClass AbstractHashedMap.Values<V>; // Values implementation.\nClass AbstractHashedMap.ValuesIterator<V>; // Values iterator.\nClass AbstractIterableMap<K,V>; // Provide a basic IterableMap implementation.\nClass AbstractLinkedMap<K,V>; // An abstract implementation of a hash-based map that links entries to create an ordered map and which provides numerous points for subclasses to override.\nClass AbstractLinkedMap.EntrySetIterator<K,V>; // EntrySet iterator.\nClass AbstractLinkedMap.KeySetIterator<K>; // KeySet iterator.\nClass AbstractLinkedMap.LinkEntry<K,V>; // LinkEntry that stores the data.\nClass AbstractLinkedMap.LinkIterator<K,V>; // Base Iterator that iterates in link order.\nClass AbstractLinkedMap.LinkMapIterator<K,V>; // MapIterator implementation.\nClass AbstractLinkedMap.ValuesIterator<V>; // Values iterator.\nClass AbstractMapDecorator<K,V>; // Provides a base decorator that enables additional functionality to be added to a Map via decoration.\n", "des": "This package contains implementations of the Map, IterableMap, OrderedMap and SortedMap interfaces."}
{"index": 24, "repo": "commons-collections4-4.4", "code": "package multimap;\n\nClass AbstractListValuedMap<K,V>; // Abstract implementation of the ListValuedMap interface to simplify the creation of subclass implementations.\nClass AbstractMultiValuedMap<K,V>; // Abstract implementation of the MultiValuedMap interface to simplify the creation of subclass implementations.\nClass AbstractMultiValuedMapDecorator<K,V>; // Decorates another MultiValuedMap to provide additional behaviour.\nClass AbstractSetValuedMap<K,V>; // Abstract implementation of the SetValuedMap interface to simplify the creation of subclass implementations.\nClass ArrayListValuedHashMap<K,V>; // Implements a ListValuedMap, using a HashMap to provide data storage and ArrayLists as value collections.\nClass HashSetValuedHashMap<K,V>; // Implements a SetValuedMap, using a HashMap to provide data storage and HashSets as value collections.\nClass TransformedMultiValuedMap<K,V>; // Decorates another MultiValuedMap to transform objects that are added.\nClass UnmodifiableMultiValuedMap<K,V>; // Decorates another MultiValuedMap to ensure it can't be altered.\n", "des": "This package contains implementations of the MultiValuedMap interfaces."}
{"index": 25, "repo": "commons-collections4-4.4", "code": "package multiset;\n\nClass AbstractMapMultiSet<E>; // Abstract implementation of the MultiSet interface to simplify the creation of subclass implementations.\nClass AbstractMapMultiSet.EntrySetIterator<E>; // Inner class EntrySetIterator.\nClass AbstractMapMultiSet.MultiSetEntry<E>; // Inner class MultiSetEntry.\nClass AbstractMapMultiSet.MutableInteger; // Mutable integer class for storing the data.\nClass AbstractMapMultiSet.UniqueSetIterator<E>; // Inner class UniqueSetIterator.\nClass AbstractMultiSet<E>; // Abstract implementation of the MultiSet interface to simplify the creation of subclass implementations.\nClass AbstractMultiSet.AbstractEntry<E>; // Inner class AbstractEntry.\nClass AbstractMultiSet.EntrySet<E>; // Inner class EntrySet.\nClass AbstractMultiSet.UniqueSet<E>; // Inner class UniqueSet.\nClass AbstractMultiSetDecorator<E>; // Decorates another MultSet to provide additional behaviour.\nClass HashMultiSet<E>; // Implements MultiSet, using a HashMap to provide the data storage.\nClass PredicatedMultiSet<E>; // Decorates another MultiSet to validate that additions match a specified predicate.\nClass SynchronizedMultiSet<E>; // Decorates another MultiSet to synchronize its behaviour for a multi-threaded environment.\nClass UnmodifiableMultiSet<E>; // Decorates another MultiSet to ensure it can't be altered.\n", "des": "This package contains implementations of the MultiSet interface."}
{"index": 26, "repo": "commons-collections4-4.4", "code": "package properties;\n\nClass AbstractPropertiesFactory<T extends Properties>; // Subclasses create and load Properties and subclasses of Properties like SortedProperties.\nClass PropertiesFactory; // Creates and loads Properties.\nClass SortedProperties; // A drop-in replacement for Properties for sorting keys.\nClass SortedPropertiesFactory; // Creates and loads SortedProperties.\n", "des": "This package contains classes to extend or customize the behavior of Properties."}
{"index": 27, "repo": "commons-collections4-4.4", "code": "package queue;\n\nClass AbstractQueueDecorator<E>; // Decorates another Queue to provide additional behaviour.\nClass CircularFifoQueue<E>; // CircularFifoQueue is a first-in first-out queue with a fixed size that replaces its oldest element if full.\nClass PredicatedQueue<E>; // Decorates another Queue to validate that additions match a specified predicate.\nClass SynchronizedQueue<E>; // Decorates another Queue to synchronize its behaviour for a multi-threaded environment.\nClass TransformedQueue<E>; // Decorates another Queue to transform objects that are added.\nClass UnmodifiableQueue<E>; // Decorates another Queue to ensure it can't be altered.\n", "des": "This package contains implementations for the Queue interface."}
{"index": 28, "repo": "commons-collections4-4.4", "code": "package sequence;\n\nInterface CommandVisitor<T>; // This interface should be implemented by user object to walk through EditScript objects.\nInterface ReplacementsHandler<T>; // This interface is devoted to handle synchronized replacement sequences.\nClass DeleteCommand<T>; // Command representing the deletion of one object of the first sequence.\nClass EditCommand<T>; // Abstract base class for all commands used to transform an objects sequence into another one.\nClass EditScript<T>; // This class gathers all the commands needed to transform one objects sequence into another objects sequence.\nClass InsertCommand<T>; // Command representing the insertion of one object of the second sequence.\nClass KeepCommand<T>; // Command representing the keeping of one object present in both sequences.\nClass ReplacementsFinder<T>; // This class handles sequences of replacements resulting from a comparison.\nClass SequencesComparator<T>; // This class allows to compare two objects sequences.\n", "des": "This package provides classes to compare two sequences of objects."}
{"index": 29, "repo": "commons-collections4-4.4", "code": "package set;\n\nInterface CompositeSet.SetMutator<E>; // Define callbacks for mutation operations.\nClass AbstractNavigableSetDecorator<E>; // Decorates another NavigableSet to provide additional behaviour.\nClass AbstractSerializableSetDecorator<E>; // Serializable subclass of AbstractSetDecorator.\nClass AbstractSetDecorator<E>; // Decorates another Set to provide additional behaviour.\nClass AbstractSortedSetDecorator<E>; // Decorates another SortedSet to provide additional behaviour.\nClass CompositeSet<E>; // Decorates a set of other sets to provide a single unified view.\nClass ListOrderedSet<E>; // Decorates another Set to ensure that the order of addition is retained and used by the iterator.\nClass MapBackedSet<E,V>; // Decorates a Map to obtain Set behaviour.\nClass PredicatedNavigableSet<E>; // Decorates another NavigableSet to validate that all additions match a specified predicate.\nClass PredicatedSet<E>; // Decorates another Set to validate that all additions match a specified predicate.\nClass PredicatedSortedSet<E>; // Decorates another SortedSet to validate that all additions match a specified predicate.\nClass TransformedNavigableSet<E>; // Decorates another NavigableSet to transform objects that are added.\nClass TransformedSet<E>; // Decorates another Set to transform objects that are added.\nClass TransformedSortedSet<E>; // Decorates another SortedSet to transform objects that are added.\nClass UnmodifiableNavigableSet<E>; // Decorates another NavigableSet to ensure it can't be altered.\nClass UnmodifiableSet<E>; // Decorates another Set to ensure it can't be altered.\nClass UnmodifiableSortedSet<E>; // Decorates another SortedSet to ensure it can't be altered.\n", "des": "This package contains implementations of the Set, SortedSet and NavigableSet interfaces."}
{"index": 30, "repo": "commons-collections4-4.4", "code": "package splitmap;\n\nClass AbstractIterableGetMapDecorator<K,V>; // IterableGet that uses a Map<K, V> for the Get<K, V> implementation.\nClass TransformedSplitMap<J,K,U,V>; // Decorates another Map to transform objects that are added.\n", "des": "The \"split map\" concept is that of an object that implements the Put and Get interfaces, with differing generic types."}
{"index": 31, "repo": "commons-collections4-4.4", "code": "package trie;\n\npackage trie.analyzer; // This package contains various KeyAnalyzer implementations.\nClass AbstractBitwiseTrie<K,V>; // This class provides some basic Trie functionality and utility methods for actual bitwise Trie implementations.\nClass KeyAnalyzer<K>; // Defines the interface to analyze Trie keys on a bit level.\nClass PatriciaTrie<E>; // Implementation of a PATRICIA Trie (Practical Algorithm to Retrieve Information Coded in Alphanumeric).\nClass UnmodifiableTrie<K,V>; // An unmodifiable Trie.\n", "des": "This package contains implementations of the Trie interface."}
{"index": 32, "repo": "commons-collections4-4.4", "code": "package analyzer;\n\nClass StringKeyAnalyzer; // An KeyAnalyzer for Strings.\n", "des": "This package contains various KeyAnalyzer implementations."}
{"index": 33, "repo": "phoenix-core-5.1.3", "code": "package i18n;\n\nClass OracleUpper; // This utility class was partially copied from Salesforce's internationalization utility library (com.salesforce.i18n:i18n-util:1.0.4), which was released under the 3-clause BSD License.\nEnum LinguisticSort; // This utility class was partially copied from Salesforce's internationalization utility library (com.salesforce.i18n:i18n-util:1.0.4), which was released under the 3-clause BSD License.\nEnum LocaleUtils; // This utility class was partially copied from Salesforce's internationalization utility library (com.salesforce.i18n:i18n-util:1.0.4), which was released under the 3-clause BSD License.\nEnum OracleUpperTable; // This utility class was partially copied from Salesforce's internationalization utility library (com.salesforce.i18n:i18n-util:1.0.4), which was released under the 3-clause BSD License.\n", "des": "This package contains utility classes partially copied from Salesforce's internationalization utility library (com.salesforce.i18n:i18n-util:1.0.4), which was released under the 3-clause BSD License."}
{"index": 34, "repo": "ignite-core-2.15.0", "code": "package ignite;\n\npackage ignite.cluster; // Contains cluster-related classes.\npackage ignite.configuration; // Contains configuration-related classes.\npackage ignite.lang; // Contains general language constructs and functional APIs for distributed computations.\npackage ignite.lifecycle; // Contains lifecycle-related classes.\npackage ignite.resources; // Contains resource injection annotations.\npackage ignite.scheduler; // Contains Job Scheduling functionality.\npackage ignite.spi; // Contains common classes and interfaces for SPI implementations.\npackage ignite.thread; // Contains threads-related utility classes.\npackage ignite.messaging; // Contains Topic-based Messaging functionality.\npackage ignite.events; // Contains Event Subscription functionality together with various events emitted by Ignite.\npackage ignite.compute; // Contains Compute Grid functionality.\npackage ignite.cache; // Contains main Data Grid APIs.\npackage ignite.transactions; // Contains transaction-related classes.\npackage ignite.services; // Contains main Managed Services APIs.\npackage ignite.client; // Contains Ignite Thin Client API classes.\npackage ignite.stream; // Contains Ignite Streamer classes.\npackage ignite.ssl; // Contains classes for working with SSL.\npackage ignite.maintenance; // Contains public interfaces for maintenance mechanism.\npackage ignite.mxbean; // Contains annotations for Dynamic MBeans.\npackage ignite.failure; // Contains Failure handling public API with standard FailureHandler implementations.\npackage ignite.plugin; // Contains plugins management API.\npackage ignite.logger; // Contains logging functionality used throughout the system.\npackage ignite.startup; // Contains Ignite runtime startup classes.\npackage ignite.marshaller; // Contains various supported marshallers.\npackage ignite.binary; // Contains Ignite Binary Objects API classes.\npackage ignite.platform; // Contains platform-related classes.\npackage ignite.internal; // Contains main implementation.\nInterface DataRegionMetrics; // Check the ReadOnlyMetricRegistry with \"name=io.dataregion.\nInterface DataRegionMetricsProvider; // This interface provides calculated metrics for data region.\nInterface Ignite; // Main entry-point for all Ignite APIs.\nInterface IgniteAtomicLong; // This interface provides a rich API for working with distributedly cached atomic long value.\n", "des": "Contains entry-point Ignite & HPC APIs."}
{"index": 35, "repo": "ignite-core-2.15.0", "code": "package cluster;\n\nInterface BaselineNode; // Interface representing a single node from baseline topology.\nInterface ClusterGroup; // Defines a cluster group which contains all or a subset of cluster nodes.\nInterface ClusterMetrics; // This class represents runtime information on a cluster.\nInterface ClusterNode; // Interface representing a single cluster node.\nInterface ClusterStartNodeResult; // Cluster start node result information.\nEnum ClusterState; // Cluster states.\nClass ClusterGroupEmptyException; // This exception defines illegal call on empty cluster group.\nClass ClusterTopologyException; // This exception is used to indicate error with the cluster topology (e.g., crashed node, etc.).\n", "des": "Contains cluster-related classes."}
{"index": 36, "repo": "ignite-core-2.15.0", "code": "package configuration;\n\nInterface AddressResolver; // Provides resolution between external and internal addresses.\nInterface CommunicationFailureContext; // Communication Failure Context.\nInterface CommunicationFailureResolver; // Communication Failure Resolver.\nInterface ConnectorMessageInterceptor; // Interface for user-defined object interceptors.\nInterface PlatformConfiguration; // Platform configuration marker interface.\nInterface QueryEngineConfiguration; // Interface for the configuration of the query engine.\nInterface TopologyValidator; // Topology validator is used to verify that cluster topology is valid for further cache operations.\nInterface WarmUpConfiguration; // Warm-up configuration marker interface.\nClass AtomicConfiguration; // Configuration for atomic data structures.\nClass BasicAddressResolver; // Basic implementation of AddressResolver.\nClass BinaryConfiguration; // Configuration object for Ignite Binary Objects.\nClass CacheConfiguration<K,V>; // This class defines grid cache configuration.\nClass CacheConfiguration.IgniteAllNodesPredicate; // Filter that accepts all nodes.\nClass ClientConfiguration; // TcpIgniteClient configuration.\nClass ClientConnectorConfiguration; // Client connector configuration.\nClass ClientTransactionConfiguration; // Thin client transactions configuration.\nClass CollectionConfiguration; // Configuration for Ignite collections.\nClass ConnectorConfiguration; // REST access configuration.\nClass DataRegionConfiguration; // This class allows defining custom data regions' configurations with various parameters for Apache Ignite page memory (see DataStorageConfiguration.\nClass DataStorageConfiguration; // A durable memory configuration for an Apache Ignite node.\nClass DefaultCommunicationFailureResolver; // Default Communication Failure Resolver.\nClass EncryptionConfiguration; // Encryption configuration.\nClass ExecutorConfiguration; // Custom thread pool configuration for compute tasks.\nClass IgniteConfiguration; // This class defines grid runtime configuration.\nClass IgniteReflectionFactory<T>; // Factory implementation that use reflection to create instance of given class.\nClass LoadAllWarmUpConfiguration; // \"Load All\" warm-up configuration that loads data into persistent data region until it reaches DataRegionConfiguration.getMaxSize() with index priority.\nClass MemoryConfiguration; // Use DataStorageConfiguration instead.\nClass MemoryPolicyConfiguration; // Use DataRegionConfiguration instead.\nClass NearCacheConfiguration<K,V>; // Client (near) cache configuration.\nClass NoOpWarmUpConfiguration; // Noop warm-up configuration.\nClass OdbcConfiguration;\nClass PersistentStoreConfiguration; // Use DataStorageConfiguration instead.\n", "des": "Contains configuration-related classes."}
{"index": 37, "repo": "ignite-core-2.15.0", "code": "package lang;\n\nInterface IgniteAsyncSupport; // since 2.0.\nInterface IgniteBiClosure<E1,E2,R>; // Defines generic closure with two parameters.\nInterface IgniteBiInClosure<E1,E2>; // Closure with two in-parameters and void return type.\nInterface IgniteBiPredicate<E1,E2>; // Defines a predicate which accepts two parameters and returns true or false.\nInterface IgniteCallable<V>; // Grid-aware adapter for Callable implementations.\nInterface IgniteClosure<E,R>; // Defines generic closure with one parameter.\nInterface IgniteFuture<V>; // Future with simplified exception handling, functional programming support and ability to listen for future completion via functional callback.\nInterface IgniteInClosure<E>; // Closure with one in-parameter and void return type.\nInterface IgniteOutClosure<T>; // Closure that does not take any parameters and returns a value.\nInterface IgnitePredicate<E>; // Defines a predicate which accepts a parameter and returns true or false.\nInterface IgniteProducer<T>; // Defines a producer which can throw IgniteCheckedException.\nInterface IgniteReducer<E,R>; // Defines generic reducer that collects multiple values and reduces them into one.\nInterface IgniteRunnable; // Grid-aware adapter for Runnable implementations.\nClass IgniteBiTuple<V1,V2>; // Convenience class representing mutable tuple of two values.\nClass IgniteProductVersion; // Represents node version.\nClass IgniteUuid; // This is a faster performing version of UUID.\nClass IgniteFutureCancelledException; // Future computation cannot be retrieved because it was cancelled.\nClass IgniteFutureTimeoutException; // Future computation completion is timed out.\nAnnotation Type IgniteAsyncCallback; // If callback has this annotation then it will be executing in another thread.\nAnnotation Type IgniteAsyncSupported; // since 2.0.\nAnnotation Type IgniteExperimental; // This annotation marks API elements (such as interfaces, methods, annotations and whole API packages) as experimental meaning that the API is not finalized yet and may be changed or replaced in future Ignite releases.\n", "des": "Contains general language constructs and functional APIs for distributed computations."}
{"index": 38, "repo": "ignite-core-2.15.0", "code": "package lifecycle;\n\nInterface LifecycleAware; // All components provided in Ignite configuration can implement this interface.\nInterface LifecycleBean; // A bean that reacts to node lifecycle events defined in LifecycleEventType.\nEnum LifecycleEventType; // Node lifecycle event types.\n", "des": "Contains lifecycle-related classes."}
{"index": 39, "repo": "ignite-core-2.15.0", "code": "package resources;\n\nClass SpringResource.DEFAULT; // Dummy class to compensate for impossibility of having default null value for annotation method.\nAnnotation Type CacheNameResource; // Annotates a field or a setter method for injection of grid cache name.\nAnnotation Type CacheStoreSessionResource; // Annotates a field or a setter method for injection of current CacheStoreSession instance.\nAnnotation Type IgniteInstanceResource; // Annotates a field or a setter method for injection of current Ignite instance.\nAnnotation Type JobContextResource; // Annotates a field or a setter method for injection of ComputeJobContext instance.\nAnnotation Type LoadBalancerResource; // Annotates a field or a setter method for injection of ComputeLoadBalancer.\nAnnotation Type LoggerResource; // Annotates a field or a setter method for injection of IgniteLogger.\nAnnotation Type ServiceContextResource; // Annotates a field or a setter method for injecting a service context into a service instance.\nAnnotation Type ServiceResource; // Annotates a field or a setter method for injection of Ignite service(s) by specified service name.\nAnnotation Type SpringApplicationContextResource; // Annotates a field or a setter method for injection of Spring ApplicationContext resource.\nAnnotation Type SpringResource; // Annotates a field or a setter method for injection of resource from Spring ApplicationContext.\nAnnotation Type TaskContinuousMapperResource; // Annotates a field or a setter method for injection of ComputeTaskContinuousMapper resource.\nAnnotation Type TaskSessionResource; // Annotates a field or a setter method for injection of ComputeTaskSession resource.\n", "des": "Contains resource injection annotations."}
{"index": 40, "repo": "ignite-core-2.15.0", "code": "package scheduler;\n\nInterface SchedulerFuture<R>; // Future for cron-based scheduled execution.\n", "des": "Contains Job Scheduling functionality."}
{"index": 41, "repo": "ignite-core-2.15.0", "code": "package spi;\n\npackage spi.checkpoint; // Contains APIs for checkpoint SPI.\npackage spi.collision; // Contains APIs for collision SPI.\npackage spi.indexing; // Contains APIs for indexing SPI.\npackage spi.loadbalancing; // Contains APIs for load balancing SPI.\npackage spi.communication; // Contains APIs for grid communication SPI.\npackage spi.deployment; // Contains APIs for deployment SPI.\npackage spi.discovery; // Contains APIs for topology manager SPI.\npackage spi.failover; // Contains APIs for failover SPI.\npackage spi.eventstorage; // Contains APIs for event storage SPI.\npackage spi.encryption; // Contains APIs for encryption SPI.\npackage spi.metric; // Contains common classes and interfaces for metric SPI implementations.\npackage spi.systemview; // Contains common classes and interfaces for system view SPI implementations.\npackage spi.tracing; // Contains common classes and interfaces for tracing SPI implementations.\nInterface IgniteSpi; // This interface defines life-cycle of SPI implementation.\nInterface IgniteSpiCloseableIterator<T>; // Closeable iterator.\nInterface IgniteSpiContext; // SPI context provides common functionality for all SPI implementations.\nInterface IgniteSpiManagementMBean; // This interface defines basic MBean for all SPI implementations.\nInterface IgniteSpiTimeoutObject; // Provides possibility to schedule delayed execution, see IgniteSpiContext.addTimeoutObject(IgniteSpiTimeoutObject).\nInterface TimeoutStrategy; // Strategy to calculate next timeout and check if total timeout reached.\nClass ExponentialBackoffTimeoutStrategy; // Strategy which incorporates retriable network operation, handling of totalTimeout logic.\nClass IgniteNodeValidationResult; // Result of joining node validation.\nClass IgniteSpiAdapter; // This class provides convenient adapter for SPI implementations.\nClass IgniteSpiMBeanAdapter; // This class provides convenient adapter for MBean implementations.\nClass IgniteSpiOperationTimeoutHelper; // Object that incorporates logic that determines a timeout value for the next network related operation and checks whether a failure detection timeout is reached or not.\nClass IgniteSpiThread; // This class provides convenient adapter for threads used by SPIs.\nClass IgniteSpiThreadFactory; // This class provides implementation of ThreadFactory factory for creating grid SPI threads.\nEnum IgnitePortProtocol; // Protocols supported by port processor.\n", "des": "Contains common classes and interfaces for SPI implementations."}
{"index": 42, "repo": "ignite-core-2.15.0", "code": "package thread;\n\nClass IgniteStripedThreadPoolExecutor; // An ExecutorService that executes submitted tasks using pooled grid threads.\nClass IgniteThread; // This class adds some necessary plumbing on top of the Thread class.\nClass IgniteThreadFactory; // This class provides implementation of ThreadFactory factory for creating grid threads.\nClass IgniteThreadPoolExecutor; // An ExecutorService that executes submitted tasks using pooled grid threads.\nClass OomExceptionHandler; // OOM exception handler for system threads.\nClass SameThreadExecutor;\n", "des": "Contains threads-related utility classes."}
{"index": 43, "repo": "ignite-core-2.15.0", "code": "package messaging;\n\nClass MessagingListenActor<T>; // Convenience actor-base adapter for IgniteMessaging.localListen(Object, IgniteBiPredicate) method.\n", "des": "Contains Topic-based Messaging functionality."}
{"index": 44, "repo": "ignite-core-2.15.0", "code": "package events;\n\nInterface CacheConsistencyViolationEvent.EntriesInfo; // Inconsistent entries mapping.\nInterface CacheConsistencyViolationEvent.EntryInfo; // Inconsistent entry info.\nInterface Event; // Grid events are used for notification about what happens within the grid.\nInterface EventType; // Contains event type constants.\nClass BaselineChangedEvent; // Baseline changed event.\nClass BaselineConfigurationChangedEvent; // Baseline configuration changed event.\nClass CacheConsistencyViolationEvent; // This is an experimental API.\nClass CacheEvent; // In-memory database (cache) event.\nClass CacheObjectTransformedEvent;\nClass CacheQueryExecutedEvent<K,V>; // Cache query execution event.\nClass CacheQueryReadEvent<K,V>; // Cache query read event.\nClass CacheRebalancingEvent; // In-memory database (cache) rebalancing event.\nClass CheckpointEvent; // Grid checkpoint event.\nClass ClusterActivationEvent; // Use ClusterStateChangeEvent instead.\nClass ClusterStateChangeEvent; // Cluster state change event.\nClass ClusterStateChangeStartedEvent; // Cluster state change started event.\nClass ClusterTagUpdatedEvent; // Event type indicating that cluster tag has been updated.\nClass DeploymentEvent; // Grid deployment event.\nClass DiscoveryEvent; // Grid discovery event.\nClass EventAdapter; // Base adapter for the events.\nClass JobEvent; // Grid job event.\nClass NodeValidationFailedEvent; // This event is triggered if any of GridComponents fail to validate the joining node while join message processing.\nClass PageReplacementStartedEvent; // Event type indicating that page replacement started in one of the configured data regions.\nClass SnapshotEvent; // Event indicating the cluster snapshot operation result state with the given name.\nClass SqlQueryExecutionEvent; // Query execution event.\nClass TaskEvent; // Grid task event.\nClass TransactionStateChangedEvent; // Event indicates transaction state change.\nClass WalSegmentArchivedEvent; // Event indicates the completion of WAL segment file transition to archive.\nClass WalSegmentCompactedEvent; // Event indicates the completion of WAL segment compaction.\n", "des": "Contains Event Subscription functionality together with various events emitted by Ignite."}
{"index": 45, "repo": "ignite-core-2.15.0", "code": "package compute;\n\nInterface ComputeJob; // Defines executable unit for ComputeTask.\nInterface ComputeJobContext; // Context attached to every job executed on the grid.\nInterface ComputeJobContinuation; // Defines continuation support for grid job context.\nInterface ComputeJobMasterLeaveAware; // Annotation for handling master node leave during job execution.\nInterface ComputeJobResult; // Result of remote job which gets passed into ComputeTask.result(ComputeJobResult, List) method.\nInterface ComputeJobSibling; // Job sibling interface defines a job from the same split.\nInterface ComputeLoadBalancer; // Load balancer is used for finding the best balanced node according to load balancing policy.\nInterface ComputeTask<T,R>; // Grid task interface defines a task that can be executed on the grid.\nInterface ComputeTaskContinuousMapper; // Defines a mapper that can be used for asynchronous job sending.\nInterface ComputeTaskFuture<R>; // This class defines a handler for asynchronous task execution.\nInterface ComputeTaskSession; // Defines a distributed session for particular task execution.\nInterface ComputeTaskSessionAttributeListener; // This interface defines listener for task session attributes.\nClass ComputeJobAdapter; // Convenience adapter for ComputeJob implementations.\nClass ComputeJobContinuationAdapter; // Convenience adapter for ComputeJob implementations.\nClass ComputeTaskAdapter<T,R>; // Convenience adapter for ComputeTask interface.\nClass ComputeTaskSplitAdapter<T,R>; // This class defines simplified adapter for ComputeTask.\nEnum ComputeJobResultPolicy; // This enumeration provides different types of actions following the last received job result.\nEnum ComputeTaskSessionScope; // Defines life-time scopes for checkpoint operations.\nClass ComputeExecutionRejectedException; // This exception defines execution rejection.\nClass ComputeJobFailoverException; // This runtime exception can be thrown from ComputeJob.execute() method to force job failover to another node within task topology.\nClass ComputeTaskCancelledException; // This exception indicates that grid task was cancelled.\nClass ComputeTaskTimeoutException; // This exception indicates that task execution timed out.\nClass ComputeUserUndeclaredException; // This exception is thrown when user's code throws undeclared runtime exception.\nAnnotation Type ComputeJobAfterSend; // This annotation allows to call a method right after the job has been successfully sent for execution.\n", "des": "Contains Compute Grid functionality."}
{"index": 46, "repo": "ignite-core-2.15.0", "code": "package cache;\n\npackage cache.affinity; // Contains cache node affinity implementations.\npackage cache.eviction; // Contains cache eviction policy implementations.\npackage cache.query; // Contains APIs for creating and executing cache queries.\npackage cache.store; // Contains cache store interfaces.\nInterface CacheEntry<K,V>; // Cache entry that extends Cache.Entry by providing additional entry related information.\nInterface CacheEntryEventSerializableFilter<K,V>; // This filter adds Serializable interface to CacheEntryEventFilter object.\nInterface CacheEntryProcessor<K,V,T>; // This processor adds Serializable interface to EntryProcessor object.\nInterface CacheEntryVersion; // Entry event order.\nInterface CacheInterceptor<K,V>; // Cache interceptor.\nInterface CacheMetrics; // Cache metrics used to obtain statistics on cache itself.\nClass CacheInterceptorAdapter<K,V>; // Cache interceptor convenience adapter.\nClass CacheInterceptorEntry<K,V>; // A cache interceptor map entry.\nClass CacheKeyConfiguration; // Configuration defining various aspects of cache keys without explicit usage of annotations on user classes.\nClass CacheManager; // Implementation of JSR-107 CacheManager.\nClass CachingProvider; // Implementation of JSR-107 CachingProvider.\nClass QueryEntity; // Query entity is a description of cache entry (composed of key and value) in a way of how it must be indexed and can be queried.\nClass QueryEntityPatch; // Query entity patch which contain SchemaAbstractOperation operations for changing query entity.\nClass QueryIndex; // Contains list of fields to be indexed.\nEnum CacheAtomicityMode; // Cache atomicity mode controls whether cache should maintain fully transactional semantics or more light-weight atomic behavior.\nEnum CacheMode; // Enumeration of all supported caching modes.\nEnum CachePeekMode; // Enumeration of all supported cache peek modes.\nEnum CacheRebalanceMode; // Cache rebalance mode.\nEnum CacheWriteSynchronizationMode; // Mode indicating how Ignite should wait for write replies from other nodes.\nEnum PartitionLossPolicy; // Partition loss policy.\nEnum QueryIndexType; // Index type.\nEnum ReadRepairStrategy; // Read repair strategies.\nClass CacheExistsException; // Exception thrown when cache must be created but it already exists.\nClass CachePartialUpdateException; // Exception thrown from non-transactional cache in case when update succeeded only partially.\n", "des": "Contains main Data Grid APIs."}
{"index": 47, "repo": "ignite-core-2.15.0", "code": "package affinity;\n\npackage affinity.rendezvous; // Contains HRW-based cache affinity for partitioned cache.\nInterface Affinity<K>; // Provides affinity information to detect which node is primary and which nodes are backups for a partitioned or replicated cache.\nInterface AffinityFunction; // Cache key affinity which maps keys to nodes.\nInterface AffinityFunctionContext; // Affinity function context.\nInterface AffinityKeyMapper; // Use AffinityKeyMapped or CacheKeyConfiguration.setAffinityKeyFieldName(String) instead.\nClass AffinityKey<K>; // Optional wrapper for cache keys to provide support for custom affinity mapping.\nClass AffinityUuid; // Guaranteed unique affinity-based key.\nAnnotation Type AffinityCentralizedFunction; // Annotation marker which identifies affinity function that must be calculated on one centralized node instead of independently on each node.\nAnnotation Type AffinityKeyMapped; // Optional annotation to specify custom key-to-node affinity.\n", "des": "Contains cache node affinity implementations."}
{"index": 48, "repo": "ignite-core-2.15.0", "code": "package rendezvous;\n\nClass ClusterNodeAttributeAffinityBackupFilter; // Attribute-based affinity backup filter that forces each partition's primary and backup nodes to different hardware which is not expected to fail simultaneously, e.g., in AWS, to different \"availability zones\".\nClass ClusterNodeAttributeColocatedBackupFilter; // This class can be used as a RendezvousAffinityFunction.affinityBackupFilter to create cache templates in Spring that force each partition's primary and backup to be co-located on nodes with the same attribute value.\nClass RendezvousAffinityFunction; // Affinity function for partitioned cache based on Highest Random Weight algorithm.\n", "des": "Contains HRW-based cache affinity for partitioned cache."}
{"index": 49, "repo": "ignite-core-2.15.0", "code": "package eviction;\n\npackage eviction.fifo; // Contains cache FIFO eviction policy implementations.\npackage eviction.lru; // Contains cache LRU eviction policy implementations.\npackage eviction.sorted; // Contains cache sorted eviction policy implementation.\nInterface EvictableEntry<K,V>; // Evictable cache entry passed into EvictionPolicy.\nInterface EvictionFilter<K,V>; // Eviction filter to specify which entries should not be evicted.\nInterface EvictionPolicy<K,V>; // Pluggable cache eviction policy.\nClass AbstractEvictionPolicy<K,V>; // Common functionality implementation for eviction policies with max size/max memory and batch eviction support.\nClass AbstractEvictionPolicyFactory<T>; // Common functionality implementation for eviction policies factories.\n", "des": "Contains cache eviction policy implementations."}
{"index": 50, "repo": "ignite-core-2.15.0", "code": "package fifo;\n\nInterface FifoEvictionPolicyMBean; // MBean for FIFO eviction policy.\nClass FifoEvictionPolicy<K,V>; // Eviction policy based on First In First Out (FIFO) algorithm and supports batch eviction.\nClass FifoEvictionPolicyFactory<K,V>; // Factory class for FifoEvictionPolicy.\n", "des": "Contains cache FIFO eviction policy implementations."}
{"index": 51, "repo": "ignite-core-2.15.0", "code": "package lru;\n\nInterface LruEvictionPolicyMBean; // MBean for LRU eviction policy.\nClass LruEvictionPolicy<K,V>; // Eviction policy based on Least Recently Used (LRU) algorithm and supports batch eviction.\nClass LruEvictionPolicyFactory<K,V>; // Factory class for LruEvictionPolicy.\n", "des": "Contains cache LRU eviction policy implementations."}
{"index": 52, "repo": "ignite-core-2.15.0", "code": "package sorted;\n\nInterface SortedEvictionPolicyMBean; // MBean for sorted eviction policy.\nClass SortedEvictionPolicy<K,V>; // Cache eviction policy which will select the minimum cache entry for eviction.\nClass SortedEvictionPolicyFactory<K,V>; // Factory class for SortedEvictionPolicy.\n", "des": "Contains cache sorted eviction policy implementation."}
{"index": 53, "repo": "ignite-core-2.15.0", "code": "package query;\n\npackage query.annotations; // Contains query-related annotations.\nInterface ContinuousQueryWithTransformer.EventListener<T>; // Interface for local listener of ContinuousQueryWithTransformer to implement.\nInterface FieldsQueryCursor<T>; // SQL query result cursor.\nInterface IndexQueryCriterion; // Basic interface for IndexQuery criterion.\nInterface QueryCursor<T>; // Query result cursor.\nInterface QueryDetailMetrics; // Query metrics aggregated by query type and its textual representation.\nInterface QueryMetrics; // Cache query metrics used to obtain statistics on query.\nClass AbstractContinuousQuery<K,V>; // Base class for continuous query.\nClass BulkLoadContextCursor; // A special FieldsQueryCursor subclass that is used as a sentinel to transfer data from bulk load (COPY) command to the JDBC or other client-facing driver: the bulk load batch processor and parameters to send to the client.\nClass CacheQueryEntryEvent<K,V>; // A Cache continuous query entry event.\nClass ContinuousQuery<K,V>; // API for configuring continuous cache queries.\nClass ContinuousQueryWithTransformer<K,V,T>; // API for configuring continuous cache queries with transformer.\nClass IndexQuery<K,V>; // Index queries work over distributed indexes and retrieve cache entries that match the specified criteria.\nClass IndexQueryCriteriaBuilder; // Factory of IndexQueryCriterion for IndexQuery.\nClass Query<R>; // Main API for configuring and executing cache queries.\nClass ScanQuery<K,V>; // Scan query over cache entries.\nClass SpiQuery<K,V>; // Query to be used by IndexingSpi implementations.\nClass SqlFieldsQuery; // SQL Fields query.\nClass SqlQuery<K,V>; // Since 2.8, please use SqlFieldsQuery instead.\nClass TextQuery<K,V>; // Full Text Queries Ignite supports full text queries based on Apache Lucene engine.\nClass QueryCancelledException; // The exception is thrown if a query was cancelled or timed out while executing.\nClass QueryRetryException; // The exception is thrown if a query was cancelled or timed out while executing.\n", "des": "Contains APIs for creating and executing cache queries."}
{"index": 54, "repo": "ignite-core-2.15.0", "code": "package annotations;\n\nAnnotation Type QueryGroupIndex; // Describes group index.\nAnnotation Type QueryGroupIndex.List; // List of group indexes for type.\nAnnotation Type QuerySqlField; // Annotates fields for SQL queries.\nAnnotation Type QuerySqlField.Group; // Describes group of index and position of field in this group.\nAnnotation Type QuerySqlFunction; // Annotates public static methods in classes to be used in SQL queries as custom functions.\nAnnotation Type QueryTextField; // Annotation for fields to be indexed for full text search using Lucene.\n", "des": "Contains query-related annotations."}
{"index": 55, "repo": "ignite-core-2.15.0", "code": "package store;\n\npackage store.jdbc; // Contains reference JDBC-based cache store implementation.\nInterface CacheStore<K,V>; // API for cache persistent storage for read-through and write-through behavior.\nInterface CacheStoreSession; // Session for the cache store operations.\nInterface CacheStoreSessionListener; // Cache store session listener that allows to implement callbacks for session lifecycle.\nClass CacheLoadOnlyStoreAdapter<K,V,I>; // This adapter designed to support stores with bulk loading from stream-like source.\nClass CacheStoreAdapter<K,V>; // Cache storage convenience adapter.\n", "des": "Contains cache store interfaces."}
{"index": 56, "repo": "ignite-core-2.15.0", "code": "package jdbc;\n\npackage jdbc.dialect; // Contains SQL dialects for different RDBMS.\nInterface JdbcTypeHasher; // API for implementing custom hashing logic for binary objects on server side.\nInterface JdbcTypesTransformer; // API for implementing custom mapping logic for loaded from store data.\nClass CacheAbstractJdbcStore<K,V>; // Implementation of CacheStore backed by JDBC.\nClass CacheAbstractJdbcStore.EntryMapping; // Entry mapping description.\nClass CacheJdbcBlobStore<K,V>; // CacheStore implementation backed by JDBC.\nClass CacheJdbcBlobStoreFactory<K,V>; // Factory implementation for CacheJdbcBlobStore.\nClass CacheJdbcPojoStore<K,V>; // Implementation of CacheStore backed by JDBC and POJO via reflection.\nClass CacheJdbcPojoStoreFactory<K,V>; // Factory implementation for CacheJdbcPojoStore.\nClass CacheJdbcStoreSessionListener; // Cache store session listener based on JDBC connection.\nClass JdbcType; // Description for type that could be stored into database by store.\nClass JdbcTypeDefaultHasher; // Default implementation of JdbcTypeHasher.\nClass JdbcTypeField; // Description of how field declared in database and in cache.\nClass JdbcTypesDefaultTransformer; // Default implementation of JdbcTypesTransformer.\nEnum CacheAbstractJdbcStore.TypeKind; // Type kind.\n", "des": "Contains reference JDBC-based cache store implementation."}
{"index": 57, "repo": "ignite-core-2.15.0", "code": "package dialect;\n\nInterface JdbcDialect; // Represents a dialect of SQL implemented by a particular RDBMS.\nClass BasicJdbcDialect; // Basic implementation of dialect based on JDBC specification.\nClass DB2Dialect; // A dialect compatible with the IBM DB2 database.\nClass H2Dialect; // A dialect compatible with the H2 database.\nClass MySQLDialect; // A dialect compatible with the MySQL database.\nClass OracleDialect; // A dialect compatible with the Oracle database.\nClass SQLServerDialect; // A dialect compatible with the Microsoft SQL Server database.\n", "des": "Contains SQL dialects for different RDBMS."}
{"index": 58, "repo": "ignite-core-2.15.0", "code": "package transactions;\n\nInterface Transaction; // Ignite cache transaction.\nInterface TransactionMetrics; // Transaction metrics, shared across all caches.\nEnum TransactionConcurrency; // Transaction concurrency control.\nEnum TransactionIsolation; // Defines different cache transaction isolation levels.\nEnum TransactionState; // Cache transaction state.\nClass TransactionAlreadyCompletedException; // Exception thrown whenever Mvcc transaction has been finished before operation finished.\nClass TransactionDeadlockException; // Transaction deadlock exception.\nClass TransactionDuplicateKeyException; // Exception thrown whenever transaction tries to inserts entry with same mvcc version more than once.\nClass TransactionException; // Base class for all transaction related exceptions.\nClass TransactionHeuristicException; // Exception thrown whenever grid transaction enters an unknown state.\nClass TransactionMixedModeException; // Exception thrown whenever transaction spans over MVCC and non-MVCC caches.\nClass TransactionOptimisticException; // Exception thrown whenever grid transactions fail optimistically.\nClass TransactionRollbackException; // Exception thrown whenever grid transactions has been automatically rolled back.\nClass TransactionSerializationException; // Exception thrown whenever transaction can't be serialized due to write conflict.\nClass TransactionTimeoutException; // Exception thrown whenever transactions time out.\nClass TransactionUnsupportedConcurrencyException; // Exception thrown whenever transaction concurrency level is not supported.\n", "des": "Contains transaction-related classes."}
{"index": 59, "repo": "ignite-core-2.15.0", "code": "package services;\n\nInterface Service; // An instance of grid-managed service.\nInterface ServiceCallContext; // Service call context.\nInterface ServiceCallInterceptor; // Service call interceptor.\nInterface ServiceContext; // Service execution context.\nInterface ServiceDescriptor; // Service deployment descriptor.\nClass ServiceCallContextBuilder; // Service call context builder.\nClass ServiceConfiguration; // Managed service configuration.\nClass ServiceDeploymentException; // Exception indicating service deployment failure.\n", "des": "Contains main Managed Services APIs."}
{"index": 60, "repo": "ignite-core-2.15.0", "code": "package client;\n\nInterface ClientAddressFinder; // This interface provides a list of addresses of Ignite server nodes within a cluster.\nInterface ClientAtomicLong; // Distributed atomic long API.\nInterface ClientAutoCloseableIterator<T>; // Auto closeable iterator.\nInterface ClientCache<K,V>; // Thin client cache.\nInterface ClientCluster; // Thin client cluster facade.\nInterface ClientClusterGroup; // Thin client cluster group facade.\nInterface ClientCompute; // Thin client compute facade.\nInterface ClientDisconnectListener; // Client disconnected event listener.\nInterface ClientIgniteSet<T>; // Distributed Set.\nInterface ClientPartitionAwarenessMapper; // This function calculates the cache key to a partition mapping for each cache key.\nInterface ClientPartitionAwarenessMapperFactory; // This factory is used on the client side and only when the partition awareness thin client feature is enabled.\nInterface ClientRetryPolicy; // Client retry policy determines whether client operations that have failed due to a connection issue should be retried.\nInterface ClientRetryPolicyContext; // Retry policy context.\nInterface ClientServiceDescriptor; // Descriptor of Service.\nInterface ClientServices; // Thin client services facade.\nInterface ClientTransaction; // Thin client transaction.\nInterface ClientTransactions; // Thin client transactions facade.\nInterface IgniteClient; // Ignite thin client.\nInterface IgniteClientFuture<T>; // Thin client async operations future.\nClass ClientAtomicConfiguration; // Configuration for atomic data structures.\nClass ClientCacheConfiguration; // Cache configuration.\nClass ClientCollectionConfiguration; // Configuration for Ignite collections.\nClass ClientRetryAllPolicy; // Retry policy that always returns true.\nClass ClientRetryNonePolicy; // Retry policy that always returns false.\nClass ClientRetryReadPolicy; // Retry policy that returns true for all read-only operations that do not modify data.\nEnum ClientOperationType; // Client operation type.\nEnum SslMode; // SSL/TLS modes.\nEnum SslProtocol; // SSL Protocol.\nClass ClientAuthenticationException; // Indicates user name or password is invalid.\nClass ClientAuthorizationException; // Indicates user has no permission to perform operation.\nClass ClientConnectionException; // Indicates all the Ignite servers specified in the client configuration are no longer available.\nClass ClientException; // Common thin client unchecked exception.\n", "des": "Contains Ignite Thin Client API classes."}
{"index": 61, "repo": "ignite-core-2.15.0", "code": "package stream;\n\npackage stream.socket; // Contains socket streamer implementation.\nInterface StreamMultipleTupleExtractor<T,K,V>; // Stream tuple extractor to convert a single message to zero, one or many tuples.\nInterface StreamReceiver<K,V>; // Updates cache with batch of entries.\nInterface StreamSingleTupleExtractor<T,K,V>; // Stream tuple extractor to convert a message to a single Ignite key-value tuple.\nInterface StreamTupleExtractor<T,K,V>; // Will be removed in 2.0.0.\nClass StreamAdapter<T,K,V>; // Convenience adapter for streamers.\nClass StreamTransformer<K,V>; // Convenience adapter to transform update existing values in streaming cache based on the previously cached value.\nClass StreamVisitor<K,V>; // Convenience adapter to visit every key-value tuple in the stream.\n", "des": "Contains Ignite Streamer classes."}
{"index": 62, "repo": "ignite-core-2.15.0", "code": "package socket;\n\nInterface SocketMessageConverter<T>; // Socket message converter.\nClass SocketStreamer<T,K,V>; // Server that receives data from TCP socket, converts it to key-value pairs using StreamTupleExtractor and streams into IgniteDataStreamer instance.\n", "des": "Contains socket streamer implementation."}
{"index": 63, "repo": "ignite-core-2.15.0", "code": "package security;\n\nInterface SecurityCredentialsProvider; // Security credentials provider for specifying security credentials.\nInterface SecurityPermissionSet; // Security permission set for authorized security subjects.\nInterface SecuritySubject; // Security subject representing authenticated node with a set of permissions.\nClass AuthenticationContext; // Authentication context.\nClass SecurityBasicPermissionSet; // Simple implementation of SecurityPermissionSet interface.\nClass SecurityCredentials; // Security credentials used for node authentication.\nClass SecurityCredentialsBasicProvider; // Basic implementation for SecurityCredentialsProvider.\nClass SecurityPermissionSetBuilder; // Provides a convenient way to create a permission set.\nEnum SecurityPermission; // Supported security permissions within grid.\nEnum SecuritySubjectType; // Supported security subject types.\nClass SecurityException; // Common security exception for the grid.\n", "des": "Contains APIs for security, authentication, and authorization."}
{"index": 64, "repo": "ignite-core-2.15.0", "code": "package ssl;\n\nClass SslContextFactory; // SSL context factory that provides SSL context configuration with specified key and trust stores.\nClass SSLContextWrapper; // Wrapper for SSLContext that extend source context with custom SSL parameters.\n", "des": "Contains classes for working with SSL."}
{"index": 65, "repo": "ignite-core-2.15.0", "code": "package maintenance;\n\nInterface MaintenanceAction<T>; // Maintenance action interface enables user to execute operations related to a particular MaintenanceTask.\nInterface MaintenanceRegistry; // MaintenanceRegistry is a service local to each Ignite node that allows to request performing maintenance actions on that particular node.\nInterface MaintenanceWorkflowCallback; // Abstraction to decouple interaction between MaintenanceRegistry and components that may require maintenance.\nClass MaintenanceTask; // Represents request to handle maintenance situation.\n", "des": "Contains public interfaces for maintenance mechanism."}
{"index": 66, "repo": "ignite-core-2.15.0", "code": "package mxbean;\n\nInterface BaselineAutoAdjustMXBean; // This interface defines JMX view on DistributedBaselineConfiguration.\nInterface ClientProcessorMXBean; // MXBean interface that provides access to ODBC\\JDBC\\Thin client connections.\nInterface ClusterMetricsMXBean; // Cluster metrics MBean.\nInterface ComputeMXBean; // Compute MXBean interface.\nInterface DataStorageMXBean; // An MX bean allowing to monitor and tune persistence.\nInterface DefragmentationMXBean; // JMX bean for defragmentation manager.\nInterface EncryptionMXBean; // Encryption features MBean.\nInterface FailureHandlingMxBean; // MBean that controls critical failure handling.\nInterface IgniteClusterMXBean; // MX Bean allows to access information about cluster ID and tag and change tag.\nInterface IgniteMBeanAware; // MBean-aware interface.\nInterface IgniteMXBean; // This interface defines JMX view on kernal.\nInterface IgnitionMXBean; // This interface defines JMX view on Ignition.\nInterface MetricsMxBean; // Metrics MXBean interface.\nInterface PerformanceStatisticsMBean; // MBean that provides access to performance statistics management.\nInterface QueryMXBean; // Query MXBean interface.\nInterface ServiceMXBean; // Service MXBean interface.\nInterface SnapshotMXBean; // Snapshot features MBean.\nInterface TransactionMetricsMxBean; // Check the JmxMetricExporterSpi with \"name=\\\"tx\\\"\" instead.\nInterface TransactionsMXBean; // Transactions MXBean interface.\nInterface WarmUpMXBean; // Warm-up MXBean interface.\nInterface WorkersControlMXBean; // MBean that provides ability to terminate worker that registered in the workers registry.\nAnnotation Type MXBeanDescription; // Provides description for MBean classes and methods.\nAnnotation Type MXBeanParameter; // Provides name and description for MBean method parameter.\nAnnotation Type MXBeanParametersDescriptions; // Use MXBeanParameter instead.\nAnnotation Type MXBeanParametersNames; // Use MXBeanParameter instead.\n", "des": "Contains annotations for Dynamic MBeans."}
{"index": 67, "repo": "ignite-core-2.15.0", "code": "package checkpoint;\n\npackage checkpoint.cache; // Contains cache-based implementation for checkpoint SPI.\npackage checkpoint.jdbc; // Contains JDBC implementation for checkpoint SPI.\npackage checkpoint.noop; // Contains default no-op checkpoint SPI implementation.\npackage checkpoint.sharedfs; // Contains shared file system implementation for checkpoint SPI.\nInterface CheckpointListener; // Listener for notifications of checkpoints removed by CheckpointSpi.\nInterface CheckpointSpi; // Checkpoint SPI provides an ability to save an intermediate job state.\n", "des": "Contains APIs for checkpoint SPI."}
{"index": 68, "repo": "ignite-core-2.15.0", "code": "package cache;\n\nInterface CacheCheckpointSpiMBean; // Management bean that provides general administrative and configuration information about cache checkpoint SPI.\nClass CacheCheckpointSpi; // This class defines cache-based implementation for checkpoint SPI.\n", "des": "Contains cache-based implementation for checkpoint SPI."}
{"index": 69, "repo": "ignite-core-2.15.0", "code": "package jdbc;\n\nInterface JdbcCheckpointSpiMBean; // Management bean that provides general administrative and configuration information about jdbc checkpoint SPI.\nClass JdbcCheckpointSpi; // This class defines JDBC checkpoint SPI implementation.\n", "des": "Contains JDBC implementation for checkpoint SPI."}
{"index": 70, "repo": "ignite-core-2.15.0", "code": "package noop;\n\nClass NoopCheckpointSpi; // No-op implementation of CheckpointSpi.\n", "des": "Contains default no-op checkpoint SPI implementation."}
{"index": 71, "repo": "ignite-core-2.15.0", "code": "package sharedfs;\n\nInterface SharedFsCheckpointSpiMBean; // Management bean that provides general administrative and configuration information about shared file system checkpoints.\nClass SharedFsCheckpointSpi; // This class defines shared file system CheckpointSpi implementation for checkpoint SPI.\n", "des": "Contains shared file system implementation for checkpoint SPI."}
{"index": 72, "repo": "ignite-core-2.15.0", "code": "package collision;\n\npackage collision.fifoqueue; // Contains FIFO based collision SPI implementation.\npackage collision.jobstealing; // Contains job stealing collision SPI implementation.\npackage collision.noop; // Contains default no-op collision SPI implementation.\npackage collision.priorityqueue; // Contains priority based collision SPI implementation.\nInterface CollisionContext; // Context for resolving collisions.\nInterface CollisionExternalListener; // Listener to be set on CollisionSpi for notification of external collision events (e.g. job stealing).\nInterface CollisionJobContext; // This interface defines set of operations that collision SPI implementation can perform on jobs that are either waiting or executing.\nInterface CollisionSpi; // Collision SPI allows to regulate how grid jobs get executed when they arrive on a destination node for execution.\n", "des": "Contains APIs for collision SPI."}
{"index": 73, "repo": "ignite-core-2.15.0", "code": "package fifoqueue;\n\nInterface FifoQueueCollisionSpiMBean; // Management bean that provides access to the FIFO queue collision SPI configuration.\nClass FifoQueueCollisionSpi; // This class provides implementation for Collision SPI based on FIFO queue.\n", "des": "Contains FIFO based collision SPI implementation."}
{"index": 74, "repo": "ignite-core-2.15.0", "code": "package jobstealing;\n\nInterface JobStealingCollisionSpiMBean; // Management MBean for job stealing based collision SPI.\nClass JobStealingCollisionSpi; // Collision SPI that supports job stealing from over-utilized nodes to under-utilized nodes.\nClass JobStealingRequest; // Job stealing request.\nAnnotation Type JobStealingDisabled; // This annotation disables job stealing if corresponding feature is configured.\n", "des": "Contains job stealing collision SPI implementation."}
{"index": 75, "repo": "ignite-core-2.15.0", "code": "package noop;\n\nClass NoopCollisionSpi; // No-op implementation of CollisionSpi.\n", "des": "Contains default no-op collision SPI implementation."}
{"index": 76, "repo": "ignite-core-2.15.0", "code": "package priorityqueue;\n\nInterface PriorityQueueCollisionSpiMBean; // Management bean that provides access to the priority queue collision SPI configuration.\nClass PriorityQueueCollisionSpi; // This class provides implementation for Collision SPI based on priority queue.\n", "des": "Contains priority based collision SPI implementation."}
{"index": 77, "repo": "ignite-core-2.15.0", "code": "package indexing;\n\npackage indexing.noop; // Contains default no-op indexing SPI implementation.\nInterface IndexingQueryFilter; // Cache entry filter.\nInterface IndexingSpi; // Indexing SPI allows user to index cache content.\nClass IndexingQueryCacheFilter; // Indexing query filter for specific cache.\nClass IndexingQueryFilterImpl; // Indexing query filter.\n", "des": "Contains APIs for indexing SPI."}
{"index": 78, "repo": "ignite-core-2.15.0", "code": "package noop;\n\nClass NoopIndexingSpi; // Default implementation of IndexingSpi which does not index cache.\n", "des": "Contains default no-op indexing SPI implementation."}
{"index": 79, "repo": "ignite-core-2.15.0", "code": "package loadbalancing;\n\npackage loadbalancing.adaptive; // Contains adaptive load balancing SPI.\npackage loadbalancing.roundrobin; // Contains default round-robin implementation for load balancing SPI.\npackage loadbalancing.weightedrandom; // Contains weighted random-base implementation for load balancing SPI.\nInterface LoadBalancingSpi; // Load balancing SPI provides the next best balanced node for job execution.\n", "des": "Contains APIs for load balancing SPI."}
{"index": 80, "repo": "ignite-core-2.15.0", "code": "package adaptive;\n\nInterface AdaptiveLoadBalancingSpiMBean; // Management MBean for AdaptiveLoadBalancingSpi SPI.\nInterface AdaptiveLoadProbe; // Pluggable implementation of node load probing.\nClass AdaptiveCpuLoadProbe; // Implementation of node load probing based on CPU load.\nClass AdaptiveJobCountLoadProbe; // Implementation of node load probing based on active and waiting job count.\nClass AdaptiveLoadBalancingSpi; // Load balancing SPI that adapts to overall node performance.\nClass AdaptiveProcessingTimeLoadProbe; // Implementation of node load probing based on total job processing time.\n", "des": "Contains adaptive load balancing SPI."}
{"index": 81, "repo": "ignite-core-2.15.0", "code": "package roundrobin;\n\nInterface RoundRobinLoadBalancingSpiMBean; // Management bean for RoundRobinLoadBalancingSpi SPI.\nClass RoundRobinLoadBalancingSpi; // This SPI iterates through nodes in round-robin fashion and pick the next sequential node.\n", "des": "Contains default round-robin implementation for load balancing SPI."}
{"index": 82, "repo": "ignite-core-2.15.0", "code": "package weightedrandom;\n\nInterface WeightedRandomLoadBalancingSpiMBean; // Management MBean for WeightedRandomLoadBalancingSpi SPI.\nClass WeightedRandomLoadBalancingSpi; // Load balancing SPI that picks a random node for job execution.\n", "des": "Contains weighted random-base implementation for load balancing SPI."}
{"index": 83, "repo": "ignite-core-2.15.0", "code": "package communication;\n\npackage communication.tcp; // Contains default TCP/IP-based implementation for communication SPI.\nInterface CommunicationListener<T extends Serializable>; // Listener SPI notifies IO manager with.\nInterface CommunicationSpi<T extends Serializable>; // Communication SPI is responsible for data exchange between nodes.\n", "des": "Contains APIs for grid communication SPI."}
{"index": 84, "repo": "ignite-core-2.15.0", "code": "package tcp;\n\npackage tcp.internal; // Contains connection health-checkers for TCP/IP-based implementation of communication SPI.\npackage tcp.messages; // Contains implementation messages.\nInterface TcpCommunicationSpiMBean; // MBean provide access to TCP-based communication SPI.\nClass AttributeNames; // fix it in the ticket https://ggsystems.atlassian.net/browse/GG-29546\nClass ClientExceptionsUtils; // Utils to analyze client-related exceptions.\nClass TcpCommunicationMetricsListener; // Statistics for TcpCommunicationSpi.\nClass TcpCommunicationSpi; // TcpCommunicationSpi is default communication SPI which uses TCP/IP protocol and Java NIO to communicate with other nodes.\n", "des": "Contains default TCP/IP-based implementation for communication SPI."}
{"index": 85, "repo": "ignite-core-2.15.0", "code": "package internal;\n\nInterface CommunicationListenerEx<T extends Serializable>; // Extended communication SPI listener to provide Channel opened events.\nInterface ConnectionPolicy; // Connection policy.\nInterface ConnectionRequestor; // Helper interface to ask other nodes to open connections.\nInterface TcpCommunicationNodeConnectionCheckFuture; // Tcp Communication Node Connection Check Future.\nInterface TcpConnectionIndexAwareMessage;\nClass ClusterStateProvider; // This class must be removed.\nClass CommunicationDiscoveryEventListener; // Listener on discovery events.\nClass CommunicationTcpUtils; // Common communication spi logic.\nClass CommunicationWorker; // Works with connections states.\nClass ConnectFuture; // Connect future which uses as a marker of type connection releted with TCP.\nClass ConnectGateway; // Lock and error control work flow.\nClass ConnectionClientPool; // Registry of client connections.\nClass ConnectionKey; // Connection Key.\nClass ConnectionRequestFuture; // Marker future implementation, just like ConnectFuture, but meaning that we're waiting for the inverse connection.\nClass DisconnectedSessionInfo; // Class marker that say that connection must be interacted.\nClass FirstConnectionPolicy; // First connection policy.\nClass GridNioServerWrapper; // Should be removed.\nClass HandshakeTimeoutObject; // Callback that is intended to be executed after timeout on handshake.\nClass InboundConnectionHandler; // This class implement NioListener which process handshake stage, and transmit messages to session.\nClass RoundRobinConnectionPolicy; // Round robin connection policy.\nClass TcpCommunicationConfigInitializer; // Only may implement it TcpCommunicationSpi.\nClass TcpCommunicationConfiguration; // Class of configuration for TcpCommunicationSpi segregation.\nClass TcpCommunicationConnectionCheckFuture; // Tcp Communication Connection Check Future.\nClass TcpCommunicationSpiMBeanImpl; // MBean implementation for TcpCommunicationSpi.\nClass TcpConnectionRequestDiscoveryMessage; // Message is part of communication via discovery protocol.\nClass TcpHandshakeExecutor; // Executor for synchronously establishing a connection with a node.\nClass TcpInverseConnectionResponseMessage; // Inverse connection response message sent by client node as a response to inverse connection request received by discovery.\nClass HandshakeException; // Internal exception class for proper timeout handling.\nClass NodeUnreachableException; // Exception is thrown by TcpCommunicationSpi when some or all addresses of a node are unreachable and direct communication connection cannot be established.\n", "des": "Contains connection health-checkers for TCP/IP-based implementation of communication SPI."}
{"index": 86, "repo": "ignite-core-2.15.0", "code": "package messages;\n\nClass HandshakeMessage; // Handshake message.\nClass HandshakeMessage2; // Updated handshake message.\nClass HandshakeWaitMessage; // Message requesting to wait until node's SPI context initialize.\nClass NodeIdMessage; // Node ID message.\nClass RecoveryLastReceivedMessage; // Recovery acknowledgment message.\n", "des": "Contains implementation messages."}
{"index": 87, "repo": "ignite-core-2.15.0", "code": "package deployment;\n\npackage deployment.local; // Contains default local deployment SPI implementation.\nInterface DeploymentListener; // Listener for deployment events.\nInterface DeploymentResource; // Generic abstraction over deployed resource containing resource's name, class and corresponding class loader.\nInterface DeploymentSpi; // Grid deployment SPI is in charge of deploying tasks and classes from different sources.\nClass DeploymentResourceAdapter; // Simple adapter for DeploymentResource interface.\nAnnotation Type IgnoreIfPeerClassLoadingDisabled; // This annotation is for all implementations of DeploymentSpi that may be ignored if peer class loading is disabled.\n", "des": "Contains APIs for deployment SPI."}
{"index": 88, "repo": "ignite-core-2.15.0", "code": "package local;\n\nInterface LocalDeploymentSpiMBean; // Management MBean for LocalDeploymentSpi SPI.\nClass LocalDeploymentSpi; // Local deployment SPI that implements only within VM deployment on local node via LocalDeploymentSpi.register(ClassLoader, Class) method.\n", "des": "Contains default local deployment SPI implementation."}
{"index": 89, "repo": "ignite-core-2.15.0", "code": "package discovery;\n\npackage discovery.isolated; // Contains implementation of special \"isolated\" mode for single-node cluster.\npackage discovery.tcp; // Contains default TCP/IP implementation for discovery SPI.\nInterface DiscoveryDataBag.GridDiscoveryData; // Facade interface representing DiscoveryDataBag object with discovery data collected in the grid.\nInterface DiscoveryDataBag.JoiningNodeDiscoveryData; // Facade interface representing DiscoveryDataBag object with discovery data from joining node.\nInterface DiscoveryMetricsProvider; // Provides metrics to discovery SPI.\nInterface DiscoverySpi; // Grid discovery SPI allows to discover remote nodes in grid.\nInterface DiscoverySpiCustomMessage; // Message to send across ring.\nInterface DiscoverySpiDataExchange; // Handler for initial data exchange between Ignite nodes.\nInterface DiscoverySpiListener; // Listener for grid node discovery events.\nInterface DiscoverySpiMBean; // Generic MBean interface to monitor DiscoverySpi subsystem.\nInterface DiscoverySpiNodeAuthenticator; // Node authenticator.\nInterface IgniteDiscoveryThread; // Marker interface for discovery thread on cluster server node.\nClass DiscoveryDataBag; // Provides interface for GridComponent to collect and exchange discovery data both on joining node and on cluster nodes.\nClass DiscoveryNotification; // Discovery notification object.\nAnnotation Type DiscoverySpiHistorySupport; // This annotation is for all implementations of DiscoverySpi that support topology snapshots history.\nAnnotation Type DiscoverySpiMutableCustomMessageSupport; // This annotation is for all implementations of DiscoverySpi that support topology mutable DiscoverySpiCustomMessages.\nAnnotation Type DiscoverySpiOrderSupport; // This annotation is for all implementations of DiscoverySpi that support proper node ordering.\n", "des": "Contains APIs for topology manager SPI."}
{"index": 90, "repo": "ignite-core-2.15.0", "code": "package isolated;\n\nClass IsolatedDiscoverySpi; // Special discovery SPI implementation to start a single-node cluster in \"isolated\" mode.\nClass IsolatedNode; // Special isolated node.\n", "des": "Contains implementation of special \"isolated\" mode for single-node cluster."}
{"index": 91, "repo": "ignite-core-2.15.0", "code": "package tcp;\n\npackage tcp.internal; // Contains internal implementation.\npackage tcp.ipfinder; // Contains IP finder interface and adapter.\npackage tcp.messages; // Contains implementation messages.\nInterface TcpDiscoverySpiMBean; // Management bean for TcpDiscoverySpi.\nClass TcpDiscoverySpi; // Discovery SPI implementation that uses TCP/IP for node discovery.\n", "des": "Contains default TCP/IP implementation for discovery SPI."}
{"index": 92, "repo": "ignite-core-2.15.0", "code": "package internal;\n\nClass DiscoveryDataPacket; // Carries discovery data in marshalled form and allows convenient way of converting it to and from DiscoveryDataBag objects.\nClass FutureTask<T>;\nClass TcpDiscoveryNode; // Node for TcpDiscoverySpi.\nClass TcpDiscoveryNodesRing; // Convenient way to represent topology for TcpDiscoverySpi\nClass TcpDiscoveryStatistics; // Statistics for TcpDiscoverySpi.\nEnum TcpDiscoverySpiState; // State of local node TcpDiscoverySpi.\n", "des": "Contains internal implementation."}
{"index": 93, "repo": "ignite-core-2.15.0", "code": "package ipfinder;\n\npackage ipfinder.jdbc; // Contains JDBC IP finder implementation.\npackage ipfinder.multicast; // Contains multicast-based IP finder.\npackage ipfinder.sharedfs; // Contains shared filesystem-based IP finder.\npackage ipfinder.vm; // Contains local JVM-based IP finder.\nInterface TcpDiscoveryIpFinder; // IP finder interface for TcpDiscoverySpi.\nClass TcpDiscoveryIpFinderAdapter; // IP finder interface implementation adapter.\n", "des": "Contains IP finder interface and adapter."}
{"index": 94, "repo": "ignite-core-2.15.0", "code": "package jdbc;\n\nInterface JdbcIpFinderDialect; // SQL dialect to use with TcpDiscoveryJdbcIpFinder.\nClass BasicJdbcIpFinderDialect; // Basic JDBC dialect to use along with TcpDiscoveryJdbcIpFinder.\nClass OracleJdbcIpFinderDialect; // Oracle JDBC dialect to use along with TcpDiscoveryJdbcIpFinder.\nClass TcpDiscoveryJdbcIpFinder; // JDBC-based IP finder.\n", "des": "Contains JDBC IP finder implementation."}
{"index": 95, "repo": "ignite-core-2.15.0", "code": "package multicast;\n\nClass TcpDiscoveryMulticastIpFinder; // Multicast-based IP finder.\n", "des": "Contains multicast-based IP finder."}
{"index": 96, "repo": "ignite-core-2.15.0", "code": "package sharedfs;\n\nClass TcpDiscoverySharedFsIpFinder; // Shared filesystem-based IP finder.\n", "des": "Contains shared filesystem-based IP finder."}
{"index": 97, "repo": "ignite-core-2.15.0", "code": "package vm;\n\nClass TcpDiscoveryVmIpFinder; // IP Finder which works only with pre-configured list of IP addresses specified via TcpDiscoveryVmIpFinder.setAddresses(Collection) method.\n", "des": "Contains local JVM-based IP finder."}
{"index": 98, "repo": "ignite-core-2.15.0", "code": "package messages;\n\nClass TcpDiscoveryAbstractMessage; // Base class to implement discovery messages.\nClass TcpDiscoveryAbstractTraceableMessage; // Abstract traceable message for TCP discovery.\nClass TcpDiscoveryAuthFailedMessage; // Message telling joining node that its authentication failed on coordinator.\nClass TcpDiscoveryCheckFailedMessage; // Message telling joining node that it failed coordinator's validation check.\nClass TcpDiscoveryClientAckResponse;\nClass TcpDiscoveryClientMetricsUpdateMessage; // Metrics update message.\nClass TcpDiscoveryClientPingRequest; // Ping request.\nClass TcpDiscoveryClientPingResponse; // Ping request.\nClass TcpDiscoveryClientReconnectMessage; // Message telling that client node is reconnecting to topology.\nClass TcpDiscoveryConnectionCheckMessage; // Message used to check whether a node is still connected to the topology.\nClass TcpDiscoveryCustomEventMessage; // Wrapped for custom message.\nClass TcpDiscoveryDiscardMessage; // Message sent by coordinator when some operation handling is over.\nClass TcpDiscoveryDummyWakeupMessage;\nClass TcpDiscoveryDuplicateIdMessage; // Message telling joining node that new topology already contain different node with same ID.\nClass TcpDiscoveryHandshakeRequest; // Handshake request.\nClass TcpDiscoveryHandshakeResponse; // Handshake response.\nClass TcpDiscoveryJoinRequestMessage; // Initial message sent by a node that wants to enter topology.\nClass TcpDiscoveryLoopbackProblemMessage; // Message telling joining node that it has loopback problem (misconfiguration).\nClass TcpDiscoveryMetricsUpdateMessage; // Metrics update message.\nClass TcpDiscoveryMetricsUpdateMessage.MetricsSet;\nClass TcpDiscoveryNodeAddedMessage; // Message telling nodes that new node should be added to topology.\nClass TcpDiscoveryNodeAddFinishedMessage; // Sent by coordinator across the ring to finish node add process.\nClass TcpDiscoveryNodeFailedMessage; // Sent by node that has detected node failure to coordinator across the ring, then sent by coordinator across the ring.\nClass TcpDiscoveryNodeLeftMessage; // Sent by node that is stopping to coordinator across the ring, then sent by coordinator across the ring.\nClass TcpDiscoveryPingRequest; // Ping request.\nClass TcpDiscoveryPingResponse; // Ping response.\nClass TcpDiscoveryRingLatencyCheckMessage;\nClass TcpDiscoveryServerOnlyCustomEventMessage; // Wrapped for custom message that must not be delivered to the client nodes.\n", "des": "Contains implementation messages."}
{"index": 99, "repo": "ignite-core-2.15.0", "code": "package failover;\n\npackage failover.always; // Contains default \"always\" failover SPI.\npackage failover.jobstealing; // Contains job stealing failover SPI.\npackage failover.never; // Contains \"never\" failover SPI.\nInterface FailoverContext; // This interface defines a set of operations available to failover SPI one a given failed job.\nInterface FailoverSpi; // Failover SPI provides developer with ability to supply custom logic for handling failed execution of a grid job.\n", "des": "Contains APIs for failover SPI."}
{"index": 100, "repo": "ignite-core-2.15.0", "code": "package always;\n\nInterface AlwaysFailoverSpiMBean; // Management bean for AlwaysFailoverSpi.\nClass AlwaysFailoverSpi; // Failover SPI that always reroutes a failed job to another node.\n", "des": "Contains default \"always\" failover SPI."}
{"index": 101, "repo": "ignite-core-2.15.0", "code": "package jobstealing;\n\nInterface JobStealingFailoverSpiMBean; // Management bean for JobStealingFailoverSpi.\nClass JobStealingFailoverSpi; // Job stealing failover SPI needs to always be used in conjunction with JobStealingCollisionSpi SPI.\n", "des": "Contains job stealing failover SPI."}
{"index": 102, "repo": "ignite-core-2.15.0", "code": "package never;\n\nInterface NeverFailoverSpiMBean; // Management bean for NeverFailoverSpi.\nClass NeverFailoverSpi; // This class provides failover SPI implementation that never fails over.\n", "des": "Contains \"never\" failover SPI."}
{"index": 103, "repo": "ignite-core-2.15.0", "code": "package eventstorage;\n\npackage eventstorage.memory; // Contains default in-memory implementation for event storage SPI.\nInterface EventStorageSpi; // This SPI provides local node events storage.\nClass NoopEventStorageSpi; // No-op implementation of EventStorageSpi.\n", "des": "Contains APIs for event storage SPI."}
{"index": 104, "repo": "ignite-core-2.15.0", "code": "package memory;\n\nInterface MemoryEventStorageSpiMBean; // Management bean for MemoryEventStorageSpi.\nClass MemoryEventStorageSpi; // In-memory EventStorageSpi implementation.\n", "des": "Contains default in-memory implementation for event storage SPI."}
{"index": 105, "repo": "ignite-core-2.15.0", "code": "package failure;\n\nInterface FailureHandler; // Provides facility to handle failures by custom user implementations, which can be configured by IgniteConfiguration.setFailureHandler(FailureHandler) method.\nClass AbstractFailureHandler; // Abstract superclass for FailureHandler implementations.\nClass FailureContext; // Failure context contains information about failure type and exception if applicable.\nClass NoOpFailureHandler; // Just ignores any failure.\nClass RestartProcessFailureHandler; // This handler could be used only with ignite.\nClass StopNodeFailureHandler; // Handler will stop node in case of critical error using IgnitionEx.stop(nodeName, true, true) call.\nClass StopNodeOrHaltFailureHandler; // Handler will try to stop node if tryStop value is true.\nEnum FailureType; // Types of failures.\n", "des": "Contains Failure handling public API with standard FailureHandler implementations."}
{"index": 106, "repo": "ignite-core-2.15.0", "code": "package segmentation;\n\nInterface SegmentationResolver; // This is interface for segmentation (a.k.a \"split-brain\" problem) resolvers.\nEnum SegmentationPolicy; // Policy that defines how node will react on topology segmentation.\n", "des": "Contains segmentation \"split-brain\" related classes."}
{"index": 107, "repo": "ignite-core-2.15.0", "code": "package plugin;\n\npackage plugin.platform; // Contains platform plugins management API.\nInterface CachePluginConfiguration<K,V>; // Cache plugin configuration.\nInterface CachePluginContext<C extends CachePluginConfiguration>; // Cache plugin context.\nInterface CachePluginProvider<C extends CachePluginConfiguration>; // Cache plugin provider is a point for processing of properties which provide specific CachePluginConfiguration.\nInterface CacheTopologyValidatorProvider; // The CacheTopologyValidatorProvider is used to pass an implementation of TopologyValidators for a specific cache through Ignite plugin extensions mechanism.\nInterface Extension; // Marker interface for extensions.\nInterface ExtensionRegistry; // Context that allows to register extensions.\nInterface IgnitePlugin; // Marker interface for all Ignite plugins.\nInterface PluginConfiguration; // Plugin configuration.\nInterface PluginContext; // Plugin context.\nInterface PluginProvider<C extends PluginConfiguration>; // Pluggable Ignite component.\nClass PluginNotFoundException; // Exception thrown if plugin is not found.\nClass PluginValidationException; // Plugin validation exception.\n", "des": "Contains plugins management API."}
{"index": 108, "repo": "ignite-core-2.15.0", "code": "package communication;\n\nInterface IgniteMessageFactory; // Message factory for all communication messages registered using IgniteMessageFactory.register(short, Supplier) method call.\nInterface IoPool; // The interface of IO Messaging Pool Extension.\nInterface Message; // Base class for all communication messages.\nInterface MessageFactory; // Use MessageFactoryProvider instead.\nInterface MessageFactoryProvider; // Provider of communication message factories.\nInterface MessageFormatter; // Provides a custom format for communication messages.\nInterface MessageReader; // Communication message reader.\nInterface MessageWriter; // Communication message writer.\nEnum MessageCollectionItemType; // Enum representing possible types of collection items.\n", "des": "Contains extendable components for communication."}
{"index": 109, "repo": "ignite-core-2.15.0", "code": "package platform;\n\nInterface PlatformCachePluginConfigurationClosure; // Platform cache configuration handler: updates plugin configuration using data sent from platform code.\nInterface PlatformCachePluginConfigurationClosureFactory; // Factory for @PlatformCachePluginConfigurationClosure with a unique id.\nInterface PlatformPluginConfigurationClosure; // Platform configuration handler: updates plugin configuration using data sent from platform code.\nInterface PlatformPluginConfigurationClosureFactory; // Factory for @PlatformPluginConfigurationClosure with a unique id.\n", "des": "Contains platform plugins management API."}
{"index": 110, "repo": "ignite-core-2.15.0", "code": "package logger;\n\npackage logger.java; // Contains Java logging implementation for logging.\nClass NullLogger; // Logger which does not output anything.\n", "des": "Contains logging functionality used throughout the system."}
{"index": 111, "repo": "ignite-core-2.15.0", "code": "package java;\n\nClass JavaLogger; // Logger to use with Java logging.\nClass JavaLoggerFileHandler; // File logging handler which skips all the messages until node ID is set.\nClass JavaLoggerFormatter; // Formatter for JUL logger.\n", "des": "Contains Java logging implementation for logging."}
{"index": 112, "repo": "ignite-core-2.15.0", "code": "package startup;\n\npackage startup.cmdline; // Contains default command line startup.\nClass BasicWarmupClosure; // Basic warm-up closure which warm-ups cache operations.\n", "des": "Contains Ignite runtime startup classes."}
{"index": 113, "repo": "ignite-core-2.15.0", "code": "package cmdline;\n\nClass AboutDialog; // About dialog.\nClass CdcCommandLineStartup; // This class defines command-line Ignite Capture Data Change startup.\nClass CommandLineRandomNumberGenerator; // Generates a random number and prints it to the console.\nClass CommandLineStartup; // This class defines command-line Ignite startup.\nClass CommandLineTransformer; // This class is a workaround for a versatile problems with passing arguments to the Ignite Windows batch launcher scripts.\n", "des": "Contains default command line startup."}
{"index": 114, "repo": "ignite-core-2.15.0", "code": "package marshaller;\n\npackage marshaller.jdk; // Contains JDK java.io based marshaller.\nInterface Marshaller; // Marshaller allows to marshal or unmarshal objects in grid.\nInterface MarshallerContext; // Marshaller context.\nClass AbstractMarshaller; // Base class for marshallers.\nClass AbstractNodeNameAwareMarshaller; // Marshaller allowing for Ignition.localIgnite() calls.\nClass MarshallerExclusions; // Controls what classes should be excluded from marshalling by default.\nClass MarshallerUtils; // Utility marshaller methods.\n", "des": "Contains various supported marshallers."}
{"index": 115, "repo": "ignite-core-2.15.0", "code": "package jdk;\n\nClass JdkMarshaller; // Implementation of Marshaller based on JDK serialization mechanism.\n", "des": "Contains JDK java.io based marshaller."}
{"index": 116, "repo": "ignite-core-2.15.0", "code": "package binary;\n\nInterface BinaryCollectionFactory<K>; // Collection factory.\nInterface BinaryField; // Binary object field.\nInterface BinaryIdMapper; // Type and field ID mapper for binary objects.\nInterface Binarylizable; // Interface that allows to implement custom serialization logic for binary objects.\nInterface BinaryMapFactory<K,V>; // Map factory.\nInterface BinaryNameMapper; // Maps type and field names to different names.\nInterface BinaryObject; // Wrapper for binary object in binary format.\nInterface BinaryObjectBuilder; // Binary object builder.\nInterface BinaryRawReader; // Raw reader for binary objects.\nInterface BinaryRawWriter; // Raw writer for binary object.\nInterface BinaryReader; // Reader for binary objects used in Binarylizable implementations.\nInterface BinarySerializer; // Interface that allows to implement custom serialization logic for binary objects.\nInterface BinaryType; // Binary type meta data.\nInterface BinaryWriter; // Writer for binary object used in Binarylizable implementations.\nClass BinaryBasicIdMapper; // Base binary ID mapper implementation.\nClass BinaryBasicNameMapper; // Base binary name mapper implementation.\nClass BinaryReflectiveSerializer; // Binary serializer which writes object fields using reflection.\nClass BinaryTypeConfiguration; // Defines configuration properties for a specific binary type.\nClass BinaryInvalidTypeException; // Exception indicating that class needed for deserialization of binary object does not exist.\nClass BinaryObjectException; // Exception indicating binary object serialization error.\n", "des": "Contains Ignite Binary Objects API classes."}
{"index": 117, "repo": "ignite-core-2.15.0", "code": "package platform;\n\npackage platform.cpp; // Contains C++ platform-related classes.\npackage platform.dotnet; // Contains .Net platform-related classes.\nInterface PlatformJavaObjectFactory<T>; // Object factory used for advanced interop between platform and Java.\nEnum PlatformType; // Interop platform type.\nAnnotation Type PlatformServiceMethod; // Annotation for setting mapping between java interface's method and platform service's method.\n", "des": "Contains platform-related classes."}
{"index": 118, "repo": "ignite-core-2.15.0", "code": "package cpp;\n\nClass PlatformCppConfiguration; // Platform CPP configuration.\n", "des": "Contains C++ platform-related classes."}
{"index": 119, "repo": "ignite-core-2.15.0", "code": "package dotnet;\n\nClass PlatformDotNetAffinityFunction; // AffinityFunction implementation which can be used to configure .NET affinity function in Java Spring configuration.\nClass PlatformDotNetBinaryConfiguration; // Mirror of .Net class BinaryConfiguration.cs\nClass PlatformDotNetBinaryTypeConfiguration; // Mirror of .Net class BinaryTypeConfiguration.cs\nClass PlatformDotNetCacheStoreFactory; // Wrapper for .NET cache store implementations.\nClass PlatformDotNetCacheStoreFactoryNative; // Cache store factory that wraps native factory object.\nClass PlatformDotNetConfiguration; // Mirror of .Net class IgniteConfiguration.cs\nClass PlatformDotNetLifecycleBean; // Lifecycle bean implementation which can be used to configure .Net lifecycle beans in Java Spring configuration.\n", "des": "Contains .Net platform-related classes."}
{"index": 120, "repo": "ignite-core-2.15.0", "code": "package encryption;\n\npackage encryption.keystore; // Contains encryption SPI implementation based on standard jdk keystore.\npackage encryption.noop; // Contains no-op encryption SPI implementation.\nInterface EncryptionSpi; // SPI provides encryption features for an Ignite.\n", "des": "Contains APIs for encryption SPI."}
{"index": 121, "repo": "ignite-core-2.15.0", "code": "package keystore;\n\nClass KeystoreEncryptionKey; // EncryptionKey implementation based on java security.\nClass KeystoreEncryptionSpi; // EncryptionSPI implementation base on JDK provided cipher algorithm implementations.\n", "des": "Contains encryption SPI implementation based on standard jdk keystore."}
{"index": 122, "repo": "ignite-core-2.15.0", "code": "package noop;\n\nClass NoopEncryptionSpi; // No operation EncryptionSPI implementation.\n", "des": "Contains no-op encryption SPI implementation."}
{"index": 123, "repo": "ignite-core-2.15.0", "code": "package metric;\n\npackage metric.jmx; // Contains JMX based implementation of MetricExporterSpi.\npackage metric.log; // Contains push to log implementation of MetricExporterSpi.\npackage metric.noop; // Contains no-op implementation of MetricExporterSpi.\nInterface BooleanMetric; // Interface for the metrics that holds boolean primitive.\nInterface DoubleMetric; // Interface for the metrics that holds double primitive.\nInterface HistogramMetric; // Histogram metric calculates counts of measurements that gets into each bounds interval.\nInterface IntMetric; // Interface for the metrics that holds int primitive.\nInterface LongMetric; // Interface for the metrics that holds long primitive.\nInterface Metric; // Base interface for all metrics.\nInterface MetricExporterSpi; // Exporter of metric information to the external recipient.\nInterface ObjectMetric<T>; // Interface for the metrics that holds typed value.\nInterface ReadOnlyMetricManager; // Read only metric manager.\nInterface ReadOnlyMetricRegistry; // Read only metric registry.\n", "des": "Contains common classes and interfaces for metric SPI implementations."}
{"index": 124, "repo": "ignite-core-2.15.0", "code": "package jmx;\n\nClass JmxMetricExporterSpi; // Overview Ignite provides this default built-in implementation of MetricExporterSpi it exports metrics as JMX beans.\nClass MetricRegistryMBean; // MBean for exporting values of metric registry.\nClass ReadOnlyDynamicMBean; // Base class for read only DynamicMBean implementations.\n", "des": "Contains JMX based implementation of MetricExporterSpi."}
{"index": 125, "repo": "ignite-core-2.15.0", "code": "package log;\n\nClass LogExporterSpi; // This SPI implementation exports metrics to Ignite log.\n", "des": "Contains push to log implementation of MetricExporterSpi."}
{"index": 126, "repo": "ignite-core-2.15.0", "code": "package noop;\n\nClass NoopMetricExporterSpi; // No-op implementation of metric exporter SPI.\n", "des": "Contains no-op implementation of MetricExporterSpi."}
{"index": 127, "repo": "ignite-core-2.15.0", "code": "package systemview;\n\npackage systemview.view; // Contains SystemView clases that exists in Ignite.\nInterface ReadOnlySystemViewRegistry; // Read only system view registry.\nInterface SystemViewExporterSpi; // Exporter of system view to the external recepient.\n", "des": "Contains common classes and interfaces for system view SPI implementations."}
{"index": 128, "repo": "ignite-core-2.15.0", "code": "package view;\n\nInterface FiltrableSystemView<R>; // System view with filtering capabilities.\nInterface SystemView<R>; // Implementation provides data for some internal Ignite objects.\nInterface SystemViewRowAttributeWalker<R>; // Utility class for quick iteration over row properties.\nInterface SystemViewRowAttributeWalker.AttributeVisitor; // Attribute visitor.\nInterface SystemViewRowAttributeWalker.AttributeWithValueVisitor; // Attribute visitor.\nClass BaselineNodeAttributeView; // Baseline node attribute representation for a SystemView.\nClass BaselineNodeView; // Baseline topology node representation for a SystemView.\nClass BinaryMetadataView; // BinaryMetadata representation for the SystemView.\nClass CacheGroupIoView; // Cache group IO statistics representation for a SystemView.\nClass CacheGroupView; // Cache group representation for the SystemView.\nClass CachePagesListView; // Pages-list representation for a SystemView.\nClass CacheView; // Cache representation for a SystemView.\nClass ClientConnectionView; // Client connection system view row.\nClass ClusterNodeView; // Cluster node representation for a SystemView.\nClass ComputeJobView; // Compute job representation for a SystemView.\nClass ComputeTaskView; // Compute task representation for a SystemView.\nClass ConfigurationView; // Configuration value representation for a SystemView.\nClass ContinuousQueryView; // Continuous query representation for a SystemView.\nClass MetastorageView; // Metastorage key representation for a SystemView.\nClass MetricsView; // Metrics representation for a SystemView.\nClass NodeAttributeView; // Node attribute representation for a SystemView.\nClass NodeMetricsView; // Node metrics representation for a SystemView.\nClass PagesListView; // Pages-list representation for a SystemView.\nClass PagesTimestampHistogramView; // Pages timestamp histogramm representation for a SystemView.\nClass PartitionStateView; // Partition state representation for a SystemView.\nClass ScanQueryView; // Scan query iterator representation for a SystemView.\nClass ServiceView; // Service representation for a SystemView.\nClass SnapshotView; // Snapshot representation for a SystemView.\nClass SqlQueryHistoryView; // SQL query history representation for a SystemView.\nClass SqlQueryView; // SQL query representation for a SystemView.\nClass StripedExecutorTaskView; // StripedExecutor task representation for a SystemView.\n", "des": "Contains SystemView clases that exists in Ignite."}
{"index": 129, "repo": "ignite-core-2.15.0", "code": "package tracing;\n\nInterface SpiSpecificSpan; // Logical piece of a trace that insulates spi specific logic.\nInterface TracingConfigurationManager; // Allows to configure tracing, read the configuration and restore it to the defaults.\nInterface TracingSpi<S extends SpiSpecificSpan>; // Tracing SPI interface.\nClass NoopSpiSpecificSpan; // Noop and null-safe implementation of SpiSpecificSpan.\nClass NoopTracingSpi; // Noop and null-safe implementation of Tracing SPI.\nClass TracingConfigurationCoordinates; // Specifies to which traces, specific configuration will be applied.\nClass TracingConfigurationCoordinates.Builder; // TracingConfigurationCoordinates builder.\nClass TracingConfigurationParameters; // Set of tracing configuration parameters like sampling rate or included scopes.\nClass TracingConfigurationParameters.Builder; // TracingConfigurationParameters builder.\nEnum Scope; // Tracing span scope.\nEnum SpanStatus; // Various statuses for Spans execution.\n", "des": "Contains common classes and interfaces for tracing SPI implementations."}
{"index": 130, "repo": "ignite-core-2.15.0", "code": "package internal;\n\npackage internal.binary; // Contains binary APIs internal implementation.\npackage internal.executor; // Contains grid executor service implementation.\npackage internal.managers; // TODO.\npackage internal.mxbean; // Contains internal mxbeans stuff.\npackage internal.processors; // Package with Apache Ignite internal Processors.\npackage internal.suggestions; // Contains classes for configurations suggestions.\npackage internal.util; // System-wide utility routine and helper classes.\npackage internal.worker; // System worker registry and control MBean implementation.\nInterface ExecutorAwareMessage; // Message with specified custom executor must be processed in the appropriate thread pool.\nInterface GridComponent; // Interface for all main internal Ignite components (managers and processors).\nInterface GridInternalWrapper<T>; // Internal wrapper interface for custom resource injection logic.\nInterface GridKernalContext;\nInterface GridKernalGateway; // This interface guards access to implementations of public methods that access kernal functionality from the following main API interfaces: ClusterGroup Note that this kernal gateway should not be used to guard against method from the following non-rich interfaces since their implementations are already managed by their respective implementing classes: Ignite ClusterNode Kernal gateway is also responsible for notifying various futures about the change in kernal state so that issued futures could properly interrupt themselves when kernal becomes unavailable while future is held externally by the user.\nInterface GridProxyListener; // Interception listener is notified about method apply.\nInterface GridTaskSessionInternal; // Internal task session interface.\nInterface IgniteDiagnosticAware;\nInterface IgniteEx; // Extended Grid interface which provides some additional methods required for kernal and Visor.\nInterface IgniteInternalFuture<R>; // Extension for standard Future interface.\nInterface IgniteServicesEx; // Extended interface that provides additional internal methods for managing services.\nInterface IgniteTransactionsEx; // Extended interface to work with system transactions.\nInterface InvalidEnvironmentException; // Marker interface of invalid environment exception.\nInterface PlatformSecurityAwareJob; // Represents the base interface for all Platform Compute Jobs that wrap and execute user code.\nInterface ThinProtocolFeature; // The base feature class.\nClass AsyncSupportAdapter<T extends IgniteAsyncSupport>; // Adapter for IgniteAsyncSupport.\n", "des": "Contains main implementation."}
{"index": 131, "repo": "ignite-core-2.15.0", "code": "package binary;\n\npackage binary.builder; // Contains classes specific to binary builder API.\npackage binary.streams; // Contains binary APIs implementation for streams.\nInterface BinaryFieldEx;\nInterface BinaryIdentityResolver; // Interface to compute hash codes for new binary objects and compare them for equality.\nInterface BinaryMetadataHandler; // Binary metadata handler.\nInterface BinaryObjectEx; // Extended binary object interface.\nInterface BinaryPositionReadable; // Interface allowing for positioned read.\nInterface BinaryRawReaderEx; // Extended reader interface.\nInterface BinaryRawWriterEx; // Extended writer interface.\nInterface BinaryReaderHandlesHolder; // Holder for handles.\nInterface BinaryWriteReplacer; // Interface to perform write replace.\nClass BinaryAbstractIdentityResolver; // Abstract identity resolver with common routines.\nClass BinaryArray; // Binary object representing array.\nClass BinaryArrayIdentityResolver; // Identity resolver implementation which compares raw array content of the binary object.\nClass BinaryCachingMetadataHandler; // Simple caching metadata handler.\nClass BinaryClassDescriptor; // Binary class descriptor.\nClass BinaryContext; // Binary context.\nClass BinaryContextHolder; // Binary context holder.\nClass BinaryEnumArray; // Ignite distinguishes between array of objects and array of enums.\nClass BinaryEnumCache; // Cache for enum constants.\nClass BinaryEnumObjectImpl; // Binary enum object.\nClass BinaryFieldAccessor; // Field accessor to speedup access.\nClass BinaryFieldImpl; // Implementation of binary field descriptor.\nClass BinaryFieldMetadata; // Binary field metadata.\nClass BinaryInternalMapper; // Internal binary mapper.\nClass BinaryMarshaller; // Implementation of Marshaller that lets to serialize and deserialize all objects in the binary format.\nClass BinaryMetadata; // Binary metadata which is passed over a wire.\nClass BinaryMethodWriteReplacer; // Write replacer based on method invocation.\nClass BinaryNoopMetadataHandler; // No-op metadata handler.\nClass BinaryObjectExImpl; // Internal binary object interface.\nClass BinaryObjectImpl; // Binary object implementation.\nClass BinaryObjectOffheapImpl; // Binary object implementation over offheap memory\nClass BinaryPrimitives; // Primitives writer.\nClass BinaryReaderExImpl; // Binary reader implementation.\nClass BinaryReaderHandles; // Reader handles.\nClass BinaryReaderHandlesHolderImpl; // Simple holder for handles.\nClass BinarySchema; // Schema describing binary object content.\n", "des": "Contains binary APIs internal implementation."}
{"index": 132, "repo": "ignite-core-2.15.0", "code": "package builder;\n\nInterface BinaryLazyValue;\nClass BinaryBuilderEnum;\nClass BinaryBuilderReader;\nClass BinaryModifiableLazyValue;\nClass BinaryObjectBuilderImpl;\nClass BinaryPlainBinaryObject;\n", "des": "Contains classes specific to binary builder API."}
{"index": 133, "repo": "ignite-core-2.15.0", "code": "package streams;\n\nInterface BinaryInputStream; // Binary input stream.\nInterface BinaryMemoryAllocatorChunk; // Memory allocator chunk.\nInterface BinaryOutputStream; // Binary output stream.\nInterface BinaryStream; // Binary stream.\nClass BinaryAbstractInputStream; // Binary abstract input stream.\nClass BinaryAbstractOutputStream; // Base binary output stream.\nClass BinaryAbstractStream; // Binary abstract stream.\nClass BinaryByteBufferInputStream; // Input stream over ByteBuffer.\nClass BinaryHeapInputStream; // Binary heap input stream.\nClass BinaryHeapOutputStream; // Binary heap output stream.\nClass BinaryMemoryAllocator; // On-heap memory allocator.\nClass BinaryOffheapInputStream; // Binary off-heap input stream.\nClass BinaryOffheapOutputStream; // Binary offheap output stream.\n", "des": "Contains binary APIs implementation for streams."}
{"index": 134, "repo": "ignite-core-2.15.0", "code": "package executor;\n\nClass GridExecutorService; // An ExecutorService that executes each submitted task in grid through Ignite instance, normally configured using Ignite.executorService() method.\n", "des": "Contains grid executor service implementation."}
{"index": 135, "repo": "ignite-core-2.15.0", "code": "package managers;\n\npackage managers.checkpoint; // TODO.\npackage managers.collision; // TODO.\npackage managers.communication; // TODO.\npackage managers.deployment; // TODO.\npackage managers.discovery; // TODO.\npackage managers.encryption; // Encryption manager classes.\npackage managers.eventstorage; // TODO.\npackage managers.failover; // TODO.\npackage managers.indexing; // Indexing manager classes.\npackage managers.loadbalancer; // TODO.\nInterface GridManager; // This interface defines life-cycle for kernal manager.\nClass GridManagerAdapter<T extends IgniteSpi>; // Convenience adapter for grid managers.\nClass IgniteMBeansManager; // Class that registers and unregisters MBeans for kernal.\n", "des": "TODO."}
{"index": 136, "repo": "ignite-core-2.15.0", "code": "package checkpoint;\n\nClass GridCheckpointManager; // This class defines a checkpoint manager.\nClass GridCheckpointRequest; // This class defines checkpoint request.\n", "des": "TODO."}
{"index": 137, "repo": "ignite-core-2.15.0", "code": "package collision;\n\nClass GridCollisionJobContextAdapter; // Adapter for CollisionJobContext.\nClass GridCollisionManager; // This class defines a collision manager.\n", "des": "TODO."}
{"index": 138, "repo": "ignite-core-2.15.0", "code": "package communication;\n\nInterface GridDisconnectListener; // Node disconnect listener interface.\nInterface GridMessageListener; // Listener for messages received from remote nodes.\nInterface TransmissionHandler; // Class represents a handler for the set of files considered to be transferred from the remote node.\nClass GridIoManager; // This class represents the internal grid communication (input and output) manager which is placed as a layer of indirection between the IgniteKernal and CommunicationSpi.\nClass GridIoMessage; // Wrapper for all grid messages.\nClass GridIoMessageFactory; // Message factory implementation.\nClass GridIoPolicy; // This enumeration defines different types of communication message processing by the communication manager.\nClass GridIoSecurityAwareMessage;\nClass GridIoUserMessage; // User message wrapper.\nClass IgniteIoTestMessage;\nClass IgniteMessageFactoryImpl; // Message factory implementation which is responsible for instantiation of all communication messages.\nClass TraceRunnable; // Wrapper of Runnable which incject tracing to execution.\nClass TransmissionMeta; // Class represents a file meta information to send to the remote node.\nEnum TransmissionPolicy; // Class represents ways of data handling for a file ready to be sent through an opened transmission sender session.\nClass TransmissionCancelledException; // Exception is used to cancel a file transmission operation on the receiver.\n", "des": "TODO."}
{"index": 139, "repo": "ignite-core-2.15.0", "code": "package deployment;\n\nInterface GridDeploymentInfo; // Deployment info.\nInterface GridDeploymentStore; // Interface for all deployment stores.\nClass GridDeployment; // Represents single class deployment.\nClass GridDeploymentInfoBean; // Deployment info bean.\nClass GridDeploymentManager; // Deployment manager.\nClass GridDeploymentMetadata; // Deployment metadata.\nClass GridDeploymentPerLoaderStore; // Deployment storage for DeploymentMode.PRIVATE and DeploymentMode.ISOLATED modes.\nClass GridDeploymentPerVersionStore; // Deployment storage for DeploymentMode.SHARED and DeploymentMode.CONTINUOUS modes.\nClass GridDeploymentRequest; // Deployment request.\nClass GridDeploymentResponse; // Grid deployment response containing requested resource bytes.\nClass P2PClassLoadingIssues;\nClass P2PClassNotFoundException; // A specialication of ClassNotFoundException thrown when a class cannot be loaded during P2P class-loading.\n", "des": "TODO."}
{"index": 140, "repo": "ignite-core-2.15.0", "code": "package gg;\n\nClass GridProtocolHandler; // Custom stream protocol handler implementation.\nClass GridUrlConnection; // Connection implementation for custom protocol.\n", "des": "Grid stream protocol implementation."}
{"index": 141, "repo": "ignite-core-2.15.0", "code": "package discovery;\n\nInterface CustomEventListener<T extends DiscoveryCustomMessage>; // Listener interface.\nInterface DiscoveryCustomMessage; // DiscoveryCustomMessage messages are handled by discovery protocol which provides some guarantees around them.\nInterface DiscoveryServerOnlyCustomMessage; // DiscoveryServerOnlyCustomMessage is the special subtype of the DiscoveryCustomMessage message that is delivered only on server nodes of the cluster.\nInterface IgniteClusterNode;\nInterface IgniteDiscoverySpi;\nInterface IgniteDiscoverySpiInternalListener; // For TESTING only.\nClass ClusterMetricsImpl; // Cluster metrics proxy.\nClass ConsistentIdMapper; // Class is needed for map UUID to consistent id and vice versa.\nClass CustomMessageWrapper;\nClass DiscoCache;\nClass DiscoveryLocalJoinData; // Information about local join event.\nClass DiscoveryMessageResultsCollector<M,R>;\nClass DiscoveryMessageResultsCollector.NodeMessage<M>;\nClass GridDiscoveryManager; // Discovery SPI manager.\nClass GridDiscoveryTopologySnapshot; // Topology snapshot managed by discovery manager.\nClass SecurityAwareCustomMessageWrapper; // Extends CustomMessageWrapper with ID of security subject that initiated the current message.\nClass IncompleteDeserializationException; // Exception which can be used to access a message which failed to be deserialized completely using Java serialization.\n", "des": "TODO."}
{"index": 142, "repo": "ignite-core-2.15.0", "code": "package encryption;\n\nInterface EncryptionCacheKeyProvider; // Provider for cache's encryption keys.\nClass CacheGroupPageScanner; // Cache group page stores scanner.\nClass ChangeCacheEncryptionRequest; // Change cache group encryption key request.\nClass EncryptionMXBeanImpl; // Encryption features MBean.\nClass GenerateEncryptionKeyRequest; // Generate encryption key request.\nClass GenerateEncryptionKeyResponse; // Generate encryption key response.\nClass GridEncryptionManager; // Manages cache keys and EncryptionSpi instances.\nClass GridEncryptionManager.EmptyResult;\nClass GridEncryptionManager.KeyChangeFuture; // Key change future.\nClass GridEncryptionManager.NodeEncryptionKeys;\nClass GroupKey; // Cache group encryption key with identifier.\nClass GroupKeyEncrypted; // Cache group encryption key with identifier.\nClass ReencryptStateUtils;\n", "des": "Encryption manager classes."}
{"index": 143, "repo": "ignite-core-2.15.0", "code": "package eventstorage;\n\nInterface DiscoveryEventListener; // Internal listener for discovery events.\nInterface GridLocalEventListener; // Listener for asynchronous local node grid events.\nInterface HighPriorityListener; // Marker interface for listeners called before 'regular' listeners.\nClass GridEventStorageManager; // Grid event storage SPI manager.\nClass GridEventStorageMessage; // Event storage message.\n", "des": "TODO."}
{"index": 144, "repo": "ignite-core-2.15.0", "code": "package failover;\n\nClass GridFailoverContextImpl; // GridFailoverContext implementation.\nClass GridFailoverManager; // Grid failover spi manager.\n", "des": "TODO."}
{"index": 145, "repo": "ignite-core-2.15.0", "code": "package indexing;\n\nClass GridIndexingManager; // Manages cache indexing.\nClass IndexesRebuildTask; // Task that rebuilds indexes.\n", "des": "Indexing manager classes."}
{"index": 146, "repo": "ignite-core-2.15.0", "code": "package loadbalancer;\n\nClass GridLoadBalancerAdapter; // This adapter allows for graceful exception when load balancer gets marshalled.\nClass GridLoadBalancerManager; // Load balancing manager.\n", "des": "TODO."}
{"index": 147, "repo": "ignite-core-2.15.0", "code": "package optimized;\n\nInterface OptimizedMarshallerIdMapper; // ID mapper.\nClass OptimizedMarshaller; // Optimized implementation of Marshaller.\nClass OptimizedObjectOutputStream; // Optimized object output stream.\nClass OptimizedObjectPooledStreamRegistry;\nClass OptimizedObjectSharedStreamRegistry;\nClass OptimizedMarshallerInaccessibleClassException;\n", "des": "Contains Optimized marshaller."}
{"index": 148, "repo": "ignite-core-2.15.0", "code": "package mxbean;\n\nClass IgniteStandardMXBean; // Extension of standard Java MBean.\n", "des": "Contains internal mxbeans stuff."}
{"index": 149, "repo": "ignite-core-2.15.0", "code": "package processors;\n\npackage processors.affinity; // Data affinity processor.\npackage processors.cache; // This package contain cache-related processors & persistence implementation.\npackage processors.cacheobject; // Cache object processor.\npackage processors.closure; // TODO.\npackage processors.datastreamer; // Data streamer processor.\npackage processors.dr; // Data center replication processor.\npackage processors.failure; // Failure processor.\npackage processors.job; // TODO.\npackage processors.jobmetrics; // Job metrics.\npackage processors.port; // TODO.\npackage processors.resource; // TODO.\npackage processors.rest; // REST processor.\npackage processors.schedule; // TODO.\npackage processors.segmentation; // Segmentation processor.\npackage processors.session; // Session processing package to guarantee reuse of same session object on the same node.\npackage processors.task; // TODO.\npackage processors.timeout; // TODO.\nInterface GridProcessor; // Interface for all processors.\nClass GridProcessorAdapter; // Advanced parent adapter for all processor.\n", "des": "Package with Apache Ignite internal Processors."}
{"index": 150, "repo": "ignite-core-2.15.0", "code": "package affinity;\n\nInterface AffinityAssignment; // Cached affinity calculations.\nInterface HistoryAffinityAssignment; // Interface for historical calculated affinity assignment.\nClass AffinityTopologyVersion;\nClass GridAffinityAssignment;\nClass GridAffinityAssignmentCache; // Affinity cached function.\nClass GridAffinityAssignmentV2; // Cached affinity calculations V2.\nClass GridAffinityFunctionContextImpl; // Cache affinity function context implementation.\nClass GridAffinityProcessor; // Data affinity processor.\nClass HistoryAffinityAssignmentImpl; // Heap-space optimized version of calculated affinity assignment.\nClass HistoryAffinityAssignmentShallowCopy; // Shallow copy that contains reference to delegate HistoryAffinityAssignment.\nClass IdealAffinityAssignment;\n", "des": "Data affinity processor."}
{"index": 151, "repo": "ignite-core-2.15.0", "code": "package cache;\n\npackage cache.binary; // Implementation of binary processor.\npackage cache.persistence; // This package contain cache with persistence implementation.\nInterface CacheClassLoaderMarker; // It's a marker interface for detecting GridCacheDeploymentManager$CacheClassLoader.\nInterface CacheConfigurationSplitter; // Splits cache configuration into two parts that can be serialized, deserialized separately.\nInterface CacheConflictResolutionManager<K,V>; // Conflict resolver manager.\nInterface CacheEntryPredicate;\nInterface CacheEvictionManager;\nInterface CacheLockCandidates;\nInterface CacheObject;\nInterface CacheObjectValueContext; // Context to get value of cache object.\nInterface CachePartitionExchangeWorkerTask; // Cache partition exchange worker task marker interface.\nInterface CacheWeakQueryIteratorsHolder.WeakReferenceCloseableIterator<T>;\nInterface GridCacheAtomicFuture<R>; // Update future for atomic cache.\nInterface GridCacheConcurrentMap; // Concurrent cache map.\nInterface GridCacheDeployable; // Deployable cache message.\nInterface GridCacheEntryEx; // Internal API for cache entry ('Ex' stands for extended).\nInterface GridCacheFuture<R>; // This interface should be implemented by all distributed futures.\nInterface GridCacheInternal; // Marker interface using in cache implementations.\nInterface GridCacheLockCallback; // Lock and Unlock callbacks.\nInterface GridCacheManager<K,V>; // Interface for cache managers.\nInterface GridCacheMapEntryFactory; // Factory for cache entries.\nInterface GridCachePreloader; // Cache preloader that is responsible for loading cache entries either from remote nodes (for distributed cache) or anywhere else at cache startup.\nInterface GridCacheSharedManager<K,V>; // Cache manager shared across all caches.\nInterface GridCacheUtils.BackupPostProcessingClosure;\nInterface GridCacheVersionedFuture<T>; // Distributed future aware of lock version.\nInterface IgniteCacheExpiryPolicy; // Wrapper for ExpiryPolicy used to track information about cache entries whose time to live was modified after access.\nInterface IgniteCacheOffheapManager;\nInterface IgniteCacheOffheapManager.CacheDataStore;\nInterface IgniteCacheOffheapManager.OffheapInvokeClosure;\nInterface IgniteCacheProxy<K,V>; // Cache proxy.\nInterface IgniteInternalCache<K,V>; // This interface provides a rich API for working with distributed caches.\n", "des": "This package contain cache-related processors & persistence implementation."}
{"index": 152, "repo": "ignite-core-2.15.0", "code": "package binary;\n\nInterface BinaryMetadataUpdatedListener; // Interface allows any component to register for events of binary metadata updates.\nInterface CacheObjectBinaryProcessorImpl.TestBinaryContext.TestBinaryContextListener;\nClass BinaryMetadataKey; // Key for binary metadata.\nClass CacheObjectBinaryProcessorImpl; // Binary processor implementation.\nClass CacheObjectBinaryProcessorImpl.TestBinaryContext;\nClass IgniteBinaryImpl; // IgniteBinary implementation.\nClass MetadataRemoveAcceptedMessage; // Acknowledge message for MetadataRemoveProposedMessage: see its javadoc for detailed description of protocol.\nClass MetadataRemoveProposedMessage; // MetadataRemoveProposedMessage and MetadataRemoveAcceptedMessage messages make a basis for discovery-based protocol for manage metadata describing objects in binary format stored in Ignite caches.\nClass MetadataRequestMessage; // As DiscoveryCustomMessage messages are delivered to client nodes asynchronously it is possible that server nodes are allowed to send to clients some BinaryObjects clients don't have metadata for.\nClass MetadataResponseMessage; // Carries latest version of metadata to client as a response for MetadataRequestMessage.\nClass MetadataUpdateAcceptedMessage; // Acknowledge message for MetadataUpdateProposedMessage: see its javadoc for detailed description of protocol.\nClass MetadataUpdateProposedMessage; // MetadataUpdateProposedMessage and MetadataUpdateAcceptedMessage messages make a basis for discovery-based protocol for exchanging metadata describing objects in binary format stored in Ignite caches.\n", "des": "Implementation of binary processor."}
{"index": 153, "repo": "ignite-core-2.15.0", "code": "package persistence;\n\npackage persistence.pagemem; // This package contains page memory implementation for case persitence is enabled.\nInterface CacheDataRow; // Cache data row.\nInterface CacheSearchRow;\nInterface CheckpointLockStateChecker; // Interface for perform checking that checkpoint lock is held by current track\nInterface DatabaseLifecycleListener;\nInterface IndexStorage; // Meta store.\nInterface PageStoreWriter; // Interface for write page to PageStore.\nInterface Storable; // Simple interface for data, store in some RowStore.\nClass CacheDataRowAdapter; // Cache data row adapter.\nClass CacheStripedExecutor; // Wrapper over StripedExecutor, that groups submitted tasks by cache group and partition.\nClass CheckCorruptedCacheStoresCleanAction;\nClass CleanCacheStoresMaintenanceAction;\nClass CorruptedPdsMaintenanceCallback;\nClass DataRegion; // Data region provides access to objects configured with DataRegionConfiguration configuration.\nClass DataRegionMetricsImpl;\nClass DataRegionMetricsSnapshot;\nClass DataRowCacheAware; // Data row implementation that can optionally hide the cache identifier and can set null as value.\nClass DataStorageMetricsImpl;\nClass DataStorageMXBeanImpl; // TransactionsMXBean implementation.\nClass DataStructure; // Base class for all the data structures based on PageMemory.\nClass FileLockHolder; // Abstract file lock holder.\nClass GridCacheDatabaseSharedManager;\nClass GridCacheDatabaseSharedManager.NodeFileLockHolder; // Node file lock holder.\nClass GridCacheOffheapManager; // Used when persistence enabled.\nClass GridCacheOffheapManager.GridCacheDataStore;\nClass IgniteCacheDatabaseSharedManager;\nClass IndexStorageImpl; // Metadata storage.\nClass IndexStorageImpl.IndexItem;\nClass IndexStorageImpl.MetaStoreInnerIO;\nClass IndexStorageImpl.MetaStoreLeafIO;\nClass RecoveryDebug;\nClass RootPage;\nClass RowStore; // Data store for H2 rows.\nEnum CacheDataRowAdapter.RowData;\nEnum CheckpointState; // Possible checkpoint states.\nClass CorruptedDataStructureException; // Abstract exception when DataStructure are corrupted.\nClass CorruptedPartitionMetaPageException; // Exception to distinguish partition meta page broken invariants.\nClass StorageException; // Exception is needed to distinguish WAL manager & page store critical I/O errors.\n", "des": "This package contain cache with persistence implementation."}
{"index": 154, "repo": "ignite-core-2.15.0", "code": "package pagemem;\n\nInterface LoadedPagesMap; // Interface for storing correspondence of page ID in a cache group to long value (address in offheap segment).\nInterface LoadedPagesMap.KeyPredicate; // Interface describing a predicate for Key (cache group ID, page ID).\nInterface PageMemoryEx; // Page memory with some persistence related additions.\nInterface PageMetrics; // Container for different memory page-related metrics.\nInterface PageReadWriteManager;\nInterface PageReplacementPolicyFactory; // Page replacement policy factory.\nInterface PagesWriteThrottlePolicy; // Throttling policy, encapsulates logic of delaying write operations.\nClass CheckpointMetricsTracker; // Tracks various checkpoint phases and stats.\nClass ClockPageReplacementFlags; // Clock page replacement algorithm implementation.\nClass ClockPageReplacementPolicy; // CLOCK page replacement policy implementation.\nClass ClockPageReplacementPolicyFactory; // ClockPageReplacementPolicy factory.\nClass DelayedDirtyPageStoreWrite; // Not thread safe and stateful class for page replacement of one page with write() delay.\nClass DelayedPageReplacementTracker; // Delayed page writes tracker.\nClass FullPageIdTable;\nClass PageMemoryImpl; // Page header structure is described by the following diagram.\nClass PageMetricsImpl;\nClass PageMetricsImpl.Builder; // Builder for PageMetricsImpl instances.\nClass PagePool;\nClass PageReadWriteManagerImpl;\nClass PageReplacementPolicy; // Abstract page replacement policy.\nClass PagesWriteSpeedBasedThrottle; // Throttles threads that generate dirty pages during ongoing checkpoint.\nClass PagesWriteThrottle; // Throttles threads that generate dirty pages during ongoing checkpoint.\nClass RandomLruPageReplacementPolicy; // Random-LRU page replacement policy implementation.\nClass RandomLruPageReplacementPolicyFactory; // RandomLruPageReplacementPolicy factory.\nClass ReplaceCandidate; // Replacement removal candidate.\nClass RobinHoodBackwardShiftHashMap; // Loaded pages mapping to relative pointer based on Robin Hood hashing: backward shift deletion algorithm.\nClass SegmentedLruPageList; // Pages Segmented-LRU (SLRU) list implementation.\nClass SegmentedLruPageReplacementPolicy; // Segmented-LRU page replacement policy implementation.\nClass SegmentedLruPageReplacementPolicyFactory; // SegmentedLruPageReplacementPolicy factory.\nEnum PageMemoryImpl.ThrottlingPolicy; // Throttling enabled and its type enum.\n", "des": "This package contains page memory implementation for case persitence is enabled."}
{"index": 155, "repo": "ignite-core-2.15.0", "code": "package cacheobject;\n\nInterface IgniteCacheObjectProcessor; // Cache objects processor.\nClass NoOpBinary;\nClass UserCacheObjectByteArrayImpl; // Wraps value provided by user, must be copied before stored in cache.\nClass UserCacheObjectImpl; // Wraps value provided by user, must be serialized before stored in cache.\nClass UserKeyCacheObjectImpl; // Wraps key provided by user, must be serialized before stored in cache.\n", "des": "Cache object processor."}
{"index": 156, "repo": "ignite-core-2.15.0", "code": "package closure;\n\nInterface AffinityTask; // Affinity mapped task.\nClass GridClosureProcessor;\nClass GridClosureProcessor.C1<T,R>;\nClass GridClosureProcessor.C1MLA<T,R>;\nClass GridClosureProcessor.C2<R>;\nClass GridClosureProcessor.C2MLA<R>;\nClass GridClosureProcessor.C4;\nClass GridClosureProcessor.C4MLA;\nClass GridPeerDeployAwareTaskAdapter<T,R>; // Peer deployment aware task adapter.\n", "des": "TODO."}
{"index": 157, "repo": "ignite-core-2.15.0", "code": "package datastreamer;\n\nInterface DataStreamerCacheUpdaters.InternalUpdater; // Marker interface for updaters which do not need to unwrap cache objects.\nClass DataStreamerCacheUpdaters; // Bundled factory for cache updaters.\nClass DataStreamerEntry;\nClass DataStreamerImpl<K,V>; // Data streamer implementation.\nClass DataStreamerImpl.IsolatedUpdater; // Isolated receiver which only loads entry initial value.\nClass DataStreamerRequest;\nClass DataStreamerResponse;\nClass DataStreamProcessor<K,V>; // Data stream processor.\n", "des": "Data streamer processor."}
{"index": 158, "repo": "ignite-core-2.15.0", "code": "package dr;\n\nClass IgniteDrDataStreamerCacheUpdater; // Data center replication cache receiver for data streamer.\nEnum GridDrType; // Data center replication type.\n", "des": "Data center replication processor."}
{"index": 159, "repo": "ignite-core-2.15.0", "code": "package failure;\n\nClass FailureProcessor; // General failure processing API\n", "des": "Failure processor."}
{"index": 160, "repo": "ignite-core-2.15.0", "code": "package job;\n\nClass GridJobProcessor; // Responsible for all grid job execution and communication.\nClass GridJobWorker; // Job worker.\nClass JobWorkerInterruptionTimeoutObject; // Timeout object for delayed worker interruption.\nEnum ComputeJobStatusEnum; // Compute job status.\n", "des": "TODO."}
{"index": 161, "repo": "ignite-core-2.15.0", "code": "package jobmetrics;\n\nClass GridJobMetrics; // Check the ReadOnlyMetricRegistry with \"name=compute.jobs\" instead.\nClass GridJobMetricsProcessor; // Check the ReadOnlyMetricRegistry with \"name=compute.jobs\" instead.\nClass GridJobMetricsSnapshot; // Check the ReadOnlyMetricRegistry with \"name=compute.jobs\" instead.\n", "des": "Job metrics."}
{"index": 162, "repo": "ignite-core-2.15.0", "code": "package port;\n\nInterface GridPortListener; // Listener for port change events.\nClass GridPortProcessor; // Registers and deregisters all ports used by SPI and Manager.\nClass GridPortRecord; // This class defines record about port use.\n", "des": "TODO."}
{"index": 163, "repo": "ignite-core-2.15.0", "code": "package resource;\n\nInterface DependencyResolver; // The interface specifies a container of dependencies.\nInterface GridNoImplicitInjection; // Disables injection.\nInterface GridSpringResourceContext; // Interface was introduced to avoid compile-time dependency on spring framework.\nClass GridResourceIoc; // Resource container contains caches for classes used for injection.\nClass GridResourceJobContextInjector; // Simple injector which wraps ComputeJobContext resource object.\nClass GridResourceLoggerInjector;\nClass GridResourceProcessor; // Processor for all Ignite and task/job resources.\nClass GridResourceProxiedIgniteInjector; // Ignite instance injector.\nClass GridResourceServiceInjector; // Grid service injector.\nClass NoopDependencyResolver; // Noop implementation of dependency resolver.\nEnum GridResourceIoc.AnnotationSet;\n", "des": "TODO."}
{"index": 164, "repo": "ignite-core-2.15.0", "code": "package rest;\n\npackage rest.handlers; // REST commands handlers.\npackage rest.protocols; // REST protocol handlers.\npackage rest.request; // REST requests.\nInterface GridRestProtocol; // REST protocol.\nInterface GridRestProtocolHandler; // Command protocol handler.\nInterface IgniteRestProcessor; // REST processor marker interface.\nClass GridRestProcessor; // Rest processor implementation.\nClass GridRestResponse; // JSON response.\nEnum GridRestCommand; // Supported commands.\n", "des": "REST processor."}
{"index": 165, "repo": "ignite-core-2.15.0", "code": "package message;\n\nInterface GridClientMessage; // Interface for all client messages.\nClass GridClientAbstractMessage; // This class provides implementation for commit message fields and cannot be used directly.\nClass GridClientAuthenticationRequest; // Client authentication request.\nClass GridClientBinaryMetaData; // Binary meta data sent from client.\nClass GridClientCacheBean; // Cache bean.\nClass GridClientCacheRequest; // Generic cache request.\nClass GridClientClusterNameRequest;\nClass GridClientClusterStateRequest; // Use GridClientClusterStateRequestV2\nClass GridClientClusterStateRequestV2; // Enhanced version of GridClientClusterStateRequest.\nClass GridClientHandshakeRequest; // A client handshake request, containing version info and a marshaller ID.\nClass GridClientHandshakeResponse; // A client handshake response, containing result code.\nClass GridClientNodeBean; // Node bean.\nClass GridClientNodeMetricsBean; // Node metrics bean.\nClass GridClientNodeStateBeforeStartRequest; // Request to manage and obtain information about node before its start.\nClass GridClientPingPacket; // Fictive ping packet.\nClass GridClientResponse; // Bean representing client operation result.\nClass GridClientStateRequest; // Use GridClientClusterStateRequest instead.\nClass GridClientTaskRequest; // Task command request.\nClass GridClientTaskResultBean; // Task result.\nClass GridClientTopologyRequest; // Topology command request.\nClass GridClientWarmUpRequest;\nClass GridRouterRequest; // Container for routed message information.\nClass GridRouterResponse;\nEnum GridClientCacheRequest.GridCacheOperation; // Available cache operations.\n", "des": "Defines messages that are used in binary TCP communication between Ignite clients and nodes."}
{"index": 166, "repo": "ignite-core-2.15.0", "code": "package handlers;\n\npackage handlers.auth; // REST authentication command.\npackage handlers.cache; // REST in-memory data grid commands.\npackage handlers.redis; // Contains Redis protocol commands.\npackage handlers.top; // REST topology commands.\npackage handlers.user; // REST user commands.\npackage handlers.version; // REST version command.\nInterface GridRestCommandHandler; // Command handler.\nClass GridRestCommandHandlerAdapter; // Abstract command handler.\n", "des": "REST commands handlers."}
{"index": 167, "repo": "ignite-core-2.15.0", "code": "package auth;\n\nClass AuthenticationCommandHandler; // Authentication handler.\n", "des": "REST authentication command."}
{"index": 168, "repo": "ignite-core-2.15.0", "code": "package cache;\n\nClass GridCacheCommandHandler; // Command handler for API requests.\nClass GridCacheRestMetrics; // Grid cache metrics for rest.\nClass GridCacheRestResponse; // Adds affinity node ID to cache responses.\n", "des": "REST in-memory data grid commands."}
{"index": 169, "repo": "ignite-core-2.15.0", "code": "package redis;\n\nInterface GridRedisCommandHandler; // Command handler.\nClass GridRedisConnectionCommandHandler; // Redis connection handler.\nClass GridRedisRestCommandHandler; // Redis command handler done via REST.\n", "des": "Contains Redis protocol commands."}
{"index": 170, "repo": "ignite-core-2.15.0", "code": "package top;\n\nClass GridTopologyCommandHandler; // Command handler for API requests.\n", "des": "REST topology commands."}
{"index": 171, "repo": "ignite-core-2.15.0", "code": "package user;\n\nClass UserActionCommandHandler; // User actions handler.\n", "des": "REST user commands."}
{"index": 172, "repo": "ignite-core-2.15.0", "code": "package version;\n\nClass GridVersionCommandHandler; // Handler for GridRestCommand.VERSION and GridRestCommand.NAME command.\n", "des": "REST version command."}
{"index": 173, "repo": "ignite-core-2.15.0", "code": "package protocols;\n\npackage protocols.tcp; // Adapters for TCP-based REST protocols.\nClass GridRestProtocolAdapter; // Abstract protocol adapter.\n", "des": "REST protocol handlers."}
{"index": 174, "repo": "ignite-core-2.15.0", "code": "package tcp;\n\nClass GridMemcachedMessage; // Memcached protocol request.\nClass GridTcpMemcachedNioListener; // Handles memcache requests.\nClass GridTcpRestNioListener; // Listener for nio server that handles incoming tcp rest packets.\nClass GridTcpRestParser; // Parser for extended memcache protocol.\nClass GridTcpRestParser.HeaderData; // Header.\nClass GridTcpRestParser.ParserState; // Holder for parser state and temporary buffer.\nClass GridTcpRestProtocol; // TCP binary protocol implementation.\nEnum GridClientPacketType; // Type of message being parsed.\n", "des": "Adapters for TCP-based REST protocols."}
{"index": 175, "repo": "ignite-core-2.15.0", "code": "package request;\n\nClass DataStructuresRequest;\nClass GridRestAuthenticationRequest; // Grid authentication request.\nClass GridRestBaselineRequest; // Grid command topology request.\nClass GridRestCacheRequest; // Cache command request descriptor.\nClass GridRestChangeStateRequest;\nClass GridRestClusterNameRequest; // Grid command request of cluster name.\nClass GridRestClusterStateRequest;\nClass GridRestLogRequest; // Grid command request of log file.\nClass GridRestNodeStateBeforeStartRequest; // Request to manage and obtain information about node before its start.\nClass GridRestRequest; // Grid command request.\nClass GridRestTaskRequest; // Grid task command request.\nClass GridRestTopologyRequest; // Grid command topology request.\nClass GridRestWarmUpRequest; // Grid warm-up request.\nClass RestQueryRequest; // Sql query request.\nClass RestUserActionRequest; // User request.\nEnum RestQueryRequest.QueryType; // Supported query types.\n", "des": "REST requests."}
{"index": 176, "repo": "ignite-core-2.15.0", "code": "package schedule;\n\nClass IgniteNoopScheduleProcessor; // No-op implementation of IgniteScheduleProcessorAdapter, throws exception on usage attempt.\nClass IgniteScheduleProcessorAdapter; // Schedules cron-based execution of grid tasks and closures.\n", "des": "TODO."}
{"index": 177, "repo": "ignite-core-2.15.0", "code": "package segmentation;\n\nInterface GridSegmentationProcessor; // Kernal processor responsible for checking network segmentation issues.\n", "des": "Segmentation processor."}
{"index": 178, "repo": "ignite-core-2.15.0", "code": "package session;\n\nClass GridTaskSessionProcessor;\n", "des": "Session processing package to guarantee reuse of same session object on the same node."}
{"index": 179, "repo": "ignite-core-2.15.0", "code": "package task;\n\nClass GridTaskProcessor; // This class defines task processor.\nClass GridTaskWorker<T,R>; // Grid task worker.\nClass TaskExecutionOptions;\nAnnotation Type GridInternal; // Indicates that annotated task should always be loaded with local deployment, ignoring grid source node configuration.\nAnnotation Type GridVisorManagementTask; // Indicates that annotated task is a visor task that was invoked by user.\n", "des": "TODO."}
{"index": 180, "repo": "ignite-core-2.15.0", "code": "package timeout;\n\nInterface GridTimeoutObject; // All objects that can timeout should implement this interface.\nClass GridSpiTimeoutObject; // Wrapper for IgniteSpiTimeoutObject.\nClass GridTimeoutObjectAdapter; // Default implementation for GridTimeoutObject.\nClass GridTimeoutProcessor; // Detects timeout events and processes them.\n", "des": "TODO."}
{"index": 181, "repo": "ignite-core-2.15.0", "code": "package suggestions;\n\nClass GridPerformanceSuggestions; // Grid performance suggestions.\nClass JvmConfigurationSuggestions; // Java Virtual Machine configuration suggestions.\nClass OsConfigurationSuggestions; // Operation System configuration suggestions.\n", "des": "Contains classes for configurations suggestions."}
{"index": 182, "repo": "ignite-core-2.15.0", "code": "package util;\n\npackage util.future; // Future related classes.\npackage util.ipc; // IPC utility classes.\npackage util.nio; // NIO server interfaces and common utility classes for NIO.\npackage util.scala; // Scala supporting classes.\npackage util.test; // Contains common utility classes for JUnit integration.\npackage util.tostring; // Common utility classes for threads.\npackage util.typedef; // Contains typedefs definitions for frequently used classes.\npackage util.worker; // Common utility classes for threads.\nInterface ClassCache; // Class cache.\nInterface DirectBufferCleaner; // Cleaner interface for java.nio.ByteBuffer.\nInterface GridIntIterator; // Iterator over integer primitives.\nInterface GridSerializableIterable<E>; // Makes Iterable as Serializable and is useful for making anonymous serializable iterators.\nInterface GridSerializableIterator<E>; // Makes Iterator as Serializable and is useful for making anonymous serializable iterators.\nInterface IgniteTree<L,T>; // Interface for ignite internal tree.\nInterface IgniteTree.InvokeClosure<T>;\nInterface IgniteUtils.InterfaceSupplier; // Explicit class for Supplier<Enumeration<NetworkInterface>>.\nClass BasicRateLimiter; // The simplified version of Google Guava smooth rate limiter.\nClass F0; // Internal utility class that contains not peer-deployable predicates for use in internal logic.\nClass FeatureChecker; // Class extracted for fields from GridUnsafe to be absolutely independent with current and future static block initialization effects.\nClass GridAnnotationsCache; // Caches class loaders for classes.\nClass GridArgumentCheck; // This class encapsulates argument check (null and range) for public facing APIs.\nClass GridArrays; // Utility methods to work with arrays.\nClass GridAtomicInitializer<T>; // Executes initialization operation once.\nClass GridAtomicInteger; // Extended version of AtomicInteger.\nClass GridAtomicLong; // Extended version of AtomicLong.\nClass GridBoundedConcurrentLinkedHashMap<K,V>; // Concurrent map with an upper bound.\nClass GridBoundedConcurrentLinkedHashSet<E>; // Concurrent set with an upper bound.\nClass GridBoundedConcurrentOrderedMap<K,V>; // Concurrent ordered map that automatically manages its maximum size.\n", "des": "System-wide utility routine and helper classes."}
{"index": 183, "repo": "ignite-core-2.15.0", "code": "package future;\n\nClass AsyncFutureListener<V>; // Wraps listener and executes it in specified executor.\nClass CountDownFuture;\nClass GridCompoundFuture<T,R>; // Future composed of multiple inner futures.\nClass GridCompoundIdentityFuture<T>; // Compound future with reducer which accepts and produces results of the same type.\nClass GridEmbeddedFuture<A,B>; // Future which waits for embedded future to complete and then asynchronously executes provided closure with embedded future result.\nClass GridFinishedFuture<T>; // Future that is completed at creation time.\nClass GridFutureAdapter<R>; // Future adapter.\nClass IgniteFinishedFutureImpl<V>;\nClass IgniteFutureImpl<V>; // Implementation of public API future.\nClass IgniteRemoteMapTask<T,R>; // Util task that will execute ComputeTask on a given node.\n", "des": "Future related classes."}
{"index": 184, "repo": "ignite-core-2.15.0", "code": "package ipc;\n\npackage ipc.loopback; // Loopback IPC utility classes.\nInterface IpcEndpoint; // IPC endpoint used for point-to-point communication.\nInterface IpcServerEndpoint; // IPC server endpoint that is capable for client connections accepting.\nClass IpcEndpointFactory; // endpoint factory for inter-process communication.\nClass IpcToNioAdapter<T>; // Allows to re-use existing GridNioFilters on IPC (specifically shared memory IPC) communications.\nEnum IpcEndpointType; // IPC endpoint type.\nClass IpcEndpointBindException; // Represents exception occurred during IPC endpoint binding.\n", "des": "IPC utility classes."}
{"index": 185, "repo": "ignite-core-2.15.0", "code": "package loopback;\n\nClass IpcClientTcpEndpoint; // Loopback IPC endpoint based on socket.\nClass IpcServerTcpEndpoint; // Server loopback IPC endpoint.\n", "des": "Loopback IPC utility classes."}
{"index": 186, "repo": "ignite-core-2.15.0", "code": "package gridfunc;\n\nClass AlwaysFalsePredicate<E>; // Defines a predicate which accepts a parameter and always returns false\nClass AlwaysTruePredicate<E>; // Defines a predicate which accepts a parameter and always returns true\nClass AlwaysTrueReducer<T>; // Reducer which always returns true from IgniteReducer.collect(Object)\nClass AtomicIntegerFactoryCallable; // Atomic integer factory.\nClass CacheEntryGetValueClosure; // Cache entry to get-value transformer closure.\nClass CacheEntryHasPeekPredicate; // Cache entry has-peek-value predicate.\nClass ClusterNodeGetIdClosure; // Grid node to node ID transformer closure.\nClass ConcurrentHashSetFactoryCallable; // Concurrent hash set factory.\nClass ConcurrentMapFactoryCallable; // Concurrent hash map factory.\nClass ContainsNodeIdsPredicate<T extends ClusterNode>; // Grid node predicate evaluating on the given node IDs.\nClass ContainsPredicate<T>; // Predicate which returns true if it receives an element that is contained in the passed in collection.\nClass EntryByKeyEvaluationPredicate<K,V>; // Predicate evaluates to true for given value.\nClass EqualsClusterNodeIdPredicate<T extends ClusterNode>; // Creates grid node predicate evaluating on the given node ID.\nClass EqualsUuidPredicate; // UUID equals predicate.\nClass FlatCollectionWrapper<T>; // Wrapper which iterable over the elements of the inner collections.\nClass FlatIterator<T>; // Iterator over the elements of given iterators.\nClass HasEqualIdPredicate<T extends ClusterNode>; // ClusterNode has equal id predicate.\nClass HasNotEqualIdPredicate<T extends ClusterNode>; // ClusterNode node has NOT equal id predicate.\nClass IdentityClosure; // Identity closure.\nClass IntSumReducer; // Reducer that calculates sum of integer elements.\nClass IsAllPredicate<T>; // Predicate that evaluates to true if each of its component preds evaluates to true.\nClass IsNotAllPredicate<T>; // Negated predicate.\nClass IsNotNullPredicate<E>; // Defines a predicate which checks a parameter on null.\nClass LongSumReducer; // Reducer that calculates sum of long integer elements.\nClass MapFactoryCallable; // Hash map factory.\nClass MultipleIterator<T>; // Concatenates multiple iterators as single one.\nClass NoOpClosure; // Absolute closure that does nothing.\n", "des": "Contains utilities classes for GridFunc."}
{"index": 187, "repo": "ignite-core-2.15.0", "code": "package nio;\n\npackage nio.ssl; // Implementation of Secure Socket Layer filter for NIO server based on SSLEngine class.\nInterface GridCommunicationClient;\nInterface GridNioFilter; // This interface defines the general element in transformation chain between the nio server and application.\nInterface GridNioFuture<R>; // NIO future.\nInterface GridNioMessageReader; // Message reader.\nInterface GridNioMessageReaderFactory; // Message reader factory.\nInterface GridNioMessageWriter; // Message writer.\nInterface GridNioMessageWriterFactory; // Message writer factory.\nInterface GridNioParser; // This interface declares a basic contract on message parsing and encoding to the underlying network layer.\nInterface GridNioServerListener<T>; // Listener passed in to the GridNioServer that will be notified on client events.\nInterface GridNioSession; // This interface represents established or closed connection between nio server and remote client.\nInterface SessionWriteRequest;\nClass GridAbstractCommunicationClient; // Implements basic lifecycle for communication clients.\nClass GridBufferedParser; // This class implements stream parser based on GridNioServerBuffer.\nClass GridConnectionBytesVerifyFilter; // Verifies that first bytes received in accepted (incoming) NIO session are equal to IgniteUtils.IGNITE_HEADER.\nClass GridDelimitedParser; // This class implements stream parser based on GridNioDelimitedBuffer.\nClass GridDirectParser; // Parser for direct messages.\nClass GridNioAsyncNotifyFilter; // Enables multithreaded notification of session opened, message received and session closed events.\nClass GridNioBackPressureControl; // Utility class that allows to ignore back-pressure control for threads that are processing messages.\nClass GridNioCodecFilter; // Filter that transforms byte buffers to user-defined objects and vice-versa with specified GridNioParser.\nClass GridNioDelimitedBuffer; // Buffer with message delimiter support.\nClass GridNioEmbeddedFuture<R>; // Future that delegates to some other future.\nClass GridNioFilterAdapter; // Class that defines the piece for application-to-network and vice-versa data conversions (protocol transformations, encryption, etc.)\nClass GridNioFilterChain<T>; // Filter chain implementation for nio server filters.\nClass GridNioFinishedFuture<R>; // Future that represents already completed result.\n", "des": "NIO server interfaces and common utility classes for NIO."}
{"index": 188, "repo": "ignite-core-2.15.0", "code": "package ssl;\n\nClass BlockingSslHandler;\nClass GridNioSslFilter; // Implementation of SSL filter using SSLEngine\nClass GridSslMeta;\n", "des": "Implementation of Secure Socket Layer filter for NIO server based on SSLEngine class."}
{"index": 189, "repo": "ignite-core-2.15.0", "code": "package scala;\n\nAnnotation Type impl; // Documentation annotation for Scala.\n", "des": "Scala supporting classes."}
{"index": 190, "repo": "ignite-core-2.15.0", "code": "package test;\n\nClass GridTestPrintStream; // Print stream that prints each thread group into a separate buffer.\nClass GridTestPrintStreamFactory; // Factory that allow to acquire/release Print Stream for test logging.\n", "des": "Contains common utility classes for JUnit integration."}
{"index": 191, "repo": "ignite-core-2.15.0", "code": "package tostring;\n\nClass CircularStringBuilder; // Basic string builder over circular buffer.\nClass GridToStringBuilder; // Provides auto-generation framework for toString() output.\nClass SBLimitedLength;\nAnnotation Type GridToStringExclude; // Attach this annotation to a field or a class to indicate that this field or fields of this class should not be included in toString() output.\nAnnotation Type GridToStringInclude; // Attach this annotation to a field or a class to indicate that this field or fields of this class should be included in toString() output.\nAnnotation Type GridToStringOrder; // Attach this annotation to a field to provide its order in toString() output.\n", "des": "Common utility classes for threads."}
{"index": 192, "repo": "ignite-core-2.15.0", "code": "package typedef;\n\npackage typedef.internal; // Contains internal typedefs.\nInterface C1<E1,R>; // Defines alias for IgniteClosure by extending it.\nInterface C2<E1,E2,R>; // Defines alias for IgniteBiClosure by extending it.\nInterface C3<E1,E2,E3,R>; // Defines alias for GridClosure3 by extending it.\nInterface CI1<T>; // Defines alias for IgniteInClosure by extending it.\nInterface CI2<E1,E2>; // Defines alias for IgniteBiInClosure by extending it.\nInterface CI3<E1,E2,E3>; // Defines alias for GridInClosure3 by extending it.\nInterface CO<T>; // Defines alias for IgniteOutClosure by extending it.\nInterface P1<E1>; // Defines alias for IgnitePredicate by extending it.\nInterface P2<T1,T2>; // Defines alias for IgniteBiPredicate by extending it.\nInterface P3<T1,T2,T3>; // Defines alias for GridPredicate3 by extending it.\nInterface PA; // Defines alias for GridAbsPredicate by extending it.\nInterface PCE<K,V>; // Defines alias for GridPredicate<Entry<K, V>> by extending IgnitePredicate.\nInterface PE; // Defines alias for GridPredicate<GridEvent> by extending IgnitePredicate.\nInterface PKV<K,V>; // Defines alias for GridPredicate2<K, V> by extending IgnitePredicate.\nInterface PN; // Defines alias for GridPredicate<ClusterNode> by extending IgnitePredicate.\nInterface R1<E1,R>; // Defines alias for IgniteReducer by extending it.\nInterface R2<E1,E2,R>; // Defines alias for IgniteReducer2 by extending it.\nInterface R3<E1,E2,E3,R>; // Defines alias for IgniteReducer3 by extending it.\nClass CA; // Defines alias for GridAbsClosure by extending it.\n", "des": "Contains typedefs definitions for frequently used classes."}
{"index": 193, "repo": "ignite-core-2.15.0", "code": "package internal;\n\nInterface GPC<T>; // Defines internal typedef for GridPlainCallable.\nInterface GPR; // Defines internal typedef for GridPlainRunnable.\nClass A; // Defines internal typedef for GridArgumentCheck.\nClass CU; // Defines internal typedef for GridCacheUtils.\nClass D; // Convenience alias for GridDebug class.\nClass LT; // Defines internal typedef for GridLogThrottle.\nClass S; // Defines internal typedef for GridToStringBuilder.\nClass SB; // Defines internal typedef for GridStringBuilder.\nClass U; // Defines internal typedef for IgniteUtils.\n", "des": "Contains internal typedefs."}
{"index": 194, "repo": "ignite-core-2.15.0", "code": "package worker;\n\nInterface GridWorkerListener; // This interface defines worker listener.\nInterface WorkProgressDispatcher; // Dispatcher of workers' progress which allows us to understand if worker freezes.\nClass CycleThread; // Thread wrapper for standart cycle operations.\nClass GridWorker; // Extension to standard Runnable interface.\nClass GridWorkerFuture<T>; // Future for locally executed closure that defines cancellation logic.\nClass GridWorkerListenerAdapter; // Convenience adapter for GridWorkerListener.\nClass GridWorkerPool; // Pool of runnable workers.\n", "des": "Common utility classes for threads."}
{"index": 195, "repo": "ignite-core-2.15.0", "code": "package worker;\n\nClass WorkersControlMXBeanImpl; // MBean that provides control of system workersRegistry.\nClass WorkersRegistry; // Workers registry.\n", "des": "System worker registry and control MBean implementation."}
{"index": 196, "repo": "ignite-core-2.15.0", "code": "package jsr166;\n\nClass ConcurrentHashMap8<K,V>; // need for java deserialization ConcurrentHashMap8 from old nodes.\nClass ConcurrentLinkedDeque8<E>; // An unbounded concurrent deque based on linked nodes.\nClass ConcurrentLinkedDeque8.Node<E>;\nClass ConcurrentLinkedHashMap<K,V>; // A hash table supporting full concurrency of retrievals and adjustable expected concurrency for updates.\nClass ConcurrentLinkedHashMap.HashEntry<K,V>; // ConcurrentHashMap list entry.\nEnum ConcurrentLinkedHashMap.QueuePolicy; // Defines queue policy for this hash map.\n", "des": "Package contains classes that from JSR166."}
{"index": 197, "repo": "ignite-core-2.15.0", "code": "package mindrot;\n\nClass BCrypt; // BCrypt implements OpenBSD-style Blowfish password hashing using the scheme described in \"A Future-Adaptable Password Scheme\" by Niels Provos and David Mazieres.\n", "des": "Package contains class that from jbcrypt."}
{"index": 198, "repo": "nutch-2.4", "code": "package api;\n\npackage api.impl; // Implementations of REST API interfaces.\nInterface ConfManager;\nInterface JobManager;\nClass NutchServer;\nEnum JobManager.JobType;\n", "des": "REST API to run and control crawl jobs."}
{"index": 199, "repo": "nutch-2.4", "code": "package impl;\n\nClass JobFactory;\nClass JobWorker;\nClass NutchServerPoolExecutor;\nClass RAMConfManager; // Configuration manager which holds a map of Configuration type configurations and ids.\nClass RAMJobManager;\n", "des": "Implementations of REST API interfaces."}
{"index": 200, "repo": "nutch-2.4", "code": "package extractor;\n\npackage extractor.normalizer; // Normalizers for jsoup-extractor\nClass JsoupDocument;\nClass JsoupDocument.DocumentField;\nClass JsoupDocumentReader;\nClass JsoupExtractorConstants;\n", "des": "core package of jsoup-extractor containing XML configuration parser, document structure"}
{"index": 201, "repo": "nutch-2.4", "code": "package normalizer;\n\nInterface Normalizable;\nClass SimpleStringNormalizer;\n", "des": "Normalizers for jsoup-extractor"}
{"index": 202, "repo": "nutch-2.4", "code": "package crawl;\n\nInterface FetchSchedule; // This interface defines the contract for implementations that manipulate fetch times and re-fetch intervals.\nClass AbstractFetchSchedule; // This class provides common methods for implementations of FetchSchedule.\nClass AdaptiveFetchSchedule; // This class implements an adaptive re-fetch algorithm.\nClass CrawlStatus;\nClass DbUpdateMapper;\nClass DbUpdateReducer;\nClass DbUpdaterJob;\nClass DefaultFetchSchedule; // This class implements the default re-fetch schedule.\nClass FetchScheduleFactory; // Creates and caches a FetchSchedule implementation.\nClass GeneratorJob;\nClass GeneratorJob.SelectorEntry;\nClass GeneratorJob.SelectorEntryComparator;\nClass GeneratorMapper;\nClass GeneratorReducer; // Reduce class for generate The #reduce() method write a random integer to all generated URLs.\nClass InjectorJob; // This class takes a flat file of URLs and adds them to the of pages to be crawled.\nClass InjectorJob.UrlMapper;\nClass MD5Signature; // Default implementation of a page signature.\nClass NutchWritable;\nClass Signature;\nClass SignatureComparator;\nClass SignatureFactory; // Factory class, which instantiates a Signature implementation according to the current Configuration configuration.\nClass TextMD5Signature; // Default implementation of a page signature.\nClass TextProfileSignature; // An implementation of a page signature.\nClass URLPartitioner; // Partition urls by host, domain name or IP depending on the value of the parameter 'partition.url.mode' which can be 'byHost', 'byDomain' or 'byIP'\nClass URLPartitioner.FetchEntryPartitioner;\nClass URLPartitioner.SelectorEntryPartitioner;\nClass URLWebPage;\nClass UrlWithScore; // A writable comparable container for an url with score.\nClass UrlWithScore.UrlOnlyPartitioner; // A partitioner by {url}.\nClass UrlWithScore.UrlScoreComparator; // Compares by {url,score}.\nClass UrlWithScore.UrlScoreComparator.UrlOnlyComparator; // Compares by {url}.\nClass WebTableReader; // Displays information about the entries of the webtable\nClass WebTableReader.WebTableRegexMapper; // Filters the entries from the table based on a regex\nClass WebTableReader.WebTableStatCombiner;\nClass WebTableReader.WebTableStatMapper;\n", "des": "Crawl control code and tools to run the crawler."}
{"index": 203, "repo": "nutch-2.4", "code": "package fetcher;\n\nClass FetchEntry;\nClass FetcherJob; // Multi-threaded fetcher.\nClass FetcherJob.FetcherMapper; // Mapper class for Fetcher.\nClass FetcherReducer;\n", "des": "The Nutch robot."}
{"index": 204, "repo": "nutch-2.4", "code": "package host;\n\nClass HostDb; // A caching wrapper for the host datastore.\nClass HostDbReader; // Display entries from the hostDB.\nClass HostDbUpdateJob; // Scans the web table and create host entries for each unique host.\nClass HostDbUpdateJob.Mapper; // Maps each WebPage to a host key.\nClass HostDbUpdateReducer; // Combines all WebPages with the same host key to create a Host object, with some statistics.\nClass HostInjectorJob; // Creates or updates an existing host table from a text file. The files contain one host name per line, optionally followed by custom metadata separated by tabs with the metadata key is separated from the corresponding value by '='.\nClass HostInjectorJob.UrlMapper;\n", "des": "Host database to store metadata per host."}
{"index": 205, "repo": "nutch-2.4", "code": "package indexer;\n\npackage indexer.html; // Index raw HTML content.\npackage indexer.anchor; // An indexing plugin for inbound anchor text.\npackage indexer.basic; // A basic indexing plugin, adds basic fields: url, host, title, content, etc.\npackage indexer.metadata; // Indexing filter to add document metadata to the index.\npackage indexer.more; // A more indexing plugin, adds \"more\" index fields: last modified date, MIME type, content length.\npackage indexer.subcollection; // Indexing filter to assign documents to subcollections.\npackage indexer.tld; // Top Level Domain Indexing plugin.\nInterface IndexCleaningFilter; // Extension point for indexing.\nInterface IndexingFilter; // Extension point for indexing.\nInterface IndexWriter;\nClass CleaningJob;\nClass CleaningJob.CleanMapper;\nClass CleaningJob.CleanReducer;\nClass IndexCleaningFilters; // Creates and caches IndexCleaningFilter implementing plugins.\nClass IndexerOutputFormat;\nClass IndexingFilters; // Creates and caches IndexingFilter implementing plugins.\nClass IndexingFiltersChecker; // Reads and parses a URL and run the indexers on it.\nClass IndexingJob;\nClass IndexingJob.IndexerMapper;\nClass IndexUtil; // Utility to create an indexed document from a webpage.\nClass IndexWriters; // Creates and caches IndexWriter implementing plugins.\nClass NutchDocument; // A NutchDocument is the unit of indexing.\nClass IndexingException;\n", "des": "Index content, configure and run indexing and cleaning jobs to add, update, and delete documents from an index."}
{"index": 206, "repo": "nutch-2.4", "code": "package html;\n\nClass HtmlIndexingFilter; // Add raw HTML content of a document to the index.\n", "des": "Index raw HTML content."}
{"index": 207, "repo": "nutch-2.4", "code": "package extractor;\n\nClass JsoupIndexingFilter;\n", "des": "Indexing filter for jsoup-extractor plugin"}
{"index": 208, "repo": "nutch-2.4", "code": "package elastic;\n\nInterface ElasticConstants;\nClass ElasticIndexWriter;\n", "des": "Index writer plugin for Elasticsearch."}
{"index": 209, "repo": "nutch-2.4", "code": "package hbase;\n\nClass HBaseIndexWriter;\nClass HBaseMappingReader;\n", "des": "Index writer plugin for Apache HBase."}
{"index": 210, "repo": "nutch-2.4", "code": "package metadata;\n\nInterface CreativeCommons; // A collection of Creative Commons properties names.\nInterface DublinCore; // A collection of Dublin Core metadata names.\nInterface Feed; // A collection of Feed property names extracted by the ROME library.\nInterface HttpHeaders; // A collection of HTTP header names.\nInterface Nutch; // A collection of Nutch internal metadata constants.\nClass Metadata; // A multi-valued metadata container.\nClass MetaWrapper; // This is a simple decorator that adds metadata to any Writable-s that can be serialized by NutchWritable.\nClass SpellCheckedMetadata; // A decorator to Metadata that adds spellchecking capabilities to property names.\n", "des": "A Multi-valued Metadata container, and set of constant fields for Nutch Metadata."}
{"index": 211, "repo": "nutch-2.4", "code": "package net;\n\npackage net.protocols; // Helper classes related to the Protocol interface, sea also org.apache.nutch.protocol.\nInterface URLFilter; // Interface used to limit which URLs enter Nutch.\nInterface URLNormalizer; // Interface used to convert URLs to normal form and optionally perform substitutions\nClass URLFilterChecker; // Checks one given filter or all filters.\nClass URLFilters; // Creates and caches URLFilter implementing plugins.\nClass URLNormalizerChecker; // Checks one given normalizer or all normalizers.\nClass URLNormalizers; // This class uses a \"chained filter\" pattern to run defined normalizers.\nClass URLFilterException;\n", "des": "Web-related interfaces: URL filters and normalizers."}
{"index": 212, "repo": "nutch-2.4", "code": "package protocols;\n\nInterface Response; // A response interface.\nClass HttpDateFormat; // class to handle HTTP dates.\nClass ProtocolException; // Use ProtocolException instead.\n", "des": "Helper classes related to the Protocol interface, sea also org.apache.nutch.protocol."}
{"index": 213, "repo": "nutch-2.4", "code": "package parse;\n\npackage parse.html; // An HTML document parsing plugin.\npackage parse.js; // Parser and parse filter plugin to extract all (possible) links from JavaScript files and embedded JavaScript code snippets.\npackage parse.tika; // Parse various document formats with help of Apache Tika.\npackage parse.metatags; // Parse filter to extract meta tags: keywords, description, etc.\nInterface ParseFilter; // Extension point for DOM-based parsers.\nInterface Parser; // A parser for content generated by a Protocol implementation.\nInterface ParseStatusCodes;\nClass HTMLMetaTags; // This class holds the information about HTML \"meta\" tags extracted from a page.\nClass NutchSitemapParse;\nClass NutchSitemapParser;\nClass Outlink;\nClass OutlinkExtractor; // Extractor to extract Outlinks / URLs from plain text using Regular Expressions.\nClass Parse;\nClass ParseFilters; // Creates and caches ParseFilter implementing plugins.\nClass ParsePluginList; // This class represents a natural ordering for which parsing plugin should get called for a particular mimeType.\nClass ParsePluginsReader; // A reader to load the information stored in the $NUTCH_HOME/conf/parse-plugins.xml file.\nClass ParserChecker; // Parser checker, useful for testing parser.\nClass ParserFactory; // Creates and caches Parser plugins.\nClass ParserJob;\nClass ParserJob.ParserMapper;\nClass ParseStatusUtils;\nClass ParseUtil; // A Utility class containing methods to simply perform parsing utilities such as iterating through a preferred list of Parsers to obtain Parse objects.\nEnum ParseUtil.ChangeFrequency;\nClass ParseException;\nClass ParserNotFound;\n", "des": "The Parse interface and related classes."}
{"index": 214, "repo": "nutch-2.4", "code": "package extractor;\n\nClass JsoupHtmlParser;\nClass TestJsoupHtmlParser;\nClass ViewCountNormalizer;\n", "des": "Parse filter based on Jsoup"}
{"index": 215, "repo": "nutch-2.4", "code": "package plugin;\n\nInterface FieldPluggable;\nInterface Pluggable; // Defines the capability of a class to be plugged into Nutch.\nClass Extension; // An Extension is a kind of listener descriptor that will be installed on a concrete ExtensionPoint that acts as kind of Publisher.\nClass ExtensionPoint; // The ExtensionPoint provide meta information of a extension point.\nClass Plugin; // A nutch-plugin is an container for a set of custom logic that provide extensions to the nutch core functionality or another plugin that provides an API for extending.\nClass PluginClassLoader; // The PluginClassLoader is a child-first classloader that only contains classes of the runtime libraries setuped in the plugin manifest file and exported libraries of plugins that are required plugins.\nClass PluginDescriptor; // The PluginDescriptor provide access to all meta information of a nutch-plugin, as well to the internationalizable resources and the plugin own classloader.\nClass PluginManifestParser; // The PluginManifestParser parser just parse the manifest file in all plugin directories.\nClass PluginRepository; // The plugin repositority is a registry of all plugins.\nClass CircularDependencyException; // CircularDependencyException will be thrown if a circular dependency is detected.\nClass MissingDependencyException; // MissingDependencyException will be thrown if a plugin dependency cannot be found.\nClass PluginRuntimeException; // PluginRuntimeException will be thrown until a exception in the plugin managemnt occurs.\n", "des": "The Nutch Plugin System."}
{"index": 216, "repo": "nutch-2.4", "code": "package protocol;\n\npackage protocol.file; // Protocol plugin which supports retrieving local file resources.\npackage protocol.ftp; // Protocol plugin which supports retrieving documents via the ftp protocol.\npackage protocol.http; // Protocol plugin which supports retrieving documents via the http protocol.\npackage protocol.httpclient; // Protocol plugin which supports retrieving documents via the HTTP and HTTPS protocols, optionally with Basic, Digest and NTLM authentication schemes for web server as well as proxy server.\npackage protocol.sftp; // Protocol plugin which supports retrieving documents via the sftp protocol.\nInterface Protocol; // A retriever of url content.\nInterface ProtocolStatusCodes;\nInterface RobotRules; // This class holds the rules which were parsed from a robots.txt file, and can test paths against those rules.\nClass Content;\nClass ProtocolFactory; // Creates and caches Protocol plugins.\nClass ProtocolOutput; // Simple aggregate to pass from protocol plugins both content and protocol status.\nClass ProtocolStatusUtils;\nClass RobotRulesParser; // This class uses crawler-commons for handling the parsing of robots.txt files.\nClass ProtocolException;\nClass ProtocolNotFound;\n", "des": "Classes related to the Protocol interface, see also org.apache.nutch.net.protocols."}
{"index": 217, "repo": "nutch-2.4", "code": "package scoring;\n\npackage scoring.link; // Scoring filter\npackage scoring.opic; // Scoring filter implementing a variant of the Online Page Importance Computation (OPIC) algorithm.\npackage scoring.tld; // Top Level Domain Scoring plugin.\nInterface ScoringFilter; // A contract defining behavior of scoring plugins.\nClass ScoreDatum;\nClass ScoringFilters; // Creates and caches ScoringFilter implementing plugins.\nClass ScoringFilterException; // Specialized exception for errors during scoring.\n", "des": "The ScoringFilter interface."}
{"index": 218, "repo": "nutch-2.4", "code": "package storage;\n\nClass Host; // Host represents a store of webpages or other data which resides on a server or other computer so that it can be accessed over the Internet\nClass Host.Builder; // RecordBuilder for Host instances.\nClass Host.Tombstone;\nClass ParseStatus; // A nested container representing parse status data captured from invocation of parsers on fetch of a WebPage\nClass ParseStatus.Builder; // RecordBuilder for ParseStatus instances.\nClass ParseStatus.Tombstone;\nClass ProtocolStatus; // A nested container representing data captured from web server responses.\nClass ProtocolStatus.Builder; // RecordBuilder for ProtocolStatus instances.\nClass ProtocolStatus.Tombstone;\nClass StorageUtils; // Entry point to Gora store/mapreduce functionality.\nClass WebPage; // WebPage is the primary data structure in Nutch representing crawl data for a given WebPage at some point in time\nClass WebPage.Builder; // RecordBuilder for WebPage instances.\nClass WebPage.Tombstone;\nClass WebTableCreator;\nEnum Host.Field; // Enum containing all data bean's fields.\nEnum Mark;\nEnum ParseStatus.Field; // Enum containing all data bean's fields.\nEnum ProtocolStatus.Field; // Enum containing all data bean's fields.\nEnum WebPage.Field; // Enum containing all data bean's fields.\n", "des": "Representation (web pages, host metadata) of data in abstracted storage."}
{"index": 219, "repo": "nutch-2.4", "code": "package tools;\n\npackage tools.arc; // Tools to read the Arc file format.\npackage tools.proxy; // Proxy to benchmark the crawler.\nClass Benchmark;\nClass Benchmark.BenchmarkResults;\nClass DmozParser; // Utility that converts DMOZ RDF into a flat file of URLs to be injected.\nClass ResolveUrls; // A simple tool that will spin up multiple threads to resolve urls to ip addresses.\n", "des": "Miscellaneous tools."}
{"index": 220, "repo": "nutch-2.4", "code": "package arc;\n\nClass ArcInputFormat; // A input format the reads arc files.\nClass ArcRecordReader; // The ArchRecordReader class provides a record reader which reads records from arc files.\n", "des": "Tools to read the Arc file format."}
{"index": 221, "repo": "nutch-2.4", "code": "package proxy;\n\nClass AbstractTestbedHandler;\nClass DelayHandler;\nClass FakeHandler;\nClass LogDebugHandler;\nClass NotFoundHandler;\nClass TestbedProxy;\nEnum FakeHandler.Mode; // Create links to hosts generated from a pool of numHosts/numPages random names.\n", "des": "Proxy to benchmark the crawler."}
{"index": 222, "repo": "nutch-2.4", "code": "package util;\n\npackage util.domain; // Classes for domain name analysis.\nClass Bytes; // Utility class that handles byte arrays, conversions to/from other types, comparisons, hash code generation, manufacturing keys for HashMaps or HashSets, etc.\nClass Bytes.ByteArrayComparator; // Byte array comparator class.\nClass CommandRunner;\nClass DeflateUtils; // A collection of utility methods for working on deflated data.\nClass DomUtil;\nClass EncodingDetector; // A simple class for detecting character encodings.\nClass FSUtils; // Utility methods for common filesystem operations.\nClass GenericWritableConfigurable; // A generic Writable wrapper that can inject Configuration to Configurables\nClass GZIPUtils; // A collection of utility methods for working on GZIPed data.\nClass HadoopFSUtil;\nClass Histogram<E>;\nClass IdentityPageReducer;\nClass LockUtil; // Utility methods for handling application-level locking.\nClass MimeUtil;\nClass NodeWalker; // A utility class that allows the walking of any DOM tree using a stack instead of recursion.\nClass NutchConfiguration; // Utility to create Hadoop Configurations that include Nutch-specific resources.\nClass NutchJob; // A Job for Nutch jobs.\nClass NutchJobConf; // A JobConf for Nutch jobs.\nClass NutchTool;\nClass ObjectCache;\nClass Pair<F,S>;\nClass PrefixStringMatcher; // A class for efficiently matching Strings against a set of prefixes.\nClass StringUtil; // A collection of String processing utility methods.\nClass SuffixStringMatcher; // A class for efficiently matching Strings against a set of suffixes.\nClass TableUtil;\nClass TimingUtil;\nClass ToolUtil;\nClass TrieStringMatcher; // TrieStringMatcher is a base class for simple tree-based string matching.\nClass URLUtil; // Utility class for URL analysis\nClass WebPageWritable;\n", "des": "Miscellaneous utility classes."}
{"index": 223, "repo": "nutch-2.4", "code": "package domain;\n\nClass DomainStatistics; // Extracts some very basic statistics about domains from the crawldb\nClass DomainStatistics.DomainStatisticsCombiner;\nClass DomainStatistics.DomainStatisticsMapper;\nClass DomainStatistics.DomainStatisticsReducer;\nClass DomainSuffix; // This class represents the last part of the host name, which is operated by authoritives, not individuals.\nClass DomainSuffixes; // Storage class for DomainSuffix objects Note: this class is singleton\nClass TopLevelDomain; // (From wikipedia) A top-level domain (TLD) is the last part of an Internet domain name; that is, the letters which follow the final dot of any domain name.\nEnum DomainStatistics.MyCounter;\nEnum DomainSuffix.Status; // Enumeration of the status of the tld.\nEnum TopLevelDomain.Type;\n", "des": "Classes for domain name analysis."}
{"index": 224, "repo": "nutch-2.4", "code": "package webui;\n\npackage webui.client; // Provides client classes and interfaces for Web UI\npackage webui.config; // Contains config classes for Web UI\npackage webui.model; // Contains model classes for Web UI\npackage webui.pages; // Provides classes and interfaces of pages for Web UI\npackage webui.service; // Provides service classes and interfaces for Web UI\nClass NutchUiApplication;\nClass NutchUiServer;\n", "des": "Provides classes and interfaces for Web UI"}
{"index": 225, "repo": "nutch-2.4", "code": "package client;\n\npackage client.impl; // Contains implementation of client classes and interfaces for Web UI\npackage client.model; // Contains model classes of client for Web UI\nInterface NutchClient;\nClass NutchClientFactory;\n", "des": "Provides client classes and interfaces for Web UI"}
{"index": 226, "repo": "nutch-2.4", "code": "package impl;\n\nInterface CrawlingCycleListener;\nClass CrawlingCycle; // This class implements crawl cycle as in crawl script\nClass NutchClientImpl;\nClass RemoteCommand;\nClass RemoteCommandBuilder;\nClass RemoteCommandExecutor; // This class executes remote job and waits for success/failure result\nClass RemoteCommandsBatchFactory;\n", "des": "Contains implementation of client classes and interfaces for Web UI"}
{"index": 227, "repo": "nutch-2.4", "code": "package model;\n\nClass Crawl;\nClass JobConfig;\nClass JobInfo;\nClass NutchStatus;\nEnum ConnectionStatus;\nEnum Crawl.CrawlStatus;\nEnum JobInfo.JobType;\nEnum JobInfo.State;\n", "des": "Contains model classes of client for Web UI"}
{"index": 228, "repo": "nutch-2.4", "code": "package config;\n\nClass CustomDaoFactory;\nClass CustomTableCreator;\nClass NutchGuiConfiguration;\nClass SpringConfiguration;\n", "des": "Contains config classes for Web UI"}
{"index": 229, "repo": "nutch-2.4", "code": "package model;\n\nClass NutchConfig;\nClass NutchInstance;\nClass SeedList;\nClass SeedUrl;\n", "des": "Contains model classes for Web UI"}
{"index": 230, "repo": "nutch-2.4", "code": "package pages;\n\npackage pages.assets; // Contains asset classes for Web UI\npackage pages.auth; // Contains authorization classes for Web UI\npackage pages.components; // Contains component classes for Web UI\npackage pages.crawls; // Contains crawl page classes for Web UI\npackage pages.instances; // Contains instances pages classes for Web UI\npackage pages.menu; // Contains menu page classes for Web UI\npackage pages.seed; // Contains seed pages' classes for Web UI\npackage pages.settings; // Contains settings page classes for Web UI\nClass AbstractBasePage<T>;\nClass DashboardPage;\nClass LogOutPage;\nClass SchedulingPage;\nClass SearchPage;\nClass StatisticsPage;\nClass UrlsUploadPage;\nClass UserSettingsPage;\n", "des": "Provides classes and interfaces of pages for Web UI"}
{"index": 231, "repo": "nutch-2.4", "code": "package assets;\n\nClass NutchUiCssReference;\n", "des": "Contains asset classes for Web UI"}
{"index": 232, "repo": "nutch-2.4", "code": "package auth;\n\nInterface AuthenticatedWebPage; // Marker interface for secured pages.\nClass AuthorizationStrategy; // Authorization strategy to check whether to allow a page or not.\nClass SignInPage; // Sign in page implementation.\nClass SignInSession; // Checks for whether authenticate or not.\nClass User; // User bean for authentication.\n", "des": "Contains authorization classes for Web UI"}
{"index": 233, "repo": "nutch-2.4", "code": "package components;\n\nClass ColorEnumLabel<E extends java.lang.Enum<E>>; // Label which renders connection status as bootstrap label\nClass ColorEnumLabelBuilder<E extends java.lang.Enum<E>>;\nClass CpmIteratorAdapter<T>; // This is iterator adapter, which wraps iterable items with CompoundPropertyModel.\n", "des": "Contains component classes for Web UI"}
{"index": 234, "repo": "nutch-2.4", "code": "package crawls;\n\nClass CrawlPanel;\nClass CrawlsPage; // This page is for crawls management\n", "des": "Contains crawl page classes for Web UI"}
{"index": 235, "repo": "nutch-2.4", "code": "package instances;\n\nClass InstancePanel;\nClass InstancesPage;\n", "des": "Contains instances pages classes for Web UI"}
{"index": 236, "repo": "nutch-2.4", "code": "package menu;\n\nClass VerticalMenu;\n", "des": "Contains menu page classes for Web UI"}
{"index": 237, "repo": "nutch-2.4", "code": "package seed;\n\nClass SeedListsPage; // This page is for seed lists management\nClass SeedPage; // This page is for seed urls management\n", "des": "Contains seed pages' classes for Web UI"}
{"index": 238, "repo": "nutch-2.4", "code": "package settings;\n\nClass SettingsPage;\n", "des": "Contains settings page classes for Web UI"}
{"index": 239, "repo": "nutch-2.4", "code": "package service;\n\npackage service.impl; // Contains service implementation classes for Web UI\nInterface CrawlService;\nInterface NutchInstanceService;\nInterface NutchService;\nInterface SeedListService;\n", "des": "Provides service classes and interfaces for Web UI"}
{"index": 240, "repo": "nutch-2.4", "code": "package impl;\n\nClass CrawlServiceImpl;\nClass NutchInstanceServiceImpl;\nClass NutchServiceImpl;\nClass SeedListServiceImpl;\n", "des": "Contains service implementation classes for Web UI"}
{"index": 241, "repo": "nutch-2.4", "code": "package api;\n\nClass HttpBase;\nClass HttpRobotRulesParser; // This class is used for parsing robots for urls belonging to HTTP protocol.\nClass BlockedException;\nClass HttpException;\n", "des": "Common API used by HTTP plugins (http, httpclient)"}
{"index": 242, "repo": "nutch-2.4", "code": "package api;\n\nClass RegexRule; // A generic regular expression rule.\nClass RegexURLFilterBase; // Generic URL filter based on regular expressions.\n", "des": "Generic URL filter library, abstracting away from regular expression implementations."}
{"index": 243, "repo": "nutch-2.4", "code": "package file;\n\nClass File; // This class is a protocol plugin used for file: scheme.\nClass FileResponse; // FileResponse.java mimics file replies as http response.\nClass FileError; // Thrown for File error codes.\nClass FileException;\n", "des": "Protocol plugin which supports retrieving local file resources."}
{"index": 244, "repo": "nutch-2.4", "code": "package ftp;\n\nClass Client; // Client.java encapsulates functionalities necessary for nutch to get dir list and retrieve file from an FTP server.\nClass Ftp; // This class is a protocol plugin used for ftp: scheme.\nClass FtpResponse; // FtpResponse.java mimics ftp replies as http response.\nClass FtpRobotRulesParser; // This class is used for parsing robots for urls belonging to FTP protocol.\nClass PrintCommandListener; // This is a support class for logging all ftp command/reply traffic.\nClass FtpError; // Thrown for Ftp error codes.\nClass FtpException; // Superclass for important exceptions thrown during FTP talk, that must be handled with care.\nClass FtpExceptionBadSystResponse; // Exception indicating bad reply of SYST command.\nClass FtpExceptionCanNotHaveDataConnection; // Exception indicating failure of opening data connection.\nClass FtpExceptionControlClosedByForcedDataClose; // Exception indicating control channel is closed by server end, due to forced closure of data channel at client (our) end.\nClass FtpExceptionUnknownForcedDataClose; // Exception indicating unrecognizable reply from server after forced closure of data channel by client (our) side.\n", "des": "Protocol plugin which supports retrieving documents via the ftp protocol."}
{"index": 245, "repo": "nutch-2.4", "code": "package http;\n\nClass Http;\nClass HttpResponse; // An HTTP response.\nEnum HttpResponse.Scheme;\n", "des": "Protocol plugin which supports retrieving documents via the http protocol."}
{"index": 246, "repo": "nutch-2.4", "code": "package httpclient;\n\nInterface HttpAuthentication; // The base level of services required for Http Authentication\nClass DummySSLProtocolSocketFactory;\nClass DummyX509TrustManager;\nClass Http; // This class is a protocol plugin that configures an HTTP client for Basic, Digest and NTLM authentication schemes for web server as well as proxy server.\nClass HttpAuthenticationFactory; // Provides the Http protocol implementation with the ability to authenticate when prompted.\nClass HttpBasicAuthentication; // Implementation of RFC 2617 Basic Authentication.\nClass HttpResponse; // An HTTP response.\nClass HttpAuthenticationException; // Can be used to identify problems during creation of Authentication objects.\n", "des": "Protocol plugin which supports retrieving documents via the HTTP and HTTPS protocols, optionally with Basic, Digest and NTLM authentication schemes for web server as well as proxy server."}
{"index": 247, "repo": "nutch-2.4", "code": "package sftp;\n\nClass Sftp; // This class uses the Jsch package to fetch content using the Sftp protocol.\n", "des": "Protocol plugin which supports retrieving documents via the sftp protocol."}
{"index": 248, "repo": "nutch-2.4", "code": "package automaton;\n\nClass AutomatonURLFilter; // RegexURLFilterBase implementation based on the dk.brics.automaton Finite-State Automata for JavaTM.\n", "des": "URL filter plugin based on dk.brics.automaton Finite-State Automata for JavaTM."}
{"index": 249, "repo": "nutch-2.4", "code": "package domain;\n\nClass DomainURLFilter; // Filters URLs based on a file containing domain suffixes, domain names, and hostnames.\n", "des": "URL filter plugin to include only URLs which match an element in a given list of domain suffixes, domain names, and/or host names."}
{"index": 250, "repo": "nutch-2.4", "code": "package prefix;\n\nClass PrefixURLFilter; // Filters URLs based on a file of URL prefixes.\n", "des": "URL filter plugin to include only URLs which match one of a given list of URL prefixes."}
{"index": 251, "repo": "nutch-2.4", "code": "package regex;\n\nClass RegexURLFilter; // Filters URLs based on a file of regular expressions using the Java Regex implementation.\n", "des": "URL filter plugin to include and/or exclude URLs matching Java regular expressions."}
{"index": 252, "repo": "nutch-2.4", "code": "package suffix;\n\nClass SuffixURLFilter; // Filters URLs based on a file of URL suffixes.\n", "des": "URL filter plugin to either exclude or include only URLs which match one of the given (path) suffixes."}
{"index": 253, "repo": "nutch-2.4", "code": "package validator;\n\nClass UrlValidator; // Validates URLs.\n", "des": "URL filter plugin that validates given urls."}
{"index": 254, "repo": "nutch-2.4", "code": "package basic;\n\nClass BasicURLNormalizer; // Converts URLs to a normal form: remove dot segments in path: /./ or /../ remove default ports, e.g.\n", "des": "URL normalizer performing basic normalizations: remove default ports and dot segments in path."}
{"index": 255, "repo": "nutch-2.4", "code": "package pass;\n\nClass PassURLNormalizer; // This URLNormalizer doesn't change urls.\n", "des": "URL normalizer dummy which does not change URLs."}
{"index": 256, "repo": "nutch-2.4", "code": "package regex;\n\nClass RegexURLNormalizer; // Allows users to do regex substitutions on all/any URLs that are encountered, which is useful for stripping session IDs from URLs.\n", "des": "URL normalizer with configurable rules based on regular expressions (Pattern)."}
{"index": 257, "repo": "nutch-2.4", "code": "package link;\n\nClass LinkAnalysisScoringFilter;\n", "des": "Scoring filter"}
{"index": 258, "repo": "nutch-2.4", "code": "package opic;\n\nClass OPICScoringFilter; // This plugin implements a variant of an Online Page Importance Computation (OPIC) score, described in this paper: Abiteboul, Serge and Preda, Mihai and Cobena, Gregory (2003), Adaptive On-Line Page Importance Computation .\n", "des": "Scoring filter implementing a variant of the Online Page Importance Computation (OPIC) algorithm."}
{"index": 259, "repo": "nutch-2.4", "code": "package tld;\n\nClass TLDScoringFilter; // Scoring filter to boost tlds.\n", "des": "Top Level Domain Scoring plugin."}
{"index": 260, "repo": "nutch-2.4", "code": "package html;\n\nClass DOMBuilder; // This class takes SAX events (in addition to some extra events that SAX doesn't handle yet) and adds the result to a document or document fragment.\nClass DOMContentUtils; // A collection of methods for extracting content from DOM trees.\nClass DOMContentUtils.LinkParams;\nClass HTMLMetaProcessor; // Class for parsing META Directives from DOM trees.\nClass HtmlParser;\nClass XMLCharacterRecognizer; // Class used to verify whether the specified ch conforms to the XML 1.0 definition of whitespace.\n", "des": "An HTML document parsing plugin."}
{"index": 261, "repo": "nutch-2.4", "code": "package js;\n\nClass JSParseFilter; // This class is a heuristic link extractor for JavaScript files and code snippets.\n", "des": "Parser and parse filter plugin to extract all (possible) links from JavaScript files and embedded JavaScript code snippets."}
{"index": 262, "repo": "nutch-2.4", "code": "package tika;\n\nClass DOMContentUtils; // A collection of methods for extracting content from DOM trees.\nClass HTMLMetaProcessor; // Class for parsing META Directives from DOM trees.\nClass TikaParser; // Wrapper for Tika parsers.\n", "des": "Parse various document formats with help of Apache Tika."}
{"index": 263, "repo": "nutch-2.4", "code": "package metatags;\n\nClass MetaTagsParser; // Parse HTML meta tags (keywords, description) and store them in the parse metadata so that they can be indexed with the index-metadata plugin with the prefix 'metatag.'.\n", "des": "Parse filter to extract meta tags: keywords, description, etc."}
{"index": 264, "repo": "nutch-2.4", "code": "package anchor;\n\nClass AnchorIndexingFilter; // Indexing filter that offers an option to either index all inbound anchor text for a document or deduplicate anchors.\n", "des": "An indexing plugin for inbound anchor text."}
{"index": 265, "repo": "nutch-2.4", "code": "package basic;\n\nClass BasicIndexingFilter; // Adds basic searchable fields to a document.\n", "des": "A basic indexing plugin, adds basic fields: url, host, title, content, etc."}
{"index": 266, "repo": "nutch-2.4", "code": "package metadata;\n\nClass MetadataIndexer; // Indexer which can be configured to extract metadata from the crawldb, parse metadata or content metadata.\n", "des": "Indexing filter to add document metadata to the index."}
{"index": 267, "repo": "nutch-2.4", "code": "package more;\n\nClass MoreIndexingFilter; // Add (or reset) a few metaData properties as respective fields (if they are available), so that they can be accurately used within the search index.\n", "des": "A more indexing plugin, adds \"more\" index fields: last modified date, MIME type, content length."}
{"index": 268, "repo": "nutch-2.4", "code": "package subcollection;\n\nClass SubcollectionIndexingFilter;\n", "des": "Indexing filter to assign documents to subcollections."}
{"index": 269, "repo": "nutch-2.4", "code": "package tld;\n\nClass TLDIndexingFilter; // Adds the Top level domain extensions to the index\n", "des": "Top Level Domain Indexing plugin."}
{"index": 270, "repo": "nutch-2.4", "code": "package solr;\n\nInterface SolrConstants;\nClass SolrIndexWriter;\nClass SolrMappingReader;\nClass SolrUtils;\n", "des": "Index writer plugin for Apache Solr."}
{"index": 271, "repo": "nutch-2.4", "code": "package lang;\n\nClass HTMLLanguageParser; // Adds metadata identifying language of document if found We could also run statistical analysis here but we'd miss all other formats\nClass LanguageIndexingFilter; // An IndexingFilter that adds a lang (language) field to the document.\n", "des": "Text document language identifier."}
{"index": 272, "repo": "nutch-2.4", "code": "package collection;\n\nClass CollectionManager;\nClass Subcollection; // SubCollection represents a subset of index, you can define url patterns that will indicate that particular page (url) is part of SubCollection.\n", "des": "Subcollection is a subset of an index."}
{"index": 273, "repo": "nutch-2.4", "code": "package reltag;\n\nClass RelTagIndexingFilter; // An IndexingFilter that adds tag field(s) to the document.\nClass RelTagParser; // Adds microformat rel-tags of document if found.\n", "des": "A microformats Rel-Tag Parser/Indexer/Querier plugin."}
{"index": 274, "repo": "nutch-2.4", "code": "package nutch;\n\nClass CCIndexingFilter; // Adds basic searchable fields to a document.\nClass CCParseFilter; // Adds metadata identifying the Creative Commons license used, if any.\nClass CCParseFilter.Walker; // Walks DOM tree, looking for RDF in comments and licenses in anchors.\n", "des": "Sample plugins that parse and index Creative Commons medadata."}
{"index": 275, "repo": "pdfbox-3.0.0-beta1", "code": "package contentstream;\n\npackage contentstream.operator; // This package contains implementations of all of the PDF operators.\nInterface PDContentStream; // A content stream.\nClass PDFGraphicsStreamEngine; // PDFStreamEngine subclass for advanced processing of graphics.\nClass PDFStreamEngine; // Processes a PDF content stream and executes certain operations.\n", "des": "This package contains provides classes for working with content streams."}
{"index": 276, "repo": "pdfbox-3.0.0-beta1", "code": "package operator;\n\npackage operator.graphics; // This package contains implementations of all of the PDF graphics operators.\nClass DrawObject; // Do: Draws an XObject.\nClass Operator; // An Operator in a PDF content stream.\nClass OperatorName;\nClass OperatorProcessor; // Processes a PDF operator.\nClass MissingOperandException; // Throw when a PDF operator is missing required operands.\n", "des": "This package contains implementations of all of the PDF operators."}
{"index": 277, "repo": "pdfbox-3.0.0-beta1", "code": "package graphics;\n\nClass AppendRectangleToPath; // re Appends a rectangle to the path.\nClass BeginInlineImage; // BI Begins an inline image.\nClass ClipEvenOddRule; // W* Set clipping path using even odd rule.\nClass ClipNonZeroRule; // W Set the clipping path using non zero winding rule.\nClass CloseAndStrokePath; // s: close and stroke the path.\nClass CloseFillEvenOddAndStrokePath; // b* Close, fill and stroke the path with even-odd winding rule.\nClass CloseFillNonZeroAndStrokePath; // b Close, fill and stroke the path with non-zero winding rule.\nClass ClosePath; // h Close the path.\nClass CurveTo; // c Append curved segment to path.\nClass CurveToReplicateFinalPoint; // y Append curved segment to path with final point replicated.\nClass CurveToReplicateInitialPoint; // v Append curved segment to path with the initial point replicated.\nClass DrawObject; // Do: Draws an XObject.\nClass EndPath; // n End the path.\nClass FillEvenOddAndStrokePath; // B* Fill and then stroke the path, using the even-odd rule to determine the region to fill.\nClass FillEvenOddRule; // f* Fill path using even odd rule.\nClass FillNonZeroAndStrokePath; // B Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill.\nClass FillNonZeroRule; // f Fill path using non zero winding rule.\nClass GraphicsOperatorProcessor; // Base class for graphics operators.\nClass LegacyFillNonZeroRule; // F Fill path using non zero winding rule.\nClass LineTo; // l Append straight line segment to path.\nClass MoveTo; // m Begins a new subpath.\nClass ShadingFill; // sh Fills the clipping area with the given shading pattern.\nClass StrokePath; // S Stroke the path.\n", "des": "This package contains implementations of all of the PDF graphics operators."}
{"index": 278, "repo": "pdfbox-3.0.0-beta1", "code": "package cos;\n\nInterface COSUpdateInfo;\nInterface ICOSParser;\nInterface ICOSVisitor; // An interface for visiting a PDF document at the type (COS) level.\nClass COSArray; // An array of PDFBase objects as part of the PDF document.\nClass COSBase; // The base object that all objects in the PDF document will extend.\nClass COSBoolean; // This class represents a boolean value in the PDF document.\nClass COSDictionary; // This class represents a dictionary where name/value pairs reside.\nClass COSDocument; // This is the in-memory representation of the PDF document.\nClass COSDocumentState; // An instance of COSDocumentState collects all known states a COSDocument may have and shall allow their evaluation.\nClass COSFloat; // This class represents a floating point number in a PDF document.\nClass COSIncrement; // A COSIncrement starts at a given COSUpdateInfo to collect updates, that have been made to a COSDocument and therefore should be added to it´s next increment.\nClass COSInputStream; // An InputStream which reads from an encoded COS stream.\nClass COSInteger; // This class represents an integer number in a PDF document.\nClass COSName; // A PDF Name object.\nClass COSNull; // This class represents a null PDF object.\nClass COSNumber; // This class represents an abstract number in a PDF document.\nClass COSObject; // This class represents a PDF object.\nClass COSObjectKey; // Object representing the physical reference to an indirect pdf object.\nClass COSOutputStream; // An OutputStream which writes to an encoded COS stream.\nClass COSStream; // This class represents a stream object in a PDF document.\nClass COSString; // A string object, which may be a text string, a PDFDocEncoded string, ASCII string, or byte string.\nClass COSUpdateState; // A COSUpdateState instance manages update states for a COSUpdateInfo.\n", "des": "These are the low level objects that make up a PDF document."}
{"index": 279, "repo": "pdfbox-3.0.0-beta1", "code": "package filter;\n\nClass DecodeOptions; // Options that may be passed to a Filter to request special handling when decoding the stream.\nClass DecodeResult; // The result of a filter decode operation.\nClass Filter; // A filter for stream data.\nClass FilterFactory; // Factory for Filter classes.\nClass JPXFilter; // Decompress data encoded using the wavelet-based JPEG 2000 standard, reproducing the original data.\nClass LZWFilter; // This is the filter used for the LZWDecode filter.\nClass Predictor; // Helper class to contain predictor decoding used by Flate and LZW filter.\nClass MissingImageReaderException; // Thrown when a required JAI ImageReader is missing.\n", "des": "This package will hold the PDFBox implementations of the filters that are used in PDF documents."}
{"index": 280, "repo": "pdfbox-3.0.0-beta1", "code": "package pdfparser;\n\nClass BaseParser; // This class is used to contain parsing logic that will be used by all parsers.\nClass BruteForceParser; // Brute force parser to be used as last resort if a malformed pdf can't be read.\nClass COSParser; // COS-Parser which first reads startxref and xref tables in order to know valid objects and parse only these objects.\nClass FDFParser;\nClass PDFObjectStreamParser; // This will parse a PDF 1.5 object stream and extract the object with given object number from the stream.\nClass PDFParser;\nClass PDFStreamParser; // This will parse a PDF byte stream and extract operands and such.\nClass PDFXRefStream;\nClass PDFXrefStreamParser; // This will parse a PDF 1.5 (or better) Xref stream and extract the xref information from the stream.\nClass XrefTrailerResolver; // This class will collect all XRef/trailer objects and creates correct xref/trailer information after all objects are read using startxref and 'Prev' information (unused XRef/trailer objects are discarded).\nEnum XrefTrailerResolver.XRefType; // The XRefType of a trailer.\n", "des": "The pdfparser package contains classes to parse PDF documents and objects within the document."}
{"index": 281, "repo": "pdfbox-3.0.0-beta1", "code": "package pdfwriter;\n\nClass ContentStreamWriter; // A class that will take a list of tokens and write out a stream with them.\nClass COSStandardOutputStream; // simple output stream with some minor features for generating \"pretty\" PDF files.\nClass COSWriter; // This class acts on a in-memory representation of a PDF document.\n", "des": "This is the persistence layer used to write the PDFBox documents to a stream."}
{"index": 282, "repo": "pdfbox-3.0.0-beta1", "code": "package pdmodel;\n\npackage pdmodel.common; // High level PD classes that are used throughout several packages are placed in the PDModel common package.\npackage pdmodel.encryption; // The encryption package will handle the PDF document security handlers and the functionality of pluggable security handlers.\npackage pdmodel.fdf; // The fdf package will handle all of the logic used for FDF objects inside of the PDF/FDF document.\npackage pdmodel.font; // Classes to deal with font functionality in a PDF Document.\npackage pdmodel.graphics; // The PDModel graphics package deals with graphics states, operations, and parameters within the PDF document.\nInterface ResourceCache; // A document-wide cache for page resources.\nClass DefaultResourceCache; // A resource cached based on SoftReference, retains resources until memory pressure causes them to be garbage collected.\nClass PDAppearanceContentStream; // Provides the ability to write to an appearance content stream.\nClass PDDestinationNameTreeNode; // This class holds all of the name trees that are available at the document level.\nClass PDDocument; // This is the in-memory representation of the PDF document.\nClass PDDocumentCatalog; // The Document Catalog of a PDF.\nClass PDDocumentInformation; // This is the document metadata.\nClass PDDocumentNameDestinationDictionary; // This encapsulates the \"dictionary of names and corresponding destinations\" for the /Dests entry in the document catalog.\nClass PDDocumentNameDictionary; // This class holds all of the name trees that are available at the document level.\nClass PDEmbeddedFilesNameTreeNode; // This class holds all of the name trees that are available at the document level.\nClass PDFormContentStream;\nClass PDJavascriptNameTreeNode; // This class holds all of the name trees that are available at the document level.\nClass PDPage; // A page in a PDF document.\nClass PDPageContentStream; // Provides the ability to write to a page content stream.\nClass PDPageTree; // The page tree, which defines the ordering of pages in the document in an efficient manner.\nClass PDPatternContentStream;\nClass PDResources; // A set of resources available at the page/pages/stream level.\nClass PDStructureElementNameTreeNode; // todo: JavaDoc\nEnum PageLayout; // A name object specifying the page layout shall be used when the document is opened.\n", "des": "The PDModel package represents a high level API for creating and manipulating PDF documents."}
{"index": 283, "repo": "pdfbox-3.0.0-beta1", "code": "package common;\n\npackage common.filespecification; // The file specification package defines classes that are used for the PDF File Specification logic.\npackage common.function; // This package contains functions that are available in the PDF specification.\nInterface COSObjectable; // This is an interface used to get/create the underlying COSObject.\nInterface PDDestinationOrAction; // This is an interface used for some elements such as the document OpenAction that can be either a Destination or an Action.\nClass COSArrayList<E>; // This is an implementation of a List that will sync its contents to a COSArray.\nClass COSDictionaryMap<K,V>; // This is a Map that will automatically sync the contents to a COSDictionary.\nClass PDDictionaryWrapper; // A wrapper for a COS dictionary.\nClass PDImmutableRectangle; // Immutable class for constant sizes.\nClass PDMetadata; // This class represents metadata for various objects in a PDF document.\nClass PDNameTreeNode<T extends COSObjectable>; // This class represents a node in a name tree.\nClass PDNumberTreeNode; // This class represents a PDF Number tree.\nClass PDObjectStream; // A PDStream represents a stream in a PDF document.\nClass PDPageLabelRange; // Contains information for a page label range.\nClass PDPageLabels; // Represents the page label dictionary of a document.\nClass PDRange; // This class will be used to signify a range.\nClass PDRectangle; // A rectangle in a PDF document.\nClass PDStream; // A PDStream represents a stream in a PDF document.\nClass PDTypedDictionaryWrapper; // A wrapper for a COS dictionary including Type information.\n", "des": "High level PD classes that are used throughout several packages are placed in the PDModel common package."}
{"index": 284, "repo": "pdfbox-3.0.0-beta1", "code": "package filespecification;\n\nClass PDComplexFileSpecification; // This represents a file specification.\nClass PDEmbeddedFile; // This represents an embedded file in a file specification.\nClass PDFileSpecification; // This represents a file specification.\nClass PDSimpleFileSpecification; // A file specification that is just a string.\n", "des": "The file specification package defines classes that are used for the PDF File Specification logic."}
{"index": 285, "repo": "pdfbox-3.0.0-beta1", "code": "package function;\n\npackage function.type4; // This package contains Type 4 function support.\nClass PDFunction; // This class represents a function in a PDF document.\nClass PDFunctionType0; // This class represents a type 0 function in a PDF document.\nClass PDFunctionType2; // This class represents a Type 2 (exponential interpolation) function in a PDF document.\nClass PDFunctionType3; // This class represents a Type 3 (stitching) function in a PDF document.\nClass PDFunctionType4; // This class represents a Type 4 (PostScript calculator) function in a PDF document.\nClass PDFunctionTypeIdentity; // The identity function.\n", "des": "This package contains functions that are available in the PDF specification."}
{"index": 286, "repo": "pdfbox-3.0.0-beta1", "code": "package type4;\n\nInterface Operator; // Interface for PostScript operators.\nInterface Parser.SyntaxHandler; // This interface defines all possible syntactic elements of a Type 4 function.\nClass ExecutionContext; // Makes up the execution context, holding the available operators and the execution stack.\nClass InstructionSequence; // Represents an instruction sequence, a combination of values, operands and nested procedures.\nClass InstructionSequenceBuilder; // Basic parser for Type 4 functions which is used to build up instruction sequences.\nClass Operators; // This class provides all the supported operators.\nClass Parser; // Parser for PDF Type 4 functions.\nClass Parser.AbstractSyntaxHandler; // Abstract base class for a Parser.SyntaxHandler.\n", "des": "This package contains Type 4 function support."}
{"index": 287, "repo": "pdfbox-3.0.0-beta1", "code": "package logicalstructure;\n\nClass PDAttributeObject; // An attribute object.\nClass PDDefaultAttributeObject; // A default attribute object.\nClass PDMarkedContentReference; // A marked-content reference.\nClass PDMarkInfo; // The MarkInfo provides additional information relevant to specialized uses of structured documents.\nClass PDObjectReference; // An object reference.\nClass PDParentTreeValue; // Described in the PDF specification in the ParentTree segment of the table \"Entries in the structure tree root\".\nClass PDStructureElement; // A structure element.\nClass PDStructureNode; // A node in the structure tree.\nClass PDStructureTreeRoot; // A root of a structure tree.\nClass PDUserAttributeObject; // A User attribute object.\nClass PDUserProperty; // A user property.\nClass Revisions<T>;\n", "des": "The logical structure package provides a mechanism for incorporating structural information about a document's content into a PDF file."}
{"index": 288, "repo": "pdfbox-3.0.0-beta1", "code": "package markedcontent;\n\nClass PDMarkedContent; // A marked content.\nClass PDPropertyList; // A property list is a dictionary containing private information meaningful to the conforming writer creating the marked content.\n", "des": "The marked content package provides a mechanism for modeling marked-content sequences."}
{"index": 289, "repo": "pdfbox-3.0.0-beta1", "code": "package prepress;\n\nClass PDBoxStyle; // The Box Style specifies visual characteristics for displaying box areas.\n", "des": "This package contains classes for prepress support in PDFBox."}
{"index": 290, "repo": "pdfbox-3.0.0-beta1", "code": "package taggedpdf;\n\nClass PDArtifactMarkedContent; // An artifact marked content.\nClass PDExportFormatAttributeObject; // An Export Format attribute object.\nClass PDFourColours; // An object for four colours.\nClass PDLayoutAttributeObject; // A Layout attribute object.\nClass PDListAttributeObject; // A List attribute object.\nClass PDPrintFieldAttributeObject; // A PrintField attribute object.\nClass PDStandardAttributeObject; // A standard attribute object.\nClass PDTableAttributeObject; // A Table attribute object.\nClass StandardStructureTypes; // The standard structure types.\n", "des": "The tagged PDF package provides a mechanism for incorporating \"tags\" (standard structure types and attributes) into a PDF file."}
{"index": 291, "repo": "pdfbox-3.0.0-beta1", "code": "package encryption;\n\nClass AccessPermission; // This class represents the access permissions to a document.\nClass DecryptionMaterial; // This class represents data required to decrypt PDF documents.\nClass PDCryptFilterDictionary; // This class is a specialized view of the crypt filter dictionary of a PDF document.\nClass PDEncryption; // This class is a specialized view of the encryption dictionary of a PDF document.\nClass ProtectionPolicy; // This class represents the protection policy to apply to a document.\nClass PublicKeyDecryptionMaterial; // This class holds necessary information to decrypt a PDF document protected by the public key security handler.\nClass PublicKeyProtectionPolicy; // The protection policy to use to protect a document with the public key security handler.\nClass PublicKeyRecipient; // Represents a recipient in the public key protection policy.\nClass PublicKeySecurityHandler; // This class implements the public key security handler described in the PDF specification.\nClass SecurityHandler<T_POLICY extends ProtectionPolicy>; // A security handler as described in the PDF specifications.\nClass SecurityHandlerFactory; // Manages security handlers for the application.\nClass SecurityProvider; // Singleton which provides a security provider.\nClass StandardDecryptionMaterial; // Represents the necessary information to decrypt a document protected by the standard security handler (password protection).\nClass StandardProtectionPolicy; // The protection policy to add to a document for password-based protection.\nClass StandardSecurityHandler; // The standard security handler.\nClass InvalidPasswordException; // Indicates that an invalid password was supplied.\n", "des": "The encryption package will handle the PDF document security handlers and the functionality of pluggable security handlers."}
{"index": 292, "repo": "pdfbox-3.0.0-beta1", "code": "package fdf;\n\nClass FDFAnnotation; // This represents an FDF annotation that is part of the FDF document.\nClass FDFAnnotationCaret; // This represents a Caret FDF annotation.\nClass FDFAnnotationCircle; // This represents a Circle FDF annotation.\nClass FDFAnnotationFileAttachment; // This represents a FileAttachment FDF annotation.\nClass FDFAnnotationFreeText; // This represents a FreeText FDF annotation.\nClass FDFAnnotationHighlight; // This represents a Highlight FDF annotation.\nClass FDFAnnotationInk; // This represents a Ink FDF annotation.\nClass FDFAnnotationLine; // This represents a Line FDF annotation.\nClass FDFAnnotationLink; // This represents a Polygon FDF annotation.\nClass FDFAnnotationPolygon; // This represents a Polygon FDF annotation.\nClass FDFAnnotationPolyline; // This represents a Polyline FDF annotation.\nClass FDFAnnotationSound; // This represents a Sound FDF annotation.\nClass FDFAnnotationSquare; // This represents a Square FDF annotation.\nClass FDFAnnotationSquiggly; // This represents a Squiggly FDF annotation.\nClass FDFAnnotationStamp; // This represents a Stamp FDF annotation.\nClass FDFAnnotationStrikeOut; // This represents a StrikeOut FDF annotation.\nClass FDFAnnotationText; // This represents a Text FDF annotation.\nClass FDFAnnotationTextMarkup; // This abstract class is used as a superclass for the different FDF annotations with text markup attributes.\nClass FDFAnnotationUnderline; // This represents a Underline FDF annotation.\nClass FDFCatalog; // This represents an FDF catalog that is part of the FDF document.\nClass FDFDictionary; // This represents an FDF dictionary that is part of the FDF document.\nClass FDFDocument; // This is the in-memory representation of the FDF document.\nClass FDFField; // This represents an FDF field that is part of the FDF document.\nClass FDFIconFit; // This represents an Icon fit dictionary for an FDF field.\nClass FDFJavaScript; // This represents an FDF JavaScript dictionary that is part of the FDF document.\nClass FDFNamedPageReference; // This represents an FDF named page reference that is part of the FDF field.\n", "des": "The fdf package will handle all of the logic used for FDF objects inside of the PDF/FDF document."}
{"index": 293, "repo": "pdfbox-3.0.0-beta1", "code": "package font;\n\nInterface FontMapper; // Font mapper, locates non-embedded fonts.\nInterface PDFontLike; // A font-like object.\nInterface PDVectorFont; // A vector outline font, e.g.\nClass CIDFontMapping; // A CIDFontMapping is a kind of FontMapping which allows for an additional TrueTypeFont substitute to be provided if a CID font is not available.\nClass CIDSystemInfo; // Represents a CIDSystemInfo for the FontMapper API.\nClass FontCache; // An in-memory cache for system fonts.\nClass FontInfo; // Information about a font on the system.\nClass FontMappers; // FontMapper factory class.\nClass FontMapping<T extends org.apache.fontbox.FontBoxFont>; // A font mapping from a PDF font to a FontBox font.\nClass FontProvider; // External font service provider interface.\nClass PDCIDFont; // A CIDFont.\nClass PDCIDFontType0; // Type 0 CIDFont (CFF).\nClass PDCIDFontType2; // Type 2 CIDFont (TrueType).\nClass PDCIDSystemInfo; // Represents a CIDSystemInfo.\nClass PDFont; // This is the base class for all PDF fonts.\nClass PDFontDescriptor; // A font descriptor.\nClass PDFontFactory; // Creates the appropriate font subtype based on information in the dictionary.\nClass PDMMType1Font; // Type 1 Multiple Master Font.\nClass PDPanose; // Represents the \"Panose\" entry of a FontDescriptor's Style dictionary.\nClass PDPanoseClassification; // Represents a 10-byte PANOSE classification.\nClass PDSimpleFont; // A simple font.\nClass PDTrueTypeFont; // TrueType font.\nClass PDType0Font; // A Composite (Type 0) font.\nClass PDType1CFont; // Type 1-equivalent CFF font.\nClass PDType1Font; // A PostScript Type 1 Font.\nClass PDType3CharProc; // A Type 3 character procedure.\nClass PDType3Font; // A PostScript Type 3 Font.\nClass Standard14Fonts; // The \"Standard 14\" PDF fonts, also known as the \"base 14\" fonts.\n", "des": "Classes to deal with font functionality in a PDF Document."}
{"index": 294, "repo": "pdfbox-3.0.0-beta1", "code": "package graphics;\n\npackage graphics.color; // This package deals with colors that are stored in a PDF document.\npackage graphics.form; // This package deals with Form XObjects that are stored in a PDF document.\npackage graphics.image; // This package deals with images that are stored in a PDF document.\npackage graphics.pattern; // This package deals with patterns which are used instead of colors.\npackage graphics.shading; // This package deals with shadings which are used for filling instead of a color.\npackage graphics.state; // This package deals with graphics states within the PDF document.\nClass PDFontSetting; // This class represents a font setting used for the graphics state.\nClass PDLineDashPattern; // A line dash pattern for stroking paths.\nClass PDPostScriptXObject; // A PostScript XObject.\nClass PDXObject; // An external object, or \"XObject\".\n", "des": "The PDModel graphics package deals with graphics states, operations, and parameters within the PDF document."}
{"index": 295, "repo": "pdfbox-3.0.0-beta1", "code": "package color;\n\nClass PDCalGray; // A CalGray colour space is a special case of a single-component CIE-based colour space.\nClass PDCalRGB; // A CalRGB colour space is a CIE-based colour space with one transformation stage instead of two.\nClass PDCIEBasedColorSpace; // CIE-based colour spaces specify colours in a way that is independent of the characteristics of any particular output device.\nClass PDCIEDictionaryBasedColorSpace; // CIE-based colour spaces that use a dictionary.\nClass PDColor; // A color value, consisting of one or more color components, or for pattern color spaces, a name and optional color components.\nClass PDColorSpace; // A color space specifies how the colours of graphics objects will be painted on the page.\nClass PDDeviceCMYK; // Allows colors to be specified according to the subtractive CMYK (cyan, magenta, yellow, black) model typical of printers and other paper-based output devices.\nClass PDDeviceColorSpace; // Device colour spaces directly specify colours or shades of gray produced by an output device.\nClass PDDeviceGray; // A color space with black, white, and intermediate shades of gray.\nClass PDDeviceN; // DeviceN colour spaces may contain an arbitrary number of colour components.\nClass PDDeviceNAttributes; // Contains additional information about the components of colour space.\nClass PDDeviceNProcess; // A DeviceN Process Dictionary\nClass PDDeviceRGB; // Colours in the DeviceRGB colour space are specified according to the additive RGB (red-green-blue) colour model.\nClass PDGamma; // A gamma array, or collection of three floating point parameters used for color operations.\nClass PDICCBased; // ICCBased color spaces are based on a cross-platform color profile as defined by the International Color Consortium (ICC).\nClass PDIndexed; // An Indexed colour space specifies that an area is to be painted using a colour table of arbitrary colours from another color space.\nClass PDJPXColorSpace; // A color space embedded in a JPX file.\nClass PDLab; // A Lab colour space is a CIE-based ABC colour space with two transformation stages.\n", "des": "This package deals with colors that are stored in a PDF document."}
{"index": 296, "repo": "pdfbox-3.0.0-beta1", "code": "package form;\n\nClass PDFormXObject; // A Form XObject.\nClass PDTransparencyGroup; // A transparency group.\nClass PDTransparencyGroupAttributes; // Transparency group attributes.\n", "des": "This package deals with Form XObjects that are stored in a PDF document."}
{"index": 297, "repo": "pdfbox-3.0.0-beta1", "code": "package image;\n\nInterface PDImage; // An image in a PDF document.\nClass CCITTFactory; // Factory for creating a PDImageXObject containing a CCITT Fax compressed TIFF image.\nClass JPEGFactory; // Factory for creating a PDImageXObject containing a JPEG compressed image.\nClass LosslessFactory; // Factory for creating a PDImageXObject containing a lossless compressed image.\nClass PDImageXObject; // An Image XObject.\nClass PDInlineImage; // An inline image object which uses a special syntax to express the data for a small image directly within the content stream.\n", "des": "This package deals with images that are stored in a PDF document."}
{"index": 298, "repo": "pdfbox-3.0.0-beta1", "code": "package pattern;\n\nClass PDAbstractPattern; // This class wraps a pattern dictionary.\nClass PDShadingPattern; // A shading pattern dictionary.\nClass PDTilingPattern; // A tiling pattern dictionary.\n", "des": "This package deals with patterns which are used instead of colors."}
{"index": 299, "repo": "pdfbox-3.0.0-beta1", "code": "package shading;\n\nClass AxialShadingContext; // AWT PaintContext for axial shading.\nClass AxialShadingPaint; // AWT Paint for axial shading.\nClass PDShading; // A Shading Resource.\nClass PDShadingType1; // Resources for a function based shading.\nClass PDShadingType2; // Resources for an axial shading.\nClass PDShadingType3; // Resources for a radial shading.\nClass PDShadingType4; // Resources for a shading type 4 (Free-Form Gouraud-Shaded Triangle Mesh).\nClass PDShadingType5; // Resources for a shading type 5 (Lattice-Form Gouraud-Shade Triangle Mesh).\nClass PDShadingType6; // Resources for a shading type 6 (Coons Patch Mesh).\nClass PDShadingType7; // Resources for a shading type 7 (Tensor-Product Patch Mesh).\nClass RadialShadingContext; // AWT PaintContext for radial shading.\nClass RadialShadingPaint; // AWT Paint for radial shading.\nClass ShadingContext; // A base class to handle what is common to all shading types.\nClass ShadingPaint<T extends PDShading>; // This is base class for all PDShading-Paints to allow other low level libraries access to the shading source data.\n", "des": "This package deals with shadings which are used for filling instead of a color."}
{"index": 300, "repo": "pdfbox-3.0.0-beta1", "code": "package state;\n\nClass PDExtendedGraphicsState; // An extended graphics state dictionary.\nClass PDGraphicsState; // The current state of the graphics parameters when executing a content stream.\nClass PDSoftMask; // Soft mask.\nClass PDTextState; // This class will hold the current state of the text parameters when executing a content stream.\nEnum RenderingIntent; // Rendering intent.\nEnum RenderingMode; // Text Rendering Mode.\n", "des": "This package deals with graphics states within the PDF document."}
{"index": 301, "repo": "pdfbox-3.0.0-beta1", "code": "package action;\n\nClass PDAction; // This represents an action that can be executed in a PDF document.\nClass PDActionEmbeddedGoTo; // This represents a embedded go-to action that can be executed in a PDF document.\nClass PDActionFactory; // This class will take a dictionary and determine which type of action to create.\nClass PDActionGoTo; // This represents a go-to action that can be executed in a PDF document.\nClass PDActionHide; // This represents a thread action that can be executed in a PDF document.\nClass PDActionImportData;\nClass PDActionJavaScript; // This represents a JavaScript action.\nClass PDActionLaunch; // This represents a launch action that can be executed in a PDF document.\nClass PDActionMovie;\nClass PDActionNamed; // This represents a named action in a PDF document.\nClass PDActionRemoteGoTo; // This represents a remote go-to action that can be executed in a PDF document.\nClass PDActionResetForm;\nClass PDActionSound; // This represents a Sound action that can be executed in a PDF document.\nClass PDActionSubmitForm; // This represents a Submit-Form action that can be executed in a PDF document.\nClass PDActionThread; // This represents a thread action that can be executed in a PDF document.\nClass PDActionURI; // This represents a URI action that can be executed in a PDF document.\nClass PDAdditionalActions; // This represents a dictionary of actions that occur due to events.\nClass PDAnnotationAdditionalActions; // This class represents an annotation's dictionary of actions that occur due to events.\nClass PDDocumentCatalogAdditionalActions; // This class represents a document catalog's dictionary of actions that occur due to events.\nClass PDFormFieldAdditionalActions; // This class represents a form field's dictionary of actions that occur due to events.\nClass PDPageAdditionalActions; // This class represents a page object's dictionary of actions that occur due to events.\nClass PDTargetDirectory; // A target dictionary specifying path information to the target document.\nClass PDURIDictionary; // This is the implementation of an URI dictionary.\nClass PDWindowsLaunchParams; // Launch parameters for the windows OS.\nEnum OpenMode; // This will specify whether to open the destination document in a new window.\n", "des": "This package represents actions that can be performed in a PDF document."}
{"index": 302, "repo": "pdfbox-3.0.0-beta1", "code": "package annotation;\n\nInterface AnnotationFilter; // Simple interface allowing the use of an annotation filter visitor.\nClass PDAnnotation; // A PDF annotation.\nClass PDAnnotationCaret;\nClass PDAnnotationCircle;\nClass PDAnnotationFileAttachment; // This is the class that represents a file attachment.\nClass PDAnnotationFreeText;\nClass PDAnnotationHighlight;\nClass PDAnnotationInk;\nClass PDAnnotationLine; // This is the class that represents a line annotation.\nClass PDAnnotationLink; // This is the class that represents a link annotation.\nClass PDAnnotationMarkup; // This class represents the additional fields of a Markup type Annotation.\nClass PDAnnotationPolygon;\nClass PDAnnotationPolyline;\nClass PDAnnotationPopup; // This is the class that represents a popup annotation.\nClass PDAnnotationRubberStamp; // This is the class that represents a rubber stamp annotation.\nClass PDAnnotationSound;\nClass PDAnnotationSquare;\nClass PDAnnotationSquareCircle; // This is the class that represents a rectangular or elliptical annotation introduced in PDF 1.3 specification .\nClass PDAnnotationSquiggly;\nClass PDAnnotationStrikeout;\nClass PDAnnotationText; // This is the class that represents a text annotation.\nClass PDAnnotationTextMarkup; // This is the abstract class that represents a text markup annotation introduced in the PDF 1.3 specification, except Squiggly lines in 1.4.\nClass PDAnnotationUnderline;\nClass PDAnnotationUnknown; // This is the class that represents an arbitrary Unknown Annotation type.\nClass PDAnnotationWidget; // This is the class that represents a widget annotation.\nClass PDAppearanceCharacteristicsDictionary; // This class represents an appearance characteristics dictionary.\nClass PDAppearanceDictionary; // An appearance dictionary specifying how the annotation shall be presented visually on the page.\nClass PDAppearanceEntry; // An entry in an appearance dictionary.\nClass PDAppearanceStream; // An appearance stream is a form XObject, a self-contained content stream that shall be rendered inside the annotation rectangle.\nClass PDBorderEffectDictionary; // This class represents a PDF /BE entry the border effect dictionary.\nClass PDBorderStyleDictionary; // This class represents a PDF /BS entry the border style dictionary.\nClass PDExternalDataDictionary; // This class represents an external data dictionary.\n", "des": "The annotation package contains classes that work with PDF annotation elements."}
{"index": 303, "repo": "pdfbox-3.0.0-beta1", "code": "package digitalsignature;\n\npackage digitalsignature.visible; // This is the visual signature part that help creating the visual representation for the digital signature.\nInterface ExternalSigningSupport; // Interface for external signature creation scenarios.\nInterface SignatureInterface; // Providing an interface for accessing necessary functions for signing a PDF document.\nClass COSFilterInputStream; // A filtered stream that includes the bytes that are in the (begin,length) intervals passed in the constructor.\nClass PDPropBuild; // A signature build dictionary as specified in the PDF Signature Build Dictionary Specification.\nClass PDPropBuildDataDict; // The general property dictionaries from the build property dictionary.\nClass PDSeedValue; // This represents a pdf signature seed value dictionary.\nClass PDSeedValueCertificate; // This class represents a certificate seed value dictionary that is in the seed value which puts constraints on certificates when signing documents.\nClass PDSeedValueMDP; // This MDP dictionary is a part of the seed value dictionary and define if a author signature or a certification signature should be use.\nClass PDSeedValueTimeStamp; // If exist, it describe where the signature handler can request a RFC3161 timestamp and if it is a must have for the signature.\nClass PDSignature; // This represents a digital signature that can be attached to a document.\nClass SignatureOptions; // This contains the visual signature as a COSDocument, its preferred size and the page.\nClass SigningSupport; // Class to be used when creating PDF signatures externally.\n", "des": "The digital signature library will manage signatures that are stored in the PDF document."}
{"index": 304, "repo": "pdfbox-3.0.0-beta1", "code": "package visible;\n\nInterface PDFTemplateBuilder; // That class builds visible signature template which will be added in our PDF document.\nClass PDFTemplateCreator; // Class to build PDF template.\nClass PDFTemplateStructure; // Structure of PDF document with visible signature.\nClass PDVisibleSigBuilder; // Implementation of PDFTemplateBuilder.\nClass PDVisibleSignDesigner; // Class for visible signature design properties.\nClass PDVisibleSigProperties; // This builder class is in order to create visible signature properties.\n", "des": "This is the visual signature part that help creating the visual representation for the digital signature."}
{"index": 305, "repo": "pdfbox-3.0.0-beta1", "code": "package destination;\n\nClass PDDestination; // This represents a destination in a PDF document.\nClass PDNamedDestination; // This represents a destination to a page by referencing it with a name.\nClass PDPageDestination; // This represents a destination to a page, see subclasses for specific parameters.\nClass PDPageFitDestination; // This represents a destination to a page and the page contents will be magnified to just fit on the screen.\nClass PDPageFitHeightDestination; // This represents a destination to a page at a x location and the height is magnified to just fit on the screen.\nClass PDPageFitRectangleDestination; // This represents a destination to a page at a y location and the width is magnified to just fit on the screen.\nClass PDPageFitWidthDestination; // This represents a destination to a page at a y location and the width is magnified to just fit on the screen.\nClass PDPageXYZDestination; // This represents a destination to a page at an x,y coordinate with a zoom setting.\n", "des": "The destination package allows destinations into a pdf document to be specified."}
{"index": 306, "repo": "pdfbox-3.0.0-beta1", "code": "package outline;\n\nClass PDDocumentOutline; // This represents an outline in a pdf document.\nClass PDOutlineItem; // This represents an outline item in a pdf document.\nClass PDOutlineNode; // Base class for a node in the outline of a PDF document.\n", "des": "The outline package allows for a PDF outline(bookmarks) to be created."}
{"index": 307, "repo": "pdfbox-3.0.0-beta1", "code": "package form;\n\nInterface ScriptingHandler;\nClass FieldUtils; // A set of utility methods to help with common AcroForm form and field related functions.\nClass PDAcroForm; // An interactive form, also known as an AcroForm.\nClass PDButton; // A button field represents an interactive control on the screen that the user can manipulate with the mouse.\nClass PDCheckBox; // A check box toggles between two states, on and off.\nClass PDChoice; // A choice field contains several text items, one or more of which shall be selected as the field value.\nClass PDComboBox; // A combo box consisting of a drop-down list.\nClass PDField; // A field in an interactive form.\nClass PDFieldFactory; // A PDField factory.\nClass PDFieldTree; // The field tree.\nClass PDListBox; // A scrollable list box.\nClass PDNonTerminalField; // A non terminal field in an interactive form.\nClass PDPushButton; // A pushbutton is a purely interactive control that responds immediately to user input without retaining a permanent value.\nClass PDRadioButton; // Radio button fields contain a set of related buttons that can each be on or off.\nClass PDSignatureField; // A signature field is a form field that contains a digital signature.\nClass PDTerminalField; // A field in an interactive form.\nClass PDTextField; // A text field is a box or space for text fill-in data typically entered from a keyboard.\nClass PDVariableText; // Base class for fields which use \"Variable Text\".\nClass PDXFAResource; // An XML Forms Architecture (XFA) resource.\n", "des": "The interactive package contains classes for handling Interactive Forms, also known as \"AcroForms\"."}
{"index": 308, "repo": "pdfbox-3.0.0-beta1", "code": "package measurement;\n\nClass PDMeasureDictionary; // This class represents a measure dictionary.\nClass PDNumberFormatDictionary; // This class represents a number format dictionary.\nClass PDRectlinearMeasureDictionary; // This class represents a rectlinear measure dictionary.\nClass PDViewportDictionary; // This class represents a viewport dictionary.\n", "des": "The measurement package contains classes that work with elements specifying measure properties."}
{"index": 309, "repo": "pdfbox-3.0.0-beta1", "code": "package pagenavigation;\n\nClass PDThread; // This a single thread in a PDF document.\nClass PDThreadBead; // This a single bead in a thread in a PDF document.\nClass PDTransition; // Represents a page transition as defined in paragraph 12.4.4.1 of PDF 32000-1:2008\nEnum PDTransitionDimension; // The dimension in which the specified transition effect shall occur.\nEnum PDTransitionDirection; // The direction in which the specified transition effect shall moves, expressed in degrees counterclockwise starting from a left-to-right direction.\nEnum PDTransitionMotion; // The direction of motion for the specified transition effect.\nEnum PDTransitionStyle; // The transition style that shall be used when moving to the page from another during a presentation.\n", "des": "A package to allow provide access to PDF page navigation functionality."}
{"index": 310, "repo": "pdfbox-3.0.0-beta1", "code": "package viewerpreferences;\n\nClass PDViewerPreferences; // This is the document viewing preferences.\nEnum PDViewerPreferences.BOUNDARY; // Enumeration containing all valid values for boundaries.\nEnum PDViewerPreferences.DUPLEX; // Enumeration containing all valid values for duplex.\nEnum PDViewerPreferences.NON_FULL_SCREEN_PAGE_MODE; // Enumeration containing all valid values for NonFullScreenPageMode.\nEnum PDViewerPreferences.PRINT_SCALING; // Enumeration containing all valid values for printscaling.\nEnum PDViewerPreferences.READING_DIRECTION; // Enumeration containing all valid values for ReadingDirection.\n", "des": "A package to allow access to document viewing preferences."}
{"index": 311, "repo": "pdfbox-3.0.0-beta1", "code": "package util;\n\nClass DateConverter; // Converts dates to strings and back using the PDF date standard in section 3.8.2 of PDF Reference 1.7.\nClass Hex; // Utility functions for hex encoding.\nClass IterativeMergeSort; // This class provides an iterative (bottom-up) implementation of the MergeSort algorithm for any generic Java object which implements a Comparator.\nClass Matrix; // This class will be used for matrix manipulation.\nClass NumberFormatUtil; // This class contains methods to format numbers.\nClass SmallMap<K,V>; // Map implementation with a smallest possible memory usage.\nClass Vector; // A 2D vector.\nClass Version; // Exposes PDFBox version.\nClass XMLUtil; // This class with handle some simple XML operations.\n", "des": "This package contains utility classes that are used by the PDFBox project."}
{"index": 312, "repo": "commons-geometry-enclosing-1.0-beta1", "code": "package enclosing;\n\nInterface Encloser<P extends Point<P>>; // Interface for algorithms computing enclosing balls.\nInterface SupportBallGenerator<P extends Point<P>>; // Interface for generating balls based on support points.\nClass EnclosingBall<P extends Point<P>>; // This class represents a ball enclosing some points.\nClass WelzlEncloser<P extends Point<P>>; // Class implementing Emo Welzl's algorithm to find the smallest enclosing ball in linear time.\n", "des": "This package provides interfaces and classes related to the smallest enclosing ball problem."}
{"index": 313, "repo": "commons-geometry-enclosing-1.0-beta1", "code": "package threed;\n\nClass SphereGenerator; // Class generating a sphere from its support points.\nClass WelzlEncloser3D; // Extension of the WelzlEncloser class for Euclidean 3D space.\n", "des": "This package provides classes related to the smallest enclosing ball problem in three dimensions."}
{"index": 314, "repo": "commons-geometry-enclosing-1.0-beta1", "code": "package twod;\n\nClass DiskGenerator; // Class generating a disk from its support points.\nClass WelzlEncloser2D; // Extension of the WelzlEncloser class for Euclidean 2D space.\n", "des": "This package provides classes related to the smallest enclosing ball problem in two dimensions."}
{"index": 315, "repo": "kafka-clients-3.5.0", "code": "package admin;\n\nInterface Admin; // The administrative client for Kafka, which supports managing and inspecting topics, brokers, configurations and ACLs.\nClass AbortTransactionOptions;\nClass AbortTransactionResult; // The result of Admin.abortTransaction(AbortTransactionSpec, AbortTransactionOptions).\nClass AbortTransactionSpec;\nClass AbstractOptions<T extends AbstractOptions>;\nClass AdminClient; // The base class for in-built admin clients.\nClass AdminClientConfig; // The AdminClient configuration class, which also contains constants for configuration entry names.\nClass AlterClientQuotasOptions; // Options for Admin.alterClientQuotas(Collection, AlterClientQuotasOptions).\nClass AlterClientQuotasResult; // The result of the Admin.alterClientQuotas(Collection, AlterClientQuotasOptions) call.\nClass AlterConfigOp; // A class representing a alter configuration entry containing name, value and operation type.\nClass AlterConfigsOptions; // Options for Admin.incrementalAlterConfigs(Map) and Admin.alterConfigs(Map).\nClass AlterConfigsResult; // The result of the Admin.alterConfigs(Map) call.\nClass AlterConsumerGroupOffsetsOptions; // Options for the Admin.alterConsumerGroupOffsets(String, Map, AlterConsumerGroupOffsetsOptions) call.\nClass AlterConsumerGroupOffsetsResult; // The result of the Admin.alterConsumerGroupOffsets(String, Map) call.\nClass AlterPartitionReassignmentsOptions; // Options for Admin.alterPartitionReassignments(Map, AlterPartitionReassignmentsOptions) The API of this class is evolving.\nClass AlterPartitionReassignmentsResult; // The result of Admin.alterPartitionReassignments(Map, AlterPartitionReassignmentsOptions).\nClass AlterReplicaLogDirsOptions; // Options for Admin.alterReplicaLogDirs(Map, AlterReplicaLogDirsOptions).\nClass AlterReplicaLogDirsResult; // The result of Admin.alterReplicaLogDirs(Map, AlterReplicaLogDirsOptions).\nClass AlterUserScramCredentialsOptions; // Options for Admin.alterUserScramCredentials(List, AlterUserScramCredentialsOptions) The API of this class is evolving.\nClass AlterUserScramCredentialsResult; // The result of the Admin.alterUserScramCredentials(List) call.\n", "des": "Provides a Kafka client for performing administrative operations (such as creating topics and configuring brokers) on a Kafka cluster."}
{"index": 316, "repo": "kafka-clients-3.5.0", "code": "package consumer;\n\nInterface Consumer<K,V>;\nInterface ConsumerInterceptor<K,V>; // A plugin interface that allows you to intercept (and possibly mutate) records received by the consumer.\nInterface ConsumerPartitionAssignor; // This interface is used to define custom partition assignment for use in KafkaConsumer.\nInterface ConsumerRebalanceListener; // A callback interface that the user can implement to trigger custom actions when the set of partitions assigned to the consumer changes.\nInterface OffsetCommitCallback; // A callback interface that the user can implement to trigger custom actions when a commit request completes.\nClass ConsumerConfig; // The consumer configuration keys\nClass ConsumerGroupMetadata; // A metadata struct containing the consumer group information.\nClass ConsumerPartitionAssignor.Assignment;\nClass ConsumerPartitionAssignor.GroupAssignment;\nClass ConsumerPartitionAssignor.GroupSubscription;\nClass ConsumerPartitionAssignor.Subscription;\nClass ConsumerRecord<K,V>; // A key/value pair to be received from Kafka.\nClass ConsumerRecords<K,V>; // A container that holds the list ConsumerRecord per partition for a particular topic.\nClass CooperativeStickyAssignor; // A cooperative version of the AbstractStickyAssignor.\nClass KafkaConsumer<K,V>; // A client that consumes records from a Kafka cluster.\nClass MockConsumer<K,V>; // A mock of the Consumer interface you can use for testing code that uses Kafka.\nClass OffsetAndMetadata; // The Kafka offset commit API allows users to provide additional metadata (in the form of a string) when an offset is committed.\nClass OffsetAndTimestamp; // A container class for offset and timestamp.\nClass RangeAssignor; // The range assignor works on a per-topic basis.\nClass RoundRobinAssignor; // The round robin assignor lays out all the available partitions and all the available consumers.\nClass StickyAssignor; // The sticky assignor serves two purposes.\nEnum ConsumerPartitionAssignor.RebalanceProtocol; // The rebalance protocol defines partition assignment and revocation semantics.\nEnum OffsetResetStrategy;\nClass CommitFailedException; // This exception is raised when an offset commit with KafkaConsumer.commitSync() fails with an unrecoverable error.\nClass InvalidOffsetException; // Thrown when the offset for a set of partitions is invalid (either undefined or out of range), and no reset policy has been configured.\n", "des": "Provides a Kafka client for consuming records from topics and/or partitions in a Kafka cluster."}
{"index": 317, "repo": "kafka-clients-3.5.0", "code": "package producer;\n\nInterface Callback; // A callback interface that the user can implement to allow code to execute when the request is complete.\nInterface Partitioner; // Partitioner Interface\nInterface Producer<K,V>; // The interface for the KafkaProducer\nInterface ProducerInterceptor<K,V>; // A plugin interface that allows you to intercept (and possibly mutate) the records received by the producer before they are published to the Kafka cluster.\nClass KafkaProducer<K,V>; // A Kafka client that publishes records to the Kafka cluster.\nClass MockProducer<K,V>; // A mock of the producer interface you can use for testing code that uses Kafka.\nClass ProducerConfig; // Configuration for the Kafka Producer.\nClass ProducerRecord<K,V>; // A key/value pair to be sent to Kafka.\nClass RecordMetadata; // The metadata for a record that has been acknowledged by the server\nClass RoundRobinPartitioner; // The \"Round-Robin\" partitioner This partitioning strategy can be used when user wants to distribute the writes to all partitions equally.\nClass UniformStickyPartitioner; // Since 3.3.0, in order to use default partitioning logic remove the partitioner.class configuration setting and set partitioner.ignore.keys=true.\nClass BufferExhaustedException; // This exception is thrown if the producer cannot allocate memory for a record within max.block.ms due to the buffer being too full.\n", "des": "Provides a Kafka client for producing records to topics and/or partitions in a Kafka cluster."}
{"index": 318, "repo": "kafka-clients-3.5.0", "code": "package common;\n\npackage common.acl; // Provides classes representing Access Control Lists for authorization of clients\npackage common.annotation; // Provides annotations used on Kafka APIs.\npackage common.config; // Provides common mechanisms for defining, parsing, validating, and documenting user-configurable parameters.\npackage common.errors; // Provides common exception classes.\npackage common.header; // Provides API for application-defined metadata attached to Kafka records.\npackage common.metrics; // Provides the API used by Kafka clients to emit metrics which are then exposed using the * MetricsReporter interface.\npackage common.quota; // Provides mechanisms for enforcing resource quotas.\npackage common.resource; // Provides client handles representing logical resources in a Kafka cluster.\npackage common.serialization; // Provides interface and some implementations of serialization/deserialization routines for various objects.\nInterface ClusterResourceListener; // A callback interface that users can implement when they wish to get notified about changes in the Cluster metadata.\nInterface Configurable; // A Mix-in style interface for classes that are instantiated by reflection and need to take configuration parameters\nInterface KafkaFuture.BaseFunction<A,B>; // A function which takes objects of type A and returns objects of type B.\nInterface KafkaFuture.BiConsumer<A,B>; // A consumer of two different types of object.\nInterface MessageFormatter; // This interface allows to define Formatters that can be used to parse and format records read by a Consumer instance for display.\nInterface Metric; // A metric tracked for monitoring purposes.\nInterface Reconfigurable; // Interface for reconfigurable classes that support dynamic configuration.\nClass Cluster; // An immutable representation of a subset of the nodes, topics, and partitions in the Kafka cluster.\nClass ClusterResource; // The ClusterResource class encapsulates metadata for a Kafka cluster.\nClass Endpoint; // Represents a broker endpoint.\nClass KafkaFuture<T>; // A flexible future which supports call chaining and other asynchronous programming patterns.\nClass KafkaFuture.Function<A,B>; // Since Kafka 3.0.\nClass MetricName; // The MetricName class encapsulates a metric's name, logical group and its related attributes.\nClass MetricNameTemplate; // A template for a MetricName.\nClass Node; // Information about a Kafka node\nClass PartitionInfo; // This is used to describe per-partition state in the MetadataResponse.\n", "des": "Provides shared functionality for Kafka clients and servers."}
{"index": 319, "repo": "kafka-clients-3.5.0", "code": "package acl;\n\nClass AccessControlEntry; // Represents an access control entry.\nClass AccessControlEntryFilter; // Represents a filter which matches access control entries.\nClass AclBinding; // Represents a binding between a resource pattern and an access control entry.\nClass AclBindingFilter; // A filter which can match AclBinding objects.\nEnum AclOperation; // Represents an operation which an ACL grants or denies permission to perform.\nEnum AclPermissionType; // Represents whether an ACL grants or denies permissions.\n", "des": "Provides classes representing Access Control Lists for authorization of clients"}
{"index": 320, "repo": "kafka-clients-3.5.0", "code": "package annotation;\n\nClass InterfaceStability; // Annotation to inform users of how much to rely on a particular package, class or method not changing over time.\nAnnotation Type InterfaceStability.Evolving; // Compatibility may be broken at minor release (i.e.\nAnnotation Type InterfaceStability.Stable; // Compatibility is maintained in major, minor and patch releases with one exception: compatibility may be broken in a major release (i.e.\nAnnotation Type InterfaceStability.Unstable; // No guarantee is provided as to reliability or stability across any level of release granularity.\n", "des": "Provides annotations used on Kafka APIs."}
{"index": 321, "repo": "kafka-clients-3.5.0", "code": "package config;\n\npackage config.provider; // Provides a pluggable interface and some implementations for late-binding in configuration values.\nInterface ConfigChangeCallback; // A callback passed to ConfigProvider for subscribing to changes.\nInterface ConfigDef.Recommender; // This is used by the ConfigDef.validate(Map) to get valid values for a configuration given the current configuration values in order to perform full configuration validation and visibility modification.\nInterface ConfigDef.Validator; // Validation logic the user may provide to perform single configuration validation.\nClass AbstractConfig; // A convenient base class for configurations to extend.\nClass Config;\nClass ConfigData; // Configuration data from a ConfigProvider.\nClass ConfigDef; // This class is used for specifying the set of expected configurations.\nClass ConfigDef.CaseInsensitiveValidString;\nClass ConfigDef.CompositeValidator;\nClass ConfigDef.ConfigKey;\nClass ConfigDef.LambdaValidator;\nClass ConfigDef.ListSize;\nClass ConfigDef.NonEmptyString;\nClass ConfigDef.NonEmptyStringWithoutControlChars;\nClass ConfigDef.NonNullValidator;\nClass ConfigDef.Range; // Validation logic for numeric ranges\nClass ConfigDef.ValidList;\nClass ConfigDef.ValidString;\nClass ConfigResource; // A class representing resources that have configs.\nClass ConfigTransformer; // This class wraps a set of ConfigProvider instances and uses them to perform transformations.\nClass ConfigTransformerResult; // The result of a transformation from ConfigTransformer.\nClass ConfigValue;\nClass LogLevelConfig; // This class holds definitions for log level configurations related to Kafka's application logging.\nClass SaslConfigs;\nClass SecurityConfig; // Contains the common security config for SSL and SASL\nClass SslConfigs;\nClass TopicConfig; // Keys that can be used to configure a topic.\nEnum ConfigDef.Importance; // The importance level for a configuration\nEnum ConfigDef.Type; // The config types\nEnum ConfigDef.Width; // The width of a configuration value\nEnum ConfigResource.Type; // Type of resource.\nEnum SslClientAuth; // Describes whether the server should require or request client authentication.\nClass ConfigException; // Thrown if the user supplies an invalid configuration\n", "des": "Provides common mechanisms for defining, parsing, validating, and documenting user-configurable parameters."}
{"index": 322, "repo": "kafka-clients-3.5.0", "code": "package provider;\n\nInterface ConfigProvider; // A provider of configuration data, which may optionally support subscriptions to configuration changes.\nClass DirectoryConfigProvider; // An implementation of ConfigProvider based on a directory of files.\nClass EnvVarConfigProvider; // An implementation of ConfigProvider based on environment variables.\nClass FileConfigProvider; // An implementation of ConfigProvider that represents a Properties file.\n", "des": "Provides a pluggable interface and some implementations for late-binding in configuration values."}
{"index": 323, "repo": "kafka-clients-3.5.0", "code": "package errors;\n\nClass ApiException; // Any API exception that is part of the public protocol and should be a subclass of this class and be part of this package.\nClass AuthenticationException; // This exception indicates that SASL authentication has failed.\nClass AuthorizationException;\nClass AuthorizerNotReadyException; // An exception that indicates that the authorizer is not ready to receive the request yet.\nClass BrokerIdNotRegisteredException;\nClass BrokerNotAvailableException;\nClass ClusterAuthorizationException;\nClass ConcurrentTransactionsException;\nClass ControllerMovedException;\nClass CoordinatorLoadInProgressException; // In the context of the group coordinator, the broker returns this error code for any coordinator request if it is still loading the group metadata (e.g.\nClass CoordinatorNotAvailableException; // In the context of the group coordinator, the broker returns this error code for metadata or offset commit requests if the group metadata topic has not been created yet.\nClass CorruptRecordException; // This exception indicates a record has failed its internal CRC check, this generally indicates network or disk corruption.\nClass DelegationTokenAuthorizationException;\nClass DelegationTokenDisabledException;\nClass DelegationTokenExpiredException;\nClass DelegationTokenNotFoundException;\nClass DelegationTokenOwnerMismatchException;\nClass DisconnectException; // Server disconnected before a request could be completed.\nClass DuplicateBrokerRegistrationException;\nClass DuplicateResourceException; // Exception thrown due to a request that illegally refers to the same resource twice (for example, trying to both create and delete the same SCRAM credential for a particular user in a single request).\nClass DuplicateSequenceException;\nClass ElectionNotNeededException;\nClass EligibleLeadersNotAvailableException;\nClass FeatureUpdateFailedException;\nClass FencedInstanceIdException;\nClass FencedLeaderEpochException; // The request contained a leader epoch which is smaller than that on the broker that received the request.\nClass FencedMemberEpochException;\nClass FetchSessionIdNotFoundException;\nClass FetchSessionTopicIdException;\nClass GroupAuthorizationException;\nClass GroupIdNotFoundException;\nClass GroupMaxSizeReachedException; // Indicates that a consumer group is already at its configured maximum capacity and cannot accommodate more members\nClass GroupNotEmptyException;\nClass GroupSubscribedToTopicException;\nClass IllegalGenerationException;\nClass IllegalSaslStateException; // This exception indicates unexpected requests prior to SASL authentication.\nClass InconsistentClusterIdException;\n", "des": "Provides common exception classes."}
{"index": 324, "repo": "kafka-clients-3.5.0", "code": "package header;\n\nInterface Header;\nInterface Headers;\n", "des": "Provides API for application-defined metadata attached to Kafka records."}
{"index": 325, "repo": "kafka-clients-3.5.0", "code": "package metrics;\n\npackage metrics.stats; // Provides methods of statistically aggregating metrics upon emission.\nInterface CompoundStat; // A compound stat is a stat where a single measurement and associated data structure feeds many metrics.\nInterface Gauge<T>; // A gauge metric is an instantaneous reading of a particular value.\nInterface Measurable; // A measurable quantity that can be registered as a metric\nInterface MeasurableStat; // A MeasurableStat is a Stat that is also Measurable (i.e.\nInterface MetricsContext; // MetricsContext encapsulates additional contextLabels about metrics exposed via a MetricsReporter\nInterface MetricsReporter; // A plugin interface to allow things to listen as new metrics are created so they can be reported.\nInterface MetricValueProvider<T>; // Super-interface for Measurable or Gauge that provides metric values.\nInterface Stat; // A Stat is a quantity such as average, max, etc that is computed off the stream of updates to a sensor\nClass CompoundStat.NamedMeasurable;\nClass JmxReporter; // Register metrics in JMX as dynamic mbeans based on the metric names\nClass KafkaMetric;\nClass KafkaMetricsContext; // A implementation of MetricsContext, it encapsulates required metrics context properties for Kafka services and clients\nClass MetricConfig; // Configuration values for metrics\nClass Metrics; // A registry of sensors and metrics.\nClass Quota; // An upper or lower bound for metrics\nClass Sensor; // A sensor applies a continuous sequence of numerical values to a set of associated metrics.\nEnum Sensor.RecordingLevel;\nClass QuotaViolationException; // Thrown when a sensor records a value that causes a metric to go outside the bounds configured as its quota\n", "des": "Provides the API used by Kafka clients to emit metrics which are then exposed using the * MetricsReporter interface."}
{"index": 326, "repo": "kafka-clients-3.5.0", "code": "package stats;\n\nInterface Histogram.BinScheme; // An algorithm for determining the bin in which a value is to be placed as well as calculating the upper end of each bin.\nClass Avg; // A SampledStat that maintains a simple average over its samples.\nClass CumulativeCount; // A non-sampled version of WindowedCount maintained over all time.\nClass CumulativeSum; // An non-sampled cumulative total maintained over all time.\nClass Frequencies; // A CompoundStat that represents a normalized distribution with a Frequency metric for each bucketed value.\nClass Frequency; // Definition of a frequency metric used in a Frequencies compound statistic.\nClass Histogram;\nClass Histogram.ConstantBinScheme; // A scheme for calculating the bins where the width of each bin is a constant determined by the range of values and the number of bins.\nClass Histogram.LinearBinScheme; // A scheme for calculating the bins where the width of each bin is one more than the previous bin, and therefore the bin widths are increasing at a linear rate.\nClass Max; // A SampledStat that gives the max over its samples.\nClass Meter; // A compound stat that includes a rate metric and a cumulative total metric.\nClass Min; // A SampledStat that gives the min over its samples.\nClass Percentile;\nClass Percentiles; // A compound stat that reports one or more percentiles\nClass Rate; // The rate of the given quantity.\nClass SampledStat; // A SampledStat records a single scalar value measured over one or more samples.\nClass SimpleRate; // A simple rate the rate is incrementally calculated based on the elapsed time between the earliest reading and now.\nClass TokenBucket; // The TokenBucket is a MeasurableStat implementing a token bucket algorithm that is usable within a Sensor.\nClass Value; // An instantaneous value.\nClass WindowedCount; // A SampledStat that maintains a simple count of what it has seen.\nClass WindowedSum; // A SampledStat that maintains the sum of what it has seen.\nEnum Percentiles.BucketSizing;\n", "des": "Provides methods of statistically aggregating metrics upon emission."}
{"index": 327, "repo": "kafka-clients-3.5.0", "code": "package quota;\n\nClass ClientQuotaAlteration; // Describes a configuration alteration to be made to a client quota entity.\nClass ClientQuotaAlteration.Op;\nClass ClientQuotaEntity; // Describes a client quota entity, which is a mapping of entity types to their names.\nClass ClientQuotaFilter; // Describes a client quota entity filter.\nClass ClientQuotaFilterComponent; // Describes a component for applying a client quota filter.\n", "des": "Provides mechanisms for enforcing resource quotas."}
{"index": 328, "repo": "kafka-clients-3.5.0", "code": "package resource;\n\nClass Resource; // Represents a cluster resource with a tuple of (type, name).\nClass ResourcePattern; // Represents a pattern that is used by ACLs to match zero or more Resources.\nClass ResourcePatternFilter; // Represents a filter that can match ResourcePattern.\nEnum PatternType; // Resource pattern type.\nEnum ResourceType; // Represents a type of resource which an ACL can be applied to.\n", "des": "Provides client handles representing logical resources in a Kafka cluster."}
{"index": 329, "repo": "kafka-clients-3.5.0", "code": "package auth;\n\nInterface AuthenticateCallbackHandler;\nInterface AuthenticationContext; // An object representing contextual information from the authentication session.\nInterface KafkaPrincipalBuilder; // Pluggable principal builder interface which supports both SSL authentication through SslAuthenticationContext and SASL through SaslAuthenticationContext.\nInterface KafkaPrincipalSerde; // Serializer/Deserializer interface for KafkaPrincipal for the purpose of inter-broker forwarding.\nInterface Login; // Login interface for authentication.\nInterface SecurityProviderCreator; // An interface for generating security providers.\nInterface SslEngineFactory; // Plugin interface for allowing creation of SSLEngine object in a custom way.\nClass KafkaPrincipal; // Principals in Kafka are defined by a type and a name.\nClass PlaintextAuthenticationContext;\nClass SaslAuthenticationContext;\nClass SaslExtensions; // A simple immutable value object class holding customizable SASL extensions.\nClass SaslExtensionsCallback; // Optional callback used for SASL mechanisms if any extensions need to be set in the SASL exchange.\nClass SslAuthenticationContext;\nEnum SecurityProtocol;\n", "des": "Provides pluggable interfaces for implementing Kafka authentication mechanisms."}
{"index": 330, "repo": "kafka-clients-3.5.0", "code": "package oauthbearer;\n\npackage oauthbearer.secured; // This package is deprecated.\nInterface OAuthBearerToken; // The b64token value as defined in RFC 6750 Section 2.1 along with the token's specific scope and lifetime and principal name.\nClass OAuthBearerExtensionsValidatorCallback; // A Callback for use by the SaslServer implementation when it needs to validate the SASL extensions for the OAUTHBEARER mechanism Callback handlers should use the OAuthBearerExtensionsValidatorCallback.valid(String) method to communicate valid extensions back to the SASL server.\nClass OAuthBearerLoginCallbackHandler; // OAuthBearerLoginCallbackHandler is an AuthenticateCallbackHandler that accepts OAuthBearerTokenCallback and SaslExtensionsCallback callbacks to perform the steps to request a JWT from an OAuth/OIDC provider using the clientcredentials.\nClass OAuthBearerLoginModule; // The LoginModule for the SASL/OAUTHBEARER mechanism.\nClass OAuthBearerTokenCallback; // A Callback for use by the SaslClient and Login implementations when they require an OAuth 2 bearer token.\nClass OAuthBearerValidatorCallback; // A Callback for use by the SaslServer implementation when it needs to provide an OAuth 2 bearer token compact serialization for validation.\nClass OAuthBearerValidatorCallbackHandler; // OAuthBearerValidatorCallbackHandler is an AuthenticateCallbackHandler that accepts OAuthBearerValidatorCallback and OAuthBearerExtensionsValidatorCallback callbacks to implement OAuth/OIDC validation.\n", "des": "Provides a LoginModule for using OAuth Bearer Token authentication with Kafka clusters."}
{"index": 331, "repo": "kafka-clients-3.5.0", "code": "package secured;\n\nClass OAuthBearerLoginCallbackHandler; // See org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginCallbackHandler\nClass OAuthBearerValidatorCallbackHandler; // See org.apache.kafka.common.security.oauthbearer.OAuthBearerValidatorCallbackHandler\n", "des": "This package is deprecated."}
{"index": 332, "repo": "kafka-clients-3.5.0", "code": "package plain;\n\nClass PlainAuthenticateCallback;\nClass PlainLoginModule;\n", "des": "Provides implementation to use plaintext credentials authentication for securing Kafka clusters."}
{"index": 333, "repo": "kafka-clients-3.5.0", "code": "package scram;\n\nClass ScramCredential; // SCRAM credential class that encapsulates the credential data persisted for each user that is accessible to the server.\nClass ScramCredentialCallback; // Callback used for SCRAM mechanisms.\nClass ScramExtensionsCallback; // Optional callback used for SCRAM mechanisms if any extensions need to be set in the SASL/SCRAM exchange.\nClass ScramLoginModule;\n", "des": "Provides adaptor to use the Salted Challenge Response Authentication Mechanism for securing Kafka clusters."}
{"index": 334, "repo": "kafka-clients-3.5.0", "code": "package delegation;\n\nClass DelegationToken; // A class representing a delegation token.\nClass TokenInformation; // A class representing a delegation token details.\n", "des": "Provides mechanism for delegating authorization to a distinct Principal for securing Kafka clusters."}
{"index": 335, "repo": "kafka-clients-3.5.0", "code": "package serialization;\n\nInterface Deserializer<T>; // An interface for converting bytes to objects.\nInterface Serde<T>; // The interface for wrapping a serializer and deserializer for the given data type.\nInterface Serializer<T>; // An interface for converting objects to bytes.\nClass BooleanDeserializer;\nClass BooleanSerializer;\nClass ByteArrayDeserializer;\nClass ByteArraySerializer;\nClass ByteBufferDeserializer;\nClass ByteBufferSerializer; // Do not need to flip before call serialize(String, ByteBuffer).\nClass BytesDeserializer;\nClass BytesSerializer;\nClass DoubleDeserializer;\nClass DoubleSerializer;\nClass FloatDeserializer;\nClass FloatSerializer;\nClass IntegerDeserializer;\nClass IntegerSerializer;\nClass ListDeserializer<Inner>;\nClass ListSerializer<Inner>;\nClass LongDeserializer;\nClass LongSerializer;\nClass Serdes; // Factory for creating serializers / deserializers.\nClass Serdes.BooleanSerde;\nClass Serdes.ByteArraySerde;\nClass Serdes.ByteBufferSerde;\nClass Serdes.BytesSerde;\nClass Serdes.DoubleSerde;\nClass Serdes.FloatSerde;\nClass Serdes.IntegerSerde;\nClass Serdes.ListSerde<Inner>;\nClass Serdes.LongSerde;\nClass Serdes.ShortSerde;\nClass Serdes.StringSerde;\nClass Serdes.UUIDSerde;\nClass Serdes.VoidSerde;\nClass Serdes.WrapperSerde<T>;\nClass ShortDeserializer;\nClass ShortSerializer;\nClass StringDeserializer; // String encoding defaults to UTF8 and can be customized by setting the property key.deserializer.encoding, value.deserializer.encoding or deserializer.encoding.\nClass StringSerializer; // String encoding defaults to UTF8 and can be customized by setting the property key.serializer.encoding, value.serializer.encoding or serializer.encoding.\nClass UUIDDeserializer; // We are converting the byte array to String before deserializing to UUID.\nClass UUIDSerializer; // We are converting UUID to String before serializing.\nClass VoidDeserializer;\nClass VoidSerializer;\n", "des": "Provides interface and some implementations of serialization/deserialization routines for various objects."}
{"index": 336, "repo": "kafka-clients-3.5.0", "code": "package authorizer;\n\nInterface AuthorizableRequestContext; // Request context interface that provides data from request header as well as connection and authentication information to plugins.\nInterface Authorizer; // Pluggable authorizer interface for Kafka brokers.\nInterface AuthorizerServerInfo; // Runtime broker configuration metadata provided to authorizers during start up.\nClass AclCreateResult;\nClass AclDeleteResult;\nClass AclDeleteResult.AclBindingDeleteResult; // Delete result for each ACL binding that matched a delete filter.\nClass Action;\nEnum AuthorizationResult;\n", "des": "Provides pluggable interface for performing authorization on a Kafka server."}
{"index": 337, "repo": "kafka-clients-3.5.0", "code": "package policy;\n\nInterface AlterConfigPolicy; // An interface for enforcing a policy on alter configs requests.\nInterface CreateTopicPolicy; // An interface for enforcing a policy on create topics requests.\nClass AlterConfigPolicy.RequestMetadata; // Class containing the create request parameters.\nClass CreateTopicPolicy.RequestMetadata; // Class containing the create request parameters.\n", "des": "Provides pluggable interfaces for expressing policies on topics and configs."}
{"index": 338, "repo": "kafka-clients-3.5.0", "code": "package quota;\n\nInterface ClientQuotaCallback; // Quota callback interface for brokers that enables customization of client quota computation.\nInterface ClientQuotaEntity; // The metadata for an entity for which quota is configured.\nInterface ClientQuotaEntity.ConfigEntity; // Interface representing a quota configuration entity.\nEnum ClientQuotaEntity.ConfigEntityType; // Entity type of a ClientQuotaEntity.ConfigEntity\nEnum ClientQuotaType; // Types of quotas that may be configured on brokers for client requests.\n", "des": "Provides pluggable interface for enforcing client quotas from a Kafka server."}
{"index": 339, "repo": "hadoop-hdfs-3.3.6", "code": "package hdfs;\n\npackage hdfs.protocolPB; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\nClass DFSUtil.ConfiguredNNAddress; // Represent one of the NameNodes configured in the cluster.\nClass DFSUtil.ServiceComparator; // Comparator for sorting DataNodeInfo[] based on decommissioned and entering_maintenance states.\nClass HdfsDtFetcher; // DtFetcher is an interface which permits the abstraction and separation of delegation token fetch implementaions across different packages and compilation units.\nClass SWebHdfsDtFetcher; // DtFetcher for SWebHdfsFileSystem using the base class HdfsDtFetcher impl.\nClass WebHdfsDtFetcher; // DtFetcher for WebHdfsFileSystem using the base class HdfsDtFetcher impl.\n", "des": "A distributed implementation of FileSystem."}
{"index": 340, "repo": "hadoop-hdfs-3.3.6", "code": "package datatransfer;\n\nClass BlackListBasedTrustedChannelResolver; // Implements TrustedChannelResolver to trust ips/host/subnets based on a blackList.\nClass WhitelistBasedTrustedChannelResolver;\n", "des": "This package contains classes related to hdfs data transfer protocol."}
{"index": 341, "repo": "hadoop-hdfs-3.3.6", "code": "package protocolPB;\n\nClass DatanodeProtocolServerSideTranslatorPB;\nClass NamenodeProtocolServerSideTranslatorPB; // Implementation for protobuf service that forwards requests received on NamenodeProtocolPB to the NamenodeProtocol server implementation.\nClass PBHelper; // Utilities for converting protobuf classes to and from implementation classes and other helper utilities to help in dealing with protobuf.\nClass ReconfigurationProtocolServerSideTranslatorPB; // This class is used on the server side.\nClass ReconfigurationProtocolServerSideUtils; // This is a server side utility class that handles common logic to to parameter reconfiguration.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 342, "repo": "hadoop-hdfs-3.3.6", "code": "package blockaliasmap;\n\nInterface BlockAliasMap.Reader.Options; // reader options.\nInterface BlockAliasMap.Writer.Options; // writer options.\nClass BlockAliasMap<T extends BlockAlias>; // An abstract class used to read and write block maps for provided blocks.\nClass BlockAliasMap.Reader<U extends BlockAlias>; // An abstract class that is used to read BlockAliases for provided blocks.\nClass BlockAliasMap.Writer<U extends BlockAlias>; // An abstract class used as a writer for the provided block map.\n", "des": "The AliasMap defines mapping of PROVIDED HDFS blocks to data in remote storage systems."}
{"index": 343, "repo": "hadoop-hdfs-3.3.6", "code": "package web;\n\nClass DatanodeHttpServer; // Data node HTTP Server Class.\nClass DatanodeHttpServer.MapBasedFilterConfig; // Since the DataNode HTTP server is not implemented in terms of the servlet API, it takes some extra effort to obtain an instance of the filter.\n", "des": "Data node HTTP classes."}
{"index": 344, "repo": "hadoop-hdfs-3.3.6", "code": "package diskbalancer;\n\npackage diskbalancer.command; // Commands for disk balancer command line tool.\npackage diskbalancer.connectors; // Connectors package is a set of logical connectors that connect to various data sources to read the hadoop cluster information.\npackage diskbalancer.datamodel; // Disk Balancer Data Model is the Data Model for the cluster that Disk Balancer is working against.\npackage diskbalancer.planner; // Planner takes a DiskBalancerVolumeSet, threshold and computes a series of steps that lead to an even data distribution between volumes of this DiskBalancerVolumeSet.\nEnum DiskBalancerException.Result; // Results returned by the RPC layer of DiskBalancer.\nClass DiskBalancerException; // Disk Balancer Exceptions.\n", "des": "Disk Balancer connects to a .DataNode and attempts to spread data across all volumes evenly."}
{"index": 345, "repo": "hadoop-hdfs-3.3.6", "code": "package command;\n\nClass CancelCommand; // Cancels a running plan.\nClass Command; // Common interface for command handling.\nClass ExecuteCommand; // executes a given plan.\nClass HelpCommand; // Help Command prints out detailed help about each command.\nClass PlanCommand; // Class that implements Plan Command.\nClass QueryCommand; // Gets the current status of disk balancer command.\nClass ReportCommand; // Executes the report command.\n", "des": "Commands for disk balancer command line tool."}
{"index": 346, "repo": "hadoop-hdfs-3.3.6", "code": "package connectors;\n\nInterface ClusterConnector; // ClusterConnector interface hides all specifics about how we communicate to the HDFS cluster.\nClass ConnectorFactory; // Connector factory creates appropriate connector based on the URL.\nClass JsonNodeConnector; // A connector that understands JSON data cluster models.\n", "des": "Connectors package is a set of logical connectors that connect to various data sources to read the hadoop cluster information."}
{"index": 347, "repo": "hadoop-hdfs-3.3.6", "code": "package datamodel;\n\nClass DiskBalancerCluster; // DiskBalancerCluster represents the nodes that we are working against.\nClass DiskBalancerDataNode; // DiskBalancerDataNode represents a DataNode that exists in the cluster.\nClass DiskBalancerVolume; // DiskBalancerVolume represents a volume in the DataNode.\nClass DiskBalancerVolumeSet; // DiskBalancerVolumeSet is a collection of storage devices on the data node which are of similar StorageType.\n", "des": "Disk Balancer Data Model is the Data Model for the cluster that Disk Balancer is working against."}
{"index": 348, "repo": "hadoop-hdfs-3.3.6", "code": "package planner;\n\nInterface Planner; // Planner interface allows different planners to be created.\nInterface Step; // A step in the plan.\nClass GreedyPlanner; // Greedy Planner is a simple planner that computes the largest possible move at any point of time given a volumeSet.\nClass MoveStep; // Ignore fields with default values.\nClass NodePlan; // NodePlan is a set of volumeSetPlans.\nClass PlannerFactory; // Returns a planner based on the user defined tags.\n", "des": "Planner takes a DiskBalancerVolumeSet, threshold and computes a series of steps that lead to an even data distribution between volumes of this DiskBalancerVolumeSet."}
{"index": 349, "repo": "lucene-analyzers-kuromoji-8.11.2", "code": "package ja;\n\npackage ja.dict; // Kuromoji dictionary implementation.\npackage ja.tokenattributes; // Additional Kuromoji-specific Attributes for text analysis.\npackage ja.util; // Kuromoji utility classes.\nClass GraphvizFormatter; // Outputs the dot (graphviz) string for the viterbi lattice.\nClass JapaneseAnalyzer; // Analyzer for Japanese that uses morphological analysis.\nClass JapaneseBaseFormFilter; // Replaces term text with the BaseFormAttribute.\nClass JapaneseBaseFormFilterFactory; // Factory for JapaneseBaseFormFilter.\nClass JapaneseIterationMarkCharFilter; // Normalizes Japanese horizontal iteration marks (odoriji) to their expanded form.\nClass JapaneseIterationMarkCharFilterFactory; // Factory for JapaneseIterationMarkCharFilter.\nClass JapaneseKatakanaStemFilter; // A TokenFilter that normalizes common katakana spelling variations ending in a long sound character by removing this character (U+30FC).\nClass JapaneseKatakanaStemFilterFactory; // Factory for JapaneseKatakanaStemFilter.\nClass JapaneseNumberFilter; // A TokenFilter that normalizes Japanese numbers (kansūji) to regular Arabic decimal numbers in half-width characters.\nClass JapaneseNumberFilter.NumberBuffer; // Buffer that holds a Japanese number string and a position index used as a parsed-to marker\nClass JapaneseNumberFilterFactory; // Factory for JapaneseNumberFilter.\nClass JapanesePartOfSpeechStopFilter; // Removes tokens that match a set of part-of-speech tags.\nClass JapanesePartOfSpeechStopFilterFactory; // Factory for JapanesePartOfSpeechStopFilter.\nClass JapaneseReadingFormFilter; // A TokenFilter that replaces the term attribute with the reading of a token in either katakana or romaji form.\nClass JapaneseReadingFormFilterFactory; // Factory for JapaneseReadingFormFilter.\nClass JapaneseTokenizer; // Tokenizer for Japanese that uses morphological analysis.\nClass JapaneseTokenizerFactory; // Factory for JapaneseTokenizer.\nClass Token; // Analyzed token with morphological data from its dictionary.\n", "des": "Analyzer for Japanese."}
{"index": 350, "repo": "lucene-analyzers-kuromoji-8.11.2", "code": "package dict;\n\nInterface Dictionary; // Dictionary interface for retrieving morphological data by id.\nClass BinaryDictionary; // Base class for a binary-encoded in-memory dictionary.\nClass CharacterDefinition; // Character category data.\nClass ConnectionCosts; // n-gram connection cost data\nClass TokenInfoDictionary; // Binary dictionary implementation for a known-word dictionary model: Words are encoded into an FST mapping to a list of wordIDs.\nClass TokenInfoFST; // Thin wrapper around an FST with root-arc caching for Japanese.\nClass UnknownDictionary; // Dictionary for unknown-word handling.\nClass UserDictionary; // Class for building a User Dictionary.\nEnum BinaryDictionary.ResourceScheme; // Used to specify where (dictionary) resources get loaded from.\n", "des": "Kuromoji dictionary implementation."}
{"index": 351, "repo": "lucene-analyzers-kuromoji-8.11.2", "code": "package tokenattributes;\n\nInterface BaseFormAttribute; // Attribute for Token.getBaseForm().\nInterface InflectionAttribute; // Attribute for Kuromoji inflection data.\nInterface PartOfSpeechAttribute; // Attribute for Token.getPartOfSpeech().\nInterface ReadingAttribute; // Attribute for Kuromoji reading data\nClass BaseFormAttributeImpl; // Attribute for Token.getBaseForm().\nClass InflectionAttributeImpl; // Attribute for Kuromoji inflection data.\nClass PartOfSpeechAttributeImpl; // Attribute for Token.getPartOfSpeech().\nClass ReadingAttributeImpl; // Attribute for Kuromoji reading data\n", "des": "Additional Kuromoji-specific Attributes for text analysis."}
{"index": 352, "repo": "lucene-analyzers-kuromoji-8.11.2", "code": "package util;\n\nClass CSVUtil; // Utility class for parsing CSV text\nClass DictionaryBuilder; // Tool to build dictionaries.\nClass ToStringUtil; // Utility class for english translations of morphological data, used only for debugging.\nEnum DictionaryBuilder.DictionaryFormat; // Format of the dictionary.\n", "des": "Kuromoji utility classes."}
{"index": 353, "repo": "hive-exec-4.0.0-alpha-2", "code": "package exec;\n\npackage exec.errors; // Generates execution error messages using heuristics.\nInterface BucketMatcher;\nInterface DynamicValueRegistry;\nInterface FileSinkOperator.RecordWriter; // RecordWriter.\nInterface HashTableLoader; // HashTableLoader is an interface used by MapJoinOperator used to load the hashtables needed to process the join.\nInterface IConfigureJobConf; // Enables an operator to be able to make changes to the JobConf.\nInterface NodeUtils.Function<T>;\nInterface ObjectCache; // ObjectCache.\nInterface Operator.OperatorFunc; // OperatorFunc.\nInterface PTFPartition.PTFPartitionIterator<T>;\nInterface RecordReader; // RecordReader.\nInterface RecordWriter; // RecordWriter.\nInterface TopNHash.BinaryCollector; // For interaction between operator and top-n hash.\nInterface Utilities.SupplierWithCheckedException<T,X extends Exception>;\nClass AbstractFileMergeOperator<T extends FileMergeDesc>; // Fast file merge operator for ORC and RCfile.\nClass AbstractMapJoinOperator<T extends MapJoinDesc>;\nClass AbstractMapOperator; // Abstract Map operator.\nClass AddToClassPathAction; // Helper class to create UDFClassLoader when running under a security manager.\nClass AppMasterEventOperator; // AppMasterEventOperator sends any rows it receives to the Tez AM.\nClass ArchiveUtils; // ArchiveUtils.\nClass ArchiveUtils.HarPathHelper; // HarPathHelper helps to create har:/ URIs for locations inside of archive.\nClass ArchiveUtils.PartSpecInfo; // PartSpecInfo keeps fields and values extracted from partial partition info which is prefix of the full info.\nClass AutoProgressor; // AutoProgressor periodically sends updates to the job tracker so that it doesn't consider this task attempt dead if there is a long period of inactivity.\nClass BinaryRecordReader; // Read from a binary stream and treat each 1000 bytes (configurable via hive.binary.record.max.length) as a record.\nClass BoundaryCache; // Cache for storing boundaries found within a partition - used for PTF functions.\nClass ByteWritable;\nClass ByteWritable.Comparator; // A Comparator optimized for BytesWritable.\nClass CollectOperator; // Buffers rows emitted by other operators.\n", "des": "Hive QL execution tasks, operators, functions and other handlers."}
{"index": 354, "repo": "hive-exec-4.0.0-alpha-2", "code": "package errors;\n\nInterface ErrorHeuristic; // Classes implementing ErrorHeuristic are able to generate a possible cause and solution for Hive jobs that have failed by examining the query, task log files, and the job configuration.\nClass DataCorruptErrorHeuristic; // Detects the condition where there is a error with one of the input files in the query.\nClass ErrorAndSolution; // Immutable class for storing a possible error and a resolution suggestion.\nClass MapAggrMemErrorHeuristic; // Detects out-of-memory errors when hash tables in map-based aggregation group by queries take up too much memory.\nClass RegexErrorHeuristic; // Simple heuristic where the query and the lines of the task log file are run through regular expressions to see if they resemble a known error condition.\nClass ScriptErrorHeuristic; // Detects when a query has failed because a user's script that was specified in transform returns a non-zero error code.\nClass TaskLogProcessor; // TaskLogProcessor reads the logs from failed task attempts and tries to figure out what the cause of the error was using various heuristics.\nClass DataConstraintViolationError; // Error class, thrown when arguments's constraints violate.\n", "des": "Generates execution error messages using heuristics."}
{"index": 355, "repo": "hive-exec-4.0.0-alpha-2", "code": "package orc;\n\nInterface ExternalCache.ExternalFooterCachesByConf; // An abstraction for testing ExternalCache in OrcInputFormat.\nInterface ExternalCache.ExternalFooterCachesByConf.Cache;\nInterface OrcInputFormat.FooterCache; // Represents footer cache.\nInterface Reader; // The interface for reading ORC files.\nInterface RecordReader; // A row-by-row iterator for ORC files.\nInterface VectorizedOrcAcidRowBatchReader.DeleteEventRegistry; // An interface that can determine which rows have been deleted from a given vectorized row batch.\nInterface Writer; // The HIVE interface for writing ORC files.\nClass ExternalCache; // Metastore-based footer cache storing serialized footers.\nClass FixAcidKeyIndex; // Utility to check and fix the ACID key index of an ORC file if it has been written incorrectly due to HIVE-18817.\nClass MetastoreExternalCachesByConf; // An implementation of external cache and factory based on metastore.\nClass MetastoreExternalCachesByConf.HBaseCache;\nClass OrcFile; // Contains factory methods to read or write ORC files.\nClass OrcFile.ReaderOptions;\nClass OrcFile.WriterOptions; // Options for creating ORC file writers.\nClass OrcFileFormatProxy; // File format proxy for ORC.\nClass OrcFileKeyWrapper; // Key for OrcFileMergeMapper task.\nClass OrcFileStripeMergeInputFormat;\nClass OrcFileStripeMergeRecordReader;\nClass OrcFileValueWrapper; // Value for OrcFileMergeMapper.\nClass OrcInputFormat; // A MapReduce/Hive input format for ORC files.\nClass OrcInputFormat.ContextFactory;\nClass OrcInputFormat.FooterCacheKey;\nClass OrcInputFormat.NullKeyRecordReader; // Return a RecordReader that is compatible with the Hive 0.12 reader with NullWritable for the key instead of RecordIdentifier.\nClass OrcNewInputFormat; // An InputFormat for ORC files.\nClass OrcNewOutputFormat; // An OutputFormat that writes ORC files.\nClass OrcNewSplit; // OrcFileSplit.\nClass OrcOiBatchToRowReader; // BatchToRowReader that returns the rows readable by ORC IOs.\n", "des": "The Optimized Row Columnar (ORC) File Format."}
{"index": 356, "repo": "hive-exec-4.0.0-alpha-2", "code": "package vector;\n\nInterface ParquetDataColumnReader; // The interface to wrap the underlying Parquet dictionary and non dictionary encoded page reader.\nInterface VectorizedColumnReader;\nClass BaseVectorizedColumnReader; // It's column level Parquet reader which is used to read a batch of records for a column, part of the code is referred from Apache Spark and Apache Parquet.\nClass BaseVectorizedColumnReader.NullIntIterator;\nClass BaseVectorizedColumnReader.RLEIntIterator;\nClass BaseVectorizedColumnReader.ValuesReaderIntIterator;\nClass ParquetDataColumnReaderFactory; // Parquet file has self-describing schema which may differ from the user required schema (e.g.\nClass ParquetDataColumnReaderFactory.DefaultParquetDataColumnReader; // The default data column reader for existing Parquet page reader which works for both dictionary or non dictionary types, Mirror from dictionary encoding path.\nClass ParquetDataColumnReaderFactory.TypesFromBooleanPageReader; // The reader who reads from the underlying boolean value value.\nClass ParquetDataColumnReaderFactory.TypesFromDecimalPageReader; // The reader who reads from the underlying decimal value value.\nClass ParquetDataColumnReaderFactory.TypesFromDoublePageReader; // The reader who reads from the underlying double value value.\nClass ParquetDataColumnReaderFactory.TypesFromFloatPageReader; // The reader who reads from the underlying float value value.\nClass ParquetDataColumnReaderFactory.TypesFromInt32DecimalPageReader; // The reader who reads from the underlying decimal value which is stored in an INT32 physical type.\nClass ParquetDataColumnReaderFactory.TypesFromInt32PageReader; // The reader who reads from the underlying int32 value value.\nClass ParquetDataColumnReaderFactory.TypesFromInt64DecimalPageReader; // The reader who reads from the underlying decimal value which is stored in an INT64 physical type.\nClass ParquetDataColumnReaderFactory.TypesFromInt64PageReader; // The reader who reads from the underlying int64 value value.\nClass ParquetDataColumnReaderFactory.TypesFromInt96PageReader; // The reader who reads from the underlying Timestamp value value.\nClass ParquetDataColumnReaderFactory.TypesFromStringPageReader; // The reader who reads from the underlying UTF8 string.\n", "des": "Hive Parquet Vectorized Reader related."}
{"index": 357, "repo": "hive-exec-4.0.0-alpha-2", "code": "package protobuf;\n\nClass ProtobufBytesWritableSerDe; // Class to convert bytes writable containing a protobuf message to hive formats.\nClass ProtobufMessageInputFormat<K,V extends com.google.protobuf.MessageLite>; // InputFormat to support reading ProtoWritable stored in a sequence file.\nClass ProtobufMessageSerDe; // Class to convert ProtoMessageWritable to hive formats.\nClass ProtobufSerDe; // SerDe to convert ProtoWritable messages to Hive formats.\n", "des": "This package contains contributed input format."}
{"index": 358, "repo": "hive-exec-4.0.0-alpha-2", "code": "package lockmgr;\n\nInterface HiveLockManager; // Manager for locks in Hive.\nInterface HiveTxnManager; // An interface that allows Hive to manage transactions.\nClass DbLockManager; // An implementation of HiveLockManager for use with DbTxnManager.\nClass DbTxnManager; // An implementation of HiveTxnManager that stores the transactions in the metastore database.\nClass DbTxnManager.Heartbeater; // Heartbeater thread\nClass DbTxnManager.HeartbeaterThread;\nClass EmbeddedLockManager; // shared lock manager for dedicated hive server.\nClass HiveLock;\nClass HiveLockManagerCtx;\nClass HiveLockObj;\nClass HiveLockObject;\nClass HiveLockObject.HiveLockObjectData;\nClass TxnManagerFactory; // A factory to get an instance of HiveTxnManager.\nEnum HiveLockMode;\nClass LockException; // Exception from lock manager.\n", "des": "Hive Lock Manager interfaces and some custom implmentations"}
{"index": 359, "repo": "hive-exec-4.0.0-alpha-2", "code": "package generic;\n\nInterface Collector; // Collector gets data from a source.\nInterface GenericUDAFEvaluator.AggregationBuffer; // use GenericUDAFEvaluator.AbstractAggregationBuffer instead\nInterface GenericUDAFParameterInfo; // A callback interface used in conjunction with GenericUDAFResolver2 interface that allows for a more extensible and flexible means of discovering the parameter types provided for UDAF invocation.\nInterface GenericUDAFPercentileCont.PercentileCalculator<U>;\nInterface GenericUDAFResolver; // Use GenericUDAFResolver2 instead.\nInterface GenericUDAFResolver2;\nInterface GenericUDF.DeferredObject; // A Deferred Object allows us to do lazy-evaluation and short-circuiting.\nInterface GenericUDFBridge.UdfWhitelistChecker;\nInterface ISupportStreamingModeForWindowing; // A GenericUDAF mode that provides it results as a List to the WindowingTableFunction (so it is a WindowFunctionInfo.isPivotResult() return true) may support this interface.\nClass AbstractGenericUDAFResolver;\nClass AbstractGenericUDFReflect; // common class for reflective UDFs\nClass BaseMaskUDF;\nClass GenericUDAFApproximateDistinct;\nClass GenericUDAFApproximateDistinct.CountApproximateDistinctEvaluator;\nClass GenericUDAFApproximateDistinct.HyperLogLogEvaluator;\nClass GenericUDAFAverage; // GenericUDAFAverage.\nClass GenericUDAFAverage.AbstractGenericUDAFAverageEvaluator<TYPE>;\nClass GenericUDAFAverage.GenericUDAFAverageEvaluatorDecimal;\nClass GenericUDAFAverage.GenericUDAFAverageEvaluatorDouble;\nClass GenericUDAFBinarySetFunctions;\nClass GenericUDAFBinarySetFunctions.RegrAvgX;\nClass GenericUDAFBinarySetFunctions.RegrAvgY;\nClass GenericUDAFBinarySetFunctions.RegrCount;\nClass GenericUDAFBinarySetFunctions.RegrIntercept;\nClass GenericUDAFBinarySetFunctions.RegrR2;\nClass GenericUDAFBinarySetFunctions.RegrSlope;\nClass GenericUDAFBinarySetFunctions.RegrSXX;\nClass GenericUDAFBinarySetFunctions.RegrSXY;\nClass GenericUDAFBinarySetFunctions.RegrSYY;\nClass GenericUDAFBloomFilter; // Generic UDF to generate Bloom Filter\n", "des": "Standard toolkit and framework for generic User-defined functions."}
{"index": 360, "repo": "hive-exec-4.0.0-alpha-2", "code": "package proto;\n\nClass DatePartitionedLogger<T extends com.google.protobuf.MessageLite>; // Class to create proto reader and writer for a date partitioned directory structure.\nClass ProtoMessageReader<T extends com.google.protobuf.MessageLite>;\nClass ProtoMessageWritable<T extends com.google.protobuf.MessageLite>;\nClass ProtoMessageWriter<T extends com.google.protobuf.MessageLite>;\n", "des": "Logger code copied from tez codebase, this should be removed when we swtich to 0.9.2 tez version and we should depend on the tez libraries for this."}
{"index": 361, "repo": "commons-geometry-euclidean-1.0", "code": "package euclidean;\n\npackage euclidean.internal; // This package contains Euclidean geometry utilities and classes intended for internal use only.\npackage euclidean.oned; // This package provides basic 1D geometry components.\npackage euclidean.threed; // This package provides basic 3D geometry components.\npackage euclidean.twod; // This package provides basic 2D geometry components.\nInterface EuclideanTransform<V extends EuclideanVector<V>>; // Interface representing affine transforms in Euclidean space.\nClass AbstractAffineTransformMatrix<V extends EuclideanVector<V>,M extends AbstractAffineTransformMatrix<V,M>>; // Base class for affine transform matrices in Euclidean space.\nClass AbstractBounds<P extends EuclideanVector<P>,B extends AbstractBounds<P,B>>; // Base class representing an axis-aligned bounding box with minimum and maximum bounding points.\nClass AbstractLinecastPoint<P extends EuclideanVector<P>,U extends P,L extends Embedding<P,Vector1D>>; // Base class for intersections discovered during linecast operations.\nClass AbstractNSphere<V extends EuclideanVector<V>>; // Abstract base class representing an n-sphere, which is a generalization of the ordinary 3 dimensional sphere to arbitrary dimensions.\nClass EuclideanVector<V extends EuclideanVector<V>>; // Abstract base class for Euclidean vectors and points.\nClass EuclideanVectorSum<V extends EuclideanVector<V>>; // Class representing a sum of Euclidean vectors.\nClass MultiDimensionalEuclideanVector<V extends MultiDimensionalEuclideanVector<V>>; // Abstract base class for Euclidean vectors with two or more dimensions.\n", "des": "This is the top-level package for Euclidean geometry components."}
{"index": 362, "repo": "commons-geometry-euclidean-1.0", "code": "package internal;\n\nClass AbstractPathConnector<E extends AbstractPathConnector.ConnectableElement<E>>; // Abstract base class for joining unconnected path elements into connected, directional paths.\nClass AbstractPathConnector.ConnectableElement<E extends AbstractPathConnector.ConnectableElement<E>>; // Class used to represent connectable path elements for use with AbstractPathConnector.\nClass EuclideanUtils; // Class containing utilities and algorithms intended to be internal to the library.\nClass Matrices; // This class consists exclusively of static matrix utility methods.\nClass Vectors; // This class consists exclusively of static vector utility methods.\n", "des": "This package contains Euclidean geometry utilities and classes intended for internal use only."}
{"index": 363, "repo": "commons-geometry-euclidean-1.0", "code": "package oned;\n\nClass AffineTransformMatrix1D; // Class using a matrix to represent affine transformations in 1 dimensional Euclidean space.\nClass Interval; // Class representing an interval in one dimension.\nClass OrientedPoint; // This class represents a 1D oriented hyperplane.\nClass OrientedPoints; // Class containing factory methods for constructing OrientedPoint instances.\nClass RegionBSPTree1D; // Binary space partitioning (BSP) tree representing a region in one dimensional Euclidean space.\nClass RegionBSPTree1D.RegionNode1D; // BSP tree node for one dimensional Euclidean space.\nClass Vector1D; // This class represents vectors and points in one-dimensional Euclidean space.\nClass Vector1D.Sum; // Class used to create high-accuracy sums of vectors.\nClass Vector1D.Unit; // Represent unit vectors.\n", "des": "This package provides basic 1D geometry components."}
{"index": 364, "repo": "commons-geometry-euclidean-1.0", "code": "package threed;\n\npackage threed.line; // This package provides classes and utilities for lines in 3D Euclidean space.\npackage threed.mesh; // This package contains types representing 3D mesh data structures.\npackage threed.rotation; // This package provides components related to rotations in 3 dimensional Euclidean space.\npackage threed.shape; // This package provides utilities for constructing basic 3D shapes.\nInterface BoundarySource3D; // Extension of the BoundarySource interface for Euclidean 3D space.\nInterface ConvexPolygon3D; // Interface representing a closed, finite convex polygon in Euclidean 3D space.\nInterface PlaneConvexSubset; // Interface representing a finite or infinite convex subset of points in a plane in Euclidean 3D space.\nInterface PlaneConvexSubset.Embedded; // Interface used to represent plane convex subsets as embedded 2D subspace regions.\nInterface PlaneSubset; // Interface representing a subset of points in a plane in Euclidean 3D space.\nInterface PlaneSubset.Embedded; // Interface used to represent plane subsets as embedded 2D subspace regions.\nInterface Triangle3D; // Interface representing a triangle in Euclidean 3D space.\nClass AffineTransformMatrix3D; // Class using a matrix to represent affine transformations in 3 dimensional Euclidean space.\nClass BoundaryList3D; // BoundarySource3D implementation that uses boundaries stored in a list.\nClass Bounds3D; // Class containing minimum and maximum points defining a 3D axis-aligned bounding box.\nClass Bounds3D.Builder; // Class used to construct Bounds3D instances.\nClass ConvexVolume; // Class representing a finite or infinite convex volume in Euclidean 3D space.\nClass EmbeddedTreePlaneSubset; // Class representing an arbitrary subset of a plane using a RegionBSPTree2D.\nClass EmbeddingPlane; // Extension of the Plane class that supports embedding of 2D subspaces in the plane.\nClass EmbeddingPlane.SubspaceTransform; // Class containing a transformed plane instance along with a subspace (2D) transform.\nClass Plane; // Class representing a plane in 3 dimensional Euclidean space.\nClass Planes; // Class containing factory methods for constructing Plane and PlaneSubset instances.\nClass RegionBSPTree3D; // Binary space partitioning (BSP) tree representing a region in three dimensional Euclidean space.\n", "des": "This package provides basic 3D geometry components."}
{"index": 365, "repo": "commons-geometry-euclidean-1.0", "code": "package line;\n\nInterface Linecastable3D; // Interface for objects that support linecast operations in Euclidean 3D space.\nClass EmbeddedTreeLineSubset3D; // Class representing an arbitrary subset of a line in 3D Euclidean space using a RegionBSPTree1D.\nClass Line3D; // Class representing a line in 3D space.\nClass Line3D.SubspaceTransform; // Class containing a transformed line instance along with a subspace (1D) transform.\nClass LinecastPoint3D; // Class representing intersections resulting from linecast operations in Euclidean 3D space.\nClass LineConvexSubset3D; // Class representing a convex subset of a line in 3D Euclidean space.\nClass Lines3D; // Class containing factory methods for constructing Line3D and LineSubset3D instances.\nClass LineSubset3D; // Class representing a subset of a line in 3D Euclidean space.\nClass Ray3D; // Class representing a ray in 3D Euclidean space.\nClass ReverseRay3D; // Class representing a portion of a line in 3D Euclidean space that starts at infinity and continues in the direction of the line up to a single end point.\nClass Segment3D; // Class representing a line segment in 3D Euclidean space.\n", "des": "This package provides classes and utilities for lines in 3D Euclidean space."}
{"index": 366, "repo": "commons-geometry-euclidean-1.0", "code": "package mesh;\n\nInterface Mesh<F extends Mesh.Face>; // Interface representing a 3D mesh data structure.\nInterface Mesh.Face; // Interface representing a single face in a mesh.\nInterface TriangleMesh; // Interface representing a mesh composed entirely of triangular faces.\nInterface TriangleMesh.Face; // Interface representing a single triangular face in a mesh.\nClass SimpleTriangleMesh; // A simple implementation of the TriangleMesh interface.\nClass SimpleTriangleMesh.Builder; // Builder class for creating mesh instances.\n", "des": "This package contains types representing 3D mesh data structures."}
{"index": 367, "repo": "commons-geometry-euclidean-1.0", "code": "package rotation;\n\nInterface Rotation3D; // Interface representing a generic rotation in 3-dimensional Euclidean space.\nClass AxisAngleSequence; // Class representing a sequence of axis-angle rotations.\nClass QuaternionRotation; // Class using a unit-length quaternion to represent rotations in 3-dimensional Euclidean space.\nEnum AxisReferenceFrame; // Enum defining the possible reference frames for locating axis positions during a rotation sequence.\nEnum AxisSequence; // Enum containing rotation axis sequences for use in defining 3 dimensional rotations.\nEnum AxisSequenceType; // Defines different types of rotation axis sequences.\n", "des": "This package provides components related to rotations in 3 dimensional Euclidean space."}
{"index": 368, "repo": "commons-geometry-euclidean-1.0", "code": "package shape;\n\nClass Parallelepiped; // Class representing parallelepipeds, i.e.\nClass Parallelepiped.Builder; // Class designed to aid construction of Parallelepiped instances.\nClass Sphere; // Class representing a 3 dimensional sphere in Euclidean space.\n", "des": "This package provides utilities for constructing basic 3D shapes."}
{"index": 369, "repo": "commons-geometry-euclidean-1.0", "code": "package twod;\n\npackage twod.path; // This package provides classes for working with connected sequences of line segments and other line subsets.\npackage twod.rotation; // This package provides components related to rotations in 2 dimensional Euclidean space.\npackage twod.shape; // This package provides utilities for constructing basic 2D shapes.\nInterface BoundarySource2D; // Extension of the BoundarySource interface for Euclidean 2D space.\nInterface Linecastable2D; // Interface for objects that support linecast operations in Euclidean 2D space.\nClass AffineTransformMatrix2D; // Class using a matrix to represent affine transformations in 2 dimensional Euclidean space.\nClass BoundaryList2D; // BoundarySource2D implementation that uses boundaries stored in a list.\nClass Bounds2D; // Class containing minimum and maximum points defining a 2D axis-aligned bounding box.\nClass Bounds2D.Builder; // Class used to construct Bounds2D instances.\nClass ConvexArea; // Class representing a finite or infinite convex area in Euclidean 2D space.\nClass EmbeddedTreeLineSubset; // Class representing an arbitrary subset of a line using a RegionBSPTree1D.\nClass Line; // This class represents an oriented line in the 2D plane.\nClass Line.SubspaceTransform; // Class containing a transformed line instance along with a subspace (1D) transform.\nClass LinecastPoint2D; // Class representing intersections resulting from linecast operations in Euclidean 2D space.\nClass LineConvexSubset; // Class representing a convex subset of a line in 2D Euclidean space.\nClass Lines; // Class containing factory methods for constructing Line and LineSubset instances.\nClass LineSubset; // Class representing a subset of points on a line in 2D Euclidean space.\nClass PolarCoordinates; // Class representing polar coordinates in 2 dimensional Euclidean space.\nClass Ray; // Class representing a ray in 2D Euclidean space.\nClass RegionBSPTree2D; // Binary space partitioning (BSP) tree representing a region in two dimensional Euclidean space.\nClass RegionBSPTree2D.PartitionedRegionBuilder2D; // Class used to build regions in Euclidean 2D space by inserting boundaries into a BSP tree containing \"partitions\", i.e.\n", "des": "This package provides basic 2D geometry components."}
{"index": 370, "repo": "commons-geometry-euclidean-1.0", "code": "package path;\n\nClass AbstractLinePathConnector; // Abstract class for joining collections of line subsets into connected paths.\nClass AbstractLinePathConnector.ConnectableLineSubset; // Internal class used to connect line subsets together.\nClass InteriorAngleLinePathConnector; // Line subset connector that selects between multiple connection options based on the resulting interior angle.\nClass InteriorAngleLinePathConnector.Maximize; // Implementation of InteriorAngleLinePathConnector that chooses line subset connections that produce the largest interior angles.\nClass InteriorAngleLinePathConnector.Minimize; // Implementation of InteriorAngleLinePathConnector that chooses line subset connections that produce the smallest interior angles.\nClass LinePath; // Class representing a connected path of line convex subsets.\nClass LinePath.Builder; // Class used to build line paths.\n", "des": "This package provides classes for working with connected sequences of line segments and other line subsets."}
{"index": 371, "repo": "commons-geometry-euclidean-1.0", "code": "package rotation;\n\nClass Rotation2D; // Class representing a rotation in 2 dimensional Euclidean space.\n", "des": "This package provides components related to rotations in 2 dimensional Euclidean space."}
{"index": 372, "repo": "commons-geometry-euclidean-1.0", "code": "package shape;\n\nClass Circle; // Class representing a circle in 2 dimensional Euclidean space.\nClass Parallelogram; // Class representing parallelograms, i.e.\nClass Parallelogram.Builder; // Class designed to aid construction of Parallelogram instances.\n", "des": "This package provides utilities for constructing basic 2D shapes."}
{"index": 373, "repo": "calcite-linq4j-1.34.0", "code": "package linq4j;\n\npackage linq4j.function; // Contains definitions of functions and predicates.\npackage linq4j.tree; // Object model for Java expressions.\nInterface Enumerable<T>; // Exposes the enumerator, which supports a simple iteration over a collection.\nInterface Enumerator<T>; // Supports a simple iteration over a collection.\nInterface ExtendedEnumerable<TSource>; // Extension methods in Enumerable.\nInterface ExtendedOrderedEnumerable<T>; // Extension methods for OrderedEnumerable.\nInterface ExtendedOrderedQueryable<T>; // Extension methods for OrderedQueryable.\nInterface Grouping<K,V>; // Represents a collection of objects that have a common key.\nInterface Lookup<K,V>; // Represents a collection of keys each mapped to one or more values.\nInterface OrderedEnumerable<T>; // Represents the result of applying a sorting operation to an Enumerable.\nInterface OrderedQueryable<T>; // Represents the result of applying a sorting operation to a Queryable.\nInterface Queryable<T>; // Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.\nInterface QueryableDefaults.Replayable<T>; // Replayable.\nInterface QueryableFactory<T>; // Factory for building Queryable objects.\nInterface QueryProvider; // Defines methods to create and execute queries that are described by a Queryable object.\nInterface RawEnumerable<T>; // Exposes the enumerator, which supports a simple iteration over a collection, without the extension methods.\nInterface RawQueryable<T>; // Core methods that define a Queryable.\nClass AbstractEnumerable<T>; // Abstract implementation of the Enumerable interface that implements the extension methods.\nClass AbstractEnumerable2<T>; // Abstract implementation of the Enumerable interface that implements the extension methods.\nClass AbstractQueryable<T>; // Abstract implementation of the Queryable interface that implements the extension methods.\nClass BaseQueryable<TSource>; // Skeleton implementation of Queryable.\nClass CartesianProductEnumerator<T,E>; // Enumerator over the cartesian product of enumerators.\nClass DefaultEnumerable<T>; // Implementation of the Enumerable interface that implements the extension methods by calling into the Extensions class.\n", "des": "Language-integrated query for Java (linq4j) main package."}
{"index": 374, "repo": "calcite-linq4j-1.34.0", "code": "package function;\n\nInterface BigDecimalFunction1<T0>; // Function that takes one parameter and returns a BigDecimal value.\nInterface DoubleFunction1<T0>; // Function that takes one parameter and returns a native double value.\nInterface EqualityComparer<T>; // Compares values for equality.\nInterface FloatFunction1<T0>; // Function that takes one parameter and returns a native float value.\nInterface Function<R>; // Base interface for all functions.\nInterface Function0<R>; // Function with no parameters.\nInterface Function1<T0,R>; // Function with one parameter.\nInterface Function2<T0,T1,R>; // Function with two parameters.\nInterface IntegerFunction1<T0>; // Function that takes one parameter and returns a native int value.\nInterface LongFunction1<T0>; // Function that takes one parameter and returns a native long value.\nInterface NullableBigDecimalFunction1<T0>; // Function that takes one parameter and returns a BigDecimal value that may be null.\nInterface NullableDoubleFunction1<T0>; // Function that takes one parameter and returns a Double value that may be null.\nInterface NullableFloatFunction1<T0>; // Function that takes one parameter and returns a Float value that may be null.\nInterface NullableIntegerFunction1<T0>; // Function that takes one parameter and returns an Integer value that may be null.\nInterface NullableLongFunction1<T0>; // Function that takes one parameter and returns a Long value that may be null.\nInterface Predicate1<T0>; // Function with one parameter returning a native boolean value.\nInterface Predicate2<T0,T1>; // Function with two parameters returning a native boolean value.\nClass Functions; // Utilities relating to functions.\nAnnotation Type Deterministic; // Specifies that function is deterministic (i.e.\nAnnotation Type Experimental; // Annotation that indicates that a class, interface, field or method is experimental, not part of the public API, and subject to change or removal.\nAnnotation Type Hints; // Annotation applied to a user-defined function that gives extra metadata about that function.\nAnnotation Type NonDeterministic; // Specifies that function is NOT deterministic (i.e.\nAnnotation Type Parameter; // Annotation that supplies metadata about a function parameter.\n", "des": "Contains definitions of functions and predicates."}
{"index": 375, "repo": "calcite-linq4j-1.34.0", "code": "package tree;\n\nInterface CallSiteBinder; // Creates a DynamicExpression that represents a dynamic operation bound by the provided CallSiteBinder.\nInterface Expressions.FluentList<T>; // Fluent list.\nInterface ExpressionVisitor; // Represents a visitor or rewriter for expression trees.\nInterface FunctionExpression.Invokable; // Function that can be invoked with a variable number of arguments.\nInterface Node; // Parse tree node.\nInterface Primitive.Sink; // A place to send a value.\nInterface Primitive.Source; // A place from which to read a value.\nInterface PseudoField; // Contains the parts of the Field class needed for code generation, but might be implemented differently.\nInterface TableExpressionFactory; // Factory for creating table expressions that may be used in generated code for accessing table data.\nInterface Types.RecordField; // Field that belongs to a record.\nInterface Types.RecordType; // Base class for record-like types that do not mapped to (currently loaded) Java Class objects.\nInterface Visitor<R>; // Node visitor.\nClass AbstractNode; // Abstract implementation of Node.\nClass ArrayLengthRecordField; // Length field of a RecordType.\nClass BinaryExpression; // Represents an expression that has a binary operator.\nClass BlockBuilder; // Builder for BlockStatement.\nClass Blocks; // Helper methods concerning BlockStatements.\nClass BlockStatement; // Represents a block that contains a sequence of expressions where variables can be defined.\nClass CatchBlock; // Represents a catch statement in a try block.\nClass ClassDeclaration; // Declaration of a class.\nClass ClassDeclarationFinder; // Entry point for optimizers that factor out deterministic expressions to final static fields.\nClass ConditionalExpression; // Represents an expression that has a conditional operator.\nClass ConditionalStatement; // Represents an expression that has a conditional operator.\nClass ConstantExpression; // Represents an expression that has a constant value.\nClass ConstantUntypedNull; // Represents a constant null of unknown type Java allows type inference for such nulls, thus \"null\" cannot always be replaced to (Object)null and vise versa.\nClass ConstructorDeclaration; // Declaration of a constructor.\nClass DeclarationStatement; // Expression that declares and optionally initializes a variable.\n", "des": "Object model for Java expressions."}
{"index": 376, "repo": "zookeeper-jute-3.8.2", "code": "package jute;\n\npackage jute.compiler; // This package contains classes needed for code generation from the hadoop record compiler.\nInterface Index; // Interface that acts as an iterator for deserializing maps.\nInterface InputArchive; // Interface that all the Deserializers have to implement.\nInterface OutputArchive; // Interface that all the serializers have to implement.\nInterface Record; // Interface that is implemented by generated classes.\nClass BinaryInputArchive;\nClass BinaryOutputArchive;\nClass RecordReader; // Front-end interface to deserializers.\nClass RecordWriter; // Front-end for serializers.\nClass ToStringOutputArchive;\nClass Utils; // Various utility functions for Hadoop record I/O runtime.\n", "des": "Hadoop record I/O contains classes and a record description language translator for simplifying serialization and deserialization of records in a language-neutral manner."}
{"index": 377, "repo": "zookeeper-jute-3.8.2", "code": "package compiler;\n\npackage compiler.generated; // This package contains code generated by JavaCC from the Hadoop record syntax file rcc.jj.\nClass CSharpGenerator;\nClass JBoolean;\nClass JBuffer;\nClass JByte;\nClass JDouble;\nClass JField;\nClass JFile; // Container for the Hadoop Record DDL.\nClass JFloat;\nClass JInt;\nClass JLong;\nClass JMap;\nClass JRecord;\nClass JString;\nClass JType; // Abstract Base class for all types supported by Hadoop Record I/O.\nClass JVector;\n", "des": "This package contains classes needed for code generation from the hadoop record compiler."}
{"index": 378, "repo": "zookeeper-jute-3.8.2", "code": "package generated;\n\nInterface RccConstants; // Token literal values and constants.\nClass Rcc;\nClass RccTokenManager; // Token Manager.\nClass SimpleCharStream; // An implementation of interface CharStream, where the stream is assumed to contain only ASCII characters (without unicode processing).\nClass Token; // Describes the input token stream.\nClass ParseException; // This exception is thrown when parse errors are encountered.\nClass TokenMgrError; // Token Manager Error.\n", "des": "This package contains code generated by JavaCC from the Hadoop record syntax file rcc.jj."}
{"index": 379, "repo": "mahout-core-14.1", "code": "package math;\n\npackage math.function; // Core interfaces for functions, comparisons and procedures on objects and primitive data types.\npackage math.list; // Resizable lists holding objects or primitive data types such as int, double, etc.\npackage math.map; // Automatically growing and shrinking maps holding objects or primitive data types such as int, double, etc.\nInterface Matrix; // The basic interface including numerous convenience functions\nInterface MatrixTimesOps; // Optional interface for optimized matrix multiplications.\nInterface QR;\nInterface Swapper; // Interface for an object that knows how to swap elements at two positions (a,b).\nInterface Vector; // The basic interface including numerous convenience functions\nInterface Vector.Element; // A holder for information about a specific item in the Vector.\nInterface VectorIterable;\nClass AbstractMatrix; // A few universal implementations of convenience functions for a JVM-backed matrix.\nClass AbstractMatrix.TransposeViewVector;\nClass AbstractVector; // Implementations of generic capabilities like sum of elements and dot products\nClass Algebra;\nClass Arrays; // Array manipulations; complements java.util.Arrays.\nClass BinarySearch;\nClass Centroid; // A centroid is a weighted vector.\nClass CholeskyDecomposition; // Cholesky decomposition shamelessly ported from JAMA.\nClass ConstantVector; // Implements a vector with all the same values.\nClass DelegatingVector; // A delegating vector provides an easy way to decorate vectors with weights or id's and such while keeping all of the Vector functionality.\nClass DenseMatrix; // Matrix of doubles implemented using a 2-d array\nClass DenseSymmetricMatrix; // Economy packaging for a dense symmetric in-core matrix.\nClass DenseVector; // Implements vector as an array of doubles\nClass DiagonalMatrix;\nClass FileBasedMatrix; // Provides a way to get data from a file and treat it as if it were a matrix, but avoids putting all that data onto the Java heap.\nClass FileBasedSparseBinaryMatrix; // Provides a way to get data from a file and treat it as if it were a matrix, but avoids putting all that data onto the Java heap.\nClass FileBasedSparseBinaryMatrix.BinaryReadOnlyElement;\nClass Matrices;\nClass MatrixSlice;\n", "des": "Core base classes; Operations on primitive arrays such as sorting, partitioning and permuting."}
{"index": 380, "repo": "mahout-core-14.1", "code": "package function;\n\nInterface ByteByteProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteCharProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteComparator; // A comparison function which imposes a total ordering on some collection of elements.\nInterface ByteDoubleProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteFloatProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteIntProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteLongProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteObjectProcedure<T>; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteProcedure; // Interface that represents a procedure object: a procedure that takes a single argument and does not return a value.\nInterface ByteShortProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharByteProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharCharProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharComparator; // A comparison function which imposes a total ordering on some collection of elements.\nInterface CharDoubleProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharFloatProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharIntProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharLongProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharObjectProcedure<T>; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\n", "des": "Core interfaces for functions, comparisons and procedures on objects and primitive data types."}
{"index": 381, "repo": "mahout-core-14.1", "code": "package math;\n\nClass Arithmetic; // Arithmetic functions.\nClass Constants; // Defines some useful constants.\nClass Polynomial; // Polynomial functions.\n", "des": "Tools for basic and advanced mathematics: Arithmetics and Algebra, Polynomials and Chebyshev series, Bessel and Airy functions, Function Objects for generic function evaluation, etc."}
{"index": 382, "repo": "mahout-core-14.1", "code": "package engine;\n\nClass MersenneTwister; // MersenneTwister (MT19937) is one of the strongest uniform pseudo-random number generators known so far; at the same time it is quick.\nClass RandomEngine; // Abstract base class for uniform pseudo-random number generating engines.\n", "des": "Engines generating strong uniformly distributed pseudo-random numbers; Needed by all JET probability distributions since they rely on uniform random numbers to generate random numbers from their own distribution."}
{"index": 383, "repo": "mahout-core-14.1", "code": "package stat;\n\nClass Gamma; // Partially deprecated until unit tests are in place.\nClass Probability; // Partially deprecated until unit tests are in place.\n", "des": "Tools for basic and advanced statistics: Estimators, Gamma functions, Beta functions, Probabilities, Special integrals, etc."}
{"index": 384, "repo": "mahout-core-14.1", "code": "package list;\n\nClass AbstractByteList; // Abstract base class for resizable lists holding byte elements; abstract.\nClass AbstractCharList; // Abstract base class for resizable lists holding char elements; abstract.\nClass AbstractDoubleList; // Abstract base class for resizable lists holding double elements; abstract.\nClass AbstractFloatList; // Abstract base class for resizable lists holding float elements; abstract.\nClass AbstractIntList; // Abstract base class for resizable lists holding int elements; abstract.\nClass AbstractList; // Abstract base class for resizable lists holding objects or primitive data types such as int, float, etc.\nClass AbstractLongList; // Abstract base class for resizable lists holding long elements; abstract.\nClass AbstractObjectList<T>; // Abstract base class for resizable lists holding objects or primitive data types such as int, float, etc.First see the package summary and javadoc tree view to get the broad picture.\nClass AbstractShortList; // Abstract base class for resizable lists holding short elements; abstract.\nClass ByteArrayList; // Resizable list holding byte elements; implemented with arrays.\nClass CharArrayList; // Resizable list holding char elements; implemented with arrays.\nClass DoubleArrayList; // Resizable list holding double elements; implemented with arrays.\nClass FloatArrayList; // Resizable list holding float elements; implemented with arrays.\nClass IntArrayList; // Resizable list holding int elements; implemented with arrays.\nClass LongArrayList; // Resizable list holding long elements; implemented with arrays.\nClass ObjectArrayList<T>; // Resizable list holding ${valueType} elements; implemented with arrays.\nClass ShortArrayList; // Resizable list holding short elements; implemented with arrays.\nClass SimpleLongArrayList; // Resizable list holding long elements; implemented with arrays; not efficient; just to demonstrate which methods you must override to implement a fully functional list.\n", "des": "Resizable lists holding objects or primitive data types such as int, double, etc."}
{"index": 385, "repo": "mahout-core-14.1", "code": "package map;\n\nClass AbstractByteByteMap;\nClass AbstractByteCharMap;\nClass AbstractByteDoubleMap;\nClass AbstractByteFloatMap;\nClass AbstractByteIntMap;\nClass AbstractByteLongMap;\nClass AbstractByteObjectMap<T>;\nClass AbstractByteShortMap;\nClass AbstractCharByteMap;\nClass AbstractCharCharMap;\nClass AbstractCharDoubleMap;\nClass AbstractCharFloatMap;\nClass AbstractCharIntMap;\nClass AbstractCharLongMap;\nClass AbstractCharObjectMap<T>;\nClass AbstractCharShortMap;\nClass AbstractDoubleByteMap;\nClass AbstractDoubleCharMap;\nClass AbstractDoubleDoubleMap;\nClass AbstractDoubleFloatMap;\nClass AbstractDoubleIntMap;\nClass AbstractDoubleLongMap;\nClass AbstractDoubleObjectMap<T>;\nClass AbstractDoubleShortMap;\nClass AbstractFloatByteMap;\nClass AbstractFloatCharMap;\nClass AbstractFloatDoubleMap;\nClass AbstractFloatFloatMap;\nClass AbstractFloatIntMap;\nClass AbstractFloatLongMap;\nClass AbstractFloatObjectMap<T>;\nClass AbstractFloatShortMap;\nClass AbstractIntByteMap;\nClass AbstractIntCharMap;\nClass AbstractIntDoubleMap;\nClass AbstractIntFloatMap;\nClass AbstractIntIntMap;\nClass AbstractIntLongMap;\nClass AbstractIntObjectMap<T>;\nClass AbstractIntShortMap;\nClass AbstractLongByteMap;\nClass AbstractLongCharMap;\nClass AbstractLongDoubleMap;\nClass AbstractLongFloatMap;\nClass AbstractLongIntMap;\nClass AbstractLongLongMap;\nClass AbstractLongObjectMap<T>;\nClass AbstractLongShortMap;\nClass AbstractObjectByteMap<T>;\nClass AbstractObjectCharMap<T>;\nClass AbstractObjectDoubleMap<T>;\nClass AbstractObjectFloatMap<T>;\nClass AbstractObjectIntMap<T>;\nClass AbstractObjectLongMap<T>;\nClass AbstractObjectShortMap<T>;\nClass AbstractShortByteMap;\nClass AbstractShortCharMap;\nClass AbstractShortDoubleMap;\nClass AbstractShortFloatMap;\nClass AbstractShortIntMap;\nClass AbstractShortLongMap;\nClass AbstractShortObjectMap<T>;\nClass AbstractShortShortMap;\nClass HashFunctions; // Provides various hash functions.\n", "des": "Automatically growing and shrinking maps holding objects or primitive data types such as int, double, etc."}
{"index": 386, "repo": "commons-dbcp2-2.9.0", "code": "package dbcp2;\n\npackage dbcp2.cpdsadapter; // This package contains one public class which is a ConnectionPoolDataSource (CPDS) implementation that can be used to adapt older Driver based JDBC implementations.\npackage dbcp2.datasources; // This package contains two DataSources: PerUserPoolDataSource and SharedPoolDataSource which provide a database connection pool.\npackage dbcp2.managed; // This package provides support for pooling of ManagedConnections.\nInterface BasicDataSourceMXBean; // Interface to keep API compatibility.\nInterface ConnectionFactory; // Abstract factory interface for creating Connections.\nInterface DataSourceMXBean; // Defines the methods that will be made available via JMX.\nInterface PoolableConnectionMXBean; // Defines the attributes and methods that will be exposed via JMX for PoolableConnection instances.\nClass AbandonedTrace; // Tracks connection usage for recovering and reporting abandoned connections.\nClass BasicDataSource; // Basic implementation of javax.sql.DataSource that is configured via JavaBeans properties.\nClass BasicDataSourceFactory; // JNDI object factory that creates an instance of BasicDataSource that has been configured based on the RefAddr values of the specified Reference, which must match the names and data types of the BasicDataSource bean properties with the following exceptions:\nClass Constants; // Constants.\nClass DataSourceConnectionFactory; // A DataSource-based implementation of ConnectionFactory.\nClass DelegatingCallableStatement; // A base delegating implementation of CallableStatement.\nClass DelegatingConnection<C extends Connection>; // A base delegating implementation of Connection.\nClass DelegatingDatabaseMetaData; // A base delegating implementation of DatabaseMetaData.\nClass DelegatingPreparedStatement; // A base delegating implementation of PreparedStatement.\nClass DelegatingResultSet; // A base delegating implementation of ResultSet.\nClass DelegatingStatement; // A base delegating implementation of Statement.\nClass DriverConnectionFactory; // A Driver-based implementation of ConnectionFactory.\nClass DriverManagerConnectionFactory; // A DriverManager-based implementation of ConnectionFactory.\nClass Jdbc41Bridge; // Defines bridge methods to JDBC 4.1 (Java 7) methods to allow call sites to operate safely (without AbstractMethodError) when using a JDBC driver written for JDBC 4.0 (Java 6).\nClass PoolableCallableStatement; // A DelegatingCallableStatement that cooperates with PoolingConnection to implement a pool of CallableStatements.\n", "des": "Database Connection Pool API."}
{"index": 387, "repo": "commons-dbcp2-2.9.0", "code": "package cpdsadapter;\n\nClass DriverAdapterCPDS; // An adapter for JDBC drivers that do not include an implementation of ConnectionPoolDataSource, but still include a DriverManager implementation.\nClass PStmtKeyCPDS; // Use PStmtKey.\n", "des": "This package contains one public class which is a ConnectionPoolDataSource (CPDS) implementation that can be used to adapt older Driver based JDBC implementations."}
{"index": 388, "repo": "commons-dbcp2-2.9.0", "code": "package datasources;\n\nClass InstanceKeyDataSource; // The base class for SharedPoolDataSource and PerUserPoolDataSource.\nClass PerUserPoolDataSource; // A pooling DataSource appropriate for deployment within J2EE environment.\nClass PerUserPoolDataSourceFactory; // A JNDI ObjectFactory which creates SharedPoolDataSources\nClass SharedPoolDataSource; // A pooling DataSource appropriate for deployment within J2EE environment.\nClass SharedPoolDataSourceFactory; // A JNDI ObjectFactory which creates SharedPoolDataSources\n", "des": "This package contains two DataSources: PerUserPoolDataSource and SharedPoolDataSource which provide a database connection pool."}
{"index": 389, "repo": "commons-dbcp2-2.9.0", "code": "package managed;\n\nInterface TransactionContextListener; // A listener for transaction completion events.\nInterface XAConnectionFactory; // XAConnectionFactory is an extension of ConnectionFactory used to create connections in a transaction managed environment.\nClass BasicManagedDataSource; // BasicManagedDataSource is an extension of BasicDataSource which creates ManagedConnections.\nClass DataSourceXAConnectionFactory; // An implementation of XAConnectionFactory which uses a real XADataSource to obtain connections and XAResources.\nClass LocalXAConnectionFactory; // An implementation of XAConnectionFactory which manages non-XA connections in XA transactions.\nClass LocalXAConnectionFactory.LocalXAResource; // LocalXAResource is a fake XAResource for non-XA connections.\nClass ManagedConnection<C extends Connection>; // ManagedConnection is responsible for managing a database connection in a transactional environment (typically called \"Container Managed\").\nClass ManagedDataSource<C extends Connection>; // The ManagedDataSource is a PoolingDataSource that creates ManagedConnections.\nClass PoolableManagedConnection; // PoolableConnection that unregisters from TransactionRegistry on Connection real destroy.\nClass PoolableManagedConnectionFactory; // A PoolableConnectionFactory that creates PoolableManagedConnections.\nClass TransactionContext; // TransactionContext represents the association between a single XAConnectionFactory and a Transaction.\nClass TransactionRegistry; // TransactionRegistry tracks Connections and XAResources in a transacted environment for a single XAConnectionFactory.\n", "des": "This package provides support for pooling of ManagedConnections."}
{"index": 390, "repo": "hbase-mapreduce-3.0.0-alpha-4", "code": "package mapred;\n\nInterface TableMap<K extends org.apache.hadoop.io.WritableComparable<? super K>,V>; // Scan an HBase table to sort by a specified sort column.\nInterface TableReduce<K extends org.apache.hadoop.io.WritableComparable,V>; // Write a table, sorting by the input key\nClass Driver; // Driver for hbase mapreduce jobs.\nClass GroupingTableMap; // Extract grouping columns from input record\nClass HRegionPartitioner<K2,V2>; // This is used to partition the output keys into groups of keys.\nClass IdentityTableMap; // Pass the given key and record as-is to reduce\nClass IdentityTableReduce; // Write to table each key, record pair\nClass MultiTableSnapshotInputFormat; // MultiTableSnapshotInputFormat generalizes TableSnapshotInputFormat allowing a MapReduce job to run over one or more table snapshots, with one or more scans configured for each.\nClass RowCounter; // A job with a map to count rows.\nClass TableInputFormat; // Convert HBase tabular data into a format that is consumable by Map/Reduce.\nClass TableInputFormatBase; // A Base for TableInputFormats.\nClass TableMapReduceUtil; // Utility for TableMap and TableReduce\nClass TableOutputFormat; // Convert Map/Reduce output and write it to an HBase table\nClass TableOutputFormat.TableRecordWriter; // Convert Reduce output (key, value) to (HStoreKey, KeyedDataArrayWritable) and write to an HBase table.\nClass TableRecordReader; // Iterate over an HBase table data, return (Text, RowResult) pairs\nClass TableRecordReaderImpl; // Iterate over an HBase table data, return (Text, RowResult) pairs\nClass TableSnapshotInputFormat; // TableSnapshotInputFormat allows a MapReduce job to run over a table snapshot.\nClass TableSnapshotInputFormat.TableSnapshotRegionSplit;\nClass TableSplit; // A table split corresponds to a key range [low, high)\n", "des": "Provides HBase MapReduce Input/OutputFormats, a table indexing MapReduce job, and utility methods."}
{"index": 391, "repo": "hbase-mapreduce-3.0.0-alpha-4", "code": "package mapreduce;\n\nInterface VisibilityExpressionResolver; // Interface to convert visibility expressions into Tags for storing along with Cells in HFiles.\nClass CellCounter; // A job with a a map and reduce phase to count cells in a table.\nClass CellCreator; // Facade to create Cells for HFileOutputFormat.\nClass CellSerialization;\nClass CellSerialization.CellDeserializer;\nClass CellSerialization.CellSerializer;\nClass CellSortReducer; // Emits sorted Cells.\nClass CopyTable; // Tool used to copy a table to another one which can be on a different setup.\nClass DefaultVisibilityExpressionResolver; // This implementation creates tags by expanding expression using label ordinal.\nClass Driver; // Driver for hbase mapreduce jobs.\nClass Export; // Export an HBase table.\nClass ExportUtils; // Some helper methods are used by Export and org.apache.hadoop.hbase.coprocessor.Export (in hbase-endpooint).\nClass ExtendedCellSerialization; // Similar to CellSerialization, but includes the sequenceId from an ExtendedCell.\nClass ExtendedCellSerialization.ExtendedCellDeserializer;\nClass ExtendedCellSerialization.ExtendedCellSerializer;\nClass GroupingTableMapper; // Extract grouping columns from input record.\nClass HashTable;\nClass HashTable.HashMapper;\nClass HashTable.TableHash;\nClass HFileInputFormat; // Simple MR input format for HFiles.\nClass HFileOutputFormat2; // Writes HFiles.\nClass HRegionPartitioner<KEY,VALUE>; // This is used to partition the output keys into groups of keys.\nClass IdentityTableMapper; // Pass the given key and record as-is to the reduce phase.\nClass IdentityTableReducer; // Convenience class that simply writes all values (which must be Put or Delete instances) passed to it out to the configured HBase table.\nClass Import; // Import data written by Export.\nClass Import.CellImporter; // A mapper that just writes out KeyValues.\nClass Import.CellReducer;\nClass Import.CellSortImporter;\nClass Import.CellWritableComparable;\nClass Import.CellWritableComparable.CellWritableComparator;\nClass Import.CellWritableComparablePartitioner;\nClass Import.Importer; // Write table content out to files in hdfs.\nClass ImportTsv; // Tool to import data from a TSV file.\n", "des": "Provides HBase MapReduce Input/OutputFormats, a table indexing MapReduce job, and utility methods."}
{"index": 392, "repo": "amqp-client-5.18.0", "code": "package client;\n\npackage client.impl; // Implementations of interfaces specified in the client API, and their supporting classes.\nInterface AddressResolver; // Strategy interface to get the potential servers to connect to.\nInterface AMQP;\nInterface AMQP.Access.Request;\nInterface AMQP.Access.RequestOk;\nInterface AMQP.Basic.Ack;\nInterface AMQP.Basic.Cancel;\nInterface AMQP.Basic.CancelOk;\nInterface AMQP.Basic.Consume;\nInterface AMQP.Basic.ConsumeOk;\nInterface AMQP.Basic.Deliver;\nInterface AMQP.Basic.Get;\nInterface AMQP.Basic.GetEmpty;\nInterface AMQP.Basic.GetOk;\nInterface AMQP.Basic.Nack;\nInterface AMQP.Basic.Publish;\nInterface AMQP.Basic.Qos;\nInterface AMQP.Basic.QosOk;\nInterface AMQP.Basic.Recover;\nInterface AMQP.Basic.RecoverAsync;\nInterface AMQP.Basic.RecoverOk;\nInterface AMQP.Basic.Reject;\nInterface AMQP.Basic.Return;\nInterface AMQP.Channel.Close;\nInterface AMQP.Channel.CloseOk;\nInterface AMQP.Channel.Flow;\nInterface AMQP.Channel.FlowOk;\nInterface AMQP.Channel.Open;\nInterface AMQP.Channel.OpenOk;\nInterface AMQP.Confirm.Select;\nInterface AMQP.Confirm.SelectOk;\nInterface AMQP.Connection.Blocked;\nInterface AMQP.Connection.Close;\nInterface AMQP.Connection.CloseOk;\nInterface AMQP.Connection.Open;\nInterface AMQP.Connection.OpenOk;\nInterface AMQP.Connection.Secure;\nInterface AMQP.Connection.SecureOk;\nInterface AMQP.Connection.Start;\nInterface AMQP.Connection.StartOk;\nInterface AMQP.Connection.Tune;\nInterface AMQP.Connection.TuneOk;\nInterface AMQP.Connection.Unblocked;\nInterface AMQP.Connection.UpdateSecret;\nInterface AMQP.Connection.UpdateSecretOk;\nInterface AMQP.Exchange.Bind;\nInterface AMQP.Exchange.BindOk;\nInterface AMQP.Exchange.Declare;\nInterface AMQP.Exchange.DeclareOk;\nInterface AMQP.Exchange.Delete;\nInterface AMQP.Exchange.DeleteOk;\nInterface AMQP.Exchange.Unbind;\nInterface AMQP.Exchange.UnbindOk;\nInterface AMQP.Queue.Bind;\nInterface AMQP.Queue.BindOk;\nInterface AMQP.Queue.Declare;\n", "des": "The client API proper: classes and interfaces representing the AMQP connections, channels, and wire-protocol framing descriptors."}
{"index": 393, "repo": "amqp-client-5.18.0", "code": "package impl;\n\npackage impl.nio; // NIO network connector.\npackage impl.recovery; // Implementation of connection and topology recovery.\nInterface AMQChannel.RpcContinuation;\nInterface AMQImpl.MethodVisitor;\nInterface CredentialsProvider; // Provider interface for establishing credentials for connecting to the broker.\nInterface CredentialsRefreshService; // Provider interface to refresh credentials when appropriate and perform an operation once the credentials have been renewed.\nInterface ErrorOnWriteListener; // Listener called when a connection gets an IO error trying to write on the socket.\nInterface FrameHandler; // Interface to a frame handler.\nInterface FrameHandlerFactory;\nInterface NetworkConnection;\nInterface RpcWrapper;\nClass AbstractFrameHandlerFactory;\nClass AbstractMetricsCollector; // Base class for MetricsCollector.\nClass AMQBasicProperties;\nClass AMQChannel; // Base class modelling an AMQ channel.\nClass AMQChannel.BlockingRpcContinuation<T>;\nClass AMQChannel.SimpleBlockingRpcContinuation;\nClass AMQCommand; // AMQP 0-9-1-specific implementation of Command which accumulates method, header and body from a series of frames, unless these are supplied at construction time.\nClass AMQConnection; // Concrete class representing and managing an AMQP connection to a broker.\nClass AMQContentHeader; // Implementation of ContentHeader - specialized by autogenerated code in AMQP.java.\nClass AMQImpl;\nClass AMQImpl.Access;\nClass AMQImpl.Access.Request;\nClass AMQImpl.Access.RequestOk;\nClass AMQImpl.Basic;\nClass AMQImpl.Basic.Ack;\nClass AMQImpl.Basic.Cancel;\nClass AMQImpl.Basic.CancelOk;\nClass AMQImpl.Basic.Consume;\nClass AMQImpl.Basic.ConsumeOk;\nClass AMQImpl.Basic.Deliver;\nClass AMQImpl.Basic.Get;\nClass AMQImpl.Basic.GetEmpty;\nClass AMQImpl.Basic.GetOk;\nClass AMQImpl.Basic.Nack;\nClass AMQImpl.Basic.Publish;\nClass AMQImpl.Basic.Qos;\nClass AMQImpl.Basic.QosOk;\nClass AMQImpl.Basic.Recover;\nClass AMQImpl.Basic.RecoverAsync;\nClass AMQImpl.Basic.RecoverOk;\nClass AMQImpl.Basic.Reject;\nClass AMQImpl.Basic.Return;\nClass AMQImpl.Channel;\n", "des": "Implementations of interfaces specified in the client API, and their supporting classes."}
{"index": 394, "repo": "amqp-client-5.18.0", "code": "package nio;\n\nInterface ByteBufferFactory; // Contract to create ByteBuffers.\nInterface NioQueue; // Contract to exchange frame between application threads and NIO thread.\nInterface WriteRequest;\nClass BlockingQueueNioQueue; // Bridge between NioQueue and JDK's BlockingQueue.\nClass ByteBufferOutputStream; // Bridge between the byte buffer and stream worlds.\nClass DefaultByteBufferFactory; // Default ByteBufferFactory that creates heap-based ByteBuffers.\nClass FrameBuilder; // Class to create AMQP frames from a ReadableByteChannel.\nClass FrameWriteRequest;\nClass HeaderWriteRequest;\nClass NioContext; // Context when creating resources for a NIO-based connection.\nClass NioHelper;\nClass NioLoop; // Logic of the NIO loop.\nClass NioLoopContext;\nClass NioParams; // Parameters used to configure the NIO mode of a ConnectionFactory.\nClass SelectorHolder;\nClass SocketChannelFrameHandler;\nClass SocketChannelFrameHandlerFactory;\nClass SocketChannelFrameHandlerState;\nClass SocketChannelRegistration;\nClass SslEngineByteBufferOutputStream; // Bridge between the byte buffer and stream worlds.\nClass SslEngineFrameBuilder; // Sub-class of FrameBuilder that unwraps crypted data from the network.\nClass SslEngineHelper;\n", "des": "NIO network connector."}
{"index": 395, "repo": "amqp-client-5.18.0", "code": "package recovery;\n\nInterface BackoffPolicy; // Backoff policy for topology recovery retry attempts.\nInterface ConsumerRecoveryListener; // Not part of the public API.\nInterface DefaultRetryHandler.RetryOperation<T>;\nInterface QueueRecoveryListener; // Not part of the public API.\nInterface RecoveredQueueNameSupplier; // Functional callback interface that can be used to rename a queue during topology recovery.\nInterface RecoveryCanBeginListener; // Used internally to indicate when connection recovery can begin.\nInterface RetryHandler; // Contract to retry failed operations during topology recovery.\nInterface TopologyRecoveryFilter; // Filter to know whether entities should be recovered or not.\nClass AutorecoveringChannel; // Channel implementation that is automatically recovered during connection recovery.\nClass AutorecoveringConnection; // Connection implementation that performs automatic recovery when connection shutdown is not initiated by the application (e.g.\nClass DefaultRetryHandler; // Composable topology recovery retry handler.\nClass RecordedBinding;\nClass RecordedConsumer;\nClass RecordedEntity;\nClass RecordedExchange;\nClass RecordedExchangeBinding;\nClass RecordedNamedEntity;\nClass RecordedQueue;\nClass RecordedQueueBinding;\nClass RecoveryAwareAMQConnection; // AMQConnection modification that uses RecoveryAwareChannelN\nClass RecoveryAwareAMQConnectionFactory;\nClass RecoveryAwareChannelManager;\nClass RecoveryAwareChannelN; // ChannelN modification that keeps track of delivery tags and avoids sending\nClass RetryContext; // The context of a topology recovery retry operation.\nClass RetryResult; // The retry of a retried topology recovery operation.\nClass TopologyRecoveryRetryHandlerBuilder; // Builder to ease creation of DefaultRetryHandler instances.\nClass TopologyRecoveryRetryLogic; // Useful ready-to-use conditions and operations for DefaultRetryHandler.\n", "des": "Implementation of connection and topology recovery."}
{"index": 396, "repo": "amqp-client-5.18.0", "code": "package json;\n\nInterface JSONSerializable; // Use a third-party JSON library, e.g.\nClass JSONReader; // Use a third-party JSON library, e.g.\nClass JSONUtil; // Utility methods for working with JSON objects in Java.\nClass JSONWriter; // Use a third-party JSON library, e.g.\n", "des": "JSON reader/writer and utility classes."}
{"index": 397, "repo": "amqp-client-5.18.0", "code": "package jsonrpc;\n\nInterface JsonRpcMapper; // Abstraction to handle JSON parsing and generation.\nClass DefaultJsonRpcMapper; // use JacksonJsonRpcMapper instead\nClass JacksonJsonRpcMapper; // JsonRpcMapper based on Jackson.\nClass JsonRpcClient; // JSON-RPC is a lightweight RPC mechanism using JSON as a data language for request and reply messages.\nClass JsonRpcMapper.JsonRpcRequest;\nClass JsonRpcMapper.JsonRpcResponse;\nClass JsonRpcServer; // JSON-RPC Server class.\nClass ParameterDescription; // Description of a single JSON-RPC procedure parameter.\nClass ProcedureDescription; // Description of a single JSON-RPC procedure.\nClass ServiceDescription; // Description of a JSON-RPC service.\nClass JsonRpcException; // Thrown when a JSON-RPC service indicates an error occurred during a call.\nClass JsonRpcMappingException;\n", "des": "JSON-RPC client and server classes for supporting JSON-RPC over an AMQP transport."}
{"index": 398, "repo": "amqp-client-5.18.0", "code": "package utility;\n\nInterface SensibleClone<T extends SensibleClone<T>>; // This interface exists as a workaround for the annoyingness of java.lang.Cloneable.\nClass BlockingCell<T>; // Simple one-shot IPC mechanism.\nClass BlockingValueOrException<V,E extends Throwable & SensibleClone<E>>;\nClass IntAllocator; // A class for allocating integers from a given range that uses a BitSet representation of the free integers.\nClass Utility; // Catch-all holder class for static helper methods.\nClass ValueOrException<V,E extends Throwable & SensibleClone<E>>;\n", "des": "Utility package of helper classes, mostly used in the implementation code."}
{"index": 399, "repo": "solr-dataimporthandler-8.11.2", "code": "package dataimport;\n\npackage dataimport.config; // Utility classes for parsing & modeling DIH configuration.\nInterface DIHCache; // A cache that allows a DIH entity's data to persist locally prior being joined to other data and/or indexed.\nInterface DIHWriter;\nInterface EventListener; // Event listener for DataImportHandler This API is experimental and subject to change\nInterface XPathRecordReader.Handler; // Implement this interface to stream records as and when one is found.\nClass BinContentStreamDataSource; // A data source implementation which can be used to read binary stream from content streams.\nClass BinFileDataSource; // A DataSource which reads from local files\nClass BinURLDataSource; // A data source implementation which can be used to read binary streams using HTTP.\nClass CachePropertyUtil;\nClass ClobTransformer; // Transformer instance which converts a Clob to a String.\nClass ConfigParseUtil;\nClass ContentStreamDataSource; // A DataSource implementation which reads from the ContentStream of a POST request\nClass Context; // This abstract class gives access to all available objects.\nClass ContextImpl; // An implementation for the Context\nClass DataImporter; // Stores all configuration information for pulling and indexing data.\nClass DataImportHandler; // since 8.6; see Deprecations\nClass DataSource<T>; // Provides data from a source with a given query.\nClass DateFormatEvaluator; // Formats values using a given date format.\nClass DateFormatTransformer; // Transformer instance which creates Date instances out of Strings.\nClass DebugInfo;\nClass DIHCacheSupport;\nClass DIHProperties; // Implementations write out properties about the last data import for use by the next import.\nClass DIHWriterBase;\nClass DocBuilder; // DocBuilder is responsible for creating Solr documents out of the given configuration.\nClass DocBuilder.Statistics;\nClass EntityProcessor; // An instance of entity processor serves an entity.\nClass EntityProcessorBase; // Base class for all implementations of EntityProcessor\nClass EntityProcessorWrapper; // A Wrapper over EntityProcessor instance which performs transforms and handles multi-row outputs correctly.\nClass Evaluator; // Pluggable functions for resolving variables\nClass Evaluator.VariableWrapper;\nClass FieldReaderDataSource; // This can be useful for users who have a DB field containing xml and wish to use a nested XPathEntityProcessor\n", "des": "DataImportHandler and related code."}
{"index": 400, "repo": "solr-dataimporthandler-8.11.2", "code": "package config;\n\nClass ConfigNameConstants;\nClass ConfigParseUtil;\nClass DIHConfiguration; // Mapping for data-config.xml\nClass Entity;\nClass EntityField;\nClass EntityField.Builder;\nClass Field;\nClass Field.Builder;\nClass PropertyWriter;\nClass Script;\n", "des": "Utility classes for parsing & modeling DIH configuration."}
{"index": 401, "repo": "commons-jexl3-3.3", "code": "package jexl3;\n\npackage jexl3.annotations; // Provides annotation for introspection services.\npackage jexl3.introspection; // Provides high-level introspective services.\npackage jexl3.scripting; // Contains the JSR-223 Scripting Engine for JEXL script.\nInterface JexlArithmetic.ArrayBuilder; // Helper interface used when creating an array literal.\nInterface JexlArithmetic.MapBuilder; // Helper interface used when creating a map literal.\nInterface JexlArithmetic.SetBuilder; // Helper interface used when creating a set literal.\nInterface JexlArithmetic.Uberspect; // The interface that uberspects JexlArithmetic classes.\nInterface JexlContext; // Manages variables which can be referenced in a JEXL expression.\nInterface JexlContext.AnnotationProcessor; // A marker interface of the JexlContext that processes annotations.\nInterface JexlContext.CancellationHandle; // A marker interface of the JexlContext sharing a cancelling flag.\nInterface JexlContext.ClassNameResolver; // A marker interface that solves a simple class name into a fully-qualified one.\nInterface JexlContext.ModuleProcessor; // A marker interface of the JexlContext that processes module definitions.\nInterface JexlContext.NamespaceFunctor; // A marker interface of the JexlContext, NamespaceFunctor allows creating an instance to delegate namespace methods calls to.\nInterface JexlContext.NamespaceResolver; // A marker interface of the JexlContext that declares how to resolve a namespace from its name; it is used by the interpreter during evaluation.\nInterface JexlContext.OptionsHandle; // A marker interface of the JexlContext that exposes runtime evaluation options.\nInterface JexlContext.PragmaProcessor; // A marker interface of the JexlContext that processes pragmas.\nInterface JexlContext.ThreadLocal; // A marker interface of the JexlContext that indicates the interpreter to put this context in the JexlEngine thread local context instance during evaluation.\nInterface JexlEngine.Options; // 3.2\nInterface JexlExpression; // Represents a single JEXL expression.\n", "des": "Provides a framework for evaluating JEXL expressions."}
{"index": 402, "repo": "commons-jexl3-3.3", "code": "package annotations;\n\nAnnotation Type NoJexl; // Indicates JEXL Introspection should not see this element.\n", "des": "Provides annotation for introspection services."}
{"index": 403, "repo": "commons-jexl3-3.3", "code": "package introspection;\n\nInterface JexlMethod; // Interface used for regular method invocation.\nInterface JexlPermissions; // This interface describes permissions used by JEXL introspection that constrain which packages/classes/constructors/fields/methods are made visible to JEXL scripts.\nInterface JexlPropertyGet; // Interface for getting values that appear to be properties.\nInterface JexlPropertySet; // Interface used for setting values that appear to be properties.\nInterface JexlUberspect; // 'Federated' introspection/reflection interface to allow JEXL introspection behavior to be customized.\nInterface JexlUberspect.PropertyResolver; // Abstracts getting property setter and getter.\nInterface JexlUberspect.ResolverStrategy; // Determines property resolution strategy.\nClass JexlPermissions.ClassPermissions; // A permission delegation that augments the RESTRICTED permission with an explicit set of classes.\nClass JexlPermissions.Delegate; // A base for permission delegation allowing functional refinement.\nClass JexlSandbox; // A sandbox describes permissions on a class by explicitly allowing or forbidding access to methods and properties through \"allowlists\" and \"blocklists\".\nClass JexlSandbox.BlackSet; // since 3.2, use BlockSet\nClass JexlSandbox.Names; // A base set of names.\nClass JexlSandbox.Permissions; // Contains the allow or block lists for properties and methods for a given class.\nClass JexlSandbox.WhiteSet; // since 3.2, use AllowSet\nEnum JexlUberspect.JexlResolver; // The various builtin property resolvers.\n", "des": "Provides high-level introspective services."}
{"index": 404, "repo": "commons-jexl3-3.3", "code": "package scripting;\n\nClass JexlScriptEngine; // Implements the JEXL ScriptEngine for JSF-223.\nClass JexlScriptEngineFactory; // Implements the JEXL ScriptEngineFactory for JSF-223.\nClass Main; // Test application for JexlScriptEngine (JSR-223 implementation).\n", "des": "Contains the JSR-223 Scripting Engine for JEXL script."}
{"index": 405, "repo": "hbase-common-3.0.0-alpha-4", "code": "package types;\n\nInterface DataType<T>; // DataType is the base class for all HBase data types.\nClass CopyOnWriteArrayMap<K,V>; // A Map that keeps a sorted array in order to provide the concurrent map interface.\nClass FixedLengthWrapper<T>; // Wraps an existing DataType implementation as a fixed-length version of itself.\nClass OrderedBlob; // A byte[] of variable-length.\nClass OrderedBlobVar; // An alternative to OrderedBlob for use by Struct fields that do not terminate the fields list.\nClass OrderedBytesBase<T>; // Base class for data types backed by the OrderedBytes encoding implementations.\nClass OrderedFloat32; // A float of 32-bits using a fixed-length encoding.\nClass OrderedFloat64; // A double of 64-bits using a fixed-length encoding.\nClass OrderedInt16; // A short of 16-bits using a fixed-length encoding.\nClass OrderedInt32; // An int of 32-bits using a fixed-length encoding.\nClass OrderedInt64; // A long of 64-bits using a fixed-length encoding.\nClass OrderedInt8; // A byte of 8-bits using a fixed-length encoding.\nClass OrderedNumeric; // An Number of arbitrary precision and variable-length encoding.\nClass OrderedString; // A String of variable-length.\nClass RawByte; // An DataType for interacting with values encoded using Bytes.putByte(byte[], int, byte).\nClass RawBytes; // An DataType for interacting with variable-length values encoded using Bytes.putBytes(byte[], int, byte[], int, int).\nClass RawBytesFixedLength; // An DataType that encodes fixed-length values encoded using Bytes.putBytes( byte[], int, byte[], int, int).\nClass RawBytesTerminated; // An DataType that encodes variable-length values encoded using Bytes.putBytes(byte[], int, byte[], int, int).\nClass RawDouble; // An DataType for interacting with values encoded using Bytes.putDouble(byte[], int, double).\nClass RawFloat; // An DataType for interacting with values encoded using Bytes.putFloat(byte[], int, float).\nClass RawInteger; // An DataType for interacting with values encoded using Bytes.putInt(byte[], int, int).\n", "des": "This package provides the definition and implementation of HBase's extensible data type API."}
{"index": 406, "repo": "spring-social-core-1.1.6.RELEASE", "code": "package social;\n\npackage social.connect; // Framework for establishing connections between local users and users of ServiceProviders such as Twitter and Facebook.\npackage social.oauth1; // OAuth1 client.\npackage social.oauth2; // OAuth2 client.\npackage social.support; // Internal utilities and helpers used by the Spring Social core module.\nInterface ApiBinding; // Base interface that may be implemented by API bindings.\nInterface ServiceProvider<A>; // Top-level marker interface defining a ServiceProvider.\nInterface UserIdSource; // Strategy interface used to determine the account ID of the current user.\nClass ApiException; // Indicates that an error occurred while consuming a provider API.\nClass DuplicateStatusException; // Exception thrown when a duplicate status is posted.\nClass ExpiredAuthorizationException; // Exception indicating that the authorization presented to the server has expired.\nClass InsufficientPermissionException; // Exception thrown when attempting an operation that requires a permission not granted to the caller.\nClass InternalServerErrorException; // Exception indicating an internal error occurred on the server.\nClass InvalidAuthorizationException; // Exception indicating that the authorization used during an operation invocation is invalid.\nClass MissingAuthorizationException; // Exception indicating that an operation requiring authorization was attempted without providing authorization.\nClass NotAuthorizedException; // Indicates the client is not authorized to invoke the API.\nClass OperationNotPermittedException; // Indicates an operation was attempted that is not permitted.\nClass RateLimitExceededException; // Exception thrown when API calls are being rate-limited.\nClass RejectedAuthorizationException; // Exception indicating that the authorization used during an operation invocation is rejected by the server.\nClass ResourceNotFoundException; // Indicates that the requested provider API resource could not be found.\nClass RevokedAuthorizationException; // Exception indicating that the authorization used during an operation invocation has been revoked.\nClass ServerDownException; // Exception indicating that the server is down or being upgraded.\nClass ServerException; // Exception thrown when a server error occurs.\nClass ServerOverloadedException; // Exception indicating that the server is experiencing high load.\nClass SocialException; // Exception class indicating a problem occurred performing an operation against a service provider.\nClass UncategorizedApiException; // Indicates that an otherwise uncategorized error occurred while consuming a provider API.\n", "des": "Core Spring Social classes"}
{"index": 407, "repo": "spring-social-core-1.1.6.RELEASE", "code": "package connect;\n\npackage connect.jdbc; // JDBC-based ConnectionRepository implementation.\npackage connect.support; // ServiceProvider Connect API implementation support.\nInterface ApiAdapter<A>; // An adapter that bridges between the uniform Connection model and a specific provider API model.\nInterface Connection<A>; // A link to a service provider user.\nInterface ConnectionFactoryLocator; // A ServiceLocator for ConnectionFactory instances.\nInterface ConnectionRepository; // Data access interface for saving and restoring Connection objects from a persistent store.\nInterface ConnectionSignUp; // A command that signs up a new user in the event no user id could be mapped from a Connection.\nInterface ConnectionValues; // A configuration interface used to set values on a Connection from a specific service provider API instance.\nInterface UsersConnectionRepository; // A data access interface for managing a global store of users connections to service providers.\nClass ConnectionData; // A data transfer object that allows the internal state of a Connection to be persisted and transferred between layers of an application.\nClass ConnectionFactory<A>; // Base abstraction for factories that construct service provider Connection instances.\nClass ConnectionKey; // The unique business key for a Connection instance.\nClass UserProfile; // A normalized model representing a service provider user profile.\nClass UserProfileBuilder; // Builder for constructing a UserProfile instance returned by ApiAdapter.fetchUserProfile(Object) Makes it easy to construct a profile instance where some of the individual fields may be null.\nClass ConnectionRepositoryException; // Base exception class for ConnectionRepository failures.\nClass DuplicateConnectionException; // Thrown by a ConnectionRepository when attempting to add a Connection and a connection already exists with the given key.\nClass NoSuchConnectionException; // Thrown by a ConnectionRepository when attempting to fetch a Connection and no such connection exists with the provided key.\nClass NotConnectedException; // Thrown by a ConnectionRepository when attempting to fetch a \"primary\" connection and the user is not connected to the provider in question.\n", "des": "Framework for establishing connections between local users and users of ServiceProviders such as Twitter and Facebook."}
{"index": 408, "repo": "spring-social-core-1.1.6.RELEASE", "code": "package jdbc;\n\nClass JdbcUsersConnectionRepository; // UsersConnectionRepository that uses the JDBC API to persist connection data to a relational database.\n", "des": "JDBC-based ConnectionRepository implementation."}
{"index": 409, "repo": "spring-social-core-1.1.6.RELEASE", "code": "package support;\n\nClass AbstractConnection<A>; // Base support class for Connection implementations.\nClass ConnectionFactoryRegistry; // A registry for service provider connection factories.\nClass OAuth1Connection<A>; // An OAuth1-based Connection implementation.\nClass OAuth1ConnectionFactory<A>; // Factory for creating OAuth1-based Connections.\nClass OAuth2Connection<A>; // An OAuth2-based Connection implementation.\nClass OAuth2ConnectionFactory<S>; // Factory for creating OAuth2-based Connections.\n", "des": "ServiceProvider Connect API implementation support."}
{"index": 410, "repo": "spring-social-core-1.1.6.RELEASE", "code": "package oauth1;\n\nInterface OAuth1Operations; // A service interface for the OAuth 1 flow.\nInterface OAuth1ServiceProvider<A>; // A ServiceProvider that uses the OAuth 1.0 protocol.\nClass AbstractOAuth1ApiBinding; // Base class for OAuth 1-based provider API bindings.\nClass AbstractOAuth1ServiceProvider<S>; // Base class for ServiceProviders that use the OAuth1 protocol.\nClass AuthorizedRequestToken; // A OAuth 1.0 request token that has been authorized by the user.\nClass GenericOAuth1ConnectionFactory; // Generic implementation of an OAuth1ConnectionFactory that carries no intrinsic knowledge of the API it will be creating connections against.\nClass GenericOAuth1ServiceProvider; // Generic implementation of OAuth1ServiceProvider that carries no intrinsic knowledge of the API it will be creating connections against.\nClass OAuth1Parameters; // Parameters for building an OAuth1 authorize URL.\nClass OAuth1Template; // OAuth10Operations implementation that uses REST-template to make the OAuth calls.\nClass OAuthToken; // Holds an OAuth token and secret.\nEnum OAuth1Version; // Various versions ofthe OAuth1 Core specification.\n", "des": "OAuth1 client."}
{"index": 411, "repo": "spring-social-core-1.1.6.RELEASE", "code": "package oauth2;\n\nInterface OAuth2Operations; // A service interface for the OAuth2 flow.\nInterface OAuth2ServiceProvider<A>; // A ServiceProvider that uses the OAuth 2.0 protocol.\nClass AbstractOAuth2ApiBinding; // Base class for OAuth 2-based provider API bindings.\nClass AbstractOAuth2ServiceProvider<S>; // Base class for ServiceProviders that use the OAuth2 protocol.\nClass AccessGrant; // OAuth2 access token.\nClass GenericOAuth2ConnectionFactory; // Generic implementation of an OAuth2ConnectionFactory that carries no intrinsic knowledge of the API it will be creating connections against.\nClass GenericOAuth2ServiceProvider; // Generic implementation of OAuth2ServiceProvider that carries no intrinsic knowledge of the API it will be creating connections against.\nClass OAuth2Parameters; // Parameters for building an OAuth2 authorize URL.\nClass OAuth2Template; // OAuth2Operations implementation that uses REST-template to make the OAuth calls.\nEnum GrantType; // OAuth2 supports two types of authorization flow, typically referred to as \"Client-side\" and \"Server-side\".\nEnum OAuth2Version; // Enum encapsulating the differences between the various versions of the OAuth2 specification.\nEnum TokenStrategy; // Strategy enumeration where each value carries an interceptor defining how an access token is carried on API requests.\n", "des": "OAuth2 client."}
{"index": 412, "repo": "spring-social-core-1.1.6.RELEASE", "code": "package support;\n\nClass BufferingClientHttpResponse;\nClass ClientHttpRequestFactorySelector; // Chooses a request factory.\nClass ClientHttpRequestFactorySelector.HttpComponentsClientRequestFactoryCreator;\nClass FormMapHttpMessageConverter; // Message converter that reads form-encoded data into a flat Map<String, String>.\nClass HttpRequestDecorator; // Extension of HttpRequestWrapper that supports adding new HttpHeaders to the wrapped HttpRequest.\nClass LoggingErrorHandler;\nClass ParameterMap; // Generally useful base class for creating MultiValueMaps that store HTTP query parameters.\nClass URIBuilder; // Builds up a URI from individual URI components.\nClass URIBuilderException; // Exception thrown when URIBuilder can't build the specified URI.\n", "des": "Internal utilities and helpers used by the Spring Social core module."}
{"index": 413, "repo": "hadoop-azure-3.3.6", "code": "package azure;\n\npackage azure.metrics; // Infrastructure for a Metrics2 source that provides information on Windows Azure Filesystem for Hadoop instances.\nInterface AzureFileSystemThreadTask; // Interface for executing the file operation by a thread.\nInterface KeyProvider; // The interface that every Azure file system key provider must implement.\nInterface SASKeyGeneratorInterface; // Iterface used by AzureNativeFileSysteStore to retrieve SAS Keys for the respective azure storage entity.\nInterface WasbAuthorizerInterface; // Interface to implement authorization support in WASB.\nClass AzureLinkedStack<E>; // A simple generic stack implementation using linked lists.\nClass AzureNativeFileSystemStore; // Core implementation of Windows Azure Filesystem for Hadoop.\nClass BlockBlobAppendStream; // Stream object that implements append for Block Blobs in WASB.\nClass CachingAuthorizer<K,V>; // Class that provides caching for Authorize and getSasUri calls\nClass LocalSASKeyGeneratorImpl; // Local SAS Key Generation implementation.\nClass NativeAzureFileSystem; // A FileSystem for reading and writing files stored on Windows Azure.\nClass NativeAzureFileSystem.FolderRenamePending; // A description of a folder rename operation, including the source and destination keys, and descriptions of the files in the source folder.\nClass NativeAzureFileSystem.Secure; // A FileSystem for reading and writing files stored on Windows Azure.\nClass RemoteSASKeyGeneratorImpl; // Class implementing a RemoteSASKeyGenerator.\nClass RemoteWasbAuthorizerImpl; // Class implementing WasbAuthorizerInterface using a remote service that implements the authorization operation.\nClass SASKeyGeneratorImpl; // Abstract base class for the SAS Key Generator implementation\nClass SecureStorageInterfaceImpl; // An implementation of the StorageInterface for SAS Key mode.\nClass SecureWasbRemoteCallHelper; // Helper class the has constants and helper methods used in WASB when integrating with a remote http cred service which uses Kerberos and delegation tokens.\nClass SelfRenewingLease; // An Azure blob lease that automatically renews itself indefinitely using a background thread.\nClass SelfThrottlingIntercept; // Introduces delays in our Azure traffic to prevent overrunning the server-side throttling limits.\nClass SendRequestIntercept; // Manages the lifetime of binding on the operation contexts to intercept send request events to Azure storage and allow concurrent OOB I/Os.\n", "des": "A distributed implementation of FileSystem for reading and writing files on Azure Block Storage."}
{"index": 414, "repo": "hadoop-azure-3.3.6", "code": "package metrics;\n\nClass AzureFileSystemInstrumentation; // A metrics source for the WASB file system to track all the metrics we care about for getting a clear picture of the performance/reliability/interaction of the Hadoop cluster with Azure Storage.\nClass AzureFileSystemMetricsSystem; // AzureFileSystemMetricsSystem\nClass BandwidthGaugeUpdater; // Internal implementation class to help calculate the current bytes uploaded/downloaded and the maximum bandwidth gauges.\nClass ErrorMetricUpdater; // An event listener to the ResponseReceived event from Azure Storage that will update error metrics appropriately when it gets that event.\nClass ResponseReceivedMetricUpdater; // An event listener to the ResponseReceived event from Azure Storage that will update metrics appropriately when it gets that event.\n", "des": "Infrastructure for a Metrics2 source that provides information on Windows Azure Filesystem for Hadoop instances."}
{"index": 415, "repo": "hadoop-azure-3.3.6", "code": "package azurebfs;\n\npackage azurebfs.commit; // Support for manifest committer.\npackage azurebfs.extensions; // This package is for extension points under ABFS; There are no stability guarantees as these extension points are deep inside the ABFS implementation code.\npackage azurebfs.oauth2; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage azurebfs.security; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\nClass Abfs; // Azure Blob File System implementation of AbstractFileSystem.\nClass AbfsConfiguration; // Configuration for Azure Blob FileSystem.\nClass AbfsCountersImpl; // Instrumentation of Abfs counters.\nClass Abfss; // Azure Blob File System implementation of AbstractFileSystem.\nClass AzureBlobFileSystem; // A FileSystem for reading and writing files stored on Windows Azure\nClass AzureBlobFileSystemStore; // Provides the bridging logic between Hadoop's abstract filesystem and Azure Storage.\nClass AzureBlobFileSystemStore.AzureBlobFileSystemStoreBuilder; // A builder class for AzureBlobFileSystemStore.\nClass SecureAzureBlobFileSystem; // A secure FileSystem for reading and writing files stored on Windows Azure\nEnum AbfsStatistic; // Statistic which are collected in Abfs.\n", "des": "A distributed implementation of FileSystem for reading and writing files on Azure Storage."}
{"index": 416, "repo": "hadoop-azure-3.3.6", "code": "package commit;\n\nInterface ResilientCommitByRename; // API exclusively for committing files.\nClass AbfsManifestStoreOperations; // Extension of StoreOperationsThroughFileSystem with ABFS awareness.\nClass AzureManifestCommitterFactory; // A Committer for the manifest committer which performs all bindings needed to work best with abfs.\n", "des": "Support for manifest committer."}
{"index": 417, "repo": "hadoop-azure-3.3.6", "code": "package extensions;\n\nInterface BoundDTExtension; // An optional extension for custom extensions, so as to support tighter integration.\nInterface CustomDelegationTokenManager; // Interface for Managing the Delegation tokens.\nInterface CustomTokenProviderAdaptee; // This interface provides an extensibility model for customizing the acquisition of Azure Active Directory Access Tokens.\nInterface SASTokenProvider; // Interface to support SAS authorization.\nClass ExtensionHelper; // Classes to help with use of extensions, expecially those implementing @BoundDTExtension.\n", "des": "This package is for extension points under ABFS; There are no stability guarantees as these extension points are deep inside the ABFS implementation code."}
{"index": 418, "repo": "hadoop-azure-3.3.6", "code": "package oauth2;\n\nInterface IdentityTransformerInterface; // IdentityTransformerInterface defines the set of translation operations that any identity transformer implementation must provide.\nClass AccessTokenProvider; // Returns an Azure Active Directory token when requested.\nClass AzureADAuthenticator; // This class provides convenience methods to obtain AAD tokens.\nClass AzureADToken; // Object representing the AAD access token to use when making HTTP requests to Azure Data Lake Storage.\nClass ClientCredsTokenProvider; // Provides tokens based on client credentials.\nClass CustomTokenProviderAdapter; // Provides tokens based on custom implementation, following the Adapter Design Pattern.\nClass IdentityTransformer; // Perform transformation for Azure Active Directory identities used in owner, group and acls.\nClass LocalIdentityTransformer; // A subclass of IdentityTransformer that translates the AAD to Local identity using IdentityHandler.\nClass MsiTokenProvider; // Provides tokens based on Azure VM's Managed Service Identity.\nClass QueryParams; // Utilities class http query parameters.\nClass RefreshTokenBasedTokenProvider; // Provides tokens based on refresh token.\nClass UserPasswordTokenProvider; // Provides tokens based on username and password.\nClass AzureADAuthenticator.HttpException; // This exception class contains the http error code, requestId and error message, it is thrown when AzureADAuthenticator failed to get the Azure Active Directory token.\nClass AzureADAuthenticator.UnexpectedResponseException; // An unexpected HTTP response was raised, such as text coming back from what should be an OAuth endpoint.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 419, "repo": "hadoop-azure-3.3.6", "code": "package security;\n\nClass AbfsDelegationTokenIdentifier; // Delegation token Identifier for ABFS delegation tokens.\nClass AbfsDelegationTokenManager; // Class for delegation token Manager.\nClass AbfsDtFetcher; // A DT fetcher for Abfs.\nClass AbfssDtFetcher; // The DT Fetcher for abfss.\nClass AbfsTokenRenewer; // Token Renewer for renewing ABFS delegation tokens with remote service.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 420, "repo": "hadoop-azure-3.3.6", "code": "package retryReasonCategories;\n\nClass ClientErrorRetryReason; // Category that can capture server-response errors for 4XX status-code.\nClass ConnectionResetRetryReason; // Category that can capture server-response errors for connection-reset exception.\nClass ConnectionTimeoutRetryReason; // Category that can capture server-response errors for connection-timeout.\nClass ReadTimeoutRetryReason; // Category that can capture server-response errors for read-timeout.\nClass RetryReasonCategory; // Provides methods to define if given exception can be categorised to certain category.\nClass ServerErrorRetryReason; // Category that can capture server-response errors for 5XX status-code.\nClass UnknownHostRetryReason; // Category that can capture server-response errors for UnknownHostException.\nClass UnknownIOExceptionRetryReason; // Category that can capture server-response errors for IOException.\nClass UnknownSocketExceptionRetryReason; // Category that can capture server-response errors for SocketException.\n", "des": "A retryReasonCategory defines methods applicable on server-response errors."}
{"index": 421, "repo": "mahout-mr-0.13.0", "code": "package inmem;\n\nClass InMemBuilder;\nClass InMemInputFormat;\nClass InMemInputFormat.InMemInputSplit; // Custom InputSplit that indicates how many trees are built by each mapper\nClass InMemInputFormat.InMemRecordReader;\nClass InMemMapper;\n", "des": "In-memory mapreduce implementation of Random Decision Forests"}
{"index": 422, "repo": "mahout-mr-0.13.0", "code": "package partial;\n\nClass PartialBuilder;\nClass Step1Mapper;\nClass TreeID;\n", "des": "Partial-data mapreduce implementation of Random Decision Forests"}
{"index": 423, "repo": "mahout-mr-0.13.0", "code": "package sgd;\n\nInterface Gradient; // Provides the ability to inject a gradient into the SGD logistic regresion.\nInterface PriorFunction; // A prior is used to regularize the learning algorithm.\nInterface RecordFactory; // A record factor understands how to convert a line of data into fields and then into a vector.\nClass AbstractOnlineLogisticRegression; // Generic definition of a 1 of n logistic regression classifier that returns probabilities in response to a feature vector.\nClass AdaptiveLogisticRegression; // This is a meta-learner that maintains a pool of ordinary OnlineLogisticRegression learners.\nClass AdaptiveLogisticRegression.TrainingExample;\nClass AdaptiveLogisticRegression.Wrapper; // Provides a shim between the EP optimization stuff and the CrossFoldLearner.\nClass CrossFoldLearner; // Does cross-fold validation of log-likelihood and AUC on several online logistic regression models.\nClass CsvRecordFactory; // Converts CSV data lines to vectors.\nClass DefaultGradient; // Implements the basic logistic training law.\nClass ElasticBandPrior; // Implements a linear combination of L1 and L2 priors.\nClass GradientMachine; // Online gradient machine learner that tries to minimize the label ranking hinge loss.\nClass L1; // Implements the Laplacian or bi-exponential prior.\nClass L2; // Implements the Gaussian prior.\nClass MixedGradient; // Provides a stochastic mixture of ranking updates and normal logistic updates.\nClass ModelDissector; // Uses sample data to reverse engineer a feature-hashed model.\nClass ModelDissector.Weight;\nClass ModelSerializer; // Provides the ability to store SGD model-related objects as binary files.\nClass OnlineLogisticRegression; // Extends the basic on-line logistic regression learner with a specific set of learning rate annealing schedules.\nClass PassiveAggressive; // Online passive aggressive learner that tries to minimize the label ranking hinge loss.\nClass PolymorphicWritable; // Utilities that write a class name and then serialize using writables.\nClass RankingGradient; // Uses the difference between this instance and recent history to get a gradient that optimizes ranking performance.\nClass TPrior; // Provides a t-distribution as a prior.\n", "des": "Implements a variety of on-line logistric regression classifiers using SGD-based algorithms."}
{"index": 424, "repo": "mahout-mr-0.13.0", "code": "package kmeans;\n\nClass Kluster;\nClass KMeansDriver;\nClass RandomSeedGenerator; // Given an Input Path containing a SequenceFile, randomly select k vectors and write them to the output file as a Kluster representing the initial centroid to use.\n", "des": "This package provides an implementation of the k-means clustering algorithm."}
{"index": 425, "repo": "mahout-mr-0.13.0", "code": "package ep;\n\nInterface EvolutionaryProcess.Function<T>;\nInterface Payload<T>; // Payloads for evolutionary state must be copyable and updatable.\nClass EvolutionaryProcess<T extends Payload<U>,U>; // Allows evolutionary optimization where the state function can't be easily packaged for the optimizer to execute.\nClass Mapping; // Provides coordinate tranformations so that evolution can proceed on the entire space of reals but have the output limited and squished in convenient (and safe) ways.\nClass Mapping.Exponential;\nClass Mapping.Identity;\nClass Mapping.LogLimit;\nClass Mapping.SoftLimit;\nClass State<T extends Payload<U>,U>; // Records evolutionary state and provides a mutation operation for recorded-step meta-mutation.\n", "des": "Provides basic evolutionary optimization using recorded-step mutation."}
{"index": 426, "repo": "commons-geometry-hull-1.0-beta1", "code": "package hull;\n\nInterface ConvexHull<P extends Point<P>>; // This class represents a convex hull.\nInterface ConvexHullGenerator<P extends Point<P>>; // Interface for convex hull generators.\n", "des": "This package provides interfaces and classes related to the convex hull problem."}
{"index": 427, "repo": "commons-geometry-hull-1.0-beta1", "code": "package twod;\n\nInterface ConvexHullGenerator2D; // Interface for convex hull generators in the two-dimensional Euclidean space.\nClass AklToussaintHeuristic; // A simple heuristic to improve the performance of convex hull algorithms.\nClass ConvexHull2D; // This class represents a convex hull in two-dimensional Euclidean space.\nClass MonotoneChain; // Implements Andrew's monotone chain method to generate the convex hull of a finite set of points in the two-dimensional Euclidean space.\n", "des": "This package provides algorithms to generate the convex hull for a set of points in an two-dimensional Euclidean space."}
{"index": 428, "repo": "hive-serde-4.0.0-alpha-2", "code": "package typeinfo;\n\nClass BaseCharTypeInfo;\nClass BaseCharUtils;\nClass CharTypeInfo;\nClass DecimalTypeInfo;\nClass HiveDecimalUtils;\nClass ListTypeInfo; // A List Type has homogeneous elements.\nClass MapTypeInfo; // A Map Type has homogeneous keys and homogeneous values.\nClass PrimitiveTypeInfo; // There are limited number of Primitive Types.\nClass StructTypeInfo; // StructTypeInfo represents the TypeInfo of a struct.\nClass TimestampLocalTZTypeInfo;\nClass TypeInfo; // Stores information about a type.\nClass TypeInfoFactory; // TypeInfoFactory can be used to create the TypeInfo object for any types.\nClass TypeInfoUtils; // TypeInfoUtils.\nClass TypeInfoUtils.PrimitiveParts;\nClass UnionTypeInfo; // UnionTypeInfo represents the TypeInfo of an union.\nClass VarcharTypeInfo;\n", "des": "This package provides the implementation of the SerDe type system."}
{"index": 429, "repo": "kafka-streams-3.5.0", "code": "package streams;\n\npackage streams.errors; // Provides common exception classes for Streams applications.\npackage streams.kstream; // Provides a high-level programming model (DSL) to express a (stateful) data flow computation over input streams and tables.\npackage streams.processor; // Provides a low-level programming model (Processor API, aka, PAPI) to express a (stateful) data flow computation over input topics.\npackage streams.query; // Provides a query API (aka Interactive Queries) over state stores, for extracting data from a stateful Kafka Streams application.\npackage streams.state; // Provides interfaces for managing the intermediate state of a stateful streams application.\nInterface KafkaClientSupplier; // KafkaClientSupplier can be used to provide custom Kafka clients to a KafkaStreams instance.\nInterface KafkaStreams.StateListener; // Listen to KafkaStreams.State change events.\nInterface StreamsMetadata; // Metadata of a Kafka Streams client.\nInterface StreamsMetrics; // The Kafka Streams metrics interface for adding metric sensors and collecting metric values.\nInterface TaskMetadata; // Metadata of a task.\nInterface ThreadMetadata; // Metadata of a stream thread.\nInterface TopologyDescription; // A meta representation of a topology.\nInterface TopologyDescription.GlobalStore; // Represents a global store.\nInterface TopologyDescription.Node; // A node of a topology.\nInterface TopologyDescription.Processor; // A processor node of a topology.\nInterface TopologyDescription.Sink; // A sink node of a topology.\nInterface TopologyDescription.Source; // A source node of a topology.\nInterface TopologyDescription.Subtopology; // A connected sub-graph of a Topology.\nClass KafkaStreams; // A Kafka client that allows for performing continuous computation on input coming from one or more input topics and sends output to zero, one, or more output topics.\nClass KafkaStreams.CloseOptions; // Class that handles options passed in case of KafkaStreams instance scale down\nClass KeyQueryMetadata; // Represents all the metadata related to a key, where a particular key resides in a KafkaStreams application.\nClass KeyValue<K,V>; // A key-value pair defined for a single Kafka Streams record.\nClass LagInfo; // Encapsulates information about lag, at a store partition replica (active or standby).\n", "des": "Provides the Kafka Streams library for building streaming data applications."}
{"index": 430, "repo": "kafka-streams-3.5.0", "code": "package errors;\n\nInterface DeserializationExceptionHandler; // Interface that specifies how an exception from source node deserialization (e.g., reading from Kafka) should be handled.\nInterface ProductionExceptionHandler; // Interface that specifies how an exception when attempting to produce a result to Kafka should be handled.\nInterface StreamsUncaughtExceptionHandler;\nClass DefaultProductionExceptionHandler; // ProductionExceptionHandler that always instructs streams to fail when an exception happens while attempting to produce result records.\nClass LogAndContinueExceptionHandler; // Deserialization handler that logs a deserialization exception and then signals the processing pipeline to continue processing more records.\nClass LogAndFailExceptionHandler; // Deserialization handler that logs a deserialization exception and then signals the processing pipeline to stop processing more records and fail.\nEnum DeserializationExceptionHandler.DeserializationHandlerResponse; // Enumeration that describes the response from the exception handler.\nEnum ProductionExceptionHandler.ProductionExceptionHandlerResponse;\nEnum StreamsUncaughtExceptionHandler.StreamThreadExceptionResponse; // Enumeration that describes the response from the exception handler.\nClass BrokerNotFoundException; // Indicates that none of the specified brokers could be found.\nClass InvalidStateStoreException; // Indicates that there was a problem when trying to access a StateStore.\nClass InvalidStateStorePartitionException; // Indicates that the specific state store being queried via StoreQueryParameters used a partitioning that is not assigned to this instance.\nClass LockException; // Indicates that the state store directory lock could not be acquired because another thread holds the lock.\nClass MissingSourceTopicException;\nClass ProcessorStateException; // Indicates a processor state operation (e.g.\nClass StateStoreMigratedException; // Indicates that the state store being queried is closed although the Kafka Streams state is RUNNING or REBALANCING.\nClass StateStoreNotAvailableException; // Indicates that the state store being queried is already closed.\nClass StreamsException; // StreamsException is the top-level exception type generated by Kafka Streams, and indicates errors have occurred during a StreamThread's processing.\nClass StreamsNotStartedException; // Indicates that Kafka Streams is in state CREATED and thus state stores cannot be queries yet.\nClass StreamsRebalancingException; // Indicates that Kafka Streams is in state REBALANCING and thus cannot be queried by default.\n", "des": "Provides common exception classes for Streams applications."}
{"index": 431, "repo": "kafka-streams-3.5.0", "code": "package kstream;\n\nInterface Aggregator<K,V,VA>; // The Aggregator interface for aggregating values of the given key.\nInterface BranchedKStream<K,V>; // Branches the records in the original stream based on the predicates supplied for the branch definitions.\nInterface CogroupedKStream<K,VOut>; // CogroupedKStream is an abstraction of multiple grouped record streams of KeyValue pairs.\nInterface EmitStrategy; // This interface controls the strategy that can be used to control how we emit results in a processor.\nInterface ForeachAction<K,V>; // The ForeachAction interface for performing an action on a key-value pair.\nInterface GlobalKTable<K,V>; // GlobalKTable is an abstraction of a changelog stream from a primary-keyed table.\nInterface Initializer<VA>; // The Initializer interface for creating an initial value in aggregations.\nInterface KeyValueMapper<K,V,VR>; // The KeyValueMapper interface for mapping a key-value pair to a new value of arbitrary type.\nInterface KGroupedStream<K,V>; // KGroupedStream is an abstraction of a grouped record stream of KeyValue pairs.\nInterface KGroupedTable<K,V>; // KGroupedTable is an abstraction of a re-grouped changelog stream from a primary-keyed table, usually on a different grouping key than the original primary key.\nInterface KStream<K,V>; // KStream is an abstraction of a record stream of KeyValue pairs, i.e., each record is an independent entity/event in the real world.\nInterface KTable<K,V>; // KTable is an abstraction of a changelog stream from a primary-keyed table.\nInterface Merger<K,V>; // The interface for merging aggregate values for SessionWindows with the given key.\nInterface Predicate<K,V>; // The Predicate interface represents a predicate (boolean-valued function) of a KeyValue pair.\nInterface Reducer<V>; // The Reducer interface for combining two values of the same type into a new value.\nInterface SessionWindowedCogroupedKStream<K,V>; // SessionWindowedCogroupKStream is an abstraction of a windowed record stream of KeyValue pairs.\n", "des": "Provides a high-level programming model (DSL) to express a (stateful) data flow computation over input streams and tables."}
{"index": 432, "repo": "kafka-streams-3.5.0", "code": "package processor;\n\npackage processor.api; // Provides a low-level programming model (Processor API, aka, PAPI) to express a (stateful) data flow computation over input topics.\nInterface BatchingStateRestoreCallback; // Interface for batching restoration of a StateStore It is expected that implementations of this class will not call the StateRestoreCallback.restore(byte[], byte[]) method.\nInterface Cancellable; // Cancellable interface returned in ProcessorContext.schedule(Duration, PunctuationType, Punctuator).\nInterface CommitCallback; // Stores can register this callback to be notified upon successful commit.\nInterface ConnectedStoreProvider; // Provides a set of StoreBuilders that will be automatically added to the topology and connected to the associated processor.\nInterface Processor<K,V>; // Since 3.0.\nInterface ProcessorContext; // Processor context interface.\nInterface ProcessorSupplier<K,V>; // Since 3.0.\nInterface Punctuator; // A functional interface used as an argument to ProcessorContext.schedule(Duration, PunctuationType, Punctuator).\nInterface RecordContext; // The context associated with the current record being processed by a Processor\nInterface StateRestoreCallback; // Restoration logic for log-backed state stores upon restart, it takes one record at a time from the logs to apply to the restoring state.\nInterface StateRestoreListener; // Class for listening to various states of the restoration process of a StateStore.\nInterface StateStore; // A storage engine for managing state maintained by a stream processor.\nInterface StateStoreContext; // State store context interface.\nInterface StreamPartitioner<K,V>; // Determine how records are distributed among the partitions in a Kafka topic.\nInterface TimestampExtractor; // An interface that allows the Kafka Streams framework to extract a timestamp from an instance of ConsumerRecord.\nInterface TopicNameExtractor<K,V>; // An interface that allows to dynamically determine the name of the Kafka topic to send at the sink node of the topology.\nClass AbstractProcessor<K,V>; // Since 3.0.\nClass FailOnInvalidTimestamp; // Retrieves embedded metadata timestamps from Kafka messages.\nClass LogAndSkipOnInvalidTimestamp; // Retrieves embedded metadata timestamps from Kafka messages.\nClass TaskId; // The task ID representation composed as subtopology (aka topicGroupId) plus the assigned partition ID.\n", "des": "Provides a low-level programming model (Processor API, aka, PAPI) to express a (stateful) data flow computation over input topics."}
{"index": 433, "repo": "kafka-streams-3.5.0", "code": "package api;\n\nInterface FixedKeyProcessor<KIn,VIn,VOut>; // A processor of key-value pair records where keys are immutable.\nInterface FixedKeyProcessorContext<KForward,VForward>; // Processor context interface for FixedKeyRecord.\nInterface FixedKeyProcessorSupplier<KIn,VIn,VOut>; // A processor supplier that can create one or more FixedKeyProcessor instances.\nInterface ProcessingContext; // Processor context interface.\nInterface Processor<KIn,VIn,KOut,VOut>; // A processor of key-value pair records.\nInterface ProcessorContext<KForward,VForward>; // Processor context interface for Record.\nInterface ProcessorSupplier<KIn,VIn,KOut,VOut>; // A processor supplier that can create one or more Processor instances.\nInterface RecordMetadata;\nClass ContextualFixedKeyProcessor<KIn,VIn,VOut>; // An abstract implementation of FixedKeyProcessor that manages the FixedKeyProcessorContext instance and provides default no-op implementation of FixedKeyProcessor.close().\nClass ContextualProcessor<KIn,VIn,KOut,VOut>; // An abstract implementation of Processor that manages the ProcessorContext instance and provides default no-op implementation of Processor.close().\nClass FixedKeyRecord<K,V>; // A data class representing an incoming record with fixed key for processing in a FixedKeyProcessor or a record to forward to downstream processors via FixedKeyProcessorContext.\nClass InternalFixedKeyRecordFactory;\nClass Record<K,V>; // A data class representing an incoming record for processing in a Processor or a record to forward to downstream processors via ProcessorContext.\n", "des": "Provides a low-level programming model (Processor API, aka, PAPI) to express a (stateful) data flow computation over input topics."}
{"index": 434, "repo": "kafka-streams-3.5.0", "code": "package query;\n\nInterface Query<R>; // Marker interface that all interactive queries must implement (see KafkaStreams.query(StateQueryRequest)).\nInterface QueryResult<R>; // Container for a single partition's result when executing a StateQueryRequest.\nClass KeyQuery<K,V>; // Interactive query for retrieving a single record based on its key.\nClass Position; // A representation of a position vector with respect to a set of topic partitions.\nClass PositionBound; // A class bounding the processing state Position during queries.\nClass QueryConfig; // Runtime configuration parameters\nClass RangeQuery<K,V>; // Interactive query for issuing range queries and scans over KeyValue stores.\nClass StateQueryRequest<R>; // The request object for Interactive Queries.\nClass StateQueryRequest.InStore; // A progressive builder interface for creating StoreQueryRequests.\nClass StateQueryResult<R>; // The response object for interactive queries.\nClass WindowKeyQuery<K,V>;\nClass WindowRangeQuery<K,V>;\nEnum FailureReason; // This enumeration type captures the various top-level reasons that a particular partition of a store would fail to execute a query.\n", "des": "Provides a query API (aka Interactive Queries) over state stores, for extracting data from a stateful Kafka Streams application."}
{"index": 435, "repo": "kafka-streams-3.5.0", "code": "package state;\n\nInterface KeyValueBytesStoreSupplier; // A store supplier that can be used to create one or more KeyValueStore<Bytes, byte[]> instances of type <Bytes, byte[]>.\nInterface KeyValueIterator<K,V>; // Iterator interface of KeyValue.\nInterface KeyValueStore<K,V>; // A key-value store that supports put/get/delete and range queries.\nInterface QueryableStoreType<T>; // Used to enable querying of custom StateStore types via the KafkaStreams API.\nInterface ReadOnlyKeyValueStore<K,V>; // A key-value store that only supports read operations.\nInterface ReadOnlySessionStore<K,AGG>; // A session store that only supports read operations.\nInterface ReadOnlyWindowStore<K,V>; // A window store that only supports read operations.\nInterface RocksDBConfigSetter; // An interface to that allows developers to customize the RocksDB settings for a given Store.\nInterface SessionBytesStoreSupplier; // A store supplier that can be used to create one or more SessionStore<Byte, byte[]> instances.\nInterface SessionStore<K,AGG>; // Interface for storing the aggregated values of sessions.\nInterface StoreBuilder<T extends StateStore>; // Build a StateStore wrapped with optional caching and logging.\nInterface StoreSupplier<T extends StateStore>; // A state store supplier which can create one or more StateStore instances.\nInterface TimestampedBytesStore;\nInterface TimestampedKeyValueStore<K,V>; // A key-(value/timestamp) store that supports put/get/delete and range queries.\nInterface TimestampedWindowStore<K,V>; // Interface for storing the aggregated values of fixed-size time windows.\nInterface VersionedBytesStore; // A representation of a versioned key-value store as a KeyValueStore of type <Bytes, byte[]>.\nInterface VersionedBytesStoreSupplier; // A store supplier that can be used to create one or more versioned key-value stores, specifically, VersionedBytesStore instances.\nInterface VersionedKeyValueStore<K,V>; // A key-value store that stores multiple record versions per key, and supports timestamp-based retrieval operations to return the latest record (per key) as of a specified timestamp.\n", "des": "Provides interfaces for managing the intermediate state of a stateful streams application."}
{"index": 436, "repo": "commons-pool2-2.11.1", "code": "package pool2;\n\npackage pool2.impl; // Object pooling API implementations.\npackage pool2.proxy; // Object pooling proxy implementation.\nInterface KeyedObjectPool<K,V>; // A \"keyed\" pooling interface.\nInterface KeyedPooledObjectFactory<K,V>; // An interface defining life-cycle methods for instances to be served by a KeyedObjectPool.\nInterface ObjectPool<T>; // A pooling simple interface.\nInterface PooledObject<T>; // Defines the wrapper that is used to track the additional information, such as state, for the pooled objects.\nInterface PooledObjectFactory<T>; // An interface defining life-cycle methods for instances to be served by an ObjectPool.\nInterface SwallowedExceptionListener; // Pools that unavoidably swallow exceptions may be configured with an instance of this listener so the user may receive notification of when this happens.\nInterface TrackedUse; // Allows pooled objects to make information available about when and how they were used available to the object pool.\nInterface UsageTracking<T>; // This interface may be implemented by an object pool to enable clients (primarily those clients that wrap pools to provide pools with extended features) to provide additional information to the pool relating to object using allowing more informed decisions and reporting to be made regarding abandoned objects.\nClass BaseKeyedPooledObjectFactory<K,V>; // A base implementation of KeyedPooledObjectFactory.\nClass BaseObject; // A base class for common functionality.\nClass BaseObjectPool<T>; // A simple base implementation of ObjectPool.\nClass BasePooledObjectFactory<T>; // A base implementation of PoolableObjectFactory.\nClass PoolUtils; // This class consists exclusively of static methods that operate on or return ObjectPool or KeyedObjectPool related interfaces.\nEnum DestroyMode; // Destroy context provided to object factories via destroyObject and invalidateObject methods.\nEnum PooledObjectState; // Provides all possible states of a PooledObject.\n", "des": "Object pooling API."}
{"index": 437, "repo": "commons-pool2-2.11.1", "code": "package impl;\n\nInterface CallStack; // Strategy for obtaining and printing the current call stack.\nInterface DefaultPooledObjectInfoMBean; // The interface that defines the information about pooled objects that will be exposed via JMX.\nInterface EvictionPolicy<T>; // To provide a custom eviction policy (i.e.\nInterface GenericKeyedObjectPoolMXBean<K>; // Defines the methods that will be made available via JMX.\nInterface GenericObjectPoolMXBean; // Defines the methods that will be made available via JMX.\nClass AbandonedConfig; // Configuration settings for abandoned object removal.\nClass BaseGenericObjectPool<T>; // Base class that provides common functionality for GenericObjectPool and GenericKeyedObjectPool.\nClass BaseObjectPoolConfig<T>; // Provides the implementation for the common attributes shared by the sub-classes.\nClass CallStackUtils; // Utility methods for CallStack.\nClass DefaultEvictionPolicy<T>; // Provides the default implementation of EvictionPolicy used by the pools.\nClass DefaultPooledObject<T>; // This wrapper is used to track the additional information, such as state, for the pooled objects.\nClass DefaultPooledObjectInfo; // Implementation of object that is used to provide information on pooled objects via JMX.\nClass EvictionConfig; // This class is used by pool implementations to pass configuration information to EvictionPolicy instances.\nClass GenericKeyedObjectPool<K,T>; // A configurable KeyedObjectPool implementation.\nClass GenericKeyedObjectPoolConfig<T>; // A simple \"struct\" encapsulating the configuration for a GenericKeyedObjectPool.\nClass GenericObjectPool<T>; // A configurable ObjectPool implementation.\nClass GenericObjectPoolConfig<T>; // A simple \"struct\" encapsulating the configuration for a GenericObjectPool.\nClass NoOpCallStack; // CallStack strategy using no-op implementations of all functionality.\nClass PooledSoftReference<T>; // Extension of DefaultPooledObject to wrap pooled soft references.\nClass SecurityManagerCallStack; // A CallStack strategy using a SecurityManager.\nClass SoftReferenceObjectPool<T>; // A SoftReference based ObjectPool.\nClass ThrowableCallStack; // CallStack strategy that uses the stack trace from a Throwable.\n", "des": "Object pooling API implementations."}
{"index": 438, "repo": "commons-pool2-2.11.1", "code": "package proxy;\n\nClass CglibProxySource<T>; // Provides proxy objects using CGLib.\nClass JdkProxySource<T>; // Provides proxy objects using Java reflection.\nClass ProxiedKeyedObjectPool<K,V>; // Create a new keyed object pool where the pooled objects are wrapped in proxies allowing better control of pooled objects and in particular the prevention of the continued use of an object by a client after that client returns the object to the pool.\nClass ProxiedObjectPool<T>; // Create a new object pool where the pooled objects are wrapped in proxies allowing better control of pooled objects and in particular the prevention of the continued use of an object by a client after that client returns the object to the pool.\n", "des": "Object pooling proxy implementation."}
{"index": 439, "repo": "hbase-client-3.0.0-alpha-4", "code": "package client;\n\npackage client.coprocessor; // Provides client classes for invoking Coprocessor RPC protocols Overview Example Usage\nInterface Admin; // The administrative API for HBase.\nInterface AdvancedScanResultConsumer; // This is the low level API for asynchronous scan.\nInterface AdvancedScanResultConsumer.ScanController; // Used to suspend or stop a scan, or get a scan cursor if available.\nInterface AdvancedScanResultConsumer.ScanResumer; // Used to resume a scan.\nInterface AsyncAdmin; // The asynchronous administrative API for HBase.\nInterface AsyncAdminBuilder; // For creating AsyncAdmin.\nInterface AsyncAdminRequestRetryingCaller.Callable<T>;\nInterface AsyncBufferedMutator; // Used to communicate with a single HBase table in batches.\nInterface AsyncBufferedMutatorBuilder; // For creating AsyncBufferedMutator.\nInterface AsyncConnection; // The asynchronous version of Connection.\nInterface AsyncMasterRequestRpcRetryingCaller.Callable<T>;\nInterface AsyncServerRequestRpcRetryingCaller.Callable<T>;\nInterface AsyncTable<C extends ScanResultConsumerBase>; // The interface for asynchronous version of Table.\nInterface AsyncTable.CheckAndMutateBuilder; // Since 3.0.0, will be removed in 4.0.0.\nInterface AsyncTable.CheckAndMutateWithFilterBuilder; // Since 3.0.0, will be removed in 4.0.0.\nInterface AsyncTable.CoprocessorCallback<R>; // The callback when we want to execute a coprocessor call on a range of regions.\nInterface AsyncTable.CoprocessorServiceBuilder<S,R>; // Helper class for sending coprocessorService request that executes a coprocessor call on regions which are covered by a range.\nInterface AsyncTableBuilder<C extends ScanResultConsumerBase>; // For creating AsyncTable.\nInterface AsyncTableRegionLocator; // The asynchronous version of RegionLocator.\nInterface Attributes;\nInterface BufferedMutator; // Used to communicate with a single HBase table similar to Table but meant for batched, asynchronous puts.\nInterface BufferedMutator.ExceptionListener; // Listens for asynchronous exceptions on a BufferedMutator.\nInterface ColumnFamilyDescriptor; // An ColumnFamilyDescriptor contains information about a column family such as the number of versions, compression settings, etc.\nInterface Connection; // A cluster connection encapsulating lower level individual connections to actual servers and a connection to zookeeper.\n", "des": "Provides HBase Client"}
{"index": 440, "repo": "hbase-client-3.0.0-alpha-4", "code": "package coprocessor;\n\nInterface Batch.Call<T,R>; // Defines a unit of work to be executed.\nInterface Batch.Callback<R>; // Defines a generic callback to be triggered for each Batch.Call.call(Object) result.\nClass Batch; // A collection of interfaces and utilities used for interacting with custom RPC interfaces exposed by Coprocessors.\nClass BigDecimalColumnInterpreter; // ColumnInterpreter for doing Aggregation's with BigDecimal columns.\nClass DoubleColumnInterpreter; // a concrete column interpreter implementation.\nClass LongColumnInterpreter; // a concrete column interpreter implementation.\n", "des": "Provides client classes for invoking Coprocessor RPC protocols Overview Example Usage"}
{"index": 441, "repo": "hbase-client-3.0.0-alpha-4", "code": "package filter;\n\nClass BigDecimalComparator; // A BigDecimal comparator which numerical compares against the specified byte array\nClass BinaryComparator; // A binary comparator which lexicographically compares against the specified byte array using Bytes.compareTo(byte[], byte[]).\nClass BinaryComponentComparator; // A comparator which compares against a specified byte array, but only compares specific portion of the byte array.\nClass BinaryPrefixComparator; // A comparator which compares against a specified byte array, but only compares up to the length of this byte array.\nClass BitComparator; // A bit comparator which performs the specified bitwise operation on each of the bytes with the specified byte array.\nClass ColumnCountGetFilter; // Simple filter that returns first N columns on row only.\nClass ColumnPaginationFilter; // A filter, based on the ColumnCountGetFilter, takes two arguments: limit and offset.\nClass ColumnPrefixFilter; // This filter is used for selecting only those keys with columns that matches a particular prefix.\nClass ColumnRangeFilter; // This filter is used for selecting only those keys with columns that are between minColumn to maxColumn.\nClass ColumnValueFilter; // Different from SingleColumnValueFilter which returns an entire row when specified condition is matched, ColumnValueFilter return the matched cell only.\nClass CompareFilter; // This is a generic filter to be used to filter by comparison.\nClass DependentColumnFilter; // A filter for adding inter-column timestamp matching Only cells with a correspondingly timestamped entry in the target column will be retained Not compatible with Scan.setBatch as operations need full rows for correct filtering\nClass FamilyFilter; // This filter is used to filter based on the column family.\nClass Filter; // Interface for row and column filters directly applied within the regionserver.\nClass FilterBase; // Abstract base class to help you implement new Filters.\nClass FilterList; // Implementation of Filter that represents an ordered List of Filters which will be evaluated with a specified boolean operator FilterList.Operator.MUST_PASS_ALL (AND) or FilterList.Operator.MUST_PASS_ONE (OR).\nClass FilterListBase; // Base class for FilterList.\nClass FilterListWithAND; // FilterListWithAND represents an ordered list of filters which will be evaluated with an AND operator.\nClass FilterListWithOR; // FilterListWithOR represents an ordered list of filters which will be evaluated with an OR operator.\n", "des": "Provides row-level filters applied to HRegion scan results during calls to ResultScanner.next()."}
{"index": 442, "repo": "hbase-client-3.0.0-alpha-4", "code": "package protobuf;\n\nClass ProtobufMagic; // Protobufs utility.\nClass ProtobufMessageConverter; // This class converts PB Messages to various representations, like: JSON string: ProtobufMessageConverter.toJsonElement(MessageOrBuilder) JSON object (gson): ProtobufMessageConverter.toJsonElement(MessageOrBuilder) Java objects (Boolean, Number, String, List, Map): ProtobufMessageConverter.toJavaObject(JsonElement)\n", "des": "Holds classes generated from protobuf src/main/protobuf definition files."}
{"index": 443, "repo": "lucene-analyzers-icu-8.11.2", "code": "package icu;\n\npackage icu.segmentation; // Tokenizer that breaks text into words with the Unicode Text Segmentation algorithm.\npackage icu.tokenattributes; // Additional ICU-specific Attributes for text analysis.\nClass ICUFoldingFilter; // A TokenFilter that applies search term folding to Unicode text, applying foldings from UTR#30 Character Foldings.\nClass ICUFoldingFilterFactory; // Factory for ICUFoldingFilter.\nClass ICUNormalizer2CharFilter; // Normalize token text with ICU's Normalizer2.\nClass ICUNormalizer2CharFilterFactory; // Factory for ICUNormalizer2CharFilter\nClass ICUNormalizer2Filter; // Normalize token text with ICU's Normalizer2\nClass ICUNormalizer2FilterFactory; // Factory for ICUNormalizer2Filter\nClass ICUTransformFilter; // A TokenFilter that transforms text with ICU.\nClass ICUTransformFilterFactory; // Factory for ICUTransformFilter.\n", "des": "Analysis components based on ICU"}
{"index": 444, "repo": "lucene-analyzers-icu-8.11.2", "code": "package segmentation;\n\nClass DefaultICUTokenizerConfig; // Default ICUTokenizerConfig that is generally applicable to many languages.\nClass ICUTokenizer; // Breaks text into words according to UAX #29: Unicode Text Segmentation (http://www.unicode.org/reports/tr29/)\nClass ICUTokenizerConfig; // Class that allows for tailored Unicode Text Segmentation on a per-writing system basis.\nClass ICUTokenizerFactory; // Factory for ICUTokenizer.\n", "des": "Tokenizer that breaks text into words with the Unicode Text Segmentation algorithm."}
{"index": 445, "repo": "lucene-analyzers-icu-8.11.2", "code": "package tokenattributes;\n\nInterface ScriptAttribute; // This attribute stores the UTR #24 script value for a token of text.\nClass ScriptAttributeImpl; // Implementation of ScriptAttribute that stores the script as an integer.\n", "des": "Additional ICU-specific Attributes for text analysis."}
{"index": 446, "repo": "lucene-analyzers-icu-8.11.2", "code": "package collation;\n\npackage collation.tokenattributes; // Custom AttributeImpl for indexing collation keys as index terms.\nClass ICUCollationAttributeFactory; // Converts each token into its CollationKey, and then encodes bytes as an index term.\nClass ICUCollationDocValuesField; // Indexes collation keys as a single-valued SortedDocValuesField.\nClass ICUCollationKeyAnalyzer; // Configures KeywordTokenizer with ICUCollationAttributeFactory.\n", "des": "Unicode Collation support."}
{"index": 447, "repo": "lucene-analyzers-icu-8.11.2", "code": "package tokenattributes;\n\nClass ICUCollatedTermAttributeImpl; // Extension of CharTermAttributeImpl that encodes the term text as a binary Unicode collation key instead of as UTF-8 bytes.\n", "des": "Custom AttributeImpl for indexing collation keys as index terms."}
{"index": 448, "repo": "zookeeper-3.8.2", "code": "package server;\n\nInterface ConnectionMXBean; // This MBean represents a client connection.\nInterface DataTreeMXBean; // Zookeeper data tree MBean.\nInterface NodeHashMap; // The interface defined to manage the hash based on the entries in the nodes map.\nInterface RequestProcessor; // RequestProcessors are chained together to process transactions.\nInterface ServerStats.Provider;\nInterface SessionTracker; // This is the basic interface that ZooKeeperServer uses to track sessions.\nInterface SessionTracker.Session;\nInterface SessionTracker.SessionExpirer;\nInterface ZooKeeperServerListener; // Listener for the critical resource events.\nInterface ZooKeeperServerMXBean; // ZooKeeper server MBean.\nClass AuthenticationHelper; // Contains helper methods to enforce authentication\nClass BlueThrottle; // Implements a token-bucket based rate limiting mechanism with optional probabilistic dropping inspired by the BLUE queue management algorithm [1].\nClass ByteBufferInputStream;\nClass ByteBufferOutputStream;\nClass ConnectionBean; // Implementation of connection MBean interface.\nClass ContainerManager; // Manages cleanup of container ZNodes.\nClass DatadirCleanupManager; // This class manages the cleanup of snapshots and corresponding transaction logs by scheduling the auto purge task with the specified 'autopurge.purgeInterval'.\nClass DataNode; // This class contains the data for a node in the data tree.\nClass DataTree; // This class maintains the tree data structure.\nClass DataTree.ProcessTxnResult;\nClass DataTreeBean; // This class implements the data tree MBean.\nClass DigestCalculator; // Defines how to calculate the digest for a given node.\nClass DumbWatcher; // A empty watcher implementation used in bench and unit test.\nClass ExpiryQueue<E>; // ExpiryQueue tracks elements in time sorted fixed duration buckets.\nClass FinalRequestProcessor; // This Request processor actually applies any transaction associated with a request and services any queries.\nClass NettyServerCnxn;\nClass NettyServerCnxnFactory;\nClass NIOServerCnxn; // This class handles communication with clients using NIO.\nClass NIOServerCnxnFactory; // NIOServerCnxnFactory implements a multi-threaded ServerCnxnFactory using NIO non-blocking socket calls.\nClass NodeHashMapImpl; // a simple wrapper to ConcurrentHashMap that recalculates a digest after each mutation.\nClass ObserverBean; // ObserverBean\n", "des": "ZooKeeper server theory of operation"}
{"index": 449, "repo": "camel-core-3.0.0-RC1", "code": "package builder;\n\nInterface AdviceWithTask; // Task or command being executed when using the advice with feature.\nInterface EndpointConsumerBuilder; // Type-safe endpoint DSL for building consumer endpoints.\nInterface EndpointProducerBuilder; // Type-safe endpoint DSL for building producer endpoints.\nInterface ErrorHandlerBuilder; // A builder of a Error Handler\nInterface FlexibleAggregationStrategy.CompletionAwareMixin;\nInterface FlexibleAggregationStrategy.TimeoutAwareMixin;\nClass AdviceWithBuilder<T extends ProcessorDefinition<?>>; // A builder when using the advice with feature.\nClass AdviceWithRouteBuilder; // A RouteBuilder which has extended capabilities when using the advice with feature.\nClass AdviceWithTasks; // AdviceWithTask tasks which are used by the AdviceWithRouteBuilder.\nClass AggregationStrategies; // Toolbox class to create commonly used Aggregation Strategies in a fluent manner.\nClass AggregationStrategyClause<T>;\nClass Builder; // A helper class for including portions of the expression and predicate Java DSL Implementation of this builder should favor build expressions using the definition classes from the org.apache.camel.model.language package, to build the routes using the same types as it would happen when using XML DSL.\nClass BuilderSupport; // Base class for implementation inheritance for different clauses in the Java DSL\nClass DataFormatClause<T extends ProcessorDefinition<?>>; // An expression for constructing the different possible DataFormat options.\nClass DeadLetterChannelBuilder; // A builder of a Dead Letter Channel\nClass DefaultErrorHandlerBuilder; // The default error handler builder.\nClass EnrichClause<T extends ProcessorDefinition<?>>;\nClass ErrorHandlerBuilderRef; // Represents a proxy to an error handler builder which is resolved by named reference\nClass ErrorHandlerBuilderSupport; // Base class for builders of error handling.\nClass ExchangeBuilder; // Builder to create Exchange and add headers and set body on the Exchange Message.\nClass ExpressionBuilder; // A helper class for working with expressions.\nClass ExpressionClause<T>; // Represents an expression clause within the DSL which when the expression is complete the clause continues to another part of the DSL\nClass ExpressionClauseSupport<T>; // A support class for building expression clauses.\nClass FlexibleAggregationStrategy<E>; // The Flexible Aggregation Strategy is a highly customizable, fluently configurable aggregation strategy.\n", "des": "The Camel Domain Specific Language for creating Routes, Predicates, Expressions and Error Handlers."}
{"index": 450, "repo": "camel-core-3.0.0-RC1", "code": "package model;\n\npackage model.cloud; // The JAXB POJOs for the remote service call DSL\npackage model.config; // The JAXB POJOs for various configurations for the XML Configuration of the routing rules.\npackage model.dataformat; // The JAXB POJOs for the Data Formats used to marshal and unmarshal objects to and from streams inside components\npackage model.language; // The JAXB POJOs for the Expression and Predicate plugins for the XML Configuration.\npackage model.loadbalancer; // The JAXB POJOs for the Load Balancer EIP pattern for the XML Configuration.\npackage model.rest; // The JAXB POJOs for the REST DSL\npackage model.transformer; // The JAXB POJOs for the Transformers used to transform message contents according to declared data types inside components\npackage model.validator; // The JAXB POJOs for the Transformers used to transform message contents according to declared data types inside components\nInterface Block; // Interface to add block featuring to the XML element type.\nInterface DefinitionPropertyPlaceholderConfigurer; // To be used for configuring property placeholder options on the EIP models.\nInterface EndpointRequiredDefinition; // A ProcessorDefinition that requires to be configured with an Endpoint such as SendDefinition.\nInterface ExecutorServiceAwareDefinition<Type extends ProcessorDefinition<?>>; // Enables definitions to support concurrency using ExecutorService\nInterface Model; // Model interface\nInterface ModelCamelContext; // Model level interface for the CamelContext\nInterface OtherAttributesAware; // Models can support being configured with any other attributes to shadow existing options to be used for property placeholders.\nInterface OutputNode; // Marker interface to mark a ProcessorDefinition that supports outputs\nInterface RouteContainer; // Container to hold Route.\nClass AdviceWithDefinition; // Temporary model used internally by advice-with\nClass AggregateDefinition; // Aggregates many messages into a single message\nClass BeanDefinition; // Calls a java bean\nClass CatchDefinition; // Catches exceptions as part of a try, catch, finally block\nClass ChoiceDefinition; // Routes messages based on a series of predicates\nClass ClaimCheckDefinition; // The Claim Check EIP allows you to replace message content with a claim check (a unique key), which can be used to retrieve the message content at a later time.\nClass Constants; // Various constants.\nClass ContextScanDefinition; // Scans for Java RouteBuilder instances in the context Registry.\n", "des": "The JAXB POJOs for the XML Configuration of the routing rules."}
{"index": 451, "repo": "camel-core-3.0.0-RC1", "code": "package cloud;\n\nClass BlacklistServiceCallServiceFilterConfiguration;\nClass CachingServiceCallServiceDiscoveryConfiguration;\nClass CombinedServiceCallServiceDiscoveryConfiguration;\nClass CombinedServiceCallServiceFilterConfiguration;\nClass ConsulServiceCallServiceDiscoveryConfiguration;\nClass CustomServiceCallServiceFilterConfiguration;\nClass DefaultServiceCallServiceLoadBalancerConfiguration;\nClass DnsServiceCallServiceDiscoveryConfiguration;\nClass EtcdServiceCallServiceDiscoveryConfiguration;\nClass HealthyServiceCallServiceFilterConfiguration;\nClass KubernetesServiceCallServiceDiscoveryConfiguration;\nClass PassThroughServiceCallServiceFilterConfiguration;\nClass RibbonServiceCallServiceLoadBalancerConfiguration;\nClass ServiceCallConfigurationDefinition; // Remote service call configuration\nClass ServiceCallDefinition; // To call remote services\nClass ServiceCallDefinitionConstants;\nClass ServiceCallExpressionConfiguration;\nClass ServiceCallServiceChooserConfiguration;\nClass ServiceCallServiceDiscoveryConfiguration;\nClass ServiceCallServiceFilterConfiguration;\nClass ServiceCallServiceLoadBalancerConfiguration;\nClass StaticServiceCallServiceDiscoveryConfiguration;\nClass ZooKeeperServiceCallServiceDiscoveryConfiguration;\n", "des": "The JAXB POJOs for the remote service call DSL"}
{"index": 452, "repo": "camel-core-3.0.0-RC1", "code": "package config;\n\nClass BatchResequencerConfig; // Configures batch-processing resequence eip.\nClass ResequencerConfig;\nClass StreamResequencerConfig; // Configures stream-processing resequence eip.\n", "des": "The JAXB POJOs for various configurations for the XML Configuration of the routing rules."}
{"index": 453, "repo": "camel-core-3.0.0-RC1", "code": "package dataformat;\n\nClass Any23DataFormat; // Any23 data format is used for parsing data to RDF.\nClass ASN1DataFormat; // The ASN.1 data format is used for file transfer with telecommunications protocols.\nClass AvroDataFormat; // The Avro data format is used for serialization and deserialization of messages using Apache Avro binary dataformat.\nClass BarcodeDataFormat; // The Barcode data format is used for creating barccode images (such as QR-Code)\nClass Base64DataFormat; // The Base64 data format is used for base64 encoding and decoding.\nClass BeanioDataFormat; // The BeanIO data format is used for working with flat payloads (such as CSV, delimited, or fixed length formats).\nClass BindyDataFormat; // The Bindy data format is used for working with flat payloads (such as CSV, delimited, fixed length formats, or FIX messages).\nClass CBORDataFormat; // CBOR data format is used for unmarshal a CBOR payload to POJO or to marshal POJO back to CBOR payload.\nClass CryptoDataFormat; // Crypto data format is used for encrypting and decrypting of messages using Java Cryptographic Extension.\nClass CsvDataFormat; // The CSV data format is used for handling CSV payloads.\nClass CustomDataFormat; // To use a custom data format implementation that does not come out of the box from Apache Camel.\nClass DataFormatsDefinition; // To configure data formats\nClass FhirDataformat;\nClass FhirJsonDataFormat; // The FHIR JSon data format is used to marshall/unmarshall to/from FHIR objects to/from JSON.\nClass FhirXmlDataFormat; // The FHIR XML data format is used to marshall/unmarshall from/to FHIR objects to/from XML.\nClass FlatpackDataFormat; // The Flatpack data format is used for working with flat payloads (such as CSV, delimited, or fixed length formats).\nClass GrokDataFormat; // The Grok data format is used for unmarshalling unstructured data to objects using Logstash based Grok patterns.\nClass GzipDataFormat; // The GZip data format is a message compression and de-compression format (which works with the popular gzip/gunzip tools).\n", "des": "The JAXB POJOs for the Data Formats used to marshal and unmarshal objects to and from streams inside components"}
{"index": 454, "repo": "camel-core-3.0.0-RC1", "code": "package language;\n\nClass ConstantExpression; // To use a constant value in Camel expressions or predicates.\nClass ExchangePropertyExpression; // To use a Camel Exchange property in expressions or predicates.\nClass ExpressionDefinition; // A useful base class for an expression\nClass GroovyExpression; // To use Groovy scripts in Camel expressions or predicates.\nClass HeaderExpression; // To use a Camel Message header in expressions or predicates.\nClass Hl7TerserExpression; // To use HL7 terser scripts in Camel expressions or predicates.\nClass JsonPathExpression; // To use JsonPath in Camel expressions or predicates.\nClass LanguageExpression; // To use the specified language in Camel expressions or predicates.\nClass MethodCallExpression; // To use a Java bean (aka method call) in Camel expressions or predicates.\nClass MvelExpression; // To use MVEL scripts in Camel expressions or predicates.\nClass NamespaceAwareExpression; // A useful base class for any expression which may be namespace or XML content aware such as XPathExpression or XQueryExpression\nClass OgnlExpression; // To use OGNL scripts in Camel expressions or predicates.\nClass RefExpression; // Reference to an existing Camel expression or predicate, which is looked up from the Camel registry.\nClass SimpleExpression; // To use Camels built-in Simple language in Camel expressions or predicates.\nClass SpELExpression; // To use Spring Expression Language (SpEL) in Camel expressions or predicates.\nClass TokenizerExpression; // To use Camel message body or header with a tokenizer in Camel expressions or predicates.\nClass XMLTokenizerExpression; // To use Camel message body or header with a XML tokenizer in Camel expressions or predicates.\nClass XPathExpression; // To use XPath (XML) in Camel expressions or predicates.\nClass XQueryExpression; // To use XQuery (XML) in Camel expressions or predicates.\n", "des": "The JAXB POJOs for the Expression and Predicate plugins for the XML Configuration."}
{"index": 455, "repo": "camel-core-3.0.0-RC1", "code": "package loadbalancer;\n\nClass CustomLoadBalancerDefinition; // Custom load balancer\nClass FailoverLoadBalancerDefinition; // Failover load balancer The failover load balancer is capable of trying the next processor in case an Exchange failed with an exception during processing.\nClass RandomLoadBalancerDefinition; // Random load balancer The random load balancer selects a random endpoint for each exchange.\nClass RoundRobinLoadBalancerDefinition; // Round robin load balancer The round robin load balancer will use the next endpoint for each message.\nClass StickyLoadBalancerDefinition; // Sticky load balancer Sticky load balancing using an Expression to calculate a correlation key to perform the sticky load balancing; rather like jsessionid in the web or JMSXGroupID in JMS.\nClass TopicLoadBalancerDefinition; // Topic load balancer The topic load balancer sends to all destinations (rather like JMS Topics)\nClass WeightedLoadBalancerDefinition; // Weighted load balancer The weighted load balancing policy allows you to specify a processing load distribution ratio for each server with respect to others.\n", "des": "The JAXB POJOs for the Load Balancer EIP pattern for the XML Configuration."}
{"index": 456, "repo": "camel-core-3.0.0-RC1", "code": "package rest;\n\nInterface RestContainer; // Container to hold Rest.\nClass DeleteVerbDefinition; // Rest DELETE command\nClass GetVerbDefinition; // Rest GET command\nClass HeadVerbDefinition; // Rest HEAD command\nClass PatchVerbDefinition; // Rest PATCH command\nClass PostVerbDefinition; // Rest POST command\nClass PutVerbDefinition; // Rest PUT command\nClass RestBindingDefinition; // To configure rest binding\nClass RestConfigurationDefinition; // To configure rest\nClass RestConstants;\nClass RestDefinition; // Defines a rest service using the rest-dsl\nClass RestOperationParamDefinition; // To specify the rest operation parameters using Swagger.\nClass RestOperationResponseHeaderDefinition; // To specify the rest operation response headers using Swagger.\nClass RestOperationResponseMsgDefinition; // To specify the rest operation response messages using Swagger.\nClass RestPropertyDefinition; // A key value pair\nClass RestsDefinition; // A series of rest services defined using the rest-dsl\nClass RestSecuritiesDefinition; // To configure rest security definitions.\nClass RestSecurityApiKey; // Rest security basic auth definition\nClass RestSecurityBasicAuth; // Rest security basic auth definition\nClass RestSecurityDefinition; // To specify the rest security definitions using Swagger.\nClass RestSecurityOAuth2; // Rest security OAuth2 definition\nClass SecurityDefinition; // Rest security definition\nClass VerbDefinition; // Rest command\nEnum CollectionFormat;\nEnum RestBindingMode;\nEnum RestHostNameResolver; // To configure the rest hostname resolver\nEnum RestParamType; // Rest parameter types\n", "des": "The JAXB POJOs for the REST DSL"}
{"index": 457, "repo": "camel-core-3.0.0-RC1", "code": "package transformer;\n\nClass CustomTransformerDefinition; // Represents a CustomTransformer.\nClass DataFormatTransformerDefinition; // Represents a DataFormatTransformer which leverages DataFormat to perform transformation.\nClass EndpointTransformerDefinition; // Represents an endpoint Transformer which leverages camel Endpoint to perform transformation.\nClass TransformerDefinition; // Represents a Transformer which declaratively transforms message content according to the input type declared by InputTypeDefinition and/or output type declared by OutputTypeDefinition.\nClass TransformersDefinition; // To configure transformers.\n", "des": "The JAXB POJOs for the Transformers used to transform message contents according to declared data types inside components"}
{"index": 458, "repo": "camel-core-3.0.0-RC1", "code": "package validator;\n\nClass CustomValidatorDefinition; // Represents a CustomValidator.\nClass EndpointValidatorDefinition; // Represents an endpoint Validator which leverages camel validator component such as Validator Component and Bean Validator Component to perform content validation.\nClass PredicateValidatorDefinition; // Represents a predicate Validator which leverages expression or predicates to perform content validation.\nClass ValidatorDefinition; // Represents a Validator which declaratively validates message content according to the input type declared by InputTypeDefinition and/or output type declared by OutputTypeDefinition.\nClass ValidatorsDefinition; // To configure validators.\n", "des": "The JAXB POJOs for the Transformers used to transform message contents according to declared data types inside components"}
{"index": 459, "repo": "camel-core-3.0.0-RC1", "code": "package impl;\n\npackage impl.cluster; // Base classes and implementation for Camel Cluster\nClass AbstractModelCamelContext; // Represents the context used to configure routes and the policies to use.\nClass DefaultCamelContext; // Represents the context used to configure routes and the policies to use.\nClass DefaultExecutorServiceManager; // Default ExecutorServiceManager.\nClass DefaultModel;\nClass DefaultModelJAXBContextFactory; // Default implementation of ModelJAXBContextFactory.\nClass JndiRegistry; // use JndiBeanRepository instead.\nClass RouteIdFactory; // Factory for generating route ids based on uris.\nClass RouteService; // Represents the runtime objects for a given RouteDefinition so that it can be stopped independently of other routes\n", "des": "Default implementation classes for Camel Core"}
{"index": 460, "repo": "camel-core-3.0.0-RC1", "code": "package cluster;\n\nInterface ClusteredRouteFilter;\nClass ClusteredRouteConfiguration;\nClass ClusteredRouteController;\nClass ClusteredRouteFilters;\nClass ClusteredRouteFilters.BlackList;\nClass ClusteredRouteFilters.IsAutoStartup;\nClass ClusteredRoutePolicy;\nClass ClusteredRoutePolicyFactory;\n", "des": "Base classes and implementation for Camel Cluster"}
{"index": 461, "repo": "commons-geometry-spherical-1.0", "code": "package oned;\n\nClass AngularInterval; // Class representing an angular interval of size greater than zero to 2pi.\nClass AngularInterval.Convex; // Class representing an angular interval with the additional property that the region is convex.\nClass CutAngle; // Class representing an oriented point in 1-dimensional spherical space, meaning an azimuth angle and a direction (increasing or decreasing angles) along the circle.\nClass CutAngles; // Class containing factory methods for constructing CutAngle instances.\nClass Point1S; // This class represents a point on the 1-sphere, or in other words, an azimuth angle on a circle.\nClass RegionBSPTree1S; // BSP tree representing regions in 1D spherical space.\nClass RegionBSPTree1S.RegionNode1S; // BSP tree node for one dimensional spherical space.\nClass Transform1S; // Implementation of the Transform interface for spherical 1D points.\n", "des": "This package provides basic geometry components on the 1-sphere."}
{"index": 462, "repo": "commons-geometry-spherical-1.0", "code": "package twod;\n\nInterface BoundarySource2S; // Extension of the BoundarySource interface for spherical 2D space.\nClass AbstractGreatArcConnector; // Abstract class for joining collections of great arcs into connected paths.\nClass AbstractGreatArcConnector.ConnectableGreatArc; // Internal class for connecting GreatArcs into GreatArcPaths.\nClass BoundaryList2S; // BoundarySource2S implementation that uses boundaries stored in a list.\nClass ConvexArea2S; // Class representing a convex area in 2D spherical space.\nClass EmbeddedTreeGreatCircleSubset; // Class representing an arbitrary subset of the points on a great circle using a RegionBSPTree1S.\nClass GreatArc; // Class representing a single, convex angular interval in a GreatCircle.\nClass GreatArcPath; // Class representing a connected sequence of GreatArc instances.\nClass GreatArcPath.Builder; // Class used to build arc paths.\nClass GreatCircle; // Class representing a great circle on the 2-sphere.\nClass GreatCircles; // Class containing factory methods for constructing GreatCircle and GreatCircleSubset instances.\nClass GreatCircleSubset; // Class representing a subset of the points in a great circle.\nClass InteriorAngleGreatArcConnector; // Great arc connector that selects between multiple connection options based on the resulting interior angle.\nClass InteriorAngleGreatArcConnector.Maximize; // Implementation of InteriorAngleGreatArcConnector that chooses arc connections that produce the largest interior angles.\nClass InteriorAngleGreatArcConnector.Minimize; // Implementation of InteriorAngleGreatArcConnector that chooses arc connections that produce the smallest interior angles.\nClass Point2S; // This class represents a point on the 2-sphere.\nClass RegionBSPTree2S; // BSP tree representing regions in 2D spherical space.\nClass RegionBSPTree2S.RegionNode2S; // BSP tree node for two dimensional spherical space.\nClass Transform2S; // Implementation of the Transform interface for spherical 2D points.\n", "des": "This package provides basic geometry components on the 2-sphere."}
{"index": 463, "repo": "jackson-core-2.15.2", "code": "package core;\n\npackage core.async; // Package that contains abstractions needed to support optional non-blocking decoding (parsing) functionality.\npackage core.base; // Base classes used by concrete Parser and Generator implementations; contain functionality that is not specific to JSON or input abstraction (byte vs char).\npackage core.exc; // Package for some of JsonProcessingException subtypes contained by streaming API.\npackage core.format; // Package that contains interfaces needed for dynamic, pluggable format (auto)detection; as well as basic utility classes for simple format detection functionality.\npackage core.json; // JSON-specific parser and generator implementation classes that Jackson defines and uses.\npackage core.sym; // Internal implementation classes for efficient handling of of symbols in JSON (field names in Objects)\npackage core.type; // Contains classes needed for type introspection, mostly used by data binding functionality.\npackage core.util; // Utility classes used by Jackson Core functionality.\nInterface FormatFeature; // Marker interface that is to be implemented by data format - specific features.\nInterface FormatSchema; // Simple tag interface used to mark schema objects that are used by some JsonParser and JsonGenerator implementations to further specify structure of expected format.\nInterface JsonTokenId; // Interface defined to contain ids accessible with JsonToken.id().\nInterface PrettyPrinter; // Interface for objects that implement pretty printer functionality, such as indentation.\nInterface SerializableString; // Interface that defines how Jackson package can interact with efficient pre-serialized or lazily-serialized and reused String representations.\nInterface TreeNode; // Marker interface used to denote JSON Tree nodes, as far as the core package knows them (which is very little): mostly needed to allow ObjectCodec to have some level of interoperability.\nInterface Versioned; // Interface that those Jackson components that are explicitly versioned will implement.\nClass Base64Variant; // Class used to define specific details of which variant of Base64 encoding/decoding is to be used.\nClass Base64Variants; // Container for commonly used Base64 variants: Base64Variants.MIME Base64Variants.MIME_NO_LINEFEEDS Base64Variants.PEM Base64Variants.MODIFIED_FOR_URL See entries for full description of differences.\nClass JsonFactory; // The main factory class of Jackson package, used to configure and construct reader (aka parser, JsonParser) and writer (aka generator, JsonGenerator) instances.\n", "des": "Main public API classes of the core streaming JSON processor: most importantly JsonFactory used for constructing JSON parser (JsonParser) and generator (JsonGenerator) instances."}
{"index": 464, "repo": "jackson-core-2.15.2", "code": "package async;\n\nInterface ByteArrayFeeder; // NonBlockingInputFeeder implementation used when feeding data as byte arrays.\nInterface ByteBufferFeeder; // NonBlockingInputFeeder implementation used when feeding data as ByteBuffer contents.\nInterface NonBlockingInputFeeder; // Interface used by non-blocking JsonParser implementations to feed input to parse.\n", "des": "Package that contains abstractions needed to support optional non-blocking decoding (parsing) functionality."}
{"index": 465, "repo": "jackson-core-2.15.2", "code": "package base;\n\nClass GeneratorBase; // This base class implements part of API that a JSON generator exposes to applications, adds shared internal methods that sub-classes can use and adds some abstract methods sub-classes must implement.\nClass ParserBase; // Intermediate base class used by all Jackson JsonParser implementations.\nClass ParserMinimalBase; // Intermediate base class used by all Jackson JsonParser implementations, but does not add any additional fields that depend on particular method of obtaining input.\n", "des": "Base classes used by concrete Parser and Generator implementations; contain functionality that is not specific to JSON or input abstraction (byte vs char)."}
{"index": 466, "repo": "jackson-core-2.15.2", "code": "package exc;\n\nClass InputCoercionException; // Exception type for read-side problems that are not direct decoding (\"parsing\") problems (those would be reported as JsonParseExceptions), but rather result from failed attempts to convert specific Java value out of valid but incompatible input value.\nClass StreamConstraintsException; // Exception type used to indicate violations of stream constraints (for example StreamReadConstraints) when reading or writing content.\nClass StreamReadException; // Intermediate base class for all read-side streaming processing problems, including parsing and input value coercion problems.\nClass StreamWriteException; // Intermediate base class for all read-side streaming processing problems, including parsing and input value coercion problems.\n", "des": "Package for some of JsonProcessingException subtypes contained by streaming API."}
{"index": 467, "repo": "jackson-core-2.15.2", "code": "package format;\n\nInterface InputAccessor; // Interface used to expose beginning of a data file to data format detection code.\nClass DataFormatDetector; // Simple helper class that allows data format (content type) auto-detection, given an ordered set of JsonFactory instances to use for actual low-level detection.\nClass DataFormatMatcher; // Result object constructed by DataFormatDetector when requested to detect format of given input data.\nClass InputAccessor.Std; // Basic implementation that reads data from given InputStream and buffers it as necessary.\nEnum MatchStrength; // Enumeration used to indicate strength of match between data format and piece of data (typically beginning of a data file).\n", "des": "Package that contains interfaces needed for dynamic, pluggable format (auto)detection; as well as basic utility classes for simple format detection functionality."}
{"index": 468, "repo": "jackson-core-2.15.2", "code": "package json;\n\npackage json.async; // Non-blocking (\"async\") JSON parser implementation.\nClass ByteSourceJsonBootstrapper; // This class is used to determine the encoding of byte stream that is to contain JSON content.\nClass DupDetector; // Helper class used if JsonParser.Feature.STRICT_DUPLICATE_DETECTION is enabled.\nClass JsonGeneratorImpl; // Intermediate base class shared by JSON-backed generators like UTF8JsonGenerator and WriterBasedJsonGenerator.\nClass JsonReadContext; // Extension of JsonStreamContext, which implements core methods needed, and also exposes more complete API to parser implementation classes.\nClass JsonWriteContext; // Extension of JsonStreamContext, which implements core methods needed, and also exposes more complete API to generator implementation classes.\nClass PackageVersion; // Automatically generated from PackageVersion.java.in during packageVersion-generate execution of maven-replacer-plugin in pom.xml.\nClass ReaderBasedJsonParser; // This is a concrete implementation of JsonParser, which is based on a Reader to handle low-level character conversion tasks.\nClass UTF8DataInputJsonParser; // This is a concrete implementation of JsonParser, which is based on a DataInput as the input source.\nClass UTF8JsonGenerator;\nClass UTF8StreamJsonParser; // This is a concrete implementation of JsonParser, which is based on a InputStream as the input source.\nClass WriterBasedJsonGenerator; // JsonGenerator that outputs JSON content using a Writer which handles character encoding.\nEnum JsonReadFeature; // Token reader (parser) features specific to JSON backend.\nEnum JsonWriteFeature; // Token writer features specific to JSON backend.\n", "des": "JSON-specific parser and generator implementation classes that Jackson defines and uses."}
{"index": 469, "repo": "jackson-core-2.15.2", "code": "package async;\n\nClass NonBlockingByteBufferJsonParser; // Non-blocking parser implementation for JSON content that takes its input via ByteBuffer instance(s) passed.\nClass NonBlockingJsonParser; // Non-blocking parser implementation for JSON content that takes its input via byte[] passed.\nClass NonBlockingJsonParserBase; // Intermediate base class for non-blocking JSON parsers.\nClass NonBlockingUtf8JsonParserBase; // Non-blocking parser base implementation for JSON content.\n", "des": "Non-blocking (\"async\") JSON parser implementation."}
{"index": 470, "repo": "jackson-core-2.15.2", "code": "package sym;\n\nClass ByteQuadsCanonicalizer; // Replacement for BytesToNameCanonicalizer which aims at more localized memory access due to flattening of name quad data.\nClass CharsToNameCanonicalizer; // This class is a kind of specialized type-safe Map, from char array to String value.\nClass Name; // Base class for tokenized names (key strings in objects) that have been tokenized from byte-based input sources (like InputStream.\nClass Name1; // Specialized implementation of PName: can be used for short Strings that consists of at most 4 bytes.\nClass Name2; // Specialized implementation of PName: can be used for short Strings that consists of 5 to 8 bytes.\nClass Name3; // Specialized implementation of PName: can be used for short Strings that consists of 9 to 12 bytes.\nClass NameN; // Generic implementation of PName used for \"long\" names, where long means that its byte (UTF-8) representation is 13 bytes or more.\n", "des": "Internal implementation classes for efficient handling of of symbols in JSON (field names in Objects)"}
{"index": 471, "repo": "jackson-core-2.15.2", "code": "package type;\n\nClass ResolvedType; // Type abstraction that represents Java type that has been resolved (i.e.\nClass TypeReference<T>; // This generic abstract class is used for obtaining full generics type information by sub-classing; it must be converted to ResolvedType implementation (implemented by JavaType from \"databind\" bundle) to be used.\nClass WritableTypeId; // This is a simple value class used between core streaming and higher level databinding to pass information about type ids to write.\nEnum WritableTypeId.Inclusion; // Enumeration of values that matches enum `As` from annotation `JsonTypeInfo`: separate definition to avoid dependency between streaming core and annotations packages; also allows more flexibility in case new values needed at this level of internal API.\n", "des": "Contains classes needed for type introspection, mostly used by data binding functionality."}
{"index": 472, "repo": "jackson-core-2.15.2", "code": "package util;\n\nInterface DefaultPrettyPrinter.Indenter; // Interface that defines objects that can produce indentation used to separate object entries and array values.\nInterface Instantiatable<T>; // Add-on interface used to indicate things that may be \"blueprint\" objects which can not be used as is, but are used for creating usable per-process (serialization, deserialization) instances, using Instantiatable.createInstance() method.\nInterface JacksonFeature; // Basic API implemented by Enums used for simple Jackson \"features\": on/off settings and capabilities exposed as something that can be internally represented as bit sets.\nClass BufferRecycler; // This is a small utility class, whose main functionality is to allow simple reuse of raw byte/char buffers.\nClass BufferRecyclers; // Helper entity used to control access to simple buffer recyling scheme used for some encoding, decoding tasks.\nClass ByteArrayBuilder; // Helper class that is similar to ByteArrayOutputStream in usage, but more geared to Jackson use cases internally.\nClass DefaultIndenter; // Default linefeed-based indenter, used by DefaultPrettyPrinter (unless overridden).\nClass DefaultPrettyPrinter; // Default PrettyPrinter implementation that uses 2-space indentation with platform-default linefeeds.\nClass DefaultPrettyPrinter.FixedSpaceIndenter; // This is a very simple indenter that only adds a single space for indentation.\nClass DefaultPrettyPrinter.NopIndenter; // Dummy implementation that adds no indentation whatsoever\nClass InternCache; // Singleton class that adds a simple first-level cache in front of regular String.intern() functionality.\nClass JacksonFeatureSet<F extends JacksonFeature>; // Container similar to EnumSet meant for storing sets of JacksonFeatures (usually Enums): main difference being that these sets are immutable.\nClass JsonGeneratorDelegate;\nClass JsonParserDelegate; // Helper class that implements delegation pattern for JsonParser, to allow for simple overridability of basic parsing functionality.\nClass JsonParserSequence; // Helper class that can be used to sequence multiple physical JsonParsers to create a single logical sequence of tokens, as a single JsonParser.\nClass MinimalPrettyPrinter; // PrettyPrinter implementation that adds no indentation, just implements everything necessary for value output to work as expected, and provide simpler extension points to allow for creating simple custom implementations that add specific decoration or overrides.\nClass ReadConstrainedTextBuffer;\n", "des": "Utility classes used by Jackson Core functionality."}
{"index": 473, "repo": "beam-sdks-java-core-2.49.0", "code": "package sdk;\n\npackage sdk.annotations; // Defines annotations used across the SDK.\npackage sdk.coders; // Defines Coders to specify how data is encoded to and decoded from byte strings.\npackage sdk.expansion; // Contains classes needed to expose transforms to other SDKs.\npackage sdk.function; // Java 8 functional interface extensions.\npackage sdk.harness; // Utilities for configuring worker environment.\npackage sdk.io; // Defines transforms for reading and writing common storage formats, including AvroIO, and TextIO.\npackage sdk.metrics; // Metrics allow exporting information about the execution of a pipeline.\npackage sdk.options; // Defines PipelineOptions for configuring pipeline execution.\npackage sdk.runners; // For internal use only; no backwards compatibility guarantees.\npackage sdk.schemas; // Defines Schema and other classes for representing schema'd data in a Pipeline.\npackage sdk.state; // Classes and interfaces for interacting with state.\npackage sdk.testing; // Defines utilities for unit testing Apache Beam pipelines.\npackage sdk.transforms; // Defines PTransforms for transforming data in a pipeline.\npackage sdk.util; // For internal use only; no backwards compatibility guarantees.\npackage sdk.values; // Defines PCollection and other classes for representing data in a Pipeline.\nInterface Pipeline.PipelineVisitor; // For internal use only; no backwards-compatibility guarantees.\nInterface PipelineResult; // Result of Pipeline.run().\nClass Pipeline; // A Pipeline manages a directed acyclic graph of PTransforms, and the PCollections that the PTransforms consume and produce.\nClass Pipeline.PipelineVisitor.Defaults; // Default no-op Pipeline.PipelineVisitor that enters all composite transforms.\nClass PipelineRunner<ResultT extends PipelineResult>; // A PipelineRunner runs a Pipeline.\nEnum Pipeline.PipelineVisitor.CompositeBehavior; // Control enum for indicating whether or not a traversal should process the contents of a composite transform or not.\nEnum PipelineResult.State; // Possible job states, for both completed and ongoing jobs.\nClass Pipeline.PipelineExecutionException; // Thrown during execution of a Pipeline, whenever user code within that Pipeline throws an exception.\n", "des": "Provides a simple, powerful model for building both batch and streaming parallel data processing Pipelines."}
{"index": 474, "repo": "beam-sdks-java-core-2.49.0", "code": "package annotations;\n\nAnnotation Type Internal; // Signifies that a publicly accessible API (public class, method or field) is intended for internal use only and not for public consumption.\n", "des": "Defines annotations used across the SDK."}
{"index": 475, "repo": "beam-sdks-java-core-2.49.0", "code": "package coders;\n\nInterface CoderProviderRegistrar; // Coder creators have the ability to automatically have their coders registered with this SDK by creating a ServiceLoader entry and a concrete implementation of this interface.\nInterface DelegateCoder.CodingFunction<InputT,OutputT>; // A CodingFunction<InputT, OutputT> is a serializable function from InputT to OutputT that may throw any Exception.\nClass AtomicCoder<T>; // A Coder that has no component Coders or other configuration.\nClass AvroCoder<T>; // Avro related classes are deprecated in module beam-sdks-java-core and will be eventually removed.\nClass AvroCoder.JodaTimestampConversion; // Conversion for DateTime.\nClass AvroGenericCoder; // Avro related classes are deprecated in module beam-sdks-java-core and will be eventually removed.\nClass BigDecimalCoder; // A BigDecimalCoder encodes a BigDecimal as an integer scale encoded with VarIntCoder and a BigInteger encoded using BigIntegerCoder.\nClass BigEndianIntegerCoder; // A BigEndianIntegerCoder encodes Integers in 4 bytes, big-endian.\nClass BigEndianLongCoder; // A BigEndianLongCoder encodes Longs in 8 bytes, big-endian.\nClass BigEndianShortCoder; // A BigEndianShortCoder encodes Shorts in 2 bytes, big-endian.\nClass BigIntegerCoder; // A BigIntegerCoder encodes a BigInteger as a byte array containing the big endian two's-complement representation, encoded via ByteArrayCoder.\nClass BitSetCoder; // Coder for BitSet.\nClass BooleanCoder; // A Coder for Boolean.\nClass ByteArrayCoder; // A Coder for byte[].\nClass ByteCoder; // A ByteCoder encodes Byte values in 1 byte using Java serialization.\nClass Coder<T>; // A Coder<T> defines how to encode and decode values of type T into byte streams.\nClass Coder.Context; // To implement a coder, do not use any Coder.Context.\nClass CoderProvider; // A CoderProvider provides Coders.\nClass CoderProviders; // Static utility methods for creating and working with CoderProviders.\nClass CoderRegistry; // A CoderRegistry allows creating a Coder for a given Java class or type descriptor.\n", "des": "Defines Coders to specify how data is encoded to and decoded from byte strings."}
{"index": 476, "repo": "beam-sdks-java-core-2.49.0", "code": "package expansion;\n\nInterface ExternalTransformRegistrar; // A registrar which contains a mapping from URNs to available ExternalTransformBuilders.\n", "des": "Contains classes needed to expose transforms to other SDKs."}
{"index": 477, "repo": "beam-sdks-java-core-2.49.0", "code": "package function;\n\nInterface CloseableThrowingConsumer<ExceptionT extends java.lang.Exception,T>; // A ThrowingConsumer that can be closed.\nInterface ThrowingBiConsumer<T1,T2>; // A BiConsumer which can throw Exceptions.\nInterface ThrowingBiFunction<T1,T2,T3>; // A BiFunction which can throw Exceptions.\nInterface ThrowingConsumer<ExceptionT extends java.lang.Exception,T>; // A Consumer which can throw Exceptions.\nInterface ThrowingFunction<T1,T2>; // A Function which can throw Exceptions.\nInterface ThrowingRunnable; // A Runnable which can throw Exceptions.\n", "des": "Java 8 functional interface extensions."}
{"index": 478, "repo": "beam-sdks-java-core-2.49.0", "code": "package harness;\n\nInterface JvmInitializer; // A service interface for defining one-time initialization of the JVM during pipeline execution.\n", "des": "Utilities for configuring worker environment."}
{"index": 479, "repo": "beam-sdks-java-core-2.49.0", "code": "package io;\n\npackage io.fs; // Apache Beam FileSystem interfaces and their default implementations.\npackage io.range; // Provides thread-safe helpers for implementing dynamic work rebalancing in position-based bounded sources.\nInterface AvroIO.RecordFormatter<ElementT>; // Users can achieve the same by providing this transform in a ParDo before using write in AvroIO AvroIO.write(Class).\nInterface AvroSink.DatumWriterFactory<T>;\nInterface AvroSource.DatumReaderFactory<T>;\nInterface CompressedSource.DecompressingChannelFactory; // Factory interface for creating channels that decompress the content of an underlying channel.\nInterface FileBasedSink.OutputFileHints; // Provides hints about how to generate output files, such as a suggested filename suffix (e.g.\nInterface FileBasedSink.WritableByteChannelFactory; // Implementations create instances of WritableByteChannel used by FileBasedSink and related classes to allow decorating, or otherwise transforming, the raw data that would normally be written directly to the WritableByteChannel passed into FileBasedSink.WritableByteChannelFactory.create(WritableByteChannel).\nInterface FileIO.Sink<ElementT>; // Specifies how to write elements to individual files in FileIO.write() and FileIO.writeDynamic().\nInterface FileIO.Write.FileNaming; // A policy for generating names for shard files.\nInterface FileSystemRegistrar; // A registrar that creates FileSystem instances from PipelineOptions.\nInterface ShardingFunction<UserT,DestinationT>; // Function for assigning ShardedKeys to input elements for sharded WriteFiles.\nInterface TextRowCountEstimator.SamplingStrategy; // Sampling Strategy shows us when should we stop reading further files.\nInterface UnboundedSource.CheckpointMark; // A marker representing the progress and state of an UnboundedSource.UnboundedReader.\nClass AvroIO; // Avro related classes are deprecated in module beam-sdks-java-core and will be eventually removed.\nClass AvroIO.Parse<T>; // Implementation of AvroIO.parseGenericRecords(org.apache.beam.sdk.transforms.SerializableFunction<org.apache.avro.generic.GenericRecord, T>).\nClass AvroIO.ParseAll<T>; // See AvroIO.parseAllGenericRecords(SerializableFunction) for details.\n", "des": "Defines transforms for reading and writing common storage formats, including AvroIO, and TextIO."}
{"index": 480, "repo": "beam-sdks-java-core-2.49.0", "code": "package fs;\n\nInterface MoveOptions; // An object that configures FileSystems.copy(java.util.List<org.apache.beam.sdk.io.fs.ResourceId>, java.util.List<org.apache.beam.sdk.io.fs.ResourceId>, org.apache.beam.sdk.io.fs.MoveOptions...), FileSystems.rename(java.util.List<org.apache.beam.sdk.io.fs.ResourceId>, java.util.List<org.apache.beam.sdk.io.fs.ResourceId>, org.apache.beam.sdk.io.fs.MoveOptions...), and FileSystems.delete(java.util.Collection<org.apache.beam.sdk.io.fs.ResourceId>, org.apache.beam.sdk.io.fs.MoveOptions...).\nInterface ResolveOptions; // An object that configures ResourceId.resolve(java.lang.String, org.apache.beam.sdk.io.fs.ResolveOptions).\nInterface ResourceId; // An identifier which represents a file-like resource.\nClass CreateOptions; // An abstract class that contains common configuration options for creating resources.\nClass CreateOptions.Builder<BuilderT extends CreateOptions.Builder<BuilderT>>; // An abstract builder for CreateOptions.\nClass CreateOptions.StandardCreateOptions; // A standard configuration options with builder.\nClass CreateOptions.StandardCreateOptions.Builder; // Builder for CreateOptions.StandardCreateOptions.\nClass MatchResult; // The result of FileSystem.match(java.util.List<java.lang.String>).\nClass MatchResult.Metadata; // MatchResult.Metadata of a matched file.\nClass MatchResult.Metadata.Builder; // Builder class for MatchResult.Metadata.\nClass MetadataCoder; // A Coder for MatchResult.Metadata.\nClass MetadataCoderV2; // A Coder for MatchResult.Metadata that includes MatchResult.Metadata.lastModifiedMillis().\nClass ResourceIdCoder; // A Coder for ResourceId.\nClass ResourceIdTester; // A utility to test ResourceId implementations.\nEnum EmptyMatchTreatment; // Options for allowing or disallowing filepatterns that match no resources in FileSystems.match(java.util.List<java.lang.String>).\nEnum MatchResult.Status; // Status of a MatchResult.\n", "des": "Apache Beam FileSystem interfaces and their default implementations."}
{"index": 481, "repo": "beam-sdks-java-core-2.49.0", "code": "package range;\n\nInterface RangeTracker<PositionT>; // A RangeTracker is a thread-safe helper object for implementing dynamic work rebalancing in position-based BoundedSource.BoundedReader subclasses.\nClass ByteKey; // A class representing a key consisting of an array of bytes.\nClass ByteKeyRange; // A class representing a range of ByteKeys.\nClass ByteKeyRangeTracker; // A RangeTracker for ByteKeys in ByteKeyRanges.\nClass OffsetRange; // A restriction represented by a range of integers [from, to).\nClass OffsetRange.Coder; // A coder for OffsetRanges.\nClass OffsetRangeTracker; // A RangeTracker for non-negative positions of type long.\n", "des": "Provides thread-safe helpers for implementing dynamic work rebalancing in position-based bounded sources."}
{"index": 482, "repo": "beam-sdks-java-core-2.49.0", "code": "package metrics;\n\nInterface Counter; // A metric that reports a single long value and can be incremented or decremented.\nInterface Distribution; // A metric that reports information about the distribution of reported values.\nInterface Gauge; // A metric that reports the latest value out of reported values.\nInterface Histogram; // A metric that reports information about the histogram of reported values.\nInterface Metric; // Marker interface for all user-facing metrics.\nInterface MetricsContainer; // Holds the metrics for a single step.\nInterface MetricsEnvironment.MetricsEnvironmentState; // Set the MetricsContainer for the associated MetricsEnvironment.\nInterface MetricsOptions; // Extension of PipelineOptions that defines MetricsSink specific options.\nInterface MetricsSink; // Interface for all metric sinks.\nClass DelegatingCounter; // Implementation of Counter that delegates to the instance for the current context.\nClass DelegatingDistribution; // Implementation of Distribution that delegates to the instance for the current context.\nClass DelegatingHistogram; // Implementation of Histogram that delegates to the instance for the current context.\nClass DistributionResult; // The result of a Distribution metric.\nClass GaugeResult; // The result of a Gauge metric.\nClass GaugeResult.EmptyGaugeResult; // Empty GaugeResult, representing no values reported.\nClass MetricFiltering; // Implements matching for metrics filters.\nClass MetricKey; // Metrics are keyed by the step name they are associated with and the name of the metric.\nClass MetricName; // The name of a metric consists of a MetricName.getNamespace() and a MetricName.getName().\nClass MetricNameFilter; // The name of a metric.\nClass MetricQueryResults; // The results of a query for metrics.\nClass MetricResult<T>; // The results of a single current metric.\nClass MetricResults; // Methods for interacting with the metrics of a pipeline that has been executed.\nClass Metrics; // The Metrics is a utility class for producing various kinds of metrics for reporting properties of an executing pipeline.\nClass MetricsEnvironment; // Manages and provides the metrics container associated with each thread.\nClass MetricsEnvironment.MetricsContainerHolder;\nClass MetricsFilter; // Simple POJO representing a filter for querying metrics.\nClass MetricsFilter.Builder; // Builder for creating a MetricsFilter.\n", "des": "Metrics allow exporting information about the execution of a pipeline."}
{"index": 483, "repo": "beam-sdks-java-core-2.49.0", "code": "package options;\n\nInterface ApplicationNameOptions; // Options that allow setting the application name.\nInterface DefaultValueFactory<T>; // An interface used with the Default.InstanceFactory annotation to specify the class that will be an instance factory to produce default values for a given getter on PipelineOptions.\nInterface ExecutorOptions; // Options for configuring the ScheduledExecutorService used throughout the Java runtime.\nInterface ExperimentalOptions; // Apache Beam provides a number of experimental features that can be enabled with this flag.\nInterface FileStagingOptions; // File staging related options.\nInterface ManualDockerEnvironmentOptions; // Pipeline options to tune DockerEnvironment.\nInterface PipelineOptions; // PipelineOptions are used to configure Pipelines.\nInterface PipelineOptionsRegistrar; // PipelineOptions creators have the ability to automatically have their PipelineOptions registered with this SDK by creating a ServiceLoader entry and a concrete implementation of this interface.\nInterface PortablePipelineOptions; // Pipeline options common to all portable runners.\nInterface RemoteEnvironmentOptions; // Options that are used to control configuration of the remote environment.\nInterface SdkHarnessOptions; // Options that are used to control configuration of the SDK harness.\nInterface SdkHarnessOptions.MaxCacheMemoryUsageMb; // Specifies the maximum amount of memory to use within the current SDK harness instance.\nInterface StreamingOptions; // Options used to configure streaming.\nInterface ValueProvider<T>; // A ValueProvider abstracts the notion of fetching a value that may or may not be currently available.\nClass DefaultPipelineOptionsRegistrar; // A PipelineOptionsRegistrar containing the PipelineOptions subclasses available by default.\nClass ExecutorOptions.ScheduledExecutorServiceFactory; // Returns the default ScheduledExecutorService to use within the Apache Beam SDK.\nClass ManualDockerEnvironmentOptions.Options; // Register the ManualDockerEnvironmentOptions.\nClass PipelineOptions.AtomicLongFactory; // DefaultValueFactory which supplies an ID that is guaranteed to be unique within the given process.\nClass PipelineOptions.DirectRunner; // A DefaultValueFactory that obtains the class of the DirectRunner if it exists on the classpath, and throws an exception otherwise.\nClass PipelineOptions.JobNameFactory; // Returns a normalized job name constructed from ApplicationNameOptions.getAppName(), the local system user name (if available), the current time, and a random integer.\n", "des": "Defines PipelineOptions for configuring pipeline execution."}
{"index": 484, "repo": "beam-sdks-java-core-2.49.0", "code": "package runners;\n\nInterface PipelineRunnerRegistrar; // For internal use only; no backwards-compatibility guarantees.\nInterface PTransformMatcher; // For internal use only; no backwards-compatibility guarantees.\nInterface PTransformOverrideFactory<InputT extends PInput,OutputT extends POutput,TransformT extends PTransform<? super InputT,OutputT>>; // For internal use only; no backwards-compatibility guarantees.\nClass AppliedPTransform<InputT extends PInput,OutputT extends POutput,TransformT extends PTransform<? super InputT,OutputT>>; // For internal use only; no backwards-compatibility guarantees.\nClass PTransformOverride; // For internal use only; no backwards-compatibility guarantees.\nClass PTransformOverrideFactory.PTransformReplacement<InputT extends PInput,OutputT extends POutput>; // A PTransform that replaces an AppliedPTransform, and the input required to do so.\nClass PTransformOverrideFactory.ReplacementOutput; // A mapping between original TaggedPValue outputs and their replacements.\nClass TransformHierarchy; // For internal use only; no backwards-compatibility guarantees.\n", "des": "For internal use only; no backwards compatibility guarantees."}
{"index": 485, "repo": "beam-sdks-java-core-2.49.0", "code": "package schemas;\n\npackage schemas.annotations; // Defines Schema and other classes for representing schema'd data in a Pipeline.\npackage schemas.io; // Provides abstractions for schema-aware IOs.\npackage schemas.logicaltypes; // A set of common LogicalTypes for use with schemas.\npackage schemas.parser; // Defines utilities for deailing with schemas.\npackage schemas.transforms; // Defines transforms that work on PCollections with schemas..\npackage schemas.utils; // Defines utilities for deailing with schemas.\nInterface Factory<T>; // A Factory interface for schema-related objects for a specific Java type.\nInterface FieldValueGetter<ObjectT,ValueT>; // For internal use only; no backwards-compatibility guarantees.\nInterface FieldValueSetter<ObjectT,ValueT>; // For internal use only; no backwards-compatibility guarantees.\nInterface ProjectionConsumer; // A ProjectionConsumer is a Schema-aware operation (such as a DoFn or PTransform) that has a FieldAccessDescriptor describing which fields the operation accesses.\nInterface ProjectionProducer<T>; // A factory for operations that execute a projection on a Schema-aware PCollection.\nInterface Schema.LogicalType<InputT,BaseT>; // A LogicalType allows users to define a custom schema type.\nInterface SchemaProvider; // Concrete implementations of this class allow creation of schema service objects that vend a Schema for a specific type.\nInterface SchemaProviderRegistrar; // SchemaProvider creators have the ability to automatically have their schemaProvider registered with this SDK by creating a ServiceLoader entry and a concrete implementation of this interface.\nInterface SchemaUserTypeCreator; // A creator interface for user types that have schemas.\nClass AutoValueSchema; // A SchemaProvider for AutoValue classes.\nClass AutoValueSchema.AbstractGetterTypeSupplier; // FieldValueTypeSupplier that's based on AutoValue getters.\nClass AvroRecordSchema; // Avro related classes are deprecated in module beam-sdks-java-core and will be eventually removed.\nClass CachingFactory<CreatedT>; // A wrapper around a Factory that assumes the schema parameter never changes.\nClass FieldAccessDescriptor; // Used inside of a DoFn to describe which fields in a schema type need to be accessed for processing.\nClass FieldAccessDescriptor.FieldDescriptor; // Description of a single field.\n", "des": "Defines Schema and other classes for representing schema'd data in a Pipeline."}
{"index": 486, "repo": "beam-sdks-java-core-2.49.0", "code": "package annotations;\n\nClass DefaultSchema.DefaultSchemaProvider; // SchemaProvider for default schemas.\nClass DefaultSchema.DefaultSchemaProviderRegistrar; // Registrar for default schemas.\nAnnotation Type DefaultSchema; // The DefaultSchema annotation specifies a SchemaProvider class to handle obtaining a schema and row for the specified class.\nAnnotation Type SchemaCaseFormat; // When used on a POJO, Java Bean, or AutoValue class the specified case format will be used for all the generated Schema fields.\nAnnotation Type SchemaCreate; // Can be put on a constructor or a static method, in which case that constructor or method will be used to created instance of the class by Beam's schema code.\nAnnotation Type SchemaFieldDescription; // When used on a POJO field, a Java Bean getter, or an AutoValue getter, the specified description is used for the generated schema field.\nAnnotation Type SchemaFieldName; // When used on a POJO field, a Java Bean getter, or an AutoValue getter, the specified name is used for the generated schema field.\nAnnotation Type SchemaFieldNumber; // When used on a POJO field, a Java Bean getter, or an AutoValue getter, the generated field will have the specified index.\nAnnotation Type SchemaIgnore; // When used on a POJO field or a JavaBean getter, that field or getter is ignored from the inferred schema.\n", "des": "Defines Schema and other classes for representing schema'd data in a Pipeline."}
{"index": 487, "repo": "beam-sdks-java-core-2.49.0", "code": "package io;\n\npackage io.payloads; // Provides abstractions for schema-aware IOs.\nInterface GenericDlqProvider; // A Provider for generic DLQ transforms that handle deserialization failures.\nInterface Providers.Identifyable;\nInterface SchemaIO; // An abstraction to create schema capable and aware IOs.\nInterface SchemaIOProvider; // Provider to create SchemaIO instances for use in Beam SQL and other SDKs.\nClass DeadLetteredTransform<InputT,OutputT>;\nClass Failure; // A generic failure of an SQL transform.\nClass Failure.Builder;\nClass GenericDlq; // Helper to generate a DLQ transform to write PCollection to an external system.\nClass Providers; // Helpers for implementing the \"Provider\" pattern.\nClass InvalidConfigurationException; // Exception thrown when the configuration for a SchemaIO is invalid.\nClass InvalidLocationException; // Exception thrown when the configuration for a SchemaIO is invalid.\nClass InvalidSchemaException; // Exception thrown when the schema for a SchemaIO is invalid.\n", "des": "Provides abstractions for schema-aware IOs."}
{"index": 488, "repo": "beam-sdks-java-core-2.49.0", "code": "package payloads;\n\nInterface PayloadSerializer;\nInterface PayloadSerializerProvider;\nClass AvroPayloadSerializerProvider; // Avro related classes are deprecated in module beam-sdks-java-core and will be eventually removed.\nClass JsonPayloadSerializerProvider;\nClass PayloadSerializers;\n", "des": "Provides abstractions for schema-aware IOs."}
{"index": 489, "repo": "beam-sdks-java-core-2.49.0", "code": "package logicaltypes;\n\nClass Date; // A date without a time-zone.\nClass DateTime; // A datetime without a time-zone.\nClass EnumerationType; // This Schema.LogicalType represent an enumeration over a fixed set of values.\nClass EnumerationType.Value; // This class represents a single enum value.\nClass FixedBytes; // A LogicalType representing a fixed-length byte array.\nClass FixedPrecisionNumeric; // Fixed precision numeric types used to represent jdbc NUMERIC and DECIMAL types.\nClass FixedString; // A LogicalType representing a fixed-length string.\nClass MicrosInstant; // A timestamp represented as microseconds since the epoch.\nClass NanosDuration; // A duration represented in nanoseconds.\nClass NanosInstant; // A timestamp represented as nanoseconds since the epoch.\nClass OneOfType; // A logical type representing a union of fields.\nClass OneOfType.Value; // Represents a single OneOf value.\nClass PassThroughLogicalType<T>; // A base class for LogicalTypes that use the same Java type as the underlying base type.\nClass PythonCallable; // A logical type for PythonCallableSource objects.\nClass SchemaLogicalType; // A schema represented as a serialized proto bytes.\nClass SqlTypes; // Beam Schema.LogicalTypes corresponding to SQL data types.\nClass Time; // A time without a time-zone.\nClass UnknownLogicalType<T>; // A base class for logical types that are not understood by the Java SDK.\nClass UuidLogicalType; // Base class for types representing UUID as two long values.\nClass VariableBytes; // A LogicalType representing a variable-length byte array with specified maximum length.\nClass VariableString; // A LogicalType representing a variable-length string with specified maximum length.\n", "des": "A set of common LogicalTypes for use with schemas."}
{"index": 490, "repo": "beam-sdks-java-core-2.49.0", "code": "package parser;\n\npackage parser.generated; // Defines utilities for deailing with schemas.\nClass FieldAccessDescriptorParser; // Parser for textual field-access selector.\n", "des": "Defines utilities for deailing with schemas."}
{"index": 491, "repo": "beam-sdks-java-core-2.49.0", "code": "package generated;\n\nInterface FieldSpecifierNotationListener; // This interface defines a complete listener for a parse tree produced by FieldSpecifierNotationParser.\nInterface FieldSpecifierNotationVisitor<T>; // This interface defines a complete generic visitor for a parse tree produced by FieldSpecifierNotationParser.\nClass FieldSpecifierNotationBaseListener; // This class provides an empty implementation of FieldSpecifierNotationListener, which can be extended to create a listener which only needs to handle a subset of the available methods.\nClass FieldSpecifierNotationBaseVisitor<T>; // This class provides an empty implementation of FieldSpecifierNotationVisitor, which can be extended to create a visitor which only needs to handle a subset of the available methods.\nClass FieldSpecifierNotationLexer;\nClass FieldSpecifierNotationParser;\nClass FieldSpecifierNotationParser.ArrayQualifierContext;\nClass FieldSpecifierNotationParser.ArrayQualifierListContext;\nClass FieldSpecifierNotationParser.DotExpressionComponentContext;\nClass FieldSpecifierNotationParser.DotExpressionContext;\nClass FieldSpecifierNotationParser.FieldSpecifierContext;\nClass FieldSpecifierNotationParser.MapQualifierContext;\nClass FieldSpecifierNotationParser.MapQualifierListContext;\nClass FieldSpecifierNotationParser.QualifiedComponentContext;\nClass FieldSpecifierNotationParser.QualifierListContext;\nClass FieldSpecifierNotationParser.QualifyComponentContext;\nClass FieldSpecifierNotationParser.SimpleIdentifierContext;\nClass FieldSpecifierNotationParser.WildcardContext;\n", "des": "Defines utilities for deailing with schemas."}
{"index": 492, "repo": "beam-sdks-java-core-2.49.0", "code": "package transforms;\n\nInterface Cast.Validator; // Interface for statically validating casts.\nInterface SchemaTransform; // An abstraction to create schema capable and aware transforms.\nInterface SchemaTransformProvider; // Provider to create SchemaTransform instances for use in Beam SQL and other SDKs.\nClass AddFields; // A transform to add new nullable fields to a PCollection's schema.\nClass AddFields.Inner<T>; // Inner PTransform for AddFields.\nClass Cast<T>; // Set of utilities for casting rows between schemas.\nClass Cast.CompatibilityError; // Describes compatibility errors during casting.\nClass Cast.Narrowing; // Narrowing changes type without guarantee to preserve data.\nClass Cast.Widening; // Widening changes to type that can represent any possible value of the original type.\nClass CoGroup; // A transform that performs equijoins across multiple schema PCollections.\nClass CoGroup.By; // Defines the set of fields to extract for the join key, as well as other per-input join options.\nClass CoGroup.ExpandCrossProduct; // A PTransform that calculates the cross-product join.\nClass CoGroup.Impl; // The implementing PTransform.\nClass CoGroup.Result;\nClass Convert; // A set of utilities for converting between different objects supporting schemas.\nClass DropFields; // A transform to drop fields from a schema.\nClass DropFields.Inner<T>; // Implementation class for DropFields.\nClass Filter; // A PTransform for filtering a collection of schema types.\nClass Filter.Inner<T>; // Implementation of the filter.\nClass Group; // A generic grouping transform for schema PCollections.\nClass Group.AggregateCombiner<InputT>; // a PTransform that does a combine using an aggregation built up by calls to aggregateField and aggregateFields.\nClass Group.ByFields<InputT>; // a PTransform that groups schema elements based on the given fields.\nClass Group.CombineFieldsByFields<InputT>; // a PTransform that does a per-key combine using an aggregation built up by calls to aggregateField and aggregateFields.\nClass Group.CombineFieldsGlobally<InputT>; // a PTransform that does a global combine using an aggregation built up by calls to aggregateField and aggregateFields.\n", "des": "Defines transforms that work on PCollections with schemas.."}
{"index": 493, "repo": "beam-sdks-java-core-2.49.0", "code": "package utils;\n\nInterface ByteBuddyUtils.TypeConversionsFactory;\nInterface FieldValueTypeSupplier; // A naming policy for schema fields.\nInterface RowSelector; // A selector interface for extracting fields from a row.\nClass AutoValueUtils; // Utilities for managing AutoValue schemas.\nClass AvroUtils; // Avro related classes are deprecated in module beam-sdks-java-core and will be eventually removed.\nClass AvroUtils.AvroConvertType;\nClass AvroUtils.AvroConvertValueForGetter;\nClass AvroUtils.AvroConvertValueForSetter;\nClass AvroUtils.FixedBytesField; // Wrapper for fixed byte fields.\nClass AvroUtils.TypeWithNullability; // Unwrap an AVRO schema into the base type an whether it is nullable.\nClass ByteBuddyUtils;\nClass ByteBuddyUtils.ConvertType; // Give a Java type, returns the Java type expected for use with Row.\nClass ByteBuddyUtils.ConvertValueForGetter; // Takes a StackManipulation that returns a value.\nClass ByteBuddyUtils.ConvertValueForSetter; // Row is going to call the setter with its internal Java type, however the user object being set might have a different type internally.\nClass ByteBuddyUtils.DefaultTypeConversionsFactory;\nClass ByteBuddyUtils.InjectPackageStrategy; // A naming strategy for ByteBuddy classes.\nClass ByteBuddyUtils.TransformingMap<K1,V1,K2,V2>;\nClass ByteBuddyUtils.TypeConversion<T>;\nClass ConvertHelpers; // Helper functions for converting between equivalent schema types.\nClass ConvertHelpers.ConvertedSchemaInformation<T>; // Return value after converting a schema.\nClass JavaBeanUtils; // A set of utilities to generate getter and setter classes for JavaBean objects.\nClass JsonUtils; // Utils to convert JSON records to Beam Row.\nClass POJOUtils; // A set of utilities to generate getter and setter classes for POJOs.\nClass ReflectUtils; // A set of reflection helper methods.\nClass ReflectUtils.ClassWithSchema; // Represents a class and a schema.\nClass SchemaZipFold<T>; // Visitor that zips schemas, and accepts pairs of fields and their types.\nClass SchemaZipFold.Context; // Context referring to a current position in a schema.\n", "des": "Defines utilities for deailing with schemas."}
{"index": 494, "repo": "beam-sdks-java-core-2.49.0", "code": "package state;\n\nInterface BagState<T>; // A ReadableState cell containing a bag of values.\nInterface CombiningState<InputT,AccumT,OutputT>; // A ReadableState cell defined by a Combine.CombineFn, accepting multiple input values, combining them as specified into accumulators, and producing a single output value.\nInterface GroupingState<InputT,OutputT>; // A ReadableState cell that combines multiple input values and outputs a single value of a different type.\nInterface MapState<K,V>; // A ReadableState cell mapping keys to values.\nInterface MultimapState<K,V>; // A ReadableState cell mapping keys to bags of values.\nInterface OrderedListState<T>; // A ReadableState cell containing a list of values sorted by timestamp.\nInterface ReadableState<T>; // A State that can be read via ReadableState.read().\nInterface SetState<T>; // A ReadableState cell containing a set of elements.\nInterface State; // A state cell, supporting a State.clear() operation.\nInterface StateBinder; // For internal use only; no backwards-compatibility guarantees.\nInterface StateContext<W extends BoundedWindow>; // For internal use only; no backwards-compatibility guarantees.\nInterface StateSpec<StateT extends State>; // A specification of a persistent state cell.\nInterface StateSpec.Cases<ResultT>; // Cases for doing a \"switch\" on the type of StateSpec.\nInterface Timer; // A timer for a specified time domain that can be set to register the desire for further processing at particular time in its specified time domain.\nInterface TimerMap;\nInterface Timers; // Interface for interacting with time.\nInterface TimerSpec; // A specification for a Timer.\nInterface ValueState<T>; // A ReadableState cell containing a single value.\nInterface WatermarkHoldState; // For internal use only; no backwards-compatibility guarantees.\nClass ReadableStates; // For internal use only; no backwards-compatibility guarantees.\nClass StateContexts; // For internal use only; no backwards-compatibility guarantees.\nClass StateKeySpec;\nClass StateSpec.Cases.WithDefault<ResultT>; // A base class for a visitor with a default method for cases it is not interested in.\nClass StateSpecs; // Static methods for working with StateSpecs.\n", "des": "Classes and interfaces for interacting with state."}
{"index": 495, "repo": "beam-sdks-java-core-2.49.0", "code": "package testing;\n\nInterface FlattenWithHeterogeneousCoders; // Category tag for tests that use a Flatten where the input PCollectionList contains PCollections heterogeneous coders.\nInterface LargeKeys; // Category tags for tests which validate that a Beam runner can handle keys up to a given size.\nInterface LargeKeys.Above100KB; // Tests if a runner supports 100KB keys.\nInterface LargeKeys.Above100MB; // Tests if a runner supports 100MB keys.\nInterface LargeKeys.Above10KB; // Tests if a runner supports 10KB keys.\nInterface LargeKeys.Above10MB; // Tests if a runner supports 10MB keys.\nInterface LargeKeys.Above1MB; // Tests if a runner supports 1MB keys.\nInterface NeedsRunner; // Category tag for validation tests which utilize TestPipeline for execution and expect to be executed by a PipelineRunner.\nInterface PAssert.IterableAssert<T>; // Builder interface for assertions applicable to iterables and PCollection contents.\nInterface PAssert.SingletonAssert<T>; // Builder interface for assertions applicable to a single value.\nInterface SerializableMatcher<T>; // A Matcher that is also Serializable.\nInterface SerializableMatchers.SerializableSupplier<T>; // Supplies values of type T, and is serializable.\nInterface StreamingIT; // tests which use unbounded PCollections should be in the category UsesUnboundedPCollections.\nInterface TestPipeline.TestValueProviderOptions; // Implementation detail of TestPipeline.newProvider(T), do not use.\nInterface TestPipelineOptions; // TestPipelineOptions is a set of options for test pipelines.\nInterface TestStream.Event<T>; // An event in a TestStream.\nInterface UsesBoundedSplittableParDo; // Category tag for validation tests which utilize splittable ParDo with a DoFn.BoundedPerElement DoFn.\nInterface UsesBundleFinalizer; // Category tag for validation tests which use DoFn.BundleFinalizer.\nInterface UsesCommittedMetrics; // Category tag for validation tests which utilize Metrics.\nInterface UsesCustomWindowMerging; // Category tag for validation tests which utilize custom window merging.\nInterface UsesFailureMessage; // Category tag for tests which validate that currect failure message is provided by failed pipeline.\n", "des": "Defines utilities for unit testing Apache Beam pipelines."}
{"index": 496, "repo": "beam-sdks-java-core-2.49.0", "code": "package transforms;\n\npackage transforms.display; // Defines HasDisplayData for annotating components which provide display data used within UIs and diagnostic tools.\npackage transforms.join; // Defines the CoGroupByKey transform for joining multiple PCollections.\npackage transforms.reflect; // For internal use only; no backwards-compatibility guarantees.\npackage transforms.resourcehints; // Defines ResourceHints for configuring pipeline execution.\npackage transforms.splittabledofn; // Defines utilities related to splittable DoFn.\npackage transforms.windowing; // Defines the Window transform for dividing the elements in a PCollection into windows, and the Trigger for controlling when those elements are output.\nInterface Combine.AccumulatingCombineFn.Accumulator<InputT,AccumT,OutputT>; // The type of mutable accumulator values used by this AccumulatingCombineFn.\nInterface CombineFnBase.GlobalCombineFn<InputT,AccumT,OutputT>; // For internal use only; no backwards-compatibility guarantees.\nInterface CombineWithContext.RequiresContextInternal; // An internal interface for signaling that a GloballyCombineFn or a PerKeyCombineFn needs to access CombineWithContext.Context.\nInterface Contextful.Fn<InputT,OutputT>; // A function from an input to an output that may additionally access Contextful.Fn.Context when computing the result.\nInterface DoFn.BundleFinalizer; // A parameter that is accessible during @StartBundle, @ProcessElement and @FinishBundle that allows the caller to register a callback that will be invoked after the bundle has been successfully completed and the runner has commit the output.\nInterface DoFn.BundleFinalizer.Callback; // An instance of a function that will be invoked after bundle finalization.\nInterface DoFn.MultiOutputReceiver; // Receives tagged output for a multi-output function.\nInterface DoFn.OutputReceiver<T>; // Receives values of the given type.\nInterface ExternalTransformBuilder<ConfigT,InputT extends PInput,OutputT extends POutput>; // An interface for building a transform from an externally provided configuration.\nInterface Materialization<T>; // For internal use only; no backwards-compatibility guarantees.\nInterface Materializations.IterableView<V>; // Represents the PrimitiveViewT supplied to the ViewFn when it declares to use the iterable materialization.\n", "des": "Defines PTransforms for transforming data in a pipeline."}
{"index": 497, "repo": "beam-sdks-java-core-2.49.0", "code": "package display;\n\nInterface DisplayData.Builder; // Utility to build up display data from a component and its included subcomponents.\nInterface HasDisplayData; // Marker interface for PTransforms and components to specify display data used within UIs and diagnostic tools.\nClass DisplayData; // Static display data associated with a pipeline component.\nClass DisplayData.Identifier; // Unique identifier for a display data item within a component.\nClass DisplayData.Item; // Items are the unit of display data.\nClass DisplayData.ItemSpec<T>; // Specifies an DisplayData.Item to register as display data.\nClass DisplayData.Path; // Structured path of registered display data within a component hierarchy.\nEnum DisplayData.Type; // Display data type.\n", "des": "Defines HasDisplayData for annotating components which provide display data used within UIs and diagnostic tools."}
{"index": 498, "repo": "beam-sdks-java-core-2.49.0", "code": "package join;\n\nClass CoGbkResult; // A row result of a CoGroupByKey.\nClass CoGbkResult.CoGbkResultCoder; // A Coder for CoGbkResults.\nClass CoGbkResultSchema; // A schema for the results of a CoGroupByKey.\nClass CoGroupByKey<K>; // A PTransform that performs a CoGroupByKey on a tuple of tables.\nClass KeyedPCollectionTuple<K>; // An immutable tuple of keyed PCollections with key type K.\nClass KeyedPCollectionTuple.TaggedKeyedPCollection<K,V>; // A utility class to help ensure coherence of tag and input PCollection types.\nClass RawUnionValue; // This corresponds to an integer union tag and value.\nClass UnionCoder; // A UnionCoder encodes RawUnionValues.\n", "des": "Defines the CoGroupByKey transform for joining multiple PCollections."}
{"index": 499, "repo": "beam-sdks-java-core-2.49.0", "code": "package reflect;\n\nInterface DoFnInvoker<InputT,OutputT>; // Interface for invoking the DoFn processing methods.\nInterface DoFnInvoker.ArgumentProvider<InputT,OutputT>; // Interface for runner implementors to provide implementations of extra context information.\nInterface DoFnSignature.DoFnMethod; // A method delegated to an annotated method of an underlying DoFn.\nInterface DoFnSignature.MethodWithExtraParameters; // A method delegated to an annotated method of an underlying DoFn that accepts a dynamic list of parameters.\nInterface DoFnSignature.Parameter.Cases<ResultT>; // An interface for destructuring a DoFnSignature.Parameter.\nInterface OnTimerInvoker<InputT,OutputT>; // Interface for invoking the DoFn.OnTimer method for a particular timer.\nClass DoFnInvoker.BaseArgumentProvider<InputT,OutputT>; // This DoFnInvoker.ArgumentProvider throws UnsupportedOperationException for all parameters.\nClass DoFnInvoker.DelegatingArgumentProvider<InputT,OutputT>; // An DoFnInvoker.ArgumentProvider that forwards all calls to the supplied delegate.\nClass DoFnInvoker.FakeArgumentProvider<InputT,OutputT>; // A fake DoFnInvoker.ArgumentProvider used during testing.\nClass DoFnInvokers; // Static utilities for working with DoFnInvoker.\nClass DoFnSignature; // Describes the signature of a DoFn, in particular, which features it uses, which extra context it requires, types of the input and output elements, etc.\nClass DoFnSignature.BundleMethod; // Describes a DoFn.StartBundle or DoFn.FinishBundle method.\nClass DoFnSignature.FieldAccessDeclaration; // Decscribes a field access declaration.\nClass DoFnSignature.GetInitialRestrictionMethod; // Describes a DoFn.GetInitialRestriction method.\nClass DoFnSignature.GetInitialWatermarkEstimatorStateMethod; // Describes a DoFn.GetInitialWatermarkEstimatorState method.\nClass DoFnSignature.GetRestrictionCoderMethod; // Describes a DoFn.GetRestrictionCoder method.\nClass DoFnSignature.GetSizeMethod; // Describes a DoFn.GetSize method.\nClass DoFnSignature.GetWatermarkEstimatorStateCoderMethod; // Describes a DoFn.GetRestrictionCoder method.\nClass DoFnSignature.LifecycleMethod; // Describes a DoFn.Setup or DoFn.Teardown method.\n", "des": "For internal use only; no backwards-compatibility guarantees."}
{"index": 500, "repo": "beam-sdks-java-core-2.49.0", "code": "package resourcehints;\n\nInterface ResourceHintsOptions; // Options that are used to control configuration of the remote environment.\nClass ResourceHint; // Provides a definition of a resource hint known to the SDK.\nClass ResourceHints; // Pipeline authors can use resource hints to provide additional information to runners about the desired aspects of the execution environment.\nClass ResourceHintsOptions.EmptyListDefault;\nClass ResourceHintsOptions.Options; // Register the ResourceHintsOptions.\n", "des": "Defines ResourceHints for configuring pipeline execution."}
{"index": 501, "repo": "beam-sdks-java-core-2.49.0", "code": "package splittabledofn;\n\nInterface GrowableOffsetRangeTracker.RangeEndEstimator; // Provides the estimated end offset of the range.\nInterface HasDefaultTracker<RestrictionT extends HasDefaultTracker<RestrictionT,TrackerT>,TrackerT extends RestrictionTracker<RestrictionT,?>>; // Interface for restrictions for which a default implementation of DoFn.NewTracker is available, depending only on the restriction itself.\nInterface HasDefaultWatermarkEstimator<WatermarkEstimatorStateT,WatermarkEstimatorT extends WatermarkEstimator<WatermarkEstimatorStateT>>; // Interface for watermark estimator state for which a default implementation of DoFn.NewWatermarkEstimator is available, depending only on the watermark estimator state itself.\nInterface ManualWatermarkEstimator<WatermarkEstimatorStateT>; // A WatermarkEstimator which is controlled manually from within a DoFn.\nInterface RestrictionTracker.HasProgress; // All RestrictionTrackers SHOULD implement this interface to improve auto-scaling and splitting performance.\nInterface TimestampObservingWatermarkEstimator<WatermarkEstimatorStateT>; // A WatermarkEstimator that observes the timestamps of all records output from a DoFn.\nInterface WatermarkEstimator<WatermarkEstimatorStateT>; // A WatermarkEstimator which is used for estimating output watermarks of a splittable DoFn.\nClass ByteKeyRangeTracker; // A RestrictionTracker for claiming ByteKeys in a ByteKeyRange in a monotonically increasing fashion.\nClass GrowableOffsetRangeTracker; // An OffsetRangeTracker for tracking a growable offset range.\nClass OffsetRangeTracker; // A RestrictionTracker for claiming offsets in an OffsetRange in a monotonically increasing fashion.\nClass RestrictionTracker<RestrictionT,PositionT>; // Manages access to the restriction and keeps track of its claimed part for a splittable DoFn.\nClass RestrictionTracker.Progress; // A representation for the amount of known completed and remaining work.\nClass RestrictionTracker.TruncateResult<RestrictionT>; // A representation of the truncate result.\nClass SplitResult<RestrictionT>; // A representation of a split result.\nClass WatermarkEstimators; // A set of WatermarkEstimators that users can use to advance the output watermark for their associated splittable DoFns.\nClass WatermarkEstimators.Manual; // Concrete implementation of a ManualWatermarkEstimator.\n", "des": "Defines utilities related to splittable DoFn."}
{"index": 502, "repo": "beam-sdks-java-core-2.49.0", "code": "package windowing;\n\nClass AfterAll; // A composite Trigger that fires when all of its sub-triggers are ready.\nClass AfterEach; // A composite Trigger that executes its sub-triggers in order.\nClass AfterFirst; // A composite Trigger that fires once after at least one of its sub-triggers have fired.\nClass AfterPane; // A Trigger that fires at some point after a specified number of input elements have arrived.\nClass AfterProcessingTime; // A Trigger trigger that fires at a specified point in processing time, relative to when input first arrives.\nClass AfterSynchronizedProcessingTime; // FOR INTERNAL USE ONLY.\nClass AfterWatermark; // AfterWatermark triggers fire based on progress of the system watermark.\nClass AfterWatermark.AfterWatermarkEarlyAndLate;\nClass AfterWatermark.FromEndOfWindow; // A watermark trigger targeted relative to the end of the window.\nClass BoundedWindow; // A BoundedWindow represents window information assigned to data elements.\nClass CalendarWindows; // A collection of WindowFns that windows values into calendar-based windows such as spans of days, months, or years.\nClass CalendarWindows.DaysWindows; // A WindowFn that windows elements into periods measured by days.\nClass CalendarWindows.MonthsWindows; // A WindowFn that windows elements into periods measured by months.\nClass CalendarWindows.YearsWindows; // A WindowFn that windows elements into periods measured by years.\nClass DefaultTrigger; // A trigger that is equivalent to Repeatedly.forever(AfterWatermark.pastEndOfWindow()).\nClass FixedWindows; // A WindowFn that windows values into fixed-size timestamp-based windows.\nClass GlobalWindow; // The default window into which all data is placed (via GlobalWindows).\nClass GlobalWindow.Coder; // GlobalWindow.Coder for encoding and decoding GlobalWindows.\nClass GlobalWindows; // A WindowFn that assigns all data to the same window.\nClass IntervalWindow; // An implementation of BoundedWindow that represents an interval from IntervalWindow.start (inclusive) to IntervalWindow.end (exclusive).\nClass IntervalWindow.IntervalWindowCoder; // Encodes an IntervalWindow as a pair of its upper bound and duration.\nClass MergeOverlappingIntervalWindows; // For internal use only; no backwards compatibility guarantees.\nClass Never; // A Trigger which never fires.\n", "des": "Defines the Window transform for dividing the elements in a PCollection into windows, and the Trigger for controlling when those elements are output."}
{"index": 503, "repo": "beam-sdks-java-core-2.49.0", "code": "package util;\n\npackage util.common; // Defines utilities shared by multiple PipelineRunner implementations.\nInterface BackOff; // Back-off policy when retrying an operation.\nInterface HistogramData.BucketType;\nInterface MutationDetector; // An object for detecting illegal mutations.\nInterface NameUtils.NameOverride; // Classes may implement this interface to change how names are generated for their instances.\nInterface ShardedFile; // Bare-bones class for using sharded files.\nInterface Sleeper; // Sleeper interface to use for requesting the current thread to sleep as specified in Thread.sleep(long).\nInterface ThrowingRunnable; // Like Runnable but allowed to throw any exception.\nInterface ThrowingSupplier<T>; // Like Supplier but allowed to throw any exception.\nInterface Weighted; // Interface representing an object that has a weight, in unspecified units.\nInterface WindowedValue.SingleWindowedValue; // A WindowedValue which holds exactly single window per value.\nClass ApiSurface; // Represents the API surface of a package prefix.\nClass AppliedCombineFn<K,InputT,AccumT,OutputT>; // A CombineFnBase.GlobalCombineFn with a fixed accumulator coder.\nClass BackOffUtils; // Utilities for BackOff.\nClass BitSetCoder; // use BitSetCoder instead\nClass BucketingFunction; // Keep track of the minimum/maximum/sum of a set of timestamped long values.\nClass BufferedElementCountingOutputStream; // Provides an efficient encoding for Iterables containing small values by buffering up to bufferSize bytes of data before prefixing the count.\nClass ByteBuddyUtils; // Utilities for working with Byte Buddy.\nClass ByteStringOutputStream; // An OutputStream that produces ByteStrings.\nClass CoderUtils; // Utilities for working with Coders.\nClass CombineContextFactory; // Factory that produces Combine.Context based on different inputs.\nClass CombineFnUtil; // Static utility methods that create combine function instances.\nClass DoFnInfo<InputT,OutputT>; // Wrapper class holding the necessary information to serialize a DoFn.\nClass DoFnWithExecutionInformation; // The data that the Java SDK harness needs to execute a DoFn.\nClass EmptyOnDeserializationThreadLocal<T>; // A Serializable ThreadLocal which discards any \"stored\" objects.\n", "des": "For internal use only; no backwards compatibility guarantees."}
{"index": 504, "repo": "beam-sdks-java-core-2.49.0", "code": "package common;\n\nInterface Reiterable<T>; // An Iterable that returns Reiterator iterators.\nInterface Reiterator<T>; // An Iterator with the ability to copy its iteration state.\nClass ElementByteSizeObservableIterable<V,InputT extends ElementByteSizeObservableIterator<V>>; // An abstract class used for iterables that notify observers about size in bytes of their elements, as they are being iterated over.\nClass ElementByteSizeObservableIterator<V>; // An abstract class used for iterators that notify observers about size in bytes of their elements, as they are being iterated over.\nClass ElementByteSizeObserver; // An observer that gets notified when additional bytes are read and/or used.\nClass ReflectHelpers; // Utilities for working with with Classes and Methods.\nClass ReflectHelpers.ObjectsClassComparator; // A Comparator that uses the object's class' canonical name to compare them.\n", "des": "Defines utilities shared by multiple PipelineRunner implementations."}
{"index": 505, "repo": "beam-sdks-java-core-2.49.0", "code": "package values;\n\nInterface PCollectionView<T>; // A PCollectionView<T> is an immutable view of a PCollection as a value of type T that can be accessed as a side input to a ParDo transform.\nInterface PCollectionViews.HasDefaultValue<T>;\nInterface PCollectionViews.IsSingletonView<T>;\nInterface PCollectionViews.TypeDescriptorSupplier<T>;\nInterface PInput; // The interface for things that might be input to a PTransform.\nInterface POutput; // The interface for things that might be output from a PTransform.\nInterface PValue; // For internal use.\nInterface TypeDescriptors.TypeVariableExtractor<InputT,OutputT>; // A helper interface for use with TypeDescriptors.extractFromTypeParameters(Object, Class, TypeVariableExtractor).\nClass EncodableThrowable; // A wrapper around a Throwable for use with coders.\nClass FailsafeValueInSingleWindow<T,ErrorT>; // An immutable tuple of value, timestamp, window, and pane.\nClass FailsafeValueInSingleWindow.Coder<T,ErrorT>; // A coder for FailsafeValueInSingleWindow.\nClass KV<K,V>; // An immutable key/value pair.\nClass KV.OrderByKey<K extends java.lang.Comparable<? super K>,V>; // A Comparator that orders KVs by the natural ordering of their keys.\nClass KV.OrderByValue<K,V extends java.lang.Comparable<? super V>>; // A Comparator that orders KVs by the natural ordering of their values.\nClass PBegin; // PBegin is the \"input\" to a root PTransform, such as Read or Create.\nClass PCollection<T>; // A PCollection<T> is an immutable collection of values of type T.\nClass PCollectionList<T>; // A PCollectionList<T> is an immutable list of homogeneously typed PCollection<T>s.\nClass PCollectionRowTuple; // A PCollectionRowTuple is an immutable tuple of PCollections, \"keyed\" by a string tag.\nClass PCollectionTuple; // A PCollectionTuple is an immutable tuple of heterogeneously-typed PCollections, \"keyed\" by TupleTags.\nClass PCollectionViews; // For internal use only; no backwards compatibility guarantees.\n", "des": "Defines PCollection and other classes for representing data in a Pipeline."}
{"index": 506, "repo": "commons-vfs2-2.9.0", "code": "package vfs2;\n\npackage vfs2.auth; // VFS Authentication implementation\npackage vfs2.cache; // VFS File caching\npackage vfs2.events; // VFS Events\npackage vfs2.filter; // Implementations of org.apache.commons.vfs2.FileFilter.\npackage vfs2.function; // Functional interface types in the style of java.util.function.\npackage vfs2.impl; // The standard VFS implementation.\npackage vfs2.operations; // VFS Operations handling.\npackage vfs2.provider; // The File Provider API, and utility classes.\npackage vfs2.tasks; // The VFS Ant Tasks.\npackage vfs2.util; // Utility classes used by the VFS.\nInterface FileContent; // Represents the data content of a file.\nInterface FileContentInfo; // Informs on the content of a file with content type and encoding.\nInterface FileContentInfoFactory; // Creates FileContentInfo instances to determine the content-info for given file contents.\nInterface FileFilter; // This interface is used to select files when traversing the direct children of the base.\nInterface FileListener; // Listens for changes to a file.\nInterface FileMonitor; // FileMonitor interface.\nInterface FileName; // Represents a file name.\nInterface FileObject; // Represents a file, and is used to access the content and structure of the file.\nInterface FilesCache; // The fileCache interface.\nInterface FileSelectInfo; // Information about a file, that is used to select files during the traversal of a hierarchy.\nInterface FileSelector; // This interface is used to select files when traversing a file hierarchy.\nInterface FileSystem; // A file system, made up of a hierarchy of files.\nInterface FileSystemManager; // A FileSystemManager manages a set of file systems.\nInterface RandomAccessContent; // Provides random access over content.\nInterface UserAuthenticator; // The user authenticator is used to query credentials from the user.\nClass AllFileSelector; // A FileSelector that selects everything.\nClass FileChangeEvent; // An event fired when a file is changed.\nClass FileDepthSelector; // A FileSelector that selects all files in a particular depth range.\nClass FileExtensionSelector; // A FileSelector that selects based on file extensions.\nClass FileFilterSelector; // A FileSelector that selects all children of the given fileObject.\n", "des": "The public VFS API."}
{"index": 507, "repo": "commons-vfs2-2.9.0", "code": "package auth;\n\nClass StaticUserAuthenticator; // Provides always the same credentials data passed in with the constructor.\n", "des": "VFS Authentication implementation"}
{"index": 508, "repo": "commons-vfs2-2.9.0", "code": "package cache;\n\nClass AbstractFilesCache; // Abstract base class for FilesCache implementations.\nClass DefaultFilesCache; // A simple FilesCache implementation.\nClass LRUFilesCache; // This implementation caches every file using LRUMap.\nClass NullFilesCache; // A FilesCache implementation.\nClass OnCallRefreshFileObject; // This decorator refreshes the fileObject data on every call.\nClass SoftRefFilesCache; // This implementation caches every file as long as it is strongly reachable by the JVM.\nClass WeakRefFilesCache; // This implementation caches every file as long as it is strongly reachable by the java vm.\n", "des": "VFS File caching"}
{"index": 509, "repo": "commons-vfs2-2.9.0", "code": "package events;\n\nClass AbstractFileChangeEvent; // A change event that knows how to notify a listener.\nClass ChangedEvent; // File changed event.\nClass CreateEvent; // File creation event.\nClass DeleteEvent; // File deletion event.\n", "des": "VFS Events"}
{"index": 510, "repo": "commons-vfs2-2.9.0", "code": "package filter;\n\nInterface ConditionalFileFilter; // Defines operations for conditional file filters.\nClass AgeFileFilter; // Filters files based on a cutoff time, can filter either newer files or files equal to or older.\nClass AndFileFilter; // A filter providing conditional AND logic across a list of file filters.\nClass CanExecuteFileFilter; // This filter accepts Files that can be executed.\nClass CanReadFileFilter; // This filter accepts Files that can be read.\nClass CanWriteFileFilter; // This filter accepts Files that can be written to.\nClass DirectoryFileFilter; // This filter accepts Files that are directories.\nClass EmptyFileFilter; // This filter accepts files or directories that are empty.\nClass FalseFileFilter; // A file filter that always returns false.\nClass FileFileFilter; // This filter accepts Files that are files (not directories).\nClass HiddenFileFilter; // This filter accepts Files that are hidden.\nClass NameFileFilter; // Filters file names for a certain name.\nClass NotFileFilter; // This filter produces a logical NOT of the filters specified.\nClass OrFileFilter; // A FileFilter providing conditional OR logic across a list of file filters.\nClass PrefixFileFilter; // Filters file names for a certain prefix.\nClass RegexFileFilter; // Filters files using supplied regular expression(s).\nClass SizeFileFilter; // Filters files based on size, can filter either smaller files or files equal to or larger than a given threshold.\nClass SizeRangeFileFilter; // Filter that accepts files whose size is >= minimum size and <= maximum size.\nClass SuffixFileFilter; // Filters files based on the suffix (what the file name ends with).\nClass SymbolicLinkFileFilter; // This filter accepts Files that are symbolic links.\nClass TrueFileFilter; // A file filter that always returns true.\nClass WildcardFileFilter; // Filters files using the supplied wildcards.\nEnum IOCase; // Enumeration of IO case sensitivity.\n", "des": "Implementations of org.apache.commons.vfs2.FileFilter."}
{"index": 511, "repo": "commons-vfs2-2.9.0", "code": "package function;\n\nInterface VfsConsumer<T>; // A Consumer that throws FileSystemException.\n", "des": "Functional interface types in the style of java.util.function."}
{"index": 512, "repo": "commons-vfs2-2.9.0", "code": "package impl;\n\nClass DecoratedFileObject; // Base class to build a fileObject decoration.\nClass DefaultFileContentInfo; // The default file content information.\nClass DefaultFileMonitor; // A polling FileMonitor implementation.\nClass DefaultFileReplicator; // A simple file replicator and temporary file store.\nClass DefaultFileSystemConfigBuilder; // Default options usable for all file systems.\nClass DefaultFileSystemManager; // The default file system manager implementation.\nClass DefaultProviderConfiguration; // Same as ProviderConfiguration but for the default provider.\nClass FileContentInfoFilenameFactory; // The FileContentInfoFilenameFactory.\nClass PrivilegedFileReplicator; // A file replicator that wraps another file replicator, performing the replication as a privileged action.\nClass ProviderConfiguration; // This class describes the configuration for a provider.\nClass StandardFileSystemManager; // A FileSystemManager that configures itself from an XML (Default: providers.xml) configuration file.\nClass SynchronizedFileObject; // This decorator synchronize all access to the FileObject.\nClass VFSClassLoader; // A class loader that can load classes and resources from a search path.\nClass VirtualFileName; // A simple Filename to hold the scheme for to be created virtual file system.\nClass VirtualFileProvider; // A virtual file system provider.\nClass VirtualFileSystem; // A logical file system, made up of set of junctions, or links, to files from other file systems.\n", "des": "The standard VFS implementation."}
{"index": 513, "repo": "commons-vfs2-2.9.0", "code": "package operations;\n\npackage operations.vcs; // VFS version control operations.\nInterface FileOperation; // A FileOperation is an object that brings an extra function to a FileObject.\nInterface FileOperationProvider; // FileOperationProvider is responsible for dealing with FileOperation's.\nInterface FileOperations; // FileOperations interface provides API to work with operations.\nClass AbstractFileOperation;\nClass AbstractFileOperationProvider;\nClass DefaultFileOperations;\n", "des": "VFS Operations handling."}
{"index": 514, "repo": "commons-vfs2-2.9.0", "code": "package vcs;\n\nInterface VcsAdd;\nInterface VcsCheckout;\nInterface VcsCommit;\nInterface VcsCommitListener;\nInterface VcsDelete;\nInterface VcsLog;\nInterface VcsLogEntryHandler;\nInterface VcsModifyListener;\nInterface VcsRevert; // Restores pristine working copy file and cancels all local modifications.\nInterface VcsUpdate;\nInterface VcsUpdateListener;\nClass VcsLogEntry;\nEnum VcsStatus;\n", "des": "VFS version control operations."}
{"index": 515, "repo": "commons-vfs2-2.9.0", "code": "package provider;\n\npackage provider.bzip2; // The BZIP2 File Provider\npackage provider.compressed; // The compressed file provider\npackage provider.ftp; // The FTP File Provider.\npackage provider.ftps; // The FTPS File Provider.\npackage provider.gzip; // The GZIP File Provider\npackage provider.hdfs; // The HDFS File Provider\npackage provider.http; // The HTTP File Provider\npackage provider.http4; // The HTTP4 File Provider\npackage provider.http4s; // The HTTP4S File Provider\npackage provider.http5; // The HTTP5 File Provider\npackage provider.http5s; // The HTTP5S File Provider\npackage provider.https; // The HTTPS File Provider\npackage provider.jar; // The Jar File Provider.\npackage provider.local; // The Local File Provider.\npackage provider.ram; // The RAM File Provider.\npackage provider.res; // The Resource File Provider\npackage provider.sftp; // The SFTP Provider.\npackage provider.tar; // The Tar File Provider.\npackage provider.temp; // The Temporary Filespace Provider.\npackage provider.url; // The Default File Provider, which wraps java.net.URL.\npackage provider.zip; // The Zip File Provider.\nInterface FileNameParser; // Provides methods to parse a file name into a FileName.\nInterface FileProvider; // A file provider.\nInterface FileReplicator; // Responsible for making local replicas of files.\nInterface LocalFileProvider; // A file provider which handles local files.\nInterface TemporaryFileStore; // Manages a repository of temporary local files.\nInterface VfsComponent; // This interface is used to manage the lifecycle of all VFS components.\nInterface VfsComponentContext; // Allows VFS components to access the services they need, such as the file replicator.\nClass AbstractFileName; // A default file name implementation.\nClass AbstractFileNameParser; // Provides methods to parse a file name into a FileName.\nClass AbstractFileObject<AFS extends AbstractFileSystem>; // A partial file object implementation.\nClass AbstractFileProvider; // A partial FileProvider implementation.\nClass AbstractFileSystem; // A partial FileSystem implementation.\nClass AbstractLayeredFileProvider; // A FileProvider that is layered on top of another, such as the contents of a zip or tar file.\n", "des": "The File Provider API, and utility classes."}
{"index": 516, "repo": "commons-vfs2-2.9.0", "code": "package bzip2;\n\nClass Bzip2FileObject; // the bzip2 file.\nClass Bzip2FileProvider; // Provides access to the content of bzip2 compressed files.\nClass Bzip2FileSystem; // Filesytem to handle compressed files using the bzip2 method.\n", "des": "The BZIP2 File Provider"}
{"index": 517, "repo": "commons-vfs2-2.9.0", "code": "package compressed;\n\nClass CompressedFileFileObject<FS extends CompressedFileFileSystem>; // A compressed file.\nClass CompressedFileFileProvider; // A file system provider for compressed files.\nClass CompressedFileFileSystem; // A read-only file system for compressed files.\n", "des": "The compressed file provider"}
{"index": 518, "repo": "commons-vfs2-2.9.0", "code": "package ftp;\n\nInterface FtpClient; // What VFS expects from an FTP client to provide.\nClass FtpClientFactory; // Create a FtpClient instance.\nClass FtpClientFactory.ConnectionFactory<C extends org.apache.commons.net.ftp.FTPClient,B extends FtpFileSystemConfigBuilder>; // Abstract Factory, used to configure different FTPClients.\nClass FtpClientFactory.FtpConnectionFactory; // Connection Factory, used to configure the FTPClient.\nClass FTPClientWrapper; // A wrapper to the FTPClient to allow automatic reconnect on connection loss.\nClass FtpFileNameParser; // Implementation for FTP.\nClass FtpFileObject; // An FTP file.\nClass FtpFileProvider; // A provider for FTP file systems.\nClass FtpFileSystem; // An FTP file system.\nClass FtpFileSystemConfigBuilder; // The config builder for various FTP configuration options.\nEnum FtpFileType; // The FTP file types.\n", "des": "The FTP File Provider."}
{"index": 519, "repo": "commons-vfs2-2.9.0", "code": "package ftps;\n\nClass FtpsClientFactory; // Create FTPSClient instances.\nClass FtpsFileProvider; // A provider for FTP file systems.\nClass FtpsFileSystem; // A FTPS file system.\nClass FtpsFileSystemConfigBuilder; // The configuration builder for various FTPS configuration options.\nEnum FtpsDataChannelProtectionLevel; // Protection level of the data channel in a FTPS communication.\nEnum FtpsMode; // Mode of the FTPS connection.\n", "des": "The FTPS File Provider."}
{"index": 520, "repo": "commons-vfs2-2.9.0", "code": "package gzip;\n\nClass GzipFileObject; // A Gzip file.\nClass GzipFileProvider; // Provides access to the content of Gzip files.\nClass GzipFileSystem; // A compressed file system using the Gzip method.\n", "des": "The GZIP File Provider"}
{"index": 521, "repo": "commons-vfs2-2.9.0", "code": "package hdfs;\n\nClass HdfsFileContentInfoFactory; // Creates FileContentInfo instances for HDFS.\nClass HdfsFileObject; // A VFS representation of an HDFS file.\nClass HdfsFileProvider; // FileProvider for HDFS files.\nClass HdfsFileSystem; // A VFS FileSystem that interacts with HDFS.\nClass HdfsFileSystemConfigBuilder; // Configuration settings for the HdfsFileSystem.\nClass HdfsRandomAccessContent; // Provides random access to content in an HdfsFileObject.\nEnum HdfsFileAttributes; // HDFS file content attributes.\n", "des": "The HDFS File Provider"}
{"index": 522, "repo": "commons-vfs2-2.9.0", "code": "package http;\n\nClass HttpClientFactory; // Create a HttpClient instance.\nClass HttpFileContentInfoFactory; // Creates FileContentInfo instances for HTTP.\nClass HttpFileNameParser; // Implementation for http.\nClass HttpFileObject<FS extends HttpFileSystem>; // A file object backed by Apache Commons HttpClient.\nClass HttpFileProvider; // An HTTP provider that uses commons-httpclient.\nClass HttpFileSystem; // An HTTP file system.\nClass HttpFileSystemConfigBuilder; // Configuration options for HTTP.\n", "des": "The HTTP File Provider"}
{"index": 523, "repo": "commons-vfs2-2.9.0", "code": "package http4;\n\nClass Http4FileContentInfoFactory; // Creates FileContentInfoFactory instances for http4 provider.\nClass Http4FileNameParser; // FileNameParser implementation for http4 provider, setting default port to 80.\nClass Http4FileObject<FS extends Http4FileSystem>; // A file object backed by Apache HttpComponents HttpClient.\nClass Http4FileProvider; // FileProvider implementation using HttpComponents HttpClient library.\nClass Http4FileSystem; // http4 file system.\nClass Http4FileSystemConfigBuilder; // Configuration options builder utility for http4 provider.\n", "des": "The HTTP4 File Provider"}
{"index": 524, "repo": "commons-vfs2-2.9.0", "code": "package http4s;\n\nClass Http4sFileNameParser; // FileNameParser implementation for http4s provider, setting default port to 443.\nClass Http4sFileProvider; // http4s provider that uses HttpComponents HttpClient.\n", "des": "The HTTP4S File Provider"}
{"index": 525, "repo": "commons-vfs2-2.9.0", "code": "package http5;\n\nClass Http5FileContentInfoFactory; // Creates FileContentInfoFactory instances for http5 provider.\nClass Http5FileNameParser; // FileNameParser implementation for http5 provider, setting default port to 80.\nClass Http5FileObject<FS extends Http5FileSystem>; // A file object backed by Apache HttpComponents HttpClient v5.\nClass Http5FileProvider; // FileProvider implementation using HttpComponents HttpClient v5 library.\nClass Http5FileSystem; // http5 file system.\nClass Http5FileSystemConfigBuilder; // Configuration options builder utility for http5 provider.\n", "des": "The HTTP5 File Provider"}
{"index": 526, "repo": "commons-vfs2-2.9.0", "code": "package http5s;\n\nClass Http5sFileNameParser; // FileNameParser implementation for http5s provider, setting default port to 443.\nClass Http5sFileProvider; // http5s provider that uses HttpComponents HttpClient.\n", "des": "The HTTP5S File Provider"}
{"index": 527, "repo": "commons-vfs2-2.9.0", "code": "package https;\n\nClass HttpsFileNameParser; // Implementation for https.\nClass HttpsFileProvider; // An HTTPS provider that uses commons-httpclient.\n", "des": "The HTTPS File Provider"}
{"index": 528, "repo": "commons-vfs2-2.9.0", "code": "package jar;\n\nClass JarFileObject; // A file in a Jar file system.\nClass JarFileProvider; // A file system provider for Jar files.\nClass JarFileSystem; // A read-only file system for Jar files.\nClass JarURLConnectionImpl; // A default URL connection that will work for most file systems.\n", "des": "The Jar File Provider."}
{"index": 529, "repo": "commons-vfs2-2.9.0", "code": "package local;\n\nClass DefaultLocalFileProvider; // A file system provider, which uses direct file access.\nClass GenericFileNameParser; // A general-purpose file name parser.\nClass LocalFile; // A file object implementation which uses direct file access.\nClass LocalFileName; // A local file URI.\nClass LocalFileNameParser; // A name parser.\nClass LocalFileSystem; // A local file system.\nClass WindowsFileName; // A local file URI.\nClass WindowsFileNameParser; // A parser for Windows file names.\n", "des": "The Local File Provider."}
{"index": 530, "repo": "commons-vfs2-2.9.0", "code": "package ram;\n\nClass RamFileObject; // A RAM File contains a single RAM FileData instance, it provides methods to access the data by implementing FileObject interface.\nClass RamFileOutputStream; // OutputStream to a RamFile.\nClass RamFileProvider; // RAM File Provider.\nClass RamFileRandomAccessContent; // RAM File Random Access Content.\nClass RamFileSystem; // A RAM File System.\nClass RamFileSystemConfigBuilder; // Config Builder for the RAM file system.\n", "des": "The RAM File Provider."}
{"index": 531, "repo": "commons-vfs2-2.9.0", "code": "package res;\n\nClass ResourceFileName; // A resource file URI.\nClass ResourceFileNameParser; // Slightly modified filename parser for resource URIs.\nClass ResourceFileProvider; // The Resource provider.\nClass ResourceFileSystemConfigBuilder; // The config BUILDER for various FTP configuration options.\n", "des": "The Resource File Provider"}
{"index": 532, "repo": "commons-vfs2-2.9.0", "code": "package sftp;\n\nInterface IdentityProvider; // Provides identity to a JSch.\nInterface IdentityRepositoryFactory; // Creates instances of JSch IdentityRepository.\nClass BytesIdentityInfo; // Structure for an identity based on byte arrays.\nClass IdentityInfo; // Structure for an identity based on Files.\nClass SftpClientFactory; // Create a JSch Session instance.\nClass SftpFileNameParser; // Implementation for SFTP.\nClass SftpFileObject; // An SFTP file.\nClass SftpFileProvider; // A provider for accessing files over SFTP.\nClass SftpFileSystem; // Represents the files on an SFTP server.\nClass SftpFileSystemConfigBuilder; // The config builder for various SFTP configuration options.\nClass SftpFileSystemConfigBuilder.ProxyType; // Proxy type.\nClass SftpStreamProxy; // Stream based proxy for JSch.\nClass TrustEveryoneUserInfo; // Helper class to trust a new host.\nClass UserIsOwnerPosixPermissions; // Pretends that the current user is always the owner and in the same group.\n", "des": "The SFTP Provider."}
{"index": 533, "repo": "commons-vfs2-2.9.0", "code": "package tar;\n\nClass TarFileObject; // A file in a Tar file system.\nClass TarFileProvider; // A file system provider for Tar files.\nClass TarFileSystem; // A read-only file system for Tar files.\nClass Tbz2FileProvider; // A file system provider for Tar files.\nClass TgzFileProvider; // A file system provider for Tar files.\n", "des": "The Tar File Provider."}
{"index": 534, "repo": "commons-vfs2-2.9.0", "code": "package temp;\n\nClass TemporaryFileProvider; // A provider for temporary files.\n", "des": "The Temporary Filespace Provider."}
{"index": 535, "repo": "commons-vfs2-2.9.0", "code": "package url;\n\nClass UrlFileName; // A URL FileName.\nClass UrlFileNameParser; // Implementation for any java.net.url based file system.\nClass UrlFileObject; // A FileObject implementation backed by a URL.\nClass UrlFileProvider; // A file provider backed by Java's URL API.\nClass UrlFileSystem; // A File system backed by Java's URL API.\n", "des": "The Default File Provider, which wraps java.net.URL."}
{"index": 536, "repo": "commons-vfs2-2.9.0", "code": "package zip;\n\nClass ZipFileObject; // A file in a ZIP file system.\nClass ZipFileProvider; // A file system provider for ZIP files.\nClass ZipFileSystem; // A read-only file system for ZIP and JAR files.\nClass ZipFileSystemConfigBuilder;\n", "des": "The Zip File Provider."}
{"index": 537, "repo": "commons-vfs2-2.9.0", "code": "package tasks;\n\nClass AbstractSyncTask; // An abstract file synchronization task.\nClass AbstractSyncTask.SourceInfo; // Information about a source file.\nClass CopyTask; // An Ant task that copies matching files.\nClass DeleteTask; // An Ant task that deletes matching files.\nClass MkdirTask; // An Ant task that creates a directory.\nClass MoveTask; // An Ant task that moves matching files.\nClass ShowFileTask; // An Ant task that writes the details of a file to Ant's log.\nClass SyncTask; // A task that synchronises the destination folder to look exactly like the source folder (or folders).\nClass VfsTask; // Base class for the VFS Ant tasks.\n", "des": "The VFS Ant Tasks."}
{"index": 538, "repo": "commons-vfs2-2.9.0", "code": "package util;\n\nInterface Cryptor;\nClass CombinedResources;\nClass CryptorFactory; // Factory to create an instance of a Cryptor.\nClass DefaultCryptor; // Allows passwords to be encrypted and decrypted.\nClass DelegatingFileSystemOptionsBuilder; // This class use reflection to set a configuration value using the fileSystemConfigBuilder associated the a scheme.\nClass EncryptUtil; // Allows passwords to be encrypted and decrypted.\nClass FileObjectUtils; // Utility methods for FileObject.\nClass Messages; // Formats messages.\nClass MonitorInputStream; // An InputStream that provides buffering and end-of-stream monitoring.\nClass MonitorOutputStream; // An OutputStream that provides buffering and end-of-stream monitoring.\nClass MonitorRandomAccessContent; // A RandomAccessContent that provides end-of-stream monitoring.\nClass Os; // Use Apache Commons Lang's SystemUtils.\nClass OsFamily; // Use Apache Commons Lang's SystemUtils.\nClass PosixPermissions; // UNIX permissions.\nClass RawMonitorInputStream; // An InputStream that provides end-of-stream monitoring.\nClass URIUtils; // The URI escape and character encoding and decoding utility.\nClass UserAuthenticatorUtils; // Helps with authentication.\nClass WeakRefFileListener; // Wraps a listener with a WeakReference.\nEnum PosixPermissions.Type; // Permission types.\nEnum RandomAccessMode; // An enumerated type representing the modes of a random access content.\n", "des": "Utility classes used by the VFS."}
{"index": 539, "repo": "commons-geometry-core-1.0", "code": "package core;\n\npackage core.internal; // This package contains utilities intended for internal use only.\npackage core.partitioning; // This package contains code related to partitioning of spaces by hyperplanes.\nInterface Embedding<P extends Point<P>,S extends Point<S>>; // This interface defines mappings between a space and one of its subspaces.\nInterface Point<P extends Point<P>>; // Interface representing a point in a mathematical space.\nInterface Region<P extends Point<P>>; // Interface representing a region in a space.\nInterface RegionEmbedding<P extends Point<P>,S extends Point<S>>; // Interface representing a geometric element that embeds a region in a subspace.\nInterface Sized; // Interface representing a geometric element with a size.\nInterface Spatial; // Interface representing a generic element in a mathematical space.\nInterface Transform<P extends Point<P>>; // Interface representing geometric transforms in a space, i.e.\nInterface Vector<V extends Vector<V>>; // Interface representing a vector in a vector space or displacement vectors in an affine space.\nEnum RegionLocation; // Enumeration containing the possible locations of a point with respect to a region.\n", "des": "This package contains the core interfaces and classes for commons-geometry."}
{"index": 540, "repo": "commons-geometry-core-1.0", "code": "package internal;\n\nInterface DoubleFunction1N<T>; // Represents a function that accepts a single double value and returns a result.\nInterface DoubleFunction2N<T>; // Represents a function that accepts two double values and returns a result.\nInterface DoubleFunction3N<T>; // Represents a function that accepts three double values and returns a result.\nClass HyperplaneSubsets; // Utility methods for HyperplaneSubset implementations.\nClass IteratorTransform<I,T>; // Class that wraps another iterator, converting each input iterator value into one or more output iterator values.\nClass SimpleTupleFormat; // Class for performing simple formatting and parsing of real number tuples.\nClass GeometryInternalError; // Exception thrown when something that should not happen does happen.\n", "des": "This package contains utilities intended for internal use only."}
{"index": 541, "repo": "commons-geometry-core-1.0", "code": "package partitioning;\n\npackage partitioning.bsp; // This package contains classes related to Binary Space Partitioning (BSP) trees.\nInterface BoundarySource<C extends HyperplaneConvexSubset<? extends Point<?>>>; // Interface representing an object that can produce region boundaries as a stream of hyperplane convex subsets.\nInterface EmbeddingHyperplane<P extends Point<P>,S extends Point<S>>; // Hyperplane that also embeds a subspace.\nInterface Hyperplane<P extends Point<P>>; // Interface representing a hyperplane, which in a space of dimension n is a subspace of dimension n - 1.\nInterface HyperplaneBoundedRegion<P extends Point<P>>; // Interface representing regions with boundaries defined by hyperplanes or portions of hyperplanes.\nInterface HyperplaneConvexSubset<P extends Point<P>>; // Extension of the HyperplaneSubset interface with the additional restriction that instances represent convex regions of space.\nInterface HyperplaneSubset<P extends Point<P>>; // Interface representing a subset of the points lying in a hyperplane.\nInterface Splittable<P extends Point<P>,S extends Splittable<P,S>>; // Interface representing objects that can be split by Hyperplanes.\nClass AbstractConvexHyperplaneBoundedRegion<P extends Point<P>,S extends HyperplaneConvexSubset<P>>; // Base class for convex hyperplane-bounded regions.\nClass AbstractConvexHyperplaneBoundedRegion.ConvexRegionBoundaryBuilder<P extends Point<P>,S extends HyperplaneConvexSubset<P>>; // Internal class encapsulating the logic for building convex region boundaries from collections of hyperplanes.\nClass AbstractHyperplane<P extends Point<P>>; // Base class for hyperplane implementations.\nClass BoundaryList<P extends Point<P>,S extends HyperplaneConvexSubset<P>>; // Simple implementation of BoundarySource containing boundaries stored in a list.\nClass Split<T>; // Class containing the result of splitting an object with a hyperplane.\nEnum HyperplaneLocation; // Enumeration containing possible locations of a point with respect to a hyperplane.\nEnum SplitLocation; // Enumeration representing the location of a split object with respect to its splitting hyperplane.\n", "des": "This package contains code related to partitioning of spaces by hyperplanes."}
{"index": 542, "repo": "commons-geometry-core-1.0", "code": "package bsp;\n\nInterface AbstractBSPTree.SubtreeInitializer<N extends AbstractBSPTree.AbstractNode<?,?>>; // Interface used to initialize newly created BSP subtrees, consisting of a single parent node and two child nodes.\nInterface BSPSubtree<P extends Point<P>,N extends BSPTree.Node<P,N>>; // Interface for types that form the root of BSP subtrees.\nInterface BSPTree<P extends Point<P>,N extends BSPTree.Node<P,N>>; // Interface for Binary Space Partitioning (BSP) trees.\nInterface BSPTree.Node<P extends Point<P>,N extends BSPTree.Node<P,N>>; // Interface for Binary Space Partitioning (BSP) tree nodes.\nInterface BSPTreeVisitor<P extends Point<P>,N extends BSPTree.Node<P,N>>; // Interface for visiting the nodes in a BSPTree or BSPSubtree.\nClass AbstractBSPTree<P extends Point<P>,N extends AbstractBSPTree.AbstractNode<P,N>>; // Abstract class for Binary Space Partitioning (BSP) tree implementations.\nClass AbstractBSPTree.AbstractNode<P extends Point<P>,N extends AbstractBSPTree.AbstractNode<P,N>>; // Abstract implementation of BSPTree.Node.\nClass AbstractBSPTreeMergeOperator<P extends Point<P>,N extends AbstractBSPTree.AbstractNode<P,N>>; // Class containing the basic algorithm for merging two AbstractBSPTree instances.\nClass AbstractPartitionedRegionBuilder<P extends Point<P>,N extends AbstractRegionBSPTree.AbstractRegionNode<P,N>>; // Class encapsulating logic for building regions by inserting boundaries into a BSP tree containing structural cuts, i.e.\nClass AbstractRegionBSPTree<P extends Point<P>,N extends AbstractRegionBSPTree.AbstractRegionNode<P,N>>; // Abstract BSPTree specialized for representing regions of space.\nClass AbstractRegionBSPTree.AbstractRegionNode<P extends Point<P>,N extends AbstractRegionBSPTree.AbstractRegionNode<P,N>>; // BSPTree.Node implementation for use with AbstractRegionBSPTrees.\n", "des": "This package contains classes related to Binary Space Partitioning (BSP) trees."}
{"index": 543, "repo": "spring-mobile-device-1.1.5.RELEASE", "code": "package device;\n\npackage device.site; // Ability for the user to specify whether they prefer the mobile or normal site.\npackage device.switcher; // Mobile site switcher for Spring MVC-based web apps.\npackage device.util; // Spring Mobile utilities\npackage device.view; // Device aware view resolution for Spring MVC-based web apps.\nInterface Device; // A model for the user agent or device that submitted the current request.\nInterface DeviceResolver; // Service interface for resolving Devices that originate web requests with the application.\nClass DeviceHandlerMethodArgumentResolver; // Spring MVC HandlerMethodArgumentResolver that resolves @Controller MethodParameters of type Device to the value of the web request's current device attribute.\nClass DeviceResolverHandlerInterceptor; // A Spring MVC interceptor that resolves the Device that originated the web request before any request handler is invoked.\nClass DeviceResolverRequestFilter; // A Servlet 2.3 Filter that resolves the Device that originated the web request.\nClass DeviceUtils; // Static helper for accessing request-scoped Device values.\nClass DeviceWebArgumentResolver; // Spring MVC WebArgumentResolver that resolves @Controller MethodParameters of type Device to the value of the web request's current device attribute.\nClass LiteDeviceResolver; // A \"lightweight\" device resolver algorithm based on Wordpress's Mobile pack.\nEnum DevicePlatform; // Enumeration for the platform of device that has been resolved\nEnum DeviceType; // Enumeration for the type of device that has been resolved\n", "des": "Public API for device resolution."}
{"index": 544, "repo": "spring-mobile-device-1.1.5.RELEASE", "code": "package site;\n\nInterface SitePreferenceHandler; // Service interface for site preference management.\nInterface SitePreferenceRepository; // A strategy for storing a user's site preference.\nClass CookieSitePreferenceRepository; // SitePreferenceRepository implementation that stores user preference in a Cookie.\nClass SitePreferenceHandlerInterceptor; // A Spring MVC interceptor that, on preHandle, delegates to a SitePreferenceHandler to resolve the SitePreference of the user that originated the web request.\nClass SitePreferenceHandlerMethodArgumentResolver; // Spring MVC HandlerMethodArgumentResolver that resolves @Controller MethodParameters of type SitePreference to the value of the web request's current site preference attribute.\nClass SitePreferenceRequestFilter; // A Servlet 2.3 Filter that delegates to a SitePreferenceHandler to resolve the SitePreference of the user that originated the web request.\nClass SitePreferenceUtils; // Static helper for accessing request-scoped SitePreference values.\nClass SitePreferenceWebArgumentResolver; // Spring MVC WebArgumentResolver that resolves @Controller MethodParameters of type SitePreference to the value of the web request's current site preference attribute.\nClass StandardSitePreferenceHandler; // A helper that resolves the user's site preference and makes it available as a request attribute.\nEnum SitePreference; // Possible site preference values.\n", "des": "Ability for the user to specify whether they prefer the mobile or normal site."}
{"index": 545, "repo": "spring-mobile-device-1.1.5.RELEASE", "code": "package switcher;\n\nInterface SiteSwitcherHandler;\nInterface SiteUrlFactory; // Strategy for constructing different site URLs, such as the 'mobile' site URL.\nClass AbstractSitePathUrlFactory; // Abstract SiteUrlFactory implementation that differentiates each site by the HTTP request path.\nClass AbstractSiteUrlFactory; // Abstract implementation of the SiteUrlFactory interface.\nClass MobileSitePathUrlFactory; // Path based site URL factory implementation that handles requests for the \"mobile\" site.\nClass NormalSitePathUrlFactory; // Path based site URL factory implementation that handles requests for the \"normal\" site.\nClass SiteSwitcherHandlerInterceptor; // A Spring MVC interceptor that switches the user between the mobile, normal, and tablet sites by employing a specific switching algorithm.\nClass SiteSwitcherRequestFilter; // A Servlet 2.3 Filter that switches the user between the mobile and normal site by employing a specific switching algorithm.\nClass StandardSiteSwitcherHandler;\nClass StandardSiteUrlFactory; // Site URL factory implementation that differentiates each site by the value of the server name field.\nClass TabletSitePathUrlFactory; // Path based site URL factory implementation that handles requests for the \"tablet\" site.\n", "des": "Mobile site switcher for Spring MVC-based web apps."}
{"index": 546, "repo": "spring-mobile-device-1.1.5.RELEASE", "code": "package util;\n\nClass ResolverUtils; // Static helper for determining how to handle the combination of device and site preference.\n", "des": "Spring Mobile utilities"}
{"index": 547, "repo": "spring-mobile-device-1.1.5.RELEASE", "code": "package view;\n\nClass AbstractDeviceDelegatingViewResolver; // Abstract ViewResolver implementation, providing a device aware ViewResolver wrapper that delegates to another view resolver implementation, allowing for resolution of device specific view names without the need for a dedicated mapping to be defined for each view.\nClass LiteDeviceDelegatingViewResolver; // A lightweight AbstractDeviceDelegatingViewResolver for adjusting a view based on the combination of resolved Device and specified SitePreference.\n", "des": "Device aware view resolution for Spring MVC-based web apps."}
{"index": 548, "repo": "commons-rdf-rdf4j-0.5.0", "code": "package rdf4j;\n\npackage rdf4j.experimental; // Experimental Commons RDF RDF4J implementations.\nInterface ClosableIterable<T>; // An Iterable which should be AutoCloseable.close()d after use.\nInterface RDF4JBlankNode; // Marker interface for RDF4J implementations of Commons RDF BlankNode.\nInterface RDF4JBlankNodeOrIRI; // Marker interface for RDF4J implementations of Commons RDF BlankNodeOrIRI (e.g.\nInterface RDF4JDataset; // Marker interface for RDF4J implementations of Dataset.\nInterface RDF4JGraph; // Marker interface for RDF4J implementations of Graph.\nInterface RDF4JGraphLike<T extends TripleLike>; // Marker interface for RDF4J implementations of GraphLike.\nInterface RDF4JIRI; // Marker interface for RDF4J implementations of Commons RDF IRI.\nInterface RDF4JLiteral; // Marker interface for RDF4J implementations of Commons RDF Literal.\nInterface RDF4JQuad; // Marker interface for RDF4J implementations of Quad.\nInterface RDF4JTerm; // Marker interface for RDF4J implementations of RDFTerm.\nInterface RDF4JTriple; // Marker interface for RDF4J implementations of Triple.\nInterface RDF4JTripleLike; // Marker interface for RDF4J implementations of TripleLike statements.\nClass RDF4J; // RDF4J implementation of RDF.\nEnum RDF4J.Option;\n", "des": "Commons RDF integration with RDF4J."}
{"index": 549, "repo": "commons-rdf-rdf4j-0.5.0", "code": "package experimental;\n\nClass RDF4JParser; // RDF4J-based parser.\n", "des": "Experimental Commons RDF RDF4J implementations."}
{"index": 550, "repo": "hadoop-common-3.3.4", "code": "package conf;\n\nInterface Configurable; // Something that may be configured with a Configuration.\nInterface Reconfigurable; // Something whose Configuration can be changed at run time.\nClass ConfigRedactor; // Tool for redacting sensitive information when displaying config parameters.\nClass Configuration; // Provides access to configuration parameters.\nClass Configuration.DeprecationDelta; // A pending addition to the global set of deprecated keys.\nClass Configuration.IntegerRanges; // A class that represents a set of positive integer ranges.\nClass Configured; // Base class for things that may be configured with a Configuration.\nClass ReconfigurableBase; // Utility base class for implementing the Reconfigurable interface.\nClass ReconfigurationServlet; // A servlet for changing a node's configuration.\nClass ReconfigurationUtil;\nClass ReconfigurationUtil.PropertyChange;\nClass StorageSize; // A class that contains the numeric value and the unit of measure.\nEnum StorageUnit; // Class that maintains different forms of Storage Units.\nClass ConfServlet.BadFormatException;\nClass ReconfigurationException; // Exception indicating that configuration property cannot be changed at run time.\n", "des": "Configuration of system parameters."}
{"index": 551, "repo": "hadoop-common-3.3.4", "code": "package key;\n\nInterface KeyProviderCryptoExtension.CryptoExtension; // CryptoExtension is a type of Extension that exposes methods to generate EncryptedKeys and to decrypt the same.\nInterface KeyProviderDelegationTokenExtension.DelegationTokenExtension; // DelegationTokenExtension is a type of Extension that exposes methods needed to work with Delegation Tokens.\nInterface KeyProviderExtension.Extension; // A marker interface for the KeyProviderExtension subclass implement.\nClass CachingKeyProvider; // A KeyProviderExtension implementation providing a short lived cache for KeyVersions and Metadatato avoid burst of requests to hit the underlying KeyProvider.\nClass JavaKeyStoreProvider.Factory; // The factory to create JksProviders, which is used by the ServiceLoader.\nClass JavaKeyStoreProvider.KeyMetadata; // An adapter between a KeyStore Key and our Metadata.\nClass KeyProvider; // A provider of secret key material for Hadoop applications.\nClass KeyProvider.KeyVersion; // The combination of both the key version name and the key material.\nClass KeyProvider.Metadata; // Key metadata that is associated with the key.\nClass KeyProvider.Options; // Options when creating key objects.\nClass KeyProviderCryptoExtension.EncryptedKeyVersion; // An encrypted encryption key (EEK) and related information.\nClass KeyProviderDelegationTokenExtension; // A KeyProvider extension with the ability to add a renewer's Delegation Tokens to the provided Credentials.\nClass KeyProviderExtension<E extends KeyProviderExtension.Extension>; // This is a utility class used to extend the functionality of KeyProvider, that takes a KeyProvider and an Extension.\nClass KeyProviderFactory; // A factory to create a list of KeyProvider based on the path given in a Configuration.\nClass KeyShell; // This program is the CLI utility for the KeyProvider facilities in Hadoop.\nClass UserProvider.Factory;\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 552, "repo": "hadoop-common-3.3.4", "code": "package fs;\n\npackage fs.audit; // Public classes for adding information to any auditing information picked up by filesystem clients.\npackage fs.http; // Filesystem implementations that allow Hadoop to read directly from HTTP / HTTPS endpoints.\npackage fs.protocolPB; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage fs.sftp; // SFTP FileSystem package.\npackage fs.statistics; // This package contains support for statistic collection and reporting.\nInterface Abortable; // Abort data being written to a stream, so that close() does not write the data.\nInterface Abortable.AbortableResult; // Interface for the result of aborts; allows subclasses to extend (IOStatistics etc) or for future enhancements if ever needed.\nInterface BatchedRemoteIterator.BatchedEntries<E>;\nInterface BatchListingOperations; // Interface filesystems MAY implement to offer a batched list.\nInterface BlockStoragePolicySpi; // A storage policy specifies the placement of block replicas on specific storage types.\nInterface ByteBufferPositionedReadable; // Implementers of this interface provide a positioned read API that writes to a ByteBuffer rather than a byte[].\nInterface ByteBufferReadable; // Implementers of this interface provide a read API that writes to a ByteBuffer, not a byte[].\nInterface CanSetDropBehind;\nInterface CanSetReadahead;\nInterface CanUnbuffer; // FSDataInputStreams implement this interface to indicate that they can clear their buffers on request.\nInterface DelegationTokenRenewer.Renewable; // The renewable interface used by the renewer.\nInterface EtagSource; // An optional interface for FileStatus subclasses to implement to provide access to etags.\nInterface FSBuilder<S,B extends FSBuilder<S,B>>; // The base interface which various FileSystem FileContext Builder interfaces can extend, and which underlying implementations will then implement.\nInterface FsConstants; // FileSystem related constants.\nInterface FSProtos.FileStatusProtoOrBuilder;\nInterface FSProtos.FsPermissionProtoOrBuilder;\nInterface FSProtos.LocalFileSystemPathHandleProtoOrBuilder;\nInterface FutureDataInputStreamBuilder; // Builder for input streams and subclasses whose return value is actually a completable future: this allows for better asynchronous operation.\nInterface GetSpaceUsed;\nInterface GlobalStorageStatistics.StorageStatisticsProvider; // A callback API for creating new StorageStatistics instances.\n", "des": "An abstract file system API."}
{"index": 553, "repo": "hadoop-common-3.3.4", "code": "package audit;\n\nClass AuditStatisticNames; // Statistic Names for Auditing.\nClass CommonAuditContext; // The common audit context is a map of common context information which can be used with any audit span.\n", "des": "Public classes for adding information to any auditing information picked up by filesystem clients."}
{"index": 554, "repo": "hadoop-common-3.3.4", "code": "package http;\n\nClass HttpFileSystem; // A Filesystem that reads from HTTP endpoint.\nClass HttpsFileSystem; // A Filesystem that reads from HTTPS endpoint.\n", "des": "Filesystem implementations that allow Hadoop to read directly from HTTP / HTTPS endpoints."}
{"index": 555, "repo": "hadoop-common-3.3.4", "code": "package protocolPB;\n\nClass PBHelper; // Utility methods aiding conversion of fs data structures.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 556, "repo": "hadoop-common-3.3.4", "code": "package sftp;\n\nClass SFTPFileSystem; // SFTP FileSystem.\n", "des": "SFTP FileSystem package."}
{"index": 557, "repo": "hadoop-common-3.3.4", "code": "package statistics;\n\nInterface DurationTracker; // Interface to be implemented by objects which can track duration.\nInterface DurationTrackerFactory; // Interface for a source of duration tracking.\nInterface IOStatistics; // IO Statistics.\nInterface IOStatisticsAggregator; // Interface exported by classes which support aggregation of IOStatistics.\nInterface IOStatisticsSource; // A source of IO statistics.\nClass BufferedIOStatisticsInputStream; // An extension of BufferedInputStream which implements IOStatisticsSource and forwards requests for the IOStatistics to the wrapped stream.\nClass BufferedIOStatisticsOutputStream; // An extension of BufferedOutputStream which implements IOStatisticsSource and forwards requests for the IOStatistics to the wrapped stream.\nClass DurationStatisticSummary; // Summary of duration tracking statistics as extracted from an IOStatistics instance.\nClass IOStatisticsLogging; // Utility operations convert IO Statistics sources/instances to strings, especially for robustly logging.\nClass IOStatisticsSnapshot; // Snapshot of statistics from a different source.\nClass IOStatisticsSupport; // Support for working with IOStatistics.\nClass MeanStatistic; // A mean statistic represented as the sum and the sample count; the mean is calculated on demand.\nClass StoreStatisticNames; // Common statistic names for object store operations..\nClass StreamStatisticNames; // These are common statistic names.\n", "des": "This package contains support for statistic collection and reporting."}
{"index": 558, "repo": "hadoop-common-3.3.4", "code": "package lib;\n\nClass StaticUserWebFilter; // Provides a servlet filter that pretends to authenticate a fake user (Dr.Who) so that the web UI is usable for a secure cluster without authentication.\nClass StaticUserWebFilter.StaticUserFilter;\n", "des": "This package provides user-selectable (via configuration) classes that add functionality to the web UI."}
{"index": 559, "repo": "hadoop-common-3.3.4", "code": "package io;\n\npackage io.serializer; // This package provides a mechanism for using different serialization frameworks in Hadoop.\nInterface ByteBufferPool;\nInterface Closeable; // use java.io.Closeable\nInterface MapFile.Reader.Option;\nInterface MapFile.Writer.Option;\nInterface RawComparator<T>; // A Comparator that operates directly on byte representations of objects.\nInterface ReadaheadPool.ReadaheadRequest; // An outstanding readahead request that has been submitted to the pool.\nInterface SequenceFile.Reader.Option; // A tag interface for all of the Reader options\nInterface SequenceFile.Sorter.RawKeyValueIterator; // The interface to iterate over raw keys/values of SequenceFiles.\nInterface SequenceFile.ValueBytes; // The interface to 'raw' values of SequenceFiles.\nInterface SequenceFile.Writer.Option;\nInterface Stringifier<T>; // Stringifier interface offers two methods to convert an object to a string representation and restore the object given its string representation.\nInterface Writable; // A serializable object which implements a simple, efficient, serialization protocol, based on DataInput and DataOutput.\nInterface WritableComparable<T>; // A Writable which is also Comparable.\nInterface WritableFactory; // A factory for a class of Writable.\nClass AbstractMapWritable; // Abstract base class for MapWritable and SortedMapWritable Unlike org.apache.nutch.crawl.MapWritable, this class allows creation of MapWritable<Writable, MapWritable> so the CLASS_TO_ID and ID_TO_CLASS maps travel with the class instead of being static.\nClass ArrayFile; // A dense file-based mapping from integers to values.\nClass ArrayFile.Reader; // Provide access to an existing array file.\nClass ArrayFile.Writer; // Write a new array file.\nClass ArrayPrimitiveWritable; // This is a wrapper class.\nClass ArrayWritable; // A Writable for arrays containing instances of a class.\nClass BinaryComparable; // Interface supported by WritableComparable types supporting ordering/permutation by a representative set of bytes.\nClass BloomMapFile; // This class extends MapFile and provides very much the same functionality.\nClass BloomMapFile.Reader;\nClass BloomMapFile.Writer;\nClass BooleanWritable; // A WritableComparable for booleans.\nClass BooleanWritable.Comparator; // A Comparator optimized for BooleanWritable.\n", "des": "Generic i/o code for use when reading and writing data to the network, to databases, and to files."}
{"index": 560, "repo": "hadoop-common-3.3.4", "code": "package serializer;\n\npackage serializer.avro; // This package provides Avro serialization in Hadoop.\nClass JavaSerialization; // An experimental Serialization for Java Serializable classes.\nClass JavaSerializationComparator<T extends Serializable & Comparable<T>>; // A RawComparator that uses a JavaSerialization Deserializer to deserialize objects that are then compared via their Comparable interfaces.\nClass WritableSerialization; // A Serialization for Writables that delegates to Writable.write(java.io.DataOutput) and Writable.readFields(java.io.DataInput).\n", "des": "This package provides a mechanism for using different serialization frameworks in Hadoop."}
{"index": 561, "repo": "hadoop-common-3.3.4", "code": "package avro;\n\nInterface AvroReflectSerializable; // Tag interface for Avro 'reflect' serializable classes.\nClass AvroRecord;\nClass AvroRecord.Builder; // RecordBuilder for AvroRecord instances.\nClass AvroReflectSerialization; // Serialization for Avro Reflect classes.\nClass AvroSerialization<T>; // Base class for providing serialization to Avro types.\nClass AvroSpecificSerialization; // Serialization for Avro Specific classes.\n", "des": "This package provides Avro serialization in Hadoop."}
{"index": 562, "repo": "hadoop-common-3.3.4", "code": "package metrics2;\n\npackage metrics2.annotation; // Annotation interfaces for metrics instrumentation\npackage metrics2.filter; // Builtin metrics filters (to be used in metrics config files)\npackage metrics2.lib; // A collection of library classes for implementing metrics sources\npackage metrics2.sink; // Builtin metrics sinks\npackage metrics2.util; // General helpers for implementing source and sinks\nInterface MetricsCollector; // The metrics collector interface\nInterface MetricsInfo; // Interface to provide immutable metainfo for metrics.\nInterface MetricsPlugin; // The plugin interface for the metrics framework\nInterface MetricsRecord; // An immutable snapshot of metrics with a timestamp\nInterface MetricsSink; // The metrics sink interface.\nInterface MetricsSource; // The source of metrics information.\nInterface MetricsSystem.Callback; // The metrics system callback interface (needed for proxies.)\nInterface MetricsSystemMXBean; // The JMX interface to the metrics system\nInterface MetricsVisitor; // A visitor interface for metrics\nClass AbstractMetric; // The immutable metric\nClass MetricsFilter; // The metrics filter interface.\nClass MetricsJsonBuilder; // Build a JSON dump of the metrics.\nClass MetricsRecordBuilder; // The metrics record builder interface\nClass MetricsSystem; // The metrics system interface.\nClass MetricsSystem.AbstractCallback; // Convenient abstract class for implementing callback interface\nClass MetricsTag; // Immutable tag for metrics (for grouping on host/queue/username etc.)\nClass MetricStringBuilder; // Build a string dump of the metrics.\nEnum MetricType;\nClass MetricsException; // A general metrics exception wrapper\n", "des": "Metrics 2.0"}
{"index": 563, "repo": "hadoop-common-3.3.4", "code": "package annotation;\n\nEnum Metric.Type;\nAnnotation Type Metric; // Annotation interface for a single metric used to annotate a field or a method in the class.\nAnnotation Type Metrics; // Annotation interface for a group of metrics\n", "des": "Annotation interfaces for metrics instrumentation"}
{"index": 564, "repo": "hadoop-common-3.3.4", "code": "package filter;\n\nClass GlobFilter; // A glob pattern filter for metrics.\nClass RegexFilter; // A regex pattern filter for metrics\n", "des": "Builtin metrics filters (to be used in metrics config files)"}
{"index": 565, "repo": "hadoop-common-3.3.4", "code": "package lib;\n\nClass Interns; // Helpers to create interned metrics info.\nClass MetricsRegistry; // An optional metrics registry class for creating and maintaining a collection of MetricsMutables, making writing metrics source easier.\nClass MutableCounter; // The mutable counter (monotonically increasing) metric interface\nClass MutableCounterInt; // A mutable int counter for implementing metrics sources\nClass MutableCounterLong; // A mutable long counter\nClass MutableGauge; // The mutable gauge metric interface\nClass MutableGaugeFloat; // A mutable float gauge.\nClass MutableGaugeInt; // A mutable int gauge\nClass MutableGaugeLong; // A mutable long gauge\nClass MutableMetric; // The mutable metric interface\nClass MutableQuantiles; // Watches a stream of long values, maintaining online estimates of specific quantiles with provably low error bounds.\nClass MutableRate; // A convenient mutable metric for throughput measurement\nClass MutableRates; // Helper class to manage a group of mutable rate metrics This class synchronizes all accesses to the metrics it contains, so it should not be used in situations where there is high contention on the metrics.\nClass MutableRatesWithAggregation; // Helper class to manage a group of mutable rate metrics.\nClass MutableRollingAverages; // This class maintains a group of rolling average metrics.\nClass MutableStat; // A mutable metric with stats.\nEnum DefaultMetricsSystem; // The default metrics system singleton.\n", "des": "A collection of library classes for implementing metrics sources"}
{"index": 566, "repo": "hadoop-common-3.3.4", "code": "package sink;\n\nClass FileSink; // A metrics sink that writes to a file\nClass GraphiteSink; // A metrics sink that writes to a Graphite server\nClass GraphiteSink.Graphite;\nClass PrometheusMetricsSink; // Metrics sink for prometheus exporter.\nClass RollingFileSystemSink; // This class is a metrics sink that uses FileSystem to write the metrics logs.\nClass StatsDSink; // A metrics sink that writes metrics to a StatsD daemon.\nClass StatsDSink.StatsD; // Class that sends UDP packets to StatsD daemon.\n", "des": "Builtin metrics sinks"}
{"index": 567, "repo": "hadoop-common-3.3.4", "code": "package util;\n\nInterface QuantileEstimator;\nClass MBeans; // This util class provides a method to register an MBean using our standard naming convention as described in the doc for {link MBeans.register(String, String, Object).\nClass MetricsCache; // A metrics cache for sinks that don't support sparse updates.\nClass MetricsCache.Record; // Cached record\nClass SampleStat.MinMax; // Helper to keep running min/max\nClass Servers; // Helpers to handle server addresses\n", "des": "General helpers for implementing source and sinks"}
{"index": 568, "repo": "hadoop-common-3.3.4", "code": "package net;\n\nInterface DNSToSwitchMapping; // An interface that must be implemented to allow pluggable DNS-name/IP-address to RackID resolvers.\nInterface DomainNameResolver; // This interface provides methods for the failover proxy to get IP addresses of the associated servers (NameNodes, RBF routers etc).\nInterface InnerNode.Factory<N extends org.apache.hadoop.net.InnerNode>;\nClass AbstractDNSToSwitchMapping; // This is a base class for DNS to Switch mappings.\nClass CachedDNSToSwitchMapping; // A cached implementation of DNSToSwitchMapping that takes an raw DNSToSwitchMapping and stores the resolved network location in a cache.\nClass DNSDomainNameResolver; // DNSDomainNameResolver wraps up the default DNS service for forward/reverse DNS lookup.\nClass InnerNodeImpl; // InnerNode represents a switch/router of a data center or rack.\nClass InnerNodeImpl.Factory;\nClass ScriptBasedMapping; // This class implements the DNSToSwitchMapping interface using a script configured via the CommonConfigurationKeysPublic.NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY option.\nClass ScriptBasedMapping.RawScriptBasedMapping; // This is the uncached script mapping that is fed into the cache managed by the superclass CachedDNSToSwitchMapping\nClass SocksSocketFactory; // Specialized SocketFactory to create sockets with a SOCKS proxy\nClass StandardSocketFactory; // Specialized SocketFactory to create sockets with a SOCKS proxy\nClass TableMapping; // Simple DNSToSwitchMapping implementation that reads a 2 column text file.\nClass ConnectTimeoutException; // Thrown by NetUtils.connect(java.net.Socket, java.net.SocketAddress, int) if it times out while connecting to the remote host.\nClass NetworkTopology.InvalidTopologyException;\n", "des": "Network-related classes."}
{"index": 569, "repo": "hadoop-common-3.3.4", "code": "package alias;\n\nClass BouncyCastleFipsKeyStoreProvider.Factory; // The factory to create JksProviders, which is used by the ServiceLoader.\nClass CredentialProvider; // A provider of credentials or password for Hadoop applications.\nClass CredentialProvider.CredentialEntry; // The combination of both the alias and the actual credential value.\nClass CredentialProviderFactory; // A factory to create a list of CredentialProvider based on the path given in a Configuration.\nClass CredentialShell; // This program is the CLI utility for the CredentialProvider facilities in Hadoop.\nClass CredentialShell.PasswordReader; // To facilitate testing since Console is a final class.\nClass JavaKeyStoreProvider.Factory; // The factory to create JksProviders, which is used by the ServiceLoader.\nClass LocalBouncyCastleFipsKeyStoreProvider.Factory; // The factory to create KeyStore Providers, which is used by the ServiceLoader.\nClass LocalJavaKeyStoreProvider.Factory; // The factory to create JksProviders, which is used by the ServiceLoader.\nClass UserProvider.Factory;\n", "des": "Provides the hadoop credential provider API."}
{"index": 570, "repo": "hadoop-common-3.3.4", "code": "package server;\n\nClass ProxyUserAuthenticationFilter; // AuthenticationFilter which adds support to perform operations using end user instead of proxy user.\nClass ProxyUserAuthenticationFilterInitializer; // Filter initializer to initialize ProxyUserAuthenticationFilter which adds support to perform operations using end user instead of proxy user.\n", "des": "Provides the server-side framework for authentication."}
{"index": 571, "repo": "hadoop-common-3.3.4", "code": "package launcher;\n\nInterface IrqHandler.Interrupted; // Callback issues on an interrupt.\nInterface LaunchableService; // An interface which services can implement to have their execution managed by the ServiceLauncher.\nInterface LauncherArguments; // Standard launcher arguments.\nInterface LauncherExitCodes; // Common Exit codes.\nClass AbstractLaunchableService; // Subclass of AbstractService that provides basic implementations of the LaunchableService methods.\nClass HadoopUncaughtExceptionHandler; // This class is intended to be installed by calling Thread.setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler) in the main entry point.\nClass InterruptEscalator.ServiceForcedShutdown; // Forced shutdown runnable.\nClass IrqHandler.InterruptData; // Interrupt data to pass on.\nClass ServiceLauncher<S extends Service>; // A class to launch any YARN service by name.\nClass ServiceLauncher.MinimalGenericOptionsParser; // A generic options parser which does not parse any of the traditional Hadoop options.\nClass ServiceLaunchException; // A service launch exception that includes an exit code.\n", "des": "This package contains classes, interfaces and exceptions to launch YARN services from the command line."}
{"index": 572, "repo": "hadoop-common-3.3.4", "code": "package util;\n\npackage util.functional; // Support for functional programming within the Hadoop APIs.\nInterface CleanerUtil.BufferCleaner; // Pass in an implementation of this interface to cleanup ByteBuffers.\nInterface ExitCodeProvider; // Get the exit code of an exception.\nInterface GcTimeMonitor.GcTimeAlertHandler; // The user can provide an instance of a class implementing this interface when initializing a GcTimeMonitor to receive alerts when GC time percentage exceeds the specified threshold.\nInterface IdentityHashStore.Visitor<K,V>;\nInterface IPList;\nInterface LightWeightCache.Entry; // Entries of LightWeightCache.\nInterface LightWeightGSet.LinkedElement; // Elements of LightWeightGSet.\nInterface Progressable; // A facility for reporting progress.\nInterface Shell.CommandExecutor;\nInterface Tool; // A tool interface that supports handling of generic command-line options.\nClass ApplicationClassLoader; // A URLClassLoader for application isolation.\nClass AutoCloseableLock; // This is a wrap class of a ReentrantLock.\nClass BasicDiskValidator; // BasicDiskValidator is a wrapper around DiskChecker.\nClass CacheableIPList; // CacheableIPList loads a list of subnets from a file.\nClass CloseableReferenceCount; // A closeable object that maintains a reference count.\nClass CombinedIPList; // Util class to stores ips/hosts/subnets.\nClass CombinedIPWhiteList;\nClass ComparableVersion; // Generic implementation of version comparison.\nClass DurationInfo; // A duration with logging of final state at info or debug in the close() call.\nClass FastNumberFormat; // Fast thread-safe version of NumberFormat\nClass FileBasedIPList; // FileBasedIPList loads a list of subnets in CIDR format and ip addresses from a file.\nClass FindClass; // This entry point exists for diagnosing classloader problems: is a class or resource present -and if so, where?\nClass GcTimeMonitor; // This class monitors the percentage of time the JVM is paused in GC within the specified observation window, say 1 minute.\nClass GcTimeMonitor.Builder;\nClass GcTimeMonitor.GcData; // Encapsulates data about GC pauses measured at the specific timestamp.\nClass HostsFileReader.HostDetails; // An atomic view of the included and excluded hosts\n", "des": "Common utilities."}
{"index": 573, "repo": "hadoop-common-3.3.4", "code": "package functional;\n\nInterface BiFunctionRaisingIOE<T,U,R>; // Function of arity 2 which may raise an IOException.\nInterface CallableRaisingIOE<R>; // This is a callable which only raises an IOException.\nInterface ConsumerRaisingIOE<T>; // Version of java.util.function.Consumer which raises exceptions.\nInterface FunctionRaisingIOE<T,R>; // Function of arity 1 which may raise an IOException.\nInterface InvocationRaisingIOE; // This is a lambda-expression which may raises an IOException.\nClass CommonCallableSupplier<T>; // A bridge from Callable to Supplier; catching exceptions raised by the callable and wrapping them as appropriate.\nClass FutureIO; // Future IO Helper methods.\nClass RemoteIterators; // A set of remote iterators supporting transformation and filtering, with IOStatisticsSource passthrough, and of conversions of the iterators to lists/arrays and of performing actions on the values.\n", "des": "Support for functional programming within the Hadoop APIs."}
{"index": 574, "repo": "commons-collections-3.2.2", "code": "package collections;\n\npackage collections.bag; // This package contains implementations of the Bag and SortedBag interfaces.\npackage collections.bidimap; // This package contains implementations of the BidiMap, OrderedBidiMap and SortedBidiMap interfaces.\npackage collections.buffer; // This package contains implementations of the Buffer interface.\npackage collections.collection; // This package contains implementations of the Collection interface.\npackage collections.comparators; // This package contains implementations of the Comparator interface.\npackage collections.functors; // This package contains implementations of the Closure, Predicate, Transformer and Factory interfaces.\npackage collections.iterators; // This package contains implementations of the Iterator interface.\npackage collections.keyvalue; // This package contains implementations of collection and map related key/value classes.\npackage collections.list; // This package contains implementations of the List interface.\npackage collections.map; // This package contains implementations of the Map, IterableMap, OrderedMap and SortedMap interfaces.\npackage collections.set; // This package contains implementations of the Set and SortedSet interfaces.\nInterface Bag; // Defines a collection that counts the number of times an object appears in the collection.\nInterface BidiMap; // Defines a map that allows bidirectional lookup between key and values.\nInterface BoundedCollection; // Defines a collection that is bounded in size.\nInterface BoundedMap; // Defines a map that is bounded in size.\nInterface Buffer; // Defines a collection that allows objects to be removed in some well-defined order.\nInterface Closure; // Defines a functor interface implemented by classes that do something.\nInterface Factory; // Defines a functor interface implemented by classes that create objects.\nInterface IterableMap; // Defines a map that can be iterated directly without needing to create an entry set.\nInterface KeyValue; // Defines a simple key value pair.\nInterface MapIterator; // Defines an iterator that operates over a Map.\nInterface MultiMap; // Defines a map that holds a collection of values against each key.\nInterface OrderedBidiMap; // Defines a map that allows bidirectional lookup between key and values and retains and provides access to an ordering.\nInterface OrderedIterator; // Defines an iterator that operates over an ordered collection.\nInterface OrderedMap; // Defines a map that maintains order and allows both forward and backward iteration through that order.\n", "des": "This package contains the interfaces and utilities shared across all the subpackages of this component."}
{"index": 575, "repo": "commons-collections-3.2.2", "code": "package bag;\n\nClass AbstractBagDecorator; // Decorates another Bag to provide additional behaviour.\nClass AbstractMapBag; // Abstract implementation of the Bag interface to simplify the creation of subclass implementations.\nClass AbstractMapBag.MutableInteger; // Mutable integer class for storing the data.\nClass AbstractSortedBagDecorator; // Decorates another SortedBag to provide additional behaviour.\nClass HashBag; // Implements Bag, using a HashMap to provide the data storage.\nClass PredicatedBag; // Decorates another Bag to validate that additions match a specified predicate.\nClass PredicatedSortedBag; // Decorates another SortedBag to validate that additions match a specified predicate.\nClass SynchronizedBag; // Decorates another Bag to synchronize its behaviour for a multi-threaded environment.\nClass SynchronizedSortedBag; // Decorates another SortedBag to synchronize its behaviour for a multi-threaded environment.\nClass TransformedBag; // Decorates another Bag to transform objects that are added.\nClass TransformedSortedBag; // Decorates another SortedBag to transform objects that are added.\nClass TreeBag; // Implements SortedBag, using a TreeMap to provide the data storage.\nClass TypedBag; // Decorates another Bag to validate that elements added are of a specific type.\nClass TypedSortedBag; // Decorates another SortedBag to validate that elements added are of a specific type.\nClass UnmodifiableBag; // Decorates another Bag to ensure it can't be altered.\nClass UnmodifiableSortedBag; // Decorates another SortedBag to ensure it can't be altered.\n", "des": "This package contains implementations of the Bag and SortedBag interfaces."}
{"index": 576, "repo": "commons-collections-3.2.2", "code": "package bidimap;\n\nClass AbstractBidiMapDecorator; // Provides a base decorator that enables additional functionality to be added to a BidiMap via decoration.\nClass AbstractDualBidiMap; // Abstract BidiMap implemented using two maps.\nClass AbstractDualBidiMap.BidiMapIterator; // Inner class MapIterator.\nClass AbstractDualBidiMap.EntrySet; // Inner class EntrySet.\nClass AbstractDualBidiMap.EntrySetIterator; // Inner class EntrySetIterator.\nClass AbstractDualBidiMap.KeySet; // Inner class KeySet.\nClass AbstractDualBidiMap.KeySetIterator; // Inner class KeySetIterator.\nClass AbstractDualBidiMap.MapEntry; // Inner class MapEntry.\nClass AbstractDualBidiMap.Values; // Inner class Values.\nClass AbstractDualBidiMap.ValuesIterator; // Inner class ValuesIterator.\nClass AbstractDualBidiMap.View; // Inner class View.\nClass AbstractOrderedBidiMapDecorator; // Provides a base decorator that enables additional functionality to be added to an OrderedBidiMap via decoration.\nClass AbstractSortedBidiMapDecorator; // Provides a base decorator that enables additional functionality to be added to a SortedBidiMap via decoration.\nClass DualHashBidiMap; // Implementation of BidiMap that uses two HashMap instances.\nClass DualTreeBidiMap; // Implementation of BidiMap that uses two TreeMap instances.\nClass DualTreeBidiMap.BidiOrderedMapIterator; // Inner class MapIterator.\nClass DualTreeBidiMap.ViewMap; // Internal sorted map view.\nClass TreeBidiMap; // Red-Black tree-based implementation of BidiMap where all objects added implement the Comparable interface.\nClass UnmodifiableBidiMap; // Decorates another BidiMap to ensure it can't be altered.\nClass UnmodifiableOrderedBidiMap; // Decorates another OrderedBidiMap to ensure it can't be altered.\nClass UnmodifiableSortedBidiMap; // Decorates another SortedBidiMap to ensure it can't be altered.\n", "des": "This package contains implementations of the BidiMap, OrderedBidiMap and SortedBidiMap interfaces."}
{"index": 577, "repo": "commons-collections-3.2.2", "code": "package buffer;\n\nClass AbstractBufferDecorator; // Decorates another Buffer to provide additional behaviour.\nClass BlockingBuffer; // Decorates another Buffer to make BlockingBuffer.get() and BlockingBuffer.remove() block when the Buffer is empty.\nClass BoundedBuffer; // Decorates another Buffer to ensure a fixed maximum size.\nClass BoundedFifoBuffer; // The BoundedFifoBuffer is a very efficient implementation of Buffer that is of a fixed size.\nClass CircularFifoBuffer; // CircularFifoBuffer is a first in first out buffer with a fixed size that replaces its oldest element if full.\nClass PredicatedBuffer; // Decorates another Buffer to validate that additions match a specified predicate.\nClass PriorityBuffer; // Binary heap implementation of Buffer that provides for removal based on Comparator ordering.\nClass SynchronizedBuffer; // Decorates another Buffer to synchronize its behaviour for a multi-threaded environment.\nClass TransformedBuffer; // Decorates another Buffer to transform objects that are added.\nClass TypedBuffer; // Decorates another Buffer to validate that elements added are of a specific type.\nClass UnboundedFifoBuffer; // UnboundedFifoBuffer is a very efficient implementation of Buffer that can grow to any size.\nClass UnmodifiableBuffer; // Decorates another Buffer to ensure it can't be altered.\n", "des": "This package contains implementations of the Buffer interface."}
{"index": 578, "repo": "commons-collections-3.2.2", "code": "package collection;\n\nInterface CompositeCollection.CollectionMutator; // Pluggable strategy to handle changes to the composite.\nClass AbstractCollectionDecorator; // Decorates another Collection to provide additional behaviour.\nClass AbstractSerializableCollectionDecorator; // Serializable subclass of AbstractCollectionDecorator.\nClass CompositeCollection; // Decorates a collection of other collections to provide a single unified view.\nClass PredicatedCollection; // Decorates another Collection to validate that additions match a specified predicate.\nClass SynchronizedCollection; // Decorates another Collection to synchronize its behaviour for a multi-threaded environment.\nClass TransformedCollection; // Decorates another Collection to transform objects that are added.\nClass TypedCollection; // Decorates a Collection to validate that elements added are of a specific type.\nClass UnmodifiableBoundedCollection; // UnmodifiableBoundedCollection decorates another BoundedCollection to ensure it can't be altered.\nClass UnmodifiableCollection; // Decorates another Collection to ensure it can't be altered.\n", "des": "This package contains implementations of the Collection interface."}
{"index": 579, "repo": "commons-collections-3.2.2", "code": "package comparators;\n\nClass BooleanComparator; // A Comparator for Boolean objects that can sort either true or false first.\nClass ComparableComparator; // A Comparator that compares Comparable objects.\nClass ComparatorChain; // A ComparatorChain is a Comparator that wraps one or more Comparators in sequence.\nClass FixedOrderComparator; // A Comparator which imposes a specific order on a specific set of Objects.\nClass NullComparator; // A Comparator that will compare nulls to be either lower or higher than other objects.\nClass ReverseComparator; // Reverses the order of another comparator by reversing the arguments to its compare method.\nClass TransformingComparator; // Decorates another Comparator with transformation behavior.\n", "des": "This package contains implementations of the Comparator interface."}
{"index": 580, "repo": "commons-collections-3.2.2", "code": "package functors;\n\nInterface PredicateDecorator; // Defines a predicate that decorates one or more other predicates.\nClass AllPredicate; // Predicate implementation that returns true if all the predicates return true.\nClass AndPredicate; // Predicate implementation that returns true if both the predicates return true.\nClass AnyPredicate; // Predicate implementation that returns true if any of the predicates return true.\nClass ChainedClosure; // Closure implementation that chains the specified closures together.\nClass ChainedTransformer; // Transformer implementation that chains the specified transformers together.\nClass CloneTransformer; // Transformer implementation that returns a clone of the input object.\nClass ClosureTransformer; // Transformer implementation that calls a Closure using the input object and then returns the input.\nClass ConstantFactory; // Factory implementation that returns the same constant each time.\nClass ConstantTransformer; // Transformer implementation that returns the same constant each time.\nClass EqualPredicate; // Predicate implementation that returns true if the input is the same object as the one stored in this predicate by equals.\nClass ExceptionClosure; // Closure implementation that always throws an exception.\nClass ExceptionFactory; // Factory implementation that always throws an exception.\nClass ExceptionPredicate; // Predicate implementation that always throws an exception.\nClass ExceptionTransformer; // Transformer implementation that always throws an exception.\nClass FactoryTransformer; // Transformer implementation that calls a Factory and returns the result.\nClass FalsePredicate; // Predicate implementation that always returns false.\nClass ForClosure; // Closure implementation that calls another closure n times, like a for loop.\nClass IdentityPredicate; // Predicate implementation that returns true if the input is the same object as the one stored in this predicate.\nClass IfClosure; // Closure implementation acts as an if statement calling one or other closure based on a predicate.\nClass InstanceofPredicate; // Predicate implementation that returns true if the input is an instanceof the type stored in this predicate.\nClass InstantiateFactory; // Factory implementation that creates a new object instance by reflection.\nClass InstantiateTransformer; // Transformer implementation that creates a new object instance by reflection.\nClass InvokerTransformer; // Transformer implementation that creates a new object instance by reflection.\nClass MapTransformer; // Transformer implementation that returns the value held in a specified map using the input parameter as a key.\nClass NonePredicate; // Predicate implementation that returns true if none of the predicates return true.\nClass NOPClosure; // Closure implementation that does nothing.\n", "des": "This package contains implementations of the Closure, Predicate, Transformer and Factory interfaces."}
{"index": 581, "repo": "commons-collections-3.2.2", "code": "package iterators;\n\nClass AbstractIteratorDecorator; // Provides basic behaviour for decorating an iterator with extra functionality.\nClass AbstractListIteratorDecorator; // Provides basic behaviour for decorating a list iterator with extra functionality.\nClass AbstractMapIteratorDecorator; // Provides basic behaviour for decorating a map iterator with extra functionality.\nClass AbstractOrderedMapIteratorDecorator; // Provides basic behaviour for decorating an ordered map iterator with extra functionality.\nClass ArrayIterator; // Implements an Iterator over any array.\nClass ArrayListIterator; // Implements a ListIterator over an array.\nClass CollatingIterator; // Provides an ordered iteration over the elements contained in a collection of ordered Iterators.\nClass EmptyIterator; // Provides an implementation of an empty iterator.\nClass EmptyListIterator; // Provides an implementation of an empty list iterator.\nClass EmptyMapIterator; // Provides an implementation of an empty map iterator.\nClass EmptyOrderedIterator; // Provides an implementation of an empty ordered iterator.\nClass EmptyOrderedMapIterator; // Provides an implementation of an empty ordered map iterator.\nClass EntrySetMapIterator; // Implements a MapIterator using a Map entrySet.\nClass EnumerationIterator; // Adapter to make Enumeration instances appear to be Iterator instances.\nClass FilterIterator; // Decorates another Iterator using a predicate to filter elements.\nClass FilterListIterator; // Decorates another ListIterator using a predicate to filter elements.\nClass IteratorChain; // An IteratorChain is an Iterator that wraps a number of Iterators.\nClass IteratorEnumeration; // Adapter to make an Iterator instance appear to be an Enumeration instance.\nClass ListIteratorWrapper; // Converts an iterator into a list iterator by caching the returned entries.\nClass LoopingIterator; // An Iterator that restarts when it reaches the end.\nClass LoopingListIterator; // A ListIterator that restarts when it reaches the end or when it reaches the beginning.\nClass ObjectArrayIterator; // An Iterator over an array of objects.\nClass ObjectArrayListIterator; // Implements a ListIterator over an array of objects.\nClass ObjectGraphIterator; // An Iterator that can traverse multiple iterators down an object graph.\nClass ProxyIterator; // Use AbstractIteratorDecorator.\nClass ProxyListIterator; // Use AbstractListIteratorDecorator.\nClass ReverseListIterator; // Iterates backwards through a List, starting with the last element and continuing to the first.\nClass SingletonIterator; // SingletonIterator is an Iterator over a single object instance.\n", "des": "This package contains implementations of the Iterator interface."}
{"index": 582, "repo": "commons-collections-3.2.2", "code": "package keyvalue;\n\nClass AbstractKeyValue; // Abstract pair class to assist with creating KeyValue and Map.Entry implementations.\nClass AbstractMapEntry; // Abstract Pair class to assist with creating correct Map.Entry implementations.\nClass AbstractMapEntryDecorator; // Provides a base decorator that allows additional functionality to be added to a Map.Entry.\nClass DefaultKeyValue; // A mutable KeyValue pair that does not implement Map.Entry.\nClass DefaultMapEntry; // A restricted implementation of Map.Entry that prevents the Map.Entry contract from being broken.\nClass MultiKey; // A MultiKey allows multiple map keys to be merged together.\nClass TiedMapEntry; // A Map.Entry tied to a map underneath.\nClass UnmodifiableMapEntry; // A Map.Entry that throws UnsupportedOperationException when setValue is called.\n", "des": "This package contains implementations of collection and map related key/value classes."}
{"index": 583, "repo": "commons-collections-3.2.2", "code": "package list;\n\nClass AbstractLinkedList; // An abstract implementation of a linked list which provides numerous points for subclasses to override.\nClass AbstractLinkedList.LinkedListIterator; // A list iterator over the linked list.\nClass AbstractLinkedList.LinkedSubList; // The sublist implementation for AbstractLinkedList.\nClass AbstractLinkedList.LinkedSubListIterator; // A list iterator over the linked sub list.\nClass AbstractLinkedList.Node; // A node within the linked list.\nClass AbstractListDecorator; // Decorates another List to provide additional behaviour.\nClass AbstractSerializableListDecorator; // Serializable subclass of AbstractListDecorator.\nClass CursorableLinkedList; // A List implementation with a ListIterator that allows concurrent modifications to the underlying list.\nClass CursorableLinkedList.Cursor; // An extended ListIterator that allows concurrent changes to the underlying list.\nClass CursorableLinkedList.SubCursor; // A cursor for the sublist based on LinkedSubListIterator.\nClass FixedSizeList; // Decorates another List to fix the size preventing add/remove.\nClass GrowthList; // Decorates another List to make it seamlessly grow when indices larger than the list size are used on add and set, avoiding most IndexOutOfBoundsExceptions.\nClass LazyList; // Decorates another List to create objects in the list on demand.\nClass NodeCachingLinkedList; // A List implementation that stores a cache of internal Node objects in an effort to reduce wasteful object creation.\nClass PredicatedList; // Decorates another List to validate that all additions match a specified predicate.\nClass SetUniqueList; // Decorates a List to ensure that no duplicates are present much like a Set.\nClass SynchronizedList; // Decorates another List to synchronize its behaviour for a multi-threaded environment.\nClass TransformedList; // Decorates another List to transform objects that are added.\nClass TreeList; // A List implementation that is optimised for fast insertions and removals at any index in the list.\nClass TypedList; // Decorates another List to validate that elements added are of a specific type.\nClass UnmodifiableList; // Decorates another List to ensure it can't be altered.\n", "des": "This package contains implementations of the List interface."}
{"index": 584, "repo": "commons-collections-3.2.2", "code": "package map;\n\nInterface CompositeMap.MapMutator; // This interface allows definition for all of the indeterminate mutators in a CompositeMap, as well as providing a hook for callbacks on key collisions.\nClass AbstractHashedMap; // An abstract implementation of a hash-based map which provides numerous points for subclasses to override.\nClass AbstractHashedMap.EntrySet; // EntrySet implementation.\nClass AbstractHashedMap.EntrySetIterator; // EntrySet iterator.\nClass AbstractHashedMap.HashEntry; // HashEntry used to store the data.\nClass AbstractHashedMap.HashIterator; // Base Iterator\nClass AbstractHashedMap.HashMapIterator; // MapIterator implementation.\nClass AbstractHashedMap.KeySet; // KeySet implementation.\nClass AbstractHashedMap.KeySetIterator; // KeySet iterator.\nClass AbstractHashedMap.Values; // Values implementation.\nClass AbstractHashedMap.ValuesIterator; // Values iterator.\nClass AbstractLinkedMap; // An abstract implementation of a hash-based map that links entries to create an ordered map and which provides numerous points for subclasses to override.\nClass AbstractLinkedMap.EntrySetIterator; // EntrySet iterator.\nClass AbstractLinkedMap.KeySetIterator; // KeySet iterator.\nClass AbstractLinkedMap.LinkEntry; // LinkEntry that stores the data.\nClass AbstractLinkedMap.LinkIterator; // Base Iterator that iterates in link order.\nClass AbstractLinkedMap.LinkMapIterator; // MapIterator implementation.\nClass AbstractLinkedMap.ValuesIterator; // Values iterator.\nClass AbstractMapDecorator; // Provides a base decorator that enables additional functionality to be added to a Map via decoration.\nClass AbstractOrderedMapDecorator; // Provides a base decorator that enables additional functionality to be added to an OrderedMap via decoration.\nClass AbstractReferenceMap; // An abstract implementation of a hash-based map that allows the entries to be removed by the garbage collector.\nClass AbstractReferenceMap.ReferenceEntry; // A MapEntry implementation for the map.\nClass AbstractSortedMapDecorator; // Provides a base decorator that enables additional functionality to be added to a Map via decoration.\nClass CaseInsensitiveMap; // A case-insensitive Map.\nClass CompositeMap; // Decorates a map of other maps to provide a single unified view.\n", "des": "This package contains implementations of the Map, IterableMap, OrderedMap and SortedMap interfaces."}
{"index": 585, "repo": "commons-collections-3.2.2", "code": "package set;\n\nInterface CompositeSet.SetMutator; // Define callbacks for mutation operations.\nClass AbstractSerializableSetDecorator; // Serializable subclass of AbstractSetDecorator.\nClass AbstractSetDecorator; // Decorates another Set to provide additional behaviour.\nClass AbstractSortedSetDecorator; // Decorates another SortedSet to provide additional behaviour.\nClass CompositeSet; // Decorates a set of other sets to provide a single unified view.\nClass ListOrderedSet; // Decorates another Set to ensure that the order of addition is retained and used by the iterator.\nClass MapBackedSet; // Decorates a Map to obtain Set behaviour.\nClass PredicatedSet; // Decorates another Set to validate that all additions match a specified predicate.\nClass PredicatedSortedSet; // Decorates another SortedSet to validate that all additions match a specified predicate.\nClass SynchronizedSet; // Decorates another Set to synchronize its behaviour for a multi-threaded environment.\nClass SynchronizedSortedSet; // Decorates another SortedSet to synchronize its behaviour for a multi-threaded environment.\nClass TransformedSet; // Decorates another Set to transform objects that are added.\nClass TransformedSortedSet; // Decorates another SortedSet to transform objects that are added.\nClass TypedSet; // Decorates another Set to validate that elements added are of a specific type.\nClass TypedSortedSet; // Decorates another SortedSet to validate that elements added are of a specific type.\nClass UnmodifiableSet; // Decorates another Set to ensure it can't be altered.\nClass UnmodifiableSortedSet; // Decorates another SortedSet to ensure it can't be altered.\n", "des": "This package contains implementations of the Set and SortedSet interfaces."}
{"index": 586, "repo": "org.apache.karaf.main-2.4.4", "code": "package adaptor;\n\nClass EclipseStarter; // Special startup class for the Eclipse Platform.\nClass LocationManager; // This class is used to manage the various Locations for Eclipse.\n", "des": "Provides API to start the platform."}
{"index": 587, "repo": "org.apache.karaf.main-2.4.4", "code": "package console;\n\nInterface CommandInterpreter; // A command interpreter is a shell that can interpret command lines.\nInterface CommandProvider; // When an object wants to provide a number of commands to the console, it should register an object with this interface.\nClass ConsoleSession; // A console session service provides the input and output to a single console session.\n", "des": "Provides services related to the Equinox console."}
{"index": 588, "repo": "org.apache.karaf.main-2.4.4", "code": "package eventmgr;\n\nInterface EventDispatcher<K,V,E>; // The EventDispatcher interface contains the method that is called by the Event Manager to complete the event delivery to the event listener.\nClass CopyOnWriteIdentityMap<K,V>; // A copy-on-write identity map.\nClass EventListeners<K,V>; // As of 3.5.\nClass EventManager; // This class is the central class for the Event Manager.\nClass ListenerQueue<K,V,E>; // The ListenerQueue is used to snapshot the list of listeners at the time the event is fired.\n", "des": "Provides the event manager API."}
{"index": 589, "repo": "org.apache.karaf.main-2.4.4", "code": "package log;\n\nInterface FrameworkLog; // The FramworkLog interface.\nClass FrameworkLogEntry; // A framework log entry used to log information to a FrameworkLog\n", "des": "Provides the FrameworkLog service."}
{"index": 590, "repo": "org.apache.karaf.main-2.4.4", "code": "package launch;\n\nClass Equinox; // The System Bundle implementation for the Equinox Framework.\nClass EquinoxFactory; // The framework factory implementation for the Equinox framework.\n", "des": "Provides the Equinox framework launch API."}
{"index": 591, "repo": "org.apache.karaf.main-2.4.4", "code": "package datalocation;\n\nInterface Location; // A Location represents a URL which may have a default value, may be read only, may or may not have a current value and may be cascaded on to a parent location.\n", "des": "Provides the Location service."}
{"index": 592, "repo": "org.apache.karaf.main-2.4.4", "code": "package debug;\n\nInterface DebugOptions; // Used to get debug options settings and creating a new DebugTrace instance for a bundle to use for dynamic tracing.\nInterface DebugOptionsListener; // A debug options listener is notified whenever one of its plug-in option-path entries is changed.\nInterface DebugTrace; // A DebugTrace is used to record debug trace statements, based on the current option settings in a corresponding DebugOptions class.\n", "des": "Provides the DebugOptions service."}
{"index": 593, "repo": "org.apache.karaf.main-2.4.4", "code": "package environment;\n\nInterface Constants; // Constants used with the EnvironmentInfo service.\nInterface EnvironmentInfo; // A Framework service which gives access to the command line used to start this running framework as well as information about the environment such as the current operating system, machine architecture, locale and windowing system.\n", "des": "Provides the EnvironmentInfo service."}
{"index": 594, "repo": "org.apache.karaf.main-2.4.4", "code": "package localization;\n\nInterface BundleLocalization; // The interface of the service that gets ResourceBundle objects from a given bundle with a given locale.\nInterface LocaleProvider; // A service that is used to determine what the current locale is for a particular context or session.\n", "des": "Provides bundle localization and local provider service APIs."}
{"index": 595, "repo": "org.apache.karaf.main-2.4.4", "code": "package resolver;\n\nInterface BaseDescription; // This class represents a base description object for a state.\nInterface BundleDelta; // BundleDeltas represent the changes related to an individual bundle between two states.\nInterface BundleDescription; // This class represents a specific version of a bundle in the system.\nInterface BundleSpecification; // A representation of one bundle import constraint as seen in a bundle manifest and managed by a state and resolver.\nInterface ExportPackageDescription; // This class represents a specific version of an exported package in the system.\nInterface GenericDescription; // A description of a generic capability.\nInterface GenericSpecification; // A specification which depends on a generic capability\nInterface HostSpecification; // A representation of one host bundle constraint as seen in a bundle manifest and managed by a state and resolver.\nInterface ImportPackageSpecification; // A representation of one package import constraint as seen in a bundle manifest and managed by a state and resolver.\nInterface NativeCodeDescription; // This class represents a native code description.\nInterface NativeCodeSpecification; // This class represents a native code specification.\nInterface PlatformAdmin; // Framework service which allows bundle programmers to inspect the bundles and packages known to the Framework.\nInterface Resolver; // An implementation of a resolver which resolves the constraints of the bundles in a system.\nInterface ResolverError; // ResolverErrors represent a single error that prevents a bundle from resolving in a State object.\nInterface State; // The state of a system as reported by a resolver.\nInterface StateDelta; // A state delta contains all the changes to bundles within a state.\nInterface StateHelper; // A helper class that provides convenience methods for manipulating state objects.\nInterface StateObjectFactory; // A factory for states and their component objects.\nInterface VersionConstraint; // VersionConstraints represent the relationship between two bundles (in the case of bundle requires) or a bundle and a package (in the case of import/export).\nClass DisabledInfo; // A disabled info represents a policy decision to disable a bundle which exists in a State.\nClass StateWire; // A state wire represents a decision made by a resolver to wire a requirement to a capability.\nClass VersionRange; // This class represents a version range.\nClass ResolverHookException; // A runtime exception thrown by a resolver to indicate that a resolver hook threw an unexpected exception and the resolve operation terminated.\n", "des": "Provides the Equinox resolver API."}
{"index": 596, "repo": "org.apache.karaf.main-2.4.4", "code": "package runnable;\n\nInterface ApplicationLauncher; // An ApplicationLauncher is used to launch ParameterizedRunnable objects using the main thread.\nInterface ApplicationRunnable; // A parameterized runnable that can be stopped.\nInterface ParameterizedRunnable; // Like a Runnable, an object which captures a block of code which can be passed around and executed.\nInterface StartupMonitor; // Service interface used to monitor the startup process.\n", "des": "Provides API for monitoring and running code on the main thread."}
{"index": 597, "repo": "org.apache.karaf.main-2.4.4", "code": "package security;\n\nClass TrustEngine; // A TrustEngine is used to establish the authenticity of a Certificate chain.\n", "des": "Equinox security services"}
{"index": 598, "repo": "org.apache.karaf.main-2.4.4", "code": "package signedcontent;\n\nInterface SignedContent; // A SignedContent object represents content which may be signed.\nInterface SignedContentEntry; // A SignedContentEntry represents a content entry which may be signed.\nInterface SignedContentFactory; // A factory used to create SignedContent objects.\nInterface SignerInfo; // A SignerInfo object represents a single signer chain.\nClass InvalidContentException; // Indicates that signed content is invalid according to one of the signers.\n", "des": "Equinox Signed Content"}
{"index": 599, "repo": "org.apache.karaf.main-2.4.4", "code": "package storagemanager;\n\nClass ManagedOutputStream; // Represents a managed output stream for target managed by a storage manager.\nClass StorageManager; // Storage managers provide a facility for tracking the state of a group of files having relationship with each others and being updated by several entities at the same time.\n", "des": "Provides the storage manager API."}
{"index": 600, "repo": "org.apache.karaf.main-2.4.4", "code": "package util;\n\nClass ManifestElement; // This class represents a single manifest element.\nClass NLS; // Common superclass for all message bundle classes.\nClass TextProcessor; // This class is used to process strings that have special semantic meaning (such as file paths) in RTL-oriented locales so that they render in a way that does not corrupt the semantic meaning of the string but also maintains compliance with the Unicode BiDi algorithm of rendering Bidirectional text.\n", "des": "Provides utility classes for NLS support and bundle manifest header parsing."}
{"index": 601, "repo": "org.apache.karaf.main-2.4.4", "code": "package framework;\n\npackage framework.launch; // Framework Launch Package Version 1.1.\npackage framework.namespace; // Namespace Package Version 1.0.\npackage framework.startlevel; // Framework Start Level Package Version 1.0.\npackage framework.wiring; // Framework Wiring Package Version 1.1.\nInterface AllServiceListener; // A ServiceEvent listener that does not filter based upon package wiring.\nInterface Bundle; // An installed bundle in the Framework.\nInterface BundleActivator; // Customizes the starting and stopping of a bundle.\nInterface BundleContext; // A bundle's execution context within the Framework.\nInterface BundleListener; // A BundleEvent listener.\nInterface BundleReference; // A reference to a Bundle.\nInterface Configurable; // As of 1.2.\nInterface Constants; // Defines standard names for the OSGi environment system properties, service properties, and Manifest header attribute keys.\nInterface Filter; // An RFC 1960-based Filter.\nInterface FrameworkListener; // A FrameworkEvent listener.\nInterface ServiceFactory<S>; // Allows services to provide customized service objects in the OSGi environment.\nInterface ServiceListener; // A ServiceEvent listener.\nInterface ServiceReference<S>; // A reference to a service.\nInterface ServiceRegistration<S>; // A registered service.\nInterface SynchronousBundleListener; // A synchronous BundleEvent listener.\nInterface UnfilteredServiceListener; // A ServiceEvent listener that does not filter based upon any filter string specified to BundleContext.addServiceListener(ServiceListener, String).\nClass AdaptPermission; // A bundle's authority to adapt an object to a type.\nClass AdminPermission; // A bundle's authority to perform specific privileged administrative operations on or to get sensitive information about a bundle.\nClass BundleEvent; // An event from the Framework describing a bundle lifecycle change.\nClass BundlePermission; // A bundle's authority to require or provide a bundle or to receive or attach fragments.\nClass CapabilityPermission; // A bundle's authority to provide or require a capability.\nClass FrameworkEvent; // A general event from the Framework.\nClass FrameworkUtil; // Framework Utility class.\nClass PackagePermission; // A bundle's authority to import or export a package.\nClass ServiceEvent; // An event from the Framework describing a service lifecycle change.\nClass ServicePermission; // A bundle's authority to register or get a service.\n", "des": "Framework Package Version 1.7."}
{"index": 602, "repo": "org.apache.karaf.main-2.4.4", "code": "package bundle;\n\nInterface CollisionHook; // OSGi Framework Bundle Collision Hook Service.\nInterface EventHook; // OSGi Framework Bundle Event Hook Service.\nInterface FindHook; // OSGi Framework Bundle Context Hook Service.\n", "des": "Framework Bundle Hooks Package Version 1.1."}
{"index": 603, "repo": "org.apache.karaf.main-2.4.4", "code": "package resolver;\n\nInterface ResolverHook; // OSGi Framework Resolver Hook instances are obtained from the OSGi Framework Resolver Hook Factory service.\nInterface ResolverHookFactory; // OSGi Framework Resolver Hook Factory Service.\n", "des": "Framework Resolver Hooks Package Version 1.0."}
{"index": 604, "repo": "org.apache.karaf.main-2.4.4", "code": "package service;\n\nInterface EventHook; // As of 1.1.\nInterface EventListenerHook; // OSGi Framework Service Event Listener Hook Service.\nInterface FindHook; // OSGi Framework Service Find Hook Service.\nInterface ListenerHook; // OSGi Framework Service Listener Hook Service.\nInterface ListenerHook.ListenerInfo; // Information about a Service Listener.\n", "des": "Framework Service Hooks Package Version 1.1."}
{"index": 605, "repo": "org.apache.karaf.main-2.4.4", "code": "package weaving;\n\nInterface WeavingHook; // OSGi Framework Weaving Hook Service.\nInterface WovenClass; // A class being woven.\nClass WeavingException; // A weaving exception used to indicate that the class load should be failed but the weaving hook must not be blacklisted by the framework.\n", "des": "Framework Weaving Hooks Package Version 1.0."}
{"index": 606, "repo": "org.apache.karaf.main-2.4.4", "code": "package launch;\n\nInterface Framework; // A Framework instance.\nInterface FrameworkFactory; // A factory for creating Framework instances.\n", "des": "Framework Launch Package Version 1.1."}
{"index": 607, "repo": "org.apache.karaf.main-2.4.4", "code": "package namespace;\n\nClass AbstractWiringNamespace; // Wiring Capability and Requirement Namespaces base class.\nClass BundleNamespace; // Bundle Capability and Requirement Namespace.\nClass ExecutionEnvironmentNamespace; // Execution Environment Capability and Requirement Namespace.\nClass HostNamespace; // Host Capability and Requirement Namespace.\nClass IdentityNamespace; // Identity Capability and Requirement Namespace.\nClass PackageNamespace; // Package Capability and Requirement Namespace.\n", "des": "Namespace Package Version 1.0."}
{"index": 608, "repo": "org.apache.karaf.main-2.4.4", "code": "package startlevel;\n\nInterface BundleStartLevel; // Query and modify the start level information for a bundle.\nInterface FrameworkStartLevel; // Query and modify the start level information for the framework.\n", "des": "Framework Start Level Package Version 1.0."}
{"index": 609, "repo": "org.apache.karaf.main-2.4.4", "code": "package wiring;\n\nInterface BundleCapability; // A capability that has been declared from a bundle revision.\nInterface BundleRequirement; // A requirement that has been declared from a bundle revision.\nInterface BundleRevision; // Bundle Revision.\nInterface BundleRevisions; // The bundle revisions of a bundle.\nInterface BundleWire; // A wire connecting a BundleCapability to a BundleRequirement.\nInterface BundleWiring; // A wiring for a bundle.\nInterface FrameworkWiring; // Query and modify wiring information for the framework.\n", "des": "Framework Wiring Package Version 1.1."}
{"index": 610, "repo": "org.apache.karaf.main-2.4.4", "code": "package resource;\n\nInterface Capability; // A capability that has been declared from a Resource.\nInterface Requirement; // A requirement that has been declared from a Resource .\nInterface Resource; // A resource is the representation of a uniquely identified and typed data.\nInterface Wire; // A wire connecting a Capability to a Requirement.\nInterface Wiring; // A wiring for a resource.\nClass Namespace; // Capability and Requirement Namespaces base class.\n", "des": "Resource Package Version 1.0."}
{"index": 611, "repo": "org.apache.karaf.main-2.4.4", "code": "package condpermadmin;\n\nInterface Condition; // The interface implemented by a Condition.\nInterface ConditionalPermissionAdmin; // Framework service to administer Conditional Permissions.\nInterface ConditionalPermissionInfo; // A list of Permissions guarded by a list of conditions with an access decision.\nInterface ConditionalPermissionUpdate; // Update the Conditional Permission Table.\nClass BundleLocationCondition; // Condition to test if the location of a bundle matches or does not match a pattern.\nClass BundleSignerCondition; // Condition to test if the signer of a bundle matches or does not match a pattern.\nClass ConditionInfo; // Condition representation used by the Conditional Permission Admin service.\n", "des": "Conditional Permission Admin Package Version 1.1."}
{"index": 612, "repo": "org.apache.karaf.main-2.4.4", "code": "package log;\n\nInterface LogEntry; // Provides methods to access the information contained in an individual Log Service log entry.\nInterface LogListener; // Subscribes to LogEntry objects from the LogReaderService.\nInterface LogReaderService; // Provides methods to retrieve LogEntry objects from the log.\nInterface LogService; // Provides methods for bundles to write messages to the log.\n", "des": "Log Service Package Version 1.3."}
{"index": 613, "repo": "org.apache.karaf.main-2.4.4", "code": "package packageadmin;\n\nInterface ExportedPackage; // The PackageAdmin service has been replaced by the org.osgi.framework.wiring package.\nInterface PackageAdmin; // This service has been replaced by the org.osgi.framework.wiring package.\nInterface RequiredBundle; // The PackageAdmin service has been replaced by the org.osgi.framework.wiring package.\n", "des": "Package Admin Package Version 1.2."}
{"index": 614, "repo": "org.apache.karaf.main-2.4.4", "code": "package permissionadmin;\n\nInterface PermissionAdmin; // The Permission Admin service allows management agents to manage the permissions of bundles.\nClass PermissionInfo; // Permission representation used by the Permission Admin service.\n", "des": "Permission Admin Package Version 1.2."}
{"index": 615, "repo": "org.apache.karaf.main-2.4.4", "code": "package startlevel;\n\nInterface StartLevel; // This service has been replaced by the org.osgi.framework.startlevel package.\n", "des": "Start Level Package Version 1.1."}
{"index": 616, "repo": "org.apache.karaf.main-2.4.4", "code": "package url;\n\nInterface URLConstants; // Defines standard names for property keys associated with URLStreamHandlerService and java.net.ContentHandler services.\nInterface URLStreamHandlerService; // Service interface with public versions of the protected java.net.URLStreamHandler methods.\nInterface URLStreamHandlerSetter; // Interface used by URLStreamHandlerService objects to call the setURL method on the proxy URLStreamHandler object.\nClass AbstractURLStreamHandlerService; // Abstract implementation of the URLStreamHandlerService interface.\n", "des": "URL Stream and Content Handlers Package Version 1.0."}
{"index": 617, "repo": "org.apache.karaf.main-2.4.4", "code": "package tracker;\n\nInterface BundleTrackerCustomizer<T>; // The BundleTrackerCustomizer interface allows a BundleTracker to customize the Bundles that are tracked.\nInterface ServiceTrackerCustomizer<S,T>; // The ServiceTrackerCustomizer interface allows a ServiceTracker to customize the service objects that are tracked.\nClass BundleTracker<T>; // The BundleTracker class simplifies tracking bundles much like the ServiceTracker simplifies tracking services.\nClass ServiceTracker<S,T>; // The ServiceTracker class simplifies using services from the Framework's service registry.\n", "des": "Tracker Package Version 1.5."}
{"index": 618, "repo": "freemarker-2.3.32", "code": "package cache;\n\nInterface CacheStorage; // Cache storage abstracts away the storage aspects of a cache - associating an object with a key, retrieval and removal via the key.\nInterface CacheStorageWithGetSize; // A cache storage that has a getSize() method for returning the current number of cache entries.\nInterface ConcurrentCacheStorage; // An optional interface for cache storage that knows whether it can be concurrently accessible without synchronization.\nInterface StatefulTemplateLoader; // Interface that can be implemented by TemplateLoader-s that maintain some sort of internal state (i.e.\nInterface TemplateLoader; // FreeMarker loads template \"files\" through objects that implement this interface, thus the templates need not be real files, and can come from any kind of data source (like classpath, servlet context, database, etc).\nClass AndMatcher; // Logical \"and\" operation among the given matchers.\nClass ByteArrayTemplateLoader; // A TemplateLoader that uses a Map with byte[] as its source of templates.\nClass ClassTemplateLoader; // A TemplateLoader that can load templates from the \"classpath\".\nClass ConditionalTemplateConfigurationFactory; // Returns the given TemplateConfiguration directly, or another TemplateConfigurationFactory's result, when the specified matcher matches the template source.\nClass FileExtensionMatcher; // Matches the file extension; unlike other matchers, by default case insensitive.\nClass FileNameGlobMatcher; // As opposed to PathGlobMatcher, it only compares the \"file name\" part (the part after the last /) of the source name with the given glob.\nClass FileTemplateLoader; // A TemplateLoader that uses files inside a specified directory as the source of templates.\nClass FirstMatchTemplateConfigurationFactory; // Returns the first non-null result of the child factories, ignoring all further child factories.\nClass MergingTemplateConfigurationFactory; // Returns the merged results of all the child factories.\nClass MruCacheStorage; // A cache storage that implements a two-level Most Recently Used cache.\nClass MultiTemplateLoader; // A TemplateLoader that uses a set of other loaders to load the templates.\nClass NotMatcher; // Logical \"not\" operation on the given matcher.\nClass NullCacheStorage; // A cache storage that doesn't store anything.\nClass OrMatcher; // Logical \"or\" operation among the given matchers.\nClass PathGlobMatcher; // Matches the whole template source name (also known as template source path) with the given glob.\n", "des": "Template loading and caching."}
{"index": 619, "repo": "freemarker-2.3.32", "code": "package core;\n\nInterface DirectiveCallPlace; // Gives information about the place where a directive is called from, also lets you attach a custom data object to that place.\nInterface ParserConfiguration; // Don't implement this interface yourself; use the existing implementation(s).\nInterface TemplateClassResolver; // Used by built-ins and other template language features that get a class based on a string.\nInterface TemplateMarkupOutputModel<MO extends TemplateMarkupOutputModel<MO>>; // \"markup output\" template language data-type; stores markup (some kind of \"rich text\" / structured format, as opposed to plain text) that meant to be printed as template output.\nClass AbstractJSONLikeFormat; // Defines the methods in CFormat that are the same for all JSON-like languages.\nClass AliasTemplateDateFormatFactory; // Creates an alias to another format, so that the format can be referred to with a simple name in the template, rather than as a concrete pattern or other kind of format string.\nClass AliasTemplateNumberFormatFactory; // Creates an alias to another format, so that the format can be referred to with a simple name in the template, rather than as a concrete pattern or other kind of format string.\nClass ArithmeticEngine; // Used for implementing the arithmetic operations and number comparisons in the template language.\nClass ArithmeticEngine.BigDecimalEngine; // This is the default arithmetic engine in FreeMarker.\nClass ArithmeticEngine.ConservativeEngine; // An arithmetic engine that conservatively widens the operation arguments to extent that they can hold the result of the operation.\nClass BuiltInForNodeEx;\nClass CFormat; // Defines a format (usually a computer language) that's used by the c, cn built-ins, and for the \"c\" and \"computer\" number_format, and the \"c\" boolean_format.\nClass CombinedMarkupOutputFormat; // Represents two markup formats nested into each other.\nClass CommandLine; // Will be removed (main method in a library, often classified as CWE-489 \"Leftover Debug Code\").\nClass CommonMarkupOutputFormat<MO extends CommonTemplateMarkupOutputModel>; // Common superclass for implementing MarkupOutputFormat-s that use a CommonTemplateMarkupOutputModel subclass.\n", "des": "The seldom used or advanced parts of the fundamental FreeMarker API, compared to freemarker.template."}
{"index": 620, "repo": "freemarker-2.3.32", "code": "package debug;\n\nInterface DebuggedEnvironment; // Represents the debugger-side mirror of a debugged Environment object in the remote VM.\nInterface Debugger; // The main debugger interface.\nInterface DebuggerListener; // An interface for components that wish to receive debugging events.\nInterface DebugModel; // Represents the debugger-side mirror of a TemplateModel object, a Template object, or a Configuration object.\nClass Breakpoint; // Represents a breakpoint location consisting of a template name and a line number.\nClass DebuggerClient; // A utility class that allows you to connect to the FreeMarker debugger service running on a specific host and port.\nClass EnvironmentSuspendedEvent; // Event describing a suspension of an environment (ie because it hit a breakpoint).\n", "des": "Debugging API; experimental status, might change! This is to support debugging in IDE-s."}
{"index": 621, "repo": "freemarker-2.3.32", "code": "package ant;\n\nClass FreemarkerXmlTask; // FMPP is a more complete solution.\nClass JythonAntTask; // Used internally, public for technical reasons only.\nClass UnlinkedJythonOperationsImpl; // Used internally, public for technical reasons only.\n", "des": "Ant task to transform XML files with a template; a more powerful alternative is FMPP."}
{"index": 622, "repo": "freemarker-2.3.32", "code": "package beans;\n\nInterface ClassMemberAccessPolicy; // Returned by MemberAccessPolicy.forClass(Class).\nInterface MemberAccessPolicy; // Implement this to restrict what class members (methods, fields, constructors) are accessible from templates.\nInterface MethodAppearanceFineTuner; // Used for customizing how the methods are visible from templates, via BeansWrapper.setMethodAppearanceFineTuner(MethodAppearanceFineTuner).\nInterface SingletonCustomizer; // Marker interface useful when used together with MethodAppearanceFineTuner and such customizer objects, to indicate that it doesn't contain reference to the ObjectWrapper (so beware with non-static inner classes) and can be and should be used in call introspection cache keys.\nClass ArrayModel; // A class that will wrap an arbitrary array into TemplateCollectionModel and TemplateSequenceModel interfaces.\nClass BeanModel; // A class that will wrap an arbitrary object into TemplateHashModel interface allowing calls to arbitrary property getters and invocation of accessible methods on the object from a template using the object.foo to access properties and object.bar(arg1, arg2) to invoke methods on it.\nClass BeansModelCache;\nClass BeansWrapper; // ObjectWrapper that is able to expose the Java API of arbitrary Java objects.\nClass BeansWrapper.MethodAppearanceDecision; // Used for MethodAppearanceFineTuner.process(freemarker.ext.beans.BeansWrapper.MethodAppearanceDecisionInput, freemarker.ext.beans.BeansWrapper.MethodAppearanceDecision) to store the results; see there.\nClass BeansWrapper.MethodAppearanceDecisionInput; // Used for MethodAppearanceFineTuner.process(freemarker.ext.beans.BeansWrapper.MethodAppearanceDecisionInput, freemarker.ext.beans.BeansWrapper.MethodAppearanceDecision) as input parameter; see there.\nClass BeansWrapperBuilder; // Gets/creates a BeansWrapper singleton instance that's already configured as specified in the properties of this object; this is recommended over using the BeansWrapper constructors.\nClass BeansWrapperConfiguration; // Holds BeansWrapper configuration settings and defines their defaults.\n", "des": "The default object wrapper of FreeMarker uses this to expose Java Beans and POJO-s to templates."}
{"index": 623, "repo": "freemarker-2.3.32", "code": "package dom;\n\nInterface XPathSupport;\nClass NodeModel; // A base class for wrapping a single W3C DOM Node as a FreeMarker template model.\nClass Transform; // Will be removed (main method in a library, often classified as CWE-489 \"Leftover Debug Code\").\n", "des": "Exposes DOM XML nodes to templates as easily traversable trees; see in the Manual."}
{"index": 624, "repo": "freemarker-2.3.32", "code": "package jdom;\n\nClass NodeListModel; // Use NodeModel instead.\n", "des": "Deprecated, use W3C DOM (freemarker.ext.dom) instead; Exposes JDOM XML nodes to templates."}
{"index": 625, "repo": "freemarker-2.3.32", "code": "package jsp;\n\nClass EventForwarding; // An instance of this class should be registered as a <listener> in the web.xml descriptor in order to correctly dispatch events to event listeners that are specified in TLD files.\nClass FreemarkerTag; // This feature is not supported anymore, also, it uses the deprecated default Configuration.\nClass TaglibFactory; // A hash model associated with a servlet context that can load JSP tag libraries associated with that servlet context.\nClass TaglibFactory.ClasspathMetaInfTldSource; // To search TLD-s under META-INF/**/*.tld inside classpath root containers, that is, in directories and jar-s that are in the classpath (or are visible for the class loader otherwise).\nClass TaglibFactory.ClearMetaInfTldSource; // When it occurs in the TaglibFactory.MetaInfTldSource list, all TaglibFactory.MetaInfTldSource-s before it will be disabled.\nClass TaglibFactory.MetaInfTldSource; // A location within which we will look for META-INF/**/*.tld-s.\nClass TaglibFactory.WebInfPerLibJarMetaInfTldSource; // To search TLD-s under sevletContext:/WEB-INF/lib/*.{jar,zip}/META-INF/**/*.tld, as requested by the JSP specification.\n", "des": "Classes for two-way FreeMarker-JSP integration."}
{"index": 626, "repo": "freemarker-2.3.32", "code": "package jython;\n\nClass JythonHashModel; // Model for Jython dictionaries (PyDictionary and PyStringMap).\nClass JythonModel; // Generic model for arbitrary Jython objects.\nClass JythonNumberModel; // Model for Jython numeric objects (PyInteger, PyLong, PyFloat).\nClass JythonSequenceModel; // Model for Jython sequence objects (PySequence descendants).\nClass JythonVersionAdapter; // Functions that has a different implementation depending on the Jython version used.\nClass JythonWrapper; // An object wrapper that wraps Jython objects into FreeMarker template models and vice versa.\n", "des": "Exposes Jython objects to templates."}
{"index": 627, "repo": "freemarker-2.3.32", "code": "package rhino;\n\nClass RhinoFunctionModel;\nClass RhinoScriptableModel;\nClass RhinoWrapper;\n", "des": "Exposes Rhino (ECMAScript) objects to templates."}
{"index": 628, "repo": "freemarker-2.3.32", "code": "package servlet;\n\nClass AllHttpScopesHashModel; // An extension of SimpleHash that looks up keys in the hash, then in the request, session, and servlet context scopes.\nClass FreemarkerServlet; // FreeMarker MVC View servlet that can be used similarly to JSP views.\nClass HttpRequestHashModel; // TemplateHashModel wrapper for a HttpServletRequest attributes.\nClass HttpRequestParametersHashModel; // TemplateHashModel wrapper for a HttpServletRequest parameters.\nClass HttpSessionHashModel; // TemplateHashModel wrapper for a HttpSession attributes.\nClass IncludePage; // A model that when invoked with a 'path' parameter will perform a servlet include.\nClass ServletContextHashModel; // TemplateHashModel wrapper for a ServletContext attributes.\n", "des": "Servlet for legacy \"Model 2\" frameworks that allows using FreeMarker templates instead of JSP as the MVC View (see in the Manual)."}
{"index": 629, "repo": "freemarker-2.3.32", "code": "package util;\n\nInterface ModelFactory; // Interface used to create various wrapper models in the ModelCache.\nInterface WrapperTemplateModel; // A generic interface for template models that wrap some underlying object, and wish to provide access to that wrapped object.\nClass IdentityHashMap; // Use IdentityHashMap instead.\nClass ModelCache; // Internally used by various wrapper implementations to implement model caching.\n", "des": "Various classes used by freemarker.ext but might be useful outside it too."}
{"index": 630, "repo": "freemarker-2.3.32", "code": "package xml;\n\nClass NodeListModel; // Use NodeModel instead.\n", "des": "Deprecated, use W3C DOM with freemarker.ext.dom instead; Exposes XML from DOM, dom4j or JDOM nodes, uniformly."}
{"index": 631, "repo": "freemarker-2.3.32", "code": "package log;\n\nClass Logger; // Delegates logger creation to an actual logging library.\n", "des": "Logging facility; dispatches FreeMarker log messages to the chosen logger library."}
{"index": 632, "repo": "freemarker-2.3.32", "code": "package template;\n\npackage template.utility; // Various classes used by core FreeMarker code but might be useful outside of it too.\nInterface AdapterTemplateModel; // A TemplateModel that can be unwrapped and then it considers a provided desired (hint) class.\nInterface AttemptExceptionReporter; // Used for the attempt_exception_reported configuration setting.\nInterface ObjectWrapper; // Maps Java objects to the type-system of FreeMarker Template Language (see the TemplateModel interfaces).\nInterface ObjectWrapperAndUnwrapper; // Experimental - subject to change: Adds functionality to ObjectWrapper that creates a plain Java object from a TemplateModel.\nInterface TemplateBooleanModel; // \"boolean\" template language data type; same as in Java; either true or false.\nInterface TemplateCollectionModel; // \"collection\" template language data type: a collection of values that can be enumerated, but can't be or not meant to be accessed by index or key, nor the number of elements in it is known.\nInterface TemplateCollectionModelEx; // \"collection\" template language data type: Adds size/emptiness querybility to TemplateCollectionModel.\nInterface TemplateDateModel; // \"date\", \"time\" and \"date-time\" template language data types: corresponds to Date.\nInterface TemplateDirectiveBody; // Represents the nested content of a directive (TemplateDirectiveModel) invocation.\nInterface TemplateDirectiveModel; // \"directive\" template language data type: used as user-defined directives (much like macros) in templates.\nInterface TemplateExceptionHandler; // Used for the template_exception_handler configuration setting.\nInterface TemplateHashModel; // \"hash\" template language data type: an object that contains other objects accessible through string keys (sub-variable names).\nInterface TemplateHashModelEx; // \"extended hash\" template language data type; extends TemplateHashModel by allowing iterating through its keys and values.\nInterface TemplateHashModelEx2; // Adds key-value pair listing capability to TemplateHashModelEx.\nInterface TemplateHashModelEx2.KeyValuePair; // A key-value pair in a hash; used for TemplateHashModelEx2.KeyValuePairIterator.\nInterface TemplateHashModelEx2.KeyValuePairIterator; // Iterates over the key-value pairs in a hash.\nInterface TemplateMethodModel; // Use TemplateMethodModelEx instead.\n", "des": "The fundamental, most commonly used API-s of FreeMarker; start with Configuration (see also the Getting Started in the Manual.)"}
{"index": 633, "repo": "freemarker-2.3.32", "code": "package utility;\n\nInterface DateUtil.CalendarFieldsToDateConverter; // Used internally by DateUtil; don't use its implementations for anything else.\nInterface DateUtil.DateToISO8601CalendarFactory; // Used internally by DateUtil; don't use its implementations for anything else.\nInterface ObjectFactory<T>; // Used for the trivial cases of the factory pattern.\nInterface ObjectWrapperWithAPISupport; // Experimental - subject to change: Implemented by ObjectWrapper-s to help TemplateModel-s to implement the someValue?api operation.\nInterface RichObjectWrapper; // Experimental - subject to change: Union of the interfaces that a typical feature rich ObjectWrapper is expected to implement.\nInterface WriteProtectable; // Implemented by objects that can be made permanently read-only.\nClass CaptureOutput; // Use block-assignments instead, like <assign x>...</assign>.\nClass ClassUtil;\nClass Collections12; // Not needed anymore, as FreeMarker now requires higher than Java 1.3\nClass CollectionUtils;\nClass Constants; // Frequently used constant TemplateModel values.\nClass DateUtil; // Date and time related utilities.\nClass DateUtil.TrivialCalendarFieldsToDateConverter; // Non-thread-safe implementation that hard-references a calendar internally.\nClass DateUtil.TrivialDateToISO8601CalendarFactory; // Non-thread-safe factory that hard-references a calendar internally.\nClass DeepUnwrap; // Utility methods for unwrapping TemplateModel-s.\nClass DOMNodeModel; // Use NodeModel instead\nClass Execute; // Gives FreeMarker the the ability to execute external commands.\nClass HtmlEscape; // Performs an HTML escape of a given template fragment.\nClass JythonRuntime; // A crude first pass at an embeddable Jython interpreter\nClass NormalizeNewlines; // Transformer that supports FreeMarker legacy behavior: all newlines appearing within the transformed area will be transformed into the platform's default newline.\nClass NullWriter; // A Writer that simply drops what it gets.\nClass NumberUtil; // Number- and math-related utilities.\nClass ObjectConstructor; // An object that you can make available in a template to instantiate arbitrary beans-wrapped objects in a template.\nClass OptimizerUtil;\nClass SecurityUtilities;\n", "des": "Various classes used by core FreeMarker code but might be useful outside of it too."}
{"index": 634, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package server;\n\npackage server.metrics; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage server.scheduler; // Utility classes used for Scheduling.\npackage server.service; // Package org.apache.hadoop.yarn.server.service contains service related classes.\npackage server.uam; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage server.webapp; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\nClass AMHeartbeatRequestHandler; // Extends Thread and provides an implementation that is used for processing the AM heart beat request asynchronously and sending back the response using the callback method registered with the system.\nClass AMHeartbeatRequestHandler.AsyncAllocateRequestInfo; // Data structure that encapsulates AllocateRequest and AsyncCallback instance.\nClass AMRMClientRelayer; // A component that sits in between AMRMClient(Impl) and Yarn RM.\nClass RMNMSecurityInfoClass;\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 635, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package records;\n\nInterface MasterKey;\nClass AppCollectorData;\nClass ContainerQueuingLimit; // Used to hold max wait time / queue length information to be passed back to the NodeManager.\nClass NodeHealthStatus; // NodeHealthStatus is a summary of the health status of the node.\nClass NodeStatus; // NodeStatus is a summary of the status of the node.\nClass OpportunisticContainersStatus; // OpportunisticContainersStatus captures information pertaining to the state of execution of the opportunistic containers within a node.\nEnum NodeAction; // The NodeManager is instructed to perform the given action.\n", "des": "Server records."}
{"index": 636, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package pb;\n\nClass AppCollectorDataPBImpl;\nClass ContainerQueuingLimitPBImpl; // Implementation of ContainerQueuingLimit interface.\nClass MasterKeyPBImpl;\nClass NodeHealthStatusPBImpl;\nClass NodeStatusPBImpl;\nClass OpportunisticContainersStatusPBImpl; // Protocol Buffer implementation of OpportunisticContainersStatus.\n", "des": "Server records PB implementations."}
{"index": 637, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package failover;\n\nClass FederationProxyProviderUtil; // Utility class that creates proxy for specified protocols when federation is enabled.\nClass FederationRMFailoverProxyProvider<T>; // A FailoverProxyProvider implementation that uses the FederationStateStore to determine the ResourceManager to connect to.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 638, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package policies;\n\npackage policies.amrmproxy; // AMRMPRoxy policies.\npackage policies.dao; // DAO objects for serializing/deserializing policy configurations.\npackage policies.exceptions; // Exceptions for policies.\npackage policies.manager; // Various implementation of FederationPolicyManager.\npackage policies.router; // Router policies.\nInterface ConfigurableFederationPolicy; // This interface provides a general method to reinitialize a policy.\nClass AbstractConfigurableFederationPolicy; // Base abstract class for a weighted ConfigurableFederationPolicy.\nClass FederationPolicyInitializationContext; // Context to (re)initialize a FederationAMRMProxyPolicy and FederationRouterPolicy.\nClass FederationPolicyInitializationContextValidator; // Helper class used to factor out common validation steps for policies.\nClass FederationPolicyUtils; // Utility class for Federation policy.\nClass RouterPolicyFacade; // This class provides a facade to the policy subsystem, and handles the lifecycle of policies (e.g., refresh from remote, default behaviors etc.).\n", "des": "Federation Policies."}
{"index": 639, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package amrmproxy;\n\nInterface FederationAMRMProxyPolicy; // Implementors of this interface provide logic to split the list of ResourceRequests received by the AM among various RMs.\nClass AbstractAMRMProxyPolicy; // Base abstract class for FederationAMRMProxyPolicy implementations, that provides common validation for reinitialization.\nClass BroadcastAMRMProxyPolicy; // An implementation of the FederationAMRMProxyPolicy that simply broadcasts each ResourceRequest to all the available sub-clusters.\nClass HomeAMRMProxyPolicy; // An implementation of the FederationAMRMProxyPolicy that simply sends the ResourceRequest to the home subcluster.\nClass LocalityMulticastAMRMProxyPolicy; // An implementation of the FederationAMRMProxyPolicy interface that carefully multicasts the requests with the following behavior:\nClass RejectAMRMProxyPolicy; // An implementation of the FederationAMRMProxyPolicy that simply rejects all requests.\n", "des": "AMRMPRoxy policies."}
{"index": 640, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package dao;\n\nClass WeightedPolicyInfo; // This is a DAO class for the configuration of parameteres for federation policies.\n", "des": "DAO objects for serializing/deserializing policy configurations."}
{"index": 641, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package exceptions;\n\nClass FederationPolicyException; // Generic policy exception.\nClass FederationPolicyInitializationException; // This exception is thrown when the initialization of a federation policy is not successful.\nClass NoActiveSubclustersException; // This exception is thrown when policies cannot locate any active cluster.\nClass UnknownSubclusterException; // This exception is thrown whenever a policy is given a SubClusterId that is unknown.\n", "des": "Exceptions for policies."}
{"index": 642, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package manager;\n\nInterface FederationPolicyManager; // Implementors need to provide the ability to serliaze a policy and its configuration as a SubClusterPolicyConfiguration, as well as provide (re)initialization mechanics for the underlying FederationAMRMProxyPolicy and FederationRouterPolicy.\nClass AbstractPolicyManager; // This class provides basic implementation for common methods that multiple policies will need to implement.\nClass HashBroadcastPolicyManager; // Policy that routes applications via hashing of their queuename, and broadcast resource requests.\nClass HomePolicyManager; // Policy manager which uses the UniformRandomRouterPolicy for the Router and HomeAMRMProxyPolicy as the AMRMProxy policy to find the RM.\nClass PriorityBroadcastPolicyManager; // Policy that allows operator to configure \"weights\" for routing.\nClass RejectAllPolicyManager; // This class represents a simple implementation of a FederationPolicyManager.\nClass UniformBroadcastPolicyManager; // This class represents a simple implementation of a FederationPolicyManager.\nClass WeightedLocalityPolicyManager; // Policy that allows operator to configure \"weights\" for routing.\n", "des": "Various implementation of FederationPolicyManager."}
{"index": 643, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package router;\n\nInterface FederationRouterPolicy; // Implements the logic for determining the routing of an application submission based on a policy.\nClass AbstractRouterPolicy; // Base abstract class for FederationRouterPolicy implementations, that provides common validation for reinitialization.\nClass HashBasedRouterPolicy; // This FederationRouterPolicy pick a subcluster based on the hash of the job's queue name.\nClass LoadBasedRouterPolicy; // This implements a simple load-balancing policy.\nClass LocalityRouterPolicy; // This policy selects the subcluster depending on the node where the Client wants to run its application.\nClass PriorityRouterPolicy; // This implements a policy that interprets \"weights\" as a ordered list of preferences among sub-clusters.\nClass RejectRouterPolicy; // This FederationRouterPolicy simply rejects all incoming requests.\nClass UniformRandomRouterPolicy; // This simple policy picks at uniform random among any of the currently active subclusters.\nClass WeightedRandomRouterPolicy; // This policy implements a weighted random sample among currently active sub-clusters.\n", "des": "Router policies."}
{"index": 644, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package resolver;\n\nInterface SubClusterResolver; // An utility that helps to determine the sub-cluster that a specified node or rack belongs to.\nClass AbstractSubClusterResolver; // Partial implementation of SubClusterResolver, containing basic implementations of the read methods.\nClass DefaultSubClusterResolverImpl; // Default simple sub-cluster and rack resolver class.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 645, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package store;\n\npackage store.exception; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage store.impl; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage store.metrics; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage store.records; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage store.utils; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\nInterface FederationApplicationHomeSubClusterStore; // FederationApplicationHomeSubClusterStore maintains the state of all Applications that have been submitted to the federated cluster.\nInterface FederationMembershipStateStore; // FederationMembershipStateStore maintains the state of all subcluster(s) as encapsulated by SubClusterInfo for all the subcluster(s) that are participating in federation.\nInterface FederationPolicyStore; // The FederationPolicyStore provides a key-value interface to access the policies configured for the system.\nInterface FederationStateStore; // FederationStore extends the three interfaces used to coordinate the state of a federated cluster: FederationApplicationHomeSubClusterStore, FederationMembershipStateStore, and FederationPolicyStore.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 646, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package exception;\n\nClass FederationStateStoreException; // Exception thrown by the FederationStateStore.\nClass FederationStateStoreInvalidInputException; // Exception thrown by the FederationMembershipStateStoreInputValidator, FederationApplicationHomeSubClusterStoreInputValidator, FederationPolicyStoreInputValidator if the input is invalid.\nClass FederationStateStoreRetriableException; // Exception thrown by the FederationStateStore, if it is a retriable exception.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 647, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package impl;\n\nClass MemoryFederationStateStore; // In-memory implementation of FederationStateStore.\nClass SQLFederationStateStore; // SQL implementation of FederationStateStore.\nClass ZookeeperFederationStateStore; // ZooKeeper implementation of FederationStateStore.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 648, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package metrics;\n\nClass FederationStateStoreClientMetrics; // Performance metrics for FederationStateStore implementations.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 649, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package records;\n\nClass AddApplicationHomeSubClusterRequest; // The request sent by the Router to Federation state store to map the home subcluster of a newly submitted application.\nClass AddApplicationHomeSubClusterResponse; // AddApplicationHomeSubClusterResponse contains the answer from the FederationApplicationHomeSubClusterStore to a request to insert a newly generated applicationId and its owner.\nClass ApplicationHomeSubCluster; // ApplicationHomeSubCluster is a report of the runtime information of the application that is running in the federated cluster.\nClass DeleteApplicationHomeSubClusterRequest; // The request to Federation state store to delete the mapping of home subcluster of a submitted application.\nClass DeleteApplicationHomeSubClusterResponse; // DeleteApplicationHomeSubClusterResponse contains the answer from the FederationApplicationHomeSubClusterStore to a request to delete the mapping of home subcluster of a submitted application.\nClass GetApplicationHomeSubClusterRequest; // Request class to obtain the home sub-cluster for the specified ApplicationId.\nClass GetApplicationHomeSubClusterResponse; // The response sent by Federation state store to a query for the home subcluster of a newly submitted application.\nClass GetApplicationsHomeSubClusterRequest; // Request class to obtain the home sub-cluster mapping of all active applications.\nClass GetApplicationsHomeSubClusterResponse; // The response sent by Federation state store to a query for the home subcluster of all submitted applications.\nClass GetSubClusterInfoRequest; // Request class to obtain information about a sub-cluster identified by its SubClusterId.\nClass GetSubClusterInfoResponse; // Response to a query with SubClusterInfo about a sub-cluster.\nClass GetSubClusterPoliciesConfigurationsRequest; // GetSubClusterPoliciesConfigurationsRequest is a request to the FederationPolicyStore to obtain all policy configurations.\nClass GetSubClusterPoliciesConfigurationsResponse; // GetSubClusterPolicyConfigurationResponse contains the answer from the FederationPolicyStore to a request to get all the policies configured in the system via a SubClusterPolicyConfiguration.\nClass GetSubClusterPolicyConfigurationRequest; // GetSubClusterPolicyConfigurationRequest is a request to the FederationPolicyStore to get the configuration of a policy for a given queue.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 650, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package pb;\n\nClass AddApplicationHomeSubClusterRequestPBImpl; // Protocol buffer based implementation of AddApplicationHomeSubClusterRequest.\nClass AddApplicationHomeSubClusterResponsePBImpl; // Protocol buffer based implementation of AddApplicationHomeSubClusterResponse.\nClass ApplicationHomeSubClusterPBImpl; // Protocol buffer based implementation of ApplicationHomeSubCluster.\nClass DeleteApplicationHomeSubClusterRequestPBImpl; // Protocol buffer based implementation of DeleteApplicationHomeSubClusterRequest.\nClass DeleteApplicationHomeSubClusterResponsePBImpl; // Protocol buffer based implementation of DeleteApplicationHomeSubClusterResponse.\nClass GetApplicationHomeSubClusterRequestPBImpl; // Protocol buffer based implementation of GetApplicationHomeSubClusterRequest.\nClass GetApplicationHomeSubClusterResponsePBImpl; // Protocol buffer based implementation of GetApplicationHomeSubClusterResponse.\nClass GetApplicationsHomeSubClusterRequestPBImpl; // Protocol buffer based implementation of GetApplicationsHomeSubClusterRequest.\nClass GetApplicationsHomeSubClusterResponsePBImpl; // Protocol buffer based implementation of GetApplicationsHomeSubClusterResponse.\nClass GetSubClusterInfoRequestPBImpl; // Protocol buffer based implementation of GetSubClusterInfoRequest.\nClass GetSubClusterInfoResponsePBImpl; // Protocol buffer based implementation of GetSubClusterInfoResponse.\nClass GetSubClusterPoliciesConfigurationsRequestPBImpl; // Protocol buffer based implementation of GetSubClusterPoliciesConfigurationsRequest.\nClass GetSubClusterPoliciesConfigurationsResponsePBImpl; // Protocol buffer based implementation of GetSubClusterPoliciesConfigurationsResponse.\nClass GetSubClusterPolicyConfigurationRequestPBImpl; // Protocol buffer based implementation of GetSubClusterPolicyConfigurationRequest.\nClass GetSubClusterPolicyConfigurationResponsePBImpl; // Protocol buffer based implementation of GetSubClusterPolicyConfigurationResponse.\nClass GetSubClustersInfoRequestPBImpl; // Protocol buffer based implementation of GetSubClustersInfoRequest.\nClass GetSubClustersInfoResponsePBImpl; // Protocol buffer based implementation of GetSubClustersInfoResponse.\nClass SetSubClusterPolicyConfigurationRequestPBImpl; // Protocol buffer based implementation of SetSubClusterPolicyConfigurationRequest.\nClass SetSubClusterPolicyConfigurationResponsePBImpl; // Protocol buffer based implementation of SetSubClusterPolicyConfigurationResponse.\nClass SubClusterDeregisterRequestPBImpl; // Protocol buffer based implementation of SubClusterDeregisterRequest.\nClass SubClusterDeregisterResponsePBImpl; // Protocol buffer based implementation of SubClusterDeregisterResponse.\nClass SubClusterHeartbeatRequestPBImpl; // Protocol buffer based implementation of SubClusterHeartbeatRequest.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 651, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package utils;\n\nClass FederationApplicationHomeSubClusterStoreInputValidator; // Utility class to validate the inputs to FederationApplicationHomeSubClusterStore, allows a fail fast mechanism for invalid user inputs.\nClass FederationMembershipStateStoreInputValidator; // Utility class to validate the inputs to FederationMembershipStateStore, allows a fail fast mechanism for invalid user inputs.\nClass FederationPolicyStoreInputValidator; // Utility class to validate the inputs to FederationPolicyStore, allows a fail fast mechanism for invalid user inputs.\nClass FederationStateStoreUtils; // Common utility methods used by the store implementations.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 652, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package utils;\n\nInterface FederationStateStoreFacade.Func<T,TResult>; // Encapsulates a method that has one parameter and returns a value of the type specified by the TResult parameter.\nClass FederationRegistryClient; // Helper class that handles reads and writes to Yarn Registry to support UAM HA and second attempt.\nClass FederationStateStoreFacade; // The FederationStateStoreFacade is an utility wrapper that provides singleton access to the Federation state store.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 653, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package metrics;\n\nClass AMRMClientRelayerMetrics; // Metrics for FederationInterceptor Internals.\nClass OpportunisticSchedulerMetrics; // Metrics for Opportunistic Scheduler.\nEnum AMRMClientRelayerMetrics.RequestType; // Easier classification of request types for logging metrics.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 654, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package scheduler;\n\nClass DistributedOpportunisticContainerAllocator; // The DistributedOpportunisticContainerAllocator allocates containers on a given list of nodes, after modifying the container sizes to respect the limits set by the ResourceManager.\nClass OpportunisticContainerAllocator; // Base abstract class for Opportunistic container allocations, that provides common functions required for Opportunistic container allocation.\nClass OpportunisticContainerAllocator.Allocation; // This class encapsulates container and resourceName for an allocation.\nClass OpportunisticContainerAllocator.AllocationParams; // This class encapsulates application specific parameters used to build a Container.\nClass OpportunisticContainerAllocator.ContainerIdGenerator; // A Container Id Generator.\nClass OpportunisticContainerAllocator.EnrichedResourceRequest; // This class encapsulates Resource Request and provides requests per node and rack.\nClass OpportunisticContainerAllocator.PartitionedResourceRequests; // Class that includes two lists of ResourceRequests: one for GUARANTEED and one for OPPORTUNISTIC ResourceRequests.\nClass OpportunisticContainerContext; // This encapsulates application specific information used by the Opportunistic Container Allocator to allocate containers.\nClass ResourceRequestSet; // A set of resource requests of the same scheduler key ResourceRequestSetKey.\nClass ResourceRequestSetKey; // The scheduler key for a group of ResourceRequest.\nClass SchedulerRequestKey; // Composite key for outstanding scheduler requests for any schedulable entity.\n", "des": "Utility classes used for Scheduling."}
{"index": 655, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package service;\n\nInterface SystemServiceManager; // Marker interface for starting services from RM.\n", "des": "Package org.apache.hadoop.yarn.server.service contains service related classes."}
{"index": 656, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package security;\n\nClass TimelineAuthenticationFilter; // Timeline authentication filter provides delegation token support for ATSv1 and ATSv2.\nClass TimelineAuthenticationFilterInitializer; // Initializes TimelineAuthenticationFilter which provides support for Kerberos HTTP SPNEGO authentication.\nClass TimelineDelgationTokenSecretManagerService; // Abstract implementation of delegation token manager service for different versions of timeline service.\n", "des": "Package org.apache.hadoop.server.timeline.security contains classes related to timeline authentication filters and abstract delegation token service for ATSv1 and ATSv2."}
{"index": 657, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package uam;\n\nClass UnmanagedAMPoolManager; // A service that manages a pool of UAM managers in UnmanagedApplicationManager.\nClass UnmanagedApplicationManager; // UnmanagedApplicationManager is used to register unmanaged application and negotiate for resources from resource managers.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 658, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package timeline;\n\nClass TimelineServerUtils; // Set of utility methods to be used across timeline reader and collector.\n", "des": "Package org.apache.hadoop.server.util.timeline contains utility classes used by ATSv1 and ATSv2 on the server side."}
{"index": 659, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package csi;\n\npackage csi.exception; // This package contains volume related exception classes.\nClass CsiConstants; // CSI constants.\nClass VolumeCapabilityRange; // Volume capability range that specified in a volume resource request, this range defines the desired min/max capacity.\nClass VolumeCapabilityRange.VolumeCapabilityBuilder; // The builder used to build a VolumeCapabilityRange instance.\nClass VolumeId; // Unique ID for a volume.\nClass VolumeMetaData; // VolumeMetaData defines all valid info for a CSI compatible volume.\nClass VolumeMetaData.VolumeSpecBuilder; // The builder used to build a VolumeMetaData instance.\n", "des": "This package contains common volume related classes."}
{"index": 660, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package exception;\n\nClass InvalidVolumeException; // This exception is thrown when a volume is found not valid.\nClass VolumeException; // Base class for all volume related exceptions.\nClass VolumeProvisioningException; // Exception throws when volume provisioning is failed.\n", "des": "This package contains volume related exception classes."}
{"index": 661, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package webapp;\n\nInterface AppInfoProvider; // Classes implementing this interface are used in the LogServlet for providing various application related information.\nInterface YarnWebServiceParams; // Common web service parameters which could be used in RM/NM/AHS WebService.\nClass AppAttemptBlock;\nClass AppBlock;\nClass AppsBlock;\nClass ContainerBlock;\nClass ErrorsAndWarningsBlock;\nClass ErrorsAndWarningsBlock.ErrorMetrics;\nClass ErrorsAndWarningsBlock.MetricsBase;\nClass ErrorsAndWarningsBlock.WarningMetrics;\nClass LogServlet; // Extracts aggregated logs and related information.\nClass LogWebService; // Support only ATSv2 client only.\nClass LogWebServiceUtils; // Log web service utils class.\nClass WebPageUtils;\nClass WebServices;\nClass WrappedLogMetaRequest; // WrappedLogMetaRequest is wrapping a log request initiated by the client.\nClass WrappedLogMetaRequest.Builder;\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 662, "repo": "commons-lang3-3.12.0", "code": "package lang3;\n\npackage lang3.arch; // Provides classes to work with the values of the os.arch system property.\npackage lang3.builder; // Assists in creating consistent equals(Object), toString(), hashCode(), and compareTo(Object) methods.\npackage lang3.compare; // Provides classes to work with the Comparable and Comparator interfaces.\npackage lang3.concurrent; // Provides support classes for multi-threaded programming.\npackage lang3.event; // Provides some useful event-based utilities.\npackage lang3.exception; // Provides functionality for Exceptions.\npackage lang3.function; // Provides functional interfaces to complement those in java.lang.function and utilities for working with Java 8 lambdas.\npackage lang3.math; // Extends java.math for business mathematical classes.\npackage lang3.mutable; // Provides typed mutable wrappers to primitive values and Object.\npackage lang3.reflect; // Accumulates common high-level uses of the java.lang.reflect APIs.\npackage lang3.stream; // Provides utility classes to complement those in java.util.stream.\npackage lang3.text; // Provides classes for handling and manipulating text, partly as an extension to java.text.\npackage lang3.time; // Provides classes and methods to work with dates and durations.\npackage lang3.tuple; // Tuple classes, starting with a Pair class in version 3.0.\nInterface Functions.FailableBiConsumer<O1,O2,T extends Throwable>; // Use FailableBiConsumer.\nInterface Functions.FailableBiFunction<O1,O2,R,T extends Throwable>; // Use FailableBiFunction.\nInterface Functions.FailableBiPredicate<O1,O2,T extends Throwable>; // Use FailableBiPredicate.\nInterface Functions.FailableCallable<R,T extends Throwable>; // Use FailableCallable.\nInterface Functions.FailableConsumer<O,T extends Throwable>; // Use FailableConsumer.\nInterface Functions.FailableFunction<I,R,T extends Throwable>; // Use FailableFunction.\nInterface Functions.FailablePredicate<I,T extends Throwable>; // Use FailablePredicate.\nInterface Functions.FailableRunnable<T extends Throwable>; // Use FailableRunnable.\n", "des": "Provides highly reusable static utility methods, chiefly concerned with adding value to the java.lang classes."}
{"index": 663, "repo": "commons-lang3-3.12.0", "code": "package arch;\n\nClass Processor; // The Processor represents a microprocessor and defines some properties like architecture and type of the microprocessor.\nEnum Processor.Arch; // The Processor.Arch enum defines the architecture of a microprocessor.\nEnum Processor.Type; // The Processor.Type enum defines types of a microprocessor.\n", "des": "Provides classes to work with the values of the os.arch system property."}
{"index": 664, "repo": "commons-lang3-3.12.0", "code": "package builder;\n\nInterface Builder<T>; // The Builder interface is designed to designate a class as a builder object in the Builder design pattern.\nInterface Diffable<T>; // Diffable classes can be compared with other objects for differences.\nClass CompareToBuilder; // Assists in implementing Comparable.compareTo(Object) methods.\nClass Diff<T>; // A Diff contains the differences between two Diffable class fields.\nClass DiffBuilder<T>; // Assists in implementing Diffable.diff(Object) methods.\nClass DiffResult<T>; // A DiffResult contains a collection of the differences between two Diffable objects.\nClass EqualsBuilder; // Assists in implementing Object.equals(Object) methods.\nClass HashCodeBuilder; // Assists in implementing Object.hashCode() methods.\nClass MultilineRecursiveToStringStyle; // Works with ToStringBuilder to create a \"deep\" toString.\nClass RecursiveToStringStyle; // Works with ToStringBuilder to create a \"deep\" toString.\nClass ReflectionDiffBuilder<T>; // Assists in implementing Diffable.diff(Object) methods.\nClass ReflectionToStringBuilder; // Assists in implementing Object.toString() methods using reflection.\nClass StandardToStringStyle; // Works with ToStringBuilder to create a toString.\nClass ToStringBuilder; // Assists in implementing Object.toString() methods.\nClass ToStringStyle; // Controls String formatting for ToStringBuilder.\nAnnotation Type EqualsExclude; // Use this annotation to exclude a field from being used by the various reflectionEquals methods defined on EqualsBuilder.\nAnnotation Type HashCodeExclude; // Use this annotation to exclude a field from being used by the various reflectionHashcode methods defined on HashCodeBuilder.\nAnnotation Type ToStringExclude; // Use this annotation to exclude a field from being used by the ReflectionToStringBuilder.\nAnnotation Type ToStringSummary; // Use this annotation on the fields to get the summary instead of the detailed information when using ReflectionToStringBuilder.\n", "des": "Assists in creating consistent equals(Object), toString(), hashCode(), and compareTo(Object) methods."}
{"index": 665, "repo": "commons-lang3-3.12.0", "code": "package compare;\n\nClass ComparableUtils; // Utility library to provide helper methods for translating Comparable.compareTo(T) result into a boolean.\nClass ComparableUtils.ComparableCheckBuilder<A extends Comparable<A>>; // Provides access to the available methods\nClass ObjectToStringComparator; // Compares Object's Object.toString() values.\n", "des": "Provides classes to work with the Comparable and Comparator interfaces."}
{"index": 666, "repo": "commons-lang3-3.12.0", "code": "package concurrent;\n\npackage concurrent.locks; // Provides support classes for multi-threaded programming.\nInterface CircuitBreaker<T>; // An interface describing a Circuit Breaker component.\nInterface Computable<I,O>; // Definition of an interface for a wrapper around a calculation that takes a single parameter and returns a result.\nInterface ConcurrentInitializer<T>; // Definition of an interface for the thread-safe initialization of objects.\nClass AbstractCircuitBreaker<T>; // Base class for circuit breakers.\nClass AtomicInitializer<T>; // A specialized implementation of the ConcurrentInitializer interface based on an AtomicReference variable.\nClass AtomicSafeInitializer<T>; // A specialized ConcurrentInitializer implementation which is similar to AtomicInitializer, but ensures that the AtomicSafeInitializer.initialize() method is called only once.\nClass BackgroundInitializer<T>; // A class that allows complex initialization operations in a background task.\nClass BasicThreadFactory; // An implementation of the ThreadFactory interface that provides some configuration options for the threads it creates.\nClass BasicThreadFactory.Builder; // A builder class for creating instances of BasicThreadFactory.\nClass CallableBackgroundInitializer<T>; // A specialized BackgroundInitializer implementation that wraps a Callable object.\nClass ConcurrentUtils; // An utility class providing functionality related to the java.util.concurrent package.\nClass ConstantInitializer<T>; // A very simple implementation of the ConcurrentInitializer interface which always returns the same object.\nClass EventCountCircuitBreaker; // A simple implementation of the Circuit Breaker pattern that counts specific events.\nClass LazyInitializer<T>; // This class provides a generic implementation of the lazy initialization pattern.\nClass Memoizer<I,O>; // Definition of an interface for a wrapper around a calculation that takes a single parameter and returns a result.\nClass MultiBackgroundInitializer; // A specialized BackgroundInitializer implementation that can deal with multiple background initialization tasks.\nClass MultiBackgroundInitializer.MultiBackgroundInitializerResults; // A data class for storing the results of the background initialization performed by MultiBackgroundInitializer.\nClass ThresholdCircuitBreaker; // A simple implementation of the Circuit Breaker pattern that opens if the requested increment amount is greater than a given threshold.\nClass TimedSemaphore; // A specialized semaphore implementation that provides a number of permits in a given time frame.\nEnum AbstractCircuitBreaker.State; // An internal enumeration representing the different states of a circuit breaker.\n", "des": "Provides support classes for multi-threaded programming."}
{"index": 667, "repo": "commons-lang3-3.12.0", "code": "package locks;\n\nClass LockingVisitors; // Combines the monitor and visitor pattern to work with locked objects.\nClass LockingVisitors.LockVisitor<O,L>; // Wraps a domain object and a lock for access by lambdas.\nClass LockingVisitors.ReadWriteLockVisitor<O>; // This class implements a wrapper for a locked (hidden) object, and provides the means to access it.\nClass LockingVisitors.StampedLockVisitor<O>; // This class implements a wrapper for a locked (hidden) object, and provides the means to access it.\n", "des": "Provides support classes for multi-threaded programming."}
{"index": 668, "repo": "commons-lang3-3.12.0", "code": "package event;\n\nClass EventListenerSupport<L>; // An EventListenerSupport object can be used to manage a list of event listeners of a particular type.\nClass EventUtils; // Provides some useful event-based utility methods.\n", "des": "Provides some useful event-based utilities."}
{"index": 669, "repo": "commons-lang3-3.12.0", "code": "package exception;\n\nInterface ExceptionContext; // Allows the storage and retrieval of contextual information based on label-value pairs for exceptions.\nClass DefaultExceptionContext; // Default implementation of the context storing the label-value pairs for contexted exceptions.\nClass ExceptionUtils; // Provides utilities for manipulating and examining Throwable objects.\nClass CloneFailedException; // Exception thrown when a clone cannot be created.\nClass ContextedException; // An exception that provides an easy and safe way to add contextual information.\nClass ContextedRuntimeException; // A runtime exception that provides an easy and safe way to add contextual information.\n", "des": "Provides functionality for Exceptions."}
{"index": 670, "repo": "commons-lang3-3.12.0", "code": "package function;\n\nInterface FailableBiConsumer<T,U,E extends Throwable>; // A functional interface like BiConsumer that declares a Throwable.\nInterface FailableBiFunction<T,U,R,E extends Throwable>; // A functional interface like BiFunction that declares a Throwable.\nInterface FailableBiPredicate<T,U,E extends Throwable>; // A functional interface like BiPredicate that declares a Throwable.\nInterface FailableBooleanSupplier<E extends Throwable>; // A functional interface like BooleanSupplier that declares a Throwable.\nInterface FailableCallable<R,E extends Throwable>; // A functional interface like Callable that declares a Throwable.\nInterface FailableConsumer<T,E extends Throwable>; // A functional interface like Consumer that declares a Throwable.\nInterface FailableDoubleBinaryOperator<E extends Throwable>; // A functional interface like DoubleBinaryOperator that declares a Throwable.\nInterface FailableDoubleConsumer<E extends Throwable>; // A functional interface like DoubleConsumer that declares a Throwable.\nInterface FailableDoubleFunction<R,E extends Throwable>; // A functional interface like DoubleFunction that declares a Throwable.\nInterface FailableDoublePredicate<E extends Throwable>; // A functional interface like DoublePredicate that declares a Throwable.\nInterface FailableDoubleSupplier<E extends Throwable>; // A functional interface like DoubleSupplier that declares a Throwable.\nInterface FailableDoubleToIntFunction<E extends Throwable>; // A functional interface like DoubleToIntFunction that declares a Throwable.\nInterface FailableDoubleToLongFunction<E extends Throwable>; // A functional interface like DoubleToLongFunction that declares a Throwable.\nInterface FailableDoubleUnaryOperator<E extends Throwable>; // A functional interface like DoubleUnaryOperator that declares a Throwable.\nInterface FailableFunction<T,R,E extends Throwable>; // A functional interface like Function that declares a Throwable.\nInterface FailableIntBinaryOperator<E extends Throwable>; // A functional interface like IntBinaryOperator that declares a Throwable.\nInterface FailableIntConsumer<E extends Throwable>; // A functional interface like IntConsumer that declares a Throwable.\nInterface FailableIntFunction<R,E extends Throwable>; // A functional interface like IntFunction that declares a Throwable.\nInterface FailableIntPredicate<E extends Throwable>; // A functional interface like IntPredicate that declares a Throwable.\n", "des": "Provides functional interfaces to complement those in java.lang.function and utilities for working with Java 8 lambdas."}
{"index": 671, "repo": "commons-lang3-3.12.0", "code": "package math;\n\nClass Fraction; // Fraction is a Number implementation that stores fractions accurately.\nClass IEEE754rUtils; // Provides IEEE-754r variants of NumberUtils methods.\nClass NumberUtils; // Provides extra functionality for Java Number classes.\n", "des": "Extends java.math for business mathematical classes."}
{"index": 672, "repo": "commons-lang3-3.12.0", "code": "package mutable;\n\nInterface Mutable<T>; // Provides mutable access to a value.\nClass MutableBoolean; // A mutable boolean wrapper.\nClass MutableByte; // A mutable byte wrapper.\nClass MutableDouble; // A mutable double wrapper.\nClass MutableFloat; // A mutable float wrapper.\nClass MutableInt; // A mutable int wrapper.\nClass MutableLong; // A mutable long wrapper.\nClass MutableObject<T>; // A mutable Object wrapper.\nClass MutableShort; // A mutable short wrapper.\n", "des": "Provides typed mutable wrappers to primitive values and Object."}
{"index": 673, "repo": "commons-lang3-3.12.0", "code": "package reflect;\n\nInterface Typed<T>; // Generalization of \"has a type.\"\nClass ConstructorUtils; // Utility reflection methods focused on constructors, modeled after MethodUtils.\nClass FieldUtils; // Utilities for working with Fields by reflection.\nClass InheritanceUtils; // Utility methods focusing on inheritance.\nClass MethodUtils; // Utility reflection methods focused on Methods, originally from Commons BeanUtils.\nClass TypeLiteral<T>; // Type literal comparable to javax.enterprise.util.TypeLiteral, made generally available outside the JEE context.\nClass TypeUtils; // Utility methods focusing on type inspection, particularly with regard to generics.\nClass TypeUtils.WildcardTypeBuilder; // WildcardType builder.\n", "des": "Accumulates common high-level uses of the java.lang.reflect APIs."}
{"index": 674, "repo": "commons-lang3-3.12.0", "code": "package stream;\n\nClass Streams; // Provides utility functions, and classes for working with the java.util.stream package, or more generally, with Java 8 lambdas.\nClass Streams.ArrayCollector<O>; // A Collector type for arrays.\nClass Streams.FailableStream<O>; // A reduced, and simplified version of a Stream with failable method signatures.\n", "des": "Provides utility classes to complement those in java.util.stream."}
{"index": 675, "repo": "commons-lang3-3.12.0", "code": "package text;\n\npackage text.translate; // An API for creating text translation routines from a set of smaller building blocks.\nInterface FormatFactory; // as of 3.6, use commons-text FormatFactory instead\nClass CompositeFormat; // as of 3.6, use commons-text CompositeFormat instead\nClass ExtendedMessageFormat; // as of 3.6, use commons-text ExtendedMessageFormat instead\nClass FormattableUtils; // as of 3.6, use commons-text FormattableUtils instead\nClass StrBuilder; // as of 3.6, use commons-text TextStringBuilder instead\nClass StrLookup<V>; // as of 3.6, use commons-text StringLookupFactory instead\nClass StrMatcher; // as of 3.6, use commons-text StringMatcherFactory instead\nClass StrSubstitutor; // as of 3.6, use commons-text StringSubstitutor instead\nClass StrTokenizer; // as of 3.6, use commons-text StringTokenizer instead\nClass WordUtils; // as of 3.6, use commons-text WordUtils instead\n", "des": "Provides classes for handling and manipulating text, partly as an extension to java.text."}
{"index": 676, "repo": "commons-lang3-3.12.0", "code": "package translate;\n\nClass AggregateTranslator; // as of 3.6, use commons-text AggregateTranslator instead\nClass CharSequenceTranslator; // as of 3.6, use commons-text CharSequenceTranslator instead\nClass CodePointTranslator; // as of 3.6, use commons-text CharSequenceTranslator instead\nClass EntityArrays; // as of 3.6, use commons-text EntityArrays instead\nClass JavaUnicodeEscaper; // as of 3.6, use commons-text UnicodeEscaper instead\nClass LookupTranslator; // as of 3.6, use commons-text LookupTranslator instead\nClass NumericEntityEscaper; // as of 3.6, use commons-text NumericEntityEscaper instead\nClass NumericEntityUnescaper; // as of 3.6, use commons-text NumericEntityUnescaper instead\nClass OctalUnescaper; // as of 3.6, use commons-text OctalUnescaper instead\nClass UnicodeEscaper; // as of 3.6, use commons-text UnicodeEscaper instead\nClass UnicodeUnescaper; // as of 3.6, use commons-text UnicodeUnescaper instead\nClass UnicodeUnpairedSurrogateRemover; // as of 3.6, use commons-text UnicodeUnpairedSurrogateRemover instead\nEnum NumericEntityUnescaper.OPTION; // Enumerates NumericEntityUnescaper options for unescaping.\n", "des": "An API for creating text translation routines from a set of smaller building blocks."}
{"index": 677, "repo": "commons-lang3-3.12.0", "code": "package time;\n\nInterface DateParser; // DateParser is the \"missing\" interface for the parsing methods of DateFormat.\nInterface DatePrinter; // DatePrinter is the \"missing\" interface for the format methods of DateFormat.\nClass CalendarUtils; // Helps use Calendars.\nClass DateFormatUtils; // Date and time formatting utilities and constants.\nClass DateUtils; // A suite of utilities surrounding the use of the Calendar and Date object.\nClass DurationFormatUtils; // Duration formatting utilities and constants.\nClass DurationUtils; // Utilities for Duration.\nClass FastDateFormat; // FastDateFormat is a fast and thread-safe version of SimpleDateFormat.\nClass FastDateParser; // FastDateParser is a fast and thread-safe version of SimpleDateFormat.\nClass FastDatePrinter; // FastDatePrinter is a fast and thread-safe version of SimpleDateFormat.\nClass FastTimeZone; // Faster methods to produce custom time zones.\nClass StopWatch; // StopWatch provides a convenient API for timings.\nClass TimeZones; // Helps to deal with TimeZones.\n", "des": "Provides classes and methods to work with dates and durations."}
{"index": 678, "repo": "commons-lang3-3.12.0", "code": "package tuple;\n\nClass ImmutablePair<L,R>; // An immutable pair consisting of two Object elements.\nClass ImmutableTriple<L,M,R>; // An immutable triple consisting of three Object elements.\nClass MutablePair<L,R>; // A mutable pair consisting of two Object elements.\nClass MutableTriple<L,M,R>; // A mutable triple consisting of three Object elements.\nClass Pair<L,R>; // A pair consisting of two elements.\nClass Triple<L,M,R>; // A triple consisting of three elements.\n", "des": "Tuple classes, starting with a Pair class in version 3.0."}
{"index": 679, "repo": "jackson-databind-2.15.2", "code": "package databind;\n\npackage databind.annotation; // Annotations that directly depend on classes in databinding bundle (not just Jackson core) and cannot be included in Jackson core annotations package (because it cannot have any external dependencies).\npackage databind.cfg; // Package that contains most of configuration-related classes; exception being couple of most-commonly used configuration things (like Feature enumerations) that are at the main level (com.fasterxml.jackson.databind).\npackage databind.deser; // Contains implementation classes of deserialization part of data binding.\npackage databind.ext; // Contains extended support for \"external\" packages: things that may or may not be present in runtime environment, but that are commonly enough used so that explicit support can be added.\npackage databind.introspect; // Functionality needed for Bean introspection, required for detecting accessors and mutators for Beans, as well as locating and handling method annotations.\npackage databind.jdk14; // Contains helper class(es) needed to support some of JDK14+ features without requiring running or building using JDK 14.\npackage databind.jsonFormatVisitors; // Classes used for exposing logical structure of POJOs as Jackson sees it, and exposed via ObjectMapper.acceptJsonFormatVisitor(Class, JsonFormatVisitorWrapper) and ObjectMapper.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.JavaType, JsonFormatVisitorWrapper) methods.\npackage databind.jsonschema; // Classes needed for JSON schema support (currently just ability to generate schemas using serialization part of data mapping)\npackage databind.jsontype; // Package that contains interfaces that define how to implement functionality for dynamically resolving type during deserialization.\npackage databind.module; // Package that contains classes and interfaces to help implement custom extension Modules (which are registered using ObjectMapper.registerModule(com.fasterxml.jackson.databind.Module).\npackage databind.node; // Contains concrete JsonNode implementations Jackson uses for the Tree model.\npackage databind.ser; // Contains implementation classes of serialization part of data binding.\nInterface AnnotationIntrospector.XmlExtensions; // Add-on extension used for XML-specific configuration, needed to decouple format module functionality from pluggable introspection functionality (especially JAXB-annotation related one).\n", "des": "Basic data binding (mapping) functionality that allows for reading JSON content into Java Objects (POJOs) and JSON Trees (JsonNode), as well as writing Java Objects and trees as JSON."}
{"index": 680, "repo": "jackson-databind-2.15.2", "code": "package annotation;\n\nClass JsonPOJOBuilder.Value; // Simple value container for containing values read from JsonPOJOBuilder annotation instance.\nClass NoClass; // Marker class used with annotations to indicate \"no class\".\nEnum JsonSerialize.Inclusion;\nEnum JsonSerialize.Typing; // Enumeration used with JsonSerialize.typing() property to define whether type detection is based on dynamic runtime type (DYNAMIC) or declared type (STATIC).\nAnnotation Type EnumNaming; // Annotation that can be used to indicate a EnumNamingStrategy to use for annotated class.\nAnnotation Type JacksonStdImpl; // Marker interface used to indicate implementation classes (serializers, deserializers etc) that are standard ones Jackson uses; not custom ones that application has added.\nAnnotation Type JsonAppend; // Annotation used to add \"virtual\" properties that will be written after regular properties during serialization.\nAnnotation Type JsonAppend.Attr; // Definition of a single attribute-backed property.\nAnnotation Type JsonAppend.Prop; // Definition of a single general virtual property.\nAnnotation Type JsonDeserialize; // Annotation use for configuring deserialization aspects, by attaching to \"setter\" methods or fields, or to value classes.\nAnnotation Type JsonNaming; // Annotation that can be used to indicate a PropertyNamingStrategy to use for annotated class.\nAnnotation Type JsonPOJOBuilder; // Annotation used to configure details of a Builder class: instances of which are used as Builders for deserialized POJO values, instead of POJOs being instantiated using constructors or factory methods.\nAnnotation Type JsonSerialize; // Annotation used for configuring serialization aspects, by attaching to \"getter\" methods or fields, or to value classes.\nAnnotation Type JsonTypeIdResolver; // Annotation that can be used to plug a custom type identifier handler (TypeIdResolver) to be used by TypeSerializers and TypeDeserializers for converting between java types and type id included in JSON content.\nAnnotation Type JsonTypeResolver; // Annotation that can be used to explicitly define custom resolver used for handling serialization and deserialization of type information, needed for handling of polymorphic types (or sometimes just for linking abstract types to concrete types)\nAnnotation Type JsonValueInstantiator; // Annotation that can be used to indicate a ValueInstantiator to use for creating instances of specified type.\n", "des": "Annotations that directly depend on classes in databinding bundle (not just Jackson core) and cannot be included in Jackson core annotations package (because it cannot have any external dependencies)."}
{"index": 681, "repo": "jackson-databind-2.15.2", "code": "package cfg;\n\nInterface ConfigFeature; // Interface that actual SerializationFeature enumerations used by MapperConfig implementations must implement.\nInterface DatatypeFeature; // Interface that defines interaction with data type specific configuration features.\nClass BaseSettings; // Immutable container class used to store simple configuration settings for both serialization and deserialization.\nClass CoercionConfig;\nClass CoercionConfigs;\nClass ConfigOverride; // Configuration object that is accessed by databinding functionality to find overrides to configuration of properties, based on declared type of the property.\nClass ConfigOverrides; // Container for individual ConfigOverride values.\nClass ConstructorDetector; // Configurable handler used to select aspects of selecting constructor to use as \"Creator\" for POJOs.\nClass ContextAttributes; // Helper class used for storing and accessing per-call attributes.\nClass ContextAttributes.Impl;\nClass DatatypeFeatures; // Immutable value class that contains settings for multiple DatatypeFeature enumerations.\nClass DeserializerFactoryConfig; // Configuration settings container class for DeserializerFactory.\nClass HandlerInstantiator; // Helper class used for handling details of creating handler instances (things like JsonSerializers, JsonDeserializers, various type handlers) of specific types.\nClass MapperBuilder<M extends ObjectMapper,B extends MapperBuilder<M,B>>; // Jackson 3 will introduce fully immutable, builder-based system for constructing ObjectMappers.\nClass MapperConfig<T extends MapperConfig<T>>; // Interface that defines functionality accessible through both serialization and deserialization configuration objects; accessors to mode-independent configuration settings and such.\nClass MapperConfigBase<CFG extends ConfigFeature,T extends MapperConfigBase<CFG,T>>;\nClass MutableCoercionConfig; // Mutable version of CoercionConfig (or rather, extended API) exposed during configuration phase of ObjectMapper construction (via Builder).\nClass MutableConfigOverride; // Extension of ConfigOverride that allows changing of contained configuration settings.\nClass PackageVersion; // Automatically generated from PackageVersion.java.in during packageVersion-generate execution of maven-replacer-plugin in pom.xml.\nClass SerializerFactoryConfig; // Configuration settings container class for SerializerFactory implementations.\nEnum CoercionAction; // Set of possible actions for requested coercion from an input shape CoercionInputShape that does not directly or naturally match target type (LogicalType).\n", "des": "Package that contains most of configuration-related classes; exception being couple of most-commonly used configuration things (like Feature enumerations) that are at the main level (com.fasterxml.jackson.databind)."}
{"index": 682, "repo": "jackson-databind-2.15.2", "code": "package deser;\n\npackage deser.impl; // Contains those implementation classes of deserialization part of data binding that are not considered part of public or semi-public interfaces.\npackage deser.std; // Contains public standard implementations of abstraction that Jackson uses.\nInterface ContextualDeserializer; // Add-on interface that JsonDeserializers can implement to get a callback that can be used to create contextual (context-dependent) instances of deserializer to use for handling properties of supported type.\nInterface ContextualKeyDeserializer; // Add-on interface that KeyDeserializers can implement to get a callback that can be used to create contextual instances of key deserializer to use for handling Map keys of supported type.\nInterface Deserializers; // Interface that defines API for simple extensions that can provide additional deserializers for various types.\nInterface KeyDeserializers; // Interface that defines API for simple extensions that can provide additional deserializers for deserializer Map keys of various types, from JSON property names.\nInterface NullValueProvider; // Helper interface implemented by classes that are to be used as null providers during deserialization.\nInterface ResolvableDeserializer; // Interface used to indicate deserializers that want to do post-processing after construction but before being returned to caller (and possibly cached) and used.\nInterface ValueInstantiator.Gettable;\nInterface ValueInstantiators; // Interface for providers of ValueInstantiator instances.\nClass AbstractDeserializer; // Deserializer only used for abstract types used as placeholders during polymorphic type handling deserialization.\nClass BasicDeserializerFactory; // Abstract factory base class that can provide deserializers for standard JDK classes, including collection classes and simple heuristics for \"upcasting\" common collection interface types (such as Collection).\nClass BasicDeserializerFactory.ContainerDefaultMappings; // Helper class to contain default mappings for abstract JDK Collection and Map types.\nClass BasicDeserializerFactory.CreatorCollectionState; // Helper class to contain largish number of parameters that need to be passed during Creator introspection.\nClass BeanDeserializer; // Deserializer class that can deserialize instances of arbitrary bean objects, usually from JSON Object structs,\nClass BeanDeserializerBase; // Base class for BeanDeserializer.\nClass BeanDeserializerBuilder; // Builder class used for aggregating deserialization information about a POJO, in order to build a JsonDeserializer for deserializing instances.\nClass BeanDeserializerFactory; // Concrete deserializer factory class that adds full Bean deserializer construction logic using class introspection.\n", "des": "Contains implementation classes of deserialization part of data binding."}
{"index": 683, "repo": "jackson-databind-2.15.2", "code": "package impl;\n\nClass BeanAsArrayBuilderDeserializer;\nClass BeanAsArrayDeserializer; // Variant of BeanDeserializer used for handling deserialization of POJOs when serialized as JSON Arrays, instead of JSON Objects.\nClass BeanPropertyMap; // Helper class used for storing mapping from property name to SettableBeanProperty instances.\nClass CreatorCandidate;\nClass CreatorCandidate.Param;\nClass CreatorCollector; // Container class for storing information on creators (based on annotations, visibility), to be able to build actual ValueInstantiator later on.\nClass ErrorThrowingDeserializer; // A deserializer that stores an Error caught during constructing of the deserializer, which needs to be deferred and only during actual attempt to deserialize a value of given type.\nClass ExternalTypeHandler; // Helper class that is used to flatten JSON structure when using \"external type id\" (see JsonTypeInfo.As.EXTERNAL_PROPERTY).\nClass ExternalTypeHandler.Builder;\nClass FailingDeserializer; // Special bogus \"serializer\" that will throw MismatchedInputException if an attempt is made to deserialize a value.\nClass FieldProperty; // This concrete sub-class implements property that is set directly assigning to a Field.\nClass InnerClassProperty; // This sub-class is used to handle special case of value being a non-static inner class.\nClass JavaUtilCollectionsDeserializers; // Helper class used to contain logic for deserializing \"special\" containers from java.util.Collections and java.util.Arrays.\nClass JDKValueInstantiators; // Container for a set of ValueInstantiators used for certain critical JDK value types, either as performance optimization for initialization time observed by profiling, or due to difficulty in otherwise finding constructors.\nClass ManagedReferenceProperty; // Wrapper property that is used to handle managed (forward) properties Basically just needs to delegate first to actual forward property, and then to back property.\nClass MergingSettableBeanProperty; // SettableBeanProperty implementation that will try to access value of the property first, and if non-null value found, pass that for update (using JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, Object)) instead of constructing a new value.\nClass MethodProperty; // This concrete sub-class implements property that is set using regular \"setter\" method.\n", "des": "Contains those implementation classes of deserialization part of data binding that are not considered part of public or semi-public interfaces."}
{"index": 684, "repo": "jackson-databind-2.15.2", "code": "package std;\n\nClass ArrayBlockingQueueDeserializer; // We need a custom deserializer both because ArrayBlockingQueue has no default constructor AND because it has size limit used for constructing underlying storage automatically.\nClass AtomicBooleanDeserializer;\nClass AtomicIntegerDeserializer;\nClass AtomicLongDeserializer;\nClass AtomicReferenceDeserializer;\nClass ByteBufferDeserializer;\nClass CollectionDeserializer; // Basic serializer that can take JSON \"Array\" structure and construct a Collection instance, with typed contents.\nClass CollectionDeserializer.CollectionReferringAccumulator; // Helper class for dealing with Object Id references for values contained in collections being deserialized.\nClass ContainerDeserializerBase<T>; // Intermediate base deserializer class that adds more shared accessor so that other classes can access information about contained (value) types\nClass DateDeserializers; // Container class for core JDK date/time type deserializers.\nClass DateDeserializers.CalendarDeserializer;\nClass DateDeserializers.DateBasedDeserializer<T>;\nClass DateDeserializers.DateDeserializer; // Simple deserializer for handling Date values.\nClass DateDeserializers.SqlDateDeserializer; // Compared to plain old Date, SQL version is easier to deal with: mostly because it is more limited.\nClass DateDeserializers.TimestampDeserializer; // Simple deserializer for handling Timestamp values.\nClass DelegatingDeserializer; // Base class that simplifies implementations of JsonDeserializers that mostly delegate functionality to another deserializer implementation (possibly forming a chaining of deserializers delegating functionality in some cases)\nClass EnumDeserializer; // Deserializer class that can deserialize instances of specified Enum class from Strings and Integers.\nClass EnumMapDeserializer; // Deserializer for EnumMap values.\nClass EnumSetDeserializer; // Standard deserializer for EnumSets.\nClass FromStringDeserializer<T>; // Base class for simple deserializers that serialize values from String representation: this includes JSON Strings and other Scalar values that can be coerced into text, like Numbers and Booleans).\nClass FromStringDeserializer.Std; // \"Chameleon\" deserializer that works on simple types that are deserialized from a simple String.\nClass JdkDeserializers; // Container class that contains serializers for JDK types that require special handling for some reason.\nClass JsonLocationInstantiator; // For JsonLocation, we should be able to just implement ValueInstantiator (not that explicit one would be very hard but...)\n", "des": "Contains public standard implementations of abstraction that Jackson uses."}
{"index": 685, "repo": "jackson-databind-2.15.2", "code": "package ext;\n\nClass CoreXMLDeserializers; // Container deserializers that handle \"core\" XML types: ones included in standard JDK 1.5.\nClass CoreXMLDeserializers.Std; // Combo-deserializer that supports deserialization of somewhat optional javax.xml types QName, Duration and XMLGregorianCalendar.\nClass CoreXMLSerializers; // Provider for serializers of XML types that are part of full JDK 1.5, but that some alleged 1.5 platforms are missing (Android, GAE).\nClass CoreXMLSerializers.XMLGregorianCalendarSerializer;\nClass DOMDeserializer<T>; // Base for serializers that allows parsing DOM Documents from JSON Strings.\nClass DOMDeserializer.DocumentDeserializer;\nClass DOMDeserializer.NodeDeserializer;\nClass DOMSerializer;\nClass Java7Handlers; // Since v2.15, Java7HandlersImpl is no longer loaded via reflection.\nClass Java7HandlersImpl; // Since v2.15, this is no longer loaded via reflection.\nClass Java7Support; // To support Java7-incomplete platforms, we will offer support for JDK 7 annotations through this class, loaded dynamically; if loading fails, support will be missing.\nClass Java7SupportImpl;\nClass NioPathDeserializer;\nClass NioPathSerializer;\nClass OptionalHandlerFactory; // Helper class used for isolating details of handling optional+external types (javax.xml classes) from standard factories that offer them.\nClass SqlBlobSerializer; // Serializer implementation for Blob to write as binary (for JSON and other formats Base64-encoded String, for binary formats as true binary).\n", "des": "Contains extended support for \"external\" packages: things that may or may not be present in runtime environment, but that are commonly enough used so that explicit support can be added."}
{"index": 686, "repo": "jackson-databind-2.15.2", "code": "package introspect;\n\nInterface ClassIntrospector.MixInResolver; // Interface used for decoupling details of how mix-in annotation definitions are accessed (via this interface), and how they are stored (defined by classes that implement the interface)\nInterface DefaultAccessorNamingStrategy.BaseNameValidator; // Definition of a handler API to use for checking whether given base name (remainder of accessor method name after removing prefix) is acceptable based on various rules.\nInterface TypeResolutionContext; // Interface that defines API used by members (like AnnotatedMethod) to dynamically resolve types they have.\nInterface VisibilityChecker<T extends VisibilityChecker<T>>; // Interface for object used for determine which property elements (methods, fields, constructors) can be auto-detected, with respect to their visibility modifiers.\nInterface WithMember<T>;\nClass AccessorNamingStrategy; // API for handlers used to \"mangle\" names of \"getter\" and \"setter\" methods to find implicit property names.\nClass AccessorNamingStrategy.Base; // Helper class that implements all abstract methods with dummy implementations.\nClass AccessorNamingStrategy.Provider; // Interface for provider (factory) for constructing AccessorNamingStrategy for given type of deserialization target\nClass Annotated; // Shared base class used for anything on which annotations (included within a AnnotationMap).\nClass AnnotatedAndMetadata<A extends Annotated,M>; // Silly little \"Pair\" class needed for 2-element tuples (without adding dependency to one of 3rd party packages that has one).\nClass AnnotatedClass;\nClass AnnotatedClass.Creators;\nClass AnnotatedClassResolver; // Helper class that contains logic for resolving annotations to construct AnnotatedClass instances.\nClass AnnotatedConstructor;\nClass AnnotatedField; // Object that represents non-static (and usually non-transient/volatile) fields of a class.\nClass AnnotatedFieldCollector;\nClass AnnotatedMember; // Intermediate base class for annotated entities that are members of a class; fields, methods and constructors.\nClass AnnotatedMethod;\nClass AnnotatedMethodCollector;\nClass AnnotatedMethodMap; // Simple helper class used to keep track of collection of AnnotatedMethods, accessible by lookup.\nClass AnnotatedParameter; // Object that represents method parameters, mostly so that associated annotations can be processed conveniently.\nClass AnnotatedWithParams; // Intermediate base class that encapsulates features that constructors and methods share.\n", "des": "Functionality needed for Bean introspection, required for detecting accessors and mutators for Beans, as well as locating and handling method annotations."}
{"index": 687, "repo": "jackson-databind-2.15.2", "code": "package jdk14;\n\nClass JDK14Util; // Helper class to support some of JDK 14 (and later) features without Jackson itself being run on (or even built with) Java 14.\n", "des": "Contains helper class(es) needed to support some of JDK14+ features without requiring running or building using JDK 14."}
{"index": 688, "repo": "jackson-databind-2.15.2", "code": "package jsonFormatVisitors;\n\nInterface JsonAnyFormatVisitor;\nInterface JsonArrayFormatVisitor;\nInterface JsonBooleanFormatVisitor;\nInterface JsonFormatVisitable; // Interface JsonSerializer implements to allow for visiting type hierarchy.\nInterface JsonFormatVisitorWithSerializerProvider;\nInterface JsonFormatVisitorWrapper; // Interface for visitor callbacks, when type in question can be any of legal JSON types.\nInterface JsonIntegerFormatVisitor;\nInterface JsonMapFormatVisitor;\nInterface JsonNullFormatVisitor;\nInterface JsonNumberFormatVisitor;\nInterface JsonObjectFormatVisitor; // Visitor called when properties of a type that maps to JSON Object are being visited: this usually means POJOs, but sometimes other types use it too (like EnumMap).\nInterface JsonStringFormatVisitor;\nInterface JsonValueFormatVisitor;\nClass JsonAnyFormatVisitor.Base; // Default \"empty\" implementation, useful as the base to start on; especially as it is guaranteed to implement all the method of the interface, even if new methods are getting added.\nClass JsonArrayFormatVisitor.Base; // Default \"empty\" implementation, useful as the base to start on; especially as it is guaranteed to implement all the method of the interface, even if new methods are getting added.\nClass JsonBooleanFormatVisitor.Base; // Default \"empty\" implementation, useful as the base to start on; especially as it is guaranteed to implement all the method of the interface, even if new methods are getting added.\nClass JsonFormatVisitorWrapper.Base; // Empty \"no-op\" implementation of JsonFormatVisitorWrapper, suitable for sub-classing.\nClass JsonIntegerFormatVisitor.Base; // Default \"empty\" implementation, useful as the base to start on; especially as it is guaranteed to implement all the method of the interface, even if new methods are getting added.\nClass JsonMapFormatVisitor.Base; // Default \"empty\" implementation, useful as the base to start on; especially as it is guaranteed to implement all the method of the interface, even if new methods are getting added.\nClass JsonNullFormatVisitor.Base; // Default \"empty\" implementation, useful as the base to start on; especially as it is guaranteed to implement all the method of the interface, even if new methods are getting added.\n", "des": "Classes used for exposing logical structure of POJOs as Jackson sees it, and exposed via ObjectMapper.acceptJsonFormatVisitor(Class, JsonFormatVisitorWrapper) and ObjectMapper.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.JavaType, JsonFormatVisitorWrapper) methods."}
{"index": 689, "repo": "jackson-databind-2.15.2", "code": "package jsonschema;\n\nInterface SchemaAware; // Since 2.15, we recommend use of external JSON Schema generator module\nClass JsonSchema; // Since 2.2, we recommend use of external JSON Schema generator module\nAnnotation Type JsonSerializableSchema; // Since 2.15, we recommend use of external JSON Schema generator module\n", "des": "Classes needed for JSON schema support (currently just ability to generate schemas using serialization part of data mapping)"}
{"index": 690, "repo": "jackson-databind-2.15.2", "code": "package jsontype;\n\npackage jsontype.impl; // Package that contains standard implementations for TypeResolverBuilder and TypeIdResolver.\nInterface TypeIdResolver; // Interface that defines standard API for converting types to type identifiers and vice versa.\nInterface TypeResolverBuilder<T extends TypeResolverBuilder<T>>; // Interface that defines builders that are configured based on annotations (like JsonTypeInfo or JAXB annotations), and produce type serializers and deserializers used for handling type information embedded in JSON to allow for safe polymorphic type handling.\nClass BasicPolymorphicTypeValidator; // Standard BasicPolymorphicTypeValidator implementation that users may want to use for constructing validators based on simple class hierarchy and/or name patterns to allow and/or deny certain subtypes.\nClass BasicPolymorphicTypeValidator.Builder; // Builder class for configuring and constructing immutable BasicPolymorphicTypeValidator instances.\nClass BasicPolymorphicTypeValidator.NameMatcher; // General matcher interface (predicate) for validating unresolved subclass class name.\nClass BasicPolymorphicTypeValidator.TypeMatcher; // General matcher interface (predicate) for validating class values (base type or resolved subtype)\nClass DefaultBaseTypeLimitingValidator; // PolymorphicTypeValidator that will only allow polymorphic handling if the base type is NOT one of potential dangerous base types (see DefaultBaseTypeLimitingValidator.isUnsafeBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.JavaType) for specific list of such base types).\nClass NamedType; // Simple container class for types with optional logical name, used as external identifier\nClass PolymorphicTypeValidator; // Interface for classes that handle validation of class-name - based subtypes used with Polymorphic Deserialization: both via \"default typing\" and explicit @JsonTypeInfo when using Java Class name as Type Identifier.\nClass PolymorphicTypeValidator.Base; // Shared base class with partial implementation (with all validation calls returning PolymorphicTypeValidator.Validity.INDETERMINATE) and convenience methods for indicating failure reasons.\nClass SubtypeResolver; // Helper object used for handling registration on resolving of super-types to sub-types.\nClass TypeDeserializer; // Interface for deserializing type information from JSON content, to type-safely deserialize data into correct polymorphic instance (when type inclusion has been enabled for type handled).\n", "des": "Package that contains interfaces that define how to implement functionality for dynamically resolving type during deserialization."}
{"index": 691, "repo": "jackson-databind-2.15.2", "code": "package impl;\n\nClass AsArrayTypeDeserializer; // Type deserializer used with JsonTypeInfo.As.WRAPPER_ARRAY inclusion mechanism.\nClass AsArrayTypeSerializer; // Type serializer that will embed type information in an array, as the first element, and actual value as the second element.\nClass AsDeductionTypeDeserializer; // A TypeDeserializer capable of deducing polymorphic types based on the fields available.\nClass AsDeductionTypeSerializer;\nClass AsExistingPropertyTypeSerializer; // Type serializer used with JsonTypeInfo.As.EXISTING_PROPERTY inclusion mechanism.\nClass AsExternalTypeDeserializer; // Type deserializer used with JsonTypeInfo.As.EXTERNAL_PROPERTY inclusion mechanism.\nClass AsExternalTypeSerializer; // Type serializer that preferably embeds type information as an \"external\" type property; embedded in enclosing JSON object.\nClass AsPropertyTypeDeserializer; // Type deserializer used with JsonTypeInfo.As.PROPERTY inclusion mechanism.\nClass AsPropertyTypeSerializer; // Type serializer that preferably embeds type information as an additional JSON Object property, if possible (when resulting serialization would use JSON Object).\nClass AsWrapperTypeDeserializer; // Type deserializer used with JsonTypeInfo.As.WRAPPER_OBJECT inclusion mechanism.\nClass AsWrapperTypeSerializer; // Type wrapper that tries to use an extra JSON Object, with a single entry that has type name as key, to serialize type information.\nClass ClassNameIdResolver; // TypeIdResolver implementation that converts between fully-qualified Java class names and (JSON) Strings.\nClass LaissezFaireSubTypeValidator; // Default PolymorphicTypeValidator used unless explicit one is constructed (and, in 2.11, MapperFeature.BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES not enabled).\nClass MinimalClassNameIdResolver;\nClass StdSubtypeResolver; // Standard SubtypeResolver implementation.\nClass StdTypeResolverBuilder; // Default TypeResolverBuilder implementation.\nClass SubTypeValidator; // Helper class used to encapsulate rules that determine subtypes that are invalid to use, even with default typing, mostly due to security concerns.\nClass TypeDeserializerBase; // Base class for all standard Jackson TypeDeserializers.\nClass TypeIdResolverBase; // Partial base implementation of TypeIdResolver: all custom implementations are strongly recommended to extend this class, instead of directly implementing TypeIdResolver.\nClass TypeNameIdResolver;\nClass TypeSerializerBase;\n", "des": "Package that contains standard implementations for TypeResolverBuilder and TypeIdResolver."}
{"index": 692, "repo": "jackson-databind-2.15.2", "code": "package module;\n\nClass SimpleAbstractTypeResolver; // Simple AbstractTypeResolver implementation, which is based on static mapping from abstract super types into sub types (concrete or abstract), but retaining generic parameterization.\nClass SimpleDeserializers; // Simple implementation Deserializers which allows registration of deserializers based on raw (type erased class).\nClass SimpleKeyDeserializers; // Simple implementation KeyDeserializers which allows registration of deserializers based on raw (type erased class).\nClass SimpleModule; // Vanilla Module implementation that allows registration of serializers and deserializers, bean serializer and deserializer modifiers, registration of subtypes and mix-ins as well as some other commonly needed aspects (addition of custom AbstractTypeResolvers, ValueInstantiators).\nClass SimpleSerializers; // Simple implementation Serializers which allows registration of serializers based on raw (type erased class).\nClass SimpleValueInstantiators;\n", "des": "Package that contains classes and interfaces to help implement custom extension Modules (which are registered using ObjectMapper.registerModule(com.fasterxml.jackson.databind.Module)."}
{"index": 693, "repo": "jackson-databind-2.15.2", "code": "package node;\n\nInterface JsonNodeCreator; // Interface that defines common \"creator\" functionality implemented both by JsonNodeFactory and ContainerNode (that is, JSON Object and Array nodes).\nClass ArrayNode; // Node class that represents Arrays mapped from JSON content.\nClass BaseJsonNode; // Abstract base class common to all standard JsonNode implementations.\nClass BigIntegerNode; // Numeric node that contains simple 64-bit integer values.\nClass BinaryNode; // Value node that contains Base64 encoded binary value, which will be output and stored as Json String value.\nClass BooleanNode; // This concrete value class is used to contain boolean (true / false) values.\nClass ContainerNode<T extends ContainerNode<T>>; // This intermediate base class is used for all container nodes, specifically, array and object nodes.\nClass DecimalNode; // Numeric node that contains values that do not fit in simple integer (int, long) or floating point (double) values.\nClass DoubleNode; // Numeric node that contains 64-bit (\"double precision\") floating point values simple 32-bit integer values.\nClass FloatNode; // JsonNode implementation for efficiently containing 32-bit `float` values.\nClass IntNode; // Numeric node that contains simple 32-bit integer values.\nClass JsonNodeFactory; // Base class that specifies methods for getting access to Node instances (newly constructed, or shared, depending on type), as well as basic implementation of the methods.\nClass LongNode; // Numeric node that contains simple 64-bit integer values.\nClass MissingNode; // This singleton node class is generated to denote \"missing nodes\" along paths that do not exist.\nClass NullNode; // This singleton value class is used to contain explicit JSON null value.\nClass NumericNode; // Intermediate value node used for numeric nodes.\nClass ObjectNode; // Node that maps to JSON Object structures in JSON content.\nClass POJONode; // Value node that contains a wrapped POJO, to be serialized as a JSON constructed through data mapping (usually done by calling ObjectMapper).\nClass ShortNode; // Numeric node that contains simple 16-bit integer values.\nClass TextNode; // Value node that contains a text value.\nClass TreeTraversingParser; // Facade over JsonNode that implements JsonParser to allow accessing contents of JSON tree in alternate form (stream of tokens).\n", "des": "Contains concrete JsonNode implementations Jackson uses for the Tree model."}
{"index": 694, "repo": "jackson-databind-2.15.2", "code": "package ser;\n\npackage ser.impl; // Contains implementation classes of serialization part of data binding.\nInterface BeanPropertyFilter; // Since 2.3: use PropertyFilter instead.\nInterface ContextualSerializer; // Add-on interface that JsonSerializers can implement to get a callback that can be used to create contextual instances of serializer to use for handling properties of supported type.\nInterface PropertyFilter; // Interface that defines API for filter objects use (as configured using JsonFilter) for filtering bean properties to serialize.\nInterface ResolvableSerializer; // Interface used to indicate serializers that want to do post-processing after construction and being added to SerializerProvider, but before being used.\nInterface Serializers; // Interface that defines API for simple extensions that can provide additional serializers for various types.\nClass AnyGetterWriter; // Class similar to BeanPropertyWriter, but that will be used for serializing JsonAnyGetter annotated (Map) properties\nClass BasicSerializerFactory; // Factory class that can provide serializers for standard JDK classes, as well as custom classes that extend standard classes or implement one of \"well-known\" interfaces (such as Collection).\nClass BeanPropertyWriter; // Base bean property handler class, which implements common parts of reflection-based functionality for accessing a property value and serializing it.\nClass BeanSerializer; // Serializer class that can serialize Java objects that map to JSON Object output.\nClass BeanSerializerBuilder; // Builder class used for aggregating deserialization information about a POJO, in order to build a JsonSerializer for serializing intances.\nClass BeanSerializerFactory; // Factory class that can provide serializers for any regular Java beans (as defined by \"having at least one get method recognizable as bean accessor\" -- where Object.getClass() does not count); as well as for \"standard\" JDK types.\nClass BeanSerializerModifier; // Abstract class that defines API for objects that can be registered (for BeanSerializerFactory to participate in constructing BeanSerializer instances.\nClass ContainerSerializer<T>; // Intermediate base class for serializers used for serializing types that contain element(s) of other types, such as arrays, Collections (Lists, Sets etc) and Maps and iterable things (Iterators).\nClass DefaultSerializerProvider; // Standard implementation used by ObjectMapper: adds methods only exposed to ObjectMapper, as well as constructors.\nClass DefaultSerializerProvider.Impl; // Concrete implementation that defines factory method(s), defined as final.\n", "des": "Contains implementation classes of serialization part of data binding."}
{"index": 695, "repo": "jackson-databind-2.15.2", "code": "package impl;\n\nClass AttributePropertyWriter; // VirtualBeanPropertyWriter implementation used for JsonAppend, to serialize properties backed-by dynamically assignable attribute values.\nClass BeanAsArraySerializer; // Specialized POJO serializer that differs from BeanSerializer in that instead of producing a JSON Object it will output a JSON Array, omitting field names, and serializing values in specified serialization order.\nClass FailingSerializer; // Special bogus \"serializer\" that will throw JsonMappingException if its FailingSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) gets invoked.\nClass FilteredBeanPropertyWriter; // Decorated BeanPropertyWriter that will filter out properties that are not to be included in currently active JsonView.\nClass IndexedListSerializer; // This is an optimized serializer for Lists that can be efficiently traversed by index (as opposed to others, such as LinkedList that cannot}.\nClass IndexedStringListSerializer; // Efficient implement for serializing Lists that contains Strings and are random-accessible.\nClass IteratorSerializer;\nClass MapEntrySerializer;\nClass ObjectIdWriter; // Object that knows how to serialize Object Ids.\nClass PropertyBasedObjectIdGenerator;\nClass PropertySerializerMap; // Helper container used for resolving serializers for dynamic (possibly but not necessarily polymorphic) properties: properties whose type is not forced to use dynamic (declared) type and that are not final.\nClass PropertySerializerMap.SerializerAndMapResult; // Value class used for returning tuple that has both serializer that was retrieved and new map instance\nClass ReadOnlyClassToSerializerMap; // Optimized lookup table for accessing two types of serializers; typed and non-typed.\nClass SimpleBeanPropertyFilter; // Simple PropertyFilter implementation that only uses property name to determine whether to serialize property as is, or to filter it out.\nClass SimpleBeanPropertyFilter.FilterExceptFilter; // Filter implementation which defaults to filtering out unknown properties and only serializes ones explicitly listed.\nClass SimpleBeanPropertyFilter.SerializeExceptFilter; // Filter implementation which defaults to serializing all properties, except for ones explicitly listed to be filtered out.\nClass SimpleFilterProvider; // Simple FilterProvider implementation that just stores direct id-to-filter mapping.\nClass StringArraySerializer; // Standard serializer used for String[] values.\n", "des": "Contains implementation classes of serialization part of data binding."}
{"index": 696, "repo": "jackson-databind-2.15.2", "code": "package type;\n\nClass ArrayType; // Array types represent Java arrays, both primitive and object valued.\nClass ClassKey; // Key class, used as an efficient and accurate key for locating per-class values, such as JsonSerializers.\nClass ClassStack; // Simple helper class used to keep track of 'call stack' for classes being referenced (as well as unbound variables)\nClass CollectionLikeType; // Type that represents things that act similar to Collection; but may or may not be instances of that interface.\nClass CollectionType; // Type that represents Java Collection types (Lists, Sets).\nClass MapLikeType; // Type that represents Map-like types; things that consist of key/value pairs but that do not necessarily implement Map, but that do not have enough introspection functionality to allow for some level of generic handling.\nClass MapType; // Type that represents \"true\" Java Map types.\nClass PlaceholderForType; // Helper type used when introspecting bindings for already resolved types, needed for specialization.\nClass ReferenceType; // Specialized SimpleType for types that are referential types, that is, values that can be dereferenced to another value (or null), of different type.\nClass ResolvedRecursiveType; // Internal placeholder type used for self-references.\nClass SimpleType; // Simple types are defined as anything other than one of recognized container types (arrays, Collections, Maps).\nClass TypeBase;\nClass TypeBindings; // Helper class used for resolving type parameters for given class\nClass TypeFactory; // Class used for creating concrete JavaType instances, given various inputs.\nClass TypeModifier; // Class that defines API that can be used to modify details of JavaType instances constructed using TypeFactory.\nClass TypeParser; // Simple recursive-descent parser for parsing canonical JavaType representations and constructing type instances.\nEnum LogicalType; // Set of logical types (or type categories, classes of classes), used for defining applicability of configuration like coercion configuration.\n", "des": "Package that contains concrete implementations of JavaType, as well as the factory (TypeFactory) for constructing instances from various input data types (like Class, Type) and programmatically (for structured types, arrays, Lists and Maps)."}
{"index": 697, "repo": "jackson-databind-2.15.2", "code": "package util;\n\npackage util.internal; // This package contains an implementation of a bounded ConcurrentMap data structure.\nInterface Annotations; // Interface that defines interface for accessing contents of a collection of annotations.\nInterface Converter<IN,OUT>; // Helper interface for things that convert Objects of one type to another.\nInterface LookupCache<K,V>; // An interface describing the required API for the Jackson-databind Type cache.\nInterface Named; // Simple tag interface mostly to allow sorting by name.\nClass ArrayBuilders; // Helper class that contains set of distinct builders for different arrays of primitive values.\nClass ArrayBuilders.BooleanBuilder;\nClass ArrayBuilders.ByteBuilder;\nClass ArrayBuilders.DoubleBuilder;\nClass ArrayBuilders.FloatBuilder;\nClass ArrayBuilders.IntBuilder;\nClass ArrayBuilders.LongBuilder;\nClass ArrayBuilders.ShortBuilder;\nClass ArrayIterator<T>; // Iterator implementation used to efficiently expose contents of an Array as read-only iterator.\nClass BeanUtil; // Helper class that contains functionality needed by both serialization and deserialization side.\nClass ByteBufferBackedInputStream; // Simple InputStream implementation that exposes currently available content of a ByteBuffer.\nClass ByteBufferBackedOutputStream; // Simple OutputStream implementation that appends content written in given ByteBuffer instance.\nClass ClassUtil;\nClass ClassUtil.Ctor; // Value class used for caching Constructor declarations; used because caching done by JDK appears to be somewhat inefficient for some use cases.\nClass CompactStringObjectMap; // Specialized lookup class that implements functionality similar to Map, but for special case of key always being String and using more compact (and memory-access friendly) hashing scheme.\nClass Converter.None; // This marker class is only to be used with annotations, to indicate that no converter is to be used.\nClass EnumResolver; // Helper class used to resolve String values (either JSON Object field names or regular String values) into Java Enum instances.\nClass EnumValues; // Helper class used for storing String serializations of Enums, to match to/from external representations.\nClass ExceptionUtil; // Utility methods for dealing with exceptions/throwables\nClass IgnorePropertiesUtil;\nClass IgnorePropertiesUtil.Checker; // Helper class to encapsulate logic from static shouldIgnore method of util class.\nClass ISO8601DateFormat; // Use StdDateFormat instead\nClass ISO8601Utils;\n", "des": "Utility classes for Mapper package."}
{"index": 698, "repo": "jackson-databind-2.15.2", "code": "package internal;\n\nClass PrivateMaxEntriesMap<K,V>; // A hash table supporting full concurrency of retrievals, adjustable expected concurrency for updates, and a maximum capacity to bound the map by.\nClass PrivateMaxEntriesMap.Builder<K,V>; // A builder that creates PrivateMaxEntriesMap instances.\n", "des": "This package contains an implementation of a bounded ConcurrentMap data structure."}
{"index": 699, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package dsl;\n\npackage dsl.amqp; // Provides AMQP Components support for Spring Integration Java DSL.\npackage dsl.channel; // Contains MessageChannel Builders DSL.\npackage dsl.config; // Provides config classes of the Spring Integration Java DSL.\npackage dsl.context; // The context support classes for Spring Integration Java DSL.\npackage dsl.core; // Provides core classes of the Spring Integration Java DSL.\npackage dsl.feed; // Provides Feed Components support for Spring Integration Java DSL.\npackage dsl.file; // Provides File Components support for Spring Integration Java DSL.\npackage dsl.ftp; // Provides FTP Components support for Spring Integration Java DSL.\npackage dsl.http; // Provides HTTP Components support for Spring Integration Java DSL.\npackage dsl.jms; // Provides JMS Components support for Spring Integration Java DSL.\npackage dsl.jpa; // Provides JPA Components support for Spring Integration Java DSL.\npackage dsl.kafka; // Provides Kafka Components support for Spring Integration Java DSL.\npackage dsl.mail; // Provides Mail Components support for Spring Integration Java DSL.\npackage dsl.scripting; // Provides Scripting Components support for Spring Integration Java DSL.\npackage dsl.sftp; // Provides SFTP Components support for Spring Integration Java DSL.\npackage dsl.support; // Provides various support classes used across Spring Integration Java DSL Components.\npackage dsl.transaction; // Provides classes supporting Transactions.\nInterface IntegrationFlow; // The main Integration DSL abstraction.\nInterface IntegrationFlows.ChannelsFunction; // The Channels-specific Function.\nInterface IntegrationFlows.MessageProducersFunction; // The MessageProducers-specific Function.\nInterface IntegrationFlows.MessageSourcesFunction; // The MessageSources-specific Function.\nInterface IntegrationFlows.MessagingGatewaysFunction; // The MessagingGateways-specific Function.\nClass AbstractRouterSpec<S extends AbstractRouterSpec<S,R>,R extends org.springframework.integration.router.AbstractMessageRouter>; // A MessageHandlerSpec for AbstractMessageRouters.\nClass Adapters;\nClass AggregatorSpec; // A CorrelationHandlerSpec for an AggregatingMessageHandler.\nClass BarrierSpec; // A MessageHandlerSpec for the BarrierMessageHandler.\nClass Channels;\n", "des": "Root package of the Spring Integration Java DSL."}
{"index": 700, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package amqp;\n\nClass Amqp; // Factory class for AMQP components.\nClass AmqpAsyncOutboundGatewaySpec;\nClass AmqpBaseInboundChannelAdapterSpec<S extends AmqpBaseInboundChannelAdapterSpec<S>>; // The base MessageProducerSpec implementation for a AmqpInboundChannelAdapter.\nClass AmqpBaseInboundGatewaySpec<S extends AmqpBaseInboundGatewaySpec<S>>; // A base MessagingGatewaySpec implementation for AmqpInboundGateway endpoint options.\nClass AmqpBaseOutboundEndpointSpec<S extends AmqpBaseOutboundEndpointSpec<S,E>,E extends org.springframework.integration.amqp.outbound.AbstractAmqpOutboundEndpoint>; // The base MessageHandlerSpec for AbstractAmqpOutboundEndpoints.\nClass AmqpInboundChannelAdapterSpec; // A MessageProducerSpec for AmqpInboundChannelAdapters.\nClass AmqpInboundGatewaySpec; // An AmqpBaseInboundGatewaySpec implementation for a AmqpInboundGateway.\nClass AmqpMessageChannelSpec<S extends AmqpMessageChannelSpec<S>>; // An AmqpPollableMessageChannelSpec for a message-driven PointToPointSubscribableAmqpChannel.\nClass AmqpOutboundEndpointSpec;\nClass AmqpPollableMessageChannelSpec<S extends AmqpPollableMessageChannelSpec<S>>; // A MessageChannelSpec for a AbstractAmqpChannels.\nClass AmqpPublishSubscribeMessageChannelSpec; // A AmqpMessageChannelSpec for PublishSubscribeAmqpChannels.\n", "des": "Provides AMQP Components support for Spring Integration Java DSL."}
{"index": 701, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package channel;\n\nClass DirectChannelSpec;\nClass ExecutorChannelSpec;\nClass LoadBalancingChannelSpec<S extends MessageChannelSpec<S,C>,C extends org.springframework.integration.channel.AbstractMessageChannel>;\nClass MessageChannels;\nClass MessageChannelSpec<S extends MessageChannelSpec<S,C>,C extends org.springframework.integration.channel.AbstractMessageChannel>;\nClass PriorityChannelSpec;\nClass PublishSubscribeChannelSpec<S extends PublishSubscribeChannelSpec<S>>;\nClass QueueChannelSpec;\nClass QueueChannelSpec.MessageStoreSpec; // The ChannelMessageStore-specific QueueChannelSpec extension.\nClass RendezvousChannelSpec;\nClass WireTapSpec; // The IntegrationComponentSpec implementation for the WireTap component.\n", "des": "Contains MessageChannel Builders DSL."}
{"index": 702, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package config;\n\nClass DslIntegrationConfigurationInitializer; // The Java DSL Integration infrastructure beanFactory initializer.\nClass IntegrationFlowBeanPostProcessor; // A BeanPostProcessor to parse IntegrationFlow beans and register their components as beans in the provided BeanFactory, if necessary.\n", "des": "Provides config classes of the Spring Integration Java DSL."}
{"index": 703, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package context;\n\nClass IntegrationFlowContext; // A public API for dynamic (manual) registration of IntegrationFlow, not via standard bean registration phase.\nClass IntegrationFlowRegistration; // Instances of this classes are returned as a result of IntegrationFlowContext.registration(IntegrationFlow) invocation and provide an API for some useful IntegrationFlow options and its lifecycle.\n", "des": "The context support classes for Spring Integration Java DSL."}
{"index": 704, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package core;\n\nInterface ComponentsRegistration; // The marker interface for the IntegrationComponentSpec implementation, when there is need to register as beans not only the target spec's components, but some additional components, e.g.\nClass ConsumerEndpointSpec<S extends ConsumerEndpointSpec<S,H>,H extends org.springframework.messaging.MessageHandler>; // A EndpointSpec for consumer endpoints.\nClass EndpointSpec<S extends EndpointSpec<S,F,H>,F extends org.springframework.beans.factory.BeanNameAware,H>; // An IntegrationComponentSpec for endpoints.\nClass IntegrationComponentSpec<S extends IntegrationComponentSpec<S,T>,T>; // The common Builder abstraction.\nClass MessageHandlerSpec<S extends MessageHandlerSpec<S,H>,H extends org.springframework.messaging.MessageHandler>; // An IntegrationComponentSpec for MessageHandlers.\nClass MessageProcessorSpec<S extends MessageProcessorSpec<S>>; // The IntegrationComponentSpec specific base class for MessageProcessors.\nClass MessageProducerSpec<S extends MessageProducerSpec<S,P>,P extends org.springframework.integration.endpoint.MessageProducerSupport>; // An IntegrationComponentSpec for MessageProducers.\nClass MessageSourceSpec<S extends MessageSourceSpec<S,H>,H extends org.springframework.integration.core.MessageSource<?>>; // An IntegrationComponentSpec for MessageSources.\nClass MessagingGatewaySpec<S extends MessagingGatewaySpec<S,G>,G extends org.springframework.integration.gateway.MessagingGatewaySupport>; // An IntegrationComponentSpec for MessagingGatewaySupports.\nClass PollerFactory; // An Adapter class for the Pollers factory.\nClass Pollers; // An utility class to provide PollerSpecs for PollerMetadata configuration variants.\nClass PollerSpec; // An IntegrationComponentSpec for PollerMetadatas.\n", "des": "Provides core classes of the Spring Integration Java DSL."}
{"index": 705, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package feed;\n\nClass Feed; // The Spring Integration Feed components Factory.\nClass FeedEntryMessageSourceSpec; // A MessageSourceSpec for a FeedEntryMessageSource.\n", "des": "Provides Feed Components support for Spring Integration Java DSL."}
{"index": 706, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package file;\n\nClass FileInboundChannelAdapterSpec; // A MessageSourceSpec for a FileReadingMessageSource.\nClass Files; // The Spring Integration File components Factory.\nClass FileSplitterSpec; // The MessageHandlerSpec for the FileSplitter.\nClass FileTransferringMessageHandlerSpec<F,S extends FileTransferringMessageHandlerSpec<F,S>>;\nClass FileWritingMessageHandlerSpec;\nClass RemoteFileInboundChannelAdapterSpec<F,S extends RemoteFileInboundChannelAdapterSpec<F,S,MS>,MS extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizingMessageSource<F>>; // A MessageSourceSpec for an AbstractInboundFileSynchronizingMessageSource.\nClass RemoteFileOutboundGatewaySpec<F,S extends RemoteFileOutboundGatewaySpec<F,S>>;\nClass TailAdapterSpec; // A MessageProducerSpec for file tailing adapters.\n", "des": "Provides File Components support for Spring Integration Java DSL."}
{"index": 707, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package ftp;\n\nClass Ftp; // The factory for Spring Integration FTP components.\nClass FtpInboundChannelAdapterSpec; // A RemoteFileInboundChannelAdapterSpec for a FtpInboundFileSynchronizingMessageSource.\nClass FtpMessageHandlerSpec;\nClass FtpOutboundGatewaySpec;\n", "des": "Provides FTP Components support for Spring Integration Java DSL."}
{"index": 708, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package http;\n\nClass BaseHttpInboundEndpointSpec<S extends BaseHttpInboundEndpointSpec<S,E>,E extends org.springframework.integration.http.inbound.HttpRequestHandlingEndpointSupport>;\nClass BaseHttpInboundEndpointSpec.CrossOriginSpec; // A fluent API for the CrossOrigin.\nClass BaseHttpInboundEndpointSpec.RequestMappingSpec; // A fluent API for the RequestMapping.\nClass Http; // The HTTP components Factory.\nClass HttpControllerEndpointSpec; // The BaseHttpInboundEndpointSpec implementation for the HttpRequestHandlingController.\nClass HttpMessageHandlerSpec; // The MessageHandlerSpec implementation for the HttpRequestExecutingMessageHandler.\nClass HttpRequestHandlerEndpointSpec; // The BaseHttpInboundEndpointSpec implementation for the HttpRequestHandlingMessagingGateway.\n", "des": "Provides HTTP Components support for Spring Integration Java DSL."}
{"index": 709, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package jms;\n\nClass Jms; // Factory class for JMS components.\nClass JmsDefaultListenerContainerSpec; // A DefaultMessageListenerContainer specific JmsListenerContainerSpec extension.\nClass JmsDestinationAccessorSpec<S extends JmsDestinationAccessorSpec<S,A>,A extends org.springframework.jms.support.destination.JmsDestinationAccessor>; // A base IntegrationComponentSpec for JmsDestinationAccessors.\nClass JmsInboundChannelAdapterSpec<S extends JmsInboundChannelAdapterSpec<S>>; // A MessageSourceSpec for a JmsDestinationPollingSource.\nClass JmsInboundChannelAdapterSpec.JmsInboundChannelSpecTemplateAware; // A JmsTemplate-based JmsInboundChannelAdapterSpec extension.\nClass JmsInboundGateway;\nClass JmsInboundGatewaySpec<S extends JmsInboundGatewaySpec<S>>; // A MessagingGatewaySpec for a JmsInboundGateway.\nClass JmsInboundGatewaySpec.JmsInboundGatewayListenerContainerSpec<S extends JmsListenerContainerSpec<S,C>,C extends org.springframework.jms.listener.AbstractMessageListenerContainer>; // An AbstractMessageListenerContainer-based JmsInboundGatewaySpec extension.\nClass JmsListenerContainerSpec<S extends JmsListenerContainerSpec<S,C>,C extends org.springframework.jms.listener.AbstractMessageListenerContainer>; // A JmsDestinationAccessorSpec for JmsListenerContainerSpecs.\nClass JmsMessageChannelSpec<S extends JmsMessageChannelSpec<S>>; // A JmsMessageChannelSpec for subscribable AbstractJmsChannels.\nClass JmsMessageDrivenChannelAdapter;\nClass JmsMessageDrivenChannelAdapterSpec<S extends JmsMessageDrivenChannelAdapterSpec<S>>; // A MessageProducerSpec for JmsMessageDrivenChannelAdapters.\nClass JmsMessageDrivenChannelAdapterSpec.JmsMessageDrivenChannelAdapterListenerContainerSpec<S extends JmsListenerContainerSpec<S,C>,C extends org.springframework.jms.listener.AbstractMessageListenerContainer>;\nClass JmsOutboundChannelAdapterSpec<S extends JmsOutboundChannelAdapterSpec<S>>; // A MessageHandlerSpec for a JmsSendingMessageHandler.\nClass JmsOutboundChannelAdapterSpec.JmsOutboundChannelSpecTemplateAware; // A JmsTemplate-based JmsOutboundChannelAdapterSpec extension.\nClass JmsOutboundGatewaySpec; // A MessageHandlerSpec for a JmsOutboundGateway.\n", "des": "Provides JMS Components support for Spring Integration Java DSL."}
{"index": 710, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package jpa;\n\nClass Jpa; // Factory class for JPA components.\nClass JpaBaseOutboundEndpointSpec<S extends JpaBaseOutboundEndpointSpec<S>>; // The base MessageHandlerSpec for JPA Outbound endpoints.\nClass JpaInboundChannelAdapterSpec; // A MessageSourceSpec for a JpaPollingChannelAdapter.\nClass JpaRetrievingOutboundGatewaySpec; // A JpaBaseOutboundEndpointSpec extension for the JpaOutboundGateway with OutboundGatewayType.RETRIEVING mode.\nClass JpaUpdatingOutboundEndpointSpec; // A JpaBaseOutboundEndpointSpec extension for the updating JpaOutboundGateway mode.\n", "des": "Provides JPA Components support for Spring Integration Java DSL."}
{"index": 711, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package kafka;\n\nClass Kafka; // Factory class for Apache Kafka components.\nClass KafkaMessageDrivenChannelAdapterSpec<K,V,S extends KafkaMessageDrivenChannelAdapterSpec<K,V,S>>; // A MessageProducerSpec implementation for the KafkaMessageDrivenChannelAdapter.\nClass KafkaMessageDrivenChannelAdapterSpec.KafkaMessageDrivenChannelAdapterListenerContainerSpec<K,V>; // A ConcurrentMessageListenerContainer configuration KafkaMessageDrivenChannelAdapterSpec extension.\nClass KafkaMessageDrivenChannelAdapterSpec.KafkaMessageListenerContainerSpec<K,V>; // A helper class in the Builder pattern style to delegate options to the ConcurrentMessageListenerContainer.\nClass KafkaProducerMessageHandlerSpec<K,V>; // A MessageHandlerSpec implementation for the KafkaProducerMessageHandler.\nClass KafkaProducerMessageHandlerSpec.KafkaProducerMessageHandlerTemplateSpec<K,V>; // A KafkaTemplate-based KafkaProducerMessageHandlerSpec extension.\n", "des": "Provides Kafka Components support for Spring Integration Java DSL."}
{"index": 712, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package mail;\n\nClass ImapIdleChannelAdapterSpec; // A MessageProducerSpec for a ImapIdleChannelAdapter.\nClass ImapMailInboundChannelAdapterSpec; // A MailInboundChannelAdapterSpec for IMAP.\nClass Mail; // The factory for Spring Integration Mail components.\nClass MailHeadersBuilder; // The Mail specific MapBuilder implementation.\nClass MailInboundChannelAdapterSpec<S extends MailInboundChannelAdapterSpec<S,R>,R extends org.springframework.integration.mail.AbstractMailReceiver>; // A MessageSourceSpec for a MailReceivingMessageSource.\nClass MailSendingMessageHandlerSpec;\nClass Pop3MailInboundChannelAdapterSpec; // A MailInboundChannelAdapterSpec for POP3.\n", "des": "Provides Mail Components support for Spring Integration Java DSL."}
{"index": 713, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package scripting;\n\nClass ScriptMessageSourceSpec; // The MessageSourceSpec for Dynamic Language Scripts.\nClass Scripts; // The factory for Dynamic Language Scripts (Groovy, Ruby, Python, JavaScript etc.).\nClass ScriptSpec; // The MessageProcessorSpec implementation for the DslScriptExecutingMessageProcessor.\n", "des": "Provides Scripting Components support for Spring Integration Java DSL."}
{"index": 714, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package sftp;\n\nClass Sftp;\nClass SftpInboundChannelAdapterSpec; // A RemoteFileInboundChannelAdapterSpec for a SftpInboundFileSynchronizingMessageSource.\nClass SftpMessageHandlerSpec;\nClass SftpOutboundGatewaySpec;\n", "des": "Provides SFTP Components support for Spring Integration Java DSL."}
{"index": 715, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package support;\n\npackage support.tuple; // Tuples provide a type-safe way to specify multiple parameters.\nInterface Consumer<T>; // Implementations accept a given value and perform work on the argument.\nInterface Function<T,R>; // Implementations of this class perform work on the given parameter and return a result of an optionally different type.\nInterface GenericHandler<P>; // A functional interface to specify MessageHandler logic with Java 8 Lambda expression: .<Integer>handle((p, h) -> p / 2)\nClass BeanNameMessageProcessor<T>; // An \"artificial\" MessageProcessor for lazy-load of target bean by its name.\nClass FixedSubscriberChannelPrototype; // An \"artificial\" MessageChannel implementation which will be unwrapped to the FixedSubscriberChannel on the bean registration phase.\nClass FunctionExpression<S>; // An Expression that simply invokes Function.apply(Object) on its provided Function.\nClass MapBuilder<B extends MapBuilder<B,K,V>,K,V>; // A Builder pattern implementation for the Map.\nClass MessageChannelReference; // An \"artificial\" MessageChannel implementation which will be unwrapped to the MessageChannel bean on the bean registration phase.\nClass MessageProcessorMessageSource; // The MessageSource strategy implementation to produce a Message from underlying MessageProcessorMessageSource.messageProcessor for polling endpoints.\nClass PropertiesBuilder; // A Builder pattern implementation for the Properties.\nClass StringStringMapBuilder; // A map builder creating a map with String keys and values.\nClass Transformers; // An utility class to provide methods for out-of-the-box Transformers.\n", "des": "Provides various support classes used across Spring Integration Java DSL Components."}
{"index": 716, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package tuple;\n\nClass Tuple; // A Tuple is an immutable Collection of objects, each of which can be of an arbitrary type.\nClass Tuple1<T1>; // A tuple that holds a single value.\nClass Tuple2<T1,T2>; // A tuple that holds two values.\nClass Tuples; // The Tuple factory.\n", "des": "Tuples provide a type-safe way to specify multiple parameters."}
{"index": 717, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package transaction;\n\nClass TransactionHandleMessageAdvice; // A TransactionInterceptor extension with HandleMessageAdvice marker.\nClass TransactionInterceptorBuilder; // Provides a fluent API to build a transaction interceptor.\n", "des": "Provides classes supporting Transactions."}
{"index": 718, "repo": "commons-codec-1.16.0", "code": "package codec;\n\npackage codec.binary; // Base64, Base32, Binary, and Hexadecimal String encoding and decoding.\npackage codec.cli; // Command line utility.\npackage codec.digest; // Simplifies common MessageDigest tasks and includes a libc crypt(3) compatible crypt method that supports DES, MD5, SHA-256 and SHA-512 based algorithms as well as the Apache specific \"$apr1$\" variant.\npackage codec.language; // Language and phonetic encoders.\npackage codec.net; // Network related encoding and decoding.\nInterface BinaryDecoder; // Defines common decoding methods for byte array decoders.\nInterface BinaryEncoder; // Defines common encoding methods for byte array encoders.\nInterface Decoder; // Provides the highest level of abstraction for Decoders.\nInterface Encoder; // Provides the highest level of abstraction for Encoders.\nInterface StringDecoder; // Defines common decoding methods for String decoders.\nInterface StringEncoder; // Defines common encoding methods for String encoders.\nClass CharEncoding; // Character encoding names required of every implementation of the Java platform.\nClass Charsets; // Charsets required of every implementation of the Java platform.\nClass Resources; // Consider this class package private.\nClass StringEncoderComparator; // Compares Strings using a StringEncoder.\nEnum CodecPolicy; // Defines encoding and decoding policies.\nClass DecoderException; // Thrown when there is a failure condition during the decoding process.\nClass EncoderException; // Thrown when there is a failure condition during the encoding process.\n", "des": "Interfaces and classes used by the various implementations in the sub-packages."}
{"index": 719, "repo": "commons-codec-1.16.0", "code": "package binary;\n\nClass Base16; // Provides Base16 encoding and decoding.\nClass Base16InputStream; // Provides Base16 encoding and decoding in a streaming fashion (unlimited size).\nClass Base16OutputStream; // Provides Hex encoding and decoding in a streaming fashion (unlimited size).\nClass Base32; // Provides Base32 encoding and decoding as defined by RFC 4648.\nClass Base32InputStream; // Provides Base32 encoding and decoding in a streaming fashion (unlimited size).\nClass Base32OutputStream; // Provides Base32 encoding and decoding in a streaming fashion (unlimited size).\nClass Base64; // Provides Base64 encoding and decoding as defined by RFC 2045.\nClass Base64InputStream; // Provides Base64 encoding and decoding in a streaming fashion (unlimited size).\nClass Base64OutputStream; // Provides Base64 encoding and decoding in a streaming fashion (unlimited size).\nClass BaseNCodec; // Abstract superclass for Base-N encoders and decoders.\nClass BaseNCodecInputStream; // Abstract superclass for Base-N input streams.\nClass BaseNCodecOutputStream; // Abstract superclass for Base-N output streams.\nClass BinaryCodec; // Converts between byte arrays and strings of \"0\"s and \"1\"s.\nClass CharSequenceUtils; // Operations on CharSequence that are null safe.\nClass Hex; // Converts hexadecimal Strings.\nClass StringUtils; // Converts String to and from bytes using the encodings required by the Java specification.\n", "des": "Base64, Base32, Binary, and Hexadecimal String encoding and decoding."}
{"index": 720, "repo": "commons-codec-1.16.0", "code": "package cli;\n\nClass Digest; // A minimal command line to run digest over files, directories or a string.\n", "des": "Command line utility."}
{"index": 721, "repo": "commons-codec-1.16.0", "code": "package digest;\n\nClass Blake3; // Implements the Blake3 algorithm providing a hash function with extensible output (XOF), a keyed hash function (MAC, PRF), and a key derivation function (KDF).\nClass Crypt; // GNU libc crypt(3) compatible hash method.\nClass DigestUtils; // Operations to simplify common MessageDigest tasks.\nClass HmacUtils; // Simplifies common Mac tasks.\nClass Md5Crypt; // The libc crypt() \"$1$\" and Apache \"$apr1$\" MD5-based hash algorithm.\nClass MessageDigestAlgorithms; // Standard MessageDigest algorithm names from the Java Cryptography Architecture Standard Algorithm Name Documentation.\nClass MurmurHash2; // Implementation of the MurmurHash2 32-bit and 64-bit hash functions.\nClass MurmurHash3; // Implementation of the MurmurHash3 32-bit and 128-bit hash functions.\nClass MurmurHash3.IncrementalHash32; // Use IncrementalHash32x86.\nClass MurmurHash3.IncrementalHash32x86; // Generates 32-bit hash from input bytes.\nClass PureJavaCrc32; // A pure-java implementation of the CRC32 checksum that uses the same polynomial as the built-in native CRC32.\nClass PureJavaCrc32C; // A pure-java implementation of the CRC32 checksum that uses the CRC32-C polynomial, the same polynomial used by iSCSI and implemented on many Intel chipsets supporting SSE 4.2.\nClass Sha2Crypt; // SHA2-based Unix crypt implementation.\nClass UnixCrypt; // Unix crypt(3) algorithm implementation.\nClass XXHash32; // Implementation of the xxHash32 hash algorithm.\nEnum HmacAlgorithms; // Standard HmacUtils algorithm names from the Java Cryptography Architecture Standard Algorithm Name Documentation.\n", "des": "Simplifies common MessageDigest tasks and includes a libc crypt(3) compatible crypt method that supports DES, MD5, SHA-256 and SHA-512 based algorithms as well as the Apache specific \"$apr1$\" variant."}
{"index": 722, "repo": "commons-codec-1.16.0", "code": "package language;\n\npackage language.bm; // Implementation details of the Beider-Morse codec.\nClass AbstractCaverphone; // Encodes a string into a Caverphone value.\nClass Caverphone; // 1.5 Replaced by Caverphone2, will be removed in 2.0.\nClass Caverphone1; // Encodes a string into a Caverphone 1.0 value.\nClass Caverphone2; // Encodes a string into a Caverphone 2.0 value.\nClass ColognePhonetic; // Encodes a string into a Cologne Phonetic value.\nClass DaitchMokotoffSoundex; // Encodes a string into a Daitch-Mokotoff Soundex value.\nClass DoubleMetaphone; // Encodes a string into a double metaphone value.\nClass MatchRatingApproachEncoder; // Match Rating Approach Phonetic Algorithm Developed by Western Airlines in 1977.\nClass Metaphone; // Encodes a string into a Metaphone value.\nClass Nysiis; // Encodes a string into a NYSIIS value.\nClass RefinedSoundex; // Encodes a string into a Refined Soundex value.\nClass Soundex; // Encodes a string into a Soundex value.\n", "des": "Language and phonetic encoders."}
{"index": 723, "repo": "commons-codec-1.16.0", "code": "package bm;\n\nInterface Rule.PhonemeExpr;\nInterface Rule.RPattern; // A minimal wrapper around the functionality of Pattern that we use, to allow for alternate implementations.\nClass BeiderMorseEncoder; // Encodes strings into their Beider-Morse phonetic encoding.\nClass Lang; // Language guessing utility.\nClass Languages; // Language codes.\nClass Languages.LanguageSet; // A set of languages.\nClass Languages.SomeLanguages; // Some languages, explicitly enumerated.\nClass PhoneticEngine; // Converts words into potential phonetic representations.\nClass Rule; // A phoneme rule.\nClass Rule.Phoneme;\nClass Rule.PhonemeList;\nEnum NameType; // Supported types of names.\nEnum RuleType; // Types of rule.\n", "des": "Implementation details of the Beider-Morse codec."}
{"index": 724, "repo": "commons-codec-1.16.0", "code": "package net;\n\nClass BCodec; // Identical to the Base64 encoding defined by RFC 1521 and allows a character set to be specified.\nClass PercentCodec; // Implements the Percent-Encoding scheme, as described in HTTP 1.1 specification.\nClass QCodec; // Similar to the Quoted-Printable content-transfer-encoding defined in RFC 1521 and designed to allow text containing mostly ASCII characters to be decipherable on an ASCII terminal without decoding.\nClass QuotedPrintableCodec; // Codec for the Quoted-Printable section of RFC 1521.\nClass URLCodec; // Implements the 'www-form-urlencoded' encoding scheme, also misleadingly known as URL encoding.\n", "des": "Network related encoding and decoding."}
{"index": 725, "repo": "mina-core-3.0.0-M2", "code": "package api;\n\nInterface IoClient; // Connects to several end-points, communicates with the server, and fires events to org.apache.mina.service.IoHandlers.\nInterface IoFilter; // Filter are interceptors/processors for incoming data received/sent.\nInterface IoFuture<V>; // A simple extension that allows listeners to register and receive results asynchronously via registered listeners.\nInterface IoFutureListener<V>; // A listener that asynchronously receives the result of a future computation.\nInterface IoHandler; // Handle all the I/O events generated by a IoService.\nInterface IoServer; // A network server bound to a local address.\nInterface IoService; // Base interface for all IoServers and IoClients that provide I/O service and manage IoSession s.\nInterface IoSession; // A handle which represents a connection between two end-points regardless of transport types.\nInterface IoSessionConfig; // The configuration of IoSession.\nClass AbstractIoFilter; // A convenient IoFilter implementation to be sub-classed for easier IoFilter implementation.\nClass AbstractIoFutureListener<V>; // Convenient base implementation for IoFutureListener. if something wrong happen the exception is rethrown, which will produce an exception caught event for the session\nClass AbstractIoHandler; // A convenient IoHandler implementation to be sub-classed for easier IoHandler implementation.\nEnum IdleStatus; // Represents the type of idleness of IoSession.\nEnum IoSession.SessionState; // State of a IoSession\nClass ConfigurationException; // A RuntimeException thrown when something wrong happened during IoService or IoSession configuration.\nClass MinaRuntimeException; // Something very wrong happened in the low level part of I/O processing.\n", "des": "Base API for the MINA library."}
{"index": 726, "repo": "mina-core-3.0.0-M2", "code": "package executor;\n\nInterface Event; // A IoHandler event to be submitted to an IoHandlerExecutor.\nInterface EventVisitor; // Implement this interface for implementing different behavior on different Event.\nInterface IoHandlerExecutor; // A class in charge of executing IoHandler related events.\nClass CloseEvent; // A session was closed event.\nClass IdleEvent; // An IoSession is idle (no sent or receive events)\nClass OpenEvent; // An IoSession open Event\nClass OrderedHandlerExecutor; // Use this executor if you want the IoHandler events of a session to be executed in order and on the same thread.\nClass ReceiveEvent; // A IoSession received a message Event.\nClass SentEvent; // An IoSession sent a message Event\nClass UnorderHandlerExecutor; // (in progress)\n", "des": "Classes in charge of decoupling IoHandler event of the low level read/write/accept I/O threads ( SelectorLoop )."}
{"index": 727, "repo": "mina-core-3.0.0-M2", "code": "package bio;\n\nClass BioUdpServer; // A java blocking I/O based UDP server.\nClass BioUdpSession; // A IoSession for BioUdpServer\n", "des": "Transport implementation base on blocking I/O Socket"}
{"index": 728, "repo": "mina-core-3.0.0-M2", "code": "package nio;\n\nInterface RegistrationCallback; // To be used with NioSelectorLoop for being informed when the SelectionKey was created and registered.\nInterface SelectorListener; // Listen for selector events.\nInterface SelectorLoop;\nInterface SelectorLoopPool; // A pool of SelectorLoop\nClass AbstractNioSession; // Common ancestor for NIO based IoSession implmentation.\nClass FixedSelectorLoopPool; // A fixed size pool of SelectorLoop.\nClass NioSelectorLoop; // This class holds a Selector and handle all the incoming events for the sessions registered on this selector.ALl the events will be processed by some dedicated thread, taken from a pool.\nClass NioTcpClient; // This class implements a TCP NIO based client.\nClass NioTcpServer; // This class implements a TCP NIO based server.\nClass NioTcpSession; // A NIO based TCP session, should be used by NioTcpServer and NioTcpClient.\nClass NioUdpClient; // This class implements a UDP NIO based client.\nClass NioUdpServer; // This class implements a UDP NIO based server.\nClass NioUdpSession; // A UDP session based on NIO\nClass SslHelper; // An helper class used to manage everything related to SSL/TLS establishment and management.\n", "des": "Transport implementations base on NIO (New I/O), Channel"}
{"index": 729, "repo": "mina-core-3.0.0-M2", "code": "package tcp;\n\nInterface TcpSessionConfig; // A IoSessionConfig for socket based sessions.\nClass AbstractTcpClient; // Base class for TCP based Clients\nClass AbstractTcpServer; // Base class for TCP based Servers\nClass DefaultTcpSessionConfig; // Implementation for the socket session configuration.\nClass ProxyTcpSessionConfig; // This class proxy the inner java.net.Socket configuration with the SocketSessionConfig of the session.\n", "des": "Shared plumber for TCP transport implementations."}
{"index": 730, "repo": "mina-core-3.0.0-M2", "code": "package udp;\n\nInterface UdpSessionConfig; // A IoSessionConfig for UDP based sessions.\nClass AbstractUdpClient; // Base class for UDP based Clients\nClass AbstractUdpServer; // Base implementation for all the UDP servers.\nClass DefaultUdpSessionConfig; // Implementation for the UDP session configuration.\n", "des": "Shared plumber UDP transport implementations."}
{"index": 731, "repo": "spring-data-solr-4.3.15", "code": "package solr;\n\npackage solr.core; // Provides the classes necessary for Solr support.\npackage solr.repository; // Solr specific repository implementation.\npackage solr.server; // SolrClient configuration and spring integration.\nClass VersionUtil; // Version util uses ClassUtils.isPresent(String, ClassLoader) to determine presence of certain classes that are unique to some libraries, which allows to en-/disable some of the features in eg.\nClass UncategorizedSolrException; // SolrClient threw an exception that could not be mapped.\n", "des": "Root stuff used through out Spring Data for Apache Solr."}
{"index": 732, "repo": "spring-data-solr-4.3.15", "code": "package core;\n\npackage core.convert; // All the Converters go here.\npackage core.geo; // Apache Solr geo specifics.\npackage core.mapping; // All the mapping things!\npackage core.query; // Query abstractions for SolrQuery.\npackage core.schema; // Everything Apache Solr schema specific.\nInterface QueryParser; // The QueryParser takes a spring-data-solr Query and returns a SolrQuery.\nInterface QueryParserBase.PredicateProcessor; // QueryParserBase.PredicateProcessor creates a solr reable query string representation for a given Criteria.Predicate\nInterface SolrCallback<T>; // Callback interface for data access code that works with SolrClient.\nInterface SolrOperations; // Interface that specifies a basic set of Solr operations.\nInterface SolrTransactionSynchronizationAdapter.CompletionDelegate;\nClass DefaultQueryParser; // Implementation of QueryParser.\nClass QueryParserBase<QUERYTPYE extends SolrDataQuery>; // Base Implementation of QueryParser providing common functions for creating SolrQuery.\nClass QueryParsers;\nClass SolrExceptionTranslator; // Implementation of PersistenceExceptionTranslator capable of translating SolrServerException instances to Spring's DataAccessException hierarchy.\nClass SolrTemplate; // Implementation of SolrOperations\nClass SolrTransactionSynchronizationAdapter;\nClass SolrTransactionSynchronizationAdapter.CommitTransaction;\nClass SolrTransactionSynchronizationAdapter.RollbackTransaction;\nClass SolrTransactionSynchronizationAdapterBuilder;\nClass TermsQueryParser; // TermsQueryParser is capable of building SolrQuery for TermsQuery\nEnum RequestMethod; // HTTP request types supported by SolrRequest.\n", "des": "Provides the classes necessary for Solr support."}
{"index": 733, "repo": "spring-data-solr-4.3.15", "code": "package convert;\n\nInterface SolrConverter;\nClass CustomConversions; // since 2.0, use SolrCustomConversions.\nClass DateTimeConverters; // Converts a Date values into a solr readable String that can be directly used within the q parameter.\nClass MappingSolrConverter; // Implementation of SolrConverter to read/write SolrDocument/ SolrInputDocument.\nClass NumberConverters; // Converts a Number values into a solr readable String that can be directly used within the q parameter.\nClass SolrConverterBase;\nClass SolrCustomConversions; // Value object to capture custom conversion.\nClass SolrJConverter; // Trivial implementation of SolrConverter delegating conversion to DocumentObjectBinder\nEnum DateTimeConverters.DateToJodaDateTimeConverter; // Reading Converter parses Date from SolrDocument to DateTime\nEnum DateTimeConverters.DateToLocalDateTimeConverter; // Reading Converter parses Date from SolrDocument to LocalDateTime\nEnum DateTimeConverters.JavaDateConverter; // Converter used to parse Date to String used for setting SolrQuery query string values\nEnum DateTimeConverters.JodaDateTimeConverter; // Converter used to parse DateTime to String used for setting SolrQuery query string values\nEnum DateTimeConverters.JodaDateTimeToDateConverter; // Writing Converter converts DateTime to Date so it can be used within SolrInputDocument\nEnum DateTimeConverters.JodaLocalDateTimeConverter; // Converter used to parse LocalDateTime to String used for setting SolrQuery query string values\nEnum DateTimeConverters.JodaLocalDateTimeToDateConverter; // Writing Converter converts LocalDateTime to Date so it can be used within SolrInputDocument\nEnum DateTimeConverters.StringToJodaDateTimeConverter;\nEnum NumberConverters.NumberConverter;\n", "des": "All the Converters go here."}
{"index": 734, "repo": "spring-data-solr-4.3.15", "code": "package geo;\n\nClass GeoConverters;\nClass Point;\nEnum GeoConverters.DistanceToStringConverter; // Converts a Distance to a solrReadable request parameter.\nEnum GeoConverters.Point2DToStringConverter; // Converts a Point to a solrReadable request parameter.\nEnum GeoConverters.Point3DToStringConverter; // Converts a Point to a solrReadable request parameter.\nEnum GeoConverters.StringToPointConverter; // Converts comma separated string to Point.\n", "des": "Apache Solr geo specifics."}
{"index": 735, "repo": "spring-data-solr-4.3.15", "code": "package mapping;\n\nInterface SolrPersistentEntity<T>;\nInterface SolrPersistentProperty;\nClass SimpleSolrMappingContext; // Solr specific implementation of MappingContext\nClass SimpleSolrPersistentEntity<T>; // Solr specific PersistentEntity implementation holding eg. name of solr core.\nClass SimpleSolrPersistentProperty; // Solr specific PersistentProperty implementation processing taking Field into account\nClass SolrMappingEventPublisher;\nClass SolrSimpleTypes; // Set of type that do not need to be converted into a solr readable format\nEnum SolrPersistentProperty.PropertyToFieldNameConverter;\nAnnotation Type ChildDocument; // Marker interface for Apache Solr child document can be used as an alternative to Field.child().\nAnnotation Type Dynamic; // Declare a field as dynamic.\nAnnotation Type Indexed;\nAnnotation Type Score; // Defines the annotated field to store the score of a document within search result.\nAnnotation Type SolrDocument;\n", "des": "All the mapping things!"}
{"index": 736, "repo": "spring-data-solr-4.3.15", "code": "package query;\n\npackage query.result; // Query result abstractions for Solr returned NamedList.\nInterface CalculatedField;\nInterface FacetAndHighlightQuery; // A Query that combines a FacetQuery and a HighlightQuery\nInterface FacetQuery; // Query to be used for faceting.\nInterface Field; // Defines a Field that can be used within Criteria.\nInterface FilterQuery; // Filter Queries are simple solr Queries applied after executing the original query.\nInterface Function;\nInterface Function.Context; // The Function.Context the Function is used in.\nInterface HighlightQuery;\nInterface PivotField; // Defines a field that could be used within a pivot facet query.\nInterface Query; // A Query that can be translated into a solr understandable Query.\nInterface QueryParameter; // Query Parameter to be used when executing query against solr server\nInterface QueryStringHolder; // Class holding a solr readable QueryString that can be used with the q parameter.\nInterface SolrDataQuery; // Common interface for any Query\nInterface TermsQuery;\nInterface Update; // Update one or more fields of a Document without touching the others.\nInterface UpdateField;\nInterface ValueHoldingField;\nClass AbstractFacetAndHighlightQueryDecorator; // General purpose FacetAndHighlightQuery decorator.\nClass AbstractFacetQueryDecorator; // General purpose FacetQuery decorator.\nClass AbstractFunction;\nClass AbstractHighlightQueryDecorator; // General purpose HighlightQuery decorator.\nClass AbstractQueryDecorator; // General purpose Query abstract decorator.\nClass AnyCriteria;\nClass Criteria; // Criteria is the central class when constructing queries.\nClass Criteria.Predicate; // Single entry to be used when defining search criteria\nClass Crotch;\nClass CurrencyFunction; // Implementation of currency(field_name,[CODE])\nClass DefaultValueFunction; // Implementation of def(field|function,defaultValue)\nClass DistanceField; // Implementation of CalculatedField for geodist\nClass DistanceFunction; // Implementation of dist(power, pointA, pointB)\nClass DistanceFunction.Builder;\nClass DivideFunction; // Implementation of div(x,y)\nClass DivideFunction.Builder;\nClass ExistsFunction; // Implementation of exists(field|function)\nClass FacetOptions; // Set of options that can be set on a FacetQuery\nClass FacetOptions.FacetParameter;\n", "des": "Query abstractions for SolrQuery."}
{"index": 737, "repo": "spring-data-solr-4.3.15", "code": "package result;\n\nInterface CountEntry;\nInterface Cursor<T>; // Cursor provides a lazy loading abstraction for fetching documents.\nInterface FacetAndHighlightPage<T>; // FacetAndHighlightPage holds a page for each field targeted by the facet query, each highlight returned by the highlight query as well as the page values returned by the solr query\nInterface FacetEntry; // FacetEntry is returned as result of a FacetQuery holding the key (eg. fieldname, query,...), value and valueCount for the requested facet\nInterface FacetFieldEntry; // Entry for facet on field\nInterface FacetPage<T>; // FacetPage holds a page for each field targeted by the facet query as well as the page values returned by facet.query\nInterface FacetPivotFieldEntry; // Entry for facet pivot field.\nInterface FacetQueryEntry; // Facet Entry for facet via query\nInterface FacetQueryResult<T>; // Hold the results of a solr facet query.\nInterface FieldStatsResult; // Specialization of StatsResult to represent statistic information for a field.\nInterface GroupEntry<T>; // Representation of a group in a GroupResult.\nInterface GroupPage<T>; // Representation of a Group result page, holding one GroupResult for each grouping requested on a org.springframework.data.solr.core.query.GroupQuery.\nInterface GroupResult<T>; // Representation of a group in response to group request (i.e. , , ) will have a GroupResult representation.\nInterface HighlightPage<T>; // HighlightPage holds a page for each field targeted by the highlight query as well as the page values returned by the solr query\nInterface HighlightQueryResult<T>; // Hold the results of a solr highlight query.\nInterface PageKey;\nInterface ScoredPage<T>; // Specific type of Page holding max score information.\nInterface SpellcheckedPage<T>;\nInterface SpellcheckQueryResult;\nInterface StatsPage<T>; // Representation of a Stats result page, holding one FieldStatsResult for each field statistic requested on a Query through StatsOptions.\nInterface StatsResult; // Contract to define representation of statistic information requested using StatsOptions.\nInterface TermsEntry;\nInterface TermsFieldEntry;\nInterface TermsPage;\nClass DelegatingCursor<T>; // DelegatingCursor is a base Cursor implementation that temporarily holds data fetched in one run and delegates iteration.\n", "des": "Query result abstractions for Solr returned NamedList."}
{"index": 738, "repo": "spring-data-solr-4.3.15", "code": "package schema;\n\nInterface ContentParser;\nInterface SchemaDefinition.SchemaField;\nInterface SchemaOperations; // Operations interface for executing modification on a managed schema.\nClass DefaultSchemaOperations; // SchemaOperations implementation based on SolrTemplate.\nClass MappingJacksonRequestContentParser;\nClass MappingJacksonResponseParser;\nClass SchemaDefinition;\nClass SchemaDefinition.CopyFieldDefinition;\nClass SchemaDefinition.CopyFieldDefinition.Builder;\nClass SchemaDefinition.FieldDefinition;\nClass SchemaDefinition.FieldDefinition.Builder;\nClass SchemaDefinition.FieldDefinitionBuilder;\nClass SchemaDefinition.Filter;\nClass SchemaDefinition.Tokenizer;\nClass SolrJsonRequest;\nClass SolrJsonResponse;\nClass SolrPersistentEntitySchemaCreator;\nClass SolrSchemaResolver;\nClass SolrSchemaWriter;\nEnum SolrPersistentEntitySchemaCreator.Feature;\nClass SchemaModificationException; // NonTransientDataAccessException raised when schema modification requests fail.\n", "des": "Everything Apache Solr schema specific."}
{"index": 739, "repo": "spring-data-solr-4.3.15", "code": "package repository;\n\npackage repository.cdi; // Cdi extension.\npackage repository.config; // Repository configuration and extension support.\npackage repository.query; // Apache Solr specific repository query methods and executions.\npackage repository.support; // Repository support classes for bootstrapping application context.\nInterface SolrCrudRepository<T,ID extends Serializable>;\nInterface SolrRepository<T,ID extends Serializable>;\nAnnotation Type Boost; // Increase document score by boosting search criteria hit\nAnnotation Type Facet;\nAnnotation Type Highlight;\nAnnotation Type Pivot;\nAnnotation Type Query;\nAnnotation Type Score; // since 4.0.\nAnnotation Type SelectiveStats; // Definition of field selective statistical that shall be executed within the request.\nAnnotation Type Spellcheck; // Enable Solr spellcheck component for a repository query method.\nAnnotation Type Stats; // Statistics definition to be performed within a Query.\n", "des": "Solr specific repository implementation."}
{"index": 740, "repo": "spring-data-solr-4.3.15", "code": "package cdi;\n\nClass SolrRepositoryBean<T>; // Uses CdiRepositoryBean to create SolrRepository instances.\nClass SolrRepositoryExtension;\n", "des": "Cdi extension."}
{"index": 741, "repo": "spring-data-solr-4.3.15", "code": "package config;\n\nClass AbstractSolrConfiguration; // Spring Data for Apache Solr base configuration using JavaConfig.\nClass SolrRepositoryConfigExtension; // RepositoryConfigurationExtension implementation to configure Solr repository configuration support, evaluating the EnableSolrRepositories annotation or the equivalent XML element.\nAnnotation Type EnableSolrRepositories; // Annotation to enable Solr repositories.\n", "des": "Repository configuration and extension support."}
{"index": 742, "repo": "spring-data-solr-4.3.15", "code": "package query;\n\nInterface SolrEntityInformation<T,ID>;\nInterface SolrEntityInformationCreator;\nInterface SolrParameterAccessor;\nClass AbstractSolrQuery; // Base implementation of a solr specific RepositoryQuery\nClass BindableSolrParameter; // Used to provide additional information on parameters used in query definition.\nClass PartTreeSolrQuery; // Solr specific implementation of a query derived from method name\nClass SolrParameters;\nClass SolrParametersParameterAccessor; // Implementation of SolrParameterAccessor\nClass SolrQueryMethod; // Solr specific implementation of QueryMethod taking care of Query\nClass StringBasedSolrQuery; // Solr specific implementation of RepositoryQuery that can handle string based queries\n", "des": "Apache Solr specific repository query methods and executions."}
{"index": 743, "repo": "spring-data-solr-4.3.15", "code": "package support;\n\nClass MappingSolrEntityInformation<T,ID>; // Solr specific implementation of AbstractEntityInformation\nClass SimpleSolrRepository<T,ID extends Serializable>; // Solr specific repository implementation.\nClass SolrEntityInformationCreatorImpl;\nClass SolrRepositoryFactory; // Factory to create SolrRepository\nClass SolrRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable>; // Spring FactoryBean implementation to ease container based configuration for XML namespace and JavaConfig.\n", "des": "Repository support classes for bootstrapping application context."}
{"index": 744, "repo": "spring-data-solr-4.3.15", "code": "package server;\n\npackage server.config; // Config support for SolrClient.\npackage server.support; // Everything SolrClient and EmbeddedSolrServer related.\nInterface SolrClientFactory; // SolrClientFactory replaces SolrServerFactory from version 1.x and provides access to the solrj SolrClient.\n", "des": "SolrClient configuration and spring integration."}
{"index": 745, "repo": "spring-data-solr-4.3.15", "code": "package config;\n\nClass EmbeddedSolrServerBeanDefinitionParser; // Implementation of BeanDefinitionParser that parses embedded-solr-server element.\nClass HttpSolrClientBeanDefinitionParser; // HttpSolrClientBeanDefinitionParser replaces HttpSolrServerBeanDefinitionParser from version 1.x.\n", "des": "Config support for SolrClient."}
{"index": 746, "repo": "spring-data-solr-4.3.15", "code": "package support;\n\nClass EmbeddedSolrServerFactory; // The EmbeddedSolrServerFactory allows hosting of an SolrServer instance in embedded mode.\nClass EmbeddedSolrServerFactoryBean; // Implementation of FactoryBean for registration of an EmbeddedSolrServer as a Spring bean.\nClass HttpSolrClientFactory; // The HttpSolrClientFactory replaces HttpSolrServerFactory from version 1.x and configures an HttpSolrClient to work with the provided core.\nClass HttpSolrClientFactoryBean; // HttpSolrClientFactoryBean replaces HttpSolrServerFactoryBean from version 1.x.\nClass SolrClientUtils; // SolrClientUtils replaces SolrServerUtils from version 1.x\n", "des": "Everything SolrClient and EmbeddedSolrServer related."}
{"index": 747, "repo": "ignite-indexing-2.15.0", "code": "package indexing;\n\nClass IndexingQueryEngineConfiguration; // Query engine configuration for indexing-backed query engine.\n", "des": "Contains Ignite-indexing module classes and interfaces."}
{"index": 748, "repo": "ignite-indexing-2.15.0", "code": "package h2;\n\npackage h2.dml; // Contains routines for executing DML statements on top of H2.\nClass CommandProcessor; // Processor responsible for execution of all non-SELECT and non-DML commands.\nClass CommandResult; // Command execution result.\nClass ConcurrentStripedPool<E>; // Concurrent pool of object based on ConcurrentLinkedDeque.\nClass ConnectionManager; // H2 connection manager.\nClass DistributedSqlConfiguration; // Distributed configuration of the indexing module.\nClass DmlStatementsProcessor; // Contains entry processors for DML.\nClass DmlStatementsProcessor.EntryValueUpdater; // Entry value updater.\nClass DmlStatementsProcessor.InsertEntryProcessor;\nClass DmlStatementsProcessor.ModifyingEntryProcessor; // Entry processor invoked by UPDATE and DELETE operations.\nClass FunctionsManager; // SQL function manager.\nClass GridCacheTwoStepQuery; // Two step map-reduce style query.\nClass GridSubqueryJoinOptimizer;\nClass H2Connection; // Wrapper to store connection with currently used schema and statement cache.\nClass H2Cursor; // Cursor.\nClass H2FieldsIterator; // Special field set iterator based on database result set.\nClass H2PooledConnection; // Pooled connection wrapper to use close semantic to recycle connection (return to the pool).\nClass H2QueryFetchSizeInterceptor; // Print warning message to log when query result size fetch count is bigger then specified threshold.\nClass H2QueryInfo; // Base H2 query info with commons for MAP, LOCAL, REDUCE queries.\nClass H2ResultSetIterator<T>; // Iterator over result set.\nClass H2SchemaManager; // H2 schema manager.\nClass H2SqlFieldMetadata; // Field descriptor.\nClass H2StatementCache; // Statement cache.\nClass H2TableDescriptor; // Information about table in database.\nClass H2TableEngine; // H2 Table engine.\nClass H2TypeKey; // Key for types lookup.\nClass H2Utils; // H2 utility methods.\nClass H2Utils.Getter<T,R>; // Field getter.\nClass H2Utils.Setter<T,R>; // Field getter.\nClass H2Utils.ValueRuntimeSimpleObject<T>;\nClass IgniteH2Indexing; // Indexing implementation based on H2 database engine.\n", "des": "Contains default H2-based indexing SPI implementation."}
{"index": 749, "repo": "ignite-indexing-2.15.0", "code": "package dml;\n\nInterface DmlArgument; // DML argument\nInterface KeyValueSupplier; // Method to construct new instances of keys and values on SQL MERGE and INSERT, as well as to build new values during UPDATE - a function that takes a row selected from DB and then transforms it into new object.\nClass DmlArguments; // DML arguments factory.\nClass DmlAstUtils; // AST utils for DML\nClass DmlBatchSender; // Batch sender class.\nClass DmlBulkLoadDataConverter; // Converts a row of values to actual key+value using UpdatePlan.processRow(List).\nClass DmlDistributedPlanInfo; // Additional information about distributed update plan.\nClass DmlDistributedUpdateRun; // Context for DML operation on reducer node.\nClass DmlPageProcessingErrorResult; // Result of splitting keys whose processing resulted into an exception from those skipped by logic of EntryProcessors (most likely INSERT duplicates, or UPDATE/DELETE keys whose values had been modified concurrently), counting and collecting entry processor exceptions.\nClass DmlPageProcessingResult; // Result of processing an individual page with IgniteCache.invokeAll(java.util.Map<? extends K, ? extends javax.cache.processor.EntryProcessor<K, V, T>>, java.lang.Object...) including error details, if any.\nClass DmlUpdateResultsIterator; // DML update results iterator.\nClass DmlUpdateSingleEntryIterator<T>;\nClass DmlUtils; // DML utility methods.\nClass FastUpdate; // Arguments for fast, query-less UPDATE or DELETE - key and, optionally, value and new value.\nClass UpdatePlan; // Update plan - where to take data to update cache from and how to construct new keys and values, if needed.\nClass UpdatePlanBuilder; // Logic for building update plans performed by DmlStatementsProcessor.\nEnum UpdateMode; // DML statement execution plan type - MERGE/INSERT from rows or subquery, or UPDATE/DELETE from subquery or literals/params based.\n", "des": "Contains routines for executing DML statements on top of H2."}
{"index": 750, "repo": "artemis-odb-2.3.0", "code": "package artemis;\n\npackage artemis.annotations; // Annotations used by Artemis, both runtime and during compilation,\npackage artemis.managers; // Manager implementations.\npackage artemis.systems; // Entity systems.\npackage artemis.utils; // Helper classes.\nInterface ArtemisPlugin; // Plugin for artemis-odb.\nInterface ComponentTypeFactory.ComponentTypeListener;\nInterface EntitySubscription.SubscriptionListener; // This interfaces reports entities inserted or removed when matched against their EntitySubscription\nClass Archetype; // Provides a blueprint for new entities, offering greatly improved insertion performance for systems.\nClass ArchetypeBuilder; // Builder for basic Archetype instances.\nClass Aspect; // An Aspect is used by systems as a matcher against entities, to check if a system is interested in an entity.\nClass Aspect.Builder; // Constructs instances of Aspect.\nClass AspectSubscriptionManager; // Manages all instances of EntitySubscription.\nClass BaseComponentMapper<A extends Component>;\nClass BaseEntitySystem; // Tracks a subset of entities, but does not implement any sorting or iteration.\nClass BaseSystem; // Most basic system.\nClass Component; // Components are pure data classes with optionally some helper methods.\nClass ComponentManager; // Handles the association between entities and their components.\nClass ComponentMapper<A extends Component>; // Provide high performance component access and mutation from within a System.\nClass ComponentPool<T extends PooledComponent>;\nClass ComponentType; // Identifies components in artemis without having to use classes.\nClass ComponentTypeFactory; // Tracks all component types in a single world.\nClass Entity; // The entity convenience class.\nClass EntityEdit; // Entity mutator.\nClass EntityManager; // Manages entity instances.\nClass EntitySubscription; // Maintains the list of entities matched by an aspect.\nClass EntitySubscription.SubscriptionExtra;\nClass EntitySystem; // Tracks a subset of entities, but does not implement any sorting or iteration.\nClass EntityTransmuter; // Fastest way of changing entity component compositions.\nClass EntityTransmuterFactory; // Builder for EntityTransmuter.\nClass ImmediateComponentRemover<A extends Component>;\nClass InvocationStrategy; // Simple sequential invocation strategy.\nClass Manager; // A manager for handling entities in the world.\n", "des": "Core Artemis classes."}
{"index": 751, "repo": "artemis-odb-2.3.0", "code": "package annotations;\n\nEnum LinkPolicy.Policy;\nAnnotation Type All; // Auto-configures fields or systems pertaining to aspects.\nAnnotation Type AspectDescriptor; // Auto-configures fields pertaining to aspects.\nAnnotation Type DelayedComponentRemoval; // Extends the lifecycle of this component type, ensuring removed instances are retrievable until all listeners have been notified - regardless of removal method.\nAnnotation Type EntityId; // Marks int and IntBag fields as holding entity id:s.\nAnnotation Type Exclude; // Auto-configures fields or systems pertaining to aspects.\nAnnotation Type Fluid; // Customize how the fluid generator processes your class.\nAnnotation Type FluidMethod; // Customize how the fluid generator processes a component method.\nAnnotation Type LinkPolicy; // Annotation for entity-referencing fields in component types.\nAnnotation Type One; // Auto-configures fields or systems pertaining to aspects.\nAnnotation Type PooledWeaver; // Transforms a Component into a PooledComponent.\nAnnotation Type PrefabData; // Holds the path or identifier for Prefab types.\nAnnotation Type PreserveProcessVisiblity; // When optimizing an EntityProcessingSystem, don't reduce the visibility of BaseSystem.process().\nAnnotation Type Profile; // Profile EntitySystems with user-specified profiler class, implementing ArtemisProfiler.\nAnnotation Type SkipWire; // Skip reflective dependency injection on annotated field or class.\nAnnotation Type Transient; // Never persisted when serializing.\nAnnotation Type UnstableApi; // Classes marked with this annotation may undergo extensive refactoring between releases.\nAnnotation Type Wire; // Customizes reflective injection of ComponentMapper, EntitySystem, Manager, and registered types via WorldConfiguration.register(java.lang.Object).\n", "des": "Annotations used by Artemis, both runtime and during compilation,"}
{"index": 752, "repo": "artemis-odb-2.3.0", "code": "package managers;\n\nClass GroupManager; // If you need to group your entities together, e.g tanks going into \"units\" group or explosions into \"effects\", then use this manager.\nClass PlayerManager; // You may sometimes want to specify to which player an entity belongs to.\nClass TagManager; // If you need to tag any entity, use this.\nClass TeamManager; // Use this class together with PlayerManager.\nClass UuidEntityManager;\n", "des": "Manager implementations."}
{"index": 753, "repo": "artemis-odb-2.3.0", "code": "package systems;\n\nClass DelayedEntityProcessingSystem; // Tracks cooldown per entity, processing entity when its timer runs out.\nClass DelayedIteratingSystem; // Tracks cooldown per entity, processing entity when its timer runs out.\nClass EntityProcessingSystem; // Entity reference iterating system.\nClass IntervalEntityProcessingSystem; // Process a subset of entities every x ticks.\nClass IntervalEntitySystem; // A system that processes entities at a interval in milliseconds.\nClass IntervalIteratingSystem; // Process a subset of entities every x ticks.\nClass IntervalSystem; // Entity system processed at a certain interval, without iteration implementation.\nClass IteratingSystem; // Iterates over EntitySubscription member entities by entity identity.\n", "des": "Entity systems."}
{"index": 754, "repo": "artemis-odb-2.3.0", "code": "package utils;\n\nInterface ArtemisProfiler;\nInterface ImmutableBag<E>; // A non-modifiable bag.\nInterface ImmutableIntBag<E>; // A non-modifiable intbag.\nClass Bag<E>; // Collection type a bit like ArrayList but does not preserve the order of its entities, speedwise it is very good, especially suited for games.\nClass BitVector; // Performance optimized bitset implementation.\nClass ConverterUtil;\nClass EntityBuilder; // Non-reusable entity creation helper for rapid prototyping.\nClass IntBag; // Collection type a bit like ArrayList but does not preserve the order of its entities, speedwise it is very good, especially suited for games.\nClass IntBagIterator; // Base iterator for IntBag\nClass IntDeque; // Missing tests and missing methods: (push|peek|pop)(Back|Front).\nClass ShortBag; // Collection type a bit like ArrayList but does not preserve the order of its entities, speedwise it is very good, especially suited for games.\nClass Sort; // Provides methods to sort arrays of objects.\nEnum IntBagIterator.State;\n", "des": "Helper classes."}
{"index": 755, "repo": "lucene-analyzers-common-8.11.2", "code": "package ar;\n\nClass ArabicAnalyzer; // Analyzer for Arabic.\nClass ArabicNormalizationFilter; // A TokenFilter that applies ArabicNormalizer to normalize the orthography.\nClass ArabicNormalizationFilterFactory; // Factory for ArabicNormalizationFilter.\nClass ArabicNormalizer; // Normalizer for Arabic.\nClass ArabicStemFilter; // A TokenFilter that applies ArabicStemmer to stem Arabic words..\nClass ArabicStemFilterFactory; // Factory for ArabicStemFilter.\nClass ArabicStemmer; // Stemmer for Arabic.\n", "des": "Analyzer for Arabic."}
{"index": 756, "repo": "lucene-analyzers-common-8.11.2", "code": "package bg;\n\nClass BulgarianAnalyzer; // Analyzer for Bulgarian.\nClass BulgarianStemFilter; // A TokenFilter that applies BulgarianStemmer to stem Bulgarian words.\nClass BulgarianStemFilterFactory; // Factory for BulgarianStemFilter.\nClass BulgarianStemmer; // Light Stemmer for Bulgarian.\n", "des": "Analyzer for Bulgarian."}
{"index": 757, "repo": "lucene-analyzers-common-8.11.2", "code": "package bn;\n\nClass BengaliAnalyzer; // Analyzer for Bengali.\nClass BengaliNormalizationFilter; // A TokenFilter that applies BengaliNormalizer to normalize the orthography.\nClass BengaliNormalizationFilterFactory; // Factory for BengaliNormalizationFilter.\nClass BengaliNormalizer; // Normalizer for Bengali.\nClass BengaliStemFilter; // A TokenFilter that applies BengaliStemmer to stem Bengali words.\nClass BengaliStemFilterFactory; // Factory for BengaliStemFilter.\nClass BengaliStemmer; // Stemmer for Bengali.\n", "des": "Analyzer for Bengali Language."}
{"index": 758, "repo": "lucene-analyzers-common-8.11.2", "code": "package boost;\n\nClass DelimitedBoostTokenFilter; // Characters before the delimiter are the \"token\", those after are the boost.\nClass DelimitedBoostTokenFilterFactory; // Factory for DelimitedBoostTokenFilter.\n", "des": "Provides various convenience classes for creating boosts on Tokens."}
{"index": 759, "repo": "lucene-analyzers-common-8.11.2", "code": "package br;\n\nClass BrazilianAnalyzer; // Analyzer for Brazilian Portuguese language.\nClass BrazilianStemFilter; // A TokenFilter that applies BrazilianStemmer.\nClass BrazilianStemFilterFactory; // Factory for BrazilianStemFilter.\nClass BrazilianStemmer; // A stemmer for Brazilian Portuguese words.\n", "des": "Analyzer for Brazilian Portuguese."}
{"index": 760, "repo": "lucene-analyzers-common-8.11.2", "code": "package ca;\n\nClass CatalanAnalyzer; // Analyzer for Catalan.\n", "des": "Analyzer for Catalan."}
{"index": 761, "repo": "lucene-analyzers-common-8.11.2", "code": "package charfilter;\n\nClass BaseCharFilter; // Base utility class for implementing a CharFilter.\nClass HTMLStripCharFilter; // A CharFilter that wraps another Reader and attempts to strip out HTML constructs.\nClass HTMLStripCharFilterFactory; // Factory for HTMLStripCharFilter.\nClass MappingCharFilter; // Simplistic CharFilter that applies the mappings contained in a NormalizeCharMap to the character stream, and correcting the resulting changes to the offsets.\nClass MappingCharFilterFactory; // Factory for MappingCharFilter.\nClass NormalizeCharMap; // Holds a map of String input to String output, to be used with MappingCharFilter.\nClass NormalizeCharMap.Builder; // Builds an NormalizeCharMap.\n", "des": "Normalization of text before the tokenizer."}
{"index": 762, "repo": "lucene-analyzers-common-8.11.2", "code": "package cjk;\n\nClass CJKAnalyzer; // An Analyzer that tokenizes text with StandardTokenizer, normalizes content with CJKWidthFilter, folds case with LowerCaseFilter, forms bigrams of CJK with CJKBigramFilter, and filters stopwords with StopFilter\nClass CJKBigramFilter; // Forms bigrams of CJK terms that are generated from StandardTokenizer or ICUTokenizer.\nClass CJKBigramFilterFactory; // Factory for CJKBigramFilter.\nClass CJKWidthCharFilter; // A CharFilter that normalizes CJK width differences: Folds fullwidth ASCII variants into the equivalent basic latin Folds halfwidth Katakana variants into the equivalent kana\nClass CJKWidthCharFilterFactory; // Factory for CJKWidthCharFilter.\nClass CJKWidthFilter; // A TokenFilter that normalizes CJK width differences: Folds fullwidth ASCII variants into the equivalent basic latin Folds halfwidth Katakana variants into the equivalent kana\nClass CJKWidthFilterFactory; // Factory for CJKWidthFilter.\n", "des": "Analyzer for Chinese, Japanese, and Korean, which indexes bigrams."}
{"index": 763, "repo": "lucene-analyzers-common-8.11.2", "code": "package ckb;\n\nClass SoraniAnalyzer; // Analyzer for Sorani Kurdish.\nClass SoraniNormalizationFilter; // A TokenFilter that applies SoraniNormalizer to normalize the orthography.\nClass SoraniNormalizationFilterFactory; // Factory for SoraniNormalizationFilter.\nClass SoraniNormalizer; // Normalizes the Unicode representation of Sorani text.\nClass SoraniStemFilter; // A TokenFilter that applies SoraniStemmer to stem Sorani words.\nClass SoraniStemFilterFactory; // Factory for SoraniStemFilter.\nClass SoraniStemmer; // Light stemmer for Sorani\n", "des": "Analyzer for Sorani Kurdish."}
{"index": 764, "repo": "lucene-analyzers-common-8.11.2", "code": "package commongrams;\n\nClass CommonGramsFilter; // Construct bigrams for frequently occurring terms while indexing.\nClass CommonGramsFilterFactory; // Constructs a CommonGramsFilter.\nClass CommonGramsQueryFilter; // Wrap a CommonGramsFilter optimizing phrase queries by only returning single words when they are not a member of a bigram.\nClass CommonGramsQueryFilterFactory; // Construct CommonGramsQueryFilter.\n", "des": "Construct n-grams for frequently occurring terms and phrases."}
{"index": 765, "repo": "lucene-analyzers-common-8.11.2", "code": "package compound;\n\npackage compound.hyphenation; // Hyphenation code for the CompoundWordTokenFilter.\nClass CompoundWordTokenFilterBase; // Base class for decomposition token filters.\nClass DictionaryCompoundWordTokenFilter; // A TokenFilter that decomposes compound words found in many Germanic languages.\nClass DictionaryCompoundWordTokenFilterFactory; // Factory for DictionaryCompoundWordTokenFilter.\nClass HyphenationCompoundWordTokenFilter; // A TokenFilter that decomposes compound words found in many Germanic languages.\nClass HyphenationCompoundWordTokenFilterFactory; // Factory for HyphenationCompoundWordTokenFilter.\n", "des": "A filter that decomposes compound words you find in many Germanic languages into the word parts."}
{"index": 766, "repo": "lucene-analyzers-common-8.11.2", "code": "package hyphenation;\n\nInterface PatternConsumer; // This interface is used to connect the XML pattern file parser to the hyphenation tree.\nClass ByteVector; // This class implements a simple byte vector with access to the underlying array.\nClass CharVector; // This class implements a simple char vector with access to the underlying array.\nClass Hyphen; // This class represents a hyphen.\nClass Hyphenation; // This class represents a hyphenated word.\nClass HyphenationTree; // This tree structure stores the hyphenation patterns in an efficient way for fast lookup.\nClass PatternParser; // A SAX document handler to read and parse hyphenation patterns from a XML file.\nClass TernaryTree; // Ternary Search Tree.\n", "des": "Hyphenation code for the CompoundWordTokenFilter."}
{"index": 767, "repo": "lucene-analyzers-common-8.11.2", "code": "package core;\n\nClass DecimalDigitFilter; // Folds all Unicode digits in [:General_Category=Decimal_Number:] to Basic Latin digits (0-9).\nClass DecimalDigitFilterFactory; // Factory for DecimalDigitFilter.\nClass FlattenGraphFilter; // Converts an incoming graph token stream, such as one from SynonymGraphFilter, into a flat form so that all nodes form a single linear chain with no side paths.\nClass FlattenGraphFilterFactory; // Factory for FlattenGraphFilter.\nClass KeywordAnalyzer; // \"Tokenizes\" the entire stream as a single token.\nClass KeywordTokenizer; // Emits the entire input as a single token.\nClass KeywordTokenizerFactory; // Factory for KeywordTokenizer.\nClass LetterTokenizer; // A LetterTokenizer is a tokenizer that divides text at non-letters.\nClass LetterTokenizerFactory; // Factory for LetterTokenizer.\nClass LowerCaseFilter; // Normalizes token text to lower case.\nClass LowerCaseFilterFactory; // Factory for LowerCaseFilter.\nClass SimpleAnalyzer; // An Analyzer that filters LetterTokenizer with LowerCaseFilter\nClass StopAnalyzer; // Filters LetterTokenizer with LowerCaseFilter and StopFilter.\nClass StopFilter; // Removes stop words from a token stream.\nClass StopFilterFactory; // Factory for StopFilter.\nClass TypeTokenFilter; // Removes tokens whose types appear in a set of blocked types from a token stream.\nClass TypeTokenFilterFactory; // Factory class for TypeTokenFilter.\nClass UnicodeWhitespaceAnalyzer; // An Analyzer that uses UnicodeWhitespaceTokenizer.\nClass UnicodeWhitespaceTokenizer; // A UnicodeWhitespaceTokenizer is a tokenizer that divides text at whitespace.\nClass UpperCaseFilter; // Normalizes token text to UPPER CASE.\nClass UpperCaseFilterFactory; // Factory for UpperCaseFilter.\nClass WhitespaceAnalyzer; // An Analyzer that uses WhitespaceTokenizer.\nClass WhitespaceTokenizer; // A tokenizer that divides text at whitespace characters as defined by Character.isWhitespace(int).\nClass WhitespaceTokenizerFactory; // Factory for WhitespaceTokenizer.\n", "des": "Basic, general-purpose analysis components."}
{"index": 768, "repo": "lucene-analyzers-common-8.11.2", "code": "package custom;\n\nClass CustomAnalyzer; // A general-purpose Analyzer that can be created with a builder-style API.\nClass CustomAnalyzer.Builder; // Builder for CustomAnalyzer.\nClass CustomAnalyzer.ConditionBuilder; // Factory class for a ConditionalTokenFilter\n", "des": "A general-purpose Analyzer that can be created with a builder-style API."}
{"index": 769, "repo": "lucene-analyzers-common-8.11.2", "code": "package cz;\n\nClass CzechAnalyzer; // Analyzer for Czech language.\nClass CzechStemFilter; // A TokenFilter that applies CzechStemmer to stem Czech words.\nClass CzechStemFilterFactory; // Factory for CzechStemFilter.\nClass CzechStemmer; // Light Stemmer for Czech.\n", "des": "Analyzer for Czech."}
{"index": 770, "repo": "lucene-analyzers-common-8.11.2", "code": "package da;\n\nClass DanishAnalyzer; // Analyzer for Danish.\n", "des": "Analyzer for Danish."}
{"index": 771, "repo": "lucene-analyzers-common-8.11.2", "code": "package de;\n\nClass GermanAnalyzer; // Analyzer for German language.\nClass GermanLightStemFilter; // A TokenFilter that applies GermanLightStemmer to stem German words.\nClass GermanLightStemFilterFactory; // Factory for GermanLightStemFilter.\nClass GermanLightStemmer; // Light Stemmer for German.\nClass GermanMinimalStemFilter; // A TokenFilter that applies GermanMinimalStemmer to stem German words.\nClass GermanMinimalStemFilterFactory; // Factory for GermanMinimalStemFilter.\nClass GermanMinimalStemmer; // Minimal Stemmer for German.\nClass GermanNormalizationFilter; // Normalizes German characters according to the heuristics of the German2 snowball algorithm.\nClass GermanNormalizationFilterFactory; // Factory for GermanNormalizationFilter.\nClass GermanStemFilter; // A TokenFilter that stems German words.\nClass GermanStemFilterFactory; // Factory for GermanStemFilter.\nClass GermanStemmer; // A stemmer for German words.\n", "des": "Analyzer for German."}
{"index": 772, "repo": "lucene-analyzers-common-8.11.2", "code": "package el;\n\nClass GreekAnalyzer; // Analyzer for the Greek language.\nClass GreekLowerCaseFilter; // Normalizes token text to lower case, removes some Greek diacritics, and standardizes final sigma to sigma.\nClass GreekLowerCaseFilterFactory; // Factory for GreekLowerCaseFilter.\nClass GreekStemFilter; // A TokenFilter that applies GreekStemmer to stem Greek words.\nClass GreekStemFilterFactory; // Factory for GreekStemFilter.\nClass GreekStemmer; // A stemmer for Greek words, according to: Development of a Stemmer for the Greek Language. Georgios Ntais\n", "des": "Analyzer for Greek."}
{"index": 773, "repo": "lucene-analyzers-common-8.11.2", "code": "package en;\n\nClass AbstractWordsFileFilterFactory; // Abstract parent class for analysis factories that accept a stopwords file as input.\nClass EnglishAnalyzer; // Analyzer for English.\nClass EnglishMinimalStemFilter; // A TokenFilter that applies EnglishMinimalStemmer to stem English words.\nClass EnglishMinimalStemFilterFactory; // Factory for EnglishMinimalStemFilter.\nClass EnglishMinimalStemmer; // Minimal plural stemmer for English.\nClass EnglishPossessiveFilter; // TokenFilter that removes possessives (trailing 's) from words.\nClass EnglishPossessiveFilterFactory; // Factory for EnglishPossessiveFilter.\nClass KStemFilter; // A high-performance kstem filter for english.\nClass KStemFilterFactory; // Factory for KStemFilter.\nClass KStemmer; // This class implements the Kstem algorithm\nClass PorterStemFilter; // Transforms the token stream as per the Porter stemming algorithm.\nClass PorterStemFilterFactory; // Factory for PorterStemFilter.\n", "des": "Analyzer for English."}
{"index": 774, "repo": "lucene-analyzers-common-8.11.2", "code": "package es;\n\nClass SpanishAnalyzer; // Analyzer for Spanish.\nClass SpanishLightStemFilter; // A TokenFilter that applies SpanishLightStemmer to stem Spanish words.\nClass SpanishLightStemFilterFactory; // Factory for SpanishLightStemFilter.\nClass SpanishLightStemmer; // Light Stemmer for Spanish\nClass SpanishMinimalStemFilter; // A TokenFilter that applies SpanishMinimalStemmer to stem Spanish words.\nClass SpanishMinimalStemFilterFactory; // Factory for SpanishMinimalStemFilter.\nClass SpanishMinimalStemmer; // Minimal plural stemmer for Spanish.\n", "des": "Analyzer for Spanish."}
{"index": 775, "repo": "lucene-analyzers-common-8.11.2", "code": "package et;\n\nClass EstonianAnalyzer; // Analyzer for Estonian.\n", "des": "Analyzer for Estonian."}
{"index": 776, "repo": "lucene-analyzers-common-8.11.2", "code": "package eu;\n\nClass BasqueAnalyzer; // Analyzer for Basque.\n", "des": "Analyzer for Basque."}
{"index": 777, "repo": "lucene-analyzers-common-8.11.2", "code": "package fa;\n\nClass PersianAnalyzer; // Analyzer for Persian.\nClass PersianCharFilter; // CharFilter that replaces instances of Zero-width non-joiner with an ordinary space.\nClass PersianCharFilterFactory; // Factory for PersianCharFilter.\nClass PersianNormalizationFilter; // A TokenFilter that applies PersianNormalizer to normalize the orthography.\nClass PersianNormalizationFilterFactory; // Factory for PersianNormalizationFilter.\nClass PersianNormalizer; // Normalizer for Persian.\n", "des": "Analyzer for Persian."}
{"index": 778, "repo": "lucene-analyzers-common-8.11.2", "code": "package fi;\n\nClass FinnishAnalyzer; // Analyzer for Finnish.\nClass FinnishLightStemFilter; // A TokenFilter that applies FinnishLightStemmer to stem Finnish words.\nClass FinnishLightStemFilterFactory; // Factory for FinnishLightStemFilter.\nClass FinnishLightStemmer; // Light Stemmer for Finnish.\n", "des": "Analyzer for Finnish."}
{"index": 779, "repo": "lucene-analyzers-common-8.11.2", "code": "package fr;\n\nClass FrenchAnalyzer; // Analyzer for French language.\nClass FrenchLightStemFilter; // A TokenFilter that applies FrenchLightStemmer to stem French words.\nClass FrenchLightStemFilterFactory; // Factory for FrenchLightStemFilter.\nClass FrenchLightStemmer; // Light Stemmer for French.\nClass FrenchMinimalStemFilter; // A TokenFilter that applies FrenchMinimalStemmer to stem French words.\nClass FrenchMinimalStemFilterFactory; // Factory for FrenchMinimalStemFilter.\nClass FrenchMinimalStemmer; // Light Stemmer for French.\n", "des": "Analyzer for French."}
{"index": 780, "repo": "lucene-analyzers-common-8.11.2", "code": "package ga;\n\nClass IrishAnalyzer; // Analyzer for Irish.\nClass IrishLowerCaseFilter; // Normalises token text to lower case, handling t-prothesis and n-eclipsis (i.e., that 'nAthair' should become 'n-athair')\nClass IrishLowerCaseFilterFactory; // Factory for IrishLowerCaseFilter.\n", "des": "Analyzer for Irish."}
{"index": 781, "repo": "lucene-analyzers-common-8.11.2", "code": "package gl;\n\nClass GalicianAnalyzer; // Analyzer for Galician.\nClass GalicianMinimalStemFilter; // A TokenFilter that applies GalicianMinimalStemmer to stem Galician words.\nClass GalicianMinimalStemFilterFactory; // Factory for GalicianMinimalStemFilter.\nClass GalicianMinimalStemmer; // Minimal Stemmer for Galician\nClass GalicianStemFilter; // A TokenFilter that applies GalicianStemmer to stem Galician words.\nClass GalicianStemFilterFactory; // Factory for GalicianStemFilter.\nClass GalicianStemmer; // Galician stemmer implementing \"Regras do lematizador para o galego\".\n", "des": "Analyzer for Galician."}
{"index": 782, "repo": "lucene-analyzers-common-8.11.2", "code": "package hi;\n\nClass HindiAnalyzer; // Analyzer for Hindi.\nClass HindiNormalizationFilter; // A TokenFilter that applies HindiNormalizer to normalize the orthography.\nClass HindiNormalizationFilterFactory; // Factory for HindiNormalizationFilter.\nClass HindiNormalizer; // Normalizer for Hindi.\nClass HindiStemFilter; // A TokenFilter that applies HindiStemmer to stem Hindi words.\nClass HindiStemFilterFactory; // Factory for HindiStemFilter.\nClass HindiStemmer; // Light Stemmer for Hindi.\n", "des": "Analyzer for Hindi."}
{"index": 783, "repo": "lucene-analyzers-common-8.11.2", "code": "package hu;\n\nClass HungarianAnalyzer; // Analyzer for Hungarian.\nClass HungarianLightStemFilter; // A TokenFilter that applies HungarianLightStemmer to stem Hungarian words.\nClass HungarianLightStemFilterFactory; // Factory for HungarianLightStemFilter.\nClass HungarianLightStemmer; // Light Stemmer for Hungarian.\n", "des": "Analyzer for Hungarian."}
{"index": 784, "repo": "lucene-analyzers-common-8.11.2", "code": "package hunspell;\n\nInterface DictEntries; // An object representing homonym dictionary entries.\nClass Dictionary; // In-memory structure for the dictionary (.dic) and affix (.aff) data of a hunspell dictionary.\nClass Hunspell; // A spell checker based on Hunspell dictionaries.\nClass HunspellStemFilter; // TokenFilter that uses hunspell affix rules and words to stem tokens.\nClass HunspellStemFilterFactory; // TokenFilterFactory that creates instances of HunspellStemFilter.\nEnum TimeoutPolicy; // A strategy determining what to do when Hunspell API calls take too much time\nClass SuggestionTimeoutException; // An exception thrown when Hunspell.suggest(java.lang.String) call takes too long, if TimeoutPolicy.THROW_EXCEPTION is used.\n", "des": "A Java implementation of Hunspell stemming and spell-checking algorithms (Hunspell), and a stemming TokenFilter (HunspellStemFilter) based on it."}
{"index": 785, "repo": "lucene-analyzers-common-8.11.2", "code": "package hy;\n\nClass ArmenianAnalyzer; // Analyzer for Armenian.\n", "des": "Analyzer for Armenian."}
{"index": 786, "repo": "lucene-analyzers-common-8.11.2", "code": "package id;\n\nClass IndonesianAnalyzer; // Analyzer for Indonesian (Bahasa)\nClass IndonesianStemFilter; // A TokenFilter that applies IndonesianStemmer to stem Indonesian words.\nClass IndonesianStemFilterFactory; // Factory for IndonesianStemFilter.\nClass IndonesianStemmer; // Stemmer for Indonesian.\n", "des": "Analyzer for Indonesian."}
{"index": 787, "repo": "lucene-analyzers-common-8.11.2", "code": "package in;\n\nClass IndicNormalizationFilter; // A TokenFilter that applies IndicNormalizer to normalize text in Indian Languages.\nClass IndicNormalizationFilterFactory; // Factory for IndicNormalizationFilter.\nClass IndicNormalizer; // Normalizes the Unicode representation of text in Indian languages.\n", "des": "Analyzer for Indian languages."}
{"index": 788, "repo": "lucene-analyzers-common-8.11.2", "code": "package it;\n\nClass ItalianAnalyzer; // Analyzer for Italian.\nClass ItalianLightStemFilter; // A TokenFilter that applies ItalianLightStemmer to stem Italian words.\nClass ItalianLightStemFilterFactory; // Factory for ItalianLightStemFilter.\nClass ItalianLightStemmer; // Light Stemmer for Italian.\n", "des": "Analyzer for Italian."}
{"index": 789, "repo": "lucene-analyzers-common-8.11.2", "code": "package lt;\n\nClass LithuanianAnalyzer; // Analyzer for Lithuanian.\n", "des": "Analyzer for Lithuanian."}
{"index": 790, "repo": "lucene-analyzers-common-8.11.2", "code": "package lv;\n\nClass LatvianAnalyzer; // Analyzer for Latvian.\nClass LatvianStemFilter; // A TokenFilter that applies LatvianStemmer to stem Latvian words.\nClass LatvianStemFilterFactory; // Factory for LatvianStemFilter.\nClass LatvianStemmer; // Light stemmer for Latvian.\n", "des": "Analyzer for Latvian."}
{"index": 791, "repo": "lucene-analyzers-common-8.11.2", "code": "package minhash;\n\nClass MinHashFilter; // Generate min hash tokens from an incoming stream of tokens.\nClass MinHashFilterFactory; // TokenFilterFactory for MinHashFilter.\n", "des": "MinHash filtering (for LSH)."}
{"index": 792, "repo": "lucene-analyzers-common-8.11.2", "code": "package miscellaneous;\n\nInterface ConcatenateGraphFilter.BytesRefBuilderTermAttribute; // Attribute providing access to the term builder and UTF-16 conversion\nClass ASCIIFoldingFilter; // This class converts alphabetic, numeric, and symbolic Unicode characters which are not in the first 127 ASCII characters (the \"Basic Latin\" Unicode block) into their ASCII equivalents, if one exists.\nClass ASCIIFoldingFilterFactory; // Factory for ASCIIFoldingFilter.\nClass CapitalizationFilter; // A filter to apply normal capitalization rules to Tokens.\nClass CapitalizationFilterFactory; // Factory for CapitalizationFilter.\nClass CodepointCountFilter; // Removes words that are too long or too short from the stream.\nClass CodepointCountFilterFactory; // Factory for CodepointCountFilter.\nClass ConcatenateGraphFilter; // Concatenates/Joins every incoming token with a separator into one output token for every path through the token stream (which is a graph).\nClass ConcatenateGraphFilter.BytesRefBuilderTermAttributeImpl; // Implementation of ConcatenateGraphFilter.BytesRefBuilderTermAttribute\nClass ConcatenateGraphFilterFactory; // Factory for ConcatenateGraphFilter.\nClass ConcatenatingTokenStream; // A TokenStream that takes an array of input TokenStreams as sources, and concatenates them together.\nClass ConditionalTokenFilter; // Allows skipping TokenFilters based on the current set of attributes.\nClass ConditionalTokenFilterFactory; // Abstract parent class for analysis factories that create ConditionalTokenFilter instances\nClass DateRecognizerFilter; // Filters all tokens that cannot be parsed to a date, using the provided DateFormat.\nClass DateRecognizerFilterFactory; // Factory for DateRecognizerFilter.\nClass DelimitedTermFrequencyTokenFilter; // Characters before the delimiter are the \"token\", the textual integer after is the term frequency.\nClass DelimitedTermFrequencyTokenFilterFactory; // Factory for DelimitedTermFrequencyTokenFilter.\nClass DropIfFlaggedFilter; // Allows Tokens with a given combination of flags to be dropped.\nClass DropIfFlaggedFilterFactory; // Provides a filter that will drop tokens matching a set of flags.\nClass EmptyTokenStream; // An always exhausted token stream.\nClass FingerprintFilter; // Filter outputs a single token which is a concatenation of the sorted and de-duplicated set of input tokens.\n", "des": "Miscellaneous Tokenstreams."}
{"index": 793, "repo": "lucene-analyzers-common-8.11.2", "code": "package ngram;\n\nClass EdgeNGramFilterFactory; // Creates new instances of EdgeNGramTokenFilter.\nClass EdgeNGramTokenFilter; // Tokenizes the given token into n-grams of given size(s).\nClass EdgeNGramTokenizer; // Tokenizes the input from an edge into n-grams of given size(s).\nClass EdgeNGramTokenizerFactory; // Creates new instances of EdgeNGramTokenizer.\nClass NGramFilterFactory; // Factory for NGramTokenFilter.\nClass NGramTokenFilter; // Tokenizes the input into n-grams of the given size(s).\nClass NGramTokenizer; // Tokenizes the input into n-grams of the given size(s).\nClass NGramTokenizerFactory; // Factory for NGramTokenizer.\n", "des": "Character n-gram tokenizers and filters."}
{"index": 794, "repo": "lucene-analyzers-common-8.11.2", "code": "package nl;\n\nClass DutchAnalyzer; // Analyzer for Dutch language.\n", "des": "Analyzer for Dutch."}
{"index": 795, "repo": "lucene-analyzers-common-8.11.2", "code": "package no;\n\nClass NorwegianAnalyzer; // Analyzer for Norwegian.\nClass NorwegianLightStemFilter; // A TokenFilter that applies NorwegianLightStemmer to stem Norwegian words.\nClass NorwegianLightStemFilterFactory; // Factory for NorwegianLightStemFilter.\nClass NorwegianLightStemmer; // Light Stemmer for Norwegian.\nClass NorwegianMinimalStemFilter; // A TokenFilter that applies NorwegianMinimalStemmer to stem Norwegian words.\nClass NorwegianMinimalStemFilterFactory; // Factory for NorwegianMinimalStemFilter.\nClass NorwegianMinimalStemmer; // Minimal Stemmer for Norwegian Bokmål (no-nb) and Nynorsk (no-nn)\n", "des": "Analyzer for Norwegian."}
{"index": 796, "repo": "lucene-analyzers-common-8.11.2", "code": "package path;\n\nClass PathHierarchyTokenizer; // Tokenizer for path-like hierarchies.\nClass PathHierarchyTokenizerFactory; // Factory for PathHierarchyTokenizer.\nClass ReversePathHierarchyTokenizer; // Tokenizer for domain-like hierarchies.\n", "des": "Analysis components for path-like strings such as filenames."}
{"index": 797, "repo": "lucene-analyzers-common-8.11.2", "code": "package pattern;\n\nClass PatternCaptureGroupFilterFactory; // Factory for PatternCaptureGroupTokenFilter.\nClass PatternCaptureGroupTokenFilter; // CaptureGroup uses Java regexes to emit multiple tokens - one for each capture group in one or more patterns.\nClass PatternReplaceCharFilter; // CharFilter that uses a regular expression for the target of replace string.\nClass PatternReplaceCharFilterFactory; // Factory for PatternReplaceCharFilter.\nClass PatternReplaceFilter; // A TokenFilter which applies a Pattern to each token in the stream, replacing match occurrences with the specified replacement string.\nClass PatternReplaceFilterFactory; // Factory for PatternReplaceFilter.\nClass PatternTokenizer; // This tokenizer uses regex pattern matching to construct distinct tokens for the input stream.\nClass PatternTokenizerFactory; // Factory for PatternTokenizer.\nClass PatternTypingFilter; // Set a type attribute to a parameterized value when tokens are matched by any of a several regex patterns.\nClass PatternTypingFilter.PatternTypingRule; // Value holding class for pattern typing rules.\nClass PatternTypingFilterFactory; // Provides a filter that will analyze tokens with the analyzer from an arbitrary field type.\nClass SimplePatternSplitTokenizer; // This tokenizer uses a Lucene RegExp or (expert usage) a pre-built determinized Automaton, to locate tokens.\nClass SimplePatternSplitTokenizerFactory; // Factory for SimplePatternSplitTokenizer, for producing tokens by splitting according to the provided regexp.\nClass SimplePatternTokenizer; // This tokenizer uses a Lucene RegExp or (expert usage) a pre-built determinized Automaton, to locate tokens.\nClass SimplePatternTokenizerFactory; // Factory for SimplePatternTokenizer, for matching tokens based on the provided regexp.\n", "des": "Set of components for pattern-based (regex) analysis."}
{"index": 798, "repo": "lucene-analyzers-common-8.11.2", "code": "package payloads;\n\nInterface PayloadEncoder; // Mainly for use with the DelimitedPayloadTokenFilter, converts char buffers to BytesRef.\nClass AbstractEncoder; // Base class for payload encoders.\nClass DelimitedPayloadTokenFilter; // Characters before the delimiter are the \"token\", those after are the payload.\nClass DelimitedPayloadTokenFilterFactory; // Factory for DelimitedPayloadTokenFilter.\nClass FloatEncoder; // Encode a character array Float as a BytesRef.\nClass IdentityEncoder; // Does nothing other than convert the char array to a byte array using the specified encoding.\nClass IntegerEncoder; // Encode a character array Integer as a BytesRef.\nClass NumericPayloadTokenFilter; // Assigns a payload to a token based on the TypeAttribute\nClass NumericPayloadTokenFilterFactory; // Factory for NumericPayloadTokenFilter.\nClass PayloadHelper; // Utility methods for encoding payloads.\nClass TokenOffsetPayloadTokenFilter; // Adds the OffsetAttribute.startOffset() and OffsetAttribute.endOffset() First 4 bytes are the start\nClass TokenOffsetPayloadTokenFilterFactory; // Factory for TokenOffsetPayloadTokenFilter.\nClass TypeAsPayloadTokenFilter; // Makes the TypeAttribute a payload.\nClass TypeAsPayloadTokenFilterFactory; // Factory for TypeAsPayloadTokenFilter.\n", "des": "Provides various convenience classes for creating payloads on Tokens."}
{"index": 799, "repo": "lucene-analyzers-common-8.11.2", "code": "package pt;\n\nClass PortugueseAnalyzer; // Analyzer for Portuguese.\nClass PortugueseLightStemFilter; // A TokenFilter that applies PortugueseLightStemmer to stem Portuguese words.\nClass PortugueseLightStemFilterFactory; // Factory for PortugueseLightStemFilter.\nClass PortugueseLightStemmer; // Light Stemmer for Portuguese\nClass PortugueseMinimalStemFilter; // A TokenFilter that applies PortugueseMinimalStemmer to stem Portuguese words.\nClass PortugueseMinimalStemFilterFactory; // Factory for PortugueseMinimalStemFilter.\nClass PortugueseMinimalStemmer; // Minimal Stemmer for Portuguese\nClass PortugueseStemFilter; // A TokenFilter that applies PortugueseStemmer to stem Portuguese words.\nClass PortugueseStemFilterFactory; // Factory for PortugueseStemFilter.\nClass PortugueseStemmer; // Portuguese stemmer implementing the RSLP (Removedor de Sufixos da Lingua Portuguesa) algorithm.\nClass RSLPStemmerBase; // Base class for stemmers that use a set of RSLP-like stemming steps.\nClass RSLPStemmerBase.Rule; // A basic rule, with no exceptions.\nClass RSLPStemmerBase.RuleWithSetExceptions; // A rule with a set of whole-word exceptions.\nClass RSLPStemmerBase.RuleWithSuffixExceptions; // A rule with a set of exceptional suffixes.\nClass RSLPStemmerBase.Step; // A step containing a list of rules.\n", "des": "Analyzer for Portuguese."}
{"index": 800, "repo": "lucene-analyzers-common-8.11.2", "code": "package query;\n\nClass QueryAutoStopWordAnalyzer; // An Analyzer used primarily at query time to wrap another analyzer and provide a layer of protection which prevents very common words from being passed into queries.\n", "des": "Automatically filter high-frequency stopwords."}
{"index": 801, "repo": "lucene-analyzers-common-8.11.2", "code": "package reverse;\n\nClass ReverseStringFilter; // Reverse token string, for example \"country\" => \"yrtnuoc\".\nClass ReverseStringFilterFactory; // Factory for ReverseStringFilter.\n", "des": "Filter to reverse token text."}
{"index": 802, "repo": "lucene-analyzers-common-8.11.2", "code": "package ro;\n\nClass RomanianAnalyzer; // Analyzer for Romanian.\n", "des": "Analyzer for Romanian."}
{"index": 803, "repo": "lucene-analyzers-common-8.11.2", "code": "package ru;\n\nClass RussianAnalyzer; // Analyzer for Russian language.\nClass RussianLightStemFilter; // A TokenFilter that applies RussianLightStemmer to stem Russian words.\nClass RussianLightStemFilterFactory; // Factory for RussianLightStemFilter.\nClass RussianLightStemmer; // Light Stemmer for Russian.\n", "des": "Analyzer for Russian."}
{"index": 804, "repo": "lucene-analyzers-common-8.11.2", "code": "package shingle;\n\nClass FixedShingleFilter; // A FixedShingleFilter constructs shingles (token n-grams) from a token stream.\nClass FixedShingleFilterFactory; // Factory for FixedShingleFilter Parameters are: shingleSize - how many tokens should be combined into each shingle (default: 2) tokenSeparator - how tokens should be joined together in the shingle (default: space) fillerToken - what should be added in place of stop words (default: _ )\nClass ShingleAnalyzerWrapper; // A ShingleAnalyzerWrapper wraps a ShingleFilter around another Analyzer.\nClass ShingleFilter; // A ShingleFilter constructs shingles (token n-grams) from a token stream.\nClass ShingleFilterFactory; // Factory for ShingleFilter.\n", "des": "Word n-gram filters."}
{"index": 805, "repo": "lucene-analyzers-common-8.11.2", "code": "package sinks;\n\nClass TeeSinkTokenFilter; // This TokenFilter provides the ability to set aside attribute states that have already been analyzed.\nClass TeeSinkTokenFilter.SinkTokenStream; // TokenStream output from a tee.\n", "des": "TeeSinkTokenFilter."}
{"index": 806, "repo": "lucene-analyzers-common-8.11.2", "code": "package snowball;\n\nClass SnowballFilter; // A filter that stems words using a Snowball-generated stemmer.\nClass SnowballPorterFilterFactory; // Factory for SnowballFilter, with configurable language\n", "des": "TokenFilter and Analyzer implementations that use Snowball stemmers."}
{"index": 807, "repo": "lucene-analyzers-common-8.11.2", "code": "package sr;\n\nClass SerbianNormalizationFilter; // Normalizes Serbian Cyrillic and Latin characters to \"bald\" Latin.\nClass SerbianNormalizationFilterFactory; // Factory for SerbianNormalizationFilter.\nClass SerbianNormalizationRegularFilter; // Normalizes Serbian Cyrillic to Latin.\n", "des": "Analyzer for Serbian."}
{"index": 808, "repo": "lucene-analyzers-common-8.11.2", "code": "package standard;\n\nClass ClassicAnalyzer; // Filters ClassicTokenizer with ClassicFilter, LowerCaseFilter and StopFilter, using a list of English stop words.\nClass ClassicFilter; // Normalizes tokens extracted with ClassicTokenizer.\nClass ClassicFilterFactory; // Factory for ClassicFilter.\nClass ClassicTokenizer; // A grammar-based tokenizer constructed with JFlex\nClass ClassicTokenizerFactory; // Factory for ClassicTokenizer.\nClass StandardTokenizerFactory; // Factory for StandardTokenizer.\nClass UAX29URLEmailAnalyzer; // Filters UAX29URLEmailTokenizer with LowerCaseFilter and StopFilter, using a list of English stop words.\nClass UAX29URLEmailTokenizer; // This class implements Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29 URLs and email addresses are also tokenized according to the relevant RFCs.\nClass UAX29URLEmailTokenizerFactory; // Factory for UAX29URLEmailTokenizer.\nClass UAX29URLEmailTokenizerImpl; // This class implements Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29 URLs and email addresses are also tokenized according to the relevant RFCs.\n", "des": "Fast, general-purpose grammar-based tokenizers."}
{"index": 809, "repo": "lucene-analyzers-common-8.11.2", "code": "package sv;\n\nClass SwedishAnalyzer; // Analyzer for Swedish.\nClass SwedishLightStemFilter; // A TokenFilter that applies SwedishLightStemmer to stem Swedish words.\nClass SwedishLightStemFilterFactory; // Factory for SwedishLightStemFilter.\nClass SwedishLightStemmer; // Light Stemmer for Swedish.\n", "des": "Analyzer for Swedish."}
{"index": 810, "repo": "lucene-analyzers-common-8.11.2", "code": "package synonym;\n\nClass SolrSynonymParser; // Parser for the Solr synonyms format.\nClass SynonymFilter; // Use SynonymGraphFilter instead, but be sure to also use FlattenGraphFilter at index time (not at search time) as well.\nClass SynonymFilterFactory; // Use SynonymGraphFilterFactory instead, but be sure to also use FlattenGraphFilterFactory at index time (not at search time) as well.\nClass SynonymGraphFilter; // Applies single- or multi-token synonyms from a SynonymMap to an incoming TokenStream, producing a fully correct graph output.\nClass SynonymGraphFilterFactory; // Factory for SynonymGraphFilter.\nClass SynonymMap; // A map of synonyms, keys and values are phrases.\nClass SynonymMap.Builder; // Builds an FSTSynonymMap.\nClass SynonymMap.Parser; // Abstraction for parsing synonym files.\nClass WordnetSynonymParser; // Parser for wordnet prolog format\n", "des": "Analysis components for Synonyms."}
{"index": 811, "repo": "lucene-analyzers-common-8.11.2", "code": "package te;\n\nClass TeluguAnalyzer; // Analyzer for Telugu.\nClass TeluguNormalizationFilter; // A TokenFilter that applies TeluguNormalizer to normalize the orthography.\nClass TeluguNormalizationFilterFactory; // Factory for TeluguNormalizationFilter.\nClass TeluguNormalizer; // Normalizer for Telugu.\nClass TeluguStemFilter; // A TokenFilter that applies TeluguStemmer to stem Telugu words.\nClass TeluguStemFilterFactory; // Factory for TeluguStemFilter.\nClass TeluguStemmer; // Stemmer for Telugu.\n", "des": "Analyzer for Telugu Language."}
{"index": 812, "repo": "lucene-analyzers-common-8.11.2", "code": "package th;\n\nClass ThaiAnalyzer; // Analyzer for Thai language.\nClass ThaiTokenizer; // Tokenizer that use BreakIterator to tokenize Thai text.\nClass ThaiTokenizerFactory; // Factory for ThaiTokenizer.\n", "des": "Analyzer for Thai."}
{"index": 813, "repo": "lucene-analyzers-common-8.11.2", "code": "package tr;\n\nClass ApostropheFilter; // Strips all characters after an apostrophe (including the apostrophe itself).\nClass ApostropheFilterFactory; // Factory for ApostropheFilter.\nClass TurkishAnalyzer; // Analyzer for Turkish.\nClass TurkishLowerCaseFilter; // Normalizes Turkish token text to lower case.\nClass TurkishLowerCaseFilterFactory; // Factory for TurkishLowerCaseFilter.\n", "des": "Analyzer for Turkish."}
{"index": 814, "repo": "lucene-analyzers-common-8.11.2", "code": "package util;\n\nInterface ResourceLoader; // Abstraction for loading resources (streams, files, and classes).\nInterface ResourceLoaderAware; // Interface for a component that needs to be initialized by an implementation of ResourceLoader.\nClass AbstractAnalysisFactory; // Abstract parent class for analysis factories TokenizerFactory, TokenFilterFactory and CharFilterFactory.\nClass AnalysisSPILoader<S extends AbstractAnalysisFactory>; // Helper class for loading named SPIs from classpath (e.g.\nClass CharArrayIterator; // A CharacterIterator used internally for use with BreakIterator\nClass CharFilterFactory; // Abstract parent class for analysis factories that create CharFilter instances.\nClass CharTokenizer; // An abstract base class for simple, character-oriented tokenizers.\nClass ClasspathResourceLoader; // Simple ResourceLoader that uses ClassLoader.getResourceAsStream(String) and Class.forName(String,boolean,ClassLoader) to open resources and classes, respectively.\nClass ElisionFilter; // Removes elisions from a TokenStream.\nClass ElisionFilterFactory; // Factory for ElisionFilter.\nClass FilesystemResourceLoader; // Simple ResourceLoader that opens resource files from the local file system, optionally resolving against a base directory.\nClass OpenStringBuilder; // A StringBuilder that allows one to access the array.\nClass RollingCharBuffer; // Acts like a forever growing char[] as you read characters into it from the provided reader, but internally it uses a circular buffer to only hold the characters that haven't been freed yet.\nClass SegmentingTokenizerBase; // Breaks text into sentences with a BreakIterator and allows subclasses to decompose these sentences into words.\nClass StemmerUtil; // Some commonly-used stemming functions\nClass TokenFilterFactory; // Abstract parent class for analysis factories that create TokenFilter instances.\nClass TokenizerFactory; // Abstract parent class for analysis factories that create Tokenizer instances.\nClass UnicodeProps; // This file contains unicode properties used by various CharTokenizers.\n", "des": "Utility functions for text analysis."}
{"index": 815, "repo": "lucene-analyzers-common-8.11.2", "code": "package wikipedia;\n\nClass WikipediaTokenizer; // Extension of StandardTokenizer that is aware of Wikipedia syntax.\nClass WikipediaTokenizerFactory; // Factory for WikipediaTokenizer.\n", "des": "Tokenizer that is aware of Wikipedia syntax."}
{"index": 816, "repo": "lucene-analyzers-common-8.11.2", "code": "package collation;\n\npackage collation.tokenattributes; // Custom AttributeImpl for indexing collation keys as index terms.\nClass CollationAttributeFactory; // Converts each token into its CollationKey, and then encodes the bytes as an index term.\nClass CollationDocValuesField; // Indexes collation keys as a single-valued SortedDocValuesField.\nClass CollationKeyAnalyzer; // Configures KeywordTokenizer with CollationAttributeFactory.\n", "des": "Unicode collation support."}
{"index": 817, "repo": "lucene-analyzers-common-8.11.2", "code": "package tokenattributes;\n\nClass CollatedTermAttributeImpl; // Extension of CharTermAttributeImpl that encodes the term text as a binary Unicode collation key instead of as UTF-8 bytes.\n", "des": "Custom AttributeImpl for indexing collation keys as index terms."}
{"index": 818, "repo": "lucene-analyzers-common-8.11.2", "code": "package snowball;\n\npackage snowball.ext; // Autogenerated snowball stemmer implementations.\nClass Among; // This is the rev 502 of the Snowball SVN trunk, now located at GitHub, but modified: made abstract and introduced abstract method stem to avoid expensive reflection in filter class.\nClass SnowballProgram; // This is the rev 502 of the Snowball SVN trunk, now located at GitHub, but modified: made abstract and introduced abstract method stem to avoid expensive reflection in filter class.\n", "des": "Snowball stemmer API"}
{"index": 819, "repo": "lucene-analyzers-common-8.11.2", "code": "package ext;\n\nClass ArabicStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass ArmenianStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass BasqueStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass CatalanStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass DanishStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass DutchStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass EnglishStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass EstonianStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass FinnishStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass FrenchStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass German2Stemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass GermanStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass HungarianStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass IrishStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\n", "des": "Autogenerated snowball stemmer implementations."}
{"index": 820, "repo": "commons-rng-simple-1.5", "code": "package simple;\n\npackage simple.internal; // Utilities for seed conversion.\nClass JDKRandomBridge; // Subclass of Random that delegates to a RestorableUniformRandomProvider instance but will otherwise rely on the base class for generating all the random types.\nClass JDKRandomWrapper; // Wraps a Random instance to implement UniformRandomProvider.\nClass ThreadLocalRandomSource; // This class provides a thread-local UniformRandomProvider.\nEnum RandomSource; // This class provides the API for creating generators of random numbers.\n", "des": "This package provides factory methods by which low-level classes implemented in module \"commons-rng-core\" are instantiated."}
{"index": 821, "repo": "commons-rng-simple-1.5", "code": "package internal;\n\nInterface Seed2ArrayConverter<IN,OUT>; // Seed converter to create an output array type.\nInterface SeedConverter<IN,OUT>; // Seed converter.\nClass ByteArray2IntArray; // Creates a int[] from a byte[].\nClass ByteArray2LongArray; // Creates a long[] from a byte[].\nClass Int2Long; // Converts a Integer to an Long.\nClass IntArray2Int; // Creates a single value by \"xor\" of all the values in the input array.\nClass IntArray2LongArray; // Creates a long[] from an int[].\nClass Long2Int; // Converts a Long to an Integer.\nClass Long2IntArray; // Uses a long value to seed a SplitMix64 RNG and create a int[] with the requested number of random values.\nClass Long2LongArray; // Uses a Long value to seed a SplitMix64 RNG and create a long[] with the requested number of random values.\nClass LongArray2IntArray; // Creates an int[] from a long[].\nClass LongArray2Long; // Creates a single value by \"xor\" of all the values in the input array.\nClass NoOpConverter<SEED>; // Dummy converter that simply passes on its input.\nClass ProviderBuilder; // RNG builder.\nClass SeedConverterComposer<IN,TRANS,OUT>; // Composes two converters.\nClass SeedFactory; // Utilities related to seeding.\nEnum NativeSeedType; // The native seed type.\nEnum ProviderBuilder.RandomSourceInternal; // Identifiers of the generators.\n", "des": "Utilities for seed conversion."}
{"index": 822, "repo": "calcite-core-1.34.0", "code": "package calcite;\n\npackage calcite.config; // Configuration.\npackage calcite.interpreter; // Provides an implementation of relational expressions using an interpreter.\npackage calcite.jdbc; // JDBC driver for Calcite.\npackage calcite.materialize; // Management of materialized query results.\npackage calcite.model; // Provides model files, in JSON format, defining schemas and other metadata.\npackage calcite.plan; // Defines interfaces for constructing rule-based optimizers of relational expressions.\npackage calcite.prepare; // Preparation of queries (parsing, planning and implementation).\npackage calcite.profile; // Utilities to analyze data sets.\npackage calcite.rel; // Defines relational expressions.\npackage calcite.rex; // Provides a language for representing row-expressions.\npackage calcite.runtime; // Utilities required at runtime.\npackage calcite.schema; // Schema SPI.\npackage calcite.server; // Provides a server for hosting Calcite connections.\npackage calcite.sql; // Provides a SQL parser and object model.\npackage calcite.sql2rel; // Translates a SQL parse tree to relational expression.\npackage calcite.statistic; // Implementations of statistics providers.\npackage calcite.tools; // Provides utility classes.\npackage calcite.util; // Provides utility classes.\nInterface DataContext; // Runtime context allowing access to the tables in a database.\nClass DataContexts; // Utilities for DataContext.\nClass Demo; // Demo.\nEnum DataContext.Variable; // Variable that may be asked for in a call to DataContext.get(java.lang.String).\nAnnotation Type CalciteImmutable; // Annotation to be used to convert interfaces/abstract classes into Immutable POJO using Immutables package.\n", "des": "Main package for Calcite, the dynamic data management platform."}
{"index": 823, "repo": "calcite-core-1.34.0", "code": "package clone;\n\nClass CloneSchema; // Schema that contains in-memory copies of tables from a JDBC schema.\nClass CloneSchema.Factory; // Schema factory that creates a CloneSchema.\n", "des": "Provides utility classes."}
{"index": 824, "repo": "calcite-core-1.34.0", "code": "package enumerable;\n\npackage enumerable.impl; // Calcite-specific classes for implementation of regular and window aggregates.\nInterface AggAddContext; // Information for a call to AggImplementor.implementAdd(AggContext, AggAddContext).\nInterface AggContext; // Information on the aggregate calculation context.\nInterface AggImplementor; // Implements an aggregate function by generating expressions to initialize, add to, and get a result from, an accumulator.\nInterface AggregateLambdaFactory<TSource,TOrigAccumulate,TAccumulate,TResult,TKey>; // Generates lambda functions used in EnumerableAggregate.\nInterface AggResetContext; // Information for a call to AggImplementor.implementReset(AggContext, AggResetContext).\nInterface AggResultContext; // Information for a call to AggImplementor.implementResult(AggContext, AggResultContext)\nInterface CallImplementor; // Implements a call via given translator.\nInterface EnumerableBatchNestedLoopJoinRule.Config; // Rule configuration.\nInterface EnumerableFilterToCalcRule.Config; // Rule configuration.\nInterface EnumerableLimitRule.Config; // Rule configuration.\nInterface EnumerableLimitSortRule.Config; // Rule configuration.\nInterface EnumerableMergeUnionRule.Config; // Rule configuration.\nInterface EnumerableProjectToCalcRule.Config; // Rule configuration.\nInterface EnumerableRel; // A relational expression of one of the EnumerableConvention calling conventions.\nInterface LazyAggregateLambdaFactory.LazyAccumulator<TOrigAccumulate,TSource>; // Accumulate on the cached input sources.\nInterface MatchImplementor; // Implementor of Functions used in MATCH_RECOGNIZE Context.\nInterface NestedBlockBuilder; // Allows to build nested code blocks with tracking of current context.\nInterface NotNullImplementor; // Simplified version of CallImplementor that does not know about null semantics.\nInterface PhysType; // Physical type of a row.\nInterface RexImpTable.RexCallImplementor; // Null-safe implementor of RexCalls.\nInterface RexToLixTranslator.InputGetter; // Translates a field of an input to an expression.\nInterface TableFunctionCallImplementor; // Implements a table-valued function call.\nInterface WinAggAddContext; // Information for a call to AggImplementor.implementAdd(AggContext, AggAddContext).\n", "des": "Query optimizer rules for Java calling convention."}
{"index": 825, "repo": "calcite-core-1.34.0", "code": "package impl;\n\nClass AggAddContextImpl; // Implementation of AggAddContext.\nClass AggResetContextImpl; // Implementation of AggResetContext.\nClass AggResultContextImpl; // Implementation of AggResultContext.\nClass WinAggAddContextImpl; // Implementation of WinAggAddContext.\nClass WinAggResetContextImpl; // Implementation of WinAggResetContext.\nClass WinAggResultContextImpl; // Implementation of WinAggResultContext.\n", "des": "Calcite-specific classes for implementation of regular and window aggregates."}
{"index": 826, "repo": "calcite-core-1.34.0", "code": "package java;\n\nInterface JavaTypeFactory; // Type factory that can register Java classes as record types.\nClass AbstractQueryableTable; // Abstract base class for implementing Table.\nClass ReflectiveSchema; // Implementation of Schema that exposes the public fields and methods in a Java object.\nClass ReflectiveSchema.Factory; // Factory that creates a schema by instantiating an object and looking at its public fields.\nAnnotation Type Array; // Annotation that indicates that a field is an array type.\nAnnotation Type Map; // Annotation that indicates that a field is a map type.\n", "des": "Query provider based on Java in-memory data structures."}
{"index": 827, "repo": "calcite-core-1.34.0", "code": "package jdbc;\n\nInterface JdbcRel; // Relational expression that uses JDBC calling convention.\nInterface JdbcSchema.Foo; // Do not use.\nClass JdbcCatalogSchema; // Schema based upon a JDBC catalog (database).\nClass JdbcConvention; // Calling convention for relational operations that occur in a JDBC database.\nClass JdbcImplementor; // State for generating a SQL statement.\nClass JdbcQueryProvider; // Implementation of QueryProvider that talks to JDBC databases.\nClass JdbcRules; // Rules and relational operators for JdbcConvention calling convention.\nClass JdbcRules.JdbcAggregate; // Aggregate operator implemented in JDBC convention.\nClass JdbcRules.JdbcAggregateRule; // Rule to convert a Aggregate to a JdbcRules.JdbcAggregate.\nClass JdbcRules.JdbcCalc;\nClass JdbcRules.JdbcFilter; // Implementation of Filter in jdbc calling convention.\nClass JdbcRules.JdbcFilterRule; // Rule to convert a Filter to an JdbcRules.JdbcFilter.\nClass JdbcRules.JdbcIntersect; // Intersect operator implemented in JDBC convention.\nClass JdbcRules.JdbcIntersectRule; // Rule to convert a Intersect to a JdbcRules.JdbcIntersect.\nClass JdbcRules.JdbcJoin; // Join operator implemented in JDBC convention.\nClass JdbcRules.JdbcJoinRule; // Rule that converts a join to JDBC.\nClass JdbcRules.JdbcMinus; // Minus operator implemented in JDBC convention.\nClass JdbcRules.JdbcMinusRule; // Rule to convert a Minus to a JdbcRules.JdbcMinus.\nClass JdbcRules.JdbcProject; // Implementation of Project in jdbc calling convention.\nClass JdbcRules.JdbcProjectRule; // Rule to convert a Project to an JdbcRules.JdbcProject.\nClass JdbcRules.JdbcSort; // Sort operator implemented in JDBC convention.\nClass JdbcRules.JdbcSortRule; // Rule to convert a Sort to an JdbcRules.JdbcSort.\nClass JdbcRules.JdbcTableModificationRule; // Rule that converts a table-modification to JDBC.\nClass JdbcRules.JdbcTableModify; // Table-modification operator implemented in JDBC convention.\nClass JdbcRules.JdbcUnion; // Union operator implemented in JDBC convention.\nClass JdbcRules.JdbcUnionRule; // Rule to convert an Union to a JdbcRules.JdbcUnion.\nClass JdbcRules.JdbcValues; // Values operator implemented in JDBC convention.\nClass JdbcRules.JdbcValuesRule; // Rule that converts a values operator to JDBC.\n", "des": "Query provider based on a JDBC data source."}
{"index": 828, "repo": "calcite-core-1.34.0", "code": "package config;\n\nInterface CalciteConnectionConfig; // Interface for reading connection properties within Calcite code.\nClass CalciteConnectionConfigImpl; // Implementation of CalciteConnectionConfig.\nClass CalciteSystemProperty<T>; // A Calcite specific system property that is used to configure various aspects of the framework.\nEnum CalciteConnectionProperty; // Properties that may be specified on the JDBC connect string.\nEnum CharLiteralStyle; // Styles of character literal.\nEnum Lex; // Named, built-in lexical policy.\nEnum NullCollation; // Strategy for how NULL values are to be sorted if NULLS FIRST or NULLS LAST are not specified in an item in the ORDER BY clause.\n", "des": "Configuration."}
{"index": 829, "repo": "calcite-core-1.34.0", "code": "package interpreter;\n\nInterface BindableRel; // Relational expression that can implement itself in Bindable convention.\nInterface Bindables.BindableTableScanRule.Config; // Rule configuration.\nInterface Compiler; // Context while converting a tree of RelNode to a program that can be run by an Interpreter.\nInterface InterpretableRel; // Relational expression that can implement itself using an interpreter.\nInterface Node; // Relational expression that can be executed using an interpreter.\nInterface Scalar; // Compiled scalar expression.\nInterface Scalar.Producer; // Produces a Scalar when a query is executed.\nInterface Sink; // Sink to which to send rows.\nInterface Source; // Source of rows.\nClass AggregateNode; // Interpreter node that implements an Aggregate.\nClass AggregateNode.BigDecimalSum; // Implementation of SUM over BigDecimal values as a user-defined aggregate.\nClass AggregateNode.DoubleSum; // Implementation of SUM over DOUBLE values as a user-defined aggregate.\nClass AggregateNode.IntSum; // Implementation of SUM over INTEGER values as a user-defined aggregate.\nClass AggregateNode.LongSum; // Implementation of SUM over BIGINT values as a user-defined aggregate.\nClass AggregateNode.MaxBigDecimal; // Implementation of MAX function to calculate the maximum of BigDecimal values as a user-defined aggregate.\nClass AggregateNode.MaxDouble; // Implementation of MAX function to calculate the maximum of double and real values as a user-defined aggregate.\nClass AggregateNode.MaxFloat; // Implementation of MAX function to calculate the maximum of float values as a user-defined aggregate.\nClass AggregateNode.MaxInt; // Implementation of MAX function to calculate the maximum of integer values as a user-defined aggregate.\nClass AggregateNode.MaxLong; // Implementation of MAX function to calculate the maximum of long values as a user-defined aggregate.\nClass AggregateNode.MinBigDecimal; // Implementation of MIN function to calculate the minimum of BigDecimal values as a user-defined aggregate.\nClass AggregateNode.MinBoolean; // Implementation of MIN function to calculate the minimum of boolean values as a user-defined aggregate.\nClass AggregateNode.MinDouble; // Implementation of MIN function to calculate the minimum of double and real values as a user-defined aggregate.\nClass AggregateNode.MinFloat; // Implementation of MIN function to calculate the minimum of float values as a user-defined aggregate.\n", "des": "Provides an implementation of relational expressions using an interpreter."}
{"index": 830, "repo": "calcite-core-1.34.0", "code": "package jdbc;\n\nInterface CalciteConnection; // Extension to Calcite's implementation of JDBC connection allows schemas to be defined dynamically.\nInterface CalcitePrepare; // API for a service that prepares statements for execution.\nInterface CalcitePrepare.Context; // Context for preparing a statement.\nInterface CalcitePrepare.SparkHandler; // Callback to register Spark as the main engine.\nInterface CalcitePrepare.SparkHandler.RuleSetBuilder; // Allows Spark to declare the rules it needs.\nClass CalciteFactory; // Extension of AvaticaFactory for Calcite.\nClass CalciteJdbc41Factory; // Implementation of AvaticaFactory for Calcite and JDBC 4.1 (corresponds to JDK 1.7).\nClass CalciteMetaImpl; // Helper for implementing the getXxx methods such as AvaticaDatabaseMetaData.getTables(java.lang.String, java.lang.String, java.lang.String, java.lang.String[]).\nClass CalcitePrepare.AnalyzeViewResult; // The result of analyzing a view.\nClass CalcitePrepare.CalciteSignature<T>; // The result of preparing a query.\nClass CalcitePrepare.ConvertResult; // The result of parsing and validating a SQL query and converting it to relational algebra.\nClass CalcitePrepare.Dummy; // Namespace that allows us to define non-abstract methods inside an interface.\nClass CalcitePrepare.ParseResult; // The result of parsing and validating a SQL query.\nClass CalcitePrepare.Query<T>; // A union type of the three possible ways of expressing a query: as a SQL string, a Queryable or a RelNode.\nClass CalciteResultSet; // Implementation of ResultSet for the Calcite engine.\nClass CalciteRootSchema;\nClass CalciteSchema; // Schema.\nClass CalciteSchema.Entry; // Entry in a schema, such as a table or sub-schema.\nClass CalciteSchema.FunctionEntry; // Membership of a function in a schema.\nClass CalciteSchema.FunctionEntryImpl; // Implementation of CalciteSchema.FunctionEntry where all properties are held in fields.\nClass CalciteSchema.LatticeEntry; // Membership of a lattice in a schema.\nClass CalciteSchema.LatticeEntryImpl; // Implementation of CalciteSchema.LatticeEntry where all properties are held in fields.\n", "des": "JDBC driver for Calcite."}
{"index": 831, "repo": "calcite-core-1.34.0", "code": "package materialize;\n\nInterface LatticeStatisticProvider; // Estimates row counts for a lattice and its attributes.\nInterface LatticeStatisticProvider.Factory; // Creates a LatticeStatisticProvider for a given Lattice.\nInterface MaterializationService.TableFactory; // Creates tables that represent a materialized view.\nInterface SqlStatisticProvider; // Estimates row counts for tables and columns, and whether combinations of columns form primary/unique and foreign keys.\nClass DelegatingLatticeStatisticProvider; // Implementation of LatticeStatisticProvider that delegates to an underlying provider.\nClass Lattice; // Structure that allows materialized views based upon a star schema to be recognized and recommended.\nClass Lattice.BaseColumn; // Column in a lattice.\nClass Lattice.Builder; // Lattice builder.\nClass Lattice.Column; // Column in a lattice.\nClass Lattice.DerivedColumn; // Column in a lattice that is based upon a SQL expression.\nClass Lattice.Measure; // A measure within a Lattice.\nClass Lattice.SqlWriter; // The information necessary to convert a column to SQL.\nClass Lattice.Tile; // Materialized aggregate within a lattice.\nClass Lattice.TileBuilder; // Tile builder.\nClass LatticeChildNode; // Non-root node in a Lattice.\nClass LatticeNode; // Source relation of a lattice.\nClass LatticeRootNode; // Root node in a Lattice.\nClass Lattices; // Utilities for Lattice, LatticeStatisticProvider.\nClass LatticeSuggester; // Algorithm that suggests a set of lattices.\nClass LatticeTable; // Table registered in the graph.\nClass MaterializationKey; // Unique identifier for a materialization.\nClass MaterializationService; // Manages the collection of materialized tables known to the system, and the process by which they become valid and invalid.\nClass MaterializationService.DefaultTableFactory; // Default implementation of MaterializationService.TableFactory.\nClass TileKey; // Definition of a particular combination of dimensions and measures of a lattice that is the basis of a materialization.\nClass TileSuggester; // Algorithm that suggests a set of initial tiles (materialized aggregate views) for a given lattice.\n", "des": "Management of materialized query results."}
{"index": 832, "repo": "calcite-core-1.34.0", "code": "package model;\n\nClass JsonColumn; // JSON object representing a column.\nClass JsonCustomSchema; // JSON schema element that represents a custom schema.\nClass JsonCustomTable; // Custom table schema element.\nClass JsonFunction; // Function schema element.\nClass JsonJdbcSchema; // JSON object representing a schema that maps to a JDBC database.\nClass JsonLattice; // Element that describes a star schema and provides a framework for defining, recognizing, and recommending materialized views at various levels of aggregation.\nClass JsonMapSchema; // JSON object representing a schema whose tables are explicitly specified.\nClass JsonMaterialization; // Element that describes how a table is a materialization of a query.\nClass JsonMeasure; // An aggregate function applied to a column (or columns) of a lattice.\nClass JsonRoot; // Root schema element.\nClass JsonSchema; // Schema schema element.\nClass JsonStream; // Information about whether a table allows streaming.\nClass JsonTable; // Table schema element.\nClass JsonTile; // Materialized view within a JsonLattice.\nClass JsonType; // Type schema element.\nClass JsonTypeAttribute; // JSON object representing a type attribute.\nClass JsonView; // View schema element.\nClass ModelHandler; // Reads a model and creates schema objects accordingly.\nEnum JsonSchema.Type; // Built-in schema types.\nEnum ModelHandler.ExtraOperand; // Extra operands automatically injected into a JsonCustomSchema.operand, as extra context for the adapter.\n", "des": "Provides model files, in JSON format, defining schemas and other metadata."}
{"index": 833, "repo": "calcite-core-1.34.0", "code": "package plan;\n\npackage plan.hep; // Provides a heuristic planner implementation for the interfaces in org.apache.calcite.plan.\npackage plan.visualizer; // A visualizer showing how the rules are applied step-by-step.\npackage plan.volcano; // Optimizes relational expressions.\nInterface CommonRelSubExprRule.Config; // Rule configuration.\nInterface Context; // Provides library users a way to store data within the planner session and access it within rules.\nInterface Convention; // Calling convention trait.\nInterface RelDigest; // The digest is the exact representation of the corresponding RelNode, at anytime, anywhere.\nInterface RelHintsPropagator; // Customize the propagation of the RelHints from the root relational expression of a rule call RelOptRuleCall to the new equivalent expression.\nInterface RelImplementor; // This is a marker interface for a callback used to convert a tree of relational expressions into a plan.\nInterface RelMultipleTrait; // Trait for which a given relational expression can have multiple values.\nInterface RelOptConnection; // The planner's view of a connection to a database.\nInterface RelOptCost; // RelOptCost defines an interface for optimizer cost in terms of number of rows processed, CPU cost, and I/O cost.\nInterface RelOptCostFactory; // Cost model for query planning.\nInterface RelOptListener; // RelOptListener defines an interface for listening to events which occur during the optimization process.\nInterface RelOptNode; // Node in a planner.\nInterface RelOptPlanner; // A RelOptPlanner is a query optimizer: it transforms a relational expression into a semantically equivalent relational expression, according to a given set of rules and a cost model.\nInterface RelOptPlanner.Executor; // Use RexExecutor\nInterface RelOptSchema; // A RelOptSchema is a set of RelOptTable objects.\nInterface RelOptSchemaWithSampling; // Extension to RelOptSchema with support for sample data-sets.\nInterface RelOptTable; // Represents a relational dataset in a RelOptSchema.\nInterface RelOptTable.ToRelContext; // Contains the context needed to convert a a table into a relational expression.\nInterface RelOptTable.ViewExpander; // Can expand a view into relational expressions.\nInterface RelRule.Config; // Rule configuration.\n", "des": "Defines interfaces for constructing rule-based optimizers of relational expressions."}
{"index": 834, "repo": "calcite-core-1.34.0", "code": "package hep;\n\nClass HepPlanner; // HepPlanner is a heuristic implementation of the RelOptPlanner interface.\nClass HepProgram; // HepProgram specifies the order in which rules should be attempted by HepPlanner.\nClass HepProgramBuilder; // HepProgramBuilder creates instances of HepProgram.\nClass HepRelVertex; // HepRelVertex wraps a real RelNode as a vertex in a DAG representing the entire query expression.\nClass HepRuleCall; // HepRuleCall implements RelOptRuleCall for a HepPlanner.\nEnum HepMatchOrder; // HepMatchOrder specifies the order of graph traversal when looking for rule matches.\n", "des": "Provides a heuristic planner implementation for the interfaces in org.apache.calcite.plan."}
{"index": 835, "repo": "calcite-core-1.34.0", "code": "package visualizer;\n\nClass RuleMatchVisualizer; // This is a tool to visualize the rule match process of a RelOptPlanner.\n", "des": "A visualizer showing how the rules are applied step-by-step."}
{"index": 836, "repo": "calcite-core-1.34.0", "code": "package volcano;\n\nInterface AbstractConverter.ExpandConversionRule.Config; // Rule configuration.\nClass AbstractConverter; // Converts a relational expression to any given output convention.\nClass AbstractConverter.ExpandConversionRule; // Rule that converts an AbstractConverter into a chain of converters from the source relation to the target traits.\nClass RelSubset; // Subset of an equivalence class where all relational expressions have the same physical properties.\nClass RuleQueue; // A data structure that manages rule matches for RuleDriver.\nClass VolcanoPlanner; // VolcanoPlanner optimizes queries by transforming expressions selectively according to a dynamic programming algorithm.\nClass VolcanoRelMetadataProvider;\nClass VolcanoRuleCall; // VolcanoRuleCall implements the RelOptRuleCall interface for VolcanoPlanner.\nClass VolcanoTimeoutException; // Indicates that planning timed out.\n", "des": "Optimizes relational expressions."}
{"index": 837, "repo": "calcite-core-1.34.0", "code": "package prepare;\n\nInterface Prepare.CatalogReader; // Interface by which validator and planner can read table metadata.\nInterface Prepare.PreparedResult; // Result of a call to Prepare.prepareSql(org.apache.calcite.sql.SqlNode, java.lang.Class, org.apache.calcite.sql.validate.SqlValidator, boolean).\nInterface Prepare.PreparingTable; // Definition of a table, for the purposes of the validator and planner.\nClass CalciteCatalogReader; // Implementation of Prepare.CatalogReader and also SqlOperatorTable based on tables and functions defined schemas.\nClass CalcitePrepareImpl; // Shit just got real.\nClass CalcitePrepareImpl.CalcitePreparingStmt; // Holds state for the process of preparing a SQL statement.\nClass CalciteSqlValidator; // Validator.\nClass PlannerImpl; // Implementation of Planner.\nClass Prepare; // Abstract base for classes that implement the process of preparing and executing SQL expressions.\nClass Prepare.AbstractPreparingTable; // Abstract implementation of Prepare.PreparingTable with an implementation for Prepare.AbstractPreparingTable.columnHasDefaultValue(org.apache.calcite.rel.type.RelDataType, int, org.apache.calcite.sql2rel.InitializerContext).\nClass Prepare.Materialization; // Describes that a given SQL query is materialized by a given table.\nClass Prepare.PreparedExplain; // PreparedExplanation is a PreparedResult for an EXPLAIN PLAN statement.\nClass Prepare.PreparedResultImpl; // Abstract implementation of Prepare.PreparedResult.\nClass RelOptTableImpl; // Implementation of RelOptTable.\n", "des": "Preparation of queries (parsing, planning and implementation)."}
{"index": 838, "repo": "calcite-core-1.34.0", "code": "package profile;\n\nInterface Profiler; // Analyzes data sets.\nInterface Profiler.Statistic; // Statistic produced by the profiler.\nClass Profiler.Column; // Column.\nClass Profiler.Distribution; // Value distribution, including cardinality and optionally values, of a column or set of columns.\nClass Profiler.FunctionalDependency; // Functional dependency.\nClass Profiler.Profile; // The result of profiling, contains various statistics about the data in a table.\nClass Profiler.RowCount; // Whole data set.\nClass Profiler.Unique; // Unique key.\nClass ProfilerImpl; // Implementation of Profiler that only investigates \"interesting\" combinations of columns.\nClass ProfilerImpl.Builder; // Builds a ProfilerImpl.\nClass SimpleProfiler; // Basic implementation of Profiler.\n", "des": "Utilities to analyze data sets."}
{"index": 839, "repo": "calcite-core-1.34.0", "code": "package rel;\n\npackage rel.convert; // Defines relational expressions and rules for converting between calling conventions.\npackage rel.core; // Defines core relational expressions.\npackage rel.externalize; // Facilities to externalize RelNodes to and from XML and JSON format.\npackage rel.hint; // Defines hints interfaces and utilities for relational expressions.\npackage rel.logical; // Defines logical relational expressions.\npackage rel.metadata; // Defines metadata interfaces and utilities for relational expressions.\npackage rel.mutable; // Defines mutable relational expressions.\npackage rel.rel2sql; // Translates a relational expression to SQL parse tree.\npackage rel.rules; // Provides a core set of planner rules.\npackage rel.stream; // Defines relational expressions for streaming.\npackage rel.type; // Defines a type system for relational expressions.\nInterface PhysicalNode; // Physical node in a planner that is capable of doing physical trait propagation and derivation.\nInterface RelCollation; // Description of the physical ordering of a relational expression.\nInterface RelDistribution; // Description of the physical distribution of a relational expression.\nInterface RelInput; // Context from which a relational expression can initialize itself, reading from a serialized form of the relational expression.\nInterface RelNode; // A RelNode is a relational expression.\nInterface RelNode.Context; // Context of a relational expression, for purposes of checking validity.\nInterface RelReferentialConstraint; // Interface for a referential constraint, i.e., Foreign-Key - Unique-Key relationship, between two tables.\nInterface RelShuttle; // Visitor that has methods for the common logical relational expressions.\nInterface RelWriter; // Callback for an expression to dump itself to.\nClass AbstractRelNode; // Base class for every relational expression (RelNode).\nClass BiRel; // Abstract base class for relational expressions with a two inputs.\nClass RelCollationImpl; // Simple implementation of RelCollation.\nClass RelCollations; // Utilities concerning RelCollation and RelFieldCollation.\nClass RelCollationTraitDef; // Definition of the ordering trait.\nClass RelDistributions; // Utilities concerning RelDistribution.\nClass RelDistributionTraitDef; // Definition of the distribution trait.\nClass RelFieldCollation; // Definition of the ordering of one field of a RelNode whose output is to be sorted.\n", "des": "Defines relational expressions."}
{"index": 840, "repo": "calcite-core-1.34.0", "code": "package convert;\n\nInterface Converter; // A relational expression implements the interface Converter to indicate that it converts a physical attribute, or trait, of a relational expression from one value to another.\nInterface ConverterRule.Config; // Rule configuration.\nInterface TraitMatchingRule.Config; // Rule configuration.\nClass ConverterImpl; // Abstract implementation of Converter.\nClass ConverterRule; // Abstract base class for a rule which converts from one calling convention to another without changing semantics.\nClass NoneConverter; // NoneConverter converts a plan from inConvention to Convention.NONE.\nClass TraitMatchingRule; // TraitMatchingRule adapts a converter rule, restricting it to fire only when its input already matches the expected output trait.\n", "des": "Defines relational expressions and rules for converting between calling conventions."}
{"index": 841, "repo": "calcite-core-1.34.0", "code": "package core;\n\nInterface RelFactories.AggregateFactory; // Can create a LogicalAggregate of the appropriate type for this rule's calling convention.\nInterface RelFactories.CorrelateFactory; // Can create a correlate of the appropriate type for a rule's calling convention.\nInterface RelFactories.ExchangeFactory; // Can create a Exchange of the appropriate type for a rule's calling convention.\nInterface RelFactories.FilterFactory; // Can create a Filter of the appropriate type for this rule's calling convention.\nInterface RelFactories.JoinFactory; // Can create a join of the appropriate type for a rule's calling convention.\nInterface RelFactories.MatchFactory; // Can create a Match of the appropriate type for a rule's calling convention.\nInterface RelFactories.ProjectFactory; // Can create a LogicalProject of the appropriate type for this rule's calling convention.\nInterface RelFactories.RepeatUnionFactory; // Can create a RepeatUnion of the appropriate type for a rule's calling convention.\nInterface RelFactories.SemiJoinFactory; // Use RelFactories.JoinFactory instead.\nInterface RelFactories.SetOpFactory; // Can create a SetOp for a particular kind of set operation (UNION, EXCEPT, INTERSECT) and of the appropriate type for this rule's calling convention.\nInterface RelFactories.SnapshotFactory; // Can create a Snapshot of the appropriate type for a rule's calling convention.\nInterface RelFactories.SortExchangeFactory; // Can create a SortExchange of the appropriate type for a rule's calling convention.\nInterface RelFactories.SortFactory; // Can create a Sort of the appropriate type for this rule's calling convention.\nInterface RelFactories.SpoolFactory; // Can create a Spool of the appropriate type for a rule's calling convention.\nInterface RelFactories.TableFunctionScanFactory; // Can create a TableFunctionScan of the appropriate type for a rule's calling convention.\nInterface RelFactories.TableScanFactory; // Can create a TableScan of the appropriate type for a rule's calling convention.\nInterface RelFactories.ValuesFactory; // Can create a Values of the appropriate type for a rule's calling convention.\nClass Aggregate; // Relational operator that eliminates duplicates and computes totals.\nClass Aggregate.AggCallBinding; // Implementation of the SqlOperatorBinding interface for an aggregate call applied to a set of operands in the context of a LogicalAggregate.\n", "des": "Defines core relational expressions."}
{"index": 842, "repo": "calcite-core-1.34.0", "code": "package externalize;\n\nInterface RelDotWriter.WriteOption; // Options for displaying the rel node plan in dot format.\nInterface RelJson.InputTranslator; // Translates a JSON object that represents an input reference into a RexNode.\nClass RelDotWriter; // Utility to dump a rel node plan in dot format.\nClass RelEnumTypes; // Registry of Enum classes that can be serialized to JSON.\nClass RelJson; // Utilities for converting RelNode into JSON format.\nClass RelJsonReader; // Reads a JSON plan and converts it back to a tree of relational expressions.\nClass RelJsonWriter; // Callback for a relational expression to dump itself as JSON.\nClass RelWriterImpl; // Implementation of RelWriter.\nClass RelXmlWriter; // Callback for a relational expression to dump in XML format.\n", "des": "Facilities to externalize RelNodes to and from XML and JSON format."}
{"index": 843, "repo": "calcite-core-1.34.0", "code": "package hint;\n\nInterface Hintable; // Hintable is a kind of RelNode that can attach RelHints.\nInterface HintOptionChecker; // A HintOptionChecker validates the options of a RelHint.\nInterface HintPredicate; // A HintPredicate indicates whether a RelNode can apply the specified hint.\nClass CompositeHintPredicate; // A HintPredicate to combine multiple hint predicates into one.\nClass HintPredicates; // A collection of hint predicates.\nClass HintStrategy; // Represents a hint strategy entry of HintStrategyTable.\nClass HintStrategy.Builder; // Builder for HintStrategy.\nClass HintStrategyTable; // A collection of HintStrategys.\nClass HintStrategyTable.Builder; // Builder for HintStrategyTable.\nClass HintStrategyTable.HintErrorLogger; // Implementation of Litmus that returns a status code, it logs warnings for fail check and does not throw.\nClass NodeTypeHintPredicate; // A hint predicate that specifies which kind of relational expression the hint can be applied to.\nClass RelHint; // Hint attached to a relation expression.\nClass RelHint.Builder; // Builder for RelHint.\nEnum CompositeHintPredicate.Composition; // How hint predicates are composed.\n", "des": "Defines hints interfaces and utilities for relational expressions."}
{"index": 844, "repo": "calcite-core-1.34.0", "code": "package logical;\n\nClass LogicalAggregate; // LogicalAggregate is a relational operator which eliminates duplicates and computes totals.\nClass LogicalCalc; // A relational expression which computes project expressions and also filters.\nClass LogicalCorrelate; // A relational operator that performs nested-loop joins.\nClass LogicalExchange; // Sub-class of Exchange not targeted at any particular engine or calling convention.\nClass LogicalFilter; // Sub-class of Filter not targeted at any particular engine or calling convention.\nClass LogicalIntersect; // Sub-class of Intersect not targeted at any particular engine or calling convention.\nClass LogicalJoin; // Sub-class of Join not targeted at any particular engine or calling convention.\nClass LogicalMatch; // Sub-class of Match not targeted at any particular engine or calling convention.\nClass LogicalMinus; // Sub-class of Minus not targeted at any particular engine or calling convention.\nClass LogicalProject; // Sub-class of Project not targeted at any particular engine or calling convention.\nClass LogicalRepeatUnion; // Sub-class of RepeatUnion not targeted at any particular engine or calling convention.\nClass LogicalSnapshot; // Sub-class of Snapshot not targeted at any particular engine or calling convention.\nClass LogicalSort; // Sub-class of Sort not targeted at any particular engine or calling convention.\nClass LogicalSortExchange; // Sub-class of SortExchange not targeted at any particular engine or calling convention.\nClass LogicalTableFunctionScan; // Sub-class of TableFunctionScan not targeted at any particular engine or calling convention.\nClass LogicalTableModify; // Sub-class of TableModify not targeted at any particular engine or calling convention.\nClass LogicalTableScan; // A LogicalTableScan reads all the rows from a RelOptTable.\nClass LogicalTableSpool; // Sub-class of TableSpool not targeted at any particular engine or calling convention.\nClass LogicalUnion; // Sub-class of Union not targeted at any particular engine or calling convention.\nClass LogicalValues; // Sub-class of Values not targeted at any particular engine or calling convention.\nClass LogicalWindow; // Sub-class of Window not targeted at any particular engine or calling convention.\nClass ToLogicalConverter; // Shuttle to convert any rel plan to a plan with all logical nodes.\n", "des": "Defines logical relational expressions."}
{"index": 845, "repo": "calcite-core-1.34.0", "code": "package metadata;\n\npackage metadata.janino; // Code for generating metadata handlers.\nInterface BuiltInMetadata.AllPredicates; // Metadata about the predicates that hold in the rows emitted from a relational expression.\nInterface BuiltInMetadata.AllPredicates.Handler; // Handler API.\nInterface BuiltInMetadata.Collation; // Metadata about which columns are sorted.\nInterface BuiltInMetadata.Collation.Handler; // Handler API.\nInterface BuiltInMetadata.ColumnOrigin; // Metadata about the origins of columns.\nInterface BuiltInMetadata.ColumnOrigin.Handler; // Handler API.\nInterface BuiltInMetadata.ColumnUniqueness; // Metadata about whether a set of columns uniquely identifies a row.\nInterface BuiltInMetadata.ColumnUniqueness.Handler; // Handler API.\nInterface BuiltInMetadata.CumulativeCost; // Metadata about the cost of evaluating a relational expression, including all of its inputs.\nInterface BuiltInMetadata.CumulativeCost.Handler; // Handler API.\nInterface BuiltInMetadata.DistinctRowCount; // Metadata about the number of distinct rows returned by a set of columns in a relational expression.\nInterface BuiltInMetadata.DistinctRowCount.Handler; // Handler API.\nInterface BuiltInMetadata.Distribution; // Metadata about how a relational expression is distributed.\nInterface BuiltInMetadata.Distribution.Handler; // Handler API.\nInterface BuiltInMetadata.ExplainVisibility; // Metadata about whether a relational expression should appear in a plan.\nInterface BuiltInMetadata.ExplainVisibility.Handler; // Handler API.\nInterface BuiltInMetadata.ExpressionLineage; // Metadata about the origins of expressions.\nInterface BuiltInMetadata.ExpressionLineage.Handler; // Handler API.\nInterface BuiltInMetadata.LowerBoundCost; // Metadata to get the lower bound cost of a RelNode.\nInterface BuiltInMetadata.LowerBoundCost.Handler; // Handler API.\nInterface BuiltInMetadata.MaxRowCount; // Metadata about the maximum number of rows returned by a relational expression.\nInterface BuiltInMetadata.MaxRowCount.Handler; // Handler API.\nInterface BuiltInMetadata.Memory; // Metadata about the memory use of an operator.\nInterface BuiltInMetadata.Memory.Handler; // Handler API.\nInterface BuiltInMetadata.MinRowCount; // Metadata about the minimum number of rows returned by a relational expression.\nInterface BuiltInMetadata.MinRowCount.Handler; // Handler API.\n", "des": "Defines metadata interfaces and utilities for relational expressions."}
{"index": 846, "repo": "calcite-core-1.34.0", "code": "package janino;\n\nInterface RelMetadataHandlerGeneratorUtil.HandlerNameAndGeneratedCode; // Contains Name and code that been generated for MetadataHandler.\nClass CacheUtil; // Functions used by generated code.\nClass DescriptiveCacheKey; // A key used in caching with descriptive to string.\nClass RelMetadataHandlerGeneratorUtil; // Generates the MetadataHandler code.\n", "des": "Code for generating metadata handlers."}
{"index": 847, "repo": "calcite-core-1.34.0", "code": "package mutable;\n\nClass Holder; // Implementation of MutableRel whose only purpose is to have a child.\nClass MutableAggregate; // Mutable equivalent of Aggregate.\nClass MutableCalc; // Mutable equivalent of Calc.\nClass MutableCollect; // Mutable equivalent of Collect.\nClass MutableCorrelate; // Mutable equivalent of Correlate.\nClass MutableExchange; // Mutable equivalent of Exchange.\nClass MutableFilter; // Mutable equivalent of Filter.\nClass MutableIntersect; // Mutable equivalent of Intersect.\nClass MutableJoin; // Mutable equivalent of Join.\nClass MutableMatch; // Mutable equivalent of Match.\nClass MutableMinus; // Mutable equivalent of Minus.\nClass MutableProject; // Mutable equivalent of Project.\nClass MutableRel; // Mutable equivalent of RelNode.\nClass MutableRels; // Utilities for dealing with MutableRels.\nClass MutableRelVisitor; // Visitor over MutableRel.\nClass MutableSample; // Mutable equivalent of Sample.\nClass MutableScan; // Mutable equivalent of TableScan.\nClass MutableSetOp; // Mutable equivalent of SetOp.\nClass MutableSort; // Mutable equivalent of Sort.\nClass MutableTableFunctionScan; // Mutable equivalent of TableFunctionScan.\nClass MutableTableModify; // Mutable equivalent of TableModify.\nClass MutableUncollect; // Mutable equivalent of Uncollect.\nClass MutableUnion; // Mutable equivalent of Union.\nClass MutableValues; // Mutable equivalent of Values.\nClass MutableWindow; // Mutable equivalent of Window.\n", "des": "Defines mutable relational expressions."}
{"index": 848, "repo": "calcite-core-1.34.0", "code": "package rel2sql;\n\nClass RelToSqlConverter; // Utility to convert relational expressions to SQL abstract syntax tree.\nClass SqlImplementor; // State for generating a SQL statement.\nClass SqlImplementor.Context; // Context for translating a RexNode expression (within a RelNode) into a SqlNode expression (within a SQL parse tree).\nClass SqlImplementor.SimpleContext; // Simple implementation of SqlImplementor.Context that cannot handle sub-queries or correlations.\nEnum SqlImplementor.Clause; // Clauses in a SQL query.\n", "des": "Translates a relational expression to SQL parse tree."}
{"index": 849, "repo": "calcite-core-1.34.0", "code": "package rules;\n\npackage rules.materialize; // Provides a materialized rewriting algorithm encapsulated within a planner rule.\nInterface AbstractJoinExtractFilterRule.Config; // Rule configuration.\nInterface AggregateCaseToFilterRule.Config; // Rule configuration.\nInterface AggregateExpandDistinctAggregatesRule.Config; // Rule configuration.\nInterface AggregateExpandWithinDistinctRule.Config; // Rule configuration.\nInterface AggregateExtractProjectRule.Config; // Rule configuration.\nInterface AggregateFilterTransposeRule.Config; // Rule configuration.\nInterface AggregateJoinJoinRemoveRule.Config; // Rule configuration.\nInterface AggregateJoinRemoveRule.Config; // Rule configuration.\nInterface AggregateJoinTransposeRule.Config; // Rule configuration.\nInterface AggregateMergeRule.Config; // Rule configuration.\nInterface AggregateProjectConstantToDummyJoinRule.Config; // Rule configuration.\nInterface AggregateProjectMergeRule.Config; // Rule configuration.\nInterface AggregateProjectPullUpConstantsRule.Config; // Rule configuration.\nInterface AggregateProjectStarTableRule.Config; // Rule configuration.\nInterface AggregateReduceFunctionsRule.Config; // Rule configuration.\nInterface AggregateRemoveRule.Config; // Rule configuration.\nInterface AggregateStarTableRule.Config; // Rule configuration.\nInterface AggregateUnionAggregateRule.Config; // Rule configuration.\nInterface AggregateUnionTransposeRule.Config; // Rule configuration.\nInterface AggregateValuesRule.Config; // Rule configuration.\nInterface CalcMergeRule.Config; // Rule configuration.\nInterface CalcRemoveRule.Config; // Rule configuration.\nInterface CalcSplitRule.Config; // Rule configuration.\nInterface CoerceInputsRule.Config; // Rule configuration.\nInterface DateRangeRules.FilterDateRangeRule.FilterDateRangeRuleConfig; // Rule configuration.\nInterface ExchangeRemoveConstantKeysRule.Config; // Rule configuration.\nInterface FilterAggregateTransposeRule.Config; // Rule configuration.\nInterface FilterCalcMergeRule.Config; // Rule configuration.\nInterface FilterCorrelateRule.Config; // Rule configuration.\nInterface FilterFlattenCorrelatedConditionRule.Config; // Rule configuration.\nInterface FilterJoinRule.Config; // Rule configuration.\nInterface FilterJoinRule.FilterIntoJoinRule.FilterIntoJoinRuleConfig; // Rule configuration.\nInterface FilterJoinRule.JoinConditionPushRule.JoinConditionPushRuleConfig; // Rule configuration.\n", "des": "Provides a core set of planner rules."}
{"index": 850, "repo": "calcite-core-1.34.0", "code": "package materialize;\n\nInterface MaterializedViewAggregateRule.Config; // Rule configuration.\nInterface MaterializedViewOnlyAggregateRule.Config; // Rule configuration.\nInterface MaterializedViewOnlyFilterRule.Config; // Rule configuration.\nInterface MaterializedViewOnlyJoinRule.Config; // Rule configuration.\nInterface MaterializedViewProjectAggregateRule.Config; // Rule configuration.\nInterface MaterializedViewProjectFilterRule.Config; // Rule configuration.\nInterface MaterializedViewProjectJoinRule.Config; // Rule configuration.\nInterface MaterializedViewRule.Config; // Rule configuration.\nClass MaterializedViewAggregateRule<C extends MaterializedViewAggregateRule.Config>; // Materialized view rewriting for aggregate.\nClass MaterializedViewJoinRule<C extends MaterializedViewRule.Config>; // Materialized view rewriting for join.\nClass MaterializedViewOnlyAggregateRule; // Rule that matches Aggregate.\nClass MaterializedViewOnlyFilterRule; // Rule that matches Filter.\nClass MaterializedViewOnlyJoinRule; // Rule that matches Join.\nClass MaterializedViewProjectAggregateRule; // Rule that matches Project on Aggregate.\nClass MaterializedViewProjectFilterRule; // Rule that matches Project on Filter.\nClass MaterializedViewProjectJoinRule; // Rule that matches Project on Join.\nClass MaterializedViewRule<C extends MaterializedViewRule.Config>; // Planner rule that converts a Project followed by Aggregate or an Aggregate to a scan (and possibly other operations) over a materialized view.\nClass MaterializedViewRule.Edge; // Edge for graph.\nClass MaterializedViewRule.EquivalenceClasses; // Class representing an equivalence class, i.e., a set of equivalent columns\nClass MaterializedViewRule.NodeLineage; // Expression lineage details.\nClass MaterializedViewRule.ViewPartialRewriting; // View partitioning result.\nClass MaterializedViewRules; // Collection of rules pertaining to materialized views.\nEnum MaterializedViewRule.MatchModality; // Complete, view partial, or query partial.\n", "des": "Provides a materialized rewriting algorithm encapsulated within a planner rule."}
{"index": 851, "repo": "calcite-core-1.34.0", "code": "package stream;\n\nInterface StreamRules.DeltaAggregateTransposeRule.DeltaAggregateTransposeRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaFilterTransposeRule.DeltaFilterTransposeRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaJoinTransposeRule.DeltaJoinTransposeRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaProjectTransposeRule.DeltaProjectTransposeRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaSortTransposeRule.DeltaSortTransposeRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaTableScanRule.DeltaTableScanRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaTableScanToEmptyRule.DeltaTableScanToEmptyRuleConfig; // Rule configuration.\nInterface StreamRules.DeltaUnionTransposeRule.DeltaUnionTransposeRuleConfig; // Rule configuration.\nClass Chi; // Relational operator that converts a stream to a relation.\nClass Delta; // Relational operator that converts a relation to a stream.\nClass LogicalChi; // Sub-class of Chi not targeted at any particular engine or calling convention.\nClass LogicalDelta; // Sub-class of Delta not targeted at any particular engine or calling convention.\nClass StreamRules; // Rules and relational operators for streaming relational expressions.\nClass StreamRules.DeltaAggregateTransposeRule; // Planner rule that pushes a Delta through an Aggregate.\nClass StreamRules.DeltaFilterTransposeRule; // Planner rule that pushes a Delta through a Filter.\nClass StreamRules.DeltaJoinTransposeRule; // Planner rule that pushes a Delta through a Join.\nClass StreamRules.DeltaProjectTransposeRule; // Planner rule that pushes a Delta through a Project.\nClass StreamRules.DeltaSortTransposeRule; // Planner rule that pushes a Delta through an Sort.\nClass StreamRules.DeltaTableScanRule; // Planner rule that pushes a Delta into a TableScan of a StreamableTable.\nClass StreamRules.DeltaTableScanToEmptyRule; // Planner rule that converts Delta over a TableScan of a table other than StreamableTable to an empty Values.\nClass StreamRules.DeltaUnionTransposeRule; // Planner rule that pushes a Delta through an Union.\n", "des": "Defines relational expressions for streaming."}
{"index": 852, "repo": "calcite-core-1.34.0", "code": "package type;\n\nInterface RelDataType; // RelDataType represents the type of a scalar expression or entire row returned from a relational expression.\nInterface RelDataTypeFactory; // RelDataTypeFactory is a factory for datatype descriptors.\nInterface RelDataTypeFactory.FieldInfo;\nInterface RelDataTypeFamily; // RelDataTypeFamily represents a family of related types.\nInterface RelDataTypeField; // RelDataTypeField represents the definition of a field in a structured RelDataType.\nInterface RelDataTypePrecedenceList; // RelDataTypePrecedenceList defines a type precedence list for a particular type.\nInterface RelDataTypeSystem; // Type system.\nInterface RelProtoDataType; // Can be converted into a RelDataType given a RelDataTypeFactory.\nInterface TimeFrame; // Time frame.\nInterface TimeFrameSet.Builder; // Builds a collection of time frames.\nClass DelegatingTypeSystem; // Implementation of RelDataTypeSystem that sends all methods to an underlying object.\nClass DynamicRecordType; // Specific type of RelRecordType that corresponds to a dynamic table, where columns are created as they are requested.\nClass DynamicRecordTypeImpl; // Implementation of RelDataType for a dynamic table.\nClass RelCrossType; // Type of the cartesian product of two or more sets of records.\nClass RelDataTypeFactory.Builder; // Fluid API to build a list of fields.\nClass RelDataTypeFactory.FieldInfoBuilder;\nClass RelDataTypeFactoryImpl; // Abstract base for implementations of RelDataTypeFactory.\nClass RelDataTypeField.ToFieldIndex; // Use RelDataTypeField::getIndex\nClass RelDataTypeField.ToFieldName; // Use RelDataTypeField::getName\nClass RelDataTypeFieldImpl; // Default implementation of RelDataTypeField.\nClass RelDataTypeImpl; // RelDataTypeImpl is an abstract base for implementations of RelDataType.\nClass RelDataTypeSystemImpl; // Default implementation of RelDataTypeSystem, providing parameters from the SQL standard.\nClass RelRecordType; // RelRecordType represents a structured type having named fields.\nClass TimeFrames; // Utilities for TimeFrame.\nClass TimeFrameSet; // Set of TimeFrame definitions.\nEnum RelDataTypeComparability; // RelDataTypeComparability is an enumeration of the categories of comparison operators which types may support.\nEnum StructKind; // Describes a policy for resolving fields in record types.\n", "des": "Defines a type system for relational expressions."}
{"index": 853, "repo": "calcite-core-1.34.0", "code": "package rex;\n\nInterface RexAction;\nInterface RexBiVisitor<R,P>; // Visitor pattern for traversing a tree of RexNode objects and passing a payload to each.\nInterface RexExecutor; // Can reduce expressions, writing a literal for each into a list.\nInterface RexPattern;\nInterface RexSqlConvertlet; // Converts a RexNode expression into a SqlNode expression.\nInterface RexSqlConvertletTable; // Collection of RexSqlConvertlets.\nInterface RexToSqlNodeConverter; // Converts expressions from RexNode to SqlNode.\nInterface RexVisitor<R>; // Visitor pattern for traversing a tree of RexNode objects.\nClass LogicVisitor; // Visitor pattern for traversing a tree of RexNode objects.\nClass RexAnalyzer; // Analyzes an expression, figures out what are the unbound variables, assigns a variety of values to each unbound variable, and evaluates the expression.\nClass RexBiVisitorImpl<R,P>; // Default implementation of RexBiVisitor, which visits each node but does nothing while it's there.\nClass RexBuilder; // Factory for row expressions.\nClass RexCall; // An expression formed by a call to an operator with zero or more expressions as operands.\nClass RexCallBinding; // RexCallBinding implements SqlOperatorBinding by referring to an underlying collection of RexNode operands.\nClass RexChecker; // Visitor which checks the validity of a RexNode expression.\nClass RexCorrelVariable; // Reference to the current row of a correlating relational expression.\nClass RexDynamicParam; // Dynamic parameter reference in a row-expression.\nClass RexExecutable; // Result of compiling code generated from a RexNode expression.\nClass RexExecutorImpl; // Evaluates a RexNode expression.\nClass RexFieldAccess; // Access to a field of a row-expression.\nClass RexFieldCollation; // Expression combined with sort flags (DESCENDING, NULLS LAST).\nClass RexInputRef; // Variable which references a field of an input relational expression.\nClass RexInterpreter; // Evaluates RexNode expressions.\nClass RexLiteral; // Constant value in a row-expression.\nClass RexLocalRef; // Local variable.\n", "des": "Provides a language for representing row-expressions."}
{"index": 854, "repo": "calcite-core-1.34.0", "code": "package runtime;\n\nInterface ArrayBindable; // Extension to Bindable that returns rows that are arrays of objects.\nInterface Bindable<T>; // Statement that can be bound to a DataContext and then executed.\nInterface CalciteResource; // Compiler-checked resources for the Calcite project.\nInterface Enumerables.Emitter<E,TResult>; // Given a match (a list of rows, and their states) produces a list of rows to be output.\nInterface FlatLists.ComparableList<T>; // List that is also comparable.\nInterface Hook.Closeable; // Removes a Hook after use.\nInterface Pattern; // Regular expression, to be compiled into an Automaton.\nInterface ResultSetEnumerable.PreparedStatementEnricher; // Consumer for decorating a PreparedStatement, that is, setting its parameters.\nInterface SpaceFillingCurve2D; // Utilities for space-filling curves.\nInterface SpaceFillingCurve2D.IndexRange; // Range.\nInterface Typed; // Adds type information to a Enumerable.\nClass ArrayComparator; // Compares arrays.\nClass ArrayEnumeratorCursor; // Implementation of Cursor on top of an Enumerator that returns an array of Object for each row.\nClass Automaton; // A nondeterministic finite-state automaton (NFA).\nClass AutomatonBuilder; // Builds a state-transition graph for deterministic finite automaton.\nClass BinarySearch; // Binary search for the implementation of RANGE BETWEEN XXX PRECEDING/FOLLOWING clause.\nClass CompressionFunctions; // A collection of functions used in compression and decompression.\nClass ConsList<E>; // List that consists of a head element and an immutable non-empty list.\nClass CoordinateTransformer; // Transforms the coordinates of a geometry.\nClass DeterministicAutomaton; // A deterministic finite automaton (DFA).\nClass Enumerables; // Utilities for processing Enumerable collections.\nClass EnumeratorCursor<T>; // Implementation of Cursor on top of an Enumerator that returns a record for each row.\nClass Feature; // SQL language feature.\nClass FlatLists; // Space-efficient, comparable, immutable lists.\nClass FlatLists.AbstractFlatList<T>; // Base class for flat lists.\nClass FlatLists.Flat1List<T>; // List that stores its one elements in the one members of the class.\n", "des": "Utilities required at runtime."}
{"index": 855, "repo": "calcite-core-1.34.0", "code": "package schema;\n\npackage schema.impl; // Utilities to help implement Calcite's SPIs.\nInterface AggregateFunction; // Function that combines several values into a scalar result.\nInterface CustomColumnResolvingTable; // Extension to Table that specifies a custom way to resolve column names.\nInterface ExtensibleTable; // Table whose row type can be extended to include extra fields.\nInterface FilterableTable; // Table that can be scanned, optionally applying supplied filter expressions, without creating an intermediate relational expression.\nInterface Function; // Named expression that accepts parameters and returns a result.\nInterface FunctionContext; // Information about a function call that is passed to the constructor of a function instance.\nInterface FunctionParameter; // Parameter to a Function.\nInterface ImplementableAggFunction; // Function that can be translated to java code.\nInterface ImplementableFunction; // Function that can be translated to java code.\nInterface Member; // A named expression in a schema.\nInterface ModifiableTable; // A table that can be modified.\nInterface ModifiableView; // A modifiable view onto ModifiableTable.\nInterface Path; // Path from a root schema to a particular object (schema, table, function).\nInterface ProjectableFilterableTable; // Table that can be scanned, optionally applying supplied filter expressions, and projecting a given list of columns, without creating an intermediate relational expression.\nInterface QueryableTable; // Extension to Table that can translate itself to a Queryable.\nInterface ScalarFunction; // Function that returns a scalar result.\nInterface ScannableTable; // Table that can be scanned without creating an intermediate relational expression.\nInterface Schema; // A namespace for tables and functions.\nInterface SchemaFactory; // Factory for Schema objects.\nInterface SchemaPlus; // Extension to the Schema interface.\nInterface SchemaVersion; // An interface to represent a version ID that can be used to create a read-consistent view of a Schema.\nInterface SemiMutableSchema; // Schema to which materializations can be added.\nInterface Statistic; // Statistics about a Table.\nInterface StreamableTable; // Table that can be converted to a stream.\nInterface Table; // Table.\nInterface TableFactory<T extends Table>; // Factory for Table objects.\nInterface TableFunction; // Function that returns a table during execution time.\nInterface TableMacro; // Function that returns a Table.\nInterface TemporalTable; // Table that is temporal.\n", "des": "Schema SPI."}
{"index": 856, "repo": "calcite-core-1.34.0", "code": "package impl;\n\nClass AbstractSchema; // Abstract implementation of Schema.\nClass AbstractSchema.Factory; // Schema factory that creates an AbstractSchema.\nClass AbstractTable; // Abstract base class for implementing Table.\nClass AbstractTableQueryable<T>; // Abstract implementation of Queryable for QueryableTable.\nClass AggregateFunctionImpl; // Implementation of AggregateFunction via user-defined class.\nClass DelegatingSchema; // Implementation of Schema that delegates to an underlying schema.\nClass ListTransientTable; // TransientTable backed by a Java list.\nClass LongSchemaVersion; // Implementation of SchemaVersion that uses a long value as representation.\nClass MaterializedViewTable; // Table that is a materialized view.\nClass MaterializedViewTable.MaterializedViewTableMacro; // Table function that returns the table that materializes a view.\nClass ModifiableViewTable; // Extension to ViewTable that is modifiable.\nClass ReflectiveFunctionBase; // Implementation of a function that is based on a method.\nClass ReflectiveFunctionBase.ParameterListBuilder; // Helps build lists of FunctionParameter.\nClass ScalarFunctionImpl; // Implementation of ScalarFunction.\nClass StarTable; // Virtual table that is composed of two or more tables joined together.\nClass StarTable.StarTableScan; // Relational expression that scans a StarTable.\nClass TableFunctionImpl; // Implementation of TableFunction based on a method.\nClass TableMacroImpl; // Implementation of TableMacro based on a method.\nClass ViewTable; // Table whose contents are defined using an SQL statement.\nClass ViewTableMacro; // Table function that implements a view.\n", "des": "Utilities to help implement Calcite's SPIs."}
{"index": 857, "repo": "calcite-core-1.34.0", "code": "package server;\n\nInterface CalciteServer; // Server.\nInterface CalciteServerStatement; // Statement within a Calcite server.\nInterface DdlExecutor; // Executes DDL commands.\nClass DdlExecutorImpl; // Abstract implementation of DdlExecutor.\n", "des": "Provides a server for hosting Calcite connections."}
{"index": 858, "repo": "calcite-core-1.34.0", "code": "package sql;\n\npackage sql.advise; // Provides hints and corrections for editing SQL statements.\npackage sql.ddl; // Parse tree for SQL DDL statements.\npackage sql.dialect; // SQL unparsers for JDBC dialects.\npackage sql.fun; // Defines the set of standard SQL row-level functions and operators.\npackage sql.parser; // Provides a SQL parser.\npackage sql.pretty; // Provides a pretty-printer for SQL statements.\npackage sql.type; // SQL type system.\npackage sql.util; // Utility classes for the SQL object model, parsing, and validation.\npackage sql.validate; // SQL validation.\nInterface SqlDialect.Context; // Information for creating a dialect.\nInterface SqlDialectFactory; // Creates a SqlDialect appropriate for a given database metadata object.\nInterface SqlLiteral.SqlSymbol;\nInterface SqlOperandCountRange; // A class that describes how many operands an operator can take.\nInterface SqlOperatorTable; // SqlOperatorTable defines a directory interface for enumerating and looking up SQL operators and functions.\nInterface SqlSpecialOperator.TokenSequence; // List of tokens: the input to a parser.\nInterface SqlSplittableAggFunction; // Aggregate function that can be split into partial aggregates.\nInterface SqlSplittableAggFunction.Registry<E>; // Collection in which one can register an element.\nInterface SqlTableFunction; // A function that returns a table.\nInterface SqlWriter; // A SqlWriter is the target to construct a SQL statement from a parse tree.\nInterface SqlWriter.Frame; // A Frame is a piece of generated text which shares a common indentation level.\nInterface SqlWriter.FrameType; // Frame type.\nInterface SqlWriterConfig; // Configuration for SqlWriter and SqlPrettyWriter.\nInterface Symbolizable; // Sub-class should be a Enum and can convert to a SqlLiteral.\nClass ExplicitOperatorBinding; // ExplicitOperatorBinding implements SqlOperatorBinding via an underlying array of known operand types.\nClass SqlAbstractDateTimeLiteral; // A SQL literal representing a DATE, TIME or TIMESTAMP value.\nClass SqlAccessType; // SqlAccessType is represented by a set of allowed access types.\nClass SqlAggFunction; // Abstract base class for the definition of an aggregate function: an operator which aggregates sets of values into a result.\n", "des": "Provides a SQL parser and object model."}
{"index": 859, "repo": "calcite-core-1.34.0", "code": "package advise;\n\nClass SqlAdvisor; // An assistant which offers hints and corrections to a partially-formed SQL statement.\nClass SqlAdvisor.ValidateErrorInfo; // Text and position info of a validator or parser exception.\nClass SqlAdvisorGetHintsFunction; // Table function that returns completion hints for a given SQL statement.\nClass SqlAdvisorGetHintsFunction2; // Table function that returns completion hints for a given SQL statement.\nClass SqlAdvisorHint; // This class is used to return values for (String, int, String[]).\nClass SqlAdvisorHint2; // This class is used to return values for (String, int, String[]).\nClass SqlAdvisorValidator; // SqlAdvisorValidator is used by SqlAdvisor to traverse the parse tree of a SQL statement, not for validation purpose but for setting up the scopes and namespaces to facilitate retrieval of SQL statement completion hints.\nClass SqlSimpleParser; // A simple parser that takes an incomplete and turn it into a syntactically correct statement.\nClass SqlSimpleParser.IdToken; // Token representing an identifier.\nClass SqlSimpleParser.Token; // Token.\nClass SqlSimpleParser.Tokenizer; // Tokenizer.\n", "des": "Provides hints and corrections for editing SQL statements."}
{"index": 860, "repo": "calcite-core-1.34.0", "code": "package ddl;\n\nClass SqlAttributeDefinition; // Parse tree for SqlAttributeDefinition, which is part of a SqlCreateType.\nClass SqlCheckConstraint; // Parse tree for UNIQUE, PRIMARY KEY constraints.\nClass SqlColumnDeclaration; // Parse tree for UNIQUE, PRIMARY KEY constraints.\nClass SqlCreateForeignSchema; // Parse tree for CREATE FOREIGN SCHEMA statement.\nClass SqlCreateFunction; // Parse tree for CREATE FUNCTION statement.\nClass SqlCreateMaterializedView; // Parse tree for CREATE MATERIALIZED VIEW statement.\nClass SqlCreateSchema; // Parse tree for CREATE SCHEMA statement.\nClass SqlCreateTable; // Parse tree for CREATE TABLE statement.\nClass SqlCreateType; // Parse tree for CREATE TYPE statement.\nClass SqlCreateView; // Parse tree for CREATE VIEW statement.\nClass SqlDdlNodes; // Utilities concerning SqlNode for DDL.\nClass SqlDropFunction; // Parse tree for DROP FUNCTION statement.\nClass SqlDropMaterializedView; // Parse tree for DROP MATERIALIZED VIEW statement.\nClass SqlDropObject; // Base class for parse trees of DROP TABLE, DROP VIEW, DROP MATERIALIZED VIEW and DROP TYPE statements.\nClass SqlDropSchema; // Parse tree for DROP SCHEMA statement.\nClass SqlDropTable; // Parse tree for DROP TABLE statement.\nClass SqlDropType; // Parse tree for DROP TYPE statement.\nClass SqlDropView; // Parse tree for DROP VIEW statement.\nClass SqlKeyConstraint; // Parse tree for UNIQUE, PRIMARY KEY constraints.\nEnum SqlDdlNodes.FileType; // File type for CREATE FUNCTION.\n", "des": "Parse tree for SQL DDL statements."}
{"index": 861, "repo": "calcite-core-1.34.0", "code": "package dialect;\n\nInterface JethroDataSqlDialect.JethroInfoCache; // Stores information about capabilities of Jethro databases.\nClass AccessSqlDialect; // A SqlDialect implementation for the Access database.\nClass AnsiSqlDialect; // A SqlDialect implementation for an unknown ANSI compatible database.\nClass BigQuerySqlDialect; // A SqlDialect implementation for Google BigQuery's \"Standard SQL\" dialect.\nClass CalciteSqlDialect; // A SqlDialect implementation that produces SQL that can be parsed by Apache Calcite.\nClass ClickHouseSqlDialect; // A SqlDialect implementation for the ClickHouse database.\nClass Db2SqlDialect; // A SqlDialect implementation for the IBM DB2 database.\nClass DerbySqlDialect; // A SqlDialect implementation for the Apache Derby database.\nClass ExasolSqlDialect; // A SqlDialect implementation for the Exasol database.\nClass FirebirdSqlDialect; // A SqlDialect implementation for the Firebird database.\nClass FireboltSqlDialect; // A SqlDialect implementation for the Firebolt database.\nClass H2SqlDialect; // A SqlDialect implementation for the H2 database.\nClass HiveSqlDialect; // A SqlDialect implementation for the Apache Hive database.\nClass HsqldbSqlDialect; // A SqlDialect implementation for the Hsqldb database.\nClass InfobrightSqlDialect; // A SqlDialect implementation for the Infobright database.\nClass InformixSqlDialect; // A SqlDialect implementation for the Informix database.\nClass IngresSqlDialect; // A SqlDialect implementation for the Ingres database.\nClass InterbaseSqlDialect; // A SqlDialect implementation for the Interbase database.\nClass JethroDataSqlDialect; // A SqlDialect implementation for the JethroData database.\nClass JethroDataSqlDialect.JethroInfo; // Information about the capabilities of a Jethro database.\nClass LucidDbSqlDialect; // A SqlDialect implementation for the LucidDB database.\nClass MssqlSqlDialect; // A SqlDialect implementation for the Microsoft SQL Server database.\nClass MysqlSqlDialect; // A SqlDialect implementation for the MySQL database.\nClass NeoviewSqlDialect; // A SqlDialect implementation for the Neoview database.\nClass NetezzaSqlDialect; // A SqlDialect implementation for the Netezza database.\n", "des": "SQL unparsers for JDBC dialects."}
{"index": 862, "repo": "calcite-core-1.34.0", "code": "package fun;\n\nClass OracleSqlOperatorTable; // Use SqlLibraryOperatorTableFactory.getOperatorTable(SqlLibrary...) instead, passing SqlLibrary.ORACLE as argument.\nClass SqlAbstractGroupFunction; // Base class for grouping functions GROUP_ID, GROUPING_ID, GROUPING.\nClass SqlAbstractTimeFunction; // Base class for time functions such as \"LOCALTIME\", \"LOCALTIME(n)\".\nClass SqlAnyValueAggFunction; // Definition of the ANY_VALUE aggregate functions, returning any one of the values which go into it.\nClass SqlArrayQueryConstructor; // Definition of the SQL:2003 standard ARRAY query constructor, ARRAY (<query>).\nClass SqlArrayValueConstructor; // Definition of the SQL:2003 standard ARRAY constructor, ARRAY [<expr>, ...].\nClass SqlAvgAggFunction; // Avg is an aggregator which returns the average of the values which go into it.\nClass SqlBaseContextVariable; // Base class for functions such as \"USER\", \"CURRENT_ROLE\", and \"CURRENT_PATH\".\nClass SqlBasicAggFunction; // Concrete implementation of SqlAggFunction.\nClass SqlBetweenOperator; // Defines the BETWEEN operator.\nClass SqlBitOpAggFunction; // Definition of the BIT_AND and BIT_OR aggregate functions, returning the bitwise AND/OR of all non-null input values, or null if none.\nClass SqlCase; // A SqlCase is a node of a parse tree which represents a case statement.\nClass SqlCaseOperator; // An operator describing a CASE, NULLIF or COALESCE expression.\nClass SqlCastFunction; // SqlCastFunction.\nClass SqlCoalesceFunction; // The COALESCE function.\nClass SqlCollectionTableOperator; // SqlCollectionTableOperator is the \"table function derived table\" operator.\nClass SqlColumnListConstructor; // SqlColumnListConstructor defines the non-standard constructor used to pass a COLUMN_LIST parameter to a UDX.\nClass SqlConvertFunction; // Common base for the CONVERT and TRANSLATE functions.\nClass SqlCountAggFunction; // Definition of the SQL COUNT aggregation function.\nClass SqlCovarAggFunction; // Covar is an aggregator which returns the Covariance of the values which go into it.\nClass SqlCurrentDateFunction; // The CURRENT_DATE function.\n", "des": "Defines the set of standard SQL row-level functions and operators."}
{"index": 863, "repo": "calcite-core-1.34.0", "code": "package parser;\n\nInterface SqlParser.Config; // Interface to define the configuration for a SQL parser.\nInterface SqlParserImplFactory; // Factory for SqlAbstractParserImpl objects.\nClass Span; // Builder for SqlParserPos.\nClass SqlParser; // A SqlParser parses a SQL statement.\nClass SqlParser.ConfigBuilder;\nClass SqlParserPos; // SqlParserPos represents the position of a parsed token within SQL statement text.\nClass SqlParserUtil; // Utility methods relating to parsing SQL.\nClass SqlParserUtil.ParsedCollation; // The components of a collation definition, per the SQL standard.\nClass SqlParserUtil.ToTreeListItem; // Class that holds a SqlOperator and a SqlParserPos.\nClass StringAndPos; // Contains a string, the offset of a token within the string, and a parser position containing the beginning and end line number.\nClass SqlParseException; // SqlParseException defines a checked exception corresponding to SqlParser.\nClass SqlParserUtil.MalformedUnicodeEscape; // Thrown by SqlParserUtil.replaceEscapedChars(String).\n", "des": "Provides a SQL parser."}
{"index": 864, "repo": "calcite-core-1.34.0", "code": "package pretty;\n\nClass SqlFormatOptions; // Data structure to hold options for SqlPrettyWriter.setFormatOptions(SqlFormatOptions).\nClass SqlPrettyWriter; // Pretty printer for SQL statements.\n", "des": "Provides a pretty-printer for SQL statements."}
{"index": 865, "repo": "calcite-core-1.34.0", "code": "package type;\n\nInterface ExtraSqlTypes; // Holds constants associated with SQL types introduced after the earliest version of Java supported by Farrago (this currently means anything introduced in JDK 1.6 or later).\nInterface ImplicitCastOperandTypeChecker; // An operand type checker that supports implicit type cast, see TypeCoercion.builtinFunctionCoercion(SqlCallBinding, List, List) for details.\nInterface SqlOperandHandler; // Strategy interface to process operands of an operator call.\nInterface SqlOperandMetadata; // Extension to SqlOperandTypeChecker that also provides names and types of particular operands.\nInterface SqlOperandTypeChecker; // Strategy interface to check for allowed operand types of an operator call.\nInterface SqlOperandTypeInference; // Strategy to infer unknown types of the operands of an operator call.\nInterface SqlReturnTypeInference; // Strategy interface to infer the type of an operator call from the type of the operands.\nInterface SqlSingleOperandTypeChecker; // SqlSingleOperandTypeChecker is an extension of SqlOperandTypeChecker for implementations which are capable of checking the type of a single operand in isolation.\nInterface SqlTypeMappingRule; // Interface that defines rules within type mappings.\nInterface SqlTypeTransform; // Strategy to transform one type to another.\nClass AbstractSqlType; // Abstract base class for SQL implementations of RelDataType.\nClass ArraySqlType; // SQL array type.\nClass AssignableOperandTypeChecker; // AssignableOperandTypeChecker implements SqlOperandTypeChecker by verifying that the type of each argument is assignable to a predefined set of parameter types (under the SQL definition of \"assignable\").\nClass BasicSqlType; // BasicSqlType represents a standard atomic SQL type (excluding interval types).\nClass ComparableOperandTypeChecker; // Type checking strategy which verifies that types have the required attributes to be used as arguments to comparison operators.\nClass CompositeOperandTypeChecker; // This class allows multiple existing SqlOperandTypeChecker rules to be combined into one rule.\nClass CompositeSingleOperandTypeChecker; // Allows multiple SqlSingleOperandTypeChecker rules to be combined into one rule.\nClass CursorReturnTypeInference; // Returns the rowtype of a cursor of the operand at a particular 0-based ordinal position.\nClass ExplicitOperandTypeChecker; // Parameter type-checking strategy for Explicit Type.\nClass ExplicitOperandTypeInference; // ExplicitOperandTypeInferences implements SqlOperandTypeInference by explicitly supplying a type for each parameter.\n", "des": "SQL type system."}
{"index": 866, "repo": "calcite-core-1.34.0", "code": "package util;\n\nInterface SqlBasicVisitor.ArgHandler<R>; // Argument handler.\nInterface SqlVisitor<R>; // Visitor class, follows the visitor pattern.\nClass ChainedSqlOperatorTable; // ChainedSqlOperatorTable implements the SqlOperatorTable interface by chaining together any number of underlying operator table instances.\nClass IdPair<L,R>; // Similar to Pair but identity is based on identity of values.\nClass ListSqlOperatorTable; // Implementation of the SqlOperatorTable interface by using a list of operators.\nClass ReflectiveSqlOperatorTable; // ReflectiveSqlOperatorTable implements the SqlOperatorTable interface by reflecting the public fields of a subclass.\nClass SqlBasicVisitor<R>; // Basic implementation of SqlVisitor which does nothing at each node.\nClass SqlBasicVisitor.ArgHandlerImpl<R>; // Default implementation of SqlBasicVisitor.ArgHandler which merely calls SqlNode.accept(org.apache.calcite.sql.util.SqlVisitor<R>) on each operand.\nClass SqlBuilder; // Extension to StringBuilder for the purposes of creating SQL queries and expressions.\nClass SqlOperatorTables; // Utilities for SqlOperatorTables.\nClass SqlShuttle; // Basic implementation of SqlVisitor which returns each leaf node unchanged.\nClass SqlString; // String that represents a kocher SQL statement, expression, or fragment.\n", "des": "Utility classes for the SQL object model, parsing, and validation."}
{"index": 867, "repo": "calcite-core-1.34.0", "code": "package validate;\n\npackage validate.implicit; // SQL Implicit Type Cast\nInterface AggregatingScope; // An extension to the SqlValidatorScope interface which indicates that the scope is aggregating.\nInterface SqlConformance; // Enumeration of valid SQL compatibility modes.\nInterface SqlMoniker; // An interface of an object identifier that represents a SqlIdentifier.\nInterface SqlNameMatcher; // Checks whether two names are the same according to a case-sensitivity policy.\nInterface SqlValidator; // Validates the parse tree of a SQL statement, and provides semantic information about the parse tree.\nInterface SqlValidator.Config; // Interface to define the configuration for a SqlValidator.\nInterface SqlValidatorCatalogReader; // Supplies catalog information for SqlValidator.\nInterface SqlValidatorNamespace; // A namespace describes the relation returned by a section of a SQL query.\nInterface SqlValidatorScope; // Name-resolution scope.\nInterface SqlValidatorScope.Resolved; // Callback from SqlValidatorScope.resolve(java.util.List<java.lang.String>, org.apache.calcite.sql.validate.SqlNameMatcher, boolean, org.apache.calcite.sql.validate.SqlValidatorScope.Resolved).\nInterface SqlValidatorTable; // Supplies a SqlValidator with the metadata for a table.\nInterface SqlValidatorUtil.Suggester; // Suggests candidates for unique names, given the number of attempts so far and the number of expressions in the project list.\nInterface SqlValidatorWithHints; // Extends SqlValidator to allow discovery of useful data such as fully qualified names of SQL objects, alternative valid SQL objects that can be used in the SQL statement (dubbed as hints).\nClass AggregatingSelectScope; // Scope for resolving identifiers within a SELECT statement that has a GROUP BY clause.\nClass AggregatingSelectScope.Resolved; // Information about an aggregating scope that can only be determined after validation has occurred.\nClass AliasNamespace; // Namespace for an AS t(c1, c2, ...) clause.\nClass CollectNamespace; // Namespace for COLLECT and TABLE constructs.\nClass DelegatingNamespace; // An implementation of SqlValidatorNamespace that delegates all methods to an underlying object.\nClass DelegatingScope; // A scope which delegates all requests to its parent scope.\nClass DelegatingSqlValidatorCatalogReader; // Implementation of SqlValidatorCatalogReader that passes all calls to a parent catalog reader.\n", "des": "SQL validation."}
{"index": 868, "repo": "calcite-core-1.34.0", "code": "package implicit;\n\nInterface TypeCoercion; // Default strategies to coerce differing types that participate in operations into compatible ones.\nInterface TypeCoercionFactory; // Factory for TypeCoercion objects.\nClass AbstractTypeCoercion; // Base class for all the type coercion rules.\nClass TypeCoercionImpl; // Default implementation of Calcite implicit type cast.\nClass TypeCoercions; // Factory class for type coercion instantiation of different sql dialects.\n", "des": "SQL Implicit Type Cast"}
{"index": 869, "repo": "calcite-core-1.34.0", "code": "package sql2rel;\n\nInterface AuxiliaryConverter; // Converts an expression for a group window function (e.g.\nInterface InitializerContext; // Provides context for InitializerExpressionFactory methods.\nInterface InitializerExpressionFactory; // InitializerExpressionFactory supplies default values for INSERT, UPDATE, and NEW.\nInterface RelDecorrelator.AdjustProjectForCountAggregateRule.AdjustProjectForCountAggregateRuleConfig; // Rule configuration.\nInterface RelDecorrelator.Config; // Base configuration for rules that are non-static in a RelDecorrelator.\nInterface RelDecorrelator.RemoveCorrelationForScalarAggregateRule.RemoveCorrelationForScalarAggregateRuleConfig; // Rule configuration.\nInterface RelDecorrelator.RemoveCorrelationForScalarProjectRule.RemoveCorrelationForScalarProjectRuleConfig; // Rule configuration.\nInterface RelDecorrelator.RemoveSingleAggregateRule.RemoveSingleAggregateRuleConfig; // Rule configuration.\nInterface RelStructuredTypeFlattener.SelfFlatteningRel; // Mix-in interface for relational expressions that know how to flatten themselves.\nInterface SqlNodeToRexConverter; // Converts expressions from SqlNode to RexNode.\nInterface SqlRexContext; // Contains the context necessary for a SqlRexConvertlet to convert a SqlNode expression into a RexNode.\nInterface SqlRexConvertlet; // Thunk which converts a SqlNode expression into a RexNode expression.\nInterface SqlRexConvertletTable; // Collection of SqlRexConvertlets.\nInterface SqlToRelConverter.Config; // Interface to define the configuration for a SqlToRelConverter.\nInterface SubQueryConverter; // SubQueryConverter provides the interface for classes that convert sub-queries into equivalent expressions.\nClass AuxiliaryConverter.Impl; // Simple implementation of AuxiliaryConverter.\nClass CorrelateProjectExtractor; // A visitor for relational expressions that extracts a Project, with a \"simple\" computation over the correlated variables, from the right side of a correlation (Correlate) and places it on the left side.\nClass CorrelationReferenceFinder; // Shuttle that finds references to a given CorrelationId within a tree of RelNodes.\nClass DeduplicateCorrelateVariables; // Rewrites relations to ensure the same correlation is referenced by the same correlation variable.\nClass NullInitializerExpressionFactory; // An implementation of InitializerExpressionFactory that always supplies NULL.\n", "des": "Translates a SQL parse tree to relational expression."}
{"index": 870, "repo": "calcite-core-1.34.0", "code": "package statistic;\n\nClass CachingSqlStatisticProvider; // Implementation of SqlStatisticProvider that reads and writes a cache.\nClass QuerySqlStatisticProvider; // Implementation of SqlStatisticProvider that generates and executes SQL queries.\nEnum MapSqlStatisticProvider; // Implementation of SqlStatisticProvider that looks up values in a table.\n", "des": "Implementations of statistics providers."}
{"index": 871, "repo": "calcite-core-1.34.0", "code": "package tools;\n\nInterface FrameworkConfig; // Interface that describes how to configure planning sessions generated using the Frameworks tools.\nInterface Frameworks.BasePrepareAction<R>; // Piece of code to be run in a context where a planner and statement are available.\nInterface Frameworks.PlannerAction<R>; // Piece of code to be run in a context where a planner is available.\nInterface Hoist.Config; // Configuration.\nInterface Planner; // A façade that covers Calcite's query planning process: parse SQL, validate the parse tree, convert the parse tree to a relational expression, and optimize the relational expression.\nInterface Program; // Program that transforms a relational expression into another relational expression.\nInterface RelBuilder.AggCall; // Information necessary to create a call to an aggregate function.\nInterface RelBuilder.Config; // Configuration of RelBuilder.\nInterface RelBuilder.GroupKey; // Information necessary to create the GROUP BY clause of an Aggregate.\nInterface RelBuilder.OverCall; // Call to a windowed aggregate function.\nInterface RelBuilderFactory; // A partially-created RelBuilder.\nInterface RelRunner; // Runs a relational expression.\nInterface RuleSet; // A set rules associated with a particular type of invocation of the Planner.\nClass Frameworks; // Tools for invoking Calcite functionality without initializing a container / server first.\nClass Frameworks.ConfigBuilder; // A builder to help you build a FrameworkConfig using defaults where values aren't required.\nClass Frameworks.PrepareAction<R>;\nClass Hoist; // Utility that extracts constants from a SQL query.\nClass Hoist.Hoisted; // Result of hoisting.\nClass Hoist.Variable; // Variable.\nClass PigRelBuilder; // Extension to RelBuilder for Pig relational operators.\nClass Programs; // Utilities for creating Programs.\nClass RelBuilder; // Builder for relational expressions.\nClass RelRunners; // Implementations of RelRunner.\nClass RuleSets; // Utilities for creating and composing rule sets.\nEnum PigRelBuilder.GroupOption; // Option for performing group efficiently if data set is already sorted.\nClass RelConversionException; // An Exception thrown when attempting conversion to a set of RelNodes.\nClass ValidationException; // An Exception thrown when attempting to validate a SQL parse tree.\n", "des": "Provides utility classes."}
{"index": 872, "repo": "calcite-core-1.34.0", "code": "package util;\n\npackage util.format; // Utility classes for handling format strings.\npackage util.graph; // Graph-theoretic algorithms and data structures.\npackage util.javac; // Provides compilers for Java code.\npackage util.mapping; // Support for algebraic maps.\npackage util.trace; // Tracing services.\nInterface CalciteParserException; // Tagging interface to allow a SqlParseException to be identified without adding a dependency on it from client-side code.\nInterface CalciteValidatorException; // Tagging interface to allow a SqlValidatorException to be identified without adding a dependency on it from client-side code.\nInterface Compatible; // Compatibility layer.\nInterface Glossary; // A collection of terms.\nInterface JdbcType<T>; // Maps Java types to their corresponding getters in JDBC.\nInterface Litmus; // Callback to be called when a test for validity succeeds or fails.\nInterface PartiallyOrderedSet.Ordering<E>; // Ordering relation.\nInterface PrecedenceClimbingParser.Special; // Callback defining the behavior of a special function.\nInterface RangeSets.Consumer<C extends Comparable<C>>; // Consumer of Range values.\nInterface RangeSets.Handler<C extends Comparable<C>,R>; // Deconstructor for Range values.\nInterface ReflectiveVisitDispatcher<R extends ReflectiveVisitor,E>; // Interface for looking up methods relating to reflective visitation.\nInterface ReflectiveVisitor; // Object which can be a target for a reflective visitation (see ReflectUtil.invokeVisitor(ReflectiveVisitor, Object, Class, String).\nInterface ReflectUtil.MethodDispatcher<T>; // Can invoke a method on an object of type E with return type T.\nInterface SaffronProperties; // As of release 1.19, replaced by CalciteSystemProperty\nInterface Source; // Source of data.\nInterface TryThreadLocal.Memo; // Remembers to set the value back.\nClass BarfingInvocationHandler; // A class derived from BarfingInvocationHandler handles a method call by looking for a method in itself with identical parameters.\nClass Benchmark; // Helps to run benchmarks by running the same task repeatedly and averaging the running times.\nClass Benchmark.Statistician; // Collects statistics for a test that is run multiple times.\n", "des": "Provides utility classes."}
{"index": 873, "repo": "calcite-core-1.34.0", "code": "package format;\n\nInterface FormatElement; // A format element in a format string.\nInterface FormatModel; // Describes the format strings used by a formatting function such as FORMAT_TIMESTAMP or CAST(string AS DATE FORMAT formatString).\nClass FormatModels; // Utilities for FormatModel.\nEnum FormatElementEnum; // Implementation of FormatElement containing the standard format elements.\n", "des": "Utility classes for handling format strings."}
{"index": 874, "repo": "calcite-core-1.34.0", "code": "package graph;\n\nInterface AttributedDirectedGraph.AttributedEdgeFactory<V,E>; // Factory for edges that have attributes.\nInterface DirectedGraph<V,E>; // Directed graph.\nInterface DirectedGraph.EdgeFactory<V,E>; // Factory for edges.\nClass AttributedDirectedGraph<V,E extends DefaultEdge>; // Directed graph where edges have attributes and allows multiple edges between any two vertices provided that their attributes are different.\nClass BreadthFirstIterator<V,E extends DefaultEdge>; // Iterates over the vertices in a directed graph in breadth-first order.\nClass CycleDetector<V,E extends DefaultEdge>; // Detects cycles in directed graphs.\nClass DefaultDirectedGraph<V,E extends DefaultEdge>; // Default implementation of DirectedGraph.\nClass DefaultEdge; // Default implementation of Edge.\nClass DepthFirstIterator<V,E extends DefaultEdge>; // Iterates over the vertices in a directed graph in depth-first order.\nClass Graphs; // Miscellaneous graph utilities.\nClass Graphs.FrozenGraph<V,E extends DefaultEdge>; // Immutable grap.\nClass TopologicalOrderIterator<V,E extends DefaultEdge>; // Iterates over the edges of a graph in topological order.\n", "des": "Graph-theoretic algorithms and data structures."}
{"index": 875, "repo": "calcite-core-1.34.0", "code": "package javac;\n\nInterface JavaCompiler; // The interface JavaCompiler represents an interface to invoke a regular Java compiler.\nClass JaninoCompiler; // JaninoCompiler implements the JavaCompiler interface by calling Janino.\nClass JaninoCompiler.JaninoCompilerArgs; // Arguments to an invocation of the Janino compiler.\nClass JavaCompilerArgs; // A JavaCompilerArgs holds the arguments for a JavaCompiler.\n", "des": "Provides compilers for Java code."}
{"index": 876, "repo": "calcite-core-1.34.0", "code": "package mapping;\n\nInterface Mapping; // A Mapping is a relationship between a source domain to target domain of integers.\nInterface Mappings.CoreMapping; // Core interface of all mappings.\nInterface Mappings.FunctionMapping; // Mapping where every source has a target.\nInterface Mappings.SourceMapping; // Mapping suitable for sourcing columns.\nInterface Mappings.TargetMapping; // Mapping suitable for mapping columns to a target.\nClass AbstractSourceMapping; // Simple implementation of Mappings.TargetMapping where the number of sources and targets are specified as constructor parameters, and you just need to implement one method.\nClass AbstractTargetMapping; // Simple implementation of Mappings.TargetMapping where the number of sources and targets are specified as constructor parameters, and you just need to implement one method.\nClass IntPair; // An immutable pair of integers.\nClass Mappings; // Utility functions related to mappings.\nClass Mappings.AbstractMapping; // Abstract implementation of Mapping.\nClass Mappings.FiniteAbstractMapping; // Abstract implementation of mapping where both source and target domains are finite.\nClass Mappings.IdentityMapping; // The identity mapping, of a given size, or infinite.\nClass Mappings.OverridingSourceMapping; // Source mapping that returns the same result as a parent Mappings.SourceMapping except for specific overriding elements.\nClass Mappings.OverridingTargetMapping; // Target mapping that returns the same result as a parent Mappings.TargetMapping except for specific overriding elements.\nClass Mappings.PartialMapping; // A mapping where a source has at most one target, and every target has at most one source.\nEnum MappingType; // Describes the type of a mapping, from the most general MappingType.MULTI_FUNCTION (every element in the source and target domain can participate in many mappings) to the most restricted MappingType.BIJECTION (every element in the source and target domain must be paired with precisely one element in the other domain).\nClass Mappings.NoElementException; // Thrown when a mapping is expected to return one element but returns none.\nClass Mappings.TooManyElementsException; // Thrown when a mapping is expected to return one element but returns several.\n", "des": "Support for algebraic maps."}
{"index": 877, "repo": "calcite-core-1.34.0", "code": "package trace;\n\nClass CalciteLogger; // Small extension to Logger with some performance improvements.\nClass CalciteTimingTracer; // CalciteTimingTracer provides a mechanism for tracing the timing of a call sequence at nanosecond resolution.\nClass CalciteTrace; // Contains all of the tracers used within org.apache.calcite class libraries.\n", "des": "Tracing services."}
{"index": 878, "repo": "mahout-math-0.13.0", "code": "package math;\n\npackage math.function; // Core interfaces for functions, comparisons and procedures on objects and primitive data types.\npackage math.list; // Resizable lists holding objects or primitive data types such as int, double, etc.\npackage math.map; // Automatically growing and shrinking maps holding objects or primitive data types such as int, double, etc.\nInterface Matrix; // The basic interface including numerous convenience functions\nInterface MatrixTimesOps; // Optional interface for optimized matrix multiplications.\nInterface QR;\nInterface Swapper; // Interface for an object that knows how to swap elements at two positions (a,b).\nInterface Vector; // The basic interface including numerous convenience functions\nInterface Vector.Element; // A holder for information about a specific item in the Vector.\nInterface VectorIterable;\nClass AbstractMatrix; // A few universal implementations of convenience functions for a JVM-backed matrix.\nClass AbstractMatrix.TransposeViewVector;\nClass AbstractVector; // Implementations of generic capabilities like sum of elements and dot products\nClass Algebra;\nClass Arrays; // Array manipulations; complements java.util.Arrays.\nClass BinarySearch;\nClass Centroid; // A centroid is a weighted vector.\nClass CholeskyDecomposition; // Cholesky decomposition shamelessly ported from JAMA.\nClass ConstantVector; // Implements a vector with all the same values.\nClass DelegatingVector; // A delegating vector provides an easy way to decorate vectors with weights or id's and such while keeping all of the Vector functionality.\nClass DenseMatrix; // Matrix of doubles implemented using a 2-d array\nClass DenseSymmetricMatrix; // Economy packaging for a dense symmetric in-core matrix.\nClass DenseVector; // Implements vector as an array of doubles\nClass DiagonalMatrix;\nClass FileBasedMatrix; // Provides a way to get data from a file and treat it as if it were a matrix, but avoids putting all that data onto the Java heap.\nClass FileBasedSparseBinaryMatrix; // Provides a way to get data from a file and treat it as if it were a matrix, but avoids putting all that data onto the Java heap.\nClass FileBasedSparseBinaryMatrix.BinaryReadOnlyElement;\nClass Matrices;\nClass MatrixSlice;\n", "des": "Core base classes; Operations on primitive arrays such as sorting, partitioning and permuting."}
{"index": 879, "repo": "mahout-math-0.13.0", "code": "package function;\n\nInterface ByteByteProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteCharProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteComparator; // A comparison function which imposes a total ordering on some collection of elements.\nInterface ByteDoubleProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteFloatProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteIntProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteLongProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteObjectProcedure<T>; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteProcedure; // Interface that represents a procedure object: a procedure that takes a single argument and does not return a value.\nInterface ByteShortProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharByteProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharCharProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharComparator; // A comparison function which imposes a total ordering on some collection of elements.\nInterface CharDoubleProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharFloatProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharIntProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharLongProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharObjectProcedure<T>; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\n", "des": "Core interfaces for functions, comparisons and procedures on objects and primitive data types."}
{"index": 880, "repo": "mahout-math-0.13.0", "code": "package math;\n\nClass Arithmetic; // Arithmetic functions.\nClass Constants; // Defines some useful constants.\nClass Polynomial; // Polynomial functions.\n", "des": "Tools for basic and advanced mathematics: Arithmetics and Algebra, Polynomials and Chebyshev series, Bessel and Airy functions, Function Objects for generic function evaluation, etc."}
{"index": 881, "repo": "mahout-math-0.13.0", "code": "package engine;\n\nClass MersenneTwister; // MersenneTwister (MT19937) is one of the strongest uniform pseudo-random number generators known so far; at the same time it is quick.\nClass RandomEngine; // Abstract base class for uniform pseudo-random number generating engines.\n", "des": "Engines generating strong uniformly distributed pseudo-random numbers; Needed by all JET probability distributions since they rely on uniform random numbers to generate random numbers from their own distribution."}
{"index": 882, "repo": "mahout-math-0.13.0", "code": "package stat;\n\nClass Gamma; // Partially deprecated until unit tests are in place.\nClass Probability; // Partially deprecated until unit tests are in place.\n", "des": "Tools for basic and advanced statistics: Estimators, Gamma functions, Beta functions, Probabilities, Special integrals, etc."}
{"index": 883, "repo": "mahout-math-0.13.0", "code": "package list;\n\nClass AbstractByteList; // Abstract base class for resizable lists holding byte elements; abstract.\nClass AbstractCharList; // Abstract base class for resizable lists holding char elements; abstract.\nClass AbstractDoubleList; // Abstract base class for resizable lists holding double elements; abstract.\nClass AbstractFloatList; // Abstract base class for resizable lists holding float elements; abstract.\nClass AbstractIntList; // Abstract base class for resizable lists holding int elements; abstract.\nClass AbstractList; // Abstract base class for resizable lists holding objects or primitive data types such as int, float, etc.\nClass AbstractLongList; // Abstract base class for resizable lists holding long elements; abstract.\nClass AbstractObjectList<T>; // Abstract base class for resizable lists holding objects or primitive data types such as int, float, etc.First see the package summary and javadoc tree view to get the broad picture.\nClass AbstractShortList; // Abstract base class for resizable lists holding short elements; abstract.\nClass ByteArrayList; // Resizable list holding byte elements; implemented with arrays.\nClass CharArrayList; // Resizable list holding char elements; implemented with arrays.\nClass DoubleArrayList; // Resizable list holding double elements; implemented with arrays.\nClass FloatArrayList; // Resizable list holding float elements; implemented with arrays.\nClass IntArrayList; // Resizable list holding int elements; implemented with arrays.\nClass LongArrayList; // Resizable list holding long elements; implemented with arrays.\nClass ObjectArrayList<T>; // Resizable list holding ${valueType} elements; implemented with arrays.\nClass ShortArrayList; // Resizable list holding short elements; implemented with arrays.\nClass SimpleLongArrayList; // Resizable list holding long elements; implemented with arrays; not efficient; just to demonstrate which methods you must override to implement a fully functional list.\n", "des": "Resizable lists holding objects or primitive data types such as int, double, etc."}
{"index": 884, "repo": "mahout-math-0.13.0", "code": "package map;\n\nClass AbstractByteByteMap;\nClass AbstractByteCharMap;\nClass AbstractByteDoubleMap;\nClass AbstractByteFloatMap;\nClass AbstractByteIntMap;\nClass AbstractByteLongMap;\nClass AbstractByteObjectMap<T>;\nClass AbstractByteShortMap;\nClass AbstractCharByteMap;\nClass AbstractCharCharMap;\nClass AbstractCharDoubleMap;\nClass AbstractCharFloatMap;\nClass AbstractCharIntMap;\nClass AbstractCharLongMap;\nClass AbstractCharObjectMap<T>;\nClass AbstractCharShortMap;\nClass AbstractDoubleByteMap;\nClass AbstractDoubleCharMap;\nClass AbstractDoubleDoubleMap;\nClass AbstractDoubleFloatMap;\nClass AbstractDoubleIntMap;\nClass AbstractDoubleLongMap;\nClass AbstractDoubleObjectMap<T>;\nClass AbstractDoubleShortMap;\nClass AbstractFloatByteMap;\nClass AbstractFloatCharMap;\nClass AbstractFloatDoubleMap;\nClass AbstractFloatFloatMap;\nClass AbstractFloatIntMap;\nClass AbstractFloatLongMap;\nClass AbstractFloatObjectMap<T>;\nClass AbstractFloatShortMap;\nClass AbstractIntByteMap;\nClass AbstractIntCharMap;\nClass AbstractIntDoubleMap;\nClass AbstractIntFloatMap;\nClass AbstractIntIntMap;\nClass AbstractIntLongMap;\nClass AbstractIntObjectMap<T>;\nClass AbstractIntShortMap;\nClass AbstractLongByteMap;\nClass AbstractLongCharMap;\nClass AbstractLongDoubleMap;\nClass AbstractLongFloatMap;\nClass AbstractLongIntMap;\nClass AbstractLongLongMap;\nClass AbstractLongObjectMap<T>;\nClass AbstractLongShortMap;\nClass AbstractObjectByteMap<T>;\nClass AbstractObjectCharMap<T>;\nClass AbstractObjectDoubleMap<T>;\nClass AbstractObjectFloatMap<T>;\nClass AbstractObjectIntMap<T>;\nClass AbstractObjectLongMap<T>;\nClass AbstractObjectShortMap<T>;\nClass AbstractShortByteMap;\nClass AbstractShortCharMap;\nClass AbstractShortDoubleMap;\nClass AbstractShortFloatMap;\nClass AbstractShortIntMap;\nClass AbstractShortLongMap;\nClass AbstractShortObjectMap<T>;\nClass AbstractShortShortMap;\nClass HashFunctions; // Provides various hash functions.\n", "des": "Automatically growing and shrinking maps holding objects or primitive data types such as int, double, etc."}
{"index": 885, "repo": "cassandra-all-4.1.2", "code": "package types;\n\nInterface GettableByIndexData; // Collection of (typed) CQL values that can be retrieved by index (starting at zero).\nInterface GettableByNameData; // Collection of (typed) CQL values that can be retrieved by name.\nInterface GettableData; // Collection of (typed) CQL values that can be retrieved either by index (starting at zero) or by name.\nInterface SettableByIndexData<T extends SettableByIndexData<T>>; // Collection of (typed) CQL values that can be set by index (starting at zero).\nInterface SettableByNameData<T extends SettableData<T>>; // Collection of (typed) CQL values that can set by name.\nInterface SettableData<T extends SettableData<T>>; // Collection of (typed) CQL values that can be set either by index (starting at zero) or by name.\nClass AbstractGettableData;\nClass CodecRegistry; // A registry for TypeCodecs.\nClass CodecUtils; // A set of utility methods to deal with type conversion and serialization.\nClass DataType; // Data types supported by cassandra.\nClass DataType.CollectionType; // Instances of this class represent collection types, that is, lists, sets or maps.\nClass DataType.CustomType; // A \"custom\" type is a type that cannot be expressed as a CQL type.\nClass DataType.NativeType; // Instances of this class represent CQL native types, also known as CQL primitive types.\nClass DataTypeClassNameParser;\nClass Duration; // Represents a duration.\nClass LocalDate; // A date with no time components, no time zone, in the ISO 8601 calendar.\nClass Metadata; // Keeps metadata on the connected cluster, including known nodes and schema definitions.\nClass ParseUtils; // Simple utility class used to help parsing CQL values (mainly UDT and collection ones).\nClass TupleType; // A tuple type.\nClass TupleValue; // A value for a Tuple.\nClass TypeCodec<T>; // A Codec that can serialize and deserialize to and from a given CQL type and a given Java Type.\nClass TypeCodec.AbstractCollectionCodec<E,C extends java.util.Collection<E>>; // Base class for codecs mapping CQL lists and sets to Java collections.\nClass TypeCodec.AbstractMapCodec<K,V>; // Base class for codecs mapping CQL maps to a Java Map.\n", "des": "Contains pieces of the Java Driver that are needed to handle data types in C* User-Defined-Functions/Aggregates."}
{"index": 886, "repo": "cassandra-all-4.1.2", "code": "package streaming;\n\nInterface IStreamReader; // This is the interface is used by the streaming code read a SSTable stream off a channel.\nClass CassandraCompressedStreamReader; // CassandraStreamReader that reads from streamed compressed SSTable\nClass CassandraCompressedStreamWriter; // CassandraStreamWriter for compressed SSTable.\nClass CassandraEntireSSTableStreamReader; // CassandraEntireSSTableStreamReader reads SSTable off the wire and writes it to disk.\nClass CassandraEntireSSTableStreamWriter; // CassandraEntireSSTableStreamWriter streams the entire SSTable to given channel.\nClass CassandraIncomingFile; // used to receive the part(or whole) of a SSTable data file.\nClass CassandraOutgoingFile; // used to transfer the part(or whole) of a SSTable data file\nClass CassandraStreamHeader;\nClass CassandraStreamHeader.Builder;\nClass CassandraStreamHeader.CassandraStreamHeaderSerializer;\nClass CassandraStreamManager; // Implements the streaming interface for the native cassandra storage engine.\nClass CassandraStreamReader; // CassandraStreamReader reads from stream and writes to SSTable.\nClass CassandraStreamReader.StreamDeserializer;\nClass CassandraStreamReceiver;\nClass CassandraStreamWriter; // CassandraStreamWriter writes given section of the SSTable to given channel.\nClass ComponentContext;\nClass ComponentManifest;\nClass CompressedInputStream; // InputStream which reads compressed chunks from the underlying input stream and deals with decompression and position tracking.\nClass CompressionInfo; // Container that carries compression parameters and chunks to decompress data from stream.\n", "des": "File transfer"}
{"index": 887, "repo": "cassandra-all-4.1.2", "code": "package hadoop;\n\nClass ColumnFamilySplit;\nClass ConfigHelper;\nClass HadoopCompat; // Utility methods to allow applications to deal with inconsistencies between MapReduce Context Objects API between Hadoop 1.x and 2.x.\nClass ReporterWrapper; // A reporter that works with both mapred and mapreduce APIs.\n", "des": "This package was deprecated."}
{"index": 888, "repo": "cassandra-all-4.1.2", "code": "package hints;\n\nInterface HintsServiceMBean;\nInterface InputPosition; // Marker interface for file positions as provided by the various ChecksummedDataReader implementations.\nInterface SerializableHintMessage;\nClass ChecksummedDataInput; // A RandomAccessReader wrapper that calculates the CRC in place.\nClass CompressedChecksummedDataInput;\nClass CompressedHintsWriter;\nClass EncryptedChecksummedDataInput;\nClass EncryptedHintsWriter;\nClass Hint; // Encapsulates the hinted mutation, its creation time, and the gc grace seconds param for each table involved.\nClass HintMessage; // The message we use to dispatch and forward hints.\nClass HintMessage.Serializer;\nClass HintsService; // A singleton-ish wrapper over various hints components: - a catalog of all hints stores - a single-threaded write executor - a multi-threaded dispatch executor - the buffer pool for writing hints into - an optional scheduled task to clean up the applicable hints files The front-end for everything hints related.\nClass HintVerbHandler; // Verb handler used both for hint dispatch and streaming.\nClass PendingHintsInfo;\n", "des": "Hints subsystem consists of several components."}
{"index": 889, "repo": "cassandra-all-4.1.2", "code": "package async;\n\nClass NettyStreamingChannel;\nClass NettyStreamingConnectionFactory;\nClass StreamCompressionSerializer; // A serialiazer for stream compressed files (see package-level documentation).\nClass StreamingMultiplexedChannel; // Responsible for sending StreamMessages to a given peer.\n", "des": "Non-blocking streaming with netty"}
{"index": 890, "repo": "commons-jcs3-core-3.1", "code": "package jcs3;\n\npackage jcs3.access; // Contains classes for accessing the cache.\npackage jcs3.auxiliary; // Root package for auxiliary caches.\npackage jcs3.engine; // Interfaces used by the core and the auxiliary caches.\nClass JCS; // Simple class for using JCS.\n", "des": "Contains the class JCS which provides a simple interface for clients to use JCS."}
{"index": 891, "repo": "commons-jcs3-core-3.1", "code": "package access;\n\nClass AbstractCacheAccess<K,V>; // This class provides the common methods for all types of access to the cache.\nClass CacheAccess<K,V>; // This class provides an interface for all types of access to the cache.\nClass GroupCacheAccess<K,V>; // Access for groups.\n", "des": "Contains classes for accessing the cache."}
{"index": 892, "repo": "commons-jcs3-core-3.1", "code": "package auxiliary;\n\npackage auxiliary.disk; // The primary disk auxiliary.\npackage auxiliary.lateral; // Root package for the lateral cache family.\npackage auxiliary.remote; // Root package for the remote auxiliary cache.\nInterface AuxiliaryCache<K,V>; // Tag interface for auxiliary caches.\nInterface AuxiliaryCacheAttributes; // This is a nominal interface that auxiliary cache attributes should implement.\nInterface AuxiliaryCacheFactory; // All auxiliary caches must have a factory that the cache configurator can use to create instances.\nClass AbstractAuxiliaryCache<K,V>; // This holds convenience methods used by most auxiliary caches.\nClass AbstractAuxiliaryCacheAttributes; // This has common attributes used by all auxiliaries.\nClass AbstractAuxiliaryCacheEventLogging<K,V>; // All ICacheEvents are defined as final.\nClass AbstractAuxiliaryCacheFactory; // Base class for auxiliary cache factories.\nClass AbstractAuxiliaryCacheMonitor; // Used to monitor and repair any failed connection for the lateral cache service.\nClass AuxiliaryCacheConfigurator; // Configuration util for auxiliary caches.\n", "des": "Root package for auxiliary caches."}
{"index": 893, "repo": "commons-jcs3-core-3.1", "code": "package disk;\n\nClass AbstractDiskCache<K,V>; // Abstract class providing a base implementation of a disk cache, which can be easily extended to implement a disk cache for a specific persistence mechanism.\nClass AbstractDiskCacheAttributes; // This has common attributes that any conceivable disk cache would need.\nClass PurgatoryElement<K,V>; // Implementation of cache elements in purgatory.\n", "des": "The primary disk auxiliary."}
{"index": 894, "repo": "commons-jcs3-core-3.1", "code": "package lateral;\n\nClass LateralCache<K,V>; // Lateral distributor.\nClass LateralCacheAttributes; // This class stores attributes for all of the available lateral cache auxiliaries.\nClass LateralCacheMonitor; // Used to monitor and repair any failed connection for the lateral cache service.\nClass LateralCacheNoWait<K,V>; // Used to queue up update requests to the underlying cache.\nClass LateralCacheNoWaitFacade<K,V>; // Used to provide access to multiple services under nowait protection.\nClass LateralElementDescriptor<K,V>; // This class wraps command to other laterals.\nEnum LateralCommand; // Enumeration of the available lateral commands\n", "des": "Root package for the lateral cache family."}
{"index": 895, "repo": "commons-jcs3-core-3.1", "code": "package remote;\n\nClass AbstractRemoteAuxiliaryCache<K,V>; // Abstract base for remote caches.\nClass AbstractRemoteCacheListener<K,V>; // Shared listener base.\nClass AbstractRemoteCacheNoWaitFacade<K,V>; // An abstract base for the No Wait Facade.\nClass CommonRemoteCacheAttributes; // Attributes common to remote cache client and server.\nClass RemoteCache<K,V>; // Client proxy for an RMI remote cache.\nClass RemoteCacheAttributes; // These objects are used to configure the remote cache client.\nClass RemoteCacheFactory; // The RemoteCacheFactory creates remote caches for the cache hub.\nClass RemoteCacheFailoverRunner<K,V>; // Functionality moved to RemoteCacheNoWaitFacade\nClass RemoteCacheListener<K,V>; // Registered with RemoteCache server.\nClass RemoteCacheManager; // An instance of RemoteCacheManager corresponds to one remote connection of a specific host and port.\nClass RemoteCacheMonitor; // Used to monitor and repair any failed connection for the remote cache service.\nClass RemoteCacheNoWait<K,V>; // The RemoteCacheNoWait wraps the RemoteCacheClient.\nClass RemoteCacheNoWaitFacade<K,V>; // Used to provide access to multiple services under nowait protection.\nClass RemoteLocation; // Location of the RMI registry.\nClass RemoteUtils; // This class provides some basic utilities for doing things such as starting the registry properly.\n", "des": "Root package for the remote auxiliary cache."}
{"index": 896, "repo": "commons-jcs3-core-3.1", "code": "package engine;\n\npackage engine.behavior; // Interfaces used by the core and the auxiliary caches.\npackage engine.control; // The primary cache classes and the hub.\npackage engine.memory; // Parent package for memory type plugins.\nClass AbstractCacheEventQueue<K,V>; // An abstract base class to the different implementations\nClass CacheAdaptor<K,V>; // Used for Cache-to-Cache messaging purposes.\nClass CacheElement<K,V>; // Generic element wrapper.\nClass CacheElementSerialized<K,V>; // Either serialized value or the value should be null;\nClass CacheEventQueue<K,V>; // An event queue is used to propagate ordered cache events to one and only one target listener.\nClass CacheEventQueueFactory<K,V>; // This class hands out event Queues.\nClass CacheGroup; // The grouping functionality is on the way out.\nClass CacheInfo; // This is a static variable holder for the distribution auxiliaries that need something like a vmid.\nClass CacheListeners<K,V>; // Used to associates a set of [cache listener to cache event queue] for a cache.\nClass CacheWatchRepairable; // Intercepts the requests to the underlying ICacheObserver object so that the listeners can be recorded locally for remote connection recovery purposes.\nClass CompositeCacheAttributes; // The CompositeCacheAttributes defines the general cache region settings.\nClass ElementAttributes; // This it the element attribute descriptor class.\nClass PooledCacheEventQueue<K,V>; // An event queue is used to propagate ordered cache events to one and only one target listener.\nClass ZombieCacheService<K,V>; // Zombie adapter for any cache service.\nClass ZombieCacheServiceNonLocal<K,V>; // Zombie adapter for the non local cache services.\nClass ZombieCacheServiceNonLocal.ZombieEvent; // Base of the other events.\nClass ZombieCacheWatch; // Zombie Observer.\nEnum CacheStatus; // Cache statuses\n", "des": "Interfaces used by the core and the auxiliary caches."}
{"index": 897, "repo": "commons-jcs3-core-3.1", "code": "package behavior;\n\nInterface ICache<K,V>; // This is the top level interface for all cache like structures.\nInterface ICacheElement<K,V>; // Every item is the cache is wrapped in an ICacheElement.\nInterface ICacheElementSerialized<K,V>; // This interface defines the behavior of the serialized element wrapper.\nInterface ICacheEventQueue<K,V>; // Interface for a cache event queue.\nInterface ICacheListener<K,V>; // Used to receive a cache event notification.\nInterface ICacheObserver; // Used to register interest in receiving cache changes.\nInterface ICacheService<K,V>; // Used to retrieve and update the cache.\nInterface ICacheServiceAdmin; // Description of the Interface\nInterface ICacheServiceNonLocal<K,V>; // Used to retrieve and update non local caches, such as the remote and lateral caches.\nInterface ICacheType; // Interface implemented by a specific cache.\nInterface ICompositeCacheAttributes; // This defines the minimal behavior for the Cache Configuration settings.\nInterface ICompositeCacheManager; // I need the interface so I can plug in mock managers for testing.\nInterface IElementAttributes; // Interface for cache element attributes classes.\nInterface IElementSerializer; // Defines the behavior for cache element serializers.\nInterface IProvideScheduler; // Marker interface for providers of the central ScheduledExecutorService\nInterface IRequireScheduler; // Marker interface to allow the injection of a central ScheduledExecutorService for all modules requiring scheduled background operations.\nInterface IShutdownObservable; // ShutdownObservers can observe ShutdownObservable objects.\nInterface IShutdownObserver; // This interface is required of all shutdown observers.\nInterface IZombie; // Interface to mark an object as zombie for error recovery purposes.\nEnum ICacheEventQueue.QueueType;\nEnum ICacheType.CacheType;\nEnum ICompositeCacheAttributes.DiskUsagePattern;\n", "des": "Interfaces used by the core and the auxiliary caches."}
{"index": 898, "repo": "commons-jcs3-core-3.1", "code": "package control;\n\nClass CompositeCache<K,V>; // This is the primary hub for a single cache/region.\nClass CompositeCacheConfigurator; // This class configures JCS based on a properties object.\nClass CompositeCacheManager; // Manages a composite cache.\n", "des": "The primary cache classes and the hub."}
{"index": 899, "repo": "commons-jcs3-core-3.1", "code": "package memory;\n\npackage memory.lru; // The primary memory plugin using a 'least recently used' removal policy.\npackage memory.mru; // A memory plugin implemented using a 'most recently used' removal policy.\npackage memory.soft; // A memory plugin implemented using soft references.\nClass AbstractDoubleLinkedListMemoryCache<K,V>; // This class contains methods that are common to memory caches using the double linked list, such as the LRU, MRU, FIFO, and LIFO caches.\nClass AbstractMemoryCache<K,V>; // This base includes some common code for memory caches.\n", "des": "Parent package for memory type plugins."}
{"index": 900, "repo": "commons-jcs3-core-3.1", "code": "package lru;\n\nClass LHMLRUMemoryCache<K,V>; // This is a test memory manager using the jdk1.4 LinkedHashMap.\nClass LRUMemoryCache<K,V>; // A fast reference management system.\n", "des": "The primary memory plugin using a 'least recently used' removal policy."}
{"index": 901, "repo": "commons-jcs3-core-3.1", "code": "package mru;\n\nClass MRUMemoryCache<K,V>; // The most recently used items move to the front of the list and get spooled to disk if the cache hub is configured to use a disk cache.\n", "des": "A memory plugin implemented using a 'most recently used' removal policy."}
{"index": 902, "repo": "commons-jcs3-core-3.1", "code": "package soft;\n\nClass SoftReferenceMemoryCache<K,V>; // A JCS IMemoryCache that has SoftReference to all its values.\n", "des": "A memory plugin implemented using soft references."}
{"index": 903, "repo": "commons-jcs3-core-3.1", "code": "package config;\n\nClass OptionConverter; // This class is based on the log4j class org.apache.log4j.helpers.OptionConverter that was made by Ceki Gülcü Simon Kitching; Avy Sharell (sharell@online.fr) Anders Kristensen Matthieu Verbert (mve@zurich.ibm.com) A convenience class to convert property values to specific types.\nClass PropertySetter; // This class is based on the log4j class org.apache.log4j.config.PropertySetter that was made by Anders Kristensen General purpose Object property setter.\nClass PropertySetterException; // This class is based on the log4j class org.apache.log4j.config.PropertySetter that was made by Anders Kristensen Thrown when an error is encountered whilst attempting to set a property using the PropertySetterutility class.\n", "des": "This package contains utility classes that are used when configuring the cache."}
{"index": 904, "repo": "commons-compress-1.23.0", "code": "package archivers;\n\npackage archivers.ar; // Provides stream classes for reading and writing archives using the AR format.\npackage archivers.arj; // Provides stream classes for reading archives using the ARJ format.\npackage archivers.cpio; // Provides stream classes for reading and writing archives using the CPIO format.\npackage archivers.dump; // This package provides stream classes for reading archives using the Unix DUMP format.\npackage archivers.examples; // Contains example code that is not guaranteed to provide a stable API across releases of Commons Compress.\npackage archivers.jar; // Provides stream classes for reading and writing archives using the ZIP format with some extensions for the special case of JAR archives.\npackage archivers.sevenz; // Provides classes for reading and writing archives using the 7z format.\npackage archivers.tar; // Provides stream classes for reading and writing archives using the TAR format.\npackage archivers.zip; // Provides stream classes for reading and writing archives using the ZIP format.\nInterface ArchiveEntry; // Represents an entry of an archive.\nInterface ArchiveStreamProvider; // Creates Archive ArchiveInputStreams and ArchiveOutputStreams.\nInterface EntryStreamOffsets; // Provides information about ArchiveEntry stream offsets.\nClass ArchiveInputStream; // Archive input streams MUST override the InputStream.read(byte[], int, int) - or ArchiveInputStream.read() - method so that reading from the stream generates EOF for the end of data in each entry as well as at the end of the file proper.\nClass ArchiveOutputStream; // Archive output stream implementations are expected to override the OutputStream.write(byte[], int, int) method to improve performance.\nClass ArchiveStreamFactory; // Factory to create Archive[In|Out]putStreams from names or the first bytes of the InputStream.\nClass Lister; // Simple command line application that lists the contents of an archive.\nClass ArchiveException; // Archiver related Exception\nClass StreamingNotSupportedException; // Exception thrown by ArchiveStreamFactory if a format is requested/detected that doesn't support streaming.\n", "des": "Provides a unified API and factories for dealing with archives in different formats."}
{"index": 905, "repo": "commons-compress-1.23.0", "code": "package ar;\n\nClass ArArchiveEntry; // Represents an archive entry in the \"ar\" format.\nClass ArArchiveInputStream; // Implements the \"ar\" archive format as an input stream.\nClass ArArchiveOutputStream; // Implements the \"ar\" archive format as an output stream.\n", "des": "Provides stream classes for reading and writing archives using the AR format."}
{"index": 906, "repo": "commons-compress-1.23.0", "code": "package arj;\n\nClass ArjArchiveEntry; // An entry in an ARJ archive.\nClass ArjArchiveEntry.HostOs; // The known values for HostOs.\nClass ArjArchiveInputStream; // Implements the \"arj\" archive format as an InputStream.\n", "des": "Provides stream classes for reading archives using the ARJ format."}
{"index": 907, "repo": "commons-compress-1.23.0", "code": "package cpio;\n\nInterface CpioConstants; // All constants needed by CPIO.\nClass CpioArchiveEntry; // A cpio archive consists of a sequence of files.\nClass CpioArchiveInputStream; // CpioArchiveInputStream is a stream for reading cpio streams.\nClass CpioArchiveOutputStream; // CpioArchiveOutputStream is a stream for writing CPIO streams.\n", "des": "Provides stream classes for reading and writing archives using the CPIO format."}
{"index": 908, "repo": "commons-compress-1.23.0", "code": "package dump;\n\nClass DumpArchiveConstants; // Various constants associated with dump archives.\nClass DumpArchiveEntry; // This class represents an entry in a Dump archive.\nClass DumpArchiveInputStream; // The DumpArchiveInputStream reads a UNIX dump archive as an InputStream.\nClass DumpArchiveSummary; // This class represents identifying information about a Dump archive volume.\nEnum DumpArchiveConstants.COMPRESSION_TYPE; // The type of compression.\nEnum DumpArchiveConstants.SEGMENT_TYPE; // The type of tape segment.\nEnum DumpArchiveEntry.PERMISSION;\nEnum DumpArchiveEntry.TYPE;\nClass DumpArchiveException; // Dump Archive Exception\nClass InvalidFormatException; // Invalid Format Exception.\nClass ShortFileException; // Short File Exception.\nClass UnrecognizedFormatException; // Unrecognized Format Exception.\nClass UnsupportedCompressionAlgorithmException; // Unsupported compression algorithm.\n", "des": "This package provides stream classes for reading archives using the Unix DUMP format."}
{"index": 909, "repo": "commons-compress-1.23.0", "code": "package examples;\n\nInterface CloseableConsumer; // Callback that is informed about a closable resource that has been wrapped around a passed in stream or channel by Expander or Archiver when Expander or Archiver no longer need them.\nClass Archiver; // Provides a high level API for creating archives.\nClass Expander; // Provides a high level API for expanding archives.\n", "des": "Contains example code that is not guaranteed to provide a stable API across releases of Commons Compress."}
{"index": 910, "repo": "commons-compress-1.23.0", "code": "package jar;\n\nClass JarArchiveEntry;\nClass JarArchiveInputStream; // Implements an input stream that can read entries from jar files.\nClass JarArchiveOutputStream; // Subclass that adds a special extra field to the very first entry which allows the created archive to be used as an executable jar on Solaris.\n", "des": "Provides stream classes for reading and writing archives using the ZIP format with some extensions for the special case of JAR archives."}
{"index": 911, "repo": "commons-compress-1.23.0", "code": "package sevenz;\n\nClass CLI; // Usage: archive-name [list]\nClass SevenZArchiveEntry; // An entry in a 7z archive.\nClass SevenZFile; // Reads a 7z file, using SeekableByteChannel under the covers.\nClass SevenZFileOptions; // Collects options for reading 7z archives.\nClass SevenZFileOptions.Builder; // Mutable builder for the immutable SevenZFileOptions.\nClass SevenZMethodConfiguration; // Combines a SevenZMethod with configuration options for the method.\nClass SevenZOutputFile; // Writes a 7z file.\nEnum SevenZMethod; // The (partially) supported compression/encryption methods used in 7z archives.\n", "des": "Provides classes for reading and writing archives using the 7z format."}
{"index": 912, "repo": "commons-compress-1.23.0", "code": "package tar;\n\nInterface TarConstants; // This interface contains all the definitions used in the package.\nClass TarArchiveEntry; // This class represents an entry in a Tar archive.\nClass TarArchiveInputStream; // The TarInputStream reads a UNIX tar archive as an InputStream.\nClass TarArchiveOutputStream; // The TarOutputStream writes a UNIX tar archive as an OutputStream.\nClass TarArchiveSparseEntry; // This class represents a sparse entry in a Tar archive.\nClass TarArchiveStructSparse; // This class represents struct sparse in a Tar archive.\nClass TarFile; // Provides random access to UNIX archives.\nClass TarUtils; // This class provides static utility methods to work with byte streams.\n", "des": "Provides stream classes for reading and writing archives using the TAR format."}
{"index": 913, "repo": "commons-compress-1.23.0", "code": "package zip;\n\nInterface CharsetAccessor; // An interface added to allow access to the character set associated with an NioZipEncoding, without requiring a new method to be added to ZipEncoding.\nInterface ExtraFieldParsingBehavior; // Controls details of parsing ZIP extra fields.\nInterface UnixStat; // Constants from stat.h on Unix systems.\nInterface UnparseableExtraFieldBehavior; // Handles extra field data that doesn't follow the recommended pattern for extra fields with a two-byte key and a two-byte length.\nInterface ZipArchiveEntryPredicate; // A predicate to test if a #ZipArchiveEntry matches a criteria.\nInterface ZipArchiveEntryRequestSupplier; // Supplies ZipArchiveEntryRequest.\nInterface ZipExtraField; // General format of extra field data.\nClass AbstractUnicodeExtraField; // A common base class for Unicode extra information extra fields.\nClass AsiExtraField; // Adds Unix file permission and UID/GID fields as well as symbolic link handling.\nClass DefaultBackingStoreSupplier; // Implements ScatterGatherBackingStoreSupplier using a temporary folder.\nClass ExtraFieldUtils; // ZipExtraField related methods\nClass ExtraFieldUtils.UnparseableExtraField; // \"enum\" for the possible actions to take if the extra field cannot be parsed.\nClass GeneralPurposeBit; // Parser/encoder for the \"general purpose bit\" field in ZIP's local file and central directory headers.\nClass JarMarker; // If this extra field is added as the very first extra field of the archive, Solaris will consider it an executable jar file.\nClass ParallelScatterZipCreator; // Creates a ZIP in parallel by using multiple threadlocal ScatterZipOutputStream instances.\nClass PKWareExtraHeader; // Base class for all PKWare strong crypto extra headers.\nClass ResourceAlignmentExtraField; // An extra field who's sole purpose is to align and pad the local file header so that the entry's data starts at a certain position.\nClass ScatterStatistics; // Provides information about a scatter compression run.\nClass ScatterZipOutputStream; // A ZIP output stream that is optimized for multi-threaded scatter/gather construction of ZIP files.\nClass ScatterZipOutputStream.ZipEntryWriter;\nClass StreamCompressor; // Encapsulates a Deflater and crc calculator, handling multiple types of output streams.\n", "des": "Provides stream classes for reading and writing archives using the ZIP format."}
{"index": 914, "repo": "commons-compress-1.23.0", "code": "package changes;\n\nClass ChangeSet; // ChangeSet collects and performs changes to an archive.\nClass ChangeSetPerformer; // Performs ChangeSet operations on a stream.\nClass ChangeSetResults; // Stores the results of an performed ChangeSet operation.\n", "des": "EXPERIMENTAL support for changesets that are applied to archives."}
{"index": 915, "repo": "commons-compress-1.23.0", "code": "package compressors;\n\npackage compressors.brotli; // Provides stream class for decompressing streams using the Brotli algorithm based on Google's Brotli decoder.\npackage compressors.bzip2; // Provides stream classes for compressing and decompressing streams using the BZip2 algorithm.\npackage compressors.deflate; // Provides a stream classes that allow (de)compressing streams using the DEFLATE algorithm.\npackage compressors.deflate64; // Provides a stream that allows decompressing streams using the DEFLATE64(tm) algorithm.\npackage compressors.gzip; // Provides stream classes for compressing and decompressing streams using the GZip algorithm.\npackage compressors.lz4; // Provides stream classes for the LZ4 algorithm.\npackage compressors.lz77support; // Provides utility classes for LZ77 based algorithms.\npackage compressors.lzma; // Provides stream classes using the \"stand-alone\" LZMA algorithm.\npackage compressors.lzw; // Generic LZW implementation.\npackage compressors.pack200; // Provides stream classes for compressing and decompressing streams using the Pack200 algorithm used to compress Java archives.\npackage compressors.snappy; // Provides stream classes for the Snappy algorithm.\npackage compressors.xz; // Provides stream classes for compressing and decompressing streams using the XZ algorithm.\npackage compressors.z; // Provides stream classes for decompressing streams using the \"compress\" algorithm used to write .Z files.\npackage compressors.zstandard; // Provides stream class for (de)compressing streams using the Zstandard algorithm based on Zstandard JNI.\nInterface CompressorStreamProvider; // Creates Compressor CompressorInputStreams and CompressorOutputStreams.\nClass CompressorInputStream;\nClass CompressorOutputStream;\nClass CompressorStreamFactory; // Factory to create Compressor[In|Out]putStreams from names.\nClass FileNameUtil; // File name mapping code for the compression formats.\nClass CompressorException; // Compressor related exception\n", "des": "Provides a unified API and factories for dealing with compressed streams."}
{"index": 916, "repo": "commons-compress-1.23.0", "code": "package brotli;\n\nClass BrotliCompressorInputStream; // CompressorInputStream implementation to decode Brotli encoded stream.\nClass BrotliUtils; // Utility code for the Brotli compression format.\n", "des": "Provides stream class for decompressing streams using the Brotli algorithm based on Google's Brotli decoder."}
{"index": 917, "repo": "commons-compress-1.23.0", "code": "package bzip2;\n\nClass BZip2CompressorInputStream; // An input stream that decompresses from the BZip2 format to be read as any other stream.\nClass BZip2CompressorOutputStream; // An output stream that compresses into the BZip2 format into another stream.\nClass BZip2Utils; // Utility code for the BZip2 compression format.\n", "des": "Provides stream classes for compressing and decompressing streams using the BZip2 algorithm."}
{"index": 918, "repo": "commons-compress-1.23.0", "code": "package deflate;\n\nClass DeflateCompressorInputStream; // Deflate decompressor.\nClass DeflateCompressorOutputStream; // Deflate compressor.\nClass DeflateParameters; // Parameters for the Deflate compressor.\n", "des": "Provides a stream classes that allow (de)compressing streams using the DEFLATE algorithm."}
{"index": 919, "repo": "commons-compress-1.23.0", "code": "package deflate64;\n\nClass Deflate64CompressorInputStream; // Deflate64 decompressor.\n", "des": "Provides a stream that allows decompressing streams using the DEFLATE64(tm) algorithm."}
{"index": 920, "repo": "commons-compress-1.23.0", "code": "package gzip;\n\nClass GzipCompressorInputStream; // Input stream that decompresses .gz files.\nClass GzipCompressorOutputStream; // Compressed output stream using the gzip format.\nClass GzipParameters; // Parameters for the GZIP compressor.\nClass GzipUtils; // Utility code for the gzip compression format.\n", "des": "Provides stream classes for compressing and decompressing streams using the GZip algorithm."}
{"index": 921, "repo": "commons-compress-1.23.0", "code": "package lz4;\n\nClass BlockLZ4CompressorInputStream; // CompressorInputStream for the LZ4 block format.\nClass BlockLZ4CompressorOutputStream; // CompressorOutputStream for the LZ4 block format.\nClass FramedLZ4CompressorInputStream; // CompressorInputStream for the LZ4 frame format.\nClass FramedLZ4CompressorOutputStream; // CompressorOutputStream for the LZ4 frame format.\nClass FramedLZ4CompressorOutputStream.Parameters; // Parameters of the LZ4 frame format.\nClass XXHash32; // Implementation of the xxhash32 hash algorithm.\nEnum FramedLZ4CompressorOutputStream.BlockSize; // The block sizes supported by the format.\n", "des": "Provides stream classes for the LZ4 algorithm."}
{"index": 922, "repo": "commons-compress-1.23.0", "code": "package lz77support;\n\nInterface LZ77Compressor.Callback; // Callback invoked while the compressor processes data.\nClass AbstractLZ77CompressorInputStream; // Encapsulates code common to LZ77 decompressors.\nClass LZ77Compressor; // Helper class for compression algorithms that use the ideas of LZ77.\nClass LZ77Compressor.BackReference; // Represents a back-reference.\nClass LZ77Compressor.Block; // Base class representing blocks the compressor may emit.\nClass LZ77Compressor.EOD; // A simple \"we are done\" marker.\nClass LZ77Compressor.LiteralBlock; // Represents a literal block of data.\nClass Parameters; // Parameters of the compressor.\nClass Parameters.Builder; // Builder for Parameters instances.\nEnum LZ77Compressor.Block.BlockType; // Enumeration of the block types the compressor may emit.\n", "des": "Provides utility classes for LZ77 based algorithms."}
{"index": 923, "repo": "commons-compress-1.23.0", "code": "package lzma;\n\nClass LZMACompressorInputStream; // LZMA decompressor.\nClass LZMACompressorOutputStream; // LZMA compressor.\nClass LZMAUtils; // Utility code for the lzma compression format.\n", "des": "Provides stream classes using the \"stand-alone\" LZMA algorithm."}
{"index": 924, "repo": "commons-compress-1.23.0", "code": "package lzw;\n\nClass LZWInputStream; // Generic LZW implementation.\n", "des": "Generic LZW implementation."}
{"index": 925, "repo": "commons-compress-1.23.0", "code": "package pack200;\n\nClass Pack200CompressorInputStream; // An input stream that decompresses from the Pack200 format to be read as any other stream.\nClass Pack200CompressorOutputStream; // An output stream that compresses using the Pack200 format.\nClass Pack200Utils; // Utility methods for Pack200.\nEnum Pack200Strategy; // The different modes the Pack200 streams can use to wrap input and output.\n", "des": "Provides stream classes for compressing and decompressing streams using the Pack200 algorithm used to compress Java archives."}
{"index": 926, "repo": "commons-compress-1.23.0", "code": "package snappy;\n\nClass FramedSnappyCompressorInputStream; // CompressorInputStream for the framing Snappy format.\nClass FramedSnappyCompressorOutputStream; // CompressorOutputStream for the framing Snappy format.\nClass SnappyCompressorInputStream; // CompressorInputStream for the raw Snappy format.\nClass SnappyCompressorOutputStream; // CompressorOutputStream for the raw Snappy format.\nEnum FramedSnappyDialect; // Dialects of the framing format that FramedSnappyCompressorInputStream can deal with.\n", "des": "Provides stream classes for the Snappy algorithm."}
{"index": 927, "repo": "commons-compress-1.23.0", "code": "package xz;\n\nClass XZCompressorInputStream; // XZ decompressor.\nClass XZCompressorOutputStream; // XZ compressor.\nClass XZUtils; // Utility code for the xz compression format.\n", "des": "Provides stream classes for compressing and decompressing streams using the XZ algorithm."}
{"index": 928, "repo": "commons-compress-1.23.0", "code": "package z;\n\nClass ZCompressorInputStream; // Input stream that decompresses .Z files.\n", "des": "Provides stream classes for decompressing streams using the \"compress\" algorithm used to write .Z files."}
{"index": 929, "repo": "commons-compress-1.23.0", "code": "package zstandard;\n\nClass ZstdCompressorInputStream; // CompressorInputStream implementation to decode Zstandard encoded stream.\nClass ZstdCompressorOutputStream; // CompressorOutputStream implementation to create Zstandard encoded stream.\nClass ZstdUtils; // Utility code for the Zstandard compression format.\n", "des": "Provides stream class for (de)compressing streams using the Zstandard algorithm based on Zstandard JNI."}
{"index": 930, "repo": "commons-compress-1.23.0", "code": "package nls;\n\nClass Messages; // This class retrieves strings from a resource bundle and returns them, formatting them with MessageFormat when required.\n", "des": "Internal package."}
{"index": 931, "repo": "commons-compress-1.23.0", "code": "package pack200;\n\nInterface NewAttributeBands.AttributeLayoutElement; // An AttributeLayoutElement is a part of an attribute layout and has one or more bands associated with it, which transmit the AttributeElement data for successive Attributes of this type.\nClass Archive; // Archive is the main entry point to pack200 and represents a packed archive.\nClass AttributeDefinitionBands; // Attribute Definition bands define how any unknown attributes should be read by the decompressor.\nClass AttributeDefinitionBands.AttributeDefinition;\nClass BandSet; // Abstract superclass for a set of bands\nClass BcBands; // Bytecode bands (corresponds to the bc_bands set of bands in the pack200 specification)\nClass BHSDCodec; // A BHSD codec is a means of encoding integer values as a sequence of bytes or vice versa using a specified \"BHSD\" encoding mechanism.\nClass CanonicalCodecFamilies; // Sets of codecs that share characteristics.\nClass ClassBands; // Class bands (corresponds to the class_bands set of bands in the pack200 specification)\nClass Codec; // A Codec allows a sequence of bytes to be decoded into integer values (or vice versa).\nClass CodecEncoding; // CodecEncoding is used to get the right Codec for a given meta-encoding\nClass ConstantPoolEntry; // Abstract superclass for constant pool entries.\nClass CpBands; // Pack200 Constant Pool Bands\nClass CPClass; // Constant pool entry for a class.\nClass CPConstant<T extends CPConstant<T>>; // Abstract superclass for constant pool constant entries such as numbers or Strings.\nClass CPDouble; // Constant pool entry for a double.\nClass CPFloat; // Constant pool entry for a float.\nClass CPInt; // Constant pool entry for an int.\nClass CPLong; // Constant pool entry for a long.\nClass CPMethodOrField; // Constant pool entry for a method or field.\nClass CPNameAndType; // Constant pool entry for a name and type pair.\nClass CPSignature; // Constant pool entry for a signature.\nClass CPString; // Constant pool entry for a String.\nClass CPUTF8; // Constant pool entry for a UTF8 entry, used for storing long Strings.\nClass FileBands; // Bands containing information about files in the pack200 archive and the file contents for non-class-files.\n", "des": "Internal package."}
{"index": 932, "repo": "commons-compress-1.23.0", "code": "package unpack200;\n\npackage unpack200.bytecode; // Internal package.\nInterface IMatcher; // Interface for a class that can perform matching on flag values.\nClass Archive; // Archive is the main entry point to unpack200.\nClass AttrDefinitionBands; // Attribute definition bands are the set of bands used to define extra attributes transmitted in the archive.\nClass AttributeLayout; // AttributeLayout defines a layout that describes how an attribute will be transmitted.\nClass AttributeLayoutMap; // Stores a mapping from attribute names to their corresponding layout types.\nClass BandSet; // Abstract superclass for a set of bands\nClass BcBands; // Bytecode bands\nClass ClassBands; // Class Bands\nClass CpBands; // Constant Pool bands\nClass FileBands; // Parses the file band headers (not including the actual bits themselves).\nClass IcBands; // Inner Class Bands\nClass IcTuple; // An IcTuple is the set of information that describes an inner class.\nClass MetadataBandGroup; // A group of metadata bands, such as class_RVA_bands, method_AD_bands etc.\nClass NewAttributeBands; // Set of bands relating to a non-predefined attribute\nClass NewAttributeBands.Callable;\nClass Pack200UnpackerAdapter; // This class provides the binding between the standard Pack200 interface and the internal interface for (un)packing.\nClass Segment; // A Pack200 archive consists of one or more segments.\nClass SegmentConstantPool; // SegmentConstantPool manages the constant pool used for re-creating class files.\nClass SegmentConstantPoolArrayCache; // The SegmentConstantPool spends a lot of time searching through large arrays of Strings looking for matches.\nClass SegmentHeader; // SegmentHeader is the header band of a Segment\nClass SegmentOptions; // Stores the combinations of bit flags that can be used in the segment header options.\nClass SegmentUtils; // Utility class for unpack200\n", "des": "Internal package."}
{"index": 933, "repo": "commons-compress-1.23.0", "code": "package bytecode;\n\npackage bytecode.forms; // Internal package.\nClass AnnotationDefaultAttribute; // AnnotationDefault class file attribute\nClass AnnotationsAttribute; // Abstract superclass for Annotations attributes\nClass AnnotationsAttribute.Annotation; // Class to represent the annotation structure for class file attributes\nClass AnnotationsAttribute.ElementValue;\nClass Attribute; // Abstract superclass for class file attributes\nClass BCIRenumberedAttribute; // Abstract superclass for attributes that have some part encoded with a BCI renumbering\nClass ByteCode; // A bytecode class file entry.\nClass ClassConstantPool; // The Class constant pool\nClass ClassFile; // ClassFile is used to represent and write out Java class files.\nClass ClassFileEntry; // The abstract superclass for all types of class file entries.\nClass CodeAttribute;\nClass ConstantPoolEntry; // Abstract superclass for constant pool entries\nClass ConstantValueAttribute; // An Attribute representing a constant.\nClass CPClass; // Constant pool entry for a class\nClass CPConstant; // Abstract superclass for constant pool constant entries such as numbers or Strings\nClass CPConstantNumber; // Abstract superclass for constant pool entries that are numbers.\nClass CPDouble; // Double constant pool entry.\nClass CPField; // Field constant pool entry.\nClass CPFieldRef; // Field reference constant pool entry.\nClass CPFloat; // Float constant pool entry.\nClass CPInteger; // Integer constant pool entry.\nClass CPInterfaceMethodRef; // Interface method reference constant pool entry.\nClass CPLong; // Long constant pool entry.\nClass CPMember; // Superclass for member constant pool entries, such as fields or methods.\nClass CPMethod; // Method constant pool entry.\nClass CPMethodRef; // Method reference constant pool entry.\nClass CPNameAndType; // Name and Type pair constant pool entry.\nClass CPRef; // Abstract superclass for reference constant pool entries, such as a method or field reference.\nClass CPString; // String constant pool entry.\nClass CPUTF8; // UTF8 constant pool entry, used for storing long Strings.\nClass DeprecatedAttribute; // Deprecated class file attribute.\nClass EnclosingMethodAttribute; // Enclosing method class file attribute.\nClass ExceptionsAttribute; // Exceptions class file attribute\nClass ExceptionTableEntry; // An entry in an exception table.\nClass InnerClassesAttribute; // Inner classes class file attribute\nClass LineNumberTableAttribute; // Line number table\n", "des": "Internal package."}
{"index": 934, "repo": "commons-compress-1.23.0", "code": "package forms;\n\nClass ByteCodeForm;\nClass ByteForm; // This class implements the form for bytecodes which have single byte operands.\nClass ClassRefForm; // This class implements the byte code form for those bytecodes which have class references (and only class references).\nClass ClassSpecificReferenceForm; // Abstract superclass of all classes that have class-specific references to constant pool information.\nClass DoubleForm; // This class implements the byte code form for those bytecodes which have double references (and only double references).\nClass FieldRefForm; // This class implements the byte code form for those bytecodes which have field references (and only field references).\nClass FloatRefForm; // This class implements the byte code form for those bytecodes which have float references (and only float references).\nClass IincForm; // This class implements the byte code form for the iinc instruction.\nClass IMethodRefForm; // This class implements the byte code form for those bytecodes which have IMethod references (and only IMethod references).\nClass InitMethodReferenceForm; // Abstract superclass of those classes which look up init methods (these are class specific methods).\nClass IntRefForm; // This class implements the byte code form for those bytecodes which have int references (and only int references).\nClass LabelForm; // This class implements the byte code form for those bytecodes which have label references (and only label references).\nClass LocalForm; // This class implements the byte code form for those bytecodes which have float references (and only float references).\nClass LongForm; // This class implements the byte code form for those bytecodes which have long references (and only long references).\nClass LookupSwitchForm;\nClass MethodRefForm; // This class implements the byte code form for those bytecodes which have regular method references (and only regular method references).\nClass MultiANewArrayForm; // This class implements the byte code form for the multianewarray instruction.\nClass NarrowClassRefForm; // This class is used for representations of cldc and cldc_w.\nClass NewClassRefForm; // This class is an extension of the ClassRefForm.\nClass NewInitMethodRefForm; // This class is used to determine which init method should be called, based on the last class which was sent a constructor message.\n", "des": "Internal package."}
{"index": 935, "repo": "commons-compress-1.23.0", "code": "package jar;\n\nInterface Pack200.Packer; // The interface defining the API for converting a JAR file to an output stream in the Pack200 format.\nInterface Pack200.Unpacker; // The interface defining the API for converting a packed stream in the Pack200 format to a JAR file.\nClass Pack200; // Class factory for Pack200.Packer and Pack200.Unpacker.\n", "des": "Internal package."}
{"index": 936, "repo": "commons-compress-1.23.0", "code": "package parallel;\n\nInterface InputStreamSupplier; // Supplies input streams.\nInterface ScatterGatherBackingStore; // Store intermediate payload in a scatter-gather scenario.\nInterface ScatterGatherBackingStoreSupplier; // Supplies ScatterGatherBackingStore instances.\nClass FileBasedScatterGatherBackingStore; // ScatterGatherBackingStore that is backed by a path.\n", "des": "Provides common API classes for parallel compression features."}
{"index": 937, "repo": "commons-compress-1.23.0", "code": "package utils;\n\nInterface ByteUtils.ByteConsumer; // Used to consume bytes.\nInterface ByteUtils.ByteSupplier; // Used to supply bytes.\nInterface InputStreamStatistics; // This interface provides statistics on the current decompression stream.\nClass ArchiveUtils; // Generic Archive utilities\nClass BitInputStream; // Reads bits from an InputStream.\nClass BoundedArchiveInputStream; // NIO backed bounded input stream for reading a predefined amount of data from.\nClass BoundedInputStream; // A stream that limits reading from a wrapped stream to a given number of bytes.\nClass BoundedSeekableByteChannelInputStream; // InputStream that delegates requests to the underlying SeekableByteChannel, making sure that only bytes from a certain range can be read.\nClass ByteUtils; // Utility methods for reading and writing bytes.\nClass ByteUtils.InputStreamByteSupplier; // ByteUtils.ByteSupplier based on InputStream.\nClass ByteUtils.OutputStreamByteConsumer; // ByteUtils.ByteConsumer based on OutputStream.\nClass CharsetNames; // Character encoding names required of every implementation of the Java platform.\nClass Charsets; // Charsets required of every implementation of the Java platform.\nClass ChecksumCalculatingInputStream; // A stream that calculates the checksum of the data read.\nClass ChecksumVerifyingInputStream; // A stream that verifies the checksum of the data read once the stream is exhausted.\nClass CloseShieldFilterInputStream; // Re-implements FilterInputStream.close() to do nothing.\nClass CountingInputStream; // Input stream that tracks the number of bytes read.\nClass CountingOutputStream; // Stream that tracks the number of bytes read.\nClass CRC32VerifyingInputStream; // A stream that verifies the CRC of the data read once the stream is exhausted.\nClass ExactMath; // PRIVATE.\nClass FileNameUtils; // Generic file name utilities.\nClass FixedLengthBlockOutputStream; // This class supports writing to an OutputStream or WritableByteChannel in fixed length blocks.\nClass FlushShieldFilterOutputStream; // Re-implements FilterOutputStream.flush() to do nothing.\nClass IOUtils; // Utility functions\nClass Iterators; // Iterator utilities.\nClass Lists; // List utilities\nClass MultiReadOnlySeekableByteChannel; // Read-Only Implementation of SeekableByteChannel that concatenates a collection of other SeekableByteChannels.\nClass OsgiUtils; // Utilities for dealing with OSGi environments.\n", "des": "Provides utilities used internally by the compress library."}
{"index": 938, "repo": "spring-ws-3.0.10.RELEASE", "code": "package ws;\n\npackage ws.client; // Contains classes for client-side Spring-WS support, allowing for Spring-style Web service access.\npackage ws.config; // Provides an namespace handler for the Spring Web Services namespace.\npackage ws.context; // Contains the MessageContext interface and implementations thereof.\npackage ws.mime; // Provides MIME functionality for use the Spring Web Services framework.\npackage ws.pox; // Provides the Plain Old XML (POX) functionality of the Spring Web Services framework.\npackage ws.server; // Contains classes for server-side Spring-WS support.\npackage ws.soap; // Provides the SOAP functionality of the Spring Web Services framework.\npackage ws.support; // Provides general helper classes for Spring Web Services.\npackage ws.transport; // Contains the TransportRequest and TransportResponse interfaces.\npackage ws.wsdl; // Provides the WSDL functionality of the Spring Web Services framework.\nInterface FaultAwareWebServiceMessage; // Sub-interface of WebServiceMessage that can contain special Fault messages.\nInterface WebServiceMessage; // Represents a protocol-agnostic XML message.\nInterface WebServiceMessageFactory; // The WebServiceMessageFactory serves as a factory for WebServiceMessages.\nClass InvalidXmlException; // Exception thrown when a WebServiceMessageFactory cannot parse the XML passed on to WebServiceMessageFactory.createWebServiceMessage(java.io.InputStream).\nClass NoEndpointFoundException; // Exception thrown when an endpoint cannot be resolved for an incoming message request.\nClass WebServiceException; // Root of the hierarchy of Web Service exceptions.\nClass WebServiceMessageException; // Base class for all web service message exceptions.\n", "des": "Provides the core functionality of the Spring Web Services framework."}
{"index": 939, "repo": "spring-ws-3.0.10.RELEASE", "code": "package client;\n\npackage client.core; // Core package of the Spring-WS client-side support.\npackage client.support; // Classes supporting the org.springframework.ws.client.core package.\nClass WebServiceClientException; // Exception thrown whenever an error occurs on the client-side.\nClass WebServiceFaultException; // Thrown by SimpleFaultMessageResolver when the response message has a fault.\nClass WebServiceIOException; // Exception thrown whenever an I/O error occurs on the client-side.\nClass WebServiceTransformerException; // Exception thrown whenever a transformation error occurs on the client-side.\nClass WebServiceTransportException; // Exception thrown whenever a transport error occurs on the client-side.\n", "des": "Contains classes for client-side Spring-WS support, allowing for Spring-style Web service access."}
{"index": 940, "repo": "spring-ws-3.0.10.RELEASE", "code": "package core;\n\npackage core.support; // Convenient super class for application classes that need Web service access.\nInterface FaultMessageResolver; // Defines the interface for objects than can resolve fault WebServiceMessages.\nInterface SourceExtractor<T>; // Callback interface for extracting a result object from a Source instance.\nInterface WebServiceMessageCallback; // Generic callback interface for code that operates on a WebServiceMessage.\nInterface WebServiceMessageExtractor<T>; // Callback interface for extracting a result object from a WebServiceMessage instance.\nInterface WebServiceOperations; // Specifies a basic set of Web service operations.\nClass SimpleFaultMessageResolver; // Simple fault resolver that simply throws a WebServiceFaultException when a fault occurs.\nClass WebServiceTemplate; // The central class for client-side Web services. It provides a message-driven approach to sending and receiving WebServiceMessage instances.\n", "des": "Core package of the Spring-WS client-side support."}
{"index": 941, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass WebServiceGatewaySupport; // Convenient super class for application classes that need Web service access.\n", "des": "Convenient super class for application classes that need Web service access."}
{"index": 942, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\npackage support.destination; // Provides the DestinationProvider interface.\npackage support.interceptor; // Provides the ClientInterceptor interface, and validating interceptors.\nClass WebServiceAccessor; // Base class for WebServiceTemplate and other WS-accessing helpers.\n", "des": "Classes supporting the org.springframework.ws.client.core package."}
{"index": 943, "repo": "spring-ws-3.0.10.RELEASE", "code": "package destination;\n\nInterface DestinationProvider; // Strategy interface for providing a WebServiceTemplate destination URI at runtime.\nClass AbstractCachingDestinationProvider; // Abstract base class for DestinationProvider implementations that cache destination URI.\nClass Wsdl11DestinationProvider; // Implementation of the DestinationProvider that resolves a destination URI from a WSDL file.\nClass DestinationProvisionException; // Thrown by a DestinationProvider when it cannot provide a destination.\n", "des": "Provides the DestinationProvider interface."}
{"index": 944, "repo": "spring-ws-3.0.10.RELEASE", "code": "package interceptor;\n\nInterface ClientInterceptor; // Workflow interface that allows for customized client-side message interception.\nClass AbstractValidatingInterceptor; // Abstract base class for ClientInterceptor implementations that validate part of the message using a schema.\nClass ClientInterceptorAdapter; // Default implementation of the ClientInterceptor interface, for simplified implementation of pre-only/post-only interceptors.\nClass PayloadValidatingInterceptor; // Client-side interceptor that validates the contents of WebServiceMessages using a schema.\nClass WebServiceValidationException; // Exception thrown whenever a validation error occurs on the client-side.\n", "des": "Provides the ClientInterceptor interface, and validating interceptors."}
{"index": 945, "repo": "spring-ws-3.0.10.RELEASE", "code": "package config;\n\nClass WebServicesNamespaceHandler; // NamespaceHandler for the 'web-services' namespace.\n", "des": "Provides an namespace handler for the Spring Web Services namespace."}
{"index": 946, "repo": "spring-ws-3.0.10.RELEASE", "code": "package context;\n\nInterface MessageContext; // Context holder for message requests.\nClass AbstractMessageContext; // Abstract base class for MessageContext instances.\nClass DefaultMessageContext; // Default implementation of MessageContext.\n", "des": "Contains the MessageContext interface and implementations thereof."}
{"index": 947, "repo": "spring-ws-3.0.10.RELEASE", "code": "package mime;\n\nInterface Attachment; // Represents an attachment to a MimeMessage\nInterface MimeMessage; // Represents a Web service message with MIME attachments.\nClass AbstractMimeMessage; // Abstract implementation of the MimeMessage interface.\nClass AttachmentException; // Exception thrown when a MIME attachment could not be accessed.\n", "des": "Provides MIME functionality for use the Spring Web Services framework."}
{"index": 948, "repo": "spring-ws-3.0.10.RELEASE", "code": "package pox;\n\npackage pox.dom; // Contains an implementation of the POX interfaces that is based on DOM.\nInterface PoxMessage; // Defines the contract for Plain Old XML messages.\nClass PoxMessageException; // Specific subclass of WebServiceMessageException for Plain Old XML messages.\n", "des": "Provides the Plain Old XML (POX) functionality of the Spring Web Services framework."}
{"index": 949, "repo": "spring-ws-3.0.10.RELEASE", "code": "package dom;\n\nClass DomPoxMessage; // Implementation of the PoxMessage interface that is based on a DOM Document.\nClass DomPoxMessageFactory; // Implementation of the WebServiceMessageFactory interface that creates a DomPoxMessage.\nClass DomPoxMessageException; // Specific subclass of PoxMessageException for DOM Plain Old XML messages.\n", "des": "Contains an implementation of the POX interfaces that is based on DOM."}
{"index": 950, "repo": "spring-ws-3.0.10.RELEASE", "code": "package server;\n\npackage server.endpoint; // Provides standard endpoint, and EndpointAdapter implementations.\nInterface EndpointAdapter; // Interface that must be implemented for each endpoint type to handle a message request.\nInterface EndpointExceptionResolver; // Defines the interface for objects than can resolve exceptions thrown during endpoint execution.\nInterface EndpointInterceptor; // Workflow interface that allows for customized endpoint invocation chains.\nInterface EndpointMapping; // Defines a mapping between message requests and endpoint objects.\nInterface SmartEndpointInterceptor; // Extension of the EndpointInterceptor interface that adds a way to decide whether the interceptor should intercept a given message context.\nClass EndpointInvocationChain; // Endpoint invocation chain, consisting of an endpoint object and any preprocessing interceptors.\nClass MessageDispatcher; // Central dispatcher for use within Spring-WS, dispatching Web service messages to registered endpoints.\n", "des": "Contains classes for server-side Spring-WS support."}
{"index": 951, "repo": "spring-ws-3.0.10.RELEASE", "code": "package endpoint;\n\npackage endpoint.adapter; // Provides miscellaneous EndpointAdapter implementations.\npackage endpoint.annotation; // JDK 1.5+ annotations for Spring-WS endpoints.\npackage endpoint.interceptor; // Provides miscellaneous endpoints EndpointInterceptor implementations.\npackage endpoint.mapping; // Provides miscellaneous endpoints EndpointMapping implementations.\npackage endpoint.support; // Provides helper classes for EndpointAdapter, EndpointInteceptor, and EndpointMapping implementations.\nInterface MessageEndpoint; // Defines the basic contract for Web Services interested in the entire message payload.\nInterface PayloadEndpoint; // Defines the basic contract for Web Services interested in just the message payload.\nClass AbstractDom4jPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractDomPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractEndpointExceptionResolver; // Abstract base class for EndpointExceptionResolvers.\nClass AbstractJDomPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractLoggingInterceptor; // Abstract base class for EndpointInterceptor instances that log a part of a WebServiceMessage.\nClass AbstractMarshallingPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractSaxPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractStaxEventPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractStaxPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractStaxStreamPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractValidatingMarshallingPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractXomPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass MethodEndpoint; // Represents a bean method that will be invoked as part of an incoming Web service message.\n", "des": "Provides standard endpoint, and EndpointAdapter implementations."}
{"index": 952, "repo": "spring-ws-3.0.10.RELEASE", "code": "package adapter;\n\npackage adapter.method; // Provides the MethodArgumentResolver and MethodReturnValueHandler abstractions, and various implementations thereof.\nClass AbstractMethodEndpointAdapter; // Abstract base class for EndpointAdapter implementations that support MethodEndpoints.\nClass DefaultMethodEndpointAdapter; // Default extension of AbstractMethodEndpointAdapter with support for pluggable argument resolvers and return value handlers.\nClass GenericMarshallingMethodEndpointAdapter; // as of Spring Web Services 2.0, in favor of DefaultMethodEndpointAdapter and MarshallingPayloadMethodProcessor.\nClass MarshallingMethodEndpointAdapter; // as of Spring Web Services 2.0, in favor of DefaultMethodEndpointAdapter and MarshallingPayloadMethodProcessor.\nClass MessageEndpointAdapter; // Adapter to use a MessageEndpoint as the endpoint for a EndpointInvocationChain.\nClass MessageMethodEndpointAdapter; // as of Spring Web Services 2.0, in favor of DefaultMethodEndpointAdapter and MessageContextMethodArgumentResolver.\nClass PayloadEndpointAdapter; // Adapter to use a PayloadEndpoint as the endpoint for a EndpointInvocationChain.\nClass PayloadMethodEndpointAdapter; // as of Spring Web Services 2.0, in favor of DefaultMethodEndpointAdapter and SourcePayloadMethodProcessor.\nClass XPathParamAnnotationMethodEndpointAdapter; // as of Spring Web Services 2.0, in favor of DefaultMethodEndpointAdapter and XPathParamMethodArgumentResolver.\n", "des": "Provides miscellaneous EndpointAdapter implementations."}
{"index": 953, "repo": "spring-ws-3.0.10.RELEASE", "code": "package method;\n\npackage method.dom; // Provides DOM-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces.\npackage method.jaxb; // Provides JAXB2-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces.\nInterface MethodArgumentResolver; // Strategy interface used to resolve method parameters into arguments.\nInterface MethodReturnValueHandler; // Strategy interface used to handle method return values.\nClass AbstractPayloadMethodProcessor; // Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations based on RequestPayload and ResponsePayload annotations.\nClass AbstractPayloadSourceMethodProcessor; // Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations based on Sources.\nClass MarshallingPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that uses Marshaller and Unmarshaller to support marshalled objects.\nClass MessageContextMethodArgumentResolver; // Implementation of MethodArgumentResolver that supports MessageContext arguments.\nClass SourcePayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports Source objects.\nClass StaxPayloadMethodArgumentResolver; // Implementation of MethodArgumentResolver that supports StAX XMLStreamReader and XMLEventReader arguments.\nClass XPathParamMethodArgumentResolver; // Implementation of MethodArgumentResolver that supports the @XPathParam annotation.\n", "des": "Provides the MethodArgumentResolver and MethodReturnValueHandler abstractions, and various implementations thereof."}
{"index": 954, "repo": "spring-ws-3.0.10.RELEASE", "code": "package dom;\n\nClass Dom4jPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports dom4j elements.\nClass DomPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports W3C DOM elements.\nClass JDomPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports JDOM elements.\nClass XomPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports XOM elements.\n", "des": "Provides DOM-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces."}
{"index": 955, "repo": "spring-ws-3.0.10.RELEASE", "code": "package jaxb;\n\nClass AbstractJaxb2PayloadMethodProcessor; // Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations that use JAXB2.\nClass JaxbElementPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports JAXBElement objects.\nClass XmlRootElementPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports parameters annotated with @XmlRootElement or @XmlType, and return values annotated with @XmlRootElement.\n", "des": "Provides JAXB2-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces."}
{"index": 956, "repo": "spring-ws-3.0.10.RELEASE", "code": "package annotation;\n\nAnnotation Type Endpoint; // Indicates that an annotated class is an \"Endpoint\" (e.g.\nAnnotation Type Namespace; // Sets up a namespace to be used in an @Endpoint method, class, or package.\nAnnotation Type Namespaces; // Sets the namespaces to be used in an @Endpoint method, class, or package.\nAnnotation Type PayloadRoot; // Marks an endpoint method as the handler for an incoming request.\nAnnotation Type PayloadRoots; // Marks an endpoint method as containing multiple PayloadRoots.\nAnnotation Type RequestPayload; // Annotation which indicates that a method parameter should be bound to the request payload.\nAnnotation Type ResponsePayload; // Annotation which indicates that a method return value should be bound to the response payload.\nAnnotation Type XPathParam; // Indicates that a method parameter should be bound to an XPath expression.\n", "des": "JDK 1.5+ annotations for Spring-WS endpoints."}
{"index": 957, "repo": "spring-ws-3.0.10.RELEASE", "code": "package interceptor;\n\nClass AbstractValidatingInterceptor; // Abstract base class for EndpointInterceptor implementations that validate part of the message using a schema.\nClass DelegatingSmartEndpointInterceptor; // Implementation of the SmartEndpointInterceptor interface that delegates to a delegate EndpointInterceptor.\nClass EndpointInterceptorAdapter; // Default implementation of the EndpointInterceptor interface, for simplified implementation of pre-only/post-only interceptors.\nClass PayloadLoggingInterceptor; // Simple EndpointInterceptor that logs the payload of request and response messages.\nClass PayloadTransformingInterceptor; // Interceptor that transforms the payload of WebServiceMessages using XSLT stylesheet.\n", "des": "Provides miscellaneous endpoints EndpointInterceptor implementations."}
{"index": 958, "repo": "spring-ws-3.0.10.RELEASE", "code": "package mapping;\n\npackage mapping.jaxb; // Provides JAXB2-based EndpointMapping implementations.\nClass AbstractAnnotationMethodEndpointMapping<T>; // Abstract base for EndpointMapping implementations that map classes tagged with an annotation.\nClass AbstractEndpointMapping; // Abstract base class for EndpointMapping implementations.\nClass AbstractMapBasedEndpointMapping; // Abstract base class for endpoint mapping that are based on a Map.\nClass AbstractMethodEndpointMapping<T>; // Abstract base class for MethodEndpoint mappings.\nClass AbstractQNameEndpointMapping; // Abstract base class for EndpointMappings that resolve qualified names as registration keys.\nClass PayloadRootAnnotationMethodEndpointMapping; // Implementation of the EndpointMapping interface that uses the PayloadRoot annotation to map methods to request payload root elements.\nClass PayloadRootQNameEndpointMapping; // Implementation of the EndpointMapping interface to map from the qualified name of the request payload root element.\nClass SimpleMethodEndpointMapping; // Simple subclass of AbstractMethodEndpointMapping that maps from the local name of the request payload to methods.\nClass UriEndpointMapping; // Implementation of the EndpointMapping interface to map from the full request URI or request URI path to endpoint beans.\nClass XPathPayloadEndpointMapping; // Implementation of the EndpointMapping interface that maps to endpoint using an XPath expression.\n", "des": "Provides miscellaneous endpoints EndpointMapping implementations."}
{"index": 959, "repo": "spring-ws-3.0.10.RELEASE", "code": "package jaxb;\n\nClass XmlRootElementEndpointMapping; // Implementation of the EndpointMapping interface that uses the JAXB2 XmlRootElement annotation to map methods to request payload root elements.\n", "des": "Provides JAXB2-based EndpointMapping implementations."}
{"index": 960, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass NamespaceUtils; // Helper class for handling @Namespace annotations.\nClass PayloadRootUtils; // Helper class for determining the root qualified name of a Web Service payload.\n", "des": "Provides helper classes for EndpointAdapter, EndpointInteceptor, and EndpointMapping implementations."}
{"index": 961, "repo": "spring-ws-3.0.10.RELEASE", "code": "package soap;\n\npackage soap.addressing; // Provides WS-Addressing implementation classes.\npackage soap.axiom; // AXis Object Model (AXIOM) support for Spring-WS' soap message infrastructure.\npackage soap.client; // Contains classes for SOAP-specific client-side Spring-WS support.\npackage soap.saaj; // SOAP with Attachments API for Java (SAAJ) support for Spring-WS soap message infrastructure.\npackage soap.security; // Provides WS-Security implementation classes.\npackage soap.server; // Contains classes for SOAP-specific server-side Spring-WS support.\npackage soap.soap11; // Contains interfaces specific to SOAP 1.1.\npackage soap.soap12; // Contains interfaces specific to SOAP 1.2.\npackage soap.support; // Classes supporting the org.springframework.ws.soap package.\nInterface SoapBody; // Represents the Body element in a SOAP message.\nInterface SoapElement; // The base interface for all elements that are contained in a SOAP message.\nInterface SoapEnvelope; // Represents the Envelope element in a SOAP message.\nInterface SoapFault; // Represents the Fault element in the body of a SOAP message.\nInterface SoapFaultDetail; // Represents the detail element in a SOAP fault.\nInterface SoapFaultDetailElement; // Represents the content for an individual SOAP detail entry in a SOAP Message.\nInterface SoapHeader; // Represents the Header element in a SOAP message.\nInterface SoapHeaderElement; // Represents the contents of an individual SOAP header in the a SOAP message.\nInterface SoapMessage; // Represents an abstraction for SOAP messages, providing access to a SOAP Envelope.\nInterface SoapMessageFactory; // Sub-interface of WebServiceMessageFactory which contains SOAP-specific properties and methods.\nInterface SoapVersion; // Interface that defines a specific version of the SOAP specification.\nClass AbstractSoapMessage; // Abstract implementation of the SoapMessage interface.\nClass SoapBodyException; // Exception thrown when a SOAP body could not be accessed.\nClass SoapElementException; // Exception thrown when a SOAP element could not be accessed.\nClass SoapEnvelopeException; // Exception thrown when a SOAP body could not be accessed.\nClass SoapFaultException; // Exception thrown when a SOAP fault could not be accessed.\n", "des": "Provides the SOAP functionality of the Spring Web Services framework."}
{"index": 962, "repo": "spring-ws-3.0.10.RELEASE", "code": "package addressing;\n\npackage addressing.core; // Core package for WS-Addressing support.\npackage addressing.messageid; // Contains various strategies for generating WS-Addressing MessageIDs.\npackage addressing.server; // Contains servers-side WS-Addressing support, in the form of EndpointMappings.\npackage addressing.version; // Contains abstractions over various versions of the WS-Addressing specification.\nClass AddressingException; // Exception thrown in case on WS-Addressing errors.\n", "des": "Provides WS-Addressing implementation classes."}
{"index": 963, "repo": "spring-ws-3.0.10.RELEASE", "code": "package core;\n\nClass EndpointReference; // Represents an Endpoint Reference, as defined in the WS-Addressing specification.\nClass MessageAddressingProperties; // Represents a set of Message Addressing Properties, as defined in the WS-Addressing specification.\n", "des": "Core package for WS-Addressing support."}
{"index": 964, "repo": "spring-ws-3.0.10.RELEASE", "code": "package messageid;\n\nInterface MessageIdStrategy; // Strategy interface that encapsulates the creation and validation of WS-Addressing MessageIDs.\nClass UuidMessageIdStrategy; // Implementation of the MessageIdStrategy interface that uses a UUID to generate a Message Id.\n", "des": "Contains various strategies for generating WS-Addressing MessageIDs."}
{"index": 965, "repo": "spring-ws-3.0.10.RELEASE", "code": "package server;\n\nClass AbstractActionEndpointMapping; // Abstract base class for WS-Addressing Action-mapped EndpointMapping implementations.\nClass AbstractActionMethodEndpointMapping; // Abstract base class for WS-Addressing Action-mapped EndpointMapping implementations that map to MethodEndpoints.\nClass AbstractAddressingEndpointMapping; // Abstract base class for EndpointMapping implementations that handle WS-Addressing.\nClass AnnotationActionEndpointMapping; // Implementation of the EndpointMapping interface that uses the @Action annotation to map methods to a WS-Addressing Action header.\nClass SimpleActionEndpointMapping; // Implementation of the EndpointMapping interface to map from WS-Addressing Action Message Addressing Property to endpoint beans.\n", "des": "Contains servers-side WS-Addressing support, in the form of EndpointMappings."}
{"index": 966, "repo": "spring-ws-3.0.10.RELEASE", "code": "package version;\n\nInterface AddressingVersion; // Defines the contract for a specific version of the WS-Addressing specification.\nClass AbstractAddressingVersion; // Abstract base class for AddressingVersion implementations.\nClass Addressing10; // Implements WS-Addressing 1.0 (May 2006).\nClass Addressing200408; // Implements the August 2004 edition of the WS-Addressing specification.\n", "des": "Contains abstractions over various versions of the WS-Addressing specification."}
{"index": 967, "repo": "spring-ws-3.0.10.RELEASE", "code": "package axiom;\n\npackage axiom.support; // Support classes for working with the AXis Object Model (AXIOM).\nClass AxiomSoapMessage; // AXIOM-specific implementation of the SoapMessage interface.\nClass AxiomSoapMessageFactory; // Axiom-specific implementation of the WebServiceMessageFactory interface.\nClass AxiomAttachmentException;\nClass AxiomSoapBodyException;\nClass AxiomSoapElementException;\nClass AxiomSoapEnvelopeException;\nClass AxiomSoapFaultException;\nClass AxiomSoapHeaderException;\nClass AxiomSoapMessageCreationException;\nClass AxiomSoapMessageException;\n", "des": "AXis Object Model (AXIOM) support for Spring-WS' soap message infrastructure."}
{"index": 968, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass AxiomUtils; // Collection of generic utility methods to work with Axiom.\n", "des": "Support classes for working with the AXis Object Model (AXIOM)."}
{"index": 969, "repo": "spring-ws-3.0.10.RELEASE", "code": "package client;\n\npackage client.core; // Contains core classes for SOAP-specific client-side Spring-WS support.\nClass SoapFaultClientException; // Thrown by SoapFaultMessageResolver when the response message has a fault.\n", "des": "Contains classes for SOAP-specific client-side Spring-WS support."}
{"index": 970, "repo": "spring-ws-3.0.10.RELEASE", "code": "package core;\n\nClass SoapActionCallback; // WebServiceMessageCallback implementation that sets the SOAP Action header on the message.\nClass SoapFaultMessageResolver; // Simple fault resolver that simply throws a SoapFaultClientException when a fault occurs.\n", "des": "Contains core classes for SOAP-specific client-side Spring-WS support."}
{"index": 971, "repo": "spring-ws-3.0.10.RELEASE", "code": "package saaj;\n\npackage saaj.support; // Support classes for working with the SOAP with Attachments API for Java (SAAJ).\nClass SaajSoapMessage; // SAAJ-specific implementation of the SoapMessage interface.\nClass SaajSoapMessageFactory; // SAAJ-specific implementation of the WebServiceMessageFactory.\nClass SaajAttachmentException;\nClass SaajSoapBodyException;\nClass SaajSoapElementException;\nClass SaajSoapEnvelopeException;\nClass SaajSoapFaultException;\nClass SaajSoapHeaderException;\nClass SaajSoapMessageCreationException;\nClass SaajSoapMessageException;\n", "des": "SOAP with Attachments API for Java (SAAJ) support for Spring-WS soap message infrastructure."}
{"index": 972, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass SaajContentHandler; // SAX ContentHandler that transforms callback calls to the creation of SAAJ Nodes and SOAPElements.\nClass SaajUtils; // Collection of generic utility methods to work with SAAJ.\nClass SaajXmlReader; // SAX XMLReader that reads from a SAAJ Node.\n", "des": "Support classes for working with the SOAP with Attachments API for Java (SAAJ)."}
{"index": 973, "repo": "spring-ws-3.0.10.RELEASE", "code": "package security;\n\npackage security.callback; // Contains generic CallbackHandler implementations.\npackage security.support; // Contains support classes for handling WS-Security messages.\npackage security.wss4j2; // Contains classes for using the Apache WSS4J 2.0 WS-Security implementation within Spring-WS.\npackage security.xwss; // Contains classes for using the XML and WebServices Security WS-Security implementation within Spring-WS.\nClass AbstractWsSecurityInterceptor; // Interceptor base class for interceptors that handle WS-Security.\nClass WsSecurityException; // Exception indicating that something went wrong during WS-Security executions.\nClass WsSecurityFaultException; // Exception indicating that a WS-Security executions should result in a SOAP Fault.\nClass WsSecuritySecurementException; // Exception indicating that something went wrong during the securement of a message.\nClass WsSecurityValidationException; // Exception indicating that something went wrong during the validation of a message.\n", "des": "Provides WS-Security implementation classes."}
{"index": 974, "repo": "spring-ws-3.0.10.RELEASE", "code": "package callback;\n\nClass AbstractCallbackHandler; // Abstract implementation of a CallbackHandler.\nClass CallbackHandlerChain; // Represents a chain of CallbackHandlers.\nClass CleanupCallback; // Underlying security services instantiate and pass a CleanupCallback to the handle method of a CallbackHandler to clean up security state.\n", "des": "Contains generic CallbackHandler implementations."}
{"index": 975, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass KeyManagersFactoryBean; // Spring factory bean for an array of KeyManagers.\nClass KeyStoreFactoryBean; // Spring factory bean for a KeyStore.\nClass KeyStoreUtils; // Generic utility methods for dealing with KeyStore objects.\nClass SpringSecurityUtils; // Generic utility methods for Spring Security\nClass TrustManagersFactoryBean; // Spring factory bean for an array of TrustManagers.\n", "des": "Contains support classes for handling WS-Security messages."}
{"index": 976, "repo": "spring-ws-3.0.10.RELEASE", "code": "package wss4j2;\n\npackage wss4j2.callback; // Contains CallbackHandler implementations for WSS4J 2.0.\npackage wss4j2.support; // Contains support classes for working with WSS4J 2.0.\nClass Wss4jSecurityInterceptor; // A WS-Security endpoint interceptor based on Apache's WSS4J.\nClass Wss4jSecurityFaultException; // WSS4J-specific version of the WsSecurityFaultException.\nClass Wss4jSecuritySecurementException; // WSS4J-specific version of the WsSecuritySecurementException.\nClass Wss4jSecurityValidationException; // WSS4J-specific version of the WsSecurityValidationException.\n", "des": "Contains classes for using the Apache WSS4J 2.0 WS-Security implementation within Spring-WS."}
{"index": 977, "repo": "spring-ws-3.0.10.RELEASE", "code": "package callback;\n\nClass AbstractWsPasswordCallbackHandler; // Abstract base class for CallbackHandler implementations that handle WSPasswordCallback callbacks.\nClass KeyStoreCallbackHandler; // Callback handler that uses Java Security KeyStores to handle cryptographic callbacks.\nClass SimplePasswordValidationCallbackHandler; // Simple callback handler that validates passwords against a in-memory Properties object.\nClass SpringSecurityPasswordValidationCallbackHandler; // Callback handler that validates a plain text or digest password using an Spring Security UserDetailsService.\nClass UsernameTokenPrincipalCallback; // Underlying security services instantiate and pass a UsernameTokenPrincipalCallback to the handle method of a CallbackHandler to pass a security WSUsernameTokenPrincipal.\n", "des": "Contains CallbackHandler implementations for WSS4J 2.0."}
{"index": 978, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass CryptoFactoryBean; // Spring factory bean for a WSS4J Crypto.\n", "des": "Contains support classes for working with WSS4J 2.0."}
{"index": 979, "repo": "spring-ws-3.0.10.RELEASE", "code": "package xwss;\n\npackage xwss.callback; // Contains CallbackHandler implementations for XWSS.\nClass XwsSecurityInterceptor; // WS-Security endpoint interceptor that is based on Sun's XML and Web Services Security package (XWSS).\nClass XwsSecurityFaultException; // XWSS-specific version of the WsSecurityFaultException.\nClass XwsSecuritySecurementException; // XWSS-specific version of the WsSecuritySecurementException.\nClass XwsSecurityValidationException; // XWSS-specific version of the WsSecurityValidationException.\n", "des": "Contains classes for using the XML and WebServices Security WS-Security implementation within Spring-WS."}
{"index": 980, "repo": "spring-ws-3.0.10.RELEASE", "code": "package callback;\n\npackage callback.jaas; // Contains CallbackHandler implementations for XWSS that use the Java Authentication and Authorization Service (JAAS).\nClass CryptographyCallbackHandler; // Default callback handler that handles cryptographic callback.\nClass DefaultTimestampValidator; // A default implementation of a TimestampValidationCallback.TimestampValidator.\nClass KeyStoreCallbackHandler; // Callback handler that uses Java Security KeyStores to handle cryptographic callbacks.\nClass MockValidationCallbackHandler; // Mock implementation of of callback handler that accepts all password and certificate validation callbacks.\nClass SimplePasswordValidationCallbackHandler; // Simple callback handler that validates passwords agains a in-memory Properties object.\nClass SimpleUsernamePasswordCallbackHandler; // Simple callback handler that supplies a username and password to a username token at runtime.\nClass SpringCertificateValidationCallbackHandler; // Callback handler that validates a certificate using an Spring Security AuthenticationManager.\nClass SpringDigestPasswordValidationCallbackHandler; // Callback handler that validates a password digest using an Spring Security UserDetailsService.\nClass SpringPlainTextPasswordValidationCallbackHandler; // Callback handler that validates a certificate uses an Spring Security AuthenticationManager.\nClass SpringUsernamePasswordCallbackHandler; // Callback handler that adds username/password information to a mesage using an Spring Security SecurityContext.\nClass XwssCallbackHandlerChain; // Represents a chain of CallbackHandlers.\n", "des": "Contains CallbackHandler implementations for XWSS."}
{"index": 981, "repo": "spring-ws-3.0.10.RELEASE", "code": "package jaas;\n\nClass AbstractJaasValidationCallbackHandler; // Abstract base class for integrating with JAAS.\nClass JaasCertificateValidationCallbackHandler; // Provides basic support for integrating with JAAS and certificates.\nClass JaasPlainTextPasswordValidationCallbackHandler; // Provides basic support for integrating with JAAS and plain text passwords.\n", "des": "Contains CallbackHandler implementations for XWSS that use the Java Authentication and Authorization Service (JAAS)."}
{"index": 982, "repo": "spring-ws-3.0.10.RELEASE", "code": "package server;\n\npackage server.endpoint; // Provides EndpointAdapter, EndpointMapping, and EndpointExceptionResolver implementations for SOAP.\nInterface SmartSoapEndpointInterceptor; // SOAP-specific extension of the SmartEndpointInterceptor interface.\nInterface SoapEndpointInterceptor; // SOAP-specific extension of the EndpointInterceptor interface.\nInterface SoapEndpointMapping; // SOAP-specific sub-interface of the EndpointMapping.\nClass SoapEndpointInvocationChain; // SOAP-specific subclass of the EndpointInvocationChain.\nClass SoapMessageDispatcher; // SOAP-specific subclass of the MessageDispatcher.\n", "des": "Contains classes for SOAP-specific server-side Spring-WS support."}
{"index": 983, "repo": "spring-ws-3.0.10.RELEASE", "code": "package endpoint;\n\npackage endpoint.annotation; // JDK 1.5+ annotations for Spring-WS SOAP endpoints.\npackage endpoint.interceptor; // Provides miscellaneous endpoints EndpointInterceptor implementations for SOAP purposes.\npackage endpoint.mapping; // Provides miscellaneous endpoints EndpointMapping implementations for SOAP purposes.\nClass AbstractFaultCreatingValidatingMarshallingPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractSoapFaultDefinitionExceptionResolver; // Abstract base class for SOAP-based EndpointExceptionResolver implementations that depend on SoapFaultDefinition.\nClass SimpleSoapExceptionResolver; // Simple, SOAP-specific EndpointExceptionResolver implementation that stores the exception's message as the fault string.\nClass SoapFaultAnnotationExceptionResolver; // Implementation of the EndpointExceptionResolver interface that uses the SoapFault annotation to map exceptions to SOAP Faults.\nClass SoapFaultDefinition; // Defines properties for a SOAP Fault.\nClass SoapFaultDefinitionEditor; // PropertyEditor for SoapFaultDefinition objects.\nClass SoapFaultMappingExceptionResolver; // Exception resolver that allows for mapping exception class names to SOAP Faults.\n", "des": "Provides EndpointAdapter, EndpointMapping, and EndpointExceptionResolver implementations for SOAP."}
{"index": 984, "repo": "spring-ws-3.0.10.RELEASE", "code": "package annotation;\n\nEnum FaultCode; // Enumeration that represents the standard SOAP Fault codes for use with the JDK 1.5+ SoapFault annotation.\nAnnotation Type SoapAction; // Marks an endpoint method as the handler for an incoming request.\nAnnotation Type SoapActions; // Marks an endpoint method as containing multiple SoapActions.\nAnnotation Type SoapFault; // Marks an exception class with the fault elements that should be returned whenever this exception is thrown.\nAnnotation Type SoapHeader; // Marks an endpoint method parameter to be resolved as a single or a list of SoapHeaderElement.\n", "des": "JDK 1.5+ annotations for Spring-WS SOAP endpoints."}
{"index": 985, "repo": "spring-ws-3.0.10.RELEASE", "code": "package interceptor;\n\nClass AbstractFaultCreatingValidatingInterceptor; // Subclass of AbstractValidatingInterceptor that creates a SOAP Fault whenever the request message cannot be validated.\nClass DelegatingSmartSoapEndpointInterceptor; // Implementation of the SmartSoapEndpointInterceptor interface that delegates to a delegate SoapEndpointInterceptor.\nClass PayloadRootSmartSoapEndpointInterceptor; // Implementation of the SmartSoapEndpointInterceptor interface that only intercepts requests that have a specified namespace URI or local part (or both) as payload root.\nClass PayloadValidatingInterceptor; // Interceptor that validates the contents of WebServiceMessages using a schema.\nClass SoapActionSmartEndpointInterceptor; // Implementation of the SmartEndpointInterceptor interface that only intercepts requests that have a specified soap action.\nClass SoapEnvelopeLoggingInterceptor; // SOAP-specific EndpointInterceptor that logs the complete request and response envelope of SoapMessage messages.\n", "des": "Provides miscellaneous endpoints EndpointInterceptor implementations for SOAP purposes."}
{"index": 986, "repo": "spring-ws-3.0.10.RELEASE", "code": "package mapping;\n\nClass DelegatingSoapEndpointMapping; // EndpointMapping implement that adds SOAP actors or roles to a delegate endpoint.\nClass SoapActionAnnotationMethodEndpointMapping; // Implementation of the EndpointMapping interface that uses the SoapAction annotation to map methods to the request SOAPAction header.\nClass SoapActionEndpointMapping; // Implementation of the EndpointMapping interface to map from SOAPAction headers to endpoint beans.\n", "des": "Provides miscellaneous endpoints EndpointMapping implementations for SOAP purposes."}
{"index": 987, "repo": "spring-ws-3.0.10.RELEASE", "code": "package soap11;\n\nInterface Soap11Body; // Subinterface of SoapBody that exposes SOAP 1.1 functionality.\nInterface Soap11Fault; // Subinterface of SoapFault that exposes SOAP 1.1 functionality.\nInterface Soap11Header; // Subinterface of SoapHeader that exposes SOAP 1.1 functionality.\n", "des": "Contains interfaces specific to SOAP 1.1."}
{"index": 988, "repo": "spring-ws-3.0.10.RELEASE", "code": "package soap12;\n\nInterface Soap12Body; // Subinterface of SoapBody that exposes SOAP 1.2 functionality.\nInterface Soap12Fault; // Subinterface of SoapFault that exposes SOAP 1.2 functionality.\nInterface Soap12Header; // Subinterface of SoapHeader that exposes SOAP 1.2 functionality.\n", "des": "Contains interfaces specific to SOAP 1.2."}
{"index": 989, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass SoapUtils; // Contains various utility methods for handling SOAP messages.\n", "des": "Classes supporting the org.springframework.ws.soap package."}
{"index": 990, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass DefaultStrategiesHelper; // Helper class for for loading default implementations of an interface.\nClass MarshallingUtils; // Helper class for endpoints and endpoint mappings that use marshalling.\nClass WebUtils; // Miscellaneous utilities for web applications.\n", "des": "Provides general helper classes for Spring Web Services."}
{"index": 991, "repo": "spring-ws-3.0.10.RELEASE", "code": "package client;\n\nInterface RequestMatcher; // Defines the contract for matching requests to expectations.\nInterface RequestXPathExpectations; // Allows for setting up expectations on XPath expressions.\nInterface ResponseActions; // Allows for setting up responses and additional expectations.\nInterface ResponseCreator; // Allows for creating up responses.\nClass MockWebServiceMessageSender; // Mock implementation of WebServiceMessageSender.\nClass MockWebServiceServer; // Main entry point for client-side Web service testing.\nClass RequestMatchers; // Factory methods for RequestMatcher classes.\nClass ResponseCreators; // Factory methods for ResponseCreator classes.\n", "des": "Provides a testing framework for client-side Web service testing."}
{"index": 992, "repo": "spring-ws-3.0.10.RELEASE", "code": "package server;\n\nInterface RequestCreator; // Creates request messages.\nInterface ResponseActions; // Allows for setting up expectation about response messages.\nInterface ResponseMatcher; // Defines the contract for matching response messages to expectations.\nInterface ResponseXPathExpectations; // Allows for setting up expectations on XPath expressions.\nClass MockWebServiceClient; // Main entry point for server-side Web service testing.\nClass RequestCreators; // Factory methods for RequestCreator classes.\nClass ResponseMatchers; // Factory methods for ResponseMatcher classes.\n", "des": "Provides a testing framework for server-side Web service testing."}
{"index": 993, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\npackage support.creator; // Provides the generic WebServiceMessageCreator interface, and implementations.\npackage support.matcher; // Provides the generic WebServiceMessageMatcher interface, and implementations.\nClass AssertionErrors; // JUnit independent assertion class.\nClass MockStrategiesHelper; // Helper class for for loading default implementations of an interface.\nClass SourceAssertionError; // Subclass of AssertionError that also contains a Source for more context.\n", "des": "Support classes for the testing framework, used by the classes in the org.springframework.ws.test.client and org.springframework.ws.test.server packages."}
{"index": 994, "repo": "spring-ws-3.0.10.RELEASE", "code": "package creator;\n\nInterface WebServiceMessageCreator; // Defines the general contract for creating messages used in test scenarios.\nClass AbstractMessageCreator; // Abstract base class for the WebServiceMessageCreator interface.\nClass PayloadMessageCreator; // Implementation of WebServiceMessageCreator that creates a request based on a Source.\nClass SoapEnvelopeMessageCreator; // Implementation of WebServiceMessageCreator that creates a request based on a SOAP envelope Source.\n", "des": "Provides the generic WebServiceMessageCreator interface, and implementations."}
{"index": 995, "repo": "spring-ws-3.0.10.RELEASE", "code": "package matcher;\n\nInterface WebServiceMessageMatcher; // Defines the general contract for matching messages to expectations.\nClass AbstractSoapMessageMatcher; // Abstract base class for SOAP-specific WebServiceMessageMatcher implementations.\nClass DiffMatcher; // Implementation of WebServiceMessageMatcher based on XMLUnit's Diff.\nClass PayloadDiffMatcher; // Matches Source payloads.\nClass SchemaValidatingMatcher; // Uses the XmlValidator to validate request payload.\nClass SoapEnvelopeDiffMatcher; // Matches Source SOAP envelopes.\nClass SoapHeaderMatcher; // Matches SOAP headers.\nClass XPathExpectationsHelper; // Helper class for dealing with XPath expectations.\n", "des": "Provides the generic WebServiceMessageMatcher interface, and implementations."}
{"index": 996, "repo": "spring-ws-3.0.10.RELEASE", "code": "package transport;\n\npackage transport.context; // Abstraction for determining the current TransportInputStream and TransportOutputStream.\npackage transport.http; // Package providing support for handling messages via HTTP.\npackage transport.jms; // Package providing support for handling messages via JMS.\npackage transport.mail; // Package providing support for handling messages via email.\npackage transport.support; // Classes supporting the org.springframework.ws.transport package.\npackage transport.xmpp; // Package providing support for handling messages via xmpp.\nInterface EndpointAwareWebServiceConnection; // Sub-interface of WebServiceConnection that is aware of any server-side situations where an endpoint is not found.\nInterface FaultAwareWebServiceConnection; // Sub-interface of WebServiceConnection that is aware of any Fault messages received.\nInterface HeadersAwareReceiverWebServiceConnection; // Interface to define access to header information for certain WebServiceConnection implementations.\nInterface HeadersAwareSenderWebServiceConnection;\nInterface TransportConstants; // Declares useful transport constants.\nInterface WebServiceConnection; // Represents a point-to-point connection that a client can use for sending WebServiceMessage objects directly to a remote party.\nInterface WebServiceMessageReceiver; // Defines the methods for classes capable of receiving WebServiceMessage instances coming in on a transport.\nInterface WebServiceMessageSender; // Defines the methods for classes capable of sending and receiving WebServiceMessage instances across a transport.\nClass AbstractReceiverConnection; // Abstract base class for WebServiceConnection implementations used for receiving requests.\nClass AbstractSenderConnection; // Abstract base class for WebServiceConnection implementations used for sending requests.\nClass AbstractWebServiceConnection; // Abstract base class for WebServiceConnection implementations.\nClass TransportInputStream; // A TransportInputStream is an input stream with MIME input headers.\nClass TransportOutputStream; // A TransportOutputStream is an output stream with MIME input headers.\nClass TransportException; // Abstract base class for exceptions related to the transport layer.\n", "des": "Contains the TransportRequest and TransportResponse interfaces."}
{"index": 997, "repo": "spring-ws-3.0.10.RELEASE", "code": "package context;\n\nInterface TransportContext; // Strategy interface for determining the current WebServiceConnection.\nClass DefaultTransportContext; // Default implementation of the TransportContext interface.\nClass TransportContextHolder; // Simple holder class that associates a TransportContext instance with the current thread.\n", "des": "Abstraction for determining the current TransportInputStream and TransportOutputStream."}
{"index": 998, "repo": "spring-ws-3.0.10.RELEASE", "code": "package http;\n\nInterface HttpTransportConstants; // Declares HTTP-specific transport constants.\nClass AbstractHttpSenderConnection; // Abstract base class for WebServiceConnection implementations that send request over HTTP.\nClass AbstractHttpWebServiceMessageSender; // Abstract base class for WebServiceMessageSender implementations that use HTTP.\nClass ClientHttpRequestConnection; // Implementation of the WebServiceConnection interface that is based on the Spring 3 ClientHttpRequest and ClientHttpResponse.\nClass ClientHttpRequestMessageSender; // WebServiceMessageSender implementation based on the ClientHttpRequestFactory introduced in Spring 3.\nClass CommonsHttpConnection; // In favor of HttpComponentsConnection\nClass CommonsHttpMessageSender; // In favor of HttpComponentsMessageSender\nClass HttpComponentsConnection; // Implementation of WebServiceConnection that is based on Apache HttpClient.\nClass HttpComponentsMessageSender; // WebServiceMessageSender implementation that uses Apache HttpClient to execute POST requests.\nClass HttpComponentsMessageSender.RemoveSoapHeadersInterceptor; // HttpClient HttpRequestInterceptor implementation that removes Content-Length and Transfer-Encoding headers from the request.\nClass HttpExchangeConnection; // Implementation of WebServiceConnection that is based on the Java 6 HttpServer HttpExchange.\nClass HttpServletConnection; // Implementation of WebServiceConnection that is based on the Servlet API.\nClass HttpsUrlConnectionMessageSender; // Extension of HttpUrlConnectionMessageSender that adds support for (self-signed) HTTPS certificates.\nClass HttpUrlConnection; // Implementation of the WebServiceConnection interface that uses a HttpURLConnection.\nClass HttpUrlConnectionMessageSender; // WebServiceMessageSender implementation that uses standard J2SE facilities to execute POST requests, without support for HTTP authentication or advanced configuration options.\nClass LocationTransformerObjectSupport; // Abstract base class for WsdlDefinitionHandlerAdapter and XsdSchemaHandlerAdapter that transforms XSD and WSDL location attributes.\nClass MessageDispatcherServlet; // Servlet for simplified dispatching of Web service messages.\nClass WebServiceMessageReceiverHandlerAdapter; // Adapter to use the WebServiceMessageReceiver interface with the generic DispatcherServlet.\nClass WebServiceMessageReceiverHttpHandler; // HttpHandler that can be used to handle incoming HttpExchange service requests.\nClass WsdlDefinitionHandlerAdapter; // Adapter to use the WsdlDefinition interface with the generic DispatcherServlet.\nClass WsdlDefinitionHttpHandler;\nClass XsdSchemaHandlerAdapter; // Adapter to use the XsdSchema interface with the generic DispatcherServlet.\n", "des": "Package providing support for handling messages via HTTP."}
{"index": 999, "repo": "spring-ws-3.0.10.RELEASE", "code": "package jms;\n\npackage jms.support; // Classes supporting the org.springframework.ws.transport.jms package.\nInterface JmsTransportConstants; // Declares JMS-specific transport constants.\nClass JmsMessageReceiver; // Convenience base class for JMS server-side transport objects.\nClass JmsMessageSender; // WebServiceMessageSender implementation that uses JMS Messages.\nClass JmsReceiverConnection; // Implementation of WebServiceConnection that is used for server-side JMS access.\nClass JmsSenderConnection; // Implementation of WebServiceConnection that is used for client-side JMS access.\nClass WebServiceMessageListener; // Spring SessionAwareMessageListener that can be used to handle incoming Message service requests.\nClass JmsTransportException; // Exception that is thrown when an error occurs in the JMS transport.\n", "des": "Package providing support for handling messages via JMS."}
{"index": 1000, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass JmsTransportUtils; // Collection of utility methods to work with JMS transports.\n", "des": "Classes supporting the org.springframework.ws.transport.jms package."}
{"index": 1001, "repo": "spring-ws-3.0.10.RELEASE", "code": "package mail;\n\npackage mail.monitor; // Provides the MonitoringStrategy interface and implementations.\npackage mail.support; // Classes supporting the org.springframework.ws.transport.mail package.\nInterface MailTransportConstants; // Declares Mail-specific transport constants.\nClass MailMessageReceiver; // Server-side component for receiving email messages using JavaMail.\nClass MailMessageSender; // WebServiceMessageSender implementation that uses Mail MimeMessages.\nClass MailReceiverConnection; // Implementation of WebServiceConnection that is used for server-side Mail access.\nClass MailSenderConnection; // Implementation of WebServiceConnection that is used for client-side Mail access.\nClass MailTransportException; // Exception that is thrown when an error occurs in the Mail transport.\n", "des": "Package providing support for handling messages via email."}
{"index": 1002, "repo": "spring-ws-3.0.10.RELEASE", "code": "package monitor;\n\nInterface MonitoringStrategy; // Defines the contract for objects that monitor a given folder for new messages.\nClass AbstractMonitoringStrategy; // Abstract base class for the MonitoringStrategy interface.\nClass ImapIdleMonitoringStrategy; // Implementation of the MonitoringStrategy interface that uses the IMAP IDLE command for asynchronous message detection.\nClass PollingMonitoringStrategy; // Implementation of the MonitoringStrategy interface that uses a simple polling mechanism.\nClass Pop3PollingMonitoringStrategy; // Implementation of the MonitoringStrategy interface that uses a simple polling mechanism suitable for POP3 servers.\n", "des": "Provides the MonitoringStrategy interface and implementations."}
{"index": 1003, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass MailTransportUtils; // Collection of utility methods to work with Mail transports.\n", "des": "Classes supporting the org.springframework.ws.transport.mail package."}
{"index": 1004, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass AbstractAsyncStandaloneMessageReceiver; // Abstract base class for asynchronous standalone, server-side transport objects.\nClass AbstractStandaloneMessageReceiver; // Abstract base class for standalone, server-side transport objects.\nClass EnumerationIterator<T>; // Adapts an Enumeration to follow the interface of Iterator.\nClass SimpleWebServiceMessageReceiverObjectSupport; // Base class for server-side transport objects which have a predefined WebServiceMessageReceiver.\nClass TransportUtils; // Generic utility methods for working with Web service transports.\nClass WebServiceMessageReceiverObjectSupport; // Convenience base class for server-side transport objects.\n", "des": "Classes supporting the org.springframework.ws.transport package."}
{"index": 1005, "repo": "spring-ws-3.0.10.RELEASE", "code": "package xmpp;\n\nInterface XmppTransportConstants; // Declares XMPP-specific transport constants.\nClass XmppMessageReceiver; // Server-side component for receiving XMPP (Jabber) messages.\nClass XmppMessageSender; // WebServiceMessageSender implementation that uses XMPP Messages.\nClass XmppReceiverConnection; // Implementation of WebServiceConnection that is used for server-side XMPP access.\nClass XmppSenderConnection; // Implementation of WebServiceConnection that is used for client-side XMPP access.\n", "des": "Package providing support for handling messages via xmpp."}
{"index": 1006, "repo": "spring-ws-3.0.10.RELEASE", "code": "package wsdl;\n\npackage wsdl.wsdl11; // Contains interfaces and classes specific to WSDL 1.1.\nInterface WsdlDefinition; // Represents an abstraction for WSDL definitions.\nClass WsdlDefinitionException; // Base class for all WSDL definition exceptions.\n", "des": "Provides the WSDL functionality of the Spring Web Services framework."}
{"index": 1007, "repo": "spring-ws-3.0.10.RELEASE", "code": "package wsdl11;\n\npackage wsdl11.provider; // Provides a contribution strategy for WSDL definitions.\nInterface Wsdl11Definition; // Models a WSDL 1.1-specific WsdlDefinition.\nClass DefaultWsdl11Definition; // Convenient implementation of Wsdl11Definition that creates a SOAP 1.1 or 1.2 binding based on naming conventions in one or more inlined XSD schemas.\nClass ProviderBasedWsdl4jDefinition; // Implementation of the Wsdl11Definition that uses a provider-based mechanism to populate a WSDL4J Definition.\nClass SimpleWsdl11Definition; // The default Wsdl11Definition implementation.\nClass Wsdl4jDefinition; // Implementation of the Wsdl11Definition based on WSDL4J.\nClass Wsdl4jDefinitionException; // Subclass of WsdlDefinitionException that wraps WSDLExceptions.\n", "des": "Contains interfaces and classes specific to WSDL 1.1."}
{"index": 1008, "repo": "spring-ws-3.0.10.RELEASE", "code": "package provider;\n\nInterface BindingsProvider; // Strategy for adding Bindings to a Definition.\nInterface ImportsProvider; // Strategy for adding Imports to a Definition.\nInterface MessagesProvider; // Strategy for adding Messages to a Definition.\nInterface PortTypesProvider; // Strategy for adding PortTypes to a Definition.\nInterface ServicesProvider; // Strategy for adding Services to a Definition.\nInterface TypesProvider; // Strategy for adding Types to a Definition.\nClass AbstractPortTypesProvider; // Abstract base class for PortTypesProvider implementations.\nClass DefaultConcretePartProvider; // Default implementation of the BindingsProvider and ServicesProvider interfaces.\nClass DefaultMessagesProvider; // Default implementation of the MessagesProvider.\nClass InliningXsdSchemaTypesProvider; // Implementation of TypesProvider that inlines a XsdSchema or XsdSchemaCollection into the WSDL.\nClass Soap11Provider; // Implementation of the BindingsProvider and ServicesProvider interfaces that are SOAP 1.1 specific.\nClass Soap12Provider; // Implementation of the BindingsProvider and ServicesProvider interfaces that are SOAP 1.2 specific.\nClass SoapProvider; // Implementation of the BindingsProvider and ServicesProvider interfaces that supports SOAP 1.1 and SOAP 1.2.\nClass SuffixBasedMessagesProvider; // Implementation of the MessagesProvider interface that is based on suffixes.\nClass SuffixBasedPortTypesProvider; // Implementation of the PortTypesProvider interface that is based on suffixes.\n", "des": "Provides a contribution strategy for WSDL definitions."}
{"index": 1009, "repo": "spring-ws-3.0.10.RELEASE", "code": "package xml;\n\npackage xml.dom; // Provides classes that help with DOM: the Document Object Model.\npackage xml.namespace; // Provides classes that help with XML Namespace processing.\npackage xml.sax; // Provides classes that help with SAX: the Simple API for XML.\npackage xml.transform; // Provides classes that help with XML transformations.\npackage xml.validation; // Provides classes for XML validation in JAXP 1.0 and JAXP 1.3.\npackage xml.xpath; // Provides XPathTemplate implementations, and various classes for XPath evaluation using JAXP 1.3, and Jaxen.\npackage xml.xsd; // Provides an abstraction over XSD XML schemas.\nClass DocumentBuilderFactoryUtils;\nClass JaxpVersion; // Helper class used to find the current version of JAXP.\nClass XMLInputFactoryUtils;\nClass XmlException; // Root of the hierarchy of XML exception.\n", "des": "Provides classes for XML handling: version detection and a base XML exception class."}
{"index": 1010, "repo": "spring-ws-3.0.10.RELEASE", "code": "package dom;\n\nClass DomContentHandler; // SAX ContentHandler that transforms callback calls to DOM Nodes.\n", "des": "Provides classes that help with DOM: the Document Object Model."}
{"index": 1011, "repo": "spring-ws-3.0.10.RELEASE", "code": "package namespace;\n\nClass QNameEditor; // PropertyEditor for javax.xml.namespace.QName, to populate a property of type QName from a String value.\nClass QNameUtils; // Helper class for using QName.\nClass SimpleNamespaceContext; // Simple javax.xml.namespace.NamespaceContext implementation.\n", "des": "Provides classes that help with XML Namespace processing."}
{"index": 1012, "repo": "spring-ws-3.0.10.RELEASE", "code": "package sax;\n\nClass AbstractXmlReader; // Abstract base class for SAX XMLReader implementations.\nClass SaxUtils; // Convenient utility methods for dealing with SAX.\n", "des": "Provides classes that help with SAX: the Simple API for XML."}
{"index": 1013, "repo": "spring-ws-3.0.10.RELEASE", "code": "package transform;\n\nInterface TraxUtils.ResultCallback; // Callback interface invoked on each sort of Result.\nInterface TraxUtils.SourceCallback; // Callback interface invoked on each sort of Source.\nClass ResourceSource; // Convenient subclass of SAXSource that reads from a Spring Resource.\nClass StringResult; // Convenient subclass of StreamResult that writes to a StringWriter.\nClass StringSource; // Convenient subclass of StreamSource that reads from a StringReader.\nClass TransformerFactoryUtils;\nClass TransformerHelper; // Helper class for Transformer usage.\nClass TransformerObjectSupport; // Convenient base class for objects that use a Transformer.\nClass TraxUtils; // Convenient utility methods for dealing with TrAX.\n", "des": "Provides classes that help with XML transformations."}
{"index": 1014, "repo": "spring-ws-3.0.10.RELEASE", "code": "package validation;\n\nInterface ValidationErrorHandler; // Subinterface of ErrorHandler that allows the registered errors to be retrieved.\nInterface XmlValidator; // Simple processor that validates a given Source.\nClass SchemaFactoryUtils;\nClass SchemaLoaderUtils; // Convenient utility methods for loading of Schema objects, performing standard handling of input streams.\nClass XMLReaderFactoryUtils;\nClass XmlValidatorFactory; // Factory for XmlValidator objects, being aware of JAXP 1.3 Validators, and JAXP 1.0 parsing capabilities.\nClass XmlValidationException; // Exception thrown when a validation error occurs\n", "des": "Provides classes for XML validation in JAXP 1.0 and JAXP 1.3."}
{"index": 1015, "repo": "spring-ws-3.0.10.RELEASE", "code": "package xpath;\n\nInterface NodeCallbackHandler; // An interface used by XPathOperations implementations for processing Node objects on a per-node basis.\nInterface NodeMapper<T>; // An interface used by XPathOperations implementations for mapping Node objects on a per-node basis.\nInterface XPathExpression; // Defines the contract for a precompiled XPath expression.\nInterface XPathOperations; // Interface that specifies a basic set of XPath operations, implemented by various XPathTemplates.\nClass AbstractXPathTemplate; // Abstract base class for implementations of XPathOperations.\nClass JaxenXPathTemplate; // Implementation of XPathOperations that uses Jaxen.\nClass Jaxp13XPathTemplate; // Implementation of XPathOperations that uses JAXP 1.3.\nClass XPathExpressionFactory; // Factory for compiled XPathExpressions, being aware of JAXP 1.3+ XPath functionality, and Jaxen.\nClass XPathExpressionFactoryBean; // Spring FactoryBean for XPathExpression object.\nClass XPathException; // Exception thrown when an error occurs during XPath processing.\nClass XPathParseException; // Exception throws when a XPath expression cannot be parsed.\n", "des": "Provides XPathTemplate implementations, and various classes for XPath evaluation using JAXP 1.3, and Jaxen."}
{"index": 1016, "repo": "spring-ws-3.0.10.RELEASE", "code": "package xsd;\n\npackage xsd.commons; // Contains a implementation of the XsdSchema interfaces that uses Apache WS-Commons XML Schema.\nInterface XsdSchema; // Represents an abstraction for XSD schemas.\nInterface XsdSchemaCollection; // Represents an abstraction for a collection of XSD schemas.\nClass SimpleXsdSchema; // The default XsdSchema implementation.\nClass XsdSchemaException; // Base class for all WSDL definition exceptions.\n", "des": "Provides an abstraction over XSD XML schemas."}
{"index": 1017, "repo": "spring-ws-3.0.10.RELEASE", "code": "package commons;\n\nClass CommonsXsdSchema; // Implementation of the XsdSchema interface that uses Apache WS-Commons XML Schema.\nClass CommonsXsdSchemaCollection; // Implementation of the XsdSchemaCollection that uses Apache WS-Commons XML Schema.\nClass CommonsXsdSchemaException; // Commons XmlSchema version of the XsdSchemaException.\n", "des": "Contains a implementation of the XsdSchema interfaces that uses Apache WS-Commons XML Schema."}
{"index": 1018, "repo": "hive-common-4.0.0-alpha-2", "code": "package datetime;\n\nClass HiveSqlDateTimeFormatter; // Formatter using SQL:2016 datetime patterns.\nClass HiveSqlDateTimeFormatter.Token; // Token representation.\nEnum HiveSqlDateTimeFormatter.TokenType; // Represents broad categories of tokens.\n", "des": "Deals with formatting and parsing of datetime objects."}
{"index": 1019, "repo": "commons-email-1.5", "code": "package mail;\n\npackage mail.resolver; // Contains implementation classes to resolve data sources from the following locations: class path file system URL\npackage mail.util; // This package provides some utility classes.\nInterface DataSourceResolver; // Creates a DataSource based on an URL.\nClass ByteArrayDataSource; // since 1.4, use ByteArrayDataSource instead\nClass DefaultAuthenticator; // This is a very simple authentication object that can be used for any transport needing basic userName and password type authentication.\nClass Email; // The base class for all email messages.\nClass EmailAttachment; // This class models an email attachment.\nClass EmailConstants; // Constants used by Email classes.\nClass HtmlEmail; // An HTML multipart email.\nClass ImageHtmlEmail; // Small wrapper class on top of HtmlEmail which encapsulates the required logic to retrieve images that are contained in \"<img src=..\nClass MultiPartEmail; // A multipart email.\nClass SimpleEmail; // This class is used to send simple internet email messages without attachments.\nClass EmailException; // Exception thrown when a checked error occurs in commons-email.\n", "des": "Commons-Email aims to provide a API for sending email."}
{"index": 1020, "repo": "commons-email-1.5", "code": "package resolver;\n\nClass DataSourceBaseResolver; // Base class for various resolvers.\nClass DataSourceClassPathResolver; // Creates a DataSource based on an class path.\nClass DataSourceCompositeResolver; // A composite data source resolver.\nClass DataSourceFileResolver; // Creates a DataSource based on an URL.\nClass DataSourceUrlResolver; // Creates a DataSource based on an URL.\n", "des": "Contains implementation classes to resolve data sources from the following locations: class path file system URL"}
{"index": 1021, "repo": "commons-email-1.5", "code": "package util;\n\nClass IDNEmailAddressConverter; // Converts email addresses containing International Domain Names into an ASCII representation suitable for sending an email.\nClass MimeMessageParser; // Parses a MimeMessage and stores the individual parts such a plain text, HTML text and attachments.\nClass MimeMessageUtils; // Static helper methods.\n", "des": "This package provides some utility classes."}
{"index": 1022, "repo": "hadoop-aws-3.3.6", "code": "package s3a;\n\npackage s3a.api; // Where the interfaces for classes implemented in o.a.h.fs.s3a.impl should go.\npackage s3a.audit; // Support for auditing and ultimately tracing operations.\npackage s3a.auth; // Authentication and permissions support.\npackage s3a.commit; // Support for committing the output of analytics jobs directly to S3.\npackage s3a.impl; // Implementation classes private to the S3A store.\npackage s3a.prefetch; // High performance s3 input stream which reads in blocks and can cache blocks in the local filesystem.\npackage s3a.s3guard; // This package contained S3Guard support; now the feature has been removed, its contents are limited to the public command line and some methods still used by directory marker code.\npackage s3a.select; // Support for S3 Select.\npackage s3a.statistics; // Statistics collection for the S3A connector: interfaces.\npackage s3a.tools; // S3A Command line tools independent of S3Guard.\nInterface Invoker.Retried; // Callback for retry and notification operations.\nInterface S3AInputStream.InputStreamCallbacks; // Callbacks for input stream IO.\nInterface S3AUtils.CallOnLocatedFileStatus; // An interface for use in lambda-expressions working with directory tree listings.\nInterface S3AUtils.LocatedFileStatusMap<T>; // An interface for use in lambda-expressions working with directory tree listings.\nInterface S3ClientFactory; // This interface will be replaced by one which uses the AWS SDK V2 S3 client as part of upgrading S3A to SDK V2.\nInterface WriteOperationHelper.WriteOperationHelperCallbacks; // Callbacks for writeOperationHelper.\nInterface WriteOperations; // Operations to update the store.\nClass AnonymousAWSCredentialsProvider; // This class will be replaced by one that implements AWS SDK V2's AwsCredentialProvider as part of upgrading S3A to SDK V2.\nClass ArnResource; // Represents an Arn Resource, this can be an accesspoint or bucket.\nClass AWSCredentialProviderList; // A list of providers.\nClass Constants; // Constants used with the S3AFileSystem.\n", "des": "S3A Filesystem."}
{"index": 1023, "repo": "hadoop-aws-3.3.6", "code": "package api;\n\nInterface RequestFactory; // Factory for S3 objects.\nClass UnsupportedRequestException; // An operation is unsupported.\n", "des": "Where the interfaces for classes implemented in o.a.h.fs.s3a.impl should go."}
{"index": 1024, "repo": "hadoop-aws-3.3.6", "code": "package audit;\n\npackage audit.impl; // The internal implementations of auditing support.\nInterface AuditManagerS3A; // Interface for Audit Managers auditing operations through the AWS libraries.\nInterface AuditSpanS3A; // An Audit Span with S3A integration, specifically callbacks from the AWS client SDK.\nInterface AWSAuditEventCallbacks; // Callbacks for audit spans.\nInterface OperationAuditor; // Interfaces for audit services to implement.\nClass AuditIntegration; // Support for integrating auditing within the S3A code.\nClass AWSRequestAnalyzer; // Extract information from a request.\nClass AWSRequestAnalyzer.RequestInfo; // Info about a request.\nClass OperationAuditorOptions; // Options for the OperationAuditor.\nClass S3AAuditConstants;\nClass S3LogParser; // Class to help parse AWS S3 Logs.\nClass S3LogVerbs; // Various verbs in the S3 logs.\nClass AuditFailureException; // This is in the AWS exception tree so that exceptions raised in the AWS SDK are correctly reported up.\nClass AuditOperationRejectedException; // The auditor has rejected the operation as forbidden/unavailable.\n", "des": "Support for auditing and ultimately tracing operations."}
{"index": 1025, "repo": "hadoop-aws-3.3.6", "code": "package impl;\n\nInterface NoopSpan.SpanActivationCallbacks; // Activation callbacks.\nClass AbstractAuditSpanImpl; // Base class for the audit spans implementations..\nClass AbstractOperationAuditor; // This is a long-lived service which is created in S3A FS initialize (make it fast!) which provides context for tracking operations made to S3.\nClass ActiveAuditManagerS3A; // Thread management for the active audit.\nClass LoggingAuditor; // The LoggingAuditor logs operations at DEBUG (in SDK Request) and in span lifecycle and S3 request class construction at TRACE.\nClass NoopAuditManagerS3A; // Simple No-op audit manager for use before a real audit chain is set up, and for testing.\nClass NoopAuditor; // An audit service which returns the NoopSpan.\nClass NoopSpan; // A minimal span with no direct side effects.\nClass S3AInternalAuditConstants; // Internal constants; not intended for public use, or for use by any external implementations.\n", "des": "The internal implementations of auditing support."}
{"index": 1026, "repo": "hadoop-aws-3.3.6", "code": "package auth;\n\npackage auth.delegation; // Extensible delegation token support for the S3A connector.\nInterface AwsSignerInitializer; // Interface which can be implemented to allow initialization of any custom signers which may be used by the S3AFileSystem.\nClass AbstractAWSCredentialProvider; // This class will be replaced by one that implements AWS SDK V2's AwsCredentialProvider as part of upgrading S3A to SDK V2.\nClass AbstractSessionCredentialsProvider; // This class will be replaced by one that implements AWS SDK V2's AwsCredentialProvider as part of upgrading S3A to SDK V2.\nClass AbstractSessionCredentialsProvider.NoCredentials; // A special set of null credentials which are not the anonymous class.\nClass AssumedRoleCredentialProvider; // This class will be replaced by one that implements AWS SDK V2's AwsCredentialProvider as part of upgrading S3A to SDK V2.\nClass IAMInstanceCredentialsProvider; // This class will be replaced by one that implements AWS SDK V2's AwsCredentialProvider as part of upgrading S3A to SDK V2.\nClass MarshalledCredentialBinding; // Class to bridge from the serializable/marshallabled MarshalledCredentialBinding class to/from AWS classes.\nClass MarshalledCredentialProvider; // AWS credential provider driven from marshalled session/full credentials (full, simple session or role).\nClass MarshalledCredentials; // Stores the credentials for a session or for a full login.\nClass RoleModel; // Jackson Role Model for Role Properties, for API clients and tests.\nClass RoleModel.Policy; // A policy is one or more statements.\nClass RoleModel.RoleElt; // Any element in a role.\nClass RoleModel.Statement; // A single statement.\nClass RolePolicies; // Operations, statements and policies covering the operations needed to work with S3.\nClass SignerManager; // Class to handle custom signers.\nClass STSClientFactory; // Factory for creating STS Clients.\nClass STSClientFactory.STSClient; // STS client connection with retries.\nEnum MarshalledCredentials.CredentialTypeRequired; // Enumeration of credential types for use in validation methods.\nEnum RoleModel.Effects; // Effect options.\n", "des": "Authentication and permissions support."}
{"index": 1027, "repo": "hadoop-aws-3.3.6", "code": "package delegation;\n\nInterface AWSPolicyProvider; // Interface for providers of AWS policy for accessing data.\nInterface DelegationOperations; // All operations used for delegation which aren't in the store context.\nInterface DelegationTokenProvider; // Interface for S3A Delegation Token access.\nClass AbstractDelegationTokenBinding; // An AbstractDelegationTokenBinding implementation is a class which handles the binding of its underlying authentication mechanism to the Hadoop Delegation token mechanism.\nClass AbstractDTService; // This is the base class for both the delegation binding code and the back end service created; allows for shared methods across both.\nClass AbstractS3ATokenIdentifier; // An S3A Delegation Token Identifier: contains the information needed to talk to S3A.\nClass DelegationConstants; // All the constants related to delegation tokens.\nClass EncryptionSecretOperations; // These support operations on EncryptionSecrets which use the AWS SDK operations.\nClass EncryptionSecrets; // Encryption options in a form which can serialized or marshalled as a hadoop Writeable.\nClass FullCredentialsTokenBinding; // Full credentials: they are simply passed as-is, rather than converted to a session.\nClass FullCredentialsTokenIdentifier; // The full credentials payload is the same of that for a session token, but a different token kind is used.\nClass RoleTokenBinding; // Role Token support requests an explicit role and automatically restricts that role to the given policy of the binding.\nClass RoleTokenIdentifier; // Role token identifier.\nClass S3ADelegationTokens; // Support for creating a DT from a filesystem.\nClass S3ADtFetcher; // A DT fetcher for S3A.\nClass SessionTokenBinding; // The session token DT binding: creates an AWS session token for the DT, extracts and serves it up afterwards.\nClass SessionTokenIdentifier; // A token identifier which contains a set of AWS session credentials, credentials which will be valid until they expire.\nEnum AWSPolicyProvider.AccessLevel; // Access levels.\nEnum S3ADelegationTokens.TokenIssuingPolicy; // How will tokens be issued on request? The S3ADelegationTokens.TokenIssuingPolicy.RequestNewToken policy does not guarantee that a tokens can be created, only that an attempt will be made to request one.\nClass DelegationTokenIOException; // General IOException for Delegation Token issues.\n", "des": "Extensible delegation token support for the S3A connector."}
{"index": 1028, "repo": "hadoop-aws-3.3.6", "code": "package commit;\n\npackage commit.files; // Persistent data formats for the committers.\npackage commit.impl; // Internal classes which make use of mapreduce code.\npackage commit.magic; // This is the \"Magic\" committer and support.\npackage commit.staging; // The staging committers.\nClass AbstractS3ACommitter; // Abstract base class for S3A committers; allows for any commonality between different architectures.\nClass AbstractS3ACommitter.ActiveCommit; // State of the active commit operation.\nClass AbstractS3ACommitterFactory; // Dynamically create the output committer based on subclass type and settings.\nClass CommitConstants; // Constants for working with committers.\nClass CommitterStatisticNames; // Statistic names for committers.\nClass CommitUtils; // Static utility methods related to S3A commitment processing, both staging and magic.\nClass InternalCommitterConstants; // These are internal constants not intended for public use.\nClass MagicCommitIntegration; // Adds the code needed for S3A to support magic committers.\nClass MagicCommitPaths; // Operations on (magic) paths.\nClass PutTracker; // Multipart put tracker.\nClass S3ACommitterFactory; // The S3A committer factory which chooses the committer based on the specific option chosen in a per-bucket basis from the property CommitConstants.FS_S3A_COMMITTER_NAME.\nEnum AbstractS3ACommitter.JobUUIDSource; // Enumeration of Job UUID source.\nClass PathCommitException; // Path exception to use for various commit issues.\nClass ValidationFailure; // Exception raised on validation failures; kept as an IOException for consistency with other failures.\n", "des": "Support for committing the output of analytics jobs directly to S3."}
{"index": 1029, "repo": "hadoop-aws-3.3.6", "code": "package files;\n\nClass PendingSet; // Persistent format for multiple pending commits.\nClass PersistentCommitData<T extends PersistentCommitData>; // Class for single/multiple commit data structures.\nClass SinglePendingCommit; // This is the serialization format for uploads yet to be committed.\nClass SuccessData; // Summary data saved into a _SUCCESS marker file.\n", "des": "Persistent data formats for the committers."}
{"index": 1030, "repo": "hadoop-aws-3.3.6", "code": "package impl;\n\nClass AuditContextUpdater; // Class to track/update context information to set in threads.\nClass CommitContext; // Commit context.\nClass CommitOperations; // The implementation of the various actions a committer needs.\nClass CommitOperations.MaybeIOE; // A holder for a possible IOException; the call CommitOperations.MaybeIOE.maybeRethrow() will throw any exception passed into the constructor, and be a no-op if none was.\nClass CommitUtilsWithMR; // These are commit utility methods which import classes from hadoop-mapreduce, and so only work when that module is on the classpath.\n", "des": "Internal classes which make use of mapreduce code."}
{"index": 1031, "repo": "hadoop-aws-3.3.6", "code": "package magic;\n\nClass MagicCommitTracker; // Put tracker for Magic commits.\nClass MagicS3GuardCommitter; // This is a dedicated committer which requires the \"magic\" directory feature of the S3A Filesystem to be enabled; it then uses paths for task and job attempts in magic paths, so as to ensure that the final output goes direct to the destination directory.\nClass MagicS3GuardCommitterFactory; // Factory for the Magic committer.\n", "des": "This is the \"Magic\" committer and support."}
{"index": 1032, "repo": "hadoop-aws-3.3.6", "code": "package staging;\n\nClass DirectoryStagingCommitter; // This commits to a directory.\nClass DirectoryStagingCommitterFactory; // Factory for the Directory committer.\nClass PartitionedStagingCommitter; // Partitioned committer.\nClass PartitionedStagingCommitterFactory; // Factory for the PartitionedStagingCommitter.\nClass Paths; // Path operations for the staging committers.\nClass StagingCommitter; // Committer based on the contributed work of the Netflix multipart committers. The working directory of each task is actually under a temporary path in the local filesystem; jobs write directly into it.\nClass StagingCommitterConstants; // Internal staging committer constants.\nClass StagingCommitterFactory; // Factory for the staging committer.\nEnum ConflictResolution; // Enum of conflict resolution algorithms.\n", "des": "The staging committers."}
{"index": 1033, "repo": "hadoop-aws-3.3.6", "code": "package impl;\n\nInterface ContextAccessors; // An interface to implement for providing accessors to S3AFileSystem-level API calls.\nInterface CopyFromLocalOperation.CopyFromLocalOperationCallbacks; // Define the contract for CopyFromLocalOperation to interact with any external resources.\nInterface CreateFileBuilder.CreateFileBuilderCallbacks; // Callbacks for creating the file.\nInterface DirectoryPolicy; // Interface for Directory Marker policies to implement.\nInterface GetContentSummaryOperation.GetContentSummaryCallbacks; // Callbacks used by the operation.\nInterface HeaderProcessing.HeaderProcessingCallbacks;\nInterface ListingOperationCallbacks; // These are all the callbacks which Listing operations need, derived from the actual appropriate S3AFileSystem methods.\nInterface MkdirOperation.MkdirCallbacks; // Callbacks used by mkdir.\nInterface OperationCallbacks; // These are all the callbacks which the RenameOperation and DeleteOperation operations need, derived from the appropriate S3AFileSystem methods.\nInterface RequestFactoryImpl.PrepareRequest; // This is a callback for anything to \"prepare\" every request after creation.\nClass AbstractStoreOperation; // Base class of operations in the store.\nClass ActiveOperationContext; // Context for any active operation.\nClass BulkDeleteRetryHandler; // Handler for bulk delete retry events.\nClass CallableSupplier<T>; // A bridge from Callable to Supplier; catching exceptions raised by the callable and wrapping them as appropriate.\nClass ChangeDetectionPolicy; // Object change detection policy.\nClass ChangeTracker; // Change tracking for input streams: the version ID or etag of the object is tracked and compared on open/re-open.\nClass ConfigureShadedAWSSocketFactory; // This interacts with the Shaded httpclient library used in the full AWS SDK.\nClass CopyFromLocalOperation; // Implementation of CopyFromLocalOperation.\nClass CopyOutcome; // Extracts the outcome of a TransferManager-executed copy operation.\nClass CreateFileBuilder; // Builder used in create file; takes a callback to the operation to create the file.\nClass CreateFileBuilder.CreateFileOptions; // Create file options as built from the builder set or the classic entry point.\nClass DeleteOperation; // Implementation of the delete() operation.\nClass DirectoryPolicyImpl; // Implementation of directory policy.\nClass DirMarkerTracker; // Tracks directory markers which have been reported in object listings.\n", "des": "Implementation classes private to the S3A store."}
{"index": 1034, "repo": "hadoop-aws-3.3.6", "code": "package prefetch;\n\nClass S3ABlockManager; // Provides read access to S3 file one block at a time.\nClass S3ACachingBlockManager; // Provides access to S3 file one block at a time.\nClass S3ACachingInputStream; // Provides an InputStream that allows reading from an S3 file.\nClass S3AInMemoryInputStream; // Provides an InputStream that allows reading from an S3 file.\nClass S3APrefetchingInputStream; // Enhanced InputStream for reading from S3.\nClass S3ARemoteInputStream; // Provides an InputStream that allows reading from an S3 file.\nClass S3ARemoteObject; // Encapsulates low level interactions with S3 object on AWS.\nClass S3ARemoteObjectReader; // Provides functionality to read S3 file one block at a time.\n", "des": "High performance s3 input stream which reads in blocks and can cache blocks in the local filesystem."}
{"index": 1035, "repo": "hadoop-aws-3.3.6", "code": "package s3guard;\n\nClass S3Guard; // Logic for integrating MetadataStore with S3A.\nClass S3GuardTool; // CLI to manage S3Guard Metadata Store.\nClass S3GuardTool.BucketInfo; // Get info about a bucket and its S3Guard integration status.\n", "des": "This package contained S3Guard support; now the feature has been removed, its contents are limited to the public command line and some methods still used by directory marker code."}
{"index": 1036, "repo": "hadoop-aws-3.3.6", "code": "package select;\n\nClass InternalSelectConstants; // Constants for internal use in the org.apache.hadoop.fs.s3a module itself.\nClass SelectBinding; // Class to do the S3 select binding and build a select request from the supplied arguments/configuration.\nClass SelectConstants; // Options related to S3 Select.\nClass SelectInputStream; // An input stream for S3 Select return values.\nClass SelectTool; // This is a CLI tool for the select operation, which is available through the S3Guard command.\n", "des": "Support for S3 Select."}
{"index": 1037, "repo": "hadoop-aws-3.3.6", "code": "package statistics;\n\npackage statistics.impl; // Statistics collection for the S3A connector: implementation.\nInterface BlockOutputStreamStatistics; // Block output stream statistics.\nInterface ChangeTrackerStatistics; // Interface for change tracking statistics.\nInterface CommitterStatistics; // Statistics for S3A committers.\nInterface CountersAndGauges; // This is the foundational API for collecting S3A statistics.\nInterface DelegationTokenStatistics; // Instrumentation exported to for S3A Delegation Token support.\nInterface PutTrackerStatistics; // Interface for PUT tracking.\nInterface S3AInputStreamStatistics; // Statistics updated by a S3AInputStream during its use.\nInterface S3AMultipartUploaderStatistics; // Statistics for the S3A multipart uploader.\nInterface S3AStatisticInterface; // Base Interface for S3A Statistics, as a way of managing them.\nInterface S3AStatisticsContext; // This is the statistics context for ongoing operations in S3A.\nInterface StatisticsFromAwsSdk; // interface to receive statistics events from the AWS SDK by way of AwsStatisticsCollector.\nEnum StatisticTypeEnum; // Enum of statistic types.\n", "des": "Statistics collection for the S3A connector: interfaces."}
{"index": 1038, "repo": "hadoop-aws-3.3.6", "code": "package impl;\n\nInterface BondedS3AStatisticsContext.S3AFSStatisticsSource; // This is the interface which an integration source must implement for the integration.\nClass AbstractS3AStatisticsSource; // Base class for implementing IOStatistics sources in the S3 module.\nClass AwsStatisticsCollector; // Collect statistics from the AWS SDK and forward to an instance of StatisticsFromAwsSdk and thence into the S3A statistics.\nClass BondedS3AStatisticsContext; // An S3A statistics context which is bonded to a S3AInstrumentation instance -inevitably that of an S3AFileSystem instance.\nClass CountingChangeTracker; // A change tracker which increments an atomic long.\nClass EmptyS3AStatisticsContext; // Special statistics context, all of whose context operations are no-ops.\nClass EmptyS3AStatisticsContext.EmptyMultipartUploaderStatistics; // Multipart Uploader.\nClass S3AMultipartUploaderStatisticsImpl; // Implementation of the uploader statistics.\nClass StatisticsFromAwsSdkImpl; // Hook up AWS SDK Statistics to the S3 counters.\n", "des": "Statistics collection for the S3A connector: implementation."}
{"index": 1039, "repo": "hadoop-aws-3.3.6", "code": "package tools;\n\nInterface MarkerToolOperations; // Operations which must be offered by the store for MarkerTool.\nClass MarkerTool; // Audit an S3 bucket for directory markers.\nClass MarkerTool.MarkerPurgeSummary; // Result of a call of MarkerTool.purgeMarkers(DirMarkerTracker, int); included in MarkerTool.ScanResult so must share visibility.\nClass MarkerTool.ScanArgs; // Arguments for the scan.\nClass MarkerTool.ScanArgsBuilder; // Builder of the scan arguments.\nClass MarkerTool.ScanResult; // Result of the scan operation.\nClass MarkerToolOperationsImpl; // Implement the marker tool operations by forwarding to the OperationCallbacks instance provided in the constructor.\n", "des": "S3A Command line tools independent of S3Guard."}
{"index": 1040, "repo": "hadoop-aws-3.3.6", "code": "package s3native;\n\nClass NativeS3FileSystem; // Replaced by the S3A client.\nClass S3xLoginHelper; // Class to aid logging in to S3 endpoints.\nClass S3xLoginHelper.Login; // Simple tuple of login details.\n", "des": "A distributed implementation of FileSystem for reading and writing files on Amazon S3."}
{"index": 1041, "repo": "commons-io-2.13.0", "code": "package io;\n\npackage io.build; // Provides classes to implement IO builders.\npackage io.charset; // Provides classes to work with code from java.nio.charset.\npackage io.comparator; // Provides various Comparator implementations for Files.\npackage io.file; // Provides extensions in the realm of java.nio.file.\npackage io.filefilter; // Provides the an interface IOFileFilter that combines both FileFilter and FilenameFilter.\npackage io.function; // Provides IO-only related functional interfaces for lambda expressions and method references.\npackage io.input; // Provides implementations of input classes, such as InputStream and Reader.\npackage io.monitor; // Provides a component for monitoring file system events (directory and file create, update and delete events).\npackage io.output; // Provides implementations of output classes, such as OutputStream and Writer.\npackage io.serialization; // Provides a framework for controlling the deserialization of classes.\nClass ByteOrderMark; // Byte Order Mark (BOM) representation.\nClass ByteOrderParser; // Converts Strings to ByteOrder instances.\nClass Charsets; // Charsets required of every implementation of the Java platform.\nClass CopyUtils; // Use IOUtils.\nClass DirectoryWalker<T>; // Apache Commons IO no longer uses this class.\nClass EndianUtils; // Helps with different endian systems.\nClass FileCleaner; // Use FileCleaningTracker\nClass FileCleaningTracker; // Keeps track of files awaiting deletion, and deletes them when an associated marker object is reclaimed by the garbage collector.\nClass FileDeleteStrategy; // Strategy for deleting files.\nClass FilenameUtils; // General file name and file path manipulation utilities.\nClass FileSystemUtils; // As of 2.6 deprecated without replacement.\nClass FileUtils; // General file manipulation utilities.\nClass HexDump; // Dumps data in hexadecimal format.\nClass IOUtils; // General IO stream manipulation utilities.\nClass LineIterator; // An Iterator over the lines in a Reader.\nClass RandomAccessFiles; // Works on RandomAccessFile.\nClass ThreadUtils; // Helps work with threads.\nEnum FileSystem; // Abstracts an OS' file system details, currently supporting the single use case of converting a file name String to a legal file name with FileSystem.toLegalFileName(String, char).\nEnum IOCase; // Enumeration of IO case sensitivity.\n", "des": "Provides classes for working with streams, readers, writers and files."}
{"index": 1042, "repo": "commons-io-2.13.0", "code": "package build;\n\nClass AbstractOrigin<T,B extends AbstractOrigin<T,B>>; // Abstracts the origin of data for builders like a File, Path, Reader, Writer, InputStream, OutputStream, and URI.\nClass AbstractOrigin.ByteArrayOrigin; // A byte[] origin.\nClass AbstractOrigin.CharSequenceOrigin; // A CharSequence origin.\nClass AbstractOrigin.FileOrigin; // A File origin.\nClass AbstractOrigin.InputStreamOrigin; // An InputStream origin.\nClass AbstractOrigin.OutputStreamOrigin; // An OutputStream origin.\nClass AbstractOrigin.PathOrigin; // A Path origin.\nClass AbstractOrigin.ReaderOrigin; // An Reader origin.\nClass AbstractOrigin.URIOrigin; // A URI origin.\nClass AbstractOrigin.WriterOrigin; // An Writer origin.\nClass AbstractOriginSupplier<T,B extends AbstractOriginSupplier<T,B>>; // Abstracts building an instance of T.\nClass AbstractStreamBuilder<T,B extends AbstractStreamBuilder<T,B>>; // Abstracts building a typed instance of T.\nClass AbstractSupplier<T,B extends AbstractSupplier<T,B>>; // Abstracts supplying an instance of T.\n", "des": "Provides classes to implement IO builders."}
{"index": 1043, "repo": "commons-io-2.13.0", "code": "package charset;\n\nClass CharsetDecoders; // Works with CharsetDecoder.\nClass CharsetEncoders; // Works with CharsetEncoder.\n", "des": "Provides classes to work with code from java.nio.charset."}
{"index": 1044, "repo": "commons-io-2.13.0", "code": "package comparator;\n\nClass CompositeFileComparator; // Compare two files using a set of delegate file Comparator.\nClass DefaultFileComparator; // Compares two files using the default File.compareTo(File) method.\nClass DirectoryFileComparator; // Compare two files using the File.isDirectory() method.\nClass ExtensionFileComparator; // Compare the file name extensions for order (see FilenameUtils.getExtension(String)).\nClass LastModifiedFileComparator; // Compare the last modified date/time of two files for order (see FileUtils.lastModifiedUnchecked(File)).\nClass NameFileComparator; // Compare the names of two files for order (see File.getName()).\nClass PathFileComparator; // Compare the path of two files for order (see File.getPath()).\nClass SizeFileComparator; // Compare the length/size of two files for order (see File.length() and FileUtils.sizeOfDirectory(File)).\n", "des": "Provides various Comparator implementations for Files."}
{"index": 1045, "repo": "commons-io-2.13.0", "code": "package file;\n\npackage file.attribute; // Provides help using java.nio.file.attribute types.\npackage file.spi; // Provides extensions in the realm of java.nio.file.spi.\nInterface Counters.Counter; // Counts using a number.\nInterface Counters.PathCounters; // Counts files, directories, and sizes, as a visit proceeds.\nInterface DeleteOption; // An object that configures how to delete a file.\nInterface PathFilter; // A filter for Paths.\nInterface PathVisitor; // A FileVisitor typed to a Path.\nClass AccumulatorPathVisitor; // Accumulates normalized paths during visitation.\nClass CleaningPathVisitor; // Deletes files but not directories as a visit proceeds.\nClass CopyDirectoryVisitor; // Copies a source directory to a target directory.\nClass Counters; // Provides counters for files, directories, and sizes, as a visit proceeds.\nClass CountingPathVisitor; // Counts files, directories, and sizes, as a visit proceeds.\nClass DeletingPathVisitor; // Deletes files and directories as a visit proceeds.\nClass DirectoryStreamFilter; // A DirectoryStream.Filter that delegates to a PathFilter.\nClass FilesUncheck; // Delegates to Files to uncheck calls by throwing UncheckedIOException instead of IOException.\nClass NoopPathVisitor; // A noop path visitor.\nClass PathUtils; // NIO Path utilities.\nClass SimplePathVisitor; // A SimpleFileVisitor typed to a Path.\nEnum StandardDeleteOption; // Defines the standard delete options.\n", "des": "Provides extensions in the realm of java.nio.file."}
{"index": 1046, "repo": "commons-io-2.13.0", "code": "package attribute;\n\nClass FileTimes; // Helps use FileTime and interoperate Date and NTFS times.\n", "des": "Provides help using java.nio.file.attribute types."}
{"index": 1047, "repo": "commons-io-2.13.0", "code": "package spi;\n\nClass FileSystemProviders; // Helps to work with FileSystemProvider.\n", "des": "Provides extensions in the realm of java.nio.file.spi."}
{"index": 1048, "repo": "commons-io-2.13.0", "code": "package filefilter;\n\nInterface ConditionalFileFilter; // Defines operations for conditional file filters.\nInterface IOFileFilter; // An interface which brings the FileFilter, FilenameFilter, and PathFilter interfaces together.\nClass AbstractFileFilter; // Abstracts the implementation of the FileFilter (IO), FilenameFilter (IO), PathFilter (NIO) interfaces via our own IOFileFilter interface.\nClass AgeFileFilter; // Filters files based on a cutoff time, can filter either newer files or files equal to or older.\nClass AndFileFilter; // A FileFilter providing conditional AND logic across a list of file filters.\nClass CanExecuteFileFilter; // This filter accepts Files that can be executed.\nClass CanReadFileFilter; // This filter accepts Files that can be read.\nClass CanWriteFileFilter; // This filter accepts Files that can be written to.\nClass DelegateFileFilter; // This class turns a Java FileFilter or FilenameFilter into an IO FileFilter.\nClass DirectoryFileFilter; // This filter accepts Files that are directories.\nClass EmptyFileFilter; // This filter accepts files or directories that are empty.\nClass FalseFileFilter; // A file filter that always returns false.\nClass FileEqualsFileFilter; // Accepts only an exact File object match.\nClass FileFileFilter; // This filter accepts Files that are files (not directories).\nClass FileFilterUtils; // Useful utilities for working with file filters.\nClass HiddenFileFilter; // This filter accepts Files that are hidden.\nClass MagicNumberFileFilter; // File filter for matching files containing a \"magic number\".\nClass NameFileFilter; // Filters file names for a certain name.\nClass NotFileFilter; // This filter produces a logical NOT of the filters specified.\nClass OrFileFilter; // A FileFilter providing conditional OR logic across a list of file filters.\nClass PathEqualsFileFilter; // Accepts only an exact Path object match.\nClass PathVisitorFileFilter; // A file filter backed by a path visitor.\nClass PrefixFileFilter; // Filters file names for a certain prefix.\nClass RegexFileFilter; // Filters files using supplied regular expression(s).\nClass SizeFileFilter; // Filters files based on size, can filter either smaller files or files equal to or larger than a given threshold.\nClass SuffixFileFilter; // Filters files based on the suffix (what the file name ends with).\nClass SymbolicLinkFileFilter; // This filter accepts Files that are symbolic links.\n", "des": "Provides the an interface IOFileFilter that combines both FileFilter and FilenameFilter."}
{"index": 1049, "repo": "commons-io-2.13.0", "code": "package function;\n\nInterface IOBaseStream<T,S extends IOBaseStream<T,S,B>,B extends BaseStream<T,B>>; // Like BaseStream but throws IOException.\nInterface IOBiConsumer<T,U>; // Like BiConsumer but throws IOException.\nInterface IOBiFunction<T,U,R>; // Like BiFunction but throws IOException.\nInterface IOBinaryOperator<T>; // Like BinaryOperator but throws IOException.\nInterface IOComparator<T>; // Like Comparator but throws IOException.\nInterface IOConsumer<T>; // Like Consumer but throws IOException.\nInterface IOFunction<T,R>; // Like Function but throws IOException.\nInterface IOIterator<E>; // Like Iterator but throws IOException.\nInterface IOPredicate<T>; // Like Predicate but throws IOException.\nInterface IOQuadFunction<T,U,V,W,R>; // Represents a function that accepts four arguments and produces a result.\nInterface IORunnable; // Like Runnable but throws IOException.\nInterface IOSpliterator<T>; // Like Spliterator but throws IOException.\nInterface IOStream<T>; // Like Stream but throws IOException.\nInterface IOSupplier<T>; // Like Supplier but throws IOException.\nInterface IOTriConsumer<T,U,V>; // Like BiConsumer but throws IOException.\nInterface IOTriFunction<T,U,V,R>; // Represents a function that accepts three arguments and produces a result.\nInterface IOUnaryOperator<T>; // Like UnaryOperator but throws IOException.\nClass Uncheck; // Unchecks calls by throwing UncheckedIOException instead of IOException.\n", "des": "Provides IO-only related functional interfaces for lambda expressions and method references."}
{"index": 1050, "repo": "commons-io-2.13.0", "code": "package input;\n\npackage input.buffer; // Provides implementations of buffered input classes, such as CircularBufferInputStream and PeekableInputStream.\nInterface Tailer.RandomAccessResourceBridge; // Bridges access to a resource for random access, normally a file.\nInterface Tailer.Tailable; // A tailable resource like a file.\nInterface TailerListener; // Listener for events from a Tailer.\nClass AbstractCharacterFilterReader; // A filter reader that filters out characters where subclasses decide which characters to filter out.\nClass AutoCloseInputStream; // Proxy stream that closes and discards the underlying stream as soon as the end of input has been reached or when the stream is explicitly closed.\nClass AutoCloseInputStream.Builder; // Builds a new AutoCloseInputStream instance.\nClass BOMInputStream; // This class is used to wrap a stream that includes an encoded ByteOrderMark as its first bytes.\nClass BOMInputStream.Builder; // Builds a new BOMInputStream instance.\nClass BoundedInputStream; // Reads bytes up to a maximum length, if its count goes above that, it stops.\nClass BoundedReader; // A reader that imposes a limit to the number of characters that can be read from an underlying reader, returning EOF when this limit is reached, regardless of state of underlying reader.\nClass BrokenInputStream; // Always throws an IOException from all the InputStream methods where the exception is declared.\nClass BrokenReader; // Always throws an IOException from all the Reader methods where the exception is declared.\nClass BufferedFileChannelInputStream; // InputStream implementation which uses direct buffer to read a file to avoid extra copy of data between Java and native memory which happens when using BufferedInputStream.\nClass BufferedFileChannelInputStream.Builder; // Builds a new BufferedFileChannelInputStream instance.\nClass CharacterFilterReader; // A filter reader that filters out a given character represented as an int code point, handy to remove known junk characters from CSV files for example.\nClass CharacterSetFilterReader; // A filter reader that removes a given set of characters represented as int code points, handy to remove known junk characters from CSV files for example.\nClass CharSequenceInputStream; // Implements an InputStream to read from String, StringBuffer, StringBuilder or CharBuffer.\nClass CharSequenceInputStream.Builder; // Builds a new CharSequenceInputStream instance.\nClass CharSequenceReader; // Reader implementation that can read from String, StringBuffer, StringBuilder or CharBuffer.\n", "des": "Provides implementations of input classes, such as InputStream and Reader."}
{"index": 1051, "repo": "commons-io-2.13.0", "code": "package buffer;\n\nClass CircularBufferInputStream; // Implements a buffered input stream, which is internally based on a CircularByteBuffer.\nClass CircularByteBuffer; // A buffer, which doesn't need reallocation of byte arrays, because it reuses a single byte array.\nClass PeekableInputStream; // Implements a buffered input stream, which allows to peek into the buffers first bytes.\n", "des": "Provides implementations of buffered input classes, such as CircularBufferInputStream and PeekableInputStream."}
{"index": 1052, "repo": "commons-io-2.13.0", "code": "package monitor;\n\nInterface FileAlterationListener; // Receives events of file system modifications.\nClass FileAlterationListenerAdaptor; // Convenience FileAlterationListener implementation that does nothing.\nClass FileAlterationMonitor; // A runnable that spawns a monitoring thread triggering any registered FileAlterationObserver at a specified interval.\nClass FileAlterationObserver; // FileAlterationObserver represents the state of files below a root directory, checking the file system and notifying listeners of create, change or delete events.\nClass FileEntry; // The state of a file or directory, capturing the following File attributes at a point in time.\n", "des": "Provides a component for monitoring file system events (directory and file create, update and delete events)."}
{"index": 1053, "repo": "commons-io-2.13.0", "code": "package output;\n\nInterface AbstractByteArrayOutputStream.InputStreamConstructor<T extends InputStream>; // Constructor for an InputStream subclass.\nInterface UncheckedAppendable; // An Appendable that throws UncheckedIOException instead of IOException.\nClass AbstractByteArrayOutputStream; // This is the base class for implementing an output stream in which the data is written into a byte array.\nClass AppendableOutputStream<T extends Appendable>; // OutputStream implementation that writes the data to an Appendable Object.\nClass AppendableWriter<T extends Appendable>; // Writer implementation that writes the data to an Appendable Object.\nClass BrokenOutputStream; // Broken output stream.\nClass BrokenWriter; // Always throws an IOException from all Writer methods.\nClass ByteArrayOutputStream; // Implements a ThreadSafe version of AbstractByteArrayOutputStream using instance synchronization.\nClass ChunkedOutputStream; // OutputStream which breaks larger output blocks into chunks.\nClass ChunkedOutputStream.Builder; // Builds a new UnsynchronizedByteArrayOutputStream instance.\nClass ChunkedWriter; // Writer which breaks larger output blocks into chunks.\nClass ClosedOutputStream; // Throws an IOException on all attempts to write to the stream.\nClass ClosedWriter; // Throws an IOException on all attempts to write with ClosedWriter.close() implemented as a noop.\nClass CloseShieldOutputStream; // Proxy stream that prevents the underlying output stream from being closed.\nClass CloseShieldWriter; // Proxy writer that prevents the underlying writer from being closed.\nClass CountingOutputStream; // A decorating output stream that counts the number of bytes that have passed through the stream so far.\nClass DeferredFileOutputStream; // An output stream which will retain data in memory until a specified threshold is reached, and only then commit it to disk.\nClass DeferredFileOutputStream.Builder; // Builds a new DeferredFileOutputStream instance.\nClass DemuxOutputStream; // Forwards data to a stream that has been associated with this thread.\nClass FileWriterWithEncoding; // Writer of files that allows the encoding to be set.\nClass FileWriterWithEncoding.Builder; // Builds a new FileWriterWithEncoding instance.\nClass FilterCollectionWriter; // Abstract class for writing filtered character streams to a Collection of writers.\nClass LockableFileWriter; // FileWriter that will create and honor lock files to allow simple cross thread file lock handling.\nClass LockableFileWriter.Builder; // Builds a new LockableFileWriter instance.\n", "des": "Provides implementations of output classes, such as OutputStream and Writer."}
{"index": 1054, "repo": "commons-io-2.13.0", "code": "package serialization;\n\nInterface ClassNameMatcher; // An object that matches a Class name to a condition.\nClass ValidatingObjectInputStream; // An ObjectInputStream that's restricted to deserialize a limited set of classes.\n", "des": "Provides a framework for controlling the deserialization of classes."}
{"index": 1055, "repo": "commons-rdf-api-0.5.0", "code": "package api;\n\nInterface BlankNode; // A RDF-1.1 Blank Node, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014. Note: Blank nodes are disjoint from IRIs and literals.\nInterface BlankNodeOrIRI; // This interface represents the RDFTerms that may be used in the subject position of an RDF-1.1 Triple as well as the graph name position of a Quad.\nInterface Dataset; // An RDF 1.1 Dataset, a set of RDF quads, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014.\nInterface Graph; // An RDF 1.1 Graph, a set of RDF triples, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014.\nInterface GraphLike<T extends TripleLike>; // A \"graph-like\" interface that contains TripleLike statements.\nInterface IRI; // An RDF-1.1 IRI, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014.\nInterface Literal; // An RDF-1.1 Literal, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014.\nInterface Quad; // A Quad is a statement in a RDF-1.1 Dataset, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Working Group Note published on 25 February 2014.\nInterface QuadLike<G extends RDFTerm>; // A generalised \"quad-like\" interface, extended by Quad.\nInterface RDF; // A RDF implementation.\nInterface RDFSyntax; // An RDF syntax, e.g.\nInterface RDFTerm; // An RDF-1.1 Term, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014.\nInterface RDFTermFactory;\nInterface Triple; // An RDF-1.1 Triple, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014.\n", "des": "Commons RDF, a common library of RDF 1.1 concepts."}
{"index": 1056, "repo": "commons-rdf-api-0.5.0", "code": "package experimental;\n\nInterface RDFParser; // Parse an RDF source into a target (e.g.\nInterface RDFParser.ParseResult; // The result of RDFParser.parse() indicating parsing completed.\n", "des": "Experimental Commons RDF features."}
{"index": 1057, "repo": "avro-1.11.2", "code": "package avro;\n\npackage avro.data; // Interfaces and base classes shared by generic, specific and reflect.\npackage avro.file; // A container file for Avro data.\npackage avro.generic; // A generic representation for Avro data.\npackage avro.io; // Utilities for Encoding and Decoding Avro data.\npackage avro.path; // Interfaces and base classes for AvroPath.\npackage avro.reflect; // Use Java reflection to generate schemas and protocols for existing classes.\npackage avro.specific; // Generate specific Java classes for schemas and protocols.\npackage avro.util; // Common utility classes.\nInterface LogicalTypes.LogicalTypeFactory; // Factory interface and SPI for logical types.\nInterface SchemaValidationStrategy; // An interface for validating the compatibility of a single schema against another.\nInterface SchemaValidator; // A SchemaValidator has one method, which validates that a Schema is compatible with the other schemas provided.\nClass Conversion<T>; // Conversion between generic and logical type instances.\nClass Conversions;\nClass Conversions.DecimalConversion;\nClass Conversions.UUIDConversion;\nClass JsonProperties; // Base class for objects that have JSON-valued properties.\nClass JsonProperties.Null;\nClass LogicalType; // Logical types provides an opt-in way to extend Avro's types.\nClass LogicalTypes;\nClass LogicalTypes.Date; // Date represents a date without a time\nClass LogicalTypes.Decimal; // Decimal represents arbitrary-precision fixed-scale decimal numbers\nClass LogicalTypes.LocalTimestampMicros;\nClass LogicalTypes.LocalTimestampMillis;\nClass LogicalTypes.TimeMicros; // TimeMicros represents a time in microseconds without a date\nClass LogicalTypes.TimeMillis; // TimeMillis represents a time in milliseconds without a date\nClass LogicalTypes.TimestampMicros; // TimestampMicros represents a date and time in microseconds\nClass LogicalTypes.TimestampMillis; // TimestampMillis represents a date and time in milliseconds\nClass Protocol; // A set of messages forming an application protocol.\nClass Resolver; // Encapsulate schema-resolution logic in an easy-to-consume representation.\nClass Resolver.Action; // An abstract class for an action to be taken to resolve a writer's schema (found in public instance variable writer) against a reader's schema (in reader).\n", "des": "Avro kernel classes."}
{"index": 1058, "repo": "avro-1.11.2", "code": "package data;\n\nInterface ErrorBuilder<T>; // Interface for error builders\nInterface RecordBuilder<T>; // Interface for record builders\nClass Json; // Utilities for reading and writing arbitrary Json data in Avro format.\nClass Json.ObjectReader; // DatumReader for arbitrary Json data using the object model described in JsonProperties.\nClass Json.ObjectWriter; // DatumWriter for arbitrary Json data using the object model described in JsonProperties.\nClass RecordBuilderBase<T extends IndexedRecord>; // Abstract base class for RecordBuilder implementations.\nClass TimeConversions;\nClass TimeConversions.DateConversion;\nClass TimeConversions.LocalTimestampMicrosConversion;\nClass TimeConversions.LocalTimestampMillisConversion;\nClass TimeConversions.TimeMicrosConversion;\nClass TimeConversions.TimeMillisConversion;\nClass TimeConversions.TimestampMicrosConversion;\nClass TimeConversions.TimestampMillisConversion;\n", "des": "Interfaces and base classes shared by generic, specific and reflect."}
{"index": 1059, "repo": "avro-1.11.2", "code": "package file;\n\nInterface FileReader<D>; // Interface for reading data from a file.\nInterface SeekableInput; // An InputStream that supports seek and tell.\nInterface Syncable;\nClass BZip2Codec; // Implements bzip2 compression and decompression.\nClass Codec; // Interface for Avro-supported compression codecs for data files.\nClass CodecFactory; // Encapsulates the ability to specify and configure a compression codec.\nClass DataFileConstants; // Constants used in data files.\nClass DataFileReader<D>; // Random access to files written with DataFileWriter.\nClass DataFileReader12<D>; // Read files written by Avro version 1.2.\nClass DataFileStream<D>; // Streaming access to files written by DataFileWriter.\nClass DataFileStream.Header; // A handle that can be used to reopen a DataFile without re-reading the header of the stream.\nClass DataFileWriter<D>; // Stores in a file a sequence of data conforming to a schema.\nClass DeflateCodec; // Implements DEFLATE (RFC1951) compression and decompression.\nClass SeekableByteArrayInput; // A SeekableInput backed with data in a byte array.\nClass SeekableFileInput; // A FileInputStream that implements SeekableInput.\nClass SnappyCodec; // Implements Snappy compression and decompression.\nClass SyncableFileOutputStream; // An implementation of Syncable which writes to a file.\nClass XZCodec; // Implements xz compression and decompression.\nClass ZstandardCodec;\nClass DataFileWriter.AppendWriteException; // Thrown by DataFileWriter.append(Object) when an exception occurs while writing a datum to the buffer.\n", "des": "A container file for Avro data."}
{"index": 1060, "repo": "avro-1.11.2", "code": "package generic;\n\nInterface GenericArray<T>; // Array that permits reuse of contained elements.\nInterface GenericContainer; // Contains data of other types.\nInterface GenericData.InstanceSupplier;\nInterface GenericEnumSymbol<E extends GenericEnumSymbol<E>>; // An enum symbol.\nInterface GenericFixed; // Fixed-size data.\nInterface GenericRecord; // A generic instance of a record schema.\nInterface IndexedRecord; // A record implementation that permits field access by integer index.\nClass GenericData; // Utilities for generic Java data.\nClass GenericData.Array<T>; // Default implementation of an array.\nClass GenericData.EnumSymbol; // Default implementation of GenericEnumSymbol.\nClass GenericData.Fixed; // Default implementation of GenericFixed.\nClass GenericData.Record; // Default implementation of GenericRecord.\nClass GenericDatumReader<D>; // DatumReader for generic Java objects.\nClass GenericDatumWriter<D>; // DatumWriter for generic Java objects.\nClass GenericRecordBuilder; // A RecordBuilder for generic records.\nEnum GenericData.StringType; // Used to specify the Java type for a string schema.\n", "des": "A generic representation for Avro data."}
{"index": 1061, "repo": "avro-1.11.2", "code": "package io;\n\npackage io.parsing; // Implementation of Avro schemas as LL(1) grammars.\nInterface DatumReader<D>; // Read data of a schema.\nInterface DatumWriter<D>; // Write data of a schema.\nInterface FastReaderBuilder.ExecutionStep;\nInterface FastReaderBuilder.FieldReader;\nInterface FastReaderBuilder.ReusingFieldReader;\nClass BinaryData; // Utilities for binary-encoded data.\nClass BinaryDecoder; // An Decoder for binary-format data.\nClass BinaryEncoder; // An abstract Encoder for Avro's binary encoding.\nClass BlockingBinaryEncoder; // A BinaryEncoder implementation that writes large arrays and maps as a sequence of blocks.\nClass BufferedBinaryEncoder; // An Encoder for Avro's binary encoding.\nClass Decoder; // Low-level support for de-serializing Avro values.\nClass DecoderFactory; // A factory for creating and configuring Decoders.\nClass DirectBinaryEncoder; // An Encoder for Avro's binary encoding that does not buffer output.\nClass Encoder; // Low-level support for serializing Avro values.\nClass EncoderFactory; // A factory for creating and configuring Encoder instances.\nClass FastReaderBuilder;\nClass FastReaderBuilder.MapReader;\nClass FastReaderBuilder.RecordReader;\nClass JsonDecoder; // A Decoder for Avro's JSON data encoding.\nClass JsonEncoder; // An Encoder for Avro's JSON data encoding.\nClass ParsingDecoder; // Base class for parser-based Decoders.\nClass ParsingEncoder; // Base class for parser-based Encoders.\nClass ResolvingDecoder; // Decoder that performs type-resolution between the reader's and writer's schemas.\nClass ValidatingDecoder; // An implementation of Decoder that ensures that the sequence of operations conforms to a schema.\nClass ValidatingEncoder; // An implementation of Encoder that wraps another Encoder and ensures that the sequence of operations conforms to the provided schema.\nEnum FastReaderBuilder.RecordReader.Stage;\n", "des": "Utilities for Encoding and Decoding Avro data."}
{"index": 1062, "repo": "avro-1.11.2", "code": "package parsing;\n\nInterface Parser.ActionHandler; // The parser knows how to handle the terminal and non-terminal symbols.\nInterface SkipParser.SkipHandler; // The clients implement this interface to skip symbols and actions.\nClass JsonGrammarGenerator; // The class that generates a grammar suitable to parse Avro data in JSON format.\nClass Parser; // Parser is the class that maintains the stack for parsing.\nClass ResolvingGrammarGenerator; // The class that generates a resolving grammar to resolve between two schemas.\nClass SkipParser; // A parser that capable of skipping as well read and write.\nClass Symbol; // Symbol is the base of all symbols (terminals and non-terminals) of the grammar.\nClass Symbol.Alternative;\nClass Symbol.DefaultStartAction;\nClass Symbol.EnumAdjustAction;\nClass Symbol.EnumLabelsAction;\nClass Symbol.ErrorAction;\nClass Symbol.FieldAdjustAction;\nClass Symbol.FieldOrderAction;\nClass Symbol.ImplicitAction;\nClass Symbol.IntCheckAction;\nClass Symbol.Repeater;\nClass Symbol.ResolvingAction;\nClass Symbol.Root;\nClass Symbol.Sequence;\nClass Symbol.SkipAction;\nClass Symbol.UnionAdjustAction;\nClass Symbol.WriterUnionAction;\nClass ValidatingGrammarGenerator; // The class that generates validating grammar.\nEnum Symbol.Kind;\n", "des": "Implementation of Avro schemas as LL(1) grammars."}
{"index": 1063, "repo": "avro-1.11.2", "code": "package path;\n\nInterface PathElement; // root interface for all pieces of an AvroPath expression\nInterface PathPredicate; // a predicate is a filter that restricts items selected by a LocationStep\nInterface PathTracingException<T extends Throwable>; // interface for exceptions that can trace the AvroPath of an error\nInterface PositionalPathPredicate; // filters items by their context position\nClass ArrayPositionPredicate; // Returns items by their position (numeric index) in an array\nClass LocationStep; // Selects items based on their \"path\" (name of a property under which they are stored) relative to the context.\nClass MapKeyPredicate; // Returns items by their position (string key under which they are stored) in a map\nClass UnionTypePredicate; // Returns items by their position (numeric index of type) in a union schema\nClass TracingAvroTypeException; // an AvroTypeException with extra fields used to trace back the path to a bad value through an object graph\nClass TracingClassCastException; // a ClassCastException with extra fields used to trace back the path to a bad value through an object graph\nClass TracingNullPointException; // a NullPointerException with extra fields used to trace back the path to a null value through an object graph\n", "des": "Interfaces and base classes for AvroPath."}
{"index": 1064, "repo": "avro-1.11.2", "code": "package reflect;\n\nClass CustomEncoding<T>; // Expert: a custom encoder and decoder that writes an object directly to avro.\nClass DateAsLongEncoding; // This encoder/decoder writes a java.util.Date object as a long to avro and reads a Date object from long.\nClass MapEntry<K,V>; // Use org.apache.avro.util.MapEntry\nClass ReflectData; // Utilities to use existing Java classes and interfaces via reflection.\nClass ReflectData.AllowNull; // ReflectData implementation that permits null field values.\nClass ReflectDatumReader<T>; // DatumReader for existing classes via Java reflection.\nClass ReflectDatumWriter<T>; // DatumWriter for existing classes via Java reflection.\nClass ReflectionUtil; // A few utility methods for using @link{java.misc.Unsafe}, mostly for private use.\nAnnotation Type AvroAlias; // Adds the given name and space as an alias to the schema.\nAnnotation Type AvroAliases;\nAnnotation Type AvroDefault; // Specifies a default value for a field as a JSON string.\nAnnotation Type AvroDoc; // Sets the avrodoc for this java field.\nAnnotation Type AvroEncode; // Expert: Fields with this annotation are encoded using the given custom encoder.\nAnnotation Type AvroIgnore; // Marks a field as transient.\nAnnotation Type AvroMeta; // Adds the given key:Value pair as metadata into the schema, at the corresponding node.\nAnnotation Type AvroMeta.AvroMetas;\nAnnotation Type AvroName; // Sets the avroname for this java field.\nAnnotation Type AvroSchema; // Declares that a Java type should have a specified Avro schema, overriding the normally inferred schema.\nAnnotation Type Nullable; // Declares that null is a valid value for a Java type.\nAnnotation Type Stringable; // Declares that a class or field should be represented by an Avro string.\nAnnotation Type Union; // Declares that a Java type should be represented by an Avro union schema.\n", "des": "Use Java reflection to generate schemas and protocols for existing classes."}
{"index": 1065, "repo": "avro-1.11.2", "code": "package specific;\n\nInterface SpecificData.SchemaConstructable; // Tag interface that indicates that a class has a one-argument constructor that accepts a Schema.\nInterface SpecificRecord; // Implemented by generated record classes.\nClass SpecificData; // Utilities for generated Java classes and interfaces.\nClass SpecificDatumReader<T>; // DatumReader for generated Java classes.\nClass SpecificDatumWriter<T>; // DatumWriter for generated Java classes.\nClass SpecificErrorBuilderBase<T extends SpecificExceptionBase>; // Abstract base class for specific ErrorBuilder implementations.\nClass SpecificFixed; // Base class for generated fixed-sized data classes.\nClass SpecificRecordBase; // Base class for generated record classes.\nClass SpecificRecordBuilderBase<T extends SpecificRecord>; // Abstract base class for specific RecordBuilder implementations.\nClass SpecificExceptionBase; // Base class for specific exceptions.\nAnnotation Type AvroGenerated; // Indicates that an annotated class is an Avro generated class.\nAnnotation Type FixedSize; // Declares the size of implementations of GenericFixed.\n", "des": "Generate specific Java classes for schemas and protocols."}
{"index": 1066, "repo": "avro-1.11.2", "code": "package util;\n\nClass ByteBufferInputStream; // Utility to present ByteBuffer data as an InputStream.\nClass ByteBufferOutputStream; // Utility to collect data written to an OutputStream in ByteBuffers.\nClass ClassUtils;\nClass MapEntry<K,V>; // An implementation of Map.Entry with well-defined member names.\nClass MapUtil;\nClass NonCopyingByteArrayOutputStream; // Utility to make data written to an ByteArrayOutputStream directly available as a ByteBuffer.\nClass RandomData; // Generates schema data as Java objects with random values.\nClass ReusableByteArrayInputStream;\nClass ReusableByteBufferInputStream;\nClass SchemaUtil;\nClass Utf8; // A Utf8 string.\nClass WeakIdentityHashMap<K,V>; // Implements a combination of WeakHashMap and IdentityHashMap.\n", "des": "Common utility classes."}
{"index": 1067, "repo": "accumulo-client-mapreduce-2.0.0-alpha-1", "code": "package impl;\n\nClass ConfiguratorBase;\nClass DistributedCacheHelper;\nClass FileOutputConfigurator;\nClass InputConfigurator;\nClass MapReduceClientOnDefaultTable;\nClass MapReduceClientOnRequiredTable;\nClass MapReduceClientOpts; // Adds some MR awareness to the ClientOpts\nClass OutputConfigurator;\nEnum ConfiguratorBase.ClientOpts;\nEnum ConfiguratorBase.ConnectorInfo; // Specifies that connection info was configured\nEnum ConfiguratorBase.GeneralOpts; // Configuration keys for general configuration options.\nEnum FileOutputConfigurator.Opts; // Configuration keys for AccumuloConfiguration.\nEnum InputConfigurator.Features; // Configuration keys for various features.\nEnum InputConfigurator.ScanOpts; // Configuration keys for Scanner.\nEnum OutputConfigurator.Features; // Configuration keys for various features.\nEnum OutputConfigurator.WriteOpts; // Configuration keys for BatchWriter.\n", "des": "This package exists to store common helpers for configuring MapReduce jobs in a single location."}
{"index": 1068, "repo": "hadoop-yarn-common-3.3.6", "code": "package pb;\n\nClass PlacementConstraintFromProtoConverter; // PlacementConstraintFromProtoConverter generates an PlacementConstraint.AbstractConstraint given a YarnProtos.PlacementConstraintProto.\nClass PlacementConstraintToProtoConverter; // PlacementConstraintToProtoConverter generates a YarnProtos.PlacementConstraintProto given a PlacementConstraint.AbstractConstraint.\n", "des": "API related to protobuf objects that are not backed by PBImpl classes."}
{"index": 1069, "repo": "hadoop-yarn-common-3.3.6", "code": "package resource;\n\nClass PlacementConstraintTransformations; // This class contains inner classes that define transformation on a PlacementConstraint expression.\nClass PlacementConstraintTransformations.AbstractTransformer; // The default implementation of the PlacementConstraint.Visitor that does a traversal of the constraint tree, performing no action for the lead constraints.\nClass PlacementConstraintTransformations.SingleConstraintTransformer; // Visits a PlacementConstraint tree and substitutes each PlacementConstraint.TargetConstraint and PlacementConstraint.CardinalityConstraint with an equivalent PlacementConstraint.SingleConstraint.\nClass PlacementConstraintTransformations.SpecializedConstraintTransformer; // Visits a PlacementConstraint tree and, whenever possible, substitutes each PlacementConstraint.SingleConstraint with a PlacementConstraint.TargetConstraint.\n", "des": "API related to resources."}
{"index": 1070, "repo": "hadoop-yarn-common-3.3.6", "code": "package api;\n\npackage api.impl; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\nClass AppAdminClient; // Client for managing applications.\nClass TimelineClient; // A client library that can be used to post some information in terms of a number of conceptual entities.\nClass TimelineReaderClient; // A client library that can be used to get Timeline Entities associated with application, application attempt or containers.\nClass TimelineV2Client; // A client library that can be used to post some information in terms of a number of conceptual entities.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1071, "repo": "hadoop-yarn-common-3.3.6", "code": "package impl;\n\nClass DirectTimelineWriter; // A simple writer class for storing Timeline data into Leveldb store.\nClass FileSystemTimelineWriter; // A simple writer class for storing Timeline data in any storage that implements a basic FileSystem interface.\nClass TimelineClientImpl;\nClass TimelineConnector; // Utility Connector class which is used by timeline clients to securely get connected to the timeline server.\nClass TimelineConnector.TimelineClientRetryOp; // Abstract class for an operation that should be retried by timeline client.\nClass TimelineConnector.TimelineClientRetryOpForOperateDelegationToken;\nClass TimelineReaderClientImpl; // Implementation of TimelineReaderClient interface.\nClass TimelineV2ClientImpl; // Implementation of timeline v2 client interface.\nClass TimelineWriter; // Base writer class to write the Timeline data.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1072, "repo": "hadoop-yarn-common-3.3.6", "code": "package metrics;\n\nInterface EventTypeMetrics<T extends Enum<T>>;\nClass CustomResourceMetrics; // This is base class for allocated and available metrics for custom resources.\nClass CustomResourceMetricValue; // Class that holds metrics values for custom resources in a map keyed with the name of the custom resource.\nClass DisableEventTypeMetrics;\nClass GenericEventTypeMetrics<T extends Enum<T>>;\nClass GenericEventTypeMetrics.EventTypeMetricsBuilder<T extends Enum<T>>; // Builder class for GenericEventTypeMetrics.\n", "des": "Provides common metrics (available, allocated) for custom resources."}
{"index": 1073, "repo": "hadoop-yarn-common-3.3.6", "code": "package metrics;\n\nClass AppAttemptMetricsConstants;\nClass ApplicationMetricsConstants;\nClass ContainerMetricsConstants;\n", "des": "Yarn Common Metrics package."}
{"index": 1074, "repo": "hadoop-yarn-common-3.3.6", "code": "package dao;\n\nClass ConfInfo; // This class stores the Scheduler Configuration.\nClass ConfInfo.ConfItem; // This class stores the Configuration Property.\nClass QueueConfigInfo; // Information for adding or updating a queue to scheduler configuration for this queue.\nClass SchedConfUpdateInfo; // Information for making scheduler configuration changes (supports adding, removing, or updating a queue, as well as global scheduler conf changes).\n", "des": "Data structures for scheduler configuration mutation info."}
{"index": 1075, "repo": "hadoop-yarn-common-3.3.6", "code": "package hamlet;\n\nInterface HamletSpec._;\nInterface HamletSpec._Anchor;\nInterface HamletSpec._Block; // %block -(FORM|FIELDSET)\nInterface HamletSpec._Body;\nInterface HamletSpec._Cell;\nInterface HamletSpec._Child;\nInterface HamletSpec._Content;\nInterface HamletSpec._Dl;\nInterface HamletSpec._FieldSet;\nInterface HamletSpec._FontSize; // Part of %pre.exclusion\nInterface HamletSpec._FontStyle; // %fontstyle -(%pre.exclusion)\nInterface HamletSpec._Form;\nInterface HamletSpec._FormCtrl;\nInterface HamletSpec._Head;\nInterface HamletSpec._Html;\nInterface HamletSpec._ImgObject; // Part of %pre.exclusion\nInterface HamletSpec._InsDel; // INS and DEL are unusual for HTML \"in that they may serve as either block-level or inline elements (but not both)\".\nInterface HamletSpec._Label;\nInterface HamletSpec._Legend;\nInterface HamletSpec._Li;\nInterface HamletSpec._Object;\nInterface HamletSpec._Option;\nInterface HamletSpec._Param;\nInterface HamletSpec._RawContent;\nInterface HamletSpec._Script;\nInterface HamletSpec._Special; // %special -(A|%pre.exclusion)\nInterface HamletSpec._SubSup; // Part of %pre.exclusion\nInterface HamletSpec._Table;\nInterface HamletSpec._TableCol;\nInterface HamletSpec._TableRow;\nInterface HamletSpec._Tr;\nInterface HamletSpec.A;\nInterface HamletSpec.ABBR;\nInterface HamletSpec.ACRONYM;\nInterface HamletSpec.ADDRESS;\nInterface HamletSpec.AREA;\nInterface HamletSpec.Attrs; // %attrs\nInterface HamletSpec.B;\nInterface HamletSpec.BASE;\nInterface HamletSpec.BDO; // The dir attribute is required for the BDO element\nInterface HamletSpec.Block; // %block\nInterface HamletSpec.BLOCKQUOTE;\n", "des": "Deprecated."}
{"index": 1076, "repo": "hadoop-yarn-common-3.3.6", "code": "package hamlet2;\n\nInterface HamletSpec.__;\nInterface HamletSpec._Anchor;\nInterface HamletSpec._Block; // %block -(FORM|FIELDSET)\nInterface HamletSpec._Body;\nInterface HamletSpec._Cell;\nInterface HamletSpec._Child;\nInterface HamletSpec._Content;\nInterface HamletSpec._Dl;\nInterface HamletSpec._FieldSet;\nInterface HamletSpec._FontSize; // Part of %pre.exclusion\nInterface HamletSpec._FontStyle; // %fontstyle -(%pre.exclusion)\nInterface HamletSpec._Form;\nInterface HamletSpec._FormCtrl;\nInterface HamletSpec._Head;\nInterface HamletSpec._Html;\nInterface HamletSpec._ImgObject; // Part of %pre.exclusion\nInterface HamletSpec._InsDel; // INS and DEL are unusual for HTML \"in that they may serve as either block-level or inline elements (but not both)\".\nInterface HamletSpec._Label;\nInterface HamletSpec._Legend;\nInterface HamletSpec._Li;\nInterface HamletSpec._Object;\nInterface HamletSpec._Option;\nInterface HamletSpec._Param;\nInterface HamletSpec._RawContent;\nInterface HamletSpec._Script;\nInterface HamletSpec._Special; // %special -(A|%pre.exclusion)\nInterface HamletSpec._SubSup; // Part of %pre.exclusion\nInterface HamletSpec._Table;\nInterface HamletSpec._TableCol;\nInterface HamletSpec._TableRow;\nInterface HamletSpec._Tr;\nInterface HamletSpec.A;\nInterface HamletSpec.ABBR;\nInterface HamletSpec.ACRONYM;\nInterface HamletSpec.ADDRESS;\nInterface HamletSpec.AREA;\nInterface HamletSpec.Attrs; // %attrs\nInterface HamletSpec.B;\nInterface HamletSpec.BASE;\nInterface HamletSpec.BDO; // The dir attribute is required for the BDO element\nInterface HamletSpec.Block; // %block\nInterface HamletSpec.BLOCKQUOTE;\n", "des": "This package is the replacement for org.apache.hadoop.yarn.webapp.hamlet."}
{"index": 1077, "repo": "graal-sdk-1.0.0-rc7", "code": "package collections;\n\nInterface EconomicMap<K,V>; // Memory efficient map data structure.\nInterface EconomicSet<E>; // Memory efficient set data structure.\nInterface MapCursor<K,V>; // Cursor to iterate over a mutable map.\nInterface UnmodifiableEconomicMap<K,V>; // Unmodifiable memory efficient map data structure.\nInterface UnmodifiableEconomicSet<E>; // Unmodifiable memory efficient set data structure.\nInterface UnmodifiableMapCursor<K,V>; // Cursor to iterate over a map without changing its contents.\nClass Equivalence; // Strategy for comparing two objects.\nClass Pair<L,R>; // Utility class representing a pair of values.\n", "des": "The Graal-SDK collections package contains memory efficient data structures."}
{"index": 1078, "repo": "graal-sdk-1.0.0-rc7", "code": "package nativeimage;\n\npackage nativeimage.c; // This package and its sub-packages provide a fast and lightweight interface between Java code and C code.\nInterface Feature; // Features allow clients to intercept the native image generation and run custom initialization code at various stages.\nInterface Feature.AfterAnalysisAccess; // Access methods available for Feature.afterAnalysis(org.graalvm.nativeimage.Feature.AfterAnalysisAccess).\nInterface Feature.AfterCompilationAccess; // Access methods available for Feature.afterCompilation(org.graalvm.nativeimage.Feature.AfterCompilationAccess).\nInterface Feature.AfterHeapLayoutAccess; // Access methods available for Feature.afterHeapLayout(org.graalvm.nativeimage.Feature.AfterHeapLayoutAccess).\nInterface Feature.AfterImageWriteAccess; // Access methods available for Feature.afterImageWrite(org.graalvm.nativeimage.Feature.AfterImageWriteAccess).\nInterface Feature.AfterRegistrationAccess; // Access methods available for Feature.afterRegistration(org.graalvm.nativeimage.Feature.AfterRegistrationAccess).\nInterface Feature.BeforeAnalysisAccess; // Access methods available for Feature.beforeAnalysis(org.graalvm.nativeimage.Feature.BeforeAnalysisAccess).\nInterface Feature.BeforeCompilationAccess; // Access methods available for Feature.beforeCompilation(org.graalvm.nativeimage.Feature.BeforeCompilationAccess).\nInterface Feature.BeforeImageWriteAccess; // Access methods available for Feature.beforeImageWrite(org.graalvm.nativeimage.Feature.BeforeImageWriteAccess).\nInterface Feature.CompilationAccess; // Access methods available for Feature.beforeCompilation(org.graalvm.nativeimage.Feature.BeforeCompilationAccess) and Feature.afterCompilation(org.graalvm.nativeimage.Feature.AfterCompilationAccess).\nInterface Feature.DuringAnalysisAccess; // Access methods available for Feature.duringAnalysis(org.graalvm.nativeimage.Feature.DuringAnalysisAccess).\nInterface Feature.DuringSetupAccess; // Access methods available for Feature.duringSetup(org.graalvm.nativeimage.Feature.DuringSetupAccess).\nInterface Feature.FeatureAccess; // Access methods that are available for all feature methods.\nInterface Feature.IsInConfigurationAccess; // Access methods available for Feature.isInConfiguration(org.graalvm.nativeimage.Feature.IsInConfigurationAccess).\n", "des": "The Graal-SDK native-image API allows to customize the native image generation, i.e., the ahead-of-time compilation of Java code to standalone executables."}
{"index": 1079, "repo": "graal-sdk-1.0.0-rc7", "code": "package c;\n\npackage c.constant; // This package provides parts of the Java / C interface that are related to C constants.\npackage c.function; // This package provides parts of the Java / C interface that are related to C functions.\npackage c.struct; // This package provides parts of the Java / C interface that are related to C structures.\npackage c.type; // This package provides parts of the Java / C interface that are related to standard C pointer types, as well as utility functions to convert between Java types and C types.\nInterface CContext.Directives; // Describes a C context.\nAnnotation Type CContext; // Defines the context for most other annotations of the C interface: the C header files that need to be imported, the C macros that need to be defined to properly configure these headers, and additional flags that should be passed to the C compiler when analyzing the definitions.\n", "des": "This package and its sub-packages provide a fast and lightweight interface between Java code and C code."}
{"index": 1080, "repo": "graal-sdk-1.0.0-rc7", "code": "package constant;\n\nClass CConstant.ValueAccess; // Allows access to the value of a CConstant during image generation.\nAnnotation Type CConstant; // Denotes a method as a C constant value.\nAnnotation Type CEnum; // Annotation to import a C enumeration to Java.\nAnnotation Type CEnumConstant; // Provides additional properties for a field (i.e., an enumeration value) of Java enumeration annotated with CEnum.\nAnnotation Type CEnumLookup; // Annotation for a method that returns the Java enumeration object for a given C integer value.\nAnnotation Type CEnumValue; // Annotation for a method that returns the C integer value for a Java enumeration object.\n", "des": "This package provides parts of the Java / C interface that are related to C constants."}
{"index": 1081, "repo": "graal-sdk-1.0.0-rc7", "code": "package function;\n\nInterface CFunctionPointer; // Base interface for all function pointers.\nInterface CodePointer; // Pointer to executable code.\nInterface RelocatedPointer; // A pointer which is relocated when the native image is loaded at runtime.\nClass CEntryPoint.FatalExceptionHandler; // Special placeholder value for CEntryPoint.exceptionHandler() to print the caught exception and treat it as a fatal error.\nClass CEntryPointContext; // Utility methods that provide access to the current isolate.\nClass CEntryPointLiteral<T extends CFunctionPointer>; // A function pointer to an entry point method that can be, for example, handed out to C code so that C code can call back into Java code.\nEnum CEntryPoint.Builtin; // The built-in methods which can be aliased.\nEnum CFunction.Transition; // Describes the thread state transition performed when the C function is invoked.\nAnnotation Type CEntryPoint; // Annotates a method that is a VM entry point.\nAnnotation Type CEntryPoint.IsolateContext; // Designates an Isolate parameter to use as the execution context.\nAnnotation Type CEntryPoint.IsolateThreadContext; // Designates an IsolateThread parameter to use as the execution context.\nAnnotation Type CFunction; // Denotes a static native method that calls directly from Java to C, without following the JNI protocol.\nAnnotation Type CLibrary; // Denotes an external library that needs to be linked in.\nAnnotation Type CMacroInfo; // Informational only.\nAnnotation Type InvokeCFunctionPointer; // Annotation for an invocation method defined in a sub-interface of CFunctionPointer.\n", "des": "This package provides parts of the Java / C interface that are related to C functions."}
{"index": 1082, "repo": "graal-sdk-1.0.0-rc7", "code": "package struct;\n\nClass SizeOf; // Contains static methods that provide access to the size of dereferenced SystemJava pointer types (i.e.\nAnnotation Type AllowNarrowingCast; // Allows a method annotated with CField to have a value type that is narrower (smaller number of bits) than the C type.\nAnnotation Type AllowWideningCast; // Allows a method annotated with CField to have a value type that is wider (larger number of bits) than the C type.\nAnnotation Type CBitfield; // Denotes a method as a bitfield access of a C struct.\nAnnotation Type CField; // Denotes a method as a field access of a C struct.\nAnnotation Type CFieldAddress; // Denotes a method as a field address computation of a C struct.\nAnnotation Type CFieldOffset; // Denotes a method as a field offset access of a C struct.\nAnnotation Type CPointerTo; // Denotes Java interface that imports a C pointer type.\nAnnotation Type CStruct; // Denotes Java interface that imports a C struct.\nAnnotation Type CTypedefOfInfo; // Informational only.\nAnnotation Type RawField; // Denotes a method as a field access of a structured C memory.\nAnnotation Type RawStructure; // Denotes Java interface that represents C memory, but without a C struct definition.\nAnnotation Type UniqueLocationIdentity; // A CField also annotated with this annotation gets a unique LocationIdentity assigned, i.e., reads and writes do not interfere with reads and writes to any other field and are optimized without regarding other fields.\n", "des": "This package provides parts of the Java / C interface that are related to C structures."}
{"index": 1083, "repo": "graal-sdk-1.0.0-rc7", "code": "package type;\n\nInterface CCharPointer; // A pointer to a 8-bit C primitive value.\nInterface CCharPointerPointer; // A pointer to a pointer to a 8-bit C primitive value.\nInterface CDoublePointer; // A pointer to a C primitive 'double' value.\nInterface CFloatPointer; // A pointer to a C primitive 'float' value.\nInterface CIntPointer; // A pointer to a 32-bit C primitive value.\nInterface CIntPointerPointer; // A pointer to a pointer to a 32-bit C primitive value.\nInterface CLongPointer; // A pointer to a 64-bit C primitive value.\nInterface CShortPointer; // A pointer to a 16-bit C primitive value.\nInterface CTypeConversion.CCharPointerHolder; // An auto-closable that holds a Java CharSequence as a null-terminated C char[] array.\nInterface VoidPointer; // A void* pointer to an opaque C value of an unknown type, without any methods to read or write.\nInterface WordPointer; // A untyped C pointer to any machine-word-sized value, e.g., a pointer to another pointer or a pointer to a UnsignedWord or SignedWord value.\nClass CTypeConversion; // Utility methods to convert between Java types and C types.\nClass CTypeConversion.CCharPointerPointerHolder; // An auto-closable that holds a Java CharSequence[] array as a null-terminated array of null-terminated C char[]s.\n", "des": "This package provides parts of the Java / C interface that are related to standard C pointer types, as well as utility functions to convert between Java types and C types."}
{"index": 1084, "repo": "graal-sdk-1.0.0-rc7", "code": "package options;\n\nInterface OptionDescriptors; // An interface to a set of OptionDescriptors.\nInterface OptionValues; // Represents a set of option values based on an OptionDescriptor.\nClass OptionDescriptor; // Represents metadata for a single option.\nClass OptionKey<T>; // Represents the option key for an option specification.\nClass OptionType<T>; // Represents a type of an option that allows to convert string values to Java values.\nEnum OptionCategory; // Categorizes options according to user relevance.\n", "des": "The Graal-SDK options package contains reusable collection classes for options."}
{"index": 1085, "repo": "graal-sdk-1.0.0-rc7", "code": "package polyglot;\n\npackage polyglot.io; // Input/Output support for the Graal-SDK polyglot API.\npackage polyglot.management; // The management package provides tools that monitor and instrument the behavior of guest language programs.\npackage polyglot.proxy; // The Graal SDK proxy interfaces allow to mimic guest language objects, arrays, executables, primitives and native objects in Graal languages.\nClass Context; // A polyglot context for Graal guest languages that allows to evaluate code.\nClass Engine; // An execution engine for Graal guest languages that allows to inspect the the installed guest languages, instruments and their available options.\nClass Instrument; // A handle for an instrument installed in an engine.\nClass Language; // A handle for a Graal language installed in an engine.\nClass Source; // Representation of a source code unit and its contents that can be evaluated in an execution context.\nClass SourceSection; // Description of contiguous section of text within a Source of program code.; supports multiple modes of access to the text and its location.\nClass TypeLiteral<T>; // Represents a generic type T.\nClass Value; // Represents a polyglot value that can be accessed using a set of language agnostic operations.\nClass PolyglotException; // A polyglot exception represents errors that contain Graal guest languages on the stack trace.\n", "des": "The Graal-SDK polyglot API allows to embed Graal languages in Java applications."}
{"index": 1086, "repo": "graal-sdk-1.0.0-rc7", "code": "package io;\n\nInterface ByteSequence; // A ByteSequence is a readable sequence of byte values.\nInterface FileSystem; // Service-provider for Truffle files.\n", "des": "Input/Output support for the Graal-SDK polyglot API."}
{"index": 1087, "repo": "graal-sdk-1.0.0-rc7", "code": "package management;\n\nClass ExecutionEvent; // An execution event object passed to an execution listener consumer.\nClass ExecutionListener; // Execution listeners allow to instrument the execution of guest languages.\n", "des": "The management package provides tools that monitor and instrument the behavior of guest language programs."}
{"index": 1088, "repo": "graal-sdk-1.0.0-rc7", "code": "package proxy;\n\nInterface Proxy; // Proxy interfaces allow to mimic guest language objects, arrays, executables, primitives and native objects in Graal languages.\nInterface ProxyArray; // Interface to be implemented to mimic guest language arrays.\nInterface ProxyExecutable; // Interface to be implemented to mimic guest language objects that are executable.\nInterface ProxyInstantiable; // Interface to be implemented to mimic guest language objects that are instantiable.\nInterface ProxyNativeObject; // Interface to be implemented to mimic native pointers.\nInterface ProxyObject; // Interface to be implemented to mimic guest language objects that contain members.\n", "des": "The Graal SDK proxy interfaces allow to mimic guest language objects, arrays, executables, primitives and native objects in Graal languages."}
{"index": 1089, "repo": "graal-sdk-1.0.0-rc7", "code": "package word;\n\nInterface ComparableWord; // A machine-word-sized value that can be compared for equality.\nInterface Pointer; // Lowest-level memory access of native C memory.\nInterface PointerBase; // Marker interface for all word types that have the semantic of a pointer (but not necessarily all the memory access methods defined in Pointer).\nInterface SignedWord; // Represents a signed word-sized value.\nInterface UnsignedWord; // Represents an unsigned word-sized value.\nInterface WordBase; // The root of the interface hierarchy for machine-word-sized values.\nClass LocationIdentity; // Marker interface for location identities.\nClass WordFactory; // Provides factory method to create machine-word-sized values.\n", "des": "This package provides a low-level mechanism to use machine-word-sized values in Java."}
{"index": 1090, "repo": "lucene-analyzers-smartcn-8.11.2", "code": "package smart;\n\npackage smart.hhmm; // SmartChineseAnalyzer Hidden Markov Model package.\nClass AnalyzerProfile; // Manages analysis data configuration for SmartChineseAnalyzer\nClass CharType; // Internal SmartChineseAnalyzer character type constants.\nClass HMMChineseTokenizer; // Tokenizer for Chinese or mixed Chinese-English text.\nClass HMMChineseTokenizerFactory; // Factory for HMMChineseTokenizer\nClass SmartChineseAnalyzer; // SmartChineseAnalyzer is an analyzer for Chinese or mixed Chinese-English text.\nClass Utility; // SmartChineseAnalyzer utility constants and methods\nClass WordType; // Internal SmartChineseAnalyzer token type constants\n", "des": "Analyzer for Simplified Chinese, which indexes words."}
{"index": 1091, "repo": "lucene-analyzers-smartcn-8.11.2", "code": "package hhmm;\n\nClass HHMMSegmenter; // Finds the optimal segmentation of a sentence into Chinese words\nClass SegToken; // SmartChineseAnalyzer internal token\nClass SegTokenFilter; // Filters a SegToken by converting full-width latin to half-width, then lowercasing latin.\n", "des": "SmartChineseAnalyzer Hidden Markov Model package."}
{"index": 1092, "repo": "hbase-server-3.0.0-alpha-4", "code": "package constraint;\n\nInterface Constraint; // Apply a Constraint (in traditional database terminology) to a Table.\nClass BaseConstraint; // Base class to use when actually implementing a Constraint.\nClass ConstraintProcessor; // Processes multiple Constraints on a given table.\nClass Constraints; // Utilities for adding/removing constraints from a table.\nClass ConstraintException; // Exception that a user defined constraint throws on failure of a Put.\n", "des": "Restrict the domain of a data attribute, often times to fulfill business rules/requirements."}
{"index": 1093, "repo": "hbase-server-3.0.0-alpha-4", "code": "package coprocessor;\n\nInterface BulkLoadObserver; // Coprocessors implement this interface to observe and mediate bulk load operations.\nInterface CoprocessorHost.ObserverGetter<C,O>; // Implementations defined function to get an observer of type O from a coprocessor of type C.\nInterface CoprocessorService; // Since 2.0.\nInterface EndpointObserver; // Coprocessors implement this interface to observe and mediate endpoint invocations on a region.\nInterface HasMasterServices; // Since 2.0.0 to be removed in 3.0.0.\nInterface HasRegionServerServices; // Since 2.0.0 to be removed in 3.0.0.\nInterface MasterCoprocessor;\nInterface MasterCoprocessorEnvironment;\nInterface MasterObserver; // Defines coprocessor hooks for interacting with operations on the HMaster process.\nInterface ObserverContext<E extends CoprocessorEnvironment>; // Carries the execution state for a given invocation of an Observer coprocessor (RegionObserver, MasterObserver, or WALObserver) method.\nInterface RegionCoprocessor;\nInterface RegionCoprocessorEnvironment;\nInterface RegionObserver; // Coprocessors implement this interface to observe and mediate client actions on the region.\nInterface RegionServerCoprocessor;\nInterface RegionServerCoprocessorEnvironment;\nInterface RegionServerObserver; // Defines coprocessor hooks for interacting with operations on the HRegionServer process.\nInterface WALCoprocessor; // WALCoprocessor don't support loading services using Coprocessor.getServices().\nInterface WALCoprocessorEnvironment;\nInterface WALObserver; // It's provided to have a way for coprocessors to observe, rewrite, or skip WALEdits as they are being written to the WAL.\nClass BaseEnvironment<C extends Coprocessor>; // Encapsulation of the environment of each coprocessor\nClass CoprocessorHost<C extends Coprocessor,E extends CoprocessorEnvironment<C>>; // Provides the common setup framework and runtime services for coprocessor invocation from HBase services.\nClass MetaTableMetrics; // A coprocessor that collects metrics from meta table.\nClass MetricsCoprocessor; // Utility class for tracking metrics for various types of coprocessors.\n", "des": "Table of Contents"}
{"index": 1094, "repo": "hbase-server-3.0.0-alpha-4", "code": "package hfile;\n\npackage hfile.bucket; // Provides BucketCache, an implementation of BlockCache.\nInterface BlockCache; // Block cache interface.\nInterface BlockCompressedSizePredicator; // Allows for defining different compression rate predicates on its implementing classes.\nInterface BlockIndexChunk;\nInterface Cacheable; // Cacheable is an interface that allows for an object to be cached.\nInterface CacheableDeserializer<T extends Cacheable>; // Interface for a deserializer.\nInterface CachedBlock;\nInterface FirstLevelBlockCache; // In-memory BlockCache that may be backed by secondary layer(s).\nInterface HFile.CachingBlockReader; // An abstraction used by the block index.\nInterface HFile.Reader; // An interface used by clients to open and iterate an HFile.\nInterface HFile.Writer; // API required to write an HFile\nInterface HFileDataBlockEncoder; // Controls what kind of data block encoding is used.\nInterface HFileIndexBlockEncoder; // Controls what kind of index block encoding is used.\nInterface HFileIndexBlockEncoder.EncodedSeeker;\nInterface HFileScanner; // A scanner allows you to position yourself within a HFile and scan through it.\nInterface InlineBlockWriter; // A way to write \"inline\" blocks into an HFile.\nInterface ResizableBlockCache; // BlockCache which is resizable.\nClass AgeSnapshot; // Snapshot of block cache age in cache.\nClass BlockCacheFactory;\nClass BlockCacheKey; // Cache Key for use with implementations of BlockCache\nClass BlockCacheUtil; // Utilty for aggregating counts in CachedBlocks and toString/toJSON CachedBlocks and BlockCaches.\nClass BlockCacheUtil.CachedBlocksByFile; // Use one of these to keep a running account of cached blocks by file.\nClass BlockWithScanInfo; // BlockWithScanInfo is wrapper class for HFileBlock with other attributes.\nClass BloomFilterMetrics;\nClass CacheableDeserializerIdManager; // This class is used to manage the identifiers for CacheableDeserializer.\nClass CacheConfig; // Stores all of the cache objects and configuration for a single HFile.\nClass CacheStats; // Class that implements cache metrics.\nClass ChecksumUtil; // Utility methods to compute and validate checksums.\nClass CombinedBlockCache; // CombinedBlockCache is an abstraction layer that combines FirstLevelBlockCache and BucketCache.\n", "des": "Provides implementations of HFile and HFile BlockCache."}
{"index": 1095, "repo": "hbase-server-3.0.0-alpha-4", "code": "package bucket;\n\nInterface IOEngine; // A class implementing IOEngine interface supports data services for BucketCache.\nClass BucketAllocator; // This class is used to allocate a block with specified size and free the block when evicting.\nClass BucketAllocator.Bucket;\nClass BucketCache; // BucketCache uses BucketAllocator to allocate/free blocks, and uses BucketCache#ramCache and BucketCache#backingMap in order to determine if a given element is in the cache.\nClass BucketCachePersister;\nClass BucketCacheStats; // Class that implements cache metrics for bucket cache.\nClass ByteBufferIOEngine; // IO engine that stores data in memory using an array of ByteBuffers ByteBufferArray.\nClass CachedEntryQueue; // A memory-bound queue that will grow until an element brings total size larger than maxSize.\nClass ExclusiveMemoryMmapIOEngine; // IO engine that stores data to a file on the local block device using memory mapping mechanism\nClass FileIOEngine; // IO engine that stores data to a file on the local file system.\nClass FileMmapIOEngine; // IO engine that stores data to a file on the specified file system using memory mapping mechanism\nClass PersistentIOEngine; // A class implementing PersistentIOEngine interface supports file integrity verification for BucketCache which use persistent IOEngine\nClass SharedMemoryMmapIOEngine; // IO engine that stores data in pmem devices such as DCPMM.\nClass BucketAllocatorException; // Thrown by BucketAllocator\nClass CacheFullException; // Thrown by BucketAllocator.allocateBlock(int) when cache is full for the requested size\n", "des": "Provides BucketCache, an implementation of BlockCache."}
{"index": 1096, "repo": "hbase-server-3.0.0-alpha-4", "code": "package ipc;\n\nInterface HBaseRPCErrorHandler; // An interface for calling out of RPC for error conditions.\nInterface PriorityFunction; // Function to figure priority of incoming request.\nInterface QueueBalancer; // Interface for balancing requests across IPC queues\nInterface RpcCall; // Interface of all necessary to carry out a RPC method invocation on the server.\nInterface RpcCallback; // Denotes a callback action that has to be executed at the end of an Rpc Call.\nInterface RpcCallContext; // Interface of all necessary to carry out a RPC service invocation on the server.\nInterface RpcServer.CallCleanup;\nInterface RpcServerInterface;\nClass AdaptiveLifoCoDelCallQueue; // Adaptive LIFO blocking queue utilizing CoDel algorithm to prevent queue overloading.\nClass AnnotationReadingPriorityFunction<T extends HBaseRpcServicesBase<?>>; // Reads special method annotations and table names to figure a priority for use by QoS facility in ipc; e.g: rpcs to hbase:meta get priority.\nClass BalancedQueueRpcExecutor; // An RpcExecutor that will balance requests evenly across all its queues, but still remains efficient with a single queue via an inlinable queue balancing mechanism.\nClass CallQueueInfo;\nClass CallRunner; // The request processing logic, which is usually executed in thread pools provided by an RpcScheduler.\nClass FastPathBalancedQueueRpcExecutor; // Balanced queue executor with a fastpath.\nClass FastPathRpcHandler;\nClass FastPathRWQueueRpcExecutor; // RPC Executor that extends RWQueueRpcExecutor with fast-path feature, used in FastPathBalancedQueueRpcExecutor.\nClass FifoRpcScheduler; // A very simple RpcScheduler} that serves incoming requests in order.\nClass HeapByteBufAllocator; // A pooled ByteBufAllocator that does not prefer direct buffers regardless of platform settings.\nClass MasterFifoRpcScheduler; // A special RpcScheduler} only used for master.\nClass MetaRWQueueRpcExecutor; // RPC Executor that uses different queues for reads and writes for meta.\nClass MetricsHBaseServer;\nClass MetricsHBaseServerWrapperImpl;\nClass NettyRpcServer; // An RPC server with Netty4 implementation.\nClass PluggableBlockingQueue; // Abstract class template for defining a pluggable blocking queue implementation to be used by the 'pluggable' call queue type in the RpcExecutor.\n", "des": "Tools to help define network clients and servers."}
{"index": 1097, "repo": "hbase-server-3.0.0-alpha-4", "code": "package gson;\n\nClass GsonFactory; // Provides a singleton Gson instance configured just the way we like it.\nClass GsonSerializationFeature; // Used to register with (shaded) Jersey the presence of Entity serialization using (shaded) Gson.\n", "des": "This package should be in the hbase-http module as a.a.h.h.http.gson."}
{"index": 1098, "repo": "hbase-server-3.0.0-alpha-4", "code": "package normalizer;\n\nInterface NormalizationPlan; // A NormalizationPlan describes some modification to region split points as identified by an instance of RegionNormalizer.\nClass RegionNormalizerFactory; // Factory to create instance of RegionNormalizer as configured.\nClass RegionNormalizerManager; // This class encapsulates the details of the RegionNormalizer subsystem.\nClass RegionNormalizerStateStore; // Store region normalizer state.\nEnum NormalizationPlan.PlanType;\n", "des": "The Region Normalizer subsystem is responsible for coaxing all the regions in a table toward a \"normal\" size, according to their storefile size."}
{"index": 1099, "repo": "hbase-server-3.0.0-alpha-4", "code": "package replication;\n\nInterface ReplicationEndpoint; // ReplicationEndpoint is a plugin which implements replication to other HBase clusters, or other systems.\nInterface WALCellFilter; // A filter for WAL entry cells before being sent over to replication.\nInterface WALEntryFilter; // A Filter for WAL entries before being sent over to replication.\nClass BaseReplicationEndpoint; // A Base implementation for ReplicationEndpoints.\nClass BulkLoadCellFilter;\nClass ChainWALEmptyEntryFilter; // A ChainWALEntryFilter for providing more flexible options\nClass ChainWALEntryFilter; // A WALEntryFilter which contains multiple filters and applies them in chain order\nClass ClusterMarkingEntryFilter; // Filters out entries with our peerClusterId (i.e.\nClass HBaseReplicationEndpoint; // A BaseReplicationEndpoint for replication endpoints whose target cluster is an HBase cluster.\nClass HBaseReplicationEndpoint.PeerRegionServerListener; // Tracks changes to the list of region servers in a peer's cluster.\nClass HBaseReplicationEndpoint.SinkPeer; // Wraps a replication region server sink to provide the ability to identify it.\nClass NamespaceTableCfWALEntryFilter; // Filter a WAL Entry by the peer config according to the table and family which it belongs to.\nClass ReplicationBarrierFamilyFormat; // Helper class for storing replication barriers in family 'rep_barrier' of meta table.\nClass ReplicationBarrierFamilyFormat.ReplicationBarrierResult;\nClass ReplicationEndpoint.Context;\nClass ReplicationEndpoint.ReplicateContext; // A context for ReplicationEndpoint.replicate(ReplicateContext) method.\nClass ReplicationOffsetUtil;\nClass ReplicationSinkServiceImpl;\nClass ScopeWALEntryFilter; // Keeps KVs that are scoped other than local\nClass SystemTableWALEntryFilter; // Skips WAL edits for all System tables including hbase:meta except hbase:acl.\nClass VerifyWALEntriesReplicationEndpoint; // A dummy ReplicationEndpoint that replicates nothing.\n", "des": "Multi Cluster Replication"}
{"index": 1100, "repo": "fontbox-3.0.0-beta1", "code": "package afm;\n\nClass AFMParser; // This class is used to parse AFM(Adobe Font Metrics) documents.\nClass CharMetric; // This class represents a single character metric.\nClass Composite; // This class represents composite character data.\nClass CompositePart; // This class represents a part of composite character data.\nClass FontMetrics; // This is the outermost AFM type.\nClass KernPair; // This represents some kern pair data.\nClass Ligature; // This class represents a ligature, which is an entry of the CharMetrics.\nClass TrackKern; // This class represents a piece of track kerning data.\n", "des": "This package holds classes used to parse AFM(Adobe Font Metrics) files."}
{"index": 1101, "repo": "fontbox-3.0.0-beta1", "code": "package cff;\n\nInterface CFFCharset; // A CFF charset.\nInterface CFFParser.ByteSource; // Source from which bytes may be read in the future.\nInterface DataInput; // This interface defines some functionality to read a CFF font.\nInterface FDSelect;\nClass CFFCIDFont; // A Type 0 CIDFont represented in a CFF file.\nClass CFFEncoding; // A CFF Type 1-equivalent Encoding.\nClass CFFExpertCharset; // This is specialized CFFCharset.\nClass CFFExpertEncoding; // This is specialized CFFEncoding.\nClass CFFExpertSubsetCharset; // This is specialized CFFCharset.\nClass CFFFont; // An Adobe Compact Font Format (CFF) font.\nClass CFFISOAdobeCharset; // This is specialized CFFCharset.\nClass CFFOperator; // This class represents a CFF operator.\nClass CFFParser; // This class represents a parser for a CFF font.\nClass CFFStandardEncoding; // This is specialized CFFEncoding.\nClass CFFStandardString; // This class represents a standard SID to String mapping.\nClass CFFType1Font; // A Type 1-equivalent font program represented in a CFF file.\nClass CharStringCommand; // This class represents a CharStringCommand.\nClass CIDKeyedType2CharString; // A CID-Keyed Type 2 CharString.\nClass DataInputByteArray; // This class implements the DataInput interface using a byte buffer as source.\nClass DataInputRandomAccessRead; // This class implements the DataInput interface using a RandomAccessRead as source.\nClass Type1CharString; // This class represents and renders a Type 1 CharString.\nClass Type1CharStringParser; // This class represents a converter for a mapping into a Type 1 sequence.\nClass Type1FontUtil; // This class contains some helper methods handling Type1-Fonts.\nClass Type2CharString; // Represents a Type 2 CharString by converting it into an equivalent Type 1 CharString.\nClass Type2CharStringParser; // This class represents a converter for a mapping into a Type2-sequence.\nEnum CharStringCommand.Key;\nEnum CharStringCommand.Type1KeyWord; // Enum of all valid type1 key words\n", "des": "This package holds classes used to parse CFF/Type2-Fonts (aka Type1C-Fonts)."}
{"index": 1102, "repo": "fontbox-3.0.0-beta1", "code": "package cmap;\n\nClass CMap; // This class represents a CMap file.\nClass CMapParser; // Parses a CMap stream.\nClass CodespaceRange; // This represents a single entry in the codespace range.\n", "des": "This package holds classes that are necessary to parse cmap files."}
{"index": 1103, "repo": "fontbox-3.0.0-beta1", "code": "package encoding;\n\nClass BuiltInEncoding; // A font's built-in encoding.\nClass Encoding; // A PostScript Encoding vector.\nClass MacRomanEncoding; // This is the MacRomanEncoding.\nClass StandardEncoding; // Adobe Standard Encoding\n", "des": "This package contains the implementations for all of the encodings that are used in PDF documents."}
{"index": 1104, "repo": "fontbox-3.0.0-beta1", "code": "package pfb;\n\nClass PfbParser; // Parser for a pfb-file.\n", "des": "Classes that are used to parse pfb files."}
{"index": 1105, "repo": "fontbox-3.0.0-beta1", "code": "package ttf;\n\npackage ttf.gsub; // This package contains utility classes which extract meanigful data from the highly obfuscated GSUB table structures.\npackage ttf.model; // This package contains a more logical model for the various font tables like GSUB.\nInterface CmapLookup; // An interface that abstracts the cid <-> codepoint lookup functionality of cmap.\nInterface GlyphDescription; // Specifies access to glyph description classes, simple and composite.\nInterface TrueTypeCollection.TrueTypeFontProcessor; // Implement the callback method to call TrueTypeCollection.processAllFonts(TrueTypeFontProcessor).\nClass CFFTable; // PostScript font program (compact font format).\nClass CmapSubtable; // A \"cmap\" subtable.\nClass CmapTable; // The \"cmap\" table of a true type font.\nClass DigitalSignatureTable; // A table in a true type font.\nClass GlyfCompositeComp; // This class is based on code from Apache Batik a subproject of Apache XMLGraphics.\nClass GlyfCompositeDescript; // Glyph description for composite glyphs.\nClass GlyfDescript; // This class is based on code from Apache Batik a subproject of Apache XMLGraphics.\nClass GlyfSimpleDescript; // This class is based on code from Apache Batik a subproject of Apache XMLGraphics.\nClass GlyphData; // A glyph data record in the glyf table.\nClass GlyphSubstitutionTable; // A glyph substitution 'GSUB' table in a TrueType or OpenType font.\nClass GlyphTable; // A table in a true type font.\nClass HeaderTable; // A table in a true type font.\nClass HorizontalHeaderTable; // A table in a true type font.\nClass HorizontalMetricsTable; // A table in a true type font.\nClass IndexToLocationTable; // A table in a true type font.\nClass KerningSubtable; // A 'kern' table in a true type font.\nClass KerningTable; // A 'kern' table in a true type font.\nClass MaximumProfileTable; // A table in a true type font.\nClass NameRecord; // A name record in the name table.\nClass NamingTable; // A table in a true type font.\n", "des": "This package contains classes to parse a TTF file."}
{"index": 1106, "repo": "fontbox-3.0.0-beta1", "code": "package gsub;\n\nInterface GlyphArraySplitter; // This class splits an array of GlyphIds with a prospective match.\nInterface GsubWorker; // This class is responsible for replacing GlyphIDs with new ones according to the GSUB tables.\nClass CompoundCharacterTokenizer; // Takes in the given text having compound-glyphs to substitute, and splits it into chunks consisting of parts that should be substituted and the ones that can be processed normally.\nClass GlyphArraySplitterRegexImpl; // This is an in-efficient implementation based on regex, which helps split the array.\nClass GlyphSubstitutionDataExtractor; // This class has utility methods to extract meaningful GsubData from the highly obfuscated GSUB Tables.\nClass GsubWorkerFactory; // Gets a Language specific instance of a GsubWorker\nClass GsubWorkerForBengali; // Bengali-specific implementation of GSUB system\nClass GsubWorkerForLatin; // Latin-specific implementation of GSUB system\n", "des": "This package contains utility classes which extract meanigful data from the highly obfuscated GSUB table structures."}
{"index": 1107, "repo": "fontbox-3.0.0-beta1", "code": "package model;\n\nInterface GsubData; // Model for data from the GSUB tables\nInterface ScriptFeature; // Models a FeatureRecord\nClass MapBackedGsubData; // A Map based simple implementation of the GsubData\nClass MapBackedScriptFeature; // A Map based simple implementation of the ScriptFeature\nEnum Language; // Enumerates the languages supported for GSUB operation.\n", "des": "This package contains a more logical model for the various font tables like GSUB."}
{"index": 1108, "repo": "fontbox-3.0.0-beta1", "code": "package common;\n\nClass CoverageTable; // This class models the Coverage Table in the Open Type layout common tables.\nClass CoverageTableFormat1; // This class models the Coverage format 1 in the Open Type layout common tables.\nClass CoverageTableFormat2; // This class models the Coverage format 2 in the Open Type layout common tables.\nClass FeatureListTable; // This class models the Feature List table in the Open Type layout common tables.\nClass FeatureRecord; // This class models the Features and lookups in the Open Type layout common tables.\nClass FeatureTable; // This class models the Feature table in the Open Type layout common tables.\nClass LangSysTable; // This class models the Language system tags in the Open Type Font specs.\nClass LookupListTable; // This class models the Lookup List Table in the Open Type layout common tables.\nClass LookupSubTable; // This class models the Lookup Sub-Table in the Open Type layout common tables.\nClass LookupTable; // This class models the Lookup Table in the Open Type layout common tables.\nClass RangeRecord; // This class models the Range Record in the Coverage format 2 in the Open Type layout common tables.\nClass ScriptTable; // This class models the Script tags in the Open Type Font specs.\n", "des": "This package contains the highly obfuscated Layout Common Table Formats system of tables from the Open Type Font specs."}
{"index": 1109, "repo": "fontbox-3.0.0-beta1", "code": "package gsub;\n\nClass LigatureSetTable; // This class is a part of the GSUB — Glyph Substitution Table system of tables in the Open Type Font specs.\nClass LigatureTable; // This class is a part of the GSUB — Glyph Substitution Table system of tables in the Open Type Font specs.\nClass LookupTypeLigatureSubstitutionSubstFormat1; // This class is a part of the GSUB — Glyph Substitution Table system of tables in the Open Type Font specs.\nClass LookupTypeMultipleSubstitutionFormat1;\nClass LookupTypeSingleSubstFormat1; // This class is a part of the GSUB — Glyph Substitution Table system of tables in the Open Type Font specs.\nClass LookupTypeSingleSubstFormat2; // This class is a part of the GSUB — Glyph Substitution Table system of tables in the Open Type Font specs.\nClass SequenceTable; // This class is a part of the GSUB — Glyph Substitution Table system of tables in the Open Type Font specs.\n", "des": "This package contains the highly obfuscated GSUB, aka, Glyph Substitution Table system of tables from the Open Type Font specs."}
{"index": 1110, "repo": "fontbox-3.0.0-beta1", "code": "package type1;\n\nInterface Type1CharStringReader; // Something which can read Type 1 CharStrings, namely Type 1 and CFF fonts.\nClass Type1Font; // Represents an Adobe Type 1 (.pfb) font.\nClass DamagedFontException; // Thrown when a font is damaged and cannot be read.\n", "des": "This package holds classes used to parse Type1-Fonts."}
{"index": 1111, "repo": "fontbox-3.0.0-beta1", "code": "package util;\n\npackage util.autodetect; // This package contains utility classes to manage local fonts.\nClass BoundingBox; // This is an implementation of a bounding box.\n", "des": "This package contains utility classes used by various font types."}
{"index": 1112, "repo": "fontbox-3.0.0-beta1", "code": "package autodetect;\n\nInterface FontDirFinder; // Implementers provide find method for searching native operating system for available fonts.\nClass FontFileFinder; // Helps to autodetect/locate available operating system fonts.\nClass MacFontDirFinder; // Mac font directory finder.\nClass NativeFontDirFinder; // Native font finder base class.\nClass OS400FontDirFinder; // Font finder for OS/400 systems.\nClass UnixFontDirFinder; // Unix font directory finder.\nClass WindowsFontDirFinder; // FontFinder for native Windows platforms.\n", "des": "This package contains utility classes to manage local fonts."}
{"index": 1113, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package deviceplugin;\n\nInterface DevicePlugin; // A must interface for vendor plugin to implement.\nInterface DevicePluginScheduler; // An optional interface to implement if custom device scheduling is needed.\nClass Device; // Represent one \"device\" resource.\nClass Device.Builder; // Builder for Device.\nClass DeviceRegisterRequest; // Contains plugin register request info.\nClass DeviceRegisterRequest.Builder; // Builder class for construct DeviceRegisterRequest.\nClass DeviceRuntimeSpec; // This is a spec used to prepare and run container.\nClass DeviceRuntimeSpec.Builder; // Builder for DeviceRuntimeSpec.\nClass MountDeviceSpec; // Describe one device mount.\nClass MountDeviceSpec.Builder; // Builder for MountDeviceSpec.\nClass MountVolumeSpec; // Describe one volume mount.\nClass MountVolumeSpec.Builder; // Builder for MountVolumeSpec.\nClass VolumeSpec; // Describe one volume creation or deletion.\nClass VolumeSpec.Builder; // Builder for VolumeSpec.\nEnum YarnRuntimeType; // YarnRuntime parameter enum for DevicePlugin.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1114, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package pb;\n\nClass NMProtoUtils; // Utilities for converting from PB representations.\nClass ResourceLocalizationSpecPBImpl;\n", "des": "Package containing classes for working with Protobuf."}
{"index": 1115, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package collectormanager;\n\nClass NMCollectorService; // Service that handles collector information.\n", "des": "Package org.apache.hadoop.yarn.server.nodemanager.collectormanager contains classes for handling timeline collector information."}
{"index": 1116, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package recovery;\n\nClass DeletionTaskRecoveryInfo; // Encapsulates the recovery info needed to recover a DeletionTask from the NM state store.\n", "des": "Package containing classes for recovering DeletionTasks."}
{"index": 1117, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package task;\n\nClass DeletionTask; // DeletionTasks are supplied to the DeletionService for deletion.\nClass DockerContainerDeletionTask; // DeletionTask handling the removal of Docker containers.\nClass FileDeletionTask; // DeletionTask handling the removal of files (and directories).\nEnum DeletionTaskType; // Available types of DeletionTasks.\n", "des": "Package containing DeletionTasks for use with the DeletionService."}
{"index": 1118, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package launcher;\n\nInterface AbstractContainersLauncher; // Pluggable ContainersLauncher interface for processing ContainersLauncherEvents.\nClass ContainerCleanup; // Cleanup the container.\nClass ContainerLaunch;\nClass ContainerLaunch.ShellScriptBuilder;\nClass ContainerRelaunch; // Relaunch container.\nClass ContainersLauncher; // The launcher for the containers.\nClass ContainersLauncherEvent;\nClass RecoveredContainerLaunch; // This is a ContainerLaunch which has been recovered after an NM restart (for rolling upgrades).\nClass RecoverPausedContainerLaunch; // This is a ContainerLaunch which has been recovered after an NM restart for pause containers (for rolling upgrades)\nClass SignalContainersLauncherEvent;\nEnum ContainersLauncherEventType;\n", "des": "This package contains classes related to NM container launch."}
{"index": 1119, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package numa;\n\nClass NumaNodeResource; // NumaNodeResource class holds the NUMA node topology with the total and used resources.\nClass NumaResourceAllocation; // NumaResourceAllocation contains Memory nodes and CPU nodes assigned to a container.\nClass NumaResourceAllocator; // NUMA Resources Allocator reads the NUMA topology and assigns NUMA nodes to the containers.\nClass NumaResourceHandlerImpl; // ResourceHandler implementation for allocating NUMA Resources to each container.\n", "des": "Package org.apache.hadoop.yarn.server.nodemanager.containermanager.linux."}
{"index": 1120, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package docker;\n\nClass DockerClient;\nClass DockerCommand;\nClass DockerCommandExecutor; // Utility class for executing common docker operations.\nClass DockerExecCommand; // Encapsulates the docker exec command and its command line arguments.\nClass DockerImagesCommand; // Encapsulates the docker images command and its command line arguments.\nClass DockerInspectCommand; // Encapsulates the docker inspect command and its command line arguments.\nClass DockerKillCommand; // Encapsulates the docker kill command and its command line arguments.\nClass DockerLoadCommand;\nClass DockerPullCommand; // Encapsulates the docker pull command and its command line arguments.\nClass DockerRmCommand; // Encapsulates the docker rm command and its command line arguments.\nClass DockerRunCommand;\nClass DockerStartCommand; // Encapsulates the docker start command and its command line arguments.\nClass DockerStopCommand; // Encapsulates the docker stop command and its command line arguments.\nClass DockerVolumeCommand; // Docker Volume Command, run \"docker volume --help\" for more details.\nEnum DockerCommandExecutor.DockerContainerStatus; // Potential states that the docker status can return.\n", "des": "Package containing classes related to Docker commands and common operations used within the @{link DockerLinuxContainerRuntime}."}
{"index": 1121, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package runc;\n\nInterface RuncImageTagToManifestPlugin; // This class is a plugin interface for the RuncContainerRuntime to convert image tags into OCI Image Manifests.\nInterface RuncManifestToResourcesPlugin; // This class is a plugin interface for the RuncContainerRuntime that maps OCI Image Manifests into associated config and layers.\nClass HdfsManifestToResourcesPlugin; // This class is a plugin for the RuncContainerRuntime that maps runC image manifests into their associated config and layers that are located in HDFS.\nClass ImageManifest; // This class is a Java representation of the OCI Image Manifest Specification.\nClass ImageManifest.Blob; // This class is a Java representation of an OCI Image Blob.\nClass ImageTagToManifestPlugin; // This class is a plugin for the RuncContainerRuntime to convert image tags into runC image manifests.\nClass RuncContainerExecutorConfig; // This class is used by the RuncContainerRuntime to pass a JSON object to the container-executor.\nClass RuncContainerExecutorConfig.OCILayer; // This class is a Java representation of an OCI image layer.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig; // This class is a Java representation of the OCI Runtime Specification.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig.OCIAnnotationsConfig; // This class is a Java representation of the oci annotations config section of the OCI Runtime Specification.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig.OCIHooksConfig; // This class is a Java representation of the oci hooks section of the OCI Runtime Specification.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig.OCIHooksConfig.HookType; // This class is a Java representation of the hook type section of the OCI Runtime Specification.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig.OCILinuxConfig; // This class is a Java representation of the oci linux config section of the OCI Runtime Specification.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig.OCILinuxConfig.Device; // This class is a Java representation of the device section of the OCI Runtime Specification.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig.OCILinuxConfig.IDMapping; // This class is a Java representation of the idmapping section of the OCI Runtime Specification.\n", "des": "Package containing classes related to runC commands and common operations used within the @{link RuncContainerRuntime}."}
{"index": 1122, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package records;\n\nClass AuxServiceConfiguration; // Set of configuration properties that can be injected into the service components via envs, files and custom pluggable helper docker containers.\nClass AuxServiceFile; // A config file that needs to be created and made available as a volume in an service component container.\nClass AuxServiceRecord; // An Service resource has the following attributes.\nClass AuxServiceRecords; // A list of Services.\nEnum AuxServiceFile.TypeEnum; // Config Type.\n", "des": "Package used for auxiliary services manifest records."}
{"index": 1123, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package resourceplugin;\n\npackage resourceplugin.deviceframework; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage resourceplugin.fpga; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage resourceplugin.gpu; // Package for GPU support classes.\nInterface DockerCommandPlugin; // Interface to make different resource plugins (e.g.\nInterface ResourcePlugin; // ResourcePlugin is an interface for node manager to easier support discovery/manage/isolation for new resource types.\nClass NodeResourceUpdaterPlugin; // Plugins to handle resources on a node.\nClass ResourcePluginManager; // Manages ResourcePlugin configured on this NodeManager.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1124, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package nec;\n\nClass NECVEPlugin; // A device framework plugin which supports NEC Vector Engine.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1125, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package nvidia;\n\nClass NvidiaGPUPluginForRuntimeV2; // Nvidia GPU plugin supporting both Nvidia container runtime v2 for Docker and non-Docker container.\nEnum NvidiaGPUPluginForRuntimeV2.DeviceLinkType; // Different type of link.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1126, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package deviceframework;\n\nClass AssignedDevice; // Device wrapper class used for NM REST API.\nClass DeviceMappingManager; // Schedule device resource based on requirements and do book keeping It holds all device type resource and can do scheduling as a default scheduler.\nClass DevicePluginAdapter; // The DevicePluginAdapter will adapt existing hooks.\nClass DeviceResourceDockerRuntimePluginImpl; // Bridge DevicePlugin and the hooks related to lunch Docker container.\nClass DeviceResourceHandlerImpl; // The Hooks into container lifecycle.\nClass DeviceResourceUpdaterImpl; // Hooks into NodeStatusUpdater to update resource.\nClass ShellWrapper; // A shell Wrapper to ease testing.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1127, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package fpga;\n\npackage fpga.discovery; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\nInterface AbstractFpgaVendorPlugin; // FPGA plugin interface for vendor to implement.\nClass FpgaDevice; // A class that represents an FPGA card.\nClass FpgaDiscoverer;\nClass FpgaNodeResourceUpdateHandler;\nClass FpgaResourcePlugin;\nClass IntelFpgaOpenclPlugin; // Intel FPGA for OpenCL plugin.\nClass IntelFpgaOpenclPlugin.InnerShellExecutor; // Helper class to run aocl diagnose & determine major/minor numbers.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1128, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package discovery;\n\nInterface FPGADiscoveryStrategy; // Interface for an FPGA device discovery strategy.\nClass AoclOutputBasedDiscoveryStrategy; // FPGA device discovery strategy which invokes the \"aocl\" SDK command to retrieve the list of available FPGA cards.\nClass DeviceSpecParser; // Parses a string which specifies FPGA devices.\nClass ScriptBasedFPGADiscoveryStrategy; // FPGA device discovery strategy which invokes an external script.\nClass SettingsBasedFPGADiscoveryStrategy; // FPGA device discovery strategy which parses a string.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1129, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package gpu;\n\nClass AssignedGpuDevice; // In addition to GpuDevice, this include container id and more runtime information related to who is using the GPU device if possible\nClass GpuDevice; // This class is used to represent GPU device while allocation.\nClass GpuDiscoverer;\nClass GpuDockerCommandPluginFactory; // Factory to create GpuDocker Command Plugin instance\nClass GpuNodeResourceUpdateHandler;\nClass GpuResourcePlugin;\nClass NvidiaBinaryHelper; // Executes the \"nvidia-smi\" command and returns an object based on its output.\nClass NvidiaDockerV1CommandPlugin; // Implementation to use nvidia-docker v1 as GPU docker command plugin.\nClass NvidiaDockerV2CommandPlugin; // Implementation to use nvidia-docker v2 as GPU docker command plugin.\nClass GpuDeviceSpecificationException; // This exception is to be thrown when allowed GPU device specification is empty or invalid.\n", "des": "Package for GPU support classes."}
{"index": 1130, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package scheduler;\n\nInterface ResourceUtilizationTracker; // This interface abstracts out how a container contributes to Resource Utilization of the node.\nClass AllocationBasedResourceUtilizationTracker; // An implementation of the ResourceUtilizationTracker that equates resource utilization with the total resource allocated to the container.\nClass ContainerScheduler; // The ContainerScheduler manages a collection of runnable containers.\nClass ContainerSchedulerEvent; // Events consumed by the ContainerScheduler.\nClass UpdateContainerSchedulerEvent; // Update Event consumed by the ContainerScheduler.\nEnum ContainerSchedulerEventType; // Event types associated with ContainerSchedulerEvent.\n", "des": "Container Scheduler"}
{"index": 1131, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package csi;\n\nClass ContainerVolumePublisher; // Publish/un-publish CSI volumes on node manager.\n", "des": "CSI volumes."}
{"index": 1132, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package nodelabels;\n\nInterface NodeDescriptorsProvider<T>; // Interface which will be responsible for fetching node descriptors, a node descriptor could be a NodeLabel or a NodeAttribute.\nClass AbstractNodeDescriptorsProvider<T>; // Provides base implementation of NodeDescriptorsProvider with Timer and expects subclass to provide TimerTask which can fetch node descriptors.\nClass ConfigurationNodeAttributesProvider; // Configuration based node attributes provider.\nClass ConfigurationNodeLabelsProvider; // Provides Node's Labels by constantly monitoring the configuration.\nClass NodeAttributesProvider; // Abstract class which will be responsible for fetching the node attributes.\nClass NodeDescriptorsScriptRunner<T>; // A node descriptors script runner periodically runs a script, parses the output to collect desired descriptors, and then post these descriptors to the given NodeDescriptorsProvider.\nClass NodeLabelsProvider; // Abstract class which will be responsible for fetching the node labels.\nClass ScriptBasedNodeAttributesProvider; // Node attribute provider that periodically runs a script to collect node attributes.\nClass ScriptBasedNodeLabelsProvider; // The class which provides functionality of getting the labels of the node using the configured node labels provider script.\n", "des": "Package to encapsulate classes used to handle node labels and node attributes in NM."}
{"index": 1133, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package timelineservice;\n\nClass NMTimelineEvent; // Event posted to NMTimelinePublisher which in turn publishes it to timelineservice v2.\nClass NMTimelinePublisher; // Metrics publisher service that publishes data to the timeline service v.2.\nEnum NMTimelineEventType; // Type of NMTimelineEvent.\n", "des": "Package org.apache.hadoop.yarn.server.nodemanager.timelineservice contains classes related to publishing container events and other NM lifecycle events to ATSv2."}
{"index": 1134, "repo": "hadoop-yarn-api-3.3.6", "code": "package ams;\n\nInterface ApplicationMasterServiceContext; // This is a marker interface for a context object that is injected into the ApplicationMasterService processor.\nInterface ApplicationMasterServiceProcessor; // Interface to abstract out the the actual processing logic of the Application Master Service.\nClass ApplicationMasterServiceUtils; // Utility methods to be used by ApplicationMasterServiceProcessor.\n", "des": "Public api for Application Master Service interceptors."}
{"index": 1135, "repo": "hadoop-yarn-api-3.3.6", "code": "package impl;\n\nClass LightWeightResource; // LightWeightResource extends Resource to handle base resources such as memory and CPU.\n", "des": "Package org.apache.hadoop.yarn.api.records.impl contains classes which define basic resources."}
{"index": 1136, "repo": "hadoop-yarn-api-3.3.6", "code": "package timeline;\n\nClass TimelineAbout;\nClass TimelineDelegationTokenResponse; // The response of delegation token related request\nClass TimelineDomain; // This class contains the information about a timeline domain, which is used to a user to host a number of timeline entities, isolating them from others'.\nClass TimelineDomains; // The class that hosts a list of timeline domains.\nClass TimelineEntities; // The class that hosts a list of timeline entities.\nClass TimelineEntity; // The class that contains the the meta information of some conceptual entity and its related events.\nClass TimelineEntityGroupId; // TimelineEntityGroupId is an abstract way for timeline service users to represent “a group of related timeline data.\nClass TimelineEvent; // The class that contains the information of an event that is related to some conceptual entity of an application.\nClass TimelineEvents; // The class that hosts a list of events, which are categorized according to their related entities.\nClass TimelineEvents.EventsOfOneEntity; // The class that hosts a list of events that are only related to one entity.\nClass TimelineHealth; // This class holds health information for ATS.\nClass TimelinePutResponse; // A class that holds a list of put errors.\nClass TimelinePutResponse.TimelinePutError; // A class that holds the error code for one entity.\nEnum TimelineHealth.TimelineHealthStatus; // Timline health status.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1137, "repo": "hadoop-yarn-api-3.3.6", "code": "package timelineservice;\n\nClass ApplicationAttemptEntity; // This entity represents an application attempt.\nClass ApplicationEntity; // This entity represents an application.\nClass ClusterEntity; // This entity represents a YARN cluster.\nClass ContainerEntity; // This entity represents a container belonging to an application attempt.\nClass FlowActivityEntity; // Entity that represents a record for flow activity.\nClass FlowRunEntity; // This entity represents a flow run.\nClass HierarchicalTimelineEntity; // This class extends timeline entity and defines parent-child relationships with other entities.\nClass QueueEntity; // This entity represents a queue.\nClass SubApplicationEntity; // This entity represents a user defined entities to be stored under sub application table.\nClass TimelineDomain; // This class contains the information about a timeline service domain, which is used to a user to host a number of timeline entities, isolating them from others'.\nClass TimelineEntities; // This class hosts a set of timeline entities.\nClass TimelineEntity; // The basic timeline entity data structure for timeline service v2.\nClass TimelineEntity.Identifier; // Identifier of timeline entity(entity id + entity type).\nClass TimelineEvent; // This class contains the information of an event that belongs to an entity.\nClass TimelineMetric; // This class contains the information of a metric that is related to some entity.\nClass TimelineMetricCalculator; // A calculator for timeline metrics.\nClass TimelineWriteResponse; // A class that holds a list of put errors.\nClass TimelineWriteResponse.TimelineWriteError; // A class that holds the error code for one entity.\nClass UserEntity; // This entity represents a user.\nEnum TimelineEntityType; // Defines type of entity.\nEnum TimelineMetric.Type; // Type of metric.\nEnum TimelineMetricOperation; // Aggregation operations.\n", "des": "Package org.apache.hadoop.yarn.api.records.timelineservice contains classes which define the data model for ATSv2."}
{"index": 1138, "repo": "hadoop-yarn-api-3.3.6", "code": "package resource;\n\nInterface PlacementConstraint.Visitable; // Interface used to enable the elements of the constraint tree to be visited.\nInterface PlacementConstraint.Visitor<T>; // Visitor API for a constraint tree.\nClass PlacementConstraint; // PlacementConstraint represents a placement constraint for a resource allocation.\nClass PlacementConstraint.AbstractConstraint; // Abstract class that acts as the superclass of all placement constraint classes.\nClass PlacementConstraint.And; // Class that represents a composite constraint that is a conjunction of other constraints.\nClass PlacementConstraint.CardinalityConstraint; // Class that represents a cardinality constraint.\nClass PlacementConstraint.CompositeConstraint<R extends PlacementConstraint.Visitable>; // Class that represents composite constraints, which comprise other constraints, forming a constraint tree.\nClass PlacementConstraint.DelayedOr; // Class that represents a composite constraint that comprises a list of timed placement constraints (see PlacementConstraint.TimedPlacementConstraint).\nClass PlacementConstraint.Or; // Class that represents a composite constraint that is a disjunction of other constraints.\nClass PlacementConstraint.SingleConstraint; // Consider a set of nodes N that belongs to the scope specified in the constraint.\nClass PlacementConstraint.TargetConstraint; // Class that represents a target constraint.\nClass PlacementConstraint.TargetExpression; // Class representing the target expressions that are used in placement constraints.\nClass PlacementConstraint.TimedPlacementConstraint; // Represents a timed placement constraint that has to be satisfied within a time window.\nClass PlacementConstraints; // This class contains various static methods for the applications to create placement constraints (see also PlacementConstraint).\nClass PlacementConstraints.PlacementTargets; // Class with static methods for constructing target expressions to be used in placement constraints.\nEnum PlacementConstraint.TargetExpression.TargetType; // Enum specifying the type of the target expression.\nEnum PlacementConstraint.TimedPlacementConstraint.DelayUnit; // The unit of scheduling delay.\n", "des": "API related to resources."}
{"index": 1139, "repo": "hadoop-yarn-api-3.3.6", "code": "package constraint;\n\nInterface PlacementConstraintParser.ConstraintTokenizer; // Tokenizer interface that used to parse an expression.\nClass PlacementConstraintParser; // Placement constraint expression parser.\nClass PlacementConstraintParser.BaseStringTokenizer; // A basic tokenizer that splits an expression by a given delimiter.\nClass PlacementConstraintParser.CardinalityConstraintParser; // Constraint parser used to parse a given target expression, such as \"cardinality, NODE, foo, 0, 1\".\nClass PlacementConstraintParser.ConjunctionConstraintParser; // Parser used to parse conjunction form of constraints, such as AND(A, ..., B), OR(A, ..., B).\nClass PlacementConstraintParser.ConjunctionTokenizer; // Tokenizer used to parse conjunction form of a constraint expression, [AND|OR](C1:C2:...:Cn).\nClass PlacementConstraintParser.ConstraintParser; // Constraint Parser used to parse placement constraints from a given expression.\nClass PlacementConstraintParser.MultipleConstraintsTokenizer; // Tokenizer used to handle a placement spec composed by multiple constraint expressions.\nClass PlacementConstraintParser.NodeConstraintParser; // Constraint parser used to parse a given target expression.\nClass PlacementConstraintParser.SourceTags; // A helper class to encapsulate source tags and allocations in the placement specification.\nClass PlacementConstraintParser.SourceTagsTokenizer; // Tokenizer used to parse allocation tags expression, which should be in tag(numOfAllocations) syntax.\nClass PlacementConstraintParser.TargetConstraintParser; // Constraint parser used to parse a given target expression, such as \"NOTIN, NODE, foo, bar\".\nClass PlacementConstraintParseException; // Exception when the placement constraint parser fails to parse an expression.\n", "des": "Package org.apache.hadoop.yarn.util.constraint contains classes which is used as utility class for placement constraints."}
{"index": 1140, "repo": "hadoop-yarn-api-3.3.6", "code": "package csi;\n\nClass CsiConfigUtils; // Utility class for CSI in the API level.\n", "des": "Package that includes some CSI utility classes."}
{"index": 1141, "repo": "hadoop-yarn-api-3.3.6", "code": "package resource;\n\nClass ResourceUtils; // Helper class to read the resource-types to be supported by the system.\n", "des": "Package org.apache.hadoop.yarn.util.resource contains classes which is used as utility class for resource profile computations."}
{"index": 1142, "repo": "commons-math3-3.6.1", "code": "package math3;\n\npackage math3.analysis; // Parent package for common numerical analysis procedures, including root finding, function interpolation and integration.\npackage math3.complex; // Complex number type and implementations of complex transcendental functions.\npackage math3.dfp; // Decimal floating point library for Java\npackage math3.distribution; // Implementations of common discrete and continuous distributions.\npackage math3.exception; // Specialized exceptions for algorithms errors.\npackage math3.filter; // Implementations of common discrete-time linear filters.\npackage math3.fitting; // Classes to perform curve fitting.\npackage math3.fraction; // Fraction number type and fraction number formatting.\npackage math3.genetics; // This package provides Genetic Algorithms components and implementations.\npackage math3.geometry; // This package is the top level package for geometry.\npackage math3.linear; // Linear algebra support.\npackage math3.ode; // This package provides classes to solve Ordinary Differential Equations problems.\npackage math3.optim; // Generally, optimizers are algorithms that will either minimize or maximize a scalar function, called the objective function.\npackage math3.optimization; // All classes and sub-packages of this package are deprecated.\npackage math3.primes; // Methods related to prime numbers like primality test, factor decomposition.\npackage math3.random; // Random number and random data generators.\npackage math3.special; // Implementations of special functions such as Beta and Gamma.\npackage math3.stat; // Data storage, manipulation and summary routines.\npackage math3.transform; // Implementations of transform methods, including Fast Fourier transforms.\npackage math3.util; // Convenience routines and common data structures used throughout the commons-math library.\nInterface Field<T>; // Interface representing a field.\nInterface FieldElement<T>; // Interface representing field elements.\nInterface RealFieldElement<T>; // Interface representing a real field.\n", "des": "Common classes used throughout the commons-math library."}
{"index": 1143, "repo": "commons-math3-3.6.1", "code": "package analysis;\n\npackage analysis.differentiation; // This package holds the main interfaces and basic building block classes dealing with differentiation.\npackage analysis.function; // The function package contains function objects that wrap the methods contained in Math, as well as common mathematical functions such as the gaussian and sinc functions.\npackage analysis.integration; // Numerical integration (quadrature) algorithms for univariate real functions.\npackage analysis.interpolation; // Univariate real functions interpolation algorithms.\npackage analysis.polynomials; // Univariate real polynomials implementations, seen as differentiable univariate real functions.\npackage analysis.solvers; // Root finding algorithms, for univariate real functions.\nInterface BivariateFunction; // An interface representing a bivariate real function.\nInterface DifferentiableMultivariateFunction; // as of 3.1 replaced by MultivariateDifferentiableFunction\nInterface DifferentiableMultivariateVectorFunction; // as of 3.1 replaced by MultivariateDifferentiableVectorFunction\nInterface DifferentiableUnivariateFunction; // as of 3.1 replaced by UnivariateDifferentiableFunction\nInterface DifferentiableUnivariateMatrixFunction; // as of 3.1 replaced by UnivariateDifferentiableMatrixFunction\nInterface DifferentiableUnivariateVectorFunction; // as of 3.1 replaced by UnivariateDifferentiableVectorFunction\nInterface MultivariateFunction; // An interface representing a multivariate real function.\nInterface MultivariateMatrixFunction; // An interface representing a multivariate matrix function.\nInterface MultivariateVectorFunction; // An interface representing a multivariate vectorial function.\nInterface ParametricUnivariateFunction; // An interface representing a real function that depends on one independent variable plus some extra parameters.\nInterface RealFieldUnivariateFunction<T extends RealFieldElement<T>>; // An interface representing a univariate real function.\nInterface TrivariateFunction; // An interface representing a trivariate real function.\nInterface UnivariateFunction; // An interface representing a univariate real function.\nInterface UnivariateMatrixFunction; // An interface representing a univariate matrix function.\nInterface UnivariateVectorFunction; // An interface representing a univariate vectorial function.\nClass FunctionUtils; // Utilities for manipulating function objects.\n", "des": "Parent package for common numerical analysis procedures, including root finding, function interpolation and integration."}
{"index": 1144, "repo": "commons-math3-3.6.1", "code": "package differentiation;\n\nInterface MultivariateDifferentiableFunction; // Extension of MultivariateFunction representing a multivariate differentiable real function.\nInterface MultivariateDifferentiableVectorFunction; // Extension of MultivariateVectorFunction representing a multivariate differentiable vectorial function.\nInterface UnivariateDifferentiableFunction; // Interface for univariate functions derivatives.\nInterface UnivariateDifferentiableMatrixFunction; // Extension of UnivariateMatrixFunction representing a univariate differentiable matrix function.\nInterface UnivariateDifferentiableVectorFunction; // Extension of UnivariateVectorFunction representing a univariate differentiable vectorial function.\nInterface UnivariateFunctionDifferentiator; // Interface defining the function differentiation operation.\nInterface UnivariateMatrixFunctionDifferentiator; // Interface defining the function differentiation operation.\nInterface UnivariateVectorFunctionDifferentiator; // Interface defining the function differentiation operation.\nClass DerivativeStructure; // Class representing both the value and the differentials of a function.\nClass DSCompiler; // Class holding \"compiled\" computation rules for derivative structures.\nClass FiniteDifferencesDifferentiator; // Univariate functions differentiator using finite differences.\nClass GradientFunction; // Class representing the gradient of a multivariate function.\nClass JacobianFunction; // Class representing the Jacobian of a multivariate vector function.\nClass SparseGradient; // First derivative computation with large number of variables.\n", "des": "This package holds the main interfaces and basic building block classes dealing with differentiation."}
{"index": 1145, "repo": "commons-math3-3.6.1", "code": "package function;\n\nClass Abs; // Absolute value function.\nClass Acos; // Arc-cosine function.\nClass Acosh; // Hyperbolic arc-cosine function.\nClass Add; // Add the two operands.\nClass Asin; // Arc-sine function.\nClass Asinh; // Hyperbolic arc-sine function.\nClass Atan; // Arc-tangent function.\nClass Atan2; // Arc-tangent function.\nClass Atanh; // Hyperbolic arc-tangent function.\nClass Cbrt; // Cube root function.\nClass Ceil; // ceil function.\nClass Constant; // Constant function.\nClass Cos; // Cosine function.\nClass Cosh; // Hyperbolic cosine function.\nClass Divide; // Divide the first operand by the second.\nClass Exp; // Exponential function.\nClass Expm1; // ex-1 function.\nClass Floor; // floor function.\nClass Gaussian; // Gaussian function.\nClass Gaussian.Parametric; // Parametric function where the input array contains the parameters of the Gaussian, ordered as follows: Norm Mean Standard deviation\nClass HarmonicOscillator; // simple harmonic oscillator function.\nClass HarmonicOscillator.Parametric; // Parametric function where the input array contains the parameters of the harmonic oscillator function, ordered as follows: Amplitude Angular frequency Phase\nClass Identity; // Identity function.\nClass Inverse; // Inverse function.\nClass Log; // Natural logarithm function.\nClass Log10; // Base 10 logarithm function.\nClass Log1p; // log(1 + p) function.\nClass Logistic; // Generalised logistic function.\nClass Logistic.Parametric; // Parametric function where the input array contains the parameters of the logistic function, ordered as follows: k m b q a n\nClass Logit; // Logit function.\nClass Logit.Parametric; // Parametric function where the input array contains the parameters of the logit function, ordered as follows: Lower bound Higher bound\nClass Max; // Maximum function.\nClass Min; // Minimum function.\nClass Minus; // Minus function.\nClass Multiply; // Multiply the two operands.\n", "des": "The function package contains function objects that wrap the methods contained in Math, as well as common mathematical functions such as the gaussian and sinc functions."}
{"index": 1146, "repo": "commons-math3-3.6.1", "code": "package integration;\n\npackage integration.gauss; // Gauss family of quadrature schemes.\nInterface UnivariateIntegrator; // Interface for univariate real integration algorithms.\nClass BaseAbstractUnivariateIntegrator; // Provide a default implementation for several generic functions.\nClass IterativeLegendreGaussIntegrator; // This algorithm divides the integration interval into equally-sized sub-interval and on each of them performs a Legendre-Gauss quadrature.\nClass LegendreGaussIntegrator; // As of 3.1 (to be removed in 4.0).\nClass MidPointIntegrator; // Implements the Midpoint Rule for integration of real univariate functions.\nClass RombergIntegrator; // Implements the Romberg Algorithm for integration of real univariate functions.\nClass SimpsonIntegrator; // Implements Simpson's Rule for integration of real univariate functions.\nClass TrapezoidIntegrator; // Implements the Trapezoid Rule for integration of real univariate functions.\n", "des": "Numerical integration (quadrature) algorithms for univariate real functions."}
{"index": 1147, "repo": "commons-math3-3.6.1", "code": "package gauss;\n\nClass BaseRuleFactory<T extends Number>; // Base class for rules that determines the integration nodes and their weights.\nClass GaussIntegrator; // Class that implements the Gaussian rule for integrating a weighted function.\nClass GaussIntegratorFactory; // Class that provides different ways to compute the nodes and weights to be used by the Gaussian integration rule.\nClass HermiteRuleFactory; // Factory that creates a Gauss-type quadrature rule using Hermite polynomials of the first kind.\nClass LegendreHighPrecisionRuleFactory; // Factory that creates Gauss-type quadrature rule using Legendre polynomials.\nClass LegendreRuleFactory; // Factory that creates Gauss-type quadrature rule using Legendre polynomials.\nClass SymmetricGaussIntegrator; // This class's implements integrate method assuming that the integral is symmetric about 0.\n", "des": "Gauss family of quadrature schemes."}
{"index": 1148, "repo": "commons-math3-3.6.1", "code": "package interpolation;\n\nInterface BivariateGridInterpolator; // Interface representing a bivariate real interpolating function where the sample points must be specified on a regular grid.\nInterface MultivariateInterpolator; // Interface representing a univariate real interpolating function.\nInterface TrivariateGridInterpolator; // Interface representing a trivariate real interpolating function where the sample points must be specified on a regular grid.\nInterface UnivariateInterpolator; // Interface representing a univariate real interpolating function.\nClass AkimaSplineInterpolator; // Computes a cubic spline interpolation for the data set using the Akima algorithm, as originally formulated by Hiroshi Akima in his 1970 paper \"A New Method of Interpolation and Smooth Curve Fitting Based on Local Procedures.\" J.\nClass BicubicInterpolatingFunction; // Function that implements the bicubic spline interpolation.\nClass BicubicInterpolator; // Generates a bicubic interpolating function.\nClass BicubicSplineInterpolatingFunction; // as of 3.4 replaced by PiecewiseBicubicSplineInterpolatingFunction\nClass BicubicSplineInterpolator; // as of 3.4 replaced by PiecewiseBicubicSplineInterpolator\nClass DividedDifferenceInterpolator; // Implements the Divided Difference Algorithm for interpolation of real univariate functions.\nClass FieldHermiteInterpolator<T extends FieldElement<T>>; // Polynomial interpolator using both sample values and sample derivatives.\nClass HermiteInterpolator; // Polynomial interpolator using both sample values and sample derivatives.\nClass InterpolatingMicrosphere; // Utility class for the MicrosphereProjectionInterpolator algorithm.\nClass InterpolatingMicrosphere2D; // Utility class for the MicrosphereProjectionInterpolator algorithm.\nClass LinearInterpolator; // Implements a linear function for interpolation of real univariate functions.\nClass LoessInterpolator; // Implements the Local Regression Algorithm (also Loess, Lowess) for interpolation of real univariate functions.\nClass MicrosphereInterpolatingFunction; // Code will be removed in 4.0.\nClass MicrosphereInterpolator; // Code will be removed in 4.0.\nClass MicrosphereProjectionInterpolator; // Interpolator that implements the algorithm described in William Dudziak's MS thesis.\n", "des": "Univariate real functions interpolation algorithms."}
{"index": 1149, "repo": "commons-math3-3.6.1", "code": "package polynomials;\n\nClass PolynomialFunction; // Immutable representation of a real polynomial function with real coefficients.\nClass PolynomialFunction.Parametric; // Dedicated parametric polynomial class.\nClass PolynomialFunctionLagrangeForm; // Implements the representation of a real polynomial function in Lagrange Form.\nClass PolynomialFunctionNewtonForm; // Implements the representation of a real polynomial function in Newton Form.\nClass PolynomialSplineFunction; // Represents a polynomial spline function.\nClass PolynomialsUtils; // A collection of static methods that operate on or return polynomials.\n", "des": "Univariate real polynomials implementations, seen as differentiable univariate real functions."}
{"index": 1150, "repo": "commons-math3-3.6.1", "code": "package solvers;\n\nInterface BaseUnivariateSolver<FUNC extends UnivariateFunction>; // Interface for (univariate real) rootfinding algorithms.\nInterface BracketedRealFieldUnivariateSolver<T extends RealFieldElement<T>>; // Interface for (univariate real) root-finding algorithms that maintain a bracketed solution.\nInterface BracketedUnivariateSolver<FUNC extends UnivariateFunction>; // Interface for (univariate real) root-finding algorithms that maintain a bracketed solution.\nInterface DifferentiableUnivariateSolver; // as of 3.1, replaced by UnivariateDifferentiableSolver\nInterface PolynomialSolver; // Interface for (polynomial) root-finding algorithms.\nInterface UnivariateDifferentiableSolver; // Interface for (univariate real) rootfinding algorithms.\nInterface UnivariateSolver; // Interface for (univariate real) root-finding algorithms.\nClass AbstractDifferentiableUnivariateSolver; // as of 3.1, replaced by AbstractUnivariateDifferentiableSolver\nClass AbstractPolynomialSolver; // Base class for solvers.\nClass AbstractUnivariateDifferentiableSolver; // Provide a default implementation for several functions useful to generic solvers.\nClass AbstractUnivariateSolver; // Base class for solvers.\nClass BaseAbstractUnivariateSolver<FUNC extends UnivariateFunction>; // Provide a default implementation for several functions useful to generic solvers.\nClass BaseSecantSolver; // Base class for all bracketing Secant-based methods for root-finding (approximating a zero of a univariate real function).\nClass BisectionSolver; // Implements the bisection algorithm for finding zeros of univariate real functions.\nClass BracketingNthOrderBrentSolver; // This class implements a modification of the Brent algorithm.\nClass BrentSolver; // This class implements the Brent algorithm for finding zeros of real univariate functions.\nClass FieldBracketingNthOrderBrentSolver<T extends RealFieldElement<T>>; // This class implements a modification of the Brent algorithm.\nClass IllinoisSolver; // Implements the Illinois method for root-finding (approximating a zero of a univariate real function).\nClass LaguerreSolver; // Implements the Laguerre's Method for root finding of real coefficient polynomials.\n", "des": "Root finding algorithms, for univariate real functions."}
{"index": 1151, "repo": "commons-math3-3.6.1", "code": "package complex;\n\nClass Complex; // Representation of a Complex number, i.e.\nClass ComplexField; // Representation of the complex numbers field.\nClass ComplexFormat; // Formats a Complex number in cartesian format \"Re(c) + Im(c)i\".\nClass ComplexUtils; // Static implementations of common Complex utilities functions.\nClass Quaternion; // This class implements quaternions (Hamilton's hypercomplex numbers).\nClass RootsOfUnity; // A helper class for the computation and caching of the n-th roots of unity.\n", "des": "Complex number type and implementations of complex transcendental functions."}
{"index": 1152, "repo": "commons-math3-3.6.1", "code": "package dfp;\n\nInterface UnivariateDfpFunction; // as of 3.6, replaced with RealFieldUnivariateFunction\nClass BracketingNthOrderBrentSolverDFP; // as of 3.6 replaced with FieldBracketingNthOrderBrentSolver\nClass Dfp; // Decimal floating point library for Java\nClass DfpDec; // Subclass of Dfp which hides the radix-10000 artifacts of the superclass.\nClass DfpField; // Field for Decimal floating point instances.\nClass DfpMath; // Mathematical routines for use with Dfp.\nEnum DfpField.RoundingMode; // Enumerate for rounding modes.\n", "des": "Decimal floating point library for Java"}
{"index": 1153, "repo": "commons-math3-3.6.1", "code": "package distribution;\n\npackage distribution.fitting; // Fitting of parameters against distributions.\nInterface IntegerDistribution; // Interface for distributions on the integers.\nInterface MultivariateRealDistribution; // Base interface for multivariate distributions on the reals.\nInterface RealDistribution; // Base interface for distributions on the reals.\nClass AbstractIntegerDistribution; // Base class for integer-valued discrete distributions.\nClass AbstractMultivariateRealDistribution; // Base class for multivariate probability distributions.\nClass AbstractRealDistribution; // Base class for probability distributions on the reals.\nClass BetaDistribution; // Implements the Beta distribution.\nClass BinomialDistribution; // Implementation of the binomial distribution.\nClass CauchyDistribution; // Implementation of the Cauchy distribution.\nClass ChiSquaredDistribution; // Implementation of the chi-squared distribution.\nClass ConstantRealDistribution; // Implementation of the constant real distribution.\nClass EnumeratedDistribution<T>; // A generic implementation of a discrete probability distribution (Wikipedia) over a finite sample space, based on an enumerated list of <value, probability> pairs.\nClass EnumeratedIntegerDistribution; // Implementation of an integer-valued EnumeratedDistribution.\nClass EnumeratedRealDistribution; // Implementation of a real-valued EnumeratedDistribution.\nClass ExponentialDistribution; // Implementation of the exponential distribution.\nClass FDistribution; // Implementation of the F-distribution.\nClass GammaDistribution; // Implementation of the Gamma distribution.\nClass GeometricDistribution; // Implementation of the geometric distribution.\nClass GumbelDistribution; // This class implements the Gumbel distribution.\nClass HypergeometricDistribution; // Implementation of the hypergeometric distribution.\nClass KolmogorovSmirnovDistribution; // to be removed in version 4.0 - use KolmogorovSmirnovTest\nClass LaplaceDistribution; // This class implements the Laplace distribution.\nClass LevyDistribution; // This class implements the Lévy distribution.\nClass LogisticDistribution; // This class implements the Logistic distribution.\nClass LogNormalDistribution; // Implementation of the log-normal (gaussian) distribution.\nClass MixtureMultivariateNormalDistribution; // Multivariate normal mixture distribution.\nClass MixtureMultivariateRealDistribution<T extends MultivariateRealDistribution>; // Class for representing mixture model distributions.\n", "des": "Implementations of common discrete and continuous distributions."}
{"index": 1154, "repo": "commons-math3-3.6.1", "code": "package fitting;\n\nClass MultivariateNormalMixtureExpectationMaximization; // Expectation-Maximization algorithm for fitting the parameters of multivariate normal mixture model distributions.\n", "des": "Fitting of parameters against distributions."}
{"index": 1155, "repo": "commons-math3-3.6.1", "code": "package exception;\n\npackage exception.util; // Classes supporting exception localization.\nClass ConvergenceException; // Error thrown when a numerical computation can not be performed because the numerical result failed to converge to a finite value.\nClass DimensionMismatchException; // Exception to be thrown when two dimensions differ.\nClass InsufficientDataException; // Exception to be thrown when there is insufficient data to perform a computation.\nClass MathArithmeticException; // Base class for arithmetic exceptions.\nClass MathIllegalArgumentException; // Base class for all preconditions violation exceptions.\nClass MathIllegalNumberException; // Base class for exceptions raised by a wrong number.\nClass MathIllegalStateException; // Base class for all exceptions that signal that the process throwing the exception is in a state that does not comply with the set of states that it is designed to be in.\nClass MathInternalError; // Exception triggered when something that shouldn't happen does happen.\nClass MathParseException; // Class to signal parse failures.\nClass MathRuntimeException; // As of release 4.0, all exceptions thrown by the Commons Math code (except NullArgumentException) inherit from this class.\nClass MathUnsupportedOperationException; // Base class for all unsupported features.\nClass MaxCountExceededException; // Exception to be thrown when some counter maximum value is exceeded.\nClass MultiDimensionMismatchException; // Exception to be thrown when two sets of dimensions differ.\nClass NoBracketingException; // Exception to be thrown when function values have the same sign at both ends of an interval.\nClass NoDataException; // Exception to be thrown when the required data is missing.\nClass NonMonotonicSequenceException; // Exception to be thrown when the a sequence of values is not monotonically increasing or decreasing.\nClass NotANumberException; // Exception to be thrown when a number is not a number.\nClass NotFiniteNumberException; // Exception to be thrown when a number is not finite.\nClass NotPositiveException; // Exception to be thrown when the argument is negative.\nClass NotStrictlyPositiveException; // Exception to be thrown when the argument is not greater than 0.\nClass NullArgumentException; // All conditions checks that fail due to a null argument must throw this exception.\nClass NumberIsTooLargeException; // Exception to be thrown when a number is too large.\nClass NumberIsTooSmallException; // Exception to be thrown when a number is too small.\n", "des": "Specialized exceptions for algorithms errors."}
{"index": 1156, "repo": "commons-math3-3.6.1", "code": "package util;\n\nInterface ExceptionContextProvider; // Interface for accessing the context data structure stored in Commons Math exceptions.\nInterface Localizable; // Interface for localizable strings.\nClass ArgUtils; // Utility class for transforming the list of arguments passed to constructors of exceptions.\nClass DummyLocalizable; // Dummy implementation of the Localizable interface, without localization.\nClass ExceptionContext; // Class that contains the actual implementation of the functionality mandated by the ExceptionContext interface.\nEnum LocalizedFormats; // Enumeration for localized messages formats used in exceptions messages.\n", "des": "Classes supporting exception localization."}
{"index": 1157, "repo": "commons-math3-3.6.1", "code": "package filter;\n\nInterface MeasurementModel; // Defines the measurement model for the use with a KalmanFilter.\nInterface ProcessModel; // Defines the process dynamics model for the use with a KalmanFilter.\nClass DefaultMeasurementModel; // Default implementation of a MeasurementModel for the use with a KalmanFilter.\nClass DefaultProcessModel; // Default implementation of a ProcessModel for the use with a KalmanFilter.\nClass KalmanFilter; // Implementation of a Kalman filter to estimate the state xk of a discrete-time controlled process that is governed by the linear stochastic difference equation:\n", "des": "Implementations of common discrete-time linear filters."}
{"index": 1158, "repo": "commons-math3-3.6.1", "code": "package fitting;\n\npackage fitting.leastsquares; // This package provides algorithms that minimize the residuals between observations and model values.\nClass AbstractCurveFitter; // Base class that contains common code for fitting parametric univariate real functions y = f(pi;x), where x is the independent variable and the pi are the parameters.\nClass AbstractCurveFitter.TheoreticalValuesFunction; // Vector function for computing function theoretical values.\nClass CurveFitter<T extends ParametricUnivariateFunction>; // As of 3.3.\nClass GaussianCurveFitter; // Fits points to a Gaussian function.\nClass GaussianCurveFitter.ParameterGuesser; // Guesses the parameters norm, mean, and sigma of a Gaussian.Parametric based on the specified observed points.\nClass GaussianFitter; // As of 3.3.\nClass GaussianFitter.ParameterGuesser; // Guesses the parameters norm, mean, and sigma of a Gaussian.Parametric based on the specified observed points.\nClass HarmonicCurveFitter; // Fits points to a harmonic oscillator function.\nClass HarmonicCurveFitter.ParameterGuesser; // This class guesses harmonic coefficients from a sample.\nClass HarmonicFitter; // As of 3.3.\nClass HarmonicFitter.ParameterGuesser; // This class guesses harmonic coefficients from a sample.\nClass PolynomialCurveFitter; // Fits points to a polynomial function.\nClass PolynomialFitter; // As of 3.3.\nClass SimpleCurveFitter; // Fits points to a user-defined function.\nClass WeightedObservedPoint; // This class is a simple container for weighted observed point in curve fitting.\nClass WeightedObservedPoints; // Simple container for weighted observed points used in curve fitting algorithms.\n", "des": "Classes to perform curve fitting."}
{"index": 1159, "repo": "commons-math3-3.6.1", "code": "package leastsquares;\n\nInterface LeastSquaresOptimizer; // An algorithm that can be applied to a non-linear least squares problem.\nInterface LeastSquaresOptimizer.Optimum; // The optimum found by the optimizer.\nInterface LeastSquaresProblem; // The data necessary to define a non-linear least squares problem.\nInterface LeastSquaresProblem.Evaluation; // An evaluation of a LeastSquaresProblem at a particular point.\nInterface MultivariateJacobianFunction; // A interface for functions that compute a vector of values and can compute their derivatives (Jacobian).\nInterface ParameterValidator; // Interface for validating a set of model parameters.\nInterface ValueAndJacobianFunction; // A interface for functions that compute a vector of values and can compute their derivatives (Jacobian).\nClass AbstractEvaluation; // An implementation of LeastSquaresProblem.Evaluation that is designed for extension.\nClass EvaluationRmsChecker; // Check if an optimization has converged based on the change in computed RMS.\nClass GaussNewtonOptimizer; // Gauss-Newton least-squares solver.\nClass LeastSquaresAdapter; // An adapter that delegates to another implementation of LeastSquaresProblem.\nClass LeastSquaresBuilder; // A mutable builder for LeastSquaresProblems.\nClass LeastSquaresFactory; // A Factory for creating LeastSquaresProblems.\nClass LevenbergMarquardtOptimizer; // This class solves a least-squares problem using the Levenberg-Marquardt algorithm.\nEnum GaussNewtonOptimizer.Decomposition; // The decomposition algorithm to use to solve the normal equations.\n", "des": "This package provides algorithms that minimize the residuals between observations and model values."}
{"index": 1160, "repo": "commons-math3-3.6.1", "code": "package fraction;\n\nClass AbstractFormat; // Common part shared by both FractionFormat and BigFractionFormat.\nClass BigFraction; // Representation of a rational number without any overflow.\nClass BigFractionField; // Representation of the fractional numbers without any overflow field.\nClass BigFractionFormat; // Formats a BigFraction number in proper format or improper format.\nClass Fraction; // Representation of a rational number.\nClass FractionField; // Representation of the fractional numbers field.\nClass FractionFormat; // Formats a Fraction number in proper format or improper format.\nClass ProperBigFractionFormat; // Formats a BigFraction number in proper format.\nClass ProperFractionFormat; // Formats a Fraction number in proper format.\nClass FractionConversionException; // Error thrown when a double value cannot be converted to a fraction in the allowed number of iterations.\n", "des": "Fraction number type and fraction number formatting."}
{"index": 1161, "repo": "commons-math3-3.6.1", "code": "package genetics;\n\nInterface CrossoverPolicy; // Policy used to create a pair of new chromosomes by performing a crossover operation on a source pair of chromosomes.\nInterface Fitness; // Fitness of a chromosome.\nInterface MutationPolicy; // Algorithm used to mutate a chromosome.\nInterface PermutationChromosome<T>; // Interface indicating that the chromosome represents a permutation of objects.\nInterface Population; // A collection of chromosomes that facilitates generational evolution.\nInterface SelectionPolicy; // Algorithm used to select a chromosome pair from a population.\nInterface StoppingCondition; // Algorithm used to determine when to stop evolution.\nClass AbstractListChromosome<T>; // Chromosome represented by an immutable list of a fixed length.\nClass BinaryChromosome; // Chromosome represented by a vector of 0s and 1s.\nClass BinaryMutation; // Mutation for BinaryChromosomes.\nClass Chromosome; // Individual in a population.\nClass ChromosomePair; // A pair of Chromosome objects.\nClass CycleCrossover<T>; // Cycle Crossover [CX] builds offspring from ordered chromosomes by identifying cycles between two parent chromosomes.\nClass ElitisticListPopulation; // Population of chromosomes which uses elitism (certain percentage of the best chromosomes is directly copied to the next generation).\nClass FixedElapsedTime; // Stops after a fixed amount of time has elapsed.\nClass FixedGenerationCount; // Stops after a fixed number of generations.\nClass GeneticAlgorithm; // Implementation of a genetic algorithm.\nClass ListPopulation; // Population of chromosomes represented by a List.\nClass NPointCrossover<T>; // N-point crossover policy.\nClass OnePointCrossover<T>; // One point crossover policy.\nClass OrderedCrossover<T>; // Order 1 Crossover [OX1] builds offspring from ordered chromosomes by copying a consecutive slice from one parent, and filling up the remaining genes from the other parent as they appear.\nClass RandomKey<T>; // Random Key chromosome is used for permutation representation.\nClass RandomKeyMutation; // Mutation operator for RandomKeys.\nClass TournamentSelection; // Tournament selection scheme.\n", "des": "This package provides Genetic Algorithms components and implementations."}
{"index": 1162, "repo": "commons-math3-3.6.1", "code": "package geometry;\n\npackage geometry.enclosing; // This package provides interfaces and classes related to the smallest enclosing ball problem.\npackage geometry.hull; // This package provides interfaces and classes related to the convex hull problem.\npackage geometry.partitioning; // This package provides classes to implement Binary Space Partition trees.\nInterface Point<S extends Space>; // This interface represents a generic geometrical point.\nInterface Space; // This interface represents a generic space, with affine and vectorial counterparts.\nInterface Vector<S extends Space>; // This interface represents a generic vector in a vectorial space or a point in an affine space.\nClass VectorFormat<S extends Space>; // Formats a vector in components list format \"{x; y; ...}\".\n", "des": "This package is the top level package for geometry."}
{"index": 1163, "repo": "commons-math3-3.6.1", "code": "package enclosing;\n\nInterface Encloser<S extends Space,P extends Point<S>>; // Interface for algorithms computing enclosing balls.\nInterface SupportBallGenerator<S extends Space,P extends Point<S>>; // Interface for generating balls based on support points.\nClass EnclosingBall<S extends Space,P extends Point<S>>; // This class represents a ball enclosing some points.\nClass WelzlEncloser<S extends Space,P extends Point<S>>; // Class implementing Emo Welzl algorithm to find the smallest enclosing ball in linear time.\n", "des": "This package provides interfaces and classes related to the smallest enclosing ball problem."}
{"index": 1164, "repo": "commons-math3-3.6.1", "code": "package oned;\n\nClass Euclidean1D; // This class implements a one-dimensional space.\nClass Interval; // This class represents a 1D interval.\nClass IntervalsSet; // This class represents a 1D region: a set of intervals.\nClass OrientedPoint; // This class represents a 1D oriented hyperplane.\nClass SubOrientedPoint; // This class represents sub-hyperplane for OrientedPoint.\nClass Vector1D; // This class represents a 1D vector.\nClass Vector1DFormat; // Formats a 1D vector in components list format \"{x}\".\nClass Euclidean1D.NoSubSpaceException; // Specialized exception for inexistent sub-space.\n", "des": "This package provides basic 1D geometry components."}
{"index": 1165, "repo": "commons-math3-3.6.1", "code": "package threed;\n\nClass Euclidean3D; // This class implements a three-dimensional space.\nClass FieldRotation<T extends RealFieldElement<T>>; // This class is a re-implementation of Rotation using RealFieldElement.\nClass FieldVector3D<T extends RealFieldElement<T>>; // This class is a re-implementation of Vector3D using RealFieldElement.\nClass Line; // The class represent lines in a three dimensional space.\nClass OutlineExtractor; // Extractor for polyhedrons sets outlines.\nClass Plane; // The class represent planes in a three dimensional space.\nClass PolyhedronsSet; // This class represents a 3D region: a set of polyhedrons.\nClass Rotation; // This class implements rotations in a three-dimensional space.\nClass RotationOrder; // This class is a utility representing a rotation order specification for Cardan or Euler angles specification.\nClass Segment; // Simple container for a two-points segment.\nClass SphereGenerator; // Class generating an enclosing ball from its support points.\nClass SphericalCoordinates; // This class provides conversions related to spherical coordinates.\nClass SubLine; // This class represents a subset of a Line.\nClass SubPlane; // This class represents a sub-hyperplane for Plane.\nClass Vector3D; // This class implements vectors in a three-dimensional space.\nClass Vector3DFormat; // Formats a 3D vector in components list format \"{x; y; z}\".\nEnum RotationConvention; // This enumerates is used to differentiate the semantics of a rotation.\nClass CardanEulerSingularityException; // This class represents exceptions thrown while extractiong Cardan or Euler angles from a rotation.\nClass NotARotationMatrixException; // This class represents exceptions thrown while building rotations from matrices.\n", "des": "This package provides basic 3D geometry components."}
{"index": 1166, "repo": "commons-math3-3.6.1", "code": "package twod;\n\npackage twod.hull; // This package provides algorithms to generate the convex hull for a set of points in an two-dimensional euclidean space.\nClass DiskGenerator; // Class generating an enclosing ball from its support points.\nClass Euclidean2D; // This class implements a two-dimensional space.\nClass Line; // This class represents an oriented line in the 2D plane.\nClass PolygonsSet; // This class represents a 2D region: a set of polygons.\nClass Segment; // Simple container for a two-points segment.\nClass SubLine; // This class represents a sub-hyperplane for Line.\nClass Vector2D; // This class represents a 2D vector.\nClass Vector2DFormat; // Formats a 2D vector in components list format \"{x; y}\".\n", "des": "This package provides basic 2D geometry components."}
{"index": 1167, "repo": "commons-math3-3.6.1", "code": "package hull;\n\nInterface ConvexHullGenerator2D; // Interface for convex hull generators in the two-dimensional euclidean space.\nClass AklToussaintHeuristic; // A simple heuristic to improve the performance of convex hull algorithms.\nClass ConvexHull2D; // This class represents a convex hull in an two-dimensional euclidean space.\nClass MonotoneChain; // Implements Andrew's monotone chain method to generate the convex hull of a finite set of points in the two-dimensional euclidean space.\n", "des": "This package provides algorithms to generate the convex hull for a set of points in an two-dimensional euclidean space."}
{"index": 1168, "repo": "commons-math3-3.6.1", "code": "package hull;\n\nInterface ConvexHull<S extends Space,P extends Point<S>>; // This class represents a convex hull.\nInterface ConvexHullGenerator<S extends Space,P extends Point<S>>; // Interface for convex hull generators.\n", "des": "This package provides interfaces and classes related to the convex hull problem."}
{"index": 1169, "repo": "commons-math3-3.6.1", "code": "package partitioning;\n\npackage partitioning.utilities; // This package provides multidimensional ordering features for partitioning.\nInterface BSPTree.LeafMerger<S extends Space>; // This interface gather the merging operations between a BSP tree leaf and another BSP tree.\nInterface BSPTree.VanishingCutHandler<S extends Space>; // This interface handles the corner cases when an internal node cut sub-hyperplane vanishes.\nInterface BSPTreeVisitor<S extends Space>; // This interface is used to visit BSP tree nodes.\nInterface Embedding<S extends Space,T extends Space>; // This interface defines mappers between a space and one of its sub-spaces.\nInterface Hyperplane<S extends Space>; // This interface represents an hyperplane of a space.\nInterface Region<S extends Space>; // This interface represents a region of a space as a partition.\nInterface SubHyperplane<S extends Space>; // This interface represents the remaining parts of an hyperplane after other parts have been chopped off.\nInterface Transform<S extends Space,T extends Space>; // This interface represents an inversible affine transform in a space.\nClass AbstractRegion<S extends Space,T extends Space>; // Abstract class for all regions, independently of geometry type or dimension.\nClass AbstractSubHyperplane<S extends Space,T extends Space>; // This class implements the dimension-independent parts of SubHyperplane.\nClass BoundaryAttribute<S extends Space>; // Class holding boundary attributes.\nClass BoundaryProjection<S extends Space>; // Class holding the result of point projection on region boundary.\nClass BSPTree<S extends Space>; // This class represent a Binary Space Partition tree.\nClass NodesSet<S extends Space>; // Set of BSP tree nodes.\nClass RegionFactory<S extends Space>; // This class is a factory for Region.\nClass SubHyperplane.SplitSubHyperplane<U extends Space>; // Class holding the results of the split method.\nEnum BSPTreeVisitor.Order; // Enumerate for visit order with respect to plus sub-tree, minus sub-tree and cut sub-hyperplane.\nEnum Region.Location; // Enumerate for the location of a point with respect to the region.\n", "des": "This package provides classes to implement Binary Space Partition trees."}
{"index": 1170, "repo": "commons-math3-3.6.1", "code": "package utilities;\n\nClass AVLTree<T extends Comparable<T>>; // as of 3.4, this class is not used anymore and considered to be out of scope of Apache Commons Math\nClass OrderedTuple; // as of 3.4, this class is not used anymore and considered to be out of scope of Apache Commons Math\n", "des": "This package provides multidimensional ordering features for partitioning."}
{"index": 1171, "repo": "commons-math3-3.6.1", "code": "package oned;\n\nClass Arc; // This class represents an arc on a circle.\nClass ArcsSet; // This class represents a region of a circle: a set of arcs.\nClass ArcsSet.Split; // Class holding the results of the split method.\nClass LimitAngle; // This class represents a 1D oriented hyperplane on the circle.\nClass S1Point; // This class represents a point on the 1-sphere.\nClass Sphere1D; // This class implements a one-dimensional sphere (i.e.\nClass SubLimitAngle; // This class represents sub-hyperplane for LimitAngle.\nClass ArcsSet.InconsistentStateAt2PiWrapping; // Specialized exception for inconsistent BSP tree state inconsistency.\nClass Sphere1D.NoSubSpaceException; // Specialized exception for inexistent sub-space.\n", "des": "This package provides basic geometry components on the 1-sphere."}
{"index": 1172, "repo": "commons-math3-3.6.1", "code": "package twod;\n\nClass Circle; // This class represents an oriented great circle on the 2-sphere.\nClass Edge; // Spherical polygons boundary edge.\nClass S2Point; // This class represents a point on the 2-sphere.\nClass Sphere2D; // This class implements a two-dimensional sphere (i.e.\nClass SphericalPolygonsSet; // This class represents a region on the 2-sphere: a set of spherical polygons.\nClass SubCircle; // This class represents a sub-hyperplane for Circle.\nClass Vertex; // Spherical polygons boundary vertex.\n", "des": "This package provides basic geometry components on the 2-sphere."}
{"index": 1173, "repo": "commons-math3-3.6.1", "code": "package linear;\n\nInterface AnyMatrix; // Interface defining very basic matrix operations.\nInterface DecompositionSolver; // Interface handling decomposition algorithms that can solve A × X = B.\nInterface FieldDecompositionSolver<T extends FieldElement<T>>; // Interface handling decomposition algorithms that can solve A × X = B.\nInterface FieldMatrix<T extends FieldElement<T>>; // Interface defining field-valued matrix with basic algebraic operations.\nInterface FieldMatrixChangingVisitor<T extends FieldElement<?>>; // Interface defining a visitor for matrix entries.\nInterface FieldMatrixPreservingVisitor<T extends FieldElement<?>>; // Interface defining a visitor for matrix entries.\nInterface FieldVector<T extends FieldElement<T>>; // Interface defining a field-valued vector with basic algebraic operations.\nInterface FieldVectorChangingVisitor<T extends FieldElement<?>>; // This interface defines a visitor for the entries of a vector.\nInterface FieldVectorPreservingVisitor<T extends FieldElement<?>>; // This interface defines a visitor for the entries of a vector.\nInterface RealMatrix; // Interface defining a real-valued matrix with basic algebraic operations.\nInterface RealMatrixChangingVisitor; // Interface defining a visitor for matrix entries.\nInterface RealMatrixPreservingVisitor; // Interface defining a visitor for matrix entries.\nInterface RealVectorChangingVisitor; // This interface defines a visitor for the entries of a vector.\nInterface RealVectorPreservingVisitor; // This interface defines a visitor for the entries of a vector.\nInterface SparseRealMatrix; // Marker interface for RealMatrix implementations that require sparse backing storage\nClass AbstractFieldMatrix<T extends FieldElement<T>>; // Basic implementation of FieldMatrix methods regardless of the underlying storage.\nClass AbstractRealMatrix; // Basic implementation of RealMatrix methods regardless of the underlying storage.\nClass Array2DRowFieldMatrix<T extends FieldElement<T>>; // Implementation of FieldMatrix using a FieldElement[][] array to store entries.\nClass Array2DRowRealMatrix; // Implementation of RealMatrix using a double[][] array to store entries.\nClass ArrayFieldVector<T extends FieldElement<T>>; // This class implements the FieldVector interface with a FieldElement array.\nClass ArrayRealVector; // This class implements the RealVector interface with a double array.\n", "des": "Linear algebra support."}
{"index": 1174, "repo": "commons-math3-3.6.1", "code": "package clustering;\n\npackage clustering.evaluation; // Cluster evaluation methods.\nInterface Clusterable; // Interface for n-dimensional points that can be clustered together.\nClass CentroidCluster<T extends Clusterable>; // A Cluster used by centroid-based clustering algorithms.\nClass Cluster<T extends Clusterable>; // Cluster holding a set of Clusterable points.\nClass Clusterer<T extends Clusterable>; // Base class for clustering algorithms.\nClass DBSCANClusterer<T extends Clusterable>; // DBSCAN (density-based spatial clustering of applications with noise) algorithm.\nClass DoublePoint; // A simple implementation of Clusterable for points with double coordinates.\nClass FuzzyKMeansClusterer<T extends Clusterable>; // Fuzzy K-Means clustering algorithm.\nClass KMeansPlusPlusClusterer<T extends Clusterable>; // Clustering algorithm based on David Arthur and Sergei Vassilvitski k-means++ algorithm.\nClass MultiKMeansPlusPlusClusterer<T extends Clusterable>; // A wrapper around a k-means++ clustering algorithm which performs multiple trials and returns the best solution.\nEnum KMeansPlusPlusClusterer.EmptyClusterStrategy; // Strategies to use for replacing an empty cluster.\n", "des": "Clustering algorithms."}
{"index": 1175, "repo": "commons-math3-3.6.1", "code": "package evaluation;\n\nClass ClusterEvaluator<T extends Clusterable>; // Base class for cluster evaluation methods.\nClass SumOfClusterVariances<T extends Clusterable>; // Computes the sum of intra-cluster distance variances according to the formula:\n", "des": "Cluster evaluation methods."}
{"index": 1176, "repo": "commons-math3-3.6.1", "code": "package distance;\n\nInterface DistanceMeasure; // Interface for distance measures of n-dimensional vectors.\nClass CanberraDistance; // Calculates the Canberra distance between two points.\nClass ChebyshevDistance; // Calculates the L∞ (max of abs) distance between two points.\nClass EarthMoversDistance; // Calculates the Earh Mover's distance (also known as Wasserstein metric) between two distributions.\nClass EuclideanDistance; // Calculates the L2 (Euclidean) distance between two points.\nClass ManhattanDistance; // Calculates the L1 (sum of abs) distance between two points.\n", "des": "Common distance measures."}
{"index": 1177, "repo": "commons-math3-3.6.1", "code": "package neuralnet;\n\npackage neuralnet.oned; // One-dimensional neural networks.\npackage neuralnet.sofm; // Self Organizing Feature Map.\npackage neuralnet.twod; // Two-dimensional neural networks.\nInterface FeatureInitializer; // Defines how to assign the first value of a neuron's feature.\nInterface UpdateAction; // Describes how to update the network in response to a training sample.\nClass FeatureInitializerFactory; // Creates functions that will select the initial values of a neuron's features.\nClass MapUtils; // Utilities for network maps.\nClass Network; // Neural network, composed of Neuron instances and the links between them.\nClass Network.NeuronIdentifierComparator; // Comparator that prescribes an order of the neurons according to the increasing order of their identifier.\nClass Neuron; // Describes a neuron element of a neural network.\nEnum SquareNeighbourhood; // Defines neighbourhood types.\n", "des": "Neural networks."}
{"index": 1178, "repo": "commons-math3-3.6.1", "code": "package oned;\n\nClass NeuronString; // Neural network with the topology of a one-dimensional line.\n", "des": "One-dimensional neural networks."}
{"index": 1179, "repo": "commons-math3-3.6.1", "code": "package sofm;\n\npackage sofm.util; // Miscellaneous utilities.\nInterface LearningFactorFunction; // Provides the learning rate as a function of the number of calls already performed during the learning task.\nInterface NeighbourhoodSizeFunction; // Provides the network neighbourhood's size as a function of the number of calls already performed during the learning task.\nClass KohonenTrainingTask; // Trainer for Kohonen's Self-Organizing Map.\nClass KohonenUpdateAction; // Update formula for Kohonen's Self-Organizing Map.\nClass LearningFactorFunctionFactory; // Factory for creating instances of LearningFactorFunction.\nClass NeighbourhoodSizeFunctionFactory; // Factory for creating instances of NeighbourhoodSizeFunction.\n", "des": "Self Organizing Feature Map."}
{"index": 1180, "repo": "commons-math3-3.6.1", "code": "package util;\n\nClass ExponentialDecayFunction; // Exponential decay function: a e-x / b, where x is the (integer) independent variable.\nClass QuasiSigmoidDecayFunction; // Decay function whose shape is similar to a sigmoid.\n", "des": "Miscellaneous utilities."}
{"index": 1181, "repo": "commons-math3-3.6.1", "code": "package twod;\n\npackage twod.util; // Utilities to visualize two-dimensional neural networks.\nClass NeuronSquareMesh2D; // Neural network with the topology of a two-dimensional surface.\nEnum NeuronSquareMesh2D.HorizontalDirection; // Horizontal (along row) direction.\nEnum NeuronSquareMesh2D.VerticalDirection; // Vertical (along column) direction.\n", "des": "Two-dimensional neural networks."}
{"index": 1182, "repo": "commons-math3-3.6.1", "code": "package util;\n\nInterface MapDataVisualization; // Interface for algorithms that compute some metrics of the projection of data on a 2D-map.\nInterface MapVisualization; // Interface for algorithms that compute some property of a 2D-map.\nClass HitHistogram; // Computes the hit histogram.\nClass LocationFinder; // Helper class to find the grid coordinates of a neuron.\nClass LocationFinder.Location; // Container holding a (row, column) pair.\nClass QuantizationError; // Computes the quantization error histogram.\nClass SmoothedDataHistogram; // Visualization of high-dimensional data projection on a 2D-map.\nClass TopographicErrorHistogram; // Computes the topographic error histogram.\nClass UnifiedDistanceMatrix; // U-Matrix visualization of high-dimensional data projection.\n", "des": "Utilities to visualize two-dimensional neural networks."}
{"index": 1183, "repo": "commons-math3-3.6.1", "code": "package ode;\n\npackage ode.events; // This package provides classes to handle discrete events occurring during Ordinary Differential Equations integration.\npackage ode.nonstiff; // This package provides classes to solve non-stiff Ordinary Differential Equations problems.\npackage ode.sampling; // This package provides classes to handle sampling steps during Ordinary Differential Equations integration.\nInterface FieldSecondaryEquations<T extends RealFieldElement<T>>; // This interface allows users to add secondary differential equations to a primary set of differential equations.\nInterface FirstOrderDifferentialEquations; // This interface represents a first order differential equations set.\nInterface FirstOrderFieldDifferentialEquations<T extends RealFieldElement<T>>; // This interface represents a first order differential equations set.\nInterface FirstOrderFieldIntegrator<T extends RealFieldElement<T>>; // This interface represents a first order integrator for differential equations.\nInterface FirstOrderIntegrator; // This interface represents a first order integrator for differential equations.\nInterface MainStateJacobianProvider; // Interface expanding first order differential equations in order to compute exactly the main state jacobian matrix for partial derivatives equations.\nInterface MultistepIntegrator.NordsieckTransformer; // as of 3.6 this unused interface is deprecated\nInterface ODEIntegrator; // This interface defines the common parts shared by integrators for first and second order differential equations.\nInterface Parameterizable; // This interface enables to process any parameterizable object.\nInterface ParameterizedODE; // Interface to compute by finite difference Jacobian matrix for some parameter when computing partial derivatives equations.\nInterface ParameterJacobianProvider; // Interface to compute exactly Jacobian matrix for some parameter when computing partial derivatives equations.\nInterface SecondaryEquations; // This interface allows users to add secondary differential equations to a primary set of differential equations.\nInterface SecondOrderDifferentialEquations; // This interface represents a second order differential equations set.\nInterface SecondOrderIntegrator; // This interface represents a second order integrator for differential equations.\nClass AbstractFieldIntegrator<T extends RealFieldElement<T>>; // Base class managing common boilerplate for all integrators.\nClass AbstractIntegrator; // Base class managing common boilerplate for all integrators.\n", "des": "This package provides classes to solve Ordinary Differential Equations problems."}
{"index": 1184, "repo": "commons-math3-3.6.1", "code": "package events;\n\nInterface EventHandler; // This interface represents a handler for discrete events triggered during ODE integration.\nInterface FieldEventHandler<T extends RealFieldElement<T>>; // This interface represents a handler for discrete events triggered during ODE integration.\nClass EventFilter; // Wrapper used to detect only increasing or decreasing events.\nClass EventState; // This class handles the state for one event handler during integration steps.\nClass FieldEventState<T extends RealFieldElement<T>>; // This class handles the state for one event handler during integration steps.\nEnum Action; // Enumerate for actions to be performed when an event occurs during ODE integration.\nEnum EventHandler.Action; // Enumerate for actions to be performed when an event occurs.\nEnum FilterType; // Enumerate for filtering events.\n", "des": "This package provides classes to handle discrete events occurring during Ordinary Differential Equations integration."}
{"index": 1185, "repo": "commons-math3-3.6.1", "code": "package nonstiff;\n\nInterface FieldButcherArrayProvider<T extends RealFieldElement<T>>; // This interface represents an integrator based on Butcher arrays.\nClass AdamsBashforthFieldIntegrator<T extends RealFieldElement<T>>; // This class implements explicit Adams-Bashforth integrators for Ordinary Differential Equations.\nClass AdamsBashforthIntegrator; // This class implements explicit Adams-Bashforth integrators for Ordinary Differential Equations.\nClass AdamsFieldIntegrator<T extends RealFieldElement<T>>; // Base class for Adams-Bashforth and Adams-Moulton integrators.\nClass AdamsIntegrator; // Base class for Adams-Bashforth and Adams-Moulton integrators.\nClass AdamsMoultonFieldIntegrator<T extends RealFieldElement<T>>; // This class implements implicit Adams-Moulton integrators for Ordinary Differential Equations.\nClass AdamsMoultonIntegrator; // This class implements implicit Adams-Moulton integrators for Ordinary Differential Equations.\nClass AdamsNordsieckFieldTransformer<T extends RealFieldElement<T>>; // Transformer to Nordsieck vectors for Adams integrators.\nClass AdamsNordsieckTransformer; // Transformer to Nordsieck vectors for Adams integrators.\nClass AdaptiveStepsizeFieldIntegrator<T extends RealFieldElement<T>>; // This abstract class holds the common part of all adaptive stepsize integrators for Ordinary Differential Equations.\nClass AdaptiveStepsizeIntegrator; // This abstract class holds the common part of all adaptive stepsize integrators for Ordinary Differential Equations.\nClass ClassicalRungeKuttaFieldIntegrator<T extends RealFieldElement<T>>; // This class implements the classical fourth order Runge-Kutta integrator for Ordinary Differential Equations (it is the most often used Runge-Kutta method).\n", "des": "This package provides classes to solve non-stiff Ordinary Differential Equations problems."}
{"index": 1186, "repo": "commons-math3-3.6.1", "code": "package sampling;\n\nInterface FieldFixedStepHandler<T extends RealFieldElement<T>>; // This interface represents a handler that should be called after each successful fixed step.\nInterface FieldStepHandler<T extends RealFieldElement<T>>; // This interface represents a handler that should be called after each successful step.\nInterface FieldStepInterpolator<T extends RealFieldElement<T>>; // This interface represents an interpolator over the last step during an ODE integration.\nInterface FixedStepHandler; // This interface represents a handler that should be called after each successful fixed step.\nInterface StepHandler; // This interface represents a handler that should be called after each successful step.\nInterface StepInterpolator; // This interface represents an interpolator over the last step during an ODE integration.\nClass AbstractFieldStepInterpolator<T extends RealFieldElement<T>>; // This abstract class represents an interpolator over the last step during an ODE integration.\nClass AbstractStepInterpolator; // This abstract class represents an interpolator over the last step during an ODE integration.\nClass DummyStepHandler; // This class is a step handler that does nothing.\nClass FieldStepNormalizer<T extends RealFieldElement<T>>; // This class wraps an object implementing FieldFixedStepHandler into a FieldStepHandler.\nClass NordsieckStepInterpolator; // This class implements an interpolator for integrators using Nordsieck representation.\nClass StepNormalizer; // This class wraps an object implementing FixedStepHandler into a StepHandler.\nEnum StepNormalizerBounds; // Step normalizer bounds settings.\nEnum StepNormalizerMode; // Step normalizer modes.\n", "des": "This package provides classes to handle sampling steps during Ordinary Differential Equations integration."}
{"index": 1187, "repo": "commons-math3-3.6.1", "code": "package optim;\n\npackage optim.linear; // Optimization algorithms for linear constrained problems.\npackage optim.univariate; // One-dimensional optimization algorithms.\nInterface ConvergenceChecker<PAIR>; // This interface specifies how to check if an optimization algorithm has converged.\nInterface OptimizationData; // Marker interface.\nInterface OptimizationProblem<PAIR>; // Common settings for all optimization problems.\nClass AbstractConvergenceChecker<PAIR>; // Base class for all convergence checker implementations.\nClass AbstractOptimizationProblem<PAIR>; // Base class for implementing optimization problems.\nClass BaseMultiStartMultivariateOptimizer<PAIR>; // Base class multi-start optimizer for a multivariate function.\nClass BaseMultivariateOptimizer<PAIR>; // Base class for implementing optimizers for multivariate functions.\nClass BaseOptimizer<PAIR>; // Base class for implementing optimizers.\nClass InitialGuess; // Starting point (first guess) of the optimization procedure.\nClass MaxEval; // Maximum number of evaluations of the function to be optimized.\nClass MaxIter; // Maximum number of iterations performed by an (iterative) algorithm.\nClass PointValuePair; // This class holds a point and the value of an objective function at that point.\nClass PointVectorValuePair; // This class holds a point and the vectorial value of an objective function at that point.\nClass SimpleBounds; // Simple optimization constraints: lower and upper bounds.\nClass SimplePointChecker<PAIR extends Pair<double[],? extends Object>>; // Simple implementation of the ConvergenceChecker interface using only point coordinates.\nClass SimpleValueChecker; // Simple implementation of the ConvergenceChecker interface using only objective function values.\nClass SimpleVectorValueChecker; // Simple implementation of the ConvergenceChecker interface using only objective function values.\n", "des": "Generally, optimizers are algorithms that will either minimize or maximize a scalar function, called the objective function."}
{"index": 1188, "repo": "commons-math3-3.6.1", "code": "package linear;\n\nClass LinearConstraint; // A linear constraint for a linear optimization problem.\nClass LinearConstraintSet; // Class that represents a set of linear constraints.\nClass LinearObjectiveFunction; // An objective function for a linear optimization problem.\nClass LinearOptimizer; // Base class for implementing linear optimizers.\nClass NonNegativeConstraint; // A constraint for a linear optimization problem indicating whether all variables must be restricted to non-negative values.\nClass SimplexSolver; // Solves a linear problem using the \"Two-Phase Simplex\" method.\nClass SolutionCallback; // A callback object that can be provided to a linear optimizer to keep track of the best solution found.\nEnum PivotSelectionRule; // Pivot selection rule to the use for a Simplex solver.\nEnum Relationship; // Types of relationships between two cells in a Solver LinearConstraint.\nClass NoFeasibleSolutionException; // This class represents exceptions thrown by optimizers when no solution fulfills the constraints.\nClass UnboundedSolutionException; // This class represents exceptions thrown by optimizers when a solution escapes to infinity.\n", "des": "Optimization algorithms for linear constrained problems."}
{"index": 1189, "repo": "commons-math3-3.6.1", "code": "package scalar;\n\npackage scalar.gradient; // This package provides optimization algorithms that require derivatives.\npackage scalar.noderiv; // This package provides optimization algorithms that do not require derivatives.\nClass GradientMultivariateOptimizer; // Base class for implementing optimizers for multivariate scalar differentiable functions.\nClass LeastSquaresConverter; // This class converts vectorial objective functions to scalar objective functions when the goal is to minimize them.\nClass LineSearch; // Class for finding the minimum of the objective function along a given direction.\nClass MultiStartMultivariateOptimizer; // Multi-start optimizer.\nClass MultivariateFunctionMappingAdapter; // Adapter for mapping bounded MultivariateFunction to unbounded ones.\nClass MultivariateFunctionPenaltyAdapter; // Adapter extending bounded MultivariateFunction to an unbouded domain using a penalty function.\nClass MultivariateOptimizer; // Base class for a multivariate scalar function optimizer.\nClass ObjectiveFunction; // Scalar function to be optimized.\nClass ObjectiveFunctionGradient; // Gradient of the scalar function to be optimized.\nEnum GoalType; // Goal type for an optimization problem (minimization or maximization of a scalar function.\n", "des": "Algorithms for optimizing a scalar function."}
{"index": 1190, "repo": "commons-math3-3.6.1", "code": "package gradient;\n\nInterface Preconditioner; // This interface represents a preconditioner for differentiable scalar objective function optimizers.\nClass NonLinearConjugateGradientOptimizer; // Non-linear conjugate gradient optimizer.\nClass NonLinearConjugateGradientOptimizer.BracketingStep; // As of v3.3, this class is not used anymore.\nClass NonLinearConjugateGradientOptimizer.IdentityPreconditioner; // Default identity preconditioner.\nEnum NonLinearConjugateGradientOptimizer.Formula; // Available choices of update formulas for the updating the parameter that is used to compute the successive conjugate search directions.\n", "des": "This package provides optimization algorithms that require derivatives."}
{"index": 1191, "repo": "commons-math3-3.6.1", "code": "package noderiv;\n\nClass AbstractSimplex; // This class implements the simplex concept.\nClass BOBYQAOptimizer; // Powell's BOBYQA algorithm.\nClass CMAESOptimizer; // An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES) for non-linear, non-convex, non-smooth, global function minimization.\nClass CMAESOptimizer.PopulationSize; // Population size.\nClass CMAESOptimizer.Sigma; // Input sigma values.\nClass MultiDirectionalSimplex; // This class implements the multi-directional direct search method.\nClass NelderMeadSimplex; // This class implements the Nelder-Mead simplex algorithm.\nClass PowellOptimizer; // Powell's algorithm.\nClass SimplexOptimizer; // This class implements simplex-based direct search optimization.\n", "des": "This package provides optimization algorithms that do not require derivatives."}
{"index": 1192, "repo": "commons-math3-3.6.1", "code": "package vector;\n\npackage vector.jacobian; // This package provides optimization algorithms that require derivatives.\nClass JacobianMultivariateVectorOptimizer; // All classes and interfaces in this package are deprecated.\nClass ModelFunction; // All classes and interfaces in this package are deprecated.\nClass ModelFunctionJacobian; // All classes and interfaces in this package are deprecated.\nClass MultiStartMultivariateVectorOptimizer;\nClass MultivariateVectorOptimizer;\nClass Target; // All classes and interfaces in this package are deprecated.\nClass Weight; // All classes and interfaces in this package are deprecated.\n", "des": "Algorithms for optimizing a vector function."}
{"index": 1193, "repo": "commons-math3-3.6.1", "code": "package jacobian;\n\nClass AbstractLeastSquaresOptimizer; // All classes and interfaces in this package are deprecated.\nClass GaussNewtonOptimizer; // All classes and interfaces in this package are deprecated.\nClass LevenbergMarquardtOptimizer; // All classes and interfaces in this package are deprecated.\n", "des": "This package provides optimization algorithms that require derivatives."}
{"index": 1194, "repo": "commons-math3-3.6.1", "code": "package univariate;\n\nClass BracketFinder; // Provide an interval that brackets a local optimum of a function.\nClass BrentOptimizer; // For a function defined on some interval (lo, hi), this class finds an approximation x to the point at which the function attains its minimum.\nClass MultiStartUnivariateOptimizer; // Special implementation of the UnivariateOptimizer interface adding multi-start features to an existing optimizer.\nClass SearchInterval; // Search interval and (optional) start value.\nClass SimpleUnivariateValueChecker; // Simple implementation of the ConvergenceChecker interface that uses only objective function values.\nClass UnivariateObjectiveFunction; // Scalar function to be optimized.\nClass UnivariateOptimizer; // Base class for a univariate scalar function optimizer.\nClass UnivariatePointValuePair; // This class holds a point and the value of an objective function at this point.\n", "des": "One-dimensional optimization algorithms."}
{"index": 1195, "repo": "commons-math3-3.6.1", "code": "package optimization;\n\npackage optimization.direct; // This package provides optimization algorithms that don't require derivatives.\npackage optimization.fitting; // This package provides classes to perform curve fitting.\npackage optimization.general; // This package provides optimization algorithms that require derivatives.\npackage optimization.linear; // This package provides optimization algorithms for linear constrained problems.\npackage optimization.univariate; // Univariate real functions minimum finding algorithms.\nInterface BaseMultivariateOptimizer<FUNC extends MultivariateFunction>; // As of 3.1 (to be removed in 4.0).\nInterface BaseMultivariateSimpleBoundsOptimizer<FUNC extends MultivariateFunction>; // As of 3.1 (to be removed in 4.0).\nInterface BaseMultivariateVectorOptimizer<FUNC extends MultivariateVectorFunction>; // As of 3.1 (to be removed in 4.0).\nInterface BaseOptimizer<PAIR>; // As of 3.1 (to be removed in 4.0).\nInterface ConvergenceChecker<PAIR>; // As of 3.1 (to be removed in 4.0).\nInterface DifferentiableMultivariateOptimizer; // As of 3.1 (to be removed in 4.0).\nInterface DifferentiableMultivariateVectorOptimizer; // As of 3.1 (to be removed in 4.0).\nInterface MultivariateDifferentiableOptimizer; // As of 3.1 (to be removed in 4.0).\nInterface MultivariateDifferentiableVectorOptimizer; // As of 3.1 (to be removed in 4.0).\nInterface MultivariateOptimizer; // As of 3.1 (to be removed in 4.0).\nInterface OptimizationData; // As of 3.1 (to be removed in 4.0).\nClass AbstractConvergenceChecker<PAIR>; // As of 3.1 (to be removed in 4.0).\nClass BaseMultivariateMultiStartOptimizer<FUNC extends MultivariateFunction>; // As of 3.1 (to be removed in 4.0).\nClass BaseMultivariateVectorMultiStartOptimizer<FUNC extends MultivariateVectorFunction>; // As of 3.1 (to be removed in 4.0).\nClass DifferentiableMultivariateMultiStartOptimizer; // As of 3.1 (to be removed in 4.0).\n", "des": "All classes and sub-packages of this package are deprecated."}
{"index": 1196, "repo": "commons-math3-3.6.1", "code": "package direct;\n\nClass AbstractSimplex; // As of 3.1 (to be removed in 4.0).\nClass BaseAbstractMultivariateOptimizer<FUNC extends MultivariateFunction>; // As of 3.1 (to be removed in 4.0).\nClass BaseAbstractMultivariateSimpleBoundsOptimizer<FUNC extends MultivariateFunction>; // As of 3.1 (to be removed in 4.0).\nClass BaseAbstractMultivariateVectorOptimizer<FUNC extends MultivariateVectorFunction>; // As of 3.1 (to be removed in 4.0).\nClass BOBYQAOptimizer; // As of 3.1 (to be removed in 4.0).\nClass CMAESOptimizer; // As of 3.1 (to be removed in 4.0).\nClass CMAESOptimizer.PopulationSize; // Population size.\nClass CMAESOptimizer.Sigma; // Input sigma values.\nClass MultiDirectionalSimplex; // As of 3.1 (to be removed in 4.0).\nClass MultivariateFunctionMappingAdapter; // As of 3.1 (to be removed in 4.0).\nClass MultivariateFunctionPenaltyAdapter; // As of 3.1 (to be removed in 4.0).\nClass NelderMeadSimplex; // As of 3.1 (to be removed in 4.0).\nClass PowellOptimizer; // As of 3.1 (to be removed in 4.0).\nClass SimplexOptimizer; // As of 3.1 (to be removed in 4.0).\n", "des": "This package provides optimization algorithms that don't require derivatives."}
{"index": 1197, "repo": "commons-math3-3.6.1", "code": "package fitting;\n\nClass CurveFitter<T extends ParametricUnivariateFunction>; // As of 3.1 (to be removed in 4.0).\nClass GaussianFitter; // As of 3.1 (to be removed in 4.0).\nClass GaussianFitter.ParameterGuesser; // Guesses the parameters norm, mean, and sigma of a Gaussian.Parametric based on the specified observed points.\nClass HarmonicFitter; // As of 3.1 (to be removed in 4.0).\nClass HarmonicFitter.ParameterGuesser; // This class guesses harmonic coefficients from a sample.\nClass PolynomialFitter; // As of 3.1 (to be removed in 4.0).\nClass WeightedObservedPoint; // As of 3.1 (to be removed in 4.0).\n", "des": "This package provides classes to perform curve fitting."}
{"index": 1198, "repo": "commons-math3-3.6.1", "code": "package general;\n\nInterface Preconditioner; // As of 3.1 (to be removed in 4.0).\nClass AbstractDifferentiableOptimizer; // As of 3.1 (to be removed in 4.0).\nClass AbstractLeastSquaresOptimizer; // As of 3.1 (to be removed in 4.0).\nClass AbstractScalarDifferentiableOptimizer; // As of 3.1 (to be removed in 4.0).\nClass GaussNewtonOptimizer; // As of 3.1 (to be removed in 4.0).\nClass LevenbergMarquardtOptimizer; // As of 3.1 (to be removed in 4.0).\nClass NonLinearConjugateGradientOptimizer; // As of 3.1 (to be removed in 4.0).\nClass NonLinearConjugateGradientOptimizer.IdentityPreconditioner; // Default identity preconditioner.\nEnum ConjugateGradientFormula; // As of 3.1 (to be removed in 4.0).\n", "des": "This package provides optimization algorithms that require derivatives."}
{"index": 1199, "repo": "commons-math3-3.6.1", "code": "package linear;\n\nInterface LinearOptimizer; // As of 3.1 (to be removed in 4.0).\nClass AbstractLinearOptimizer; // As of 3.1 (to be removed in 4.0).\nClass LinearConstraint; // As of 3.1 (to be removed in 4.0).\nClass LinearObjectiveFunction; // As of 3.1 (to be removed in 4.0).\nClass SimplexSolver; // As of 3.1 (to be removed in 4.0).\nEnum Relationship; // As of 3.1 (to be removed in 4.0).\nClass NoFeasibleSolutionException; // As of 3.1 (to be removed in 4.0).\nClass UnboundedSolutionException; // As of 3.1 (to be removed in 4.0).\n", "des": "This package provides optimization algorithms for linear constrained problems."}
{"index": 1200, "repo": "commons-math3-3.6.1", "code": "package univariate;\n\nInterface BaseUnivariateOptimizer<FUNC extends UnivariateFunction>; // As of 3.1 (to be removed in 4.0).\nInterface UnivariateOptimizer; // As of 3.1 (to be removed in 4.0).\nClass BaseAbstractUnivariateOptimizer; // As of 3.1 (to be removed in 4.0).\nClass BracketFinder; // As of 3.1 (to be removed in 4.0).\nClass BrentOptimizer; // As of 3.1 (to be removed in 4.0).\nClass SimpleUnivariateValueChecker; // As of 3.1 (to be removed in 4.0).\nClass UnivariateMultiStartOptimizer<FUNC extends UnivariateFunction>; // As of 3.1 (to be removed in 4.0).\nClass UnivariatePointValuePair; // As of 3.1 (to be removed in 4.0).\n", "des": "Univariate real functions minimum finding algorithms."}
{"index": 1201, "repo": "commons-math3-3.6.1", "code": "package primes;\n\nClass Primes; // Methods related to prime numbers in the range of int: primality test prime number generation factorization\n", "des": "Methods related to prime numbers like primality test, factor decomposition."}
{"index": 1202, "repo": "commons-math3-3.6.1", "code": "package random;\n\nInterface NormalizedRandomGenerator; // This interface represent a normalized random generator for scalars.\nInterface RandomData; // to be removed in 4.0.\nInterface RandomGenerator; // Interface extracted from java.util.Random.\nInterface RandomVectorGenerator; // This interface represents a random generator for whole vectors.\nClass AbstractRandomGenerator; // Abstract class implementing the RandomGenerator interface.\nClass AbstractWell; // This abstract class implements the WELL class of pseudo-random number generator from François Panneton, Pierre L'Ecuyer and Makoto Matsumoto.\nClass BitsStreamGenerator; // Base class for random number generators that generates bits streams.\nClass CorrelatedRandomVectorGenerator; // A RandomVectorGenerator that generates vectors with with correlated components.\nClass EmpiricalDistribution; // Represents an empirical probability distribution -- a probability distribution derived from observed data without making any assumptions about the functional form of the population distribution that the data come from.\nClass GaussianRandomGenerator; // This class is a gaussian normalized random generator for scalars.\nClass HaltonSequenceGenerator; // Implementation of a Halton sequence.\nClass ISAACRandom; // ISAAC: a fast cryptographic pseudo-random number generator ISAAC (Indirection, Shift, Accumulate, Add, and Count) generates 32-bit random numbers.\nClass JDKRandomGenerator; // Extension of java.util.Random to implement RandomGenerator.\nClass MersenneTwister; // This class implements a powerful pseudo-random number generator developed by Makoto Matsumoto and Takuji Nishimura during 1996-1997.\nClass RandomAdaptor; // Extension of java.util.Random wrapping a RandomGenerator.\nClass RandomDataGenerator; // Implements the RandomData interface using a RandomGenerator instance to generate non-secure data and a SecureRandom instance to provide data for the nextSecureXxx methods.\nClass RandomDataImpl; // to be removed in 4.0.\nClass RandomGeneratorFactory; // Utilities for creating RandomGenerator instances.\nClass SobolSequenceGenerator; // Implementation of a Sobol sequence.\nClass StableRandomGenerator; // This class provides a stable normalized random generator.\n", "des": "Random number and random data generators."}
{"index": 1203, "repo": "commons-math3-3.6.1", "code": "package special;\n\nClass BesselJ; // This class provides computation methods related to Bessel functions of the first kind.\nClass BesselJ.BesselJResult; // Encapsulates the results returned by BesselJ.rjBesl(double, double, int).\nClass Beta; // This is a utility class that provides computation methods related to the Beta family of functions.\nClass Erf; // This is a utility class that provides computation methods related to the error functions.\nClass Gamma; // This is a utility class that provides computation methods related to the Γ (Gamma) family of functions.\n", "des": "Implementations of special functions such as Beta and Gamma."}
{"index": 1204, "repo": "commons-math3-3.6.1", "code": "package stat;\n\npackage stat.clustering; // All classes and sub-packages of this package are deprecated.\npackage stat.correlation; // Correlations/Covariance computations.\npackage stat.descriptive; // Generic univariate summary statistic objects.\npackage stat.inference; // Classes providing hypothesis testing.\npackage stat.interval; // Classes providing binomial proportion confidence interval construction.\npackage stat.ranking; // Classes providing rank transformations.\npackage stat.regression; // Statistical routines involving multivariate data.\nClass Frequency; // Maintains a frequency distribution.\nClass StatUtils; // StatUtils provides static methods for computing statistics based on data stored in double[] arrays.\n", "des": "Data storage, manipulation and summary routines."}
{"index": 1205, "repo": "commons-math3-3.6.1", "code": "package clustering;\n\nInterface Clusterable<T>; // As of 3.2 (to be removed in 4.0), use Clusterable instead\nClass Cluster<T extends Clusterable<T>>; // As of 3.2 (to be removed in 4.0), use Cluster instead\nClass DBSCANClusterer<T extends Clusterable<T>>; // As of 3.2 (to be removed in 4.0), use DBSCANClusterer instead\nClass EuclideanDoublePoint; // As of 3.2 (to be removed in 4.0), use DoublePoint instead\nClass EuclideanIntegerPoint; // As of 3.2 (to be removed in 4.0), use DoublePoint instead\nClass KMeansPlusPlusClusterer<T extends Clusterable<T>>; // As of 3.2 (to be removed in 4.0), use KMeansPlusPlusClusterer instead\nEnum KMeansPlusPlusClusterer.EmptyClusterStrategy; // Strategies to use for replacing an empty cluster.\n", "des": "All classes and sub-packages of this package are deprecated."}
{"index": 1206, "repo": "commons-math3-3.6.1", "code": "package correlation;\n\nClass Covariance; // Computes covariances for pairs of arrays or columns of a matrix.\nClass KendallsCorrelation; // Implementation of Kendall's Tau-b rank correlation.\nClass PearsonsCorrelation; // Computes Pearson's product-moment correlation coefficients for pairs of arrays or columns of a matrix.\nClass SpearmansCorrelation; // Spearman's rank correlation.\nClass StorelessCovariance; // Covariance implementation that does not require input data to be stored in memory.\n", "des": "Correlations/Covariance computations."}
{"index": 1207, "repo": "commons-math3-3.6.1", "code": "package descriptive;\n\npackage descriptive.moment; // Summary statistics based on moments.\npackage descriptive.rank; // Summary statistics based on ranks.\npackage descriptive.summary; // Other summary statistics.\nInterface StatisticalMultivariateSummary; // Reporting interface for basic multivariate statistics.\nInterface StatisticalSummary; // Reporting interface for basic univariate statistics.\nInterface StorelessUnivariateStatistic; // Extends the definition of UnivariateStatistic with StorelessUnivariateStatistic.increment(double) and StorelessUnivariateStatistic.incrementAll(double[]) methods for adding values and updating internal state.\nInterface UnivariateStatistic; // Base interface implemented by all statistics.\nInterface WeightedEvaluation; // Weighted evaluation for statistics.\nClass AbstractStorelessUnivariateStatistic; // Abstract implementation of the StorelessUnivariateStatistic interface.\nClass AbstractUnivariateStatistic; // Abstract base class for all implementations of the UnivariateStatistic interface.\nClass AggregateSummaryStatistics; // An aggregator for SummaryStatistics from several data sets or data set partitions.\nClass DescriptiveStatistics; // Maintains a dataset of values of a single variable and computes descriptive statistics based on stored data.\nClass MultivariateSummaryStatistics; // Computes summary statistics for a stream of n-tuples added using the addValue method.\nClass StatisticalSummaryValues; // Value object representing the results of a univariate statistical summary.\nClass SummaryStatistics; // Computes summary statistics for a stream of data values added using the addValue method.\nClass SynchronizedDescriptiveStatistics; // Implementation of DescriptiveStatistics that is safe to use in a multithreaded environment.\nClass SynchronizedMultivariateSummaryStatistics; // Implementation of MultivariateSummaryStatistics that is safe to use in a multithreaded environment.\nClass SynchronizedSummaryStatistics; // Implementation of SummaryStatistics that is safe to use in a multithreaded environment.\n", "des": "Generic univariate summary statistic objects."}
{"index": 1208, "repo": "commons-math3-3.6.1", "code": "package moment;\n\nClass GeometricMean; // Returns the geometric mean of the available values.\nClass Kurtosis; // Computes the Kurtosis of the available values.\nClass Mean; // Computes the arithmetic mean of a set of values.\nClass SecondMoment; // Computes a statistic related to the Second Central Moment.\nClass SemiVariance; // Computes the semivariance of a set of values with respect to a given cutoff value.\nClass Skewness; // Computes the skewness of the available values.\nClass StandardDeviation; // Computes the sample standard deviation.\nClass Variance; // Computes the variance of the available values.\nClass VectorialCovariance; // Returns the covariance matrix of the available vectors.\nClass VectorialMean; // Returns the arithmetic mean of the available vectors.\nEnum SemiVariance.Direction; // The direction of the semivariance - either upside or downside.\n", "des": "Summary statistics based on moments."}
{"index": 1209, "repo": "commons-math3-3.6.1", "code": "package rank;\n\nInterface PSquarePercentile.PSquareMarkers; // An interface that encapsulates abstractions of the P-square algorithm markers as is explained in the original works.\nClass Max; // Returns the maximum of the available values.\nClass Median; // Returns the median of the available values.\nClass Min; // Returns the minimum of the available values.\nClass Percentile; // Provides percentile computation.\nClass PSquarePercentile; // A StorelessUnivariateStatistic estimating percentiles using the P2 Algorithm as explained by Raj Jain and Imrich Chlamtac in P2 Algorithm for Dynamic Calculation of Quantiles and Histogram Without Storing Observations.\nEnum Percentile.EstimationType; // An enum for various estimation strategies of a percentile referred in wikipedia on quantile with the names of enum matching those of types mentioned in wikipedia.\n", "des": "Summary statistics based on ranks."}
{"index": 1210, "repo": "commons-math3-3.6.1", "code": "package summary;\n\nClass Product; // Returns the product of the available values.\nClass Sum; // Returns the sum of the available values.\nClass SumOfLogs; // Returns the sum of the natural logs for this collection of values.\nClass SumOfSquares; // Returns the sum of the squares of the available values.\n", "des": "Other summary statistics."}
{"index": 1211, "repo": "commons-math3-3.6.1", "code": "package inference;\n\nClass BinomialTest; // Implements binomial test statistics.\nClass ChiSquareTest; // Implements Chi-Square test statistics.\nClass GTest; // Implements G Test statistics.\nClass KolmogorovSmirnovTest; // Implementation of the Kolmogorov-Smirnov (K-S) test for equality of continuous distributions.\nClass MannWhitneyUTest; // An implementation of the Mann-Whitney U test (also called Wilcoxon rank-sum test).\nClass OneWayAnova; // Implements one-way ANOVA (analysis of variance) statistics.\nClass TestUtils; // A collection of static methods to create inference test instances or to perform inference tests.\nClass TTest; // An implementation for Student's t-tests.\nClass WilcoxonSignedRankTest; // An implementation of the Wilcoxon signed-rank test.\nEnum AlternativeHypothesis; // Represents an alternative hypothesis for a hypothesis test.\n", "des": "Classes providing hypothesis testing."}
{"index": 1212, "repo": "commons-math3-3.6.1", "code": "package interval;\n\nInterface BinomialConfidenceInterval; // Interface to generate confidence intervals for a binomial proportion.\nClass AgrestiCoullInterval; // Implements the Agresti-Coull method for creating a binomial proportion confidence interval.\nClass ClopperPearsonInterval; // Implements the Clopper-Pearson method for creating a binomial proportion confidence interval.\nClass ConfidenceInterval; // Represents an interval estimate of a population parameter.\nClass IntervalUtils; // Factory methods to generate confidence intervals for a binomial proportion.\nClass NormalApproximationInterval; // Implements the normal approximation method for creating a binomial proportion confidence interval.\nClass WilsonScoreInterval; // Implements the Wilson score method for creating a binomial proportion confidence interval.\n", "des": "Classes providing binomial proportion confidence interval construction."}
{"index": 1213, "repo": "commons-math3-3.6.1", "code": "package ranking;\n\nInterface RankingAlgorithm; // Interface representing a rank transformation.\nClass NaturalRanking; // Ranking based on the natural ordering on doubles.\nEnum NaNStrategy; // Strategies for handling NaN values in rank transformations.\nEnum TiesStrategy; // Strategies for handling tied values in rank transformations.\n", "des": "Classes providing rank transformations."}
{"index": 1214, "repo": "commons-math3-3.6.1", "code": "package regression;\n\nInterface MultipleLinearRegression; // The multiple linear regression can be represented in matrix-notation.\nInterface UpdatingMultipleLinearRegression; // An interface for regression models allowing for dynamic updating of the data.\nClass AbstractMultipleLinearRegression; // Abstract base class for implementations of MultipleLinearRegression.\nClass GLSMultipleLinearRegression; // The GLS implementation of multiple linear regression.\nClass MillerUpdatingRegression; // This class is a concrete implementation of the UpdatingMultipleLinearRegression interface.\nClass OLSMultipleLinearRegression; // Implements ordinary least squares (OLS) to estimate the parameters of a multiple linear regression model.\nClass RegressionResults; // Results of a Multiple Linear Regression model fit.\nClass SimpleRegression; // Estimates an ordinary least squares regression model with one independent variable.\nClass ModelSpecificationException; // Exception thrown when a regression model is not correctly specified.\n", "des": "Statistical routines involving multivariate data."}
{"index": 1215, "repo": "commons-math3-3.6.1", "code": "package transform;\n\nInterface RealTransformer; // Interface for one-dimensional data sets transformations producing real results.\nClass FastCosineTransformer; // Implements the Fast Cosine Transform for transformation of one-dimensional real data sets.\nClass FastFourierTransformer; // Implements the Fast Fourier Transform for transformation of one-dimensional real or complex data sets.\nClass FastHadamardTransformer; // Implements the Fast Hadamard Transform (FHT).\nClass FastSineTransformer; // Implements the Fast Sine Transform for transformation of one-dimensional real data sets.\nClass TransformUtils; // Useful functions for the implementation of various transforms.\nEnum DctNormalization; // This enumeration defines the various types of normalizations that can be applied to discrete cosine transforms (DCT).\nEnum DftNormalization; // This enumeration defines the various types of normalizations that can be applied to discrete Fourier transforms (DFT).\nEnum DstNormalization; // This enumeration defines the various types of normalizations that can be applied to discrete sine transforms (DST).\nEnum TransformType; // This enumeration defines the type of transform which is to be computed.\n", "des": "Implementations of transform methods, including Fast Fourier transforms."}
{"index": 1216, "repo": "commons-math3-3.6.1", "code": "package util;\n\nInterface DoubleArray; // Provides a standard interface for double arrays.\nInterface Incrementor.MaxCountExceededCallback; // Defines a method to be called at counter exhaustion.\nInterface IntegerSequence.Incrementor.MaxCountExceededCallback; // Defines a method to be called at counter exhaustion.\nInterface IterationListener; // The listener interface for receiving events occurring in an iterative algorithm.\nInterface MathArrays.Function; // Real-valued function that operate on an array or a part of it.\nInterface NumberTransformer; // Subclasses implementing this interface can transform Objects to doubles.\nInterface PivotingStrategyInterface; // A strategy to pick a pivoting index of an array for doing partitioning.\nClass ArithmeticUtils; // Some useful, arithmetics related, additions to the built-in functions in Math.\nClass BigReal; // Arbitrary precision decimal number.\nClass BigRealField; // Representation of real numbers with arbitrary precision field.\nClass CentralPivotingStrategy; // A mid point strategy based on the average of begin and end indices.\nClass Combinations; // Utility to create combinations (n, k) of k elements in a set of n elements.\nClass CombinatoricsUtils; // Combinatorial utilities.\nClass CompositeFormat; // Base class for formatters of composite objects (complex numbers, vectors ...).\nClass ContinuedFraction; // Provides a generic means to evaluate continued fractions.\nClass Decimal64; // This class wraps a double value in an object.\nClass Decimal64Field; // The field of double precision floating-point numbers.\nClass DefaultTransformer; // A Default NumberTransformer for java.lang.Numbers and Numeric Strings.\nClass FastMath; // Faster, more accurate, portable alternative to Math and StrictMath for large scale computation.\nClass Incrementor; // Use IntegerSequence.Incrementor instead.\nClass IntegerSequence; // Provides a sequence of integers.\nClass IntegerSequence.Incrementor; // Utility that increments a counter until a maximum is reached, at which point, the instance will by default throw a MaxCountExceededException.\nClass IntegerSequence.Range; // Generates a sequence of integers.\nClass IterationEvent; // The root class from which all events occurring while running an IterationManager should be derived.\nClass IterationManager; // This abstract class provides a general framework for managing iterative algorithms.\n", "des": "Convenience routines and common data structures used throughout the commons-math library."}
{"index": 1217, "repo": "commons-text-1.10.0", "code": "package text;\n\npackage text.diff; // Provides algorithms for diff between strings.\npackage text.io; // StringSubstitutorReader is a Reader that performs string substitution on a source Reader using a StringSubstitutor.\npackage text.lookup; // Provides algorithms for looking up strings for use with a StringSubstitutor.\npackage text.matcher; // Provides algorithms for matching up strings for use with a StringSubstitutor.\npackage text.numbers; // Provides algorithms for converting numbers to strings.\npackage text.similarity; // Provides algorithms for string similarity.\npackage text.translate; // An API for creating text translation routines from a set of smaller building blocks.\nInterface Builder<T>; // The Builder interface is designed to designate a class as a builder object in the Builder design pattern.\nInterface CharacterPredicate; // A predicate for selecting code points.\nInterface FormatFactory; // Format factory.\nInterface TextRandomProvider; // TextRandomProvider implementations are used by RandomStringGenerator as a source of randomness.\nClass AlphabetConverter; // Convert from one alphabet to another, with the possibility of leaving certain characters unencoded.\nClass CaseUtils; // Case manipulation operations on Strings that contain words.\nClass CompositeFormat; // Formats using one formatter and parses using a different formatter.\nClass ExtendedMessageFormat; // Extends java.text.MessageFormat to allow pluggable/additional formatting options for embedded format elements.\nClass FormattableUtils; // Provides utilities for working with the Formattable interface.\nClass RandomStringGenerator; // Generates random Unicode strings containing the specified number of code points.\nClass RandomStringGenerator.Builder; // A builder for generating RandomStringGenerator instances.\nClass StrBuilder; // Deprecated as of 1.3, use TextStringBuilder instead.\nClass StringEscapeUtils; // Escapes and unescapes Strings for Java, Java Script, HTML and XML.\nClass StringEscapeUtils.Builder; // Convenience wrapper for StringBuilder providing escape methods.\nClass StringSubstitutor; // Substitutes variables within a string by values.\nClass StringTokenizer; // Tokenizes a string based on delimiters (separators) and supporting quoting and ignored character concepts.\nClass StrLookup<V>; // Deprecated as of 1.3, use StringLookupFactory instead.\nClass StrMatcher; // Deprecated as of 1.3, use StringMatcherFactory instead.\n", "des": "Basic classes for text handling."}
{"index": 1218, "repo": "commons-text-1.10.0", "code": "package diff;\n\nInterface CommandVisitor<T>; // This interface should be implemented by user object to walk through EditScript objects.\nInterface ReplacementsHandler<T>; // This interface is devoted to handle synchronized replacement sequences.\nClass DeleteCommand<T>; // Command representing the deletion of one object of the first sequence.\nClass EditCommand<T>; // Abstract base class for all commands used to transform an objects sequence into another one.\nClass EditScript<T>; // This class gathers all the commands needed to transform one objects sequence into another objects sequence.\nClass InsertCommand<T>; // Command representing the insertion of one object of the second sequence.\nClass KeepCommand<T>; // Command representing the keeping of one object present in both sequences.\nClass ReplacementsFinder<T>; // This class handles sequences of replacements resulting from a comparison.\nClass StringsComparator; // It is guaranteed that the comparisons will always be done as o1.equals(o2) where o1 belongs to the first sequence and o2 belongs to the second sequence.\n", "des": "Provides algorithms for diff between strings."}
{"index": 1219, "repo": "commons-text-1.10.0", "code": "package io;\n\nClass StringSubstitutorReader; // A Reader that performs string substitution on a source Reader using a StringSubstitutor.\n", "des": "StringSubstitutorReader is a Reader that performs string substitution on a source Reader using a StringSubstitutor."}
{"index": 1220, "repo": "commons-text-1.10.0", "code": "package lookup;\n\nInterface BiStringLookup<U>; // Lookups a String key for a String value.\nInterface StringLookup; // Lookups a String key for a String value.\nClass StringLookupFactory; // Create instances of string lookups or access singleton string lookups implemented in this package.\nEnum DefaultStringLookup; // An enumeration defining StringLookup objects available through StringLookupFactory.\n", "des": "Provides algorithms for looking up strings for use with a StringSubstitutor."}
{"index": 1221, "repo": "commons-text-1.10.0", "code": "package matcher;\n\nInterface StringMatcher; // Determines if a character array portion matches.\nClass StringMatcherFactory; // Provides access to matchers defined in this package.\n", "des": "Provides algorithms for matching up strings for use with a StringSubstitutor."}
{"index": 1222, "repo": "commons-text-1.10.0", "code": "package numbers;\n\nClass DoubleFormat.Builder; // Builds configured format functions for standard double format types.\nEnum DoubleFormat; // Enum containing standard double format types with methods to produce configured formatter instances.\n", "des": "Provides algorithms for converting numbers to strings."}
{"index": 1223, "repo": "commons-text-1.10.0", "code": "package similarity;\n\nInterface EditDistance<R>; // Interface for Edit Distances.\nInterface SimilarityScore<R>; // Interface for the concept of a string similarity score.\nClass CosineDistance; // Measures the cosine distance between two character sequences.\nClass CosineSimilarity; // Measures the Cosine similarity of two vectors of an inner product space and compares the angle between them.\nClass EditDistanceFrom<R>; // This stores a EditDistance implementation and a CharSequence \"left\" string.\nClass FuzzyScore; // A matching algorithm that is similar to the searching algorithms implemented in editors such as Sublime Text, TextMate, Atom and others.\nClass HammingDistance; // The hamming distance between two strings of equal length is the number of positions at which the corresponding symbols are different.\nClass IntersectionResult; // Represents the intersection result between two sets.\nClass IntersectionSimilarity<T>; // Measures the intersection of two sets created from a pair of character sequences.\nClass JaccardDistance; // Measures the Jaccard distance of two sets of character sequence.\nClass JaccardSimilarity; // Measures the Jaccard similarity (aka Jaccard index) of two sets of character sequence.\nClass JaroWinklerDistance; // Measures the Jaro-Winkler distance of two character sequences.\nClass JaroWinklerSimilarity; // A similarity algorithm indicating the percentage of matched characters between two character sequences.\nClass LevenshteinDetailedDistance; // An algorithm for measuring the difference between two character sequences.\nClass LevenshteinDistance; // An algorithm for measuring the difference between two character sequences.\nClass LevenshteinResults; // Container class to store Levenshtein distance between two character sequences.\nClass LongestCommonSubsequence; // A similarity algorithm indicating the length of the longest common subsequence between two strings.\nClass LongestCommonSubsequenceDistance; // An edit distance algorithm based on the length of the longest common subsequence between two strings.\nClass SimilarityScoreFrom<R>; // This stores a SimilarityScore implementation and a CharSequence \"left\" string.\n", "des": "Provides algorithms for string similarity."}
{"index": 1224, "repo": "commons-text-1.10.0", "code": "package translate;\n\nClass AggregateTranslator; // Executes a sequence of translators one after the other.\nClass CharSequenceTranslator; // An API for translating text.\nClass CodePointTranslator; // Helper subclass to CharSequenceTranslator to allow for translations that will replace up to one character at a time.\nClass CsvTranslators; // This class holds inner classes for escaping/unescaping Comma Separated Values.\nClass CsvTranslators.CsvEscaper; // Translator for escaping Comma Separated Values.\nClass CsvTranslators.CsvUnescaper; // Translator for unescaping escaped Comma Separated Value entries.\nClass EntityArrays; // Class holding various entity data for HTML and XML - generally for use with the LookupTranslator.\nClass JavaUnicodeEscaper; // Translates code points to their Unicode escaped value suitable for Java source.\nClass LookupTranslator; // Translates a value using a lookup table.\nClass NumericEntityEscaper; // Translates code points to their XML numeric entity escaped value.\nClass NumericEntityUnescaper; // Translates XML numeric entities of the form &#[xX]?\\d+;? to the specific code point.\nClass OctalUnescaper; // Translate escaped octal Strings back to their octal values.\nClass UnicodeEscaper; // Translates code points to their Unicode escaped value.\nClass UnicodeUnescaper; // Translates escaped Unicode values of the form \\\\u+\\d\\d\\d\\d back to Unicode.\nClass UnicodeUnpairedSurrogateRemover; // Helper subclass to CharSequenceTranslator to remove unpaired surrogates.\nEnum NumericEntityUnescaper.OPTION; // Enumerates NumericEntityUnescaper options for unescaping.\n", "des": "An API for creating text translation routines from a set of smaller building blocks."}
{"index": 1225, "repo": "spring-plugin-core-3.0.0", "code": "package core;\n\npackage core.config; // This package contains configuration support classes to ease registry configuration with Spring namespaces.\npackage core.support; // This package contains support classes to create bean lists or plugin registry instances out of beans implementing a certain interface.\npublic class OrderAwarePluginRegistry<T extends Plugin<S>,S> extends SimplePluginRegistry<T,S>; // PluginRegistry implementation that be made aware of a certain ordering of Plugins.\npublic interface Plugin<S>; // Central interface for plugins for the system.\npublic interface PluginRegistry<T extends Plugin<S>,S> extends Iterable<T>; // Registry for Plugins.\npublic abstract class PluginRegistrySupport<T extends Plugin<S>,S> extends Object implements PluginRegistry<T,S>, Iterable<T>; // Base class for PluginRegistry implementations.\npublic class SimplePluginRegistry<T extends Plugin<S>,S> extends PluginRegistrySupport<T,S>; // Basic implementation of PluginRegistry.\n", "des": "This package contains the core plugin API."}
{"index": 1226, "repo": "spring-plugin-core-3.0.0", "code": "package config;\n\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented @Import(PluginRegistriesBeanDefinitionRegistrar.class) public @interface EnablePluginRegistries; // Enables exposure of PluginRegistry instances for the configured Plugin types\npublic class PluginListDefinitionParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser; // Bean definition parser to register <list /> elements from the plugin namespace.\npublic class PluginNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // Simple namespace handler for plugin-config namespace.\npublic class PluginRegistriesBeanDefinitionRegistrar extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar; // ImportBeanDefinitionRegistrar to register PluginRegistryFactoryBean instances for type listed in EnablePluginRegistries.\npublic class PluginRegistryDefinitionParser extends PluginListDefinitionParser; // Simple extension of PluginListDefinitionParser.\n", "des": "This package contains configuration support classes to ease registry configuration with Spring namespaces."}
{"index": 1227, "repo": "spring-plugin-core-3.0.0", "code": "package support;\n\npublic abstract class AbstractTypeAwareSupport<T> extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>, org.springframework.beans.factory.InitializingBean; // Abstract base class to implement types that need access to all beans of a given type from the ApplicationContext.\npublic class BeanListFactoryBean<T> extends AbstractTypeAwareSupport<T> implements org.springframework.beans.factory.FactoryBean<List<T>>; // Factory to create bean lists for a given type.\npublic class PluginRegistryFactoryBean<T extends Plugin<S>,S> extends AbstractTypeAwareSupport<T> implements org.springframework.beans.factory.FactoryBean<PluginRegistry<T,S>>; // FactoryBean to create PluginRegistry instances.\n", "des": "This package contains support classes to create bean lists or plugin registry instances out of beans implementing a certain interface."}
{"index": 1228, "repo": "spring-hateoas-2.1.2", "code": "package hateoas;\n\npackage hateoas.client; // Client side support.\npackage hateoas.config; // Spring container configuration support.\npackage hateoas.mediatype; // Spring container configuration support.\npackage hateoas.server; // Server-side components for hypermedia handling.\npackage hateoas.support; // Support utilities for hypermedia handling.\npublic final class Affordance extends Object implements Iterable<AffordanceModel>; // Hold the AffordanceModels for all supported media types.\npublic abstract class AffordanceModel extends Object; // Collection of attributes needed to render any form of hypermedia.\npublic static interface AffordanceModel.InputPayloadMetadata extends AffordanceModel.PayloadMetadata; // Payload metadata for incoming requests.\npublic static interface AffordanceModel.Named; // A named component.\npublic static interface AffordanceModel.PayloadMetadata; // Metadata about payloads.\npublic static interface AffordanceModel.PropertyMetadata extends AffordanceModel.Named; // Metadata about the property model of a representation.\npublic static interface AffordanceModel.PropertyMetadataConfigured<T>; // SPI for a type that can get AffordanceModel.PropertyMetadata applied.\npublic class CollectionModel<T> extends RepresentationModel<CollectionModel<T>> implements Iterable<T>, ResolvableTypeProvider; // General helper to easily create a wrapper for a collection of entities.\npublic class EntityModel<T> extends RepresentationModel<EntityModel<T>>; // A simple EntityModel wrapping a domain object and adding links to it.\npublic final class IanaLinkRelations extends Object; // Capture standard IANA-based link relations.\npublic class IanaUriSchemes extends Object; // A list of well-defined URI schemes governed by IANA.\n@Documented @Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface InputType; // Annotation to declare a dedicated input type for a property of an representation model.\npublic class Link extends Object implements Serializable; // Value object for links.\npublic interface LinkRelation; // Interface for defining link relations.\npublic class Links extends Object implements Iterable<Link>; // Value object to represent a list of Links.\n", "des": "Value objects to ease creating Links and link driven representations for REST webservices."}
{"index": 1229, "repo": "spring-hateoas-2.1.2", "code": "package client;\n\npublic final class Hop extends Object; // Container for customizations to a single traverson \"hop\"\npublic class JsonPathLinkDiscoverer extends Object implements LinkDiscoverer; // LinkDiscoverer that uses JsonPath to find links inside a representation.\npublic interface LinkDiscoverer extends org.springframework.plugin.core.Plugin<MediaType>; // Interface to allow discovering links by relation type from some source.\npublic class LinkDiscoverers extends Object; // Value object to wrap a PluginRegistry for LinkDiscoverer so that it's easier to inject them into clients wanting to lookup a LinkDiscoverer for a given MediaTypes.\npublic class Traverson extends Object; // Component to ease traversing hypermedia APIs by following links with relation types.\npublic interface TraversonDefaults; // SPI that exposes HttpMessageConverters and LinkDiscoverers to be used by default by Traverson.\n", "des": "Client side support."}
{"index": 1230, "repo": "spring-hateoas-2.1.2", "code": "package config;\n\n@Retention(RUNTIME) @Target(TYPE) @Documented @Import({org.springframework.hateoas.config.HypermediaConfigurationImportSelector.class,HateoasConfiguration.class,org.springframework.hateoas.config.WebStackImportSelector.class}) public @interface EnableHypermediaSupport; // Activates hypermedia support in the ApplicationContext.\npublic static enum EnableHypermediaSupport.HypermediaType extends Enum<EnableHypermediaSupport.HypermediaType>; // Hypermedia representation types supported.\n@Configuration(proxyBeanMethods=false) @EnablePluginRegistries(LinkDiscoverer.class) public class HateoasConfiguration extends Object; // Common HATEOAS specific configuration.\npublic interface HypermediaMappingInformation; // Interface for registering custom hypermedia handlers.\npublic class HypermediaRestTemplateConfigurer extends Object; // Assembles hypermedia-based message converters and applies them to an existing RestTemplate.\npublic class HypermediaWebClientConfigurer extends Object; // Assembles Jackson2JsonEncoders and Jackson2JsonDecoders needed to wire a WebClient with hypermedia support.\npublic class HypermediaWebTestClientConfigurer extends Object implements WebTestClientConfigurer; // Assembles Jackson2JsonEncoders and Jackson2JsonDecoders needed to wire a WebTestClient with hypermedia support.\npublic interface MediaTypeConfigurationProvider; // SPI used to register internal media types through spring.factories.\npublic class WebConverters extends Object; // Value type to handle registration of hypermedia related HttpMessageConverters.\n", "des": "Spring container configuration support."}
{"index": 1231, "repo": "spring-hateoas-2.1.2", "code": "package mediatype;\n\npackage mediatype.alps; // Value objects to build ALPS metadata.\npackage mediatype.collectionjson; // Value objects to build Collection+JSON representations.\npackage mediatype.hal; // HAL-specific extensions, SPIs and Jackson customizations.\npackage mediatype.html; // Support for HTML media type.\npackage mediatype.problem; // Value objects to build Problem representations.\npackage mediatype.uber; // UBER media type objects.\npackage mediatype.vnderrors; // Vnd.Error media type.\npublic interface AffordanceModelFactory; // SPI for media type implementations to create a specific AffordanceModel for a ConfiguredAffordance.\npublic interface AffordanceOperations; // Operations commons to all builder APIs.\npublic class Affordances extends Object implements AffordanceOperations; // Primary API to construct Affordance instances.\npublic interface ConfigurableAffordance extends AffordanceOperations; // An affordance in creation.\npublic class ConfigurableHandlerInstantiator extends com.fasterxml.jackson.databind.cfg.HandlerInstantiator; // A HandlerInstantiator that will use instances explicitly registered with it but fall back to lookup or even create a fresh instance via the AutowireCapableBeanFactory provided on construction.\npublic interface ConfiguredAffordance; // A configure affordance for inspection by media type implementations to create AffordanceModel instances.\npublic interface InputTypeFactory; // SPI interface for components that can derive an input type from a ResolvableType.\npublic final class JacksonHelper extends Object; // Jackson utility methods.\npublic interface MessageResolver; // A simplified variant of MessageSourceAccessor to allow more direct replacement with a no-op implementation in case the target MessageSource is unavailable to avoid resolution overhead.\npublic class MessageSourceResolvableSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<MessageSourceResolvable>; // A Jackson serializer triggering message resolution via a MessageResolver for MessageSourceResolvable instances about to be serialized.\npublic class PropertyUtils extends Object;\n", "des": "Spring container configuration support."}
{"index": 1232, "repo": "spring-hateoas-2.1.2", "code": "package alps;\n\npublic final class Alps extends Object; // An ALPS document.\npublic static class Alps.AlpsBuilder extends Object;\npublic class AlpsLinkDiscoverer extends JsonPathLinkDiscoverer; // LinkDiscoverer implementation to find ALPS-based links.\npublic final class Descriptor extends Object; // A value object for an ALPS descriptor.\npublic static class Descriptor.DescriptorBuilder extends Object;\npublic final class Doc extends Object; // A value object for an ALPS doc element.\npublic static class Doc.DocBuilder extends Object;\npublic final class Ext extends Object; // A value object for an ALPS ext element.\npublic static class Ext.ExtBuilder extends Object;\npublic enum Format extends Enum<Format>; // Enum for all ALPS doc formats.\npublic enum Type extends Enum<Type>; // An enum for ALPS descriptor types\n", "des": "Value objects to build ALPS metadata."}
{"index": 1233, "repo": "spring-hateoas-2.1.2", "code": "package collectionjson;\n\npublic class CollectionJsonLinkDiscoverer extends JsonPathLinkDiscoverer; // LinkDiscoverer implementation based on JSON Collection link structure.\npublic class Jackson2CollectionJsonModule extends com.fasterxml.jackson.databind.module.SimpleModule; // Jackson 2 module implementation to render CollectionModel, EntityModel, and RepresentationModel instances in Collection+JSON compatible JSON.\n", "des": "Value objects to build Collection+JSON representations."}
{"index": 1234, "repo": "spring-hateoas-2.1.2", "code": "package hal;\n\npackage hal.forms; // HAL-FORMS extension media type.\npublic abstract class CollectionModelMixin<T> extends CollectionModel<T>; // Custom mixin to to render collection content as _embedded.\npublic interface CurieProvider; // API to provide HAL curie information for links.\npublic class DefaultCurieProvider extends Object implements CurieProvider; // Default implementation of CurieProvider rendering a single configurable UriTemplate based curie.\nprotected static class DefaultCurieProvider.Curie extends Link; // Value object to get the curie Link rendered in JSON.\npublic class HalConfiguration extends Object; // HAL specific configuration.\npublic static enum HalConfiguration.RenderSingleLinks extends Enum<HalConfiguration.RenderSingleLinks>; // Configuration option how to render single links of a given LinkRelation.\npublic class HalLinkDiscoverer extends JsonPathLinkDiscoverer; // LinkDiscoverer implementation based on HAL link structure.\npublic class HalLinkRelation extends Object implements LinkRelation, MessageSourceResolvable; // Value object for HAL based LinkRelation, i.e. a relation that can be curied.\npublic static interface HalLinkRelation.HalLinkRelationBuilder; // Simple builder interface to easily create multiple HalLinkRelations for a single curie.\n@Configuration(proxyBeanMethods=false) public class HalMediaTypeConfiguration extends Object implements HypermediaMappingInformation; // Spring configuration to set up HAL support.\npublic class HalModelBuilder extends Object; // Builder API to create complex HAL representations exposing a HAL idiomatic API.\npublic static interface HalModelBuilder.PreviewBuilder;\npublic class Jackson2HalModule extends com.fasterxml.jackson.databind.module.SimpleModule; // Jackson 2 module implementation to render Link and RepresentationModel instances in HAL compatible JSON.\npublic static class Jackson2HalModule.EmbeddedMapper extends Object; // Helper to easily map embedded resources and find out whether they were curied.\npublic static class Jackson2HalModule.HalHandlerInstantiator extends ConfigurableHandlerInstantiator; // HandlerInstantiator to create HAL-specific serializers, deserializers etc.\n", "des": "HAL-specific extensions, SPIs and Jackson customizations."}
{"index": 1235, "repo": "spring-hateoas-2.1.2", "code": "package forms;\n\npublic class HalFormsConfiguration extends Object; // HAL-FORMS specific configuration extension of HalConfiguration.\npublic class HalFormsLinkDiscoverer extends HalLinkDiscoverer; // HAL-FORMS based JsonPathLinkDiscoverer.\npublic interface HalFormsOptions; // Representation of HAL-FORMS options attribute.\npublic abstract static class HalFormsOptions.AbstractHalFormsOptions<T extends HalFormsOptions.AbstractHalFormsOptions<T>> extends Object implements HalFormsOptions;\npublic static class HalFormsOptions.Inline extends HalFormsOptions.AbstractHalFormsOptions<HalFormsOptions.Inline>;\npublic static class HalFormsOptions.Remote extends HalFormsOptions.AbstractHalFormsOptions<HalFormsOptions.Remote>; // Representation of a remote options element.\npublic class HalFormsPromptedValue extends Object; // A value object to describe prompted values for HAL-FORMS options' inline attribute or responses of resources pointed to by the link object.\npublic class Jackson2HalFormsModule extends com.fasterxml.jackson.databind.module.SimpleModule; // Serialize / deserialize all the parts of HAL-FORMS documents using Jackson.\n", "des": "HAL-FORMS extension media type."}
{"index": 1236, "repo": "spring-hateoas-2.1.2", "code": "package html;\n\npublic class HtmlInputType extends Object; // The types of HTML <input … /> elements.\n", "des": "Support for HTML media type."}
{"index": 1237, "repo": "spring-hateoas-2.1.2", "code": "package problem;\n\npublic class Problem extends Object; // Encapsulation of an RFC-7807 Problem code.\npublic static final class Problem.ExtendedProblem<T> extends Problem;\n", "des": "Value objects to build Problem representations."}
{"index": 1238, "repo": "spring-hateoas-2.1.2", "code": "package uber;\n\npublic class Jackson2UberModule extends com.fasterxml.jackson.databind.module.SimpleModule; // Jackson SimpleModule for UBER+JSON serializers and deserializers.\npublic class UberLinkDiscoverer extends Object implements LinkDiscoverer; // Find links by rel in an UBER+JSON representation.\n", "des": "UBER media type objects."}
{"index": 1239, "repo": "spring-hateoas-2.1.2", "code": "package vnderrors;\n\n@Deprecated public class VndErrors extends CollectionModel<VndErrors.VndError>;\n@Deprecated public static class VndErrors.VndError extends RepresentationModel<VndErrors.VndError>;\n", "des": "Vnd.Error media type."}
{"index": 1240, "repo": "spring-hateoas-2.1.2", "code": "package server;\n\npackage server.core; // Implementations of core API interfaces.\npackage server.mvc; // Spring MVC helper classes to build Links and assemble RepresentationModel types.\npackage server.reactive; // Spring WebFlux components to build Links and assemble RepresentationModel types.\npublic interface EntityLinks extends org.springframework.plugin.core.Plugin<Class<?>>; // Accessor to links pointing to controllers backing an entity type.\n@Inherited @Documented @Retention(RUNTIME) @Target(TYPE) public @interface ExposesResourceFor; // Annotation to demarcate controllers that expose URI templates of a structure according to ControllerEntityLinks.\npublic interface LinkBuilder; // Builder to ease building Link instances.\npublic interface LinkBuilderFactory<T extends LinkBuilder>; // Factory for LinkBuilder instances.\npublic interface LinkRelationProvider extends org.springframework.plugin.core.Plugin<LinkRelationProvider.LookupContext>; // API to provide LinkRelations for collections and items of the given type.\npublic static class LinkRelationProvider.LookupContext extends Object; // LinkRelationProvider selection context for item resource relation lookups (LinkRelationProvider.LookupContext.forItemResourceRelLookup(Class), collection resource relation lookups LinkRelationProvider.LookupContext.forCollectionResourceRelLookup(Class) or both LinkRelationProvider.LookupContext.forType(Class).\npublic interface MethodLinkBuilderFactory<T extends LinkBuilder> extends LinkBuilderFactory<T>; // Extension of LinkBuilderFactory for implementations that also support creating LinkBuilders by pointing to a method.\npublic interface RepresentationModelAssembler<T,D extends RepresentationModel<?>>; // Interface for components that convert a domain type into a RepresentationModel.\npublic interface RepresentationModelProcessor<T extends RepresentationModel<?>>; // SPI interface to allow components to process the RepresentationModel instances returned from Spring MVC controllers.\npublic interface SimpleRepresentationModelAssembler<T> extends RepresentationModelAssembler<T,EntityModel<T>>; // A RepresentationModelAssembler based purely on the domain type, using EntityRepresentationModel<T> as the enclosing representation model type.\npublic class TypedEntityLinks<T> extends Object; // Entity links API to create Links and LinkBuilder instances based on an identifier function.\n", "des": "Server-side components for hypermedia handling."}
{"index": 1241, "repo": "spring-hateoas-2.1.2", "code": "package core;\n\npublic abstract class AbstractEntityLinks extends Object implements EntityLinks; // Implementation base class to delegate the higher level methods of EntityLinks by delegating to the more fine grained ones to reduce the implementation effort for actual implementation classes.\npublic class AnnotationAttribute extends Object; // Simply helper to reference a dedicated attribute of an Annotation.\npublic class AnnotationLinkRelationProvider extends Object implements LinkRelationProvider, Ordered; // LinkRelationProvider that evaluates the Relation annotation on entity types.\npublic class AnnotationMappingDiscoverer extends Object implements MappingDiscoverer; // MappingDiscoverer implementation that inspects mappings from a particular annotation.\npublic class CachingMappingDiscoverer extends Object implements MappingDiscoverer; // Caching adapter of MappingDiscoverer.\npublic class ControllerEntityLinks extends AbstractEntityLinks; // EntityLinks implementation which assumes a certain URI mapping structure: A class-level ExposesResourceFor annotation to declare that the annotated controller exposes collection and item resources for. An RequestMapping annotation to form the base URI of the collection resource. A controller method with a mapping annotation to actually handle at least one HTTP method. A controller method that maps a subordinate resource taking a path variable to identify an item resource.\npublic class ControllerEntityLinksFactoryBean extends AbstractFactoryBean<ControllerEntityLinks> implements ApplicationContextAware; // FactoryBean implementation to create ControllerEntityLinks instances looking up controller classes from an ApplicationContext.\npublic class DefaultLinkRelationProvider extends Object implements LinkRelationProvider, Ordered; // Default implementation of LinkRelationProvider to simply use the uncapitalized version of the given type's name as item resource LinkRelation as well as an appended List for the collection resource LinkRelation.\npublic class DelegatingEntityLinks extends Object implements EntityLinks; // EntityLinks implementation that delegates to the EntityLinks instances registered in the PluginRegistry given on instance creation.\npublic class DelegatingLinkRelationProvider extends Object implements LinkRelationProvider;\npublic class DummyInvocationUtils extends Object; // Utility methods to capture dummy method invocations.\npublic interface EmbeddedWrapper; // A wrapper to handle values to be embedded into a EntityModel.\npublic class EmbeddedWrappers extends Object; // Interface to mark objects that are aware of the rel they'd like to be exposed under.\npublic class EvoInflectorLinkRelationProvider extends DefaultLinkRelationProvider; // LinkRelationProvider implementation using the Evo Inflector implementation of an algorithmic approach to English plurals.\n", "des": "Implementations of core API interfaces."}
{"index": 1242, "repo": "spring-hateoas-2.1.2", "code": "package mvc;\n\npublic class BasicLinkBuilder extends LinkBuilderSupport<BasicLinkBuilder>; // Simples LinkBuilder implementation possible.\npublic class ControllerLinkRelationProvider extends Object implements LinkRelationProvider; // LinkRelationProvider inspecting ExposesResourceFor annotations on controller classes.\npublic class JacksonSerializers extends Object; // Simple Jackson serializers and deserializers.\npublic static class JacksonSerializers.MediaTypeDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<MediaType>; // Custom JsonDeserializer for Spring's MediaType using the MediaType.parseMediaType(String) method.\npublic class MvcLink extends Object; // Syntactic sugar to create Link instances from MvcUriComponentsBuilder invocations.\npublic abstract class RepresentationModelAssemblerSupport<T,D extends RepresentationModel<?>> extends Object implements RepresentationModelAssembler<T,D>; // Base class to implement RepresentationModelAssemblers.\npublic class RepresentationModelProcessorHandlerMethodReturnValueHandler extends Object implements HandlerMethodReturnValueHandler; // HandlerMethodReturnValueHandler to post-process the objects returned from controller methods using the configured RepresentationModelProcessors.\npublic class RepresentationModelProcessorInvoker extends Object; // Component to easily invoke all RepresentationModelProcessor instances registered for values of type RepresentationModel.\npublic static class RepresentationModelProcessorInvoker.CollectionModelProcessorWrapper extends Object; // RepresentationModelProcessorInvoker.ProcessorWrapper for RepresentationModelProcessors targeting CollectionModel.\npublic class TypeConstrainedMappingJackson2HttpMessageConverter extends MappingJackson2HttpMessageConverter; // Extension of MappingJackson2HttpMessageConverter to constrain the ability to read and write HTTP message based on the target type.\npublic interface UriComponentsContributor; // SPI callback to enhance a UriComponentsBuilder when referring to a method through a dummy method invocation.\npublic class WebMvcLinkBuilder extends TemplateVariableAwareLinkBuilderSupport<WebMvcLinkBuilder>; // Builder to ease building Link instances pointing to Spring MVC controllers.\npublic class WebMvcLinkBuilderFactory extends Object implements MethodLinkBuilderFactory<WebMvcLinkBuilder>; // Factory for LinkBuilderSupport instances based on the request mapping annotated on the given controller.\n", "des": "Spring MVC helper classes to build Links and assemble RepresentationModel types."}
{"index": 1243, "repo": "spring-hateoas-2.1.2", "code": "package reactive;\n\npublic interface ReactiveRepresentationModelAssembler<T,D extends RepresentationModel<?>>; // Reactive variant of RepresentationModelAssembler combined with SimpleRepresentationModelAssembler.\npublic interface SimpleReactiveRepresentationModelAssembler<T> extends ReactiveRepresentationModelAssembler<T,EntityModel<T>>; // Reactive variant of RepresentationModelAssembler combined with SimpleRepresentationModelAssembler.\npublic class WebFluxLinkBuilder extends TemplateVariableAwareLinkBuilderSupport<WebFluxLinkBuilder>; // Utility for building reactive Links.\npublic static class WebFluxLinkBuilder.WebFluxBuilder extends Object;\npublic static class WebFluxLinkBuilder.WebFluxLink extends Object; // Intermediate representation of a Link within a reactive pipeline to easily add Affordances from method invocations.\n", "des": "Spring WebFlux components to build Links and assemble RepresentationModel types."}
{"index": 1244, "repo": "spring-hateoas-2.1.2", "code": "package support;\n\npublic class ClassUtils extends Object;\npublic enum WebStack extends Enum<WebStack>; // Utility to glean what web stack is currently available.\n", "des": "Support utilities for hypermedia handling."}
{"index": 1245, "repo": "spring-integration-smb-6.1.2", "code": "package config;\n\npublic class SmbInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileInboundChannelAdapterParser; // Parser for the SMB 'inbound-channel-adapter' element.\npublic class SmbNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Provides namespace support for using SMB.\npublic class SmbOutboundChannelAdapterParser extends org.springframework.integration.file.config.RemoteFileOutboundChannelAdapterParser; // The parser for <Int-smb:outbound-channel-adapter>.\npublic class SmbOutboundGatewayParser extends org.springframework.integration.file.config.AbstractRemoteFileOutboundGatewayParser; // Parser for the SMB 'outbound-gateway' element.\npublic class SmbStreamingInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileStreamingInboundChannelAdapterParser; // Parser for the SMB 'inbound-streaming-channel-adapter' element.\n", "des": "SMB-specific file list filter classes."}
{"index": 1246, "repo": "spring-integration-smb-6.1.2", "code": "package dsl;\n\npublic final class Smb extends Object; // The factory for SMB components.\npublic class SmbInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileInboundChannelAdapterSpec<jcifs.smb.SmbFile,SmbInboundChannelAdapterSpec,SmbInboundFileSynchronizingMessageSource>; // A RemoteFileInboundChannelAdapterSpec for an SmbInboundFileSynchronizingMessageSource.\npublic class SmbMessageHandlerSpec extends org.springframework.integration.file.dsl.FileTransferringMessageHandlerSpec<jcifs.smb.SmbFile,SmbMessageHandlerSpec>; // A FileTransferringMessageHandlerSpec for SMB.\npublic class SmbOutboundGatewaySpec extends org.springframework.integration.file.dsl.RemoteFileOutboundGatewaySpec<jcifs.smb.SmbFile,SmbOutboundGatewaySpec>; // A RemoteFileOutboundGatewaySpec for SMB.\npublic class SmbStreamingInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileStreamingInboundChannelAdapterSpec<jcifs.smb.SmbFile,SmbStreamingInboundChannelAdapterSpec,SmbStreamingMessageSource>; // A RemoteFileStreamingInboundChannelAdapterSpec for a SmbStreamingMessageSource.\n", "des": "Provides SMB Components for the Java DSL."}
{"index": 1247, "repo": "spring-integration-smb-6.1.2", "code": "package filters;\n\npublic class SmbPersistentAcceptOnceFileListFilter extends org.springframework.integration.file.filters.AbstractPersistentAcceptOnceFileListFilter<jcifs.smb.SmbFile>; // Implementation of AbstractPersistentAcceptOnceFileListFilter for SMB.\npublic class SmbRegexPatternFileListFilter extends org.springframework.integration.file.filters.AbstractRegexPatternFileListFilter<jcifs.smb.SmbFile>; // Implementation of AbstractRegexPatternFileListFilter for SMB.\npublic class SmbSimplePatternFileListFilter extends org.springframework.integration.file.filters.AbstractSimplePatternFileListFilter<jcifs.smb.SmbFile>; // Implementation of AbstractSimplePatternFileListFilter for SMB.\npublic class SmbSystemMarkerFilePresentFileListFilter extends org.springframework.integration.file.filters.AbstractMarkerFilePresentFileListFilter<jcifs.smb.SmbFile>; // Implementation of AbstractMarkerFilePresentFileListFilter for SMB.\n", "des": "SMB Namespace support classes."}
{"index": 1248, "repo": "spring-integration-smb-6.1.2", "code": "package inbound;\n\npublic class SmbInboundFileSynchronizer extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<jcifs.smb.SmbFile>; // An implementation of AbstractInboundFileSynchronizer for SMB.\npublic class SmbInboundFileSynchronizingMessageSource extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizingMessageSource<jcifs.smb.SmbFile>; // A MessageSource implementation for SMB.\npublic class SmbStreamingMessageSource extends org.springframework.integration.file.remote.AbstractRemoteFileStreamingMessageSource<jcifs.smb.SmbFile>; // Message source for streaming SMB remote file contents.\n", "des": "Inbound Channel Adapters implementations for SMB protocol."}
{"index": 1249, "repo": "spring-integration-smb-6.1.2", "code": "package outbound;\n\npublic class SmbMessageHandler extends org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<jcifs.smb.SmbFile>; // The SMB specific FileTransferringMessageHandler extension.\npublic class SmbOutboundGateway extends org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway<jcifs.smb.SmbFile>; // Outbound Gateway for performing remote file operations via SMB.\n", "des": "Outbound Channel Adapter implementations for SMB protocol."}
{"index": 1250, "repo": "spring-integration-smb-6.1.2", "code": "package session;\n\npublic class SmbConfig extends Object; // Data holder class for a SMB share configuration.\npublic class SmbFileInfo extends org.springframework.integration.file.remote.AbstractFileInfo<jcifs.smb.SmbFile>; // An AbstractFileInfo implementation for SMB protocol.\npublic class SmbRemoteFileTemplate extends org.springframework.integration.file.remote.RemoteFileTemplate<jcifs.smb.SmbFile>; // The SMB-specific RemoteFileTemplate implementation.\npublic class SmbSession extends Object implements org.springframework.integration.file.remote.session.Session<jcifs.smb.SmbFile>; // Implementation of the Session interface for Server Message Block (SMB) also known as Common Internet File System (CIFS).\npublic class SmbSessionFactory extends SmbConfig implements org.springframework.integration.file.remote.session.SessionFactory<jcifs.smb.SmbFile>; // The SMB session factory.\npublic class SmbShare extends jcifs.smb.SmbFile; // The SmbFile extension to represent an SMB share directory.\n", "des": "SMB Remote Session abstraction support classes."}
{"index": 1251, "repo": "spring-core-6.0.11", "code": "package aot;\n\npackage aot.generate; // Support classes for components that contribute generated code equivalent to a runtime behavior.\npackage aot.hint; // Support for registering the need for reflection, resources, java serialization and proxies at runtime.\npackage aot.nativex; // Support for generating GraalVM native configuration from runtime hints.\npublic abstract class AotDetector extends Object; // Utility for determining if AOT-processed optimizations must be used rather than the regular runtime.\n", "des": "Core package for Spring AOT infrastructure."}
{"index": 1252, "repo": "spring-core-6.0.11", "code": "package generate;\n\npublic final class AccessControl extends Object; // Determine the access control of a Member or type signature.\npublic static enum AccessControl.Visibility extends Enum<AccessControl.Visibility>; // Access visibility types as determined by the modifiers on a Member or ResolvableType.\npublic final class ClassNameGenerator extends Object; // Generate unique class names based on a target ClassName and a feature name.\npublic class DefaultGenerationContext extends Object implements GenerationContext; // Default GenerationContext implementation.\npublic class DefaultMethodReference extends Object implements MethodReference; // Default MethodReference implementation based on a MethodSpec.\npublic class FileSystemGeneratedFiles extends Object implements GeneratedFiles; // GeneratedFiles implementation that stores generated files using a FileSystem.\npublic final class GeneratedClass extends Object; // A single generated class.\npublic class GeneratedClasses extends Object; // A managed collection of generated classes.\npublic interface GeneratedFiles; // Interface that can be used to add source, resource, or class files generated during ahead-of-time processing.\npublic static enum GeneratedFiles.Kind extends Enum<GeneratedFiles.Kind>; // The various kinds of generated files that are supported.\npublic final class GeneratedMethod extends Object; // A generated method.\npublic class GeneratedMethods extends Object; // A managed collection of generated methods.\npublic final class GeneratedTypeReference extends AbstractTypeReference; // A TypeReference for a generated type.\npublic interface GenerationContext; // Central interface used for code generation.\npublic class InMemoryGeneratedFiles extends Object implements GeneratedFiles; // GeneratedFiles implementation that keeps generated files in-memory.\npublic interface MethodReference; // A reference to a method with convenient code generation for referencing, or invoking it.\npublic static interface MethodReference.ArgumentCodeGenerator; // Strategy for generating code for arguments based on their type.\n", "des": "Support classes for components that contribute generated code equivalent to a runtime behavior."}
{"index": 1253, "repo": "spring-core-6.0.11", "code": "package hint;\n\npackage hint.annotation; // Annotation support for runtime hints.\npackage hint.predicate; // Predicate support for runtime hints.\npackage hint.support; // Convenience classes for using runtime hints.\npublic abstract class AbstractTypeReference extends Object implements TypeReference; // Base TypeReference implementation that ensures consistent behaviour for equals(), hashCode(), and toString() based on the canonical name.\npublic class BindingReflectionHintsRegistrar extends Object; // Register the necessary reflection hints so that the specified type can be bound at runtime.\npublic interface ConditionalHint; // Contract for runtime hints that only apply if the described condition is met.\npublic final class ExecutableHint extends MemberHint; // A hint that describes the need for reflection on a Method or Constructor.\npublic static class ExecutableHint.Builder extends Object; // Builder for ExecutableHint.\npublic enum ExecutableMode extends Enum<ExecutableMode>; // Represent the need of reflection for a given Executable.\npublic final class FieldHint extends MemberHint; // A hint that describes the need for reflection on a Field.\npublic class JavaSerializationHint extends Object implements ConditionalHint; // A hint that describes the need for Java serialization at runtime.\npublic static class JavaSerializationHint.Builder extends Object; // Builder for JavaSerializationHint.\npublic final class JdkProxyHint extends Object implements ConditionalHint; // A hint that describes the need for a JDK interface-based Proxy.\npublic static class JdkProxyHint.Builder extends Object; // Builder for JdkProxyHint.\npublic enum MemberCategory extends Enum<MemberCategory>; // Predefined Member categories.\npublic abstract class MemberHint extends Object; // Base hint that describes the need for reflection on a Member.\npublic class ProxyHints extends Object; // Gather the need for using proxies at runtime.\npublic class ReflectionHints extends Object; // Gather the need for reflection at runtime.\npublic final class ResourceBundleHint extends Object implements ConditionalHint; // A hint that describes the need to access a ResourceBundle.\npublic static class ResourceBundleHint.Builder extends Object; // Builder for ResourceBundleHint.\npublic class ResourceHints extends Object; // Gather the need for resources available at runtime.\npublic final class ResourcePatternHint extends Object implements ConditionalHint; // A hint that describes resources that should be made available at runtime.\npublic final class ResourcePatternHints extends Object; // A collection of ResourcePatternHint describing whether resources should be made available at runtime using a matching algorithm based on include/exclude patterns.\n", "des": "Support for registering the need for reflection, resources, java serialization and proxies at runtime."}
{"index": 1254, "repo": "spring-core-6.0.11", "code": "package annotation;\n\n@Target({ANNOTATION_TYPE,TYPE,CONSTRUCTOR,FIELD,METHOD}) @Retention(RUNTIME) @Documented public @interface Reflective; // Indicate that the annotated element requires reflection.\npublic interface ReflectiveProcessor; // Process an AnnotatedElement and register the necessary reflection hints for it.\npublic class ReflectiveRuntimeHintsRegistrar extends Object; // Process @Reflective annotated elements.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Reflective(RegisterReflectionForBindingProcessor.class) public @interface RegisterReflectionForBinding; // Indicates that the classes specified in the annotation attributes require some reflection hints for binding or reflection-based serialization purposes.\npublic class RegisterReflectionForBindingProcessor extends Object implements ReflectiveProcessor; // A ReflectiveProcessor implementation that registers reflection hints for data binding purpose (class, constructors, fields, properties, record components, including types transitively used on properties and record components).\npublic class SimpleReflectiveProcessor extends Object implements ReflectiveProcessor; // A simple ReflectiveProcessor implementation that registers only a reflection hint for the annotated type.\n", "des": "Annotation support for runtime hints."}
{"index": 1255, "repo": "spring-core-6.0.11", "code": "package predicate;\n\npublic class ProxyHintsPredicates extends Object; // Generator of ProxyHints predicates, testing whether the given hints match the expected behavior for proxies.\npublic class ReflectionHintsPredicates extends Object; // Generator of ReflectionHints predicates, testing whether the given hints match the expected behavior for reflection.\npublic static class ReflectionHintsPredicates.ConstructorHintPredicate extends ReflectionHintsPredicates.ExecutableHintPredicate<Constructor<?>>;\npublic abstract static class ReflectionHintsPredicates.ExecutableHintPredicate<T extends Executable> extends Object implements Predicate<RuntimeHints>;\npublic static class ReflectionHintsPredicates.FieldHintPredicate extends Object implements Predicate<RuntimeHints>;\npublic static class ReflectionHintsPredicates.MethodHintPredicate extends ReflectionHintsPredicates.ExecutableHintPredicate<Method>;\npublic static class ReflectionHintsPredicates.TypeHintPredicate extends Object implements Predicate<RuntimeHints>;\npublic class ResourceHintsPredicates extends Object; // Generator of ResourceHints predicates, testing whether the given hints match the expected behavior for resources.\npublic abstract class RuntimeHintsPredicates extends Object; // Static generator of predicates that test whether the given RuntimeHints instance matches the expected behavior for reflection, resource, serialization, or proxy generation.\npublic class SerializationHintsPredicates extends Object; // Generator of SerializationHints predicates, testing whether the given hints match the expected behavior for serialization.\n", "des": "Predicate support for runtime hints."}
{"index": 1256, "repo": "spring-core-6.0.11", "code": "package support;\n\npublic abstract class ClassHintUtils extends Object; // Utilities for core hint inference on Spring-managed classes, specifically for proxy types such as interface-based JDK proxies and CGLIB-generated subclasses which need proxy/reflection hints.\npublic class FilePatternResourceHintsRegistrar extends Object; // Register the necessary resource hints for loading files from the classpath.\n", "des": "Convenience classes for using runtime hints."}
{"index": 1257, "repo": "spring-core-6.0.11", "code": "package nativex;\n\npublic class FileNativeConfigurationWriter extends NativeConfigurationWriter; // A NativeConfigurationWriter implementation that writes the configuration to disk.\npublic abstract class NativeConfigurationWriter extends Object; // Write RuntimeHints as GraalVM native configuration.\n", "des": "Support for generating GraalVM native configuration from runtime hints."}
{"index": 1258, "repo": "spring-core-6.0.11", "code": "package asm;\n\npublic abstract class AnnotationVisitor extends Object; // A visitor to visit a Java annotation.\npublic class Attribute extends Object; // A non standard class, field, method or Code attribute, as defined in the Java Virtual Machine Specification (JVMS).\npublic class ByteVector extends Object; // A dynamically extensible vector of bytes.\npublic class ClassReader extends Object; // A parser to make a ClassVisitor visit a ClassFile structure, as defined in the Java Virtual Machine Specification (JVMS).\npublic final class ClassTooLargeException extends IndexOutOfBoundsException; // Exception thrown when the constant pool of a class produced by a ClassWriter is too large.\npublic abstract class ClassVisitor extends Object; // A visitor to visit a Java class.\npublic class ClassWriter extends ClassVisitor; // A ClassVisitor that generates a corresponding ClassFile structure, as defined in the Java Virtual Machine Specification (JVMS).\npublic final class ConstantDynamic extends Object; // A constant whose value is computed at runtime, with a bootstrap method.\npublic abstract class FieldVisitor extends Object; // A visitor to visit a Java field.\npublic final class Handle extends Object; // A reference to a field or a method.\npublic class Label extends Object; // A position in the bytecode of a method.\npublic final class MethodTooLargeException extends IndexOutOfBoundsException; // Exception thrown when the Code attribute of a method produced by a ClassWriter is too large.\npublic abstract class MethodVisitor extends Object; // A visitor to visit a Java method.\npublic abstract class ModuleVisitor extends Object; // A visitor to visit a Java module.\npublic interface Opcodes; // The JVM opcodes, access flags and array type codes.\npublic abstract class RecordComponentVisitor extends Object; // A visitor to visit a record component.\npublic final class SpringAsmInfo extends Object; // Utility class exposing constants related to Spring's internal repackaging of the ASM bytecode library: currently based on ASM 9.x plus minor patches.\npublic final class Type extends Object; // A Java field or method type.\npublic final class TypePath extends Object; // The path to a type argument, wildcard bound, array element type, or static inner type within an enclosing type.\npublic class TypeReference extends Object; // A reference to a type appearing in a class, field or method declaration, or on an instruction.\n", "des": "Spring's repackaging of ASM 9.x (with Spring-specific patches; for internal use only)."}
{"index": 1259, "repo": "spring-core-6.0.11", "code": "package cglib;\n\npackage cglib.beans; // Spring's repackaging of the CGLIB beans package (for internal use only).\npackage cglib.core; // Spring's repackaging of the CGLIB core package (for internal use only).\npackage cglib.proxy; // Spring's repackaging of the CGLIB proxy package (for internal use only).\npackage cglib.reflect; // Spring's repackaging of the CGLIB reflect package (for internal use only).\npackage cglib.transform; // Spring's repackaging of the CGLIB transform package (for internal use only).\npackage cglib.util; // Spring's repackaging of the CGLIB util package (for internal use only).\npublic final class SpringCglibInfo extends Object; // Empty class used to ensure that the org.springframework.cglib package is processed during javadoc generation.\n", "des": "Spring's repackaging of CGLIB 3.3 (with Spring-specific patches; for internal use only)."}
{"index": 1260, "repo": "spring-core-6.0.11", "code": "package beans;\n\npublic abstract class BeanCopier extends Object;\npublic static class BeanCopier.Generator extends AbstractClassGenerator;\npublic class BeanGenerator extends AbstractClassGenerator;\npublic abstract class BeanMap extends Object implements Map; // A Map-based view of a JavaBean.\npublic static class BeanMap.Generator extends AbstractClassGenerator;\npublic abstract class BulkBean extends Object;\npublic static class BulkBean.Generator extends AbstractClassGenerator;\npublic class BulkBeanException extends RuntimeException;\npublic class FixedKeySet extends AbstractSet;\npublic class ImmutableBean extends Object;\npublic static class ImmutableBean.Generator extends AbstractClassGenerator;\n", "des": "Spring's repackaging of the CGLIB beans package (for internal use only)."}
{"index": 1261, "repo": "spring-core-6.0.11", "code": "package core;\n\npackage core.internal; // Spring's repackaging of the CGLIB core internal package (for internal use only).\npublic abstract class AbstractClassGenerator<T> extends Object implements ClassGenerator; // Abstract class for all code-generating CGLIB utilities.\nprotected static class AbstractClassGenerator.ClassLoaderData extends Object;\nprotected static class AbstractClassGenerator.Source extends Object;\npublic class Block extends Object;\npublic class ClassEmitter extends ClassTransformer;\npublic class ClassesKey extends Object;\npublic interface ClassGenerator;\npublic abstract class ClassInfo extends Object;\npublic class ClassLoaderAwareGeneratorStrategy extends DefaultGeneratorStrategy; // CGLIB GeneratorStrategy variant which exposes the application ClassLoader as current thread context ClassLoader for the time of class generation.\npublic class ClassNameReader extends Object;\npublic abstract class ClassTransformer extends ClassVisitor;\npublic class CodeEmitter extends LocalVariablesSorter;\npublic class CodeGenerationException extends RuntimeException;\npublic class CollectionUtils extends Object;\npublic interface Constants extends Opcodes;\npublic interface Converter;\npublic interface Customizer extends KeyFactoryCustomizer; // Customizes key types for KeyFactory when building equals, hashCode, and toString.\npublic class DebuggingClassWriter extends ClassVisitor;\npublic class DefaultGeneratorStrategy extends Object implements GeneratorStrategy;\npublic class DefaultNamingPolicy extends Object implements NamingPolicy; // The default policy used by AbstractClassGenerator.\npublic class DuplicatesPredicate extends Object implements Predicate;\npublic class EmitUtils extends Object;\npublic static class EmitUtils.ArrayDelimiters extends Object;\npublic interface FieldTypeCustomizer extends KeyFactoryCustomizer; // Customizes key types for KeyFactory right in constructor.\npublic interface GeneratorStrategy; // The GeneratorStrategy is responsible for taking a ClassGenerator and producing a byte array containing the data for the generated Class.\npublic interface HashCodeCustomizer extends KeyFactoryCustomizer;\npublic abstract class KeyFactory extends Object; // Generates classes to handle multi-valued keys, for use in things such as Maps and Sets.\npublic static class KeyFactory.Generator extends AbstractClassGenerator;\npublic interface KeyFactoryCustomizer; // Marker interface for customizers of KeyFactory\npublic class Local extends Object;\npublic class LocalVariablesSorter extends MethodVisitor; // A MethodVisitor that renumbers local variables in their order of appearance.\npublic abstract class MethodInfo extends Object;\npublic class MethodInfoTransformer extends Object implements Transformer;\n", "des": "Spring's repackaging of the CGLIB core package (for internal use only)."}
{"index": 1262, "repo": "spring-core-6.0.11", "code": "package internal;\n\npublic class CustomizerRegistry extends Object;\npublic interface Function<K,V>;\npublic class LoadingCache<K,KK,V> extends Object;\n", "des": "Spring's repackaging of the CGLIB core internal package (for internal use only)."}
{"index": 1263, "repo": "spring-core-6.0.11", "code": "package proxy;\n\npublic interface Callback; // All callback interfaces used by Enhancer extend this interface.\npublic interface CallbackFilter; // Map methods of subclasses generated by Enhancer to a particular callback.\npublic abstract class CallbackHelper extends Object implements CallbackFilter;\npublic interface Dispatcher extends Callback; // Dispatching Enhancer callback.\npublic class Enhancer extends AbstractClassGenerator; // Generates dynamic subclasses to enable method interception.\npublic interface Factory; // All enhanced instances returned by the Enhancer class implement this interface.\npublic interface FixedValue extends Callback; // Enhancer callback that simply returns the value to return from the proxied method.\npublic class InterfaceMaker extends AbstractClassGenerator; // Generates new interfaces at runtime.\npublic interface InvocationHandler extends Callback; // InvocationHandler replacement (unavailable under JDK 1.2).\npublic interface LazyLoader extends Callback; // Lazy-loading Enhancer callback.\npublic interface MethodInterceptor extends Callback; // General-purpose Enhancer callback which provides for \"around advice\".\npublic class MethodProxy extends Object; // Classes generated by Enhancer pass this object to the registered MethodInterceptor objects when an intercepted method is invoked.\npublic abstract class Mixin extends Object; // Mixin allows multiple objects to be combined into a single larger object.\npublic static class Mixin.Generator extends AbstractClassGenerator;\npublic interface NoOp extends Callback; // Methods using this Enhancer callback will delegate directly to the default (super) implementation in the base class.\npublic class Proxy extends Object implements Serializable; // This class is meant to be used as replacement for java.lang.reflect.Proxy under JDK 1.2.\npublic interface ProxyRefDispatcher extends Callback; // Dispatching Enhancer callback.\npublic class UndeclaredThrowableException extends CodeGenerationException; // Used by Proxy as a replacement for java.lang.reflect.UndeclaredThrowableException.\n", "des": "Spring's repackaging of the CGLIB proxy package (for internal use only)."}
{"index": 1264, "repo": "spring-core-6.0.11", "code": "package reflect;\n\npublic abstract class ConstructorDelegate extends Object;\npublic static class ConstructorDelegate.Generator extends AbstractClassGenerator;\npublic abstract class FastClass extends Object;\npublic static class FastClass.Generator extends AbstractClassGenerator;\npublic class FastConstructor extends FastMember;\npublic abstract class FastMember extends Object;\npublic class FastMethod extends FastMember;\npublic abstract class MethodDelegate extends Object; // DOCUMENTATION FROM APACHE AVALON DELEGATE CLASS\npublic static class MethodDelegate.Generator extends AbstractClassGenerator;\npublic abstract class MulticastDelegate extends Object implements Cloneable;\npublic static class MulticastDelegate.Generator extends AbstractClassGenerator;\n", "des": "Spring's repackaging of the CGLIB reflect package (for internal use only)."}
{"index": 1265, "repo": "spring-core-6.0.11", "code": "package transform;\n\npackage transform.impl; // Spring's repackaging of the CGLIB transform impl package (for internal use only).\npublic abstract class AbstractClassFilterTransformer extends AbstractClassTransformer;\npublic abstract class AbstractClassLoader extends ClassLoader;\npublic abstract class AbstractClassTransformer extends ClassTransformer;\npublic class AnnotationVisitorTee extends AnnotationVisitor;\npublic abstract class ClassEmitterTransformer extends ClassEmitter;\npublic interface ClassFilter;\npublic class ClassFilterTransformer extends AbstractClassFilterTransformer;\npublic class ClassReaderGenerator extends Object implements ClassGenerator;\npublic class ClassTransformerChain extends AbstractClassTransformer;\npublic interface ClassTransformerFactory;\npublic class ClassTransformerTee extends ClassTransformer;\npublic class ClassVisitorTee extends ClassVisitor;\npublic class FieldVisitorTee extends FieldVisitor;\npublic interface MethodFilter;\npublic class MethodFilterTransformer extends AbstractClassTransformer;\npublic class MethodVisitorTee extends MethodVisitor;\npublic class TransformingClassGenerator extends Object implements ClassGenerator;\npublic class TransformingClassLoader extends AbstractClassLoader;\n", "des": "Spring's repackaging of the CGLIB transform package (for internal use only)."}
{"index": 1266, "repo": "spring-core-6.0.11", "code": "package impl;\n\npublic class AbstractInterceptFieldCallback extends Object implements InterceptFieldCallback;\npublic class AccessFieldTransformer extends ClassEmitterTransformer;\npublic static interface AccessFieldTransformer.Callback;\npublic class AddDelegateTransformer extends ClassEmitterTransformer;\npublic class AddInitTransformer extends ClassEmitterTransformer;\npublic class AddPropertyTransformer extends ClassEmitterTransformer;\npublic class AddStaticInitTransformer extends ClassEmitterTransformer;\npublic interface FieldProvider;\npublic class FieldProviderTransformer extends ClassEmitterTransformer;\npublic interface InterceptFieldCallback;\npublic interface InterceptFieldEnabled;\npublic interface InterceptFieldFilter;\npublic class InterceptFieldTransformer extends ClassEmitterTransformer;\npublic class UndeclaredThrowableStrategy extends DefaultGeneratorStrategy; // A GeneratorStrategy suitable for use with Enhancer which causes all undeclared exceptions thrown from within a proxied method to be wrapped in an alternative exception of your choice.\npublic class UndeclaredThrowableTransformer extends ClassEmitterTransformer;\n", "des": "Spring's repackaging of the CGLIB transform impl package (for internal use only)."}
{"index": 1267, "repo": "spring-core-6.0.11", "code": "package util;\n\npublic abstract class ParallelSorter extends Object; // For the efficient sorting of multiple arrays in parallel.\npublic static class ParallelSorter.Generator extends AbstractClassGenerator;\npublic abstract class StringSwitcher extends Object; // This class implements a simple String → int mapping for a fixed set of keys.\npublic static class StringSwitcher.Generator extends AbstractClassGenerator;\n", "des": "Spring's repackaging of the CGLIB util package (for internal use only)."}
{"index": 1268, "repo": "spring-core-6.0.11", "code": "package core;\n\npackage core.annotation; // Core support package for annotations, meta-annotations, and merged annotations with attribute overrides.\npackage core.codec; // Encoder and Decoder abstractions to convert between a reactive stream of bytes and Java objects.\npackage core.convert; // Type conversion system API.\npackage core.env; // Spring's environment abstraction consisting of bean definition profile and hierarchical property source support.\npackage core.io; // Generic abstraction for (file-based) resources, used throughout the framework.\npackage core.log; // Useful delegates for Spring's logging conventions.\npackage core.metrics; // Support package for recording metrics during application startup.\npackage core.serializer; // Root package for Spring's serializer interfaces and implementations.\npackage core.style; // Support for styling values as Strings, with ToStringCreator as central class.\npackage core.task; // This package defines Spring's core TaskExecutor abstraction, and provides SyncTaskExecutor and SimpleAsyncTaskExecutor implementations.\npackage core.type; // Core support package for type introspection.\npublic interface AliasRegistry; // Common interface for managing aliases.\npublic interface AttributeAccessor; // Interface defining a generic contract for attaching and accessing metadata to/from arbitrary objects.\npublic abstract class AttributeAccessorSupport extends Object implements AttributeAccessor, Serializable; // Support class for AttributeAccessors, providing a base implementation of all methods.\npublic final class BridgeMethodResolver extends Object; // Helper for resolving synthetic bridge Methods to the Method being bridged.\npublic final class CollectionFactory extends Object; // Factory for collections that is aware of common Java and Spring collection types.\npublic class ConfigurableObjectInputStream extends ObjectInputStream; // Special ObjectInputStream subclass that resolves class names against a specific ClassLoader.\npublic class Constants extends Object; // This class can be used to parse other classes containing constant definitions in public static final members.\npublic static class Constants.ConstantException extends IllegalArgumentException; // Exception thrown when the Constants class is asked for an invalid constant name.\npublic final class Conventions extends Object; // Provides methods to support various naming and other conventions used throughout the framework.\npublic abstract class CoroutinesUtils extends Object; // Utilities for working with Kotlin Coroutines.\n", "des": "Provides basic classes for exception handling and version detection, and other core helpers that are not specific to any part of the framework."}
{"index": 1269, "repo": "spring-core-6.0.11", "code": "package annotation;\n\n@Retention(RUNTIME) @Target(METHOD) @Documented public @interface AliasFor; // @AliasFor is an annotation that is used to declare aliases for annotation attributes.\npublic abstract class AnnotatedElementUtils extends Object; // General utility methods for finding annotations, meta-annotations, and repeatable annotations on AnnotatedElements.\npublic class AnnotationAttributes extends LinkedHashMap<String,Object>; // LinkedHashMap subclass representing annotation attribute key-value pairs as read by AnnotationUtils, AnnotatedElementUtils, and Spring's reflection- and ASM-based AnnotationMetadata implementations.\npublic class AnnotationAwareOrderComparator extends OrderComparator; // AnnotationAwareOrderComparator is an extension of OrderComparator that supports Spring's Ordered interface as well as the @Order and @Priority annotations, with an order value provided by an Ordered instance overriding a statically defined annotation value (if any).\npublic class AnnotationConfigurationException extends NestedRuntimeException; // Thrown by AnnotationUtils and synthesized annotations if an annotation is improperly configured.\n@FunctionalInterface public interface AnnotationFilter; // Callback interface that can be used to filter specific annotation types.\npublic abstract class AnnotationUtils extends Object; // General utility methods for working with annotations, handling meta-annotations, bridge methods (which the compiler generates for generic declarations) as well as super methods (for optional annotation inheritance).\npublic interface MergedAnnotation<A extends Annotation>; // A single merged annotation returned from a MergedAnnotations collection.\npublic static enum MergedAnnotation.Adapt extends Enum<MergedAnnotation.Adapt>; // Adaptations that can be applied to attribute values when creating Maps or AnnotationAttributes.\npublic abstract class MergedAnnotationCollectors extends Object; // Collector implementations that provide various reduction operations for MergedAnnotation instances.\npublic abstract class MergedAnnotationPredicates extends Object; // Predicate implementations that provide various test operations for MergedAnnotations.\npublic interface MergedAnnotations extends Iterable<MergedAnnotation<Annotation>>; // Provides access to a collection of merged annotations, usually obtained from a source such as a Class or Method.\npublic static final class MergedAnnotations.Search extends Object; // Fluent API for configuring the search algorithm used in the MergedAnnotations model and performing a search.\n", "des": "Core support package for annotations, meta-annotations, and merged annotations with attribute overrides."}
{"index": 1270, "repo": "spring-core-6.0.11", "code": "package codec;\n\npublic abstract class AbstractDataBufferDecoder<T> extends AbstractDecoder<T>; // Abstract base class for Decoder implementations that can decode a DataBuffer directly to the target element type.\npublic abstract class AbstractDecoder<T> extends Object implements Decoder<T>; // Abstract base class for Decoder implementations.\npublic abstract class AbstractEncoder<T> extends Object implements Encoder<T>; // Abstract base class for Encoder implementations.\npublic abstract class AbstractSingleValueEncoder<T> extends AbstractEncoder<T>; // Abstract base class for Encoder classes that can only deal with a single value.\npublic class ByteArrayDecoder extends AbstractDataBufferDecoder<byte[]>; // Decoder for byte arrays.\npublic class ByteArrayEncoder extends AbstractEncoder<byte[]>; // Encoder for byte arrays.\npublic class ByteBufferDecoder extends AbstractDataBufferDecoder<ByteBuffer>; // Decoder for ByteBuffers.\npublic class ByteBufferEncoder extends AbstractEncoder<ByteBuffer>; // Encoder for ByteBuffers.\npublic final class CharSequenceEncoder extends AbstractEncoder<CharSequence>; // Encode from a CharSequence stream to a bytes stream.\npublic class CodecException extends NestedRuntimeException; // General error that indicates a problem while encoding and decoding to and from an Object stream.\npublic class DataBufferDecoder extends AbstractDataBufferDecoder<DataBuffer>; // Simple pass-through decoder for DataBuffers.\npublic class DataBufferEncoder extends AbstractEncoder<DataBuffer>; // Simple pass-through encoder for DataBuffers.\npublic interface Decoder<T>; // Strategy for decoding a DataBuffer input stream into an output stream of elements of type <T>.\npublic class DecodingException extends CodecException; // Indicates an issue with decoding the input stream with a focus on content related issues such as a parse failure.\npublic interface Encoder<T>; // Strategy to encode a stream of Objects of type <T> into an output stream of bytes.\npublic class EncodingException extends CodecException; // Indicates an issue with encoding the input Object stream with a focus on not being able to encode Objects.\npublic abstract class Hints extends Object; // Constants and convenience methods for working with hints.\npublic class Netty5BufferDecoder extends AbstractDataBufferDecoder<io.netty5.buffer.Buffer>; // Decoder for Buffers.\npublic class Netty5BufferEncoder extends AbstractEncoder<io.netty5.buffer.Buffer>; // Encoder for Buffers.\n", "des": "Encoder and Decoder abstractions to convert between a reactive stream of bytes and Java objects."}
{"index": 1271, "repo": "spring-core-6.0.11", "code": "package convert;\n\npackage convert.converter; // SPI to implement Converters for the type conversion system.\npackage convert.support; // Default implementation of the type conversion system.\npublic abstract class ConversionException extends NestedRuntimeException; // Base class for exceptions thrown by the conversion system.\npublic class ConversionFailedException extends ConversionException; // Exception to be thrown when an actual type conversion attempt fails.\npublic interface ConversionService; // A service interface for type conversion.\npublic class ConverterNotFoundException extends ConversionException; // Exception to be thrown when a suitable converter could not be found in a given conversion service.\npublic final class Property extends Object; // A description of a JavaBeans Property that allows us to avoid a dependency on java.beans.PropertyDescriptor.\npublic class TypeDescriptor extends Object implements Serializable; // Contextual descriptor about a type to convert from or to.\n", "des": "Type conversion system API."}
{"index": 1272, "repo": "spring-core-6.0.11", "code": "package converter;\n\npublic interface ConditionalConverter; // Allows a Converter, GenericConverter or ConverterFactory to conditionally execute based on attributes of the source and target TypeDescriptor.\npublic interface ConditionalGenericConverter extends GenericConverter, ConditionalConverter; // A GenericConverter that may conditionally execute based on attributes of the source and target TypeDescriptor.\n@FunctionalInterface public interface Converter<S,T>; // A converter converts a source object of type S to a target of type T.\npublic interface ConverterFactory<S,R>; // A factory for \"ranged\" converters that can convert objects from S to subtypes of R.\npublic interface ConverterRegistry; // For registering converters with a type conversion system.\npublic class ConvertingComparator<S,T> extends Object implements Comparator<S>; // A Comparator that converts values before they are compared.\npublic interface GenericConverter; // Generic converter interface for converting between two or more types.\npublic static final class GenericConverter.ConvertiblePair extends Object; // Holder for a source-to-target class pair.\n", "des": "SPI to implement Converters for the type conversion system."}
{"index": 1273, "repo": "spring-core-6.0.11", "code": "package support;\n\npublic interface ConfigurableConversionService extends ConversionService, ConverterRegistry; // Configuration interface to be implemented by most if not all ConversionService types.\npublic final class ConversionServiceFactory extends Object; // A factory for common ConversionService configurations.\npublic class ConvertingPropertyEditorAdapter extends PropertyEditorSupport; // Adapter that exposes a PropertyEditor for any given ConversionService and specific target type.\npublic class DefaultConversionService extends GenericConversionService; // A specialization of GenericConversionService configured by default with converters appropriate for most environments.\npublic class GenericConversionService extends Object implements ConfigurableConversionService; // Base ConversionService implementation suitable for use in most environments.\n", "des": "Default implementation of the type conversion system."}
{"index": 1274, "repo": "spring-core-6.0.11", "code": "package env;\n\npublic abstract class AbstractEnvironment extends Object implements ConfigurableEnvironment; // Abstract base class for Environment implementations.\npublic abstract class AbstractPropertyResolver extends Object implements ConfigurablePropertyResolver; // Abstract base class for resolving properties against any underlying source.\npublic abstract class CommandLinePropertySource<T> extends EnumerablePropertySource<T>; // Abstract base class for PropertySource implementations backed by command line arguments.\npublic class CompositePropertySource extends EnumerablePropertySource<Object>; // Composite PropertySource implementation that iterates over a set of PropertySource instances.\npublic interface ConfigurableEnvironment extends Environment, ConfigurablePropertyResolver; // Configuration interface to be implemented by most if not all Environment types.\npublic interface ConfigurablePropertyResolver extends PropertyResolver; // Configuration interface to be implemented by most if not all PropertyResolver types.\npublic abstract class EnumerablePropertySource<T> extends PropertySource<T>; // A PropertySource implementation capable of interrogating its underlying source object to enumerate all possible property name/value pairs.\npublic interface Environment extends PropertyResolver; // Interface representing the environment in which the current application is running.\npublic interface EnvironmentCapable; // Interface indicating a component that contains and exposes an Environment reference.\npublic class JOptCommandLinePropertySource extends CommandLinePropertySource<joptsimple.OptionSet>; // CommandLinePropertySource implementation backed by a JOpt OptionSet.\npublic class MapPropertySource extends EnumerablePropertySource<Map<String,Object>>; // PropertySource that reads keys and values from a Map object.\npublic class MissingRequiredPropertiesException extends IllegalStateException; // Exception thrown when required properties are not found.\npublic class MutablePropertySources extends Object implements PropertySources; // The default implementation of the PropertySources interface.\n@FunctionalInterface public interface Profiles; // Profile predicate that may be accepted by an Environment.\npublic class PropertiesPropertySource extends MapPropertySource; // PropertySource implementation that extracts properties from a Properties object.\npublic interface PropertyResolver; // Interface for resolving properties against any underlying source.\npublic abstract class PropertySource<T> extends Object; // Abstract base class representing a source of name/value property pairs.\npublic static class PropertySource.StubPropertySource extends PropertySource<Object>; // PropertySource to be used as a placeholder in cases where an actual property source cannot be eagerly initialized at application context creation time.\n", "des": "Spring's environment abstraction consisting of bean definition profile and hierarchical property source support."}
{"index": 1275, "repo": "spring-core-6.0.11", "code": "package io;\n\npackage io.buffer; // Generic abstraction for working with byte buffer implementations.\npackage io.support; // Support classes for Spring's resource abstraction.\npublic abstract class AbstractFileResolvingResource extends AbstractResource; // Abstract base class for resources which resolve URLs into File references, such as UrlResource or ClassPathResource.\npublic abstract class AbstractResource extends Object implements Resource; // Convenience base class for Resource implementations, pre-implementing typical behavior.\npublic class ByteArrayResource extends AbstractResource; // Resource implementation for a given byte array.\npublic class ClassPathResource extends AbstractFileResolvingResource; // Resource implementation for class path resources.\npublic class ClassRelativeResourceLoader extends DefaultResourceLoader; // ResourceLoader implementation that interprets plain resource paths as relative to a given java.lang.Class.\npublic interface ContextResource extends Resource; // Extended interface for a resource that is loaded from an enclosing 'context', e.g.\npublic class DefaultResourceLoader extends Object implements ResourceLoader; // Default implementation of the ResourceLoader interface.\nprotected static class DefaultResourceLoader.ClassPathContextResource extends ClassPathResource implements ContextResource; // ClassPathResource that explicitly expresses a context-relative path through implementing the ContextResource interface.\npublic class DescriptiveResource extends AbstractResource; // Simple Resource implementation that holds a resource description but does not point to an actually readable resource.\npublic class FileSystemResource extends AbstractResource implements WritableResource; // Resource implementation for java.io.File and java.nio.file.Path handles with a file system target.\npublic class FileSystemResourceLoader extends DefaultResourceLoader; // ResourceLoader implementation that resolves plain paths as file system resources rather than as class path resources (the latter is DefaultResourceLoader's default strategy).\npublic class FileUrlResource extends UrlResource implements WritableResource; // Subclass of UrlResource which assumes file resolution, to the degree of implementing the WritableResource interface for it.\npublic class InputStreamResource extends AbstractResource; // Resource implementation for a given InputStream.\npublic interface InputStreamSource; // Simple interface for objects that are sources for an InputStream.\npublic class PathResource extends AbstractResource implements WritableResource; // Resource implementation for Path handles, performing all operations and transformations via the Path API.\n@FunctionalInterface public interface ProtocolResolver; // A resolution strategy for protocol-specific resource handles.\n", "des": "Generic abstraction for (file-based) resources, used throughout the framework."}
{"index": 1276, "repo": "spring-core-6.0.11", "code": "package buffer;\n\npublic interface CloseableDataBuffer extends DataBuffer, AutoCloseable; // Extension of DataBuffer that allows for buffers that can be used in a try-with-resources statement.\npublic interface DataBuffer; // Basic abstraction over byte buffers.\npublic static interface DataBuffer.ByteBufferIterator extends Iterator<ByteBuffer>, Closeable; // A dedicated iterator type that ensures the lifecycle of iterated ByteBuffer elements.\npublic interface DataBufferFactory; // A factory for DataBuffers, allowing for allocation and wrapping of data buffers.\npublic class DataBufferLimitException extends IllegalStateException; // Exception that indicates the cumulative number of bytes consumed from a stream of DataBuffer's exceeded some pre-configured limit.\npublic abstract class DataBufferUtils extends Object; // Utility class for working with DataBuffers.\npublic static interface DataBufferUtils.Matcher; // Contract to find delimiter(s) against one or more data buffers that can be passed one at a time to the DataBufferUtils.Matcher.match(DataBuffer) method.\npublic class DataBufferWrapper extends Object implements DataBuffer; // Provides a convenient implementation of the DataBuffer interface that can be overridden to adapt the delegate.\npublic class DefaultDataBuffer extends Object implements DataBuffer; // Default implementation of the DataBuffer interface that uses a ByteBuffer internally.\npublic class DefaultDataBufferFactory extends Object implements DataBufferFactory; // Default implementation of the DataBufferFactory interface.\npublic class LimitedDataBufferList extends ArrayList<DataBuffer>; // Custom List to collect data buffers with and enforce a limit on the total number of bytes buffered.\npublic final class Netty5DataBuffer extends Object implements CloseableDataBuffer, TouchableDataBuffer; // Implementation of the DataBuffer interface that wraps a Netty 5 Buffer.\npublic class Netty5DataBufferFactory extends Object implements DataBufferFactory; // Implementation of the DataBufferFactory interface based on a Netty 5 BufferAllocator.\npublic class NettyDataBuffer extends Object implements PooledDataBuffer; // Implementation of the DataBuffer interface that wraps a Netty 4 ByteBuf.\npublic class NettyDataBufferFactory extends Object implements DataBufferFactory; // Implementation of the DataBufferFactory interface based on a Netty 4 ByteBufAllocator.\npublic interface PooledDataBuffer extends TouchableDataBuffer; // Extension of DataBuffer that allows for buffers that share a memory pool.\n", "des": "Generic abstraction for working with byte buffer implementations."}
{"index": 1277, "repo": "spring-core-6.0.11", "code": "package support;\n\npublic class DefaultPropertySourceFactory extends Object implements PropertySourceFactory; // The default implementation for PropertySourceFactory, wrapping every resource in a ResourcePropertySource.\npublic class EncodedResource extends Object implements InputStreamSource; // Holder that combines a Resource descriptor with a specific encoding or Charset to be used for reading from the resource.\npublic class LocalizedResourceHelper extends Object; // Helper class for loading a localized resource, specified through name, extension and current locale.\npublic class PathMatchingResourcePatternResolver extends Object implements ResourcePatternResolver; // A ResourcePatternResolver implementation that is able to resolve a specified resource location path into one or more matching Resources.\npublic abstract class PropertiesLoaderSupport extends Object; // Base class for JavaBean-style components that need to load properties from one or more resources.\npublic abstract class PropertiesLoaderUtils extends Object; // Convenient utility methods for loading of java.util.Properties, performing standard handling of input streams.\npublic record PropertySourceDescriptor(List<String> locations, boolean ignoreResourceNotFound, String name, Class<? extends PropertySourceFactory> propertySourceFactory, String encoding) extends Record; // Describe a PropertySource.\npublic interface PropertySourceFactory; // Strategy interface for creating resource-based PropertySource wrappers.\npublic class PropertySourceProcessor extends Object; // Contribute property sources to the Environment.\npublic class ResourceArrayPropertyEditor extends PropertyEditorSupport; // Editor for Resource arrays, to automatically convert String location patterns (e.g.\npublic interface ResourcePatternResolver extends ResourceLoader; // Strategy interface for resolving a location pattern (for example, an Ant-style path pattern) into Resource objects.\npublic abstract class ResourcePatternUtils extends Object; // Utility class for determining whether a given URL is a resource location that can be loaded via a ResourcePatternResolver.\npublic class ResourcePropertySource extends PropertiesPropertySource; // Subclass of PropertiesPropertySource that loads a Properties object from a given Resource or resource location such as \"classpath:/com/myco/foo.properties\" or \"file:/path/to/file.xml\".\npublic class ResourceRegion extends Object; // Region of a Resource implementation, materialized by a position within the Resource and a byte count for the length of that region.\npublic class SpringFactoriesLoader extends Object; // General purpose factory loading mechanism for internal use within the framework.\n", "des": "Support classes for Spring's resource abstraction."}
{"index": 1278, "repo": "spring-core-6.0.11", "code": "package log;\n\npublic class LogAccessor extends Object; // A convenient accessor for Commons Logging, providing not only CharSequence based log methods but also Supplier based variants for use with Java 8 lambda expressions.\npublic final class LogDelegateFactory extends Object; // Factory for common Log delegates with Spring's logging conventions.\npublic abstract class LogFormatUtils extends Object; // Utility methods for formatting and logging messages.\npublic abstract class LogMessage extends Object implements CharSequence; // A simple log message type for use with Commons Logging, allowing for convenient lazy resolution of a given Supplier instance (typically bound to a lambda expression) or a printf-style format string (String.format(java.lang.String, java.lang.Object...)) in its LogMessage.toString().\n", "des": "Useful delegates for Spring's logging conventions."}
{"index": 1279, "repo": "spring-core-6.0.11", "code": "package metrics;\n\npackage metrics.jfr; // Support package for recording startup metrics using Java Flight Recorder.\npublic interface ApplicationStartup; // Instruments the application startup phase using steps.\npublic interface StartupStep; // Step recording metrics about a particular phase or action happening during the ApplicationStartup.\npublic static interface StartupStep.Tag; // Simple key/value association for storing step metadata.\npublic static interface StartupStep.Tags extends Iterable<StartupStep.Tag>; // Immutable collection of StartupStep.Tag.\n", "des": "Support package for recording metrics during application startup."}
{"index": 1280, "repo": "spring-core-6.0.11", "code": "package jfr;\n\npublic class FlightRecorderApplicationStartup extends Object implements ApplicationStartup; // ApplicationStartup implementation for the Java Flight Recorder.\n", "des": "Support package for recording startup metrics using Java Flight Recorder."}
{"index": 1281, "repo": "spring-core-6.0.11", "code": "package serializer;\n\npackage serializer.support; // Support classes for Spring's serializer abstraction.\npublic class DefaultDeserializer extends Object implements Deserializer<Object>; // A default Deserializer implementation that reads an input stream using Java serialization.\npublic class DefaultSerializer extends Object implements Serializer<Object>; // A Serializer implementation that writes an object to an output stream using Java serialization.\n@FunctionalInterface public interface Deserializer<T>; // A strategy interface for converting from data in an InputStream to an Object.\n@FunctionalInterface public interface Serializer<T>; // A strategy interface for streaming an object to an OutputStream.\n", "des": "Root package for Spring's serializer interfaces and implementations."}
{"index": 1282, "repo": "spring-core-6.0.11", "code": "package support;\n\npublic class DeserializingConverter extends Object implements Converter<byte[],Object>; // A Converter that delegates to a Deserializer to convert data in a byte array to an object.\npublic class SerializationDelegate extends Object implements Serializer<Object>, Deserializer<Object>; // A convenient delegate with pre-arranged configuration state for common serialization needs.\npublic class SerializationFailedException extends NestedRuntimeException; // Wrapper for the native IOException (or similar) when a Serializer or Deserializer failed.\npublic class SerializingConverter extends Object implements Converter<Object,byte[]>; // A Converter that delegates to a Serializer to convert an object to a byte array.\n", "des": "Support classes for Spring's serializer abstraction."}
{"index": 1283, "repo": "spring-core-6.0.11", "code": "package style;\n\npublic class DefaultToStringStyler extends Object implements ToStringStyler; // Spring's default toString() styler.\npublic class DefaultValueStyler extends Object implements ValueStyler; // Converts objects to String form, generally for debugging purposes, using Spring's toString styling conventions.\npublic class SimpleValueStyler extends DefaultValueStyler; // ValueStyler that converts objects to String form — generally for debugging purposes — using simple styling conventions that mimic the toString() styling conventions for standard JDK implementations of collections, maps, and arrays.\npublic abstract class StylerUtils extends Object; // Simple utility class to allow for convenient access to value styling logic, mainly to support descriptive logging messages.\npublic class ToStringCreator extends Object; // Utility class that builds pretty-printing toString() methods with pluggable styling conventions.\npublic interface ToStringStyler; // A strategy interface for pretty-printing toString() methods.\npublic interface ValueStyler; // Strategy that encapsulates value String styling algorithms according to Spring conventions.\n", "des": "Support for styling values as Strings, with ToStringCreator as central class."}
{"index": 1284, "repo": "spring-core-6.0.11", "code": "package task;\n\npackage task.support; // Support classes for Spring's TaskExecutor abstraction.\n@Deprecated(since=\"6.0\") public interface AsyncListenableTaskExecutor extends AsyncTaskExecutor;\npublic interface AsyncTaskExecutor extends TaskExecutor; // Extended interface for asynchronous TaskExecutor implementations, offering support for Callable.\npublic class SimpleAsyncTaskExecutor extends CustomizableThreadCreator implements AsyncListenableTaskExecutor, Serializable; // TaskExecutor implementation that fires up a new Thread for each task, executing it asynchronously.\npublic class SyncTaskExecutor extends Object implements TaskExecutor, Serializable; // TaskExecutor implementation that executes each task synchronously in the calling thread.\n@FunctionalInterface public interface TaskDecorator; // A callback interface for a decorator to be applied to any Runnable about to be executed.\n@FunctionalInterface public interface TaskExecutor extends Executor; // Simple task executor interface that abstracts the execution of a Runnable.\npublic class TaskRejectedException extends RejectedExecutionException; // Exception thrown when a TaskExecutor rejects to accept a given task for execution.\n@Deprecated public class TaskTimeoutException extends TaskRejectedException;\n", "des": "This package defines Spring's core TaskExecutor abstraction, and provides SyncTaskExecutor and SimpleAsyncTaskExecutor implementations."}
{"index": 1285, "repo": "spring-core-6.0.11", "code": "package support;\n\n@Deprecated(since=\"6.0.5\", forRemoval=true) public class ConcurrentExecutorAdapter extends Object implements Executor;\npublic class ExecutorServiceAdapter extends AbstractExecutorService; // Adapter that takes a Spring TaskExecutor and exposes a full java.util.concurrent.ExecutorService for it.\npublic class TaskExecutorAdapter extends Object implements AsyncListenableTaskExecutor; // Adapter that takes a JDK java.util.concurrent.Executor and exposes a Spring TaskExecutor for it.\n", "des": "Support classes for Spring's TaskExecutor abstraction."}
{"index": 1286, "repo": "spring-core-6.0.11", "code": "package type;\n\npackage type.classreading; // Support classes for reading annotation and class-level metadata.\npackage type.filter; // Core support package for type filtering (e.g.\npublic interface AnnotatedTypeMetadata; // Defines access to the annotations of a specific type (class or method), in a form that does not necessarily require the class-loading.\npublic interface AnnotationMetadata extends ClassMetadata, AnnotatedTypeMetadata; // Interface that defines abstract access to the annotations of a specific class, in a form that does not require that class to be loaded yet.\npublic interface ClassMetadata; // Interface that defines abstract metadata of a specific class, in a form that does not require that class to be loaded yet.\npublic interface MethodMetadata extends AnnotatedTypeMetadata; // Interface that defines abstract access to the annotations of a specific method, in a form that does not require that method's class to be loaded yet.\npublic class StandardAnnotationMetadata extends StandardClassMetadata implements AnnotationMetadata; // AnnotationMetadata implementation that uses standard reflection to introspect a given Class.\npublic class StandardClassMetadata extends Object implements ClassMetadata; // ClassMetadata implementation that uses standard reflection to introspect a given Class.\npublic class StandardMethodMetadata extends Object implements MethodMetadata; // MethodMetadata implementation that uses standard reflection to introspect a given Method.\n", "des": "Core support package for type introspection."}
{"index": 1287, "repo": "spring-core-6.0.11", "code": "package classreading;\n\npublic class CachingMetadataReaderFactory extends SimpleMetadataReaderFactory; // Caching implementation of the MetadataReaderFactory interface, caching a MetadataReader instance per Spring Resource handle (i.e.\npublic interface MetadataReader; // Simple facade for accessing class metadata, as read by an ASM ClassReader.\npublic interface MetadataReaderFactory; // Factory interface for MetadataReader instances.\npublic class SimpleMetadataReaderFactory extends Object implements MetadataReaderFactory; // Simple implementation of the MetadataReaderFactory interface, creating a new ASM ClassReader for every request.\n", "des": "Support classes for reading annotation and class-level metadata."}
{"index": 1288, "repo": "spring-core-6.0.11", "code": "package filter;\n\npublic abstract class AbstractClassTestingTypeFilter extends Object implements TypeFilter; // Type filter that exposes a ClassMetadata object to subclasses, for class testing purposes.\npublic abstract class AbstractTypeHierarchyTraversingFilter extends Object implements TypeFilter; // Type filter that is aware of traversing over hierarchy.\npublic class AnnotationTypeFilter extends AbstractTypeHierarchyTraversingFilter; // A simple TypeFilter which matches classes with a given annotation, checking inherited annotations as well.\npublic class AspectJTypeFilter extends Object implements TypeFilter; // Type filter that uses AspectJ type pattern for matching.\npublic class AssignableTypeFilter extends AbstractTypeHierarchyTraversingFilter; // A simple filter which matches classes that are assignable to a given type.\npublic class RegexPatternTypeFilter extends AbstractClassTestingTypeFilter; // A simple filter for matching a fully-qualified class name with a regex Pattern.\n@FunctionalInterface public interface TypeFilter; // Base interface for type filters using a MetadataReader.\n", "des": "Core support package for type filtering (e.g."}
{"index": 1289, "repo": "spring-core-6.0.11", "code": "package lang;\n\n@Target({METHOD,PARAMETER,FIELD}) @Retention(RUNTIME) @Documented @Nonnull @TypeQualifierNickname public @interface NonNull; // A common Spring annotation to declare that annotated elements cannot be null.\n@Target(PACKAGE) @Retention(RUNTIME) @Documented @Nonnull @TypeQualifierDefault({METHOD,PARAMETER}) public @interface NonNullApi; // A common Spring annotation to declare that parameters and return values are to be considered as non-nullable by default for a given package.\n@Target(PACKAGE) @Retention(RUNTIME) @Documented @Nonnull @TypeQualifierDefault(FIELD) public @interface NonNullFields; // A common Spring annotation to declare that fields are to be considered as non-nullable by default for a given package.\n@Target({METHOD,PARAMETER,FIELD}) @Retention(RUNTIME) @Documented @Nonnull(when=MAYBE) @TypeQualifierNickname public @interface Nullable; // A common Spring annotation to declare that annotated elements can be null under some circumstance.\n", "des": "Common annotations with language-level semantics: nullability as well as JDK API indications."}
{"index": 1290, "repo": "spring-core-6.0.11", "code": "package objenesis;\n\npublic class SpringObjenesis extends Object implements org.springframework.objenesis.Objenesis; // Spring-specific variant of ObjenesisStd / ObjenesisBase, providing a cache based on Class keys instead of class names, and allowing for selective use of the cache.\n", "des": "Spring's repackaging of Objenesis 3.2 (with SpringObjenesis entry point; for internal use only)."}
{"index": 1291, "repo": "spring-core-6.0.11", "code": "package util;\n\npackage util.backoff; // A generic back-off abstraction.\npackage util.comparator; // Useful generic java.util.Comparator implementations, such as an invertible comparator and a compound comparator.\npackage util.concurrent; // Useful generic java.util.concurrent.Future extensions.\npackage util.function; // Useful generic java.util.function helper classes.\npackage util.unit; // Useful unit data types.\npackage util.xml; // Miscellaneous utility classes for XML parsing and transformation, such as error handlers that log warnings via Commons Logging.\npublic class AlternativeJdkIdGenerator extends Object implements IdGenerator; // An IdGenerator that uses SecureRandom for the initial seed and Random thereafter, instead of calling UUID.randomUUID() every time as JdkIdGenerator does.\npublic class AntPathMatcher extends Object implements PathMatcher; // PathMatcher implementation for Ant-style path patterns.\nprotected static class AntPathMatcher.AntPathStringMatcher extends Object; // Tests whether a string matches against a pattern via a Pattern.\nprotected static class AntPathMatcher.AntPatternComparator extends Object implements Comparator<String>; // The default Comparator implementation returned by AntPathMatcher.getPatternComparator(String).\npublic abstract class Assert extends Object; // Assertion utility class that assists in validating arguments.\npublic class AutoPopulatingList<E> extends Object implements List<E>, Serializable; // Simple List wrapper class that allows for elements to be automatically populated as they are requested.\n@FunctionalInterface public static interface AutoPopulatingList.ElementFactory<E>; // Factory interface for creating elements for an index-based access data structure such as a List.\npublic static class AutoPopulatingList.ElementInstantiationException extends RuntimeException; // Exception to be thrown from ElementFactory.\n@Deprecated(since=\"6.0.5\", forRemoval=true) public abstract class Base64Utils extends Object;\npublic abstract class ClassUtils extends Object; // Miscellaneous java.lang.Class utility methods.\npublic abstract class CollectionUtils extends Object; // Miscellaneous collection utility methods.\npublic class CommonsLogWriter extends Writer; // java.io.Writer adapter for a Commons Logging Log.\npublic class CompositeIterator<E> extends Object implements Iterator<E>; // Composite iterator that combines multiple other iterators, as registered via CompositeIterator.add(Iterator).\n", "des": "Miscellaneous utility classes, such as utilities for working with strings, classes, collections, reflection, etc."}
{"index": 1292, "repo": "spring-core-6.0.11", "code": "package backoff;\n\n@FunctionalInterface public interface BackOff; // Provide a BackOffExecution that indicates the rate at which an operation should be retried.\n@FunctionalInterface public interface BackOffExecution; // Represent a particular back-off execution.\npublic class ExponentialBackOff extends Object implements BackOff; // Implementation of BackOff that increases the back off period for each retry attempt.\npublic class FixedBackOff extends Object implements BackOff; // A simple BackOff implementation that provides a fixed interval between two attempts and a maximum number of retries.\n", "des": "A generic back-off abstraction."}
{"index": 1293, "repo": "spring-core-6.0.11", "code": "package comparator;\n\npublic class BooleanComparator extends Object implements Comparator<Boolean>, Serializable; // A Comparator for Boolean objects that can sort either true or false first.\npublic class ComparableComparator<T extends Comparable<T>> extends Object implements Comparator<T>; // Comparator that adapts Comparables to the Comparator interface.\npublic abstract class Comparators extends Object; // Convenient entry point with generically typed factory methods for common Spring Comparator variants.\npublic class InstanceComparator<T> extends Object implements Comparator<T>; // Compares objects based on an arbitrary class order.\npublic class NullSafeComparator<T> extends Object implements Comparator<T>; // A Comparator that will safely compare nulls to be lower or higher than other objects.\n", "des": "Useful generic java.util.Comparator implementations, such as an invertible comparator and a compound comparator."}
{"index": 1294, "repo": "spring-core-6.0.11", "code": "package concurrent;\n\n@Deprecated(since=\"6.0\") public class CompletableToListenableFutureAdapter<T> extends Object implements ListenableFuture<T>;\n@Deprecated(since=\"6.0\") @FunctionalInterface public interface FailureCallback;\n@Deprecated(since=\"6.0\") public abstract class FutureAdapter<T,S> extends Object implements Future<T>;\npublic abstract class FutureUtils extends Object; // Convenience utilities for working with Future and implementations.\n@Deprecated(since=\"6.0\") public interface ListenableFuture<T> extends Future<T>;\n@Deprecated(since=\"6.0\") public abstract class ListenableFutureAdapter<T,S> extends FutureAdapter<T,S> implements ListenableFuture<T>;\n@Deprecated(since=\"6.0\") public interface ListenableFutureCallback<T> extends SuccessCallback<T>, FailureCallback;\n@Deprecated(since=\"6.0\") public class ListenableFutureCallbackRegistry<T> extends Object;\n@Deprecated(since=\"6.0\") public class ListenableFutureTask<T> extends FutureTask<T> implements ListenableFuture<T>;\n@Deprecated(since=\"6.0\") public class MonoToListenableFutureAdapter<T> extends CompletableToListenableFutureAdapter<T>;\n@Deprecated(since=\"6.0\") public class SettableListenableFuture<T> extends Object implements ListenableFuture<T>;\n@Deprecated(since=\"6.0\") @FunctionalInterface public interface SuccessCallback<T>;\n", "des": "Useful generic java.util.concurrent.Future extensions."}
{"index": 1295, "repo": "spring-core-6.0.11", "code": "package function;\n\npublic class SingletonSupplier<T> extends Object implements Supplier<T>; // A Supplier decorator that caches a singleton result and makes it available from SingletonSupplier.get() (nullable) and SingletonSupplier.obtain() (null-safe).\npublic abstract class SupplierUtils extends Object; // Convenience utilities for Supplier handling.\npublic interface ThrowingBiFunction<T,U,R> extends BiFunction<T,U,R>; // A BiFunction that allows invocation of code that throws a checked exception.\n@FunctionalInterface public interface ThrowingConsumer<T> extends Consumer<T>; // A Consumer that allows invocation of code that throws a checked exception.\n@FunctionalInterface public interface ThrowingFunction<T,R> extends Function<T,R>; // A Function that allows invocation of code that throws a checked exception.\npublic interface ThrowingSupplier<T> extends Supplier<T>; // A Supplier that allows invocation of code that throws a checked exception.\n", "des": "Useful generic java.util.function helper classes."}
{"index": 1296, "repo": "spring-core-6.0.11", "code": "package unit;\n\npublic final class DataSize extends Object implements Comparable<DataSize>, Serializable; // A data size, such as '12MB'.\npublic enum DataUnit extends Enum<DataUnit>; // A standard set of DataSize units.\n", "des": "Useful unit data types."}
{"index": 1297, "repo": "spring-core-6.0.11", "code": "package xml;\n\npublic abstract class DomUtils extends Object; // Convenience methods for working with the DOM API, in particular for working with DOM Nodes and DOM Elements.\npublic class SimpleNamespaceContext extends Object implements NamespaceContext; // Simple javax.xml.namespace.NamespaceContext implementation.\npublic class SimpleSaxErrorHandler extends Object implements ErrorHandler; // Simple org.xml.sax.ErrorHandler implementation: logs warnings using the given Commons Logging logger instance, and rethrows errors to discontinue the XML transformation.\npublic class SimpleTransformErrorListener extends Object implements ErrorListener; // Simple javax.xml.transform.ErrorListener implementation: logs warnings using the given Commons Logging logger instance, and rethrows errors to discontinue the XML transformation.\npublic abstract class StaxUtils extends Object; // Convenience methods for working with the StAX API.\npublic abstract class TransformerUtils extends Object; // Contains common behavior relating to Transformers and the javax.xml.transform package in general.\npublic class XmlValidationModeDetector extends Object; // Detects whether an XML stream is using DTD- or XSD-based validation.\n", "des": "Miscellaneous utility classes for XML parsing and transformation, such as error handlers that log warnings via Commons Logging."}
{"index": 1298, "repo": "groovy-all-4.0.13", "code": "package ui;\n\npackage ui.text; // Text processing helpers for the interactive command line terminal.\npublic abstract class ConsoleSupport extends Object; // Base class for console\npublic class ConsoleTextEditor extends JScrollPane; // Component which provides a styled editor for the console.\npublic class SystemOutputInterceptor extends FilterOutputStream; // Intercepts System.out/System.err.\n", "des": "An interactive command line terminal along with a Swing console for evaluating Groovy scripts and inspecting objects, AST and bytecode information."}
{"index": 1299, "repo": "groovy-all-4.0.13", "code": "package text;\n\npublic final class FindReplaceUtility extends Object;\npublic class GroovyFilter extends StructuredSyntaxDocumentFilter;\npublic class MatchingHighlighter extends Object implements CaretListener; // Represents highlighter to highlight matched parentheses, brackets and curly braces when caret touching them\npublic class SmartDocumentFilter extends DocumentFilter; // The document filter based on Parrot's lexer is for highlighting the content of text editor\npublic class StructuredSyntaxDocumentFilter extends DocumentFilter;\npublic class StructuredSyntaxHandler extends DefaultHandler;\npublic final class StructuredSyntaxResources extends Object; // Contains all the basic resources and values used by the utility framework.\npublic class TextEditor extends JTextPane implements Pageable, Printable; // A simple text pane that is printable and wrapping is optional.\npublic class TextUndoManager extends UndoManager; // To use this, simply drop this as an UndoableEditListener into your document, and then create actions to call undo/redo as needed (checking can undo/redo first, of course).\n", "des": "Text processing helpers for the interactive command line terminal."}
{"index": 1300, "repo": "groovy-all-4.0.13", "code": "package inspect;\n\npublic class Inspector extends Object; // The Inspector provides a unified access to an object's information that can be determined by introspection.\npublic static class Inspector.MemberComparator extends Object implements Comparator<Object>, Serializable;\npublic static class Inspector.MemberComparatorWithValue extends Object implements Comparator<Object>, Serializable;\n", "des": "Classes for inspecting object properties through introspection."}
{"index": 1301, "repo": "groovy-all-4.0.13", "code": "package io;\n\npublic class EncodingAwareBufferedWriter extends BufferedWriter; // A buffered writer only for OutputStreamWriter that is aware of the encoding of the OutputStreamWriter.\npublic enum FileType extends Enum<FileType>; // Represents particular files of interest.\npublic enum FileVisitResult extends Enum<FileVisitResult>; // Represents special return values for the 'preDir', 'postDir' and 'visit'/supplied Closures used with ResourceGroovyMethods.traverse(java.io.File, java.util.Map, groovy.lang.Closure) and related methods to control subsequent traversal behavior.\npublic class GroovyPrintStream extends PrintStream; // A PrintStream that outputs objects in Groovy style.\npublic class GroovyPrintWriter extends PrintWriter; // A PrintWriter that outputs objects in Groovy style.\npublic class LineColumnReader extends BufferedReader; // The LineColumnReader is an extension to BufferedReader that keeps track of the line and column information of where the cursor is.\npublic class PlatformLineWriter extends Writer; // A buffered writer that gobbles any \\r characters and replaces every \\n with a platform specific newline.\n", "des": "Classes for Groovier Input/Output."}
{"index": 1302, "repo": "groovy-all-4.0.13", "code": "package jmx;\n\npackage jmx.builder; // Classes for the JMX Builder.\npublic class GroovyMBean extends GroovyObjectSupport; // A GroovyObject facade for an underlying MBean which acts like a normal groovy object but which is actually implemented via an underlying JMX MBean.\n", "des": "Classes for working with the Java Management Extensions (JMX) technology."}
{"index": 1303, "repo": "groovy-all-4.0.13", "code": "package builder;\n\npublic class JmxBuilderException extends RuntimeException; // Runtime exception used by JmxBuilder.\npublic class JmxBuilderModelMBean extends RequiredModelMBean implements NotificationListener; // The JmxBuilderModelMBean is the MBean class that proxies exported POGO/POJO inside the MBeanServer.\npublic class JmxEventEmitter extends NotificationBroadcasterSupport implements JmxEventEmitterMBean; // The JmxEventEmitter is a JMX Broadcaster class that is used to send generic events on the MBeanServer's event bus.\npublic interface JmxEventEmitterMBean; // This is the management interface for JmxEventEmitter.\npublic class JmxEventListener extends Object implements NotificationListener; // The JmxEventListener class is used by the builder to listen to events on the event bus.\n", "des": "Classes for the JMX Builder."}
{"index": 1304, "repo": "groovy-all-4.0.13", "code": "package plugin;\n\npublic class JUnit5Runner extends Object implements GroovyRunner; // Integration code for running JUnit5 tests in Groovy.\n", "des": "Classes to support running JUnit5 tests as scripts."}
{"index": 1305, "repo": "groovy-all-4.0.13", "code": "package lang;\n\npublic interface AdaptingMetaClass extends MetaClass; // An interface for MetaClass instances that \"adapt\" other MetaClass instances such as a proxy or delegating MetaClass.\npublic class BenchmarkInterceptor extends Object implements Interceptor; // Interceptor that registers the timestamp of each method call before and after invocation.\npublic class Binding extends GroovyObjectSupport; // Represents the variable bindings of a script which can be altered from outside the script object or created outside of a script and passed into it.\npublic interface Buildable;\n@Documented @Retention(SOURCE) @Target(TYPE) public @interface Category; // Transforms an instance-style Groovy class or interface to become a static-style conventional Groovy category.\npublic abstract class Closure<V> extends GroovyObjectSupport implements Cloneable, Runnable, GroovyCallable<V>, Serializable; // Represents any closure object in Groovy.\npublic class ClosureException extends RuntimeException; // An exception thrown by a closure invocation\npublic interface ClosureInvokingMethod; // An interface for MetaMethods that invoke closures to implements.\n@Documented @Retention(RUNTIME) @Target({FIELD,METHOD}) public @interface Delegate; // Annotation to automatically delegate part of the functionality of an owner class to the annotated delegation target.\n@Documented @Retention(RUNTIME) @Target({PARAMETER,METHOD}) public @interface DelegatesTo; // This annotation can be used by API or DSL writers to document parameters which accept a closure.\n@Retention(RUNTIME) @Target(PARAMETER) public static @interface DelegatesTo.Target; // Parameter annotation used to specify the delegate for a @DelegatesTo annotated parameter of the same method.\npublic class DelegatingMetaClass extends Object implements MetaClass, MutableMetaClass, GroovyObject;\npublic class DeprecationException extends RuntimeException; // Use this exception to mark a method implementation as being deprecated.\npublic class EmptyRange<T extends Comparable> extends AbstractList<T> implements Range<T>; // Constructing Ranges like 0..<0\npublic class ExpandoMetaClass extends MetaClassImpl implements GroovyObject; // ExpandoMetaClass is a MetaClass that behaves like an Expando, allowing the addition or replacement of methods, properties and constructors on the fly.\n", "des": "Core Groovy language classes for implementing data structures, closures, metadata and so forth."}
{"index": 1306, "repo": "groovy-all-4.0.13", "code": "package interceptor;\n\npublic class MockProxyMetaClass extends ProxyMetaClass; // The ProxyMetaClass for the MockInterceptor.\n", "des": "The groovy.mock.interceptor is an all-groovy mock testing library."}
{"index": 1307, "repo": "groovy-all-4.0.13", "code": "package security;\n\npublic final class GroovyCodeSourcePermission extends BasicPermission; // Permission required to explicitly specify a codebase for a groovy script whose codebase cannot be determined.\n", "des": "Security-related classes"}
{"index": 1308, "repo": "groovy-all-4.0.13", "code": "package servlet;\n\npublic abstract class AbstractHttpServlet extends HttpServlet implements ResourceConnector; // A base class dealing with common HTTP servlet API housekeeping aspects.\npublic class GroovyServlet extends AbstractHttpServlet; // This servlet will run Groovy scripts as Groovlets.\npublic class ServletBinding extends Binding; // Servlet-specific binding extension to lazy load the writer or the output stream from the response.\npublic class ServletCategory extends Object; // Servlet support.\npublic class TemplateServlet extends AbstractHttpServlet; // A generic servlet for serving (mostly HTML) templates.\n", "des": "Support for Groovlets which are Servlets written as a simple Groovy script."}
{"index": 1309, "repo": "groovy-all-4.0.13", "code": "package sql;\n\npublic class BatchingPreparedStatementWrapper extends BatchingStatementWrapper; // Class which delegates to a PreparedStatement but keeps track of a batch count size.\npublic class BatchingStatementWrapper extends GroovyObjectSupport implements AutoCloseable; // Class which delegates to a Statement but keeps track of a batch count size.\npublic class DataSet extends Sql; // An enhancement of Groovy's Sql class providing support for accessing and querying databases using POGO fields and operators rather than JDBC-level API calls and RDBMS column names.\npublic interface ExpandedVariable; // Identifies a variable to be expanded into the sql string rather than representing a placeholder.\npublic interface GroovyResultSet extends GroovyObject, ResultSet; // Represents an extent of objects\npublic class GroovyResultSetExtension extends GroovyObjectSupport; // GroovyResultSetExtension implements additional logic for ResultSet.\npublic final class GroovyResultSetProxy extends Object implements InvocationHandler; // GroovyResultSetProxy is used to create a proxy for GroovyResultSet.\npublic class GroovyRowResult extends GroovyObjectSupport implements Map<String,Object>; // Represents an extent of objects.\npublic interface InOutParameter extends InParameter, OutParameter; // A typed parameter passed to, and returned from a CallableStatement.\npublic interface InParameter; // A typed parameter to pass to a query\npublic interface OutParameter; // A parameter to be returned from a CallableStatement.\npublic class ResultSetMetaDataWrapper extends GroovyObjectSupport; // This class defines a wrapper for accessing a specific column in ResultSetMetaData.\npublic interface ResultSetOutParameter extends OutParameter; // A ResultSet out parameter.\npublic class Sql extends Object implements AutoCloseable; // A facade over Java's normal JDBC APIs providing greatly simplified resource management and result set handling.\npublic class SqlOrderByVisitor extends CodeVisitorSupport;\npublic class SqlWhereVisitor extends CodeVisitorSupport;\npublic class SqlWithParams extends Object;\n", "des": "Groovy helper classes for working with SQL data as Groovy objects"}
{"index": 1310, "repo": "groovy-all-4.0.13", "code": "package binding;\n\npublic class AbstractButtonProperties extends Object;\npublic abstract class AbstractSyntheticBinding extends AbstractFullBinding;\npublic class JComboBoxProperties extends Object;\npublic class JComponentProperties extends Object;\npublic class JScrollBarProperties extends Object;\npublic class JSliderProperties extends Object;\npublic class JSpinnerProperties extends Object;\npublic class JTableProperties extends Object;\npublic class JTextComponentProperties extends Object;\n", "des": "Binding classes for SwingBuilder"}
{"index": 1311, "repo": "groovy-all-4.0.13", "code": "package impl;\n\npublic class ClosureRenderer extends Object implements ListCellRenderer, TableCellRenderer, TreeCellRenderer;\npublic class DefaultAction extends AbstractAction; // A default action implementation\npublic class ListWrapperListModel<E> extends AbstractListModel; // A ListModel implementation that's backed by a live List.\npublic class TableLayout extends JPanel; // Represents a HTML style table layout\npublic class TableLayoutCell extends Object; // Represents a cell in a table layout.\npublic class TableLayoutRow extends Object; // Represents a row in a table layout\n", "des": "Implementation classes for SwingBuilder"}
{"index": 1312, "repo": "groovy-all-4.0.13", "code": "package model;\n\npublic class ClosureModel extends Object implements ValueModel, NestedValueModel; // Represents a value model using a closure to extract the value from some source model and an optional write closure for updating the value.\npublic class DefaultTableColumn extends TableColumn; // Represents a column using a ValueModel to extract the value.\npublic class DefaultTableModel extends AbstractTableModel; // A default table model made up of PropertyModels on a Value model.\nprotected static class DefaultTableModel.MyTableColumnModel extends DefaultTableColumnModel;\npublic class FormModel extends Object; // Represents a number of field models which can be ValueModel, PropertyModel, TableModel, TreeModel or nested FormModel instances\npublic interface NestedValueModel; // Represents a nested value model such as a PropertyModel or a ClosureModel\npublic class PropertyModel extends Object implements ValueModel, NestedValueModel; // Represents a property of a value as a model.\npublic class ValueHolder extends Object implements ValueModel; // A simple ValueModel implementation which is a holder of an object value.\npublic interface ValueModel; // Represents a model of a value\n", "des": "An MVC model package for working with user interfaces and data structures and arbitrary Java and Groovy objects"}
{"index": 1313, "repo": "groovy-all-4.0.13", "code": "package text;\n\npackage text.markup; // Contains a template engine facilitating generation of XML-like markup with optional type checking.\npublic class GStringTemplateEngine extends TemplateEngine; // Processes template source files substituting variables and expressions into placeholders in a template source text to produce the desired output using a streaming approach.\npublic class SimpleTemplateEngine extends TemplateEngine; // Processes template source files substituting variables and expressions into placeholders in a template source text to produce the desired output.\npublic class StreamingTemplateEngine extends TemplateEngine; // Processes template source files substituting variables and expressions into placeholders in a template source text to produce the desired output using a closure based approach.\npublic interface Template; // A template is a block of text with an associated binding that can be output to a writer or evaluated to a string.\npublic abstract class TemplateEngine extends Object; // A template engine is a factory for creating a Template instance for a given text input.\npublic class TemplateExecutionException extends Exception; // A custom exception class to flag template execution errors\npublic class TemplateParseException extends RuntimeException; // A custom exception class to flag template parsing errors\npublic class XmlTemplateEngine extends TemplateEngine; // Template engine for use in templating scenarios where both the template source and the expected output are intended to be XML.\n", "des": "Contains the text processing utilities including templating APIs and default implementations."}
{"index": 1314, "repo": "groovy-all-4.0.13", "code": "package markup;\n\npublic abstract class BaseTemplate extends Object implements Writable; // All templates compiled through MarkupTemplateEngine extend this abstract class, which provides a number of utility methods to generate markup.\npublic class DelegatingIndentWriter extends Writer; // A writer which delegates to another writer and supports an additional indenting level.\npublic class MarkupTemplateEngine extends TemplateEngine; // A template engine which leverages StreamingMarkupBuilder to generate XML/XHTML.\npublic static class MarkupTemplateEngine.CachingTemplateResolver extends MarkupTemplateEngine.DefaultTemplateResolver; // A template resolver which avoids calling ClassLoader.getResource(String) if a template path already has been queried before.\npublic static class MarkupTemplateEngine.DefaultTemplateResolver extends Object implements TemplateResolver;\npublic static class MarkupTemplateEngine.TemplateResource extends Object;\npublic class TemplateConfiguration extends Object; // Configuration options for the markup template engine.\npublic interface TemplateResolver; // Interface for template resolvers, which, given a template identifier, return a URL where the template can be loaded.\n", "des": "Contains a template engine facilitating generation of XML-like markup with optional type checking."}
{"index": 1315, "repo": "groovy-all-4.0.13", "code": "package time;\n\npublic abstract class BaseDuration extends Object implements Comparable<BaseDuration>; // Base class for date and time durations.\npublic abstract static class BaseDuration.From extends Object;\npublic class DatumDependentDuration extends BaseDuration; // DatumDependentDuration represents durations whose length in milliseconds cannot be determined without knowing the datum point.\npublic class Duration extends BaseDuration; // Duration represents time periods which have values independent of the context.\npublic class TimeCategory extends Object; // Apply a number of methods to allow convenient Date/Time manipulation,such as:\npublic class TimeDatumDependentDuration extends DatumDependentDuration; // TimeDatumDuration represents a time period which results from an arithmetic operation between a TimeDuration object and a DatumDuration object\npublic class TimeDuration extends Duration; // TimeDuration represents time periods expressed in units of hours, minutes, seconds and milliseconds.\n", "des": "Classes for easily manipulating Dates and times."}
{"index": 1316, "repo": "groovy-all-4.0.13", "code": "package util;\n\npublic abstract class AbstractFactory extends Object implements Factory;\npublic interface BufferedIterator<T> extends Iterator<T>; // An iterator that allows examining the next element without consuming it.\npublic abstract class BuilderSupport extends GroovyObjectSupport; // Base class for creating arbitrary nested trees of objects or events.\npublic class CharsetToolkit extends Object; // Utility class to guess the encoding of a given text file.\npublic class ClosureComparator<T> extends Object implements Comparator<T>, Serializable; // A Comparator which uses a closure to compare 2 values being equal\npublic class ConfigObject extends GroovyObjectSupport implements Writable, Map, Cloneable; // A ConfigObject at a simple level is a Map that creates configuration entries (other ConfigObjects) when referencing them.\npublic abstract class DelegatingScript extends Script; // Script that performs method invocations and property access like Closure does.\npublic class Eval extends Object; // Allow easy integration from Groovy into Java through convenience methods.\npublic class Expando extends GroovyObjectSupport; // Represents a dynamically expandable bean.\npublic interface Factory;\npublic abstract class FactoryBuilderSupport extends Binding; // Mix of BuilderSupport and SwingBuilder's factory support.\npublic class GroovyCollections extends Object; // A Collections utility class\npublic class GroovyScriptEngine extends Object implements ResourceConnector; // Specific script engine able to reload modified scripts as well as dealing properly with dependent scripts.\npublic interface IFileNameFinder;\npublic class IndentPrinter extends Object; // A helper class for printing indented text.\npublic class MapEntry extends Object implements Map.Entry; // A Map.Entry implementation.\npublic class Node extends Object implements Serializable, Cloneable; // Represents an arbitrary tree node which can be used for structured metadata or any arbitrary XML-like tree.\npublic class NodeBuilder extends BuilderSupport; // A helper class for creating nested trees of Node objects for handling arbitrary data\npublic class NodeList extends ArrayList; // A List implementation which is returned by queries on a Node which provides some XPath like helper methods for GPath.\npublic class NodePrinter extends Object; // A helper class for creating nested trees of data\npublic class ObjectGraphBuilder extends FactoryBuilderSupport; // A builder for creating object graphs. Each node defines the class to be created and the property on its parent (if any) at the same time.\n", "des": "Various Groovy utilities for working with nodes, builders, logging, and other things."}
{"index": 1317, "repo": "groovy-all-4.0.13", "code": "package xml;\n\npackage xml.dom; // Groovy XML Dom processing classes.\npackage xml.slurpersupport; // Helper classes for XmlSlurper.\npackage xml.streamingmarkupsupport; // XmlBuilder related classes to support streaming XML.\npublic class DOMBuilder extends BuilderSupport; // A helper class for creating a W3C DOM tree\npublic class FactorySupport extends Object; // Support class for creating XML Factories\npublic class MarkupBuilder extends BuilderSupport; // A helper class for creating XML or HTML markup.\npublic static enum MarkupBuilder.CharFilter extends Enum<MarkupBuilder.CharFilter>;\npublic static class MarkupBuilder.DefaultXmlEscapingFunction extends Object implements Function<Character,Optional<String>>;\npublic class MarkupBuilderHelper extends Object; // A helper class for MarkupBuilder.\npublic class Namespace extends Object; // A simple helper class which acts as a factory of QName instances.\npublic class NamespaceBuilder extends Object; // A helper class for creating namespaces for GroovyMarkup\npublic class NamespaceBuilderSupport extends BuilderSupport; // A helper class for creating namespaced GroovyMarkup\npublic class SAXBuilder extends BuilderSupport; // A builder for generating W3C SAX events.\npublic class XmlNodePrinter extends Object; // Prints a groovy.util.Node (as used with XmlParser) including all children in XML format.\nprotected static class XmlNodePrinter.NamespaceContext extends Object;\npublic class XmlParser extends Object implements ContentHandler; // A helper class for parsing XML into a tree of Node instances for a simple way of processing XML.\npublic class XmlSlurper extends DefaultHandler; // Parse XML into a document tree that may be traversed similar to XPath expressions.\npublic class XmlUtil extends Object; // Used for pretty printing XML content and other XML related utilities.\n", "des": "Groovy markup builder classes for working with SAX and W3C DOM and Groovy markup."}
{"index": 1318, "repo": "groovy-all-4.0.13", "code": "package dom;\n\npublic class DOMCategory extends Object; // Category class which adds GPath style operations to Java's DOM classes.\n", "des": "Groovy XML Dom processing classes."}
{"index": 1319, "repo": "groovy-all-4.0.13", "code": "package slurpersupport;\n\npublic class Attribute extends GPathResult; // Lazy evaluated representation of a node attribute.\npublic class Attributes extends NodeChildren; // Lazy evaluated representation of a node's attributes.\npublic class FilteredAttributes extends Attributes; // Lazy evaluated representation of a node's attributes filtered by a Closure.\npublic class FilteredNodeChildren extends NodeChildren; // Lazy evaluated representation of child nodes filtered by a Closure.\npublic abstract class GPathResult extends GroovyObjectSupport implements Writable, Buildable, Iterable; // Base class for representing lazy evaluated GPath expressions.\npublic class NamespaceAwareHashMap extends HashMap<String,String>;\npublic class NoChildren extends GPathResult; // Lazy evaluated representation of a GPath expression returning no children.\npublic class Node extends Object implements Writable; // Represents a node.\npublic class NodeChild extends GPathResult; // Lazy evaluated representation of a child node.\npublic class NodeChildren extends GPathResult; // Lazy evaluated representation of child nodes.\npublic abstract class NodeIterator extends Object implements Iterator; // Helper class for iterating through nodes.\npublic class NodeParents extends NodeChildren; // Lazy evaluated representation of parent nodes without duplicates\npublic abstract class ReplacementNode extends Object implements Buildable, Writable; // Helper base class used for lazy updates.\n", "des": "Helper classes for XmlSlurper."}
{"index": 1320, "repo": "groovy-all-4.0.13", "code": "package streamingmarkupsupport;\n\npublic class BaseMarkupBuilder extends Builder;\npublic abstract class Builder extends GroovyObjectSupport;\nprotected abstract static class Builder.Built extends GroovyObjectSupport;\npublic class StreamingMarkupWriter extends Writer;\n", "des": "XmlBuilder related classes to support streaming XML."}
{"index": 1321, "repo": "groovy-all-4.0.13", "code": "package yaml;\n\npublic class YamlBuilder extends GroovyObjectSupport implements Writable; // A builder for creating YAML payloads.\npublic class YamlRuntimeException extends GroovyRuntimeException; // Represents runtime exception occurred when parsing or building YAML\npublic class YamlSlurper extends Object; // Represents a YAML parser\n", "des": "Classes for building and parsing YAML."}
{"index": 1322, "repo": "groovy-all-4.0.13", "code": "package binding;\n\npublic abstract class AbstractFullBinding extends Object implements FullBinding;\npublic class AggregateBinding extends Object implements BindingUpdatable; // An aggregation of multiple bindings\npublic class BindingProxy extends GroovyObjectSupport implements BindingUpdatable; // This class returns half bound FullBindings on the source half to the model object for every property reference (and I do mean every, valid or not, queried before or not).\npublic interface BindingUpdatable;\npublic class BindPath extends Object; // The bind path object.\npublic class ClosureSourceBinding extends Object implements SourceBinding;\npublic class ClosureTriggerBinding extends Object implements TriggerBinding, SourceBinding;\npublic class EventTriggerBinding extends Object implements TriggerBinding;\npublic interface FullBinding extends BindingUpdatable;\npublic class MutualPropertyBinding extends Object implements FullBinding;\npublic class PropertyBinding extends Object implements SourceBinding, TargetBinding, TriggerBinding;\npublic static enum PropertyBinding.UpdateStrategy extends Enum<PropertyBinding.UpdateStrategy>;\npublic class PropertyChangeProxyTargetBinding extends Object implements TargetBinding;\npublic class PropertyPathFullBinding extends AbstractFullBinding implements PropertyChangeListener; // A property path full binding\npublic interface SourceBinding;\npublic class SwingTimerTriggerBinding extends Object implements TriggerBinding;\npublic interface TargetBinding;\npublic interface TriggerBinding;\n", "des": "Classes related to property binding."}
{"index": 1323, "repo": "groovy-all-4.0.13", "code": "package concurrentlinkedhashmap;\n\n@ThreadSafe public final class ConcurrentLinkedHashMap<K,V> extends AbstractMap<K,V> implements ConcurrentMap<K,V>, Serializable; // A hash table supporting full concurrency of retrievals, adjustable expected concurrency for updates, and a maximum capacity to bound the map by.\npublic static final class ConcurrentLinkedHashMap.Builder<K,V> extends Object; // A builder that creates ConcurrentLinkedHashMap instances.\n@ThreadSafe public interface EntryWeigher<K,V>; // A class that can determine the weight of an entry.\n@ThreadSafe public interface EvictionListener<K,V>; // A listener registered for notification when an entry is evicted.\n@ThreadSafe public interface Weigher<V>; // A class that can determine the weight of a value.\npublic final class Weighers extends Object; // A common set of Weigher and EntryWeigher implementations.\n", "des": "This package contains an implementation of a bounded ConcurrentMap data structure."}
{"index": 1324, "repo": "groovy-all-4.0.13", "code": "package util;\n\npublic final class YamlConverter extends Object; // A converter for converting YAML to JSON, vice versa\n", "des": "Utility classes for YAML processing."}
{"index": 1325, "repo": "groovy-all-4.0.13", "code": "package groovy;\n\npackage groovy.ant; // Ant tasks for working with Groovy - such as groovyc for compiling Groovy source code to Java bytecode\npackage groovy.ast; // Groovy AST nodes for the syntax of the language\npackage groovy.classgen; // Generates Java classes for Groovy classes using ASM.\npackage groovy.control; // Compiler control classes.\npackage groovy.groovydoc; // GroovyDoc internal classes.\npackage groovy.reflection; // Internal classes for assisting with reflection.\npackage groovy.runtime; // Runtime classes for Groovy - whether the dynamic interpreter is being used, the compiler or the bytecode generator.\npackage groovy.syntax; // Lexer, parser and trees.\npackage groovy.tools; // Compiler entry points and miscellaneous development tools.\npackage groovy.vmplugin; // JVM version specific classes.\npublic class GroovyBugError extends AssertionError; // This class represents an error that is thrown when a bug is recognized inside the runtime.\npublic class GroovyException extends Exception implements GroovyExceptionInterface;\npublic interface GroovyExceptionInterface; // An interface for use by all Groovy compiler exceptions.\n", "des": "Groovy Language for the JVM"}
{"index": 1326, "repo": "groovy-all-4.0.13", "code": "package ant;\n\npublic class AntProjectPropertiesDelegate extends Hashtable<String,Object>;\npublic abstract class CompileTaskSupport extends org.apache.tools.ant.taskdefs.MatchingTask; // Support for compilation related tasks.\npublic class FileIterator extends Object implements Iterator<File>; // FileIterator is an iterator over a number of files from a collection of FileSet instances.\npublic class FileScanner extends org.apache.tools.ant.Task; // FileScanner is a bean which allows the iteration over a number of files from a collection of FileSet instances.\npublic class FileSystemCompilerFacade extends Object; // This is a helper class, to provide a controlled entry point for the groovyc ant task forked mode.\npublic class GenerateStubsTask extends CompileTaskSupport; // Generates Java stubs from Groovy sources.\npublic class Groovy extends org.apache.tools.ant.taskdefs.Java; // Executes a series of Groovy statements.\npublic class Groovyc extends org.apache.tools.ant.taskdefs.MatchingTask; // Compiles Groovy source files using Ant.\npublic class GroovycTask extends CompileTaskSupport; // Compiles Groovy source files.\npublic class Groovydoc extends org.apache.tools.ant.Task; // Access to the GroovyDoc tool from Ant.\npublic class LoggingHelper extends Object; // Helper to make logging from Ant easier.\npublic class RootLoaderRef extends org.apache.tools.ant.taskdefs.MatchingTask; // Sets the RootLoader as reference.\npublic class UberCompileTask extends org.apache.tools.ant.Task; // Compiles Java and Groovy source files.\npublic class VerifyClass extends org.apache.tools.ant.taskdefs.MatchingTask; // Verify Class files.\n", "des": "Ant tasks for working with Groovy - such as groovyc for compiling Groovy source code to Java bytecode"}
{"index": 1327, "repo": "groovy-all-4.0.13", "code": "package ast;\n\npackage ast.expr; // AST nodes for Groovy expressions\npackage ast.stmt; // AST nodes for Groovy statements\npublic class AnnotatedNode extends ASTNode implements GroovydocHolder<AnnotatedNode>; // Base class for any AST node which is capable of being annotated\npublic class AnnotationNode extends ASTNode; // Represents an annotation which can be attached to interfaces, classes, methods, fields, parameters, and other places.\npublic class ASTNode extends Object implements NodeMetaDataHandler; // Base class for any AST node.\npublic class AstToTextHelper extends Object; // Helper class for converting AST into text.\npublic abstract class ClassCodeExpressionTransformer extends ClassCodeVisitorSupport implements ExpressionTransformer; // Transforms expressions in a whole class.\npublic abstract class ClassCodeVisitorSupport extends CodeVisitorSupport implements ErrorCollecting, GroovyClassVisitor;\npublic class ClassHelper extends Object; // Helper for ClassNode and classes handling them.\npublic class ClassNode extends AnnotatedNode; // Represents a class in the AST.\npublic abstract class CodeVisitorSupport extends Object implements GroovyCodeVisitor; // Abstract base class for any GroovyCodeVisitor which by default just walks the code and expression tree\npublic class CompileUnit extends Object implements NodeMetaDataHandler; // Represents the entire contents of a compilation step which consists of one or more ModuleNode instances.\npublic class ConstructorNode extends MethodNode; // Represents a constructor declaration\npublic class DynamicVariable extends Object implements Variable;\npublic class EnumConstantClassNode extends InnerClassNode; // Represents the anonymous inner class for an enum constant.\npublic class FieldNode extends AnnotatedNode implements Variable; // Represents a field (member variable)\npublic class GenericsType extends ASTNode; // This class is used to describe generic type signatures for ClassNodes.\npublic static class GenericsType.GenericsTypeName extends Object; // Represents GenericsType name.\npublic interface GroovyClassVisitor; // A special visitor for working with the structure of a class.\npublic interface GroovyCodeVisitor; // An implementation of the visitor pattern for working with ASTNodes.\npublic class GroovyCodeVisitorAdapter extends Object implements GroovyCodeVisitor;\npublic class ImportNode extends AnnotatedNode; // Represents an import statement.\npublic class InnerClassNode extends ClassNode; // Represents an inner class declaration\n", "des": "Groovy AST nodes for the syntax of the language"}
{"index": 1328, "repo": "groovy-all-4.0.13", "code": "package expr;\n\npublic class AnnotationConstantExpression extends ConstantExpression; // Represents an annotation \"constant\" that may appear in annotation attributes (mainly used as a marker).\npublic class ArgumentListExpression extends TupleExpression; // Represents one or more arguments being passed into a method\npublic class ArrayExpression extends Expression; // Represents an array object construction.\npublic class AttributeExpression extends PropertyExpression; // Represents an attribute access (accessing the field of a class) such as the expression \"foo.@bar\".\npublic class BinaryExpression extends Expression; // Represents two expressions and an operation\npublic class BitwiseNegationExpression extends Expression;\npublic class BooleanExpression extends Expression; // Represents a boolean expression\npublic class CastExpression extends Expression; // Represents a typecast expression.\npublic class ClassExpression extends Expression; // Represents access to a Java/Groovy class in an expression, such as when invoking a static method or accessing a static type\npublic class ClosureExpression extends Expression; // Represents a closure expression such as\npublic class ClosureListExpression extends ListExpression; // This class represents a list of expressions used to create closures.\npublic class ConstantExpression extends Expression; // Represents a constant expression such as null, true, false.\npublic class ConstructorCallExpression extends Expression implements MethodCall; // A constructor call.\npublic class DeclarationExpression extends BinaryExpression; // Represents one or more local variables.\npublic class ElvisOperatorExpression extends TernaryExpression; // Represents a short ternary expression x ?: y, which is equal to\npublic class EmptyExpression extends Expression; // Placeholder for an empty expression.\npublic abstract class Expression extends AnnotatedNode; // Represents a base class for expressions which evaluate as an object\npublic interface ExpressionTransformer; // Provides a way to transform expressions\npublic class FieldExpression extends Expression; // Represents a field access such as the expression \"this.foo\".\npublic class GStringExpression extends Expression; // Represents a String expression which contains embedded values inside it such as \"hello there ${user} how are you\" which is expanded lazily\npublic class LambdaExpression extends ClosureExpression; // Represents a lambda expression such as one of these:\npublic class ListExpression extends Expression; // Represents a list expression [1, 2, 3] which creates a mutable List\n", "des": "AST nodes for Groovy expressions"}
{"index": 1329, "repo": "groovy-all-4.0.13", "code": "package stmt;\n\npublic class AssertStatement extends Statement; // Represents an assert statement.\npublic class BlockStatement extends Statement; // A list of statements and a scope.\npublic class BreakStatement extends Statement; // Represents a break statement in a switch or loop statement\npublic class CaseStatement extends Statement; // Represents a case statement in a switch statement\npublic class CatchStatement extends Statement; // Represents a catch (Exception var) { } statement\npublic class ContinueStatement extends Statement; // Represents a continue statement in a loop statement\npublic class DoWhileStatement extends Statement implements LoopingStatement; // Represents a do { ...\npublic class EmptyStatement extends Statement;\npublic class ExpressionStatement extends Statement; // A simple statement such as a method call where the return value is ignored\npublic class ForStatement extends Statement implements LoopingStatement; // Represents a standard for loop in Groovy\npublic class IfStatement extends Statement; // Represents an if (condition) { ...\npublic interface LoopingStatement; // This is an AST Node that provides some sort of looping mechanism.\npublic class ReturnStatement extends Statement; // A return statement\npublic class Statement extends ASTNode; // Base class for any statement.\npublic class SwitchStatement extends Statement; // Represents a switch (object) { case value: ...\npublic class SynchronizedStatement extends Statement; // Represents a synchronized statement\npublic class ThrowStatement extends Statement; // Represents a throw statement\npublic class TryCatchStatement extends Statement; // Represents a try { ...\npublic class WhileStatement extends Statement implements LoopingStatement; // Represents a while (condition) { ...\n", "des": "AST nodes for Groovy statements"}
{"index": 1330, "repo": "groovy-all-4.0.13", "code": "package classgen;\n\npackage classgen.asm; // Helper classes for ASMClassGenerator.\npublic class AnnotationVisitor extends Object; // An Annotation visitor responsible for: reading annotation metadata (@Retention, @Target, attribute types) verify that an AnnotationNode conforms to annotation meta enhancing an AnnotationNode AST to reflect real annotation meta\npublic class AsmClassGenerator extends ClassGenerator; // Generates Java class versions of Groovy classes using ASM.\npublic abstract class BytecodeExpression extends Expression; // Represents some custom bytecode generation by the compiler.\npublic abstract class BytecodeInstruction extends Object; // Helper class used by the class generator.\npublic class BytecodeSequence extends Statement; // This class represents a sequence of BytecodeInstructions or ASTNodes.\npublic class ClassCompletionVerifier extends ClassCodeVisitorSupport; // Checks that a class satisfies various conditions including: Incorrect class or method access modifiers No abstract methods appear in a non-abstract class Existence and correct visibility for inherited members Invalid attempts to override final members\npublic abstract class ClassGenerator extends ClassCodeVisitorSupport; // Abstract base class for generator of Java class versions of Groovy AST classes\npublic class ClassGeneratorException extends RuntimeException; // An exception thrown by the class generator\npublic class DummyClassGenerator extends ClassGenerator; // To generate a class that has all the fields and methods, except that fields are not initialized and methods are empty.\npublic class EnumCompletionVisitor extends ClassCodeVisitorSupport; // Enums have a parent constructor with two arguments from java.lang.Enum.\npublic class EnumVisitor extends ClassCodeVisitorSupport;\npublic class ExtendedVerifier extends ClassCodeVisitorSupport; // A specialized Groovy AST visitor meant to perform additional verifications upon the current AST.\npublic class FinalVariableAnalyzer extends ClassCodeVisitorSupport;\npublic static interface FinalVariableAnalyzer.VariableNotFinalCallback;\npublic class GeneratorContext extends Object; // A context shared across generations of a class and its inner classes.\npublic class InnerClassCompletionVisitor extends InnerClassVisitorHelper;\npublic class InnerClassVisitor extends InnerClassVisitorHelper;\npublic abstract class InnerClassVisitorHelper extends ClassCodeVisitorSupport;\npublic class ReturnAdder extends Object; // Utility class to add return statements.\n@FunctionalInterface public static interface ReturnAdder.ReturnStatementListener;\npublic class VariableScopeVisitor extends ClassCodeVisitorSupport; // Initializes the variable scopes for an AST.\n", "des": "Generates Java classes for Groovy classes using ASM."}
{"index": 1331, "repo": "groovy-all-4.0.13", "code": "package asm;\n\npublic class AssertionWriter extends Object;\npublic class BinaryBooleanExpressionHelper extends BinaryIntExpressionHelper; // Binary write operations specialised for Booleans\npublic class BinaryDoubleExpressionHelper extends BinaryLongExpressionHelper;\npublic class BinaryExpressionHelper extends Object;\npublic class BinaryExpressionMultiTypeDispatcher extends BinaryExpressionHelper; // This class is for internal use only! This class will dispatch to the right type adapters according to the kind of binary expression that is provided.\npublic abstract class BinaryExpressionWriter extends Object; // Base class for writing primitive typed operations\npublic class BinaryFloatExpressionHelper extends BinaryExpressionWriter;\npublic class BinaryIntExpressionHelper extends BinaryExpressionWriter;\npublic class BinaryLongExpressionHelper extends BinaryExpressionWriter;\npublic class BinaryObjectExpressionHelper extends BinaryExpressionWriter;\npublic class BytecodeDumper extends Object implements BytecodeProcessor; // A utility class which can be used in test cases to dump generated bytecode.\npublic class BytecodeHelper extends Object; // A helper class for bytecode generation with AsmClassGenerator.\npublic class BytecodeVariable extends Object; // Represents compile time variable metadata while compiling a method.\npublic class CallSiteWriter extends Object; // This class represents non-public API used by AsmClassGenerator.\npublic class ClosureWriter extends Object;\nprotected static class ClosureWriter.CorrectAccessedVariableVisitor extends CodeVisitorSupport;\nprotected static interface ClosureWriter.UseExistingReference;\npublic class CompileStack extends Object; // Manages different aspects of the code of a code block like handling labels, defining variables, and scopes.\npublic static class CompileStack.BlockRecorder extends Object;\nprotected static class CompileStack.LabelRange extends Object;\npublic class DelegatingController extends WriterController; // This class will delegate all calls to a WriterController given in the constructor.\npublic class ExpressionAsVariableSlot extends BytecodeExpression; // Helper class that takes an Expression and if visited will load it normally, storing the result in a helper variable, which then can be requested after the visit is completed.\npublic class InvocationWriter extends Object;\npublic class LambdaWriter extends ClosureWriter;\npublic class MethodCaller extends Object; // A helper class to invoke methods more easily in ASM\npublic class MethodCallerMultiAdapter extends Object;\npublic class MethodPointerExpressionWriter extends Object; // Generates bytecode for method pointer expressions.\n", "des": "Helper classes for ASMClassGenerator."}
{"index": 1332, "repo": "groovy-all-4.0.13", "code": "package control;\n\npackage control.io; // Internal classes for Groovier Input/Output.\npackage control.messages; // Error message classes.\npublic class AnnotationConstantsVisitor extends ClassCodeVisitorSupport; // Resolves constants in annotation definitions.\npublic class ASTTransformationsContext extends Object; // Stores state information about global AST transformations applied to a compilation unit.\npublic interface BytecodeProcessor;\npublic class ClassNodeResolver extends Object; // This class is used as a pluggable way to resolve class names.\npublic static class ClassNodeResolver.LookupResult extends Object; // Helper class to return either a SourceUnit or ClassNode.\npublic class CompilationFailedException extends GroovyRuntimeException; // Thrown when compilation fails from source errors.\npublic class CompilationUnit extends ProcessingUnit; // The CompilationUnit collects all compilation data as it is generated by the compiler system.\n@FunctionalInterface public static interface CompilationUnit.ClassgenCallback; // A callback interface you can use during the classgen phase of compilation as the compiler traverses the ClassNode tree.\n@Deprecated public abstract static class CompilationUnit.GroovyClassOperation extends Object implements CompilationUnit.IGroovyClassOperation;\n@FunctionalInterface public static interface CompilationUnit.IGroovyClassOperation;\n@FunctionalInterface public static interface CompilationUnit.IPrimaryClassNodeOperation;\n@FunctionalInterface public static interface CompilationUnit.ISourceUnitOperation;\n@Deprecated public abstract static class CompilationUnit.PrimaryClassNodeOperation extends Object implements CompilationUnit.IPrimaryClassNodeOperation;\n@FunctionalInterface public static interface CompilationUnit.ProgressCallback; // A callback interface you can use to get a callback after every unit of the compile process.\n@Deprecated public abstract static class CompilationUnit.SourceUnitOperation extends Object implements CompilationUnit.ISourceUnitOperation;\npublic enum CompilePhase extends Enum<CompilePhase>; // The phases of the GroovyCompiler.\npublic class CompilerConfiguration extends Object; // Compilation control flags and coordination stuff.\npublic class ConfigurationException extends RuntimeException implements GroovyExceptionInterface; // Thrown when configuration data is invalid.\npublic class ErrorCollector extends Object implements Serializable; // A base class for collecting messages and errors during processing.\npublic class GenericsVisitor extends ClassCodeVisitorSupport; // Verify correct usage of generics.\npublic interface HasCleanup; // An interface for things that need to be cleaned up after operations complete.\npublic abstract class InstanceOfVerifier extends ClassCodeVisitorSupport;\n", "des": "Compiler control classes."}
{"index": 1333, "repo": "groovy-all-4.0.13", "code": "package io;\n\npublic abstract class AbstractReaderSource extends Object implements ReaderSource; // For ReaderSources that can choose a parent class, a base that provides common functionality.\npublic class FileReaderSource extends AbstractReaderSource; // A ReaderSource for source files.\npublic class InputStreamReaderSource extends AbstractReaderSource; // A ReaderSource for source strings.\npublic class NullWriter extends Writer; // A Writer that eats its input.\npublic interface ReaderSource extends HasCleanup; // An interface for things that can supply (and potentially resupply) a Reader on a source stream.\npublic class StringReaderSource extends AbstractReaderSource; // A ReaderSource for source strings.\npublic class URLReaderSource extends AbstractReaderSource; // A ReaderSource for source files hosted at a URL.\n", "des": "Internal classes for Groovier Input/Output."}
{"index": 1334, "repo": "groovy-all-4.0.13", "code": "package messages;\n\npublic class ExceptionMessage extends Message; // A class for error messages produced by the parser system.\npublic class LocatedMessage extends SimpleMessage; // A base class for compilation messages.\npublic abstract class Message extends Object; // A base class for compilation messages.\npublic class SimpleMessage extends Message; // A base class for compilation messages.\npublic class SyntaxErrorMessage extends Message; // A class for error messages produced by the parser system.\npublic class WarningMessage extends LocatedMessage; // A class for warning messages.\n", "des": "Error message classes."}
{"index": 1335, "repo": "groovy-all-4.0.13", "code": "package groovydoc;\n\npublic interface GroovyAnnotationRef;\npublic interface GroovyClassDoc extends GroovyType, GroovyProgramElementDoc;\npublic interface GroovyConstructorDoc extends GroovyExecutableMemberDoc;\npublic interface GroovyDoc extends Comparable<GroovyDoc>;\npublic interface GroovyDocErrorReporter;\npublic interface GroovyExecutableMemberDoc extends GroovyMemberDoc;\npublic interface GroovyFieldDoc extends GroovyMemberDoc;\npublic interface GroovyMemberDoc extends GroovyProgramElementDoc;\npublic interface GroovyMethodDoc extends GroovyExecutableMemberDoc;\npublic interface GroovyPackageDoc extends GroovyDoc;\npublic interface GroovyParameter;\npublic interface GroovyProgramElementDoc extends GroovyDoc;\npublic interface GroovyRootDoc extends GroovyDoc, GroovyDocErrorReporter;\npublic interface GroovyTag;\npublic interface GroovyType;\n", "des": "GroovyDoc internal classes."}
{"index": 1336, "repo": "groovy-all-4.0.13", "code": "package reflection;\n\npublic class CacheAccessControlException extends GroovyRuntimeException;\npublic class CachedClass extends Object;\npublic static class CachedClass.CachedMethodComparatorByName extends Object implements Comparator<CachedMethod>;\npublic static class CachedClass.CachedMethodComparatorWithString extends Object implements Comparator;\npublic class CachedConstructor extends ParameterTypes;\npublic class CachedField extends MetaProperty;\npublic class CachedMethod extends MetaMethod implements Comparable;\npublic class ClassInfo extends Object implements Finalizable; // Handle for all information we want to keep about the class\npublic static interface ClassInfo.ClassInfoAction;\npublic class ClassLoaderForClassArtifacts extends ClassLoader;\npublic abstract class GeneratedMetaMethod extends MetaMethod;\npublic static class GeneratedMetaMethod.DgmMethodRecord extends Object implements Serializable;\npublic static class GeneratedMetaMethod.Proxy extends GeneratedMetaMethod;\npublic interface GroovyClassValue<T>; // Abstraction for Java version dependent ClassValue implementations.\npublic static interface GroovyClassValue.ComputeValue<T>;\npublic class MixinInMetaClass extends Object;\npublic class ParameterTypes extends Object;\npublic class ReflectionCache extends Object;\npublic class ReflectionUtils extends Object; // This class contains utility methods to determine which class called the current class to multiple levels of depth.\npublic class SunClassLoader extends ClassLoader; // Special class loader, which when running on Sun VM allows to generate accessor classes for any method\n", "des": "Internal classes for assisting with reflection."}
{"index": 1337, "repo": "groovy-all-4.0.13", "code": "package runtime;\n\npackage runtime.metaclass; // Internal classes related to Groovy's metaclass implementation.\npackage runtime.typehandling; // Classes used to execute special actions based on the type.\npackage runtime.wrappers; // Groovy wrapper classes for primitive types.\npublic abstract class AbstractComparator<T> extends Object implements Comparator<T>;\npublic class ArrayTypeUtils extends Object; // Utilities for handling array types\npublic class ArrayUtil extends Object; // This is a generated class used internally during the writing of bytecode within the CallSiteWriter logic.\npublic class BytecodeInterface8 extends Object; // This class contains methods special to optimizations used directly from bytecode in Groovy 1.8\npublic final class ComposedClosure<V> extends Closure<V>; // A wrapper for Closure to support composition.\npublic abstract class ConversionHandler extends Object implements InvocationHandler, Serializable; // This class is a general adapter to map a call to a Java interface to a given delegate.\npublic class ConvertedClosure extends ConversionHandler implements Serializable; // This class is a general adapter to adapt a closure to any Java interface.\npublic class ConvertedMap extends ConversionHandler; // This class is a general adapter to adapt a map of closures to any Java interface.\npublic final class CurriedClosure<V> extends Closure<V>; // A wrapper for Closure to support currying.\npublic class DefaultCachedMethodKey extends MethodKey; // A default implementation of MethodKey\npublic class DefaultGroovyMethods extends DefaultGroovyMethodsSupport; // This class defines new groovy methods which appear on normal JDK classes inside the Groovy environment.\npublic class DefaultGroovyMethodsSupport extends Object; // Support methods for DefaultGroovyMethods and PluginDefaultMethods.\npublic class DefaultGroovyStaticMethods extends Object; // This class defines all the new static groovy methods which appear on normal JDK classes inside the Groovy environment.\npublic class DefaultMethodKey extends MethodKey; // A default implementation of MethodKey\npublic class EncodingGroovyMethods extends Object; // This class defines all the encoding/decoding groovy methods which enhance the normal JDK classes when inside the Groovy environment.\npublic class EncodingGroovyMethodsSupport extends Object; // Keep this constant in a separate file as it is troublesome for Antlr to parse for doc purposes.\npublic class FlushingStreamWriter extends OutputStreamWriter; // Stream writer which flushes after each write operation.\npublic class FormatHelper extends Object; // Formatting methods\n", "des": "Runtime classes for Groovy - whether the dynamic interpreter is being used, the compiler or the bytecode generator."}
{"index": 1338, "repo": "groovy-all-4.0.13", "code": "package metaclass;\n\npublic final class ClosureMetaClass extends MetaClassImpl; // A metaclass for closures generated by the Groovy compiler.\npublic class ClosureMetaMethod extends MetaMethod implements ClosureInvokingMethod; // A MetaMethod that accepts a closure in the constructor which is invoked when the MetaMethod is called.\npublic class ClosureStaticMetaMethod extends MetaMethod implements ClosureInvokingMethod; // This class represents a MetaMethod that is a closure that pretends to be a static method.\npublic class ConcurrentReaderHashMap extends AbstractMap implements Cloneable, Serializable; // A hash table that supports mostly-concurrent reading, but exclusive writing.\nprotected static class ConcurrentReaderHashMap.BarrierLock extends Object implements Serializable; // A Serializable class for barrier lock\nprotected static class ConcurrentReaderHashMap.Entry extends Object implements Map.Entry; // ConcurrentReaderHashMap collision list entry.\npublic class DefaultMetaClassInfo extends Object; // WARNING: This class is for internal use only! We use this class to store information about if a default MetaClass is used for certain primitives.\npublic static class DefaultMetaClassInfo.ConstantMetaClassVersioning extends Object;\npublic class MetaClassRegistryImpl extends Object implements MetaClassRegistry; // A registry of MetaClass instances which caches introspection and reflection information and allows methods to be dynamically added to existing classes at runtime\npublic class MetaMethodIndex extends Object;\npublic static class MetaMethodIndex.CacheEntry extends Object;\npublic static class MetaMethodIndex.Entry extends Object;\npublic static interface MetaMethodIndex.EntryIterator;\npublic static class MetaMethodIndex.Header extends Object;\npublic class MethodHelper extends Object; // Some reflection helper methods\npublic class MethodMetaProperty extends MetaProperty; // Wrapper for a method for a property get or set.\npublic static class MethodMetaProperty.GetBeanMethodMetaProperty extends MethodMetaProperty; // Wrapper for a method realizing the property getter.\npublic static class MethodMetaProperty.GetMethodMetaProperty extends MethodMetaProperty; // Wrapper for a method realizing the property get.\npublic class MethodSelectionException extends GroovyRuntimeException; // This exception is thrown if the runtime is unable to select a method.\npublic class MissingMethodExceptionNoStack extends MissingMethodException;\npublic class MissingMethodExecutionFailed extends MissingMethodExceptionNoStack; // A stack less exception used to indicate, that the execution of a missingMethod method failed with a MissingMethodException.\npublic class MissingPropertyExceptionNoStack extends MissingPropertyException;\n", "des": "Internal classes related to Groovy's metaclass implementation."}
{"index": 1339, "repo": "groovy-all-4.0.13", "code": "package typehandling;\n\npublic final class BigDecimalMath extends NumberMath; // BigDecimal NumberMath operations\npublic final class BigIntegerMath extends NumberMath; // BigInteger NumberMath operations\npublic class DefaultTypeTransformation extends Object; // Class providing various type conversions, coercions and boxing/unboxing operations.\npublic final class FloatingPointMath extends NumberMath; // FloatingPoint (Double and Float) NumberMath operations\npublic class GroovyCastException extends ClassCastException;\npublic final class IntegerMath extends NumberMath; // Integer NumberMath operations\npublic final class LongMath extends NumberMath; // Long NumberMath operations\npublic abstract class NumberMath extends Object; // Stateless objects used to perform math on the various Number subclasses.\npublic class NumberMathModificationInfo extends Object;\npublic class ShortTypeHandling extends Object; // Class providing various short paths for type conversions.\n", "des": "Classes used to execute special actions based on the type."}
{"index": 1340, "repo": "groovy-all-4.0.13", "code": "package wrappers;\n\npublic class BooleanWrapper extends PojoWrapper;\npublic class ByteWrapper extends PojoWrapper;\npublic class CharWrapper extends PojoWrapper;\npublic class DoubleWrapper extends PojoWrapper;\npublic class FloatWrapper extends PojoWrapper;\npublic class GroovyObjectWrapper extends Wrapper;\npublic class IntWrapper extends PojoWrapper;\npublic class LongWrapper extends PojoWrapper;\npublic class PojoWrapper extends Wrapper;\npublic class ShortWrapper extends PojoWrapper;\npublic abstract class Wrapper extends Object implements GroovyObject;\n", "des": "Groovy wrapper classes for primitive types."}
{"index": 1341, "repo": "groovy-all-4.0.13", "code": "package syntax;\n\npublic class ASTHelper extends Object; // A common base class of AST helper methods which can be shared across the classic and new parsers\npublic abstract class CSTNode extends Object; // An abstract base class for nodes in the concrete syntax tree that is the result of parsing.\npublic class Numbers extends Object; // Helper class for processing Groovy numeric literals.\npublic class ParserException extends TokenException;\npublic class ReadException extends GroovyException; // Encapsulates non-specific i/o exceptions.\npublic class Reduction extends CSTNode; // A syntax reduction, produced by the Parser.\npublic class RuntimeParserException extends GroovyRuntimeException; // A helper class to allow parser exceptions to be thrown anywhere in the code.\npublic class SyntaxException extends GroovyException; // Base exception indicating a syntax error.\npublic class Token extends CSTNode; // A CSTNode produced by the Lexer.\npublic class TokenException extends SyntaxException;\npublic class TokenMismatchException extends TokenException;\npublic class TokenUtil extends Object; // Utility methods for working with Tokens.\npublic class Types extends Object; // Typing information for the CST system.\n", "des": "Lexer, parser and trees."}
{"index": 1342, "repo": "groovy-all-4.0.13", "code": "package tools;\n\npackage tools.groovydoc; // GroovyDoc tool.\npackage tools.javac; // Classes related to the joint compiler.\npublic class Compiler extends Object; // A convenience front end for getting standard compilations done.\npublic class DgmConverter extends Object;\npublic class ErrorReporter extends Object; // Provides services for reporting compilation errors to the user.\npublic class FileSystemCompiler extends Object; // Command-line compiler (aka.\npublic static class FileSystemCompiler.CompilationOptions extends Object;\npublic static class FileSystemCompiler.VersionProvider extends Object implements picocli.CommandLine.IVersionProvider;\npublic class GrapeUtil extends Object;\npublic class GroovyClass extends Object;\npublic class GroovyStarter extends Object; // Helper class to initialize the Groovy runtime.\npublic class LoaderConfiguration extends Object; // Class used to configure a RootLoader from a stream or by using its methods.\npublic class RootLoader extends URLClassLoader; // This ClassLoader should be used as root of class loaders.\npublic class StringHelper extends Object;\npublic abstract class Utilities extends Object; // Various utility functions for use in the compiler.\n", "des": "Compiler entry points and miscellaneous development tools."}
{"index": 1343, "repo": "groovy-all-4.0.13", "code": "package groovydoc;\n\npublic class ArrayClassDocWrapper extends Object implements GroovyClassDoc;\npublic class ClasspathResourceManager extends Object implements ResourceManager;\npublic class ExternalGroovyClassDoc extends Object implements GroovyClassDoc; // Represents a class not in the codebase being processed.\npublic class FileOutputTool extends Object implements OutputTool;\npublic class FileSystemResourceManager extends Object implements ResourceManager;\npublic interface GroovyDocParserI;\npublic class GroovyDocTemplateEngine extends Object; // Process Groovydoc templates.\npublic class GroovyDocTool extends Object;\npublic class GroovyDocWriter extends Object; // Write GroovyDoc resources to destination.\npublic class GroovyRootDocBuilder extends Object;\npublic class LinkArgument extends Object; // Represents a link pair (href, packages).\npublic class MockOutputTool extends Object implements OutputTool;\npublic interface OutputTool;\npublic interface ResourceManager;\npublic class SimpleGroovyAbstractableElementDoc extends SimpleGroovyProgramElementDoc;\npublic class SimpleGroovyAnnotationRef extends Object implements GroovyAnnotationRef;\npublic class SimpleGroovyClassDoc extends SimpleGroovyAbstractableElementDoc implements GroovyClassDoc;\npublic class SimpleGroovyConstructorDoc extends SimpleGroovyExecutableMemberDoc implements GroovyConstructorDoc;\npublic class SimpleGroovyDoc extends Object implements GroovyDoc;\npublic class SimpleGroovyExecutableMemberDoc extends SimpleGroovyMemberDoc implements GroovyExecutableMemberDoc;\npublic class SimpleGroovyFieldDoc extends SimpleGroovyMemberDoc implements GroovyFieldDoc;\npublic class SimpleGroovyMemberDoc extends SimpleGroovyAbstractableElementDoc implements GroovyMemberDoc;\npublic class SimpleGroovyMethodDoc extends SimpleGroovyExecutableMemberDoc implements GroovyMethodDoc;\npublic class SimpleGroovyPackageDoc extends SimpleGroovyDoc implements GroovyPackageDoc;\npublic class SimpleGroovyParameter extends Object implements GroovyParameter;\npublic class SimpleGroovyProgramElementDoc extends SimpleGroovyDoc implements GroovyProgramElementDoc;\npublic class SimpleGroovyRootDoc extends SimpleGroovyDoc implements GroovyRootDoc;\npublic class SimpleGroovyTag extends Object implements GroovyTag; // Stores info about GroovyDoc tags.\npublic class SimpleGroovyType extends Object implements GroovyType;\n", "des": "GroovyDoc tool."}
{"index": 1344, "repo": "groovy-all-4.0.13", "code": "package javac;\n\npublic class JavaAwareCompilationUnit extends CompilationUnit; // Compilation Unit capable of compiling Java source files.\npublic class JavaAwareResolveVisitor extends ResolveVisitor;\npublic class JavacCompilerFactory extends Object implements JavaCompilerFactory;\npublic class JavacJavaCompiler extends Object implements JavaCompiler;\npublic interface JavaCompiler;\npublic interface JavaCompilerFactory;\npublic class JavaStubCompilationUnit extends CompilationUnit; // Compilation unit to only generate stubs.\npublic class JavaStubGenerator extends Object;\npublic class MemJavaFileObject extends SimpleJavaFileObject; // Represents a Java source file in memory to compile\npublic class RawJavaFileObject extends SimpleJavaFileObject; // Represents a Java source file in file to compile\n", "des": "Classes related to the joint compiler."}
{"index": 1345, "repo": "groovy-all-4.0.13", "code": "package vmplugin;\n\npublic interface VMPlugin; // Interface to access VM version based actions.\npublic class VMPluginFactory extends Object; // Factory class to get functionality based on the VM version.\n", "des": "JVM version specific classes."}
{"index": 1346, "repo": "spring-integration-kafka-6.1.2", "code": "package channel;\n\npublic abstract class AbstractKafkaChannel extends org.springframework.integration.channel.AbstractMessageChannel; // Abstract MessageChannel backed by an Apache Kafka topic.\npublic class PollableKafkaChannel extends AbstractKafkaChannel implements org.springframework.messaging.PollableChannel, org.springframework.integration.channel.ExecutorChannelInterceptorAware; // Pollable channel backed by an Apache Kafka topic.\npublic class PublishSubscribeKafkaChannel extends SubscribableKafkaChannel implements org.springframework.integration.channel.BroadcastCapableChannel; // Publish/subscribe channel backed by an Apache Kafka topic.\npublic class SubscribableKafkaChannel extends AbstractKafkaChannel implements org.springframework.messaging.SubscribableChannel, org.springframework.integration.support.management.ManageableSmartLifecycle; // Subscribable channel backed by an Apache Kafka topic.\n", "des": "Provides classes related to message channel implementations for Apache Kafka."}
{"index": 1347, "repo": "spring-integration-kafka-6.1.2", "code": "package xml;\n\npublic class KafkaChannelParser extends org.springframework.integration.config.xml.AbstractChannelParser; // Parser for a channel backed by an Apache Kafka topic.\npublic class KafkaInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Parser for the inbound channel adapter.\npublic class KafkaInboundGatewayParser extends org.springframework.integration.config.xml.AbstractInboundGatewayParser; // Inbound gateway parser.\npublic class KafkaMessageDrivenChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser; // Parser for the message driven channel adapter.\npublic class KafkaNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // The namespace handler for the Apache Kafka namespace.\npublic class KafkaOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the outbound channel adapter.\npublic class KafkaOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the outbound gateway.\npublic final class KafkaParsingUtils extends Object; // Utilities to assist with parsing XML.\n", "des": "Provides parser classes to provide Xml namespace support for the Apache Kafka components."}
{"index": 1348, "repo": "spring-integration-kafka-6.1.2", "code": "package dsl;\n\npublic abstract class AbstractKafkaChannelSpec<S extends AbstractKafkaChannelSpec<S,C>,C extends AbstractKafkaChannel> extends org.springframework.integration.dsl.MessageChannelSpec<S,C>; // Spec for a message channel backed by an Apache Kafka topic.\npublic final class Kafka extends Object; // Factory class for Apache Kafka components.\npublic class KafkaInboundChannelAdapterSpec<K,V> extends org.springframework.integration.dsl.MessageSourceSpec<KafkaInboundChannelAdapterSpec<K,V>,KafkaMessageSource<K,V>>; // Spec for a polled Apache Kafka inbound channel adapter.\npublic class KafkaInboundGatewaySpec<K,V,R,S extends KafkaInboundGatewaySpec<K,V,R,S>> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,KafkaInboundGateway<K,V,R>> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessagingGatewaySpec implementation for the KafkaInboundGateway.\npublic static class KafkaInboundGatewaySpec.KafkaInboundGatewayListenerContainerSpec<K,V,R> extends KafkaInboundGatewaySpec<K,V,R,KafkaInboundGatewaySpec.KafkaInboundGatewayListenerContainerSpec<K,V,R>>; // A ConcurrentMessageListenerContainer configuration KafkaInboundGatewaySpec extension.\npublic class KafkaMessageDrivenChannelAdapterSpec<K,V,S extends KafkaMessageDrivenChannelAdapterSpec<K,V,S>> extends org.springframework.integration.dsl.MessageProducerSpec<S,KafkaMessageDrivenChannelAdapter<K,V>> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessageProducerSpec implementation for the KafkaMessageDrivenChannelAdapter.\npublic static class KafkaMessageDrivenChannelAdapterSpec.KafkaMessageDrivenChannelAdapterListenerContainerSpec<K,V> extends KafkaMessageDrivenChannelAdapterSpec<K,V,KafkaMessageDrivenChannelAdapterSpec.KafkaMessageDrivenChannelAdapterListenerContainerSpec<K,V>>; // A ConcurrentMessageListenerContainer configuration KafkaMessageDrivenChannelAdapterSpec extension.\n", "des": "Provides Spring Integration Java DSL Components support for Apache Kafka."}
{"index": 1349, "repo": "spring-integration-kafka-6.1.2", "code": "package inbound;\n\npublic class KafkaErrorSendingMessageRecoverer extends org.springframework.integration.core.ErrorMessagePublisher implements org.springframework.kafka.listener.ConsumerRecordRecoverer; // An extension of ErrorMessagePublisher that can be used in a CommonErrorHandler for recovering Kafka delivery failures.\npublic interface KafkaInboundEndpoint; // Implementations of this interface will generally support a retry template for retrying incoming deliveries and this supports adding common attributes to the retry context.\npublic class KafkaInboundGateway<K,V,R> extends org.springframework.integration.gateway.MessagingGatewaySupport implements KafkaInboundEndpoint, org.springframework.integration.core.Pausable, org.springframework.integration.context.OrderlyShutdownCapable; // Inbound gateway.\npublic class KafkaMessageDrivenChannelAdapter<K,V> extends org.springframework.integration.endpoint.MessageProducerSupport implements KafkaInboundEndpoint, org.springframework.integration.context.OrderlyShutdownCapable, org.springframework.integration.core.Pausable; // Message-driven channel adapter.\npublic static enum KafkaMessageDrivenChannelAdapter.ListenerMode extends Enum<KafkaMessageDrivenChannelAdapter.ListenerMode>; // The listener mode for the container, record or batch.\npublic class KafkaMessageSource<K,V> extends org.springframework.integration.endpoint.AbstractMessageSource<Object> implements org.springframework.integration.core.Pausable; // Polled message source for Apache Kafka.\npublic static class KafkaMessageSource.KafkaAckCallback<K,V> extends Object implements org.springframework.integration.acks.AcknowledgmentCallback, org.springframework.kafka.support.Acknowledgment; // AcknowledgmentCallback for Kafka.\npublic static record KafkaMessageSource.KafkaAckCallbackFactory<K,V>(org.springframework.kafka.listener.ConsumerProperties consumerProperties) extends Record implements org.springframework.integration.acks.AcknowledgmentCallbackFactory<KafkaMessageSource.KafkaAckInfo<K,V>>; // AcknowledgmentCallbackFactory for KafkaAckInfo.\n", "des": "Provides Spring Integration inbound components for Apache Kafka."}
{"index": 1350, "repo": "spring-integration-kafka-6.1.2", "code": "package outbound;\n\npublic class KafkaProducerMessageHandler<K,V> extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements org.springframework.integration.support.management.ManageableLifecycle; // A Message Handler for Apache Kafka; when supplied with a ReplyingKafkaTemplate it is used as the handler in an outbound gateway.\n@FunctionalInterface public static interface KafkaProducerMessageHandler.ProducerRecordCreator<K,V>; // Creates a ProducerRecord from a Message and/or properties derived from configuration and/or the message.\n", "des": "Provides Spring Integration outbound components for Apache Kafka."}
{"index": 1351, "repo": "spring-integration-kafka-6.1.2", "code": "package support;\n\npublic final class KafkaIntegrationHeaders extends Object; // Headers specifically for Spring Integration components.\npublic class KafkaSendFailureException extends org.springframework.messaging.MessagingException; // An exception that is the payload of an ErrorMessage when a send fails.\npublic class RawRecordHeaderErrorMessageStrategy extends Object implements org.springframework.integration.support.ErrorMessageStrategy; // ErrorMessageStrategy extension that adds the raw record as a header to the ErrorMessage.\n", "des": "Provides support classes."}
{"index": 1352, "repo": "spring-integration-stream-6.1.2", "code": "package stream;\n\npackage stream.config; // Provides classes for configuration - parsers, namespace handlers.\npublic class ByteStreamReadingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<byte[]>; // A pollable source for receiving bytes from an InputStream.\npublic class ByteStreamWritingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler; // A MessageHandler that writes a byte array to an OutputStream.\npublic class CharacterStreamReadingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<String> implements org.springframework.context.ApplicationEventPublisherAware; // A pollable source for Readers.\npublic class CharacterStreamWritingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler; // A MessageHandler that writes characters to a Writer.\npublic class StreamClosedEvent extends org.springframework.integration.events.IntegrationEvent; // Application event published when EOF is detected on a stream.\n", "des": "Base package for stream support."}
{"index": 1353, "repo": "spring-integration-stream-6.1.2", "code": "package config;\n\npublic class ConsoleInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Parser for the <stdin-channel-adapter> element.\npublic class ConsoleOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the \"stdout-\" and \"stderr-channel-adapter\" elements.\npublic class StreamNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler;\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 1354, "repo": "spring-tx-6.0.11", "code": "package dao;\n\npackage dao.annotation; // Annotation support for DAOs.\npackage dao.support; // Support classes for DAO implementations, providing miscellaneous utility methods.\npublic class CannotAcquireLockException extends PessimisticLockingFailureException; // Exception thrown on failure to acquire a lock during an update, for example during a \"select for update\" statement.\n@Deprecated(since=\"6.0.3\") public class CannotSerializeTransactionException extends PessimisticLockingFailureException;\n@Deprecated(since=\"6.0.3\") public class CleanupFailureDataAccessException extends NonTransientDataAccessException;\npublic class ConcurrencyFailureException extends TransientDataAccessException; // Exception thrown on various data access concurrency failures.\npublic abstract class DataAccessException extends org.springframework.core.NestedRuntimeException; // Root of the hierarchy of data access exceptions discussed in Expert One-On-One J2EE Design and Development.\npublic class DataAccessResourceFailureException extends NonTransientDataAccessResourceException; // Data access exception thrown when a resource fails completely: for example, if we can't connect to a database using JDBC.\npublic class DataIntegrityViolationException extends NonTransientDataAccessException; // Exception thrown when an attempt to insert or update data results in violation of an integrity constraint.\npublic class DataRetrievalFailureException extends NonTransientDataAccessException; // Exception thrown if certain expected data could not be retrieved, e.g.\n@Deprecated(since=\"6.0.3\") public class DeadlockLoserDataAccessException extends PessimisticLockingFailureException;\npublic class DuplicateKeyException extends DataIntegrityViolationException; // Exception thrown when an attempt to insert or update data results in violation of a primary key or unique constraint.\npublic class EmptyResultDataAccessException extends IncorrectResultSizeDataAccessException; // Data access exception thrown when a result was expected to have at least one row (or element) but zero rows (or elements) were actually returned.\npublic class IncorrectResultSizeDataAccessException extends DataRetrievalFailureException; // Data access exception thrown when a result was not of the expected size, for example when expecting a single row but getting 0 or more than 1 rows.\npublic class IncorrectUpdateSemanticsDataAccessException extends InvalidDataAccessResourceUsageException; // Data access exception thrown when something unintended appears to have happened with an update, but the transaction hasn't already been rolled back.\n", "des": "Exception hierarchy enabling sophisticated error handling independent of the data access approach in use."}
{"index": 1355, "repo": "spring-tx-6.0.11", "code": "package annotation;\n\npublic class PersistenceExceptionTranslationAdvisor extends org.springframework.aop.support.AbstractPointcutAdvisor; // Spring AOP exception translation aspect for use at Repository or DAO layer level.\npublic class PersistenceExceptionTranslationPostProcessor extends org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor; // Bean post-processor that automatically applies persistence exception translation to any bean marked with Spring's @Repository annotation, adding a corresponding PersistenceExceptionTranslationAdvisor to the exposed proxy (either an existing AOP proxy or a newly generated proxy that implements all of the target's interfaces).\n", "des": "Annotation support for DAOs."}
{"index": 1356, "repo": "spring-tx-6.0.11", "code": "package support;\n\npublic class ChainedPersistenceExceptionTranslator extends Object implements PersistenceExceptionTranslator; // Implementation of PersistenceExceptionTranslator that supports chaining, allowing the addition of PersistenceExceptionTranslator instances in order.\npublic abstract class DaoSupport extends Object implements org.springframework.beans.factory.InitializingBean; // Generic base class for DAOs, defining template methods for DAO initialization.\npublic abstract class DataAccessUtils extends Object; // Miscellaneous utility methods for DAO implementations.\npublic class PersistenceExceptionTranslationInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // AOP Alliance MethodInterceptor that provides persistence exception translation based on a given PersistenceExceptionTranslator.\n@FunctionalInterface public interface PersistenceExceptionTranslator; // Interface implemented by Spring integrations with data access technologies that throw runtime exceptions, such as JPA and Hibernate.\n", "des": "Support classes for DAO implementations, providing miscellaneous utility methods."}
{"index": 1357, "repo": "spring-tx-6.0.11", "code": "package endpoint;\n\npublic abstract class AbstractMessageEndpointFactory extends Object implements MessageEndpointFactory, org.springframework.beans.factory.BeanNameAware; // Abstract base implementation of the JCA 1.7 MessageEndpointFactory interface, providing transaction management capabilities as well as ClassLoader exposure for endpoint invocations.\npublic class GenericMessageEndpointFactory extends AbstractMessageEndpointFactory; // Generic implementation of the JCA 1.7 MessageEndpointFactory interface, providing transaction management capabilities for any kind of message listener object (e.g.\npublic static class GenericMessageEndpointFactory.InternalResourceException extends RuntimeException; // Internal exception thrown when a ResourceException has been encountered during the endpoint invocation.\npublic class GenericMessageEndpointManager extends Object implements org.springframework.context.SmartLifecycle, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Generic bean that manages JCA 1.7 message endpoints within a Spring application context, activating and deactivating the endpoint as part of the application context's lifecycle.\n", "des": "This package provides a facility for generic JCA message endpoint management."}
{"index": 1358, "repo": "spring-tx-6.0.11", "code": "package support;\n\npublic class LocalConnectionFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.InitializingBean; // FactoryBean that creates a local JCA connection factory in \"non-managed\" mode (as defined by the Java Connector Architecture specification).\npublic class ResourceAdapterFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ResourceAdapter>, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // FactoryBean that bootstraps the specified JCA 1.7 ResourceAdapter, starting it with a local BootstrapContext and exposing it for bean references.\npublic class SimpleBootstrapContext extends Object implements BootstrapContext; // Simple implementation of the JCA 1.7 BootstrapContext interface, used for bootstrapping a JCA ResourceAdapter in a local environment.\n", "des": "Provides generic support classes for JCA usage within Spring, mainly for local setup of a JCA ResourceAdapter and/or ConnectionFactory."}
{"index": 1359, "repo": "spring-tx-6.0.11", "code": "package transaction;\n\npackage transaction.annotation; // Spring's support for annotation-based transaction demarcation.\npackage transaction.config; // Support package for declarative transaction configuration, with XML schema being the primary configuration format.\npackage transaction.event; // Spring's support for listening to transaction events.\npackage transaction.interceptor; // AOP-based solution for declarative transaction demarcation.\npackage transaction.jta; // Transaction SPI implementation for JTA.\npackage transaction.reactive; // Support classes for reactive transaction management.\npackage transaction.support; // Support classes for the org.springframework.transaction package.\npublic class CannotCreateTransactionException extends TransactionException; // Exception thrown when a transaction can't be created using an underlying transaction API such as JTA.\npublic class HeuristicCompletionException extends TransactionException; // Exception that represents a transaction failure caused by a heuristic decision on the side of the transaction coordinator.\npublic class IllegalTransactionStateException extends TransactionUsageException; // Exception thrown when the existence or non-existence of a transaction amounts to an illegal state according to the transaction propagation behavior that applies.\npublic class InvalidIsolationLevelException extends TransactionUsageException; // Exception that gets thrown when an invalid isolation level is specified, i.e.\npublic class InvalidTimeoutException extends TransactionUsageException; // Exception that gets thrown when an invalid timeout is specified, that is, the specified timeout valid is out of range or the transaction manager implementation doesn't support timeouts.\npublic class NestedTransactionNotSupportedException extends CannotCreateTransactionException; // Exception thrown when attempting to work with a nested transaction but nested transactions are not supported by the underlying backend.\npublic class NoTransactionException extends TransactionUsageException; // Exception thrown when an operation is attempted that relies on an existing transaction (such as setting rollback status) and there is no existing transaction.\npublic interface PlatformTransactionManager extends TransactionManager; // This is the central interface in Spring's imperative transaction infrastructure.\npublic interface ReactiveTransaction extends TransactionExecution; // Representation of an ongoing reactive transaction.\npublic interface ReactiveTransactionManager extends TransactionManager; // This is the central interface in Spring's reactive transaction infrastructure.\npublic interface SavepointManager; // Interface that specifies an API to programmatically manage transaction savepoints in a generic fashion.\npublic interface TransactionDefinition; // Interface that defines Spring-compliant transaction properties.\n", "des": "Spring's core transaction management APIs (independent of any specific transaction management system); an exception hierarchy for Spring's transaction infrastructure; and transaction manager, definition, and status interfaces."}
{"index": 1360, "repo": "spring-tx-6.0.11", "code": "package annotation;\n\n@Configuration public abstract class AbstractTransactionManagementConfiguration extends Object implements org.springframework.context.annotation.ImportAware; // Abstract base @Configuration class providing common structure for enabling Spring's annotation-driven transaction management capability.\npublic class AnnotationTransactionAttributeSource extends AbstractFallbackTransactionAttributeSource implements Serializable; // Implementation of the TransactionAttributeSource interface for working with transaction metadata in JDK 1.5+ annotation format.\npublic class Ejb3TransactionAnnotationParser extends Object implements TransactionAnnotationParser, Serializable; // Strategy implementation for parsing EJB3's TransactionAttribute annotation.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(TransactionManagementConfigurationSelector.class) public @interface EnableTransactionManagement; // Enables Spring's annotation-driven transaction management capability, similar to the support found in Spring's <tx:*> XML namespace.\npublic enum Isolation extends Enum<Isolation>; // Enumeration that represents transaction isolation levels for use with the @Transactional annotation, corresponding to the TransactionDefinition interface.\npublic class JtaTransactionAnnotationParser extends Object implements TransactionAnnotationParser, Serializable; // Strategy implementation for parsing JTA 1.2's Transactional annotation.\npublic enum Propagation extends Enum<Propagation>; // Enumeration that represents transaction propagation behaviors for use with the Transactional annotation, corresponding to the TransactionDefinition interface.\n@Configuration(proxyBeanMethods=false) @Role(2) @ImportRuntimeHints(org.springframework.transaction.annotation.TransactionRuntimeHints.class) public class ProxyTransactionManagementConfiguration extends AbstractTransactionManagementConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable proxy-based annotation-driven transaction management.\npublic class SpringTransactionAnnotationParser extends Object implements TransactionAnnotationParser, Serializable; // Strategy implementation for parsing Spring's Transactional annotation.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Inherited @Documented @Reflective public @interface Transactional; // Describes a transaction attribute on an individual method or on a class.\npublic interface TransactionAnnotationParser; // Strategy interface for parsing known transaction annotation types.\npublic class TransactionManagementConfigurationSelector extends org.springframework.context.annotation.AdviceModeImportSelector<EnableTransactionManagement>; // Selects which implementation of AbstractTransactionManagementConfiguration should be used based on the value of EnableTransactionManagement.mode() on the importing @Configuration class.\n", "des": "Spring's support for annotation-based transaction demarcation."}
{"index": 1361, "repo": "spring-tx-6.0.11", "code": "package config;\n\npublic class JtaTransactionManagerBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the <tx:jta-transaction-manager/> XML configuration element.\n@Deprecated(since=\"6.0\") public class JtaTransactionManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JtaTransactionManager>, org.springframework.beans.factory.InitializingBean;\npublic abstract class TransactionManagementConfigUtils extends Object; // Configuration constants for internal sharing across subpackages.\npublic class TxNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler allowing for the configuration of declarative transaction management using either XML or using annotations.\n", "des": "Support package for declarative transaction configuration, with XML schema being the primary configuration format."}
{"index": 1362, "repo": "spring-tx-6.0.11", "code": "package event;\n\npublic interface TransactionalApplicationListener<E extends org.springframework.context.ApplicationEvent> extends org.springframework.context.ApplicationListener<E>, org.springframework.core.Ordered; // An ApplicationListener that is invoked according to a TransactionPhase.\npublic static interface TransactionalApplicationListener.SynchronizationCallback; // Callback to be invoked on synchronization-driven event processing, wrapping the target listener invocation (TransactionalApplicationListener.processEvent(E)).\npublic class TransactionalApplicationListenerAdapter<E extends org.springframework.context.ApplicationEvent> extends Object implements TransactionalApplicationListener<E>, org.springframework.core.Ordered; // TransactionalApplicationListener adapter that delegates the processing of an event to a target ApplicationListener instance.\npublic class TransactionalApplicationListenerMethodAdapter extends org.springframework.context.event.ApplicationListenerMethodAdapter implements TransactionalApplicationListener<org.springframework.context.ApplicationEvent>; // GenericApplicationListener adapter that delegates the processing of an event to a TransactionalEventListener annotated method.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @EventListener public @interface TransactionalEventListener; // An EventListener that is invoked according to a TransactionPhase.\npublic class TransactionalEventListenerFactory extends Object implements org.springframework.context.event.EventListenerFactory, org.springframework.core.Ordered; // EventListenerFactory implementation that handles TransactionalEventListener annotated methods.\npublic enum TransactionPhase extends Enum<TransactionPhase>; // The phase in which a transactional event listener applies.\n", "des": "Spring's support for listening to transaction events."}
{"index": 1363, "repo": "spring-tx-6.0.11", "code": "package interceptor;\n\npublic abstract class AbstractFallbackTransactionAttributeSource extends Object implements TransactionAttributeSource, org.springframework.context.EmbeddedValueResolverAware; // Abstract implementation of TransactionAttributeSource that caches attributes for methods and implements a fallback policy: 1.\npublic class BeanFactoryTransactionAttributeSourceAdvisor extends org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor; // Advisor driven by a TransactionAttributeSource, used to include a transaction advice bean for methods that are transactional.\npublic class CompositeTransactionAttributeSource extends Object implements TransactionAttributeSource, Serializable; // Composite TransactionAttributeSource implementation that iterates over a given array of TransactionAttributeSource instances.\npublic class DefaultTransactionAttribute extends DefaultTransactionDefinition implements TransactionAttribute; // Spring's common transaction attribute implementation.\npublic abstract class DelegatingTransactionAttribute extends DelegatingTransactionDefinition implements TransactionAttribute, Serializable; // TransactionAttribute implementation that delegates all calls to a given target TransactionAttribute instance.\npublic class MatchAlwaysTransactionAttributeSource extends Object implements TransactionAttributeSource, Serializable; // Very simple implementation of TransactionAttributeSource which will always return the same TransactionAttribute for all methods fed to it.\npublic class MethodMapTransactionAttributeSource extends Object implements TransactionAttributeSource, org.springframework.context.EmbeddedValueResolverAware, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Simple TransactionAttributeSource implementation that allows attributes to be stored per method in a Map.\npublic class NameMatchTransactionAttributeSource extends Object implements TransactionAttributeSource, org.springframework.context.EmbeddedValueResolverAware, org.springframework.beans.factory.InitializingBean, Serializable; // Simple TransactionAttributeSource implementation that allows attributes to be matched by registered name.\npublic class NoRollbackRuleAttribute extends RollbackRuleAttribute; // Tag subclass of RollbackRuleAttribute that has the opposite behavior to the RollbackRuleAttribute superclass.\npublic class RollbackRuleAttribute extends Object implements Serializable; // Rule determining whether a given exception should cause a rollback.\npublic class RuleBasedTransactionAttribute extends DefaultTransactionAttribute implements Serializable; // TransactionAttribute implementation that works out whether a given exception should cause transaction rollback by applying a number of rollback rules, both positive and negative.\npublic interface TransactionalProxy extends org.springframework.aop.SpringProxy; // A marker interface for manually created transactional proxies.\n", "des": "AOP-based solution for declarative transaction demarcation."}
{"index": 1364, "repo": "spring-tx-6.0.11", "code": "package jta;\n\npublic class JtaAfterCompletionSynchronization extends Object implements Synchronization; // Adapter for a JTA Synchronization, invoking the afterCommit / afterCompletion callbacks of Spring TransactionSynchronization objects callbacks after the outer JTA transaction has completed.\npublic class JtaTransactionManager extends AbstractPlatformTransactionManager implements TransactionFactory, org.springframework.beans.factory.InitializingBean, Serializable; // PlatformTransactionManager implementation for JTA, delegating to a backend JTA provider.\npublic class JtaTransactionObject extends Object implements SmartTransactionObject; // JTA transaction object, representing a UserTransaction.\npublic class ManagedTransactionAdapter extends Object implements Transaction; // Adapter for a managed JTA Transaction handle, taking a JTA TransactionManager reference and creating a JTA Transaction handle for it.\npublic class SimpleTransactionFactory extends Object implements TransactionFactory; // Default implementation of the TransactionFactory strategy interface, simply wrapping a standard JTA TransactionManager.\npublic class SpringJtaSynchronizationAdapter extends Object implements Synchronization; // Adapter that implements the JTA Synchronization interface delegating to an underlying Spring TransactionSynchronization.\npublic interface TransactionFactory; // Strategy interface for creating JTA Transaction objects based on specified transactional characteristics.\npublic class UserTransactionAdapter extends Object implements UserTransaction; // Adapter for a JTA UserTransaction handle, taking a JTA TransactionManager reference and creating a JTA UserTransaction handle for it.\n", "des": "Transaction SPI implementation for JTA."}
{"index": 1365, "repo": "spring-tx-6.0.11", "code": "package reactive;\n\npublic abstract class AbstractReactiveTransactionManager extends Object implements ReactiveTransactionManager, Serializable; // Abstract base class that implements Spring's standard reactive transaction workflow, serving as basis for concrete platform transaction managers.\nprotected static final class AbstractReactiveTransactionManager.SuspendedResourcesHolder extends Object; // Holder for suspended resources.\npublic class GenericReactiveTransaction extends Object implements ReactiveTransaction; // Default implementation of the ReactiveTransaction interface, used by AbstractReactiveTransactionManager.\npublic abstract class ReactiveResourceSynchronization<O,K> extends Object implements TransactionSynchronization; // TransactionSynchronization implementation that manages a resource object bound through TransactionSynchronizationManager.\npublic interface TransactionalOperator; // Operator class that simplifies programmatic transaction demarcation and transaction exception handling.\n@FunctionalInterface public interface TransactionCallback<T>; // Callback interface for reactive transactional code.\npublic class TransactionContext extends Object; // Mutable transaction context that encapsulates transactional synchronizations and resources in the scope of a single transaction.\npublic abstract class TransactionContextManager extends Object; // Delegate to register and obtain transactional contexts.\npublic interface TransactionSynchronization; // Interface for reactive transaction synchronization callbacks.\npublic class TransactionSynchronizationManager extends Object; // Central delegate that manages resources and transaction synchronizations per subscriber context.\n", "des": "Support classes for reactive transaction management."}
{"index": 1366, "repo": "spring-tx-6.0.11", "code": "package support;\n\npublic abstract class AbstractPlatformTransactionManager extends Object implements PlatformTransactionManager, Serializable; // Abstract base class that implements Spring's standard transaction workflow, serving as basis for concrete platform transaction managers like JtaTransactionManager.\nprotected static final class AbstractPlatformTransactionManager.SuspendedResourcesHolder extends Object; // Holder for suspended resources.\npublic abstract class AbstractTransactionStatus extends Object implements TransactionStatus; // Abstract base implementation of the TransactionStatus interface.\npublic interface CallbackPreferringPlatformTransactionManager extends PlatformTransactionManager; // Extension of the PlatformTransactionManager interface, exposing a method for executing a given callback within a transaction.\npublic class DefaultTransactionDefinition extends Object implements TransactionDefinition, Serializable; // Default implementation of the TransactionDefinition interface, offering bean-style configuration and sensible default values (PROPAGATION_REQUIRED, ISOLATION_DEFAULT, TIMEOUT_DEFAULT, readOnly=false).\npublic class DefaultTransactionStatus extends AbstractTransactionStatus; // Default implementation of the TransactionStatus interface, used by AbstractPlatformTransactionManager.\npublic abstract class DelegatingTransactionDefinition extends Object implements TransactionDefinition, Serializable; // TransactionDefinition implementation that delegates all calls to a given target TransactionDefinition instance.\npublic interface ResourceHolder; // Generic interface to be implemented by resource holders.\npublic abstract class ResourceHolderSupport extends Object implements ResourceHolder; // Convenient base class for resource holders.\npublic abstract class ResourceHolderSynchronization<H extends ResourceHolder,K> extends Object implements TransactionSynchronization; // TransactionSynchronization implementation that manages a ResourceHolder bound through TransactionSynchronizationManager.\npublic interface ResourceTransactionDefinition extends TransactionDefinition; // Extended variant of TransactionDefinition, indicating a resource transaction and in particular whether the transactional resource is ready for local optimizations.\npublic interface ResourceTransactionManager extends PlatformTransactionManager; // Extension of the PlatformTransactionManager interface, indicating a native resource transaction manager, operating on a single target resource.\npublic class SimpleTransactionScope extends Object implements org.springframework.beans.factory.config.Scope; // A simple transaction-backed Scope implementation, delegating to TransactionSynchronizationManager's resource binding mechanism.\npublic class SimpleTransactionStatus extends AbstractTransactionStatus; // A simple TransactionStatus implementation.\npublic interface SmartTransactionObject extends Flushable; // Interface to be implemented by transaction objects that are able to return an internal rollback-only marker, typically from another transaction that has participated and marked it as rollback-only.\n", "des": "Support classes for the org.springframework.transaction package."}
{"index": 1367, "repo": "wicket-devutils-10.0.0-M1", "code": "package inspector;\n\npublic final class ApplicationView extends DevUtilsPanel; // A Wicket panel that shows interesting information about a given Wicket session.\npublic final class EnhancedPageView extends org.apache.wicket.markup.html.panel.GenericPanel<org.apache.wicket.Page>; // Enhanced PageView which displays all Components and Behaviors of a Page in a TableTree representation.\npublic final class InspectorPage extends DevUtilsPage; // A page that shows interesting attributes of the Wicket environment, including the current session and the component tree for the current page.\npublic class LiveSessionsPage extends DevUtilsPage;\npublic class RenderPerformanceListener extends Object implements org.apache.wicket.application.IComponentInstantiationListener; // A listener that adds a special Behavior that measures the time needed by a component to render itself.\npublic class RequestsPage extends DevUtilsPage;\npublic class SessionSizeModel extends Object implements org.apache.wicket.model.IModel<org.apache.wicket.util.lang.Bytes>; // Calculates\npublic final class SessionView extends DevUtilsPanel; // A Wicket panel that shows interesting information about a given Wicket session.\n", "des": "Classes that make debugging Wicket HTML applications easier."}
{"index": 1368, "repo": "log4j-over-slf4j-2.0.7", "code": "package log4j;\n\npublic interface Appender; // Implement this interface for your own strategies for outputting log statements.\npublic class AppenderSkeleton extends Object implements OptionHandler;\npublic class BasicConfigurator extends Object; // A minimal (nop) implementation of BasicConfigurator.\npublic class Category extends Object; // This class is a minimal implementation of the original org.apache.log4j.Category class (as found in log4j 1.2) by delegation of all calls to a Logger instance.\npublic class ConsoleAppender extends WriterAppender; // Skeleton implementation of ConsoleAppender\npublic class FileAppender extends WriterAppender;\npublic class Layout extends Object; // This class is a minimal implementation of the original Log4J class.\npublic class Level extends Priority implements Serializable; // Defines the minimum set of levels recognized by the system, that is OFF, FATAL, ERROR, WARN, INFO, DEBUG and ALL.\npublic class Logger extends Category; // This class is a minimal implementation of the original org.apache.log4j.Logger class (as found in log4j 1.2) delegating all calls to a Logger instance.\npublic class LogManager extends Object; // This class is a minimal implementation of the original org.apache.log4j.LogManager class (as found in log4j 1.2) delegating all calls to SLF4J.\npublic class MDC extends Object;\npublic class NDC extends Object; // A log4j's NDC implemented in terms of SLF4J MDC primitives.\npublic class PatternLayout extends Layout; // This class is a minimal implementation of the original Log4J class.\npublic class Priority extends Object; // Refrain from using this class directly, use the Level class instead.\npublic class PropertyConfigurator extends Object implements Configurator; // A no-op implementation of PropertyConfigurator.\npublic class RollingFileAppender extends Object; // This class is a minimal implementation of the original Log4J class.\npublic class SimpleLayout extends Layout;\npublic class WriterAppender extends AppenderSkeleton;\n", "des": "An rather minimal but sufficient implementation redirecting all calls to a log4j logger to a logback logger."}
{"index": 1369, "repo": "spring-boot-actuator-3.1.1", "code": "package amqp;\n\npublic class RabbitHealthIndicator extends AbstractHealthIndicator; // Simple implementation of a HealthIndicator returning status information for the RabbitMQ messaging system.\n", "des": "Actuator support for AMQP and RabbitMQ."}
{"index": 1370, "repo": "spring-boot-actuator-3.1.1", "code": "package audit;\n\npackage audit.listener; // Actuator auditing listeners.\npublic class AuditEvent extends Object implements Serializable; // A value object representing an audit event: at a particular time, a particular user or agent carried out an action of a particular type.\npublic interface AuditEventRepository; // Repository for AuditEvents.\n@Endpoint(id=\"auditevents\") public class AuditEventsEndpoint extends Object; // @Endpoint to expose audit events.\npublic static final class AuditEventsEndpoint.AuditEventsDescriptor extends Object implements OperationResponseBody; // Description of an application's audit events.\npublic class InMemoryAuditEventRepository extends Object implements AuditEventRepository; // In-memory AuditEventRepository implementation.\n", "des": "Core actuator auditing classes."}
{"index": 1371, "repo": "spring-boot-actuator-3.1.1", "code": "package listener;\n\npublic abstract class AbstractAuditListener extends Object implements org.springframework.context.ApplicationListener<AuditApplicationEvent>; // Abstract ApplicationListener to handle AuditApplicationEvents.\npublic class AuditApplicationEvent extends org.springframework.context.ApplicationEvent; // Spring ApplicationEvent to encapsulate AuditEvents.\npublic class AuditListener extends AbstractAuditListener; // The default AbstractAuditListener implementation.\n", "des": "Actuator auditing listeners."}
{"index": 1372, "repo": "spring-boot-actuator-3.1.1", "code": "package availability;\n\npublic class AvailabilityStateHealthIndicator extends AbstractHealthIndicator; // A HealthIndicator that checks a specific AvailabilityState of the application.\npublic static interface AvailabilityStateHealthIndicator.StatusMappings<S extends org.springframework.boot.availability.AvailabilityState>; // Callback used to add status mappings.\npublic class LivenessStateHealthIndicator extends AvailabilityStateHealthIndicator; // A HealthIndicator that checks the LivenessState of the application.\npublic class ReadinessStateHealthIndicator extends AvailabilityStateHealthIndicator; // A HealthIndicator that checks the ReadinessState of the application.\n", "des": "Actuator support for application availability concerns."}
{"index": 1373, "repo": "spring-boot-actuator-3.1.1", "code": "package beans;\n\n@Endpoint(id=\"beans\") public class BeansEndpoint extends Object; // @Endpoint to expose details of an application's beans, grouped by application context.\npublic static final class BeansEndpoint.BeanDescriptor extends Object; // Description of a bean.\npublic static final class BeansEndpoint.BeansDescriptor extends Object implements OperationResponseBody; // Description of an application's beans.\npublic static final class BeansEndpoint.ContextBeansDescriptor extends Object; // Description of an application context beans.\n", "des": "Actuator support relating to Spring Beans."}
{"index": 1374, "repo": "spring-boot-actuator-3.1.1", "code": "package cache;\n\n@Endpoint(id=\"caches\") public class CachesEndpoint extends Object; // @Endpoint to expose available caches.\npublic static class CachesEndpoint.CacheDescriptor extends Object implements OperationResponseBody; // Description of a Cache.\npublic static final class CachesEndpoint.CacheEntryDescriptor extends CachesEndpoint.CacheDescriptor; // Description of a Cache entry.\npublic static final class CachesEndpoint.CacheManagerDescriptor extends Object; // Description of a CacheManager.\npublic static final class CachesEndpoint.CachesDescriptor extends Object implements OperationResponseBody; // Description of the caches.\n@EndpointWebExtension(endpoint=CachesEndpoint.class) public class CachesEndpointWebExtension extends Object; // @EndpointWebExtension for the CachesEndpoint.\npublic class NonUniqueCacheException extends RuntimeException; // Exception thrown when multiple caches exist with the same name.\n", "des": "Actuator support for caches."}
{"index": 1375, "repo": "spring-boot-actuator-3.1.1", "code": "package cassandra;\n\npublic class CassandraDriverHealthIndicator extends AbstractHealthIndicator; // Simple implementation of a HealthIndicator returning status information for Cassandra data stores.\npublic class CassandraDriverReactiveHealthIndicator extends AbstractReactiveHealthIndicator; // Simple implementation of a ReactiveHealthIndicator returning status information for Cassandra data stores.\n", "des": "Actuator support for Cassandra."}
{"index": 1376, "repo": "spring-boot-actuator-3.1.1", "code": "package context;\n\npackage context.properties; // Actuator support relating to external configuration properties.\n@Endpoint(id=\"shutdown\", enableByDefault=false) public class ShutdownEndpoint extends Object implements org.springframework.context.ApplicationContextAware; // @Endpoint to shutdown the ApplicationContext.\npublic static class ShutdownEndpoint.ShutdownDescriptor extends Object implements OperationResponseBody; // Description of the shutdown.\n", "des": "Actuator support relating to Spring Context."}
{"index": 1377, "repo": "spring-boot-actuator-3.1.1", "code": "package properties;\n\n@Endpoint(id=\"configprops\") public class ConfigurationPropertiesReportEndpoint extends Object implements org.springframework.context.ApplicationContextAware; // @Endpoint to expose application properties from @ConfigurationProperties annotated beans.\npublic static final class ConfigurationPropertiesReportEndpoint.ConfigurationPropertiesBeanDescriptor extends Object; // Description of a @ConfigurationProperties bean.\npublic static final class ConfigurationPropertiesReportEndpoint.ConfigurationPropertiesDescriptor extends Object implements OperationResponseBody; // Description of an application's @ConfigurationProperties beans.\npublic static final class ConfigurationPropertiesReportEndpoint.ContextConfigurationPropertiesDescriptor extends Object; // Description of an application context's @ConfigurationProperties beans.\nprotected static class ConfigurationPropertiesReportEndpoint.GenericSerializerModifier extends com.fasterxml.jackson.databind.ser.BeanSerializerModifier; // BeanSerializerModifier to return only relevant configuration properties.\n@EndpointWebExtension(endpoint=ConfigurationPropertiesReportEndpoint.class) public class ConfigurationPropertiesReportEndpointWebExtension extends Object; // @EndpointWebExtension for the ConfigurationPropertiesReportEndpoint.\n", "des": "Actuator support relating to external configuration properties."}
{"index": 1378, "repo": "spring-boot-actuator-3.1.1", "code": "package couchbase;\n\npublic class CouchbaseHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for Couchbase.\npublic class CouchbaseReactiveHealthIndicator extends AbstractReactiveHealthIndicator; // A ReactiveHealthIndicator for Couchbase.\n", "des": "Actuator support for Couchbase."}
{"index": 1379, "repo": "spring-boot-actuator-3.1.1", "code": "package elasticsearch;\n\npublic class ElasticsearchReactiveHealthIndicator extends AbstractReactiveHealthIndicator; // HealthIndicator for an Elasticsearch cluster using a ReactiveElasticsearchClient.\n", "des": "Actuator support for Elasticsearch dependent on Spring Data."}
{"index": 1380, "repo": "spring-boot-actuator-3.1.1", "code": "package mongo;\n\npublic class MongoHealthIndicator extends AbstractHealthIndicator; // Simple implementation of a HealthIndicator returning status information for Mongo data stores.\npublic class MongoReactiveHealthIndicator extends AbstractReactiveHealthIndicator; // A ReactiveHealthIndicator for Mongo.\n", "des": "Actuator support for Mongo dependent on Spring Data."}
{"index": 1381, "repo": "spring-boot-actuator-3.1.1", "code": "package redis;\n\npublic class RedisHealthIndicator extends AbstractHealthIndicator; // Simple implementation of a HealthIndicator returning status information for Redis data stores.\npublic class RedisReactiveHealthIndicator extends AbstractReactiveHealthIndicator; // A ReactiveHealthIndicator for Redis.\n", "des": "Actuator support for Redis dependent on Spring Data."}
{"index": 1382, "repo": "spring-boot-actuator-3.1.1", "code": "package elasticsearch;\n\npublic class ElasticsearchRestClientHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for an Elasticsearch cluster using a RestClient.\n", "des": "Actuator support for Elasticsearch."}
{"index": 1383, "repo": "spring-boot-actuator-3.1.1", "code": "package endpoint;\n\npackage endpoint.annotation; // Annotation support for actuator endpoints.\npackage endpoint.invoke; // Interfaces and classes relating to invoking operation methods.\npackage endpoint.jackson; // Jackson support classes for actuator endpoints.\npackage endpoint.jmx; // JMX support for actuator endpoints.\npackage endpoint.web; // Web support for actuator endpoints.\npublic abstract class AbstractExposableEndpoint<O extends Operation> extends Object implements ExposableEndpoint<O>; // Abstract base class for ExposableEndpoint implementations.\npublic enum ApiVersion extends Enum<ApiVersion> implements Producible<ApiVersion>; // API versions supported for the actuator API.\n@FunctionalInterface public interface EndpointFilter<E extends ExposableEndpoint<?>>; // Strategy class that can be used to filter endpoints.\npublic final class EndpointId extends Object; // An identifier for an actuator endpoint.\n@FunctionalInterface public interface EndpointsSupplier<E extends ExposableEndpoint<?>>; // Provides access to a collection of endpoints.\npublic interface ExposableEndpoint<O extends Operation>; // Information describing an endpoint that can be exposed in some technology specific way.\npublic class InvalidEndpointRequestException extends RuntimeException; // Indicate that an endpoint request is invalid.\npublic class InvocationContext extends Object; // The context for the invocation of an operation.\npublic interface Operation; // An operation on an endpoint.\npublic interface OperationArgumentResolver; // Resolver for an argument of an Operation.\npublic interface OperationResponseBody; // Tagging interface used to indicate that an operation result is intended to be returned in the body of the response.\npublic enum OperationType extends Enum<OperationType>; // An enumeration of the different types of operation supported by an endpoint.\npublic interface Producible<E extends Enum<E> & Producible<E>>; // Interface that can be implemented by any Enum that represents a finite set of producible mime-types.\npublic class ProducibleOperationArgumentResolver extends Object implements OperationArgumentResolver; // An OperationArgumentResolver for producible enums.\npublic final class SanitizableData extends Object; // Value object that represents the data that can be used by a SanitizingFunction.\npublic class Sanitizer extends Object; // Strategy that should be used by endpoint implementations to sanitize potentially sensitive keys.\n", "des": "Endpoint support."}
{"index": 1384, "repo": "spring-boot-actuator-3.1.1", "code": "package annotation;\n\npublic abstract class AbstractDiscoveredEndpoint<O extends Operation> extends AbstractExposableEndpoint<O> implements DiscoveredEndpoint<O>; // Abstract base class for endpoints discovered by a EndpointDiscoverer.\npublic abstract class AbstractDiscoveredOperation extends Object implements Operation; // Abstract base class for endpoints operations discovered by a EndpointDiscoverer.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Reflective(org.springframework.boot.actuate.endpoint.annotation.OperationReflectiveProcessor.class) public @interface DeleteOperation; // Identifies a method on an @Endpoint as being a delete operation.\npublic interface DiscoveredEndpoint<O extends Operation> extends ExposableEndpoint<O>; // An endpoint discovered by an EndpointDiscoverer.\npublic class DiscoveredOperationMethod extends OperationMethod; // An OperationMethod discovered by an EndpointDiscoverer.\npublic abstract class DiscovererEndpointFilter extends Object implements EndpointFilter<DiscoveredEndpoint<?>>; // EndpointFilter the matches based on the EndpointDiscoverer the created the endpoint.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Reflective public @interface Endpoint; // Identifies a type as being an actuator endpoint that provides information about the running application.\n@Target({FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Qualifier public @interface EndpointConverter; // Qualifier for beans that are needed to convert @Endpoint input parameters.\npublic abstract class EndpointDiscoverer<E extends ExposableEndpoint<O>,O extends Operation> extends Object implements EndpointsSupplier<E>; // A Base for EndpointsSupplier implementations that discover @Endpoint beans and @EndpointExtension beans in an application context.\nprotected static final class EndpointDiscoverer.OperationKey extends Object; // A key generated for an Operation based on specific criteria from the actual operation implementation.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Reflective public @interface EndpointExtension; // Annotation primarily used as a meta-annotation to indicate that an annotation provides extension support for an endpoint.\n@Target(TYPE) @Retention(RUNTIME) @Documented public @interface FilteredEndpoint; // Annotation that can be used on an @Endpoint to implement implicit filtering.\n", "des": "Annotation support for actuator endpoints."}
{"index": 1385, "repo": "spring-boot-actuator-3.1.1", "code": "package invoke;\n\npackage invoke.convert; // Converter support for actuator endpoints.\npackage invoke.reflect; // Endpoint reflection support.\npublic final class MissingParametersException extends InvalidEndpointRequestException; // RuntimeException thrown when an endpoint invocation does not contain required parameters.\n@FunctionalInterface public interface OperationInvoker; // Interface to perform an operation invocation.\n@FunctionalInterface public interface OperationInvokerAdvisor; // Allows additional functionality to be applied to an OperationInvoker.\npublic interface OperationParameter; // A single operation parameter.\npublic interface OperationParameters extends Iterable<OperationParameter>; // A collection of operation parameters.\npublic final class ParameterMappingException extends InvalidEndpointRequestException; // A ParameterMappingException is thrown when a failure occurs during operation parameter mapping.\n@FunctionalInterface public interface ParameterValueMapper; // Maps parameter values to the required type when invoking an endpoint.\n", "des": "Interfaces and classes relating to invoking operation methods."}
{"index": 1386, "repo": "spring-boot-actuator-3.1.1", "code": "package convert;\n\npublic class ConversionServiceParameterValueMapper extends Object implements ParameterValueMapper; // ParameterValueMapper backed by a ConversionService.\npublic class IsoOffsetDateTimeConverter extends Object implements org.springframework.core.convert.converter.Converter<String,OffsetDateTime>; // A String to OffsetDateTime Converter that uses ISO offset parsing.\n", "des": "Converter support for actuator endpoints."}
{"index": 1387, "repo": "spring-boot-actuator-3.1.1", "code": "package reflect;\n\npublic class OperationMethod extends Object; // Information describing an operation method on an endpoint method.\npublic class ReflectiveOperationInvoker extends Object implements OperationInvoker; // An OperationInvoker that invokes an operation using reflection.\n", "des": "Endpoint reflection support."}
{"index": 1388, "repo": "spring-boot-actuator-3.1.1", "code": "package cache;\n\npublic class CachingOperationInvoker extends Object implements OperationInvoker; // An OperationInvoker that caches the response of an operation with a configurable time to live.\npublic class CachingOperationInvokerAdvisor extends Object implements OperationInvokerAdvisor; // OperationInvokerAdvisor to optionally provide result caching support.\n", "des": "Caching support for actuator endpoints."}
{"index": 1389, "repo": "spring-boot-actuator-3.1.1", "code": "package jackson;\n\npublic interface EndpointObjectMapper; // Interface used to supply the ObjectMapper that should be used when serializing OperationResponseBody endpoint results.\n", "des": "Jackson support classes for actuator endpoints."}
{"index": 1390, "repo": "spring-boot-actuator-3.1.1", "code": "package jmx;\n\npackage jmx.annotation; // Annotation support for actuator JMX endpoints.\npublic class EndpointMBean extends Object implements DynamicMBean; // Adapter to expose a JMX endpoint as a DynamicMBean.\n@FunctionalInterface public interface EndpointObjectNameFactory; // A factory to create an ObjectName for an EndpointMBean.\npublic interface ExposableJmxEndpoint extends ExposableEndpoint<JmxOperation>; // Information describing an endpoint that can be exposed over JMX.\npublic class JacksonJmxOperationResponseMapper extends Object implements JmxOperationResponseMapper; // JmxOperationResponseMapper that delegates to a Jackson ObjectMapper to return a JSON response.\npublic class JmxEndpointExporter extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, org.springframework.beans.factory.BeanClassLoaderAware; // Exports JMX endpoints to a MBeanServer.\n@FunctionalInterface public interface JmxEndpointsSupplier extends EndpointsSupplier<ExposableJmxEndpoint>; // EndpointsSupplier for JMX endpoints.\npublic interface JmxOperation extends Operation; // An operation on a JMX endpoint.\npublic interface JmxOperationParameter; // Describes the parameters of an operation on a JMX endpoint.\npublic interface JmxOperationResponseMapper; // Maps an operation's response to a JMX-friendly form.\n", "des": "JMX support for actuator endpoints."}
{"index": 1391, "repo": "spring-boot-actuator-3.1.1", "code": "package annotation;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @EndpointExtension(filter=org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpointFilter.class) public @interface EndpointJmxExtension; // Identifies a type as being a JMX-specific extension of an @Endpoint.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Endpoint @FilteredEndpoint(org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpointFilter.class) public @interface JmxEndpoint; // Identifies a type as being an endpoint that is only exposed over JMX.\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpointDiscoverer.JmxEndpointDiscovererRuntimeHints.class) public class JmxEndpointDiscoverer extends EndpointDiscoverer<ExposableJmxEndpoint,JmxOperation> implements JmxEndpointsSupplier; // EndpointDiscoverer for JMX endpoints.\n", "des": "Annotation support for actuator JMX endpoints."}
{"index": 1392, "repo": "spring-boot-actuator-3.1.1", "code": "package web;\n\npackage web.annotation; // Annotation support for actuator web endpoints.\npackage web.jersey; // Jersey support for actuator endpoints.\npackage web.reactive; // Spring WebFlux support for actuator endpoints.\npackage web.servlet; // Spring MVC support for actuator endpoints.\npublic class EndpointLinksResolver extends Object; // A resolver for links to web endpoints.\npublic class EndpointMapping extends Object; // A value object for the base mapping for endpoints.\npublic class EndpointMediaTypes extends Object; // Media types that are, by default, produced and consumed by an endpoint.\npublic final class EndpointServlet extends Object; // Contains details of a servlet that is exposed as an actuator endpoint.\npublic interface ExposableServletEndpoint extends ExposableEndpoint<Operation>, PathMappedEndpoint; // Information describing an endpoint that can be exposed by registering a servlet.\npublic interface ExposableWebEndpoint extends ExposableEndpoint<WebOperation>, PathMappedEndpoint; // Information describing an endpoint that can be exposed over the web.\npublic class Link extends Object; // Details for a link in a HAL-formatted response.\n@FunctionalInterface public interface PathMappedEndpoint; // Interface that can be implemented by an ExposableEndpoint that is mapped to a root web path.\npublic class PathMappedEndpoints extends Object implements Iterable<PathMappedEndpoint>; // A collection of path mapped endpoints.\n@FunctionalInterface public interface PathMapper; // Strategy interface used to provide a mapping between an endpoint ID and the root path where it will be exposed.\npublic class ServletEndpointRegistrar extends Object implements org.springframework.boot.web.servlet.ServletContextInitializer; // ServletContextInitializer to register servlet endpoints.\npublic enum WebEndpointHttpMethod extends Enum<WebEndpointHttpMethod>; // An enumeration of HTTP methods supported by web endpoint operations.\npublic final class WebEndpointResponse<T> extends Object; // A WebEndpointResponse can be returned by an operation on a @EndpointWebExtension to provide additional, web-specific information such as the HTTP status code.\n@FunctionalInterface public interface WebEndpointsSupplier extends EndpointsSupplier<ExposableWebEndpoint>; // EndpointsSupplier for web endpoints.\npublic interface WebOperation extends Operation; // An operation on a web endpoint.\npublic final class WebOperationRequestPredicate extends Object; // A predicate for a request to an operation on a web endpoint.\n", "des": "Web support for actuator endpoints."}
{"index": 1393, "repo": "spring-boot-actuator-3.1.1", "code": "package annotation;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Endpoint @FilteredEndpoint(org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointFilter.class) public @interface ControllerEndpoint; // Identifies a type as being an endpoint that is only exposed over Spring MVC or Spring WebFlux.\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointDiscoverer.ControllerEndpointDiscovererRuntimeHints.class) public class ControllerEndpointDiscoverer extends EndpointDiscoverer<ExposableControllerEndpoint,Operation> implements ControllerEndpointsSupplier; // EndpointDiscoverer for controller endpoints.\n@FunctionalInterface public interface ControllerEndpointsSupplier extends EndpointsSupplier<ExposableControllerEndpoint>; // EndpointsSupplier for controller endpoints.\n@Target(TYPE) @Retention(RUNTIME) @Documented @EndpointExtension(filter=org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointFilter.class) public @interface EndpointWebExtension; // Identifies a type as being a Web-specific extension of an @Endpoint.\npublic interface ExposableControllerEndpoint extends ExposableEndpoint<Operation>, PathMappedEndpoint; // Information describing an endpoint that can be exposed over Spring MVC or Spring WebFlux.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Endpoint @FilteredEndpoint(org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointFilter.class) @ResponseBody public @interface RestControllerEndpoint; // Identifies a type as being a REST endpoint that is only exposed over Spring MVC or Spring WebFlux.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Endpoint @FilteredEndpoint(org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointFilter.class) public @interface ServletEndpoint; // Identifies a type as being an endpoint that supplies a servlet to expose.\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointDiscoverer.ServletEndpointDiscovererRuntimeHints.class) public class ServletEndpointDiscoverer extends EndpointDiscoverer<ExposableServletEndpoint,Operation> implements ServletEndpointsSupplier; // EndpointDiscoverer for servlet endpoints.\n", "des": "Annotation support for actuator web endpoints."}
{"index": 1394, "repo": "spring-boot-actuator-3.1.1", "code": "package jersey;\n\npublic class JerseyEndpointResourceFactory extends Object; // A factory for creating Jersey Resources for web endpoint operations.\npublic class JerseyHealthEndpointAdditionalPathResourceFactory extends JerseyEndpointResourceFactory; // A factory for creating Jersey Resources for health groups with additional path.\n", "des": "Jersey support for actuator endpoints."}
{"index": 1395, "repo": "spring-boot-actuator-3.1.1", "code": "package reactive;\n\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.reactive.AbstractWebFluxEndpointHandlerMapping.AbstractWebFluxEndpointHandlerMappingRuntimeHints.class) public abstract class AbstractWebFluxEndpointHandlerMapping extends org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping; // A custom HandlerMapping that makes web endpoints available over HTTP using Spring WebFlux.\nprotected static final class AbstractWebFluxEndpointHandlerMapping.ElasticSchedulerInvoker extends Object implements OperationInvoker; // An OperationInvoker that performs the invocation of a blocking operation on a separate thread using Reactor's bounded elastic scheduler.\n@FunctionalInterface protected static interface AbstractWebFluxEndpointHandlerMapping.LinksHandler; // Reactive handler providing actuator links at the root endpoint.\n@FunctionalInterface protected static interface AbstractWebFluxEndpointHandlerMapping.ReactiveWebOperation; // A reactive web operation that can be handled by WebFlux.\npublic class AdditionalHealthEndpointPathsWebFluxHandlerMapping extends AbstractWebFluxEndpointHandlerMapping; // A custom HandlerMapping that allows health groups to be mapped to an additional path.\npublic class ControllerEndpointHandlerMapping extends org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping; // HandlerMapping that exposes @ControllerEndpoint and @RestControllerEndpoint annotated endpoints over Spring WebFlux.\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.WebFluxEndpointHandlerMappingRuntimeHints.class) public class WebFluxEndpointHandlerMapping extends AbstractWebFluxEndpointHandlerMapping implements org.springframework.beans.factory.InitializingBean; // A custom HandlerMapping that makes web endpoints available over HTTP using Spring WebFlux.\n", "des": "Spring WebFlux support for actuator endpoints."}
{"index": 1396, "repo": "spring-boot-actuator-3.1.1", "code": "package servlet;\n\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping.AbstractWebMvcEndpointHandlerMappingRuntimeHints.class) public abstract class AbstractWebMvcEndpointHandlerMapping extends org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping implements org.springframework.beans.factory.InitializingBean; // A custom HandlerMapping that makes web endpoints available over HTTP using Spring MVC.\n@FunctionalInterface protected static interface AbstractWebMvcEndpointHandlerMapping.LinksHandler; // Handler providing actuator links at the root endpoint.\n@FunctionalInterface protected static interface AbstractWebMvcEndpointHandlerMapping.ServletWebOperation; // A servlet web operation that can be handled by Spring MVC.\npublic class AdditionalHealthEndpointPathsWebMvcHandlerMapping extends AbstractWebMvcEndpointHandlerMapping; // A custom HandlerMapping that allows health groups to be mapped to an additional path.\npublic class ControllerEndpointHandlerMapping extends org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping; // HandlerMapping that exposes @ControllerEndpoint and @RestControllerEndpoint annotated endpoints over Spring MVC.\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.servlet.WebMvcEndpointHandlerMapping.WebMvcEndpointHandlerMappingRuntimeHints.class) public class WebMvcEndpointHandlerMapping extends AbstractWebMvcEndpointHandlerMapping; // A custom HandlerMapping that makes web endpoints available over HTTP using Spring MVC.\n", "des": "Spring MVC support for actuator endpoints."}
{"index": 1397, "repo": "spring-boot-actuator-3.1.1", "code": "package env;\n\n@Endpoint(id=\"env\") public class EnvironmentEndpoint extends Object; // @Endpoint to expose environment information.\npublic static final class EnvironmentEndpoint.EnvironmentDescriptor extends Object implements OperationResponseBody; // Description of an Environment.\npublic static final class EnvironmentEndpoint.EnvironmentEntryDescriptor extends Object; // Description of an entry of the Environment.\npublic static final class EnvironmentEndpoint.PropertySourceDescriptor extends Object; // Description of a PropertySource.\npublic static final class EnvironmentEndpoint.PropertySourceEntryDescriptor extends Object; // Description of a particular entry of PropertySource.\npublic static final class EnvironmentEndpoint.PropertySummaryDescriptor extends Object; // Description of a particular entry of the Environment.\npublic static final class EnvironmentEndpoint.PropertyValueDescriptor extends Object; // Description of a property's value, including its origin if available.\n@EndpointWebExtension(endpoint=EnvironmentEndpoint.class) public class EnvironmentEndpointWebExtension extends Object; // @EndpointWebExtension for the EnvironmentEndpoint.\n", "des": "Actuator support for Spring Framework's Environment."}
{"index": 1398, "repo": "spring-boot-actuator-3.1.1", "code": "package flyway;\n\n@Endpoint(id=\"flyway\") public class FlywayEndpoint extends Object; // @Endpoint to expose flyway info.\npublic static final class FlywayEndpoint.ContextFlywayBeansDescriptor extends Object; // Description of an application context's Flyway beans.\npublic static final class FlywayEndpoint.FlywayBeansDescriptor extends Object implements OperationResponseBody; // Description of an application's Flyway beans.\npublic static class FlywayEndpoint.FlywayDescriptor extends Object; // Description of a Flyway bean.\npublic static final class FlywayEndpoint.FlywayMigrationDescriptor extends Object; // Description of a migration performed by Flyway.\n", "des": "Actuator support for Flyway."}
{"index": 1399, "repo": "spring-boot-actuator-3.1.1", "code": "package hazelcast;\n\npublic class HazelcastHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for Hazelcast.\n", "des": "Actuator support for Hazelcast."}
{"index": 1400, "repo": "spring-boot-actuator-3.1.1", "code": "package health;\n\npublic abstract class AbstractHealthIndicator extends Object implements HealthIndicator; // Base HealthIndicator implementations that encapsulates creation of Health instance and error handling.\npublic abstract class AbstractReactiveHealthIndicator extends Object implements ReactiveHealthIndicator; // Base ReactiveHealthIndicator implementations that encapsulates creation of Health instance and error handling.\npublic final class AdditionalHealthEndpointPath extends Object; // Value object that represents an additional path for a HealthEndpointGroup.\npublic class CompositeHealth extends HealthComponent; // A HealthComponent that is composed of other HealthComponent instances.\npublic interface CompositeHealthContributor extends HealthContributor, NamedContributors<HealthContributor>; // A HealthContributor that is composed of other HealthContributor instances.\npublic interface CompositeReactiveHealthContributor extends ReactiveHealthContributor, NamedContributors<ReactiveHealthContributor>; // A ReactiveHealthContributor that is composed of other ReactiveHealthContributor instances.\npublic interface ContributorRegistry<C> extends NamedContributors<C>; // A mutable registry of health endpoint contributors (either HealthContributor or ReactiveHealthContributor).\npublic class DefaultHealthContributorRegistry extends Object implements HealthContributorRegistry; // Default HealthContributorRegistry implementation.\npublic class DefaultReactiveHealthContributorRegistry extends Object implements ReactiveHealthContributorRegistry; // Default ReactiveHealthContributorRegistry implementation.\npublic final class Health extends HealthComponent; // Carries information about the health of a component or subsystem.\npublic static class Health.Builder extends Object; // Builder for creating immutable Health instances.\npublic abstract class HealthComponent extends Object implements OperationResponseBody; // A component that contributes data to results returned from the HealthEndpoint.\npublic interface HealthContributor; // Tagging interface for classes that contribute to health components to the results returned from the HealthEndpoint.\npublic class HealthContributorNameFactory extends Object implements Function<String,String>; // Generate a sensible health indicator name based on its bean name.\npublic interface HealthContributorRegistry extends ContributorRegistry<HealthContributor>; // ContributorRegistry for HealthContributors.\n@Endpoint(id=\"health\") public class HealthEndpoint extends Object; // @Endpoint to expose application health information.\npublic interface HealthEndpointGroup; // A logical grouping of health contributors that can be exposed by the HealthEndpoint.\npublic interface HealthEndpointGroups; // A collection of groups for use with a health endpoint.\n", "des": "Actuator health indicator and endpoints."}
{"index": 1401, "repo": "spring-boot-actuator-3.1.1", "code": "package influx;\n\npublic class InfluxDbHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for InfluxDB.\n", "des": "Actuator support for InfluxDB."}
{"index": 1402, "repo": "spring-boot-actuator-3.1.1", "code": "package info;\n\n@ImportRuntimeHints(org.springframework.boot.actuate.info.BuildInfoContributor.BuildInfoContributorRuntimeHints.class) public class BuildInfoContributor extends InfoPropertiesInfoContributor<org.springframework.boot.info.BuildProperties>; // An InfoContributor that exposes BuildProperties.\npublic class EnvironmentInfoContributor extends Object implements InfoContributor; // An InfoContributor that provides all environment entries prefixed with info.\n@ImportRuntimeHints(org.springframework.boot.actuate.info.GitInfoContributor.GitInfoContributorRuntimeHints.class) public class GitInfoContributor extends InfoPropertiesInfoContributor<org.springframework.boot.info.GitProperties>; // An InfoContributor that exposes GitProperties.\npublic final class Info extends Object; // Carries information of the application.\npublic static class Info.Builder extends Object; // Builder for creating immutable Info instances.\n@FunctionalInterface public interface InfoContributor; // Contributes additional info details.\n@Endpoint(id=\"info\") public class InfoEndpoint extends Object; // @Endpoint to expose arbitrary application information.\npublic abstract class InfoPropertiesInfoContributor<T extends org.springframework.boot.info.InfoProperties> extends Object implements InfoContributor; // A base InfoContributor to expose an InfoProperties.\npublic static enum InfoPropertiesInfoContributor.Mode extends Enum<InfoPropertiesInfoContributor.Mode>; // Defines how properties should be exposed.\n@ImportRuntimeHints(org.springframework.boot.actuate.info.JavaInfoContributor.JavaInfoContributorRuntimeHints.class) public class JavaInfoContributor extends Object implements InfoContributor; // An InfoContributor that exposes JavaInfo.\npublic class MapInfoContributor extends Object implements InfoContributor; // A simple InfoContributor that exposes a map.\n@ImportRuntimeHints(org.springframework.boot.actuate.info.OsInfoContributor.OsInfoContributorRuntimeHints.class) public class OsInfoContributor extends Object implements InfoContributor; // An InfoContributor that exposes OsInfo.\npublic class SimpleInfoContributor extends Object implements InfoContributor; // A simple InfoContributor that exposes a single detail.\n", "des": "Classes for application info."}
{"index": 1403, "repo": "spring-boot-actuator-3.1.1", "code": "package integration;\n\n@Endpoint(id=\"integrationgraph\") public class IntegrationGraphEndpoint extends Object; // @Endpoint to expose the Spring Integration graph.\npublic static class IntegrationGraphEndpoint.GraphDescriptor extends Object implements OperationResponseBody; // Description of a Graph.\n", "des": "Actuator support for Spring Integration."}
{"index": 1404, "repo": "spring-boot-actuator-3.1.1", "code": "package jdbc;\n\npublic class DataSourceHealthIndicator extends AbstractHealthIndicator implements org.springframework.beans.factory.InitializingBean; // HealthIndicator that tests the status of a DataSource and optionally runs a test query.\n", "des": "Actuator support for JDBC."}
{"index": 1405, "repo": "spring-boot-actuator-3.1.1", "code": "package jms;\n\npublic class JmsHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for a JMS ConnectionFactory.\n", "des": "Actuator support for JMS."}
{"index": 1406, "repo": "spring-boot-actuator-3.1.1", "code": "package ldap;\n\npublic class LdapHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for configured LDAP server(s).\n", "des": "Actuator support for LDAP."}
{"index": 1407, "repo": "spring-boot-actuator-3.1.1", "code": "package liquibase;\n\n@Endpoint(id=\"liquibase\") public class LiquibaseEndpoint extends Object; // @Endpoint to expose liquibase info.\npublic static class LiquibaseEndpoint.ChangeSetDescriptor extends Object; // Description of a Liquibase change set.\npublic static class LiquibaseEndpoint.ContextExpressionDescriptor extends Object; // Description of a context expression in a LiquibaseEndpoint.ChangeSetDescriptor.\npublic static final class LiquibaseEndpoint.ContextLiquibaseBeansDescriptor extends Object; // Description of an application context's SpringLiquibase beans.\npublic static final class LiquibaseEndpoint.LiquibaseBeanDescriptor extends Object; // Description of a SpringLiquibase bean.\npublic static final class LiquibaseEndpoint.LiquibaseBeansDescriptor extends Object implements OperationResponseBody; // Description of an application's SpringLiquibase beans.\n", "des": "Actuator support for Liquibase."}
{"index": 1408, "repo": "spring-boot-actuator-3.1.1", "code": "package logging;\n\n@WebEndpoint(id=\"logfile\") public class LogFileWebEndpoint extends Object; // Web @Endpoint that provides access to an application's log file.\n@Endpoint(id=\"loggers\") @RegisterReflectionForBinding({GroupLoggerLevelsDescriptor.class,SingleLoggerLevelsDescriptor.class}) public class LoggersEndpoint extends Object; // @Endpoint to expose a collection of LoggerConfigurations.\npublic static class LoggersEndpoint.GroupLoggerLevelsDescriptor extends LoggersEndpoint.LoggerLevelsDescriptor; // Description of levels configured for a given group logger.\npublic static class LoggersEndpoint.LoggerLevelsDescriptor extends Object implements OperationResponseBody; // Description of levels configured for a given logger.\npublic static class LoggersEndpoint.LoggersDescriptor extends Object implements OperationResponseBody; // Description of loggers.\npublic static class LoggersEndpoint.SingleLoggerLevelsDescriptor extends LoggersEndpoint.LoggerLevelsDescriptor; // Description of levels configured for a given single logger.\n", "des": "Actuator support for logging."}
{"index": 1409, "repo": "spring-boot-actuator-3.1.1", "code": "package mail;\n\npublic class MailHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for configured smtp server(s).\n", "des": "Actuator support for JavaMail."}
{"index": 1410, "repo": "spring-boot-actuator-3.1.1", "code": "package management;\n\n@WebEndpoint(id=\"heapdump\") public class HeapDumpWebEndpoint extends Object; // Web @Endpoint to expose heap dumps.\n@FunctionalInterface protected static interface HeapDumpWebEndpoint.HeapDumper; // Strategy interface used to dump the heap to a file.\nprotected static class HeapDumpWebEndpoint.HeapDumperUnavailableException extends RuntimeException; // Exception to be thrown if the HeapDumpWebEndpoint.HeapDumper cannot be created.\nprotected static class HeapDumpWebEndpoint.HotSpotDiagnosticMXBeanHeapDumper extends Object implements HeapDumpWebEndpoint.HeapDumper; // HeapDumpWebEndpoint.HeapDumper that uses com.sun.management.HotSpotDiagnosticMXBean, available on Oracle and OpenJDK, to dump the heap to a file.\n@Endpoint(id=\"threaddump\") public class ThreadDumpEndpoint extends Object; // @Endpoint to expose thread info.\npublic static final class ThreadDumpEndpoint.ThreadDumpDescriptor extends Object implements OperationResponseBody; // Description of a thread dump.\n", "des": "Actuator support for JVM management."}
{"index": 1411, "repo": "spring-boot-actuator-3.1.1", "code": "package metrics;\n\npackage metrics.amqp; // Actuator support for RabbitMQ Java Client metrics.\npackage metrics.annotation; // Support classes for handler method metrics.\npackage metrics.cache; // Actuator support for cache metrics.\npackage metrics.data; // Actuator support for Spring Data Repository metrics.\npackage metrics.http; // Support classes for HTTP-related metrics.\npackage metrics.jdbc; // Actuator support for JDBC metrics.\npackage metrics.r2dbc; // Actuator support for R2DBC metrics.\npackage metrics.startup; // Actuator support for startup metrics.\npackage metrics.system; // Actuator support for system metrics.\n@FunctionalInterface public interface AutoTimer; // Strategy that can be used to apply Timers automatically instead of using @Timed.\n@Endpoint(id=\"metrics\") public class MetricsEndpoint extends Object; // An @Endpoint for exposing the metrics held by a MeterRegistry.\npublic static final class MetricsEndpoint.AvailableTag extends Object; // A set of tags for further dimensional drill-down and their potential values.\npublic static final class MetricsEndpoint.MetricDescriptor extends Object implements OperationResponseBody; // Description of a metric.\npublic static final class MetricsEndpoint.MetricNamesDescriptor extends Object implements OperationResponseBody; // Description of metric names.\npublic static final class MetricsEndpoint.Sample extends Object; // A measurement sample combining a statistic and a value.\n", "des": "Core actuator support for metrics."}
{"index": 1412, "repo": "spring-boot-actuator-3.1.1", "code": "package amqp;\n\npublic class RabbitMetrics extends Object implements io.micrometer.core.instrument.binder.MeterBinder; // A MeterBinder for RabbitMQ Java Client metrics.\n", "des": "Actuator support for RabbitMQ Java Client metrics."}
{"index": 1413, "repo": "spring-boot-actuator-3.1.1", "code": "package annotation;\n\npublic final class TimedAnnotations extends Object; // Utility used to obtain @Timed annotations from bean methods.\n", "des": "Support classes for handler method metrics."}
{"index": 1414, "repo": "spring-boot-actuator-3.1.1", "code": "package cache;\n\npublic class Cache2kCacheMeterBinderProvider extends Object implements CacheMeterBinderProvider<org.cache2k.extra.spring.SpringCache2kCache>; // CacheMeterBinderProvider implementation for cache2k.\n@FunctionalInterface public interface CacheMeterBinderProvider<C extends org.springframework.cache.Cache>; // Provide a MeterBinder based on a Cache.\npublic class CacheMetricsRegistrar extends Object; // Register supported Cache to a MeterRegistry.\npublic class CaffeineCacheMeterBinderProvider extends Object implements CacheMeterBinderProvider<org.springframework.cache.caffeine.CaffeineCache>; // CacheMeterBinderProvider implementation for Caffeine.\n@ImportRuntimeHints(org.springframework.boot.actuate.metrics.cache.HazelcastCacheMeterBinderProvider.HazelcastCacheMeterBinderProviderRuntimeHints.class) public class HazelcastCacheMeterBinderProvider extends Object implements CacheMeterBinderProvider<com.hazelcast.spring.cache.HazelcastCache>; // CacheMeterBinderProvider implementation for Hazelcast.\npublic class JCacheCacheMeterBinderProvider extends Object implements CacheMeterBinderProvider<org.springframework.cache.jcache.JCacheCache>; // CacheMeterBinderProvider implementation for JCache.\npublic class RedisCacheMeterBinderProvider extends Object implements CacheMeterBinderProvider<org.springframework.data.redis.cache.RedisCache>; // CacheMeterBinderProvider implementation for Redis.\npublic class RedisCacheMetrics extends io.micrometer.core.instrument.binder.cache.CacheMeterBinder<org.springframework.data.redis.cache.RedisCache>; // CacheMeterBinder for RedisCache.\n", "des": "Actuator support for cache metrics."}
{"index": 1415, "repo": "spring-boot-actuator-3.1.1", "code": "package data;\n\npublic class DefaultRepositoryTagsProvider extends Object implements RepositoryTagsProvider; // Default RepositoryTagsProvider implementation.\npublic class MetricsRepositoryMethodInvocationListener extends Object implements org.springframework.data.repository.core.support.RepositoryMethodInvocationListener; // Intercepts Spring Data Repository invocations and records metrics about execution time and results.\n@FunctionalInterface public interface RepositoryTagsProvider; // Provides Tags for Spring Data Repository invocations.\n", "des": "Actuator support for Spring Data Repository metrics."}
{"index": 1416, "repo": "spring-boot-actuator-3.1.1", "code": "package prometheus;\n\npublic class PrometheusPushGatewayManager extends Object; // Class that can be used to manage the pushing of metrics to a Prometheus PushGateway.\npublic static enum PrometheusPushGatewayManager.ShutdownOperation extends Enum<PrometheusPushGatewayManager.ShutdownOperation>; // The operation that should be performed on shutdown.\n@WebEndpoint(id=\"prometheus\") public class PrometheusScrapeEndpoint extends Object; // @Endpoint that outputs metrics in a format that can be scraped by the Prometheus server.\npublic enum TextOutputFormat extends Enum<TextOutputFormat> implements Producible<TextOutputFormat>; // A Producible enum for supported Prometheus TextFormat.\n", "des": "Actuator support for exporting metrics to Prometheus."}
{"index": 1417, "repo": "spring-boot-actuator-3.1.1", "code": "package http;\n\npublic enum Outcome extends Enum<Outcome>; // The outcome of an HTTP request.\n", "des": "Support classes for HTTP-related metrics."}
{"index": 1418, "repo": "spring-boot-actuator-3.1.1", "code": "package jdbc;\n\npublic class DataSourcePoolMetrics extends Object implements io.micrometer.core.instrument.binder.MeterBinder; // A MeterBinder for a DataSource.\n", "des": "Actuator support for JDBC metrics."}
{"index": 1419, "repo": "spring-boot-actuator-3.1.1", "code": "package r2dbc;\n\npublic class ConnectionPoolMetrics extends Object implements io.micrometer.core.instrument.binder.MeterBinder; // A MeterBinder for a ConnectionPool.\n", "des": "Actuator support for R2DBC metrics."}
{"index": 1420, "repo": "spring-boot-actuator-3.1.1", "code": "package startup;\n\npublic class StartupTimeMetricsListener extends Object implements org.springframework.context.event.SmartApplicationListener; // Binds application startup metrics in response to ApplicationStartedEvent and ApplicationReadyEvent.\n", "des": "Actuator support for startup metrics."}
{"index": 1421, "repo": "spring-boot-actuator-3.1.1", "code": "package system;\n\npublic class DiskSpaceMetricsBinder extends Object implements io.micrometer.core.instrument.binder.MeterBinder; // A MeterBinder that binds one or more DiskSpaceMetrics.\n", "des": "Actuator support for system metrics."}
{"index": 1422, "repo": "spring-boot-actuator-3.1.1", "code": "package client;\n\n@Deprecated(since=\"3.0.0\", forRemoval=true) public class DefaultRestTemplateExchangeTagsProvider extends Object implements RestTemplateExchangeTagsProvider;\npublic class ObservationRestTemplateCustomizer extends Object implements org.springframework.boot.web.client.RestTemplateCustomizer; // RestTemplateCustomizer that configures the RestTemplate to record request observations.\n@Deprecated(since=\"3.0.0\", forRemoval=true) public final class RestTemplateExchangeTags extends Object;\n@FunctionalInterface @Deprecated(since=\"3.0.0\", forRemoval=true) public interface RestTemplateExchangeTagsProvider;\n", "des": "Actuator support for web client metrics."}
{"index": 1423, "repo": "spring-boot-actuator-3.1.1", "code": "package jetty;\n\npublic abstract class AbstractJettyMetricsBinder extends Object implements org.springframework.context.ApplicationListener<org.springframework.boot.context.event.ApplicationStartedEvent>; // Base class for binding Jetty metrics in response to an ApplicationStartedEvent.\npublic class JettyConnectionMetricsBinder extends AbstractJettyMetricsBinder; // AbstractJettyMetricsBinder for JettyConnectionMetrics.\npublic class JettyServerThreadPoolMetricsBinder extends AbstractJettyMetricsBinder; // AbstractJettyMetricsBinder for JettyServerThreadPoolMetrics.\npublic class JettySslHandshakeMetricsBinder extends AbstractJettyMetricsBinder; // AbstractJettyMetricsBinder for JettySslHandshakeMetrics.\n", "des": "Actuator support for Jetty metrics."}
{"index": 1424, "repo": "spring-boot-actuator-3.1.1", "code": "package client;\n\n@Deprecated(since=\"3.0.0\", forRemoval=true) public class DefaultWebClientExchangeTagsProvider extends Object implements WebClientExchangeTagsProvider;\npublic class ObservationWebClientCustomizer extends Object implements org.springframework.boot.web.reactive.function.client.WebClientCustomizer; // WebClientCustomizer that configures the WebClient to record request observations.\n@Deprecated(since=\"3.0.0\", forRemoval=true) public final class WebClientExchangeTags extends Object;\n@FunctionalInterface @Deprecated(since=\"3.0.0\", forRemoval=true) public interface WebClientExchangeTagsProvider;\n", "des": "Actuator support for WebClient metrics."}
{"index": 1425, "repo": "spring-boot-actuator-3.1.1", "code": "package server;\n\n@Deprecated(since=\"3.0.0\", forRemoval=true) public class DefaultWebFluxTagsProvider extends Object implements WebFluxTagsProvider;\n@Deprecated(since=\"3.0.0\", forRemoval=true) public final class WebFluxTags extends Object;\n@FunctionalInterface @Deprecated(since=\"3.0.0\", forRemoval=true) public interface WebFluxTagsContributor;\n@FunctionalInterface @Deprecated(since=\"3.0.0\", forRemoval=true) public interface WebFluxTagsProvider;\n", "des": "Actuator support for WebFlux metrics."}
{"index": 1426, "repo": "spring-boot-actuator-3.1.1", "code": "package servlet;\n\n@Deprecated(since=\"3.0.0\", forRemoval=true) public class DefaultWebMvcTagsProvider extends Object implements WebMvcTagsProvider;\n@Deprecated(since=\"3.0.0\", forRemoval=true) public final class WebMvcTags extends Object;\n@Deprecated(since=\"3.0.0\", forRemoval=true) public interface WebMvcTagsContributor;\n@Deprecated(since=\"3.0.0\", forRemoval=true) public interface WebMvcTagsProvider;\n", "des": "Actuator support for Spring MVC metrics."}
{"index": 1427, "repo": "spring-boot-actuator-3.1.1", "code": "package tomcat;\n\npublic class TomcatMetricsBinder extends Object implements org.springframework.context.ApplicationListener<org.springframework.boot.context.event.ApplicationStartedEvent>, org.springframework.beans.factory.DisposableBean; // Binds TomcatMetrics in response to the ApplicationStartedEvent.\n", "des": "Actuator support for Tomcat metrics."}
{"index": 1428, "repo": "spring-boot-actuator-3.1.1", "code": "package neo4j;\n\npublic class Neo4jHealthIndicator extends AbstractHealthIndicator; // HealthIndicator that tests the status of a Neo4j by executing a Cypher statement and extracting server and database information.\npublic final class Neo4jReactiveHealthIndicator extends AbstractReactiveHealthIndicator; // ReactiveHealthIndicator that tests the status of a Neo4j by executing a Cypher statement and extracting server and database information.\n", "des": "Actuator support for Neo4j."}
{"index": 1429, "repo": "spring-boot-actuator-3.1.1", "code": "package quartz;\n\n@Endpoint(id=\"quartz\") public class QuartzEndpoint extends Object; // Endpoint to expose Quartz Scheduler jobs and triggers.\npublic static final class QuartzEndpoint.CalendarIntervalTriggerDescriptor extends QuartzEndpoint.TriggerDescriptor; // Description of a CalendarIntervalTrigger.\npublic static final class QuartzEndpoint.CronTriggerDescriptor extends QuartzEndpoint.TriggerDescriptor; // Description of a CronTrigger.\npublic static final class QuartzEndpoint.CustomTriggerDescriptor extends QuartzEndpoint.TriggerDescriptor; // Description of a custom Trigger.\npublic static final class QuartzEndpoint.DailyTimeIntervalTriggerDescriptor extends QuartzEndpoint.TriggerDescriptor; // Description of a DailyTimeIntervalTrigger.\npublic static class QuartzEndpoint.GroupNamesDescriptor extends Object; // Description of group names.\npublic static final class QuartzEndpoint.QuartzDescriptor extends Object implements OperationResponseBody; // Description of available job and trigger group names.\npublic static class QuartzEndpoint.QuartzGroupsDescriptor extends Object implements OperationResponseBody; // Description of each group identified by name.\npublic static final class QuartzEndpoint.QuartzJobDetailsDescriptor extends Object implements OperationResponseBody; // Description of a Quartz Job.\npublic static final class QuartzEndpoint.QuartzJobGroupSummaryDescriptor extends Object implements OperationResponseBody; // Description of the jobs in a given group.\npublic static final class QuartzEndpoint.QuartzJobSummaryDescriptor extends Object; // Description of a Quartz Job.\npublic static final class QuartzEndpoint.QuartzTriggerGroupSummaryDescriptor extends Object implements OperationResponseBody; // Description of the triggers in a given group.\npublic static final class QuartzEndpoint.QuartzTriggerGroupSummaryDescriptor.Triggers extends Object;\npublic static final class QuartzEndpoint.SimpleTriggerDescriptor extends QuartzEndpoint.TriggerDescriptor; // Description of a SimpleTrigger.\npublic abstract static class QuartzEndpoint.TriggerDescriptor extends Object; // Base class for descriptions of a Trigger.\n@EndpointWebExtension(endpoint=QuartzEndpoint.class) @ImportRuntimeHints(org.springframework.boot.actuate.quartz.QuartzEndpointWebExtension.QuartzEndpointWebExtensionRuntimeHints.class) public class QuartzEndpointWebExtension extends Object; // @EndpointWebExtension for the QuartzEndpoint.\n", "des": "Actuator support for Quartz Scheduler."}
{"index": 1430, "repo": "spring-boot-actuator-3.1.1", "code": "package r2dbc;\n\npublic class ConnectionFactoryHealthIndicator extends AbstractReactiveHealthIndicator; // A HealthIndicator to validate a R2DBC ConnectionFactory.\n", "des": "Actuator support for R2DBC."}
{"index": 1431, "repo": "spring-boot-actuator-3.1.1", "code": "package scheduling;\n\n@Endpoint(id=\"scheduledtasks\") @ImportRuntimeHints(org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint.ScheduledTasksEndpointRuntimeHints.class) public class ScheduledTasksEndpoint extends Object; // @Endpoint to expose information about an application's scheduled tasks.\npublic static final class ScheduledTasksEndpoint.CronTaskDescriptor extends ScheduledTasksEndpoint.TaskDescriptor; // Description of a CronTask or a TriggerTask with a CronTrigger.\npublic static final class ScheduledTasksEndpoint.CustomTriggerTaskDescriptor extends ScheduledTasksEndpoint.TaskDescriptor; // Description of a TriggerTask with a custom Trigger.\npublic static final class ScheduledTasksEndpoint.FixedDelayTaskDescriptor extends ScheduledTasksEndpoint.IntervalTaskDescriptor; // Description of a FixedDelayTask or a TriggerTask with a fixed-delay PeriodicTrigger.\npublic static final class ScheduledTasksEndpoint.FixedRateTaskDescriptor extends ScheduledTasksEndpoint.IntervalTaskDescriptor; // Description of a FixedRateTask or a TriggerTask with a fixed-rate PeriodicTrigger.\npublic static class ScheduledTasksEndpoint.IntervalTaskDescriptor extends ScheduledTasksEndpoint.TaskDescriptor; // Description of an IntervalTask.\npublic static final class ScheduledTasksEndpoint.RunnableDescriptor extends Object; // Description of a Task's Runnable.\npublic static final class ScheduledTasksEndpoint.ScheduledTasksDescriptor extends Object implements OperationResponseBody; // Description of an application's scheduled Tasks.\npublic abstract static class ScheduledTasksEndpoint.TaskDescriptor extends Object; // Base class for descriptions of a Task.\n", "des": "Actuator scheduling support."}
{"index": 1432, "repo": "spring-boot-actuator-3.1.1", "code": "package security;\n\npublic abstract class AbstractAuthenticationAuditListener extends Object implements org.springframework.context.ApplicationListener<org.springframework.security.authentication.event.AbstractAuthenticationEvent>, org.springframework.context.ApplicationEventPublisherAware; // Abstract ApplicationListener to expose Spring Security authentication events as AuditEvents.\npublic abstract class AbstractAuthorizationAuditListener extends Object implements org.springframework.context.ApplicationListener<org.springframework.security.authorization.event.AuthorizationEvent>, org.springframework.context.ApplicationEventPublisherAware; // Abstract ApplicationListener to expose Spring Security authorization denied and authorization granted events as AuditEvents.\npublic class AuthenticationAuditListener extends AbstractAuthenticationAuditListener; // Default implementation of AbstractAuthenticationAuditListener.\npublic class AuthorizationAuditListener extends AbstractAuthorizationAuditListener; // Default implementation of AbstractAuthorizationAuditListener.\n", "des": "Actuator support for security."}
{"index": 1433, "repo": "spring-boot-actuator-3.1.1", "code": "package session;\n\n@Endpoint(id=\"sessions\") public class SessionsEndpoint extends Object; // @Endpoint to expose a user's Sessions.\npublic static final class SessionsEndpoint.SessionDescriptor extends Object implements OperationResponseBody; // Description of user's session.\npublic static final class SessionsEndpoint.SessionsDescriptor extends Object implements OperationResponseBody; // Description of user's sessions.\n", "des": "Actuator support for Spring Session."}
{"index": 1434, "repo": "spring-boot-actuator-3.1.1", "code": "package startup;\n\n@Endpoint(id=\"startup\") @ImportRuntimeHints(org.springframework.boot.actuate.startup.StartupEndpoint.StartupEndpointRuntimeHints.class) public class StartupEndpoint extends Object; // @Endpoint to expose the timeline of the application startup.\npublic static final class StartupEndpoint.StartupDescriptor extends Object implements OperationResponseBody; // Description of an application startup.\n", "des": "Actuator support for ApplicationStartup."}
{"index": 1435, "repo": "spring-boot-actuator-3.1.1", "code": "package system;\n\npublic class DiskSpaceHealthIndicator extends AbstractHealthIndicator; // A HealthIndicator that checks available disk space and reports a status of Status.DOWN when it drops below a configurable threshold.\n", "des": "Actuator support for system-related concerns."}
{"index": 1436, "repo": "spring-boot-actuator-3.1.1", "code": "package exchanges;\n\npackage exchanges.reactive; // Actuator HTTP exchanges support for reactive servers.\npackage exchanges.servlet; // Actuator HTTP exchanges support for servlet servers.\npublic final class HttpExchange extends Object; // An HTTP request and response exchange.\npublic static final class HttpExchange.Principal extends Object; // Principal associated with an HTTP request-response exchange.\npublic static final class HttpExchange.Request extends Object; // The request that started the exchange.\npublic static final class HttpExchange.Response extends Object; // The response that finished the exchange.\npublic static final class HttpExchange.Session extends Object; // The session associated with the exchange.\npublic static final class HttpExchange.Started extends Object; // A started request that when finished will return a new HttpExchange instance.\npublic interface HttpExchangeRepository; // A repository for HttpExchange instances.\n@Endpoint(id=\"httpexchanges\") public class HttpExchangesEndpoint extends Object; // @Endpoint to expose HttpExchange information.\npublic static final class HttpExchangesEndpoint.HttpExchangesDescriptor extends Object implements OperationResponseBody; // Description of an application's HttpExchange entries.\npublic enum Include extends Enum<Include>; // Include options for HTTP exchanges.\npublic class InMemoryHttpExchangeRepository extends Object implements HttpExchangeRepository; // In-memory implementation of HttpExchangeRepository.\npublic interface RecordableHttpRequest; // The recordable parts of an HTTP request used when creating an HttpExchange.\npublic interface RecordableHttpResponse; // The recordable parts of an HTTP response used when creating an HttpExchange.\n", "des": "Actuator HTTP exchanges support."}
{"index": 1437, "repo": "spring-boot-actuator-3.1.1", "code": "package reactive;\n\npublic class HttpExchangesWebFilter extends Object implements org.springframework.web.server.WebFilter, org.springframework.core.Ordered; // A WebFilter for recording HTTP exchanges.\n", "des": "Actuator HTTP exchanges support for reactive servers."}
{"index": 1438, "repo": "spring-boot-actuator-3.1.1", "code": "package servlet;\n\npublic class HttpExchangesFilter extends org.springframework.web.filter.OncePerRequestFilter implements org.springframework.core.Ordered; // Servlet Filter for recording HTTP exchanges.\n", "des": "Actuator HTTP exchanges support for servlet servers."}
{"index": 1439, "repo": "spring-boot-actuator-3.1.1", "code": "package mappings;\n\npackage mappings.reactive; // Actuator reactive request mappings support.\npackage mappings.servlet; // Actuator servlet request mappings support.\npublic class HandlerMethodDescription extends Object; // A description of a HandlerMethod.\npublic interface MappingDescriptionProvider; // A MappingDescriptionProvider provides a List of mapping descriptions through implementation-specific introspection of an application context.\n@Endpoint(id=\"mappings\") public class MappingsEndpoint extends Object; // @Endpoint to expose HTTP request mappings.\npublic static final class MappingsEndpoint.ApplicationMappingsDescriptor extends Object implements OperationResponseBody; // Description of an application's request mappings.\npublic static final class MappingsEndpoint.ContextMappingsDescriptor extends Object; // Description of an application context's request mappings.\n", "des": "Actuator web request mappings support."}
{"index": 1440, "repo": "spring-boot-actuator-3.1.1", "code": "package reactive;\n\npublic class DispatcherHandlerMappingDescription extends Object; // A description of a mapping known to a DispatcherServlet.\npublic class DispatcherHandlerMappingDetails extends Object; // Details of a DispatcherHandler mapping.\n@ImportRuntimeHints(org.springframework.boot.actuate.web.mappings.reactive.DispatcherHandlersMappingDescriptionProvider.DispatcherHandlersMappingDescriptionProviderRuntimeHints.class) public class DispatcherHandlersMappingDescriptionProvider extends Object implements MappingDescriptionProvider; // A MappingDescriptionProvider that introspects the HandlerMappings that are known to a DispatcherHandler.\npublic class HandlerFunctionDescription extends Object; // Description of a HandlerFunction.\npublic class RequestMappingConditionsDescription extends Object; // Description of the conditions of a RequestMappingInfo.\npublic static class RequestMappingConditionsDescription.MediaTypeExpressionDescription extends Object; // A description of a MediaTypeExpression in a request mapping condition.\npublic static class RequestMappingConditionsDescription.NameValueExpressionDescription extends Object; // A description of a NameValueExpression in a request mapping condition.\n", "des": "Actuator reactive request mappings support."}
{"index": 1441, "repo": "spring-boot-actuator-3.1.1", "code": "package servlet;\n\npublic class DispatcherServletMappingDescription extends Object; // A description of a mapping known to a DispatcherServlet.\npublic class DispatcherServletMappingDetails extends Object; // Details of a DispatcherServlet mapping.\n@ImportRuntimeHints(org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider.DispatcherServletsMappingDescriptionProviderRuntimeHints.class) public class DispatcherServletsMappingDescriptionProvider extends Object implements MappingDescriptionProvider; // A MappingDescriptionProvider that introspects the HandlerMappings that are known to one or more DispatcherServlets.\npublic class FilterRegistrationMappingDescription extends RegistrationMappingDescription<jakarta.servlet.FilterRegistration>; // A RegistrationMappingDescription derived from a FilterRegistration.\n@ImportRuntimeHints(org.springframework.boot.actuate.web.mappings.servlet.FiltersMappingDescriptionProvider.FiltersMappingDescriptionProviderRuntimeHints.class) public class FiltersMappingDescriptionProvider extends Object implements MappingDescriptionProvider; // A MappingDescriptionProvider that describes that mappings of any Filters registered with a ServletContext.\npublic class RegistrationMappingDescription<T extends jakarta.servlet.Registration> extends Object; // A mapping description derived from a Registration.\npublic class RequestMappingConditionsDescription extends Object; // Description of the conditions of a RequestMappingInfo.\npublic static class RequestMappingConditionsDescription.MediaTypeExpressionDescription extends Object; // A description of a MediaTypeExpression in a request mapping condition.\npublic static class RequestMappingConditionsDescription.NameValueExpressionDescription extends Object; // A description of a NameValueExpression in a request mapping condition.\npublic class ServletRegistrationMappingDescription extends RegistrationMappingDescription<jakarta.servlet.ServletRegistration>; // A mapping description derived from a ServletRegistration.\n@ImportRuntimeHints(org.springframework.boot.actuate.web.mappings.servlet.ServletsMappingDescriptionProvider.ServletsMappingDescriptionProviderRuntimeHints.class) public class ServletsMappingDescriptionProvider extends Object implements MappingDescriptionProvider; // A MappingDescriptionProvider that describes that mappings of any Servlets registered with a ServletContext.\n", "des": "Actuator servlet request mappings support."}
{"index": 1442, "repo": "spring-data-redis-3.1.2", "code": "package redis;\n\npackage redis.cache; // Package providing a Redis implementation for Spring cache abstraction.\npackage redis.connection; // Connection package providing low-level abstractions for interacting with the various Redis 'drivers'/libraries.\npackage redis.core; // Core package for integrating Redis with Spring concepts.\npackage redis.hash; // Dedicated support package for Redis hashes.\npackage redis.listener; // Base package for Redis message listener / pubsub container facility\npackage redis.serializer; // Serialization/Deserialization package for converting Object to (and from) binary data.\npackage redis.util; // Commonly used stuff for data manipulation throughout different driver specific implementations.\npublic class ClusterRedirectException extends DataRetrievalFailureException; // ClusterRedirectException indicates that a requested slot is not served by the targeted server but can be obtained on another one.\npublic class ClusterStateFailureException extends DataAccessResourceFailureException; // DataAccessResourceFailureException indicating the current local snapshot of cluster state does no longer represent the actual remote state.\npublic interface ExceptionTranslationStrategy; // Potentially translates an Exception into appropriate DataAccessException.\npublic class FallbackExceptionTranslationStrategy extends PassThroughExceptionTranslationStrategy; // FallbackExceptionTranslationStrategy returns RedisSystemException for unknown Exceptions.\npublic class PassThroughExceptionTranslationStrategy extends Object implements ExceptionTranslationStrategy; // PassThroughExceptionTranslationStrategy returns null for unknown Exceptions.\npublic class RedisConnectionFailureException extends DataAccessResourceFailureException; // Fatal exception thrown when the Redis connection fails completely.\npublic class RedisSystemException extends UncategorizedDataAccessException; // Exception thrown when we can't classify a Redis exception into one of Spring generic data access exceptions.\npublic class TooManyClusterRedirectionsException extends DataRetrievalFailureException; // DataRetrievalFailureException thrown when following cluster redirects exceeds the max number of edges.\n", "des": "Root package for integrating Redis with Spring concepts."}
{"index": 1443, "repo": "spring-data-redis-3.1.2", "code": "package cache;\n\npublic abstract class BatchStrategies extends Object; // A collection of predefined BatchStrategy implementations using KEYS or SCAN command.\npublic interface BatchStrategy; // A BatchStrategy to be used with RedisCacheWriter.\n@FunctionalInterface public interface CacheKeyPrefix; // CacheKeyPrefix is a callback hook for creating custom prefixes prepended to the actual key stored in Redis.\npublic interface CacheStatistics; // Cache statistics for a RedisCache.\npublic interface CacheStatisticsCollector extends CacheStatisticsProvider; // The statistics collector supports capturing of relevant RedisCache operations such as hits & misses.\npublic interface CacheStatisticsProvider; // Interface to be implemented by objects that expose CacheStatistics identified by cacheName.\npublic class RedisCache extends AbstractValueAdaptingCache; // Cache implementation using for Redis as the underlying store for cache data.\npublic class RedisCacheConfiguration extends Object; // Immutable RedisCacheConfiguration used to customize RedisCache behaviour, such as caching null values, computing cache key prefixes and handling binary serialization.\npublic class RedisCacheManager extends AbstractTransactionSupportingCacheManager; // CacheManager backed by a RedisCache.\npublic static class RedisCacheManager.RedisCacheManagerBuilder extends Object; // Builder for creating a RedisCacheManager.\npublic interface RedisCacheWriter extends CacheStatisticsProvider; // RedisCacheWriter provides low level access to Redis commands (SET, SETNX, GET, EXPIRE,...) used for caching.\n", "des": "Package providing a Redis implementation for Spring cache abstraction."}
{"index": 1444, "repo": "spring-data-redis-3.1.2", "code": "package connection;\n\npackage connection.convert; // Redis specific converters used for sending data and parsing responses.\npackage connection.jedis; // Connection package for Jedis library.\npackage connection.lettuce; // Connection package for Lettuce Redis client.\npackage connection.stream; // Data structures and interfaces to interact with Redis Streams.\npackage connection.util; // Internal utility package for encoding/decoding Strings to byte[] (using Base64) library.\npublic abstract class AbstractRedisConnection extends Object implements RedisConnection;\npublic class BitFieldSubCommands extends Object implements Iterable<BitFieldSubCommands.BitFieldSubCommand>; // The actual BITFIELD command representation holding several BitFieldSubCommands.BitFieldSubCommands to execute.\npublic abstract static class BitFieldSubCommands.AbstractBitFieldSubCommand extends Object implements BitFieldSubCommands.BitFieldSubCommand;\npublic static class BitFieldSubCommands.BitFieldGet extends BitFieldSubCommands.AbstractBitFieldSubCommand; // The GET sub command used with BitFieldSubCommands.\npublic static class BitFieldSubCommands.BitFieldGetBuilder extends Object;\npublic static class BitFieldSubCommands.BitFieldIncrBy extends BitFieldSubCommands.AbstractBitFieldSubCommand; // The INCRBY sub command used with BitFieldSubCommands.\npublic static enum BitFieldSubCommands.BitFieldIncrBy.Overflow extends Enum<BitFieldSubCommands.BitFieldIncrBy.Overflow>;\npublic static class BitFieldSubCommands.BitFieldSet extends BitFieldSubCommands.AbstractBitFieldSubCommand; // The SET sub command used with BitFieldSubCommands.\npublic static class BitFieldSubCommands.BitFieldSetBuilder extends Object;\npublic static interface BitFieldSubCommands.BitFieldSubCommand; // Sub command to be used as part of BitFieldSubCommands.\npublic static class BitFieldSubCommands.BitFieldType extends Object; // The actual Redis bitfield type representation for signed and unsigned integers used with BitFieldSubCommands.BitFieldSubCommand.\npublic static class BitFieldSubCommands.Offset extends Object; // Offset used inside a BitFieldSubCommands.BitFieldSubCommand.\npublic class ClusterCommandExecutionFailureException extends UncategorizedDataAccessException; // Exception thrown when at least one call to a clustered redis environment fails.\n", "des": "Connection package providing low-level abstractions for interacting with the various Redis 'drivers'/libraries."}
{"index": 1445, "repo": "spring-data-redis-3.1.2", "code": "package convert;\n\npublic abstract class Converters extends Object; // Common type converters.\npublic class ListConverter<S,T> extends Object implements Converter<List<S>,List<T>>; // Converts a List of values of one type to a List of values of another type\npublic class LongToBooleanConverter extends Object implements Converter<Long,Boolean>; // Converts Longs to Booleans\npublic class MapConverter<S,T> extends Object implements Converter<Map<S,S>,Map<T,T>>; // Converts a Map of values of one key/value type to a Map of values of another type\npublic enum MapToPropertiesConverter extends Enum<MapToPropertiesConverter> implements Converter<Map<?,?>,Properties>;\npublic class SetConverter<S,T> extends Object implements Converter<Set<S>,Set<T>>; // Converts a Set of values of one type to a Set of values of another type preserving item order.\npublic class StringToDataTypeConverter extends Object implements Converter<String,DataType>; // Converts Strings to DataTypes\npublic class StringToPropertiesConverter extends Object implements Converter<String,Properties>; // Converts Strings to Properties\npublic class StringToRedisClientInfoConverter extends Object implements Converter<String[],List<RedisClientInfo>>; // Converter implementation to create one RedisClientInfo per line entry in given String array.\npublic class TransactionResultConverter<T> extends Object implements Converter<List<Object>,List<Object>>; // Converts the results of transaction exec using a supplied Queue of FutureResults.\n", "des": "Redis specific converters used for sending data and parsing responses."}
{"index": 1446, "repo": "spring-data-redis-3.1.2", "code": "package jedis;\n\npublic interface JedisClientConfiguration; // Redis client configuration for jedis.\npublic static class JedisClientConfiguration.DefaultJedisClientConfigurationBuilder extends Object implements JedisClientConfiguration.JedisClientConfigurationBuilder, JedisClientConfiguration.JedisPoolingClientConfigurationBuilder, JedisClientConfiguration.JedisSslClientConfigurationBuilder; // Default JedisClientConfiguration.JedisClientConfigurationBuilder implementation to build an immutable JedisClientConfiguration.\npublic static interface JedisClientConfiguration.JedisClientConfigurationBuilder; // Builder for JedisClientConfiguration.\npublic static interface JedisClientConfiguration.JedisPoolingClientConfigurationBuilder; // Builder for Pooling-related JedisClientConfiguration.\npublic static interface JedisClientConfiguration.JedisSslClientConfigurationBuilder; // Builder for SSL-related JedisClientConfiguration.\npublic class JedisClusterConnection extends Object implements RedisClusterConnection; // RedisClusterConnection implementation on top of JedisCluster. Uses the native JedisCluster api where possible and falls back to direct node communication using Jedis where needed.\nprotected static interface JedisClusterConnection.JedisClusterCommandCallback<T> extends ClusterCommandExecutor.ClusterCommandCallback<redis.clients.jedis.Jedis,T>; // Jedis specific ClusterCommandExecutor.ClusterCommandCallback.\npublic static class JedisClusterConnection.JedisClusterTopologyProvider extends Object implements ClusterTopologyProvider; // Jedis specific implementation of ClusterTopologyProvider.\nprotected static interface JedisClusterConnection.JedisMultiKeyClusterCommandCallback<T> extends ClusterCommandExecutor.MultiKeyClusterCommandCallback<redis.clients.jedis.Jedis,T>; // Jedis specific ClusterCommandExecutor.MultiKeyClusterCommandCallback.\npublic class JedisConnection extends AbstractRedisConnection; // RedisConnection implementation on top of Jedis library.\npublic class JedisConnectionFactory extends Object implements InitializingBean, DisposableBean, RedisConnectionFactory; // Connection factory creating Jedis based connections.\npublic class JedisExceptionConverter extends Object implements Converter<Exception,DataAccessException>; // Converts Exceptions thrown from Jedis to DataAccessExceptions\npublic class JedisScriptReturnConverter extends Object implements Converter<Object,Object>; // Converts the value returned by Jedis script eval to the expected ReturnType\npublic class JedisSentinelConnection extends Object implements RedisSentinelConnection;\n", "des": "Connection package for Jedis library."}
{"index": 1447, "repo": "spring-data-redis-3.1.2", "code": "package lettuce;\n\npackage lettuce.observability; // Integration of Micrometer Tracing for Lettuce Observability.\npublic interface LettuceClientConfiguration; // Redis client configuration for lettuce.\npublic static class LettuceClientConfiguration.LettuceClientConfigurationBuilder extends Object;\npublic static class LettuceClientConfiguration.LettuceSslClientConfigurationBuilder extends Object; // Builder for SSL-related LettuceClientConfiguration.\npublic class LettuceClusterConnection extends LettuceConnection implements RedisClusterConnection, DefaultedRedisClusterConnection; // RedisClusterConnection implementation on top of Lettuce Redis client.\nprotected static interface LettuceClusterConnection.LettuceClusterCommandCallback<T> extends ClusterCommandExecutor.ClusterCommandCallback<io.lettuce.core.cluster.api.sync.RedisClusterCommands<byte[],byte[]>,T>; // Lettuce specific implementation of ClusterCommandExecutor.ClusterCommandCallback.\nprotected static interface LettuceClusterConnection.LettuceMultiKeyClusterCommandCallback<T> extends ClusterCommandExecutor.MultiKeyClusterCommandCallback<io.lettuce.core.cluster.api.sync.RedisClusterCommands<byte[],byte[]>,T>; // Lettuce specific implementation of ClusterCommandExecutor.MultiKeyClusterCommandCallback.\npublic class LettuceConnection extends AbstractRedisConnection; // RedisConnection implementation on top of Lettuce Redis client.\npublic static interface LettuceConnection.PipeliningFlushPolicy; // Strategy interface to control pipelining flush behavior.\npublic static interface LettuceConnection.PipeliningFlushState; // State object associated with flushing of the currently ongoing pipeline.\npublic class LettuceConnectionFactory extends Object implements InitializingBean, DisposableBean, RedisConnectionFactory, ReactiveRedisConnectionFactory; // Connection factory creating Lettuce-based connections.\n@FunctionalInterface public interface LettuceConnectionProvider; // Defines a provider for Lettuce connections.\n@FunctionalInterface public static interface LettuceConnectionProvider.TargetAware; // Extension to LettuceConnectionProvider for providers that allow connection creation to specific nodes.\npublic abstract class LettuceConverters extends Converters; // Lettuce type converters\npublic class LettuceExceptionConverter extends Object implements Converter<Exception,DataAccessException>; // Converts Lettuce Exceptions to DataAccessExceptions\n", "des": "Connection package for Lettuce Redis client."}
{"index": 1448, "repo": "spring-data-redis-3.1.2", "code": "package observability;\n\npublic class LettuceObservationContext extends io.micrometer.observation.transport.SenderContext<Object>; // Micrometer Observation.Context holding Lettuce contextual details.\npublic class MicrometerTracingAdapter extends Object implements io.lettuce.core.tracing.Tracing; // Tracing adapter using Micrometer's Observation.\npublic enum RedisObservation extends Enum<RedisObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // A Redis-based Observation.\n", "des": "Integration of Micrometer Tracing for Lettuce Observability."}
{"index": 1449, "repo": "spring-data-redis-3.1.2", "code": "package stream;\n\npublic interface ByteBufferRecord extends MapRecord<ByteBuffer,ByteBuffer,ByteBuffer>; // A Record within the stream backed by a collection of binary field/value pairs.\npublic interface ByteRecord extends MapRecord<byte[],byte[],byte[]>; // A Record within the stream backed by a collection of binary field/value pairs.\npublic class Consumer extends Object; // Value object representing a Stream consumer within a consumer group.\npublic interface MapRecord<S,K,V> extends Record<S,Map<K,V>>, Iterable<Map.Entry<K,V>>; // A Record within the stream backed by a collection of field/value pairs.\npublic interface ObjectRecord<S,V> extends Record<S,V>; // A Record within the stream mapped to a single object.\npublic class PendingMessage extends Object; // Value object representing a single pending message containing its ID, the consumer that fetched the message and has still to acknowledge it, the time elapsed since the messages last delivery and the the total number of times delivered.\npublic class PendingMessages extends Object implements Streamable<PendingMessage>; // Value object holding detailed information about pending messages in consumer group for a given Range and offset.\npublic class PendingMessagesSummary extends Object; // Value Object summarizing pending messages in a consumer group.\npublic final class ReadOffset extends Object; // Value object representing read offset for a Stream.\npublic interface Record<S,V>; // A single entry in the stream consisting of the entry-id and the actual entry-value (typically a collection of field/value pairs).\npublic class RecordId extends Object; // The id of a single Record within a stream.\npublic class StreamInfo extends Object;\npublic static class StreamInfo.XInfoConsumer extends StreamInfo.XInfoObject;\npublic static class StreamInfo.XInfoConsumers extends Object implements Streamable<StreamInfo.XInfoConsumer>;\npublic static class StreamInfo.XInfoGroup extends StreamInfo.XInfoObject;\npublic static class StreamInfo.XInfoGroups extends Object implements Streamable<StreamInfo.XInfoGroup>; // Value object holding general information about consumer groups associated with a Redis Stream.\npublic static class StreamInfo.XInfoObject extends Object;\npublic static class StreamInfo.XInfoStream extends StreamInfo.XInfoObject; // Value object holding general information about a Redis Stream.\n", "des": "Data structures and interfaces to interact with Redis Streams."}
{"index": 1450, "repo": "spring-data-redis-3.1.2", "code": "package util;\n\npublic abstract class AbstractSubscription extends Object implements Subscription; // Base implementation for a subscription handling the channel/pattern registration so subclasses only have to deal with the actual registration/unregistration.\npublic class ByteArraySet extends Object implements Set<ByteArrayWrapper>;\npublic class ByteArrayWrapper extends Object implements Comparable<ByteArrayWrapper>; // Simple wrapper class used for wrapping arrays so they can be used as keys inside maps.\npublic abstract class DecodeUtils extends Object; // Simple class containing various decoding utilities.\n", "des": "Internal utility package for encoding/decoding Strings to byte[] (using Base64) library."}
{"index": 1451, "repo": "spring-data-redis-3.1.2", "code": "package core;\n\npackage core.convert; // Converters for Redis repository support utilizing mapping metadata.\npackage core.index; // Abstractions for Redis secondary indexes.\npackage core.mapping; // Redis specific repository support mapping meta information.\npackage core.query; // Query package for Redis template.\npackage core.script; // Lua script execution abstraction.\npackage core.types; // Redis domain specific types.\npublic interface BoundGeoOperations<K,M> extends BoundKeyOperations<K>; // GeoOperations bound to a certain key.\npublic interface BoundHashOperations<H,HK,HV> extends BoundKeyOperations<H>; // Hash operations bound to a certain key.\npublic interface BoundKeyOperations<K>; // Operations over a Redis key.\npublic interface BoundListOperations<K,V> extends BoundKeyOperations<K>; // List operations bound to a certain key.\npublic interface BoundSetOperations<K,V> extends BoundKeyOperations<K>; // Set operations bound to a certain key.\npublic interface BoundStreamOperations<K,HK,HV>; // Redis stream specific operations bound to a certain key.\npublic interface BoundValueOperations<K,V> extends BoundKeyOperations<K>; // Value (or String in Redis terminology) operations bound to a certain key.\npublic interface BoundZSetOperations<K,V> extends BoundKeyOperations<K>; // ZSet (or SortedSet) operations bound to a certain key.\npublic interface BulkMapper<T,V>; // Mapper translating Redis bulk value responses (typically returned by a sort query) to actual objects.\npublic interface ClusterOperations<K,V>; // Redis operations for cluster specific operations.\npublic class ConvertingCursor<S,T> extends Object implements Cursor<T>; // ConvertingCursor wraps a given cursor and applies given Converter to items prior to returning them.\npublic interface Cursor<T> extends CloseableIterator<T>; // Cursor abstraction to scan over the keyspace or elements within a data structure using a variant of a SCAN command.\npublic class DefaultTypedTuple<V> extends Object implements ZSetOperations.TypedTuple<V>; // Default implementation of TypedTuple.\npublic interface GeoOperations<K,M>; // Redis operations for geo commands.\n", "des": "Core package for integrating Redis with Spring concepts."}
{"index": 1452, "repo": "spring-data-redis-3.1.2", "code": "package convert;\n\npublic class Bucket extends Object; // Bucket is the data bag for Redis hash structures to be used with RedisData.\npublic static class Bucket.BucketPropertyPath extends Object; // Value object representing a path within a Bucket.\npublic class CompositeIndexResolver extends Object implements IndexResolver; // Composite IndexResolver implementation that iterates over a given collection of delegate IndexResolver instances.\npublic class DefaultRedisTypeMapper extends DefaultTypeMapper<Bucket.BucketPropertyPath> implements RedisTypeMapper; // Default implementation of RedisTypeMapper allowing configuration of the key to lookup and store type information via Bucket.BucketPropertyPath in buckets.\npublic class GeoIndexedPropertyValue extends Object implements IndexedData; // IndexedData implementation indicating storage of data within a Redis GEO structure.\npublic interface IndexedData; // IndexedData represents a secondary index for a property path in a given keyspace.\npublic interface IndexResolver; // IndexResolver extracts secondary index structures to be applied on a given path, PersistentProperty and value.\npublic abstract class Jsr310Converters extends Object; // Helper class to register JSR-310 specific Converter implementations in case the we're running on Java 8.\npublic class KeyspaceConfiguration extends Object; // KeyspaceConfiguration allows programmatic setup of keyspaces and time to live options for certain types.\npublic static class KeyspaceConfiguration.KeyspaceSettings extends Object;\npublic class MappingConfiguration extends Object; // MappingConfiguration is used for programmatic configuration of secondary indexes, key prefixes, expirations and the such.\npublic class MappingRedisConverter extends Object implements RedisConverter, InitializingBean; // RedisConverter implementation creating flat binary map structure out of a given domain type.\npublic static class MappingRedisConverter.BinaryKeyspaceIdentifier extends Object; // Value object representing a binary Redis Hash/Object identifier composed from keyspace and object id in the form of keyspace:id.\npublic static class MappingRedisConverter.KeyspaceIdentifier extends Object; // Value object representing a Redis Hash/Object identifier composed from keyspace and object id in the form of keyspace:id.\npublic class PathIndexResolver extends Object implements IndexResolver; // IndexResolver implementation considering properties annotated with Indexed or paths set up in IndexConfiguration.\npublic interface RedisConverter extends EntityConverter<RedisPersistentEntity<?>,RedisPersistentProperty,Object,RedisData>; // Redis specific EntityConverter.\npublic class RedisCustomConversions extends CustomConversions; // Value object to capture custom conversion.\n", "des": "Converters for Redis repository support utilizing mapping metadata."}
{"index": 1453, "repo": "spring-data-redis-3.1.2", "code": "package index;\n\npublic interface ConfigurableIndexDefinitionProvider extends IndexDefinitionProvider, IndexDefinitionRegistry; // IndexDefinitionProvider that allows registering new IndexDefinition via IndexDefinitionRegistry.\npublic class GeoIndexDefinition extends RedisIndexDefinition implements PathBasedRedisIndexDefinition;\n@Documented @Retention(RUNTIME) @Target({FIELD,ANNOTATION_TYPE}) public @interface GeoIndexed; // Mark properties value to be included in a secondary index.\npublic class IndexConfiguration extends Object implements ConfigurableIndexDefinitionProvider; // IndexConfiguration allows programmatic setup of indexes.\npublic interface IndexDefinition; // IndexDefinition allow to set up a blueprint for creating secondary index structures in Redis.\npublic static interface IndexDefinition.Condition<T>;\npublic static final class IndexDefinition.IndexingContext extends Object; // Context in which a particular value is about to get indexed.\npublic interface IndexDefinitionProvider; // IndexDefinitionProvider give access to IndexDefinitions for creating secondary index structures.\npublic interface IndexDefinitionRegistry; // Registry that allows adding IndexDefinition.\n@Documented @Retention(RUNTIME) @Target({FIELD,ANNOTATION_TYPE}) public @interface Indexed; // Mark properties value to be included in a secondary index.\npublic interface IndexValueTransformer extends Converter<Object,Object>; // Converter implementation that is used to transform values for usage in a particular secondary index.\npublic interface PathBasedRedisIndexDefinition extends IndexDefinition; // IndexDefinition that is based on a property paths.\npublic abstract class RedisIndexDefinition extends Object implements IndexDefinition; // Base IndexDefinition implementation.\npublic static class RedisIndexDefinition.CompositeValueTransformer extends Object implements IndexValueTransformer;\npublic static enum RedisIndexDefinition.LowercaseIndexValueTransformer extends Enum<RedisIndexDefinition.LowercaseIndexValueTransformer> implements IndexValueTransformer;\npublic static enum RedisIndexDefinition.NoOpValueTransformer extends Enum<RedisIndexDefinition.NoOpValueTransformer> implements IndexValueTransformer;\npublic static class RedisIndexDefinition.OrCondition<T> extends Object implements IndexDefinition.Condition<T>;\npublic static class RedisIndexDefinition.PathCondition extends Object implements IndexDefinition.Condition<Object>;\npublic class SimpleIndexDefinition extends RedisIndexDefinition implements PathBasedRedisIndexDefinition; // PathBasedRedisIndexDefinition for including property values in a secondary index.\n", "des": "Abstractions for Redis secondary indexes."}
{"index": 1454, "repo": "spring-data-redis-3.1.2", "code": "package mapping;\n\npublic class BasicRedisPersistentEntity<T> extends org.springframework.data.keyvalue.core.mapping.BasicKeyValuePersistentEntity<T,RedisPersistentProperty> implements RedisPersistentEntity<T>; // RedisPersistentEntity implementation.\npublic class RedisMappingContext extends org.springframework.data.keyvalue.core.mapping.context.KeyValueMappingContext<RedisPersistentEntity<?>,RedisPersistentProperty>; // Redis specific MappingContext.\npublic interface RedisPersistentEntity<T> extends org.springframework.data.keyvalue.core.mapping.KeyValuePersistentEntity<T,RedisPersistentProperty>; // Redis specific PersistentEntity.\npublic class RedisPersistentProperty extends org.springframework.data.keyvalue.core.mapping.KeyValuePersistentProperty<RedisPersistentProperty>; // Redis specific PersistentProperty implementation.\n", "des": "Redis specific repository support mapping meta information."}
{"index": 1455, "repo": "spring-data-redis-3.1.2", "code": "package query;\n\npublic abstract class QueryUtils extends Object; // Utilities for SortQuery implementations.\npublic interface SortCriterion<K>; // Internal interface part of the Sort DSL.\npublic interface SortQuery<K>; // High-level abstraction over a Redis SORT (generified equivalent of SortParameters).\npublic class SortQueryBuilder<K> extends Object; // Simple builder class for constructing SortQuery.\n", "des": "Query package for Redis template."}
{"index": 1456, "repo": "spring-data-redis-3.1.2", "code": "package script;\n\npublic class DefaultReactiveScriptExecutor<K> extends Object implements ReactiveScriptExecutor<K>; // Default implementation of ReactiveScriptExecutor.\npublic class DefaultRedisScript<T> extends Object implements RedisScript<T>, InitializingBean; // Default implementation of RedisScript.\npublic class DefaultScriptExecutor<K> extends Object implements ScriptExecutor<K>; // Default implementation of ScriptExecutor.\npublic abstract class DigestUtils extends Object; // Utilties for working with MessageDigest\npublic interface ReactiveScriptExecutor<K>; // Executes RedisScripts using reactive infrastructure.\npublic interface RedisScript<T>; // A script to be executed using the Redis scripting support available as of version 2.6\npublic interface ScriptExecutor<K>; // Executes RedisScripts\npublic class ScriptingException extends NestedRuntimeException; // RuntimeException thrown when issues occur with RedisScripts\n", "des": "Lua script execution abstraction."}
{"index": 1457, "repo": "spring-data-redis-3.1.2", "code": "package types;\n\npublic class Expiration extends Object; // Expiration holds a value with its associated TimeUnit.\npublic class RedisClientInfo extends Object; // RedisClientInfo provides general and statistical information about client connections.\npublic static enum RedisClientInfo.INFO extends Enum<RedisClientInfo.INFO>;\npublic static class RedisClientInfo.RedisClientInfoBuilder extends Object;\n", "des": "Redis domain specific types."}
{"index": 1458, "repo": "spring-data-redis-3.1.2", "code": "package hash;\n\npublic class BeanUtilsHashMapper<T> extends Object implements HashMapper<T,String,String>; // HashMapper based on Apache Commons BeanUtils project.\npublic class DecoratingStringHashMapper<T> extends Object implements HashMapper<T,String,String>; // Delegating hash mapper used for flattening objects into Strings.\npublic interface HashMapper<T,K,V>; // Core mapping contract between Java types and Redis hashes/maps.\npublic class Jackson2HashMapper extends Object implements HashMapper<Object,String,Object>; // ObjectMapper based HashMapper implementation that allows flattening.\npublic class ObjectHashMapper extends Object implements HashMapper<Object,byte[],byte[]>; // HashMapper based on MappingRedisConverter.\n", "des": "Dedicated support package for Redis hashes."}
{"index": 1459, "repo": "spring-data-redis-3.1.2", "code": "package listener;\n\npackage listener.adapter; // Message listener adapter package.\npublic class ChannelTopic extends Object implements Topic; // Channel topic implementation (maps to a Redis channel).\npublic class KeyExpirationEventMessageListener extends KeyspaceEventMessageListener implements ApplicationEventPublisherAware; // MessageListener publishing RedisKeyExpiredEvents via ApplicationEventPublisher by listening to Redis keyspace notifications for key expirations.\npublic abstract class KeyspaceEventMessageListener extends Object implements MessageListener, InitializingBean, DisposableBean; // Base MessageListener implementation for listening to Redis keyspace notifications.\npublic class PatternTopic extends Object implements Topic; // Pattern topic (matching multiple channels).\npublic class ReactiveRedisMessageListenerContainer extends Object implements DisposableBean; // Container providing a stream of ReactiveSubscription.ChannelMessage for messages received via Redis Pub/Sub listeners.\npublic class RedisMessageListenerContainer extends Object implements InitializingBean, DisposableBean, BeanNameAware, SmartLifecycle; // Container providing asynchronous behaviour for Redis message listeners.\npublic interface Topic; // Topic for a Redis message.\n", "des": "Base package for Redis message listener / pubsub container facility"}
{"index": 1460, "repo": "spring-data-redis-3.1.2", "code": "package adapter;\n\npublic class MessageListenerAdapter extends Object implements InitializingBean, MessageListener; // Message listener adapter that delegates the handling of messages to target listener methods via reflection, with flexible message type conversion.\npublic class RedisListenerExecutionFailedException extends InvalidDataAccessApiUsageException; // Exception thrown when the execution of a listener method failed.\n", "des": "Message listener adapter package."}
{"index": 1461, "repo": "spring-data-redis-3.1.2", "code": "package cdi;\n\npublic abstract class CdiBean<T> extends Object implements jakarta.enterprise.inject.spi.Bean<T>, jakarta.enterprise.inject.spi.PassivationCapable; // Base class for Bean wrappers.\npublic class RedisKeyValueAdapterBean extends CdiBean<RedisKeyValueAdapter>; // CdiBean to create RedisKeyValueAdapter instances.\npublic class RedisKeyValueTemplateBean extends CdiBean<org.springframework.data.keyvalue.core.KeyValueOperations>; // CdiBean to create RedisKeyValueTemplate instances.\npublic class RedisRepositoryBean<T> extends CdiRepositoryBean<T>; // CdiRepositoryBean to create Redis repository instances.\npublic class RedisRepositoryExtension extends CdiRepositoryExtensionSupport; // CDI extension to export Redis repositories.\n", "des": "CDI support for Redis specific repository implementation."}
{"index": 1462, "repo": "spring-data-redis-3.1.2", "code": "package configuration;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(RedisRepositoriesRegistrar.class) @QueryCreatorType(RedisQueryCreator.class) public @interface EnableRedisRepositories; // Annotation to activate Redis repositories.\npublic class RedisRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport; // Redis specific ImportBeanDefinitionRegistrar.\npublic class RedisRepositoryConfigurationExtension extends org.springframework.data.keyvalue.repository.config.KeyValueRepositoryConfigurationExtension; // RepositoryConfigurationExtension for Redis.\n", "des": "Redis repository specific configuration and bean registration."}
{"index": 1463, "repo": "spring-data-redis-3.1.2", "code": "package core;\n\npublic class MappingRedisEntityInformation<T,ID> extends PersistentEntityInformation<T,ID> implements RedisEntityInformation<T,ID>; // RedisEntityInformation implementation using a RedisPersistentEntity instance to lookup the necessary information.\npublic interface RedisEntityInformation<T,ID> extends EntityInformation<T,ID>;\n", "des": "Core domain entities for repository support."}
{"index": 1464, "repo": "spring-data-redis-3.1.2", "code": "package query;\n\npublic class ExampleQueryMapper extends Object; // Mapper for Query-by-Example examples to an actual query.\npublic class RedisOperationChain extends Object; // Simple set of operations required to run queries against Redis.\npublic static class RedisOperationChain.NearPath extends RedisOperationChain.PathAndValue;\npublic static class RedisOperationChain.PathAndValue extends Object;\npublic class RedisQueryCreator extends AbstractQueryCreator<org.springframework.data.keyvalue.core.query.KeyValueQuery<RedisOperationChain>,RedisOperationChain>; // Redis specific query creator.\n", "des": "Redis specific query execution engine."}
{"index": 1465, "repo": "spring-data-redis-3.1.2", "code": "package support;\n\npublic class QueryByExampleRedisExecutor<T> extends Object implements QueryByExampleExecutor<T>, BeanFactoryAware, BeanClassLoaderAware; // Repository fragment implementing Redis Query-by-Example operations.\npublic class RedisRepositoryFactory extends org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactory; // RepositoryFactorySupport specific of handing Redis KeyValueRepository.\npublic class RedisRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactoryBean<T,S,ID>; // Adapter for Springs FactoryBean interface to allow easy setup of RedisRepositoryFactory via Spring configuration.\n", "des": "Spring context specific factory support."}
{"index": 1466, "repo": "spring-data-redis-3.1.2", "code": "package serializer;\n\npublic class GenericJackson2JsonRedisSerializer extends Object implements RedisSerializer<Object>; // Generic Jackson 2-based RedisSerializer that maps objects to JSON using dynamic typing.\npublic class GenericToStringSerializer<T> extends Object implements RedisSerializer<T>, BeanFactoryAware; // Generic String to byte[] (and back) serializer.\npublic class Jackson2JsonRedisSerializer<T> extends Object implements RedisSerializer<T>; // RedisSerializer that can read and write JSON using Jackson's and Jackson Databind ObjectMapper.\n@FunctionalInterface public interface JacksonObjectReader; // Defines the contract for Object Mapping readers.\n@FunctionalInterface public interface JacksonObjectWriter; // Defines the contract for Object Mapping writers.\npublic class JdkSerializationRedisSerializer extends Object implements RedisSerializer<Object>; // Java Serialization Redis serializer.\npublic class OxmSerializer extends Object implements InitializingBean, RedisSerializer<Object>; // Serializer adapter on top of Spring's O/X Mapping.\n@FunctionalInterface public interface RedisElementReader<T>; // Strategy interface that specifies a deserializer that can deserialize a binary element representation stored in Redis into an object.\n@FunctionalInterface public interface RedisElementWriter<T>; // Strategy interface that specifies a serializer that can serialize an element to its binary representation to be used as Redis protocol payload.\npublic interface RedisSerializationContext<K,V>; // Serialization context for reactive use.\npublic static interface RedisSerializationContext.RedisSerializationContextBuilder<K,V>; // Builder for RedisSerializationContext.\npublic static interface RedisSerializationContext.SerializationPair<T>; // Typed serialization tuple.\npublic interface RedisSerializer<T>; // Basic interface serialization and deserialization of Objects to byte arrays (binary data).\npublic class SerializationException extends NestedRuntimeException; // Generic exception indicating a serialization/deserialization error.\npublic abstract class SerializationUtils extends Object; // Utility class with various serialization-related methods.\npublic class StringRedisSerializer extends Object implements RedisSerializer<String>; // Simple String to byte[] (and back) serializer.\n", "des": "Serialization/Deserialization package for converting Object to (and from) binary data."}
{"index": 1467, "repo": "spring-data-redis-3.1.2", "code": "package atomic;\n\npublic class RedisAtomicDouble extends Number implements Serializable, BoundKeyOperations<String>; // Atomic double backed by Redis.\npublic class RedisAtomicInteger extends Number implements Serializable, BoundKeyOperations<String>; // Atomic integer backed by Redis.\npublic class RedisAtomicLong extends Number implements Serializable, BoundKeyOperations<String>; // Atomic long backed by Redis.\n", "des": "Small toolkit mirroring the java.util.atomic package in Redis."}
{"index": 1468, "repo": "spring-data-redis-3.1.2", "code": "package collections;\n\npublic abstract class AbstractRedisCollection<E> extends AbstractCollection<E> implements RedisCollection<E>; // Base implementation for RedisCollection.\npublic abstract class CollectionUtils extends Object; // Utility class used mainly for type conversion by the default collection implementations.\npublic class DefaultRedisList<E> extends AbstractRedisCollection<E> implements RedisList<E>; // Default implementation for RedisList.\npublic class DefaultRedisMap<K,V> extends Object implements RedisMap<K,V>; // Default implementation for RedisMap.\npublic class DefaultRedisSet<E> extends AbstractRedisCollection<E> implements RedisSet<E>; // Default implementation for RedisSet.\npublic class DefaultRedisZSet<E> extends AbstractRedisCollection<E> implements RedisZSet<E>; // Default implementation for RedisZSet.\npublic interface RedisCollection<E> extends RedisStore; // Redis extension for the Collection contract.\npublic class RedisCollectionFactoryBean extends Object implements InitializingBean, BeanNameAware, FactoryBean<RedisStore>; // Factory bean that facilitates creation of Redis-based collections.\npublic static enum RedisCollectionFactoryBean.CollectionType extends Enum<RedisCollectionFactoryBean.CollectionType>; // Collection types supported by this factory.\npublic interface RedisList<E> extends RedisCollection<E>, List<E>, BlockingDeque<E>; // Redis extension for the List contract.\npublic interface RedisMap<K,V> extends RedisStore, ConcurrentMap<K,V>; // Map view of a Redis hash.\npublic class RedisProperties extends Properties implements RedisMap<Object,Object>; // Properties extension for a Redis back-store.\npublic interface RedisSet<E> extends RedisCollection<E>, Set<E>; // Redis extension for the Set contract.\npublic interface RedisStore extends BoundKeyOperations<String>; // Basic interface for Redis-based collections.\npublic interface RedisZSet<E> extends RedisCollection<E>, Set<E>; // Redis ZSet (or sorted set (by weight)).\n", "des": "Package providing implementations for most of the java.util collections on top of Redis."}
{"index": 1469, "repo": "spring-data-redis-3.1.2", "code": "package util;\n\npublic final class ByteUtils extends Object; // Some handy methods for dealing with byte arrays.\npublic abstract class RedisAssertions extends Object; // Abstract utility class for common assertions used in Spring Data Redis.\n", "des": "Commonly used stuff for data manipulation throughout different driver specific implementations."}
{"index": 1470, "repo": "spring-boot-configuration-processor-3.1.1", "code": "package configurationprocessor;\n\npackage configurationprocessor.fieldvalues; // Abstraction for field value parsing.\npackage configurationprocessor.metadata; // The configuration properties meta-data model and JSON writing support.\n@SupportedAnnotationTypes({\"org.springframework.boot.autoconfigure.AutoConfiguration\",\"org.springframework.boot.context.properties.ConfigurationProperties\",\"org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpoint\",\"org.springframework.boot.actuate.endpoint.annotation.Endpoint\",\"org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpoint\",\"org.springframework.boot.actuate.endpoint.web.annotation.RestControllerEndpoint\",\"org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpoint\",\"org.springframework.boot.actuate.endpoint.web.annotation.WebEndpoint\",\"org.springframework.context.annotation.Configuration\"}) public class ConfigurationMetadataAnnotationProcessor extends AbstractProcessor; // Annotation Processor that writes meta-data file for @ConfigurationProperties.\npublic class MetadataCollector extends Object; // Used by ConfigurationMetadataAnnotationProcessor to collect ConfigurationMetadata.\npublic class MetadataStore extends Object; // A MetadataStore is responsible for the storage of metadata on the filesystem.\n", "des": "Annotation processor to create @ConfigurationProperties meta-data files."}
{"index": 1471, "repo": "spring-boot-configuration-processor-3.1.1", "code": "package fieldvalues;\n\npackage fieldvalues.javac; // Field value parsing for the standard Java compiler.\n@FunctionalInterface public interface FieldValuesParser; // Parser which can be used to obtain the field values from an TypeElement.\n", "des": "Abstraction for field value parsing."}
{"index": 1472, "repo": "spring-boot-configuration-processor-3.1.1", "code": "package javac;\n\npublic class JavaCompilerFieldValuesParser extends Object implements FieldValuesParser; // FieldValuesParser implementation for the standard Java compiler.\n", "des": "Field value parsing for the standard Java compiler."}
{"index": 1473, "repo": "spring-boot-configuration-processor-3.1.1", "code": "package metadata;\n\npublic class ConfigurationMetadata extends Object; // Configuration meta-data.\npublic class InvalidConfigurationMetadataException extends RuntimeException; // Thrown to indicate that some meta-data is invalid.\npublic class ItemDeprecation extends Object; // Describe an item deprecation.\npublic class ItemHint extends Object implements Comparable<ItemHint>; // Provide hints on an ItemMetadata.\npublic static class ItemHint.ValueHint extends Object; // A hint for a value.\npublic static class ItemHint.ValueProvider extends Object; // A value provider.\npublic final class ItemMetadata extends Object implements Comparable<ItemMetadata>; // A group or property meta-data item from some ConfigurationMetadata.\npublic static enum ItemMetadata.ItemType extends Enum<ItemMetadata.ItemType>; // The item type.\npublic class JsonMarshaller extends Object; // Marshaller to write ConfigurationMetadata as JSON.\n", "des": "The configuration properties meta-data model and JSON writing support."}
{"index": 1474, "repo": "spring-shell-core-3.1.2", "code": "package shell;\n\npackage shell.jline; // Contains classes that leverage the JLine library to hook into the Spring Shell REPL.\npackage shell.result; // Contains strategies for dealing with results of commands.\npublic class Availability extends Object; // Indicates whether or not a command is currently available.\n@FunctionalInterface public interface AvailabilityProvider extends Supplier<Availability>; // Interface resolving Availability.\npublic final class AvailabilityReflectiveProcessor extends Object implements org.springframework.aot.hint.annotation.ReflectiveProcessor; // A ReflectiveProcessor implementation that registers methods of a return type Availability from a target which is a class.\npublic interface Command;\npublic static class Command.Help extends Object; // Encapsulates help metadata about a shell command.\npublic class CommandNotCurrentlyAvailable extends RuntimeException; // Indicates that a command exists but is currently not invokable.\npublic class CommandNotFound extends RuntimeException; // A result to be handled by the ResultHandler when no command could be mapped to user input\n@FunctionalInterface public interface CompletingParsedLine; // An extension of ParsedLine that, being aware of the quoting and escaping rules of the Parser that produced it, knows if and how a completion candidate should be escaped/quoted.\npublic class CompletionContext extends Object; // Represents the buffer context in which completion was triggered.\npublic class CompletionProposal extends Object; // Represents a proposal for TAB completion, made not only of the text to append, but also metadata about the proposal.\n@Order(0) public class DefaultShellApplicationRunner extends Object implements ShellApplicationRunner; // Default ShellApplicationRunner which dispatches to the first ordered ShellRunner able to handle the shell.\npublic class ExitRequest extends RuntimeException; // This exception, when thrown and caught, will ask the shell to gracefully shutdown.\npublic interface Input; // Represents the input buffer to the shell.\npublic interface InputProvider; // To be implemented by components able to provide a \"line\" of user input, whether interactively or by batch.\npublic class JnaRuntimeHints extends Object implements org.springframework.aot.hint.RuntimeHintsRegistrar;\npublic interface MethodTargetRegistrar; // Strategy interface for registering commands.\npublic class ParameterResolverMissingException extends RuntimeException; // Thrown when no ParameterResolver is found for a parameter during a resolve operation.\n", "des": "Contains core classes for Spring Shell, irrespective of the way commands are actually implemented."}
{"index": 1475, "repo": "spring-shell-core-3.1.2", "code": "package jline;\n\npublic class ExtendedDefaultParser extends Object implements org.jline.reader.Parser; // Shameful copy-paste of JLine's DefaultParser which creates CompletingParsedLine.\npublic class FileInputProvider extends Object implements InputProvider, Closeable; // An InputProvider that reads input from file-like sources.\n@Order(0) public class InteractiveShellRunner extends Object implements ShellRunner; // A ShellRunner that bootstraps the shell in interactive mode.\npublic static class InteractiveShellRunner.JLineInputProvider extends Object implements InputProvider;\n@Order(-50) public class NonInteractiveShellRunner extends Object implements ShellRunner; // A ShellRunner that executes commands without entering interactive shell mode.\npublic interface PromptProvider; // Called at each REPL cycle to decide what the prompt should be.\n@Order(-100) public class ScriptShellRunner extends Object implements ShellRunner; // A ShellRunner that looks for process arguments that start with @, which are then interpreted as references to script files to run and exit.\n", "des": "Contains classes that leverage the JLine library to hook into the Spring Shell REPL."}
{"index": 1476, "repo": "spring-shell-core-3.1.2", "code": "package result;\n\npublic class AttributedCharSequenceResultHandler extends TerminalAwareResultHandler<org.jline.utils.AttributedCharSequence>; // A ResultHandler that knows how to render JLine's AttributedCharSequence.\n@FunctionalInterface public interface CommandNotFoundMessageProvider extends Function<CommandNotFoundMessageProvider.ProviderContext,String>; // Provider for a message used within CommandNotFoundResultHandler.\npublic static interface CommandNotFoundMessageProvider.ProviderContext; // Context for CommandNotFoundResultHandler.\npublic final class CommandNotFoundResultHandler extends TerminalAwareResultHandler<CommandNotFound>; // ResultHandler for CommandNotFound using CommandNotFoundMessageProvider to provide an error message.\npublic class DefaultResultHandler extends TerminalAwareResultHandler<Object>; // A simple ResultHandler that deals with Objects (hence comes as a last resort) and prints the Object.toString() value of results to standard out.\npublic interface GenericResultHandler;\npublic class GenericResultHandlerService extends Object implements ResultHandlerService; // Base implementation suitable for use in most environments.\npublic class ParameterValidationExceptionResultHandler extends TerminalAwareResultHandler<ParameterValidationException>; // Displays validation errors on the terminal.\n@Configuration(proxyBeanMethods=false) public class ResultHandlerConfig extends Object; // Used for explicit configuration of ResultHandlers.\npublic class ResultHandlerNotFoundException extends ResultHandlingException;\npublic class ResultHandlingException extends org.springframework.core.NestedRuntimeException;\npublic abstract class TerminalAwareResultHandler<T> extends Object implements ResultHandler<T>; // Base class for ResultHandlers that rely on JLine's Terminal.\npublic class TerminalSizeAwareResultHandler extends TerminalAwareResultHandler<org.springframework.shell.TerminalSizeAware>; // A ResultHandler that prints TerminalSizeAware according to the Terminal size.\npublic class ThrowableResultHandler extends TerminalAwareResultHandler<Throwable>; // A ResultHandler that prints thrown exceptions messages in red.\n", "des": "Contains strategies for dealing with results of commands."}
{"index": 1477, "repo": "tribuo-core-4.3.1", "code": "package tribuo;\n\npackage tribuo.dataset; // Provides utility datasets which subsample or otherwise transform the wrapped dataset.\npackage tribuo.datasource; // Simple data sources for ingesting or aggregating data.\npackage tribuo.ensemble; // Provides an interface for model prediction combinations, two base classes for ensemble models, a base class for ensemble excuses, and a Bagging implementation.\npackage tribuo.evaluation; // Evaluation base classes, along with code for train/test splits and cross validation.\npackage tribuo.hash; // Provides the base interface and implementations of the Model hashing which obscures the feature names stored in a model.\npackage tribuo.impl; // Provides implementations of base classes and interfaces from org.tribuo.\npackage tribuo.protos; // Classes which control the serialization of Tribuo objects to and from protocol buffers.\npackage tribuo.provenance; // Provides Tribuo specific infrastructure for the Provenance system which tracks models and datasets.\npackage tribuo.sequence; // Provides core classes for working with sequences of Examples.\npackage tribuo.transform; // Provides infrastructure for applying transformations to a Dataset.\npackage tribuo.util; // Provides utilities which don't have other Tribuo dependencies.\npublic class CategoricalIDInfo extends CategoricalInfo implements VariableIDInfo; // Same as a CategoricalInfo, but with an additional int id field.\npublic class CategoricalInfo extends SkeletalVariableInfo; // Stores information about Categorical features.\npublic interface ConfigurableDataSource<T extends Output<T>> extends DataSource<T>, com.oracle.labs.mlrg.olcut.config.Configurable; // It's a DataSource that's also Configurable.\npublic abstract class Dataset<T extends Output<T>> extends Object implements Iterable<Example<T>>, ProtoSerializable<org.tribuo.protos.core.DatasetProto>, com.oracle.labs.mlrg.olcut.provenance.Provenancable<DatasetProvenance>, Serializable; // A class for sets of data, which are used to train and evaluate classifiers.\n", "des": "Provides the core interfaces and classes for using Tribuo."}
{"index": 1478, "repo": "tribuo-core-4.3.1", "code": "package dataset;\n\npublic final class DatasetView<T extends Output<T>> extends ImmutableDataset<T>; // DatasetView provides an immutable view on another Dataset that only exposes selected examples.\npublic static final class DatasetView.DatasetViewProvenance extends DatasetProvenance; // Provenance for the DatasetView.\npublic class MinimumCardinalityDataset<T extends Output<T>> extends ImmutableDataset<T>; // This class creates a pruned dataset in which low frequency features that occur less than the provided minimum cardinality have been removed.\npublic static class MinimumCardinalityDataset.MinimumCardinalityDatasetProvenance extends DatasetProvenance; // Provenance for MinimumCardinalityDataset.\npublic final class SelectedFeatureDataset<T extends Output<T>> extends ImmutableDataset<T>; // This class creates a pruned dataset which only contains the selected features.\npublic static final class SelectedFeatureDataset.SelectedFeatureDatasetProvenance extends DatasetProvenance; // Provenance for SelectedFeatureDataset.\n", "des": "Provides utility datasets which subsample or otherwise transform the wrapped dataset."}
{"index": 1479, "repo": "tribuo-core-4.3.1", "code": "package datasource;\n\npublic class AggregateConfigurableDataSource<T extends Output<T>> extends Object implements ConfigurableDataSource<T>; // Aggregates multiple ConfigurableDataSources, uses AggregateDataSource.IterationOrder to control the iteration order.\npublic static class AggregateConfigurableDataSource.AggregateConfigurableDataSourceProvenance extends com.oracle.labs.mlrg.olcut.provenance.impl.SkeletalConfiguredObjectProvenance implements DataSourceProvenance; // Provenance for the AggregateConfigurableDataSource.\npublic class AggregateDataSource<T extends Output<T>> extends Object implements DataSource<T>; // Aggregates multiple DataSources, uses AggregateDataSource.IterationOrder to control the iteration order.\npublic static class AggregateDataSource.AggregateDataSourceProvenance extends Object implements DataSourceProvenance; // Provenance for the AggregateDataSource.\npublic static enum AggregateDataSource.IterationOrder extends Enum<AggregateDataSource.IterationOrder>; // Specifies the iteration order of the inner sources.\npublic final class IDXDataSource<T extends Output<T>> extends Object implements ConfigurableDataSource<T>; // A DataSource which can read IDX formatted data (i.e., MNIST).\npublic static class IDXDataSource.IDXData extends Object; // Java side representation for an IDX file.\npublic static final class IDXDataSource.IDXDataSourceProvenance extends com.oracle.labs.mlrg.olcut.provenance.impl.SkeletalConfiguredObjectProvenance implements DataSourceProvenance; // Provenance class for IDXDataSource.\npublic static enum IDXDataSource.IDXType extends Enum<IDXDataSource.IDXType>; // The possible IDX input formats.\npublic final class LibSVMDataSource<T extends Output<T>> extends Object implements ConfigurableDataSource<T>; // A DataSource which can read LibSVM formatted data.\npublic static final class LibSVMDataSource.LibSVMDataSourceProvenance extends com.oracle.labs.mlrg.olcut.provenance.impl.SkeletalConfiguredObjectProvenance implements DataSourceProvenance; // The provenance for a LibSVMDataSource.\npublic class ListDataSource<T extends Output<T>> extends Object implements DataSource<T>; // A data source which wraps up a list of Examples along with their DataSourceProvenance and an OutputFactory.\n", "des": "Simple data sources for ingesting or aggregating data."}
{"index": 1480, "repo": "tribuo-core-4.3.1", "code": "package ensemble;\n\npublic class BaggingTrainer<T extends Output<T>> extends Object implements Trainer<T>; // A Trainer that wraps another trainer and produces a bagged ensemble.\npublic interface EnsembleCombiner<T extends Output<T>> extends com.oracle.labs.mlrg.olcut.config.Configurable, ProtoSerializable<org.tribuo.protos.core.EnsembleCombinerProto>, com.oracle.labs.mlrg.olcut.provenance.Provenancable<com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance>, Serializable; // An interface for combining predictions.\npublic class EnsembleExcuse<T extends Output<T>> extends Excuse<T>; // An Excuse which has a List of excuses for each of the ensemble members.\npublic abstract class EnsembleModel<T extends Output<T>> extends Model<T>; // A model which contains a list of other Models.\npublic final class WeightedEnsembleModel<T extends Output<T>> extends EnsembleModel<T> implements ONNXExportable; // An ensemble model that uses weights to combine the ensemble member predictions.\n", "des": "Provides an interface for model prediction combinations, two base classes for ensemble models, a base class for ensemble excuses, and a Bagging implementation."}
{"index": 1481, "repo": "tribuo-core-4.3.1", "code": "package evaluation;\n\npackage evaluation.metrics; // This package contains the infrastructure classes for building evaluation metrics.\npublic abstract class AbstractEvaluator<T extends Output<T>,C extends MetricContext<T>,E extends Evaluation<T>,M extends EvaluationMetric<T,C>> extends Object implements Evaluator<T,E>; // Base class for evaluators.\npublic class CrossValidation<T extends Output<T>,E extends Evaluation<T>> extends Object; // A class that does k-fold cross-validation.\npublic final class DescriptiveStats extends Object; // Descriptive statistics calculated across a list of doubles.\npublic interface Evaluation<T extends Output<T>> extends com.oracle.labs.mlrg.olcut.provenance.Provenancable<EvaluationProvenance>; // An immutable evaluation of a specific model and dataset.\npublic final class EvaluationAggregator extends Object; // Aggregates metrics from a list of evaluations, or a list of models and datasets.\n@FunctionalInterface public interface EvaluationRenderer<T extends Output<T>,E extends Evaluation<T>>; // Renders an Evaluation into a String.\npublic interface Evaluator<T extends Output<T>,E extends Evaluation<T>>; // An evaluation factory which produces immutable Evaluations of a given Dataset using the given Model.\npublic class KFoldSplitter<T extends Output<T>> extends Object; // A k-fold splitter to be used in cross-validation.\npublic static class KFoldSplitter.TrainTestFold<T extends Output<T>> extends Object; // Stores a train/test split for a dataset.\npublic final class OnlineEvaluator<T extends Output<T>,E extends Evaluation<T>> extends Object; // An evaluator which aggregates predictions and produces Evaluations covering all the Predictions it has seen or created.\npublic class TrainTestSplitter<T extends Output<T>> extends Object; // Splits data into training and testing sets.\npublic static class TrainTestSplitter.SplitDataSourceProvenance extends Object implements DataSourceProvenance; // Provenance for a split data source.\n", "des": "Evaluation base classes, along with code for train/test splits and cross validation."}
{"index": 1482, "repo": "tribuo-core-4.3.1", "code": "package metrics;\n\npublic interface EvaluationMetric<T extends Output<T>,C extends MetricContext<T>>; // A metric that can be calculated for the specified output type.\npublic static enum EvaluationMetric.Average extends Enum<EvaluationMetric.Average>; // Specifies what form of average to use for a EvaluationMetric.\npublic abstract class MetricContext<T extends Output<T>> extends Object; // The context for a metric or set of metrics.\npublic final class MetricID<T extends Output<T>> extends com.oracle.labs.mlrg.olcut.util.Pair<MetricTarget<T>,String>; // Just an easier-to-read alias for Pair<MetricTarget<T>, String>.\npublic class MetricTarget<T extends Output<T>> extends Object; // Used by a given EvaluationMetric to determine whether it should compute its value for a specific Output value or whether it should average them.\n", "des": "This package contains the infrastructure classes for building evaluation metrics."}
{"index": 1483, "repo": "tribuo-core-4.3.1", "code": "package hash;\n\npublic final class HashCodeHasher extends Hasher; // Hashes names using String.hashCode().\npublic static final class HashCodeHasher.HashCodeHasherProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // Provenance for the HashCodeHasher.\npublic final class HashedFeatureMap extends ImmutableFeatureMap; // A FeatureMap used by the HashingTrainer to provide feature name hashing and guarantee that the Model does not contain feature name information, but still works with unhashed features names.\npublic abstract class Hasher extends Object implements com.oracle.labs.mlrg.olcut.config.Configurable, com.oracle.labs.mlrg.olcut.provenance.Provenancable<com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance>, Serializable, ProtoSerializable<org.tribuo.protos.core.HasherProto>; // An abstract base class for hash functions used to hash the names of features.\npublic class HashingOptions extends Object implements com.oracle.labs.mlrg.olcut.config.Options; // An Options implementation which provides CLI arguments for the model hashing functionality.\npublic static enum HashingOptions.ModelHashingType extends Enum<HashingOptions.ModelHashingType>; // Supported types of hashes in CLI programs.\npublic final class HashingTrainer<T extends Output<T>> extends Object implements Trainer<T>; // A Trainer which hashes the Dataset before the Model is produced.\npublic final class MessageDigestHasher extends Hasher; // Hashes Strings using the supplied MessageDigest type.\npublic static final class MessageDigestHasher.MessageDigestHasherProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // Provenance for MessageDigestHasher.\npublic final class ModHashCodeHasher extends Hasher; // Hashes names using String.hashCode(), then reduces the dimension.\npublic static final class ModHashCodeHasher.ModHashCodeHasherProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // Provenance for the ModHashCodeHasher.\n", "des": "Provides the base interface and implementations of the Model hashing which obscures the feature names stored in a model."}
{"index": 1484, "repo": "tribuo-core-4.3.1", "code": "package impl;\n\npublic class ArrayExample<T extends Output<T>> extends Example<T>; // An Example backed by two arrays, one of String and one of double.\npublic final class BinaryFeaturesExample<T extends Output<T>> extends Example<T>; // An Example backed by a single array of feature names.\npublic final class DatasetDataCarrier<T extends Output<T>> extends Object; // Serialization carrier for common fields in Dataset.\npublic class IndexedArrayExample<T extends Output<T>> extends ArrayExample<T>; // A version of ArrayExample which also has the id numbers.\npublic static class IndexedArrayExample.FeatureTuple extends Object; // A tuple of the feature name, id and value.\npublic class ListExample<T extends Output<T>> extends Example<T> implements Serializable; // This class will not be performant until value types are available in Java.\npublic final class ModelDataCarrier<T extends Output<T>> extends Object; // Serialization carrier for common fields in Model and SequenceModel.\n", "des": "Provides implementations of base classes and interfaces from org.tribuo."}
{"index": 1485, "repo": "tribuo-core-4.3.1", "code": "package protos;\n\npublic interface ProtoSerializable<T extends com.google.protobuf.Message>; // Interface for serializing an implementing object to the specified protobuf.\n@Retention(RUNTIME) @Target(TYPE) public @interface ProtoSerializableClass; // Mark a class as being ProtoSerializable and specify the class type used to serialize the \"serialized_data\".\n@Retention(RUNTIME) @Target(FIELD) public @interface ProtoSerializableField; // Annotation which denotes that a field should be part of the protobuf serialized representation.\n@Retention(RUNTIME) @Target(FIELD) public @interface ProtoSerializableKeysValuesField; // Annotation which denotes that the map field this is applied to is serialized as two repeated fields, one for keys and one for values.\n@Retention(RUNTIME) @Target(FIELD) public @interface ProtoSerializableMapField; // Annotation which denotes that a map field should be part of the protobuf serialized representation.\n@Retention(RUNTIME) @Target(FIELD) public @interface ProtoSerializableMapValuesField; // Annotation which denotes that the map field this is applied to is serialized as a list of values.\npublic final class ProtoUtil extends Object; // Utilities for working with Tribuo protobufs.\n", "des": "Classes which control the serialization of Tribuo objects to and from protocol buffers."}
{"index": 1486, "repo": "tribuo-core-4.3.1", "code": "package provenance;\n\npackage provenance.impl; // Provides internal implementations for empty provenance classes and TrainerProvenance.\npublic interface ConfiguredDataSourceProvenance extends DataSourceProvenance, com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // A tag interface for configurable data source provenance.\npublic interface DataProvenance extends com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Tag interface for data sources provenances.\npublic class DatasetProvenance extends Object implements DataProvenance, com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Base class for dataset provenance.\npublic interface DataSourceProvenance extends DataProvenance, com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Data source provenance.\npublic class EnsembleModelProvenance extends ModelProvenance; // Model provenance for ensemble models.\npublic final class EvaluationProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Provenance for evaluations.\npublic interface FeatureSelectorProvenance extends com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // A tag interface for feature selection algorithms.\npublic final class FeatureSetProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Contains provenance information for an instance of a SelectedFeatureSet.\npublic class ModelProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Contains provenance information for an instance of a Model.\npublic interface OutputFactoryProvenance extends com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // A tag provenance for an output factory.\npublic class SimpleDataSourceProvenance extends Object implements DataSourceProvenance; // This class stores a String describing the data source, along with a timestamp.\npublic abstract class SkeletalTrainerProvenance extends com.oracle.labs.mlrg.olcut.provenance.impl.SkeletalConfiguredObjectProvenance implements TrainerProvenance; // The skeleton of a TrainerProvenance that extracts the configured parameters.\n", "des": "Provides Tribuo specific infrastructure for the Provenance system which tracks models and datasets."}
{"index": 1487, "repo": "tribuo-core-4.3.1", "code": "package impl;\n\npublic final class EmptyDatasetProvenance extends DatasetProvenance; // An empty DatasetProvenance, should not be used except by the provenance removal system.\npublic final class EmptyDataSourceProvenance extends Object implements DataSourceProvenance; // An empty DataSourceProvenance, should not be used except by the provenance removal system.\npublic final class EmptyTrainerProvenance extends Object implements TrainerProvenance; // An empty TrainerProvenance, should not be used except by the provenance removal system.\npublic final class FeatureSelectorProvenanceImpl extends com.oracle.labs.mlrg.olcut.provenance.impl.SkeletalConfiguredObjectProvenance implements FeatureSelectorProvenance; // An implementation of FeatureSelectorProvenance which delegates everything to SkeletalConfiguredObjectProvenance.\npublic final class TimestampedTrainerProvenance extends Object implements TrainerProvenance; // A TrainerProvenance with a timestamp, used when there was no trainer involved in model construction (e.g., creating an EnsembleModel from existing models).\npublic final class TrainerProvenanceImpl extends SkeletalTrainerProvenance; // An implementation of TrainerProvenance that delegates everything to SkeletalTrainerProvenance.\n", "des": "Provides internal implementations for empty provenance classes and TrainerProvenance."}
{"index": 1488, "repo": "tribuo-core-4.3.1", "code": "package sequence;\n\npublic abstract class AbstractSequenceEvaluator<T extends Output<T>,C extends MetricContext<T>,E extends SequenceEvaluation<T>,M extends EvaluationMetric<T,C>> extends Object implements SequenceEvaluator<T,E>; // Base class for sequence evaluators.\npublic final class HashingSequenceTrainer<T extends Output<T>> extends Object implements SequenceTrainer<T>; // A SequenceTrainer that hashes all the feature names on the way in.\npublic static class HashingSequenceTrainer.HashingSequenceTrainerProvenance extends SkeletalTrainerProvenance; // Provenance for HashingSequenceTrainer.\npublic class ImmutableSequenceDataset<T extends Output<T>> extends SequenceDataset<T> implements Serializable; // This is a SequenceDataset which has an ImmutableFeatureMap to store the feature information.\npublic class IndependentSequenceModel<T extends Output<T>> extends SequenceModel<T>; // A SequenceModel which independently predicts each element of the sequence.\npublic class IndependentSequenceTrainer<T extends Output<T>> extends Object implements SequenceTrainer<T>; // Trains a sequence model by training a regular model to independently predict every example in each sequence.\npublic class MinimumCardinalitySequenceDataset<T extends Output<T>> extends ImmutableSequenceDataset<T>; // This class creates a pruned dataset in which low frequency features that occur less than the provided minimum cardinality have been removed.\npublic static class MinimumCardinalitySequenceDataset.MinimumCardinalitySequenceDatasetProvenance extends DatasetProvenance; // Provenance for MinimumCardinalitySequenceDataset.\npublic class MutableSequenceDataset<T extends Output<T>> extends SequenceDataset<T>; // A MutableSequenceDataset is a SequenceDataset with a MutableFeatureMap which grows over time.\npublic abstract class SequenceDataset<T extends Output<T>> extends Object implements Iterable<SequenceExample<T>>, ProtoSerializable<org.tribuo.protos.core.SequenceDatasetProto>, com.oracle.labs.mlrg.olcut.provenance.Provenancable<DatasetProvenance>, Serializable; // A class for sets of data, which are used to train and evaluate classifiers.\n", "des": "Provides core classes for working with sequences of Examples."}
{"index": 1489, "repo": "tribuo-core-4.3.1", "code": "package transform;\n\npackage transform.transformations; // Provides implementations of standard transformations like binning, scaling, taking logs and exponents.\npublic interface Transformation extends com.oracle.labs.mlrg.olcut.config.Configurable, com.oracle.labs.mlrg.olcut.provenance.Provenancable<TransformationProvenance>; // An interface representing a class of transformations which can be applied to a feature.\npublic class TransformationMap extends Object implements com.oracle.labs.mlrg.olcut.config.Configurable, com.oracle.labs.mlrg.olcut.provenance.Provenancable<com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance>; // A carrier type for a set of transformations to be applied to a Dataset.\npublic static final class TransformationMap.TransformationList extends Object implements com.oracle.labs.mlrg.olcut.config.Configurable, com.oracle.labs.mlrg.olcut.provenance.Provenancable<com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance>; // A carrier type as OLCUT does not support nested generics.\npublic interface TransformationProvenance extends com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // A tag interface for provenances in the transformation system.\npublic class TransformedModel<T extends Output<T>> extends Model<T>; // Wraps a Model with it's TransformerMap so all Examples are transformed appropriately before the model makes predictions.\npublic interface Transformer extends ProtoSerializable<org.tribuo.protos.core.TransformerProto>, Serializable; // A fitted Transformation which can apply a transform to the input value.\npublic final class TransformerMap extends Object implements ProtoSerializable<org.tribuo.protos.core.TransformerMapProto>, com.oracle.labs.mlrg.olcut.provenance.Provenancable<TransformerMap.TransformerMapProvenance>, Serializable; // A collection of Transformers which can be applied to a Dataset or Example.\npublic static final class TransformerMap.TransformerMapProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance; // Provenance for TransformerMap.\n", "des": "Provides infrastructure for applying transformations to a Dataset."}
{"index": 1490, "repo": "tribuo-core-4.3.1", "code": "package transformations;\n\npublic final class BinningTransformation extends Object implements Transformation; // A Transformation which bins values.\npublic static final class BinningTransformation.BinningTransformationProvenance extends Object implements TransformationProvenance; // Provenance for BinningTransformation.\npublic static final class BinningTransformation.BinningTransformer extends Object implements Transformer; // The implementation of a Transformer which splits the input into n bins.\npublic static enum BinningTransformation.BinningType extends Enum<BinningTransformation.BinningType>; // The allowed binning types.\npublic class IDFTransformation extends Object implements Transformation; // A feature transformation that computes the IDF for features and then transforms them with a TF-IDF weighting.\npublic static final class IDFTransformation.IDFTransformationProvenance extends Object implements TransformationProvenance; // Provenance for IDFTransformation.\npublic final class LinearScalingTransformation extends Object implements Transformation; // A Transformation which takes an observed distribution and rescales it so all values are between the desired min and max.\npublic static final class LinearScalingTransformation.LinearScalingTransformationProvenance extends Object implements TransformationProvenance; // Provenance for LinearScalingTransformation.\npublic final class MeanStdDevTransformation extends Object implements Transformation; // A Transformation which takes an observed distribution and rescales it so it has the desired mean and standard deviation.\npublic static final class MeanStdDevTransformation.MeanStdDevTransformationProvenance extends Object implements TransformationProvenance; // Provenance for MeanStdDevTransformation.\npublic final class SimpleTransform extends Object implements Transformer, Transformation, TransformStatistics; // This is used for stateless functions such as exp, log, addition or multiplication by a constant.\npublic static enum SimpleTransform.Operation extends Enum<SimpleTransform.Operation>; // Operations understood by this Transformation.\npublic static final class SimpleTransform.SimpleTransformProvenance extends Object implements TransformationProvenance; // Provenance for SimpleTransform.\n", "des": "Provides implementations of standard transformations like binning, scaling, taking logs and exponents."}
{"index": 1491, "repo": "tribuo-core-4.3.1", "code": "package util;\n\npublic final class HTMLOutput extends Object; // Utilities for nice HTML output that can be put in wikis and such.\npublic final class IntDoublePair extends Object; // A Pair of a primitive int and a primitive double.\npublic final class MeanVarianceAccumulator extends Object implements Serializable; // An accumulator for online calculation of the mean and variance of a stream of doubles.\n@FunctionalInterface public interface Merger; // An interface which can merge double values.\npublic final class MurmurHash3 extends Object; // The MurmurHash3 algorithm was created by Austin Appleby and placed in the public domain.\npublic static final class MurmurHash3.LongPair extends Object; // 128 bits of state\npublic final class Util extends Object; // Ye olde util class.\n", "des": "Provides utilities which don't have other Tribuo dependencies."}
{"index": 1492, "repo": "wicket-extensions-10.0.0-M1", "code": "package breadcrumb;\n\npackage breadcrumb.panel; // This package contains a panel based implementation of bread crumb participants.\npublic class BreadCrumbBar extends org.apache.wicket.markup.html.panel.Panel implements IBreadCrumbModel; // A component that renders bread crumbs.\npublic abstract class BreadCrumbLink extends org.apache.wicket.markup.html.link.Link<Void>; // A link that when clicked will set the the active bread crumb participant to the one that is returned by BreadCrumbLink.getParticipant(String).\npublic final class BreadCrumbModelListenerSupport extends Object implements org.apache.wicket.util.io.IClusterable; // Utility class for working with bread crumb model listeners.\npublic class DefaultBreadCrumbsModel extends Object implements IBreadCrumbModel; // Default breadcrumb model implementation that should be good for 99% of the use cases out there.\npublic interface IBreadCrumbModel extends org.apache.wicket.util.io.IClusterable; // Bread crumbs provide a means to track certain history of client actions.\npublic interface IBreadCrumbModelListener extends EventListener, org.apache.wicket.util.io.IClusterable; // Bread crumb model listeners get notified by bread crumb models of activation, addition and removal events.\npublic interface IBreadCrumbParticipant extends org.apache.wicket.util.io.IClusterable; // Bread crumb participants function as proxies for components that are part of a bread crumb hierarchy.\n", "des": "Package for working with bread crumb components."}
{"index": 1493, "repo": "wicket-extensions-10.0.0-M1", "code": "package panel;\n\npublic abstract class BreadCrumbPanel extends org.apache.wicket.markup.html.panel.Panel implements IBreadCrumbParticipant; // A panel that participates with a bread crumb model.\npublic final class BreadCrumbPanelFactory extends Object implements IBreadCrumbPanelFactory; // Simple factory that creates instances of a bread crumb panel based on the class it is constructed with.\npublic class BreadCrumbPanelLink extends BreadCrumbLink; // Bread crumb link specifically for bread crumb panels.\npublic abstract class BreadCrumbParticipantDelegate extends Object implements IBreadCrumbParticipant; // Base implementation for Panel/ Component based IBreadCrumbParticipant that decouples the implementation from the actual panel class.\n@FunctionalInterface public interface IBreadCrumbPanelFactory extends org.apache.wicket.util.io.IClusterable; // Factory interface to enabled deferred creation of a bread crumb panel while getting the proper id for creation.\n", "des": "This package contains a panel based implementation of bread crumb participants."}
{"index": 1494, "repo": "wicket-extensions-10.0.0-M1", "code": "package basic;\n\npublic class DefaultLinkParser extends LinkParser; // This implementation adds link render strategies for email addresses and urls.\n@FunctionalInterface public interface ILinkParser; // ILinkParser parses an input text and performs modifications according to its render strategies.\n@FunctionalInterface public interface ILinkRenderStrategy; // An implementation of ILinkRenderStrategy transforms a link target (e.g.\npublic class LinkParser extends Object implements ILinkParser; // This base implementation iterates over all provided ILinkRenderStrategy implementations and applies them to the input text.\npublic class SmartLinkLabel extends org.apache.wicket.markup.html.basic.Label; // If you have email addresses or web URLs in the data that you are displaying, then you can automatically display those pieces of data as hyperlinks, you will not have to take any action to convert that data.\npublic class SmartLinkMultiLineLabel extends org.apache.wicket.markup.html.basic.MultiLineLabel; // If you have email addresses or web URLs in the data that you are displaying, then you can automatically display those pieces of data as hyperlinks, you will not have to take any action to convert that data.\n", "des": "Basic extensions."}
{"index": 1495, "repo": "wicket-extensions-10.0.0-M1", "code": "package resource;\n\npublic class ThumbnailImageResource extends org.apache.wicket.request.resource.DynamicImageResource; // Image resource that dynamically scales the given original resource to a thumbnail.\n", "des": "Image resource extensions."}
{"index": 1496, "repo": "wicket-extensions-10.0.0-M1", "code": "package export;\n\npublic abstract class AbstractDataExporter extends Object implements IDataExporter; // An abstract helper implementation of IDataExporter.\npublic abstract class AbstractExportableColumn<T,S> extends AbstractColumn<T,S> implements IExportableColumn<T,S>; // A helper implementation of IExportableColumn.\npublic class CSVDataExporter extends AbstractDataExporter; // An IDataExporter that exports data to a CSV file.\npublic class ExportToolbar extends AbstractToolbar; // A toolbar that provides links to download the data represented by all IExportableColumns in the table exported to formats supported by the IDataExporters configured.\npublic static class ExportToolbar.DataExportResourceStreamWriter extends org.apache.wicket.util.resource.AbstractResourceStreamWriter; // An IResourceStreamWriter which writes the exportable data from a table to an output stream.\npublic interface IDataExporter extends org.apache.wicket.util.io.IClusterable; // Exports data provided by a IDataProvider as described by IExportableColumns.\npublic interface IExportableColumn<T,S> extends IColumn<T,S>; // An IColumn that can be exported.\n", "des": "Package for exporting data tables."}
{"index": 1497, "repo": "wicket-extensions-10.0.0-M1", "code": "package tabs;\n\npublic abstract class AbstractTab extends Object implements ITab; // Convenience class that takes care of common ITab functionality\npublic interface ITab extends org.apache.wicket.util.io.IClusterable; // Interface used to represent a single tab in a TabbedPanel\npublic class PanelCachingTab extends Object implements ITab; // A simple decorator that will cache the panel returned from the first call to getPanel()\npublic class TabbedPanel<T extends ITab> extends org.apache.wicket.markup.html.panel.Panel; // TabbedPanel component represents a panel with tabs that are used to switch between different content panels inside the TabbedPanel panel.\n", "des": "Package for working with tab panels."}
{"index": 1498, "repo": "wicket-extensions-10.0.0-M1", "code": "package model;\n\npublic abstract class AbstractCheckBoxModel extends Object implements org.apache.wicket.model.IModel<Boolean>; // Model adapter that makes working with models for checkboxes easier.\n", "des": "Convenience models."}
{"index": 1499, "repo": "wicket-extensions-10.0.0-M1", "code": "package encoding;\n\npublic final class CharSetMap extends Object; // This class maintains a set of mappers defining mappings between locales and the corresponding charsets.\npublic class CharSetUtil extends Object; // Utility class.\n", "des": "Encoding extensions."}
{"index": 1500, "repo": "wicket-extensions-10.0.0-M1", "code": "package wizard;\n\npublic abstract class AbstractWizardModel extends Object implements IWizardModel; // Abstract wizard model that provides an implementation for handling wizard model listeners and provides base implementations of many methods.\npublic class AjaxWizardButtonBar extends WizardButtonBar; // A bar of buttons for wizards utilizing AjaxFormSubmitBehavior.\npublic class CancelButton extends WizardButton; // Models a cancel button in the wizard.\npublic class FinishButton extends WizardButton; // Models a cancel button in the wizard.\npublic interface IWizard extends org.apache.wicket.util.io.IClusterable; // Interface for the wizard component.\npublic interface IWizardModel extends org.apache.wicket.util.io.IClusterable; // This interface defines the model for wizards.\npublic interface IWizardModelListener extends org.apache.wicket.util.io.IClusterable; // Receives notifications for wizard model state changes.\npublic interface IWizardStep extends org.apache.wicket.util.io.IClusterable; // Models one step in a wizard, and is the equivalent of one panel in a wizard from an end-user's perspective.\npublic class LastButton extends WizardButton; // Models a 'last' button in the wizard.\npublic class NextButton extends WizardButton; // Models a next button in the wizard.\npublic class PreviousButton extends WizardButton; // Models a previous button in the wizard.\npublic class StaticContentStep extends WizardStep; // A wizard step that displays the provided static content without expecting any input.\npublic class Wizard extends org.apache.wicket.markup.html.panel.Panel implements IWizardModelListener, IWizard; // A wizard is a dialog component that takes users through a number of steps to complete a task.\npublic abstract class WizardButton extends org.apache.wicket.markup.html.form.Button; // Base class for buttons that work with the wizard component.\npublic class WizardButtonBar extends org.apache.wicket.markup.html.panel.Panel; // The default bar of button components for wizards.\npublic class WizardModel extends AbstractWizardModel; // Default implementation of IWizardModel, which models a semi-static wizard.\n", "des": "Package for working with Wizard components."}
{"index": 1501, "repo": "spring-context-6.0.11", "code": "package cache;\n\npackage cache.annotation; // Annotations and supporting classes for declarative cache management.\npackage cache.concurrent; // Implementation package for java.util.concurrent based caches.\npackage cache.config; // Support package for declarative caching configuration, with XML schema being the primary configuration format.\npackage cache.interceptor; // AOP-based solution for declarative caching demarcation.\npackage cache.support; // Support classes for the org.springframework.cache package.\npublic interface Cache; // Interface that defines common cache operations.\npublic static class Cache.ValueRetrievalException extends RuntimeException; // Wrapper exception to be thrown from Cache.get(Object, Callable) in case of the value loader callback failing with an exception.\n@FunctionalInterface public static interface Cache.ValueWrapper; // A (wrapper) object representing a cache value.\npublic interface CacheManager; // Spring's central cache manager SPI.\n", "des": "Spring's generic cache abstraction."}
{"index": 1502, "repo": "spring-context-6.0.11", "code": "package annotation;\n\n@Configuration(proxyBeanMethods=false) public abstract class AbstractCachingConfiguration extends Object implements ImportAware; // Abstract base @Configuration class providing common structure for enabling Spring's annotation-driven cache management capability.\nprotected static class AbstractCachingConfiguration.CachingConfigurerSupplier extends Object;\npublic class AnnotationCacheOperationSource extends AbstractFallbackCacheOperationSource implements Serializable; // Implementation of the CacheOperationSource interface for working with caching metadata in annotation format.\n@FunctionalInterface protected static interface AnnotationCacheOperationSource.CacheOperationProvider; // Callback interface providing CacheOperation instance(s) based on a given CacheAnnotationParser.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Inherited @Documented @Reflective public @interface Cacheable; // Annotation indicating that the result of invoking a method (or all methods in a class) can be cached.\npublic interface CacheAnnotationParser; // Strategy interface for parsing known caching annotation types.\n@Target(TYPE) @Retention(RUNTIME) @Documented public @interface CacheConfig; // @CacheConfig provides a mechanism for sharing common cache-related settings at the class level.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Inherited @Documented @Reflective public @interface CacheEvict; // Annotation indicating that a method (or all methods on a class) triggers a cache evict operation.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Inherited @Documented @Reflective public @interface CachePut; // Annotation indicating that a method (or all methods on a class) triggers a cache put operation.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Inherited @Documented @Reflective public @interface Caching; // Group annotation for multiple cache annotations (of different or the same type).\npublic class CachingConfigurationSelector extends AdviceModeImportSelector<EnableCaching>; // Selects which implementation of AbstractCachingConfiguration should be used based on the value of EnableCaching.mode() on the importing @Configuration class.\npublic interface CachingConfigurer; // Interface to be implemented by @Configuration classes annotated with @EnableCaching that wish or need to specify explicitly how caches are resolved and how keys are generated for annotation-driven cache management.\n@Deprecated(since=\"6.0\") public class CachingConfigurerSupport extends Object implements CachingConfigurer;\n", "des": "Annotations and supporting classes for declarative cache management."}
{"index": 1503, "repo": "spring-context-6.0.11", "code": "package concurrent;\n\npublic class ConcurrentMapCache extends AbstractValueAdaptingCache; // Simple Cache implementation based on the core JDK java.util.concurrent package.\npublic class ConcurrentMapCacheFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ConcurrentMapCache>, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // FactoryBean for easy configuration of a ConcurrentMapCache when used within a Spring container.\npublic class ConcurrentMapCacheManager extends Object implements CacheManager, org.springframework.beans.factory.BeanClassLoaderAware; // CacheManager implementation that lazily builds ConcurrentMapCache instances for each ConcurrentMapCacheManager.getCache(java.lang.String) request.\n", "des": "Implementation package for java.util.concurrent based caches."}
{"index": 1504, "repo": "spring-context-6.0.11", "code": "package config;\n\npublic abstract class CacheManagementConfigUtils extends Object; // Configuration constants for internal sharing across subpackages.\npublic class CacheNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler allowing for the configuration of declarative cache management using either XML or using annotations.\n", "des": "Support package for declarative caching configuration, with XML schema being the primary configuration format."}
{"index": 1505, "repo": "spring-context-6.0.11", "code": "package interceptor;\n\npublic abstract class AbstractCacheInvoker extends Object; // A base component for invoking Cache operations and using a configurable CacheErrorHandler when an exception occurs.\npublic abstract class AbstractCacheResolver extends Object implements CacheResolver, org.springframework.beans.factory.InitializingBean; // A base CacheResolver implementation that requires the concrete implementation to provide the collection of cache name(s) based on the invocation context.\npublic abstract class AbstractFallbackCacheOperationSource extends Object implements CacheOperationSource; // Abstract implementation of CacheOperation that caches attributes for methods and implements a fallback policy: 1.\npublic interface BasicOperation; // The base interface that all cache operations must implement.\npublic class BeanFactoryCacheOperationSourceAdvisor extends org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor; // Advisor driven by a CacheOperationSource, used to include a cache advice bean for methods that are cacheable.\npublic class CacheableOperation extends CacheOperation; // Class describing a cache 'cacheable' operation.\npublic static class CacheableOperation.Builder extends CacheOperation.Builder; // A builder that can be used to create a CacheableOperation.\npublic abstract class CacheAspectSupport extends AbstractCacheInvoker implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.SmartInitializingSingleton; // Base class for caching aspects, such as the CacheInterceptor or an AspectJ aspect.\nprotected static class CacheAspectSupport.CacheOperationMetadata extends Object; // Metadata of a cache operation that does not depend on a particular invocation which makes it a good candidate for caching.\npublic interface CacheErrorHandler; // A strategy for handling cache-related errors.\npublic class CacheEvictOperation extends CacheOperation; // Class describing a cache 'evict' operation.\npublic static class CacheEvictOperation.Builder extends CacheOperation.Builder; // A builder that can be used to create a CacheEvictOperation.\npublic class CacheInterceptor extends CacheAspectSupport implements org.aopalliance.intercept.MethodInterceptor, Serializable; // AOP Alliance MethodInterceptor for declarative cache management using the common Spring caching infrastructure (Cache).\npublic abstract class CacheOperation extends Object implements BasicOperation; // Base class for cache operations.\n", "des": "AOP-based solution for declarative caching demarcation."}
{"index": 1506, "repo": "spring-context-6.0.11", "code": "package support;\n\npublic abstract class AbstractCacheManager extends Object implements CacheManager, org.springframework.beans.factory.InitializingBean; // Abstract base class implementing the common CacheManager methods.\npublic abstract class AbstractValueAdaptingCache extends Object implements Cache; // Common base class for Cache implementations that need to adapt null values (and potentially other such special values) before passing them on to the underlying store.\npublic class CompositeCacheManager extends Object implements CacheManager, org.springframework.beans.factory.InitializingBean; // Composite CacheManager implementation that iterates over a given collection of delegate CacheManager instances.\npublic class NoOpCache extends Object implements Cache; // A no operation Cache implementation suitable for disabling caching.\npublic class NoOpCacheManager extends Object implements CacheManager; // A basic, no operation CacheManager implementation suitable for disabling caching, typically used for backing cache declarations without an actual backing store.\npublic final class NullValue extends Object implements Serializable; // Simple serializable class that serves as a null replacement for cache stores which otherwise do not support null values.\npublic class SimpleCacheManager extends AbstractCacheManager; // Simple cache manager working against a given collection of caches.\npublic class SimpleValueWrapper extends Object implements Cache.ValueWrapper; // Straightforward implementation of Cache.ValueWrapper, simply holding the value as given at construction and returning it from SimpleValueWrapper.get().\n", "des": "Support classes for the org.springframework.cache package."}
{"index": 1507, "repo": "spring-context-6.0.11", "code": "package context;\n\npackage context.annotation; // Annotation support for the Application Context, including JSR-250 \"common\" annotations, component-scanning, and Java-based metadata for creating Spring-managed objects.\npackage context.aot; // AOT support for application contexts.\npackage context.config; // Support package for advanced application context configuration, with XML schema being the primary configuration format.\npackage context.event; // Support classes for application events, like standard context events.\npackage context.expression; // Expression parsing support within a Spring application context.\npackage context.i18n; // Abstraction for determining the current Locale, plus global holder that exposes a thread-bound Locale.\npackage context.index; // Support package for reading and managing the components index.\npackage context.support; // Classes supporting the org.springframework.context package, such as abstract base classes for ApplicationContext implementations and a MessageSource implementation.\npackage context.weaving; // Load-time weaving support for a Spring application context, building on Spring's LoadTimeWeaver abstraction.\npublic interface ApplicationContext extends org.springframework.core.env.EnvironmentCapable, org.springframework.beans.factory.ListableBeanFactory, org.springframework.beans.factory.HierarchicalBeanFactory, MessageSource, ApplicationEventPublisher, org.springframework.core.io.support.ResourcePatternResolver; // Central interface to provide configuration for an application.\npublic interface ApplicationContextAware extends org.springframework.beans.factory.Aware; // Interface to be implemented by any object that wishes to be notified of the ApplicationContext that it runs in.\npublic class ApplicationContextException extends org.springframework.beans.FatalBeanException; // Exception thrown during application context initialization.\n@FunctionalInterface public interface ApplicationContextInitializer<C extends ConfigurableApplicationContext>; // Callback interface for initializing a Spring ConfigurableApplicationContext prior to being refreshed.\npublic abstract class ApplicationEvent extends EventObject; // Class to be extended by all application events.\n@FunctionalInterface public interface ApplicationEventPublisher; // Interface that encapsulates event publication functionality.\n", "des": "This package builds on the beans package to add support for message sources and for the Observer design pattern, and the ability for application objects to obtain resources using a consistent API."}
{"index": 1508, "repo": "spring-context-6.0.11", "code": "package annotation;\n\npublic enum AdviceMode extends Enum<AdviceMode>; // Enumeration used to determine whether JDK proxy-based or AspectJ weaving-based advice should be applied.\npublic abstract class AdviceModeImportSelector<A extends Annotation> extends Object implements ImportSelector; // Convenient base class for ImportSelector implementations that select imports based on an AdviceMode value from an annotation (such as the @Enable* annotations).\npublic class AnnotatedBeanDefinitionReader extends Object; // Convenient adapter for programmatic registration of bean classes.\npublic class AnnotationBeanNameGenerator extends Object implements org.springframework.beans.factory.support.BeanNameGenerator; // BeanNameGenerator implementation for bean classes annotated with the @Component annotation or with another annotation that is itself annotated with @Component as a meta-annotation.\npublic class AnnotationConfigApplicationContext extends GenericApplicationContext implements AnnotationConfigRegistry; // Standalone application context, accepting component classes as input — in particular @Configuration-annotated classes, but also plain @Component types and JSR-330 compliant classes using jakarta.inject annotations.\npublic class AnnotationConfigBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Parser for the <context:annotation-config/> element.\npublic interface AnnotationConfigRegistry; // Common interface for annotation config application contexts, defining AnnotationConfigRegistry.register(java.lang.Class<?>...) and AnnotationConfigRegistry.scan(java.lang.String...) methods.\npublic abstract class AnnotationConfigUtils extends Object; // Utility class that allows for convenient registration of common BeanPostProcessor and BeanFactoryPostProcessor definitions for annotation-based configuration.\npublic class AnnotationScopeMetadataResolver extends Object implements ScopeMetadataResolver; // A ScopeMetadataResolver implementation that by default checks for the presence of Spring's @Scope annotation on the bean class.\npublic class AutoProxyRegistrar extends Object implements ImportBeanDefinitionRegistrar; // Registers an auto proxy creator against the current BeanDefinitionRegistry as appropriate based on an @Enable* annotation having mode and proxyTargetClass attributes set to the correct values.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface Bean; // Indicates that a method produces a bean to be managed by the Spring container.\n", "des": "Annotation support for the Application Context, including JSR-250 \"common\" annotations, component-scanning, and Java-based metadata for creating Spring-managed objects."}
{"index": 1509, "repo": "spring-context-6.0.11", "code": "package aot;\n\npublic abstract class AbstractAotProcessor<T> extends Object; // Abstract base class for filesystem-based ahead-of-time (AOT) processing.\npublic static final class AbstractAotProcessor.Settings extends Object; // Common settings for AOT processors.\npublic static final class AbstractAotProcessor.Settings.Builder extends Object; // Fluent builder API for AbstractAotProcessor.Settings.\n@FunctionalInterface public interface AotApplicationContextInitializer<C extends ConfigurableApplicationContext> extends ApplicationContextInitializer<C>; // Specialized ApplicationContextInitializer used to initialize a ConfigurableApplicationContext using artifacts that were generated ahead-of-time.\npublic class ApplicationContextAotGenerator extends Object; // Process an ApplicationContext and its BeanFactory to generate code that represents the state of the bean factory, as well as the necessary hints that can be used at runtime in a constrained environment.\npublic abstract class ContextAotProcessor extends AbstractAotProcessor<org.springframework.javapoet.ClassName>; // Filesystem-based ahead-of-time (AOT) processing base implementation.\n", "des": "AOT support for application contexts."}
{"index": 1510, "repo": "spring-context-6.0.11", "code": "package config;\n\npublic class ContextNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for the 'context' namespace.\n", "des": "Support package for advanced application context configuration, with XML schema being the primary configuration format."}
{"index": 1511, "repo": "spring-context-6.0.11", "code": "package event;\n\npublic abstract class AbstractApplicationEventMulticaster extends Object implements ApplicationEventMulticaster, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware; // Abstract implementation of the ApplicationEventMulticaster interface, providing the basic listener registration facility.\npublic abstract class ApplicationContextEvent extends ApplicationEvent; // Base class for events raised for an ApplicationContext.\npublic interface ApplicationEventMulticaster; // Interface to be implemented by objects that can manage a number of ApplicationListener objects and publish events to them.\npublic class ApplicationListenerMethodAdapter extends Object implements GenericApplicationListener; // GenericApplicationListener adapter that delegates the processing of an event to an EventListener annotated method.\npublic class ContextClosedEvent extends ApplicationContextEvent; // Event raised when an ApplicationContext gets closed.\npublic class ContextRefreshedEvent extends ApplicationContextEvent; // Event raised when an ApplicationContext gets initialized or refreshed.\npublic class ContextStartedEvent extends ApplicationContextEvent; // Event raised when an ApplicationContext gets started.\npublic class ContextStoppedEvent extends ApplicationContextEvent; // Event raised when an ApplicationContext gets stopped.\npublic class DefaultEventListenerFactory extends Object implements EventListenerFactory, org.springframework.core.Ordered; // Default EventListenerFactory implementation that supports the regular EventListener annotation.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Reflective public @interface EventListener; // Annotation that marks a method as a listener for application events.\npublic interface EventListenerFactory; // Strategy interface for creating ApplicationListener for methods annotated with EventListener.\npublic class EventListenerMethodProcessor extends Object implements org.springframework.beans.factory.SmartInitializingSingleton, ApplicationContextAware, org.springframework.beans.factory.config.BeanFactoryPostProcessor; // Registers EventListener methods as individual ApplicationListener instances.\npublic class EventPublicationInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, ApplicationEventPublisherAware, org.springframework.beans.factory.InitializingBean; // Interceptor that publishes an ApplicationEvent to all ApplicationListeners registered with an ApplicationEventPublisher after each successful method invocation.\npublic interface GenericApplicationListener extends SmartApplicationListener; // Extended variant of the standard ApplicationListener interface, exposing further metadata such as the supported event and source type.\n", "des": "Support classes for application events, like standard context events."}
{"index": 1512, "repo": "spring-context-6.0.11", "code": "package expression;\n\npublic final class AnnotatedElementKey extends Object implements Comparable<AnnotatedElementKey>; // Represent an AnnotatedElement on a particular Class and is suitable as a key.\npublic class BeanExpressionContextAccessor extends Object implements org.springframework.expression.PropertyAccessor; // EL property accessor that knows how to traverse the beans and contextual objects of a Spring BeanExpressionContext.\npublic class BeanFactoryAccessor extends Object implements org.springframework.expression.PropertyAccessor; // EL property accessor that knows how to traverse the beans of a Spring BeanFactory.\npublic class BeanFactoryResolver extends Object implements org.springframework.expression.BeanResolver; // EL bean resolver that operates against a Spring BeanFactory.\npublic abstract class CachedExpressionEvaluator extends Object; // Shared utility class used to evaluate and cache SpEL expressions that are defined on AnnotatedElement.\nprotected static class CachedExpressionEvaluator.ExpressionKey extends Object implements Comparable<CachedExpressionEvaluator.ExpressionKey>; // An expression key.\npublic class EnvironmentAccessor extends Object implements org.springframework.expression.PropertyAccessor; // Read-only EL property accessor that knows how to retrieve keys of a Spring Environment instance.\npublic class MapAccessor extends Object implements org.springframework.expression.spel.CompilablePropertyAccessor; // EL property accessor that knows how to traverse the keys of a standard Map.\npublic class MethodBasedEvaluationContext extends org.springframework.expression.spel.support.StandardEvaluationContext; // A method-based EvaluationContext that provides explicit support for method-based invocations.\npublic class StandardBeanExpressionResolver extends Object implements org.springframework.beans.factory.config.BeanExpressionResolver; // Standard implementation of the BeanExpressionResolver interface, parsing and evaluating Spring EL using Spring's expression module.\n", "des": "Expression parsing support within a Spring application context."}
{"index": 1513, "repo": "spring-context-6.0.11", "code": "package i18n;\n\npublic interface LocaleContext; // Strategy interface for determining the current Locale.\npublic final class LocaleContextHolder extends Object; // Simple holder class that associates a LocaleContext instance with the current thread.\npublic class SimpleLocaleContext extends Object implements LocaleContext; // Simple implementation of the LocaleContext interface, always returning a specified Locale.\npublic class SimpleTimeZoneAwareLocaleContext extends SimpleLocaleContext implements TimeZoneAwareLocaleContext; // Simple implementation of the TimeZoneAwareLocaleContext interface, always returning a specified Locale and TimeZone.\npublic interface TimeZoneAwareLocaleContext extends LocaleContext; // Extension of LocaleContext, adding awareness of the current time zone.\n", "des": "Abstraction for determining the current Locale, plus global holder that exposes a thread-bound Locale."}
{"index": 1514, "repo": "spring-context-6.0.11", "code": "package index;\n\npublic class CandidateComponentsIndex extends Object; // Provide access to the candidates that are defined in META-INF/spring.components.\npublic final class CandidateComponentsIndexLoader extends Object; // Candidate components index loading mechanism for internal use within the framework.\n", "des": "Support package for reading and managing the components index."}
{"index": 1515, "repo": "spring-context-6.0.11", "code": "package support;\n\npublic abstract class AbstractApplicationContext extends org.springframework.core.io.DefaultResourceLoader implements ConfigurableApplicationContext; // Abstract implementation of the ApplicationContext interface.\npublic abstract class AbstractMessageSource extends MessageSourceSupport implements HierarchicalMessageSource; // Abstract implementation of the HierarchicalMessageSource interface, implementing common handling of message variants, making it easy to implement a specific strategy for a concrete MessageSource.\npublic abstract class AbstractRefreshableApplicationContext extends AbstractApplicationContext; // Base class for ApplicationContext implementations which are supposed to support multiple calls to AbstractApplicationContext.refresh(), creating a new internal bean factory instance every time.\npublic abstract class AbstractRefreshableConfigApplicationContext extends AbstractRefreshableApplicationContext implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // AbstractRefreshableApplicationContext subclass that adds common handling of specified config locations.\npublic abstract class AbstractResourceBasedMessageSource extends AbstractMessageSource; // Abstract base class for MessageSource implementations based on resource bundle conventions, such as ResourceBundleMessageSource and ReloadableResourceBundleMessageSource.\npublic abstract class AbstractXmlApplicationContext extends AbstractRefreshableConfigApplicationContext; // Convenient base class for ApplicationContext implementations, drawing configuration from XML documents containing bean definitions understood by an XmlBeanDefinitionReader.\npublic abstract class ApplicationObjectSupport extends Object implements ApplicationContextAware; // Convenient superclass for application objects that want to be aware of the application context, e.g.\npublic class ClassPathXmlApplicationContext extends AbstractXmlApplicationContext; // Standalone XML application context, taking the context definition files from the class path, interpreting plain paths as class path resource names that include the package path (e.g.\npublic class ConversionServiceFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.core.convert.ConversionService>, org.springframework.beans.factory.InitializingBean; // A factory providing convenient access to a ConversionService configured with converters appropriate for most environments.\npublic class DefaultLifecycleProcessor extends Object implements LifecycleProcessor, org.springframework.beans.factory.BeanFactoryAware; // Default implementation of the LifecycleProcessor strategy.\npublic class DefaultMessageSourceResolvable extends Object implements MessageSourceResolvable, Serializable; // Spring's default implementation of the MessageSourceResolvable interface.\n", "des": "Classes supporting the org.springframework.context package, such as abstract base classes for ApplicationContext implementations and a MessageSource implementation."}
{"index": 1516, "repo": "spring-context-6.0.11", "code": "package weaving;\n\npublic class AspectJWeavingEnabler extends Object implements org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.beans.factory.BeanClassLoaderAware, LoadTimeWeaverAware, org.springframework.core.Ordered; // Post-processor that registers AspectJ's ClassPreProcessorAgentAdapter with the Spring application context's default LoadTimeWeaver.\npublic class DefaultContextLoadTimeWeaver extends Object implements LoadTimeWeaver, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.DisposableBean; // Default LoadTimeWeaver bean for use in an application context, decorating an automatically detected internal LoadTimeWeaver.\npublic interface LoadTimeWeaverAware extends org.springframework.beans.factory.Aware; // Interface to be implemented by any object that wishes to be notified of the application context's default LoadTimeWeaver.\npublic class LoadTimeWeaverAwareProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.beans.factory.BeanFactoryAware; // BeanPostProcessor implementation that passes the context's default LoadTimeWeaver to beans that implement the LoadTimeWeaverAware interface.\n", "des": "Load-time weaving support for a Spring application context, building on Spring's LoadTimeWeaver abstraction."}
{"index": 1517, "repo": "spring-context-6.0.11", "code": "package config;\n\npublic class JeeNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for the 'jee' namespace.\n", "des": "Support package for EJB/Jakarta EE-related configuration, with XML schema being the primary configuration format."}
{"index": 1518, "repo": "spring-context-6.0.11", "code": "package format;\n\npackage format.annotation; // Annotations for declaratively configuring field formatting rules.\npackage format.datetime; // Formatters for java.util.Date properties.\npackage format.number; // Formatters for java.lang.Number properties.\npackage format.support; // Support classes for the formatting package, providing common implementations as well as adapters.\npublic interface AnnotationFormatterFactory<A extends Annotation>; // A factory that creates formatters to format values of fields annotated with a particular Annotation.\npublic interface Formatter<T> extends Printer<T>, Parser<T>; // Formats objects of type T.\npublic interface FormatterRegistrar; // Registers Converters and Formatters with a FormattingConversionService through the FormatterRegistry SPI.\npublic interface FormatterRegistry extends org.springframework.core.convert.converter.ConverterRegistry; // A registry of field formatting logic.\n@FunctionalInterface public interface Parser<T>; // Parses text strings to produce instances of T.\n@FunctionalInterface public interface Printer<T>; // Prints objects of type T for display.\n", "des": "An API for defining Formatters to format field model values for display in a UI."}
{"index": 1519, "repo": "spring-context-6.0.11", "code": "package annotation;\n\n@Documented @Retention(RUNTIME) @Target({METHOD,FIELD,PARAMETER,ANNOTATION_TYPE}) public @interface DateTimeFormat; // Declares that a field or method parameter should be formatted as a date or time.\npublic static enum DateTimeFormat.ISO extends Enum<DateTimeFormat.ISO>; // Common ISO date time format patterns.\n@Documented @Retention(RUNTIME) @Target({METHOD,FIELD,PARAMETER,ANNOTATION_TYPE}) public @interface NumberFormat; // Declares that a field or method parameter should be formatted as a number.\npublic static enum NumberFormat.Style extends Enum<NumberFormat.Style>; // Common number format styles.\n", "des": "Annotations for declaratively configuring field formatting rules."}
{"index": 1520, "repo": "spring-context-6.0.11", "code": "package datetime;\n\npackage datetime.standard; // Integration with the JSR-310 java.time package in JDK 8.\npublic class DateFormatter extends Object implements Formatter<Date>; // A formatter for Date types.\npublic class DateFormatterRegistrar extends Object implements FormatterRegistrar; // Configures basic date formatting for use with Spring, primarily for DateTimeFormat declarations.\npublic class DateTimeFormatAnnotationFormatterFactory extends EmbeddedValueResolutionSupport implements AnnotationFormatterFactory<DateTimeFormat>; // Formats fields annotated with the DateTimeFormat annotation using a DateFormatter.\n", "des": "Formatters for java.util.Date properties."}
{"index": 1521, "repo": "spring-context-6.0.11", "code": "package standard;\n\npublic class DateTimeContext extends Object; // A context that holds user-specific java.time (JSR-310) settings such as the user's Chronology (calendar system) and time zone.\npublic final class DateTimeContextHolder extends Object; // A holder for a thread-local user DateTimeContext.\npublic class DateTimeFormatterFactory extends Object; // Factory that creates a JSR-310 DateTimeFormatter.\npublic class DateTimeFormatterFactoryBean extends DateTimeFormatterFactory implements org.springframework.beans.factory.FactoryBean<DateTimeFormatter>, org.springframework.beans.factory.InitializingBean; // FactoryBean that creates a JSR-310 DateTimeFormatter.\npublic class DateTimeFormatterRegistrar extends Object implements FormatterRegistrar; // Configures the JSR-310 java.time formatting system for use with Spring.\npublic class InstantFormatter extends Object implements Formatter<Instant>; // Formatter implementation for a JSR-310 Instant, following JSR-310's parsing rules for an Instant (that is, not using a configurable DateTimeFormatter): accepting the default ISO_INSTANT format as well as RFC_1123_DATE_TIME (which is commonly used for HTTP date header values), as of Spring 4.3.\npublic class Jsr310DateTimeFormatAnnotationFormatterFactory extends EmbeddedValueResolutionSupport implements AnnotationFormatterFactory<DateTimeFormat>; // Formats fields annotated with the DateTimeFormat annotation using the JSR-310 java.time package in JDK 8.\npublic final class TemporalAccessorParser extends Object implements Parser<TemporalAccessor>; // Parser implementation for a JSR-310 TemporalAccessor, using a DateTimeFormatter (the contextual one, if available).\npublic final class TemporalAccessorPrinter extends Object implements Printer<TemporalAccessor>; // Printer implementation for a JSR-310 TemporalAccessor, using a DateTimeFormatter) (the contextual one, if available).\n", "des": "Integration with the JSR-310 java.time package in JDK 8."}
{"index": 1522, "repo": "spring-context-6.0.11", "code": "package number;\n\npackage number.money; // Integration with the JSR-354 javax.money package.\npublic abstract class AbstractNumberFormatter extends Object implements Formatter<Number>; // Abstract formatter for Numbers, providing a AbstractNumberFormatter.getNumberFormat(java.util.Locale) template method.\npublic class CurrencyStyleFormatter extends AbstractNumberFormatter; // A BigDecimal formatter for number values in currency style.\npublic class NumberFormatAnnotationFormatterFactory extends EmbeddedValueResolutionSupport implements AnnotationFormatterFactory<NumberFormat>; // Formats fields annotated with the NumberFormat annotation.\npublic class NumberStyleFormatter extends AbstractNumberFormatter; // A general-purpose number formatter using NumberFormat's number style.\npublic class PercentStyleFormatter extends AbstractNumberFormatter; // A formatter for number values in percent style.\n", "des": "Formatters for java.lang.Number properties."}
{"index": 1523, "repo": "spring-context-6.0.11", "code": "package money;\n\npublic class CurrencyUnitFormatter extends Object implements Formatter<javax.money.CurrencyUnit>; // Formatter for JSR-354 CurrencyUnit values, from and to currency code Strings.\npublic class Jsr354NumberFormatAnnotationFormatterFactory extends EmbeddedValueResolutionSupport implements AnnotationFormatterFactory<NumberFormat>; // Formats MonetaryAmount fields annotated with Spring's common NumberFormat annotation.\npublic class MonetaryAmountFormatter extends Object implements Formatter<javax.money.MonetaryAmount>; // Formatter for JSR-354 MonetaryAmount values, delegating to MonetaryAmountFormat.format(javax.money.MonetaryAmount) and MonetaryAmountFormat.parse(java.lang.CharSequence).\n", "des": "Integration with the JSR-354 javax.money package."}
{"index": 1524, "repo": "spring-context-6.0.11", "code": "package support;\n\npublic class DefaultFormattingConversionService extends FormattingConversionService; // A specialization of FormattingConversionService configured by default with converters and formatters appropriate for most applications.\npublic class FormatterPropertyEditorAdapter extends PropertyEditorSupport; // Adapter that bridges between Formatter and PropertyEditor.\npublic class FormattingConversionService extends org.springframework.core.convert.support.GenericConversionService implements FormatterRegistry, EmbeddedValueResolverAware; // A ConversionService implementation designed to be configured as a FormatterRegistry.\npublic class FormattingConversionServiceFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<FormattingConversionService>, EmbeddedValueResolverAware, org.springframework.beans.factory.InitializingBean; // A factory providing convenient access to a FormattingConversionService configured with converters and formatters for common types such as numbers and datetimes.\n", "des": "Support classes for the formatting package, providing common implementations as well as adapters."}
{"index": 1525, "repo": "spring-context-6.0.11", "code": "package classloading;\n\npackage classloading.glassfish; // Support for class instrumentation on GlassFish.\npackage classloading.jboss; // Support for class instrumentation on JBoss AS 6 and 7.\npackage classloading.tomcat; // Support for class instrumentation on Tomcat.\npublic class InstrumentationLoadTimeWeaver extends Object implements LoadTimeWeaver; // LoadTimeWeaver relying on VM Instrumentation.\npublic interface LoadTimeWeaver; // Defines the contract for adding one or more ClassFileTransformers to a ClassLoader.\npublic class ReflectiveLoadTimeWeaver extends Object implements LoadTimeWeaver; // LoadTimeWeaver which uses reflection to delegate to an underlying ClassLoader with well-known transformation hooks.\npublic class ResourceOverridingShadowingClassLoader extends ShadowingClassLoader; // Subclass of ShadowingClassLoader that overrides attempts to locate certain files.\npublic class ShadowingClassLoader extends org.springframework.core.DecoratingClassLoader; // ClassLoader decorator that shadows an enclosing ClassLoader, applying registered transformers to all affected classes.\npublic class SimpleInstrumentableClassLoader extends org.springframework.core.OverridingClassLoader; // Simplistic implementation of an instrumentable ClassLoader.\npublic class SimpleLoadTimeWeaver extends Object implements LoadTimeWeaver; // LoadTimeWeaver that builds and exposes a SimpleInstrumentableClassLoader.\npublic class SimpleThrowawayClassLoader extends org.springframework.core.OverridingClassLoader; // ClassLoader that can be used to load classes without bringing them into the parent loader.\npublic class WeavingTransformer extends Object; // ClassFileTransformer-based weaver, allowing for a list of transformers to be applied on a class byte array.\n", "des": "Support package for load time weaving based on class loaders, as required by JPA providers (but not JPA-specific)."}
{"index": 1526, "repo": "spring-context-6.0.11", "code": "package glassfish;\n\npublic class GlassFishLoadTimeWeaver extends Object implements LoadTimeWeaver; // LoadTimeWeaver implementation for GlassFish's org.glassfish.api.deployment.InstrumentableClassLoader InstrumentableClassLoader.\n", "des": "Support for class instrumentation on GlassFish."}
{"index": 1527, "repo": "spring-context-6.0.11", "code": "package jboss;\n\npublic class JBossLoadTimeWeaver extends Object implements LoadTimeWeaver; // LoadTimeWeaver implementation for JBoss's instrumentable ClassLoader.\n", "des": "Support for class instrumentation on JBoss AS 6 and 7."}
{"index": 1528, "repo": "spring-context-6.0.11", "code": "package tomcat;\n\npublic class TomcatLoadTimeWeaver extends Object implements LoadTimeWeaver; // LoadTimeWeaver implementation for Tomcat's new org.apache.tomcat.InstrumentableClassLoader.\n", "des": "Support for class instrumentation on Tomcat."}
{"index": 1529, "repo": "spring-context-6.0.11", "code": "package jmx;\n\npackage jmx.access; // Provides support for accessing remote MBean resources.\npackage jmx.export; // This package provides declarative creation and registration of Spring-managed beans as JMX MBeans.\npackage jmx.support; // Contains support classes for connecting to local and remote MBeanServers and for exposing an MBeanServer to remote clients.\npublic class JmxException extends org.springframework.core.NestedRuntimeException; // General base exception to be thrown on JMX errors.\npublic class MBeanServerNotFoundException extends JmxException; // Exception thrown when we cannot locate an instance of an MBeanServer, or when more than one instance is found.\n", "des": "This package contains Spring's JMX support, which includes registration of Spring-managed beans as JMX MBeans as well as access to remote JMX MBeans."}
{"index": 1530, "repo": "spring-context-6.0.11", "code": "package access;\n\npublic class InvalidInvocationException extends JMRuntimeException; // Thrown when trying to invoke an operation on a proxy that is not exposed by the proxied MBean resource's management interface.\npublic class InvocationFailureException extends JmxException; // Thrown when an invocation on an MBean resource failed with an exception (either a reflection exception or an exception thrown by the target method itself).\npublic class MBeanClientInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // MethodInterceptor that routes calls to an MBean running on the supplied MBeanServerConnection.\npublic class MBeanConnectFailureException extends JmxException; // Thrown when an invocation failed because of an I/O problem on the MBeanServerConnection.\npublic class MBeanInfoRetrievalException extends JmxException; // Thrown if an exception is encountered when trying to retrieve MBean metadata.\npublic class MBeanProxyFactoryBean extends MBeanClientInterceptor implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Creates a proxy to a managed resource running either locally or remotely.\npublic class NotificationListenerRegistrar extends NotificationListenerHolder implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Registrar object that associates a specific NotificationListener with one or more MBeans in an MBeanServer (typically via a MBeanServerConnection).\n", "des": "Provides support for accessing remote MBean resources."}
{"index": 1531, "repo": "spring-context-6.0.11", "code": "package export;\n\npackage export.annotation; // Annotations for MBean exposure.\npackage export.assembler; // Provides a strategy for MBeanInfo assembly.\npackage export.metadata; // Provides generic JMX metadata classes and basic support for reading JMX metadata in a provider-agnostic manner.\npackage export.naming; // Provides a strategy for ObjectName creation.\npackage export.notification; // Provides supporting infrastructure to allow Spring-created MBeans to send JMX notifications.\npublic class MBeanExporter extends MBeanRegistrationSupport implements MBeanExportOperations, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.SmartInitializingSingleton, org.springframework.beans.factory.DisposableBean; // JMX exporter that allows for exposing any Spring-managed bean to a JMX MBeanServer, without the need to define any JMX-specific information in the bean classes.\npublic interface MBeanExporterListener; // A listener that allows application code to be notified when an MBean is registered and unregistered via an MBeanExporter.\npublic class MBeanExportException extends JmxException; // Exception thrown in case of failure when exporting an MBean.\npublic interface MBeanExportOperations; // Interface that defines the set of MBean export operations that are intended to be accessed by application developers during application runtime.\npublic class NotificationListenerBean extends NotificationListenerHolder implements org.springframework.beans.factory.InitializingBean; // Helper class that aggregates a NotificationListener, a NotificationFilter, and an arbitrary handback object.\npublic class SpringModelMBean extends RequiredModelMBean; // Extension of the RequiredModelMBean class that ensures the thread context ClassLoader is switched for the managed resource's ClassLoader before any invocations occur.\npublic class UnableToRegisterMBeanException extends MBeanExportException; // Exception thrown when we are unable to register an MBean, for example because of a naming conflict.\n", "des": "This package provides declarative creation and registration of Spring-managed beans as JMX MBeans."}
{"index": 1532, "repo": "spring-context-6.0.11", "code": "package annotation;\n\npublic class AnnotationJmxAttributeSource extends Object implements JmxAttributeSource, org.springframework.beans.factory.BeanFactoryAware; // Implementation of the JmxAttributeSource interface that reads annotations and exposes the corresponding attributes.\npublic class AnnotationMBeanExporter extends MBeanExporter; // Convenient subclass of Spring's standard MBeanExporter, activating annotation usage for JMX exposure of Spring beans: ManagedResource, ManagedAttribute, ManagedOperation, etc.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ManagedAttribute; // Method-level annotation that indicates to expose a given bean property as a JMX attribute, corresponding to the ManagedAttribute.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ManagedMetric; // Method-level annotation that indicates to expose a given bean property as a JMX attribute, with added descriptor properties to indicate that it is a metric.\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented @Repeatable(ManagedNotifications.class) public @interface ManagedNotification; // Type-level annotation that indicates a JMX notification emitted by a bean.\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented public @interface ManagedNotifications; // Type-level annotation used as a container for one or more @ManagedNotification declarations.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ManagedOperation; // Method-level annotation that indicates to expose a given method as a JMX operation, corresponding to the ManagedOperation attribute.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Repeatable(ManagedOperationParameters.class) public @interface ManagedOperationParameter; // Method-level annotation used to provide metadata about operation parameters, corresponding to a ManagedOperationParameter attribute.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ManagedOperationParameters; // Method-level annotation used as a container for one or more @ManagedOperationParameter declarations.\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented public @interface ManagedResource; // Class-level annotation that indicates to register instances of a class with a JMX server, corresponding to the ManagedResource attribute.\n", "des": "Annotations for MBean exposure."}
{"index": 1533, "repo": "spring-context-6.0.11", "code": "package assembler;\n\npublic abstract class AbstractConfigurableMBeanInfoAssembler extends AbstractReflectiveMBeanInfoAssembler; // Base class for MBeanInfoAssemblers that support configurable JMX notification behavior.\npublic abstract class AbstractMBeanInfoAssembler extends Object implements MBeanInfoAssembler; // Abstract implementation of the MBeanInfoAssembler interface that encapsulates the creation of a ModelMBeanInfo instance but delegates the creation of metadata to subclasses.\npublic abstract class AbstractReflectiveMBeanInfoAssembler extends AbstractMBeanInfoAssembler; // Builds on the AbstractMBeanInfoAssembler superclass to add a basic algorithm for building metadata based on the reflective metadata of the MBean class.\npublic interface AutodetectCapableMBeanInfoAssembler extends MBeanInfoAssembler; // Extends the MBeanInfoAssembler to add autodetection logic.\npublic class InterfaceBasedMBeanInfoAssembler extends AbstractConfigurableMBeanInfoAssembler implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Subclass of AbstractReflectiveMBeanInfoAssembler that allows for the management interface of a bean to be defined using arbitrary interfaces.\npublic interface MBeanInfoAssembler; // Interface to be implemented by all classes that can create management interface metadata for a managed resource.\npublic class MetadataMBeanInfoAssembler extends AbstractReflectiveMBeanInfoAssembler implements AutodetectCapableMBeanInfoAssembler, org.springframework.beans.factory.InitializingBean; // Implementation of the MBeanInfoAssembler interface that reads the management interface information from source level metadata.\npublic class MethodExclusionMBeanInfoAssembler extends AbstractConfigurableMBeanInfoAssembler; // AbstractReflectiveMBeanInfoAssembler subclass that allows method names to be explicitly excluded as MBean operations and attributes.\npublic class MethodNameBasedMBeanInfoAssembler extends AbstractConfigurableMBeanInfoAssembler; // Subclass of AbstractReflectiveMBeanInfoAssembler that allows to specify method names to be exposed as MBean operations and attributes.\npublic class SimpleReflectiveMBeanInfoAssembler extends AbstractConfigurableMBeanInfoAssembler; // Simple subclass of AbstractReflectiveMBeanInfoAssembler that always votes yes for method and property inclusion, effectively exposing all public methods and properties as operations and attributes.\n", "des": "Provides a strategy for MBeanInfo assembly."}
{"index": 1534, "repo": "spring-context-6.0.11", "code": "package metadata;\n\npublic abstract class AbstractJmxAttribute extends Object; // Base class for all JMX metadata classes.\npublic class InvalidMetadataException extends JmxException; // Thrown by the JmxAttributeSource when it encounters incorrect metadata on a managed resource or one of its methods.\npublic interface JmxAttributeSource; // Interface used by the MetadataMBeanInfoAssembler to read source-level metadata from a managed resource's class.\npublic abstract class JmxMetadataUtils extends Object; // Utility methods for converting Spring JMX metadata into their plain JMX equivalents.\npublic class ManagedAttribute extends AbstractJmxAttribute; // Metadata that indicates to expose a given bean property as JMX attribute.\npublic class ManagedMetric extends AbstractJmxAttribute; // Metadata that indicates to expose a given bean property as a JMX attribute, with additional descriptor properties that indicate that the attribute is a metric.\npublic class ManagedNotification extends Object; // Metadata that indicates a JMX notification emitted by a bean.\npublic class ManagedOperation extends AbstractJmxAttribute; // Metadata that indicates to expose a given method as JMX operation.\npublic class ManagedOperationParameter extends Object; // Metadata about JMX operation parameters.\npublic class ManagedResource extends AbstractJmxAttribute; // Metadata indicating that instances of an annotated class are to be registered with a JMX server.\n", "des": "Provides generic JMX metadata classes and basic support for reading JMX metadata in a provider-agnostic manner."}
{"index": 1535, "repo": "spring-context-6.0.11", "code": "package naming;\n\npublic class IdentityNamingStrategy extends Object implements ObjectNamingStrategy; // An implementation of the ObjectNamingStrategy interface that creates a name based on the identity of a given instance.\npublic class KeyNamingStrategy extends Object implements ObjectNamingStrategy, org.springframework.beans.factory.InitializingBean; // ObjectNamingStrategy implementation that builds ObjectName instances from the key used in the \"beans\" map passed to MBeanExporter.\npublic class MetadataNamingStrategy extends Object implements ObjectNamingStrategy, org.springframework.beans.factory.InitializingBean; // An implementation of the ObjectNamingStrategy interface that reads the ObjectName from the source-level metadata.\n@FunctionalInterface public interface ObjectNamingStrategy; // Strategy interface that encapsulates the creation of ObjectName instances.\npublic interface SelfNaming; // Interface that allows infrastructure components to provide their own ObjectNames to the MBeanExporter.\n", "des": "Provides a strategy for ObjectName creation."}
{"index": 1536, "repo": "spring-context-6.0.11", "code": "package notification;\n\npublic class ModelMBeanNotificationPublisher extends Object implements NotificationPublisher; // NotificationPublisher implementation that uses the infrastructure provided by the ModelMBean interface to track javax.management.NotificationListeners and send Notifications to those listeners.\n@FunctionalInterface public interface NotificationPublisher; // Simple interface allowing Spring-managed MBeans to publish JMX notifications without being aware of how those notifications are being transmitted to the MBeanServer.\npublic interface NotificationPublisherAware extends org.springframework.beans.factory.Aware; // Interface to be implemented by any Spring-managed resource that is to be registered with an MBeanServer and wishes to send JMX javax.management.Notifications.\npublic class UnableToSendNotificationException extends JmxException; // Thrown when a JMX Notification is unable to be sent.\n", "des": "Provides supporting infrastructure to allow Spring-created MBeans to send JMX notifications."}
{"index": 1537, "repo": "spring-context-6.0.11", "code": "package support;\n\npublic class ConnectorServerFactoryBean extends MBeanRegistrationSupport implements org.springframework.beans.factory.FactoryBean<JMXConnectorServer>, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // FactoryBean that creates a JSR-160 JMXConnectorServer, optionally registers it with the MBeanServer, and then starts it.\npublic abstract class JmxUtils extends Object; // Collection of generic utility methods to support Spring JMX.\npublic class MBeanRegistrationSupport extends Object; // Provides supporting infrastructure for registering MBeans with an MBeanServer.\npublic class MBeanServerConnectionFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<MBeanServerConnection>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // FactoryBean that creates a JMX 1.2 MBeanServerConnection to a remote MBeanServer exposed via a JMXServerConnector.\npublic class MBeanServerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<MBeanServer>, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // FactoryBean that obtains a MBeanServer reference through the standard JMX 1.2 MBeanServerFactory API.\npublic enum MetricType extends Enum<MetricType>; // Represents how the measurement values of a ManagedMetric will change over time.\npublic class NotificationListenerHolder extends Object; // Helper class that aggregates a NotificationListener, a NotificationFilter, and an arbitrary handback object, as well as the names of MBeans from which the listener wishes to receive Notifications.\npublic final class ObjectNameManager extends Object; // Helper class for the creation of ObjectName instances.\npublic enum RegistrationPolicy extends Enum<RegistrationPolicy>; // Indicates registration behavior when attempting to register an MBean that already exists.\n", "des": "Contains support classes for connecting to local and remote MBeanServers and for exposing an MBeanServer to remote clients."}
{"index": 1538, "repo": "spring-context-6.0.11", "code": "package jndi;\n\npackage jndi.support; // Support classes for JNDI usage, including a JNDI-based BeanFactory implementation.\npublic class JndiAccessor extends Object; // Convenient superclass for JNDI accessors, providing \"jndiTemplate\" and \"jndiEnvironment\" bean properties.\n@FunctionalInterface public interface JndiCallback<T>; // Callback interface to be implemented by classes that need to perform an operation (such as a lookup) in a JNDI context.\npublic class JndiLocatorDelegate extends JndiLocatorSupport; // JndiLocatorSupport subclass with public lookup methods, for convenient use as a delegate.\npublic abstract class JndiLocatorSupport extends JndiAccessor; // Convenient superclass for classes that can locate any number of JNDI objects.\npublic class JndiLookupFailureException extends org.springframework.core.NestedRuntimeException; // RuntimeException to be thrown in case of JNDI lookup failures, in particular from code that does not declare JNDI's checked NamingException: for example, from Spring's JndiObjectTargetSource.\npublic class JndiObjectFactoryBean extends JndiObjectLocator implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanClassLoaderAware; // FactoryBean that looks up a JNDI object.\npublic abstract class JndiObjectLocator extends JndiLocatorSupport implements org.springframework.beans.factory.InitializingBean; // Convenient superclass for JNDI-based service locators, providing configurable lookup of a specific JNDI resource.\npublic class JndiObjectTargetSource extends JndiObjectLocator implements org.springframework.aop.TargetSource; // AOP TargetSource that provides configurable JNDI lookups for getTarget() calls.\npublic class JndiPropertySource extends org.springframework.core.env.PropertySource<JndiLocatorDelegate>; // PropertySource implementation that reads properties from an underlying Spring JndiLocatorDelegate.\npublic class JndiTemplate extends Object; // Helper class that simplifies JNDI operations.\npublic class JndiTemplateEditor extends PropertyEditorSupport; // Properties editor for JndiTemplate objects.\npublic class TypeMismatchNamingException extends NamingException; // Exception thrown if a type mismatch is encountered for an object located in a JNDI environment.\n", "des": "The classes in this package make JNDI easier to use, facilitating the accessing of configuration stored in JNDI, and provide useful superclasses for JNDI access classes."}
{"index": 1539, "repo": "spring-context-6.0.11", "code": "package support;\n\npublic class SimpleJndiBeanFactory extends JndiLocatorSupport implements org.springframework.beans.factory.BeanFactory; // Simple JNDI-based implementation of Spring's BeanFactory interface.\n", "des": "Support classes for JNDI usage, including a JNDI-based BeanFactory implementation."}
{"index": 1540, "repo": "spring-context-6.0.11", "code": "package scheduling;\n\npackage scheduling.annotation; // Annotation support for asynchronous method execution.\npackage scheduling.concurrent; // Scheduling convenience classes for the java.util.concurrent and jakarta.enterprise.concurrent packages, allowing to set up a ThreadPoolExecutor or ScheduledThreadPoolExecutor as a bean in a Spring context.\npackage scheduling.config; // Support package for declarative scheduling configuration, with XML schema being the primary configuration format.\npackage scheduling.support; // Generic support classes for scheduling.\npublic interface SchedulingAwareRunnable extends Runnable; // Extension of the Runnable interface, adding special callbacks for long-running operations.\npublic class SchedulingException extends org.springframework.core.NestedRuntimeException; // General exception to be thrown on scheduling failures, such as the scheduler already having shut down.\npublic interface SchedulingTaskExecutor extends org.springframework.core.task.AsyncTaskExecutor; // A TaskExecutor extension exposing scheduling characteristics that are relevant to potential task submitters.\npublic interface TaskScheduler; // Task scheduler interface that abstracts the scheduling of Runnables based on different kinds of triggers.\npublic interface Trigger; // Common interface for trigger objects that determine the next execution time of a task that they get associated with.\npublic interface TriggerContext; // Context object encapsulating last execution times and last completion time of a given task.\n", "des": "General exceptions for Spring's scheduling support, independent of any specific scheduling system."}
{"index": 1541, "repo": "spring-context-6.0.11", "code": "package annotation;\n\n@Configuration(proxyBeanMethods=false) public abstract class AbstractAsyncConfiguration extends Object implements ImportAware; // Abstract base Configuration class providing common structure for enabling Spring's asynchronous method execution capability.\npublic class AnnotationAsyncExecutionInterceptor extends org.springframework.aop.interceptor.AsyncExecutionInterceptor; // Specialization of AsyncExecutionInterceptor that delegates method execution to an Executor based on the Async annotation.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Reflective public @interface Async; // Annotation that marks a method as a candidate for asynchronous execution.\npublic class AsyncAnnotationAdvisor extends org.springframework.aop.support.AbstractPointcutAdvisor implements org.springframework.beans.factory.BeanFactoryAware; // Advisor that activates asynchronous method execution through the Async annotation.\npublic class AsyncAnnotationBeanPostProcessor extends org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor; // Bean post-processor that automatically applies asynchronous invocation behavior to any bean that carries the Async annotation at class or method-level by adding a corresponding AsyncAnnotationAdvisor to the exposed proxy (either an existing AOP proxy or a newly generated proxy that implements all the target's interfaces).\npublic class AsyncConfigurationSelector extends AdviceModeImportSelector<EnableAsync>; // Selects which implementation of AbstractAsyncConfiguration should be used based on the value of EnableAsync.mode() on the importing @Configuration class.\npublic interface AsyncConfigurer; // Interface to be implemented by @Configuration classes annotated with @EnableAsync that wish to customize the Executor instance used when processing async method invocations or the AsyncUncaughtExceptionHandler instance used to process exception thrown from async method with void return type.\n@Deprecated(since=\"6.0\") public class AsyncConfigurerSupport extends Object implements AsyncConfigurer;\n@Deprecated(since=\"6.0\") public class AsyncResult<V> extends Object implements org.springframework.util.concurrent.ListenableFuture<V>;\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(AsyncConfigurationSelector.class) public @interface EnableAsync; // Enables Spring's asynchronous method execution capability, similar to functionality found in Spring's <task:*> XML namespace.\n", "des": "Annotation support for asynchronous method execution."}
{"index": 1542, "repo": "spring-context-6.0.11", "code": "package concurrent;\n\npublic class ConcurrentTaskExecutor extends Object implements org.springframework.core.task.AsyncListenableTaskExecutor, SchedulingTaskExecutor; // Adapter that takes a java.util.concurrent.Executor and exposes a Spring TaskExecutor for it.\nprotected static class ConcurrentTaskExecutor.ManagedTaskBuilder extends Object; // Delegate that wraps a given Runnable/Callable with a JSR-236 ManagedTask, exposing a long-running hint based on SchedulingAwareRunnable and a given identity name.\npublic class ConcurrentTaskScheduler extends ConcurrentTaskExecutor implements TaskScheduler; // Adapter that takes a java.util.concurrent.ScheduledExecutorService and exposes a Spring TaskScheduler for it.\npublic class CustomizableThreadFactory extends org.springframework.util.CustomizableThreadCreator implements ThreadFactory; // Implementation of the ThreadFactory interface, allowing for customizing the created threads (name, priority, etc).\npublic class DefaultManagedAwareThreadFactory extends CustomizableThreadFactory implements org.springframework.beans.factory.InitializingBean; // JNDI-based variant of CustomizableThreadFactory, performing a default lookup for JSR-236's \"java:comp/DefaultManagedThreadFactory\" in a Jakarta EE environment, falling back to the local CustomizableThreadFactory setup if not found.\npublic class DefaultManagedTaskExecutor extends ConcurrentTaskExecutor implements org.springframework.beans.factory.InitializingBean; // JNDI-based variant of ConcurrentTaskExecutor, performing a default lookup for JSR-236's \"java:comp/DefaultManagedExecutorService\" in a Jakarta EE/8 environment.\npublic class DefaultManagedTaskScheduler extends ConcurrentTaskScheduler implements org.springframework.beans.factory.InitializingBean; // JNDI-based variant of ConcurrentTaskScheduler, performing a default lookup for JSR-236's \"java:comp/DefaultManagedScheduledExecutorService\" in a Jakarta EE environment.\npublic abstract class ExecutorConfigurationSupport extends CustomizableThreadFactory implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Base class for setting up a ExecutorService (typically a ThreadPoolExecutor or ScheduledThreadPoolExecutor).\n", "des": "Scheduling convenience classes for the java.util.concurrent and jakarta.enterprise.concurrent packages, allowing to set up a ThreadPoolExecutor or ScheduledThreadPoolExecutor as a bean in a Spring context."}
{"index": 1543, "repo": "spring-context-6.0.11", "code": "package config;\n\npublic class AnnotationDrivenBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Parser for the 'annotation-driven' element of the 'task' namespace.\npublic class ContextLifecycleScheduledTaskRegistrar extends ScheduledTaskRegistrar implements org.springframework.beans.factory.SmartInitializingSingleton; // ScheduledTaskRegistrar subclass which redirects the actual scheduling of tasks to the ContextLifecycleScheduledTaskRegistrar.afterSingletonsInstantiated() callback (as of 4.1.2).\npublic class CronTask extends TriggerTask; // TriggerTask implementation defining a Runnable to be executed according to a standard cron expression.\npublic class ExecutorBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the 'executor' element of the 'task' namespace.\npublic class FixedDelayTask extends IntervalTask; // Specialization of IntervalTask for fixed-delay semantics.\npublic class FixedRateTask extends IntervalTask; // Specialization of IntervalTask for fixed-rate semantics.\npublic class IntervalTask extends Task; // Task implementation defining a Runnable to be executed at a given millisecond interval which may be treated as fixed-rate or fixed-delay depending on context.\npublic final class ScheduledTask extends Object; // A representation of a scheduled task at runtime, used as a return value for scheduling methods.\npublic interface ScheduledTaskHolder; // Common interface for exposing locally scheduled tasks.\npublic class ScheduledTaskRegistrar extends Object implements ScheduledTaskHolder, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Helper bean for registering tasks with a TaskScheduler, typically using cron expressions.\npublic class ScheduledTasksBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the 'scheduled-tasks' element of the scheduling namespace.\npublic class SchedulerBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the 'scheduler' element of the 'task' namespace.\npublic class Task extends Object; // Holder class defining a Runnable to be executed as a task, typically at a scheduled time or interval.\n", "des": "Support package for declarative scheduling configuration, with XML schema being the primary configuration format."}
{"index": 1544, "repo": "spring-context-6.0.11", "code": "package support;\n\npublic final class CronExpression extends Object; // Representation of a crontab expression that can calculate the next time it matches.\n@Deprecated(since=\"5.3\", forRemoval=true) public class CronSequenceGenerator extends Object;\npublic class CronTrigger extends Object implements Trigger; // Trigger implementation for cron expressions.\npublic class DelegatingErrorHandlingRunnable extends Object implements Runnable; // Runnable wrapper that catches any exception or error thrown from its delegate Runnable and allows an ErrorHandler to handle it.\npublic class MethodInvokingRunnable extends org.springframework.beans.support.ArgumentConvertingMethodInvoker implements Runnable, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Adapter that implements the Runnable interface as a configurable method invocation based on Spring's MethodInvoker.\npublic class PeriodicTrigger extends Object implements Trigger; // A trigger for periodic task execution.\npublic class ScheduledMethodRunnable extends Object implements Runnable; // Variant of MethodInvokingRunnable meant to be used for processing of no-arg scheduled methods.\npublic class SimpleTriggerContext extends Object implements TriggerContext; // Simple data holder implementation of the TriggerContext interface.\npublic abstract class TaskUtils extends Object; // Utility methods for decorating tasks with error handling.\n", "des": "Generic support classes for scheduling."}
{"index": 1545, "repo": "spring-context-6.0.11", "code": "package scripting;\n\npackage scripting.bsh; // Package providing integration of BeanShell (and BeanShell2) into Spring's scripting infrastructure.\npackage scripting.config; // Support package for Spring's dynamic language machinery, with XML schema being the primary configuration format.\npackage scripting.groovy; // Package providing integration of Groovy into Spring's scripting infrastructure.\npackage scripting.support; // Support classes for Spring's scripting package.\npublic class ScriptCompilationException extends org.springframework.core.NestedRuntimeException; // Exception to be thrown on script compilation failure.\npublic interface ScriptEvaluator; // Spring's strategy interface for evaluating a script.\npublic interface ScriptFactory; // Script definition interface, encapsulating the configuration of a specific script as well as a factory method for creating the actual scripted Java Object.\npublic interface ScriptSource; // Interface that defines the source of a script.\n", "des": "Core interfaces for Spring's scripting support."}
{"index": 1546, "repo": "spring-context-6.0.11", "code": "package bsh;\n\npublic class BshScriptEvaluator extends Object implements ScriptEvaluator, org.springframework.beans.factory.BeanClassLoaderAware; // BeanShell-based implementation of Spring's ScriptEvaluator strategy interface.\npublic class BshScriptFactory extends Object implements ScriptFactory, org.springframework.beans.factory.BeanClassLoaderAware; // ScriptFactory implementation for a BeanShell script.\npublic abstract class BshScriptUtils extends Object; // Utility methods for handling BeanShell-scripted objects.\npublic static final class BshScriptUtils.BshExecutionException extends org.springframework.core.NestedRuntimeException; // Exception to be thrown on script execution failure.\n", "des": "Package providing integration of BeanShell (and BeanShell2) into Spring's scripting infrastructure."}
{"index": 1547, "repo": "spring-context-6.0.11", "code": "package config;\n\npublic class LangNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler that supports the wiring of objects backed by dynamic languages such as Groovy, JRuby and BeanShell.\npublic abstract class LangNamespaceUtils extends Object; // Utilities for use with LangNamespaceHandler.\n", "des": "Support package for Spring's dynamic language machinery, with XML schema being the primary configuration format."}
{"index": 1548, "repo": "spring-context-6.0.11", "code": "package groovy;\n\n@FunctionalInterface public interface GroovyObjectCustomizer; // Strategy used by GroovyScriptFactory to allow the customization of a created GroovyObject.\npublic class GroovyScriptEvaluator extends Object implements ScriptEvaluator, org.springframework.beans.factory.BeanClassLoaderAware; // Groovy-based implementation of Spring's ScriptEvaluator strategy interface.\npublic class GroovyScriptFactory extends Object implements ScriptFactory, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanClassLoaderAware; // ScriptFactory implementation for a Groovy script.\n", "des": "Package providing integration of Groovy into Spring's scripting infrastructure."}
{"index": 1549, "repo": "spring-context-6.0.11", "code": "package support;\n\npublic class RefreshableScriptTargetSource extends org.springframework.aop.target.dynamic.BeanFactoryRefreshableTargetSource; // Subclass of BeanFactoryRefreshableTargetSource that determines whether a refresh is required through the given ScriptFactory.\npublic class ResourceScriptSource extends Object implements ScriptSource; // ScriptSource implementation based on Spring's Resource abstraction.\npublic class ScriptFactoryPostProcessor extends Object implements org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, ResourceLoaderAware, org.springframework.beans.factory.DisposableBean, org.springframework.core.Ordered; // BeanPostProcessor that handles ScriptFactory definitions, replacing each factory with the actual scripted Java object generated by it.\npublic class StandardScriptEvalException extends RuntimeException; // Exception decorating a ScriptException coming out of JSR-223 script evaluation, i.e.\npublic class StandardScriptEvaluator extends Object implements ScriptEvaluator, org.springframework.beans.factory.BeanClassLoaderAware; // javax.script (JSR-223) based implementation of Spring's ScriptEvaluator strategy interface.\npublic class StandardScriptFactory extends Object implements ScriptFactory, org.springframework.beans.factory.BeanClassLoaderAware; // ScriptFactory implementation based on the JSR-223 script engine abstraction (as included in Java).\npublic abstract class StandardScriptUtils extends Object; // Common operations for dealing with a JSR-223 ScriptEngine.\npublic class StaticScriptSource extends Object implements ScriptSource; // Static implementation of the ScriptSource interface, encapsulating a given String that contains the script source text.\n", "des": "Support classes for Spring's scripting package."}
{"index": 1550, "repo": "spring-context-6.0.11", "code": "package stereotype;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Indexed public @interface Component; // Indicates that an annotated class is a \"component\".\n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface Controller; // Indicates that an annotated class is a \"Controller\" (e.g.\n@Target(TYPE) @Retention(RUNTIME) @Documented public @interface Indexed; // Indicate that the annotated element represents a stereotype for the index.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface Repository; // Indicates that an annotated class is a \"Repository\", originally defined by Domain-Driven Design (Evans, 2003) as \"a mechanism for encapsulating storage, retrieval, and search behavior which emulates a collection of objects\".\n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface Service; // Indicates that an annotated class is a \"Service\", originally defined by Domain-Driven Design (Evans, 2003) as \"an operation offered as an interface that stands alone in the model, with no encapsulated state.\"\n", "des": "Annotations denoting the roles of types or methods in the overall architecture (at a conceptual, rather than implementation, level)."}
{"index": 1551, "repo": "spring-context-6.0.11", "code": "package ui;\n\npackage ui.context; // Contains classes defining the application context subinterface for UI applications.\npublic class ConcurrentModel extends ConcurrentHashMap<String,Object> implements Model; // Implementation of the Model interface based on a ConcurrentHashMap for use in concurrent scenarios.\npublic class ExtendedModelMap extends ModelMap implements Model; // Subclass of ModelMap that implements the Model interface.\npublic interface Model; // Interface that defines a holder for model attributes.\npublic class ModelMap extends LinkedHashMap<String,Object>; // Implementation of Map for use when building model data for use with UI tools.\n", "des": "Generic support for UI layer concepts."}
{"index": 1552, "repo": "spring-context-6.0.11", "code": "package context;\n\npackage context.support; // Classes supporting the org.springframework.ui.context package.\n@Deprecated(since=\"6.0\") public interface HierarchicalThemeSource extends ThemeSource;\n@Deprecated(since=\"6.0\") public interface Theme;\n@Deprecated(since=\"6.0\") public interface ThemeSource;\n", "des": "Contains classes defining the application context subinterface for UI applications."}
{"index": 1553, "repo": "spring-context-6.0.11", "code": "package support;\n\n@Deprecated(since=\"6.0\") public class DelegatingThemeSource extends Object implements HierarchicalThemeSource;\n@Deprecated(since=\"6.0\") public class ResourceBundleThemeSource extends Object implements HierarchicalThemeSource, org.springframework.beans.factory.BeanClassLoaderAware;\n@Deprecated(since=\"6.0\") public class SimpleTheme extends Object implements Theme;\n@Deprecated(since=\"6.0\") public abstract class UiApplicationContextUtils extends Object;\n", "des": "Classes supporting the org.springframework.ui.context package."}
{"index": 1554, "repo": "spring-context-6.0.11", "code": "package validation;\n\npackage validation.annotation; // Support classes for annotation-based constraint evaluation, e.g.\npackage validation.beanvalidation; // Support classes for integrating a JSR-303 Bean Validation provider (such as Hibernate Validator) into a Spring ApplicationContext and in particular with Spring's data binding and validation APIs.\npackage validation.support; // Support classes for handling validation results.\npublic abstract class AbstractBindingResult extends AbstractErrors implements BindingResult, Serializable; // Abstract implementation of the BindingResult interface and its super-interface Errors.\npublic abstract class AbstractErrors extends Object implements Errors, Serializable; // Abstract implementation of the Errors interface.\npublic abstract class AbstractPropertyBindingResult extends AbstractBindingResult; // Abstract base class for BindingResult implementations that work with Spring's PropertyAccessor mechanism.\npublic class BeanPropertyBindingResult extends AbstractPropertyBindingResult implements Serializable; // Default implementation of the Errors and BindingResult interfaces, for the registration and evaluation of binding errors on JavaBean objects.\npublic class BindException extends Exception implements BindingResult; // Thrown when binding errors are considered fatal.\npublic interface BindingErrorProcessor; // Strategy for processing DataBinder's missing field errors, and for translating a PropertyAccessException to a FieldError.\npublic interface BindingResult extends Errors; // General interface that represents binding results.\npublic abstract class BindingResultUtils extends Object; // Convenience methods for looking up BindingResults in a model Map.\npublic class DataBinder extends Object implements org.springframework.beans.PropertyEditorRegistry, org.springframework.beans.TypeConverter; // Binder that allows for setting property values on a target object, including support for validation and binding result analysis.\npublic class DefaultBindingErrorProcessor extends Object implements BindingErrorProcessor; // Default BindingErrorProcessor implementation.\npublic class DefaultMessageCodesResolver extends Object implements MessageCodesResolver, Serializable; // Default implementation of the MessageCodesResolver interface.\npublic static enum DefaultMessageCodesResolver.Format extends Enum<DefaultMessageCodesResolver.Format> implements MessageCodeFormatter; // Common message code formats.\npublic class DirectFieldBindingResult extends AbstractPropertyBindingResult; // Special implementation of the Errors and BindingResult interfaces, supporting registration and evaluation of binding errors on value objects.\npublic interface Errors; // Stores and exposes information about data-binding and validation errors for a specific object.\n", "des": "Provides data binding and validation functionality, for usage in business and/or UI layers."}
{"index": 1555, "repo": "spring-context-6.0.11", "code": "package annotation;\n\n@Target({TYPE,METHOD,PARAMETER}) @Retention(RUNTIME) @Documented public @interface Validated; // Variant of JSR-303's Valid, supporting the specification of validation groups.\npublic abstract class ValidationAnnotationUtils extends Object; // Utility class for handling validation annotations.\n", "des": "Support classes for annotation-based constraint evaluation, e.g."}
{"index": 1556, "repo": "spring-context-6.0.11", "code": "package beanvalidation;\n\npublic class BeanValidationPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.beans.factory.InitializingBean; // Simple BeanPostProcessor that checks JSR-303 constraint annotations in Spring-managed beans, throwing an initialization exception in case of constraint violations right before calling the bean's init method (if any).\npublic class CustomValidatorBean extends SpringValidatorAdapter implements Validator, org.springframework.beans.factory.InitializingBean; // Configurable bean class that exposes a specific JSR-303 Validator through its original interface as well as through the Spring Validator interface.\npublic class LocaleContextMessageInterpolator extends Object implements MessageInterpolator; // Delegates to a target MessageInterpolator implementation but enforces Spring's managed Locale.\npublic class LocalValidatorFactoryBean extends SpringValidatorAdapter implements ValidatorFactory, ApplicationContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // This is the central class for jakarta.validation (JSR-303) setup in a Spring application context: It bootstraps a jakarta.validation.ValidationFactory and exposes it through the Spring Validator interface as well as through the JSR-303 Validator interface and the ValidatorFactory interface itself.\npublic class MessageSourceResourceBundleLocator extends Object implements org.hibernate.validator.spi.resourceloading.ResourceBundleLocator; // Implementation of Hibernate Validator 4.3/5.x's ResourceBundleLocator interface, exposing a Spring MessageSource as localized MessageSourceResourceBundle.\npublic class MethodValidationInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor; // An AOP Alliance MethodInterceptor implementation that delegates to a JSR-303 provider for performing method-level validation on annotated methods.\npublic class MethodValidationPostProcessor extends org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor implements org.springframework.beans.factory.InitializingBean; // A convenient BeanPostProcessor implementation that delegates to a JSR-303 provider for performing method-level validation on annotated methods.\n", "des": "Support classes for integrating a JSR-303 Bean Validation provider (such as Hibernate Validator) into a Spring ApplicationContext and in particular with Spring's data binding and validation APIs."}
{"index": 1557, "repo": "spring-context-6.0.11", "code": "package support;\n\npublic class BindingAwareConcurrentModel extends ConcurrentModel; // Subclass of ConcurrentModel that automatically removes the BindingResult object when its corresponding target attribute is replaced through regular Map operations.\npublic class BindingAwareModelMap extends ExtendedModelMap; // Subclass of ExtendedModelMap that automatically removes a BindingResult object if the corresponding target attribute gets replaced through regular Map operations.\n", "des": "Support classes for handling validation results."}
{"index": 1558, "repo": "spring-restdocs-core-3.0.0", "code": "package restdocs;\n\npackage restdocs.cli; // Documenting CLI commands required to make a request to a RESTful API.\npackage restdocs.config; // Classes for configuring Spring REST Docs.\npackage restdocs.constraints; // Documenting a RESTful API's constraints.\npackage restdocs.cookies; // Documenting the cookies of a RESTful API's requests and responses.\npackage restdocs.generate; // Classes that drive the generation of the documentation snippets.\npackage restdocs.headers; // Documenting the headers of a RESTful API's requests and responses.\npackage restdocs.http; // Documenting the HTTP request sent to a RESTful API and the HTTP response that is returned.\npackage restdocs.hypermedia; // Documenting a RESTful API that uses hypermedia.\npackage restdocs.operation; // Operation API that describes a request that was sent and the response that was received when calling a RESTful API.\npackage restdocs.payload; // Documenting the payload of a RESTful API's requests and responses.\npackage restdocs.request; // Documenting query and path parameters of requests sent to a RESTful API.\npackage restdocs.snippet; // Snippet generation.\npackage restdocs.templates; // Template API used to render documentation snippets.\npublic class JUnitRestDocumentation extends Object implements RestDocumentationContextProvider, org.junit.rules.TestRule; // A JUnit TestRule used to automatically manage the RestDocumentationContext.\npublic final class ManualRestDocumentation extends Object implements RestDocumentationContextProvider; // ManualRestDocumentation is used to manually manage the RestDocumentationContext.\npublic interface RestDocumentationContext; // RestDocumentationContext encapsulates the context in which the documentation of a RESTful API is being performed.\npublic interface RestDocumentationContextProvider; // A RestDocumentationContextProvider is used to provide access to the RestDocumentationContext.\npublic class RestDocumentationExtension extends Object implements org.junit.jupiter.api.extension.BeforeEachCallback, org.junit.jupiter.api.extension.AfterEachCallback, org.junit.jupiter.api.extension.ParameterResolver; // A JUnit Jupiter Extension used to automatically manage the RestDocumentationContext.\n", "des": "Core Spring REST Docs classes."}
{"index": 1559, "repo": "spring-restdocs-core-3.0.0", "code": "package cli;\n\npublic abstract class CliDocumentation extends Object; // Static factory methods for documenting a RESTful API as if it were being driven using a command-line utility such as curl or HTTPie.\npublic interface CommandFormatter; // Formatter for CLI commands such as those included in CurlRequestSnippet and HttpieRequestSnippet.\npublic class CurlRequestSnippet extends TemplatedSnippet; // A Snippet that documents the curl command for a request.\npublic class HttpieRequestSnippet extends TemplatedSnippet; // A Snippet that documents the HTTPie command for a request.\n", "des": "Documenting CLI commands required to make a request to a RESTful API."}
{"index": 1560, "repo": "spring-restdocs-core-3.0.0", "code": "package config;\n\npublic abstract class AbstractConfigurer extends Object; // Abstract configurer that declares methods that are internal to the documentation configuration implementation.\npublic abstract class AbstractNestedConfigurer<PARENT> extends AbstractConfigurer; // Base class for NestedConfigurer implementations.\npublic abstract class OperationPreprocessorsConfigurer<PARENT,TYPE> extends AbstractNestedConfigurer<PARENT>; // A configurer that can be used to configure the default operation preprocessors.\npublic abstract class RestDocumentationConfigurer<S extends AbstractConfigurer,P extends AbstractConfigurer,T> extends Object; // Abstract base class for the configuration of Spring REST Docs.\npublic abstract class SnippetConfigurer<PARENT,TYPE> extends AbstractNestedConfigurer<PARENT>; // A configurer that can be used to configure the generated documentation snippets.\n", "des": "Classes for configuring Spring REST Docs."}
{"index": 1561, "repo": "spring-restdocs-core-3.0.0", "code": "package constraints;\n\npublic class Constraint extends Object; // A constraint.\npublic interface ConstraintDescriptionResolver; // Resolves a description for a Constraint.\npublic class ConstraintDescriptions extends Object; // Provides access to descriptions of a class's constraints.\npublic interface ConstraintResolver; // An abstraction for resolving a class's constraints.\npublic class ResourceBundleConstraintDescriptionResolver extends Object implements ConstraintDescriptionResolver; // A ConstraintDescriptionResolver that resolves constraint descriptions from a ResourceBundle.\npublic class ValidatorConstraintResolver extends Object implements ConstraintResolver; // A ConstraintResolver that uses a Bean Validation Validator to resolve constraints.\n", "des": "Documenting a RESTful API's constraints."}
{"index": 1562, "repo": "spring-restdocs-core-3.0.0", "code": "package cookies;\n\npublic abstract class AbstractCookiesSnippet extends TemplatedSnippet; // Abstract TemplatedSnippet subclass that provides a base for snippets that document a RESTful resource's request or response cookies.\npublic class CookieDescriptor extends IgnorableDescriptor<CookieDescriptor>; // A description of a cookie found in a request or response.\npublic abstract class CookieDocumentation extends Object; // Static factory methods for documenting a RESTful API's request and response cookies.\npublic class RequestCookiesSnippet extends AbstractCookiesSnippet; // A Snippet that documents the cookies in a request.\npublic class ResponseCookiesSnippet extends AbstractCookiesSnippet; // A Snippet that documents the cookies in a response.\n", "des": "Documenting the cookies of a RESTful API's requests and responses."}
{"index": 1563, "repo": "spring-restdocs-core-3.0.0", "code": "package generate;\n\npublic class RestDocumentationGenerationException extends RuntimeException; // An exception that can be thrown when a failure occurs during REST documentation generation.\npublic final class RestDocumentationGenerator<REQ,RESP> extends Object; // A RestDocumentationGenerator is used to generate documentation snippets from the request and response of an operation performed on a service.\n", "des": "Classes that drive the generation of the documentation snippets."}
{"index": 1564, "repo": "spring-restdocs-core-3.0.0", "code": "package headers;\n\npublic abstract class AbstractHeadersSnippet extends TemplatedSnippet; // Abstract TemplatedSnippet subclass that provides a base for snippets that document a RESTful resource's request or response headers.\npublic class HeaderDescriptor extends AbstractDescriptor<HeaderDescriptor>; // A description of a header found in a request or response.\npublic abstract class HeaderDocumentation extends Object; // Static factory methods for documenting a RESTful API's request and response headers.\npublic class RequestHeadersSnippet extends AbstractHeadersSnippet; // A Snippet that documents the headers in a request.\npublic class ResponseHeadersSnippet extends AbstractHeadersSnippet; // A Snippet that documents the headers in a response.\n", "des": "Documenting the headers of a RESTful API's requests and responses."}
{"index": 1565, "repo": "spring-restdocs-core-3.0.0", "code": "package http;\n\npublic abstract class HttpDocumentation extends Object; // Static factory methods for documenting a RESTful API's HTTP requests.\npublic class HttpRequestSnippet extends TemplatedSnippet; // A Snippet that documents an HTTP request.\npublic class HttpResponseSnippet extends TemplatedSnippet; // A Snippet that documents an HTTP response.\n", "des": "Documenting the HTTP request sent to a RESTful API and the HTTP response that is returned."}
{"index": 1566, "repo": "spring-restdocs-core-3.0.0", "code": "package hypermedia;\n\npublic abstract class HypermediaDocumentation extends Object; // Static factory methods for documenting a RESTful API that utilizes Hypermedia.\npublic class Link extends Object; // Representation of a link used in a Hypermedia-based API.\npublic class LinkDescriptor extends IgnorableDescriptor<LinkDescriptor>; // A description of a link found in a hypermedia API.\npublic interface LinkExtractor; // A LinkExtractor is used to extract links from a JSON response.\npublic class LinksSnippet extends TemplatedSnippet; // A Snippet that documents a RESTful resource's links.\n", "des": "Documenting a RESTful API that uses hypermedia."}
{"index": 1567, "repo": "spring-restdocs-core-3.0.0", "code": "package operation;\n\npackage operation.preprocess; // Support for preprocessing an operation prior to it being documented.\npublic class ConversionException extends RuntimeException; // An exception that can be thrown by RequestConverter and ResponseConverter implementations to indicate that a failure has occurred during conversion.\npublic final class FormParameters extends LinkedMultiValueMap<String,String>; // A request's form parameters, derived from its form URL encoded body content.\npublic interface Operation; // Describes an operation performed on a RESTful service.\npublic interface OperationRequest; // The request that was sent as part of performing an operation on a RESTful service.\npublic class OperationRequestFactory extends Object; // A factory for creating OperationRequests.\npublic interface OperationRequestPart; // A part of a multipart request.\npublic class OperationRequestPartFactory extends Object; // A factory for creating OperationRequestParts.\npublic interface OperationResponse; // The response that was received as part of performing an operation on a RESTful service.\npublic class OperationResponseFactory extends Object; // A factory for creating OperationResponses.\npublic final class QueryParameters extends LinkedMultiValueMap<String,String>; // A request's query parameters, derived from its URI's query string.\npublic interface RequestConverter<R>; // A RequestConverter is used to convert an implementation-specific request into an OperationRequest.\npublic final class RequestCookie extends Object; // A representation of a Cookie received in a request.\npublic interface ResponseConverter<R>; // A ResponseConverter is used to convert an implementation-specific response into an OperationResponse.\npublic final class ResponseCookie extends Object; // A representation of a Cookie returned in a response.\npublic class StandardOperation extends Object implements Operation; // Standard implementation of Operation.\n", "des": "Operation API that describes a request that was sent and the response that was received when calling a RESTful API."}
{"index": 1568, "repo": "spring-restdocs-core-3.0.0", "code": "package preprocess;\n\npublic interface ContentModifier; // A ContentModifier modifies the content of an OperationRequest or OperationResponse during the preprocessing that is performed prior to documentation generation.\npublic class ContentModifyingOperationPreprocessor extends Object implements OperationPreprocessor; // An OperationPreprocessor that applies a ContentModifier to the content of the request or response.\npublic class HeadersModifyingOperationPreprocessor extends Object implements OperationPreprocessor; // An OperationPreprocessor that modifies a request or response by adding, setting, or removing headers.\npublic interface OperationPreprocessor; // An OperationPreprocessor processes the OperationRequest and OperationResponse of an Operation prior to it being documented.\npublic abstract class OperationPreprocessorAdapter extends Object implements OperationPreprocessor; // An implementation of OperationPreprocessor that returns the request and response as-is.\npublic interface OperationRequestPreprocessor; // An OperationRequestPreprocessor is used to modify an OperationRequest prior to it being documented.\npublic interface OperationResponsePreprocessor; // An OperationResponsePreprocessor is used to modify an OperationResponse prior to it being documented.\npublic final class Preprocessors extends Object; // Static factory methods for creating OperationPreprocessors that can be applied to an Operation's request or response before it is documented.\npublic class PrettyPrintingContentModifier extends Object implements ContentModifier; // A ContentModifier that modifies the content by pretty printing it.\npublic class UriModifyingOperationPreprocessor extends Object implements OperationPreprocessor; // An OperationPreprocessor that modifies URIs in the request and in the response by changing one or more of their host, scheme, and port.\n", "des": "Support for preprocessing an operation prior to it being documented."}
{"index": 1569, "repo": "spring-restdocs-core-3.0.0", "code": "package payload;\n\npublic abstract class AbstractBodySnippet extends TemplatedSnippet; // Abstract TemplatedSnippet subclass that provides a base for snippets that document a RESTful resource's request or response body.\npublic abstract class AbstractFieldsSnippet extends TemplatedSnippet; // Abstract TemplatedSnippet subclass that provides a base for snippets that document a RESTful resource's request or response fields.\npublic class FieldDescriptor extends IgnorableDescriptor<FieldDescriptor>; // A description of a field found in a request or response payload.\npublic class FieldDoesNotExistException extends RuntimeException; // A FieldDoesNotExistException is thrown when a requested field does not exist in a payload.\npublic class FieldPathPayloadSubsectionExtractor extends Object implements PayloadSubsectionExtractor<FieldPathPayloadSubsectionExtractor>; // A PayloadSubsectionExtractor that extracts the subsection of the JSON payload identified by a field path.\npublic class FieldTypeRequiredException extends RuntimeException; // A FieldTypeRequiredException is thrown when a field's type cannot be determined automatically and, therefore, must be explicitly provided.\npublic interface FieldTypeResolver; // Resolves the type of a field in a request or response payload.\npublic enum JsonFieldType extends Enum<JsonFieldType>; // An enumeration of the possible types for a field in a JSON request or response payload.\npublic abstract class PayloadDocumentation extends Object; // Static factory methods for documenting a RESTful API's request and response payloads.\npublic interface PayloadSubsectionExtractor<T extends PayloadSubsectionExtractor<T>>; // Strategy interface for extracting a subsection of a payload.\npublic class RequestBodySnippet extends AbstractBodySnippet; // A Snippet that documents the body of a request.\npublic class RequestFieldsSnippet extends AbstractFieldsSnippet; // A Snippet that documents the fields in a request.\npublic class RequestPartBodySnippet extends AbstractBodySnippet; // A Snippet that documents the body of a request part.\npublic class RequestPartFieldsSnippet extends AbstractFieldsSnippet; // A Snippet that documents the fields in a request part.\npublic class ResponseBodySnippet extends AbstractBodySnippet; // A Snippet that documents the body of a response.\npublic class ResponseFieldsSnippet extends AbstractFieldsSnippet; // A Snippet that documents the fields in a response.\npublic class SubsectionDescriptor extends FieldDescriptor; // A description of a subsection, i.e.\n", "des": "Documenting the payload of a RESTful API's requests and responses."}
{"index": 1570, "repo": "spring-restdocs-core-3.0.0", "code": "package request;\n\npublic abstract class AbstractParametersSnippet extends TemplatedSnippet; // Abstract TemplatedSnippet subclass that provides a base for snippets that document parameters from a request sent to a RESTful resource.\npublic class FormParametersSnippet extends AbstractParametersSnippet; // A Snippet that documents the form parameters supported by a RESTful resource.\npublic class ParameterDescriptor extends IgnorableDescriptor<ParameterDescriptor>; // A descriptor of a request or path parameter.\npublic class PathParametersSnippet extends AbstractParametersSnippet; // A Snippet that documents the path parameters supported by a RESTful resource.\npublic class QueryParametersSnippet extends AbstractParametersSnippet; // A Snippet that documents the query parameters supported by a RESTful resource.\npublic abstract class RequestDocumentation extends Object; // Static factory methods for documenting aspects of a request sent to a RESTful API.\npublic class RequestPartDescriptor extends IgnorableDescriptor<RequestPartDescriptor>; // A descriptor of a request part.\npublic class RequestPartsSnippet extends TemplatedSnippet; // A Snippet that documents the request parts supported by a RESTful resource.\n", "des": "Documenting query and path parameters of requests sent to a RESTful API."}
{"index": 1571, "repo": "spring-restdocs-core-3.0.0", "code": "package snippet;\n\npublic abstract class AbstractDescriptor<T extends AbstractDescriptor<T>> extends Object; // Base class for descriptors.\npublic abstract class Attributes extends Object; // A fluent API for building a map of attributes.\npublic static final class Attributes.Attribute extends Object; // An attribute (key-value pair).\npublic static final class Attributes.AttributeBuilder extends Object; // A simple builder for an attribute (key-value pair).\npublic abstract class IgnorableDescriptor<T extends IgnorableDescriptor<T>> extends AbstractDescriptor<T>; // Base class for descriptors for items that can be ignored.\npublic class ModelCreationException extends RuntimeException; // An exception that can be thrown by a TemplatedSnippet to indicate that a failure has occurred during model creation.\npublic interface PlaceholderResolverFactory; // A factory for creating PropertyPlaceholderHelper.PlaceholderResolver instances.\npublic class RestDocumentationContextPlaceholderResolver extends Object implements PropertyPlaceholderHelper.PlaceholderResolver; // A PropertyPlaceholderHelper.PlaceholderResolver that resolves placeholders using a RestDocumentationContext.\npublic final class RestDocumentationContextPlaceholderResolverFactory extends Object implements PlaceholderResolverFactory; // A PlaceholderResolverFactory that creates RestDocumentationContextPlaceholderResolver instances.\npublic interface Snippet; // A Snippet is used to document aspects of a call to a RESTful API.\npublic class SnippetException extends RuntimeException; // A RuntimeException thrown to indicate a problem with the generation of a documentation snippet.\npublic final class StandardWriterResolver extends Object implements WriterResolver; // Standard implementation of WriterResolver.\npublic abstract class TemplatedSnippet extends Object implements Snippet; // Base class for a Snippet that is produced using a Template and TemplateEngine.\npublic interface WriterResolver; // A WriterResolver is used to access the Writer that should be used to write a snippet for an operation that is being documented.\n", "des": "Snippet generation."}
{"index": 1572, "repo": "spring-restdocs-core-3.0.0", "code": "package templates;\n\npackage templates.mustache; // JMustache-based implementation of the template API.\npublic class StandardTemplateResourceResolver extends Object implements TemplateResourceResolver; // Standard implementation of TemplateResourceResolver.\npublic interface Template; // A compiled Template that can be rendered to a String.\npublic interface TemplateEngine; // A TemplateEngine is used to render documentation snippets.\npublic interface TemplateFormat; // A TemplateFormat provides information about a particular template format, such as Asciidoctor or Markdown.\npublic abstract class TemplateFormats extends Object; // An enumeration of the built-in formats for which templates are provided.\npublic interface TemplateResourceResolver; // A TemplateResourceResolver is responsible for resolving a name for a template into a Resource from which the template can be read.\n", "des": "Template API used to render documentation snippets."}
{"index": 1573, "repo": "spring-restdocs-core-3.0.0", "code": "package mustache;\n\npublic final class AsciidoctorTableCellContentLambda extends Object implements org.springframework.restdocs.mustache.Mustache.Lambda; // A Mustache.Lambda that escapes | characters so that the do not break the table's formatting.\npublic class MustacheTemplate extends Object implements Template; // An adapter that exposes a compiled Mustache template as a Template.\npublic class MustacheTemplateEngine extends Object implements TemplateEngine; // A Mustache-based TemplateEngine implemented using JMustache.\n", "des": "JMustache-based implementation of the template API."}
{"index": 1574, "repo": "spring-cloud-task-core-3.0.3", "code": "package configuration;\n\npublic class DefaultTaskConfigurer extends Object implements TaskConfigurer; // Default implementation of the TaskConfigurer interface.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(TaskLifecycleConfiguration.class) public @interface EnableTask; // Enables the TaskLifecycleListener so that the features of Spring Cloud Task will be applied.\n@AutoConfiguration @EnableTransactionManagement @EnableConfigurationProperties(TaskProperties.class) @ConditionalOnProperty(prefix=\"spring.cloud.task.autoconfiguration\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) @Import(org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer.class) public class SimpleTaskAutoConfiguration extends Object; // Base Configuration class providing common structure for enabling and using Spring Task.\npublic class SingleInstanceTaskListener extends Object implements org.springframework.context.ApplicationListener<org.springframework.context.ApplicationEvent>; // When spring.cloud.task.single-instance-enabled is set to true this listener will create a lock for the task based on the spring.cloud.task.name.\n@Order(-2147483648) @AutoConfiguration @ConditionalOnProperty(prefix=\"spring.cloud.task\", name=\"single-instance-enabled\", havingValue=\"true\") public class SingleTaskConfiguration extends Object; // Autoconfiguration of SingleInstanceTaskListener.\npublic interface TaskConfigurer; // Provides a strategy interface for providing configuration customization to the task system.\n@Configuration(proxyBeanMethods=false) public class TaskLifecycleConfiguration extends Object; // Configuration for a TaskLifecycleListener.\npublic class TaskObservationCloudKeyValues extends Object; // Provides values for the KeyValues for the task Observation when the cloud profile is active.\n@ConfigurationProperties(prefix=\"spring.cloud.task\") public class TaskProperties extends Object; // Properties available to configure the task.\npublic class TaskRuntimeHints extends Object implements org.springframework.aot.hint.RuntimeHintsRegistrar; // Native Hints for Spring Cloud Task.\n", "des": "Interfaces for configuring Spring Cloud Task and a default implementations."}
{"index": 1575, "repo": "spring-cloud-task-core-3.0.3", "code": "package dao;\n\npublic class JdbcTaskExecutionDao extends Object implements TaskExecutionDao; // Stores Task Execution Information to a JDBC DataSource.\npublic class MapTaskExecutionDao extends Object implements TaskExecutionDao; // Stores Task Execution Information to a in-memory map.\npublic interface TaskExecutionDao; // Data Access Object for task executions.\n", "des": "Interface DAO and default implementations for storing and retrieving data for tasks from a repository."}
{"index": 1576, "repo": "spring-cloud-task-core-3.0.3", "code": "package support;\n\npublic enum DatabaseType extends Enum<DatabaseType>; // Enum representing a database type, such as DB2 or oracle.\npublic class SimpleTaskExplorer extends Object implements TaskExplorer; // TaskExplorer for that gathers task information from a task repository.\npublic class SimpleTaskNameResolver extends Object implements TaskNameResolver, org.springframework.context.ApplicationContextAware; // Simple implementation of the TaskNameResolver interface.\npublic class SimpleTaskRepository extends Object implements TaskRepository; // Records the task execution information to the log and to TaskExecutionDao provided.\npublic class TaskExecutionDaoFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<TaskExecutionDao>; // A FactoryBean implementation that creates the appropriate TaskExecutionDao based on the provided information.\npublic final class TaskRepositoryInitializer extends Object implements org.springframework.beans.factory.InitializingBean; // Utility for initializing the Task Repository's datasource.\n", "des": "Classes used for setting up and supporting a task repositories."}
{"index": 1577, "repo": "spring-security-oauth2-client-6.1.2", "code": "package client;\n\npackage client.authentication; // Support classes and interfaces for authenticating and authorizing a client with an OAuth 2.0 Authorization Server using a specific authorization grant flow.\npackage client.endpoint; // Classes and interfaces providing support to the client for initiating requests to the Authorization Server's Protocol Endpoints.\npackage client.registration; // Classes and interfaces that provide support for ClientRegistration.\npackage client.userinfo; // Classes and interfaces providing support to the client for initiating requests to the OAuth 2.0 Authorization Server's UserInfo Endpoint.\npackage client.web; // OAuth 2.0 Client Filter's and supporting classes and interfaces.\npublic final class AuthorizationCodeOAuth2AuthorizedClientProvider extends Object implements OAuth2AuthorizedClientProvider; // An implementation of an OAuth2AuthorizedClientProvider for the authorization_code grant.\npublic final class AuthorizationCodeReactiveOAuth2AuthorizedClientProvider extends Object implements ReactiveOAuth2AuthorizedClientProvider; // An implementation of a ReactiveOAuth2AuthorizedClientProvider for the authorization_code grant.\npublic final class AuthorizedClientServiceOAuth2AuthorizedClientManager extends Object implements OAuth2AuthorizedClientManager; // An implementation of an OAuth2AuthorizedClientManager that is capable of operating outside of the context of a HttpServletRequest, e.g.\npublic static class AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper extends Object implements Function<OAuth2AuthorizeRequest,Map<String,Object>>; // The default implementation of the contextAttributesMapper.\npublic final class AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager extends Object implements ReactiveOAuth2AuthorizedClientManager; // An implementation of a ReactiveOAuth2AuthorizedClientManager that is capable of operating outside of the context of a ServerWebExchange, e.g.\npublic static class AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager.DefaultContextAttributesMapper extends Object implements Function<OAuth2AuthorizeRequest,reactor.core.publisher.Mono<Map<String,Object>>>; // The default implementation of the contextAttributesMapper.\npublic class ClientAuthorizationException extends org.springframework.security.oauth2.core.OAuth2AuthorizationException; // This exception is thrown on the client side when an attempt to authenticate or authorize an OAuth 2.0 client fails.\npublic class ClientAuthorizationRequiredException extends ClientAuthorizationException; // This exception is thrown when an OAuth 2.0 Client is required to obtain authorization from the Resource Owner.\n", "des": "Core classes and interfaces providing support for OAuth 2.0 Client."}
{"index": 1578, "repo": "spring-security-oauth2-client-6.1.2", "code": "package authentication;\n\npublic class OAuth2AuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // An implementation of an AbstractAuthenticationToken that represents an OAuth 2.0 Authentication.\npublic class OAuth2AuthorizationCodeAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider; // An implementation of an AuthenticationProvider for the OAuth 2.0 Authorization Code Grant.\npublic class OAuth2AuthorizationCodeAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // An AbstractAuthenticationToken for the OAuth 2.0 Authorization Code Grant.\npublic class OAuth2AuthorizationCodeReactiveAuthenticationManager extends Object implements org.springframework.security.authentication.ReactiveAuthenticationManager; // An implementation of an AuthenticationProvider for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.\npublic class OAuth2LoginAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider; // An implementation of an AuthenticationProvider for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.\npublic class OAuth2LoginAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // An AbstractAuthenticationToken for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.\npublic class OAuth2LoginReactiveAuthenticationManager extends Object implements org.springframework.security.authentication.ReactiveAuthenticationManager; // An implementation of an AuthenticationProvider for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.\n", "des": "Support classes and interfaces for authenticating and authorizing a client with an OAuth 2.0 Authorization Server using a specific authorization grant flow."}
{"index": 1579, "repo": "spring-security-oauth2-client-6.1.2", "code": "package endpoint;\n\npublic abstract class AbstractOAuth2AuthorizationGrantRequest extends Object; // Base implementation of an OAuth 2.0 Authorization Grant request that holds an authorization grant credential and is used when initiating a request to the Authorization Server's Token Endpoint.\npublic abstract class AbstractWebClientReactiveOAuth2AccessTokenResponseClient<T extends AbstractOAuth2AuthorizationGrantRequest> extends Object implements ReactiveOAuth2AccessTokenResponseClient<T>; // Abstract base class for all of the WebClientReactive*TokenResponseClients that communicate to the Authorization Server's Token Endpoint.\npublic final class DefaultAuthorizationCodeTokenResponseClient extends Object implements OAuth2AccessTokenResponseClient<OAuth2AuthorizationCodeGrantRequest>; // The default implementation of an OAuth2AccessTokenResponseClient for the authorization_code grant.\npublic final class DefaultClientCredentialsTokenResponseClient extends Object implements OAuth2AccessTokenResponseClient<OAuth2ClientCredentialsGrantRequest>; // The default implementation of an OAuth2AccessTokenResponseClient for the client_credentials grant.\npublic final class DefaultJwtBearerTokenResponseClient extends Object implements OAuth2AccessTokenResponseClient<JwtBearerGrantRequest>; // The default implementation of an OAuth2AccessTokenResponseClient for the jwt-bearer grant.\n@Deprecated public final class DefaultPasswordTokenResponseClient extends Object implements OAuth2AccessTokenResponseClient<OAuth2PasswordGrantRequest>;\npublic final class DefaultRefreshTokenTokenResponseClient extends Object implements OAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>; // The default implementation of an OAuth2AccessTokenResponseClient for the refresh_token grant.\npublic class JwtBearerGrantRequest extends AbstractOAuth2AuthorizationGrantRequest; // A JWT Bearer Grant request that holds a Jwt assertion.\npublic class JwtBearerGrantRequestEntityConverter extends Object; // An implementation of an AbstractOAuth2AuthorizationGrantRequestEntityConverter that converts the provided JwtBearerGrantRequest to a RequestEntity representation of an OAuth 2.0 Access Token Request for the JWT Bearer Grant.\npublic final class NimbusJwtClientAuthenticationParametersConverter<T extends AbstractOAuth2AuthorizationGrantRequest> extends Object implements org.springframework.core.convert.converter.Converter<T,org.springframework.util.MultiValueMap<String,String>>; // A Converter that customizes the OAuth 2.0 Access Token Request parameters by adding a signed JSON Web Token (JWS) to be used for client authentication at the Authorization Server's Token Endpoint.\n", "des": "Classes and interfaces providing support to the client for initiating requests to the Authorization Server's Protocol Endpoints."}
{"index": 1580, "repo": "spring-security-oauth2-client-6.1.2", "code": "package authentication;\n\npublic class OidcAuthorizationCodeAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider; // An implementation of an AuthenticationProvider for the OpenID Connect Core 1.0 Authorization Code Grant Flow.\npublic class OidcAuthorizationCodeReactiveAuthenticationManager extends Object implements org.springframework.security.authentication.ReactiveAuthenticationManager; // An implementation of an AuthenticationProvider for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.\npublic final class OidcIdTokenDecoderFactory extends Object implements org.springframework.security.oauth2.jwt.JwtDecoderFactory<ClientRegistration>; // A factory that provides a JwtDecoder used for OidcIdToken signature verification.\npublic final class OidcIdTokenValidator extends Object implements org.springframework.security.oauth2.core.OAuth2TokenValidator<org.springframework.security.oauth2.jwt.Jwt>; // An OAuth2TokenValidator responsible for validating the claims in an ID Token.\npublic final class ReactiveOidcIdTokenDecoderFactory extends Object implements org.springframework.security.oauth2.jwt.ReactiveJwtDecoderFactory<ClientRegistration>; // A factory that provides a ReactiveJwtDecoder used for OidcIdToken signature verification.\n", "des": "Support classes and interfaces for authenticating and authorizing a client with an OpenID Connect 1.0 Provider using a specific authorization grant flow."}
{"index": 1581, "repo": "spring-security-oauth2-client-6.1.2", "code": "package userinfo;\n\npublic class OidcReactiveOAuth2UserService extends Object implements ReactiveOAuth2UserService<OidcUserRequest,org.springframework.security.oauth2.core.oidc.user.OidcUser>; // An implementation of an ReactiveOAuth2UserService that supports OpenID Connect 1.0 Provider's.\npublic class OidcUserRequest extends OAuth2UserRequest; // Represents a request the OidcUserService uses when initiating a request to the UserInfo Endpoint.\npublic class OidcUserService extends Object implements OAuth2UserService<OidcUserRequest,org.springframework.security.oauth2.core.oidc.user.OidcUser>; // An implementation of an OAuth2UserService that supports OpenID Connect 1.0 Provider's.\n", "des": "Classes and interfaces providing support to the client for initiating requests to the OpenID Connect 1.0 Provider's UserInfo Endpoint."}
{"index": 1582, "repo": "spring-security-oauth2-client-6.1.2", "code": "package registration;\n\npublic final class ClientRegistration extends Object implements Serializable; // A representation of a client registration with an OAuth 2.0 or OpenID Connect 1.0 Provider.\npublic static final class ClientRegistration.Builder extends Object implements Serializable; // A builder for ClientRegistration.\npublic interface ClientRegistrationRepository; // A repository for OAuth 2.0 / OpenID Connect 1.0 ClientRegistration(s).\npublic final class ClientRegistrations extends Object; // Allows creating a ClientRegistration.Builder from an OpenID Provider Configuration or Authorization Server Metadata based on provided issuer.\npublic final class InMemoryClientRegistrationRepository extends Object implements ClientRegistrationRepository, Iterable<ClientRegistration>; // A ClientRegistrationRepository that stores ClientRegistration(s) in-memory.\npublic final class InMemoryReactiveClientRegistrationRepository extends Object implements ReactiveClientRegistrationRepository, Iterable<ClientRegistration>; // A Reactive ClientRegistrationRepository that stores ClientRegistration(s) in-memory.\npublic interface ReactiveClientRegistrationRepository; // A reactive repository for OAuth 2.0 / OpenID Connect 1.0 ClientRegistration(s).\n", "des": "Classes and interfaces that provide support for ClientRegistration."}
{"index": 1583, "repo": "spring-security-oauth2-client-6.1.2", "code": "package userinfo;\n\npublic class DefaultOAuth2UserService extends Object implements OAuth2UserService<OAuth2UserRequest,org.springframework.security.oauth2.core.user.OAuth2User>; // An implementation of an OAuth2UserService that supports standard OAuth 2.0 Provider's.\npublic class DefaultReactiveOAuth2UserService extends Object implements ReactiveOAuth2UserService<OAuth2UserRequest,org.springframework.security.oauth2.core.user.OAuth2User>; // An implementation of an ReactiveOAuth2UserService that supports standard OAuth 2.0 Provider's.\npublic class DelegatingOAuth2UserService<R extends OAuth2UserRequest,U extends org.springframework.security.oauth2.core.user.OAuth2User> extends Object implements OAuth2UserService<R,U>; // An implementation of an OAuth2UserService that simply delegates to it's internal List of OAuth2UserService(s).\npublic class OAuth2UserRequest extends Object; // Represents a request the OAuth2UserService uses when initiating a request to the UserInfo Endpoint.\npublic class OAuth2UserRequestEntityConverter extends Object implements org.springframework.core.convert.converter.Converter<OAuth2UserRequest,org.springframework.http.RequestEntity<?>>; // A Converter that converts the provided OAuth2UserRequest to a RequestEntity representation of a request for the UserInfo Endpoint.\n@FunctionalInterface public interface OAuth2UserService<R extends OAuth2UserRequest,U extends org.springframework.security.oauth2.core.user.OAuth2User>; // Implementations of this interface are responsible for obtaining the user attributes of the End-User (Resource Owner) from the UserInfo Endpoint using the Access Token granted to the Client and returning an AuthenticatedPrincipal in the form of an OAuth2User.\n@FunctionalInterface public interface ReactiveOAuth2UserService<R extends OAuth2UserRequest,U extends org.springframework.security.oauth2.core.user.OAuth2User>; // Implementations of this interface are responsible for obtaining the user attributes of the End-User (Resource Owner) from the UserInfo Endpoint using the Access Token granted to the Client and returning an AuthenticatedPrincipal in the form of an OAuth2User.\n", "des": "Classes and interfaces providing support to the client for initiating requests to the OAuth 2.0 Authorization Server's UserInfo Endpoint."}
{"index": 1584, "repo": "spring-security-oauth2-client-6.1.2", "code": "package web;\n\npublic final class AuthenticatedPrincipalOAuth2AuthorizedClientRepository extends Object implements OAuth2AuthorizedClientRepository; // An implementation of an OAuth2AuthorizedClientRepository that delegates to the provided OAuth2AuthorizedClientService if the current Principal is authenticated, otherwise, to the default (or provided) OAuth2AuthorizedClientRepository if the current request is unauthenticated (or anonymous).\npublic interface AuthorizationRequestRepository<T extends org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest>; // Implementations of this interface are responsible for the persistence of OAuth2AuthorizationRequest between requests.\npublic final class DefaultOAuth2AuthorizationRequestResolver extends Object implements OAuth2AuthorizationRequestResolver; // An implementation of an OAuth2AuthorizationRequestResolver that attempts to resolve an OAuth2AuthorizationRequest from the provided HttpServletRequest using the default request URI pattern /oauth2/authorization/{registrationId}.\npublic final class DefaultOAuth2AuthorizedClientManager extends Object implements OAuth2AuthorizedClientManager; // The default implementation of an OAuth2AuthorizedClientManager for use within the context of a HttpServletRequest.\npublic static class DefaultOAuth2AuthorizedClientManager.DefaultContextAttributesMapper extends Object implements Function<OAuth2AuthorizeRequest,Map<String,Object>>; // The default implementation of the contextAttributesMapper.\npublic final class DefaultReactiveOAuth2AuthorizedClientManager extends Object implements ReactiveOAuth2AuthorizedClientManager; // The default implementation of a ReactiveOAuth2AuthorizedClientManager for use within the context of a ServerWebExchange.\npublic static class DefaultReactiveOAuth2AuthorizedClientManager.DefaultContextAttributesMapper extends Object implements Function<OAuth2AuthorizeRequest,reactor.core.publisher.Mono<Map<String,Object>>>; // The default implementation of the contextAttributesMapper.\npublic final class HttpSessionOAuth2AuthorizationRequestRepository extends Object implements AuthorizationRequestRepository<org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest>; // An implementation of an AuthorizationRequestRepository that stores OAuth2AuthorizationRequest in the HttpSession.\npublic final class HttpSessionOAuth2AuthorizedClientRepository extends Object implements OAuth2AuthorizedClientRepository; // An implementation of an OAuth2AuthorizedClientRepository that stores OAuth2AuthorizedClient's in the HttpSession.\n", "des": "OAuth 2.0 Client Filter's and supporting classes and interfaces."}
{"index": 1585, "repo": "spring-websocket-6.0.11", "code": "package socket;\n\npackage socket.adapter; // Classes adapting Spring's WebSocket API to and from WebSocket providers.\npackage socket.client; // Client-side abstractions for WebSocket applications.\npackage socket.config; // Configuration support for WebSocket request handling.\npackage socket.handler; // Convenient WebSocketHandler implementations and decorators.\npackage socket.messaging; // WebSocket integration for Spring's messaging module.\npackage socket.server; // Server-side abstractions for WebSocket interactions.\npackage socket.sockjs; // Top-level SockJS types.\npublic abstract class AbstractWebSocketMessage<T> extends Object implements WebSocketMessage<T>; // A message that can be handled or sent on a WebSocket connection.\npublic final class BinaryMessage extends AbstractWebSocketMessage<ByteBuffer>; // A binary WebSocket message.\npublic final class CloseStatus extends Object implements Serializable; // Represents a WebSocket close status code and reason.\npublic final class PingMessage extends AbstractWebSocketMessage<ByteBuffer>; // A WebSocket ping message.\npublic final class PongMessage extends AbstractWebSocketMessage<ByteBuffer>; // A WebSocket pong message.\npublic interface SubProtocolCapable; // An interface for WebSocket handlers that support sub-protocols as defined in RFC 6455.\npublic final class TextMessage extends AbstractWebSocketMessage<String>; // A text WebSocket message.\npublic class WebSocketExtension extends Object; // Represents a WebSocket extension as defined in the RFC 6455.\npublic interface WebSocketHandler; // A handler for WebSocket messages and lifecycle events.\npublic class WebSocketHttpHeaders extends org.springframework.http.HttpHeaders; // An HttpHeaders variant that adds support for the HTTP headers defined by the WebSocket specification RFC 6455.\npublic interface WebSocketMessage<T>; // A message that can be handled or sent on a WebSocket connection.\npublic interface WebSocketSession extends Closeable; // A WebSocket session abstraction.\n", "des": "Common abstractions and Spring configuration support for WebSocket applications."}
{"index": 1586, "repo": "spring-websocket-6.0.11", "code": "package adapter;\n\npackage adapter.jetty; // Adapter classes for the Jetty WebSocket API.\npackage adapter.standard; // Adapter classes for the standard Jakarta WebSocket API.\npublic abstract class AbstractWebSocketSession<T> extends Object implements NativeWebSocketSession; // An abstract base class for implementations of WebSocketSession.\npublic interface NativeWebSocketSession extends WebSocketSession; // A WebSocketSession that exposes the underlying, native WebSocketSession through a getter.\n", "des": "Classes adapting Spring's WebSocket API to and from WebSocket providers."}
{"index": 1587, "repo": "spring-websocket-6.0.11", "code": "package jetty;\n\n@WebSocket public class JettyWebSocketHandlerAdapter extends Object; // Adapts WebSocketHandler to the Jetty 9 WebSocket API.\npublic class JettyWebSocketSession extends AbstractWebSocketSession<org.eclipse.jetty.websocket.api.Session>; // A WebSocketSession for use with the Jetty 9.4 WebSocket API.\npublic class WebSocketToJettyExtensionConfigAdapter extends org.eclipse.jetty.websocket.common.JettyExtensionConfig; // Adapter class to convert a WebSocketExtension to a Jetty ExtensionConfig.\n", "des": "Adapter classes for the Jetty WebSocket API."}
{"index": 1588, "repo": "spring-websocket-6.0.11", "code": "package standard;\n\npublic abstract class ConvertingEncoderDecoderSupport<T,M> extends Object; // Base class that can be used to implement a standard Encoder and/or Decoder.\npublic abstract static class ConvertingEncoderDecoderSupport.BinaryDecoder<T> extends ConvertingEncoderDecoderSupport<T,ByteBuffer> implements Decoder.Binary<T>; // A binary jakarta.websocket.Encoder that delegates to Spring's conversion service.\npublic abstract static class ConvertingEncoderDecoderSupport.BinaryEncoder<T> extends ConvertingEncoderDecoderSupport<T,ByteBuffer> implements Encoder.Binary<T>; // A binary jakarta.websocket.Encoder that delegates to Spring's conversion service.\npublic abstract static class ConvertingEncoderDecoderSupport.TextDecoder<T> extends ConvertingEncoderDecoderSupport<T,String> implements Decoder.Text<T>; // A Text jakarta.websocket.Encoder that delegates to Spring's conversion service.\npublic abstract static class ConvertingEncoderDecoderSupport.TextEncoder<T> extends ConvertingEncoderDecoderSupport<T,String> implements Encoder.Text<T>; // A text jakarta.websocket.Encoder that delegates to Spring's conversion service.\npublic class StandardToWebSocketExtensionAdapter extends WebSocketExtension; // A subclass of WebSocketExtension that can be constructed from a Extension.\npublic class StandardWebSocketHandlerAdapter extends Endpoint; // Adapts a WebSocketHandler to the standard WebSocket for Java API.\npublic class StandardWebSocketSession extends AbstractWebSocketSession<Session>; // A WebSocketSession for use with the standard WebSocket for Java API.\npublic class WebSocketToStandardExtensionAdapter extends Object implements Extension; // Adapt an instance of WebSocketExtension to the Extension interface.\n", "des": "Adapter classes for the standard Jakarta WebSocket API."}
{"index": 1589, "repo": "spring-websocket-6.0.11", "code": "package client;\n\npackage client.jetty; // Client-side support for the Jetty WebSocket API.\npackage client.standard; // Client-side classes for use with standard Jakarta WebSocket endpoints.\npublic abstract class AbstractWebSocketClient extends Object implements WebSocketClient; // Abstract base class for WebSocketClient implementations.\npublic abstract class ConnectionManagerSupport extends Object implements org.springframework.context.SmartLifecycle; // Base class for a connection manager that automates the process of connecting to a WebSocket server with the Spring ApplicationContext lifecycle.\npublic interface WebSocketClient; // Contract for initiating a WebSocket request.\npublic class WebSocketConnectionManager extends ConnectionManagerSupport; // WebSocket connection manager that connects to the server via WebSocketClient and handles the session with a WebSocketHandler.\n", "des": "Client-side abstractions for WebSocket applications."}
{"index": 1590, "repo": "spring-websocket-6.0.11", "code": "package jetty;\n\n@Deprecated(since=\"6.0.3\", forRemoval=true) public class JettyWebSocketClient extends AbstractWebSocketClient implements org.springframework.context.Lifecycle;\n", "des": "Client-side support for the Jetty WebSocket API."}
{"index": 1591, "repo": "spring-websocket-6.0.11", "code": "package standard;\n\npublic class AnnotatedEndpointConnectionManager extends ConnectionManagerSupport implements org.springframework.beans.factory.BeanFactoryAware; // WebSocket connection manager that connects to the server via WebSocketContainer and handles the session with an @ClientEndpoint endpoint.\npublic class EndpointConnectionManager extends ConnectionManagerSupport implements org.springframework.beans.factory.BeanFactoryAware; // WebSocket connection manager that connects to the server via WebSocketContainer and handles the session with an Endpoint.\npublic class StandardWebSocketClient extends AbstractWebSocketClient; // A WebSocketClient based on the standard Jakarta WebSocket API.\npublic class WebSocketContainerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<WebSocketContainer>; // A FactoryBean for creating and configuring a WebSocketContainer through Spring XML configuration.\n", "des": "Client-side classes for use with standard Jakarta WebSocket endpoints."}
{"index": 1592, "repo": "spring-websocket-6.0.11", "code": "package config;\n\npackage config.annotation; // Support for annotation-based WebSocket setup in configuration classes.\npublic class WebSocketMessageBrokerStats extends Object; // A central class for aggregating information about internal state and counters from key infrastructure components of the setup that comes with @EnableWebSocketMessageBroker for Java config and <websocket:message-broker> for XML.\npublic class WebSocketNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for Spring WebSocket configuration namespace.\n", "des": "Configuration support for WebSocket request handling."}
{"index": 1593, "repo": "spring-websocket-6.0.11", "code": "package annotation;\n\npublic abstract class AbstractWebSocketHandlerRegistration<M> extends Object implements WebSocketHandlerRegistration; // Base class for WebSocketHandlerRegistrations that gathers all the configuration options but allows subclasses to put together the actual HTTP request mappings.\n@Configuration(proxyBeanMethods=false) public class DelegatingWebSocketConfiguration extends WebSocketConfigurationSupport; // A variation of WebSocketConfigurationSupport that detects implementations of WebSocketConfigurer in Spring configuration and invokes them in order to configure WebSocket request handling.\n@Configuration(proxyBeanMethods=false) public class DelegatingWebSocketMessageBrokerConfiguration extends WebSocketMessageBrokerConfigurationSupport; // A WebSocketMessageBrokerConfigurationSupport extension that detects beans of type WebSocketMessageBrokerConfigurer and delegates to all of them allowing callback style customization of the configuration provided in WebSocketMessageBrokerConfigurationSupport.\n@Retention(RUNTIME) @Target(TYPE) @Documented @Import(DelegatingWebSocketConfiguration.class) public @interface EnableWebSocket; // Add this annotation to an @Configuration class to configure processing WebSocket requests.\n@Retention(RUNTIME) @Target(TYPE) @Documented @Import(DelegatingWebSocketMessageBrokerConfiguration.class) public @interface EnableWebSocketMessageBroker; // Add this annotation to an @Configuration class to enable broker-backed messaging over WebSocket using a higher-level messaging sub-protocol.\npublic class ServletWebSocketHandlerRegistration extends AbstractWebSocketHandlerRegistration<org.springframework.util.MultiValueMap<org.springframework.web.HttpRequestHandler,String>>; // A helper class for configuring WebSocketHandler request handling including SockJS fallback options.\npublic class ServletWebSocketHandlerRegistry extends Object implements WebSocketHandlerRegistry; // WebSocketHandlerRegistry with Spring MVC handler mappings for the handshake requests.\npublic class SockJsServiceRegistration extends Object; // A helper class for configuring SockJS fallback options for use with an EnableWebSocket and WebSocketConfigurer setup.\npublic interface StompEndpointRegistry; // A contract for registering STOMP over WebSocket endpoints.\npublic interface StompWebSocketEndpointRegistration; // A contract for configuring a STOMP over WebSocket endpoint.\npublic class WebMvcStompEndpointRegistry extends Object implements StompEndpointRegistry; // A registry for STOMP over WebSocket endpoints that maps the endpoints with a HandlerMapping for use in Spring MVC.\n", "des": "Support for annotation-based WebSocket setup in configuration classes."}
{"index": 1594, "repo": "spring-websocket-6.0.11", "code": "package handler;\n\npublic abstract class AbstractWebSocketHandler extends Object implements WebSocketHandler; // A convenient base class for WebSocketHandler implementation with empty methods.\npublic class BeanCreatingHandlerProvider<T> extends Object implements org.springframework.beans.factory.BeanFactoryAware; // Instantiates a target handler through a Spring BeanFactory and also provides an equivalent destroy method.\npublic class BinaryWebSocketHandler extends AbstractWebSocketHandler; // A convenient base class for WebSocketHandler implementations that process binary messages only.\npublic class ConcurrentWebSocketSessionDecorator extends WebSocketSessionDecorator; // Wrap a WebSocketSession to guarantee only one thread can send messages at a time.\npublic static enum ConcurrentWebSocketSessionDecorator.OverflowStrategy extends Enum<ConcurrentWebSocketSessionDecorator.OverflowStrategy>; // Enum for options of what to do when the buffer fills up.\npublic class ExceptionWebSocketHandlerDecorator extends WebSocketHandlerDecorator; // An exception handling WebSocketHandlerDecorator.\npublic class LoggingWebSocketHandlerDecorator extends WebSocketHandlerDecorator; // A WebSocketHandlerDecorator that adds logging to WebSocket lifecycle events.\npublic class PerConnectionWebSocketHandler extends Object implements WebSocketHandler, org.springframework.beans.factory.BeanFactoryAware; // A WebSocketHandler that initializes and destroys a WebSocketHandler instance for each WebSocket connection and delegates all other methods to it.\npublic class SessionLimitExceededException extends RuntimeException; // Raised when a WebSocket session has exceeded limits it has been configured for, e.g.\npublic class TextWebSocketHandler extends AbstractWebSocketHandler; // A convenient base class for WebSocketHandler implementations that process text messages only.\npublic class WebSocketHandlerDecorator extends Object implements WebSocketHandler; // Wraps another WebSocketHandler instance and delegates to it.\npublic interface WebSocketHandlerDecoratorFactory; // A factory for applying decorators to a WebSocketHandler.\npublic class WebSocketSessionDecorator extends Object implements WebSocketSession; // Wraps another WebSocketSession instance and delegates to it.\n", "des": "Convenient WebSocketHandler implementations and decorators."}
{"index": 1595, "repo": "spring-websocket-6.0.11", "code": "package messaging;\n\npublic abstract class AbstractSubProtocolEvent extends org.springframework.context.ApplicationEvent; // A base class for events for a message received from a WebSocket client and parsed into a higher-level sub-protocol (e.g.\npublic class DefaultSimpUserRegistry extends Object implements org.springframework.messaging.simp.user.SimpUserRegistry, org.springframework.context.event.SmartApplicationListener; // A default implementation of SimpUserRegistry that relies on AbstractSubProtocolEvent application context events to keep track of connected users and their subscriptions.\npublic class SessionConnectedEvent extends AbstractSubProtocolEvent; // A connected event represents the server response to a client's connect request.\npublic class SessionConnectEvent extends AbstractSubProtocolEvent; // Event raised when a new WebSocket client using a Simple Messaging Protocol (e.g.\npublic class SessionDisconnectEvent extends AbstractSubProtocolEvent; // Event raised when the session of a WebSocket client using a Simple Messaging Protocol (e.g.\npublic class SessionSubscribeEvent extends AbstractSubProtocolEvent; // Event raised when a new WebSocket client using a Simple Messaging Protocol (e.g.\npublic class SessionUnsubscribeEvent extends AbstractSubProtocolEvent; // Event raised when a new WebSocket client using a Simple Messaging Protocol (e.g.\npublic class StompSubProtocolErrorHandler extends Object implements SubProtocolErrorHandler<byte[]>; // A SubProtocolErrorHandler for use with STOMP.\npublic class StompSubProtocolHandler extends Object implements SubProtocolHandler, org.springframework.context.ApplicationEventPublisherAware; // A SubProtocolHandler for STOMP that supports versions 1.0, 1.1, and 1.2 of the STOMP specification.\npublic static interface StompSubProtocolHandler.Stats; // Contract for access to session counters.\npublic interface SubProtocolErrorHandler<P>; // A contract for handling sub-protocol errors sent to clients.\npublic interface SubProtocolHandler; // A contract for handling WebSocket messages as part of a higher level protocol, referred to as \"sub-protocol\" in the WebSocket RFC specification.\n", "des": "WebSocket integration for Spring's messaging module."}
{"index": 1596, "repo": "spring-websocket-6.0.11", "code": "package server;\n\npackage server.jetty; // Server-side support for the Jetty 9+ WebSocket API.\npackage server.standard; // Server-side classes for use with standard JSR-356 WebSocket endpoints.\npackage server.support; // Server-side support classes including container-specific strategies for upgrading a request.\npublic class HandshakeFailureException extends org.springframework.core.NestedRuntimeException; // Thrown when handshake processing failed to complete due to an internal, unrecoverable error.\npublic interface HandshakeHandler; // Contract for processing a WebSocket handshake request.\npublic interface HandshakeInterceptor; // Interceptor for WebSocket handshake requests.\npublic interface RequestUpgradeStrategy; // A server-specific strategy for performing the actual upgrade to a WebSocket exchange.\n", "des": "Server-side abstractions for WebSocket interactions."}
{"index": 1597, "repo": "spring-websocket-6.0.11", "code": "package jetty;\n\npublic class JettyRequestUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A RequestUpgradeStrategy for Jetty 11.\n", "des": "Server-side support for the Jetty 9+ WebSocket API."}
{"index": 1598, "repo": "spring-websocket-6.0.11", "code": "package standard;\n\npublic abstract class AbstractStandardUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A base class for RequestUpgradeStrategy implementations that build on the standard WebSocket API for Java (JSR-356).\npublic abstract class AbstractTyrusRequestUpgradeStrategy extends AbstractStandardUpgradeStrategy; // A base class for RequestUpgradeStrategy implementations on top of JSR-356 based servers which include Tyrus as their WebSocket engine.\npublic class GlassFishRequestUpgradeStrategy extends AbstractTyrusRequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Oracle's GlassFish 4.1 and higher.\npublic class ServerEndpointExporter extends org.springframework.web.context.support.WebApplicationObjectSupport implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.SmartInitializingSingleton; // Detects beans of type ServerEndpointConfig and registers with the standard Jakarta WebSocket runtime.\npublic class ServerEndpointRegistration extends ServerEndpointConfig.Configurator implements ServerEndpointConfig, org.springframework.beans.factory.BeanFactoryAware; // An implementation of ServerEndpointConfig for use in Spring-based applications.\npublic class ServletServerContainerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<WebSocketContainer>, org.springframework.web.context.ServletContextAware, org.springframework.beans.factory.InitializingBean; // A FactoryBean for configuring ServerContainer.\npublic class SpringConfigurator extends ServerEndpointConfig.Configurator; // A ServerEndpointConfig.Configurator for initializing ServerEndpoint-annotated classes through Spring.\npublic class StandardWebSocketUpgradeStrategy extends AbstractStandardUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for the Jakarta WebSocket API 2.1+.\npublic class TomcatRequestUpgradeStrategy extends StandardWebSocketUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Apache Tomcat.\npublic class UndertowRequestUpgradeStrategy extends StandardWebSocketUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for WildFly and its underlying Undertow web server.\npublic class WebLogicRequestUpgradeStrategy extends AbstractTyrusRequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Oracle's WebLogic.\npublic class WebSphereRequestUpgradeStrategy extends StandardWebSocketUpgradeStrategy; // WebSphere support for upgrading an HttpServletRequest during a WebSocket handshake.\n", "des": "Server-side classes for use with standard JSR-356 WebSocket endpoints."}
{"index": 1599, "repo": "spring-websocket-6.0.11", "code": "package support;\n\npublic abstract class AbstractHandshakeHandler extends Object implements HandshakeHandler, org.springframework.context.Lifecycle; // A base class for HandshakeHandler implementations, independent of the Servlet API.\npublic class DefaultHandshakeHandler extends AbstractHandshakeHandler implements org.springframework.web.context.ServletContextAware; // A default HandshakeHandler implementation, extending AbstractHandshakeHandler with Servlet-specific initialization support.\npublic class HandshakeInterceptorChain extends Object; // A helper class that assists with invoking a list of handshake interceptors.\npublic class HttpSessionHandshakeInterceptor extends Object implements HandshakeInterceptor; // An interceptor to copy information from the HTTP session to the \"handshake attributes\" map to be made available via WebSocketSession.getAttributes().\npublic class OriginHandshakeInterceptor extends Object implements HandshakeInterceptor; // An interceptor to check request Origin header value against a collection of allowed origins.\npublic class WebSocketHandlerMapping extends org.springframework.web.servlet.handler.SimpleUrlHandlerMapping implements org.springframework.context.SmartLifecycle; // Extension of SimpleUrlHandlerMapping with support for more precise mapping of WebSocket handshake requests to handlers of type WebSocketHttpRequestHandler.\npublic class WebSocketHttpRequestHandler extends Object implements org.springframework.web.HttpRequestHandler, org.springframework.context.Lifecycle, org.springframework.web.context.ServletContextAware; // A HttpRequestHandler for processing WebSocket handshake requests.\n", "des": "Server-side support classes including container-specific strategies for upgrading a request."}
{"index": 1600, "repo": "spring-websocket-6.0.11", "code": "package sockjs;\n\npackage sockjs.client; // SockJS client implementation of WebSocketClient.\npackage sockjs.frame; // Support classes for creating SockJS frames including the encoding and decoding of SockJS message frames.\npackage sockjs.support; // Support classes for SockJS including an AbstractSockJsService implementation.\npackage sockjs.transport; // Server-side support for SockJS transports including TransportHandler implementations for processing incoming requests, their session counterparts for sending messages over the various transports, and DefaultSockJsService.\npublic class SockJsException extends org.springframework.core.NestedRuntimeException; // Base class for exceptions raised while processing SockJS HTTP requests.\npublic class SockJsMessageDeliveryException extends SockJsException; // An exception thrown when a message frame was successfully received over an HTTP POST and parsed but one or more of the messages it contained could not be delivered to the WebSocketHandler either because the handler failed or because the connection got closed.\npublic interface SockJsService; // The main entry point for processing HTTP requests from SockJS clients.\npublic class SockJsTransportFailureException extends SockJsException; // Indicates a serious failure that occurred in the SockJS implementation as opposed to in user code (e.g.\n", "des": "Top-level SockJS types."}
{"index": 1601, "repo": "spring-websocket-6.0.11", "code": "package client;\n\npublic abstract class AbstractClientSockJsSession extends Object implements WebSocketSession; // Base class for SockJS client implementations of WebSocketSession.\npublic abstract class AbstractXhrTransport extends Object implements XhrTransport; // Abstract base class for XHR transport implementations to extend.\npublic interface InfoReceiver; // A component that can execute the SockJS \"Info\" request that needs to be performed before the SockJS session starts in order to check server endpoint capabilities such as whether the endpoint permits use of WebSocket.\npublic class JettyXhrTransport extends AbstractXhrTransport implements org.springframework.context.Lifecycle; // An XHR transport based on Jetty's HttpClient.\npublic class RestTemplateXhrTransport extends AbstractXhrTransport; // An XhrTransport implementation that uses a RestTemplate.\npublic class SockJsClient extends Object implements WebSocketClient, org.springframework.context.Lifecycle; // A SockJS implementation of WebSocketClient with fallback alternatives that simulate a WebSocket interaction through plain HTTP streaming and long polling techniques.\npublic class SockJsUrlInfo extends Object; // Container for the base URL of a SockJS endpoint with additional helper methods to derive related SockJS URLs: specifically, the info and transport URLs.\npublic interface Transport; // A client-side implementation for a SockJS transport.\npublic interface TransportRequest; // Exposes information, typically to Transport and session implementations, about a request to connect to a SockJS server endpoint over a given transport.\npublic class UndertowXhrTransport extends AbstractXhrTransport; // An XHR transport based on Undertow's UndertowClient.\npublic class WebSocketClientSockJsSession extends AbstractClientSockJsSession implements NativeWebSocketSession; // An extension of AbstractClientSockJsSession wrapping and delegating to an actual WebSocket session.\npublic class WebSocketTransport extends Object implements Transport, org.springframework.context.Lifecycle; // A SockJS Transport that uses a WebSocketClient.\npublic class XhrClientSockJsSession extends AbstractClientSockJsSession; // An extension of AbstractClientSockJsSession for use with HTTP transports simulating a WebSocket session.\npublic interface XhrTransport extends Transport, InfoReceiver; // A SockJS Transport that uses HTTP requests to simulate a WebSocket interaction.\n", "des": "SockJS client implementation of WebSocketClient."}
{"index": 1602, "repo": "spring-websocket-6.0.11", "code": "package frame;\n\npublic abstract class AbstractSockJsMessageCodec extends Object implements SockJsMessageCodec; // A base class for SockJS message codec that provides an implementation of AbstractSockJsMessageCodec.encode(String[]).\npublic class DefaultSockJsFrameFormat extends Object implements SockJsFrameFormat; // A default implementation of SockJsFrameFormat that relies on String.format(String, Object...)..\npublic class Jackson2SockJsMessageCodec extends AbstractSockJsMessageCodec; // A Jackson 2.x codec for encoding and decoding SockJS messages.\npublic class SockJsFrame extends Object; // Represents a SockJS frame.\npublic interface SockJsFrameFormat; // Applies a transport-specific format to the content of a SockJS frame resulting in a content that can be written out.\npublic enum SockJsFrameType extends Enum<SockJsFrameType>; // SockJS frame types.\npublic interface SockJsMessageCodec; // Encode and decode messages to and from a SockJS message frame, essentially an array of JSON-encoded messages.\n", "des": "Support classes for creating SockJS frames including the encoding and decoding of SockJS message frames."}
{"index": 1603, "repo": "spring-websocket-6.0.11", "code": "package support;\n\npublic abstract class AbstractSockJsService extends Object implements SockJsService, org.springframework.web.cors.CorsConfigurationSource; // An abstract base class for SockJsService implementations that provides SockJS path resolution and handling of static SockJS requests (e.g.\npublic class SockJsHttpRequestHandler extends Object implements org.springframework.web.HttpRequestHandler, org.springframework.web.cors.CorsConfigurationSource, org.springframework.context.Lifecycle, org.springframework.web.context.ServletContextAware; // An HttpRequestHandler that allows mapping a SockJsService to requests in a Servlet container.\n", "des": "Support classes for SockJS including an AbstractSockJsService implementation."}
{"index": 1604, "repo": "spring-websocket-6.0.11", "code": "package transport;\n\npackage transport.handler; // TransportHandler implementation classes as well as a concrete SockJsService.\npackage transport.session; // SockJS specific implementations of WebSocketSession.\npublic interface SockJsServiceConfig; // Provides transport handling code with access to the SockJsService configuration options they need to have access to.\npublic interface SockJsSession extends WebSocketSession; // SockJS extension of Spring's standard WebSocketSession.\npublic interface SockJsSessionFactory; // A factory for creating a SockJS session.\npublic interface TransportHandler; // Handle a SockJS session URL, i.e.\npublic class TransportHandlingSockJsService extends AbstractSockJsService implements SockJsServiceConfig, org.springframework.context.Lifecycle; // A basic implementation of SockJsService with support for SPI-based transport handling and session management.\npublic enum TransportType extends Enum<TransportType>; // SockJS transport types.\n", "des": "Server-side support for SockJS transports including TransportHandler implementations for processing incoming requests, their session counterparts for sending messages over the various transports, and DefaultSockJsService."}
{"index": 1605, "repo": "spring-websocket-6.0.11", "code": "package handler;\n\npublic abstract class AbstractHttpReceivingTransportHandler extends AbstractTransportHandler; // Base class for HTTP transport handlers that receive messages via HTTP POST.\npublic abstract class AbstractHttpSendingTransportHandler extends AbstractTransportHandler implements SockJsSessionFactory; // Base class for HTTP transport handlers that push messages to connected clients.\npublic abstract class AbstractTransportHandler extends Object implements TransportHandler; // Common base class for TransportHandler implementations.\npublic class DefaultSockJsService extends TransportHandlingSockJsService implements org.springframework.web.context.ServletContextAware; // A default implementation of SockJsService with all default TransportHandler implementations pre-registered.\npublic class EventSourceTransportHandler extends AbstractHttpSendingTransportHandler; // A TransportHandler for sending messages via Server-Sent Events: https://dev.w3.org/html5/eventsource/.\npublic class HtmlFileTransportHandler extends AbstractHttpSendingTransportHandler; // An HTTP TransportHandler that uses a famous browser document.domain technique.\npublic class SockJsWebSocketHandler extends TextWebSocketHandler implements SubProtocolCapable; // An implementation of WebSocketHandler that adds SockJS messages frames, sends SockJS heartbeat messages, and delegates lifecycle events and messages to a target WebSocketHandler.\npublic class WebSocketTransportHandler extends AbstractTransportHandler implements SockJsSessionFactory, HandshakeHandler, org.springframework.context.Lifecycle, org.springframework.web.context.ServletContextAware; // WebSocket-based TransportHandler.\npublic class XhrPollingTransportHandler extends AbstractHttpSendingTransportHandler; // A TransportHandler based on XHR (long) polling.\npublic class XhrReceivingTransportHandler extends AbstractHttpReceivingTransportHandler; // A TransportHandler that receives messages over HTTP.\npublic class XhrStreamingTransportHandler extends AbstractHttpSendingTransportHandler; // A TransportHandler that sends messages over an HTTP streaming request.\n", "des": "TransportHandler implementation classes as well as a concrete SockJsService."}
{"index": 1606, "repo": "spring-websocket-6.0.11", "code": "package session;\n\npublic abstract class AbstractHttpSockJsSession extends AbstractSockJsSession; // An abstract base class for use with HTTP transport SockJS sessions.\npublic abstract class AbstractSockJsSession extends Object implements SockJsSession; // An abstract base class for SockJS sessions implementing SockJsSession.\npublic class PollingSockJsSession extends AbstractHttpSockJsSession; // A SockJS session for use with polling HTTP transports.\npublic abstract class StreamingSockJsSession extends AbstractHttpSockJsSession; // A SockJS session for use with streaming HTTP transports.\npublic class WebSocketServerSockJsSession extends AbstractSockJsSession implements NativeWebSocketSession; // A SockJS session for use with the WebSocket transport.\n", "des": "SockJS specific implementations of WebSocketSession."}
{"index": 1607, "repo": "spring-data-neo4j-7.1.2", "code": "package config;\n\n@Configuration @API(status=STABLE, since=\"6.0\") public abstract class AbstractNeo4jConfig extends Object; // Base class for imperative SDN configuration using JavaConfig.\n@Configuration @API(status=STABLE, since=\"6.0\") public abstract class AbstractReactiveNeo4jConfig extends Object; // Base class for reactive SDN configuration using JavaConfig.\n@API(status=STABLE, since=\"6.0\") @Documented @Retention(RUNTIME) @Qualifier public @interface Builtin; // An internally used CDI Qualifier to mark all beans produced by our configuration support as built in.\n@Inherited @Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.neo4j.config.Neo4jAuditingRegistrar.class) public @interface EnableNeo4jAuditing; // Annotation to enable auditing for SDN entities via annotation configuration.\n@Inherited @Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.neo4j.config.ReactiveNeo4jAuditingRegistrar.class) public @interface EnableReactiveNeo4jAuditing; // Annotation to enable auditing for SDN entities using reactive infrastructure via annotation configuration.\n@API(status=STABLE, since=\"6.0\") public final class Neo4jCdiExtension extends CdiRepositoryExtensionSupport; // This CDI extension enables Spring Data Neo4j on a CDI 2.0 compatible CDI container.\n@API(status=STABLE, since=\"6.0.2\") public final class Neo4jEntityScanner extends Object; // A utility class providing a way to discover an initial entity set for a Neo4jMappingContext.\n", "des": "This package contains configuration related support classes that can be used for application specific, annotated configuration classes."}
{"index": 1608, "repo": "spring-data-neo4j-7.1.2", "code": "package core;\n\npackage core.convert; // Provides a set of simples types that SDN supports.\npackage core.mapping; // The main mapping framework.\npackage core.schema; // This package contains the schema that is defined by a set of classes, representing nodes and relationships and their properties.\npackage core.support; // This package provides a couple of support classes that might be helpful in your domain, for example a predicate indicating that some transaction may be retried and additional converters and id generators.\npackage core.transaction; // Contains the core infrastructure for translating unmanaged Neo4j transaction into Spring managed transactions.\n@API(status=STABLE, since=\"6.0\") public final class DatabaseSelection extends Object; // A value holder indicating a database selection based on an optional name.\n@API(status=STABLE, since=\"6.0\") @FunctionalInterface public interface DatabaseSelectionProvider; // A provider interface that knows in which database repositories or either the reactive or imperative template should work.\n@API(status=STABLE, since=\"6.1\") public interface FluentFindOperation; // FluentFindOperation allows creation and execution of Neo4j find operations in a fluent API style.\npublic static interface FluentFindOperation.ExecutableFind<T> extends FluentFindOperation.FindWithProjection<T>; // Entry point for creating executable find operations.\npublic static interface FluentFindOperation.FindWithProjection<T> extends FluentFindOperation.FindWithQuery<T>; // Result type override (Optional).\npublic static interface FluentFindOperation.FindWithQuery<T> extends FluentFindOperation.TerminatingFindWithoutQuery<T>; // Terminating operations invoking the actual query execution.\npublic static interface FluentFindOperation.TerminatingFind<T> extends FluentFindOperation.TerminatingFindWithoutQuery<T>; // Triggers find execution by calling one of the terminating methods.\npublic static interface FluentFindOperation.TerminatingFindWithoutQuery<T>; // Trigger find execution by calling one of the terminating methods from a state where no query is yet defined.\n@API(status=STABLE, since=\"6.1\") public interface FluentNeo4jOperations extends FluentFindOperation, FluentSaveOperation; // An additional interface accompanying the Neo4jOperations and adding a couple of fluent operations, especially around finding and projecting things.\n", "des": "This package contains the core infrastructure for creating an imperative or reactive client that can execute queries."}
{"index": 1609, "repo": "spring-data-neo4j-7.1.2", "code": "package convert;\n\n@Retention(RUNTIME) @Target({ANNOTATION_TYPE,FIELD}) @Inherited @Documented @API(status=STABLE, since=\"6.0\") public @interface ConvertWith; // This annotation can be used to define either custom conversions for single attributes by specifying a custom Neo4jPersistentPropertyConverter and if needed, a custom factory to create that converter or the annotation can be used to build custom meta-annotated annotations like @org.springframework.data.neo4j.core.support.DateLong.\npublic static final class ConvertWith.UnsetConverter extends Object implements Neo4jPersistentPropertyConverter<Object>; // Indicates an unset converter.\n@API(status=STABLE, since=\"6.0\") public final class Neo4jConversions extends CustomConversions;\n@API(status=STABLE, since=\"6.0\") public interface Neo4jConversionService; // This service orchestrates a standard Spring conversion service with Neo4jConversions registered.\n@API(status=STABLE, since=\"6.0\") public interface Neo4jPersistentPropertyConverter<T>; // This interface represents a pair of methods capable of converting values of type T to and from values.\npublic interface Neo4jPersistentPropertyConverterFactory; // This interface needs to be implemented to provide custom configuration for a Neo4jPersistentPropertyConverter.\n@API(status=STABLE, since=\"6.0\") public interface Neo4jPersistentPropertyToMapConverter<K,P>; // You need to provide an implementation of this interface in case you want to store a property of an entity as separate properties on a node.\n@API(status=STABLE, since=\"6.0\") public final class Neo4jSimpleTypes extends Object; // A list of Neo4j simple types: All attributes that can be mapped to a property.\n", "des": "Provides a set of simples types that SDN supports."}
{"index": 1610, "repo": "spring-data-neo4j-7.1.2", "code": "package mapping;\n\npackage mapping.callback; // This package contains the callback API.\n@API(status=INTERNAL, since=\"6.3\") public final class AssociationHandlerSupport extends Object; // Warning Internal API, might change without further notice, even in patch releases.\n@API(status=EXPERIMENTAL, since=\"6.0\") public final class Constants extends Object; // A pool of constants used in our Cypher generation.\n@API(status=INTERNAL, since=\"6.0\") public final class CreateRelationshipStatementHolder extends Object; // The CreateRelationshipStatementHolder holds the Cypher Statement to create a relationship as well as the optional properties that describe the relationship in case of more than a simple relationship.\n@API(status=INTERNAL, since=\"6.0\") public enum CypherGenerator extends Enum<CypherGenerator>; // A generator based on the schema defined by node and relationship descriptions.\n@API(status=INTERNAL, since=\"6.1.2\") public final class DtoInstantiatingConverter extends Object implements Converter<EntityInstanceWithSource,Object>; // Converter to instantiate DTOs from fully equipped domain objects.\n@API(status=INTERNAL, since=\"6.1.2\") public final class EntityFromDtoInstantiatingConverter<T> extends Object implements Converter<Object,T>; // Converter to instantiate entity objects from DTOs\n@API(status=INTERNAL, since=\"6.1.2\") public final class EntityInstanceWithSource extends Object; // Used to keep the raw result around in case of a DTO based projection so that missing properties can be filled later on.\n@API(status=STABLE, since=\"6.0\") public interface GraphPropertyDescription; // Provides minimal information how to map class attributes to the properties of a node or a relationship.\n@API(status=INTERNAL, since=\"6.0\") public final class IdDescription extends Object; // Description how to generate Ids for entities.\n@API(status=INTERNAL) public final class IdentitySupport extends Object; // This class is not part of any public API and will be changed without further notice as needed.\n@API(status=INTERNAL, since=\"6.0\") public final class MappingSupport extends Object;\n", "des": "The main mapping framework."}
{"index": 1611, "repo": "spring-data-neo4j-7.1.2", "code": "package callback;\n\n@FunctionalInterface @API(status=STABLE, since=\"6.3.0\") public interface AfterConvertCallback<T> extends EntityCallback<T>; // A callback that can be used to modify an instance of a Neo4jPersistentEntity after it has been converted: That is, when a Neo4j record has been fully processed and the entity and all its associations have been processed.\n@API(status=STABLE, since=\"6.0.2\") public final class AuditingBeforeBindCallback extends Object implements BeforeBindCallback<Object>, Ordered; // EntityCallback to populate auditing related fields on an entity about to be bound to a record.\n@FunctionalInterface @API(status=STABLE, since=\"6.0.2\") public interface BeforeBindCallback<T> extends EntityCallback<T>; // Entity callback triggered before an Entity is bound to a record (represented by a java.util.Map<String, Object>).\n@API(status=INTERNAL, since=\"6.0.2\") public final class EventSupport extends Object; // Utility class that orchestrates EntityCallbacks.\n@API(status=STABLE, since=\"6.0.2\") public final class ReactiveAuditingBeforeBindCallback extends Object implements ReactiveBeforeBindCallback<Object>, Ordered; // Reactive EntityCallback to populate auditing related fields on an entity about to be bound to a record.\n@FunctionalInterface @API(status=STABLE, since=\"6.0.2\") public interface ReactiveBeforeBindCallback<T> extends EntityCallback<T>; // Entity callback triggered before an Entity is bound to a record (represented by a java.util.Map<String, Object>).\n@API(status=INTERNAL, since=\"6.0.2\") public final class ReactiveEventSupport extends Object; // Utility class that orchestrates EntityCallbacks.\n", "des": "This package contains the callback API."}
{"index": 1612, "repo": "spring-data-neo4j-7.1.2", "code": "package schema;\n\n@Retention(RUNTIME) @Target(FIELD) @Inherited @ConvertWith(converterFactory=org.springframework.data.neo4j.core.schema.CompositePropertyConverterFactory.class) @API(status=STABLE, since=\"6.0\") public @interface CompositeProperty; // This annotation indicates a persistent property that is composed of multiple properties on a node or relationship.\npublic static final class CompositeProperty.DefaultToMapConverter<K> extends Object implements Neo4jPersistentPropertyToMapConverter<K,Map<K,Object>>; // The default implementation, passing map properties through as they are on the way to the graph and possibly applying a post processor on the way out of the graph.\npublic static final class CompositeProperty.NoopTransformation extends Object implements BiFunction<CompositeProperty.Phase,String,String>; // The default operation for transforming the keys.\npublic static enum CompositeProperty.Phase extends Enum<CompositeProperty.Phase>; // Phase of the mapping currently taking place.\n@Retention(RUNTIME) @Target(FIELD) @Documented @API(status=STABLE, since=\"6.0\") public @interface DynamicLabels; // This annotation can be used on a field of type Collection<String>.\n@Retention(RUNTIME) @Target({FIELD,ANNOTATION_TYPE}) @Documented @Inherited @API(status=STABLE, since=\"6.0\") public @interface GeneratedValue; // Indicates a generated id.\npublic static final class GeneratedValue.InternalIdGenerator extends Object implements IdGenerator<Void>; // This IdGenerator does nothing.\npublic static final class GeneratedValue.UUIDGenerator extends Object implements IdGenerator<UUID>; // This generator is automatically applied when a field of type UUID is annotated with @Id and @GeneratedValue.\n@Retention(RUNTIME) @Target({FIELD,ANNOTATION_TYPE}) @Documented @Inherited @API(status=STABLE, since=\"6.0\") public @interface Id; // This annotation is included here for completeness.\n@FunctionalInterface @API(status=STABLE, since=\"6.0\") public interface IdGenerator<T>; // Interface for generating ids for entities.\n", "des": "This package contains the schema that is defined by a set of classes, representing nodes and relationships and their properties."}
{"index": 1613, "repo": "spring-data-neo4j-7.1.2", "code": "package support;\n\n@Retention(RUNTIME) @Target(FIELD) @Inherited @ConvertWith(converter=org.springframework.data.neo4j.core.support.DateLongConverter.class) @API(status=STABLE, since=\"6.0\") public @interface DateLong; // Indicates SDN to store dates as long in the database.\n@Retention(RUNTIME) @Target(FIELD) @Inherited @ConvertWith(converterFactory=org.springframework.data.neo4j.core.support.DateStringConverterFactory.class) @API(status=STABLE, since=\"6.0\") public @interface DateString; // Indicates SDN 6 to store dates as String in the database.\n@API(status=STABLE, since=\"6.0\") public final class RetryExceptionPredicate extends Object implements Predicate<Throwable>; // A predicate indicating true for throwables that can be safely retried and false in any other case.\npublic enum UserAgent extends Enum<UserAgent>; // Representation of a user agent containing sensible information to identify queries generated by or executed via Spring Data Neo4j.\n@API(status=STABLE, since=\"6.0\") public final class UUIDStringGenerator extends Object implements IdGenerator<String>; // A generator providing UUIDs.\n", "des": "This package provides a couple of support classes that might be helpful in your domain, for example a predicate indicating that some transaction may be retried and additional converters and id generators."}
{"index": 1614, "repo": "spring-data-neo4j-7.1.2", "code": "package transaction;\n\n@API(status=STABLE, since=\"6.1.1\") public sealed interface Neo4jBookmarkManager; // Responsible for storing, updating and retrieving the bookmarks of Neo4j's transaction.\n@API(status=STABLE, since=\"6.1.1\") public final class Neo4jBookmarksUpdatedEvent extends ApplicationEvent; // This event will be published after a Neo4j transaction manager physically committed a transaction without errors and received a new set of bookmarks from the cluster.\n@API(status=STABLE, since=\"6.0\") public final class Neo4jTransactionManager extends AbstractPlatformTransactionManager implements ApplicationContextAware; // Dedicated PlatformTransactionManager for native Neo4j transactions.\n@API(status=STABLE, since=\"6.2\") public static final class Neo4jTransactionManager.Builder extends Object; // A builder for Neo4jTransactionManager.\npublic final class Neo4jTransactionUtils extends Object; // Internal use only.\n@API(status=STABLE, since=\"6.0\") public final class ReactiveNeo4jTransactionManager extends AbstractReactiveTransactionManager implements ApplicationContextAware;\n@API(status=STABLE, since=\"6.2\") public static final class ReactiveNeo4jTransactionManager.Builder extends Object; // A builder for ReactiveNeo4jTransactionManager.\n", "des": "Contains the core infrastructure for translating unmanaged Neo4j transaction into Spring managed transactions."}
{"index": 1615, "repo": "spring-data-neo4j-7.1.2", "code": "package repository;\n\npackage repository.config; // Configuration infrastructure for Neo4j specific repositories, especially dedicated annotations to enable imperative and reactive Spring Data Neo4j repositories.\npackage repository.query; // A set of annotations for providing custom queries to repositories.\npackage repository.support; // This package provides a couple of public support classes for building custom imperative and reactive Spring Data Neo4j repository base classes.\n@NoRepositoryBean public interface Neo4jRepository<T,ID> extends PagingAndSortingRepository<T,ID>, QueryByExampleExecutor<T>, CrudRepository<T,ID>; // Neo4j specific Repository interface.\n@API(status=STABLE, since=\"6.0\") public class NoResultException extends EmptyResultDataAccessException; // Throw when a query doesn't return a required result.\n@NoRepositoryBean public interface ReactiveNeo4jRepository<T,ID> extends ReactiveSortingRepository<T,ID>, ReactiveQueryByExampleExecutor<T>, ReactiveCrudRepository<T,ID>; // Neo4j specific Repository interface with reactive support.\n", "des": "This package provides the Neo4j imperative and reactive repository API."}
{"index": 1616, "repo": "spring-data-neo4j-7.1.2", "code": "package config;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(org.springframework.data.neo4j.repository.config.Neo4jRepositoriesRegistrar.class) public @interface EnableNeo4jRepositories; // Annotation to activate Neo4j repositories.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(org.springframework.data.neo4j.repository.config.ReactiveNeo4jRepositoriesRegistrar.class) public @interface EnableReactiveNeo4jRepositories; // Annotation to activate reactive Neo4j repositories.\n@API(status=INTERNAL, since=\"6.0\") public final class Neo4jRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport; // This dedicated Neo4j repository extension will be registered via Neo4jRepositoriesRegistrar and then provide all necessary beans to be registered in the application's context before the user's \"business\" beans gets registered.\n@API(status=INTERNAL, since=\"6.0\") public final class ReactiveNeo4jRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport; // This dedicated Neo4j repository extension will be registered via Neo4jRepositoriesRegistrar and then provide all necessary beans to be registered in the application's context before the user's \"business\" beans gets registered.\n", "des": "Configuration infrastructure for Neo4j specific repositories, especially dedicated annotations to enable imperative and reactive Spring Data Neo4j repositories."}
{"index": 1617, "repo": "spring-data-neo4j-7.1.2", "code": "package query;\n\npublic final class BoundingBox extends Object; // This is a utility class that computes the bounding box of a polygon as a rectangle defined by the lower left and upper right point.\n@API(status=INTERNAL, since=\"6.0\") public final class CypherAdapterUtils extends Object; // Bridging between Spring Data domain Objects and Cypher constructs.\n@API(status=INTERNAL, since=\"6.1\") public final class CypherdslConditionExecutorImpl<T> extends Object implements CypherdslConditionExecutor<T>;\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @Query(exists=true) @API(status=STABLE, since=\"6.0\") public @interface ExistsQuery; // Specialized version of Query whose values is always used as exists projection.\n@API(status=INTERNAL, since=\"6.0\") public final class Neo4jQueryLookupStrategy extends Object implements QueryLookupStrategy; // Lookup strategy for queries.\n@API(status=INTERNAL, since=\"6.0.2\") public final class Neo4jSpelSupport extends Object; // This class provides a couple of extensions to the Spring Data Neo4j SpEL support.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @API(status=STABLE, since=\"6.0\") public @interface Query; // Annotation to provide Cypher statements that will be used for executing the method.\n@API(status=INTERNAL, since=\"6.1\") public final class QuerydslNeo4jPredicateExecutor<T> extends Object implements QuerydslPredicateExecutor<T>; // Querydsl specific fragment for extending SimpleNeo4jRepository with an implementation of QuerydslPredicateExecutor.\n@API(status=INTERNAL, since=\"6.0.4\") public final class QueryFragments extends Object; // Collects the parts of a Cypher query to be handed over to the Cypher generator.\n@API(status=INTERNAL, since=\"6.0.4\") public final class QueryFragmentsAndParameters extends Object; // Combines the QueryFragments with parameters.\n@API(status=INTERNAL, since=\"6.3.3\") public final class ReactiveCypherdslConditionExecutorImpl<T> extends Object implements ReactiveCypherdslConditionExecutor<T>;\n", "des": "A set of annotations for providing custom queries to repositories."}
{"index": 1618, "repo": "spring-data-neo4j-7.1.2", "code": "package support;\n\n@API(status=STABLE, since=\"6.1\") public interface CypherdslConditionExecutor<T>; // An interface that can be added to any repository so that queries can be enriched by conditions of the Cypher-DSL.\n@API(status=STABLE, since=\"6.1\") public interface CypherdslStatementExecutor<T>; // An interface that can be added to any imperative repository so that the repository exposes several methods taking in a Statement from the Cypher-DSL, that allows for full customization of the queries executed in a programmatic way in contrast to provide custom queries declaratively via @Query annotations.\npublic interface Neo4jEntityInformation<T,ID> extends EntityInformation<T,ID>; // Neo4j specific contract for entity informations.\n@API(status=INTERNAL, since=\"6.0.2\") public final class Neo4jEvaluationContextExtension extends Object implements EvaluationContextExtension; // This class registers the Neo4j SpEL Support it is registered by the appropriate repository factories as a root bean.\n@API(status=INTERNAL, since=\"6.0\") public final class Neo4jRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends TransactionalRepositoryFactoryBeanSupport<T,S,ID>; // Special adapter for Springs FactoryBean interface to allow easy setup of repository factories via Spring configuration.\n@API(status=INTERNAL, since=\"6.0\") public final class Neo4jRepositoryFactoryCdiBean<T> extends CdiRepositoryBean<T>; // The CDI pendant to the Neo4jRepositoryFactoryBean.\n@API(status=STABLE, since=\"6.3.3\") public interface ReactiveCypherdslConditionExecutor<T>; // An interface that can be added to any repository so that queries can be enriched by conditions of the Cypher-DSL.\n@API(status=STABLE, since=\"6.1\") public interface ReactiveCypherdslStatementExecutor<T>; // An interface that can be added to any reactive repository so that the repository exposes several methods taking in a Statement from the Cypher-DSL, that allows for full customization of the queries executed in a programmatic way in contrast to provide custom queries declaratively via @Query annotations.\n", "des": "This package provides a couple of public support classes for building custom imperative and reactive Spring Data Neo4j repository base classes."}
{"index": 1619, "repo": "spring-data-neo4j-7.1.2", "code": "package types;\n\n@API(status=STABLE, since=\"6.0\") public final class CartesianPoint2d extends Object;\n@API(status=STABLE, since=\"6.0\") public final class CartesianPoint3d extends Object;\npublic final class Coordinate extends Object;\n@API(status=STABLE, since=\"6.0\") public final class GeographicPoint2d extends Object;\n@API(status=STABLE, since=\"6.0\") public final class GeographicPoint3d extends Object;\n@API(status=STABLE, since=\"6.0\") public sealed interface Neo4jPoint; // A dedicated Neo4j point, that is aware of its nature, either being geographic or cartesian.\n@API(status=STABLE, since=\"6.0\") public final class PointBuilder extends Object;\n", "des": "Additional types provided by SDN."}
{"index": 1620, "repo": "spring-kafka-3.0.9", "code": "package kafka;\n\npackage kafka.annotation; // Package for kafka annotations\npackage kafka.aot; // Provides classes to support Spring AOT.\npackage kafka.config; // Package for kafka configuration\npackage kafka.core; // Package for kafka core components\npackage kafka.event; // Application Events.\npackage kafka.listener; // Package for kafka listeners\npackage kafka.mock; // Provides classes to support the use of MockConsumer and MockProducer.\npackage kafka.requestreply; // Provides classes for request/reply semantics.\npackage kafka.retrytopic; // Package for retryable topic handling.\npackage kafka.streams; // Package for classes related to Kafka Streams.\npackage kafka.support; // Package for kafka support\npackage kafka.transaction; // Provides classes related to transactions.\npublic class KafkaException extends org.springframework.core.NestedRuntimeException; // The Spring for Apache Kafka specific NestedRuntimeException implementation.\npublic static enum KafkaException.Level extends Enum<KafkaException.Level>; // The log level for KafkaException.\n", "des": "Base package for kafka"}
{"index": 1621, "repo": "spring-kafka-3.0.9", "code": "package annotation;\n\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface DltHandler; // Annotation to determine the method the should process the DLT topic message.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(KafkaListenerConfigurationSelector.class) public @interface EnableKafka; // Enable Kafka listener annotated endpoints that are created under the covers by a AbstractListenerContainerFactory.\n@Retention(RUNTIME) @Target(TYPE) @Documented @Import(RetryTopicConfigurationSupport.class) @EnableKafka public @interface EnableKafkaRetryTopic; // Enables the non-blocking topic-based delayed retries feature.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(KafkaStreamsDefaultConfiguration.class) public @interface EnableKafkaStreams; // Enable default Kafka Streams components.\npublic class KafkaBootstrapConfiguration extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar; // An ImportBeanDefinitionRegistrar class that registers a KafkaListenerAnnotationBeanPostProcessor bean capable of processing Spring's @KafkaListener annotation.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @MessageMapping @Documented public @interface KafkaHandler; // Annotation that marks a method to be the target of a Kafka message listener within a class that is annotated with KafkaListener.\n@Target({TYPE,METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @MessageMapping @Documented @Repeatable(KafkaListeners.class) public @interface KafkaListener; // Annotation that marks a method to be the target of a Kafka message listener on the specified topics.\npublic class KafkaListenerAnnotationBeanPostProcessor<K,V> extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.core.Ordered, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.SmartInitializingSingleton; // Bean post-processor that registers methods annotated with KafkaListener to be invoked by a Kafka message listener container created under the covers by a KafkaListenerContainerFactory according to the parameters of the annotation.\n", "des": "Package for kafka annotations"}
{"index": 1622, "repo": "spring-kafka-3.0.9", "code": "package aot;\n\npublic class KafkaAvroBeanRegistrationAotProcessor extends Object implements org.springframework.beans.factory.aot.BeanRegistrationAotProcessor; // Detect and register Avro types for Apache Kafka listeners.\npublic class KafkaRuntimeHints extends Object implements org.springframework.aot.hint.RuntimeHintsRegistrar; // RuntimeHintsRegistrar for Spring for Apache Kafka.\n", "des": "Provides classes to support Spring AOT."}
{"index": 1623, "repo": "spring-kafka-3.0.9", "code": "package config;\n\npublic abstract class AbstractKafkaListenerContainerFactory<C extends AbstractMessageListenerContainer<K,V>,K,V> extends Object implements KafkaListenerContainerFactory<C>, org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.InitializingBean, org.springframework.context.ApplicationContextAware; // Base KafkaListenerContainerFactory for Spring's base container implementation.\npublic abstract class AbstractKafkaListenerEndpoint<K,V> extends Object implements KafkaListenerEndpoint, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // Base model for a Kafka listener endpoint.\npublic class CompositeKafkaStreamsCustomizer extends Object implements KafkaStreamsCustomizer; // Composite KafkaStreamsCustomizer customizes KafkaStreams by delegating to a list of provided KafkaStreamsCustomizer.\npublic class CompositeKafkaStreamsInfrastructureCustomizer extends Object implements KafkaStreamsInfrastructureCustomizer; // Composite KafkaStreamsInfrastructureCustomizer customizes KafkaStreams by delegating to a list of provided KafkaStreamsInfrastructureCustomizer.\npublic class ConcurrentKafkaListenerContainerFactory<K,V> extends AbstractKafkaListenerContainerFactory<ConcurrentMessageListenerContainer<K,V>,K,V>; // A KafkaListenerContainerFactory implementation to build a ConcurrentMessageListenerContainer.\n@FunctionalInterface public interface ContainerCustomizer<K,V,C extends AbstractMessageListenerContainer<K,V>>; // Called by the container factory after the container is created and configured.\npublic abstract class KafkaListenerConfigUtils extends Object; // Configuration constants for internal sharing across subpackages.\npublic interface KafkaListenerContainerFactory<C extends MessageListenerContainer>; // Factory for MessageListenerContainers.\npublic interface KafkaListenerEndpoint; // Model for a Kafka listener endpoint.\npublic class KafkaListenerEndpointRegistrar extends Object implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // Helper bean for registering KafkaListenerEndpoint with a KafkaListenerEndpointRegistry.\n", "des": "Package for kafka configuration"}
{"index": 1624, "repo": "spring-kafka-3.0.9", "code": "package core;\n\npackage core.reactive; // Reactive component for consumer and producer.\npublic class ABSwitchCluster extends Object implements Supplier<String>; // A Supplier for bootstrap servers that can toggle between 2 lists of servers.\npublic class CleanupConfig extends Object; // Specifies time of KafkaStreams.cleanUp() execution.\npublic interface ConsumerFactory<K,V>; // The strategy to produce a Consumer instance(s).\npublic static interface ConsumerFactory.Listener<K,V>; // Called whenever a consumer is added or removed.\npublic interface ConsumerPostProcessor<K,V> extends Function<org.apache.kafka.clients.consumer.Consumer<K,V>,org.apache.kafka.clients.consumer.Consumer<K,V>>; // Called by consumer factories to perform post processing on newly created consumers.\npublic class DefaultKafkaConsumerFactory<K,V> extends KafkaResourceFactory implements ConsumerFactory<K,V>, org.springframework.beans.factory.BeanNameAware; // The ConsumerFactory implementation to produce new Consumer instances for provided Map configs and optional Deserializers on each ConsumerFactory.createConsumer() invocation.\npublic class DefaultKafkaProducerFactory<K,V> extends KafkaResourceFactory implements ProducerFactory<K,V>, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextStoppedEvent>, org.springframework.beans.factory.DisposableBean; // The ProducerFactory implementation for a singleton shared Producer instance.\nprotected static class DefaultKafkaProducerFactory.CloseSafeProducer<K,V> extends Object implements org.apache.kafka.clients.producer.Producer<K,V>; // A wrapper class for the delegate.\npublic class KafkaAdmin extends KafkaResourceFactory implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.SmartInitializingSingleton, KafkaAdminOperations; // An admin that delegates to an AdminClient to create topics defined in the application context.\npublic static class KafkaAdmin.NewTopics extends Object; // Wrapper for a collection of NewTopic to facilitate declaring multiple topics as a single bean.\npublic interface KafkaAdminOperations; // Provides a number of convenience methods wrapping AdminClient.\n", "des": "Package for kafka core components"}
{"index": 1625, "repo": "spring-kafka-3.0.9", "code": "package reactive;\n\npublic class ReactiveKafkaConsumerTemplate<K,V> extends Object; // Reactive kafka consumer operations implementation.\npublic class ReactiveKafkaProducerTemplate<K,V> extends Object implements AutoCloseable, org.springframework.beans.factory.DisposableBean; // Reactive kafka producer operations implementation.\n", "des": "Reactive component for consumer and producer."}
{"index": 1626, "repo": "spring-kafka-3.0.9", "code": "package event;\n\npublic class ConsumerFailedToStartEvent extends KafkaEvent; // An event published when a consumer fails to start.\npublic class ConsumerPartitionPausedEvent extends KafkaEvent; // An event published when a consumer partition is paused.\npublic class ConsumerPartitionResumedEvent extends KafkaEvent; // An event published when a consumer partition is resumed.\npublic class ConsumerPausedEvent extends KafkaEvent; // An event published when a consumer is paused.\npublic class ConsumerResumedEvent extends KafkaEvent; // An event published when a consumer is resumed.\npublic class ConsumerRetryAuthEvent extends KafkaEvent; // An event published when authentication or authorization of a consumer fails and is being retried.\npublic static enum ConsumerRetryAuthEvent.Reason extends Enum<ConsumerRetryAuthEvent.Reason>; // Reasons for retrying auth a consumer.\npublic class ConsumerRetryAuthSuccessfulEvent extends KafkaEvent; // An event published when authentication or authorization has been retried successfully.\npublic class ConsumerStartedEvent extends KafkaEvent; // An event published when a consumer has started.\npublic class ConsumerStartingEvent extends KafkaEvent; // An event published when a consumer is initializing.\npublic class ConsumerStoppedEvent extends KafkaEvent; // An event published when a consumer is stopped.\npublic static enum ConsumerStoppedEvent.Reason extends Enum<ConsumerStoppedEvent.Reason>; // Reasons for stopping a consumer.\npublic class ConsumerStoppingEvent extends KafkaEvent; // An event published when a consumer is stopped.\npublic class ContainerStoppedEvent extends KafkaEvent; // An event published when a container is stopped.\npublic abstract class KafkaEvent extends org.springframework.context.ApplicationEvent; // Base class for events.\npublic class ListenerContainerIdleEvent extends KafkaEvent; // An event that is emitted when a container is idle if the container is configured to do so.\npublic class ListenerContainerNoLongerIdleEvent extends KafkaEvent; // An event that is emitted when a container is no longer idle if configured to publish idle events.\npublic class ListenerContainerPartitionIdleEvent extends KafkaEvent; // An event that is emitted when a container partition is idle if the container is configured to do so.\npublic class ListenerContainerPartitionNoLongerIdleEvent extends KafkaEvent; // An event that is emitted when a partition is no longer idle if configured to publish idle events.\n", "des": "Application Events."}
{"index": 1627, "repo": "spring-kafka-3.0.9", "code": "package listener;\n\npackage listener.adapter; // Provides classes for adapting listeners.\npublic abstract class AbstractConsumerSeekAware extends Object implements ConsumerSeekAware; // Manages the ConsumerSeekAware.ConsumerSeekCallback s for the listener.\npublic abstract class AbstractKafkaBackOffManagerFactory extends Object implements KafkaBackOffManagerFactory, org.springframework.context.ApplicationContextAware; // Base class for KafkaBackOffManagerFactory implementations.\npublic abstract class AbstractMessageListenerContainer<K,V> extends Object implements GenericMessageListenerContainer<K,V>, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.ApplicationContextAware; // The base implementation for the MessageListenerContainer.\n@FunctionalInterface public interface AcknowledgingConsumerAwareMessageListener<K,V> extends MessageListener<K,V>; // Listener for handling incoming Kafka messages, propagating an acknowledgment handle that recipients can invoke when the message has been processed.\n@FunctionalInterface public interface AcknowledgingMessageListener<K,V> extends MessageListener<K,V>; // Listener for handling incoming Kafka messages, propagating an acknowledgment handle that recipients can invoke when the message has been processed.\n@FunctionalInterface public interface AfterRollbackProcessor<K,V>; // Invoked by a listener container with remaining, unprocessed, records (including the failed record).\npublic interface BackOffHandler; // Handler for the provided back off time, listener container and exception.\n@FunctionalInterface public interface BatchAcknowledgingConsumerAwareMessageListener<K,V> extends BatchMessageListener<K,V>; // Listener for handling a batch of incoming Kafka messages, propagating an acknowledgment handle that recipients can invoke when the message has been processed.\n@FunctionalInterface public interface BatchAcknowledgingMessageListener<K,V> extends BatchMessageListener<K,V>; // Listener for handling a batch of incoming Kafka messages, propagating an acknowledgment handle that recipients can invoke when the message has been processed.\n@FunctionalInterface public interface BatchConsumerAwareMessageListener<K,V> extends BatchMessageListener<K,V>; // Listener for handling a batch of incoming Kafka messages; the list is created from the consumer records object returned by a poll.\n", "des": "Package for kafka listeners"}
{"index": 1628, "repo": "spring-kafka-3.0.9", "code": "package adapter;\n\npublic abstract class AbstractDelegatingMessageListenerAdapter<T> extends Object implements ConsumerSeekAware, DelegatingMessageListener<T>; // Top level class for all listener adapters.\npublic abstract class AbstractFilteringMessageListener<K,V,T> extends AbstractDelegatingMessageListenerAdapter<T>; // An abstract message listener adapter that implements record filter logic via a RecordFilterStrategy.\npublic abstract class AbstractRetryingMessageListenerAdapter<K,V,T> extends AbstractDelegatingMessageListenerAdapter<T>; // Base class for retrying message listener adapters.\npublic final class AdapterUtils extends Object; // Utilities for listener adapters.\npublic class BatchMessagingMessageListenerAdapter<K,V> extends MessagingMessageListenerAdapter<K,V> implements BatchAcknowledgingConsumerAwareMessageListener<K,V>; // A MessageListener adapter that invokes a configurable HandlerAdapter; used when the factory is configured for the listener to receive batches of messages.\n@FunctionalInterface public interface BatchToRecordAdapter<K,V>; // An adapter that adapts a batch listener to a record listener method.\n@FunctionalInterface public static interface BatchToRecordAdapter.Callback<K,V>; // A callback for each message.\npublic class ConsumerRecordMetadata extends Object; // Used to provide a listener method argument when the user supplies such a parameter.\npublic class ConvertingMessageListener<V> extends Object implements DelegatingMessageListener<MessageListener>, AcknowledgingConsumerAwareMessageListener<Object,Object>; // A AcknowledgingConsumerAwareMessageListener adapter that implements converting received ConsumerRecord using specified MessageConverter and then passes result to specified MessageListener.\npublic class DefaultBatchToRecordAdapter<K,V> extends Object implements BatchToRecordAdapter<K,V>; // The default BatchToRecordAdapter implementation; if the supplied recoverer throws an exception, the batch will be aborted; otherwise the next record will be processed.\npublic class DelegatingInvocableHandler extends Object; // Delegates to an InvocableHandlerMethod based on the message payload type.\npublic class FilteringBatchMessageListenerAdapter<K,V> extends AbstractFilteringMessageListener<K,V,BatchMessageListener<K,V>> implements BatchAcknowledgingConsumerAwareMessageListener<K,V>; // A BatchMessageListener adapter that implements filter logic via a RecordFilterStrategy.\n", "des": "Provides classes for adapting listeners."}
{"index": 1629, "repo": "spring-kafka-3.0.9", "code": "package mock;\n\npublic class MockConsumerFactory<K,V> extends Object implements ConsumerFactory<K,V>; // Support the use of MockConsumer in tests.\npublic class MockProducerFactory<K,V> extends Object implements ProducerFactory<K,V>; // Support the use of MockProducer in tests.\n", "des": "Provides classes to support the use of MockConsumer and MockProducer."}
{"index": 1630, "repo": "spring-kafka-3.0.9", "code": "package requestreply;\n\npublic class AggregatingReplyingKafkaTemplate<K,V,R> extends ReplyingKafkaTemplate<K,V,Collection<org.apache.kafka.clients.consumer.ConsumerRecord<K,R>>> implements BatchConsumerAwareMessageListener<K,Collection<org.apache.kafka.clients.consumer.ConsumerRecord<K,R>>>; // A replying template that aggregates multiple replies with the same correlation id.\npublic final class CorrelationKey extends Object; // Wrapper for byte[] that can be used as a hash key.\npublic class KafkaReplyTimeoutException extends KafkaException; // Exception when a reply is not received within a timeout.\npublic interface ReplyingKafkaOperations<K,V,R>; // Request/reply operations.\npublic class ReplyingKafkaTemplate<K,V,R> extends KafkaTemplate<K,V> implements BatchMessageListener<K,R>, org.springframework.beans.factory.InitializingBean, org.springframework.context.SmartLifecycle, org.springframework.beans.factory.DisposableBean, ReplyingKafkaOperations<K,V,R>, ConsumerSeekAware; // A KafkaTemplate that implements request/reply semantics.\npublic class RequestReplyFuture<K,V,R> extends CompletableFuture<org.apache.kafka.clients.consumer.ConsumerRecord<K,R>>; // A CompletableFuture for requests/replies.\npublic class RequestReplyMessageFuture<K,V> extends CompletableFuture<org.springframework.messaging.Message<?>>; // A listenable future for Message replies.\npublic class RequestReplyTypedMessageFuture<K,V,P> extends RequestReplyMessageFuture<K,V>; // A listenable future for Message replies with a specific payload type.\n", "des": "Provides classes for request/reply semantics."}
{"index": 1631, "repo": "spring-kafka-3.0.9", "code": "package retrytopic;\n\npublic class BackOffValuesGenerator extends Object; // Generates the backoff values from the provided maxAttempts value and BackOffPolicy.\npublic class DeadLetterPublishingRecovererFactory extends Object; // Creates and configures the DeadLetterPublishingRecoverer that will be used to forward the messages using the DestinationTopicResolver.\n@FunctionalInterface public static interface DeadLetterPublishingRecovererFactory.DeadLetterPublisherCreator; // Implement this interface to create each DeadLetterPublishingRecoverer.\npublic class DefaultDestinationTopicProcessor extends Object implements DestinationTopicProcessor; // Default implementation of the DestinationTopicProcessor interface.\npublic class DefaultDestinationTopicResolver extends ExceptionClassifier implements DestinationTopicResolver, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>, org.springframework.context.ApplicationContextAware; // Default implementation of the DestinationTopicResolver interface.\npublic static class DefaultDestinationTopicResolver.DestinationTopicHolder extends Object;\npublic class DestinationTopic extends Object; // Representation of a Destination Topic to which messages can be forwarded, such as retry topics and dlt.\npublic static class DestinationTopic.Properties extends Object;\npublic interface DestinationTopicContainer; // Provides methods to store and retrieve DestinationTopic instances.\npublic interface DestinationTopicProcessor; // The DestinationTopicProcessor creates and registers the DestinationTopic instances in the provided DestinationTopicProcessor.Context, also providing callback interfaces to be called upon the context properties.\npublic static class DestinationTopicProcessor.Context extends Object;\npublic class DestinationTopicPropertiesFactory extends Object; // Creates a list of DestinationTopic.Properties based on the provided configurations.\npublic static class DestinationTopicPropertiesFactory.DestinationTopicSuffixes extends Object;\npublic interface DestinationTopicResolver extends DestinationTopicContainer; // Provides methods for resolving the destination to which a message that failed to be processed should be forwarded to.\npublic enum DltStrategy extends Enum<DltStrategy>; // Strategies for handling DLT processing.\n@FunctionalInterface public interface EndpointCustomizer; // Customizes main, retry and DLT endpoints in the Retry Topic functionality and returns the resulting topic names.\npublic static class EndpointCustomizer.TopicNamesHolder extends Object;\npublic class EndpointCustomizerFactory extends Object; // Creates the EndpointCustomizer that will be used by the RetryTopicConfigurer to customize the main, retry and DLT endpoints.\n", "des": "Package for retryable topic handling."}
{"index": 1632, "repo": "spring-kafka-3.0.9", "code": "package jaas;\n\npublic class KafkaJaasLoginModuleInitializer extends Object implements org.springframework.beans.factory.SmartInitializingSingleton, org.springframework.beans.factory.DisposableBean; // Contains properties for setting up an AppConfigurationEntry that can be used for the Kafka client.\npublic static enum KafkaJaasLoginModuleInitializer.ControlFlag extends Enum<KafkaJaasLoginModuleInitializer.ControlFlag>; // Control flag values for login configuration.\n", "des": "Provides classes related to jaas."}
{"index": 1633, "repo": "spring-kafka-3.0.9", "code": "package streams;\n\npackage streams.messaging; // Package for classes related to spring-messaging with Kafka Streams.\n@Deprecated public class HeaderEnricher<K,V> extends Object implements org.apache.kafka.streams.kstream.Transformer<K,V,org.apache.kafka.streams.KeyValue<K,V>>;\npublic static final class HeaderEnricher.Container<K,V> extends Object; // Container object for SpEL evaluation.\npublic class HeaderEnricherProcessor<K,V> extends org.apache.kafka.streams.processor.api.ContextualProcessor<K,V,K,V>; // Manipulate the headers.\npublic static final class HeaderEnricherProcessor.Container<K,V> extends Object; // Container object for SpEL evaluation.\npublic class KafkaStreamsMicrometerListener extends Object implements StreamsBuilderFactoryBean.Listener; // Creates a KafkaStreamsMetrics for the KafkaStreams.\npublic class RecoveringDeserializationExceptionHandler extends Object implements org.apache.kafka.streams.errors.DeserializationExceptionHandler; // A DeserializationExceptionHandler that calls a ConsumerRecordRecoverer.\n", "des": "Package for classes related to Kafka Streams."}
{"index": 1634, "repo": "spring-kafka-3.0.9", "code": "package messaging;\n\n@FunctionalInterface public interface MessagingFunction; // A function that receives a spring-messaging Message and returns a Message.\npublic class MessagingProcessor<Kin,Vin,Kout,Vout> extends org.apache.kafka.streams.processor.api.ContextualProcessor<Kin,Vin,Kout,Vout>; // A Transformer implementation that invokes a MessagingFunction converting to/from spring-messaging Message.\n@Deprecated public class MessagingTransformer<K,V,R> extends Object implements org.apache.kafka.streams.kstream.Transformer<K,V,org.apache.kafka.streams.KeyValue<K,R>>;\n", "des": "Package for classes related to spring-messaging with Kafka Streams."}
{"index": 1635, "repo": "spring-kafka-3.0.9", "code": "package support;\n\npackage support.converter; // Package for kafka converters\npackage support.mapping; // Provides classes related to type mapping.\npackage support.micrometer; // Provides classes to support Micrometer.\npublic abstract class AbstractKafkaHeaderMapper extends Object implements KafkaHeaderMapper; // Base for Kafka header mappers.\nprotected static interface AbstractKafkaHeaderMapper.HeaderMatcher; // A matcher for headers.\nprotected static class AbstractKafkaHeaderMapper.NeverMatchHeaderMatcher extends Object implements AbstractKafkaHeaderMapper.HeaderMatcher; // A matcher that never matches a set of headers.\nprotected static class AbstractKafkaHeaderMapper.SimplePatternBasedHeaderMatcher extends Object implements AbstractKafkaHeaderMapper.HeaderMatcher; // A pattern-based header matcher that matches if the specified header matches the specified simple pattern.\npublic interface Acknowledgment; // Handle for acknowledging the processing of a ConsumerRecord.\npublic final class AllowDenyCollectionManager<T> extends Object; // Class for managing Allow / Deny collections and its predicates.\npublic class CompositeProducerInterceptor<K,V> extends Object implements org.apache.kafka.clients.producer.ProducerInterceptor<K,V>, Closeable; // A ProducerInterceptor that delegates to a collection of interceptors.\npublic class CompositeProducerListener<K,V> extends Object implements ProducerListener<K,V>; // A ProducerListener that delegates to a collection of listeners.\npublic class DefaultKafkaHeaderMapper extends AbstractKafkaHeaderMapper; // Default header mapper for Apache Kafka.\npublic static class DefaultKafkaHeaderMapper.NonTrustedHeaderType extends Object; // Represents a header that could not be decoded due to an untrusted type.\npublic class EndpointHandlerMethod extends Object; // Handler method for retrying endpoints.\npublic class ExponentialBackOffWithMaxRetries extends org.springframework.util.backoff.ExponentialBackOff; // Subclass of ExponentialBackOff that allows the specification of the maximum number of retries rather than the maximum elapsed time.\npublic final class JacksonMimeTypeModule extends com.fasterxml.jackson.databind.module.SimpleModule; // A SimpleModule extension for MimeType serialization.\npublic final class JacksonPresent extends Object; // The utility to check if Jackson JSON processor is present in the classpath.\npublic final class JacksonUtils extends Object; // The utilities for Jackson ObjectMapper instances.\n", "des": "Package for kafka support"}
{"index": 1636, "repo": "spring-kafka-3.0.9", "code": "package converter;\n\npublic interface BatchMessageConverter extends MessageConverter; // A Kafka-specific Message converter strategy.\npublic class BatchMessagingMessageConverter extends Object implements BatchMessageConverter; // A Messaging MessageConverter implementation used with a batch message listener; the consumer record values are extracted into a collection in the message payload.\npublic class ByteArrayJsonMessageConverter extends JsonMessageConverter; // JSON Message converter - byte[] on output, String, Bytes, or byte[] on input.\npublic class BytesJsonMessageConverter extends JsonMessageConverter; // JSON Message converter - Bytes on output, String, Bytes, or byte[] on input.\npublic class ConversionException extends KafkaException; // Exception for conversions.\npublic class JsonMessageConverter extends MessagingMessageConverter; // Base class for JSON message converters; on the consumer side, it can handle byte[], Bytes and String record values.\npublic class KafkaMessageHeaders extends org.springframework.messaging.MessageHeaders; // Overload of message headers configurable for adding id and timestamp headers.\npublic class MappingJacksonParameterizedConverter extends org.springframework.messaging.converter.MappingJackson2MessageConverter; // Subclass of MappingJackson2MessageConverter that can handle parameterized (generic) types.\npublic interface MessageConverter; // A top level interface for message converters.\npublic class MessagingMessageConverter extends Object implements RecordMessageConverter; // A Messaging MessageConverter implementation for a message listener that receives individual messages.\npublic class ProjectingMessageConverter extends MessagingMessageConverter; // A MessageConverter implementation that uses a Spring Data ProjectionFactory to bind incoming messages to projection interfaces.\npublic interface RecordMessageConverter extends MessageConverter; // A Kafka-specific Message converter strategy.\npublic class StringJsonMessageConverter extends JsonMessageConverter; // JSON Message converter - String on output, String, Bytes, or byte[] on input.\n", "des": "Package for kafka converters"}
{"index": 1637, "repo": "spring-kafka-3.0.9", "code": "package mapping;\n\npublic abstract class AbstractJavaTypeMapper extends Object implements org.springframework.beans.factory.BeanClassLoaderAware; // Abstract type mapper.\npublic interface ClassMapper; // Strategy for setting metadata on messages such that one can create the class that needs to be instantiated when receiving a message.\npublic class DefaultJackson2JavaTypeMapper extends AbstractJavaTypeMapper implements Jackson2JavaTypeMapper; // Jackson 2 type mapper.\npublic interface Jackson2JavaTypeMapper extends ClassMapper; // Strategy for setting metadata on messages such that one can create the class that needs to be instantiated when receiving a message.\npublic static enum Jackson2JavaTypeMapper.TypePrecedence extends Enum<Jackson2JavaTypeMapper.TypePrecedence>; // The precedence for type conversion - inferred from the method parameter or message headers.\n", "des": "Provides classes related to type mapping."}
{"index": 1638, "repo": "spring-kafka-3.0.9", "code": "package micrometer;\n\npublic enum KafkaListenerObservation extends Enum<KafkaListenerObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // Spring for Apache Kafka Observation for listeners.\npublic static class KafkaListenerObservation.DefaultKafkaListenerObservationConvention extends Object implements KafkaListenerObservationConvention; // Default KafkaListenerObservationConvention for Kafka listener key values.\npublic static enum KafkaListenerObservation.ListenerLowCardinalityTags extends Enum<KafkaListenerObservation.ListenerLowCardinalityTags> implements io.micrometer.common.docs.KeyName; // Low cardinality tags.\npublic interface KafkaListenerObservationConvention extends io.micrometer.observation.ObservationConvention<KafkaRecordReceiverContext>; // ObservationConvention for Kafka listener key values.\npublic class KafkaRecordReceiverContext extends io.micrometer.observation.transport.ReceiverContext<org.apache.kafka.clients.consumer.ConsumerRecord<?,?>>; // ReceiverContext for ConsumerRecords.\npublic class KafkaRecordSenderContext extends io.micrometer.observation.transport.SenderContext<org.apache.kafka.clients.producer.ProducerRecord<?,?>>; // SenderContext for ProducerRecords.\npublic enum KafkaTemplateObservation extends Enum<KafkaTemplateObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // Spring for Apache Kafka Observation for KafkaTemplate.\npublic static class KafkaTemplateObservation.DefaultKafkaTemplateObservationConvention extends Object implements KafkaTemplateObservationConvention; // Default KafkaTemplateObservationConvention for Kafka template key values.\npublic static enum KafkaTemplateObservation.TemplateLowCardinalityTags extends Enum<KafkaTemplateObservation.TemplateLowCardinalityTags> implements io.micrometer.common.docs.KeyName; // Low cardinality tags.\npublic interface KafkaTemplateObservationConvention extends io.micrometer.observation.ObservationConvention<KafkaRecordSenderContext>; // ObservationConvention for Kafka template key values.\npublic final class MicrometerHolder extends Object; // A wrapper for micrometer timers when available on the class path.\n", "des": "Provides classes to support Micrometer."}
{"index": 1639, "repo": "spring-kafka-3.0.9", "code": "package transaction;\n\n@Deprecated public class ChainedKafkaTransactionManager<K,V> extends org.springframework.data.transaction.ChainedTransactionManager implements KafkaAwareTransactionManager<K,V>;\npublic interface KafkaAwareTransactionManager<K,V> extends org.springframework.transaction.PlatformTransactionManager; // A transaction manager that can provide a ProducerFactory.\npublic class KafkaTransactionManager<K,V> extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements KafkaAwareTransactionManager<K,V>; // PlatformTransactionManager implementation for a single Kafka ProducerFactory.\n", "des": "Provides classes related to transactions."}
{"index": 1640, "repo": "jena-core-4.9.0", "code": "package datatypes;\n\npackage datatypes.xsd; // Provides datatype definitions for the XML Schema datatypes support by Jena.\npublic class BaseDatatype extends Object implements RDFDatatype; // Base level implementation of datatype from which real implementations can inherit.\npublic static class BaseDatatype.TypedValue extends Object; // Pair object used to encode both lexical form and datatype for a typed literal with unknown datatype.\npublic class DatatypeFormatException extends JenaException; // Exception thrown when a lexical form does not match the stated datatype.\npublic interface RDFDatatype; // Interface on a datatype representation.\npublic class TypeMapper extends Object; // The TypeMapper provides a global registry of known datatypes.\n", "des": "Provides the core interfaces through which datatypes are described to Jena."}
{"index": 1641, "repo": "jena-core-4.9.0", "code": "package xsd;\n\npackage xsd.impl; // Provides implementations of the XSD datatype.\npublic class AbstractDateTime extends Object implements Comparable<AbstractDateTime>; // Base class for representation of XSD duration, time, date/time and related datatype instances.\npublic class IllegalDateTimeFieldException extends JenaException; // Exception thrown when attempting to access a field of an XSDDateTime object that is not legal for the current date/time type.\npublic class XSDbase64Binary extends XSDbinary; // Implement base64binary type.\npublic abstract class XSDbinary extends XSDDatatype; // Root class for XSD datatypes with binary values, xsd:hexBinary and xsd:base64Binary.\npublic class XSDDatatype extends BaseDatatype; // Representation of an XSD datatype based on the Xerces-2 XSD implementation.\npublic static class XSDDatatype.XSDGenericType extends XSDDatatype; // Generic XML Schema datatype (outside the xsd: namespace)\npublic class XSDDateTime extends AbstractDateTime; // Represent an XSD date/time value.\npublic class XSDDuration extends AbstractDateTime; // Represent an XSD duration value.\npublic class XSDhexBinary extends XSDbinary; // Implement hexbinary type.\n", "des": "Provides datatype definitions for the XML Schema datatypes support by Jena."}
{"index": 1642, "repo": "jena-core-4.9.0", "code": "package impl;\n\npublic class RDFhtml extends BaseDatatype implements RDFDatatype; // rdf:html.\npublic class RDFjson extends BaseDatatype implements RDFDatatype; // rdf:json.\npublic class RDFLangString extends BaseDatatype implements RDFDatatype; // rdf:langString.\npublic class XMLLiteralType extends BaseDatatype implements RDFDatatype; // Builtin data type to represent XMLLiteral (i.e.\npublic class XSDAbstractDateTimeType extends XSDDatatype; // Base class for all date/time/duration type representations.\npublic class XSDBaseNumericType extends XSDDatatype; // Base implementation for all numeric datatypes derived from xsd:decimal.\npublic class XSDBaseStringType extends XSDDatatype; // Base implementation for all string datatypes derived from xsd:string.\npublic class XSDByteType extends XSDBaseNumericType; // Datatype template used to define XSD int types\npublic class XSDDateTimeStampType extends XSDDateTimeType;\npublic class XSDDateTimeType extends XSDAbstractDateTimeType; // Type processor for dateTime, most of the machinery is in the base XSDAbstractDateTimeType class.\npublic class XSDDateType extends XSDAbstractDateTimeType; // Type processor for date, most of the machinery is in the base XSDAbstractDateTimeType class.\npublic class XSDDayTimeDurationType extends XSDAbstractDateTimeType;\npublic class XSDDayType extends XSDAbstractDateTimeType; // Type processor for gDay, most of the machinery is in the base XSDAbstractDateTimeType class.\npublic class XSDDouble extends XSDDatatype; // Datatype representation for xsd:float.\npublic class XSDDurationType extends XSDAbstractDateTimeType; // The XSD duration type, the only job of this extra layer is to wrap the return value in a more convenient accessor type.\npublic class XSDFloat extends XSDDatatype; // Datatype representation for xsd:float.\npublic class XSDMonthDayType extends XSDAbstractDateTimeType; // Type processor for gMonthDay, most of the machinery is in the base XSDAbstractDateTimeType class.\npublic class XSDMonthType extends XSDAbstractDateTimeType; // Type processor for gMonth, most of the machinery is in the base XSDAbstractDateTimeType class.\npublic class XSDPlainType extends XSDDatatype; // A datatype that does not use the Xerces machinery for isEqual, yet is still an XSDDatatype.\n", "des": "Provides implementations of the XSD datatype."}
{"index": 1643, "repo": "jena-core-4.9.0", "code": "package enhanced;\n\npublic class AlreadyLinkedViewException extends JenaException; // Exception to throw when adding a view to a Polymorphic discovers that the view to add is already on a ring.\npublic class BuiltinPersonalities extends Object; // The personalities that are provided for the existing Jena classes.\npublic class EnhGraph extends Object; // EnhGraph wraps a plain graph and contains enhanced nodes that wrap the plain nodes of the plain graph.\npublic class EnhNode extends Polymorphic<RDFNode> implements FrontsNode; // A specialisation of Polymorphic that models an extended node in a an extended graph.\npublic class GraphPersonality extends Personality<RDFNode>; // Personalities for Graphs.\npublic abstract class Implementation extends Object; // Interface defining a generic factory interface for generating enhanced nodes from normal graph nodes.\npublic class NodePersonality extends Personality<RDFNode>; // Personalities for nodes.\npublic class Personality<T> extends Object; // Defines a set of permitted mappings from [interface] Class objects to Implementation factories that can generate instances of the facet represented by the Class.\npublic class PersonalityConfigException extends RuntimeException; // Exception denoting that a personality is misconfigured in some way.\npublic abstract class Polymorphic<T> extends Object; // Abstract base class for all polymorphic RDF objects, especially enhanced node and enhanced graph.\npublic class UnsupportedPolymorphismException extends JenaException; // Exception to throw if an enhanced graph does not support polymorphism to a specific class.\n", "des": "This package defines the enhanced node and graph classes; an enhanced node is one embedded in a particular enhanced graph."}
{"index": 1644, "repo": "jena-core-4.9.0", "code": "package graph;\n\npackage graph.compose; // This package defines simple composite graphs - union, intersection, difference, and update-tracking.\npackage graph.impl; // This package provides basic implementations of Graph interfaces such as EventManager and Capabilities.\npublic class BlankNodeId extends Object; // System identifier for a blank node.\npublic interface Capabilities; // Interface for expressing capabilities.\n@Deprecated public class Factory extends Object;\npublic interface FrontsNode; // HasNode - interface for objects that front a Node in some context.\npublic interface FrontsTriple; // FrontsTriple (see also FrontsNode) is an interface for things that can be seen as wrappers round triples.\npublic interface GetTriple; // this interface describes types that can have a triple extracted using a getTriple method.\npublic interface Graph; // The interface to be satisfied by implementations maintaining collections of RDF triples.\npublic interface GraphEventManager extends GraphListener; // The component of a graph responsible for managing events and listeners.\npublic class GraphEvents extends Object; // GraphEvents is the base class for Jena general graph events.\npublic class GraphExtract extends Object; // GraphExtract offers a very simple recursive extraction of a subgraph with a specified root in some supergraph.\npublic interface GraphListener; // Interface for listening to graph-level update events.\npublic interface GraphMaker; // A factory for providing instances of named graphs with appropriate storage models.\npublic class GraphMemFactory extends Object; // A factory class for creating memory Graphs.\npublic class GraphUtil extends Object; // An ad-hoc collection of useful code for graphs\npublic class JenaNodeException extends JenaException;\npublic abstract class Node extends Object implements Serializable; // A Node has five subtypes: Node_Blank, Node_Anon, Node_URI, Node_Variable, and Node_ANY.\npublic class Node_ANY extends Node_Fluid; // A Node_ANY (there should be only one) is a meta-node that is used to stand for any other node in a query.\npublic class Node_Blank extends Node_Concrete; // RDF blank nodes, ie nodes with identity but without URIs.\npublic abstract class Node_Concrete extends Node; // This is the class of \"concrete\" nodes, ie those which correspond to actual RDF data - URIs, blank nodes, and literals.\n", "des": "This package defines the Graph and Node family of classes, which form the underlying datatypes of the Jena system."}
{"index": 1645, "repo": "jena-core-4.9.0", "code": "package compose;\n\npublic abstract class CompositionBase extends GraphBase; // Base class for graphs that are composed of multiple sub-graphs.\npublic class Delta extends CompositionBase implements Graph; // Graph operation for wrapping a base graph and leaving it unchanged while recording all the attempted updates for later access.\npublic class Difference extends Dyadic implements Graph; // Class representing the dynamic set difference L - R of two graphs.\npublic class DisjointUnion extends Dyadic; // DisjointUnion - a version of Union that assumes the graphs are disjoint, and hence that find need not do duplicate-removal.\npublic abstract class Dyadic extends CompositionBase; // Base class for the two-operand composition operations; has two graphs L and R\npublic class Intersection extends Dyadic implements Graph; // The dynamic intersection of two graphs L and R.\npublic class MultiUnion extends Polyadic; // A graph implementation that presents the union of zero or more subgraphs, one of which is distinguished as the updateable graph.\npublic abstract class Polyadic extends CompositionBase; // A base class for composition graphs that are composed from zero or more sub-graphs (thus providing a basis for polyadic composition operators).\npublic class PolyadicPrefixMappingImpl extends PrefixMappingImpl implements PrefixMapping;\npublic class Union extends Dyadic implements Graph; // A class representing the dynamic union of two graphs.\n", "des": "This package defines simple composite graphs - union, intersection, difference, and update-tracking."}
{"index": 1646, "repo": "jena-core-4.9.0", "code": "package impl;\n\npublic class AdhocDatatype extends BaseDatatype;\npublic class AllCapabilities extends Object implements Capabilities; // A default implementation of capabilities, in which everything is allowed, size is accurate, and graphs may be completely empty.\npublic abstract class BaseGraphMaker extends Object implements GraphMaker; // This base class provides convenience functions for the three \"usual\" graph makers and a place to hold the reification style for the graphs it constructs.\npublic class CollectionGraph extends GraphBase; // A simple graph implementation that wraps a collection of triples.\npublic abstract class GraphBase extends Object implements GraphWithPerform; // GraphBase is an implementation of Graph that provides some convenient base functionality for Graph implementations.\npublic class GraphMatcher extends Object; // An implementation of graph isomorphism for Graph equality.\npublic class GraphPlain extends WrappedGraph; // A version of Graph that enforces term equality even if the base graph uses value-indexing.\npublic interface GraphWithPerform extends Graph; // GraphWithPerform is an implementation interface that extends Graph with the performAdd and performDelete methods used by GraphBase to invoke non-notifying versions of add and delete.\npublic interface LiteralLabel;\npublic class LiteralLabelFactory extends Object;\npublic class SimpleEventManager extends Object implements GraphEventManager; // Simple implementation of GraphEventManager for GraphBase to use.\npublic class SimpleGraphMaker extends BaseGraphMaker; // A SimpleGraphFactory produces memory-based graphs and records them in a local map.\npublic class SimpleTransactionHandler extends TransactionHandlerBase;\npublic abstract class TransactionHandlerBase extends Object implements TransactionHandler; // A base for transaction handlers; provide implementations of execute* operations using the fundamental begin-commit-abort.\npublic interface TripleStore; // TripleStore - interface for bulk storage of triples used in composed graphs.\npublic class WrappedCapabilities extends Object implements Capabilities;\npublic class WrappedGraph extends Object implements GraphWithPerform; // A wrapper class which simply defers all operations to its base.\n", "des": "This package provides basic implementations of Graph interfaces such as EventManager and Capabilities."}
{"index": 1647, "repo": "jena-core-4.9.0", "code": "package irix;\n\npublic class Chars3986 extends Object; // Characters and character classes\npublic class IRIException extends JenaException; // Exception thrown due to IRI problems.\npublic interface IRIProvider; // Provider: an implementation of a factory for IRIs.\npublic class IRIProviderAny extends Object implements IRIProvider; // Non-resolving provider that accepts anything string for <...>.\npublic class IRIProviderJDK extends Object implements IRIProvider; // IRIProvider implemented using java.net.URI.\npublic class IRIProviderJenaIRI extends Object implements IRIProvider; // Provider for IRIx using the jena-iri module.\npublic static class IRIProviderJenaIRI.IRIxJena extends IRIx; // IRIx implementation for the jena-iri provider.\npublic class IRIs extends Object; // Operations in support of IRIx.\npublic abstract class IRIx extends Object; // Support for RFC3986 IRIs.\npublic class IRIxResolver extends Object; // A resolver is a base IRI and a policy for resolution.\npublic static class IRIxResolver.Builder extends Object;\npublic class RelativeIRIException extends IRIException; // Exception thrown due to relative IRIs when not permitted.\npublic class SetupJenaIRI extends Object; // Setup of jena-iri package IRI Factory for parsing and for checking.\npublic class SystemIRIx extends Object; // System setup and configuration.\n", "des": "Support for RFC3986 IRIs."}
{"index": 1648, "repo": "jena-core-4.9.0", "code": "package mem;\n\npublic class ArrayBunch extends Object implements TripleBunch; // An ArrayBunch implements TripleBunch with a linear search of a short-ish array of Triples.\npublic interface BunchMap; // A pruned (and slightly stewed) version of Map, containing just those operations required by NodeToTriplesMaps.\npublic class FieldFilter extends Object; // A class that encapsulates a filter on fields on a triple.\n@Deprecated public class GraphMem extends GraphMemBase;\npublic abstract class GraphMemBase extends GraphBase; // GraphMemBase - a common base class for GraphMem and SmallGraphMem.\npublic abstract class GraphTripleStoreBase extends Object implements TripleStore;\npublic class GraphTripleStoreMem extends GraphTripleStoreBase implements TripleStore;\npublic abstract class HashCommon<Key> extends Object; // Shared stuff for our hashing implementations: does the base work for hashing and growth sizes.\npublic static interface HashCommon.NotifyEmpty; // A hashed structure may become empty as a side-effect of a .remove on one of its iterators: a container can request notification of this by passing a NotifyEmpty object in when the iterator is constructed, and its emptied method is called when the bunch becomes empty.\npublic class HashedBunchMap extends HashCommon<Object> implements BunchMap; // An implementation of BunchMap that does open-addressed hashing.\npublic class HashedTripleBunch extends HashCommon<Triple> implements TripleBunch;\npublic abstract class NodeToTriplesMapBase extends Object; // A base class for in-memory graphs\npublic class NodeToTriplesMapMem extends NodeToTriplesMapBase;\npublic abstract class ObjectIterator extends NiceIterator<Node>; // Helper class for listObjects.\npublic class SparseArraySpliterator<E> extends Object implements Spliterator<E>; // A spliterator for sparse arrays.\npublic class SparseArraySubSpliterator<E> extends Object implements Spliterator<E>; // A spliterator for sparse arrays.\npublic class StoreTripleIterator extends TrackingTripleIterator; // An iterator wrapper for NodeToTriplesMap iterators which ensures that a .remove on the base iterator is copied to the other two maps of this GraphMem.\n", "des": "Various memory-based implementations of interfaces, specifically GraphMem for memory-based Graphs."}
{"index": 1649, "repo": "jena-core-4.9.0", "code": "package ontology;\n\npackage ontology.impl; // Provides default implementations for the abstractions defined in the org.apache.jena.ontology package.\npublic interface AllDifferent extends OntResource; // Interface defining an individual in which all members of a collection are declared pair-wise disjoint.\npublic interface AllValuesFromRestriction extends Restriction; // A property restriction that requires the named property to have have any range instances to be members of a given class.\npublic interface AnnotationProperty extends OntProperty, Property; // Interface that represents the category of annotation properties in an ontology language.\npublic interface BooleanClassDescription extends OntClass; // Encapsulates a class description formed from a boolean combination of other class descriptions (ie union, intersection or complement).\npublic interface CardinalityQRestriction extends QualifiedRestriction; // Interface representing the ontology abstraction for a qualified cardinality restriction.\npublic interface CardinalityRestriction extends Restriction; // A property restriction that requires the named property to have have exactly the given number of values for a given instance to be a member of the class defined by the restriction.\npublic interface ComplementClass extends BooleanClassDescription; // Class description that is formed from the complement of another class description\npublic class ConversionException extends OntologyException; // Exception that is thrown when an ontology resource is converted to another facet, using as(), and the requested conversion is not possible.\npublic interface DataRange extends OntResource; // Represents an ontology DataRange: a class-like construct that contains only concrete data literals.\npublic interface DatatypeProperty extends OntProperty; // Interface that encapsulates the class of properties whose range values are datatype values (as distinct from ObjectProperty whose values are individuals).\npublic interface EnumeratedClass extends OntClass; // Encapsulates a class description representing a closed enumeration of individuals.\npublic interface FunctionalProperty extends OntProperty; // Interface encapsulating the class of properties that are functional: that is, properties in which a given given domain value has a unique value in the range.\npublic interface HasValueRestriction extends Restriction; // A property restriction that requires the named property to have a given individual as its value.\npublic interface Individual extends OntResource; // Interface that encapsulates an individual in an ontology, sometimes referred to as a fact or assertion, or a member of the a-box.\n", "des": "Provides a set of abstractions and convenience classes for accessing and manipluating ontologies represented in RDF."}
{"index": 1650, "repo": "jena-core-4.9.0", "code": "package impl;\n\npublic abstract class AbstractProfile extends Object implements Profile; // Abstract base class to provide shared implementation for ontology language profiles.\npublic class AllDifferentImpl extends OntResourceImpl implements AllDifferent; // Implementation of the abstraction of axioms that denote the single name assumption.\npublic class AllValuesFromRestrictionImpl extends RestrictionImpl implements AllValuesFromRestriction; // Implementation of the allValuesFrom restriction abstraction.\npublic class AnnotationPropertyImpl extends OntPropertyImpl implements AnnotationProperty; // Implementation for ontology abstraction of annotation property\npublic abstract class BooleanClassDescriptionImpl extends OntClassImpl implements BooleanClassDescription; // Shared implementation for implementations of Boolean clas expressions.\npublic class CardinalityQRestrictionImpl extends QualifiedRestrictionImpl implements CardinalityQRestriction; // Implementation of the exact qualified cardinality restriction\npublic class CardinalityRestrictionImpl extends RestrictionImpl implements CardinalityRestriction; // Implementation of the cardinality restriction abstraction.\npublic class ComplementClassImpl extends OntClassImpl implements ComplementClass; // Implementation of a node representing a complement class description.\npublic class DataRangeImpl extends OntResourceImpl implements DataRange; // Default implementation of the interface that defines a closed enumeration of concrete values for the range of a property.\npublic class DatatypePropertyImpl extends OntPropertyImpl implements DatatypeProperty; // Implementation of the datatype property abstraction\npublic class EnumeratedClassImpl extends OntClassImpl implements EnumeratedClass; // Implementation of a node representing an enumerated class description.\npublic class FunctionalPropertyImpl extends OntPropertyImpl implements FunctionalProperty; // Implementation of the functional property abstraction\npublic class HasValueRestrictionImpl extends RestrictionImpl implements HasValueRestriction; // Implementation of the hasValue restriction abstraction.\npublic class IndividualImpl extends OntResourceImpl implements Individual; // Implementation for the ontology abstraction representing ontology class descriptions.\npublic class IntersectionClassImpl extends BooleanClassDescriptionImpl implements IntersectionClass; // Implementation of a node representing an intersection class description.\npublic class InverseFunctionalPropertyImpl extends ObjectPropertyImpl implements InverseFunctionalProperty; // Implementation of the functional property abstraction\npublic class MaxCardinalityQRestrictionImpl extends QualifiedRestrictionImpl implements MaxCardinalityQRestriction; // Implementation of the max qualified cardinality restriction\npublic class MaxCardinalityRestrictionImpl extends RestrictionImpl implements MaxCardinalityRestriction; // Implementation of the max cardinality restriction abstraction.\n", "des": "Provides default implementations for the abstractions defined in the org.apache.jena.ontology package."}
{"index": 1651, "repo": "jena-core-4.9.0", "code": "package listeners;\n\npublic class ChangedListener extends Object implements ModelChangedListener; // Class that merely notes that a change has occurred.\npublic class NullListener extends Object implements ModelChangedListener; // A listener that ignores everything you tell it; intended as a base class or an identity element.\npublic class ObjectListener extends Object implements ModelChangedListener; // Listener that funnels all the changes into add/removed(Object) x, ie, leaves discrimination to be done on the type of object added or removed.\npublic class StatementListener extends Object implements ModelChangedListener; // A listener that filters all its listening down to the single-statement level.\n", "des": "A package defining some useful implementations of ModelChangedListener, for listening to (a) all triples added or removed, exploding composite objects, (b) all objects added or removed, as themselves, (c) notification of additions/removals, but no details, and (d) accepting but ignoring all changes, as a base-class to be extended."}
{"index": 1652, "repo": "jena-core-4.9.0", "code": "package model;\n\npackage model.impl; // This package contains implementations of the interfaces defined in the .model package, eg ModelCom for Model, ResourceImpl for Resource, and so on.\npublic interface Alt extends Container; // An RDF Alternative container.\npublic class AltHasNoDefaultException extends JenaException; // Exception thrown if an Alt has no default statement.\npublic class AnonId extends Object; // System id for an anonymous node.\npublic interface Bag extends Container; // An RDF Bag container.\npublic interface Container extends Resource; // An RDF Container.\npublic class DoesNotReifyException extends JenaException; // This exception may be raised when an attempt to convert an RDFNode to a ReifiedStatement fails because the RDFNode does not correspond to a reification.\npublic class EmptyListException extends JenaException; // A exception that is thrown when an operation is attempted on an empty (nil) list that actually requires a list of length one or more.\npublic class EmptyListUpdateException extends JenaException; // Exception that is thrown when an attept is made to perform a side-effectful operation on an RDFList that is the empty list, or rdf:nil.\npublic class HasNoModelException extends JenaException; // Exception to throw when a Statement or Resource (which don't have a useful common supertype, alas) don't have an associated model.\npublic interface InfModel extends Model; // An extension to the normal Model interface that supports access to any underlying inference capability.\npublic class InvalidListException extends JenaException; // A exception that is thrown when an operation is attempted on a list that is not well-formed, and is being processed in strict mode.\npublic class ListIndexException extends JenaException; // A exception that is thrown when an operation attempts to access an indexed list element beyond the length of the list.\npublic interface Literal extends RDFNode; // An RDF Literal.\npublic class LiteralRequiredException extends JenaException; // Exception to throw when an RDFNode required to be a Literal isn't, or when a literal Node is required but a non-literal Node supplied.\npublic interface Model extends ModelCon, ModelGraphInterface, RDFReaderF, RDFWriterF, PrefixMapping, Lock; // An RDF Model.\npublic interface ModelChangedListener; // The interface for classes that listen for model-changed events.\n", "des": "A package for creating and manipulating RDF graphs."}
{"index": 1653, "repo": "jena-core-4.9.0", "code": "package impl;\n\npublic class AltImpl extends ContainerImpl implements Alt; // An implementation of Alt.\npublic class BagImpl extends ContainerImpl implements Bag; // An implementation of Bag\npublic class ContainerImpl extends ResourceImpl implements Container; // An internal class not normally of interest to application developers.\npublic class ContNodeIteratorFactoryImpl extends Object implements NodeIteratorFactory; // An internal class, not normally of interest to application developers.\npublic class ContNodeIteratorImpl extends NiceIterator<RDFNode> implements NodeIterator; // An internal class not normally of interest to application developers.\npublic class InfModelImpl extends ModelCom implements InfModel; // Default implementation of the InfModel interface which simply wraps up an InfGraph.\npublic final class IteratorFactory extends Object; // Builds Jena Iterators and other things (RDFNode and Statement) needed in a Model.\npublic class LiteralImpl extends EnhNode implements Literal; // An implementation of Literal.\npublic class MemoryModelGetter extends Object implements ModelGetter;\npublic class ModelCom extends EnhGraph implements Model, PrefixMapping, Lock; // Common methods for model implementations.\npublic class ModelListenerAdapter extends Object implements GraphListener; // Adapter class that converts a ModelChangedListener into a GraphListener.\npublic class ModelMakerImpl extends Object implements ModelMaker; // A ModelMakerImpl implements a ModelMaker over a GraphMaker.\npublic class ModelReifier extends Object; // This class impedance-matches the reification requests of Model[Com] to the operations supplied by it's Graph's Reifier.\npublic interface NodeIteratorFactory; // An internal class not normally of interest to application developers.\npublic class NodeIteratorImpl extends WrappedIterator<RDFNode> implements NodeIterator; // A NodeIterator implementation.\npublic class NsIteratorImpl extends WrappedIterator<String> implements NsIterator; // An NsIterator implementation\npublic class NTripleReader extends Object implements RDFReaderI; // N-Triple Reader\npublic class NTripleWriter extends Object implements RDFWriterI; // Writes out an XML serialization of a model.\npublic class PropertyImpl extends ResourceImpl implements Property; // An implementation of Property.\npublic class RDFDefaultErrorHandler extends Object implements RDFErrorHandler; // The default error handler for RDF/XML I/O.\npublic class RDFListImpl extends ResourceImpl implements RDFList; // Standard implementation the list abstraction from rdf.model.\npublic class RDFReaderFImpl extends Object implements RDFReaderF;\n", "des": "This package contains implementations of the interfaces defined in the .model package, eg ModelCom for Model, ResourceImpl for Resource, and so on."}
{"index": 1654, "repo": "jena-core-4.9.0", "code": "package xmlinput;\n\npublic interface ALiteral extends ANode; // A string literal property value from an RDF/XML file.\npublic interface AResource; // A URI or blank node reported to a StatementHandler.\n@Deprecated public class ARP extends Object implements ARPConfig;\npublic interface ARPConfig; // Used to set event handlers and options on ARP, SAX2Model, and SAX2RDF instances.\npublic interface ARPErrorNumbers; // Error numbers used by ARP.\npublic interface ARPEventHandler extends StatementHandler, ExtendedHandler, NamespaceHandler; // Convenience generalization of all ARP handler interfaces.\npublic class ARPHandlers extends Object; // The interface to set the various handlers on ARP.\npublic class ARPOptions extends Object implements ARPErrorNumbers; // The interface to set the various options on ARP.\npublic class DOM2Model extends SAX2Model; // Transform DOM nodes of RDF.XML into Jena Models.\npublic interface ExtendedHandler; // Extended callbacks from a reader to an RDF application.\npublic class FatalParsingErrorException extends RuntimeException; // This exception should only be seen in user code when using SAX2RDF or SAX2Model.\npublic interface NamespaceHandler; // The interface for being notified about namespace use in an RDF/XML document.\npublic class NTriple extends Object implements ARPErrorNumbers; // A command line interface into ARP.\npublic class ParseException extends SAXParseException implements ARPErrorNumbers; // An exception during the RDF processing of ARP.\npublic class RDFXMLReader extends Object implements RDFReaderI, ARPErrorNumbers; // Interface between Jena and ARP.\npublic class SAX2Model extends SAX2RDF; // Use arbitrary SAX input to Jena.\npublic class SAX2RDF extends SAX2RDFImpl implements ARPConfig; // Allows connecting an arbitrary source of SAX events with ARP.\npublic interface StatementHandler; // The callback from a reader to an RDF application.\npublic class StAX2Model extends Object; // A collection of convenient functions to parse an XML stream using ARP.\npublic class StAX2SAX extends Object; // Bridge StAX and SAX parsing.\n", "des": "A parser for RDF/XML."}
{"index": 1655, "repo": "jena-core-4.9.0", "code": "package xmlinput0;\n\npublic interface ALiteral extends ANode; // A string literal property value from an RDF/XML file.\npublic interface AResource; // A URI or blank node reported to a StatementHandler.\npublic class ARP0 extends Object implements ARPConfig; // Another RDF Parser.\npublic interface ARPConfig; // Used to set event handlers and options on ARP0, SAX2Model, and SAX2RDF instances.\npublic interface ARPErrorNumbers; // Error numbers used by ARP.\npublic interface ARPEventHandler extends StatementHandler, ExtendedHandler, NamespaceHandler; // Convenience generalization of all ARP handler interfaces.\npublic class ARPHandlers extends Object; // The interface to set the various handlers on ARP.\npublic class ARPOptions extends Object implements ARPErrorNumbers; // The interface to set the various options on ARP.\npublic class DOM2Model extends SAX2Model; // Transform DOM nodes of RDF.XML into Jena Models.\npublic interface ExtendedHandler; // Extended callbacks from a reader to an RDF application.\npublic class FatalParsingErrorException extends RuntimeException; // This exception should only be seen in user code when using SAX2RDF or SAX2Model.\npublic interface NamespaceHandler; // The interface for being notified about namespace use in an RDF/XML document.\npublic class NTriple extends Object implements ARPErrorNumbers; // A command line interface into ARP.\npublic class ParseException extends ParseException; // An exception during the RDF processing of ARP.\npublic class RDFXMLReader0 extends Object implements RDFReaderI, ARPErrorNumbers; // Interface between Jena and ARP.\npublic class SAX2Model extends SAX2RDF; // Use arbitrary SAX input to Jena.\npublic class SAX2RDF extends SAX2RDFImpl implements ARPConfig; // Allows connecting an arbitrary source of SAX events with ARP.\npublic interface StatementHandler; // The callback from a reader to an RDF application.\npublic class StAX2Model extends Object; // A collection of convenient functions to parse an XML stream using ARP.\npublic class StAX2SAX extends Object; // Bridge StAX and SAX parsing.\npublic class XMLLiteralType0 extends BaseDatatype implements RDFDatatype; // Builtin data type to represent XMLLiteral (i.e.\n", "des": "A parser for RDF/XML."}
{"index": 1656, "repo": "jena-core-4.9.0", "code": "package xmloutput;\n\npublic interface RDFXMLWriterI extends RDFWriterI; // This interface only adds documentation to RDFWriterI.\n", "des": "Writing RDF/XML."}
{"index": 1657, "repo": "jena-core-4.9.0", "code": "package reasoner;\n\npackage reasoner.rulesys; // Provides a selection of simple rule engines for Jena inference models.\npackage reasoner.transitiveReasoner; // This package contains a reasoner which supports transitive-reflexive closure of subPropertyOf and subClassOf relations.\npublic abstract class BaseInfGraph extends GraphBase implements InfGraph; // A base level implementation of the InfGraph interface.\npublic static class BaseInfGraph.InfCapabilities extends AllCapabilities; // An InfCapabilities notes that size may not be accurate.\npublic static class BaseInfGraph.InfFindSafeCapabilities extends BaseInfGraph.InfCapabilities; // An InfCapabilities notes that size may not be accurate.\npublic static class BaseInfGraph.InfTransactionHandler extends TransactionHandlerBase implements TransactionHandler;\npublic interface Derivation; // Derivation records are used to determine how an inferred triple was derived from a set of source triples and a reasoner.\npublic class FGraph extends Object implements Finder; // Wrapper round a Graph to implement the slightly modified Finder interface.\npublic interface Finder; // Minimal interface for preforming simple pattern find operations.\npublic class FinderUtil extends Object; // Some simple helper methods used when working with Finders, particularly to compose them into cascade sequences.\npublic class IllegalParameterException extends ReasonerException; // Exception used to signal that a configuration parameter was used (typically in a setParameter call) that was not understood - either because it was not a recognized parameter URI or its value range was incorrect.\npublic interface InfGraph extends Graph; // Extends the Graph interface to give additional means to query an inferred graph.\npublic interface Reasoner; // The minimal interface to which all reasoners (or reasoner adaptors) conform.\npublic class ReasonerException extends JenaException; // Exception signalling some generic problem with the reasoning subsystem.\npublic interface ReasonerFactory; // The interface through which a reasoner (inference engine) can be instantiated.\npublic class ReasonerRegistry extends Object; // A global registry of known reasoner modules.\npublic class StandardValidityReport extends Object implements ValidityReport; // Default implementation of ValidityReport which simply stores a list of precomputed Report records.\npublic class TriplePattern extends Object implements ClauseEntry; // Datastructure which defines a triple pattern as used in simple rules and in find interfaces.\n", "des": "The Jena2 reasoner subsystem is designed to allow a range of inference engines to be plugged into Jena."}
{"index": 1658, "repo": "jena-core-4.9.0", "code": "package rulesys;\n\npackage rulesys.builtins; // Implementations of the Builtin class which provides primitive operations to the rule engines.\npackage rulesys.impl; // Internal implementation objects used by the rule system interpreters and compilers.\npublic interface BackwardRuleInfGraphI extends SilentAddI, InfGraph; // This interface collects together those operations that the backchaining engine needs to invoke in the parent InfGraph.\npublic class BasicForwardRuleInfGraph extends BaseInfGraph implements ForwardRuleInfGraphI; // An inference graph interface that runs a set of forward chaining rules to conclusion on each added triple and stores the entire result set.\npublic class BasicForwardRuleReasoner extends Object implements Reasoner; // Reasoner implementation which augments or transforms an RDF graph according to a set of rules.\npublic interface BindingEnvironment; // Interface through which the current bound values of variables can be found.\npublic interface Builtin; // Rules employ builtins to do all tests and actions other than simple triple matches and triple creation.\npublic class BuiltinException extends JenaException; // Exceptions thrown by runtime errors in executing rule system builtin operations.\npublic abstract class BuiltinRegistry extends Object;\npublic interface ClauseEntry; // Common interface for all objects that can go into rules.\npublic class FBRuleInfGraph extends BasicForwardRuleInfGraph implements BackwardRuleInfGraphI; // An inference graph that uses a mixture of forward and backward chaining rules.\npublic static class FBRuleInfGraph.RuleStore extends Object; // Structure used to wrap up pre-processed/compiled rule sets.\npublic class FBRuleReasoner extends Object implements RuleReasoner; // Rule-based reasoner interface.\npublic interface ForwardRuleInfGraphI extends InfGraph, SilentAddI; // This interface collects together the operations on the InfGraph which are needed to support the forward rule engine.\npublic class Functor extends Object implements ClauseEntry; // A functor comprises a functor name and a list of arguments.\npublic class FunctorDatatype extends BaseDatatype; // Datatype definition for functor-valued literals.\npublic class GenericRuleReasoner extends FBRuleReasoner; // A reasoner interface that is able to invoke any of the useful rule engine combinations.\npublic static class GenericRuleReasoner.RuleMode extends Object; // Class used as an enum for describing rule modes.\n", "des": "Provides a selection of simple rule engines for Jena inference models."}
{"index": 1659, "repo": "jena-core-4.9.0", "code": "package builtins;\n\npublic class AddOne extends BaseBuiltin; // Bind the second argument to 1+ the first argument.\npublic class AssertDisjointPairs extends BaseBuiltin; // Assert the n^2 differtFrom pairs from a distinctMembers list\npublic abstract class BaseBuiltin extends Object implements Builtin; // Dummy implementation of the Builtin interface that specific implementations can inherit from.\npublic class Bound extends BaseBuiltin; // Predicate used to check if a variable has been bound.\npublic class CountLiteralValues extends BaseBuiltin; // CountLiteralValues(X, P, C) sets C to be the number of semantically distinct values for P on resource X.\npublic class Difference extends BaseBuiltin; // Bind the third argument to the arithmetic difference between the first and second arguments.\npublic class Drop extends BaseBuiltin; // A variant of the \"remove\" builtin that will delete matched triples from the graph but will not trigger further rule processing for the removed triples.\npublic class Equal extends BaseBuiltin; // Check that the two args are semantically equal.\npublic class GE extends BaseBuiltin; // Tests if the first argument is greater than or equal to the second.\npublic class GreaterThan extends BaseBuiltin; // Tests if the first argument is greater than the second.\npublic class Hide extends BaseBuiltin; // Register a node as to be hidden from query result iterators.\npublic class IsBNode extends BaseBuiltin; // Tests the single argument to make sure it is blank node.\npublic class IsDType extends BaseBuiltin; // Tests whether the first argument is an instance of the datatype defined by the resource in the second argument.\npublic class IsFunctor extends BaseBuiltin; // Tests the single argument to make sure it is not a Functor.\npublic class IsLiteral extends BaseBuiltin; // Tests the single argument to make sure it is a literal.\npublic class LE extends BaseBuiltin; // Tests if the first argument is less than or equal to the second.\npublic class LessThan extends BaseBuiltin; // Tests if the first argument is less than the second.\npublic class ListContains extends BaseBuiltin; // Returns true if the first argument is a list which contains the second argument.\npublic class ListEntry extends BaseBuiltin; // listEntry(?list, ?index, ?val) will bind ?val to the ?index'th entry in the RDF list ?list.\n", "des": "Implementations of the Builtin class which provides primitive operations to the rule engines."}
{"index": 1660, "repo": "jena-core-4.9.0", "code": "package impl;\n\npublic class BBRuleContext extends Object implements RuleContext; // Implementation of RuleContext for use in the backward chaining interpreter.\npublic class BFRuleContext extends Object implements RuleContext; // An implementation of the generic RuleContext interface used by the basic forward (BF) rule engine.\npublic class BindingStack extends Object implements BindingEnvironment; // Provides a trail of possible variable bindings for a forward rule.\npublic class BindingVector extends Object implements BindingEnvironment; // An implementation of a binding environment that maintains a single array of bound values for the variables in a rule.\npublic class BindingVectorMultiSet extends Object; // A multi set of BindingVector's divided in buckets matching an unique combination of values at given indices managed by RETEQueue\npublic class ChoicePointFrame extends GenericChoiceFrame; // Represents a single frame in the LP interpreter's choice point stack, represents the OR part of the search tree.\npublic class ConsumerChoicePointFrame extends GenericTripleMatchFrame implements LPAgendaEntry, LPInterpreterState; // Frame in the LPInterpreter's control stack used to represent matching to the results of a tabled predicate.\npublic class EnvironmentFrame extends FrameObject; // Represents a single frame in the LP interpreter's environment stack.\npublic class EnvironmentFrameWithDerivation extends EnvironmentFrame; // Extension of the normal AND-stack environment frame to support incremental derivation logging.\npublic class FrameObject extends Object; // Base class for stack frame objects.\npublic class FRuleEngine extends Object implements FRuleEngineI; // The processing engine for forward production rules.\npublic static class FRuleEngine.RuleStore extends Object; // Structure used to wrap up processed rule indexes.\npublic interface FRuleEngineI; // Rule engines implement the internals of forward rule inference graphs and the forward part of hybrid graphs.\npublic class FRuleEngineIFactory extends Object; // Factory class for creating FRuleEngineI.\npublic class Generator extends Object implements LPAgendaEntry, LPInterpreterContext; // A generator represents a set of memoized results for a single tabled subgoal.\npublic class GenericChoiceFrame extends FrameObject; // Core properties of choice frames used use to represent the OR state of the backtracking search.\n", "des": "Internal implementation objects used by the rule system interpreters and compilers."}
{"index": 1661, "repo": "jena-core-4.9.0", "code": "package transitiveReasoner;\n\npublic class TransitiveEngine extends Object; // Uses two transitive graph caches to store a subclass and a subproperty lattice and use them within a larger inference graph.\npublic class TransitiveGraphCache extends Object implements Finder; // Datastructure used to represent a closed transitive reflexive relation.\npublic class TransitiveInfGraph extends BaseInfGraph; // Implementation of InfGraph used by the TransitiveReasoner.\npublic class TransitiveReasoner extends Object implements Reasoner; // A simple \"reasoner\" used to help with API development.\npublic class TransitiveReasonerFactory extends Object implements ReasonerFactory; // Factory class for creating blank instances of the transitive reasoner.\n", "des": "This package contains a reasoner which supports transitive-reflexive closure of subPropertyOf and subClassOf relations."}
{"index": 1662, "repo": "jena-core-4.9.0", "code": "package shared;\n\npackage shared.impl; // This package provides \"standard\" implementations for the interfaces defined by .shared, notably an implementation of PrefixMapping.\npublic class AccessDeniedException extends OperationDeniedException; // Superclass of exceptions thrown when permissions do not allow an operation on a graph.\npublic class AddDeniedException extends AccessDeniedException; // Exception to throw for a denied add operation\npublic class AlreadyExistsException extends JenaException; // Exception to throw when an attempt is made to create a named object (eg persistent model) when an object of that name already exists.\npublic class AlreadyReifiedException extends CannotReifyException; // The exception raised by reifyAs if a node is already bound to a single reified triple.\npublic class AssertionFailureException extends JenaException; // Exception to throw when an assertion fails.\npublic class AuthenticationRequiredException extends OperationDeniedException; // Exception to indicate that authentication is required for the operation to proceed.\npublic class BadBooleanException extends JenaException; // Exception to throw when a string cannot be converted to a Boolean value.\npublic class BadCharLiteralException extends JenaException; // Exception to throw when a literal required to be a single character isn't.\npublic class BadDescriptionException extends JenaException; // Exception to throw if a model (or graph) is a bad description\npublic class BadDescriptionMultipleRootsException extends BadDescriptionException; // Exception to throw if a Description contains multiple roots of a specified type.\npublic class BadDescriptionNoRootException extends BadDescriptionException; // Exception to throw if a Description has no root of a specified type\n@Deprecated public class BadURIException extends JenaException;\npublic class BrokenException extends JenaException; // An exception to throw if an internal error is detected.\npublic class CannotCreateException extends OperationDeniedException;\npublic class CannotEncodeCharacterException extends JenaException; // Exception to throw when a character cannot be encoded into some context for some reason.\npublic class CannotReifyException extends JenaException; // The exception thrown by reifyAs if a node is bound to bits and pieces of (an)other triple(s).\npublic class ClosedException extends JenaException; // Exception that may be thrown if an operation is attempted on a closed graph.\npublic class ConfigException extends JenaException; // An Exception indicating that Jena is not working because it is not correctly configured.\npublic class DeleteDeniedException extends AccessDeniedException; // Exception to throw if a delete is denied.\n", "des": "This package defines some classes common to the Jena API and SPI levels, in particular the JenaException class from which all Jena-specific exceptions hang, and the interface PrefixMapping for translation to and from QNames."}
{"index": 1663, "repo": "jena-core-4.9.0", "code": "package impl;\n\npublic class JenaParameters extends Object; // This class holds global, static, configuration parameters that affect the behaviour of the Jena API.\npublic class PrefixMappingImpl extends Object implements PrefixMapping; // An implementation of PrefixMapping.\n", "des": "This package provides \"standard\" implementations for the interfaces defined by .shared, notably an implementation of PrefixMapping."}
{"index": 1664, "repo": "jena-core-4.9.0", "code": "package util;\n\npackage util.iterator; // A package for defining useful iterators and iterator operations, including concatenation, mapping, filtering, empty and singleton iterators, iterator wrappers, and the ExtendedIterator class used in many places in Jena.\npublic abstract class CharEncoding extends Object; // This class provides a number of static methods which interact with java.nio.charset.Charset to analyze and transform the strings identifying character encodings.\npublic class CollectionFactory extends Object; // CollectionFactory - a central place for allocating sets and maps, mostly so that it's easy to plug in new implementations (eg trove).\npublic interface FileManager;\npublic class FileManagerImpl extends Object implements FileManager; // FileManager A FileManager provides access to named file-like resources by opening InputStreams to things in the filing system, by URL (http: and file:) and found by the classloader.\npublic class FileUtils extends Object;\npublic class IteratorCollection extends Object;\npublic class JenaXMLInput extends Object; // Create XML input methods.\npublic class LocationMapper extends Object; // Alternative locations for URIs.\npublic interface Locator; // Interface to things that open streams by some string reference\n@Deprecated public class LocatorClassLoader extends Object implements Locator;\n@Deprecated public class LocatorFile extends Object implements Locator;\n@Deprecated public class LocatorURL extends Object implements Locator;\n@Deprecated public class LocatorZip extends Object implements Locator;\npublic abstract class ModelCollector extends Object implements IdentityFinishCollector.UnorderedIdentityFinishCollector<Model,Model>;\npublic static class ModelCollector.ConcurrentModelCollector extends ModelCollector implements IdentityFinishCollector.ConcurrentUnorderedIdentityFinishCollector<Model,Model>;\npublic static class ModelCollector.IntersectionModelCollector extends ModelCollector;\npublic static class ModelCollector.UnionModelCollector extends ModelCollector;\npublic class MonitorGraph extends WrappedGraph; // Graph wrapper which provides normal access to an underlying graph but also maintains a snapshot of the triples it was last known to contain.\npublic class MonitorModel extends ModelCom; // Model wrapper which provides normal access to an underlying model but also maintains a snapshot of the triples it was last known to contain.\n", "des": "Miscellaneous collection of utility classes."}
{"index": 1665, "repo": "jena-core-4.9.0", "code": "package iterator;\n\npublic interface ClosableIterator<T> extends IteratorCloseable<T>; // An iterator which should be closed after use.\npublic interface ExtendedIterator<T> extends ClosableIterator<T>; // An ExtendedIterator is a ClosableIterator on which other operations are defined for convenience in iterator composition: composition, filtering in, filtering out, and element mapping. NOTE that the result of these operations consumes the base iterator(s); they do not make independent copies.\npublic class FilterIterator<T> extends WrappedIterator<T>; // Creates a sub-Iterator by filtering.\npublic abstract class LazyIterator<T> extends NiceIterator<T>; // An ExtendedIterator that is created lazily.\npublic class Map1Iterator<From,To> extends NiceIterator<To>; // An iterator that consumes an underlying iterator and maps its results before delivering them; supports remove if the underlying iterator does.\npublic interface MapFilter<R,S>; // Combines the actions of Map and Filter, mapping unacceptable objects to null and acceptable ones to their mapped value.\npublic class MapFilterIterator<T,X> extends NiceIterator<X> implements ExtendedIterator<X>; // A MapFilterIterator takes a MapFilter and an [Extended]Iterator and returns a new ExtendedIterator which delivers the sequence of all non-null elements MapFilter(X) for X from the base iterator.\npublic class NiceIterator<T> extends Object implements ExtendedIterator<T>; // NiceIterator is the standard base class implementing ExtendedIterator.\npublic class NullIterator<T> extends NiceIterator<T>; // An empty iterator.\npublic class RandomOrderIterator<T> extends WrappedIterator<T>; // RandomOrderIterator - Reorders the elements returned by an Iterator.\npublic class SingletonIterator<T> extends NiceIterator<T> implements ExtendedIterator<T>; // A ClosableIterator that contains only one element\npublic class UniqueFilter<T> extends Object implements Predicate<T>; // A Filter that filters out duplicate values.\npublic class WrappedIterator<T> extends NiceIterator<T>; // a WrappedIterator is an ExtendedIterator wrapping around a plain (or presented as plain) Iterator.\n", "des": "A package for defining useful iterators and iterator operations, including concatenation, mapping, filtering, empty and singleton iterators, iterator wrappers, and the ExtendedIterator class used in many places in Jena."}
{"index": 1666, "repo": "jena-core-4.9.0", "code": "package vocabulary;\n\npublic class AS extends Object; // The standard Activity Stream vocabulary.\npublic class DC extends DC_11;\npublic class DC_10 extends Object; // Dublin Core version 1.0 vocabulary.\npublic class DC_11 extends Object; // Vocabulary definitions from file:vocabularies/dublin-core_11.xml\npublic class DCAT extends Object; // Constants for the W3C Data Catalog Vocabulary.\npublic class DCTerms extends Object; // Vocabulary definitions from vocabularies/dublin-core_terms.xml\npublic class DCTypes extends Object; // Vocabulary definitions from vocabularies/dublin-core_types.xml\npublic class LocationMappingVocab extends Object; // Vocabulary definitions from Vocabularies/location-mapping-rdfs.n3\npublic class OA extends Object; // The standard Open Annotation vocabulary.\npublic class OntDocManagerVocab extends Object; // Vocabulary definitions from file:vocabularies/ont-manager.rdf\npublic class OntEventsVocab extends Object; // Vocabulary definitions from file:vocabularies/ont-event.rdf\npublic class ORG extends Object; // Constants for the W3C Organization Ontology.\npublic class OWL extends Object; // Vocabulary definitions from file:vocabularies/owl.owl\npublic static class OWL.Init extends Object; // OWL constants are used during Jena initialization.\npublic class OWL2 extends Object; // OWL2 vocabulary.\npublic class OWLResults extends Object; // The vocabulary used by WebOnt to encode results of test runs.\npublic class OWLTest extends Object; // The vocabulary used by the WebOnt working group to define test manifests.\npublic class RDF extends Object; // The standard RDF vocabulary.\npublic static class RDF.Init extends Object; // RDF constants are used during Jena initialization.\npublic static final class RDF.Nodes extends Object; // The same items of vocabulary, but at the Node level, parked inside a nested class so that there's a simple way to refer to them.\npublic class RDFS extends Object; // RDFS vocabulary items\npublic static class RDFS.Init extends Object; // RDFS constants are used during Jena initialization.\npublic static class RDFS.Nodes extends Object; // The RDFS vocabulary, expressed for the SPI layer in terms of .graph Nodes.\n", "des": "A package containing constant classes with predefined constant objects for classes and properties defined in well known vocabularies."}
{"index": 1667, "repo": "spring-boot-cli-3.1.1", "code": "package cli;\n\npackage cli.command; // Command infrastructure for the CLI.\npackage cli.util; // Utility classes for the CLI.\npublic class DefaultCommandFactory extends Object implements CommandFactory; // Default implementation of CommandFactory.\npublic final class SpringCli extends Object; // Spring Command Line Interface.\n", "des": "Main entry point of the Spring Boot CLI."}
{"index": 1668, "repo": "spring-boot-cli-3.1.1", "code": "package command;\n\npackage command.core; // Core CLI commands.\npackage command.encodepassword; // CLI command for password encoding.\npackage command.init; // CLI command for initializing a new application using Spring Initializr.\npackage command.options; // Support classes for handling command line options.\npackage command.shell; // Classes for running a nested shell in the CLI.\npackage command.status; // CLI command status.\npublic abstract class AbstractCommand extends Object implements Command; // Abstract Command implementation.\npublic interface Command; // A single command that can be run from the CLI.\npublic class CommandException extends RuntimeException; // Runtime exception wrapper that defines additional CommandException.Options that are understood by the CommandRunner.\npublic static enum CommandException.Option extends Enum<CommandException.Option>; // Specific options understood by the CommandRunner.\n@FunctionalInterface public interface CommandFactory; // Factory used to create CLI Commands.\npublic class CommandRunner extends Object implements Iterable<Command>; // Main class used to run Commands.\npublic class HelpExample extends Object; // An example that can be displayed in the help.\npublic class NoHelpCommandArgumentsException extends CommandException; // Exception used to when the help command is called without arguments.\npublic class NoSuchCommandException extends CommandException; // Exception used when a command is not found.\npublic abstract class OptionParsingCommand extends AbstractCommand; // Base class for a Command that parse options using an OptionHandler.\n", "des": "Command infrastructure for the CLI."}
{"index": 1669, "repo": "spring-boot-cli-3.1.1", "code": "package core;\n\npublic class HelpCommand extends AbstractCommand; // Internal Command used for 'help' requests.\npublic class HintCommand extends AbstractCommand; // Internal Command to provide hints for shell auto-completion.\npublic class VersionCommand extends AbstractCommand; // Command to display the 'version' number.\n", "des": "Core CLI commands."}
{"index": 1670, "repo": "spring-boot-cli-3.1.1", "code": "package encodepassword;\n\npublic class EncodePasswordCommand extends OptionParsingCommand; // Command to encode passwords for use with Spring Security.\n", "des": "CLI command for password encoding."}
{"index": 1671, "repo": "spring-boot-cli-3.1.1", "code": "package init;\n\npublic class InitCommand extends OptionParsingCommand; // Command that initializes a project using Spring initializr.\npublic class ReportableException extends RuntimeException; // Exception with a message that can be reported to the user.\n", "des": "CLI command for initializing a new application using Spring Initializr."}
{"index": 1672, "repo": "spring-boot-cli-3.1.1", "code": "package options;\n\npublic class OptionHandler extends Object; // Delegate used by OptionParsingCommand to parse options and run the command.\npublic interface OptionHelp; // Help for a specific option.\n", "des": "Support classes for handling command line options."}
{"index": 1673, "repo": "spring-boot-cli-3.1.1", "code": "package shell;\n\npublic class CommandCompleter extends jline.console.completer.StringsCompleter; // JLine Completer for Spring Boot Commands.\npublic class PromptCommand extends AbstractCommand; // Command to change the Shell prompt.\npublic class Shell extends Object; // A shell for Spring Boot.\npublic class ShellCommand extends AbstractCommand; // Command to start a nested REPL shell.\npublic class ShellExitException extends CommandException; // Exception used to stop the Shell.\npublic class ShellPrompts extends Object; // Abstraction to manage a stack of prompts.\n", "des": "Classes for running a nested shell in the CLI."}
{"index": 1674, "repo": "spring-boot-cli-3.1.1", "code": "package status;\n\npublic final class ExitStatus extends Object; // Encapsulation of the outcome of a command.\n", "des": "CLI command status."}
{"index": 1675, "repo": "spring-boot-cli-3.1.1", "code": "package util;\n\npublic abstract class Log extends Object; // Simple logger used by the CLI.\n", "des": "Utility classes for the CLI."}
{"index": 1676, "repo": "spring-oxm-6.0.11", "code": "package oxm;\n\npackage oxm.config; // Provides an namespace handler for the Spring Object/XML namespace.\npackage oxm.jaxb; // Package providing integration of JAXB with Spring's O/X Mapping support.\npackage oxm.mime; // Contains (un)marshallers optimized to store binary data in MIME attachments.\npackage oxm.support; // Provides generic support classes for using Spring's O/X Mapping integration within various scenario's.\npackage oxm.xstream; // Package providing integration of XStream with Spring's O/X Mapping support.\npublic interface GenericMarshaller extends Marshaller; // Subinterface of Marshaller that has support for generics.\npublic interface GenericUnmarshaller extends Unmarshaller; // Subinterface of Unmarshaller that has support for generics.\npublic interface Marshaller; // Defines the contract for Object XML Mapping Marshallers.\npublic abstract class MarshallingException extends XmlMappingException; // Base class for exception thrown when a marshalling or unmarshalling error occurs.\npublic class MarshallingFailureException extends MarshallingException; // Exception thrown on marshalling failure.\npublic class UncategorizedMappingException extends XmlMappingException; // Exception that indicates that the cause cannot be distinguished further.\npublic interface Unmarshaller; // Defines the contract for Object XML Mapping unmarshallers.\npublic class UnmarshallingFailureException extends MarshallingException; // Exception thrown on unmarshalling failure.\npublic class ValidationFailureException extends XmlMappingException; // Exception thrown on marshalling validation failure.\npublic abstract class XmlMappingException extends org.springframework.core.NestedRuntimeException; // Root of the hierarchy of Object XML Mapping exceptions.\n", "des": "Root package for Spring's O/X Mapping integration classes."}
{"index": 1677, "repo": "spring-oxm-6.0.11", "code": "package config;\n\npublic class OxmNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for the 'oxm' namespace.\n", "des": "Provides an namespace handler for the Spring Object/XML namespace."}
{"index": 1678, "repo": "spring-oxm-6.0.11", "code": "package jaxb;\n\npublic class Jaxb2Marshaller extends Object implements MimeMarshaller, MimeUnmarshaller, GenericMarshaller, GenericUnmarshaller, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Implementation of the GenericMarshaller interface for JAXB 2.2.\n", "des": "Package providing integration of JAXB with Spring's O/X Mapping support."}
{"index": 1679, "repo": "spring-oxm-6.0.11", "code": "package mime;\n\npublic interface MimeContainer; // Represents a container for MIME attachments Concrete implementations might adapt a SOAPMessage or an email message.\npublic interface MimeMarshaller extends Marshaller; // Subinterface of Marshaller that can use MIME attachments to optimize storage of binary data.\npublic interface MimeUnmarshaller extends Unmarshaller; // Subinterface of Unmarshaller that can use MIME attachments to optimize storage of binary data.\n", "des": "Contains (un)marshallers optimized to store binary data in MIME attachments."}
{"index": 1680, "repo": "spring-oxm-6.0.11", "code": "package support;\n\npublic abstract class AbstractMarshaller extends Object implements Marshaller, Unmarshaller; // Abstract implementation of the Marshaller and Unmarshaller interface.\npublic class MarshallingSource extends SAXSource; // Source implementation that uses a Marshaller.Can be constructed with a Marshaller and an object to be marshalled.\npublic abstract class SaxResourceUtils extends Object; // Convenient utility methods for dealing with SAX.\n", "des": "Provides generic support classes for using Spring's O/X Mapping integration within various scenario's."}
{"index": 1681, "repo": "spring-oxm-6.0.11", "code": "package xstream;\n\npublic class CatchAllConverter extends Object implements com.thoughtworks.xstream.converters.Converter; // XStream Converter that supports all classes, but throws exceptions for (un)marshalling.\npublic class XStreamMarshaller extends AbstractMarshaller implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Implementation of the Marshaller interface for XStream.\n", "des": "Package providing integration of XStream with Spring's O/X Mapping support."}
{"index": 1682, "repo": "spring-integration-mqtt-6.1.2", "code": "package xml;\n\npublic class MqttMessageDrivenChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser; // The MqttAdapter Message Driven Channel adapter parser.\npublic class MqttNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // The namespace handler for the MqttAdapter namespace.\npublic class MqttOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // The parser for the MqttAdapter Outbound Channel Adapter.\n", "des": "Provides parser classes to provide Xml namespace support for the MqttAdapter components."}
{"index": 1683, "repo": "spring-integration-mqtt-6.1.2", "code": "package core;\n\npublic abstract class AbstractMqttClientManager<T,C> extends Object implements ClientManager<T,C>, org.springframework.context.ApplicationEventPublisherAware; // Abstract class for MQTT client managers which can be a base for any common v3/v5 client manager implementation.\npublic interface ClientManager<T,C> extends org.springframework.context.SmartLifecycle, MqttComponent<C>; // A utility abstraction over MQTT client which can be used in any MQTT-related component without need to handle generic client callbacks, reconnects etc.\n@FunctionalInterface public static interface ClientManager.ConnectCallback; // A contract for a custom callback on connectComplete event from the client.\npublic class DefaultMqttPahoClientFactory extends Object implements MqttPahoClientFactory; // Creates a default MqttClient and a set of options as configured.\npublic static class DefaultMqttPahoClientFactory.Will extends Object;\npublic interface MqttComponent<T> extends org.springframework.beans.factory.BeanNameAware; // A component that interfaces with MQTT.\npublic interface MqttPahoClientFactory;\npublic interface MqttPahoComponent extends MqttComponent<org.eclipse.paho.client.mqttv3.MqttConnectOptions>; // An extension of MqttComponent for Eclipse Paho components.\npublic class Mqttv3ClientManager extends AbstractMqttClientManager<org.eclipse.paho.client.mqttv3.IMqttAsyncClient,org.eclipse.paho.client.mqttv3.MqttConnectOptions> implements org.eclipse.paho.client.mqttv3.MqttCallbackExtended; // A client manager implementation for MQTT v3 protocol.\npublic class Mqttv5ClientManager extends AbstractMqttClientManager<org.eclipse.paho.mqttv5.client.IMqttAsyncClient,org.eclipse.paho.mqttv5.client.MqttConnectionOptions> implements org.eclipse.paho.mqttv5.client.MqttCallback; // A client manager implementation for MQTT v5 protocol.\n", "des": "Provides core classes of the MqttAdapter module."}
{"index": 1684, "repo": "spring-integration-mqtt-6.1.2", "code": "package event;\n\npublic class MqttConnectionFailedEvent extends MqttIntegrationEvent; // The MqttIntegrationEvent to notify about lost connection to the server.\npublic abstract class MqttIntegrationEvent extends org.springframework.integration.events.IntegrationEvent; // Base class for Mqtt Events.\npublic class MqttMessageDeliveredEvent extends MqttMessageDeliveryEvent; // An event emitted (when using aysnc) when the client indicates the message was delivered.\npublic abstract class MqttMessageDeliveryEvent extends MqttIntegrationEvent; // Base class for events related to message delivery.\npublic class MqttMessageSentEvent extends MqttMessageDeliveryEvent; // An event emitted (when using async) when the client indicates that a message has been sent.\npublic class MqttProtocolErrorEvent extends MqttIntegrationEvent; // The even representing an MQTT error occured during client interaction.\npublic class MqttSubscribedEvent extends MqttIntegrationEvent;\n", "des": "ApplicationEvents generated by the mqtt module."}
{"index": 1685, "repo": "spring-integration-mqtt-6.1.2", "code": "package inbound;\n\n@ManagedResource @IntegrationManagedResource public abstract class AbstractMqttMessageDrivenChannelAdapter<T,C> extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.context.ApplicationEventPublisherAware, ClientManager.ConnectCallback; // Abstract class for MQTT Message-Driven Channel Adapters.\npublic class MqttPahoMessageDrivenChannelAdapter extends AbstractMqttMessageDrivenChannelAdapter<org.eclipse.paho.client.mqttv3.IMqttAsyncClient,org.eclipse.paho.client.mqttv3.MqttConnectOptions> implements org.eclipse.paho.client.mqttv3.MqttCallbackExtended, MqttPahoComponent; // Eclipse Paho Implementation.\npublic class Mqttv5PahoMessageDrivenChannelAdapter extends AbstractMqttMessageDrivenChannelAdapter<org.eclipse.paho.mqttv5.client.IMqttAsyncClient,org.eclipse.paho.mqttv5.client.MqttConnectionOptions> implements org.eclipse.paho.mqttv5.client.MqttCallback, MqttComponent<org.eclipse.paho.mqttv5.client.MqttConnectionOptions>; // The AbstractMqttMessageDrivenChannelAdapter implementation for MQTT v5.\n", "des": "Provides inbound Spring Integration MqttAdapter components."}
{"index": 1686, "repo": "spring-integration-mqtt-6.1.2", "code": "package outbound;\n\npublic abstract class AbstractMqttMessageHandler<T,C> extends org.springframework.integration.handler.AbstractMessageHandler implements org.springframework.integration.support.management.ManageableLifecycle, org.springframework.context.ApplicationEventPublisherAware; // Abstract class for MQTT outbound channel adapters.\npublic class MqttPahoMessageHandler extends AbstractMqttMessageHandler<org.eclipse.paho.client.mqttv3.IMqttAsyncClient,org.eclipse.paho.client.mqttv3.MqttConnectOptions> implements org.eclipse.paho.client.mqttv3.MqttCallback, MqttPahoComponent; // Eclipse Paho Implementation.\npublic class Mqttv5PahoMessageHandler extends AbstractMqttMessageHandler<org.eclipse.paho.mqttv5.client.IMqttAsyncClient,org.eclipse.paho.mqttv5.client.MqttConnectionOptions> implements org.eclipse.paho.mqttv5.client.MqttCallback, MqttComponent<org.eclipse.paho.mqttv5.client.MqttConnectionOptions>; // The AbstractMqttMessageHandler implementation for MQTT v5.\n", "des": "Provides Spring Integration components for doing outbound operations."}
{"index": 1687, "repo": "spring-integration-mqtt-6.1.2", "code": "package support;\n\npublic class DefaultPahoMessageConverter extends Object implements MqttMessageConverter, org.springframework.beans.factory.BeanFactoryAware; // Default implementation for mapping to/from Messages.\npublic final class MqttHeaderAccessor extends Object; // Helper for typed access to incoming MQTT message headers.\npublic class MqttHeaderMapper extends Object implements org.springframework.integration.mapping.HeaderMapper<org.eclipse.paho.mqttv5.common.packet.MqttProperties>; // The default HeaderMapper implementation for MQTT v5 message properties mapping.\npublic final class MqttHeaders extends Object; // Spring Integration headers.\npublic interface MqttMessageConverter extends org.springframework.messaging.converter.MessageConverter; // Extension of MessageConverter allowing the topic to be added as a header.\npublic final class MqttUtils extends Object; // MQTT Utilities.\n", "des": "Provides various support classes used across Spring Integration MqttAdapter Components."}
{"index": 1688, "repo": "spring-data-couchbase-5.1.2", "code": "package config;\n\n@Configuration public abstract class AbstractCouchbaseConfiguration extends Object; // Base class for Spring Data Couchbase configuration using JavaConfig.\npublic class BeanNames extends Object; // Contains default bean names for Couchbase beans.\n", "des": "This package contains all classes needed for specific configuration of Spring Data Couchbase."}
{"index": 1689, "repo": "spring-data-couchbase-5.1.2", "code": "package core;\n\npackage core.convert; // This package contains classes used for entity-to-JSON conversions, type mapping and writing.\npackage core.mapping; // This package contains interfaces and annotations relative to object-json mapping and the notion of a Couchbase Storable.\npackage core.query; // This package contains annotations and classes relative to querying with Couchbase (whether through views or N1QL) and the associated indexes.\n@Internal public abstract class AbstractTemplateSupport extends Object; // Base shared by Reactive and non-Reactive TemplateSupport\npublic interface CollectionCallback<T>; // Defines the callback which will be wrapped and executed on a bucket.\npublic class CouchbaseDataIntegrityViolationException extends DataIntegrityViolationException; // A Couchbase specific integrity violation exception, thrown as a result of failing db operations.\npublic class CouchbaseExceptionTranslator extends Object implements PersistenceExceptionTranslator; // Simple PersistenceExceptionTranslator for Couchbase.\npublic interface CouchbaseOperations extends FluentCouchbaseOperations; // Defines common operations on the Couchbase data source, most commonly implemented by CouchbaseTemplate.\npublic class CouchbaseQueryExecutionException extends DataRetrievalFailureException; // An DataRetrievalFailureException that denotes an error during a query (N1QL).\npublic class CouchbaseTemplate extends Object implements CouchbaseOperations, ApplicationContextAware; // Implements lower-level couchbase operations on top of the SDK with entity mapping capabilities.\npublic interface ExecutableExistsByIdOperation; // Insert Operations\npublic static interface ExecutableExistsByIdOperation.ExecutableExistsById extends ExecutableExistsByIdOperation.ExistsByIdInScope; // Provides methods for constructing KV exists operations in a fluent way.\npublic static interface ExecutableExistsByIdOperation.ExistsByIdInCollection<T> extends ExecutableExistsByIdOperation.ExistsByIdWithOptions<T>, InCollection<T>; // Fluent method to specify the collection.\npublic static interface ExecutableExistsByIdOperation.ExistsByIdInScope<T> extends ExecutableExistsByIdOperation.ExistsByIdInCollection<T>, InScope<T>; // Fluent method to specify the scope.\npublic static interface ExecutableExistsByIdOperation.ExistsByIdWithOptions<T> extends ExecutableExistsByIdOperation.TerminatingExistsById, WithExistsOptions<T>; // Fluent method to specify options.\npublic static interface ExecutableExistsByIdOperation.TerminatingExistsById extends OneAndAllExists; // Terminating operations invoking the actual execution.\npublic class ExecutableExistsByIdOperationSupport extends Object implements ExecutableExistsByIdOperation;\n", "des": "This package contains the specific implementations and core classes for Spring Data Couchbase internals."}
{"index": 1690, "repo": "spring-data-couchbase-5.1.2", "code": "package convert;\n\npackage convert.translation; // This package contains a service interface to translate entities to a Couchbase storable format, and its implementations.\npublic abstract class AbstractCouchbaseConverter extends Object implements CouchbaseConverter, InitializingBean; // An abstract CouchbaseConverter that provides the basics for the MappingCouchbaseConverter.\n@ReadingConverter public class BooleanToEnumConverterFactory extends Object implements ConverterFactory<Boolean,Enum>; // Reading Converter factory for Enums.\npublic class ConverterHasNoConversion extends RuntimeException; // PropertyValueConverter throws this when cannot convert the property.\npublic class CouchbaseConversionContext extends Object implements ValueConversionContext<CouchbasePersistentProperty>; // ValueConversionContext that allows to delegate read/write to an underlying CouchbaseConverter.\npublic interface CouchbaseConverter extends EntityConverter<CouchbasePersistentEntity<?>,CouchbasePersistentProperty,Object,CouchbaseDocument>, CouchbaseWriter<Object,CouchbaseDocument>, EntityReader<Object,CouchbaseDocument>; // Marker interface for the converter, identifying the types to and from that can be converted.\npublic class CouchbaseCustomConversions extends CustomConversions; // Value object to capture custom conversion.\npublic static class CouchbaseCustomConversions.CouchbaseConverterConfigurationAdapter extends Object; // CouchbaseCustomConversions.CouchbaseConverterConfigurationAdapter encapsulates creation of CustomConversions.ConverterConfiguration with CouchbaseDB specifics.\npublic class CouchbaseDocumentPropertyAccessor extends MapAccessor; // A property accessor for document properties.\npublic final class CouchbaseJsr310Converters extends Object; // Helper class to register JSR-310 specific Converter implementations.\n@WritingConverter public static enum CouchbaseJsr310Converters.DurationToStringConverter extends Enum<CouchbaseJsr310Converters.DurationToStringConverter> implements Converter<Duration,String>;\n@WritingConverter public static enum CouchbaseJsr310Converters.InstantToLongConverter extends Enum<CouchbaseJsr310Converters.InstantToLongConverter> implements Converter<Instant,Long>;\n@WritingConverter public static enum CouchbaseJsr310Converters.LocalDateTimeToLongConverter extends Enum<CouchbaseJsr310Converters.LocalDateTimeToLongConverter> implements Converter<LocalDateTime,Long>;\n@WritingConverter public static enum CouchbaseJsr310Converters.LocalDateToLongConverter extends Enum<CouchbaseJsr310Converters.LocalDateToLongConverter> implements Converter<LocalDate,Long>;\n", "des": "This package contains classes used for entity-to-JSON conversions, type mapping and writing."}
{"index": 1691, "repo": "spring-data-couchbase-5.1.2", "code": "package translation;\n\npublic class JacksonTranslationService extends Object implements TranslationService, InitializingBean; // A Jackson JSON Translator that implements the TranslationService contract.\npublic interface TranslationService; // Defines a translation service to encode/decode responses into the CouchbaseStorable format.\n", "des": "This package contains a service interface to translate entities to a Couchbase storable format, and its implementations."}
{"index": 1692, "repo": "spring-data-couchbase-5.1.2", "code": "package mapping;\n\npackage mapping.event; // This package contains various events that are emitted during the lifecycle of a Spring Data entity.\npublic class BasicCouchbasePersistentEntity<T> extends BasicPersistentEntity<T,CouchbasePersistentProperty> implements CouchbasePersistentEntity<T>, EnvironmentAware; // The representation of a persistent entity.\npublic class BasicCouchbasePersistentProperty extends AnnotationBasedPersistentProperty<CouchbasePersistentProperty> implements CouchbasePersistentProperty; // Implements annotated property representations of a given Field instance.\npublic class CouchbaseDocument extends Object implements CouchbaseStorable; // A CouchbaseDocument is an abstract representation of a document stored inside Couchbase Server.\npublic class CouchbaseList extends Object implements CouchbaseStorable; // A CouchbaseList is an abstract list that represents an array stored in a (most of the times JSON) document.\npublic class CouchbaseMappingContext extends AbstractMappingContext<BasicCouchbasePersistentEntity<?>,CouchbasePersistentProperty> implements ApplicationContextAware; // Default implementation of a MappingContext for Couchbase using BasicCouchbasePersistentEntity and BasicCouchbasePersistentProperty as primary abstractions.\npublic interface CouchbasePersistentEntity<T> extends PersistentEntity<T,CouchbasePersistentProperty>; // Represents an entity that can be persisted which contains 0 or more properties.\npublic interface CouchbasePersistentProperty extends PersistentProperty<CouchbasePersistentProperty>; // Represents a property part of an entity that needs to be persisted.\npublic abstract class CouchbaseSimpleTypes extends Object;\npublic interface CouchbaseStorable; // Marker Interface to identify either a CouchbaseDocument or a CouchbaseList.\n@Inherited @Retention(RUNTIME) @Target(TYPE) @ScanConsistency public @interface Document; // Identifies a domain object to be persisted to Couchbase.\n@Inherited @Retention(RUNTIME) @Target({TYPE,ANNOTATION_TYPE}) public @interface Durability; // Durability annotation\n@Documented @Retention(RUNTIME) @Target({FIELD,ANNOTATION_TYPE}) public @interface Expiration; // Annotation to define a field to be substituted for META().expiration in a query\n@Inherited @Retention(RUNTIME) @Target({TYPE,ANNOTATION_TYPE}) public @interface Expiry; // Expiry annotation\n@Documented @Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface Field; // Annotation to define custom metadata for document fields.\n", "des": "This package contains interfaces and annotations relative to object-json mapping and the notion of a Couchbase Storable."}
{"index": 1693, "repo": "spring-data-couchbase-5.1.2", "code": "package event;\n\npublic class AbstractCouchbaseEventListener<E> extends Object implements ApplicationListener<CouchbaseMappingEvent<?>>; // Base class to implement domain class specific ApplicationListeners.\n@FunctionalInterface public interface AfterConvertCallback<T> extends EntityCallback<T>; // Callback being invoked after a domain object is materialized from a CouchbaseDocument when reading results.\npublic class AfterDeleteEvent<E> extends CouchbaseMappingEvent<E>;\npublic class AfterSaveEvent<E> extends CouchbaseMappingEvent<E>;\npublic class AuditingEntityCallback extends Object implements BeforeConvertCallback<Object>, AfterConvertCallback<Object>, Ordered; // EntityCallback to populate auditing related fields on an entity about to be saved.\npublic class AuditingEventListener extends Object implements ApplicationListener<CouchbaseMappingEvent<Object>>; // Event listener to populate auditing related fields on an entity about to be saved.\n@FunctionalInterface public interface BeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\npublic class BeforeConvertEvent<E> extends CouchbaseMappingEvent<E>;\npublic class BeforeDeleteEvent<E> extends CouchbaseMappingEvent<E>;\npublic class BeforeSaveEvent<E> extends CouchbaseMappingEvent<E>;\npublic class CouchbaseMappingEvent<T> extends ApplicationEvent; // A mapping event.\npublic class LoggingEventListener extends AbstractCouchbaseEventListener<Object>; // AApplicationListener for Couchbase mapping events logging the events.\n@FunctionalInterface public interface ReactiveAfterConvertCallback<T> extends EntityCallback<T>; // Callback being invoked after a domain object is materialized from a CouchbaseDocument when reading results.\npublic class ReactiveAuditingEntityCallback extends Object implements ReactiveBeforeConvertCallback<Object>, ReactiveAfterConvertCallback<Object>, Ordered; // Reactive EntityCallback to populate auditing related fields on an entity about to be saved.\n@FunctionalInterface public interface ReactiveBeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\npublic class ValidatingCouchbaseEventListener extends AbstractCouchbaseEventListener<Object>; // javax.validation dependant entities validator.\n", "des": "This package contains various events that are emitted during the lifecycle of a Spring Data entity."}
{"index": 1694, "repo": "spring-data-couchbase-5.1.2", "code": "package query;\n\npublic class AnalyticsQuery extends Object;\npublic enum Consistency extends Enum<Consistency>; // Enumeration of different consistency configurations to be used by the queries generated by the framework.\n@Documented @Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Deprecated public @interface Dimensional;\npublic enum FetchType extends Enum<FetchType>; // Setting for specify when to fetch the associated entities\npublic enum HashSide extends Enum<HashSide>; // Hash side to specify hash join.\npublic class Meta extends Object; // Meta-data for Query instances.\npublic static enum Meta.MetaKey extends Enum<Meta.MetaKey>;\npublic class N1QLExpression extends Object; // A N1QL Query Expression\n@Target(FIELD) @Retention(RUNTIME) public @interface N1qlJoin; // This annotation is targeted for entity field which is a list of the associated entities fetched by ANSI Join across the entities available from Couchbase Server 5.5\n@Deprecated @Target(TYPE) @Retention(RUNTIME) public @interface N1qlPrimaryIndexed;\npublic class N1QLQuery extends Query;\n@Target(TYPE) @Retention(RUNTIME) @Deprecated public @interface N1qlSecondaryIndexed;\npublic class OptionsBuilder extends Object; // Methods for building Options objects for Couchbae APIs.\npublic class Query extends Object;\npublic class QueryCriteria extends Object implements QueryCriteriaDefinition;\npublic static enum QueryCriteria.ChainOperator extends Enum<QueryCriteria.ChainOperator>;\npublic interface QueryCriteriaDefinition;\npublic class StringQuery extends Query; // Query created from the string in @Query annotation in the repository interface.\n@Documented @Target(METHOD) @Retention(RUNTIME) @Deprecated public @interface View;\n@Target(TYPE) @Retention(RUNTIME) @Deprecated public @interface ViewIndexed;\n@Documented @Target(METHOD) @Retention(RUNTIME) public @interface WithConsistency; // Annotation to set the scan consistency of N1QL queries with Couchbase.\n", "des": "This package contains annotations and classes relative to querying with Couchbase (whether through views or N1QL) and the associated indexes."}
{"index": 1695, "repo": "spring-data-couchbase-5.1.2", "code": "package repository;\n\npackage repository.config; // This package contains the support classes to configure repositories in the context of Couchbase.\npackage repository.query; // This package contains classes related to query derivation and concrete ways of querying couchbase.\npackage repository.support; // This package contains the Couchbase implementations to support the Spring Data repository abstraction.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE,TYPE}) @Documented public @interface Collection; // Collection Annotation\n@NoRepositoryBean public interface CouchbaseRepository<T,ID> extends PagingAndSortingRepository<T,ID>, CrudRepository<T,ID>; // Couchbase specific Repository interface.\npublic interface DynamicProxyable<REPO>; // The generic parameter needs to be REPO which is either a CouchbaseRepository parameterized on T,ID or a ReactiveCouchbaseRepository parameterized on T,ID. i.e.: interface AirportRepository extends CouchbaseRepository<Airport, String>, DynamicProxyable<AirportRepository>\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE,TYPE}) @Documented public @interface Options; // Scope Annotation\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Query; // Annotation to support the use of N1QL queries with Couchbase.\n@NoRepositoryBean public interface ReactiveCouchbaseRepository<T,ID> extends ReactiveSortingRepository<T,ID>, ReactiveCrudRepository<T,ID>; // Couchbase-specific ReactiveSortingRepository implementation.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE,TYPE}) @Documented public @interface ScanConsistency; // Scan Consistency Annotation\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE,TYPE}) @Documented public @interface Scope; // Scope Annotation\n", "des": "This package contains the Couchbase interfaces to support the Spring Data repository abstraction."}
{"index": 1696, "repo": "spring-data-couchbase-5.1.2", "code": "package config;\n\npublic class CouchbaseRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport;\npublic class CouchbaseRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport;\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(CouchbaseRepositoriesRegistrar.class) public @interface EnableCouchbaseRepositories; // Annotation to activate Couchbase repositories.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(ReactiveCouchbaseRepositoriesRegistrar.class) public @interface EnableReactiveCouchbaseRepositories; // Annotation to activate reactive couchbase repositories.\npublic class ReactiveCouchbaseRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport;\npublic class ReactiveCouchbaseRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport;\npublic class ReactiveRepositoryOperationsMapping extends Object;\npublic class RepositoryOperationsMapping extends Object; // A utility class for configuration allowing to tell which CouchbaseOperations should be backing repositories.\n", "des": "This package contains the support classes to configure repositories in the context of Couchbase."}
{"index": 1697, "repo": "spring-data-couchbase-5.1.2", "code": "package query;\n\npackage query.support; // This package contains support classes for query derivation and other ways of querying couchbase (helper classes).\npublic abstract class AbstractCouchbaseQuery extends AbstractCouchbaseQueryBase<CouchbaseOperations> implements RepositoryQuery; // RepositoryQuery implementation for Couchbase.\npublic abstract class AbstractCouchbaseQueryBase<CouchbaseOperationsType> extends Object implements RepositoryQuery; // RepositoryQuery implementation for Couchbase.\npublic abstract class AbstractN1qlBasedQuery extends Object implements RepositoryQuery; // Abstract base for all Couchbase RepositoryQuery.\npublic abstract class AbstractReactiveCouchbaseQuery extends AbstractCouchbaseQueryBase<ReactiveCouchbaseOperations> implements RepositoryQuery; // Base class for reactive RepositoryQuery implementations for Couchbase.\npublic class ConvertingIterator extends Object implements Iterator<Object>; // An Iterator<Object> that converts values to their stored Class if warranted.\npublic interface CouchbaseEntityInformation<T,ID> extends EntityInformation<T,ID>; // Marker interface for the Couchbase Entity Information.\npublic class CouchbasePartTree extends PartTree; // Extend PartTree to parse out distinct fields\npublic class CouchbaseQueryMethod extends QueryMethod; // Represents a query method with couchbase extensions, allowing to discover if View-based query or N1QL-based query must be used.\n@Deprecated public class CouchbaseRepositoryQuery extends Object implements RepositoryQuery;\npublic class CountFragment extends Object; // An utility entity that allows to extract total row count out of a COUNT(*) N1QL query.\npublic class N1qlCountQueryCreator extends OldN1qlQueryCreator;\npublic class N1qlMutateQueryCreator extends AbstractQueryCreator<N1QLExpression,N1QLExpression> implements PartTreeN1qlQueryCreator; // N1qlMutateQueryCreator allows to create queries for delete operations.\npublic class N1qlQueryCreator extends AbstractQueryCreator<Query,QueryCriteria>;\n@Deprecated public class N1qlRepositoryQueryExecutor extends Object;\npublic class OldN1qlQueryCreator extends AbstractQueryCreator<N1QLExpression,N1QLExpression> implements PartTreeN1qlQueryCreator; // This Query Creator is responsible for parsing a PartTree (representing a method name) into the WHERE clause of a N1QL query.\n", "des": "This package contains classes related to query derivation and concrete ways of querying couchbase."}
{"index": 1698, "repo": "spring-data-couchbase-5.1.2", "code": "package support;\n\npublic class AwtPointInShapeEvaluator extends PointInShapeEvaluator; // A default PointInShapeEvaluator implementation based on the JDK's java.awt.geom classes.\npublic class GeoUtils extends Object; // Utility class to deal with geo/dimensional indexed data and queries.\npublic class N1qlQueryCreatorUtils extends Object; // Utils for creating part tree expressions\npublic class N1qlUtils extends Object; // Utility class to deal with constructing well formed N1QL queries around Spring Data entities, so that the framework can use N1QL to find such entities (eg. restrict the bucket search to a particular type).\npublic abstract class PointInShapeEvaluator extends Object; // PointInShapeEvaluator can be used to tell if a particular Point is contained by a Polygon or Circle.\n", "des": "This package contains support classes for query derivation and other ways of querying couchbase (helper classes)."}
{"index": 1699, "repo": "spring-data-couchbase-5.1.2", "code": "package support;\n\npublic class BasicQuery extends Query; // BasicQuery for Querydsl\n@SupportedAnnotationTypes({\"com.querydsl.core.annotations.*\",\"org.springframework.data.couchbase.core.mapping.*\"}) @SupportedSourceVersion(RELEASE_6) public class CouchbaseAnnotationProcessor extends com.querydsl.apt.AbstractQuerydslProcessor; // Annotation processor to create Querydsl query types for QueryDsl annotated classes.\npublic class CouchbaseRepositoryBase<T,ID> extends Object; // Common base for SimpleCouchbaseRepository and SimpleReactiveCouchbaseRepository\npublic class CouchbaseRepositoryFactory extends RepositoryFactorySupport; // Factory to create SimpleCouchbaseRepository instances.\npublic class CouchbaseRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends RepositoryFactoryBeanSupport<T,S,ID>; // The factory bean to create repositories.\npublic interface CrudMethodMetadata;\npublic class DBRef extends Object; // DB references\npublic class DynamicInvocationHandler<T> extends Object implements InvocationHandler; // Invocation Handler for scope/collection/options proxy for repositories\npublic class MappingCouchbaseEntityInformation<T,ID> extends PersistentEntityInformation<T,ID> implements CouchbaseEntityInformation<T,ID>; // Entity Information container.\npublic class QuerydslCouchbasePredicateExecutor<T> extends QuerydslPredicateExecutorSupport<T> implements QuerydslPredicateExecutor<T>; // Couchbase-specific QuerydslPredicateExecutor that allows execution Predicates in various forms.\npublic class QuerydslPredicateExecutorSupport<T> extends Object;\npublic class ReactiveCouchbaseRepositoryFactory extends ReactiveRepositoryFactorySupport;\npublic class ReactiveCouchbaseRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends RepositoryFactoryBeanSupport<T,S,ID>;\npublic class SimpleCouchbaseRepository<T,ID> extends CouchbaseRepositoryBase<T,ID> implements CouchbaseRepository<T,ID>; // Repository base implementation for Couchbase.\npublic class SimpleReactiveCouchbaseRepository<T,ID> extends CouchbaseRepositoryBase<T,ID> implements ReactiveCouchbaseRepository<T,ID>; // Reactive repository base implementation for Couchbase.\npublic class SpringDataCouchbaseQuery<T> extends AbstractCouchbaseQueryDSL<Q> implements com.querydsl.core.Fetchable<T>;\n", "des": "This package contains the Couchbase implementations to support the Spring Data repository abstraction."}
{"index": 1700, "repo": "drill-common-1.21.1", "code": "package common;\n\npackage common.config; // Internal configuration state definitions.\npackage common.exceptions; // Various exceptions used in logical, physical and execution contexts.\npackage common.types; // Logical data types.\npackage common.util; // Utilities useful across packages.\npublic final class AutoCloseablePointer<T extends AutoCloseable> extends Object implements AutoCloseable; // A class similar to Pointer<>, but with features unique to holding AutoCloseable pointers.\npublic class AutoCloseables extends Object; // Utilities for AutoCloseable classes.\npublic static interface AutoCloseables.Closeable extends AutoCloseable;\npublic class CatastrophicFailure extends Object;\npublic class DeferredException extends Object implements AutoCloseable; // Collects one or more exceptions that may occur, using suppressed exceptions.\npublic class DrillAutoCloseables extends Object; // Provides functionality comparable to Guava's Closeables for AutoCloseables.\npublic abstract class EventProcessor<T> extends Object; // Process events serially. Our use of listeners that deliver events directly can sometimes cause problems when events are delivered recursively in the middle of event handling by the same object.\npublic class HistoricalLog extends Object; // Utility class that can be used to log activity within a class for later logging and debugging.\npublic final class KerberosUtil extends Object;\npublic class PlanStringBuilder extends Object; // Builds a string in Drill's \"plan string\" format: that shown in the text version of EXPLAIN PLAN FOR output.\npublic abstract class SelfCleaningRunnable extends Object implements Runnable; // A wrapper for Runnables that provides a hook to do cleanup.\npublic class StackTrace extends Object; // Convenient way of obtaining and manipulating stack traces for debugging.\npublic class Typifier extends Object; // This class attempts to infer the data type of an unknown data type.\npublic final class Version extends Object implements Comparable<Version>; // Encapsulates version information and provides ordering\n", "des": "Logical (execution-engine-independent) element definitions."}
{"index": 1701, "repo": "drill-common-1.21.1", "code": "package config;\n\npublic interface ConfigConstants;\npublic interface ConfigFileInfo; // Interface that defines implementation to get all the config files names for default, module specific, distribution specific and override files.\npublic interface ConfigProvider;\npublic class DrillConfig extends Object;\npublic class DrillExecConfigFileInfo extends Object implements ConfigFileInfo;\npublic final class DrillProperties extends Properties;\npublic class DrillRMConfigFileInfo extends Object implements ConfigFileInfo;\n", "des": "Internal configuration state definitions."}
{"index": 1702, "repo": "drill-common-1.21.1", "code": "package exceptions;\n\npublic class ChildErrorContext extends Object implements CustomErrorContext; // Represents an additional level of error context detail that adds to that provided by some outer context.\npublic interface CustomErrorContext; // Generic mechanism to pass error context throughout the row set mechanism and scan framework.\npublic class DrillConfigurationException extends DrillException;\npublic class DrillError extends Error;\npublic class DrillException extends Exception;\npublic class DrillIOException extends IOException;\npublic class DrillRuntimeException extends RuntimeException;\npublic class EmptyErrorContext extends Object implements CustomErrorContext;\npublic class ErrorHelper extends Object; // Utility class that handles error message generation from protobuf error objects.\npublic class RetryAfterSpillException extends Exception; // Special exception to be caught by caller, who is supposed to free memory by spilling and try again\npublic class UserException extends DrillRuntimeException; // Base class for all user exception.\npublic static class UserException.Builder extends Object; // Builder class for DrillUserException.\npublic class UserExceptionUtils extends Object; // Provides utilities (such as retrieving hints) to add more context to UserExceptions.\npublic class UserRemoteException extends UserException; // Wraps a DrillPBError object so we don't need to rebuilt it multiple times when sending it to the client.\n", "des": "Various exceptions used in logical, physical and execution contexts."}
{"index": 1703, "repo": "drill-common-1.21.1", "code": "package types;\n\npublic enum BooleanType extends Enum<BooleanType>; // Enum that contains two boolean types: TRUE and FALSE.\npublic class Types extends Object;\n", "des": "Logical data types."}
{"index": 1704, "repo": "drill-common-1.21.1", "code": "package util;\n\npublic class ConstructorChecker extends Object;\npublic class DataInputInputStream extends InputStream;\npublic class DataOutputOutputStream extends OutputStream;\npublic class DrillDateTimeFormatter extends Object; // Extends regular Instant.parse(java.lang.CharSequence) with more formats.\npublic class DrillExceptionUtil extends Object; // Utility class which contain methods for conversion Drill ProtoBuf Error and Throwable\npublic class DrillFileUtils extends Object;\npublic class DrillStringUtils extends Object;\npublic class GuavaPatcher extends Object;\npublic class GuavaUtils extends Object; // Utility class which contain methods for conversion guava and shaded guava classes.\npublic class ProtobufPatcher extends Object;\n", "des": "Utilities useful across packages."}
{"index": 1705, "repo": "spring-integration-jmx-6.1.2", "code": "package jmx;\n\npackage jmx.config; // Provides classes for configuration - parsers, namespace handlers.\npublic class AttributePollingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<Object>; // A MessageSource implementation that retrieves the current value of a JMX attribute each time AbstractMessageSource.receive() is invoked.\npublic class DefaultMBeanAttributeFilter extends Object implements MBeanAttributeFilter;\npublic class DefaultMBeanObjectConverter extends Object implements MBeanObjectConverter;\npublic abstract class JmxHeaders extends Object; // Constants for JMX related Message Header keys.\n@FunctionalInterface public interface MBeanAttributeFilter;\n@FunctionalInterface public interface MBeanObjectConverter;\npublic class MBeanTreePollingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<Object>; // A MessageSource implementation that retrieves a snapshot of a filtered subset of the MBean tree.\npublic class NamedFieldsMBeanAttributeFilter extends Object implements MBeanAttributeFilter;\npublic class NotificationListeningMessageProducer extends org.springframework.integration.endpoint.MessageProducerSupport implements NotificationListener, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>; // A JMX NotificationListener implementation that will send Messages containing the JMX Notification instances as their payloads.\npublic class NotificationPublishingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler; // An AbstractMessageHandler implementation to publish an incoming message as a JMX Notification.\n@ManagedResource @IntegrationManagedResource public static class NotificationPublishingMessageHandler.PublisherDelegate extends Object implements org.springframework.jmx.export.notification.NotificationPublisherAware; // Simple class used for the actual MBean instances to be registered.\npublic class NotNamedFieldsMBeanAttributeFilter extends Object implements MBeanAttributeFilter;\npublic class OperationInvokingMessageHandler extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler; // A MessageHandler implementation for invoking JMX operations based on the Message sent to its AbstractMessageHandler.handleMessage(Message) method.\n", "des": "Base package for JMX support."}
{"index": 1706, "repo": "spring-integration-jmx-6.1.2", "code": "package config;\n\npublic class AttributePollingChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser;\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(IntegrationMBeanExportConfiguration.class) public @interface EnableIntegrationMBeanExport; // Enables default exporting for Spring Integration components in an existing application, as well as well all @ManagedResource annotated beans.\n@Configuration(proxyBeanMethods=false) public class IntegrationMBeanExportConfiguration extends Object implements org.springframework.context.annotation.ImportAware, org.springframework.context.EnvironmentAware, org.springframework.beans.factory.BeanFactoryAware; // @Configuration class that registers a IntegrationMBeanExporter bean.\npublic class JmxIntegrationConfigurationInitializer extends Object implements org.springframework.integration.config.IntegrationConfigurationInitializer; // The JMX Integration infrastructure beanFactory initializer.\npublic class JmxNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for Spring Integration's jmx namespace.\npublic class MBeanExporterParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the 'mbean-export' element of the integration JMX namespace.\npublic class MBeanTreePollingChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser;\npublic class NotificationListeningChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser;\npublic class NotificationPublishingChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\npublic class OperationInvokingChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\npublic class OperationInvokingOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 1707, "repo": "spring-integration-jmx-6.1.2", "code": "package monitor;\n\npublic class IntegrationJmxAttributeSource extends org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource; // The AnnotationJmxAttributeSource extension to resolve ManagedResources via IntegrationManagedResource on classes.\n@ManagedResource public class IntegrationMBeanExporter extends org.springframework.jmx.export.MBeanExporter implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor; // MBean exporter for Spring Integration components in an existing application.\n", "des": "Provides classes related to Spring Integration managed resources."}
{"index": 1708, "repo": "spring-boot-test-3.1.1", "code": "package context;\n\npackage context.assertj; // AssertJ support for ApplicationContexts.\npackage context.runner; // Test utilities to run application contexts for testing.\npublic final class AnnotatedClassFinder extends Object; // Utility class to find a class annotated with a particular annotation in a hierarchy.\npublic class ConfigDataApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>; // ApplicationContextInitializer that can be used with the ContextConfiguration.initializers() to trigger loading of ConfigData such as application.properties.\n@FunctionalInterface @Deprecated(since=\"3.0.0\", forRemoval=true) public interface DefaultTestExecutionListenersPostProcessor;\npublic class FilteredClassLoader extends URLClassLoader implements org.springframework.core.SmartClassLoader; // Test URLClassLoader that can filter the classes and resources it can load.\npublic static final class FilteredClassLoader.ClassFilter extends Object implements Predicate<String>; // Filter to restrict the classes that can be loaded.\npublic static final class FilteredClassLoader.ClassPathResourceFilter extends Object implements Predicate<String>; // Filter to restrict the resources that can be loaded.\npublic static final class FilteredClassLoader.PackageFilter extends Object implements Predicate<String>; // Filter to restrict the packages that can be loaded.\npublic class ReactiveWebMergedContextConfiguration extends org.springframework.test.context.MergedContextConfiguration; // Encapsulates the merged context configuration declared on a test class and all of its superclasses for a reactive web application.\npublic class SpringBootContextLoader extends org.springframework.test.context.support.AbstractContextLoader implements org.springframework.test.context.aot.AotContextLoader; // A ContextLoader that can be used to test Spring Boot applications (those that normally startup using SpringApplication).\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @BootstrapWith(SpringBootTestContextBootstrapper.class) @ExtendWith(org.springframework.test.context.junit.jupiter.SpringExtension.class) public @interface SpringBootTest; // Annotation that can be specified on a test class that runs Spring Boot based tests.\n", "des": "Classes and annotations related to configuring Spring's ApplicationContext for tests."}
{"index": 1709, "repo": "spring-boot-test-3.1.1", "code": "package assertj;\n\npublic class ApplicationContextAssert<C extends org.springframework.context.ApplicationContext> extends org.assertj.core.api.AbstractAssert<ApplicationContextAssert<C>,C>; // AssertJ assertions that can be applied to an ApplicationContext.\npublic static enum ApplicationContextAssert.Scope extends Enum<ApplicationContextAssert.Scope>; // The scope of an assertion.\npublic interface ApplicationContextAssertProvider<C extends org.springframework.context.ApplicationContext> extends org.springframework.context.ApplicationContext, org.assertj.core.api.AssertProvider<ApplicationContextAssert<C>>, Closeable; // An ApplicationContext that additionally supports AssertJ style assertions.\npublic interface AssertableApplicationContext extends ApplicationContextAssertProvider<org.springframework.context.ConfigurableApplicationContext>, org.springframework.context.ConfigurableApplicationContext; // An ApplicationContext that additionally supports AssertJ style assertions.\npublic interface AssertableReactiveWebApplicationContext extends ApplicationContextAssertProvider<org.springframework.boot.web.reactive.context.ConfigurableReactiveWebApplicationContext>, org.springframework.boot.web.reactive.context.ConfigurableReactiveWebApplicationContext; // A ReactiveWebApplicationContext that additionally supports AssertJ style assertions.\npublic interface AssertableWebApplicationContext extends ApplicationContextAssertProvider<org.springframework.web.context.ConfigurableWebApplicationContext>, org.springframework.web.context.ConfigurableWebApplicationContext; // A WebApplicationContext that additionally supports AssertJ style assertions.\n", "des": "AssertJ support for ApplicationContexts."}
{"index": 1710, "repo": "spring-boot-test-3.1.1", "code": "package runner;\n\npublic abstract class AbstractApplicationContextRunner<SELF extends AbstractApplicationContextRunner<SELF,C,A>,C extends org.springframework.context.ConfigurableApplicationContext,A extends ApplicationContextAssertProvider<C>> extends Object; // Utility design to run an ApplicationContext and provide AssertJ style assertions.\nprotected static final class AbstractApplicationContextRunner.BeanRegistration<T> extends Object; // A Bean registration to be applied when the context loaded.\nprotected static final class AbstractApplicationContextRunner.RunnerConfiguration<C extends org.springframework.context.ConfigurableApplicationContext> extends Object;\npublic class ApplicationContextRunner extends AbstractApplicationContextRunner<ApplicationContextRunner,org.springframework.context.ConfigurableApplicationContext,AssertableApplicationContext>; // An ApplicationContext runner for a standard, non-web environment ConfigurableApplicationContext.\n@FunctionalInterface public interface ContextConsumer<C extends org.springframework.context.ApplicationContext>; // Callback interface used to process an ApplicationContext with the ability to throw a (checked) exception.\npublic final class ReactiveWebApplicationContextRunner extends AbstractApplicationContextRunner<ReactiveWebApplicationContextRunner,org.springframework.boot.web.reactive.context.ConfigurableReactiveWebApplicationContext,AssertableReactiveWebApplicationContext>; // An ApplicationContext runner for a ConfigurableReactiveWebApplicationContext.\npublic final class WebApplicationContextRunner extends AbstractApplicationContextRunner<WebApplicationContextRunner,org.springframework.web.context.ConfigurableWebApplicationContext,AssertableWebApplicationContext>; // An ApplicationContext runner for a Servlet based ConfigurableWebApplicationContext.\n", "des": "Test utilities to run application contexts for testing."}
{"index": 1711, "repo": "spring-boot-test-3.1.1", "code": "package json;\n\npublic abstract class AbstractJsonMarshalTester<T> extends Object; // Base class for AssertJ based JSON marshal testers.\nprotected abstract static class AbstractJsonMarshalTester.FieldInitializer<M> extends Object; // Utility class used to support field initialization.\npublic class BasicJsonTester extends Object; // AssertJ based JSON tester that works with basic JSON strings.\npublic class GsonTester<T> extends AbstractJsonMarshalTester<T>; // AssertJ based JSON tester backed by Gson.\npublic class JacksonTester<T> extends AbstractJsonMarshalTester<T>; // AssertJ based JSON tester backed by Jackson.\npublic class JsonbTester<T> extends AbstractJsonMarshalTester<T>; // AssertJ based JSON tester backed by Jsonb.\npublic final class JsonContent<T> extends Object implements org.assertj.core.api.AssertProvider<JsonContentAssert>; // JSON content usually created from a JSON tester.\npublic class JsonContentAssert extends org.assertj.core.api.AbstractAssert<JsonContentAssert,CharSequence>; // AssertJ Assert for JsonContent.\npublic final class ObjectContent<T> extends Object implements org.assertj.core.api.AssertProvider<ObjectContentAssert<T>>; // Object content usually created from AbstractJsonMarshalTester.\npublic class ObjectContentAssert<A> extends org.assertj.core.api.AbstractObjectAssert<ObjectContentAssert<A>,A>; // AssertJ Assert for ObjectContent.\n", "des": "Support for testing JSON."}
{"index": 1712, "repo": "spring-boot-test-3.1.1", "code": "package mockito;\n\n@Target({TYPE,FIELD}) @Retention(RUNTIME) @Documented @Repeatable(MockBeans.class) public @interface MockBean; // Annotation that can be used to add mocks to a Spring ApplicationContext.\n@Retention(RUNTIME) @Target(TYPE) @Documented public @interface MockBeans; // Container annotation that aggregates several @MockBean annotations.\npublic class MockitoPostProcessor extends Object implements org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.core.Ordered; // A BeanFactoryPostProcessor used to register and inject @MockBeans with the ApplicationContext.\npublic class MockitoTestExecutionListener extends org.springframework.test.context.support.AbstractTestExecutionListener; // TestExecutionListener to enable @MockBean and @SpyBean support.\npublic enum MockReset extends Enum<MockReset>; // Reset strategy used on a mock bean.\npublic class ResetMocksTestExecutionListener extends org.springframework.test.context.support.AbstractTestExecutionListener; // TestExecutionListener to reset any mock beans that have been marked with a MockReset.\npublic class SpringBootMockResolver extends Object implements org.mockito.plugins.MockResolver; // A MockResolver for testing Spring Boot applications with Mockito.\n@Target({TYPE,FIELD}) @Retention(RUNTIME) @Documented @Repeatable(SpyBeans.class) public @interface SpyBean; // Annotation that can be used to apply Mockito spies to a Spring ApplicationContext.\n@Retention(RUNTIME) @Target(TYPE) @Documented public @interface SpyBeans; // Container annotation that aggregates several @SpyBean annotations.\n", "des": "Mockito integration for Spring Boot tests."}
{"index": 1713, "repo": "spring-boot-test-3.1.1", "code": "package web;\n\npublic class SpringBootMockServletContext extends org.springframework.mock.web.MockServletContext; // MockServletContext implementation for Spring Boot.\n", "des": "Mock web classes specific to Spring Boot."}
{"index": 1714, "repo": "spring-boot-test-3.1.1", "code": "package server;\n\n@Target({FIELD,METHOD,PARAMETER,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Value(\"${local.rsocket.server.port}\") public @interface LocalRSocketServerPort; // Annotation at the field or method/constructor parameter level that injects the RSocket port that was allocated at runtime.\n", "des": "RSocket server test utilities and support classes."}
{"index": 1715, "repo": "spring-boot-test-3.1.1", "code": "package system;\n\npublic interface CapturedOutput extends CharSequence; // Provides access to System.out and System.err output that has been captured by the OutputCaptureExtension or OutputCaptureRule.\npublic class OutputCaptureExtension extends Object implements org.junit.jupiter.api.extension.BeforeAllCallback, org.junit.jupiter.api.extension.AfterAllCallback, org.junit.jupiter.api.extension.BeforeEachCallback, org.junit.jupiter.api.extension.AfterEachCallback, org.junit.jupiter.api.extension.ParameterResolver; // JUnit Jupiter @Extension to capture System.out and System.err.\npublic class OutputCaptureRule extends Object implements org.junit.rules.TestRule, CapturedOutput; // JUnit @Rule to capture output from System.out and System.err.\n", "des": "Classes for System-related testing."}
{"index": 1716, "repo": "spring-boot-test-3.1.1", "code": "package util;\n\npublic abstract class ApplicationContextTestUtils extends Object; // Application context related test utilities.\npublic final class TestPropertyValues extends Object; // Test utilities for adding properties.\npublic static final class TestPropertyValues.Pair extends Object; // A single name value pair.\npublic static enum TestPropertyValues.Type extends Enum<TestPropertyValues.Type>; // The type of property source.\n", "des": "General purpose test utilities."}
{"index": 1717, "repo": "spring-boot-test-3.1.1", "code": "package client;\n\npublic class LocalHostUriTemplateHandler extends org.springframework.boot.web.client.RootUriTemplateHandler; // UriTemplateHandler will automatically prefix relative URIs with localhost:${local.server.port}.\npublic class MockServerRestTemplateCustomizer extends Object implements org.springframework.boot.web.client.RestTemplateCustomizer; // RestTemplateCustomizer that can be applied to a RestTemplateBuilder instances to add MockRestServiceServer support.\npublic class RootUriRequestExpectationManager extends Object implements org.springframework.test.web.client.RequestExpectationManager; // RequestExpectationManager that strips the specified root URI from the request before verification.\npublic class TestRestTemplate extends Object; // Convenient alternative of RestTemplate that is suitable for integration tests.\nprotected static class TestRestTemplate.CustomHttpComponentsClientHttpRequestFactory extends org.springframework.http.client.HttpComponentsClientHttpRequestFactory; // HttpComponentsClientHttpRequestFactory to apply customizations.\npublic static enum TestRestTemplate.HttpClientOption extends Enum<TestRestTemplate.HttpClientOption>; // Options used to customize the Apache HTTP Client.\n", "des": "Web client test utilities."}
{"index": 1718, "repo": "spring-boot-test-3.1.1", "code": "package htmlunit;\n\npackage htmlunit.webdriver; // Selenium support classes.\npublic class LocalHostWebClient extends com.gargoylesoftware.htmlunit.WebClient; // WebClient will automatically prefix relative URLs with localhost:${local.server.port}.\n", "des": "HtmlUnit support classes."}
{"index": 1719, "repo": "spring-boot-test-3.1.1", "code": "package webdriver;\n\npublic class LocalHostWebConnectionHtmlUnitDriver extends org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver; // LocalHostWebConnectionHtmlUnitDriver will automatically prefix relative URLs with localhost:${local.server.port}.\n", "des": "Selenium support classes."}
{"index": 1720, "repo": "spring-boot-test-3.1.1", "code": "package server;\n\n@FunctionalInterface public interface WebTestClientBuilderCustomizer; // A customizer for a WebTestClient.Builder.\n", "des": "Spring Boot support for testing Spring WebFlux server endpoints via WebTestClient."}
{"index": 1721, "repo": "spring-boot-test-3.1.1", "code": "package server;\n\n@Target({FIELD,METHOD,PARAMETER,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Value(\"${local.management.port}\") public @interface LocalManagementPort; // Annotation at the field or method/constructor parameter level that injects the HTTP management port that was allocated at runtime.\n@Target({FIELD,METHOD,PARAMETER,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Value(\"${local.server.port}\") public @interface LocalServerPort; // Annotation at the field or method/constructor parameter level that injects the HTTP server port that was allocated at runtime.\n", "des": "Web server test utilities and support classes."}
{"index": 1722, "repo": "spring-jdbc-6.0.11", "code": "package jdbc;\n\npackage jdbc.config; // Defines the Spring JDBC configuration namespace.\npackage jdbc.core; // Provides the core JDBC framework, based on JdbcTemplate and its associated callback interfaces and helper objects.\npackage jdbc.datasource; // Provides a utility class for easy DataSource access, a PlatformTransactionManager for a single DataSource, and various simple DataSource implementations.\npackage jdbc.object; // The classes in this package represent RDBMS queries, updates, and stored procedures as threadsafe, reusable objects.\npackage jdbc.support; // Support classes for the JDBC framework, used by the classes in the jdbc.core and jdbc.object packages.\npublic class BadSqlGrammarException extends org.springframework.dao.InvalidDataAccessResourceUsageException; // Exception thrown when SQL specified is invalid.\npublic class CannotGetJdbcConnectionException extends org.springframework.dao.DataAccessResourceFailureException; // Fatal exception thrown when we can't connect to an RDBMS using JDBC.\npublic class IncorrectResultSetColumnCountException extends org.springframework.dao.DataRetrievalFailureException; // Data access exception thrown when a result set did not have the correct column count, for example when expecting a single column but getting 0 or more than 1 columns.\npublic class InvalidResultSetAccessException extends org.springframework.dao.InvalidDataAccessResourceUsageException; // Exception thrown when a ResultSet has been accessed in an invalid fashion.\npublic class JdbcUpdateAffectedIncorrectNumberOfRowsException extends org.springframework.dao.IncorrectUpdateSemanticsDataAccessException; // Exception thrown when a JDBC update affects an unexpected number of rows.\npublic class LobRetrievalFailureException extends org.springframework.dao.DataRetrievalFailureException; // Exception to be thrown when a LOB could not be retrieved.\npublic class SQLWarningException extends org.springframework.dao.UncategorizedDataAccessException; // Exception thrown when we're not ignoring SQLWarnings.\npublic class UncategorizedSQLException extends org.springframework.dao.UncategorizedDataAccessException; // Exception thrown when we can't classify an SQLException into one of our generic data access exceptions.\n", "des": "The classes in this package make JDBC easier to use and reduce the likelihood of common errors."}
{"index": 1723, "repo": "spring-jdbc-6.0.11", "code": "package config;\n\npublic class JdbcNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for JDBC configuration namespace.\npublic class SortedResourcesFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<org.springframework.core.io.Resource[]> implements org.springframework.context.ResourceLoaderAware; // FactoryBean implementation that takes a list of location Strings and creates a sorted array of Resource instances.\n", "des": "Defines the Spring JDBC configuration namespace."}
{"index": 1724, "repo": "spring-jdbc-6.0.11", "code": "package core;\n\npackage core.metadata; // Context metadata abstraction for the configuration and execution of table inserts and stored procedure calls.\npackage core.namedparam; // JdbcTemplate variant with named parameter support.\npackage core.simple; // Simplification layer for table inserts and stored procedure calls.\npackage core.support; // Classes supporting the org.springframework.jdbc.core package.\npublic class ArgumentPreparedStatementSetter extends Object implements PreparedStatementSetter, ParameterDisposer; // Simple adapter for PreparedStatementSetter that applies a given array of arguments.\npublic class ArgumentTypePreparedStatementSetter extends Object implements PreparedStatementSetter, ParameterDisposer; // Simple adapter for PreparedStatementSetter that applies given arrays of arguments and JDBC argument types.\npublic interface BatchPreparedStatementSetter; // Batch update callback interface used by the JdbcTemplate class.\npublic class BeanPropertyRowMapper<T> extends Object implements RowMapper<T>; // RowMapper implementation that converts a row into a new instance of the specified mapped target class.\n@FunctionalInterface public interface CallableStatementCallback<T>; // Generic callback interface for code that operates on a CallableStatement.\n@FunctionalInterface public interface CallableStatementCreator; // One of the three central callback interfaces used by the JdbcTemplate class.\npublic class CallableStatementCreatorFactory extends Object; // Helper class that efficiently creates multiple CallableStatementCreator objects with different parameters based on an SQL statement and a single set of parameter declarations.\npublic class ColumnMapRowMapper extends Object implements RowMapper<Map<String,Object>>; // RowMapper implementation that creates a java.util.Map for each row, representing all columns as key-value pairs: one entry for each column, with the column name as key.\n@FunctionalInterface public interface ConnectionCallback<T>; // Generic callback interface for code that operates on a JDBC Connection.\npublic class DataClassRowMapper<T> extends BeanPropertyRowMapper<T>; // RowMapper implementation that converts a row into a new instance of the specified mapped target class.\npublic interface DisposableSqlTypeValue extends SqlTypeValue; // Subinterface of SqlTypeValue that adds a cleanup callback, to be invoked after the value has been set and the corresponding statement has been executed.\npublic interface InterruptibleBatchPreparedStatementSetter extends BatchPreparedStatementSetter; // Extension of the BatchPreparedStatementSetter interface, adding a batch exhaustion check.\n", "des": "Provides the core JDBC framework, based on JdbcTemplate and its associated callback interfaces and helper objects."}
{"index": 1725, "repo": "spring-jdbc-6.0.11", "code": "package metadata;\n\npublic class CallMetaDataContext extends Object; // Class to manage context meta-data used for the configuration and execution of a stored procedure call.\npublic interface CallMetaDataProvider; // Interface specifying the API to be implemented by a class providing call meta-data.\npublic final class CallMetaDataProviderFactory extends Object; // Factory used to create a CallMetaDataProvider implementation based on the type of database being used.\npublic class CallParameterMetaData extends Object; // Holder of meta-data for a specific parameter that is used for call processing.\npublic class Db2CallMetaDataProvider extends GenericCallMetaDataProvider; // DB2 specific implementation for the CallMetaDataProvider interface.\npublic class DerbyCallMetaDataProvider extends GenericCallMetaDataProvider; // Derby specific implementation for the CallMetaDataProvider interface.\npublic class DerbyTableMetaDataProvider extends GenericTableMetaDataProvider; // The Derby specific implementation of TableMetaDataProvider.\npublic class GenericCallMetaDataProvider extends Object implements CallMetaDataProvider; // A generic implementation of the CallMetaDataProvider interface.\npublic class GenericTableMetaDataProvider extends Object implements TableMetaDataProvider; // A generic implementation of the TableMetaDataProvider interface which should provide enough features for all supported databases.\npublic class HanaCallMetaDataProvider extends GenericCallMetaDataProvider; // SAP HANA specific implementation for the CallMetaDataProvider interface.\npublic class HsqlTableMetaDataProvider extends GenericTableMetaDataProvider; // The HSQL specific implementation of TableMetaDataProvider.\npublic class OracleCallMetaDataProvider extends GenericCallMetaDataProvider; // Oracle-specific implementation for the CallMetaDataProvider interface.\npublic class OracleTableMetaDataProvider extends GenericTableMetaDataProvider; // Oracle-specific implementation of the TableMetaDataProvider.\npublic class PostgresCallMetaDataProvider extends GenericCallMetaDataProvider; // Postgres-specific implementation for the CallMetaDataProvider interface.\npublic class PostgresTableMetaDataProvider extends GenericTableMetaDataProvider; // The PostgreSQL specific implementation of TableMetaDataProvider.\npublic class SqlServerCallMetaDataProvider extends GenericCallMetaDataProvider; // SQL Server specific implementation for the CallMetaDataProvider interface.\npublic class SybaseCallMetaDataProvider extends GenericCallMetaDataProvider; // Sybase specific implementation for the CallMetaDataProvider interface.\npublic class TableMetaDataContext extends Object; // Class to manage context meta-data used for the configuration and execution of operations on a database table.\npublic interface TableMetaDataProvider; // Interface specifying the API to be implemented by a class providing table meta-data.\n", "des": "Context metadata abstraction for the configuration and execution of table inserts and stored procedure calls."}
{"index": 1726, "repo": "spring-jdbc-6.0.11", "code": "package namedparam;\n\npublic abstract class AbstractSqlParameterSource extends Object implements SqlParameterSource; // Abstract base class for SqlParameterSource implementations.\npublic class BeanPropertySqlParameterSource extends AbstractSqlParameterSource; // SqlParameterSource implementation that obtains parameter values from bean properties of a given JavaBean object.\npublic class EmptySqlParameterSource extends Object implements SqlParameterSource; // A simple empty implementation of the SqlParameterSource interface.\npublic class MapSqlParameterSource extends AbstractSqlParameterSource; // SqlParameterSource implementation that holds a given Map of parameters.\npublic class NamedParameterJdbcDaoSupport extends JdbcDaoSupport; // Extension of JdbcDaoSupport that exposes a NamedParameterJdbcTemplate as well.\npublic interface NamedParameterJdbcOperations; // Interface specifying a basic set of JDBC operations allowing the use of named parameters rather than the traditional '?' placeholders.\npublic class NamedParameterJdbcTemplate extends Object implements NamedParameterJdbcOperations; // Template class with a basic set of JDBC operations, allowing the use of named parameters rather than traditional '?' placeholders.\npublic abstract class NamedParameterUtils extends Object; // Helper methods for named parameter parsing.\npublic class ParsedSql extends Object; // Holds information about a parsed SQL statement.\npublic interface SqlParameterSource; // Interface that defines common functionality for objects that can offer parameter values for named SQL parameters, serving as argument for NamedParameterJdbcTemplate operations.\npublic abstract class SqlParameterSourceUtils extends Object; // Class that provides helper methods for the use of SqlParameterSource, in particular with NamedParameterJdbcTemplate.\n", "des": "JdbcTemplate variant with named parameter support."}
{"index": 1727, "repo": "spring-jdbc-6.0.11", "code": "package simple;\n\npublic abstract class AbstractJdbcCall extends Object; // Abstract class to provide base functionality for easy stored procedure calls based on configuration options and database meta-data.\npublic abstract class AbstractJdbcInsert extends Object; // Abstract class to provide base functionality for easy inserts based on configuration options and database meta-data.\npublic class SimpleJdbcCall extends AbstractJdbcCall implements SimpleJdbcCallOperations; // A SimpleJdbcCall is a multithreaded, reusable object representing a call to a stored procedure or a stored function.\npublic interface SimpleJdbcCallOperations; // Interface specifying the API for a Simple JDBC Call implemented by SimpleJdbcCall.\npublic class SimpleJdbcInsert extends AbstractJdbcInsert implements SimpleJdbcInsertOperations; // A SimpleJdbcInsert is a multithreaded, reusable object providing easy insert capabilities for a table.\npublic interface SimpleJdbcInsertOperations; // Interface specifying the API for a Simple JDBC Insert implemented by SimpleJdbcInsert.\n", "des": "Simplification layer for table inserts and stored procedure calls."}
{"index": 1728, "repo": "spring-jdbc-6.0.11", "code": "package support;\n\npublic abstract class AbstractInterruptibleBatchPreparedStatementSetter extends Object implements InterruptibleBatchPreparedStatementSetter; // Abstract implementation of the InterruptibleBatchPreparedStatementSetter interface, combining the check for available values and setting of those into a single callback method AbstractInterruptibleBatchPreparedStatementSetter.setValuesIfAvailable(java.sql.PreparedStatement, int).\npublic abstract class AbstractLobCreatingPreparedStatementCallback extends Object implements PreparedStatementCallback<Integer>; // Abstract PreparedStatementCallback implementation that manages a LobCreator.\npublic abstract class AbstractLobStreamingResultSetExtractor<T> extends Object implements ResultSetExtractor<T>; // Abstract ResultSetExtractor implementation that assumes streaming of LOB data.\npublic abstract class AbstractSqlTypeValue extends Object implements SqlTypeValue; // Abstract implementation of the SqlTypeValue interface, for convenient creation of type values that are supposed to be passed into the PreparedStatement.setObject method.\n@Deprecated public class JdbcBeanDefinitionReader extends Object;\npublic abstract class JdbcDaoSupport extends org.springframework.dao.support.DaoSupport; // Convenient superclass for JDBC-based data access objects.\npublic class SqlLobValue extends Object implements DisposableSqlTypeValue; // Object to represent an SQL BLOB/CLOB value parameter.\n", "des": "Classes supporting the org.springframework.jdbc.core package."}
{"index": 1729, "repo": "spring-jdbc-6.0.11", "code": "package datasource;\n\npackage datasource.embedded; // Provides extensible support for creating embedded database instances.\npackage datasource.init; // Provides extensible support for initializing databases through scripts.\npackage datasource.lookup; // Provides a strategy for looking up JDBC DataSources by name.\npublic abstract class AbstractDataSource extends Object implements DataSource; // Abstract base class for Spring's DataSource implementations, taking care of the padding.\npublic abstract class AbstractDriverBasedDataSource extends AbstractDataSource; // Abstract base class for JDBC DataSource implementations that operate on a JDBC Driver.\n@FunctionalInterface public interface ConnectionHandle; // Simple interface to be implemented by handles for a JDBC Connection.\npublic class ConnectionHolder extends org.springframework.transaction.support.ResourceHolderSupport; // Resource holder wrapping a JDBC Connection.\npublic interface ConnectionProxy extends Connection; // Subinterface of Connection to be implemented by Connection proxies.\npublic class DataSourceTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.support.ResourceTransactionManager, org.springframework.beans.factory.InitializingBean; // PlatformTransactionManager implementation for a single JDBC DataSource.\npublic abstract class DataSourceUtils extends Object; // Helper class that provides static methods for obtaining JDBC Connections from a DataSource.\npublic class DelegatingDataSource extends Object implements DataSource, org.springframework.beans.factory.InitializingBean; // JDBC DataSource implementation that delegates all calls to a given target DataSource.\npublic class DriverManagerDataSource extends AbstractDriverBasedDataSource; // Simple implementation of the standard JDBC DataSource interface, configuring the plain old JDBC DriverManager via bean properties, and returning a new Connection from every getConnection call.\npublic class IsolationLevelDataSourceAdapter extends UserCredentialsDataSourceAdapter; // An adapter for a target DataSource, applying the current Spring transaction's isolation level (and potentially specified user credentials) to every getConnection call.\npublic abstract class JdbcTransactionObjectSupport extends Object implements org.springframework.transaction.SavepointManager, org.springframework.transaction.support.SmartTransactionObject; // Convenient base class for JDBC-aware transaction objects.\npublic class LazyConnectionDataSourceProxy extends DelegatingDataSource; // Proxy for a target DataSource, fetching actual JDBC Connections lazily, i.e.\npublic class SimpleConnectionHandle extends Object implements ConnectionHandle; // Simple implementation of the ConnectionHandle interface, containing a given JDBC Connection.\n", "des": "Provides a utility class for easy DataSource access, a PlatformTransactionManager for a single DataSource, and various simple DataSource implementations."}
{"index": 1730, "repo": "spring-jdbc-6.0.11", "code": "package embedded;\n\npublic interface ConnectionProperties; // ConnectionProperties serves as a simple data container that allows essential JDBC connection properties to be configured consistently, independent of the actual DataSource implementation.\npublic interface DataSourceFactory; // DataSourceFactory encapsulates the creation of a particular DataSource implementation such as a non-pooling SimpleDriverDataSource or a HikariCP pool setup in the shape of a HikariDataSource.\npublic interface EmbeddedDatabase extends DataSource; // EmbeddedDatabase serves as a handle to an embedded database instance.\npublic class EmbeddedDatabaseBuilder extends Object; // A builder that provides a convenient API for constructing an embedded database.\npublic interface EmbeddedDatabaseConfigurer; // EmbeddedDatabaseConfigurer encapsulates the configuration required to create, connect to, and shut down a specific type of embedded database such as HSQL, H2, or Derby.\npublic class EmbeddedDatabaseFactory extends Object; // Factory for creating an EmbeddedDatabase instance.\npublic class EmbeddedDatabaseFactoryBean extends EmbeddedDatabaseFactory implements org.springframework.beans.factory.FactoryBean<DataSource>, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // A subclass of EmbeddedDatabaseFactory that implements FactoryBean for registration as a Spring bean.\npublic enum EmbeddedDatabaseType extends Enum<EmbeddedDatabaseType>; // A supported embedded database type.\npublic final class OutputStreamFactory extends Object; // Internal helper for exposing dummy OutputStreams to embedded databases such as Derby, preventing the creation of a log file.\n", "des": "Provides extensible support for creating embedded database instances."}
{"index": 1731, "repo": "spring-jdbc-6.0.11", "code": "package init;\n\npublic class CannotReadScriptException extends ScriptException; // Thrown by ScriptUtils if an SQL script cannot be read.\npublic class CompositeDatabasePopulator extends Object implements DatabasePopulator; // Composite DatabasePopulator that delegates to a list of given DatabasePopulator implementations, executing all scripts.\n@FunctionalInterface public interface DatabasePopulator; // Strategy used to populate, initialize, or clean up a database.\npublic abstract class DatabasePopulatorUtils extends Object; // Utility methods for executing a DatabasePopulator.\npublic class DataSourceInitializer extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Used to set up a database during initialization and clean up a database during destruction.\npublic class ResourceDatabasePopulator extends Object implements DatabasePopulator; // Populates, initializes, or cleans up a database using SQL scripts defined in external resources.\npublic abstract class ScriptException extends org.springframework.dao.DataAccessException; // Root of the hierarchy of data access exceptions that are related to processing of SQL scripts.\npublic class ScriptParseException extends ScriptException; // Thrown by ScriptUtils if an SQL script cannot be properly parsed.\npublic class ScriptStatementFailedException extends ScriptException; // Thrown by ScriptUtils if a statement in an SQL script failed when executing it against the target database.\npublic abstract class ScriptUtils extends Object; // Generic utility methods for working with SQL scripts in conjunction with JDBC.\npublic class UncategorizedScriptException extends ScriptException; // Thrown when we cannot determine anything more specific than \"something went wrong while processing an SQL script\": for example, a SQLException from JDBC that we cannot pinpoint more precisely.\n", "des": "Provides extensible support for initializing databases through scripts."}
{"index": 1732, "repo": "spring-jdbc-6.0.11", "code": "package lookup;\n\npublic abstract class AbstractRoutingDataSource extends AbstractDataSource implements org.springframework.beans.factory.InitializingBean; // Abstract DataSource implementation that routes AbstractRoutingDataSource.getConnection() calls to one of various target DataSources based on a lookup key.\npublic class BeanFactoryDataSourceLookup extends Object implements DataSourceLookup, org.springframework.beans.factory.BeanFactoryAware; // DataSourceLookup implementation based on a Spring BeanFactory.\n@FunctionalInterface public interface DataSourceLookup; // Strategy interface for looking up DataSources by name.\npublic class DataSourceLookupFailureException extends org.springframework.dao.NonTransientDataAccessException; // Exception to be thrown by a DataSourceLookup implementation, indicating that the specified DataSource could not be obtained.\npublic class IsolationLevelDataSourceRouter extends AbstractRoutingDataSource; // DataSource that routes to one of various target DataSources based on the current transaction isolation level.\npublic class JndiDataSourceLookup extends org.springframework.jndi.JndiLocatorSupport implements DataSourceLookup; // JNDI-based DataSourceLookup implementation.\npublic class MapDataSourceLookup extends Object implements DataSourceLookup; // Simple DataSourceLookup implementation that relies on a map for doing lookups.\npublic class SingleDataSourceLookup extends Object implements DataSourceLookup; // An implementation of the DataSourceLookup that simply wraps a single given DataSource, returned for any data source name.\n", "des": "Provides a strategy for looking up JDBC DataSources by name."}
{"index": 1733, "repo": "spring-jdbc-6.0.11", "code": "package object;\n\npublic class BatchSqlUpdate extends SqlUpdate; // SqlUpdate subclass that performs batch update operations.\npublic class GenericSqlQuery<T> extends SqlQuery<T>; // A concrete variant of SqlQuery which can be configured with a RowMapper.\npublic class GenericStoredProcedure extends StoredProcedure; // Concrete implementation making it possible to define the RDBMS stored procedures in an application context without writing a custom Java implementation class.\npublic abstract class MappingSqlQuery<T> extends MappingSqlQueryWithParameters<T>; // Reusable query in which concrete subclasses must implement the abstract mapRow(ResultSet, int) method to convert each row of the JDBC ResultSet into an object.\npublic abstract class MappingSqlQueryWithParameters<T> extends SqlQuery<T>; // Reusable RDBMS query in which concrete subclasses must implement the abstract mapRow(ResultSet, int) method to map each row of the JDBC ResultSet into an object.\npublic abstract class RdbmsOperation extends Object implements org.springframework.beans.factory.InitializingBean; // An \"RDBMS operation\" is a multithreaded, reusable object representing a query, update, or stored procedure call.\npublic abstract class SqlCall extends RdbmsOperation; // RdbmsOperation using a JdbcTemplate and representing an SQL-based call such as a stored procedure or a stored function.\npublic class SqlFunction<T> extends MappingSqlQuery<T>; // SQL \"function\" wrapper for a query that returns a single row of results.\npublic abstract class SqlOperation extends RdbmsOperation; // Operation object representing an SQL-based operation such as a query or update, as opposed to a stored procedure.\npublic abstract class SqlQuery<T> extends SqlOperation; // Reusable operation object representing an SQL query.\npublic class SqlUpdate extends SqlOperation; // Reusable operation object representing an SQL update.\npublic abstract class StoredProcedure extends SqlCall; // Superclass for object abstractions of RDBMS stored procedures.\npublic abstract class UpdatableSqlQuery<T> extends SqlQuery<T>; // Reusable RDBMS query in which concrete subclasses must implement the abstract updateRow(ResultSet, int, context) method to update each row of the JDBC ResultSet and optionally map contents into an object.\n", "des": "The classes in this package represent RDBMS queries, updates, and stored procedures as threadsafe, reusable objects."}
{"index": 1734, "repo": "spring-jdbc-6.0.11", "code": "package support;\n\npackage support.incrementer; // Provides a support framework for incrementing database table values via sequences, with implementations for various databases.\npackage support.lob; // Provides a strategy interface for Large OBject handling, as well as a customizable default implementation.\npackage support.rowset; // Provides a convenient holder for disconnected result sets.\npackage support.xml; // Abstraction for handling fields of SQLXML data type.\npublic abstract class AbstractFallbackSQLExceptionTranslator extends Object implements SQLExceptionTranslator; // Base class for SQLExceptionTranslator implementations that allow for fallback to some other SQLExceptionTranslator.\npublic class CustomSQLErrorCodesTranslation extends Object; // JavaBean for holding custom JDBC error codes translation for a particular database.\npublic class CustomSQLExceptionTranslatorRegistrar extends Object implements org.springframework.beans.factory.InitializingBean; // Registry for custom SQLExceptionTranslator instances for specific databases.\npublic final class CustomSQLExceptionTranslatorRegistry extends Object; // Registry for custom SQLExceptionTranslator instances associated with specific databases allowing for overriding translation based on values contained in the configuration file named \"sql-error-codes.xml\".\n@FunctionalInterface public interface DatabaseMetaDataCallback<T>; // A callback interface used by the JdbcUtils class.\npublic class DatabaseStartupValidator extends Object implements org.springframework.beans.factory.InitializingBean; // Bean that checks if a database has already started up.\npublic class GeneratedKeyHolder extends Object implements KeyHolder; // The standard implementation of the KeyHolder interface, to be used for holding auto-generated keys (as potentially returned by JDBC insert statements).\npublic abstract class JdbcAccessor extends Object implements org.springframework.beans.factory.InitializingBean; // Base class for JdbcTemplate and other JDBC-accessing DAO helpers, defining common properties such as DataSource and exception translator.\npublic class JdbcTransactionManager extends DataSourceTransactionManager; // JdbcAccessor-aligned subclass of the plain DataSourceTransactionManager, adding common JDBC exception translation for the commit and rollback step.\npublic abstract class JdbcUtils extends Object; // Generic utility methods for working with JDBC.\npublic interface KeyHolder; // Interface for retrieving keys, typically used for auto-generated keys as potentially returned by JDBC insert statements.\npublic class MetaDataAccessException extends org.springframework.core.NestedCheckedException; // Exception indicating that something went wrong during JDBC meta-data lookup.\n", "des": "Support classes for the JDBC framework, used by the classes in the jdbc.core and jdbc.object packages."}
{"index": 1735, "repo": "spring-jdbc-6.0.11", "code": "package incrementer;\n\npublic abstract class AbstractColumnMaxValueIncrementer extends AbstractDataFieldMaxValueIncrementer; // Abstract base class for DataFieldMaxValueIncrementer implementations that use a column in a custom sequence table.\npublic abstract class AbstractDataFieldMaxValueIncrementer extends Object implements DataFieldMaxValueIncrementer, org.springframework.beans.factory.InitializingBean; // Base implementation of DataFieldMaxValueIncrementer that delegates to a single AbstractDataFieldMaxValueIncrementer.getNextKey() template method that returns a long.\npublic abstract class AbstractIdentityColumnMaxValueIncrementer extends AbstractColumnMaxValueIncrementer; // Abstract base class for DataFieldMaxValueIncrementer implementations which are based on identity columns in a sequence-like table.\npublic abstract class AbstractSequenceMaxValueIncrementer extends AbstractDataFieldMaxValueIncrementer; // Abstract base class for DataFieldMaxValueIncrementer implementations that use a database sequence.\npublic interface DataFieldMaxValueIncrementer; // Interface that defines contract of incrementing any data store field's maximum value.\npublic class Db2LuwMaxValueIncrementer extends AbstractSequenceMaxValueIncrementer; // DataFieldMaxValueIncrementer that retrieves the next value of a given sequence on DB2 LUW (for Linux, Unix and Windows).\npublic class Db2MainframeMaxValueIncrementer extends AbstractSequenceMaxValueIncrementer; // DataFieldMaxValueIncrementer that retrieves the next value of a given sequence on DB2 for the mainframe (z/OS, DB2/390, DB2/400).\npublic class DerbyMaxValueIncrementer extends AbstractIdentityColumnMaxValueIncrementer; // DataFieldMaxValueIncrementer that increments the maximum value of a given Derby table with the equivalent of an auto-increment column.\npublic class H2SequenceMaxValueIncrementer extends AbstractSequenceMaxValueIncrementer; // DataFieldMaxValueIncrementer that retrieves the next value of a given H2 sequence.\npublic class HanaSequenceMaxValueIncrementer extends AbstractSequenceMaxValueIncrementer; // DataFieldMaxValueIncrementer that retrieves the next value of a given SAP HANA sequence.\npublic class HsqlMaxValueIncrementer extends AbstractIdentityColumnMaxValueIncrementer; // DataFieldMaxValueIncrementer that increments the maximum value of a given HSQL table with the equivalent of an auto-increment column.\n", "des": "Provides a support framework for incrementing database table values via sequences, with implementations for various databases."}
{"index": 1736, "repo": "spring-jdbc-6.0.11", "code": "package lob;\n\npublic abstract class AbstractLobHandler extends Object implements LobHandler; // Abstract base class for LobHandler implementations.\npublic class DefaultLobHandler extends AbstractLobHandler; // Default implementation of the LobHandler interface.\npublic interface LobCreator extends Closeable; // Interface that abstracts potentially database-specific creation of large binary fields and large text fields.\npublic interface LobHandler; // Abstraction for handling large binary fields and large text fields in specific databases, no matter if represented as simple types or Large OBjects.\npublic class TemporaryLobCreator extends Object implements LobCreator; // LobCreator implementation based on temporary LOBs, using JDBC 4.0's Connection.createBlob() / Connection.createClob() mechanism.\n", "des": "Provides a strategy interface for Large OBject handling, as well as a customizable default implementation."}
{"index": 1737, "repo": "spring-jdbc-6.0.11", "code": "package rowset;\n\npublic class ResultSetWrappingSqlRowSet extends Object implements SqlRowSet; // The default implementation of Spring's SqlRowSet interface, wrapping a ResultSet, catching any SQLExceptions and translating them to a corresponding Spring InvalidResultSetAccessException.\npublic class ResultSetWrappingSqlRowSetMetaData extends Object implements SqlRowSetMetaData; // The default implementation of Spring's SqlRowSetMetaData interface, wrapping a ResultSetMetaData instance, catching any SQLExceptions and translating them to a corresponding Spring InvalidResultSetAccessException.\npublic interface SqlRowSet extends Serializable; // Mirror interface for RowSet, representing a disconnected variant of ResultSet data.\npublic interface SqlRowSetMetaData; // Metadata interface for Spring's SqlRowSet, analogous to JDBC's ResultSetMetaData.\n", "des": "Provides a convenient holder for disconnected result sets."}
{"index": 1738, "repo": "spring-jdbc-6.0.11", "code": "package xml;\n\npublic class Jdbc4SqlXmlHandler extends Object implements SqlXmlHandler; // Default implementation of the SqlXmlHandler interface.\npublic class SqlXmlFeatureNotImplementedException extends org.springframework.dao.InvalidDataAccessApiUsageException; // Exception thrown when the underlying implementation does not support the requested feature of the API.\npublic interface SqlXmlHandler; // Abstraction for handling XML fields in specific databases.\npublic interface SqlXmlValue extends SqlValue; // Subinterface of SqlValue that supports passing in XML data to specified column and adds a cleanup callback, to be invoked after the value has been set and the corresponding statement has been executed.\npublic interface XmlBinaryStreamProvider; // Interface defining handling involved with providing OutputStream data for XML input.\npublic interface XmlCharacterStreamProvider; // Interface defining handling involved with providing Writer data for XML input.\npublic interface XmlResultProvider; // Interface defining handling involved with providing Result data for XML input.\n", "des": "Abstraction for handling fields of SQLXML data type."}
{"index": 1739, "repo": "spring-batch-integration-5.0.2", "code": "package async;\n\npublic class AsyncItemProcessor<I,O> extends Object implements org.springframework.batch.item.ItemProcessor<I,Future<O>>, org.springframework.beans.factory.InitializingBean; // An ItemProcessor that delegates to a nested processor and in the background.\npublic class AsyncItemWriter<T> extends Object implements org.springframework.batch.item.ItemStreamWriter<Future<T>>, org.springframework.beans.factory.InitializingBean;\npublic class StepExecutionInterceptor extends Object implements org.springframework.messaging.support.ChannelInterceptor; // A ChannelInterceptor that adds the current StepExecution (if there is one) as a header to the message.\n", "des": "Components for executing item processing asynchronously and writing the results when processing is complete."}
{"index": 1740, "repo": "spring-batch-integration-5.0.2", "code": "package chunk;\n\npublic class AsynchronousFailureException extends org.springframework.batch.item.ItemWriterException; // Exception indicating that a failure or early completion condition was detected in a remote worker.\npublic interface ChunkHandler<T>; // Interface for a remote worker in the Remote Chunking pattern.\npublic class ChunkMessageChannelItemWriter<T> extends Object implements StepExecutionListener, org.springframework.batch.item.ItemWriter<T>, org.springframework.batch.item.ItemStream, StepContributionSource;\nprotected static class ChunkMessageChannelItemWriter.LocalState extends Object;\n@MessageEndpoint public class ChunkProcessorChunkHandler<S> extends Object implements ChunkHandler<S>, org.springframework.beans.factory.InitializingBean; // A ChunkHandler based on a ChunkProcessor.\npublic class ChunkRequest<T> extends Object implements Serializable; // Encapsulation of a chunk of items to be processed remotely as part of a step execution.\npublic class ChunkResponse extends Object implements Serializable; // Encapsulates a response to processing a chunk of items, summarising the result as a StepContribution.\npublic class JmsRedeliveredExtractor extends Object;\npublic class MessageSourcePollerInterceptor extends Object implements org.springframework.messaging.support.ChannelInterceptor, org.springframework.beans.factory.InitializingBean; // A ChannelInterceptor that turns a pollable channel into a \"pass-thru channel\": if a client calls receive() on the channel it will delegate to a MessageSource to pull the message directly from an external source.\npublic class RemoteChunkHandlerFactoryBean<T> extends Object implements org.springframework.beans.factory.FactoryBean<ChunkHandler<T>>; // Convenient factory bean for a chunk handler that also converts an existing chunk-oriented step into a remote chunk manager.\npublic class RemoteChunkingManagerStepBuilder<I,O> extends FaultTolerantStepBuilder<I,O>; // Builder for a manager step in a remote chunking setup.\npublic class RemoteChunkingManagerStepBuilderFactory extends Object; // Convenient factory for a RemoteChunkingManagerStepBuilder which sets the JobRepository and PlatformTransactionManager automatically.\npublic class RemoteChunkingWorkerBuilder<I,O> extends Object; // Builder for a worker in a remote chunking setup.\n", "des": "Components for remote chunking."}
{"index": 1741, "repo": "spring-batch-integration-5.0.2", "code": "package annotation;\n\n@Configuration(proxyBeanMethods=false) public class BatchIntegrationConfiguration extends Object implements org.springframework.beans.factory.InitializingBean; // Base configuration class for Spring Batch Integration factory beans.\n@Target(TYPE) @Retention(RUNTIME) @Documented @EnableIntegration @Import(BatchIntegrationConfiguration.class) public @interface EnableBatchIntegration; // Enable Spring Batch Integration features and provide a base configuration for setting up remote chunking or partitioning infrastructure beans.\n", "des": "APIs for the configuration of Spring Integration components through annotations."}
{"index": 1742, "repo": "spring-batch-integration-5.0.2", "code": "package xml;\n\npublic class BatchIntegrationNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // The namespace handler for the Spring Batch Integration namespace.\npublic class JobLaunchingGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // The parser for the Job-Launching Gateway, which will instantiate a JobLaunchingGatewayParser.\npublic class RemoteChunkingManagerParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser; // Parser for the remote-chunking-manager namespace element.\npublic class RemoteChunkingWorkerParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser; // Parser for the remote-chunking-worker namespace element.\n", "des": "APIs for the configuration of Spring Integration components through XML."}
{"index": 1743, "repo": "spring-batch-integration-5.0.2", "code": "package launch;\n\npublic class JobLaunchingGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler; // The JobLaunchingGateway is used to launch Batch Jobs.\npublic class JobLaunchingMessageHandler extends Object implements JobLaunchRequestHandler; // Message handler which uses strategies to convert a Message into a job and a set of job parameters\npublic class JobLaunchRequest extends Object; // Encapsulation of a Job and its JobParameters forming a request for a job to be launched.\npublic interface JobLaunchRequestHandler; // Interface for handling a JobLaunchRequest and returning a JobExecution.\n", "des": "Message based job launching components."}
{"index": 1744, "repo": "spring-batch-integration-5.0.2", "code": "package partition;\n\npublic class BeanFactoryStepLocator extends Object implements StepLocator, org.springframework.beans.factory.BeanFactoryAware; // A StepLocator implementation that just looks in its enclosing bean factory for components of type Step.\n@MessageEndpoint public class MessageChannelPartitionHandler extends AbstractPartitionHandler implements org.springframework.beans.factory.InitializingBean; // A PartitionHandler that uses MessageChannel instances to send instructions to remote workers and receive their responses.\npublic class RemotePartitioningManagerStepBuilder extends PartitionStepBuilder; // Builder for a manager step in a remote partitioning setup.\npublic class RemotePartitioningManagerStepBuilderFactory extends Object implements org.springframework.beans.factory.BeanFactoryAware; // Convenient factory for a RemotePartitioningManagerStepBuilder which sets the JobRepository, JobExplorer, BeanFactory and PlatformTransactionManager automatically.\npublic class RemotePartitioningWorkerStepBuilder extends StepBuilder; // Builder for a worker step in a remote partitioning setup.\npublic class RemotePartitioningWorkerStepBuilderFactory extends Object implements org.springframework.beans.factory.BeanFactoryAware; // Convenient factory for a RemotePartitioningWorkerStepBuilder which sets the JobRepository, JobExplorer, BeanFactory and PlatformTransactionManager automatically.\npublic class StepExecutionRequest extends Object implements Serializable; // Class encapsulating information required to request a step execution in a remote partitioning setup.\n@MessageEndpoint public class StepExecutionRequestHandler extends Object; // A MessageEndpoint that can handle a StepExecutionRequest and return a StepExecution as the result.\n", "des": "Remote partitioning components."}
{"index": 1745, "repo": "spring-batch-integration-5.0.2", "code": "package step;\n\n@Deprecated(since=\"5.0\", forRemoval=true) public class DelegateStep extends AbstractStep;\n", "des": "Support classes related to steps when used with Spring Integration."}
{"index": 1746, "repo": "spring-data-mongodb-4.1.2", "code": "package mongodb;\n\npackage mongodb.config; // Spring XML namespace configuration for MongoDB specific repositories.\npackage mongodb.core; // MongoDB core support.\npackage mongodb.gridfs; // Support for MongoDB GridFS feature.\npackage mongodb.monitor; // MongoDB specific JMX monitoring support.\npackage mongodb.observability; // Infrastructure to provide driver observability using Micrometer.\npackage mongodb.repository; // MongoDB specific repository implementation.\npackage mongodb.util; // MongoDB driver-specific utility classes for Bson and DBObject interaction.\npublic class BindableMongoExpression extends Object implements MongoExpression; // A MongoExpression using the ParameterBindingDocumentCodec for parsing a raw (json) expression.\npublic class BulkOperationException extends DataAccessException; // Is thrown when errors occur during bulk operations.\npublic class ClientSessionException extends NonTransientDataAccessException; // NonTransientDataAccessException specific to MongoDB ClientSession related data access failures such as reading data using an already closed session.\n@FunctionalInterface public interface CodecRegistryProvider; // Provider interface to obtain CodecRegistry from the underlying MongoDB Java driver.\npublic class InvalidMongoDbApiUsageException extends InvalidDataAccessApiUsageException;\npublic class LazyLoadingException extends UncategorizedDataAccessException;\npublic abstract class MongoCollectionUtils extends Object; // Helper class featuring helper methods for working with MongoDb collections.\npublic interface MongoDatabaseFactory extends CodecRegistryProvider, MongoSessionProvider; // Interface for factories creating MongoDatabase instances.\npublic class MongoDatabaseUtils extends Object; // Helper class for managing a MongoDatabase instances via MongoDatabaseFactory.\n@FunctionalInterface public interface MongoExpression; // Wrapper object for MongoDB expressions like $toUpper : $name that manifest as Document when passed on to the driver.\npublic final class MongoManagedTypes extends Object implements ManagedTypes;\n@FunctionalInterface public interface MongoSessionProvider; // A simple interface for obtaining a ClientSession to be consumed by MongoOperations and MongoDB native operations that support causal consistency and transactions.\npublic class MongoTransactionException extends ClientSessionException; // A specific ClientSessionException related to issues with a transaction such as aborted or non existing transactions.\npublic class MongoTransactionManager extends AbstractPlatformTransactionManager implements ResourceTransactionManager, InitializingBean; // A PlatformTransactionManager implementation that manages ClientSession based transactions for a single MongoDatabaseFactory.\n", "des": "Spring Data's MongoDB abstraction."}
{"index": 1747, "repo": "spring-data-mongodb-4.1.2", "code": "package config;\n\n@Configuration(proxyBeanMethods=false) public abstract class AbstractMongoClientConfiguration extends MongoConfigurationSupport; // Base class for Spring Data MongoDB configuration using JavaConfig with MongoClient.\n@Configuration(proxyBeanMethods=false) public abstract class AbstractReactiveMongoConfiguration extends MongoConfigurationSupport; // Base class for reactive Spring Data MongoDB configuration using JavaConfig.\npublic abstract class BeanNames extends Object; // Constants to declare bean names used by the namespace configuration.\npublic class ConnectionStringPropertyEditor extends PropertyEditorSupport; // Parse a String to a ConnectionString.\n@Inherited @Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.mongodb.config.MongoAuditingRegistrar.class) public @interface EnableMongoAuditing; // Annotation to enable auditing in MongoDB via annotation configuration.\n@Inherited @Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.mongodb.config.ReactiveMongoAuditingRegistrar.class) public @interface EnableReactiveMongoAuditing; // Annotation to enable auditing in MongoDB using reactive infrastructure via annotation configuration.\npublic class GeoJsonConfiguration extends Object implements SpringDataJacksonModules; // Configuration class to expose GeoJsonModule as a Spring bean.\npublic class MappingMongoConverterParser extends Object implements BeanDefinitionParser; // Bean definition parser for the mapping-converter element.\npublic class MongoAuditingBeanDefinitionParser extends AbstractSingleBeanDefinitionParser; // BeanDefinitionParser to register a AuditingEntityCallback to transparently set auditing information on an entity.\npublic class MongoClientParser extends Object implements BeanDefinitionParser; // Parser for mongo-client definitions.\npublic abstract class MongoConfigurationSupport extends Object; // Base class for Spring Data MongoDB to be extended for JavaConfiguration usage.\npublic class MongoCredentialPropertyEditor extends PropertyEditorSupport; // Parse a String to a Collection of MongoCredential.\npublic class MongoDbFactoryParser extends AbstractBeanDefinitionParser; // BeanDefinitionParser to parse db-factory elements into BeanDefinitions.\npublic class MongoJmxParser extends Object implements BeanDefinitionParser;\npublic class MongoNamespaceHandler extends NamespaceHandlerSupport; // NamespaceHandler for Mongo DB configuration.\npublic class PersistentEntitiesFactoryBean extends Object implements FactoryBean<PersistentEntities>; // Simple helper to be able to wire the PersistentEntities from a MappingMongoConverter bean available in the application context.\n", "des": "Spring XML namespace configuration for MongoDB specific repositories."}
{"index": 1748, "repo": "spring-data-mongodb-4.1.2", "code": "package core;\n\npackage core.aggregation; // Support for the MongoDB aggregation framework.\npackage core.annotation; // Core Spring Data MongoDB annotations not limited to a special use case (like Query,...).\npackage core.convert; // Spring Data MongoDB specific converter infrastructure.\npackage core.encryption; // Infrastructure for explicit encryption mechanism of Client-Side Field Level Encryption.\npackage core.geo; // Support for MongoDB geo-spatial queries.\npackage core.index; // Support for MongoDB document indexing.\npackage core.mapping; // Infrastructure for the MongoDB document-to-object mapping subsystem.\npackage core.mapreduce; // Support for MongoDB map-reduce operations.\npackage core.messaging; // MongoDB specific messaging support for listening to eg.\npackage core.query; // MongoDB specific query and update support.\npackage core.schema; // MongoDB-specific JSON schema implementation classes.\npackage core.script; // Abstraction classes javascript function execution within MongoDB Server.\npackage core.spel; // Support classes to transform SpEL expressions into MongoDB expressions.\npackage core.validation; // MongoDB schema validation specifics.\npublic interface BulkOperations; // Bulk operations for insert/update/remove actions on a collection.\npublic static enum BulkOperations.BulkMode extends Enum<BulkOperations.BulkMode>; // Mode for bulk operation.\npublic class ChangeStreamEvent<T> extends Object; // Message implementation specific to MongoDB Change Streams.\npublic class ChangeStreamOptions extends Object; // Options applicable to MongoDB Change Streams.\npublic static class ChangeStreamOptions.ChangeStreamOptionsBuilder extends Object; // Builder for creating ChangeStreamOptions.\npublic interface CollectionCallback<T>; // Callback interface for executing actions against a MongoCollection.\npublic class CollectionOptions extends Object; // Provides a simple wrapper to encapsulate the variety of settings you can use when creating a collection.\npublic static class CollectionOptions.CollectionChangeStreamOptions extends Object; // Encapsulation of options applied to define collections change stream behaviour.\npublic static class CollectionOptions.TimeSeriesOptions extends Object; // Options applicable to Time Series collections.\npublic static class CollectionOptions.ValidationOptions extends Object; // Encapsulation of ValidationOptions options.\npublic interface CollectionPreparer<T>; // Interface for functional preparation of a MongoCollection.\npublic interface CursorPreparer extends ReadPreferenceAware; // Simple callback interface to allow customization of a FindIterable.\n", "des": "MongoDB core support."}
{"index": 1749, "repo": "spring-data-mongodb-4.1.2", "code": "package aggregation;\n\npublic class AccumulatorOperators extends Object; // Gateway to accumulator aggregation operations.\npublic static class AccumulatorOperators.AccumulatorOperatorFactory extends Object;\npublic static class AccumulatorOperators.Avg extends Object; // AggregationExpression for $avg.\npublic static class AccumulatorOperators.CovariancePop extends Object; // AggregationExpression for $covariancePop.\npublic static class AccumulatorOperators.CovarianceSamp extends Object; // AggregationExpression for $covarianceSamp.\npublic static class AccumulatorOperators.ExpMovingAvg extends Object; // AccumulatorOperators.ExpMovingAvg calculates the exponential moving average of numeric values.\npublic static interface AccumulatorOperators.ExpMovingAvgBuilder; // Builder for AccumulatorOperators.ExpMovingAvg.\npublic static class AccumulatorOperators.Max extends Object; // AggregationExpression for $max.\npublic static class AccumulatorOperators.Min extends Object; // AggregationExpression for $min.\npublic static class AccumulatorOperators.StdDevPop extends Object; // AggregationExpression for $stdDevPop.\npublic static class AccumulatorOperators.StdDevSamp extends Object; // AggregationExpression for $stdDevSamp.\npublic static class AccumulatorOperators.Sum extends Object; // AggregationExpression for $sum.\npublic class AddFieldsOperation extends Object; // Adds new fields to documents.\npublic static class AddFieldsOperation.AddFieldsOperationBuilder extends Object;\npublic static interface AddFieldsOperation.AddFieldsOperationBuilder.ValueAppender;\npublic class Aggregation extends Object; // An Aggregation is a representation of a list of aggregation steps to be performed by the MongoDB Aggregation Framework.\npublic interface AggregationExpression extends MongoExpression; // An AggregationExpression can be used with field expressions in aggregation pipeline stages like project and group.\npublic class AggregationExpressionCriteria extends Object implements CriteriaDefinition; // A criteria to use $expr within a Query.\npublic interface AggregationOperation; // Represents one single operation in an aggregation pipeline.\npublic interface AggregationOperationContext extends CodecRegistryProvider; // The context for an AggregationOperation.\npublic class AggregationOptions extends Object implements ReadConcernAware, ReadPreferenceAware; // Holds a set of configurable aggregation options that can be used within an aggregation pipeline.\npublic static class AggregationOptions.Builder extends Object; // A Builder for AggregationOptions.\n", "des": "Support for the MongoDB aggregation framework."}
{"index": 1750, "repo": "spring-data-mongodb-4.1.2", "code": "package annotation;\n\n@Inherited @Retention(RUNTIME) @Target({TYPE,METHOD}) public @interface Collation; // Collation allows to define the rules used for language-specific string comparison.\n", "des": "Core Spring Data MongoDB annotations not limited to a special use case (like Query,...)."}
{"index": 1751, "repo": "spring-data-mongodb-4.1.2", "code": "package convert;\n\npackage convert.encryption; // Converters integrating with explicit encryption mechanism of Client-Side Field Level Encryption.\npublic abstract class AbstractMongoConverter extends Object implements MongoConverter, InitializingBean; // Base class for MongoConverter implementations.\npublic interface DbRefProxyHandler;\npublic interface DbRefResolver extends ReferenceResolver; // Used to resolve associations annotated with DBRef.\npublic interface DbRefResolverCallback; // Callback interface to be used in conjunction with DbRefResolver.\npublic class DefaultDbRefResolver extends DefaultReferenceResolver implements DbRefResolver, ReferenceResolver; // A DbRefResolver that resolves DBRefs by delegating to a DbRefResolverCallback than is able to generate lazy loading proxies.\npublic class DefaultMongoTypeMapper extends DefaultTypeMapper<org.bson.conversions.Bson> implements MongoTypeMapper; // Default implementation of MongoTypeMapper allowing configuration of the key to lookup and store type information in Document.\npublic static final class DefaultMongoTypeMapper.DocumentTypeAliasAccessor extends Object implements TypeAliasAccessor<org.bson.conversions.Bson>; // TypeAliasAccessor to store aliases in a Document.\npublic class DefaultReferenceResolver extends Object implements ReferenceResolver; // ReferenceResolver implementation that uses a given ReferenceLookupDelegate to load and convert entity associations expressed via a persitent property.\npublic class DocumentReferenceSource extends Object; // The source object to resolve document references upon.\npublic interface JsonSchemaMapper; // JsonSchemaMapper allows mapping a given Document containing a $jsonSchema to the fields of a given domain type.\npublic interface LazyLoadingProxy; // Allows direct interaction with the underlying LazyLoadingInterceptor.\npublic final class LazyLoadingProxyFactory extends Object; // ProxyFactory to create a proxy for PersistentProperty.getType() to resolve a reference lazily.\npublic static class LazyLoadingProxyFactory.LazyLoadingInterceptor extends Object implements MethodInterceptor, MethodInterceptor, Serializable;\npublic class MappingMongoConverter extends AbstractMongoConverter implements ApplicationContextAware; // MongoConverter that uses a MappingContext to do sophisticated mapping of domain objects to Document.\nprotected static interface MappingMongoConverter.ConversionContext; // Conversion context defining an interface for graph-traversal-based conversion of documents.\n", "des": "Spring Data MongoDB specific converter infrastructure."}
{"index": 1752, "repo": "spring-data-mongodb-4.1.2", "code": "package encryption;\n\npublic interface EncryptingConverter<S,T> extends MongoValueConverter<S,T>; // A specialized MongoValueConverter for encryptiong and decrypting properties.\npublic class MongoEncryptionConverter extends Object implements EncryptingConverter<Object,Object>; // Default implementation of EncryptingConverter.\n", "des": "Converters integrating with explicit encryption mechanism of Client-Side Field Level Encryption."}
{"index": 1753, "repo": "spring-data-mongodb-4.1.2", "code": "package encryption;\n\npublic interface Encryption<S,T>; // Component responsible for encrypting and decrypting values.\npublic interface EncryptionContext; // Context to encapsulate encryption for a specific MongoPersistentProperty.\npublic interface EncryptionKey; // The EncryptionKey represents a Data Encryption Key reference that can be either direct via the key id or its Key Alternative Name.\npublic static enum EncryptionKey.Type extends Enum<EncryptionKey.Type>; // The key reference type.\n@FunctionalInterface public interface EncryptionKeyResolver; // Interface to obtain a Data Encryption Key that is valid in a given context.\npublic class EncryptionOptions extends Object; // Options, like the EncryptionOptions.algorithm(), to apply when encrypting values.\npublic class MongoClientEncryption extends Object implements Encryption<org.bson.BsonValue,org.bson.BsonBinary>; // ClientEncryption based Encryption implementation.\n", "des": "Infrastructure for explicit encryption mechanism of Client-Side Field Level Encryption."}
{"index": 1754, "repo": "spring-data-mongodb-4.1.2", "code": "package geo;\n\npublic interface GeoJson<T extends Iterable<?>>; // Interface definition for structures defined in GeoJSON format.\npublic class GeoJsonGeometryCollection extends Object implements GeoJson<Iterable<GeoJson<?>>>; // Defines a GeoJsonGeometryCollection that consists of a List of GeoJson objects.\npublic class GeoJsonLineString extends GeoJsonMultiPoint; // GeoJsonLineString is defined as list of at least 2 Points.\npublic class GeoJsonModule extends com.fasterxml.jackson.databind.module.SimpleModule; // A Jackson Module to register custom JsonDeserializers for GeoJSON types.\npublic class GeoJsonMultiLineString extends Object implements GeoJson<Iterable<GeoJsonLineString>>; // GeoJsonMultiLineString is defined as list of GeoJsonLineStrings.\npublic class GeoJsonMultiPoint extends Object implements GeoJson<Iterable<Point>>; // GeoJsonMultiPoint is defined as list of Points.\npublic class GeoJsonMultiPolygon extends Object implements GeoJson<Iterable<GeoJsonPolygon>>; // GeoJsonMultiPolygon is defined as a list of GeoJsonPolygons.\npublic class GeoJsonPoint extends Point implements GeoJson<List<Double>>; // GeoJson representation of Point.\npublic class GeoJsonPolygon extends Polygon implements GeoJson<List<GeoJsonLineString>>; // GeoJson representation of Polygon.\npublic class Sphere extends Object implements Shape; // Represents a geospatial sphere value.\n", "des": "Support for MongoDB geo-spatial queries."}
{"index": 1755, "repo": "spring-data-mongodb-4.1.2", "code": "package index;\n\n@Target(TYPE) @Documented @Repeatable(CompoundIndexes.class) @Retention(RUNTIME) public @interface CompoundIndex; // Mark a class to use compound indexes.\npublic class CompoundIndexDefinition extends Index; // Index definition to span multiple keys.\n@Target(TYPE) @Documented @Retention(RUNTIME) public @interface CompoundIndexes; // Container annotation that allows to collect multiple CompoundIndex annotations.\npublic class GeospatialIndex extends Object implements IndexDefinition; // Value object to capture data to create a geo index.\n@Target({FIELD,ANNOTATION_TYPE}) @Retention(RUNTIME) public @interface GeoSpatialIndexed; // Mark a field to be indexed using MongoDB's geospatial indexing feature.\npublic enum GeoSpatialIndexType extends Enum<GeoSpatialIndexType>; // Geoposatial index type.\npublic class HashedIndex extends Object implements IndexDefinition; // IndexDefinition implementation for MongoDB Hashed Indexes maintaining entries with hashes of the values of the indexed field.\n@Target({ANNOTATION_TYPE,FIELD}) @Retention(RUNTIME) public @interface HashIndexed; // Annotation for a property that should be used as key for a Hashed Index.\npublic class Index extends Object implements IndexDefinition;\npublic interface IndexDefinition;\npublic enum IndexDirection extends Enum<IndexDirection>;\n@Target({ANNOTATION_TYPE,FIELD}) @Retention(RUNTIME) public @interface Indexed; // Mark a field to be indexed using MongoDB's indexing feature.\npublic final class IndexField extends Object; // Value object for an index field.\npublic interface IndexFilter; // Use IndexFilter to create the partial filter expression used when creating Partial Indexes.\npublic class IndexInfo extends Object; // Index information for a MongoDB index.\npublic interface IndexOperations; // Index operations on a collection.\npublic interface IndexOperationsAdapter extends IndexOperations; // Adapter for creating synchronous IndexOperations.\n@FunctionalInterface public interface IndexOperationsProvider; // Provider interface to obtain IndexOperations by MongoDB collection name.\npublic class IndexOptions extends Object; // Changeable properties of an index.\npublic static enum IndexOptions.Unique extends Enum<IndexOptions.Unique>;\npublic abstract class IndexPredicate extends Object;\npublic interface IndexResolver; // IndexResolver finds those IndexDefinitions to be created for a given class.\n", "des": "Support for MongoDB document indexing."}
{"index": 1756, "repo": "spring-data-mongodb-4.1.2", "code": "package mapping;\n\npackage mapping.event; // Mapping event callback infrastructure for the MongoDB document-to-object mapping subsystem.\npublic class BasicMongoPersistentEntity<T> extends BasicPersistentEntity<T,MongoPersistentProperty> implements MongoPersistentEntity<T>; // MongoDB specific MongoPersistentEntity implementation that adds Mongo specific meta-data such as the collection name and the like.\npublic class BasicMongoPersistentProperty extends AnnotationBasedPersistentProperty<MongoPersistentProperty> implements MongoPersistentProperty; // MongoDB specific PersistentProperty implementation.\npublic class CachingMongoPersistentProperty extends BasicMongoPersistentProperty; // MongoPersistentProperty caching access to CachingMongoPersistentProperty.isIdProperty() and CachingMongoPersistentProperty.getFieldName().\n@Documented @Retention(RUNTIME) @Target(FIELD) public @interface DBRef; // An annotation that indicates the annotated field is to be stored using a DBRef.\n@Inherited @Retention(RUNTIME) @Target(TYPE) public @interface Document; // Identifies a domain object to be persisted to MongoDB.\n@FunctionalInterface public interface DocumentPointer<T>; // A custom pointer to a linked document to be used along with DocumentReference for storing the linkage value.\n@Documented @Retention(RUNTIME) @Target(FIELD) public @interface DocumentReference; // A DocumentReference allows referencing entities in MongoDB using a flexible schema.\n@Documented @Retention(RUNTIME) @Target({TYPE,FIELD}) public @interface Encrypted; // Encrypted provides data required for MongoDB Client Side Field Level Encryption that is applied during schema resolution.\n@Retention(RUNTIME) @Target(FIELD) @Encrypted @ValueConverter public @interface ExplicitEncrypted; // ExplicitEncrypted is a field level ValueConverter annotation that indicates the target element is subject to encryption during the mapping process, in which a given domain type is converted into the store specific format.\n@Documented @Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface Field; // Annotation to define custom metadata for document fields.\npublic static enum Field.Write extends Enum<Field.Write>; // Enumeration of write strategies to define when a property is included for write conversion.\npublic enum FieldType extends Enum<FieldType>; // Enumeration of field value types that can be used to represent a Document field value.\n", "des": "Infrastructure for the MongoDB document-to-object mapping subsystem."}
{"index": 1757, "repo": "spring-data-mongodb-4.1.2", "code": "package event;\n\npublic abstract class AbstractDeleteEvent<T> extends MongoMappingEvent<org.bson.Document>; // Base class for delete events.\npublic abstract class AbstractMongoEventListener<E> extends Object implements ApplicationListener<MongoMappingEvent<?>>; // Base class to implement domain class specific ApplicationListeners.\n@FunctionalInterface public interface AfterConvertCallback<T> extends EntityCallback<T>; // Callback being invoked after a domain object is materialized from a Document when reading results.\npublic class AfterConvertEvent<E> extends MongoMappingEvent<E>; // MongoMappingEvent thrown after convert of a document.\npublic class AfterDeleteEvent<T> extends AbstractDeleteEvent<T>; // Event being thrown after a single or a set of documents has/have been deleted.\npublic class AfterLoadEvent<T> extends MongoMappingEvent<org.bson.Document>; // Event to be triggered after loading Documents to be mapped onto a given type.\n@FunctionalInterface public interface AfterSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered after save of a Document.\npublic class AfterSaveEvent<E> extends MongoMappingEvent<E>; // MongoMappingEvent triggered after save of a document.\npublic class AuditingEntityCallback extends Object implements BeforeConvertCallback<Object>, Ordered; // EntityCallback to populate auditing related fields on an entity about to be saved.\n@FunctionalInterface public interface BeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\npublic class BeforeConvertEvent<T> extends MongoMappingEvent<T>; // Event being thrown before a domain object is converted to be persisted.\npublic class BeforeDeleteEvent<T> extends AbstractDeleteEvent<T>; // Event being thrown before a document is deleted.\n@FunctionalInterface public interface BeforeSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered before save of a document.\npublic class BeforeSaveEvent<E> extends MongoMappingEvent<E>; // MongoMappingEvent triggered before save of a document.\npublic class LoggingEventListener extends AbstractMongoEventListener<Object>; // ApplicationListener for Mongo mapping events logging the events.\npublic class MongoMappingEvent<T> extends ApplicationEvent; // Base ApplicationEvent triggered by Spring Data MongoDB.\n", "des": "Mapping event callback infrastructure for the MongoDB document-to-object mapping subsystem."}
{"index": 1758, "repo": "spring-data-mongodb-4.1.2", "code": "package mapreduce;\n\n@Deprecated public class MapReduceCounts extends Object;\n@Deprecated public class MapReduceOptions extends Object;\n@Deprecated public class MapReduceResults<T> extends Object implements Iterable<T>;\n@Deprecated public class MapReduceTiming extends Object;\n", "des": "Support for MongoDB map-reduce operations."}
{"index": 1759, "repo": "spring-data-mongodb-4.1.2", "code": "package messaging;\n\npublic interface Cancelable; // Cancelable allows stopping long running tasks and freeing underlying resources.\npublic class ChangeStreamRequest<T> extends Object implements SubscriptionRequest<com.mongodb.client.model.changestream.ChangeStreamDocument<org.bson.Document>,T,ChangeStreamRequest.ChangeStreamRequestOptions>; // SubscriptionRequest implementation to be used for listening to Change Streams via a MessageListenerContainer using the synchronous MongoDB Java driver.\npublic static class ChangeStreamRequest.ChangeStreamRequestBuilder<T> extends Object; // Builder for creating ChangeStreamRequest.\npublic static class ChangeStreamRequest.ChangeStreamRequestOptions extends Object implements SubscriptionRequest.RequestOptions; // SubscriptionRequest.RequestOptions implementation specific to a ChangeStreamRequest.\npublic class DefaultMessageListenerContainer extends Object implements MessageListenerContainer; // Simple Executor based MessageListenerContainer implementation for running tasks like listening to MongoDB Change Streams and tailable cursors.\npublic interface Message<S,T>; // General message abstraction for any type of Event / Message published by MongoDB server to the client.\npublic static class Message.MessageProperties extends Object;\npublic static class Message.MessageProperties.MessagePropertiesBuilder extends Object; // Builder for Message.MessageProperties.\n@FunctionalInterface public interface MessageListener<S,T>; // Listener interface to receive delivery of Messages.\npublic interface MessageListenerContainer extends SmartLifecycle; // Internal abstraction used by the framework representing a message listener container.\npublic interface Subscription extends Cancelable; // The Subscription is the link between the SubscriptionRequest and the actual running Task.\npublic interface SubscriptionRequest<S,T,O extends SubscriptionRequest.RequestOptions>; // The actual SubscriptionRequest sent to the MessageListenerContainer.\npublic static interface SubscriptionRequest.RequestOptions; // Options for specifying the behaviour of the SubscriptionRequest.\npublic class TailableCursorRequest<T> extends Object implements SubscriptionRequest<org.bson.Document,T,SubscriptionRequest.RequestOptions>; // SubscriptionRequest implementation to be used to listen to query results in a Capped Collection using a Tailable Cursor.\npublic static class TailableCursorRequest.TailableCursorRequestBuilder<T> extends Object; // Builder for creating TailableCursorRequest.\npublic static class TailableCursorRequest.TailableCursorRequestOptions extends Object implements SubscriptionRequest.RequestOptions; // SubscriptionRequest.RequestOptions implementation specific to a TailableCursorRequest.\n", "des": "MongoDB specific messaging support for listening to eg."}
{"index": 1760, "repo": "spring-data-mongodb-4.1.2", "code": "package query;\n\npublic class BasicQuery extends Query; // Custom Query implementation to setup a basic query from some arbitrary JSON query string.\npublic class BasicUpdate extends Update;\npublic class Collation extends Object; // Central abstraction for MongoDB collation support.\npublic static class Collation.Alternate extends Object;\npublic static class Collation.AlternateWithMaxVariable extends Collation.Alternate;\npublic static class Collation.CaseFirst extends Object;\npublic static class Collation.CollationLocale extends Object; // ICU locale abstraction for usage with MongoDB Collation.\npublic static interface Collation.ComparisonLevel; // Abstraction for the ICU Comparison Levels.\npublic static class Collation.PrimaryICUComparisonLevel extends Object; // Primary-strength Collation.ICUComparisonLevel.\npublic static class Collation.SecondaryICUComparisonLevel extends Object; // Secondary-strength Collation.ICUComparisonLevel.\npublic static class Collation.TertiaryICUComparisonLevel extends Object; // Tertiary-strength Collation.ICUComparisonLevel.\npublic class Criteria extends Object implements CriteriaDefinition; // Central class for creating queries.\npublic static interface Criteria.BitwiseCriteriaOperators; // MongoDB specific bitwise query operators like $bitsAllClear, $bitsAllSet,... for usage with Criteria.bits() and Query.\npublic interface CriteriaDefinition;\npublic class Field extends Object; // Field projection.\npublic static interface Field.FieldProjectionExpression; // Intermediate builder part for projecting a MongoExpression to a result field.\npublic final class GeoCommand extends Object; // Wrapper around a Shape to allow appropriate query rendering.\npublic class Meta extends Object; // Meta-data for Query instances.\npublic static enum Meta.CursorOption extends Enum<Meta.CursorOption>; // Meta.CursorOption represents OP_QUERY wire protocol flags to change the behavior of queries.\npublic class MetricConversion extends Object; // Metric and Distance conversions using the metric system.\npublic enum MongoRegexCreator extends Enum<MongoRegexCreator>;\npublic static enum MongoRegexCreator.MatchMode extends Enum<MongoRegexCreator.MatchMode>; // Match modes for treatment of String values.\npublic final class NearQuery extends Object implements ReadConcernAware, ReadPreferenceAware; // Builder class to build near-queries.\n", "des": "MongoDB specific query and update support."}
{"index": 1761, "repo": "spring-data-mongodb-4.1.2", "code": "package schema;\n\npublic class IdentifiableJsonSchemaProperty<T extends JsonSchemaObject> extends Object implements JsonSchemaProperty; // JsonSchemaProperty implementation.\npublic static class IdentifiableJsonSchemaProperty.ArrayJsonSchemaProperty extends IdentifiableJsonSchemaProperty<TypedJsonSchemaObject.ArrayJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'array' property.\npublic static class IdentifiableJsonSchemaProperty.BooleanJsonSchemaProperty extends IdentifiableJsonSchemaProperty<TypedJsonSchemaObject.BooleanJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'boolean' property.\npublic static class IdentifiableJsonSchemaProperty.DateJsonSchemaProperty extends IdentifiableJsonSchemaProperty<org.springframework.data.mongodb.core.schema.TypedJsonSchemaObject.DateJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'date' property.\npublic static class IdentifiableJsonSchemaProperty.EncryptedJsonSchemaProperty extends Object implements JsonSchemaProperty; // JsonSchemaProperty implementation for encrypted fields.\npublic static class IdentifiableJsonSchemaProperty.NullJsonSchemaProperty extends IdentifiableJsonSchemaProperty<org.springframework.data.mongodb.core.schema.TypedJsonSchemaObject.NullJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'null' property.\npublic static class IdentifiableJsonSchemaProperty.NumericJsonSchemaProperty extends IdentifiableJsonSchemaProperty<TypedJsonSchemaObject.NumericJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'number' property.\npublic static class IdentifiableJsonSchemaProperty.ObjectJsonSchemaProperty extends IdentifiableJsonSchemaProperty<TypedJsonSchemaObject.ObjectJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'object' property.\npublic static class IdentifiableJsonSchemaProperty.RequiredJsonSchemaProperty extends Object implements JsonSchemaProperty; // Delegating JsonSchemaProperty implementation having a required flag for evaluation during schema creation process.\npublic static class IdentifiableJsonSchemaProperty.StringJsonSchemaProperty extends IdentifiableJsonSchemaProperty<TypedJsonSchemaObject.StringJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'string' property.\n", "des": "MongoDB-specific JSON schema implementation classes."}
{"index": 1762, "repo": "spring-data-mongodb-4.1.2", "code": "package script;\n\n@Deprecated public class ExecutableMongoScript extends Object;\n@Deprecated public class NamedMongoScript extends Object;\n", "des": "Abstraction classes javascript function execution within MongoDB Server."}
{"index": 1763, "repo": "spring-data-mongodb-4.1.2", "code": "package spel;\n\npublic class ExpressionNode extends Object implements Iterable<ExpressionNode>; // A value object for nodes in an expression.\npublic class ExpressionTransformationContextSupport<T extends ExpressionNode> extends Object; // The context for an ExpressionNode transformation.\npublic interface ExpressionTransformer<T extends ExpressionTransformationContextSupport<?>>; // SPI interface to implement components that can transform an ExpressionTransformationContextSupport into an object.\npublic class LiteralNode extends ExpressionNode; // A node representing a literal in an expression.\npublic class MethodReferenceNode extends ExpressionNode; // An ExpressionNode representing a method reference.\npublic static final class MethodReferenceNode.AggregationMethodReference extends Object;\npublic static enum MethodReferenceNode.AggregationMethodReference.ArgumentType extends Enum<MethodReferenceNode.AggregationMethodReference.ArgumentType>; // The actual argument type to use when mapping parameters to MongoDB specific format.\npublic class NotOperatorNode extends ExpressionNode;\npublic class OperatorNode extends ExpressionNode; // An ExpressionNode representing an operator.\n", "des": "Support classes to transform SpEL expressions into MongoDB expressions."}
{"index": 1764, "repo": "spring-data-mongodb-4.1.2", "code": "package validation;\n\npublic interface Validator; // Provides a validator object to be used for collection validation via CollectionOptions.ValidationOptions.\n", "des": "MongoDB schema validation specifics."}
{"index": 1765, "repo": "spring-data-mongodb-4.1.2", "code": "package gridfs;\n\npublic class GridFsCriteria extends Criteria; // GridFs-specific helper class to define Criterias.\npublic interface GridFsObject<ID,CONTENT>; // A common interface when dealing with GridFs items using Spring Data.\npublic static class GridFsObject.Options extends Object; // Additional, context relevant information.\npublic interface GridFsOperations extends ResourcePatternResolver; // Collection of operations to store and read files from MongoDB GridFS.\npublic class GridFsResource extends InputStreamResource implements GridFsObject<Object,InputStream>; // GridFSFile based Resource implementation.\npublic class GridFsTemplate extends Object implements GridFsOperations, ResourcePatternResolver; // GridFsOperations implementation to store content into MongoDB GridFS.\npublic class GridFsUpload<ID> extends Object implements GridFsObject<ID,InputStream>; // Upload descriptor for a GridFS file upload.\npublic static class GridFsUpload.GridFsUploadBuilder<T> extends Object; // Builder to create GridFsUpload in a fluent way.\npublic interface ReactiveGridFsOperations; // Collection of operations to store and read files from MongoDB GridFS using reactive infrastructure.\npublic class ReactiveGridFsResource extends Object implements GridFsObject<Object,org.reactivestreams.Publisher<DataBuffer>>; // Reactive GridFSFile based Resource implementation.\npublic class ReactiveGridFsTemplate extends Object implements ReactiveGridFsOperations; // ReactiveGridFsOperations implementation to store content into MongoDB GridFS.\npublic class ReactiveGridFsUpload<ID> extends Object implements GridFsObject<ID,org.reactivestreams.Publisher<DataBuffer>>; // Upload descriptor for a GridFS file upload.\npublic static class ReactiveGridFsUpload.ReactiveGridFsUploadBuilder<T> extends Object; // Builder to create ReactiveGridFsUpload in a fluent way.\n", "des": "Support for MongoDB GridFS feature."}
{"index": 1766, "repo": "spring-data-mongodb-4.1.2", "code": "package monitor;\n\npublic abstract class AbstractMonitor extends Object; // Base class to encapsulate common configuration settings when connecting to a database\n@ManagedResource(description=\"Assertion Metrics\") public class AssertMetrics extends AbstractMonitor; // JMX Metrics for assertions\n@ManagedResource(description=\"Background Flushing Metrics\") public class BackgroundFlushingMetrics extends AbstractMonitor; // JMX Metrics for Background Flushing\n@ManagedResource(description=\"Btree Metrics\") public class BtreeIndexCounters extends AbstractMonitor; // JMX Metrics for B-tree index counters\n@ManagedResource(description=\"Connection metrics\") public class ConnectionMetrics extends AbstractMonitor; // JMX Metrics for Connections\n@ManagedResource(description=\"Global Lock Metrics\") public class GlobalLockMetrics extends AbstractMonitor; // JMX Metrics for Global Locks\n@ManagedResource(description=\"Memory Metrics\") public class MemoryMetrics extends AbstractMonitor; // JMX Metrics for Memory\n@ManagedResource(description=\"Operation Counters\") public class OperationCounters extends AbstractMonitor; // JMX Metrics for Operation counters\n@ManagedResource(description=\"Server Information\") public class ServerInfo extends AbstractMonitor; // Expose basic server information via JMX\n", "des": "MongoDB specific JMX monitoring support."}
{"index": 1767, "repo": "spring-data-mongodb-4.1.2", "code": "package observability;\n\npublic class ContextProviderFactory extends Object; // Factory to create a ContextProvider to propagate the request context across tasks.\npublic interface MongoHandlerObservationConvention extends io.micrometer.observation.ObservationConvention<org.springframework.data.mongodb.observability.MongoHandlerContext>; // ObservationConvention for MongoHandlerContext.\npublic class MongoObservationCommandListener extends Object implements com.mongodb.event.CommandListener; // Implement MongoDB's CommandListener using Micrometer's Observation API.\n", "des": "Infrastructure to provide driver observability using Micrometer."}
{"index": 1768, "repo": "spring-data-mongodb-4.1.2", "code": "package repository;\n\npackage repository.aot; // Ahead-Of-Time processors for MongoDB repositories.\npackage repository.cdi; // CDI support for MongoDB specific repository implementation.\npackage repository.config; // Support infrastructure for the configuration of MongoDB specific repositories.\npackage repository.query; // Query derivation mechanism for MongoDB specific repositories.\npackage repository.support; // Support infrastructure for query derivation of MongoDB specific repositories.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Aggregation; // The Aggregation annotation can be used to annotate a Repository query method so that it runs the Aggregation.pipeline() on invocation.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @Query(count=true) public @interface CountQuery; // Annotation to declare finder count queries directly on repository methods.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @Query(delete=true) public @interface DeleteQuery; // Annotation to declare finder delete queries directly on repository methods.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @Query(exists=true) public @interface ExistsQuery; // Annotation to declare finder exists queries directly on repository methods.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Hint; // Annotation to declare index hints for repository query, update and aggregate operations.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Meta;\n@NoRepositoryBean public interface MongoRepository<T,ID> extends ListCrudRepository<T,ID>, ListPagingAndSortingRepository<T,ID>, QueryByExampleExecutor<T>; // Mongo specific Repository interface.\n@Documented @Retention(RUNTIME) @Target(PARAMETER) public @interface Near; // Annotation to be used for disambiguing method parameters that shall be used to trigger geo near queries.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @Hint public @interface Query; // Annotation to declare finder queries directly on repository methods.\n", "des": "MongoDB specific repository implementation."}
{"index": 1769, "repo": "spring-data-mongodb-4.1.2", "code": "package aot;\n\npublic class AotMongoRepositoryPostProcessor extends RepositoryRegistrationAotProcessor;\n", "des": "Ahead-Of-Time processors for MongoDB repositories."}
{"index": 1770, "repo": "spring-data-mongodb-4.1.2", "code": "package cdi;\n\npublic class MongoRepositoryBean<T> extends CdiRepositoryBean<T>; // CdiRepositoryBean to create Mongo repository instances.\npublic class MongoRepositoryExtension extends CdiRepositoryExtensionSupport; // CDI extension to export Mongo repositories.\n", "des": "CDI support for MongoDB specific repository implementation."}
{"index": 1771, "repo": "spring-data-mongodb-4.1.2", "code": "package config;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(org.springframework.data.mongodb.repository.config.MongoRepositoriesRegistrar.class) public @interface EnableMongoRepositories; // Annotation to activate MongoDB repositories.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoriesRegistrar.class) public @interface EnableReactiveMongoRepositories; // Annotation to activate reactive MongoDB repositories.\npublic class MongoRepositoryConfigNamespaceHandler extends MongoNamespaceHandler; // NamespaceHandler to register repository configuration.\npublic class MongoRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport; // RepositoryConfigurationExtension for MongoDB.\npublic class ReactiveMongoRepositoryConfigurationExtension extends MongoRepositoryConfigurationExtension; // Reactive RepositoryConfigurationExtension for MongoDB.\n", "des": "Support infrastructure for the configuration of MongoDB specific repositories."}
{"index": 1772, "repo": "spring-data-mongodb-4.1.2", "code": "package query;\n\npublic abstract class AbstractMongoQuery extends Object implements RepositoryQuery; // Base class for RepositoryQuery implementations for Mongo.\npublic abstract class AbstractReactiveMongoQuery extends Object implements RepositoryQuery; // Base class for reactive RepositoryQuery implementations for MongoDB.\npublic class ConvertingParameterAccessor extends Object implements MongoParameterAccessor; // Custom ParameterAccessor that uses a MongoWriter to serialize parameters into Mongo format.\npublic static interface ConvertingParameterAccessor.PotentiallyConvertingIterator extends Iterator<Object>; // Custom Iterator that adds a method to access elements in a converted manner.\npublic interface MongoEntityInformation<T,ID> extends EntityInformation<T,ID>; // Mongo specific EntityInformation.\npublic interface MongoEntityMetadata<T> extends EntityMetadata<T>; // Extension of EntityMetadata to additionally expose the collection name an entity shall be persisted to.\npublic interface MongoParameterAccessor extends ParameterAccessor; // Mongo-specific ParameterAccessor exposing a maximum distance parameter.\npublic class MongoParameters extends Parameters<MongoParameters,org.springframework.data.mongodb.repository.query.MongoParameters.MongoParameter>; // Custom extension of Parameters discovering additional\npublic class MongoParametersParameterAccessor extends ParametersParameterAccessor implements MongoParameterAccessor; // Mongo-specific ParametersParameterAccessor to allow access to the Distance parameter.\npublic class MongoQueryMethod extends QueryMethod; // Mongo specific implementation of QueryMethod.\npublic class PartTreeMongoQuery extends AbstractMongoQuery; // RepositoryQuery implementation for Mongo.\npublic class ReactiveMongoQueryMethod extends MongoQueryMethod; // Reactive specific implementation of MongoQueryMethod.\npublic class ReactivePartTreeMongoQuery extends AbstractReactiveMongoQuery; // Reactive PartTree RepositoryQuery implementation for Mongo.\npublic class ReactiveStringBasedAggregation extends AbstractReactiveMongoQuery; // A reactive RepositoryQuery to use a plain JSON String to create an aggregation pipeline to actually execute.\npublic class ReactiveStringBasedMongoQuery extends AbstractReactiveMongoQuery; // Query to use a plain JSON String to create the Query to actually execute.\npublic class StringBasedAggregation extends AbstractMongoQuery; // AbstractMongoQuery implementation to run string-based aggregations using Aggregation.\npublic class StringBasedMongoQuery extends AbstractMongoQuery; // Query to use a plain JSON String to create the Query to actually execute.\n", "des": "Query derivation mechanism for MongoDB specific repositories."}
{"index": 1773, "repo": "spring-data-mongodb-4.1.2", "code": "package support;\n\npublic class MappingMongoEntityInformation<T,ID> extends PersistentEntityInformation<T,ID> implements MongoEntityInformation<T,ID>; // MongoEntityInformation implementation using a MongoPersistentEntity instance to lookup the necessary information.\n@SupportedAnnotationTypes({\"com.querydsl.core.annotations.*\",\"org.springframework.data.mongodb.core.mapping.*\"}) @SupportedSourceVersion(RELEASE_6) public class MongoAnnotationProcessor extends com.querydsl.apt.AbstractQuerydslProcessor; // Annotation processor to create Querydsl query types for QueryDsl annotated classes.\npublic class MongoRepositoryFactory extends RepositoryFactorySupport; // Factory to create MongoRepository instances.\npublic class MongoRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends RepositoryFactoryBeanSupport<T,S,ID>; // FactoryBean to create MongoRepository instances.\npublic class QuerydslMongoPredicateExecutor<T> extends Object implements QuerydslPredicateExecutor<T>; // MongoDB-specific QuerydslPredicateExecutor that allows execution Predicates in various forms.\npublic abstract class QuerydslRepositorySupport extends Object; // Base class to create repository implementations based on Querydsl.\npublic class ReactiveMongoRepositoryFactory extends ReactiveRepositoryFactorySupport; // Factory to create ReactiveMongoRepository instances.\npublic class ReactiveMongoRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends RepositoryFactoryBeanSupport<T,S,ID>; // FactoryBean to create ReactiveMongoRepository instances.\npublic class ReactiveQuerydslMongoPredicateExecutor<T> extends Object implements ReactiveQuerydslPredicateExecutor<T>; // MongoDB-specific QuerydslPredicateExecutor that allows execution Predicates in various forms.\npublic class SimpleMongoRepository<T,ID> extends Object implements MongoRepository<T,ID>; // Repository base implementation for Mongo.\npublic class SimpleReactiveMongoRepository<T,ID extends Serializable> extends Object implements ReactiveMongoRepository<T,ID>; // Reactive repository base implementation for Mongo.\npublic class SpringDataMongodbQuery<T> extends com.querydsl.mongodb.document.AbstractMongodbQuery<Q> implements com.querydsl.core.Fetchable<T>; // Spring Data specific simple Fetchable Query implementation.\n", "des": "Support infrastructure for query derivation of MongoDB specific repositories."}
{"index": 1774, "repo": "spring-data-mongodb-4.1.2", "code": "package util;\n\npackage util.json; // MongoDB driver-specific utility classes for Json conversion.\npublic class BsonUtils extends Object; // Internal API for operations on Bson elements that can be either Document or DBObject.\npublic class DBObjectUtils extends Object;\npublic class DotPath extends Object; // Value object representing a dot path.\npublic class MongoClientVersion extends Object; // MongoClientVersion holds information about the used mongo-java client and is used to distinguish between different versions.\npublic final class MongoDbErrorCodes extends Object; // MongoDbErrorCodes holds MongoDB specific error codes outlined in mongo/base/error_codes.err.\npublic abstract class RegexFlags extends Object; // Utility to translate regex flags to MongoDB regex options and vice versa.\n", "des": "MongoDB driver-specific utility classes for Bson and DBObject interaction."}
{"index": 1775, "repo": "spring-data-mongodb-4.1.2", "code": "package json;\n\npublic class ParameterBindingContext extends Object; // Reusable context for binding parameters to a placeholder or a SpEL expression within a JSON structure.\npublic class ParameterBindingDocumentCodec extends Object implements org.bson.codecs.CollectibleCodec<org.bson.Document>; // A Codec implementation that allows binding parameters to placeholders or SpEL expressions when decoding a JSON String.\npublic class ParameterBindingJsonReader extends org.bson.AbstractBsonReader; // Reads a JSON and evaluates placehoders and SpEL expressions.\n@FunctionalInterface public interface ValueProvider; // A value provider to retrieve bindable values by their parameter index.\n", "des": "MongoDB driver-specific utility classes for Json conversion."}
{"index": 1776, "repo": "slf4j-api-2.0.7", "code": "package slf4j;\n\npackage slf4j.helpers; // Helper classes.\npackage slf4j.spi; // Classes and interfaces which are internal to SLF4J.\npublic interface ILoggerFactory; // ILoggerFactory instances manufacture Logger instances by name.\npublic interface IMarkerFactory; // Implementations of this interface are used to manufacture Marker instances.\npublic interface Logger; // The org.slf4j.Logger interface is the main user entry point of SLF4J API.\npublic final class LoggerFactory extends Object; // The LoggerFactory is a utility class producing Loggers for various logging APIs, most notably for log4j, logback and JDK 1.4 logging.\npublic class LoggerFactoryFriend extends Object; // All methods in this class are reserved for internal use, for testing purposes.\npublic interface Marker extends Serializable; // Markers are named objects used to enrich log statements.\npublic class MarkerFactory extends Object; // MarkerFactory is a utility class producing Marker instances as appropriate for the logging system currently in use.\npublic class MDC extends Object; // This class hides and serves as a substitute for the underlying logging system's MDC implementation.\npublic static class MDC.MDCCloseable extends Object implements Closeable; // An adapter to remove the key when done.\n", "des": "Core logging interfaces."}
{"index": 1777, "repo": "slf4j-api-2.0.7", "code": "package helpers;\n\npublic abstract class AbstractLogger extends Object implements Logger, Serializable; // An abstract implementation which delegates actual logging work to the AbstractLogger.handleNormalizedLoggingCall(Level, Marker, String, Object[], Throwable) method.\npublic class BasicMarker extends Object implements Marker; // A simple implementation of the Marker interface.\npublic class BasicMarkerFactory extends Object implements IMarkerFactory; // An almost trivial implementation of the IMarkerFactory interface which creates BasicMarker instances.\npublic class BasicMDCAdapter extends Object implements MDCAdapter; // Basic MDC implementation, which can be used with logging systems that lack out-of-the-box MDC support.\n@Documented @Target(METHOD) @Retention(RUNTIME) public @interface CheckReturnValue; // Used to annotate methods in the LoggingEventBuilder interface which return an instance of LoggingEventBuilder (usually as this).\npublic class FormattingTuple extends Object; // Holds the results of formatting done by MessageFormatter.\npublic abstract class LegacyAbstractLogger extends AbstractLogger; // Provides minimal default implementations for LegacyAbstractLogger.isTraceEnabled(Marker), LegacyAbstractLogger.isDebugEnabled(Marker) and other similar methods.\npublic abstract class MarkerIgnoringBase extends Object implements Logger;\npublic final class MessageFormatter extends Object; // Formats messages according to very simple substitution rules.\npublic class NOP_FallbackServiceProvider extends Object implements SLF4JServiceProvider;\npublic class NOPLogger extends Object implements Logger; // A direct NOP (no operation) implementation of Logger.\npublic class NOPLoggerFactory extends Object implements ILoggerFactory; // NOPLoggerFactory is a trivial implementation of ILoggerFactory which always returns the unique instance of NOPLogger.\npublic class NOPMDCAdapter extends Object implements MDCAdapter; // This adapter is an empty implementation of the MDCAdapter interface.\npublic class NormalizedParameters extends Object; // Holds normalized call parameters.\npublic class SubstituteLogger extends Object implements Logger; // A logger implementation which logs via a delegate logger.\npublic class SubstituteLoggerFactory extends Object implements ILoggerFactory; // SubstituteLoggerFactory manages instances of SubstituteLogger.\npublic class SubstituteServiceProvider extends Object implements SLF4JServiceProvider;\npublic class ThreadLocalMapOfStacks extends Object; // A simple implementation of ThreadLocal backed Map containing values of type Deque.\n", "des": "Helper classes."}
{"index": 1778, "repo": "slf4j-api-2.0.7", "code": "package spi;\n\npublic interface CallerBoundaryAware; // Additional interface to LoggingEventBuilder and LoggingEvent.\npublic class DefaultLoggingEventBuilder extends Object implements LoggingEventBuilder, CallerBoundaryAware; // Default implementation of LoggingEventBuilder\npublic interface LocationAwareLogger extends Logger; // An optional interface helping integration with logging systems capable of extracting location information.\npublic interface LoggerFactoryBinder;\npublic interface LoggingEventAware; // A logger capable of logging from org.slf4j.event.LoggingEvent implements this interface.\npublic interface LoggingEventBuilder; // This is the main interface in slf4j's fluent API for creating logging events.\npublic interface MarkerFactoryBinder;\npublic interface MDCAdapter; // This interface abstracts the service offered by various MDC implementations.\npublic class NOPLoggingEventBuilder extends Object implements LoggingEventBuilder; // A no-operation implementation of LoggingEventBuilder.\npublic interface SLF4JServiceProvider; // This interface based on ServiceLoader paradigm.\n", "des": "Classes and interfaces which are internal to SLF4J."}
{"index": 1779, "repo": "spring-integration-file-6.1.2", "code": "package file;\n\npackage file.aggregator; // Provides support classes for file-based aggregation logic.\npackage file.config; // Provides classes for configuration - parsers, namespace handlers, factory beans.\npackage file.dsl; // Provides File Components support for Spring Integration Java DSL.\npackage file.event; // ApplicationEvents generated by the file module.\npackage file.filters; // Provides classes supporting file filtering.\npackage file.locking; // Provides classes supporting file locking.\npackage file.remote; // Base package for supporting remote files.\npackage file.splitter; // Provides implementations of AbstractMessageSplitter.\npackage file.support; // Provides various support classes used across Spring Integration File Components.\npackage file.tail; // Classes used for tailing file system files.\npackage file.transformer; // Provides classes supporting the transformation of file contents to messages.\npublic class DefaultDirectoryScanner extends Object implements DirectoryScanner; // Default directory scanner and base class for other directory scanners.\npublic class DefaultFileNameGenerator extends org.springframework.integration.util.AbstractExpressionEvaluator implements FileNameGenerator; // Default implementation of the filename generator strategy.\npublic interface DirectoryScanner; // Strategy for scanning directories.\npublic abstract class FileHeaders extends Object; // Pre-defined header names to be used when storing or retrieving File-related values to/from integration Message Headers.\npublic interface FileLocker; // A FileLocker is a strategy that can ensure that files are only processed a single time.\n@FunctionalInterface public interface FileNameGenerator; // Strategy interface for generating a file name from a message.\npublic class FileReadingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<File> implements org.springframework.integration.support.management.ManageableLifecycle; // MessageSource that creates messages from a file system directory.\npublic static enum FileReadingMessageSource.WatchEventType extends Enum<FileReadingMessageSource.WatchEventType>;\npublic class FileWritingMessageHandler extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements org.springframework.integration.support.management.ManageableLifecycle, org.springframework.integration.handler.MessageTriggerAction; // A MessageHandler implementation that writes the Message payload to a file.\n", "des": "Base package for File support."}
{"index": 1780, "repo": "spring-integration-file-6.1.2", "code": "package aggregator;\n\npublic class FileAggregatingMessageGroupProcessor extends org.springframework.integration.aggregator.AbstractAggregatingMessageGroupProcessor; // An AbstractAggregatingMessageGroupProcessor implementation for file content collecting previously splitted by the FileSplitter with the markers option turned on.\npublic class FileAggregator extends Object implements org.springframework.integration.aggregator.CorrelationStrategy, org.springframework.integration.aggregator.ReleaseStrategy, org.springframework.integration.aggregator.GroupConditionProvider, org.springframework.integration.aggregator.MessageGroupProcessor, org.springframework.beans.factory.BeanFactoryAware; // A convenient component to utilize a FileSplitter.FileMarker-based aggregation logic.\npublic class FileMarkerReleaseStrategy extends Object implements org.springframework.integration.aggregator.ReleaseStrategy, org.springframework.integration.aggregator.GroupConditionProvider; // A ReleaseStrategy which makes a decision based on the presence of FileSplitter.FileMarker.Mark.END message in the group and its FileHeaders.LINE_COUNT header.\n", "des": "Provides support classes for file-based aggregation logic."}
{"index": 1781, "repo": "spring-integration-file-6.1.2", "code": "package config;\n\npublic abstract class AbstractFilePayloadTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser; // Base class for File payload transformer parsers.\npublic abstract class AbstractRemoteFileInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Abstract base class for parsing remote file inbound channel adapters.\npublic abstract class AbstractRemoteFileOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\npublic abstract class AbstractRemoteFileStreamingInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Abstract base class for parsing remote file streaming inbound channel adapters.\npublic class FileInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Parser for the <inbound-channel-adapter> element of the 'file' namespace.\npublic class FileListFilterFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<FileListFilter<File>>;\npublic class FileNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for Spring Integration's 'file' namespace.\npublic class FileOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the <outbound-channel-adapter/> element of the 'file' namespace.\npublic class FileOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the 'outbound-gateway' element of the file namespace.\npublic final class FileParserUtils extends Object;\npublic class FileReadingMessageSourceFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<FileReadingMessageSource> implements org.springframework.beans.factory.BeanNameAware;\npublic class FileSplitterParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers, factory beans."}
{"index": 1782, "repo": "spring-integration-file-6.1.2", "code": "package dsl;\n\npublic class FileInboundChannelAdapterSpec extends org.springframework.integration.dsl.MessageSourceSpec<FileInboundChannelAdapterSpec,FileReadingMessageSource> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessageSourceSpec for a FileReadingMessageSource.\npublic abstract class Files extends Object; // The Spring Integration File components Factory.\npublic class FileSplitterSpec extends org.springframework.integration.dsl.MessageHandlerSpec<FileSplitterSpec,FileSplitter>; // The MessageHandlerSpec for the FileSplitter.\npublic abstract class FileTransferringMessageHandlerSpec<F,S extends FileTransferringMessageHandlerSpec<F,S>> extends org.springframework.integration.dsl.MessageHandlerSpec<S,FileTransferringMessageHandler<F>> implements org.springframework.integration.dsl.ComponentsRegistration; // The MessageHandlerSpec for the FileTransferringMessageHandler.\npublic class FileWritingMessageHandlerSpec extends org.springframework.integration.dsl.MessageHandlerSpec<FileWritingMessageHandlerSpec,FileWritingMessageHandler> implements org.springframework.integration.dsl.ComponentsRegistration; // The MessageHandlerSpec for the FileWritingMessageHandler.\npublic abstract class RemoteFileInboundChannelAdapterSpec<F,S extends RemoteFileInboundChannelAdapterSpec<F,S,MS>,MS extends AbstractInboundFileSynchronizingMessageSource<F>> extends org.springframework.integration.dsl.MessageSourceSpec<S,MS> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessageSourceSpec for an AbstractInboundFileSynchronizingMessageSource.\npublic abstract class RemoteFileOutboundGatewaySpec<F,S extends RemoteFileOutboundGatewaySpec<F,S>> extends org.springframework.integration.dsl.MessageHandlerSpec<S,AbstractRemoteFileOutboundGateway<F>> implements org.springframework.integration.dsl.ComponentsRegistration; // The MessageHandlerSpec for the AbstractRemoteFileOutboundGateway.\n", "des": "Provides File Components support for Spring Integration Java DSL."}
{"index": 1783, "repo": "spring-integration-file-6.1.2", "code": "package event;\n\npublic abstract class FileIntegrationEvent extends org.springframework.integration.events.IntegrationEvent;\n", "des": "ApplicationEvents generated by the file module."}
{"index": 1784, "repo": "spring-integration-file-6.1.2", "code": "package filters;\n\npublic abstract class AbstractDirectoryAwareFileListFilter<F> extends AbstractFileListFilter<F>; // A file list filter that can be configured to always accept (pass) directories.\npublic abstract class AbstractFileListFilter<F> extends Object implements FileListFilter<F>; // A convenience base class for any FileListFilter whose criteria can be evaluated against each File in isolation.\npublic abstract class AbstractMarkerFilePresentFileListFilter<F> extends Object implements FileListFilter<F>; // A FileListFilter that only passes files matched by one or more FileListFilter if a corresponding marker file is also present to indicate a file transfer is complete.\npublic abstract class AbstractPersistentAcceptOnceFileListFilter<F> extends AbstractDirectoryAwareFileListFilter<F> implements ReversibleFileListFilter<F>, ResettableFileListFilter<F>, Closeable; // Stores \"seen\" files in a MetadataStore to survive application restarts.\npublic abstract class AbstractRegexPatternFileListFilter<F> extends AbstractDirectoryAwareFileListFilter<F>; // Filters a listing of files by qualifying their 'name' against a regular expression (an instance of Pattern).\npublic abstract class AbstractSimplePatternFileListFilter<F> extends AbstractDirectoryAwareFileListFilter<F>; // Base class for filters that support ant style path expressions, which are less powerful but more readable than regular expressions.\npublic class AcceptAllFileListFilter<F> extends AbstractFileListFilter<F>; // Simple implementation of FileListFilter that always returns true.\npublic class AcceptOnceFileListFilter<F> extends AbstractFileListFilter<F> implements ReversibleFileListFilter<F>, ResettableFileListFilter<F>; // FileListFilter that passes files only one time.\npublic class ChainFileListFilter<F> extends CompositeFileListFilter<F>; // The CompositeFileListFilter extension which chains the result of the previous filter to the next one.\npublic class CompositeFileListFilter<F> extends Object implements ReversibleFileListFilter<F>, ResettableFileListFilter<F>, DiscardAwareFileListFilter<F>, Closeable; // Simple FileListFilter that predicates its matches against all of the configured FileListFilter.\npublic interface DiscardAwareFileListFilter<F> extends FileListFilter<F>; // The FileListFilter modification which can accept a Consumer which can be called when the filter discards the file.\n", "des": "Provides classes supporting file filtering."}
{"index": 1785, "repo": "spring-integration-file-6.1.2", "code": "package locking;\n\npublic abstract class AbstractFileLockerFilter extends AbstractFileListFilter<File> implements FileLocker; // Convenience base class for implementing FileLockers that check a lock before accepting a file.\npublic class NioFileLocker extends AbstractFileLockerFilter; // File locking strategy that uses java.nio.\n", "des": "Provides classes supporting file locking."}
{"index": 1786, "repo": "spring-integration-file-6.1.2", "code": "package remote;\n\npackage remote.aop; // Provides classes related to AOP.\npackage remote.gateway; // Provides classes supporting remote file gateways.\npackage remote.handler; // Provides classes supporting remote file message handlers.\npackage remote.server; // Provides classes related to file servers.\npackage remote.session; // Provides classes supporting remote file sessions.\npackage remote.synchronizer; // Provides classes supporting the synchronization of remote and local file directories.\npublic abstract class AbstractFileInfo<F> extends Object implements FileInfo<F>, Comparable<FileInfo<F>>; // Abstract implementation of FileInfo; provides a setter for the remote directory and a generic toString implementation.\npublic abstract class AbstractRemoteFileStreamingMessageSource<F> extends org.springframework.integration.endpoint.AbstractFetchLimitingMessageSource<InputStream> implements org.springframework.integration.support.management.ManageableLifecycle; // A message source that produces a message with an InputStream payload referencing a remote file.\n@FunctionalInterface public interface ClientCallback<C,T>; // RemoteFileTemplate callback with the underlying client instance providing access to lower level methods.\n@FunctionalInterface public interface ClientCallbackWithoutResult<C> extends ClientCallback<C,Object>; // RemoteFileTemplate callback with the underlying client instance providing access to lower level methods where no result is returned.\npublic interface FileInfo<F>; // Represents a remote file info - an abstraction over the underlying implementation.\n@FunctionalInterface public interface InputStreamCallback; // Callback for stream-based file retrieval using a RemoteFileOperations.\n@FunctionalInterface public interface MessageSessionCallback<F,T>; // Callback invoked by RemoteFileOperations.executeForMessage() - allows multiple operations on a session.\npublic interface RemoteFileOperations<F>; // Strategy for performing operations on remote files.\n@FunctionalInterface public static interface RemoteFileOperations.OperationsCallback<F,T>; // Callback for using the same session for multiple RemoteFileTemplate operations.\npublic class RemoteFileTemplate<F> extends Object implements RemoteFileOperations<F>, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.BeanFactoryAware; // A general abstraction for dealing with remote files.\npublic final class RemoteFileUtils extends Object; // Utility methods for supporting remote file operations.\n", "des": "Base package for supporting remote files."}
{"index": 1787, "repo": "spring-integration-file-6.1.2", "code": "package aop;\n\npublic class RotatingServerAdvice extends Object implements org.springframework.integration.aop.MessageSourceMutator; // A smart poller advice that rotates across multiple remote servers/directories.\npublic interface RotationPolicy; // A strategy for rotating advices to allow reconfiguring the message source before and/or after a poll.\npublic static class RotationPolicy.KeyDirectory extends Object; // A key for a thread-local store and its related directory pair.\npublic class StandardRotationPolicy extends Object implements RotationPolicy; // Standard rotation policy; iterates over key/directory pairs; when the end is reached, starts again at the beginning.\n", "des": "Provides classes related to AOP."}
{"index": 1788, "repo": "spring-integration-file-6.1.2", "code": "package gateway;\n\npublic abstract class AbstractRemoteFileOutboundGateway<F> extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler; // Base class for Outbound Gateways that perform remote file operations.\npublic static enum AbstractRemoteFileOutboundGateway.Command extends Enum<AbstractRemoteFileOutboundGateway.Command>; // Enumeration of commands supported by the gateways.\npublic static enum AbstractRemoteFileOutboundGateway.Option extends Enum<AbstractRemoteFileOutboundGateway.Option>; // Enumeration of options supported by various commands.\n", "des": "Provides classes supporting remote file gateways."}
{"index": 1789, "repo": "spring-integration-file-6.1.2", "code": "package handler;\n\npublic class FileTransferringMessageHandler<F> extends org.springframework.integration.handler.AbstractMessageHandler; // A MessageHandler implementation that transfers files to a remote server.\n", "des": "Provides classes supporting remote file message handlers."}
{"index": 1790, "repo": "spring-integration-file-6.1.2", "code": "package server;\n\npublic abstract class FileServerEvent extends org.springframework.integration.events.IntegrationEvent; // Base class for file server events.\n", "des": "Provides classes related to file servers."}
{"index": 1791, "repo": "spring-integration-file-6.1.2", "code": "package session;\n\npublic class CachingSessionFactory<F> extends Object implements SessionFactory<F>, org.springframework.beans.factory.DisposableBean; // A SessionFactory implementation that caches Sessions for reuse without requiring reconnection each time the Session is retrieved from the factory.\npublic class DefaultSessionFactoryLocator<F> extends Object implements SessionFactoryLocator<F>; // The default implementation of SessionFactoryLocator using a simple map lookup and an optional default to fall back on.\npublic class DelegatingSessionFactory<F> extends Object implements SessionFactory<F>; // SessionFactory that delegates to a SessionFactory retrieved from a SessionFactoryLocator.\npublic interface Session<F> extends Closeable; // Common abstraction for a Session with a remote File system.\n@FunctionalInterface public interface SessionFactory<F>; // Factory for acquiring Session instances.\n@FunctionalInterface public interface SessionFactoryLocator<F>; // A factory returning a SessionFactory based on some key.\npublic class SessionFactoryMapBuilder<T> extends org.springframework.integration.support.MapBuilder<SessionFactoryMapBuilder<T>,Object,SessionFactory<T>>; // A MapBuilder to producer a map that maps objects to SessionFactorys.\npublic interface SharedSessionCapable; // A SessionFactory that implements this interface is capable of supporting a shared session.\n", "des": "Provides classes supporting remote file sessions."}
{"index": 1792, "repo": "spring-integration-file-6.1.2", "code": "package synchronizer;\n\npublic abstract class AbstractInboundFileSynchronizer<F> extends Object implements InboundFileSynchronizer, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, Closeable; // Base class charged with knowing how to connect to a remote file system, scan it for new files and then download the files.\npublic abstract class AbstractInboundFileSynchronizingMessageSource<F> extends org.springframework.integration.endpoint.AbstractFetchLimitingMessageSource<File> implements org.springframework.integration.support.management.ManageableLifecycle; // Factors out the common logic between the FTP and SFTP adapters.\n@FunctionalInterface public interface InboundFileSynchronizer; // Strategy for synchronizing from a remote File system to a local directory.\n", "des": "Provides classes supporting the synchronization of remote and local file directories."}
{"index": 1793, "repo": "spring-integration-file-6.1.2", "code": "package splitter;\n\npublic class FileSplitter extends org.springframework.integration.splitter.AbstractMessageSplitter; // The AbstractMessageSplitter implementation to split the File Message payload to lines.\npublic static class FileSplitter.FileMarker extends Object implements Serializable;\npublic static enum FileSplitter.FileMarker.Mark extends Enum<FileSplitter.FileMarker.Mark>;\n", "des": "Provides implementations of AbstractMessageSplitter."}
{"index": 1794, "repo": "spring-integration-file-6.1.2", "code": "package support;\n\npublic enum FileExistsMode extends Enum<FileExistsMode>; // When writing file, this enumeration indicates what action shall be taken in case the destination file already exists.\npublic final class FileUtils extends Object; // Utilities for operations on Files.\n", "des": "Provides various support classes used across Spring Integration File Components."}
{"index": 1795, "repo": "spring-integration-file-6.1.2", "code": "package tail;\n\npublic class ApacheCommonsFileTailingMessageProducer extends FileTailingMessageProducerSupport implements org.apache.commons.io.input.TailerListener; // File tailer that delegates to the Apache Commons Tailer.\npublic abstract class FileTailingMessageProducerSupport extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.context.ApplicationEventPublisherAware; // Base class for file tailing inbound adapters.\npublic static class FileTailingMessageProducerSupport.FileTailingEvent extends FileIntegrationEvent;\npublic static class FileTailingMessageProducerSupport.FileTailingIdleEvent extends FileTailingMessageProducerSupport.FileTailingEvent;\npublic class OSDelegatingFileTailingMessageProducer extends FileTailingMessageProducerSupport implements org.springframework.scheduling.SchedulingAwareRunnable; // A file tailing message producer that delegates to the OS tail program.\n", "des": "Classes used for tailing file system files."}
{"index": 1796, "repo": "spring-integration-file-6.1.2", "code": "package transformer;\n\npublic abstract class AbstractFilePayloadTransformer<T> extends Object implements org.springframework.integration.transformer.Transformer, org.springframework.beans.factory.BeanFactoryAware; // Base class for transformers that convert a File payload.\npublic class FileToByteArrayTransformer extends AbstractFilePayloadTransformer<byte[]>; // A payload transformer that copies a File's contents to a byte array.\npublic class FileToStringTransformer extends AbstractFilePayloadTransformer<String>; // A payload transformer that copies a File's contents to a String.\n", "des": "Provides classes supporting the transformation of file contents to messages."}
{"index": 1797, "repo": "spring-aop-6.0.11", "code": "package aop;\n\npublic interface Advice; // Tag interface for Advice.\npublic class AspectException extends RuntimeException; // Superclass for all AOP infrastructure exceptions.\n", "des": "The core AOP Alliance advice marker."}
{"index": 1798, "repo": "spring-aop-6.0.11", "code": "package intercept;\n\npublic interface ConstructorInterceptor extends Interceptor; // Intercepts the construction of a new object.\npublic interface ConstructorInvocation extends Invocation; // Description of an invocation to a constructor, given to an interceptor upon constructor-call.\npublic interface Interceptor extends Advice; // This interface represents a generic interceptor.\npublic interface Invocation extends Joinpoint; // This interface represents an invocation in the program.\npublic interface Joinpoint; // This interface represents a generic runtime joinpoint (in the AOP terminology).\n@FunctionalInterface public interface MethodInterceptor extends Interceptor; // Intercepts calls on an interface on its way to the target.\npublic interface MethodInvocation extends Invocation; // Description of an invocation to a method, given to an interceptor upon method-call.\n", "des": "The AOP Alliance reflective interception abstraction."}
{"index": 1799, "repo": "spring-aop-6.0.11", "code": "package aop;\n\npackage aop.aspectj; // AspectJ integration package.\npackage aop.config; // Support package for declarative AOP configuration, with XML schema being the primary configuration format.\npackage aop.framework; // Package containing Spring's basic AOP infrastructure, compliant with the AOP Alliance interfaces.\npackage aop.interceptor; // Provides miscellaneous interceptor implementations.\npackage aop.scope; // Support for AOP-based scoping of target objects, with configurable backend.\npackage aop.support; // Convenience classes for using Spring's AOP API.\npackage aop.target; // Various TargetSource implementations for use with Spring AOP.\npublic interface Advisor; // Base interface holding AOP advice (action to take at a joinpoint) and a filter determining the applicability of the advice (such as a pointcut).\npublic interface AfterAdvice extends Advice; // Common marker interface for after advice, such as AfterReturningAdvice and ThrowsAdvice.\npublic interface AfterReturningAdvice extends AfterAdvice; // After returning advice is invoked only on normal method return, not if an exception is thrown.\npublic class AopInvocationException extends org.springframework.core.NestedRuntimeException; // Exception that gets thrown when an AOP invocation failed because of misconfiguration or unexpected runtime issues.\npublic interface BeforeAdvice extends Advice; // Common marker interface for before advice, such as MethodBeforeAdvice.\n@FunctionalInterface public interface ClassFilter; // Filter that restricts matching of a pointcut or introduction to a given set of target classes.\npublic interface DynamicIntroductionAdvice extends Advice; // Subinterface of AOP Alliance Advice that allows additional interfaces to be implemented by an Advice, and available via a proxy using that interceptor.\npublic interface IntroductionAdvisor extends Advisor, IntroductionInfo; // Superinterface for advisors that perform one or more AOP introductions.\npublic interface IntroductionAwareMethodMatcher extends MethodMatcher; // A specialized type of MethodMatcher that takes into account introductions when matching methods.\npublic interface IntroductionInfo; // Interface supplying the information necessary to describe an introduction.\n", "des": "Core Spring AOP interfaces, built on AOP Alliance AOP interoperability interfaces."}
{"index": 1800, "repo": "spring-aop-6.0.11", "code": "package aspectj;\n\npackage aspectj.annotation; // Classes enabling AspectJ 5 @Annotated classes to be used in Spring AOP.\npackage aspectj.autoproxy; // Base classes enabling auto-proxying based on AspectJ.\npublic abstract class AbstractAspectJAdvice extends Object implements Advice, AspectJPrecedenceInformation, Serializable; // Base class for AOP Alliance Advice classes wrapping an AspectJ aspect or an AspectJ-annotated advice method.\npublic interface AspectInstanceFactory extends org.springframework.core.Ordered; // Interface implemented to provide an instance of an AspectJ aspect.\npublic class AspectJAdviceParameterNameDiscoverer extends Object implements org.springframework.core.ParameterNameDiscoverer; // ParameterNameDiscoverer implementation that tries to deduce parameter names for an advice method from the pointcut expression, returning, and throwing clauses.\npublic static class AspectJAdviceParameterNameDiscoverer.AmbiguousBindingException extends RuntimeException; // Thrown in response to an ambiguous binding being detected when trying to resolve a method's parameter names.\npublic class AspectJAfterAdvice extends AbstractAspectJAdvice implements MethodInterceptor, AfterAdvice, Serializable; // Spring AOP advice wrapping an AspectJ after advice method.\npublic class AspectJAfterReturningAdvice extends AbstractAspectJAdvice implements AfterReturningAdvice, AfterAdvice, Serializable; // Spring AOP advice wrapping an AspectJ after-returning advice method.\npublic class AspectJAfterThrowingAdvice extends AbstractAspectJAdvice implements MethodInterceptor, AfterAdvice, Serializable; // Spring AOP advice wrapping an AspectJ after-throwing advice method.\npublic abstract class AspectJAopUtils extends Object; // Utility methods for dealing with AspectJ advisors.\npublic class AspectJAroundAdvice extends AbstractAspectJAdvice implements MethodInterceptor, Serializable; // Spring AOP around advice (MethodInterceptor) that wraps an AspectJ advice method.\npublic class AspectJExpressionPointcut extends AbstractExpressionPointcut implements ClassFilter, IntroductionAwareMethodMatcher, org.springframework.beans.factory.BeanFactoryAware; // Spring Pointcut implementation that uses the AspectJ weaver to evaluate a pointcut expression.\n", "des": "AspectJ integration package."}
{"index": 1801, "repo": "spring-aop-6.0.11", "code": "package annotation;\n\npublic abstract class AbstractAspectJAdvisorFactory extends Object implements AspectJAdvisorFactory; // Abstract base class for factories that can create Spring AOP Advisors given AspectJ classes from classes honoring the AspectJ 5 annotation syntax.\nprotected static class AbstractAspectJAdvisorFactory.AspectJAnnotation extends Object; // Class modeling an AspectJ annotation, exposing its type enumeration and pointcut String.\nprotected static enum AbstractAspectJAdvisorFactory.AspectJAnnotationType extends Enum<AbstractAspectJAdvisorFactory.AspectJAnnotationType>; // Enum for AspectJ annotation types.\npublic class AnnotationAwareAspectJAutoProxyCreator extends AspectJAwareAdvisorAutoProxyCreator; // AspectJAwareAdvisorAutoProxyCreator subclass that processes all AspectJ annotation aspects in the current application context, as well as Spring Advisors.\npublic interface AspectJAdvisorFactory; // Interface for factories that can create Spring AOP Advisors from classes annotated with AspectJ annotation syntax.\npublic class AspectJProxyFactory extends ProxyCreatorSupport; // AspectJ-based proxy factory, allowing for programmatic building of proxies which include AspectJ aspects (code style as well annotation style).\npublic class AspectMetadata extends Object implements Serializable; // Metadata for an AspectJ aspect class, with an additional Spring AOP pointcut for the per clause.\npublic class BeanFactoryAspectInstanceFactory extends Object implements MetadataAwareAspectInstanceFactory, Serializable; // AspectInstanceFactory implementation backed by a Spring BeanFactory.\npublic class BeanFactoryAspectJAdvisorsBuilder extends Object; // Helper for retrieving @AspectJ beans from a BeanFactory and building Spring Advisors based on them, for use with auto-proxying.\npublic class LazySingletonAspectInstanceFactoryDecorator extends Object implements MetadataAwareAspectInstanceFactory, Serializable; // Decorator to cause a MetadataAwareAspectInstanceFactory to instantiate only once.\npublic interface MetadataAwareAspectInstanceFactory extends AspectInstanceFactory; // Subinterface of AspectInstanceFactory that returns AspectMetadata associated with AspectJ-annotated classes.\npublic class NotAnAtAspectException extends AopConfigException; // Extension of AopConfigException thrown when trying to perform an advisor generation operation on a class that is not an AspectJ annotation-style aspect.\n", "des": "Classes enabling AspectJ 5 @Annotated classes to be used in Spring AOP."}
{"index": 1802, "repo": "spring-aop-6.0.11", "code": "package autoproxy;\n\npublic class AspectJAwareAdvisorAutoProxyCreator extends AbstractAdvisorAutoProxyCreator; // AbstractAdvisorAutoProxyCreator subclass that exposes AspectJ's invocation context and understands AspectJ's rules for advice precedence when multiple pieces of advice come from the same aspect.\n", "des": "Base classes enabling auto-proxying based on AspectJ."}
{"index": 1803, "repo": "spring-aop-6.0.11", "code": "package config;\n\npublic abstract class AbstractInterceptorDrivenBeanDefinitionDecorator extends Object implements org.springframework.beans.factory.xml.BeanDefinitionDecorator; // Base implementation for BeanDefinitionDecorators wishing to add an interceptor to the resulting bean.\npublic class AdviceEntry extends Object implements org.springframework.beans.factory.parsing.ParseState.Entry; // ParseState entry representing an advice element.\npublic class AdvisorComponentDefinition extends org.springframework.beans.factory.parsing.AbstractComponentDefinition; // ComponentDefinition that bridges the gap between the advisor bean definition configured by the <aop:advisor> tag and the component definition infrastructure.\npublic class AdvisorEntry extends Object implements org.springframework.beans.factory.parsing.ParseState.Entry; // ParseState entry representing an advisor.\npublic abstract class AopConfigUtils extends Object; // Utility class for handling registration of AOP auto-proxy creators.\npublic class AopNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for the aop namespace.\npublic abstract class AopNamespaceUtils extends Object; // Utility class for handling registration of auto-proxy creators used internally by the 'aop' namespace tags.\npublic class AspectComponentDefinition extends org.springframework.beans.factory.parsing.CompositeComponentDefinition; // ComponentDefinition that holds an aspect definition, including its nested pointcuts.\npublic class AspectEntry extends Object implements org.springframework.beans.factory.parsing.ParseState.Entry; // ParseState entry representing an aspect.\npublic class MethodLocatingFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Method>, org.springframework.beans.factory.BeanFactoryAware; // FactoryBean implementation that locates a Method on a specified bean.\npublic class PointcutComponentDefinition extends org.springframework.beans.factory.parsing.AbstractComponentDefinition; // ComponentDefinition implementation that holds a pointcut definition.\npublic class PointcutEntry extends Object implements org.springframework.beans.factory.parsing.ParseState.Entry; // ParseState entry representing a pointcut.\n", "des": "Support package for declarative AOP configuration, with XML schema being the primary configuration format."}
{"index": 1804, "repo": "spring-aop-6.0.11", "code": "package framework;\n\npackage framework.adapter; // SPI package allowing Spring AOP framework to handle arbitrary advice types.\npackage framework.autoproxy; // Bean post-processors for use in ApplicationContexts to simplify AOP usage by automatically creating AOP proxies without the need to use a ProxyFactoryBean.\npublic abstract class AbstractAdvisingBeanPostProcessor extends ProxyProcessorSupport implements org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor; // Base class for BeanPostProcessor implementations that apply a Spring AOP Advisor to specific beans.\npublic abstract class AbstractSingletonProxyFactoryBean extends ProxyConfig implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Convenient superclass for FactoryBean types that produce singleton-scoped proxy objects.\npublic interface Advised extends TargetClassAware; // Interface to be implemented by classes that hold the configuration of a factory of AOP proxies.\npublic class AdvisedSupport extends ProxyConfig implements Advised; // Base class for AOP proxy configuration managers.\npublic interface AdvisedSupportListener; // Listener to be registered on ProxyCreatorSupport objects Allows for receiving callbacks on activation and change of advice.\npublic interface AdvisorChainFactory; // Factory interface for advisor chains.\npublic class AopConfigException extends org.springframework.core.NestedRuntimeException; // Exception that gets thrown on illegal AOP configuration arguments.\npublic final class AopContext extends Object; // Class containing static methods used to obtain information about the current AOP invocation.\npublic interface AopInfrastructureBean; // Marker interface that indicates a bean that is part of Spring's AOP infrastructure.\npublic interface AopProxy; // Delegate interface for a configured AOP proxy, allowing for the creation of actual proxy objects.\npublic interface AopProxyFactory; // Interface to be implemented by factories that are able to create AOP proxies based on AdvisedSupport configuration objects.\npublic abstract class AopProxyUtils extends Object; // Utility methods for AOP proxy factories.\npublic class DefaultAdvisorChainFactory extends Object implements AdvisorChainFactory, Serializable; // A simple but definitive way of working out an advice chain for a Method, given an Advised object.\n", "des": "Package containing Spring's basic AOP infrastructure, compliant with the AOP Alliance interfaces."}
{"index": 1805, "repo": "spring-aop-6.0.11", "code": "package adapter;\n\npublic interface AdvisorAdapter; // Interface allowing extension to the Spring AOP framework to allow handling of new Advisors and Advice types.\npublic class AdvisorAdapterRegistrationManager extends Object implements org.springframework.beans.factory.config.BeanPostProcessor; // BeanPostProcessor that registers AdvisorAdapter beans in the BeanFactory with an AdvisorAdapterRegistry (by default the GlobalAdvisorAdapterRegistry).\npublic interface AdvisorAdapterRegistry; // Interface for registries of Advisor adapters.\npublic class AfterReturningAdviceInterceptor extends Object implements MethodInterceptor, AfterAdvice, Serializable; // Interceptor to wrap an AfterReturningAdvice.\npublic class DefaultAdvisorAdapterRegistry extends Object implements AdvisorAdapterRegistry, Serializable; // Default implementation of the AdvisorAdapterRegistry interface.\npublic final class GlobalAdvisorAdapterRegistry extends Object; // Singleton to publish a shared DefaultAdvisorAdapterRegistry instance.\npublic class MethodBeforeAdviceInterceptor extends Object implements MethodInterceptor, BeforeAdvice, Serializable; // Interceptor to wrap a MethodBeforeAdvice.\npublic class ThrowsAdviceInterceptor extends Object implements MethodInterceptor, AfterAdvice; // Interceptor to wrap an after-throwing advice.\npublic class UnknownAdviceTypeException extends IllegalArgumentException; // Exception thrown when an attempt is made to use an unsupported Advisor or Advice type.\n", "des": "SPI package allowing Spring AOP framework to handle arbitrary advice types."}
{"index": 1806, "repo": "spring-aop-6.0.11", "code": "package autoproxy;\n\npackage autoproxy.target; // Various TargetSourceCreator implementations for use with Spring's AOP auto-proxying support.\npublic abstract class AbstractAdvisorAutoProxyCreator extends AbstractAutoProxyCreator; // Generic auto proxy creator that builds AOP proxies for specific beans based on detected Advisors for each bean.\npublic abstract class AbstractAutoProxyCreator extends ProxyProcessorSupport implements org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor, org.springframework.beans.factory.BeanFactoryAware; // BeanPostProcessor implementation that wraps each eligible bean with an AOP proxy, delegating to specified interceptors before invoking the bean itself.\npublic abstract class AbstractBeanFactoryAwareAdvisingPostProcessor extends AbstractAdvisingBeanPostProcessor implements org.springframework.beans.factory.BeanFactoryAware; // Extension of AbstractAutoProxyCreator which implements BeanFactoryAware, adds exposure of the original target class for each proxied bean (AutoProxyUtils.ORIGINAL_TARGET_CLASS_ATTRIBUTE), and participates in an externally enforced target-class mode for any given bean (AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE).\npublic abstract class AutoProxyUtils extends Object; // Utilities for auto-proxy aware components.\npublic class BeanFactoryAdvisorRetrievalHelper extends Object; // Helper for retrieving standard Spring Advisors from a BeanFactory, for use with auto-proxying.\npublic class BeanNameAutoProxyCreator extends AbstractAutoProxyCreator; // Auto proxy creator that identifies beans to proxy via a list of names.\npublic class DefaultAdvisorAutoProxyCreator extends AbstractAdvisorAutoProxyCreator implements org.springframework.beans.factory.BeanNameAware; // BeanPostProcessor implementation that creates AOP proxies based on all candidate Advisors in the current BeanFactory.\npublic class InfrastructureAdvisorAutoProxyCreator extends AbstractAdvisorAutoProxyCreator; // Auto-proxy creator that considers infrastructure Advisor beans only, ignoring any application-defined Advisors.\npublic final class ProxyCreationContext extends Object; // Holder for the current proxy creation context, as exposed by auto-proxy creators such as AbstractAdvisorAutoProxyCreator.\n@FunctionalInterface public interface TargetSourceCreator; // Implementations can create special target sources, such as pooling target sources, for particular beans.\n", "des": "Bean post-processors for use in ApplicationContexts to simplify AOP usage by automatically creating AOP proxies without the need to use a ProxyFactoryBean."}
{"index": 1807, "repo": "spring-aop-6.0.11", "code": "package target;\n\npublic abstract class AbstractBeanFactoryBasedTargetSourceCreator extends Object implements TargetSourceCreator, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.DisposableBean; // Convenient superclass for TargetSourceCreator implementations that require creating multiple instances of a prototype bean.\npublic class LazyInitTargetSourceCreator extends AbstractBeanFactoryBasedTargetSourceCreator; // TargetSourceCreator that enforces a LazyInitTargetSource for each bean that is defined as \"lazy-init\".\npublic class QuickTargetSourceCreator extends AbstractBeanFactoryBasedTargetSourceCreator; // Convenient TargetSourceCreator using bean name prefixes to create one of three well-known TargetSource types: : CommonsPool2TargetSource % ThreadLocalTargetSource ! PrototypeTargetSource\n", "des": "Various TargetSourceCreator implementations for use with Spring's AOP auto-proxying support."}
{"index": 1808, "repo": "spring-aop-6.0.11", "code": "package interceptor;\n\npublic abstract class AbstractMonitoringInterceptor extends AbstractTraceInterceptor; // Base class for monitoring interceptors, such as performance monitors.\npublic abstract class AbstractTraceInterceptor extends Object implements MethodInterceptor, Serializable; // Base MethodInterceptor implementation for tracing.\npublic abstract class AsyncExecutionAspectSupport extends Object implements org.springframework.beans.factory.BeanFactoryAware; // Base class for asynchronous method execution aspects, such as org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor or org.springframework.scheduling.aspectj.AnnotationAsyncExecutionAspect.\npublic class AsyncExecutionInterceptor extends AsyncExecutionAspectSupport implements MethodInterceptor, org.springframework.core.Ordered; // AOP Alliance MethodInterceptor that processes method invocations asynchronously, using a given AsyncTaskExecutor.\n@FunctionalInterface public interface AsyncUncaughtExceptionHandler; // A strategy for handling uncaught exceptions thrown from asynchronous methods.\npublic class ConcurrencyThrottleInterceptor extends org.springframework.util.ConcurrencyThrottleSupport implements MethodInterceptor, Serializable; // Interceptor that throttles concurrent access, blocking invocations if a specified concurrency limit is reached.\npublic class CustomizableTraceInterceptor extends AbstractTraceInterceptor; // MethodInterceptor implementation that allows for highly customizable method-level tracing, using placeholders.\npublic class DebugInterceptor extends SimpleTraceInterceptor; // AOP Alliance MethodInterceptor that can be introduced in a chain to display verbose information about intercepted invocations to the logger.\npublic abstract class ExposeBeanNameAdvisors extends Object; // Convenient methods for creating advisors that may be used when autoproxying beans created with the Spring IoC container, binding the bean name to the current invocation.\npublic final class ExposeInvocationInterceptor extends Object implements MethodInterceptor, org.springframework.core.PriorityOrdered, Serializable; // Interceptor that exposes the current MethodInvocation as a thread-local object.\npublic class PerformanceMonitorInterceptor extends AbstractMonitoringInterceptor; // Simple AOP Alliance MethodInterceptor for performance monitoring.\npublic class SimpleAsyncUncaughtExceptionHandler extends Object implements AsyncUncaughtExceptionHandler; // A default AsyncUncaughtExceptionHandler that simply logs the exception.\npublic class SimpleTraceInterceptor extends AbstractTraceInterceptor; // Simple AOP Alliance MethodInterceptor that can be introduced in a chain to display verbose trace information about intercepted method invocations, with method entry and method exit info.\n", "des": "Provides miscellaneous interceptor implementations."}
{"index": 1809, "repo": "spring-aop-6.0.11", "code": "package scope;\n\npublic class DefaultScopedObject extends Object implements ScopedObject, Serializable; // Default implementation of the ScopedObject interface.\npublic interface ScopedObject extends RawTargetAccess; // An AOP introduction interface for scoped objects.\npublic class ScopedProxyFactoryBean extends ProxyConfig implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.BeanFactoryAware, AopInfrastructureBean; // Convenient proxy factory bean for scoped objects.\npublic abstract class ScopedProxyUtils extends Object; // Utility class for creating a scoped proxy.\n", "des": "Support for AOP-based scoping of target objects, with configurable backend."}
{"index": 1810, "repo": "spring-aop-6.0.11", "code": "package support;\n\npackage support.annotation; // Annotation support for AOP pointcuts.\npublic abstract class AbstractBeanFactoryPointcutAdvisor extends AbstractPointcutAdvisor implements org.springframework.beans.factory.BeanFactoryAware; // Abstract BeanFactory-based PointcutAdvisor that allows for any Advice to be configured as reference to an Advice bean in a BeanFactory.\npublic abstract class AbstractExpressionPointcut extends Object implements ExpressionPointcut, Serializable; // Abstract superclass for expression pointcuts, offering location and expression properties.\npublic abstract class AbstractGenericPointcutAdvisor extends AbstractPointcutAdvisor; // Abstract generic PointcutAdvisor that allows for any Advice to be configured.\npublic abstract class AbstractPointcutAdvisor extends Object implements PointcutAdvisor, org.springframework.core.Ordered, Serializable; // Abstract base class for PointcutAdvisor implementations.\npublic abstract class AbstractRegexpMethodPointcut extends StaticMethodMatcherPointcut implements Serializable; // Abstract base regular expression pointcut bean.\npublic abstract class AopUtils extends Object; // Utility methods for AOP support code.\npublic abstract class ClassFilters extends Object; // Static utility methods for composing ClassFilters.\npublic class ComposablePointcut extends Object implements Pointcut, Serializable; // Convenient class for building up pointcuts.\npublic class ControlFlowPointcut extends Object implements Pointcut, ClassFilter, MethodMatcher, Serializable; // Pointcut and method matcher for use in simple cflow-style pointcut.\npublic class DefaultBeanFactoryPointcutAdvisor extends AbstractBeanFactoryPointcutAdvisor; // Concrete BeanFactory-based PointcutAdvisor that allows for any Advice to be configured as reference to an Advice bean in the BeanFactory, as well as the Pointcut to be configured through a bean property.\npublic class DefaultIntroductionAdvisor extends Object implements IntroductionAdvisor, ClassFilter, org.springframework.core.Ordered, Serializable; // Simple IntroductionAdvisor implementation that by default applies to any class.\npublic class DefaultPointcutAdvisor extends AbstractGenericPointcutAdvisor implements Serializable; // Convenient Pointcut-driven Advisor implementation.\npublic class DelegatePerTargetObjectIntroductionInterceptor extends IntroductionInfoSupport implements IntroductionInterceptor; // Convenient implementation of the IntroductionInterceptor interface.\n", "des": "Convenience classes for using Spring's AOP API."}
{"index": 1811, "repo": "spring-aop-6.0.11", "code": "package annotation;\n\npublic class AnnotationClassFilter extends Object implements ClassFilter; // Simple ClassFilter that looks for a specific annotation being present on a class.\npublic class AnnotationMatchingPointcut extends Object implements Pointcut; // Simple Pointcut that looks for a specific annotation being present on a class or method.\npublic class AnnotationMethodMatcher extends StaticMethodMatcher; // Simple MethodMatcher that looks for a specific annotation being present on a method (checking both the method on the invoked interface, if any, and the corresponding method on the target class).\n", "des": "Annotation support for AOP pointcuts."}
{"index": 1812, "repo": "spring-aop-6.0.11", "code": "package target;\n\npackage target.dynamic; // Support for dynamic, refreshable TargetSource implementations for use with Spring AOP.\npublic abstract class AbstractBeanFactoryBasedTargetSource extends Object implements TargetSource, org.springframework.beans.factory.BeanFactoryAware, Serializable; // Base class for TargetSource implementations that are based on a Spring BeanFactory, delegating to Spring-managed bean instances.\npublic abstract class AbstractLazyCreationTargetSource extends Object implements TargetSource; // TargetSource implementation that will lazily create a user-managed object.\npublic abstract class AbstractPoolingTargetSource extends AbstractPrototypeBasedTargetSource implements PoolingConfig, org.springframework.beans.factory.DisposableBean; // Abstract base class for pooling TargetSource implementations which maintain a pool of target instances, acquiring and releasing a target object from the pool for each method invocation.\npublic abstract class AbstractPrototypeBasedTargetSource extends AbstractBeanFactoryBasedTargetSource; // Base class for dynamic TargetSource implementations that create new prototype bean instances to support a pooling or new-instance-per-invocation strategy.\npublic class CommonsPool2TargetSource extends AbstractPoolingTargetSource implements org.apache.commons.pool2.PooledObjectFactory<Object>; // TargetSource implementation that holds objects in a configurable Apache Commons2 Pool.\npublic final class EmptyTargetSource extends Object implements TargetSource, Serializable; // Canonical TargetSource when there is no target (or just the target class known), and behavior is supplied by interfaces and advisors only.\npublic class HotSwappableTargetSource extends Object implements TargetSource, Serializable; // TargetSource implementation that caches a local target object, but allows the target to be swapped while the application is running.\npublic class LazyInitTargetSource extends AbstractBeanFactoryBasedTargetSource; // TargetSource that lazily accesses a singleton bean from a BeanFactory.\npublic interface PoolingConfig; // Config interface for a pooling target source.\npublic class PrototypeTargetSource extends AbstractPrototypeBasedTargetSource; // TargetSource implementation that creates a new instance of the target bean for each request, destroying each instance on release (after each request).\npublic class SimpleBeanTargetSource extends AbstractBeanFactoryBasedTargetSource; // Simple TargetSource implementation, freshly obtaining the specified target bean from its containing Spring BeanFactory.\n", "des": "Various TargetSource implementations for use with Spring AOP."}
{"index": 1813, "repo": "spring-aop-6.0.11", "code": "package dynamic;\n\npublic abstract class AbstractRefreshableTargetSource extends Object implements TargetSource, Refreshable; // Abstract TargetSource implementation that wraps a refreshable target object.\npublic class BeanFactoryRefreshableTargetSource extends AbstractRefreshableTargetSource; // Refreshable TargetSource that fetches fresh target beans from a BeanFactory.\npublic interface Refreshable; // Interface to be implemented by dynamic target objects, which support reloading and optionally polling for updates.\n", "des": "Support for dynamic, refreshable TargetSource implementations for use with Spring AOP."}
{"index": 1814, "repo": "spring-integration-mail-6.1.2", "code": "package mail;\n\npackage mail.config; // Provides classes for configuration - parsers, namespace handlers.\npackage mail.dsl; // Provides Mail Components for the Java DSL.\npackage mail.event; // Events generated by the mail module\npackage mail.support; // Provides classes to support email.\npackage mail.transformer; // Provides classes related to transforming mail messages.\npublic abstract class AbstractMailReceiver extends org.springframework.integration.context.IntegrationObjectSupport implements MailReceiver, org.springframework.beans.factory.DisposableBean; // Base class for MailReceiver implementations.\npublic class ImapIdleChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.context.ApplicationEventPublisherAware; // An event-driven Channel Adapter that receives mail messages from a mail server that supports the IMAP \"idle\" command (see RFC 2177).\npublic class ImapMailReceiver extends AbstractMailReceiver; // A MailReceiver implementation for receiving mail messages from a mail server that supports the IMAP protocol.\npublic final class MailHeaders extends Object; // Pre-defined header names to be used for setting and/or retrieving Mail Message attributes from/to integration Message Headers.\npublic interface MailReceiver; // Strategy interface for receiving mail Messages.\npublic class MailReceivingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<Object>; // MessageSource implementation that delegates to a MailReceiver to poll a mailbox.\npublic class MailSendingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler; // A MessageHandler implementation for sending mail.\npublic abstract class MailTransportUtils extends Object; // Collection of utility methods to work with Mail transports.\npublic class Pop3MailReceiver extends AbstractMailReceiver; // A MailReceiver implementation that polls a mail server using the POP3 protocol.\n@FunctionalInterface public interface SearchTermStrategy; // Strategy to be used to generate a SearchTerm.\n", "des": "Base package for Mail support."}
{"index": 1815, "repo": "spring-integration-mail-6.1.2", "code": "package config;\n\npublic class ImapIdleChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser; // Parser for the <imap-idle-channel-adapter> element in the 'mail' namespace.\npublic class MailHeaderEnricherParser extends org.springframework.integration.config.xml.HeaderEnricherParserSupport;\npublic class MailInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Parser for the <inbound-channel-adapter> element of Spring Integration's 'mail' namespace.\npublic class MailNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for the 'mail' namespace.\npublic class MailOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the <outbound-channel-adapter/> element of the 'mail' namespace.\npublic class MailReceiverFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<MailReceiver>;\npublic class MailToStringTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser; // Parser for the <mail-to-string-transformer> element.\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 1816, "repo": "spring-integration-mail-6.1.2", "code": "package dsl;\n\npublic class ImapIdleChannelAdapterSpec extends org.springframework.integration.dsl.MessageProducerSpec<ImapIdleChannelAdapterSpec,ImapIdleChannelAdapter> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessageProducerSpec for a ImapIdleChannelAdapter.\npublic class ImapMailInboundChannelAdapterSpec extends MailInboundChannelAdapterSpec<ImapMailInboundChannelAdapterSpec,ImapMailReceiver>; // A MailInboundChannelAdapterSpec for IMAP.\npublic final class Mail extends Object; // The factory for Spring Integration Mail components.\npublic class MailHeadersBuilder extends org.springframework.integration.support.MapBuilder<MailHeadersBuilder,String,Object>; // The Mail specific MapBuilder implementation.\npublic abstract class MailInboundChannelAdapterSpec<S extends MailInboundChannelAdapterSpec<S,R>,R extends AbstractMailReceiver> extends org.springframework.integration.dsl.MessageSourceSpec<S,MailReceivingMessageSource> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessageSourceSpec for a MailReceivingMessageSource.\npublic class MailSendingMessageHandlerSpec extends org.springframework.integration.dsl.MessageHandlerSpec<MailSendingMessageHandlerSpec,MailSendingMessageHandler>;\npublic class Pop3MailInboundChannelAdapterSpec extends MailInboundChannelAdapterSpec<Pop3MailInboundChannelAdapterSpec,Pop3MailReceiver>; // A MailInboundChannelAdapterSpec for POP3.\n", "des": "Provides Mail Components for the Java DSL."}
{"index": 1817, "repo": "spring-integration-mail-6.1.2", "code": "package event;\n\npublic abstract class MailIntegrationEvent extends org.springframework.integration.events.IntegrationEvent;\n", "des": "Events generated by the mail module"}
{"index": 1818, "repo": "spring-integration-mail-6.1.2", "code": "package support;\n\npublic class DefaultMailHeaderMapper extends Object implements org.springframework.integration.mapping.HeaderMapper<jakarta.mail.internet.MimeMessage>; // Maps an inbound MimeMessage to a Map.\npublic final class MailUtils extends Object; // Utilities for handling mail messages.\n", "des": "Provides classes to support email."}
{"index": 1819, "repo": "spring-integration-mail-6.1.2", "code": "package transformer;\n\npublic abstract class AbstractMailMessageTransformer<T> extends Object implements org.springframework.integration.transformer.Transformer, org.springframework.beans.factory.BeanFactoryAware; // Base class for Transformers that convert from a JavaMail Message to a Spring Integration Message.\npublic class MailToStringTransformer extends AbstractMailMessageTransformer<String>; // Transforms a Message payload of type Message to a String.\n", "des": "Provides classes related to transforming mail messages."}
{"index": 1820, "repo": "pulsar-client-original-3.0.0", "code": "package impl;\n\npackage impl.auth; // Pulsar Client authentication.\npackage impl.customroute; // Pulsar Client customized routing mode.\npackage impl.schema; // Pulsar Client schema.\npackage impl.transaction; // Transaction client implementation.\npublic abstract class AbstractBatchMessageContainer extends Object implements BatchMessageContainerBase; // Batch message container framework.\npublic interface AcknowledgmentsGroupingTracker extends AutoCloseable; // Acknowledgments grouping tracker.\npublic class AuthenticationUtil extends Object;\npublic class AutoClusterFailover extends Object implements ServiceUrlProvider;\npublic static class AutoClusterFailover.AutoClusterFailoverBuilderImpl extends Object implements AutoClusterFailoverBuilder;\npublic class Backoff extends Object;\npublic class BackoffBuilder extends Object;\npublic interface BatchMessageContainerBase extends BatchMessageContainer;\npublic class BatchMessageIdImpl extends MessageIdImpl;\npublic class BinaryProtoLookupService extends Object implements LookupService;\npublic static class BinaryProtoLookupService.LookupDataResult extends Object;\npublic class ChunkMessageIdImpl extends MessageIdImpl;\npublic class ClientBuilderImpl extends Object implements ClientBuilder;\npublic class ClientCnx extends PulsarHandler; // Channel handler for the Pulsar client.\nprotected static enum ClientCnx.State extends Enum<ClientCnx.State>;\npublic class ClientCnxIdleState extends Object;\npublic static enum ClientCnxIdleState.State extends Enum<ClientCnxIdleState.State>; // Indicates the usage status of the connection and whether it has been released.\npublic class ConnectionHandler extends Object;\npublic class ConnectionPool extends Object implements AutoCloseable;\npublic abstract class ConsumerBase<T> extends Object implements Consumer<T>;\nprotected static final class ConsumerBase.OpBatchReceive<T> extends Object;\npublic class ConsumerBuilderImpl<T> extends Object implements ConsumerBuilder<T>;\npublic class ConsumerId extends Object implements Comparable<ConsumerId>;\npublic class ConsumerImpl<T> extends ConsumerBase<T>;\npublic class ConsumerInterceptors<T> extends Object implements Closeable; // A container that hold the list ConsumerInterceptor and wraps calls to the chain of custom interceptors.\npublic class ConsumerStatsDisabled extends Object implements ConsumerStatsRecorder;\npublic interface ConsumerStatsRecorder extends ConsumerStats;\npublic class ConsumerStatsRecorderImpl extends Object implements ConsumerStatsRecorder;\n", "des": "Pulsar Client implementation."}
{"index": 1821, "repo": "pulsar-client-original-3.0.0", "code": "package auth;\n\npublic class AuthenticationBasic extends Object implements Authentication, EncodedAuthenticationParameterSupport;\npublic class AuthenticationDataBasic extends Object implements AuthenticationDataProvider;\npublic class AuthenticationDataKeyStoreTls extends Object implements AuthenticationDataProvider;\npublic class AuthenticationDataNull extends Object implements AuthenticationDataProvider;\npublic class AuthenticationDataTls extends Object implements AuthenticationDataProvider;\npublic class AuthenticationDataToken extends Object implements AuthenticationDataProvider;\npublic class AuthenticationDisabled extends Object implements Authentication, EncodedAuthenticationParameterSupport;\npublic class AuthenticationKeyStoreTls extends Object implements Authentication, EncodedAuthenticationParameterSupport; // This plugin requires these parameters: keyStoreType, keyStorePath, and keyStorePassword.\npublic class AuthenticationTls extends Object implements Authentication, EncodedAuthenticationParameterSupport; // This plugin requires these parameters tlsCertFile: A file path for a client certificate.\npublic class AuthenticationToken extends Object implements Authentication, EncodedAuthenticationParameterSupport; // Token based authentication provider.\n", "des": "Pulsar Client authentication."}
{"index": 1822, "repo": "pulsar-client-original-3.0.0", "code": "package customroute;\n\npublic class PartialRoundRobinMessageRouterImpl extends Object implements MessageRouter;\n", "des": "Pulsar Client customized routing mode."}
{"index": 1823, "repo": "pulsar-client-original-3.0.0", "code": "package schema;\n\npackage schema.reader; // Pulsar Client schema reader.\npublic abstract class AbstractSchema<T> extends Object implements Schema<T>;\npublic abstract class AbstractStructSchema<T> extends AbstractSchema<T>; // minimal abstract StructSchema.\npublic class AutoConsumeSchema extends Object implements Schema<GenericRecord>; // Auto detect schema, returns only GenericRecord instances.\npublic class AutoProduceBytesSchema<T> extends Object implements Schema<byte[]>; // Auto detect schema.\npublic abstract class AvroBaseStructSchema<T> extends AbstractStructSchema<T>; // This is a base schema implementation for Avro Based `Struct` types.\npublic class AvroSchema<T> extends AvroBaseStructSchema<T>; // An AVRO schema implementation.\npublic static class AvroSchema.TimestampConversion extends org.apache.avro.Conversion<org.joda.time.DateTime>;\npublic class BooleanSchema extends AbstractSchema<Boolean>; // A schema for `Boolean`.\npublic class ByteBufferSchema extends AbstractSchema<ByteBuffer>; // A bytebuffer schema is effectively a `BYTES` schema.\npublic class ByteBufSchema extends AbstractSchema<io.netty.buffer.ByteBuf>; // A variant `Bytes` schema that takes ByteBuf.\npublic class ByteSchema extends AbstractSchema<Byte>; // A schema for 'Byte'.\npublic class BytesSchema extends AbstractSchema<byte[]>; // A schema for bytes array.\npublic class DateSchema extends AbstractSchema<Date>; // A schema for `java.util.Date` or `java.sql.Date`.\npublic class DoubleSchema extends AbstractSchema<Double>; // A schema for `Double`.\npublic class FloatSchema extends AbstractSchema<Float>; // A schema for `Float`.\npublic class InstantSchema extends AbstractSchema<Instant>; // A schema for `java.time.Instant`.\npublic class IntSchema extends AbstractSchema<Integer>; // A schema for `Integer`.\npublic class JSONSchema<T> extends AvroBaseStructSchema<T>; // A schema implementation to deal with json data.\npublic class KeyValueSchemaImpl<K,V> extends AbstractSchema<KeyValue<K,V>> implements KeyValueSchema<K,V>; // [Key, Value] pair schema definition.\n", "des": "Pulsar Client schema."}
{"index": 1824, "repo": "pulsar-client-original-3.0.0", "code": "package reader;\n\npublic abstract class AbstractMultiVersionAvroBaseReader<T> extends AbstractMultiVersionReader<T>; // The abstract class of multi version avro base reader.\npublic abstract class AbstractMultiVersionReader<T> extends Object implements SchemaReader<T>; // The multi version reader abstract class, implement it will handle the multi version schema.\npublic class AvroReader<T> extends Object implements SchemaReader<T>;\npublic class JacksonJsonReader<T> extends Object implements SchemaReader<T>; // Reader implementation for reading objects from JSON.\n@Deprecated public class JsonReader<T> extends Object implements SchemaReader<T>;\npublic class MultiVersionAvroReader<T> extends AbstractMultiVersionAvroBaseReader<T>; // A multi version avro reader.\npublic class ProtobufNativeReader<T extends com.google.protobuf.GeneratedMessageV3> extends ProtobufReader<T>;\npublic class ProtobufReader<T extends com.google.protobuf.GeneratedMessageV3> extends Object implements SchemaReader<T>;\n", "des": "Pulsar Client schema reader."}
{"index": 1825, "repo": "pulsar-client-original-3.0.0", "code": "package transaction;\n\npublic interface TransactionBufferHandler; // Interface of transaction buffer handler.\npublic class TransactionBuilderImpl extends Object implements TransactionBuilder; // The default implementation of transaction builder to build transactions.\npublic class TransactionCoordinatorClientImpl extends Object implements TransactionCoordinatorClient; // Transaction coordinator client based topic assigned.\npublic class TransactionImpl extends Object implements Transaction, io.netty.util.TimerTask; // The default implementation of Transaction.\n", "des": "Transaction client implementation."}
{"index": 1826, "repo": "pulsar-client-original-3.0.0", "code": "package util;\n\npublic class ConsumerName extends Object;\npublic class ExecutorProvider extends Object;\npublic static class ExecutorProvider.ExtendedThreadFactory extends io.netty.util.concurrent.DefaultThreadFactory;\npublic class MathUtils extends Object;\npublic class MessageIdUtils extends Object;\npublic class NoOpLock extends Object implements Lock;\npublic class ObjectCache<T> extends Object implements Supplier<T>;\npublic class RetryMessageUtil extends Object;\npublic class RetryUtil extends Object;\npublic class ScheduledExecutorProvider extends ExecutorProvider;\n@Target({ANNOTATION_TYPE,FIELD,METHOD}) @Retention(RUNTIME) public @interface Secret;\npublic class SecretsSerializer extends com.fasterxml.jackson.databind.JsonSerializer<Object>;\npublic class TimedCompletableFuture<T> extends CompletableFuture<T>;\npublic class TypeCheckUtil extends Object;\npublic class WithSNISslEngineFactory extends org.asynchttpclient.netty.ssl.DefaultSslEngineFactory;\n", "des": "Pulsar Client Utils."}
{"index": 1827, "repo": "spring-test-6.0.11", "code": "package env;\n\npublic class MockEnvironment extends org.springframework.core.env.AbstractEnvironment; // Simple ConfigurableEnvironment implementation exposing MockEnvironment.setProperty(String, String) and MockEnvironment.withProperty(String, String) methods for testing purposes.\npublic class MockPropertySource extends org.springframework.core.env.PropertiesPropertySource; // Simple PropertySource implementation for use in testing.\n", "des": "This package contains mock implementations of the Environment and PropertySource abstractions."}
{"index": 1828, "repo": "spring-test-6.0.11", "code": "package http;\n\npackage http.client; // Mock implementations of client-side HTTP abstractions.\npublic class MockHttpInputMessage extends Object implements org.springframework.http.HttpInputMessage; // Mock implementation of HttpInputMessage.\npublic class MockHttpOutputMessage extends Object implements org.springframework.http.HttpOutputMessage; // Mock implementation of HttpOutputMessage.\n", "des": "Mock implementations of client/server-side HTTP abstractions."}
{"index": 1829, "repo": "spring-test-6.0.11", "code": "package client;\n\npackage client.reactive; // Mock implementations of reactive HTTP client contracts.\npublic class MockClientHttpRequest extends MockHttpOutputMessage implements org.springframework.http.client.ClientHttpRequest; // Mock implementation of ClientHttpRequest.\npublic class MockClientHttpResponse extends MockHttpInputMessage implements org.springframework.http.client.ClientHttpResponse; // Mock implementation of ClientHttpResponse.\n", "des": "Mock implementations of client-side HTTP abstractions."}
{"index": 1830, "repo": "spring-test-6.0.11", "code": "package reactive;\n\npublic class MockClientHttpRequest extends org.springframework.http.client.reactive.AbstractClientHttpRequest; // Mock implementation of ClientHttpRequest.\npublic class MockClientHttpResponse extends Object implements org.springframework.http.client.reactive.ClientHttpResponse; // Mock implementation of ClientHttpResponse.\n", "des": "Mock implementations of reactive HTTP client contracts."}
{"index": 1831, "repo": "spring-test-6.0.11", "code": "package reactive;\n\npublic final class MockServerHttpRequest extends org.springframework.http.server.reactive.AbstractServerHttpRequest; // Mock extension of AbstractServerHttpRequest for use in tests without an actual server.\npublic static interface MockServerHttpRequest.BaseBuilder<B extends MockServerHttpRequest.BaseBuilder<B>>; // Request builder exposing properties not related to the body.\npublic static interface MockServerHttpRequest.BodyBuilder extends MockServerHttpRequest.BaseBuilder<MockServerHttpRequest.BodyBuilder>; // A builder that adds a body to the request.\npublic class MockServerHttpResponse extends org.springframework.http.server.reactive.AbstractServerHttpResponse; // Mock extension of AbstractServerHttpResponse for use in tests without an actual server.\n", "des": "Mock implementations of reactive HTTP server contracts."}
{"index": 1832, "repo": "spring-test-6.0.11", "code": "package web;\n\npackage web.server; // Mock implementations of Spring's reactive server web API abstractions.\npublic class DelegatingServletInputStream extends ServletInputStream; // Delegating implementation of ServletInputStream.\npublic class DelegatingServletOutputStream extends ServletOutputStream; // Delegating implementation of ServletOutputStream.\npublic class MockAsyncContext extends Object implements AsyncContext; // Mock implementation of the AsyncContext interface.\npublic class MockBodyContent extends BodyContent; // Mock implementation of the BodyContent class.\npublic class MockCookie extends Cookie; // Extension of Cookie with extra attributes, as defined in RFC 6265.\npublic class MockFilterChain extends Object implements FilterChain; // Mock implementation of the FilterChain interface.\npublic class MockFilterConfig extends Object implements FilterConfig; // Mock implementation of the FilterConfig interface.\npublic class MockHttpServletMapping extends Object implements HttpServletMapping; // Mock implementation of HttpServletMapping.\npublic class MockHttpServletRequest extends Object implements HttpServletRequest; // Mock implementation of the HttpServletRequest interface.\npublic class MockHttpServletResponse extends Object implements HttpServletResponse; // Mock implementation of the HttpServletResponse interface.\npublic class MockHttpSession extends Object implements HttpSession; // Mock implementation of the HttpSession interface.\npublic class MockJspWriter extends JspWriter; // Mock implementation of the JspWriter class.\npublic class MockMultipartFile extends Object implements org.springframework.web.multipart.MultipartFile; // Mock implementation of the MultipartFile interface.\npublic class MockMultipartHttpServletRequest extends MockHttpServletRequest implements org.springframework.web.multipart.MultipartHttpServletRequest; // Mock implementation of the MultipartHttpServletRequest interface.\npublic class MockPageContext extends PageContext; // Mock implementation of the PageContext interface.\npublic class MockPart extends Object implements Part; // Mock implementation of jakarta.servlet.http.Part.\npublic class MockRequestDispatcher extends Object implements RequestDispatcher; // Mock implementation of the RequestDispatcher interface.\npublic class MockServletConfig extends Object implements ServletConfig; // Mock implementation of the ServletConfig interface.\npublic class MockServletContext extends Object implements ServletContext; // Mock implementation of the ServletContext interface.\npublic class MockSessionCookieConfig extends Object implements SessionCookieConfig; // Mock implementation of the SessionCookieConfig interface.\n", "des": "A comprehensive set of Servlet API 6.0 mock objects, targeted at usage with Spring's Web MVC framework."}
{"index": 1833, "repo": "spring-test-6.0.11", "code": "package server;\n\npublic final class MockServerRequest extends Object implements org.springframework.web.reactive.function.server.ServerRequest; // Mock implementation of ServerRequest.\npublic static interface MockServerRequest.Builder; // Builder for MockServerRequest.\n", "des": "Mock objects for the functional web framework."}
{"index": 1834, "repo": "spring-test-6.0.11", "code": "package server;\n\npublic final class MockServerWebExchange extends org.springframework.web.server.adapter.DefaultServerWebExchange; // Extension of DefaultServerWebExchange for use in tests, along with MockServerHttpRequest and MockServerHttpResponse.\npublic static class MockServerWebExchange.Builder extends Object; // Builder for a MockServerWebExchange.\npublic class MockWebSession extends Object implements org.springframework.web.server.WebSession; // Implementation of WebSession that delegates to a session instance obtained via InMemoryWebSessionStore.\n", "des": "Mock implementations of Spring's reactive server web API abstractions."}
{"index": 1835, "repo": "spring-test-6.0.11", "code": "package annotation;\n\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Inherited @Rollback(false) public @interface Commit; // @Commit is a test annotation that is used to indicate that a test-managed transaction should be committed after the test method has completed.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Inherited public @interface DirtiesContext; // Test annotation which indicates that the ApplicationContext associated with a test is dirty and should therefore be closed and removed from the context cache.\npublic static enum DirtiesContext.ClassMode extends Enum<DirtiesContext.ClassMode>; // Defines modes which determine how @DirtiesContext is interpreted when used to annotate a test class.\npublic static enum DirtiesContext.HierarchyMode extends Enum<DirtiesContext.HierarchyMode>; // Defines modes which determine how the context cache is cleared when @DirtiesContext is used in a test whose context is configured as part of a hierarchy via @ContextHierarchy.\npublic static enum DirtiesContext.MethodMode extends Enum<DirtiesContext.MethodMode>; // Defines modes which determine how @DirtiesContext is interpreted when used to annotate a test method.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Inherited public @interface IfProfileValue; // Test annotation for use with JUnit 4 to indicate whether a test is enabled or disabled for a specific testing profile.\npublic interface ProfileValueSource; // Strategy interface for retrieving profile values for a given testing environment.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface ProfileValueSourceConfiguration; // ProfileValueSourceConfiguration is a class-level annotation for use with JUnit 4 which is used to specify what type of ProfileValueSource to use when retrieving profile values configured via @IfProfileValue.\npublic abstract class ProfileValueUtils extends Object; // General utility methods for working with profile values.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface Repeat; // Test annotation for use with JUnit 4 to indicate that a test method should be invoked repeatedly.\n", "des": "Support classes for annotation-driven tests."}
{"index": 1836, "repo": "spring-test-6.0.11", "code": "package context;\n\npackage context.aot; // Ahead-of-time (AOT) support for the Spring TestContext Framework.\npackage context.cache; // Support for context caching within the Spring TestContext Framework.\npackage context.event; // Test event support classes for the Spring TestContext Framework.\npackage context.jdbc; // JDBC support classes for the Spring TestContext Framework, including support for declarative SQL script execution via @Sql.\npackage context.junit4; // Support classes for integrating the Spring TestContext Framework with JUnit 4.12 or higher.\npackage context.support; // Support classes for the Spring TestContext Framework.\npackage context.testng; // Support classes for integrating the Spring TestContext Framework with TestNG.\npackage context.transaction; // Transactional support classes for the Spring TestContext Framework.\npackage context.util; // Common utilities used within the Spring TestContext Framework.\npackage context.web; // Web support classes for the Spring TestContext Framework.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface ActiveProfiles; // ActiveProfiles is a class-level annotation that is used to declare which active bean definition profiles should be used when loading an ApplicationContext for test classes.\n@FunctionalInterface public interface ActiveProfilesResolver; // Strategy interface for programmatically resolving which active bean definition profiles should be used when loading an ApplicationContext for a test class.\npublic interface ApplicationContextFailureProcessor; // Strategy for components that process failures related to application contexts within the Spring TestContext Framework.\npublic interface BootstrapContext; // BootstrapContext encapsulates the context in which the Spring TestContext Framework is bootstrapped.\npublic abstract class BootstrapUtils extends Object; // BootstrapUtils is a collection of utility methods to assist with bootstrapping the Spring TestContext Framework.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface BootstrapWith; // @BootstrapWith defines class-level metadata that is used to determine how to bootstrap the Spring TestContext Framework.\npublic interface CacheAwareContextLoaderDelegate; // A CacheAwareContextLoaderDelegate is responsible for loading and closing application contexts, interacting transparently with a ContextCache behind the scenes.\n", "des": "This package contains the Spring TestContext Framework which provides annotation-driven unit and integration testing support that is agnostic of the actual testing framework in use."}
{"index": 1837, "repo": "spring-test-6.0.11", "code": "package aot;\n\npublic interface AotContextLoader extends SmartContextLoader; // Strategy interface for loading an ApplicationContext for build-time AOT processing as well as run-time AOT execution for an integration test managed by the Spring TestContext Framework.\npublic interface AotTestAttributes; // Holder for metadata specific to ahead-of-time (AOT) support in the Spring TestContext Framework.\npublic class AotTestContextInitializers extends Object; // AotTestContextInitializers provides mappings from test classes to AOT-optimized context initializers.\npublic interface AotTestExecutionListener extends TestExecutionListener; // AotTestExecutionListener is an extension of the TestExecutionListener SPI that allows a listener to optionally provide ahead-of-time (AOT) support.\npublic abstract class TestAotProcessor extends org.springframework.context.aot.AbstractAotProcessor<Void>; // Filesystem-based ahead-of-time (AOT) processing base implementation that scans the provided classpath roots for Spring integration test classes and then generates AOT artifacts for those test classes in the configured output directories.\npublic class TestContextAotException extends RuntimeException; // Thrown if an error occurs during AOT build-time processing or AOT run-time execution in the Spring TestContext Framework.\npublic class TestContextAotGenerator extends Object; // TestContextAotGenerator generates AOT artifacts for integration tests that depend on support from the Spring TestContext Framework.\npublic interface TestRuntimeHintsRegistrar; // Contract for registering RuntimeHints for integration tests run with the Spring TestContext Framework based on the ClassLoader of the deployment unit.\n", "des": "Ahead-of-time (AOT) support for the Spring TestContext Framework."}
{"index": 1838, "repo": "spring-test-6.0.11", "code": "package cache;\n\npublic interface ContextCache; // ContextCache defines the SPI for caching Spring ApplicationContexts within the Spring TestContext Framework.\npublic abstract class ContextCacheUtils extends Object; // Collection of utilities for working with ContextCaches.\npublic class DefaultCacheAwareContextLoaderDelegate extends Object implements CacheAwareContextLoaderDelegate; // Default implementation of the CacheAwareContextLoaderDelegate interface.\npublic class DefaultContextCache extends Object implements ContextCache; // Default implementation of the ContextCache API.\n", "des": "Support for context caching within the Spring TestContext Framework."}
{"index": 1839, "repo": "spring-test-6.0.11", "code": "package event;\n\npackage event.annotation; // Test execution event annotations for the Spring TestContext Framework.\npublic class AfterTestClassEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.afterTestClass(TestContext) is invoked.\npublic class AfterTestExecutionEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.afterTestExecution(TestContext) is invoked.\npublic class AfterTestMethodEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.afterTestMethod(TestContext) is invoked.\npublic interface ApplicationEvents; // ApplicationEvents encapsulates all application events that were fired during the execution of a single test method.\npublic abstract class ApplicationEventsHolder extends Object; // Holder class to expose the application events published during the execution of a test in the form of a thread-bound ApplicationEvents object.\npublic class ApplicationEventsTestExecutionListener extends AbstractTestExecutionListener; // TestExecutionListener which provides support for ApplicationEvents.\npublic class BeforeTestClassEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.beforeTestClass(TestContext) is invoked.\npublic class BeforeTestExecutionEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.beforeTestExecution(TestContext) is invoked.\npublic class BeforeTestMethodEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.beforeTestMethod(TestContext) is invoked.\npublic class EventPublishingTestExecutionListener extends AbstractTestExecutionListener; // TestExecutionListener that publishes test execution events to the ApplicationContext for the currently executing test.\npublic class PrepareTestInstanceEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.prepareTestInstance(TestContext) is invoked.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface RecordApplicationEvents; // @RecordApplicationEvents is a class-level annotation that is used to instruct the Spring TestContext Framework to record all application events that are published in the ApplicationContext during the execution of a single test.\n", "des": "Test event support classes for the Spring TestContext Framework."}
{"index": 1840, "repo": "spring-test-6.0.11", "code": "package annotation;\n\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(AfterTestClassEvent.class) public @interface AfterTestClass; // @EventListener annotation used to consume an AfterTestClassEvent published by the EventPublishingTestExecutionListener.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(AfterTestExecutionEvent.class) public @interface AfterTestExecution; // @EventListener annotation used to consume an AfterTestExecutionEvent published by the EventPublishingTestExecutionListener.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(AfterTestMethodEvent.class) public @interface AfterTestMethod; // @EventListener annotation used to consume an AfterTestMethodEvent published by the EventPublishingTestExecutionListener.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(BeforeTestClassEvent.class) public @interface BeforeTestClass; // @EventListener annotation used to consume a BeforeTestClassEvent published by the EventPublishingTestExecutionListener.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(BeforeTestExecutionEvent.class) public @interface BeforeTestExecution; // @EventListener annotation used to consume a BeforeTestExecution published by the EventPublishingTestExecutionListener.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(BeforeTestMethodEvent.class) public @interface BeforeTestMethod; // @EventListener annotation used to consume a BeforeTestMethodEvent published by the EventPublishingTestExecutionListener.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @EventListener(PrepareTestInstanceEvent.class) public @interface PrepareTestInstance; // @EventListener annotation used to consume a PrepareTestInstanceEvent published by the EventPublishingTestExecutionListener.\n", "des": "Test execution event annotations for the Spring TestContext Framework."}
{"index": 1841, "repo": "spring-test-6.0.11", "code": "package jdbc;\n\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Inherited @Repeatable(SqlGroup.class) public @interface Sql; // @Sql is used to annotate a test class or test method to configure SQL Sql.scripts() and Sql.statements() to be executed against a given database during integration tests.\npublic static enum Sql.ExecutionPhase extends Enum<Sql.ExecutionPhase>; // Enumeration of phases that dictate when SQL scripts are executed.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface SqlConfig; // @SqlConfig defines metadata that is used to determine how to parse and execute SQL scripts configured via the @Sql annotation.\npublic static enum SqlConfig.ErrorMode extends Enum<SqlConfig.ErrorMode>; // Enumeration of modes that dictate how errors are handled while executing SQL statements.\npublic static enum SqlConfig.TransactionMode extends Enum<SqlConfig.TransactionMode>; // Enumeration of modes that dictate whether SQL scripts should be executed within a transaction and what the transaction propagation behavior should be.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Inherited public @interface SqlGroup; // Container annotation that aggregates several @Sql annotations.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Inherited public @interface SqlMergeMode; // @SqlMergeMode is used to annotate a test class or test method to configure whether method-level @Sql declarations are merged with class-level @Sql declarations.\npublic static enum SqlMergeMode.MergeMode extends Enum<SqlMergeMode.MergeMode>; // Enumeration of modes that dictate whether method-level @Sql declarations are merged with class-level @Sql declarations.\npublic class SqlScriptsTestExecutionListener extends AbstractTestExecutionListener implements AotTestExecutionListener; // TestExecutionListener that provides support for executing SQL scripts and inlined statements configured via the @Sql annotation.\n", "des": "JDBC support classes for the Spring TestContext Framework, including support for declarative SQL script execution via @Sql."}
{"index": 1842, "repo": "spring-test-6.0.11", "code": "package jupiter;\n\npackage jupiter.web; // Web support for integrating the Spring TestContext Framework with the JUnit Jupiter extension model in JUnit 5.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @ExtendWith(DisabledIfCondition.class) public @interface DisabledIf; // @DisabledIf is used to signal that the annotated test class or test method is disabled and should not be executed if the supplied DisabledIf.expression() evaluates to true.\npublic class DisabledIfCondition extends Object; // DisabledIfCondition is an ExecutionCondition that supports the @DisabledIf annotation when using the Spring TestContext Framework in conjunction with JUnit 5's Jupiter programming model.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @ExtendWith(EnabledIfCondition.class) public @interface EnabledIf; // @EnabledIf is used to signal that the annotated test class or test method is enabled and should be executed if the supplied EnabledIf.expression() evaluates to true.\npublic class EnabledIfCondition extends Object; // EnabledIfCondition is an ExecutionCondition that supports the @EnabledIf annotation when using the Spring TestContext Framework in conjunction with JUnit 5's Jupiter programming model.\npublic class SpringExtension extends Object implements org.junit.jupiter.api.extension.BeforeAllCallback, org.junit.jupiter.api.extension.AfterAllCallback, org.junit.jupiter.api.extension.TestInstancePostProcessor, org.junit.jupiter.api.extension.BeforeEachCallback, org.junit.jupiter.api.extension.AfterEachCallback, org.junit.jupiter.api.extension.BeforeTestExecutionCallback, org.junit.jupiter.api.extension.AfterTestExecutionCallback, org.junit.jupiter.api.extension.ParameterResolver; // SpringExtension integrates the Spring TestContext Framework into JUnit 5's Jupiter programming model.\n", "des": "Core support for integrating the Spring TestContext Framework with the JUnit Jupiter extension model in JUnit 5."}
{"index": 1843, "repo": "spring-test-6.0.11", "code": "package web;\n\n@ExtendWith(SpringExtension.class) @ContextConfiguration @WebAppConfiguration @Documented @Inherited @Retention(RUNTIME) @Target(TYPE) public @interface SpringJUnitWebConfig; // @SpringJUnitWebConfig is a composed annotation that combines @ExtendWith(SpringExtension.class) from JUnit Jupiter with @ContextConfiguration and @WebAppConfiguration from the Spring TestContext Framework.\n", "des": "Web support for integrating the Spring TestContext Framework with the JUnit Jupiter extension model in JUnit 5."}
{"index": 1844, "repo": "spring-test-6.0.11", "code": "package junit4;\n\npackage junit4.rules; // Custom JUnit 4 Rules used in the Spring TestContext Framework.\npackage junit4.statements; // Custom JUnit 4 Statements used in the Spring TestContext Framework.\npublic abstract class AbstractJUnit4SpringContextTests extends Object implements org.springframework.context.ApplicationContextAware; // Abstract base test class which integrates the Spring TestContext Framework with explicit ApplicationContext testing support in a JUnit 4 environment.\n@Transactional public abstract class AbstractTransactionalJUnit4SpringContextTests extends AbstractJUnit4SpringContextTests; // Abstract transactional extension of AbstractJUnit4SpringContextTests which adds convenience functionality for JDBC access.\npublic class SpringJUnit4ClassRunner extends BlockJUnit4ClassRunner; // SpringJUnit4ClassRunner is a custom extension of JUnit's BlockJUnit4ClassRunner which provides functionality of the Spring TestContext Framework to standard JUnit tests by means of the TestContextManager and associated support classes and annotations.\npublic final class SpringRunner extends SpringJUnit4ClassRunner; // SpringRunner is an alias for the SpringJUnit4ClassRunner.\n", "des": "Support classes for integrating the Spring TestContext Framework with JUnit 4.12 or higher."}
{"index": 1845, "repo": "spring-test-6.0.11", "code": "package rules;\n\npublic class SpringClassRule extends Object implements TestRule; // SpringClassRule is a custom JUnit TestRule that supports class-level features of the Spring TestContext Framework in standard JUnit tests by means of the TestContextManager and associated support classes and annotations.\npublic class SpringMethodRule extends Object implements MethodRule; // SpringMethodRule is a custom JUnit 4 MethodRule that supports instance-level and method-level features of the Spring TestContext Framework in standard JUnit tests by means of the TestContextManager and associated support classes and annotations.\n", "des": "Custom JUnit 4 Rules used in the Spring TestContext Framework."}
{"index": 1846, "repo": "spring-test-6.0.11", "code": "package statements;\n\npublic class ProfileValueChecker extends Statement; // ProfileValueChecker is a custom JUnit Statement that checks whether a test class or test method is enabled in the current environment via Spring's @IfProfileValue annotation.\npublic class RunAfterTestClassCallbacks extends Statement; // RunAfterTestClassCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit execution chain by calling afterTestClass() on the supplied TestContextManager.\npublic class RunAfterTestExecutionCallbacks extends Statement; // RunAfterTestExecutionCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit 4 execution chain by calling afterTestExecution() on the supplied TestContextManager.\npublic class RunAfterTestMethodCallbacks extends Statement; // RunAfterTestMethodCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit execution chain by calling afterTestMethod() on the supplied TestContextManager.\npublic class RunBeforeTestClassCallbacks extends Statement; // RunBeforeTestClassCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit execution chain by calling beforeTestClass() on the supplied TestContextManager.\npublic class RunBeforeTestExecutionCallbacks extends Statement; // RunBeforeTestExecutionCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit 4 execution chain by calling beforeTestExecution() on the supplied TestContextManager.\npublic class RunBeforeTestMethodCallbacks extends Statement; // RunBeforeTestMethodCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit execution chain by calling beforeTestMethod() on the supplied TestContextManager.\npublic class RunPrepareTestInstanceCallbacks extends Statement; // RunPrepareTestInstanceCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit execution chain by calling prepareTestInstance() on the supplied TestContextManager.\npublic class SpringFailOnTimeout extends Statement; // SpringFailOnTimeout is a custom JUnit Statement which adds support for Spring's @Timed annotation by throwing an exception if the next statement in the execution chain takes more than the specified number of milliseconds.\npublic class SpringRepeat extends Statement; // SpringRepeat is a custom JUnit Statement which adds support for Spring's @Repeat annotation by repeating the test the specified number of times.\n", "des": "Custom JUnit 4 Statements used in the Spring TestContext Framework."}
{"index": 1847, "repo": "spring-test-6.0.11", "code": "package support;\n\npublic abstract class AbstractContextLoader extends Object implements SmartContextLoader; // Abstract application context loader that provides a basis for all concrete implementations of the ContextLoader SPI.\npublic abstract class AbstractDelegatingSmartContextLoader extends Object implements AotContextLoader; // AbstractDelegatingSmartContextLoader serves as an abstract base class for implementations of the SmartContextLoader SPI that delegate to a set of candidate SmartContextLoaders (i.e., one that supports XML configuration files or Groovy scripts and one that supports annotated classes) to determine which context loader is appropriate for a given test class's configuration.\npublic abstract class AbstractDirtiesContextTestExecutionListener extends AbstractTestExecutionListener; // Abstract base class for TestExecutionListener implementations that provide support for marking the ApplicationContext associated with a test as dirty for both test classes and test methods annotated with the @DirtiesContext annotation.\npublic abstract class AbstractGenericContextLoader extends AbstractContextLoader implements AotContextLoader; // Abstract, generic extension of AbstractContextLoader that loads a GenericApplicationContext.\npublic abstract class AbstractTestContextBootstrapper extends Object implements TestContextBootstrapper; // Abstract implementation of the TestContextBootstrapper interface which provides most of the behavior required by a bootstrapper.\npublic abstract class AbstractTestExecutionListener extends Object implements TestExecutionListener, org.springframework.core.Ordered; // Abstract ordered implementation of the TestExecutionListener API.\npublic class AnnotationConfigContextLoader extends AbstractGenericContextLoader; // Concrete implementation of AbstractGenericContextLoader that loads bean definitions from component classes.\npublic abstract class AnnotationConfigContextLoaderUtils extends Object; // Utility methods for SmartContextLoaders that deal with component classes (e.g., @Configuration classes).\npublic class DefaultActiveProfilesResolver extends Object implements ActiveProfilesResolver; // Default implementation of the ActiveProfilesResolver strategy that resolves active bean definition profiles based solely on profiles configured declaratively via ActiveProfiles.profiles() or ActiveProfiles.value().\npublic class DefaultBootstrapContext extends Object implements BootstrapContext; // Default implementation of the BootstrapContext interface.\npublic class DefaultTestContext extends Object implements TestContext; // Default implementation of the TestContext interface.\npublic class DefaultTestContextBootstrapper extends AbstractTestContextBootstrapper; // Default implementation of the TestContextBootstrapper SPI.\n", "des": "Support classes for the Spring TestContext Framework."}
{"index": 1848, "repo": "spring-test-6.0.11", "code": "package testng;\n\npublic abstract class AbstractTestNGSpringContextTests extends Object implements org.testng.IHookable, org.springframework.context.ApplicationContextAware; // Abstract base test class which integrates the Spring TestContext Framework with explicit ApplicationContext testing support in a TestNG environment.\n@Transactional public abstract class AbstractTransactionalTestNGSpringContextTests extends AbstractTestNGSpringContextTests; // Abstract transactional extension of AbstractTestNGSpringContextTests which adds convenience functionality for JDBC access.\n", "des": "Support classes for integrating the Spring TestContext Framework with TestNG."}
{"index": 1849, "repo": "spring-test-6.0.11", "code": "package transaction;\n\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface AfterTransaction; // Test annotation which indicates that the annotated void method should be executed after a transaction is ended for a test method configured to run within a transaction via Spring's @Transactional annotation.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface BeforeTransaction; // Test annotation which indicates that the annotated void method should be executed before a transaction is started for a test method configured to run within a transaction via Spring's @Transactional annotation.\npublic abstract class TestContextTransactionUtils extends Object; // Utility methods for working with transactions and data access related beans within the Spring TestContext Framework.\npublic final class TestTransaction extends Object; // TestTransaction provides a collection of static utility methods for programmatic interaction with test-managed transactions within test methods, before methods, and after methods.\npublic class TransactionalTestExecutionListener extends AbstractTestExecutionListener; // TestExecutionListener that provides support for executing tests within test-managed transactions by honoring Spring's @Transactional annotation.\n", "des": "Transactional support classes for the Spring TestContext Framework."}
{"index": 1850, "repo": "spring-test-6.0.11", "code": "package util;\n\npublic abstract class TestContextResourceUtils extends Object; // Utility methods for working with resources within the Spring TestContext Framework.\npublic abstract class TestContextSpringFactoriesUtils extends Object; // Collection of utilities for working with SpringFactoriesLoader within the Spring TestContext Framework.\n", "des": "Common utilities used within the Spring TestContext Framework."}
{"index": 1851, "repo": "spring-test-6.0.11", "code": "package web;\n\npublic abstract class AbstractGenericWebContextLoader extends AbstractContextLoader implements AotContextLoader; // Abstract, generic extension of AbstractContextLoader that loads a GenericWebApplicationContext.\npublic class AnnotationConfigWebContextLoader extends AbstractGenericWebContextLoader; // Concrete implementation of AbstractGenericWebContextLoader that loads bean definitions from annotated classes.\npublic class GenericGroovyXmlWebContextLoader extends GenericXmlWebContextLoader; // Concrete implementation of AbstractGenericWebContextLoader that loads bean definitions from Groovy scripts and XML configuration files.\npublic class GenericXmlWebContextLoader extends AbstractGenericWebContextLoader; // Concrete implementation of AbstractGenericWebContextLoader that loads bean definitions from XML resources.\npublic class ServletTestExecutionListener extends AbstractTestExecutionListener; // TestExecutionListener which provides mock Servlet API support to WebApplicationContexts loaded by the Spring TestContext Framework.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface WebAppConfiguration; // @WebAppConfiguration is a class-level annotation that is used to declare that the ApplicationContext loaded for an integration test should be a WebApplicationContext.\npublic class WebDelegatingSmartContextLoader extends AbstractDelegatingSmartContextLoader; // WebDelegatingSmartContextLoader is a concrete implementation of AbstractDelegatingSmartContextLoader that delegates to a GenericXmlWebContextLoader (or a GenericGroovyXmlWebContextLoader if Groovy is present on the classpath) and an AnnotationConfigWebContextLoader.\npublic class WebMergedContextConfiguration extends MergedContextConfiguration; // WebMergedContextConfiguration encapsulates the merged context configuration declared on a test class and all of its superclasses and enclosing classes via @ContextConfiguration, @WebAppConfiguration, @ActiveProfiles, and @TestPropertySource.\npublic class WebTestContextBootstrapper extends DefaultTestContextBootstrapper; // Web-specific implementation of the TestContextBootstrapper SPI.\n", "des": "Web support classes for the Spring TestContext Framework."}
{"index": 1852, "repo": "spring-test-6.0.11", "code": "package jdbc;\n\npublic abstract class JdbcTestUtils extends Object; // JdbcTestUtils is a collection of JDBC related utility functions intended to simplify standard database testing scenarios.\n", "des": "Support classes for tests based on JDBC."}
{"index": 1853, "repo": "spring-test-6.0.11", "code": "package util;\n\npublic abstract class AopTestUtils extends Object; // AopTestUtils is a collection of AOP-related utility methods for use in unit and integration testing scenarios.\npublic abstract class AssertionErrors extends Object; // Test assertions that are independent of any third-party assertion library.\npublic class ExceptionCollector extends Object; // ExceptionCollector is a test utility for executing code blocks, collecting exceptions, and generating a single AssertionError containing any exceptions encountered as suppressed exceptions.\n@FunctionalInterface public static interface ExceptionCollector.Executable; // Executable is a functional interface that can be used to implement any generic block of code that potentially throws a Throwable.\npublic class JsonExpectationsHelper extends Object; // A helper class for assertions on JSON content.\npublic class JsonPathExpectationsHelper extends Object; // A helper class for applying assertions via JSON path expressions.\npublic abstract class ReflectionTestUtils extends Object; // ReflectionTestUtils is a collection of reflection-based utility methods for use in unit and integration testing scenarios.\npublic class TestSocketUtils extends Object; // Simple utility for finding available TCP ports on localhost for use in integration testing scenarios.\npublic class XmlExpectationsHelper extends Object; // A helper class for assertions on XML content.\npublic class XpathExpectationsHelper extends Object; // A helper class for applying assertions via XPath expressions.\n", "des": "General utility classes for use in unit and integration tests."}
{"index": 1854, "repo": "spring-test-6.0.11", "code": "package web;\n\npackage web.client; // Contains client-side REST testing support.\npackage web.servlet; // Contains server-side support for testing Spring MVC applications.\npublic abstract class ModelAndViewAssert extends Object; // A collection of assertions intended to simplify testing scenarios dealing with Spring Web MVC ModelAndView objects.\n", "des": "Helper classes for unit tests based on Spring's web support."}
{"index": 1855, "repo": "spring-test-6.0.11", "code": "package client;\n\npackage client.match; // Contains built-in RequestMatcher implementations.\npackage client.response; // Contains built-in ResponseCreator implementations.\npublic abstract class AbstractRequestExpectationManager extends Object implements RequestExpectationManager; // Base class for RequestExpectationManager implementations responsible for storing expectations and actual requests, and checking for unsatisfied expectations at the end.\nprotected static class AbstractRequestExpectationManager.RequestExpectationGroup extends Object; // Helper class to manage a group of remaining expectations.\npublic class DefaultRequestExpectation extends Object implements RequestExpectation; // Default implementation of RequestExpectation that simply delegates to the request matchers and the response creator it contains.\nprotected static class DefaultRequestExpectation.RequestCount extends Object; // Helper class that keeps track of actual vs expected request count.\npublic final class ExpectedCount extends Object; // A simple type representing a range for an expected count.\npublic class MockMvcClientHttpRequestFactory extends Object implements org.springframework.http.client.ClientHttpRequestFactory; // A ClientHttpRequestFactory for requests executed via MockMvc.\npublic final class MockRestServiceServer extends Object; // Main entry point for client-side REST testing.\npublic static interface MockRestServiceServer.MockRestServiceServerBuilder; // Builder to create a MockRestServiceServer.\npublic interface RequestExpectation extends ResponseActions, RequestMatcher, ResponseCreator; // An extension of ResponseActions that also implements RequestMatcher and ResponseCreator\npublic interface RequestExpectationManager; // Encapsulates the behavior required to implement MockRestServiceServer including its public API (create expectations + verify/reset) along with an extra method for verifying actual requests.\n@FunctionalInterface public interface RequestMatcher; // A contract for matching requests to expectations.\npublic interface ResponseActions; // A contract for setting up request expectations and defining a response.\n@FunctionalInterface public interface ResponseCreator; // A contract for creating a ClientHttpResponse.\npublic class SimpleRequestExpectationManager extends AbstractRequestExpectationManager; // Simple RequestExpectationManager that matches requests to expectations sequentially, i.e.\npublic class UnorderedRequestExpectationManager extends AbstractRequestExpectationManager; // RequestExpectationManager that matches requests to expectations regardless of the order of declaration of expected requests.\n", "des": "Contains client-side REST testing support."}
{"index": 1856, "repo": "spring-test-6.0.11", "code": "package match;\n\npublic class ContentRequestMatchers extends Object; // Factory for request content RequestMatcher's.\npublic class JsonPathRequestMatchers extends Object; // Factory for assertions on the request content using JsonPath expressions.\npublic abstract class MockRestRequestMatchers extends Object; // Static factory methods for RequestMatcher classes.\npublic class XpathRequestMatchers extends Object; // Factory methods for request content RequestMatcher implementations that use an XPath expression.\n", "des": "Contains built-in RequestMatcher implementations."}
{"index": 1857, "repo": "spring-test-6.0.11", "code": "package response;\n\npublic class DefaultResponseCreator extends Object implements ResponseCreator; // A ResponseCreator with builder-style methods for adding response details.\npublic class ExecutingResponseCreator extends Object implements ResponseCreator; // ResponseCreator that obtains the response by executing the request through a ClientHttpRequestFactory.\npublic abstract class MockRestResponseCreators extends Object; // Static factory methods to obtain a ResponseCreator with a fixed response.\n", "des": "Contains built-in ResponseCreator implementations."}
{"index": 1858, "repo": "spring-test-6.0.11", "code": "package server;\n\npublic class CookieAssertions extends Object; // Assertions on cookies of the response.\npublic class EntityExchangeResult<T> extends ExchangeResult; // ExchangeResult sub-class that exposes the response body fully extracted to a representation of type <T>.\npublic class ExchangeResult extends Object; // Container for request and response details for exchanges performed through WebTestClient.\npublic class FluxExchangeResult<T> extends ExchangeResult; // ExchangeResult variant with the response body decoded as Flux<T> but not yet consumed.\npublic class HeaderAssertions extends Object; // Assertions on headers of the response.\npublic class HttpHandlerConnector extends Object implements org.springframework.http.client.reactive.ClientHttpConnector; // Connector that handles requests by invoking an HttpHandler rather than making actual requests to a network socket.\npublic static final class HttpHandlerConnector.FailureAfterResponseCompletedException extends RuntimeException; // Indicates that an error occurred after the server response was completed, via ReactiveHttpOutputMessage.writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>) or ReactiveHttpOutputMessage.setComplete(), and can no longer be changed.\npublic class JsonPathAssertions extends Object; // JsonPath assertions.\npublic interface MockServerClientHttpResponse extends org.springframework.http.client.reactive.ClientHttpResponse; // Simple ClientHttpResponse extension that also exposes a result object from the underlying mock server exchange for further assertions on the state of the server response after the request is performed.\npublic interface MockServerConfigurer; // Contract that frameworks or applications can use to pre-package a set of customizations to a WebTestClient.MockServerSpec and expose that as a shortcut.\npublic class StatusAssertions extends Object; // Assertions on the response status.\npublic interface WebTestClient; // Client for testing web servers that uses WebClient internally to perform requests while also providing a fluent API to verify responses.\npublic static interface WebTestClient.BodyContentSpec; // Spec for expectations on the response body content.\npublic static interface WebTestClient.BodySpec<B,S extends WebTestClient.BodySpec<B,S>>; // Spec for expectations on the response body decoded to a single Object.\n", "des": "Support for testing Spring WebFlux server endpoints via WebTestClient."}
{"index": 1859, "repo": "spring-test-6.0.11", "code": "package servlet;\n\npackage servlet.client; // Support for testing Spring MVC applications via WebTestClient with MockMvc for server request handling.\npackage servlet.htmlunit; // Server-side support for testing Spring MVC applications with MockMvc and HtmlUnit.\npackage servlet.request; // Contains built-in RequestBuilder implementations.\npackage servlet.result; // Contains built-in ResultMatcher and ResultHandler implementations.\npackage servlet.setup; // Contains built-in MockMvcBuilder implementations.\n@FunctionalInterface public interface DispatcherServletCustomizer; // Strategy interface for customizing DispatcherServlet instances that are managed by MockMvc.\npublic final class MockMvc extends Object; // Main entry point for server-side Spring MVC test support.\npublic interface MockMvcBuilder; // Builds a MockMvc instance.\npublic abstract class MockMvcBuilderSupport extends Object; // Base class for MockMvc builder implementations, providing the capability to create a MockMvc instance.\npublic interface MvcResult; // Provides access to the result of an executed request.\npublic interface RequestBuilder; // Builds a MockHttpServletRequest.\npublic interface ResultActions; // Allows applying actions, such as expectations, on the result of an executed request.\n@FunctionalInterface public interface ResultHandler; // A ResultHandler performs a generic action on the result of an executed request — for example, printing debug information.\n@FunctionalInterface public interface ResultMatcher; // A ResultMatcher matches the result of an executed request against some expectation.\npublic interface SmartRequestBuilder extends RequestBuilder; // Extended variant of a RequestBuilder that applies its org.springframework.test.web.servlet.request.RequestPostProcessors as a separate step from the RequestBuilder.buildRequest(jakarta.servlet.ServletContext) method.\n", "des": "Contains server-side support for testing Spring MVC applications."}
{"index": 1860, "repo": "spring-test-6.0.11", "code": "package client;\n\npublic class MockMvcHttpConnector extends Object implements org.springframework.http.client.reactive.ClientHttpConnector; // Connector that handles requests by invoking a MockMvc rather than making actual requests over HTTP.\npublic interface MockMvcWebTestClient; // The main class for testing Spring MVC applications via WebTestClient with MockMvc for server request handling.\npublic static interface MockMvcWebTestClient.ControllerSpec extends MockMvcWebTestClient.MockMvcServerSpec<MockMvcWebTestClient.ControllerSpec>; // Specification for configuring MockMvc to test one or more controllers directly, and a simple facade around StandaloneMockMvcBuilder.\npublic static interface MockMvcWebTestClient.MockMvcServerSpec<B extends MockMvcWebTestClient.MockMvcServerSpec<B>>; // Base specification for configuring MockMvc, and a simple facade around ConfigurableMockMvcBuilder.\n", "des": "Support for testing Spring MVC applications via WebTestClient with MockMvc for server request handling."}
{"index": 1861, "repo": "spring-test-6.0.11", "code": "package htmlunit;\n\npackage htmlunit.webdriver; // Server-side support for testing Spring MVC applications with MockMvc and the Selenium HtmlUnitDriver.\npublic final class DelegatingWebConnection extends Object implements com.gargoylesoftware.htmlunit.WebConnection; // Implementation of WebConnection that allows delegating to various WebConnection implementations.\npublic static final class DelegatingWebConnection.DelegateWebConnection extends Object; // The delegate web connection.\npublic final class HostRequestMatcher extends Object implements WebRequestMatcher; // A WebRequestMatcher that allows matching on the host and optionally the port of WebRequest#getUrl().\npublic class MockMvcWebClientBuilder extends MockMvcWebConnectionBuilderSupport<MockMvcWebClientBuilder>; // MockMvcWebClientBuilder simplifies the creation of an HtmlUnit WebClient that delegates to a MockMvc instance.\npublic final class MockMvcWebConnection extends Object implements com.gargoylesoftware.htmlunit.WebConnection; // MockMvcWebConnection enables MockMvc to transform a WebRequest into a WebResponse.\npublic abstract class MockMvcWebConnectionBuilderSupport<T extends MockMvcWebConnectionBuilderSupport<T>> extends Object; // Support class that simplifies the creation of a WebConnection that uses MockMvc and optionally delegates to a real WebConnection for specific requests.\npublic final class UrlRegexRequestMatcher extends Object implements WebRequestMatcher; // A WebRequestMatcher that allows matching on WebRequest#getUrl().toExternalForm() using a regular expression.\n@FunctionalInterface public interface WebRequestMatcher; // Strategy for matching on a WebRequest.\n", "des": "Server-side support for testing Spring MVC applications with MockMvc and HtmlUnit."}
{"index": 1862, "repo": "spring-test-6.0.11", "code": "package webdriver;\n\npublic class MockMvcHtmlUnitDriverBuilder extends MockMvcWebConnectionBuilderSupport<MockMvcHtmlUnitDriverBuilder>; // MockMvcHtmlUnitDriverBuilder simplifies the building of an HtmlUnitDriver that delegates to MockMvc and optionally delegates to an actual connection for specific requests.\npublic class WebConnectionHtmlUnitDriver extends org.openqa.selenium.htmlunit.HtmlUnitDriver; // WebConnectionHtmlUnitDriver enables configuration of the WebConnection for an HtmlUnitDriver instance.\n", "des": "Server-side support for testing Spring MVC applications with MockMvc and the Selenium HtmlUnitDriver."}
{"index": 1863, "repo": "spring-test-6.0.11", "code": "package request;\n\npublic interface ConfigurableSmartRequestBuilder<B extends ConfigurableSmartRequestBuilder<B>> extends SmartRequestBuilder; // An extension of SmartRequestBuilder that can be configured with RequestPostProcessors.\npublic class MockHttpServletRequestBuilder extends Object implements ConfigurableSmartRequestBuilder<MockHttpServletRequestBuilder>, org.springframework.beans.Mergeable; // Default builder for MockHttpServletRequest required as input to perform requests in MockMvc.\npublic class MockMultipartHttpServletRequestBuilder extends MockHttpServletRequestBuilder; // Default builder for MockMultipartHttpServletRequest.\npublic abstract class MockMvcRequestBuilders extends Object; // Static factory methods for RequestBuilders.\n@FunctionalInterface public interface RequestPostProcessor; // Extension point for applications or 3rd party libraries that wish to further initialize a MockHttpServletRequest instance after it has been built by MockHttpServletRequestBuilder or its subclass MockMultipartHttpServletRequestBuilder.\n", "des": "Contains built-in RequestBuilder implementations."}
{"index": 1864, "repo": "spring-test-6.0.11", "code": "package result;\n\npublic class ContentResultMatchers extends Object; // Factory for response content assertions.\npublic class CookieResultMatchers extends Object; // Factory for response cookie assertions.\npublic class FlashAttributeResultMatchers extends Object; // Factory for \"output\" flash attribute assertions.\npublic class HandlerResultMatchers extends Object; // Factory for assertions on the selected handler or handler method.\npublic class HeaderResultMatchers extends Object; // Factory for response header assertions.\npublic class JsonPathResultMatchers extends Object; // Factory for assertions on the response content using JsonPath expressions.\npublic abstract class MockMvcResultHandlers extends Object; // Static factory methods for ResultHandler-based result actions.\npublic abstract class MockMvcResultMatchers extends Object; // Static factory methods for ResultMatcher-based result actions.\npublic class ModelResultMatchers extends Object; // Factory for assertions on the model.\npublic class PrintingResultHandler extends Object implements ResultHandler; // Result handler that prints MvcResult details to a given output stream — for example: System.out, System.err, a custom java.io.PrintWriter, etc.\nprotected static interface PrintingResultHandler.ResultValuePrinter; // A contract for how to actually write result information.\npublic class RequestResultMatchers extends Object; // Factory for assertions on the request.\npublic class StatusResultMatchers extends Object; // Factory for assertions on the response status.\npublic class ViewResultMatchers extends Object; // Factory for assertions on the selected view.\npublic class XpathResultMatchers extends Object; // Factory for assertions on the response content using XPath expressions.\n", "des": "Contains built-in ResultMatcher and ResultHandler implementations."}
{"index": 1865, "repo": "spring-test-6.0.11", "code": "package setup;\n\npublic abstract class AbstractMockMvcBuilder<B extends AbstractMockMvcBuilder<B>> extends MockMvcBuilderSupport implements ConfigurableMockMvcBuilder<B>; // Abstract implementation of MockMvcBuilder with common methods for configuring filters, default request properties, global expectations and global result actions.\npublic interface ConfigurableMockMvcBuilder<B extends ConfigurableMockMvcBuilder<B>> extends MockMvcBuilder; // Defines common methods for building a MockMvc.\npublic class DefaultMockMvcBuilder extends AbstractMockMvcBuilder<DefaultMockMvcBuilder>; // A concrete implementation of AbstractMockMvcBuilder that provides the WebApplicationContext supplied to it as a constructor argument.\npublic final class MockMvcBuilders extends Object; // The main class to import in order to access all available MockMvcBuilders.\npublic interface MockMvcConfigurer; // Contract for customizing a ConfigurableMockMvcBuilder in some specific way, e.g.\npublic abstract class MockMvcConfigurerAdapter extends Object implements MockMvcConfigurer; // An empty method implementation of MockMvcConfigurer.\npublic class SharedHttpSessionConfigurer extends Object implements MockMvcConfigurer; // MockMvcConfigurer that stores and re-uses the HTTP session across multiple requests performed through the same MockMvc instance.\npublic class StandaloneMockMvcBuilder extends AbstractMockMvcBuilder<StandaloneMockMvcBuilder>; // A MockMvcBuilder that accepts @Controller registrations thus allowing full control over the instantiation and initialization of controllers and their dependencies similar to plain unit tests, and also making it possible to test one controller at a time.\n", "des": "Contains built-in MockMvcBuilder implementations."}
{"index": 1866, "repo": "spring-security-cas-6.1.2", "code": "package cas;\n\npackage cas.authentication; // An AuthenticationProvider that can process CAS service tickets and proxy tickets.\npackage cas.web; // Authenticates standard web browser users via CAS.\npublic final class SamlServiceProperties extends ServiceProperties; // Sets the appropriate parameters for CAS's implementation of SAML (which is not guaranteed to be actually SAML compliant).\npublic class ServiceProperties extends Object implements org.springframework.beans.factory.InitializingBean; // Stores properties related to this CAS service.\n", "des": "Spring Security support for Apereo's Central Authentication Service (CAS)."}
{"index": 1867, "repo": "spring-security-cas-6.1.2", "code": "package authentication;\n\npublic final class CasAssertionAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // Temporary authentication object needed to load the user details service.\npublic class CasAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider, org.springframework.beans.factory.InitializingBean, org.springframework.context.MessageSourceAware; // An AuthenticationProvider implementation that integrates with JA-SIG Central Authentication Service (CAS).\npublic class CasAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken implements Serializable; // Represents a successful CAS Authentication.\npublic class CasServiceTicketAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // An Authentication implementation that is designed to process CAS service ticket.\npublic final class NullStatelessTicketCache extends Object implements StatelessTicketCache; // Implementation of @link StatelessTicketCache that has no backing cache.\npublic class SpringCacheBasedTicketCache extends Object implements StatelessTicketCache; // Caches tickets using a Spring IoC defined Cache.\npublic interface StatelessTicketCache; // Caches CAS service tickets and CAS proxy tickets for stateless connections.\n", "des": "An AuthenticationProvider that can process CAS service tickets and proxy tickets."}
{"index": 1868, "repo": "spring-security-cas-6.1.2", "code": "package web;\n\npackage web.authentication; // Authentication processing mechanisms which respond to the submission of authentication credentials using CAS.\npublic class CasAuthenticationEntryPoint extends Object implements org.springframework.security.web.AuthenticationEntryPoint, org.springframework.beans.factory.InitializingBean; // Used by the ExceptionTranslationFilter to commence authentication via the JA-SIG Central Authentication Service (CAS).\npublic class CasAuthenticationFilter extends org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter; // Processes a CAS service ticket, obtains proxy granting tickets, and processes proxy tickets.\n", "des": "Authenticates standard web browser users via CAS."}
{"index": 1869, "repo": "spring-security-cas-6.1.2", "code": "package authentication;\n\npublic interface ServiceAuthenticationDetails extends Serializable; // In order for the CasAuthenticationProvider to provide the correct service url to authenticate the ticket, the returned value of Authentication.getDetails() should implement this interface when tickets can be sent to any URL rather than only ServiceProperties.getService().\npublic class ServiceAuthenticationDetailsSource extends Object implements org.springframework.security.authentication.AuthenticationDetailsSource<jakarta.servlet.http.HttpServletRequest,ServiceAuthenticationDetails>; // The AuthenticationDetailsSource that is set on the CasAuthenticationFilter should return a value that implements ServiceAuthenticationDetails if the application needs to authenticate dynamic service urls.\n", "des": "Authentication processing mechanisms which respond to the submission of authentication credentials using CAS."}
{"index": 1870, "repo": "shiro-core-2.0.0-alpha-2", "code": "package shiro;\n\npackage shiro.aop; // Components used to support the framework's AOP/interception support classes.\npackage shiro.authc; // Core interfaces and exceptions concerning Authentication (the act of logging-in).\npackage shiro.authz; // Core interfaces and exceptions supporting Authorization (access control).\npackage shiro.concurrent; // Executor, ExecutorService, and ScheduledExecutorService implementations for transparent Subject association with threads in an asynchronous execution environment.\npackage shiro.dao; // Package containing various components useful when building Data Access Objects (DAOs), including a generic Data Access Exception hierarchy.\npackage shiro.env; // Concepts used to represent Shiro's aggregate state in an application.\npackage shiro.jndi; // Enables accessing objects located in JNDI that might be useful when configuring a Shiro-enabled application.\npackage shiro.mgt; // Provides the master SecurityManager interface and a default implementation hierarchy for managing all aspects of Shiro's functionality in an application.\npackage shiro.realm; // Components and sub-packages used in supporting the core Realm interface.\npackage shiro.session; // Components related to managing sessions, the time-based data contexts in which a Subject interacts with an application.\npackage shiro.subject; // Components supporting the Subject interface, the most important concept in Shiro's API.\npackage shiro.util; // Your run-of-the-mill 'util' package for components and logic widely used across the framework that can't find their home into a proper OO hierarchy (or, most likely for things used across many hierarchies).\npublic abstract class SecurityUtils extends Object; // Accesses the currently accessible Subject for the calling code depending on runtime environment.\npublic class UnavailableSecurityManagerException extends org.apache.shiro.lang.ShiroException; // Exception thrown when attempting to acquire the application's SecurityManager instance, but Shiro's lookup heuristics cannot find one.\n", "des": "This package primarily exists as a root classpath distinction, but it does contain two core classes widely used by applications, SecurityUtils and ShiroException."}
{"index": 1871, "repo": "shiro-core-2.0.0-alpha-2", "code": "package aop;\n\npublic abstract class AnnotationHandler extends Object; // Base support class for implementations that reads and processes JSR-175 annotations.\npublic abstract class AnnotationMethodInterceptor extends MethodInterceptorSupport; // MethodInterceptor that inspects a specific annotation on the method invocation before continuing its execution.\npublic interface AnnotationResolver; // Defines an AOP-framework-independent way of determining if an Annotation exists on a Method.\npublic class DefaultAnnotationResolver extends Object implements AnnotationResolver; // Default AnnotationResolver implementation that merely inspects the MethodInvocation's target method, and returns targetMethod.getAnnotation(class).\npublic interface MethodInterceptor; // A MethodInterceptor intercepts a MethodInvocation to perform before or after logic (aka 'advice').\npublic abstract class MethodInterceptorSupport extends Object implements MethodInterceptor; // This class is an abstraction of AOP method interceptor behavior specific to Shiro that leaves AOP implementation specifics to be handled by subclass implementations.\npublic interface MethodInvocation; // 3rd-party API independent representation of a method invocation.\n", "des": "Components used to support the framework's AOP/interception support classes."}
{"index": 1872, "repo": "shiro-core-2.0.0-alpha-2", "code": "package authc;\n\npackage authc.credential; // Support for validating credentials (such as passwords or X509 certificates) during authentication via the CredentialsMatcher interface and its supporting implementations.\npackage authc.pam; // Support for PAM, or Pluggable Authentication Modules, which is the capability to authenticate a user against multiple configurable (pluggable) modules (Shiro calls these Realms).\npublic abstract class AbstractAuthenticator extends Object implements Authenticator, LogoutAware; // Superclass for almost all Authenticator implementations that performs the common work around authentication attempts.\npublic interface Account extends AuthenticationInfo, AuthorizationInfo; // An Account is a convenience interface that extends both AuthenticationInfo and AuthorizationInfo and represents authentication and authorization for a single account in a single Realm.\npublic class AccountException extends AuthenticationException; // Exception thrown due to a problem with the account under which an authentication attempt is being executed.\npublic class AuthenticationException extends org.apache.shiro.lang.ShiroException; // General exception thrown due to an error during the Authentication process.\npublic interface AuthenticationInfo extends Serializable; // AuthenticationInfo represents a Subject's (aka user's) stored account information relevant to the authentication/log-in process only.\npublic interface AuthenticationListener; // An AuthenticationListener listens for notifications while Subjects authenticate with the system.\npublic interface AuthenticationToken extends Serializable; // An AuthenticationToken is a consolidation of an account's principals and supporting credentials submitted by a user during an authentication attempt.\npublic interface Authenticator; // An Authenticator is responsible for authenticating accounts in an application.\npublic class BearerToken extends Object implements HostAuthenticationToken; // A AuthenticationToken that contains an a Bearer token or API key, typically received via an HTTP Authorization header.\npublic class ConcurrentAccessException extends AccountException; // Thrown when an authentication attempt has been received for an account that has already been authenticated (i.e.\npublic class CredentialsException extends AuthenticationException; // Exception thrown due to a problem with the credential(s) submitted for an account during the authentication process.\npublic class DisabledAccountException extends AccountException; // Thrown when attempting to authenticate and the corresponding account has been disabled for some reason.\npublic class ExcessiveAttemptsException extends AccountException; // Thrown when a system is configured to only allow a certain number of authentication attempts over a period of time and the current session has failed to authenticate successfully within that number.\n", "des": "Core interfaces and exceptions concerning Authentication (the act of logging-in)."}
{"index": 1873, "repo": "shiro-core-2.0.0-alpha-2", "code": "package credential;\n\npublic class AllowAllCredentialsMatcher extends Object implements CredentialsMatcher; // A credentials matcher that always returns true when matching credentials no matter what arguments are passed in.\npublic interface CredentialsMatcher; // Interface implemented by classes that can determine if an AuthenticationToken's provided credentials matches a corresponding account's credentials stored in the system.\npublic class DefaultPasswordService extends Object implements HashingPasswordService; // Default implementation of the PasswordService interface that relies on an internal HashService, HashFormat, and HashFormatFactory to function:\npublic class HashedCredentialsMatcher extends SimpleCredentialsMatcher; // A HashedCredentialMatcher provides support for hashing of supplied AuthenticationToken credentials before being compared to those in the AuthenticationInfo from the data store.\npublic interface HashingPasswordService extends PasswordService; // A HashingPasswordService is a PasswordService that performs password encryption and comparisons based on cryptographic Hashes.\npublic class PasswordMatcher extends Object implements CredentialsMatcher; // A CredentialsMatcher that employs best-practices comparisons for hashed text passwords.\npublic interface PasswordService; // A PasswordService supports common use cases when using passwords as a credentials mechanism.\npublic class Sha256CredentialsMatcher extends HashedCredentialsMatcher;\npublic class Sha384CredentialsMatcher extends HashedCredentialsMatcher;\npublic class Sha512CredentialsMatcher extends HashedCredentialsMatcher;\npublic class SimpleCredentialsMatcher extends org.apache.shiro.lang.codec.CodecSupport implements CredentialsMatcher; // Simple CredentialsMatcher implementation.\n", "des": "Support for validating credentials (such as passwords or X509 certificates) during authentication via the CredentialsMatcher interface and its supporting implementations."}
{"index": 1874, "repo": "shiro-core-2.0.0-alpha-2", "code": "package pam;\n\npublic abstract class AbstractAuthenticationStrategy extends Object implements AuthenticationStrategy; // Abstract base implementation for Shiro's concrete AuthenticationStrategy implementations.\npublic class AllSuccessfulStrategy extends AbstractAuthenticationStrategy; // AuthenticationStrategy implementation that requires all configured realms to successfully process the submitted AuthenticationToken during the log-in attempt.\npublic class AtLeastOneSuccessfulStrategy extends AbstractAuthenticationStrategy; // AuthenticationStrategy implementation that requires at least one configured realm to successfully process the submitted AuthenticationToken during the log-in attempt.\npublic interface AuthenticationStrategy; // A AuthenticationStrategy implementation assists the ModularRealmAuthenticator during the log-in process in a pluggable realm (PAM) environment.\npublic class FirstSuccessfulStrategy extends AbstractAuthenticationStrategy; // AuthenticationStrategy implementation that only accepts the account data from the first successfully consulted Realm and ignores all subsequent realms.\npublic class ModularRealmAuthenticator extends AbstractAuthenticator; // A ModularRealmAuthenticator delegates account lookups to a pluggable (modular) collection of Realms.\npublic class ShortCircuitIterationException extends AuthenticationException; // Exception thrown during the authentication process using FirstSuccessfulStrategy, with stopAfterFirstSuccess set.\npublic class UnsupportedTokenException extends AuthenticationException; // Exception thrown during the authentication process when an AuthenticationToken implementation is encountered that is not supported by one or more configured Realms.\n", "des": "Support for PAM, or Pluggable Authentication Modules, which is the capability to authenticate a user against multiple configurable (pluggable) modules (Shiro calls these Realms)."}
{"index": 1875, "repo": "shiro-core-2.0.0-alpha-2", "code": "package authz;\n\npackage authz.annotation; // Annotations used to restrict which classes, instances, or methods may be accessed or invoked depending on the caller's access abilities or authentication state.\npackage authz.aop; // Contains AOP implementation support classes specifically used for authorization operations, particularly supporting AOP Method Interceptors and JSR-175 metadata Annotations.\npackage authz.permission; // Support and default implementations for Shiro's Permission interface.\npublic class AuthorizationException extends org.apache.shiro.lang.ShiroException; // Exception thrown if there is a problem during authorization (access control check).\npublic interface AuthorizationInfo extends Serializable; // AuthorizationInfo represents a single Subject's stored authorization data (roles, permissions, etc.) used during authorization (access control) checks only.\npublic interface Authorizer; // An Authorizer performs authorization (access control) operations for any given Subject (aka 'application user').\npublic class HostUnauthorizedException extends UnauthorizedException; // Thrown when a particular client (that is, host address) has not been enabled to access the system or if the client has been enabled access but is not permitted to perform a particular operation or access a particular resource.\npublic class ModularRealmAuthorizer extends Object implements Authorizer, PermissionResolverAware, RolePermissionResolverAware; // A ModularRealmAuthorizer is an Authorizer implementation that consults one or more configured Realms during an authorization operation.\npublic interface Permission; // A Permission represents the ability to perform an action or access a resource.\npublic class SimpleAuthorizationInfo extends Object implements AuthorizationInfo; // Simple POJO implementation of the AuthorizationInfo interface that stores roles and permissions as internal attributes.\npublic class SimpleRole extends Object implements Serializable; // A simple representation of a security role that has a name and a collection of permissions.\npublic class UnauthenticatedException extends AuthorizationException; // Exception thrown when attempting to execute an authorization action when a successful authentication hasn't yet occurred.\npublic class UnauthorizedException extends AuthorizationException; // Thrown to indicate a requested operation or access to a requested resource is not allowed.\n", "des": "Core interfaces and exceptions supporting Authorization (access control)."}
{"index": 1876, "repo": "shiro-core-2.0.0-alpha-2", "code": "package annotation;\n\npublic enum Logical extends Enum<Logical>; // An enum for specifying a logical operation that can be used for interpreting authorization annotations\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface RequiresAuthentication; // Requires the current Subject to have been authenticated during their current session for the annotated class/instance/method to be accessed or invoked.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface RequiresGuest; // Requires the current Subject to be a \"guest\", that is, they are not authenticated or remembered from a previous session for the annotated class/instance/method to be accessed or invoked.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface RequiresPermissions; // Requires the current executor's Subject to imply a particular permission in order to execute the annotated method.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface RequiresRoles; // Requires the currently executing Subject to have all of the specified roles.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface RequiresUser; // Requires the current Subject to be an application user for the annotated class/instance/method to be accessed or invoked.\n", "des": "Annotations used to restrict which classes, instances, or methods may be accessed or invoked depending on the caller's access abilities or authentication state."}
{"index": 1877, "repo": "shiro-core-2.0.0-alpha-2", "code": "package aop;\n\npublic abstract class AnnotationsAuthorizingMethodInterceptor extends AuthorizingMethodInterceptor; // An AnnotationsAuthorizingMethodInterceptor is a MethodInterceptor that asserts a given method is authorized to execute based on one or more configured AuthorizingAnnotationMethodInterceptors.\npublic class AuthenticatedAnnotationHandler extends AuthorizingAnnotationHandler; // Handles RequiresAuthentication annotations and ensures the calling subject is authenticated before allowing access.\npublic class AuthenticatedAnnotationMethodInterceptor extends AuthorizingAnnotationMethodInterceptor; // Checks to see if a @RequiresAuthenticated annotation is declared, and if so, ensures the calling Subject.isAuthenticated() before invoking the method.\npublic abstract class AuthorizingAnnotationHandler extends AnnotationHandler; // An AnnotationHandler that executes authorization (access control) behavior based on directive(s) found in a JSR-175 Annotation.\npublic abstract class AuthorizingAnnotationMethodInterceptor extends AnnotationMethodInterceptor; // An AnnotationMethodInterceptor that asserts the calling code is authorized to execute the method before allowing the invocation to continue by inspecting code annotations to perform an access control check.\npublic abstract class AuthorizingMethodInterceptor extends MethodInterceptorSupport; // Basic abstract class to support intercepting methods that perform authorization (access control) checks.\npublic class DenyAllAnnotationHandler extends AuthorizingAnnotationHandler; // This AnnotationHandler denys access from any subject (anonymous or logged in user).\npublic class GuestAnnotationHandler extends AuthorizingAnnotationHandler; // Checks to see if a @RequiresGuest annotation is declared, and if so, ensures the calling Subject does not have an identity before invoking the method.\npublic class GuestAnnotationMethodInterceptor extends AuthorizingAnnotationMethodInterceptor; // Checks to see if a @RequiresGuest annotation is declared, and if so, ensures the calling Subject does not have an identity before invoking the method.\npublic class PermissionAnnotationHandler extends AuthorizingAnnotationHandler; // Checks to see if a @RequiresPermissions annotation is declared, and if so, performs a permission check to see if the calling Subject is allowed continued access.\npublic class PermissionAnnotationMethodInterceptor extends AuthorizingAnnotationMethodInterceptor; // Checks to see if a @RequiresPermissions annotation is declared, and if so, performs a permission check to see if the calling Subject is allowed to call the method.\npublic class PermitAllAnnotationHandler extends AuthorizingAnnotationHandler; // This AnnotationHandler allows access from any subject (anonymous or logged in user).\n", "des": "Contains AOP implementation support classes specifically used for authorization operations, particularly supporting AOP Method Interceptors and JSR-175 metadata Annotations."}
{"index": 1878, "repo": "shiro-core-2.0.0-alpha-2", "code": "package permission;\n\npublic class AllPermission extends Object implements Permission, Serializable; // An all AllPermission instance is one that always implies any other permission; that is, its implies method always returns true.\npublic class DomainPermission extends WildcardPermission; // Provides a base Permission class from which type-safe/domain-specific subclasses may extend.\npublic class InvalidPermissionStringException extends org.apache.shiro.lang.ShiroException; // Thrown by PermissionResolver.resolvePermission(String) when the String being parsed is not valid for that resolver.\npublic interface PermissionResolver; // A PermissionResolver resolves a String value and converts it into a Permission instance.\npublic interface PermissionResolverAware; // Interface implemented by a component that wishes to use any application-configured PermissionResolver that might already exist instead of potentially creating one itself.\npublic interface RolePermissionResolver; // A RolePermissionResolver resolves a String value and converts it into a Collection of Permission instances.\npublic interface RolePermissionResolverAware; // Interface implemented by a component that wishes to use any application-configured RolePermissionResolver that might already exist instead of potentially creating one itself.\npublic class WildcardPermission extends Object implements Permission, Serializable; // A WildcardPermission is a very flexible permission construct supporting multiple levels of permission matching.\npublic class WildcardPermissionResolver extends Object implements PermissionResolver; // PermissionResolver implementation that returns a new WildcardPermission based on the input string.\n", "des": "Support and default implementations for Shiro's Permission interface."}
{"index": 1879, "repo": "shiro-core-2.0.0-alpha-2", "code": "package concurrent;\n\npublic class SubjectAwareExecutor extends Object implements Executor; // Executor implementation that will automatically first associate any argument Runnable instances with the currently available Subject and then dispatch the Subject-enabled runnable to an underlying delegate Executor instance.\npublic class SubjectAwareExecutorService extends SubjectAwareExecutor implements ExecutorService; // ExecutorService implementation that will automatically first associate any argument Runnable or Callable instances with the currently available subject and then dispatch the Subject-enabled runnable or callable to an underlying delegate ExecutorService instance.\npublic class SubjectAwareScheduledExecutorService extends SubjectAwareExecutorService implements ScheduledExecutorService; // Same concept as the SubjectAwareExecutorService but additionally supports the ScheduledExecutorService interface.\n", "des": "Executor, ExecutorService, and ScheduledExecutorService implementations for transparent Subject association with threads in an asynchronous execution environment."}
{"index": 1880, "repo": "shiro-core-2.0.0-alpha-2", "code": "package dao;\n\npublic abstract class DataAccessException extends org.apache.shiro.lang.ShiroException; // Generic exception representing a problem when attempting to access data.\npublic class InvalidResourceUsageException extends DataAccessException; // Root exception indicating invalid or incorrect usage of a data access resource.\n", "des": "Package containing various components useful when building Data Access Objects (DAOs), including a generic Data Access Exception hierarchy."}
{"index": 1881, "repo": "shiro-core-2.0.0-alpha-2", "code": "package env;\n\npublic class BasicIniEnvironment extends DefaultEnvironment; // Basic usage:\npublic class DefaultEnvironment extends Object implements NamedObjectEnvironment, org.apache.shiro.lang.util.Destroyable; // Simple/default Environment implementation that stores Shiro objects as key-value pairs in a Map instance.\npublic interface Environment; // An Environment instance encapsulates all of the objects that Shiro requires to function.\npublic class EnvironmentException extends org.apache.shiro.lang.ShiroException; // Exception thrown for errors related to Environment instances or configuration.\npublic interface NamedObjectEnvironment extends Environment; // An environment that supports object lookup by name.\npublic class RequiredTypeException extends EnvironmentException; // Exception thrown when attempting to acquire an object of a required type and that object does not equal, extend, or implement a specified Class.\n", "des": "Concepts used to represent Shiro's aggregate state in an application."}
{"index": 1882, "repo": "shiro-core-2.0.0-alpha-2", "code": "package jndi;\n\npublic interface JndiCallback; // Callback interface to be implemented by classes that need to perform an operation (such as a lookup) in a JNDI context.\npublic class JndiLocator extends Object; // Convenient superclass for JNDI accessors, providing \"jndiTemplate\" and \"jndiEnvironment\" bean properties.\npublic class JndiObjectFactory<T> extends JndiLocator implements org.apache.shiro.lang.util.Factory<T>; // A factory implementation intended to be used to look up objects in jndi.\npublic class JndiTemplate extends Object; // Helper class that simplifies JNDI operations.\n", "des": "Enables accessing objects located in JNDI that might be useful when configuring a Shiro-enabled application."}
{"index": 1883, "repo": "shiro-core-2.0.0-alpha-2", "code": "package mgt;\n\npublic abstract class AbstractRememberMeManager extends Object implements RememberMeManager; // Abstract implementation of the RememberMeManager interface that handles serialization and encryption of the remembered user identity.\npublic abstract class AuthenticatingSecurityManager extends RealmSecurityManager; // Shiro support of a SecurityManager class hierarchy that delegates all authentication operations to a wrapped Authenticator instance.\npublic abstract class AuthorizingSecurityManager extends AuthenticatingSecurityManager; // Shiro support of a SecurityManager class hierarchy that delegates all authorization (access control) operations to a wrapped Authorizer instance.\npublic abstract class CachingSecurityManager extends Object implements SecurityManager, org.apache.shiro.lang.util.Destroyable, org.apache.shiro.cache.CacheManagerAware, org.apache.shiro.event.EventBusAware; // A very basic starting point for the SecurityManager interface that merely provides logging and caching support.\npublic class DefaultSecurityManager extends SessionsSecurityManager; // The Shiro framework's default concrete implementation of the SecurityManager interface, based around a collection of Realms.\npublic class DefaultSessionStorageEvaluator extends Object implements SessionStorageEvaluator; // A Default SessionStorageEvaluator that provides reasonable control over if and how Sessions may be used for storing Subject state.\npublic class DefaultSubjectDAO extends Object implements SubjectDAO; // Default SubjectDAO implementation that stores Subject state in the Subject's Session by default (but this can be disabled - see below).\npublic class DefaultSubjectFactory extends Object implements SubjectFactory; // Default SubjectFactory implementation that creates DelegatingSubject instances.\npublic abstract class RealmSecurityManager extends CachingSecurityManager; // Shiro support of a SecurityManager class hierarchy based around a collection of Realms.\npublic interface RememberMeManager; // A RememberMeManager is responsible for remembering a Subject's identity across that Subject's sessions with the application.\npublic interface SecurityManager extends Authenticator, Authorizer, SessionManager; // A SecurityManager executes all security operations for all Subjects (aka users) across a single application.\npublic abstract class SessionsSecurityManager extends AuthorizingSecurityManager; // Shiro support of a SecurityManager class hierarchy that delegates all session operations to a wrapped SessionManager instance.\npublic interface SessionStorageEvaluator; // Evaluates whether or not Shiro may use a Subject's Session to persist that Subject's internal state.\n", "des": "Provides the master SecurityManager interface and a default implementation hierarchy for managing all aspects of Shiro's functionality in an application."}
{"index": 1884, "repo": "shiro-core-2.0.0-alpha-2", "code": "package realm;\n\npackage realm.activedirectory; // Realms that acquire security data from a Microsoft Active Directory.\npackage realm.jdbc; // Realms that acquire security data from an RDBMS (Relational Database Management System) using the JDBC API.\npackage realm.jndi; // Support for acquiring Realms from JNDI, particularly useful for configuring Shiro in JEE or EJB environments.\npackage realm.ldap; // Realms that acquire security data from an LDAP (Lightweight Directory Access Protocol) server utilizing LDAP/Naming APIs.\npackage realm.text; // Realms that acquire security data from text-based data sources such as Files or text streams.\npublic abstract class AuthenticatingRealm extends CachingRealm implements org.apache.shiro.lang.util.Initializable; // A top-level abstract implementation of the Realm interface that only implements authentication support (log-in) operations and leaves authorization (access control) behavior to subclasses.\npublic abstract class AuthorizingRealm extends AuthenticatingRealm implements Authorizer, org.apache.shiro.lang.util.Initializable, PermissionResolverAware, RolePermissionResolverAware; // An AuthorizingRealm extends the AuthenticatingRealm's capabilities by adding Authorization (access control) support.\npublic abstract class CachingRealm extends Object implements Realm, org.apache.shiro.lang.util.Nameable, org.apache.shiro.cache.CacheManagerAware, LogoutAware; // A very basic abstract extension point for the Realm interface that provides caching support for subclasses.\npublic interface Realm; // A Realm is a security component that can access application-specific security entities such as users, roles, and permissions to determine authentication and authorization operations.\npublic interface RealmFactory; // Enables Shiro end-users to configure and initialize one or more Realm instances in any manner desired.\npublic class SimpleAccountRealm extends AuthorizingRealm; // A simple implementation of the Realm interface that uses a set of configured user accounts and roles to support authentication and authorization.\n", "des": "Components and sub-packages used in supporting the core Realm interface."}
{"index": 1885, "repo": "shiro-core-2.0.0-alpha-2", "code": "package activedirectory;\n\npublic class ActiveDirectoryRealm extends AbstractLdapRealm; // A Realm that authenticates with an active directory LDAP server to determine the roles for a particular user.\n", "des": "Realms that acquire security data from a Microsoft Active Directory."}
{"index": 1886, "repo": "shiro-core-2.0.0-alpha-2", "code": "package jdbc;\n\npublic class JdbcRealm extends AuthorizingRealm; // Realm that allows authentication and authorization via JDBC calls.\npublic static enum JdbcRealm.SaltStyle extends Enum<JdbcRealm.SaltStyle>; // Password hash salt configuration.\n", "des": "Realms that acquire security data from an RDBMS (Relational Database Management System) using the JDBC API."}
{"index": 1887, "repo": "shiro-core-2.0.0-alpha-2", "code": "package jndi;\n\npublic class JndiRealmFactory extends JndiLocator implements RealmFactory; // Looks up one or more Realm instances from JNDI using specified jndiNames.\n", "des": "Support for acquiring Realms from JNDI, particularly useful for configuring Shiro in JEE or EJB environments."}
{"index": 1888, "repo": "shiro-core-2.0.0-alpha-2", "code": "package ldap;\n\npublic abstract class AbstractLdapRealm extends AuthorizingRealm; // A Realm that authenticates with an LDAP server to build the Subject for a user.\npublic class DefaultLdapRealm extends AuthorizingRealm; // An LDAP Realm implementation utilizing Sun's/Oracle's JNDI API as an LDAP API.\npublic class JndiLdapContextFactory extends Object implements LdapContextFactory; // LdapContextFactory implementation using the default Sun/Oracle JNDI Ldap API, utilizing JNDI environment properties and an InitialContext.\npublic class JndiLdapRealm extends DefaultLdapRealm;\npublic interface LdapContextFactory; // Interface that encapsulates the creation of LdapContext objects that are used by DefaultLdapRealms to perform authentication attempts and query for authorization data.\npublic final class LdapUtils extends Object; // Utility class providing static methods to make working with LDAP easier.\n", "des": "Realms that acquire security data from an LDAP (Lightweight Directory Access Protocol) server utilizing LDAP/Naming APIs."}
{"index": 1889, "repo": "shiro-core-2.0.0-alpha-2", "code": "package text;\n\npublic class IniRealm extends TextConfigurationRealm; // A Realm implementation that creates SimpleAccount instances based on Ini configuration.\npublic class PropertiesRealm extends TextConfigurationRealm implements org.apache.shiro.lang.util.Destroyable, Runnable; // A TextConfigurationRealm that defers all logic to the parent class, but just enables Properties based configuration in addition to the parent class's String configuration.\npublic class TextConfigurationRealm extends SimpleAccountRealm; // A SimpleAccountRealm that enables text-based configuration of the initial User, Role, and Permission objects created at startup.\n", "des": "Realms that acquire security data from text-based data sources such as Files or text streams."}
{"index": 1890, "repo": "shiro-core-2.0.0-alpha-2", "code": "package session;\n\npackage session.mgt; // SessionManager components supporting enterprise session management.\npublic class ExpiredSessionException extends StoppedSessionException; // A special case of a StoppedSessionException.\npublic class InvalidSessionException extends SessionException; // Exception thrown when attempting to interact with the system under an established session when that session is considered invalid.\npublic class ProxiedSession extends Object implements Session; // Simple Session implementation that immediately delegates all corresponding calls to an underlying proxied session instance.\npublic interface Session; // A Session is a stateful data context associated with a single Subject (user, daemon process, etc.) who interacts with a software system over a period of time.\npublic class SessionException extends org.apache.shiro.lang.ShiroException; // General security exception attributed to problems during interaction with the system during a session.\npublic interface SessionListener; // Interface to be implemented by components that wish to be notified of events that occur during a Session's life cycle.\npublic class SessionListenerAdapter extends Object implements SessionListener; // Simple adapter implementation of the SessionListener interface, effectively providing no-op implementations of all methods.\npublic class StoppedSessionException extends InvalidSessionException; // Exception thrown when attempting to interact with the system under a session that has been stopped.\npublic class UnknownSessionException extends InvalidSessionException; // Exception thrown when attempting to interact with the system under the pretense of a particular session (e.g.\n", "des": "Components related to managing sessions, the time-based data contexts in which a Subject interacts with an application."}
{"index": 1891, "repo": "shiro-core-2.0.0-alpha-2", "code": "package mgt;\n\npackage mgt.eis; // EIS (Enterprise Information System)-tier components that can perform CRUD operations for sessions using any EIS API.\npublic abstract class AbstractNativeSessionManager extends AbstractSessionManager implements NativeSessionManager, org.apache.shiro.event.EventBusAware; // Abstract implementation supporting the NativeSessionManager interface, supporting SessionListeners and application of the globalSessionTimeout.\npublic abstract class AbstractSessionManager extends Object implements SessionManager; // Base abstract class of the SessionManager interface, enabling configuration of an application-wide globalSessionTimeout.\npublic abstract class AbstractValidatingSessionManager extends AbstractNativeSessionManager implements ValidatingSessionManager, org.apache.shiro.lang.util.Destroyable; // Default business-tier implementation of the ValidatingSessionManager interface.\npublic class DefaultSessionContext extends MapContext implements SessionContext; // Default implementation of the SessionContext interface which provides getters and setters that wrap interaction with the underlying backing context map.\npublic class DefaultSessionKey extends Object implements SessionKey, Serializable; // Default implementation of the SessionKey interface, which allows setting and retrieval of a concrete sessionId that the SessionManager implementation can use to look up a Session instance.\npublic class DefaultSessionManager extends AbstractValidatingSessionManager implements org.apache.shiro.cache.CacheManagerAware; // Default business-tier implementation of a ValidatingSessionManager.\npublic class DelegatingSession extends Object implements Session, Serializable; // A DelegatingSession is a client-tier representation of a server side Session.\npublic class ExecutorServiceSessionValidationScheduler extends Object implements SessionValidationScheduler, Runnable; // SessionValidationScheduler implementation that uses a ScheduledExecutorService to call ValidatingSessionManager.validateSessions() every sessionValidationInterval milliseconds.\npublic class ImmutableProxiedSession extends ProxiedSession; // Implementation of the Session interface that proxies another Session, but does not allow any 'write' operations to the underlying session.\npublic interface NativeSessionManager extends SessionManager; // A Native session manager is one that manages sessions natively - that is, it is directly responsible for the creation, persistence and removal of Session instances and their lifecycles.\npublic interface SessionContext extends Map<String,Object>; // A SessionContext is a 'bucket' of data presented to a SessionFactory which interprets this data to construct Session instances.\npublic interface SessionFactory; // A simple factory class that instantiates concrete Session instances.\n", "des": "SessionManager components supporting enterprise session management."}
{"index": 1892, "repo": "shiro-core-2.0.0-alpha-2", "code": "package eis;\n\npublic abstract class AbstractSessionDAO extends Object implements SessionDAO; // An abstract SessionDAO implementation that performs some sanity checks on session creation and reading and allows for pluggable Session ID generation strategies if desired.\npublic abstract class CachingSessionDAO extends AbstractSessionDAO implements org.apache.shiro.cache.CacheManagerAware; // An CachingSessionDAO is a SessionDAO that provides a transparent caching layer between the components that use it and the underlying EIS (Enterprise Information System) session backing store (for example, filesystem, database, enterprise grid/cloud, etc.).\npublic class EnterpriseCacheSessionDAO extends CachingSessionDAO; // SessionDAO implementation that relies on an enterprise caching product as the EIS system of record for all sessions.\npublic class JavaUuidSessionIdGenerator extends Object implements SessionIdGenerator; // SessionIdGenerator that generates String values of JDK UUID's as the session IDs.\npublic class MemorySessionDAO extends AbstractSessionDAO; // Simple memory-based implementation of the SessionDAO that stores all of its sessions in an in-memory ConcurrentMap.\npublic class RandomSessionIdGenerator extends Object implements SessionIdGenerator; // Generates session IDs by using a Random instance to generate random IDs.\npublic interface SessionDAO; // Data Access Object design pattern specification to enable Session access to an EIS (Enterprise Information System).\npublic interface SessionIdGenerator; // Interface allowing pluggable session ID generation strategies to be used with various SessionDAO implementations.\n", "des": "EIS (Enterprise Information System)-tier components that can perform CRUD operations for sessions using any EIS API."}
{"index": 1893, "repo": "shiro-core-2.0.0-alpha-2", "code": "package subject;\n\npackage subject.support; // Concrete support implementations of most of the org.apache.shiro.subject interfaces.\npublic class ExecutionException extends org.apache.shiro.lang.ShiroException; // Exception wrapping any potential checked exception thrown when a Subject executes a Callable.\npublic interface MutablePrincipalCollection extends PrincipalCollection; // A PrincipalCollection that allows modification.\npublic interface PrincipalCollection extends Iterable, Serializable; // A collection of all principals associated with a corresponding Subject.\npublic interface PrincipalMap extends PrincipalCollection, Map<String,Object>; // EXPERIMENTAL - DO NOT USE YET\npublic class SimplePrincipalCollection extends Object implements MutablePrincipalCollection; // A simple implementation of the MutablePrincipalCollection interface that tracks principals internally by storing them in a LinkedHashMap.\npublic class SimplePrincipalMap extends Object implements PrincipalMap; // Default implementation of the PrincipalMap interface.\npublic interface Subject; // A Subject represents state and security operations for a single application user.\npublic static class Subject.Builder extends Object; // Builder design pattern implementation for creating Subject instances in a simplified way without requiring knowledge of Shiro's construction techniques.\npublic interface SubjectContext extends Map<String,Object>; // A SubjectContext is a 'bucket' of data presented to a SecurityManager which interprets this data to construct Subject instances.\n", "des": "Components supporting the Subject interface, the most important concept in Shiro's API."}
{"index": 1894, "repo": "shiro-core-2.0.0-alpha-2", "code": "package support;\n\npublic class DefaultSubjectContext extends MapContext implements SubjectContext; // Default implementation of the SubjectContext interface.\npublic class DelegatingSubject extends Object implements Subject; // Implementation of the Subject interface that delegates method calls to an underlying SecurityManager instance for security checks.\npublic class DisabledSessionException extends SessionException; // Exception thrown if attempting to create a new Subject session, but that Subject's sessions are disabled.\npublic class SubjectCallable<V> extends Object implements Callable<V>; // A SubjectCallable associates a Subject with a target/delegate Callable to ensure proper Subject thread-state management when the Callable executes.\npublic class SubjectRunnable extends Object implements Runnable; // A SubjectRunnable ensures that a target/delegate Runnable will execute such that any call to SecurityUtils.getSubject() during the Runnable's execution will return the associated Subject instance.\npublic class SubjectThreadState extends Object implements ThreadState; // Manages thread-state for Subject access (supporting SecurityUtils.getSubject() calls) during a thread's execution.\n", "des": "Concrete support implementations of most of the org.apache.shiro.subject interfaces."}
{"index": 1895, "repo": "shiro-core-2.0.0-alpha-2", "code": "package util;\n\npublic abstract class AbstractFactory<T> extends Object implements org.apache.shiro.lang.util.Factory<T>; // TODO - Class JavaDoc\npublic class AntPathMatcher extends Object implements PatternMatcher; // PathMatcher implementation for Ant-style path patterns.\npublic class CollectionUtils extends Object; // Static helper class for use dealing with Collections.\n@Deprecated public abstract class JavaEnvironment extends Object;\npublic class JdbcUtils extends Object; // A set of static helper methods for managing JDBC API objects.\npublic class MapContext extends Object implements Map<String,Object>, Serializable; // A MapContext provides a common base for context-based data storage in a Map.\npublic interface PatternMatcher; // Interface for components that can match source strings against a specified pattern string.\npublic class PermissionUtils extends Object; // Utility class to help with String-to-Permission object resolution.\npublic class RegExPatternMatcher extends Object implements PatternMatcher; // PatternMatcher implementation that uses standard java.util.regex objects.\npublic abstract class ThreadContext extends Object; // A ThreadContext provides a means of binding and unbinding objects to the current thread based on key/value pairs.\npublic interface ThreadState; // A ThreadState instance manages any state that might need to be bound and/or restored during a thread's execution.\n", "des": "Your run-of-the-mill 'util' package for components and logic widely used across the framework that can't find their home into a proper OO hierarchy (or, most likely for things used across many hierarchies)."}
{"index": 1896, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package autoconfigure;\n\npackage autoconfigure.admin; // Auto-configuration for admin-related features.\npackage autoconfigure.amqp; // Auto-configuration for RabbitMQ.\npackage autoconfigure.aop; // Auto-configuration for Spring AOP.\npackage autoconfigure.availability; // Auto-configuration for application availability features.\npackage autoconfigure.batch; // Auto-configuration for Spring Batch.\npackage autoconfigure.cache; // Auto-configuration for the cache abstraction.\npackage autoconfigure.cassandra; // Auto-configuration for Cassandra.\npackage autoconfigure.codec; // Auto-configuration for reactive codecs.\npackage autoconfigure.condition; // @Condition annotations and supporting classes.\npackage autoconfigure.context; // Auto-configuration for the Spring context.\npackage autoconfigure.couchbase; // Auto-configuration for Couchbase.\npackage autoconfigure.dao; // Auto-configuration for Spring DAO.\npackage autoconfigure.data; // Auto-configuration base classes for Spring Data.\npackage autoconfigure.domain; // General purpose domain annotations and classes.\npackage autoconfigure.elasticsearch; // Auto-configuration for Elasticsearch client.\npackage autoconfigure.flyway; // Auto-configuration for Flyway.\npackage autoconfigure.freemarker; // Auto-configuration for FreeMarker.\npackage autoconfigure.graphql; // Auto-configuration for Spring GraphQL.\npackage autoconfigure.gson; // Auto-configuration for GSON.\npackage autoconfigure.h2; // Auto-configuration for H2's Console.\npackage autoconfigure.hateoas; // Auto-configuration for Spring HATEOAS.\npackage autoconfigure.hazelcast; // Auto-configuration for Hazelcast.\npackage autoconfigure.http; // Auto-configuration for HTTP concerns.\npackage autoconfigure.influx; // Auto-configuration for InfluxDB.\npackage autoconfigure.info; // Auto-configuration for project information.\npackage autoconfigure.integration; // Auto-configuration for Spring Integration.\npackage autoconfigure.jackson; // Auto-configuration for Jackson.\npackage autoconfigure.jdbc; // Auto-configuration for JDBC.\n", "des": "Spring Boot's auto-configuration capabilities."}
{"index": 1897, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package admin;\n\n@AutoConfiguration(after=JmxAutoConfiguration.class) @ConditionalOnProperty(prefix=\"spring.application.admin\", value=\"enabled\", havingValue=\"true\", matchIfMissing=false) public class SpringApplicationAdminJmxAutoConfiguration extends Object; // Register a JMX component that allows to administer the current application.\n", "des": "Auto-configuration for admin-related features."}
{"index": 1898, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package amqp;\n\npublic abstract class AbstractConnectionFactoryConfigurer<T extends org.springframework.amqp.rabbit.connection.AbstractConnectionFactory> extends Object; // Configures Rabbit ConnectionFactory with sensible defaults.\npublic abstract class AbstractRabbitListenerContainerFactoryConfigurer<T extends org.springframework.amqp.rabbit.config.AbstractRabbitListenerContainerFactory<?>> extends Object; // Configure RabbitListenerContainerFactory with sensible defaults.\npublic class CachingConnectionFactoryConfigurer extends AbstractConnectionFactoryConfigurer<org.springframework.amqp.rabbit.connection.CachingConnectionFactory>; // Configures Rabbit CachingConnectionFactory with sensible defaults.\n@FunctionalInterface public interface ConnectionFactoryCustomizer; // Callback interface that can be implemented by beans wishing to customize the auto-configured RabbitMQ ConnectionFactory.\npublic final class DirectRabbitListenerContainerFactoryConfigurer extends AbstractRabbitListenerContainerFactoryConfigurer<org.springframework.amqp.rabbit.config.DirectRabbitListenerContainerFactory>; // Configure DirectRabbitListenerContainerFactoryConfigurer with sensible defaults.\n@FunctionalInterface public interface EnvironmentBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the auto-configured Environment that is created by an EnvironmentBuilder.\n@AutoConfiguration @ConditionalOnClass({org.springframework.amqp.rabbit.core.RabbitTemplate.class,com.rabbitmq.client.Channel.class}) @EnableConfigurationProperties(RabbitProperties.class) @Import({org.springframework.boot.autoconfigure.amqp.RabbitAnnotationDrivenConfiguration.class,org.springframework.boot.autoconfigure.amqp.RabbitStreamConfiguration.class}) public class RabbitAutoConfiguration extends Object; // Auto-configuration for RabbitTemplate.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.amqp.rabbit.core.RabbitMessagingTemplate.class) @ConditionalOnMissingBean(org.springframework.amqp.rabbit.core.RabbitMessagingTemplate.class) @Import(RabbitTemplateConfiguration.class) protected static class RabbitAutoConfiguration.MessagingTemplateConfiguration extends Object;\n", "des": "Auto-configuration for RabbitMQ."}
{"index": 1899, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package aop;\n\n@AutoConfiguration @ConditionalOnProperty(prefix=\"spring.aop\", name=\"auto\", havingValue=\"true\", matchIfMissing=true) public class AopAutoConfiguration extends Object; // Auto-configuration for Spring's AOP support.\n", "des": "Auto-configuration for Spring AOP."}
{"index": 1900, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package availability;\n\n@AutoConfiguration public class ApplicationAvailabilityAutoConfiguration extends Object; // EnableAutoConfiguration for ApplicationAvailabilityBean.\n", "des": "Auto-configuration for application availability features."}
{"index": 1901, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package batch;\n\n@AutoConfiguration(after={HibernateJpaAutoConfiguration.class,TransactionAutoConfiguration.class}) @ConditionalOnClass({org.springframework.batch.core.launch.JobLauncher.class,javax.sql.DataSource.class,org.springframework.jdbc.datasource.init.DatabasePopulator.class}) @ConditionalOnBean({javax.sql.DataSource.class,org.springframework.transaction.PlatformTransactionManager.class}) @ConditionalOnMissingBean(value=org.springframework.batch.core.configuration.support.DefaultBatchConfiguration.class, annotation=org.springframework.batch.core.configuration.annotation.EnableBatchProcessing.class) @EnableConfigurationProperties(BatchProperties.class) @Import(org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer.class) public class BatchAutoConfiguration extends Object; // Auto-configuration for Spring Batch.\n@FunctionalInterface public interface BatchConversionServiceCustomizer; // Callback interface that can be implemented by beans wishing to customize the ConfigurableConversionService that is provided by DefaultBatchConfiguration while retaining its default auto-configuration.\n@Target({FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Qualifier public @interface BatchDataSource; // Qualifier annotation for a DataSource to be injected into Batch auto-configuration.\npublic class BatchDataSourceScriptDatabaseInitializer extends org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer; // DataSourceScriptDatabaseInitializer for the Spring Batch database.\n@ConfigurationProperties(prefix=\"spring.batch\") public class BatchProperties extends Object; // Configuration properties for Spring Batch.\npublic static class BatchProperties.Jdbc extends Object;\npublic static class BatchProperties.Job extends Object;\npublic class JobExecutionEvent extends org.springframework.context.ApplicationEvent; // Spring ApplicationEvent encapsulating a JobExecution.\npublic class JobExecutionExitCodeGenerator extends Object implements org.springframework.context.ApplicationListener<JobExecutionEvent>, org.springframework.boot.ExitCodeGenerator; // ExitCodeGenerator for JobExecutionEvents.\npublic class JobLauncherApplicationRunner extends Object implements org.springframework.boot.ApplicationRunner, org.springframework.core.Ordered, org.springframework.context.ApplicationEventPublisherAware; // ApplicationRunner to launch Spring Batch jobs.\n", "des": "Auto-configuration for Spring Batch."}
{"index": 1902, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package cache;\n\npublic interface Cache2kBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the default setup for caches added to the manager through addCaches and for dynamically created caches.\n@AutoConfiguration(after={CouchbaseDataAutoConfiguration.class,HazelcastAutoConfiguration.class,HibernateJpaAutoConfiguration.class,RedisAutoConfiguration.class}) @ConditionalOnClass(org.springframework.cache.CacheManager.class) @ConditionalOnBean(org.springframework.cache.interceptor.CacheAspectSupport.class) @ConditionalOnMissingBean(value=org.springframework.cache.CacheManager.class, name=\"cacheResolver\") @EnableConfigurationProperties(CacheProperties.class) @Import({org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration.CacheConfigurationImportSelector.class,org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration.CacheManagerEntityManagerFactoryDependsOnPostProcessor.class}) public class CacheAutoConfiguration extends Object; // Auto-configuration for the cache abstraction.\n@FunctionalInterface public interface CacheManagerCustomizer<T extends org.springframework.cache.CacheManager>; // Callback interface that can be implemented by beans wishing to customize the cache manager before it is fully initialized, in particular to tune its configuration.\npublic class CacheManagerCustomizers extends Object; // Invokes the available CacheManagerCustomizer instances in the context for a given CacheManager.\n@ConfigurationProperties(prefix=\"spring.cache\") public class CacheProperties extends Object; // Configuration properties for the cache abstraction.\npublic static class CacheProperties.Caffeine extends Object; // Caffeine specific cache properties.\npublic static class CacheProperties.Couchbase extends Object; // Couchbase specific cache properties.\npublic static class CacheProperties.Infinispan extends Object; // Infinispan specific cache properties.\npublic static class CacheProperties.JCache extends Object; // JCache (JSR-107) specific cache properties.\npublic static class CacheProperties.Redis extends Object; // Redis-specific cache properties.\npublic enum CacheType extends Enum<CacheType>; // Supported cache types (defined in order of precedence).\n", "des": "Auto-configuration for the cache abstraction."}
{"index": 1903, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package cassandra;\n\n@AutoConfiguration @ConditionalOnClass(com.datastax.oss.driver.api.core.CqlSession.class) @EnableConfigurationProperties(CassandraProperties.class) public class CassandraAutoConfiguration extends Object; // Auto-configuration for Cassandra.\npublic interface CassandraConnectionDetails extends ConnectionDetails; // Details required to establish a connection to a Cassandra service.\npublic static record CassandraConnectionDetails.Node(String host, int port) extends Record; // A Cassandra node.\n@ConfigurationProperties(prefix=\"spring.cassandra\") public class CassandraProperties extends Object; // Configuration properties for Cassandra.\npublic static enum CassandraProperties.Compression extends Enum<CassandraProperties.Compression>; // Name of the algorithm used to compress protocol frames.\npublic static class CassandraProperties.Connection extends Object;\npublic static class CassandraProperties.Controlconnection extends Object;\npublic static class CassandraProperties.Pool extends Object; // Pool properties.\npublic static class CassandraProperties.Request extends Object;\npublic static class CassandraProperties.Ssl extends Object;\npublic static class CassandraProperties.Throttler extends Object;\npublic static enum CassandraProperties.ThrottlerType extends Enum<CassandraProperties.ThrottlerType>;\n@FunctionalInterface public interface CqlSessionBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the CqlSession through a CqlSessionBuilder whilst retaining default auto-configuration.\npublic interface DriverConfigLoaderBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the DriverConfigLoader through a DriverConfigLoaderBuilderCustomizer whilst retaining default auto-configuration.\n", "des": "Auto-configuration for Cassandra."}
{"index": 1904, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package codec;\n\n@ConfigurationProperties(prefix=\"spring.codec\") public class CodecProperties extends Object; // properties for reactive codecs.\n", "des": "Auto-configuration for reactive codecs."}
{"index": 1905, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package condition;\n\npublic abstract class AbstractNestedCondition extends SpringBootCondition implements org.springframework.context.annotation.ConfigurationCondition; // Abstract base class for nested conditions.\nprotected static class AbstractNestedCondition.MemberMatchOutcomes extends Object;\npublic abstract class AllNestedConditions extends AbstractNestedCondition; // Condition that will match when all nested class conditions match.\n@Order(2147483627) public abstract class AnyNestedCondition extends AbstractNestedCondition; // Condition that will match when any nested class condition matches.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.condition.OnBeanCondition.class) public @interface ConditionalOnBean; // @Conditional that only matches when beans meeting all the specified requirements are already contained in the BeanFactory.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.condition.OnClassCondition.class) public @interface ConditionalOnClass; // @Conditional that only matches when the specified classes are on the classpath.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.condition.OnCloudPlatformCondition.class) public @interface ConditionalOnCloudPlatform; // @Conditional that matches when the specified cloud platform is active.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.autoconfigure.condition.OnExpressionCondition.class) public @interface ConditionalOnExpression; // Configuration annotation for a conditional element that depends on the value of a SpEL expression.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.condition.OnJavaCondition.class) public @interface ConditionalOnJava; // @Conditional that matches based on the JVM version the application is running on.\npublic static enum ConditionalOnJava.Range extends Enum<ConditionalOnJava.Range>; // Range options.\n", "des": "@Condition annotations and supporting classes."}
{"index": 1906, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package context;\n\n@AutoConfiguration @EnableConfigurationProperties public class ConfigurationPropertiesAutoConfiguration extends Object; // Auto-configuration for @ConfigurationProperties beans.\n@AutoConfiguration @EnableConfigurationProperties(LifecycleProperties.class) public class LifecycleAutoConfiguration extends Object; // Auto-configuration relating to the application context's lifecycle.\n@ConfigurationProperties(prefix=\"spring.lifecycle\") public class LifecycleProperties extends Object; // Configuration properties for lifecycle processing.\n@AutoConfiguration @ConditionalOnMissingBean(name=\"messageSource\", search=CURRENT) @AutoConfigureOrder(-2147483648) @Conditional(ResourceBundleCondition.class) @EnableConfigurationProperties public class MessageSourceAutoConfiguration extends Object; // Auto-configuration for MessageSource.\nprotected static class MessageSourceAutoConfiguration.ResourceBundleCondition extends SpringBootCondition;\npublic class MessageSourceProperties extends Object; // Configuration properties for Message Source.\n@AutoConfiguration @AutoConfigureOrder(-2147483648) public class PropertyPlaceholderAutoConfiguration extends Object; // Auto-configuration for PropertySourcesPlaceholderConfigurer.\n", "des": "Auto-configuration for the Spring context."}
{"index": 1907, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package couchbase;\n\n@FunctionalInterface public interface ClusterEnvironmentBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the ClusterEnvironment through a ClusterEnvironment.Builder whilst retaining default auto-configuration.\n@AutoConfiguration(after=JacksonAutoConfiguration.class) @ConditionalOnClass(com.couchbase.client.java.Cluster.class) @Conditional(org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration.CouchbaseCondition.class) @EnableConfigurationProperties(CouchbaseProperties.class) public class CouchbaseAutoConfiguration extends Object; // Auto-configuration for Couchbase.\npublic interface CouchbaseConnectionDetails extends ConnectionDetails; // Details required to establish a connection to a Couchbase service.\n@ConfigurationProperties(prefix=\"spring.couchbase\") public class CouchbaseProperties extends Object; // Configuration properties for Couchbase.\npublic static class CouchbaseProperties.Env extends Object;\npublic static class CouchbaseProperties.Io extends Object;\npublic static class CouchbaseProperties.Ssl extends Object;\npublic static class CouchbaseProperties.Timeouts extends Object;\n", "des": "Auto-configuration for Couchbase."}
{"index": 1908, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package dao;\n\n@AutoConfiguration @ConditionalOnClass(org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor.class) public class PersistenceExceptionTranslationAutoConfiguration extends Object; // Auto-configuration for Spring's persistence exception translation.\n", "des": "Auto-configuration for Spring DAO."}
{"index": 1909, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package data;\n\npackage data.cassandra; // Auto-configuration for Spring Data Cassandra.\npackage data.couchbase; // Auto-configuration for Spring Data Couchbase.\npackage data.elasticsearch; // Auto-configuration for Spring Data Elasticsearch.\npackage data.jdbc; // Auto-configuration for Spring Data JDBC.\npackage data.jpa; // Auto-configuration for Spring Data JPA.\npackage data.ldap; // Auto-configuration for Spring Data LDAP.\npackage data.mongo; // Auto-configuration for Spring Data Mongo.\npackage data.neo4j; // Auto-configuration for Spring Data Neo4j.\npackage data.r2dbc; // Auto-Configuration for Spring Data R2DBC.\npackage data.redis; // Auto-configuration for Spring Data Redis.\npackage data.rest; // Auto-configuration for Spring Data REST.\npackage data.web; // Auto-configuration for Spring Data's Web Support.\npublic abstract class AbstractRepositoryConfigurationSourceSupport extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar, org.springframework.beans.factory.BeanFactoryAware, org.springframework.context.ResourceLoaderAware, org.springframework.context.EnvironmentAware; // Base ImportBeanDefinitionRegistrar used to auto-configure Spring Data Repositories.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.autoconfigure.data.OnRepositoryTypeCondition.class) public @interface ConditionalOnRepositoryType; // @Conditional that only matches when a particular type of Spring Data repository has been enabled.\npublic enum RepositoryType extends Enum<RepositoryType>; // Type of Spring Data repositories to enable.\n", "des": "Auto-configuration base classes for Spring Data."}
{"index": 1910, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package cassandra;\n\n@AutoConfiguration(after=CassandraAutoConfiguration.class) @ConditionalOnClass({com.datastax.oss.driver.api.core.CqlSession.class,org.springframework.data.cassandra.core.CassandraAdminOperations.class}) @ConditionalOnBean(com.datastax.oss.driver.api.core.CqlSession.class) public class CassandraDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's Cassandra support.\n@AutoConfiguration(after=CassandraDataAutoConfiguration.class) @ConditionalOnClass({com.datastax.oss.driver.api.core.CqlSession.class,org.springframework.data.cassandra.core.ReactiveCassandraTemplate.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(com.datastax.oss.driver.api.core.CqlSession.class) public class CassandraReactiveDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's reactive Cassandra support.\n@AutoConfiguration(after=CassandraReactiveDataAutoConfiguration.class) @ConditionalOnClass({org.springframework.data.cassandra.ReactiveSession.class,org.springframework.data.cassandra.repository.ReactiveCassandraRepository.class}) @ConditionalOnRepositoryType(store=\"cassandra\", type=REACTIVE) @ConditionalOnMissingBean(org.springframework.data.cassandra.repository.support.ReactiveCassandraRepositoryFactoryBean.class) @Import(org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesRegistrar.class) public class CassandraReactiveRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's Cassandra Reactive Repositories.\n", "des": "Auto-configuration for Spring Data Cassandra."}
{"index": 1911, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package couchbase;\n\n@AutoConfiguration(after={CouchbaseAutoConfiguration.class,ValidationAutoConfiguration.class}) @ConditionalOnClass({com.couchbase.client.java.Bucket.class,org.springframework.data.couchbase.repository.CouchbaseRepository.class}) @EnableConfigurationProperties(CouchbaseDataProperties.class) @Import({org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataConfiguration.class,org.springframework.boot.autoconfigure.data.couchbase.CouchbaseClientFactoryConfiguration.class,org.springframework.boot.autoconfigure.data.couchbase.CouchbaseClientFactoryDependentConfiguration.class}) public class CouchbaseDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's Couchbase support.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(jakarta.validation.Validator.class) public static class CouchbaseDataAutoConfiguration.ValidationConfiguration extends Object;\n@ConfigurationProperties(prefix=\"spring.data.couchbase\") public class CouchbaseDataProperties extends Object; // Configuration properties for Spring Data Couchbase.\n@AutoConfiguration(after=CouchbaseDataAutoConfiguration.class) @ConditionalOnClass({com.couchbase.client.java.Cluster.class,org.springframework.data.couchbase.repository.ReactiveCouchbaseRepository.class,reactor.core.publisher.Flux.class}) @Import(org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataConfiguration.class) public class CouchbaseReactiveDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's Reactive Couchbase support.\n", "des": "Auto-configuration for Spring Data Couchbase."}
{"index": 1912, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package elasticsearch;\n\n@AutoConfiguration(after={ElasticsearchClientAutoConfiguration.class,ReactiveElasticsearchClientAutoConfiguration.class}) @ConditionalOnClass(org.springframework.data.elasticsearch.client.elc.ElasticsearchTemplate.class) @Import({org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataConfiguration.BaseConfiguration.class,org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataConfiguration.JavaClientConfiguration.class,org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataConfiguration.ReactiveRestClientConfiguration.class}) public class ElasticsearchDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's Elasticsearch support.\n@AutoConfiguration @ConditionalOnClass(org.springframework.data.elasticsearch.repository.ElasticsearchRepository.class) @ConditionalOnProperty(prefix=\"spring.data.elasticsearch.repositories\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) @ConditionalOnMissingBean(org.springframework.data.elasticsearch.repository.support.ElasticsearchRepositoryFactoryBean.class) @Import(org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesRegistrar.class) public class ElasticsearchRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's Elasticsearch Repositories.\n@AutoConfiguration @ConditionalOnClass({org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient.class,org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository.class}) @ConditionalOnProperty(prefix=\"spring.data.elasticsearch.repositories\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) @ConditionalOnMissingBean(org.springframework.data.elasticsearch.repository.support.ReactiveElasticsearchRepositoryFactoryBean.class) @Import(org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesRegistrar.class) public class ReactiveElasticsearchRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's Elasticsearch Reactive Repositories.\n", "des": "Auto-configuration for Spring Data Elasticsearch."}
{"index": 1913, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jdbc;\n\n@AutoConfiguration(after={JdbcTemplateAutoConfiguration.class,DataSourceTransactionManagerAutoConfiguration.class}) @ConditionalOnBean({org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations.class,org.springframework.transaction.PlatformTransactionManager.class}) @ConditionalOnClass({org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations.class,org.springframework.data.jdbc.repository.config.AbstractJdbcConfiguration.class}) @ConditionalOnProperty(prefix=\"spring.data.jdbc.repositories\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) public class JdbcRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's JDBC Repositories.\n", "des": "Auto-configuration for Spring Data JDBC."}
{"index": 1914, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jpa;\n\n@AutoConfiguration(after={HibernateJpaAutoConfiguration.class,TaskExecutionAutoConfiguration.class}) @ConditionalOnBean(javax.sql.DataSource.class) @ConditionalOnClass(org.springframework.data.jpa.repository.JpaRepository.class) @ConditionalOnMissingBean({org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.class,org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension.class}) @ConditionalOnProperty(prefix=\"spring.data.jpa.repositories\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) @Import(org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration.JpaRepositoriesImportSelector.class) public class JpaRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's JPA Repositories.\n", "des": "Auto-configuration for Spring Data JPA."}
{"index": 1915, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package ldap;\n\n@AutoConfiguration @ConditionalOnClass({javax.naming.ldap.LdapContext.class,org.springframework.data.ldap.repository.LdapRepository.class}) @ConditionalOnProperty(prefix=\"spring.data.ldap.repositories\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) @ConditionalOnMissingBean(org.springframework.data.ldap.repository.support.LdapRepositoryFactoryBean.class) @Import(org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesRegistrar.class) public class LdapRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's LDAP Repositories.\n", "des": "Auto-configuration for Spring Data LDAP."}
{"index": 1916, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package mongo;\n\n@AutoConfiguration(after=MongoAutoConfiguration.class) @ConditionalOnClass({com.mongodb.client.MongoClient.class,org.springframework.data.mongodb.core.MongoTemplate.class}) @EnableConfigurationProperties(MongoProperties.class) @Import({org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration.class,org.springframework.boot.autoconfigure.data.mongo.MongoDatabaseFactoryConfiguration.class,org.springframework.boot.autoconfigure.data.mongo.MongoDatabaseFactoryDependentConfiguration.class}) public class MongoDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's mongo support.\n@AutoConfiguration(after=MongoReactiveAutoConfiguration.class) @ConditionalOnClass({com.mongodb.reactivestreams.client.MongoClient.class,org.springframework.data.mongodb.core.ReactiveMongoTemplate.class}) @ConditionalOnBean(com.mongodb.reactivestreams.client.MongoClient.class) @EnableConfigurationProperties(MongoProperties.class) @Import(org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration.class) public class MongoReactiveDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's reactive mongo support.\n@AutoConfiguration(after=MongoReactiveDataAutoConfiguration.class) @ConditionalOnClass({com.mongodb.reactivestreams.client.MongoClient.class,org.springframework.data.mongodb.repository.ReactiveMongoRepository.class}) @ConditionalOnMissingBean({org.springframework.data.mongodb.repository.support.ReactiveMongoRepositoryFactoryBean.class,org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoryConfigurationExtension.class}) @ConditionalOnRepositoryType(store=\"mongodb\", type=REACTIVE) @Import(org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesRegistrar.class) public class MongoReactiveRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's Mongo Reactive Repositories.\n", "des": "Auto-configuration for Spring Data Mongo."}
{"index": 1917, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package neo4j;\n\n@AutoConfiguration(before=TransactionAutoConfiguration.class, after=Neo4jAutoConfiguration.class) @ConditionalOnClass({org.neo4j.driver.Driver.class,org.springframework.data.neo4j.core.transaction.Neo4jTransactionManager.class,org.springframework.transaction.PlatformTransactionManager.class}) @EnableConfigurationProperties(Neo4jDataProperties.class) @ConditionalOnBean(org.neo4j.driver.Driver.class) public class Neo4jDataAutoConfiguration extends Object; // Auto-configuration for Spring Data Neo4j.\n@ConfigurationProperties(prefix=\"spring.data.neo4j\") public class Neo4jDataProperties extends Object; // Configuration properties for Spring Data Neo4j.\n@AutoConfiguration(after=Neo4jDataAutoConfiguration.class) @ConditionalOnClass({org.neo4j.driver.Driver.class,org.springframework.data.neo4j.core.ReactiveNeo4jTemplate.class,org.springframework.transaction.ReactiveTransactionManager.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(org.neo4j.driver.Driver.class) public class Neo4jReactiveDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's reactive Neo4j support.\n", "des": "Auto-configuration for Spring Data Neo4j."}
{"index": 1918, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package r2dbc;\n\n@AutoConfiguration(after=R2dbcAutoConfiguration.class) @ConditionalOnClass({org.springframework.r2dbc.core.DatabaseClient.class,org.springframework.data.r2dbc.core.R2dbcEntityTemplate.class}) @ConditionalOnSingleCandidate(org.springframework.r2dbc.core.DatabaseClient.class) public class R2dbcDataAutoConfiguration extends Object; // Auto-configuration for DatabaseClient.\n@AutoConfiguration(after=R2dbcDataAutoConfiguration.class) @ConditionalOnClass({io.r2dbc.spi.ConnectionFactory.class,org.springframework.data.r2dbc.repository.R2dbcRepository.class}) @ConditionalOnBean(org.springframework.r2dbc.core.DatabaseClient.class) @ConditionalOnProperty(prefix=\"spring.data.r2dbc.repositories\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) @ConditionalOnMissingBean(org.springframework.data.r2dbc.repository.support.R2dbcRepositoryFactoryBean.class) @Import(org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfigureRegistrar.class) public class R2dbcRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data R2DBC Repositories.\n", "des": "Auto-Configuration for Spring Data R2DBC."}
{"index": 1919, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package redis;\n\npublic interface ClientResourcesBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the ClientResources through a ClientResources.Builder whilst retaining default auto-configuration.\n@FunctionalInterface public interface JedisClientConfigurationBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the JedisClientConfiguration through a JedisClientConfiguration.JedisClientConfigurationBuilder whilst retaining default auto-configuration.\n@FunctionalInterface public interface LettuceClientConfigurationBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the LettuceClientConfiguration through a LettuceClientConfiguration.LettuceClientConfigurationBuilder whilst retaining default auto-configuration.\n@AutoConfiguration @ConditionalOnClass(org.springframework.data.redis.core.RedisOperations.class) @EnableConfigurationProperties(RedisProperties.class) @Import({org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration.class,org.springframework.boot.autoconfigure.data.redis.JedisConnectionConfiguration.class}) public class RedisAutoConfiguration extends Object; // Auto-configuration for Spring Data's Redis support.\npublic interface RedisConnectionDetails extends ConnectionDetails; // Details required to establish a connection to a Redis service.\npublic static interface RedisConnectionDetails.Cluster; // Redis cluster configuration.\npublic static record RedisConnectionDetails.Node(String host, int port) extends Record; // A node in a sentinel or cluster configuration.\npublic static interface RedisConnectionDetails.Sentinel; // Redis sentinel configuration.\npublic static interface RedisConnectionDetails.Standalone; // Redis standalone configuration.\n@ConfigurationProperties(prefix=\"spring.data.redis\") public class RedisProperties extends Object; // Configuration properties for Redis.\npublic static enum RedisProperties.ClientType extends Enum<RedisProperties.ClientType>; // Type of Redis client to use.\npublic static class RedisProperties.Cluster extends Object; // Cluster properties.\npublic static class RedisProperties.Jedis extends Object; // Jedis client properties.\npublic static class RedisProperties.Lettuce extends Object; // Lettuce client properties.\npublic static class RedisProperties.Lettuce.Cluster extends Object;\npublic static class RedisProperties.Lettuce.Cluster.Refresh extends Object;\n", "des": "Auto-configuration for Spring Data Redis."}
{"index": 1920, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package rest;\n\n@AutoConfiguration(after={HttpMessageConvertersAutoConfiguration.class,JacksonAutoConfiguration.class}) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnMissingBean(org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.class) @ConditionalOnClass(org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.class) @EnableConfigurationProperties(RepositoryRestProperties.class) @Import(org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.class) public class RepositoryRestMvcAutoConfiguration extends Object; // Auto-configuration for Spring Data Rest's MVC integration.\n@ConfigurationProperties(prefix=\"spring.data.rest\") public class RepositoryRestProperties extends Object; // Configuration properties for Spring Data REST.\n", "des": "Auto-configuration for Spring Data REST."}
{"index": 1921, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package web;\n\n@AutoConfiguration(after=RepositoryRestMvcAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({org.springframework.data.web.PageableHandlerMethodArgumentResolver.class,org.springframework.web.servlet.config.annotation.WebMvcConfigurer.class}) @ConditionalOnMissingBean(org.springframework.data.web.PageableHandlerMethodArgumentResolver.class) @EnableConfigurationProperties(SpringDataWebProperties.class) public class SpringDataWebAutoConfiguration extends Object; // Auto-configuration for Spring Data's web support.\n@ConfigurationProperties(\"spring.data.web\") public class SpringDataWebProperties extends Object; // Configuration properties for Spring Data Web.\npublic static class SpringDataWebProperties.Pageable extends Object; // Pageable properties.\npublic static class SpringDataWebProperties.Sort extends Object; // Sort properties.\n", "des": "Auto-configuration for Spring Data's Web Support."}
{"index": 1922, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package domain;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(org.springframework.boot.autoconfigure.domain.EntityScanPackages.Registrar.class) public @interface EntityScan; // Configures the base packages used by auto-configuration when scanning for entity classes.\npublic class EntityScanner extends Object; // An entity scanner that searches the classpath from an @EntityScan specified packages.\npublic class EntityScanPackages extends Object; // Class for storing @EntityScan specified packages for reference later (e.g.\n", "des": "General purpose domain annotations and classes."}
{"index": 1923, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package elasticsearch;\n\n@AutoConfiguration(after={JacksonAutoConfiguration.class,JsonbAutoConfiguration.class,ElasticsearchRestClientAutoConfiguration.class}) @ConditionalOnClass(co.elastic.clients.elasticsearch.ElasticsearchClient.class) @Import({org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchClientConfigurations.ElasticsearchTransportConfiguration.class,org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchClientConfigurations.ElasticsearchClientConfiguration.class}) public class ElasticsearchClientAutoConfiguration extends Object; // Auto-configuration for Elasticsearch's Java client.\npublic interface ElasticsearchConnectionDetails extends ConnectionDetails; // Details required to establish a connection to an Elasticsearch service.\npublic static record ElasticsearchConnectionDetails.Node(String hostname, int port, ElasticsearchConnectionDetails.Node.Protocol protocol, String username, String password) extends Record; // An Elasticsearch node.\npublic static enum ElasticsearchConnectionDetails.Node.Protocol extends Enum<ElasticsearchConnectionDetails.Node.Protocol>; // Connection protocol.\n@ConfigurationProperties(\"spring.elasticsearch\") public class ElasticsearchProperties extends Object; // Configuration properties for Elasticsearch.\npublic static class ElasticsearchProperties.Restclient extends Object;\npublic static class ElasticsearchProperties.Restclient.Sniffer extends Object;\npublic static class ElasticsearchProperties.Restclient.Ssl extends Object;\n@AutoConfiguration(after=SslAutoConfiguration.class) @ConditionalOnClass(org.elasticsearch.client.RestClientBuilder.class) @EnableConfigurationProperties(ElasticsearchProperties.class) @Import({org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientConfigurations.RestClientBuilderConfiguration.class,org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientConfigurations.RestClientConfiguration.class,org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientConfigurations.RestClientSnifferConfiguration.class}) public class ElasticsearchRestClientAutoConfiguration extends Object; // Auto-configuration for Elasticsearch REST clients.\n", "des": "Auto-configuration for Elasticsearch client."}
{"index": 1924, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package flyway;\n\n@AutoConfiguration(after={DataSourceAutoConfiguration.class,JdbcTemplateAutoConfiguration.class,HibernateJpaAutoConfiguration.class}) @ConditionalOnClass(org.flywaydb.core.Flyway.class) @Conditional(org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.FlywayDataSourceCondition.class) @ConditionalOnProperty(prefix=\"spring.flyway\", name=\"enabled\", matchIfMissing=true) @Import(org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.FlywayAutoConfigurationRuntimeHints.class) public class FlywayAutoConfiguration extends Object; // Auto-configuration for Flyway database migrations.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.jdbc.support.JdbcUtils.class) @ConditionalOnMissingBean(org.flywaydb.core.Flyway.class) @EnableConfigurationProperties(FlywayProperties.class) public static class FlywayAutoConfiguration.FlywayConfiguration extends Object;\n@FunctionalInterface public interface FlywayConfigurationCustomizer; // Callback interface that can be implemented by beans wishing to customize the flyway configuration.\npublic interface FlywayConnectionDetails extends ConnectionDetails; // Details required for Flyway to establish a connection to an SQL service using JDBC.\n@Target({FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Qualifier public @interface FlywayDataSource; // Qualifier annotation for a DataSource to be injected in to Flyway.\npublic class FlywayMigrationInitializer extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.core.Ordered; // InitializingBean used to trigger Flyway migration through the FlywayMigrationStrategy.\n@FunctionalInterface public interface FlywayMigrationStrategy; // Strategy used to initialize Flyway migration.\n@ConfigurationProperties(prefix=\"spring.flyway\") public class FlywayProperties extends Object; // Configuration properties for Flyway database migrations.\n", "des": "Auto-configuration for Flyway."}
{"index": 1925, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package freemarker;\n\n@AutoConfiguration @ConditionalOnClass({freemarker.template.Configuration.class,org.springframework.ui.freemarker.FreeMarkerConfigurationFactory.class}) @EnableConfigurationProperties(FreeMarkerProperties.class) @Import({org.springframework.boot.autoconfigure.freemarker.FreeMarkerServletWebConfiguration.class,org.springframework.boot.autoconfigure.freemarker.FreeMarkerReactiveWebConfiguration.class,org.springframework.boot.autoconfigure.freemarker.FreeMarkerNonWebConfiguration.class}) @ImportRuntimeHints(org.springframework.boot.autoconfigure.freemarker.FreeMarkerRuntimeHints.class) public class FreeMarkerAutoConfiguration extends Object; // Auto-configuration for FreeMarker.\n@ConfigurationProperties(prefix=\"spring.freemarker\") public class FreeMarkerProperties extends AbstractTemplateViewResolverProperties; // @ConfigurationProperties for configuring FreeMarker.\npublic class FreeMarkerTemplateAvailabilityProvider extends PathBasedTemplateAvailabilityProvider; // TemplateAvailabilityProvider that provides availability information for FreeMarker view templates.\nprotected static final class FreeMarkerTemplateAvailabilityProvider.FreeMarkerTemplateAvailabilityProperties extends PathBasedTemplateAvailabilityProvider.TemplateAvailabilityProperties;\n", "des": "Auto-configuration for FreeMarker."}
{"index": 1926, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package graphql;\n\npackage graphql.data; // Auto-configuration classes for data integrations with GraphQL.\npackage graphql.reactive; // Auto-configuration classes for WebFlux support in Spring GraphQL.\npackage graphql.rsocket; // Auto-configuration classes for RSocket integration with GraphQL.\npackage graphql.security; // Auto-configuration classes for Security support in Spring GraphQL.\npackage graphql.servlet; // Auto-configuration classes for MVC support in Spring GraphQL.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.graphql.DefaultGraphQlSchemaCondition.class) public @interface ConditionalOnGraphQlSchema; // @Conditional that only matches when a GraphQL schema is defined for the application, through schema files or infrastructure beans.\n@AutoConfiguration @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.execution.GraphQlSource.class}) @ConditionalOnGraphQlSchema @EnableConfigurationProperties(GraphQlProperties.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.graphql.GraphQlAutoConfiguration.GraphQlResourcesRuntimeHints.class) public class GraphQlAutoConfiguration extends Object; // Auto-configuration for creating a Spring GraphQL base infrastructure.\n@ConfigurationProperties(prefix=\"spring.graphql.cors\") public class GraphQlCorsProperties extends Object; // Configuration properties for GraphQL endpoint's CORS support.\n@ConfigurationProperties(prefix=\"spring.graphql\") public class GraphQlProperties extends Object; // properties for Spring GraphQL.\npublic static class GraphQlProperties.Graphiql extends Object;\npublic static class GraphQlProperties.Rsocket extends Object;\npublic static class GraphQlProperties.Schema extends Object;\npublic static class GraphQlProperties.Schema.Introspection extends Object;\npublic static class GraphQlProperties.Schema.Printer extends Object;\npublic static class GraphQlProperties.Websocket extends Object;\n@FunctionalInterface public interface GraphQlSourceBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize properties of Builder whilst retaining default auto-configuration.\n", "des": "Auto-configuration for Spring GraphQL."}
{"index": 1927, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package data;\n\n@AutoConfiguration(after=GraphQlAutoConfiguration.class) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.data.query.QueryByExampleDataFetcher.class,org.springframework.data.repository.query.QueryByExampleExecutor.class}) @ConditionalOnBean(org.springframework.graphql.execution.GraphQlSource.class) public class GraphQlQueryByExampleAutoConfiguration extends Object; // Auto-configuration that creates a GraphQlSourceBuilderCustomizers to detect Spring Data repositories with Query By Example support and register them as DataFetchers for any queries with a matching return type.\n@AutoConfiguration(after=GraphQlAutoConfiguration.class) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.data.query.QuerydslDataFetcher.class,org.springframework.data.querydsl.QuerydslPredicateExecutor.class}) @ConditionalOnBean(org.springframework.graphql.execution.GraphQlSource.class) public class GraphQlQuerydslAutoConfiguration extends Object; // Auto-configuration that creates a GraphQlSourceBuilderCustomizers to detect Spring Data repositories with Querydsl support and register them as DataFetchers for any queries with a matching return type.\n@AutoConfiguration(after=GraphQlAutoConfiguration.class) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.data.query.QueryByExampleDataFetcher.class,org.springframework.data.repository.query.ReactiveQueryByExampleExecutor.class}) @ConditionalOnBean(org.springframework.graphql.execution.GraphQlSource.class) public class GraphQlReactiveQueryByExampleAutoConfiguration extends Object; // Auto-configuration that creates a GraphQlSourceBuilderCustomizers to detect Spring Data repositories with Query By Example support and register them as DataFetchers for any queries with a matching return type.\n", "des": "Auto-configuration classes for data integrations with GraphQL."}
{"index": 1928, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package reactive;\n\n@AutoConfiguration(after=GraphQlAutoConfiguration.class) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.server.webflux.GraphQlHttpHandler.class}) @ConditionalOnBean(org.springframework.graphql.ExecutionGraphQlService.class) @EnableConfigurationProperties(GraphQlCorsProperties.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.graphql.reactive.GraphQlWebFluxAutoConfiguration.GraphiQlResourceHints.class) public class GraphQlWebFluxAutoConfiguration extends Object; // Auto-configuration for enabling Spring GraphQL over WebFlux.\n@Configuration(proxyBeanMethods=false) public static class GraphQlWebFluxAutoConfiguration.GraphQlEndpointCorsConfiguration extends Object implements org.springframework.web.reactive.config.WebFluxConfigurer;\n@Configuration(proxyBeanMethods=false) @ConditionalOnProperty(prefix=\"spring.graphql.websocket\", name=\"path\") public static class GraphQlWebFluxAutoConfiguration.WebSocketConfiguration extends Object;\n", "des": "Auto-configuration classes for WebFlux support in Spring GraphQL."}
{"index": 1929, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package rsocket;\n\n@AutoConfiguration(after={GraphQlAutoConfiguration.class,RSocketMessagingAutoConfiguration.class}) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.execution.GraphQlSource.class,io.rsocket.core.RSocketServer.class,reactor.netty.http.server.HttpServer.class}) @ConditionalOnBean({org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.class,org.springframework.graphql.data.method.annotation.support.AnnotatedControllerConfigurer.class}) @ConditionalOnProperty(prefix=\"spring.graphql.rsocket\", name=\"mapping\") public class GraphQlRSocketAutoConfiguration extends Object; // Auto-configuration for enabling Spring GraphQL over RSocket.\n@AutoConfiguration(after=RSocketRequesterAutoConfiguration.class) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.client.RSocketGraphQlClient.class,org.springframework.messaging.rsocket.RSocketRequester.class,io.rsocket.RSocket.class,io.rsocket.transport.netty.client.TcpClientTransport.class}) public class RSocketGraphQlClientAutoConfiguration extends Object; // Auto-configuration for RSocketGraphQlClient.\n", "des": "Auto-configuration classes for RSocket integration with GraphQL."}
{"index": 1930, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package security;\n\n@AutoConfiguration(after=GraphQlWebFluxAutoConfiguration.class) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.server.webflux.GraphQlHttpHandler.class,org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity.class}) @ConditionalOnBean(org.springframework.graphql.server.webflux.GraphQlHttpHandler.class) public class GraphQlWebFluxSecurityAutoConfiguration extends Object; // Auto-configuration for enabling Security support for Spring GraphQL with WebFlux.\n@AutoConfiguration(after=GraphQlWebMvcAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.server.webmvc.GraphQlHttpHandler.class,org.springframework.security.config.annotation.web.configuration.EnableWebSecurity.class}) @ConditionalOnBean(org.springframework.graphql.server.webmvc.GraphQlHttpHandler.class) public class GraphQlWebMvcSecurityAutoConfiguration extends Object; // Auto-configuration for enabling Security support for Spring GraphQL with MVC.\n", "des": "Auto-configuration classes for Security support in Spring GraphQL."}
{"index": 1931, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package servlet;\n\n@AutoConfiguration(after=GraphQlAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.server.webmvc.GraphQlHttpHandler.class}) @ConditionalOnBean(org.springframework.graphql.ExecutionGraphQlService.class) @EnableConfigurationProperties(GraphQlCorsProperties.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.graphql.servlet.GraphQlWebMvcAutoConfiguration.GraphiQlResourceHints.class) public class GraphQlWebMvcAutoConfiguration extends Object; // Auto-configuration for enabling Spring GraphQL over Spring MVC.\n@Configuration(proxyBeanMethods=false) public static class GraphQlWebMvcAutoConfiguration.GraphQlEndpointCorsConfiguration extends Object implements org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass({jakarta.websocket.server.ServerContainer.class,org.springframework.web.socket.WebSocketHandler.class}) @ConditionalOnProperty(prefix=\"spring.graphql.websocket\", name=\"path\") public static class GraphQlWebMvcAutoConfiguration.WebSocketConfiguration extends Object;\n", "des": "Auto-configuration classes for MVC support in Spring GraphQL."}
{"index": 1932, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package template;\n\n@AutoConfiguration(after=WebMvcAutoConfiguration.class) @ConditionalOnClass(groovy.text.markup.MarkupTemplateEngine.class) @EnableConfigurationProperties(GroovyTemplateProperties.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateRuntimeHints.class) public class GroovyTemplateAutoConfiguration extends Object; // Auto-configuration support for Groovy templates in MVC.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer.class) public static class GroovyTemplateAutoConfiguration.GroovyMarkupConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass({jakarta.servlet.Servlet.class,org.springframework.context.i18n.LocaleContextHolder.class,org.springframework.web.servlet.view.UrlBasedViewResolver.class}) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnProperty(name=\"spring.groovy.template.enabled\", matchIfMissing=true) public static class GroovyTemplateAutoConfiguration.GroovyWebConfiguration extends Object;\npublic class GroovyTemplateAvailabilityProvider extends PathBasedTemplateAvailabilityProvider; // TemplateAvailabilityProvider that provides availability information for Groovy view templates.\nprotected static final class GroovyTemplateAvailabilityProvider.GroovyTemplateAvailabilityProperties extends PathBasedTemplateAvailabilityProvider.TemplateAvailabilityProperties;\n@ConfigurationProperties(prefix=\"spring.groovy.template\", ignoreUnknownFields=true) public class GroovyTemplateProperties extends AbstractTemplateViewResolverProperties; // @ConfigurationProperties for configuring Groovy templates.\n", "des": "Auto-configuration for Groovy templates."}
{"index": 1933, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package gson;\n\n@AutoConfiguration @ConditionalOnClass(com.google.gson.Gson.class) @EnableConfigurationProperties(GsonProperties.class) public class GsonAutoConfiguration extends Object; // Auto-configuration for Gson.\n@FunctionalInterface public interface GsonBuilderCustomizer; // Callback interface that can be implemented by beans wishing to further customize the Gson through GsonBuilder retaining its default auto-configuration.\n@ConfigurationProperties(prefix=\"spring.gson\") public class GsonProperties extends Object; // Configuration properties to configure Gson.\n", "des": "Auto-configuration for GSON."}
{"index": 1934, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package h2;\n\n@AutoConfiguration(after=DataSourceAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.h2.server.web.JakartaWebServlet.class) @ConditionalOnProperty(prefix=\"spring.h2.console\", name=\"enabled\", havingValue=\"true\") @EnableConfigurationProperties(H2ConsoleProperties.class) public class H2ConsoleAutoConfiguration extends Object; // Auto-configuration for H2's web console.\n@ConfigurationProperties(prefix=\"spring.h2.console\") public class H2ConsoleProperties extends Object; // Configuration properties for H2's console.\npublic static class H2ConsoleProperties.Settings extends Object;\n", "des": "Auto-configuration for H2's Console."}
{"index": 1935, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package hateoas;\n\n@ConfigurationProperties(prefix=\"spring.hateoas\") public class HateoasProperties extends Object; // properties for Spring HATEOAS.\n@AutoConfiguration(after={WebMvcAutoConfiguration.class,JacksonAutoConfiguration.class,HttpMessageConvertersAutoConfiguration.class,RepositoryRestMvcAutoConfiguration.class}) @ConditionalOnClass({org.springframework.hateoas.EntityModel.class,org.springframework.web.bind.annotation.RequestMapping.class,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.class,org.springframework.plugin.core.Plugin.class}) @ConditionalOnWebApplication @EnableConfigurationProperties(HateoasProperties.class) public class HypermediaAutoConfiguration extends Object; // Auto-configuration for Spring HATEOAS's @EnableHypermediaSupport.\n@Configuration(proxyBeanMethods=false) @ConditionalOnMissingBean(org.springframework.hateoas.client.LinkDiscoverers.class) @ConditionalOnClass(com.fasterxml.jackson.databind.ObjectMapper.class) @EnableHypermediaSupport(type=HAL) protected static class HypermediaAutoConfiguration.HypermediaConfiguration extends Object;\n", "des": "Auto-configuration for Spring HATEOAS."}
{"index": 1936, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package hazelcast;\n\n@AutoConfiguration @ConditionalOnClass(com.hazelcast.core.HazelcastInstance.class) @EnableConfigurationProperties(HazelcastProperties.class) @Import({org.springframework.boot.autoconfigure.hazelcast.HazelcastClientConfiguration.class,org.springframework.boot.autoconfigure.hazelcast.HazelcastServerConfiguration.class}) public class HazelcastAutoConfiguration extends Object; // Auto-configuration for Hazelcast IMDG.\n@FunctionalInterface public interface HazelcastConfigCustomizer; // Callback interface that can be implemented by beans wishing to customize the Hazelcast server configuration.\npublic abstract class HazelcastConfigResourceCondition extends ResourceCondition; // SpringBootCondition used to check if the Hazelcast configuration is available.\n@AutoConfiguration(after={HazelcastAutoConfiguration.class,HibernateJpaAutoConfiguration.class}) @ConditionalOnClass({com.hazelcast.core.HazelcastInstance.class,org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.class}) @Import(org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration.HazelcastInstanceEntityManagerFactoryDependsOnPostProcessor.class) public class HazelcastJpaDependencyAutoConfiguration extends Object; // Additional configuration to ensure that EntityManagerFactory beans depend on the hazelcastInstance bean.\n@ConfigurationProperties(prefix=\"spring.hazelcast\") public class HazelcastProperties extends Object; // Configuration properties for the hazelcast integration.\n", "des": "Auto-configuration for Hazelcast."}
{"index": 1937, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package http;\n\npackage http.codec; // Auto-configuration for HTTP codecs.\npublic class HttpMessageConverters extends Object implements Iterable<org.springframework.http.converter.HttpMessageConverter<?>>; // Bean used to manage the HttpMessageConverters used in a Spring Boot application.\n@AutoConfiguration(after={GsonAutoConfiguration.class,JacksonAutoConfiguration.class,JsonbAutoConfiguration.class}) @ConditionalOnClass(org.springframework.http.converter.HttpMessageConverter.class) @Conditional(org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition.class) @Import({org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration.class,org.springframework.boot.autoconfigure.http.GsonHttpMessageConvertersConfiguration.class,org.springframework.boot.autoconfigure.http.JsonbHttpMessageConvertersConfiguration.class}) @ImportRuntimeHints(org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration.HttpMessageConvertersAutoConfigurationRuntimeHints.class) public class HttpMessageConvertersAutoConfiguration extends Object; // Auto-configuration for HttpMessageConverters.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.http.converter.StringHttpMessageConverter.class) protected static class HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration extends Object;\n", "des": "Auto-configuration for HTTP concerns."}
{"index": 1938, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package codec;\n\n@AutoConfiguration(after=JacksonAutoConfiguration.class) @ConditionalOnClass({org.springframework.http.codec.CodecConfigurer.class,org.springframework.web.reactive.function.client.WebClient.class}) @EnableConfigurationProperties(CodecProperties.class) public class CodecsAutoConfiguration extends Object; // Auto-configuration for Encoders and Decoders.\n", "des": "Auto-configuration for HTTP codecs."}
{"index": 1939, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package influx;\n\n@AutoConfiguration @ConditionalOnClass(org.influxdb.InfluxDB.class) @EnableConfigurationProperties(InfluxDbProperties.class) @ConditionalOnProperty(\"spring.influx.url\") public class InfluxDbAutoConfiguration extends Object; // Auto-configuration for InfluxDB.\n@FunctionalInterface public interface InfluxDbCustomizer; // Callback interface that can be implemented by beans wishing to further customize InfluxDB whilst retaining default auto-configuration.\n@FunctionalInterface public interface InfluxDbOkHttpClientBuilderProvider extends Supplier<okhttp3.OkHttpClient.Builder>; // Provide the OkHttpClient.Builder to use to customize the auto-configured InfluxDB instance.\n@ConfigurationProperties(prefix=\"spring.influx\") public class InfluxDbProperties extends Object; // Configuration properties for InfluxDB.\n", "des": "Auto-configuration for InfluxDB."}
{"index": 1940, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package info;\n\n@AutoConfiguration @EnableConfigurationProperties(ProjectInfoProperties.class) public class ProjectInfoAutoConfiguration extends Object; // Auto-configuration for various project information.\n@ConfigurationProperties(prefix=\"spring.info\") public class ProjectInfoProperties extends Object; // Configuration properties for project information.\npublic static class ProjectInfoProperties.Build extends Object; // Build specific info properties.\npublic static class ProjectInfoProperties.Git extends Object; // Git specific info properties.\n", "des": "Auto-configuration for project information."}
{"index": 1941, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package integration;\n\n@AutoConfiguration(after={DataSourceAutoConfiguration.class,JmxAutoConfiguration.class,TaskSchedulingAutoConfiguration.class}) @ConditionalOnClass(org.springframework.integration.config.EnableIntegration.class) @EnableConfigurationProperties({IntegrationProperties.class,JmxProperties.class}) public class IntegrationAutoConfiguration extends Object; // Auto-configuration for Spring Integration.\n@Configuration(proxyBeanMethods=false) @ConditionalOnMissingBean(org.springframework.integration.config.IntegrationComponentScanRegistrar.class) @Import(org.springframework.boot.autoconfigure.integration.IntegrationAutoConfigurationScanRegistrar.class) protected static class IntegrationAutoConfiguration.IntegrationComponentScanConfiguration extends Object; // Integration component scan configuration.\n@Configuration(proxyBeanMethods=false) @EnableIntegration protected static class IntegrationAutoConfiguration.IntegrationConfiguration extends Object; // Basic Spring Integration configuration.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.integration.jdbc.store.JdbcMessageStore.class) @ConditionalOnSingleCandidate(javax.sql.DataSource.class) @Conditional(org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration.OnIntegrationDatasourceInitializationCondition.class) protected static class IntegrationAutoConfiguration.IntegrationJdbcConfiguration extends Object; // Integration JDBC configuration.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.integration.jmx.config.EnableIntegrationMBeanExport.class) @ConditionalOnMissingBean(value=org.springframework.integration.monitor.IntegrationMBeanExporter.class, search=CURRENT) @ConditionalOnBean(javax.management.MBeanServer.class) @ConditionalOnProperty(prefix=\"spring.jmx\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) protected static class IntegrationAutoConfiguration.IntegrationJmxConfiguration extends Object; // Spring Integration JMX configuration.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.integration.config.EnableIntegrationManagement.class) @ConditionalOnMissingBean(value=org.springframework.integration.config.IntegrationManagementConfigurer.class, name=\"integrationManagementConfigurer\", search=CURRENT) protected static class IntegrationAutoConfiguration.IntegrationManagementConfiguration extends Object; // Integration management configuration.\n", "des": "Auto-configuration for Spring Integration."}
{"index": 1942, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jackson;\n\n@FunctionalInterface public interface Jackson2ObjectMapperBuilderCustomizer; // Callback interface that can be implemented by beans wishing to further customize the ObjectMapper through Jackson2ObjectMapperBuilder retaining its default auto-configuration.\n@AutoConfiguration @ConditionalOnClass(com.fasterxml.jackson.databind.ObjectMapper.class) public class JacksonAutoConfiguration extends Object; // Auto configuration for Jackson.\n@ConfigurationProperties(prefix=\"spring.jackson\") public class JacksonProperties extends Object; // Configuration properties to configure Jackson.\npublic static enum JacksonProperties.ConstructorDetectorStrategy extends Enum<JacksonProperties.ConstructorDetectorStrategy>;\n", "des": "Auto-configuration for Jackson."}
{"index": 1943, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jdbc;\n\npackage jdbc.metadata; // Auto-configuration for JDBC Metadata.\n@AutoConfiguration(before=SqlInitializationAutoConfiguration.class) @ConditionalOnClass({javax.sql.DataSource.class,org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType.class}) @ConditionalOnMissingBean(type=\"io.r2dbc.spi.ConnectionFactory\") @EnableConfigurationProperties(DataSourceProperties.class) @Import(DataSourcePoolMetadataProvidersConfiguration.class) public class DataSourceAutoConfiguration extends Object; // Auto-configuration for DataSource.\n@Configuration(proxyBeanMethods=false) @Conditional(org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.EmbeddedDatabaseCondition.class) @ConditionalOnMissingBean({javax.sql.DataSource.class,javax.sql.XADataSource.class}) @Import(EmbeddedDataSourceConfiguration.class) protected static class DataSourceAutoConfiguration.EmbeddedDatabaseConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @Conditional(org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.PooledDataSourceCondition.class) @ConditionalOnMissingBean({javax.sql.DataSource.class,javax.sql.XADataSource.class}) @Import({org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration.Hikari.class,org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration.Tomcat.class,org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration.Dbcp2.class,org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration.OracleUcp.class,org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration.Generic.class,org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration.class}) protected static class DataSourceAutoConfiguration.PooledDataSourceConfiguration extends Object;\n@ConfigurationProperties(prefix=\"spring.datasource\") public class DataSourceProperties extends Object implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Base class for configuration of a data source.\npublic static class DataSourceProperties.Xa extends Object; // XA Specific datasource settings.\n", "des": "Auto-configuration for JDBC."}
{"index": 1944, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package metadata;\n\n@Configuration(proxyBeanMethods=false) public class DataSourcePoolMetadataProvidersConfiguration extends Object; // Register the DataSourcePoolMetadataProvider instances for the supported data sources.\n", "des": "Auto-configuration for JDBC Metadata."}
{"index": 1945, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jersey;\n\n@AutoConfiguration(before=DispatcherServletAutoConfiguration.class, after=JacksonAutoConfiguration.class) @ConditionalOnClass({org.glassfish.jersey.server.spring.SpringComponentProvider.class,jakarta.servlet.ServletRegistration.class}) @ConditionalOnBean(type=\"org.glassfish.jersey.server.ResourceConfig\") @ConditionalOnWebApplication(type=SERVLET) @AutoConfigureOrder(-2147483648) @EnableConfigurationProperties(JerseyProperties.class) public class JerseyAutoConfiguration extends Object implements org.springframework.web.context.ServletContextAware; // Auto-configuration for Jersey.\n@Order(-2147483648) public static final class JerseyAutoConfiguration.JerseyWebApplicationInitializer extends Object implements org.springframework.web.WebApplicationInitializer;\n@ConfigurationProperties(prefix=\"spring.jersey\") public class JerseyProperties extends Object; // @ConfigurationProperties for Jersey.\npublic static class JerseyProperties.Filter extends Object;\npublic static class JerseyProperties.Servlet extends Object;\npublic static enum JerseyProperties.Type extends Enum<JerseyProperties.Type>;\n@FunctionalInterface public interface ResourceConfigCustomizer; // Callback interface that can be implemented by beans wishing to customize Jersey's ResourceConfig before it is used.\n", "des": "Auto-configuration for Jersey."}
{"index": 1946, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jms;\n\npackage jms.activemq; // Auto-configuration for ActiveMQ.\npackage jms.artemis; // Auto-configuration for Artemis.\npublic final class DefaultJmsListenerContainerFactoryConfigurer extends Object; // Configure DefaultJmsListenerContainerFactory with sensible defaults.\n@AutoConfiguration @ConditionalOnClass({jakarta.jms.Message.class,org.springframework.jms.core.JmsTemplate.class}) @ConditionalOnBean(jakarta.jms.ConnectionFactory.class) @EnableConfigurationProperties(JmsProperties.class) @Import(org.springframework.boot.autoconfigure.jms.JmsAnnotationDrivenConfiguration.class) public class JmsAutoConfiguration extends Object; // Auto-configuration for Spring JMS.\n@Configuration(proxyBeanMethods=false) protected static class JmsAutoConfiguration.JmsTemplateConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.jms.core.JmsMessagingTemplate.class) @Import(JmsTemplateConfiguration.class) protected static class JmsAutoConfiguration.MessagingTemplateConfiguration extends Object;\npublic class JmsPoolConnectionFactoryFactory extends Object; // Factory to create a JmsPoolConnectionFactory from properties defined in JmsPoolConnectionFactoryProperties.\npublic class JmsPoolConnectionFactoryProperties extends Object; // Configuration properties for connection factory pooling.\n@ConfigurationProperties(prefix=\"spring.jms\") public class JmsProperties extends Object; // Configuration properties for JMS.\npublic static enum JmsProperties.AcknowledgeMode extends Enum<JmsProperties.AcknowledgeMode>; // Translate the acknowledge modes defined on the Session.\npublic static class JmsProperties.Cache extends Object;\npublic static enum JmsProperties.DeliveryMode extends Enum<JmsProperties.DeliveryMode>;\npublic static class JmsProperties.Listener extends Object;\npublic static class JmsProperties.Template extends Object;\n", "des": "Auto-configuration for JMS."}
{"index": 1947, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package activemq;\n\n@AutoConfiguration(before=JmsAutoConfiguration.class, after=JndiConnectionFactoryAutoConfiguration.class) @ConditionalOnClass({jakarta.jms.ConnectionFactory.class,org.apache.activemq.ActiveMQConnectionFactory.class}) @ConditionalOnMissingBean(jakarta.jms.ConnectionFactory.class) @EnableConfigurationProperties({ActiveMQProperties.class,JmsProperties.class}) @Import({org.springframework.boot.autoconfigure.jms.activemq.ActiveMQXAConnectionFactoryConfiguration.class,org.springframework.boot.autoconfigure.jms.activemq.ActiveMQConnectionFactoryConfiguration.class}) public class ActiveMQAutoConfiguration extends Object; // Auto-configuration to integrate with an ActiveMQ broker.\n@FunctionalInterface public interface ActiveMQConnectionFactoryCustomizer; // Callback interface that can be implemented by beans wishing to customize the ActiveMQConnectionFactory whilst retaining default auto-configuration.\n@ConfigurationProperties(prefix=\"spring.activemq\") public class ActiveMQProperties extends Object; // Configuration properties for ActiveMQ.\npublic static class ActiveMQProperties.Packages extends Object;\n", "des": "Auto-configuration for ActiveMQ."}
{"index": 1948, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package artemis;\n\n@AutoConfiguration(before=JmsAutoConfiguration.class, after=JndiConnectionFactoryAutoConfiguration.class) @ConditionalOnClass({jakarta.jms.ConnectionFactory.class,org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory.class}) @ConditionalOnMissingBean(jakarta.jms.ConnectionFactory.class) @EnableConfigurationProperties({ArtemisProperties.class,JmsProperties.class}) @Import({org.springframework.boot.autoconfigure.jms.artemis.ArtemisEmbeddedServerConfiguration.class,org.springframework.boot.autoconfigure.jms.artemis.ArtemisXAConnectionFactoryConfiguration.class,org.springframework.boot.autoconfigure.jms.artemis.ArtemisConnectionFactoryConfiguration.class}) public class ArtemisAutoConfiguration extends Object; // Auto-configuration to integrate with an Artemis broker.\n@FunctionalInterface public interface ArtemisConfigurationCustomizer; // Callback interface that can be implemented by beans wishing to customize the Artemis JMS server Configuration before it is used by an auto-configured EmbeddedActiveMQ instance.\npublic enum ArtemisMode extends Enum<ArtemisMode>; // Define the mode in which Artemis can operate.\npublic class ArtemisNoOpBindingRegistry extends Object implements org.apache.activemq.artemis.spi.core.naming.BindingRegistry; // A no-op implementation of the BindingRegistry.\n@ConfigurationProperties(prefix=\"spring.artemis\") public class ArtemisProperties extends Object; // Configuration properties for Artemis.\npublic static class ArtemisProperties.Embedded extends Object; // Configuration for an embedded Artemis server.\n", "des": "Auto-configuration for Artemis."}
{"index": 1949, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jmx;\n\n@AutoConfiguration @EnableConfigurationProperties(JmxProperties.class) @ConditionalOnClass(org.springframework.jmx.export.MBeanExporter.class) @ConditionalOnProperty(prefix=\"spring.jmx\", name=\"enabled\", havingValue=\"true\") public class JmxAutoConfiguration extends Object; // Auto-configuration to enable/disable Spring's @EnableMBeanExport mechanism based on configuration properties.\n@ConfigurationProperties(prefix=\"spring.jmx\") public class JmxProperties extends Object; // Configuration properties for JMX.\npublic class ParentAwareNamingStrategy extends org.springframework.jmx.export.naming.MetadataNamingStrategy implements org.springframework.context.ApplicationContextAware; // Extension of MetadataNamingStrategy that supports a parent ApplicationContext.\n", "des": "Auto-configuration for JMX."}
{"index": 1950, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jooq;\n\n@FunctionalInterface public interface DefaultConfigurationCustomizer; // Callback interface that can be implemented by beans wishing to customize the DefaultConfiguration whilst retaining default auto-configuration.\n@AutoConfiguration(after={DataSourceAutoConfiguration.class,TransactionAutoConfiguration.class}) @ConditionalOnClass(org.jooq.DSLContext.class) @ConditionalOnBean(javax.sql.DataSource.class) public class JooqAutoConfiguration extends Object; // Auto-configuration for JOOQ.\n@Configuration(proxyBeanMethods=false) @ConditionalOnMissingBean(org.jooq.DSLContext.class) @EnableConfigurationProperties(JooqProperties.class) public static class JooqAutoConfiguration.DslContextConfiguration extends Object;\npublic class JooqExceptionTranslator extends Object implements org.jooq.ExecuteListener; // Transforms SQLException into a Spring-specific DataAccessException.\n@ConfigurationProperties(prefix=\"spring.jooq\") public class JooqProperties extends Object; // Configuration properties for the JOOQ database library.\npublic class SpringTransactionProvider extends Object implements org.jooq.TransactionProvider; // Allows Spring Transaction to be used with JOOQ.\n", "des": "Auto-configuration for JOOQ."}
{"index": 1951, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jsonb;\n\n@AutoConfiguration @ConditionalOnClass(jakarta.json.bind.Jsonb.class) @ConditionalOnResource(resources={\"classpath:META-INF/services/jakarta.json.bind.spi.JsonbProvider\",\"classpath:META-INF/services/jakarta.json.spi.JsonProvider\"}) public class JsonbAutoConfiguration extends Object; // Auto-configuration for JSON-B.\n", "des": "Auto-configuration for JSON-B."}
{"index": 1952, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package kafka;\n\npublic class ConcurrentKafkaListenerContainerFactoryConfigurer extends Object; // Configure ConcurrentKafkaListenerContainerFactory with sensible defaults.\n@FunctionalInterface public interface DefaultKafkaConsumerFactoryCustomizer; // Callback interface for customizing DefaultKafkaConsumerFactory beans.\n@FunctionalInterface public interface DefaultKafkaProducerFactoryCustomizer; // Callback interface for customizing DefaultKafkaProducerFactory beans.\n@AutoConfiguration @ConditionalOnClass(org.springframework.kafka.core.KafkaTemplate.class) @EnableConfigurationProperties(KafkaProperties.class) @Import({org.springframework.boot.autoconfigure.kafka.KafkaAnnotationDrivenConfiguration.class,org.springframework.boot.autoconfigure.kafka.KafkaStreamsAnnotationDrivenConfiguration.class}) public class KafkaAutoConfiguration extends Object; // Auto-configuration for Apache Kafka.\npublic interface KafkaConnectionDetails extends ConnectionDetails; // Details required to establish a connection to a Kafka service.\n@ConfigurationProperties(prefix=\"spring.kafka\") public class KafkaProperties extends Object; // Configuration properties for Spring for Apache Kafka.\npublic static class KafkaProperties.Admin extends Object;\npublic static class KafkaProperties.Cleanup extends Object;\npublic static class KafkaProperties.Consumer extends Object;\npublic static enum KafkaProperties.IsolationLevel extends Enum<KafkaProperties.IsolationLevel>;\npublic static class KafkaProperties.Jaas extends Object;\npublic static class KafkaProperties.Listener extends Object;\npublic static enum KafkaProperties.Listener.Type extends Enum<KafkaProperties.Listener.Type>;\npublic static class KafkaProperties.Producer extends Object;\npublic static class KafkaProperties.Retry extends Object;\npublic static class KafkaProperties.Retry.Topic extends Object; // Properties for non-blocking, topic-based retries.\npublic static class KafkaProperties.Security extends Object;\npublic static class KafkaProperties.Ssl extends Object;\npublic static class KafkaProperties.Streams extends Object; // High (and some medium) priority Streams properties and a general properties bucket.\npublic static class KafkaProperties.Template extends Object;\n@FunctionalInterface public interface StreamsBuilderFactoryBeanCustomizer; // Callback interface for customizing StreamsBuilderFactoryBean beans.\n", "des": "Auto-configuration for Apache Kafka."}
{"index": 1953, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package ldap;\n\npackage ldap.embedded; // Auto-configuration for embedded LDAP.\n@AutoConfiguration @ConditionalOnClass(org.springframework.ldap.core.ContextSource.class) @EnableConfigurationProperties(LdapProperties.class) public class LdapAutoConfiguration extends Object; // Auto-configuration for LDAP.\n@ConfigurationProperties(prefix=\"spring.ldap\") public class LdapProperties extends Object; // Configuration properties for LDAP.\npublic static class LdapProperties.Template extends Object; // settings.\n", "des": "Auto-configuration for LDAP."}
{"index": 1954, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package embedded;\n\n@AutoConfiguration(before=LdapAutoConfiguration.class) @EnableConfigurationProperties({LdapProperties.class,EmbeddedLdapProperties.class}) @ConditionalOnClass(com.unboundid.ldap.listener.InMemoryDirectoryServer.class) @Conditional(org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration.EmbeddedLdapCondition.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration.EmbeddedLdapAutoConfigurationRuntimeHints.class) public class EmbeddedLdapAutoConfiguration extends Object; // Auto-configuration for Embedded LDAP.\n@ConfigurationProperties(prefix=\"spring.ldap.embedded\") public class EmbeddedLdapProperties extends Object; // Configuration properties for Embedded LDAP.\npublic static class EmbeddedLdapProperties.Credential extends Object;\npublic static class EmbeddedLdapProperties.Validation extends Object;\n", "des": "Auto-configuration for embedded LDAP."}
{"index": 1955, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package liquibase;\n\npublic class DataSourceClosingSpringLiquibase extends liquibase.integration.spring.SpringLiquibase implements org.springframework.beans.factory.DisposableBean; // A custom SpringLiquibase extension that closes the underlying DataSource once the database has been migrated.\n@AutoConfiguration(after={DataSourceAutoConfiguration.class,HibernateJpaAutoConfiguration.class}) @ConditionalOnClass({liquibase.integration.spring.SpringLiquibase.class,liquibase.change.DatabaseChange.class}) @ConditionalOnProperty(prefix=\"spring.liquibase\", name=\"enabled\", matchIfMissing=true) @Conditional(org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration.LiquibaseDataSourceCondition.class) @Import(org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration.LiquibaseAutoConfigurationRuntimeHints.class) public class LiquibaseAutoConfiguration extends Object; // Auto-configuration for Liquibase.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.jdbc.core.ConnectionCallback.class) @ConditionalOnMissingBean(liquibase.integration.spring.SpringLiquibase.class) @EnableConfigurationProperties(LiquibaseProperties.class) public static class LiquibaseAutoConfiguration.LiquibaseConfiguration extends Object;\npublic interface LiquibaseConnectionDetails extends ConnectionDetails; // Details required for Liquibase to establish a connection to an SQL service using JDBC.\n@Target({FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Qualifier public @interface LiquibaseDataSource; // Qualifier annotation for a DataSource to be injected in to Liquibase.\n@ConfigurationProperties(prefix=\"spring.liquibase\", ignoreUnknownFields=false) public class LiquibaseProperties extends Object; // Configuration properties to configure SpringLiquibase.\n", "des": "Auto-configuration for Liquibase."}
{"index": 1956, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package logging;\n\npublic class ConditionEvaluationReportLoggingListener extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>; // ApplicationContextInitializer that writes the ConditionEvaluationReport to the log.\npublic class ConditionEvaluationReportMessage extends Object; // A condition evaluation report message that can logged or printed.\n", "des": "Auto-configuration for logging."}
{"index": 1957, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package mail;\n\n@ConfigurationProperties(prefix=\"spring.mail\") public class MailProperties extends Object; // Configuration properties for email support.\n@AutoConfiguration @ConditionalOnClass({jakarta.mail.internet.MimeMessage.class,jakarta.activation.MimeType.class,org.springframework.mail.MailSender.class}) @ConditionalOnMissingBean(org.springframework.mail.MailSender.class) @Conditional(org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration.MailSenderCondition.class) @EnableConfigurationProperties(MailProperties.class) @Import({org.springframework.boot.autoconfigure.mail.MailSenderJndiConfiguration.class,org.springframework.boot.autoconfigure.mail.MailSenderPropertiesConfiguration.class}) public class MailSenderAutoConfiguration extends Object; // Auto configuration for email support.\n@AutoConfiguration(after=MailSenderAutoConfiguration.class) @ConditionalOnProperty(prefix=\"spring.mail\", value=\"test-connection\") @ConditionalOnSingleCandidate(org.springframework.mail.javamail.JavaMailSenderImpl.class) public class MailSenderValidatorAutoConfiguration extends Object; // Auto configuration for testing mail service connectivity on startup.\n", "des": "Auto-configuration for email support."}
{"index": 1958, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package mongo;\n\n@AutoConfiguration @ConditionalOnClass(com.mongodb.client.MongoClient.class) @EnableConfigurationProperties(MongoProperties.class) @ConditionalOnMissingBean(type=\"org.springframework.data.mongodb.MongoDatabaseFactory\") public class MongoAutoConfiguration extends Object; // Auto-configuration for Mongo.\npublic class MongoClientFactory extends MongoClientFactorySupport<com.mongodb.client.MongoClient>; // A factory for a blocking MongoClient.\npublic abstract class MongoClientFactorySupport<T> extends Object; // Base class for setup that is common to MongoDB client factories.\n@FunctionalInterface public interface MongoClientSettingsBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the MongoClientSettings through a MongoClientSettings.Builder whilst retaining default auto-configuration.\npublic interface MongoConnectionDetails extends ConnectionDetails; // Details required to establish a connection to a MongoDB service.\npublic static interface MongoConnectionDetails.GridFs; // GridFS configuration.\n@ConfigurationProperties(prefix=\"spring.data.mongodb\") public class MongoProperties extends Object; // Configuration properties for Mongo.\npublic static class MongoProperties.Gridfs extends Object;\npublic static class MongoProperties.Ssl extends Object;\n@Deprecated(since=\"3.1.0\", forRemoval=true) public class MongoPropertiesClientSettingsBuilderCustomizer extends Object implements MongoClientSettingsBuilderCustomizer, org.springframework.core.Ordered;\n@AutoConfiguration @ConditionalOnClass({com.mongodb.reactivestreams.client.MongoClient.class,reactor.core.publisher.Flux.class}) @EnableConfigurationProperties(MongoProperties.class) public class MongoReactiveAutoConfiguration extends Object; // Auto-configuration for Reactive Mongo.\npublic class PropertiesMongoConnectionDetails extends Object implements MongoConnectionDetails; // Adapts MongoProperties to MongoConnectionDetails.\npublic class ReactiveMongoClientFactory extends MongoClientFactorySupport<com.mongodb.reactivestreams.client.MongoClient>; // A factory for a reactive MongoClient.\npublic class StandardMongoClientSettingsBuilderCustomizer extends Object implements MongoClientSettingsBuilderCustomizer, org.springframework.core.Ordered; // A MongoClientSettingsBuilderCustomizer that applies standard settings to a MongoClientSettings.\n", "des": "Auto-configuration for MongoDB."}
{"index": 1959, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package mustache;\n\n@AutoConfiguration @ConditionalOnClass(com.samskivert.mustache.Mustache.class) @EnableConfigurationProperties(MustacheProperties.class) @Import({org.springframework.boot.autoconfigure.mustache.MustacheServletWebConfiguration.class,org.springframework.boot.autoconfigure.mustache.MustacheReactiveWebConfiguration.class}) public class MustacheAutoConfiguration extends Object; // Auto-configuration for Mustache.\n@ConfigurationProperties(prefix=\"spring.mustache\") public class MustacheProperties extends Object; // @ConfigurationProperties for Mustache.\npublic static class MustacheProperties.Reactive extends Object;\npublic static class MustacheProperties.Servlet extends Object;\npublic class MustacheResourceTemplateLoader extends Object implements com.samskivert.mustache.Mustache.TemplateLoader, org.springframework.context.ResourceLoaderAware; // Mustache TemplateLoader implementation that uses a prefix, suffix and the Spring Resource abstraction to load a template from a file, classpath, URL etc.\npublic class MustacheTemplateAvailabilityProvider extends Object implements TemplateAvailabilityProvider; // TemplateAvailabilityProvider that provides availability information for Mustache view templates.\n", "des": "Auto-configuration for Mustache."}
{"index": 1960, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package neo4j;\n\n@FunctionalInterface public interface ConfigBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the Config through a Config.ConfigBuilder whilst retaining default auto-configuration.\n@AutoConfiguration @ConditionalOnClass(org.neo4j.driver.Driver.class) @EnableConfigurationProperties(Neo4jProperties.class) public class Neo4jAutoConfiguration extends Object; // Auto-configuration for Neo4j.\npublic interface Neo4jConnectionDetails extends ConnectionDetails; // Details required to establish a connection to a Neo4j service.\n@ConfigurationProperties(prefix=\"spring.neo4j\") public class Neo4jProperties extends Object; // Configuration properties for Neo4j.\npublic static class Neo4jProperties.Authentication extends Object;\npublic static class Neo4jProperties.Pool extends Object;\npublic static class Neo4jProperties.Security extends Object;\npublic static enum Neo4jProperties.Security.TrustStrategy extends Enum<Neo4jProperties.Security.TrustStrategy>;\n", "des": "Auto-configuration for Neo4j."}
{"index": 1961, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package netty;\n\n@AutoConfiguration @ConditionalOnClass(io.netty.util.NettyRuntime.class) @EnableConfigurationProperties(NettyProperties.class) public class NettyAutoConfiguration extends Object; // Auto-configuration for Netty.\n@ConfigurationProperties(prefix=\"spring.netty\") public class NettyProperties extends Object; // @ConfigurationProperties for the Netty engine.\npublic static enum NettyProperties.LeakDetection extends Enum<NettyProperties.LeakDetection>;\n", "des": "Auto-configuration for the Netty library."}
{"index": 1962, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jpa;\n\n@FunctionalInterface public interface EntityManagerFactoryBuilderCustomizer; // Callback interface that can be used to customize the auto-configured EntityManagerFactoryBuilder.\npublic class EntityManagerFactoryDependsOnPostProcessor extends AbstractDependsOnBeanFactoryPostProcessor; // BeanFactoryPostProcessor that can be used to dynamically declare that all EntityManagerFactory beans should \"depend on\" one or more specific beans.\n@AutoConfiguration(after=DataSourceAutoConfiguration.class, before=TransactionAutoConfiguration.class) @ConditionalOnClass({org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.class,jakarta.persistence.EntityManager.class,org.hibernate.engine.spi.SessionImplementor.class}) @EnableConfigurationProperties(JpaProperties.class) @Import(org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.class) public class HibernateJpaAutoConfiguration extends Object; // Auto-configuration for Hibernate JPA.\n@ConfigurationProperties(\"spring.jpa.hibernate\") public class HibernateProperties extends Object; // Configuration properties for Hibernate.\npublic static class HibernateProperties.Naming extends Object;\n@FunctionalInterface public interface HibernatePropertiesCustomizer; // Callback interface that can be implemented by beans wishing to customize the Hibernate properties before it is used by an auto-configured EntityManagerFactory.\npublic class HibernateSettings extends Object; // Settings to apply when configuring Hibernate.\n@Configuration(proxyBeanMethods=false) @EnableConfigurationProperties(JpaProperties.class) public abstract class JpaBaseConfiguration extends Object; // Base Auto-configuration for JPA.\n", "des": "Auto-configuration for JPA and Spring ORM."}
{"index": 1963, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package quartz;\n\npublic enum JobStoreType extends Enum<JobStoreType>; // Define the supported Quartz JobStore.\n@AutoConfiguration(after={DataSourceAutoConfiguration.class,HibernateJpaAutoConfiguration.class,LiquibaseAutoConfiguration.class,FlywayAutoConfiguration.class}) @ConditionalOnClass({org.quartz.Scheduler.class,org.springframework.scheduling.quartz.SchedulerFactoryBean.class,org.springframework.transaction.PlatformTransactionManager.class}) @EnableConfigurationProperties(QuartzProperties.class) public class QuartzAutoConfiguration extends Object; // Auto-configuration for Quartz Scheduler.\n@Configuration(proxyBeanMethods=false) @ConditionalOnSingleCandidate(javax.sql.DataSource.class) @ConditionalOnProperty(prefix=\"spring.quartz\", name=\"job-store-type\", havingValue=\"jdbc\") @Import(org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer.class) protected static class QuartzAutoConfiguration.JdbcStoreTypeConfiguration extends Object;\n@Target({FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Qualifier public @interface QuartzDataSource; // Qualifier annotation for a DataSource to be injected into Quartz auto-configuration.\npublic class QuartzDataSourceScriptDatabaseInitializer extends org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer; // DataSourceScriptDatabaseInitializer for the Quartz Scheduler database.\n@ConfigurationProperties(\"spring.quartz\") public class QuartzProperties extends Object; // Configuration properties for the Quartz Scheduler integration.\npublic static class QuartzProperties.Jdbc extends Object;\n@Target({FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Qualifier public @interface QuartzTransactionManager; // Qualifier annotation for a TransactionManager to be injected into Quartz auto-configuration.\n@FunctionalInterface public interface SchedulerFactoryBeanCustomizer; // Callback interface that can be implemented by beans wishing to customize the Quartz SchedulerFactoryBean before it is fully initialized, in particular to tune its configuration.\n", "des": "Auto-configuration for Quartz Scheduler."}
{"index": 1964, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package r2dbc;\n\n@FunctionalInterface public interface ConnectionFactoryOptionsBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the ConnectionFactoryOptions through a ConnectionFactoryOptions.Builder whilst retaining default auto-configuration.\n@AutoConfiguration(before={DataSourceAutoConfiguration.class,SqlInitializationAutoConfiguration.class}) @ConditionalOnClass(io.r2dbc.spi.ConnectionFactory.class) @ConditionalOnResource(resources=\"classpath:META-INF/services/io.r2dbc.spi.ConnectionFactoryProvider\") @EnableConfigurationProperties(R2dbcProperties.class) @Import({org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryConfigurations.PoolConfiguration.class,org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryConfigurations.GenericConfiguration.class,org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryDependentConfiguration.class}) public class R2dbcAutoConfiguration extends Object; // Auto-configuration for R2DBC.\npublic interface R2dbcConnectionDetails extends ConnectionDetails; // Details required to establish a connection to an SQL service using R2DBC.\n@ConfigurationProperties(prefix=\"spring.r2dbc\") public class R2dbcProperties extends Object; // Configuration properties for R2DBC.\npublic static class R2dbcProperties.Pool extends Object;\n@AutoConfiguration(before=TransactionAutoConfiguration.class) @ConditionalOnClass({org.springframework.r2dbc.connection.R2dbcTransactionManager.class,org.springframework.transaction.ReactiveTransactionManager.class}) @ConditionalOnSingleCandidate(io.r2dbc.spi.ConnectionFactory.class) @AutoConfigureOrder(2147483647) public class R2dbcTransactionManagerAutoConfiguration extends Object; // Auto-configuration for R2dbcTransactionManager.\n", "des": "Auto-Configuration for R2DBC."}
{"index": 1965, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package netty;\n\npublic final class ReactorNettyConfigurations extends Object; // Configurations for Reactor Netty.\n@Configuration(proxyBeanMethods=false) @EnableConfigurationProperties(ReactorNettyProperties.class) public static class ReactorNettyConfigurations.ReactorResourceFactoryConfiguration extends Object;\n@ConfigurationProperties(prefix=\"spring.reactor.netty\") public class ReactorNettyProperties extends Object; // Configuration properties for Reactor Netty.\n", "des": "Auto-configuration for Reactor Netty."}
{"index": 1966, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package rsocket;\n\n@FunctionalInterface public interface RSocketMessageHandlerCustomizer; // Callback interface that can be used to customize a RSocketMessageHandler.\n@AutoConfiguration(after=RSocketStrategiesAutoConfiguration.class) @ConditionalOnClass({org.springframework.messaging.rsocket.RSocketRequester.class,io.rsocket.RSocket.class,io.rsocket.transport.netty.server.TcpServerTransport.class}) public class RSocketMessagingAutoConfiguration extends Object; // Auto-configuration for Spring RSocket support in Spring Messaging.\n@ConfigurationProperties(\"spring.rsocket\") public class RSocketProperties extends Object; // properties for RSocket support.\npublic static class RSocketProperties.Server extends Object;\n@AutoConfiguration(after=RSocketStrategiesAutoConfiguration.class) @ConditionalOnClass({org.springframework.messaging.rsocket.RSocketRequester.class,io.rsocket.RSocket.class,reactor.netty.http.server.HttpServer.class,io.rsocket.transport.netty.server.TcpServerTransport.class}) public class RSocketRequesterAutoConfiguration extends Object; // Auto-configuration for RSocketRequester.\n@AutoConfiguration(after=RSocketStrategiesAutoConfiguration.class) @ConditionalOnClass({io.rsocket.core.RSocketServer.class,org.springframework.messaging.rsocket.RSocketStrategies.class,reactor.netty.http.server.HttpServer.class,io.rsocket.transport.netty.server.TcpServerTransport.class}) @ConditionalOnBean(org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.class) @EnableConfigurationProperties(RSocketProperties.class) public class RSocketServerAutoConfiguration extends Object; // Auto-configuration for RSocket servers.\n@AutoConfiguration(after=JacksonAutoConfiguration.class) @ConditionalOnClass({io.rsocket.RSocket.class,org.springframework.messaging.rsocket.RSocketStrategies.class,io.netty.buffer.PooledByteBufAllocator.class}) public class RSocketStrategiesAutoConfiguration extends Object; // Auto-configuration for RSocketStrategies.\n", "des": "Auto-configuration for RSocket."}
{"index": 1967, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package security;\n\npackage security.reactive; // Auto-configuration for reactive Spring Security.\npackage security.rsocket; // Auto-configuration for RSocket support in Spring Security.\npackage security.saml2; // Auto-configuration for Spring Security's SAML 2.0.\npackage security.servlet; // Auto-configuration for Servlet-based Spring Security.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.security.DefaultWebSecurityCondition.class) public @interface ConditionalOnDefaultWebSecurity; // @Conditional that only matches when web security is available and the user has not defined their own configuration.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.security.data.repository.query.SecurityEvaluationContextExtension.class) public class SecurityDataConfiguration extends Object; // Automatically adds Spring Security's integration with Spring Data.\n@ConfigurationProperties(prefix=\"spring.security\") public class SecurityProperties extends Object; // Configuration properties for Spring Security.\npublic static class SecurityProperties.Filter extends Object;\npublic static class SecurityProperties.User extends Object;\npublic enum StaticResourceLocation extends Enum<StaticResourceLocation>; // Common locations for static resources.\n", "des": "Auto-configuration for Spring Security."}
{"index": 1968, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package client;\n\npackage client.reactive; // Auto-configuration for Spring Security's Reactive OAuth 2 client.\npackage client.servlet; // Auto-configuration for Spring Security's OAuth 2 client.\npublic class ClientsConfiguredCondition extends SpringBootCondition; // Condition that matches if any spring.security.oauth2.client.registration properties are defined.\n@ConfigurationProperties(prefix=\"spring.security.oauth2.client\") public class OAuth2ClientProperties extends Object implements org.springframework.beans.factory.InitializingBean; // OAuth 2.0 client properties.\npublic static class OAuth2ClientProperties.Provider extends Object;\npublic static class OAuth2ClientProperties.Registration extends Object; // A single client registration.\npublic final class OAuth2ClientPropertiesMapper extends Object; // Maps OAuth2ClientProperties to ClientRegistrations.\n@Deprecated(since=\"3.1.0\", forRemoval=true) public final class OAuth2ClientPropertiesRegistrationAdapter extends Object;\n", "des": "Support for Spring Security's OAuth 2 client."}
{"index": 1969, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package reactive;\n\n@AutoConfiguration(before=ReactiveSecurityAutoConfiguration.class) @EnableConfigurationProperties(OAuth2ClientProperties.class) @Conditional(org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration.NonServletApplicationCondition.class) @ConditionalOnClass({reactor.core.publisher.Flux.class,org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity.class,org.springframework.security.oauth2.client.registration.ClientRegistration.class}) @Import({org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientConfigurations.ReactiveClientRegistrationRepositoryConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientConfigurations.ReactiveOAuth2ClientConfiguration.class}) public class ReactiveOAuth2ClientAutoConfiguration extends Object; // Auto-configuration for Spring Security's Reactive OAuth2 client.\n", "des": "Auto-configuration for Spring Security's Reactive OAuth 2 client."}
{"index": 1970, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package servlet;\n\n@AutoConfiguration(before=SecurityAutoConfiguration.class) @ConditionalOnClass({org.springframework.security.config.annotation.web.configuration.EnableWebSecurity.class,org.springframework.security.oauth2.client.registration.ClientRegistration.class}) @ConditionalOnWebApplication(type=SERVLET) @Import({org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientRegistrationRepositoryConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2WebSecurityConfiguration.class}) public class OAuth2ClientAutoConfiguration extends Object; // Auto-configuration for OAuth client support.\n", "des": "Auto-configuration for Spring Security's OAuth 2 client."}
{"index": 1971, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package resource;\n\npackage resource.reactive; // Auto-configuration for Spring Security's Reactive OAuth2 resource server.\npackage resource.servlet; // Auto-configuration for Spring Security's OAuth2 resource server.\npublic class IssuerUriCondition extends SpringBootCondition; // Condition for creating JwtDecoder by oidc issuer location.\npublic class KeyValueCondition extends SpringBootCondition; // Condition for creating a jwt decoder using a public key value.\n@ConfigurationProperties(prefix=\"spring.security.oauth2.resourceserver\") public class OAuth2ResourceServerProperties extends Object; // OAuth 2.0 resource server properties.\npublic static class OAuth2ResourceServerProperties.Jwt extends Object;\npublic static class OAuth2ResourceServerProperties.Opaquetoken extends Object;\n", "des": "Support for Spring Security's OAuth2 resource server."}
{"index": 1972, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package reactive;\n\n@FunctionalInterface public interface JwkSetUriReactiveJwtDecoderBuilderCustomizer; // Callback interface for the customization of the NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder used to create the auto-configured ReactiveJwtDecoder for a JWK set URI that has been configured directly or obtained through an issuer URI.\n@AutoConfiguration(before={ReactiveSecurityAutoConfiguration.class,ReactiveUserDetailsServiceAutoConfiguration.class}) @EnableConfigurationProperties(OAuth2ResourceServerProperties.class) @ConditionalOnClass(org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity.class) @ConditionalOnWebApplication(type=REACTIVE) @Import({org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerConfiguration.JwtConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerConfiguration.OpaqueTokenConfiguration.class}) public class ReactiveOAuth2ResourceServerAutoConfiguration extends Object; // Auto-configuration for Reactive OAuth2 resource server support.\n", "des": "Auto-configuration for Spring Security's Reactive OAuth2 resource server."}
{"index": 1973, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package servlet;\n\n@FunctionalInterface public interface JwkSetUriJwtDecoderBuilderCustomizer; // Callback interface for the customization of the NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder used to create the auto-configured JwtDecoder for a JWK set URI that has been configured directly or obtained through an issuer URI.\n@AutoConfiguration(before={SecurityAutoConfiguration.class,UserDetailsServiceAutoConfiguration.class}) @EnableConfigurationProperties(OAuth2ResourceServerProperties.class) @ConditionalOnClass(org.springframework.security.oauth2.server.resource.authentication.BearerTokenAuthenticationToken.class) @ConditionalOnWebApplication(type=SERVLET) @Import({org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.Oauth2ResourceServerConfiguration.JwtConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.Oauth2ResourceServerConfiguration.OpaqueTokenConfiguration.class}) public class OAuth2ResourceServerAutoConfiguration extends Object; // Auto-configuration for OAuth2 resource server support.\n", "des": "Auto-configuration for Spring Security's OAuth2 resource server."}
{"index": 1974, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package servlet;\n\n@AutoConfiguration(before={OAuth2ResourceServerAutoConfiguration.class,SecurityAutoConfiguration.class,UserDetailsServiceAutoConfiguration.class}) @ConditionalOnClass(org.springframework.security.oauth2.server.authorization.OAuth2Authorization.class) @ConditionalOnWebApplication(type=SERVLET) @Import({org.springframework.boot.autoconfigure.security.oauth2.server.servlet.OAuth2AuthorizationServerConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.server.servlet.OAuth2AuthorizationServerWebSecurityConfiguration.class}) public class OAuth2AuthorizationServerAutoConfiguration extends Object; // Auto-configuration for OAuth2 authorization server support.\n@AutoConfiguration(after=UserDetailsServiceAutoConfiguration.class) @ConditionalOnClass(org.springframework.security.oauth2.server.authorization.OAuth2Authorization.class) @ConditionalOnWebApplication(type=SERVLET) public class OAuth2AuthorizationServerJwtAutoConfiguration extends Object; // Auto-configuration for JWT support for endpoints of the OAuth2 authorization server that require it (e.g.\n@ConfigurationProperties(prefix=\"spring.security.oauth2.authorizationserver\") public class OAuth2AuthorizationServerProperties extends Object implements org.springframework.beans.factory.InitializingBean; // OAuth 2.0 Authorization Server properties.\npublic static class OAuth2AuthorizationServerProperties.Client extends Object; // A registered client of the Authorization Server.\npublic static class OAuth2AuthorizationServerProperties.Endpoint extends Object; // Authorization Server endpoints.\npublic static class OAuth2AuthorizationServerProperties.OidcEndpoint extends Object; // OpenID Connect 1.0 endpoints.\npublic static class OAuth2AuthorizationServerProperties.Registration extends Object; // Client registration information.\npublic static class OAuth2AuthorizationServerProperties.Token extends Object; // Token settings of the registered client.\n", "des": "Auto-configuration for Spring Security's OAuth2 authorization server."}
{"index": 1975, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package reactive;\n\npublic final class PathRequest extends Object; // Factory that can be used to create a ServerWebExchangeMatcher for commonly used paths.\n@AutoConfiguration @EnableConfigurationProperties(SecurityProperties.class) @ConditionalOnClass({reactor.core.publisher.Flux.class,org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity.class,org.springframework.security.web.server.WebFilterChainProxy.class,org.springframework.web.reactive.config.WebFluxConfigurer.class}) public class ReactiveSecurityAutoConfiguration extends Object; // Auto-configuration for Spring Security in a reactive application.\n@AutoConfiguration(after=RSocketMessagingAutoConfiguration.class) @ConditionalOnClass(org.springframework.security.authentication.ReactiveAuthenticationManager.class) @ConditionalOnMissingBean(value={org.springframework.security.authentication.ReactiveAuthenticationManager.class,org.springframework.security.core.userdetails.ReactiveUserDetailsService.class,org.springframework.security.authentication.ReactiveAuthenticationManagerResolver.class}, type={\"org.springframework.security.oauth2.jwt.ReactiveJwtDecoder\",\"org.springframework.security.oauth2.server.resource.introspection.ReactiveOpaqueTokenIntrospector\"}) @Conditional(org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration.ReactiveUserDetailsServiceCondition.class) @EnableConfigurationProperties(SecurityProperties.class) public class ReactiveUserDetailsServiceAutoConfiguration extends Object; // Default user @Configuration for a reactive web application.\npublic final class StaticResourceRequest extends Object; // Used to create a ServerWebExchangeMatcher for static resources in commonly used locations.\npublic static final class StaticResourceRequest.StaticResourceServerWebExchange extends Object implements org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher; // The server web exchange matcher used to match against resource locations.\n", "des": "Auto-configuration for reactive Spring Security."}
{"index": 1976, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package rsocket;\n\n@AutoConfiguration @EnableRSocketSecurity @ConditionalOnClass(org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor.class) public class RSocketSecurityAutoConfiguration extends Object; // Auto-configuration for Spring Security for an RSocket server.\n", "des": "Auto-configuration for RSocket support in Spring Security."}
{"index": 1977, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package saml2;\n\n@AutoConfiguration(before=SecurityAutoConfiguration.class) @ConditionalOnClass(org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository.class) @ConditionalOnWebApplication(type=SERVLET) @Import({org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyRegistrationConfiguration.class,org.springframework.boot.autoconfigure.security.saml2.Saml2LoginConfiguration.class}) @EnableConfigurationProperties(Saml2RelyingPartyProperties.class) public class Saml2RelyingPartyAutoConfiguration extends Object; // Auto-configuration for Spring Security's SAML 2.0 authentication support.\n@ConfigurationProperties(\"spring.security.saml2.relyingparty\") public class Saml2RelyingPartyProperties extends Object; // SAML2 relying party properties.\npublic static class Saml2RelyingPartyProperties.AssertingParty extends Object; // Represents a remote Identity Provider.\npublic static class Saml2RelyingPartyProperties.AssertingParty.Singlesignon extends Object; // Single sign on details for an Identity Provider.\npublic static class Saml2RelyingPartyProperties.AssertingParty.Verification extends Object; // Verification details for an Identity Provider.\npublic static class Saml2RelyingPartyProperties.AssertingParty.Verification.Credential extends Object;\npublic static class Saml2RelyingPartyProperties.Decryption extends Object;\npublic static class Saml2RelyingPartyProperties.Decryption.Credential extends Object;\npublic static class Saml2RelyingPartyProperties.Registration extends Object; // Represents a SAML Relying Party.\npublic static class Saml2RelyingPartyProperties.Registration.Acs extends Object;\npublic static class Saml2RelyingPartyProperties.Registration.Signing extends Object;\npublic static class Saml2RelyingPartyProperties.Registration.Signing.Credential extends Object;\npublic static class Saml2RelyingPartyProperties.Singlelogout extends Object; // Single logout details.\n", "des": "Auto-configuration for Spring Security's SAML 2.0."}
{"index": 1978, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package servlet;\n\npublic class AntPathRequestMatcherProvider extends Object implements RequestMatcherProvider; // RequestMatcherProvider that provides an AntPathRequestMatcher.\npublic final class PathRequest extends Object; // Factory that can be used to create a RequestMatcher for commonly used paths.\npublic static final class PathRequest.H2ConsoleRequestMatcher extends org.springframework.boot.security.servlet.ApplicationContextRequestMatcher<H2ConsoleProperties>; // The request matcher used to match against h2 console path.\n@FunctionalInterface public interface RequestMatcherProvider; // Interface that can be used to provide a RequestMatcher that can be used with Spring Security.\n@AutoConfiguration(before=UserDetailsServiceAutoConfiguration.class) @ConditionalOnClass(org.springframework.security.authentication.DefaultAuthenticationEventPublisher.class) @EnableConfigurationProperties(SecurityProperties.class) @Import({org.springframework.boot.autoconfigure.security.servlet.SpringBootWebSecurityConfiguration.class,SecurityDataConfiguration.class}) public class SecurityAutoConfiguration extends Object; // Auto-configuration for Spring Security.\n@AutoConfiguration(after=SecurityAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @EnableConfigurationProperties(SecurityProperties.class) @ConditionalOnClass({org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer.class,org.springframework.security.config.http.SessionCreationPolicy.class}) public class SecurityFilterAutoConfiguration extends Object; // Auto-configuration for Spring Security's Filter.\npublic final class StaticResourceRequest extends Object; // Used to create a RequestMatcher for static resources in commonly used locations.\npublic static final class StaticResourceRequest.StaticResourceRequestMatcher extends org.springframework.boot.security.servlet.ApplicationContextRequestMatcher<DispatcherServletPath>; // The request matcher used to match against resource Locations.\n", "des": "Auto-configuration for Servlet-based Spring Security."}
{"index": 1979, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package sendgrid;\n\n@AutoConfiguration @ConditionalOnClass(com.sendgrid.SendGrid.class) @ConditionalOnProperty(prefix=\"spring.sendgrid\", value=\"api-key\") @EnableConfigurationProperties(SendGridProperties.class) public class SendGridAutoConfiguration extends Object; // Auto-configuration for SendGrid.\n@ConfigurationProperties(prefix=\"spring.sendgrid\") public class SendGridProperties extends Object; // @ConfigurationProperties for SendGrid.\npublic static class SendGridProperties.Proxy extends Object;\n", "des": "Auto-configuration for SendGrid."}
{"index": 1980, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package connection;\n\npublic interface ConnectionDetails; // Base interface for types that provide the details required to establish a connection to a remote service.\npublic class ConnectionDetailsFactories extends Object; // A registry of ConnectionDetailsFactory instances.\npublic interface ConnectionDetailsFactory<S,D extends ConnectionDetails>; // A factory to create ConnectionDetails from a given source.\npublic class ConnectionDetailsFactoryNotFoundException extends RuntimeException; // RuntimeException thrown when a ConnectionDetailsFactory could not be found.\npublic class ConnectionDetailsNotFoundException extends RuntimeException; // RuntimeException thrown when required ConnectionDetails could not be found.\n", "des": "Support for service connections that affect auto-configuration."}
{"index": 1981, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package session;\n\n@FunctionalInterface public interface DefaultCookieSerializerCustomizer; // Callback interface that can be implemented by beans wishing to customize the DefaultCookieSerializer configuration.\n@ConfigurationProperties(prefix=\"spring.session.hazelcast\") public class HazelcastSessionProperties extends Object; // Configuration properties for Hazelcast backed Spring Session.\npublic class JdbcSessionDataSourceScriptDatabaseInitializer extends org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer; // DataSourceScriptDatabaseInitializer for the Spring Session JDBC database.\n@ConfigurationProperties(prefix=\"spring.session.jdbc\") public class JdbcSessionProperties extends Object; // Configuration properties for JDBC backed Spring Session.\n@ConfigurationProperties(prefix=\"spring.session.mongodb\") public class MongoSessionProperties extends Object; // Configuration properties for Mongo-backed Spring Session.\n@ConfigurationProperties(prefix=\"spring.session.redis\") public class RedisSessionProperties extends Object; // Configuration properties for Redis backed Spring Session.\npublic static enum RedisSessionProperties.ConfigureAction extends Enum<RedisSessionProperties.ConfigureAction>; // Strategies for configuring and validating Redis.\npublic static enum RedisSessionProperties.RepositoryType extends Enum<RedisSessionProperties.RepositoryType>; // Type of Redis session repository to auto-configure.\n@AutoConfiguration(after={DataSourceAutoConfiguration.class,HazelcastAutoConfiguration.class,JdbcTemplateAutoConfiguration.class,MongoDataAutoConfiguration.class,MongoReactiveDataAutoConfiguration.class,RedisAutoConfiguration.class,RedisReactiveAutoConfiguration.class,WebSessionIdResolverAutoConfiguration.class}, before={HttpHandlerAutoConfiguration.class,WebFluxAutoConfiguration.class}) @ConditionalOnClass(org.springframework.session.Session.class) @ConditionalOnWebApplication @EnableConfigurationProperties({ServerProperties.class,SessionProperties.class,WebFluxProperties.class}) public class SessionAutoConfiguration extends Object; // Auto-configuration for Spring Session.\n@ConfigurationProperties(prefix=\"spring.session\") public class SessionProperties extends Object; // Configuration properties for Spring Session.\npublic static class SessionProperties.Servlet extends Object; // Servlet-related properties.\n", "des": "Auto-configuration for Spring Session."}
{"index": 1982, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package init;\n\npublic class OnDatabaseInitializationCondition extends SpringBootCondition; // Condition that checks if the database initialization of a particular component should be considered.\n@ImportRuntimeHints(org.springframework.boot.autoconfigure.sql.init.SqlInitializationScriptsRuntimeHints.class) public class SqlDataSourceScriptDatabaseInitializer extends org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer; // DataSourceScriptDatabaseInitializer for the primary SQL database.\n@AutoConfiguration @EnableConfigurationProperties(SqlInitializationProperties.class) @Import({org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer.class,org.springframework.boot.autoconfigure.sql.init.R2dbcInitializationConfiguration.class,org.springframework.boot.autoconfigure.sql.init.DataSourceInitializationConfiguration.class}) @ConditionalOnProperty(prefix=\"spring.sql.init\", name=\"enabled\", matchIfMissing=true) @Conditional(org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration.SqlInitializationModeCondition.class) public class SqlInitializationAutoConfiguration extends Object; // Auto-configuration for initializing an SQL database.\n@ConfigurationProperties(\"spring.sql.init\") public class SqlInitializationProperties extends Object; // Configuration properties for initializing an SQL database.\n@ImportRuntimeHints(org.springframework.boot.autoconfigure.sql.init.SqlInitializationScriptsRuntimeHints.class) public class SqlR2dbcScriptDatabaseInitializer extends org.springframework.boot.r2dbc.init.R2dbcScriptDatabaseInitializer; // R2dbcScriptDatabaseInitializer for the primary SQL database.\n", "des": "Auto-configuration for basic script-based initialization of an SQL database."}
{"index": 1983, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package ssl;\n\npublic class JksSslBundleProperties extends SslBundleProperties; // SslBundleProperties for Java keystores.\npublic static class JksSslBundleProperties.Store extends Object; // Store properties.\npublic class PemSslBundleProperties extends SslBundleProperties; // SslBundleProperties for PEM-encoded certificates and private keys.\npublic static class PemSslBundleProperties.Store extends Object; // Store properties.\npublic final class PropertiesSslBundle extends Object implements org.springframework.boot.ssl.SslBundle; // SslBundle backed by JksSslBundleProperties or PemSslBundleProperties.\n@AutoConfiguration @EnableConfigurationProperties(SslProperties.class) public class SslAutoConfiguration extends Object; // Auto-configuration for SSL.\npublic abstract class SslBundleProperties extends Object; // Base class for SSL Bundle properties.\npublic static class SslBundleProperties.Key extends Object;\npublic static class SslBundleProperties.Options extends Object;\n@FunctionalInterface public interface SslBundleRegistrar; // Interface to be implemented by types that register SslBundle instances with an SslBundleRegistry.\n@ConfigurationProperties(prefix=\"spring.ssl\") public class SslProperties extends Object; // Properties for centralized SSL trust material configuration.\npublic static class SslProperties.Bundles extends Object; // Properties to define SSL Bundles.\n", "des": "Auto-configuration for SSL bundles."}
{"index": 1984, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package task;\n\n@ConditionalOnClass(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.class) @AutoConfiguration @EnableConfigurationProperties(TaskExecutionProperties.class) public class TaskExecutionAutoConfiguration extends Object; // Auto-configuration for TaskExecutor.\n@ConfigurationProperties(\"spring.task.execution\") public class TaskExecutionProperties extends Object; // Configuration properties for task execution.\npublic static class TaskExecutionProperties.Pool extends Object;\npublic static class TaskExecutionProperties.Shutdown extends Object;\n@ConditionalOnClass(org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.class) @AutoConfiguration(after=TaskExecutionAutoConfiguration.class) @EnableConfigurationProperties(TaskSchedulingProperties.class) public class TaskSchedulingAutoConfiguration extends Object; // Auto-configuration for TaskScheduler.\n@ConfigurationProperties(\"spring.task.scheduling\") public class TaskSchedulingProperties extends Object; // Configuration properties for task scheduling.\npublic static class TaskSchedulingProperties.Pool extends Object;\npublic static class TaskSchedulingProperties.Shutdown extends Object;\n", "des": "Auto-configuration for task execution and scheduling."}
{"index": 1985, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package template;\n\npublic abstract class AbstractTemplateViewResolverProperties extends AbstractViewResolverProperties; // Base class for @ConfigurationProperties of a AbstractTemplateViewResolver.\npublic abstract class AbstractViewResolverProperties extends Object; // Base class for @ConfigurationProperties of a ViewResolver.\npublic abstract class PathBasedTemplateAvailabilityProvider extends Object implements TemplateAvailabilityProvider; // Abstract base class for TemplateAvailabilityProvider implementations that find templates from paths.\nprotected abstract static class PathBasedTemplateAvailabilityProvider.TemplateAvailabilityProperties extends Object;\n@FunctionalInterface public interface TemplateAvailabilityProvider; // Indicates the availability of view templates for a particular templating engine such as FreeMarker or Thymeleaf.\npublic class TemplateAvailabilityProviders extends Object; // Collection of TemplateAvailabilityProvider beans that can be used to check which (if any) templating engine supports a given view.\npublic class TemplateLocation extends Object; // Contains a location that templates can be loaded from.\n", "des": "Base classes for template Auto-configuration."}
{"index": 1986, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package thymeleaf;\n\n@AutoConfiguration(after={WebMvcAutoConfiguration.class,WebFluxAutoConfiguration.class}) @EnableConfigurationProperties(ThymeleafProperties.class) @ConditionalOnClass({org.thymeleaf.templatemode.TemplateMode.class,org.thymeleaf.spring6.SpringTemplateEngine.class}) @Import({org.springframework.boot.autoconfigure.thymeleaf.TemplateEngineConfigurations.ReactiveTemplateEngineConfiguration.class,org.springframework.boot.autoconfigure.thymeleaf.TemplateEngineConfigurations.DefaultTemplateEngineConfiguration.class}) public class ThymeleafAutoConfiguration extends Object; // Auto-configuration for Thymeleaf.\n@ConfigurationProperties(prefix=\"spring.thymeleaf\") public class ThymeleafProperties extends Object; // Properties for Thymeleaf.\npublic static class ThymeleafProperties.Reactive extends Object;\npublic static class ThymeleafProperties.Servlet extends Object;\npublic class ThymeleafTemplateAvailabilityProvider extends Object implements TemplateAvailabilityProvider; // TemplateAvailabilityProvider that provides availability information for Thymeleaf view templates.\n", "des": "Auto-configuration for Thymeleaf."}
{"index": 1987, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package transaction;\n\npackage transaction.jta; // Auto-configuration for JTA.\n@FunctionalInterface public interface PlatformTransactionManagerCustomizer<T extends org.springframework.transaction.PlatformTransactionManager>; // Callback interface that can be implemented by beans wishing to customize PlatformTransactionManagers whilst retaining default auto-configuration.\n@AutoConfiguration @ConditionalOnClass(org.springframework.transaction.PlatformTransactionManager.class) @EnableConfigurationProperties(TransactionProperties.class) public class TransactionAutoConfiguration extends Object; // Auto-configuration for Spring transaction.\n@Configuration(proxyBeanMethods=false) @ConditionalOnBean(org.springframework.transaction.TransactionManager.class) @ConditionalOnMissingBean(org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration.class) public static class TransactionAutoConfiguration.EnableTransactionManagementConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @EnableTransactionManagement(proxyTargetClass=true) @ConditionalOnProperty(prefix=\"spring.aop\", name=\"proxy-target-class\", havingValue=\"true\", matchIfMissing=true) public static class TransactionAutoConfiguration.EnableTransactionManagementConfiguration.CglibAutoProxyConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @EnableTransactionManagement(proxyTargetClass=false) @ConditionalOnProperty(prefix=\"spring.aop\", name=\"proxy-target-class\", havingValue=\"false\") public static class TransactionAutoConfiguration.EnableTransactionManagementConfiguration.JdkDynamicAutoProxyConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @ConditionalOnSingleCandidate(org.springframework.transaction.PlatformTransactionManager.class) public static class TransactionAutoConfiguration.TransactionTemplateConfiguration extends Object;\npublic class TransactionManagerCustomizers extends Object; // A collection of PlatformTransactionManagerCustomizer.\n@ConfigurationProperties(prefix=\"spring.transaction\") public class TransactionProperties extends Object implements PlatformTransactionManagerCustomizer<org.springframework.transaction.support.AbstractPlatformTransactionManager>; // Configuration properties that can be applied to an AbstractPlatformTransactionManager.\n", "des": "Auto-configuration for transaction support."}
{"index": 1988, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jta;\n\n@AutoConfiguration(before={XADataSourceAutoConfiguration.class,ActiveMQAutoConfiguration.class,ArtemisAutoConfiguration.class,HibernateJpaAutoConfiguration.class,TransactionAutoConfiguration.class}) @ConditionalOnClass(jakarta.transaction.Transaction.class) @ConditionalOnProperty(prefix=\"spring.jta\", value=\"enabled\", matchIfMissing=true) @Import(org.springframework.boot.autoconfigure.transaction.jta.JndiJtaConfiguration.class) public class JtaAutoConfiguration extends Object; // Auto-configuration for JTA.\n", "des": "Auto-configuration for JTA."}
{"index": 1989, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package validation;\n\n@AutoConfiguration @ConditionalOnClass(jakarta.validation.executable.ExecutableValidator.class) @ConditionalOnResource(resources=\"classpath:META-INF/services/jakarta.validation.spi.ValidationProvider\") @Import(org.springframework.boot.autoconfigure.validation.PrimaryDefaultValidatorPostProcessor.class) public class ValidationAutoConfiguration extends Object; // Auto-configuration to configure the validation infrastructure.\n@FunctionalInterface public interface ValidationConfigurationCustomizer; // Callback interface that can be used to customize Configuration.\npublic class ValidatorAdapter extends Object implements org.springframework.validation.SmartValidator, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Validator implementation that delegates calls to another Validator.\n", "des": "Auto-configuration for (JSR-303) Validation."}
{"index": 1990, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package web;\n\npackage web.client; // Auto-configuration for web clients.\npackage web.embedded; // Configuration for embedded reactive and servlet web servers.\npackage web.format; // Support classes for web-specific formatting.\npackage web.reactive; // Auto-configuration for reactive web servers and Spring WebFlux.\npackage web.servlet; // Auto-configuration for servlet web servers and Spring MVC.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.web.OnEnabledResourceChainCondition.class) public @interface ConditionalOnEnabledResourceChain; // @Conditional that checks whether the Spring resource handling chain is enabled.\npublic class ErrorProperties extends Object; // Configuration properties for web error handling.\npublic static enum ErrorProperties.IncludeAttribute extends Enum<ErrorProperties.IncludeAttribute>; // Include error attributes options.\npublic static enum ErrorProperties.IncludeStacktrace extends Enum<ErrorProperties.IncludeStacktrace>; // Include Stacktrace attribute options.\npublic static class ErrorProperties.Whitelabel extends Object;\n@ConfigurationProperties(prefix=\"server\", ignoreUnknownFields=true) public class ServerProperties extends Object; // @ConfigurationProperties for a web server (e.g.\npublic static enum ServerProperties.ForwardHeadersStrategy extends Enum<ServerProperties.ForwardHeadersStrategy>; // Strategies for supporting forward headers.\npublic static class ServerProperties.Jetty extends Object; // Jetty properties.\npublic static class ServerProperties.Jetty.Accesslog extends Object; // Jetty access log properties.\npublic static enum ServerProperties.Jetty.Accesslog.FORMAT extends Enum<ServerProperties.Jetty.Accesslog.FORMAT>; // Log format for Jetty access logs.\npublic static class ServerProperties.Jetty.Threads extends Object; // Jetty thread properties.\npublic static class ServerProperties.Netty extends Object; // Netty properties.\npublic static class ServerProperties.Reactive extends Object; // Reactive server properties.\npublic static class ServerProperties.Reactive.Session extends Object;\npublic static class ServerProperties.Servlet extends Object; // Servlet server properties.\npublic static class ServerProperties.Tomcat extends Object; // Tomcat properties.\npublic static class ServerProperties.Tomcat.Accesslog extends Object; // Tomcat access log properties.\n", "des": "Auto-configuration for common web concerns."}
{"index": 1991, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package client;\n\n@AutoConfiguration(after=HttpMessageConvertersAutoConfiguration.class) @ConditionalOnClass(org.springframework.web.client.RestTemplate.class) @Conditional(org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration.NotReactiveWebApplicationCondition.class) public class RestTemplateAutoConfiguration extends Object; // Auto-configuration for RestTemplate.\npublic final class RestTemplateBuilderConfigurer extends Object; // Configure RestTemplateBuilder with sensible defaults.\n", "des": "Auto-configuration for web clients."}
{"index": 1992, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package embedded;\n\n@AutoConfiguration @ConditionalOnNotWarDeployment @ConditionalOnWebApplication @EnableConfigurationProperties(ServerProperties.class) public class EmbeddedWebServerFactoryCustomizerAutoConfiguration extends Object; // Auto-configuration for embedded servlet and reactive web servers customizations.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass({org.eclipse.jetty.server.Server.class,org.eclipse.jetty.util.Loader.class,org.eclipse.jetty.webapp.WebAppContext.class}) public static class EmbeddedWebServerFactoryCustomizerAutoConfiguration.JettyWebServerFactoryCustomizerConfiguration extends Object; // Nested configuration if Jetty is being used.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(reactor.netty.http.server.HttpServer.class) public static class EmbeddedWebServerFactoryCustomizerAutoConfiguration.NettyWebServerFactoryCustomizerConfiguration extends Object; // Nested configuration if Netty is being used.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass({org.apache.catalina.startup.Tomcat.class,org.apache.coyote.UpgradeProtocol.class}) public static class EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration extends Object; // Nested configuration if Tomcat is being used.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass({io.undertow.Undertow.class,org.xnio.SslClientAuthMode.class}) public static class EmbeddedWebServerFactoryCustomizerAutoConfiguration.UndertowWebServerFactoryCustomizerConfiguration extends Object; // Nested configuration if Undertow is being used.\npublic class JettyWebServerFactoryCustomizer extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.jetty.ConfigurableJettyWebServerFactory>, org.springframework.core.Ordered; // Customization for Jetty-specific features common for both Servlet and Reactive servers.\n", "des": "Configuration for embedded reactive and servlet web servers."}
{"index": 1993, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package format;\n\npublic class DateTimeFormatters extends Object; // Formatters for dates, times, and date-times.\npublic class WebConversionService extends org.springframework.format.support.DefaultFormattingConversionService; // FormattingConversionService dedicated to web applications for formatting and converting values to/from the web.\n", "des": "Support classes for web-specific formatting."}
{"index": 1994, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package reactive;\n\npackage reactive.error; // Auto-configuration for Spring WebFlux error handling.\n@AutoConfiguration(after=WebFluxAutoConfiguration.class) @ConditionalOnClass({org.springframework.web.reactive.DispatcherHandler.class,org.springframework.http.server.reactive.HttpHandler.class}) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnMissingBean(org.springframework.http.server.reactive.HttpHandler.class) @AutoConfigureOrder(-2147483638) public class HttpHandlerAutoConfiguration extends Object; // Auto-configuration for HttpHandler.\n@Configuration(proxyBeanMethods=false) public static class HttpHandlerAutoConfiguration.AnnotationConfig extends Object;\n@AutoConfiguration @ConditionalOnClass({org.springframework.http.codec.multipart.DefaultPartHttpMessageReader.class,org.springframework.web.reactive.config.WebFluxConfigurer.class}) @ConditionalOnWebApplication(type=REACTIVE) @EnableConfigurationProperties(ReactiveMultipartProperties.class) public class ReactiveMultipartAutoConfiguration extends Object; // Auto-configuration for multipart support in Spring WebFlux.\n@ConfigurationProperties(prefix=\"spring.webflux.multipart\") public class ReactiveMultipartProperties extends Object; // Configuration properties for configuring multipart support in Spring Webflux.\n@AutoConfigureOrder(-2147483648) @AutoConfiguration @ConditionalOnClass(org.springframework.http.ReactiveHttpInputMessage.class) @ConditionalOnWebApplication(type=REACTIVE) @EnableConfigurationProperties(ServerProperties.class) @Import({BeanPostProcessorsRegistrar.class,org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration.EmbeddedTomcat.class,org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration.EmbeddedJetty.class,org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration.EmbeddedUndertow.class,org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration.EmbeddedNetty.class}) public class ReactiveWebServerFactoryAutoConfiguration extends Object; // Auto-configuration for a reactive web server.\n", "des": "Auto-configuration for reactive web servers and Spring WebFlux."}
{"index": 1995, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package error;\n\npublic abstract class AbstractErrorWebExceptionHandler extends Object implements org.springframework.boot.web.reactive.error.ErrorWebExceptionHandler, org.springframework.beans.factory.InitializingBean; // Abstract base class for ErrorWebExceptionHandler implementations.\npublic class DefaultErrorWebExceptionHandler extends AbstractErrorWebExceptionHandler; // Basic global WebExceptionHandler, rendering ErrorAttributes.\n@AutoConfiguration(before=WebFluxAutoConfiguration.class) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnClass(org.springframework.web.reactive.config.WebFluxConfigurer.class) @EnableConfigurationProperties({ServerProperties.class,WebProperties.class}) public class ErrorWebFluxAutoConfiguration extends Object; // Auto-configuration to render errors through a WebFlux WebExceptionHandler.\n", "des": "Auto-configuration for Spring WebFlux error handling."}
{"index": 1996, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package client;\n\n@AutoConfiguration @ConditionalOnClass(org.springframework.web.reactive.function.client.WebClient.class) @AutoConfigureAfter(SslAutoConfiguration.class) @Import({org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorFactoryConfiguration.ReactorNetty.class,org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorFactoryConfiguration.JettyClient.class,org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorFactoryConfiguration.HttpClient5.class,org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorFactoryConfiguration.JdkClient.class}) public class ClientHttpConnectorAutoConfiguration extends Object; // Auto-configuration for ClientHttpConnector.\n@FunctionalInterface public interface ReactorNettyHttpClientMapper; // Mapper that allows for custom modification of a HttpClient before it is used as the basis for a ReactorClientHttpConnector.\n@AutoConfiguration(after={CodecsAutoConfiguration.class,ClientHttpConnectorAutoConfiguration.class}) @ConditionalOnClass(org.springframework.web.reactive.function.client.WebClient.class) public class WebClientAutoConfiguration extends Object; // Auto-configuration for WebClient.\n@Configuration(proxyBeanMethods=false) @ConditionalOnBean(org.springframework.boot.web.codec.CodecCustomizer.class) protected static class WebClientAutoConfiguration.WebClientCodecsConfiguration extends Object;\npublic class WebClientCodecCustomizer extends Object implements org.springframework.boot.web.reactive.function.client.WebClientCustomizer; // WebClientCustomizer that configures codecs for the HTTP client.\npublic interface WebClientSsl; // Interface that can be used to apply SSL configuration to a WebClient.Builder.\n", "des": "Auto-configuration for Spring Framework's functional web client."}
{"index": 1997, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package servlet;\n\npackage servlet.error; // Auto-configuration for Spring MVC error handling.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @ConditionalOnMissingBean(parameterizedContainer=org.springframework.boot.web.servlet.FilterRegistrationBean.class) public @interface ConditionalOnMissingFilterBean; // @Conditional that only matches when no Filter beans of the specified type are contained in the BeanFactory.\npublic class DefaultJerseyApplicationPath extends Object implements JerseyApplicationPath; // Default implementation of JerseyApplicationPath that derives the path from JerseyProperties or the @ApplicationPath annotation.\n@AutoConfigureOrder(-2147483648) @AutoConfiguration(after=ServletWebServerFactoryAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.springframework.web.servlet.DispatcherServlet.class) public class DispatcherServletAutoConfiguration extends Object; // Auto-configuration for the Spring DispatcherServlet.\n@Configuration(proxyBeanMethods=false) @Conditional(org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration.DefaultDispatcherServletCondition.class) @ConditionalOnClass(jakarta.servlet.ServletRegistration.class) @EnableConfigurationProperties(WebMvcProperties.class) protected static class DispatcherServletAutoConfiguration.DispatcherServletConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @Conditional(org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration.DispatcherServletRegistrationCondition.class) @ConditionalOnClass(jakarta.servlet.ServletRegistration.class) @EnableConfigurationProperties(WebMvcProperties.class) @Import(DispatcherServletConfiguration.class) protected static class DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration extends Object;\n@FunctionalInterface public interface DispatcherServletPath; // Interface that can be used by auto-configurations that need path details for the default DispatcherServlet.\npublic class DispatcherServletRegistrationBean extends org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.web.servlet.DispatcherServlet> implements DispatcherServletPath; // ServletRegistrationBean for the auto-configured DispatcherServlet.\n", "des": "Auto-configuration for servlet web servers and Spring MVC."}
{"index": 1998, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package error;\n\npublic abstract class AbstractErrorController extends Object implements org.springframework.boot.web.servlet.error.ErrorController; // Abstract base class for error @Controller implementations.\n@Controller @RequestMapping(\"${server.error.path:${error.path:/error}}\") public class BasicErrorController extends AbstractErrorController; // Basic global error @Controller, rendering ErrorAttributes.\npublic class DefaultErrorViewResolver extends Object implements ErrorViewResolver, org.springframework.core.Ordered; // Default ErrorViewResolver implementation that attempts to resolve error views using well known conventions.\n@AutoConfiguration(before=WebMvcAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({jakarta.servlet.Servlet.class,org.springframework.web.servlet.DispatcherServlet.class}) @EnableConfigurationProperties({ServerProperties.class,WebMvcProperties.class}) public class ErrorMvcAutoConfiguration extends Object; // Auto-configuration to render errors through an MVC error controller.\n@Configuration(proxyBeanMethods=false) @ConditionalOnProperty(prefix=\"server.error.whitelabel\", name=\"enabled\", matchIfMissing=true) @Conditional(org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration.ErrorTemplateMissingCondition.class) protected static class ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration extends Object;\n@FunctionalInterface public interface ErrorViewResolver; // Interface that can be implemented by beans that resolve error views.\n", "des": "Auto-configuration for Spring MVC error handling."}
{"index": 1999, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package webservices;\n\npackage webservices.client; // Auto-configuration for Spring Web Services Clients.\n@AutoConfiguration(after=ServletWebServerFactoryAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.springframework.ws.transport.http.MessageDispatcherServlet.class) @ConditionalOnMissingBean(org.springframework.ws.config.annotation.WsConfigurationSupport.class) @EnableConfigurationProperties(WebServicesProperties.class) public class WebServicesAutoConfiguration extends Object; // Auto-configuration for Spring Web Services.\n@Configuration(proxyBeanMethods=false) @EnableWs protected static class WebServicesAutoConfiguration.WsConfiguration extends Object;\n@ConfigurationProperties(prefix=\"spring.webservices\") public class WebServicesProperties extends Object; // @ConfigurationProperties for Spring Web Services.\npublic static class WebServicesProperties.Servlet extends Object;\n", "des": "Auto-configuration for Spring Web Services."}
{"index": 2000, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package client;\n\n@AutoConfiguration @ConditionalOnClass({org.springframework.ws.client.core.WebServiceTemplate.class,org.springframework.oxm.Unmarshaller.class,org.springframework.oxm.Marshaller.class}) public class WebServiceTemplateAutoConfiguration extends Object; // Auto-configuration for WebServiceTemplate.\n", "des": "Auto-configuration for Spring Web Services Clients."}
{"index": 2001, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package reactive;\n\npublic class JettyWebSocketReactiveWebServerCustomizer extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory>, org.springframework.core.Ordered; // WebSocket customizer for JettyReactiveWebServerFactory.\npublic class TomcatWebSocketReactiveWebServerCustomizer extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory>, org.springframework.core.Ordered; // WebSocket customizer for TomcatReactiveWebServerFactory.\n@AutoConfiguration(before=ReactiveWebServerFactoryAutoConfiguration.class) @ConditionalOnClass({jakarta.servlet.Servlet.class,jakarta.websocket.server.ServerContainer.class}) @ConditionalOnWebApplication(type=REACTIVE) public class WebSocketReactiveAutoConfiguration extends Object; // Auto-configuration for WebSocket reactive server in Tomcat, Jetty or Undertow.\n", "des": "Auto-configuration for WebSocket support in reactive web servers."}
{"index": 2002, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package servlet;\n\npublic class JettyWebSocketServletWebServerCustomizer extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactory>, org.springframework.core.Ordered; // WebSocket customizer for JettyServletWebServerFactory.\npublic class TomcatWebSocketServletWebServerCustomizer extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory>, org.springframework.core.Ordered; // WebSocket customizer for TomcatServletWebServerFactory.\npublic class UndertowWebSocketServletWebServerCustomizer extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory>, org.springframework.core.Ordered; // WebSocket customizer for UndertowServletWebServerFactory.\n@AutoConfiguration(after=JacksonAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer.class) public class WebSocketMessagingAutoConfiguration extends Object; // Auto-configuration for WebSocket-based messaging.\n@AutoConfiguration(before=ServletWebServerFactoryAutoConfiguration.class) @ConditionalOnClass({jakarta.servlet.Servlet.class,jakarta.websocket.server.ServerContainer.class}) @ConditionalOnWebApplication(type=SERVLET) public class WebSocketServletAutoConfiguration extends Object; // Auto configuration for WebSocket servlet server in embedded Tomcat, Jetty or Undertow.\n", "des": "Auto-configuration for WebSocket support in servlet web servers."}
{"index": 2003, "repo": "spring-integration-ws-6.1.2", "code": "package ws;\n\npackage ws.config; // Contains parser classes for the Web Services namespace support.\npackage ws.dsl; // Contains classes for DSL support.\npublic abstract class AbstractWebServiceInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport implements org.springframework.ws.server.endpoint.MessageEndpoint, org.springframework.integration.context.OrderlyShutdownCapable;\npublic abstract class AbstractWebServiceOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler; // Base class for outbound Web Service-invoking Messaging Gateways.\npublic class DefaultSoapHeaderMapper extends org.springframework.integration.mapping.AbstractHeaderMapper<org.springframework.ws.soap.SoapMessage> implements SoapHeaderMapper; // A HeaderMapper implementation for mapping to and from a SoapHeader.\npublic class MarshallingWebServiceInboundGateway extends AbstractWebServiceInboundGateway;\npublic class MarshallingWebServiceOutboundGateway extends AbstractWebServiceOutboundGateway; // An outbound Messaging Gateway for invoking Web Services that also supports marshalling and unmarshalling of the request and response messages.\n@SoapFault(faultCode=RECEIVER) public class ServiceUnavailableException extends org.springframework.ws.WebServiceException; // The WebServiceException extension to indicate that the server endpoint is temporary unavailable.\npublic class SimpleWebServiceInboundGateway extends AbstractWebServiceInboundGateway;\npublic class SimpleWebServiceOutboundGateway extends AbstractWebServiceOutboundGateway; // An outbound Messaging Gateway for invoking a Web Service.\npublic interface SoapHeaderMapper extends org.springframework.integration.mapping.RequestReplyHeaderMapper<org.springframework.ws.soap.SoapMessage>; // A convenience interface that extends RequestReplyHeaderMapper, parameterized with SoapHeader.\npublic abstract class WebServiceHeaders extends Object; // Pre-defined header names to be used when storing or retrieving Web Service properties to/from integration Message Headers.\n", "des": "Provides several inbound and outbound Web Service components."}
{"index": 2004, "repo": "spring-integration-ws-6.1.2", "code": "package config;\n\npublic class WebServiceHeaderEnricherParser extends org.springframework.integration.config.xml.HeaderEnricherParserSupport;\npublic class WebServiceInboundGatewayParser extends org.springframework.integration.config.xml.AbstractInboundGatewayParser;\npublic class WebServiceOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractOutboundGatewayParser; // Parser for the <outbound-gateway/> element in the 'ws' namespace.\npublic class WsIntegrationConfigurationInitializer extends Object implements org.springframework.integration.config.IntegrationConfigurationInitializer; // The IntegrationConfigurationInitializer implementation for the WebService module.\npublic class WsNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler;\n", "des": "Contains parser classes for the Web Services namespace support."}
{"index": 2005, "repo": "spring-integration-ws-6.1.2", "code": "package dsl;\n\npublic abstract class BaseWsInboundGatewaySpec<S extends BaseWsInboundGatewaySpec<S,E>,E extends AbstractWebServiceInboundGateway> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,E>; // Base MessagingGatewaySpec for web services.\npublic abstract class BaseWsOutboundGatewaySpec<S extends BaseWsOutboundGatewaySpec<S,E>,E extends AbstractWebServiceOutboundGateway> extends org.springframework.integration.dsl.MessageHandlerSpec<S,E>; // The base MessageHandlerSpec for AbstractWebServiceOutboundGateways.\npublic class MarshallingWsInboundGatewaySpec extends BaseWsInboundGatewaySpec<MarshallingWsInboundGatewaySpec,MarshallingWebServiceInboundGateway>; // The spec for a MarshallingWebServiceInboundGateway.\npublic class MarshallingWsOutboundGatewaySpec extends BaseWsOutboundGatewaySpec<MarshallingWsOutboundGatewaySpec,MarshallingWebServiceOutboundGateway>; // The spec for a MarshallingWebServiceOutboundGateway.\npublic static class MarshallingWsOutboundGatewaySpec.MarshallingWsOutboundGatewayNoTemplateSpec extends BaseWsOutboundGatewaySpec<MarshallingWsOutboundGatewaySpec.MarshallingWsOutboundGatewayNoTemplateSpec,MarshallingWebServiceOutboundGateway>; // Spec for a MarshallingWebServiceOutboundGateway where an external WebServiceTemplate is not provided.\npublic class SimpleWsInboundGatewaySpec extends BaseWsInboundGatewaySpec<SimpleWsInboundGatewaySpec,SimpleWebServiceInboundGateway>; // The spec for a SimpleWebServiceInboundGateway.\npublic class SimpleWsOutboundGatewaySpec extends BaseWsOutboundGatewaySpec<SimpleWsOutboundGatewaySpec,SimpleWebServiceOutboundGateway>; // The spec for a SimpleWebServiceOutboundGateway.\npublic static class SimpleWsOutboundGatewaySpec.SimpleWsOutboundGatewayNoTemplateSpec extends BaseWsOutboundGatewaySpec<SimpleWsOutboundGatewaySpec.SimpleWsOutboundGatewayNoTemplateSpec,SimpleWebServiceOutboundGateway>; // Spec for a SimpleWebServiceOutboundGateway where an external WebServiceTemplate is not provided.\npublic final class Ws extends Object; // Factory class for web service components.\n", "des": "Contains classes for DSL support."}
{"index": 2006, "repo": "spring-boot-devtools-3.1.1", "code": "package devtools;\n\npackage devtools.autoconfigure; // Auto-configuration for spring-boot-devtools.\npackage devtools.classpath; // Support for classpath monitoring.\npackage devtools.env; // DevTools classes relating to Spring Framework's Environment.\npackage devtools.filewatch; // Class to watch the local filesystem for changes.\npackage devtools.livereload; // Support for the livereload protocol.\npackage devtools.logger; // Devtools specific logging concerns.\npackage devtools.restart; // Application restart support.\npackage devtools.settings; // Classes for loading DevTools settings.\npackage devtools.system; // Devtools system support classes.\npublic final class RemoteSpringApplication extends Object; // Application that can be used to establish a link to remotely running Spring Boot code.\n", "des": "Spring Boot developer tools."}
{"index": 2007, "repo": "spring-boot-devtools-3.1.1", "code": "package autoconfigure;\n\n@Conditional({OnEnabledDevToolsCondition.class,org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.DevToolsDataSourceCondition.class}) @AutoConfiguration(after=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.class) @Import(org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.DatabaseShutdownExecutorEntityManagerFactoryDependsOnPostProcessor.class) public class DevToolsDataSourceAutoConfiguration extends Object; // Auto-configuration for DevTools-specific DataSource configuration.\n@ConfigurationProperties(prefix=\"spring.devtools\") public class DevToolsProperties extends Object; // Configuration properties for developer tools.\npublic static class DevToolsProperties.Livereload extends Object; // LiveReload properties.\npublic static class DevToolsProperties.Restart extends Object; // Restart properties.\n@ConditionalOnClass(io.r2dbc.spi.ConnectionFactory.class) @Conditional({OnEnabledDevToolsCondition.class,org.springframework.boot.devtools.autoconfigure.DevToolsR2dbcAutoConfiguration.DevToolsConnectionFactoryCondition.class}) @AutoConfiguration(after=org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration.class) public class DevToolsR2dbcAutoConfiguration extends Object; // Auto-configuration for DevTools-specific R2DBC configuration.\n@AutoConfiguration @ConditionalOnInitializedRestarter @EnableConfigurationProperties(DevToolsProperties.class) public class LocalDevToolsAutoConfiguration extends Object; // Auto-configuration for local development support.\npublic class OnEnabledDevToolsCondition extends org.springframework.boot.autoconfigure.condition.SpringBootCondition; // A condition that checks if DevTools should be enabled.\npublic class OptionalLiveReloadServer extends Object implements org.springframework.beans.factory.InitializingBean; // Manages an optional LiveReloadServer.\n", "des": "Auto-configuration for spring-boot-devtools."}
{"index": 2008, "repo": "spring-boot-devtools-3.1.1", "code": "package classpath;\n\npublic class ClassPathChangedEvent extends org.springframework.context.ApplicationEvent; // ApplicationEvent containing details of a classpath change.\npublic class ClassPathDirectories extends Object implements Iterable<File>; // Provides access to entries on the classpath that refer to directories.\npublic class ClassPathFileSystemWatcher extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, org.springframework.context.ApplicationContextAware; // Encapsulates a FileSystemWatcher to watch the local classpath directories for changes.\n@FunctionalInterface public interface ClassPathRestartStrategy; // Strategy interface used to determine when a changed classpath file should trigger a full application restart.\npublic class PatternClassPathRestartStrategy extends Object implements ClassPathRestartStrategy; // Ant style pattern based ClassPathRestartStrategy.\n", "des": "Support for classpath monitoring."}
{"index": 2009, "repo": "spring-boot-devtools-3.1.1", "code": "package env;\n\npublic class DevToolsHomePropertiesPostProcessor extends Object implements org.springframework.boot.env.EnvironmentPostProcessor; // EnvironmentPostProcessor to add devtools properties from the user's home directory.\n@Order(2147483647) public class DevToolsPropertyDefaultsPostProcessor extends Object implements org.springframework.boot.env.EnvironmentPostProcessor; // EnvironmentPostProcessor to add properties that make sense when working at development time.\n", "des": "DevTools classes relating to Spring Framework's Environment."}
{"index": 2010, "repo": "spring-boot-devtools-3.1.1", "code": "package filewatch;\n\npublic final class ChangedFile extends Object; // A single file that has changed.\npublic static enum ChangedFile.Type extends Enum<ChangedFile.Type>; // Change types.\npublic final class ChangedFiles extends Object implements Iterable<ChangedFile>; // A collections of files from a specific source directory that have changed.\n@FunctionalInterface public interface FileChangeListener; // Callback interface when file changes are detected.\npublic class FileSystemWatcher extends Object; // Watches specific directories for file changes.\n@FunctionalInterface public interface FileSystemWatcherFactory; // Factory used to create new FileSystemWatcher instances.\npublic interface SnapshotStateRepository; // Repository used by FileSystemWatcher to save file/directory snapshots across restarts.\n", "des": "Class to watch the local filesystem for changes."}
{"index": 2011, "repo": "spring-boot-devtools-3.1.1", "code": "package livereload;\n\npublic class LiveReloadServer extends Object; // A livereload server.\n", "des": "Support for the livereload protocol."}
{"index": 2012, "repo": "spring-boot-devtools-3.1.1", "code": "package logger;\n\npublic final class DevToolsLogFactory extends Object; // Devtools deferred logging support.\n", "des": "Devtools specific logging concerns."}
{"index": 2013, "repo": "spring-boot-devtools-3.1.1", "code": "package client;\n\npublic class ClassPathChangeUploader extends Object implements org.springframework.context.ApplicationListener<ClassPathChangedEvent>; // Listens and pushes any classpath updates to a remote endpoint.\npublic class HttpHeaderInterceptor extends Object implements org.springframework.http.client.ClientHttpRequestInterceptor; // ClientHttpRequestInterceptor to populate arbitrary HTTP headers with a value.\n@Configuration(proxyBeanMethods=false) @EnableConfigurationProperties(DevToolsProperties.class) public class RemoteClientConfiguration extends Object implements org.springframework.beans.factory.InitializingBean; // Configuration used to connect to remote Spring Boot applications.\n", "des": "Client support for a remotely running Spring Boot application."}
{"index": 2014, "repo": "spring-boot-devtools-3.1.1", "code": "package server;\n\n@FunctionalInterface public interface AccessManager; // Provides access control for a Dispatcher.\npublic class Dispatcher extends Object; // Dispatcher used to route incoming remote server requests to a Handler.\npublic class DispatcherFilter extends Object implements jakarta.servlet.Filter; // Servlet filter providing integration with the remote server Dispatcher.\n@FunctionalInterface public interface Handler; // A single handler that is able to process an incoming remote server request.\n@FunctionalInterface public interface HandlerMapper; // Interface to provide a mapping between a ServerHttpRequest and a Handler.\npublic class HttpHeaderAccessManager extends Object implements AccessManager; // AccessManager that checks for the presence of an HTTP header secret.\npublic class HttpStatusHandler extends Object implements Handler; // Handler that responds with a specific HttpStatus.\npublic class UrlHandlerMapper extends Object implements HandlerMapper; // HandlerMapper implementation that maps incoming URLs.\n", "des": "Server support for a remotely running Spring Boot application."}
{"index": 2015, "repo": "spring-boot-devtools-3.1.1", "code": "package restart;\n\npackage restart.classloader; // Classloaders used for reload support.\npackage restart.server; // Remote restart server.\npublic abstract class AgentReloader extends Object; // Utility to determine if a Java agent based reloader (e.g.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.devtools.restart.OnInitializedRestarterCondition.class) public @interface ConditionalOnInitializedRestarter; // @Conditional that only matches when the RestartInitializer has been applied with non null URLs.\npublic class DefaultRestartInitializer extends Object implements RestartInitializer; // Default RestartInitializer that only enable initial restart when running a standard \"main\" method.\n@FunctionalInterface public interface FailureHandler; // Strategy used to handle launch failures.\npublic static enum FailureHandler.Outcome extends Enum<FailureHandler.Outcome>; // Various outcomes for the handler.\npublic class RestartApplicationListener extends Object implements org.springframework.context.ApplicationListener<org.springframework.context.ApplicationEvent>, org.springframework.core.Ordered; // ApplicationListener to initialize the Restarter.\npublic class Restarter extends Object; // Allows a running application to be restarted with an updated classpath.\n@FunctionalInterface public interface RestartInitializer; // Strategy interface used to initialize a Restarter.\n@FunctionalInterface public interface RestartListener; // Listener that is notified of application restarts.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Scope(\"restart\") public @interface RestartScope; // Restart @Scope Annotation used to indicate that a bean should remain between restarts.\npublic class RestartScopeInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>; // Support for a 'restart' Scope that allows beans to remain between restarts.\n", "des": "Application restart support."}
{"index": 2016, "repo": "spring-boot-devtools-3.1.1", "code": "package classloader;\n\npublic class ClassLoaderFile extends Object implements Serializable; // A single file that may be served from a ClassLoader.\npublic static enum ClassLoaderFile.Kind extends Enum<ClassLoaderFile.Kind>; // The kinds of class load files.\n@FunctionalInterface public interface ClassLoaderFileRepository; // A container for files that may be served from a ClassLoader.\npublic class ClassLoaderFiles extends Object implements ClassLoaderFileRepository, Serializable; // ClassLoaderFileRepository that maintains a collection of ClassLoaderFile items grouped by source directories.\npublic static class ClassLoaderFiles.SourceDirectory extends Object implements Serializable; // An individual source directory that is being managed by the collection.\npublic class ClassLoaderFileURLStreamHandler extends URLStreamHandler; // URLStreamHandler for the contents of a ClassLoaderFile.\npublic class RestartClassLoader extends URLClassLoader implements org.springframework.core.SmartClassLoader; // Disposable ClassLoader used to support application restarting.\n", "des": "Classloaders used for reload support."}
{"index": 2017, "repo": "spring-boot-devtools-3.1.1", "code": "package server;\n\npublic class DefaultSourceDirectoryUrlFilter extends Object implements SourceDirectoryUrlFilter; // Default implementation of SourceDirectoryUrlFilter that attempts to match URLs using common naming conventions.\npublic class HttpRestartServer extends Object; // An HTTP server that can be used to upload updated ClassLoaderFiles and trigger restarts.\npublic class HttpRestartServerHandler extends Object implements Handler; // Adapts HttpRestartServer to a Handler.\npublic class RestartServer extends Object; // Server used to restart the current application with updated ClassLoaderFiles.\n@FunctionalInterface public interface SourceDirectoryUrlFilter; // Filter URLs based on a source directory name.\n", "des": "Remote restart server."}
{"index": 2018, "repo": "spring-boot-devtools-3.1.1", "code": "package settings;\n\npublic class DevToolsSettings extends Object; // DevTools settings loaded from /META-INF/spring-devtools.properties files.\n", "des": "Classes for loading DevTools settings."}
{"index": 2019, "repo": "spring-boot-devtools-3.1.1", "code": "package system;\n\npublic final class DevToolsEnablementDeducer extends Object; // Utility to deduce if DevTools should be enabled in the current context.\n", "des": "Devtools system support classes."}
{"index": 2020, "repo": "spring-boot-devtools-3.1.1", "code": "package client;\n\npublic class HttpTunnelConnection extends Object implements TunnelConnection; // TunnelConnection implementation that uses HTTP to transfer data.\npublic class TunnelClient extends Object implements org.springframework.beans.factory.SmartInitializingSingleton; // The client side component of a socket tunnel.\npublic interface TunnelClientListener; // Listener that can be used to receive TunnelClient events.\n@FunctionalInterface public interface TunnelConnection; // Interface used to manage socket tunnel connections.\n", "des": "Client side TCP tunnel support."}
{"index": 2021, "repo": "spring-boot-devtools-3.1.1", "code": "package payload;\n\npublic class HttpTunnelPayload extends Object; // Encapsulates a payload data sent over a HTTP tunnel.\npublic class HttpTunnelPayloadForwarder extends Object; // Utility class that forwards HttpTunnelPayload instances to a destination channel, respecting sequence order.\n", "des": "Classes to deal with payloads sent over an HTTP tunnel."}
{"index": 2022, "repo": "spring-boot-devtools-3.1.1", "code": "package server;\n\npublic class HttpTunnelServer extends Object; // A server that can be used to tunnel TCP traffic over HTTP.\nprotected static class HttpTunnelServer.HttpConnection extends Object; // Encapsulates an HTTP request/response pair.\npublic class HttpTunnelServerHandler extends Object implements Handler; // Adapts a HttpTunnelServer to a Handler.\n@FunctionalInterface public interface PortProvider; // Strategy interface to provide access to a port (which may change if an existing connection is closed).\npublic class SocketTargetServerConnection extends Object implements TargetServerConnection; // Socket based TargetServerConnection.\npublic class StaticPortProvider extends Object implements PortProvider; // PortProvider for a static port that won't change.\n@FunctionalInterface public interface TargetServerConnection; // Manages the connection to the ultimate tunnel target server.\n", "des": "Server side TCP tunnel support."}
{"index": 2023, "repo": "spring-messaging-6.0.11", "code": "package messaging;\n\npackage messaging.converter; // Provides support for message conversion.\npackage messaging.core; // Defines interfaces and implementation classes for messaging templates.\npackage messaging.handler; // Basic abstractions for working with message handler methods.\npackage messaging.rsocket; // Support for the RSocket protocol.\npackage messaging.simp; // Generic support for Simple Messaging Protocols including protocols such as STOMP.\npackage messaging.support; // Provides implementations of Message along with a MessageBuilder and MessageHeaderAccessor for building and working with messages and message headers, as well as various MessageChannel implementations and channel interceptor support.\npackage messaging.tcp; // Contains abstractions and implementation classes for establishing TCP connections via TcpOperations, handling messages via TcpConnectionHandler, as well as sending messages via TcpConnection.\npublic interface Message<T>; // A generic message representation with headers and body.\n@FunctionalInterface public interface MessageChannel; // Defines methods for sending messages.\npublic class MessageDeliveryException extends MessagingException; // Exception that indicates an error occurred during message delivery.\n@FunctionalInterface public interface MessageHandler; // Simple contract for handling a Message.\npublic class MessageHandlingException extends MessagingException; // Exception that indicates an error occurred during message handling.\npublic class MessageHeaders extends Object implements Map<String,Object>, Serializable; // The headers for a Message.\npublic class MessagingException extends org.springframework.core.NestedRuntimeException; // The base exception for any failures related to messaging.\npublic interface PollableChannel extends MessageChannel; // A MessageChannel from which messages may be actively received through polling.\n@FunctionalInterface public interface ReactiveMessageHandler; // Reactive contract for handling a Message.\npublic interface SubscribableChannel extends MessageChannel; // A MessageChannel that maintains a registry of subscribers and invokes them to handle messages sent through this channel.\n", "des": "Support for working with messaging APIs and protocols."}
{"index": 2024, "repo": "spring-messaging-6.0.11", "code": "package converter;\n\npublic abstract class AbstractJsonMessageConverter extends AbstractMessageConverter; // Common base class for plain JSON converters, e.g.\npublic abstract class AbstractMessageConverter extends Object implements SmartMessageConverter; // Abstract base class for SmartMessageConverter implementations including support for common properties and a partial implementation of the conversion methods, mainly to check if the converter supports the conversion based on the payload class and MIME type.\npublic class ByteArrayMessageConverter extends AbstractMessageConverter; // A MessageConverter that supports MIME type \"application/octet-stream\" with the payload converted to and from a byte[].\npublic class CompositeMessageConverter extends Object implements SmartMessageConverter; // A MessageConverter that delegates to a list of registered converters to be invoked until one of them returns a non-null result.\n@FunctionalInterface public interface ContentTypeResolver; // Resolve the content type for a message.\npublic class DefaultContentTypeResolver extends Object implements ContentTypeResolver; // A default ContentTypeResolver that checks the MessageHeaders.CONTENT_TYPE header or falls back to a default value.\npublic class GenericMessageConverter extends SimpleMessageConverter; // An extension of the SimpleMessageConverter that uses a ConversionService to convert the payload of the message to the requested type.\npublic class GsonMessageConverter extends AbstractJsonMessageConverter; // Implementation of MessageConverter that can read and write JSON using Google Gson.\npublic class JsonbMessageConverter extends AbstractJsonMessageConverter; // Implementation of MessageConverter that can read and write JSON using the JSON Binding API.\npublic class KotlinSerializationJsonMessageConverter extends AbstractJsonMessageConverter; // Implementation of MessageConverter that can read and write JSON using kotlinx.serialization.\npublic class MappingJackson2MessageConverter extends AbstractMessageConverter; // A Jackson 2 based MessageConverter implementation.\npublic class MarshallingMessageConverter extends AbstractMessageConverter; // Implementation of MessageConverter that can read and write XML using Spring's Marshaller and Unmarshaller abstractions.\npublic class MessageConversionException extends MessagingException; // An exception raised by MessageConverter implementations.\npublic interface MessageConverter; // A converter to turn the payload of a Message from serialized form to a typed Object and vice versa.\npublic class ProtobufJsonFormatMessageConverter extends ProtobufMessageConverter; // Subclass of ProtobufMessageConverter for use with the official \"com.google.protobuf:protobuf-java-util\" library for JSON support.\n", "des": "Provides support for message conversion."}
{"index": 2025, "repo": "spring-messaging-6.0.11", "code": "package core;\n\npublic abstract class AbstractDestinationResolvingMessagingTemplate<D> extends AbstractMessagingTemplate<D> implements DestinationResolvingMessageSendingOperations<D>, DestinationResolvingMessageReceivingOperations<D>, DestinationResolvingMessageRequestReplyOperations<D>; // An extension of AbstractMessagingTemplate that adds operations for sending messages to a resolvable destination name.\npublic abstract class AbstractMessageReceivingTemplate<D> extends AbstractMessageSendingTemplate<D> implements MessageReceivingOperations<D>; // An extension of AbstractMessageSendingTemplate that adds support for receive style operations as defined by MessageReceivingOperations.\npublic abstract class AbstractMessageSendingTemplate<D> extends Object implements MessageSendingOperations<D>; // Abstract base class for implementations of MessageSendingOperations.\npublic abstract class AbstractMessagingTemplate<D> extends AbstractMessageReceivingTemplate<D> implements MessageRequestReplyOperations<D>; // An extension of AbstractMessageReceivingTemplate that adds support for request-reply style operations as defined by MessageRequestReplyOperations.\npublic class BeanFactoryMessageChannelDestinationResolver extends Object implements DestinationResolver<MessageChannel>, org.springframework.beans.factory.BeanFactoryAware; // An implementation of DestinationResolver that interprets a destination name as the bean name of a MessageChannel and looks up the bean in the configured BeanFactory.\npublic class CachingDestinationResolverProxy<D> extends Object implements DestinationResolver<D>, org.springframework.beans.factory.InitializingBean; // DestinationResolver implementation that proxies a target DestinationResolver, caching its CachingDestinationResolverProxy.resolveDestination(java.lang.String) results.\npublic class DestinationResolutionException extends MessagingException; // Thrown by a DestinationResolver when it cannot resolve a destination.\n@FunctionalInterface public interface DestinationResolver<D>; // Strategy for resolving a String destination name to an actual destination of type <D>.\npublic interface DestinationResolvingMessageReceivingOperations<D> extends MessageReceivingOperations<D>; // Extends MessageReceivingOperations and adds operations for receiving messages from a destination specified as a (resolvable) String name.\npublic interface DestinationResolvingMessageRequestReplyOperations<D> extends MessageRequestReplyOperations<D>; // Extends MessageRequestReplyOperations and adds operations for sending and receiving messages to and from a destination specified as a (resolvable) String name.\n", "des": "Defines interfaces and implementation classes for messaging templates."}
{"index": 2026, "repo": "spring-messaging-6.0.11", "code": "package handler;\n\npackage handler.annotation; // Annotations and support classes for handling messages.\npackage handler.invocation; // Common infrastructure for invoking message handler methods.\npublic abstract class AbstractMessageCondition<T extends AbstractMessageCondition<T>> extends Object implements MessageCondition<T>; // Base class for MessageCondition's that pre-declares abstract methods AbstractMessageCondition.getContent() and AbstractMessageCondition.getToStringInfix() in order to provide implementations of AbstractMessageCondition.equals(Object), AbstractMessageCondition.hashCode(), and AbstractMessageCondition.toString().\npublic class CompositeMessageCondition extends Object implements MessageCondition<CompositeMessageCondition>; // Composite MessageCondition that delegates to other message conditions.\npublic class DestinationPatternsMessageCondition extends AbstractMessageCondition<DestinationPatternsMessageCondition>; // MessageCondition to match the destination header of a Message against one or more patterns through a RouteMatcher.\npublic class HandlerMethod extends Object; // Encapsulates information about a handler method consisting of a method and a bean.\npublic interface MessageCondition<T>; // Contract for mapping conditions to messages.\npublic interface MessagingAdviceBean extends org.springframework.core.Ordered; // Represents a Spring-managed bean with cross-cutting functionality to be applied to one or more Spring beans with annotation-based message handling methods.\n", "des": "Basic abstractions for working with message handler methods."}
{"index": 2027, "repo": "spring-messaging-6.0.11", "code": "package annotation;\n\npackage annotation.reactive; // Support classes for working with annotated message-handling methods with non-blocking, reactive contracts.\npackage annotation.support; // Support classes for working with annotated message-handling methods.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface DestinationVariable; // Annotation that indicates a method parameter should be bound to a template variable in a destination template string.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface Header; // Annotation which indicates that a method parameter should be bound to a message header.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface Headers; // Annotation which indicates that a method parameter should be bound to the headers of a message.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Reflective(MessageMappingReflectiveProcessor.class) public @interface MessageExceptionHandler; // Annotation for handling exceptions thrown from message-handling methods within a specific handler class.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Reflective(MessageMappingReflectiveProcessor.class) public @interface MessageMapping; // Annotation for mapping a Message onto a message-handling method by matching the declared patterns to a destination extracted from the message.\npublic class MessageMappingReflectiveProcessor extends Object implements org.springframework.aot.hint.annotation.ReflectiveProcessor; // ReflectiveProcessor implementation for types annotated with @MessageMapping, @SubscribeMapping and @MessageExceptionHandler.\n@Target({PARAMETER,METHOD}) @Retention(RUNTIME) @Documented public @interface Payload; // Annotation that binds a method parameter to the payload of a message.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface SendTo; // Annotation that indicates a method's return value should be converted to a Message if necessary and sent to the specified destination.\npublic interface ValueConstants; // Common annotation value constants.\n", "des": "Annotations and support classes for handling messages."}
{"index": 2028, "repo": "spring-messaging-6.0.11", "code": "package reactive;\n\npublic abstract class AbstractNamedValueMethodArgumentResolver extends Object implements SyncHandlerMethodArgumentResolver; // Abstract base class to resolve method arguments from a named value, e.g.\nprotected static class AbstractNamedValueMethodArgumentResolver.NamedValueInfo extends Object; // Represents a named value declaration.\npublic class ContinuationHandlerMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // No-op resolver for method arguments of type Continuation.\npublic class DestinationVariableMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver; // Resolve for @DestinationVariable method parameters.\npublic class HeaderMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver; // Resolver for @Header arguments.\npublic class HeadersMethodArgumentResolver extends Object implements SyncHandlerMethodArgumentResolver; // Argument resolver for headers.\npublic class MessageMappingMessageHandler extends AbstractMethodMessageHandler<CompositeMessageCondition> implements org.springframework.context.EmbeddedValueResolverAware; // Extension of AbstractMethodMessageHandler for reactive, non-blocking handling of messages via @MessageMapping methods.\npublic class PayloadMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // A resolver to extract and decode the payload of a message using a Decoder, where the payload is expected to be a Publisher of DataBuffer.\n", "des": "Support classes for working with annotated message-handling methods with non-blocking, reactive contracts."}
{"index": 2029, "repo": "spring-messaging-6.0.11", "code": "package support;\n\npublic abstract class AbstractNamedValueMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Abstract base class to resolve method arguments from a named value, e.g.\nprotected static class AbstractNamedValueMethodArgumentResolver.NamedValueInfo extends Object; // Represents a named value declaration.\npublic class AnnotationExceptionHandlerMethodResolver extends AbstractExceptionHandlerMethodResolver; // A subclass of AbstractExceptionHandlerMethodResolver that looks for MessageExceptionHandler-annotated methods in a given class.\npublic class DefaultMessageHandlerMethodFactory extends Object implements MessageHandlerMethodFactory, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // The default MessageHandlerMethodFactory implementation creating an InvocableHandlerMethod with the necessary HandlerMethodArgumentResolver instances to detect and process most of the use cases defined by MessageMapping.\npublic class DestinationVariableMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver; // Resolve for @DestinationVariable method parameters.\npublic class HeaderMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver; // Resolver for @Header arguments.\npublic class HeadersMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Argument resolver for headers.\npublic interface MessageHandlerMethodFactory; // A factory for InvocableHandlerMethod that is suitable to process an incoming Message\npublic class MessageMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // HandlerMethodArgumentResolver for Message method arguments.\npublic class MethodArgumentNotValidException extends MethodArgumentResolutionException; // Exception to be thrown when a method argument fails validation perhaps as a result of @Valid style validation, or perhaps because it is required.\npublic class MethodArgumentTypeMismatchException extends MethodArgumentResolutionException; // Exception that indicates that a method argument has not the expected type.\npublic class PayloadMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // A resolver to extract and convert the payload of a message using a MessageConverter.\n", "des": "Support classes for working with annotated message-handling methods."}
{"index": 2030, "repo": "spring-messaging-6.0.11", "code": "package invocation;\n\npackage invocation.reactive; // Common infrastructure for invoking message handler methods with non-blocking, and reactive contracts.\npublic abstract class AbstractAsyncReturnValueHandler extends Object implements AsyncHandlerMethodReturnValueHandler; // Convenient base class for AsyncHandlerMethodReturnValueHandler implementations that support only asynchronous (Future-like) return values and merely serve as adapters of such types to Spring's ListenableFuture.\npublic abstract class AbstractExceptionHandlerMethodResolver extends Object; // Cache exception handling method mappings and provide options to look up a method that should handle an exception.\npublic abstract class AbstractMethodMessageHandler<T> extends Object implements MessageHandler, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // Abstract base class for HandlerMethod-based message handling.\npublic interface AsyncHandlerMethodReturnValueHandler extends HandlerMethodReturnValueHandler; // An extension of HandlerMethodReturnValueHandler for handling async, Future-like return value types that support success and error callbacks.\npublic class CompletableFutureReturnValueHandler extends AbstractAsyncReturnValueHandler; // Support for CompletableFuture (and as of 4.3.7 also CompletionStage) as a return value type.\npublic interface HandlerMethodArgumentResolver; // Strategy interface for resolving method parameters into argument values in the context of a given Message.\npublic class HandlerMethodArgumentResolverComposite extends Object implements HandlerMethodArgumentResolver; // Resolves method parameters by delegating to a list of registered HandlerMethodArgumentResolvers.\npublic interface HandlerMethodReturnValueHandler; // Strategy interface to handle the value returned from the invocation of a method handling a Message.\npublic class HandlerMethodReturnValueHandlerComposite extends Object implements AsyncHandlerMethodReturnValueHandler; // A HandlerMethodReturnValueHandler that wraps and delegates to others.\npublic class InvocableHandlerMethod extends HandlerMethod; // Extension of HandlerMethod that invokes the underlying method with argument values resolved from the current HTTP request through a list of HandlerMethodArgumentResolver.\n@Deprecated(since=\"6.0\") public class ListenableFutureReturnValueHandler extends AbstractAsyncReturnValueHandler;\npublic class MethodArgumentResolutionException extends MessagingException; // Common exception resulting from the invocation of HandlerMethodArgumentResolver.\npublic class ReactiveReturnValueHandler extends AbstractAsyncReturnValueHandler; // Support for single-value reactive types (like Mono or Single) as a return value type.\n", "des": "Common infrastructure for invoking message handler methods."}
{"index": 2031, "repo": "spring-messaging-6.0.11", "code": "package reactive;\n\npublic abstract class AbstractEncoderMethodReturnValueHandler extends Object implements HandlerMethodReturnValueHandler; // Base class for a return value handler that encodes return values to Flux<DataBuffer> through the configured Encoders.\npublic abstract class AbstractMethodMessageHandler<T> extends Object implements ReactiveMessageHandler, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.BeanNameAware; // Abstract base class for reactive HandlerMethod-based message handling.\npublic class ArgumentResolverConfigurer extends Object; // Assist with configuration for handler method argument resolvers.\npublic interface HandlerMethodArgumentResolver; // Strategy interface for resolving method parameters into argument values in the context of a given Message.\npublic class HandlerMethodArgumentResolverComposite extends Object implements HandlerMethodArgumentResolver; // Resolves method parameters by delegating to a list of registered HandlerMethodArgumentResolvers.\npublic interface HandlerMethodReturnValueHandler; // Handle the return value from the invocation of an annotated Message handling method.\npublic class HandlerMethodReturnValueHandlerComposite extends Object implements HandlerMethodReturnValueHandler; // A HandlerMethodReturnValueHandler that wraps and delegates to others.\npublic class InvocableHandlerMethod extends HandlerMethod; // Extension of HandlerMethod that invokes the underlying method with argument values resolved from the current HTTP request through a list of HandlerMethodArgumentResolver.\npublic class ReturnValueHandlerConfigurer extends Object; // Assist with configuration for handler method return value handlers.\npublic interface SyncHandlerMethodArgumentResolver extends HandlerMethodArgumentResolver; // An extension of HandlerMethodArgumentResolver for implementations that are synchronous in nature and do not block to resolve values.\n", "des": "Common infrastructure for invoking message handler methods with non-blocking, and reactive contracts."}
{"index": 2032, "repo": "spring-messaging-6.0.11", "code": "package rsocket;\n\npackage rsocket.annotation; // Annotations and support classes for handling RSocket streams.\npackage rsocket.service; // Annotations to declare an RSocket service contract with request methods along with a proxy factory backed by an RSocketRequester.\npublic class DefaultMetadataExtractor extends Object implements MetadataExtractor, MetadataExtractorRegistry; // Default MetadataExtractor implementation that relies on Decoders to deserialize the content of metadata entries.\npublic interface MetadataExtractor; // Strategy to extract a map of value(s) from Payload metadata, which could be composite metadata with multiple entries.\npublic interface MetadataExtractorRegistry; // Stores registrations of extractors for metadata entries.\npublic abstract class PayloadUtils extends Object; // Static utility methods to create Payload from DataBuffers and vice versa.\n@FunctionalInterface public interface RSocketConnectorConfigurer; // Strategy to apply configuration to an RSocketConnector.\npublic interface RSocketRequester extends reactor.core.Disposable; // A thin wrapper around a sending RSocket with a fluent API accepting and returning higher level Objects for input and for output, along with methods to prepare routing and other metadata.\npublic static interface RSocketRequester.Builder; // Builder to create a requester by connecting to a server.\npublic static interface RSocketRequester.MetadataSpec<S extends RSocketRequester.MetadataSpec<S>>; // Spec for providing additional composite metadata entries.\npublic static interface RSocketRequester.RequestSpec extends RSocketRequester.MetadataSpec<RSocketRequester.RequestSpec>, RSocketRequester.RetrieveSpec; // Spec to declare the input for an RSocket request.\npublic static interface RSocketRequester.RetrieveSpec; // Spec to declare the expected output for an RSocket request.\npublic interface RSocketStrategies; // Access to strategies for use by RSocket requester and responder components.\npublic static interface RSocketStrategies.Builder; // The builder options for creating RSocketStrategies.\n", "des": "Support for the RSocket protocol."}
{"index": 2033, "repo": "spring-messaging-6.0.11", "code": "package annotation;\n\npackage annotation.support; // Support classes for working with annotated RSocket stream handling methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ConnectMapping; // Annotation to map the initial ConnectionSetupPayload and subsequent metadata pushes onto a handler method.\n", "des": "Annotations and support classes for handling RSocket streams."}
{"index": 2034, "repo": "spring-messaging-6.0.11", "code": "package support;\n\npublic class RSocketFrameTypeMessageCondition extends AbstractMessageCondition<RSocketFrameTypeMessageCondition>; // A condition to assist with mapping onto handler methods based on the RSocket frame type.\npublic class RSocketMessageHandler extends MessageMappingMessageHandler; // Extension of MessageMappingMessageHandler for handling RSocket requests with @ConnectMapping and @MessageMapping methods.\npublic class RSocketPayloadReturnValueHandler extends AbstractEncoderMethodReturnValueHandler; // Extension of AbstractEncoderMethodReturnValueHandler that handles encoded content by wrapping data buffers as RSocket payloads and by passing those through the RSocketPayloadReturnValueHandler.RESPONSE_HEADER header.\npublic class RSocketRequesterMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Resolves arguments of type RSocket that can be used for making requests to the remote peer.\n", "des": "Support classes for working with annotated RSocket stream handling methods."}
{"index": 2035, "repo": "spring-messaging-6.0.11", "code": "package service;\n\npublic class DestinationVariableArgumentResolver extends Object implements RSocketServiceArgumentResolver; // RSocketServiceArgumentResolver for a @DestinationVariable annotated argument.\npublic class MetadataArgumentResolver extends Object implements RSocketServiceArgumentResolver; // RSocketServiceArgumentResolver for metadata entries.\npublic class PayloadArgumentResolver extends Object implements RSocketServiceArgumentResolver; // RSocketServiceArgumentResolver for @Payload annotated arguments.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Reflective(org.springframework.messaging.rsocket.service.RSocketExchangeReflectiveProcessor.class) public @interface RSocketExchange; // Annotation to declare a method on an RSocket service interface as an RSocket endpoint.\npublic final class RSocketRequestValues extends Object; // Container for RSocket request values extracted from an @RSocketExchange-annotated method and argument values passed to it.\npublic static final class RSocketRequestValues.Builder extends Object; // Builder for RSocketRequestValues.\npublic interface RSocketServiceArgumentResolver; // Resolve an argument from an @RSocketExchange-annotated method to one or more RSocket request values.\npublic final class RSocketServiceProxyFactory extends Object; // Factory for creating a client proxy given an RSocket service interface with @RSocketExchange methods.\npublic static final class RSocketServiceProxyFactory.Builder extends Object; // Builder to create an RSocketServiceProxyFactory.\n", "des": "Annotations to declare an RSocket service contract with request methods along with a proxy factory backed by an RSocketRequester."}
{"index": 2036, "repo": "spring-messaging-6.0.11", "code": "package simp;\n\npackage simp.annotation; // Annotations and for handling messages from SImple Messaging Protocols such as STOMP.\npackage simp.broker; // Provides a \"simple\" message broker implementation along with an abstract base class and other supporting types such as a registry for subscriptions.\npackage simp.config; // Configuration support for WebSocket messaging using higher level messaging protocols.\npackage simp.stomp; // Generic support for simple messaging protocols (like STOMP).\npackage simp.user; // Support for handling messages to \"user\" destinations (i.e.\npublic class SimpAttributes extends Object; // A wrapper class for access to attributes associated with a SiMP session (e.g.\npublic abstract class SimpAttributesContextHolder extends Object; // Holder class to expose SiMP attributes associated with a session (e.g.\npublic abstract class SimpLogging extends Object; // Holds the shared logger named \"org.springframework.web.SimpLogging\" to use for STOMP over WebSocket messaging when logging for \"org.springframework.messaging.simp\" is off but logging for \"org.springframework.web\" is on.\npublic class SimpMessageHeaderAccessor extends NativeMessageHeaderAccessor; // A base class for working with message headers in simple messaging protocols that support basic messaging patterns.\npublic class SimpMessageMappingInfo extends Object implements MessageCondition<SimpMessageMappingInfo>; // MessageCondition for SImple Messaging Protocols.\npublic interface SimpMessageSendingOperations extends MessageSendingOperations<String>; // A specialization of MessageSendingOperations with methods for use with the Spring Framework support for Simple Messaging Protocols (like STOMP).\npublic enum SimpMessageType extends Enum<SimpMessageType>; // A generic representation of different kinds of messages found in simple messaging protocols like STOMP.\npublic class SimpMessageTypeMessageCondition extends AbstractMessageCondition<SimpMessageTypeMessageCondition>; // MessageCondition that matches by the message type obtained via SimpMessageHeaderAccessor.getMessageType(Map).\npublic class SimpMessagingTemplate extends AbstractMessageSendingTemplate<String> implements SimpMessageSendingOperations; // An implementation of SimpMessageSendingOperations.\n", "des": "Generic support for Simple Messaging Protocols including protocols such as STOMP."}
{"index": 2037, "repo": "spring-messaging-6.0.11", "code": "package annotation;\n\npackage annotation.support; // Support classes for handling messages from simple messaging protocols (like STOMP).\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface SendToUser; // Indicates the return value of a message-handling method should be sent as a Message to the specified destination(s) further prepended with \"/user/{username}\" where the user name is extracted from the headers of the input message being handled.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Reflective(MessageMappingReflectiveProcessor.class) public @interface SubscribeMapping; // Annotation for mapping subscription messages onto specific handler methods based on the destination of a subscription.\n", "des": "Annotations and for handling messages from SImple Messaging Protocols such as STOMP."}
{"index": 2038, "repo": "spring-messaging-6.0.11", "code": "package support;\n\npublic class MissingSessionUserException extends MessagingException; // MessagingException thrown when a session is missing.\npublic class PrincipalMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Resolver for arguments of type Principal, including Optional<Principal>.\npublic class SendToMethodReturnValueHandler extends Object implements HandlerMethodReturnValueHandler; // A HandlerMethodReturnValueHandler for sending to destinations specified in a SendTo or SendToUser method-level annotations.\npublic class SimpAnnotationMethodMessageHandler extends AbstractMethodMessageHandler<SimpMessageMappingInfo> implements org.springframework.context.EmbeddedValueResolverAware, org.springframework.context.SmartLifecycle; // A handler for messages delegating to @MessageMapping and @SubscribeMapping annotated methods.\npublic class SubscriptionMethodReturnValueHandler extends Object implements HandlerMethodReturnValueHandler; // HandlerMethodReturnValueHandler for replying directly to a subscription.\n", "des": "Support classes for handling messages from simple messaging protocols (like STOMP)."}
{"index": 2039, "repo": "spring-messaging-6.0.11", "code": "package broker;\n\npublic abstract class AbstractBrokerMessageHandler extends Object implements MessageHandler, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.SmartLifecycle; // Abstract base class for a MessageHandler that broker messages to registered subscribers.\npublic abstract class AbstractSubscriptionRegistry extends Object implements SubscriptionRegistry; // Abstract base class for implementations of SubscriptionRegistry that looks up information in messages but delegates to abstract methods for the actual storage and retrieval.\npublic class BrokerAvailabilityEvent extends org.springframework.context.ApplicationEvent; // Event raised when a broker's availability changes.\npublic class DefaultSubscriptionRegistry extends AbstractSubscriptionRegistry; // Implementation of SubscriptionRegistry that stores subscriptions in memory and uses a PathMatcher for matching destinations.\npublic class OrderedMessageChannelDecorator extends Object implements MessageChannel; // Decorator for an ExecutorSubscribableChannel that ensures messages are processed in the order they were published to the channel.\npublic class SimpleBrokerMessageHandler extends AbstractBrokerMessageHandler; // A \"simple\" message broker that recognizes the message types defined in SimpMessageType, keeps track of subscriptions with the help of a SubscriptionRegistry, and sends messages to subscribers.\npublic interface SubscriptionRegistry; // A registry of subscription by session that allows looking up subscriptions.\n", "des": "Provides a \"simple\" message broker implementation along with an abstract base class and other supporting types such as a registry for subscriptions."}
{"index": 2040, "repo": "spring-messaging-6.0.11", "code": "package config;\n\npublic abstract class AbstractBrokerRegistration extends Object; // Base class for message broker registration classes.\npublic abstract class AbstractMessageBrokerConfiguration extends Object implements org.springframework.context.ApplicationContextAware; // Provides essential configuration for handling messages with simple messaging protocols such as STOMP.\npublic class ChannelRegistration extends Object; // A registration class for customizing the configuration for a MessageChannel.\npublic class MessageBrokerRegistry extends Object; // A registry for configuring message broker options.\npublic class SimpleBrokerRegistration extends AbstractBrokerRegistration; // Registration class for configuring a SimpleBrokerMessageHandler.\npublic class StompBrokerRelayRegistration extends AbstractBrokerRegistration; // Registration class for configuring a StompBrokerRelayMessageHandler.\npublic class TaskExecutorRegistration extends Object; // A registration class for customizing the properties of ThreadPoolTaskExecutor.\n", "des": "Configuration support for WebSocket messaging using higher level messaging protocols."}
{"index": 2041, "repo": "spring-messaging-6.0.11", "code": "package stomp;\n\npublic class BufferingStompDecoder extends Object; // An extension of StompDecoder that buffers content remaining in the input ByteBuffer after the parent class has read all (complete) STOMP frames from it.\npublic interface ConnectionHandlingStompSession extends StompSession, StompTcpConnectionHandler<byte[]>; // A StompSession that implements TcpConnectionHandler in order to send and receive messages.\npublic class ConnectionLostException extends RuntimeException; // Raised when the connection for a STOMP session is lost rather than closed.\npublic class DefaultStompSession extends Object implements ConnectionHandlingStompSession; // Default implementation of ConnectionHandlingStompSession.\npublic class ReactorNettyTcpStompClient extends StompClientSupport; // A STOMP over TCP client, configurable with either ReactorNettyTcpClient or ReactorNetty2TcpClient.\npublic class StompBrokerRelayMessageHandler extends AbstractBrokerMessageHandler; // A MessageHandler that handles messages by forwarding them to a STOMP broker.\npublic static interface StompBrokerRelayMessageHandler.Stats; // Contract for access to session counters.\npublic abstract class StompClientSupport extends Object; // Base class for STOMP client implementations.\npublic enum StompCommand extends Enum<StompCommand>; // Represents a STOMP command.\npublic class StompConversionException extends org.springframework.core.NestedRuntimeException; // Raised after a failure to encode or decode a STOMP message.\npublic class StompDecoder extends Object; // Decodes one or more STOMP frames contained in a ByteBuffer.\npublic class StompEncoder extends Object; // An encoder for STOMP frames.\npublic interface StompFrameHandler; // Contract to handle a STOMP frame.\npublic class StompHeaderAccessor extends SimpMessageHeaderAccessor; // A MessageHeaderAccessor to use when creating a Message from a decoded STOMP frame, or when encoding a Message to a STOMP frame.\npublic class StompHeaders extends Object implements org.springframework.util.MultiValueMap<String,String>, Serializable; // Represents STOMP frame headers.\npublic class StompReactorNettyCodec extends AbstractNioBufferReactorNettyCodec<byte[]>; // Simple delegation to StompDecoder and StompEncoder.\n", "des": "Generic support for simple messaging protocols (like STOMP)."}
{"index": 2042, "repo": "spring-messaging-6.0.11", "code": "package user;\n\npublic class DefaultUserDestinationResolver extends Object implements UserDestinationResolver; // A default implementation of UserDestinationResolver that relies on a SimpUserRegistry to find active sessions for a user.\npublic interface DestinationUserNameProvider; // A Principal can also implement this contract when getName() isn't globally unique and therefore not suited for use with \"user\" destinations.\npublic class MultiServerUserRegistry extends Object implements SimpUserRegistry, org.springframework.context.event.SmartApplicationListener; // SimpUserRegistry that looks up users in a \"local\" user registry as well as a set of \"remote\" user registries.\npublic interface SimpSession; // Represents a session of connected user.\npublic interface SimpSubscription; // Represents a subscription within a user session.\n@FunctionalInterface public interface SimpSubscriptionMatcher; // A strategy for matching subscriptions.\npublic interface SimpUser; // Represents a connected user.\npublic interface SimpUserRegistry; // A registry of currently connected users.\npublic class UserDestinationMessageHandler extends Object implements MessageHandler, org.springframework.context.SmartLifecycle; // MessageHandler with support for \"user\" destinations.\n@FunctionalInterface public interface UserDestinationResolver; // A strategy for resolving a \"user\" destination by translating it to one or more actual destinations one per active user session.\npublic class UserDestinationResult extends Object; // Contains the result from parsing a \"user\" destination from a source message and translating it to target destinations (one per active user session).\npublic class UserRegistryMessageHandler extends Object implements MessageHandler, org.springframework.context.ApplicationListener<BrokerAvailabilityEvent>; // MessageHandler that handles user registry broadcasts from other application servers and periodically broadcasts the content of the local user registry.\n", "des": "Support for handling messages to \"user\" destinations (i.e."}
{"index": 2043, "repo": "spring-messaging-6.0.11", "code": "package support;\n\npublic abstract class AbstractHeaderMapper<T> extends Object implements HeaderMapper<T>; // A base HeaderMapper implementation.\npublic abstract class AbstractMessageChannel extends Object implements MessageChannel, InterceptableChannel, org.springframework.beans.factory.BeanNameAware; // Abstract base class for MessageChannel implementations.\npublic abstract class AbstractSubscribableChannel extends AbstractMessageChannel implements SubscribableChannel; // Abstract base class for SubscribableChannel implementations.\npublic interface ChannelInterceptor; // Interface for interceptors that are able to view and/or modify the Messages being sent-to and/or received-from a MessageChannel.\npublic class ErrorMessage extends GenericMessage<Throwable>; // A GenericMessage with a Throwable payload.\npublic interface ExecutorChannelInterceptor extends ChannelInterceptor; // An extension of ChannelInterceptor with callbacks to intercept the asynchronous sending of a Message to a specific subscriber through an Executor.\npublic class ExecutorSubscribableChannel extends AbstractSubscribableChannel; // A SubscribableChannel that sends messages to each of its subscribers.\npublic class GenericMessage<T> extends Object implements Message<T>, Serializable; // An implementation of Message with a generic payload.\npublic interface HeaderMapper<T>; // Generic strategy interface for mapping MessageHeaders to and from other types of objects.\npublic class IdTimestampMessageHeaderInitializer extends Object implements MessageHeaderInitializer; // A MessageHeaderInitializer to customize the strategy for ID and TIMESTAMP message header generation.\npublic class ImmutableMessageChannelInterceptor extends Object implements ChannelInterceptor; // A simpler interceptor that calls MessageHeaderAccessor.setImmutable() on the headers of messages passed through the preSend method.\npublic interface InterceptableChannel; // A MessageChannel that maintains a list ChannelInterceptors and allows interception of message sending.\npublic final class MessageBuilder<T> extends Object; // A builder for creating a GenericMessage (or ErrorMessage if the payload is of type Throwable).\npublic interface MessageHandlingRunnable extends Runnable; // Extension of the Runnable interface with methods to obtain the MessageHandler and Message to be handled.\npublic class MessageHeaderAccessor extends Object; // Wrapper around MessageHeaders that provides extra features such as strongly typed accessors for specific headers, the ability to leave headers in a Message mutable, and the option to suppress automatic generation of id and timestamp headers.\npublic interface MessageHeaderInitializer; // Callback interface for initializing a MessageHeaderAccessor.\n", "des": "Provides implementations of Message along with a MessageBuilder and MessageHeaderAccessor for building and working with messages and message headers, as well as various MessageChannel implementations and channel interceptor support."}
{"index": 2044, "repo": "spring-messaging-6.0.11", "code": "package tcp;\n\npackage tcp.reactor; // Contains support for TCP messaging based on Reactor.\npublic class FixedIntervalReconnectStrategy extends Object implements ReconnectStrategy; // A simple strategy for making reconnect attempts at a fixed interval.\n@FunctionalInterface public interface ReconnectStrategy; // A contract to determine the frequency of reconnect attempts after connection failure.\npublic interface TcpConnection<P> extends Closeable; // A contract for sending messages and managing a TCP connection.\npublic interface TcpConnectionHandler<P>; // A contract for managing lifecycle events for a TCP connection including the handling of incoming messages.\npublic interface TcpOperations<P>; // A contract for establishing TCP connections.\n", "des": "Contains abstractions and implementation classes for establishing TCP connections via TcpOperations, handling messages via TcpConnectionHandler, as well as sending messages via TcpConnection."}
{"index": 2045, "repo": "spring-messaging-6.0.11", "code": "package reactor;\n\npublic abstract class AbstractNioBufferReactorNettyCodec<P> extends Object implements ReactorNettyCodec<P>; // Convenient base class for ReactorNettyCodec implementations that need to work with NIO ByteBuffers.\npublic class ReactorNetty2TcpClient<P> extends Object implements TcpOperations<P>; // Reactor Netty based implementation of TcpOperations.\npublic class ReactorNetty2TcpConnection<P> extends Object implements TcpConnection<P>; // Reactor Netty based implementation of TcpConnection.\npublic interface ReactorNettyCodec<P>; // Simple holder for a decoding Function and an encoding BiConsumer to use with Reactor Netty.\npublic class ReactorNettyTcpClient<P> extends Object implements TcpOperations<P>; // Reactor Netty based implementation of TcpOperations.\npublic class ReactorNettyTcpConnection<P> extends Object implements TcpConnection<P>; // Reactor Netty based implementation of TcpConnection.\npublic interface TcpMessageCodec<P>; // Contract to encode and decode a Message to and from a ByteBuffer allowing a higher-level protocol (e.g.\n", "des": "Contains support for TCP messaging based on Reactor."}
{"index": 2046, "repo": "spring-boot-loader-3.1.1", "code": "package loader;\n\npackage loader.archive; // Abstraction over logical Archives be they backed by a JAR file or unpacked into a directory.\npackage loader.data; // Classes and interfaces to allow random access to a block of data.\npackage loader.jar; // Support for loading and manipulating JAR/WAR files.\npackage loader.jarmode; // Support for launching the JAR using jarmode.\npackage loader.util; // Utilities used by Spring Boot's JAR loading.\npublic abstract class ExecutableArchiveLauncher extends Launcher; // Base class for executable archive Launchers.\npublic class JarLauncher extends ExecutableArchiveLauncher; // Launcher for JAR based archives.\npublic class LaunchedURLClassLoader extends URLClassLoader; // ClassLoader used by the Launcher.\npublic abstract class Launcher extends Object; // Base class for launchers that can start an application with a fully configured classpath backed by one or more Archives.\npublic class MainMethodRunner extends Object; // Utility class that is used by Launchers to call a main method.\npublic class PropertiesLauncher extends Launcher; // Launcher for archives with user-configured classpath and main class through a properties file.\npublic class WarLauncher extends ExecutableArchiveLauncher; // Launcher for WAR based archives.\n", "des": "System that allows self-contained JAR/WAR archives to be launched using java -jar."}
{"index": 2047, "repo": "spring-boot-loader-3.1.1", "code": "package archive;\n\npublic interface Archive extends Iterable<Archive.Entry>, AutoCloseable; // An archive that can be launched by the Launcher.\npublic static interface Archive.Entry; // Represents a single entry in the archive.\n@FunctionalInterface public static interface Archive.EntryFilter; // Strategy interface to filter Entries.\npublic class ExplodedArchive extends Object implements Archive; // Archive implementation backed by an exploded archive directory.\npublic class JarFileArchive extends Object implements Archive; // Archive implementation backed by a JarFile.\n", "des": "Abstraction over logical Archives be they backed by a JAR file or unpacked into a directory."}
{"index": 2048, "repo": "spring-boot-loader-3.1.1", "code": "package data;\n\npublic interface RandomAccessData; // Interface that provides read-only random access to some underlying data.\npublic class RandomAccessDataFile extends Object implements RandomAccessData; // RandomAccessData implementation backed by a RandomAccessFile.\n", "des": "Classes and interfaces to allow random access to a block of data."}
{"index": 2049, "repo": "spring-boot-loader-3.1.1", "code": "package jar;\n\npublic class Handler extends URLStreamHandler; // URLStreamHandler for Spring Boot loader JarFiles.\npublic class JarFile extends JarFile implements Iterable<JarEntry>; // Extended variant of JarFile that behaves in the same way but offers the following additional functionality.\n", "des": "Support for loading and manipulating JAR/WAR files."}
{"index": 2050, "repo": "spring-boot-loader-3.1.1", "code": "package jarmode;\n\npublic interface JarMode; // Interface registered in spring.factories to provides extended 'jarmode' support.\npublic final class JarModeLauncher extends Object; // Delegate class used to launch the fat jar in a specific mode.\n", "des": "Support for launching the JAR using jarmode."}
{"index": 2051, "repo": "spring-boot-loader-3.1.1", "code": "package util;\n\npublic abstract class SystemPropertyUtils extends Object; // Helper class for resolving placeholders in texts.\n", "des": "Utilities used by Spring Boot's JAR loading."}
{"index": 2052, "repo": "spring-ws-security-4.0.5", "code": "package security;\n\npackage security.callback; // Contains generic CallbackHandler implementations.\npackage security.support; // Contains support classes for handling WS-Security messages.\npackage security.wss4j2; // Contains classes for using the Apache WSS4J 2.0 WS-Security implementation within Spring-WS.\npublic abstract class AbstractWsSecurityInterceptor extends Object implements org.springframework.ws.soap.server.SoapEndpointInterceptor, org.springframework.ws.client.support.interceptor.ClientInterceptor; // Interceptor base class for interceptors that handle WS-Security.\npublic abstract class WsSecurityException extends org.springframework.ws.WebServiceException; // Exception indicating that something went wrong during WS-Security executions.\npublic abstract class WsSecurityFaultException extends WsSecurityException; // Exception indicating that a WS-Security executions should result in a SOAP Fault.\npublic abstract class WsSecuritySecurementException extends WsSecurityException; // Exception indicating that something went wrong during the securement of a message.\npublic abstract class WsSecurityValidationException extends WsSecurityException; // Exception indicating that something went wrong during the validation of a message.\n", "des": "Provides WS-Security implementation classes."}
{"index": 2053, "repo": "spring-ws-security-4.0.5", "code": "package callback;\n\npublic abstract class AbstractCallbackHandler extends Object implements CallbackHandler; // Abstract implementation of a CallbackHandler.\npublic class CallbackHandlerChain extends AbstractCallbackHandler; // Represents a chain of CallbackHandlers.\npublic class CleanupCallback extends Object implements Callback, Serializable; // Underlying security services instantiate and pass a CleanupCallback to the handle method of a CallbackHandler to clean up security state.\n", "des": "Contains generic CallbackHandler implementations."}
{"index": 2054, "repo": "spring-ws-security-4.0.5", "code": "package support;\n\npublic class KeyManagersFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<KeyManager[]>, org.springframework.beans.factory.InitializingBean; // Spring factory bean for an array of KeyManagers.\npublic class KeyStoreFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<KeyStore>, org.springframework.beans.factory.InitializingBean; // Spring factory bean for a KeyStore.\npublic abstract class KeyStoreUtils extends Object; // Generic utility methods for dealing with KeyStore objects.\npublic abstract class SpringSecurityUtils extends Object; // Generic utility methods for Spring Security\npublic class TrustManagersFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<TrustManager[]>, org.springframework.beans.factory.InitializingBean; // Spring factory bean for an array of TrustManagers.\n", "des": "Contains support classes for handling WS-Security messages."}
{"index": 2055, "repo": "spring-ws-security-4.0.5", "code": "package wss4j2;\n\npackage wss4j2.callback; // Contains CallbackHandler implementations for WSS4J 2.0.\npackage wss4j2.support; // Contains support classes for working with WSS4J 2.0.\npublic class Wss4jSecurityFaultException extends WsSecurityFaultException; // WSS4J-specific version of the WsSecurityFaultException.\npublic class Wss4jSecurityInterceptor extends AbstractWsSecurityInterceptor implements org.springframework.beans.factory.InitializingBean; // A WS-Security endpoint interceptor based on Apache's WSS4J.\npublic class Wss4jSecuritySecurementException extends WsSecuritySecurementException; // WSS4J-specific version of the WsSecuritySecurementException.\npublic class Wss4jSecurityValidationException extends WsSecurityValidationException; // WSS4J-specific version of the WsSecurityValidationException.\n", "des": "Contains classes for using the Apache WSS4J 2.0 WS-Security implementation within Spring-WS."}
{"index": 2056, "repo": "spring-ws-security-4.0.5", "code": "package callback;\n\npublic abstract class AbstractWsPasswordCallbackHandler extends AbstractCallbackHandler; // Abstract base class for CallbackHandler implementations that handle WSPasswordCallback callbacks.\npublic class KeyStoreCallbackHandler extends AbstractWsPasswordCallbackHandler implements org.springframework.beans.factory.InitializingBean; // Callback handler that uses Java Security KeyStores to handle cryptographic callbacks.\npublic class SimplePasswordValidationCallbackHandler extends AbstractWsPasswordCallbackHandler implements org.springframework.beans.factory.InitializingBean; // Simple callback handler that validates passwords against a in-memory Properties object.\npublic class SpringSecurityPasswordValidationCallbackHandler extends AbstractWsPasswordCallbackHandler implements org.springframework.beans.factory.InitializingBean; // Callback handler that validates a plain text or digest password using an Spring Security UserDetailsService.\npublic class UsernameTokenPrincipalCallback extends Object implements Callback, Serializable; // Underlying security services instantiate and pass a UsernameTokenPrincipalCallback to the handle method of a CallbackHandler to pass a security WSUsernameTokenPrincipal.\n", "des": "Contains CallbackHandler implementations for WSS4J 2.0."}
{"index": 2057, "repo": "spring-ws-security-4.0.5", "code": "package support;\n\npublic class CryptoFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.apache.wss4j.common.crypto.Crypto>, org.springframework.beans.factory.InitializingBean; // Spring factory bean for a WSS4J Crypto.\n", "des": "Contains support classes for working with WSS4J 2.0."}
{"index": 2058, "repo": "slf4j-ext-2.0.7", "code": "package agent;\n\npublic class AgentOptions extends Object; // All recognized options in the string passed to the java agent.\npublic class AgentPremain extends Object; // Entry point for slf4j-ext when used as a Java agent.\n", "des": "\"-javaagent\" routines for SLF4J."}
{"index": 2059, "repo": "slf4j-ext-2.0.7", "code": "package cal10n;\n\npublic class LocLogger extends LoggerWrapper implements Logger; // A logger specialized in localized logging.\npublic class LocLoggerFactory extends Object; // This class is essentially a wrapper around an LoggerFactory producing LocLogger instances.\n", "des": "SLF4J API extensions"}
{"index": 2060, "repo": "slf4j-ext-2.0.7", "code": "package ext;\n\npublic class LoggerWrapper extends Object implements Logger; // A helper class wrapping an Logger instance preserving location information if the wrapped instance supports it.\npublic class XLogger extends LoggerWrapper implements Logger; // A utility that provides standard mechanisms for logging certain kinds of activities.\npublic static enum XLogger.Level extends Enum<XLogger.Level>;\npublic class XLoggerFactory extends Object; // This class is essentially a wrapper around an LoggerFactory producing XLogger instances.\n", "des": "Localized logging using the CAL10N API."}
{"index": 2061, "repo": "slf4j-ext-2.0.7", "code": "package instrumentation;\n\npublic class JavassistHelper extends Object; // Helper methods for Javassist functionality.\npublic class LogTransformer extends Object implements ClassFileTransformer; // LogTransformer does the work of analyzing each class, and if appropriate add log statements to each method to allow logging entry/exit.\npublic static class LogTransformer.Builder extends Object; // Builder provides a flexible way of configuring some of many options on the parent class instead of providing many constructors.\npublic class ToStringHelper extends Object;\n", "des": "Java instrumentation routines for SLF4J."}
{"index": 2062, "repo": "slf4j-ext-2.0.7", "code": "package profiler;\n\npublic enum DurationUnit extends Enum<DurationUnit>; // An enum of supported time units.\npublic class Profiler extends Object implements TimeInstrument; // A poor man's profiler to measure the time elapsed performing some lengthy task.\npublic class ProfilerRegistry extends Object; // A minimalist registry of profilers.\npublic class SpacePadder extends Object;\npublic class StopWatch extends Object implements TimeInstrument; // A very basic TimeInstrument which can be started and stopped once and only once.\npublic interface TimeInstrument; // This interface sets the methods that must be implemented by Profiler and StopWatch classes.\n", "des": "Poor man's profiler API"}
{"index": 2063, "repo": "spring-webmvc-6.0.11", "code": "package servlet;\n\npackage servlet.config; // Defines the XML configuration namespace for Spring MVC.\npackage servlet.function; // Provides the types that make up Spring's functional web framework for Servlet environments.\npackage servlet.handler; // Provides standard HandlerMapping implementations, including abstract base classes for custom implementations.\npackage servlet.i18n; // Locale support classes for Spring's web MVC framework.\npackage servlet.mvc; // Standard controller implementations for the Servlet MVC framework that comes with Spring.\npackage servlet.resource; // Support classes for serving static resources.\npackage servlet.support; // Support classes for Spring's web MVC framework.\npackage servlet.tags; // This package contains Spring's JSP standard tag library for JSP 2.0+.\npackage servlet.theme; // Theme support classes for Spring's web MVC framework.\npackage servlet.view; // Provides standard View and ViewResolver implementations, including abstract base classes for custom implementations.\npublic interface AsyncHandlerInterceptor extends HandlerInterceptor; // Extends HandlerInterceptor with a callback method invoked after the start of asynchronous request handling.\npublic class DispatcherServlet extends FrameworkServlet; // Central dispatcher for HTTP request handlers/controllers, e.g.\npublic final class FlashMap extends HashMap<String,Object> implements Comparable<FlashMap>; // A FlashMap provides a way for one request to store attributes intended for use in another.\npublic interface FlashMapManager; // A strategy interface for retrieving and saving FlashMap instances.\npublic abstract class FrameworkServlet extends HttpServletBean implements org.springframework.context.ApplicationContextAware; // Base servlet for Spring's web framework.\npublic interface HandlerAdapter; // MVC framework SPI, allowing parameterization of the core MVC workflow.\npublic interface HandlerExceptionResolver; // Interface to be implemented by objects that can resolve exceptions thrown during handler mapping or execution, in the typical case to error views.\npublic class HandlerExecutionChain extends Object; // Handler execution chain, consisting of handler object and any handler interceptors.\npublic interface HandlerInterceptor; // Workflow interface that allows for customized handler execution chains.\npublic interface HandlerMapping; // Interface to be implemented by objects that define a mapping between requests and handler objects.\n", "des": "Provides servlets that integrate with the application context infrastructure, and the core interfaces and classes for the Spring web MVC framework."}
{"index": 2064, "repo": "spring-webmvc-6.0.11", "code": "package config;\n\npackage config.annotation; // Annotation-based setup for Spring MVC.\npublic class CorsBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // BeanDefinitionParser that parses a cors element in order to set the CORS configuration in the various {AbstractHandlerMapping} beans created by AnnotationDrivenBeanDefinitionParser, ResourcesBeanDefinitionParser and ViewControllerBeanDefinitionParser.\npublic class FreeMarkerConfigurerBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parse the <mvc:freemarker-configurer> MVC namespace element and register FreeMarkerConfigurer bean.\npublic class GroovyMarkupConfigurerBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser; // Parse the <mvc:groovy-configurer> MVC namespace element and register a GroovyConfigurer bean.\npublic class MvcNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for Spring MVC configuration namespace.\npublic abstract class MvcNamespaceUtils extends Object; // Convenience methods for use in MVC namespace BeanDefinitionParsers.\npublic class ScriptTemplateConfigurerBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser; // Parse the <mvc:script-template-configurer> MVC namespace element and register a ScriptTemplateConfigurer bean.\npublic class ViewResolversBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Parses the view-resolvers MVC namespace element and registers ViewResolver bean definitions.\n", "des": "Defines the XML configuration namespace for Spring MVC."}
{"index": 2065, "repo": "spring-webmvc-6.0.11", "code": "package annotation;\n\npublic class AsyncSupportConfigurer extends Object; // Helps with configuring options for asynchronous request processing.\npublic class ContentNegotiationConfigurer extends Object; // Creates a ContentNegotiationManager and configures it with one or more ContentNegotiationStrategy instances.\npublic class CorsRegistration extends Object; // Assists with the creation of a CorsConfiguration instance for a given URL path pattern.\npublic class CorsRegistry extends Object; // Assists with the registration of global, URL pattern based CorsConfiguration mappings.\npublic class DefaultServletHandlerConfigurer extends Object; // Configures a request handler for serving static resources by forwarding the request to the Servlet container's \"default\" Servlet.\n@Configuration(proxyBeanMethods=false) public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport; // A subclass of WebMvcConfigurationSupport that detects and delegates to all beans of type WebMvcConfigurer allowing them to customize the configuration provided by WebMvcConfigurationSupport.\n@Retention(RUNTIME) @Target(TYPE) @Documented @Import(DelegatingWebMvcConfiguration.class) public @interface EnableWebMvc; // Adding this annotation to an @Configuration class imports the Spring MVC configuration from WebMvcConfigurationSupport, e.g.:\npublic class InterceptorRegistration extends Object; // Assists with the creation of a MappedInterceptor.\npublic class InterceptorRegistry extends Object; // Helps with configuring a list of mapped interceptors.\npublic class PathMatchConfigurer extends Object; // Configure path matching options.\npublic class RedirectViewControllerRegistration extends Object; // Assist with the registration of a single redirect view controller.\npublic class ResourceChainRegistration extends Object; // Assists with the registration of resource resolvers and transformers.\npublic class ResourceHandlerRegistration extends Object; // Encapsulates information required to create a resource handler.\npublic class ResourceHandlerRegistry extends Object; // Stores registrations of resource handlers for serving static resources such as images, css files and others through Spring MVC including setting cache headers optimized for efficient loading in a web browser.\npublic class UrlBasedViewResolverRegistration extends Object; // Assist with configuring a UrlBasedViewResolver.\npublic class ViewControllerRegistration extends Object; // Assist with the registration of a single view controller.\npublic class ViewControllerRegistry extends Object; // Assists with the registration of simple automated controllers pre-configured with status code and/or a view.\n", "des": "Annotation-based setup for Spring MVC."}
{"index": 2066, "repo": "spring-webmvc-6.0.11", "code": "package function;\n\npackage function.support; // Classes supporting the org.springframework.web.servlet.function package.\npublic interface AsyncServerResponse extends ServerResponse; // Asynchronous subtype of ServerResponse that exposes the future response.\npublic interface EntityResponse<T> extends ServerResponse; // Entity-specific subtype of ServerResponse that exposes entity data.\npublic static interface EntityResponse.Builder<T>; // Defines a builder for EntityResponse.\n@FunctionalInterface public interface HandlerFilterFunction<T extends ServerResponse,R extends ServerResponse>; // Represents a function that filters a handler function.\n@FunctionalInterface public interface HandlerFunction<T extends ServerResponse>; // Represents a function that handles a request.\npublic interface RenderingResponse extends ServerResponse; // Rendering-specific subtype of ServerResponse that exposes model and template data.\npublic static interface RenderingResponse.Builder; // Defines a builder for RenderingResponse.\n@FunctionalInterface public interface RequestPredicate; // Represents a function that evaluates on a given ServerRequest.\npublic abstract class RequestPredicates extends Object; // Implementations of RequestPredicate that implement various useful request matching operations, such as matching based on path, HTTP method, etc.\npublic static interface RequestPredicates.Visitor; // Receives notifications from the logical structure of request predicates.\n@FunctionalInterface public interface RouterFunction<T extends ServerResponse>; // Represents a function that routes to a handler function.\npublic abstract class RouterFunctions extends Object; // Central entry point to Spring's functional web framework. Exposes routing functionality, such as to create a RouterFunction using a discoverable builder-style API, to create a RouterFunction given a RequestPredicate and HandlerFunction, and to do further subrouting on an existing routing function.\npublic static interface RouterFunctions.Builder; // Represents a discoverable builder for router functions.\npublic static interface RouterFunctions.Visitor; // Receives notifications from the logical structure of router functions.\npublic interface ServerRequest; // Represents a server-side HTTP request, as handled by a HandlerFunction.\npublic static interface ServerRequest.Builder; // Defines a builder for a request.\npublic static interface ServerRequest.Headers; // Represents the headers of the HTTP request.\n", "des": "Provides the types that make up Spring's functional web framework for Servlet environments."}
{"index": 2067, "repo": "spring-webmvc-6.0.11", "code": "package support;\n\npublic class HandlerFunctionAdapter extends Object implements HandlerAdapter, org.springframework.core.Ordered; // HandlerAdapter implementation that supports HandlerFunctions.\npublic class RouterFunctionMapping extends AbstractHandlerMapping implements org.springframework.beans.factory.InitializingBean; // HandlerMapping implementation that supports RouterFunctions.\n", "des": "Classes supporting the org.springframework.web.servlet.function package."}
{"index": 2068, "repo": "spring-webmvc-6.0.11", "code": "package handler;\n\npublic abstract class AbstractDetectingUrlHandlerMapping extends AbstractUrlHandlerMapping; // Abstract implementation of the HandlerMapping interface, detecting URL mappings for handler beans through introspection of all defined beans in the application context.\npublic abstract class AbstractHandlerExceptionResolver extends Object implements HandlerExceptionResolver, org.springframework.core.Ordered; // Abstract base class for HandlerExceptionResolver implementations.\npublic abstract class AbstractHandlerMapping extends org.springframework.web.context.support.WebApplicationObjectSupport implements HandlerMapping, org.springframework.core.Ordered, org.springframework.beans.factory.BeanNameAware; // Abstract base class for HandlerMapping implementations.\npublic abstract class AbstractHandlerMethodExceptionResolver extends AbstractHandlerExceptionResolver; // Abstract base class for HandlerExceptionResolver implementations that support handling exceptions from handlers of type HandlerMethod.\npublic abstract class AbstractHandlerMethodMapping<T> extends AbstractHandlerMapping implements org.springframework.beans.factory.InitializingBean; // Abstract base class for HandlerMapping implementations that define a mapping between a request and a HandlerMethod.\npublic abstract class AbstractUrlHandlerMapping extends AbstractHandlerMapping implements MatchableHandlerMapping; // Abstract base class for URL-mapped HandlerMapping implementations.\npublic class BeanNameUrlHandlerMapping extends AbstractDetectingUrlHandlerMapping; // Implementation of the HandlerMapping interface that maps from URLs to beans with names that start with a slash (\"/\"), similar to how Struts maps URLs to action names.\npublic class ConversionServiceExposingInterceptor extends Object implements HandlerInterceptor; // Interceptor that places the configured ConversionService in request scope so it's available during request processing.\npublic class DispatcherServletWebRequest extends org.springframework.web.context.request.ServletWebRequest; // ServletWebRequest subclass that is aware of DispatcherServlet's request context, such as the Locale determined by the configured LocaleResolver.\npublic class HandlerExceptionResolverComposite extends Object implements HandlerExceptionResolver, org.springframework.core.Ordered; // A HandlerExceptionResolver that delegates to a list of other HandlerExceptionResolvers.\npublic class HandlerMappingIntrospector extends Object implements org.springframework.web.cors.CorsConfigurationSource, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // Helper class to get information from the HandlerMapping that would serve a specific request.\n", "des": "Provides standard HandlerMapping implementations, including abstract base classes for custom implementations."}
{"index": 2069, "repo": "spring-webmvc-6.0.11", "code": "package i18n;\n\npublic abstract class AbstractLocaleContextResolver extends AbstractLocaleResolver implements LocaleContextResolver; // Abstract base class for LocaleContextResolver implementations.\npublic abstract class AbstractLocaleResolver extends Object implements LocaleResolver; // Abstract base class for LocaleResolver implementations.\npublic class AcceptHeaderLocaleResolver extends AbstractLocaleResolver; // LocaleResolver implementation that looks for a match between locales in the Accept-Language header and a list of configured supported locales.\npublic class CookieLocaleResolver extends AbstractLocaleContextResolver; // LocaleResolver implementation that uses a cookie sent back to the user in case of a custom setting, with a fallback to the configured default locale, the request's Accept-Language header, or the default locale for the server.\npublic class FixedLocaleResolver extends AbstractLocaleContextResolver; // LocaleResolver implementation that always returns a fixed default locale and optionally time zone.\npublic class LocaleChangeInterceptor extends Object implements HandlerInterceptor; // Interceptor that allows for changing the current locale on every request, via a configurable request parameter (default parameter name: \"locale\").\npublic class SessionLocaleResolver extends AbstractLocaleContextResolver; // LocaleResolver implementation that uses a locale attribute in the user's session in case of a custom setting, with a fallback to the configured default locale, the request's Accept-Language header, or the default locale for the server.\n", "des": "Locale support classes for Spring's web MVC framework."}
{"index": 2070, "repo": "spring-webmvc-6.0.11", "code": "package mvc;\n\npackage mvc.annotation; // Support package for annotation-based Servlet MVC controllers.\npackage mvc.condition; // Common MVC logic for matching incoming requests based on conditions.\npackage mvc.method; // Servlet-based infrastructure for handler method processing, building on the org.springframework.web.method package.\npackage mvc.support; // Support package for MVC controllers.\npublic abstract class AbstractController extends WebContentGenerator implements Controller; // Convenient superclass for controller implementations, using the Template Method design pattern.\npublic abstract class AbstractUrlViewController extends AbstractController; // Abstract base class for Controllers that return a view name based on the request URL.\n@FunctionalInterface public interface Controller; // Base Controller interface, representing a component that receives HttpServletRequest and HttpServletResponse instances just like a HttpServlet but is able to participate in an MVC workflow.\npublic class HttpRequestHandlerAdapter extends Object implements HandlerAdapter; // Adapter to use the plain HttpRequestHandler interface with the generic DispatcherServlet.\n@Deprecated public interface LastModified;\npublic class ParameterizableViewController extends AbstractController; // Trivial controller that always returns a pre-configured view and optionally sets the response status code.\npublic class ServletForwardingController extends AbstractController implements org.springframework.beans.factory.BeanNameAware; // Spring Controller implementation that forwards to a named servlet, i.e.\npublic class ServletWrappingController extends AbstractController implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Spring Controller implementation that wraps a servlet instance which it manages internally.\npublic class SimpleControllerHandlerAdapter extends Object implements HandlerAdapter; // Adapter to use the plain Controller workflow interface with the generic DispatcherServlet.\npublic class UrlFilenameViewController extends AbstractUrlViewController; // Simple Controller implementation that transforms the virtual path of a URL into a view name and returns that view.\npublic class WebContentInterceptor extends WebContentGenerator implements HandlerInterceptor; // Handler interceptor that checks the request for supported methods and a required session and prepares the response by applying the configured cache settings.\n", "des": "Standard controller implementations for the Servlet MVC framework that comes with Spring."}
{"index": 2071, "repo": "spring-webmvc-6.0.11", "code": "package annotation;\n\npublic interface ModelAndViewResolver; // SPI for resolving custom return values from a specific handler method.\npublic class ResponseStatusExceptionResolver extends AbstractHandlerExceptionResolver implements org.springframework.context.MessageSourceAware; // A HandlerExceptionResolver that uses the @ResponseStatus annotation to map exceptions to HTTP status codes.\n", "des": "Support package for annotation-based Servlet MVC controllers."}
{"index": 2072, "repo": "spring-webmvc-6.0.11", "code": "package condition;\n\npublic abstract class AbstractRequestCondition<T extends AbstractRequestCondition<T>> extends Object implements RequestCondition<T>; // A base class for RequestCondition types providing implementations of AbstractRequestCondition.equals(Object), AbstractRequestCondition.hashCode(), and AbstractRequestCondition.toString().\npublic class CompositeRequestCondition extends AbstractRequestCondition<CompositeRequestCondition>; // Implements the RequestCondition contract by delegating to multiple RequestCondition types and using a logical conjunction (' && ') to ensure all conditions match a given request.\npublic final class ConsumesRequestCondition extends AbstractRequestCondition<ConsumesRequestCondition>; // A logical disjunction (' || ') request condition to match a request's 'Content-Type' header to a list of media type expressions.\npublic final class HeadersRequestCondition extends AbstractRequestCondition<HeadersRequestCondition>; // A logical conjunction (' && ') request condition that matches a request against a set of header expressions with syntax defined in RequestMapping.headers().\npublic interface MediaTypeExpression; // A contract for media type expressions (e.g.\npublic interface NameValueExpression<T>; // A contract for \"name!=value\" style expression used to specify request parameters and request header conditions in @RequestMapping.\npublic final class ParamsRequestCondition extends AbstractRequestCondition<ParamsRequestCondition>; // A logical conjunction (' && ') request condition that matches a request against a set parameter expressions with syntax defined in RequestMapping.params().\npublic final class PathPatternsRequestCondition extends AbstractRequestCondition<PathPatternsRequestCondition>; // A logical disjunction (' || ') request condition that matches a request against a set of URL path patterns.\npublic class PatternsRequestCondition extends AbstractRequestCondition<PatternsRequestCondition>; // A logical disjunction (' || ') request condition that matches a request against a set of URL path patterns.\npublic final class ProducesRequestCondition extends AbstractRequestCondition<ProducesRequestCondition>; // A logical disjunction (' || ') request condition to match a request's 'Accept' header to a list of media type expressions.\npublic interface RequestCondition<T>; // Contract for request mapping conditions.\npublic final class RequestConditionHolder extends AbstractRequestCondition<RequestConditionHolder>; // A holder for a RequestCondition useful when the type of the request condition is not known ahead of time, e.g.\n", "des": "Common MVC logic for matching incoming requests based on conditions."}
{"index": 2073, "repo": "spring-webmvc-6.0.11", "code": "package method;\n\npackage method.annotation; // MVC infrastructure for annotation-based handler method processing, building on the org.springframework.web.method.annotation package.\npublic abstract class AbstractHandlerMethodAdapter extends WebContentGenerator implements HandlerAdapter, org.springframework.core.Ordered; // Abstract base class for HandlerAdapter implementations that support handlers of type HandlerMethod.\npublic final class RequestMappingInfo extends Object implements RequestCondition<RequestMappingInfo>; // Request mapping information.\npublic static interface RequestMappingInfo.Builder; // Defines a builder for creating a RequestMappingInfo.\npublic static class RequestMappingInfo.BuilderConfiguration extends Object; // Container for configuration options used for request mapping purposes.\npublic abstract class RequestMappingInfoHandlerMapping extends AbstractHandlerMethodMapping<RequestMappingInfo>; // Abstract base class for classes for which RequestMappingInfo defines the mapping between a request and a handler method.\npublic class RequestMappingInfoHandlerMethodMappingNamingStrategy extends Object implements HandlerMethodMappingNamingStrategy<RequestMappingInfo>; // A HandlerMethodMappingNamingStrategy for RequestMappingInfo-based handler method mappings.\n", "des": "Servlet-based infrastructure for handler method processing, building on the org.springframework.web.method package."}
{"index": 2074, "repo": "spring-webmvc-6.0.11", "code": "package annotation;\n\npublic abstract class AbstractMappingJacksonResponseBodyAdvice extends Object implements ResponseBodyAdvice<Object>; // A convenient base class for ResponseBodyAdvice implementations that customize the response before JSON serialization with AbstractJackson2HttpMessageConverter's concrete subclasses.\npublic abstract class AbstractMessageConverterMethodArgumentResolver extends Object implements org.springframework.web.method.support.HandlerMethodArgumentResolver; // A base class for resolving method argument values by reading from the body of a request with HttpMessageConverters.\npublic abstract class AbstractMessageConverterMethodProcessor extends AbstractMessageConverterMethodArgumentResolver implements org.springframework.web.method.support.HandlerMethodReturnValueHandler; // Extends AbstractMessageConverterMethodArgumentResolver with the ability to handle method return values by writing to the response with HttpMessageConverters.\npublic class AsyncTaskMethodReturnValueHandler extends Object implements org.springframework.web.method.support.HandlerMethodReturnValueHandler; // Handles return values of type WebAsyncTask.\npublic class CallableMethodReturnValueHandler extends Object implements org.springframework.web.method.support.HandlerMethodReturnValueHandler; // Handles return values of type Callable.\npublic class ContinuationHandlerMethodArgumentResolver extends Object implements org.springframework.web.method.support.HandlerMethodArgumentResolver; // No-op resolver for method arguments of type Continuation.\npublic class DeferredResultMethodReturnValueHandler extends Object implements org.springframework.web.method.support.HandlerMethodReturnValueHandler; // Handler for return values of type DeferredResult, ListenableFuture, and CompletionStage.\npublic class ExceptionHandlerExceptionResolver extends AbstractHandlerMethodExceptionResolver implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // An AbstractHandlerMethodExceptionResolver that resolves exceptions through @ExceptionHandler methods.\npublic class ExtendedServletRequestDataBinder extends org.springframework.web.bind.ServletRequestDataBinder; // Subclass of ServletRequestDataBinder that adds URI template variables to the values used for data binding.\npublic class HttpEntityMethodProcessor extends AbstractMessageConverterMethodProcessor; // Resolves HttpEntity and RequestEntity method argument values, as well as return values of type HttpEntity, ResponseEntity, ErrorResponse and ProblemDetail.\npublic class HttpHeadersReturnValueHandler extends Object implements org.springframework.web.method.support.HandlerMethodReturnValueHandler; // Handles HttpHeaders return values.\n", "des": "MVC infrastructure for annotation-based handler method processing, building on the org.springframework.web.method.annotation package."}
{"index": 2075, "repo": "spring-webmvc-6.0.11", "code": "package support;\n\npublic class DefaultHandlerExceptionResolver extends AbstractHandlerExceptionResolver; // The default implementation of the HandlerExceptionResolver interface, resolving standard Spring MVC exceptions and translating them to corresponding HTTP status codes.\npublic interface RedirectAttributes extends org.springframework.ui.Model; // A specialization of the Model interface that controllers can use to select attributes for a redirect scenario.\npublic class RedirectAttributesModelMap extends org.springframework.ui.ModelMap implements RedirectAttributes; // A ModelMap implementation of RedirectAttributes that formats values as Strings using a DataBinder.\n", "des": "Support package for MVC controllers."}
{"index": 2076, "repo": "spring-webmvc-6.0.11", "code": "package resource;\n\npublic abstract class AbstractResourceResolver extends Object implements ResourceResolver; // Base class for ResourceResolver implementations.\npublic abstract class AbstractVersionStrategy extends Object implements VersionStrategy; // Abstract base class for VersionStrategy implementations.\nprotected static class AbstractVersionStrategy.FileNameVersionPathStrategy extends Object implements VersionPathStrategy; // File name-based VersionPathStrategy, e.g.\nprotected static class AbstractVersionStrategy.PrefixVersionPathStrategy extends Object implements VersionPathStrategy; // A prefix-based VersionPathStrategy, e.g.\npublic class CachingResourceResolver extends AbstractResourceResolver; // A ResourceResolver that resolves resources from a Cache or otherwise delegates to the resolver chain and saves the result in the cache.\npublic class CachingResourceTransformer extends Object implements ResourceTransformer; // A ResourceTransformer that checks a Cache to see if a previously transformed resource exists in the cache and returns it if found, and otherwise delegates to the resolver chain and saves the result in the cache.\npublic class ContentVersionStrategy extends AbstractVersionStrategy; // A VersionStrategy that calculates a Hex MD5 hash from the content of the resource and appends it to the file name, e.g.\npublic class CssLinkResourceTransformer extends ResourceTransformerSupport; // A ResourceTransformer implementation that modifies links in a CSS file to match the public URL paths that should be exposed to clients (e.g.\nprotected abstract static class CssLinkResourceTransformer.AbstractLinkParser extends Object implements CssLinkResourceTransformer.LinkParser; // Abstract base class for CssLinkResourceTransformer.LinkParser implementations.\n@FunctionalInterface protected static interface CssLinkResourceTransformer.LinkParser; // Extract content chunks that represent links.\npublic class DefaultServletHttpRequestHandler extends Object implements org.springframework.web.HttpRequestHandler, org.springframework.web.context.ServletContextAware; // An HttpRequestHandler for serving static files using the Servlet container's \"default\" Servlet.\npublic class EncodedResourceResolver extends AbstractResourceResolver; // Resolver that delegates to the chain, and if a resource is found, it then attempts to find an encoded (e.g.\npublic class FixedVersionStrategy extends AbstractVersionStrategy; // A VersionStrategy that relies on a fixed version applied as a request path prefix, e.g.\npublic interface HttpResource extends org.springframework.core.io.Resource; // Extended interface for a Resource to be written to an HTTP response.\n", "des": "Support classes for serving static resources."}
{"index": 2077, "repo": "spring-webmvc-6.0.11", "code": "package support;\n\npublic abstract class AbstractAnnotationConfigDispatcherServletInitializer extends AbstractDispatcherServletInitializer; // WebApplicationInitializer to register a DispatcherServlet and use Java-based Spring configuration.\npublic abstract class AbstractDispatcherServletInitializer extends org.springframework.web.context.AbstractContextLoaderInitializer; // Base class for WebApplicationInitializer implementations that register a DispatcherServlet in the servlet context.\npublic abstract class AbstractFlashMapManager extends Object implements FlashMapManager; // A base class for FlashMapManager implementations.\npublic class BindStatus extends Object; // Simple adapter to expose the bind status of a field or object.\npublic class JspAwareRequestContext extends RequestContext; // JSP-aware (and JSTL-aware) subclass of RequestContext, allowing for population of the context from a jakarta.servlet.jsp.PageContext.\npublic abstract class JstlUtils extends Object; // Helper class for preparing JSTL views, in particular for exposing a JSTL localization context.\npublic class RequestContext extends Object; // Context holder for request-specific state, like current web application context, current locale, current theme, and potential binding errors.\npublic abstract class RequestContextUtils extends Object; // Utility class for easy access to request-specific state which has been set by the DispatcherServlet.\npublic interface RequestDataValueProcessor; // A contract for inspecting and potentially modifying request data values such as URL query parameters or form field values before they are rendered by a view or before a redirect.\npublic class ServletUriComponentsBuilder extends org.springframework.web.util.UriComponentsBuilder; // UriComponentsBuilder with additional static factory methods to create links based on the current HttpServletRequest.\npublic class SessionFlashMapManager extends AbstractFlashMapManager; // Store and retrieve FlashMap instances to and from the HTTP session.\npublic abstract class WebContentGenerator extends org.springframework.web.context.support.WebApplicationObjectSupport; // Convenient superclass for any kind of web content generator, like AbstractController and WebContentInterceptor.\n", "des": "Support classes for Spring's web MVC framework."}
{"index": 2078, "repo": "spring-webmvc-6.0.11", "code": "package tags;\n\npackage tags.form; // Spring's form tag library for JSP views in Spring's Web MVC framework.\npublic interface ArgumentAware; // Allows implementing tag to utilize nested spring:argument tags.\npublic class ArgumentTag extends BodyTagSupport; // The <argument> tag is based on the JSTL fmt:param tag.\npublic class BindErrorsTag extends HtmlEscapingAwareTag; // This <hasBindErrors> tag provides an Errors instance in case of bind errors.\npublic class BindTag extends HtmlEscapingAwareTag implements EditorAwareTag; // The <bind> tag supports evaluation of binding errors for a certain bean or bean property.\npublic interface EditorAwareTag; // Interface to be implemented by JSP tags that expose a PropertyEditor for a property that they are currently bound to.\npublic class EscapeBodyTag extends HtmlEscapingAwareTag implements BodyTag; // The <escapeBody> tag is used to escape its enclosed body content, applying HTML escaping and/or JavaScript escaping.\npublic class EvalTag extends HtmlEscapingAwareTag; // The <eval> tag evaluates a Spring expression (SpEL) and either prints the result or assigns it to a variable.\npublic class HtmlEscapeTag extends RequestContextAwareTag; // The <htmlEscape> tag sets default HTML escape value for the current page.\npublic abstract class HtmlEscapingAwareTag extends RequestContextAwareTag; // Superclass for tags that output content that might get HTML-escaped.\npublic class MessageTag extends HtmlEscapingAwareTag implements ArgumentAware; // The <message> tag looks up a message in the scope of this page.\npublic class NestedPathTag extends TagSupport implements TryCatchFinally; // The <nestedPath> tag supports and assists with nested beans or bean properties in the model.\npublic class Param extends Object; // Bean used to pass name-value pair parameters from a ParamTag to a ParamAware tag.\npublic interface ParamAware; // Allows implementing tag to utilize nested spring:param tags.\npublic class ParamTag extends BodyTagSupport; // The <param> tag collects name-value parameters and passes them to a ParamAware ancestor in the tag hierarchy.\npublic abstract class RequestContextAwareTag extends TagSupport implements TryCatchFinally; // Superclass for all tags that require a RequestContext.\n@Deprecated(since=\"6.0\") public class ThemeTag extends MessageTag;\n", "des": "This package contains Spring's JSP standard tag library for JSP 2.0+."}
{"index": 2079, "repo": "spring-webmvc-6.0.11", "code": "package form;\n\npublic abstract class AbstractCheckedElementTag extends AbstractHtmlInputElementTag; // Abstract base class to provide common methods for implementing databinding-aware JSP tags for rendering an HTML 'input' element with a 'type' of 'checkbox' or 'radio'.\npublic abstract class AbstractDataBoundFormElementTag extends AbstractFormTag implements EditorAwareTag; // Base tag for all data-binding aware JSP form tags.\npublic abstract class AbstractFormTag extends HtmlEscapingAwareTag; // Base class for all JSP form tags.\npublic abstract class AbstractHtmlElementBodyTag extends AbstractHtmlElementTag implements BodyTag; // Convenient superclass for many html tags that render content using the databinding features of the AbstractHtmlElementTag.\npublic abstract class AbstractHtmlElementTag extends AbstractDataBoundFormElementTag implements DynamicAttributes; // Base class for databinding-aware JSP tags that render HTML element.\npublic abstract class AbstractHtmlInputElementTag extends AbstractHtmlElementTag; // Base class for databinding-aware JSP tags that render HTML form input element.\npublic abstract class AbstractMultiCheckedElementTag extends AbstractCheckedElementTag; // Abstract base class to provide common methods for implementing databinding-aware JSP tags for rendering multiple HTML 'input' elements with a 'type' of 'checkbox' or 'radio'.\npublic abstract class AbstractSingleCheckedElementTag extends AbstractCheckedElementTag; // Abstract base class to provide common methods for implementing databinding-aware JSP tags for rendering a single HTML 'input' element with a 'type' of 'checkbox' or 'radio'.\npublic class ButtonTag extends AbstractHtmlElementTag; // The <button> tag renders a form field label in an HTML 'button' tag.\npublic class CheckboxesTag extends AbstractMultiCheckedElementTag; // The <checkboxes> tag renders multiple HTML 'input' tags with type 'checkbox'.\npublic class CheckboxTag extends AbstractSingleCheckedElementTag; // The <checkbox> tag renders an HTML 'input' tag with type 'checkbox'.\npublic class ErrorsTag extends AbstractHtmlElementBodyTag implements BodyTag; // The <errors> tag renders field errors in an HTML 'span' tag.\npublic class FormTag extends AbstractHtmlElementTag; // The <form> tag renders an HTML 'form' tag and exposes a binding path to inner tags for binding.\n", "des": "Spring's form tag library for JSP views in Spring's Web MVC framework."}
{"index": 2080, "repo": "spring-webmvc-6.0.11", "code": "package theme;\n\n@Deprecated(since=\"6.0\") public abstract class AbstractThemeResolver extends Object implements ThemeResolver;\n@Deprecated(since=\"6.0\") public class CookieThemeResolver extends org.springframework.web.util.CookieGenerator implements ThemeResolver;\n@Deprecated(since=\"6.0\") public class FixedThemeResolver extends AbstractThemeResolver;\n@Deprecated(since=\"6.0\") public class SessionThemeResolver extends AbstractThemeResolver;\n@Deprecated(since=\"6.0\") public class ThemeChangeInterceptor extends Object implements HandlerInterceptor;\n", "des": "Theme support classes for Spring's web MVC framework."}
{"index": 2081, "repo": "spring-webmvc-6.0.11", "code": "package view;\n\npackage view.document; // Support classes for document generation, providing View implementations for PDF and Excel.\npackage view.feed; // Support classes for feed generation, providing View implementations for Atom and RSS.\npackage view.freemarker; // Support classes for the integration of FreeMarker as Spring web view technology.\npackage view.groovy; // Support classes for the integration of Groovy Templates as Spring web view technology.\npackage view.json; // Support classes for providing a View implementation based on JSON serialization.\npackage view.script; // Support classes for views based on the JSR-223 script engine abstraction (as included in Java 6+), e.g.\npackage view.xml; // Support classes for providing a View implementation based on XML Marshalling.\npackage view.xslt; // Support classes for XSLT, providing a View implementation for XSLT stylesheets.\npublic abstract class AbstractCachingViewResolver extends org.springframework.web.context.support.WebApplicationObjectSupport implements ViewResolver; // Convenient base class for ViewResolver implementations.\n@FunctionalInterface public static interface AbstractCachingViewResolver.CacheFilter; // Filter that determines if view should be cached.\npublic abstract class AbstractTemplateView extends AbstractUrlBasedView; // Adapter base class for template-based view technologies such as FreeMarker, with the ability to use request and session attributes in their model and the option to expose helper objects for Spring's FreeMarker macro library.\npublic abstract class AbstractTemplateViewResolver extends UrlBasedViewResolver; // Abstract base class for template view resolvers, in particular for FreeMarker views.\npublic abstract class AbstractUrlBasedView extends AbstractView implements org.springframework.beans.factory.InitializingBean; // Abstract base class for URL-based views.\npublic abstract class AbstractView extends org.springframework.web.context.support.WebApplicationObjectSupport implements View, org.springframework.beans.factory.BeanNameAware; // Abstract base class for View implementations.\npublic class BeanNameViewResolver extends org.springframework.web.context.support.WebApplicationObjectSupport implements ViewResolver, org.springframework.core.Ordered; // A simple implementation of ViewResolver that interprets a view name as a bean name in the current application context, i.e.\n", "des": "Provides standard View and ViewResolver implementations, including abstract base classes for custom implementations."}
{"index": 2082, "repo": "spring-webmvc-6.0.11", "code": "package document;\n\npublic abstract class AbstractPdfStamperView extends AbstractUrlBasedView; // Abstract superclass for PDF views that operate on an existing document with an AcroForm.\npublic abstract class AbstractPdfView extends AbstractView; // Abstract superclass for PDF views.\npublic abstract class AbstractXlsView extends AbstractView; // Convenient superclass for Excel document views in traditional XLS format.\npublic abstract class AbstractXlsxStreamingView extends AbstractXlsxView; // Convenient superclass for Excel document views in the Office 2007 XLSX format, using POI's streaming variant.\npublic abstract class AbstractXlsxView extends AbstractXlsView; // Convenient superclass for Excel document views in the Office 2007 XLSX format (as supported by POI-OOXML).\n", "des": "Support classes for document generation, providing View implementations for PDF and Excel."}
{"index": 2083, "repo": "spring-webmvc-6.0.11", "code": "package feed;\n\npublic abstract class AbstractAtomFeedView extends AbstractFeedView<com.rometools.rome.feed.atom.Feed>; // Abstract superclass for Atom Feed views, using the ROME package.\npublic abstract class AbstractFeedView<T extends com.rometools.rome.feed.WireFeed> extends AbstractView; // Abstract base class for Atom and RSS Feed views, using the ROME package.\npublic abstract class AbstractRssFeedView extends AbstractFeedView<com.rometools.rome.feed.rss.Channel>; // Abstract superclass for RSS Feed views, using the ROME package.\n", "des": "Support classes for feed generation, providing View implementations for Atom and RSS."}
{"index": 2084, "repo": "spring-webmvc-6.0.11", "code": "package freemarker;\n\npublic interface FreeMarkerConfig; // Interface to be implemented by objects that configure and manage a FreeMarker Configuration object in a web environment.\npublic class FreeMarkerConfigurer extends org.springframework.ui.freemarker.FreeMarkerConfigurationFactory implements FreeMarkerConfig, org.springframework.beans.factory.InitializingBean, org.springframework.context.ResourceLoaderAware; // JavaBean to configure FreeMarker for web usage, via the \"configLocation\" and/or \"freemarkerSettings\" and/or \"templateLoaderPath\" properties.\npublic class FreeMarkerView extends AbstractTemplateView; // View using the FreeMarker template engine.\npublic class FreeMarkerViewResolver extends AbstractTemplateViewResolver; // Convenience subclass of UrlBasedViewResolver that supports FreeMarkerView (i.e.\n", "des": "Support classes for the integration of FreeMarker as Spring web view technology."}
{"index": 2085, "repo": "spring-webmvc-6.0.11", "code": "package groovy;\n\npublic interface GroovyMarkupConfig; // Interface to be implemented by objects that configure and manage a Groovy MarkupTemplateEngine for automatic lookup in a web environment.\npublic class GroovyMarkupConfigurer extends groovy.text.markup.TemplateConfiguration implements GroovyMarkupConfig, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // An extension of Groovy's TemplateConfiguration and an implementation of Spring MVC's GroovyMarkupConfig for creating a MarkupTemplateEngine for use in a web application.\npublic class GroovyMarkupView extends AbstractTemplateView; // An AbstractTemplateView subclass based on Groovy XML/XHTML markup templates.\npublic class GroovyMarkupViewResolver extends AbstractTemplateViewResolver; // Convenience subclass of AbstractTemplateViewResolver that supports GroovyMarkupView (i.e.\n", "des": "Support classes for the integration of Groovy Templates as Spring web view technology."}
{"index": 2086, "repo": "spring-webmvc-6.0.11", "code": "package json;\n\npublic abstract class AbstractJackson2View extends AbstractView; // Abstract base class for Jackson based and content type independent AbstractView implementations.\npublic class MappingJackson2JsonView extends AbstractJackson2View; // Spring MVC View that renders JSON content by serializing the model for the current request using Jackson 2's ObjectMapper.\n", "des": "Support classes for providing a View implementation based on JSON serialization."}
{"index": 2087, "repo": "spring-webmvc-6.0.11", "code": "package script;\n\npublic class RenderingContext extends Object; // Context passed to ScriptTemplateView render function in order to make the application context, the locale, the template loader and the url available on scripting side.\npublic interface ScriptTemplateConfig; // Interface to be implemented by objects that configure and manage a JSR-223 ScriptEngine for automatic lookup in a web environment.\npublic class ScriptTemplateConfigurer extends Object implements ScriptTemplateConfig; // An implementation of Spring MVC's ScriptTemplateConfig for creating a ScriptEngine for use in a web application.\npublic class ScriptTemplateView extends AbstractUrlBasedView; // An AbstractUrlBasedView subclass designed to run any template library based on a JSR-223 script engine.\npublic class ScriptTemplateViewResolver extends UrlBasedViewResolver; // Convenience subclass of UrlBasedViewResolver that supports ScriptTemplateView and custom subclasses of it.\n", "des": "Support classes for views based on the JSR-223 script engine abstraction (as included in Java 6+), e.g."}
{"index": 2088, "repo": "spring-webmvc-6.0.11", "code": "package xml;\n\npublic class MappingJackson2XmlView extends AbstractJackson2View; // Spring MVC View that renders XML content by serializing the model for the current request using Jackson 2's XmlMapper.\npublic class MarshallingView extends AbstractView; // Spring-MVC View that allows for response context to be rendered as the result of marshalling by a Marshaller.\n", "des": "Support classes for providing a View implementation based on XML Marshalling."}
{"index": 2089, "repo": "spring-webmvc-6.0.11", "code": "package xslt;\n\npublic class XsltView extends AbstractUrlBasedView; // XSLT-driven View that allows for response context to be rendered as the result of an XSLT transformation.\npublic class XsltViewResolver extends UrlBasedViewResolver; // ViewResolver implementation that resolves instances of XsltView by translating the supplied view name into the URL of the XSLT stylesheet.\n", "des": "Support classes for XSLT, providing a View implementation for XSLT stylesheets."}
{"index": 2090, "repo": "spring-webflux-6.0.11", "code": "package reactive;\n\npackage reactive.accept; // RequestedContentTypeResolver strategy and implementations to resolve the requested content type for a given request.\npackage reactive.config; // Spring WebFlux configuration infrastructure.\npackage reactive.function; // Provides a foundation for both the reactive client and server subpackages.\npackage reactive.handler; // Provides HandlerMapping implementations including abstract base classes.\npackage reactive.resource; // Support classes for serving static resources.\npackage reactive.result; // Support for various programming model styles including the invocation of different types of handlers, e.g.\npackage reactive.socket; // Abstractions and support classes for reactive WebSocket interactions.\npublic class BindingContext extends Object; // Context to assist with binding request data onto Objects and provide access to a shared Model with controller-specific attributes.\npublic class DispatcherHandler extends Object implements org.springframework.web.server.WebHandler, org.springframework.web.cors.reactive.PreFlightRequestHandler, org.springframework.context.ApplicationContextAware; // Central dispatcher for HTTP request handlers/controllers.\npublic interface DispatchExceptionHandler; // Contract to map a Throwable to a HandlerResult.\npublic interface HandlerAdapter; // Contract to abstract the details of invoking a handler of a given type.\npublic interface HandlerMapping; // Interface to be implemented by objects that define a mapping between requests and handler objects.\npublic class HandlerResult extends Object; // Represent the result of the invocation of a handler or a handler method.\npublic interface HandlerResultHandler; // Process the HandlerResult, usually returned by a HandlerAdapter.\n", "des": "Top-level package for the spring-webflux module that contains DispatcherHandler, the main entry point for WebFlux server endpoint processing including key contracts used to map requests to handlers, invoke them, and process the result."}
{"index": 2091, "repo": "spring-webflux-6.0.11", "code": "package accept;\n\npublic class FixedContentTypeResolver extends Object implements RequestedContentTypeResolver; // Resolver that always resolves to a fixed list of media types.\npublic class HeaderContentTypeResolver extends Object implements RequestedContentTypeResolver; // Resolver that looks at the 'Accept' header of the request.\npublic class ParameterContentTypeResolver extends Object implements RequestedContentTypeResolver; // Resolver that checks a query parameter and uses it to look up a matching MediaType.\npublic interface RequestedContentTypeResolver; // Strategy to resolve the requested media types for a ServerWebExchange.\npublic class RequestedContentTypeResolverBuilder extends Object; // Builder for a composite RequestedContentTypeResolver that delegates to other resolvers each implementing a different strategy to determine the requested content type -- e.g.\npublic static class RequestedContentTypeResolverBuilder.ParameterResolverConfigurer extends Object; // Helper to create and configure ParameterContentTypeResolver.\n", "des": "RequestedContentTypeResolver strategy and implementations to resolve the requested content type for a given request."}
{"index": 2092, "repo": "spring-webflux-6.0.11", "code": "package config;\n\npublic class CorsRegistration extends Object; // Assists with the creation of a CorsConfiguration instance for a given URL path pattern.\npublic class CorsRegistry extends Object; // Assists with the registration of global, URL pattern based CorsConfiguration mappings.\n@Configuration(proxyBeanMethods=false) public class DelegatingWebFluxConfiguration extends WebFluxConfigurationSupport; // A subclass of WebFluxConfigurationSupport that detects and delegates to all beans of type WebFluxConfigurer allowing them to customize the configuration provided by WebFluxConfigurationSupport.\n@Retention(RUNTIME) @Target(TYPE) @Documented @Import(DelegatingWebFluxConfiguration.class) public @interface EnableWebFlux; // Adding this annotation to an @Configuration class imports the Spring WebFlux configuration from WebFluxConfigurationSupport that enables use of annotated controllers and functional endpoints.\npublic class PathMatchConfigurer extends Object; // Assist with configuring HandlerMapping's with path matching options.\npublic class ResourceChainRegistration extends Object; // Assists with the registration of resource resolvers and transformers.\npublic class ResourceHandlerRegistration extends Object; // Assist with creating and configuring a static resources handler.\npublic class ResourceHandlerRegistry extends Object; // Stores registrations of resource handlers for serving static resources such as images, css files and others through Spring WebFlux including setting cache headers optimized for efficient loading in a web browser.\npublic class UrlBasedViewResolverRegistration extends Object; // Assist with configuring properties of a UrlBasedViewResolver.\npublic class ViewResolverRegistry extends Object; // Assist with the configuration of a chain of ViewResolver's supporting different template mechanisms.\npublic class WebFluxConfigurationSupport extends Object implements org.springframework.context.ApplicationContextAware; // The main class for Spring WebFlux configuration.\npublic interface WebFluxConfigurer; // Defines callback methods to customize the configuration for WebFlux applications enabled via @EnableWebFlux.\npublic class WebFluxConfigurerComposite extends Object implements WebFluxConfigurer; // A WebFluxConfigurer that delegates to one or more others.\n", "des": "Spring WebFlux configuration infrastructure."}
{"index": 2093, "repo": "spring-webflux-6.0.11", "code": "package function;\n\npackage function.client; // Provides a reactive WebClient that builds on top of the org.springframework.http.client.reactive reactive HTTP adapter layer.\npackage function.server; // Provides the types that make up Spring's functional web framework for Reactive environments.\n@FunctionalInterface public interface BodyExtractor<T,M extends org.springframework.http.ReactiveHttpInputMessage>; // A function that can extract data from a ReactiveHttpInputMessage body.\npublic static interface BodyExtractor.Context; // Defines the context used during the extraction.\npublic abstract class BodyExtractors extends Object; // Static factory methods for BodyExtractor implementations.\n@FunctionalInterface public interface BodyInserter<T,M extends org.springframework.http.ReactiveHttpOutputMessage>; // A combination of functions that can populate a ReactiveHttpOutputMessage body.\npublic static interface BodyInserter.Context; // Defines the context used during the insertion.\npublic abstract class BodyInserters extends Object; // Static factory methods for BodyInserter implementations.\npublic static interface BodyInserters.FormInserter<T> extends BodyInserter<org.springframework.util.MultiValueMap<String,T>,org.springframework.http.client.reactive.ClientHttpRequest>; // Extension of BodyInserter that allows for adding form data or multipart form data.\npublic static interface BodyInserters.MultipartInserter extends BodyInserters.FormInserter<Object>; // Extension of BodyInserters.FormInserter that allows for adding asynchronous parts.\npublic class UnsupportedMediaTypeException extends org.springframework.core.NestedRuntimeException; // Exception thrown to indicate that a Content-Type is not supported.\n", "des": "Provides a foundation for both the reactive client and server subpackages."}
{"index": 2094, "repo": "spring-webflux-6.0.11", "code": "package client;\n\npackage client.support; // Classes supporting the org.springframework.web.reactive.function.client package.\npublic enum ClientHttpObservationDocumentation extends Enum<ClientHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation; // Documented KeyValues for the HTTP client observations.\npublic static enum ClientHttpObservationDocumentation.HighCardinalityKeyNames extends Enum<ClientHttpObservationDocumentation.HighCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic static enum ClientHttpObservationDocumentation.LowCardinalityKeyNames extends Enum<ClientHttpObservationDocumentation.LowCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic interface ClientRequest; // Represents a typed, immutable, client-side HTTP request, as executed by the ExchangeFunction.\npublic static interface ClientRequest.Builder; // Defines a builder for a request.\npublic class ClientRequestObservationContext extends io.micrometer.observation.transport.RequestReplySenderContext<ClientRequest.Builder,ClientResponse>; // Context that holds information for metadata collection during the HTTP client exchange observations.\npublic interface ClientRequestObservationConvention extends io.micrometer.observation.ObservationConvention<ClientRequestObservationContext>; // Interface for an ObservationConvention related to HTTP client exchange observations.\npublic interface ClientResponse; // Represents an HTTP response, as returned by WebClient and also ExchangeFunction.\npublic static interface ClientResponse.Builder; // Defines a builder for a response.\npublic static interface ClientResponse.Headers; // Represents the headers of the HTTP response.\npublic class DefaultClientRequestObservationConvention extends Object implements ClientRequestObservationConvention; // Default implementation for a ClientRequestObservationConvention, extracting information from the ClientRequestObservationContext.\n@FunctionalInterface public interface ExchangeFilterFunction; // Represents a function that filters an exchange function.\npublic abstract class ExchangeFilterFunctions extends Object; // Static factory methods providing access to built-in implementations of ExchangeFilterFunction for basic authentication, error handling, etc.\n@Deprecated public static final class ExchangeFilterFunctions.Credentials extends Object;\n@FunctionalInterface public interface ExchangeFunction; // Represents a function that exchanges a request for a (delayed) ClientResponse.\npublic abstract class ExchangeFunctions extends Object; // Static factory methods to create an ExchangeFunction.\n", "des": "Provides a reactive WebClient that builds on top of the org.springframework.http.client.reactive reactive HTTP adapter layer."}
{"index": 2095, "repo": "spring-webflux-6.0.11", "code": "package support;\n\npublic class ClientResponseWrapper extends Object implements ClientResponse; // Implementation of the ClientResponse interface that can be subclassed to adapt the request in a exchange filter function.\npublic static class ClientResponseWrapper.HeadersWrapper extends Object implements ClientResponse.Headers; // Implementation of the Headers interface that can be subclassed to adapt the headers in a exchange filter function.\npublic final class WebClientAdapter extends Object implements org.springframework.web.service.invoker.HttpClientAdapter; // HttpClientAdapter that enables an HttpServiceProxyFactory to use WebClient for request execution.\n", "des": "Classes supporting the org.springframework.web.reactive.function.client package."}
{"index": 2096, "repo": "spring-webflux-6.0.11", "code": "package server;\n\npackage server.support; // Classes supporting the org.springframework.web.reactive.function.server package.\npublic interface EntityResponse<T> extends ServerResponse; // Entity-specific subtype of ServerResponse that exposes entity data.\npublic static interface EntityResponse.Builder<T>; // Defines a builder for EntityResponse.\n@FunctionalInterface public interface HandlerFilterFunction<T extends ServerResponse,R extends ServerResponse>; // Represents a function that filters a handler function.\n@FunctionalInterface public interface HandlerFunction<T extends ServerResponse>; // Represents a function that handles a request.\npublic interface HandlerStrategies; // Defines the strategies to be used for processing HandlerFunctions.\npublic static interface HandlerStrategies.Builder; // A mutable builder for a HandlerStrategies.\npublic interface RenderingResponse extends ServerResponse; // Rendering-specific subtype of ServerResponse that exposes model and template data.\npublic static interface RenderingResponse.Builder; // Defines a builder for RenderingResponse.\n@FunctionalInterface public interface RequestPredicate; // Represents a function that evaluates on a given ServerRequest.\npublic abstract class RequestPredicates extends Object; // Implementations of RequestPredicate that implement various useful request matching operations, such as matching based on path, HTTP method, etc.\npublic static interface RequestPredicates.Visitor; // Receives notifications from the logical structure of request predicates.\n@FunctionalInterface public interface RouterFunction<T extends ServerResponse>; // Represents a function that routes to a handler function.\npublic abstract class RouterFunctions extends Object; // Central entry point to Spring's functional web framework. Exposes routing functionality, such as to create a RouterFunction using a discoverable builder-style API, to create a RouterFunction given a RequestPredicate and HandlerFunction, and to do further subrouting on an existing routing function.\npublic static interface RouterFunctions.Builder; // Represents a discoverable builder for router functions.\npublic static interface RouterFunctions.Visitor; // Receives notifications from the logical structure of router functions.\npublic interface ServerRequest; // Represents a server-side HTTP request, as handled by a HandlerFunction.\npublic static interface ServerRequest.Builder; // Defines a builder for a request.\npublic static interface ServerRequest.Headers; // Represents the headers of the HTTP request.\n", "des": "Provides the types that make up Spring's functional web framework for Reactive environments."}
{"index": 2097, "repo": "spring-webflux-6.0.11", "code": "package support;\n\npublic class HandlerFunctionAdapter extends Object implements HandlerAdapter; // HandlerAdapter implementation that supports HandlerFunctions.\npublic class RouterFunctionMapping extends AbstractHandlerMapping implements org.springframework.beans.factory.InitializingBean; // HandlerMapping implementation that supports RouterFunctions.\npublic class ServerRequestWrapper extends Object implements ServerRequest; // Implementation of the ServerRequest interface that can be subclassed to adapt the request in a handler filter function.\npublic static class ServerRequestWrapper.HeadersWrapper extends Object implements ServerRequest.Headers; // Implementation of the Headers interface that can be subclassed to adapt the headers in a handler filter function.\npublic class ServerResponseResultHandler extends Object implements HandlerResultHandler, org.springframework.beans.factory.InitializingBean, org.springframework.core.Ordered; // HandlerResultHandler implementation that supports ServerResponses.\n", "des": "Classes supporting the org.springframework.web.reactive.function.server package."}
{"index": 2098, "repo": "spring-webflux-6.0.11", "code": "package handler;\n\npublic abstract class AbstractHandlerMapping extends org.springframework.context.support.ApplicationObjectSupport implements HandlerMapping, org.springframework.core.Ordered, org.springframework.beans.factory.BeanNameAware; // Abstract base class for HandlerMapping implementations.\npublic abstract class AbstractUrlHandlerMapping extends AbstractHandlerMapping; // Abstract base class for URL-mapped HandlerMapping implementations.\npublic class SimpleUrlHandlerMapping extends AbstractUrlHandlerMapping; // Implementation of the HandlerMapping interface to map from URLs to request handler beans.\npublic class WebFluxResponseStatusExceptionHandler extends org.springframework.web.server.handler.ResponseStatusExceptionHandler; // Common WebFlux exception handler that detects instances of ResponseStatusException (inherited from the base class) as well as exceptions annotated with @ResponseStatus by determining the HTTP status for them and updating the status of the response accordingly.\n", "des": "Provides HandlerMapping implementations including abstract base classes."}
{"index": 2099, "repo": "spring-webflux-6.0.11", "code": "package resource;\n\npublic abstract class AbstractFileNameVersionStrategy extends Object implements VersionStrategy; // Abstract base class for filename suffix based VersionStrategy implementations, e.g.\npublic abstract class AbstractPrefixVersionStrategy extends Object implements VersionStrategy; // Abstract base class for VersionStrategy implementations that insert a prefix into the URL path, e.g.\npublic abstract class AbstractResourceResolver extends Object implements ResourceResolver; // Base ResourceResolver providing consistent logging.\npublic class CachingResourceResolver extends AbstractResourceResolver; // A ResourceResolver that resolves resources from a Cache or otherwise delegates to the resolver chain and caches the result.\npublic class CachingResourceTransformer extends Object implements ResourceTransformer; // A ResourceTransformer that checks a Cache to see if a previously transformed resource exists in the cache and returns it if found, or otherwise delegates to the resolver chain and caches the result.\npublic class ContentVersionStrategy extends AbstractFileNameVersionStrategy; // A VersionStrategy that calculates a Hex MD5 hash from the content of the resource and appends it to the file name, e.g.\npublic class CssLinkResourceTransformer extends ResourceTransformerSupport; // A ResourceTransformer implementation that modifies links in a CSS file to match the public URL paths that should be exposed to clients (e.g.\nprotected abstract static class CssLinkResourceTransformer.AbstractLinkParser extends Object implements CssLinkResourceTransformer.LinkParser; // Abstract base class for CssLinkResourceTransformer.LinkParser implementations.\n@FunctionalInterface protected static interface CssLinkResourceTransformer.LinkParser; // Extract content chunks that represent links.\npublic class EncodedResourceResolver extends AbstractResourceResolver; // Resolver that delegates to the chain, and if a resource is found, it then attempts to find an encoded (e.g.\npublic class FixedVersionStrategy extends AbstractPrefixVersionStrategy; // A VersionStrategy that relies on a fixed version applied as a request path prefix, e.g.\npublic interface HttpResource extends org.springframework.core.io.Resource; // Extended interface for a Resource to be written to an HTTP response.\npublic class PathResourceResolver extends AbstractResourceResolver; // A simple ResourceResolver that tries to find a resource under the given locations matching to the request path.\npublic interface ResourceResolver; // A strategy for resolving a request to a server-side resource.\npublic interface ResourceResolverChain; // A contract for invoking a chain of ResourceResolvers where each resolver is given a reference to the chain allowing it to delegate when necessary.\n", "des": "Support classes for serving static resources."}
{"index": 2100, "repo": "spring-webflux-6.0.11", "code": "package result;\n\npackage result.condition; // RequestCondition and implementations for matching requests based on different criteria.\npackage result.method; // Infrastructure for handler method processing.\npackage result.view; // Support for result handling through view resolution.\npublic abstract class HandlerResultHandlerSupport extends Object implements org.springframework.core.Ordered; // Base class for HandlerResultHandler with support for content negotiation and access to a ReactiveAdapter registry.\npublic class SimpleHandlerAdapter extends Object implements HandlerAdapter; // HandlerAdapter that allows using the plain WebHandler contract with the generic DispatcherHandler.\n", "des": "Support for various programming model styles including the invocation of different types of handlers, e.g."}
{"index": 2101, "repo": "spring-webflux-6.0.11", "code": "package condition;\n\npublic abstract class AbstractRequestCondition<T extends AbstractRequestCondition<T>> extends Object implements RequestCondition<T>; // A base class for RequestCondition types providing implementations of AbstractRequestCondition.equals(Object), AbstractRequestCondition.hashCode(), and AbstractRequestCondition.toString().\npublic class CompositeRequestCondition extends AbstractRequestCondition<CompositeRequestCondition>; // Implements the RequestCondition contract by delegating to multiple RequestCondition types and using a logical conjunction (' && ') to ensure all conditions match a given request.\npublic final class ConsumesRequestCondition extends AbstractRequestCondition<ConsumesRequestCondition>; // A logical disjunction (' || ') request condition to match a request's 'Content-Type' header to a list of media type expressions.\npublic final class HeadersRequestCondition extends AbstractRequestCondition<HeadersRequestCondition>; // A logical conjunction (' && ') request condition that matches a request against a set of header expressions with syntax defined in RequestMapping.headers().\npublic interface MediaTypeExpression; // A contract for media type expressions (e.g.\npublic interface NameValueExpression<T>; // A contract for \"name!=value\" style expression used to specify request parameters and request header conditions in @RequestMapping.\npublic final class ParamsRequestCondition extends AbstractRequestCondition<ParamsRequestCondition>; // A logical conjunction (' && ') request condition that matches a request against a set parameter expressions with syntax defined in RequestMapping.params().\npublic final class PatternsRequestCondition extends AbstractRequestCondition<PatternsRequestCondition>; // A logical disjunction (' || ') request condition that matches a request against a set of URL path patterns.\npublic final class ProducesRequestCondition extends AbstractRequestCondition<ProducesRequestCondition>; // A logical disjunction (' || ') request condition to match a request's 'Accept' header to a list of media type expressions.\npublic interface RequestCondition<T>; // Contract for request mapping conditions.\npublic final class RequestConditionHolder extends AbstractRequestCondition<RequestConditionHolder>; // A holder for a RequestCondition useful when the type of the request condition is not known ahead of time, e.g.\npublic final class RequestMethodsRequestCondition extends AbstractRequestCondition<RequestMethodsRequestCondition>; // A logical disjunction (' || ') request condition that matches a request against a set of RequestMethods.\n", "des": "RequestCondition and implementations for matching requests based on different criteria."}
{"index": 2102, "repo": "spring-webflux-6.0.11", "code": "package method;\n\npackage method.annotation; // Infrastructure for annotation-based handler method processing.\npublic abstract class AbstractHandlerMethodMapping<T> extends AbstractHandlerMapping implements org.springframework.beans.factory.InitializingBean; // Abstract base class for HandlerMapping implementations that define a mapping between a request and a HandlerMethod.\npublic interface HandlerMethodArgumentResolver; // Strategy to resolve the argument value for a method parameter in the context of the current HTTP request.\npublic abstract class HandlerMethodArgumentResolverSupport extends Object implements HandlerMethodArgumentResolver; // Base class for HandlerMethodArgumentResolver implementations with access to a ReactiveAdapterRegistry and methods to check for method parameter support.\npublic class InvocableHandlerMethod extends org.springframework.web.method.HandlerMethod; // Extension of HandlerMethod that invokes the underlying method with argument values resolved from the current HTTP request through a list of HandlerMethodArgumentResolver.\npublic final class RequestMappingInfo extends Object implements RequestCondition<RequestMappingInfo>; // Request mapping information.\npublic static interface RequestMappingInfo.Builder; // Defines a builder for creating a RequestMappingInfo.\npublic static class RequestMappingInfo.BuilderConfiguration extends Object; // Container for configuration options used for request mapping purposes.\npublic abstract class RequestMappingInfoHandlerMapping extends AbstractHandlerMethodMapping<RequestMappingInfo>; // Abstract base class for classes for which RequestMappingInfo defines the mapping between a request and a handler method.\npublic interface SyncHandlerMethodArgumentResolver extends HandlerMethodArgumentResolver; // An extension of HandlerMethodArgumentResolver for implementations that are synchronous in nature and do not block to resolve values.\npublic class SyncInvocableHandlerMethod extends org.springframework.web.method.HandlerMethod; // Extension of HandlerMethod that invokes the underlying method via InvocableHandlerMethod but uses sync argument resolvers only and thus can return directly a HandlerResult with no async wrappers.\n", "des": "Infrastructure for handler method processing."}
{"index": 2103, "repo": "spring-webflux-6.0.11", "code": "package annotation;\n\npublic abstract class AbstractMessageReaderArgumentResolver extends HandlerMethodArgumentResolverSupport; // Abstract base class for argument resolvers that resolve method arguments by reading the request body with an HttpMessageReader.\npublic abstract class AbstractMessageWriterResultHandler extends HandlerResultHandlerSupport; // Abstract base class for result handlers that handle return values by writing to the response with HttpMessageWriter.\npublic abstract class AbstractNamedValueArgumentResolver extends HandlerMethodArgumentResolverSupport; // Abstract base class for resolving method arguments from a named value.\nprotected static class AbstractNamedValueArgumentResolver.NamedValueInfo extends Object; // Represents the information about a named value, including name, whether it's required and a default value.\npublic abstract class AbstractNamedValueSyncArgumentResolver extends AbstractNamedValueArgumentResolver implements SyncHandlerMethodArgumentResolver; // An extension of AbstractNamedValueArgumentResolver for named value resolvers that are synchronous and yet non-blocking.\npublic class ArgumentResolverConfigurer extends Object; // Helps to configure resolvers for Controller method arguments.\npublic class ContinuationHandlerMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // No-op resolver for method arguments of type Continuation.\npublic class CookieValueMethodArgumentResolver extends AbstractNamedValueSyncArgumentResolver; // Resolve method arguments annotated with @CookieValue.\npublic class ErrorsMethodArgumentResolver extends HandlerMethodArgumentResolverSupport; // Resolve Errors or BindingResult method arguments.\npublic class ExpressionValueMethodArgumentResolver extends AbstractNamedValueSyncArgumentResolver; // Resolves method arguments annotated with @Value.\npublic class HttpEntityMethodArgumentResolver extends AbstractMessageReaderArgumentResolver; // Resolves method arguments of type HttpEntity or RequestEntity by reading the body of the request through a compatible HttpMessageReader.\npublic class MatrixVariableMapMethodArgumentResolver extends HandlerMethodArgumentResolverSupport implements SyncHandlerMethodArgumentResolver; // Resolves arguments of type Map annotated with @MatrixVariable where the annotation does not specify a name.\npublic class MatrixVariableMethodArgumentResolver extends AbstractNamedValueSyncArgumentResolver; // Resolves arguments annotated with @MatrixVariable.\npublic class ModelAttributeMethodArgumentResolver extends HandlerMethodArgumentResolverSupport; // Resolve @ModelAttribute annotated method arguments.\npublic class ModelMethodArgumentResolver extends HandlerMethodArgumentResolverSupport implements SyncHandlerMethodArgumentResolver; // Resolver for a controller method argument of type Model that can also be resolved as a Map.\n", "des": "Infrastructure for annotation-based handler method processing."}
{"index": 2104, "repo": "spring-webflux-6.0.11", "code": "package view;\n\npackage view.freemarker; // Support classes for the integration of FreeMarker as Spring web view technology.\npackage view.script; // Support classes for views based on the JSR-223 script engine abstraction (as included in Java 6+), e.g.\npublic abstract class AbstractUrlBasedView extends AbstractView implements org.springframework.beans.factory.InitializingBean; // Abstract base class for URL-based views.\npublic abstract class AbstractView extends Object implements View, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationContextAware; // Base class for View implementations.\npublic class BindStatus extends Object; // Simple adapter to expose the bind status of a field or object.\npublic class HttpMessageWriterView extends Object implements View; // View that writes model attribute(s) with an HttpMessageWriter.\npublic class RedirectView extends AbstractUrlBasedView; // View that redirects to an absolute or context relative URL.\npublic interface Rendering; // Public API for HTML rendering.\npublic static interface Rendering.Builder<B extends Rendering.Builder<B>>; // Defines a builder for Rendering.\npublic static interface Rendering.RedirectBuilder extends Rendering.Builder<Rendering.RedirectBuilder>; // Extends Rendering.Builder with extra options for redirect scenarios.\npublic class RequestContext extends Object; // Context holder for request-specific state, like the MessageSource to use, current locale, binding errors, etc.\npublic interface RequestDataValueProcessor; // A contract for inspecting and potentially modifying request data values such as URL query parameters or form field values before they are rendered by a view or before a redirect.\npublic class UrlBasedViewResolver extends ViewResolverSupport implements ViewResolver, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // A ViewResolver that allows direct resolution of symbolic view names to URLs without explicit mapping definitions.\npublic interface View; // Contract to render HandlerResult to the HTTP response.\n", "des": "Support for result handling through view resolution."}
{"index": 2105, "repo": "spring-webflux-6.0.11", "code": "package freemarker;\n\npublic interface FreeMarkerConfig; // Interface to be implemented by objects that configure and manage a FreeMarker Configuration object in a web environment.\npublic class FreeMarkerConfigurer extends org.springframework.ui.freemarker.FreeMarkerConfigurationFactory implements FreeMarkerConfig, org.springframework.beans.factory.InitializingBean, org.springframework.context.ResourceLoaderAware; // Configures FreeMarker for web usage via the \"configLocation\" and/or \"freemarkerSettings\" and/or \"templateLoaderPath\" properties.\npublic class FreeMarkerView extends AbstractUrlBasedView; // A View implementation that uses the FreeMarker template engine.\npublic class FreeMarkerViewResolver extends UrlBasedViewResolver; // A ViewResolver for resolving FreeMarkerView instances, i.e.\n", "des": "Support classes for the integration of FreeMarker as Spring web view technology."}
{"index": 2106, "repo": "spring-webflux-6.0.11", "code": "package script;\n\npublic class RenderingContext extends Object; // Context passed to ScriptTemplateView render function in order to make the application context, the locale, the template loader and the url available on scripting side.\npublic interface ScriptTemplateConfig; // Interface to be implemented by objects that configure and manage a JSR-223 ScriptEngine for automatic lookup in a web environment.\npublic class ScriptTemplateConfigurer extends Object implements ScriptTemplateConfig; // An implementation of the Spring WebFlux ScriptTemplateConfig for creating a ScriptEngine for use in a web application.\npublic class ScriptTemplateView extends AbstractUrlBasedView; // An AbstractUrlBasedView subclass designed to run any template library based on a JSR-223 script engine.\npublic class ScriptTemplateViewResolver extends UrlBasedViewResolver; // Convenience subclass of UrlBasedViewResolver that supports ScriptTemplateView and custom subclasses of it.\n", "des": "Support classes for views based on the JSR-223 script engine abstraction (as included in Java 6+), e.g."}
{"index": 2107, "repo": "spring-webflux-6.0.11", "code": "package socket;\n\npackage socket.adapter; // Classes adapting Spring's Reactive WebSocket API to and from WebSocket runtimes.\npackage socket.client; // Client support for WebSocket interactions.\npackage socket.server; // Server support for WebSocket interactions.\npublic final class CloseStatus extends Object; // Representation of WebSocket \"close\" status codes and reasons.\npublic class HandshakeInfo extends Object; // Simple container of information related to the handshake request that started the WebSocketSession session.\npublic interface WebSocketHandler; // Handler for a WebSocket session.\npublic class WebSocketMessage extends Object; // Representation of a WebSocket message.\npublic static enum WebSocketMessage.Type extends Enum<WebSocketMessage.Type>; // WebSocket message types.\npublic interface WebSocketSession; // Represents a WebSocket session.\n", "des": "Abstractions and support classes for reactive WebSocket interactions."}
{"index": 2108, "repo": "spring-webflux-6.0.11", "code": "package adapter;\n\npublic abstract class AbstractListenerWebSocketSession<T> extends AbstractWebSocketSession<T> implements Subscriber<Void>; // Base class for WebSocketSession implementations that bridge between event-listener WebSocket APIs (e.g.\npublic abstract class AbstractWebSocketSession<T> extends Object implements WebSocketSession; // Convenient base class for WebSocketSession implementations that holds common fields and exposes accessors.\npublic final class ContextWebSocketHandler extends Object implements WebSocketHandler; // WebSocketHandler decorator that enriches the context of the target handler.\n@WebSocket public class JettyWebSocketHandlerAdapter extends Object; // Jetty @WebSocket handler that delegates events to a reactive WebSocketHandler and its session.\npublic class JettyWebSocketSession extends AbstractListenerWebSocketSession<org.eclipse.jetty.websocket.api.Session>; // Spring WebSocketSession implementation that adapts to a Jetty WebSocket Session.\npublic abstract class Netty5WebSocketSessionSupport<T> extends AbstractWebSocketSession<T>; // Base class for Netty-based WebSocketSession adapters that provides convenience methods to convert Netty WebSocketFrames to and from WebSocketMessages.\npublic abstract class NettyWebSocketSessionSupport<T> extends AbstractWebSocketSession<T>; // Base class for Netty-based WebSocketSession adapters that provides convenience methods to convert Netty WebSocketFrames to and from WebSocketMessages.\npublic class ReactorNetty2WebSocketSession extends Netty5WebSocketSessionSupport<ReactorNetty2WebSocketSession.WebSocketConnection>; // WebSocketSession implementation for use with the Reactor Netty's (Netty 5) NettyInbound and NettyOutbound.\npublic static class ReactorNetty2WebSocketSession.WebSocketConnection extends Object; // Simple container for NettyInbound and NettyOutbound.\npublic class ReactorNettyWebSocketSession extends NettyWebSocketSessionSupport<ReactorNettyWebSocketSession.WebSocketConnection>; // WebSocketSession implementation for use with the Reactor Netty's NettyInbound and NettyOutbound.\npublic static class ReactorNettyWebSocketSession.WebSocketConnection extends Object; // Simple container for NettyInbound and NettyOutbound.\npublic class StandardWebSocketHandlerAdapter extends Endpoint; // Adapter for the Jakarta WebSocket API (JSR-356) that delegates events to a reactive WebSocketHandler and its session.\n", "des": "Classes adapting Spring's Reactive WebSocket API to and from WebSocket runtimes."}
{"index": 2109, "repo": "spring-webflux-6.0.11", "code": "package client;\n\n@Deprecated(since=\"6.0.3\", forRemoval=true) public class JettyWebSocketClient extends Object implements WebSocketClient, org.springframework.context.Lifecycle;\npublic class ReactorNetty2WebSocketClient extends Object implements WebSocketClient; // WebSocketClient implementation for use with Reactor Netty for Netty 5.\npublic class ReactorNettyWebSocketClient extends Object implements WebSocketClient; // WebSocketClient implementation for use with Reactor Netty.\npublic class StandardWebSocketClient extends Object implements WebSocketClient; // WebSocketClient implementation for use with the Jakarta WebSocket API.\npublic class TomcatWebSocketClient extends StandardWebSocketClient; // WebSocketClient implementation for use with Tomcat, based on the Jakarta WebSocket API.\npublic class UndertowWebSocketClient extends Object implements WebSocketClient; // Undertow based implementation of WebSocketClient.\npublic interface WebSocketClient; // Contract for reactive-style handling of a WebSocket session.\n", "des": "Client support for WebSocket interactions."}
{"index": 2110, "repo": "spring-webflux-6.0.11", "code": "package server;\n\npackage server.support; // Server-side support classes for WebSocket requests.\npackage server.upgrade; // Holds implementations of RequestUpgradeStrategy.\npublic interface RequestUpgradeStrategy; // A strategy for upgrading an HTTP request to a WebSocket session depending on the underlying network runtime.\npublic interface WebSocketService; // A service to delegate WebSocket-related HTTP requests to.\n", "des": "Server support for WebSocket interactions."}
{"index": 2111, "repo": "spring-webflux-6.0.11", "code": "package support;\n\npublic class HandshakeWebSocketService extends Object implements WebSocketService, org.springframework.context.Lifecycle; // WebSocketService implementation that handles a WebSocket HTTP handshake request by delegating to a RequestUpgradeStrategy which is either auto-detected (no-arg constructor) from the classpath but can also be explicitly configured.\n@ImportRuntimeHints(org.springframework.web.reactive.socket.server.support.HandshakeWebSocketServiceRuntimeHints.class) public class WebSocketHandlerAdapter extends Object implements HandlerAdapter, org.springframework.core.Ordered; // HandlerAdapter that allows DispatcherHandler to support handlers of type WebSocketHandler with such handlers mapped to URL patterns via SimpleUrlHandlerMapping.\npublic class WebSocketUpgradeHandlerPredicate extends Object implements BiPredicate<Object,org.springframework.web.server.ServerWebExchange>; // A predicate for use with AbstractUrlHandlerMapping.setHandlerPredicate(java.util.function.BiPredicate<java.lang.Object, org.springframework.web.server.ServerWebExchange>) to ensure only WebSocket handshake requests are matched to handlers of type WebSocketHandler.\n", "des": "Server-side support classes for WebSocket requests."}
{"index": 2112, "repo": "spring-webflux-6.0.11", "code": "package upgrade;\n\npublic class JettyRequestUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Jetty 11.\npublic class ReactorNetty2RequestUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Reactor Netty for Netty 5.\npublic class ReactorNettyRequestUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Reactor Netty.\npublic class StandardWebSocketUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for the Jakarta WebSocket API 2.1+.\npublic class TomcatRequestUpgradeStrategy extends StandardWebSocketUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Apache Tomcat.\npublic class UndertowRequestUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Undertow.\n", "des": "Holds implementations of RequestUpgradeStrategy."}
{"index": 2113, "repo": "spring-retry-2.0.2", "code": "package retry;\n\npackage retry.backoff; // Infrastructure implementations of retry backoff concerns.\npackage retry.context; // Infrastructure implementations of retry context concerns.\npackage retry.interceptor; // Infrastructure implementations of retry aop concerns.\npackage retry.listener; // Infrastructure implementations of retry interceptor concerns.\npackage retry.policy; // Infrastructure implementations of retry policy concerns.\npackage retry.support; // Infrastructure implementations of retry support concerns.\npublic class ExhaustedRetryException extends RetryException;\npublic interface RecoveryCallback<T>; // Callback for stateful retry after all tries are exhausted.\npublic interface RetryCallback<T,E extends Throwable>; // Callback interface for an operation that can be retried using a RetryOperations.\npublic interface RetryContext extends org.springframework.core.AttributeAccessor; // Low-level access to ongoing retry operation.\npublic class RetryException extends org.springframework.core.NestedRuntimeException;\npublic interface RetryListener; // Interface for listener that can be used to add behaviour to a retry.\npublic interface RetryOperations; // Defines the basic set of operations implemented by RetryOperations to execute operations with configurable retry behaviour.\npublic interface RetryPolicy extends Serializable; // A RetryPolicy is responsible for allocating and managing resources needed by RetryOperations.\npublic interface RetryState; // Stateful retry is characterised by having to recognise the items that are being processed, so this interface is used primarily to provide a cache key in between failed attempts.\npublic interface RetryStatistics; // Interface for statistics reporting of retry attempts.\npublic class TerminatedRetryException extends RetryException;\n", "des": "Infrastructure implementations of retry concerns."}
{"index": 2114, "repo": "spring-retry-2.0.2", "code": "package backoff;\n\npublic interface BackOffContext extends Serializable;\npublic class BackOffInterruptedException extends RetryException; // Exception class signifiying that an attempt to back off using a BackOffPolicy was interrupted, most likely by an InterruptedException during a call to Thread.sleep(long).\npublic interface BackOffPolicy; // Strategy interface to control back off between attempts in a single retry operation.\npublic class BackOffPolicyBuilder extends Object; // Fluent API for creating a BackOffPolicy based on given attributes.\npublic class ExponentialBackOffPolicy extends Object implements SleepingBackOffPolicy<ExponentialBackOffPolicy>; // Implementation of BackOffPolicy that increases the back off period for each retry attempt in a given set up to a limit.\npublic class ExponentialRandomBackOffPolicy extends ExponentialBackOffPolicy; // Implementation of ExponentialBackOffPolicy that chooses a random multiple of the interval that would come from a simple deterministic exponential.\npublic class FixedBackOffPolicy extends StatelessBackOffPolicy implements SleepingBackOffPolicy<FixedBackOffPolicy>; // Implementation of BackOffPolicy that pauses for a fixed period of time before continuing.\npublic class NoBackOffPolicy extends StatelessBackOffPolicy; // Implementation of BackOffPolicy that performs a no-op and as such all retry operation in a given set proceed one after the other with no pause.\n@Deprecated public class ObjectWaitSleeper extends Object implements Sleeper;\npublic interface Sleeper extends Serializable; // Strategy interface for backoff policies to delegate the pausing of execution.\npublic interface SleepingBackOffPolicy<T extends SleepingBackOffPolicy<T>> extends BackOffPolicy; // A interface which can be mixed in by BackOffPolicys indicating that they sleep when backing off.\npublic abstract class StatelessBackOffPolicy extends Object implements BackOffPolicy; // Simple base class for BackOffPolicy implementations that maintain no state across invocations.\npublic class ThreadWaitSleeper extends Object implements Sleeper; // Simple Sleeper implementation that just blocks the current Thread with sleep period.\npublic class UniformRandomBackOffPolicy extends StatelessBackOffPolicy implements SleepingBackOffPolicy<UniformRandomBackOffPolicy>; // Implementation of BackOffPolicy that pauses for a random period of time before continuing.\n", "des": "Infrastructure implementations of retry backoff concerns."}
{"index": 2115, "repo": "spring-retry-2.0.2", "code": "package context;\n\npublic class RetryContextSupport extends org.springframework.core.AttributeAccessorSupport implements RetryContext;\n", "des": "Infrastructure implementations of retry context concerns."}
{"index": 2116, "repo": "spring-retry-2.0.2", "code": "package interceptor;\n\npublic class FixedKeyGenerator extends Object implements MethodArgumentsKeyGenerator;\npublic interface MethodArgumentsKeyGenerator; // Interface that allows method parameters to be identified and tagged by a unique key.\npublic interface MethodInvocationRecoverer<T>; // Strategy interface for recovery action when processing of an item fails.\npublic abstract class MethodInvocationRetryCallback<T,E extends Throwable> extends Object implements RetryCallback<T,E>; // Callback class for a Spring AOP reflective `MethodInvocation` that can be retried using a RetryOperations.\npublic interface NewMethodArgumentsIdentifier; // Strategy interface to distinguish new arguments from ones that have been processed before, e.g.\npublic interface Retryable; // Marker interface for proxies that are providing retryable behaviour.\npublic abstract class RetryInterceptorBuilder<T extends org.aopalliance.intercept.MethodInterceptor> extends Object; // Simplified facade to make it easier and simpler to build a StatefulRetryOperationsInterceptor or (stateless) RetryOperationsInterceptor by providing a fluent interface to defining the behavior on error.\npublic static class RetryInterceptorBuilder.CircuitBreakerInterceptorBuilder extends RetryInterceptorBuilder<StatefulRetryOperationsInterceptor>;\npublic static class RetryInterceptorBuilder.StatefulRetryInterceptorBuilder extends RetryInterceptorBuilder<StatefulRetryOperationsInterceptor>;\npublic static class RetryInterceptorBuilder.StatelessRetryInterceptorBuilder extends RetryInterceptorBuilder<RetryOperationsInterceptor>;\npublic class RetryOperationsInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor; // A MethodInterceptor that can be used to automatically retry calls to a method on a service if it fails.\npublic class StatefulRetryOperationsInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor; // A MethodInterceptor that can be used to automatically retry calls to a method on a service if it fails.\n", "des": "Infrastructure implementations of retry aop concerns."}
{"index": 2117, "repo": "spring-retry-2.0.2", "code": "package listener;\n\npublic class MethodInvocationRetryListenerSupport extends Object implements RetryListener; // Empty method implementation of RetryListener with focus on the AOP reflective method invocations providing convenience retry listener type-safe (with a `MethodInvocationRetryCallback` callback parameter) specific methods.\n@Deprecated(since=\"2.0.1\", forRemoval=true) public class RetryListenerSupport extends Object implements RetryListener;\n", "des": "Infrastructure implementations of retry interceptor concerns."}
{"index": 2118, "repo": "spring-retry-2.0.2", "code": "package policy;\n\npublic class AlwaysRetryPolicy extends NeverRetryPolicy; // A RetryPolicy that always permits a retry.\npublic class BinaryExceptionClassifierRetryPolicy extends Object implements RetryPolicy; // A policy, that is based on BinaryExceptionClassifier.\npublic class CircuitBreakerRetryPolicy extends Object implements RetryPolicy;\npublic class CompositeRetryPolicy extends Object implements RetryPolicy; // A RetryPolicy that composes a list of other policies and delegates calls to them in order.\npublic class ExceptionClassifierRetryPolicy extends Object implements RetryPolicy; // A RetryPolicy that dynamically adapts to one of a set of injected policies according to the value of the latest exception.\npublic class ExpressionRetryPolicy extends SimpleRetryPolicy implements org.springframework.beans.factory.BeanFactoryAware; // Subclass of SimpleRetryPolicy that delegates to super.canRetry() and, if true, further evaluates an expression against the last thrown exception.\npublic class MapRetryContextCache extends Object implements RetryContextCache; // Map-based implementation of RetryContextCache.\npublic class MaxAttemptsRetryPolicy extends Object implements RetryPolicy; // Simple retry policy that is aware only about attempt count and retries a fixed number of times.\npublic class NeverRetryPolicy extends Object implements RetryPolicy; // A RetryPolicy that allows the first attempt but never permits a retry.\npublic class RetryCacheCapacityExceededException extends RetryException; // Exception that indicates that a cache limit was exceeded.\npublic interface RetryContextCache; // Simple map-like abstraction for stateful retry policies to use when storing and retrieving RetryContext instances.\npublic class SimpleRetryPolicy extends Object implements RetryPolicy; // Simple retry policy that retries a fixed number of times for a set of named exceptions (and subclasses).\npublic class SoftReferenceMapRetryContextCache extends Object implements RetryContextCache; // Map-based implementation of RetryContextCache.\npublic class TimeoutRetryPolicy extends Object implements RetryPolicy; // A RetryPolicy that allows a retry only if it hasn't timed out.\n", "des": "Infrastructure implementations of retry policy concerns."}
{"index": 2119, "repo": "spring-retry-2.0.2", "code": "package support;\n\npublic class Args extends Object; // A root object containing the method arguments to use in expression evaluation.\npublic class DefaultRetryState extends Object implements RetryState;\npublic class RetrySimulation extends Object; // The results of a simulation.\npublic static class RetrySimulation.SleepSequence extends Object;\npublic class RetrySimulator extends Object; // A RetrySimulator is a tool for exercising retry + backoff operations.\npublic final class RetrySynchronizationManager extends Object; // Global variable support for retry clients.\npublic class RetryTemplate extends Object implements RetryOperations; // Template class that simplifies the execution of operations with retry semantics.\npublic class RetryTemplateBuilder extends Object; // Builder that provides a fluent API to configure new instances of RetryTemplate.\n", "des": "Infrastructure implementations of retry support concerns."}
{"index": 2120, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "package dsl;\n\npublic class SpringBootExtension extends Object; // Entry point to Spring Boot's Gradle DSL.\n", "des": "Spring Boot Gradle DSL."}
{"index": 2121, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "package plugin;\n\n@DisableCachingByDefault(because=\"Not worth caching\") public class ResolveMainClassName extends DefaultTask; // Task for resolving the name of the application's main class.\npublic class SpringBootAotPlugin extends Object implements Plugin<Project>; // Gradle plugin for Spring Boot AOT.\npublic class SpringBootPlugin extends Object implements Plugin<Project>; // Gradle plugin for Spring Boot.\n", "des": "Central classes for the Spring Boot Gradle plugin."}
{"index": 2122, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "package aot;\n\n@DisableCachingByDefault(because=\"Cacheability can only be determined by a concrete implementation\") public abstract class AbstractAot extends JavaExec; // Specialization of JavaExec to be used as a base class for tasks that perform ahead-of-time processing.\n@CacheableTask public abstract class ProcessAot extends AbstractAot; // Custom JavaExec task for ahead-of-time processing of a Spring Boot application.\n@CacheableTask public class ProcessTestAot extends AbstractAot; // Custom JavaExec task for ahead-of-time processing of a Spring Boot application's tests.\n", "des": "Support for ahead-of-time processing of an application built with Gradle."}
{"index": 2123, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "package buildinfo;\n\n@DisableCachingByDefault(because=\"Not worth caching\") public abstract class BuildInfo extends DefaultTask; // Task for generating a build-info.properties file from a Project.\npublic abstract class BuildInfoProperties extends Object implements Serializable; // The properties that are written into the build-info.properties file.\n", "des": "Support for producing build info for consumption by Spring Boot's actuator."}
{"index": 2124, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "package bundling;\n\npublic interface BootArchive extends Task; // A Spring Boot \"fat\" archive task.\n@DisableCachingByDefault public abstract class BootBuildImage extends DefaultTask; // A Task for bundling an application into an OCI image using a buildpack.\n@DisableCachingByDefault(because=\"Not worth caching\") public abstract class BootJar extends Jar implements BootArchive; // A custom Jar task that produces a Spring Boot executable jar.\n@DisableCachingByDefault(because=\"Not worth caching\") public abstract class BootWar extends War implements BootArchive; // A custom War task that produces a Spring Boot executable war.\npublic class CacheSpec extends Object; // Configuration for an image building cache.\npublic abstract static class CacheSpec.VolumeCacheSpec extends Object; // Configuration for an image building cache stored in a Docker volume.\npublic abstract class DockerSpec extends Object; // Encapsulates Docker configuration options.\npublic abstract static class DockerSpec.DockerRegistrySpec extends Object; // Encapsulates Docker registry authentication configuration options.\npublic class LaunchScriptConfiguration extends Object implements Serializable; // Encapsulates the configuration of the launch script for an executable jar or war.\npublic abstract class LayeredSpec extends Object; // Encapsulates the configuration for a layered archive.\npublic static class LayeredSpec.ApplicationSpec extends LayeredSpec.IntoLayersSpec<LayeredSpec.IntoLayerSpec>; // An LayeredSpec.IntoLayersSpec that controls the layers to which application classes and resources belong.\npublic static class LayeredSpec.DependenciesIntoLayerSpec extends LayeredSpec.IntoLayerSpec; // Spec that controls the dependencies that should be part of a particular layer.\npublic static class LayeredSpec.DependenciesSpec extends LayeredSpec.IntoLayersSpec<LayeredSpec.DependenciesIntoLayerSpec> implements Serializable; // An LayeredSpec.IntoLayersSpec that controls the layers to which dependencies belong.\npublic static class LayeredSpec.IntoLayerSpec extends Object implements Serializable; // Spec that controls the content that should be part of a particular layer.\npublic abstract static class LayeredSpec.IntoLayersSpec<S extends LayeredSpec.IntoLayerSpec> extends Object implements Serializable; // Base class for specs that control the layers to which a category of content should belong.\npublic enum ZipCompression extends Enum<ZipCompression>; // An enumeration of supported compression options for an entry in a ZIP archive.\n", "des": "Support for creating executable jars and wars."}
{"index": 2125, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "package run;\n\n@DisableCachingByDefault(because=\"Application should always run\") public abstract class BootRun extends JavaExec; // Custom JavaExec task for running a Spring Boot application.\n", "des": "Support for running Spring Boot applications."}
{"index": 2126, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "package util;\n\npublic final class VersionExtractor extends Object; // Extracts version information for a Class.\n", "des": "Shared utility classes."}
{"index": 2127, "repo": "spring-context-support-6.0.11", "code": "package caffeine;\n\npublic class CaffeineCache extends org.springframework.cache.support.AbstractValueAdaptingCache; // Spring Cache adapter implementation on top of a Caffeine Cache instance.\npublic class CaffeineCacheManager extends Object implements org.springframework.cache.CacheManager; // CacheManager implementation that lazily builds CaffeineCache instances for each CaffeineCacheManager.getCache(java.lang.String) request.\n", "des": "Support classes for the open source cache in Caffeine library, allowing to set up Caffeine caches within Spring's cache abstraction."}
{"index": 2128, "repo": "spring-context-support-6.0.11", "code": "package jcache;\n\npackage jcache.config; // Support package for declarative JSR-107 caching configuration.\npackage jcache.interceptor; // AOP-based solution for declarative caching demarcation using JSR-107 annotations.\npublic class JCacheCache extends org.springframework.cache.support.AbstractValueAdaptingCache; // Cache implementation on top of a javax.cache.Cache instance.\npublic class JCacheCacheManager extends AbstractTransactionSupportingCacheManager; // CacheManager implementation backed by a JCache javax.cache.CacheManager.\npublic class JCacheManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<javax.cache.CacheManager>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // FactoryBean for a JCache javax.cache.CacheManager, obtaining a pre-defined CacheManager by name through the standard JCache javax.cache.Caching class.\n", "des": "Implementation package for JSR-107 (javax.cache aka \"JCache\") based caches."}
{"index": 2129, "repo": "spring-context-support-6.0.11", "code": "package config;\n\n@Configuration(proxyBeanMethods=false) public abstract class AbstractJCacheConfiguration extends org.springframework.cache.annotation.AbstractCachingConfiguration; // Abstract JSR-107 specific @Configuration class providing common structure for enabling JSR-107 annotation-driven cache management capability.\npublic interface JCacheConfigurer extends org.springframework.cache.annotation.CachingConfigurer; // Extension of CachingConfigurer for the JSR-107 implementation.\n@Deprecated(since=\"6.0\") public class JCacheConfigurerSupport extends org.springframework.cache.annotation.CachingConfigurerSupport implements JCacheConfigurer;\n@Configuration(proxyBeanMethods=false) @Role(2) public class ProxyJCacheConfiguration extends AbstractJCacheConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable proxy-based annotation-driven JSR-107 cache management.\n", "des": "Support package for declarative JSR-107 caching configuration."}
{"index": 2130, "repo": "spring-context-support-6.0.11", "code": "package interceptor;\n\npublic abstract class AbstractFallbackJCacheOperationSource extends Object implements JCacheOperationSource; // Abstract implementation of JCacheOperationSource that caches attributes for methods and implements a fallback policy: 1.\npublic abstract class AnnotationJCacheOperationSource extends AbstractFallbackJCacheOperationSource; // Implementation of the JCacheOperationSource interface that reads the JSR-107 CacheResult, CachePut, CacheRemove and CacheRemoveAll annotations.\npublic class BeanFactoryJCacheOperationSourceAdvisor extends org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor; // Advisor driven by a JCacheOperationSource, used to include a cache advice bean for methods that are cacheable.\npublic class DefaultJCacheOperationSource extends AnnotationJCacheOperationSource implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.SmartInitializingSingleton; // The default JCacheOperationSource implementation delegating default operations to configurable services with sensible defaults when not present.\npublic class JCacheAspectSupport extends org.springframework.cache.interceptor.AbstractCacheInvoker implements org.springframework.beans.factory.InitializingBean; // Base class for JSR-107 caching aspects, such as the JCacheInterceptor or an AspectJ aspect.\npublic class JCacheInterceptor extends JCacheAspectSupport implements org.aopalliance.intercept.MethodInterceptor, Serializable; // AOP Alliance MethodInterceptor for declarative cache management using JSR-107 caching annotations.\npublic interface JCacheOperation<A extends Annotation> extends org.springframework.cache.interceptor.BasicOperation, javax.cache.annotation.CacheMethodDetails<A>; // Model the base of JSR-107 cache operation through an interface contract.\npublic interface JCacheOperationSource; // Interface used by JCacheInterceptor.\n@Deprecated(since=\"6.0.10\", forRemoval=true) public abstract class JCacheOperationSourcePointcut extends org.springframework.aop.support.StaticMethodMatcherPointcut implements Serializable;\npublic class SimpleExceptionCacheResolver extends org.springframework.cache.interceptor.AbstractCacheResolver; // A simple CacheResolver that resolves the exception cache based on a configurable CacheManager and the name of the cache: CacheResultOperation.getExceptionCacheName().\n", "des": "AOP-based solution for declarative caching demarcation using JSR-107 annotations."}
{"index": 2131, "repo": "spring-context-support-6.0.11", "code": "package transaction;\n\npublic abstract class AbstractTransactionSupportingCacheManager extends org.springframework.cache.support.AbstractCacheManager; // Base class for CacheManager implementations that want to support built-in awareness of Spring-managed transactions.\npublic class TransactionAwareCacheDecorator extends Object implements org.springframework.cache.Cache; // Cache decorator which synchronizes its TransactionAwareCacheDecorator.put(java.lang.Object, java.lang.Object), TransactionAwareCacheDecorator.evict(java.lang.Object) and TransactionAwareCacheDecorator.clear() operations with Spring-managed transactions (through Spring's TransactionSynchronizationManager), performing the actual cache put/evict/clear operation only in the after-commit phase of a successful transaction.\npublic class TransactionAwareCacheManagerProxy extends Object implements org.springframework.cache.CacheManager, org.springframework.beans.factory.InitializingBean; // Proxy for a target CacheManager, exposing transaction-aware Cache objects which synchronize their Cache.put(java.lang.Object, java.lang.Object) operations with Spring-managed transactions (through Spring's TransactionSynchronizationManager), performing the actual cache put operation only in the after-commit phase of a successful transaction.\n", "des": "Transaction-aware decorators for the org.springframework.cache package."}
{"index": 2132, "repo": "spring-context-support-6.0.11", "code": "package mail;\n\npackage mail.javamail; // JavaMail support for Spring's mail infrastructure.\npublic class MailAuthenticationException extends MailException; // Exception thrown on failed authentication.\npublic abstract class MailException extends org.springframework.core.NestedRuntimeException; // Base class for all mail exceptions.\npublic interface MailMessage; // This is a common interface for mail messages, allowing a user to set key values required in assembling a mail message, without needing to know if the underlying message is a simple text message or a more sophisticated MIME message.\npublic class MailParseException extends MailException; // Exception thrown if illegal message properties are encountered.\npublic class MailPreparationException extends MailException; // Exception to be thrown by user code if a mail cannot be prepared properly, for example when a FreeMarker template cannot be rendered for the mail text.\npublic interface MailSender; // This interface defines a strategy for sending simple mails.\npublic class MailSendException extends MailException; // Exception thrown when a mail sending error is encountered.\npublic class SimpleMailMessage extends Object implements MailMessage, Serializable; // Models a simple mail message, including data such as the from, to, cc, subject, and text fields.\n", "des": "Spring's generic mail infrastructure."}
{"index": 2133, "repo": "spring-context-support-6.0.11", "code": "package javamail;\n\npublic class ConfigurableMimeFileTypeMap extends FileTypeMap implements org.springframework.beans.factory.InitializingBean; // Spring-configurable FileTypeMap implementation that will read MIME type to file extension mappings from a standard JavaMail MIME type mapping file, using a standard MimetypesFileTypeMap underneath.\npublic class InternetAddressEditor extends PropertyEditorSupport; // Editor for java.mail.internet.InternetAddress, to directly populate an InternetAddress property.\npublic interface JavaMailSender extends MailSender; // Extended MailSender interface for JavaMail, supporting MIME messages both as direct arguments and through preparation callbacks.\npublic class JavaMailSenderImpl extends Object implements JavaMailSender; // Production implementation of the JavaMailSender interface, supporting both JavaMail MimeMessages and Spring SimpleMailMessages.\npublic class MimeMailMessage extends Object implements MailMessage; // Implementation of the MailMessage interface for a JavaMail MIME message, to let message population code interact with a simple message or a MIME message through a common interface.\npublic class MimeMessageHelper extends Object; // Helper class for populating a MimeMessage.\n@FunctionalInterface public interface MimeMessagePreparator; // Callback interface for the preparation of JavaMail MIME messages.\n", "des": "JavaMail support for Spring's mail infrastructure."}
{"index": 2134, "repo": "spring-context-support-6.0.11", "code": "package quartz;\n\npublic class AdaptableJobFactory extends Object implements JobFactory; // JobFactory implementation that supports Runnable objects as well as standard Quartz Job instances.\npublic class CronTriggerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<CronTrigger>, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // A Spring FactoryBean for creating a Quartz CronTrigger instance, supporting bean-style usage for trigger configuration.\npublic class DelegatingJob extends Object implements Job; // Simple Quartz Job adapter that delegates to a given Runnable instance.\npublic class JobDetailFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobDetail>, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // A Spring FactoryBean for creating a Quartz JobDetail instance, supporting bean-style usage for JobDetail configuration.\npublic class JobMethodInvocationFailedException extends org.springframework.core.NestedRuntimeException; // Unchecked exception that wraps an exception thrown from a target method.\npublic class LocalDataSourceJobStore extends JobStoreCMT; // Subclass of Quartz's JobStoreCMT class that delegates to a Spring-managed DataSource instead of using a Quartz-managed JDBC connection pool.\npublic class LocalTaskExecutorThreadPool extends Object implements ThreadPool; // Quartz ThreadPool adapter that delegates to a Spring-managed Executor instance, specified on SchedulerFactoryBean.\npublic class MethodInvokingJobDetailFactoryBean extends org.springframework.beans.support.ArgumentConvertingMethodInvoker implements org.springframework.beans.factory.FactoryBean<JobDetail>, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // FactoryBean that exposes a JobDetail object which delegates job execution to a specified (static or non-static) method.\npublic static class MethodInvokingJobDetailFactoryBean.MethodInvokingJob extends QuartzJobBean; // Quartz Job implementation that invokes a specified method.\n", "des": "Support classes for the open source scheduler Quartz, allowing to set up Quartz Schedulers, JobDetails and Triggers as beans in a Spring context."}
{"index": 2135, "repo": "spring-context-support-6.0.11", "code": "package freemarker;\n\npublic class FreeMarkerConfigurationFactory extends Object; // Factory that configures a FreeMarker Configuration.\npublic class FreeMarkerConfigurationFactoryBean extends FreeMarkerConfigurationFactory implements org.springframework.beans.factory.FactoryBean<freemarker.template.Configuration>, org.springframework.beans.factory.InitializingBean, org.springframework.context.ResourceLoaderAware; // Factory bean that creates a FreeMarker Configuration and provides it as bean reference.\npublic abstract class FreeMarkerTemplateUtils extends Object; // Utility class for working with FreeMarker.\npublic class SpringTemplateLoader extends Object implements freemarker.cache.TemplateLoader; // FreeMarker TemplateLoader adapter that loads via a Spring ResourceLoader.\n", "des": "Support classes for setting up FreeMarker within a Spring application context."}
{"index": 2136, "repo": "wicket-core-10.0.0-M1", "code": "package wicket;\n\npackage wicket.authorization; // Contains classes that allow the user to specify authorization constraints via IAuthorizationStrategy.\npackage wicket.feedback; // Classes related to showing user feedback, generally as the result of form submission and/or validation.\npackage wicket.markup; // Base package for markup.\npackage wicket.model; // Core model support for Wicket components.\npackage wicket.resource; // Locale aware resouce loaders.\npackage wicket.response; // Several response implementations.\npackage wicket.validation; // This package provides interfaces for Wicket's validation support.\npublic abstract class Application extends Object implements ISessionStore.UnboundListener, IEventSink, IMetadataContext<Object,Application>; // Base class for all Wicket applications.\npublic class ApplicationListenerCollection extends org.apache.wicket.util.listener.ListenerCollection<IApplicationListener> implements IApplicationListener; // ListenerCollection for IApplicationListeners\npublic class AttributeModifier extends Behavior implements org.apache.wicket.util.io.IClusterable; // This class allows a tag attribute of a component to be modified dynamically with a value obtained from a model object.\npublic static enum AttributeModifier.MarkerValue extends Enum<AttributeModifier.MarkerValue>; // Special attribute value markers.\npublic class BehaviorInstantiationListenerCollection extends org.apache.wicket.util.listener.ListenerCollection<IBehaviorInstantiationListener> implements IBehaviorInstantiationListener; // ListenerCollection for IBehaviorInstantiationListeners\npublic enum ChildToDequeueType extends Enum<ChildToDequeueType>;\npublic abstract class ClassAttributeModifier extends AttributeAppender; // An AttributeModifier specialized in managing the CSS class attribute\npublic abstract class Component extends Object implements org.apache.wicket.util.io.IClusterable, IConverterLocator, IRequestableComponent, IHeaderContributor, org.apache.wicket.util.IHierarchical<Component>, IEventSink, IEventSource, IMetadataContext<Serializable,Component>, IFeedbackContributor; // Component serves as the highest level abstract base class for all components.\npublic class ConverterLocator extends Object implements IConverterLocator; // Implementation of IConverterLocator interface, which locates converters for a given type.\n", "des": "The core Wicket package."}
{"index": 2137, "repo": "wicket-core-10.0.0-M1", "code": "package authorization;\n\npublic class Action extends org.apache.wicket.util.lang.EnumeratedType; // A class for constructing singleton constants that represent a given component action that needs to be authorized.\npublic abstract class AuthorizationException extends WicketRuntimeException; // Base class for exceptions thrown as a result of authorization failure.\npublic interface IAuthorizationStrategy; // Authorization strategies specify aspect-like constraints on significant actions taken by the framework in a given application.\npublic static class IAuthorizationStrategy.AllowAllAuthorizationStrategy extends Object implements IAuthorizationStrategy;\n@FunctionalInterface public interface IUnauthorizedComponentInstantiationListener; // Interface to code that is called to handle unauthorized component instantiations.\n@FunctionalInterface public interface IUnauthorizedResourceRequestListener; // A listener that is notified when a request to some resource is not allowed.\npublic class UnauthorizedActionException extends AuthorizationException; // Exception that is thrown when an action is not authorized.\npublic class UnauthorizedInstantiationException extends AuthorizationException; // Exception that is thrown when the creation of a component is not allowed.\n", "des": "Contains classes that allow the user to specify authorization constraints via IAuthorizationStrategy."}
{"index": 2138, "repo": "wicket-core-10.0.0-M1", "code": "package lang;\n\npublic final class PropertyResolver extends Object; // This class parses expressions to lookup or set a value on the object that is given.\npublic abstract static class PropertyResolver.AbstractGetAndSet extends Object implements PropertyResolver.IGetAndSet;\npublic static class PropertyResolver.CachingPropertyLocator extends Object implements PropertyResolver.IPropertyLocator; // A wrapper for another PropertyResolver.IPropertyLocator that caches results of PropertyResolver.CachingPropertyLocator.get(Class, String).\npublic static class PropertyResolver.DefaultPropertyLocator extends Object implements PropertyResolver.IPropertyLocator; // Default locator supporting Java Beans properties, maps, lists and method invocations.\npublic static interface PropertyResolver.IGetAndSet; // A property to get and set.\npublic static interface PropertyResolver.IPropertyLocator; // A locator of properties.\npublic class PropertyResolverConverter extends Object implements org.apache.wicket.util.io.IClusterable;\npublic class WicketObjects extends Object; // Object (de)serialization utilities.\npublic static interface WicketObjects.IObjectSizeOfStrategy; // Interface that enables users to plugin the way object sizes are calculated with Wicket.\npublic static final class WicketObjects.SerializingObjectSizeOfStrategy extends Object implements WicketObjects.IObjectSizeOfStrategy; // WicketObjects.IObjectSizeOfStrategy that works by serializing the object to an instance of ByteCountingOutputStream, which records the number of bytes written to it.\n", "des": "Java utilities."}
{"index": 2139, "repo": "wicket-core-10.0.0-M1", "code": "package locator;\n\npublic final class EmptyResourceNameIterator extends ResourceNameIterator; // A ResourceNameIterator that doesn't find any resources.\npublic class ExtensionResourceNameIterator extends Object implements Iterator<String>; // Iterate over a set of extensions.\npublic interface IResourceNameIterator extends Iterator<String>; // Contains the logic to locate a resource based on a path, style (see Session), variation, locale and extension strings.\npublic interface IResourceStreamLocator; // Interface for code that locates resources, taking into account variations for locale and style.\npublic class LocaleResourceNameIterator extends Object implements Iterator<String>; // Given a Locale it'll iterate over all possible combinations of the attrs making up the Locale.\npublic class OsgiResourceStreamLocator extends ResourceStreamLocator; // OSGI specific resource stream factory\npublic class ResourceNameIterator extends Object implements IResourceNameIterator; // Contains the logic to locate a resource based on a path, style (see Session), variation, locale and extension strings.\npublic class ResourceStreamLocator extends Object implements IResourceStreamLocator; // Locates Wicket resources.\npublic class StyleAndVariationResourceNameIterator extends Object implements Iterator<String>; // Iterate over all possible combinations of style and variation\n", "des": "Locators for finding/ loading resources."}
{"index": 2140, "repo": "wicket-core-10.0.0-M1", "code": "package string;\n\npublic class ComponentRenderer extends Object; // A helper class for rendering components and pages.\npublic class ComponentStrings extends Object;\npublic final class CssUtils extends Object; // Utility methods for CSS.\npublic class JavaScriptStripper extends Object; // Strips comments and whitespace from javascript\npublic class JavaScriptUtils extends Object; // Provide some helpers to write javascript related tags to the response object.\n", "des": "String utilities."}
{"index": 2141, "repo": "wicket-core-10.0.0-M1", "code": "package feedback;\n\npublic class ComponentFeedbackMessageFilter extends Object implements IFeedbackMessageFilter; // Filter for accepting feedback messages for a particular component.\npublic class ContainerFeedbackMessageFilter extends Object implements IFeedbackMessageFilter; // Filter for child-of relationship\npublic class DefaultCleanupFeedbackMessageFilter extends Object implements IFeedbackMessageFilter; // The default message filter used to cleanup feedback messages.\npublic class ErrorLevelFeedbackMessageFilter extends Object implements IFeedbackMessageFilter; // Filter for accepting feedback messages with minimum level.\npublic class ExactLevelFeedbackMessageFilter extends Object implements IFeedbackMessageFilter; // Filter for accepting feedback messages of a certain error level.\npublic class FeedbackCollector extends Object; // Collects feedback messages from all the places where they can be stored.\npublic class FeedbackDelay extends Object implements Serializable, AutoCloseable; // Postpone calling IFeedback.beforeRender() after other components.\npublic class FeedbackMessage extends Object implements IDetachable; // Represents a generic message meant for the end-user/ pages.\npublic final class FeedbackMessages extends Object implements org.apache.wicket.util.io.IClusterable, Iterable<FeedbackMessage>; // Holds list of feedback messages.\npublic class FeedbackMessagesModel extends Object implements IModel<List<FeedbackMessage>>; // Model for extracting feedback messages.\npublic class FencedFeedbackPanel extends FeedbackPanel; // A specialized feedback panel that only displays messages from inside a fence defined by a container component.\npublic interface IFeedback; // Interface for components that present some kind of feedback to the user, normally based on the feedback messages attached to various components on a given page.\npublic interface IFeedbackContributor; // Implementations of this interface can contribute feedback messages\n@FunctionalInterface public interface IFeedbackMessageFilter extends org.apache.wicket.util.io.IClusterable, Predicate<FeedbackMessage>; // Interface for filtering feedback messages.\n", "des": "Classes related to showing user feedback, generally as the result of form submission and/or validation."}
{"index": 2142, "repo": "wicket-core-10.0.0-M1", "code": "package markup;\n\npackage markup.html; // Base package of HTML markup.\npackage markup.parser; // The default parsing engine of Wicket.\npackage markup.resolver; // Resolvers implement the IComponentResolver interface and must be registered with the application.\npackage markup.transformer; // Transformers are able to post-process (transform) the output generated by a Component.\npublic abstract class AbstractMarkupFragment extends Object implements IMarkupFragment; // A base implementation of IMarkupFragment.\npublic abstract class AbstractMarkupParser extends Object; // This is a base MarkupParser specifically for (X)HTML.\npublic class ComponentTag extends MarkupElement; // A subclass of MarkupElement which represents a \"significant\" markup tag, such as a component open tag.\npublic static interface ComponentTag.IAutoComponentFactory; // Factory that creates component during markup root container's initialization.\npublic class ContainerInfo extends Object; // Because Component has a reference to its parents, which eventually is the Page, keeping a \"copy\" of a component is very expensive.\npublic class DefaultMarkupCacheKeyProvider extends Object implements IMarkupCacheKeyProvider; // Wicket default implementation for the cache key used to reference the cached markup resource stream.\npublic class DefaultMarkupResourceStreamProvider extends Object implements IMarkupResourceStreamProvider; // Wicket default implementation for loading the markup resource stream associated with a MarkupContainer.\npublic class HtmlSpecialTag extends MarkupElement;\npublic interface IMarkupCache; // Each Wicket application has a single IMarkupCache associated with it (see MarkupSettings).\npublic interface IMarkupCacheKeyProvider; // To be implemented by MarkupContainers that wish to implement their own algorithms for the markup cache key.\npublic interface IMarkupFragment extends Iterable<MarkupElement>; // Any list of MarkupElements.\npublic interface IMarkupResourceStreamProvider; // To be implemented by MarkupContainer which wish to implement their own algorithms for loading the markup resource stream.\npublic class Markup extends AbstractMarkupFragment; // The content of a markup file, consisting of a list of markup elements.\npublic class MarkupCache extends Object implements IMarkupCache; // This is Wicket's default IMarkupCache implementation.\npublic static class MarkupCache.DefaultCacheImplementation<K,V> extends Object implements MarkupCache.ICache<K,V>;\npublic static interface MarkupCache.ICache<K,V>; // MarkupCache allows you to implement you own cache implementation.\n", "des": "Base package for markup."}
{"index": 2143, "repo": "wicket-core-10.0.0-M1", "code": "package html;\n\npackage html.basic; // Basic HTML components.\npackage html.border; // Border components.\npackage html.form; // HTML Forms and form components.\npackage html.image; // Image components.\npackage html.include; // Components for including content from non-Wicket sources.\npackage html.link; // Link components.\npackage html.list; // List components for tabular data and such.\npackage html.pages; // Default special purpose pages for error and feedback support.\npackage html.panel; // Panel components.\npublic enum CrossOrigin extends Enum<CrossOrigin>; // To be used for the crossOrigin attribute\npublic abstract class DecoratingHeaderResponse extends Object implements IHeaderResponse; // This is simply a helper implementation of IHeaderResponse that really delegates all of its method calls to the IHeaderResponse that is passed into the constructor.\npublic class GenericWebMarkupContainer<T> extends WebMarkupContainer implements IGenericComponent<T,GenericWebMarkupContainer<T>>; // A WebMarkupContainer with typesafe getters and setters for the model and its underlying object\npublic class GenericWebPage<T> extends WebPage implements IGenericComponent<T,GenericWebPage<T>>; // A WebPage with typesafe getters and setters for the model and its underlying object\npublic final class HeaderPartContainer extends WebMarkupContainer implements IComponentResolver; // For each wicket:head tag a HeaderPartContainer is created and added to the HtmlHeaderContainer which has been added to the Page.\npublic class HeaderResponseDecoratorCollection extends Object implements IHeaderResponseDecorator; // A collection of IHeaderResponseDecorators.\npublic class HTML5Attributes extends Behavior; // Behavior which renders HTML5 attributes.\npublic static class HTML5Attributes.InstantiationListener extends Object implements IComponentInstantiationListener; // A listener to instantiations of FormComponents to add HTML5 attributes.\npublic interface IComponentAwareHeaderContributor extends org.apache.wicket.util.io.IClusterable; // An interface to be implemented by Behaviors, IAjaxCallListeners.\npublic interface IHeaderContributor extends org.apache.wicket.util.io.IClusterable; // An interface to be implemented by application level listeners or other entities that wish to contribute to the header section of the page.\n", "des": "Base package of HTML markup."}
{"index": 2144, "repo": "wicket-core-10.0.0-M1", "code": "package basic;\n\npublic class EnclosureContainer extends WebMarkupContainer; // <wicket:enclosure> is nice and prevents that users have to add boilerplate to their application.\npublic class EnumLabel<T extends Enum<T>> extends WebComponent implements IGenericComponent<T,EnumLabel<T>>; // A Label component that is used to render an enum value.\npublic class Label extends WebComponent; // A Label component replaces its body with the String version of its model object returned by getModelObjectAsString().\npublic class MultiLineLabel extends WebComponent; // A MultiLineLabel component replaces its body with the model object.\n", "des": "Basic HTML components."}
{"index": 2145, "repo": "wicket-core-10.0.0-M1", "code": "package border;\n\npublic class Body extends WebMarkupContainer; // This is a simple Container component which can be used to build Border like components.\npublic abstract class Border extends WebMarkupContainer implements IComponentResolver, IQueueRegion; // A border component has associated markup which is drawn and determines placement of markup and/or components nested within the border component.\npublic class BorderBehavior extends Behavior; // This is a behavior implementation that can be used if you have markup that should be around a component.\npublic abstract class BorderPanel extends Panel; // Whereas a Panel replaces the body markup with the associated markup file, a BorderPanel assumes a that Body component renders the body markup including any number of Wicket Components.\n", "des": "Border components."}
{"index": 2146, "repo": "wicket-core-10.0.0-M1", "code": "package form;\n\npackage form.upload; // Support for upload forms (using multipart requests).\npackage form.validation; // Support for form validation.\npublic abstract class AbstractCheckSelector extends LabeledWebMarkupContainer implements IHeaderContributor; // Base class for all Javascript-based \"select-all\" checkboxes.\npublic abstract class AbstractChoice<T,E> extends FormComponent<T>; // Abstract base class for all choice (html select) options.\npublic static enum AbstractChoice.LabelPosition extends Enum<AbstractChoice.LabelPosition>; // An enumeration of possible positions of the label for a choice\npublic abstract class AbstractSingleSelectChoice<T> extends AbstractChoice<T,T>; // Abstract base class for single-select choices.\npublic abstract class AbstractSubmitLink extends AbstractLink implements IFormSubmittingComponent; // Abstract class for links that are capable of submitting a form.\npublic abstract class AbstractTextComponent<T> extends FormComponent<T>; // Abstract base class for TextArea and TextField.\npublic static interface AbstractTextComponent.ITextFormatProvider; // Text components that implement this interface are know to be able to provide a pattern for formatting output and parsing input.\npublic class AutoLabelResolver extends Object implements IComponentResolver; // Resolver that implements the wicket:for attribute functionality.\nprotected static class AutoLabelResolver.AutoLabel extends TransparentWebMarkupContainer; // Component that is attached to the <label> tag and takes care of writing out the label text as well as setting classes on the <label> tag\npublic static final class AutoLabelResolver.AutoLabelMarker extends Object implements Serializable; // Marker used to track whether or not a form component has an associated auto label by its mere presense as well as some attributes of the component across requests.\npublic class AutoLabelTagHandler extends AbstractMarkupFilter; // Markup filter that identifies tags with the wicket:for attribute.\npublic class AutoLabelTextResolver extends Object implements IComponentResolver; // Resolver that provides the <wicket:label> tag, which will output a FormComponent's label without requiring a manual extra component such as Label or FormComponentLabel.\npublic class Button extends FormComponent<String> implements IFormSubmittingComponent; // A form button.\n", "des": "HTML Forms and form components."}
{"index": 2147, "repo": "wicket-core-10.0.0-M1", "code": "package upload;\n\npublic class FileDescription extends Object implements Serializable; // Description of file properties as in browser client side.\npublic abstract class FilesSelectedBehavior extends OnChangeAjaxBehavior; // OnChangeAjaxBehavior that streams back to server properties of the selected file(s) (at client side), before uploading it (them).\npublic class FileUpload extends Object; // Model for file uploads.\npublic class FileUploadField extends FormComponent<List<FileUpload>>; // Form component that corresponds to a <input type=\"file\">.\npublic class MultiFileUploadField extends FormComponentPanel<Collection<FileUpload>>; // Form component that allows the user to select multiple files to upload via a single <input type=\"file\"/> field.\n", "des": "Support for upload forms (using multipart requests)."}
{"index": 2148, "repo": "wicket-core-10.0.0-M1", "code": "package validation;\n\npublic abstract class AbstractFormValidator extends Behavior implements IFormValidator; // Base class for IFormValidators.\npublic class EqualInputValidator extends AbstractFormValidator; // Validates that the input of two form components is identical.\npublic class EqualPasswordInputValidator extends EqualInputValidator; // Validates that the input of two form components is identical.\npublic class FormComponentFeedbackBorder extends Border implements IFeedback; // A border that can be placed around a form component to indicate when the bordered child/children has a validation error.\npublic class FormComponentFeedbackIndicator extends Panel implements IFeedback; // A panel that hides or shows itself depending on whether there are feedback messages for a given message filter.\npublic class FormValidatorAdapter extends Behavior implements IFormValidator; // Adapts IFormValidator to Behavior\npublic interface IFormValidator extends org.apache.wicket.util.io.IClusterable; // Interface that represents validators that check multiple components.\n", "des": "Support for form validation."}
{"index": 2149, "repo": "wicket-core-10.0.0-M1", "code": "package image;\n\npackage image.resource; // Resource support for image components.\npublic class ContextImage extends WebComponent; // Provides a context-relative image.\npublic class ContextPathGenerator extends Behavior; // A behavior that converts the provider url fragment to a context-relative url.\npublic class ExternalImage extends WebComponent; // A component to display external images.\npublic class ExternalSource extends ExternalImage; // A component which displays external images within a picture tag.\npublic class Image extends WebComponent implements IRequestListener; // An Image component displays localizable image resources.\npublic class InlineImage extends WebComponent; // The inline image is used to embed the complete image content within a HTML document.\npublic class NonCachingImage extends Image; // A subclass of Image that always adds random noise to the url every request to prevent the browser from caching the image.\npublic class Picture extends WebMarkupContainer; // A component which displays localizable image resources within source and image elements as responsive image.\npublic class Source extends Image; // A component which displays localizable image resources within a picture tag.\n", "des": "Image components."}
{"index": 2150, "repo": "wicket-core-10.0.0-M1", "code": "package resource;\n\npublic abstract class BlobImageResource extends DynamicImageResource; // An ImageResource subclass for dynamic images that come from database BLOB fields.\npublic class BufferedDynamicImageResource extends DynamicImageResource; // A DynamicImageResource subclass that holds a BufferedImage generated by code elsewhere.\npublic class DefaultButtonImageResource extends RenderedDynamicImageResource; // Automatically generates a basic button image.\npublic class DefaultButtonImageResourceFactory extends Object implements IResourceFactory; // A factory which creates default button images.\npublic final class LocalizedImageResource extends Object implements org.apache.wicket.util.io.IClusterable; // THIS CLASS IS INTENDED FOR INTERNAL USE IN IMPLEMENTING LOCALE SENSITIVE COMPONENTS THAT USE IMAGE RESOURCES AND SHOULD NOT BE USED DIRECTLY BY END-USERS.\npublic abstract class RenderedDynamicImageResource extends DynamicImageResource; // A DynamicImageResource subclass that allows easy rendering of regeneratable (unbuffered) dynamic images.\n", "des": "Resource support for image components."}
{"index": 2151, "repo": "wicket-core-10.0.0-M1", "code": "package include;\n\npublic class Include extends WebComponent implements IGenericComponent<String,Include>; // Component that includes/ renders the import result of an URL, much like JSP include.\n", "des": "Components for including content from non-Wicket sources."}
{"index": 2152, "repo": "wicket-core-10.0.0-M1", "code": "package link;\n\npublic abstract class AbstractLink extends WebMarkupContainer; // Base class that that contains functionality for rendering disabled links.\npublic class BookmarkablePageLink<T> extends Link<T>; // Renders a stable link which can be cached in a web browser and used at a later time.\npublic class ClientSideImageMap extends Panel; // A client-side image map implementation which allows you to \"attach\" the map to any existing Image component.\npublic class DisabledAttributeLinkBehavior extends Behavior; // A behavior to add attribute \"disabled\" to a Link component when it is disabled.\npublic class DownloadLink extends Link<File>; // A link that streams a file to the client.\npublic class ExternalLink extends AbstractLink; // A simple anchor link (<a href=\"http://url\">) pointing to any URL.\npublic class InlineFrame extends WebMarkupContainer implements IRequestListener; // Implementation of an inline frame component.\npublic abstract class Link<T> extends AbstractLink implements IRequestListener, IGenericComponent<T,Link<T>>; // Implementation of a hyperlink component.\npublic class PopupCloseLink<T> extends Link<T>; // Closes a popup window and cleans up any related session page map for the popup.\npublic static final class PopupCloseLink.ClosePopupPage extends WebPage; // ClosePopupPage closes the popup window.\npublic class PopupSettings extends Object implements org.apache.wicket.util.io.IClusterable; // A popup specification can be used as a property of the Linkclasses to specify that the link should be rendered with an onClick javascript event handler that opens a new window with the links' URL.\npublic class ResourceLink<T> extends Link<T> implements IRequestListener; // A link to any ResourceReference.\npublic abstract class StatelessLink<T> extends Link<T>; // This link is stateless that means that the url to this link could generate a new page before the link onClick is called.\n", "des": "Link components."}
{"index": 2153, "repo": "wicket-core-10.0.0-M1", "code": "package list;\n\npublic class AbstractItem extends WebMarkupContainer; // A very simple Item.\npublic class ListItem<T> extends LoopItem implements IGenericComponent<T,ListItem<T>>; // Container that holds components in a ListView.\npublic class ListItemModel<T> extends Object implements IModel<T>; // Model for list items.\npublic abstract class ListView<T> extends AbstractRepeater; // A ListView is a repeater that makes it easy to display/work with Lists.\npublic abstract class Loop extends AbstractRepeater; // A very simple loop component whose model is an Integer defining the number of iterations the loop should render.\npublic class LoopItem extends AbstractItem; // A very simple Item.\npublic class OddEvenListItem<T> extends ListItem<T>; // ListItem that adds class=\"odd\" or class=\"even\" html attribute depending on its index.\npublic abstract class PageableListView<T> extends ListView<T> implements IPageableItems; // PageableListView is similar to ListView but provides in addition pageable views.\npublic abstract class PropertyListView<T> extends ListView<T>; // Simple ListVew subclass that wraps its item models in a CompoundPropertyModel.\n", "des": "List components for tabular data and such."}
{"index": 2154, "repo": "wicket-core-10.0.0-M1", "code": "package pages;\n\npublic abstract class AbstractErrorPage extends WebPage; // A parent page for all pages that are used to show an error to the user.\npublic class AccessDeniedPage extends AbstractErrorPage; // Page expired error page.\npublic class BrowserInfoForm extends GenericPanel<ClientProperties>; // Form for posting JavaScript properties.\npublic class BrowserInfoPage extends WebPage; // This page uses a form post right after the page has loaded in the browser, using JavaScript or alternative means to detect and pass on settings to the embedded form.\npublic class ExceptionErrorPage extends AbstractErrorPage; // Shows a runtime exception on a nice HTML page.\npublic class InternalErrorPage extends AbstractErrorPage; // Internal error display page.\npublic class PageExpiredErrorPage extends AbstractErrorPage; // Page expired error page.\npublic class RedirectPage extends WebPage; // Page that let the browser redirect.\n", "des": "Default special purpose pages for error and feedback support."}
{"index": 2155, "repo": "wicket-core-10.0.0-M1", "code": "package panel;\n\npublic abstract class AbstractMarkupSourcingStrategy extends Object implements IMarkupSourcingStrategy; // Implements boilerplate as needed by many markup sourcing strategies.\npublic abstract class AssociatedMarkupSourcingStrategy extends AbstractMarkupSourcingStrategy; // Boilerplate for a markup sourcing strategy which retrieves the markup from associated markup files.\npublic class BorderMarkupSourcingStrategy extends AssociatedMarkupSourcingStrategy; // The Border component's markup sourcing strategy\npublic class ComponentFeedbackPanel extends FeedbackPanel; // Convenience feedback panel that filters the feedback messages based on the component given in the constructor.\npublic final class DefaultMarkupSourcingStrategy extends AbstractMarkupSourcingStrategy; // This is a no-op sourcing strategy implementing the default behavior for most components.\npublic final class EmptyPanel extends Panel; // Panel that does absolutely nothing and that can be used to display an empty block.\npublic class FeedbackPanel extends Panel implements IFeedback; // A panel that displays FeedbackMessages in a list view.\npublic class Fragment extends WebMarkupContainer implements IQueueRegion; // Usually you either have a markup file or a xml tag with wicket:id=\"myComponent\" to associate markup with a component.\npublic class FragmentMarkupSourcingStrategy extends AbstractMarkupSourcingStrategy; // A markup sourcing strategy suitable for Fragment components.\npublic class GenericPanel<T> extends Panel implements IGenericComponent<T,GenericPanel<T>>; // A Panel with typesafe getters and setters for the model and its underlying object\npublic interface IMarkupSourcingStrategy; // Markup sourcing strategies determine whether a Component behaves like a \"Panel\" pulling its Markup from an associated Markup file, or like a Fragment pulling it from a another components Markup.\npublic abstract class Panel extends WebMarkupContainer implements IQueueRegion; // A panel is a reusable component that holds markup and other components.\npublic class PanelMarkupSourcingStrategy extends AssociatedMarkupSourcingStrategy; // The Panel components markup sourcing strategy.\n", "des": "Panel components."}
{"index": 2156, "repo": "wicket-core-10.0.0-M1", "code": "package parser;\n\npackage parser.filter; // Default parsing extensions.\npublic abstract class AbstractMarkupFilter extends Object implements IMarkupFilter; // Base class for markup filters\npublic interface IMarkupFilter; // Wicket uses a streaming XML parser to read the markup.\npublic interface IXmlPullParser; // The interface of a streaming XML parser as required by Wicket.\npublic static enum IXmlPullParser.HttpTagType extends Enum<IXmlPullParser.HttpTagType>; // The last element found\npublic class TagStack extends Object; // Stack to push and pop HTML elements asserting its structure.\npublic final class XmlPullParser extends Object implements IXmlPullParser; // A fairly shallow markup pull parser which parses a markup string of a given type of markup (for example, html, xml, vxml or wml) into ComponentTag and RawMarkup tokens.\npublic class XmlTag extends Object; // A subclass of MarkupElement which represents a tag including namespace and its optional attributes.\npublic static enum XmlTag.TagType extends Enum<XmlTag.TagType>; // Enumerated type for different kinds of component tags.\n", "des": "The default parsing engine of Wicket."}
{"index": 2157, "repo": "wicket-core-10.0.0-M1", "code": "package filter;\n\npublic final class EnclosureHandler extends AbstractMarkupFilter implements IComponentResolver; // This is a markup inline filter.\npublic class HeadForceTagIdHandler extends AbstractMarkupFilter; // Handler that sets unique tag id for every inline script and style element in <wicket:head>, unless the element already has one.\npublic final class HtmlHandler extends AbstractMarkupFilter; // This is a markup inline filter.\npublic final class HtmlHeaderSectionHandler extends AbstractMarkupFilter; // This is a markup inline filter.\npublic final class HtmlProblemFinder extends AbstractMarkupFilter; // This is a markup inline filter which by default is not added to the list of markup filter.\npublic final class InlineEnclosureHandler extends AbstractMarkupFilter implements IComponentResolver; // This is a markup inline filter.\npublic class OpenCloseTagExpander extends AbstractMarkupFilter; // MarkupFilter that expands certain open-close tag as separate open and close tags.\npublic final class RelativePathPrefixHandler extends AbstractMarkupFilter implements IComponentResolver; // The purpose of this filter is to make all \"href\", \"src\" and \"background\" attributes found in the markup which contain a relative URL like \"myDir/myPage.gif\" actually resolve in the output HTML, by prefixing them with with an appropriate path to make the link work properly, even if the current page is being displayed at a mounted URL or whatever.\npublic final class RootMarkupFilter extends AbstractMarkupFilter; // This is the root of all filters, which retrieves the next xml element from the xml parser.\npublic final class StyleAndScriptIdentifier extends AbstractMarkupFilter; // An IMarkupFilter that wraps the body of all <style> elements and <script> elements which are plain JavaScript in CDATA blocks.\npublic class WicketContainerTagHandler extends AbstractMarkupFilter; // This markup filter warns if a wicket:container tag has an attribute besides wicket:id.\npublic class WicketLinkTagHandler extends AbstractMarkupFilter implements IComponentResolver; // This is a markup inline filter.\npublic final class WicketMessageTagHandler extends AbstractMarkupFilter implements IComponentResolver; // This is a markup inline filter and a component resolver.\npublic static class WicketMessageTagHandler.AttributeLocalizer extends Behavior; // Attribute localizing behavior.\npublic final class WicketNamespaceHandler extends AbstractMarkupFilter; // This is a markup inline filter.\n", "des": "Default parsing extensions."}
{"index": 2158, "repo": "wicket-core-10.0.0-M1", "code": "package resolver;\n\npublic final class AutoLinkResolver extends Object implements IComponentResolver; // The AutoLinkResolver is responsible to handle automatic link resolution.\npublic abstract static class AutoLinkResolver.AbstractAutolinkResolverDelegate extends Object implements AutoLinkResolver.IAutolinkResolverDelegate; // Abstract implementation that has a helper method for creating a resource reference.\npublic static final class AutoLinkResolver.AutolinkBookmarkablePageLink<T> extends BookmarkablePageLink<T> implements IComponentResolver; // Autolink components delegate component resolution to their parent components.\npublic static interface AutoLinkResolver.IAutolinkResolverDelegate; // Interface to delegate the actual resolving of auto components to.\npublic static final class AutoLinkResolver.PathInfo extends Object; // Encapsulates different aspects of a path.\npublic class ComponentResolvers extends Object; // Utility class for IComponentResolvers\npublic static interface ComponentResolvers.ResolverFilter;\npublic class HtmlHeaderResolver extends Object implements IComponentResolver; // This is a tag resolver which handles <head> and <wicket:head>tags.\npublic interface IComponentResolver extends org.apache.wicket.util.io.IClusterable; // IComponentResolvers are responsible for mapping component names to Wicket components.\npublic class WicketContainerResolver extends Object implements IComponentResolver; // This is a tag resolver which handles <wicket:container> Sometimes adding components in certain ways may lead to output of invalid markup.\npublic class WicketMessageResolver extends Object implements IComponentResolver; // This is a tag resolver which handles <wicket:message key=\"myKey\">Default Text</wicket:message>.\n", "des": "Resolvers implement the IComponentResolver interface and must be registered with the application."}
{"index": 2159, "repo": "wicket-core-10.0.0-M1", "code": "package transformer;\n\npublic abstract class AbstractOutputTransformerContainer extends MarkupContainer implements ITransformer; // This abstract container provides the means to post-process the markup generated by its child components (excluding the containers tag)\npublic abstract class AbstractTransformerBehavior extends Behavior implements ITransformer; // A Behavior which can be added to any component.\n@FunctionalInterface public interface ITransformer; // A common interface to be implemented by AbstractOutputTransformerContainers and AbstractTransformerBehaviors which post-process the output markup of a component.\npublic class NoopOutputTransformerContainer extends AbstractOutputTransformerContainer; // An implementation of an output transformer which does nothing.\npublic class XsltOutputTransformerContainer extends AbstractOutputTransformerContainer; // A container which output markup will be processes by a XSLT processor prior to writing the output into the web response.\npublic class XsltTransformer extends Object implements ITransformer; // A processor to XSLT transform the output generated by a Component.\npublic class XsltTransformerBehavior extends AbstractTransformerBehavior; // An IBehavior which can be added to any component except ListView.\n", "des": "Transformers are able to post-process (transform) the output generated by a Component."}
{"index": 2160, "repo": "wicket-core-10.0.0-M1", "code": "package model;\n\npublic abstract class AbstractPropertyModel<T> extends ChainingModel<T> implements IObjectClassAwareModel<T>, IPropertyReflectionAwareModel<T>; // Serves as a base class for different kinds of property models.\npublic class ChainingModel<T> extends Object implements IModel<T>; // This model and its subclasses support chaining of IModels.\npublic class ComponentDetachableModel<T> extends Object implements IComponentAssignedModel<T>; // Quick detachable model that is implements the IComponentAssignedModel and the IModel interfaces.\npublic class ComponentModel<T> extends Object implements IModel<T>, IComponentAssignedModel<T>; // Quick model that is implements the IComponentAssignedModel and the IModel interfaces.\npublic class ComponentPropertyModel<T> extends Object implements IComponentAssignedModel<T>; // A model that references a property by name on the current model of the component it is bound to.\npublic class CompoundPropertyModel<T> extends ChainingModel<T> implements IComponentInheritedModel<T>; // A simple compound model which uses the component's name as the property expression to retrieve properties on the nested model object.\npublic interface IComponentAssignedModel<T> extends IModel<T>; // Models that wish to substitute themselves with a wrapper when they are bound to a component (either through IModel parameter in a constructor or via a call to Component.setDefaultModel(IModel)) should implement this interface.\npublic interface IComponentInheritedModel<T> extends IModel<T>; // This is a marker interface for models that can be inherited from components higher in the hierarchy.\npublic interface IDetachable extends org.apache.wicket.util.io.IClusterable; // Interface to logic for detaching transient information from a detachable model.\n@FunctionalInterface public interface IModel<T> extends IDetachable; // A IModel wraps the actual model Object used by a Component.\n@FunctionalInterface public interface IModelComparator extends org.apache.wicket.util.io.IClusterable; // Implementations of this interface compare model object.\npublic interface IObjectClassAwareModel<T> extends IModel<T>; // Interface implemented by model that can provide class of the model object.\n", "des": "Core model support for Wicket components."}
{"index": 2161, "repo": "wicket-core-10.0.0-M1", "code": "package http;\n\npackage http.request; // This package contains http (web) protocol dependent implementations of request processing strategies.\npackage http.servlet; // Java Servlet specific implementation of Wicket http classes.\npublic abstract class AbstractRequestLogger extends Object implements IRequestLogger; // Base class that collects request and session information for request logging to enable rich information about the events that transpired during a single request.\npublic class AjaxEnclosureListener extends Object implements AjaxRequestTarget.IListener; // This listener adds Enclosures to AjaxTarget, where the child controller of the said Enclosure is already added.\npublic class BufferedWebResponse extends org.apache.wicket.request.http.WebResponse implements IMetaDataBufferingWebResponse; // Subclass of WebResponse that buffers the actions and performs those on another response.\npublic class ClientProperties extends Object implements org.apache.wicket.util.io.IClusterable; // Description of various user agent (browser) properties.\npublic class ContextParamWebApplicationFactory extends Object implements IWebApplicationFactory; // Factory that creates application objects based on the class name specified in the ContextParamWebApplicationFactory.APP_CLASS_PARAM context variable.\npublic class FetchMetadataResourceIsolationPolicy extends Object implements IResourceIsolationPolicy; // Default resource isolation policy used in ResourceIsolationRequestCycleListener, based on https://web.dev/fetch-metadata/.\npublic interface IMetaDataBufferingWebResponse; // Any kind of response that buffers meta data such as cookies and headers and can unbuffer it into another response\npublic interface IMultipartWebRequest; // An interface providing access to multipart content uploads of a WebRequest\npublic interface IRequestLogger; // Interface for the request logger and viewer.\npublic static interface IRequestLogger.ISessionLogInfo; // This interface can be implemented in a custom session object.\npublic static class IRequestLogger.RequestData extends Object implements org.apache.wicket.util.io.IClusterable; // This class hold the information one request of a session has.\npublic static class IRequestLogger.SessionData extends Object implements org.apache.wicket.util.io.IClusterable, Comparable<IRequestLogger.SessionData>; // This class hold the information one request of a session has.\n@FunctionalInterface public interface IResourceIsolationPolicy; // Interface for the resource isolation policies.\n", "des": "HTTP implementation."}
{"index": 2162, "repo": "wicket-core-10.0.0-M1", "code": "package request;\n\npublic class WebClientInfo extends ClientInfo; // Default client info object for web applications.\n", "des": "This package contains http (web) protocol dependent implementations of request processing strategies."}
{"index": 2163, "repo": "wicket-core-10.0.0-M1", "code": "package servlet;\n\npublic abstract class AbstractRequestWrapperFactory extends Object; // A factory of HttpServletRequest wrappers.\npublic class ErrorAttributes extends Object; // Represents additional error attributes present in a ServletRequest when the servlet container is handling an error or a forward to an error page mapped by error-page element in web.xml.\npublic class FilterFactoryManager extends Object implements Iterable<AbstractRequestWrapperFactory>; // A very simple manager for web filter factories.\npublic class ForwardAttributes extends Object; // Represents additional attributes present in a ServletRequest when the servlet container is handling a forward to another path than the initially requested one.\npublic abstract class MultipartServletWebRequest extends ServletWebRequest implements IMultipartWebRequest; // Servlet specific WebRequest subclass for multipart content uploads.\npublic class MultipartServletWebRequestImpl extends MultipartServletWebRequest; // Servlet specific WebRequest subclass for multipart content uploads.\npublic class ResponseIOException extends WicketRuntimeException implements IWicketInternalException; // Distinct IO exceptions from the those triggered while responding a request.\npublic class SecuredRemoteAddressRequestWrapperFactory extends AbstractRequestWrapperFactory; // Sets ServletRequest.isSecure() to true if ServletRequest.getRemoteAddr() matches one of the securedRemoteAddresses of this filter.\npublic static class SecuredRemoteAddressRequestWrapperFactory.Config extends Object;\npublic class ServletWebRequest extends org.apache.wicket.request.http.WebRequest; // WebRequest subclass that wraps a HttpServletRequest object.\npublic class ServletWebResponse extends org.apache.wicket.request.http.WebResponse; // WebResponse that wraps a ServletWebResponse.\npublic class UploadInfo extends Object implements org.apache.wicket.util.io.IClusterable; // Holds information about an upload, also has useful querying methods.\npublic class WicketSessionFilter extends Object implements jakarta.servlet.Filter; // This filter can be used to make the Wicket WebSession instances available to non-wicket servlets.\npublic class XForwardedRequestWrapper extends jakarta.servlet.http.HttpServletRequestWrapper; // See XForwardedFilter\npublic class XForwardedRequestWrapperFactory extends AbstractRequestWrapperFactory; // Request wrapper factory to integrate \"X-Forwarded-For\" and \"X-Forwarded-Proto\" HTTP headers.\npublic static class XForwardedRequestWrapperFactory.Config extends Object; // Filter Config\n", "des": "Java Servlet specific implementation of Wicket http classes."}
{"index": 2164, "repo": "wicket-core-10.0.0-M1", "code": "package resource;\n\npublic final class CircularDependencyException extends WicketRuntimeException; // Thrown when a circular dependency is detected between resources.\npublic class CompositeCssCompressor extends Object implements IScopeAwareTextResourceProcessor, ICssCompressor; // Used to apply several ICssCompressor to the CSS compression. Usage:\npublic class CompositeJavaScriptCompressor extends Object implements IScopeAwareTextResourceProcessor, IJavaScriptCompressor; // Used to apply several IJavaScriptCompressor to the javascript compression. Usage:\npublic class CoreLibrariesContributor extends Object; // A helper class that contributes all required JavaScript resources needed for Wicket Ajax functionality\npublic class CssUrlReplacer extends Object implements IScopeAwareTextResourceProcessor, ICssCompressor; // This compressor is used to replace URLs within CSS files with URLs created from PackageResourceReferences that belongs to their corresponding resources (e.g images).The scope of the CSS file is used to create the PackageResourceReferences.\npublic class FileSystemJarPathService extends Object implements FileSystemPathService; // Gets the actual path for a jar file system\npublic interface FileSystemPathService; // Gets the actual path for a specific file system.\npublic class FileSystemResource extends AbstractResource; // Used to provide resources based on the on Java NIO FileSystem API. For more information see FileSystemResourceReference\npublic class FileSystemResourceReference extends ResourceReference; // This resource reference is used to provide a reference to a resource based on Java NIO FileSystem API. To implement a mime type detection refer to the documentation of Files.probeContentType(Path) and provide an implementation for java.nio.file.spi.FileTypeDetector in the META-INF/services folder for jars or in the /WEB-INF/classes/META-INF/services folder for webapps You can optionally override FileSystemResourceReference.getFileSystemResource() to provide an inline mime type detection, which is preferred to the default detection. Example:\n@FunctionalInterface public interface IPropertiesChangeListener; // To be implemented by listeners interested in PropertiesFactory events fired after a change to the properties has been detected\npublic interface IPropertiesFactory; // Implementations are responsible for locating Properties objects, which are a thin wrapper around ValueMap and is used to locate localized messages.\npublic interface IPropertiesFactoryContext; // environment required for properties factory\npublic interface IPropertiesLoader; // Property loaders as used by PropertiesFactory to load properties\n", "des": "Locale aware resouce loaders."}
{"index": 2165, "repo": "wicket-core-10.0.0-M1", "code": "package response;\n\npublic class ByteArrayResponse extends org.apache.wicket.request.Response; // Response used to capture output as a byte array\npublic class NullResponse extends org.apache.wicket.request.Response; // Response implementation that discards all output.\npublic class StringResponse extends org.apache.wicket.request.Response; // Response object that writes to an AppendingStringBuffer.\n", "des": "Several response implementations."}
{"index": 2166, "repo": "wicket-core-10.0.0-M1", "code": "package cookies;\n\npublic class CookieDefaults extends Object implements org.apache.wicket.util.io.IClusterable; // This class provides default values that are used by CookieUtils class when it creates cookies.\npublic static enum CookieDefaults.SameSite extends Enum<CookieDefaults.SameSite>;\npublic class CookieUtils extends Object; // Helper class to simplify Cookie handling.\n", "des": "Persistence support for forms."}
{"index": 2167, "repo": "wicket-core-10.0.0-M1", "code": "package template;\n\npublic final class CssTemplate extends TextTemplateDecorator; // Decorates a TextTemplate with CSS tags.\npublic final class JavaScriptTemplate extends TextTemplateDecorator; // Decorates a TextTemplate with JavaScript tags.\npublic class PackageTextTemplate extends TextTemplate; // A String resource that can be appended to.\npublic abstract class TextTemplate extends org.apache.wicket.util.resource.AbstractStringResourceStream; // Represents a text template that can do variable interpolation.\npublic abstract class TextTemplateDecorator extends TextTemplate; // Provides the ability to 'decorate' the actual template contents before it is contributed to the header.\n", "des": "Resource extensions that make working with header contributions easier and more maintainable."}
{"index": 2168, "repo": "wicket-core-10.0.0-M1", "code": "package tester;\n\npublic class BaseWicketTester extends Object; // A helper class to ease unit testing of Wicket applications without the need for a servlet container.\npublic static class BaseWicketTester.StartComponentInPage extends WebPage; // A page that is used as the automatically created page for BaseWicketTester.startComponentInPage(Class) and the other variations.\npublic final class DiffUtil extends Object; // This is a utility class.\npublic class DummyHomePage extends WebPage; // A dummy home page, as required by WicketTester.\npublic class DummyPanelPage extends WebPage; // A dummy Panel Component.\npublic class FormTester extends Object; // A helper class for testing validation and submission of FormComponents.\npublic class Result extends Object; // A Result class.\npublic class TagTester extends Object; // Tag tester is used to test that a generated markup tag contains the correct attributes, values etc.\npublic abstract class WicketTestCase extends Object; // Base class for tests which require comparing wicket response with a file.\npublic class WicketTester extends BaseWicketTester; // A helper class to ease unit testing of Wicket applications without the need for a servlet container.\npublic class WicketTesterExtension extends Object implements org.junit.jupiter.api.extension.BeforeTestExecutionCallback, org.junit.jupiter.api.extension.AfterTestExecutionCallback, org.junit.jupiter.api.extension.TestExecutionExceptionHandler; // Manages WicketTester instance\npublic class WicketTesterHelper extends Object; // A WicketTester-specific helper class.\npublic static class WicketTesterHelper.ComponentData extends Object implements org.apache.wicket.util.io.IClusterable; // ComponentData class.\n", "des": "A package with utility classes to ease unit testing of Wicket applications without the need for a servlet container."}
{"index": 2169, "repo": "wicket-core-10.0.0-M1", "code": "package validation;\n\npackage validation.validator; // This package provides an implementation of Wicket's validation support.\npublic class CompoundValidator<T> extends Behavior implements IValidator<T>; // A compound IValidator.\npublic interface IErrorMessageSource; // Interface representing a message source that stores messages by key and can perform variable substitution.\npublic interface INullAcceptingValidator<T> extends IValidator<T>; // Marker interface for validators that will accept a null value.\npublic interface IValidatable<T>; // Interface representing any object that can be validated.\npublic interface IValidationError extends org.apache.wicket.util.io.IClusterable; // Interface representing a validation error.\n@FunctionalInterface public interface IValidator<T> extends org.apache.wicket.util.io.IClusterable; // Interface representing a validator that can validate an IValidatable object.\npublic class RawValidationError extends Object implements IValidationError; // An IValidationError implementation that just keeps a Serializable error message.\npublic class Validatable<T> extends Object implements IValidatable<T>; // This implementation of IValidatable is meant to be used outside of Wicket.\npublic final class ValidationError extends Object implements IValidationError; // A versatile implementation of IValidationError that supports message resolution from IErrorMessageSource, default message (if none of the keys matched), and variable substitution.\npublic class ValidatorAdapter<T> extends Behavior implements IValidator<T>; // Adapts IValidator to Behavior\n", "des": "This package provides interfaces for Wicket's validation support."}
{"index": 2170, "repo": "wicket-core-10.0.0-M1", "code": "package validator;\n\npublic abstract class AbstractRangeValidator<R extends Comparable<? super R> & Serializable,V extends Serializable> extends Behavior implements IValidator<V>; // Base class for validators that check if a given value falls within [min,max] range.\npublic static enum AbstractRangeValidator.Mode extends Enum<AbstractRangeValidator.Mode>; // Validator mode\npublic class CreditCardValidator extends Object implements IValidator<String>; // Checks if a credit card number is valid.\npublic static enum CreditCardValidator.CreditCard extends Enum<CreditCardValidator.CreditCard>;\npublic class DateValidator extends RangeValidator<Date>; // Validator for checking if a given date falls within [min,max] range.\npublic class EmailAddressValidator extends PatternValidator; // Validator for checking the form/pattern of email addresses.\npublic class PatternValidator extends Object implements IValidator<String>; // Validates an IValidatable by matching the value against a regular expression pattern.\npublic class RangeValidator<Z extends Comparable<? super Z> & Serializable> extends AbstractRangeValidator<Z,Z>; // Validator for checking if a given value falls within [min,max] range.\npublic class StringValidator extends AbstractRangeValidator<Integer,String>; // Validator for checking if length of a string falls within [min,max] range.\npublic class UrlValidator extends Object implements IValidator<String>; // Validator for checking URLs.\n", "des": "This package provides an implementation of Wicket's validation support."}
{"index": 2171, "repo": "wicket-spring-10.0.0-M1", "code": "package annot;\n\npublic class AnnotProxyFieldValueFactory extends Object implements org.apache.wicket.injection.IFieldValueFactory; // IFieldValueFactory that uses LazyInitProxyFactory to create proxies for Spring dependencies based on the SpringBean annotation applied to a field.\n@Retention(RUNTIME) @Target(FIELD) @Documented public @interface SpringBean; // Annotation used to tag a field as a placeholder for a spring bean.\npublic class SpringComponentInjector extends org.apache.wicket.injection.Injector implements org.apache.wicket.application.IComponentInstantiationListener, org.apache.wicket.IBehaviorInstantiationListener; // IComponentInstantiationListener that injects component and behavior properties annotated with SpringBean annotations.\n", "des": "This package contains all the classes to make your wicket components and other pojos @SpringBean annotation aware."}
{"index": 2172, "repo": "spring-security-web-6.1.2", "code": "package web;\n\npackage web.access; // Access-control related classes and packages.\npackage web.authentication; // Authentication processing mechanisms, which respond to the submission of authentication credentials using various protocols (eg BASIC, CAS, form login etc).\npackage web.context; // Classes which are responsible for maintaining the security context between HTTP requests.\npackage web.jaasapi; // Makes a JAAS Subject available as the current Subject.\npackage web.jackson2; // Mix-in classes to provide Jackson serialization support.\npackage web.savedrequest; // Classes related to the caching of an HttpServletRequest which requires authentication.\npackage web.servletapi; // Populates a Servlet request with a new Spring Security compliant HttpServletRequestWrapper.\npackage web.session; // Session management filters, HttpSession events and publisher classes.\npackage web.util; // Web utility classes.\npublic interface AuthenticationEntryPoint; // Used by ExceptionTranslationFilter to commence an authentication scheme.\npublic class DefaultRedirectStrategy extends Object implements RedirectStrategy; // Simple implementation of RedirectStrategy which is the default used throughout the framework.\npublic final class DefaultSecurityFilterChain extends Object implements SecurityFilterChain; // Standard implementation of SecurityFilterChain.\npublic class FilterChainProxy extends org.springframework.web.filter.GenericFilterBean; // Delegates Filter requests to a list of Spring-managed filter beans.\npublic static interface FilterChainProxy.FilterChainDecorator; // A strategy for decorating the provided filter chain with one that accounts for the SecurityFilterChain for a given request.\npublic static interface FilterChainProxy.FilterChainValidator;\npublic static final class FilterChainProxy.VirtualFilterChainDecorator extends Object implements FilterChainProxy.FilterChainDecorator; // A FilterChainProxy.FilterChainDecorator that uses the FilterChainProxy.VirtualFilterChain\npublic class FilterInvocation extends Object; // Holds objects associated with a HTTP filter.\npublic final class ObservationFilterChainDecorator extends Object implements FilterChainProxy.FilterChainDecorator; // A FilterChainProxy.FilterChainDecorator that wraps the chain in before and after observations\npublic interface PortMapper; // PortMapper implementations provide callers with information about which HTTP ports are associated with which HTTPS ports on the system, and vice versa.\npublic class PortMapperImpl extends Object implements PortMapper; // Concrete implementation of PortMapper that obtains HTTP:HTTPS pairs from the application context.\n", "des": "Spring Security's web security module."}
{"index": 2173, "repo": "spring-security-web-6.1.2", "code": "package access;\n\npackage access.channel; // Classes that ensure web requests are received over required transport channels.\npackage access.expression; // Implementation of web security expressions.\npackage access.intercept; // Enforcement of security for HTTP requests, typically by the URL requested.\npublic interface AccessDeniedHandler; // Used by ExceptionTranslationFilter to handle an AccessDeniedException.\npublic class AccessDeniedHandlerImpl extends Object implements AccessDeniedHandler; // Base implementation of AccessDeniedHandler.\npublic final class AuthorizationManagerWebInvocationPrivilegeEvaluator extends Object implements WebInvocationPrivilegeEvaluator, org.springframework.web.context.ServletContextAware; // An implementation of WebInvocationPrivilegeEvaluator which delegates the checks to an instance of AuthorizationManager\npublic final class CompositeAccessDeniedHandler extends Object implements AccessDeniedHandler;\n@Deprecated public class DefaultWebInvocationPrivilegeEvaluator extends Object implements WebInvocationPrivilegeEvaluator, org.springframework.web.context.ServletContextAware;\npublic final class DelegatingAccessDeniedHandler extends Object implements AccessDeniedHandler; // An AccessDeniedHandler that delegates to other AccessDeniedHandler instances based upon the type of AccessDeniedException passed into DelegatingAccessDeniedHandler.handle(HttpServletRequest, HttpServletResponse, AccessDeniedException).\npublic class ExceptionTranslationFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.MessageSourceAware; // Handles any AccessDeniedException and AuthenticationException thrown within the filter chain.\npublic final class ObservationMarkingAccessDeniedHandler extends Object implements AccessDeniedHandler;\npublic final class RequestMatcherDelegatingAccessDeniedHandler extends Object implements AccessDeniedHandler; // An AccessDeniedHandler that delegates to other AccessDeniedHandler instances based upon the type of HttpServletRequest passed into RequestMatcherDelegatingAccessDeniedHandler.handle(HttpServletRequest, HttpServletResponse, AccessDeniedException).\npublic final class RequestMatcherDelegatingWebInvocationPrivilegeEvaluator extends Object implements WebInvocationPrivilegeEvaluator, org.springframework.web.context.ServletContextAware; // A WebInvocationPrivilegeEvaluator which delegates to a list of WebInvocationPrivilegeEvaluator based on a RequestMatcher evaluation\npublic interface WebInvocationPrivilegeEvaluator; // Allows users to determine whether they have privileges for a given web URI.\n", "des": "Access-control related classes and packages."}
{"index": 2174, "repo": "spring-security-web-6.1.2", "code": "package channel;\n\npublic abstract class AbstractRetryEntryPoint extends Object implements ChannelEntryPoint;\npublic interface ChannelDecisionManager; // Decides whether a web channel provides sufficient security.\npublic class ChannelDecisionManagerImpl extends Object implements ChannelDecisionManager, org.springframework.beans.factory.InitializingBean; // Implementation of ChannelDecisionManager.\npublic interface ChannelEntryPoint; // May be used by a ChannelProcessor to launch a web channel.\npublic class ChannelProcessingFilter extends org.springframework.web.filter.GenericFilterBean; // Ensures a web request is delivered over the required channel.\npublic interface ChannelProcessor; // Decides whether a web channel meets a specific security condition.\npublic class InsecureChannelProcessor extends Object implements org.springframework.beans.factory.InitializingBean, ChannelProcessor; // Ensures channel security is inactive by review of HttpServletRequest.isSecure() responses.\npublic class RetryWithHttpEntryPoint extends AbstractRetryEntryPoint; // Commences an insecure channel by retrying the original request using HTTP.\npublic class RetryWithHttpsEntryPoint extends AbstractRetryEntryPoint; // Commences a secure channel by retrying the original request using HTTPS.\npublic class SecureChannelProcessor extends Object implements org.springframework.beans.factory.InitializingBean, ChannelProcessor; // Ensures channel security is active by review of HttpServletRequest.isSecure() responses.\n", "des": "Classes that ensure web requests are received over required transport channels."}
{"index": 2175, "repo": "spring-security-web-6.1.2", "code": "package expression;\n\npublic class DefaultHttpSecurityExpressionHandler extends org.springframework.security.access.expression.AbstractSecurityExpressionHandler<RequestAuthorizationContext> implements org.springframework.security.access.expression.SecurityExpressionHandler<RequestAuthorizationContext>; // A SecurityExpressionHandler that uses a RequestAuthorizationContext to create a WebSecurityExpressionRoot.\npublic class DefaultWebSecurityExpressionHandler extends org.springframework.security.access.expression.AbstractSecurityExpressionHandler<FilterInvocation> implements org.springframework.security.access.expression.SecurityExpressionHandler<FilterInvocation>;\npublic final class ExpressionBasedFilterInvocationSecurityMetadataSource extends DefaultFilterInvocationSecurityMetadataSource; // Expression-based FilterInvocationSecurityMetadataSource.\npublic final class WebExpressionAuthorizationManager extends Object implements org.springframework.security.authorization.AuthorizationManager<RequestAuthorizationContext>; // An expression-based AuthorizationManager that determines the access by evaluating the provided expression.\n@Deprecated public class WebExpressionVoter extends Object implements org.springframework.security.access.AccessDecisionVoter<FilterInvocation>;\npublic class WebSecurityExpressionRoot extends org.springframework.security.access.expression.SecurityExpressionRoot;\n", "des": "Implementation of web security expressions."}
{"index": 2176, "repo": "spring-security-web-6.1.2", "code": "package intercept;\n\npublic class AuthorizationFilter extends org.springframework.web.filter.GenericFilterBean; // An authorization filter that restricts access to the URL using AuthorizationManager.\npublic class DefaultFilterInvocationSecurityMetadataSource extends Object implements FilterInvocationSecurityMetadataSource; // Default implementation of FilterInvocationDefinitionSource.\npublic interface FilterInvocationSecurityMetadataSource extends org.springframework.security.access.SecurityMetadataSource; // Marker interface for SecurityMetadataSource implementations that are designed to perform lookups keyed on FilterInvocations.\n@Deprecated public class FilterSecurityInterceptor extends org.springframework.security.access.intercept.AbstractSecurityInterceptor implements jakarta.servlet.Filter;\npublic final class RequestAuthorizationContext extends Object; // An HttpServletRequest authorization context.\npublic class RequestKey extends Object;\npublic final class RequestMatcherDelegatingAuthorizationManager extends Object implements org.springframework.security.authorization.AuthorizationManager<jakarta.servlet.http.HttpServletRequest>; // An AuthorizationManager which delegates to a specific AuthorizationManager based on a RequestMatcher evaluation.\npublic static final class RequestMatcherDelegatingAuthorizationManager.Builder extends Object; // A builder for RequestMatcherDelegatingAuthorizationManager.\n", "des": "Enforcement of security for HTTP requests, typically by the URL requested."}
{"index": 2177, "repo": "spring-security-web-6.1.2", "code": "package authentication;\n\npackage authentication.logout; // Logout functionality based around a filter which handles a specific logout URL.\npackage authentication.preauth; // Support for \"pre-authenticated\" scenarios, where Spring Security assumes the incoming request has already been authenticated by some externally configured system.\npackage authentication.rememberme; // Support for remembering a user between different web sessions.\npackage authentication.session; // Strategy interface and implementations for handling session-related behaviour for a newly authenticated user.\npackage authentication.switchuser; // Provides HTTP-based \"switch user\" (su) capabilities.\npackage authentication.ui; // Authentication user-interface rendering code.\npackage authentication.www; // WWW-Authenticate based authentication mechanism implementations: Basic and Digest authentication.\npublic abstract class AbstractAuthenticationProcessingFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.MessageSourceAware; // Abstract processor of browser-based HTTP-based authentication requests.\npublic abstract class AbstractAuthenticationTargetUrlRequestHandler extends Object; // Base class containing the logic used by strategies which handle redirection to a URL and are passed an Authentication object as part of the contract.\npublic class AnonymousAuthenticationFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.beans.factory.InitializingBean; // Detects if there is no Authentication object in the SecurityContextHolder, and populates it with one if needed.\npublic interface AuthenticationConverter; // A strategy used for converting from a HttpServletRequest to an Authentication of particular type.\npublic class AuthenticationEntryPointFailureHandler extends Object implements AuthenticationFailureHandler; // Adapts a AuthenticationEntryPoint into a AuthenticationFailureHandler\npublic interface AuthenticationFailureHandler; // Strategy used to handle a failed authentication attempt.\npublic class AuthenticationFilter extends org.springframework.web.filter.OncePerRequestFilter; // A Filter that performs authentication of a particular request.\npublic interface AuthenticationSuccessHandler; // Strategy used to handle a successful user authentication.\npublic class DelegatingAuthenticationEntryPoint extends Object implements AuthenticationEntryPoint, org.springframework.beans.factory.InitializingBean; // An AuthenticationEntryPoint which selects a concrete AuthenticationEntryPoint based on a RequestMatcher evaluation.\n", "des": "Authentication processing mechanisms, which respond to the submission of authentication credentials using various protocols (eg BASIC, CAS, form login etc)."}
{"index": 2178, "repo": "spring-security-web-6.1.2", "code": "package logout;\n\npublic final class CompositeLogoutHandler extends Object implements LogoutHandler; // Performs a logout through all the LogoutHandler implementations.\npublic final class CookieClearingLogoutHandler extends Object implements LogoutHandler; // A logout handler which clears either - A defined list of cookie names, using the context path as the cookie path OR - A given list of Cookies\npublic class DelegatingLogoutSuccessHandler extends Object implements LogoutSuccessHandler; // Delegates to logout handlers based on matched request matchers\npublic class ForwardLogoutSuccessHandler extends Object implements LogoutSuccessHandler; // LogoutSuccessHandler implementation that will perform a request dispatcher \"forward\" to the specified target URL.\npublic final class HeaderWriterLogoutHandler extends Object implements LogoutHandler;\npublic class HttpStatusReturningLogoutSuccessHandler extends Object implements LogoutSuccessHandler; // Implementation of the LogoutSuccessHandler.\npublic class LogoutFilter extends org.springframework.web.filter.GenericFilterBean; // Logs a principal out.\npublic interface LogoutHandler; // Indicates a class that is able to participate in logout handling.\npublic final class LogoutSuccessEventPublishingLogoutHandler extends Object implements LogoutHandler, org.springframework.context.ApplicationEventPublisherAware; // A logout handler which publishes LogoutSuccessEvent\npublic interface LogoutSuccessHandler; // Strategy that is called after a successful logout by the LogoutFilter, to handle redirection or forwarding to the appropriate destination.\npublic class SecurityContextLogoutHandler extends Object implements LogoutHandler; // Performs a logout by modifying the SecurityContextHolder.\npublic class SimpleUrlLogoutSuccessHandler extends AbstractAuthenticationTargetUrlRequestHandler implements LogoutSuccessHandler; // Handles the navigation on logout by delegating to the AbstractAuthenticationTargetUrlRequestHandler base class logic.\n", "des": "Logout functionality based around a filter which handles a specific logout URL."}
{"index": 2179, "repo": "spring-security-web-6.1.2", "code": "package preauth;\n\npackage preauth.j2ee; // Pre-authentication support for container-authenticated requests.\npackage preauth.websphere; // Websphere-specific pre-authentication classes.\npackage preauth.x509; // X.509 client certificate authentication support.\npublic abstract class AbstractPreAuthenticatedProcessingFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.ApplicationEventPublisherAware; // Base class for processing filters that handle pre-authenticated authentication requests, where it is assumed that the principal has already been authenticated by an external system.\npublic class PreAuthenticatedAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider, org.springframework.beans.factory.InitializingBean, org.springframework.core.Ordered; // Processes a pre-authenticated authentication request.\npublic class PreAuthenticatedAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // Authentication implementation for pre-authenticated authentication.\npublic class PreAuthenticatedCredentialsNotFoundException extends org.springframework.security.core.AuthenticationException;\npublic class PreAuthenticatedGrantedAuthoritiesUserDetailsService extends Object implements org.springframework.security.core.userdetails.AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>; // This AuthenticationUserDetailsService implementation creates a UserDetails object based solely on the information contained in the given PreAuthenticatedAuthenticationToken.\npublic class PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails extends WebAuthenticationDetails implements org.springframework.security.core.authority.GrantedAuthoritiesContainer; // This WebAuthenticationDetails implementation allows for storing a list of pre-authenticated Granted Authorities.\npublic class RequestAttributeAuthenticationFilter extends AbstractPreAuthenticatedProcessingFilter; // A simple pre-authenticated filter which obtains the username from request attributes, for use with SSO systems such as Stanford WebAuth or Shibboleth.\npublic class RequestHeaderAuthenticationFilter extends AbstractPreAuthenticatedProcessingFilter; // A simple pre-authenticated filter which obtains the username from a request header, for use with systems such as CA Siteminder.\n", "des": "Support for \"pre-authenticated\" scenarios, where Spring Security assumes the incoming request has already been authenticated by some externally configured system."}
{"index": 2180, "repo": "spring-security-web-6.1.2", "code": "package j2ee;\n\npublic class J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource extends Object implements org.springframework.security.authentication.AuthenticationDetailsSource<jakarta.servlet.http.HttpServletRequest,PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails>, org.springframework.beans.factory.InitializingBean; // Implementation of AuthenticationDetailsSource which converts the user's J2EE roles (as obtained by calling HttpServletRequest.isUserInRole(String)) into GrantedAuthoritys and stores these in the authentication details object.\npublic class J2eePreAuthenticatedProcessingFilter extends AbstractPreAuthenticatedProcessingFilter; // This AbstractPreAuthenticatedProcessingFilter implementation is based on the J2EE container-based authentication mechanism.\npublic class WebXmlMappableAttributesRetriever extends Object implements org.springframework.context.ResourceLoaderAware, org.springframework.security.core.authority.mapping.MappableAttributesRetriever, org.springframework.beans.factory.InitializingBean; // This MappableAttributesRetriever implementation reads the list of defined J2EE roles from a web.xml file and returns these from { WebXmlMappableAttributesRetriever.getMappableAttributes().\n", "des": "Pre-authentication support for container-authenticated requests."}
{"index": 2181, "repo": "spring-security-web-6.1.2", "code": "package websphere;\n\npublic class WebSpherePreAuthenticatedProcessingFilter extends AbstractPreAuthenticatedProcessingFilter; // This AbstractPreAuthenticatedProcessingFilter implementation is based on WebSphere authentication.\npublic class WebSpherePreAuthenticatedWebAuthenticationDetailsSource extends Object implements org.springframework.security.authentication.AuthenticationDetailsSource<jakarta.servlet.http.HttpServletRequest,PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails>; // This AuthenticationDetailsSource implementation will set the pre-authenticated granted authorities based on the WebSphere groups for the current WebSphere user, mapped using the configured Attributes2GrantedAuthoritiesMapper.\n", "des": "Websphere-specific pre-authentication classes."}
{"index": 2182, "repo": "spring-security-web-6.1.2", "code": "package x509;\n\npublic class SubjectDnX509PrincipalExtractor extends Object implements X509PrincipalExtractor, org.springframework.context.MessageSourceAware; // Obtains the principal from a certificate using a regular expression match against the Subject (as returned by a call to X509Certificate.getSubjectDN()).\npublic class X509AuthenticationFilter extends AbstractPreAuthenticatedProcessingFilter;\npublic interface X509PrincipalExtractor; // Obtains the principal from an X509Certificate for use within the framework.\n", "des": "X.509 client certificate authentication support."}
{"index": 2183, "repo": "spring-security-web-6.1.2", "code": "package rememberme;\n\npublic abstract class AbstractRememberMeServices extends Object implements RememberMeServices, org.springframework.beans.factory.InitializingBean, LogoutHandler, org.springframework.context.MessageSourceAware; // Base class for RememberMeServices implementations.\npublic class CookieTheftException extends RememberMeAuthenticationException;\npublic class InMemoryTokenRepositoryImpl extends Object implements PersistentTokenRepository; // Simple PersistentTokenRepository implementation backed by a Map.\npublic class InvalidCookieException extends RememberMeAuthenticationException; // Exception thrown by a RememberMeServices implementation to indicate that a submitted cookie is of an invalid format or has expired.\npublic class JdbcTokenRepositoryImpl extends org.springframework.jdbc.core.support.JdbcDaoSupport implements PersistentTokenRepository; // JDBC based persistent login token repository implementation.\npublic class PersistentRememberMeToken extends Object;\npublic class PersistentTokenBasedRememberMeServices extends AbstractRememberMeServices; // RememberMeServices implementation based on Barry Jaspan's Improved Persistent Login Cookie Best Practice.\npublic interface PersistentTokenRepository; // The abstraction used by PersistentTokenBasedRememberMeServices to store the persistent login tokens for a user.\npublic class RememberMeAuthenticationException extends org.springframework.security.core.AuthenticationException; // This exception is thrown when an Authentication exception occurs while using the remember-me authentication.\npublic class RememberMeAuthenticationFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.ApplicationEventPublisherAware; // Detects if there is no Authentication object in the SecurityContext, and populates the context with a remember-me authentication token if a RememberMeServices implementation so requests.\npublic class TokenBasedRememberMeServices extends AbstractRememberMeServices; // Identifies previously remembered users by a Base-64 encoded cookie.\npublic static enum TokenBasedRememberMeServices.RememberMeTokenAlgorithm extends Enum<TokenBasedRememberMeServices.RememberMeTokenAlgorithm>;\n", "des": "Support for remembering a user between different web sessions."}
{"index": 2184, "repo": "spring-security-web-6.1.2", "code": "package session;\n\npublic abstract class AbstractSessionFixationProtectionStrategy extends Object implements SessionAuthenticationStrategy, org.springframework.context.ApplicationEventPublisherAware; // A base class for performing session fixation protection.\nprotected static final class AbstractSessionFixationProtectionStrategy.NullEventPublisher extends Object implements org.springframework.context.ApplicationEventPublisher;\npublic final class ChangeSessionIdAuthenticationStrategy extends AbstractSessionFixationProtectionStrategy; // Uses HttpServletRequest.changeSessionId() to protect against session fixation attacks.\npublic class CompositeSessionAuthenticationStrategy extends Object implements SessionAuthenticationStrategy; // A SessionAuthenticationStrategy that accepts multiple SessionAuthenticationStrategy implementations to delegate to.\npublic class ConcurrentSessionControlAuthenticationStrategy extends Object implements org.springframework.context.MessageSourceAware, SessionAuthenticationStrategy; // Strategy which handles concurrent session-control.\npublic final class NullAuthenticatedSessionStrategy extends Object implements SessionAuthenticationStrategy;\npublic class RegisterSessionAuthenticationStrategy extends Object implements SessionAuthenticationStrategy; // Strategy used to register a user with the SessionRegistry after successful Authentication.\npublic class SessionAuthenticationException extends org.springframework.security.core.AuthenticationException; // Thrown by an SessionAuthenticationStrategy to indicate that an authentication object is not valid for the current session, typically because the same user has exceeded the number of sessions they are allowed to have concurrently.\npublic interface SessionAuthenticationStrategy; // Allows pluggable support for HttpSession-related behaviour when an authentication occurs.\npublic class SessionFixationProtectionEvent extends org.springframework.security.authentication.event.AbstractAuthenticationEvent; // Indicates a session ID was changed for the purposes of session fixation protection.\npublic class SessionFixationProtectionStrategy extends AbstractSessionFixationProtectionStrategy; // Uses HttpServletRequest.invalidate() to protect against session fixation attacks.\n", "des": "Strategy interface and implementations for handling session-related behaviour for a newly authenticated user."}
{"index": 2185, "repo": "spring-security-web-6.1.2", "code": "package switchuser;\n\npublic class AuthenticationSwitchUserEvent extends org.springframework.security.authentication.event.AbstractAuthenticationEvent; // Application event which indicates that a user context switch.\npublic interface SwitchUserAuthorityChanger; // Allows subclasses to modify the GrantedAuthority list that will be assigned to the principal when they assume the identity of a different principal.\npublic class SwitchUserFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.MessageSourceAware; // Switch User processing filter responsible for user context switching.\npublic final class SwitchUserGrantedAuthority extends Object implements org.springframework.security.core.GrantedAuthority; // Custom GrantedAuthority used by SwitchUserFilter\n", "des": "Provides HTTP-based \"switch user\" (su) capabilities."}
{"index": 2186, "repo": "spring-security-web-6.1.2", "code": "package ui;\n\npublic class DefaultLoginPageGeneratingFilter extends org.springframework.web.filter.GenericFilterBean; // For internal use with namespace configuration in the case where a user doesn't configure a login page.\npublic class DefaultLogoutPageGeneratingFilter extends org.springframework.web.filter.OncePerRequestFilter; // Generates a default log out page.\n", "des": "Authentication user-interface rendering code."}
{"index": 2187, "repo": "spring-security-web-6.1.2", "code": "package www;\n\npublic class BasicAuthenticationConverter extends Object implements AuthenticationConverter; // Converts from a HttpServletRequest to UsernamePasswordAuthenticationToken that can be authenticated.\npublic class BasicAuthenticationEntryPoint extends Object implements AuthenticationEntryPoint, org.springframework.beans.factory.InitializingBean; // Used by the ExceptionTranslationFilter to commence authentication via the BasicAuthenticationFilter.\npublic class BasicAuthenticationFilter extends org.springframework.web.filter.OncePerRequestFilter; // Processes a HTTP request's BASIC authorization headers, putting the result into the SecurityContextHolder.\npublic class DigestAuthenticationEntryPoint extends Object implements AuthenticationEntryPoint, org.springframework.beans.factory.InitializingBean, org.springframework.core.Ordered; // Used by the SecurityEnforcementFilter to commence authentication via the DigestAuthenticationFilter.\npublic class DigestAuthenticationFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.MessageSourceAware; // Processes a HTTP request's Digest authorization headers, putting the result into the SecurityContextHolder.\npublic class NonceExpiredException extends org.springframework.security.core.AuthenticationException; // Thrown if an authentication request is rejected because the digest nonce has expired.\n", "des": "WWW-Authenticate based authentication mechanism implementations: Basic and Digest authentication."}
{"index": 2188, "repo": "spring-security-web-6.1.2", "code": "package context;\n\npublic abstract class AbstractSecurityWebApplicationInitializer extends Object implements org.springframework.web.WebApplicationInitializer; // Registers the DelegatingFilterProxy to use the springSecurityFilterChain before any other registered Filter.\npublic final class DelegatingSecurityContextRepository extends Object implements SecurityContextRepository;\n@Deprecated public final class HttpRequestResponseHolder extends Object;\npublic class HttpSessionSecurityContextRepository extends Object implements SecurityContextRepository; // A SecurityContextRepository implementation which stores the security context in the HttpSession between requests.\npublic final class NullSecurityContextRepository extends Object implements SecurityContextRepository;\npublic final class RequestAttributeSecurityContextRepository extends Object implements SecurityContextRepository; // Stores the SecurityContext on a ServletRequest.setAttribute(String, Object) so that it can be restored when different dispatch types occur.\n@Deprecated public abstract class SaveContextOnUpdateOrErrorResponseWrapper extends OnCommittedResponseWrapper;\npublic class SecurityContextHolderFilter extends org.springframework.web.filter.GenericFilterBean; // A Filter that uses the SecurityContextRepository to obtain the SecurityContext and set it on the SecurityContextHolder.\n@Deprecated public class SecurityContextPersistenceFilter extends org.springframework.web.filter.GenericFilterBean;\npublic interface SecurityContextRepository; // Strategy used for persisting a SecurityContext between requests.\n", "des": "Classes which are responsible for maintaining the security context between HTTP requests."}
{"index": 2189, "repo": "spring-security-web-6.1.2", "code": "package jaasapi;\n\npublic class JaasApiIntegrationFilter extends org.springframework.web.filter.GenericFilterBean; // A Filter which attempts to obtain a JAAS Subject and continue the FilterChain running as that Subject.\n", "des": "Makes a JAAS Subject available as the current Subject."}
{"index": 2190, "repo": "spring-security-web-6.1.2", "code": "package jackson2;\n\npublic class WebJackson2Module extends com.fasterxml.jackson.databind.module.SimpleModule; // Jackson module for spring-security-web.\npublic class WebServletJackson2Module extends com.fasterxml.jackson.databind.module.SimpleModule; // Jackson module for spring-security-web related to servlet.\n", "des": "Mix-in classes to provide Jackson serialization support."}
{"index": 2191, "repo": "spring-security-web-6.1.2", "code": "package savedrequest;\n\npublic class CookieRequestCache extends Object implements RequestCache; // An Implementation of RequestCache which saves the original request URI in a cookie.\npublic class DefaultSavedRequest extends Object implements SavedRequest; // Represents central information from a HttpServletRequest.\npublic static class DefaultSavedRequest.Builder extends Object;\npublic class Enumerator<T> extends Object implements Enumeration<T>; // Adapter that wraps an Enumeration around a Java 2 collection Iterator.\npublic final class FastHttpDateFormat extends Object; // Utility class to generate HTTP dates.\npublic class HttpSessionRequestCache extends Object implements RequestCache; // RequestCache which stores the SavedRequest in the HttpSession.\npublic class NullRequestCache extends Object implements RequestCache; // Null implementation of RequestCache.\npublic interface RequestCache; // Implements \"saved request\" logic, allowing a single request to be retrieved and restarted after redirecting to an authentication mechanism.\npublic class RequestCacheAwareFilter extends org.springframework.web.filter.GenericFilterBean; // Responsible for reconstituting the saved request if one is cached and it matches the current request.\npublic class SavedCookie extends Object implements Serializable; // Stores off the values of a cookie in a serializable holder\npublic interface SavedRequest extends Serializable; // Encapsulates the functionality required of a cached request for both an authentication mechanism (typically form-based login) to redirect to the original URL and for a RequestCache to build a wrapped request, reproducing the original request data.\npublic class SimpleSavedRequest extends Object implements SavedRequest; // A Bean implementation of SavedRequest\n", "des": "Classes related to the caching of an HttpServletRequest which requires authentication."}
{"index": 2192, "repo": "spring-security-web-6.1.2", "code": "package servletapi;\n\npublic class SecurityContextHolderAwareRequestFilter extends org.springframework.web.filter.GenericFilterBean; // A Filter which populates the ServletRequest with a request wrapper which implements the servlet API security methods.\npublic class SecurityContextHolderAwareRequestWrapper extends jakarta.servlet.http.HttpServletRequestWrapper; // A Spring Security-aware HttpServletRequestWrapper, which uses the SecurityContext-defined Authentication object to implement the servlet API security methods: SecurityContextHolderAwareRequestWrapper.getUserPrincipal() SecurityContextHolderAwareRequestWrapper.isUserInRole(String) HttpServletRequestWrapper.getRemoteUser().\n", "des": "Populates a Servlet request with a new Spring Security compliant HttpServletRequestWrapper."}
{"index": 2193, "repo": "spring-security-web-6.1.2", "code": "package session;\n\npublic class ConcurrentSessionFilter extends org.springframework.web.filter.GenericFilterBean; // Filter required by concurrent session handling package.\npublic class DisableEncodeUrlFilter extends org.springframework.web.filter.OncePerRequestFilter; // Disables encoding URLs using the HttpServletResponse to prevent including the session id in URLs which is not considered URL because the session id can be leaked in things like HTTP access logs.\npublic class ForceEagerSessionCreationFilter extends org.springframework.web.filter.OncePerRequestFilter; // Eagerly creates HttpSession if it does not already exist.\npublic class HttpSessionCreatedEvent extends org.springframework.security.core.session.SessionCreationEvent; // Published by the HttpSessionEventPublisher when an HttpSession is created by the container\npublic class HttpSessionDestroyedEvent extends org.springframework.security.core.session.SessionDestroyedEvent; // Published by the HttpSessionEventPublisher when a HttpSession is removed from the container\npublic class HttpSessionEventPublisher extends Object implements jakarta.servlet.http.HttpSessionListener, jakarta.servlet.http.HttpSessionIdListener; // Declared in web.xml as\npublic class HttpSessionIdChangedEvent extends org.springframework.security.core.session.SessionIdChangedEvent; // Published by the HttpSessionEventPublisher when an HttpSession ID is changed.\npublic final class InvalidSessionAccessDeniedHandler extends Object implements AccessDeniedHandler; // An adapter of InvalidSessionStrategy to AccessDeniedHandler\npublic interface InvalidSessionStrategy; // Determines the behaviour of the SessionManagementFilter when an invalid session Id is submitted and detected in the SessionManagementFilter.\npublic final class RequestedUrlRedirectInvalidSessionStrategy extends Object implements InvalidSessionStrategy; // Performs a redirect to the original request URL when an invalid requested session is detected by the SessionManagementFilter.\npublic final class SessionInformationExpiredEvent extends org.springframework.context.ApplicationEvent; // An event for when a SessionInformation is expired.\npublic interface SessionInformationExpiredStrategy; // Determines the behaviour of the ConcurrentSessionFilter when an expired session is detected in the ConcurrentSessionFilter.\n", "des": "Session management filters, HttpSession events and publisher classes."}
{"index": 2194, "repo": "spring-security-web-6.1.2", "code": "package util;\n\npublic abstract class OnCommittedResponseWrapper extends jakarta.servlet.http.HttpServletResponseWrapper; // Base class for response wrappers which encapsulate the logic for handling an event when the HttpServletResponse is committed.\npublic class RedirectUrlBuilder extends Object; // Internal class for building redirect URLs.\npublic abstract class TextEscapeUtils extends Object; // Internal utility for escaping characters in HTML strings.\npublic class ThrowableAnalyzer extends Object; // Handler for analyzing Throwable instances.\npublic interface ThrowableCauseExtractor; // Interface for handlers extracting the cause out of a specific Throwable type.\npublic final class UrlUtils extends Object; // Provides static methods for composing URLs.\n", "des": "Web utility classes."}
{"index": 2195, "repo": "spring-data-commons-3.1.2", "code": "package annotation;\n\n@Documented @Target({ANNOTATION_TYPE,TYPE,FIELD,METHOD}) @Retention(RUNTIME) public @interface AccessType; // Annotation to define how Spring Data shall access values of persistent properties.\npublic static enum AccessType.Type extends Enum<AccessType.Type>;\n@Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface CreatedBy; // Declares a field as the one representing the principal that created the entity containing the field.\n@Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface CreatedDate; // Declares a field as the one representing the date the entity containing the field was created.\n@Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface Id; // Demarcates an identifier.\n@Target(TYPE) @Retention(RUNTIME) public @interface Immutable; // Annotation for persistent entities to indicate the class is designed in immutable way.\n@Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface LastModifiedBy; // Declares a field as the one representing the principal that recently modified the entity containing the field.\n@Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface LastModifiedDate; // Declares a field as the one representing the date the entity containing the field was recently modified.\n@Retention(RUNTIME) @Target({CONSTRUCTOR,ANNOTATION_TYPE}) @Deprecated public @interface PersistenceConstructor;\n@Retention(RUNTIME) @Target({CONSTRUCTOR,METHOD,ANNOTATION_TYPE}) public @interface PersistenceCreator; // Marker annotation to declare a constructor or factory method annotation as factory/preferred constructor annotation.\n@Indexed @Retention(RUNTIME) @Reflective @Target({TYPE,FIELD,PARAMETER}) public @interface Persistent; // Annotation to generally identify persistent types, fields and parameters.\n@Retention(RUNTIME) @Target(ANNOTATION_TYPE) public @interface QueryAnnotation; // Meta-Annotation to mark a store specific annotation as a query annotation.\n@Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface ReadOnlyProperty; // Marks a field to be read-only for the mapping framework and therefore will not be persisted.\n", "des": "Core annotations being used by Spring Data."}
{"index": 2196, "repo": "spring-data-commons-3.1.2", "code": "package aot;\n\npublic interface AotContext; // The context in which the AOT processing happens.\npublic static interface AotContext.IntrospectedBeanDefinition; // Interface defining introspection methods for bean definitions.\npublic static interface AotContext.TypeIntrospector; // Type-based introspector to resolve Class from a type name and to introspect the bean factory for presence of beans.\npublic class ManagedTypesBeanFactoryInitializationAotProcessor extends Object implements BeanFactoryInitializationAotProcessor; // BeanFactoryInitializationAotProcessor implementation used to encapsulate common data infrastructure concerns and preprocess the ConfigurableListableBeanFactory ahead of the AOT compilation in order to prepare the Spring Data BeanDefinitions for AOT processing.\npublic class ManagedTypesBeanRegistrationAotProcessor extends Object implements BeanRegistrationAotProcessor; // BeanRegistrationAotProcessor handling module ManagedTypes instances.\npublic class PublicMethodReflectiveProcessor extends SimpleReflectiveProcessor;\npublic interface RegisteredBeanAotContribution extends BeanRegistrationAotContribution; // Extension to BeanRegistrationAotContribution that bases its contribution on a RegisteredBean.\n", "des": "Support for registering the need for reflection, resources, java serialization and proxies at runtime for Ahead of Time compilation."}
{"index": 2197, "repo": "spring-data-commons-3.1.2", "code": "package auditing;\n\npackage auditing.config; // Types to abstract authentication concepts.\npublic interface AuditableBeanWrapper<T>; // Interface to abstract the ways setting the auditing information can be implemented.\npublic interface AuditableBeanWrapperFactory; // A factory to lookup AuditableBeanWrappers.\npublic class AuditingHandler extends AuditingHandlerSupport implements InitializingBean; // Auditing handler to mark entity objects created and modified.\npublic abstract class AuditingHandlerSupport extends Object; // Support class to implement auditing handlers.\npublic enum CurrentDateTimeProvider extends Enum<CurrentDateTimeProvider> implements DateTimeProvider; // Default DateTimeProvider simply creating new LocalDateTime instances for each method call.\npublic interface DateTimeProvider; // SPI to calculate the current time to be used when auditing.\npublic class IsNewAwareAuditingHandler extends AuditingHandler; // AuditingHandler extension that uses PersistentEntity.isNew(Object) to expose a generic IsNewAwareAuditingHandler.markAudited(Object) method that will route calls to AuditingHandler.markCreated(Object) or AuditingHandler.markModified(Object) based on the IsNewStrategy determined from the factory.\npublic class MappingAuditableBeanWrapperFactory extends Object; // AuditableBeanWrapperFactory that will create am AuditableBeanWrapper using mapping information obtained from a MappingContext to detect auditing configuration and eventually invoking setting the auditing values.\npublic class ReactiveAuditingHandler extends AuditingHandlerSupport; // Auditing handler to mark entity objects created and modified.\npublic class ReactiveIsNewAwareAuditingHandler extends ReactiveAuditingHandler; // AuditingHandler extension that uses PersistentEntity.isNew(Object) to expose a generic ReactiveIsNewAwareAuditingHandler.markAudited(Object) method that will route calls to ReactiveAuditingHandler.markCreated(Object) or ReactiveAuditingHandler.markModified(Object) based on the IsNewStrategy determined from the factory.\n", "des": "General support for entity auditing."}
{"index": 2198, "repo": "spring-data-commons-3.1.2", "code": "package config;\n\npublic class AnnotationAuditingConfiguration extends Object implements AuditingConfiguration; // Default implementation for AuditingConfiguration.\npublic abstract class AuditingBeanDefinitionRegistrarSupport extends Object implements ImportBeanDefinitionRegistrar; // A ImportBeanDefinitionRegistrar that serves as a base class for store specific implementations for configuring audit support.\npublic interface AuditingConfiguration; // Configuration information for auditing.\npublic class AuditingHandlerBeanDefinitionParser extends AbstractSingleBeanDefinitionParser; // BeanDefinitionParser that parses an AuditingHandler BeanDefinition\npublic class IsNewAwareAuditingHandlerBeanDefinitionParser extends AuditingHandlerBeanDefinitionParser; // AuditingHandlerBeanDefinitionParser that will register am IsNewAwareAuditingHandler.\n", "des": "Types to abstract authentication concepts."}
{"index": 2199, "repo": "spring-data-commons-3.1.2", "code": "package config;\n\npublic class BeanComponentDefinitionBuilder extends Object; // Helper to create BeanComponentDefinition more easily.\npublic interface ConfigurationUtils; // Helper class to centralize common functionality that needs to be used in various places of the configuration implementation.\npublic abstract class ParsingUtils extends Object; // Utility methods for BeanDefinitionParser implementations.\npublic class TypeFilterParser extends Object; // Parser to populate the given ClassPathScanningCandidateComponentProvider with TypeFilters parsed from the given Element's children.\npublic static enum TypeFilterParser.Type extends Enum<TypeFilterParser.Type>;\n", "des": "Basic support for creating custom Spring namespaces and JavaConfig."}
{"index": 2200, "repo": "spring-data-commons-3.1.2", "code": "package convert;\n\npublic class ConfigurableTypeInformationMapper extends Object implements TypeInformationMapper; // TypeInformationMapper implementation that can be either set up using a MappingContext or manually set up Map of String aliases to types.\npublic interface ConverterBuilder; // API to easily set up GenericConverter instances using Java 8 lambdas, mostly in bidirectional fashion for easy registration as custom type converters of the Spring Data mapping subsystem.\npublic static interface ConverterBuilder.ConverterAware extends ConverterBuilder, ConverterBuilder.ReadingConverterAware, ConverterBuilder.WritingConverterAware; // A ConverterBuilder aware of both a reading and writing converter.\npublic static interface ConverterBuilder.ReadingConverterAware; // Exposes a reading converter.\npublic static interface ConverterBuilder.ReadingConverterBuilder<T,S> extends ConverterBuilder, ConverterBuilder.ReadingConverterAware; // Interface to represent an intermediate setup step of ConverterBuilder.ConverterAware defining a reading converter first.\npublic static interface ConverterBuilder.WritingConverterAware; // Exposes a writing converter.\npublic static interface ConverterBuilder.WritingConverterBuilder<S,T> extends ConverterBuilder, ConverterBuilder.WritingConverterAware; // Interface to represent an intermediate setup step of ConverterBuilder.ConverterAware defining a writing converter first.\npublic class CustomConversions extends Object; // Value object to capture custom conversion.\nprotected static class CustomConversions.ConverterConfiguration extends Object; // Value object holding the actual CustomConversions.StoreConversions and custom converters configured for registration.\nprotected static class CustomConversions.ConverterRegistrationIntent extends Object; // Value class tying together a CustomConversions.ConverterRegistration and its origin to allow fine grained registration based on store supported types.\nprotected static enum CustomConversions.ConverterRegistrationIntent.ConverterOrigin extends Enum<CustomConversions.ConverterRegistrationIntent.ConverterOrigin>;\npublic static class CustomConversions.StoreConversions extends Object; // Value type to capture store-specific extensions to the CustomConversions.\npublic class DefaultTypeMapper<S> extends Object implements TypeMapper<S>, BeanClassLoaderAware; // Default implementation of TypeMapper.\npublic class DtoInstantiatingConverter extends Object implements Converter<Object,Object>; // Spring Converter to create instances of the given DTO type from the source value handed into the conversion.\n", "des": "General purpose conversion framework to read objects from a data store abstraction and write it back."}
{"index": 2201, "repo": "spring-data-commons-3.1.2", "code": "package crossstore;\n\npublic interface ChangeSet; // Interface representing the set of changes in an entity.\npublic interface ChangeSetBacked; // Interface introduced to objects exposing ChangeSet information\npublic class ChangeSetBackedTransactionSynchronization extends Object implements TransactionSynchronization;\npublic interface ChangeSetPersister<K>; // Interface to be implemented by classes that can synchronize between data stores and ChangeSets.\npublic static class ChangeSetPersister.NotFoundException extends Exception; // Exception thrown in alternate control flow if getPersistentState finds no entity data.\npublic class HashMapChangeSet extends Object implements ChangeSet; // Simple ChangeSet implementation backed by a HashMap.\n", "des": "Support for cross-store persistence."}
{"index": 2202, "repo": "spring-data-commons-3.1.2", "code": "package domain;\n\npackage domain.jaxb; // Central domain abstractions especially to be used in combination with the Repository abstraction.\npublic class AbstractAggregateRoot<A extends AbstractAggregateRoot<A>> extends Object; // Convenience base class for aggregate roots that exposes a AbstractAggregateRoot.registerEvent(Object) to capture domain events and expose them via AbstractAggregateRoot.domainEvents().\npublic abstract class AbstractPageRequest extends Object implements Pageable, Serializable; // Abstract Java Bean implementation of Pageable.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) public @interface AfterDomainEventPublication; // Annotation to be used on a method of a Spring Data managed aggregate to get invoked after the events of an aggregate have been published.\npublic interface Auditable<U,ID,T extends TemporalAccessor> extends Persistable<ID>; // Interface for auditable entities.\npublic interface AuditorAware<T>; // Interface for components that are aware of the application's current auditor.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) public @interface DomainEvents; // DomainEvents can be used on methods of aggregate roots managed by Spring Data repositories to publish the events returned by that method as Spring application events.\npublic interface Example<T>; // Support for query by example (QBE).\npublic interface ExampleMatcher; // Specification for property path matching to use in query by example (QBE).\npublic static class ExampleMatcher.GenericPropertyMatcher extends Object; // A generic property matcher that specifies string matching and case sensitivity.\npublic static class ExampleMatcher.GenericPropertyMatchers extends Object; // Predefined property matchers to create a ExampleMatcher.GenericPropertyMatcher.\npublic static interface ExampleMatcher.MatcherConfigurer<T>; // Callback to configure a matcher.\npublic static enum ExampleMatcher.MatchMode extends Enum<ExampleMatcher.MatchMode>; // The match modes to expose so that clients can find about how to concatenate the predicates.\npublic static enum ExampleMatcher.NoOpPropertyValueTransformer extends Enum<ExampleMatcher.NoOpPropertyValueTransformer> implements ExampleMatcher.PropertyValueTransformer;\npublic static enum ExampleMatcher.NullHandler extends Enum<ExampleMatcher.NullHandler>; // Null handling for creating criterion out of an Example.\npublic static class ExampleMatcher.PropertySpecifier extends Object; // Define specific property handling for a Dot-Path.\n", "des": "Central domain abstractions especially to be used in combination with the Repository abstraction."}
{"index": 2203, "repo": "spring-data-commons-3.1.2", "code": "package jaxb;\n\npublic class OrderAdapter extends jakarta.xml.bind.annotation.adapters.XmlAdapter<SpringDataJaxb.OrderDto,Sort.Order>; // XmlAdapter to convert Sort.Order instances into SpringDataJaxb.OrderDtos and vice versa.\npublic class PageAdapter extends jakarta.xml.bind.annotation.adapters.XmlAdapter<SpringDataJaxb.PageDto,Page<Object>>; // XmlAdapter to convert Page instances into SpringDataJaxb.PageDto instances and vice versa.\npublic class SortAdapter extends jakarta.xml.bind.annotation.adapters.XmlAdapter<SpringDataJaxb.SortDto,Sort>; // XmlAdapter to convert Sort instances into SpringDataJaxb.SortDto instances and vice versa.\npublic abstract class SpringDataJaxb extends Object; // Helper class containing utility methods to implement JAXB XmlAdapters as well as the DTO types to be marshalled by JAXB.\npublic static class SpringDataJaxb.OrderDto extends Object; // The DTO for Sort.Order.\npublic static class SpringDataJaxb.PageDto extends org.springframework.hateoas.RepresentationModel; // The DTO for Page.\npublic static class SpringDataJaxb.PageRequestDto extends Object; // The DTO for Pageables/PageRequests.\npublic static class SpringDataJaxb.SortDto extends Object; // The DTO for Sort.\n", "des": "Central domain abstractions especially to be used in combination with the Repository abstraction."}
{"index": 2204, "repo": "spring-data-commons-3.1.2", "code": "package geo;\n\npackage geo.format; // Formatters for geo-spatial types.\npublic class Box extends Object implements Shape; // Represents a geospatial box value\npublic class Circle extends Object implements Shape; // Represents a geospatial circle value\npublic class CustomMetric extends Object implements Metric; // Value object to create custom Metrics on the fly.\npublic final class Distance extends Object implements Serializable, Comparable<Distance>; // Value object to represent distances in a given metric.\npublic class GeoModule extends com.fasterxml.jackson.databind.module.SimpleModule; // Custom module to deserialize the geo-spatial value objects using Jackson 2.\npublic class GeoPage<T> extends PageImpl<GeoResult<T>>; // Custom Page to carry the average distance retrieved from the GeoResults the GeoPage is set up from.\npublic final class GeoResult<T> extends Object implements Serializable; // Value object capturing some arbitrary object plus a distance.\npublic class GeoResults<T> extends Object implements Iterable<GeoResult<T>>, Serializable; // Value object to capture GeoResults as well as the average distance they have.\npublic interface Metric extends Serializable; // Interface for Metrics that can be applied to a base scale.\npublic enum Metrics extends Enum<Metrics> implements Metric; // Commonly used Metrics.\npublic class Point extends Object implements Serializable; // Represents a geospatial point value.\npublic class Polygon extends Object implements Iterable<Point>, Shape; // Simple value object to represent a Polygon.\npublic interface Shape extends Serializable; // Common interface for all shapes.\n", "des": "Value types representing geo-spatial concepts."}
{"index": 2205, "repo": "spring-data-commons-3.1.2", "code": "package format;\n\npublic enum DistanceFormatter extends Enum<DistanceFormatter> implements Converter<String,Distance>, Formatter<Distance>; // Converter to create Distance instances from String representations.\npublic enum PointFormatter extends Enum<PointFormatter> implements Converter<String,Point>, Formatter<Point>; // Converter to parse two comma-separated doubles into a Point.\n", "des": "Formatters for geo-spatial types."}
{"index": 2206, "repo": "spring-data-commons-3.1.2", "code": "package history;\n\npublic class AnnotationRevisionMetadata<N extends Number & Comparable<N>> extends Object implements RevisionMetadata<N>; // A RevisionMetadata implementation that inspects the given object for fields with the configured annotations and returns the field's values on calls to AnnotationRevisionMetadata.getRevisionInstant(), AnnotationRevisionMetadata.getRevisionInstant() and AnnotationRevisionMetadata.getRevisionNumber().\npublic final class Revision<N extends Number & Comparable<N>,T> extends Object implements Comparable<Revision<N,?>>; // Wrapper to contain RevisionMetadata as well as the revisioned entity.\npublic interface RevisionMetadata<N extends Number & Comparable<N>>; // Metadata about a revision.\npublic static enum RevisionMetadata.RevisionType extends Enum<RevisionMetadata.RevisionType>; // The type of a Revision.\npublic class Revisions<N extends Number & Comparable<N>,T> extends Object implements Streamable<Revision<N,T>>; // Simple wrapper class for a List of Revisions allowing to canonically access the latest revision.\npublic class RevisionSort extends Sort; // A dedicated Sort implementation that allows the definition of the ordering of revisions independently of the property name the revision number is held in.\n", "des": "Basic interfaces and value objects for histography API."}
{"index": 2207, "repo": "spring-data-commons-3.1.2", "code": "package mapping;\n\npackage mapping.callback; // Mapping callback API and implementation base classes.\npackage mapping.context; // Mapping context API and implementation base classes.\npackage mapping.model; // Core implementation of the mapping subsystem's model.\npublic class AccessOptions extends Object; // Access options when using PersistentPropertyPathAccessor to get and set properties.\npublic static class AccessOptions.GetOptions extends Object; // Access options for getting values for property paths.\npublic static enum AccessOptions.GetOptions.GetNulls extends Enum<AccessOptions.GetOptions.GetNulls>; // How to handle null values during a PersistentPropertyPath traversal.\npublic static class AccessOptions.SetOptions extends Object; // Access options for setting values for property paths.\npublic static enum AccessOptions.SetOptions.Propagation extends Enum<AccessOptions.SetOptions.Propagation>; // How to propagate setting values that cross collection and map properties.\npublic static enum AccessOptions.SetOptions.SetNulls extends Enum<AccessOptions.SetOptions.SetNulls>; // How to handle intermediate null values when setting\npublic final class Alias extends Object; // A container object which may or may not contain a type alias value.\npublic class Association<P extends PersistentProperty<P>> extends Object; // Value object to capture Associations.\npublic interface AssociationHandler<P extends PersistentProperty<P>>; // Callback interface to implement functionality to be applied to a collection of Associations.\npublic final class FactoryMethod<T,P extends PersistentProperty<P>> extends Object; // Value object to encapsulate the factory method to be used when mapping persistent data to objects.\npublic interface IdentifierAccessor; // Interface for a component allowing the access of identifier values.\npublic interface InstanceCreatorMetadata<P extends PersistentProperty<P>>; // Metadata describing a mechanism to create instances of persistent types.\npublic class MappingException extends RuntimeException;\npublic class Parameter<T,P extends PersistentProperty<P>> extends Object; // Value object to represent constructor parameters.\npublic interface PersistentEntity<T,P extends PersistentProperty<P>> extends Iterable<P>; // Represents a persistent entity.\npublic interface PersistentProperty<P extends PersistentProperty<P>>;\npublic interface PersistentPropertyAccessor<T>; // Domain service to allow accessing and setting PersistentPropertys of an entity.\n", "des": "Base package for the mapping subsystem."}
{"index": 2208, "repo": "spring-data-commons-3.1.2", "code": "package callback;\n\n@Reflective(PublicMethodReflectiveProcessor.class) public interface EntityCallback<T>; // Marker interface for entity callbacks to be implemented in specific callback subtypes.\npublic interface EntityCallbacks; // Interface to be implemented by objects that can manage a number of EntityCallback objects and invoke these with a specific entity.\npublic interface ReactiveEntityCallbacks; // Interface to be implemented by objects that can manage a number of EntityCallback objects and invoke these with a specific entity.\n", "des": "Mapping callback API and implementation base classes."}
{"index": 2209, "repo": "spring-data-commons-3.1.2", "code": "package context;\n\npublic abstract class AbstractMappingContext<E extends MutablePersistentEntity<?,P>,P extends PersistentProperty<P>> extends Object implements MappingContext<E,P>, ApplicationEventPublisherAware, ApplicationContextAware, InitializingBean; // Base class to build mapping metadata and thus create instances of PersistentEntity and PersistentProperty.\npublic class InvalidPersistentPropertyPath extends MappingException; // Exception to indicate a source path couldn't be resolved into a PersistentPropertyPath completely.\npublic interface MappingContext<E extends PersistentEntity<?,P>,P extends PersistentProperty<P>>; // This interface defines the overall context including all known PersistentEntity instances and methods to obtain instances on demand. it is used internally to establish associations between entities and also at runtime to obtain entities by name.\npublic class MappingContextEvent<E extends PersistentEntity<?,P>,P extends PersistentProperty<P>> extends ApplicationEvent; // Base implementation of an ApplicationEvent refering to a PersistentEntity.\npublic class PersistentEntities extends Object implements Streamable<PersistentEntity<?,? extends PersistentProperty<?>>>; // Value object to access PersistentEntity instances managed by MappingContexts.\n", "des": "Mapping context API and implementation base classes."}
{"index": 2210, "repo": "spring-data-commons-3.1.2", "code": "package model;\n\npublic abstract class AbstractPersistentProperty<P extends PersistentProperty<P>> extends Object implements PersistentProperty<P>; // Simple implementation of PersistentProperty.\npublic abstract class AnnotationBasedPersistentProperty<P extends PersistentProperty<P>> extends AbstractPersistentProperty<P>; // Special PersistentProperty that takes annotations at a property into account.\npublic class BasicPersistentEntity<T,P extends PersistentProperty<P>> extends Object implements MutablePersistentEntity<T,P>; // Simple value object to capture information of PersistentEntitys.\npublic enum BeanWrapperPropertyAccessorFactory extends Enum<BeanWrapperPropertyAccessorFactory> implements PersistentPropertyAccessorFactory; // PersistentPropertyAccessorFactory that uses a BeanWrapper.\npublic class CamelCaseAbbreviatingFieldNamingStrategy extends CamelCaseSplittingFieldNamingStrategy; // FieldNamingStrategy that abbreviates field names by using the very first letter of the camel case parts of the PersistentProperty's name.\npublic class CamelCaseSplittingFieldNamingStrategy extends Object implements FieldNamingStrategy; // Configurable FieldNamingStrategy that splits up camel-case property names and reconcatenates them using a configured delimiter.\npublic class ClassGeneratingPropertyAccessorFactory extends Object implements PersistentPropertyAccessorFactory; // A factory that can generate byte code to speed-up dynamic property access.\npublic class ConvertingPropertyAccessor<T> extends Object; // PersistentPropertyAccessor that potentially converts the value handed to ConvertingPropertyAccessor.setProperty(PersistentProperty, Object) to the type of the PersistentProperty using a ConversionService.\npublic class DefaultSpELExpressionEvaluator extends Object implements SpELExpressionEvaluator; // ParameterValueProvider implementation that evaluates the Parameters key against SpelExpressionParser and EvaluationContext.\npublic interface EntityInstantiator; // SPI to abstract strategies to create instances for PersistentEntitys.\npublic class EntityInstantiators extends Object; // Simple value object allowing access to EntityInstantiator instances for a given type falling back to a default one.\npublic interface FieldNamingStrategy; // SPI to determine how to name document fields in cases the field name is not manually defined.\npublic class IdPropertyIdentifierAccessor extends TargetAwareIdentifierAccessor; // Default implementation of IdentifierAccessor.\npublic class InstantiationAwarePropertyAccessor<T> extends Object implements PersistentPropertyAccessor<T>; // A PersistentPropertyAccessor that will use an entity's PersistenceCreator to create a new instance of it to apply a new value for a given PersistentProperty.\n", "des": "Core implementation of the mapping subsystem's model."}
{"index": 2211, "repo": "spring-data-commons-3.1.2", "code": "package projection;\n\npublic final class Accessor extends Object; // Helper value to abstract an accessor.\npublic class DefaultMethodInvokingMethodInterceptor extends Object implements MethodInterceptor; // Method interceptor to invoke default methods on the repository proxy.\npublic class EntityProjection<M,D> extends Object implements Streamable<EntityProjection.PropertyProjection<?,?>>; // Descriptor for a top-level mapped type representing a view onto a domain type structure.\npublic static class EntityProjection.ContainerPropertyProjection<M,D> extends EntityProjection.PropertyProjection<M,D>; // Descriptor for a property-level type along its potential projection that is held within a Collection-like or Map-like container.\npublic static enum EntityProjection.ProjectionType extends Enum<EntityProjection.ProjectionType>; // Projection type.\npublic static class EntityProjection.PropertyProjection<M,D> extends EntityProjection<M,D>; // Descriptor for a property-level type along its potential projection.\npublic class EntityProjectionIntrospector extends Object; // This class is introspects the returned type in the context of a domain type for all reachable properties (w/o cycles) to determine which property paths are subject to projection.\npublic static interface EntityProjectionIntrospector.ProjectionPredicate; // Represents a predicate (boolean-valued function) of a target type and its underlying type.\npublic interface MethodInterceptorFactory; // SPI to create MethodInterceptor instances based on the given source object and the target type to produce.\npublic interface ProjectionFactory; // A factory to create projecting instances for other objects usually used to allow easy creation of representation projections to define which properties of a domain objects shall be exported in which way.\npublic interface ProjectionInformation; // Information about a projection type.\npublic class SpelAwareProxyProjectionFactory extends Object implements BeanFactoryAware; // A ProxyProjectionFactory that adds support to use Value-annotated methods on a projection interface to evaluate the contained SpEL expression to define the outcome of the method call.\nprotected static class SpelAwareProxyProjectionFactory.SpelAwareProjectionInformation extends Object;\npublic interface TargetAware extends TargetClassAware, RawTargetAccess; // Extension of TargetClassAware to be able to ignore the getter on JSON rendering.\n", "des": "Projection subsystem."}
{"index": 2212, "repo": "spring-data-commons-3.1.2", "code": "package querydsl;\n\npackage querydsl.binding; // Base classes to implement CDI support for repositories.\npublic interface EntityPathResolver; // Strategy interface to abstract the ways to translate an plain domain class into a EntityPath.\npublic interface ListQuerydslPredicateExecutor<T> extends QuerydslPredicateExecutor<T>; // Interface to allow execution of QueryDsl Predicate instances.\npublic class QPageRequest extends AbstractPageRequest; // Basic Java Bean implementation of Pageable with support for QueryDSL.\npublic class QSort extends Sort implements Serializable; // Sort option for queries that wraps a Querydsl OrderSpecifier.\npublic interface QuerydslPredicateExecutor<T>; // Interface to allow execution of QueryDsl Predicate instances.\npublic class QuerydslRepositoryInvokerAdapter extends Object implements RepositoryInvoker; // RepositoryInvoker that is aware of a QuerydslPredicateExecutor and Predicate to be executed for all flavors of findAll(…).\npublic abstract class QuerydslUtils extends Object; // Utility class for Querydsl.\npublic interface ReactiveQuerydslPredicateExecutor<T>; // Interface to issue queries using Querydsl Predicate instances.\npublic class SimpleEntityPathResolver extends Object implements EntityPathResolver; // Simple implementation of EntityPathResolver to lookup a query class by reflection and using the static field of the same type.\n", "des": "Querydsl integration support classes."}
{"index": 2213, "repo": "spring-data-commons-3.1.2", "code": "package binding;\n\n@FunctionalInterface public interface MultiValueBinding<T extends com.querydsl.core.types.Path<? extends S>,S>; // MultiValueBinding creates a Predicate out of given Path and collection value.\n@FunctionalInterface public interface OptionalValueBinding<T extends com.querydsl.core.types.Path<? extends S>,S>; // OptionalValueBinding creates a Predicate out of given Path and value.\npublic interface QuerydslBinderCustomizer<T extends com.querydsl.core.types.EntityPath<?>>; // A component that will customize QuerydslBindings for the given entity path.\npublic interface QuerydslBinderCustomizerDefaults extends QuerydslBinderCustomizer<com.querydsl.core.types.EntityPath<?>>; // A component for QuerydslBindings customization acting as default customizer the given entity path regardless of the domain type.\npublic class QuerydslBindings extends Object; // QuerydslBindings allows definition of path specific bindings.\npublic class QuerydslBindingsFactory extends Object implements ApplicationContextAware; // Factory to create QuerydslBindings using an EntityPathResolver.\n@Target({PARAMETER,TYPE}) @Retention(RUNTIME) public @interface QuerydslPredicate; // Annotation to customize the binding of HTTP request parameters to a Querydsl Predicate in Spring MVC handler methods.\npublic class QuerydslPredicateBuilder extends Object; // Builder assembling Predicate out of PropertyValues.\n@FunctionalInterface public interface SingleValueBinding<T extends com.querydsl.core.types.Path<? extends S>,S>; // SingleValueBinding creates a Predicate out of given Path and value.\n", "des": "Base classes to implement CDI support for repositories."}
{"index": 2214, "repo": "spring-data-commons-3.1.2", "code": "package repository;\n\npackage repository.cdi; // Base classes to implement CDI support for repositories.\npackage repository.config; // Support classes for repository namespace and JavaConfig integration.\npackage repository.core; // Core abstractions for repository implementation.\npackage repository.history; // API for repositories using historiography.\npackage repository.init; // Support for repository initialization using XML and JSON.\npackage repository.query; // Support classes to work with query methods.\npackage repository.reactive; // Support for reactive repositories.\npackage repository.support; // Support classes for integration of the repository programming model with 3rd party frameworks.\npackage repository.util; // Utility classes for repository implementations.\n@NoRepositoryBean public interface CrudRepository<T,ID> extends Repository<T,ID>; // Interface for generic CRUD operations on a repository for a specific type.\n@NoRepositoryBean public interface ListCrudRepository<T,ID> extends CrudRepository<T,ID>; // Interface for generic CRUD operations on a repository for a specific type.\n@NoRepositoryBean public interface ListPagingAndSortingRepository<T,ID> extends PagingAndSortingRepository<T,ID>; // Repository fragment to provide methods to retrieve entities using the pagination and sorting abstraction.\n@Retention(RUNTIME) @Target(TYPE) @Documented public @interface NoRepositoryBean; // Annotation to exclude repository interfaces from being picked up and thus in consequence getting an instance being created.\n@NoRepositoryBean public interface PagingAndSortingRepository<T,ID> extends Repository<T,ID>; // Repository fragment to provide methods to retrieve entities using the pagination and sorting abstraction.\n@Indexed public interface Repository<T,ID>; // Central repository marker interface.\n@Indexed @Documented @Retention(RUNTIME) @Target(TYPE) @Inherited public @interface RepositoryDefinition; // Annotation to demarcate interfaces a repository proxy shall be created for.\n", "des": "Central interfaces for repository abstraction."}
{"index": 2215, "repo": "spring-data-commons-3.1.2", "code": "package cdi;\n\npublic abstract class CdiRepositoryBean<T> extends Object implements jakarta.enterprise.inject.spi.Bean<T>, jakarta.enterprise.inject.spi.PassivationCapable; // Base class for Bean wrappers.\npublic interface CdiRepositoryConfiguration; // Interface containing the configurable options for the Spring Data repository subsystem using CDI.\npublic class CdiRepositoryContext extends Object; // Context for CDI repositories.\npublic abstract class CdiRepositoryExtensionSupport extends Object implements jakarta.enterprise.inject.spi.Extension; // Base class for Extension implementations that create instances for Spring Data repositories.\n@Documented @Retention(RUNTIME) @Target({TYPE,ANNOTATION_TYPE}) @Inherited public @interface Eager; // Annotation to mark repository interfaces to be instantiated eagerly in a CDI context.\n", "des": "Base classes to implement CDI support for repositories."}
{"index": 2216, "repo": "spring-data-commons-3.1.2", "code": "package config;\n\npublic class AnnotationRepositoryConfigurationSource extends RepositoryConfigurationSourceSupport; // Annotation based RepositoryConfigurationSource.\npublic interface AotRepositoryContext extends AotContext; // AotContext specific to Spring Data Repository infrastructure.\npublic enum BootstrapMode extends Enum<BootstrapMode>; // Enumeration to define in which way repositories are bootstrapped.\npublic class CustomRepositoryImplementationDetector extends Object; // Detects the custom implementation for a Repository instance.\npublic final class DefaultRepositoryBaseClass extends Object; // Placeholder class to be used in @Enable annotation's repositoryBaseClass attribute.\npublic class DefaultRepositoryConfiguration<T extends RepositoryConfigurationSource> extends Object implements RepositoryConfiguration<T>; // Default implementation of RepositoryConfiguration.\npublic class FragmentMetadata extends Object; // Value object for a discovered Repository fragment interface.\npublic interface ImplementationDetectionConfiguration; // Expresses configuration to be used to detect implementation classes for repositories and repository fragments.\npublic interface ImplementationLookupConfiguration extends ImplementationDetectionConfiguration; // Configuration that's used to lookup an implementation type for a repository or fragment interface.\npublic class NamedQueriesBeanDefinitionBuilder extends Object; // Builder to create a BeanDefinition for a NamedQueries instance using properties.\npublic class NamedQueriesBeanDefinitionParser extends Object implements BeanDefinitionParser; // BeanDefinitionParser to create BeanDefinitions of NamedQueries instances looking up a Properties file fom the given location.\npublic class PersistentEntitiesFactoryBean extends Object implements FactoryBean<PersistentEntities>; // Factory been to create PersistentEntities from a MappingContext.\npublic class PropertiesBasedNamedQueriesFactoryBean extends PropertiesLoaderSupport implements FactoryBean<PropertiesBasedNamedQueries>, InitializingBean; // Factory bean to create PropertiesBasedNamedQueries.\npublic class RepositoryBeanDefinitionParser extends Object implements BeanDefinitionParser; // Base class to implement repository namespaces.\npublic abstract class RepositoryBeanDefinitionRegistrarSupport extends Object implements ImportBeanDefinitionRegistrar, ResourceLoaderAware, EnvironmentAware; // Base class to implement ImportBeanDefinitionRegistrars to enable repository\npublic interface RepositoryConfiguration<T extends RepositoryConfigurationSource>; // Configuration information for a single repository instance.\npublic class RepositoryConfigurationDelegate extends Object; // Delegate for configuration integration to reuse the general way of detecting repositories.\npublic interface RepositoryConfigurationExtension; // SPI to implement store specific extension to the repository bean definition registration process.\npublic abstract class RepositoryConfigurationExtensionSupport extends Object implements RepositoryConfigurationExtension; // Base implementation of RepositoryConfigurationExtension to ease the implementation of the interface.\n", "des": "Support classes for repository namespace and JavaConfig integration."}
{"index": 2217, "repo": "spring-data-commons-3.1.2", "code": "package core;\n\npackage core.support; // Base classes to implement repositories for various data stores.\npublic interface CrudMethods; // Meta-information about the CRUD methods of a repository.\npublic interface EntityInformation<T,ID> extends EntityMetadata<T>; // Extension of EntityMetadata to add functionality to query information of entity instances.\npublic interface EntityMetadata<T>; // Metadata for entity types.\npublic interface NamedQueries; // Abstraction of a map of NamedQueries that can be looked up by their names.\npublic class RepositoryCreationException extends InvalidDataAccessApiUsageException; // Exception thrown in the context of repository creation.\npublic interface RepositoryInformation extends RepositoryMetadata; // Additional repository specific information\npublic abstract class RepositoryInformationSupport extends Object implements RepositoryInformation; // Common base class for RepositoryInformation that delays resolution of RepositoryMetadata and the repository base to the latest possible time.\npublic interface RepositoryMetadata; // Metadata for repository interfaces.\n", "des": "Core abstractions for repository implementation."}
{"index": 2218, "repo": "spring-data-commons-3.1.2", "code": "package support;\n\npublic abstract class AbstractEntityInformation<T,ID> extends Object implements EntityInformation<T,ID>; // Base class for implementations of EntityInformation.\npublic abstract class AbstractRepositoryMetadata extends Object implements RepositoryMetadata; // Base class for RepositoryMetadata implementations.\npublic class AnnotationRepositoryMetadata extends AbstractRepositoryMetadata; // RepositoryMetadata implementation inspecting the given repository interface for a RepositoryDefinition annotation.\npublic class DefaultCrudMethods extends Object implements CrudMethods; // Default implementation to discover CRUD methods based on the given RepositoryMetadata.\npublic class DefaultRepositoryMetadata extends AbstractRepositoryMetadata; // Default implementation of RepositoryMetadata.\npublic class DelegatingEntityInformation<T,ID> extends Object implements EntityInformation<T,ID>; // Useful base class to implement custom EntityInformations and delegate execution of standard methods from EntityInformation to a special implementation.\npublic class EventPublishingRepositoryProxyPostProcessor extends Object implements RepositoryProxyPostProcessor; // RepositoryProxyPostProcessor to register a MethodInterceptor to intercept CrudRepository.save(Object) and CrudRepository.delete(Object) methods and publish events potentially exposed via a method annotated with DomainEvents.\npublic class FragmentNotImplementedException extends RepositoryCreationException; // Exception thrown during repository creation or repository method invocation when invoking a repository method on a fragment without an implementation.\npublic class IncompleteRepositoryCompositionException extends RepositoryCreationException; // Exception thrown during repository creation when a the repository has custom methods that are not backed by a fragment or if no fragment could be found for a repository method invocation.\npublic class MethodInvocationValidator extends Object implements MethodInterceptor; // Interceptor enforcing required return value and method parameter constraints declared on repository query methods.\n@FunctionalInterface public interface MethodLookup; // Strategy interface providing predicates to resolve a method called on a composite to its implementation method.\npublic static final class MethodLookup.InvokedMethod extends Object; // Value object representing an invoked Method.\n@FunctionalInterface public static interface MethodLookup.MethodPredicate extends BiPredicate<MethodLookup.InvokedMethod,Method>; // A method predicate to be applied on the MethodLookup.InvokedMethod and method candidate.\npublic class PersistenceExceptionTranslationRepositoryProxyPostProcessor extends Object implements RepositoryProxyPostProcessor; // RepositoryProxyPostProcessor to register a PersistenceExceptionTranslationInterceptor on the repository proxy.\n", "des": "Base classes to implement repositories for various data stores."}
{"index": 2219, "repo": "spring-data-commons-3.1.2", "code": "package history;\n\npackage history.support; // Value objects to implement core repository interfaces for historiography.\n@NoRepositoryBean public interface RevisionRepository<T,ID,N extends Number & Comparable<N>> extends Repository<T,ID>; // A repository which can access entities held in a variety of Revisions.\n", "des": "API for repositories using historiography."}
{"index": 2220, "repo": "spring-data-commons-3.1.2", "code": "package support;\n\npublic interface RevisionEntityInformation; // Information about a revision entity which is the class carrying revision information for an entity.\n", "des": "Value objects to implement core repository interfaces for historiography."}
{"index": 2221, "repo": "spring-data-commons-3.1.2", "code": "package init;\n\npublic abstract class AbstractRepositoryPopulatorFactoryBean extends AbstractFactoryBean<ResourceReaderRepositoryPopulator> implements ApplicationListener<ContextRefreshedEvent>, ApplicationContextAware; // Base class for FactoryBeans creating ResourceReaderRepositoryPopulators.\npublic class Jackson2RepositoryPopulatorFactoryBean extends AbstractRepositoryPopulatorFactoryBean; // FactoryBean to set up a ResourceReaderRepositoryPopulator with a Jackson2ResourceReader.\npublic class Jackson2ResourceReader extends Object implements ResourceReader; // A ResourceReader using Jackson to read JSON into objects.\npublic class RepositoriesPopulatedEvent extends ApplicationEvent; // ApplicationEvent being thrown after a RepositoryPopulator has finished populating the Repositories available in the ApplicationContext.\npublic interface RepositoryPopulator; // Interface for components that will populate the Spring Data repositories with objects.\npublic interface ResourceReader;\npublic static enum ResourceReader.Type extends Enum<ResourceReader.Type>;\npublic class ResourceReaderRepositoryPopulator extends Object implements RepositoryPopulator, ApplicationEventPublisherAware; // A RepositoryPopulator using a ResourceReader to read objects from the configured Resources.\npublic class UnmarshallerRepositoryPopulatorFactoryBean extends AbstractRepositoryPopulatorFactoryBean; // FactoryBean to create a ResourceReaderRepositoryPopulator using an Unmarshaller.\npublic class UnmarshallingResourceReader extends Object implements ResourceReader;\n", "des": "Support for repository initialization using XML and JSON."}
{"index": 2222, "repo": "spring-data-commons-3.1.2", "code": "package query;\n\npackage query.parser; // Support classes for parsing queries from method names.\npublic final class DefaultParameters extends Parameters<DefaultParameters,Parameter>; // Default implementation of Parameters.\npublic class ExtensionAwareQueryMethodEvaluationContextProvider extends Object implements QueryMethodEvaluationContextProvider; // An QueryMethodEvaluationContextProvider that assembles an EvaluationContext from a list of EvaluationContextExtension instances.\npublic interface FluentQuery<T>; // Fluent interface to define and run a query along with projection and sorting and.\npublic static interface FluentQuery.FetchableFluentQuery<T> extends FluentQuery<T>; // Fetchable extension FluentQuery allowing to materialize results from the underlying query.\npublic static interface FluentQuery.ReactiveFluentQuery<T> extends FluentQuery<T>; // Reactive extension FluentQuery allowing to materialize results from the underlying query.\npublic interface ListQueryByExampleExecutor<T> extends QueryByExampleExecutor<T>; // Interface to allow execution of Query by Example Example instances.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface Param; // Annotation to bind method parameters to a query via a named parameter.\npublic class Parameter extends Object; // Class to abstract a single parameter of a query method.\npublic interface ParameterAccessor extends Iterable<Object>; // Interface to access method parameters.\npublic class ParameterOutOfBoundsException extends RuntimeException; // Exception to be thrown when trying to access a Parameter with an invalid index inside a Parameters instance.\npublic abstract class Parameters<S extends Parameters<S,T>,T extends Parameter> extends Object implements Streamable<T>; // Abstracts method parameters that have to be bound to query parameters or applied to the query independently.\npublic class ParametersParameterAccessor extends Object implements ParameterAccessor; // ParameterAccessor implementation using a Parameters instance to find special parameters.\npublic interface QueryByExampleExecutor<T>; // Interface to allow execution of Query by Example Example instances.\npublic final class QueryCreationException extends RepositoryCreationException; // Exception to be thrown if a query cannot be created from a Method.\npublic interface QueryLookupStrategy; // Strategy interface for which way to lookup RepositoryQuerys.\npublic static enum QueryLookupStrategy.Key extends Enum<QueryLookupStrategy.Key>;\npublic class QueryMethod extends Object; // Abstraction of a method that is designated to execute a finder query.\n", "des": "Support classes to work with query methods."}
{"index": 2223, "repo": "spring-data-commons-3.1.2", "code": "package parser;\n\npublic abstract class AbstractQueryCreator<T,S> extends Object; // Base class for query creators that create criteria based queries from a PartTree.\npublic class Part extends Object; // A single part of a method name that has to be transformed into a query part.\npublic static enum Part.IgnoreCaseType extends Enum<Part.IgnoreCaseType>; // The various types of ignore case that are supported.\npublic static enum Part.Type extends Enum<Part.Type>; // The type of a method name part.\npublic class PartTree extends Object implements Streamable<PartTree.OrPart>; // Class to parse a String into a tree or PartTree.OrParts consisting of simple Part instances in turn.\npublic static class PartTree.OrPart extends Object implements Streamable<Part>; // A part of the parsed source that results from splitting up the resource around Or keywords.\n", "des": "Support classes for parsing queries from method names."}
{"index": 2224, "repo": "spring-data-commons-3.1.2", "code": "package reactive;\n\n@NoRepositoryBean public interface ReactiveCrudRepository<T,ID> extends Repository<T,ID>; // Interface for generic CRUD operations on a repository for a specific type.\n@NoRepositoryBean public interface ReactiveSortingRepository<T,ID> extends Repository<T,ID>; // Repository fragment to provide methods to retrieve entities using the sorting abstraction.\n@NoRepositoryBean public interface RxJava3CrudRepository<T,ID> extends Repository<T,ID>; // Interface for generic CRUD operations on a repository for a specific type.\n@NoRepositoryBean public interface RxJava3SortingRepository<T,ID> extends Repository<T,ID>; // Repository fragment to provide methods to retrieve entities using the sorting abstraction.\n", "des": "Support for reactive repositories."}
{"index": 2225, "repo": "spring-data-commons-3.1.2", "code": "package support;\n\npublic class DefaultRepositoryInvokerFactory extends Object implements RepositoryInvokerFactory; // Default implementation of RepositoryInvokerFactory to inspect the requested repository type and create a matching RepositoryInvoker that suits the repository best.\npublic class DomainClassConverter<T extends ConversionService & ConverterRegistry> extends Object implements ConditionalGenericConverter, ApplicationContextAware; // Converter to convert arbitrary input into domain classes managed by Spring Data CrudRepositorys.\npublic class QueryMethodParameterConversionException extends RuntimeException; // Exception to represent a failed attempt to convert a source value into a query method parameter.\npublic class Repositories extends Object implements Iterable<Class<?>>; // Wrapper class to access repository instances obtained from a ListableBeanFactory.\npublic interface RepositoryInvocationInformation; // Meta-information about the methods a repository exposes.\npublic interface RepositoryInvoker extends RepositoryInvocationInformation; // API to invoke (CRUD) methods on Spring Data repository instances independently of the base interface they expose.\npublic interface RepositoryInvokerFactory; // Interface for a factory to create RepositoryInvoker instances for repositories managing a particular domain type.\n", "des": "Support classes for integration of the repository programming model with 3rd party frameworks."}
{"index": 2226, "repo": "spring-data-commons-3.1.2", "code": "package util;\n\npublic abstract class ClassUtils extends Object; // Utility class to work with classes.\npublic abstract class QueryExecutionConverters extends Object; // Converters to potentially wrap the execution of a repository method into a variety of wrapper types potentially being available on the classpath.\npublic static interface QueryExecutionConverters.ExecutionAdapter;\npublic static interface QueryExecutionConverters.ThrowingSupplier;\npublic static final class QueryExecutionConverters.WrapperType extends Object;\npublic abstract class ReactiveWrapperConverters extends Object; // Conversion support for reactive wrapper types.\n@Deprecated(since=\"3.0\", forRemoval=true) public abstract class ReactiveWrappers extends Object;\n@Deprecated(since=\"3.0\", forRemoval=true) public static enum ReactiveWrappers.ReactiveLibrary extends Enum<ReactiveWrappers.ReactiveLibrary>;\npublic abstract class TxUtils extends Object; // Simple constants holder.\n", "des": "Utility classes for repository implementations."}
{"index": 2227, "repo": "spring-data-commons-3.1.2", "code": "package spi;\n\npublic interface EvaluationContextExtension extends ExtensionIdAware; // SPI to allow adding a set of properties and function definitions accessible via the root of an EvaluationContext provided by an ExtensionAwareQueryMethodEvaluationContextProvider.\npublic interface ExtensionIdAware; // Marker interface for Spring Data EvaluationContext extensions.\npublic class Function extends Object; // Value object to represent a function.\npublic interface ReactiveEvaluationContextExtension extends ExtensionIdAware; // SPI to resolve a EvaluationContextExtension to make it accessible via the root of an EvaluationContext provided by a ExtensionAwareQueryMethodEvaluationContextProvider.\n", "des": "Service provider interfaces to extend the query execution mechanism."}
{"index": 2228, "repo": "spring-data-commons-3.1.2", "code": "package support;\n\npublic class ExampleMatcherAccessor extends Object; // Accessor for the ExampleMatcher to use in modules that support query by example (QBE) querying.\npublic interface IsNewStrategy; // Strategy interface to determine whether a given entity is to be considered new.\npublic abstract class PageableExecutionUtils extends Object; // Support for query execution using Pageable.\npublic enum PersistableIsNewStrategy extends Enum<PersistableIsNewStrategy> implements IsNewStrategy; // IsNewStrategy that invokes Persistable.isNew() on the given object.\npublic class WindowIterator<T> extends Object implements Iterator<T>; // An Iterator over multiple Windows obtained via a window function, that keeps track of the current ScrollPosition allowing scrolling across all result elements.\npublic static class WindowIterator.WindowIteratorBuilder<T> extends Object; // Builder API to construct a WindowIterator.\n", "des": "Core support classes."}
{"index": 2229, "repo": "spring-data-commons-3.1.2", "code": "package transaction;\n\n@Deprecated public class ChainedTransactionManager extends Object implements PlatformTransactionManager;\n", "des": "Contains advanced support for transactions, e.g. a best-effort delegating transaction manager."}
{"index": 2230, "repo": "spring-data-commons-3.1.2", "code": "package type;\n\npackage type.classreading; // Support classes for reading annotation and class-level metadata.\n@Deprecated public interface MethodsMetadata extends ClassMetadata;\n", "des": "Core support package for type introspection."}
{"index": 2231, "repo": "spring-data-commons-3.1.2", "code": "package classreading;\n\n@Deprecated public interface MethodsMetadataReader extends MetadataReader;\n@Deprecated public class MethodsMetadataReaderFactory extends SimpleMetadataReaderFactory;\n", "des": "Support classes for reading annotation and class-level metadata."}
{"index": 2232, "repo": "spring-data-commons-3.1.2", "code": "package util;\n\npublic class AnnotatedTypeScanner extends Object implements ResourceLoaderAware, EnvironmentAware; // Scanner to find types with annotations on the classpath.\npublic class AnnotationDetectionFieldCallback extends Object implements ReflectionUtils.FieldCallback; // A ReflectionUtils.FieldCallback that will inspect each field for a given annotation.\npublic class AnnotationDetectionMethodCallback<A extends Annotation> extends Object implements ReflectionUtils.MethodCallback; // ReflectionUtils.MethodCallback to find annotations of a given type.\npublic abstract class BeanLookup extends Object; // Simple helper to allow lenient lookup of beans of a given type from a ListableBeanFactory.\npublic interface CastUtils;\n@Deprecated(since=\"3.0\", forRemoval=true) public class ClassTypeInformation<S> extends Object;\npublic interface CloseableIterator<T> extends Iterator<T>, Closeable; // A CloseableIterator serves as a bridging data structure for the underlying data store specific results that can be wrapped in a Java 8 java.util.stream.Stream.\npublic interface CustomCollectionRegistrar; // An SPI to register custom collection types.\npublic class CustomCollections extends Object; // Central API to expose information about custom collections present for Spring Data.\npublic class DirectFieldAccessFallbackBeanWrapper extends BeanWrapperImpl; // Custom extension of BeanWrapperImpl that falls back to direct field access in case the object or type being wrapped does not use accessor methods.\npublic final class KotlinReflectionUtils extends Object; // Reflection utility methods specific to Kotlin reflection.\npublic class Lazy<T> extends Object implements Supplier<T>; // Simple value type to delay the creation of an object using a Supplier returning the produced object for subsequent lookups.\npublic class MethodInvocationRecorder extends Object; // API to record method invocations via method references on a proxy.\npublic static interface MethodInvocationRecorder.PropertyNameDetectionStrategy;\npublic static class MethodInvocationRecorder.Recorded<T> extends Object;\npublic static interface MethodInvocationRecorder.Recorded.ToCollectionConverter<T,S> extends Function<T,Collection<S>>;\npublic static interface MethodInvocationRecorder.Recorded.ToMapConverter<T,S> extends Function<T,Map<?,S>>;\npublic abstract class NullableUtils extends Object; // Utility methods to introspect nullability rules declared in packages, classes and methods.\npublic class NullableWrapper extends Object; // Simple value object to wrap a nullable delegate.\n", "des": "Core utility APIs such as a type information framework to resolve generic types."}
{"index": 2233, "repo": "spring-data-commons-3.1.2", "code": "package web;\n\npackage web.config; // Spring Data web configuration.\npackage web.querydsl; // Querydsl-specific web support.\npublic class HateoasPageableHandlerMethodArgumentResolver extends PageableHandlerMethodArgumentResolver implements org.springframework.hateoas.server.mvc.UriComponentsContributor; // Extension of PageableHandlerMethodArgumentResolver that also supports enhancing URIs using Spring HATEOAS support.\npublic class HateoasSortHandlerMethodArgumentResolver extends SortHandlerMethodArgumentResolver implements org.springframework.hateoas.server.mvc.UriComponentsContributor; // Extension of SortHandlerMethodArgumentResolver that also supports enhancing URIs using Spring HATEOAS support.\n@Documented @Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) public @interface JsonPath; // Annotation to explicitly declare a JSON Path expression on a projection interface.\npublic class JsonProjectingMethodInterceptorFactory extends Object implements MethodInterceptorFactory; // MethodInterceptorFactory to create a MethodInterceptor that will\npublic interface PageableArgumentResolver extends HandlerMethodArgumentResolver; // Argument resolver to extract a Pageable object from a NativeWebRequest for a particular MethodParameter.\n@Documented @Retention(RUNTIME) @Target(PARAMETER) public @interface PageableDefault; // Annotation to set defaults when injecting a Pageable into a controller method.\npublic class PageableHandlerMethodArgumentResolver extends PageableHandlerMethodArgumentResolverSupport implements PageableArgumentResolver; // Extracts paging information from web requests and thus allows injecting Pageable instances into controller methods.\npublic abstract class PageableHandlerMethodArgumentResolverSupport extends Object; // Base class providing methods for handler method argument resolvers to create paging information from web requests and thus allows injecting Pageable instances into controller methods.\npublic class PagedResourcesAssembler<T> extends Object implements org.springframework.hateoas.server.RepresentationModelAssembler<Page<T>,org.springframework.hateoas.PagedModel<org.springframework.hateoas.EntityModel<T>>>; // RepresentationModelAssembler to easily convert Page instances into PagedModel.\n", "des": "Integration with Spring MVC."}
{"index": 2234, "repo": "spring-data-commons-3.1.2", "code": "package config;\n\n@Retention(RUNTIME) @Target({TYPE,ANNOTATION_TYPE}) @Inherited @Import({SpringDataWebConfigurationImportSelector.class,QuerydslActivator.class}) public @interface EnableSpringDataWebSupport; // Annotation to automatically register the following beans for usage with Spring MVC.\npublic static class EnableSpringDataWebSupport.QuerydslActivator extends Object implements ImportSelector; // Import selector to register QuerydslWebConfiguration as configuration class if Querydsl is on the classpath.\npublic static class EnableSpringDataWebSupport.SpringDataWebConfigurationImportSelector extends Object implements ImportSelector, ResourceLoaderAware; // Import selector to import the appropriate configuration class depending on whether Spring HATEOAS is present on the classpath.\n@Configuration(proxyBeanMethods=false) public class HateoasAwareSpringDataWebConfiguration extends SpringDataWebConfiguration; // JavaConfig class to register PagedResourcesAssembler, PagedResourcesAssemblerArgumentResolver, SlicedResourcesAssembler and SlicedResourcesAssemblerArgumentResolver.\n@FunctionalInterface public interface PageableHandlerMethodArgumentResolverCustomizer; // Callback interface that can be implemented by beans wishing to customize the PageableHandlerMethodArgumentResolver configuration.\n@Configuration(proxyBeanMethods=false) public class ProjectingArgumentResolverRegistrar extends Object; // Configuration class to register a BeanPostProcessor to augment RequestMappingHandlerAdapter with a ProxyingHandlerMethodArgumentResolver.\n@Configuration(proxyBeanMethods=false) public class QuerydslWebConfiguration extends Object implements WebMvcConfigurer; // Querydsl-specific web configuration for Spring Data.\n@Configuration(proxyBeanMethods=false) public class ReactiveQuerydslWebConfiguration extends Object implements WebFluxConfigurer; // Querydsl-specific web configuration for Spring Data.\npublic interface SortHandlerMethodArgumentResolverCustomizer; // Callback interface that can be implemented by beans wishing to customize the SortHandlerMethodArgumentResolver configuration.\npublic class SpringDataJacksonConfiguration extends Object implements SpringDataJacksonModules; // JavaConfig class to export Jackson specific configuration.\npublic interface SpringDataJacksonModules; // Marker interface to describe configuration classes that ship Jackson modules that are supposed to be added to the Jackson ObjectMapper configured for EnableSpringDataWebSupport.\n", "des": "Spring Data web configuration."}
{"index": 2235, "repo": "spring-data-commons-3.1.2", "code": "package querydsl;\n\npublic class QuerydslPredicateArgumentResolver extends QuerydslPredicateArgumentResolverSupport implements HandlerMethodArgumentResolver; // HandlerMethodArgumentResolver to allow injection of Predicate into Spring MVC controller methods.\npublic abstract class QuerydslPredicateArgumentResolverSupport extends Object; // HandlerMethodArgumentResolver to allow injection of Predicate into Spring MVC controller methods.\npublic class ReactiveQuerydslPredicateArgumentResolver extends QuerydslPredicateArgumentResolverSupport implements SyncHandlerMethodArgumentResolver; // HandlerMethodArgumentResolver to allow injection of Predicate into Spring WebFlux controller methods.\n", "des": "Querydsl-specific web support."}
{"index": 2236, "repo": "spring-security-acl-6.1.2", "code": "package acls;\n\npackage acls.afterinvocation; // After-invocation providers for collection and array filtering.\npackage acls.domain; // Basic implementation of access control lists (ACLs) interfaces.\npackage acls.jdbc; // JDBC-based persistence of ACL information\npackage acls.model; // Interfaces and shared classes to manage access control lists (ACLs) for domain object instances.\npublic class AclEntryVoter extends org.springframework.security.access.vote.AbstractAclVoter; // Given a domain object instance passed as a method argument, ensures the principal has appropriate permission as indicated by the AclService.\npublic class AclPermissionCacheOptimizer extends Object implements org.springframework.security.access.PermissionCacheOptimizer; // Batch loads ACLs for collections of objects to allow optimised filtering.\npublic class AclPermissionEvaluator extends Object implements org.springframework.security.access.PermissionEvaluator; // Used by Spring Security's expression-based access control implementation to evaluate permissions for a particular object using the ACL module.\n", "des": "The Spring Security ACL package which implements instance-based security for domain objects."}
{"index": 2237, "repo": "spring-security-acl-6.1.2", "code": "package afterinvocation;\n\npublic abstract class AbstractAclProvider extends Object implements org.springframework.security.access.AfterInvocationProvider; // Abstract AfterInvocationProvider which provides commonly-used ACL-related services.\npublic class AclEntryAfterInvocationCollectionFilteringProvider extends AbstractAclProvider; // Given a Collection of domain object instances returned from a secure object invocation, remove any Collection elements the principal does not have appropriate permission to access as defined by the AclService.\npublic class AclEntryAfterInvocationProvider extends AbstractAclProvider implements org.springframework.context.MessageSourceAware; // Given a domain object instance returned from a secure object invocation, ensures the principal has appropriate permission as defined by the AclService.\n", "des": "After-invocation providers for collection and array filtering."}
{"index": 2238, "repo": "spring-security-acl-6.1.2", "code": "package domain;\n\npublic abstract class AbstractPermission extends Object implements Permission; // Provides an abstract superclass for Permission implementations.\npublic class AccessControlEntryImpl extends Object implements AccessControlEntry, AuditableAccessControlEntry; // An immutable default implementation of AccessControlEntry.\npublic interface AclAuthorizationStrategy; // Strategy used by AclImpl to determine whether a principal is permitted to call adminstrative methods on the AclImpl.\npublic class AclAuthorizationStrategyImpl extends Object implements AclAuthorizationStrategy; // Default implementation of AclAuthorizationStrategy.\npublic abstract class AclFormattingUtils extends Object; // Utility methods for displaying ACL information.\npublic class AclImpl extends Object implements Acl, MutableAcl, AuditableAcl, OwnershipAcl; // Base implementation of Acl.\npublic interface AuditLogger; // Used by AclImpl to log audit events.\npublic class BasePermission extends AbstractPermission; // A set of standard permissions.\npublic class ConsoleAuditLogger extends Object implements AuditLogger; // A basic implementation of AuditLogger.\npublic class CumulativePermission extends AbstractPermission; // Represents a Permission that is constructed at runtime from other permissions.\npublic class DefaultPermissionFactory extends Object implements PermissionFactory; // Default implementation of PermissionFactory.\npublic class DefaultPermissionGrantingStrategy extends Object implements PermissionGrantingStrategy;\npublic class GrantedAuthoritySid extends Object implements Sid; // Represents a GrantedAuthority as a Sid.\npublic class IdentityUnavailableException extends RuntimeException; // Thrown if an ACL identity could not be extracted from an object.\npublic class ObjectIdentityImpl extends Object implements ObjectIdentity; // Simple implementation of ObjectIdentity.\npublic class ObjectIdentityRetrievalStrategyImpl extends Object implements ObjectIdentityRetrievalStrategy, ObjectIdentityGenerator; // Basic implementation of ObjectIdentityRetrievalStrategy and ObjectIdentityGenerator that uses the constructors of ObjectIdentityImpl to create the ObjectIdentity.\npublic interface PermissionFactory; // Provides a simple mechanism to retrieve Permission instances from integer masks.\npublic class PrincipalSid extends Object implements Sid; // Represents an Authentication.getPrincipal() as a Sid.\npublic class SidRetrievalStrategyImpl extends Object implements SidRetrievalStrategy; // Basic implementation of SidRetrievalStrategy that creates a Sid for the principal, as well as every granted authority the principal holds.\npublic class SpringCacheBasedAclCache extends Object implements AclCache; // Simple implementation of AclCache that delegates to Cache implementation.\n", "des": "Basic implementation of access control lists (ACLs) interfaces."}
{"index": 2239, "repo": "spring-security-acl-6.1.2", "code": "package jdbc;\n\npublic class BasicLookupStrategy extends Object implements LookupStrategy; // Performs lookups in a manner that is compatible with ANSI SQL.\npublic class JdbcAclService extends Object implements AclService; // Simple JDBC-based implementation of AclService.\npublic class JdbcMutableAclService extends JdbcAclService implements MutableAclService; // Provides a base JDBC implementation of MutableAclService.\npublic interface LookupStrategy; // Performs lookups for AclService.\n", "des": "JDBC-based persistence of ACL information"}
{"index": 2240, "repo": "spring-security-acl-6.1.2", "code": "package model;\n\npublic interface AccessControlEntry extends Serializable; // Represents an individual permission assignment within an Acl.\npublic interface Acl extends Serializable; // Represents an access control list (ACL) for a domain object.\npublic interface AclCache; // A caching layer for JdbcAclService.\npublic abstract class AclDataAccessException extends RuntimeException; // Abstract base class for Acl data operations.\npublic interface AclService; // Provides retrieval of Acl instances.\npublic class AlreadyExistsException extends AclDataAccessException; // Thrown if an Acl entry already exists for the object.\npublic interface AuditableAccessControlEntry extends AccessControlEntry; // Represents an ACE that provides auditing information.\npublic interface AuditableAcl extends MutableAcl; // A mutable ACL that provides audit capabilities.\npublic class ChildrenExistException extends AclDataAccessException; // Thrown if an Acl cannot be deleted because children Acls exist.\npublic interface MutableAcl extends Acl; // A mutable Acl.\npublic interface MutableAclService extends AclService; // Provides support for creating and storing Acl instances.\npublic class NotFoundException extends AclDataAccessException; // Thrown if an ACL-related object cannot be found.\npublic interface ObjectIdentity extends Serializable; // Represents the identity of an individual domain object instance.\npublic interface ObjectIdentityGenerator; // Strategy which creates an ObjectIdentity from an object identifier (such as a primary key) and type information.\npublic interface ObjectIdentityRetrievalStrategy; // Strategy interface that provides the ability to determine which ObjectIdentity will be returned for a particular domain object\npublic interface OwnershipAcl extends MutableAcl; // A mutable ACL that provides ownership capabilities.\npublic interface Permission extends Serializable; // Represents a permission granted to a Sid for a given domain object.\npublic interface PermissionGrantingStrategy; // Allow customization of the logic for determining whether a permission or permissions are granted to a particular sid or sids by an Acl.\npublic interface Sid extends Serializable; // A security identity recognised by the ACL system.\npublic interface SidRetrievalStrategy; // Strategy interface that provides an ability to determine the Sid instances applicable for an Authentication.\npublic class UnloadedSidException extends AclDataAccessException; // Thrown if an Acl cannot perform an operation because it only loaded a subset of Sids and the caller has requested details for an unloaded Sid .\n", "des": "Interfaces and shared classes to manage access control lists (ACLs) for domain object instances."}
{"index": 2241, "repo": "spring-data-keyvalue-3.1.2", "code": "package annotation;\n\n@Documented @Retention(RUNTIME) @Target({METHOD,TYPE}) public @interface KeySpace; // Marker interface for methods with Persistent annotations indicating the presence of a dedicated keyspace the entity should reside in.\n", "des": "Key-Value annotations for declarative keyspace configuration."}
{"index": 2242, "repo": "spring-data-keyvalue-3.1.2", "code": "package core;\n\npackage core.event; // Support classes for key-value events, like standard persistence lifecycle events.\npackage core.mapping; // Infrastructure for the Key-Value mapping subsystem and keyspace resolution.\npackage core.query; // Key/value specific query and abstractions.\npublic abstract class AbstractKeyValueAdapter extends Object implements KeyValueAdapter; // Base implementation of KeyValueAdapter holds QueryEngine to delegate find and count execution to.\npublic interface CriteriaAccessor<T>; // Resolves the criteria object from given KeyValueQuery.\npublic class ForwardingCloseableIterator<T> extends Object implements CloseableIterator<T>; // Forwards CloseableIterator invocations to the configured Iterator delegate.\npublic interface IdentifierGenerator; // API for components generating identifiers.\npublic final class IterableConverter extends Object; // Converter capable of transforming a given Iterable into a collection type.\npublic interface KeyValueAdapter extends DisposableBean; // KeyValueAdapter unifies access and shields the underlying key/value specific implementation.\npublic interface KeyValueCallback<T>; // Generic callback interface for code that operates on a KeyValueAdapter.\npublic interface KeyValueOperations extends DisposableBean; // Interface that specifies a basic set of key/value operations.\npublic class KeyValuePersistenceExceptionTranslator extends Object implements PersistenceExceptionTranslator; // Simple PersistenceExceptionTranslator implementation for key/value stores that converts the given runtime exception to an appropriate exception from the org.springframework.dao hierarchy.\npublic class KeyValueTemplate extends Object implements KeyValueOperations, ApplicationEventPublisherAware; // Basic implementation of KeyValueOperations.\npublic abstract class QueryEngine<ADAPTER extends KeyValueAdapter,CRITERIA,SORT> extends Object; // Base implementation for accessing and executing KeyValueQuery against a KeyValueAdapter.\npublic interface SortAccessor<T>; // Resolves the Sort object from given KeyValueQuery and potentially converts it into a store specific representation that can be used by the QueryEngine implementation.\npublic class SpelCriteria extends Object; // SpelCriteria allows to pass on a SpelExpression and EvaluationContext to the actual query processor.\npublic class SpelPropertyComparator<T> extends Object implements Comparator<T>; // Comparator implementation using SpelExpression.\npublic class SpelSortAccessor extends Object implements SortAccessor<Comparator<?>>; // SortAccessor implementation capable of creating SpelPropertyComparator.\n", "des": "Core key/value implementation."}
{"index": 2243, "repo": "spring-data-keyvalue-3.1.2", "code": "package event;\n\npublic class KeyValueEvent<T> extends ApplicationEvent; // KeyValueEvent gets published for operations executed by eg.\npublic static class KeyValueEvent.AfterDeleteEvent<T> extends KeyValueEvent<T>; // KeyValueEvent after removing an object by with a given key.\npublic static class KeyValueEvent.AfterDropKeySpaceEvent<T> extends KeyValueEvent<T>; // KeyValueEvent after removing all elements in a given keyspace.\npublic static class KeyValueEvent.AfterGetEvent<T> extends KeyValueEvent<T>; // KeyValueEvent after loading an object by its key.\npublic static class KeyValueEvent.AfterInsertEvent<T> extends KeyValueEvent<T>; // KeyValueEvent after inserting an object by with a given key.\npublic static class KeyValueEvent.AfterUpdateEvent<T> extends KeyValueEvent<T>; // KeyValueEvent after updating an object by with a given key.\npublic static class KeyValueEvent.BeforeDeleteEvent<T> extends KeyValueEvent<T>; // KeyValueEvent before removing an object by with a given key.\npublic static class KeyValueEvent.BeforeDropKeySpaceEvent<T> extends KeyValueEvent<T>; // KeyValueEvent before removing all elements in a given keyspace.\npublic static class KeyValueEvent.BeforeGetEvent<T> extends KeyValueEvent<T>; // KeyValueEvent raised before loading an object by its key.\npublic static class KeyValueEvent.BeforeInsertEvent<T> extends KeyValueEvent<T>; // KeyValueEvent before inserting an object by with a given key.\npublic static class KeyValueEvent.BeforeUpdateEvent<T> extends KeyValueEvent<T>; // KeyValueEvent before updating an object by with a given key.\n", "des": "Support classes for key-value events, like standard persistence lifecycle events."}
{"index": 2244, "repo": "spring-data-keyvalue-3.1.2", "code": "package mapping;\n\npackage mapping.context; // Infrastructure for the Key-Value mapping context.\npublic enum AnnotationBasedKeySpaceResolver extends Enum<AnnotationBasedKeySpaceResolver> implements KeySpaceResolver; // AnnotationBasedKeySpaceResolver looks up Persistent and checks for presence of either meta or direct usage of KeySpace.\npublic class BasicKeyValuePersistentEntity<T,P extends KeyValuePersistentProperty<P>> extends BasicPersistentEntity<T,P> implements KeyValuePersistentEntity<T,P>; // KeyValuePersistentEntity implementation that adds specific meta-data such as the keySpace.\npublic enum ClassNameKeySpaceResolver extends Enum<ClassNameKeySpaceResolver> implements KeySpaceResolver; // Most trivial implementation of KeySpaceResolver returning the Class.getName().\npublic interface KeySpaceResolver; // KeySpaceResolver determines the keyspace a given type is assigned to.\npublic interface KeyValuePersistentEntity<T,P extends KeyValuePersistentProperty<P>> extends MutablePersistentEntity<T,P>;\npublic class KeyValuePersistentProperty<P extends KeyValuePersistentProperty<P>> extends AnnotationBasedPersistentProperty<P>; // Most trivial implementation of PersistentProperty.\npublic class PrefixKeyspaceResolver extends Object implements KeySpaceResolver; // KeySpaceResolver prefixing the keyspace with a static prefix after determining the keyspace from a delegate KeySpaceResolver.\n", "des": "Infrastructure for the Key-Value mapping subsystem and keyspace resolution."}
{"index": 2245, "repo": "spring-data-keyvalue-3.1.2", "code": "package context;\n\npublic class KeyValueMappingContext<E extends KeyValuePersistentEntity<?,P>,P extends KeyValuePersistentProperty<P>> extends AbstractMappingContext<E,P>; // Default implementation of a MappingContext using KeyValuePersistentEntity and KeyValuePersistentProperty as primary abstractions.\n", "des": "Infrastructure for the Key-Value mapping context."}
{"index": 2246, "repo": "spring-data-keyvalue-3.1.2", "code": "package query;\n\npublic class KeyValueQuery<T> extends Object;\n", "des": "Key/value specific query and abstractions."}
{"index": 2247, "repo": "spring-data-keyvalue-3.1.2", "code": "package repository;\n\npackage repository.config; // Support infrastructure for the configuration of key/value specific repositories.\npackage repository.query; // Query derivation mechanism for key/value specific repositories providing a generic SpEL based implementation.\npackage repository.support; // Support infrastructure for query derivation of key/value specific repositories.\npublic interface KeyValueRepository<T,ID> extends ListCrudRepository<T,ID>, ListPagingAndSortingRepository<T,ID>;\n", "des": "Key/value specific repository implementation."}
{"index": 2248, "repo": "spring-data-keyvalue-3.1.2", "code": "package config;\n\npublic abstract class KeyValueRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport; // RepositoryConfigurationExtension for KeyValueRepository.\n@Documented @Retention(RUNTIME) @Target(ANNOTATION_TYPE) public @interface QueryCreatorType; // Annotation to customize the query creator type to be used for a specific store.\n", "des": "Support infrastructure for the configuration of key/value specific repositories."}
{"index": 2249, "repo": "spring-data-keyvalue-3.1.2", "code": "package query;\n\npublic class CachingKeyValuePartTreeQuery extends KeyValuePartTreeQuery; // KeyValuePartTreeQuery implementation deriving queries from PartTree using a predefined AbstractQueryCreator that caches the once created query.\npublic class KeyValuePartTreeQuery extends Object implements RepositoryQuery; // RepositoryQuery implementation deriving queries from PartTree using a predefined AbstractQueryCreator.\npublic static interface KeyValuePartTreeQuery.QueryCreatorFactory<T extends AbstractQueryCreator<?,?>>; // Factory class for obtaining AbstractQueryCreator instances for a given PartTree and ParameterAccessor.\npublic class SpelQueryCreator extends AbstractQueryCreator<KeyValueQuery<SpelExpression>,String>; // AbstractQueryCreator to create SpelExpression based KeyValueQuerys.\n", "des": "Query derivation mechanism for key/value specific repositories providing a generic SpEL based implementation."}
{"index": 2250, "repo": "spring-data-keyvalue-3.1.2", "code": "package support;\n\npublic class KeyValueRepositoryFactory extends RepositoryFactorySupport; // RepositoryFactorySupport specific of handing KeyValueRepository.\npublic class KeyValueRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends RepositoryFactoryBeanSupport<T,S,ID>; // FactoryBean to create KeyValueRepository.\npublic class QuerydslKeyValuePredicateExecutor<T> extends Object implements ListQuerydslPredicateExecutor<T>; // QuerydslPredicateExecutor capable of applying Predicates using CollQuery.\n@Deprecated public class QuerydslKeyValueRepository<T,ID> extends SimpleKeyValueRepository<T,ID> implements QuerydslPredicateExecutor<T>;\npublic class SimpleKeyValueRepository<T,ID> extends Object implements KeyValueRepository<T,ID>; // Simple KeyValueRepository implementation.\n", "des": "Support infrastructure for query derivation of key/value specific repositories."}
{"index": 2251, "repo": "spring-data-keyvalue-3.1.2", "code": "package map;\n\npublic class MapKeyValueAdapter extends AbstractKeyValueAdapter; // KeyValueAdapter implementation for Map.\n", "des": "Repository implementation backed by generic Map instances."}
{"index": 2252, "repo": "spring-data-keyvalue-3.1.2", "code": "package config;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(MapRepositoriesRegistrar.class) @QueryCreatorType(value=SpelQueryCreator.class, repositoryQueryType=CachingKeyValuePartTreeQuery.class) public @interface EnableMapRepositories; // Annotation to activate Map repositories.\npublic class MapRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport; // Map specific RepositoryBeanDefinitionRegistrarSupport implementation.\npublic class MapRepositoryConfigurationExtension extends KeyValueRepositoryConfigurationExtension;\n", "des": "Support infrastructure for the configuration of Map repositories."}
{"index": 2253, "repo": "spring-batch-test-5.0.2", "code": "package test;\n\npackage test.context; // APIs for the configuration of Spring Batch test support.\n@Deprecated(since=\"5.0\", forRemoval=true) public abstract class AssertFile extends Object;\n@Deprecated(since=\"5.0\", forRemoval=true) public class DataSourceInitializer extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean;\npublic class ExecutionContextTestUtils extends Object; // Convenience class for accessing ExecutionContext values from job and step executions.\npublic class JobLauncherTestUtils extends Object; // Utility class for testing batch jobs.\npublic class JobRepositoryTestUtils extends Object; // Convenience class for creating and removing JobExecution instances from a database.\npublic class JobScopeTestExecutionListener extends Object implements org.springframework.test.context.TestExecutionListener; // A TestExecutionListener that sets up job-scope context for dependency injection into unit tests.\npublic class JobScopeTestUtils extends Object; // Utility class for creating and manipulating JobScope in unit tests.\npublic class MetaDataInstanceFactory extends Object; // Convenience methods for creating test instances of JobExecution, JobInstance and StepExecution.\npublic class StepRunner extends Object; // Utility class for executing steps outside of a Job.\npublic class StepScopeTestExecutionListener extends Object implements org.springframework.test.context.TestExecutionListener; // A TestExecutionListener that sets up step-scope context for dependency injection into unit tests.\npublic class StepScopeTestUtils extends Object; // Utility class for creating and manipulating StepScope in unit tests.\n", "des": "Utility classes for batch job/step testing."}
{"index": 2254, "repo": "spring-batch-test-5.0.2", "code": "package context;\n\npublic class BatchTestContextBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor; // BeanPostProcessor implementation that injects a job bean into JobLauncherTestUtils if there is a unique job bean.\npublic class BatchTestContextCustomizer extends Object implements org.springframework.test.context.ContextCustomizer; // ContextCustomizer implementation that adds batch test utility classes (JobLauncherTestUtils and JobRepositoryTestUtils) as beans in the test context.\npublic class BatchTestContextCustomizerFactory extends Object implements org.springframework.test.context.ContextCustomizerFactory; // Factory for BatchTestContextCustomizer.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @TestExecutionListeners(listeners={StepScopeTestExecutionListener.class,JobScopeTestExecutionListener.class}, mergeMode=MERGE_WITH_DEFAULTS) @ExtendWith(org.springframework.test.context.junit.jupiter.SpringExtension.class) public @interface SpringBatchTest; // Annotation that can be specified on a test class that runs Spring Batch based tests.\n", "des": "APIs for the configuration of Spring Batch test support."}
{"index": 2255, "repo": "spring-vault-core-3.0.4", "code": "package vault;\n\npackage vault.annotation; // Annotation support for the Spring Vault.\npackage vault.authentication; // Support for authentication and session management.\npackage vault.client; // Spring Vault Client abstraction.\npackage vault.config; // Spring configuration for Vault.\npackage vault.core; // Vault core support.\npackage vault.security; // Integration with Spring Security.\npackage vault.support; // Classes supporting the Vault packages, such as value objects.\npublic class VaultException extends NestedRuntimeException; // The Spring Vault specific NestedRuntimeException implementation.\n", "des": "Spring support for Hashicorp Vault."}
{"index": 2256, "repo": "spring-vault-core-3.0.4", "code": "package annotation;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Repeatable(VaultPropertySources.class) @Import(org.springframework.vault.annotation.VaultPropertySourceRegistrar.class) public @interface VaultPropertySource; // Annotation providing a convenient and declarative mechanism for adding a VaultPropertySource to Spring's Environment.\npublic static enum VaultPropertySource.Renewal extends Enum<VaultPropertySource.Renewal>;\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(org.springframework.vault.annotation.VaultPropertySourceRegistrar.class) public @interface VaultPropertySources; // Container annotation that aggregates several VaultPropertySource annotations.\n", "des": "Annotation support for the Spring Vault."}
{"index": 2257, "repo": "spring-vault-core-3.0.4", "code": "package authentication;\n\npackage authentication.event; // Support classes for authentication application events.\n@Deprecated(since=\"2.2\", forRemoval=true) public class AppIdAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory;\n@Deprecated(since=\"2.2\", forRemoval=true) public class AppIdAuthenticationOptions extends Object;\npublic static class AppIdAuthenticationOptions.AppIdAuthenticationOptionsBuilder extends Object; // Builder for AppIdAuthenticationOptions.\n@Deprecated(since=\"2.2\", forRemoval=true) @FunctionalInterface public interface AppIdUserIdMechanism;\npublic class AppRoleAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory; // AppRole implementation of ClientAuthentication.\npublic class AppRoleAuthenticationOptions extends Object; // Authentication options for AppRoleAuthentication.\npublic static class AppRoleAuthenticationOptions.AppRoleAuthenticationOptionsBuilder extends Object; // Builder for AppRoleAuthenticationOptions.\npublic static interface AppRoleAuthenticationOptions.RoleId; // RoleId type encapsulating how the roleId is actually obtained.\npublic static interface AppRoleAuthenticationOptions.SecretId; // SecretId type encapsulating how the secretId is actually obtained.\npublic abstract class AuthenticationEventPublisher extends Object; // Publisher for AuthenticationEvents.\npublic class AuthenticationSteps extends Object; // Authentication DSL allowing flow composition to create a VaultToken.\npublic static class AuthenticationSteps.HttpRequest<T> extends Object; // Value object representing a HTTP request.\npublic static class AuthenticationSteps.HttpRequestBuilder extends Object; // Builder for AuthenticationSteps.HttpRequest.\npublic static class AuthenticationSteps.Node<T> extends Object; // Intermediate authentication step with authentication flow operators represented as node.\npublic static class AuthenticationSteps.Pair<L,R> extends Object; // A tuple of two things.\npublic class AuthenticationStepsExecutor extends Object implements ClientAuthentication; // Synchronous executor for AuthenticationSteps using RestOperations to login using authentication flows.\n@FunctionalInterface public interface AuthenticationStepsFactory; // Factory interface for components that create AuthenticationSteps.\npublic class AuthenticationStepsOperator extends Object implements VaultTokenSupplier; // VaultTokenSupplier using AuthenticationSteps to create an authentication flow emitting VaultToken.\npublic class AwsEc2Authentication extends Object implements ClientAuthentication, AuthenticationStepsFactory; // AWS-EC2 login implementation.\npublic class AwsEc2AuthenticationOptions extends Object; // Authentication options for AwsEc2Authentication.\n", "des": "Support for authentication and session management."}
{"index": 2258, "repo": "spring-vault-core-3.0.4", "code": "package event;\n\npublic class AfterLoginEvent extends AuthenticationEvent; // Event published after logging into Vault.\npublic class AfterLoginTokenRenewedEvent extends AuthenticationEvent; // Event published after renewing a login token.\npublic class AfterLoginTokenRevocationEvent extends AuthenticationEvent; // Event published after revoking a login token.\npublic class AuthenticationErrorEvent extends ApplicationEvent; // Generic event class for authentication error events.\n@FunctionalInterface public interface AuthenticationErrorListener; // Listener for Vault exceptional AuthenticationEvents.\npublic abstract class AuthenticationEvent extends ApplicationEvent; // Abstract base class for authentication events.\n@FunctionalInterface public interface AuthenticationListener; // Listener for Vault AuthenticationEvents.\npublic class BeforeLoginTokenRenewedEvent extends AuthenticationEvent; // Event published before renewing a login token.\npublic class BeforeLoginTokenRevocationEvent extends AuthenticationEvent; // Event published before revoking a login token.\npublic class LoginFailedEvent extends AuthenticationErrorEvent; // Event published before renewing a login token.\npublic class LoginTokenExpiredEvent extends AuthenticationEvent; // Event published when dropping an expired login token.\npublic class LoginTokenRenewalFailedEvent extends AuthenticationErrorEvent; // Generic event class for authentication error events.\npublic class LoginTokenRevocationFailedEvent extends AuthenticationErrorEvent; // Generic event class for authentication error events.\n", "des": "Support classes for authentication application events."}
{"index": 2259, "repo": "spring-vault-core-3.0.4", "code": "package client;\n\npublic class ClientHttpConnectorFactory extends Object; // Factory for ClientHttpConnector that supports ReactorClientHttpConnector and JettyClientHttpConnector.\npublic static class ClientHttpConnectorFactory.HttpComponents extends Object; // Utility methods to create ClientHttpRequestFactory using Apache Http Components.\npublic static class ClientHttpConnectorFactory.JdkHttpClient extends Object; // ClientHttpRequestFactory using the JDK's HttpClient.\npublic static class ClientHttpConnectorFactory.JettyClient extends Object; // Utility methods to create ClientHttpRequestFactory using the Jetty Client.\npublic static class ClientHttpConnectorFactory.ReactorNetty extends Object; // ClientHttpConnector for Reactor Netty.\npublic class ClientHttpRequestFactoryFactory extends Object; // Factory for ClientHttpRequestFactory that supports Apache HTTP Components, OkHttp, Netty and the JDK HTTP client (in that order).\npublic static class ClientHttpRequestFactoryFactory.HttpComponents extends Object; // Utilities to create a ClientHttpRequestFactory for Apache Http Components.\npublic static class ClientHttpRequestFactoryFactory.OkHttp3 extends Object; // Utilities to create a ClientHttpRequestFactory for the OkHttpClient.\npublic class ReactiveVaultClients extends Object; // Vault Client factory to create WebClient configured to the needs of accessing Vault.\n@FunctionalInterface public interface ReactiveVaultEndpointProvider; // Component that provides reactively a VaultEndpoint.\npublic class RestTemplateBuilder extends Object; // Builder that can be used to configure and create a RestTemplate.\n@FunctionalInterface public interface RestTemplateCustomizer; // Callback interface that can be used to customize a RestTemplate.\n@FunctionalInterface public interface RestTemplateFactory; // Factory interface that produces a RestTemplate object.\n@FunctionalInterface public interface RestTemplateRequestCustomizer<T extends ClientHttpRequest>; // Callback interface that can be used to customize the ClientHttpRequest sent from a RestTemplate.\npublic class SimpleVaultEndpointProvider extends Object implements VaultEndpointProvider; // VaultEndpointProvider returning a static VaultEndpoint.\npublic class VaultClients extends Object; // Vault Client factory to create RestTemplate configured to the needs of accessing Vault.\npublic static class VaultClients.PrefixAwareUriBuilderFactory extends DefaultUriBuilderFactory;\npublic class VaultEndpoint extends Object implements Serializable; // Value object that defines Vault connection coordinates.\n@FunctionalInterface public interface VaultEndpointProvider; // Component that provides a VaultEndpoint.\npublic abstract class VaultHttpHeaders extends Object; // Class providing utility methods to create Vault HTTP headers.\n", "des": "Spring Vault Client abstraction."}
{"index": 2260, "repo": "spring-vault-core-3.0.4", "code": "package config;\n\n@Configuration(proxyBeanMethods=false) public abstract class AbstractReactiveVaultConfiguration extends AbstractVaultConfiguration; // Base class for Spring Vault configuration using JavaConfig for a reactive infrastructure.\n@Configuration(proxyBeanMethods=false) public abstract class AbstractVaultConfiguration extends Object implements ApplicationContextAware; // Base class for Spring Vault configuration using JavaConfig.\npublic static class AbstractVaultConfiguration.ClientFactoryWrapper extends Object implements InitializingBean, DisposableBean; // Wrapper for ClientHttpRequestFactory to not expose the bean globally.\npublic static class AbstractVaultConfiguration.TaskSchedulerWrapper extends Object implements InitializingBean, DisposableBean; // Wrapper to keep ThreadPoolTaskScheduler local to Spring Vault and to not expose the bean globally.\n@Configuration public class EnvironmentVaultConfiguration extends AbstractVaultConfiguration implements ApplicationContextAware; // Configuration using Spring's Environment to configure Spring Vault endpoint, SSL options and authentication options.\n", "des": "Spring configuration for Vault."}
{"index": 2261, "repo": "spring-vault-core-3.0.4", "code": "package core;\n\npackage core.env; // Spring Vault's environment abstraction consisting property source support.\npackage core.lease; // The core package implementing lease renewal and secret rotation.\npackage core.util; // Property transformer classes for Spring Vault core support.\npublic interface ReactiveVaultOperations; // Interface that specifies a basic set of Vault operations executed on a reactive infrastructure, implemented by ReactiveVaultTemplate.\npublic class ReactiveVaultTemplate extends Object implements ReactiveVaultOperations; // This class encapsulates main Vault interaction.\n@FunctionalInterface public interface RestOperationsCallback<T>; // A callback for executing arbitrary operations on RestOperations.\npublic class SecretNotFoundException extends VaultException; // An exception which is used in case that no secret is found from Vault server.\npublic interface VaultKeyValueMetadataOperations; // Interface that specifies kv metadata related operations.\npublic interface VaultKeyValueOperations extends VaultKeyValueOperationsSupport; // Interface that specifies a basic set of Vault operations using Vault's Key/Value secret backend.\npublic interface VaultKeyValueOperationsSupport; // Interface that specifies a basic set of Vault operations using Vault's Key/Value secret backend.\npublic static enum VaultKeyValueOperationsSupport.KeyValueBackend extends Enum<VaultKeyValueOperationsSupport.KeyValueBackend>; // Enumeration of supported Key/Value backend API versions.\npublic interface VaultOperations; // Interface that specifies a basic set of Vault operations, implemented by VaultTemplate.\npublic interface VaultPkiOperations; // Interface that specifies PKI backend-related operations.\npublic static enum VaultPkiOperations.Encoding extends Enum<VaultPkiOperations.Encoding>;\npublic class VaultPkiTemplate extends Object implements VaultPkiOperations; // Default implementation of VaultPkiOperations.\npublic interface VaultSysOperations; // Interface that specifies a basic set of administrative Vault operations.\npublic class VaultSysTemplate extends Object implements VaultSysOperations; // Default implementation of VaultSysOperations.\npublic class VaultTemplate extends Object implements InitializingBean, VaultOperations, DisposableBean; // This class encapsulates main Vault interaction.\npublic interface VaultTokenOperations; // Interface that specifies token-related operations.\npublic class VaultTokenTemplate extends Object implements VaultTokenOperations; // Default implementation of VaultTokenOperations.\npublic interface VaultTransformOperations; // Interface that specifies operations using the transform backend.\npublic class VaultTransformTemplate extends Object implements VaultTransformOperations; // Default implementation of VaultTransformOperations.\n", "des": "Vault core support."}
{"index": 2262, "repo": "spring-vault-core-3.0.4", "code": "package env;\n\npublic class LeaseAwareVaultPropertySource extends EnumerablePropertySource<VaultOperations>; // PropertySource that requests renewable secrets from SecretLeaseContainer.\npublic class VaultPropertySource extends EnumerablePropertySource<VaultOperations>; // PropertySource that reads keys and values from a VaultTemplate and path.\npublic class VaultPropertySourceNotFoundException extends VaultException; // Exception throws when a VaultPropertySource could not load its properties.\n", "des": "Spring Vault's environment abstraction consisting property source support."}
{"index": 2263, "repo": "spring-vault-core-3.0.4", "code": "package lease;\n\npackage lease.domain; // Lease domain classes.\npackage lease.event; // Support classes for lease application events.\npublic enum LeaseEndpoints extends Enum<LeaseEndpoints>; // Version-specific endpoint implementations that use either legacy or sys/leases endpoints.\npublic class SecretLeaseContainer extends SecretLeaseEventPublisher implements InitializingBean, DisposableBean; // Event-based container to request secrets from Vault and renew the associated Lease.\npublic class SecretLeaseEventPublisher extends Object implements InitializingBean; // Publisher for SecretLeaseEvents.\npublic static enum SecretLeaseEventPublisher.LoggingErrorListener extends Enum<SecretLeaseEventPublisher.LoggingErrorListener> implements LeaseErrorListener; // Simple LeaseErrorListener implementation to log errors.\n", "des": "The core package implementing lease renewal and secret rotation."}
{"index": 2264, "repo": "spring-vault-core-3.0.4", "code": "package domain;\n\npublic class Lease extends Object; // A lease abstracting the lease Id, duration and its renewability.\npublic class RequestedSecret extends Object; // Represents a requested secret from a specific Vault path associated with a lease RequestedSecret.Mode.\npublic static enum RequestedSecret.Mode extends Enum<RequestedSecret.Mode>;\n", "des": "Lease domain classes."}
{"index": 2265, "repo": "spring-vault-core-3.0.4", "code": "package event;\n\npublic class AfterSecretLeaseRenewedEvent extends SecretLeaseEvent; // Event published after renewing a Lease for a RequestedSecret.\npublic class AfterSecretLeaseRevocationEvent extends SecretLeaseEvent; // Event published after revoking a Lease for a RequestedSecret.\npublic class BeforeSecretLeaseRevocationEvent extends SecretLeaseEvent; // Event published before revoking a Lease for a RequestedSecret.\n@FunctionalInterface public interface LeaseErrorListener; // Listener for Vault exceptional SecretLeaseEvents.\n@FunctionalInterface public interface LeaseListener; // Listener for Vault SecretLeaseEvents.\npublic abstract class LeaseListenerAdapter extends Object implements LeaseListener, LeaseErrorListener; // Empty listener adapter implementing LeaseListener and LeaseErrorListener.\npublic class SecretLeaseCreatedEvent extends SecretLeaseEvent; // Event published after obtaining secrets potentially associated with a Lease.\npublic class SecretLeaseErrorEvent extends SecretLeaseEvent; // Event published when caught an Exception during secret retrieval and lease interaction.\npublic abstract class SecretLeaseEvent extends ApplicationEvent; // Abstract base class for Lease based events associated with RequestedSecret.\npublic class SecretLeaseExpiredEvent extends SecretLeaseEvent; // Event published after an expired Lease for a RequestedSecret was observed.\npublic class SecretLeaseRotatedEvent extends SecretLeaseCreatedEvent; // Event published after rotating secrets.\npublic class SecretNotFoundEvent extends SecretLeaseEvent; // Event published after secrets could not be found for a RequestedSecret.\n", "des": "Support classes for lease application events."}
{"index": 2266, "repo": "spring-vault-core-3.0.4", "code": "package util;\n\npublic class KeyValueDelegate extends Object; // Key-Value utility to retrieve secrets from a versioned key-value backend.\npublic static class KeyValueDelegate.MountInfo extends Object;\n@FunctionalInterface public interface PropertyTransformer; // Strategy interface to transform properties to a new key-value Map in a functional style.\npublic abstract class PropertyTransformers extends Object; // Implementations of PropertyTransformer that provide various useful property transformation operations, prefixing, etc.\npublic static class PropertyTransformers.KeyPrefixPropertyTransformer extends Object implements PropertyTransformer; // PropertyTransformer that adds a prefix to each key name.\npublic static class PropertyTransformers.NoOpPropertyTransformer extends Object implements PropertyTransformer; // PropertyTransformer that passes the given properties through without returning changed properties.\n", "des": "Property transformer classes for Spring Vault core support."}
{"index": 2267, "repo": "spring-vault-core-3.0.4", "code": "package configuration;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(VaultRepositoriesRegistrar.class) @QueryCreatorType(value=VaultQueryCreator.class, repositoryQueryType=VaultPartTreeQuery.class) public @interface EnableVaultRepositories; // Annotation to activate Vault repositories.\npublic class VaultRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport; // Vault specific ImportBeanDefinitionRegistrar.\npublic class VaultRepositoryConfigurationExtension extends KeyValueRepositoryConfigurationExtension; // RepositoryConfigurationExtension for Vault.\n", "des": "Support infrastructure for the configuration of Vault specific repositories."}
{"index": 2268, "repo": "spring-vault-core-3.0.4", "code": "package convert;\n\npublic abstract class AbstractVaultConverter extends Object implements VaultConverter, InitializingBean; // Base class for VaultConverter implementations.\npublic class DefaultVaultTypeMapper extends DefaultTypeMapper<Map<String,Object>> implements VaultTypeMapper; // Default implementation of VaultTypeMapper allowing configuration of the key to lookup and store type information in SecretDocument.\npublic class MappingVaultConverter extends AbstractVaultConverter; // VaultConverter that uses a MappingContext to do sophisticated mapping of domain objects to SecretDocument.\npublic class SecretDocument extends Object; // Vault database exchange object containing data before/after it's exchanged with Vault.\npublic interface VaultConverter extends EntityConverter<VaultPersistentEntity<?>,VaultPersistentProperty,Object,SecretDocument>; // Central Vault-specific converter interface.\npublic class VaultCustomConversions extends CustomConversions; // Value object to capture custom conversion.\npublic interface VaultTypeMapper extends TypeMapper<Map<String,Object>>; // Vault-specific TypeMapper exposing that SecretDocuments might contain a type key.\n", "des": "Spring Vault specific converter infrastructure."}
{"index": 2269, "repo": "spring-vault-core-3.0.4", "code": "package core;\n\npublic class MappingVaultEntityInformation<T,ID> extends PersistentEntityInformation<T,ID> implements VaultEntityInformation<T,ID>; // VaultEntityInformation implementation using a VaultPersistentEntity instance to lookup the necessary information.\npublic interface VaultEntityInformation<T,ID> extends EntityInformation<T,ID>; // Vault-specific EntityInformation.\npublic class VaultKeyValueAdapter extends AbstractKeyValueAdapter; // Vault-specific KeyValueAdapter.\npublic class VaultKeyValueTemplate extends KeyValueTemplate; // Vault-specific KeyValueTemplate.\n", "des": "Spring Vault core repository implementation."}
{"index": 2270, "repo": "spring-vault-core-3.0.4", "code": "package mapping;\n\npublic class BasicVaultPersistentEntity<T> extends BasicKeyValuePersistentEntity<T,VaultPersistentProperty> implements VaultPersistentEntity<T>; // VaultPersistentEntity implementation.\n@Documented @Inherited @Retention(RUNTIME) @Target(TYPE) @KeySpace public @interface Secret; // Secret marks objects as aggregate roots to be stored in Vault.\npublic class VaultMappingContext extends KeyValueMappingContext<VaultPersistentEntity<?>,VaultPersistentProperty>; // Mapping context for Vault-specific entities.\npublic interface VaultPersistentEntity<T> extends KeyValuePersistentEntity<T,VaultPersistentProperty>; // Vault specific PersistentEntity.\npublic class VaultPersistentProperty extends KeyValuePersistentProperty<VaultPersistentProperty>; // Vault-specific KeyValuePersistentProperty.\npublic abstract class VaultSimpleTypes extends Object; // Simple constant holder for a SimpleTypeHolder enriched with Vault-specific simple (JSON) types.\n", "des": "Infrastructure for the Vault JSON-to-object mapping subsystem."}
{"index": 2271, "repo": "spring-vault-core-3.0.4", "code": "package query;\n\npublic class VaultPartTreeQuery extends KeyValuePartTreeQuery; // Vault-specific KeyValuePartTreeQuery.\npublic class VaultQuery extends Object; // Vault query consisting of a single Predicate.\npublic class VaultQueryCreator extends AbstractQueryCreator<KeyValueQuery<VaultQuery>,VaultQuery>; // Query creator for Vault queries.\n", "des": "Query derivation mechanism for Vault specific repositories."}
{"index": 2272, "repo": "spring-vault-core-3.0.4", "code": "package support;\n\npublic class VaultRepositoryFactory extends KeyValueRepositoryFactory; // RepositoryFactorySupport specific of handing Vault KeyValueRepository.\npublic class VaultRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends KeyValueRepositoryFactoryBean<T,S,ID>; // Adapter for Springs FactoryBean interface to allow easy setup of VaultRepositoryFactory via Spring configuration.\npublic class VaultRevisionMetadata extends Object implements RevisionMetadata<Integer>;\npublic class VaultRevisionRepository<T> extends Object implements RevisionRepository<T,String,Integer>; // Vault-based RevisionRepository providing revision metadata for versioned secrets.\n", "des": "Support infrastructure for query derivation of Vault specific repositories."}
{"index": 2273, "repo": "spring-vault-core-3.0.4", "code": "package security;\n\npublic class VaultBytesEncryptor extends Object implements BytesEncryptor; // Vault-based BytesEncryptor using Vault's transit backend.\npublic class VaultBytesKeyGenerator extends Object implements BytesKeyGenerator; // Random byte generator using Vault's transit backend to generate high-quality random bytes of the configured length.\n", "des": "Integration with Spring Security."}
{"index": 2274, "repo": "spring-vault-core-3.0.4", "code": "package support;\n\npublic abstract class AbstractResult<V> extends Object; // Supporting class for computation results allowing introspection of the result value.\npublic class Certificate extends Object; // Value object representing a certificate consisting of the certificate and the issuer certificate.\npublic class CertificateBundle extends Certificate; // Value object representing a certificate bundle consisting of a private key, the certificate and the issuer certificate.\npublic class Ciphertext extends Object; // Value object representing cipher text with an optional VaultTransitContext.\npublic class ClientOptions extends Object; // Client options for Vault.\npublic class DurationParser extends Object; // Utility to parse a Go format duration into Duration.\npublic class Hmac extends Object; // Value object representing Hmac digest.\npublic abstract class JsonMapFlattener extends Object; // Flattens a hierarchical Map of objects into a property Map.\n@FunctionalInterface public interface LeaseStrategy; // Strategy interface to control whether to retain or drop a Lease after a failure.\npublic class PemObject extends Object; // Represents a PEM object that is internally decoded to a DER object.\npublic class Plaintext extends Object; // Value object representing plain text with an optional VaultTransitContext.\npublic class Policy extends Object; // Value object representing a Vault policy associated with Policy.Rules.\npublic static enum Policy.BuiltinCapabilities extends Enum<Policy.BuiltinCapabilities> implements Policy.Capability; // Built-in Vault capabilities.\npublic static interface Policy.Capability; // Capability interface representing capability literals.\npublic static class Policy.Rule extends Object; // Value object representing a rule for a certain path.\npublic static class Policy.Rule.RuleBuilder extends Object; // Builder for a Policy.Rule.\npublic interface RawTransitKey; // A exported raw key inside Vault's transit backend.\npublic class Signature extends Object; // Value object representing a Signature.\npublic class SignatureValidation extends Object; // Value object representing the result of a Signature validation.\npublic class SslConfiguration extends Object; // SSL configuration.\npublic static class SslConfiguration.KeyConfiguration extends Object; // Configuration for a key in a keystore.\npublic static class SslConfiguration.KeyStoreConfiguration extends Object; // Configuration for a key store/trust store.\npublic class TransformCiphertext extends Object; // Value object representing cipher text with an optional VaultTransformContext.\npublic class TransformPlaintext extends Object; // Value object representing plain text with an optional VaultTransformContext.\n", "des": "Classes supporting the Vault packages, such as value objects."}
{"index": 2275, "repo": "spring-data-elasticsearch-5.1.2", "code": "package elc;\n\npublic class Aggregation extends Object; // Class to combine an Elasticsearch Aggregate with its name.\npublic class AutoCloseableElasticsearchClient extends co.elastic.clients.elasticsearch.ElasticsearchClient implements AutoCloseable; // Extension of the ElasticsearchClient class that implements AutoCloseable.\npublic abstract class ChildTemplate<T extends co.elastic.clients.transport.Transport,CLIENT extends co.elastic.clients.ApiClient<T,CLIENT>> extends Object; // base class for a template that uses one of the ElasticsearchClient's child clients like ElasticsearchClusterClient or ElasticsearchIndicesClient.\n@FunctionalInterface public static interface ChildTemplate.ClientCallback<CLIENT,RESULT>; // Callback interface to be used with ChildTemplate.execute(ClientCallback) for operating directly on the client.\npublic class ClusterTemplate extends ChildTemplate<co.elastic.clients.transport.ElasticsearchTransport,co.elastic.clients.elasticsearch.cluster.ElasticsearchClusterClient> implements ClusterOperations; // Implementation of the ClusterOperations interface using en ElasticsearchClusterClient.\npublic class CriteriaQueryException extends UncategorizedDataAccessException;\npublic class ElasticsearchAggregation extends Object implements AggregationContainer<Aggregation>; // AggregationContainer for a Aggregation that holds Elasticsearch data.\npublic class ElasticsearchAggregations extends Object implements AggregationsContainer<List<ElasticsearchAggregation>>; // AggregationsContainer implementation for the Elasticsearch aggregations.\npublic class ElasticsearchClientBeanDefinitionParser extends AbstractBeanDefinitionParser;\npublic class ElasticsearchClientFactoryBean extends Object implements FactoryBean<co.elastic.clients.elasticsearch.ElasticsearchClient>, InitializingBean, DisposableBean; // ElasticsearchClientFactoryBean\npublic final class ElasticsearchClients extends Object; // Utility class to create the different Elasticsearch clients\npublic static interface ElasticsearchClients.ElasticsearchHttpClientConfigurationCallback extends ClientConfiguration.ClientConfigurationCallback<org.apache.http.impl.nio.client.HttpAsyncClientBuilder>; // ClientConfiguration.ClientConfigurationCallback to configure the Elasticsearch RestClient's Http client with a HttpAsyncClientBuilder\npublic static interface ElasticsearchClients.ElasticsearchRestClientConfigurationCallback extends ClientConfiguration.ClientConfigurationCallback<org.elasticsearch.client.RestClientBuilder>; // ClientConfiguration.ClientConfigurationCallback to configure the RestClient client with a RestClientBuilder\npublic abstract class ElasticsearchConfiguration extends ElasticsearchConfigurationSupport; // Base class for a @Configuration class to set up the Elasticsearch connection using the Elasticsearch Client.\n", "des": "This package contains classes that use the new Elasticsearch client library (co.elastic.clients:elasticsearch-java) to access Elasticsearch."}
{"index": 2276, "repo": "spring-data-elasticsearch-5.1.2", "code": "package erhlc;\n\n@Deprecated public abstract class AbstractElasticsearchConfiguration extends ElasticsearchConfigurationSupport;\n@Deprecated public abstract class AbstractReactiveElasticsearchConfiguration extends ElasticsearchConfigurationSupport;\n@Deprecated public class DefaultReactiveClusterOperations extends Object implements ReactiveClusterOperations;\n@Deprecated public class DefaultReactiveElasticsearchClient extends Object implements ReactiveElasticsearchClient, ReactiveElasticsearchClient.Indices, ReactiveElasticsearchClient.Cluster;\n@Deprecated public final class DocumentAdapters extends Object;\n@Deprecated public class ElasticsearchAggregation extends Object implements AggregationContainer<org.elasticsearch.search.aggregations.Aggregation>;\n@Deprecated public class ElasticsearchAggregations extends Object implements AggregationsContainer<org.elasticsearch.search.aggregations.Aggregations>;\n@Deprecated public class ElasticsearchClusterOperations extends Object;\n@Deprecated public class ElasticsearchExceptionTranslator extends Object implements PersistenceExceptionTranslator;\n@Deprecated public class ElasticsearchRestTemplate extends AbstractElasticsearchTemplate;\n@FunctionalInterface public static interface ElasticsearchRestTemplate.ClientCallback<T>; // Callback interface to be used with ElasticsearchRestTemplate.execute(ClientCallback) for operating directly on RestHighLevelClient.\n@Deprecated public class HighlightQueryBuilder extends Object;\n@Deprecated public interface HostProvider<T extends HostProvider<T>>;\npublic static class HostProvider.ClusterInformation extends Object; // Value object accumulating information about an Elasticsearch cluster.\npublic static enum HostProvider.Verification extends Enum<HostProvider.Verification>; // HostProvider.Verification allows to influence the lookup strategy for active hosts.\n@Deprecated public class NamedXContents extends Object;\n@Deprecated public class NativeSearchQuery extends BaseQuery;\n@Deprecated public class NativeSearchQueryBuilder extends BaseQueryBuilder<NativeSearchQuery,NativeSearchQueryBuilder>;\n@Deprecated public interface ReactiveElasticsearchClient;\npublic static interface ReactiveElasticsearchClient.Cluster; // Encapsulation of methods for accessing the Cluster API.\npublic static interface ReactiveElasticsearchClient.Indices; // Encapsulation of methods for accessing the Indices API.\npublic static interface ReactiveElasticsearchClient.ReactiveElasticsearchClientCallback<T>; // Low level callback interface operating upon WebClient to send commands towards elasticsearch.\npublic static interface ReactiveElasticsearchClient.Status; // Cumulative client ElasticsearchHost information.\n@Deprecated public class ReactiveElasticsearchTemplate extends AbstractReactiveElasticsearchTemplate;\n@Deprecated public final class ReactiveRestClients extends Object;\n", "des": "This package contains classes that use the old Elasticsearch 7 libraries to access Elasticsearch either directly by using the RestHighLevelClient or indirectly by using code copied from Elasticsearch libraries (reactive implementation)."}
{"index": 2277, "repo": "spring-data-elasticsearch-5.1.2", "code": "package cluster;\n\npublic class ClusterHealth extends Object; // Information about the cluster health.\npublic static final class ClusterHealth.ClusterHealthBuilder extends Object;\npublic interface ClusterOperations; // Elasticsearch operations on cluster level.\npublic interface ReactiveClusterOperations; // Reactive Elasticsearch operations on cluster level.\n", "des": "Interfaces and classes related to Elasticsearch cluster information and management."}
{"index": 2278, "repo": "spring-data-elasticsearch-5.1.2", "code": "package document;\n\npublic interface Document extends StringObjectMap<Document>; // A representation of a Elasticsearch document as extended Map.\npublic class Explanation extends Object; // class that holds explanations returned from an Elasticsearch search.\npublic class NestedMetaData extends Object; // meta data returned for nested inner hits.\npublic interface SearchDocument extends Document; // Extension to Document exposing search response related data.\npublic class SearchDocumentAdapter extends Object implements SearchDocument; // SearchDocument implementation using a Document delegate.\npublic class SearchDocumentResponse extends Object; // This represents the complete search response from Elasticsearch, including the returned documents.\n@FunctionalInterface public static interface SearchDocumentResponse.EntityCreator<T> extends Function<SearchDocument,CompletableFuture<T>>; // A function to convert a SearchDocument async into an entity.\n", "des": "Classes related to the Document structure of Elasticsearch documents and search responses."}
{"index": 2279, "repo": "spring-data-elasticsearch-5.1.2", "code": "package event;\n\n@FunctionalInterface public interface AfterConvertCallback<T> extends EntityCallback<T>; // Callback being invoked after a domain object is materialized from a Document when reading results.\n@FunctionalInterface public interface AfterLoadCallback<T> extends EntityCallback<Document>; // Callback being invoked after a Document is read from Elasticsearch and before it is converted into a domain object.\n@FunctionalInterface public interface AfterSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered after save of an entity.\npublic class AuditingEntityCallback extends Object implements BeforeConvertCallback<Object>, Ordered; // EntityCallback to populate auditing related fields on an entity about to be saved.\n@FunctionalInterface public interface BeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\n@FunctionalInterface public interface ReactiveAfterConvertCallback<T> extends EntityCallback<T>; // Callback being invoked after a domain object is materialized from a Document when reading results.\n@FunctionalInterface public interface ReactiveAfterLoadCallback<T> extends EntityCallback<Document>; // Callback being invoked after a Document is read from Elasticsearch and before it is converted into a domain object.\n@FunctionalInterface public interface ReactiveAfterSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered after save of an entity.\npublic class ReactiveAuditingEntityCallback extends Object implements ReactiveBeforeConvertCallback<Object>, Ordered; // EntityCallback to populate auditing related fields on an entity about to be saved.\n@FunctionalInterface public interface ReactiveBeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\n", "des": "classes and interfaces related to Spring Data Elasticsearch events and callbacks."}
{"index": 2280, "repo": "spring-data-elasticsearch-5.1.2", "code": "package index;\n\npublic abstract class AliasAction extends Object; // A single action to be contained in AliasActions.\npublic static class AliasAction.Add extends AliasAction; // AliasAction to add an alias.\npublic static class AliasAction.Remove extends AliasAction; // AliasAction to remove an alias.\npublic static class AliasAction.RemoveIndex extends AliasAction; // AliasAction to remove an index.\npublic class AliasActionParameters extends Object; // Value class capturing the arguments for an AliasAction.\npublic static final class AliasActionParameters.Builder extends Object;\npublic class AliasActions extends Object; // Class to define to actions to execute in alias management functions.\npublic class AliasData extends Object; // value object to describe alias information.\npublic record ComponentTemplateRequestData(Settings settings, Document mapping, AliasActions aliasActions, Boolean allowAutoCreate) extends Record; // A component template to be used in a component template request.\npublic static final class ComponentTemplateRequestData.Builder extends Object;\npublic record DeleteComponentTemplateRequest(String templateName) extends Record;\npublic record DeleteIndexTemplateRequest(String templateName) extends Record;\npublic class DeleteTemplateRequest extends Object;\npublic record ExistsComponentTemplateRequest(String templateName) extends Record;\npublic record ExistsIndexTemplateRequest(String templateName) extends Record;\npublic class ExistsTemplateRequest extends Object;\npublic record GetComponentTemplateRequest(String templateName) extends Record;\npublic record GetIndexTemplateRequest(String templateName) extends Record;\npublic class GetTemplateRequest extends Object;\npublic class MappingBuilder extends Object;\npublic final class MappingParameters extends Object; // A class to hold the mapping parameters that might be set on Field or InnerField annotation.\npublic record PutComponentTemplateRequest(String name, Long version, Boolean create, Duration masterTimeout, ComponentTemplateRequestData template) extends Record;\npublic static final class PutComponentTemplateRequest.Builder extends Object;\npublic record PutIndexTemplateRequest(String name, String[] indexPatterns, Settings settings, Document mapping, AliasActions aliasActions, List<String> composedOf) extends Record;\npublic static class PutIndexTemplateRequest.Builder extends Object;\npublic class PutTemplateRequest extends Object; // Request to create an index template.\npublic static final class PutTemplateRequest.TemplateRequestBuilder extends Object;\npublic class ReactiveMappingBuilder extends MappingBuilder; // Subclass of MappingBuilder with specialized methods To inhibit blocking calls\n", "des": "Classes related to Elasticsearch index management."}
{"index": 2281, "repo": "spring-data-elasticsearch-5.1.2", "code": "package highlight;\n\npublic class Highlight extends Object;\npublic abstract class HighlightCommonParameters extends Object;\npublic abstract static class HighlightCommonParameters.HighlightCommonParametersBuilder<SELF extends HighlightCommonParameters.HighlightCommonParametersBuilder<SELF>> extends Object;\npublic class HighlightField extends Object;\npublic class HighlightFieldParameters extends HighlightCommonParameters;\npublic static final class HighlightFieldParameters.HighlightFieldParametersBuilder extends HighlightCommonParameters.HighlightCommonParametersBuilder<HighlightFieldParameters.HighlightFieldParametersBuilder>;\npublic class HighlightParameters extends HighlightCommonParameters;\npublic static final class HighlightParameters.HighlightParametersBuilder extends HighlightCommonParameters.HighlightCommonParametersBuilder<HighlightParameters.HighlightParametersBuilder>;\n", "des": "classes to define highlight settings parameters of a query"}
{"index": 2282, "repo": "spring-data-elasticsearch-5.1.2", "code": "package routing;\n\npublic class DefaultRoutingResolver extends Object implements RoutingResolver; // Default implementation of the RoutingResolver interface.\npublic interface RoutingResolver;\n", "des": "classes/interfaces for specification and implementation of Elasticsearch routing."}
{"index": 2283, "repo": "spring-data-elasticsearch-5.1.2", "code": "package script;\n\npublic interface ReactiveScriptOperations; // This interfaces defines the operations to access the Elasticsearch script API.\npublic record Script(String id, String language, String source) extends Record;\npublic static final class Script.ScriptBuilder extends Object;\npublic interface ScriptOperations; // This interfaces defines the operations to access the Elasticsearch script API.\n", "des": "Classes and interfaces to access to script API of Elasticsearch (https://www.elastic.co/guide/en/elasticsearch/reference/8.5/script-apis.html)."}
{"index": 2284, "repo": "spring-data-elasticsearch-5.1.2", "code": "package repository;\n\n@NoRepositoryBean public interface ElasticsearchRepository<T,ID> extends PagingAndSortingRepository<T,ID>, CrudRepository<T,ID>;\n@NoRepositoryBean public interface ReactiveElasticsearchRepository<T,ID> extends ReactiveSortingRepository<T,ID>, ReactiveCrudRepository<T,ID>; // Elasticsearch specific Repository interface with reactive support.\n", "des": "infrastructure to define the Elasticsearch mapping for an index."}
{"index": 2285, "repo": "jcl-over-slf4j-2.0.7", "code": "package logging;\n\npackage logging.impl; // SLF4J based implementation of commons-logging wrapper APIs.\npublic interface Log; // A simple logging interface abstracting logging APIs.\npublic class LogConfigurationException extends RuntimeException; // An exception that is thrown only if a suitable LogFactory or Log instance cannot be created by the corresponding factory methods.\npublic abstract class LogFactory extends Object; // Factory for creating Log instances, which always delegates to an instance of SLF4JLogFactory.\n", "des": "Jakarta Commons Logging implemented over SLF4J."}
{"index": 2286, "repo": "jcl-over-slf4j-2.0.7", "code": "package impl;\n\npublic class NoOpLog extends Object implements Log, Serializable; // Trivial implementation of Log that throws away all messages.\npublic class SimpleLog extends Object implements Log, Serializable; // Simple implementation of Log that sends all enabled log messages, for all defined loggers, to System.err.\npublic class SLF4JLocationAwareLog extends Object implements Log, Serializable; // Implementation of org.apache.commons.logging.Log interface which delegates all processing to a wrapped org.slf4j.Logger instance.\npublic class SLF4JLog extends Object implements Log, Serializable; // Implementation of org.apache.commons.logging.Log interface which delegates all processing to a wrapped org.slf4j.Logger instance.\npublic class SLF4JLogFactory extends LogFactory; // Concrete subclass of LogFactory which always delegates to the org.slf4j.LoggerFactory class.\n", "des": "SLF4J based implementation of commons-logging wrapper APIs."}
{"index": 2287, "repo": "spring-boot-3.1.1", "code": "package boot;\n\npackage boot.admin; // Administration support for Spring Boot applications.\npackage boot.ansi; // Support classes to provide ANSI color output.\npackage boot.availability; // Support for describing the availability of Spring Boot applications.\npackage boot.builder; // Fluent 'builder' style API to construct a SpringApplication.\npackage boot.cloud; // Low level support for Cloud deployments.\npackage boot.context; // Classes related to Spring's ApplicationContext.\npackage boot.convert; // Support for type conversion.\npackage boot.diagnostics; // Support for failure analysis and reporting.\npackage boot.env; // Spring Environment support.\npackage boot.info; // Support for providing information about an application.\npackage boot.jackson; // Custom enhancements and support for the Jackson project.\npackage boot.jdbc; // Support for Java Database Connectivity (JDBC).\npackage boot.jms; // Support for Java Message Service (JMS).\npackage boot.json; // Support for parsing JSON.\npackage boot.logging; // Support and abstractions across several logging libraries.\npackage boot.origin; // Support for item origin tracking.\npackage boot.r2dbc; // Support for R2DBC connectivity.\npackage boot.reactor; // Support classes for Reactor integration.\npackage boot.ssl; // Management of trust material that can be used to establish an SSL connection.\npackage boot.system; // General system support classes.\npackage boot.task; // Utilities and classes related to task execution and scheduling.\npackage boot.util; // Contains miscellaneous utility classes.\npackage boot.validation; // Utilities and classes related to validation.\npublic interface ApplicationArguments; // Provides access to the arguments that were used to run a SpringApplication.\n@FunctionalInterface public interface ApplicationContextFactory; // Strategy interface for creating the ConfigurableApplicationContext used by a SpringApplication.\n@FunctionalInterface public interface ApplicationRunner; // Interface used to indicate that a bean should run when it is contained within a SpringApplication.\n@FunctionalInterface public interface Banner; // Interface class for writing a banner programmatically.\npublic static enum Banner.Mode extends Enum<Banner.Mode>; // An enumeration of possible values for configuring the Banner.\n", "des": "Core Spring Boot classes."}
{"index": 2288, "repo": "spring-boot-3.1.1", "code": "package admin;\n\npublic interface SpringApplicationAdminMXBean; // An MBean contract to control and monitor a running SpringApplication over JMX.\npublic class SpringApplicationAdminMXBeanRegistrar extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.context.event.GenericApplicationListener, org.springframework.context.EnvironmentAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Register a SpringApplicationAdminMXBean implementation to the platform MBeanServer.\n", "des": "Administration support for Spring Boot applications."}
{"index": 2289, "repo": "spring-boot-3.1.1", "code": "package ansi;\n\npublic final class Ansi8BitColor extends Object implements AnsiElement; // AnsiElement implementation for ANSI 8-bit foreground or background color codes.\npublic enum AnsiBackground extends Enum<AnsiBackground> implements AnsiElement; // Ansi background colors.\npublic enum AnsiColor extends Enum<AnsiColor> implements AnsiElement; // Ansi colors.\npublic interface AnsiElement; // An ANSI encodable element.\npublic abstract class AnsiOutput extends Object; // Generates ANSI encoded output, automatically attempting to detect if the terminal supports ANSI.\npublic static enum AnsiOutput.Enabled extends Enum<AnsiOutput.Enabled>; // Possible values to pass to AnsiOutput.setEnabled(org.springframework.boot.ansi.AnsiOutput.Enabled).\npublic class AnsiPropertySource extends org.springframework.core.env.PropertySource<AnsiElement>; // PropertyResolver for AnsiStyle, AnsiColor, AnsiBackground and Ansi8BitColor elements.\npublic enum AnsiStyle extends Enum<AnsiStyle> implements AnsiElement; // Ansi styles.\n", "des": "Support classes to provide ANSI color output."}
{"index": 2290, "repo": "spring-boot-3.1.1", "code": "package availability;\n\npublic interface ApplicationAvailability; // Provides availability state information for the application.\npublic class ApplicationAvailabilityBean extends Object implements ApplicationAvailability, org.springframework.context.ApplicationListener<AvailabilityChangeEvent<?>>; // Bean that provides an ApplicationAvailability implementation by listening for change events.\npublic class AvailabilityChangeEvent<S extends AvailabilityState> extends org.springframework.context.PayloadApplicationEvent<S>; // ApplicationEvent sent when the AvailabilityState of the application changes.\npublic interface AvailabilityState; // Tagging interface used on ApplicationAvailability states.\npublic enum LivenessState extends Enum<LivenessState> implements AvailabilityState; // \"Liveness\" state of the application.\npublic enum ReadinessState extends Enum<ReadinessState> implements AvailabilityState; // \"Readiness\" state of the application.\n", "des": "Support for describing the availability of Spring Boot applications."}
{"index": 2291, "repo": "spring-boot-3.1.1", "code": "package builder;\n\npublic class ParentContextApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>, org.springframework.core.Ordered; // ApplicationContextInitializer for setting the parent context.\npublic static class ParentContextApplicationContextInitializer.ParentContextAvailableEvent extends org.springframework.context.ApplicationEvent; // ApplicationEvent fired when a parent context is available.\npublic class ParentContextCloserApplicationListener extends Object implements org.springframework.context.ApplicationListener<ParentContextApplicationContextInitializer.ParentContextAvailableEvent>, org.springframework.context.ApplicationContextAware, org.springframework.core.Ordered; // Listener that closes the application context if its parent is closed.\nprotected static class ParentContextCloserApplicationListener.ContextCloserListener extends Object implements org.springframework.context.ApplicationListener<org.springframework.context.event.ContextClosedEvent>; // ApplicationListener to close the context.\npublic class SpringApplicationBuilder extends Object; // Builder for SpringApplication and ApplicationContext instances with convenient fluent API and context hierarchy support.\n", "des": "Fluent 'builder' style API to construct a SpringApplication."}
{"index": 2292, "repo": "spring-boot-3.1.1", "code": "package cloud;\n\npublic class CloudFoundryVcapEnvironmentPostProcessor extends Object implements EnvironmentPostProcessor, org.springframework.core.Ordered; // An EnvironmentPostProcessor that knows where to find VCAP (a.k.a.\npublic enum CloudPlatform extends Enum<CloudPlatform>; // Simple detection for well known cloud platforms.\n", "des": "Low level support for Cloud deployments."}
{"index": 2293, "repo": "spring-boot-3.1.1", "code": "package context;\n\npackage context.annotation; // Classes related to Spring's ApplicationContext annotations.\npackage context.config; // External configuration support allowing 'application.properties' to be loaded and used within a Spring Boot application.\npackage context.event; // ApplicationEvents triggered by Spring Boot.\npackage context.logging; // Logging integration with Spring's Application Context.\npackage context.properties; // Support for external configuration properties.\npublic class ApplicationPidFileWriter extends Object implements org.springframework.context.ApplicationListener<SpringApplicationEvent>, org.springframework.core.Ordered; // An ApplicationListener that saves application PID into file.\npublic class ConfigurationWarningsApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>; // ApplicationContextInitializer to report warnings for common misconfiguration mistakes.\n@FunctionalInterface protected static interface ConfigurationWarningsApplicationContextInitializer.Check; // A single check that can be applied.\nprotected static class ConfigurationWarningsApplicationContextInitializer.ComponentScanPackageCheck extends Object implements ConfigurationWarningsApplicationContextInitializer.Check; // ConfigurationWarningsApplicationContextInitializer.Check for @ComponentScan on problematic package.\nprotected static final class ConfigurationWarningsApplicationContextInitializer.ConfigurationWarningsPostProcessor extends Object implements org.springframework.core.PriorityOrdered, org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor; // BeanDefinitionRegistryPostProcessor to report warnings.\npublic class ContextIdApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>, org.springframework.core.Ordered; // ApplicationContextInitializer that sets the Spring ApplicationContext ID.\npublic class FileEncodingApplicationListener extends Object implements org.springframework.context.ApplicationListener<ApplicationEnvironmentPreparedEvent>, org.springframework.core.Ordered; // An ApplicationListener that halts application startup if the system file encoding does not match an expected value set in the environment.\npublic class TypeExcludeFilter extends Object implements org.springframework.core.type.filter.TypeFilter, org.springframework.beans.factory.BeanFactoryAware; // Provides exclusion TypeFilters that are loaded from the BeanFactory and automatically applied to SpringBootApplication scanning.\n", "des": "Classes related to Spring's ApplicationContext."}
{"index": 2294, "repo": "spring-boot-3.1.1", "code": "package annotation;\n\npublic abstract class Configurations extends Object; // A set of @Configuration classes that can be registered in ApplicationContext.\n@FunctionalInterface public interface DeterminableImports; // Interface that can be implemented by ImportSelector and ImportBeanDefinitionRegistrar implementations when they can determine imports early.\npublic final class ImportCandidates extends Object implements Iterable<String>; // Contains @Configuration import candidates, usually auto-configurations.\npublic class UserConfigurations extends Configurations implements org.springframework.core.PriorityOrdered; // Configurations representing user-defined @Configuration classes (i.e.\n", "des": "Classes related to Spring's ApplicationContext annotations."}
{"index": 2295, "repo": "spring-boot-3.1.1", "code": "package config;\n\npublic class AnsiOutputApplicationListener extends Object implements org.springframework.context.ApplicationListener<ApplicationEnvironmentPreparedEvent>, org.springframework.core.Ordered; // An ApplicationListener that configures AnsiOutput depending on the value of the property spring.output.ansi.enabled.\npublic final class ConfigData extends Object; // Configuration data that has been loaded from a ConfigDataResource and may ultimately contribute property sources to Spring's Environment.\npublic static enum ConfigData.Option extends Enum<ConfigData.Option>; // Option flags that can be applied.\npublic static final class ConfigData.Options extends Object; // A set of ConfigData.Option flags.\n@FunctionalInterface public static interface ConfigData.PropertySourceOptions; // Strategy interface used to supply ConfigData.Options for a given PropertySource.\npublic class ConfigDataEnvironmentPostProcessor extends Object implements EnvironmentPostProcessor, org.springframework.core.Ordered; // EnvironmentPostProcessor that loads and applies ConfigData to Spring's Environment.\npublic interface ConfigDataEnvironmentUpdateListener extends EventListener; // EventListener to listen to Environment updates triggered by the ConfigDataEnvironmentPostProcessor.\npublic abstract class ConfigDataException extends RuntimeException; // Abstract base class for configuration data exceptions.\npublic interface ConfigDataLoader<R extends ConfigDataResource>; // Strategy class that can be used to load ConfigData for a given ConfigDataResource.\npublic interface ConfigDataLoaderContext; // Context provided to ConfigDataLoader methods.\npublic final class ConfigDataLocation extends Object implements OriginProvider; // A user specified location that can be resolved to one or more config data resources.\npublic class ConfigDataLocationNotFoundException extends ConfigDataNotFoundException; // ConfigDataNotFoundException thrown when a ConfigDataLocation cannot be found.\npublic interface ConfigDataLocationResolver<R extends ConfigDataResource>; // Strategy interface used to resolve locations into one or more resources.\npublic interface ConfigDataLocationResolverContext; // Context provided to ConfigDataLocationResolver methods.\npublic enum ConfigDataNotFoundAction extends Enum<ConfigDataNotFoundAction>; // Action to take when an uncaught ConfigDataNotFoundException is thrown.\npublic abstract class ConfigDataNotFoundException extends ConfigDataException implements OriginProvider; // ConfigDataNotFoundException thrown when a ConfigData cannot be found.\npublic abstract class ConfigDataResource extends Object; // A single resource from which ConfigData can be loaded.\n", "des": "External configuration support allowing 'application.properties' to be loaded and used within a Spring Boot application."}
{"index": 2296, "repo": "spring-boot-3.1.1", "code": "package event;\n\npublic class ApplicationContextInitializedEvent extends SpringApplicationEvent; // Event published when a SpringApplication is starting up and the ApplicationContext is prepared and ApplicationContextInitializers have been called but before any bean definitions are loaded.\npublic class ApplicationEnvironmentPreparedEvent extends SpringApplicationEvent; // Event published when a SpringApplication is starting up and the Environment is first available for inspection and modification.\npublic class ApplicationFailedEvent extends SpringApplicationEvent; // Event published by a SpringApplication when it fails to start.\npublic class ApplicationPreparedEvent extends SpringApplicationEvent; // Event published as when a SpringApplication is starting up and the ApplicationContext is fully prepared but not refreshed.\npublic class ApplicationReadyEvent extends SpringApplicationEvent; // Event published as late as conceivably possible to indicate that the application is ready to service requests.\npublic class ApplicationStartedEvent extends SpringApplicationEvent; // Event published once the application context has been refreshed but before any application and command line runners have been called.\npublic class ApplicationStartingEvent extends SpringApplicationEvent; // Event published as early as conceivably possible as soon as a SpringApplication has been started - before the Environment or ApplicationContext is available, but after the ApplicationListeners have been registered.\npublic abstract class SpringApplicationEvent extends org.springframework.context.ApplicationEvent; // Base class for ApplicationEvent related to a SpringApplication.\n", "des": "ApplicationEvents triggered by Spring Boot."}
{"index": 2297, "repo": "spring-boot-3.1.1", "code": "package logging;\n\npublic class LoggingApplicationListener extends Object implements org.springframework.context.event.GenericApplicationListener; // An ApplicationListener that configures the LoggingSystem.\n", "des": "Logging integration with Spring's Application Context."}
{"index": 2298, "repo": "spring-boot-3.1.1", "code": "package buffering;\n\npublic class BufferingApplicationStartup extends Object implements org.springframework.core.metrics.ApplicationStartup; // ApplicationStartup implementation that buffers steps and records their timestamp as well as their processing time.\npublic class StartupTimeline extends Object; // Represent the timeline of steps recorded by BufferingApplicationStartup.\npublic static class StartupTimeline.TimelineEvent extends Object; // Event on the current StartupTimeline.\n", "des": "ApplicationStartup implementation for buffering steps and measuring their processing time."}
{"index": 2299, "repo": "spring-boot-3.1.1", "code": "package properties;\n\npackage properties.bind; // Support for @ConfigurationProperties binding.\npackage properties.source; // Sources for external configuration properties.\npublic class BoundConfigurationProperties extends Object; // Bean to record and provide bound @ConfigurationProperties.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Indexed public @interface ConfigurationProperties; // Annotation for externalized configuration.\npublic final class ConfigurationPropertiesBean extends Object; // Provides access to @ConfigurationProperties bean details, regardless of if the annotation was used directly or on a @Bean factory method.\n@Deprecated(since=\"3.0.8\", forRemoval=true) public static enum ConfigurationPropertiesBean.BindMethod extends Enum<ConfigurationPropertiesBean.BindMethod>;\npublic class ConfigurationPropertiesBindException extends org.springframework.beans.factory.BeanCreationException; // Exception thrown when @ConfigurationProperties binding fails.\n@FunctionalInterface public interface ConfigurationPropertiesBindHandlerAdvisor; // Allows additional functionality to be applied to the BindHandler used by the ConfigurationPropertiesBindingPostProcessor.\n@Qualifier(\"org.springframework.boot.context.properties.ConfigurationPropertiesBinding\") @Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface ConfigurationPropertiesBinding; // Qualifier for beans that are needed to configure the binding of @ConfigurationProperties (e.g.\npublic class ConfigurationPropertiesBindingPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.core.PriorityOrdered, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // BeanPostProcessor to bind PropertySources to beans annotated with @ConfigurationProperties.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(org.springframework.boot.context.properties.ConfigurationPropertiesScanRegistrar.class) @EnableConfigurationProperties public @interface ConfigurationPropertiesScan; // Configures the base packages used when scanning for @ConfigurationProperties classes.\n@Target({CONSTRUCTOR,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Deprecated(since=\"3.0.0\", forRemoval=true) @ConstructorBinding public @interface ConstructorBinding;\npublic abstract class ConstructorBound extends Object; // Helper class to programmatically bind configuration properties that use constructor injection.\n", "des": "Support for external configuration properties."}
{"index": 2300, "repo": "spring-boot-3.1.1", "code": "package bind;\n\npackage bind.handler; // General BindHandler implementations.\npackage bind.validation; // Binding validation support.\npublic abstract class AbstractBindHandler extends Object implements BindHandler; // Abstract base class for BindHandler implementations.\npublic final class Bindable<T> extends Object; // Source that can be bound by a Binder.\npublic static enum Bindable.BindRestriction extends Enum<Bindable.BindRestriction>; // Restrictions that can be applied when binding values.\npublic class BindableRuntimeHintsRegistrar extends Object implements org.springframework.aot.hint.RuntimeHintsRegistrar; // RuntimeHintsRegistrar that can be used to register ReflectionHints for Bindable types, discovering any nested type it may expose through a property.\n@FunctionalInterface public interface BindConstructorProvider; // Strategy interface used to determine a specific constructor to use when binding.\npublic interface BindContext; // Context information for use by BindHandlers.\npublic class Binder extends Object; // A container object which Binds objects from one or more ConfigurationPropertySources.\npublic class BindException extends RuntimeException implements OriginProvider; // Exception thrown when binding fails.\npublic interface BindHandler; // Callback interface that can be used to handle additional logic during element binding.\npublic enum BindMethod extends Enum<BindMethod>; // Configuration property binding methods.\npublic final class BindResult<T> extends Object; // A container object to return the result of a Binder bind operation.\npublic class BoundPropertiesTrackingBindHandler extends AbstractBindHandler; // BindHandler that can be used to track bound configuration properties.\n@Target({CONSTRUCTOR,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface ConstructorBinding; // Annotation that can be used to indicate which constructor to use when binding configuration properties using constructor arguments rather than by calling setters.\npublic abstract class DataObjectPropertyName extends Object; // Internal utility to help when dealing with data object property names.\n@Retention(RUNTIME) @Target({PARAMETER,RECORD_COMPONENT}) @Documented public @interface DefaultValue; // Annotation that can be used to specify the default value when binding to an immutable property.\n@Retention(RUNTIME) @Target(PARAMETER) @Documented public @interface Name; // Annotation that can be used to specify the name when binding to an immutable property.\n", "des": "Support for @ConfigurationProperties binding."}
{"index": 2301, "repo": "spring-boot-3.1.1", "code": "package handler;\n\npublic class IgnoreErrorsBindHandler extends AbstractBindHandler; // BindHandler that can be used to ignore binding errors.\npublic class IgnoreTopLevelConverterNotFoundBindHandler extends AbstractBindHandler; // BindHandler that can be used to ignore top-level ConverterNotFoundExceptions.\npublic class NoUnboundElementsBindHandler extends AbstractBindHandler; // BindHandler to enforce that all configuration properties under the root name have been bound.\n", "des": "General BindHandler implementations."}
{"index": 2302, "repo": "spring-boot-3.1.1", "code": "package validation;\n\npublic class BindValidationException extends RuntimeException; // Error thrown when validation fails during a bind operation.\npublic class ValidationBindHandler extends AbstractBindHandler; // BindHandler to apply Validators to bound results.\npublic class ValidationErrors extends Object implements Iterable<org.springframework.validation.ObjectError>; // A collection of ObjectErrors caused by bind validation failures.\n", "des": "Binding validation support."}
{"index": 2303, "repo": "spring-boot-3.1.1", "code": "package source;\n\npublic final class ConfigurationProperty extends Object implements OriginProvider, Comparable<ConfigurationProperty>; // A single configuration property obtained from a ConfigurationPropertySource consisting of a name, value and optional origin.\npublic interface ConfigurationPropertyCaching; // Interface that can be used to control configuration property source caches.\npublic final class ConfigurationPropertyName extends Object implements Comparable<ConfigurationPropertyName>; // A configuration property name composed of elements separated by dots.\npublic static enum ConfigurationPropertyName.Form extends Enum<ConfigurationPropertyName.Form>; // The various forms that a non-indexed element value can take.\npublic final class ConfigurationPropertyNameAliases extends Object implements Iterable<ConfigurationPropertyName>; // Maintains a mapping of ConfigurationPropertyName aliases.\n@FunctionalInterface public interface ConfigurationPropertySource; // A source of ConfigurationProperties.\npublic final class ConfigurationPropertySources extends Object; // Provides access to ConfigurationPropertySources.\npublic enum ConfigurationPropertyState extends Enum<ConfigurationPropertyState>; // The state of content from a ConfigurationPropertySource.\npublic class InvalidConfigurationPropertyNameException extends RuntimeException; // Exception thrown when ConfigurationPropertyName has invalid characters.\npublic class InvalidConfigurationPropertyValueException extends RuntimeException; // Exception thrown when a configuration property value is invalid.\npublic interface IterableConfigurationPropertySource extends ConfigurationPropertySource, Iterable<ConfigurationPropertyName>; // A ConfigurationPropertySource with a fully Iterable set of entries.\npublic class MapConfigurationPropertySource extends Object implements IterableConfigurationPropertySource; // A ConfigurationPropertySource backed by a Map and using standard name mapping rules.\npublic class MutuallyExclusiveConfigurationPropertiesException extends RuntimeException; // Exception thrown when more than one mutually exclusive configuration property has been configured.\npublic class UnboundElementsSourceFilter extends Object implements Function<ConfigurationPropertySource,Boolean>; // Function used to determine if a ConfigurationPropertySource should be included when determining unbound elements.\n", "des": "Sources for external configuration properties."}
{"index": 2304, "repo": "spring-boot-3.1.1", "code": "package convert;\n\npublic class ApplicationConversionService extends org.springframework.format.support.FormattingConversionService; // A specialization of FormattingConversionService configured by default with converters and formatters appropriate for most Spring Boot applications.\n@Target({FIELD,PARAMETER}) @Retention(RUNTIME) @Documented public @interface DataSizeUnit; // Annotation that can be used to change the default unit used when converting a DataSize.\n@Documented @Retention(RUNTIME) @Target({METHOD,FIELD,PARAMETER,ANNOTATION_TYPE}) public @interface Delimiter; // Declares a field or method parameter should be converted to collection using the specified delimiter.\n@Target({FIELD,PARAMETER}) @Retention(RUNTIME) @Documented public @interface DurationFormat; // Annotation that can be used to indicate the format to use when converting a Duration.\npublic enum DurationStyle extends Enum<DurationStyle>; // Duration format styles.\n@Target({FIELD,PARAMETER}) @Retention(RUNTIME) @Documented public @interface DurationUnit; // Annotation that can be used to change the default unit used when converting a Duration.\n@Target({FIELD,PARAMETER}) @Retention(RUNTIME) @Documented public @interface PeriodFormat; // Annotation that can be used to indicate the format to use when converting a Period.\npublic enum PeriodStyle extends Enum<PeriodStyle>; // A standard set of Period units.\n@Target({FIELD,PARAMETER}) @Retention(RUNTIME) @Documented public @interface PeriodUnit; // Annotation that can be used to change the default unit used when converting a Period.\n", "des": "Support for type conversion."}
{"index": 2305, "repo": "spring-boot-3.1.1", "code": "package diagnostics;\n\npackage diagnostics.analyzer; // Internal FailureAnalyzer implementations.\npublic abstract class AbstractFailureAnalyzer<T extends Throwable> extends Object implements FailureAnalyzer; // Abstract base class for most FailureAnalyzer implementations.\npublic class FailureAnalysis extends Object; // The result of analyzing a failure.\n@FunctionalInterface public interface FailureAnalysisReporter; // Reports a FailureAnalysis to the user.\n@FunctionalInterface public interface FailureAnalyzer; // A FailureAnalyzer is used to analyze a failure and provide diagnostic information that can be displayed to the user.\npublic final class LoggingFailureAnalysisReporter extends Object implements FailureAnalysisReporter; // FailureAnalysisReporter that logs the failure analysis.\n", "des": "Support for failure analysis and reporting."}
{"index": 2306, "repo": "spring-boot-3.1.1", "code": "package analyzer;\n\npublic abstract class AbstractInjectionFailureAnalyzer<T extends Throwable> extends AbstractFailureAnalyzer<T>; // Abstract base class for a FailureAnalyzer that handles some kind of injection failure.\npublic class BeanNotOfRequiredTypeFailureAnalyzer extends AbstractFailureAnalyzer<org.springframework.beans.factory.BeanNotOfRequiredTypeException>; // An AbstractFailureAnalyzer that performs analysis of failures caused by a BeanNotOfRequiredTypeException.\n", "des": "Internal FailureAnalyzer implementations."}
{"index": 2307, "repo": "spring-boot-3.1.1", "code": "package env;\n\npublic class ConfigTreePropertySource extends org.springframework.core.env.EnumerablePropertySource<Path> implements OriginLookup<String>; // PropertySource backed by a directory tree that contains files for each value.\npublic static enum ConfigTreePropertySource.Option extends Enum<ConfigTreePropertySource.Option>; // Property source options.\npublic static interface ConfigTreePropertySource.Value extends CharSequence, org.springframework.core.io.InputStreamSource; // A value returned from the property source which exposes the contents of the property file.\n@FunctionalInterface public interface EnvironmentPostProcessor; // Allows for customization of the application's Environment prior to the application context being refreshed.\npublic class EnvironmentPostProcessorApplicationListener extends Object implements org.springframework.context.event.SmartApplicationListener, org.springframework.core.Ordered; // SmartApplicationListener used to trigger EnvironmentPostProcessors registered in the spring.factories file.\n@FunctionalInterface public interface EnvironmentPostProcessorsFactory; // Factory interface used by the EnvironmentPostProcessorApplicationListener to create the EnvironmentPostProcessor instances.\npublic final class OriginTrackedMapPropertySource extends org.springframework.core.env.MapPropertySource implements OriginLookup<String>; // OriginLookup backed by a Map containing OriginTrackedValues.\npublic class PropertiesPropertySourceLoader extends Object implements PropertySourceLoader; // Strategy to load '.properties' files into a PropertySource.\npublic interface PropertySourceLoader; // Strategy interface located through SpringFactoriesLoader and used to load a PropertySource.\npublic class RandomValuePropertySource extends org.springframework.core.env.PropertySource<Random>; // PropertySource that returns a random value for any property that starts with \"random.\".\npublic class RandomValuePropertySourceEnvironmentPostProcessor extends Object implements EnvironmentPostProcessor, org.springframework.core.Ordered; // EnvironmentPostProcessor to add the RandomValuePropertySource.\npublic class SpringApplicationJsonEnvironmentPostProcessor extends Object implements EnvironmentPostProcessor, org.springframework.core.Ordered; // An EnvironmentPostProcessor that parses JSON from spring.application.json or equivalently SPRING_APPLICATION_JSON and adds it as a map property source to the Environment.\n", "des": "Spring Environment support."}
{"index": 2308, "repo": "spring-boot-3.1.1", "code": "package info;\n\n@ImportRuntimeHints(org.springframework.boot.info.BuildProperties.BuildPropertiesRuntimeHints.class) public class BuildProperties extends InfoProperties; // Provide build-related information such as group and artifact.\n@ImportRuntimeHints(org.springframework.boot.info.GitProperties.GitPropertiesRuntimeHints.class) public class GitProperties extends InfoProperties; // Provide git-related information such as commit id and time.\npublic class InfoProperties extends Object implements Iterable<InfoProperties.Entry>; // Base class for components exposing unstructured data with dedicated methods for well known keys.\npublic static final class InfoProperties.Entry extends Object; // Property entry.\npublic class JavaInfo extends Object; // Information about the Java environment the application is running in.\npublic static class JavaInfo.JavaRuntimeEnvironmentInfo extends Object; // Information about the Java Runtime Environment the application is running in.\npublic static class JavaInfo.JavaVendorInfo extends Object; // Information about the Java Vendor of the Java Runtime the application is running in.\npublic static class JavaInfo.JavaVirtualMachineInfo extends Object; // Information about the Java Virtual Machine the application is running in.\npublic class OsInfo extends Object; // Information about the Operating System the application is running on.\n", "des": "Support for providing information about an application."}
{"index": 2309, "repo": "spring-boot-3.1.1", "code": "package jackson;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface JsonComponent; // @Component that provides JsonSerializer, JsonDeserializer or KeyDeserializer implementations to be registered with Jackson when JsonComponentModule is in use.\npublic static enum JsonComponent.Scope extends Enum<JsonComponent.Scope>; // The various scopes under which a serializer/deserializer can be registered.\npublic class JsonComponentModule extends com.fasterxml.jackson.databind.module.SimpleModule implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // Spring Bean and Jackson Module to register @JsonComponent annotated beans.\n@Target(TYPE) @Retention(RUNTIME) @Documented public @interface JsonMixin; // Provides a mixin class implementation that registers with Jackson when using JsonMixinModule.\npublic class JsonMixinModule extends com.fasterxml.jackson.databind.module.SimpleModule; // Spring Bean and Jackson Module to find and register @JsonMixin-annotated classes.\npublic final class JsonMixinModuleEntries extends Object; // Provide the mapping of json mixin class to consider.\npublic static class JsonMixinModuleEntries.Builder extends Object; // Builder for JsonMixinModuleEntries.\npublic abstract class JsonObjectDeserializer<T> extends com.fasterxml.jackson.databind.JsonDeserializer<T>; // Helper base class for JsonDeserializer implementations that deserialize objects.\npublic abstract class JsonObjectSerializer<T> extends com.fasterxml.jackson.databind.JsonSerializer<T>; // Helper base class for JsonSerializer implementations that serialize objects.\n", "des": "Custom enhancements and support for the Jackson project."}
{"index": 2310, "repo": "spring-boot-3.1.1", "code": "package jdbc;\n\npackage jdbc.init; // Support for initialization of an SQL database using a JDBC DataSource.\npackage jdbc.metadata; // Support for accessing JDBC DataSource metadata.\npublic enum DatabaseDriver extends Enum<DatabaseDriver>; // Enumeration of common database drivers.\npublic final class DataSourceBuilder<T extends DataSource> extends Object; // Convenience class for building a DataSource.\npublic final class DataSourceUnwrapper extends Object; // Unwraps a DataSource that may have been proxied or wrapped in a custom Wrapper such as DelegatingDataSource.\npublic enum EmbeddedDatabaseConnection extends Enum<EmbeddedDatabaseConnection>; // Connection details for embedded databases.\npublic enum SchemaManagement extends Enum<SchemaManagement>; // An enumeration of the available schema management options.\n@FunctionalInterface public interface SchemaManagementProvider; // Strategy interface to determine the SchemaManagement of a DataSource.\npublic class UnsupportedDataSourcePropertyException extends RuntimeException; // RuntimeException thrown from DataSourceBuilder when an unsupported property is used.\n@FunctionalInterface public interface XADataSourceWrapper; // Strategy interface used to wrap an XADataSource enrolling it with a JTA TransactionManager.\n", "des": "Support for Java Database Connectivity (JDBC)."}
{"index": 2311, "repo": "spring-boot-3.1.1", "code": "package init;\n\npublic class DataSourceScriptDatabaseInitializer extends AbstractScriptDatabaseInitializer; // InitializingBean that performs DataSource initialization using schema (DDL) and data (DML) scripts.\npublic class PlatformPlaceholderDatabaseDriverResolver extends Object; // Utility class that can resolve placeholder text with the actual DatabaseDriver platform.\n", "des": "Support for initialization of an SQL database using a JDBC DataSource."}
{"index": 2312, "repo": "spring-boot-3.1.1", "code": "package metadata;\n\npublic abstract class AbstractDataSourcePoolMetadata<T extends DataSource> extends Object implements DataSourcePoolMetadata; // A base DataSourcePoolMetadata implementation.\npublic class CommonsDbcp2DataSourcePoolMetadata extends AbstractDataSourcePoolMetadata<org.apache.commons.dbcp2.BasicDataSource>; // DataSourcePoolMetadata for an Apache Commons DBCP2 DataSource.\npublic class CompositeDataSourcePoolMetadataProvider extends Object implements DataSourcePoolMetadataProvider; // A DataSourcePoolMetadataProvider implementation that returns the first DataSourcePoolMetadata that is found by one of its delegate.\npublic interface DataSourcePoolMetadata; // Provides access meta-data that is commonly available from most pooled DataSource implementations.\n@FunctionalInterface public interface DataSourcePoolMetadataProvider; // Provide a DataSourcePoolMetadata based on a DataSource.\npublic class HikariDataSourcePoolMetadata extends AbstractDataSourcePoolMetadata<com.zaxxer.hikari.HikariDataSource>; // DataSourcePoolMetadata for a Hikari DataSource.\npublic class OracleUcpDataSourcePoolMetadata extends AbstractDataSourcePoolMetadata<oracle.ucp.jdbc.PoolDataSource>; // DataSourcePoolMetadata for an Oracle UCP DataSource.\npublic class TomcatDataSourcePoolMetadata extends AbstractDataSourcePoolMetadata<org.apache.tomcat.jdbc.pool.DataSource>; // DataSourcePoolMetadata for a Tomcat DataSource.\n", "des": "Support for accessing JDBC DataSource metadata."}
{"index": 2313, "repo": "spring-boot-3.1.1", "code": "package jms;\n\n@FunctionalInterface public interface XAConnectionFactoryWrapper; // Strategy interface used to wrap a JMS XAConnectionFactory enrolling it with a JTA TransactionManager.\n", "des": "Support for Java Message Service (JMS)."}
{"index": 2314, "repo": "spring-boot-3.1.1", "code": "package json;\n\npublic abstract class AbstractJsonParser extends Object implements JsonParser; // Base class for parsers wrapped or implemented in this package.\npublic class BasicJsonParser extends AbstractJsonParser; // Really basic JSON parser for when you have nothing else available.\npublic class GsonJsonParser extends AbstractJsonParser; // Thin wrapper to adapt Gson to a JsonParser.\npublic class JacksonJsonParser extends AbstractJsonParser; // Thin wrapper to adapt Jackson 2 ObjectMapper to JsonParser.\npublic class JsonParseException extends IllegalArgumentException; // IllegalArgumentException thrown when source JSON is invalid.\npublic interface JsonParser; // Parser that can read JSON formatted strings into Maps or Lists.\npublic abstract class JsonParserFactory extends Object; // Factory to create a JsonParser.\n", "des": "Support for parsing JSON."}
{"index": 2315, "repo": "spring-boot-3.1.1", "code": "package logging;\n\npackage logging.java; // Support for 'Java Util Logging'.\npackage logging.log4j2; // Support for the Log4j 2 logging library.\npackage logging.logback; // Support for the Logback logging library.\npublic abstract class AbstractLoggingSystem extends LoggingSystem; // Abstract base class for LoggingSystem implementations.\nprotected static class AbstractLoggingSystem.LogLevels<T> extends Object; // Maintains a mapping between native levels and LogLevel.\npublic class DeferredLog extends Object implements org.apache.commons.logging.Log; // Deferred Log that can be used to store messages that shouldn't be written until the logging system is fully initialized.\n@FunctionalInterface public interface DeferredLogFactory; // Factory that can be used to create multiple DeferredLog instances that will switch over when appropriate.\npublic class DeferredLogs extends Object implements DeferredLogFactory; // A DeferredLogFactory implementation that manages a collection DeferredLog instances.\npublic class LogFile extends Object; // A reference to a log output file.\npublic final class LoggerConfiguration extends Object; // Immutable class that represents the configuration of a LoggingSystem's logger.\npublic static enum LoggerConfiguration.ConfigurationScope extends Enum<LoggerConfiguration.ConfigurationScope>; // Supported logger configurations scopes.\npublic static final class LoggerConfiguration.LevelConfiguration extends Object; // Logger level configuration.\npublic final class LoggerGroup extends Object; // A single logger group.\npublic final class LoggerGroups extends Object implements Iterable<LoggerGroup>; // Logger groups configured through the Spring Environment.\npublic class LoggingInitializationContext extends Object; // Context passed to the LoggingSystem during initialization.\npublic abstract class LoggingSystem extends Object; // Common abstraction over logging systems.\npublic interface LoggingSystemFactory; // Factory class used by LoggingSystem.get(ClassLoader) to find an actual implementation.\npublic class LoggingSystemProperties extends Object; // Utility to set system properties that can later be used by log configuration files.\npublic enum LogLevel extends Enum<LogLevel>; // Logging levels supported by a LoggingSystem.\n", "des": "Support and abstractions across several logging libraries."}
{"index": 2316, "repo": "spring-boot-3.1.1", "code": "package java;\n\npublic class JavaLoggingSystem extends AbstractLoggingSystem; // LoggingSystem for java.util.logging.\n@Order(2147483647) public static class JavaLoggingSystem.Factory extends Object implements LoggingSystemFactory; // LoggingSystemFactory that returns JavaLoggingSystem if possible.\npublic class SimpleFormatter extends Formatter; // Simple 'Java Logging' Formatter.\n", "des": "Support for 'Java Util Logging'."}
{"index": 2317, "repo": "spring-boot-3.1.1", "code": "package log4j2;\n\n@Plugin(name=\"color\", category=\"Converter\") public final class ColorConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter; // Log4j2 LogEventPatternConverter colors output using the AnsiOutput class.\n@Plugin(name=\"ExtendedWhitespaceThrowablePatternConverter\", category=\"Converter\") public final class ExtendedWhitespaceThrowablePatternConverter extends org.apache.logging.log4j.core.pattern.ThrowablePatternConverter; // ThrowablePatternConverter that adds some additional whitespace around the stack trace.\npublic class Log4J2LoggingSystem extends AbstractLoggingSystem; // LoggingSystem for Log4j 2.\n@Order(2147483647) public static class Log4J2LoggingSystem.Factory extends Object implements LoggingSystemFactory; // LoggingSystemFactory that returns Log4J2LoggingSystem if possible.\n@Plugin(name=\"SpringBootConfigurationFactory\", category=\"ConfigurationFactory\") public class SpringBootConfigurationFactory extends org.apache.logging.log4j.core.config.ConfigurationFactory; // Spring Boot ConfigurationFactory that customizes Log4J2's default configuration to: Prevent logger warnings from being printed when the application first starts.\npublic class SpringBootPropertySource extends Object implements org.apache.logging.log4j.util.PropertySource; // Spring Boot PropertySource that disables Log4j2's shutdown hook.\n@Plugin(name=\"WhitespaceThrowablePatternConverter\", category=\"Converter\") public final class WhitespaceThrowablePatternConverter extends org.apache.logging.log4j.core.pattern.ThrowablePatternConverter; // ThrowablePatternConverter that adds some additional whitespace around the stack trace.\n", "des": "Support for the Log4j 2 logging library."}
{"index": 2318, "repo": "spring-boot-3.1.1", "code": "package logback;\n\npublic class ColorConverter extends ch.qos.logback.core.pattern.CompositeConverter<ch.qos.logback.classic.spi.ILoggingEvent>; // Logback CompositeConverter colors output using the AnsiOutput class.\npublic class ExtendedWhitespaceThrowableProxyConverter extends ch.qos.logback.classic.pattern.ExtendedThrowableProxyConverter; // ExtendedThrowableProxyConverter that adds some additional whitespace around the stack trace.\npublic class LogbackLoggingSystem extends AbstractLoggingSystem implements org.springframework.beans.factory.aot.BeanFactoryInitializationAotProcessor; // LoggingSystem for logback.\n@Order(2147483647) public static class LogbackLoggingSystem.Factory extends Object implements LoggingSystemFactory; // LoggingSystemFactory that returns LogbackLoggingSystem if possible.\npublic class LogbackLoggingSystemProperties extends LoggingSystemProperties; // LoggingSystemProperties for Logback.\npublic class RootLogLevelConfigurator extends ch.qos.logback.core.spi.ContextAwareBase implements ch.qos.logback.classic.spi.Configurator; // Logback Configurator, registered through META-INF/services, that sets the root log level to Level.INFO.\npublic class WhitespaceThrowableProxyConverter extends ch.qos.logback.classic.pattern.ThrowableProxyConverter; // ThrowableProxyConverter that adds some additional whitespace around the stack trace.\n", "des": "Support for the Logback logging library."}
{"index": 2319, "repo": "spring-boot-3.1.1", "code": "package origin;\n\npublic interface Origin; // Interface that uniquely represents the origin of an item.\n@FunctionalInterface public interface OriginLookup<K>; // An interface that may be implemented by an object that can lookup Origin information from a given key.\n@FunctionalInterface public interface OriginProvider; // Interface to provide access to the origin of an item.\npublic class OriginTrackedResource extends Object implements org.springframework.core.io.Resource, OriginProvider; // Decorator that can be used to add Origin information to a Resource or WritableResource.\npublic static class OriginTrackedResource.OriginTrackedWritableResource extends OriginTrackedResource implements org.springframework.core.io.WritableResource; // Variant of OriginTrackedResource for WritableResource instances.\npublic class OriginTrackedValue extends Object implements OriginProvider; // A wrapper for an Object value and Origin.\npublic class PropertySourceOrigin extends Object implements Origin; // Origin from a PropertySource.\npublic class SystemEnvironmentOrigin extends Object implements Origin; // Origin for an item loaded from the system environment.\npublic class TextResourceOrigin extends Object implements Origin; // Origin for an item loaded from a text resource.\npublic static final class TextResourceOrigin.Location extends Object; // A location (line and column number) within the resource.\n", "des": "Support for item origin tracking."}
{"index": 2320, "repo": "spring-boot-3.1.1", "code": "package jpa;\n\npackage jpa.hibernate; // Hibernate Support classes.\npublic class EntityManagerFactoryBuilder extends Object; // Convenient builder for JPA EntityManagerFactory instances.\n", "des": "JPA Support classes."}
{"index": 2321, "repo": "spring-boot-3.1.1", "code": "package hibernate;\n\npublic class SpringImplicitNamingStrategy extends org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl; // Hibernate ImplicitNamingStrategy that follows Spring recommended naming conventions.\npublic class SpringJtaPlatform extends org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform; // Generic Hibernate AbstractJtaPlatform implementation that simply resolves the JTA UserTransaction and TransactionManager from the Spring-configured JtaTransactionManager implementation.\n", "des": "Hibernate Support classes."}
{"index": 2322, "repo": "spring-boot-3.1.1", "code": "package r2dbc;\n\npackage r2dbc.init; // Support for initialization of an SQL database using an R2DBC ConnectionFactory.\npublic final class ConnectionFactoryBuilder extends Object; // Builder for ConnectionFactory.\npublic enum EmbeddedDatabaseConnection extends Enum<EmbeddedDatabaseConnection>; // Connection details for embedded databases compatible with R2DBC.\npublic class OptionsCapableConnectionFactory extends Object implements io.r2dbc.spi.Wrapped<io.r2dbc.spi.ConnectionFactory>, io.r2dbc.spi.ConnectionFactory; // ConnectionFactory capable of providing access to the ConnectionFactoryOptions from which it was built.\n", "des": "Support for R2DBC connectivity."}
{"index": 2323, "repo": "spring-boot-3.1.1", "code": "package init;\n\npublic class R2dbcScriptDatabaseInitializer extends AbstractScriptDatabaseInitializer; // An InitializingBean that initializes a database represented by an R2DBC ConnectionFactory.\n", "des": "Support for initialization of an SQL database using an R2DBC ConnectionFactory."}
{"index": 2324, "repo": "spring-boot-3.1.1", "code": "package reactor;\n\npublic class DebugAgentEnvironmentPostProcessor extends Object implements EnvironmentPostProcessor, org.springframework.core.Ordered; // EnvironmentPostProcessor to enable the Reactor Debug Agent if available.\n", "des": "Support classes for Reactor integration."}
{"index": 2325, "repo": "spring-boot-3.1.1", "code": "package context;\n\npublic class RSocketPortInfoApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>; // ApplicationContextInitializer that sets Environment properties for the ports that RSocketServer servers are actually listening on.\npublic class RSocketServerBootstrap extends Object implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.SmartLifecycle; // Bootstrap an RSocketServer and start it with the application context.\npublic class RSocketServerInitializedEvent extends org.springframework.context.ApplicationEvent; // Event to be published after the application context is refreshed and the RSocketServer is ready.\n", "des": "RSocket integrations with Spring Framework's ApplicationContext."}
{"index": 2326, "repo": "spring-boot-3.1.1", "code": "package messaging;\n\n@FunctionalInterface public interface RSocketStrategiesCustomizer; // Callback interface that can be used to customize codecs configuration for an RSocket client and/or server with RSocketStrategies.\n", "des": "Support for RSocket-based messaging."}
{"index": 2327, "repo": "spring-boot-3.1.1", "code": "package netty;\n\npublic class NettyRSocketServer extends Object implements RSocketServer; // RSocketServer that is based on a Reactor Netty server.\npublic class NettyRSocketServerFactory extends Object implements RSocketServerFactory, ConfigurableRSocketServerFactory; // RSocketServerFactory that can be used to create RSocketServers backed by Netty.\n", "des": "Reactor Netty based RSocket server implementation."}
{"index": 2328, "repo": "spring-boot-3.1.1", "code": "package server;\n\npublic interface ConfigurableRSocketServerFactory; // A configurable RSocketServerFactory.\npublic interface RSocketServer; // Simple interface that represents a fully configured RSocket server.\npublic static enum RSocketServer.Transport extends Enum<RSocketServer.Transport>; // Choice of transport protocol for the RSocket server.\n@FunctionalInterface public interface RSocketServerCustomizer; // Callback interface that can be used to customize a RSocketServer.\npublic class RSocketServerException extends RuntimeException; // Exceptions thrown by an RSocket server.\n@FunctionalInterface public interface RSocketServerFactory; // Factory interface that can be used to create a reactive RSocketServer.\n", "des": "Support for RSocket servers."}
{"index": 2329, "repo": "spring-boot-3.1.1", "code": "package reactive;\n\npublic abstract class ApplicationContextServerWebExchangeMatcher<C> extends Object implements org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher; // ApplicationContext backed ServerWebExchangeMatcher.\n", "des": "Classes and utilities for reactive Spring Security."}
{"index": 2330, "repo": "spring-boot-3.1.1", "code": "package servlet;\n\npublic abstract class ApplicationContextRequestMatcher<C> extends Object implements org.springframework.security.web.util.matcher.RequestMatcher; // ApplicationContext backed RequestMatcher.\n", "des": "Classes and utilities for Servlet-based Spring Security."}
{"index": 2331, "repo": "spring-boot-3.1.1", "code": "package init;\n\npackage init.dependency; // Infrastructure for establishing database initialization bean dependencies.\npublic abstract class AbstractScriptDatabaseInitializer extends Object implements org.springframework.context.ResourceLoaderAware, org.springframework.beans.factory.InitializingBean; // Base class for an InitializingBean that performs SQL database initialization using schema (DDL) and data (DML) scripts.\npublic static class AbstractScriptDatabaseInitializer.Scripts extends Object implements Iterable<org.springframework.core.io.Resource>; // Scripts to be used to initialize the database.\npublic enum DatabaseInitializationMode extends Enum<DatabaseInitializationMode>; // Supported database initialization modes.\npublic class DatabaseInitializationSettings extends Object; // Settings for initializing an SQL database.\n", "des": "Support for initialization of an SQL database."}
{"index": 2332, "repo": "spring-boot-3.1.1", "code": "package dependency;\n\npublic abstract class AbstractBeansOfTypeDatabaseInitializerDetector extends Object implements DatabaseInitializerDetector; // Base class for DatabaseInitializerDetectors that detect database initializer beans by type.\npublic abstract class AbstractBeansOfTypeDependsOnDatabaseInitializationDetector extends Object implements DependsOnDatabaseInitializationDetector; // Base class for DependsOnDatabaseInitializationDetectors that detect by type beans that depend upon database initialization.\npublic class DatabaseInitializationDependencyConfigurer extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar; // Configures beans that depend upon SQL database initialization with dependencies upon beans that perform database initialization.\npublic interface DatabaseInitializerDetector extends org.springframework.core.Ordered; // Detects beans that initialize an SQL database.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface DependsOnDatabaseInitialization; // Indicate that a bean's creation and initialization depends upon database initialization having completed.\npublic interface DependsOnDatabaseInitializationDetector; // Detects beans that depend on database initialization.\n", "des": "Infrastructure for establishing database initialization bean dependencies."}
{"index": 2333, "repo": "spring-boot-3.1.1", "code": "package ssl;\n\npackage ssl.jks; // SSL trust material provider for Java KeyStores.\npackage ssl.pem; // SSL trust material provider for PEM-encoded certificates.\npublic class DefaultSslBundleRegistry extends Object implements SslBundleRegistry, SslBundles; // Default SslBundleRegistry implementation.\npublic class NoSuchSslBundleException extends RuntimeException; // Exception indicating that an SslBundle was referenced with a name that does not match any registered bundle.\npublic interface SslBundle; // A bundle of trust material that can be used to establish an SSL connection.\npublic interface SslBundleKey; // A reference to a single key obtained via SslBundle.\npublic interface SslBundleRegistry; // Interface that can be used to register an SslBundle for a given name.\npublic interface SslBundles; // A managed set of SslBundle instances that can be retrieved by name.\npublic interface SslManagerBundle; // A bundle of key and trust managers that can be used to establish an SSL connection.\npublic interface SslOptions; // Configuration options that should be applied when establishing an SSL connection.\npublic interface SslStoreBundle; // A bundle of key and trust stores that can be used to establish an SSL connection.\n", "des": "Management of trust material that can be used to establish an SSL connection."}
{"index": 2334, "repo": "spring-boot-3.1.1", "code": "package jks;\n\npublic class JksSslStoreBundle extends Object implements SslStoreBundle; // SslStoreBundle backed by a Java keystore.\npublic record JksSslStoreDetails(String type, String provider, String location, String password) extends Record; // Details for an individual trust or key store in a JksSslStoreBundle.\n", "des": "SSL trust material provider for Java KeyStores."}
{"index": 2335, "repo": "spring-boot-3.1.1", "code": "package pem;\n\npublic class PemSslStoreBundle extends Object implements SslStoreBundle; // SslStoreBundle backed by PEM-encoded certificates and private keys.\npublic record PemSslStoreDetails(String type, String certificate, String privateKey, String privateKeyPassword) extends Record; // Details for an individual trust or key store in a PemSslStoreBundle.\n", "des": "SSL trust material provider for PEM-encoded certificates."}
{"index": 2336, "repo": "spring-boot-3.1.1", "code": "package system;\n\npublic class ApplicationHome extends Object; // Provides access to the application home directory.\npublic class ApplicationPid extends Object; // An application process ID.\npublic class ApplicationTemp extends Object; // Provides access to an application specific temporary directory.\npublic enum JavaVersion extends Enum<JavaVersion>; // Known Java versions.\npublic final class SystemProperties extends Object; // Access to system properties.\n", "des": "General system support classes."}
{"index": 2337, "repo": "spring-boot-3.1.1", "code": "package task;\n\npublic class TaskExecutorBuilder extends Object; // Builder that can be used to configure and create a TaskExecutor.\n@FunctionalInterface public interface TaskExecutorCustomizer; // Callback interface that can be used to customize a ThreadPoolTaskExecutor.\npublic class TaskSchedulerBuilder extends Object; // Builder that can be used to configure and create a TaskScheduler.\n@FunctionalInterface public interface TaskSchedulerCustomizer; // Callback interface that can be used to customize a ThreadPoolTaskScheduler.\n", "des": "Utilities and classes related to task execution and scheduling."}
{"index": 2338, "repo": "spring-boot-3.1.1", "code": "package classreading;\n\npublic class ConcurrentReferenceCachingMetadataReaderFactory extends org.springframework.core.type.classreading.SimpleMetadataReaderFactory; // Caching implementation of the MetadataReaderFactory interface backed by a ConcurrentReferenceHashMap, caching MetadataReader per Spring Resource handle (i.e.\n", "des": "Support classes for reading annotation and class-level metadata."}
{"index": 2339, "repo": "spring-boot-3.1.1", "code": "package util;\n\npublic class Instantiator<T> extends Object; // Simple factory used to instantiate objects by injecting available parameters.\npublic static interface Instantiator.AvailableParameters; // Callback used to register available parameters.\npublic static interface Instantiator.FailureHandler; // Strategy for handling a failure that occurs when instantiating a type.\npublic final class LambdaSafe extends Object; // Utility that can be used to invoke lambdas in a safe way.\npublic static final class LambdaSafe.Callback<C,A> extends LambdaSafe.LambdaSafeCallback<C,A,LambdaSafe.Callback<C,A>>; // Represents a single callback that can be invoked in a lambda safe way.\npublic static final class LambdaSafe.Callbacks<C,A> extends LambdaSafe.LambdaSafeCallback<C,A,LambdaSafe.Callbacks<C,A>>; // Represents a collection of callbacks that can be invoked in a lambda safe way.\npublic static final class LambdaSafe.InvocationResult<R> extends Object; // The result of a callback which may be a value, null or absent entirely if the callback wasn't suitable.\nprotected abstract static class LambdaSafe.LambdaSafeCallback<C,A,SELF extends LambdaSafe.LambdaSafeCallback<C,A,SELF>> extends Object; // Abstract base class for lambda safe callbacks.\n", "des": "Contains miscellaneous utility classes."}
{"index": 2340, "repo": "spring-boot-3.1.1", "code": "package validation;\n\npackage validation.beanvalidation; // Utilities and classes related to bean validation.\npublic class MessageInterpolatorFactory extends Object implements org.springframework.beans.factory.ObjectFactory<jakarta.validation.MessageInterpolator>; // ObjectFactory that can be used to create a MessageInterpolator.\n", "des": "Utilities and classes related to validation."}
{"index": 2341, "repo": "spring-boot-3.1.1", "code": "package beanvalidation;\n\npublic class FilteredMethodValidationPostProcessor extends org.springframework.validation.beanvalidation.MethodValidationPostProcessor; // Custom MethodValidationPostProcessor that applies exclusion filters.\npublic interface MethodValidationExcludeFilter; // A filter for excluding types from method validation.\n", "des": "Utilities and classes related to bean validation."}
