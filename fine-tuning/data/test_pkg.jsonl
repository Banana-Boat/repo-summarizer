{"index": 1090, "repo": "lucene-analyzers-smartcn-8.11.2", "code": "package smart;\n\npackage smart.hhmm; // SmartChineseAnalyzer Hidden Markov Model package.\nClass AnalyzerProfile; // Manages analysis data configuration for SmartChineseAnalyzer\nClass CharType; // Internal SmartChineseAnalyzer character type constants.\nClass HMMChineseTokenizer; // Tokenizer for Chinese or mixed Chinese-English text.\nClass HMMChineseTokenizerFactory; // Factory for HMMChineseTokenizer\nClass SmartChineseAnalyzer; // SmartChineseAnalyzer is an analyzer for Chinese or mixed Chinese-English text.\nClass Utility; // SmartChineseAnalyzer utility constants and methods\nClass WordType; // Internal SmartChineseAnalyzer token type constants\n", "des": "Analyzer for Simplified Chinese, which indexes words."}
{"index": 3849, "repo": "lucene-core-9.7.0", "code": "package search;\n\npackage search.comparators; // Comparators, used to compare hits so as to determine their sort order when collecting the top results with TopFieldCollector.\npackage search.similarities; // This package contains the various ranking models that can be used in Lucene.\nInterface BoostAttribute; // Add this Attribute to a TermsEnum returned by MultiTermQuery.getTermsEnum(Terms,AttributeSource) and update the boost on each returned term.\nInterface Collector; // Expert: Collectors are primarily meant to be used to gather raw results from a search, and implement sorting or custom result filtering, collation, etc.\nInterface CollectorManager<C extends Collector,â€‹T>; // A manager of collectors.\nInterface LeafCollector; // Collector decouples the score from the collected doc: the score computation is skipped entirely if it's not needed.\nInterface LeafFieldComparator; // Expert: comparator that gets instantiated on each leaf from a top-level FieldComparator instance.\nInterface Matches; // Reports the positions and optionally offsets of all matching terms in a query for a single document\nInterface MatchesIterator; // An iterator over match positions (and optionally offsets) for a single document and field\nInterface MaxNonCompetitiveBoostAttribute; // Add this Attribute to a fresh AttributeSource before calling MultiTermQuery.getTermsEnum(Terms,AttributeSource).\nInterface QueryCache; // A cache for queries.\nInterface QueryCachingPolicy; // A policy defining which filters should be cached.\nInterface ReferenceManager.RefreshListener; // Use to receive notification when a refresh has finished.\nInterface SearcherLifetimeManager.Pruner; // See SearcherLifetimeManager.prune(org.apache.lucene.search.SearcherLifetimeManager.Pruner).\nInterface SegmentCacheable; // Interface defining whether or not an object can be cached against a LeafReader\nClass AutomatonQuery; // A Query that will match terms against a finite-state machine.\nClass BlendedTermQuery; // A Query that blends index statistics across multiple terms.\nClass BlendedTermQuery.Builder; // A Builder for BlendedTermQuery.\nClass BlendedTermQuery.DisjunctionMaxRewrite; // A BlendedTermQuery.RewriteMethod that creates a DisjunctionMaxQuery out of the sub queries.\n", "des": "Code to search indices."}
{"index": 3714, "repo": "solr-core-9.3.0", "code": "package uninverting;\n\nInterface FieldCache; // Expert: Maintains caches of term values.\nInterface FieldCache.Parser; // interface to all parsers.\nClass DocTermOrds; // This class enables fast access to multiple term ords for a specified field across all docIDs.\nClass FieldCache.CacheEntry; // EXPERT: A unique Identifier/Description for each item in the FieldCache.\nClass FieldCache.CreationPlaceholder; // Placeholder indicating creation of this cache is currently in-progress.\nClass FieldCache.PointParser; // Base class for points parsers.\nClass FieldCacheImpl; // Expert: The default cache implementation, storing all values in memory.\nClass FieldCacheImpl.BinaryDocValuesImpl;\nClass FieldCacheImpl.LongsFromArray;\nClass FieldCacheImpl.SortedDocValuesImpl;\nClass UninvertingReader; // A FilterReader that exposes indexed values as if they also had docvalues.\nClass UninvertingReader.FieldCacheStats; // Return information about the backing cache\nEnum UninvertingReader.Type; // Specifies the type of uninversion to apply for the field.\n", "des": "Support for creating docvalues on-the-fly from the inverted index at runtime."}
{"index": 3433, "repo": "hibernate-core-5.6.15.Final", "code": "package interceptor;\n\nInterface BytecodeInterceptorLogging; // Logging related to bytecode enhancement interceptors\nInterface BytecodeLazyAttributeInterceptor;\nInterface EnhancementHelper.InheritanceChecker;\nInterface LazyFetchGroupMetadata; // Information about a particular bytecode lazy attribute grouping.\nInterface SessionAssociableInterceptor;\nClass AbstractInterceptor;\nClass AbstractLazyLoadInterceptor;\nClass BytecodeInterceptorLogging_$logger; // Warning this class consists of generated code.\nClass EnhancementAsProxyLazinessInterceptor;\nClass EnhancementHelper;\nClass LazyAttributeDescriptor; // Descriptor for an attribute which is enabled for bytecode lazy fetching\nClass LazyAttributeLoadingInterceptor; // Interceptor that loads attributes lazily\nClass LazyAttributesMetadata; // Information about all of the bytecode lazy attributes for an entity\n", "des": "interceptor implementations"}
{"index": 2284, "repo": "spring-data-elasticsearch-5.1.2", "code": "package repository;\n\n@NoRepositoryBean public interface ElasticsearchRepository<T,ID> extends PagingAndSortingRepository<T,ID>, CrudRepository<T,ID>;\n@NoRepositoryBean public interface ReactiveElasticsearchRepository<T,ID> extends ReactiveSortingRepository<T,ID>, ReactiveCrudRepository<T,ID>; // Elasticsearch specific Repository interface with reactive support.\n", "des": "infrastructure to define the Elasticsearch mapping for an index."}
{"index": 1199, "repo": "commons-math3-3.6.1", "code": "package linear;\n\nInterface LinearOptimizer; // As of 3.1 (to be removed in 4.0).\nClass AbstractLinearOptimizer; // As of 3.1 (to be removed in 4.0).\nClass LinearConstraint; // As of 3.1 (to be removed in 4.0).\nClass LinearObjectiveFunction; // As of 3.1 (to be removed in 4.0).\nClass SimplexSolver; // As of 3.1 (to be removed in 4.0).\nEnum Relationship; // As of 3.1 (to be removed in 4.0).\nClass NoFeasibleSolutionException; // As of 3.1 (to be removed in 4.0).\nClass UnboundedSolutionException; // As of 3.1 (to be removed in 4.0).\n", "des": "This package provides optimization algorithms for linear constrained problems."}
{"index": 2588, "repo": "spring-rabbit-3.0.6", "code": "package config;\n\npublic abstract class AbstractExchangeParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\npublic abstract class AbstractRabbitListenerContainerFactory<C extends AbstractMessageListenerContainer> extends BaseRabbitListenerContainerFactory<C> implements org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationEventPublisherAware; // RabbitListenerContainerFactory for Spring's base container implementation.\npublic abstract class AbstractRetryOperationsInterceptorFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.aopalliance.aop.Advice>; // Convenient base class for interceptor factories.\npublic abstract class BaseRabbitListenerContainerFactory<C extends MessageListenerContainer> extends Object implements RabbitListenerContainerFactory<C>, org.springframework.context.ApplicationContextAware; // Base abstract class for listener container factories.\npublic class BindingFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.amqp.core.Binding>;\npublic class CompositeContainerCustomizer<C extends MessageListenerContainer> extends Object implements ContainerCustomizer<C>; // Implementation of ContainerCustomizer providing the configuration of multiple customizers at the same time.\n@FunctionalInterface public interface ContainerCustomizer<C extends MessageListenerContainer>; // Called by the container factory after the container is created and configured.\npublic class DirectExchangeParser extends AbstractExchangeParser;\npublic class DirectRabbitListenerContainerFactory extends AbstractRabbitListenerContainerFactory<DirectMessageListenerContainer>; // A RabbitListenerContainerFactory implementation to build a regular DirectMessageListenerContainer.\npublic class FanoutExchangeParser extends AbstractExchangeParser;\npublic class HeadersExchangeParser extends AbstractExchangeParser;\npublic class ListenerContainerFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<AbstractMessageListenerContainer> implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.SmartLifecycle; // A Factory bean to create a listener container.\npublic static enum ListenerContainerFactoryBean.Type extends Enum<ListenerContainerFactoryBean.Type>; // The container type.\n", "des": "Provides classes supporting the Rabbit XML namespace."}
{"index": 1637, "repo": "spring-kafka-3.0.9", "code": "package mapping;\n\npublic abstract class AbstractJavaTypeMapper extends Object implements org.springframework.beans.factory.BeanClassLoaderAware; // Abstract type mapper.\npublic interface ClassMapper; // Strategy for setting metadata on messages such that one can create the class that needs to be instantiated when receiving a message.\npublic class DefaultJackson2JavaTypeMapper extends AbstractJavaTypeMapper implements Jackson2JavaTypeMapper; // Jackson 2 type mapper.\npublic interface Jackson2JavaTypeMapper extends ClassMapper; // Strategy for setting metadata on messages such that one can create the class that needs to be instantiated when receiving a message.\npublic static enum Jackson2JavaTypeMapper.TypePrecedence extends Enum<Jackson2JavaTypeMapper.TypePrecedence>; // The precedence for type conversion - inferred from the method parameter or message headers.\n", "des": "Provides classes related to type mapping."}
{"index": 53, "repo": "ignite-core-2.15.0", "code": "package query;\n\npackage query.annotations; // Contains query-related annotations.\nInterface ContinuousQueryWithTransformer.EventListener<T>; // Interface for local listener of ContinuousQueryWithTransformer to implement.\nInterface FieldsQueryCursor<T>; // SQL query result cursor.\nInterface IndexQueryCriterion; // Basic interface for IndexQuery criterion.\nInterface QueryCursor<T>; // Query result cursor.\nInterface QueryDetailMetrics; // Query metrics aggregated by query type and its textual representation.\nInterface QueryMetrics; // Cache query metrics used to obtain statistics on query.\nClass AbstractContinuousQuery<K,V>; // Base class for continuous query.\nClass BulkLoadContextCursor; // A special FieldsQueryCursor subclass that is used as a sentinel to transfer data from bulk load (COPY) command to the JDBC or other client-facing driver: the bulk load batch processor and parameters to send to the client.\nClass CacheQueryEntryEvent<K,V>; // A Cache continuous query entry event.\nClass ContinuousQuery<K,V>; // API for configuring continuous cache queries.\nClass ContinuousQueryWithTransformer<K,V,T>; // API for configuring continuous cache queries with transformer.\nClass IndexQuery<K,V>; // Index queries work over distributed indexes and retrieve cache entries that match the specified criteria.\nClass IndexQueryCriteriaBuilder; // Factory of IndexQueryCriterion for IndexQuery.\nClass Query<R>; // Main API for configuring and executing cache queries.\nClass ScanQuery<K,V>; // Scan query over cache entries.\nClass SpiQuery<K,V>; // Query to be used by IndexingSpi implementations.\nClass SqlFieldsQuery; // SQL Fields query.\nClass SqlQuery<K,V>; // Since 2.8, please use SqlFieldsQuery instead.\nClass TextQuery<K,V>; // Full Text Queries Ignite supports full text queries based on Apache Lucene engine.\nClass QueryCancelledException; // The exception is thrown if a query was cancelled or timed out while executing.\nClass QueryRetryException; // The exception is thrown if a query was cancelled or timed out while executing.\n", "des": "Contains APIs for creating and executing cache queries."}
{"index": 1634, "repo": "spring-kafka-3.0.9", "code": "package messaging;\n\n@FunctionalInterface public interface MessagingFunction; // A function that receives a spring-messaging Message and returns a Message.\npublic class MessagingProcessor<Kin,Vin,Kout,Vout> extends org.apache.kafka.streams.processor.api.ContextualProcessor<Kin,Vin,Kout,Vout>; // A Transformer implementation that invokes a MessagingFunction converting to/from spring-messaging Message.\n@Deprecated public class MessagingTransformer<K,V,R> extends Object implements org.apache.kafka.streams.kstream.Transformer<K,V,org.apache.kafka.streams.KeyValue<K,R>>;\n", "des": "Package for classes related to spring-messaging with Kafka Streams."}
{"index": 2344, "repo": "spring-boot-3.1.1", "code": "package context;\n\npublic interface ConfigurableWebServerApplicationContext extends org.springframework.context.ConfigurableApplicationContext, WebServerApplicationContext; // SPI interface to be implemented by most if not all web server application contexts.\npublic class MissingWebServerFactoryBeanException extends org.springframework.beans.factory.NoSuchBeanDefinitionException; // Exception thrown when there is no WebServerFactory bean of the required type defined in a WebServerApplicationContext.\npublic class ServerPortInfoApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>, org.springframework.context.ApplicationListener<WebServerInitializedEvent>; // ApplicationContextInitializer that sets Environment properties for the ports that WebServer servers are actually listening on.\npublic interface WebServerApplicationContext extends org.springframework.context.ApplicationContext; // Interface to be implemented by application contexts that create and manage the lifecycle of an embedded WebServer.\npublic final class WebServerGracefulShutdownLifecycle extends Object implements org.springframework.context.SmartLifecycle; // SmartLifecycle to trigger WebServer graceful shutdown.\npublic abstract class WebServerInitializedEvent extends org.springframework.context.ApplicationEvent; // Event to be published when the WebServer is ready.\npublic class WebServerPortFileWriter extends Object implements org.springframework.context.ApplicationListener<WebServerInitializedEvent>; // An ApplicationListener that saves embedded server port and management port into file.\n", "des": "Web integrations with Spring's ApplicationContext."}
{"index": 2855, "repo": "spring-integration-core-6.1.2", "code": "package dsl;\n\npackage dsl.context; // The context support classes for Spring Integration Java DSL.\npackage dsl.support; // Provides various support classes used across Spring Integration Java DSL Components.\npublic class AbstractRouterSpec<S extends AbstractRouterSpec<S,R>,R extends AbstractMessageRouter> extends ConsumerEndpointSpec<S,R>; // A MessageHandlerSpec for AbstractMessageRouters.\npublic class AggregatorSpec extends CorrelationHandlerSpec<AggregatorSpec,AggregatingMessageHandler>; // A CorrelationHandlerSpec for an AggregatingMessageHandler.\npublic class BarrierSpec extends ConsumerEndpointSpec<BarrierSpec,BarrierMessageHandler>; // A MessageHandlerSpec for the BarrierMessageHandler.\n@IntegrationDsl public abstract class BaseIntegrationFlowDefinition<B extends BaseIntegrationFlowDefinition<B>> extends Object; // The Builder pattern implementation for the EIP-method chain.\npublic static final class BaseIntegrationFlowDefinition.ReplyProducerCleaner extends Object implements org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;\npublic class BroadcastPublishSubscribeSpec extends IntegrationComponentSpec<BroadcastPublishSubscribeSpec,BroadcastCapableChannel> implements ComponentsRegistration; // An IntegrationComponentSpec for configuring sub-flow subscribers on the provided BroadcastCapableChannel.\npublic final class Channels extends Object;\n@FunctionalInterface public interface ComponentsRegistration; // The marker interface for the IntegrationComponentSpec implementation, when there is need to register as beans not only the target spec's components, but some additional components, e.g.\npublic abstract class ConsumerEndpointSpec<S extends ConsumerEndpointSpec<S,H>,H extends org.springframework.messaging.MessageHandler> extends EndpointSpec<S,ConsumerEndpointFactoryBean,H>; // A EndpointSpec for consumer endpoints.\npublic abstract class CorrelationHandlerSpec<S extends CorrelationHandlerSpec<S,H>,H extends AbstractCorrelatingMessageHandler> extends ConsumerEndpointSpec<S,H>; // A MessageHandlerSpec for an AbstractCorrelatingMessageHandler.\npublic class DelayerEndpointSpec extends ConsumerEndpointSpec<DelayerEndpointSpec,DelayHandler>; // A ConsumerEndpointSpec for a DelayHandler.\npublic class DirectChannelSpec extends LoadBalancingChannelSpec<DirectChannelSpec,DirectChannel>;\n", "des": "Root package of the Spring Integration Java DSL."}
{"index": 3671, "repo": "solr-core-9.3.0", "code": "package log4j2;\n\nClass Log4j2Watcher;\nClass Log4j2Watcher.Log4j2Appender;\nClass Log4j2Watcher.Log4j2Info;\n", "des": "LOG4J2 based implementation of LogWatcher"}
{"index": 2365, "repo": "camel-base-4.0.0-RC1", "code": "package properties;\n\npublic abstract class AbstractLocationPropertiesSource extends org.apache.camel.support.service.ServiceSupport implements org.apache.camel.spi.LoadablePropertiesSource, LocationPropertiesSource; // Base class for LoadablePropertiesSource which can load properties from a source such as classpath or file system.\npublic class ClasspathPropertiesSource extends AbstractLocationPropertiesSource implements org.apache.camel.Ordered;\npublic class DefaultPropertiesFunctionResolver extends org.apache.camel.support.service.ServiceSupport implements PropertiesFunctionResolver, org.apache.camel.CamelContextAware, org.apache.camel.NonManagedService, org.apache.camel.StaticService; // Default PropertiesFunctionResolver.\npublic class DefaultPropertiesLookup extends Object implements PropertiesLookup; // Default PropertiesLookup which lookup properties from a Properties with all existing properties.\npublic class DefaultPropertiesParser extends Object implements PropertiesParser; // A parser to parse a string which contains property placeholders.\npublic class DefaultPropertiesSourceFactory extends Object implements org.apache.camel.spi.PropertiesSourceFactory;\npublic class EnvPropertiesFunction extends Object implements org.apache.camel.spi.PropertiesFunction; // A PropertiesFunction that lookup the property value from OS environment variables.\npublic class FilePropertiesSource extends AbstractLocationPropertiesSource implements org.apache.camel.Ordered;\npublic interface LocationPropertiesSource extends org.apache.camel.spi.PropertiesSource; // A PropertiesSource which was created from a PropertiesLocation.\n@ManagedResource(description=\"Managed PropertiesComponent\") @JdkService(\"properties-component-factory\") @Configurer(bootstrap=true) public class PropertiesComponent extends org.apache.camel.support.service.ServiceSupport implements org.apache.camel.spi.PropertiesComponent, org.apache.camel.StaticService, org.apache.camel.CamelContextAware; // The properties component allows you to use property placeholders in Camel.\npublic class PropertiesComponentConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements org.apache.camel.spi.GeneratedPropertyConfigurer, org.apache.camel.spi.PropertyConfigurerGetter; // Generated by camel build tools - do NOT edit this file!\npublic interface PropertiesFunctionResolver; // Resolver for built-in and custom PropertiesFunction.\npublic final class PropertiesLocation extends Object;\n@FunctionalInterface public interface PropertiesLookup; // Used by PropertiesParser to lookup properties by their name\n", "des": "The Properties Component for lookup of property placeholders for endpoint URI."}
{"index": 252, "repo": "nutch-2.4", "code": "package suffix;\n\nClass SuffixURLFilter; // Filters URLs based on a file of URL suffixes.\n", "des": "URL filter plugin to either exclude or include only URLs which match one of the given (path) suffixes."}
{"index": 1560, "repo": "spring-restdocs-core-3.0.0", "code": "package config;\n\npublic abstract class AbstractConfigurer extends Object; // Abstract configurer that declares methods that are internal to the documentation configuration implementation.\npublic abstract class AbstractNestedConfigurer<PARENT> extends AbstractConfigurer; // Base class for NestedConfigurer implementations.\npublic abstract class OperationPreprocessorsConfigurer<PARENT,TYPE> extends AbstractNestedConfigurer<PARENT>; // A configurer that can be used to configure the default operation preprocessors.\npublic abstract class RestDocumentationConfigurer<S extends AbstractConfigurer,P extends AbstractConfigurer,T> extends Object; // Abstract base class for the configuration of Spring REST Docs.\npublic abstract class SnippetConfigurer<PARENT,TYPE> extends AbstractNestedConfigurer<PARENT>; // A configurer that can be used to configure the generated documentation snippets.\n", "des": "Classes for configuring Spring REST Docs."}
{"index": 2482, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package startup;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.core.instrument.MeterRegistry.class) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class StartupTimeMetricsListenerAutoConfiguration extends Object; // Auto-configuration for startup time metrics.\n", "des": "Auto-configuration for actuator startup time metrics."}
{"index": 3601, "repo": "lucene-test-framework-9.7.0", "code": "package fst;\n\nClass FSTTester<T>; // Helper class to test FSTs.\nClass FSTTester.InputOutput<T>; // Holds one input/output pair.\n", "des": "Support for FST testing."}
{"index": 2626, "repo": "shiro-web-2.0.0-alpha-2", "code": "package filter;\n\npackage filter.authc; // Servlet Filter implementations specific to controlling access based on a subject's authentication status, or those that can execute authentications (log-ins) directly.\npackage filter.authz; // Servlet Filter implementations that perform authorization (access control) checks based on the Subject's abilities (for example, role or permission checks).\npackage filter.mgt; // The filter 'mgt' (management) package contains components used in managing Filters that are available for filter chain construction, the filter chains themselves, as well as resolving filter chains based by name.\npublic abstract class AccessControlFilter extends PathMatchingFilter; // Superclass for any filter that controls access to a resource and may redirect the user to the login page if they are not authenticated.\npublic class InvalidRequestFilter extends AccessControlFilter; // A request filter that blocks malicious requests.\npublic interface PathConfigProcessor; // A PathConfigProcessor processes configuration entries on a per path (url) basis.\npublic abstract class PathMatchingFilter extends AdviceFilter implements PathConfigProcessor; // Base class for Filters that will process only specified paths and allow all others to pass through.\n", "des": "Base package supporting all Servlet Filter implementations used to control access to web pages and URL resources."}
{"index": 22, "repo": "commons-collections4-4.4", "code": "package list;\n\nClass AbstractLinkedList<E>; // An abstract implementation of a linked list which provides numerous points for subclasses to override.\nClass AbstractLinkedList.LinkedListIterator<E>; // A list iterator over the linked list.\nClass AbstractLinkedList.LinkedSubList<E>; // The sublist implementation for AbstractLinkedList.\nClass AbstractLinkedList.LinkedSubListIterator<E>; // A list iterator over the linked sub list.\nClass AbstractLinkedList.Node<E>; // A node within the linked list.\nClass AbstractListDecorator<E>; // Decorates another List to provide additional behaviour.\nClass AbstractSerializableListDecorator<E>; // Serializable subclass of AbstractListDecorator.\nClass CursorableLinkedList<E>; // A List implementation with a ListIterator that allows concurrent modifications to the underlying list.\nClass CursorableLinkedList.Cursor<E>; // An extended ListIterator that allows concurrent changes to the underlying list.\nClass CursorableLinkedList.SubCursor<E>; // A cursor for the sublist based on LinkedSubListIterator.\nClass FixedSizeList<E>; // Decorates another List to fix the size preventing add/remove.\nClass GrowthList<E>; // Decorates another List to make it seamlessly grow when indices larger than the list size are used on add and set, avoiding most IndexOutOfBoundsExceptions.\nClass LazyList<E>; // Decorates another List to create objects in the list on demand.\nClass NodeCachingLinkedList<E>; // A List implementation that stores a cache of internal Node objects in an effort to reduce wasteful object creation.\nClass PredicatedList<E>; // Decorates another List to validate that all additions match a specified predicate.\nClass SetUniqueList<E>; // Decorates a List to ensure that no duplicates are present much like a Set.\nClass TransformedList<E>; // Decorates another List to transform objects that are added.\nClass TreeList<E>; // A List implementation that is optimised for fast insertions and removals at any index in the list.\nClass UnmodifiableList<E>; // Decorates another List to ensure it can't be altered.\n", "des": "This package contains implementations of the List interface."}
{"index": 3200, "repo": "tomcat-api-10.1", "code": "package disk;\n\nClass DiskFileItem; // The default implementation of the FileItem interface.\nClass DiskFileItemFactory; // The default FileItemFactory implementation.\n", "des": "A disk-based implementation of the FileItem interface."}
{"index": 1172, "repo": "commons-math3-3.6.1", "code": "package twod;\n\nClass Circle; // This class represents an oriented great circle on the 2-sphere.\nClass Edge; // Spherical polygons boundary edge.\nClass S2Point; // This class represents a point on the 2-sphere.\nClass Sphere2D; // This class implements a two-dimensional sphere (i.e.\nClass SphericalPolygonsSet; // This class represents a region on the 2-sphere: a set of spherical polygons.\nClass SubCircle; // This class represents a sub-hyperplane for Circle.\nClass Vertex; // Spherical polygons boundary vertex.\n", "des": "This package provides basic geometry components on the 2-sphere."}
{"index": 2372, "repo": "pulsar-client-api-3.0.0", "code": "package interceptor;\n\n@Public @Stable public interface ProducerInterceptor extends AutoCloseable; // A plugin interface that allows you to intercept (and possibly mutate) the messages received by the producer before they are published to the Pulsar brokers.\n@Private @Stable public class ProducerInterceptorWrapper extends Object implements ProducerInterceptor; // A wrapper for old style producer interceptor.\n", "des": "Pulsar interceptors."}
{"index": 641, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package exceptions;\n\nClass FederationPolicyException; // Generic policy exception.\nClass FederationPolicyInitializationException; // This exception is thrown when the initialization of a federation policy is not successful.\nClass NoActiveSubclustersException; // This exception is thrown when policies cannot locate any active cluster.\nClass UnknownSubclusterException; // This exception is thrown whenever a policy is given a SubClusterId that is unknown.\n", "des": "Exceptions for policies."}
{"index": 151, "repo": "ignite-core-2.15.0", "code": "package cache;\n\npackage cache.binary; // Implementation of binary processor.\npackage cache.persistence; // This package contain cache with persistence implementation.\nInterface CacheClassLoaderMarker; // It's a marker interface for detecting GridCacheDeploymentManager$CacheClassLoader.\nInterface CacheConfigurationSplitter; // Splits cache configuration into two parts that can be serialized, deserialized separately.\nInterface CacheConflictResolutionManager<K,V>; // Conflict resolver manager.\nInterface CacheEntryPredicate;\nInterface CacheEvictionManager;\nInterface CacheLockCandidates;\nInterface CacheObject;\nInterface CacheObjectValueContext; // Context to get value of cache object.\nInterface CachePartitionExchangeWorkerTask; // Cache partition exchange worker task marker interface.\nInterface CacheWeakQueryIteratorsHolder.WeakReferenceCloseableIterator<T>;\nInterface GridCacheAtomicFuture<R>; // Update future for atomic cache.\nInterface GridCacheConcurrentMap; // Concurrent cache map.\nInterface GridCacheDeployable; // Deployable cache message.\nInterface GridCacheEntryEx; // Internal API for cache entry ('Ex' stands for extended).\nInterface GridCacheFuture<R>; // This interface should be implemented by all distributed futures.\nInterface GridCacheInternal; // Marker interface using in cache implementations.\nInterface GridCacheLockCallback; // Lock and Unlock callbacks.\nInterface GridCacheManager<K,V>; // Interface for cache managers.\nInterface GridCacheMapEntryFactory; // Factory for cache entries.\nInterface GridCachePreloader; // Cache preloader that is responsible for loading cache entries either from remote nodes (for distributed cache) or anywhere else at cache startup.\nInterface GridCacheSharedManager<K,V>; // Cache manager shared across all caches.\nInterface GridCacheUtils.BackupPostProcessingClosure;\nInterface GridCacheVersionedFuture<T>; // Distributed future aware of lock version.\nInterface IgniteCacheExpiryPolicy; // Wrapper for ExpiryPolicy used to track information about cache entries whose time to live was modified after access.\nInterface IgniteCacheOffheapManager;\nInterface IgniteCacheOffheapManager.CacheDataStore;\nInterface IgniteCacheOffheapManager.OffheapInvokeClosure;\nInterface IgniteCacheProxy<K,V>; // Cache proxy.\nInterface IgniteInternalCache<K,V>; // This interface provides a rich API for working with distributed caches.\n", "des": "This package contain cache-related processors & persistence implementation."}
{"index": 2393, "repo": "spring-batch-core-5.0.2", "code": "package launch;\n\npackage launch.support; // Support classes for use in bootstrap and launch implementations or configurations.\npublic class JobExecutionNotFailedException extends JobExecutionException; // Checked exception to indicate that user asked for a job execution to be resumed when actually it didn't fail.\npublic class JobExecutionNotRunningException extends JobExecutionException; // Checked exception indicating that a JobExecution that is not currently running has been requested to stop.\npublic class JobExecutionNotStoppedException extends JobExecutionException; // Checked exception to indicate that user asked for a job execution to be aborted when hasn't been stopped.\npublic class JobInstanceAlreadyExistsException extends JobExecutionException; // Checked exception to indicate that a required Job is not available.\n@FunctionalInterface public interface JobLauncher; // Simple interface for controlling jobs, including possible ad-hoc executions, based on different runtime identifiers.\npublic interface JobOperator; // Low level interface for inspecting and controlling jobs with access only to primitive and collection types.\npublic class JobParametersNotFoundException extends JobExecutionException; // Checked exception to indicate that a required JobParametersIncrementer is not available.\npublic class NoSuchJobException extends JobExecutionException; // Checked exception to indicate that a required Job is not available.\npublic class NoSuchJobExecutionException extends JobExecutionException; // Checked exception to indicate that a required JobExecution is not available.\npublic class NoSuchJobInstanceException extends JobExecutionException; // Exception that signals that the user requested an operation on a non-existent JobInstance.\n", "des": "Interfaces and simple implementations of launch concerns."}
{"index": 1012, "repo": "spring-ws-3.0.10.RELEASE", "code": "package sax;\n\nClass AbstractXmlReader; // Abstract base class for SAX XMLReader implementations.\nClass SaxUtils; // Convenient utility methods for dealing with SAX.\n", "des": "Provides classes that help with SAX: the Simple API for XML."}
{"index": 3557, "repo": "guava-32.1.1-jre", "code": "package hash;\n\nInterface Funnel<T extends @Nullable java.lang.Object>; // An object which can send data from an object of type T into a PrimitiveSink.\nInterface Hasher; // A PrimitiveSink that can compute a hash code after reading the input.\nInterface HashFunction; // A hash function is a collision-averse pure function that maps an arbitrary block of data to a number called a hash code.\nInterface PrimitiveSink; // An object which can receive a stream of primitive values.\nClass BloomFilter<T extends @Nullable java.lang.Object>; // A Bloom filter for instances of T.\nClass Funnels; // Funnels for common types.\nClass HashCode; // An immutable hash code of arbitrary bit length.\nClass Hashing; // Static methods to obtain HashFunction instances, and other static hashing-related utilities.\nClass HashingInputStream; // An InputStream that maintains a hash of the data read from it.\nClass HashingOutputStream; // An OutputStream that maintains a hash of the data written to it.\n", "des": "Hash functions and related structures."}
{"index": 871, "repo": "calcite-core-1.34.0", "code": "package tools;\n\nInterface FrameworkConfig; // Interface that describes how to configure planning sessions generated using the Frameworks tools.\nInterface Frameworks.BasePrepareAction<R>; // Piece of code to be run in a context where a planner and statement are available.\nInterface Frameworks.PlannerAction<R>; // Piece of code to be run in a context where a planner is available.\nInterface Hoist.Config; // Configuration.\nInterface Planner; // A faÃ§ade that covers Calcite's query planning process: parse SQL, validate the parse tree, convert the parse tree to a relational expression, and optimize the relational expression.\nInterface Program; // Program that transforms a relational expression into another relational expression.\nInterface RelBuilder.AggCall; // Information necessary to create a call to an aggregate function.\nInterface RelBuilder.Config; // Configuration of RelBuilder.\nInterface RelBuilder.GroupKey; // Information necessary to create the GROUP BY clause of an Aggregate.\nInterface RelBuilder.OverCall; // Call to a windowed aggregate function.\nInterface RelBuilderFactory; // A partially-created RelBuilder.\nInterface RelRunner; // Runs a relational expression.\nInterface RuleSet; // A set rules associated with a particular type of invocation of the Planner.\nClass Frameworks; // Tools for invoking Calcite functionality without initializing a container / server first.\nClass Frameworks.ConfigBuilder; // A builder to help you build a FrameworkConfig using defaults where values aren't required.\nClass Frameworks.PrepareAction<R>;\nClass Hoist; // Utility that extracts constants from a SQL query.\nClass Hoist.Hoisted; // Result of hoisting.\nClass Hoist.Variable; // Variable.\nClass PigRelBuilder; // Extension to RelBuilder for Pig relational operators.\nClass Programs; // Utilities for creating Programs.\nClass RelBuilder; // Builder for relational expressions.\nClass RelRunners; // Implementations of RelRunner.\nClass RuleSets; // Utilities for creating and composing rule sets.\nEnum PigRelBuilder.GroupOption; // Option for performing group efficiently if data set is already sorted.\nClass RelConversionException; // An Exception thrown when attempting conversion to a set of RelNodes.\nClass ValidationException; // An Exception thrown when attempting to validate a SQL parse tree.\n", "des": "Provides utility classes."}
{"index": 728, "repo": "mina-core-3.0.0-M2", "code": "package nio;\n\nInterface RegistrationCallback; // To be used with NioSelectorLoop for being informed when the SelectionKey was created and registered.\nInterface SelectorListener; // Listen for selector events.\nInterface SelectorLoop;\nInterface SelectorLoopPool; // A pool of SelectorLoop\nClass AbstractNioSession; // Common ancestor for NIO based IoSession implmentation.\nClass FixedSelectorLoopPool; // A fixed size pool of SelectorLoop.\nClass NioSelectorLoop; // This class holds a Selector and handle all the incoming events for the sessions registered on this selector.ALl the events will be processed by some dedicated thread, taken from a pool.\nClass NioTcpClient; // This class implements a TCP NIO based client.\nClass NioTcpServer; // This class implements a TCP NIO based server.\nClass NioTcpSession; // A NIO based TCP session, should be used by NioTcpServer and NioTcpClient.\nClass NioUdpClient; // This class implements a UDP NIO based client.\nClass NioUdpServer; // This class implements a UDP NIO based server.\nClass NioUdpSession; // A UDP session based on NIO\nClass SslHelper; // An helper class used to manage everything related to SSL/TLS establishment and management.\n", "des": "Transport implementations base on NIO (New I/O), Channel"}
{"index": 3455, "repo": "hibernate-core-5.6.15.Final", "code": "package graph;\n\nInterface AttributeNode<J>; // Hibernate extension to the JPA entity-graph AttributeNode contract.\nInterface Graph<J>; // A container for AttributeNodes.\nInterface GraphNode<J>; // Commonality between AttributeNode and Graph.\nInterface RootGraph<J>; // Hibernate extension to the JPA EntityGraph contract.\nInterface SubGraph<J>; // Hibernate extension to the JPA entity-graph Subgraph contract.\nClass EntityGraphs; // A collection of EntityGraph utilities.\nClass GraphParser; // Parser for string representations of JPA EntityGraph (RootGraph) and Subgraph (SubGraph), using a simple syntax defined by the `graph.g` Antlr grammar.\nEnum GraphSemantic; // JPA defines 2 distinct semantics for applying an EntityGraph.\nClass CannotBecomeEntityGraphException; // Indicates an illegal attempt to make a Graph become an EntityGraph via Graph.makeRootGraph(String, boolean).\nClass CannotContainSubGraphException; // Indicates an attempt was made to add a (key)? sub-graph to an attribute type that does not support (key)? sub-graphs.\nClass InvalidGraphException; // Thrown by GraphParser to indicate textual entity graph representation parsing errors.\n", "des": "Hibernate's (extended) support for JPA's entity graphs"}
{"index": 3532, "repo": "opennlp-tools-2.2.0", "code": "package maxent;\n\npackage maxent.io; // Package related to the I/O functionality of the maxent package including reading and writing models in several formats.\npackage maxent.quasinewton; // Package related to ML by means of the Quasi Newton (QN) algorithm.\nInterface ContextGenerator<T>; // Represents a generator of contexts for maxent decisions.\nInterface DataStream; // An interface for objects which can deliver a stream of training data to be supplied to an EventStream.\nClass BasicContextGenerator; // A ContextGenerator implementation for maxent decisions, assuming that the input given to the BasicContextGenerator.getContext(String) method is a String containing contextual predicates separated by spaces, for instance:\nClass GISModel; // A maximum entropy model which has been trained using the Generalized Iterative Scaling (GIS) procedure.\nClass GISTrainer; // An implementation of Generalized Iterative Scaling (GIS).\nClass RealBasicEventStream; // Class for real-valued events as an event stream.\n", "des": "Package related to ML by means of the Maximum Entropy (ME) algorithm."}
{"index": 961, "repo": "spring-ws-3.0.10.RELEASE", "code": "package soap;\n\npackage soap.addressing; // Provides WS-Addressing implementation classes.\npackage soap.axiom; // AXis Object Model (AXIOM) support for Spring-WS' soap message infrastructure.\npackage soap.client; // Contains classes for SOAP-specific client-side Spring-WS support.\npackage soap.saaj; // SOAP with Attachments API for Java (SAAJ) support for Spring-WS soap message infrastructure.\npackage soap.security; // Provides WS-Security implementation classes.\npackage soap.server; // Contains classes for SOAP-specific server-side Spring-WS support.\npackage soap.soap11; // Contains interfaces specific to SOAP 1.1.\npackage soap.soap12; // Contains interfaces specific to SOAP 1.2.\npackage soap.support; // Classes supporting the org.springframework.ws.soap package.\nInterface SoapBody; // Represents the Body element in a SOAP message.\nInterface SoapElement; // The base interface for all elements that are contained in a SOAP message.\nInterface SoapEnvelope; // Represents the Envelope element in a SOAP message.\nInterface SoapFault; // Represents the Fault element in the body of a SOAP message.\nInterface SoapFaultDetail; // Represents the detail element in a SOAP fault.\nInterface SoapFaultDetailElement; // Represents the content for an individual SOAP detail entry in a SOAP Message.\nInterface SoapHeader; // Represents the Header element in a SOAP message.\nInterface SoapHeaderElement; // Represents the contents of an individual SOAP header in the a SOAP message.\nInterface SoapMessage; // Represents an abstraction for SOAP messages, providing access to a SOAP Envelope.\nInterface SoapMessageFactory; // Sub-interface of WebServiceMessageFactory which contains SOAP-specific properties and methods.\nInterface SoapVersion; // Interface that defines a specific version of the SOAP specification.\nClass AbstractSoapMessage; // Abstract implementation of the SoapMessage interface.\nClass SoapBodyException; // Exception thrown when a SOAP body could not be accessed.\nClass SoapElementException; // Exception thrown when a SOAP element could not be accessed.\nClass SoapEnvelopeException; // Exception thrown when a SOAP body could not be accessed.\nClass SoapFaultException; // Exception thrown when a SOAP fault could not be accessed.\n", "des": "Provides the SOAP functionality of the Spring Web Services framework."}
{"index": 2937, "repo": "groovy-4.0.13", "code": "package typehandling;\n\npublic final class BigDecimalMath extends NumberMath; // BigDecimal NumberMath operations\npublic final class BigIntegerMath extends NumberMath; // BigInteger NumberMath operations\npublic class DefaultTypeTransformation extends Object; // Class providing various type conversions, coercions and boxing/unboxing operations.\npublic final class FloatingPointMath extends NumberMath; // FloatingPoint (Double and Float) NumberMath operations\npublic class GroovyCastException extends ClassCastException;\npublic final class IntegerMath extends NumberMath; // Integer NumberMath operations\npublic final class LongMath extends NumberMath; // Long NumberMath operations\npublic abstract class NumberMath extends Object; // Stateless objects used to perform math on the various Number subclasses.\npublic class NumberMathModificationInfo extends Object;\npublic class ShortTypeHandling extends Object; // Class providing various short paths for type conversions.\n", "des": "Classes used to execute special actions based on the type."}
{"index": 1482, "repo": "tribuo-core-4.3.1", "code": "package metrics;\n\npublic interface EvaluationMetric<T extends Output<T>,C extends MetricContext<T>>; // A metric that can be calculated for the specified output type.\npublic static enum EvaluationMetric.Average extends Enum<EvaluationMetric.Average>; // Specifies what form of average to use for a EvaluationMetric.\npublic abstract class MetricContext<T extends Output<T>> extends Object; // The context for a metric or set of metrics.\npublic final class MetricID<T extends Output<T>> extends com.oracle.labs.mlrg.olcut.util.Pair<MetricTarget<T>,String>; // Just an easier-to-read alias for Pair<MetricTarget<T>, String>.\npublic class MetricTarget<T extends Output<T>> extends Object; // Used by a given EvaluationMetric to determine whether it should compute its value for a specific Output value or whether it should average them.\n", "des": "This package contains the infrastructure classes for building evaluation metrics."}
{"index": 3735, "repo": "lucene-queryparser-9.7.0", "code": "package parser;\n\nInterface EscapeQuerySyntax; // A parser needs to implement EscapeQuerySyntax to allow the QueryNode to escape the queries, when the toQueryString method is called.\nInterface SyntaxParser; // A parser needs to implement SyntaxParser interface\nEnum EscapeQuerySyntax.Type; // Type of escaping: String for escaping syntax, NORMAL for escaping reserved words (like AND) in terms\n", "des": "Necessary interfaces to implement text parsers."}
{"index": 1300, "repo": "groovy-all-4.0.13", "code": "package inspect;\n\npublic class Inspector extends Object; // The Inspector provides a unified access to an object's information that can be determined by introspection.\npublic static class Inspector.MemberComparator extends Object implements Comparator<Object>, Serializable;\npublic static class Inspector.MemberComparatorWithValue extends Object implements Comparator<Object>, Serializable;\n", "des": "Classes for inspecting object properties through introspection."}
{"index": 3530, "repo": "opennlp-tools-2.2.0", "code": "package log;\n\nClass LogPrintStream; // This class serves as an adapter for a Logger used within a PrintStream.\n", "des": "Package contains a PrintStream adapter for internal use only."}
{"index": 88, "repo": "ignite-core-2.15.0", "code": "package local;\n\nInterface LocalDeploymentSpiMBean; // Management MBean for LocalDeploymentSpi SPI.\nClass LocalDeploymentSpi; // Local deployment SPI that implements only within VM deployment on local node via LocalDeploymentSpi.register(ClassLoader, Class) method.\n", "des": "Contains default local deployment SPI implementation."}
{"index": 1337, "repo": "groovy-all-4.0.13", "code": "package runtime;\n\npackage runtime.metaclass; // Internal classes related to Groovy's metaclass implementation.\npackage runtime.typehandling; // Classes used to execute special actions based on the type.\npackage runtime.wrappers; // Groovy wrapper classes for primitive types.\npublic abstract class AbstractComparator<T> extends Object implements Comparator<T>;\npublic class ArrayTypeUtils extends Object; // Utilities for handling array types\npublic class ArrayUtil extends Object; // This is a generated class used internally during the writing of bytecode within the CallSiteWriter logic.\npublic class BytecodeInterface8 extends Object; // This class contains methods special to optimizations used directly from bytecode in Groovy 1.8\npublic final class ComposedClosure<V> extends Closure<V>; // A wrapper for Closure to support composition.\npublic abstract class ConversionHandler extends Object implements InvocationHandler, Serializable; // This class is a general adapter to map a call to a Java interface to a given delegate.\npublic class ConvertedClosure extends ConversionHandler implements Serializable; // This class is a general adapter to adapt a closure to any Java interface.\npublic class ConvertedMap extends ConversionHandler; // This class is a general adapter to adapt a map of closures to any Java interface.\npublic final class CurriedClosure<V> extends Closure<V>; // A wrapper for Closure to support currying.\npublic class DefaultCachedMethodKey extends MethodKey; // A default implementation of MethodKey\npublic class DefaultGroovyMethods extends DefaultGroovyMethodsSupport; // This class defines new groovy methods which appear on normal JDK classes inside the Groovy environment.\npublic class DefaultGroovyMethodsSupport extends Object; // Support methods for DefaultGroovyMethods and PluginDefaultMethods.\npublic class DefaultGroovyStaticMethods extends Object; // This class defines all the new static groovy methods which appear on normal JDK classes inside the Groovy environment.\npublic class DefaultMethodKey extends MethodKey; // A default implementation of MethodKey\npublic class EncodingGroovyMethods extends Object; // This class defines all the encoding/decoding groovy methods which enhance the normal JDK classes when inside the Groovy environment.\npublic class EncodingGroovyMethodsSupport extends Object; // Keep this constant in a separate file as it is troublesome for Antlr to parse for doc purposes.\npublic class FlushingStreamWriter extends OutputStreamWriter; // Stream writer which flushes after each write operation.\npublic class FormatHelper extends Object; // Formatting methods\n", "des": "Runtime classes for Groovy - whether the dynamic interpreter is being used, the compiler or the bytecode generator."}
{"index": 1251, "repo": "spring-core-6.0.11", "code": "package aot;\n\npackage aot.generate; // Support classes for components that contribute generated code equivalent to a runtime behavior.\npackage aot.hint; // Support for registering the need for reflection, resources, java serialization and proxies at runtime.\npackage aot.nativex; // Support for generating GraalVM native configuration from runtime hints.\npublic abstract class AotDetector extends Object; // Utility for determining if AOT-processed optimizations must be used rather than the regular runtime.\n", "des": "Core package for Spring AOT infrastructure."}
{"index": 3232, "repo": "commons-release-plugin-1.8.1", "code": "package velocity;\n\nClass HeaderHtmlVelocityDelegate; // This class' purpose is to generate the HEADER.html that moves along with the release for the sake of downloading the release from the distribution area.\nClass HeaderHtmlVelocityDelegate.HeaderHtmlVelocityDelegateBuilder; // A builder class for instantiation of the HeaderHtmlVelocityDelegate.\nClass ReadmeHtmlVelocityDelegate; // This class' purpose is to generate the README.html that moves along with the release for the sake of downloading the release from the distribution area.\nClass ReadmeHtmlVelocityDelegate.ReadmeHtmlVelocityDelegateBuilder; // A builder class for instantiation of the ReadmeHtmlVelocityDelegate.\n", "des": "Contains classes that take our velocity templates and render's them to a Writer class."}
{"index": 3766, "repo": "lucene-analysis-common-9.7.0", "code": "package ca;\n\nClass CatalanAnalyzer; // Analyzer for Catalan.\n", "des": "Analyzer for Catalan."}
{"index": 1901, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package batch;\n\n@AutoConfiguration(after={HibernateJpaAutoConfiguration.class,TransactionAutoConfiguration.class}) @ConditionalOnClass({org.springframework.batch.core.launch.JobLauncher.class,javax.sql.DataSource.class,org.springframework.jdbc.datasource.init.DatabasePopulator.class}) @ConditionalOnBean({javax.sql.DataSource.class,org.springframework.transaction.PlatformTransactionManager.class}) @ConditionalOnMissingBean(value=org.springframework.batch.core.configuration.support.DefaultBatchConfiguration.class, annotation=org.springframework.batch.core.configuration.annotation.EnableBatchProcessing.class) @EnableConfigurationProperties(BatchProperties.class) @Import(org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer.class) public class BatchAutoConfiguration extends Object; // Auto-configuration for Spring Batch.\n@FunctionalInterface public interface BatchConversionServiceCustomizer; // Callback interface that can be implemented by beans wishing to customize the ConfigurableConversionService that is provided by DefaultBatchConfiguration while retaining its default auto-configuration.\n@Target({FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Qualifier public @interface BatchDataSource; // Qualifier annotation for a DataSource to be injected into Batch auto-configuration.\npublic class BatchDataSourceScriptDatabaseInitializer extends org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer; // DataSourceScriptDatabaseInitializer for the Spring Batch database.\n@ConfigurationProperties(prefix=\"spring.batch\") public class BatchProperties extends Object; // Configuration properties for Spring Batch.\npublic static class BatchProperties.Jdbc extends Object;\npublic static class BatchProperties.Job extends Object;\npublic class JobExecutionEvent extends org.springframework.context.ApplicationEvent; // Spring ApplicationEvent encapsulating a JobExecution.\npublic class JobExecutionExitCodeGenerator extends Object implements org.springframework.context.ApplicationListener<JobExecutionEvent>, org.springframework.boot.ExitCodeGenerator; // ExitCodeGenerator for JobExecutionEvents.\npublic class JobLauncherApplicationRunner extends Object implements org.springframework.boot.ApplicationRunner, org.springframework.core.Ordered, org.springframework.context.ApplicationEventPublisherAware; // ApplicationRunner to launch Spring Batch jobs.\n", "des": "Auto-configuration for Spring Batch."}
{"index": 632, "repo": "freemarker-2.3.32", "code": "package template;\n\npackage template.utility; // Various classes used by core FreeMarker code but might be useful outside of it too.\nInterface AdapterTemplateModel; // A TemplateModel that can be unwrapped and then it considers a provided desired (hint) class.\nInterface AttemptExceptionReporter; // Used for the attempt_exception_reported configuration setting.\nInterface ObjectWrapper; // Maps Java objects to the type-system of FreeMarker Template Language (see the TemplateModel interfaces).\nInterface ObjectWrapperAndUnwrapper; // Experimental - subject to change: Adds functionality to ObjectWrapper that creates a plain Java object from a TemplateModel.\nInterface TemplateBooleanModel; // \"boolean\" template language data type; same as in Java; either true or false.\nInterface TemplateCollectionModel; // \"collection\" template language data type: a collection of values that can be enumerated, but can't be or not meant to be accessed by index or key, nor the number of elements in it is known.\nInterface TemplateCollectionModelEx; // \"collection\" template language data type: Adds size/emptiness querybility to TemplateCollectionModel.\nInterface TemplateDateModel; // \"date\", \"time\" and \"date-time\" template language data types: corresponds to Date.\nInterface TemplateDirectiveBody; // Represents the nested content of a directive (TemplateDirectiveModel) invocation.\nInterface TemplateDirectiveModel; // \"directive\" template language data type: used as user-defined directives (much like macros) in templates.\nInterface TemplateExceptionHandler; // Used for the template_exception_handler configuration setting.\nInterface TemplateHashModel; // \"hash\" template language data type: an object that contains other objects accessible through string keys (sub-variable names).\nInterface TemplateHashModelEx; // \"extended hash\" template language data type; extends TemplateHashModel by allowing iterating through its keys and values.\nInterface TemplateHashModelEx2; // Adds key-value pair listing capability to TemplateHashModelEx.\nInterface TemplateHashModelEx2.KeyValuePair; // A key-value pair in a hash; used for TemplateHashModelEx2.KeyValuePairIterator.\nInterface TemplateHashModelEx2.KeyValuePairIterator; // Iterates over the key-value pairs in a hash.\nInterface TemplateMethodModel; // Use TemplateMethodModelEx instead.\n", "des": "The fundamental, most commonly used API-s of FreeMarker; start with Configuration (see also the Getting Started in the Manual.)"}
{"index": 578, "repo": "commons-collections-3.2.2", "code": "package collection;\n\nInterface CompositeCollection.CollectionMutator; // Pluggable strategy to handle changes to the composite.\nClass AbstractCollectionDecorator; // Decorates another Collection to provide additional behaviour.\nClass AbstractSerializableCollectionDecorator; // Serializable subclass of AbstractCollectionDecorator.\nClass CompositeCollection; // Decorates a collection of other collections to provide a single unified view.\nClass PredicatedCollection; // Decorates another Collection to validate that additions match a specified predicate.\nClass SynchronizedCollection; // Decorates another Collection to synchronize its behaviour for a multi-threaded environment.\nClass TransformedCollection; // Decorates another Collection to transform objects that are added.\nClass TypedCollection; // Decorates a Collection to validate that elements added are of a specific type.\nClass UnmodifiableBoundedCollection; // UnmodifiableBoundedCollection decorates another BoundedCollection to ensure it can't be altered.\nClass UnmodifiableCollection; // Decorates another Collection to ensure it can't be altered.\n", "des": "This package contains implementations of the Collection interface."}
{"index": 665, "repo": "commons-lang3-3.12.0", "code": "package compare;\n\nClass ComparableUtils; // Utility library to provide helper methods for translating Comparable.compareTo(T) result into a boolean.\nClass ComparableUtils.ComparableCheckBuilder<A extends Comparable<A>>; // Provides access to the available methods\nClass ObjectToStringComparator; // Compares Object's Object.toString() values.\n", "des": "Provides classes to work with the Comparable and Comparator interfaces."}
{"index": 2739, "repo": "spring-batch-infrastructure-5.0.2", "code": "package validator;\n\npublic class BeanValidatingItemProcessor<T> extends ValidatingItemProcessor<T>; // A ValidatingItemProcessor that uses the Bean Validation API (JSR-303) to validate items.\npublic class SpringValidator<T> extends Object implements Validator<T>, org.springframework.beans.factory.InitializingBean; // Adapts the Validator interface to Validator.\npublic class ValidatingItemProcessor<T> extends Object implements ItemProcessor<T,T>, org.springframework.beans.factory.InitializingBean; // Simple implementation of ItemProcessor that validates input and returns it without modifications.\npublic class ValidationException extends ItemReaderException; // This exception should be thrown when there are validation errors.\npublic interface Validator<T>; // Interface used to validate objects.\n", "des": "Infrastructure implementations of item validator concerns."}
{"index": 1847, "repo": "spring-test-6.0.11", "code": "package support;\n\npublic abstract class AbstractContextLoader extends Object implements SmartContextLoader; // Abstract application context loader that provides a basis for all concrete implementations of the ContextLoader SPI.\npublic abstract class AbstractDelegatingSmartContextLoader extends Object implements AotContextLoader; // AbstractDelegatingSmartContextLoader serves as an abstract base class for implementations of the SmartContextLoader SPI that delegate to a set of candidate SmartContextLoaders (i.e., one that supports XML configuration files or Groovy scripts and one that supports annotated classes) to determine which context loader is appropriate for a given test class's configuration.\npublic abstract class AbstractDirtiesContextTestExecutionListener extends AbstractTestExecutionListener; // Abstract base class for TestExecutionListener implementations that provide support for marking the ApplicationContext associated with a test as dirty for both test classes and test methods annotated with the @DirtiesContext annotation.\npublic abstract class AbstractGenericContextLoader extends AbstractContextLoader implements AotContextLoader; // Abstract, generic extension of AbstractContextLoader that loads a GenericApplicationContext.\npublic abstract class AbstractTestContextBootstrapper extends Object implements TestContextBootstrapper; // Abstract implementation of the TestContextBootstrapper interface which provides most of the behavior required by a bootstrapper.\npublic abstract class AbstractTestExecutionListener extends Object implements TestExecutionListener, org.springframework.core.Ordered; // Abstract ordered implementation of the TestExecutionListener API.\npublic class AnnotationConfigContextLoader extends AbstractGenericContextLoader; // Concrete implementation of AbstractGenericContextLoader that loads bean definitions from component classes.\npublic abstract class AnnotationConfigContextLoaderUtils extends Object; // Utility methods for SmartContextLoaders that deal with component classes (e.g., @Configuration classes).\npublic class DefaultActiveProfilesResolver extends Object implements ActiveProfilesResolver; // Default implementation of the ActiveProfilesResolver strategy that resolves active bean definition profiles based solely on profiles configured declaratively via ActiveProfiles.profiles() or ActiveProfiles.value().\npublic class DefaultBootstrapContext extends Object implements BootstrapContext; // Default implementation of the BootstrapContext interface.\npublic class DefaultTestContext extends Object implements TestContext; // Default implementation of the TestContext interface.\npublic class DefaultTestContextBootstrapper extends AbstractTestContextBootstrapper; // Default implementation of the TestContextBootstrapper SPI.\n", "des": "Support classes for the Spring TestContext Framework."}
{"index": 1146, "repo": "commons-math3-3.6.1", "code": "package integration;\n\npackage integration.gauss; // Gauss family of quadrature schemes.\nInterface UnivariateIntegrator; // Interface for univariate real integration algorithms.\nClass BaseAbstractUnivariateIntegrator; // Provide a default implementation for several generic functions.\nClass IterativeLegendreGaussIntegrator; // This algorithm divides the integration interval into equally-sized sub-interval and on each of them performs a Legendre-Gauss quadrature.\nClass LegendreGaussIntegrator; // As of 3.1 (to be removed in 4.0).\nClass MidPointIntegrator; // Implements the Midpoint Rule for integration of real univariate functions.\nClass RombergIntegrator; // Implements the Romberg Algorithm for integration of real univariate functions.\nClass SimpsonIntegrator; // Implements Simpson's Rule for integration of real univariate functions.\nClass TrapezoidIntegrator; // Implements the Trapezoid Rule for integration of real univariate functions.\n", "des": "Numerical integration (quadrature) algorithms for univariate real functions."}
{"index": 1643, "repo": "jena-core-4.9.0", "code": "package enhanced;\n\npublic class AlreadyLinkedViewException extends JenaException; // Exception to throw when adding a view to a Polymorphic discovers that the view to add is already on a ring.\npublic class BuiltinPersonalities extends Object; // The personalities that are provided for the existing Jena classes.\npublic class EnhGraph extends Object; // EnhGraph wraps a plain graph and contains enhanced nodes that wrap the plain nodes of the plain graph.\npublic class EnhNode extends Polymorphic<RDFNode> implements FrontsNode; // A specialisation of Polymorphic that models an extended node in a an extended graph.\npublic class GraphPersonality extends Personality<RDFNode>; // Personalities for Graphs.\npublic abstract class Implementation extends Object; // Interface defining a generic factory interface for generating enhanced nodes from normal graph nodes.\npublic class NodePersonality extends Personality<RDFNode>; // Personalities for nodes.\npublic class Personality<T> extends Object; // Defines a set of permitted mappings from [interface] Class objects to Implementation factories that can generate instances of the facet represented by the Class.\npublic class PersonalityConfigException extends RuntimeException; // Exception denoting that a personality is misconfigured in some way.\npublic abstract class Polymorphic<T> extends Object; // Abstract base class for all polymorphic RDF objects, especially enhanced node and enhanced graph.\npublic class UnsupportedPolymorphismException extends JenaException; // Exception to throw if an enhanced graph does not support polymorphism to a specific class.\n", "des": "This package defines the enhanced node and graph classes; an enhanced node is one embedded in a particular enhanced graph."}
{"index": 3500, "repo": "poi-5.2.3", "code": "package dev;\n\nInterface POIFSViewable; // Interface for a drill-down viewable object.\nClass POIFSDump; // Dump internal structure of a OLE2 file into file system\nClass POIFSLister; // A lister of the entries in POIFS files.\nClass POIFSViewEngine; // This class contains methods used to inspect POIFSViewable objects\nClass POIFSViewer; // A simple viewer for POIFS files\n", "des": "DEV package serves two purposes."}
{"index": 564, "repo": "hadoop-common-3.3.4", "code": "package filter;\n\nClass GlobFilter; // A glob pattern filter for metrics.\nClass RegexFilter; // A regex pattern filter for metrics\n", "des": "Builtin metrics filters (to be used in metrics config files)"}
{"index": 2095, "repo": "spring-webflux-6.0.11", "code": "package support;\n\npublic class ClientResponseWrapper extends Object implements ClientResponse; // Implementation of the ClientResponse interface that can be subclassed to adapt the request in a exchange filter function.\npublic static class ClientResponseWrapper.HeadersWrapper extends Object implements ClientResponse.Headers; // Implementation of the Headers interface that can be subclassed to adapt the headers in a exchange filter function.\npublic final class WebClientAdapter extends Object implements org.springframework.web.service.invoker.HttpClientAdapter; // HttpClientAdapter that enables an HttpServiceProxyFactory to use WebClient for request execution.\n", "des": "Classes supporting the org.springframework.web.reactive.function.client package."}
{"index": 2276, "repo": "spring-data-elasticsearch-5.1.2", "code": "package erhlc;\n\n@Deprecated public abstract class AbstractElasticsearchConfiguration extends ElasticsearchConfigurationSupport;\n@Deprecated public abstract class AbstractReactiveElasticsearchConfiguration extends ElasticsearchConfigurationSupport;\n@Deprecated public class DefaultReactiveClusterOperations extends Object implements ReactiveClusterOperations;\n@Deprecated public class DefaultReactiveElasticsearchClient extends Object implements ReactiveElasticsearchClient, ReactiveElasticsearchClient.Indices, ReactiveElasticsearchClient.Cluster;\n@Deprecated public final class DocumentAdapters extends Object;\n@Deprecated public class ElasticsearchAggregation extends Object implements AggregationContainer<org.elasticsearch.search.aggregations.Aggregation>;\n@Deprecated public class ElasticsearchAggregations extends Object implements AggregationsContainer<org.elasticsearch.search.aggregations.Aggregations>;\n@Deprecated public class ElasticsearchClusterOperations extends Object;\n@Deprecated public class ElasticsearchExceptionTranslator extends Object implements PersistenceExceptionTranslator;\n@Deprecated public class ElasticsearchRestTemplate extends AbstractElasticsearchTemplate;\n@FunctionalInterface public static interface ElasticsearchRestTemplate.ClientCallback<T>; // Callback interface to be used with ElasticsearchRestTemplate.execute(ClientCallback) for operating directly on RestHighLevelClient.\n@Deprecated public class HighlightQueryBuilder extends Object;\n@Deprecated public interface HostProvider<T extends HostProvider<T>>;\npublic static class HostProvider.ClusterInformation extends Object; // Value object accumulating information about an Elasticsearch cluster.\npublic static enum HostProvider.Verification extends Enum<HostProvider.Verification>; // HostProvider.Verification allows to influence the lookup strategy for active hosts.\n@Deprecated public class NamedXContents extends Object;\n@Deprecated public class NativeSearchQuery extends BaseQuery;\n@Deprecated public class NativeSearchQueryBuilder extends BaseQueryBuilder<NativeSearchQuery,NativeSearchQueryBuilder>;\n@Deprecated public interface ReactiveElasticsearchClient;\npublic static interface ReactiveElasticsearchClient.Cluster; // Encapsulation of methods for accessing the Cluster API.\npublic static interface ReactiveElasticsearchClient.Indices; // Encapsulation of methods for accessing the Indices API.\npublic static interface ReactiveElasticsearchClient.ReactiveElasticsearchClientCallback<T>; // Low level callback interface operating upon WebClient to send commands towards elasticsearch.\npublic static interface ReactiveElasticsearchClient.Status; // Cumulative client ElasticsearchHost information.\n@Deprecated public class ReactiveElasticsearchTemplate extends AbstractReactiveElasticsearchTemplate;\n@Deprecated public final class ReactiveRestClients extends Object;\n", "des": "This package contains classes that use the old Elasticsearch 7 libraries to access Elasticsearch either directly by using the RestHighLevelClient or indirectly by using code copied from Elasticsearch libraries (reactive implementation)."}
{"index": 341, "repo": "hadoop-hdfs-3.3.6", "code": "package protocolPB;\n\nClass DatanodeProtocolServerSideTranslatorPB;\nClass NamenodeProtocolServerSideTranslatorPB; // Implementation for protobuf service that forwards requests received on NamenodeProtocolPB to the NamenodeProtocol server implementation.\nClass PBHelper; // Utilities for converting protobuf classes to and from implementation classes and other helper utilities to help in dealing with protobuf.\nClass ReconfigurationProtocolServerSideTranslatorPB; // This class is used on the server side.\nClass ReconfigurationProtocolServerSideUtils; // This is a server side utility class that handles common logic to to parameter reconfiguration.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 2168, "repo": "wicket-core-10.0.0-M1", "code": "package tester;\n\npublic class BaseWicketTester extends Object; // A helper class to ease unit testing of Wicket applications without the need for a servlet container.\npublic static class BaseWicketTester.StartComponentInPage extends WebPage; // A page that is used as the automatically created page for BaseWicketTester.startComponentInPage(Class) and the other variations.\npublic final class DiffUtil extends Object; // This is a utility class.\npublic class DummyHomePage extends WebPage; // A dummy home page, as required by WicketTester.\npublic class DummyPanelPage extends WebPage; // A dummy Panel Component.\npublic class FormTester extends Object; // A helper class for testing validation and submission of FormComponents.\npublic class Result extends Object; // A Result class.\npublic class TagTester extends Object; // Tag tester is used to test that a generated markup tag contains the correct attributes, values etc.\npublic abstract class WicketTestCase extends Object; // Base class for tests which require comparing wicket response with a file.\npublic class WicketTester extends BaseWicketTester; // A helper class to ease unit testing of Wicket applications without the need for a servlet container.\npublic class WicketTesterExtension extends Object implements org.junit.jupiter.api.extension.BeforeTestExecutionCallback, org.junit.jupiter.api.extension.AfterTestExecutionCallback, org.junit.jupiter.api.extension.TestExecutionExceptionHandler; // Manages WicketTester instance\npublic class WicketTesterHelper extends Object; // A WicketTester-specific helper class.\npublic static class WicketTesterHelper.ComponentData extends Object implements org.apache.wicket.util.io.IClusterable; // ComponentData class.\n", "des": "A package with utility classes to ease unit testing of Wicket applications without the need for a servlet container."}
{"index": 95, "repo": "ignite-core-2.15.0", "code": "package multicast;\n\nClass TcpDiscoveryMulticastIpFinder; // Multicast-based IP finder.\n", "des": "Contains multicast-based IP finder."}
{"index": 382, "repo": "mahout-core-14.1", "code": "package engine;\n\nClass MersenneTwister; // MersenneTwister (MT19937) is one of the strongest uniform pseudo-random number generators known so far; at the same time it is quick.\nClass RandomEngine; // Abstract base class for uniform pseudo-random number generating engines.\n", "des": "Engines generating strong uniformly distributed pseudo-random numbers; Needed by all JET probability distributions since they rely on uniform random numbers to generate random numbers from their own distribution."}
{"index": 3151, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package sql;\n\nInterface SqlTypeDescriptor; // Descriptor for the SQL/JDBC side of a value mapping.\nClass BasicBinder<J>; // Convenience base implementation of ValueBinder\nClass BasicExtractor<J>; // Convenience base implementation of ValueExtractor\nClass BigIntTypeDescriptor; // Descriptor for BIGINT handling.\nClass BinaryTypeDescriptor; // Descriptor for BINARY handling.\nClass BitTypeDescriptor; // Descriptor for BIT handling.\nClass BlobTypeDescriptor; // Descriptor for BLOB handling.\nClass BooleanTypeDescriptor; // Descriptor for BOOLEAN handling.\nClass CharTypeDescriptor; // Descriptor for CHAR handling.\nClass ClobTypeDescriptor; // Descriptor for CLOB handling.\nClass DateTypeDescriptor; // Descriptor for DATE handling.\nClass DecimalTypeDescriptor; // Descriptor for DECIMAL handling.\nClass DoubleTypeDescriptor; // Descriptor for DOUBLE handling.\nClass FloatTypeDescriptor; // Descriptor for FLOAT handling.\nClass IntegerTypeDescriptor; // Descriptor for INTEGER handling.\nClass JdbcTypeFamilyInformation; // Information pertaining to JDBC type families.\nClass JdbcTypeJavaClassMappings; // Maintains the JDBC recommended mappings for JDBC type-code to/from Java Class as defined in _Appendix B : Data Type Conversion Tables_ of the _JDBC 4.0 Specification_ Eventually, the plan is to have Dialect and DatabaseMetaData.getTypeInfo() contribute this information.\nClass LobTypeMappings;\nClass LongNVarcharTypeDescriptor; // Descriptor for LONGNVARCHAR handling.\nClass LongVarbinaryTypeDescriptor; // Descriptor for LONGVARBINARY handling.\nClass LongVarcharTypeDescriptor; // Descriptor for LONGVARCHAR handling.\nClass NationalizedTypeMappings; // Manages a mapping between nationalized and non-nationalized variants of JDBC types.\nClass NCharTypeDescriptor; // Descriptor for NCHAR handling.\nClass NClobTypeDescriptor; // Descriptor for NCLOB handling.\nClass NumericTypeDescriptor; // Descriptor for NUMERIC handling.\nClass NVarcharTypeDescriptor; // Descriptor for NVARCHAR handling.\nClass RealTypeDescriptor; // Descriptor for REAL handling.\nClass SmallIntTypeDescriptor; // Descriptor for SMALLINT handling.\nClass SqlTypeDescriptorRegistry;\nClass SqlTypeDescriptorRegistry.ObjectSqlTypeDescriptor;\nClass TimestampTypeDescriptor; // Descriptor for TIMESTAMP handling.\nClass TimeTypeDescriptor; // Descriptor for TIME handling.\n", "des": "Defines handling of the standard JDBC-defined types."}
{"index": 1500, "repo": "wicket-extensions-10.0.0-M1", "code": "package wizard;\n\npublic abstract class AbstractWizardModel extends Object implements IWizardModel; // Abstract wizard model that provides an implementation for handling wizard model listeners and provides base implementations of many methods.\npublic class AjaxWizardButtonBar extends WizardButtonBar; // A bar of buttons for wizards utilizing AjaxFormSubmitBehavior.\npublic class CancelButton extends WizardButton; // Models a cancel button in the wizard.\npublic class FinishButton extends WizardButton; // Models a cancel button in the wizard.\npublic interface IWizard extends org.apache.wicket.util.io.IClusterable; // Interface for the wizard component.\npublic interface IWizardModel extends org.apache.wicket.util.io.IClusterable; // This interface defines the model for wizards.\npublic interface IWizardModelListener extends org.apache.wicket.util.io.IClusterable; // Receives notifications for wizard model state changes.\npublic interface IWizardStep extends org.apache.wicket.util.io.IClusterable; // Models one step in a wizard, and is the equivalent of one panel in a wizard from an end-user's perspective.\npublic class LastButton extends WizardButton; // Models a 'last' button in the wizard.\npublic class NextButton extends WizardButton; // Models a next button in the wizard.\npublic class PreviousButton extends WizardButton; // Models a previous button in the wizard.\npublic class StaticContentStep extends WizardStep; // A wizard step that displays the provided static content without expecting any input.\npublic class Wizard extends org.apache.wicket.markup.html.panel.Panel implements IWizardModelListener, IWizard; // A wizard is a dialog component that takes users through a number of steps to complete a task.\npublic abstract class WizardButton extends org.apache.wicket.markup.html.form.Button; // Base class for buttons that work with the wizard component.\npublic class WizardButtonBar extends org.apache.wicket.markup.html.panel.Panel; // The default bar of button components for wizards.\npublic class WizardModel extends AbstractWizardModel; // Default implementation of IWizardModel, which models a semi-static wizard.\n", "des": "Package for working with Wizard components."}
{"index": 1346, "repo": "spring-integration-kafka-6.1.2", "code": "package channel;\n\npublic abstract class AbstractKafkaChannel extends org.springframework.integration.channel.AbstractMessageChannel; // Abstract MessageChannel backed by an Apache Kafka topic.\npublic class PollableKafkaChannel extends AbstractKafkaChannel implements org.springframework.messaging.PollableChannel, org.springframework.integration.channel.ExecutorChannelInterceptorAware; // Pollable channel backed by an Apache Kafka topic.\npublic class PublishSubscribeKafkaChannel extends SubscribableKafkaChannel implements org.springframework.integration.channel.BroadcastCapableChannel; // Publish/subscribe channel backed by an Apache Kafka topic.\npublic class SubscribableKafkaChannel extends AbstractKafkaChannel implements org.springframework.messaging.SubscribableChannel, org.springframework.integration.support.management.ManageableSmartLifecycle; // Subscribable channel backed by an Apache Kafka topic.\n", "des": "Provides classes related to message channel implementations for Apache Kafka."}
{"index": 535, "repo": "commons-vfs2-2.9.0", "code": "package url;\n\nClass UrlFileName; // A URL FileName.\nClass UrlFileNameParser; // Implementation for any java.net.url based file system.\nClass UrlFileObject; // A FileObject implementation backed by a URL.\nClass UrlFileProvider; // A file provider backed by Java's URL API.\nClass UrlFileSystem; // A File system backed by Java's URL API.\n", "des": "The Default File Provider, which wraps java.net.URL."}
{"index": 1353, "repo": "spring-integration-stream-6.1.2", "code": "package config;\n\npublic class ConsoleInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Parser for the <stdin-channel-adapter> element.\npublic class ConsoleOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the \"stdout-\" and \"stderr-channel-adapter\" elements.\npublic class StreamNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler;\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 2748, "repo": "spring-batch-infrastructure-5.0.2", "code": "package interceptor;\n\npublic class RepeatOperationsInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor; // A MethodInterceptor that can be used to automatically repeat calls to a method on a service.\n", "des": "Infrastructure implementations of repeat aop concerns."}
{"index": 1741, "repo": "spring-batch-integration-5.0.2", "code": "package annotation;\n\n@Configuration(proxyBeanMethods=false) public class BatchIntegrationConfiguration extends Object implements org.springframework.beans.factory.InitializingBean; // Base configuration class for Spring Batch Integration factory beans.\n@Target(TYPE) @Retention(RUNTIME) @Documented @EnableIntegration @Import(BatchIntegrationConfiguration.class) public @interface EnableBatchIntegration; // Enable Spring Batch Integration features and provide a base configuration for setting up remote chunking or partitioning infrastructure beans.\n", "des": "APIs for the configuration of Spring Integration components through annotations."}
{"index": 1872, "repo": "shiro-core-2.0.0-alpha-2", "code": "package authc;\n\npackage authc.credential; // Support for validating credentials (such as passwords or X509 certificates) during authentication via the CredentialsMatcher interface and its supporting implementations.\npackage authc.pam; // Support for PAM, or Pluggable Authentication Modules, which is the capability to authenticate a user against multiple configurable (pluggable) modules (Shiro calls these Realms).\npublic abstract class AbstractAuthenticator extends Object implements Authenticator, LogoutAware; // Superclass for almost all Authenticator implementations that performs the common work around authentication attempts.\npublic interface Account extends AuthenticationInfo, AuthorizationInfo; // An Account is a convenience interface that extends both AuthenticationInfo and AuthorizationInfo and represents authentication and authorization for a single account in a single Realm.\npublic class AccountException extends AuthenticationException; // Exception thrown due to a problem with the account under which an authentication attempt is being executed.\npublic class AuthenticationException extends org.apache.shiro.lang.ShiroException; // General exception thrown due to an error during the Authentication process.\npublic interface AuthenticationInfo extends Serializable; // AuthenticationInfo represents a Subject's (aka user's) stored account information relevant to the authentication/log-in process only.\npublic interface AuthenticationListener; // An AuthenticationListener listens for notifications while Subjects authenticate with the system.\npublic interface AuthenticationToken extends Serializable; // An AuthenticationToken is a consolidation of an account's principals and supporting credentials submitted by a user during an authentication attempt.\npublic interface Authenticator; // An Authenticator is responsible for authenticating accounts in an application.\npublic class BearerToken extends Object implements HostAuthenticationToken; // A AuthenticationToken that contains an a Bearer token or API key, typically received via an HTTP Authorization header.\npublic class ConcurrentAccessException extends AccountException; // Thrown when an authentication attempt has been received for an account that has already been authenticated (i.e.\npublic class CredentialsException extends AuthenticationException; // Exception thrown due to a problem with the credential(s) submitted for an account during the authentication process.\npublic class DisabledAccountException extends AccountException; // Thrown when attempting to authenticate and the corresponding account has been disabled for some reason.\npublic class ExcessiveAttemptsException extends AccountException; // Thrown when a system is configured to only allow a certain number of authentication attempts over a period of time and the current session has failed to authenticate successfully within that number.\n", "des": "Core interfaces and exceptions concerning Authentication (the act of logging-in)."}
{"index": 142, "repo": "ignite-core-2.15.0", "code": "package encryption;\n\nInterface EncryptionCacheKeyProvider; // Provider for cache's encryption keys.\nClass CacheGroupPageScanner; // Cache group page stores scanner.\nClass ChangeCacheEncryptionRequest; // Change cache group encryption key request.\nClass EncryptionMXBeanImpl; // Encryption features MBean.\nClass GenerateEncryptionKeyRequest; // Generate encryption key request.\nClass GenerateEncryptionKeyResponse; // Generate encryption key response.\nClass GridEncryptionManager; // Manages cache keys and EncryptionSpi instances.\nClass GridEncryptionManager.EmptyResult;\nClass GridEncryptionManager.KeyChangeFuture; // Key change future.\nClass GridEncryptionManager.NodeEncryptionKeys;\nClass GroupKey; // Cache group encryption key with identifier.\nClass GroupKeyEncrypted; // Cache group encryption key with identifier.\nClass ReencryptStateUtils;\n", "des": "Encryption manager classes."}
{"index": 304, "repo": "pdfbox-3.0.0-beta1", "code": "package visible;\n\nInterface PDFTemplateBuilder; // That class builds visible signature template which will be added in our PDF document.\nClass PDFTemplateCreator; // Class to build PDF template.\nClass PDFTemplateStructure; // Structure of PDF document with visible signature.\nClass PDVisibleSigBuilder; // Implementation of PDFTemplateBuilder.\nClass PDVisibleSignDesigner; // Class for visible signature design properties.\nClass PDVisibleSigProperties; // This builder class is in order to create visible signature properties.\n", "des": "This is the visual signature part that help creating the visual representation for the digital signature."}
{"index": 2108, "repo": "spring-webflux-6.0.11", "code": "package adapter;\n\npublic abstract class AbstractListenerWebSocketSession<T> extends AbstractWebSocketSession<T> implements Subscriber<Void>; // Base class for WebSocketSession implementations that bridge between event-listener WebSocket APIs (e.g.\npublic abstract class AbstractWebSocketSession<T> extends Object implements WebSocketSession; // Convenient base class for WebSocketSession implementations that holds common fields and exposes accessors.\npublic final class ContextWebSocketHandler extends Object implements WebSocketHandler; // WebSocketHandler decorator that enriches the context of the target handler.\n@WebSocket public class JettyWebSocketHandlerAdapter extends Object; // Jetty @WebSocket handler that delegates events to a reactive WebSocketHandler and its session.\npublic class JettyWebSocketSession extends AbstractListenerWebSocketSession<org.eclipse.jetty.websocket.api.Session>; // Spring WebSocketSession implementation that adapts to a Jetty WebSocket Session.\npublic abstract class Netty5WebSocketSessionSupport<T> extends AbstractWebSocketSession<T>; // Base class for Netty-based WebSocketSession adapters that provides convenience methods to convert Netty WebSocketFrames to and from WebSocketMessages.\npublic abstract class NettyWebSocketSessionSupport<T> extends AbstractWebSocketSession<T>; // Base class for Netty-based WebSocketSession adapters that provides convenience methods to convert Netty WebSocketFrames to and from WebSocketMessages.\npublic class ReactorNetty2WebSocketSession extends Netty5WebSocketSessionSupport<ReactorNetty2WebSocketSession.WebSocketConnection>; // WebSocketSession implementation for use with the Reactor Netty's (Netty 5) NettyInbound and NettyOutbound.\npublic static class ReactorNetty2WebSocketSession.WebSocketConnection extends Object; // Simple container for NettyInbound and NettyOutbound.\npublic class ReactorNettyWebSocketSession extends NettyWebSocketSessionSupport<ReactorNettyWebSocketSession.WebSocketConnection>; // WebSocketSession implementation for use with the Reactor Netty's NettyInbound and NettyOutbound.\npublic static class ReactorNettyWebSocketSession.WebSocketConnection extends Object; // Simple container for NettyInbound and NettyOutbound.\npublic class StandardWebSocketHandlerAdapter extends Endpoint; // Adapter for the Jakarta WebSocket API (JSR-356) that delegates events to a reactive WebSocketHandler and its session.\n", "des": "Classes adapting Spring's Reactive WebSocket API to and from WebSocket runtimes."}
{"index": 998, "repo": "spring-ws-3.0.10.RELEASE", "code": "package http;\n\nInterface HttpTransportConstants; // Declares HTTP-specific transport constants.\nClass AbstractHttpSenderConnection; // Abstract base class for WebServiceConnection implementations that send request over HTTP.\nClass AbstractHttpWebServiceMessageSender; // Abstract base class for WebServiceMessageSender implementations that use HTTP.\nClass ClientHttpRequestConnection; // Implementation of the WebServiceConnection interface that is based on the Spring 3 ClientHttpRequest and ClientHttpResponse.\nClass ClientHttpRequestMessageSender; // WebServiceMessageSender implementation based on the ClientHttpRequestFactory introduced in Spring 3.\nClass CommonsHttpConnection; // In favor of HttpComponentsConnection\nClass CommonsHttpMessageSender; // In favor of HttpComponentsMessageSender\nClass HttpComponentsConnection; // Implementation of WebServiceConnection that is based on Apache HttpClient.\nClass HttpComponentsMessageSender; // WebServiceMessageSender implementation that uses Apache HttpClient to execute POST requests.\nClass HttpComponentsMessageSender.RemoveSoapHeadersInterceptor; // HttpClient HttpRequestInterceptor implementation that removes Content-Length and Transfer-Encoding headers from the request.\nClass HttpExchangeConnection; // Implementation of WebServiceConnection that is based on the Java 6 HttpServer HttpExchange.\nClass HttpServletConnection; // Implementation of WebServiceConnection that is based on the Servlet API.\nClass HttpsUrlConnectionMessageSender; // Extension of HttpUrlConnectionMessageSender that adds support for (self-signed) HTTPS certificates.\nClass HttpUrlConnection; // Implementation of the WebServiceConnection interface that uses a HttpURLConnection.\nClass HttpUrlConnectionMessageSender; // WebServiceMessageSender implementation that uses standard J2SE facilities to execute POST requests, without support for HTTP authentication or advanced configuration options.\nClass LocationTransformerObjectSupport; // Abstract base class for WsdlDefinitionHandlerAdapter and XsdSchemaHandlerAdapter that transforms XSD and WSDL location attributes.\nClass MessageDispatcherServlet; // Servlet for simplified dispatching of Web service messages.\nClass WebServiceMessageReceiverHandlerAdapter; // Adapter to use the WebServiceMessageReceiver interface with the generic DispatcherServlet.\nClass WebServiceMessageReceiverHttpHandler; // HttpHandler that can be used to handle incoming HttpExchange service requests.\nClass WsdlDefinitionHandlerAdapter; // Adapter to use the WsdlDefinition interface with the generic DispatcherServlet.\nClass WsdlDefinitionHttpHandler;\nClass XsdSchemaHandlerAdapter; // Adapter to use the XsdSchema interface with the generic DispatcherServlet.\n", "des": "Package providing support for handling messages via HTTP."}
{"index": 3612, "repo": "lucene-suggest-9.7.0", "code": "package analyzing;\n\nClass AnalyzingInfixSuggester; // Analyzes the input text and then suggests matches based on prefix matches to any tokens in the indexed text.\nClass AnalyzingSuggester; // Suggester that first analyzes the surface form, adds the analyzed form to a weighted FST, and then does the same thing at lookup time.\nClass BlendedInfixSuggester; // Extension of the AnalyzingInfixSuggester which transforms the weight after search to take into account the position of the searched term into the indexed text.\nClass FreeTextSuggester; // Builds an ngram model from the text sent to FreeTextSuggester.build(org.apache.lucene.search.suggest.InputIterator) and predicts based on the last grams-1 tokens in the request sent to FreeTextSuggester.lookup(java.lang.CharSequence, boolean, int).\nClass FSTUtil; // Exposes a utility method to enumerate all paths intersecting an Automaton with an FST.\nClass FSTUtil.Path<T>; // Holds a pair (automaton, fst) of states and accumulated output in the intersected machine.\nClass FuzzySuggester; // Implements a fuzzy AnalyzingSuggester.\nClass SuggestStopFilter; // Like StopFilter except it will not remove the last token if that token was not followed by some token separator.\nClass SuggestStopFilterFactory; // Factory for SuggestStopFilter.\nEnum BlendedInfixSuggester.BlenderType; // The different types of blender.\n", "des": "Analyzer based autosuggest."}
{"index": 1310, "repo": "groovy-all-4.0.13", "code": "package binding;\n\npublic class AbstractButtonProperties extends Object;\npublic abstract class AbstractSyntheticBinding extends AbstractFullBinding;\npublic class JComboBoxProperties extends Object;\npublic class JComponentProperties extends Object;\npublic class JScrollBarProperties extends Object;\npublic class JSliderProperties extends Object;\npublic class JSpinnerProperties extends Object;\npublic class JTableProperties extends Object;\npublic class JTextComponentProperties extends Object;\n", "des": "Binding classes for SwingBuilder"}
{"index": 2136, "repo": "wicket-core-10.0.0-M1", "code": "package wicket;\n\npackage wicket.authorization; // Contains classes that allow the user to specify authorization constraints via IAuthorizationStrategy.\npackage wicket.feedback; // Classes related to showing user feedback, generally as the result of form submission and/or validation.\npackage wicket.markup; // Base package for markup.\npackage wicket.model; // Core model support for Wicket components.\npackage wicket.resource; // Locale aware resouce loaders.\npackage wicket.response; // Several response implementations.\npackage wicket.validation; // This package provides interfaces for Wicket's validation support.\npublic abstract class Application extends Object implements ISessionStore.UnboundListener, IEventSink, IMetadataContext<Object,Application>; // Base class for all Wicket applications.\npublic class ApplicationListenerCollection extends org.apache.wicket.util.listener.ListenerCollection<IApplicationListener> implements IApplicationListener; // ListenerCollection for IApplicationListeners\npublic class AttributeModifier extends Behavior implements org.apache.wicket.util.io.IClusterable; // This class allows a tag attribute of a component to be modified dynamically with a value obtained from a model object.\npublic static enum AttributeModifier.MarkerValue extends Enum<AttributeModifier.MarkerValue>; // Special attribute value markers.\npublic class BehaviorInstantiationListenerCollection extends org.apache.wicket.util.listener.ListenerCollection<IBehaviorInstantiationListener> implements IBehaviorInstantiationListener; // ListenerCollection for IBehaviorInstantiationListeners\npublic enum ChildToDequeueType extends Enum<ChildToDequeueType>;\npublic abstract class ClassAttributeModifier extends AttributeAppender; // An AttributeModifier specialized in managing the CSS class attribute\npublic abstract class Component extends Object implements org.apache.wicket.util.io.IClusterable, IConverterLocator, IRequestableComponent, IHeaderContributor, org.apache.wicket.util.IHierarchical<Component>, IEventSink, IEventSource, IMetadataContext<Serializable,Component>, IFeedbackContributor; // Component serves as the highest level abstract base class for all components.\npublic class ConverterLocator extends Object implements IConverterLocator; // Implementation of IConverterLocator interface, which locates converters for a given type.\n", "des": "The core Wicket package."}
{"index": 167, "repo": "ignite-core-2.15.0", "code": "package auth;\n\nClass AuthenticationCommandHandler; // Authentication handler.\n", "des": "REST authentication command."}
{"index": 2050, "repo": "spring-boot-loader-3.1.1", "code": "package jarmode;\n\npublic interface JarMode; // Interface registered in spring.factories to provides extended 'jarmode' support.\npublic final class JarModeLauncher extends Object; // Delegate class used to launch the fat jar in a specific mode.\n", "des": "Support for launching the JAR using jarmode."}
{"index": 2425, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package elasticsearch;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.elasticsearch.ReactiveElasticsearchClientAutoConfiguration.class) @ConditionalOnClass({org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient.class) @ConditionalOnEnabledHealthIndicator(\"elasticsearch\") public class ElasticsearchReactiveHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.data.elasticsearch.ElasticsearchReactiveHealthIndicator,org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient>; // Auto-configuration for ElasticsearchReactiveHealthIndicator using the ReactiveElasticsearchClient.\n", "des": "Auto-configuration for actuator Elasticsearch concerns dependent on Spring Data."}
{"index": 1986, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package thymeleaf;\n\n@AutoConfiguration(after={WebMvcAutoConfiguration.class,WebFluxAutoConfiguration.class}) @EnableConfigurationProperties(ThymeleafProperties.class) @ConditionalOnClass({org.thymeleaf.templatemode.TemplateMode.class,org.thymeleaf.spring6.SpringTemplateEngine.class}) @Import({org.springframework.boot.autoconfigure.thymeleaf.TemplateEngineConfigurations.ReactiveTemplateEngineConfiguration.class,org.springframework.boot.autoconfigure.thymeleaf.TemplateEngineConfigurations.DefaultTemplateEngineConfiguration.class}) public class ThymeleafAutoConfiguration extends Object; // Auto-configuration for Thymeleaf.\n@ConfigurationProperties(prefix=\"spring.thymeleaf\") public class ThymeleafProperties extends Object; // Properties for Thymeleaf.\npublic static class ThymeleafProperties.Reactive extends Object;\npublic static class ThymeleafProperties.Servlet extends Object;\npublic class ThymeleafTemplateAvailabilityProvider extends Object implements TemplateAvailabilityProvider; // TemplateAvailabilityProvider that provides availability information for Thymeleaf view templates.\n", "des": "Auto-configuration for Thymeleaf."}
{"index": 916, "repo": "commons-compress-1.23.0", "code": "package brotli;\n\nClass BrotliCompressorInputStream; // CompressorInputStream implementation to decode Brotli encoded stream.\nClass BrotliUtils; // Utility code for the Brotli compression format.\n", "des": "Provides stream class for decompressing streams using the Brotli algorithm based on Google's Brotli decoder."}
{"index": 182, "repo": "ignite-core-2.15.0", "code": "package util;\n\npackage util.future; // Future related classes.\npackage util.ipc; // IPC utility classes.\npackage util.nio; // NIO server interfaces and common utility classes for NIO.\npackage util.scala; // Scala supporting classes.\npackage util.test; // Contains common utility classes for JUnit integration.\npackage util.tostring; // Common utility classes for threads.\npackage util.typedef; // Contains typedefs definitions for frequently used classes.\npackage util.worker; // Common utility classes for threads.\nInterface ClassCache; // Class cache.\nInterface DirectBufferCleaner; // Cleaner interface for java.nio.ByteBuffer.\nInterface GridIntIterator; // Iterator over integer primitives.\nInterface GridSerializableIterable<E>; // Makes Iterable as Serializable and is useful for making anonymous serializable iterators.\nInterface GridSerializableIterator<E>; // Makes Iterator as Serializable and is useful for making anonymous serializable iterators.\nInterface IgniteTree<L,T>; // Interface for ignite internal tree.\nInterface IgniteTree.InvokeClosure<T>;\nInterface IgniteUtils.InterfaceSupplier; // Explicit class for Supplier<Enumeration<NetworkInterface>>.\nClass BasicRateLimiter; // The simplified version of Google Guava smooth rate limiter.\nClass F0; // Internal utility class that contains not peer-deployable predicates for use in internal logic.\nClass FeatureChecker; // Class extracted for fields from GridUnsafe to be absolutely independent with current and future static block initialization effects.\nClass GridAnnotationsCache; // Caches class loaders for classes.\nClass GridArgumentCheck; // This class encapsulates argument check (null and range) for public facing APIs.\nClass GridArrays; // Utility methods to work with arrays.\nClass GridAtomicInitializer<T>; // Executes initialization operation once.\nClass GridAtomicInteger; // Extended version of AtomicInteger.\nClass GridAtomicLong; // Extended version of AtomicLong.\nClass GridBoundedConcurrentLinkedHashMap<K,V>; // Concurrent map with an upper bound.\nClass GridBoundedConcurrentLinkedHashSet<E>; // Concurrent set with an upper bound.\nClass GridBoundedConcurrentOrderedMap<K,V>; // Concurrent ordered map that automatically manages its maximum size.\n", "des": "System-wide utility routine and helper classes."}
{"index": 420, "repo": "hadoop-azure-3.3.6", "code": "package retryReasonCategories;\n\nClass ClientErrorRetryReason; // Category that can capture server-response errors for 4XX status-code.\nClass ConnectionResetRetryReason; // Category that can capture server-response errors for connection-reset exception.\nClass ConnectionTimeoutRetryReason; // Category that can capture server-response errors for connection-timeout.\nClass ReadTimeoutRetryReason; // Category that can capture server-response errors for read-timeout.\nClass RetryReasonCategory; // Provides methods to define if given exception can be categorised to certain category.\nClass ServerErrorRetryReason; // Category that can capture server-response errors for 5XX status-code.\nClass UnknownHostRetryReason; // Category that can capture server-response errors for UnknownHostException.\nClass UnknownIOExceptionRetryReason; // Category that can capture server-response errors for IOException.\nClass UnknownSocketExceptionRetryReason; // Category that can capture server-response errors for SocketException.\n", "des": "A retryReasonCategory defines methods applicable on server-response errors."}
{"index": 2166, "repo": "wicket-core-10.0.0-M1", "code": "package cookies;\n\npublic class CookieDefaults extends Object implements org.apache.wicket.util.io.IClusterable; // This class provides default values that are used by CookieUtils class when it creates cookies.\npublic static enum CookieDefaults.SameSite extends Enum<CookieDefaults.SameSite>;\npublic class CookieUtils extends Object; // Helper class to simplify Cookie handling.\n", "des": "Persistence support for forms."}
{"index": 1180, "repo": "commons-math3-3.6.1", "code": "package util;\n\nClass ExponentialDecayFunction; // Exponential decay function: a e-x / b, where x is the (integer) independent variable.\nClass QuasiSigmoidDecayFunction; // Decay function whose shape is similar to a sigmoid.\n", "des": "Miscellaneous utilities."}
{"index": 2068, "repo": "spring-webmvc-6.0.11", "code": "package handler;\n\npublic abstract class AbstractDetectingUrlHandlerMapping extends AbstractUrlHandlerMapping; // Abstract implementation of the HandlerMapping interface, detecting URL mappings for handler beans through introspection of all defined beans in the application context.\npublic abstract class AbstractHandlerExceptionResolver extends Object implements HandlerExceptionResolver, org.springframework.core.Ordered; // Abstract base class for HandlerExceptionResolver implementations.\npublic abstract class AbstractHandlerMapping extends org.springframework.web.context.support.WebApplicationObjectSupport implements HandlerMapping, org.springframework.core.Ordered, org.springframework.beans.factory.BeanNameAware; // Abstract base class for HandlerMapping implementations.\npublic abstract class AbstractHandlerMethodExceptionResolver extends AbstractHandlerExceptionResolver; // Abstract base class for HandlerExceptionResolver implementations that support handling exceptions from handlers of type HandlerMethod.\npublic abstract class AbstractHandlerMethodMapping<T> extends AbstractHandlerMapping implements org.springframework.beans.factory.InitializingBean; // Abstract base class for HandlerMapping implementations that define a mapping between a request and a HandlerMethod.\npublic abstract class AbstractUrlHandlerMapping extends AbstractHandlerMapping implements MatchableHandlerMapping; // Abstract base class for URL-mapped HandlerMapping implementations.\npublic class BeanNameUrlHandlerMapping extends AbstractDetectingUrlHandlerMapping; // Implementation of the HandlerMapping interface that maps from URLs to beans with names that start with a slash (\"/\"), similar to how Struts maps URLs to action names.\npublic class ConversionServiceExposingInterceptor extends Object implements HandlerInterceptor; // Interceptor that places the configured ConversionService in request scope so it's available during request processing.\npublic class DispatcherServletWebRequest extends org.springframework.web.context.request.ServletWebRequest; // ServletWebRequest subclass that is aware of DispatcherServlet's request context, such as the Locale determined by the configured LocaleResolver.\npublic class HandlerExceptionResolverComposite extends Object implements HandlerExceptionResolver, org.springframework.core.Ordered; // A HandlerExceptionResolver that delegates to a list of other HandlerExceptionResolvers.\npublic class HandlerMappingIntrospector extends Object implements org.springframework.web.cors.CorsConfigurationSource, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // Helper class to get information from the HandlerMapping that would serve a specific request.\n", "des": "Provides standard HandlerMapping implementations, including abstract base classes for custom implementations."}
{"index": 1354, "repo": "spring-tx-6.0.11", "code": "package dao;\n\npackage dao.annotation; // Annotation support for DAOs.\npackage dao.support; // Support classes for DAO implementations, providing miscellaneous utility methods.\npublic class CannotAcquireLockException extends PessimisticLockingFailureException; // Exception thrown on failure to acquire a lock during an update, for example during a \"select for update\" statement.\n@Deprecated(since=\"6.0.3\") public class CannotSerializeTransactionException extends PessimisticLockingFailureException;\n@Deprecated(since=\"6.0.3\") public class CleanupFailureDataAccessException extends NonTransientDataAccessException;\npublic class ConcurrencyFailureException extends TransientDataAccessException; // Exception thrown on various data access concurrency failures.\npublic abstract class DataAccessException extends org.springframework.core.NestedRuntimeException; // Root of the hierarchy of data access exceptions discussed in Expert One-On-One J2EE Design and Development.\npublic class DataAccessResourceFailureException extends NonTransientDataAccessResourceException; // Data access exception thrown when a resource fails completely: for example, if we can't connect to a database using JDBC.\npublic class DataIntegrityViolationException extends NonTransientDataAccessException; // Exception thrown when an attempt to insert or update data results in violation of an integrity constraint.\npublic class DataRetrievalFailureException extends NonTransientDataAccessException; // Exception thrown if certain expected data could not be retrieved, e.g.\n@Deprecated(since=\"6.0.3\") public class DeadlockLoserDataAccessException extends PessimisticLockingFailureException;\npublic class DuplicateKeyException extends DataIntegrityViolationException; // Exception thrown when an attempt to insert or update data results in violation of a primary key or unique constraint.\npublic class EmptyResultDataAccessException extends IncorrectResultSizeDataAccessException; // Data access exception thrown when a result was expected to have at least one row (or element) but zero rows (or elements) were actually returned.\npublic class IncorrectResultSizeDataAccessException extends DataRetrievalFailureException; // Data access exception thrown when a result was not of the expected size, for example when expecting a single row but getting 0 or more than 1 rows.\npublic class IncorrectUpdateSemanticsDataAccessException extends InvalidDataAccessResourceUsageException; // Data access exception thrown when something unintended appears to have happened with an update, but the transaction hasn't already been rolled back.\n", "des": "Exception hierarchy enabling sophisticated error handling independent of the data access approach in use."}
{"index": 2885, "repo": "spring-integration-core-6.1.2", "code": "package converter;\n\npublic class AllowListDeserializingConverter extends Object implements org.springframework.core.convert.converter.Converter<byte[],Object>; // A Converter that delegates to a Deserializer to convert data in a byte array to an object.\npublic class ConfigurableCompositeMessageConverter extends org.springframework.messaging.converter.CompositeMessageConverter implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // A CompositeMessageConverter extension with some default MessageConverters which can be overridden with the given converters or added in the end of target converters collection.\npublic class DefaultDatatypeChannelMessageConverter extends Object implements org.springframework.messaging.converter.MessageConverter, org.springframework.beans.factory.BeanFactoryAware; // Default message converter for datatype channels.\npublic class MapMessageConverter extends Object implements org.springframework.messaging.converter.MessageConverter, org.springframework.beans.factory.BeanFactoryAware; // Converts to/from a Map with 2 keys ('headers' and 'payload').\npublic class ObjectStringMessageConverter extends org.springframework.messaging.converter.StringMessageConverter; // A StringMessageConverter extension to convert any object to string.\npublic class PassThruMessageConverter extends Object implements org.springframework.messaging.converter.MessageConverter; // The simple MessageConverter implementation which contract is to return Message as is for both from/to operations.\npublic class SimpleMessageConverter extends Object implements org.springframework.messaging.converter.MessageConverter, org.springframework.beans.factory.BeanFactoryAware;\n", "des": "Provides classes supporting message conversion."}
{"index": 1992, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package embedded;\n\n@AutoConfiguration @ConditionalOnNotWarDeployment @ConditionalOnWebApplication @EnableConfigurationProperties(ServerProperties.class) public class EmbeddedWebServerFactoryCustomizerAutoConfiguration extends Object; // Auto-configuration for embedded servlet and reactive web servers customizations.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass({org.eclipse.jetty.server.Server.class,org.eclipse.jetty.util.Loader.class,org.eclipse.jetty.webapp.WebAppContext.class}) public static class EmbeddedWebServerFactoryCustomizerAutoConfiguration.JettyWebServerFactoryCustomizerConfiguration extends Object; // Nested configuration if Jetty is being used.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(reactor.netty.http.server.HttpServer.class) public static class EmbeddedWebServerFactoryCustomizerAutoConfiguration.NettyWebServerFactoryCustomizerConfiguration extends Object; // Nested configuration if Netty is being used.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass({org.apache.catalina.startup.Tomcat.class,org.apache.coyote.UpgradeProtocol.class}) public static class EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration extends Object; // Nested configuration if Tomcat is being used.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass({io.undertow.Undertow.class,org.xnio.SslClientAuthMode.class}) public static class EmbeddedWebServerFactoryCustomizerAutoConfiguration.UndertowWebServerFactoryCustomizerConfiguration extends Object; // Nested configuration if Undertow is being used.\npublic class JettyWebServerFactoryCustomizer extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.jetty.ConfigurableJettyWebServerFactory>, org.springframework.core.Ordered; // Customization for Jetty-specific features common for both Servlet and Reactive servers.\n", "des": "Configuration for embedded reactive and servlet web servers."}
{"index": 1995, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package error;\n\npublic abstract class AbstractErrorWebExceptionHandler extends Object implements org.springframework.boot.web.reactive.error.ErrorWebExceptionHandler, org.springframework.beans.factory.InitializingBean; // Abstract base class for ErrorWebExceptionHandler implementations.\npublic class DefaultErrorWebExceptionHandler extends AbstractErrorWebExceptionHandler; // Basic global WebExceptionHandler, rendering ErrorAttributes.\n@AutoConfiguration(before=WebFluxAutoConfiguration.class) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnClass(org.springframework.web.reactive.config.WebFluxConfigurer.class) @EnableConfigurationProperties({ServerProperties.class,WebProperties.class}) public class ErrorWebFluxAutoConfiguration extends Object; // Auto-configuration to render errors through a WebFlux WebExceptionHandler.\n", "des": "Auto-configuration for Spring WebFlux error handling."}
{"index": 1533, "repo": "spring-context-6.0.11", "code": "package assembler;\n\npublic abstract class AbstractConfigurableMBeanInfoAssembler extends AbstractReflectiveMBeanInfoAssembler; // Base class for MBeanInfoAssemblers that support configurable JMX notification behavior.\npublic abstract class AbstractMBeanInfoAssembler extends Object implements MBeanInfoAssembler; // Abstract implementation of the MBeanInfoAssembler interface that encapsulates the creation of a ModelMBeanInfo instance but delegates the creation of metadata to subclasses.\npublic abstract class AbstractReflectiveMBeanInfoAssembler extends AbstractMBeanInfoAssembler; // Builds on the AbstractMBeanInfoAssembler superclass to add a basic algorithm for building metadata based on the reflective metadata of the MBean class.\npublic interface AutodetectCapableMBeanInfoAssembler extends MBeanInfoAssembler; // Extends the MBeanInfoAssembler to add autodetection logic.\npublic class InterfaceBasedMBeanInfoAssembler extends AbstractConfigurableMBeanInfoAssembler implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Subclass of AbstractReflectiveMBeanInfoAssembler that allows for the management interface of a bean to be defined using arbitrary interfaces.\npublic interface MBeanInfoAssembler; // Interface to be implemented by all classes that can create management interface metadata for a managed resource.\npublic class MetadataMBeanInfoAssembler extends AbstractReflectiveMBeanInfoAssembler implements AutodetectCapableMBeanInfoAssembler, org.springframework.beans.factory.InitializingBean; // Implementation of the MBeanInfoAssembler interface that reads the management interface information from source level metadata.\npublic class MethodExclusionMBeanInfoAssembler extends AbstractConfigurableMBeanInfoAssembler; // AbstractReflectiveMBeanInfoAssembler subclass that allows method names to be explicitly excluded as MBean operations and attributes.\npublic class MethodNameBasedMBeanInfoAssembler extends AbstractConfigurableMBeanInfoAssembler; // Subclass of AbstractReflectiveMBeanInfoAssembler that allows to specify method names to be exposed as MBean operations and attributes.\npublic class SimpleReflectiveMBeanInfoAssembler extends AbstractConfigurableMBeanInfoAssembler; // Simple subclass of AbstractReflectiveMBeanInfoAssembler that always votes yes for method and property inclusion, effectively exposing all public methods and properties as operations and attributes.\n", "des": "Provides a strategy for MBeanInfo assembly."}
{"index": 1846, "repo": "spring-test-6.0.11", "code": "package statements;\n\npublic class ProfileValueChecker extends Statement; // ProfileValueChecker is a custom JUnit Statement that checks whether a test class or test method is enabled in the current environment via Spring's @IfProfileValue annotation.\npublic class RunAfterTestClassCallbacks extends Statement; // RunAfterTestClassCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit execution chain by calling afterTestClass() on the supplied TestContextManager.\npublic class RunAfterTestExecutionCallbacks extends Statement; // RunAfterTestExecutionCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit 4 execution chain by calling afterTestExecution() on the supplied TestContextManager.\npublic class RunAfterTestMethodCallbacks extends Statement; // RunAfterTestMethodCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit execution chain by calling afterTestMethod() on the supplied TestContextManager.\npublic class RunBeforeTestClassCallbacks extends Statement; // RunBeforeTestClassCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit execution chain by calling beforeTestClass() on the supplied TestContextManager.\npublic class RunBeforeTestExecutionCallbacks extends Statement; // RunBeforeTestExecutionCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit 4 execution chain by calling beforeTestExecution() on the supplied TestContextManager.\npublic class RunBeforeTestMethodCallbacks extends Statement; // RunBeforeTestMethodCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit execution chain by calling beforeTestMethod() on the supplied TestContextManager.\npublic class RunPrepareTestInstanceCallbacks extends Statement; // RunPrepareTestInstanceCallbacks is a custom JUnit Statement which allows the Spring TestContext Framework to be plugged into the JUnit execution chain by calling prepareTestInstance() on the supplied TestContextManager.\npublic class SpringFailOnTimeout extends Statement; // SpringFailOnTimeout is a custom JUnit Statement which adds support for Spring's @Timed annotation by throwing an exception if the next statement in the execution chain takes more than the specified number of milliseconds.\npublic class SpringRepeat extends Statement; // SpringRepeat is a custom JUnit Statement which adds support for Spring's @Repeat annotation by repeating the test the specified number of times.\n", "des": "Custom JUnit 4 Statements used in the Spring TestContext Framework."}
{"index": 3512, "repo": "opennlp-tools-2.2.0", "code": "package dictionary;\n\nClass Dictionary; // An iterable and serializable dictionary implementation.\nClass Index; // This classes indexes string lists.\n", "des": "Package related to parsing and storing dictionaries."}
{"index": 2981, "repo": "pulsar-broker-3.0.0", "code": "package timeout;\n\npublic class TransactionTimeoutTrackerFactoryImpl extends Object implements TransactionTimeoutTrackerFactory; // An timeout tracker factory implementation of TransactionTimeoutTrackerFactory.\npublic class TransactionTimeoutTrackerImpl extends Object implements TransactionTimeoutTracker, io.netty.util.TimerTask; // An timer-task implementation of TransactionTimeoutTracker.\n", "des": "Implementation of a transaction buffer."}
{"index": 2765, "repo": "spring-beans-6.0.11", "code": "package propertyeditors;\n\npublic class ByteArrayPropertyEditor extends PropertyEditorSupport; // Editor for byte arrays.\npublic class CharacterEditor extends PropertyEditorSupport; // Editor for a Character, to populate a property of type Character or char from a String value.\npublic class CharArrayPropertyEditor extends PropertyEditorSupport; // Editor for char arrays.\npublic class CharsetEditor extends PropertyEditorSupport; // Editor for java.nio.charset.Charset, translating charset String representations into Charset objects and back.\npublic class ClassArrayEditor extends PropertyEditorSupport; // Property editor for an array of Classes, to enable the direct population of a Class[] property without having to use a String class name property as bridge.\npublic class ClassEditor extends PropertyEditorSupport; // Property editor for java.lang.Class, to enable the direct population of a Class property without recourse to having to use a String class name property as bridge.\npublic class CurrencyEditor extends PropertyEditorSupport; // Editor for java.util.Currency, translating currency codes into Currency objects.\npublic class CustomBooleanEditor extends PropertyEditorSupport; // Property editor for Boolean/boolean properties.\npublic class CustomCollectionEditor extends PropertyEditorSupport; // Property editor for Collections, converting any source Collection to a given target Collection type.\npublic class CustomDateEditor extends PropertyEditorSupport; // Property editor for java.util.Date, supporting a custom java.text.DateFormat.\npublic class CustomMapEditor extends PropertyEditorSupport; // Property editor for Maps, converting any source Map to a given target Map type.\npublic class CustomNumberEditor extends PropertyEditorSupport; // Property editor for any Number subclass such as Short, Integer, Long, BigInteger, Float, Double, BigDecimal.\npublic class FileEditor extends PropertyEditorSupport; // Editor for java.io.File, to directly populate a File property from a Spring resource location.\npublic class InputSourceEditor extends PropertyEditorSupport; // Editor for org.xml.sax.InputSource, converting from a Spring resource location String to a SAX InputSource object.\npublic class InputStreamEditor extends PropertyEditorSupport; // One-way PropertyEditor which can convert from a text String to a java.io.InputStream, interpreting the given String as a Spring resource location (e.g.\npublic class LocaleEditor extends PropertyEditorSupport; // Editor for java.util.Locale, to directly populate a Locale property.\n", "des": "Properties editors used to convert from String values to object types such as java.util.Properties."}
{"index": 3420, "repo": "gremlin-core-3.6.4", "code": "package kryoshim;\n\npackage kryoshim.shaded; // Implementations of the interfaces in org.apache.tinkerpop.gremlin.structure.io.gryo.kryoshim using TinkerPop's shaded copy of Kryo.\nInterface InputShim; // A minimal Input-like abstraction.\nInterface KryoShim<I extends InputShim,â€‹O extends OutputShim>; // A minimal Kryo-like abstraction.\nInterface KryoShimService; // This interface exists to decouple HadoopPools from TinkerPop's shaded Kryo.\nInterface OutputShim; // A minimal Output-like abstraction.\nInterface SerializerShim<T>; // A minimal Serializer-like abstraction.\nClass KryoShimServiceLoader; // Loads the highest-priority or user-selected KryoShimService.\n", "des": "Abstracts a minimal subset of Kryo types and methods."}
{"index": 289, "repo": "pdfbox-3.0.0-beta1", "code": "package prepress;\n\nClass PDBoxStyle; // The Box Style specifies visual characteristics for displaying box areas.\n", "des": "This package contains classes for prepress support in PDFBox."}
{"index": 198, "repo": "nutch-2.4", "code": "package api;\n\npackage api.impl; // Implementations of REST API interfaces.\nInterface ConfManager;\nInterface JobManager;\nClass NutchServer;\nEnum JobManager.JobType;\n", "des": "REST API to run and control crawl jobs."}
{"index": 1918, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package r2dbc;\n\n@AutoConfiguration(after=R2dbcAutoConfiguration.class) @ConditionalOnClass({org.springframework.r2dbc.core.DatabaseClient.class,org.springframework.data.r2dbc.core.R2dbcEntityTemplate.class}) @ConditionalOnSingleCandidate(org.springframework.r2dbc.core.DatabaseClient.class) public class R2dbcDataAutoConfiguration extends Object; // Auto-configuration for DatabaseClient.\n@AutoConfiguration(after=R2dbcDataAutoConfiguration.class) @ConditionalOnClass({io.r2dbc.spi.ConnectionFactory.class,org.springframework.data.r2dbc.repository.R2dbcRepository.class}) @ConditionalOnBean(org.springframework.r2dbc.core.DatabaseClient.class) @ConditionalOnProperty(prefix=\"spring.data.r2dbc.repositories\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) @ConditionalOnMissingBean(org.springframework.data.r2dbc.repository.support.R2dbcRepositoryFactoryBean.class) @Import(org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfigureRegistrar.class) public class R2dbcRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data R2DBC Repositories.\n", "des": "Auto-Configuration for Spring Data R2DBC."}
{"index": 1275, "repo": "spring-core-6.0.11", "code": "package io;\n\npackage io.buffer; // Generic abstraction for working with byte buffer implementations.\npackage io.support; // Support classes for Spring's resource abstraction.\npublic abstract class AbstractFileResolvingResource extends AbstractResource; // Abstract base class for resources which resolve URLs into File references, such as UrlResource or ClassPathResource.\npublic abstract class AbstractResource extends Object implements Resource; // Convenience base class for Resource implementations, pre-implementing typical behavior.\npublic class ByteArrayResource extends AbstractResource; // Resource implementation for a given byte array.\npublic class ClassPathResource extends AbstractFileResolvingResource; // Resource implementation for class path resources.\npublic class ClassRelativeResourceLoader extends DefaultResourceLoader; // ResourceLoader implementation that interprets plain resource paths as relative to a given java.lang.Class.\npublic interface ContextResource extends Resource; // Extended interface for a resource that is loaded from an enclosing 'context', e.g.\npublic class DefaultResourceLoader extends Object implements ResourceLoader; // Default implementation of the ResourceLoader interface.\nprotected static class DefaultResourceLoader.ClassPathContextResource extends ClassPathResource implements ContextResource; // ClassPathResource that explicitly expresses a context-relative path through implementing the ContextResource interface.\npublic class DescriptiveResource extends AbstractResource; // Simple Resource implementation that holds a resource description but does not point to an actually readable resource.\npublic class FileSystemResource extends AbstractResource implements WritableResource; // Resource implementation for java.io.File and java.nio.file.Path handles with a file system target.\npublic class FileSystemResourceLoader extends DefaultResourceLoader; // ResourceLoader implementation that resolves plain paths as file system resources rather than as class path resources (the latter is DefaultResourceLoader's default strategy).\npublic class FileUrlResource extends UrlResource implements WritableResource; // Subclass of UrlResource which assumes file resolution, to the degree of implementing the WritableResource interface for it.\npublic class InputStreamResource extends AbstractResource; // Resource implementation for a given InputStream.\npublic interface InputStreamSource; // Simple interface for objects that are sources for an InputStream.\npublic class PathResource extends AbstractResource implements WritableResource; // Resource implementation for Path handles, performing all operations and transformations via the Path API.\n@FunctionalInterface public interface ProtocolResolver; // A resolution strategy for protocol-specific resource handles.\n", "des": "Generic abstraction for (file-based) resources, used throughout the framework."}
{"index": 1211, "repo": "commons-math3-3.6.1", "code": "package inference;\n\nClass BinomialTest; // Implements binomial test statistics.\nClass ChiSquareTest; // Implements Chi-Square test statistics.\nClass GTest; // Implements G Test statistics.\nClass KolmogorovSmirnovTest; // Implementation of the Kolmogorov-Smirnov (K-S) test for equality of continuous distributions.\nClass MannWhitneyUTest; // An implementation of the Mann-Whitney U test (also called Wilcoxon rank-sum test).\nClass OneWayAnova; // Implements one-way ANOVA (analysis of variance) statistics.\nClass TestUtils; // A collection of static methods to create inference test instances or to perform inference tests.\nClass TTest; // An implementation for Student's t-tests.\nClass WilcoxonSignedRankTest; // An implementation of the Wilcoxon signed-rank test.\nEnum AlternativeHypothesis; // Represents an alternative hypothesis for a hypothesis test.\n", "des": "Classes providing hypothesis testing."}
{"index": 361, "repo": "commons-geometry-euclidean-1.0", "code": "package euclidean;\n\npackage euclidean.internal; // This package contains Euclidean geometry utilities and classes intended for internal use only.\npackage euclidean.oned; // This package provides basic 1D geometry components.\npackage euclidean.threed; // This package provides basic 3D geometry components.\npackage euclidean.twod; // This package provides basic 2D geometry components.\nInterface EuclideanTransform<V extends EuclideanVector<V>>; // Interface representing affine transforms in Euclidean space.\nClass AbstractAffineTransformMatrix<V extends EuclideanVector<V>,M extends AbstractAffineTransformMatrix<V,M>>; // Base class for affine transform matrices in Euclidean space.\nClass AbstractBounds<P extends EuclideanVector<P>,B extends AbstractBounds<P,B>>; // Base class representing an axis-aligned bounding box with minimum and maximum bounding points.\nClass AbstractLinecastPoint<P extends EuclideanVector<P>,U extends P,L extends Embedding<P,Vector1D>>; // Base class for intersections discovered during linecast operations.\nClass AbstractNSphere<V extends EuclideanVector<V>>; // Abstract base class representing an n-sphere, which is a generalization of the ordinary 3 dimensional sphere to arbitrary dimensions.\nClass EuclideanVector<V extends EuclideanVector<V>>; // Abstract base class for Euclidean vectors and points.\nClass EuclideanVectorSum<V extends EuclideanVector<V>>; // Class representing a sum of Euclidean vectors.\nClass MultiDimensionalEuclideanVector<V extends MultiDimensionalEuclideanVector<V>>; // Abstract base class for Euclidean vectors with two or more dimensions.\n", "des": "This is the top-level package for Euclidean geometry components."}
{"index": 2598, "repo": "spring-rabbit-3.0.6", "code": "package retry;\n\npublic class ImmediateRequeueMessageRecoverer extends Object implements MessageRecoverer; // The MessageRecoverer implementation to throw an ImmediateRequeueAmqpException for subsequent requeuing in the listener container.\n@FunctionalInterface public interface MessageBatchRecoverer extends MessageRecoverer; // A retry recoverer for use with a batch listener.\n@FunctionalInterface public interface MessageKeyGenerator;\n@FunctionalInterface public interface MessageRecoverer; // Implementations of this interface can handle failed messages after retries are exhausted.\n@FunctionalInterface public interface NewMessageIdentifier; // An optimization for stateful retry of message processing.\npublic class RejectAndDontRequeueRecoverer extends Object implements MessageRecoverer; // MessageRecover that causes the listener container to reject the message without requeuing.\npublic class RepublishMessageRecoverer extends Object implements MessageRecoverer; // MessageRecoverer implementation that republishes recovered messages to a specified exchange with the exception stack trace stored in the message header x-exception.\npublic class RepublishMessageRecovererWithConfirms extends RepublishMessageRecoverer; // A RepublishMessageRecoverer supporting publisher confirms and returns.\n", "des": "Provides classes supporting retries."}
{"index": 69, "repo": "ignite-core-2.15.0", "code": "package jdbc;\n\nInterface JdbcCheckpointSpiMBean; // Management bean that provides general administrative and configuration information about jdbc checkpoint SPI.\nClass JdbcCheckpointSpi; // This class defines JDBC checkpoint SPI implementation.\n", "des": "Contains JDBC implementation for checkpoint SPI."}
{"index": 522, "repo": "commons-vfs2-2.9.0", "code": "package http;\n\nClass HttpClientFactory; // Create a HttpClient instance.\nClass HttpFileContentInfoFactory; // Creates FileContentInfo instances for HTTP.\nClass HttpFileNameParser; // Implementation for http.\nClass HttpFileObject<FS extends HttpFileSystem>; // A file object backed by Apache Commons HttpClient.\nClass HttpFileProvider; // An HTTP provider that uses commons-httpclient.\nClass HttpFileSystem; // An HTTP file system.\nClass HttpFileSystemConfigBuilder; // Configuration options for HTTP.\n", "des": "The HTTP File Provider"}
{"index": 3065, "repo": "spring-ws-core-4.0.5", "code": "package adapter;\n\npackage adapter.method; // Provides the MethodArgumentResolver and MethodReturnValueHandler abstractions, and various implementations thereof.\npublic abstract class AbstractMethodEndpointAdapter extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointAdapter; // Abstract base class for EndpointAdapter implementations that support MethodEndpoints.\npublic class DefaultMethodEndpointAdapter extends AbstractMethodEndpointAdapter implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Default extension of AbstractMethodEndpointAdapter with support for pluggable argument resolvers and return value handlers.\n@Deprecated public class GenericMarshallingMethodEndpointAdapter extends MarshallingMethodEndpointAdapter;\n@Deprecated public class MarshallingMethodEndpointAdapter extends AbstractMethodEndpointAdapter implements org.springframework.beans.factory.InitializingBean;\npublic class MessageEndpointAdapter extends Object implements EndpointAdapter; // Adapter to use a MessageEndpoint as the endpoint for a EndpointInvocationChain.\n@Deprecated public class MessageMethodEndpointAdapter extends AbstractMethodEndpointAdapter;\npublic class PayloadEndpointAdapter extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointAdapter; // Adapter to use a PayloadEndpoint as the endpoint for a EndpointInvocationChain.\n@Deprecated public class PayloadMethodEndpointAdapter extends AbstractMethodEndpointAdapter;\n@Deprecated public class XPathParamAnnotationMethodEndpointAdapter extends AbstractMethodEndpointAdapter implements org.springframework.beans.factory.InitializingBean;\n", "des": "Provides miscellaneous EndpointAdapter implementations."}
{"index": 86, "repo": "ignite-core-2.15.0", "code": "package messages;\n\nClass HandshakeMessage; // Handshake message.\nClass HandshakeMessage2; // Updated handshake message.\nClass HandshakeWaitMessage; // Message requesting to wait until node's SPI context initialize.\nClass NodeIdMessage; // Node ID message.\nClass RecoveryLastReceivedMessage; // Recovery acknowledgment message.\n", "des": "Contains implementation messages."}
{"index": 1744, "repo": "spring-batch-integration-5.0.2", "code": "package partition;\n\npublic class BeanFactoryStepLocator extends Object implements StepLocator, org.springframework.beans.factory.BeanFactoryAware; // A StepLocator implementation that just looks in its enclosing bean factory for components of type Step.\n@MessageEndpoint public class MessageChannelPartitionHandler extends AbstractPartitionHandler implements org.springframework.beans.factory.InitializingBean; // A PartitionHandler that uses MessageChannel instances to send instructions to remote workers and receive their responses.\npublic class RemotePartitioningManagerStepBuilder extends PartitionStepBuilder; // Builder for a manager step in a remote partitioning setup.\npublic class RemotePartitioningManagerStepBuilderFactory extends Object implements org.springframework.beans.factory.BeanFactoryAware; // Convenient factory for a RemotePartitioningManagerStepBuilder which sets the JobRepository, JobExplorer, BeanFactory and PlatformTransactionManager automatically.\npublic class RemotePartitioningWorkerStepBuilder extends StepBuilder; // Builder for a worker step in a remote partitioning setup.\npublic class RemotePartitioningWorkerStepBuilderFactory extends Object implements org.springframework.beans.factory.BeanFactoryAware; // Convenient factory for a RemotePartitioningWorkerStepBuilder which sets the JobRepository, JobExplorer, BeanFactory and PlatformTransactionManager automatically.\npublic class StepExecutionRequest extends Object implements Serializable; // Class encapsulating information required to request a step execution in a remote partitioning setup.\n@MessageEndpoint public class StepExecutionRequestHandler extends Object; // A MessageEndpoint that can handle a StepExecutionRequest and return a StepExecution as the result.\n", "des": "Remote partitioning components."}
{"index": 2592, "repo": "spring-rabbit-3.0.6", "code": "package adapter;\n\npublic abstract class AbstractAdaptableMessageListener extends Object implements ChannelAwareMessageListener; // An abstract MessageListener adapter providing the necessary infrastructure to extract the payload of a Message.\npublic static final class AbstractAdaptableMessageListener.ReplyExpressionRoot extends Object; // Root object for reply expression evaluation.\npublic class AmqpMessageHandlerMethodFactory extends org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory; // Extension of the DefaultMessageHandlerMethodFactory for Spring AMQP requirements.\npublic class BatchMessagingMessageListenerAdapter extends MessagingMessageListenerAdapter implements ChannelAwareBatchMessageListener; // A listener adapter for batch listeners.\npublic class ContinuationHandlerMethodArgumentResolver extends Object implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver; // No-op resolver for method arguments of type Continuation.\npublic class DelegatingInvocableHandler extends Object; // Delegates to an InvocableHandlerMethod based on the message payload type.\npublic class HandlerAdapter extends Object; // A wrapper for either an InvocableHandlerMethod or DelegatingInvocableHandler.\npublic final class InvocationResult extends Object; // The result of a listener method invocation.\npublic class KotlinAwareInvocableHandlerMethod extends org.springframework.messaging.handler.invocation.InvocableHandlerMethod; // An InvocableHandlerMethod extension for supporting Kotlin suspend function.\npublic class MessageListenerAdapter extends AbstractAdaptableMessageListener; // Message listener adapter that delegates the handling of messages to target listener methods via reflection, with flexible message type conversion.\npublic class MessagingMessageListenerAdapter extends AbstractAdaptableMessageListener; // A MessageListener adapter that invokes a configurable HandlerAdapter.\npublic class ReplyFailureException extends org.springframework.amqp.AmqpException; // Exception to be thrown when the reply of a message failed to be sent.\n@FunctionalInterface public interface ReplyingMessageListener<T,R>; // A Message Listener that returns a reply - intended for lambda use in a MessageListenerAdapter.\npublic interface ReplyPostProcessor extends BiFunction<org.springframework.amqp.core.Message,org.springframework.amqp.core.Message,org.springframework.amqp.core.Message>; // A post processor for replies.\n", "des": "Provides classes for adapting listeners."}
{"index": 1838, "repo": "spring-test-6.0.11", "code": "package cache;\n\npublic interface ContextCache; // ContextCache defines the SPI for caching Spring ApplicationContexts within the Spring TestContext Framework.\npublic abstract class ContextCacheUtils extends Object; // Collection of utilities for working with ContextCaches.\npublic class DefaultCacheAwareContextLoaderDelegate extends Object implements CacheAwareContextLoaderDelegate; // Default implementation of the CacheAwareContextLoaderDelegate interface.\npublic class DefaultContextCache extends Object implements ContextCache; // Default implementation of the ContextCache API.\n", "des": "Support for context caching within the Spring TestContext Framework."}
{"index": 2547, "repo": "pulsar-common-3.0.0", "code": "package url;\n\npublic class DataURLStreamHandler extends URLStreamHandler; // Extension of the URLStreamHandler class to handle all stream protocol handlers.\npublic class PulsarURLStreamHandlerFactory extends Object implements URLStreamHandlerFactory; // This class defines a factory for URL stream protocol handlers.\npublic class URL extends Object; // Wrapper around java.net.URL to improve usability.\n", "des": "Classes to work with URLs."}
{"index": 2737, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class ClassifierCompositeItemProcessorBuilder<I,O> extends Object; // Creates a fully qualified ClassifierCompositeItemProcessor.\npublic class ClassifierCompositeItemWriterBuilder<T> extends Object; // Creates a fully qualified ClassifierCompositeItemWriter.\npublic class CompositeItemProcessorBuilder<I,O> extends Object; // Creates a fully qualified CompositeItemProcessorBuilder.\npublic class CompositeItemWriterBuilder<T> extends Object; // Creates a fully qualified CompositeItemWriter.\npublic class ScriptItemProcessorBuilder<I,O> extends Object; // Creates a fully qualified ScriptItemProcessor.\npublic class SingleItemPeekableItemReaderBuilder<T> extends Object; // Creates a fully qualified SingleItemPeekeableItemReader.\npublic class SynchronizedItemStreamReaderBuilder<T> extends Object; // Creates a fully qualified SynchronizedItemStreamReader.\npublic class SynchronizedItemStreamWriterBuilder<T> extends Object; // Creates a fully qualified SynchronizedItemStreamWriter.\n", "des": "Builders for support classes."}
{"index": 1122, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package records;\n\nClass AuxServiceConfiguration; // Set of configuration properties that can be injected into the service components via envs, files and custom pluggable helper docker containers.\nClass AuxServiceFile; // A config file that needs to be created and made available as a volume in an service component container.\nClass AuxServiceRecord; // An Service resource has the following attributes.\nClass AuxServiceRecords; // A list of Services.\nEnum AuxServiceFile.TypeEnum; // Config Type.\n", "des": "Package used for auxiliary services manifest records."}
{"index": 3201, "repo": "tomcat-api-10.1", "code": "package impl;\n\nClass FileItemIteratorImpl; // The iterator, which is returned by FileUploadBase.getItemIterator(RequestContext).\nClass FileItemStreamImpl; // Default implementation of FileItemStream.\nClass FileCountLimitExceededException; // This exception is thrown if a request contains more files than the specified limit.\nClass FileSizeLimitExceededException; // Thrown to indicate that A files size exceeds the configured maximum.\nClass FileUploadIOException; // This exception is thrown for hiding an inner FileUploadException in an IOException.\nClass InvalidContentTypeException; // Thrown to indicate that the request is not a multipart request.\nClass IOFileUploadException; // Thrown to indicate an IOException.\nClass SizeException; // This exception is thrown, if a requests permitted size is exceeded.\nClass SizeLimitExceededException; // Thrown to indicate that the request size exceeds the configured maximum.\n", "des": "Implementations and exceptions utils."}
{"index": 3072, "repo": "spring-ws-core-4.0.5", "code": "package jaxb;\n\npublic class XmlRootElementEndpointMapping extends AbstractAnnotationMethodEndpointMapping<QName>; // Implementation of the EndpointMapping interface that uses the JAXB2 XmlRootElement annotation to map methods to request payload root elements.\n", "des": "Provides JAXB2-based EndpointMapping implementations."}
{"index": 2675, "repo": "spring-r2dbc-6.0.11", "code": "package lookup;\n\npublic abstract class AbstractRoutingConnectionFactory extends Object implements ConnectionFactory, org.springframework.beans.factory.InitializingBean; // Abstract ConnectionFactory implementation that routes AbstractRoutingConnectionFactory.create() calls to one of various target factories based on a lookup key.\npublic class BeanFactoryConnectionFactoryLookup extends Object implements ConnectionFactoryLookup, org.springframework.beans.factory.BeanFactoryAware; // ConnectionFactoryLookup implementation based on a Spring BeanFactory.\n@FunctionalInterface public interface ConnectionFactoryLookup; // Strategy interface for looking up ConnectionFactory by name.\npublic class ConnectionFactoryLookupFailureException extends org.springframework.dao.NonTransientDataAccessException; // Exception to be thrown by a ConnectionFactoryLookup implementation, indicating that the specified ConnectionFactory could not be obtained.\npublic class MapConnectionFactoryLookup extends Object implements ConnectionFactoryLookup; // Simple ConnectionFactoryLookup implementation that relies on a map for doing lookups.\npublic class SingleConnectionFactoryLookup extends Object implements ConnectionFactoryLookup; // An implementation of ConnectionFactoryLookup that simply wraps a single given ConnectionFactory returned for any connection factory name.\n", "des": "Provides a strategy for looking up R2DBC ConnectionFactories by name."}
{"index": 1784, "repo": "spring-integration-file-6.1.2", "code": "package filters;\n\npublic abstract class AbstractDirectoryAwareFileListFilter<F> extends AbstractFileListFilter<F>; // A file list filter that can be configured to always accept (pass) directories.\npublic abstract class AbstractFileListFilter<F> extends Object implements FileListFilter<F>; // A convenience base class for any FileListFilter whose criteria can be evaluated against each File in isolation.\npublic abstract class AbstractMarkerFilePresentFileListFilter<F> extends Object implements FileListFilter<F>; // A FileListFilter that only passes files matched by one or more FileListFilter if a corresponding marker file is also present to indicate a file transfer is complete.\npublic abstract class AbstractPersistentAcceptOnceFileListFilter<F> extends AbstractDirectoryAwareFileListFilter<F> implements ReversibleFileListFilter<F>, ResettableFileListFilter<F>, Closeable; // Stores \"seen\" files in a MetadataStore to survive application restarts.\npublic abstract class AbstractRegexPatternFileListFilter<F> extends AbstractDirectoryAwareFileListFilter<F>; // Filters a listing of files by qualifying their 'name' against a regular expression (an instance of Pattern).\npublic abstract class AbstractSimplePatternFileListFilter<F> extends AbstractDirectoryAwareFileListFilter<F>; // Base class for filters that support ant style path expressions, which are less powerful but more readable than regular expressions.\npublic class AcceptAllFileListFilter<F> extends AbstractFileListFilter<F>; // Simple implementation of FileListFilter that always returns true.\npublic class AcceptOnceFileListFilter<F> extends AbstractFileListFilter<F> implements ReversibleFileListFilter<F>, ResettableFileListFilter<F>; // FileListFilter that passes files only one time.\npublic class ChainFileListFilter<F> extends CompositeFileListFilter<F>; // The CompositeFileListFilter extension which chains the result of the previous filter to the next one.\npublic class CompositeFileListFilter<F> extends Object implements ReversibleFileListFilter<F>, ResettableFileListFilter<F>, DiscardAwareFileListFilter<F>, Closeable; // Simple FileListFilter that predicates its matches against all of the configured FileListFilter.\npublic interface DiscardAwareFileListFilter<F> extends FileListFilter<F>; // The FileListFilter modification which can accept a Consumer which can be called when the filter discards the file.\n", "des": "Provides classes supporting file filtering."}
{"index": 1548, "repo": "spring-context-6.0.11", "code": "package groovy;\n\n@FunctionalInterface public interface GroovyObjectCustomizer; // Strategy used by GroovyScriptFactory to allow the customization of a created GroovyObject.\npublic class GroovyScriptEvaluator extends Object implements ScriptEvaluator, org.springframework.beans.factory.BeanClassLoaderAware; // Groovy-based implementation of Spring's ScriptEvaluator strategy interface.\npublic class GroovyScriptFactory extends Object implements ScriptFactory, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanClassLoaderAware; // ScriptFactory implementation for a Groovy script.\n", "des": "Package providing integration of Groovy into Spring's scripting infrastructure."}
{"index": 1554, "repo": "spring-context-6.0.11", "code": "package validation;\n\npackage validation.annotation; // Support classes for annotation-based constraint evaluation, e.g.\npackage validation.beanvalidation; // Support classes for integrating a JSR-303 Bean Validation provider (such as Hibernate Validator) into a Spring ApplicationContext and in particular with Spring's data binding and validation APIs.\npackage validation.support; // Support classes for handling validation results.\npublic abstract class AbstractBindingResult extends AbstractErrors implements BindingResult, Serializable; // Abstract implementation of the BindingResult interface and its super-interface Errors.\npublic abstract class AbstractErrors extends Object implements Errors, Serializable; // Abstract implementation of the Errors interface.\npublic abstract class AbstractPropertyBindingResult extends AbstractBindingResult; // Abstract base class for BindingResult implementations that work with Spring's PropertyAccessor mechanism.\npublic class BeanPropertyBindingResult extends AbstractPropertyBindingResult implements Serializable; // Default implementation of the Errors and BindingResult interfaces, for the registration and evaluation of binding errors on JavaBean objects.\npublic class BindException extends Exception implements BindingResult; // Thrown when binding errors are considered fatal.\npublic interface BindingErrorProcessor; // Strategy for processing DataBinder's missing field errors, and for translating a PropertyAccessException to a FieldError.\npublic interface BindingResult extends Errors; // General interface that represents binding results.\npublic abstract class BindingResultUtils extends Object; // Convenience methods for looking up BindingResults in a model Map.\npublic class DataBinder extends Object implements org.springframework.beans.PropertyEditorRegistry, org.springframework.beans.TypeConverter; // Binder that allows for setting property values on a target object, including support for validation and binding result analysis.\npublic class DefaultBindingErrorProcessor extends Object implements BindingErrorProcessor; // Default BindingErrorProcessor implementation.\npublic class DefaultMessageCodesResolver extends Object implements MessageCodesResolver, Serializable; // Default implementation of the MessageCodesResolver interface.\npublic static enum DefaultMessageCodesResolver.Format extends Enum<DefaultMessageCodesResolver.Format> implements MessageCodeFormatter; // Common message code formats.\npublic class DirectFieldBindingResult extends AbstractPropertyBindingResult; // Special implementation of the Errors and BindingResult interfaces, supporting registration and evaluation of binding errors on value objects.\npublic interface Errors; // Stores and exposes information about data-binding and validation errors for a specific object.\n", "des": "Provides data binding and validation functionality, for usage in business and/or UI layers."}
{"index": 3495, "repo": "poi-5.2.3", "code": "package aggregates;\n\nInterface RecordAggregate.RecordVisitor;\nClass CFRecordsAggregate; // CFRecordsAggregate - aggregates Conditional Formatting records CFHeaderRecord and number of up CFRuleRecord records together to simplify access to them.\nClass ChartSubstreamRecordAggregate; // Manages the all the records associated with a chart sub-stream.\nClass ColumnInfoRecordsAggregate;\nClass ConditionalFormattingTable; // Holds all the conditional formatting for a workbook sheet.\nClass CustomViewSettingsRecordAggregate; // Manages the all the records associated with a 'Custom View Settings' sub-stream.\nClass DataValidityTable; // Manages the DVALRecord and DVRecords for a single sheet\nClass FormulaRecordAggregate; // The formula record aggregate is used to join together the formula record and it's (optional) string record and (optional) Shared Formula Record (template reads, excel optimization).\nClass MergedCellsTable;\nClass PageSettingsBlock; // Groups the page settings records for a worksheet.\nClass RecordAggregate; // RecordAggregates are groups of of BIFF Records that are typically stored together and/or updated together.\nClass RecordAggregate.PositionTrackingVisitor; // A wrapper for RecordAggregate.RecordVisitor which accumulates the sizes of all records visited.\nClass RowRecordsAggregate;\nClass SharedValueManager; // Manages various auxiliary records while constructing a RowRecordsAggregate: SharedFormulaRecords ArrayRecords TableRecords\nClass ValueRecordsAggregate; // Aggregate value records together.\nClass WorksheetProtectionBlock; // Groups the sheet protection records for a worksheet.\n", "des": "The record aggregates are not real \"records\" but collections of records that act as a single record."}
{"index": 79, "repo": "ignite-core-2.15.0", "code": "package loadbalancing;\n\npackage loadbalancing.adaptive; // Contains adaptive load balancing SPI.\npackage loadbalancing.roundrobin; // Contains default round-robin implementation for load balancing SPI.\npackage loadbalancing.weightedrandom; // Contains weighted random-base implementation for load balancing SPI.\nInterface LoadBalancingSpi; // Load balancing SPI provides the next best balanced node for job execution.\n", "des": "Contains APIs for load balancing SPI."}
{"index": 907, "repo": "commons-compress-1.23.0", "code": "package cpio;\n\nInterface CpioConstants; // All constants needed by CPIO.\nClass CpioArchiveEntry; // A cpio archive consists of a sequence of files.\nClass CpioArchiveInputStream; // CpioArchiveInputStream is a stream for reading cpio streams.\nClass CpioArchiveOutputStream; // CpioArchiveOutputStream is a stream for writing CPIO streams.\n", "des": "Provides stream classes for reading and writing archives using the CPIO format."}
{"index": 1868, "repo": "spring-security-cas-6.1.2", "code": "package web;\n\npackage web.authentication; // Authentication processing mechanisms which respond to the submission of authentication credentials using CAS.\npublic class CasAuthenticationEntryPoint extends Object implements org.springframework.security.web.AuthenticationEntryPoint, org.springframework.beans.factory.InitializingBean; // Used by the ExceptionTranslationFilter to commence authentication via the JA-SIG Central Authentication Service (CAS).\npublic class CasAuthenticationFilter extends org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter; // Processes a CAS service ticket, obtains proxy granting tickets, and processes proxy tickets.\n", "des": "Authenticates standard web browser users via CAS."}
{"index": 776, "repo": "lucene-analyzers-common-8.11.2", "code": "package eu;\n\nClass BasqueAnalyzer; // Analyzer for Basque.\n", "des": "Analyzer for Basque."}
{"index": 3113, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package xsd;\n\nClass ConfigXsdSupport; // Support for XSD handling related to Hibernate's `cfg.xml` and JPA's `persistence.xml`.\nClass LocalXsdResolver; // When Hibernate loads an XSD we fully expect that to be resolved from our jar file via ClassLoader resource look-up.\nClass MappingXsdSupport; // Support for XSD handling related to Hibernate's `hbm.xml` and JPA's `orm.xml`.\nClass XsdDescriptor; // Representation of a locally resolved XSD\n", "des": "Support for XSD handling, specifically for ORM mappings (Hibernate's `hbm.xml` and JPA's `orm.xml`) and config files (Hibernate's `cfg.xml` and JPA's `persistence.xml`)"}
{"index": 1288, "repo": "spring-core-6.0.11", "code": "package filter;\n\npublic abstract class AbstractClassTestingTypeFilter extends Object implements TypeFilter; // Type filter that exposes a ClassMetadata object to subclasses, for class testing purposes.\npublic abstract class AbstractTypeHierarchyTraversingFilter extends Object implements TypeFilter; // Type filter that is aware of traversing over hierarchy.\npublic class AnnotationTypeFilter extends AbstractTypeHierarchyTraversingFilter; // A simple TypeFilter which matches classes with a given annotation, checking inherited annotations as well.\npublic class AspectJTypeFilter extends Object implements TypeFilter; // Type filter that uses AspectJ type pattern for matching.\npublic class AssignableTypeFilter extends AbstractTypeHierarchyTraversingFilter; // A simple filter which matches classes that are assignable to a given type.\npublic class RegexPatternTypeFilter extends AbstractClassTestingTypeFilter; // A simple filter for matching a fully-qualified class name with a regex Pattern.\n@FunctionalInterface public interface TypeFilter; // Base interface for type filters using a MetadataReader.\n", "des": "Core support package for type filtering (e.g."}
{"index": 3793, "repo": "lucene-analysis-common-9.7.0", "code": "package hy;\n\nClass ArmenianAnalyzer; // Analyzer for Armenian.\n", "des": "Analyzer for Armenian."}
{"index": 3140, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package enhanced;\n\nInterface AccessCallback; // Contract for providing callback access to a DatabaseStructure, typically from the Optimizer.\nInterface DatabaseStructure; // Encapsulates definition of the underlying data structure backing a sequence-style generator.\nInterface InitialValueAwareOptimizer; // Marker interface for optimizer which wishes to know the user-specified initial value.\nInterface Optimizer; // Performs optimization on an optimizable identifier generator.\nClass AbstractOptimizer; // Common support for optimizer implementations.\nClass HiLoOptimizer; // Optimizer which applies a 'hilo' algorithm in memory to achieve optimization.\nClass LegacyHiLoAlgorithmOptimizer; // Slight variation from HiLoOptimizer, maintaining compatibility with the values generated by the legacy Hibernate hilo based generators.\nClass NoopOptimizer; // An optimizer that performs no optimization.\nClass OptimizerFactory; // Factory for Optimizer instances.\nClass PooledLoOptimizer; // Variation of PooledOptimizer which interprets the incoming database value as the lo value, rather than the hi value.\nClass PooledLoThreadLocalOptimizer; // Variation of PooledOptimizer which interprets the incoming database value as the lo value, rather than the hi value, as well as using thread local to cache the generation state.\nClass PooledOptimizer; // Optimizer which uses a pool of values, storing the next low value of the range in the database.\nClass SequenceStructure; // Describes a sequence.\nClass SequenceStyleGenerator; // Generates identifier values based on a sequence-style database structure.\nClass TableGenerator; // An enhanced version of table-based id generation.\nClass TableStructure; // Describes a table used to mimic sequence behavior\nEnum StandardOptimizerDescriptor; // Enumeration of the standard Hibernate id generation optimizers.\n", "des": "Enhanced/improved versions of table and sequence based identifier generators targeting portability and unified configuration"}
{"index": 2979, "repo": "pulsar-broker-3.0.0", "code": "package impl;\n\npublic class InMemoryPendingAckStore extends Object implements PendingAckStore; // In memory implementation of PendingAckStore.\npublic class InMemoryPendingAckStoreProvider extends Object implements TransactionPendingAckStoreProvider;\npublic class MLPendingAckReplyCallBack extends Object implements PendingAckReplyCallBack; // MLPendingAckStore reply call back.\npublic class MLPendingAckStore extends Object implements PendingAckStore; // The implement of the pending ack store by manageLedger.\npublic class MLPendingAckStoreProvider extends Object implements TransactionPendingAckStoreProvider; // Provider is for MLPendingAckStore.\npublic class PendingAckHandleDisabled extends Object implements PendingAckHandle; // The disabled implementation of PendingAckHandle.\npublic class PendingAckHandleImpl extends PendingAckHandleState implements PendingAckHandle; // The default implementation of PendingAckHandle.\npublic abstract class PendingAckHandleState extends Object; // The implement of transaction pending ack store.\npublic static enum PendingAckHandleState.State extends Enum<PendingAckHandleState.State>; // The state of the pending ack handle PendingAckHandleState.\npublic class PendingAckHandleStatsImpl extends Object implements PendingAckHandleStats;\n", "des": "The implementation for processing pending acks in transactions."}
{"index": 1099, "repo": "hbase-server-3.0.0-alpha-4", "code": "package replication;\n\nInterface ReplicationEndpoint; // ReplicationEndpoint is a plugin which implements replication to other HBase clusters, or other systems.\nInterface WALCellFilter; // A filter for WAL entry cells before being sent over to replication.\nInterface WALEntryFilter; // A Filter for WAL entries before being sent over to replication.\nClass BaseReplicationEndpoint; // A Base implementation for ReplicationEndpoints.\nClass BulkLoadCellFilter;\nClass ChainWALEmptyEntryFilter; // A ChainWALEntryFilter for providing more flexible options\nClass ChainWALEntryFilter; // A WALEntryFilter which contains multiple filters and applies them in chain order\nClass ClusterMarkingEntryFilter; // Filters out entries with our peerClusterId (i.e.\nClass HBaseReplicationEndpoint; // A BaseReplicationEndpoint for replication endpoints whose target cluster is an HBase cluster.\nClass HBaseReplicationEndpoint.PeerRegionServerListener; // Tracks changes to the list of region servers in a peer's cluster.\nClass HBaseReplicationEndpoint.SinkPeer; // Wraps a replication region server sink to provide the ability to identify it.\nClass NamespaceTableCfWALEntryFilter; // Filter a WAL Entry by the peer config according to the table and family which it belongs to.\nClass ReplicationBarrierFamilyFormat; // Helper class for storing replication barriers in family 'rep_barrier' of meta table.\nClass ReplicationBarrierFamilyFormat.ReplicationBarrierResult;\nClass ReplicationEndpoint.Context;\nClass ReplicationEndpoint.ReplicateContext; // A context for ReplicationEndpoint.replicate(ReplicateContext) method.\nClass ReplicationOffsetUtil;\nClass ReplicationSinkServiceImpl;\nClass ScopeWALEntryFilter; // Keeps KVs that are scoped other than local\nClass SystemTableWALEntryFilter; // Skips WAL edits for all System tables including hbase:meta except hbase:acl.\nClass VerifyWALEntriesReplicationEndpoint; // A dummy ReplicationEndpoint that replicates nothing.\n", "des": "Multi Cluster Replication"}
{"index": 1167, "repo": "commons-math3-3.6.1", "code": "package hull;\n\nInterface ConvexHullGenerator2D; // Interface for convex hull generators in the two-dimensional euclidean space.\nClass AklToussaintHeuristic; // A simple heuristic to improve the performance of convex hull algorithms.\nClass ConvexHull2D; // This class represents a convex hull in an two-dimensional euclidean space.\nClass MonotoneChain; // Implements Andrew's monotone chain method to generate the convex hull of a finite set of points in the two-dimensional euclidean space.\n", "des": "This package provides algorithms to generate the convex hull for a set of points in an two-dimensional euclidean space."}
{"index": 2565, "repo": "pulsar-common-3.0.0", "code": "package schema;\n\npublic class BytesSchemaVersion extends Object implements SchemaVersion, Comparable<BytesSchemaVersion>; // Bytes schema version.\npublic static interface BytesSchemaVersion.ByteArrayComparator extends Comparator<byte[]>, Serializable; // This interface helps to compare byte arrays.\npublic class DeleteSchemaResponse extends Object; // Response for schema deletion.\npublic final class EmptyVersion extends Object implements SchemaVersion; // Empty schema version.\npublic class GetAllVersionsSchemaResponse extends Object; // Response containing all schemas.\npublic class GetSchemaResponse extends Object; // Response containing information about a schema.\npublic final class LatestVersion extends Object implements SchemaVersion; // Latest schema version.\npublic class LongSchemaVersionResponse extends Object; // Response containing the schema version field.\npublic class PostSchemaResponse extends Object; // Response with the version of a schema.\npublic class ProtobufNativeSchemaData extends Object; // POJO class used for serialize to json-string for SchemaInfo.schema when SchemaType is SchemaType.PROTOBUF_NATIVE.\npublic class SchemaData extends Object; // Schema data.\npublic class SchemaHash extends Object; // Schema hash wrapper with a HashCode inner type.\npublic interface SchemaStorage; // Schema storage.\npublic interface SchemaVersion; // Schema version.\npublic class StoredSchema extends Object; // Stored schema with version.\n", "des": "Classes to work with schemas."}
{"index": 2927, "repo": "groovy-4.0.13", "code": "package expr;\n\npublic class AnnotationConstantExpression extends ConstantExpression; // Represents an annotation \"constant\" that may appear in annotation attributes (mainly used as a marker).\npublic class ArgumentListExpression extends TupleExpression; // Represents one or more arguments being passed into a method\npublic class ArrayExpression extends Expression; // Represents an array object construction.\npublic class AttributeExpression extends PropertyExpression; // Represents an attribute access (accessing the field of a class) such as the expression \"foo.@bar\".\npublic class BinaryExpression extends Expression; // Represents two expressions and an operation\npublic class BitwiseNegationExpression extends Expression;\npublic class BooleanExpression extends Expression; // Represents a boolean expression\npublic class CastExpression extends Expression; // Represents a typecast expression.\npublic class ClassExpression extends Expression; // Represents access to a Java/Groovy class in an expression, such as when invoking a static method or accessing a static type\npublic class ClosureExpression extends Expression; // Represents a closure expression such as\npublic class ClosureListExpression extends ListExpression; // This class represents a list of expressions used to create closures.\npublic class ConstantExpression extends Expression; // Represents a constant expression such as null, true, false.\npublic class ConstructorCallExpression extends Expression implements MethodCall; // A constructor call.\npublic class DeclarationExpression extends BinaryExpression; // Represents one or more local variables.\npublic class ElvisOperatorExpression extends TernaryExpression; // Represents a short ternary expression x ?: y, which is equal to\npublic class EmptyExpression extends Expression; // Placeholder for an empty expression.\npublic abstract class Expression extends AnnotatedNode; // Represents a base class for expressions which evaluate as an object\npublic interface ExpressionTransformer; // Provides a way to transform expressions\npublic class FieldExpression extends Expression; // Represents a field access such as the expression \"this.foo\".\npublic class GStringExpression extends Expression; // Represents a String expression which contains embedded values inside it such as \"hello there ${user} how are you\" which is expanded lazily\npublic class LambdaExpression extends ClosureExpression; // Represents a lambda expression such as one of these:\npublic class ListExpression extends Expression; // Represents a list expression [1, 2, 3] which creates a mutable List\n", "des": "AST nodes for Groovy expressions"}
{"index": 2678, "repo": "spring-session-core-3.1.1", "code": "package session;\n\npublic class SpringSessionWebSessionStore<S extends Session> extends Object implements org.springframework.web.server.session.WebSessionStore; // The WebSessionStore implementation that provides the WebSession implementation backed by a Session returned by the ReactiveSessionRepository.\n", "des": "Spring Session reactive web support."}
{"index": 2752, "repo": "spring-batch-infrastructure-5.0.2", "code": "package support;\n\npackage support.transaction; // Infrastructure implementations of support transaction concerns.\npublic class AnnotationMethodResolver extends Object implements MethodResolver; // MethodResolver implementation that finds a single Method on the given Class that contains the specified annotation type.\npublic enum DatabaseType extends Enum<DatabaseType>; // Enum representing a database type, such as DB2 or oracle.\npublic class DefaultPropertyEditorRegistrar extends Object implements org.springframework.beans.PropertyEditorRegistrar; // A re-usable PropertyEditorRegistrar that can be used wherever one needs to register custom PropertyEditor instances with a PropertyEditorRegistry (like a bean wrapper, or a type converter).\npublic class IntArrayPropertyEditor extends PropertyEditorSupport;\npublic class LastModifiedResourceComparator extends Object implements Comparator<org.springframework.core.io.Resource>; // Comparator to sort resources by the file last modified time.\npublic interface MethodInvoker; // A strategy interface for invoking a method.\npublic class MethodInvokerUtils extends Object; // Utility methods for create MethodInvoker instances.\npublic interface MethodResolver; // Strategy interface for detecting a single Method on a Class.\npublic class PatternMatcher<S> extends Object;\npublic final class PropertiesConverter extends Object; // Utility to convert a Properties object to a String and back.\npublic class ReflectionUtils extends Object; // Provides reflection based utilities for Spring Batch that are not available via Spring Core\npublic class SimpleMethodInvoker extends Object implements MethodInvoker; // Simple implementation of the MethodInvoker interface that invokes a method on an object.\npublic class SystemPropertyInitializer extends Object implements org.springframework.beans.factory.InitializingBean; // Helper class that sets up a System property with a default value.\n", "des": "Infrastructure implementations of support concerns."}
{"index": 2381, "repo": "spring-batch-core-5.0.2", "code": "package configuration;\n\npackage configuration.annotation; // Annotations and builder factories for java based configuration\npackage configuration.support; // Specific implementations of configuration concerns.\npackage configuration.xml; // Parsers for XML based configuration\npublic class BatchConfigurationException extends RuntimeException; // Represents that an error has occurred in the configuration of the base batch infrastructure (the creation of a JobRepository, for example).\npublic class DuplicateJobException extends JobExecutionException; // Checked exception that indicates a name clash when registering Job instances.\npublic interface JobFactory; // Strategy for creating a single job.\npublic interface JobLocator; // A runtime service locator interface for retrieving job configurations by name.\npublic interface JobRegistry extends ListableJobLocator; // A runtime service registry interface for registering job configurations by name.\npublic interface ListableJobLocator extends JobLocator; // A listable extension of JobLocator.\npublic interface StepRegistry; // Registry keeping track of all the Step instances defined in a Job.\n", "des": "Interfaces for registration and location of job configurations."}
{"index": 1366, "repo": "spring-tx-6.0.11", "code": "package support;\n\npublic abstract class AbstractPlatformTransactionManager extends Object implements PlatformTransactionManager, Serializable; // Abstract base class that implements Spring's standard transaction workflow, serving as basis for concrete platform transaction managers like JtaTransactionManager.\nprotected static final class AbstractPlatformTransactionManager.SuspendedResourcesHolder extends Object; // Holder for suspended resources.\npublic abstract class AbstractTransactionStatus extends Object implements TransactionStatus; // Abstract base implementation of the TransactionStatus interface.\npublic interface CallbackPreferringPlatformTransactionManager extends PlatformTransactionManager; // Extension of the PlatformTransactionManager interface, exposing a method for executing a given callback within a transaction.\npublic class DefaultTransactionDefinition extends Object implements TransactionDefinition, Serializable; // Default implementation of the TransactionDefinition interface, offering bean-style configuration and sensible default values (PROPAGATION_REQUIRED, ISOLATION_DEFAULT, TIMEOUT_DEFAULT, readOnly=false).\npublic class DefaultTransactionStatus extends AbstractTransactionStatus; // Default implementation of the TransactionStatus interface, used by AbstractPlatformTransactionManager.\npublic abstract class DelegatingTransactionDefinition extends Object implements TransactionDefinition, Serializable; // TransactionDefinition implementation that delegates all calls to a given target TransactionDefinition instance.\npublic interface ResourceHolder; // Generic interface to be implemented by resource holders.\npublic abstract class ResourceHolderSupport extends Object implements ResourceHolder; // Convenient base class for resource holders.\npublic abstract class ResourceHolderSynchronization<H extends ResourceHolder,K> extends Object implements TransactionSynchronization; // TransactionSynchronization implementation that manages a ResourceHolder bound through TransactionSynchronizationManager.\npublic interface ResourceTransactionDefinition extends TransactionDefinition; // Extended variant of TransactionDefinition, indicating a resource transaction and in particular whether the transactional resource is ready for local optimizations.\npublic interface ResourceTransactionManager extends PlatformTransactionManager; // Extension of the PlatformTransactionManager interface, indicating a native resource transaction manager, operating on a single target resource.\npublic class SimpleTransactionScope extends Object implements org.springframework.beans.factory.config.Scope; // A simple transaction-backed Scope implementation, delegating to TransactionSynchronizationManager's resource binding mechanism.\npublic class SimpleTransactionStatus extends AbstractTransactionStatus; // A simple TransactionStatus implementation.\npublic interface SmartTransactionObject extends Flushable; // Interface to be implemented by transaction objects that are able to return an internal rollback-only marker, typically from another transaction that has participated and marked it as rollback-only.\n", "des": "Support classes for the org.springframework.transaction package."}
{"index": 717, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package transaction;\n\nClass TransactionHandleMessageAdvice; // A TransactionInterceptor extension with HandleMessageAdvice marker.\nClass TransactionInterceptorBuilder; // Provides a fluent API to build a transaction interceptor.\n", "des": "Provides classes supporting Transactions."}
{"index": 3096, "repo": "spring-ws-core-4.0.5", "code": "package support;\n\npublic class EnumerationIterator<T> extends Object implements Iterator<T>; // Adapts an Enumeration to follow the interface of Iterator.\npublic abstract class TransportUtils extends Object; // Generic utility methods for working with Web service transports.\npublic abstract class WebServiceMessageReceiverObjectSupport extends Object implements org.springframework.beans.factory.InitializingBean; // Convenience base class for server-side transport objects.\n", "des": "Classes supporting the org.springframework.ws.transport package."}
{"index": 2596, "repo": "spring-rabbit-3.0.6", "code": "package log4j2;\n\n@Plugin(name=\"RabbitMQ\", category=\"Core\", elementType=\"appender\", printObject=true) public class AmqpAppender extends org.apache.logging.log4j.core.appender.AbstractAppender; // A Log4j 2 appender that publishes logging events to an AMQP Exchange.\nprotected static class AmqpAppender.AmqpManager extends org.apache.logging.log4j.core.appender.AbstractManager; // Manager class for the appender.\nprotected static class AmqpAppender.Builder extends Object implements org.apache.logging.log4j.core.util.Builder<AmqpAppender>;\nprotected static class AmqpAppender.Event extends Object; // Helper class to encapsulate a LoggingEvent, its MDC properties, and the number of retries.\n", "des": "Provides classes supporting Log4j 2 appenders."}
{"index": 1963, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package quartz;\n\npublic enum JobStoreType extends Enum<JobStoreType>; // Define the supported Quartz JobStore.\n@AutoConfiguration(after={DataSourceAutoConfiguration.class,HibernateJpaAutoConfiguration.class,LiquibaseAutoConfiguration.class,FlywayAutoConfiguration.class}) @ConditionalOnClass({org.quartz.Scheduler.class,org.springframework.scheduling.quartz.SchedulerFactoryBean.class,org.springframework.transaction.PlatformTransactionManager.class}) @EnableConfigurationProperties(QuartzProperties.class) public class QuartzAutoConfiguration extends Object; // Auto-configuration for Quartz Scheduler.\n@Configuration(proxyBeanMethods=false) @ConditionalOnSingleCandidate(javax.sql.DataSource.class) @ConditionalOnProperty(prefix=\"spring.quartz\", name=\"job-store-type\", havingValue=\"jdbc\") @Import(org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer.class) protected static class QuartzAutoConfiguration.JdbcStoreTypeConfiguration extends Object;\n@Target({FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Qualifier public @interface QuartzDataSource; // Qualifier annotation for a DataSource to be injected into Quartz auto-configuration.\npublic class QuartzDataSourceScriptDatabaseInitializer extends org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer; // DataSourceScriptDatabaseInitializer for the Quartz Scheduler database.\n@ConfigurationProperties(\"spring.quartz\") public class QuartzProperties extends Object; // Configuration properties for the Quartz Scheduler integration.\npublic static class QuartzProperties.Jdbc extends Object;\n@Target({FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Qualifier public @interface QuartzTransactionManager; // Qualifier annotation for a TransactionManager to be injected into Quartz auto-configuration.\n@FunctionalInterface public interface SchedulerFactoryBeanCustomizer; // Callback interface that can be implemented by beans wishing to customize the Quartz SchedulerFactoryBean before it is fully initialized, in particular to tune its configuration.\n", "des": "Auto-configuration for Quartz Scheduler."}
{"index": 2248, "repo": "spring-data-keyvalue-3.1.2", "code": "package config;\n\npublic abstract class KeyValueRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport; // RepositoryConfigurationExtension for KeyValueRepository.\n@Documented @Retention(RUNTIME) @Target(ANNOTATION_TYPE) public @interface QueryCreatorType; // Annotation to customize the query creator type to be used for a specific store.\n", "des": "Support infrastructure for the configuration of key/value specific repositories."}
{"index": 3020, "repo": "spring-web-6.0.11", "code": "package accept;\n\npublic abstract class AbstractMappingContentNegotiationStrategy extends MappingMediaTypeFileExtensionResolver implements ContentNegotiationStrategy; // Base class for ContentNegotiationStrategy implementations with the steps to resolve a request to media types.\npublic class ContentNegotiationManager extends Object implements ContentNegotiationStrategy, MediaTypeFileExtensionResolver; // Central class to determine requested media types for a request.\npublic class ContentNegotiationManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ContentNegotiationManager>, ServletContextAware, org.springframework.beans.factory.InitializingBean; // Factory to create a ContentNegotiationManager and configure it with ContentNegotiationStrategy instances.\n@FunctionalInterface public interface ContentNegotiationStrategy; // A strategy for resolving the requested media types for a request.\npublic class FixedContentNegotiationStrategy extends Object implements ContentNegotiationStrategy; // A ContentNegotiationStrategy that returns a fixed content type.\npublic class HeaderContentNegotiationStrategy extends Object implements ContentNegotiationStrategy; // A ContentNegotiationStrategy that checks the 'Accept' request header.\npublic class MappingMediaTypeFileExtensionResolver extends Object implements MediaTypeFileExtensionResolver; // An implementation of MediaTypeFileExtensionResolver that maintains lookups between file extensions and MediaTypes in both directions.\npublic interface MediaTypeFileExtensionResolver; // Strategy to resolve a MediaType to a list of file extensions â€” for example, to resolve \"application/json\" to \"json\".\npublic class ParameterContentNegotiationStrategy extends AbstractMappingContentNegotiationStrategy; // Strategy that resolves the requested content type from a query parameter.\n@Deprecated public class PathExtensionContentNegotiationStrategy extends AbstractMappingContentNegotiationStrategy;\n@Deprecated public class ServletPathExtensionContentNegotiationStrategy extends PathExtensionContentNegotiationStrategy;\n", "des": "This package contains classes used to determine the requested the media types in a request."}
{"index": 45, "repo": "ignite-core-2.15.0", "code": "package compute;\n\nInterface ComputeJob; // Defines executable unit for ComputeTask.\nInterface ComputeJobContext; // Context attached to every job executed on the grid.\nInterface ComputeJobContinuation; // Defines continuation support for grid job context.\nInterface ComputeJobMasterLeaveAware; // Annotation for handling master node leave during job execution.\nInterface ComputeJobResult; // Result of remote job which gets passed into ComputeTask.result(ComputeJobResult, List) method.\nInterface ComputeJobSibling; // Job sibling interface defines a job from the same split.\nInterface ComputeLoadBalancer; // Load balancer is used for finding the best balanced node according to load balancing policy.\nInterface ComputeTask<T,R>; // Grid task interface defines a task that can be executed on the grid.\nInterface ComputeTaskContinuousMapper; // Defines a mapper that can be used for asynchronous job sending.\nInterface ComputeTaskFuture<R>; // This class defines a handler for asynchronous task execution.\nInterface ComputeTaskSession; // Defines a distributed session for particular task execution.\nInterface ComputeTaskSessionAttributeListener; // This interface defines listener for task session attributes.\nClass ComputeJobAdapter; // Convenience adapter for ComputeJob implementations.\nClass ComputeJobContinuationAdapter; // Convenience adapter for ComputeJob implementations.\nClass ComputeTaskAdapter<T,R>; // Convenience adapter for ComputeTask interface.\nClass ComputeTaskSplitAdapter<T,R>; // This class defines simplified adapter for ComputeTask.\nEnum ComputeJobResultPolicy; // This enumeration provides different types of actions following the last received job result.\nEnum ComputeTaskSessionScope; // Defines life-time scopes for checkpoint operations.\nClass ComputeExecutionRejectedException; // This exception defines execution rejection.\nClass ComputeJobFailoverException; // This runtime exception can be thrown from ComputeJob.execute() method to force job failover to another node within task topology.\nClass ComputeTaskCancelledException; // This exception indicates that grid task was cancelled.\nClass ComputeTaskTimeoutException; // This exception indicates that task execution timed out.\nClass ComputeUserUndeclaredException; // This exception is thrown when user's code throws undeclared runtime exception.\nAnnotation Type ComputeJobAfterSend; // This annotation allows to call a method right after the job has been successfully sent for execution.\n", "des": "Contains Compute Grid functionality."}
{"index": 1860, "repo": "spring-test-6.0.11", "code": "package client;\n\npublic class MockMvcHttpConnector extends Object implements org.springframework.http.client.reactive.ClientHttpConnector; // Connector that handles requests by invoking a MockMvc rather than making actual requests over HTTP.\npublic interface MockMvcWebTestClient; // The main class for testing Spring MVC applications via WebTestClient with MockMvc for server request handling.\npublic static interface MockMvcWebTestClient.ControllerSpec extends MockMvcWebTestClient.MockMvcServerSpec<MockMvcWebTestClient.ControllerSpec>; // Specification for configuring MockMvc to test one or more controllers directly, and a simple facade around StandaloneMockMvcBuilder.\npublic static interface MockMvcWebTestClient.MockMvcServerSpec<B extends MockMvcWebTestClient.MockMvcServerSpec<B>>; // Base specification for configuring MockMvc, and a simple facade around ConfigurableMockMvcBuilder.\n", "des": "Support for testing Spring MVC applications via WebTestClient with MockMvc for server request handling."}
{"index": 1981, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package session;\n\n@FunctionalInterface public interface DefaultCookieSerializerCustomizer; // Callback interface that can be implemented by beans wishing to customize the DefaultCookieSerializer configuration.\n@ConfigurationProperties(prefix=\"spring.session.hazelcast\") public class HazelcastSessionProperties extends Object; // Configuration properties for Hazelcast backed Spring Session.\npublic class JdbcSessionDataSourceScriptDatabaseInitializer extends org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer; // DataSourceScriptDatabaseInitializer for the Spring Session JDBC database.\n@ConfigurationProperties(prefix=\"spring.session.jdbc\") public class JdbcSessionProperties extends Object; // Configuration properties for JDBC backed Spring Session.\n@ConfigurationProperties(prefix=\"spring.session.mongodb\") public class MongoSessionProperties extends Object; // Configuration properties for Mongo-backed Spring Session.\n@ConfigurationProperties(prefix=\"spring.session.redis\") public class RedisSessionProperties extends Object; // Configuration properties for Redis backed Spring Session.\npublic static enum RedisSessionProperties.ConfigureAction extends Enum<RedisSessionProperties.ConfigureAction>; // Strategies for configuring and validating Redis.\npublic static enum RedisSessionProperties.RepositoryType extends Enum<RedisSessionProperties.RepositoryType>; // Type of Redis session repository to auto-configure.\n@AutoConfiguration(after={DataSourceAutoConfiguration.class,HazelcastAutoConfiguration.class,JdbcTemplateAutoConfiguration.class,MongoDataAutoConfiguration.class,MongoReactiveDataAutoConfiguration.class,RedisAutoConfiguration.class,RedisReactiveAutoConfiguration.class,WebSessionIdResolverAutoConfiguration.class}, before={HttpHandlerAutoConfiguration.class,WebFluxAutoConfiguration.class}) @ConditionalOnClass(org.springframework.session.Session.class) @ConditionalOnWebApplication @EnableConfigurationProperties({ServerProperties.class,SessionProperties.class,WebFluxProperties.class}) public class SessionAutoConfiguration extends Object; // Auto-configuration for Spring Session.\n@ConfigurationProperties(prefix=\"spring.session\") public class SessionProperties extends Object; // Configuration properties for Spring Session.\npublic static class SessionProperties.Servlet extends Object; // Servlet-related properties.\n", "des": "Auto-configuration for Spring Session."}
{"index": 2015, "repo": "spring-boot-devtools-3.1.1", "code": "package restart;\n\npackage restart.classloader; // Classloaders used for reload support.\npackage restart.server; // Remote restart server.\npublic abstract class AgentReloader extends Object; // Utility to determine if a Java agent based reloader (e.g.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.devtools.restart.OnInitializedRestarterCondition.class) public @interface ConditionalOnInitializedRestarter; // @Conditional that only matches when the RestartInitializer has been applied with non null URLs.\npublic class DefaultRestartInitializer extends Object implements RestartInitializer; // Default RestartInitializer that only enable initial restart when running a standard \"main\" method.\n@FunctionalInterface public interface FailureHandler; // Strategy used to handle launch failures.\npublic static enum FailureHandler.Outcome extends Enum<FailureHandler.Outcome>; // Various outcomes for the handler.\npublic class RestartApplicationListener extends Object implements org.springframework.context.ApplicationListener<org.springframework.context.ApplicationEvent>, org.springframework.core.Ordered; // ApplicationListener to initialize the Restarter.\npublic class Restarter extends Object; // Allows a running application to be restarted with an updated classpath.\n@FunctionalInterface public interface RestartInitializer; // Strategy interface used to initialize a Restarter.\n@FunctionalInterface public interface RestartListener; // Listener that is notified of application restarts.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Scope(\"restart\") public @interface RestartScope; // Restart @Scope Annotation used to indicate that a bean should remain between restarts.\npublic class RestartScopeInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>; // Support for a 'restart' Scope that allows beans to remain between restarts.\n", "des": "Application restart support."}
{"index": 384, "repo": "mahout-core-14.1", "code": "package list;\n\nClass AbstractByteList; // Abstract base class for resizable lists holding byte elements; abstract.\nClass AbstractCharList; // Abstract base class for resizable lists holding char elements; abstract.\nClass AbstractDoubleList; // Abstract base class for resizable lists holding double elements; abstract.\nClass AbstractFloatList; // Abstract base class for resizable lists holding float elements; abstract.\nClass AbstractIntList; // Abstract base class for resizable lists holding int elements; abstract.\nClass AbstractList; // Abstract base class for resizable lists holding objects or primitive data types such as int, float, etc.\nClass AbstractLongList; // Abstract base class for resizable lists holding long elements; abstract.\nClass AbstractObjectList<T>; // Abstract base class for resizable lists holding objects or primitive data types such as int, float, etc.First see the package summary and javadoc tree view to get the broad picture.\nClass AbstractShortList; // Abstract base class for resizable lists holding short elements; abstract.\nClass ByteArrayList; // Resizable list holding byte elements; implemented with arrays.\nClass CharArrayList; // Resizable list holding char elements; implemented with arrays.\nClass DoubleArrayList; // Resizable list holding double elements; implemented with arrays.\nClass FloatArrayList; // Resizable list holding float elements; implemented with arrays.\nClass IntArrayList; // Resizable list holding int elements; implemented with arrays.\nClass LongArrayList; // Resizable list holding long elements; implemented with arrays.\nClass ObjectArrayList<T>; // Resizable list holding ${valueType} elements; implemented with arrays.\nClass ShortArrayList; // Resizable list holding short elements; implemented with arrays.\nClass SimpleLongArrayList; // Resizable list holding long elements; implemented with arrays; not efficient; just to demonstrate which methods you must override to implement a fully functional list.\n", "des": "Resizable lists holding objects or primitive data types such as int, double, etc."}
{"index": 3676, "repo": "solr-core-9.3.0", "code": "package packagemanager;\n\nClass DefaultPackageRepository; // This is a serializable bean (for the JSON that is stored in /repository.json) representing a repository of Solr packages.\nClass PackageManager; // Handles most of the management of packages that are already installed in Solr.\nClass PackageRepository; // Abstract class for a repository, holding SolrPackage items.\nClass PackageUtils;\nClass RepositoryManager; // Handles most of the management of repositories and packages present in external repositories.\nClass SolrPackage; // Describes a package (along with all released versions) as it appears in a repository.\nClass SolrPackage.Artifact;\nClass SolrPackage.Command;\nClass SolrPackage.Manifest;\nClass SolrPackage.Plugin;\nClass SolrPackage.SolrPackageRelease;\nClass SolrPackageInstance; // Describes one instance of a package as it exists in Solr when installed.\n", "des": "This package contains Package Manager (CLI) implementation"}
{"index": 3189, "repo": "tomcat-api-10.1", "code": "package impl;\n\nInterface CallStack; // Strategy for obtaining and printing the current call stack.\nInterface DefaultPooledObjectInfoMBean; // The interface that defines the information about pooled objects that will be exposed via JMX.\nInterface EvictionPolicy<T>; // To provide a custom eviction policy (i.e. something other than DefaultEvictionPolicy for a pool, users must provide an implementation of this interface that provides the required eviction policy.\nInterface GenericKeyedObjectPoolMXBean<K>; // Defines the methods that will be made available via JMX.\nInterface GenericObjectPoolMXBean; // Defines the methods that will be made available via JMX.\nClass AbandonedConfig; // Configuration settings for abandoned object removal.\nClass BaseGenericObjectPool<T>; // Base class that provides common functionality for GenericObjectPool and GenericKeyedObjectPool.\nClass BaseObjectPoolConfig<T>; // Provides the implementation for the common attributes shared by the sub-classes.\nClass CallStackUtils; // Utility methods for CallStack.\nClass DefaultEvictionPolicy<T>; // Provides the default implementation of EvictionPolicy used by the pools.\nClass DefaultPooledObject<T>; // This wrapper is used to track the additional information, such as state, for the pooled objects.\nClass DefaultPooledObjectInfo; // Implementation of object that is used to provide information on pooled objects via JMX.\nClass EvictionConfig; // This class is used by pool implementations to pass configuration information to EvictionPolicy instances.\nClass GenericKeyedObjectPool<K,â€‹T>; // A configurable KeyedObjectPool implementation.\nClass GenericKeyedObjectPoolConfig<T>; // A simple \"struct\" encapsulating the configuration for a GenericKeyedObjectPool.\nClass GenericObjectPool<T>; // A configurable ObjectPool implementation.\nClass GenericObjectPoolConfig<T>; // A simple \"struct\" encapsulating the configuration for a GenericObjectPool.\nClass NoOpCallStack; // CallStack strategy using no-op implementations of all functionality.\nClass PooledSoftReference<T>; // Extension of DefaultPooledObject to wrap pooled soft references.\nClass SecurityManagerCallStack; // A CallStack strategy using a SecurityManager.\nClass SoftReferenceObjectPool<T>; // A SoftReference based ObjectPool.\n", "des": "Object pooling API implementations."}
{"index": 2711, "repo": "spring-batch-infrastructure-5.0.2", "code": "package amqp;\n\npackage amqp.builder; // Builders for AMQP item reader and writer.\npublic class AmqpItemReader<T> extends Object implements ItemReader<T>; // AMQP ItemReader implementation using an AmqpTemplate to receive and/or convert messages.\npublic class AmqpItemWriter<T> extends Object implements ItemWriter<T>; // AMQP ItemWriter implementation using an AmqpTemplate to send messages.\n", "des": "AMQP related batch components."}
{"index": 3304, "repo": "opencms-core-15.0", "code": "package report;\n\nInterface I_CmsReport; // This is the interface for the report classes which are used for the output during operations that run on a spearate Thread in OpenCms, like publish, import, export etc.\nInterface I_CmsReportThread; // Identifies a class that can be used as a report thread .\nInterface I_CmsReportUpdateFormatter; // Interface used to format report updates.\nClass A_CmsReport; // Base report class.\nClass A_CmsReportThread; // Provides a common Thread class for the reports.\nClass CmsClassicJavascriptReportUpdateFormatter; // Report update formatter for the Javascript-based report update format, which was used in the old workplace most of the time.\nClass CmsHtmlReport; // HTML report output to be used for import / export / publish operations in the entire OpenCms system.\nClass CmsLogReport; // Report class used for the logfile.\nClass CmsMultiplexReport; // Report proxy that multiplexes to all contained I_CmsReport instances.\nClass CmsPrintStreamReport; // Stream report where the output is streamed to the given print stream instance.\nClass CmsReportUpdateItem; // Represents a single report entry.\nClass CmsShellLogReport; // Report for shell which writes to LOG.\nClass CmsShellReport; // Report class used for the shell.\nClass CmsStringBufferReport; // Report class used to write the output of a report to a StringBuffer.\nClass CmsVaadinHtmlReportUpdateFormatter; // Report update formatter for the new Vaadin-based workplace.\nClass CmsWorkplaceReport; // Report class for displaying reports to the user in the workplace.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsReportFormatType; // Enum representing report entry types.\n", "des": "Classes used to generate the OpenCms reports, which are displayed during publish, import, export etc."}
{"index": 1318, "repo": "groovy-all-4.0.13", "code": "package dom;\n\npublic class DOMCategory extends Object; // Category class which adds GPath style operations to Java's DOM classes.\n", "des": "Groovy XML Dom processing classes."}
{"index": 232, "repo": "nutch-2.4", "code": "package auth;\n\nInterface AuthenticatedWebPage; // Marker interface for secured pages.\nClass AuthorizationStrategy; // Authorization strategy to check whether to allow a page or not.\nClass SignInPage; // Sign in page implementation.\nClass SignInSession; // Checks for whether authenticate or not.\nClass User; // User bean for authentication.\n", "des": "Contains authorization classes for Web UI"}
{"index": 178, "repo": "ignite-core-2.15.0", "code": "package session;\n\nClass GridTaskSessionProcessor;\n", "des": "Session processing package to guarantee reuse of same session object on the same node."}
{"index": 2546, "repo": "pulsar-common-3.0.0", "code": "package api;\n\npackage api.url; // Classes to work with URLs.\npublic interface MessageIdAdv extends MessageId; // The MessageId interface provided for advanced users.\n", "des": "Additional helper classes to the pulsar-client-api module."}
{"index": 1260, "repo": "spring-core-6.0.11", "code": "package beans;\n\npublic abstract class BeanCopier extends Object;\npublic static class BeanCopier.Generator extends AbstractClassGenerator;\npublic class BeanGenerator extends AbstractClassGenerator;\npublic abstract class BeanMap extends Object implements Map; // A Map-based view of a JavaBean.\npublic static class BeanMap.Generator extends AbstractClassGenerator;\npublic abstract class BulkBean extends Object;\npublic static class BulkBean.Generator extends AbstractClassGenerator;\npublic class BulkBeanException extends RuntimeException;\npublic class FixedKeySet extends AbstractSet;\npublic class ImmutableBean extends Object;\npublic static class ImmutableBean.Generator extends AbstractClassGenerator;\n", "des": "Spring's repackaging of the CGLIB beans package (for internal use only)."}
{"index": 944, "repo": "spring-ws-3.0.10.RELEASE", "code": "package interceptor;\n\nInterface ClientInterceptor; // Workflow interface that allows for customized client-side message interception.\nClass AbstractValidatingInterceptor; // Abstract base class for ClientInterceptor implementations that validate part of the message using a schema.\nClass ClientInterceptorAdapter; // Default implementation of the ClientInterceptor interface, for simplified implementation of pre-only/post-only interceptors.\nClass PayloadValidatingInterceptor; // Client-side interceptor that validates the contents of WebServiceMessages using a schema.\nClass WebServiceValidationException; // Exception thrown whenever a validation error occurs on the client-side.\n", "des": "Provides the ClientInterceptor interface, and validating interceptors."}
{"index": 2935, "repo": "groovy-4.0.13", "code": "package runtime;\n\npackage runtime.metaclass; // Internal classes related to Groovy's metaclass implementation.\npackage runtime.typehandling; // Classes used to execute special actions based on the type.\npackage runtime.wrappers; // Groovy wrapper classes for primitive types.\npublic abstract class AbstractComparator<T> extends Object implements Comparator<T>;\npublic class ArrayTypeUtils extends Object; // Utilities for handling array types\npublic class ArrayUtil extends Object; // This is a generated class used internally during the writing of bytecode within the CallSiteWriter logic.\npublic class BytecodeInterface8 extends Object; // This class contains methods special to optimizations used directly from bytecode in Groovy 1.8\npublic final class ComposedClosure<V> extends Closure<V>; // A wrapper for Closure to support composition.\npublic abstract class ConversionHandler extends Object implements InvocationHandler, Serializable; // This class is a general adapter to map a call to a Java interface to a given delegate.\npublic class ConvertedClosure extends ConversionHandler implements Serializable; // This class is a general adapter to adapt a closure to any Java interface.\npublic class ConvertedMap extends ConversionHandler; // This class is a general adapter to adapt a map of closures to any Java interface.\npublic final class CurriedClosure<V> extends Closure<V>; // A wrapper for Closure to support currying.\npublic class DefaultCachedMethodKey extends MethodKey; // A default implementation of MethodKey\npublic class DefaultGroovyMethods extends DefaultGroovyMethodsSupport; // This class defines new groovy methods which appear on normal JDK classes inside the Groovy environment.\npublic class DefaultGroovyMethodsSupport extends Object; // Support methods for DefaultGroovyMethods and PluginDefaultMethods.\npublic class DefaultGroovyStaticMethods extends Object; // This class defines all the new static groovy methods which appear on normal JDK classes inside the Groovy environment.\npublic class DefaultMethodKey extends MethodKey; // A default implementation of MethodKey\npublic class EncodingGroovyMethods extends Object; // This class defines all the encoding/decoding groovy methods which enhance the normal JDK classes when inside the Groovy environment.\npublic class EncodingGroovyMethodsSupport extends Object; // Keep this constant in a separate file as it is troublesome for Antlr to parse for doc purposes.\npublic class FlushingStreamWriter extends OutputStreamWriter; // Stream writer which flushes after each write operation.\npublic class FormatHelper extends Object; // Formatting methods\n", "des": "Runtime classes for Groovy - whether the dynamic interpreter is being used, the compiler or the bytecode generator."}
{"index": 2925, "repo": "groovy-4.0.13", "code": "package groovy;\n\npackage groovy.ast; // Groovy AST nodes for the syntax of the language\npackage groovy.classgen; // Generates Java classes for Groovy classes using ASM.\npackage groovy.control; // Compiler control classes.\npackage groovy.reflection; // Internal classes for assisting with reflection.\npackage groovy.runtime; // Runtime classes for Groovy - whether the dynamic interpreter is being used, the compiler or the bytecode generator.\npackage groovy.syntax; // Lexer, parser and trees.\npackage groovy.tools; // Compiler entry points and miscellaneous development tools.\npackage groovy.vmplugin; // JVM version specific classes.\npublic class GroovyBugError extends AssertionError; // This class represents an error that is thrown when a bug is recognized inside the runtime.\npublic class GroovyException extends Exception implements GroovyExceptionInterface;\npublic interface GroovyExceptionInterface; // An interface for use by all Groovy compiler exceptions.\n", "des": "Groovy Language for the JVM"}
{"index": 2357, "repo": "spring-boot-3.1.1", "code": "package servlet;\n\npackage servlet.context; // Servlet based web integrations with Spring's WebApplicationContext.\npackage servlet.error; // Spring MVC error handling infrastructure.\npackage servlet.filter; // Spring Boot specific Filter implementations.\npackage servlet.server; // Servlet web server abstractions.\npackage servlet.support; // Support classes for Servlet-based web servers.\npackage servlet.view; // Additional Views for use with Web MVC.\npublic abstract class AbstractFilterRegistrationBean<T extends jakarta.servlet.Filter> extends DynamicRegistrationBean<jakarta.servlet.FilterRegistration.Dynamic>; // Abstract base ServletContextInitializer to register Filters in a Servlet 3.0+ container.\npublic class DelegatingFilterProxyRegistrationBean extends AbstractFilterRegistrationBean<org.springframework.web.filter.DelegatingFilterProxy> implements org.springframework.context.ApplicationContextAware; // A ServletContextInitializer to register DelegatingFilterProxys in a Servlet 3.0+ container.\npublic enum DispatcherType extends Enum<DispatcherType>; // Enumeration of filter dispatcher types, identical to DispatcherType and used in configuration as the servlet API may not be present.\npublic abstract class DynamicRegistrationBean<D extends jakarta.servlet.Registration.Dynamic> extends RegistrationBean implements org.springframework.beans.factory.BeanNameAware; // Base class for Servlet 3.0+ dynamic based registration beans.\npublic class FilterRegistrationBean<T extends jakarta.servlet.Filter> extends AbstractFilterRegistrationBean<T>; // A ServletContextInitializer to register Filters in a Servlet 3.0+ container.\npublic class MultipartConfigFactory extends Object; // Factory that can be used to create a MultipartConfigElement.\npublic abstract class RegistrationBean extends Object implements ServletContextInitializer, org.springframework.core.Ordered; // Base class for Servlet 3.0+ based registration beans.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(org.springframework.boot.web.servlet.ServletComponentScanRegistrar.class) public @interface ServletComponentScan; // Enables scanning for Servlet components (filters, servlets, and listeners).\n@FunctionalInterface public interface ServletContextInitializer; // Interface used to configure a Servlet 3.0+ context programmatically.\n", "des": "Classes and utilities designed to work with the jakarta.servlet specification."}
{"index": 3716, "repo": "solr-core-9.3.0", "code": "package processor;\n\nInterface DistributingUpdateProcessorFactory; // A marker interface for denoting that a factory is responsible for handling distributed communication of updates across a SolrCloud cluster.\nInterface FieldMutatingUpdateProcessor.FieldNameSelector; // Interface for identifying which fields should be mutated\nInterface UpdateRequestProcessorFactory.RunAlways; // A marker interface for UpdateRequestProcessorFactory implementations indicating that the factory should be used even if the update.distrib parameter would otherwise cause it to not be run.\nClass AbstractDefaultValueUpdateProcessorFactory; // Base class that can be extended by any UpdateRequestProcessorFactory designed to add a default value to the document in an AddUpdateCommand when that field is not already specified.\nClass AddSchemaFieldsUpdateProcessorFactory; // This processor will dynamically add fields to the schema if an input document contains one or more fields that don't match any field or dynamic field in the schema.\nClass AllValuesOrNoneFieldMutatingUpdateProcessor; // Abstract subclass of FieldMutatingUpdateProcessor for implementing UpdateProcessors that will mutate all individual values of a selected field independently.\nClass AtomicUpdateDocumentMerger;\nClass AtomicUpdateProcessorFactory; // An update processor that will convert conventional field-value document to atomic update document\nClass ClassificationUpdateProcessorFactory; // This class implements an UpdateProcessorFactory for the Classification Update Processor.\nClass ClassificationUpdateProcessorParams;\nClass CloneFieldUpdateProcessorFactory; // Clones the values found in any matching source field into a configured dest field.\nClass ConcatFieldUpdateProcessorFactory; // Concatenates multiple values for fields matching the specified conditions using a configurable delimiter which defaults to \", \".\nClass CountFieldValuesUpdateProcessorFactory; // Replaces any list of values for a field matching the specified conditions with the count of the number of values for that field.\nClass DefaultValueUpdateProcessorFactory; // An update processor that adds a constant default value to any document being added that does not already have a value in the specified field.\nClass DistributedUpdateProcessor;\nClass DistributedUpdateProcessor.LeaderRequestReplicationTracker;\nClass DistributedUpdateProcessor.RollupRequestReplicationTracker;\nClass DistributedUpdateProcessorFactory; // Factory for DistributedUpdateProcessor.\nClass DistributedZkUpdateProcessor;\nClass DocBasedVersionConstraintsProcessor;\n", "des": "UpdateRequestProcessorFactory APIs and implementations for use in UpdateRequestProcessorChains"}
{"index": 314, "repo": "commons-geometry-enclosing-1.0-beta1", "code": "package twod;\n\nClass DiskGenerator; // Class generating a disk from its support points.\nClass WelzlEncloser2D; // Extension of the WelzlEncloser class for Euclidean 2D space.\n", "des": "This package provides classes related to the smallest enclosing ball problem in two dimensions."}
{"index": 962, "repo": "spring-ws-3.0.10.RELEASE", "code": "package addressing;\n\npackage addressing.core; // Core package for WS-Addressing support.\npackage addressing.messageid; // Contains various strategies for generating WS-Addressing MessageIDs.\npackage addressing.server; // Contains servers-side WS-Addressing support, in the form of EndpointMappings.\npackage addressing.version; // Contains abstractions over various versions of the WS-Addressing specification.\nClass AddressingException; // Exception thrown in case on WS-Addressing errors.\n", "des": "Provides WS-Addressing implementation classes."}
{"index": 3208, "repo": "tomcat-api-10.1", "code": "package pojo;\n\nClass Constants; // Internal implementation constants.\nClass PojoEndpointBase; // Base implementation (client and server have different concrete implementations) of the wrapper that converts a POJO instance into a WebSocket endpoint instance.\nClass PojoEndpointClient; // Wrapper class for instances of POJOs annotated with ClientEndpoint so they appear as standard Endpoint instances.\nClass PojoEndpointServer; // Wrapper class for instances of POJOs annotated with ServerEndpoint so they appear as standard Endpoint instances.\nClass PojoMessageHandlerBase<T>; // Common implementation code for the POJO message handlers.\nClass PojoMessageHandlerPartialBase<T>; // Common implementation code for the POJO partial message handlers.\nClass PojoMessageHandlerPartialBinary; // ByteBuffer specific concrete implementation for handling partial messages.\nClass PojoMessageHandlerPartialText; // Text specific concrete implementation for handling partial messages.\nClass PojoMessageHandlerWholeBase<T>; // Common implementation code for the POJO whole message handlers.\nClass PojoMessageHandlerWholeBinary; // ByteBuffer specific concrete implementation for handling whole messages.\nClass PojoMessageHandlerWholePong; // PongMessage specific concrete implementation for handling whole messages.\nClass PojoMessageHandlerWholeText; // Text specific concrete implementation for handling whole messages.\nClass PojoMethodMapping; // For a POJO class annotated with ServerEndpoint, an instance of this class creates and caches the method handler, method information and parameter information for the onXXX calls.\nClass PojoPathParam; // Stores the parameter type and name for a parameter that needs to be passed to an onXxx method of Endpoint.\n", "des": "This package provides the necessary plumbing to convert an annotated POJO into a WebSocket Endpoint."}
{"index": 388, "repo": "commons-dbcp2-2.9.0", "code": "package datasources;\n\nClass InstanceKeyDataSource; // The base class for SharedPoolDataSource and PerUserPoolDataSource.\nClass PerUserPoolDataSource; // A pooling DataSource appropriate for deployment within J2EE environment.\nClass PerUserPoolDataSourceFactory; // A JNDI ObjectFactory which creates SharedPoolDataSources\nClass SharedPoolDataSource; // A pooling DataSource appropriate for deployment within J2EE environment.\nClass SharedPoolDataSourceFactory; // A JNDI ObjectFactory which creates SharedPoolDataSources\n", "des": "This package contains two DataSources: PerUserPoolDataSource and SharedPoolDataSource which provide a database connection pool."}
{"index": 2796, "repo": "spring-amqp-3.0.6", "code": "package core;\n\npublic abstract class AbstractBuilder extends Object; // Base class for builders supporting arguments.\npublic abstract class AbstractDeclarable extends Object implements Declarable; // Base class for Declarable classes.\npublic abstract class AbstractExchange extends AbstractDeclarable implements Exchange; // Common properties that describe all exchange types.\npublic enum AcknowledgeMode extends Enum<AcknowledgeMode>; // Acknowledgment modes supported by the listener container.\npublic class Address extends Object; // Represents an address for publication of an AMQP message.\npublic interface AmqpAdmin; // Specifies a basic set of portable AMQP administrative operations for AMQP > 0.9.\npublic class AmqpMessageReturnedException extends AmqpException; // Exception thrown if the request message cannot be delivered when the mandatory flag is set.\npublic class AmqpReplyTimeoutException extends AmqpException; // Async reply timeout.\npublic interface AmqpTemplate; // Specifies a basic set of AMQP operations.\npublic class AnonymousQueue extends Queue; // Represents an anonymous, non-durable, exclusive, auto-delete queue.\npublic interface AsyncAmqpTemplate; // Classes implementing this interface can perform asynchronous send and receive operations using CompletableFutures.\npublic class Base64UrlNamingStrategy extends Object implements NamingStrategy; // Generates names with the form <prefix><base64url> where 'prefix' is 'spring.gen-' by default (e.g.\npublic interface BatchMessageListener extends MessageListener; // Used to receive a batch of messages if the container supports it.\npublic class Binding extends AbstractDeclarable; // Simple container collecting information to describe a binding.\npublic static enum Binding.DestinationType extends Enum<Binding.DestinationType>; // The binding destination.\npublic final class BindingBuilder extends Object; // Basic builder class to create bindings for a more fluent API style in code based configuration.\npublic static final class BindingBuilder.DestinationConfigurer extends Object; // General destination configurer.\npublic static final class BindingBuilder.DirectExchangeRoutingKeyConfigurer extends Object; // Direct exchange routing key configurer.\npublic static class BindingBuilder.GenericArgumentsConfigurer extends Object; // Generic argument configurer.\npublic static final class BindingBuilder.GenericExchangeRoutingKeyConfigurer extends Object; // Generic exchange routing key configurer.\npublic static final class BindingBuilder.HeadersExchangeMapConfigurer extends Object; // Headers exchange configurer.\n", "des": "Provides core classes for the spring AMQP abstraction."}
{"index": 3035, "repo": "spring-web-6.0.11", "code": "package jsf;\n\npackage jsf.el; // ELResolvers for integrating a JSF web layer with a Spring service layer which is hosted in a Spring root WebApplicationContext.\npublic abstract class DecoratingNavigationHandler extends NavigationHandler; // Base class for JSF NavigationHandler implementations that want to be capable of decorating an original NavigationHandler.\npublic class DelegatingNavigationHandlerProxy extends NavigationHandler; // JSF NavigationHandler implementation that delegates to a NavigationHandler bean obtained from the Spring root WebApplicationContext.\npublic class DelegatingPhaseListenerMulticaster extends Object implements PhaseListener; // JSF PhaseListener implementation that delegates to one or more Spring-managed PhaseListener beans coming from the Spring root WebApplicationContext.\npublic abstract class FacesContextUtils extends Object; // Convenience methods to retrieve Spring's root WebApplicationContext for a given JSF FacesContext.\n", "des": "Support classes for integrating a JSF web layer with a Spring service layer which is hosted in a Spring root WebApplicationContext."}
{"index": 1125, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package nvidia;\n\nClass NvidiaGPUPluginForRuntimeV2; // Nvidia GPU plugin supporting both Nvidia container runtime v2 for Docker and non-Docker container.\nEnum NvidiaGPUPluginForRuntimeV2.DeviceLinkType; // Different type of link.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1883, "repo": "shiro-core-2.0.0-alpha-2", "code": "package mgt;\n\npublic abstract class AbstractRememberMeManager extends Object implements RememberMeManager; // Abstract implementation of the RememberMeManager interface that handles serialization and encryption of the remembered user identity.\npublic abstract class AuthenticatingSecurityManager extends RealmSecurityManager; // Shiro support of a SecurityManager class hierarchy that delegates all authentication operations to a wrapped Authenticator instance.\npublic abstract class AuthorizingSecurityManager extends AuthenticatingSecurityManager; // Shiro support of a SecurityManager class hierarchy that delegates all authorization (access control) operations to a wrapped Authorizer instance.\npublic abstract class CachingSecurityManager extends Object implements SecurityManager, org.apache.shiro.lang.util.Destroyable, org.apache.shiro.cache.CacheManagerAware, org.apache.shiro.event.EventBusAware; // A very basic starting point for the SecurityManager interface that merely provides logging and caching support.\npublic class DefaultSecurityManager extends SessionsSecurityManager; // The Shiro framework's default concrete implementation of the SecurityManager interface, based around a collection of Realms.\npublic class DefaultSessionStorageEvaluator extends Object implements SessionStorageEvaluator; // A Default SessionStorageEvaluator that provides reasonable control over if and how Sessions may be used for storing Subject state.\npublic class DefaultSubjectDAO extends Object implements SubjectDAO; // Default SubjectDAO implementation that stores Subject state in the Subject's Session by default (but this can be disabled - see below).\npublic class DefaultSubjectFactory extends Object implements SubjectFactory; // Default SubjectFactory implementation that creates DelegatingSubject instances.\npublic abstract class RealmSecurityManager extends CachingSecurityManager; // Shiro support of a SecurityManager class hierarchy based around a collection of Realms.\npublic interface RememberMeManager; // A RememberMeManager is responsible for remembering a Subject's identity across that Subject's sessions with the application.\npublic interface SecurityManager extends Authenticator, Authorizer, SessionManager; // A SecurityManager executes all security operations for all Subjects (aka users) across a single application.\npublic abstract class SessionsSecurityManager extends AuthorizingSecurityManager; // Shiro support of a SecurityManager class hierarchy that delegates all session operations to a wrapped SessionManager instance.\npublic interface SessionStorageEvaluator; // Evaluates whether or not Shiro may use a Subject's Session to persist that Subject's internal state.\n", "des": "Provides the master SecurityManager interface and a default implementation hierarchy for managing all aspects of Shiro's functionality in an application."}
{"index": 2375, "repo": "pulsar-client-api-3.0.0", "code": "package internal;\n\npublic class DefaultImplementation extends Object; // This class loads the implementation for PulsarClientImplementationBinding and allows you to decouple the API from the actual implementation.\npublic class PropertiesUtils extends Object; // Internal utility methods for filtering and mapping Properties objects.\npublic interface PulsarClientImplementationBinding; // Helper class for class instantiations and it also contains methods to work with schemas.\n", "des": "Helpers which provide useful functionality for the implementation of Pulsar Client API."}
{"index": 3799, "repo": "lucene-analysis-common-9.7.0", "code": "package minhash;\n\nClass MinHashFilter; // Generate min hash tokens from an incoming stream of tokens.\nClass MinHashFilterFactory; // TokenFilterFactory for MinHashFilter.\n", "des": "MinHash filtering (for LSH)."}
{"index": 5, "repo": "connect-api-3.5.0", "code": "package header;\n\nInterface Header; // A Header is a key-value pair, and multiple headers can be included with the key, value, and timestamp in each Kafka message.\nInterface Headers; // A mutable ordered collection of Header objects.\nInterface Headers.HeaderTransform; // A function to transform the supplied Header.\nClass ConnectHeaders; // A basic Headers implementation.\n", "des": "Provides an API for application-defined metadata attached to Connect records."}
{"index": 1747, "repo": "spring-data-mongodb-4.1.2", "code": "package config;\n\n@Configuration(proxyBeanMethods=false) public abstract class AbstractMongoClientConfiguration extends MongoConfigurationSupport; // Base class for Spring Data MongoDB configuration using JavaConfig with MongoClient.\n@Configuration(proxyBeanMethods=false) public abstract class AbstractReactiveMongoConfiguration extends MongoConfigurationSupport; // Base class for reactive Spring Data MongoDB configuration using JavaConfig.\npublic abstract class BeanNames extends Object; // Constants to declare bean names used by the namespace configuration.\npublic class ConnectionStringPropertyEditor extends PropertyEditorSupport; // Parse a String to a ConnectionString.\n@Inherited @Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.mongodb.config.MongoAuditingRegistrar.class) public @interface EnableMongoAuditing; // Annotation to enable auditing in MongoDB via annotation configuration.\n@Inherited @Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.mongodb.config.ReactiveMongoAuditingRegistrar.class) public @interface EnableReactiveMongoAuditing; // Annotation to enable auditing in MongoDB using reactive infrastructure via annotation configuration.\npublic class GeoJsonConfiguration extends Object implements SpringDataJacksonModules; // Configuration class to expose GeoJsonModule as a Spring bean.\npublic class MappingMongoConverterParser extends Object implements BeanDefinitionParser; // Bean definition parser for the mapping-converter element.\npublic class MongoAuditingBeanDefinitionParser extends AbstractSingleBeanDefinitionParser; // BeanDefinitionParser to register a AuditingEntityCallback to transparently set auditing information on an entity.\npublic class MongoClientParser extends Object implements BeanDefinitionParser; // Parser for mongo-client definitions.\npublic abstract class MongoConfigurationSupport extends Object; // Base class for Spring Data MongoDB to be extended for JavaConfiguration usage.\npublic class MongoCredentialPropertyEditor extends PropertyEditorSupport; // Parse a String to a Collection of MongoCredential.\npublic class MongoDbFactoryParser extends AbstractBeanDefinitionParser; // BeanDefinitionParser to parse db-factory elements into BeanDefinitions.\npublic class MongoJmxParser extends Object implements BeanDefinitionParser;\npublic class MongoNamespaceHandler extends NamespaceHandlerSupport; // NamespaceHandler for Mongo DB configuration.\npublic class PersistentEntitiesFactoryBean extends Object implements FactoryBean<PersistentEntities>; // Simple helper to be able to wire the PersistentEntities from a MappingMongoConverter bean available in the application context.\n", "des": "Spring XML namespace configuration for MongoDB specific repositories."}
{"index": 3644, "repo": "solr-core-9.3.0", "code": "package impl;\n\nClass ClusterEventProducerFactory; // This class helps in handling the initial registration of plugin-based listeners, when both the final ClusterEventProducer implementation and listeners are configured using plugins.\nClass CollectionsRepairEventListener; // This is an illustration how to re-implement the combination of Solr 8x NodeLostTrigger and AutoAddReplicasPlanAction to maintain the collection's replicas when nodes are lost.\nClass DefaultClusterEventProducer; // Implementation of ClusterEventProducer.\nClass DelegatingClusterEventProducer; // This implementation allows Solr to dynamically change the underlying implementation of ClusterEventProducer in response to the changed plugin configuration.\n", "des": "Default implementation of ClusterEventProducer."}
{"index": 3382, "repo": "dagger-2.47", "code": "package assisted;\n\nAnnotation Type Assisted; // Annotates a parameter within an AssistedInject-annotated constructor.\nAnnotation Type AssistedFactory; // Annotates an abstract class or interface used to create an instance of a type via an AssistedInject constructor.\nAnnotation Type AssistedInject; // Annotates the constuctor of a type that will be created via assisted injection.\n", "des": "This package contains the API for Dagger's assisted injection."}
{"index": 2242, "repo": "spring-data-keyvalue-3.1.2", "code": "package core;\n\npackage core.event; // Support classes for key-value events, like standard persistence lifecycle events.\npackage core.mapping; // Infrastructure for the Key-Value mapping subsystem and keyspace resolution.\npackage core.query; // Key/value specific query and abstractions.\npublic abstract class AbstractKeyValueAdapter extends Object implements KeyValueAdapter; // Base implementation of KeyValueAdapter holds QueryEngine to delegate find and count execution to.\npublic interface CriteriaAccessor<T>; // Resolves the criteria object from given KeyValueQuery.\npublic class ForwardingCloseableIterator<T> extends Object implements CloseableIterator<T>; // Forwards CloseableIterator invocations to the configured Iterator delegate.\npublic interface IdentifierGenerator; // API for components generating identifiers.\npublic final class IterableConverter extends Object; // Converter capable of transforming a given Iterable into a collection type.\npublic interface KeyValueAdapter extends DisposableBean; // KeyValueAdapter unifies access and shields the underlying key/value specific implementation.\npublic interface KeyValueCallback<T>; // Generic callback interface for code that operates on a KeyValueAdapter.\npublic interface KeyValueOperations extends DisposableBean; // Interface that specifies a basic set of key/value operations.\npublic class KeyValuePersistenceExceptionTranslator extends Object implements PersistenceExceptionTranslator; // Simple PersistenceExceptionTranslator implementation for key/value stores that converts the given runtime exception to an appropriate exception from the org.springframework.dao hierarchy.\npublic class KeyValueTemplate extends Object implements KeyValueOperations, ApplicationEventPublisherAware; // Basic implementation of KeyValueOperations.\npublic abstract class QueryEngine<ADAPTER extends KeyValueAdapter,CRITERIA,SORT> extends Object; // Base implementation for accessing and executing KeyValueQuery against a KeyValueAdapter.\npublic interface SortAccessor<T>; // Resolves the Sort object from given KeyValueQuery and potentially converts it into a store specific representation that can be used by the QueryEngine implementation.\npublic class SpelCriteria extends Object; // SpelCriteria allows to pass on a SpelExpression and EvaluationContext to the actual query processor.\npublic class SpelPropertyComparator<T> extends Object implements Comparator<T>; // Comparator implementation using SpelExpression.\npublic class SpelSortAccessor extends Object implements SortAccessor<Comparator<?>>; // SortAccessor implementation capable of creating SpelPropertyComparator.\n", "des": "Core key/value implementation."}
{"index": 719, "repo": "commons-codec-1.16.0", "code": "package binary;\n\nClass Base16; // Provides Base16 encoding and decoding.\nClass Base16InputStream; // Provides Base16 encoding and decoding in a streaming fashion (unlimited size).\nClass Base16OutputStream; // Provides Hex encoding and decoding in a streaming fashion (unlimited size).\nClass Base32; // Provides Base32 encoding and decoding as defined by RFC 4648.\nClass Base32InputStream; // Provides Base32 encoding and decoding in a streaming fashion (unlimited size).\nClass Base32OutputStream; // Provides Base32 encoding and decoding in a streaming fashion (unlimited size).\nClass Base64; // Provides Base64 encoding and decoding as defined by RFC 2045.\nClass Base64InputStream; // Provides Base64 encoding and decoding in a streaming fashion (unlimited size).\nClass Base64OutputStream; // Provides Base64 encoding and decoding in a streaming fashion (unlimited size).\nClass BaseNCodec; // Abstract superclass for Base-N encoders and decoders.\nClass BaseNCodecInputStream; // Abstract superclass for Base-N input streams.\nClass BaseNCodecOutputStream; // Abstract superclass for Base-N output streams.\nClass BinaryCodec; // Converts between byte arrays and strings of \"0\"s and \"1\"s.\nClass CharSequenceUtils; // Operations on CharSequence that are null safe.\nClass Hex; // Converts hexadecimal Strings.\nClass StringUtils; // Converts String to and from bytes using the encodings required by the Java specification.\n", "des": "Base64, Base32, Binary, and Hexadecimal String encoding and decoding."}
{"index": 3144, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface NamedParameterContext; // The context for named parameters.\nInterface QueryBuildingParameters; // Provides values for all options that impact the built query.\n", "des": "Defines the SPI for obtaining values for options that impact the load query."}
{"index": 1453, "repo": "spring-data-redis-3.1.2", "code": "package index;\n\npublic interface ConfigurableIndexDefinitionProvider extends IndexDefinitionProvider, IndexDefinitionRegistry; // IndexDefinitionProvider that allows registering new IndexDefinition via IndexDefinitionRegistry.\npublic class GeoIndexDefinition extends RedisIndexDefinition implements PathBasedRedisIndexDefinition;\n@Documented @Retention(RUNTIME) @Target({FIELD,ANNOTATION_TYPE}) public @interface GeoIndexed; // Mark properties value to be included in a secondary index.\npublic class IndexConfiguration extends Object implements ConfigurableIndexDefinitionProvider; // IndexConfiguration allows programmatic setup of indexes.\npublic interface IndexDefinition; // IndexDefinition allow to set up a blueprint for creating secondary index structures in Redis.\npublic static interface IndexDefinition.Condition<T>;\npublic static final class IndexDefinition.IndexingContext extends Object; // Context in which a particular value is about to get indexed.\npublic interface IndexDefinitionProvider; // IndexDefinitionProvider give access to IndexDefinitions for creating secondary index structures.\npublic interface IndexDefinitionRegistry; // Registry that allows adding IndexDefinition.\n@Documented @Retention(RUNTIME) @Target({FIELD,ANNOTATION_TYPE}) public @interface Indexed; // Mark properties value to be included in a secondary index.\npublic interface IndexValueTransformer extends Converter<Object,Object>; // Converter implementation that is used to transform values for usage in a particular secondary index.\npublic interface PathBasedRedisIndexDefinition extends IndexDefinition; // IndexDefinition that is based on a property paths.\npublic abstract class RedisIndexDefinition extends Object implements IndexDefinition; // Base IndexDefinition implementation.\npublic static class RedisIndexDefinition.CompositeValueTransformer extends Object implements IndexValueTransformer;\npublic static enum RedisIndexDefinition.LowercaseIndexValueTransformer extends Enum<RedisIndexDefinition.LowercaseIndexValueTransformer> implements IndexValueTransformer;\npublic static enum RedisIndexDefinition.NoOpValueTransformer extends Enum<RedisIndexDefinition.NoOpValueTransformer> implements IndexValueTransformer;\npublic static class RedisIndexDefinition.OrCondition<T> extends Object implements IndexDefinition.Condition<T>;\npublic static class RedisIndexDefinition.PathCondition extends Object implements IndexDefinition.Condition<Object>;\npublic class SimpleIndexDefinition extends RedisIndexDefinition implements PathBasedRedisIndexDefinition; // PathBasedRedisIndexDefinition for including property values in a secondary index.\n", "des": "Abstractions for Redis secondary indexes."}
{"index": 608, "repo": "org.apache.karaf.main-2.4.4", "code": "package startlevel;\n\nInterface BundleStartLevel; // Query and modify the start level information for a bundle.\nInterface FrameworkStartLevel; // Query and modify the start level information for the framework.\n", "des": "Framework Start Level Package Version 1.0."}
{"index": 3700, "repo": "solr-core-9.3.0", "code": "package endresulttransformer;\n\nInterface EndResultTransformer; // Responsible for transforming the grouped result into the final format for displaying purposes.\nInterface EndResultTransformer.SolrDocumentSource; // Abstracts the source for SolrDocument instances.\nClass GroupedEndResultTransformer; // Implementation of EndResultTransformer that keeps each grouped result separate in the final response.\nClass MainEndResultTransformer; // Implementation of EndResultTransformer that transforms the grouped result into the main result list in the response.\nClass SimpleEndResultTransformer; // Implementation of EndResultTransformer that transforms the grouped result into a single flat list.\n", "des": "APIs and classes for transforming result grouping results into the appropriate response format"}
{"index": 240, "repo": "nutch-2.4", "code": "package impl;\n\nClass CrawlServiceImpl;\nClass NutchInstanceServiceImpl;\nClass NutchServiceImpl;\nClass SeedListServiceImpl;\n", "des": "Contains service implementation classes for Web UI"}
{"index": 506, "repo": "commons-vfs2-2.9.0", "code": "package vfs2;\n\npackage vfs2.auth; // VFS Authentication implementation\npackage vfs2.cache; // VFS File caching\npackage vfs2.events; // VFS Events\npackage vfs2.filter; // Implementations of org.apache.commons.vfs2.FileFilter.\npackage vfs2.function; // Functional interface types in the style of java.util.function.\npackage vfs2.impl; // The standard VFS implementation.\npackage vfs2.operations; // VFS Operations handling.\npackage vfs2.provider; // The File Provider API, and utility classes.\npackage vfs2.tasks; // The VFS Ant Tasks.\npackage vfs2.util; // Utility classes used by the VFS.\nInterface FileContent; // Represents the data content of a file.\nInterface FileContentInfo; // Informs on the content of a file with content type and encoding.\nInterface FileContentInfoFactory; // Creates FileContentInfo instances to determine the content-info for given file contents.\nInterface FileFilter; // This interface is used to select files when traversing the direct children of the base.\nInterface FileListener; // Listens for changes to a file.\nInterface FileMonitor; // FileMonitor interface.\nInterface FileName; // Represents a file name.\nInterface FileObject; // Represents a file, and is used to access the content and structure of the file.\nInterface FilesCache; // The fileCache interface.\nInterface FileSelectInfo; // Information about a file, that is used to select files during the traversal of a hierarchy.\nInterface FileSelector; // This interface is used to select files when traversing a file hierarchy.\nInterface FileSystem; // A file system, made up of a hierarchy of files.\nInterface FileSystemManager; // A FileSystemManager manages a set of file systems.\nInterface RandomAccessContent; // Provides random access over content.\nInterface UserAuthenticator; // The user authenticator is used to query credentials from the user.\nClass AllFileSelector; // A FileSelector that selects everything.\nClass FileChangeEvent; // An event fired when a file is changed.\nClass FileDepthSelector; // A FileSelector that selects all files in a particular depth range.\nClass FileExtensionSelector; // A FileSelector that selects based on file extensions.\nClass FileFilterSelector; // A FileSelector that selects all children of the given fileObject.\n", "des": "The public VFS API."}
{"index": 73, "repo": "ignite-core-2.15.0", "code": "package fifoqueue;\n\nInterface FifoQueueCollisionSpiMBean; // Management bean that provides access to the FIFO queue collision SPI configuration.\nClass FifoQueueCollisionSpi; // This class provides implementation for Collision SPI based on FIFO queue.\n", "des": "Contains FIFO based collision SPI implementation."}
{"index": 3262, "repo": "opencms-core-15.0", "code": "package log;\n\nClass CmsLogEntry; // Wrapper class for a DB log entry.\nClass CmsLogFilter; // A filter to retrieve log entries.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsLogEntryType; // Wrapper class for the different types of log entries.\n", "des": "This package contains the implementation classes for the DB log."}
{"index": 1722, "repo": "spring-jdbc-6.0.11", "code": "package jdbc;\n\npackage jdbc.config; // Defines the Spring JDBC configuration namespace.\npackage jdbc.core; // Provides the core JDBC framework, based on JdbcTemplate and its associated callback interfaces and helper objects.\npackage jdbc.datasource; // Provides a utility class for easy DataSource access, a PlatformTransactionManager for a single DataSource, and various simple DataSource implementations.\npackage jdbc.object; // The classes in this package represent RDBMS queries, updates, and stored procedures as threadsafe, reusable objects.\npackage jdbc.support; // Support classes for the JDBC framework, used by the classes in the jdbc.core and jdbc.object packages.\npublic class BadSqlGrammarException extends org.springframework.dao.InvalidDataAccessResourceUsageException; // Exception thrown when SQL specified is invalid.\npublic class CannotGetJdbcConnectionException extends org.springframework.dao.DataAccessResourceFailureException; // Fatal exception thrown when we can't connect to an RDBMS using JDBC.\npublic class IncorrectResultSetColumnCountException extends org.springframework.dao.DataRetrievalFailureException; // Data access exception thrown when a result set did not have the correct column count, for example when expecting a single column but getting 0 or more than 1 columns.\npublic class InvalidResultSetAccessException extends org.springframework.dao.InvalidDataAccessResourceUsageException; // Exception thrown when a ResultSet has been accessed in an invalid fashion.\npublic class JdbcUpdateAffectedIncorrectNumberOfRowsException extends org.springframework.dao.IncorrectUpdateSemanticsDataAccessException; // Exception thrown when a JDBC update affects an unexpected number of rows.\npublic class LobRetrievalFailureException extends org.springframework.dao.DataRetrievalFailureException; // Exception to be thrown when a LOB could not be retrieved.\npublic class SQLWarningException extends org.springframework.dao.UncategorizedDataAccessException; // Exception thrown when we're not ignoring SQLWarnings.\npublic class UncategorizedSQLException extends org.springframework.dao.UncategorizedDataAccessException; // Exception thrown when we can't classify an SQLException into one of our generic data access exceptions.\n", "des": "The classes in this package make JDBC easier to use and reduce the likelihood of common errors."}
{"index": 1998, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package error;\n\npublic abstract class AbstractErrorController extends Object implements org.springframework.boot.web.servlet.error.ErrorController; // Abstract base class for error @Controller implementations.\n@Controller @RequestMapping(\"${server.error.path:${error.path:/error}}\") public class BasicErrorController extends AbstractErrorController; // Basic global error @Controller, rendering ErrorAttributes.\npublic class DefaultErrorViewResolver extends Object implements ErrorViewResolver, org.springframework.core.Ordered; // Default ErrorViewResolver implementation that attempts to resolve error views using well known conventions.\n@AutoConfiguration(before=WebMvcAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({jakarta.servlet.Servlet.class,org.springframework.web.servlet.DispatcherServlet.class}) @EnableConfigurationProperties({ServerProperties.class,WebMvcProperties.class}) public class ErrorMvcAutoConfiguration extends Object; // Auto-configuration to render errors through an MVC error controller.\n@Configuration(proxyBeanMethods=false) @ConditionalOnProperty(prefix=\"server.error.whitelabel\", name=\"enabled\", matchIfMissing=true) @Conditional(org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration.ErrorTemplateMissingCondition.class) protected static class ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration extends Object;\n@FunctionalInterface public interface ErrorViewResolver; // Interface that can be implemented by beans that resolve error views.\n", "des": "Auto-configuration for Spring MVC error handling."}
{"index": 3130, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface RefCursorSupport; // Contract for JDBC REF_CURSOR support.\n", "des": "Defines contracts for JDBC REF_CURSOR support."}
{"index": 2461, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package ganglia;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.ganglia.GangliaMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"ganglia\") @EnableConfigurationProperties(GangliaProperties.class) public class GangliaMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Ganglia.\n@ConfigurationProperties(prefix=\"management.ganglia.metrics.export\") public class GangliaProperties extends Object; // @ConfigurationProperties for configuring Ganglia metrics export.\n", "des": "Support for exporting actuator metrics to Ganglia."}
{"index": 2931, "repo": "groovy-4.0.13", "code": "package control;\n\npackage control.io; // Internal classes for Groovier Input/Output.\npackage control.messages; // Error message classes.\npublic class AnnotationConstantsVisitor extends ClassCodeVisitorSupport; // Resolves constants in annotation definitions.\npublic class ASTTransformationsContext extends Object; // Stores state information about global AST transformations applied to a compilation unit.\npublic interface BytecodeProcessor;\npublic class ClassNodeResolver extends Object; // This class is used as a pluggable way to resolve class names.\npublic static class ClassNodeResolver.LookupResult extends Object; // Helper class to return either a SourceUnit or ClassNode.\npublic class CompilationFailedException extends GroovyRuntimeException; // Thrown when compilation fails from source errors.\npublic class CompilationUnit extends ProcessingUnit; // The CompilationUnit collects all compilation data as it is generated by the compiler system.\n@FunctionalInterface public static interface CompilationUnit.ClassgenCallback; // A callback interface you can use during the classgen phase of compilation as the compiler traverses the ClassNode tree.\n@Deprecated public abstract static class CompilationUnit.GroovyClassOperation extends Object implements CompilationUnit.IGroovyClassOperation;\n@FunctionalInterface public static interface CompilationUnit.IGroovyClassOperation;\n@FunctionalInterface public static interface CompilationUnit.IPrimaryClassNodeOperation;\n@FunctionalInterface public static interface CompilationUnit.ISourceUnitOperation;\n@Deprecated public abstract static class CompilationUnit.PrimaryClassNodeOperation extends Object implements CompilationUnit.IPrimaryClassNodeOperation;\n@FunctionalInterface public static interface CompilationUnit.ProgressCallback; // A callback interface you can use to get a callback after every unit of the compile process.\n@Deprecated public abstract static class CompilationUnit.SourceUnitOperation extends Object implements CompilationUnit.ISourceUnitOperation;\npublic enum CompilePhase extends Enum<CompilePhase>; // The phases of the GroovyCompiler.\npublic class CompilerConfiguration extends Object; // Compilation control flags and coordination stuff.\npublic class ConfigurationException extends RuntimeException implements GroovyExceptionInterface; // Thrown when configuration data is invalid.\npublic class ErrorCollector extends Object implements Serializable; // A base class for collecting messages and errors during processing.\npublic class GenericsVisitor extends ClassCodeVisitorSupport; // Verify correct usage of generics.\npublic interface HasCleanup; // An interface for things that need to be cleaned up after operations complete.\npublic abstract class InstanceOfVerifier extends ClassCodeVisitorSupport;\n", "des": "Compiler control classes."}
{"index": 3650, "repo": "solr-core-9.3.0", "code": "package repository;\n\nInterface BackupRepository; // This interface defines the functionality required to backup/restore Solr indexes to an arbitrary storage system.\nClass BackupRepositoryFactory;\nClass LocalFileSystemRepository; // A concrete implementation of BackupRepository interface supporting backup/restore of Solr indexes to a local file-system.\nEnum BackupRepository.PathType; // This enumeration defines the type of a given path.\n", "des": "BackupRepository Providing backup/restore repository interfaces to plug different storage systems"}
{"index": 1719, "repo": "spring-boot-test-3.1.1", "code": "package webdriver;\n\npublic class LocalHostWebConnectionHtmlUnitDriver extends org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver; // LocalHostWebConnectionHtmlUnitDriver will automatically prefix relative URLs with localhost:${local.server.port}.\n", "des": "Selenium support classes."}
{"index": 3112, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface StrategyCreator<T>;\nInterface StrategySelector; // Service which acts as a registry for named strategy implementations.\nClass StrategySelectionException; // Indicates a problem performing the selection/resolution.\n", "des": "Defines actual contract used for strategy selection : StrategySelector."}
{"index": 1350, "repo": "spring-integration-kafka-6.1.2", "code": "package outbound;\n\npublic class KafkaProducerMessageHandler<K,V> extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements org.springframework.integration.support.management.ManageableLifecycle; // A Message Handler for Apache Kafka; when supplied with a ReplyingKafkaTemplate it is used as the handler in an outbound gateway.\n@FunctionalInterface public static interface KafkaProducerMessageHandler.ProducerRecordCreator<K,V>; // Creates a ProducerRecord from a Message and/or properties derived from configuration and/or the message.\n", "des": "Provides Spring Integration outbound components for Apache Kafka."}
{"index": 3499, "repo": "poi-5.2.3", "code": "package crypt;\n\nInterface EncryptionInfoBuilder;\nClass ChunkedCipherInputStream;\nClass ChunkedCipherOutputStream;\nClass CryptoFunctions; // Helper functions used for standard and agile encryption\nClass DataSpaceMapUtils;\nClass DataSpaceMapUtils.DataSpaceDefinition;\nClass DataSpaceMapUtils.DataSpaceMap;\nClass DataSpaceMapUtils.DataSpaceMapEntry;\nClass DataSpaceMapUtils.DataSpaceVersionInfo;\nClass DataSpaceMapUtils.IRMDSTransformInfo;\nClass DataSpaceMapUtils.TransformInfoHeader;\nClass Decryptor;\nClass EncryptionHeader; // Reads and processes OOXML Encryption Headers The constants are largely based on ZIP constants.\nClass EncryptionInfo; // Wrapper for the EncryptionInfo node of encrypted documents\nClass EncryptionVerifier; // Used when checking if a key is valid for a document\nClass Encryptor;\nEnum ChainingMode;\nEnum CipherAlgorithm;\nEnum CipherProvider;\nEnum EncryptionMode; // Office supports various encryption modes.\nEnum HashAlgorithm;\n", "des": "Implementation of the ECMA-376 and MS-propritary document encryptions"}
{"index": 2080, "repo": "spring-webmvc-6.0.11", "code": "package theme;\n\n@Deprecated(since=\"6.0\") public abstract class AbstractThemeResolver extends Object implements ThemeResolver;\n@Deprecated(since=\"6.0\") public class CookieThemeResolver extends org.springframework.web.util.CookieGenerator implements ThemeResolver;\n@Deprecated(since=\"6.0\") public class FixedThemeResolver extends AbstractThemeResolver;\n@Deprecated(since=\"6.0\") public class SessionThemeResolver extends AbstractThemeResolver;\n@Deprecated(since=\"6.0\") public class ThemeChangeInterceptor extends Object implements HandlerInterceptor;\n", "des": "Theme support classes for Spring's web MVC framework."}
{"index": 1845, "repo": "spring-test-6.0.11", "code": "package rules;\n\npublic class SpringClassRule extends Object implements TestRule; // SpringClassRule is a custom JUnit TestRule that supports class-level features of the Spring TestContext Framework in standard JUnit tests by means of the TestContextManager and associated support classes and annotations.\npublic class SpringMethodRule extends Object implements MethodRule; // SpringMethodRule is a custom JUnit 4 MethodRule that supports instance-level and method-level features of the Spring TestContext Framework in standard JUnit tests by means of the TestContextManager and associated support classes and annotations.\n", "des": "Custom JUnit 4 Rules used in the Spring TestContext Framework."}
{"index": 2066, "repo": "spring-webmvc-6.0.11", "code": "package function;\n\npackage function.support; // Classes supporting the org.springframework.web.servlet.function package.\npublic interface AsyncServerResponse extends ServerResponse; // Asynchronous subtype of ServerResponse that exposes the future response.\npublic interface EntityResponse<T> extends ServerResponse; // Entity-specific subtype of ServerResponse that exposes entity data.\npublic static interface EntityResponse.Builder<T>; // Defines a builder for EntityResponse.\n@FunctionalInterface public interface HandlerFilterFunction<T extends ServerResponse,R extends ServerResponse>; // Represents a function that filters a handler function.\n@FunctionalInterface public interface HandlerFunction<T extends ServerResponse>; // Represents a function that handles a request.\npublic interface RenderingResponse extends ServerResponse; // Rendering-specific subtype of ServerResponse that exposes model and template data.\npublic static interface RenderingResponse.Builder; // Defines a builder for RenderingResponse.\n@FunctionalInterface public interface RequestPredicate; // Represents a function that evaluates on a given ServerRequest.\npublic abstract class RequestPredicates extends Object; // Implementations of RequestPredicate that implement various useful request matching operations, such as matching based on path, HTTP method, etc.\npublic static interface RequestPredicates.Visitor; // Receives notifications from the logical structure of request predicates.\n@FunctionalInterface public interface RouterFunction<T extends ServerResponse>; // Represents a function that routes to a handler function.\npublic abstract class RouterFunctions extends Object; // Central entry point to Spring's functional web framework. Exposes routing functionality, such as to create a RouterFunction using a discoverable builder-style API, to create a RouterFunction given a RequestPredicate and HandlerFunction, and to do further subrouting on an existing routing function.\npublic static interface RouterFunctions.Builder; // Represents a discoverable builder for router functions.\npublic static interface RouterFunctions.Visitor; // Receives notifications from the logical structure of router functions.\npublic interface ServerRequest; // Represents a server-side HTTP request, as handled by a HandlerFunction.\npublic static interface ServerRequest.Builder; // Defines a builder for a request.\npublic static interface ServerRequest.Headers; // Represents the headers of the HTTP request.\n", "des": "Provides the types that make up Spring's functional web framework for Servlet environments."}
{"index": 2044, "repo": "spring-messaging-6.0.11", "code": "package tcp;\n\npackage tcp.reactor; // Contains support for TCP messaging based on Reactor.\npublic class FixedIntervalReconnectStrategy extends Object implements ReconnectStrategy; // A simple strategy for making reconnect attempts at a fixed interval.\n@FunctionalInterface public interface ReconnectStrategy; // A contract to determine the frequency of reconnect attempts after connection failure.\npublic interface TcpConnection<P> extends Closeable; // A contract for sending messages and managing a TCP connection.\npublic interface TcpConnectionHandler<P>; // A contract for managing lifecycle events for a TCP connection including the handling of incoming messages.\npublic interface TcpOperations<P>; // A contract for establishing TCP connections.\n", "des": "Contains abstractions and implementation classes for establishing TCP connections via TcpOperations, handling messages via TcpConnectionHandler, as well as sending messages via TcpConnection."}
{"index": 1903, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package cassandra;\n\n@AutoConfiguration @ConditionalOnClass(com.datastax.oss.driver.api.core.CqlSession.class) @EnableConfigurationProperties(CassandraProperties.class) public class CassandraAutoConfiguration extends Object; // Auto-configuration for Cassandra.\npublic interface CassandraConnectionDetails extends ConnectionDetails; // Details required to establish a connection to a Cassandra service.\npublic static record CassandraConnectionDetails.Node(String host, int port) extends Record; // A Cassandra node.\n@ConfigurationProperties(prefix=\"spring.cassandra\") public class CassandraProperties extends Object; // Configuration properties for Cassandra.\npublic static enum CassandraProperties.Compression extends Enum<CassandraProperties.Compression>; // Name of the algorithm used to compress protocol frames.\npublic static class CassandraProperties.Connection extends Object;\npublic static class CassandraProperties.Controlconnection extends Object;\npublic static class CassandraProperties.Pool extends Object; // Pool properties.\npublic static class CassandraProperties.Request extends Object;\npublic static class CassandraProperties.Ssl extends Object;\npublic static class CassandraProperties.Throttler extends Object;\npublic static enum CassandraProperties.ThrottlerType extends Enum<CassandraProperties.ThrottlerType>;\n@FunctionalInterface public interface CqlSessionBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the CqlSession through a CqlSessionBuilder whilst retaining default auto-configuration.\npublic interface DriverConfigLoaderBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the DriverConfigLoader through a DriverConfigLoaderBuilderCustomizer whilst retaining default auto-configuration.\n", "des": "Auto-configuration for Cassandra."}
{"index": 1749, "repo": "spring-data-mongodb-4.1.2", "code": "package aggregation;\n\npublic class AccumulatorOperators extends Object; // Gateway to accumulator aggregation operations.\npublic static class AccumulatorOperators.AccumulatorOperatorFactory extends Object;\npublic static class AccumulatorOperators.Avg extends Object; // AggregationExpression for $avg.\npublic static class AccumulatorOperators.CovariancePop extends Object; // AggregationExpression for $covariancePop.\npublic static class AccumulatorOperators.CovarianceSamp extends Object; // AggregationExpression for $covarianceSamp.\npublic static class AccumulatorOperators.ExpMovingAvg extends Object; // AccumulatorOperators.ExpMovingAvg calculates the exponential moving average of numeric values.\npublic static interface AccumulatorOperators.ExpMovingAvgBuilder; // Builder for AccumulatorOperators.ExpMovingAvg.\npublic static class AccumulatorOperators.Max extends Object; // AggregationExpression for $max.\npublic static class AccumulatorOperators.Min extends Object; // AggregationExpression for $min.\npublic static class AccumulatorOperators.StdDevPop extends Object; // AggregationExpression for $stdDevPop.\npublic static class AccumulatorOperators.StdDevSamp extends Object; // AggregationExpression for $stdDevSamp.\npublic static class AccumulatorOperators.Sum extends Object; // AggregationExpression for $sum.\npublic class AddFieldsOperation extends Object; // Adds new fields to documents.\npublic static class AddFieldsOperation.AddFieldsOperationBuilder extends Object;\npublic static interface AddFieldsOperation.AddFieldsOperationBuilder.ValueAppender;\npublic class Aggregation extends Object; // An Aggregation is a representation of a list of aggregation steps to be performed by the MongoDB Aggregation Framework.\npublic interface AggregationExpression extends MongoExpression; // An AggregationExpression can be used with field expressions in aggregation pipeline stages like project and group.\npublic class AggregationExpressionCriteria extends Object implements CriteriaDefinition; // A criteria to use $expr within a Query.\npublic interface AggregationOperation; // Represents one single operation in an aggregation pipeline.\npublic interface AggregationOperationContext extends CodecRegistryProvider; // The context for an AggregationOperation.\npublic class AggregationOptions extends Object implements ReadConcernAware, ReadPreferenceAware; // Holds a set of configurable aggregation options that can be used within an aggregation pipeline.\npublic static class AggregationOptions.Builder extends Object; // A Builder for AggregationOptions.\n", "des": "Support for the MongoDB aggregation framework."}
{"index": 1173, "repo": "commons-math3-3.6.1", "code": "package linear;\n\nInterface AnyMatrix; // Interface defining very basic matrix operations.\nInterface DecompositionSolver; // Interface handling decomposition algorithms that can solve A Ã— X = B.\nInterface FieldDecompositionSolver<T extends FieldElement<T>>; // Interface handling decomposition algorithms that can solve A Ã— X = B.\nInterface FieldMatrix<T extends FieldElement<T>>; // Interface defining field-valued matrix with basic algebraic operations.\nInterface FieldMatrixChangingVisitor<T extends FieldElement<?>>; // Interface defining a visitor for matrix entries.\nInterface FieldMatrixPreservingVisitor<T extends FieldElement<?>>; // Interface defining a visitor for matrix entries.\nInterface FieldVector<T extends FieldElement<T>>; // Interface defining a field-valued vector with basic algebraic operations.\nInterface FieldVectorChangingVisitor<T extends FieldElement<?>>; // This interface defines a visitor for the entries of a vector.\nInterface FieldVectorPreservingVisitor<T extends FieldElement<?>>; // This interface defines a visitor for the entries of a vector.\nInterface RealMatrix; // Interface defining a real-valued matrix with basic algebraic operations.\nInterface RealMatrixChangingVisitor; // Interface defining a visitor for matrix entries.\nInterface RealMatrixPreservingVisitor; // Interface defining a visitor for matrix entries.\nInterface RealVectorChangingVisitor; // This interface defines a visitor for the entries of a vector.\nInterface RealVectorPreservingVisitor; // This interface defines a visitor for the entries of a vector.\nInterface SparseRealMatrix; // Marker interface for RealMatrix implementations that require sparse backing storage\nClass AbstractFieldMatrix<T extends FieldElement<T>>; // Basic implementation of FieldMatrix methods regardless of the underlying storage.\nClass AbstractRealMatrix; // Basic implementation of RealMatrix methods regardless of the underlying storage.\nClass Array2DRowFieldMatrix<T extends FieldElement<T>>; // Implementation of FieldMatrix using a FieldElement[][] array to store entries.\nClass Array2DRowRealMatrix; // Implementation of RealMatrix using a double[][] array to store entries.\nClass ArrayFieldVector<T extends FieldElement<T>>; // This class implements the FieldVector interface with a FieldElement array.\nClass ArrayRealVector; // This class implements the RealVector interface with a double array.\n", "des": "Linear algebra support."}
{"index": 371, "repo": "commons-geometry-euclidean-1.0", "code": "package rotation;\n\nClass Rotation2D; // Class representing a rotation in 2 dimensional Euclidean space.\n", "des": "This package provides components related to rotations in 2 dimensional Euclidean space."}
{"index": 3149, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface DdlTransactionIsolator; // Provides access to a Connection that is isolated from any \"current transaction\" with the designed purpose of performing DDL commands\nInterface SynchronizationRegistry; // Manages a registry of (local) JTA Synchronization instances\nInterface SynchronizationRegistryImplementor; // SPI contract for SynchronizationRegistry implementors.\nInterface TransactionCoordinator; // Models the coordination of all transaction related flows.\nInterface TransactionCoordinator.TransactionDriver; // Provides the means for \"local transactions\" (as transaction drivers) to control the underlying \"physical transaction\" currently associated with the TransactionCoordinator.\nInterface TransactionCoordinatorBuilder; // Builder for TransactionCoordinator instances\nInterface TransactionCoordinatorBuilder.Options; // Access to options to are specific to each TransactionCoordinator instance\nInterface TransactionCoordinatorOwner; // Models an owner of a TransactionCoordinator.\nEnum TransactionStatus; // Enumeration of statuses in which a transaction facade (Transaction) might be.\n", "des": "Extended SPI contracts for the resource-level transaction capabilities of Hibernate."}
{"index": 440, "repo": "hbase-client-3.0.0-alpha-4", "code": "package coprocessor;\n\nInterface Batch.Call<T,R>; // Defines a unit of work to be executed.\nInterface Batch.Callback<R>; // Defines a generic callback to be triggered for each Batch.Call.call(Object) result.\nClass Batch; // A collection of interfaces and utilities used for interacting with custom RPC interfaces exposed by Coprocessors.\nClass BigDecimalColumnInterpreter; // ColumnInterpreter for doing Aggregation's with BigDecimal columns.\nClass DoubleColumnInterpreter; // a concrete column interpreter implementation.\nClass LongColumnInterpreter; // a concrete column interpreter implementation.\n", "des": "Provides client classes for invoking Coprocessor RPC protocols Overview Example Usage"}
{"index": 330, "repo": "kafka-clients-3.5.0", "code": "package oauthbearer;\n\npackage oauthbearer.secured; // This package is deprecated.\nInterface OAuthBearerToken; // The b64token value as defined in RFC 6750 Section 2.1 along with the token's specific scope and lifetime and principal name.\nClass OAuthBearerExtensionsValidatorCallback; // A Callback for use by the SaslServer implementation when it needs to validate the SASL extensions for the OAUTHBEARER mechanism Callback handlers should use the OAuthBearerExtensionsValidatorCallback.valid(String) method to communicate valid extensions back to the SASL server.\nClass OAuthBearerLoginCallbackHandler; // OAuthBearerLoginCallbackHandler is an AuthenticateCallbackHandler that accepts OAuthBearerTokenCallback and SaslExtensionsCallback callbacks to perform the steps to request a JWT from an OAuth/OIDC provider using the clientcredentials.\nClass OAuthBearerLoginModule; // The LoginModule for the SASL/OAUTHBEARER mechanism.\nClass OAuthBearerTokenCallback; // A Callback for use by the SaslClient and Login implementations when they require an OAuth 2 bearer token.\nClass OAuthBearerValidatorCallback; // A Callback for use by the SaslServer implementation when it needs to provide an OAuth 2 bearer token compact serialization for validation.\nClass OAuthBearerValidatorCallbackHandler; // OAuthBearerValidatorCallbackHandler is an AuthenticateCallbackHandler that accepts OAuthBearerValidatorCallback and OAuthBearerExtensionsValidatorCallback callbacks to implement OAuth/OIDC validation.\n", "des": "Provides a LoginModule for using OAuth Bearer Token authentication with Kafka clusters."}
{"index": 1463, "repo": "spring-data-redis-3.1.2", "code": "package core;\n\npublic class MappingRedisEntityInformation<T,ID> extends PersistentEntityInformation<T,ID> implements RedisEntityInformation<T,ID>; // RedisEntityInformation implementation using a RedisPersistentEntity instance to lookup the necessary information.\npublic interface RedisEntityInformation<T,ID> extends EntityInformation<T,ID>;\n", "des": "Core domain entities for repository support."}
{"index": 1804, "repo": "spring-aop-6.0.11", "code": "package framework;\n\npackage framework.adapter; // SPI package allowing Spring AOP framework to handle arbitrary advice types.\npackage framework.autoproxy; // Bean post-processors for use in ApplicationContexts to simplify AOP usage by automatically creating AOP proxies without the need to use a ProxyFactoryBean.\npublic abstract class AbstractAdvisingBeanPostProcessor extends ProxyProcessorSupport implements org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor; // Base class for BeanPostProcessor implementations that apply a Spring AOP Advisor to specific beans.\npublic abstract class AbstractSingletonProxyFactoryBean extends ProxyConfig implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Convenient superclass for FactoryBean types that produce singleton-scoped proxy objects.\npublic interface Advised extends TargetClassAware; // Interface to be implemented by classes that hold the configuration of a factory of AOP proxies.\npublic class AdvisedSupport extends ProxyConfig implements Advised; // Base class for AOP proxy configuration managers.\npublic interface AdvisedSupportListener; // Listener to be registered on ProxyCreatorSupport objects Allows for receiving callbacks on activation and change of advice.\npublic interface AdvisorChainFactory; // Factory interface for advisor chains.\npublic class AopConfigException extends org.springframework.core.NestedRuntimeException; // Exception that gets thrown on illegal AOP configuration arguments.\npublic final class AopContext extends Object; // Class containing static methods used to obtain information about the current AOP invocation.\npublic interface AopInfrastructureBean; // Marker interface that indicates a bean that is part of Spring's AOP infrastructure.\npublic interface AopProxy; // Delegate interface for a configured AOP proxy, allowing for the creation of actual proxy objects.\npublic interface AopProxyFactory; // Interface to be implemented by factories that are able to create AOP proxies based on AdvisedSupport configuration objects.\npublic abstract class AopProxyUtils extends Object; // Utility methods for AOP proxy factories.\npublic class DefaultAdvisorChainFactory extends Object implements AdvisorChainFactory, Serializable; // A simple but definitive way of working out an advice chain for a Method, given an Advised object.\n", "des": "Package containing Spring's basic AOP infrastructure, compliant with the AOP Alliance interfaces."}
{"index": 3235, "repo": "opencms-core-15.0", "code": "package rpc;\n\nInterface I_CmsContentService; // The content service used to load and persist entity and type information.\nInterface I_CmsContentServiceAsync; // The content service used to load and persist entity and type information.\nInterface I_CmsSerialDateService; // Synchronous interface for the serial date service.\nInterface I_CmsSerialDateServiceAsync; // Asynchronous interface for the serial date service.\n", "des": "Contains the acacia editor RPC service interfaces."}
{"index": 2793, "repo": "shiro-spring-2.0.0-alpha-2", "code": "package interceptor;\n\npublic class AopAllianceAnnotationsAuthorizingMethodInterceptor extends org.apache.shiro.authz.aop.AnnotationsAuthorizingMethodInterceptor implements org.aopalliance.intercept.MethodInterceptor; // Allows Shiro Annotations to work in any AOP Alliance specific implementation environment (for example, Spring).\npublic class AuthorizationAttributeSourceAdvisor extends org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor; // TODO - complete JavaDoc\n", "des": "Spring AOP support for enabling Shiro annotations in Spring-configured applications."}
{"index": 539, "repo": "commons-geometry-core-1.0", "code": "package core;\n\npackage core.internal; // This package contains utilities intended for internal use only.\npackage core.partitioning; // This package contains code related to partitioning of spaces by hyperplanes.\nInterface Embedding<P extends Point<P>,S extends Point<S>>; // This interface defines mappings between a space and one of its subspaces.\nInterface Point<P extends Point<P>>; // Interface representing a point in a mathematical space.\nInterface Region<P extends Point<P>>; // Interface representing a region in a space.\nInterface RegionEmbedding<P extends Point<P>,S extends Point<S>>; // Interface representing a geometric element that embeds a region in a subspace.\nInterface Sized; // Interface representing a geometric element with a size.\nInterface Spatial; // Interface representing a generic element in a mathematical space.\nInterface Transform<P extends Point<P>>; // Interface representing geometric transforms in a space, i.e.\nInterface Vector<V extends Vector<V>>; // Interface representing a vector in a vector space or displacement vectors in an affine space.\nEnum RegionLocation; // Enumeration containing the possible locations of a point with respect to a region.\n", "des": "This package contains the core interfaces and classes for commons-geometry."}
{"index": 581, "repo": "commons-collections-3.2.2", "code": "package iterators;\n\nClass AbstractIteratorDecorator; // Provides basic behaviour for decorating an iterator with extra functionality.\nClass AbstractListIteratorDecorator; // Provides basic behaviour for decorating a list iterator with extra functionality.\nClass AbstractMapIteratorDecorator; // Provides basic behaviour for decorating a map iterator with extra functionality.\nClass AbstractOrderedMapIteratorDecorator; // Provides basic behaviour for decorating an ordered map iterator with extra functionality.\nClass ArrayIterator; // Implements an Iterator over any array.\nClass ArrayListIterator; // Implements a ListIterator over an array.\nClass CollatingIterator; // Provides an ordered iteration over the elements contained in a collection of ordered Iterators.\nClass EmptyIterator; // Provides an implementation of an empty iterator.\nClass EmptyListIterator; // Provides an implementation of an empty list iterator.\nClass EmptyMapIterator; // Provides an implementation of an empty map iterator.\nClass EmptyOrderedIterator; // Provides an implementation of an empty ordered iterator.\nClass EmptyOrderedMapIterator; // Provides an implementation of an empty ordered map iterator.\nClass EntrySetMapIterator; // Implements a MapIterator using a Map entrySet.\nClass EnumerationIterator; // Adapter to make Enumeration instances appear to be Iterator instances.\nClass FilterIterator; // Decorates another Iterator using a predicate to filter elements.\nClass FilterListIterator; // Decorates another ListIterator using a predicate to filter elements.\nClass IteratorChain; // An IteratorChain is an Iterator that wraps a number of Iterators.\nClass IteratorEnumeration; // Adapter to make an Iterator instance appear to be an Enumeration instance.\nClass ListIteratorWrapper; // Converts an iterator into a list iterator by caching the returned entries.\nClass LoopingIterator; // An Iterator that restarts when it reaches the end.\nClass LoopingListIterator; // A ListIterator that restarts when it reaches the end or when it reaches the beginning.\nClass ObjectArrayIterator; // An Iterator over an array of objects.\nClass ObjectArrayListIterator; // Implements a ListIterator over an array of objects.\nClass ObjectGraphIterator; // An Iterator that can traverse multiple iterators down an object graph.\nClass ProxyIterator; // Use AbstractIteratorDecorator.\nClass ProxyListIterator; // Use AbstractListIteratorDecorator.\nClass ReverseListIterator; // Iterates backwards through a List, starting with the last element and continuing to the first.\nClass SingletonIterator; // SingletonIterator is an Iterator over a single object instance.\n", "des": "This package contains implementations of the Iterator interface."}
{"index": 1439, "repo": "spring-boot-actuator-3.1.1", "code": "package mappings;\n\npackage mappings.reactive; // Actuator reactive request mappings support.\npackage mappings.servlet; // Actuator servlet request mappings support.\npublic class HandlerMethodDescription extends Object; // A description of a HandlerMethod.\npublic interface MappingDescriptionProvider; // A MappingDescriptionProvider provides a List of mapping descriptions through implementation-specific introspection of an application context.\n@Endpoint(id=\"mappings\") public class MappingsEndpoint extends Object; // @Endpoint to expose HTTP request mappings.\npublic static final class MappingsEndpoint.ApplicationMappingsDescriptor extends Object implements OperationResponseBody; // Description of an application's request mappings.\npublic static final class MappingsEndpoint.ContextMappingsDescriptor extends Object; // Description of an application context's request mappings.\n", "des": "Actuator web request mappings support."}
{"index": 1760, "repo": "spring-data-mongodb-4.1.2", "code": "package query;\n\npublic class BasicQuery extends Query; // Custom Query implementation to setup a basic query from some arbitrary JSON query string.\npublic class BasicUpdate extends Update;\npublic class Collation extends Object; // Central abstraction for MongoDB collation support.\npublic static class Collation.Alternate extends Object;\npublic static class Collation.AlternateWithMaxVariable extends Collation.Alternate;\npublic static class Collation.CaseFirst extends Object;\npublic static class Collation.CollationLocale extends Object; // ICU locale abstraction for usage with MongoDB Collation.\npublic static interface Collation.ComparisonLevel; // Abstraction for the ICU Comparison Levels.\npublic static class Collation.PrimaryICUComparisonLevel extends Object; // Primary-strength Collation.ICUComparisonLevel.\npublic static class Collation.SecondaryICUComparisonLevel extends Object; // Secondary-strength Collation.ICUComparisonLevel.\npublic static class Collation.TertiaryICUComparisonLevel extends Object; // Tertiary-strength Collation.ICUComparisonLevel.\npublic class Criteria extends Object implements CriteriaDefinition; // Central class for creating queries.\npublic static interface Criteria.BitwiseCriteriaOperators; // MongoDB specific bitwise query operators like $bitsAllClear, $bitsAllSet,... for usage with Criteria.bits() and Query.\npublic interface CriteriaDefinition;\npublic class Field extends Object; // Field projection.\npublic static interface Field.FieldProjectionExpression; // Intermediate builder part for projecting a MongoExpression to a result field.\npublic final class GeoCommand extends Object; // Wrapper around a Shape to allow appropriate query rendering.\npublic class Meta extends Object; // Meta-data for Query instances.\npublic static enum Meta.CursorOption extends Enum<Meta.CursorOption>; // Meta.CursorOption represents OP_QUERY wire protocol flags to change the behavior of queries.\npublic class MetricConversion extends Object; // Metric and Distance conversions using the metric system.\npublic enum MongoRegexCreator extends Enum<MongoRegexCreator>;\npublic static enum MongoRegexCreator.MatchMode extends Enum<MongoRegexCreator.MatchMode>; // Match modes for treatment of String values.\npublic final class NearQuery extends Object implements ReadConcernAware, ReadPreferenceAware; // Builder class to build near-queries.\n", "des": "MongoDB specific query and update support."}
{"index": 1616, "repo": "spring-data-neo4j-7.1.2", "code": "package config;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(org.springframework.data.neo4j.repository.config.Neo4jRepositoriesRegistrar.class) public @interface EnableNeo4jRepositories; // Annotation to activate Neo4j repositories.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(org.springframework.data.neo4j.repository.config.ReactiveNeo4jRepositoriesRegistrar.class) public @interface EnableReactiveNeo4jRepositories; // Annotation to activate reactive Neo4j repositories.\n@API(status=INTERNAL, since=\"6.0\") public final class Neo4jRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport; // This dedicated Neo4j repository extension will be registered via Neo4jRepositoriesRegistrar and then provide all necessary beans to be registered in the application's context before the user's \"business\" beans gets registered.\n@API(status=INTERNAL, since=\"6.0\") public final class ReactiveNeo4jRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport; // This dedicated Neo4j repository extension will be registered via Neo4jRepositoriesRegistrar and then provide all necessary beans to be registered in the application's context before the user's \"business\" beans gets registered.\n", "des": "Configuration infrastructure for Neo4j specific repositories, especially dedicated annotations to enable imperative and reactive Spring Data Neo4j repositories."}
{"index": 1106, "repo": "fontbox-3.0.0-beta1", "code": "package gsub;\n\nInterface GlyphArraySplitter; // This class splits an array of GlyphIds with a prospective match.\nInterface GsubWorker; // This class is responsible for replacing GlyphIDs with new ones according to the GSUB tables.\nClass CompoundCharacterTokenizer; // Takes in the given text having compound-glyphs to substitute, and splits it into chunks consisting of parts that should be substituted and the ones that can be processed normally.\nClass GlyphArraySplitterRegexImpl; // This is an in-efficient implementation based on regex, which helps split the array.\nClass GlyphSubstitutionDataExtractor; // This class has utility methods to extract meaningful GsubData from the highly obfuscated GSUB Tables.\nClass GsubWorkerFactory; // Gets a Language specific instance of a GsubWorker\nClass GsubWorkerForBengali; // Bengali-specific implementation of GSUB system\nClass GsubWorkerForLatin; // Latin-specific implementation of GSUB system\n", "des": "This package contains utility classes which extract meanigful data from the highly obfuscated GSUB table structures."}
{"index": 861, "repo": "calcite-core-1.34.0", "code": "package dialect;\n\nInterface JethroDataSqlDialect.JethroInfoCache; // Stores information about capabilities of Jethro databases.\nClass AccessSqlDialect; // A SqlDialect implementation for the Access database.\nClass AnsiSqlDialect; // A SqlDialect implementation for an unknown ANSI compatible database.\nClass BigQuerySqlDialect; // A SqlDialect implementation for Google BigQuery's \"Standard SQL\" dialect.\nClass CalciteSqlDialect; // A SqlDialect implementation that produces SQL that can be parsed by Apache Calcite.\nClass ClickHouseSqlDialect; // A SqlDialect implementation for the ClickHouse database.\nClass Db2SqlDialect; // A SqlDialect implementation for the IBM DB2 database.\nClass DerbySqlDialect; // A SqlDialect implementation for the Apache Derby database.\nClass ExasolSqlDialect; // A SqlDialect implementation for the Exasol database.\nClass FirebirdSqlDialect; // A SqlDialect implementation for the Firebird database.\nClass FireboltSqlDialect; // A SqlDialect implementation for the Firebolt database.\nClass H2SqlDialect; // A SqlDialect implementation for the H2 database.\nClass HiveSqlDialect; // A SqlDialect implementation for the Apache Hive database.\nClass HsqldbSqlDialect; // A SqlDialect implementation for the Hsqldb database.\nClass InfobrightSqlDialect; // A SqlDialect implementation for the Infobright database.\nClass InformixSqlDialect; // A SqlDialect implementation for the Informix database.\nClass IngresSqlDialect; // A SqlDialect implementation for the Ingres database.\nClass InterbaseSqlDialect; // A SqlDialect implementation for the Interbase database.\nClass JethroDataSqlDialect; // A SqlDialect implementation for the JethroData database.\nClass JethroDataSqlDialect.JethroInfo; // Information about the capabilities of a Jethro database.\nClass LucidDbSqlDialect; // A SqlDialect implementation for the LucidDB database.\nClass MssqlSqlDialect; // A SqlDialect implementation for the Microsoft SQL Server database.\nClass MysqlSqlDialect; // A SqlDialect implementation for the MySQL database.\nClass NeoviewSqlDialect; // A SqlDialect implementation for the Neoview database.\nClass NetezzaSqlDialect; // A SqlDialect implementation for the Netezza database.\n", "des": "SQL unparsers for JDBC dialects."}
{"index": 1899, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package aop;\n\n@AutoConfiguration @ConditionalOnProperty(prefix=\"spring.aop\", name=\"auto\", havingValue=\"true\", matchIfMissing=true) public class AopAutoConfiguration extends Object; // Auto-configuration for Spring's AOP support.\n", "des": "Auto-configuration for Spring AOP."}
{"index": 1004, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass AbstractAsyncStandaloneMessageReceiver; // Abstract base class for asynchronous standalone, server-side transport objects.\nClass AbstractStandaloneMessageReceiver; // Abstract base class for standalone, server-side transport objects.\nClass EnumerationIterator<T>; // Adapts an Enumeration to follow the interface of Iterator.\nClass SimpleWebServiceMessageReceiverObjectSupport; // Base class for server-side transport objects which have a predefined WebServiceMessageReceiver.\nClass TransportUtils; // Generic utility methods for working with Web service transports.\nClass WebServiceMessageReceiverObjectSupport; // Convenience base class for server-side transport objects.\n", "des": "Classes supporting the org.springframework.ws.transport package."}
{"index": 2942, "repo": "groovy-4.0.13", "code": "package vmplugin;\n\npublic interface VMPlugin; // Interface to access VM version based actions.\npublic class VMPluginFactory extends Object; // Factory class to get functionality based on the VM version.\n", "des": "JVM version specific classes."}
{"index": 1449, "repo": "spring-data-redis-3.1.2", "code": "package stream;\n\npublic interface ByteBufferRecord extends MapRecord<ByteBuffer,ByteBuffer,ByteBuffer>; // A Record within the stream backed by a collection of binary field/value pairs.\npublic interface ByteRecord extends MapRecord<byte[],byte[],byte[]>; // A Record within the stream backed by a collection of binary field/value pairs.\npublic class Consumer extends Object; // Value object representing a Stream consumer within a consumer group.\npublic interface MapRecord<S,K,V> extends Record<S,Map<K,V>>, Iterable<Map.Entry<K,V>>; // A Record within the stream backed by a collection of field/value pairs.\npublic interface ObjectRecord<S,V> extends Record<S,V>; // A Record within the stream mapped to a single object.\npublic class PendingMessage extends Object; // Value object representing a single pending message containing its ID, the consumer that fetched the message and has still to acknowledge it, the time elapsed since the messages last delivery and the the total number of times delivered.\npublic class PendingMessages extends Object implements Streamable<PendingMessage>; // Value object holding detailed information about pending messages in consumer group for a given Range and offset.\npublic class PendingMessagesSummary extends Object; // Value Object summarizing pending messages in a consumer group.\npublic final class ReadOffset extends Object; // Value object representing read offset for a Stream.\npublic interface Record<S,V>; // A single entry in the stream consisting of the entry-id and the actual entry-value (typically a collection of field/value pairs).\npublic class RecordId extends Object; // The id of a single Record within a stream.\npublic class StreamInfo extends Object;\npublic static class StreamInfo.XInfoConsumer extends StreamInfo.XInfoObject;\npublic static class StreamInfo.XInfoConsumers extends Object implements Streamable<StreamInfo.XInfoConsumer>;\npublic static class StreamInfo.XInfoGroup extends StreamInfo.XInfoObject;\npublic static class StreamInfo.XInfoGroups extends Object implements Streamable<StreamInfo.XInfoGroup>; // Value object holding general information about consumer groups associated with a Redis Stream.\npublic static class StreamInfo.XInfoObject extends Object;\npublic static class StreamInfo.XInfoStream extends StreamInfo.XInfoObject; // Value object holding general information about a Redis Stream.\n", "des": "Data structures and interfaces to interact with Redis Streams."}
{"index": 1339, "repo": "groovy-all-4.0.13", "code": "package typehandling;\n\npublic final class BigDecimalMath extends NumberMath; // BigDecimal NumberMath operations\npublic final class BigIntegerMath extends NumberMath; // BigInteger NumberMath operations\npublic class DefaultTypeTransformation extends Object; // Class providing various type conversions, coercions and boxing/unboxing operations.\npublic final class FloatingPointMath extends NumberMath; // FloatingPoint (Double and Float) NumberMath operations\npublic class GroovyCastException extends ClassCastException;\npublic final class IntegerMath extends NumberMath; // Integer NumberMath operations\npublic final class LongMath extends NumberMath; // Long NumberMath operations\npublic abstract class NumberMath extends Object; // Stateless objects used to perform math on the various Number subclasses.\npublic class NumberMathModificationInfo extends Object;\npublic class ShortTypeHandling extends Object; // Class providing various short paths for type conversions.\n", "des": "Classes used to execute special actions based on the type."}
{"index": 3663, "repo": "solr-core-9.3.0", "code": "package highlight;\n\nInterface SolrEncoder;\nInterface SolrFormatter;\nInterface SolrFragListBuilder;\nInterface SolrFragmenter;\nClass BreakIteratorBoundaryScanner;\nClass DefaultEncoder; // Use the DefaultEncoder\nClass DefaultSolrHighlighter;\nClass DefaultSolrHighlighter.FvhContainer;\nClass GapFragmenter;\nClass HighlightingPluginBase;\nClass HtmlEncoder; // Use the SimpleHTMLEncoder\nClass HtmlFormatter; // Use the SimpleHTMLFormatter\nClass RegexFragmenter; // Fragmenter that tries to produce snippets that \"look\" like a regular expression.\nClass ScoreOrderFragmentsBuilder;\nClass SimpleBoundaryScanner;\nClass SimpleFragListBuilder;\nClass SimpleFragmentsBuilder;\nClass SingleFragListBuilder;\nClass SolrBoundaryScanner;\nClass SolrFragmentsBuilder;\nClass SolrHighlighter;\nClass UnifiedSolrHighlighter; // Highlighter impl that uses UnifiedHighlighter\nClass UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter; // From UnifiedSolrHighlighter.getHighlighter(org.apache.solr.request.SolrQueryRequest).\nClass WeightedFragListBuilder;\n", "des": "SolrHighlighter API and related implementations and utilities"}
{"index": 3761, "repo": "lucene-analysis-common-9.7.0", "code": "package ar;\n\nClass ArabicAnalyzer; // Analyzer for Arabic.\nClass ArabicNormalizationFilter; // A TokenFilter that applies ArabicNormalizer to normalize the orthography.\nClass ArabicNormalizationFilterFactory; // Factory for ArabicNormalizationFilter.\nClass ArabicNormalizer; // Normalizer for Arabic.\nClass ArabicStemFilter; // A TokenFilter that applies ArabicStemmer to stem Arabic words..\nClass ArabicStemFilterFactory; // Factory for ArabicStemFilter.\nClass ArabicStemmer; // Stemmer for Arabic.\n", "des": "Analyzer for Arabic."}
{"index": 3642, "repo": "solr-core-9.3.0", "code": "package cluster;\n\npackage cluster.events; // Interfaces defining support for cluster-level event generation and processing.\npackage cluster.placement; // This package contains interfaces visible by plugins (i.e.\nInterface Cluster; // A representation of the SolrCloud cluster state, providing information on which nodes and collections are part of the cluster and a way to get to more detailed info.\nInterface Node; // Representation of a SolrCloud node or server in the SolrCloud cluster.\nInterface Replica; // An instantiation (or one of the copies) of a given Shard of a given SolrCollection.\nInterface Shard; // Shard in a SolrCollection, i.e.\nInterface SolrCollection; // Represents a Collection in SolrCloud (unrelated to Collection that uses the nicer name).\nEnum Replica.ReplicaState;\nEnum Replica.ReplicaType; // The order of this enum is important from the most to least \"important\" replica type.\nEnum Shard.ShardState;\n", "des": "This package contains the interfaces giving access to cluster state, including nodes, collections and the structure of the collections (shards and replicas)."}
{"index": 3599, "repo": "lucene-test-framework-9.7.0", "code": "package util;\n\npackage util.automaton; // Support for testing automata.\npackage util.fst; // Support for FST testing.\nInterface LuceneTestCase.ThrowingConsumer<T>; // A Consumer that can throw any checked exception.\nInterface LuceneTestCase.ThrowingRunnable; // A runnable that can throw any checked exception.\nInterface TestRuleIgnoreTestSuites.NestedTestSuite; // Marker interface for nested suites that should be ignored if executed in stand-alone mode.\nClass BaseBitSetTestCase<T extends BitSet>; // Base test case for BitSets.\nClass BaseDocIdSetTestCase<T extends DocIdSet>; // Base test class for DocIdSets.\nClass English; // Converts numbers to english strings for testing.\nClass FailOnNonBulkMergesInfoStream; // Hackidy-HÃ¤ck-Hack to cause a test to fail on non-bulk merges\nClass FailureMarker; // A RunListener that detects suite/ test failures.\nClass LineFileDocs; // Minimal port of benchmark's LneDocSource + DocMaker, so tests can enum docs from a line file created by benchmark's WriteLineDoc task\nClass LuceneJUnit3MethodProvider; // Backwards compatible test* method provider (public, non-static).\nClass LuceneTestCase; // Base class for all Lucene unit tests, Junit3 or Junit4 variant.\nClass NullInfoStream; // Prints nothing.\nClass QuickPatchThreadsFilter; // Last minute patches.\nClass RamUsageTester; // Crawls object graph to collect RAM usage for testing\nClass RamUsageTester.Accumulator; // An accumulator of object references.\nClass Rethrow; // Sneaky: rethrowing checked exceptions as unchecked ones.\nClass RunListenerPrintReproduceInfo; // A suite listener printing a \"reproduce string\".\nClass StringMockResourceLoader; // Fake resource loader for tests: works if you want to fake reading a single file\nClass TestRuleAssertionsRequired; // Require assertions for Lucene/Solr packages.\nClass TestRuleIgnoreAfterMaxFailures; // This rule keeps a count of failed tests (suites) and will result in an AssumptionViolatedException after a given number of failures for all tests following this condition.\n", "des": "General test support."}
{"index": 1273, "repo": "spring-core-6.0.11", "code": "package support;\n\npublic interface ConfigurableConversionService extends ConversionService, ConverterRegistry; // Configuration interface to be implemented by most if not all ConversionService types.\npublic final class ConversionServiceFactory extends Object; // A factory for common ConversionService configurations.\npublic class ConvertingPropertyEditorAdapter extends PropertyEditorSupport; // Adapter that exposes a PropertyEditor for any given ConversionService and specific target type.\npublic class DefaultConversionService extends GenericConversionService; // A specialization of GenericConversionService configured by default with converters appropriate for most environments.\npublic class GenericConversionService extends Object implements ConfigurableConversionService; // Base ConversionService implementation suitable for use in most environments.\n", "des": "Default implementation of the type conversion system."}
{"index": 1668, "repo": "spring-boot-cli-3.1.1", "code": "package command;\n\npackage command.core; // Core CLI commands.\npackage command.encodepassword; // CLI command for password encoding.\npackage command.init; // CLI command for initializing a new application using Spring Initializr.\npackage command.options; // Support classes for handling command line options.\npackage command.shell; // Classes for running a nested shell in the CLI.\npackage command.status; // CLI command status.\npublic abstract class AbstractCommand extends Object implements Command; // Abstract Command implementation.\npublic interface Command; // A single command that can be run from the CLI.\npublic class CommandException extends RuntimeException; // Runtime exception wrapper that defines additional CommandException.Options that are understood by the CommandRunner.\npublic static enum CommandException.Option extends Enum<CommandException.Option>; // Specific options understood by the CommandRunner.\n@FunctionalInterface public interface CommandFactory; // Factory used to create CLI Commands.\npublic class CommandRunner extends Object implements Iterable<Command>; // Main class used to run Commands.\npublic class HelpExample extends Object; // An example that can be displayed in the help.\npublic class NoHelpCommandArgumentsException extends CommandException; // Exception used to when the help command is called without arguments.\npublic class NoSuchCommandException extends CommandException; // Exception used when a command is not found.\npublic abstract class OptionParsingCommand extends AbstractCommand; // Base class for a Command that parse options using an OptionHandler.\n", "des": "Command infrastructure for the CLI."}
{"index": 3385, "repo": "commons-imaging-1.0-alpha3", "code": "package color;\n\nClass ColorCieLab; // Represents a color in the CIELAB color space, also known as LAB color space.\nClass ColorCieLch; // Represents a color in the CIELCH color space.\nClass ColorCieLuv; // Represents a color in the CIELUV color space..\nClass ColorCmy; // Represents a color in the CMY color space.\nClass ColorCmyk; // Represents a color in the CMYK color space.\nClass ColorConversions;\nClass ColorDin99Lab; // Represents a color in the DIN99 color space, a derivation of the CIE LAB color space.\nClass ColorHsl; // Represents a color in the HSL color space.\nClass ColorHsv; // Represents a color in the HSV color space.\nClass ColorHunterLab; // Represents a color in the Hunter Lab color space.\nClass ColorXyz; // Represents a color in the CIE 1931 color space, also known as XYZ color space.\n", "des": "Color spaces and conversions between them."}
{"index": 1553, "repo": "spring-context-6.0.11", "code": "package support;\n\n@Deprecated(since=\"6.0\") public class DelegatingThemeSource extends Object implements HierarchicalThemeSource;\n@Deprecated(since=\"6.0\") public class ResourceBundleThemeSource extends Object implements HierarchicalThemeSource, org.springframework.beans.factory.BeanClassLoaderAware;\n@Deprecated(since=\"6.0\") public class SimpleTheme extends Object implements Theme;\n@Deprecated(since=\"6.0\") public abstract class UiApplicationContextUtils extends Object;\n", "des": "Classes supporting the org.springframework.ui.context package."}
{"index": 585, "repo": "commons-collections-3.2.2", "code": "package set;\n\nInterface CompositeSet.SetMutator; // Define callbacks for mutation operations.\nClass AbstractSerializableSetDecorator; // Serializable subclass of AbstractSetDecorator.\nClass AbstractSetDecorator; // Decorates another Set to provide additional behaviour.\nClass AbstractSortedSetDecorator; // Decorates another SortedSet to provide additional behaviour.\nClass CompositeSet; // Decorates a set of other sets to provide a single unified view.\nClass ListOrderedSet; // Decorates another Set to ensure that the order of addition is retained and used by the iterator.\nClass MapBackedSet; // Decorates a Map to obtain Set behaviour.\nClass PredicatedSet; // Decorates another Set to validate that all additions match a specified predicate.\nClass PredicatedSortedSet; // Decorates another SortedSet to validate that all additions match a specified predicate.\nClass SynchronizedSet; // Decorates another Set to synchronize its behaviour for a multi-threaded environment.\nClass SynchronizedSortedSet; // Decorates another SortedSet to synchronize its behaviour for a multi-threaded environment.\nClass TransformedSet; // Decorates another Set to transform objects that are added.\nClass TransformedSortedSet; // Decorates another SortedSet to transform objects that are added.\nClass TypedSet; // Decorates another Set to validate that elements added are of a specific type.\nClass TypedSortedSet; // Decorates another SortedSet to validate that elements added are of a specific type.\nClass UnmodifiableSet; // Decorates another Set to ensure it can't be altered.\nClass UnmodifiableSortedSet; // Decorates another SortedSet to ensure it can't be altered.\n", "des": "This package contains implementations of the Set and SortedSet interfaces."}
{"index": 2491, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package reactive;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class,ObservationAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.observation.Observation.class) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @ConditionalOnWebApplication(type=REACTIVE) @EnableConfigurationProperties({MetricsProperties.class,ObservationProperties.class}) public class WebFluxObservationAutoConfiguration extends Object; // Auto-configuration for instrumentation of Spring WebFlux applications.\n", "des": "Auto-configuration for WebFlux actuator observations."}
{"index": 1116, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package recovery;\n\nClass DeletionTaskRecoveryInfo; // Encapsulates the recovery info needed to recover a DeletionTask from the NM state store.\n", "des": "Package containing classes for recovering DeletionTasks."}
{"index": 3066, "repo": "spring-ws-core-4.0.5", "code": "package method;\n\npackage method.dom; // Provides DOM-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces.\npackage method.jaxb; // Provides JAXB2-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces.\npublic abstract class AbstractPayloadMethodProcessor extends org.springframework.xml.transform.TransformerObjectSupport implements MethodArgumentResolver, MethodReturnValueHandler; // Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations based on RequestPayload and ResponsePayload annotations.\npublic abstract class AbstractPayloadSourceMethodProcessor extends AbstractPayloadMethodProcessor; // Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations based on Sources.\npublic class MarshallingPayloadMethodProcessor extends AbstractPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that uses Marshaller and Unmarshaller to support marshalled objects.\npublic class MessageContextMethodArgumentResolver extends Object implements MethodArgumentResolver; // Implementation of MethodArgumentResolver that supports MessageContext arguments.\npublic interface MethodArgumentResolver; // Strategy interface used to resolve method parameters into arguments.\npublic interface MethodReturnValueHandler; // Strategy interface used to handle method return values.\npublic class SourcePayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports Source objects.\npublic class StaxPayloadMethodArgumentResolver extends org.springframework.xml.transform.TransformerObjectSupport implements MethodArgumentResolver; // Implementation of MethodArgumentResolver that supports StAX XMLStreamReader and XMLEventReader arguments.\npublic class XPathParamMethodArgumentResolver extends Object implements MethodArgumentResolver; // Implementation of MethodArgumentResolver that supports the @XPathParam annotation.\n", "des": "Provides the MethodArgumentResolver and MethodReturnValueHandler abstractions, and various implementations thereof."}
{"index": 918, "repo": "commons-compress-1.23.0", "code": "package deflate;\n\nClass DeflateCompressorInputStream; // Deflate decompressor.\nClass DeflateCompressorOutputStream; // Deflate compressor.\nClass DeflateParameters; // Parameters for the Deflate compressor.\n", "des": "Provides a stream classes that allow (de)compressing streams using the DEFLATE algorithm."}
{"index": 2454, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package data;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnClass(org.springframework.data.repository.Repository.class) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) @EnableConfigurationProperties(MetricsProperties.class) public class RepositoryMetricsAutoConfiguration extends Object; // Auto-configuration for Spring Data Repository metrics.\n", "des": "Auto-configuration for Spring Data actuator metrics."}
{"index": 2999, "repo": "spring-web-6.0.11", "code": "package support;\n\npublic class BasicAuthenticationInterceptor extends Object implements ClientHttpRequestInterceptor; // ClientHttpRequestInterceptor to apply a given HTTP Basic Authentication username/password pair, unless a custom Authorization header has already been set.\npublic abstract class HttpAccessor extends Object; // Base class for RestTemplate and other HTTP accessing gateway helpers, defining common properties such as the ClientHttpRequestFactory to operate on.\npublic class HttpRequestWrapper extends Object implements HttpRequest; // Provides a convenient implementation of the HttpRequest interface that can be overridden to adapt the request.\npublic abstract class InterceptingHttpAccessor extends HttpAccessor; // Base class for RestTemplate and other HTTP accessing gateway helpers, adding interceptor-related properties to HttpAccessor's common properties.\npublic class ProxyFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Proxy>, org.springframework.beans.factory.InitializingBean; // FactoryBean that creates a java.net.Proxy.\n", "des": "This package provides generic HTTP support classes, to be used by higher-level classes like RestTemplate."}
{"index": 2266, "repo": "spring-vault-core-3.0.4", "code": "package util;\n\npublic class KeyValueDelegate extends Object; // Key-Value utility to retrieve secrets from a versioned key-value backend.\npublic static class KeyValueDelegate.MountInfo extends Object;\n@FunctionalInterface public interface PropertyTransformer; // Strategy interface to transform properties to a new key-value Map in a functional style.\npublic abstract class PropertyTransformers extends Object; // Implementations of PropertyTransformer that provide various useful property transformation operations, prefixing, etc.\npublic static class PropertyTransformers.KeyPrefixPropertyTransformer extends Object implements PropertyTransformer; // PropertyTransformer that adds a prefix to each key name.\npublic static class PropertyTransformers.NoOpPropertyTransformer extends Object implements PropertyTransformer; // PropertyTransformer that passes the given properties through without returning changed properties.\n", "des": "Property transformer classes for Spring Vault core support."}
{"index": 756, "repo": "lucene-analyzers-common-8.11.2", "code": "package bg;\n\nClass BulgarianAnalyzer; // Analyzer for Bulgarian.\nClass BulgarianStemFilter; // A TokenFilter that applies BulgarianStemmer to stem Bulgarian words.\nClass BulgarianStemFilterFactory; // Factory for BulgarianStemFilter.\nClass BulgarianStemmer; // Light Stemmer for Bulgarian.\n", "des": "Analyzer for Bulgarian."}
{"index": 2216, "repo": "spring-data-commons-3.1.2", "code": "package config;\n\npublic class AnnotationRepositoryConfigurationSource extends RepositoryConfigurationSourceSupport; // Annotation based RepositoryConfigurationSource.\npublic interface AotRepositoryContext extends AotContext; // AotContext specific to Spring Data Repository infrastructure.\npublic enum BootstrapMode extends Enum<BootstrapMode>; // Enumeration to define in which way repositories are bootstrapped.\npublic class CustomRepositoryImplementationDetector extends Object; // Detects the custom implementation for a Repository instance.\npublic final class DefaultRepositoryBaseClass extends Object; // Placeholder class to be used in @Enable annotation's repositoryBaseClass attribute.\npublic class DefaultRepositoryConfiguration<T extends RepositoryConfigurationSource> extends Object implements RepositoryConfiguration<T>; // Default implementation of RepositoryConfiguration.\npublic class FragmentMetadata extends Object; // Value object for a discovered Repository fragment interface.\npublic interface ImplementationDetectionConfiguration; // Expresses configuration to be used to detect implementation classes for repositories and repository fragments.\npublic interface ImplementationLookupConfiguration extends ImplementationDetectionConfiguration; // Configuration that's used to lookup an implementation type for a repository or fragment interface.\npublic class NamedQueriesBeanDefinitionBuilder extends Object; // Builder to create a BeanDefinition for a NamedQueries instance using properties.\npublic class NamedQueriesBeanDefinitionParser extends Object implements BeanDefinitionParser; // BeanDefinitionParser to create BeanDefinitions of NamedQueries instances looking up a Properties file fom the given location.\npublic class PersistentEntitiesFactoryBean extends Object implements FactoryBean<PersistentEntities>; // Factory been to create PersistentEntities from a MappingContext.\npublic class PropertiesBasedNamedQueriesFactoryBean extends PropertiesLoaderSupport implements FactoryBean<PropertiesBasedNamedQueries>, InitializingBean; // Factory bean to create PropertiesBasedNamedQueries.\npublic class RepositoryBeanDefinitionParser extends Object implements BeanDefinitionParser; // Base class to implement repository namespaces.\npublic abstract class RepositoryBeanDefinitionRegistrarSupport extends Object implements ImportBeanDefinitionRegistrar, ResourceLoaderAware, EnvironmentAware; // Base class to implement ImportBeanDefinitionRegistrars to enable repository\npublic interface RepositoryConfiguration<T extends RepositoryConfigurationSource>; // Configuration information for a single repository instance.\npublic class RepositoryConfigurationDelegate extends Object; // Delegate for configuration integration to reuse the general way of detecting repositories.\npublic interface RepositoryConfigurationExtension; // SPI to implement store specific extension to the repository bean definition registration process.\npublic abstract class RepositoryConfigurationExtensionSupport extends Object implements RepositoryConfigurationExtension; // Base implementation of RepositoryConfigurationExtension to ease the implementation of the interface.\n", "des": "Support classes for repository namespace and JavaConfig integration."}
{"index": 3769, "repo": "lucene-analysis-common-9.7.0", "code": "package ckb;\n\nClass SoraniAnalyzer; // Analyzer for Sorani Kurdish.\nClass SoraniNormalizationFilter; // A TokenFilter that applies SoraniNormalizer to normalize the orthography.\nClass SoraniNormalizationFilterFactory; // Factory for SoraniNormalizationFilter.\nClass SoraniNormalizer; // Normalizes the Unicode representation of Sorani text.\nClass SoraniStemFilter; // A TokenFilter that applies SoraniStemmer to stem Sorani words.\nClass SoraniStemFilterFactory; // Factory for SoraniStemFilter.\nClass SoraniStemmer; // Light stemmer for Sorani\n", "des": "Analyzer for Sorani Kurdish."}
{"index": 1340, "repo": "groovy-all-4.0.13", "code": "package wrappers;\n\npublic class BooleanWrapper extends PojoWrapper;\npublic class ByteWrapper extends PojoWrapper;\npublic class CharWrapper extends PojoWrapper;\npublic class DoubleWrapper extends PojoWrapper;\npublic class FloatWrapper extends PojoWrapper;\npublic class GroovyObjectWrapper extends Wrapper;\npublic class IntWrapper extends PojoWrapper;\npublic class LongWrapper extends PojoWrapper;\npublic class PojoWrapper extends Wrapper;\npublic class ShortWrapper extends PojoWrapper;\npublic abstract class Wrapper extends Object implements GroovyObject;\n", "des": "Groovy wrapper classes for primitive types."}
{"index": 1200, "repo": "commons-math3-3.6.1", "code": "package univariate;\n\nInterface BaseUnivariateOptimizer<FUNC extends UnivariateFunction>; // As of 3.1 (to be removed in 4.0).\nInterface UnivariateOptimizer; // As of 3.1 (to be removed in 4.0).\nClass BaseAbstractUnivariateOptimizer; // As of 3.1 (to be removed in 4.0).\nClass BracketFinder; // As of 3.1 (to be removed in 4.0).\nClass BrentOptimizer; // As of 3.1 (to be removed in 4.0).\nClass SimpleUnivariateValueChecker; // As of 3.1 (to be removed in 4.0).\nClass UnivariateMultiStartOptimizer<FUNC extends UnivariateFunction>; // As of 3.1 (to be removed in 4.0).\nClass UnivariatePointValuePair; // As of 3.1 (to be removed in 4.0).\n", "des": "Univariate real functions minimum finding algorithms."}
{"index": 2665, "repo": "spring-data-cassandra-4.1.2", "code": "package config;\n\npublic class CassandraRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport; // ImportBeanDefinitionRegistrar to setup Cassandra repositories via EnableCassandraRepositories.\npublic class CassandraRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport; // RepositoryConfigurationExtension for Cassandra.\n@Documented @Target(TYPE) @Retention(RUNTIME) @Inherited @Import(CassandraRepositoriesRegistrar.class) public @interface EnableCassandraRepositories; // Annotation to enable Cassandra repositories.\n@Documented @Target(TYPE) @Retention(RUNTIME) @Inherited @Import(org.springframework.data.cassandra.repository.config.ReactiveCassandraRepositoriesRegistrar.class) public @interface EnableReactiveCassandraRepositories; // Annotation to activate reactive Cassandra repositories.\npublic class ReactiveCassandraRepositoryConfigurationExtension extends CassandraRepositoryConfigurationExtension; // RepositoryConfigurationExtension for Cassandra.\n", "des": "Support infrastructure for the configuration of Apache Cassandra specific repositories."}
{"index": 2549, "repo": "pulsar-common-3.0.0", "code": "package raw;\n\npublic class MessageParser extends Object; // Helper class to work with a raw Pulsar entry payload.\npublic static interface MessageParser.MessageProcessor; // Definition of an interface to process a raw Pulsar entry payload.\npublic interface RawMessage; // View of a message that exposes the internal direct-memory buffer for more efficient processing.\npublic interface RawMessageId; // Interface to uniquely identify an internal raw message.\npublic class RawMessageIdImpl extends Object implements RawMessageId;\npublic class RawMessageImpl extends Object implements RawMessage;\npublic class ReferenceCountedMessageMetadata extends io.netty.util.AbstractReferenceCounted; // Class representing a reference-counted object that requires explicit deallocation.\n", "des": "Classes implementing raw API messages."}
{"index": 122, "repo": "ignite-core-2.15.0", "code": "package noop;\n\nClass NoopEncryptionSpi; // No operation EncryptionSPI implementation.\n", "des": "Contains no-op encryption SPI implementation."}
{"index": 1162, "repo": "commons-math3-3.6.1", "code": "package geometry;\n\npackage geometry.enclosing; // This package provides interfaces and classes related to the smallest enclosing ball problem.\npackage geometry.hull; // This package provides interfaces and classes related to the convex hull problem.\npackage geometry.partitioning; // This package provides classes to implement Binary Space Partition trees.\nInterface Point<S extends Space>; // This interface represents a generic geometrical point.\nInterface Space; // This interface represents a generic space, with affine and vectorial counterparts.\nInterface Vector<S extends Space>; // This interface represents a generic vector in a vectorial space or a point in an affine space.\nClass VectorFormat<S extends Space>; // Formats a vector in components list format \"{x; y; ...}\".\n", "des": "This package is the top level package for geometry."}
{"index": 3087, "repo": "spring-ws-core-4.0.5", "code": "package interceptor;\n\npublic abstract class AbstractFaultCreatingValidatingInterceptor extends AbstractValidatingInterceptor; // Subclass of AbstractValidatingInterceptor that creates a SOAP Fault whenever the request message cannot be validated.\npublic class DelegatingSmartSoapEndpointInterceptor extends DelegatingSmartEndpointInterceptor implements SmartSoapEndpointInterceptor; // Implementation of the SmartSoapEndpointInterceptor interface that delegates to a delegate SoapEndpointInterceptor.\npublic class PayloadRootSmartSoapEndpointInterceptor extends DelegatingSmartSoapEndpointInterceptor; // Implementation of the SmartSoapEndpointInterceptor interface that only intercepts requests that have a specified namespace URI or local part (or both) as payload root.\npublic class PayloadValidatingInterceptor extends AbstractFaultCreatingValidatingInterceptor; // Interceptor that validates the contents of WebServiceMessages using a schema.\npublic class SoapActionSmartEndpointInterceptor extends DelegatingSmartSoapEndpointInterceptor; // Implementation of the SmartEndpointInterceptor interface that only intercepts requests that have a specified soap action.\npublic class SoapEnvelopeLoggingInterceptor extends AbstractLoggingInterceptor implements SoapEndpointInterceptor; // SOAP-specific EndpointInterceptor that logs the complete request and response envelope of SoapMessage messages.\n", "des": "Provides miscellaneous endpoints EndpointInterceptor implementations for SOAP purposes."}
{"index": 121, "repo": "ignite-core-2.15.0", "code": "package keystore;\n\nClass KeystoreEncryptionKey; // EncryptionKey implementation based on java security.\nClass KeystoreEncryptionSpi; // EncryptionSPI implementation base on JDK provided cipher algorithm implementations.\n", "des": "Contains encryption SPI implementation based on standard jdk keystore."}
{"index": 2182, "repo": "spring-security-web-6.1.2", "code": "package x509;\n\npublic class SubjectDnX509PrincipalExtractor extends Object implements X509PrincipalExtractor, org.springframework.context.MessageSourceAware; // Obtains the principal from a certificate using a regular expression match against the Subject (as returned by a call to X509Certificate.getSubjectDN()).\npublic class X509AuthenticationFilter extends AbstractPreAuthenticatedProcessingFilter;\npublic interface X509PrincipalExtractor; // Obtains the principal from an X509Certificate for use within the framework.\n", "des": "X.509 client certificate authentication support."}
{"index": 1342, "repo": "groovy-all-4.0.13", "code": "package tools;\n\npackage tools.groovydoc; // GroovyDoc tool.\npackage tools.javac; // Classes related to the joint compiler.\npublic class Compiler extends Object; // A convenience front end for getting standard compilations done.\npublic class DgmConverter extends Object;\npublic class ErrorReporter extends Object; // Provides services for reporting compilation errors to the user.\npublic class FileSystemCompiler extends Object; // Command-line compiler (aka.\npublic static class FileSystemCompiler.CompilationOptions extends Object;\npublic static class FileSystemCompiler.VersionProvider extends Object implements picocli.CommandLine.IVersionProvider;\npublic class GrapeUtil extends Object;\npublic class GroovyClass extends Object;\npublic class GroovyStarter extends Object; // Helper class to initialize the Groovy runtime.\npublic class LoaderConfiguration extends Object; // Class used to configure a RootLoader from a stream or by using its methods.\npublic class RootLoader extends URLClassLoader; // This ClassLoader should be used as root of class loaders.\npublic class StringHelper extends Object;\npublic abstract class Utilities extends Object; // Various utility functions for use in the compiler.\n", "des": "Compiler entry points and miscellaneous development tools."}
{"index": 16, "repo": "commons-collections4-4.4", "code": "package bidimap;\n\nClass AbstractBidiMapDecorator<K,V>; // Provides a base decorator that enables additional functionality to be added to a BidiMap via decoration.\nClass AbstractDualBidiMap<K,V>; // Abstract BidiMap implemented using two maps.\nClass AbstractDualBidiMap.BidiMapIterator<K,V>; // Inner class MapIterator.\nClass AbstractDualBidiMap.EntrySet<K,V>; // Inner class EntrySet.\nClass AbstractDualBidiMap.EntrySetIterator<K,V>; // Inner class EntrySetIterator.\nClass AbstractDualBidiMap.KeySet<K>; // Inner class KeySet.\nClass AbstractDualBidiMap.KeySetIterator<K>; // Inner class KeySetIterator.\nClass AbstractDualBidiMap.MapEntry<K,V>; // Inner class MapEntry.\nClass AbstractDualBidiMap.Values<V>; // Inner class Values.\nClass AbstractDualBidiMap.ValuesIterator<V>; // Inner class ValuesIterator.\nClass AbstractDualBidiMap.View<K,V,E>; // Inner class View.\nClass AbstractOrderedBidiMapDecorator<K,V>; // Provides a base decorator that enables additional functionality to be added to an OrderedBidiMap via decoration.\nClass AbstractSortedBidiMapDecorator<K,V>; // Provides a base decorator that enables additional functionality to be added to a SortedBidiMap via decoration.\nClass DualHashBidiMap<K,V>; // Implementation of BidiMap that uses two HashMap instances.\nClass DualLinkedHashBidiMap<K,V>; // Implementation of BidiMap that uses two LinkedHashMap instances.\nClass DualTreeBidiMap<K,V>; // Implementation of BidiMap that uses two TreeMap instances.\nClass DualTreeBidiMap.BidiOrderedMapIterator<K,V>; // Inner class MapIterator.\nClass DualTreeBidiMap.ViewMap<K,V>; // Internal sorted map view.\n", "des": "This package contains implementations of the BidiMap, OrderedBidiMap and SortedBidiMap interfaces."}
{"index": 2111, "repo": "spring-webflux-6.0.11", "code": "package support;\n\npublic class HandshakeWebSocketService extends Object implements WebSocketService, org.springframework.context.Lifecycle; // WebSocketService implementation that handles a WebSocket HTTP handshake request by delegating to a RequestUpgradeStrategy which is either auto-detected (no-arg constructor) from the classpath but can also be explicitly configured.\n@ImportRuntimeHints(org.springframework.web.reactive.socket.server.support.HandshakeWebSocketServiceRuntimeHints.class) public class WebSocketHandlerAdapter extends Object implements HandlerAdapter, org.springframework.core.Ordered; // HandlerAdapter that allows DispatcherHandler to support handlers of type WebSocketHandler with such handlers mapped to URL patterns via SimpleUrlHandlerMapping.\npublic class WebSocketUpgradeHandlerPredicate extends Object implements BiPredicate<Object,org.springframework.web.server.ServerWebExchange>; // A predicate for use with AbstractUrlHandlerMapping.setHandlerPredicate(java.util.function.BiPredicate<java.lang.Object, org.springframework.web.server.ServerWebExchange>) to ensure only WebSocket handshake requests are matched to handlers of type WebSocketHandler.\n", "des": "Server-side support classes for WebSocket requests."}
{"index": 3414, "repo": "commons-imaging-1.0-alpha3", "code": "package wbmp;\n\nClass WbmpImageParser;\nClass WbmpImagingParameters; // Wbmp format parameters.\n", "des": "The Wireless Application Protocol Bitmap Format image format."}
{"index": 1309, "repo": "groovy-all-4.0.13", "code": "package sql;\n\npublic class BatchingPreparedStatementWrapper extends BatchingStatementWrapper; // Class which delegates to a PreparedStatement but keeps track of a batch count size.\npublic class BatchingStatementWrapper extends GroovyObjectSupport implements AutoCloseable; // Class which delegates to a Statement but keeps track of a batch count size.\npublic class DataSet extends Sql; // An enhancement of Groovy's Sql class providing support for accessing and querying databases using POGO fields and operators rather than JDBC-level API calls and RDBMS column names.\npublic interface ExpandedVariable; // Identifies a variable to be expanded into the sql string rather than representing a placeholder.\npublic interface GroovyResultSet extends GroovyObject, ResultSet; // Represents an extent of objects\npublic class GroovyResultSetExtension extends GroovyObjectSupport; // GroovyResultSetExtension implements additional logic for ResultSet.\npublic final class GroovyResultSetProxy extends Object implements InvocationHandler; // GroovyResultSetProxy is used to create a proxy for GroovyResultSet.\npublic class GroovyRowResult extends GroovyObjectSupport implements Map<String,Object>; // Represents an extent of objects.\npublic interface InOutParameter extends InParameter, OutParameter; // A typed parameter passed to, and returned from a CallableStatement.\npublic interface InParameter; // A typed parameter to pass to a query\npublic interface OutParameter; // A parameter to be returned from a CallableStatement.\npublic class ResultSetMetaDataWrapper extends GroovyObjectSupport; // This class defines a wrapper for accessing a specific column in ResultSetMetaData.\npublic interface ResultSetOutParameter extends OutParameter; // A ResultSet out parameter.\npublic class Sql extends Object implements AutoCloseable; // A facade over Java's normal JDBC APIs providing greatly simplified resource management and result set handling.\npublic class SqlOrderByVisitor extends CodeVisitorSupport;\npublic class SqlWhereVisitor extends CodeVisitorSupport;\npublic class SqlWithParams extends Object;\n", "des": "Groovy helper classes for working with SQL data as Groovy objects"}
{"index": 2987, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "package web;\n\npackage web.access; // OAuth 2.0 Resource Server access denial classes and interfaces.\npublic final class BearerTokenAuthenticationEntryPoint extends Object implements org.springframework.security.web.AuthenticationEntryPoint; // An AuthenticationEntryPoint implementation used to commence authentication of protected resource requests using BearerTokenAuthenticationFilter.\n@Deprecated public final class BearerTokenAuthenticationFilter extends BearerTokenAuthenticationFilter;\n@FunctionalInterface public interface BearerTokenResolver; // A strategy for resolving Bearer Tokens from the HttpServletRequest.\npublic final class DefaultBearerTokenResolver extends Object implements BearerTokenResolver; // The default BearerTokenResolver implementation based on RFC 6750.\npublic class HeaderBearerTokenResolver extends Object implements BearerTokenResolver; // Generic resolver extracting pre-authenticated JWT identity from a custom header.\n", "des": "OAuth 2.0 Resource Server Filter's and supporting classes and interfaces."}
{"index": 762, "repo": "lucene-analyzers-common-8.11.2", "code": "package cjk;\n\nClass CJKAnalyzer; // An Analyzer that tokenizes text with StandardTokenizer, normalizes content with CJKWidthFilter, folds case with LowerCaseFilter, forms bigrams of CJK with CJKBigramFilter, and filters stopwords with StopFilter\nClass CJKBigramFilter; // Forms bigrams of CJK terms that are generated from StandardTokenizer or ICUTokenizer.\nClass CJKBigramFilterFactory; // Factory for CJKBigramFilter.\nClass CJKWidthCharFilter; // A CharFilter that normalizes CJK width differences: Folds fullwidth ASCII variants into the equivalent basic latin Folds halfwidth Katakana variants into the equivalent kana\nClass CJKWidthCharFilterFactory; // Factory for CJKWidthCharFilter.\nClass CJKWidthFilter; // A TokenFilter that normalizes CJK width differences: Folds fullwidth ASCII variants into the equivalent basic latin Folds halfwidth Katakana variants into the equivalent kana\nClass CJKWidthFilterFactory; // Factory for CJKWidthFilter.\n", "des": "Analyzer for Chinese, Japanese, and Korean, which indexes bigrams."}
{"index": 941, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass WebServiceGatewaySupport; // Convenient super class for application classes that need Web service access.\n", "des": "Convenient super class for application classes that need Web service access."}
{"index": 3479, "repo": "hilt-android-2.47", "code": "package qualifiers;\n\nAnnotation Type ActivityContext; // Annotation for a Context that corresponds to the activity.\nAnnotation Type ApplicationContext; // Annotation for an Application Context dependency.\n", "des": "This package contains Hilt's built-in Android Qualifier annotations."}
{"index": 102, "repo": "ignite-core-2.15.0", "code": "package never;\n\nInterface NeverFailoverSpiMBean; // Management bean for NeverFailoverSpi.\nClass NeverFailoverSpi; // This class provides failover SPI implementation that never fails over.\n", "des": "Contains \"never\" failover SPI."}
{"index": 845, "repo": "calcite-core-1.34.0", "code": "package metadata;\n\npackage metadata.janino; // Code for generating metadata handlers.\nInterface BuiltInMetadata.AllPredicates; // Metadata about the predicates that hold in the rows emitted from a relational expression.\nInterface BuiltInMetadata.AllPredicates.Handler; // Handler API.\nInterface BuiltInMetadata.Collation; // Metadata about which columns are sorted.\nInterface BuiltInMetadata.Collation.Handler; // Handler API.\nInterface BuiltInMetadata.ColumnOrigin; // Metadata about the origins of columns.\nInterface BuiltInMetadata.ColumnOrigin.Handler; // Handler API.\nInterface BuiltInMetadata.ColumnUniqueness; // Metadata about whether a set of columns uniquely identifies a row.\nInterface BuiltInMetadata.ColumnUniqueness.Handler; // Handler API.\nInterface BuiltInMetadata.CumulativeCost; // Metadata about the cost of evaluating a relational expression, including all of its inputs.\nInterface BuiltInMetadata.CumulativeCost.Handler; // Handler API.\nInterface BuiltInMetadata.DistinctRowCount; // Metadata about the number of distinct rows returned by a set of columns in a relational expression.\nInterface BuiltInMetadata.DistinctRowCount.Handler; // Handler API.\nInterface BuiltInMetadata.Distribution; // Metadata about how a relational expression is distributed.\nInterface BuiltInMetadata.Distribution.Handler; // Handler API.\nInterface BuiltInMetadata.ExplainVisibility; // Metadata about whether a relational expression should appear in a plan.\nInterface BuiltInMetadata.ExplainVisibility.Handler; // Handler API.\nInterface BuiltInMetadata.ExpressionLineage; // Metadata about the origins of expressions.\nInterface BuiltInMetadata.ExpressionLineage.Handler; // Handler API.\nInterface BuiltInMetadata.LowerBoundCost; // Metadata to get the lower bound cost of a RelNode.\nInterface BuiltInMetadata.LowerBoundCost.Handler; // Handler API.\nInterface BuiltInMetadata.MaxRowCount; // Metadata about the maximum number of rows returned by a relational expression.\nInterface BuiltInMetadata.MaxRowCount.Handler; // Handler API.\nInterface BuiltInMetadata.Memory; // Metadata about the memory use of an operator.\nInterface BuiltInMetadata.Memory.Handler; // Handler API.\nInterface BuiltInMetadata.MinRowCount; // Metadata about the minimum number of rows returned by a relational expression.\nInterface BuiltInMetadata.MinRowCount.Handler; // Handler API.\n", "des": "Defines metadata interfaces and utilities for relational expressions."}
{"index": 1909, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package data;\n\npackage data.cassandra; // Auto-configuration for Spring Data Cassandra.\npackage data.couchbase; // Auto-configuration for Spring Data Couchbase.\npackage data.elasticsearch; // Auto-configuration for Spring Data Elasticsearch.\npackage data.jdbc; // Auto-configuration for Spring Data JDBC.\npackage data.jpa; // Auto-configuration for Spring Data JPA.\npackage data.ldap; // Auto-configuration for Spring Data LDAP.\npackage data.mongo; // Auto-configuration for Spring Data Mongo.\npackage data.neo4j; // Auto-configuration for Spring Data Neo4j.\npackage data.r2dbc; // Auto-Configuration for Spring Data R2DBC.\npackage data.redis; // Auto-configuration for Spring Data Redis.\npackage data.rest; // Auto-configuration for Spring Data REST.\npackage data.web; // Auto-configuration for Spring Data's Web Support.\npublic abstract class AbstractRepositoryConfigurationSourceSupport extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar, org.springframework.beans.factory.BeanFactoryAware, org.springframework.context.ResourceLoaderAware, org.springframework.context.EnvironmentAware; // Base ImportBeanDefinitionRegistrar used to auto-configure Spring Data Repositories.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.autoconfigure.data.OnRepositoryTypeCondition.class) public @interface ConditionalOnRepositoryType; // @Conditional that only matches when a particular type of Spring Data repository has been enabled.\npublic enum RepositoryType extends Enum<RepositoryType>; // Type of Spring Data repositories to enable.\n", "des": "Auto-configuration base classes for Spring Data."}
{"index": 351, "repo": "lucene-analyzers-kuromoji-8.11.2", "code": "package tokenattributes;\n\nInterface BaseFormAttribute; // Attribute for Token.getBaseForm().\nInterface InflectionAttribute; // Attribute for Kuromoji inflection data.\nInterface PartOfSpeechAttribute; // Attribute for Token.getPartOfSpeech().\nInterface ReadingAttribute; // Attribute for Kuromoji reading data\nClass BaseFormAttributeImpl; // Attribute for Token.getBaseForm().\nClass InflectionAttributeImpl; // Attribute for Kuromoji inflection data.\nClass PartOfSpeechAttributeImpl; // Attribute for Token.getPartOfSpeech().\nClass ReadingAttributeImpl; // Attribute for Kuromoji reading data\n", "des": "Additional Kuromoji-specific Attributes for text analysis."}
{"index": 2951, "repo": "spring-integration-xml-6.1.2", "code": "package router;\n\npublic class XPathRouter extends org.springframework.integration.router.AbstractMappingMessageRouter; // Message Router that uses XPathExpression evaluation to determine channel names.\n", "des": "Provides XML message routers."}
{"index": 1912, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package elasticsearch;\n\n@AutoConfiguration(after={ElasticsearchClientAutoConfiguration.class,ReactiveElasticsearchClientAutoConfiguration.class}) @ConditionalOnClass(org.springframework.data.elasticsearch.client.elc.ElasticsearchTemplate.class) @Import({org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataConfiguration.BaseConfiguration.class,org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataConfiguration.JavaClientConfiguration.class,org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataConfiguration.ReactiveRestClientConfiguration.class}) public class ElasticsearchDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's Elasticsearch support.\n@AutoConfiguration @ConditionalOnClass(org.springframework.data.elasticsearch.repository.ElasticsearchRepository.class) @ConditionalOnProperty(prefix=\"spring.data.elasticsearch.repositories\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) @ConditionalOnMissingBean(org.springframework.data.elasticsearch.repository.support.ElasticsearchRepositoryFactoryBean.class) @Import(org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesRegistrar.class) public class ElasticsearchRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's Elasticsearch Repositories.\n@AutoConfiguration @ConditionalOnClass({org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient.class,org.springframework.data.elasticsearch.repository.ReactiveElasticsearchRepository.class}) @ConditionalOnProperty(prefix=\"spring.data.elasticsearch.repositories\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) @ConditionalOnMissingBean(org.springframework.data.elasticsearch.repository.support.ReactiveElasticsearchRepositoryFactoryBean.class) @Import(org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesRegistrar.class) public class ReactiveElasticsearchRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's Elasticsearch Reactive Repositories.\n", "des": "Auto-configuration for Spring Data Elasticsearch."}
{"index": 1710, "repo": "spring-boot-test-3.1.1", "code": "package runner;\n\npublic abstract class AbstractApplicationContextRunner<SELF extends AbstractApplicationContextRunner<SELF,C,A>,C extends org.springframework.context.ConfigurableApplicationContext,A extends ApplicationContextAssertProvider<C>> extends Object; // Utility design to run an ApplicationContext and provide AssertJ style assertions.\nprotected static final class AbstractApplicationContextRunner.BeanRegistration<T> extends Object; // A Bean registration to be applied when the context loaded.\nprotected static final class AbstractApplicationContextRunner.RunnerConfiguration<C extends org.springframework.context.ConfigurableApplicationContext> extends Object;\npublic class ApplicationContextRunner extends AbstractApplicationContextRunner<ApplicationContextRunner,org.springframework.context.ConfigurableApplicationContext,AssertableApplicationContext>; // An ApplicationContext runner for a standard, non-web environment ConfigurableApplicationContext.\n@FunctionalInterface public interface ContextConsumer<C extends org.springframework.context.ApplicationContext>; // Callback interface used to process an ApplicationContext with the ability to throw a (checked) exception.\npublic final class ReactiveWebApplicationContextRunner extends AbstractApplicationContextRunner<ReactiveWebApplicationContextRunner,org.springframework.boot.web.reactive.context.ConfigurableReactiveWebApplicationContext,AssertableReactiveWebApplicationContext>; // An ApplicationContext runner for a ConfigurableReactiveWebApplicationContext.\npublic final class WebApplicationContextRunner extends AbstractApplicationContextRunner<WebApplicationContextRunner,org.springframework.web.context.ConfigurableWebApplicationContext,AssertableWebApplicationContext>; // An ApplicationContext runner for a Servlet based ConfigurableWebApplicationContext.\n", "des": "Test utilities to run application contexts for testing."}
{"index": 3085, "repo": "spring-ws-core-4.0.5", "code": "package endpoint;\n\npackage endpoint.annotation; // JDK 1.5+ annotations for Spring-WS SOAP endpoints.\npackage endpoint.interceptor; // Provides miscellaneous endpoints EndpointInterceptor implementations for SOAP purposes.\npackage endpoint.mapping; // Provides miscellaneous endpoints EndpointMapping implementations for SOAP purposes.\n@Deprecated public abstract class AbstractFaultCreatingValidatingMarshallingPayloadEndpoint extends AbstractValidatingMarshallingPayloadEndpoint implements org.springframework.context.MessageSourceAware;\npublic abstract class AbstractSoapFaultDefinitionExceptionResolver extends AbstractEndpointExceptionResolver; // Abstract base class for SOAP-based EndpointExceptionResolver implementations that depend on SoapFaultDefinition.\npublic class SimpleSoapExceptionResolver extends AbstractEndpointExceptionResolver; // Simple, SOAP-specific EndpointExceptionResolver implementation that stores the exception's message as the fault string.\npublic class SoapFaultAnnotationExceptionResolver extends AbstractSoapFaultDefinitionExceptionResolver; // Implementation of the EndpointExceptionResolver interface that uses the SoapFault annotation to map exceptions to SOAP Faults.\npublic class SoapFaultDefinition extends Object; // Defines properties for a SOAP Fault.\npublic class SoapFaultDefinitionEditor extends PropertyEditorSupport; // PropertyEditor for SoapFaultDefinition objects.\npublic class SoapFaultMappingExceptionResolver extends AbstractSoapFaultDefinitionExceptionResolver; // Exception resolver that allows for mapping exception class names to SOAP Faults.\n", "des": "Provides EndpointAdapter, EndpointMapping, and EndpointExceptionResolver implementations for SOAP."}
{"index": 513, "repo": "commons-vfs2-2.9.0", "code": "package operations;\n\npackage operations.vcs; // VFS version control operations.\nInterface FileOperation; // A FileOperation is an object that brings an extra function to a FileObject.\nInterface FileOperationProvider; // FileOperationProvider is responsible for dealing with FileOperation's.\nInterface FileOperations; // FileOperations interface provides API to work with operations.\nClass AbstractFileOperation;\nClass AbstractFileOperationProvider;\nClass DefaultFileOperations;\n", "des": "VFS Operations handling."}
{"index": 2299, "repo": "spring-boot-3.1.1", "code": "package properties;\n\npackage properties.bind; // Support for @ConfigurationProperties binding.\npackage properties.source; // Sources for external configuration properties.\npublic class BoundConfigurationProperties extends Object; // Bean to record and provide bound @ConfigurationProperties.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Indexed public @interface ConfigurationProperties; // Annotation for externalized configuration.\npublic final class ConfigurationPropertiesBean extends Object; // Provides access to @ConfigurationProperties bean details, regardless of if the annotation was used directly or on a @Bean factory method.\n@Deprecated(since=\"3.0.8\", forRemoval=true) public static enum ConfigurationPropertiesBean.BindMethod extends Enum<ConfigurationPropertiesBean.BindMethod>;\npublic class ConfigurationPropertiesBindException extends org.springframework.beans.factory.BeanCreationException; // Exception thrown when @ConfigurationProperties binding fails.\n@FunctionalInterface public interface ConfigurationPropertiesBindHandlerAdvisor; // Allows additional functionality to be applied to the BindHandler used by the ConfigurationPropertiesBindingPostProcessor.\n@Qualifier(\"org.springframework.boot.context.properties.ConfigurationPropertiesBinding\") @Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface ConfigurationPropertiesBinding; // Qualifier for beans that are needed to configure the binding of @ConfigurationProperties (e.g.\npublic class ConfigurationPropertiesBindingPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.core.PriorityOrdered, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // BeanPostProcessor to bind PropertySources to beans annotated with @ConfigurationProperties.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(org.springframework.boot.context.properties.ConfigurationPropertiesScanRegistrar.class) @EnableConfigurationProperties public @interface ConfigurationPropertiesScan; // Configures the base packages used when scanning for @ConfigurationProperties classes.\n@Target({CONSTRUCTOR,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Deprecated(since=\"3.0.0\", forRemoval=true) @ConstructorBinding public @interface ConstructorBinding;\npublic abstract class ConstructorBound extends Object; // Helper class to programmatically bind configuration properties that use constructor injection.\n", "des": "Support for external configuration properties."}
{"index": 1472, "repo": "spring-boot-configuration-processor-3.1.1", "code": "package javac;\n\npublic class JavaCompilerFieldValuesParser extends Object implements FieldValuesParser; // FieldValuesParser implementation for the standard Java compiler.\n", "des": "Field value parsing for the standard Java compiler."}
{"index": 491, "repo": "beam-sdks-java-core-2.49.0", "code": "package generated;\n\nInterface FieldSpecifierNotationListener; // This interface defines a complete listener for a parse tree produced by FieldSpecifierNotationParser.\nInterface FieldSpecifierNotationVisitor<T>; // This interface defines a complete generic visitor for a parse tree produced by FieldSpecifierNotationParser.\nClass FieldSpecifierNotationBaseListener; // This class provides an empty implementation of FieldSpecifierNotationListener, which can be extended to create a listener which only needs to handle a subset of the available methods.\nClass FieldSpecifierNotationBaseVisitor<T>; // This class provides an empty implementation of FieldSpecifierNotationVisitor, which can be extended to create a visitor which only needs to handle a subset of the available methods.\nClass FieldSpecifierNotationLexer;\nClass FieldSpecifierNotationParser;\nClass FieldSpecifierNotationParser.ArrayQualifierContext;\nClass FieldSpecifierNotationParser.ArrayQualifierListContext;\nClass FieldSpecifierNotationParser.DotExpressionComponentContext;\nClass FieldSpecifierNotationParser.DotExpressionContext;\nClass FieldSpecifierNotationParser.FieldSpecifierContext;\nClass FieldSpecifierNotationParser.MapQualifierContext;\nClass FieldSpecifierNotationParser.MapQualifierListContext;\nClass FieldSpecifierNotationParser.QualifiedComponentContext;\nClass FieldSpecifierNotationParser.QualifierListContext;\nClass FieldSpecifierNotationParser.QualifyComponentContext;\nClass FieldSpecifierNotationParser.SimpleIdentifierContext;\nClass FieldSpecifierNotationParser.WildcardContext;\n", "des": "Defines utilities for deailing with schemas."}
{"index": 1297, "repo": "spring-core-6.0.11", "code": "package xml;\n\npublic abstract class DomUtils extends Object; // Convenience methods for working with the DOM API, in particular for working with DOM Nodes and DOM Elements.\npublic class SimpleNamespaceContext extends Object implements NamespaceContext; // Simple javax.xml.namespace.NamespaceContext implementation.\npublic class SimpleSaxErrorHandler extends Object implements ErrorHandler; // Simple org.xml.sax.ErrorHandler implementation: logs warnings using the given Commons Logging logger instance, and rethrows errors to discontinue the XML transformation.\npublic class SimpleTransformErrorListener extends Object implements ErrorListener; // Simple javax.xml.transform.ErrorListener implementation: logs warnings using the given Commons Logging logger instance, and rethrows errors to discontinue the XML transformation.\npublic abstract class StaxUtils extends Object; // Convenience methods for working with the StAX API.\npublic abstract class TransformerUtils extends Object; // Contains common behavior relating to Transformers and the javax.xml.transform package in general.\npublic class XmlValidationModeDetector extends Object; // Detects whether an XML stream is using DTD- or XSD-based validation.\n", "des": "Miscellaneous utility classes for XML parsing and transformation, such as error handlers that log warnings via Commons Logging."}
{"index": 470, "repo": "jackson-core-2.15.2", "code": "package sym;\n\nClass ByteQuadsCanonicalizer; // Replacement for BytesToNameCanonicalizer which aims at more localized memory access due to flattening of name quad data.\nClass CharsToNameCanonicalizer; // This class is a kind of specialized type-safe Map, from char array to String value.\nClass Name; // Base class for tokenized names (key strings in objects) that have been tokenized from byte-based input sources (like InputStream.\nClass Name1; // Specialized implementation of PName: can be used for short Strings that consists of at most 4 bytes.\nClass Name2; // Specialized implementation of PName: can be used for short Strings that consists of 5 to 8 bytes.\nClass Name3; // Specialized implementation of PName: can be used for short Strings that consists of 9 to 12 bytes.\nClass NameN; // Generic implementation of PName used for \"long\" names, where long means that its byte (UTF-8) representation is 13 bytes or more.\n", "des": "Internal implementation classes for efficient handling of of symbols in JSON (field names in Objects)"}
{"index": 1205, "repo": "commons-math3-3.6.1", "code": "package clustering;\n\nInterface Clusterable<T>; // As of 3.2 (to be removed in 4.0), use Clusterable instead\nClass Cluster<T extends Clusterable<T>>; // As of 3.2 (to be removed in 4.0), use Cluster instead\nClass DBSCANClusterer<T extends Clusterable<T>>; // As of 3.2 (to be removed in 4.0), use DBSCANClusterer instead\nClass EuclideanDoublePoint; // As of 3.2 (to be removed in 4.0), use DoublePoint instead\nClass EuclideanIntegerPoint; // As of 3.2 (to be removed in 4.0), use DoublePoint instead\nClass KMeansPlusPlusClusterer<T extends Clusterable<T>>; // As of 3.2 (to be removed in 4.0), use KMeansPlusPlusClusterer instead\nEnum KMeansPlusPlusClusterer.EmptyClusterStrategy; // Strategies to use for replacing an empty cluster.\n", "des": "All classes and sub-packages of this package are deprecated."}
{"index": 1179, "repo": "commons-math3-3.6.1", "code": "package sofm;\n\npackage sofm.util; // Miscellaneous utilities.\nInterface LearningFactorFunction; // Provides the learning rate as a function of the number of calls already performed during the learning task.\nInterface NeighbourhoodSizeFunction; // Provides the network neighbourhood's size as a function of the number of calls already performed during the learning task.\nClass KohonenTrainingTask; // Trainer for Kohonen's Self-Organizing Map.\nClass KohonenUpdateAction; // Update formula for Kohonen's Self-Organizing Map.\nClass LearningFactorFunctionFactory; // Factory for creating instances of LearningFactorFunction.\nClass NeighbourhoodSizeFunctionFactory; // Factory for creating instances of NeighbourhoodSizeFunction.\n", "des": "Self Organizing Feature Map."}
{"index": 3337, "repo": "opencms-core-15.0", "code": "package searchindex;\n\nClass CmsIndexingReportThread; // Implements methods to utilize a report thread for CmsIndexingReport.\nClass CmsSearchindexApp; // Class for the search index app.\nClass CmsSearchindexAppConfiguration; // Configuration class for the searchindex app.\nClass CmsSearchindexRebuild; // Class for the GUI to rebuild indexes.\nClass CmsSearchIndexTable; // Class for the vaadin table to show the indexes.\nClass CmsSourceDialog; // Class for the dialog to show source information of a given index.\n", "des": "Contains classes of the searchindex app."}
{"index": 3552, "repo": "guava-32.1.1-jre", "code": "package cache;\n\nInterface AbstractCache.StatsCounter; // Accumulates statistics during the operation of a Cache for presentation by Cache.stats().\nInterface Cache<K,â€‹V>; // A semi-persistent mapping from keys to values.\nInterface LoadingCache<K,â€‹V>; // A semi-persistent mapping from keys to values.\nInterface RemovalListener<K,â€‹V>; // An object that can receive a notification when an entry is removed from a cache.\nInterface Weigher<K,â€‹V>; // Calculates the weights of cache entries.\nClass AbstractCache<K,â€‹V>; // This class provides a skeletal implementation of the Cache interface to minimize the effort required to implement this interface.\nClass AbstractCache.SimpleStatsCounter; // A thread-safe AbstractCache.StatsCounter implementation for use by Cache implementors.\nClass AbstractLoadingCache<K,â€‹V>; // This class provides a skeletal implementation of the Cache interface to minimize the effort required to implement this interface.\nClass CacheBuilder<K,â€‹V>; // A builder of LoadingCache and Cache instances.\nClass CacheBuilderSpec; // A specification of a CacheBuilder configuration.\nClass CacheLoader<K,â€‹V>; // Computes or retrieves values, based on a key, for use in populating a LoadingCache.\nClass CacheStats; // Statistics about the performance of a Cache.\nClass ForwardingCache<K,â€‹V>; // A cache which forwards all its method calls to another cache.\nClass ForwardingCache.SimpleForwardingCache<K,â€‹V>; // A simplified version of ForwardingCache where subclasses can pass in an already constructed Cache as the delegate.\nClass ForwardingLoadingCache<K,â€‹V>; // A cache which forwards all its method calls to another cache.\nClass ForwardingLoadingCache.SimpleForwardingLoadingCache<K,â€‹V>; // A simplified version of ForwardingLoadingCache where subclasses can pass in an already constructed LoadingCache as the delegate.\nClass RemovalListeners; // A collection of common removal listeners.\nClass RemovalNotification<K,â€‹V>; // A notification of the removal of a single entry.\n", "des": "Discouraged (in favor of Caffeine) caching utilities."}
{"index": 2775, "repo": "spring-jms-6.0.11", "code": "package endpoint;\n\npublic class DefaultJmsActivationSpecFactory extends StandardJmsActivationSpecFactory; // Default implementation of the JmsActivationSpecFactory interface.\npublic class JmsActivationSpecConfig extends Object; // Common configuration object for activating a JMS message endpoint.\npublic interface JmsActivationSpecFactory; // Strategy interface for creating JCA 1.5 ActivationSpec objects based on a configured JmsActivationSpecConfig object.\npublic class JmsMessageEndpointFactory extends org.springframework.jca.endpoint.AbstractMessageEndpointFactory; // JMS-specific implementation of the JCA 1.7 MessageEndpointFactory interface, providing transaction management capabilities for a JMS listener object (e.g.\npublic static class JmsMessageEndpointFactory.JmsResourceException extends RuntimeException; // Internal exception thrown when a ResourceException has been encountered during the endpoint invocation.\npublic class JmsMessageEndpointManager extends org.springframework.jca.endpoint.GenericMessageEndpointManager implements org.springframework.beans.factory.BeanNameAware, MessageListenerContainer; // Extension of the generic JCA 1.5 GenericMessageEndpointManager, adding JMS-specific support for ActivationSpec configuration.\npublic class StandardJmsActivationSpecFactory extends Object implements JmsActivationSpecFactory; // Standard implementation of the JmsActivationSpecFactory interface.\n", "des": "This package provides JCA-based endpoint management for JMS message listeners."}
{"index": 33, "repo": "phoenix-core-5.1.3", "code": "package i18n;\n\nClass OracleUpper; // This utility class was partially copied from Salesforce's internationalization utility library (com.salesforce.i18n:i18n-util:1.0.4), which was released under the 3-clause BSD License.\nEnum LinguisticSort; // This utility class was partially copied from Salesforce's internationalization utility library (com.salesforce.i18n:i18n-util:1.0.4), which was released under the 3-clause BSD License.\nEnum LocaleUtils; // This utility class was partially copied from Salesforce's internationalization utility library (com.salesforce.i18n:i18n-util:1.0.4), which was released under the 3-clause BSD License.\nEnum OracleUpperTable; // This utility class was partially copied from Salesforce's internationalization utility library (com.salesforce.i18n:i18n-util:1.0.4), which was released under the 3-clause BSD License.\n", "des": "This package contains utility classes partially copied from Salesforce's internationalization utility library (com.salesforce.i18n:i18n-util:1.0.4), which was released under the 3-clause BSD License."}
{"index": 2706, "repo": "spring-integration-ftp-6.1.2", "code": "package outbound;\n\npublic class FtpMessageHandler extends org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<org.apache.commons.net.ftp.FTPFile>; // The FTP specific FileTransferringMessageHandler extension.\n", "des": "Provides classes for the FTP outbound channel adapter."}
{"index": 3535, "repo": "opennlp-tools-2.2.0", "code": "package model;\n\nInterface DataIndexer; // Represents an indexer which compresses events in memory and performs feature selection.\nInterface DataReader; // Describes generic ways to read data from a DataInputStream.\nInterface MaxentModel; // Interface for maximum entropy models.\nInterface Prior; // This interface allows one to implement a prior distribution for use in maximum entropy model training.\nInterface SequenceClassificationModel<T>; // A classification model that can label an input Sequence.\nInterface SequenceStream<S>; // Interface for streams of sequences used to train sequence models.\nClass AbstractDataIndexer; // Abstract DataIndexer implementation for collecting event and context counts used in training.\nClass AbstractModel; // A basic MaxentModel implementation.\nClass AbstractModelReader; // An abstract, basic implementation of a model reader.\nClass AbstractModelWriter; // An abstract, basic implementation of a model writer.\nClass BinaryFileDataReader; // A DataReader that reads files from a binary format.\nClass ComparableEvent; // A maxent event representation which we can use to sort based on the predicates indexes contained in the events.\nClass ComparablePredicate; // A maxent predicate representation which we can use to sort based on the outcomes.\nClass Context; // Class which associates a real valued parameter or expected value with a particular contextual predicate or feature.\nClass DataIndexerFactory; // A factory that produces DataIndexer instances.\nClass DynamicEvalParameters;\nClass EvalParameters; // This class encapsulates the variables used in producing probabilities from a model and facilitates passing these variables to the eval method.\nClass Event; // The context of a decision point during training.\nClass FileEventStream; // Class for using a file of events as an event stream.\nClass GenericModelReader; // An generic AbstractModelReader implementation.\nClass GenericModelWriter; // An generic AbstractModelWriter implementation.\nClass HashSumEventStream; // A hash sum based AbstractObjectStream implementation.\nClass ModelParameterChunker; // A helper class that handles Strings with more than 64k (65535 bytes) in length.\nClass MutableContext; // An extension of Context used to store parameters or expected values associated with this context which can be updated or assigned.\nClass ObjectDataReader; // A DataReader implementation based on ObjectInputStream.\n", "des": "Package related to ML models and feature selection techniques."}
{"index": 3282, "repo": "opencms-core-15.0", "code": "package decorator;\n\nInterface I_CmsDecoratorConfiguration; // Interface for a CmsDecoratorConfiguration.\nClass CmsDecorationBundle; // CmsDecorationBundle, contains a map of merged CmsDEcorationMaps.\nClass CmsDecorationDefintion; // This class defines text decoration to be made by the postprocessor.\nClass CmsDecorationMap; // The CmsDecorationMap is the object representation of a single decoartion file.\nClass CmsDecorationObject; // The CmsDecorationObject defines a single text decoration.\nClass CmsDecoratorConfiguration; // The CmsDecoratorConfiguration initalizes and stores the text decorations.\nClass CmsHtmlDecorator; // The CmsHtmlDecorator is the main object for processing the text decorations.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "HTML postprocessor, used to tag single words or phrases in the HTML output."}
{"index": 1051, "repo": "commons-io-2.13.0", "code": "package buffer;\n\nClass CircularBufferInputStream; // Implements a buffered input stream, which is internally based on a CircularByteBuffer.\nClass CircularByteBuffer; // A buffer, which doesn't need reallocation of byte arrays, because it reuses a single byte array.\nClass PeekableInputStream; // Implements a buffered input stream, which allows to peek into the buffers first bytes.\n", "des": "Provides implementations of buffered input classes, such as CircularBufferInputStream and PeekableInputStream."}
{"index": 2501, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package tracing;\n\npackage tracing.otlp; // Auto-configuration for tracing with OTLP.\npackage tracing.prometheus; // Auto-configuration for Prometheus Exemplars with Micrometer Tracing.\npackage tracing.wavefront; // Auto-configuration for tracing with Wavefront.\npackage tracing.zipkin; // Auto-configuration for tracing with Zipkin.\n@AutoConfiguration(before=MicrometerTracingAutoConfiguration.class) @ConditionalOnClass({brave.Tracer.class,io.micrometer.tracing.brave.bridge.BraveTracer.class}) @EnableConfigurationProperties(TracingProperties.class) @ConditionalOnEnabledTracing public class BraveAutoConfiguration extends Object; // Auto-configuration for Brave.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @ConditionalOnProperty(prefix=\"management.tracing\", name=\"enabled\", matchIfMissing=true) public @interface ConditionalOnEnabledTracing; // @Conditional that checks whether tracing is enabled.\n@AutoConfiguration @ConditionalOnClass(io.micrometer.tracing.Tracer.class) @ConditionalOnEnabledTracing public class MicrometerTracingAutoConfiguration extends Object; // Auto-configuration for the Micrometer Tracing API.\n@AutoConfiguration(before=MicrometerTracingAutoConfiguration.class) @ConditionalOnEnabledTracing @ConditionalOnClass({io.micrometer.tracing.otel.bridge.OtelTracer.class,io.opentelemetry.sdk.trace.SdkTracerProvider.class,io.opentelemetry.api.OpenTelemetry.class}) @EnableConfigurationProperties(TracingProperties.class) public class OpenTelemetryAutoConfiguration extends Object; // Auto-configuration for OpenTelemetry.\n@FunctionalInterface public interface SdkTracerProviderBuilderCustomizer; // Callback interface that can be used to customize the SdkTracerProviderBuilder that is used to create the auto-configured SdkTracerProvider.\n@ConfigurationProperties(\"management.tracing\") public class TracingProperties extends Object; // Configuration properties for tracing.\npublic static class TracingProperties.Baggage extends Object;\npublic static class TracingProperties.Baggage.Correlation extends Object;\npublic static class TracingProperties.Brave extends Object;\npublic static class TracingProperties.Propagation extends Object;\npublic static class TracingProperties.Sampling extends Object;\n", "des": "Auto-configuration for Micrometer Tracing."}
{"index": 3376, "repo": "opencms-core-15.0", "code": "package xml;\n\npackage xml.containerpage; // Contains functions for the ADE main pages, commonly called \"Container Pages\" in OpenCms.\npackage xml.content; // Contains functions for structured content storage using XML, commonly called \"XML content\" in OpenCms.\npackage xml.page; // Contains functions for unstructured content storage using XML, commonly called \"XML pages\" in OpenCms.\npackage xml.types; // Contains the basic XML content type definitions, used for XML content and XML pages.\nInterface I_CmsXmlDocument; // Describes the API to access the values of a XML content document.\nClass A_CmsXmlDocument; // Provides basic XML document handling functions useful when dealing with XML documents that are stored in the OpenCms VFS.\nClass CmsXmlContentDefinition; // Describes the structure definition of an XML content object.\nClass CmsXmlContentTypeManager; // Manager class for registered OpenCms XML content types and content collectors.\nClass CmsXmlEntityResolver; // Resolves XML entities (e.g.\nClass CmsXmlErrorHandler; // Error hander for writing errors found during XML validation to the OpenCms log.\nClass CmsXmlFileTransformer; // Transforms all resources of a given type by\nClass CmsXmlGenericWrapper; // Provides generic wrappers for XML library methods that do not support Java 5 generic types.\nClass CmsXmlMessages; // The xml messages overwrite some methods of the general CmsMessages class to get keys from an individual configuration file.\nClass CmsXmlUtils; // Provides some basic XML handling utilities.\nClass CmsXmlValidationErrorHandler; // Error hander for writing errors found during XML validation to the OpenCms log.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsXmlContentDefinition.SequenceType; // Enumeration of possible sequence types in a content definition.\nClass CmsXmlException; // Signals that an error occurred while processing an xml resource.\n", "des": "Basic XML functionality and utilities used by OpenCms to maintain XML documents and content."}
{"index": 2169, "repo": "wicket-core-10.0.0-M1", "code": "package validation;\n\npackage validation.validator; // This package provides an implementation of Wicket's validation support.\npublic class CompoundValidator<T> extends Behavior implements IValidator<T>; // A compound IValidator.\npublic interface IErrorMessageSource; // Interface representing a message source that stores messages by key and can perform variable substitution.\npublic interface INullAcceptingValidator<T> extends IValidator<T>; // Marker interface for validators that will accept a null value.\npublic interface IValidatable<T>; // Interface representing any object that can be validated.\npublic interface IValidationError extends org.apache.wicket.util.io.IClusterable; // Interface representing a validation error.\n@FunctionalInterface public interface IValidator<T> extends org.apache.wicket.util.io.IClusterable; // Interface representing a validator that can validate an IValidatable object.\npublic class RawValidationError extends Object implements IValidationError; // An IValidationError implementation that just keeps a Serializable error message.\npublic class Validatable<T> extends Object implements IValidatable<T>; // This implementation of IValidatable is meant to be used outside of Wicket.\npublic final class ValidationError extends Object implements IValidationError; // A versatile implementation of IValidationError that supports message resolution from IErrorMessageSource, default message (if none of the keys matched), and variable substitution.\npublic class ValidatorAdapter<T> extends Behavior implements IValidator<T>; // Adapts IValidator to Behavior\n", "des": "This package provides interfaces for Wicket's validation support."}
{"index": 1988, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jta;\n\n@AutoConfiguration(before={XADataSourceAutoConfiguration.class,ActiveMQAutoConfiguration.class,ArtemisAutoConfiguration.class,HibernateJpaAutoConfiguration.class,TransactionAutoConfiguration.class}) @ConditionalOnClass(jakarta.transaction.Transaction.class) @ConditionalOnProperty(prefix=\"spring.jta\", value=\"enabled\", matchIfMissing=true) @Import(org.springframework.boot.autoconfigure.transaction.jta.JndiJtaConfiguration.class) public class JtaAutoConfiguration extends Object; // Auto-configuration for JTA.\n", "des": "Auto-configuration for JTA."}
{"index": 3707, "repo": "solr-core-9.3.0", "code": "package servlet;\n\npackage servlet.cache; // Caching related classes used in the Solr HTTP API\nInterface PathExcluder; // Denotes an object, usually a servlet that denies access to some paths based on the supplied patterns.\nInterface SolrDispatchFilter.HttpSolrCallFactory; // internal API\nClass CoordinatorHttpSolrCall;\nClass CoordinatorHttpSolrCall.Factory;\nClass CoreContainerProvider; // A service that can provide access to solr cores.\nClass DirectSolrConnection; // DirectSolrConnection provides an interface to Solr that is similar to the HTTP interface, but does not require an HTTP connection.\nClass HttpSolrCall; // This class represents a call made to Solr\nClass LoadAdminUiServlet; // A simple servlet to load the Solr Admin UI\nClass QueryRateLimiter; // Implementation of RequestRateLimiter specific to query request types.\nClass RateLimitManager; // This class is responsible for managing rate limiting per request type.\nClass RateLimitManager.Builder;\nClass RedirectServlet; // A Simple redirection servlet to help us deprecate old UI elements\nClass RequestRateLimiter; // Handles rate limiting for a specific request type.\nClass ResponseUtils; // Response helper methods.\nClass ServletInputStreamWrapper; // Provides a convenient extension of the ServletInputStream class that can be subclassed by developers wishing to adapt the behavior of a Stream.\nClass ServletOutputStreamWrapper; // Provides a convenient extension of the ServletOutputStream class that can be subclassed by developers wishing to adapt the behavior of a Stream.\nClass ServletUtils; // Various Util methods for interaction on servlet level, i.e.\nClass ServletUtils.ClosedServletInputStream;\nClass ServletUtils.ClosedServletOutputStream;\nClass SolrDispatchFilter; // This filter looks at the incoming URL maps them to handlers defined in solrconfig.xml\nClass SolrRequestParsers;\nEnum SolrDispatchFilter.Action; // Enum to define action that needs to be processed.\nClass ExceptionWhileTracing;\nClass SolrAuthenticationException;\n", "des": "Servlet related classes for powering the Solr HTTP API"}
{"index": 1996, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package client;\n\n@AutoConfiguration @ConditionalOnClass(org.springframework.web.reactive.function.client.WebClient.class) @AutoConfigureAfter(SslAutoConfiguration.class) @Import({org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorFactoryConfiguration.ReactorNetty.class,org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorFactoryConfiguration.JettyClient.class,org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorFactoryConfiguration.HttpClient5.class,org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorFactoryConfiguration.JdkClient.class}) public class ClientHttpConnectorAutoConfiguration extends Object; // Auto-configuration for ClientHttpConnector.\n@FunctionalInterface public interface ReactorNettyHttpClientMapper; // Mapper that allows for custom modification of a HttpClient before it is used as the basis for a ReactorClientHttpConnector.\n@AutoConfiguration(after={CodecsAutoConfiguration.class,ClientHttpConnectorAutoConfiguration.class}) @ConditionalOnClass(org.springframework.web.reactive.function.client.WebClient.class) public class WebClientAutoConfiguration extends Object; // Auto-configuration for WebClient.\n@Configuration(proxyBeanMethods=false) @ConditionalOnBean(org.springframework.boot.web.codec.CodecCustomizer.class) protected static class WebClientAutoConfiguration.WebClientCodecsConfiguration extends Object;\npublic class WebClientCodecCustomizer extends Object implements org.springframework.boot.web.reactive.function.client.WebClientCustomizer; // WebClientCustomizer that configures codecs for the HTTP client.\npublic interface WebClientSsl; // Interface that can be used to apply SSL configuration to a WebClient.Builder.\n", "des": "Auto-configuration for Spring Framework's functional web client."}
{"index": 3206, "repo": "tomcat-api-10.1", "code": "package modules;\n\nClass MbeansDescriptorsDigesterSource;\nClass MbeansDescriptorsIntrospectionSource;\nClass ModelerSource; // Source for descriptor data.\n", "des": "Implementation classes - should not be used directly."}
{"index": 1299, "repo": "groovy-all-4.0.13", "code": "package text;\n\npublic final class FindReplaceUtility extends Object;\npublic class GroovyFilter extends StructuredSyntaxDocumentFilter;\npublic class MatchingHighlighter extends Object implements CaretListener; // Represents highlighter to highlight matched parentheses, brackets and curly braces when caret touching them\npublic class SmartDocumentFilter extends DocumentFilter; // The document filter based on Parrot's lexer is for highlighting the content of text editor\npublic class StructuredSyntaxDocumentFilter extends DocumentFilter;\npublic class StructuredSyntaxHandler extends DefaultHandler;\npublic final class StructuredSyntaxResources extends Object; // Contains all the basic resources and values used by the utility framework.\npublic class TextEditor extends JTextPane implements Pageable, Printable; // A simple text pane that is printable and wrapping is optional.\npublic class TextUndoManager extends UndoManager; // To use this, simply drop this as an UndoableEditListener into your document, and then create actions to call undo/redo as needed (checking can undo/redo first, of course).\n", "des": "Text processing helpers for the interactive command line terminal."}
{"index": 2489, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package graphql;\n\n@AutoConfiguration(after=ObservationAutoConfiguration.class) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.execution.GraphQlSource.class,io.micrometer.observation.Observation.class}) public class GraphQlObservationAutoConfiguration extends Object; // Auto-configuration for instrumentation of Spring GraphQL endpoints.\n", "des": "Auto-configuration for Spring GraphQL observations."}
{"index": 2207, "repo": "spring-data-commons-3.1.2", "code": "package mapping;\n\npackage mapping.callback; // Mapping callback API and implementation base classes.\npackage mapping.context; // Mapping context API and implementation base classes.\npackage mapping.model; // Core implementation of the mapping subsystem's model.\npublic class AccessOptions extends Object; // Access options when using PersistentPropertyPathAccessor to get and set properties.\npublic static class AccessOptions.GetOptions extends Object; // Access options for getting values for property paths.\npublic static enum AccessOptions.GetOptions.GetNulls extends Enum<AccessOptions.GetOptions.GetNulls>; // How to handle null values during a PersistentPropertyPath traversal.\npublic static class AccessOptions.SetOptions extends Object; // Access options for setting values for property paths.\npublic static enum AccessOptions.SetOptions.Propagation extends Enum<AccessOptions.SetOptions.Propagation>; // How to propagate setting values that cross collection and map properties.\npublic static enum AccessOptions.SetOptions.SetNulls extends Enum<AccessOptions.SetOptions.SetNulls>; // How to handle intermediate null values when setting\npublic final class Alias extends Object; // A container object which may or may not contain a type alias value.\npublic class Association<P extends PersistentProperty<P>> extends Object; // Value object to capture Associations.\npublic interface AssociationHandler<P extends PersistentProperty<P>>; // Callback interface to implement functionality to be applied to a collection of Associations.\npublic final class FactoryMethod<T,P extends PersistentProperty<P>> extends Object; // Value object to encapsulate the factory method to be used when mapping persistent data to objects.\npublic interface IdentifierAccessor; // Interface for a component allowing the access of identifier values.\npublic interface InstanceCreatorMetadata<P extends PersistentProperty<P>>; // Metadata describing a mechanism to create instances of persistent types.\npublic class MappingException extends RuntimeException;\npublic class Parameter<T,P extends PersistentProperty<P>> extends Object; // Value object to represent constructor parameters.\npublic interface PersistentEntity<T,P extends PersistentProperty<P>> extends Iterable<P>; // Represents a persistent entity.\npublic interface PersistentProperty<P extends PersistentProperty<P>>;\npublic interface PersistentPropertyAccessor<T>; // Domain service to allow accessing and setting PersistentPropertys of an entity.\n", "des": "Base package for the mapping subsystem."}
{"index": 1806, "repo": "spring-aop-6.0.11", "code": "package autoproxy;\n\npackage autoproxy.target; // Various TargetSourceCreator implementations for use with Spring's AOP auto-proxying support.\npublic abstract class AbstractAdvisorAutoProxyCreator extends AbstractAutoProxyCreator; // Generic auto proxy creator that builds AOP proxies for specific beans based on detected Advisors for each bean.\npublic abstract class AbstractAutoProxyCreator extends ProxyProcessorSupport implements org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor, org.springframework.beans.factory.BeanFactoryAware; // BeanPostProcessor implementation that wraps each eligible bean with an AOP proxy, delegating to specified interceptors before invoking the bean itself.\npublic abstract class AbstractBeanFactoryAwareAdvisingPostProcessor extends AbstractAdvisingBeanPostProcessor implements org.springframework.beans.factory.BeanFactoryAware; // Extension of AbstractAutoProxyCreator which implements BeanFactoryAware, adds exposure of the original target class for each proxied bean (AutoProxyUtils.ORIGINAL_TARGET_CLASS_ATTRIBUTE), and participates in an externally enforced target-class mode for any given bean (AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE).\npublic abstract class AutoProxyUtils extends Object; // Utilities for auto-proxy aware components.\npublic class BeanFactoryAdvisorRetrievalHelper extends Object; // Helper for retrieving standard Spring Advisors from a BeanFactory, for use with auto-proxying.\npublic class BeanNameAutoProxyCreator extends AbstractAutoProxyCreator; // Auto proxy creator that identifies beans to proxy via a list of names.\npublic class DefaultAdvisorAutoProxyCreator extends AbstractAdvisorAutoProxyCreator implements org.springframework.beans.factory.BeanNameAware; // BeanPostProcessor implementation that creates AOP proxies based on all candidate Advisors in the current BeanFactory.\npublic class InfrastructureAdvisorAutoProxyCreator extends AbstractAdvisorAutoProxyCreator; // Auto-proxy creator that considers infrastructure Advisor beans only, ignoring any application-defined Advisors.\npublic final class ProxyCreationContext extends Object; // Holder for the current proxy creation context, as exposed by auto-proxy creators such as AbstractAdvisorAutoProxyCreator.\n@FunctionalInterface public interface TargetSourceCreator; // Implementations can create special target sources, such as pooling target sources, for particular beans.\n", "des": "Bean post-processors for use in ApplicationContexts to simplify AOP usage by automatically creating AOP proxies without the need to use a ProxyFactoryBean."}
{"index": 2851, "repo": "spring-integration-core-6.1.2", "code": "package xml;\n\npublic abstract class AbstractChannelAdapterParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser; // Base parser for Channel Adapters.\npublic abstract class AbstractChannelParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser; // Base class for channel parsers.\npublic abstract class AbstractConsumerEndpointParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser; // Base class parser for elements that create Message Endpoints.\npublic abstract class AbstractCorrelatingMessageHandlerParser extends AbstractConsumerEndpointParser; // Base class for parsers that create an instance of AbstractCorrelatingMessageHandler.\npublic abstract class AbstractInboundGatewayParser extends org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser; // Base class for inbound gateway parsers.\npublic abstract class AbstractIntegrationNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // Base class for NamespaceHandlers that registers a BeanFactoryPostProcessor for configuring default bean definitions.\npublic abstract class AbstractOutboundChannelAdapterParser extends AbstractChannelAdapterParser; // Base class for outbound Channel Adapter parsers.\npublic abstract class AbstractOutboundGatewayParser extends AbstractConsumerEndpointParser; // Base class for url-based outbound gateway parsers.\npublic abstract class AbstractPollingInboundChannelAdapterParser extends AbstractChannelAdapterParser; // Base parser for inbound Channel Adapters that poll a source.\npublic abstract class AbstractRouterParser extends AbstractConsumerEndpointParser; // Base parser for routers.\npublic abstract class AbstractTransformerParser extends AbstractConsumerEndpointParser;\npublic class AggregatorParser extends AbstractCorrelatingMessageHandlerParser; // Parser for the aggregator element of the integration namespace.\npublic class AnnotationConfigParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Parser for the <annotation-config> element of the integration namespace.\npublic class ApplicationEventMulticasterParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the <application-event-multicaster> element of the integration namespace.\npublic class BarrierParser extends AbstractConsumerEndpointParser; // Parser for <int:barrier/>.\npublic interface BeanDefinitionRegisteringParser; // Simple strategy interface for parsers that are responsible for parsing an element, creating a bean definition, and then registering the bean.\n", "des": "Provides supporting XML-based configuration - parsers, namespace handlers."}
{"index": 2843, "repo": "spring-integration-core-6.1.2", "code": "package annotation;\n\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(Aggregators.class) public @interface Aggregator; // Indicates that a method is capable of aggregating messages.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) public @interface Aggregators; // The repeatable container for Aggregator annotations.\npublic final class AnnotationConstants extends Object; // Common value constants for annotation attributes.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(BridgeFromRepeatable.class) public @interface BridgeFrom; // Messaging Annotation to mark a Bean method for a MessageChannel to produce a BridgeHandler and Consumer Endpoint.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) public @interface BridgeFromRepeatable; // The repeatable container for BridgeFrom annotations.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(BridgeToRepeatable.class) public @interface BridgeTo; // Messaging Annotation to mark a Bean method for a MessageChannel to produce a BridgeHandler and Consumer Endpoint.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) public @interface BridgeToRepeatable; // The repeatable container for BridgeTo annotations.\n@Retention(RUNTIME) @Target(METHOD) @Documented public @interface CorrelationStrategy; // Indicates that a given method is capable of determining the correlation key of a message sent as parameter.\n@Target({TYPE,FIELD,METHOD,PARAMETER,CONSTRUCTOR}) @Retention(RUNTIME) @Documented public @interface Default; // Indicates that the class member has some default meaning.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface EndpointId; // When used alongside an EIP annotation (and no @Bean), specifies the bean name of the consumer bean with the handler bean being id.handler (for a consuming endpoint) or id.source for a message source (e.g.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(Filters.class) public @interface Filter; // Indicates that a method is capable of playing the role of a Message Filter.\n", "des": "Provides annotations for annotation-based configuration."}
{"index": 2703, "repo": "spring-integration-ftp-6.1.2", "code": "package filters;\n\npublic class FtpPersistentAcceptOnceFileListFilter extends org.springframework.integration.file.filters.AbstractPersistentAcceptOnceFileListFilter<org.apache.commons.net.ftp.FTPFile>; // Persistent file list filter using the server's file timestamp to detect if we've already 'seen' this file.\npublic class FtpRegexPatternFileListFilter extends org.springframework.integration.file.filters.AbstractRegexPatternFileListFilter<org.apache.commons.net.ftp.FTPFile>; // Implementation of AbstractRegexPatternFileListFilter for FTP.\npublic class FtpSimplePatternFileListFilter extends org.springframework.integration.file.filters.AbstractSimplePatternFileListFilter<org.apache.commons.net.ftp.FTPFile>; // Implementation of AbstractSimplePatternFileListFilter for FTP.\npublic class FtpSystemMarkerFilePresentFileListFilter extends org.springframework.integration.file.filters.AbstractMarkerFilePresentFileListFilter<org.apache.commons.net.ftp.FTPFile>; // FTP implementation of AbstractMarkerFilePresentFileListFilter.\n", "des": "Provides classes supporting FTP file filtering."}
{"index": 2926, "repo": "groovy-4.0.13", "code": "package ast;\n\npackage ast.expr; // AST nodes for Groovy expressions\npackage ast.stmt; // AST nodes for Groovy statements\npublic class AnnotatedNode extends ASTNode implements GroovydocHolder<AnnotatedNode>; // Base class for any AST node which is capable of being annotated\npublic class AnnotationNode extends ASTNode; // Represents an annotation which can be attached to interfaces, classes, methods, fields, parameters, and other places.\npublic class ASTNode extends Object implements NodeMetaDataHandler; // Base class for any AST node.\npublic class AstToTextHelper extends Object; // Helper class for converting AST into text.\npublic abstract class ClassCodeExpressionTransformer extends ClassCodeVisitorSupport implements ExpressionTransformer; // Transforms expressions in a whole class.\npublic abstract class ClassCodeVisitorSupport extends CodeVisitorSupport implements ErrorCollecting, GroovyClassVisitor;\npublic class ClassHelper extends Object; // Helper for ClassNode and classes handling them.\npublic class ClassNode extends AnnotatedNode; // Represents a class in the AST.\npublic abstract class CodeVisitorSupport extends Object implements GroovyCodeVisitor; // Abstract base class for any GroovyCodeVisitor which by default just walks the code and expression tree\npublic class CompileUnit extends Object implements NodeMetaDataHandler; // Represents the entire contents of a compilation step which consists of one or more ModuleNode instances.\npublic class ConstructorNode extends MethodNode; // Represents a constructor declaration\npublic class DynamicVariable extends Object implements Variable;\npublic class EnumConstantClassNode extends InnerClassNode; // Represents the anonymous inner class for an enum constant.\npublic class FieldNode extends AnnotatedNode implements Variable; // Represents a field (member variable)\npublic class GenericsType extends ASTNode; // This class is used to describe generic type signatures for ClassNodes.\npublic static class GenericsType.GenericsTypeName extends Object; // Represents GenericsType name.\npublic interface GroovyClassVisitor; // A special visitor for working with the structure of a class.\npublic interface GroovyCodeVisitor; // An implementation of the visitor pattern for working with ASTNodes.\npublic class GroovyCodeVisitorAdapter extends Object implements GroovyCodeVisitor;\npublic class ImportNode extends AnnotatedNode; // Represents an import statement.\npublic class InnerClassNode extends ClassNode; // Represents an inner class declaration\n", "des": "Groovy AST nodes for the syntax of the language"}
{"index": 1261, "repo": "spring-core-6.0.11", "code": "package core;\n\npackage core.internal; // Spring's repackaging of the CGLIB core internal package (for internal use only).\npublic abstract class AbstractClassGenerator<T> extends Object implements ClassGenerator; // Abstract class for all code-generating CGLIB utilities.\nprotected static class AbstractClassGenerator.ClassLoaderData extends Object;\nprotected static class AbstractClassGenerator.Source extends Object;\npublic class Block extends Object;\npublic class ClassEmitter extends ClassTransformer;\npublic class ClassesKey extends Object;\npublic interface ClassGenerator;\npublic abstract class ClassInfo extends Object;\npublic class ClassLoaderAwareGeneratorStrategy extends DefaultGeneratorStrategy; // CGLIB GeneratorStrategy variant which exposes the application ClassLoader as current thread context ClassLoader for the time of class generation.\npublic class ClassNameReader extends Object;\npublic abstract class ClassTransformer extends ClassVisitor;\npublic class CodeEmitter extends LocalVariablesSorter;\npublic class CodeGenerationException extends RuntimeException;\npublic class CollectionUtils extends Object;\npublic interface Constants extends Opcodes;\npublic interface Converter;\npublic interface Customizer extends KeyFactoryCustomizer; // Customizes key types for KeyFactory when building equals, hashCode, and toString.\npublic class DebuggingClassWriter extends ClassVisitor;\npublic class DefaultGeneratorStrategy extends Object implements GeneratorStrategy;\npublic class DefaultNamingPolicy extends Object implements NamingPolicy; // The default policy used by AbstractClassGenerator.\npublic class DuplicatesPredicate extends Object implements Predicate;\npublic class EmitUtils extends Object;\npublic static class EmitUtils.ArrayDelimiters extends Object;\npublic interface FieldTypeCustomizer extends KeyFactoryCustomizer; // Customizes key types for KeyFactory right in constructor.\npublic interface GeneratorStrategy; // The GeneratorStrategy is responsible for taking a ClassGenerator and producing a byte array containing the data for the generated Class.\npublic interface HashCodeCustomizer extends KeyFactoryCustomizer;\npublic abstract class KeyFactory extends Object; // Generates classes to handle multi-valued keys, for use in things such as Maps and Sets.\npublic static class KeyFactory.Generator extends AbstractClassGenerator;\npublic interface KeyFactoryCustomizer; // Marker interface for customizers of KeyFactory\npublic class Local extends Object;\npublic class LocalVariablesSorter extends MethodVisitor; // A MethodVisitor that renumbers local variables in their order of appearance.\npublic abstract class MethodInfo extends Object;\npublic class MethodInfoTransformer extends Object implements Transformer;\n", "des": "Spring's repackaging of the CGLIB core package (for internal use only)."}
{"index": 387, "repo": "commons-dbcp2-2.9.0", "code": "package cpdsadapter;\n\nClass DriverAdapterCPDS; // An adapter for JDBC drivers that do not include an implementation of ConnectionPoolDataSource, but still include a DriverManager implementation.\nClass PStmtKeyCPDS; // Use PStmtKey.\n", "des": "This package contains one public class which is a ConnectionPoolDataSource (CPDS) implementation that can be used to adapt older Driver based JDBC implementations."}
{"index": 1968, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package client;\n\npackage client.reactive; // Auto-configuration for Spring Security's Reactive OAuth 2 client.\npackage client.servlet; // Auto-configuration for Spring Security's OAuth 2 client.\npublic class ClientsConfiguredCondition extends SpringBootCondition; // Condition that matches if any spring.security.oauth2.client.registration properties are defined.\n@ConfigurationProperties(prefix=\"spring.security.oauth2.client\") public class OAuth2ClientProperties extends Object implements org.springframework.beans.factory.InitializingBean; // OAuth 2.0 client properties.\npublic static class OAuth2ClientProperties.Provider extends Object;\npublic static class OAuth2ClientProperties.Registration extends Object; // A single client registration.\npublic final class OAuth2ClientPropertiesMapper extends Object; // Maps OAuth2ClientProperties to ClientRegistrations.\n@Deprecated(since=\"3.1.0\", forRemoval=true) public final class OAuth2ClientPropertiesRegistrationAdapter extends Object;\n", "des": "Support for Spring Security's OAuth 2 client."}
{"index": 770, "repo": "lucene-analyzers-common-8.11.2", "code": "package da;\n\nClass DanishAnalyzer; // Analyzer for Danish.\n", "des": "Analyzer for Danish."}
{"index": 988, "repo": "spring-ws-3.0.10.RELEASE", "code": "package soap12;\n\nInterface Soap12Body; // Subinterface of SoapBody that exposes SOAP 1.2 functionality.\nInterface Soap12Fault; // Subinterface of SoapFault that exposes SOAP 1.2 functionality.\nInterface Soap12Header; // Subinterface of SoapHeader that exposes SOAP 1.2 functionality.\n", "des": "Contains interfaces specific to SOAP 1.2."}
{"index": 1591, "repo": "spring-websocket-6.0.11", "code": "package standard;\n\npublic class AnnotatedEndpointConnectionManager extends ConnectionManagerSupport implements org.springframework.beans.factory.BeanFactoryAware; // WebSocket connection manager that connects to the server via WebSocketContainer and handles the session with an @ClientEndpoint endpoint.\npublic class EndpointConnectionManager extends ConnectionManagerSupport implements org.springframework.beans.factory.BeanFactoryAware; // WebSocket connection manager that connects to the server via WebSocketContainer and handles the session with an Endpoint.\npublic class StandardWebSocketClient extends AbstractWebSocketClient; // A WebSocketClient based on the standard Jakarta WebSocket API.\npublic class WebSocketContainerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<WebSocketContainer>; // A FactoryBean for creating and configuring a WebSocketContainer through Spring XML configuration.\n", "des": "Client-side classes for use with standard Jakarta WebSocket endpoints."}
{"index": 1142, "repo": "commons-math3-3.6.1", "code": "package math3;\n\npackage math3.analysis; // Parent package for common numerical analysis procedures, including root finding, function interpolation and integration.\npackage math3.complex; // Complex number type and implementations of complex transcendental functions.\npackage math3.dfp; // Decimal floating point library for Java\npackage math3.distribution; // Implementations of common discrete and continuous distributions.\npackage math3.exception; // Specialized exceptions for algorithms errors.\npackage math3.filter; // Implementations of common discrete-time linear filters.\npackage math3.fitting; // Classes to perform curve fitting.\npackage math3.fraction; // Fraction number type and fraction number formatting.\npackage math3.genetics; // This package provides Genetic Algorithms components and implementations.\npackage math3.geometry; // This package is the top level package for geometry.\npackage math3.linear; // Linear algebra support.\npackage math3.ode; // This package provides classes to solve Ordinary Differential Equations problems.\npackage math3.optim; // Generally, optimizers are algorithms that will either minimize or maximize a scalar function, called the objective function.\npackage math3.optimization; // All classes and sub-packages of this package are deprecated.\npackage math3.primes; // Methods related to prime numbers like primality test, factor decomposition.\npackage math3.random; // Random number and random data generators.\npackage math3.special; // Implementations of special functions such as Beta and Gamma.\npackage math3.stat; // Data storage, manipulation and summary routines.\npackage math3.transform; // Implementations of transform methods, including Fast Fourier transforms.\npackage math3.util; // Convenience routines and common data structures used throughout the commons-math library.\nInterface Field<T>; // Interface representing a field.\nInterface FieldElement<T>; // Interface representing field elements.\nInterface RealFieldElement<T>; // Interface representing a real field.\n", "des": "Common classes used throughout the commons-math library."}
{"index": 3841, "repo": "lucene-core-9.7.0", "code": "package compressing;\n\nClass FieldsIndexWriter; // Efficient index format for block-based Codecs.\nClass Lucene90CompressingStoredFieldsFormat; // A StoredFieldsFormat that compresses documents in chunks in order to improve the compression ratio.\nClass Lucene90CompressingStoredFieldsReader; // StoredFieldsReader impl for Lucene90CompressingStoredFieldsFormat.\nClass Lucene90CompressingStoredFieldsWriter; // StoredFieldsWriter impl for Lucene90CompressingStoredFieldsFormat.\nClass Lucene90CompressingTermVectorsFormat; // A TermVectorsFormat that compresses chunks of documents together in order to improve the compression ratio.\nClass Lucene90CompressingTermVectorsReader; // TermVectorsReader for Lucene90CompressingTermVectorsFormat.\nClass Lucene90CompressingTermVectorsWriter; // TermVectorsWriter for Lucene90CompressingTermVectorsFormat.\n", "des": "Lucene 9.0 compressing format."}
{"index": 3696, "repo": "solr-core-9.3.0", "code": "package command;\n\nClass QueryCommand;\nClass QueryCommand.Builder;\nClass QueryCommandResult; // Encapsulates TopDocs and the number of matches.\nClass SearchGroupsFieldCommand; // Creates all the collectors needed for the first phase and how to handle the results.\nClass SearchGroupsFieldCommand.Builder;\nClass SearchGroupsFieldCommandResult; // Encapsulates the result of a SearchGroupsFieldCommand command\nClass TopGroupsFieldCommand; // Defines all collectors for retrieving the second phase and how to handle the collector result.\nClass TopGroupsFieldCommand.Builder;\n", "des": "Internal classes used to implement distributed result grouping"}
{"index": 2351, "repo": "spring-boot-3.1.1", "code": "package error;\n\npublic class DefaultErrorAttributes extends Object implements ErrorAttributes; // Default implementation of ErrorAttributes.\npublic interface ErrorAttributes; // Provides access to error attributes which can be logged or presented to the user.\n@FunctionalInterface public interface ErrorWebExceptionHandler extends org.springframework.web.server.WebExceptionHandler; // Marker interface that indicates that a WebExceptionHandler is used to render errors.\n", "des": "Spring WebFlux error handling infrastructure."}
{"index": 768, "repo": "lucene-analyzers-common-8.11.2", "code": "package custom;\n\nClass CustomAnalyzer; // A general-purpose Analyzer that can be created with a builder-style API.\nClass CustomAnalyzer.Builder; // Builder for CustomAnalyzer.\nClass CustomAnalyzer.ConditionBuilder; // Factory class for a ConditionalTokenFilter\n", "des": "A general-purpose Analyzer that can be created with a builder-style API."}
{"index": 3666, "repo": "solr-core-9.3.0", "code": "package jersey;\n\npackage jersey.container; // Adapter code used to convert the native Jetty request/response abstractions into the objects required by Jersey\nInterface JacksonReflectMapWriter; // A MapWriter implementation that relies on Jackson's JsonProperty annotation.\nInterface RequestContextKeys; // Keys used to store and retrieve values from the Jersey request context.\nClass AsyncJerseyResponse;\nClass CatchAllExceptionMapper; // Flattens the exception and sets on a SolrJerseyResponse.\nClass ErrorInfo; // A value type representing an error.\nClass ErrorInfo.ErrorMetadata;\nClass ExperimentalResponse; // SolrJerseyResponse implementation with a warning field indicating that the format may change\nClass InjectionFactories;\nClass InjectionFactories.RequestContextBasedFactory; // Allows access to a ContainerRequestContext via a ServiceLocator\nClass InjectionFactories.ReuseFromContextIndexSchemaFactory;\nClass InjectionFactories.ReuseFromContextSolrCoreFactory; // Fetch the (existing) SolrCore from the request context\nClass InjectionFactories.ReuseFromContextSolrParamsFactory;\nClass InjectionFactories.SingletonFactory<T>;\nClass InjectionFactories.SolrQueryRequestFactory;\nClass InjectionFactories.SolrQueryResponseFactory;\nClass JerseyAppHandlerCache; // Stores Jersey 'ApplicationHandler' instances by an ID or hash derived from their ConfigSet.\nClass JerseyApplications; // JAX-RS \"application\" configurations for Solr's CoreContainer and SolrCore instances\nClass JerseyApplications.CoreContainerApp;\nClass JerseyApplications.SolrCoreApp;\nClass MediaTypeOverridingFilter; // Overrides the content-type of the response based on an optional user-provided 'wt' parameter\nClass MessageBodyReaders; // A collection point for various MessageBodyReader implementations.\nClass MessageBodyReaders.CachingDelegatingMessageBodyReader; // Caches the deserialized request body in the ContainerRequestContext for use later in the request lifecycle.\nClass MessageBodyReaders.CachingJsonMessageBodyReader; // A JSON MessageBodyReader that caches request bodies for use later in the request lifecycle.\nClass MessageBodyWriters; // A collection of thin Jersey shims around Solr's existing QueryResponseWriter interface\nClass MessageBodyWriters.BaseMessageBodyWriter;\nClass MessageBodyWriters.CsvMessageBodyWriter;\n", "des": "Jersey integration code"}
{"index": 3242, "repo": "opencms-core-15.0", "code": "package contenteditor;\n\npackage contenteditor.shared; // Contains data beans used on the server side as well as on the client side of the XML content editor.\nClass A_CmsXmlContentEditorChangeHandler; // Abstract implementation of the content editor change handler.\nClass ClientMessages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsContentEditorActionElement; // The content editor action element.\nClass CmsContentService; // Service to provide entity persistence within OpenCms.\nClass CmsContentTypeVisitor; // Visitor to read all types and attribute configurations within a content definition.\nClass CmsDelayedDefaultChangeHandler; // A change handler that reacts to changes in a field by setting another empty field to a default value.\nClass CmsDynamicCategoryFieldList; // Class used to keep track of optional dynamic category fields for a content.\nClass CmsEditorChangeHandlerFormatterSelection; // Editor change handler implementation for the formatter selection in the sitemap config.\nClass CmsEditorChangeHandlerProperty; // Handles editor content changes to read OpenCms resource properties and insert their values into the edited content.\nClass CmsSerialDateService; // Implementation of the serial date RPC service.\nClass CmsWidgetUtil; // Utility methods for getting widget informations out of content definitions.\nClass CmsWidgetUtil.WidgetInfo; // Bean representing widget information.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsContentTypeVisitor.EvaluationRule; // Widget display type evaluation rules.\n", "des": "Contains server side classes for the XML content editor."}
{"index": 2910, "repo": "spring-xml-4.0.5", "code": "package dom;\n\npublic class DomContentHandler extends Object implements ContentHandler; // SAX ContentHandler that transforms callback calls to DOM Nodes.\n", "des": "Provides classes that help with DOM: the Document Object Model."}
{"index": 3453, "repo": "hibernate-core-5.6.15.Final", "code": "package profile;\n\nClass Association; // Models the association of a given fetch.\nClass Fetch; // Models an individual fetch within a profile.\nClass FetchProfile; // A 'fetch profile' allows a user to dynamically modify the fetching strategy used for particular associations at runtime, whereas that information was historically only statically defined in the metadata.\nEnum Fetch.Style; // The type or style of fetch.\n", "des": "Models the fetch profiles defined by the application"}
{"index": 622, "repo": "freemarker-2.3.32", "code": "package beans;\n\nInterface ClassMemberAccessPolicy; // Returned by MemberAccessPolicy.forClass(Class).\nInterface MemberAccessPolicy; // Implement this to restrict what class members (methods, fields, constructors) are accessible from templates.\nInterface MethodAppearanceFineTuner; // Used for customizing how the methods are visible from templates, via BeansWrapper.setMethodAppearanceFineTuner(MethodAppearanceFineTuner).\nInterface SingletonCustomizer; // Marker interface useful when used together with MethodAppearanceFineTuner and such customizer objects, to indicate that it doesn't contain reference to the ObjectWrapper (so beware with non-static inner classes) and can be and should be used in call introspection cache keys.\nClass ArrayModel; // A class that will wrap an arbitrary array into TemplateCollectionModel and TemplateSequenceModel interfaces.\nClass BeanModel; // A class that will wrap an arbitrary object into TemplateHashModel interface allowing calls to arbitrary property getters and invocation of accessible methods on the object from a template using the object.foo to access properties and object.bar(arg1, arg2) to invoke methods on it.\nClass BeansModelCache;\nClass BeansWrapper; // ObjectWrapper that is able to expose the Java API of arbitrary Java objects.\nClass BeansWrapper.MethodAppearanceDecision; // Used for MethodAppearanceFineTuner.process(freemarker.ext.beans.BeansWrapper.MethodAppearanceDecisionInput, freemarker.ext.beans.BeansWrapper.MethodAppearanceDecision) to store the results; see there.\nClass BeansWrapper.MethodAppearanceDecisionInput; // Used for MethodAppearanceFineTuner.process(freemarker.ext.beans.BeansWrapper.MethodAppearanceDecisionInput, freemarker.ext.beans.BeansWrapper.MethodAppearanceDecision) as input parameter; see there.\nClass BeansWrapperBuilder; // Gets/creates a BeansWrapper singleton instance that's already configured as specified in the properties of this object; this is recommended over using the BeansWrapper constructors.\nClass BeansWrapperConfiguration; // Holds BeansWrapper configuration settings and defines their defaults.\n", "des": "The default object wrapper of FreeMarker uses this to expose Java Beans and POJO-s to templates."}
{"index": 293, "repo": "pdfbox-3.0.0-beta1", "code": "package font;\n\nInterface FontMapper; // Font mapper, locates non-embedded fonts.\nInterface PDFontLike; // A font-like object.\nInterface PDVectorFont; // A vector outline font, e.g.\nClass CIDFontMapping; // A CIDFontMapping is a kind of FontMapping which allows for an additional TrueTypeFont substitute to be provided if a CID font is not available.\nClass CIDSystemInfo; // Represents a CIDSystemInfo for the FontMapper API.\nClass FontCache; // An in-memory cache for system fonts.\nClass FontInfo; // Information about a font on the system.\nClass FontMappers; // FontMapper factory class.\nClass FontMapping<T extends org.apache.fontbox.FontBoxFont>; // A font mapping from a PDF font to a FontBox font.\nClass FontProvider; // External font service provider interface.\nClass PDCIDFont; // A CIDFont.\nClass PDCIDFontType0; // Type 0 CIDFont (CFF).\nClass PDCIDFontType2; // Type 2 CIDFont (TrueType).\nClass PDCIDSystemInfo; // Represents a CIDSystemInfo.\nClass PDFont; // This is the base class for all PDF fonts.\nClass PDFontDescriptor; // A font descriptor.\nClass PDFontFactory; // Creates the appropriate font subtype based on information in the dictionary.\nClass PDMMType1Font; // Type 1 Multiple Master Font.\nClass PDPanose; // Represents the \"Panose\" entry of a FontDescriptor's Style dictionary.\nClass PDPanoseClassification; // Represents a 10-byte PANOSE classification.\nClass PDSimpleFont; // A simple font.\nClass PDTrueTypeFont; // TrueType font.\nClass PDType0Font; // A Composite (Type 0) font.\nClass PDType1CFont; // Type 1-equivalent CFF font.\nClass PDType1Font; // A PostScript Type 1 Font.\nClass PDType3CharProc; // A Type 3 character procedure.\nClass PDType3Font; // A PostScript Type 3 Font.\nClass Standard14Fonts; // The \"Standard 14\" PDF fonts, also known as the \"base 14\" fonts.\n", "des": "Classes to deal with font functionality in a PDF Document."}
{"index": 963, "repo": "spring-ws-3.0.10.RELEASE", "code": "package core;\n\nClass EndpointReference; // Represents an Endpoint Reference, as defined in the WS-Addressing specification.\nClass MessageAddressingProperties; // Represents a set of Message Addressing Properties, as defined in the WS-Addressing specification.\n", "des": "Core package for WS-Addressing support."}
{"index": 842, "repo": "calcite-core-1.34.0", "code": "package externalize;\n\nInterface RelDotWriter.WriteOption; // Options for displaying the rel node plan in dot format.\nInterface RelJson.InputTranslator; // Translates a JSON object that represents an input reference into a RexNode.\nClass RelDotWriter; // Utility to dump a rel node plan in dot format.\nClass RelEnumTypes; // Registry of Enum classes that can be serialized to JSON.\nClass RelJson; // Utilities for converting RelNode into JSON format.\nClass RelJsonReader; // Reads a JSON plan and converts it back to a tree of relational expressions.\nClass RelJsonWriter; // Callback for a relational expression to dump itself as JSON.\nClass RelWriterImpl; // Implementation of RelWriter.\nClass RelXmlWriter; // Callback for a relational expression to dump in XML format.\n", "des": "Facilities to externalize RelNodes to and from XML and JSON format."}
{"index": 2585, "repo": "spring-rabbit-3.0.6", "code": "package annotation;\n\n@Target({}) @Retention(RUNTIME) public @interface Argument; // Represents an argument used when declaring queues etc within a QueueBinding.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(RabbitListenerConfigurationSelector.class) public @interface EnableRabbit; // Enable Rabbit listener annotated endpoints that are created under the cover by a RabbitListenerContainerFactory.\n@Target({}) @Retention(RUNTIME) public @interface Exchange; // An exchange to which to bind a RabbitListener queue.\npublic class MultiRabbitBootstrapConfiguration extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar, org.springframework.context.EnvironmentAware; // An ImportBeanDefinitionRegistrar class that registers a MultiRabbitListenerAnnotationBeanPostProcessor bean, if MultiRabbit is enabled.\npublic class MultiRabbitListenerAnnotationBeanPostProcessor extends RabbitListenerAnnotationBeanPostProcessor; // An extension of RabbitListenerAnnotationBeanPostProcessor that indicates the proper RabbitAdmin bean to be used when processing to the listeners, and also associates it to the declarables (Exchanges, Queues, and Bindings) returned.\n@Target({}) @Retention(RUNTIME) public @interface Queue; // A queue definition used within the bindings attribute of a QueueBinding.\n@Target({}) @Retention(RUNTIME) public @interface QueueBinding; // Defines a queue, the exchange it is to be bound to, and an optional binding key; used with @RabbitListener.\npublic class RabbitBootstrapConfiguration extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar; // An ImportBeanDefinitionRegistrar class that registers a RabbitListenerAnnotationBeanPostProcessor bean capable of processing Spring's @RabbitListener annotation.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @MessageMapping @Documented public @interface RabbitHandler; // Annotation that marks a method to be the target of a Rabbit message listener within a class that is annotated with RabbitListener.\n@Target({TYPE,METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @MessageMapping @Documented @Repeatable(RabbitListeners.class) public @interface RabbitListener; // Annotation that marks a method to be the target of a Rabbit message listener on the specified RabbitListener.queues() (or RabbitListener.bindings()).\n", "des": "Annotations and supporting classes for declarative Rabbit listener endpoint"}
{"index": 335, "repo": "kafka-clients-3.5.0", "code": "package serialization;\n\nInterface Deserializer<T>; // An interface for converting bytes to objects.\nInterface Serde<T>; // The interface for wrapping a serializer and deserializer for the given data type.\nInterface Serializer<T>; // An interface for converting objects to bytes.\nClass BooleanDeserializer;\nClass BooleanSerializer;\nClass ByteArrayDeserializer;\nClass ByteArraySerializer;\nClass ByteBufferDeserializer;\nClass ByteBufferSerializer; // Do not need to flip before call serialize(String, ByteBuffer).\nClass BytesDeserializer;\nClass BytesSerializer;\nClass DoubleDeserializer;\nClass DoubleSerializer;\nClass FloatDeserializer;\nClass FloatSerializer;\nClass IntegerDeserializer;\nClass IntegerSerializer;\nClass ListDeserializer<Inner>;\nClass ListSerializer<Inner>;\nClass LongDeserializer;\nClass LongSerializer;\nClass Serdes; // Factory for creating serializers / deserializers.\nClass Serdes.BooleanSerde;\nClass Serdes.ByteArraySerde;\nClass Serdes.ByteBufferSerde;\nClass Serdes.BytesSerde;\nClass Serdes.DoubleSerde;\nClass Serdes.FloatSerde;\nClass Serdes.IntegerSerde;\nClass Serdes.ListSerde<Inner>;\nClass Serdes.LongSerde;\nClass Serdes.ShortSerde;\nClass Serdes.StringSerde;\nClass Serdes.UUIDSerde;\nClass Serdes.VoidSerde;\nClass Serdes.WrapperSerde<T>;\nClass ShortDeserializer;\nClass ShortSerializer;\nClass StringDeserializer; // String encoding defaults to UTF8 and can be customized by setting the property key.deserializer.encoding, value.deserializer.encoding or deserializer.encoding.\nClass StringSerializer; // String encoding defaults to UTF8 and can be customized by setting the property key.serializer.encoding, value.serializer.encoding or serializer.encoding.\nClass UUIDDeserializer; // We are converting the byte array to String before deserializing to UUID.\nClass UUIDSerializer; // We are converting UUID to String before serializing.\nClass VoidDeserializer;\nClass VoidSerializer;\n", "des": "Provides interface and some implementations of serialization/deserialization routines for various objects."}
{"index": 3638, "repo": "solr-core-9.3.0", "code": "package embedded;\n\nClass EmbeddedSolrServer; // SolrClient that connects directly to a CoreContainer.\nEnum EmbeddedSolrServer.RequestWriterSupplier;\n", "des": "SolrJ client implementations for embedded solr access."}
{"index": 774, "repo": "lucene-analyzers-common-8.11.2", "code": "package es;\n\nClass SpanishAnalyzer; // Analyzer for Spanish.\nClass SpanishLightStemFilter; // A TokenFilter that applies SpanishLightStemmer to stem Spanish words.\nClass SpanishLightStemFilterFactory; // Factory for SpanishLightStemFilter.\nClass SpanishLightStemmer; // Light Stemmer for Spanish\nClass SpanishMinimalStemFilter; // A TokenFilter that applies SpanishMinimalStemmer to stem Spanish words.\nClass SpanishMinimalStemFilterFactory; // Factory for SpanishMinimalStemFilter.\nClass SpanishMinimalStemmer; // Minimal plural stemmer for Spanish.\n", "des": "Analyzer for Spanish."}
{"index": 1888, "repo": "shiro-core-2.0.0-alpha-2", "code": "package ldap;\n\npublic abstract class AbstractLdapRealm extends AuthorizingRealm; // A Realm that authenticates with an LDAP server to build the Subject for a user.\npublic class DefaultLdapRealm extends AuthorizingRealm; // An LDAP Realm implementation utilizing Sun's/Oracle's JNDI API as an LDAP API.\npublic class JndiLdapContextFactory extends Object implements LdapContextFactory; // LdapContextFactory implementation using the default Sun/Oracle JNDI Ldap API, utilizing JNDI environment properties and an InitialContext.\npublic class JndiLdapRealm extends DefaultLdapRealm;\npublic interface LdapContextFactory; // Interface that encapsulates the creation of LdapContext objects that are used by DefaultLdapRealms to perform authentication attempts and query for authorization data.\npublic final class LdapUtils extends Object; // Utility class providing static methods to make working with LDAP easier.\n", "des": "Realms that acquire security data from an LDAP (Lightweight Directory Access Protocol) server utilizing LDAP/Naming APIs."}
{"index": 2633, "repo": "shiro-web-2.0.0-alpha-2", "code": "package subject;\n\npackage subject.support; // Supporting implementations of org.apache.shiro.web.subject package interfaces.\npublic interface WebSubject extends org.apache.shiro.subject.Subject, RequestPairSource; // A WebSubject represents a Subject instance that was acquired as a result of an incoming ServletRequest.\npublic static class WebSubject.Builder extends org.apache.shiro.subject.Subject.Builder; // A WebSubject.Builder performs the same function as a Subject.Builder, but additionally ensures that the Servlet request/response pair that is triggering the Subject instance's creation is retained for use by internal Shiro components as necessary.\npublic interface WebSubjectContext extends org.apache.shiro.subject.SubjectContext, RequestPairSource; // A WebSubjectContext is a SubjectContext that additionally provides for type-safe methods to set and retrieve a ServletRequest and ServletResponse.\n", "des": "Web-specific Subject interfaces to enable Subject use in web environments."}
{"index": 684, "repo": "jackson-databind-2.15.2", "code": "package std;\n\nClass ArrayBlockingQueueDeserializer; // We need a custom deserializer both because ArrayBlockingQueue has no default constructor AND because it has size limit used for constructing underlying storage automatically.\nClass AtomicBooleanDeserializer;\nClass AtomicIntegerDeserializer;\nClass AtomicLongDeserializer;\nClass AtomicReferenceDeserializer;\nClass ByteBufferDeserializer;\nClass CollectionDeserializer; // Basic serializer that can take JSON \"Array\" structure and construct a Collection instance, with typed contents.\nClass CollectionDeserializer.CollectionReferringAccumulator; // Helper class for dealing with Object Id references for values contained in collections being deserialized.\nClass ContainerDeserializerBase<T>; // Intermediate base deserializer class that adds more shared accessor so that other classes can access information about contained (value) types\nClass DateDeserializers; // Container class for core JDK date/time type deserializers.\nClass DateDeserializers.CalendarDeserializer;\nClass DateDeserializers.DateBasedDeserializer<T>;\nClass DateDeserializers.DateDeserializer; // Simple deserializer for handling Date values.\nClass DateDeserializers.SqlDateDeserializer; // Compared to plain old Date, SQL version is easier to deal with: mostly because it is more limited.\nClass DateDeserializers.TimestampDeserializer; // Simple deserializer for handling Timestamp values.\nClass DelegatingDeserializer; // Base class that simplifies implementations of JsonDeserializers that mostly delegate functionality to another deserializer implementation (possibly forming a chaining of deserializers delegating functionality in some cases)\nClass EnumDeserializer; // Deserializer class that can deserialize instances of specified Enum class from Strings and Integers.\nClass EnumMapDeserializer; // Deserializer for EnumMap values.\nClass EnumSetDeserializer; // Standard deserializer for EnumSets.\nClass FromStringDeserializer<T>; // Base class for simple deserializers that serialize values from String representation: this includes JSON Strings and other Scalar values that can be coerced into text, like Numbers and Booleans).\nClass FromStringDeserializer.Std; // \"Chameleon\" deserializer that works on simple types that are deserialized from a simple String.\nClass JdkDeserializers; // Container class that contains serializers for JDK types that require special handling for some reason.\nClass JsonLocationInstantiator; // For JsonLocation, we should be able to just implement ValueInstantiator (not that explicit one would be very hard but...)\n", "des": "Contains public standard implementations of abstraction that Jackson uses."}
{"index": 1132, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package nodelabels;\n\nInterface NodeDescriptorsProvider<T>; // Interface which will be responsible for fetching node descriptors, a node descriptor could be a NodeLabel or a NodeAttribute.\nClass AbstractNodeDescriptorsProvider<T>; // Provides base implementation of NodeDescriptorsProvider with Timer and expects subclass to provide TimerTask which can fetch node descriptors.\nClass ConfigurationNodeAttributesProvider; // Configuration based node attributes provider.\nClass ConfigurationNodeLabelsProvider; // Provides Node's Labels by constantly monitoring the configuration.\nClass NodeAttributesProvider; // Abstract class which will be responsible for fetching the node attributes.\nClass NodeDescriptorsScriptRunner<T>; // A node descriptors script runner periodically runs a script, parses the output to collect desired descriptors, and then post these descriptors to the given NodeDescriptorsProvider.\nClass NodeLabelsProvider; // Abstract class which will be responsible for fetching the node labels.\nClass ScriptBasedNodeAttributesProvider; // Node attribute provider that periodically runs a script to collect node attributes.\nClass ScriptBasedNodeLabelsProvider; // The class which provides functionality of getting the labels of the node using the configured node labels provider script.\n", "des": "Package to encapsulate classes used to handle node labels and node attributes in NM."}
{"index": 3090, "repo": "spring-ws-core-4.0.5", "code": "package soap12;\n\npublic interface Soap12Body extends SoapBody; // Subinterface of SoapBody that exposes SOAP 1.2 functionality.\npublic interface Soap12Fault extends SoapFault; // Subinterface of SoapFault that exposes SOAP 1.2 functionality.\npublic interface Soap12Header extends SoapHeader; // Subinterface of SoapHeader that exposes SOAP 1.2 functionality.\n", "des": "Contains interfaces specific to SOAP 1.2."}
{"index": 3307, "repo": "opencms-core-15.0", "code": "package scheduler;\n\npackage scheduler.jobs; // Some predefined implementations for often used scheduled job tasks.\nInterface I_CmsScheduledJob; // Identifies a class that can be scheduled with the OpenCms scheduler.\nClass CmsScheduledJobInfo; // Describes a scheduled job for the OpenCms scheduler.\nClass CmsScheduleManager; // Manages the OpenCms scheduled jobs.\nClass CmsSchedulerThread; // A worker thread for the OpenCms scheduler.\nClass CmsSchedulerThreadPool; // Simple thread pool used for the Quartz scheduler in OpenCms.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsSchedulerException; // Describes errors that occur in the context of the OpenCms scheduler.\n", "des": "The OpenCms scheduler provides a facility to run jobs in a regular schedule, much like the \"cron\" faciltiy in UNIX systems."}
{"index": 2527, "repo": "spring-security-core-6.1.2", "code": "package dao;\n\npublic abstract class AbstractUserDetailsAuthenticationProvider extends Object implements AuthenticationProvider, org.springframework.beans.factory.InitializingBean, org.springframework.context.MessageSourceAware; // A base AuthenticationProvider that allows subclasses to override and work with UserDetails objects.\npublic class DaoAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider; // An AuthenticationProvider implementation that retrieves user details from a UserDetailsService.\n", "des": "An AuthenticationProvider which relies upon a data access object."}
{"index": 1152, "repo": "commons-math3-3.6.1", "code": "package dfp;\n\nInterface UnivariateDfpFunction; // as of 3.6, replaced with RealFieldUnivariateFunction\nClass BracketingNthOrderBrentSolverDFP; // as of 3.6 replaced with FieldBracketingNthOrderBrentSolver\nClass Dfp; // Decimal floating point library for Java\nClass DfpDec; // Subclass of Dfp which hides the radix-10000 artifacts of the superclass.\nClass DfpField; // Field for Decimal floating point instances.\nClass DfpMath; // Mathematical routines for use with Dfp.\nEnum DfpField.RoundingMode; // Enumerate for rounding modes.\n", "des": "Decimal floating point library for Java"}
{"index": 1175, "repo": "commons-math3-3.6.1", "code": "package evaluation;\n\nClass ClusterEvaluator<T extends Clusterable>; // Base class for cluster evaluation methods.\nClass SumOfClusterVariances<T extends Clusterable>; // Computes the sum of intra-cluster distance variances according to the formula:\n", "des": "Cluster evaluation methods."}
{"index": 544, "repo": "spring-mobile-device-1.1.5.RELEASE", "code": "package site;\n\nInterface SitePreferenceHandler; // Service interface for site preference management.\nInterface SitePreferenceRepository; // A strategy for storing a user's site preference.\nClass CookieSitePreferenceRepository; // SitePreferenceRepository implementation that stores user preference in a Cookie.\nClass SitePreferenceHandlerInterceptor; // A Spring MVC interceptor that, on preHandle, delegates to a SitePreferenceHandler to resolve the SitePreference of the user that originated the web request.\nClass SitePreferenceHandlerMethodArgumentResolver; // Spring MVC HandlerMethodArgumentResolver that resolves @Controller MethodParameters of type SitePreference to the value of the web request's current site preference attribute.\nClass SitePreferenceRequestFilter; // A Servlet 2.3 Filter that delegates to a SitePreferenceHandler to resolve the SitePreference of the user that originated the web request.\nClass SitePreferenceUtils; // Static helper for accessing request-scoped SitePreference values.\nClass SitePreferenceWebArgumentResolver; // Spring MVC WebArgumentResolver that resolves @Controller MethodParameters of type SitePreference to the value of the web request's current site preference attribute.\nClass StandardSitePreferenceHandler; // A helper that resolves the user's site preference and makes it available as a request attribute.\nEnum SitePreference; // Possible site preference values.\n", "des": "Ability for the user to specify whether they prefer the mobile or normal site."}
{"index": 311, "repo": "pdfbox-3.0.0-beta1", "code": "package util;\n\nClass DateConverter; // Converts dates to strings and back using the PDF date standard in section 3.8.2 of PDF Reference 1.7.\nClass Hex; // Utility functions for hex encoding.\nClass IterativeMergeSort; // This class provides an iterative (bottom-up) implementation of the MergeSort algorithm for any generic Java object which implements a Comparator.\nClass Matrix; // This class will be used for matrix manipulation.\nClass NumberFormatUtil; // This class contains methods to format numbers.\nClass SmallMap<K,V>; // Map implementation with a smallest possible memory usage.\nClass Vector; // A 2D vector.\nClass Version; // Exposes PDFBox version.\nClass XMLUtil; // This class with handle some simple XML operations.\n", "des": "This package contains utility classes that are used by the PDFBox project."}
{"index": 1064, "repo": "avro-1.11.2", "code": "package reflect;\n\nClass CustomEncoding<T>; // Expert: a custom encoder and decoder that writes an object directly to avro.\nClass DateAsLongEncoding; // This encoder/decoder writes a java.util.Date object as a long to avro and reads a Date object from long.\nClass MapEntry<K,V>; // Use org.apache.avro.util.MapEntry\nClass ReflectData; // Utilities to use existing Java classes and interfaces via reflection.\nClass ReflectData.AllowNull; // ReflectData implementation that permits null field values.\nClass ReflectDatumReader<T>; // DatumReader for existing classes via Java reflection.\nClass ReflectDatumWriter<T>; // DatumWriter for existing classes via Java reflection.\nClass ReflectionUtil; // A few utility methods for using @link{java.misc.Unsafe}, mostly for private use.\nAnnotation Type AvroAlias; // Adds the given name and space as an alias to the schema.\nAnnotation Type AvroAliases;\nAnnotation Type AvroDefault; // Specifies a default value for a field as a JSON string.\nAnnotation Type AvroDoc; // Sets the avrodoc for this java field.\nAnnotation Type AvroEncode; // Expert: Fields with this annotation are encoded using the given custom encoder.\nAnnotation Type AvroIgnore; // Marks a field as transient.\nAnnotation Type AvroMeta; // Adds the given key:Value pair as metadata into the schema, at the corresponding node.\nAnnotation Type AvroMeta.AvroMetas;\nAnnotation Type AvroName; // Sets the avroname for this java field.\nAnnotation Type AvroSchema; // Declares that a Java type should have a specified Avro schema, overriding the normally inferred schema.\nAnnotation Type Nullable; // Declares that null is a valid value for a Java type.\nAnnotation Type Stringable; // Declares that a class or field should be represented by an Avro string.\nAnnotation Type Union; // Declares that a Java type should be represented by an Avro union schema.\n", "des": "Use Java reflection to generate schemas and protocols for existing classes."}
{"index": 3565, "repo": "guava-32.1.1-jre", "code": "package xml;\n\nClass XmlEscapers; // Escaper instances suitable for strings to be included in XML attribute values and elements' text contents.\n", "des": "Escapers for XML."}
{"index": 3124, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package pagination;\n\nInterface LimitHandler; // Contract defining dialect-specific LIMIT clause handling.\nClass AbstractLimitHandler; // Default implementation of LimitHandler interface.\nClass CUBRIDLimitHandler; // Limit handler for CUBRID\nClass FirstLimitHandler;\nClass Informix10LimitHandler;\nClass LegacyFirstLimitHandler;\nClass LegacyLimitHandler; // Limit handler that delegates all operations to the underlying dialect.\nClass LimitHelper; // A helper for dealing with LimitHandler implementations\nClass NoopLimitHandler; // Handler not supporting query LIMIT clause.\nClass Oracle12LimitHandler; // A LimitHandler for databases which support the ANSI SQL standard syntax FETCH FIRST m ROWS ONLY and OFFSET n ROWS FETCH NEXT m ROWS ONLY.\nClass SQL2008StandardLimitHandler; // LIMIT clause handler compatible with ISO and ANSI SQL:2008 standard.\nClass SQLServer2005LimitHandler; // LIMIT clause handler compatible with SQL Server 2005 and later.\nClass SQLServer2012LimitHandler; // LIMIT clause handler compatible with SQL Server 2012 and later.\nClass SybaseASE157LimitHandler; // This limit handler is very conservative and is only triggered in simple cases involving a select or select distinct.\nClass TopLimitHandler;\n", "des": "Support for Dialect-specific pagination strategies"}
{"index": 1974, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package servlet;\n\n@AutoConfiguration(before={OAuth2ResourceServerAutoConfiguration.class,SecurityAutoConfiguration.class,UserDetailsServiceAutoConfiguration.class}) @ConditionalOnClass(org.springframework.security.oauth2.server.authorization.OAuth2Authorization.class) @ConditionalOnWebApplication(type=SERVLET) @Import({org.springframework.boot.autoconfigure.security.oauth2.server.servlet.OAuth2AuthorizationServerConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.server.servlet.OAuth2AuthorizationServerWebSecurityConfiguration.class}) public class OAuth2AuthorizationServerAutoConfiguration extends Object; // Auto-configuration for OAuth2 authorization server support.\n@AutoConfiguration(after=UserDetailsServiceAutoConfiguration.class) @ConditionalOnClass(org.springframework.security.oauth2.server.authorization.OAuth2Authorization.class) @ConditionalOnWebApplication(type=SERVLET) public class OAuth2AuthorizationServerJwtAutoConfiguration extends Object; // Auto-configuration for JWT support for endpoints of the OAuth2 authorization server that require it (e.g.\n@ConfigurationProperties(prefix=\"spring.security.oauth2.authorizationserver\") public class OAuth2AuthorizationServerProperties extends Object implements org.springframework.beans.factory.InitializingBean; // OAuth 2.0 Authorization Server properties.\npublic static class OAuth2AuthorizationServerProperties.Client extends Object; // A registered client of the Authorization Server.\npublic static class OAuth2AuthorizationServerProperties.Endpoint extends Object; // Authorization Server endpoints.\npublic static class OAuth2AuthorizationServerProperties.OidcEndpoint extends Object; // OpenID Connect 1.0 endpoints.\npublic static class OAuth2AuthorizationServerProperties.Registration extends Object; // Client registration information.\npublic static class OAuth2AuthorizationServerProperties.Token extends Object; // Token settings of the registered client.\n", "des": "Auto-configuration for Spring Security's OAuth2 authorization server."}
{"index": 464, "repo": "jackson-core-2.15.2", "code": "package async;\n\nInterface ByteArrayFeeder; // NonBlockingInputFeeder implementation used when feeding data as byte arrays.\nInterface ByteBufferFeeder; // NonBlockingInputFeeder implementation used when feeding data as ByteBuffer contents.\nInterface NonBlockingInputFeeder; // Interface used by non-blocking JsonParser implementations to feed input to parse.\n", "des": "Package that contains abstractions needed to support optional non-blocking decoding (parsing) functionality."}
{"index": 3804, "repo": "lucene-analysis-common-9.7.0", "code": "package no;\n\nClass NorwegianAnalyzer; // Analyzer for Norwegian.\nClass NorwegianLightStemFilter; // A TokenFilter that applies NorwegianLightStemmer to stem Norwegian words.\nClass NorwegianLightStemFilterFactory; // Factory for NorwegianLightStemFilter.\nClass NorwegianLightStemmer; // Light Stemmer for Norwegian.\nClass NorwegianMinimalStemFilter; // A TokenFilter that applies NorwegianMinimalStemmer to stem Norwegian words.\nClass NorwegianMinimalStemFilterFactory; // Factory for NorwegianMinimalStemFilter.\nClass NorwegianMinimalStemmer; // Minimal Stemmer for Norwegian BokmÃ¥l (no-nb) and Nynorsk (no-nn)\nClass NorwegianNormalizationFilter; // This filter normalize use of the interchangeable Scandinavian characters Ã¦Ã†Ã¤Ã„Ã¶Ã–Ã¸Ã˜ and folded variants (ae, oe, aa) by transforming them to Ã¥Ã…Ã¦Ã†Ã¸Ã˜.\nClass NorwegianNormalizationFilterFactory; // Factory for NorwegianNormalizationFilter.\n", "des": "Analyzer for Norwegian."}
{"index": 1069, "repo": "hadoop-yarn-common-3.3.6", "code": "package resource;\n\nClass PlacementConstraintTransformations; // This class contains inner classes that define transformation on a PlacementConstraint expression.\nClass PlacementConstraintTransformations.AbstractTransformer; // The default implementation of the PlacementConstraint.Visitor that does a traversal of the constraint tree, performing no action for the lead constraints.\nClass PlacementConstraintTransformations.SingleConstraintTransformer; // Visits a PlacementConstraint tree and substitutes each PlacementConstraint.TargetConstraint and PlacementConstraint.CardinalityConstraint with an equivalent PlacementConstraint.SingleConstraint.\nClass PlacementConstraintTransformations.SpecializedConstraintTransformer; // Visits a PlacementConstraint tree and, whenever possible, substitutes each PlacementConstraint.SingleConstraint with a PlacementConstraint.TargetConstraint.\n", "des": "API related to resources."}
{"index": 2961, "repo": "spring-integration-redis-6.1.2", "code": "package inbound;\n\npublic class ReactiveRedisStreamMessageProducer extends org.springframework.integration.endpoint.MessageProducerSupport; // A MessageProducerSupport for reading messages from a Redis Stream and publishing them into the provided output channel.\npublic class RedisInboundChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport;\n@ManagedResource @IntegrationManagedResource public class RedisQueueInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanClassLoaderAware;\n@ManagedResource @IntegrationManagedResource public class RedisQueueMessageDrivenEndpoint extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanClassLoaderAware;\npublic class RedisStoreMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<org.springframework.data.redis.support.collections.RedisStore>; // Inbound channel adapter which returns a Message representing a view into a Redis store.\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 2705, "repo": "spring-integration-ftp-6.1.2", "code": "package inbound;\n\npublic class FtpInboundFileSynchronizer extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<org.apache.commons.net.ftp.FTPFile>; // An implementation of AbstractInboundFileSynchronizer for FTP.\npublic class FtpInboundFileSynchronizingMessageSource extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizingMessageSource<org.apache.commons.net.ftp.FTPFile>; // A MessageSource implementation for FTP.\npublic class FtpStreamingMessageSource extends org.springframework.integration.file.remote.AbstractRemoteFileStreamingMessageSource<org.apache.commons.net.ftp.FTPFile>; // Message source for streaming FTP remote file contents.\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 126, "repo": "ignite-core-2.15.0", "code": "package noop;\n\nClass NoopMetricExporterSpi; // No-op implementation of metric exporter SPI.\n", "des": "Contains no-op implementation of MetricExporterSpi."}
{"index": 748, "repo": "ignite-indexing-2.15.0", "code": "package h2;\n\npackage h2.dml; // Contains routines for executing DML statements on top of H2.\nClass CommandProcessor; // Processor responsible for execution of all non-SELECT and non-DML commands.\nClass CommandResult; // Command execution result.\nClass ConcurrentStripedPool<E>; // Concurrent pool of object based on ConcurrentLinkedDeque.\nClass ConnectionManager; // H2 connection manager.\nClass DistributedSqlConfiguration; // Distributed configuration of the indexing module.\nClass DmlStatementsProcessor; // Contains entry processors for DML.\nClass DmlStatementsProcessor.EntryValueUpdater; // Entry value updater.\nClass DmlStatementsProcessor.InsertEntryProcessor;\nClass DmlStatementsProcessor.ModifyingEntryProcessor; // Entry processor invoked by UPDATE and DELETE operations.\nClass FunctionsManager; // SQL function manager.\nClass GridCacheTwoStepQuery; // Two step map-reduce style query.\nClass GridSubqueryJoinOptimizer;\nClass H2Connection; // Wrapper to store connection with currently used schema and statement cache.\nClass H2Cursor; // Cursor.\nClass H2FieldsIterator; // Special field set iterator based on database result set.\nClass H2PooledConnection; // Pooled connection wrapper to use close semantic to recycle connection (return to the pool).\nClass H2QueryFetchSizeInterceptor; // Print warning message to log when query result size fetch count is bigger then specified threshold.\nClass H2QueryInfo; // Base H2 query info with commons for MAP, LOCAL, REDUCE queries.\nClass H2ResultSetIterator<T>; // Iterator over result set.\nClass H2SchemaManager; // H2 schema manager.\nClass H2SqlFieldMetadata; // Field descriptor.\nClass H2StatementCache; // Statement cache.\nClass H2TableDescriptor; // Information about table in database.\nClass H2TableEngine; // H2 Table engine.\nClass H2TypeKey; // Key for types lookup.\nClass H2Utils; // H2 utility methods.\nClass H2Utils.Getter<T,R>; // Field getter.\nClass H2Utils.Setter<T,R>; // Field getter.\nClass H2Utils.ValueRuntimeSimpleObject<T>;\nClass IgniteH2Indexing; // Indexing implementation based on H2 database engine.\n", "des": "Contains default H2-based indexing SPI implementation."}
{"index": 606, "repo": "org.apache.karaf.main-2.4.4", "code": "package launch;\n\nInterface Framework; // A Framework instance.\nInterface FrameworkFactory; // A factory for creating Framework instances.\n", "des": "Framework Launch Package Version 1.1."}
{"index": 956, "repo": "spring-ws-3.0.10.RELEASE", "code": "package annotation;\n\nAnnotation Type Endpoint; // Indicates that an annotated class is an \"Endpoint\" (e.g.\nAnnotation Type Namespace; // Sets up a namespace to be used in an @Endpoint method, class, or package.\nAnnotation Type Namespaces; // Sets the namespaces to be used in an @Endpoint method, class, or package.\nAnnotation Type PayloadRoot; // Marks an endpoint method as the handler for an incoming request.\nAnnotation Type PayloadRoots; // Marks an endpoint method as containing multiple PayloadRoots.\nAnnotation Type RequestPayload; // Annotation which indicates that a method parameter should be bound to the request payload.\nAnnotation Type ResponsePayload; // Annotation which indicates that a method return value should be bound to the response payload.\nAnnotation Type XPathParam; // Indicates that a method parameter should be bound to an XPath expression.\n", "des": "JDK 1.5+ annotations for Spring-WS endpoints."}
{"index": 2943, "repo": "spring-security-config-6.1.2", "code": "package config;\n\npackage config.authentication; // Parsing of <authentication-manager> and related elements.\npackage config.http; // Parsing of the <http> namespace element.\npackage config.ldap; // Security namespace support for LDAP authentication.\npackage config.method; // Support for parsing of the <global-method-security> and <intercept-methods> elements.\npublic abstract class BeanIds extends Object; // Contains globally used default Bean IDs for beans created by the namespace support in Spring Security 2.\n@FunctionalInterface public interface Customizer<T>; // Callback interface that accepts a single input argument and returns no result.\npublic class DebugBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\npublic abstract class Elements extends Object; // Contains all the element names used by Spring Security 3 namespace support.\npublic final class SecurityNamespaceHandler extends Object implements org.springframework.beans.factory.xml.NamespaceHandler; // Parses elements from the \"security\" namespace (http://www.springframework.org/schema/security).\n", "des": "Support classes for the Spring Security namespace."}
{"index": 3438, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface LazyInitializable; // Hibernate \"wraps\" a java collection in an instance of PersistentCollection.\nInterface PersistentCollection; // Persistent collections are treated as value objects by Hibernate.\n", "des": "SPI definitions for persistent collections"}
{"index": 2244, "repo": "spring-data-keyvalue-3.1.2", "code": "package mapping;\n\npackage mapping.context; // Infrastructure for the Key-Value mapping context.\npublic enum AnnotationBasedKeySpaceResolver extends Enum<AnnotationBasedKeySpaceResolver> implements KeySpaceResolver; // AnnotationBasedKeySpaceResolver looks up Persistent and checks for presence of either meta or direct usage of KeySpace.\npublic class BasicKeyValuePersistentEntity<T,P extends KeyValuePersistentProperty<P>> extends BasicPersistentEntity<T,P> implements KeyValuePersistentEntity<T,P>; // KeyValuePersistentEntity implementation that adds specific meta-data such as the keySpace.\npublic enum ClassNameKeySpaceResolver extends Enum<ClassNameKeySpaceResolver> implements KeySpaceResolver; // Most trivial implementation of KeySpaceResolver returning the Class.getName().\npublic interface KeySpaceResolver; // KeySpaceResolver determines the keyspace a given type is assigned to.\npublic interface KeyValuePersistentEntity<T,P extends KeyValuePersistentProperty<P>> extends MutablePersistentEntity<T,P>;\npublic class KeyValuePersistentProperty<P extends KeyValuePersistentProperty<P>> extends AnnotationBasedPersistentProperty<P>; // Most trivial implementation of PersistentProperty.\npublic class PrefixKeyspaceResolver extends Object implements KeySpaceResolver; // KeySpaceResolver prefixing the keyspace with a static prefix after determining the keyspace from a delegate KeySpaceResolver.\n", "des": "Infrastructure for the Key-Value mapping subsystem and keyspace resolution."}
{"index": 3251, "repo": "opencms-core-15.0", "code": "package sitemap;\n\npackage sitemap.shared; // Shared Client-Server side of the sitemap view.\nClass ClientMessages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsAliasBulkEditHelper; // Helper class used by a service to edit or import aliases for a whole site.\nClass CmsAliasEditorLockTable; // A class used to keep track of which user is editing the alias table from which sites.\nClass CmsAliasImportResponseTable; // A class used for storing alias import results by key.\nClass CmsModelPageHelper; // Helper class for model page operations in the sitemap editor.\nClass CmsSitemapActionElement; // Sitemap action used to generate the sitemap editor.\nClass CmsSitemapAttributeUpdater; // Performs attribute changes in a sitemap configuration file CmsXmlContent instance.\nClass CmsSitemapNavPosCalculator; // Helper class for recalculating navigation positions when a user has changed the order of navigation entries in the sitemap editor.\nClass CmsSitemapSessionCache; // Sitemap session cache.\nClass CmsVfsSitemapService; // Handles all RPC services related to the vfs sitemap.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Server side of the sitemap view."}
{"index": 1082, "repo": "graal-sdk-1.0.0-rc7", "code": "package struct;\n\nClass SizeOf; // Contains static methods that provide access to the size of dereferenced SystemJava pointer types (i.e.\nAnnotation Type AllowNarrowingCast; // Allows a method annotated with CField to have a value type that is narrower (smaller number of bits) than the C type.\nAnnotation Type AllowWideningCast; // Allows a method annotated with CField to have a value type that is wider (larger number of bits) than the C type.\nAnnotation Type CBitfield; // Denotes a method as a bitfield access of a C struct.\nAnnotation Type CField; // Denotes a method as a field access of a C struct.\nAnnotation Type CFieldAddress; // Denotes a method as a field address computation of a C struct.\nAnnotation Type CFieldOffset; // Denotes a method as a field offset access of a C struct.\nAnnotation Type CPointerTo; // Denotes Java interface that imports a C pointer type.\nAnnotation Type CStruct; // Denotes Java interface that imports a C struct.\nAnnotation Type CTypedefOfInfo; // Informational only.\nAnnotation Type RawField; // Denotes a method as a field access of a structured C memory.\nAnnotation Type RawStructure; // Denotes Java interface that represents C memory, but without a C struct definition.\nAnnotation Type UniqueLocationIdentity; // A CField also annotated with this annotation gets a unique LocationIdentity assigned, i.e., reads and writes do not interfere with reads and writes to any other field and are optimized without regarding other fields.\n", "des": "This package provides parts of the Java / C interface that are related to C structures."}
{"index": 2676, "repo": "spring-r2dbc-6.0.11", "code": "package core;\n\npackage core.binding; // Classes providing an abstraction over SQL bind markers.\npublic class ColumnMapRowMapper extends Object implements BiFunction<Row,RowMetadata,Map<String,Object>>; // Mapping function implementation that creates a java.util.Map for each row, representing all columns as key-value pairs: one entry for each column, with the column name as key.\npublic interface ConnectionAccessor; // Interface declaring methods that accept callback Function to operate within the scope of a Connection.\npublic interface DatabaseClient extends ConnectionAccessor; // A non-blocking, reactive client for performing database calls with Reactive Streams back pressure.\npublic static interface DatabaseClient.Builder; // A mutable builder for creating a DatabaseClient.\npublic static interface DatabaseClient.GenericExecuteSpec; // Contract for specifying an SQL call along with options leading to the execution.\n@FunctionalInterface public interface ExecuteFunction; // Represents a function that executes a Statement for a (delayed) Result stream.\npublic interface FetchSpec<T> extends RowsFetchSpec<T>, UpdatedRowsFetchSpec; // Union type for fetching results.\n@Deprecated(since=\"6.0\") public final class Parameter extends Object;\npublic interface PreparedOperation<T> extends QueryOperation; // Extension to QueryOperation for a prepared SQL query Supplier with bound parameters.\n@FunctionalInterface public interface QueryOperation extends Supplier<String>; // Interface declaring a query operation that can be represented with a query string.\npublic interface RowsFetchSpec<T>; // Contract for fetching tabular results.\npublic interface SqlProvider; // Interface to be implemented by objects that can provide SQL strings.\n@FunctionalInterface public interface StatementFilterFunction; // Represents a function that filters an ExecuteFunction.\npublic interface UpdatedRowsFetchSpec; // Contract for fetching the number of affected rows.\n", "des": "Core domain types around DatabaseClient."}
{"index": 634, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package server;\n\npackage server.metrics; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage server.scheduler; // Utility classes used for Scheduling.\npackage server.service; // Package org.apache.hadoop.yarn.server.service contains service related classes.\npackage server.uam; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage server.webapp; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\nClass AMHeartbeatRequestHandler; // Extends Thread and provides an implementation that is used for processing the AM heart beat request asynchronously and sending back the response using the callback method registered with the system.\nClass AMHeartbeatRequestHandler.AsyncAllocateRequestInfo; // Data structure that encapsulates AllocateRequest and AsyncCallback instance.\nClass AMRMClientRelayer; // A component that sits in between AMRMClient(Impl) and Yarn RM.\nClass RMNMSecurityInfoClass;\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1626, "repo": "spring-kafka-3.0.9", "code": "package event;\n\npublic class ConsumerFailedToStartEvent extends KafkaEvent; // An event published when a consumer fails to start.\npublic class ConsumerPartitionPausedEvent extends KafkaEvent; // An event published when a consumer partition is paused.\npublic class ConsumerPartitionResumedEvent extends KafkaEvent; // An event published when a consumer partition is resumed.\npublic class ConsumerPausedEvent extends KafkaEvent; // An event published when a consumer is paused.\npublic class ConsumerResumedEvent extends KafkaEvent; // An event published when a consumer is resumed.\npublic class ConsumerRetryAuthEvent extends KafkaEvent; // An event published when authentication or authorization of a consumer fails and is being retried.\npublic static enum ConsumerRetryAuthEvent.Reason extends Enum<ConsumerRetryAuthEvent.Reason>; // Reasons for retrying auth a consumer.\npublic class ConsumerRetryAuthSuccessfulEvent extends KafkaEvent; // An event published when authentication or authorization has been retried successfully.\npublic class ConsumerStartedEvent extends KafkaEvent; // An event published when a consumer has started.\npublic class ConsumerStartingEvent extends KafkaEvent; // An event published when a consumer is initializing.\npublic class ConsumerStoppedEvent extends KafkaEvent; // An event published when a consumer is stopped.\npublic static enum ConsumerStoppedEvent.Reason extends Enum<ConsumerStoppedEvent.Reason>; // Reasons for stopping a consumer.\npublic class ConsumerStoppingEvent extends KafkaEvent; // An event published when a consumer is stopped.\npublic class ContainerStoppedEvent extends KafkaEvent; // An event published when a container is stopped.\npublic abstract class KafkaEvent extends org.springframework.context.ApplicationEvent; // Base class for events.\npublic class ListenerContainerIdleEvent extends KafkaEvent; // An event that is emitted when a container is idle if the container is configured to do so.\npublic class ListenerContainerNoLongerIdleEvent extends KafkaEvent; // An event that is emitted when a container is no longer idle if configured to publish idle events.\npublic class ListenerContainerPartitionIdleEvent extends KafkaEvent; // An event that is emitted when a container partition is idle if the container is configured to do so.\npublic class ListenerContainerPartitionNoLongerIdleEvent extends KafkaEvent; // An event that is emitted when a partition is no longer idle if configured to publish idle events.\n", "des": "Application Events."}
{"index": 2436, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package servlet;\n\n@ManagementContextConfiguration(proxyBeanMethods=false) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.springframework.web.servlet.DispatcherServlet.class) @ConditionalOnBean({org.springframework.web.servlet.DispatcherServlet.class,org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier.class}) @EnableConfigurationProperties(CorsEndpointProperties.class) public class WebMvcEndpointManagementContextConfiguration extends Object; // @ManagementContextConfiguration for Spring MVC @Endpoint concerns.\n", "des": "Auto-configuration for exposing actuator web endpoints using Spring MVC."}
{"index": 1067, "repo": "accumulo-client-mapreduce-2.0.0-alpha-1", "code": "package impl;\n\nClass ConfiguratorBase;\nClass DistributedCacheHelper;\nClass FileOutputConfigurator;\nClass InputConfigurator;\nClass MapReduceClientOnDefaultTable;\nClass MapReduceClientOnRequiredTable;\nClass MapReduceClientOpts; // Adds some MR awareness to the ClientOpts\nClass OutputConfigurator;\nEnum ConfiguratorBase.ClientOpts;\nEnum ConfiguratorBase.ConnectorInfo; // Specifies that connection info was configured\nEnum ConfiguratorBase.GeneralOpts; // Configuration keys for general configuration options.\nEnum FileOutputConfigurator.Opts; // Configuration keys for AccumuloConfiguration.\nEnum InputConfigurator.Features; // Configuration keys for various features.\nEnum InputConfigurator.ScanOpts; // Configuration keys for Scanner.\nEnum OutputConfigurator.Features; // Configuration keys for various features.\nEnum OutputConfigurator.WriteOpts; // Configuration keys for BatchWriter.\n", "des": "This package exists to store common helpers for configuring MapReduce jobs in a single location."}
{"index": 752, "repo": "artemis-odb-2.3.0", "code": "package managers;\n\nClass GroupManager; // If you need to group your entities together, e.g tanks going into \"units\" group or explosions into \"effects\", then use this manager.\nClass PlayerManager; // You may sometimes want to specify to which player an entity belongs to.\nClass TagManager; // If you need to tag any entity, use this.\nClass TeamManager; // Use this class together with PlayerManager.\nClass UuidEntityManager;\n", "des": "Manager implementations."}
{"index": 2345, "repo": "spring-boot-3.1.1", "code": "package jetty;\n\npublic interface ConfigurableJettyWebServerFactory extends ConfigurableWebServerFactory; // ConfigurableWebServerFactory for Jetty-specific features.\npublic class JettyReactiveWebServerFactory extends AbstractReactiveWebServerFactory implements ConfigurableJettyWebServerFactory; // ReactiveWebServerFactory that can be used to create JettyWebServers.\n@FunctionalInterface public interface JettyServerCustomizer; // Callback interface that can be used to customize a Jetty Server.\npublic class JettyServletWebServerFactory extends AbstractServletWebServerFactory implements ConfigurableJettyWebServerFactory, org.springframework.context.ResourceLoaderAware; // ServletWebServerFactory that can be used to create a JettyWebServer.\npublic class JettyWebServer extends Object implements WebServer; // WebServer that can be used to control a Jetty web server.\npublic class ServletContextInitializerConfiguration extends org.eclipse.jetty.webapp.AbstractConfiguration; // Jetty Configuration that calls ServletContextInitializers.\n", "des": "Embedded reactive and servlet web server implementations backed by Jetty."}
{"index": 1415, "repo": "spring-boot-actuator-3.1.1", "code": "package data;\n\npublic class DefaultRepositoryTagsProvider extends Object implements RepositoryTagsProvider; // Default RepositoryTagsProvider implementation.\npublic class MetricsRepositoryMethodInvocationListener extends Object implements org.springframework.data.repository.core.support.RepositoryMethodInvocationListener; // Intercepts Spring Data Repository invocations and records metrics about execution time and results.\n@FunctionalInterface public interface RepositoryTagsProvider; // Provides Tags for Spring Data Repository invocations.\n", "des": "Actuator support for Spring Data Repository metrics."}
{"index": 3010, "repo": "spring-web-6.0.11", "code": "package json;\n\npublic abstract class AbstractJackson2HttpMessageConverter extends AbstractGenericHttpMessageConverter<Object>; // Abstract base class for Jackson based and content type independent HttpMessageConverter implementations.\npublic abstract class AbstractJsonHttpMessageConverter extends AbstractGenericHttpMessageConverter<Object>; // Common base class for plain JSON converters, e.g.\npublic abstract class GsonBuilderUtils extends Object; // A simple utility class for obtaining a Google Gson 2.x GsonBuilder which Base64-encodes byte[] properties when reading and writing JSON.\npublic class GsonFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<com.google.gson.Gson>, org.springframework.beans.factory.InitializingBean; // A FactoryBean for creating a Google Gson 2.x Gson instance.\npublic class GsonHttpMessageConverter extends AbstractJsonHttpMessageConverter; // Implementation of HttpMessageConverter that can read and write JSON using the Google Gson library.\npublic class Jackson2ObjectMapperBuilder extends Object; // A builder used to create ObjectMapper instances with a fluent API.\npublic class Jackson2ObjectMapperFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ObjectMapper>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // A FactoryBean for creating a Jackson 2.x ObjectMapper (default) or XmlMapper (createXmlMapper property set to true) with setters to enable or disable Jackson features from within XML configuration.\npublic class JsonbHttpMessageConverter extends AbstractJsonHttpMessageConverter; // Implementation of HttpMessageConverter that can read and write JSON using the JSON Binding API.\npublic class KotlinSerializationJsonHttpMessageConverter extends KotlinSerializationStringHttpMessageConverter<kotlinx.serialization.json.Json>; // Implementation of HttpMessageConverter that can read and write JSON using kotlinx.serialization.\npublic class MappingJackson2HttpMessageConverter extends AbstractJackson2HttpMessageConverter; // Implementation of HttpMessageConverter that can read and write JSON using Jackson 2.x's ObjectMapper.\n", "des": "Provides HttpMessageConverter implementations for handling JSON."}
{"index": 1451, "repo": "spring-data-redis-3.1.2", "code": "package core;\n\npackage core.convert; // Converters for Redis repository support utilizing mapping metadata.\npackage core.index; // Abstractions for Redis secondary indexes.\npackage core.mapping; // Redis specific repository support mapping meta information.\npackage core.query; // Query package for Redis template.\npackage core.script; // Lua script execution abstraction.\npackage core.types; // Redis domain specific types.\npublic interface BoundGeoOperations<K,M> extends BoundKeyOperations<K>; // GeoOperations bound to a certain key.\npublic interface BoundHashOperations<H,HK,HV> extends BoundKeyOperations<H>; // Hash operations bound to a certain key.\npublic interface BoundKeyOperations<K>; // Operations over a Redis key.\npublic interface BoundListOperations<K,V> extends BoundKeyOperations<K>; // List operations bound to a certain key.\npublic interface BoundSetOperations<K,V> extends BoundKeyOperations<K>; // Set operations bound to a certain key.\npublic interface BoundStreamOperations<K,HK,HV>; // Redis stream specific operations bound to a certain key.\npublic interface BoundValueOperations<K,V> extends BoundKeyOperations<K>; // Value (or String in Redis terminology) operations bound to a certain key.\npublic interface BoundZSetOperations<K,V> extends BoundKeyOperations<K>; // ZSet (or SortedSet) operations bound to a certain key.\npublic interface BulkMapper<T,V>; // Mapper translating Redis bulk value responses (typically returned by a sort query) to actual objects.\npublic interface ClusterOperations<K,V>; // Redis operations for cluster specific operations.\npublic class ConvertingCursor<S,T> extends Object implements Cursor<T>; // ConvertingCursor wraps a given cursor and applies given Converter to items prior to returning them.\npublic interface Cursor<T> extends CloseableIterator<T>; // Cursor abstraction to scan over the keyspace or elements within a data structure using a variant of a SCAN command.\npublic class DefaultTypedTuple<V> extends Object implements ZSetOperations.TypedTuple<V>; // Default implementation of TypedTuple.\npublic interface GeoOperations<K,M>; // Redis operations for geo commands.\n", "des": "Core package for integrating Redis with Spring concepts."}
{"index": 2001, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package reactive;\n\npublic class JettyWebSocketReactiveWebServerCustomizer extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory>, org.springframework.core.Ordered; // WebSocket customizer for JettyReactiveWebServerFactory.\npublic class TomcatWebSocketReactiveWebServerCustomizer extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory>, org.springframework.core.Ordered; // WebSocket customizer for TomcatReactiveWebServerFactory.\n@AutoConfiguration(before=ReactiveWebServerFactoryAutoConfiguration.class) @ConditionalOnClass({jakarta.servlet.Servlet.class,jakarta.websocket.server.ServerContainer.class}) @ConditionalOnWebApplication(type=REACTIVE) public class WebSocketReactiveAutoConfiguration extends Object; // Auto-configuration for WebSocket reactive server in Tomcat, Jetty or Undertow.\n", "des": "Auto-configuration for WebSocket support in reactive web servers."}
{"index": 1443, "repo": "spring-data-redis-3.1.2", "code": "package cache;\n\npublic abstract class BatchStrategies extends Object; // A collection of predefined BatchStrategy implementations using KEYS or SCAN command.\npublic interface BatchStrategy; // A BatchStrategy to be used with RedisCacheWriter.\n@FunctionalInterface public interface CacheKeyPrefix; // CacheKeyPrefix is a callback hook for creating custom prefixes prepended to the actual key stored in Redis.\npublic interface CacheStatistics; // Cache statistics for a RedisCache.\npublic interface CacheStatisticsCollector extends CacheStatisticsProvider; // The statistics collector supports capturing of relevant RedisCache operations such as hits & misses.\npublic interface CacheStatisticsProvider; // Interface to be implemented by objects that expose CacheStatistics identified by cacheName.\npublic class RedisCache extends AbstractValueAdaptingCache; // Cache implementation using for Redis as the underlying store for cache data.\npublic class RedisCacheConfiguration extends Object; // Immutable RedisCacheConfiguration used to customize RedisCache behaviour, such as caching null values, computing cache key prefixes and handling binary serialization.\npublic class RedisCacheManager extends AbstractTransactionSupportingCacheManager; // CacheManager backed by a RedisCache.\npublic static class RedisCacheManager.RedisCacheManagerBuilder extends Object; // Builder for creating a RedisCacheManager.\npublic interface RedisCacheWriter extends CacheStatisticsProvider; // RedisCacheWriter provides low level access to Redis commands (SET, SETNX, GET, EXPIRE,...) used for caching.\n", "des": "Package providing a Redis implementation for Spring cache abstraction."}
{"index": 1514, "repo": "spring-context-6.0.11", "code": "package index;\n\npublic class CandidateComponentsIndex extends Object; // Provide access to the candidates that are defined in META-INF/spring.components.\npublic final class CandidateComponentsIndexLoader extends Object; // Candidate components index loading mechanism for internal use within the framework.\n", "des": "Support package for reading and managing the components index."}
{"index": 82, "repo": "ignite-core-2.15.0", "code": "package weightedrandom;\n\nInterface WeightedRandomLoadBalancingSpiMBean; // Management MBean for WeightedRandomLoadBalancingSpi SPI.\nClass WeightedRandomLoadBalancingSpi; // Load balancing SPI that picks a random node for job execution.\n", "des": "Contains weighted random-base implementation for load balancing SPI."}
{"index": 2481, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package redis;\n\n@AutoConfiguration(before=org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration.class, after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass({io.lettuce.core.RedisClient.class,io.lettuce.core.metrics.MicrometerCommandLatencyRecorder.class}) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class LettuceMetricsAutoConfiguration extends Object; // Auto-configuration for Lettuce metrics.\n", "des": "Auto-configuration for Redis metrics."}
{"index": 1264, "repo": "spring-core-6.0.11", "code": "package reflect;\n\npublic abstract class ConstructorDelegate extends Object;\npublic static class ConstructorDelegate.Generator extends AbstractClassGenerator;\npublic abstract class FastClass extends Object;\npublic static class FastClass.Generator extends AbstractClassGenerator;\npublic class FastConstructor extends FastMember;\npublic abstract class FastMember extends Object;\npublic class FastMethod extends FastMember;\npublic abstract class MethodDelegate extends Object; // DOCUMENTATION FROM APACHE AVALON DELEGATE CLASS\npublic static class MethodDelegate.Generator extends AbstractClassGenerator;\npublic abstract class MulticastDelegate extends Object implements Cloneable;\npublic static class MulticastDelegate.Generator extends AbstractClassGenerator;\n", "des": "Spring's repackaging of the CGLIB reflect package (for internal use only)."}
{"index": 2254, "repo": "spring-batch-test-5.0.2", "code": "package context;\n\npublic class BatchTestContextBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor; // BeanPostProcessor implementation that injects a job bean into JobLauncherTestUtils if there is a unique job bean.\npublic class BatchTestContextCustomizer extends Object implements org.springframework.test.context.ContextCustomizer; // ContextCustomizer implementation that adds batch test utility classes (JobLauncherTestUtils and JobRepositoryTestUtils) as beans in the test context.\npublic class BatchTestContextCustomizerFactory extends Object implements org.springframework.test.context.ContextCustomizerFactory; // Factory for BatchTestContextCustomizer.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @TestExecutionListeners(listeners={StepScopeTestExecutionListener.class,JobScopeTestExecutionListener.class}, mergeMode=MERGE_WITH_DEFAULTS) @ExtendWith(org.springframework.test.context.junit.jupiter.SpringExtension.class) public @interface SpringBatchTest; // Annotation that can be specified on a test class that runs Spring Batch based tests.\n", "des": "APIs for the configuration of Spring Batch test support."}
{"index": 900, "repo": "commons-jcs3-core-3.1", "code": "package lru;\n\nClass LHMLRUMemoryCache<K,V>; // This is a test memory manager using the jdk1.4 LinkedHashMap.\nClass LRUMemoryCache<K,V>; // A fast reference management system.\n", "des": "The primary memory plugin using a 'least recently used' removal policy."}
{"index": 2439, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package hazelcast;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration.class) @ConditionalOnClass(com.hazelcast.core.HazelcastInstance.class) @ConditionalOnBean(com.hazelcast.core.HazelcastInstance.class) @ConditionalOnEnabledHealthIndicator(\"hazelcast\") public class HazelcastHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.hazelcast.HazelcastHealthIndicator,com.hazelcast.core.HazelcastInstance>; // Auto-configuration for HazelcastHealthIndicator.\n", "des": "Auto-configuration for actuator Hazelcast concerns."}
{"index": 1675, "repo": "spring-boot-cli-3.1.1", "code": "package util;\n\npublic abstract class Log extends Object; // Simple logger used by the CLI.\n", "des": "Utility classes for the CLI."}
{"index": 1794, "repo": "spring-integration-file-6.1.2", "code": "package support;\n\npublic enum FileExistsMode extends Enum<FileExistsMode>; // When writing file, this enumeration indicates what action shall be taken in case the destination file already exists.\npublic final class FileUtils extends Object; // Utilities for operations on Files.\n", "des": "Provides various support classes used across Spring Integration File Components."}
{"index": 2358, "repo": "spring-boot-3.1.1", "code": "package context;\n\npublic class AnnotationConfigServletWebApplicationContext extends org.springframework.web.context.support.GenericWebApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry; // GenericWebApplicationContextthat accepts annotated classes as input - in particular @Configuration-annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations.\npublic class AnnotationConfigServletWebServerApplicationContext extends ServletWebServerApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry; // ServletWebServerApplicationContext that accepts annotated classes as input - in particular @Configuration -annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations.\npublic class ServletWebServerApplicationContext extends org.springframework.web.context.support.GenericWebApplicationContext implements ConfigurableWebServerApplicationContext; // A WebApplicationContext that can be used to bootstrap itself from a contained ServletWebServerFactory bean.\npublic static class ServletWebServerApplicationContext.ExistingWebApplicationScopes extends Object; // Utility class to store and restore any user defined scopes.\npublic class ServletWebServerInitializedEvent extends WebServerInitializedEvent; // Event to be published after the WebServer is ready.\npublic class WebApplicationContextServletContextAwareProcessor extends org.springframework.web.context.support.ServletContextAwareProcessor; // Variant of ServletContextAwareProcessor for use with a ConfigurableWebApplicationContext.\npublic class XmlServletWebServerApplicationContext extends ServletWebServerApplicationContext; // ServletWebServerApplicationContext which takes its configuration from XML documents, understood by an XmlBeanDefinitionReader.\n", "des": "Servlet based web integrations with Spring's WebApplicationContext."}
{"index": 2615, "repo": "wicket-util-10.0.0-M1", "code": "package interpolator;\n\npublic class MapVariableInterpolator extends VariableInterpolator; // Interpolates variables into a String from a Map.\npublic final class SystemVariableInterpolator extends MapVariableInterpolator; // Convenient way of interpolating system properties.\npublic abstract class VariableInterpolator extends Object implements IClusterable; // Base class for variable interpolators.\n", "des": "Support for String-variable interpolation."}
{"index": 3646, "repo": "solr-core-9.3.0", "code": "package impl;\n\nClass AttributeFetcherImpl; // Implementation of AttributeFetcher that uses SolrCloudManager to access Solr cluster details.\nClass AttributeValuesImpl; // Implementation of AttributeValues used by AttributeFetcherImpl.\nClass BalancePlanFactoryImpl; // Simple implementation of BalancePlanFactory.\nClass BalanceRequestImpl;\nClass CollectionMetricsBuilder; // Builder class for constructing instances of CollectionMetrics.\nClass CollectionMetricsBuilder.ReplicaMetricsBuilder;\nClass CollectionMetricsBuilder.ShardMetricsBuilder;\nClass DelegatingPlacementPluginFactory; // Helper class to support dynamic reloading of plugin implementations.\nClass MetricImpl<T>; // Base class for Metric implementations.\nClass ModificationRequestImpl; // Helper class to create modification request instances.\nClass NodeMetricImpl<T>; // Node metric identifier, corresponding to a node-level metric registry and the internal metric name.\nClass PlacementPlanFactoryImpl; // Simple implementation of PlacementPlanFactory.\nClass PlacementPluginAssignStrategy; // This assign strategy delegates placement computation to \"plugin\" code.\nClass PlacementPluginFactoryLoader; // Utility class to load the configured PlacementPluginFactory plugin and then keep it up to date as the plugin configuration changes.\nClass PlacementRequestImpl;\nClass ReplicaMetricImpl<T>; // Replica metric identifier, corresponding to one of the internal replica-level metric names (as reported in solr.core.[collection].[replica] registry)\nClass SimplePlacementContextImpl; // Implementation of PlacementContext that uses SimpleClusterAbstractionsImpl to create components necessary for the placement plugins to use.\n", "des": "Implementation classes (not visible to plugins, subject to change at any time) for the interfaces in org.apache.solr.cluster.placement and to make them work with the rest of Solr."}
{"index": 1304, "repo": "groovy-all-4.0.13", "code": "package plugin;\n\npublic class JUnit5Runner extends Object implements GroovyRunner; // Integration code for running JUnit5 tests in Groovy.\n", "des": "Classes to support running JUnit5 tests as scripts."}
{"index": 3754, "repo": "lucene-facet-9.7.0", "code": "package facetset;\n\nInterface FacetSetDecoder; // A functional interface for decoding facet set values into comparable `long` ones.\nClass DimRange; // Defines a single range in a FacetSet dimension.\nClass DoubleFacetSet; // A FacetSet which encodes double dimension values.\nClass ExactFacetSetMatcher; // A FacetSetMatcher which considers a set as a match only if all dimension values are equal to the given one.\nClass FacetSet; // Holds a set of facet dimension values.\nClass FacetSetMatcher; // Matches the encoded FacetSet that was indexed in FacetSetsField.\nClass FacetSetsField; // A BinaryDocValuesField which encodes a list of facet sets.\nClass FloatFacetSet; // A FacetSet which encodes float dimension values.\nClass IntFacetSet; // A FacetSet which encodes integer dimension values.\nClass LongFacetSet; // A FacetSet which encodes long dimension values.\nClass MatchingFacetSetsCounts; // Returns the counts for each given FacetSet\nClass RangeFacetSetMatcher; // A FacetSetMatcher which considers a set as a match if all dimensions fall within the given corresponding range.\n", "des": "Provides FacetSets faceting capabilities which allows users to facet on high dimensional field values."}
{"index": 1558, "repo": "spring-restdocs-core-3.0.0", "code": "package restdocs;\n\npackage restdocs.cli; // Documenting CLI commands required to make a request to a RESTful API.\npackage restdocs.config; // Classes for configuring Spring REST Docs.\npackage restdocs.constraints; // Documenting a RESTful API's constraints.\npackage restdocs.cookies; // Documenting the cookies of a RESTful API's requests and responses.\npackage restdocs.generate; // Classes that drive the generation of the documentation snippets.\npackage restdocs.headers; // Documenting the headers of a RESTful API's requests and responses.\npackage restdocs.http; // Documenting the HTTP request sent to a RESTful API and the HTTP response that is returned.\npackage restdocs.hypermedia; // Documenting a RESTful API that uses hypermedia.\npackage restdocs.operation; // Operation API that describes a request that was sent and the response that was received when calling a RESTful API.\npackage restdocs.payload; // Documenting the payload of a RESTful API's requests and responses.\npackage restdocs.request; // Documenting query and path parameters of requests sent to a RESTful API.\npackage restdocs.snippet; // Snippet generation.\npackage restdocs.templates; // Template API used to render documentation snippets.\npublic class JUnitRestDocumentation extends Object implements RestDocumentationContextProvider, org.junit.rules.TestRule; // A JUnit TestRule used to automatically manage the RestDocumentationContext.\npublic final class ManualRestDocumentation extends Object implements RestDocumentationContextProvider; // ManualRestDocumentation is used to manually manage the RestDocumentationContext.\npublic interface RestDocumentationContext; // RestDocumentationContext encapsulates the context in which the documentation of a RESTful API is being performed.\npublic interface RestDocumentationContextProvider; // A RestDocumentationContextProvider is used to provide access to the RestDocumentationContext.\npublic class RestDocumentationExtension extends Object implements org.junit.jupiter.api.extension.BeforeEachCallback, org.junit.jupiter.api.extension.AfterEachCallback, org.junit.jupiter.api.extension.ParameterResolver; // A JUnit Jupiter Extension used to automatically manage the RestDocumentationContext.\n", "des": "Core Spring REST Docs classes."}
{"index": 1975, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package reactive;\n\npublic final class PathRequest extends Object; // Factory that can be used to create a ServerWebExchangeMatcher for commonly used paths.\n@AutoConfiguration @EnableConfigurationProperties(SecurityProperties.class) @ConditionalOnClass({reactor.core.publisher.Flux.class,org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity.class,org.springframework.security.web.server.WebFilterChainProxy.class,org.springframework.web.reactive.config.WebFluxConfigurer.class}) public class ReactiveSecurityAutoConfiguration extends Object; // Auto-configuration for Spring Security in a reactive application.\n@AutoConfiguration(after=RSocketMessagingAutoConfiguration.class) @ConditionalOnClass(org.springframework.security.authentication.ReactiveAuthenticationManager.class) @ConditionalOnMissingBean(value={org.springframework.security.authentication.ReactiveAuthenticationManager.class,org.springframework.security.core.userdetails.ReactiveUserDetailsService.class,org.springframework.security.authentication.ReactiveAuthenticationManagerResolver.class}, type={\"org.springframework.security.oauth2.jwt.ReactiveJwtDecoder\",\"org.springframework.security.oauth2.server.resource.introspection.ReactiveOpaqueTokenIntrospector\"}) @Conditional(org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration.ReactiveUserDetailsServiceCondition.class) @EnableConfigurationProperties(SecurityProperties.class) public class ReactiveUserDetailsServiceAutoConfiguration extends Object; // Default user @Configuration for a reactive web application.\npublic final class StaticResourceRequest extends Object; // Used to create a ServerWebExchangeMatcher for static resources in commonly used locations.\npublic static final class StaticResourceRequest.StaticResourceServerWebExchange extends Object implements org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher; // The server web exchange matcher used to match against resource locations.\n", "des": "Auto-configuration for reactive Spring Security."}
{"index": 1587, "repo": "spring-websocket-6.0.11", "code": "package jetty;\n\n@WebSocket public class JettyWebSocketHandlerAdapter extends Object; // Adapts WebSocketHandler to the Jetty 9 WebSocket API.\npublic class JettyWebSocketSession extends AbstractWebSocketSession<org.eclipse.jetty.websocket.api.Session>; // A WebSocketSession for use with the Jetty 9.4 WebSocket API.\npublic class WebSocketToJettyExtensionConfigAdapter extends org.eclipse.jetty.websocket.common.JettyExtensionConfig; // Adapter class to convert a WebSocketExtension to a Jetty ExtensionConfig.\n", "des": "Adapter classes for the Jetty WebSocket API."}
{"index": 649, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package records;\n\nClass AddApplicationHomeSubClusterRequest; // The request sent by the Router to Federation state store to map the home subcluster of a newly submitted application.\nClass AddApplicationHomeSubClusterResponse; // AddApplicationHomeSubClusterResponse contains the answer from the FederationApplicationHomeSubClusterStore to a request to insert a newly generated applicationId and its owner.\nClass ApplicationHomeSubCluster; // ApplicationHomeSubCluster is a report of the runtime information of the application that is running in the federated cluster.\nClass DeleteApplicationHomeSubClusterRequest; // The request to Federation state store to delete the mapping of home subcluster of a submitted application.\nClass DeleteApplicationHomeSubClusterResponse; // DeleteApplicationHomeSubClusterResponse contains the answer from the FederationApplicationHomeSubClusterStore to a request to delete the mapping of home subcluster of a submitted application.\nClass GetApplicationHomeSubClusterRequest; // Request class to obtain the home sub-cluster for the specified ApplicationId.\nClass GetApplicationHomeSubClusterResponse; // The response sent by Federation state store to a query for the home subcluster of a newly submitted application.\nClass GetApplicationsHomeSubClusterRequest; // Request class to obtain the home sub-cluster mapping of all active applications.\nClass GetApplicationsHomeSubClusterResponse; // The response sent by Federation state store to a query for the home subcluster of all submitted applications.\nClass GetSubClusterInfoRequest; // Request class to obtain information about a sub-cluster identified by its SubClusterId.\nClass GetSubClusterInfoResponse; // Response to a query with SubClusterInfo about a sub-cluster.\nClass GetSubClusterPoliciesConfigurationsRequest; // GetSubClusterPoliciesConfigurationsRequest is a request to the FederationPolicyStore to obtain all policy configurations.\nClass GetSubClusterPoliciesConfigurationsResponse; // GetSubClusterPolicyConfigurationResponse contains the answer from the FederationPolicyStore to a request to get all the policies configured in the system via a SubClusterPolicyConfiguration.\nClass GetSubClusterPolicyConfigurationRequest; // GetSubClusterPolicyConfigurationRequest is a request to the FederationPolicyStore to get the configuration of a policy for a given queue.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 72, "repo": "ignite-core-2.15.0", "code": "package collision;\n\npackage collision.fifoqueue; // Contains FIFO based collision SPI implementation.\npackage collision.jobstealing; // Contains job stealing collision SPI implementation.\npackage collision.noop; // Contains default no-op collision SPI implementation.\npackage collision.priorityqueue; // Contains priority based collision SPI implementation.\nInterface CollisionContext; // Context for resolving collisions.\nInterface CollisionExternalListener; // Listener to be set on CollisionSpi for notification of external collision events (e.g. job stealing).\nInterface CollisionJobContext; // This interface defines set of operations that collision SPI implementation can perform on jobs that are either waiting or executing.\nInterface CollisionSpi; // Collision SPI allows to regulate how grid jobs get executed when they arrive on a destination node for execution.\n", "des": "Contains APIs for collision SPI."}
{"index": 127, "repo": "ignite-core-2.15.0", "code": "package systemview;\n\npackage systemview.view; // Contains SystemView clases that exists in Ignite.\nInterface ReadOnlySystemViewRegistry; // Read only system view registry.\nInterface SystemViewExporterSpi; // Exporter of system view to the external recepient.\n", "des": "Contains common classes and interfaces for system view SPI implementations."}
{"index": 2988, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "package access;\n\npublic final class BearerTokenAccessDeniedHandler extends Object implements org.springframework.security.web.access.AccessDeniedHandler; // Translates any AccessDeniedException into an HTTP response in accordance with RFC 6750 Section 3: The WWW-Authenticate.\n", "des": "OAuth 2.0 Resource Server access denial classes and interfaces."}
{"index": 1083, "repo": "graal-sdk-1.0.0-rc7", "code": "package type;\n\nInterface CCharPointer; // A pointer to a 8-bit C primitive value.\nInterface CCharPointerPointer; // A pointer to a pointer to a 8-bit C primitive value.\nInterface CDoublePointer; // A pointer to a C primitive 'double' value.\nInterface CFloatPointer; // A pointer to a C primitive 'float' value.\nInterface CIntPointer; // A pointer to a 32-bit C primitive value.\nInterface CIntPointerPointer; // A pointer to a pointer to a 32-bit C primitive value.\nInterface CLongPointer; // A pointer to a 64-bit C primitive value.\nInterface CShortPointer; // A pointer to a 16-bit C primitive value.\nInterface CTypeConversion.CCharPointerHolder; // An auto-closable that holds a Java CharSequence as a null-terminated C char[] array.\nInterface VoidPointer; // A void* pointer to an opaque C value of an unknown type, without any methods to read or write.\nInterface WordPointer; // A untyped C pointer to any machine-word-sized value, e.g., a pointer to another pointer or a pointer to a UnsignedWord or SignedWord value.\nClass CTypeConversion; // Utility methods to convert between Java types and C types.\nClass CTypeConversion.CCharPointerPointerHolder; // An auto-closable that holds a Java CharSequence[] array as a null-terminated array of null-terminated C char[]s.\n", "des": "This package provides parts of the Java / C interface that are related to standard C pointer types, as well as utility functions to convert between Java types and C types."}
{"index": 2033, "repo": "spring-messaging-6.0.11", "code": "package annotation;\n\npackage annotation.support; // Support classes for working with annotated RSocket stream handling methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ConnectMapping; // Annotation to map the initial ConnectionSetupPayload and subsequent metadata pushes onto a handler method.\n", "des": "Annotations and support classes for handling RSocket streams."}
{"index": 3084, "repo": "spring-ws-core-4.0.5", "code": "package server;\n\npackage server.endpoint; // Provides EndpointAdapter, EndpointMapping, and EndpointExceptionResolver implementations for SOAP.\npublic interface SmartSoapEndpointInterceptor extends SmartEndpointInterceptor, SoapEndpointInterceptor; // SOAP-specific extension of the SmartEndpointInterceptor interface.\npublic interface SoapEndpointInterceptor extends EndpointInterceptor; // SOAP-specific extension of the EndpointInterceptor interface.\npublic class SoapEndpointInvocationChain extends EndpointInvocationChain; // SOAP-specific subclass of the EndpointInvocationChain.\npublic interface SoapEndpointMapping extends EndpointMapping; // SOAP-specific sub-interface of the EndpointMapping.\npublic class SoapMessageDispatcher extends MessageDispatcher; // SOAP-specific subclass of the MessageDispatcher.\n", "des": "Contains classes for SOAP-specific server-side Spring-WS support."}
{"index": 3809, "repo": "lucene-analysis-common-9.7.0", "code": "package query;\n\nClass QueryAutoStopWordAnalyzer; // An Analyzer used primarily at query time to wrap another analyzer and provide a layer of protection which prevents very common words from being passed into queries.\n", "des": "Automatically filter high-frequency stopwords."}
{"index": 2903, "repo": "spring-aspects-6.0.11", "code": "package aspectj;\n\npublic interface ConfigurableObject; // Marker interface for domain objects that need DI through aspects.\n", "des": "AspectJ-based dependency injection support."}
{"index": 1636, "repo": "spring-kafka-3.0.9", "code": "package converter;\n\npublic interface BatchMessageConverter extends MessageConverter; // A Kafka-specific Message converter strategy.\npublic class BatchMessagingMessageConverter extends Object implements BatchMessageConverter; // A Messaging MessageConverter implementation used with a batch message listener; the consumer record values are extracted into a collection in the message payload.\npublic class ByteArrayJsonMessageConverter extends JsonMessageConverter; // JSON Message converter - byte[] on output, String, Bytes, or byte[] on input.\npublic class BytesJsonMessageConverter extends JsonMessageConverter; // JSON Message converter - Bytes on output, String, Bytes, or byte[] on input.\npublic class ConversionException extends KafkaException; // Exception for conversions.\npublic class JsonMessageConverter extends MessagingMessageConverter; // Base class for JSON message converters; on the consumer side, it can handle byte[], Bytes and String record values.\npublic class KafkaMessageHeaders extends org.springframework.messaging.MessageHeaders; // Overload of message headers configurable for adding id and timestamp headers.\npublic class MappingJacksonParameterizedConverter extends org.springframework.messaging.converter.MappingJackson2MessageConverter; // Subclass of MappingJackson2MessageConverter that can handle parameterized (generic) types.\npublic interface MessageConverter; // A top level interface for message converters.\npublic class MessagingMessageConverter extends Object implements RecordMessageConverter; // A Messaging MessageConverter implementation for a message listener that receives individual messages.\npublic class ProjectingMessageConverter extends MessagingMessageConverter; // A MessageConverter implementation that uses a Spring Data ProjectionFactory to bind incoming messages to projection interfaces.\npublic interface RecordMessageConverter extends MessageConverter; // A Kafka-specific Message converter strategy.\npublic class StringJsonMessageConverter extends JsonMessageConverter; // JSON Message converter - String on output, String, Bytes, or byte[] on input.\n", "des": "Package for kafka converters"}
{"index": 2528, "repo": "spring-security-core-6.1.2", "code": "package event;\n\npublic abstract class AbstractAuthenticationEvent extends org.springframework.context.ApplicationEvent; // Represents an application authentication event.\npublic abstract class AbstractAuthenticationFailureEvent extends AbstractAuthenticationEvent; // Abstract application event which indicates authentication failure for some reason.\npublic class AuthenticationFailureBadCredentialsEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to invalid credentials being presented.\npublic class AuthenticationFailureCredentialsExpiredEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to the user's credentials having expired.\npublic class AuthenticationFailureDisabledEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to the user's account being disabled.\npublic class AuthenticationFailureExpiredEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to the user's account having expired.\npublic class AuthenticationFailureLockedEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to the user's account having been locked.\npublic class AuthenticationFailureProviderNotFoundEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to there being no registered AuthenticationProvider that can process the request.\npublic class AuthenticationFailureProxyUntrustedEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to the CAS user's ticket being generated by an untrusted proxy.\npublic class AuthenticationFailureServiceExceptionEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to there being a problem internal to the AuthenticationManager.\npublic class AuthenticationSuccessEvent extends AbstractAuthenticationEvent; // Application event which indicates successful authentication.\npublic class InteractiveAuthenticationSuccessEvent extends AbstractAuthenticationEvent; // Indicates an interactive authentication was successful.\npublic class LoggerListener extends Object implements org.springframework.context.ApplicationListener<AbstractAuthenticationEvent>; // Outputs authentication-related application events to Commons Logging.\npublic class LogoutSuccessEvent extends AbstractAuthenticationEvent; // Application event which indicates successful logout\n", "des": "Authentication success and failure events which can be published to the Spring application context."}
{"index": 3057, "repo": "spring-ws-core-4.0.5", "code": "package interceptor;\n\npublic abstract class AbstractValidatingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements ClientInterceptor, org.springframework.beans.factory.InitializingBean; // Abstract base class for ClientInterceptor implementations that validate part of the message using a schema.\npublic interface ClientInterceptor; // Workflow interface that allows for customized client-side message interception.\npublic abstract class ClientInterceptorAdapter extends Object implements ClientInterceptor; // Default implementation of the ClientInterceptor interface, for simplified implementation of pre-only/post-only interceptors.\npublic class PayloadValidatingInterceptor extends AbstractValidatingInterceptor; // Client-side interceptor that validates the contents of WebServiceMessages using a schema.\npublic class WebServiceValidationException extends WebServiceClientException; // Exception thrown whenever a validation error occurs on the client-side.\n", "des": "Provides the ClientInterceptor interface, and validating interceptors."}
{"index": 153, "repo": "ignite-core-2.15.0", "code": "package persistence;\n\npackage persistence.pagemem; // This package contains page memory implementation for case persitence is enabled.\nInterface CacheDataRow; // Cache data row.\nInterface CacheSearchRow;\nInterface CheckpointLockStateChecker; // Interface for perform checking that checkpoint lock is held by current track\nInterface DatabaseLifecycleListener;\nInterface IndexStorage; // Meta store.\nInterface PageStoreWriter; // Interface for write page to PageStore.\nInterface Storable; // Simple interface for data, store in some RowStore.\nClass CacheDataRowAdapter; // Cache data row adapter.\nClass CacheStripedExecutor; // Wrapper over StripedExecutor, that groups submitted tasks by cache group and partition.\nClass CheckCorruptedCacheStoresCleanAction;\nClass CleanCacheStoresMaintenanceAction;\nClass CorruptedPdsMaintenanceCallback;\nClass DataRegion; // Data region provides access to objects configured with DataRegionConfiguration configuration.\nClass DataRegionMetricsImpl;\nClass DataRegionMetricsSnapshot;\nClass DataRowCacheAware; // Data row implementation that can optionally hide the cache identifier and can set null as value.\nClass DataStorageMetricsImpl;\nClass DataStorageMXBeanImpl; // TransactionsMXBean implementation.\nClass DataStructure; // Base class for all the data structures based on PageMemory.\nClass FileLockHolder; // Abstract file lock holder.\nClass GridCacheDatabaseSharedManager;\nClass GridCacheDatabaseSharedManager.NodeFileLockHolder; // Node file lock holder.\nClass GridCacheOffheapManager; // Used when persistence enabled.\nClass GridCacheOffheapManager.GridCacheDataStore;\nClass IgniteCacheDatabaseSharedManager;\nClass IndexStorageImpl; // Metadata storage.\nClass IndexStorageImpl.IndexItem;\nClass IndexStorageImpl.MetaStoreInnerIO;\nClass IndexStorageImpl.MetaStoreLeafIO;\nClass RecoveryDebug;\nClass RootPage;\nClass RowStore; // Data store for H2 rows.\nEnum CacheDataRowAdapter.RowData;\nEnum CheckpointState; // Possible checkpoint states.\nClass CorruptedDataStructureException; // Abstract exception when DataStructure are corrupted.\nClass CorruptedPartitionMetaPageException; // Exception to distinguish partition meta page broken invariants.\nClass StorageException; // Exception is needed to distinguish WAL manager & page store critical I/O errors.\n", "des": "This package contain cache with persistence implementation."}
{"index": 2082, "repo": "spring-webmvc-6.0.11", "code": "package document;\n\npublic abstract class AbstractPdfStamperView extends AbstractUrlBasedView; // Abstract superclass for PDF views that operate on an existing document with an AcroForm.\npublic abstract class AbstractPdfView extends AbstractView; // Abstract superclass for PDF views.\npublic abstract class AbstractXlsView extends AbstractView; // Convenient superclass for Excel document views in traditional XLS format.\npublic abstract class AbstractXlsxStreamingView extends AbstractXlsxView; // Convenient superclass for Excel document views in the Office 2007 XLSX format, using POI's streaming variant.\npublic abstract class AbstractXlsxView extends AbstractXlsView; // Convenient superclass for Excel document views in the Office 2007 XLSX format (as supported by POI-OOXML).\n", "des": "Support classes for document generation, providing View implementations for PDF and Excel."}
{"index": 3721, "repo": "solr-core-9.3.0", "code": "package hll;\n\nInterface ISchemaVersion; // A serialization schema for HLLs.\nInterface IWordDeserializer; // Reads 'words' of a fixed width, in sequence, from a byte array.\nClass HLL; // A probabilistic set of hashed long elements.\nEnum HLLType; // The types of algorithm/data structure that HLL can utilize.\n", "des": "A fork of Java-HyperLogLog package tweaked not to depend on fastutil and with cleanups to make it lean and clean."}
{"index": 3015, "repo": "spring-web-6.0.11", "code": "package server;\n\npackage server.observation; // Instrumentation for observing HTTP server applications.\npackage server.reactive; // Abstractions for reactive HTTP server support including a ServerHttpRequest and ServerHttpResponse along with an HttpHandler for processing.\npublic class DelegatingServerHttpResponse extends Object implements ServerHttpResponse; // Implementation of ServerHttpResponse that delegates all calls to a given target ServerHttpResponse.\npublic interface PathContainer; // Structured representation of a URI path parsed via PathContainer.parsePath(String) into a sequence of PathContainer.Separator and PathContainer.PathSegment elements.\npublic static interface PathContainer.Element; // A path element, either separator or path segment.\npublic static class PathContainer.Options extends Object; // Options to customize parsing based on the type of input path.\npublic static interface PathContainer.PathSegment extends PathContainer.Element; // Path segment element.\npublic static interface PathContainer.Separator extends PathContainer.Element; // Path separator element.\npublic interface RequestPath extends PathContainer; // Specialization of PathContainer that subdivides the path into a RequestPath.contextPath() and the remaining RequestPath.pathWithinApplication().\npublic interface ServerHttpAsyncRequestControl; // A control that can put the processing of an HTTP request in asynchronous mode during which the response remains open until explicitly closed.\npublic interface ServerHttpRequest extends HttpRequest, HttpInputMessage; // Represents a server-side HTTP request.\npublic interface ServerHttpResponse extends HttpOutputMessage, Flushable, Closeable; // Represents a server-side HTTP response.\npublic class ServletServerHttpAsyncRequestControl extends Object implements ServerHttpAsyncRequestControl, AsyncListener; // A ServerHttpAsyncRequestControl to use on Servlet containers.\npublic class ServletServerHttpRequest extends Object implements ServerHttpRequest; // ServerHttpRequest implementation that is based on a HttpServletRequest.\npublic class ServletServerHttpResponse extends Object implements ServerHttpResponse; // ServerHttpResponse implementation that is based on a HttpServletResponse.\n", "des": "Contains an abstraction over server-side HTTP."}
{"index": 733, "repo": "spring-data-solr-4.3.15", "code": "package convert;\n\nInterface SolrConverter;\nClass CustomConversions; // since 2.0, use SolrCustomConversions.\nClass DateTimeConverters; // Converts a Date values into a solr readable String that can be directly used within the q parameter.\nClass MappingSolrConverter; // Implementation of SolrConverter to read/write SolrDocument/ SolrInputDocument.\nClass NumberConverters; // Converts a Number values into a solr readable String that can be directly used within the q parameter.\nClass SolrConverterBase;\nClass SolrCustomConversions; // Value object to capture custom conversion.\nClass SolrJConverter; // Trivial implementation of SolrConverter delegating conversion to DocumentObjectBinder\nEnum DateTimeConverters.DateToJodaDateTimeConverter; // Reading Converter parses Date from SolrDocument to DateTime\nEnum DateTimeConverters.DateToLocalDateTimeConverter; // Reading Converter parses Date from SolrDocument to LocalDateTime\nEnum DateTimeConverters.JavaDateConverter; // Converter used to parse Date to String used for setting SolrQuery query string values\nEnum DateTimeConverters.JodaDateTimeConverter; // Converter used to parse DateTime to String used for setting SolrQuery query string values\nEnum DateTimeConverters.JodaDateTimeToDateConverter; // Writing Converter converts DateTime to Date so it can be used within SolrInputDocument\nEnum DateTimeConverters.JodaLocalDateTimeConverter; // Converter used to parse LocalDateTime to String used for setting SolrQuery query string values\nEnum DateTimeConverters.JodaLocalDateTimeToDateConverter; // Writing Converter converts LocalDateTime to Date so it can be used within SolrInputDocument\nEnum DateTimeConverters.StringToJodaDateTimeConverter;\nEnum NumberConverters.NumberConverter;\n", "des": "All the Converters go here."}
{"index": 174, "repo": "ignite-core-2.15.0", "code": "package tcp;\n\nClass GridMemcachedMessage; // Memcached protocol request.\nClass GridTcpMemcachedNioListener; // Handles memcache requests.\nClass GridTcpRestNioListener; // Listener for nio server that handles incoming tcp rest packets.\nClass GridTcpRestParser; // Parser for extended memcache protocol.\nClass GridTcpRestParser.HeaderData; // Header.\nClass GridTcpRestParser.ParserState; // Holder for parser state and temporary buffer.\nClass GridTcpRestProtocol; // TCP binary protocol implementation.\nEnum GridClientPacketType; // Type of message being parsed.\n", "des": "Adapters for TCP-based REST protocols."}
{"index": 2811, "repo": "spring-integration-ip-6.1.2", "code": "package event;\n\npublic abstract class IpIntegrationEvent extends org.springframework.integration.events.IntegrationEvent;\n", "des": "ApplicationEvents generated by the ip module."}
{"index": 1094, "repo": "hbase-server-3.0.0-alpha-4", "code": "package hfile;\n\npackage hfile.bucket; // Provides BucketCache, an implementation of BlockCache.\nInterface BlockCache; // Block cache interface.\nInterface BlockCompressedSizePredicator; // Allows for defining different compression rate predicates on its implementing classes.\nInterface BlockIndexChunk;\nInterface Cacheable; // Cacheable is an interface that allows for an object to be cached.\nInterface CacheableDeserializer<T extends Cacheable>; // Interface for a deserializer.\nInterface CachedBlock;\nInterface FirstLevelBlockCache; // In-memory BlockCache that may be backed by secondary layer(s).\nInterface HFile.CachingBlockReader; // An abstraction used by the block index.\nInterface HFile.Reader; // An interface used by clients to open and iterate an HFile.\nInterface HFile.Writer; // API required to write an HFile\nInterface HFileDataBlockEncoder; // Controls what kind of data block encoding is used.\nInterface HFileIndexBlockEncoder; // Controls what kind of index block encoding is used.\nInterface HFileIndexBlockEncoder.EncodedSeeker;\nInterface HFileScanner; // A scanner allows you to position yourself within a HFile and scan through it.\nInterface InlineBlockWriter; // A way to write \"inline\" blocks into an HFile.\nInterface ResizableBlockCache; // BlockCache which is resizable.\nClass AgeSnapshot; // Snapshot of block cache age in cache.\nClass BlockCacheFactory;\nClass BlockCacheKey; // Cache Key for use with implementations of BlockCache\nClass BlockCacheUtil; // Utilty for aggregating counts in CachedBlocks and toString/toJSON CachedBlocks and BlockCaches.\nClass BlockCacheUtil.CachedBlocksByFile; // Use one of these to keep a running account of cached blocks by file.\nClass BlockWithScanInfo; // BlockWithScanInfo is wrapper class for HFileBlock with other attributes.\nClass BloomFilterMetrics;\nClass CacheableDeserializerIdManager; // This class is used to manage the identifiers for CacheableDeserializer.\nClass CacheConfig; // Stores all of the cache objects and configuration for a single HFile.\nClass CacheStats; // Class that implements cache metrics.\nClass ChecksumUtil; // Utility methods to compute and validate checksums.\nClass CombinedBlockCache; // CombinedBlockCache is an abstraction layer that combines FirstLevelBlockCache and BucketCache.\n", "des": "Provides implementations of HFile and HFile BlockCache."}
{"index": 283, "repo": "pdfbox-3.0.0-beta1", "code": "package common;\n\npackage common.filespecification; // The file specification package defines classes that are used for the PDF File Specification logic.\npackage common.function; // This package contains functions that are available in the PDF specification.\nInterface COSObjectable; // This is an interface used to get/create the underlying COSObject.\nInterface PDDestinationOrAction; // This is an interface used for some elements such as the document OpenAction that can be either a Destination or an Action.\nClass COSArrayList<E>; // This is an implementation of a List that will sync its contents to a COSArray.\nClass COSDictionaryMap<K,V>; // This is a Map that will automatically sync the contents to a COSDictionary.\nClass PDDictionaryWrapper; // A wrapper for a COS dictionary.\nClass PDImmutableRectangle; // Immutable class for constant sizes.\nClass PDMetadata; // This class represents metadata for various objects in a PDF document.\nClass PDNameTreeNode<T extends COSObjectable>; // This class represents a node in a name tree.\nClass PDNumberTreeNode; // This class represents a PDF Number tree.\nClass PDObjectStream; // A PDStream represents a stream in a PDF document.\nClass PDPageLabelRange; // Contains information for a page label range.\nClass PDPageLabels; // Represents the page label dictionary of a document.\nClass PDRange; // This class will be used to signify a range.\nClass PDRectangle; // A rectangle in a PDF document.\nClass PDStream; // A PDStream represents a stream in a PDF document.\nClass PDTypedDictionaryWrapper; // A wrapper for a COS dictionary including Type information.\n", "des": "High level PD classes that are used throughout several packages are placed in the PDModel common package."}
{"index": 3086, "repo": "spring-ws-core-4.0.5", "code": "package annotation;\n\npublic enum FaultCode extends Enum<FaultCode>; // Enumeration that represents the standard SOAP Fault codes for use with the JDK 1.5+ SoapFault annotation.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Repeatable(SoapActions.class) public @interface SoapAction; // Marks an endpoint method as the handler for an incoming request.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface SoapActions; // Marks an endpoint method as containing multiple SoapActions.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface SoapFault; // Marks an exception class with the fault elements that should be returned whenever this exception is thrown.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface SoapHeader; // Marks an endpoint method parameter to be resolved as a single or a list of SoapHeaderElement.\n", "des": "JDK 1.5+ annotations for Spring-WS SOAP endpoints."}
{"index": 2059, "repo": "slf4j-ext-2.0.7", "code": "package cal10n;\n\npublic class LocLogger extends LoggerWrapper implements Logger; // A logger specialized in localized logging.\npublic class LocLoggerFactory extends Object; // This class is essentially a wrapper around an LoggerFactory producing LocLogger instances.\n", "des": "SLF4J API extensions"}
{"index": 3619, "repo": "solr-test-framework-9.3.0", "code": "package placement;\n\nClass AttributeFetcherForTest;\nClass Builders; // Builder classes to make tests using different cluster and node configurations easier to write and to read.\nClass Builders.ClusterBuilder;\nClass Builders.CollectionBuilder;\nClass Builders.NodeBuilder;\nClass Builders.ReplicaBuilder;\nClass Builders.ShardBuilder;\n", "des": "Utility classes to test placement plugins."}
{"index": 2891, "repo": "spring-integration-core-6.1.2", "code": "package observation;\n\npublic class DefaultMessageReceiverObservationConvention extends Object implements MessageReceiverObservationConvention; // A default MessageReceiverObservationConvention implementation.\npublic class DefaultMessageRequestReplyReceiverObservationConvention extends Object implements MessageRequestReplyReceiverObservationConvention; // A default MessageRequestReplyReceiverObservationConvention implementation.\npublic class DefaultMessageSenderObservationConvention extends Object implements MessageSenderObservationConvention; // A default MessageSenderObservationConvention implementation.\npublic enum IntegrationObservation extends Enum<IntegrationObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // The ObservationDocumentation implementation for Spring Integration infrastructure.\npublic static enum IntegrationObservation.GatewayTags extends Enum<IntegrationObservation.GatewayTags> implements io.micrometer.common.docs.KeyName; // Key names for message handler observations.\npublic static enum IntegrationObservation.HandlerTags extends Enum<IntegrationObservation.HandlerTags> implements io.micrometer.common.docs.KeyName; // Key names for message handler observations.\npublic static enum IntegrationObservation.ProducerTags extends Enum<IntegrationObservation.ProducerTags> implements io.micrometer.common.docs.KeyName; // Key names for message producer observations.\npublic class MessageReceiverContext extends io.micrometer.observation.transport.ReceiverContext<org.springframework.messaging.Message<?>>; // The ReceiverContext extension for Message context.\npublic interface MessageReceiverObservationConvention extends io.micrometer.observation.ObservationConvention<MessageReceiverContext>; // A MessageReceiverContext-based ObservationConvention contract.\npublic class MessageRequestReplyReceiverContext extends io.micrometer.observation.transport.RequestReplyReceiverContext<org.springframework.messaging.Message<?>,org.springframework.messaging.Message<?>>; // The RequestReplyReceiverContext extension for a Message contract with inbound gateways.\npublic interface MessageRequestReplyReceiverObservationConvention extends io.micrometer.observation.ObservationConvention<MessageRequestReplyReceiverContext>; // A MessageRequestReplyReceiverContext-based ObservationConvention contract.\npublic class MessageSenderContext extends io.micrometer.observation.transport.SenderContext<MutableMessage<?>>; // The SenderContext extension for Message context.\n", "des": "Provides classes to support of Micrometer Observation API."}
{"index": 1750, "repo": "spring-data-mongodb-4.1.2", "code": "package annotation;\n\n@Inherited @Retention(RUNTIME) @Target({TYPE,METHOD}) public @interface Collation; // Collation allows to define the rules used for language-specific string comparison.\n", "des": "Core Spring Data MongoDB annotations not limited to a special use case (like Query,...)."}
{"index": 2938, "repo": "groovy-4.0.13", "code": "package wrappers;\n\npublic class BooleanWrapper extends PojoWrapper;\npublic class ByteWrapper extends PojoWrapper;\npublic class CharWrapper extends PojoWrapper;\npublic class DoubleWrapper extends PojoWrapper;\npublic class FloatWrapper extends PojoWrapper;\npublic class GroovyObjectWrapper extends Wrapper;\npublic class IntWrapper extends PojoWrapper;\npublic class LongWrapper extends PojoWrapper;\npublic class PojoWrapper extends Wrapper;\npublic class ShortWrapper extends PojoWrapper;\npublic abstract class Wrapper extends Object implements GroovyObject;\n", "des": "Groovy wrapper classes for primitive types."}
{"index": 2079, "repo": "spring-webmvc-6.0.11", "code": "package form;\n\npublic abstract class AbstractCheckedElementTag extends AbstractHtmlInputElementTag; // Abstract base class to provide common methods for implementing databinding-aware JSP tags for rendering an HTML 'input' element with a 'type' of 'checkbox' or 'radio'.\npublic abstract class AbstractDataBoundFormElementTag extends AbstractFormTag implements EditorAwareTag; // Base tag for all data-binding aware JSP form tags.\npublic abstract class AbstractFormTag extends HtmlEscapingAwareTag; // Base class for all JSP form tags.\npublic abstract class AbstractHtmlElementBodyTag extends AbstractHtmlElementTag implements BodyTag; // Convenient superclass for many html tags that render content using the databinding features of the AbstractHtmlElementTag.\npublic abstract class AbstractHtmlElementTag extends AbstractDataBoundFormElementTag implements DynamicAttributes; // Base class for databinding-aware JSP tags that render HTML element.\npublic abstract class AbstractHtmlInputElementTag extends AbstractHtmlElementTag; // Base class for databinding-aware JSP tags that render HTML form input element.\npublic abstract class AbstractMultiCheckedElementTag extends AbstractCheckedElementTag; // Abstract base class to provide common methods for implementing databinding-aware JSP tags for rendering multiple HTML 'input' elements with a 'type' of 'checkbox' or 'radio'.\npublic abstract class AbstractSingleCheckedElementTag extends AbstractCheckedElementTag; // Abstract base class to provide common methods for implementing databinding-aware JSP tags for rendering a single HTML 'input' element with a 'type' of 'checkbox' or 'radio'.\npublic class ButtonTag extends AbstractHtmlElementTag; // The <button> tag renders a form field label in an HTML 'button' tag.\npublic class CheckboxesTag extends AbstractMultiCheckedElementTag; // The <checkboxes> tag renders multiple HTML 'input' tags with type 'checkbox'.\npublic class CheckboxTag extends AbstractSingleCheckedElementTag; // The <checkbox> tag renders an HTML 'input' tag with type 'checkbox'.\npublic class ErrorsTag extends AbstractHtmlElementBodyTag implements BodyTag; // The <errors> tag renders field errors in an HTML 'span' tag.\npublic class FormTag extends AbstractHtmlElementTag; // The <form> tag renders an HTML 'form' tag and exposes a binding path to inner tags for binding.\n", "des": "Spring's form tag library for JSP views in Spring's Web MVC framework."}
{"index": 594, "repo": "org.apache.karaf.main-2.4.4", "code": "package localization;\n\nInterface BundleLocalization; // The interface of the service that gets ResourceBundle objects from a given bundle with a given locale.\nInterface LocaleProvider; // A service that is used to determine what the current locale is for a particular context or session.\n", "des": "Provides bundle localization and local provider service APIs."}
{"index": 380, "repo": "mahout-core-14.1", "code": "package function;\n\nInterface ByteByteProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteCharProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteComparator; // A comparison function which imposes a total ordering on some collection of elements.\nInterface ByteDoubleProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteFloatProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteIntProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteLongProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteObjectProcedure<T>; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface ByteProcedure; // Interface that represents a procedure object: a procedure that takes a single argument and does not return a value.\nInterface ByteShortProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharByteProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharCharProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharComparator; // A comparison function which imposes a total ordering on some collection of elements.\nInterface CharDoubleProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharFloatProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharIntProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharLongProcedure; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\nInterface CharObjectProcedure<T>; // Interface that represents a procedure object: a procedure that takes two arguments and does not return a value.\n", "des": "Core interfaces for functions, comparisons and procedures on objects and primitive data types."}
{"index": 2709, "repo": "spring-batch-infrastructure-5.0.2", "code": "package item;\n\npackage item.adapter; // Adapters for Plain Old Java Objects.\npackage item.amqp; // AMQP related batch components.\npackage item.data; // Spring Data related readers and writers.\npackage item.database; // Infrastructure implementations of database based item readers and writers.\npackage item.file; // Infrastructure implementations of io file concerns.\npackage item.function; // Adapters for java.util.function components.\npackage item.jms; // JMS based reader/writer and related components.\npackage item.json; // Infrastructure implementations of JSON input and output.\npackage item.kafka; // Apache Kafka related readers and writers\npackage item.ldif; // This package contains the classes required for using the LdifParser in Spring LDAP.\npackage item.mail; // Java Mail based components.\npackage item.support; // Internal support package\npackage item.util; // Infrastructure utility classes.\npackage item.validator; // Infrastructure implementations of item validator concerns.\npackage item.xml; // Infrastructure implementations of xml input and output.\npublic class Chunk<W> extends Object implements Iterable<W>, Serializable; // Encapsulation of a list of items to be processed and possibly a list of failed items to be skipped.\npublic class ExecutionContext extends Object implements Serializable; // Object representing a context for an ItemStream.\npublic interface ItemCountAware; // Marker interface indicating that an item should have the item count set on it.\n@FunctionalInterface public interface ItemProcessor<I,O>; // Interface for item transformation.\n@FunctionalInterface public interface ItemReader<T>; // Strategy interface for providing the data.\npublic abstract class ItemReaderException extends RuntimeException; // A base exception class that all exceptions thrown from an ItemReader extend.\npublic interface ItemStream; // Marker interface defining a contract for periodically storing state and restoring from that state should an error occur.\npublic class ItemStreamException extends RuntimeException; // Exception representing any errors encountered while processing a stream.\npublic interface ItemStreamReader<T> extends ItemStream, ItemReader<T>; // Convenience interface that combines ItemStream and ItemReader .\npublic abstract class ItemStreamSupport extends Object implements ItemStream; // Empty method implementation of ItemStream.\n", "des": "Infrastructure interfaces and primary dependencies for item concerns."}
{"index": 2175, "repo": "spring-security-web-6.1.2", "code": "package expression;\n\npublic class DefaultHttpSecurityExpressionHandler extends org.springframework.security.access.expression.AbstractSecurityExpressionHandler<RequestAuthorizationContext> implements org.springframework.security.access.expression.SecurityExpressionHandler<RequestAuthorizationContext>; // A SecurityExpressionHandler that uses a RequestAuthorizationContext to create a WebSecurityExpressionRoot.\npublic class DefaultWebSecurityExpressionHandler extends org.springframework.security.access.expression.AbstractSecurityExpressionHandler<FilterInvocation> implements org.springframework.security.access.expression.SecurityExpressionHandler<FilterInvocation>;\npublic final class ExpressionBasedFilterInvocationSecurityMetadataSource extends DefaultFilterInvocationSecurityMetadataSource; // Expression-based FilterInvocationSecurityMetadataSource.\npublic final class WebExpressionAuthorizationManager extends Object implements org.springframework.security.authorization.AuthorizationManager<RequestAuthorizationContext>; // An expression-based AuthorizationManager that determines the access by evaluating the provided expression.\n@Deprecated public class WebExpressionVoter extends Object implements org.springframework.security.access.AccessDecisionVoter<FilterInvocation>;\npublic class WebSecurityExpressionRoot extends org.springframework.security.access.expression.SecurityExpressionRoot;\n", "des": "Implementation of web security expressions."}
{"index": 575, "repo": "commons-collections-3.2.2", "code": "package bag;\n\nClass AbstractBagDecorator; // Decorates another Bag to provide additional behaviour.\nClass AbstractMapBag; // Abstract implementation of the Bag interface to simplify the creation of subclass implementations.\nClass AbstractMapBag.MutableInteger; // Mutable integer class for storing the data.\nClass AbstractSortedBagDecorator; // Decorates another SortedBag to provide additional behaviour.\nClass HashBag; // Implements Bag, using a HashMap to provide the data storage.\nClass PredicatedBag; // Decorates another Bag to validate that additions match a specified predicate.\nClass PredicatedSortedBag; // Decorates another SortedBag to validate that additions match a specified predicate.\nClass SynchronizedBag; // Decorates another Bag to synchronize its behaviour for a multi-threaded environment.\nClass SynchronizedSortedBag; // Decorates another SortedBag to synchronize its behaviour for a multi-threaded environment.\nClass TransformedBag; // Decorates another Bag to transform objects that are added.\nClass TransformedSortedBag; // Decorates another SortedBag to transform objects that are added.\nClass TreeBag; // Implements SortedBag, using a TreeMap to provide the data storage.\nClass TypedBag; // Decorates another Bag to validate that elements added are of a specific type.\nClass TypedSortedBag; // Decorates another SortedBag to validate that elements added are of a specific type.\nClass UnmodifiableBag; // Decorates another Bag to ensure it can't be altered.\nClass UnmodifiableSortedBag; // Decorates another SortedBag to ensure it can't be altered.\n", "des": "This package contains implementations of the Bag and SortedBag interfaces."}
{"index": 3008, "repo": "spring-web-6.0.11", "code": "package cbor;\n\npublic class KotlinSerializationCborHttpMessageConverter extends KotlinSerializationBinaryHttpMessageConverter<kotlinx.serialization.cbor.Cbor>; // Implementation of HttpMessageConverter that can read and write CBOR using kotlinx.serialization.\npublic class MappingJackson2CborHttpMessageConverter extends AbstractJackson2HttpMessageConverter; // Implementation of HttpMessageConverter that can read and write the CBOR data format using the dedicated Jackson 2.x extension.\n", "des": "Provides an HttpMessageConverter for the CBOR data format."}
{"index": 1827, "repo": "spring-test-6.0.11", "code": "package env;\n\npublic class MockEnvironment extends org.springframework.core.env.AbstractEnvironment; // Simple ConfigurableEnvironment implementation exposing MockEnvironment.setProperty(String, String) and MockEnvironment.withProperty(String, String) methods for testing purposes.\npublic class MockPropertySource extends org.springframework.core.env.PropertiesPropertySource; // Simple PropertySource implementation for use in testing.\n", "des": "This package contains mock implementations of the Environment and PropertySource abstractions."}
{"index": 3156, "repo": "tika-core-2.8.0", "code": "package extractor;\n\nInterface ContainerExtractor; // Tika container extractor interface.\nInterface DocumentSelector; // Interface for different document selection strategies for purposes like embedded document extraction by a ContainerExtractor instance.\nInterface EmbeddedDocumentExtractor;\nInterface EmbeddedDocumentExtractorFactory;\nInterface EmbeddedResourceHandler; // Tika container extractor callback interface.\nInterface EmbeddedStreamTranslator; // Interface for different filtering of embedded streams.\nClass DefaultEmbeddedStreamTranslator; // Loads EmbeddedStreamTranslators via service loading.\nClass EmbeddedDocumentUtil; // Utility class to handle common issues with embedded documents.\nClass ParserContainerExtractor; // An implementation of ContainerExtractor powered by the regular Parser API.\nClass ParsingEmbeddedDocumentExtractor; // Helper class for parsers of package archives or other compound document formats that support embedded or attached component documents.\nClass ParsingEmbeddedDocumentExtractorFactory;\n", "des": "Extraction of component documents."}
{"index": 2689, "repo": "spring-data-jpa-3.1.2", "code": "package support;\n\npublic interface CrudMethodMetadata; // Interface to abstract CrudMethodMetadata that provide the LockModeType to be used for query execution.\npublic class DefaultJpaContext extends Object implements JpaContext; // Default implementation of JpaContext.\npublic class EntityManagerBeanDefinitionRegistrarPostProcessor extends Object implements BeanFactoryPostProcessor, Ordered; // BeanFactoryPostProcessor to register a SharedEntityManagerCreator for every EntityManagerFactory bean definition found in the application context to enable autowiring EntityManager instances into constructor arguments.\npublic interface JpaEntityInformation<T,ID> extends EntityInformation<T,ID>, JpaEntityMetadata<T>; // Extension of EntityInformation to capture additional JPA specific information about entities.\npublic abstract class JpaEntityInformationSupport<T,ID> extends AbstractEntityInformation<T,ID> implements JpaEntityInformation<T,ID>; // Base class for JpaEntityInformation implementations to share common method implementations.\npublic class JpaEvaluationContextExtension extends Object implements EvaluationContextExtension; // EvaluationContextExtension to register EscapeCharacter as root object to essentially expose an expose(â€¦) function to SpEL.\npublic static class JpaEvaluationContextExtension.JpaRootObject extends Object;\npublic class JpaMetamodelEntityInformation<T,ID> extends JpaEntityInformationSupport<T,ID>; // Implementation of EntityInformation that uses JPA Metamodel to find the domain class' id field.\npublic class JpaPersistableEntityInformation<T extends Persistable<ID>,ID> extends JpaMetamodelEntityInformation<T,ID>; // Extension of JpaMetamodelEntityInformation that consideres methods of Persistable to lookup the id.\npublic class JpaRepositoryFactory extends RepositoryFactorySupport; // JPA specific generic repository factory.\npublic class JpaRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends TransactionalRepositoryFactoryBeanSupport<T,S,ID>; // Special adapter for Springs FactoryBean interface to allow easy setup of repository factories via Spring configuration.\n@NoRepositoryBean public interface JpaRepositoryImplementation<T,ID> extends JpaRepository<T,ID>, JpaSpecificationExecutor<T>; // SPI interface to be implemented by JpaRepository implementations.\n", "des": "JPA repository implementations."}
{"index": 1388, "repo": "spring-boot-actuator-3.1.1", "code": "package cache;\n\npublic class CachingOperationInvoker extends Object implements OperationInvoker; // An OperationInvoker that caches the response of an operation with a configurable time to live.\npublic class CachingOperationInvokerAdvisor extends Object implements OperationInvokerAdvisor; // OperationInvokerAdvisor to optionally provide result caching support.\n", "des": "Caching support for actuator endpoints."}
{"index": 3421, "repo": "gremlin-core-3.6.4", "code": "package shaded;\n\nClass ShadedInputAdapter;\nClass ShadedKryoAdapter;\nClass ShadedOutputAdapter;\nClass ShadedSerializerAdapter<T>;\n", "des": "Implementations of the interfaces in org.apache.tinkerpop.gremlin.structure.io.gryo.kryoshim using TinkerPop's shaded copy of Kryo."}
{"index": 3622, "repo": "solr-test-framework-9.3.0", "code": "package handler;\n\npackage handler.component; // Class for tracking shard requests\nClass BackupRestoreUtils;\nClass BackupStatusChecker; // Helper class for validating when the replication handler has finished a backup.\nClass TestRestoreCoreUtil;\n", "des": "Concrete implementations of org.apache.solr.request.SolrRequestHandler"}
{"index": 2579, "repo": "camel-api-4.0.0-RC1", "code": "package health;\n\npublic interface HasHealthChecks; // An interface to represent an object which provides HealthCheck\npublic interface HealthCheck extends HasGroup, HasId, Ordered; // Health check\npublic static enum HealthCheck.Kind extends Enum<HealthCheck.Kind>;\npublic static interface HealthCheck.Result; // Response to a health check invocation.\npublic static enum HealthCheck.State extends Enum<HealthCheck.State>;\npublic interface HealthCheckAware; // An interface to represent an object which wishes to be injected with the HealthCheck\npublic final class HealthCheckHelper extends Object; // Helper for invoking HealthCheck's.\npublic interface HealthCheckRegistry extends CamelContextAware, StaticService, IdAware; // A registry for health checks.\npublic interface HealthCheckRepository extends HasId, HasHealthChecks; // A repository for health checks.\npublic interface HealthCheckResolver extends CamelContextAware; // A pluggable strategy for resolving health checks in a loosely coupled manner\npublic final class HealthCheckResultBuilder extends Object implements Builder<HealthCheck.Result>; // A builder helper to create a HealthCheck result.\npublic interface HealthCheckResultStrategy; // A strategy that allows SPI to process HealthCheck results and enrich and manipulate the result.\npublic interface WritableHealthCheckRepository extends HealthCheckRepository; // An interface to represent an object which wishes to be injected with the HealthCheck\n", "des": "Camel Health Check support"}
{"index": 1605, "repo": "spring-websocket-6.0.11", "code": "package handler;\n\npublic abstract class AbstractHttpReceivingTransportHandler extends AbstractTransportHandler; // Base class for HTTP transport handlers that receive messages via HTTP POST.\npublic abstract class AbstractHttpSendingTransportHandler extends AbstractTransportHandler implements SockJsSessionFactory; // Base class for HTTP transport handlers that push messages to connected clients.\npublic abstract class AbstractTransportHandler extends Object implements TransportHandler; // Common base class for TransportHandler implementations.\npublic class DefaultSockJsService extends TransportHandlingSockJsService implements org.springframework.web.context.ServletContextAware; // A default implementation of SockJsService with all default TransportHandler implementations pre-registered.\npublic class EventSourceTransportHandler extends AbstractHttpSendingTransportHandler; // A TransportHandler for sending messages via Server-Sent Events: https://dev.w3.org/html5/eventsource/.\npublic class HtmlFileTransportHandler extends AbstractHttpSendingTransportHandler; // An HTTP TransportHandler that uses a famous browser document.domain technique.\npublic class SockJsWebSocketHandler extends TextWebSocketHandler implements SubProtocolCapable; // An implementation of WebSocketHandler that adds SockJS messages frames, sends SockJS heartbeat messages, and delegates lifecycle events and messages to a target WebSocketHandler.\npublic class WebSocketTransportHandler extends AbstractTransportHandler implements SockJsSessionFactory, HandshakeHandler, org.springframework.context.Lifecycle, org.springframework.web.context.ServletContextAware; // WebSocket-based TransportHandler.\npublic class XhrPollingTransportHandler extends AbstractHttpSendingTransportHandler; // A TransportHandler based on XHR (long) polling.\npublic class XhrReceivingTransportHandler extends AbstractHttpReceivingTransportHandler; // A TransportHandler that receives messages over HTTP.\npublic class XhrStreamingTransportHandler extends AbstractHttpSendingTransportHandler; // A TransportHandler that sends messages over an HTTP streaming request.\n", "des": "TransportHandler implementation classes as well as a concrete SockJsService."}
{"index": 3277, "repo": "opencms-core-15.0", "code": "package i18n;\n\npackage i18n.tools; // Tools for i18n.\nInterface CmsMultiMessages.I_KeyFallbackHandler; // Interface to provide fallback keys to be used when the message for a key is not found.\nInterface CmsVfsResourceBundle.I_Loader; // Implementors of this interface are responsible for actually loading the data from the VFS.\nInterface I_CmsLocaleHandler; // A locale handler returns the locale name to use for the given request context.\nInterface I_CmsMessageBundle; // Utility interface for generating localized messages for internal OpenCms operations.\nInterface I_CmsMessageContainer; // Interface which represents a message independent of the locale.\nInterface I_CmsResourceBundle; // Increases the visibility of some key methods of a ResourceBundle.\nClass A_CmsMessageBundle; // Convenience base class to access the localized messages of an OpenCms package.\nClass CmsAcceptLanguageHeaderParser; // Parses the HTTP Accept-Language header as per section 14.4 of RFC 2068 (HTTP 1.1 header field definitions) and creates a sorted list of Locales from it.\nClass CmsAcceptLanguageHeaderParser.AcceptLanguage; // Struct representing an element of the HTTP Accept-Language header.\nClass CmsDefaultLocaleHandler; // Default implementation of the locale handler.\nClass CmsEncoder; // The OpenCms CmsEncoder class provides static methods to decode and encode data.\nClass CmsI18nInfo; // Bundle of i18n setting to be used to setup a new request context.\nClass CmsListResourceBundle; // A list based resource bundle that with increased visibility of some key methods.\nClass CmsLocaleComparator; // Simple comparator implementation for locales, that compares the String value of the locales.\nClass CmsLocaleGroup; // Represents a group of resources which are locale variants of each other.\nClass CmsLocaleGroupService; // Helper class for manipulating locale groups.\nClass CmsLocaleManager; // Manages the locales configured for this OpenCms installation.\nClass CmsMessageContainer; // Contains a localized message key, it's arguments and a I_CmsMessageBundle.\nClass CmsMessages; // Reads localized resource Strings from a java.util.ResourceBundle and provides convenience methods to access the Strings from a template.\nClass CmsMessageToBundleIndex; // A lookup table used to find out which VFS based message bundles (XML/property bundles) contain a given key.\n", "des": "Classes to handle internalization (i18n) and locale selection in OpenCms."}
{"index": 210, "repo": "nutch-2.4", "code": "package metadata;\n\nInterface CreativeCommons; // A collection of Creative Commons properties names.\nInterface DublinCore; // A collection of Dublin Core metadata names.\nInterface Feed; // A collection of Feed property names extracted by the ROME library.\nInterface HttpHeaders; // A collection of HTTP header names.\nInterface Nutch; // A collection of Nutch internal metadata constants.\nClass Metadata; // A multi-valued metadata container.\nClass MetaWrapper; // This is a simple decorator that adds metadata to any Writable-s that can be serialized by NutchWritable.\nClass SpellCheckedMetadata; // A decorator to Metadata that adds spellchecking capabilities to property names.\n", "des": "A Multi-valued Metadata container, and set of constant fields for Nutch Metadata."}
{"index": 569, "repo": "hadoop-common-3.3.4", "code": "package alias;\n\nClass BouncyCastleFipsKeyStoreProvider.Factory; // The factory to create JksProviders, which is used by the ServiceLoader.\nClass CredentialProvider; // A provider of credentials or password for Hadoop applications.\nClass CredentialProvider.CredentialEntry; // The combination of both the alias and the actual credential value.\nClass CredentialProviderFactory; // A factory to create a list of CredentialProvider based on the path given in a Configuration.\nClass CredentialShell; // This program is the CLI utility for the CredentialProvider facilities in Hadoop.\nClass CredentialShell.PasswordReader; // To facilitate testing since Console is a final class.\nClass JavaKeyStoreProvider.Factory; // The factory to create JksProviders, which is used by the ServiceLoader.\nClass LocalBouncyCastleFipsKeyStoreProvider.Factory; // The factory to create KeyStore Providers, which is used by the ServiceLoader.\nClass LocalJavaKeyStoreProvider.Factory; // The factory to create JksProviders, which is used by the ServiceLoader.\nClass UserProvider.Factory;\n", "des": "Provides the hadoop credential provider API."}
{"index": 3747, "repo": "lucene-queryparser-9.7.0", "code": "package processors;\n\nClass AllowLeadingWildcardProcessor; // This processor verifies if StandardQueryConfigHandler.ConfigurationKeys.ALLOW_LEADING_WILDCARD is defined in the QueryConfigHandler.\nClass AnalyzerQueryNodeProcessor; // This processor verifies if StandardQueryConfigHandler.ConfigurationKeys.ANALYZER is defined in the QueryConfigHandler.\nClass BooleanQuery2ModifierNodeProcessor; // This processor is used to apply the correct ModifierQueryNode to BooleanQueryNodes children.\nClass BooleanSingleChildOptimizationQueryNodeProcessor; // This processor removes every BooleanQueryNode that contains only one child and returns this child.\nClass BoostQueryNodeProcessor; // This processor iterates the query node tree looking for every FieldableNode that has StandardQueryConfigHandler.ConfigurationKeys.BOOST in its config.\nClass DefaultPhraseSlopQueryNodeProcessor; // This processor verifies if StandardQueryConfigHandler.ConfigurationKeys.PHRASE_SLOP is defined in the QueryConfigHandler.\nClass FuzzyQueryNodeProcessor; // This processor iterates the query node tree looking for every FuzzyQueryNode, when this kind of node is found, it checks on the query configuration for StandardQueryConfigHandler.ConfigurationKeys.FUZZY_CONFIG, gets the fuzzy prefix length and default similarity from it and set to the fuzzy node.\nClass IntervalQueryNodeProcessor; // This processor makes sure that StandardQueryConfigHandler.ConfigurationKeys.ANALYZER is defined in the QueryConfigHandler and injects this analyzer into IntervalQueryNodes.\nClass MatchAllDocsQueryNodeProcessor; // This processor converts every WildcardQueryNode that is \"*:*\" to MatchAllDocsQueryNode.\nClass MultiFieldQueryNodeProcessor; // This processor is used to expand terms so the query looks for the same term in different fields.\nClass MultiTermRewriteMethodProcessor; // This processor instates the default MultiTermQuery.RewriteMethod, MultiTermQuery.CONSTANT_SCORE_BLENDED_REWRITE, for multi-term query nodes.\nClass OpenRangeQueryNodeProcessor; // Processes TermRangeQuerys with open ranges.\nClass PhraseSlopQueryNodeProcessor; // This processor removes invalid SlopQueryNode objects in the query node tree.\nClass PointQueryNodeProcessor; // This processor is used to convert FieldQueryNodes to PointRangeQueryNodes.\n", "des": "Lucene Query Node Processors."}
{"index": 2378, "repo": "pulsar-client-api-3.0.0", "code": "package schema;\n\n@Public @Stable public class KeyValue<K,V> extends Object; // A simple KeyValue class.\n@FunctionalInterface public static interface KeyValue.KeyValueDecoder<K,V>; // Decoder to decode key/value bytes.\n@Public @Stable public enum KeyValueEncodingType extends Enum<KeyValueEncodingType>; // Encoding types of supported KeyValueSchema for Pulsar messages.\n@Public @Stable public interface SchemaInfo; // Information about the schema.\npublic static class SchemaInfo.SchemaInfoBuilder extends Object;\n@Public @Stable public class SchemaInfoWithVersion extends Object; // Data structure representing a schema information including its version.\n@Public @Stable public enum SchemaType extends Enum<SchemaType>; // Types of supported schema for Pulsar messages.\n", "des": "This package contains data structures for schema definitions used in the Pulsar Client API."}
{"index": 3121, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package context;\n\npackage context.spi; // SPI level contracts around \"current session\" support.\nClass TenantIdentifierMismatchException; // Indicates that tenant identifiers did not match in cases where CurrentTenantIdentifierResolver.validateExistingCurrentSessions() returns true and there is a mismatch found.\n", "des": "Defines support for \"current session\" feature."}
{"index": 628, "repo": "freemarker-2.3.32", "code": "package servlet;\n\nClass AllHttpScopesHashModel; // An extension of SimpleHash that looks up keys in the hash, then in the request, session, and servlet context scopes.\nClass FreemarkerServlet; // FreeMarker MVC View servlet that can be used similarly to JSP views.\nClass HttpRequestHashModel; // TemplateHashModel wrapper for a HttpServletRequest attributes.\nClass HttpRequestParametersHashModel; // TemplateHashModel wrapper for a HttpServletRequest parameters.\nClass HttpSessionHashModel; // TemplateHashModel wrapper for a HttpSession attributes.\nClass IncludePage; // A model that when invoked with a 'path' parameter will perform a servlet include.\nClass ServletContextHashModel; // TemplateHashModel wrapper for a ServletContext attributes.\n", "des": "Servlet for legacy \"Model 2\" frameworks that allows using FreeMarker templates instead of JSP as the MVC View (see in the Manual)."}
{"index": 3284, "repo": "opencms-core-15.0", "code": "package config;\n\npackage config.parser; // API classes for the configuration parsers of the search form support provided for server-side Solr search.\nInterface I_CmsSearchConfiguration; // Interface the main search configuration must implement.\nInterface I_CmsSearchConfigurationCommon; // Interface the common search configuration must implement.\nInterface I_CmsSearchConfigurationDidYouMean; // Interface of the \"Did you mean ...?\" configuration for the JSP search form.\nInterface I_CmsSearchConfigurationFacet; // Configuration common to all facets.\nInterface I_CmsSearchConfigurationFacetField; // The interface a field facet configuration must implement.\nInterface I_CmsSearchConfigurationFacetQuery; // Interface for the query facet configuration.\nInterface I_CmsSearchConfigurationFacetQuery.I_CmsFacetQueryItem; // The interface of a single query facet item.\nInterface I_CmsSearchConfigurationFacetRange; // The interface a field facet configuration must implement.\nInterface I_CmsSearchConfigurationGeoFilter; // The interface a Geo filter configuration must implement.\nInterface I_CmsSearchConfigurationHighlighting; // The interface each highlighting configuration must implement.\nInterface I_CmsSearchConfigurationPagination; // The interface a pagination configuration must implement.\nInterface I_CmsSearchConfigurationSorting; // The interface a sort configuration must implement.\nInterface I_CmsSearchConfigurationSortOption; // The interface a sort option configuration must implement.\nClass CmsSearchConfiguration; // The main search configuration.\nClass CmsSearchConfigurationCommon; // Search configuration for common parameters as the query parameter etc.\nClass CmsSearchConfigurationDidYouMean; // Class keeping the configuration of the \"Did you mean ...?\" feature of the search form.\nClass CmsSearchConfigurationFacet; // Configuration that is common for all facets.\nClass CmsSearchConfigurationFacetField; // Search configuration special for field facets.\nClass CmsSearchConfigurationFacetQuery; // Configuration for the query facet.\nClass CmsSearchConfigurationFacetQuery.CmsFacetQueryItem; // Representation of one query facet item.\nClass CmsSearchConfigurationFacetRange; // Search configuration special for field facets.\nClass CmsSearchConfigurationGeoFilter; // Search configuration for the Geo filter.\nClass CmsSearchConfigurationHighlighting; // Search configuration for highlighting options.\nClass CmsSearchConfigurationPagination; // Search configuration for pagination.\nClass CmsSearchConfigurationSorting; // Configuration for sorting in general.\nClass CmsSearchConfigurationSortOption; // Configuration for a single sort option.\n", "des": "API classes for the configuration of the search form support provided for server-side Solr search."}
{"index": 2871, "repo": "spring-integration-core-6.1.2", "code": "package mapping;\n\npackage mapping.support; // Support classes for mapping.\npublic abstract class AbstractHeaderMapper<T> extends Object implements RequestReplyHeaderMapper<T>, org.springframework.beans.factory.BeanClassLoaderAware; // Abstract base class for RequestReplyHeaderMapper implementations.\nprotected static class AbstractHeaderMapper.CompositeHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher; // A composite AbstractHeaderMapper.HeaderMatcher that matches if one of provided AbstractHeaderMapper.HeaderMatchers matches to the headerName.\nprotected static class AbstractHeaderMapper.ContentBasedHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher; // A content-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header is contained within a list of candidates.\n@FunctionalInterface public static interface AbstractHeaderMapper.HeaderMatcher; // Strategy interface to determine if a given header name matches.\nprotected static class AbstractHeaderMapper.PatternBasedHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher; // A pattern-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header matches one of the specified simple patterns.\nprotected static class AbstractHeaderMapper.PrefixBasedMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher; // A prefix-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header starts with a configurable prefix.\nprotected static class AbstractHeaderMapper.SinglePatternBasedHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher; // A pattern-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header matches the specified simple pattern.\npublic interface BytesMessageMapper extends InboundMessageMapper<byte[]>, OutboundMessageMapper<byte[]>; // An OutboundMessageMapper and InboundMessageMapper that maps to/from byte[].\npublic class ConvertingBytesMessageMapper extends Object implements BytesMessageMapper; // The BytesMessageMapper implementation to delegate to/from Message conversion into the provided MessageConverter.\npublic interface HeaderMapper<T>; // Generic strategy interface for mapping MessageHeaders to and from other types of objects.\n@FunctionalInterface public interface InboundMessageMapper<T>; // Strategy interface for mapping from an Object to aMessage.\npublic class MessageMappingException extends org.springframework.messaging.MessagingException; // Exception that indicates an error during message mapping.\n@FunctionalInterface public interface OutboundMessageMapper<T>; // Strategy interface for mapping from a Message to an Object.\n", "des": "Provides classes related to mapping to/from message headers."}
{"index": 1426, "repo": "spring-boot-actuator-3.1.1", "code": "package servlet;\n\n@Deprecated(since=\"3.0.0\", forRemoval=true) public class DefaultWebMvcTagsProvider extends Object implements WebMvcTagsProvider;\n@Deprecated(since=\"3.0.0\", forRemoval=true) public final class WebMvcTags extends Object;\n@Deprecated(since=\"3.0.0\", forRemoval=true) public interface WebMvcTagsContributor;\n@Deprecated(since=\"3.0.0\", forRemoval=true) public interface WebMvcTagsProvider;\n", "des": "Actuator support for Spring MVC metrics."}
{"index": 1896, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package autoconfigure;\n\npackage autoconfigure.admin; // Auto-configuration for admin-related features.\npackage autoconfigure.amqp; // Auto-configuration for RabbitMQ.\npackage autoconfigure.aop; // Auto-configuration for Spring AOP.\npackage autoconfigure.availability; // Auto-configuration for application availability features.\npackage autoconfigure.batch; // Auto-configuration for Spring Batch.\npackage autoconfigure.cache; // Auto-configuration for the cache abstraction.\npackage autoconfigure.cassandra; // Auto-configuration for Cassandra.\npackage autoconfigure.codec; // Auto-configuration for reactive codecs.\npackage autoconfigure.condition; // @Condition annotations and supporting classes.\npackage autoconfigure.context; // Auto-configuration for the Spring context.\npackage autoconfigure.couchbase; // Auto-configuration for Couchbase.\npackage autoconfigure.dao; // Auto-configuration for Spring DAO.\npackage autoconfigure.data; // Auto-configuration base classes for Spring Data.\npackage autoconfigure.domain; // General purpose domain annotations and classes.\npackage autoconfigure.elasticsearch; // Auto-configuration for Elasticsearch client.\npackage autoconfigure.flyway; // Auto-configuration for Flyway.\npackage autoconfigure.freemarker; // Auto-configuration for FreeMarker.\npackage autoconfigure.graphql; // Auto-configuration for Spring GraphQL.\npackage autoconfigure.gson; // Auto-configuration for GSON.\npackage autoconfigure.h2; // Auto-configuration for H2's Console.\npackage autoconfigure.hateoas; // Auto-configuration for Spring HATEOAS.\npackage autoconfigure.hazelcast; // Auto-configuration for Hazelcast.\npackage autoconfigure.http; // Auto-configuration for HTTP concerns.\npackage autoconfigure.influx; // Auto-configuration for InfluxDB.\npackage autoconfigure.info; // Auto-configuration for project information.\npackage autoconfigure.integration; // Auto-configuration for Spring Integration.\npackage autoconfigure.jackson; // Auto-configuration for Jackson.\npackage autoconfigure.jdbc; // Auto-configuration for JDBC.\n", "des": "Spring Boot's auto-configuration capabilities."}
{"index": 2040, "repo": "spring-messaging-6.0.11", "code": "package config;\n\npublic abstract class AbstractBrokerRegistration extends Object; // Base class for message broker registration classes.\npublic abstract class AbstractMessageBrokerConfiguration extends Object implements org.springframework.context.ApplicationContextAware; // Provides essential configuration for handling messages with simple messaging protocols such as STOMP.\npublic class ChannelRegistration extends Object; // A registration class for customizing the configuration for a MessageChannel.\npublic class MessageBrokerRegistry extends Object; // A registry for configuring message broker options.\npublic class SimpleBrokerRegistration extends AbstractBrokerRegistration; // Registration class for configuring a SimpleBrokerMessageHandler.\npublic class StompBrokerRelayRegistration extends AbstractBrokerRegistration; // Registration class for configuring a StompBrokerRelayMessageHandler.\npublic class TaskExecutorRegistration extends Object; // A registration class for customizing the properties of ThreadPoolTaskExecutor.\n", "des": "Configuration support for WebSocket messaging using higher level messaging protocols."}
{"index": 1593, "repo": "spring-websocket-6.0.11", "code": "package annotation;\n\npublic abstract class AbstractWebSocketHandlerRegistration<M> extends Object implements WebSocketHandlerRegistration; // Base class for WebSocketHandlerRegistrations that gathers all the configuration options but allows subclasses to put together the actual HTTP request mappings.\n@Configuration(proxyBeanMethods=false) public class DelegatingWebSocketConfiguration extends WebSocketConfigurationSupport; // A variation of WebSocketConfigurationSupport that detects implementations of WebSocketConfigurer in Spring configuration and invokes them in order to configure WebSocket request handling.\n@Configuration(proxyBeanMethods=false) public class DelegatingWebSocketMessageBrokerConfiguration extends WebSocketMessageBrokerConfigurationSupport; // A WebSocketMessageBrokerConfigurationSupport extension that detects beans of type WebSocketMessageBrokerConfigurer and delegates to all of them allowing callback style customization of the configuration provided in WebSocketMessageBrokerConfigurationSupport.\n@Retention(RUNTIME) @Target(TYPE) @Documented @Import(DelegatingWebSocketConfiguration.class) public @interface EnableWebSocket; // Add this annotation to an @Configuration class to configure processing WebSocket requests.\n@Retention(RUNTIME) @Target(TYPE) @Documented @Import(DelegatingWebSocketMessageBrokerConfiguration.class) public @interface EnableWebSocketMessageBroker; // Add this annotation to an @Configuration class to enable broker-backed messaging over WebSocket using a higher-level messaging sub-protocol.\npublic class ServletWebSocketHandlerRegistration extends AbstractWebSocketHandlerRegistration<org.springframework.util.MultiValueMap<org.springframework.web.HttpRequestHandler,String>>; // A helper class for configuring WebSocketHandler request handling including SockJS fallback options.\npublic class ServletWebSocketHandlerRegistry extends Object implements WebSocketHandlerRegistry; // WebSocketHandlerRegistry with Spring MVC handler mappings for the handshake requests.\npublic class SockJsServiceRegistration extends Object; // A helper class for configuring SockJS fallback options for use with an EnableWebSocket and WebSocketConfigurer setup.\npublic interface StompEndpointRegistry; // A contract for registering STOMP over WebSocket endpoints.\npublic interface StompWebSocketEndpointRegistration; // A contract for configuring a STOMP over WebSocket endpoint.\npublic class WebMvcStompEndpointRegistry extends Object implements StompEndpointRegistry; // A registry for STOMP over WebSocket endpoints that maps the endpoints with a HandlerMapping for use in Spring MVC.\n", "des": "Support for annotation-based WebSocket setup in configuration classes."}
{"index": 2449, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package mail;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration.class) @ConditionalOnClass(org.springframework.mail.javamail.JavaMailSenderImpl.class) @ConditionalOnBean(org.springframework.mail.javamail.JavaMailSenderImpl.class) @ConditionalOnEnabledHealthIndicator(\"mail\") public class MailHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.mail.MailHealthIndicator,org.springframework.mail.javamail.JavaMailSenderImpl>; // Auto-configuration for MailHealthIndicator.\n", "des": "Auto-configuration for actuator JavaMail concerns."}
{"index": 2995, "repo": "spring-web-6.0.11", "code": "package http;\n\npackage http.client; // Contains an abstraction over client-side HTTP.\npackage http.codec; // Provides implementations of Encoder and Decoder for web use.\npackage http.converter; // Provides an HttpMessageConverter abstraction to convert between Java objects and HTTP input/output messages.\npackage http.server; // Contains an abstraction over server-side HTTP.\npublic class CacheControl extends Object; // A builder for creating \"Cache-Control\" HTTP response headers.\npublic final class ContentDisposition extends Object; // Representation of the Content-Disposition type and parameters as defined in RFC 6266.\npublic static interface ContentDisposition.Builder; // A mutable builder for ContentDisposition.\npublic class HttpCookie extends Object; // Represents an HTTP cookie as a name-value pair consistent with the content of the \"Cookie\" request header.\npublic class HttpEntity<T> extends Object; // Represents an HTTP request or response entity, consisting of headers and body.\npublic class HttpHeaders extends Object implements org.springframework.util.MultiValueMap<String,String>, Serializable; // A data structure representing HTTP request or response headers, mapping String header names to a list of String values, also offering accessors for common application-level data types.\npublic interface HttpInputMessage extends HttpMessage; // Represents an HTTP input message, consisting of headers and a readable body.\npublic abstract class HttpLogging extends Object; // Holds the shared logger named \"org.springframework.web.HttpLogging\" for HTTP related logging when \"org.springframework.http\" is not enabled but \"org.springframework.web\" is.\npublic interface HttpMessage; // Represents the base interface for HTTP request and response messages.\npublic final class HttpMethod extends Object implements Comparable<HttpMethod>, Serializable; // Represents an HTTP request method.\npublic interface HttpOutputMessage extends HttpMessage; // Represents an HTTP output message, consisting of headers and a writable body.\npublic abstract class HttpRange extends Object; // Represents an HTTP (byte) range for use with the HTTP \"Range\" header.\npublic interface HttpRequest extends HttpMessage; // Represents an HTTP request message, consisting of a method and a URI.\npublic enum HttpStatus extends Enum<HttpStatus> implements HttpStatusCode; // Enumeration of HTTP status codes.\n", "des": "Contains a basic abstraction over client/server-side HTTP."}
{"index": 1886, "repo": "shiro-core-2.0.0-alpha-2", "code": "package jdbc;\n\npublic class JdbcRealm extends AuthorizingRealm; // Realm that allows authentication and authorization via JDBC calls.\npublic static enum JdbcRealm.SaltStyle extends Enum<JdbcRealm.SaltStyle>; // Password hash salt configuration.\n", "des": "Realms that acquire security data from an RDBMS (Relational Database Management System) using the JDBC API."}
{"index": 3542, "repo": "opennlp-tools-2.2.0", "code": "package treeinsert;\n\nClass AttachContextGenerator; // Generates predictive contexts for deciding how constituents should be attached.\nClass BuildContextGenerator; // Creates the features or contexts for the building phase of parsing.\nClass CheckContextGenerator; // Generates predictive context for deciding when a constituent is complete.\nClass Parser; // A built-attach Parser implementation.\nClass ParserEventStream; // Wrapper class for one of four built-attach parser event streams.\n", "des": "Package containing experimental code for performing full syntactic parsing using attachment decisions."}
{"index": 2916, "repo": "spring-xml-4.0.5", "code": "package xsd;\n\npackage xsd.commons; // Contains a implementation of the XsdSchema interfaces that uses Apache WS-Commons XML Schema.\npublic class SimpleXsdSchema extends Object implements XsdSchema, org.springframework.beans.factory.InitializingBean; // The default XsdSchema implementation.\npublic interface XsdSchema; // Represents an abstraction for XSD schemas.\npublic interface XsdSchemaCollection; // Represents an abstraction for a collection of XSD schemas.\npublic class XsdSchemaException extends XmlException; // Base class for all WSDL definition exceptions.\n", "des": "Provides an abstraction over XSD XML schemas."}
{"index": 3633, "repo": "lucene-misc-9.7.0", "code": "package util;\n\npackage util.fst; // Misc FST classes.\nInterface MemoryTracker; // Tracks dynamic allocations/deallocations of memory for transient objects\n", "des": "Memory Tracker interface which allows defining custom collector level memory trackers"}
{"index": 773, "repo": "lucene-analyzers-common-8.11.2", "code": "package en;\n\nClass AbstractWordsFileFilterFactory; // Abstract parent class for analysis factories that accept a stopwords file as input.\nClass EnglishAnalyzer; // Analyzer for English.\nClass EnglishMinimalStemFilter; // A TokenFilter that applies EnglishMinimalStemmer to stem English words.\nClass EnglishMinimalStemFilterFactory; // Factory for EnglishMinimalStemFilter.\nClass EnglishMinimalStemmer; // Minimal plural stemmer for English.\nClass EnglishPossessiveFilter; // TokenFilter that removes possessives (trailing 's) from words.\nClass EnglishPossessiveFilterFactory; // Factory for EnglishPossessiveFilter.\nClass KStemFilter; // A high-performance kstem filter for english.\nClass KStemFilterFactory; // Factory for KStemFilter.\nClass KStemmer; // This class implements the Kstem algorithm\nClass PorterStemFilter; // Transforms the token stream as per the Porter stemming algorithm.\nClass PorterStemFilterFactory; // Factory for PorterStemFilter.\n", "des": "Analyzer for English."}
{"index": 2976, "repo": "pulsar-broker-3.0.0", "code": "package coordinator;\n\npublic abstract class TransactionCoordinatorException extends TransactionException; // The base exception class for the errors thrown from Transaction Coordinator.\npublic static class TransactionCoordinatorException.UnsupportedTxnActionException extends TransactionCoordinatorException; // Exceptions are thrown when txnAction is unsupported.\n", "des": "Exceptions thrown when encountering errors in transaction buffer."}
{"index": 2786, "repo": "spring-expression-6.0.11", "code": "package common;\n\npublic class CompositeStringExpression extends Object implements Expression; // Represents a template expression broken into pieces.\npublic abstract class ExpressionUtils extends Object; // Common utility functions that may be used by any Expression Language provider.\npublic class LiteralExpression extends Object implements Expression; // A very simple hardcoded implementation of the Expression interface that represents a string literal.\npublic abstract class TemplateAwareExpressionParser extends Object implements ExpressionParser; // An expression parser that understands templates.\npublic class TemplateParserContext extends Object implements ParserContext; // Configurable ParserContext implementation for template parsing.\n", "des": "Common utility classes behind the Spring Expression Language."}
{"index": 2329, "repo": "spring-boot-3.1.1", "code": "package reactive;\n\npublic abstract class ApplicationContextServerWebExchangeMatcher<C> extends Object implements org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher; // ApplicationContext backed ServerWebExchangeMatcher.\n", "des": "Classes and utilities for reactive Spring Security."}
{"index": 3493, "repo": "poi-5.2.3", "code": "package model;\n\nClass ConvertAnchor;\nClass DrawingManager2; // Provides utilities to manage drawing groups.\nClass HSSFFormulaParser; // HSSF wrapper for the FormulaParser and FormulaRenderer\nClass InternalSheet; // Low level model implementation of a Sheet (one workbook contains many sheets) This file contains the low level binary records starting at the sheets BOF and ending with the sheets EOF.\nClass InternalWorkbook; // Low level model implementation of a Workbook.\nClass RecordStream; // Simplifies iteration over a sequence of Record objects.\nClass RowBlocksReader; // Segregates the 'Row Blocks' section of a single sheet into plain row/cell records and shared formula records.\nClass WorkbookRecordList;\nClass InternalSheet.UnsupportedBOFType;\n", "des": "Provides low level API structures for reading, writing, modifying XLS files."}
{"index": 3728, "repo": "lucene-queryparser-9.7.0", "code": "package complexPhrase;\n\nClass ComplexPhraseQueryParser; // QueryParser which permits complex phrase query syntax eg \"(john jon jonathan~) peters*\".\n", "des": "QueryParser which permits complex phrase query syntax eg \"(john jon jonathan~) peters*\""}
{"index": 1295, "repo": "spring-core-6.0.11", "code": "package function;\n\npublic class SingletonSupplier<T> extends Object implements Supplier<T>; // A Supplier decorator that caches a singleton result and makes it available from SingletonSupplier.get() (nullable) and SingletonSupplier.obtain() (null-safe).\npublic abstract class SupplierUtils extends Object; // Convenience utilities for Supplier handling.\npublic interface ThrowingBiFunction<T,U,R> extends BiFunction<T,U,R>; // A BiFunction that allows invocation of code that throws a checked exception.\n@FunctionalInterface public interface ThrowingConsumer<T> extends Consumer<T>; // A Consumer that allows invocation of code that throws a checked exception.\n@FunctionalInterface public interface ThrowingFunction<T,R> extends Function<T,R>; // A Function that allows invocation of code that throws a checked exception.\npublic interface ThrowingSupplier<T> extends Supplier<T>; // A Supplier that allows invocation of code that throws a checked exception.\n", "des": "Useful generic java.util.function helper classes."}
{"index": 315, "repo": "kafka-clients-3.5.0", "code": "package admin;\n\nInterface Admin; // The administrative client for Kafka, which supports managing and inspecting topics, brokers, configurations and ACLs.\nClass AbortTransactionOptions;\nClass AbortTransactionResult; // The result of Admin.abortTransaction(AbortTransactionSpec, AbortTransactionOptions).\nClass AbortTransactionSpec;\nClass AbstractOptions<T extends AbstractOptions>;\nClass AdminClient; // The base class for in-built admin clients.\nClass AdminClientConfig; // The AdminClient configuration class, which also contains constants for configuration entry names.\nClass AlterClientQuotasOptions; // Options for Admin.alterClientQuotas(Collection, AlterClientQuotasOptions).\nClass AlterClientQuotasResult; // The result of the Admin.alterClientQuotas(Collection, AlterClientQuotasOptions) call.\nClass AlterConfigOp; // A class representing a alter configuration entry containing name, value and operation type.\nClass AlterConfigsOptions; // Options for Admin.incrementalAlterConfigs(Map) and Admin.alterConfigs(Map).\nClass AlterConfigsResult; // The result of the Admin.alterConfigs(Map) call.\nClass AlterConsumerGroupOffsetsOptions; // Options for the Admin.alterConsumerGroupOffsets(String, Map, AlterConsumerGroupOffsetsOptions) call.\nClass AlterConsumerGroupOffsetsResult; // The result of the Admin.alterConsumerGroupOffsets(String, Map) call.\nClass AlterPartitionReassignmentsOptions; // Options for Admin.alterPartitionReassignments(Map, AlterPartitionReassignmentsOptions) The API of this class is evolving.\nClass AlterPartitionReassignmentsResult; // The result of Admin.alterPartitionReassignments(Map, AlterPartitionReassignmentsOptions).\nClass AlterReplicaLogDirsOptions; // Options for Admin.alterReplicaLogDirs(Map, AlterReplicaLogDirsOptions).\nClass AlterReplicaLogDirsResult; // The result of Admin.alterReplicaLogDirs(Map, AlterReplicaLogDirsOptions).\nClass AlterUserScramCredentialsOptions; // Options for Admin.alterUserScramCredentials(List, AlterUserScramCredentialsOptions) The API of this class is evolving.\nClass AlterUserScramCredentialsResult; // The result of the Admin.alterUserScramCredentials(List) call.\n", "des": "Provides a Kafka client for performing administrative operations (such as creating topics and configuring brokers) on a Kafka cluster."}
{"index": 1365, "repo": "spring-tx-6.0.11", "code": "package reactive;\n\npublic abstract class AbstractReactiveTransactionManager extends Object implements ReactiveTransactionManager, Serializable; // Abstract base class that implements Spring's standard reactive transaction workflow, serving as basis for concrete platform transaction managers.\nprotected static final class AbstractReactiveTransactionManager.SuspendedResourcesHolder extends Object; // Holder for suspended resources.\npublic class GenericReactiveTransaction extends Object implements ReactiveTransaction; // Default implementation of the ReactiveTransaction interface, used by AbstractReactiveTransactionManager.\npublic abstract class ReactiveResourceSynchronization<O,K> extends Object implements TransactionSynchronization; // TransactionSynchronization implementation that manages a resource object bound through TransactionSynchronizationManager.\npublic interface TransactionalOperator; // Operator class that simplifies programmatic transaction demarcation and transaction exception handling.\n@FunctionalInterface public interface TransactionCallback<T>; // Callback interface for reactive transactional code.\npublic class TransactionContext extends Object; // Mutable transaction context that encapsulates transactional synchronizations and resources in the scope of a single transaction.\npublic abstract class TransactionContextManager extends Object; // Delegate to register and obtain transactional contexts.\npublic interface TransactionSynchronization; // Interface for reactive transaction synchronization callbacks.\npublic class TransactionSynchronizationManager extends Object; // Central delegate that manages resources and transaction synchronizations per subscriber context.\n", "des": "Support classes for reactive transaction management."}
{"index": 3476, "repo": "hilt-android-2.47", "code": "package flags;\n\nInterface FragmentGetContextFix.FragmentGetContextFixEntryPoint; // Entry point for getting the flag.\nClass FragmentGetContextFix; // Runtime flag for the Fragment.getContext() fix.\nAnnotation Type FragmentGetContextFix.DisableFragmentGetContextFix; // Qualifier annotation to bind disable the Fragment.getContext() fix at runtime.\n", "des": "Runtime flags to control Hilt behavior for rollout of changes."}
{"index": 1951, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jsonb;\n\n@AutoConfiguration @ConditionalOnClass(jakarta.json.bind.Jsonb.class) @ConditionalOnResource(resources={\"classpath:META-INF/services/jakarta.json.bind.spi.JsonbProvider\",\"classpath:META-INF/services/jakarta.json.spi.JsonProvider\"}) public class JsonbAutoConfiguration extends Object; // Auto-configuration for JSON-B.\n", "des": "Auto-configuration for JSON-B."}
{"index": 12, "repo": "connect-api-3.5.0", "code": "package predicates;\n\nInterface Predicate<R extends ConnectRecord<R>>; // A predicate on records.\n", "des": "Provides a pluggable interface for describing when a Transformation should be applied to a record."}
{"index": 2308, "repo": "spring-boot-3.1.1", "code": "package info;\n\n@ImportRuntimeHints(org.springframework.boot.info.BuildProperties.BuildPropertiesRuntimeHints.class) public class BuildProperties extends InfoProperties; // Provide build-related information such as group and artifact.\n@ImportRuntimeHints(org.springframework.boot.info.GitProperties.GitPropertiesRuntimeHints.class) public class GitProperties extends InfoProperties; // Provide git-related information such as commit id and time.\npublic class InfoProperties extends Object implements Iterable<InfoProperties.Entry>; // Base class for components exposing unstructured data with dedicated methods for well known keys.\npublic static final class InfoProperties.Entry extends Object; // Property entry.\npublic class JavaInfo extends Object; // Information about the Java environment the application is running in.\npublic static class JavaInfo.JavaRuntimeEnvironmentInfo extends Object; // Information about the Java Runtime Environment the application is running in.\npublic static class JavaInfo.JavaVendorInfo extends Object; // Information about the Java Vendor of the Java Runtime the application is running in.\npublic static class JavaInfo.JavaVirtualMachineInfo extends Object; // Information about the Java Virtual Machine the application is running in.\npublic class OsInfo extends Object; // Information about the Operating System the application is running on.\n", "des": "Support for providing information about an application."}
{"index": 3543, "repo": "opennlp-tools-2.2.0", "code": "package postag;\n\nInterface MutableTagDictionary; // Interface that allows TagDictionary entries to be added and removed.\nInterface POSContextGenerator; // Interface for a BeamSearchContextGenerator used in POS tagging.\nInterface POSTagger; // The interface for part of speech taggers.\nInterface POSTaggerEvaluationMonitor; // A marker interface for evaluating pos taggers.\nInterface TagDictionary; // Interface to determine which tags are valid for a particular word based on a tag dictionary.\nClass ConfigurablePOSContextGenerator; // A configurable context generator for a POSTagger.\nClass DefaultPOSContextGenerator; // A default context generator for a POSTagger.\nClass DefaultPOSSequenceValidator; // The default POS tagger SequenceValidator implementation.\nClass POSDictionary; // Provides a means of determining which tags are valid for a particular word based on a TagDictionary read from a file.\nClass POSEvaluator; // The POSEvaluator measures the performance of the given POSTagger with the provided reference samples.\nClass POSModel; // The POSModel is the model used by a learnable POSTagger.\nClass POSSample; // Represents an pos-tagged sentence.\nClass POSSampleEventStream; // Reads the samples from an Iterator and converts those samples into events which can be used by the maxent library for training.\nClass POSSampleSequenceStream; // A SequenceStream implementation encapsulating samples.\nClass POSTaggerCrossValidator;\nClass POSTaggerFactory; // The factory that provides POSTagger default implementations and resources.\nClass POSTaggerFactory.POSDictionarySerializer;\nClass POSTaggerME; // A part-of-speech tagger that uses maximum entropy.\nClass WordTagSampleStream; // A stream filter which reads a sentence per line which contains words and tags in word_tag format and outputs a POSSample objects.\n", "des": "Package related to part-of-speech tagging."}
{"index": 2907, "repo": "spring-aspects-6.0.11", "code": "package aspectj;\n\n@Configuration @Role(2) public class AspectJJtaTransactionManagementConfiguration extends AspectJTransactionManagementConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based annotation-driven transaction management for the JTA 1.2 Transactional annotation in addition to Spring's own Transactional annotation.\n@Configuration @Role(2) public class AspectJTransactionManagementConfiguration extends org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based annotation-driven transaction management for Spring's own Transactional annotation.\n", "des": "AspectJ-based transaction management support."}
{"index": 517, "repo": "commons-vfs2-2.9.0", "code": "package compressed;\n\nClass CompressedFileFileObject<FS extends CompressedFileFileSystem>; // A compressed file.\nClass CompressedFileFileProvider; // A file system provider for compressed files.\nClass CompressedFileFileSystem; // A read-only file system for compressed files.\n", "des": "The compressed file provider"}
{"index": 711, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package kafka;\n\nClass Kafka; // Factory class for Apache Kafka components.\nClass KafkaMessageDrivenChannelAdapterSpec<K,V,S extends KafkaMessageDrivenChannelAdapterSpec<K,V,S>>; // A MessageProducerSpec implementation for the KafkaMessageDrivenChannelAdapter.\nClass KafkaMessageDrivenChannelAdapterSpec.KafkaMessageDrivenChannelAdapterListenerContainerSpec<K,V>; // A ConcurrentMessageListenerContainer configuration KafkaMessageDrivenChannelAdapterSpec extension.\nClass KafkaMessageDrivenChannelAdapterSpec.KafkaMessageListenerContainerSpec<K,V>; // A helper class in the Builder pattern style to delegate options to the ConcurrentMessageListenerContainer.\nClass KafkaProducerMessageHandlerSpec<K,V>; // A MessageHandlerSpec implementation for the KafkaProducerMessageHandler.\nClass KafkaProducerMessageHandlerSpec.KafkaProducerMessageHandlerTemplateSpec<K,V>; // A KafkaTemplate-based KafkaProducerMessageHandlerSpec extension.\n", "des": "Provides Kafka Components support for Spring Integration Java DSL."}
{"index": 2772, "repo": "spring-jms-6.0.11", "code": "package support;\n\npublic abstract class JmsGatewaySupport extends Object implements org.springframework.beans.factory.InitializingBean; // Convenient superclass for application classes that need JMS access.\n", "des": "Classes supporting the org.springframework.jms.core package."}
{"index": 932, "repo": "commons-compress-1.23.0", "code": "package unpack200;\n\npackage unpack200.bytecode; // Internal package.\nInterface IMatcher; // Interface for a class that can perform matching on flag values.\nClass Archive; // Archive is the main entry point to unpack200.\nClass AttrDefinitionBands; // Attribute definition bands are the set of bands used to define extra attributes transmitted in the archive.\nClass AttributeLayout; // AttributeLayout defines a layout that describes how an attribute will be transmitted.\nClass AttributeLayoutMap; // Stores a mapping from attribute names to their corresponding layout types.\nClass BandSet; // Abstract superclass for a set of bands\nClass BcBands; // Bytecode bands\nClass ClassBands; // Class Bands\nClass CpBands; // Constant Pool bands\nClass FileBands; // Parses the file band headers (not including the actual bits themselves).\nClass IcBands; // Inner Class Bands\nClass IcTuple; // An IcTuple is the set of information that describes an inner class.\nClass MetadataBandGroup; // A group of metadata bands, such as class_RVA_bands, method_AD_bands etc.\nClass NewAttributeBands; // Set of bands relating to a non-predefined attribute\nClass NewAttributeBands.Callable;\nClass Pack200UnpackerAdapter; // This class provides the binding between the standard Pack200 interface and the internal interface for (un)packing.\nClass Segment; // A Pack200 archive consists of one or more segments.\nClass SegmentConstantPool; // SegmentConstantPool manages the constant pool used for re-creating class files.\nClass SegmentConstantPoolArrayCache; // The SegmentConstantPool spends a lot of time searching through large arrays of Strings looking for matches.\nClass SegmentHeader; // SegmentHeader is the header band of a Segment\nClass SegmentOptions; // Stores the combinations of bit flags that can be used in the segment header options.\nClass SegmentUtils; // Utility class for unpack200\n", "des": "Internal package."}
{"index": 3826, "repo": "lucene-analysis-common-9.7.0", "code": "package collation;\n\npackage collation.tokenattributes; // Custom AttributeImpl for indexing collation keys as index terms.\nClass CollationAttributeFactory; // Converts each token into its CollationKey, and then encodes the bytes as an index term.\nClass CollationDocValuesField; // Indexes collation keys as a single-valued SortedDocValuesField.\nClass CollationKeyAnalyzer; // Configures KeywordTokenizer with CollationAttributeFactory.\n", "des": "Unicode collation support."}
{"index": 310, "repo": "pdfbox-3.0.0-beta1", "code": "package viewerpreferences;\n\nClass PDViewerPreferences; // This is the document viewing preferences.\nEnum PDViewerPreferences.BOUNDARY; // Enumeration containing all valid values for boundaries.\nEnum PDViewerPreferences.DUPLEX; // Enumeration containing all valid values for duplex.\nEnum PDViewerPreferences.NON_FULL_SCREEN_PAGE_MODE; // Enumeration containing all valid values for NonFullScreenPageMode.\nEnum PDViewerPreferences.PRINT_SCALING; // Enumeration containing all valid values for printscaling.\nEnum PDViewerPreferences.READING_DIRECTION; // Enumeration containing all valid values for ReadingDirection.\n", "des": "A package to allow access to document viewing preferences."}
{"index": 2852, "repo": "spring-integration-core-6.1.2", "code": "package context;\n\npublic interface ExpressionCapable; // Components that implement this interface are capable of supporting a primary SpEL expression as part of their configuration.\npublic abstract class IntegrationContextUtils extends Object; // Utility methods for accessing common integration components from the BeanFactory.\npublic abstract class IntegrationObjectSupport extends Object implements org.springframework.beans.factory.BeanNameAware, NamedComponent, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean, ExpressionCapable; // A base class that provides convenient access to the bean factory as well as TaskScheduler and ConversionService instances.\npublic final class IntegrationProperties extends Object; // Utility class to encapsulate infrastructure Integration properties constants and their default values.\npublic interface Orderable extends org.springframework.core.Ordered; // Interface that extends Ordered while also exposing the Orderable.setOrder(int) as an interface-level so that it is avaiable on AOP proxies, etc.\npublic interface OrderlyShutdownCapable; // Interface for components that wish to be considered for an orderly shutdown using management interfaces.\n", "des": "Provides classes relating to application context configuration."}
{"index": 3047, "repo": "spring-web-6.0.11", "code": "package annotation;\n\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"DELETE\") public @interface DeleteExchange; // Shortcut for @HttpExchange for HTTP DELETE requests.\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"GET\") public @interface GetExchange; // Shortcut for @HttpExchange for HTTP GET requests.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Reflective(org.springframework.web.service.annotation.HttpExchangeReflectiveProcessor.class) public @interface HttpExchange; // Annotation to declare a method on an HTTP service interface as an HTTP endpoint.\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"PATCH\") public @interface PatchExchange; // Shortcut for @HttpExchange for HTTP PATCH requests.\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"POST\") public @interface PostExchange; // Shortcut for @HttpExchange for HTTP POST requests.\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"PUT\") public @interface PutExchange; // Shortcut for @HttpExchange for HTTP PUT requests.\n", "des": "Annotations for declaring HTTP service request methods."}
{"index": 3388, "repo": "commons-imaging-1.0-alpha3", "code": "package itu_t4;\n\nClass T4AndT6Compression;\n", "des": "Provides ITU-T T.4 and T.6 compression classes."}
{"index": 457, "repo": "camel-core-3.0.0-RC1", "code": "package transformer;\n\nClass CustomTransformerDefinition; // Represents a CustomTransformer.\nClass DataFormatTransformerDefinition; // Represents a DataFormatTransformer which leverages DataFormat to perform transformation.\nClass EndpointTransformerDefinition; // Represents an endpoint Transformer which leverages camel Endpoint to perform transformation.\nClass TransformerDefinition; // Represents a Transformer which declaratively transforms message content according to the input type declared by InputTypeDefinition and/or output type declared by OutputTypeDefinition.\nClass TransformersDefinition; // To configure transformers.\n", "des": "The JAXB POJOs for the Transformers used to transform message contents according to declared data types inside components"}
{"index": 2939, "repo": "groovy-4.0.13", "code": "package syntax;\n\npublic class ASTHelper extends Object; // A common base class of AST helper methods which can be shared across the classic and new parsers\npublic abstract class CSTNode extends Object; // An abstract base class for nodes in the concrete syntax tree that is the result of parsing.\npublic class Numbers extends Object; // Helper class for processing Groovy numeric literals.\npublic class ParserException extends TokenException;\npublic class ReadException extends GroovyException; // Encapsulates non-specific i/o exceptions.\npublic class Reduction extends CSTNode; // A syntax reduction, produced by the Parser.\npublic class RuntimeParserException extends GroovyRuntimeException; // A helper class to allow parser exceptions to be thrown anywhere in the code.\npublic class SyntaxException extends GroovyException; // Base exception indicating a syntax error.\npublic class Token extends CSTNode; // A CSTNode produced by the Lexer.\npublic class TokenException extends SyntaxException;\npublic class TokenMismatchException extends TokenException;\npublic class TokenUtil extends Object; // Utility methods for working with Tokens.\npublic class Types extends Object; // Typing information for the CST system.\n", "des": "Lexer, parser and trees."}
{"index": 2274, "repo": "spring-vault-core-3.0.4", "code": "package support;\n\npublic abstract class AbstractResult<V> extends Object; // Supporting class for computation results allowing introspection of the result value.\npublic class Certificate extends Object; // Value object representing a certificate consisting of the certificate and the issuer certificate.\npublic class CertificateBundle extends Certificate; // Value object representing a certificate bundle consisting of a private key, the certificate and the issuer certificate.\npublic class Ciphertext extends Object; // Value object representing cipher text with an optional VaultTransitContext.\npublic class ClientOptions extends Object; // Client options for Vault.\npublic class DurationParser extends Object; // Utility to parse a Go format duration into Duration.\npublic class Hmac extends Object; // Value object representing Hmac digest.\npublic abstract class JsonMapFlattener extends Object; // Flattens a hierarchical Map of objects into a property Map.\n@FunctionalInterface public interface LeaseStrategy; // Strategy interface to control whether to retain or drop a Lease after a failure.\npublic class PemObject extends Object; // Represents a PEM object that is internally decoded to a DER object.\npublic class Plaintext extends Object; // Value object representing plain text with an optional VaultTransitContext.\npublic class Policy extends Object; // Value object representing a Vault policy associated with Policy.Rules.\npublic static enum Policy.BuiltinCapabilities extends Enum<Policy.BuiltinCapabilities> implements Policy.Capability; // Built-in Vault capabilities.\npublic static interface Policy.Capability; // Capability interface representing capability literals.\npublic static class Policy.Rule extends Object; // Value object representing a rule for a certain path.\npublic static class Policy.Rule.RuleBuilder extends Object; // Builder for a Policy.Rule.\npublic interface RawTransitKey; // A exported raw key inside Vault's transit backend.\npublic class Signature extends Object; // Value object representing a Signature.\npublic class SignatureValidation extends Object; // Value object representing the result of a Signature validation.\npublic class SslConfiguration extends Object; // SSL configuration.\npublic static class SslConfiguration.KeyConfiguration extends Object; // Configuration for a key in a keystore.\npublic static class SslConfiguration.KeyStoreConfiguration extends Object; // Configuration for a key store/trust store.\npublic class TransformCiphertext extends Object; // Value object representing cipher text with an optional VaultTransformContext.\npublic class TransformPlaintext extends Object; // Value object representing plain text with an optional VaultTransformContext.\n", "des": "Classes supporting the Vault packages, such as value objects."}
{"index": 1790, "repo": "spring-integration-file-6.1.2", "code": "package server;\n\npublic abstract class FileServerEvent extends org.springframework.integration.events.IntegrationEvent; // Base class for file server events.\n", "des": "Provides classes related to file servers."}
{"index": 150, "repo": "ignite-core-2.15.0", "code": "package affinity;\n\nInterface AffinityAssignment; // Cached affinity calculations.\nInterface HistoryAffinityAssignment; // Interface for historical calculated affinity assignment.\nClass AffinityTopologyVersion;\nClass GridAffinityAssignment;\nClass GridAffinityAssignmentCache; // Affinity cached function.\nClass GridAffinityAssignmentV2; // Cached affinity calculations V2.\nClass GridAffinityFunctionContextImpl; // Cache affinity function context implementation.\nClass GridAffinityProcessor; // Data affinity processor.\nClass HistoryAffinityAssignmentImpl; // Heap-space optimized version of calculated affinity assignment.\nClass HistoryAffinityAssignmentShallowCopy; // Shallow copy that contains reference to delegate HistoryAffinityAssignment.\nClass IdealAffinityAssignment;\n", "des": "Data affinity processor."}
{"index": 803, "repo": "lucene-analyzers-common-8.11.2", "code": "package ru;\n\nClass RussianAnalyzer; // Analyzer for Russian language.\nClass RussianLightStemFilter; // A TokenFilter that applies RussianLightStemmer to stem Russian words.\nClass RussianLightStemFilterFactory; // Factory for RussianLightStemFilter.\nClass RussianLightStemmer; // Light Stemmer for Russian.\n", "des": "Analyzer for Russian."}
{"index": 2367, "repo": "camel-base-4.0.0-RC1", "code": "package converter;\n\npublic class AnnotationTypeConverterLoader extends Object implements org.apache.camel.spi.TypeConverterLoader; // A class which will auto-discover Converter objects and methods to pre-load the TypeConverterRegistry of converters on startup.\npublic class ArrayTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A type converter which is used to convert to and from array types particularly for derived types of array component types and dealing with primitive array types.\npublic class AsyncProcessorTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A simple converter that can convert any Processor to an AsyncProcessor.\npublic abstract class BaseTypeConverterRegistry extends CoreTypeConverterRegistry; // Base implementation of a type converter registry used for type converters in Camel.\npublic class CoreTypeConverterRegistry extends org.apache.camel.support.service.ServiceSupport implements org.apache.camel.TypeConverter, org.apache.camel.spi.TypeConverterRegistry;\npublic static class CoreTypeConverterRegistry.FallbackTypeConverter extends Object; // Represents a fallback type converter\npublic class DefaultTypeConverter extends BaseTypeConverterRegistry implements org.apache.camel.spi.AnnotationScanTypeConverters; // Default implementation of a type converter registry used for type converters in Camel.\npublic class EnumTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A type converter which is used to convert from String to enum type\npublic final class FutureTypeConverter extends org.apache.camel.support.TypeConverterSupport; // Future type converter.\npublic class InstanceMethodFallbackTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A TypeConverter implementation which instantiates an object so that an instance method can be used as a fallback type converter\npublic class InstanceMethodTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A TypeConverter implementation which instantiates an object so that an instance method can be used as a type converter\npublic class StaticMethodFallbackTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A TypeConverter implementation which invokes a static method as a fallback type converter from a type to another type\npublic class StaticMethodTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A TypeConverter implementation which invokes a static method to convert from a type to another type\n", "des": "Default implementation classes the Type Conversion Strategies"}
{"index": 819, "repo": "lucene-analyzers-common-8.11.2", "code": "package ext;\n\nClass ArabicStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass ArmenianStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass BasqueStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass CatalanStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass DanishStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass DutchStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass EnglishStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass EstonianStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass FinnishStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass FrenchStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass German2Stemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass GermanStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass HungarianStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\nClass IrishStemmer; // This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.\n", "des": "Autogenerated snowball stemmer implementations."}
{"index": 755, "repo": "lucene-analyzers-common-8.11.2", "code": "package ar;\n\nClass ArabicAnalyzer; // Analyzer for Arabic.\nClass ArabicNormalizationFilter; // A TokenFilter that applies ArabicNormalizer to normalize the orthography.\nClass ArabicNormalizationFilterFactory; // Factory for ArabicNormalizationFilter.\nClass ArabicNormalizer; // Normalizer for Arabic.\nClass ArabicStemFilter; // A TokenFilter that applies ArabicStemmer to stem Arabic words..\nClass ArabicStemFilterFactory; // Factory for ArabicStemFilter.\nClass ArabicStemmer; // Stemmer for Arabic.\n", "des": "Analyzer for Arabic."}
{"index": 3293, "repo": "opencms-core-15.0", "code": "package letsencrypt;\n\nInterface I_CmsLetsEncryptUpdater; // Interface for classes which should handle an updated certificate configuration.\nClass CmsLetsEncryptConfiguration; // Configuration class containing the LetsEncrypt configuration settings OpenCms needed by OpenCms.\nClass CmsLetsEncryptUpdater; // Updates the certificate configuration for the LetsEncrypt container.\nClass CmsSiteConfigToLetsEncryptConfigConverter; // Class which converts the OpenCms site configuration to a certificate configuration for the LetsEncrypt docker instance.\nClass CmsSiteConfigToLetsEncryptConfigConverter.DomainGrouping; // Represents a grouping of domains into certificates.\nClass CmsSiteConfigToLetsEncryptConfigConverter.SiteDomainInfo; // Represents the domain information for a single site.\nEnum CmsLetsEncryptConfiguration.Mode; // Enum which represents different modes that control which domains OpenCms puts into the certificate configuration.\nEnum CmsLetsEncryptConfiguration.Trigger; // Enum which represents the different types of events that LetsEncrypt updates should be triggered by.\n", "des": "Classes related to the LetsEncrypt docker integration."}
{"index": 1423, "repo": "spring-boot-actuator-3.1.1", "code": "package jetty;\n\npublic abstract class AbstractJettyMetricsBinder extends Object implements org.springframework.context.ApplicationListener<org.springframework.boot.context.event.ApplicationStartedEvent>; // Base class for binding Jetty metrics in response to an ApplicationStartedEvent.\npublic class JettyConnectionMetricsBinder extends AbstractJettyMetricsBinder; // AbstractJettyMetricsBinder for JettyConnectionMetrics.\npublic class JettyServerThreadPoolMetricsBinder extends AbstractJettyMetricsBinder; // AbstractJettyMetricsBinder for JettyServerThreadPoolMetrics.\npublic class JettySslHandshakeMetricsBinder extends AbstractJettyMetricsBinder; // AbstractJettyMetricsBinder for JettySslHandshakeMetrics.\n", "des": "Actuator support for Jetty metrics."}
{"index": 2603, "repo": "wicket-util-10.0.0-M1", "code": "package convert;\n\npackage convert.converter; // Default converter implementations.\npublic class ConversionException extends RuntimeException; // Thrown for conversion exceptions.\npublic interface IConverter<C> extends IClusterable; // Converts input to output and vice versa.\npublic class MaskConverter<C> extends Object implements IConverter<C>; // A converter that takes a mask into account.\n", "des": "Conversion support."}
{"index": 3439, "repo": "hibernate-core-5.6.15.Final", "code": "package context;\n\npackage context.spi; // SPI level contracts around \"current session\" support.\nClass TenantIdentifierMismatchException; // Indicates that tenant identifiers did not match in cases where CurrentTenantIdentifierResolver.validateExistingCurrentSessions() returns true and there is a mismatch found.\n", "des": "Defines support for \"current session\" feature."}
{"index": 3757, "repo": "lucene-facet-9.7.0", "code": "package sortedset;\n\nClass ConcurrentSortedSetDocValuesFacetCounts; // Like SortedSetDocValuesFacetCounts, but aggregates counts concurrently across segments.\nClass DefaultSortedSetDocValuesReaderState; // Default implementation of SortedSetDocValuesFacetCounts.\nClass SortedSetDocValuesFacetCounts; // Compute facets counts from previously indexed SortedSetDocValuesFacetField, without require a separate taxonomy index.\nClass SortedSetDocValuesFacetField; // Add an instance of this to your Document for every facet label to be indexed via SortedSetDocValues.\nClass SortedSetDocValuesReaderState; // Wraps a IndexReader and resolves ords using existing SortedSetDocValues APIs without a separate taxonomy index.\nClass SortedSetDocValuesReaderState.DimTree; // Holds children and sibling information for a single dimension.\nClass SortedSetDocValuesReaderState.OrdRange; // Holds start/end range of ords, which maps to one dimension.\n", "des": "Provides faceting capabilities over facets that were indexed with SortedSetDocValuesFacetField."}
{"index": 1414, "repo": "spring-boot-actuator-3.1.1", "code": "package cache;\n\npublic class Cache2kCacheMeterBinderProvider extends Object implements CacheMeterBinderProvider<org.cache2k.extra.spring.SpringCache2kCache>; // CacheMeterBinderProvider implementation for cache2k.\n@FunctionalInterface public interface CacheMeterBinderProvider<C extends org.springframework.cache.Cache>; // Provide a MeterBinder based on a Cache.\npublic class CacheMetricsRegistrar extends Object; // Register supported Cache to a MeterRegistry.\npublic class CaffeineCacheMeterBinderProvider extends Object implements CacheMeterBinderProvider<org.springframework.cache.caffeine.CaffeineCache>; // CacheMeterBinderProvider implementation for Caffeine.\n@ImportRuntimeHints(org.springframework.boot.actuate.metrics.cache.HazelcastCacheMeterBinderProvider.HazelcastCacheMeterBinderProviderRuntimeHints.class) public class HazelcastCacheMeterBinderProvider extends Object implements CacheMeterBinderProvider<com.hazelcast.spring.cache.HazelcastCache>; // CacheMeterBinderProvider implementation for Hazelcast.\npublic class JCacheCacheMeterBinderProvider extends Object implements CacheMeterBinderProvider<org.springframework.cache.jcache.JCacheCache>; // CacheMeterBinderProvider implementation for JCache.\npublic class RedisCacheMeterBinderProvider extends Object implements CacheMeterBinderProvider<org.springframework.data.redis.cache.RedisCache>; // CacheMeterBinderProvider implementation for Redis.\npublic class RedisCacheMetrics extends io.micrometer.core.instrument.binder.cache.CacheMeterBinder<org.springframework.data.redis.cache.RedisCache>; // CacheMeterBinder for RedisCache.\n", "des": "Actuator support for cache metrics."}
{"index": 2758, "repo": "spring-beans-6.0.11", "code": "package config;\n\npublic abstract class AbstractFactoryBean<T> extends Object implements FactoryBean<T>, BeanClassLoaderAware, BeanFactoryAware, InitializingBean, DisposableBean; // Simple template superclass for FactoryBean implementations that creates a singleton or a prototype object, depending on a flag.\npublic interface AutowireCapableBeanFactory extends BeanFactory; // Extension of the BeanFactory interface to be implemented by bean factories that are capable of autowiring, provided that they want to expose this functionality for existing bean instances.\npublic final class AutowiredPropertyMarker extends Object implements Serializable; // Simple marker class for an individually autowired property value, to be added to BeanDefinition.getPropertyValues() for a specific bean property.\npublic interface BeanDefinition extends org.springframework.core.AttributeAccessor, BeanMetadataElement; // A BeanDefinition describes a bean instance, which has property values, constructor argument values, and further information supplied by concrete implementations.\n@FunctionalInterface public interface BeanDefinitionCustomizer; // Callback for customizing a given bean definition.\npublic class BeanDefinitionHolder extends Object implements BeanMetadataElement; // Holder for a BeanDefinition with name and aliases.\npublic class BeanDefinitionVisitor extends Object; // Visitor class for traversing BeanDefinition objects, in particular the property values and constructor argument values contained in them, resolving bean metadata values.\npublic class BeanExpressionContext extends Object; // Context object for evaluating an expression within a bean definition.\npublic interface BeanExpressionResolver; // Strategy interface for resolving a value by evaluating it as an expression, if applicable.\n@FunctionalInterface public interface BeanFactoryPostProcessor; // Factory hook that allows for custom modification of an application context's bean definitions, adapting the bean property values of the context's underlying bean factory.\npublic interface BeanPostProcessor; // Factory hook that allows for custom modification of new bean instances â€” for example, checking for marker interfaces or wrapping beans with proxies.\npublic interface BeanReference extends BeanMetadataElement; // Interface that exposes a reference to a bean name in an abstract fashion.\npublic interface ConfigurableBeanFactory extends HierarchicalBeanFactory, SingletonBeanRegistry; // Configuration interface to be implemented by most bean factories.\npublic interface ConfigurableListableBeanFactory extends ListableBeanFactory, AutowireCapableBeanFactory, ConfigurableBeanFactory; // Configuration interface to be implemented by most listable bean factories.\n", "des": "SPI interfaces and configuration-related convenience classes for bean factories."}
{"index": 1193, "repo": "commons-math3-3.6.1", "code": "package jacobian;\n\nClass AbstractLeastSquaresOptimizer; // All classes and interfaces in this package are deprecated.\nClass GaussNewtonOptimizer; // All classes and interfaces in this package are deprecated.\nClass LevenbergMarquardtOptimizer; // All classes and interfaces in this package are deprecated.\n", "des": "This package provides optimization algorithms that require derivatives."}
{"index": 1391, "repo": "spring-boot-actuator-3.1.1", "code": "package annotation;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @EndpointExtension(filter=org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpointFilter.class) public @interface EndpointJmxExtension; // Identifies a type as being a JMX-specific extension of an @Endpoint.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Endpoint @FilteredEndpoint(org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpointFilter.class) public @interface JmxEndpoint; // Identifies a type as being an endpoint that is only exposed over JMX.\n@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpointDiscoverer.JmxEndpointDiscovererRuntimeHints.class) public class JmxEndpointDiscoverer extends EndpointDiscoverer<ExposableJmxEndpoint,JmxOperation> implements JmxEndpointsSupplier; // EndpointDiscoverer for JMX endpoints.\n", "des": "Annotation support for actuator JMX endpoints."}
{"index": 2399, "repo": "spring-batch-core-5.0.2", "code": "package repository;\n\npackage repository.dao; // Specific implementations of dao concerns.\npackage repository.support; // Specific implementations of repository concerns.\npublic interface ExecutionContextSerializer extends org.springframework.core.serializer.Serializer<Map<String,Object>>, org.springframework.core.serializer.Deserializer<Map<String,Object>>; // A composite interface that combines both serialization and deserialization of an execution context into a single implementation.\npublic class JobExecutionAlreadyRunningException extends JobExecutionException;\npublic class JobInstanceAlreadyCompleteException extends JobExecutionException; // An exception indicating an illegal attempt to restart a job that was already completed successfully.\npublic interface JobRepository; // Repository responsible for persistence of batch meta-data entities.\npublic class JobRestartException extends JobExecutionException; // An exception indicating an illegal attempt to restart a job.\n", "des": "Interfaces and generic implementations of repository concerns."}
{"index": 1034, "repo": "hadoop-aws-3.3.6", "code": "package prefetch;\n\nClass S3ABlockManager; // Provides read access to S3 file one block at a time.\nClass S3ACachingBlockManager; // Provides access to S3 file one block at a time.\nClass S3ACachingInputStream; // Provides an InputStream that allows reading from an S3 file.\nClass S3AInMemoryInputStream; // Provides an InputStream that allows reading from an S3 file.\nClass S3APrefetchingInputStream; // Enhanced InputStream for reading from S3.\nClass S3ARemoteInputStream; // Provides an InputStream that allows reading from an S3 file.\nClass S3ARemoteObject; // Encapsulates low level interactions with S3 object on AWS.\nClass S3ARemoteObjectReader; // Provides functionality to read S3 file one block at a time.\n", "des": "High performance s3 input stream which reads in blocks and can cache blocks in the local filesystem."}
{"index": 2582, "repo": "camel-api-4.0.0-RC1", "code": "package jsse;\n\npublic class AliasedX509ExtendedKeyManager extends X509ExtendedKeyManager; // KeyManager to select a key with desired alias while delegating processing to specified KeyManager Can be used both with server and client sockets\npublic abstract class BaseSSLContextParameters extends JsseParameters; // Represents configuration options that can be applied in the client-side or server-side context depending on what they are applied to.\nprotected static final class BaseSSLContextParameters.SSLContextDecorator extends SSLContext; // Makes a decorated SSLContext appear as a normal SSLContext.\nprotected static final class BaseSSLContextParameters.SSLContextSpiDecorator extends SSLContextSpi; // Class needed to provide decoration of an existing SSLContext.\nprotected static final class BaseSSLContextParameters.SSLServerSocketFactoryDecorator extends SSLServerSocketFactory; // A decorator that enables the application of configuration options to be applied to created sockets even after this factory has been created and turned over to client code.\nprotected static final class BaseSSLContextParameters.SSLSocketFactoryDecorator extends SSLSocketFactory; // A decorator that enables the application of configuration options to be applied to created sockets even after this factory has been created and turned over to client code.\npublic class CipherSuitesParameters extends Object; // Represents a list of TLS/SSL cipher suite names.\npublic enum ClientAuthentication extends Enum<ClientAuthentication>; // Represents the options for the client authentication settings of a server socket.\npublic class FilterParameters extends JsseParameters; // Represents a set of regular expression based filter patterns for including and excluding content of some type.\npublic static class FilterParameters.Patterns extends Object; // An immutable collection of compiled includes and excludes filter Patterns.\npublic interface GlobalSSLContextParametersSupplier extends Supplier<SSLContextParameters>; // A global Supplier of SSLContextParameters to be used in Camel registry.\npublic class JsseParameters extends Object implements CamelContextAware; // Base class that provides optional integration with core Camel capabilities.\npublic class KeyManagersParameters extends JsseParameters; // A representation of configuration options for creating and loading KeyManager instance(s).\npublic class KeyStoreParameters extends JsseParameters; // A representation of configuration options for creating and loading a KeyStore instance.\npublic class SecureRandomParameters extends JsseParameters;\npublic class SecureSocketProtocolsParameters extends Object; // Represents a list of TLS/SSL cipher suite names.\n", "des": "A collection of utility classes for configuring a JSSE SSLContext and other JSSE classes."}
{"index": 2324, "repo": "spring-boot-3.1.1", "code": "package reactor;\n\npublic class DebugAgentEnvironmentPostProcessor extends Object implements EnvironmentPostProcessor, org.springframework.core.Ordered; // EnvironmentPostProcessor to enable the Reactor Debug Agent if available.\n", "des": "Support classes for Reactor integration."}
{"index": 3701, "repo": "solr-core-9.3.0", "code": "package join;\n\nClass BlockJoinChildQParser;\nClass BlockJoinChildQParserPlugin; // Usage: {!child of=\"PARENT:true\"}PARENT_PRICE:10\nClass BlockJoinParentQParser;\nClass BlockJoinParentQParserPlugin; // Usage: {!parent which=\"PARENT:true\"}CHILD_PRICE:10 supports optional score parameter with one of ScoreMode values: None,Avg,Total,Min,Max.\nClass ChildFieldValueSourceParser;\nClass CrossCollectionJoinQParser;\nClass CrossCollectionJoinQuery;\nClass FiltersQParser;\nClass FiltersQParserPlugin;\nClass GraphPointsCollector;\nClass GraphQParserPlugin; // Query parser plugin for solr to wrap the graph query parser.\nClass GraphQuery; // GraphQuery - search for nodes and traverse edges in an index.\nClass GraphQueryParser; // Solr query parser that will handle parsing graph query requests.\nClass HashRangeQParser;\nClass HashRangeQParserPlugin; // Matches documents where the specified field hashes to a value within the given range.\nClass HashRangeQuery;\nClass MultiValueTermOrdinalCollector; // Populates a bitset of (top-level) ordinals based on field values in a multi-valued field.\nClass ScoreJoinQParserPlugin; // Create a query-time join query with scoring.\n", "des": "Classes related to joins."}
{"index": 2620, "repo": "spring-integration-jms-6.1.2", "code": "package jms;\n\npackage jms.config; // Provides classes for configuration - parsers, namespace handlers, factory beans.\npackage jms.dsl; // Provides JMS Component support for the Java DSL.\npublic abstract class AbstractJmsChannel extends org.springframework.integration.channel.AbstractMessageChannel;\npublic class ChannelPublishingJmsMessageListener extends Object implements org.springframework.jms.listener.SessionAwareMessageListener<jakarta.jms.Message>, org.springframework.beans.factory.InitializingBean, org.springframework.integration.support.management.TrackableComponent, org.springframework.beans.factory.BeanFactoryAware; // JMS MessageListener that converts a JMS Message into a Spring Integration Message and sends that Message to a channel.\npublic class DefaultJmsHeaderMapper extends JmsHeaderMapper; // Default implementation of JmsHeaderMapper.\npublic class DynamicJmsTemplate extends org.springframework.jms.core.JmsTemplate;\npublic class JmsDestinationPollingSource extends org.springframework.integration.endpoint.AbstractMessageSource<Object>; // A source for receiving JMS Messages with a polling listener.\npublic abstract class JmsHeaderMapper extends Object implements org.springframework.integration.mapping.HeaderMapper<jakarta.jms.Message>; // Strategy interface for mapping integration Message headers to an outbound JMS Message (e.g.\npublic class JmsInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport implements org.springframework.integration.context.OrderlyShutdownCapable; // A wrapper around the JmsMessageDrivenEndpoint implementing MessagingGatewaySupport.\npublic class JmsMessageDrivenEndpoint extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.integration.context.OrderlyShutdownCapable; // A message-driven endpoint that receive JMS messages, converts them into Spring Integration Messages, and then sends the result to a channel.\npublic class JmsOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements org.springframework.integration.support.management.ManageableLifecycle, jakarta.jms.MessageListener; // An outbound Messaging Gateway for request/reply JMS.\npublic static class JmsOutboundGateway.ReplyContainerProperties extends Object;\n", "des": "Base package for JMS Support."}
{"index": 654, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package scheduler;\n\nClass DistributedOpportunisticContainerAllocator; // The DistributedOpportunisticContainerAllocator allocates containers on a given list of nodes, after modifying the container sizes to respect the limits set by the ResourceManager.\nClass OpportunisticContainerAllocator; // Base abstract class for Opportunistic container allocations, that provides common functions required for Opportunistic container allocation.\nClass OpportunisticContainerAllocator.Allocation; // This class encapsulates container and resourceName for an allocation.\nClass OpportunisticContainerAllocator.AllocationParams; // This class encapsulates application specific parameters used to build a Container.\nClass OpportunisticContainerAllocator.ContainerIdGenerator; // A Container Id Generator.\nClass OpportunisticContainerAllocator.EnrichedResourceRequest; // This class encapsulates Resource Request and provides requests per node and rack.\nClass OpportunisticContainerAllocator.PartitionedResourceRequests; // Class that includes two lists of ResourceRequests: one for GUARANTEED and one for OPPORTUNISTIC ResourceRequests.\nClass OpportunisticContainerContext; // This encapsulates application specific information used by the Opportunistic Container Allocator to allocate containers.\nClass ResourceRequestSet; // A set of resource requests of the same scheduler key ResourceRequestSetKey.\nClass ResourceRequestSetKey; // The scheduler key for a group of ResourceRequest.\nClass SchedulerRequestKey; // Composite key for outstanding scheduler requests for any schedulable entity.\n", "des": "Utility classes used for Scheduling."}
{"index": 2958, "repo": "spring-integration-redis-6.1.2", "code": "package channel;\n\npublic class SubscribableRedisChannel extends org.springframework.integration.channel.AbstractMessageChannel implements org.springframework.integration.channel.BroadcastCapableChannel, org.springframework.integration.support.management.ManageableSmartLifecycle; // An AbstractMessageChannel implementation with BroadcastCapableChannel aspect to provide a pub-sub semantics to consume messages fgrom Redis topic.\n", "des": "Provides classes related to Redis-backed channels."}
{"index": 2881, "repo": "spring-integration-core-6.1.2", "code": "package splitter;\n\npublic abstract class AbstractMessageSplitter extends AbstractReplyProducingMessageHandler implements DiscardingMessageHandler; // Base class for Message-splitting handlers.\npublic class DefaultMessageSplitter extends AbstractMessageSplitter; // The default Message Splitter implementation.\npublic class ExpressionEvaluatingSplitter extends AbstractMessageSplitter; // A Message Splitter implementation that evaluates the specified SpEL expression.\npublic class MethodInvokingSplitter extends AbstractMessageSplitter; // A Message Splitter implementation that invokes the specified method on the given object.\n", "des": "Provides classes supporting the splitter pattern."}
{"index": 3021, "repo": "spring-web-6.0.11", "code": "package bind;\n\npackage bind.annotation; // Annotations for binding requests to controllers and handler methods as well as for binding request parameters to method arguments.\npackage bind.support; // Support classes for web data binding.\npublic class EscapedErrors extends Object implements org.springframework.validation.Errors; // Errors wrapper that adds automatic HTML escaping to the wrapped instance, for convenient usage in HTML views.\npublic class MethodArgumentNotValidException extends org.springframework.validation.BindException implements ErrorResponse; // Exception to be thrown when validation on an argument annotated with @Valid fails.\npublic class MissingMatrixVariableException extends MissingRequestValueException; // ServletRequestBindingException subclass that indicates that a matrix variable expected in the method parameters of an @RequestMapping method is not present among the matrix variables extracted from the URL.\npublic class MissingPathVariableException extends MissingRequestValueException; // ServletRequestBindingException subclass that indicates that a path variable expected in the method parameters of an @RequestMapping method is not present among the URI variables extracted from the URL.\npublic class MissingRequestCookieException extends MissingRequestValueException; // ServletRequestBindingException subclass that indicates that a request cookie expected in the method parameters of an @RequestMapping method is not present.\npublic class MissingRequestHeaderException extends MissingRequestValueException; // ServletRequestBindingException subclass that indicates that a request header expected in the method parameters of an @RequestMapping method is not present.\npublic class MissingRequestValueException extends ServletRequestBindingException; // Base class for ServletRequestBindingException exceptions that could not bind because the request value is required but is either missing or otherwise resolves to null after conversion.\npublic class MissingServletRequestParameterException extends MissingRequestValueException; // ServletRequestBindingException subclass that indicates a missing parameter.\npublic class ServletRequestBindingException extends ServletException implements ErrorResponse; // Fatal binding exception, thrown when we want to treat binding exceptions as unrecoverable.\npublic class ServletRequestDataBinder extends WebDataBinder; // Special DataBinder to perform data binding from servlet request parameters to JavaBeans, including support for multipart files.\npublic class ServletRequestParameterPropertyValues extends org.springframework.beans.MutablePropertyValues; // PropertyValues implementation created from parameters in a ServletRequest.\npublic abstract class ServletRequestUtils extends Object; // Parameter extraction methods, for an approach distinct from data binding, in which parameters of specific types are required.\n", "des": "Provides web-specific data binding functionality."}
{"index": 2895, "repo": "spring-integration-core-6.1.2", "code": "package support;\n\npublic abstract class AbstractHeaderValueMessageProcessor<T> extends Object implements HeaderValueMessageProcessor<T>;\npublic final class AvroHeaders extends Object; // Pre-defined names and prefixes for Apache Avro related headers.\npublic class ExpressionEvaluatingHeaderValueMessageProcessor<T> extends AbstractHeaderValueMessageProcessor<T> implements org.springframework.beans.factory.BeanFactoryAware;\npublic interface HeaderValueMessageProcessor<T> extends MessageProcessor<T>;\npublic class MessageProcessingHeaderValueMessageProcessor extends AbstractHeaderValueMessageProcessor<Object> implements org.springframework.beans.factory.BeanFactoryAware;\npublic final class ProtoHeaders extends Object; // Pre-defined names and prefixes for Protocol Buffers related headers.\npublic class RoutingSlipHeaderValueMessageProcessor extends AbstractHeaderValueMessageProcessor<Map<List<Object>,Integer>> implements org.springframework.beans.factory.BeanFactoryAware; // The RoutingSlip HeaderValueMessageProcessor specific implementation.\npublic class StaticHeaderValueMessageProcessor<T> extends AbstractHeaderValueMessageProcessor<T>;\n", "des": "Contains support classes for Transformers."}
{"index": 764, "repo": "lucene-analyzers-common-8.11.2", "code": "package commongrams;\n\nClass CommonGramsFilter; // Construct bigrams for frequently occurring terms while indexing.\nClass CommonGramsFilterFactory; // Constructs a CommonGramsFilter.\nClass CommonGramsQueryFilter; // Wrap a CommonGramsFilter optimizing phrase queries by only returning single words when they are not a member of a bigram.\nClass CommonGramsQueryFilterFactory; // Construct CommonGramsQueryFilter.\n", "des": "Construct n-grams for frequently occurring terms and phrases."}
{"index": 237, "repo": "nutch-2.4", "code": "package seed;\n\nClass SeedListsPage; // This page is for seed lists management\nClass SeedPage; // This page is for seed urls management\n", "des": "Contains seed pages' classes for Web UI"}
{"index": 677, "repo": "commons-lang3-3.12.0", "code": "package time;\n\nInterface DateParser; // DateParser is the \"missing\" interface for the parsing methods of DateFormat.\nInterface DatePrinter; // DatePrinter is the \"missing\" interface for the format methods of DateFormat.\nClass CalendarUtils; // Helps use Calendars.\nClass DateFormatUtils; // Date and time formatting utilities and constants.\nClass DateUtils; // A suite of utilities surrounding the use of the Calendar and Date object.\nClass DurationFormatUtils; // Duration formatting utilities and constants.\nClass DurationUtils; // Utilities for Duration.\nClass FastDateFormat; // FastDateFormat is a fast and thread-safe version of SimpleDateFormat.\nClass FastDateParser; // FastDateParser is a fast and thread-safe version of SimpleDateFormat.\nClass FastDatePrinter; // FastDatePrinter is a fast and thread-safe version of SimpleDateFormat.\nClass FastTimeZone; // Faster methods to produce custom time zones.\nClass StopWatch; // StopWatch provides a convenient API for timings.\nClass TimeZones; // Helps to deal with TimeZones.\n", "des": "Provides classes and methods to work with dates and durations."}
{"index": 3028, "repo": "spring-web-6.0.11", "code": "package request;\n\npackage request.async; // Support for asynchronous request processing.\npublic abstract class AbstractRequestAttributes extends Object implements RequestAttributes; // Abstract support class for RequestAttributes implementations, offering a request completion mechanism for request-specific destruction callbacks and for updating accessed session attributes.\npublic abstract class AbstractRequestAttributesScope extends Object implements org.springframework.beans.factory.config.Scope; // Abstract Scope implementation that reads from a particular scope in the current thread-bound RequestAttributes object.\npublic interface AsyncWebRequestInterceptor extends WebRequestInterceptor; // Extends WebRequestInterceptor with a callback method invoked during asynchronous request handling.\npublic class DestructionCallbackBindingListener extends Object implements HttpSessionBindingListener, Serializable; // Adapter that implements the Servlet HttpSessionBindingListener interface, wrapping a session destruction callback.\npublic class FacesRequestAttributes extends Object implements RequestAttributes; // RequestAttributes adapter for a JSF FacesContext.\npublic class FacesWebRequest extends FacesRequestAttributes implements NativeWebRequest; // WebRequest adapter for a JSF FacesContext.\npublic interface NativeWebRequest extends WebRequest; // Extension of the WebRequest interface, exposing the native request and response objects in a generic fashion.\npublic interface RequestAttributes; // Abstraction for accessing attribute objects associated with a request.\npublic abstract class RequestContextHolder extends Object; // Holder class to expose the web request in the form of a thread-bound RequestAttributes object.\npublic class RequestContextListener extends Object implements ServletRequestListener; // Servlet listener that exposes the request to the current thread, through both LocaleContextHolder and RequestContextHolder.\npublic class RequestScope extends AbstractRequestAttributesScope; // Request-backed Scope implementation.\npublic class ServletRequestAttributes extends AbstractRequestAttributes; // Servlet-based implementation of the RequestAttributes interface.\npublic class ServletWebRequest extends ServletRequestAttributes implements NativeWebRequest; // WebRequest adapter for an HttpServletRequest.\npublic class SessionScope extends AbstractRequestAttributesScope; // Session-backed Scope implementation.\npublic interface WebRequest extends RequestAttributes; // Generic interface for a web request.\npublic interface WebRequestInterceptor; // Interface for general web request interception.\n", "des": "Support for generic request context holding, in particular for scoping of application objects per HTTP request or HTTP session."}
{"index": 2996, "repo": "spring-web-6.0.11", "code": "package client;\n\npackage client.observation; // This package provides support for client HTTP Observation.\npackage client.reactive; // Abstractions for reactive HTTP client support including ClientHttpRequest and ClientHttpResponse as well as a ClientHttpConnector.\npackage client.support; // This package provides generic HTTP support classes, to be used by higher-level classes like RestTemplate.\npublic abstract class AbstractClientHttpRequest extends Object implements ClientHttpRequest; // Abstract base for ClientHttpRequest that makes sure that headers and body are not written multiple times.\npublic abstract class AbstractClientHttpRequestFactoryWrapper extends Object implements ClientHttpRequestFactory; // Abstract base class for ClientHttpRequestFactory implementations that decorate another request factory.\n@Deprecated(since=\"6.0\") public abstract class AbstractClientHttpResponse extends Object implements ClientHttpResponse;\npublic class BufferingClientHttpRequestFactory extends AbstractClientHttpRequestFactoryWrapper; // Wrapper for a ClientHttpRequestFactory that buffers all outgoing and incoming streams in memory.\npublic interface ClientHttpRequest extends HttpRequest, HttpOutputMessage; // Represents a client-side HTTP request.\n@FunctionalInterface public interface ClientHttpRequestExecution; // Represents the context of a client-side HTTP request execution.\n@FunctionalInterface public interface ClientHttpRequestFactory; // Factory for ClientHttpRequest objects.\n@FunctionalInterface public interface ClientHttpRequestInitializer; // Callback interface for initializing a ClientHttpRequest prior to it being used.\n@FunctionalInterface public interface ClientHttpRequestInterceptor; // Intercepts client-side HTTP requests.\npublic interface ClientHttpResponse extends HttpInputMessage, Closeable; // Represents a client-side HTTP response.\npublic class HttpComponentsClientHttpRequestFactory extends Object implements ClientHttpRequestFactory, org.springframework.beans.factory.DisposableBean; // ClientHttpRequestFactory implementation that uses Apache HttpComponents HttpClient to create requests.\npublic class InterceptingClientHttpRequestFactory extends AbstractClientHttpRequestFactoryWrapper; // ClientHttpRequestFactory wrapper with support for ClientHttpRequestInterceptors.\npublic final class MultipartBodyBuilder extends Object; // Prepare the body of a multipart request, resulting in a MultiValueMap<String, HttpEntity>.\npublic static interface MultipartBodyBuilder.PartBuilder; // Builder that allows for further customization of part headers.\npublic class OkHttp3ClientHttpRequestFactory extends Object implements ClientHttpRequestFactory, org.springframework.beans.factory.DisposableBean; // ClientHttpRequestFactory implementation that uses OkHttp 3.x to create requests.\n", "des": "Contains an abstraction over client-side HTTP."}
{"index": 3138, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package id;\n\npackage id.persistent; // Package contains an implementation of MultiTableBulkIdStrategy based on the use of a persistent (ANSI SQL term) table to hold id values.\nInterface AbstractMultiTableBulkIdStrategyImpl.PreparationContext;\nInterface IdTableInfo;\nInterface IdTableSupport;\nInterface MultiTableBulkIdStrategy; // Generalized strategy contract for handling multi-table bulk HQL operations.\nInterface MultiTableBulkIdStrategy.DeleteHandler; // Handler for dealing with multi-table HQL bulk delete statements.\nInterface MultiTableBulkIdStrategy.UpdateHandler; // Handler for dealing with multi-table HQL bulk update statements.\nClass AbstractIdsBulkIdHandler; // Base class for all strategies that select the ids to be updated/deleted prior to executing the update/delete operation.\nClass AbstractMultiTableBulkIdStrategyImpl<TT extends IdTableInfo,â€‹CT extends AbstractMultiTableBulkIdStrategyImpl.PreparationContext>; // Convenience base class for MultiTableBulkIdStrategy implementations.\nClass AbstractTableBasedBulkIdHandler; // Convenience base class for MultiTableBulkIdStrategy.UpdateHandler and MultiTableBulkIdStrategy.DeleteHandler implementations through TableBasedUpdateHandlerImpl and TableBasedDeleteHandlerImpl respectively.\nClass AbstractTableBasedBulkIdHandler.ProcessedWhereClause;\nClass IdTableHelper;\nClass IdTableSupportStandardImpl;\nClass TableBasedDeleteHandlerImpl;\nClass TableBasedUpdateHandlerImpl;\n", "des": "Support for multi-table update and delete statements via id-tables."}
{"index": 2203, "repo": "spring-data-commons-3.1.2", "code": "package jaxb;\n\npublic class OrderAdapter extends jakarta.xml.bind.annotation.adapters.XmlAdapter<SpringDataJaxb.OrderDto,Sort.Order>; // XmlAdapter to convert Sort.Order instances into SpringDataJaxb.OrderDtos and vice versa.\npublic class PageAdapter extends jakarta.xml.bind.annotation.adapters.XmlAdapter<SpringDataJaxb.PageDto,Page<Object>>; // XmlAdapter to convert Page instances into SpringDataJaxb.PageDto instances and vice versa.\npublic class SortAdapter extends jakarta.xml.bind.annotation.adapters.XmlAdapter<SpringDataJaxb.SortDto,Sort>; // XmlAdapter to convert Sort instances into SpringDataJaxb.SortDto instances and vice versa.\npublic abstract class SpringDataJaxb extends Object; // Helper class containing utility methods to implement JAXB XmlAdapters as well as the DTO types to be marshalled by JAXB.\npublic static class SpringDataJaxb.OrderDto extends Object; // The DTO for Sort.Order.\npublic static class SpringDataJaxb.PageDto extends org.springframework.hateoas.RepresentationModel; // The DTO for Page.\npublic static class SpringDataJaxb.PageRequestDto extends Object; // The DTO for Pageables/PageRequests.\npublic static class SpringDataJaxb.SortDto extends Object; // The DTO for Sort.\n", "des": "Central domain abstractions especially to be used in combination with the Repository abstraction."}
{"index": 3814, "repo": "lucene-analysis-common-9.7.0", "code": "package sinks;\n\nClass TeeSinkTokenFilter; // This TokenFilter provides the ability to set aside attribute states that have already been analyzed.\nClass TeeSinkTokenFilter.SinkTokenStream; // TokenStream output from a tee.\n", "des": "TeeSinkTokenFilter."}
{"index": 2970, "repo": "pulsar-broker-3.0.0", "code": "package tools;\n\npublic class BrokerTool extends Object; // broker-tool is used for operations on a specific broker.\npublic class GenerateDocsCommand extends org.apache.bookkeeper.tools.framework.CliCommand<org.apache.bookkeeper.tools.framework.CliFlags,GenerateDocsCommand.GenDocFlags>; // The command to generate documents of broker-tool.\nprotected static class GenerateDocsCommand.GenDocFlags extends org.apache.bookkeeper.tools.framework.CliFlags; // The CLI flags of gen docs command.\npublic class LoadReportCommand extends org.apache.bookkeeper.tools.framework.CliCommand<org.apache.bookkeeper.tools.framework.CliFlags,LoadReportCommand.Flags>; // The command to collect the load report of a specific broker.\npublic static class LoadReportCommand.Flags extends org.apache.bookkeeper.tools.framework.CliFlags; // The CLI flags of load report command.\n", "des": "Tools for broker related operations."}
{"index": 1028, "repo": "hadoop-aws-3.3.6", "code": "package commit;\n\npackage commit.files; // Persistent data formats for the committers.\npackage commit.impl; // Internal classes which make use of mapreduce code.\npackage commit.magic; // This is the \"Magic\" committer and support.\npackage commit.staging; // The staging committers.\nClass AbstractS3ACommitter; // Abstract base class for S3A committers; allows for any commonality between different architectures.\nClass AbstractS3ACommitter.ActiveCommit; // State of the active commit operation.\nClass AbstractS3ACommitterFactory; // Dynamically create the output committer based on subclass type and settings.\nClass CommitConstants; // Constants for working with committers.\nClass CommitterStatisticNames; // Statistic names for committers.\nClass CommitUtils; // Static utility methods related to S3A commitment processing, both staging and magic.\nClass InternalCommitterConstants; // These are internal constants not intended for public use.\nClass MagicCommitIntegration; // Adds the code needed for S3A to support magic committers.\nClass MagicCommitPaths; // Operations on (magic) paths.\nClass PutTracker; // Multipart put tracker.\nClass S3ACommitterFactory; // The S3A committer factory which chooses the committer based on the specific option chosen in a per-bucket basis from the property CommitConstants.FS_S3A_COMMITTER_NAME.\nEnum AbstractS3ACommitter.JobUUIDSource; // Enumeration of Job UUID source.\nClass PathCommitException; // Path exception to use for various commit issues.\nClass ValidationFailure; // Exception raised on validation failures; kept as an IOException for consistency with other failures.\n", "des": "Support for committing the output of analytics jobs directly to S3."}
{"index": 2327, "repo": "spring-boot-3.1.1", "code": "package netty;\n\npublic class NettyRSocketServer extends Object implements RSocketServer; // RSocketServer that is based on a Reactor Netty server.\npublic class NettyRSocketServerFactory extends Object implements RSocketServerFactory, ConfigurableRSocketServerFactory; // RSocketServerFactory that can be used to create RSocketServers backed by Netty.\n", "des": "Reactor Netty based RSocket server implementation."}
{"index": 712, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package mail;\n\nClass ImapIdleChannelAdapterSpec; // A MessageProducerSpec for a ImapIdleChannelAdapter.\nClass ImapMailInboundChannelAdapterSpec; // A MailInboundChannelAdapterSpec for IMAP.\nClass Mail; // The factory for Spring Integration Mail components.\nClass MailHeadersBuilder; // The Mail specific MapBuilder implementation.\nClass MailInboundChannelAdapterSpec<S extends MailInboundChannelAdapterSpec<S,R>,R extends org.springframework.integration.mail.AbstractMailReceiver>; // A MessageSourceSpec for a MailReceivingMessageSource.\nClass MailSendingMessageHandlerSpec;\nClass Pop3MailInboundChannelAdapterSpec; // A MailInboundChannelAdapterSpec for POP3.\n", "des": "Provides Mail Components support for Spring Integration Java DSL."}
{"index": 2373, "repo": "pulsar-client-api-3.0.0", "code": "package schema;\n\n@Public @Stable public class Field extends Object; // A field in a record, consisting of a field name, index, and Schema for the field value.\n@Public @Stable public interface FieldSchemaBuilder<T extends FieldSchemaBuilder<T>>; // Build a field for a record.\npublic interface GenericObject; // This is an abstraction over the logical value that is store into a Message.\n@Public @Stable public interface GenericRecord extends GenericObject; // An interface represents a message with schema.\n@Public @Stable public interface GenericRecordBuilder; // Generic Record Builder to build a GenericRecord.\n@Public @Stable public interface GenericSchema<T extends GenericRecord> extends Schema<T>; // A schema that serializes and deserializes between GenericRecord and bytes.\npublic interface KeyValueSchema<K,V> extends Schema<KeyValue<K,V>>; // This interface models a Schema that is composed of two parts.\n@Public @Stable public interface RecordSchemaBuilder; // Building the schema for a GenericRecord.\n@Public @Stable public interface SchemaBuilder; // Builder to build schema.\n@Public @Stable public interface SchemaDefinition<T>; // Interface for schema definition.\n@Public @Stable public interface SchemaDefinitionBuilder<T>; // Builder to build schema definition SchemaDefinition.\n@Private @Stable public interface SchemaInfoProvider; // Schema Provider.\n@Public @Stable public interface SchemaReader<T>; // Deserialize messages from bytes.\n@Public @Stable @FunctionalInterface public interface SchemaWriter<T>; // Serialize messages into bytes.\n", "des": "Schema definitions for Pulsar Client API."}
{"index": 2224, "repo": "spring-data-commons-3.1.2", "code": "package reactive;\n\n@NoRepositoryBean public interface ReactiveCrudRepository<T,ID> extends Repository<T,ID>; // Interface for generic CRUD operations on a repository for a specific type.\n@NoRepositoryBean public interface ReactiveSortingRepository<T,ID> extends Repository<T,ID>; // Repository fragment to provide methods to retrieve entities using the sorting abstraction.\n@NoRepositoryBean public interface RxJava3CrudRepository<T,ID> extends Repository<T,ID>; // Interface for generic CRUD operations on a repository for a specific type.\n@NoRepositoryBean public interface RxJava3SortingRepository<T,ID> extends Repository<T,ID>; // Repository fragment to provide methods to retrieve entities using the sorting abstraction.\n", "des": "Support for reactive repositories."}
{"index": 2704, "repo": "spring-integration-ftp-6.1.2", "code": "package gateway;\n\npublic class FtpOutboundGateway extends org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway<org.apache.commons.net.ftp.FTPFile>; // Outbound Gateway for performing remote file operations via FTP/FTPS.\n", "des": "Provides classes supporting FTP gateways."}
{"index": 643, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package router;\n\nInterface FederationRouterPolicy; // Implements the logic for determining the routing of an application submission based on a policy.\nClass AbstractRouterPolicy; // Base abstract class for FederationRouterPolicy implementations, that provides common validation for reinitialization.\nClass HashBasedRouterPolicy; // This FederationRouterPolicy pick a subcluster based on the hash of the job's queue name.\nClass LoadBasedRouterPolicy; // This implements a simple load-balancing policy.\nClass LocalityRouterPolicy; // This policy selects the subcluster depending on the node where the Client wants to run its application.\nClass PriorityRouterPolicy; // This implements a policy that interprets \"weights\" as a ordered list of preferences among sub-clusters.\nClass RejectRouterPolicy; // This FederationRouterPolicy simply rejects all incoming requests.\nClass UniformRandomRouterPolicy; // This simple policy picks at uniform random among any of the currently active subclusters.\nClass WeightedRandomRouterPolicy; // This policy implements a weighted random sample among currently active sub-clusters.\n", "des": "Router policies."}
{"index": 3751, "repo": "lucene-queryparser-9.7.0", "code": "package xml;\n\npackage xml.builders; // XML Parser factories for different Lucene Query/Filters.\nInterface QueryBuilder; // Implemented by objects that produce Lucene Query objects from XML streams.\nClass CoreParser; // Assembles a QueryBuilder which uses only core Lucene Query objects\nClass CorePlusExtensionsParser; // Assembles a QueryBuilder which uses Query objects from Lucene's sandbox and queries modules in addition to core queries.\nClass CorePlusQueriesParser; // Assembles a QueryBuilder which uses Query objects from Lucene's queries module in addition to core queries.\nClass DOMUtils; // Helper methods for parsing XML\nClass QueryBuilderFactory; // Factory for QueryBuilder\nClass ParserException; // Thrown when the xml queryparser encounters invalid syntax/configuration.\n", "des": "Parser that produces Lucene Query objects from XML streams."}
{"index": 405, "repo": "hbase-common-3.0.0-alpha-4", "code": "package types;\n\nInterface DataType<T>; // DataType is the base class for all HBase data types.\nClass CopyOnWriteArrayMap<K,V>; // A Map that keeps a sorted array in order to provide the concurrent map interface.\nClass FixedLengthWrapper<T>; // Wraps an existing DataType implementation as a fixed-length version of itself.\nClass OrderedBlob; // A byte[] of variable-length.\nClass OrderedBlobVar; // An alternative to OrderedBlob for use by Struct fields that do not terminate the fields list.\nClass OrderedBytesBase<T>; // Base class for data types backed by the OrderedBytes encoding implementations.\nClass OrderedFloat32; // A float of 32-bits using a fixed-length encoding.\nClass OrderedFloat64; // A double of 64-bits using a fixed-length encoding.\nClass OrderedInt16; // A short of 16-bits using a fixed-length encoding.\nClass OrderedInt32; // An int of 32-bits using a fixed-length encoding.\nClass OrderedInt64; // A long of 64-bits using a fixed-length encoding.\nClass OrderedInt8; // A byte of 8-bits using a fixed-length encoding.\nClass OrderedNumeric; // An Number of arbitrary precision and variable-length encoding.\nClass OrderedString; // A String of variable-length.\nClass RawByte; // An DataType for interacting with values encoded using Bytes.putByte(byte[], int, byte).\nClass RawBytes; // An DataType for interacting with variable-length values encoded using Bytes.putBytes(byte[], int, byte[], int, int).\nClass RawBytesFixedLength; // An DataType that encodes fixed-length values encoded using Bytes.putBytes( byte[], int, byte[], int, int).\nClass RawBytesTerminated; // An DataType that encodes variable-length values encoded using Bytes.putBytes(byte[], int, byte[], int, int).\nClass RawDouble; // An DataType for interacting with values encoded using Bytes.putDouble(byte[], int, double).\nClass RawFloat; // An DataType for interacting with values encoded using Bytes.putFloat(byte[], int, float).\nClass RawInteger; // An DataType for interacting with values encoded using Bytes.putInt(byte[], int, int).\n", "des": "This package provides the definition and implementation of HBase's extensible data type API."}
{"index": 893, "repo": "commons-jcs3-core-3.1", "code": "package disk;\n\nClass AbstractDiskCache<K,V>; // Abstract class providing a base implementation of a disk cache, which can be easily extended to implement a disk cache for a specific persistence mechanism.\nClass AbstractDiskCacheAttributes; // This has common attributes that any conceivable disk cache would need.\nClass PurgatoryElement<K,V>; // Implementation of cache elements in purgatory.\n", "des": "The primary disk auxiliary."}
{"index": 2018, "repo": "spring-boot-devtools-3.1.1", "code": "package settings;\n\npublic class DevToolsSettings extends Object; // DevTools settings loaded from /META-INF/spring-devtools.properties files.\n", "des": "Classes for loading DevTools settings."}
{"index": 337, "repo": "kafka-clients-3.5.0", "code": "package policy;\n\nInterface AlterConfigPolicy; // An interface for enforcing a policy on alter configs requests.\nInterface CreateTopicPolicy; // An interface for enforcing a policy on create topics requests.\nClass AlterConfigPolicy.RequestMetadata; // Class containing the create request parameters.\nClass CreateTopicPolicy.RequestMetadata; // Class containing the create request parameters.\n", "des": "Provides pluggable interfaces for expressing policies on topics and configs."}
{"index": 2806, "repo": "spring-security-oauth2-core-6.1.2", "code": "package user;\n\npublic class DefaultOidcUser extends DefaultOAuth2User implements OidcUser; // The default implementation of an OidcUser.\npublic interface OidcUser extends OAuth2User, IdTokenClaimAccessor; // A representation of a user Principal that is registered with an OpenID Connect 1.0 Provider.\npublic class OidcUserAuthority extends OAuth2UserAuthority; // A GrantedAuthority that may be associated to an OidcUser.\n", "des": "Provides a model for an OpenID Connect Core 1.0 representation of a user Principal."}
{"index": 2624, "repo": "shiro-web-2.0.0-alpha-2", "code": "package config;\n\npublic class IniFilterChainResolverFactory extends org.apache.shiro.ini.IniFactorySupport<FilterChainResolver>; // A Factory that creates FilterChainResolver instances based on Ini configuration.\npublic class ShiroFilterConfiguration extends Object; // Configuration for Shiro's root level servlet filter.\n@Deprecated public class WebIniSecurityManagerFactory extends org.apache.shiro.ini.IniSecurityManagerFactory;\n", "des": "Web-specific implementation extensions to the org.apache.shiro.config components."}
{"index": 360, "repo": "hive-exec-4.0.0-alpha-2", "code": "package proto;\n\nClass DatePartitionedLogger<T extends com.google.protobuf.MessageLite>; // Class to create proto reader and writer for a date partitioned directory structure.\nClass ProtoMessageReader<T extends com.google.protobuf.MessageLite>;\nClass ProtoMessageWritable<T extends com.google.protobuf.MessageLite>;\nClass ProtoMessageWriter<T extends com.google.protobuf.MessageLite>;\n", "des": "Logger code copied from tez codebase, this should be removed when we swtich to 0.9.2 tez version and we should depend on the tez libraries for this."}
{"index": 1642, "repo": "jena-core-4.9.0", "code": "package impl;\n\npublic class RDFhtml extends BaseDatatype implements RDFDatatype; // rdf:html.\npublic class RDFjson extends BaseDatatype implements RDFDatatype; // rdf:json.\npublic class RDFLangString extends BaseDatatype implements RDFDatatype; // rdf:langString.\npublic class XMLLiteralType extends BaseDatatype implements RDFDatatype; // Builtin data type to represent XMLLiteral (i.e.\npublic class XSDAbstractDateTimeType extends XSDDatatype; // Base class for all date/time/duration type representations.\npublic class XSDBaseNumericType extends XSDDatatype; // Base implementation for all numeric datatypes derived from xsd:decimal.\npublic class XSDBaseStringType extends XSDDatatype; // Base implementation for all string datatypes derived from xsd:string.\npublic class XSDByteType extends XSDBaseNumericType; // Datatype template used to define XSD int types\npublic class XSDDateTimeStampType extends XSDDateTimeType;\npublic class XSDDateTimeType extends XSDAbstractDateTimeType; // Type processor for dateTime, most of the machinery is in the base XSDAbstractDateTimeType class.\npublic class XSDDateType extends XSDAbstractDateTimeType; // Type processor for date, most of the machinery is in the base XSDAbstractDateTimeType class.\npublic class XSDDayTimeDurationType extends XSDAbstractDateTimeType;\npublic class XSDDayType extends XSDAbstractDateTimeType; // Type processor for gDay, most of the machinery is in the base XSDAbstractDateTimeType class.\npublic class XSDDouble extends XSDDatatype; // Datatype representation for xsd:float.\npublic class XSDDurationType extends XSDAbstractDateTimeType; // The XSD duration type, the only job of this extra layer is to wrap the return value in a more convenient accessor type.\npublic class XSDFloat extends XSDDatatype; // Datatype representation for xsd:float.\npublic class XSDMonthDayType extends XSDAbstractDateTimeType; // Type processor for gMonthDay, most of the machinery is in the base XSDAbstractDateTimeType class.\npublic class XSDMonthType extends XSDAbstractDateTimeType; // Type processor for gMonth, most of the machinery is in the base XSDAbstractDateTimeType class.\npublic class XSDPlainType extends XSDDatatype; // A datatype that does not use the Xerces machinery for isEqual, yet is still an XSDDatatype.\n", "des": "Provides implementations of the XSD datatype."}
{"index": 3123, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package lock;\n\nInterface LockingStrategy; // A strategy abstraction for how locks are obtained in the underlying database.\nClass AbstractSelectLockingStrategy; // Base LockingStrategy implementation to support implementations based on issuing SQL SELECT statements\nClass OptimisticForceIncrementLockingStrategy; // An optimistic locking strategy that forces an increment of the version (after verifying that version hasn't changed).\nClass OptimisticLockingStrategy; // An optimistic locking strategy that verifies that the version hasn't changed (prior to transaction commit).\nClass PessimisticForceIncrementLockingStrategy; // A pessimistic locking strategy that increments the version immediately (obtaining an exclusive write lock).\nClass PessimisticReadSelectLockingStrategy; // A pessimistic locking strategy where the locks are obtained through select statements.\nClass PessimisticReadUpdateLockingStrategy; // A pessimistic locking strategy where the locks are obtained through update statements.\nClass PessimisticWriteSelectLockingStrategy; // A pessimistic locking strategy where the locks are obtained through select statements.\nClass PessimisticWriteUpdateLockingStrategy; // A pessimistic locking strategy where the locks are obtained through update statements.\nClass SelectLockingStrategy; // A locking strategy where the locks are obtained through select statements.\nClass UpdateLockingStrategy; // A locking strategy where the locks are obtained through update statements.\nClass LockingStrategyException; // Represents an error trying to apply a LockingStrategy to an entity\nClass OptimisticEntityLockException; // Represents an error trying to apply an optimistic LockingStrategy to an entity\nClass PessimisticEntityLockException; // Represents an error trying to apply a pessimistic LockingStrategy to an entity\n", "des": "Support for Dialect-specific locking strategies"}
{"index": 1542, "repo": "spring-context-6.0.11", "code": "package concurrent;\n\npublic class ConcurrentTaskExecutor extends Object implements org.springframework.core.task.AsyncListenableTaskExecutor, SchedulingTaskExecutor; // Adapter that takes a java.util.concurrent.Executor and exposes a Spring TaskExecutor for it.\nprotected static class ConcurrentTaskExecutor.ManagedTaskBuilder extends Object; // Delegate that wraps a given Runnable/Callable with a JSR-236 ManagedTask, exposing a long-running hint based on SchedulingAwareRunnable and a given identity name.\npublic class ConcurrentTaskScheduler extends ConcurrentTaskExecutor implements TaskScheduler; // Adapter that takes a java.util.concurrent.ScheduledExecutorService and exposes a Spring TaskScheduler for it.\npublic class CustomizableThreadFactory extends org.springframework.util.CustomizableThreadCreator implements ThreadFactory; // Implementation of the ThreadFactory interface, allowing for customizing the created threads (name, priority, etc).\npublic class DefaultManagedAwareThreadFactory extends CustomizableThreadFactory implements org.springframework.beans.factory.InitializingBean; // JNDI-based variant of CustomizableThreadFactory, performing a default lookup for JSR-236's \"java:comp/DefaultManagedThreadFactory\" in a Jakarta EE environment, falling back to the local CustomizableThreadFactory setup if not found.\npublic class DefaultManagedTaskExecutor extends ConcurrentTaskExecutor implements org.springframework.beans.factory.InitializingBean; // JNDI-based variant of ConcurrentTaskExecutor, performing a default lookup for JSR-236's \"java:comp/DefaultManagedExecutorService\" in a Jakarta EE/8 environment.\npublic class DefaultManagedTaskScheduler extends ConcurrentTaskScheduler implements org.springframework.beans.factory.InitializingBean; // JNDI-based variant of ConcurrentTaskScheduler, performing a default lookup for JSR-236's \"java:comp/DefaultManagedScheduledExecutorService\" in a Jakarta EE environment.\npublic abstract class ExecutorConfigurationSupport extends CustomizableThreadFactory implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Base class for setting up a ExecutorService (typically a ThreadPoolExecutor or ScheduledThreadPoolExecutor).\n", "des": "Scheduling convenience classes for the java.util.concurrent and jakarta.enterprise.concurrent packages, allowing to set up a ThreadPoolExecutor or ScheduledThreadPoolExecutor as a bean in a Spring context."}
{"index": 161, "repo": "ignite-core-2.15.0", "code": "package jobmetrics;\n\nClass GridJobMetrics; // Check the ReadOnlyMetricRegistry with \"name=compute.jobs\" instead.\nClass GridJobMetricsProcessor; // Check the ReadOnlyMetricRegistry with \"name=compute.jobs\" instead.\nClass GridJobMetricsSnapshot; // Check the ReadOnlyMetricRegistry with \"name=compute.jobs\" instead.\n", "des": "Job metrics."}
{"index": 1848, "repo": "spring-test-6.0.11", "code": "package testng;\n\npublic abstract class AbstractTestNGSpringContextTests extends Object implements org.testng.IHookable, org.springframework.context.ApplicationContextAware; // Abstract base test class which integrates the Spring TestContext Framework with explicit ApplicationContext testing support in a TestNG environment.\n@Transactional public abstract class AbstractTransactionalTestNGSpringContextTests extends AbstractTestNGSpringContextTests; // Abstract transactional extension of AbstractTestNGSpringContextTests which adds convenience functionality for JDBC access.\n", "des": "Support classes for integrating the Spring TestContext Framework with TestNG."}
{"index": 1731, "repo": "spring-jdbc-6.0.11", "code": "package init;\n\npublic class CannotReadScriptException extends ScriptException; // Thrown by ScriptUtils if an SQL script cannot be read.\npublic class CompositeDatabasePopulator extends Object implements DatabasePopulator; // Composite DatabasePopulator that delegates to a list of given DatabasePopulator implementations, executing all scripts.\n@FunctionalInterface public interface DatabasePopulator; // Strategy used to populate, initialize, or clean up a database.\npublic abstract class DatabasePopulatorUtils extends Object; // Utility methods for executing a DatabasePopulator.\npublic class DataSourceInitializer extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Used to set up a database during initialization and clean up a database during destruction.\npublic class ResourceDatabasePopulator extends Object implements DatabasePopulator; // Populates, initializes, or cleans up a database using SQL scripts defined in external resources.\npublic abstract class ScriptException extends org.springframework.dao.DataAccessException; // Root of the hierarchy of data access exceptions that are related to processing of SQL scripts.\npublic class ScriptParseException extends ScriptException; // Thrown by ScriptUtils if an SQL script cannot be properly parsed.\npublic class ScriptStatementFailedException extends ScriptException; // Thrown by ScriptUtils if a statement in an SQL script failed when executing it against the target database.\npublic abstract class ScriptUtils extends Object; // Generic utility methods for working with SQL scripts in conjunction with JDBC.\npublic class UncategorizedScriptException extends ScriptException; // Thrown when we cannot determine anything more specific than \"something went wrong while processing an SQL script\": for example, a SQLException from JDBC that we cannot pinpoint more precisely.\n", "des": "Provides extensible support for initializing databases through scripts."}
{"index": 567, "repo": "hadoop-common-3.3.4", "code": "package util;\n\nInterface QuantileEstimator;\nClass MBeans; // This util class provides a method to register an MBean using our standard naming convention as described in the doc for {link MBeans.register(String, String, Object).\nClass MetricsCache; // A metrics cache for sinks that don't support sparse updates.\nClass MetricsCache.Record; // Cached record\nClass SampleStat.MinMax; // Helper to keep running min/max\nClass Servers; // Helpers to handle server addresses\n", "des": "General helpers for implementing source and sinks"}
{"index": 1920, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package rest;\n\n@AutoConfiguration(after={HttpMessageConvertersAutoConfiguration.class,JacksonAutoConfiguration.class}) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnMissingBean(org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.class) @ConditionalOnClass(org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.class) @EnableConfigurationProperties(RepositoryRestProperties.class) @Import(org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.class) public class RepositoryRestMvcAutoConfiguration extends Object; // Auto-configuration for Spring Data Rest's MVC integration.\n@ConfigurationProperties(prefix=\"spring.data.rest\") public class RepositoryRestProperties extends Object; // Configuration properties for Spring Data REST.\n", "des": "Auto-configuration for Spring Data REST."}
{"index": 1286, "repo": "spring-core-6.0.11", "code": "package type;\n\npackage type.classreading; // Support classes for reading annotation and class-level metadata.\npackage type.filter; // Core support package for type filtering (e.g.\npublic interface AnnotatedTypeMetadata; // Defines access to the annotations of a specific type (class or method), in a form that does not necessarily require the class-loading.\npublic interface AnnotationMetadata extends ClassMetadata, AnnotatedTypeMetadata; // Interface that defines abstract access to the annotations of a specific class, in a form that does not require that class to be loaded yet.\npublic interface ClassMetadata; // Interface that defines abstract metadata of a specific class, in a form that does not require that class to be loaded yet.\npublic interface MethodMetadata extends AnnotatedTypeMetadata; // Interface that defines abstract access to the annotations of a specific method, in a form that does not require that method's class to be loaded yet.\npublic class StandardAnnotationMetadata extends StandardClassMetadata implements AnnotationMetadata; // AnnotationMetadata implementation that uses standard reflection to introspect a given Class.\npublic class StandardClassMetadata extends Object implements ClassMetadata; // ClassMetadata implementation that uses standard reflection to introspect a given Class.\npublic class StandardMethodMetadata extends Object implements MethodMetadata; // MethodMetadata implementation that uses standard reflection to introspect a given Method.\n", "des": "Core support package for type introspection."}
{"index": 3279, "repo": "opencms-core-15.0", "code": "package importexport;\n\nInterface I_CmsImport; // This interface describes a import class which is used to import resources into the VFS.\nInterface I_CmsImportExportHandler; // An import/export handler is an abstract layer to hide the logic how to import/export a specific type of Cms data.\nClass A_CmsImport;\nClass CmsExport; // Provides the functionality to export files from the OpenCms VFS to a ZIP file.\nClass CmsExportHelper; // Wrapper to write exported OpenCms resources either to a .ZIP file or to the file system.\nClass CmsExportParameters; // Export parameters.\nClass CmsExtendedHtmlImportDefault; // The CmsExtendedHtmlImportManager keeps the default values for the HTML-> OpenCms Template converter.\nClass CmsImport; // Holds the functionality to import resources from the file system or a zip file into the OpenCms VFS.\nClass CmsImportExportManager; // Provides information about how to handle imported resources.\nClass CmsImportHelper; // Import helper.\nClass CmsImportParameters; // Import parameters.\nClass CmsImportResourceDataReader; // Subclass which doesn't actually import anything, but just reads the module data into a data structure which can then be used by the module updater.\nClass CmsImportVersion10; // Adds the XML handler rules for import and export of resources and accounts.\nClass CmsImportVersion10.RelationData; // Data class to temporarily keep track of relation data for a resource to be imported.\nClass CmsImportVersion2;\nClass CmsImportVersion3;\nClass CmsImportVersion4;\nClass CmsImportVersion5;\nClass CmsImportVersion6;\nClass CmsImportVersion7;\nClass CmsVfsImportExportHandler; // Import/export handler implementation for VFS data.\nClass CmsXmlPageConverter;\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsImportExportManager.TimestampMode; // Time modes to specify how time stamps should be handled.\nEnum CmsImportVersion10.LinkParsableCategory; // Categories of resources that need to be handled differently in the 'rewrite parseables' import step.\nClass CmsImportExportException; // Signals an error during import or export of OpenCms data.\n", "des": "Contains functions to import and export resources from the OpenCms VFS."}
{"index": 2072, "repo": "spring-webmvc-6.0.11", "code": "package condition;\n\npublic abstract class AbstractRequestCondition<T extends AbstractRequestCondition<T>> extends Object implements RequestCondition<T>; // A base class for RequestCondition types providing implementations of AbstractRequestCondition.equals(Object), AbstractRequestCondition.hashCode(), and AbstractRequestCondition.toString().\npublic class CompositeRequestCondition extends AbstractRequestCondition<CompositeRequestCondition>; // Implements the RequestCondition contract by delegating to multiple RequestCondition types and using a logical conjunction (' && ') to ensure all conditions match a given request.\npublic final class ConsumesRequestCondition extends AbstractRequestCondition<ConsumesRequestCondition>; // A logical disjunction (' || ') request condition to match a request's 'Content-Type' header to a list of media type expressions.\npublic final class HeadersRequestCondition extends AbstractRequestCondition<HeadersRequestCondition>; // A logical conjunction (' && ') request condition that matches a request against a set of header expressions with syntax defined in RequestMapping.headers().\npublic interface MediaTypeExpression; // A contract for media type expressions (e.g.\npublic interface NameValueExpression<T>; // A contract for \"name!=value\" style expression used to specify request parameters and request header conditions in @RequestMapping.\npublic final class ParamsRequestCondition extends AbstractRequestCondition<ParamsRequestCondition>; // A logical conjunction (' && ') request condition that matches a request against a set parameter expressions with syntax defined in RequestMapping.params().\npublic final class PathPatternsRequestCondition extends AbstractRequestCondition<PathPatternsRequestCondition>; // A logical disjunction (' || ') request condition that matches a request against a set of URL path patterns.\npublic class PatternsRequestCondition extends AbstractRequestCondition<PatternsRequestCondition>; // A logical disjunction (' || ') request condition that matches a request against a set of URL path patterns.\npublic final class ProducesRequestCondition extends AbstractRequestCondition<ProducesRequestCondition>; // A logical disjunction (' || ') request condition to match a request's 'Accept' header to a list of media type expressions.\npublic interface RequestCondition<T>; // Contract for request mapping conditions.\npublic final class RequestConditionHolder extends AbstractRequestCondition<RequestConditionHolder>; // A holder for a RequestCondition useful when the type of the request condition is not known ahead of time, e.g.\n", "des": "Common MVC logic for matching incoming requests based on conditions."}
{"index": 886, "repo": "cassandra-all-4.1.2", "code": "package streaming;\n\nInterface IStreamReader; // This is the interface is used by the streaming code read a SSTable stream off a channel.\nClass CassandraCompressedStreamReader; // CassandraStreamReader that reads from streamed compressed SSTable\nClass CassandraCompressedStreamWriter; // CassandraStreamWriter for compressed SSTable.\nClass CassandraEntireSSTableStreamReader; // CassandraEntireSSTableStreamReader reads SSTable off the wire and writes it to disk.\nClass CassandraEntireSSTableStreamWriter; // CassandraEntireSSTableStreamWriter streams the entire SSTable to given channel.\nClass CassandraIncomingFile; // used to receive the part(or whole) of a SSTable data file.\nClass CassandraOutgoingFile; // used to transfer the part(or whole) of a SSTable data file\nClass CassandraStreamHeader;\nClass CassandraStreamHeader.Builder;\nClass CassandraStreamHeader.CassandraStreamHeaderSerializer;\nClass CassandraStreamManager; // Implements the streaming interface for the native cassandra storage engine.\nClass CassandraStreamReader; // CassandraStreamReader reads from stream and writes to SSTable.\nClass CassandraStreamReader.StreamDeserializer;\nClass CassandraStreamReceiver;\nClass CassandraStreamWriter; // CassandraStreamWriter writes given section of the SSTable to given channel.\nClass ComponentContext;\nClass ComponentManifest;\nClass CompressedInputStream; // InputStream which reads compressed chunks from the underlying input stream and deals with decompression and position tracking.\nClass CompressionInfo; // Container that carries compression parameters and chunks to decompress data from stream.\n", "des": "File transfer"}
{"index": 3764, "repo": "lucene-analysis-common-9.7.0", "code": "package boost;\n\nClass DelimitedBoostTokenFilter; // Characters before the delimiter are the \"token\", those after are the boost.\nClass DelimitedBoostTokenFilterFactory; // Factory for DelimitedBoostTokenFilter.\n", "des": "Provides various convenience classes for creating boosts on Tokens."}
{"index": 1062, "repo": "avro-1.11.2", "code": "package parsing;\n\nInterface Parser.ActionHandler; // The parser knows how to handle the terminal and non-terminal symbols.\nInterface SkipParser.SkipHandler; // The clients implement this interface to skip symbols and actions.\nClass JsonGrammarGenerator; // The class that generates a grammar suitable to parse Avro data in JSON format.\nClass Parser; // Parser is the class that maintains the stack for parsing.\nClass ResolvingGrammarGenerator; // The class that generates a resolving grammar to resolve between two schemas.\nClass SkipParser; // A parser that capable of skipping as well read and write.\nClass Symbol; // Symbol is the base of all symbols (terminals and non-terminals) of the grammar.\nClass Symbol.Alternative;\nClass Symbol.DefaultStartAction;\nClass Symbol.EnumAdjustAction;\nClass Symbol.EnumLabelsAction;\nClass Symbol.ErrorAction;\nClass Symbol.FieldAdjustAction;\nClass Symbol.FieldOrderAction;\nClass Symbol.ImplicitAction;\nClass Symbol.IntCheckAction;\nClass Symbol.Repeater;\nClass Symbol.ResolvingAction;\nClass Symbol.Root;\nClass Symbol.Sequence;\nClass Symbol.SkipAction;\nClass Symbol.UnionAdjustAction;\nClass Symbol.WriterUnionAction;\nClass ValidatingGrammarGenerator; // The class that generates validating grammar.\nEnum Symbol.Kind;\n", "des": "Implementation of Avro schemas as LL(1) grammars."}
{"index": 2932, "repo": "groovy-4.0.13", "code": "package io;\n\npublic abstract class AbstractReaderSource extends Object implements ReaderSource; // For ReaderSources that can choose a parent class, a base that provides common functionality.\npublic class FileReaderSource extends AbstractReaderSource; // A ReaderSource for source files.\npublic class InputStreamReaderSource extends AbstractReaderSource; // A ReaderSource for source strings.\npublic class NullWriter extends Writer; // A Writer that eats its input.\npublic interface ReaderSource extends HasCleanup; // An interface for things that can supply (and potentially resupply) a Reader on a source stream.\npublic class StringReaderSource extends AbstractReaderSource; // A ReaderSource for source strings.\npublic class URLReaderSource extends AbstractReaderSource; // A ReaderSource for source files hosted at a URL.\n", "des": "Internal classes for Groovier Input/Output."}
{"index": 2229, "repo": "spring-data-commons-3.1.2", "code": "package transaction;\n\n@Deprecated public class ChainedTransactionManager extends Object implements PlatformTransactionManager;\n", "des": "Contains advanced support for transactions, e.g. a best-effort delegating transaction manager."}
{"index": 2017, "repo": "spring-boot-devtools-3.1.1", "code": "package server;\n\npublic class DefaultSourceDirectoryUrlFilter extends Object implements SourceDirectoryUrlFilter; // Default implementation of SourceDirectoryUrlFilter that attempts to match URLs using common naming conventions.\npublic class HttpRestartServer extends Object; // An HTTP server that can be used to upload updated ClassLoaderFiles and trigger restarts.\npublic class HttpRestartServerHandler extends Object implements Handler; // Adapts HttpRestartServer to a Handler.\npublic class RestartServer extends Object; // Server used to restart the current application with updated ClassLoaderFiles.\n@FunctionalInterface public interface SourceDirectoryUrlFilter; // Filter URLs based on a source directory name.\n", "des": "Remote restart server."}
{"index": 230, "repo": "nutch-2.4", "code": "package pages;\n\npackage pages.assets; // Contains asset classes for Web UI\npackage pages.auth; // Contains authorization classes for Web UI\npackage pages.components; // Contains component classes for Web UI\npackage pages.crawls; // Contains crawl page classes for Web UI\npackage pages.instances; // Contains instances pages classes for Web UI\npackage pages.menu; // Contains menu page classes for Web UI\npackage pages.seed; // Contains seed pages' classes for Web UI\npackage pages.settings; // Contains settings page classes for Web UI\nClass AbstractBasePage<T>;\nClass DashboardPage;\nClass LogOutPage;\nClass SchedulingPage;\nClass SearchPage;\nClass StatisticsPage;\nClass UrlsUploadPage;\nClass UserSettingsPage;\n", "des": "Provides classes and interfaces of pages for Web UI"}
{"index": 1734, "repo": "spring-jdbc-6.0.11", "code": "package support;\n\npackage support.incrementer; // Provides a support framework for incrementing database table values via sequences, with implementations for various databases.\npackage support.lob; // Provides a strategy interface for Large OBject handling, as well as a customizable default implementation.\npackage support.rowset; // Provides a convenient holder for disconnected result sets.\npackage support.xml; // Abstraction for handling fields of SQLXML data type.\npublic abstract class AbstractFallbackSQLExceptionTranslator extends Object implements SQLExceptionTranslator; // Base class for SQLExceptionTranslator implementations that allow for fallback to some other SQLExceptionTranslator.\npublic class CustomSQLErrorCodesTranslation extends Object; // JavaBean for holding custom JDBC error codes translation for a particular database.\npublic class CustomSQLExceptionTranslatorRegistrar extends Object implements org.springframework.beans.factory.InitializingBean; // Registry for custom SQLExceptionTranslator instances for specific databases.\npublic final class CustomSQLExceptionTranslatorRegistry extends Object; // Registry for custom SQLExceptionTranslator instances associated with specific databases allowing for overriding translation based on values contained in the configuration file named \"sql-error-codes.xml\".\n@FunctionalInterface public interface DatabaseMetaDataCallback<T>; // A callback interface used by the JdbcUtils class.\npublic class DatabaseStartupValidator extends Object implements org.springframework.beans.factory.InitializingBean; // Bean that checks if a database has already started up.\npublic class GeneratedKeyHolder extends Object implements KeyHolder; // The standard implementation of the KeyHolder interface, to be used for holding auto-generated keys (as potentially returned by JDBC insert statements).\npublic abstract class JdbcAccessor extends Object implements org.springframework.beans.factory.InitializingBean; // Base class for JdbcTemplate and other JDBC-accessing DAO helpers, defining common properties such as DataSource and exception translator.\npublic class JdbcTransactionManager extends DataSourceTransactionManager; // JdbcAccessor-aligned subclass of the plain DataSourceTransactionManager, adding common JDBC exception translation for the commit and rollback step.\npublic abstract class JdbcUtils extends Object; // Generic utility methods for working with JDBC.\npublic interface KeyHolder; // Interface for retrieving keys, typically used for auto-generated keys as potentially returned by JDBC insert statements.\npublic class MetaDataAccessException extends org.springframework.core.NestedCheckedException; // Exception indicating that something went wrong during JDBC meta-data lookup.\n", "des": "Support classes for the JDBC framework, used by the classes in the jdbc.core and jdbc.object packages."}
{"index": 1045, "repo": "commons-io-2.13.0", "code": "package file;\n\npackage file.attribute; // Provides help using java.nio.file.attribute types.\npackage file.spi; // Provides extensions in the realm of java.nio.file.spi.\nInterface Counters.Counter; // Counts using a number.\nInterface Counters.PathCounters; // Counts files, directories, and sizes, as a visit proceeds.\nInterface DeleteOption; // An object that configures how to delete a file.\nInterface PathFilter; // A filter for Paths.\nInterface PathVisitor; // A FileVisitor typed to a Path.\nClass AccumulatorPathVisitor; // Accumulates normalized paths during visitation.\nClass CleaningPathVisitor; // Deletes files but not directories as a visit proceeds.\nClass CopyDirectoryVisitor; // Copies a source directory to a target directory.\nClass Counters; // Provides counters for files, directories, and sizes, as a visit proceeds.\nClass CountingPathVisitor; // Counts files, directories, and sizes, as a visit proceeds.\nClass DeletingPathVisitor; // Deletes files and directories as a visit proceeds.\nClass DirectoryStreamFilter; // A DirectoryStream.Filter that delegates to a PathFilter.\nClass FilesUncheck; // Delegates to Files to uncheck calls by throwing UncheckedIOException instead of IOException.\nClass NoopPathVisitor; // A noop path visitor.\nClass PathUtils; // NIO Path utilities.\nClass SimplePathVisitor; // A SimpleFileVisitor typed to a Path.\nEnum StandardDeleteOption; // Defines the standard delete options.\n", "des": "Provides extensions in the realm of java.nio.file."}
{"index": 2522, "repo": "spring-security-core-6.1.2", "code": "package aspectj;\n\n@Deprecated public interface AspectJCallback;\n@Deprecated public final class AspectJMethodSecurityInterceptor extends MethodSecurityInterceptor;\n@Deprecated public final class MethodInvocationAdapter extends Object implements org.aopalliance.intercept.MethodInvocation;\n", "des": "Enforces security for AspectJ JointPoints, delegating secure object callbacks to the calling aspect."}
{"index": 2578, "repo": "camel-api-4.0.0-RC1", "code": "package extension;\n\npublic interface ComponentExtension; // Marker interface for component extensions.\npublic interface ComponentVerifierExtension extends ComponentExtension; // Defines the interface used for validating component/endpoint parameters.\npublic static interface ComponentVerifierExtension.Result extends Serializable; // The result of a verification\npublic static enum ComponentVerifierExtension.Result.Status extends Enum<ComponentVerifierExtension.Result.Status>; // Status of the verification\npublic static enum ComponentVerifierExtension.Scope extends Enum<ComponentVerifierExtension.Scope>; // The scope defines how the parameters should be verified.\npublic static interface ComponentVerifierExtension.VerificationError extends Serializable; // This interface represents a detailed error in case when the verification fails.\npublic static interface ComponentVerifierExtension.VerificationError.Attribute extends Serializable; // Interface defining an attribute which is a key for the detailed error messages.\npublic static interface ComponentVerifierExtension.VerificationError.Code extends Serializable; // Interface defining an error code.\npublic static interface ComponentVerifierExtension.VerificationError.ExceptionAttribute extends ComponentVerifierExtension.VerificationError.Attribute; // Attributes for details about an exception that was raised\npublic static interface ComponentVerifierExtension.VerificationError.GroupAttribute extends ComponentVerifierExtension.VerificationError.Attribute; // Group related details\npublic static interface ComponentVerifierExtension.VerificationError.HttpAttribute extends ComponentVerifierExtension.VerificationError.Attribute; // HTTP related error details\npublic static interface ComponentVerifierExtension.VerificationError.StandardCode extends ComponentVerifierExtension.VerificationError.Code; // Standard set of error codes\npublic interface MetaDataExtension extends ComponentExtension;\npublic static interface MetaDataExtension.MetaData;\n", "des": "Component extension"}
{"index": 3122, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface CurrentSessionContext; // Defines the contract for implementations which know how to scope the notion of a current session.\nInterface CurrentTenantIdentifierResolver; // A callback registered with the SessionFactory that is responsible for resolving the current tenant identifier for use with CurrentSessionContext and SessionFactory.getCurrentSession()\nClass AbstractCurrentSessionContext; // Base support for CurrentSessionContext implementors.\n", "des": "SPI level contracts around \"current session\" support."}
{"index": 3591, "repo": "lucene-test-framework-9.7.0", "code": "package sharedterms;\n\nClass STUniformSplitRot13PostingsFormat; // STUniformSplitPostingsFormat with block encoding using ROT13 cypher.\n", "des": "Test PostingsFormat for testing org.apache.lucene.codecs.uniformsplit.sharedterms with block encryption using basic ROT13."}
{"index": 2073, "repo": "spring-webmvc-6.0.11", "code": "package method;\n\npackage method.annotation; // MVC infrastructure for annotation-based handler method processing, building on the org.springframework.web.method.annotation package.\npublic abstract class AbstractHandlerMethodAdapter extends WebContentGenerator implements HandlerAdapter, org.springframework.core.Ordered; // Abstract base class for HandlerAdapter implementations that support handlers of type HandlerMethod.\npublic final class RequestMappingInfo extends Object implements RequestCondition<RequestMappingInfo>; // Request mapping information.\npublic static interface RequestMappingInfo.Builder; // Defines a builder for creating a RequestMappingInfo.\npublic static class RequestMappingInfo.BuilderConfiguration extends Object; // Container for configuration options used for request mapping purposes.\npublic abstract class RequestMappingInfoHandlerMapping extends AbstractHandlerMethodMapping<RequestMappingInfo>; // Abstract base class for classes for which RequestMappingInfo defines the mapping between a request and a handler method.\npublic class RequestMappingInfoHandlerMethodMappingNamingStrategy extends Object implements HandlerMethodMappingNamingStrategy<RequestMappingInfo>; // A HandlerMethodMappingNamingStrategy for RequestMappingInfo-based handler method mappings.\n", "des": "Servlet-based infrastructure for handler method processing, building on the org.springframework.web.method package."}
{"index": 2067, "repo": "spring-webmvc-6.0.11", "code": "package support;\n\npublic class HandlerFunctionAdapter extends Object implements HandlerAdapter, org.springframework.core.Ordered; // HandlerAdapter implementation that supports HandlerFunctions.\npublic class RouterFunctionMapping extends AbstractHandlerMapping implements org.springframework.beans.factory.InitializingBean; // HandlerMapping implementation that supports RouterFunctions.\n", "des": "Classes supporting the org.springframework.web.servlet.function package."}
{"index": 1984, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package task;\n\n@ConditionalOnClass(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.class) @AutoConfiguration @EnableConfigurationProperties(TaskExecutionProperties.class) public class TaskExecutionAutoConfiguration extends Object; // Auto-configuration for TaskExecutor.\n@ConfigurationProperties(\"spring.task.execution\") public class TaskExecutionProperties extends Object; // Configuration properties for task execution.\npublic static class TaskExecutionProperties.Pool extends Object;\npublic static class TaskExecutionProperties.Shutdown extends Object;\n@ConditionalOnClass(org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.class) @AutoConfiguration(after=TaskExecutionAutoConfiguration.class) @EnableConfigurationProperties(TaskSchedulingProperties.class) public class TaskSchedulingAutoConfiguration extends Object; // Auto-configuration for TaskScheduler.\n@ConfigurationProperties(\"spring.task.scheduling\") public class TaskSchedulingProperties extends Object; // Configuration properties for task scheduling.\npublic static class TaskSchedulingProperties.Pool extends Object;\npublic static class TaskSchedulingProperties.Shutdown extends Object;\n", "des": "Auto-configuration for task execution and scheduling."}
{"index": 1444, "repo": "spring-data-redis-3.1.2", "code": "package connection;\n\npackage connection.convert; // Redis specific converters used for sending data and parsing responses.\npackage connection.jedis; // Connection package for Jedis library.\npackage connection.lettuce; // Connection package for Lettuce Redis client.\npackage connection.stream; // Data structures and interfaces to interact with Redis Streams.\npackage connection.util; // Internal utility package for encoding/decoding Strings to byte[] (using Base64) library.\npublic abstract class AbstractRedisConnection extends Object implements RedisConnection;\npublic class BitFieldSubCommands extends Object implements Iterable<BitFieldSubCommands.BitFieldSubCommand>; // The actual BITFIELD command representation holding several BitFieldSubCommands.BitFieldSubCommands to execute.\npublic abstract static class BitFieldSubCommands.AbstractBitFieldSubCommand extends Object implements BitFieldSubCommands.BitFieldSubCommand;\npublic static class BitFieldSubCommands.BitFieldGet extends BitFieldSubCommands.AbstractBitFieldSubCommand; // The GET sub command used with BitFieldSubCommands.\npublic static class BitFieldSubCommands.BitFieldGetBuilder extends Object;\npublic static class BitFieldSubCommands.BitFieldIncrBy extends BitFieldSubCommands.AbstractBitFieldSubCommand; // The INCRBY sub command used with BitFieldSubCommands.\npublic static enum BitFieldSubCommands.BitFieldIncrBy.Overflow extends Enum<BitFieldSubCommands.BitFieldIncrBy.Overflow>;\npublic static class BitFieldSubCommands.BitFieldSet extends BitFieldSubCommands.AbstractBitFieldSubCommand; // The SET sub command used with BitFieldSubCommands.\npublic static class BitFieldSubCommands.BitFieldSetBuilder extends Object;\npublic static interface BitFieldSubCommands.BitFieldSubCommand; // Sub command to be used as part of BitFieldSubCommands.\npublic static class BitFieldSubCommands.BitFieldType extends Object; // The actual Redis bitfield type representation for signed and unsigned integers used with BitFieldSubCommands.BitFieldSubCommand.\npublic static class BitFieldSubCommands.Offset extends Object; // Offset used inside a BitFieldSubCommands.BitFieldSubCommand.\npublic class ClusterCommandExecutionFailureException extends UncategorizedDataAccessException; // Exception thrown when at least one call to a clustered redis environment fails.\n", "des": "Connection package providing low-level abstractions for interacting with the various Redis 'drivers'/libraries."}
{"index": 286, "repo": "pdfbox-3.0.0-beta1", "code": "package type4;\n\nInterface Operator; // Interface for PostScript operators.\nInterface Parser.SyntaxHandler; // This interface defines all possible syntactic elements of a Type 4 function.\nClass ExecutionContext; // Makes up the execution context, holding the available operators and the execution stack.\nClass InstructionSequence; // Represents an instruction sequence, a combination of values, operands and nested procedures.\nClass InstructionSequenceBuilder; // Basic parser for Type 4 functions which is used to build up instruction sequences.\nClass Operators; // This class provides all the supported operators.\nClass Parser; // Parser for PDF Type 4 functions.\nClass Parser.AbstractSyntaxHandler; // Abstract base class for a Parser.SyntaxHandler.\n", "des": "This package contains Type 4 function support."}
{"index": 3383, "repo": "dagger-2.47", "code": "package multibindings;\n\nAnnotation Type ClassKey; // A MapKey annotation for maps with Class<?> keys.\nAnnotation Type ElementsIntoSet; // The method's return type is Set<T> and all values are contributed to the set.\nAnnotation Type IntKey; // A MapKey annotation for maps with int keys.\nAnnotation Type IntoMap; // The method's return type forms the type argument for the value of a Map<K, Provider<V>>, and the combination of the annotated key and the returned value is contributed to the map as a key/value pair.\nAnnotation Type IntoSet; // The method's return type forms the generic type argument of a Set<T>, and the returned value is contributed to the set.\nAnnotation Type LongKey; // A MapKey annotation for maps with long keys.\nAnnotation Type Multibinds; // Annotates abstract module methods that declare multibindings.\nAnnotation Type StringKey; // A MapKey annotation for maps with String keys.\n", "des": "This package contains the API by which Dagger allows you to bind several objects into a collection that can be injected without depending directly on each of the individual bindings."}
{"index": 570, "repo": "hadoop-common-3.3.4", "code": "package server;\n\nClass ProxyUserAuthenticationFilter; // AuthenticationFilter which adds support to perform operations using end user instead of proxy user.\nClass ProxyUserAuthenticationFilterInitializer; // Filter initializer to initialize ProxyUserAuthenticationFilter which adds support to perform operations using end user instead of proxy user.\n", "des": "Provides the server-side framework for authentication."}
{"index": 207, "repo": "nutch-2.4", "code": "package extractor;\n\nClass JsoupIndexingFilter;\n", "des": "Indexing filter for jsoup-extractor plugin"}
{"index": 2160, "repo": "wicket-core-10.0.0-M1", "code": "package model;\n\npublic abstract class AbstractPropertyModel<T> extends ChainingModel<T> implements IObjectClassAwareModel<T>, IPropertyReflectionAwareModel<T>; // Serves as a base class for different kinds of property models.\npublic class ChainingModel<T> extends Object implements IModel<T>; // This model and its subclasses support chaining of IModels.\npublic class ComponentDetachableModel<T> extends Object implements IComponentAssignedModel<T>; // Quick detachable model that is implements the IComponentAssignedModel and the IModel interfaces.\npublic class ComponentModel<T> extends Object implements IModel<T>, IComponentAssignedModel<T>; // Quick model that is implements the IComponentAssignedModel and the IModel interfaces.\npublic class ComponentPropertyModel<T> extends Object implements IComponentAssignedModel<T>; // A model that references a property by name on the current model of the component it is bound to.\npublic class CompoundPropertyModel<T> extends ChainingModel<T> implements IComponentInheritedModel<T>; // A simple compound model which uses the component's name as the property expression to retrieve properties on the nested model object.\npublic interface IComponentAssignedModel<T> extends IModel<T>; // Models that wish to substitute themselves with a wrapper when they are bound to a component (either through IModel parameter in a constructor or via a call to Component.setDefaultModel(IModel)) should implement this interface.\npublic interface IComponentInheritedModel<T> extends IModel<T>; // This is a marker interface for models that can be inherited from components higher in the hierarchy.\npublic interface IDetachable extends org.apache.wicket.util.io.IClusterable; // Interface to logic for detaching transient information from a detachable model.\n@FunctionalInterface public interface IModel<T> extends IDetachable; // A IModel wraps the actual model Object used by a Component.\n@FunctionalInterface public interface IModelComparator extends org.apache.wicket.util.io.IClusterable; // Implementations of this interface compare model object.\npublic interface IObjectClassAwareModel<T> extends IModel<T>; // Interface implemented by model that can provide class of the model object.\n", "des": "Core model support for Wicket components."}
{"index": 3802, "repo": "lucene-analysis-common-9.7.0", "code": "package ngram;\n\nClass EdgeNGramFilterFactory; // Creates new instances of EdgeNGramTokenFilter.\nClass EdgeNGramTokenFilter; // Tokenizes the given token into n-grams of given size(s).\nClass EdgeNGramTokenizer; // Tokenizes the input from an edge into n-grams of given size(s).\nClass EdgeNGramTokenizerFactory; // Creates new instances of EdgeNGramTokenizer.\nClass NGramFilterFactory; // Factory for NGramTokenFilter.\nClass NGramTokenFilter; // Tokenizes the input into n-grams of the given size(s).\nClass NGramTokenizer; // Tokenizes the input into n-grams of the given size(s).\nClass NGramTokenizerFactory; // Factory for NGramTokenizer.\n", "des": "Character n-gram tokenizers and filters."}
{"index": 975, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass KeyManagersFactoryBean; // Spring factory bean for an array of KeyManagers.\nClass KeyStoreFactoryBean; // Spring factory bean for a KeyStore.\nClass KeyStoreUtils; // Generic utility methods for dealing with KeyStore objects.\nClass SpringSecurityUtils; // Generic utility methods for Spring Security\nClass TrustManagersFactoryBean; // Spring factory bean for an array of TrustManagers.\n", "des": "Contains support classes for handling WS-Security messages."}
{"index": 1442, "repo": "spring-data-redis-3.1.2", "code": "package redis;\n\npackage redis.cache; // Package providing a Redis implementation for Spring cache abstraction.\npackage redis.connection; // Connection package providing low-level abstractions for interacting with the various Redis 'drivers'/libraries.\npackage redis.core; // Core package for integrating Redis with Spring concepts.\npackage redis.hash; // Dedicated support package for Redis hashes.\npackage redis.listener; // Base package for Redis message listener / pubsub container facility\npackage redis.serializer; // Serialization/Deserialization package for converting Object to (and from) binary data.\npackage redis.util; // Commonly used stuff for data manipulation throughout different driver specific implementations.\npublic class ClusterRedirectException extends DataRetrievalFailureException; // ClusterRedirectException indicates that a requested slot is not served by the targeted server but can be obtained on another one.\npublic class ClusterStateFailureException extends DataAccessResourceFailureException; // DataAccessResourceFailureException indicating the current local snapshot of cluster state does no longer represent the actual remote state.\npublic interface ExceptionTranslationStrategy; // Potentially translates an Exception into appropriate DataAccessException.\npublic class FallbackExceptionTranslationStrategy extends PassThroughExceptionTranslationStrategy; // FallbackExceptionTranslationStrategy returns RedisSystemException for unknown Exceptions.\npublic class PassThroughExceptionTranslationStrategy extends Object implements ExceptionTranslationStrategy; // PassThroughExceptionTranslationStrategy returns null for unknown Exceptions.\npublic class RedisConnectionFailureException extends DataAccessResourceFailureException; // Fatal exception thrown when the Redis connection fails completely.\npublic class RedisSystemException extends UncategorizedDataAccessException; // Exception thrown when we can't classify a Redis exception into one of Spring generic data access exceptions.\npublic class TooManyClusterRedirectionsException extends DataRetrievalFailureException; // DataRetrievalFailureException thrown when following cluster redirects exceeds the max number of edges.\n", "des": "Root package for integrating Redis with Spring concepts."}
{"index": 2039, "repo": "spring-messaging-6.0.11", "code": "package broker;\n\npublic abstract class AbstractBrokerMessageHandler extends Object implements MessageHandler, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.SmartLifecycle; // Abstract base class for a MessageHandler that broker messages to registered subscribers.\npublic abstract class AbstractSubscriptionRegistry extends Object implements SubscriptionRegistry; // Abstract base class for implementations of SubscriptionRegistry that looks up information in messages but delegates to abstract methods for the actual storage and retrieval.\npublic class BrokerAvailabilityEvent extends org.springframework.context.ApplicationEvent; // Event raised when a broker's availability changes.\npublic class DefaultSubscriptionRegistry extends AbstractSubscriptionRegistry; // Implementation of SubscriptionRegistry that stores subscriptions in memory and uses a PathMatcher for matching destinations.\npublic class OrderedMessageChannelDecorator extends Object implements MessageChannel; // Decorator for an ExecutorSubscribableChannel that ensures messages are processed in the order they were published to the channel.\npublic class SimpleBrokerMessageHandler extends AbstractBrokerMessageHandler; // A \"simple\" message broker that recognizes the message types defined in SimpMessageType, keeps track of subscriptions with the help of a SubscriptionRegistry, and sends messages to subscribers.\npublic interface SubscriptionRegistry; // A registry of subscription by session that allows looking up subscriptions.\n", "des": "Provides a \"simple\" message broker implementation along with an abstract base class and other supporting types such as a registry for subscriptions."}
{"index": 1993, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package format;\n\npublic class DateTimeFormatters extends Object; // Formatters for dates, times, and date-times.\npublic class WebConversionService extends org.springframework.format.support.DefaultFormattingConversionService; // FormattingConversionService dedicated to web applications for formatting and converting values to/from the web.\n", "des": "Support classes for web-specific formatting."}
{"index": 3736, "repo": "lucene-queryparser-9.7.0", "code": "package processors;\n\nInterface QueryNodeProcessor; // A QueryNodeProcessor is an interface for classes that process a QueryNode tree.\nClass NoChildOptimizationQueryNodeProcessor; // A NoChildOptimizationQueryNodeProcessor removes every BooleanQueryNode, BoostQueryNode, TokenizedPhraseQueryNode or ModifierQueryNode that do not have a valid children.\nClass QueryNodeProcessorImpl; // This is a default implementation for the QueryNodeProcessor interface, it's an abstract class, so it should be extended by classes that want to process a QueryNode tree.\nClass QueryNodeProcessorPipeline; // A QueryNodeProcessorPipeline class should be used to build a query node processor pipeline.\nClass RemoveDeletedQueryNodesProcessor; // A QueryNodeProcessorPipeline class removes every instance of DeletedQueryNode from a query node tree.\n", "des": "Interfaces and implementations used by query node processors"}
{"index": 2730, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class KafkaItemReaderBuilder<K,V> extends Object; // A builder implementation for the KafkaItemReader.\npublic class KafkaItemWriterBuilder<K,V> extends Object; // A builder implementation for the KafkaItemWriter\n", "des": "Builders for Apache Kafka item reader and writer."}
{"index": 991, "repo": "spring-ws-3.0.10.RELEASE", "code": "package client;\n\nInterface RequestMatcher; // Defines the contract for matching requests to expectations.\nInterface RequestXPathExpectations; // Allows for setting up expectations on XPath expressions.\nInterface ResponseActions; // Allows for setting up responses and additional expectations.\nInterface ResponseCreator; // Allows for creating up responses.\nClass MockWebServiceMessageSender; // Mock implementation of WebServiceMessageSender.\nClass MockWebServiceServer; // Main entry point for client-side Web service testing.\nClass RequestMatchers; // Factory methods for RequestMatcher classes.\nClass ResponseCreators; // Factory methods for ResponseCreator classes.\n", "des": "Provides a testing framework for client-side Web service testing."}
{"index": 3579, "repo": "lucene-test-framework-9.7.0", "code": "package analysis;\n\npackage analysis.standard; // Classes to support StandardAnalyzer component testing.\nInterface BaseTokenStreamTestCase.CheckClearAttributesAttribute; // Attribute that records if it was cleared or not.\nClass BaseTokenStreamFactoryTestCase; // Base class for testing tokenstream factories.\nClass BaseTokenStreamTestCase; // Base class for all Lucene unit tests that use TokenStreams.\nClass BaseTokenStreamTestCase.CheckClearAttributesAttributeImpl; // Attribute that records if it was cleared or not.\nClass CannedBinaryTokenStream; // TokenStream from a canned list of binary (BytesRef-based) tokens.\nClass CannedBinaryTokenStream.BinaryToken; // Represents a binary token.\nClass CannedTokenStream; // TokenStream from a canned list of Tokens.\nClass CollationTestBase; // Base test class for testing Unicode collation.\nClass CrankyTokenFilter; // Throws IOException from random Tokenstream methods.\nClass LookaheadTokenFilter<T extends LookaheadTokenFilter.Position>; // An abstract TokenFilter to make it easier to build graph token filters requiring some lookahead.\nClass LookaheadTokenFilter.Position; // Holds all state for a single position; subclass this to record other state at each position.\nClass MockAnalyzer; // Analyzer for testing\nClass MockBytesAnalyzer; // Analyzer for testing that encodes terms as UTF-16 bytes.\nClass MockCharFilter; // the purpose of this charfilter is to send offsets out of bounds if the analyzer doesn't use correctOffset or does incorrect offset math.\nClass MockFixedLengthPayloadFilter; // TokenFilter that adds random fixed-length payloads.\nClass MockGraphTokenFilter; // Randomly inserts overlapped (posInc=0) tokens with posLength sometimes > 1.\nClass MockHoleInjectingTokenFilter; // Randomly injects holes (similar to what a stopfilter would do)\nClass MockLowerCaseFilter; // A lowercasing TokenFilter.\nClass MockPayloadAnalyzer; // Wraps a whitespace tokenizer with a filter that sets the first token, and odd tokens to posinc=1, and all others to 0, encoding the position as pos: XXX in the payload.\nClass MockRandomLookaheadTokenFilter; // Uses LookaheadTokenFilter to randomly peek at future tokens.\n", "des": "Support for testing analysis components."}
{"index": 1833, "repo": "spring-test-6.0.11", "code": "package server;\n\npublic final class MockServerRequest extends Object implements org.springframework.web.reactive.function.server.ServerRequest; // Mock implementation of ServerRequest.\npublic static interface MockServerRequest.Builder; // Builder for MockServerRequest.\n", "des": "Mock objects for the functional web framework."}
{"index": 1811, "repo": "spring-aop-6.0.11", "code": "package annotation;\n\npublic class AnnotationClassFilter extends Object implements ClassFilter; // Simple ClassFilter that looks for a specific annotation being present on a class.\npublic class AnnotationMatchingPointcut extends Object implements Pointcut; // Simple Pointcut that looks for a specific annotation being present on a class or method.\npublic class AnnotationMethodMatcher extends StaticMethodMatcher; // Simple MethodMatcher that looks for a specific annotation being present on a method (checking both the method on the invoked interface, if any, and the corresponding method on the target class).\n", "des": "Annotation support for AOP pointcuts."}
{"index": 841, "repo": "calcite-core-1.34.0", "code": "package core;\n\nInterface RelFactories.AggregateFactory; // Can create a LogicalAggregate of the appropriate type for this rule's calling convention.\nInterface RelFactories.CorrelateFactory; // Can create a correlate of the appropriate type for a rule's calling convention.\nInterface RelFactories.ExchangeFactory; // Can create a Exchange of the appropriate type for a rule's calling convention.\nInterface RelFactories.FilterFactory; // Can create a Filter of the appropriate type for this rule's calling convention.\nInterface RelFactories.JoinFactory; // Can create a join of the appropriate type for a rule's calling convention.\nInterface RelFactories.MatchFactory; // Can create a Match of the appropriate type for a rule's calling convention.\nInterface RelFactories.ProjectFactory; // Can create a LogicalProject of the appropriate type for this rule's calling convention.\nInterface RelFactories.RepeatUnionFactory; // Can create a RepeatUnion of the appropriate type for a rule's calling convention.\nInterface RelFactories.SemiJoinFactory; // Use RelFactories.JoinFactory instead.\nInterface RelFactories.SetOpFactory; // Can create a SetOp for a particular kind of set operation (UNION, EXCEPT, INTERSECT) and of the appropriate type for this rule's calling convention.\nInterface RelFactories.SnapshotFactory; // Can create a Snapshot of the appropriate type for a rule's calling convention.\nInterface RelFactories.SortExchangeFactory; // Can create a SortExchange of the appropriate type for a rule's calling convention.\nInterface RelFactories.SortFactory; // Can create a Sort of the appropriate type for this rule's calling convention.\nInterface RelFactories.SpoolFactory; // Can create a Spool of the appropriate type for a rule's calling convention.\nInterface RelFactories.TableFunctionScanFactory; // Can create a TableFunctionScan of the appropriate type for a rule's calling convention.\nInterface RelFactories.TableScanFactory; // Can create a TableScan of the appropriate type for a rule's calling convention.\nInterface RelFactories.ValuesFactory; // Can create a Values of the appropriate type for a rule's calling convention.\nClass Aggregate; // Relational operator that eliminates duplicates and computes totals.\nClass Aggregate.AggCallBinding; // Implementation of the SqlOperatorBinding interface for an aggregate call applied to a set of operands in the context of a LogicalAggregate.\n", "des": "Defines core relational expressions."}
{"index": 1296, "repo": "spring-core-6.0.11", "code": "package unit;\n\npublic final class DataSize extends Object implements Comparable<DataSize>, Serializable; // A data size, such as '12MB'.\npublic enum DataUnit extends Enum<DataUnit>; // A standard set of DataSize units.\n", "des": "Useful unit data types."}
{"index": 2416, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package cache;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration.class) @ConditionalOnClass(org.springframework.cache.CacheManager.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.cache.CachesEndpoint.class) public class CachesEndpointAutoConfiguration extends Object; // Auto-configuration for CachesEndpoint.\n", "des": "Auto-configuration for actuator cache concerns."}
{"index": 767, "repo": "lucene-analyzers-common-8.11.2", "code": "package core;\n\nClass DecimalDigitFilter; // Folds all Unicode digits in [:General_Category=Decimal_Number:] to Basic Latin digits (0-9).\nClass DecimalDigitFilterFactory; // Factory for DecimalDigitFilter.\nClass FlattenGraphFilter; // Converts an incoming graph token stream, such as one from SynonymGraphFilter, into a flat form so that all nodes form a single linear chain with no side paths.\nClass FlattenGraphFilterFactory; // Factory for FlattenGraphFilter.\nClass KeywordAnalyzer; // \"Tokenizes\" the entire stream as a single token.\nClass KeywordTokenizer; // Emits the entire input as a single token.\nClass KeywordTokenizerFactory; // Factory for KeywordTokenizer.\nClass LetterTokenizer; // A LetterTokenizer is a tokenizer that divides text at non-letters.\nClass LetterTokenizerFactory; // Factory for LetterTokenizer.\nClass LowerCaseFilter; // Normalizes token text to lower case.\nClass LowerCaseFilterFactory; // Factory for LowerCaseFilter.\nClass SimpleAnalyzer; // An Analyzer that filters LetterTokenizer with LowerCaseFilter\nClass StopAnalyzer; // Filters LetterTokenizer with LowerCaseFilter and StopFilter.\nClass StopFilter; // Removes stop words from a token stream.\nClass StopFilterFactory; // Factory for StopFilter.\nClass TypeTokenFilter; // Removes tokens whose types appear in a set of blocked types from a token stream.\nClass TypeTokenFilterFactory; // Factory class for TypeTokenFilter.\nClass UnicodeWhitespaceAnalyzer; // An Analyzer that uses UnicodeWhitespaceTokenizer.\nClass UnicodeWhitespaceTokenizer; // A UnicodeWhitespaceTokenizer is a tokenizer that divides text at whitespace.\nClass UpperCaseFilter; // Normalizes token text to UPPER CASE.\nClass UpperCaseFilterFactory; // Factory for UpperCaseFilter.\nClass WhitespaceAnalyzer; // An Analyzer that uses WhitespaceTokenizer.\nClass WhitespaceTokenizer; // A tokenizer that divides text at whitespace characters as defined by Character.isWhitespace(int).\nClass WhitespaceTokenizerFactory; // Factory for WhitespaceTokenizer.\n", "des": "Basic, general-purpose analysis components."}
{"index": 2132, "repo": "spring-context-support-6.0.11", "code": "package mail;\n\npackage mail.javamail; // JavaMail support for Spring's mail infrastructure.\npublic class MailAuthenticationException extends MailException; // Exception thrown on failed authentication.\npublic abstract class MailException extends org.springframework.core.NestedRuntimeException; // Base class for all mail exceptions.\npublic interface MailMessage; // This is a common interface for mail messages, allowing a user to set key values required in assembling a mail message, without needing to know if the underlying message is a simple text message or a more sophisticated MIME message.\npublic class MailParseException extends MailException; // Exception thrown if illegal message properties are encountered.\npublic class MailPreparationException extends MailException; // Exception to be thrown by user code if a mail cannot be prepared properly, for example when a FreeMarker template cannot be rendered for the mail text.\npublic interface MailSender; // This interface defines a strategy for sending simple mails.\npublic class MailSendException extends MailException; // Exception thrown when a mail sending error is encountered.\npublic class SimpleMailMessage extends Object implements MailMessage, Serializable; // Models a simple mail message, including data such as the from, to, cc, subject, and text fields.\n", "des": "Spring's generic mail infrastructure."}
{"index": 1404, "repo": "spring-boot-actuator-3.1.1", "code": "package jdbc;\n\npublic class DataSourceHealthIndicator extends AbstractHealthIndicator implements org.springframework.beans.factory.InitializingBean; // HealthIndicator that tests the status of a DataSource and optionally runs a test query.\n", "des": "Actuator support for JDBC."}
{"index": 2280, "repo": "spring-data-elasticsearch-5.1.2", "code": "package index;\n\npublic abstract class AliasAction extends Object; // A single action to be contained in AliasActions.\npublic static class AliasAction.Add extends AliasAction; // AliasAction to add an alias.\npublic static class AliasAction.Remove extends AliasAction; // AliasAction to remove an alias.\npublic static class AliasAction.RemoveIndex extends AliasAction; // AliasAction to remove an index.\npublic class AliasActionParameters extends Object; // Value class capturing the arguments for an AliasAction.\npublic static final class AliasActionParameters.Builder extends Object;\npublic class AliasActions extends Object; // Class to define to actions to execute in alias management functions.\npublic class AliasData extends Object; // value object to describe alias information.\npublic record ComponentTemplateRequestData(Settings settings, Document mapping, AliasActions aliasActions, Boolean allowAutoCreate) extends Record; // A component template to be used in a component template request.\npublic static final class ComponentTemplateRequestData.Builder extends Object;\npublic record DeleteComponentTemplateRequest(String templateName) extends Record;\npublic record DeleteIndexTemplateRequest(String templateName) extends Record;\npublic class DeleteTemplateRequest extends Object;\npublic record ExistsComponentTemplateRequest(String templateName) extends Record;\npublic record ExistsIndexTemplateRequest(String templateName) extends Record;\npublic class ExistsTemplateRequest extends Object;\npublic record GetComponentTemplateRequest(String templateName) extends Record;\npublic record GetIndexTemplateRequest(String templateName) extends Record;\npublic class GetTemplateRequest extends Object;\npublic class MappingBuilder extends Object;\npublic final class MappingParameters extends Object; // A class to hold the mapping parameters that might be set on Field or InnerField annotation.\npublic record PutComponentTemplateRequest(String name, Long version, Boolean create, Duration masterTimeout, ComponentTemplateRequestData template) extends Record;\npublic static final class PutComponentTemplateRequest.Builder extends Object;\npublic record PutIndexTemplateRequest(String name, String[] indexPatterns, Settings settings, Document mapping, AliasActions aliasActions, List<String> composedOf) extends Record;\npublic static class PutIndexTemplateRequest.Builder extends Object;\npublic class PutTemplateRequest extends Object; // Request to create an index template.\npublic static final class PutTemplateRequest.TemplateRequestBuilder extends Object;\npublic class ReactiveMappingBuilder extends MappingBuilder; // Subclass of MappingBuilder with specialized methods To inhibit blocking calls\n", "des": "Classes related to Elasticsearch index management."}
{"index": 1305, "repo": "groovy-all-4.0.13", "code": "package lang;\n\npublic interface AdaptingMetaClass extends MetaClass; // An interface for MetaClass instances that \"adapt\" other MetaClass instances such as a proxy or delegating MetaClass.\npublic class BenchmarkInterceptor extends Object implements Interceptor; // Interceptor that registers the timestamp of each method call before and after invocation.\npublic class Binding extends GroovyObjectSupport; // Represents the variable bindings of a script which can be altered from outside the script object or created outside of a script and passed into it.\npublic interface Buildable;\n@Documented @Retention(SOURCE) @Target(TYPE) public @interface Category; // Transforms an instance-style Groovy class or interface to become a static-style conventional Groovy category.\npublic abstract class Closure<V> extends GroovyObjectSupport implements Cloneable, Runnable, GroovyCallable<V>, Serializable; // Represents any closure object in Groovy.\npublic class ClosureException extends RuntimeException; // An exception thrown by a closure invocation\npublic interface ClosureInvokingMethod; // An interface for MetaMethods that invoke closures to implements.\n@Documented @Retention(RUNTIME) @Target({FIELD,METHOD}) public @interface Delegate; // Annotation to automatically delegate part of the functionality of an owner class to the annotated delegation target.\n@Documented @Retention(RUNTIME) @Target({PARAMETER,METHOD}) public @interface DelegatesTo; // This annotation can be used by API or DSL writers to document parameters which accept a closure.\n@Retention(RUNTIME) @Target(PARAMETER) public static @interface DelegatesTo.Target; // Parameter annotation used to specify the delegate for a @DelegatesTo annotated parameter of the same method.\npublic class DelegatingMetaClass extends Object implements MetaClass, MutableMetaClass, GroovyObject;\npublic class DeprecationException extends RuntimeException; // Use this exception to mark a method implementation as being deprecated.\npublic class EmptyRange<T extends Comparable> extends AbstractList<T> implements Range<T>; // Constructing Ranges like 0..<0\npublic class ExpandoMetaClass extends MetaClassImpl implements GroovyObject; // ExpandoMetaClass is a MetaClass that behaves like an Expando, allowing the addition or replacement of methods, properties and constructors on the fly.\n", "des": "Core Groovy language classes for implementing data structures, closures, metadata and so forth."}
{"index": 1485, "repo": "tribuo-core-4.3.1", "code": "package protos;\n\npublic interface ProtoSerializable<T extends com.google.protobuf.Message>; // Interface for serializing an implementing object to the specified protobuf.\n@Retention(RUNTIME) @Target(TYPE) public @interface ProtoSerializableClass; // Mark a class as being ProtoSerializable and specify the class type used to serialize the \"serialized_data\".\n@Retention(RUNTIME) @Target(FIELD) public @interface ProtoSerializableField; // Annotation which denotes that a field should be part of the protobuf serialized representation.\n@Retention(RUNTIME) @Target(FIELD) public @interface ProtoSerializableKeysValuesField; // Annotation which denotes that the map field this is applied to is serialized as two repeated fields, one for keys and one for values.\n@Retention(RUNTIME) @Target(FIELD) public @interface ProtoSerializableMapField; // Annotation which denotes that a map field should be part of the protobuf serialized representation.\n@Retention(RUNTIME) @Target(FIELD) public @interface ProtoSerializableMapValuesField; // Annotation which denotes that the map field this is applied to is serialized as a list of values.\npublic final class ProtoUtil extends Object; // Utilities for working with Tribuo protobufs.\n", "des": "Classes which control the serialization of Tribuo objects to and from protocol buffers."}
{"index": 143, "repo": "ignite-core-2.15.0", "code": "package eventstorage;\n\nInterface DiscoveryEventListener; // Internal listener for discovery events.\nInterface GridLocalEventListener; // Listener for asynchronous local node grid events.\nInterface HighPriorityListener; // Marker interface for listeners called before 'regular' listeners.\nClass GridEventStorageManager; // Grid event storage SPI manager.\nClass GridEventStorageMessage; // Event storage message.\n", "des": "TODO."}
{"index": 3539, "repo": "opennlp-tools-2.2.0", "code": "package ngram;\n\nClass NGramCharModel; // The NGramCharModel can be used to create character ngrams.\nClass NGramGenerator; // Generates an nGram, via an optional separator, and returns the grams as a list of strings\nClass NGramModel; // The NGramModel can be used to crate ngrams and character ngrams.\nClass NGramUtils; // Utility class for ngrams.\n", "des": "Package related to computing and storing n-gram frequencies."}
{"index": 194, "repo": "ignite-core-2.15.0", "code": "package worker;\n\nInterface GridWorkerListener; // This interface defines worker listener.\nInterface WorkProgressDispatcher; // Dispatcher of workers' progress which allows us to understand if worker freezes.\nClass CycleThread; // Thread wrapper for standart cycle operations.\nClass GridWorker; // Extension to standard Runnable interface.\nClass GridWorkerFuture<T>; // Future for locally executed closure that defines cancellation logic.\nClass GridWorkerListenerAdapter; // Convenience adapter for GridWorkerListener.\nClass GridWorkerPool; // Pool of runnable workers.\n", "des": "Common utility classes for threads."}
{"index": 2490, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package client;\n\n@AutoConfiguration(after={ObservationAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration.class,org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.observation.Observation.class) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @Import({org.springframework.boot.actuate.autoconfigure.observation.web.client.RestTemplateObservationConfiguration.class,org.springframework.boot.actuate.autoconfigure.observation.web.client.WebClientObservationConfiguration.class}) @EnableConfigurationProperties({MetricsProperties.class,ObservationProperties.class}) public class HttpClientObservationsAutoConfiguration extends Object; // Auto-configuration for HTTP client-related observations.\n", "des": "Auto-configuration for web client observation support."}
{"index": 395, "repo": "amqp-client-5.18.0", "code": "package recovery;\n\nInterface BackoffPolicy; // Backoff policy for topology recovery retry attempts.\nInterface ConsumerRecoveryListener; // Not part of the public API.\nInterface DefaultRetryHandler.RetryOperation<T>;\nInterface QueueRecoveryListener; // Not part of the public API.\nInterface RecoveredQueueNameSupplier; // Functional callback interface that can be used to rename a queue during topology recovery.\nInterface RecoveryCanBeginListener; // Used internally to indicate when connection recovery can begin.\nInterface RetryHandler; // Contract to retry failed operations during topology recovery.\nInterface TopologyRecoveryFilter; // Filter to know whether entities should be recovered or not.\nClass AutorecoveringChannel; // Channel implementation that is automatically recovered during connection recovery.\nClass AutorecoveringConnection; // Connection implementation that performs automatic recovery when connection shutdown is not initiated by the application (e.g.\nClass DefaultRetryHandler; // Composable topology recovery retry handler.\nClass RecordedBinding;\nClass RecordedConsumer;\nClass RecordedEntity;\nClass RecordedExchange;\nClass RecordedExchangeBinding;\nClass RecordedNamedEntity;\nClass RecordedQueue;\nClass RecordedQueueBinding;\nClass RecoveryAwareAMQConnection; // AMQConnection modification that uses RecoveryAwareChannelN\nClass RecoveryAwareAMQConnectionFactory;\nClass RecoveryAwareChannelManager;\nClass RecoveryAwareChannelN; // ChannelN modification that keeps track of delivery tags and avoids sending\nClass RetryContext; // The context of a topology recovery retry operation.\nClass RetryResult; // The retry of a retried topology recovery operation.\nClass TopologyRecoveryRetryHandlerBuilder; // Builder to ease creation of DefaultRetryHandler instances.\nClass TopologyRecoveryRetryLogic; // Useful ready-to-use conditions and operations for DefaultRetryHandler.\n", "des": "Implementation of connection and topology recovery."}
{"index": 2638, "repo": "spring-integration-sftp-6.1.2", "code": "package filters;\n\npublic class SftpPersistentAcceptOnceFileListFilter extends org.springframework.integration.file.filters.AbstractPersistentAcceptOnceFileListFilter<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Persistent file list filter using the server's file timestamp to detect if we've already 'seen' this file.\npublic class SftpRegexPatternFileListFilter extends org.springframework.integration.file.filters.AbstractRegexPatternFileListFilter<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Implementation of AbstractRegexPatternFileListFilter for SFTP.\npublic class SftpSimplePatternFileListFilter extends org.springframework.integration.file.filters.AbstractSimplePatternFileListFilter<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Implementation of AbstractSimplePatternFileListFilter for SFTP.\npublic class SftpSystemMarkerFilePresentFileListFilter extends org.springframework.integration.file.filters.AbstractMarkerFilePresentFileListFilter<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // SFTP implementation of AbstractMarkerFilePresentFileListFilter.\n", "des": "Provides classes supporting SFTP file filtering."}
{"index": 1743, "repo": "spring-batch-integration-5.0.2", "code": "package launch;\n\npublic class JobLaunchingGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler; // The JobLaunchingGateway is used to launch Batch Jobs.\npublic class JobLaunchingMessageHandler extends Object implements JobLaunchRequestHandler; // Message handler which uses strategies to convert a Message into a job and a set of job parameters\npublic class JobLaunchRequest extends Object; // Encapsulation of a Job and its JobParameters forming a request for a job to be launched.\npublic interface JobLaunchRequestHandler; // Interface for handling a JobLaunchRequest and returning a JobExecution.\n", "des": "Message based job launching components."}
{"index": 3851, "repo": "lucene-core-9.7.0", "code": "package similarities;\n\nInterface LMSimilarity.CollectionModel; // A strategy for computing the collection language model.\nClass AfterEffect; // This class acts as the base class for the implementations of the first normalization of the informative content in the DFR framework.\nClass AfterEffectB; // Model of the information gain based on the ratio of two Bernoulli processes.\nClass AfterEffectL; // Model of the information gain based on Laplace's law of succession.\nClass Axiomatic; // Axiomatic approaches for IR.\nClass AxiomaticF1EXP; // F1EXP is defined as Sum(tf(term_doc_freq)*ln(docLen)*IDF(term)) where IDF(t) = pow((N+1)/df(t), k) N=total num of docs, df=doc freq\nClass AxiomaticF1LOG; // F1LOG is defined as Sum(tf(term_doc_freq)*ln(docLen)*IDF(term)) where IDF(t) = ln((N+1)/df(t)) N=total num of docs, df=doc freq\nClass AxiomaticF2EXP; // F2EXP is defined as Sum(tfln(term_doc_freq, docLen)*IDF(term)) where IDF(t) = pow((N+1)/df(t), k) N=total num of docs, df=doc freq\nClass AxiomaticF2LOG; // F2EXP is defined as Sum(tfln(term_doc_freq, docLen)*IDF(term)) where IDF(t) = ln((N+1)/df(t)) N=total num of docs, df=doc freq\nClass AxiomaticF3EXP; // F3EXP is defined as Sum(tf(term_doc_freq)*IDF(term)-gamma(docLen, queryLen)) where IDF(t) = pow((N+1)/df(t), k) N=total num of docs, df=doc freq gamma(docLen, queryLen) = (docLen-queryLen)*queryLen*s/avdl NOTE: the gamma function of this similarity creates negative scores\n", "des": "This package contains the various ranking models that can be used in Lucene."}
{"index": 2474, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package statsd;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.statsd.StatsdMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"statsd\") @EnableConfigurationProperties(StatsdProperties.class) public class StatsdMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to StatsD.\n@ConfigurationProperties(prefix=\"management.statsd.metrics.export\") public class StatsdProperties extends Object; // @ConfigurationProperties for configuring StatsD metrics export.\npublic class StatsdPropertiesConfigAdapter extends PropertiesConfigAdapter<StatsdProperties> implements io.micrometer.statsd.StatsdConfig; // Adapter to convert StatsdProperties to a StatsdConfig.\n", "des": "Support for exporting actuator metrics to StatsD."}
{"index": 1692, "repo": "spring-data-couchbase-5.1.2", "code": "package mapping;\n\npackage mapping.event; // This package contains various events that are emitted during the lifecycle of a Spring Data entity.\npublic class BasicCouchbasePersistentEntity<T> extends BasicPersistentEntity<T,CouchbasePersistentProperty> implements CouchbasePersistentEntity<T>, EnvironmentAware; // The representation of a persistent entity.\npublic class BasicCouchbasePersistentProperty extends AnnotationBasedPersistentProperty<CouchbasePersistentProperty> implements CouchbasePersistentProperty; // Implements annotated property representations of a given Field instance.\npublic class CouchbaseDocument extends Object implements CouchbaseStorable; // A CouchbaseDocument is an abstract representation of a document stored inside Couchbase Server.\npublic class CouchbaseList extends Object implements CouchbaseStorable; // A CouchbaseList is an abstract list that represents an array stored in a (most of the times JSON) document.\npublic class CouchbaseMappingContext extends AbstractMappingContext<BasicCouchbasePersistentEntity<?>,CouchbasePersistentProperty> implements ApplicationContextAware; // Default implementation of a MappingContext for Couchbase using BasicCouchbasePersistentEntity and BasicCouchbasePersistentProperty as primary abstractions.\npublic interface CouchbasePersistentEntity<T> extends PersistentEntity<T,CouchbasePersistentProperty>; // Represents an entity that can be persisted which contains 0 or more properties.\npublic interface CouchbasePersistentProperty extends PersistentProperty<CouchbasePersistentProperty>; // Represents a property part of an entity that needs to be persisted.\npublic abstract class CouchbaseSimpleTypes extends Object;\npublic interface CouchbaseStorable; // Marker Interface to identify either a CouchbaseDocument or a CouchbaseList.\n@Inherited @Retention(RUNTIME) @Target(TYPE) @ScanConsistency public @interface Document; // Identifies a domain object to be persisted to Couchbase.\n@Inherited @Retention(RUNTIME) @Target({TYPE,ANNOTATION_TYPE}) public @interface Durability; // Durability annotation\n@Documented @Retention(RUNTIME) @Target({FIELD,ANNOTATION_TYPE}) public @interface Expiration; // Annotation to define a field to be substituted for META().expiration in a query\n@Inherited @Retention(RUNTIME) @Target({TYPE,ANNOTATION_TYPE}) public @interface Expiry; // Expiry annotation\n@Documented @Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface Field; // Annotation to define custom metadata for document fields.\n", "des": "This package contains interfaces and annotations relative to object-json mapping and the notion of a Couchbase Storable."}
{"index": 2952, "repo": "spring-integration-xml-6.1.2", "code": "package selector;\n\npublic abstract class AbstractXPathMessageSelector extends Object implements org.springframework.integration.core.MessageSelector; // Base class for XPath MessageSelector implementations.\npublic class BooleanTestXPathMessageSelector extends AbstractXPathMessageSelector; // Boolean XPath testing MessageSelector.\npublic class RegexTestXPathMessageSelector extends AbstractXPathMessageSelector; // XPath MessageSelector that tests if a provided String value matches a given Regular Expression.\npublic class StringValueTestXPathMessageSelector extends AbstractXPathMessageSelector; // XPath MessageSelector that tests if a provided value supports payloads of type Document or String.\npublic class XmlValidatingMessageSelector extends Object implements org.springframework.integration.core.MessageSelector; // The XML validation-specific MessageSelector.\npublic static enum XmlValidatingMessageSelector.SchemaType extends Enum<XmlValidatingMessageSelector.SchemaType>;\n", "des": "Provides XML-centric MessageSelector implementations."}
{"index": 3504, "repo": "poi-5.2.3", "code": "package storage;\n\nInterface BlockWritable; // An interface for persisting block storage of POIFS components.\nInterface HeaderBlockConstants; // Constants used in reading/writing the Header block\nClass BATBlock; // A block of block allocation table entries.\nClass BATBlock.BATBlockAndIndex;\nClass HeaderBlock; // The block containing the archive header\n", "des": "storage package contains low level binary structures for POIFS's implementation of the OLE 2 Compound Document Format."}
{"index": 3171, "repo": "tomcat-api-10.1", "code": "package jmx;\n\nClass Arg;\nClass JMXAccessorCondition; // Definition:\nClass JMXAccessorConditionBase;\nClass JMXAccessorCreateTask; // Create new MBean at JMX JSR 160 MBeans Server.\nClass JMXAccessorEqualsCondition; // Definition\nClass JMXAccessorGetTask; // Access JMX JSR 160 MBeans Server.\nClass JMXAccessorInvokeTask; // Access JMX JSR 160 MBeans Server.\nClass JMXAccessorQueryTask; // Query for Mbeans.\nClass JMXAccessorSetTask; // Access JMX JSR 160 MBeans Server.\nClass JMXAccessorTask; // Access JMX JSR 160 MBeans Server.\nClass JMXAccessorUnregisterTask; // unregister an MBean at JMX JSR 160 MBeans Server.\n", "des": "This package contains a set of JMX Task implementations for Ant (version 1.6 or later) that can be used to interact with the Remote JMX JSR 160 RMI Adaptor to get/set attributes, invoke MBean operations and query for Mbeans inside a running instance of Tomcat."}
{"index": 2829, "repo": "spring-data-r2dbc-3.1.2", "code": "package convert;\n\npublic class EntityRowMapper<T> extends Object implements BiFunction<Row,RowMetadata,T>; // Maps a Row to an entity of type T, including entities referenced.\n@WritingConverter public abstract class EnumWriteSupport<E extends Enum<E>> extends Object implements Converter<E,E>; // Support class to natively write Enum values to the database.\npublic class MappingR2dbcConverter extends BasicRelationalConverter implements R2dbcConverter; // Converter for R2DBC.\npublic interface R2dbcConverter extends EntityReader<Object,Row>, EntityWriter<Object,OutboundRow>, RelationalConverter; // Central R2DBC specific converter interface.\npublic class R2dbcCustomConversions extends CustomConversions; // Value object to capture custom conversion.\n", "des": "R2DBC-specific conversion and converter implementations."}
{"index": 2383, "repo": "spring-batch-core-5.0.2", "code": "package support;\n\npublic abstract class AbstractApplicationContextFactory extends Object implements ApplicationContextFactory, org.springframework.context.ApplicationContextAware; // ApplicationContextFactory implementation that takes a parent context and a path to the context to create.\npublic interface ApplicationContextFactory; // Factory for the creation of ApplicationContext instances.\npublic class ApplicationContextJobFactory extends Object implements JobFactory; // A JobFactory that creates its own ApplicationContext and pulls a bean out when asked to create a Job.\npublic class AutomaticJobRegistrar extends Object implements org.springframework.core.Ordered, org.springframework.context.SmartLifecycle, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // Loads and unloads Jobs when the application context is created and destroyed.\npublic class ClasspathXmlApplicationContextsFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ApplicationContextFactory[]>, org.springframework.context.ApplicationContextAware; // A convenient factory for creating a set of ApplicationContextFactory components from a set of resources.\n@Configuration(proxyBeanMethods=false) @Import(ScopeConfiguration.class) public class DefaultBatchConfiguration extends Object implements org.springframework.context.ApplicationContextAware; // Base Configuration class that provides common JDBC-based infrastructure beans for enabling and using Spring Batch.\npublic class DefaultJobLoader extends Object implements JobLoader, org.springframework.beans.factory.InitializingBean; // Default implementation of JobLoader.\npublic class GenericApplicationContextFactory extends AbstractApplicationContextFactory; // ApplicationContextFactory implementation that takes a parent context and a path to the context to create.\npublic class GroupAwareJob extends Object implements Job; // A Job that can optionally prepend a group name to another job's name, to make it fit a naming convention for type or origin.\npublic class JobFactoryRegistrationListener extends Object; // Generic service that can bind and unbind a JobFactory in a JobRegistry.\npublic interface JobLoader;\npublic class JobRegistryBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // A BeanPostProcessor that registers Job beans with a JobRegistry.\n", "des": "Specific implementations of configuration concerns."}
{"index": 839, "repo": "calcite-core-1.34.0", "code": "package rel;\n\npackage rel.convert; // Defines relational expressions and rules for converting between calling conventions.\npackage rel.core; // Defines core relational expressions.\npackage rel.externalize; // Facilities to externalize RelNodes to and from XML and JSON format.\npackage rel.hint; // Defines hints interfaces and utilities for relational expressions.\npackage rel.logical; // Defines logical relational expressions.\npackage rel.metadata; // Defines metadata interfaces and utilities for relational expressions.\npackage rel.mutable; // Defines mutable relational expressions.\npackage rel.rel2sql; // Translates a relational expression to SQL parse tree.\npackage rel.rules; // Provides a core set of planner rules.\npackage rel.stream; // Defines relational expressions for streaming.\npackage rel.type; // Defines a type system for relational expressions.\nInterface PhysicalNode; // Physical node in a planner that is capable of doing physical trait propagation and derivation.\nInterface RelCollation; // Description of the physical ordering of a relational expression.\nInterface RelDistribution; // Description of the physical distribution of a relational expression.\nInterface RelInput; // Context from which a relational expression can initialize itself, reading from a serialized form of the relational expression.\nInterface RelNode; // A RelNode is a relational expression.\nInterface RelNode.Context; // Context of a relational expression, for purposes of checking validity.\nInterface RelReferentialConstraint; // Interface for a referential constraint, i.e., Foreign-Key - Unique-Key relationship, between two tables.\nInterface RelShuttle; // Visitor that has methods for the common logical relational expressions.\nInterface RelWriter; // Callback for an expression to dump itself to.\nClass AbstractRelNode; // Base class for every relational expression (RelNode).\nClass BiRel; // Abstract base class for relational expressions with a two inputs.\nClass RelCollationImpl; // Simple implementation of RelCollation.\nClass RelCollations; // Utilities concerning RelCollation and RelFieldCollation.\nClass RelCollationTraitDef; // Definition of the ordering trait.\nClass RelDistributions; // Utilities concerning RelDistribution.\nClass RelDistributionTraitDef; // Definition of the distribution trait.\nClass RelFieldCollation; // Definition of the ordering of one field of a RelNode whose output is to be sorted.\n", "des": "Defines relational expressions."}
{"index": 3258, "repo": "opencms-core-15.0", "code": "package as400;\n\nClass CmsHistoryDriver; // AS400 implementation of the history driver methods.\nClass CmsProjectDriver; // AS400 implementation of the project driver methods.\nClass CmsSqlManager; // AS400 implementation of the SQL Manager.\nClass CmsSubscriptionDriver; // AS/400 implementation of the subscription driver.\nClass CmsUserDriver; // AS400 implementation of the user driver methods.\nClass CmsVfsDriver; // AS400 implementation of the VFS driver methods.\n", "des": "AS400 implementation of the OpenCms database connector."}
{"index": 3013, "repo": "spring-web-6.0.11", "code": "package support;\n\npublic class AllEncompassingFormHttpMessageConverter extends FormHttpMessageConverter; // Extension of FormHttpMessageConverter, adding support for XML and JSON-based parts.\n", "des": "Provides a comprehensive HttpMessageConverter variant for form handling."}
{"index": 3204, "repo": "tomcat-api-10.1", "code": "package mime;\n\nClass MimeUtility; // Utility class to decode MIME texts.\nClass RFC2231Utility; // Utility class to decode/encode character set on HTTP Header fields based on RFC 2231.\n", "des": "MIME decoder implementation, imported and retailed from Apache Geronimo."}
{"index": 2904, "repo": "spring-aspects-6.0.11", "code": "package aspectj;\n\n@Configuration(proxyBeanMethods=false) @Role(2) public class AspectJCachingConfiguration extends org.springframework.cache.annotation.AbstractCachingConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based annotation-driven cache management.\n@Configuration(proxyBeanMethods=false) @Role(2) public class AspectJJCacheConfiguration extends org.springframework.cache.jcache.config.AbstractJCacheConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based annotation-driven cache management for standard JSR-107 annotations.\n", "des": "AspectJ-based caching support."}
{"index": 1504, "repo": "spring-context-6.0.11", "code": "package config;\n\npublic abstract class CacheManagementConfigUtils extends Object; // Configuration constants for internal sharing across subpackages.\npublic class CacheNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler allowing for the configuration of declarative cache management using either XML or using annotations.\n", "des": "Support package for declarative caching configuration, with XML schema being the primary configuration format."}
{"index": 2314, "repo": "spring-boot-3.1.1", "code": "package json;\n\npublic abstract class AbstractJsonParser extends Object implements JsonParser; // Base class for parsers wrapped or implemented in this package.\npublic class BasicJsonParser extends AbstractJsonParser; // Really basic JSON parser for when you have nothing else available.\npublic class GsonJsonParser extends AbstractJsonParser; // Thin wrapper to adapt Gson to a JsonParser.\npublic class JacksonJsonParser extends AbstractJsonParser; // Thin wrapper to adapt Jackson 2 ObjectMapper to JsonParser.\npublic class JsonParseException extends IllegalArgumentException; // IllegalArgumentException thrown when source JSON is invalid.\npublic interface JsonParser; // Parser that can read JSON formatted strings into Maps or Lists.\npublic abstract class JsonParserFactory extends Object; // Factory to create a JsonParser.\n", "des": "Support for parsing JSON."}
{"index": 3657, "repo": "solr-core-9.3.0", "code": "package component;\n\nInterface MergeStrategy; // The MergeStrategy class defines custom merge logic for distributed searches.\nInterface QueryElevationComponent.ElevationProvider; // Provides the elevations defined for queries.\nInterface StatsValues; // StatsValue defines the interface for the collection of statistical values about fields and facets.\nClass ActiveTasksListComponent; // List the active tasks that can be cancelled\nClass ActiveTasksListHandler; // Handles request for listing all active cancellable tasks\nClass DebugComponent; // Adds debugging information to a request.\nClass ExpandComponent; // The ExpandComponent is designed to work with the CollapsingPostFilter.\nClass FacetComponent; // Computes facets -- aggregations with counts of terms or ranges over the whole search results.\nClass FacetComponent.DistribFieldFacet; // This API is experimental and subject to change\nClass FacetComponent.FacetBase; // This API is experimental and subject to change\nClass FacetComponent.FacetContext; // Encapsulates facet ranges and facet queries such that their parameters are parsed and cached for efficient re-use.\nClass FacetComponent.FacetInfo; // This class is used exclusively for merging results from each shard in a distributed facet request.\nClass FacetComponent.FieldFacet; // This API is experimental and subject to change\nClass FacetComponent.QueryFacet; // This API is experimental and subject to change\nClass FacetComponent.ShardFacetCount; // This API is experimental and subject to change\nClass FieldFacetStats; // FieldFacetStats is a utility to accumulate statistics on a set of values in one field, for facet values present in another field.\nClass HighlightComponent; // Highlights query words in the search results.\nClass HttpShardHandler;\nClass HttpShardHandlerFactory;\nClass IterativeMergeStrategy;\nClass MoreLikeThisComponent; // TODO!\nClass PhrasesIdentificationComponent; // A component that can be used in isolation, or in conjunction with QueryComponent to identify & score \"phrases\" found in the input string, based on shingles in indexed fields.\nClass PhrasesIdentificationComponent.Phrase; // Model the data known about a single (candidate) Phrase -- which may or may not be indexed\nClass PhrasesIdentificationComponent.PhrasesContextData; // Simple container for all request options and data this component needs to store in the Request Context\n", "des": "SearchComponent implementations for use in SearchHandler"}
{"index": 2840, "repo": "spring-integration-core-6.1.2", "code": "package integration;\n\npackage integration.acks; // Provides classes related to message acknowledgment.\npackage integration.aggregator; // Provides classes related to message aggregation.\npackage integration.annotation; // Provides annotations for annotation-based configuration.\npackage integration.aop; // Provides classes to support message publication using AOP.\npackage integration.channel; // Provides classes representing various channel types.\npackage integration.codec; // Provides base classes for the Codec abstraction.\npackage integration.config; // Base package for configuration.\npackage integration.context; // Provides classes relating to application context configuration.\npackage integration.core; // Provides core classes.\npackage integration.dispatcher; // Provides classes related to dispatching messages.\npackage integration.dsl; // Root package of the Spring Integration Java DSL.\npackage integration.endpoint; // Provides core classes related to Endpoints.\npackage integration.events; // ApplicationEvents generated by the Spring Integration framework.\npackage integration.expression; // Provides classes supporting SpEL expressions.\npackage integration.filter; // Provides classes supporting the filter pattern.\npackage integration.gateway; // Provides classes supporting messaging gateways.\npackage integration.graph; // Provides classes related to the runtime object graph.\npackage integration.handler; // Provides classes implementing various types of message handler.\npackage integration.history; // Provides classes supporting the capture of message history.\npackage integration.json; // Provides classes supporting JSON in Spring Integration.\npackage integration.leader; // Temporary package until s-c-c-core is released.\npackage integration.mapping; // Provides classes related to mapping to/from message headers.\npackage integration.message; // Provides concrete Message implementations.\npackage integration.metadata; // Provides classes supporting metadata stores.\npackage integration.resource; // Provides classes related to messaging using Spring Resources\npackage integration.router; // Provides classes supporting the router pattern.\npackage integration.routingslip; // Provides classes supporting the RoutingSlip pattern.\npackage integration.scattergather; // Provides classes supporting the Scatter-Gather pattern.\npackage integration.scheduling; // Provides classes related to task scheduling.\npackage integration.selector; // Provides classes related to message selection.\npackage integration.splitter; // Provides classes supporting the splitter pattern.\npackage integration.store; // Provides classes releated to storing messages.\npackage integration.support; // Base core support package.\n", "des": "Base package for Spring Integration Core."}
{"index": 673, "repo": "commons-lang3-3.12.0", "code": "package reflect;\n\nInterface Typed<T>; // Generalization of \"has a type.\"\nClass ConstructorUtils; // Utility reflection methods focused on constructors, modeled after MethodUtils.\nClass FieldUtils; // Utilities for working with Fields by reflection.\nClass InheritanceUtils; // Utility methods focusing on inheritance.\nClass MethodUtils; // Utility reflection methods focused on Methods, originally from Commons BeanUtils.\nClass TypeLiteral<T>; // Type literal comparable to javax.enterprise.util.TypeLiteral, made generally available outside the JEE context.\nClass TypeUtils; // Utility methods focusing on type inspection, particularly with regard to generics.\nClass TypeUtils.WildcardTypeBuilder; // WildcardType builder.\n", "des": "Accumulates common high-level uses of the java.lang.reflect APIs."}
{"index": 3749, "repo": "lucene-queryparser-9.7.0", "code": "package parser;\n\nInterface QueryParserConstants; // Token literal values and constants.\nClass QueryParser; // This class is generated by JavaCC.\nClass QueryParserTokenManager; // Token Manager.\nClass Token; // Describes the input token stream.\nClass ParseException; // This exception is thrown when parse errors are encountered.\nClass TokenMgrError; // Token Manager Error.\n", "des": "This package contains the QueryParser.jj source file for the Surround parser."}
{"index": 3081, "repo": "spring-ws-core-4.0.5", "code": "package core;\n\npublic class SoapActionCallback extends Object implements WebServiceMessageCallback; // WebServiceMessageCallback implementation that sets the SOAP Action header on the message.\npublic class SoapFaultMessageResolver extends Object implements FaultMessageResolver; // Simple fault resolver that simply throws a SoapFaultClientException when a fault occurs.\n", "des": "Contains core classes for SOAP-specific client-side Spring-WS support."}
{"index": 2202, "repo": "spring-data-commons-3.1.2", "code": "package domain;\n\npackage domain.jaxb; // Central domain abstractions especially to be used in combination with the Repository abstraction.\npublic class AbstractAggregateRoot<A extends AbstractAggregateRoot<A>> extends Object; // Convenience base class for aggregate roots that exposes a AbstractAggregateRoot.registerEvent(Object) to capture domain events and expose them via AbstractAggregateRoot.domainEvents().\npublic abstract class AbstractPageRequest extends Object implements Pageable, Serializable; // Abstract Java Bean implementation of Pageable.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) public @interface AfterDomainEventPublication; // Annotation to be used on a method of a Spring Data managed aggregate to get invoked after the events of an aggregate have been published.\npublic interface Auditable<U,ID,T extends TemporalAccessor> extends Persistable<ID>; // Interface for auditable entities.\npublic interface AuditorAware<T>; // Interface for components that are aware of the application's current auditor.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) public @interface DomainEvents; // DomainEvents can be used on methods of aggregate roots managed by Spring Data repositories to publish the events returned by that method as Spring application events.\npublic interface Example<T>; // Support for query by example (QBE).\npublic interface ExampleMatcher; // Specification for property path matching to use in query by example (QBE).\npublic static class ExampleMatcher.GenericPropertyMatcher extends Object; // A generic property matcher that specifies string matching and case sensitivity.\npublic static class ExampleMatcher.GenericPropertyMatchers extends Object; // Predefined property matchers to create a ExampleMatcher.GenericPropertyMatcher.\npublic static interface ExampleMatcher.MatcherConfigurer<T>; // Callback to configure a matcher.\npublic static enum ExampleMatcher.MatchMode extends Enum<ExampleMatcher.MatchMode>; // The match modes to expose so that clients can find about how to concatenate the predicates.\npublic static enum ExampleMatcher.NoOpPropertyValueTransformer extends Enum<ExampleMatcher.NoOpPropertyValueTransformer> implements ExampleMatcher.PropertyValueTransformer;\npublic static enum ExampleMatcher.NullHandler extends Enum<ExampleMatcher.NullHandler>; // Null handling for creating criterion out of an Example.\npublic static class ExampleMatcher.PropertySpecifier extends Object; // Define specific property handling for a Dot-Path.\n", "des": "Central domain abstractions especially to be used in combination with the Repository abstraction."}
{"index": 644, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package resolver;\n\nInterface SubClusterResolver; // An utility that helps to determine the sub-cluster that a specified node or rack belongs to.\nClass AbstractSubClusterResolver; // Partial implementation of SubClusterResolver, containing basic implementations of the read methods.\nClass DefaultSubClusterResolverImpl; // Default simple sub-cluster and rack resolver class.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 3272, "repo": "opencms-core-15.0", "code": "package wrapper;\n\nInterface I_CmsResourceWrapper; // Interface which is used by the CmsObjectWrapper to create a different view to the resources in the VFS.\nClass A_CmsResourceExtensionWrapper; // Abstract base class which implements I_CmsResourceWrapper and makes it possible to add and remove file extensions to resources.\nClass A_CmsResourceWrapper; // Default abstract implementation of the interface I_CmsResourceWrapper.\nClass CmsObjectWrapper; // This class contains a subset of the methods of CmsObject and uses the configured resource wrappers (I_CmsResourceWrapper) to change the view to the existing resources in the VFS.\nClass CmsResourceExtensionWrapperJsp; // A resource type wrapper for jsp files, which adds the correct file extension \"jsp\" to the resources.\nClass CmsResourceExtensionWrapperXmlContent; // A resource type wrapper for xml content files, which adds the correct file extension \"xml\" to the resources.\nClass CmsResourceExtensionWrapperXmlPage; // A resource type wrapper for xml pages, which adds the correct file extension \"xml\" to the resources.\nClass CmsResourceWrapperModules; // Resource wrapper used to import/export modules by copying them to/from virtual folders.\nClass CmsResourceWrapperModulesNonLazy; // Resource wrapper used to import/export modules by copying them to/from virtual folders.\nClass CmsResourceWrapperPreventCreateNameCI; // Resource wrapper class which is used to prevent resources with a certain name from being created.\nClass CmsResourceWrapperPreventCreateNameRegex; // Resource wrapper class which is used to prevent resources with names matching a given regex from being created.\nClass CmsResourceWrapperPropertyFile; // Adds a folder in every existing folder with the name \"__properties\" which contains property files for every resource in the existing folder.\nClass CmsResourceWrapperReplaceDeleted; // Resource wrapper which intercepts createResource calls and substitutes them with replaceResource if there is already a deleted file at the same path.\nClass CmsResourceWrapperSystemFolder; // Adds the system folder to every root folder of target sites.\nClass CmsResourceWrapperUtils; // Helper class with several methods used by different implementations of the interface I_CmsResourceWrapper.\nClass CmsResourceWrapperXmlPage; // A resource type wrapper for xml page files, which explodes the xml pages to folders.\nClass CmsWrappedResource; // Helper class to create \"virtual\" resources not existing in the vfs which are based on existing resources.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "This package contains classes and interfaces used to access OpenCms through a wrapped CmsObject."}
{"index": 560, "repo": "hadoop-common-3.3.4", "code": "package serializer;\n\npackage serializer.avro; // This package provides Avro serialization in Hadoop.\nClass JavaSerialization; // An experimental Serialization for Java Serializable classes.\nClass JavaSerializationComparator<T extends Serializable & Comparable<T>>; // A RawComparator that uses a JavaSerialization Deserializer to deserialize objects that are then compared via their Comparable interfaces.\nClass WritableSerialization; // A Serialization for Writables that delegates to Writable.write(java.io.DataOutput) and Writable.readFields(java.io.DataInput).\n", "des": "This package provides a mechanism for using different serialization frameworks in Hadoop."}
{"index": 1242, "repo": "spring-hateoas-2.1.2", "code": "package mvc;\n\npublic class BasicLinkBuilder extends LinkBuilderSupport<BasicLinkBuilder>; // Simples LinkBuilder implementation possible.\npublic class ControllerLinkRelationProvider extends Object implements LinkRelationProvider; // LinkRelationProvider inspecting ExposesResourceFor annotations on controller classes.\npublic class JacksonSerializers extends Object; // Simple Jackson serializers and deserializers.\npublic static class JacksonSerializers.MediaTypeDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<MediaType>; // Custom JsonDeserializer for Spring's MediaType using the MediaType.parseMediaType(String) method.\npublic class MvcLink extends Object; // Syntactic sugar to create Link instances from MvcUriComponentsBuilder invocations.\npublic abstract class RepresentationModelAssemblerSupport<T,D extends RepresentationModel<?>> extends Object implements RepresentationModelAssembler<T,D>; // Base class to implement RepresentationModelAssemblers.\npublic class RepresentationModelProcessorHandlerMethodReturnValueHandler extends Object implements HandlerMethodReturnValueHandler; // HandlerMethodReturnValueHandler to post-process the objects returned from controller methods using the configured RepresentationModelProcessors.\npublic class RepresentationModelProcessorInvoker extends Object; // Component to easily invoke all RepresentationModelProcessor instances registered for values of type RepresentationModel.\npublic static class RepresentationModelProcessorInvoker.CollectionModelProcessorWrapper extends Object; // RepresentationModelProcessorInvoker.ProcessorWrapper for RepresentationModelProcessors targeting CollectionModel.\npublic class TypeConstrainedMappingJackson2HttpMessageConverter extends MappingJackson2HttpMessageConverter; // Extension of MappingJackson2HttpMessageConverter to constrain the ability to read and write HTTP message based on the target type.\npublic interface UriComponentsContributor; // SPI callback to enhance a UriComponentsBuilder when referring to a method through a dummy method invocation.\npublic class WebMvcLinkBuilder extends TemplateVariableAwareLinkBuilderSupport<WebMvcLinkBuilder>; // Builder to ease building Link instances pointing to Spring MVC controllers.\npublic class WebMvcLinkBuilderFactory extends Object implements MethodLinkBuilderFactory<WebMvcLinkBuilder>; // Factory for LinkBuilderSupport instances based on the request mapping annotated on the given controller.\n", "des": "Spring MVC helper classes to build Links and assemble RepresentationModel types."}
{"index": 1161, "repo": "commons-math3-3.6.1", "code": "package genetics;\n\nInterface CrossoverPolicy; // Policy used to create a pair of new chromosomes by performing a crossover operation on a source pair of chromosomes.\nInterface Fitness; // Fitness of a chromosome.\nInterface MutationPolicy; // Algorithm used to mutate a chromosome.\nInterface PermutationChromosome<T>; // Interface indicating that the chromosome represents a permutation of objects.\nInterface Population; // A collection of chromosomes that facilitates generational evolution.\nInterface SelectionPolicy; // Algorithm used to select a chromosome pair from a population.\nInterface StoppingCondition; // Algorithm used to determine when to stop evolution.\nClass AbstractListChromosome<T>; // Chromosome represented by an immutable list of a fixed length.\nClass BinaryChromosome; // Chromosome represented by a vector of 0s and 1s.\nClass BinaryMutation; // Mutation for BinaryChromosomes.\nClass Chromosome; // Individual in a population.\nClass ChromosomePair; // A pair of Chromosome objects.\nClass CycleCrossover<T>; // Cycle Crossover [CX] builds offspring from ordered chromosomes by identifying cycles between two parent chromosomes.\nClass ElitisticListPopulation; // Population of chromosomes which uses elitism (certain percentage of the best chromosomes is directly copied to the next generation).\nClass FixedElapsedTime; // Stops after a fixed amount of time has elapsed.\nClass FixedGenerationCount; // Stops after a fixed number of generations.\nClass GeneticAlgorithm; // Implementation of a genetic algorithm.\nClass ListPopulation; // Population of chromosomes represented by a List.\nClass NPointCrossover<T>; // N-point crossover policy.\nClass OnePointCrossover<T>; // One point crossover policy.\nClass OrderedCrossover<T>; // Order 1 Crossover [OX1] builds offspring from ordered chromosomes by copying a consecutive slice from one parent, and filling up the remaining genes from the other parent as they appear.\nClass RandomKey<T>; // Random Key chromosome is used for permutation representation.\nClass RandomKeyMutation; // Mutation operator for RandomKeys.\nClass TournamentSelection; // Tournament selection scheme.\n", "des": "This package provides Genetic Algorithms components and implementations."}
{"index": 1035, "repo": "hadoop-aws-3.3.6", "code": "package s3guard;\n\nClass S3Guard; // Logic for integrating MetadataStore with S3A.\nClass S3GuardTool; // CLI to manage S3Guard Metadata Store.\nClass S3GuardTool.BucketInfo; // Get info about a bucket and its S3Guard integration status.\n", "des": "This package contained S3Guard support; now the feature has been removed, its contents are limited to the public command line and some methods still used by directory marker code."}
{"index": 2370, "repo": "spring-security-crypto-6.1.2", "code": "package codec;\n\n@Deprecated public final class Base64 extends Object;\npublic final class Hex extends Object; // Hex data encoder.\npublic final class Utf8 extends Object; // UTF-8 Charset encoder/decoder.\n", "des": "Internal codec classes."}
{"index": 2776, "repo": "spring-jms-6.0.11", "code": "package support;\n\npackage support.converter; // Provides a MessageConverter abstraction to convert between Java objects and JMS messages.\npackage support.destination; // Support classes for Spring's JMS framework.\npublic abstract class JmsAccessor extends Object implements org.springframework.beans.factory.InitializingBean; // Base class for JmsTemplate and other JMS-accessing gateway helpers, defining common properties such as the JMS ConnectionFactory to operate on.\npublic interface JmsHeaderMapper extends org.springframework.messaging.support.HeaderMapper<Message>; // Strategy interface for mapping Message headers to an outbound JMS Message (e.g.\npublic interface JmsHeaders; // Pre-defined names and prefixes to be used for setting and/or retrieving JMS attributes from/to generic message headers.\npublic class JmsMessageHeaderAccessor extends org.springframework.messaging.support.NativeMessageHeaderAccessor; // A MessageHeaderAccessor implementation giving access to JMS-specific headers.\npublic abstract class JmsUtils extends Object; // Generic utility methods for working with JMS.\npublic class QosSettings extends Object; // Gather the Quality-of-Service settings that can be used when sending a message.\npublic class SimpleJmsHeaderMapper extends org.springframework.messaging.support.AbstractHeaderMapper<Message> implements JmsHeaderMapper; // Simple implementation of JmsHeaderMapper.\n", "des": "This package provides generic JMS support classes, to be used by higher-level classes like JmsTemplate."}
{"index": 1276, "repo": "spring-core-6.0.11", "code": "package buffer;\n\npublic interface CloseableDataBuffer extends DataBuffer, AutoCloseable; // Extension of DataBuffer that allows for buffers that can be used in a try-with-resources statement.\npublic interface DataBuffer; // Basic abstraction over byte buffers.\npublic static interface DataBuffer.ByteBufferIterator extends Iterator<ByteBuffer>, Closeable; // A dedicated iterator type that ensures the lifecycle of iterated ByteBuffer elements.\npublic interface DataBufferFactory; // A factory for DataBuffers, allowing for allocation and wrapping of data buffers.\npublic class DataBufferLimitException extends IllegalStateException; // Exception that indicates the cumulative number of bytes consumed from a stream of DataBuffer's exceeded some pre-configured limit.\npublic abstract class DataBufferUtils extends Object; // Utility class for working with DataBuffers.\npublic static interface DataBufferUtils.Matcher; // Contract to find delimiter(s) against one or more data buffers that can be passed one at a time to the DataBufferUtils.Matcher.match(DataBuffer) method.\npublic class DataBufferWrapper extends Object implements DataBuffer; // Provides a convenient implementation of the DataBuffer interface that can be overridden to adapt the delegate.\npublic class DefaultDataBuffer extends Object implements DataBuffer; // Default implementation of the DataBuffer interface that uses a ByteBuffer internally.\npublic class DefaultDataBufferFactory extends Object implements DataBufferFactory; // Default implementation of the DataBufferFactory interface.\npublic class LimitedDataBufferList extends ArrayList<DataBuffer>; // Custom List to collect data buffers with and enforce a limit on the total number of bytes buffered.\npublic final class Netty5DataBuffer extends Object implements CloseableDataBuffer, TouchableDataBuffer; // Implementation of the DataBuffer interface that wraps a Netty 5 Buffer.\npublic class Netty5DataBufferFactory extends Object implements DataBufferFactory; // Implementation of the DataBufferFactory interface based on a Netty 5 BufferAllocator.\npublic class NettyDataBuffer extends Object implements PooledDataBuffer; // Implementation of the DataBuffer interface that wraps a Netty 4 ByteBuf.\npublic class NettyDataBufferFactory extends Object implements DataBufferFactory; // Implementation of the DataBufferFactory interface based on a Netty 4 ByteBufAllocator.\npublic interface PooledDataBuffer extends TouchableDataBuffer; // Extension of DataBuffer that allows for buffers that share a memory pool.\n", "des": "Generic abstraction for working with byte buffer implementations."}
{"index": 1422, "repo": "spring-boot-actuator-3.1.1", "code": "package client;\n\n@Deprecated(since=\"3.0.0\", forRemoval=true) public class DefaultRestTemplateExchangeTagsProvider extends Object implements RestTemplateExchangeTagsProvider;\npublic class ObservationRestTemplateCustomizer extends Object implements org.springframework.boot.web.client.RestTemplateCustomizer; // RestTemplateCustomizer that configures the RestTemplate to record request observations.\n@Deprecated(since=\"3.0.0\", forRemoval=true) public final class RestTemplateExchangeTags extends Object;\n@FunctionalInterface @Deprecated(since=\"3.0.0\", forRemoval=true) public interface RestTemplateExchangeTagsProvider;\n", "des": "Actuator support for web client metrics."}
{"index": 1398, "repo": "spring-boot-actuator-3.1.1", "code": "package flyway;\n\n@Endpoint(id=\"flyway\") public class FlywayEndpoint extends Object; // @Endpoint to expose flyway info.\npublic static final class FlywayEndpoint.ContextFlywayBeansDescriptor extends Object; // Description of an application context's Flyway beans.\npublic static final class FlywayEndpoint.FlywayBeansDescriptor extends Object implements OperationResponseBody; // Description of an application's Flyway beans.\npublic static class FlywayEndpoint.FlywayDescriptor extends Object; // Description of a Flyway bean.\npublic static final class FlywayEndpoint.FlywayMigrationDescriptor extends Object; // Description of a migration performed by Flyway.\n", "des": "Actuator support for Flyway."}
{"index": 562, "repo": "hadoop-common-3.3.4", "code": "package metrics2;\n\npackage metrics2.annotation; // Annotation interfaces for metrics instrumentation\npackage metrics2.filter; // Builtin metrics filters (to be used in metrics config files)\npackage metrics2.lib; // A collection of library classes for implementing metrics sources\npackage metrics2.sink; // Builtin metrics sinks\npackage metrics2.util; // General helpers for implementing source and sinks\nInterface MetricsCollector; // The metrics collector interface\nInterface MetricsInfo; // Interface to provide immutable metainfo for metrics.\nInterface MetricsPlugin; // The plugin interface for the metrics framework\nInterface MetricsRecord; // An immutable snapshot of metrics with a timestamp\nInterface MetricsSink; // The metrics sink interface.\nInterface MetricsSource; // The source of metrics information.\nInterface MetricsSystem.Callback; // The metrics system callback interface (needed for proxies.)\nInterface MetricsSystemMXBean; // The JMX interface to the metrics system\nInterface MetricsVisitor; // A visitor interface for metrics\nClass AbstractMetric; // The immutable metric\nClass MetricsFilter; // The metrics filter interface.\nClass MetricsJsonBuilder; // Build a JSON dump of the metrics.\nClass MetricsRecordBuilder; // The metrics record builder interface\nClass MetricsSystem; // The metrics system interface.\nClass MetricsSystem.AbstractCallback; // Convenient abstract class for implementing callback interface\nClass MetricsTag; // Immutable tag for metrics (for grouping on host/queue/username etc.)\nClass MetricStringBuilder; // Build a string dump of the metrics.\nEnum MetricType;\nClass MetricsException; // A general metrics exception wrapper\n", "des": "Metrics 2.0"}
{"index": 3590, "repo": "lucene-test-framework-9.7.0", "code": "package uniformsplit;\n\npackage uniformsplit.sharedterms; // Test PostingsFormat for testing org.apache.lucene.codecs.uniformsplit.sharedterms with block encryption using basic ROT13.\nClass Rot13CypherTestUtil; // Test utility for simple ROT13 cipher (https://en.wikipedia.org/wiki/ROT13).\nClass UniformSplitRot13PostingsFormat; // UniformSplitPostingsFormat with block encoding using ROT13 cypher.\n", "des": "Test PostingsFormat for testing org.apache.lucene.codecs.uniformsplit with block encryption using basic ROT13."}
{"index": 631, "repo": "freemarker-2.3.32", "code": "package log;\n\nClass Logger; // Delegates logger creation to an actual logging library.\n", "des": "Logging facility; dispatches FreeMarker log messages to the chosen logger library."}
{"index": 976, "repo": "spring-ws-3.0.10.RELEASE", "code": "package wss4j2;\n\npackage wss4j2.callback; // Contains CallbackHandler implementations for WSS4J 2.0.\npackage wss4j2.support; // Contains support classes for working with WSS4J 2.0.\nClass Wss4jSecurityInterceptor; // A WS-Security endpoint interceptor based on Apache's WSS4J.\nClass Wss4jSecurityFaultException; // WSS4J-specific version of the WsSecurityFaultException.\nClass Wss4jSecuritySecurementException; // WSS4J-specific version of the WsSecuritySecurementException.\nClass Wss4jSecurityValidationException; // WSS4J-specific version of the WsSecurityValidationException.\n", "des": "Contains classes for using the Apache WSS4J 2.0 WS-Security implementation within Spring-WS."}
{"index": 2502, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package otlp;\n\n@AutoConfiguration @ConditionalOnEnabledTracing @ConditionalOnClass({io.micrometer.tracing.otel.bridge.OtelTracer.class,io.opentelemetry.sdk.trace.SdkTracerProvider.class,io.opentelemetry.api.OpenTelemetry.class,io.opentelemetry.exporter.otlp.http.trace.OtlpHttpSpanExporter.class}) @EnableConfigurationProperties(OtlpProperties.class) public class OtlpAutoConfiguration extends Object; // Auto-configuration for OTLP.\n@ConfigurationProperties(\"management.otlp.tracing\") public class OtlpProperties extends Object; // Configuration properties for exporting traces using OTLP.\n", "des": "Auto-configuration for tracing with OTLP."}
{"index": 3564, "repo": "guava-32.1.1-jre", "code": "package concurrent;\n\nInterface AsyncCallable<V extends @Nullable java.lang.Object>; // Computes a value, possibly asynchronously.\nInterface AsyncFunction<I extends @Nullable java.lang.Object,â€‹O extends @Nullable java.lang.Object>; // Transforms a value, possibly asynchronously.\nInterface ClosingFuture.AsyncClosingCallable<V extends @Nullable java.lang.Object>; // An operation that computes a ClosingFuture of a result.\nInterface ClosingFuture.AsyncClosingFunction<T extends @Nullable java.lang.Object,â€‹U extends @Nullable java.lang.Object>; // A function from an input to a ClosingFuture of a result.\nInterface ClosingFuture.ClosingCallable<V extends @Nullable java.lang.Object>; // An operation that computes a result.\nInterface ClosingFuture.ClosingFunction<T extends @Nullable java.lang.Object,â€‹U extends @Nullable java.lang.Object>; // A function from an input to a result.\nInterface ClosingFuture.Combiner.AsyncCombiningCallable<V extends @Nullable java.lang.Object>; // An operation that returns a ClosingFuture result and may throw an exception.\nInterface ClosingFuture.Combiner.CombiningCallable<V extends @Nullable java.lang.Object>; // An operation that returns a result and may throw an exception.\nInterface ClosingFuture.Combiner2.AsyncClosingFunction2<V1 extends @Nullable java.lang.Object,â€‹V2 extends @Nullable java.lang.Object,â€‹U extends @Nullable java.lang.Object>; // A function that returns a ClosingFuture when applied to the values of the two futures passed to ClosingFuture.whenAllSucceed(ClosingFuture, ClosingFuture).\nInterface ClosingFuture.Combiner2.ClosingFunction2<V1 extends @Nullable java.lang.Object,â€‹V2 extends @Nullable java.lang.Object,â€‹U extends @Nullable java.lang.Object>; // A function that returns a value when applied to the values of the two futures passed to ClosingFuture.whenAllSucceed(ClosingFuture, ClosingFuture).\n", "des": "Concurrency utilities."}
{"index": 3571, "repo": "lucene-codecs-9.7.0", "code": "package uniformsplit;\n\npackage uniformsplit.sharedterms; // Pluggable term index / block terms dictionary implementations.\nInterface BlockDecoder; // Decodes the raw bytes of a block when the index is read, according to the BlockEncoder used during the writing of the index.\nInterface BlockEncoder; // Encodes the raw bytes of a block when the index is written.\nInterface BlockEncoder.WritableBytes; // Writable byte buffer.\nInterface IndexDictionary; // Immutable stateless index dictionary kept in RAM.\nInterface IndexDictionary.Browser; // Stateful IndexDictionary.Browser to seek a term in this IndexDictionary and get its corresponding block file pointer in the block file.\nInterface IndexDictionary.BrowserSupplier; // Supplier for a new stateful IndexDictionary.Browser created on the immutable IndexDictionary.\nInterface IndexDictionary.Builder; // Builds an immutable IndexDictionary.\nClass BlockHeader; // Block header containing block metadata.\nClass BlockHeader.Serializer; // Reads/writes block header.\nClass BlockLine; // One term block line.\nClass BlockLine.Serializer; // Reads/writes block lines with terms encoded incrementally inside a block.\nClass BlockReader; // Seeks the block corresponding to a given term, read the block bytes, and scans the block terms.\nClass BlockWriter; // Writes blocks in the block file.\nClass DeltaBaseTermStateSerializer; // TermState serializer which encodes each file pointer as a delta relative to a base file pointer.\nClass FieldMetadata; // Metadata and stats for one field in the index.\nClass FieldMetadata.Serializer; // Reads/writes field metadata.\nClass FSTDictionary; // Immutable stateless FST-based index dictionary kept in memory.\nClass FSTDictionary.BrowserSupplier; // Provides stateful FSTDictionary.Browser to seek in the FSTDictionary.\nClass FSTDictionary.Builder; // Builds an immutable FSTDictionary.\nClass IntersectBlockReader; // The \"intersect\" TermsEnum response to UniformSplitTerms.intersect(CompiledAutomaton, BytesRef), intersecting the terms with an automaton.\nClass RamUsageUtil; // Utility methods to estimate the RAM usage of objects.\nClass TermBytes; // Term of a block line.\nClass UniformSplitPostingsFormat; // PostingsFormat based on the Uniform Split technique.\nClass UniformSplitTerms; // Terms based on the Uniform Split technique.\n", "des": "Pluggable term index / block terms dictionary implementations."}
{"index": 2465, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jmx;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.jmx.JmxMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"jmx\") @EnableConfigurationProperties(JmxProperties.class) public class JmxMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to JMX.\n@ConfigurationProperties(prefix=\"management.jmx.metrics.export\") public class JmxProperties extends Object; // @ConfigurationProperties for configuring JMX metrics export.\n", "des": "Support for exporting actuator metrics to JMX."}
{"index": 199, "repo": "nutch-2.4", "code": "package impl;\n\nClass JobFactory;\nClass JobWorker;\nClass NutchServerPoolExecutor;\nClass RAMConfManager; // Configuration manager which holds a map of Configuration type configurations and ids.\nClass RAMJobManager;\n", "des": "Implementations of REST API interfaces."}
{"index": 2485, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package tomcat;\n\n@AutoConfiguration(after=CompositeMeterRegistryAutoConfiguration.class) @ConditionalOnWebApplication @ConditionalOnClass({io.micrometer.core.instrument.binder.tomcat.TomcatMetrics.class,org.apache.catalina.Manager.class}) public class TomcatMetricsAutoConfiguration extends Object; // Auto-configuration for TomcatMetrics.\n", "des": "Auto-configuration for Tomcat actuator metrics."}
{"index": 92, "repo": "ignite-core-2.15.0", "code": "package internal;\n\nClass DiscoveryDataPacket; // Carries discovery data in marshalled form and allows convenient way of converting it to and from DiscoveryDataBag objects.\nClass FutureTask<T>;\nClass TcpDiscoveryNode; // Node for TcpDiscoverySpi.\nClass TcpDiscoveryNodesRing; // Convenient way to represent topology for TcpDiscoverySpi\nClass TcpDiscoveryStatistics; // Statistics for TcpDiscoverySpi.\nEnum TcpDiscoverySpiState; // State of local node TcpDiscoverySpi.\n", "des": "Contains internal implementation."}
{"index": 3230, "repo": "commons-release-plugin-1.8.1", "code": "package plugin;\n\npackage plugin.mojos; // This package contains all the maven mojos for the commons-release-plugin.\npackage plugin.velocity; // Contains classes that take our velocity templates and render's them to a Writer class.\nClass SharedFunctions; // Shared static functions for all of our Mojos.\n", "des": "Base package for the commons-release-plugin."}
{"index": 2126, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "package util;\n\npublic final class VersionExtractor extends Object; // Extracts version information for a Class.\n", "des": "Shared utility classes."}
{"index": 1097, "repo": "hbase-server-3.0.0-alpha-4", "code": "package gson;\n\nClass GsonFactory; // Provides a singleton Gson instance configured just the way we like it.\nClass GsonSerializationFeature; // Used to register with (shaded) Jersey the presence of Entity serialization using (shaded) Gson.\n", "des": "This package should be in the hbase-http module as a.a.h.h.http.gson."}
{"index": 24, "repo": "commons-collections4-4.4", "code": "package multimap;\n\nClass AbstractListValuedMap<K,V>; // Abstract implementation of the ListValuedMap interface to simplify the creation of subclass implementations.\nClass AbstractMultiValuedMap<K,V>; // Abstract implementation of the MultiValuedMap interface to simplify the creation of subclass implementations.\nClass AbstractMultiValuedMapDecorator<K,V>; // Decorates another MultiValuedMap to provide additional behaviour.\nClass AbstractSetValuedMap<K,V>; // Abstract implementation of the SetValuedMap interface to simplify the creation of subclass implementations.\nClass ArrayListValuedHashMap<K,V>; // Implements a ListValuedMap, using a HashMap to provide data storage and ArrayLists as value collections.\nClass HashSetValuedHashMap<K,V>; // Implements a SetValuedMap, using a HashMap to provide data storage and HashSets as value collections.\nClass TransformedMultiValuedMap<K,V>; // Decorates another MultiValuedMap to transform objects that are added.\nClass UnmodifiableMultiValuedMap<K,V>; // Decorates another MultiValuedMap to ensure it can't be altered.\n", "des": "This package contains implementations of the MultiValuedMap interfaces."}
{"index": 732, "repo": "spring-data-solr-4.3.15", "code": "package core;\n\npackage core.convert; // All the Converters go here.\npackage core.geo; // Apache Solr geo specifics.\npackage core.mapping; // All the mapping things!\npackage core.query; // Query abstractions for SolrQuery.\npackage core.schema; // Everything Apache Solr schema specific.\nInterface QueryParser; // The QueryParser takes a spring-data-solr Query and returns a SolrQuery.\nInterface QueryParserBase.PredicateProcessor; // QueryParserBase.PredicateProcessor creates a solr reable query string representation for a given Criteria.Predicate\nInterface SolrCallback<T>; // Callback interface for data access code that works with SolrClient.\nInterface SolrOperations; // Interface that specifies a basic set of Solr operations.\nInterface SolrTransactionSynchronizationAdapter.CompletionDelegate;\nClass DefaultQueryParser; // Implementation of QueryParser.\nClass QueryParserBase<QUERYTPYE extends SolrDataQuery>; // Base Implementation of QueryParser providing common functions for creating SolrQuery.\nClass QueryParsers;\nClass SolrExceptionTranslator; // Implementation of PersistenceExceptionTranslator capable of translating SolrServerException instances to Spring's DataAccessException hierarchy.\nClass SolrTemplate; // Implementation of SolrOperations\nClass SolrTransactionSynchronizationAdapter;\nClass SolrTransactionSynchronizationAdapter.CommitTransaction;\nClass SolrTransactionSynchronizationAdapter.RollbackTransaction;\nClass SolrTransactionSynchronizationAdapterBuilder;\nClass TermsQueryParser; // TermsQueryParser is capable of building SolrQuery for TermsQuery\nEnum RequestMethod; // HTTP request types supported by SolrRequest.\n", "des": "Provides the classes necessary for Solr support."}
{"index": 957, "repo": "spring-ws-3.0.10.RELEASE", "code": "package interceptor;\n\nClass AbstractValidatingInterceptor; // Abstract base class for EndpointInterceptor implementations that validate part of the message using a schema.\nClass DelegatingSmartEndpointInterceptor; // Implementation of the SmartEndpointInterceptor interface that delegates to a delegate EndpointInterceptor.\nClass EndpointInterceptorAdapter; // Default implementation of the EndpointInterceptor interface, for simplified implementation of pre-only/post-only interceptors.\nClass PayloadLoggingInterceptor; // Simple EndpointInterceptor that logs the payload of request and response messages.\nClass PayloadTransformingInterceptor; // Interceptor that transforms the payload of WebServiceMessages using XSLT stylesheet.\n", "des": "Provides miscellaneous endpoints EndpointInterceptor implementations."}
{"index": 249, "repo": "nutch-2.4", "code": "package domain;\n\nClass DomainURLFilter; // Filters URLs based on a file containing domain suffixes, domain names, and hostnames.\n", "des": "URL filter plugin to include only URLs which match an element in a given list of domain suffixes, domain names, and/or host names."}
{"index": 2000, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package client;\n\n@AutoConfiguration @ConditionalOnClass({org.springframework.ws.client.core.WebServiceTemplate.class,org.springframework.oxm.Unmarshaller.class,org.springframework.oxm.Marshaller.class}) public class WebServiceTemplateAutoConfiguration extends Object; // Auto-configuration for WebServiceTemplate.\n", "des": "Auto-configuration for Spring Web Services Clients."}
{"index": 3320, "repo": "opencms-core-15.0", "code": "package synchronize;\n\nInterface I_CmsSynchronizeModification; // Defines methods which can be pluged into the syncronisation process between VFS and \"real\" FS.\nClass CmsSynchronize; // Contains all methods to synchronize the VFS with the \"real\" FS.\nClass CmsSynchronizeList; // Defines the CmsSynchronizeList object, used to store synchronisation data required to synchronize the VFS and the server FS.\nClass CmsSynchronizeSettings; // Contains the settings for the synchronization.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsSynchronizeException; // Thrown by a class which implements org.opencms.file.I_CmsSyncModifications.\n", "des": "Classes used to synchronize the OpenCms VFS with the real file system."}
{"index": 3221, "repo": "commons-configuration2-2.9.0", "code": "package io;\n\nInterface FileBased; // Definition of an interface to be implemented by objects which know how to read and write themselves from or to a character stream.\nInterface FileHandlerListener; // A listener interface for receiving notifications about updates of a FileHandler.\nInterface FileLocationStrategy; // An interface allowing applications to customize the process of locating a file.\nInterface FileLocatorAware; // Definition of an interface to be implemented by FileBased objects which need access to the current FileLocator.\nInterface FileOptionsProvider; // Some FileSystems allow options to be passed on File operations.\nInterface InputStreamSupport; // Definition of an interface to be implemented by objects which support reading from an input stream.\nClass AbsoluteNameLocationStrategy; // A specialized implementation of FileLocationStrategy which checks whether the provided file name is already an absolute file name.\nClass BasePathLocationStrategy; // A specialized implementation of FileLocationStrategy which tries to construct a file path from the locator's base path and file name.\nClass ClasspathLocationStrategy; // A specialized FileLocationStrategy implementation which searches for files on the class path.\nClass CombinedLocationStrategy; // A specialized implementation of a FileLocationStrategy which encapsulates an arbitrary number of FileLocationStrategy objects.\nClass ConfigurationLogger; // A class providing basic logging capabilities.\nClass DefaultFileSystem; // FileSystem that uses java.io.File or HttpClient.\nClass FileHandler; // A class that manages persistence of an associated FileBased object.\nClass FileHandlerListenerAdapter; // An adapter class simplifying the implementation of custom FileHandlerListener classes.\nClass FileLocator; // A class describing the location of a file.\nClass FileLocator.FileLocatorBuilder; // A typical builder implementation for creating FileLocator objects.\nClass FileLocatorUtils; // A utility class providing helper methods related to locating files.\nClass FileSystem; // Abstract layer to allow various types of file systems.\nClass FileSystemLocationStrategy; // A specialized implementation of FileLocationStrategy which uses the passed in FileSystem to locate a file.\nClass HomeDirectoryLocationStrategy; // A specialized implementation of FileLocationStrategy which searches for files in the user's home directory or another special configurable directory.\nClass ProvidedURLLocationStrategy; // A specialized implementation of FileLocationStrategy which checks whether a passed in FileLocator already has a defined URL.\nClass URLConnectionOptions; // Carries options and operates on URLConnection.\n", "des": "A package with classes related to I/O operations."}
{"index": 3252, "repo": "opencms-core-15.0", "code": "package shared;\n\npackage shared.rpc; // Shared RPC interfaces.\nInterface I_CmsAliasConstants; // Constants for parameters, JSON keys, etc.\nInterface I_CmsSitemapController; // The interface to the sitemap controller.\nClass CmsAdditionalEntryInfo; // Bean for additional site-map entry information.\nClass CmsClientSitemapEntry; // Sitemap entry data.\nClass CmsDetailPageTable; // A data structure for managing the detail page ordering for different types in a given sitemap.\nClass CmsGalleryFolderEntry; // Gallery folder entry bean.\nClass CmsGalleryType; // The gallery type bean.\nClass CmsLocaleComparePropertyData; // Data used for the property editor in the sitemap editor's locale comparison view.\nClass CmsModelInfo; // Wraps the model page and model group info into one object.\nClass CmsModelPageEntry; // Bean representing a model page, for use in the model page mode of the sitemap editor.\nClass CmsNewResourceInfo; // A bean representing a resource type for use in the detail page creation menu.\nClass CmsSitemapAttributeData; // The data needed by the sitemap attribute editor dialog in the sitemap editor.\nClass CmsSitemapCategoryData; // The category data for the current sitemap.\nClass CmsSitemapChange; // Bean containing sitemap entry change information.\nClass CmsSitemapClipboardData; // Sitemap clipboard data bean.\nClass CmsSitemapData; // Sitemap initialization data bean for prefetching.\nClass CmsSitemapInfo; // Sitemap info object.\nClass CmsSitemapMergeInfo; // This class represents the result of a 'merge sub-sitemap' operation.\nClass CmsSubSitemapInfo; // A data class which is used to transfer information about sub-sitemaps which have been created.\nEnum CmsClientSitemapEntry.EditStatus; // An enum for the edit status of the entry.\nEnum CmsClientSitemapEntry.EntryType; // An enum for the entry type.\nEnum CmsDetailPageTable.Status; // A type indicating the status of a page.\nEnum CmsSitemapChange.ChangeType; // The change types.\nEnum CmsSitemapData.EditorMode; // The sitemap editor modes.\n", "des": "Shared Client-Server side of the sitemap view."}
{"index": 825, "repo": "calcite-core-1.34.0", "code": "package impl;\n\nClass AggAddContextImpl; // Implementation of AggAddContext.\nClass AggResetContextImpl; // Implementation of AggResetContext.\nClass AggResultContextImpl; // Implementation of AggResultContext.\nClass WinAggAddContextImpl; // Implementation of WinAggAddContext.\nClass WinAggResetContextImpl; // Implementation of WinAggResetContext.\nClass WinAggResultContextImpl; // Implementation of WinAggResultContext.\n", "des": "Calcite-specific classes for implementation of regular and window aggregates."}
{"index": 3518, "repo": "opennlp-tools-2.2.0", "code": "package conllu;\n\nClass ConlluLemmaSampleStream;\nClass ConlluLemmaSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass ConlluPOSSampleStream;\nClass ConlluPOSSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass ConlluSentence;\nClass ConlluSentenceSampleStream;\nClass ConlluSentenceSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass ConlluStream; // The CoNNL-U Format is specified here.\nClass ConlluTokenSampleStream;\nClass ConlluTokenSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass ConlluWordLine;\nEnum ConlluTagset;\n", "des": "Experimental package related to the CoNNL-U format."}
{"index": 2589, "repo": "spring-rabbit-3.0.6", "code": "package connection;\n\npublic abstract class AbstractConnectionFactory extends Object implements ConnectionFactory, org.springframework.beans.factory.DisposableBean, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextClosedEvent>, com.rabbitmq.client.ShutdownListener;\npublic static enum AbstractConnectionFactory.AddressShuffleMode extends Enum<AbstractConnectionFactory.AddressShuffleMode>; // The mode used to shuffle the addresses.\npublic abstract class AbstractRoutingConnectionFactory extends Object implements ConnectionFactory, RoutingConnectionFactory, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Abstract ConnectionFactory implementation that routes AbstractRoutingConnectionFactory.createConnection() calls to one of various target ConnectionFactories based on a lookup key.\npublic class AfterCompletionFailedException extends org.springframework.amqp.AmqpException; // Represents a failure to commit or rollback when performing afterCompletion after the primary transaction completes.\npublic class AutoRecoverConnectionNotCurrentlyOpenException extends org.springframework.amqp.AmqpException; // An exception thrown if the connection is an auto recover connection that is not currently open and is in the process of being recovered.\n@ManagedResource public class CachingConnectionFactory extends AbstractConnectionFactory implements org.springframework.beans.factory.InitializingBean, com.rabbitmq.client.ShutdownListener; // A ConnectionFactory implementation that (when the cache mode is CachingConnectionFactory.CacheMode.CHANNEL (default) returns the same Connection from all CachingConnectionFactory.createConnection() calls, and ignores calls to Connection.close() and caches Channel.\npublic static enum CachingConnectionFactory.CacheMode extends Enum<CachingConnectionFactory.CacheMode>; // The cache mode.\npublic static enum CachingConnectionFactory.ConfirmType extends Enum<CachingConnectionFactory.ConfirmType>; // The type of publisher confirms to use.\n@FunctionalInterface public interface ChannelListener; // A listener for new channel creation and destruction.\npublic interface ChannelProxy extends com.rabbitmq.client.Channel, org.springframework.aop.RawTargetAccess; // Subinterface of Channel to be implemented by Channel proxies.\n", "des": "Provides classes related to connections."}
{"index": 2681, "repo": "spring-data-jpa-3.1.2", "code": "package domain;\n\npackage domain.support; // Implementation classes for auditing with JPA.\n@MappedSuperclass public abstract class AbstractAuditable<U,PK extends Serializable> extends AbstractPersistable<PK> implements Auditable<U,PK,LocalDateTime>; // Abstract base class for auditable entities.\n@Generated(\"org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor\") public abstract class AbstractAuditable_ extends AbstractPersistable_;\n@MappedSuperclass public abstract class AbstractPersistable<PK extends Serializable> extends Object implements Persistable<PK>; // Abstract base class for entities.\n@Generated(\"org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor\") public abstract class AbstractPersistable_ extends Object;\npublic class JpaSort extends Sort; // Sort option for queries that wraps JPA meta-model Attributes for sorting.\npublic static class JpaSort.JpaOrder extends Sort.Order; // Custom Sort.Order that keeps a flag to indicate unsafe property handling, i.e. the String provided is not necessarily a property but can be an arbitrary expression piped into the query execution.\npublic static class JpaSort.Path<T,S> extends Object; // Value object to abstract a collection of Attributes.\n@Generated(\"com.querydsl.codegen.DefaultSupertypeSerializer\") public class QAbstractAuditable extends com.querydsl.core.types.dsl.EntityPathBase<AbstractAuditable<?,? extends Serializable>>; // QAbstractAuditable is a Querydsl query type for AbstractAuditable\n@Generated(\"com.querydsl.codegen.DefaultSupertypeSerializer\") public class QAbstractPersistable extends com.querydsl.core.types.dsl.EntityPathBase<AbstractPersistable<? extends Serializable>>; // QAbstractPersistable is a Querydsl query type for AbstractPersistable\npublic interface Specification<T> extends Serializable; // Specification in the sense of Domain Driven Design.\n", "des": "JPA specific support classes to implement domain classes."}
{"index": 2027, "repo": "spring-messaging-6.0.11", "code": "package annotation;\n\npackage annotation.reactive; // Support classes for working with annotated message-handling methods with non-blocking, reactive contracts.\npackage annotation.support; // Support classes for working with annotated message-handling methods.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface DestinationVariable; // Annotation that indicates a method parameter should be bound to a template variable in a destination template string.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface Header; // Annotation which indicates that a method parameter should be bound to a message header.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface Headers; // Annotation which indicates that a method parameter should be bound to the headers of a message.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Reflective(MessageMappingReflectiveProcessor.class) public @interface MessageExceptionHandler; // Annotation for handling exceptions thrown from message-handling methods within a specific handler class.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Reflective(MessageMappingReflectiveProcessor.class) public @interface MessageMapping; // Annotation for mapping a Message onto a message-handling method by matching the declared patterns to a destination extracted from the message.\npublic class MessageMappingReflectiveProcessor extends Object implements org.springframework.aot.hint.annotation.ReflectiveProcessor; // ReflectiveProcessor implementation for types annotated with @MessageMapping, @SubscribeMapping and @MessageExceptionHandler.\n@Target({PARAMETER,METHOD}) @Retention(RUNTIME) @Documented public @interface Payload; // Annotation that binds a method parameter to the payload of a message.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface SendTo; // Annotation that indicates a method's return value should be converted to a Message if necessary and sent to the specified destination.\npublic interface ValueConstants; // Common annotation value constants.\n", "des": "Annotations and support classes for handling messages."}
{"index": 1491, "repo": "tribuo-core-4.3.1", "code": "package util;\n\npublic final class HTMLOutput extends Object; // Utilities for nice HTML output that can be put in wikis and such.\npublic final class IntDoublePair extends Object; // A Pair of a primitive int and a primitive double.\npublic final class MeanVarianceAccumulator extends Object implements Serializable; // An accumulator for online calculation of the mean and variance of a stream of doubles.\n@FunctionalInterface public interface Merger; // An interface which can merge double values.\npublic final class MurmurHash3 extends Object; // The MurmurHash3 algorithm was created by Austin Appleby and placed in the public domain.\npublic static final class MurmurHash3.LongPair extends Object; // 128 bits of state\npublic final class Util extends Object; // Ye olde util class.\n", "des": "Provides utilities which don't have other Tribuo dependencies."}
{"index": 3635, "repo": "solr-core-9.3.0", "code": "package analysis;\n\nClass LowerCaseTokenizer;\nClass LowerCaseTokenizerFactory;\nClass ReversedWildcardFilter; // This class produces a special form of reversed tokens, suitable for better handling of leading wildcards.\nClass ReversedWildcardFilterFactory; // Factory for ReversedWildcardFilter-s.\nClass SolrAnalyzer;\nClass TokenizerChain; // An analyzer that uses a tokenizer and a list of token filters to create a TokenStream.\n", "des": "Factories and classes specific to text analysis and the creation of TokenStreams"}
{"index": 3880, "repo": "solr-ltr-9.3.0", "code": "package search;\n\nClass LTRQParserPlugin; // Plug into solr a rerank model.\nClass LTRQuery; // A learning to rank Query, will incapsulate a learning to rank model, and delegate to it the rescoring of the documents.\n", "des": "APIs and classes for parsing and processing search requests"}
{"index": 917, "repo": "commons-compress-1.23.0", "code": "package bzip2;\n\nClass BZip2CompressorInputStream; // An input stream that decompresses from the BZip2 format to be read as any other stream.\nClass BZip2CompressorOutputStream; // An output stream that compresses into the BZip2 format into another stream.\nClass BZip2Utils; // Utility code for the BZip2 compression format.\n", "des": "Provides stream classes for compressing and decompressing streams using the BZip2 algorithm."}
{"index": 1475, "repo": "spring-shell-core-3.1.2", "code": "package jline;\n\npublic class ExtendedDefaultParser extends Object implements org.jline.reader.Parser; // Shameful copy-paste of JLine's DefaultParser which creates CompletingParsedLine.\npublic class FileInputProvider extends Object implements InputProvider, Closeable; // An InputProvider that reads input from file-like sources.\n@Order(0) public class InteractiveShellRunner extends Object implements ShellRunner; // A ShellRunner that bootstraps the shell in interactive mode.\npublic static class InteractiveShellRunner.JLineInputProvider extends Object implements InputProvider;\n@Order(-50) public class NonInteractiveShellRunner extends Object implements ShellRunner; // A ShellRunner that executes commands without entering interactive shell mode.\npublic interface PromptProvider; // Called at each REPL cycle to decide what the prompt should be.\n@Order(-100) public class ScriptShellRunner extends Object implements ShellRunner; // A ShellRunner that looks for process arguments that start with @, which are then interpreted as references to script files to run and exit.\n", "des": "Contains classes that leverage the JLine library to hook into the Spring Shell REPL."}
{"index": 163, "repo": "ignite-core-2.15.0", "code": "package resource;\n\nInterface DependencyResolver; // The interface specifies a container of dependencies.\nInterface GridNoImplicitInjection; // Disables injection.\nInterface GridSpringResourceContext; // Interface was introduced to avoid compile-time dependency on spring framework.\nClass GridResourceIoc; // Resource container contains caches for classes used for injection.\nClass GridResourceJobContextInjector; // Simple injector which wraps ComputeJobContext resource object.\nClass GridResourceLoggerInjector;\nClass GridResourceProcessor; // Processor for all Ignite and task/job resources.\nClass GridResourceProxiedIgniteInjector; // Ignite instance injector.\nClass GridResourceServiceInjector; // Grid service injector.\nClass NoopDependencyResolver; // Noop implementation of dependency resolver.\nEnum GridResourceIoc.AnnotationSet;\n", "des": "TODO."}
{"index": 533, "repo": "commons-vfs2-2.9.0", "code": "package tar;\n\nClass TarFileObject; // A file in a Tar file system.\nClass TarFileProvider; // A file system provider for Tar files.\nClass TarFileSystem; // A read-only file system for Tar files.\nClass Tbz2FileProvider; // A file system provider for Tar files.\nClass TgzFileProvider; // A file system provider for Tar files.\n", "des": "The Tar File Provider."}
{"index": 571, "repo": "hadoop-common-3.3.4", "code": "package launcher;\n\nInterface IrqHandler.Interrupted; // Callback issues on an interrupt.\nInterface LaunchableService; // An interface which services can implement to have their execution managed by the ServiceLauncher.\nInterface LauncherArguments; // Standard launcher arguments.\nInterface LauncherExitCodes; // Common Exit codes.\nClass AbstractLaunchableService; // Subclass of AbstractService that provides basic implementations of the LaunchableService methods.\nClass HadoopUncaughtExceptionHandler; // This class is intended to be installed by calling Thread.setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler) in the main entry point.\nClass InterruptEscalator.ServiceForcedShutdown; // Forced shutdown runnable.\nClass IrqHandler.InterruptData; // Interrupt data to pass on.\nClass ServiceLauncher<S extends Service>; // A class to launch any YARN service by name.\nClass ServiceLauncher.MinimalGenericOptionsParser; // A generic options parser which does not parse any of the traditional Hadoop options.\nClass ServiceLaunchException; // A service launch exception that includes an exit code.\n", "des": "This package contains classes, interfaces and exceptions to launch YARN services from the command line."}
{"index": 2143, "repo": "wicket-core-10.0.0-M1", "code": "package html;\n\npackage html.basic; // Basic HTML components.\npackage html.border; // Border components.\npackage html.form; // HTML Forms and form components.\npackage html.image; // Image components.\npackage html.include; // Components for including content from non-Wicket sources.\npackage html.link; // Link components.\npackage html.list; // List components for tabular data and such.\npackage html.pages; // Default special purpose pages for error and feedback support.\npackage html.panel; // Panel components.\npublic enum CrossOrigin extends Enum<CrossOrigin>; // To be used for the crossOrigin attribute\npublic abstract class DecoratingHeaderResponse extends Object implements IHeaderResponse; // This is simply a helper implementation of IHeaderResponse that really delegates all of its method calls to the IHeaderResponse that is passed into the constructor.\npublic class GenericWebMarkupContainer<T> extends WebMarkupContainer implements IGenericComponent<T,GenericWebMarkupContainer<T>>; // A WebMarkupContainer with typesafe getters and setters for the model and its underlying object\npublic class GenericWebPage<T> extends WebPage implements IGenericComponent<T,GenericWebPage<T>>; // A WebPage with typesafe getters and setters for the model and its underlying object\npublic final class HeaderPartContainer extends WebMarkupContainer implements IComponentResolver; // For each wicket:head tag a HeaderPartContainer is created and added to the HtmlHeaderContainer which has been added to the Page.\npublic class HeaderResponseDecoratorCollection extends Object implements IHeaderResponseDecorator; // A collection of IHeaderResponseDecorators.\npublic class HTML5Attributes extends Behavior; // Behavior which renders HTML5 attributes.\npublic static class HTML5Attributes.InstantiationListener extends Object implements IComponentInstantiationListener; // A listener to instantiations of FormComponents to add HTML5 attributes.\npublic interface IComponentAwareHeaderContributor extends org.apache.wicket.util.io.IClusterable; // An interface to be implemented by Behaviors, IAjaxCallListeners.\npublic interface IHeaderContributor extends org.apache.wicket.util.io.IClusterable; // An interface to be implemented by application level listeners or other entities that wish to contribute to the header section of the page.\n", "des": "Base package of HTML markup."}
{"index": 1889, "repo": "shiro-core-2.0.0-alpha-2", "code": "package text;\n\npublic class IniRealm extends TextConfigurationRealm; // A Realm implementation that creates SimpleAccount instances based on Ini configuration.\npublic class PropertiesRealm extends TextConfigurationRealm implements org.apache.shiro.lang.util.Destroyable, Runnable; // A TextConfigurationRealm that defers all logic to the parent class, but just enables Properties based configuration in addition to the parent class's String configuration.\npublic class TextConfigurationRealm extends SimpleAccountRealm; // A SimpleAccountRealm that enables text-based configuration of the initial User, Role, and Permission objects created at startup.\n", "des": "Realms that acquire security data from text-based data sources such as Files or text streams."}
{"index": 966, "repo": "spring-ws-3.0.10.RELEASE", "code": "package version;\n\nInterface AddressingVersion; // Defines the contract for a specific version of the WS-Addressing specification.\nClass AbstractAddressingVersion; // Abstract base class for AddressingVersion implementations.\nClass Addressing10; // Implements WS-Addressing 1.0 (May 2006).\nClass Addressing200408; // Implements the August 2004 edition of the WS-Addressing specification.\n", "des": "Contains abstractions over various versions of the WS-Addressing specification."}
{"index": 2321, "repo": "spring-boot-3.1.1", "code": "package hibernate;\n\npublic class SpringImplicitNamingStrategy extends org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl; // Hibernate ImplicitNamingStrategy that follows Spring recommended naming conventions.\npublic class SpringJtaPlatform extends org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform; // Generic Hibernate AbstractJtaPlatform implementation that simply resolves the JTA UserTransaction and TransactionManager from the Spring-configured JtaTransactionManager implementation.\n", "des": "Hibernate Support classes."}
{"index": 2112, "repo": "spring-webflux-6.0.11", "code": "package upgrade;\n\npublic class JettyRequestUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Jetty 11.\npublic class ReactorNetty2RequestUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Reactor Netty for Netty 5.\npublic class ReactorNettyRequestUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Reactor Netty.\npublic class StandardWebSocketUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for the Jakarta WebSocket API 2.1+.\npublic class TomcatRequestUpgradeStrategy extends StandardWebSocketUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Apache Tomcat.\npublic class UndertowRequestUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Undertow.\n", "des": "Holds implementations of RequestUpgradeStrategy."}
{"index": 3510, "repo": "opennlp-tools-2.2.0", "code": "package lemmatizer;\n\nClass LemmaEvaluationErrorListener; // A default implementation of EvaluationMonitor that prints to an output stream.\nClass LemmatizerEvaluatorTool; // A default LemmaSample-centric implementation of AbstractEvaluatorTool that prints to an output stream.\nClass LemmatizerFineGrainedReportListener; // Generates a detailed report for the Lemmatizer.\nClass LemmatizerMETool;\nClass LemmatizerModelLoader; // Loads a LemmatizerModel for the command line tools.\nClass LemmatizerTrainerTool;\n", "des": "Classes giving access to the opennlp.tools.lemmatizer functionalities."}
{"index": 2317, "repo": "spring-boot-3.1.1", "code": "package log4j2;\n\n@Plugin(name=\"color\", category=\"Converter\") public final class ColorConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter; // Log4j2 LogEventPatternConverter colors output using the AnsiOutput class.\n@Plugin(name=\"ExtendedWhitespaceThrowablePatternConverter\", category=\"Converter\") public final class ExtendedWhitespaceThrowablePatternConverter extends org.apache.logging.log4j.core.pattern.ThrowablePatternConverter; // ThrowablePatternConverter that adds some additional whitespace around the stack trace.\npublic class Log4J2LoggingSystem extends AbstractLoggingSystem; // LoggingSystem for Log4j 2.\n@Order(2147483647) public static class Log4J2LoggingSystem.Factory extends Object implements LoggingSystemFactory; // LoggingSystemFactory that returns Log4J2LoggingSystem if possible.\n@Plugin(name=\"SpringBootConfigurationFactory\", category=\"ConfigurationFactory\") public class SpringBootConfigurationFactory extends org.apache.logging.log4j.core.config.ConfigurationFactory; // Spring Boot ConfigurationFactory that customizes Log4J2's default configuration to: Prevent logger warnings from being printed when the application first starts.\npublic class SpringBootPropertySource extends Object implements org.apache.logging.log4j.util.PropertySource; // Spring Boot PropertySource that disables Log4j2's shutdown hook.\n@Plugin(name=\"WhitespaceThrowablePatternConverter\", category=\"Converter\") public final class WhitespaceThrowablePatternConverter extends org.apache.logging.log4j.core.pattern.ThrowablePatternConverter; // ThrowablePatternConverter that adds some additional whitespace around the stack trace.\n", "des": "Support for the Log4j 2 logging library."}
{"index": 3722, "repo": "solr-core-9.3.0", "code": "package plugin;\n\nInterface MapInitializedPlugin; // A plugin that can be initialized with a Map<String,String>\nInterface NamedListInitializedPlugin; // A plugin that can be initialized with a NamedList\nInterface PluginInfoInitialized; // A plugin that can be initialized with a PluginInfo\nInterface SolrCoreAware;\nClass AbstractPluginLoader<T>; // An abstract super class that manages standard solr-style plugin configuration.\nClass MapPluginLoader<T extends MapInitializedPlugin>;\nClass NamedListPluginLoader<T extends NamedListInitializedPlugin>;\n", "des": "Common APIs related to implementing Solr plugins"}
{"index": 2011, "repo": "spring-boot-devtools-3.1.1", "code": "package livereload;\n\npublic class LiveReloadServer extends Object; // A livereload server.\n", "des": "Support for the livereload protocol."}
{"index": 2658, "repo": "spring-data-cassandra-4.1.2", "code": "package legacy;\n\n@Deprecated(since=\"4.0\", forRemoval=true) public interface AsyncCassandraOperations;\n@Deprecated(since=\"4.0\", forRemoval=true) public class AsyncCassandraTemplate extends Object implements AsyncCassandraOperations, ApplicationEventPublisherAware, ApplicationContextAware;\npublic static interface AsyncCassandraTemplate.AsyncPreparedStatementHandler extends AsyncPreparedStatementCreator, PreparedStatementBinder, CqlProvider; // General callback interface used to create and bind prepared CQL statements.\npublic static class AsyncCassandraTemplate.PreparedStatementHandler extends Object implements AsyncCassandraTemplate.AsyncPreparedStatementHandler; // Utility class to prepare a SimpleStatement and bind values associated with the statement to a BoundStatement.\n", "des": "Apache Cassandra legacy asynchronous support for easier migration."}
{"index": 140, "repo": "ignite-core-2.15.0", "code": "package gg;\n\nClass GridProtocolHandler; // Custom stream protocol handler implementation.\nClass GridUrlConnection; // Connection implementation for custom protocol.\n", "des": "Grid stream protocol implementation."}
{"index": 2411, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package autoconfigure;\n\npackage autoconfigure.amqp; // Auto-configuration for actuator AMQP concerns.\npackage autoconfigure.audit; // Auto-configuration for actuator audit concerns.\npackage autoconfigure.availability; // Auto-configuration that extends health endpoints so that they can be used as availability probes.\npackage autoconfigure.beans; // Auto-configuration for actuator Spring Bean concerns.\npackage autoconfigure.cache; // Auto-configuration for actuator cache concerns.\npackage autoconfigure.cassandra; // Auto-configuration for actuator Cassandra concerns.\npackage autoconfigure.cloudfoundry; // Auto-configuration for actuator Cloud Foundry concerns.\npackage autoconfigure.condition; // Auto-configuration for actuator condition concerns.\npackage autoconfigure.context; // Auto-configuration for actuator Spring Context concerns.\npackage autoconfigure.couchbase; // Auto-configuration for actuator Couchbase concerns.\npackage autoconfigure.elasticsearch; // Auto-configuration for actuator Elasticsearch concerns.\npackage autoconfigure.endpoint; // Core classes for actuator endpoint auto-configuration.\npackage autoconfigure.env; // Auto-configuration for actuator Spring Environment concerns.\npackage autoconfigure.flyway; // Auto-configuration for actuator Flyway concerns.\npackage autoconfigure.hazelcast; // Auto-configuration for actuator Hazelcast concerns.\npackage autoconfigure.health; // Auto-configuration for actuator health concerns.\npackage autoconfigure.influx; // Auto-configuration for actuator InfluxDB concerns.\npackage autoconfigure.info; // Auto-configuration for actuator info concerns.\npackage autoconfigure.integration; // Auto-configuration for actuator Spring Integration concerns.\npackage autoconfigure.jdbc; // Auto-configuration for actuator JDBC concerns.\npackage autoconfigure.jms; // Auto-configuration for actuator JMS concerns.\npackage autoconfigure.ldap; // Auto-configuration for actuator LDAP concerns.\npackage autoconfigure.liquibase; // Auto-configuration for actuator Liquibase concerns.\n", "des": "Classes for general actuator auto-configuration concerns."}
{"index": 987, "repo": "spring-ws-3.0.10.RELEASE", "code": "package soap11;\n\nInterface Soap11Body; // Subinterface of SoapBody that exposes SOAP 1.1 functionality.\nInterface Soap11Fault; // Subinterface of SoapFault that exposes SOAP 1.1 functionality.\nInterface Soap11Header; // Subinterface of SoapHeader that exposes SOAP 1.1 functionality.\n", "des": "Contains interfaces specific to SOAP 1.1."}
{"index": 2702, "repo": "spring-integration-ftp-6.1.2", "code": "package dsl;\n\npublic final class Ftp extends Object; // The factory for FTP components.\npublic class FtpInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileInboundChannelAdapterSpec<org.apache.commons.net.ftp.FTPFile,FtpInboundChannelAdapterSpec,FtpInboundFileSynchronizingMessageSource>; // A RemoteFileInboundChannelAdapterSpec for an FtpInboundFileSynchronizingMessageSource.\npublic class FtpMessageHandlerSpec extends org.springframework.integration.file.dsl.FileTransferringMessageHandlerSpec<org.apache.commons.net.ftp.FTPFile,FtpMessageHandlerSpec>; // A FileTransferringMessageHandlerSpec for FTP.\npublic class FtpOutboundGatewaySpec extends org.springframework.integration.file.dsl.RemoteFileOutboundGatewaySpec<org.apache.commons.net.ftp.FTPFile,FtpOutboundGatewaySpec>; // A RemoteFileOutboundGatewaySpec for FTP.\npublic class FtpStreamingInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileStreamingInboundChannelAdapterSpec<org.apache.commons.net.ftp.FTPFile,FtpStreamingInboundChannelAdapterSpec,FtpStreamingMessageSource>; // A RemoteFileStreamingInboundChannelAdapterSpec for a FtpStreamingMessageSource.\n", "des": "Provides FTP Components for the Java DSL."}
{"index": 2632, "repo": "shiro-web-2.0.0-alpha-2", "code": "package session;\n\npublic class HttpServletSession extends Object implements org.apache.shiro.session.Session; // Session implementation that is backed entirely by a standard servlet container HttpSession instance.\n", "des": "Components supporting Session management in web-enabled applications."}
{"index": 2430, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package condition;\n\n@Retention(RUNTIME) @Target({METHOD,TYPE}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.endpoint.condition.OnAvailableEndpointCondition.class) public @interface ConditionalOnAvailableEndpoint; // @Conditional that checks whether an endpoint is available.\n", "des": "Actuator endpoint auto-configuration conditions."}
{"index": 3740, "repo": "lucene-queryparser-9.7.0", "code": "package processors;\n\nClass BooleanModifiersQueryNodeProcessor; // This processor is used to apply the correct ModifierQueryNode to BooleanQueryNodes children.\nClass PrecedenceQueryNodeProcessorPipeline; // This processor pipeline extends StandardQueryNodeProcessorPipeline and enables boolean precedence on it.\n", "des": "Lucene Precedence Query Parser Processors"}
{"index": 1966, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package rsocket;\n\n@FunctionalInterface public interface RSocketMessageHandlerCustomizer; // Callback interface that can be used to customize a RSocketMessageHandler.\n@AutoConfiguration(after=RSocketStrategiesAutoConfiguration.class) @ConditionalOnClass({org.springframework.messaging.rsocket.RSocketRequester.class,io.rsocket.RSocket.class,io.rsocket.transport.netty.server.TcpServerTransport.class}) public class RSocketMessagingAutoConfiguration extends Object; // Auto-configuration for Spring RSocket support in Spring Messaging.\n@ConfigurationProperties(\"spring.rsocket\") public class RSocketProperties extends Object; // properties for RSocket support.\npublic static class RSocketProperties.Server extends Object;\n@AutoConfiguration(after=RSocketStrategiesAutoConfiguration.class) @ConditionalOnClass({org.springframework.messaging.rsocket.RSocketRequester.class,io.rsocket.RSocket.class,reactor.netty.http.server.HttpServer.class,io.rsocket.transport.netty.server.TcpServerTransport.class}) public class RSocketRequesterAutoConfiguration extends Object; // Auto-configuration for RSocketRequester.\n@AutoConfiguration(after=RSocketStrategiesAutoConfiguration.class) @ConditionalOnClass({io.rsocket.core.RSocketServer.class,org.springframework.messaging.rsocket.RSocketStrategies.class,reactor.netty.http.server.HttpServer.class,io.rsocket.transport.netty.server.TcpServerTransport.class}) @ConditionalOnBean(org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.class) @EnableConfigurationProperties(RSocketProperties.class) public class RSocketServerAutoConfiguration extends Object; // Auto-configuration for RSocket servers.\n@AutoConfiguration(after=JacksonAutoConfiguration.class) @ConditionalOnClass({io.rsocket.RSocket.class,org.springframework.messaging.rsocket.RSocketStrategies.class,io.netty.buffer.PooledByteBufAllocator.class}) public class RSocketStrategiesAutoConfiguration extends Object; // Auto-configuration for RSocketStrategies.\n", "des": "Auto-configuration for RSocket."}
{"index": 1154, "repo": "commons-math3-3.6.1", "code": "package fitting;\n\nClass MultivariateNormalMixtureExpectationMaximization; // Expectation-Maximization algorithm for fitting the parameters of multivariate normal mixture model distributions.\n", "des": "Fitting of parameters against distributions."}
{"index": 195, "repo": "ignite-core-2.15.0", "code": "package worker;\n\nClass WorkersControlMXBeanImpl; // MBean that provides control of system workersRegistry.\nClass WorkersRegistry; // Workers registry.\n", "des": "System worker registry and control MBean implementation."}
{"index": 3624, "repo": "solr-test-framework-9.3.0", "code": "package search;\n\nClass FooQParserPlugin;\n", "des": "Mock classes for testing search."}
{"index": 325, "repo": "kafka-clients-3.5.0", "code": "package metrics;\n\npackage metrics.stats; // Provides methods of statistically aggregating metrics upon emission.\nInterface CompoundStat; // A compound stat is a stat where a single measurement and associated data structure feeds many metrics.\nInterface Gauge<T>; // A gauge metric is an instantaneous reading of a particular value.\nInterface Measurable; // A measurable quantity that can be registered as a metric\nInterface MeasurableStat; // A MeasurableStat is a Stat that is also Measurable (i.e.\nInterface MetricsContext; // MetricsContext encapsulates additional contextLabels about metrics exposed via a MetricsReporter\nInterface MetricsReporter; // A plugin interface to allow things to listen as new metrics are created so they can be reported.\nInterface MetricValueProvider<T>; // Super-interface for Measurable or Gauge that provides metric values.\nInterface Stat; // A Stat is a quantity such as average, max, etc that is computed off the stream of updates to a sensor\nClass CompoundStat.NamedMeasurable;\nClass JmxReporter; // Register metrics in JMX as dynamic mbeans based on the metric names\nClass KafkaMetric;\nClass KafkaMetricsContext; // A implementation of MetricsContext, it encapsulates required metrics context properties for Kafka services and clients\nClass MetricConfig; // Configuration values for metrics\nClass Metrics; // A registry of sensors and metrics.\nClass Quota; // An upper or lower bound for metrics\nClass Sensor; // A sensor applies a continuous sequence of numerical values to a set of associated metrics.\nEnum Sensor.RecordingLevel;\nClass QuotaViolationException; // Thrown when a sensor records a value that causes a metric to go outside the bounds configured as its quota\n", "des": "Provides the API used by Kafka clients to emit metrics which are then exposed using the * MetricsReporter interface."}
{"index": 1108, "repo": "fontbox-3.0.0-beta1", "code": "package common;\n\nClass CoverageTable; // This class models the Coverage Table in the Open Type layout common tables.\nClass CoverageTableFormat1; // This class models the Coverage format 1 in the Open Type layout common tables.\nClass CoverageTableFormat2; // This class models the Coverage format 2 in the Open Type layout common tables.\nClass FeatureListTable; // This class models the Feature List table in the Open Type layout common tables.\nClass FeatureRecord; // This class models the Features and lookups in the Open Type layout common tables.\nClass FeatureTable; // This class models the Feature table in the Open Type layout common tables.\nClass LangSysTable; // This class models the Language system tags in the Open Type Font specs.\nClass LookupListTable; // This class models the Lookup List Table in the Open Type layout common tables.\nClass LookupSubTable; // This class models the Lookup Sub-Table in the Open Type layout common tables.\nClass LookupTable; // This class models the Lookup Table in the Open Type layout common tables.\nClass RangeRecord; // This class models the Range Record in the Coverage format 2 in the Open Type layout common tables.\nClass ScriptTable; // This class models the Script tags in the Open Type Font specs.\n", "des": "This package contains the highly obfuscated Layout Common Table Formats system of tables from the Open Type Font specs."}
{"index": 1364, "repo": "spring-tx-6.0.11", "code": "package jta;\n\npublic class JtaAfterCompletionSynchronization extends Object implements Synchronization; // Adapter for a JTA Synchronization, invoking the afterCommit / afterCompletion callbacks of Spring TransactionSynchronization objects callbacks after the outer JTA transaction has completed.\npublic class JtaTransactionManager extends AbstractPlatformTransactionManager implements TransactionFactory, org.springframework.beans.factory.InitializingBean, Serializable; // PlatformTransactionManager implementation for JTA, delegating to a backend JTA provider.\npublic class JtaTransactionObject extends Object implements SmartTransactionObject; // JTA transaction object, representing a UserTransaction.\npublic class ManagedTransactionAdapter extends Object implements Transaction; // Adapter for a managed JTA Transaction handle, taking a JTA TransactionManager reference and creating a JTA Transaction handle for it.\npublic class SimpleTransactionFactory extends Object implements TransactionFactory; // Default implementation of the TransactionFactory strategy interface, simply wrapping a standard JTA TransactionManager.\npublic class SpringJtaSynchronizationAdapter extends Object implements Synchronization; // Adapter that implements the JTA Synchronization interface delegating to an underlying Spring TransactionSynchronization.\npublic interface TransactionFactory; // Strategy interface for creating JTA Transaction objects based on specified transactional characteristics.\npublic class UserTransactionAdapter extends Object implements UserTransaction; // Adapter for a JTA UserTransaction handle, taking a JTA TransactionManager reference and creating a JTA UserTransaction handle for it.\n", "des": "Transaction SPI implementation for JTA."}
{"index": 1902, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package cache;\n\npublic interface Cache2kBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the default setup for caches added to the manager through addCaches and for dynamically created caches.\n@AutoConfiguration(after={CouchbaseDataAutoConfiguration.class,HazelcastAutoConfiguration.class,HibernateJpaAutoConfiguration.class,RedisAutoConfiguration.class}) @ConditionalOnClass(org.springframework.cache.CacheManager.class) @ConditionalOnBean(org.springframework.cache.interceptor.CacheAspectSupport.class) @ConditionalOnMissingBean(value=org.springframework.cache.CacheManager.class, name=\"cacheResolver\") @EnableConfigurationProperties(CacheProperties.class) @Import({org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration.CacheConfigurationImportSelector.class,org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration.CacheManagerEntityManagerFactoryDependsOnPostProcessor.class}) public class CacheAutoConfiguration extends Object; // Auto-configuration for the cache abstraction.\n@FunctionalInterface public interface CacheManagerCustomizer<T extends org.springframework.cache.CacheManager>; // Callback interface that can be implemented by beans wishing to customize the cache manager before it is fully initialized, in particular to tune its configuration.\npublic class CacheManagerCustomizers extends Object; // Invokes the available CacheManagerCustomizer instances in the context for a given CacheManager.\n@ConfigurationProperties(prefix=\"spring.cache\") public class CacheProperties extends Object; // Configuration properties for the cache abstraction.\npublic static class CacheProperties.Caffeine extends Object; // Caffeine specific cache properties.\npublic static class CacheProperties.Couchbase extends Object; // Couchbase specific cache properties.\npublic static class CacheProperties.Infinispan extends Object; // Infinispan specific cache properties.\npublic static class CacheProperties.JCache extends Object; // JCache (JSR-107) specific cache properties.\npublic static class CacheProperties.Redis extends Object; // Redis-specific cache properties.\npublic enum CacheType extends Enum<CacheType>; // Supported cache types (defined in order of precedence).\n", "des": "Auto-configuration for the cache abstraction."}
{"index": 1170, "repo": "commons-math3-3.6.1", "code": "package utilities;\n\nClass AVLTree<T extends Comparable<T>>; // as of 3.4, this class is not used anymore and considered to be out of scope of Apache Commons Math\nClass OrderedTuple; // as of 3.4, this class is not used anymore and considered to be out of scope of Apache Commons Math\n", "des": "This package provides multidimensional ordering features for partitioning."}
{"index": 112, "repo": "ignite-core-2.15.0", "code": "package startup;\n\npackage startup.cmdline; // Contains default command line startup.\nClass BasicWarmupClosure; // Basic warm-up closure which warm-ups cache operations.\n", "des": "Contains Ignite runtime startup classes."}
{"index": 125, "repo": "ignite-core-2.15.0", "code": "package log;\n\nClass LogExporterSpi; // This SPI implementation exports metrics to Ignite log.\n", "des": "Contains push to log implementation of MetricExporterSpi."}
{"index": 720, "repo": "commons-codec-1.16.0", "code": "package cli;\n\nClass Digest; // A minimal command line to run digest over files, directories or a string.\n", "des": "Command line utility."}
{"index": 2611, "repo": "wicket-util-10.0.0-M1", "code": "package metapattern;\n\npackage metapattern.parsers; // Regular Expressions meta pattern parsers.\npublic final class BooleanGroup extends Group; // A Group that captures case-sensitive boolean values \"true\" or \"false\".\npublic final class FloatingPointGroup extends Group; // A Group that captures floating point values (doubles and floats).\npublic class Group extends MetaPattern; // A Group is a piece of a regular expression (referenced by some Java field or local variable) that forms a \"capturing group\" within the larger regular expression.\npublic final class GroupAlreadyBoundException extends RuntimeException; // Thrown if an attempt is made to re-bind a Group to a second capturing group or MetaPattern.\npublic final class GroupNotBoundException extends RuntimeException; // Thrown if a group is not bound.\npublic final class IntegerGroup extends Group; // A Group that captures integer values (positive and negative whole numbers, not Java ints).\npublic class MetaPattern extends Object implements IClusterable; // Useful class for constructing readable and reusable regular expressions.\npublic final class OptionalMetaPattern extends MetaPattern; // Makes any MetaPattern optional by enclosing the pattern in an optionality expression.\n", "des": "Regular Expressions meta pattern support."}
{"index": 1529, "repo": "spring-context-6.0.11", "code": "package jmx;\n\npackage jmx.access; // Provides support for accessing remote MBean resources.\npackage jmx.export; // This package provides declarative creation and registration of Spring-managed beans as JMX MBeans.\npackage jmx.support; // Contains support classes for connecting to local and remote MBeanServers and for exposing an MBeanServer to remote clients.\npublic class JmxException extends org.springframework.core.NestedRuntimeException; // General base exception to be thrown on JMX errors.\npublic class MBeanServerNotFoundException extends JmxException; // Exception thrown when we cannot locate an instance of an MBeanServer, or when more than one instance is found.\n", "des": "This package contains Spring's JMX support, which includes registration of Spring-managed beans as JMX MBeans as well as access to remote JMX MBeans."}
{"index": 296, "repo": "pdfbox-3.0.0-beta1", "code": "package form;\n\nClass PDFormXObject; // A Form XObject.\nClass PDTransparencyGroup; // A transparency group.\nClass PDTransparencyGroupAttributes; // Transparency group attributes.\n", "des": "This package deals with Form XObjects that are stored in a PDF document."}
{"index": 114, "repo": "ignite-core-2.15.0", "code": "package marshaller;\n\npackage marshaller.jdk; // Contains JDK java.io based marshaller.\nInterface Marshaller; // Marshaller allows to marshal or unmarshal objects in grid.\nInterface MarshallerContext; // Marshaller context.\nClass AbstractMarshaller; // Base class for marshallers.\nClass AbstractNodeNameAwareMarshaller; // Marshaller allowing for Ignition.localIgnite() calls.\nClass MarshallerExclusions; // Controls what classes should be excluded from marshalling by default.\nClass MarshallerUtils; // Utility marshaller methods.\n", "des": "Contains various supported marshallers."}
{"index": 1696, "repo": "spring-data-couchbase-5.1.2", "code": "package config;\n\npublic class CouchbaseRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport;\npublic class CouchbaseRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport;\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(CouchbaseRepositoriesRegistrar.class) public @interface EnableCouchbaseRepositories; // Annotation to activate Couchbase repositories.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(ReactiveCouchbaseRepositoriesRegistrar.class) public @interface EnableReactiveCouchbaseRepositories; // Annotation to activate reactive couchbase repositories.\npublic class ReactiveCouchbaseRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport;\npublic class ReactiveCouchbaseRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport;\npublic class ReactiveRepositoryOperationsMapping extends Object;\npublic class RepositoryOperationsMapping extends Object; // A utility class for configuration allowing to tell which CouchbaseOperations should be backing repositories.\n", "des": "This package contains the support classes to configure repositories in the context of Couchbase."}
{"index": 3224, "repo": "commons-configuration2-2.9.0", "code": "package resolver;\n\nInterface EntityRegistry; // Interface used for registering and retrieving PUBLICID to URL mappings.\nInterface EntityResolverSupport; // Interface that identifies the class as using an EntityResolver\nClass CatalogResolver; // Thin wrapper around xml commons CatalogResolver to allow list of catalogs to be provided.\nClass CatalogResolver.Catalog; // Overrides the Catalog implementation to use the underlying FileSystem.\nClass CatalogResolver.CatalogManager; // Extends the CatalogManager to make the FileSystem and base directory accessible.\nClass DefaultEntityResolver; // The DefaultEntityResolver used by XML Configurations.\n", "des": "A package containing EntityResolvers."}
{"index": 3894, "repo": "solr-solrj-9.3.0", "code": "package schema;\n\nClass FieldTypeRepresentation;\nClass SchemaRepresentation;\nClass SchemaResponse; // This class is used to wrap the response messages retrieved from Solr Schema API.\nClass SchemaResponse.CopyFieldsResponse;\nClass SchemaResponse.DynamicFieldResponse;\nClass SchemaResponse.DynamicFieldsResponse;\nClass SchemaResponse.FieldResponse;\nClass SchemaResponse.FieldsResponse;\nClass SchemaResponse.FieldTypeResponse;\nClass SchemaResponse.FieldTypesResponse;\nClass SchemaResponse.GlobalSimilarityResponse;\nClass SchemaResponse.SchemaNameResponse;\nClass SchemaResponse.SchemaVersionResponse;\nClass SchemaResponse.UniqueKeyResponse;\nClass SchemaResponse.UpdateResponse;\n", "des": "Convenience classes for dealing with Schema API responses."}
{"index": 1513, "repo": "spring-context-6.0.11", "code": "package i18n;\n\npublic interface LocaleContext; // Strategy interface for determining the current Locale.\npublic final class LocaleContextHolder extends Object; // Simple holder class that associates a LocaleContext instance with the current thread.\npublic class SimpleLocaleContext extends Object implements LocaleContext; // Simple implementation of the LocaleContext interface, always returning a specified Locale.\npublic class SimpleTimeZoneAwareLocaleContext extends SimpleLocaleContext implements TimeZoneAwareLocaleContext; // Simple implementation of the TimeZoneAwareLocaleContext interface, always returning a specified Locale and TimeZone.\npublic interface TimeZoneAwareLocaleContext extends LocaleContext; // Extension of LocaleContext, adding awareness of the current time zone.\n", "des": "Abstraction for determining the current Locale, plus global holder that exposes a thread-bound Locale."}
{"index": 55, "repo": "ignite-core-2.15.0", "code": "package store;\n\npackage store.jdbc; // Contains reference JDBC-based cache store implementation.\nInterface CacheStore<K,V>; // API for cache persistent storage for read-through and write-through behavior.\nInterface CacheStoreSession; // Session for the cache store operations.\nInterface CacheStoreSessionListener; // Cache store session listener that allows to implement callbacks for session lifecycle.\nClass CacheLoadOnlyStoreAdapter<K,V,I>; // This adapter designed to support stores with bulk loading from stream-like source.\nClass CacheStoreAdapter<K,V>; // Cache storage convenience adapter.\n", "des": "Contains cache store interfaces."}
{"index": 3713, "repo": "solr-core-9.3.0", "code": "package tst;\n\nClass TSTLookupFactory; // Factory for TSTLookup\n", "des": "Factories for TST based Suggesters"}
{"index": 1003, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\nClass MailTransportUtils; // Collection of utility methods to work with Mail transports.\n", "des": "Classes supporting the org.springframework.ws.transport.mail package."}
{"index": 1159, "repo": "commons-math3-3.6.1", "code": "package leastsquares;\n\nInterface LeastSquaresOptimizer; // An algorithm that can be applied to a non-linear least squares problem.\nInterface LeastSquaresOptimizer.Optimum; // The optimum found by the optimizer.\nInterface LeastSquaresProblem; // The data necessary to define a non-linear least squares problem.\nInterface LeastSquaresProblem.Evaluation; // An evaluation of a LeastSquaresProblem at a particular point.\nInterface MultivariateJacobianFunction; // A interface for functions that compute a vector of values and can compute their derivatives (Jacobian).\nInterface ParameterValidator; // Interface for validating a set of model parameters.\nInterface ValueAndJacobianFunction; // A interface for functions that compute a vector of values and can compute their derivatives (Jacobian).\nClass AbstractEvaluation; // An implementation of LeastSquaresProblem.Evaluation that is designed for extension.\nClass EvaluationRmsChecker; // Check if an optimization has converged based on the change in computed RMS.\nClass GaussNewtonOptimizer; // Gauss-Newton least-squares solver.\nClass LeastSquaresAdapter; // An adapter that delegates to another implementation of LeastSquaresProblem.\nClass LeastSquaresBuilder; // A mutable builder for LeastSquaresProblems.\nClass LeastSquaresFactory; // A Factory for creating LeastSquaresProblems.\nClass LevenbergMarquardtOptimizer; // This class solves a least-squares problem using the Levenberg-Marquardt algorithm.\nEnum GaussNewtonOptimizer.Decomposition; // The decomposition algorithm to use to solve the normal equations.\n", "des": "This package provides algorithms that minimize the residuals between observations and model values."}
{"index": 323, "repo": "kafka-clients-3.5.0", "code": "package errors;\n\nClass ApiException; // Any API exception that is part of the public protocol and should be a subclass of this class and be part of this package.\nClass AuthenticationException; // This exception indicates that SASL authentication has failed.\nClass AuthorizationException;\nClass AuthorizerNotReadyException; // An exception that indicates that the authorizer is not ready to receive the request yet.\nClass BrokerIdNotRegisteredException;\nClass BrokerNotAvailableException;\nClass ClusterAuthorizationException;\nClass ConcurrentTransactionsException;\nClass ControllerMovedException;\nClass CoordinatorLoadInProgressException; // In the context of the group coordinator, the broker returns this error code for any coordinator request if it is still loading the group metadata (e.g.\nClass CoordinatorNotAvailableException; // In the context of the group coordinator, the broker returns this error code for metadata or offset commit requests if the group metadata topic has not been created yet.\nClass CorruptRecordException; // This exception indicates a record has failed its internal CRC check, this generally indicates network or disk corruption.\nClass DelegationTokenAuthorizationException;\nClass DelegationTokenDisabledException;\nClass DelegationTokenExpiredException;\nClass DelegationTokenNotFoundException;\nClass DelegationTokenOwnerMismatchException;\nClass DisconnectException; // Server disconnected before a request could be completed.\nClass DuplicateBrokerRegistrationException;\nClass DuplicateResourceException; // Exception thrown due to a request that illegally refers to the same resource twice (for example, trying to both create and delete the same SCRAM credential for a particular user in a single request).\nClass DuplicateSequenceException;\nClass ElectionNotNeededException;\nClass EligibleLeadersNotAvailableException;\nClass FeatureUpdateFailedException;\nClass FencedInstanceIdException;\nClass FencedLeaderEpochException; // The request contained a leader epoch which is smaller than that on the broker that received the request.\nClass FencedMemberEpochException;\nClass FetchSessionIdNotFoundException;\nClass FetchSessionTopicIdException;\nClass GroupAuthorizationException;\nClass GroupIdNotFoundException;\nClass GroupMaxSizeReachedException; // Indicates that a consumer group is already at its configured maximum capacity and cannot accommodate more members\nClass GroupNotEmptyException;\nClass GroupSubscribedToTopicException;\nClass IllegalGenerationException;\nClass IllegalSaslStateException; // This exception indicates unexpected requests prior to SASL authentication.\nClass InconsistentClusterIdException;\n", "des": "Provides common exception classes."}
{"index": 3182, "repo": "tomcat-api-10.1", "code": "package factory;\n\nClass BeanFactory; // Object factory for any Resource conforming to the JavaBean spec.\nClass Constants; // Static constants for this package.\nClass DataSourceLinkFactory; // Object factory for resource links for shared data sources.\nClass DataSourceLinkFactory.DataSourceHandler; // Simple wrapper class that will allow a user to configure a ResourceLink for a data source so that when DataSource.getConnection() is called, it will invoke DataSource.getConnection(String, String) with the preconfigured username and password.\nClass EjbFactory; // Object factory for EJBs.\nClass FactoryBase; // Abstract base class that provides common functionality required by sub-classes.\nClass LookupFactory; // Object factory for lookups.\nClass MailSessionFactory; // Factory class that creates a JNDI named JavaMail Session factory, which can be used for managing inbound and outbound electronic mail messages via JavaMail APIs.\nClass OpenEjbFactory; // Object factory for EJBs.\nClass ResourceEnvFactory; // Object factory for Resources env.\nClass ResourceFactory; // Object factory for Resources.\nClass ResourceLinkFactory; // Object factory for resource links.\nClass SendMailFactory; // Factory class that creates a JNDI named javamail MimePartDataSource object which can be used for sending email using SMTP.\nClass TransactionFactory; // Object factory for User transactions.\n", "des": "This package contains object factories used by the naming service."}
{"index": 1165, "repo": "commons-math3-3.6.1", "code": "package threed;\n\nClass Euclidean3D; // This class implements a three-dimensional space.\nClass FieldRotation<T extends RealFieldElement<T>>; // This class is a re-implementation of Rotation using RealFieldElement.\nClass FieldVector3D<T extends RealFieldElement<T>>; // This class is a re-implementation of Vector3D using RealFieldElement.\nClass Line; // The class represent lines in a three dimensional space.\nClass OutlineExtractor; // Extractor for polyhedrons sets outlines.\nClass Plane; // The class represent planes in a three dimensional space.\nClass PolyhedronsSet; // This class represents a 3D region: a set of polyhedrons.\nClass Rotation; // This class implements rotations in a three-dimensional space.\nClass RotationOrder; // This class is a utility representing a rotation order specification for Cardan or Euler angles specification.\nClass Segment; // Simple container for a two-points segment.\nClass SphereGenerator; // Class generating an enclosing ball from its support points.\nClass SphericalCoordinates; // This class provides conversions related to spherical coordinates.\nClass SubLine; // This class represents a subset of a Line.\nClass SubPlane; // This class represents a sub-hyperplane for Plane.\nClass Vector3D; // This class implements vectors in a three-dimensional space.\nClass Vector3DFormat; // Formats a 3D vector in components list format \"{x; y; z}\".\nEnum RotationConvention; // This enumerates is used to differentiate the semantics of a rotation.\nClass CardanEulerSingularityException; // This class represents exceptions thrown while extractiong Cardan or Euler angles from a rotation.\nClass NotARotationMatrixException; // This class represents exceptions thrown while building rotations from matrices.\n", "des": "This package provides basic 3D geometry components."}
{"index": 3643, "repo": "solr-core-9.3.0", "code": "package events;\n\npackage events.impl; // Default implementation of ClusterEventProducer.\nInterface ClusterEvent; // Cluster-level event.\nInterface ClusterEventListener; // Components that want to be notified of cluster-wide events should use this.\nInterface ClusterEventProducer; // Component that produces ClusterEvent instances.\nInterface ClusterPropertiesChangedEvent; // Event generated when ZkStateReader.CLUSTER_PROPS is modified.\nInterface CollectionsAddedEvent; // Event generated when some collections have been added.\nInterface CollectionsRemovedEvent; // Event generated when some collections have been removed.\nInterface NodesDownEvent; // Event generated when some nodes went down.\nInterface NodesUpEvent; // Event generated when some nodes went up.\nClass ClusterEventProducerBase; // Base class for implementing ClusterEventProducer.\nClass NoOpProducer; // No-op implementation of ClusterEventProducer.\nEnum ClusterEvent.EventType;\n", "des": "Interfaces defining support for cluster-level event generation and processing."}
{"index": 2191, "repo": "spring-security-web-6.1.2", "code": "package savedrequest;\n\npublic class CookieRequestCache extends Object implements RequestCache; // An Implementation of RequestCache which saves the original request URI in a cookie.\npublic class DefaultSavedRequest extends Object implements SavedRequest; // Represents central information from a HttpServletRequest.\npublic static class DefaultSavedRequest.Builder extends Object;\npublic class Enumerator<T> extends Object implements Enumeration<T>; // Adapter that wraps an Enumeration around a Java 2 collection Iterator.\npublic final class FastHttpDateFormat extends Object; // Utility class to generate HTTP dates.\npublic class HttpSessionRequestCache extends Object implements RequestCache; // RequestCache which stores the SavedRequest in the HttpSession.\npublic class NullRequestCache extends Object implements RequestCache; // Null implementation of RequestCache.\npublic interface RequestCache; // Implements \"saved request\" logic, allowing a single request to be retrieved and restarted after redirecting to an authentication mechanism.\npublic class RequestCacheAwareFilter extends org.springframework.web.filter.GenericFilterBean; // Responsible for reconstituting the saved request if one is cached and it matches the current request.\npublic class SavedCookie extends Object implements Serializable; // Stores off the values of a cookie in a serializable holder\npublic interface SavedRequest extends Serializable; // Encapsulates the functionality required of a cached request for both an authentication mechanism (typically form-based login) to redirect to the original URL and for a RequestCache to build a wrapped request, reproducing the original request data.\npublic class SimpleSavedRequest extends Object implements SavedRequest; // A Bean implementation of SavedRequest\n", "des": "Classes related to the caching of an HttpServletRequest which requires authentication."}
{"index": 3859, "repo": "lucene-core-9.7.0", "code": "package hnsw;\n\nInterface RandomAccessVectorValues<T>; // Provides random access to vectors by dense ordinal.\nClass HnswGraph; // Hierarchical Navigable Small World graph.\nClass HnswGraph.ArrayNodesIterator; // NodesIterator that accepts nodes as an integer array.\nClass HnswGraph.CollectionNodesIterator; // Nodes iterator based on set representation of nodes.\nClass HnswGraph.NodesIterator; // Iterator over the graph nodes on a certain level, Iterator also provides the size â€“ the total number of nodes to be iterated over.\nClass HnswGraphBuilder<T>; // Builder for HNSW graph.\nClass HnswGraphSearcher<T>; // Searches an HNSW graph to find nearest neighbors to a query vector.\nClass NeighborArray; // NeighborArray encodes the neighbors of a node and their mutual scores in the HNSW graph as a pair of growable arrays.\nClass NeighborQueue; // NeighborQueue uses a LongHeap to store lists of arcs in an HNSW graph, represented as a neighbor node id with an associated score packed together as a sortable long, which is sorted primarily by score.\nClass OnHeapHnswGraph; // An HnswGraph where all nodes and connections are held in memory.\n", "des": "Navigable Small-World graph, nominally Hierarchical but currently only has a single layer."}
{"index": 1907, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package couchbase;\n\n@FunctionalInterface public interface ClusterEnvironmentBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the ClusterEnvironment through a ClusterEnvironment.Builder whilst retaining default auto-configuration.\n@AutoConfiguration(after=JacksonAutoConfiguration.class) @ConditionalOnClass(com.couchbase.client.java.Cluster.class) @Conditional(org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration.CouchbaseCondition.class) @EnableConfigurationProperties(CouchbaseProperties.class) public class CouchbaseAutoConfiguration extends Object; // Auto-configuration for Couchbase.\npublic interface CouchbaseConnectionDetails extends ConnectionDetails; // Details required to establish a connection to a Couchbase service.\n@ConfigurationProperties(prefix=\"spring.couchbase\") public class CouchbaseProperties extends Object; // Configuration properties for Couchbase.\npublic static class CouchbaseProperties.Env extends Object;\npublic static class CouchbaseProperties.Io extends Object;\npublic static class CouchbaseProperties.Ssl extends Object;\npublic static class CouchbaseProperties.Timeouts extends Object;\n", "des": "Auto-configuration for Couchbase."}
{"index": 3395, "repo": "commons-imaging-1.0-alpha3", "code": "package jpeg;\n\npackage jpeg.decoder; // JPEG image format decoder.\npackage jpeg.exif; // JPEG image format Exif utilities.\npackage jpeg.iptc; // JPEG image format IPTC metadata.\npackage jpeg.segments; // JPEG image format segments.\npackage jpeg.xmp; // JPEG image format XMP metadata.\nInterface JpegUtils.Visitor;\nClass JpegConstants;\nClass JpegImageMetadata;\nClass JpegImageParser;\nClass JpegImagingParameters; // Jpeg format parameters.\nClass JpegPhotoshopMetadata;\nClass JpegUtils;\n", "des": "The JPEG image format."}
{"index": 3044, "repo": "spring-web-6.0.11", "code": "package handler;\n\npublic class DefaultWebFilterChain extends Object implements WebFilterChain; // Default implementation of WebFilterChain.\npublic class ExceptionHandlingWebHandler extends WebHandlerDecorator; // WebHandler decorator that invokes one or more WebExceptionHandlers after the delegate WebHandler.\npublic class FilteringWebHandler extends WebHandlerDecorator; // WebHandlerDecorator that invokes a chain of WebFilters before invoking the delegate WebHandler.\npublic class ResponseStatusExceptionHandler extends Object implements WebExceptionHandler; // Handle ResponseStatusException by setting the response status.\npublic class WebHandlerDecorator extends Object implements WebHandler; // WebHandler that decorates and delegates to another WebHandler.\n", "des": "Provides common WebHandler implementations and a WebHandlerDecorator."}
{"index": 1362, "repo": "spring-tx-6.0.11", "code": "package event;\n\npublic interface TransactionalApplicationListener<E extends org.springframework.context.ApplicationEvent> extends org.springframework.context.ApplicationListener<E>, org.springframework.core.Ordered; // An ApplicationListener that is invoked according to a TransactionPhase.\npublic static interface TransactionalApplicationListener.SynchronizationCallback; // Callback to be invoked on synchronization-driven event processing, wrapping the target listener invocation (TransactionalApplicationListener.processEvent(E)).\npublic class TransactionalApplicationListenerAdapter<E extends org.springframework.context.ApplicationEvent> extends Object implements TransactionalApplicationListener<E>, org.springframework.core.Ordered; // TransactionalApplicationListener adapter that delegates the processing of an event to a target ApplicationListener instance.\npublic class TransactionalApplicationListenerMethodAdapter extends org.springframework.context.event.ApplicationListenerMethodAdapter implements TransactionalApplicationListener<org.springframework.context.ApplicationEvent>; // GenericApplicationListener adapter that delegates the processing of an event to a TransactionalEventListener annotated method.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @EventListener public @interface TransactionalEventListener; // An EventListener that is invoked according to a TransactionPhase.\npublic class TransactionalEventListenerFactory extends Object implements org.springframework.context.event.EventListenerFactory, org.springframework.core.Ordered; // EventListenerFactory implementation that handles TransactionalEventListener annotated methods.\npublic enum TransactionPhase extends Enum<TransactionPhase>; // The phase in which a transactional event listener applies.\n", "des": "Spring's support for listening to transaction events."}
{"index": 1218, "repo": "commons-text-1.10.0", "code": "package diff;\n\nInterface CommandVisitor<T>; // This interface should be implemented by user object to walk through EditScript objects.\nInterface ReplacementsHandler<T>; // This interface is devoted to handle synchronized replacement sequences.\nClass DeleteCommand<T>; // Command representing the deletion of one object of the first sequence.\nClass EditCommand<T>; // Abstract base class for all commands used to transform an objects sequence into another one.\nClass EditScript<T>; // This class gathers all the commands needed to transform one objects sequence into another objects sequence.\nClass InsertCommand<T>; // Command representing the insertion of one object of the second sequence.\nClass KeepCommand<T>; // Command representing the keeping of one object present in both sequences.\nClass ReplacementsFinder<T>; // This class handles sequences of replacements resulting from a comparison.\nClass StringsComparator; // It is guaranteed that the comparisons will always be done as o1.equals(o2) where o1 belongs to the first sequence and o2 belongs to the second sequence.\n", "des": "Provides algorithms for diff between strings."}
{"index": 1967, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package security;\n\npackage security.reactive; // Auto-configuration for reactive Spring Security.\npackage security.rsocket; // Auto-configuration for RSocket support in Spring Security.\npackage security.saml2; // Auto-configuration for Spring Security's SAML 2.0.\npackage security.servlet; // Auto-configuration for Servlet-based Spring Security.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.security.DefaultWebSecurityCondition.class) public @interface ConditionalOnDefaultWebSecurity; // @Conditional that only matches when web security is available and the user has not defined their own configuration.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.security.data.repository.query.SecurityEvaluationContextExtension.class) public class SecurityDataConfiguration extends Object; // Automatically adds Spring Security's integration with Spring Data.\n@ConfigurationProperties(prefix=\"spring.security\") public class SecurityProperties extends Object; // Configuration properties for Spring Security.\npublic static class SecurityProperties.Filter extends Object;\npublic static class SecurityProperties.User extends Object;\npublic enum StaticResourceLocation extends Enum<StaticResourceLocation>; // Common locations for static resources.\n", "des": "Auto-configuration for Spring Security."}
{"index": 704, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package core;\n\nInterface ComponentsRegistration; // The marker interface for the IntegrationComponentSpec implementation, when there is need to register as beans not only the target spec's components, but some additional components, e.g.\nClass ConsumerEndpointSpec<S extends ConsumerEndpointSpec<S,H>,H extends org.springframework.messaging.MessageHandler>; // A EndpointSpec for consumer endpoints.\nClass EndpointSpec<S extends EndpointSpec<S,F,H>,F extends org.springframework.beans.factory.BeanNameAware,H>; // An IntegrationComponentSpec for endpoints.\nClass IntegrationComponentSpec<S extends IntegrationComponentSpec<S,T>,T>; // The common Builder abstraction.\nClass MessageHandlerSpec<S extends MessageHandlerSpec<S,H>,H extends org.springframework.messaging.MessageHandler>; // An IntegrationComponentSpec for MessageHandlers.\nClass MessageProcessorSpec<S extends MessageProcessorSpec<S>>; // The IntegrationComponentSpec specific base class for MessageProcessors.\nClass MessageProducerSpec<S extends MessageProducerSpec<S,P>,P extends org.springframework.integration.endpoint.MessageProducerSupport>; // An IntegrationComponentSpec for MessageProducers.\nClass MessageSourceSpec<S extends MessageSourceSpec<S,H>,H extends org.springframework.integration.core.MessageSource<?>>; // An IntegrationComponentSpec for MessageSources.\nClass MessagingGatewaySpec<S extends MessagingGatewaySpec<S,G>,G extends org.springframework.integration.gateway.MessagingGatewaySupport>; // An IntegrationComponentSpec for MessagingGatewaySupports.\nClass PollerFactory; // An Adapter class for the Pollers factory.\nClass Pollers; // An utility class to provide PollerSpecs for PollerMetadata configuration variants.\nClass PollerSpec; // An IntegrationComponentSpec for PollerMetadatas.\n", "des": "Provides core classes of the Spring Integration Java DSL."}
{"index": 626, "repo": "freemarker-2.3.32", "code": "package jython;\n\nClass JythonHashModel; // Model for Jython dictionaries (PyDictionary and PyStringMap).\nClass JythonModel; // Generic model for arbitrary Jython objects.\nClass JythonNumberModel; // Model for Jython numeric objects (PyInteger, PyLong, PyFloat).\nClass JythonSequenceModel; // Model for Jython sequence objects (PySequence descendants).\nClass JythonVersionAdapter; // Functions that has a different implementation depending on the Jython version used.\nClass JythonWrapper; // An object wrapper that wraps Jython objects into FreeMarker template models and vice versa.\n", "des": "Exposes Jython objects to templates."}
{"index": 2721, "repo": "spring-batch-infrastructure-5.0.2", "code": "package mapping;\n\npublic class ArrayFieldSetMapper extends Object implements FieldSetMapper<String[]>; // A basic array mapper, returning the values backing a fieldset.\npublic class BeanWrapperFieldSetMapper<T> extends DefaultPropertyEditorRegistrar implements FieldSetMapper<T>, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // FieldSetMapper implementation based on bean property paths.\npublic class DefaultLineMapper<T> extends Object implements LineMapper<T>, org.springframework.beans.factory.InitializingBean; // Two-phase LineMapper implementation consisting of tokenization of the line into FieldSet followed by mapping to item.\npublic interface FieldSetMapper<T>; // Interface that is used to map data obtained from a FieldSet into an object.\npublic class JsonLineMapper extends Object implements LineMapper<Map<String,Object>>; // Interpret a line as a JSON object and parse it up to a Map.\npublic class PassThroughFieldSetMapper extends Object implements FieldSetMapper<FieldSet>; // Pass through FieldSetMapper useful for passing a FieldSet back directly rather than a mapped object.\npublic class PassThroughLineMapper extends Object implements LineMapper<String>; // Pass through LineMapper useful for passing the original String back directly rather than a mapped object.\npublic class PatternMatchingCompositeLineMapper<T> extends Object implements LineMapper<T>, org.springframework.beans.factory.InitializingBean; // A LineMapper implementation that stores a mapping of String patterns to delegate LineTokenizers as well as a mapping of String patterns to delegate FieldSetMappers.\npublic class RecordFieldSetMapper<T> extends Object implements FieldSetMapper<T>; // This is a FieldSetMapper that supports Java records mapping (requires JKD 14 or higher).\n", "des": "Infrastructure implementations of io file support mapping concerns."}
{"index": 123, "repo": "ignite-core-2.15.0", "code": "package metric;\n\npackage metric.jmx; // Contains JMX based implementation of MetricExporterSpi.\npackage metric.log; // Contains push to log implementation of MetricExporterSpi.\npackage metric.noop; // Contains no-op implementation of MetricExporterSpi.\nInterface BooleanMetric; // Interface for the metrics that holds boolean primitive.\nInterface DoubleMetric; // Interface for the metrics that holds double primitive.\nInterface HistogramMetric; // Histogram metric calculates counts of measurements that gets into each bounds interval.\nInterface IntMetric; // Interface for the metrics that holds int primitive.\nInterface LongMetric; // Interface for the metrics that holds long primitive.\nInterface Metric; // Base interface for all metrics.\nInterface MetricExporterSpi; // Exporter of metric information to the external recipient.\nInterface ObjectMetric<T>; // Interface for the metrics that holds typed value.\nInterface ReadOnlyMetricManager; // Read only metric manager.\nInterface ReadOnlyMetricRegistry; // Read only metric registry.\n", "des": "Contains common classes and interfaces for metric SPI implementations."}
{"index": 1761, "repo": "spring-data-mongodb-4.1.2", "code": "package schema;\n\npublic class IdentifiableJsonSchemaProperty<T extends JsonSchemaObject> extends Object implements JsonSchemaProperty; // JsonSchemaProperty implementation.\npublic static class IdentifiableJsonSchemaProperty.ArrayJsonSchemaProperty extends IdentifiableJsonSchemaProperty<TypedJsonSchemaObject.ArrayJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'array' property.\npublic static class IdentifiableJsonSchemaProperty.BooleanJsonSchemaProperty extends IdentifiableJsonSchemaProperty<TypedJsonSchemaObject.BooleanJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'boolean' property.\npublic static class IdentifiableJsonSchemaProperty.DateJsonSchemaProperty extends IdentifiableJsonSchemaProperty<org.springframework.data.mongodb.core.schema.TypedJsonSchemaObject.DateJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'date' property.\npublic static class IdentifiableJsonSchemaProperty.EncryptedJsonSchemaProperty extends Object implements JsonSchemaProperty; // JsonSchemaProperty implementation for encrypted fields.\npublic static class IdentifiableJsonSchemaProperty.NullJsonSchemaProperty extends IdentifiableJsonSchemaProperty<org.springframework.data.mongodb.core.schema.TypedJsonSchemaObject.NullJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'null' property.\npublic static class IdentifiableJsonSchemaProperty.NumericJsonSchemaProperty extends IdentifiableJsonSchemaProperty<TypedJsonSchemaObject.NumericJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'number' property.\npublic static class IdentifiableJsonSchemaProperty.ObjectJsonSchemaProperty extends IdentifiableJsonSchemaProperty<TypedJsonSchemaObject.ObjectJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'object' property.\npublic static class IdentifiableJsonSchemaProperty.RequiredJsonSchemaProperty extends Object implements JsonSchemaProperty; // Delegating JsonSchemaProperty implementation having a required flag for evaluation during schema creation process.\npublic static class IdentifiableJsonSchemaProperty.StringJsonSchemaProperty extends IdentifiableJsonSchemaProperty<TypedJsonSchemaObject.StringJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'string' property.\n", "des": "MongoDB-specific JSON schema implementation classes."}
{"index": 1483, "repo": "tribuo-core-4.3.1", "code": "package hash;\n\npublic final class HashCodeHasher extends Hasher; // Hashes names using String.hashCode().\npublic static final class HashCodeHasher.HashCodeHasherProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // Provenance for the HashCodeHasher.\npublic final class HashedFeatureMap extends ImmutableFeatureMap; // A FeatureMap used by the HashingTrainer to provide feature name hashing and guarantee that the Model does not contain feature name information, but still works with unhashed features names.\npublic abstract class Hasher extends Object implements com.oracle.labs.mlrg.olcut.config.Configurable, com.oracle.labs.mlrg.olcut.provenance.Provenancable<com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance>, Serializable, ProtoSerializable<org.tribuo.protos.core.HasherProto>; // An abstract base class for hash functions used to hash the names of features.\npublic class HashingOptions extends Object implements com.oracle.labs.mlrg.olcut.config.Options; // An Options implementation which provides CLI arguments for the model hashing functionality.\npublic static enum HashingOptions.ModelHashingType extends Enum<HashingOptions.ModelHashingType>; // Supported types of hashes in CLI programs.\npublic final class HashingTrainer<T extends Output<T>> extends Object implements Trainer<T>; // A Trainer which hashes the Dataset before the Model is produced.\npublic final class MessageDigestHasher extends Hasher; // Hashes Strings using the supplied MessageDigest type.\npublic static final class MessageDigestHasher.MessageDigestHasherProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // Provenance for MessageDigestHasher.\npublic final class ModHashCodeHasher extends Hasher; // Hashes names using String.hashCode(), then reduces the dimension.\npublic static final class ModHashCodeHasher.ModHashCodeHasherProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance; // Provenance for the ModHashCodeHasher.\n", "des": "Provides the base interface and implementations of the Model hashing which obscures the feature names stored in a model."}
{"index": 3762, "repo": "lucene-analysis-common-9.7.0", "code": "package bg;\n\nClass BulgarianAnalyzer; // Analyzer for Bulgarian.\nClass BulgarianStemFilter; // A TokenFilter that applies BulgarianStemmer to stem Bulgarian words.\nClass BulgarianStemFilterFactory; // Factory for BulgarianStemFilter.\nClass BulgarianStemmer; // Light Stemmer for Bulgarian.\n", "des": "Analyzer for Bulgarian."}
{"index": 1131, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package csi;\n\nClass ContainerVolumePublisher; // Publish/un-publish CSI volumes on node manager.\n", "des": "CSI volumes."}
{"index": 2609, "repo": "wicket-util-10.0.0-M1", "code": "package io;\n\npublic class BOMInputStream extends ProxyInputStream; // This class is used to wrap a stream that includes an encoded ByteOrderMark as its first bytes.\npublic class ByteArrayOutputStream extends OutputStream; // This class implements an output stream in which the data is written into a byte array.\npublic final class ByteCountingOutputStream extends OutputStream; // Output stream that counts bytes written to it (but discards them).\npublic class ByteOrderMark extends Object implements Serializable; // Byte Order Mark (BOM) representation - see BOMInputStream.\npublic class Connections extends Object; // URLConnection related utilities\npublic class DeferredFileOutputStream extends ThresholdingOutputStream; // An output stream which will retain data in memory until a specified threshold is reached, and only then commit it to disk.\npublic static interface DeferredFileOutputStream.FileFactory; // The file factory for this deferred file output stream.\npublic final class FullyBufferedReader extends Object; // This is not a reader like e.g.\npublic interface IClusterable extends Serializable; // Wicket version of Serializable.\npublic final class IOUtils extends Object; // General IO Stream manipulation.\npublic abstract class ProxyInputStream extends FilterInputStream; // A Proxy stream which acts as expected, that is it passes the method calls on to the proxied stream and doesn't change which methods are being called.\npublic final class Streams extends Object; // Utilities methods for working with input and output streams.\npublic class StringBufferWriter extends Writer;\npublic abstract class ThresholdingOutputStream extends OutputStream; // An output stream which triggers an event when a specified number of bytes of data have been written to it.\npublic final class XmlReader extends Reader; // This is a simple XmlReader.\n", "des": "Input/Output utilities."}
{"index": 106, "repo": "ignite-core-2.15.0", "code": "package segmentation;\n\nInterface SegmentationResolver; // This is interface for segmentation (a.k.a \"split-brain\" problem) resolvers.\nEnum SegmentationPolicy; // Policy that defines how node will react on topology segmentation.\n", "des": "Contains segmentation \"split-brain\" related classes."}
{"index": 340, "repo": "hadoop-hdfs-3.3.6", "code": "package datatransfer;\n\nClass BlackListBasedTrustedChannelResolver; // Implements TrustedChannelResolver to trust ips/host/subnets based on a blackList.\nClass WhitelistBasedTrustedChannelResolver;\n", "des": "This package contains classes related to hdfs data transfer protocol."}
{"index": 3600, "repo": "lucene-test-framework-9.7.0", "code": "package automaton;\n\nClass AutomatonTestUtil; // Utilities for testing automata.\nClass AutomatonTestUtil.RandomAcceptedStrings; // Lets you retrieve random strings accepted by an Automaton.\n", "des": "Support for testing automata."}
{"index": 342, "repo": "hadoop-hdfs-3.3.6", "code": "package blockaliasmap;\n\nInterface BlockAliasMap.Reader.Options; // reader options.\nInterface BlockAliasMap.Writer.Options; // writer options.\nClass BlockAliasMap<T extends BlockAlias>; // An abstract class used to read and write block maps for provided blocks.\nClass BlockAliasMap.Reader<U extends BlockAlias>; // An abstract class that is used to read BlockAliases for provided blocks.\nClass BlockAliasMap.Writer<U extends BlockAlias>; // An abstract class used as a writer for the provided block map.\n", "des": "The AliasMap defines mapping of PROVIDED HDFS blocks to data in remote storage systems."}
{"index": 3428, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface ClassLoaderService; // A service for interacting with class loaders.\nInterface ClassLoaderService.Work<T>;\nClass ClassLoadingException; // Indicates a problem performing class loading.\n", "des": "The class loading service SPI."}
{"index": 1713, "repo": "spring-boot-test-3.1.1", "code": "package web;\n\npublic class SpringBootMockServletContext extends org.springframework.mock.web.MockServletContext; // MockServletContext implementation for Spring Boot.\n", "des": "Mock web classes specific to Spring Boot."}
{"index": 671, "repo": "commons-lang3-3.12.0", "code": "package math;\n\nClass Fraction; // Fraction is a Number implementation that stores fractions accurately.\nClass IEEE754rUtils; // Provides IEEE-754r variants of NumberUtils methods.\nClass NumberUtils; // Provides extra functionality for Java Number classes.\n", "des": "Extends java.math for business mathematical classes."}
{"index": 223, "repo": "nutch-2.4", "code": "package domain;\n\nClass DomainStatistics; // Extracts some very basic statistics about domains from the crawldb\nClass DomainStatistics.DomainStatisticsCombiner;\nClass DomainStatistics.DomainStatisticsMapper;\nClass DomainStatistics.DomainStatisticsReducer;\nClass DomainSuffix; // This class represents the last part of the host name, which is operated by authoritives, not individuals.\nClass DomainSuffixes; // Storage class for DomainSuffix objects Note: this class is singleton\nClass TopLevelDomain; // (From wikipedia) A top-level domain (TLD) is the last part of an Internet domain name; that is, the letters which follow the final dot of any domain name.\nEnum DomainStatistics.MyCounter;\nEnum DomainSuffix.Status; // Enumeration of the status of the tld.\nEnum TopLevelDomain.Type;\n", "des": "Classes for domain name analysis."}
{"index": 1610, "repo": "spring-data-neo4j-7.1.2", "code": "package mapping;\n\npackage mapping.callback; // This package contains the callback API.\n@API(status=INTERNAL, since=\"6.3\") public final class AssociationHandlerSupport extends Object; // Warning Internal API, might change without further notice, even in patch releases.\n@API(status=EXPERIMENTAL, since=\"6.0\") public final class Constants extends Object; // A pool of constants used in our Cypher generation.\n@API(status=INTERNAL, since=\"6.0\") public final class CreateRelationshipStatementHolder extends Object; // The CreateRelationshipStatementHolder holds the Cypher Statement to create a relationship as well as the optional properties that describe the relationship in case of more than a simple relationship.\n@API(status=INTERNAL, since=\"6.0\") public enum CypherGenerator extends Enum<CypherGenerator>; // A generator based on the schema defined by node and relationship descriptions.\n@API(status=INTERNAL, since=\"6.1.2\") public final class DtoInstantiatingConverter extends Object implements Converter<EntityInstanceWithSource,Object>; // Converter to instantiate DTOs from fully equipped domain objects.\n@API(status=INTERNAL, since=\"6.1.2\") public final class EntityFromDtoInstantiatingConverter<T> extends Object implements Converter<Object,T>; // Converter to instantiate entity objects from DTOs\n@API(status=INTERNAL, since=\"6.1.2\") public final class EntityInstanceWithSource extends Object; // Used to keep the raw result around in case of a DTO based projection so that missing properties can be filled later on.\n@API(status=STABLE, since=\"6.0\") public interface GraphPropertyDescription; // Provides minimal information how to map class attributes to the properties of a node or a relationship.\n@API(status=INTERNAL, since=\"6.0\") public final class IdDescription extends Object; // Description how to generate Ids for entities.\n@API(status=INTERNAL) public final class IdentitySupport extends Object; // This class is not part of any public API and will be changed without further notice as needed.\n@API(status=INTERNAL, since=\"6.0\") public final class MappingSupport extends Object;\n", "des": "The main mapping framework."}
{"index": 2131, "repo": "spring-context-support-6.0.11", "code": "package transaction;\n\npublic abstract class AbstractTransactionSupportingCacheManager extends org.springframework.cache.support.AbstractCacheManager; // Base class for CacheManager implementations that want to support built-in awareness of Spring-managed transactions.\npublic class TransactionAwareCacheDecorator extends Object implements org.springframework.cache.Cache; // Cache decorator which synchronizes its TransactionAwareCacheDecorator.put(java.lang.Object, java.lang.Object), TransactionAwareCacheDecorator.evict(java.lang.Object) and TransactionAwareCacheDecorator.clear() operations with Spring-managed transactions (through Spring's TransactionSynchronizationManager), performing the actual cache put/evict/clear operation only in the after-commit phase of a successful transaction.\npublic class TransactionAwareCacheManagerProxy extends Object implements org.springframework.cache.CacheManager, org.springframework.beans.factory.InitializingBean; // Proxy for a target CacheManager, exposing transaction-aware Cache objects which synchronize their Cache.put(java.lang.Object, java.lang.Object) operations with Spring-managed transactions (through Spring's TransactionSynchronizationManager), performing the actual cache put operation only in the after-commit phase of a successful transaction.\n", "des": "Transaction-aware decorators for the org.springframework.cache package."}
{"index": 657, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package uam;\n\nClass UnmanagedAMPoolManager; // A service that manages a pool of UAM managers in UnmanagedApplicationManager.\nClass UnmanagedApplicationManager; // UnmanagedApplicationManager is used to register unmanaged application and negotiate for resources from resource managers.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 2054, "repo": "spring-ws-security-4.0.5", "code": "package support;\n\npublic class KeyManagersFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<KeyManager[]>, org.springframework.beans.factory.InitializingBean; // Spring factory bean for an array of KeyManagers.\npublic class KeyStoreFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<KeyStore>, org.springframework.beans.factory.InitializingBean; // Spring factory bean for a KeyStore.\npublic abstract class KeyStoreUtils extends Object; // Generic utility methods for dealing with KeyStore objects.\npublic abstract class SpringSecurityUtils extends Object; // Generic utility methods for Spring Security\npublic class TrustManagersFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<TrustManager[]>, org.springframework.beans.factory.InitializingBean; // Spring factory bean for an array of TrustManagers.\n", "des": "Contains support classes for handling WS-Security messages."}
{"index": 3632, "repo": "lucene-misc-9.7.0", "code": "package store;\n\nClass ByteTrackingIndexOutput; // An IndexOutput that wraps another instance and tracks the number of bytes written\nClass ByteWritesTrackingDirectoryWrapper; // FilterDirectory that tracks write amplification factor\nClass DirectIODirectory; // A Directory implementation for all Unixes and Windows that uses DIRECT I/O to bypass OS level IO caching during merging.\nClass HardlinkCopyDirectoryWrapper; // This directory wrapper overrides Directory.copyFrom(Directory, String, String, IOContext) in order to optionally use a hard-link instead of a full byte by byte file copy if applicable.\nClass RAFDirectory; // A straightforward implementation of FSDirectory using java.io.RandomAccessFile.\n", "des": "Misc Directory implementations."}
{"index": 290, "repo": "pdfbox-3.0.0-beta1", "code": "package taggedpdf;\n\nClass PDArtifactMarkedContent; // An artifact marked content.\nClass PDExportFormatAttributeObject; // An Export Format attribute object.\nClass PDFourColours; // An object for four colours.\nClass PDLayoutAttributeObject; // A Layout attribute object.\nClass PDListAttributeObject; // A List attribute object.\nClass PDPrintFieldAttributeObject; // A PrintField attribute object.\nClass PDStandardAttributeObject; // A standard attribute object.\nClass PDTableAttributeObject; // A Table attribute object.\nClass StandardStructureTypes; // The standard structure types.\n", "des": "The tagged PDF package provides a mechanism for incorporating \"tags\" (standard structure types and attributes) into a PDF file."}
{"index": 3418, "repo": "commons-imaging-1.0-alpha3", "code": "package internal;\n\nClass Debug; // Internal-only debug class.\nClass Util; // Internal utilities.\n", "des": "Internal utility classes."}
{"index": 690, "repo": "jackson-databind-2.15.2", "code": "package jsontype;\n\npackage jsontype.impl; // Package that contains standard implementations for TypeResolverBuilder and TypeIdResolver.\nInterface TypeIdResolver; // Interface that defines standard API for converting types to type identifiers and vice versa.\nInterface TypeResolverBuilder<T extends TypeResolverBuilder<T>>; // Interface that defines builders that are configured based on annotations (like JsonTypeInfo or JAXB annotations), and produce type serializers and deserializers used for handling type information embedded in JSON to allow for safe polymorphic type handling.\nClass BasicPolymorphicTypeValidator; // Standard BasicPolymorphicTypeValidator implementation that users may want to use for constructing validators based on simple class hierarchy and/or name patterns to allow and/or deny certain subtypes.\nClass BasicPolymorphicTypeValidator.Builder; // Builder class for configuring and constructing immutable BasicPolymorphicTypeValidator instances.\nClass BasicPolymorphicTypeValidator.NameMatcher; // General matcher interface (predicate) for validating unresolved subclass class name.\nClass BasicPolymorphicTypeValidator.TypeMatcher; // General matcher interface (predicate) for validating class values (base type or resolved subtype)\nClass DefaultBaseTypeLimitingValidator; // PolymorphicTypeValidator that will only allow polymorphic handling if the base type is NOT one of potential dangerous base types (see DefaultBaseTypeLimitingValidator.isUnsafeBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.JavaType) for specific list of such base types).\nClass NamedType; // Simple container class for types with optional logical name, used as external identifier\nClass PolymorphicTypeValidator; // Interface for classes that handle validation of class-name - based subtypes used with Polymorphic Deserialization: both via \"default typing\" and explicit @JsonTypeInfo when using Java Class name as Type Identifier.\nClass PolymorphicTypeValidator.Base; // Shared base class with partial implementation (with all validation calls returning PolymorphicTypeValidator.Validity.INDETERMINATE) and convenience methods for indicating failure reasons.\nClass SubtypeResolver; // Helper object used for handling registration on resolving of super-types to sub-types.\nClass TypeDeserializer; // Interface for deserializing type information from JSON content, to type-safely deserialize data into correct polymorphic instance (when type inclusion has been enabled for type handled).\n", "des": "Package that contains interfaces that define how to implement functionality for dynamically resolving type during deserialization."}
{"index": 3429, "repo": "hibernate-core-5.6.15.Final", "code": "package selector;\n\npackage selector.spi; // Defines actual contract used for strategy selection : StrategySelector.\nInterface StrategyRegistration<T>; // Describes the registration of a named strategy implementation.\nInterface StrategyRegistrationProvider; // Responsible for providing the registrations of strategy selector(s).\nClass SimpleStrategyRegistrationImpl<T>; // A simple implementation of StrategyRegistration.\n", "des": "Defines a feature-set around named registration of implementations of various contracts and the ability to select those implementations."}
{"index": 1649, "repo": "jena-core-4.9.0", "code": "package ontology;\n\npackage ontology.impl; // Provides default implementations for the abstractions defined in the org.apache.jena.ontology package.\npublic interface AllDifferent extends OntResource; // Interface defining an individual in which all members of a collection are declared pair-wise disjoint.\npublic interface AllValuesFromRestriction extends Restriction; // A property restriction that requires the named property to have have any range instances to be members of a given class.\npublic interface AnnotationProperty extends OntProperty, Property; // Interface that represents the category of annotation properties in an ontology language.\npublic interface BooleanClassDescription extends OntClass; // Encapsulates a class description formed from a boolean combination of other class descriptions (ie union, intersection or complement).\npublic interface CardinalityQRestriction extends QualifiedRestriction; // Interface representing the ontology abstraction for a qualified cardinality restriction.\npublic interface CardinalityRestriction extends Restriction; // A property restriction that requires the named property to have have exactly the given number of values for a given instance to be a member of the class defined by the restriction.\npublic interface ComplementClass extends BooleanClassDescription; // Class description that is formed from the complement of another class description\npublic class ConversionException extends OntologyException; // Exception that is thrown when an ontology resource is converted to another facet, using as(), and the requested conversion is not possible.\npublic interface DataRange extends OntResource; // Represents an ontology DataRange: a class-like construct that contains only concrete data literals.\npublic interface DatatypeProperty extends OntProperty; // Interface that encapsulates the class of properties whose range values are datatype values (as distinct from ObjectProperty whose values are individuals).\npublic interface EnumeratedClass extends OntClass; // Encapsulates a class description representing a closed enumeration of individuals.\npublic interface FunctionalProperty extends OntProperty; // Interface encapsulating the class of properties that are functional: that is, properties in which a given given domain value has a unique value in the range.\npublic interface HasValueRestriction extends Restriction; // A property restriction that requires the named property to have a given individual as its value.\npublic interface Individual extends OntResource; // Interface that encapsulates an individual in an ontology, sometimes referred to as a fact or assertion, or a member of the a-box.\n", "des": "Provides a set of abstractions and convenience classes for accessing and manipluating ontologies represented in RDF."}
{"index": 1015, "repo": "spring-ws-3.0.10.RELEASE", "code": "package xpath;\n\nInterface NodeCallbackHandler; // An interface used by XPathOperations implementations for processing Node objects on a per-node basis.\nInterface NodeMapper<T>; // An interface used by XPathOperations implementations for mapping Node objects on a per-node basis.\nInterface XPathExpression; // Defines the contract for a precompiled XPath expression.\nInterface XPathOperations; // Interface that specifies a basic set of XPath operations, implemented by various XPathTemplates.\nClass AbstractXPathTemplate; // Abstract base class for implementations of XPathOperations.\nClass JaxenXPathTemplate; // Implementation of XPathOperations that uses Jaxen.\nClass Jaxp13XPathTemplate; // Implementation of XPathOperations that uses JAXP 1.3.\nClass XPathExpressionFactory; // Factory for compiled XPathExpressions, being aware of JAXP 1.3+ XPath functionality, and Jaxen.\nClass XPathExpressionFactoryBean; // Spring FactoryBean for XPathExpression object.\nClass XPathException; // Exception thrown when an error occurs during XPath processing.\nClass XPathParseException; // Exception throws when a XPath expression cannot be parsed.\n", "des": "Provides XPathTemplate implementations, and various classes for XPath evaluation using JAXP 1.3, and Jaxen."}
{"index": 1969, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package reactive;\n\n@AutoConfiguration(before=ReactiveSecurityAutoConfiguration.class) @EnableConfigurationProperties(OAuth2ClientProperties.class) @Conditional(org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration.NonServletApplicationCondition.class) @ConditionalOnClass({reactor.core.publisher.Flux.class,org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity.class,org.springframework.security.oauth2.client.registration.ClientRegistration.class}) @Import({org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientConfigurations.ReactiveClientRegistrationRepositoryConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientConfigurations.ReactiveOAuth2ClientConfiguration.class}) public class ReactiveOAuth2ClientAutoConfiguration extends Object; // Auto-configuration for Spring Security's Reactive OAuth2 client.\n", "des": "Auto-configuration for Spring Security's Reactive OAuth 2 client."}
{"index": 3755, "repo": "lucene-facet-9.7.0", "code": "package range;\n\nClass DoubleRange; // Represents a range over double values.\nClass DoubleRangeFacetCounts; // Facets implementation that computes counts for dynamic double ranges.\nClass LongRange; // Represents a range over long values.\nClass LongRangeFacetCounts; // Facets implementation that computes counts for dynamic long ranges.\nClass Range; // Base class for a single labeled range.\n", "des": "Provides range faceting capabilities."}
{"index": 179, "repo": "ignite-core-2.15.0", "code": "package task;\n\nClass GridTaskProcessor; // This class defines task processor.\nClass GridTaskWorker<T,R>; // Grid task worker.\nClass TaskExecutionOptions;\nAnnotation Type GridInternal; // Indicates that annotated task should always be loaded with local deployment, ignoring grid source node configuration.\nAnnotation Type GridVisorManagementTask; // Indicates that annotated task is a visor task that was invoked by user.\n", "des": "TODO."}
{"index": 1238, "repo": "spring-hateoas-2.1.2", "code": "package uber;\n\npublic class Jackson2UberModule extends com.fasterxml.jackson.databind.module.SimpleModule; // Jackson SimpleModule for UBER+JSON serializers and deserializers.\npublic class UberLinkDiscoverer extends Object implements LinkDiscoverer; // Find links by rel in an UBER+JSON representation.\n", "des": "UBER media type objects."}
{"index": 3097, "repo": "spring-ws-core-4.0.5", "code": "package wsdl;\n\npackage wsdl.wsdl11; // Contains interfaces and classes specific to WSDL 1.1.\npublic interface WsdlDefinition; // Represents an abstraction for WSDL definitions.\npublic class WsdlDefinitionException extends WebServiceException; // Base class for all WSDL definition exceptions.\n", "des": "Provides the WSDL functionality of the Spring Web Services framework."}
{"index": 192, "repo": "ignite-core-2.15.0", "code": "package typedef;\n\npackage typedef.internal; // Contains internal typedefs.\nInterface C1<E1,R>; // Defines alias for IgniteClosure by extending it.\nInterface C2<E1,E2,R>; // Defines alias for IgniteBiClosure by extending it.\nInterface C3<E1,E2,E3,R>; // Defines alias for GridClosure3 by extending it.\nInterface CI1<T>; // Defines alias for IgniteInClosure by extending it.\nInterface CI2<E1,E2>; // Defines alias for IgniteBiInClosure by extending it.\nInterface CI3<E1,E2,E3>; // Defines alias for GridInClosure3 by extending it.\nInterface CO<T>; // Defines alias for IgniteOutClosure by extending it.\nInterface P1<E1>; // Defines alias for IgnitePredicate by extending it.\nInterface P2<T1,T2>; // Defines alias for IgniteBiPredicate by extending it.\nInterface P3<T1,T2,T3>; // Defines alias for GridPredicate3 by extending it.\nInterface PA; // Defines alias for GridAbsPredicate by extending it.\nInterface PCE<K,V>; // Defines alias for GridPredicate<Entry<K, V>> by extending IgnitePredicate.\nInterface PE; // Defines alias for GridPredicate<GridEvent> by extending IgnitePredicate.\nInterface PKV<K,V>; // Defines alias for GridPredicate2<K, V> by extending IgnitePredicate.\nInterface PN; // Defines alias for GridPredicate<ClusterNode> by extending IgnitePredicate.\nInterface R1<E1,R>; // Defines alias for IgniteReducer by extending it.\nInterface R2<E1,E2,R>; // Defines alias for IgniteReducer2 by extending it.\nInterface R3<E1,E2,E3,R>; // Defines alias for IgniteReducer3 by extending it.\nClass CA; // Defines alias for GridAbsClosure by extending it.\n", "des": "Contains typedefs definitions for frequently used classes."}
{"index": 1620, "repo": "spring-kafka-3.0.9", "code": "package kafka;\n\npackage kafka.annotation; // Package for kafka annotations\npackage kafka.aot; // Provides classes to support Spring AOT.\npackage kafka.config; // Package for kafka configuration\npackage kafka.core; // Package for kafka core components\npackage kafka.event; // Application Events.\npackage kafka.listener; // Package for kafka listeners\npackage kafka.mock; // Provides classes to support the use of MockConsumer and MockProducer.\npackage kafka.requestreply; // Provides classes for request/reply semantics.\npackage kafka.retrytopic; // Package for retryable topic handling.\npackage kafka.streams; // Package for classes related to Kafka Streams.\npackage kafka.support; // Package for kafka support\npackage kafka.transaction; // Provides classes related to transactions.\npublic class KafkaException extends org.springframework.core.NestedRuntimeException; // The Spring for Apache Kafka specific NestedRuntimeException implementation.\npublic static enum KafkaException.Level extends Enum<KafkaException.Level>; // The log level for KafkaException.\n", "des": "Base package for kafka"}
{"index": 3302, "repo": "opencms-core-15.0", "code": "package publish;\n\nInterface I_CmsPublishEventListener; // This interface listens to events for a specific publish job.\nClass CmsPublishEngine; // This class is responsible for the publish process.\nClass CmsPublishEngineState; // Class defining the publish engine states.\nClass CmsPublishEventAdapter; // Default implementation for the I_CmsPublishEventListener.\nClass CmsPublishHistory; // List of already finished publish jobs.\nClass CmsPublishJobBase; // Defines a read-only publish job.\nClass CmsPublishJobEnqueued; // Defines a read-only publish job that is still waiting for publishing.\nClass CmsPublishJobFinished; // Defines a read-only publish job that has been already published.\nClass CmsPublishJobInfoBean; // Publish job information bean.\nClass CmsPublishJobRunning; // Defines a read-only publish job that is being published.\nClass CmsPublishListenerCollection; // Publish job information bean.\nClass CmsPublishListVerifier; // Performs some additional checks on publish lists to prevent inconsistent VFS states.\nClass CmsPublishManager; // This manager provide access to the publish engine runtime information.\nClass CmsPublishQueue; // This queue contains all not jet started publish jobs.\nClass CmsPublishReport; // Report class used for the publish operations.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsPublishManager.PublishListRemoveMode; // Enum for the different publish list remove modes.\nClass CmsPublishException; // Used to signal publish issues.\n", "des": "Classes to handle the OpenCms publish process."}
{"index": 1791, "repo": "spring-integration-file-6.1.2", "code": "package session;\n\npublic class CachingSessionFactory<F> extends Object implements SessionFactory<F>, org.springframework.beans.factory.DisposableBean; // A SessionFactory implementation that caches Sessions for reuse without requiring reconnection each time the Session is retrieved from the factory.\npublic class DefaultSessionFactoryLocator<F> extends Object implements SessionFactoryLocator<F>; // The default implementation of SessionFactoryLocator using a simple map lookup and an optional default to fall back on.\npublic class DelegatingSessionFactory<F> extends Object implements SessionFactory<F>; // SessionFactory that delegates to a SessionFactory retrieved from a SessionFactoryLocator.\npublic interface Session<F> extends Closeable; // Common abstraction for a Session with a remote File system.\n@FunctionalInterface public interface SessionFactory<F>; // Factory for acquiring Session instances.\n@FunctionalInterface public interface SessionFactoryLocator<F>; // A factory returning a SessionFactory based on some key.\npublic class SessionFactoryMapBuilder<T> extends org.springframework.integration.support.MapBuilder<SessionFactoryMapBuilder<T>,Object,SessionFactory<T>>; // A MapBuilder to producer a map that maps objects to SessionFactorys.\npublic interface SharedSessionCapable; // A SessionFactory that implements this interface is capable of supporting a shared session.\n", "des": "Provides classes supporting remote file sessions."}
{"index": 164, "repo": "ignite-core-2.15.0", "code": "package rest;\n\npackage rest.handlers; // REST commands handlers.\npackage rest.protocols; // REST protocol handlers.\npackage rest.request; // REST requests.\nInterface GridRestProtocol; // REST protocol.\nInterface GridRestProtocolHandler; // Command protocol handler.\nInterface IgniteRestProcessor; // REST processor marker interface.\nClass GridRestProcessor; // Rest processor implementation.\nClass GridRestResponse; // JSON response.\nEnum GridRestCommand; // Supported commands.\n", "des": "REST processor."}
{"index": 316, "repo": "kafka-clients-3.5.0", "code": "package consumer;\n\nInterface Consumer<K,V>;\nInterface ConsumerInterceptor<K,V>; // A plugin interface that allows you to intercept (and possibly mutate) records received by the consumer.\nInterface ConsumerPartitionAssignor; // This interface is used to define custom partition assignment for use in KafkaConsumer.\nInterface ConsumerRebalanceListener; // A callback interface that the user can implement to trigger custom actions when the set of partitions assigned to the consumer changes.\nInterface OffsetCommitCallback; // A callback interface that the user can implement to trigger custom actions when a commit request completes.\nClass ConsumerConfig; // The consumer configuration keys\nClass ConsumerGroupMetadata; // A metadata struct containing the consumer group information.\nClass ConsumerPartitionAssignor.Assignment;\nClass ConsumerPartitionAssignor.GroupAssignment;\nClass ConsumerPartitionAssignor.GroupSubscription;\nClass ConsumerPartitionAssignor.Subscription;\nClass ConsumerRecord<K,V>; // A key/value pair to be received from Kafka.\nClass ConsumerRecords<K,V>; // A container that holds the list ConsumerRecord per partition for a particular topic.\nClass CooperativeStickyAssignor; // A cooperative version of the AbstractStickyAssignor.\nClass KafkaConsumer<K,V>; // A client that consumes records from a Kafka cluster.\nClass MockConsumer<K,V>; // A mock of the Consumer interface you can use for testing code that uses Kafka.\nClass OffsetAndMetadata; // The Kafka offset commit API allows users to provide additional metadata (in the form of a string) when an offset is committed.\nClass OffsetAndTimestamp; // A container class for offset and timestamp.\nClass RangeAssignor; // The range assignor works on a per-topic basis.\nClass RoundRobinAssignor; // The round robin assignor lays out all the available partitions and all the available consumers.\nClass StickyAssignor; // The sticky assignor serves two purposes.\nEnum ConsumerPartitionAssignor.RebalanceProtocol; // The rebalance protocol defines partition assignment and revocation semantics.\nEnum OffsetResetStrategy;\nClass CommitFailedException; // This exception is raised when an offset commit with KafkaConsumer.commitSync() fails with an unrecoverable error.\nClass InvalidOffsetException; // Thrown when the offset for a set of partitions is invalid (either undefined or out of range), and no reset policy has been configured.\n", "des": "Provides a Kafka client for consuming records from topics and/or partitions in a Kafka cluster."}
{"index": 3782, "repo": "lucene-analysis-common-9.7.0", "code": "package es;\n\nClass SpanishAnalyzer; // Analyzer for Spanish.\nClass SpanishLightStemFilter; // A TokenFilter that applies SpanishLightStemmer to stem Spanish words.\nClass SpanishLightStemFilterFactory; // Factory for SpanishLightStemFilter.\nClass SpanishLightStemmer; // Light Stemmer for Spanish\nClass SpanishMinimalStemFilter;\nClass SpanishMinimalStemFilterFactory;\nClass SpanishMinimalStemmer;\nClass SpanishPluralStemFilter; // A TokenFilter that applies SpanishPluralStemmer to stem Spanish words.\nClass SpanishPluralStemFilterFactory; // Factory for SpanishPluralStemFilterFactory.\nClass SpanishPluralStemmer; // Plural Stemmer for Spanish\n", "des": "Analyzer for Spanish."}
{"index": 3300, "repo": "opencms-core-15.0", "code": "package newsletter;\n\nInterface I_CmsNewsletter; // Interface for the newsletter.\nInterface I_CmsNewsletterContent; // Every I_CmsNewsletter contains a list of I_CmsNewsletterContent objects.\nInterface I_CmsNewsletterRecipient; // Interface for recipients of I_CmsNewsletter objects.\nClass CmsNewsletter; // Basic implementation of the interface I_CmsNewsletter.\nClass CmsNewsletterContent; // Content for newsletters.\nClass CmsNewsletterContentType; // Type definition class for email content types.\nClass CmsNewsletterDistributor; // A content distributor that sends the extracted xmlcontent data to the recepient via email.\nClass CmsSimpleNewsletterRecipient; // Simple implementation of interface I_CmsNewsletterRecipient, with I_CmsNewsletterRecipient.isSubscriber(org.opencms.newsletter.I_CmsNewsletterContent) always returning true.\n", "des": "Contains classes to distribute newsletters."}
{"index": 3106, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package boot;\n\npackage boot.registry; // Defines service registry contracts application are likely to want to utilize for configuring Hibernate behavior.\npackage boot.xsd; // Support for XSD handling, specifically for ORM mappings (Hibernate's `hbm.xml` and JPA's `orm.xml`) and config files (Hibernate's `cfg.xml` and JPA's `persistence.xml`)\nInterface AttributeConverterInfo; // Delayed information about an AttributeConverter.\nInterface Metadata; // Represents the ORM model as determined from all provided mapping sources.\nInterface MetadataBuilder; // Contract for specifying various overrides to be used in metamodel building.\nInterface SessionFactoryBuilder; // The contract for building a SessionFactory given a number of options.\nClass CacheRegionDefinition; // Models the definition of caching settings for a particular region.\nClass JaccPermissionDefinition;\nClass MetadataSources; // Entry point into working with sources of metadata information (mapping XML, annotations).\nEnum CacheRegionDefinition.CacheRegionType;\nEnum SchemaAutoTooling; // Defines the possible values for \"hbm2ddl_auto\"\nEnum TempTableDdlTransactionHandling; // Enum describing how creation and dropping of temporary tables should be done in terms of transaction handling.\nClass InvalidMappingException;\nClass MappingException; // Indicates a problem parsing a mapping document.\nClass MappingNotFoundException;\nClass UnsupportedOrmXsdVersionException;\n", "des": "This package contains the contracts that make up the Hibernate native bootstrapping API (building a SessionFactory)."}
{"index": 3690, "repo": "solr-core-9.3.0", "code": "package facet;\n\nInterface FieldUtil.OrdFunc; // The following ord visitors and wrappers are a work in progress and experimental\nInterface UnInvertedField.Callback;\nClass AggUtil;\nClass AggValueSource;\nClass AvgAgg;\nClass BlockJoin;\nClass Constants; // constants used in facets package\nClass CountAgg;\nClass CountValsAgg; // AggValueSource to count values for given ValueSource\nClass DocValuesAcc; // Accumulates stats separated by slot number for the fields with DocValues\nClass FacetBucket;\nClass FacetContext;\nClass FacetDebugInfo;\nClass FacetField;\nClass FacetFieldMerger;\nClass FacetHeatmap; // JSON Facet API request for a 2D spatial summary of a rectangular region.\nClass FacetMerger;\nClass FacetMerger.Context;\nClass FacetModule;\nClass FacetProcessor<T extends FacetRequest>; // Base abstraction for a class that computes facets.\nClass FacetQuery;\nClass FacetRange;\nClass FacetRangeMerger;\nClass FacetRequest; // A request to do facets/stats that might itself be composed of sub-FacetRequests.\nClass FacetRequest.Domain;\nClass FacetRequest.Domain.GraphField; // Are we doing a query time graph across other documents\nClass FacetRequest.Domain.JoinField; // Are we doing a query time join across other documents\nClass FacetRequest.FacetSort; // Simple structure for encapsulating a sort variable and a direction\nClass FieldUtil;\nClass FieldUtil.DVOrdValues;\nClass FieldUtil.FCOrdValues;\nClass FieldUtil.OrdValues;\nClass HLLAgg;\nClass HLLAgg.HLLFactory;\nClass LegacyFacet;\nClass LegacyFacet.Subfacet;\nClass MinMaxAgg;\nClass MissingAgg; // AggValueSource to compute missing counts for given ValueSource\nClass PercentileAgg;\nClass PercentileAgg.Parser;\nClass RelatednessAgg; // An aggregation function designed to be nested under other (possibly deeply nested) facets for the purposes of computing the \"relatedness\" of facet buckets relative to \"foreground\" and \"background\" sets -- primarily for the purpose of building \"Semantic Knowledge Graphs\"\nClass SimpleAggValueSource;\nClass SlotAcc; // Accumulates statistics separated by a slot number.\n", "des": "APIs and classes for the JSON Facet API."}
{"index": 2252, "repo": "spring-data-keyvalue-3.1.2", "code": "package config;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(MapRepositoriesRegistrar.class) @QueryCreatorType(value=SpelQueryCreator.class, repositoryQueryType=CachingKeyValuePartTreeQuery.class) public @interface EnableMapRepositories; // Annotation to activate Map repositories.\npublic class MapRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport; // Map specific RepositoryBeanDefinitionRegistrarSupport implementation.\npublic class MapRepositoryConfigurationExtension extends KeyValueRepositoryConfigurationExtension;\n", "des": "Support infrastructure for the configuration of Map repositories."}
{"index": 577, "repo": "commons-collections-3.2.2", "code": "package buffer;\n\nClass AbstractBufferDecorator; // Decorates another Buffer to provide additional behaviour.\nClass BlockingBuffer; // Decorates another Buffer to make BlockingBuffer.get() and BlockingBuffer.remove() block when the Buffer is empty.\nClass BoundedBuffer; // Decorates another Buffer to ensure a fixed maximum size.\nClass BoundedFifoBuffer; // The BoundedFifoBuffer is a very efficient implementation of Buffer that is of a fixed size.\nClass CircularFifoBuffer; // CircularFifoBuffer is a first in first out buffer with a fixed size that replaces its oldest element if full.\nClass PredicatedBuffer; // Decorates another Buffer to validate that additions match a specified predicate.\nClass PriorityBuffer; // Binary heap implementation of Buffer that provides for removal based on Comparator ordering.\nClass SynchronizedBuffer; // Decorates another Buffer to synchronize its behaviour for a multi-threaded environment.\nClass TransformedBuffer; // Decorates another Buffer to transform objects that are added.\nClass TypedBuffer; // Decorates another Buffer to validate that elements added are of a specific type.\nClass UnboundedFifoBuffer; // UnboundedFifoBuffer is a very efficient implementation of Buffer that can grow to any size.\nClass UnmodifiableBuffer; // Decorates another Buffer to ensure it can't be altered.\n", "des": "This package contains implementations of the Buffer interface."}
{"index": 784, "repo": "lucene-analyzers-common-8.11.2", "code": "package hunspell;\n\nInterface DictEntries; // An object representing homonym dictionary entries.\nClass Dictionary; // In-memory structure for the dictionary (.dic) and affix (.aff) data of a hunspell dictionary.\nClass Hunspell; // A spell checker based on Hunspell dictionaries.\nClass HunspellStemFilter; // TokenFilter that uses hunspell affix rules and words to stem tokens.\nClass HunspellStemFilterFactory; // TokenFilterFactory that creates instances of HunspellStemFilter.\nEnum TimeoutPolicy; // A strategy determining what to do when Hunspell API calls take too much time\nClass SuggestionTimeoutException; // An exception thrown when Hunspell.suggest(java.lang.String) call takes too long, if TimeoutPolicy.THROW_EXCEPTION is used.\n", "des": "A Java implementation of Hunspell stemming and spell-checking algorithms (Hunspell), and a stemming TokenFilter (HunspellStemFilter) based on it."}
{"index": 2025, "repo": "spring-messaging-6.0.11", "code": "package core;\n\npublic abstract class AbstractDestinationResolvingMessagingTemplate<D> extends AbstractMessagingTemplate<D> implements DestinationResolvingMessageSendingOperations<D>, DestinationResolvingMessageReceivingOperations<D>, DestinationResolvingMessageRequestReplyOperations<D>; // An extension of AbstractMessagingTemplate that adds operations for sending messages to a resolvable destination name.\npublic abstract class AbstractMessageReceivingTemplate<D> extends AbstractMessageSendingTemplate<D> implements MessageReceivingOperations<D>; // An extension of AbstractMessageSendingTemplate that adds support for receive style operations as defined by MessageReceivingOperations.\npublic abstract class AbstractMessageSendingTemplate<D> extends Object implements MessageSendingOperations<D>; // Abstract base class for implementations of MessageSendingOperations.\npublic abstract class AbstractMessagingTemplate<D> extends AbstractMessageReceivingTemplate<D> implements MessageRequestReplyOperations<D>; // An extension of AbstractMessageReceivingTemplate that adds support for request-reply style operations as defined by MessageRequestReplyOperations.\npublic class BeanFactoryMessageChannelDestinationResolver extends Object implements DestinationResolver<MessageChannel>, org.springframework.beans.factory.BeanFactoryAware; // An implementation of DestinationResolver that interprets a destination name as the bean name of a MessageChannel and looks up the bean in the configured BeanFactory.\npublic class CachingDestinationResolverProxy<D> extends Object implements DestinationResolver<D>, org.springframework.beans.factory.InitializingBean; // DestinationResolver implementation that proxies a target DestinationResolver, caching its CachingDestinationResolverProxy.resolveDestination(java.lang.String) results.\npublic class DestinationResolutionException extends MessagingException; // Thrown by a DestinationResolver when it cannot resolve a destination.\n@FunctionalInterface public interface DestinationResolver<D>; // Strategy for resolving a String destination name to an actual destination of type <D>.\npublic interface DestinationResolvingMessageReceivingOperations<D> extends MessageReceivingOperations<D>; // Extends MessageReceivingOperations and adds operations for receiving messages from a destination specified as a (resolvable) String name.\npublic interface DestinationResolvingMessageRequestReplyOperations<D> extends MessageRequestReplyOperations<D>; // Extends MessageRequestReplyOperations and adds operations for sending and receiving messages to and from a destination specified as a (resolvable) String name.\n", "des": "Defines interfaces and implementation classes for messaging templates."}
{"index": 1921, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package web;\n\n@AutoConfiguration(after=RepositoryRestMvcAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({org.springframework.data.web.PageableHandlerMethodArgumentResolver.class,org.springframework.web.servlet.config.annotation.WebMvcConfigurer.class}) @ConditionalOnMissingBean(org.springframework.data.web.PageableHandlerMethodArgumentResolver.class) @EnableConfigurationProperties(SpringDataWebProperties.class) public class SpringDataWebAutoConfiguration extends Object; // Auto-configuration for Spring Data's web support.\n@ConfigurationProperties(\"spring.data.web\") public class SpringDataWebProperties extends Object; // Configuration properties for Spring Data Web.\npublic static class SpringDataWebProperties.Pageable extends Object; // Pageable properties.\npublic static class SpringDataWebProperties.Sort extends Object; // Sort properties.\n", "des": "Auto-configuration for Spring Data's Web Support."}
{"index": 435, "repo": "kafka-streams-3.5.0", "code": "package state;\n\nInterface KeyValueBytesStoreSupplier; // A store supplier that can be used to create one or more KeyValueStore<Bytes, byte[]> instances of type <Bytes, byte[]>.\nInterface KeyValueIterator<K,V>; // Iterator interface of KeyValue.\nInterface KeyValueStore<K,V>; // A key-value store that supports put/get/delete and range queries.\nInterface QueryableStoreType<T>; // Used to enable querying of custom StateStore types via the KafkaStreams API.\nInterface ReadOnlyKeyValueStore<K,V>; // A key-value store that only supports read operations.\nInterface ReadOnlySessionStore<K,AGG>; // A session store that only supports read operations.\nInterface ReadOnlyWindowStore<K,V>; // A window store that only supports read operations.\nInterface RocksDBConfigSetter; // An interface to that allows developers to customize the RocksDB settings for a given Store.\nInterface SessionBytesStoreSupplier; // A store supplier that can be used to create one or more SessionStore<Byte, byte[]> instances.\nInterface SessionStore<K,AGG>; // Interface for storing the aggregated values of sessions.\nInterface StoreBuilder<T extends StateStore>; // Build a StateStore wrapped with optional caching and logging.\nInterface StoreSupplier<T extends StateStore>; // A state store supplier which can create one or more StateStore instances.\nInterface TimestampedBytesStore;\nInterface TimestampedKeyValueStore<K,V>; // A key-(value/timestamp) store that supports put/get/delete and range queries.\nInterface TimestampedWindowStore<K,V>; // Interface for storing the aggregated values of fixed-size time windows.\nInterface VersionedBytesStore; // A representation of a versioned key-value store as a KeyValueStore of type <Bytes, byte[]>.\nInterface VersionedBytesStoreSupplier; // A store supplier that can be used to create one or more versioned key-value stores, specifically, VersionedBytesStore instances.\nInterface VersionedKeyValueStore<K,V>; // A key-value store that stores multiple record versions per key, and supports timestamp-based retrieval operations to return the latest record (per key) as of a specified timestamp.\n", "des": "Provides interfaces for managing the intermediate state of a stateful streams application."}
{"index": 221, "repo": "nutch-2.4", "code": "package proxy;\n\nClass AbstractTestbedHandler;\nClass DelayHandler;\nClass FakeHandler;\nClass LogDebugHandler;\nClass NotFoundHandler;\nClass TestbedProxy;\nEnum FakeHandler.Mode; // Create links to hosts generated from a pool of numHosts/numPages random names.\n", "des": "Proxy to benchmark the crawler."}
{"index": 97, "repo": "ignite-core-2.15.0", "code": "package vm;\n\nClass TcpDiscoveryVmIpFinder; // IP Finder which works only with pre-configured list of IP addresses specified via TcpDiscoveryVmIpFinder.setAddresses(Collection) method.\n", "des": "Contains local JVM-based IP finder."}
{"index": 3027, "repo": "spring-web-6.0.11", "code": "package annotation;\n\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Scope(\"application\") public @interface ApplicationScope; // @ApplicationScope is a specialization of @Scope for a component whose lifecycle is bound to the current web application.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Scope(\"request\") public @interface RequestScope; // @RequestScope is a specialization of @Scope for a component whose lifecycle is bound to the current web request.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Scope(\"session\") public @interface SessionScope; // @SessionScope is a specialization of @Scope for a component whose lifecycle is bound to the current web session.\n", "des": "Provides convenience annotations for web scopes."}
{"index": 3617, "repo": "solr-test-framework-9.3.0", "code": "package analysis;\n\nClass MockCharFilterFactory; // Factory for MockCharFilter for testing purposes.\nClass MockTokenFilterFactory; // Factory for MockTokenFilter for testing purposes.\nClass MockTokenizerFactory; // Factory for MockTokenizer for testing purposes.\n", "des": "Factories for Mock analysis classes that can be used in test configurations."}
{"index": 647, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package impl;\n\nClass MemoryFederationStateStore; // In-memory implementation of FederationStateStore.\nClass SQLFederationStateStore; // SQL implementation of FederationStateStore.\nClass ZookeeperFederationStateStore; // ZooKeeper implementation of FederationStateStore.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 862, "repo": "calcite-core-1.34.0", "code": "package fun;\n\nClass OracleSqlOperatorTable; // Use SqlLibraryOperatorTableFactory.getOperatorTable(SqlLibrary...) instead, passing SqlLibrary.ORACLE as argument.\nClass SqlAbstractGroupFunction; // Base class for grouping functions GROUP_ID, GROUPING_ID, GROUPING.\nClass SqlAbstractTimeFunction; // Base class for time functions such as \"LOCALTIME\", \"LOCALTIME(n)\".\nClass SqlAnyValueAggFunction; // Definition of the ANY_VALUE aggregate functions, returning any one of the values which go into it.\nClass SqlArrayQueryConstructor; // Definition of the SQL:2003 standard ARRAY query constructor, ARRAY (<query>).\nClass SqlArrayValueConstructor; // Definition of the SQL:2003 standard ARRAY constructor, ARRAY [<expr>, ...].\nClass SqlAvgAggFunction; // Avg is an aggregator which returns the average of the values which go into it.\nClass SqlBaseContextVariable; // Base class for functions such as \"USER\", \"CURRENT_ROLE\", and \"CURRENT_PATH\".\nClass SqlBasicAggFunction; // Concrete implementation of SqlAggFunction.\nClass SqlBetweenOperator; // Defines the BETWEEN operator.\nClass SqlBitOpAggFunction; // Definition of the BIT_AND and BIT_OR aggregate functions, returning the bitwise AND/OR of all non-null input values, or null if none.\nClass SqlCase; // A SqlCase is a node of a parse tree which represents a case statement.\nClass SqlCaseOperator; // An operator describing a CASE, NULLIF or COALESCE expression.\nClass SqlCastFunction; // SqlCastFunction.\nClass SqlCoalesceFunction; // The COALESCE function.\nClass SqlCollectionTableOperator; // SqlCollectionTableOperator is the \"table function derived table\" operator.\nClass SqlColumnListConstructor; // SqlColumnListConstructor defines the non-standard constructor used to pass a COLUMN_LIST parameter to a UDX.\nClass SqlConvertFunction; // Common base for the CONVERT and TRANSLATE functions.\nClass SqlCountAggFunction; // Definition of the SQL COUNT aggregation function.\nClass SqlCovarAggFunction; // Covar is an aggregator which returns the Covariance of the values which go into it.\nClass SqlCurrentDateFunction; // The CURRENT_DATE function.\n", "des": "Defines the set of standard SQL row-level functions and operators."}
{"index": 9, "repo": "connect-api-3.5.0", "code": "package source;\n\nInterface SourceConnectorContext; // A context to allow a SourceConnector to interact with the Kafka Connect runtime.\nInterface SourceTaskContext; // SourceTaskContext is provided to SourceTasks to allow them to interact with the underlying runtime.\nInterface TransactionContext; // Provided to source tasks to allow them to define their own producer transaction boundaries when exactly-once support is enabled.\nClass SourceConnector; // SourceConnectors implement the connector interface to pull data from another system and send it to Kafka.\nClass SourceRecord; // SourceRecords are generated by SourceTasks and passed to Kafka Connect for storage in Kafka.\nClass SourceTask; // SourceTask is a Task that pulls records from another system for storage in Kafka.\nEnum ConnectorTransactionBoundaries; // An enum to represent the level of support for connector-defined transaction boundaries.\nEnum ExactlyOnceSupport; // An enum to represent the level of support for exactly-once semantics from a source connector.\nEnum SourceTask.TransactionBoundary; // Represents the permitted values for the SourceTask.TRANSACTION_BOUNDARY_CONFIG property.\n", "des": "Provides an API for implementing source connectors which read data from external applications into Kafka."}
{"index": 1425, "repo": "spring-boot-actuator-3.1.1", "code": "package server;\n\n@Deprecated(since=\"3.0.0\", forRemoval=true) public class DefaultWebFluxTagsProvider extends Object implements WebFluxTagsProvider;\n@Deprecated(since=\"3.0.0\", forRemoval=true) public final class WebFluxTags extends Object;\n@FunctionalInterface @Deprecated(since=\"3.0.0\", forRemoval=true) public interface WebFluxTagsContributor;\n@FunctionalInterface @Deprecated(since=\"3.0.0\", forRemoval=true) public interface WebFluxTagsProvider;\n", "des": "Actuator support for WebFlux metrics."}
{"index": 2967, "repo": "pulsar-broker-3.0.0", "code": "package intercept;\n\n@LimitedPrivate @Evolving public interface BrokerInterceptor extends AutoCloseable; // A plugin interface that allows you to intercept the client requests to the Pulsar brokers.\npublic class BrokerInterceptorDefinition extends Object; // Metadata information about a broker interceptor.\npublic class BrokerInterceptorDefinitions extends Object; // The collection of broker interceptor.\npublic class BrokerInterceptorMetadata extends Object; // The metadata of broker interceptor.\npublic class BrokerInterceptors extends Object implements BrokerInterceptor; // A collection of broker interceptor.\npublic class BrokerInterceptorUtils extends Object; // Util class to search and load BrokerInterceptors.\npublic class BrokerInterceptorWithClassLoader extends Object implements BrokerInterceptor; // A broker interceptor with it's classloader.\npublic class ManagedLedgerInterceptorImpl extends Object implements ManagedLedgerInterceptor;\n", "des": "Pulsar broker interceptor."}
{"index": 3373, "repo": "opencms-core-15.0", "code": "package threads;\n\nClass A_CmsProgressThread; // Abstract thread to keep track of operation progress.\nClass CmsDatabaseImportThread; // Imports an OpenCms export file into the VFS.\nClass CmsExportThread; // Exports selected resources of the OpenCms into an OpenCms export file.\nClass CmsExternalLinksValidatorThread; // Thread for extern link validation.\nClass CmsModuleDeleteThread; // Deletes a module.\nClass CmsModuleReplaceThread; // Replaces a module.\nClass CmsProjectDeleteThread; // Deletes a project.\nClass CmsRelationsValidatorThread; // A report thread for the relations validator.\nClass CmsSynchronizeThread; // Synchronizes a VFS folder with a folder form the \"real\" file system.\nClass CmsXmlContentRepairSettings; // Settings object that provides the settings to repair XML content resources in the OpenCms virtual file system (VFS).\nClass CmsXmlContentRepairThread; // Repairs XML content resources according to their XSD using the corresponding settings object.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "A collection of thread classes that are used in the OpenCms Workplace, usually in connection with a report."}
{"index": 1212, "repo": "commons-math3-3.6.1", "code": "package interval;\n\nInterface BinomialConfidenceInterval; // Interface to generate confidence intervals for a binomial proportion.\nClass AgrestiCoullInterval; // Implements the Agresti-Coull method for creating a binomial proportion confidence interval.\nClass ClopperPearsonInterval; // Implements the Clopper-Pearson method for creating a binomial proportion confidence interval.\nClass ConfidenceInterval; // Represents an interval estimate of a population parameter.\nClass IntervalUtils; // Factory methods to generate confidence intervals for a binomial proportion.\nClass NormalApproximationInterval; // Implements the normal approximation method for creating a binomial proportion confidence interval.\nClass WilsonScoreInterval; // Implements the Wilson score method for creating a binomial proportion confidence interval.\n", "des": "Classes providing binomial proportion confidence interval construction."}
{"index": 2291, "repo": "spring-boot-3.1.1", "code": "package builder;\n\npublic class ParentContextApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>, org.springframework.core.Ordered; // ApplicationContextInitializer for setting the parent context.\npublic static class ParentContextApplicationContextInitializer.ParentContextAvailableEvent extends org.springframework.context.ApplicationEvent; // ApplicationEvent fired when a parent context is available.\npublic class ParentContextCloserApplicationListener extends Object implements org.springframework.context.ApplicationListener<ParentContextApplicationContextInitializer.ParentContextAvailableEvent>, org.springframework.context.ApplicationContextAware, org.springframework.core.Ordered; // Listener that closes the application context if its parent is closed.\nprotected static class ParentContextCloserApplicationListener.ContextCloserListener extends Object implements org.springframework.context.ApplicationListener<org.springframework.context.event.ContextClosedEvent>; // ApplicationListener to close the context.\npublic class SpringApplicationBuilder extends Object; // Builder for SpringApplication and ApplicationContext instances with convenient fluent API and context hierarchy support.\n", "des": "Fluent 'builder' style API to construct a SpringApplication."}
{"index": 872, "repo": "calcite-core-1.34.0", "code": "package util;\n\npackage util.format; // Utility classes for handling format strings.\npackage util.graph; // Graph-theoretic algorithms and data structures.\npackage util.javac; // Provides compilers for Java code.\npackage util.mapping; // Support for algebraic maps.\npackage util.trace; // Tracing services.\nInterface CalciteParserException; // Tagging interface to allow a SqlParseException to be identified without adding a dependency on it from client-side code.\nInterface CalciteValidatorException; // Tagging interface to allow a SqlValidatorException to be identified without adding a dependency on it from client-side code.\nInterface Compatible; // Compatibility layer.\nInterface Glossary; // A collection of terms.\nInterface JdbcType<T>; // Maps Java types to their corresponding getters in JDBC.\nInterface Litmus; // Callback to be called when a test for validity succeeds or fails.\nInterface PartiallyOrderedSet.Ordering<E>; // Ordering relation.\nInterface PrecedenceClimbingParser.Special; // Callback defining the behavior of a special function.\nInterface RangeSets.Consumer<C extends Comparable<C>>; // Consumer of Range values.\nInterface RangeSets.Handler<C extends Comparable<C>,R>; // Deconstructor for Range values.\nInterface ReflectiveVisitDispatcher<R extends ReflectiveVisitor,E>; // Interface for looking up methods relating to reflective visitation.\nInterface ReflectiveVisitor; // Object which can be a target for a reflective visitation (see ReflectUtil.invokeVisitor(ReflectiveVisitor, Object, Class, String).\nInterface ReflectUtil.MethodDispatcher<T>; // Can invoke a method on an object of type E with return type T.\nInterface SaffronProperties; // As of release 1.19, replaced by CalciteSystemProperty\nInterface Source; // Source of data.\nInterface TryThreadLocal.Memo; // Remembers to set the value back.\nClass BarfingInvocationHandler; // A class derived from BarfingInvocationHandler handles a method call by looking for a method in itself with identical parameters.\nClass Benchmark; // Helps to run benchmarks by running the same task repeatedly and averaging the running times.\nClass Benchmark.Statistician; // Collects statistics for a test that is run multiple times.\n", "des": "Provides utility classes."}
{"index": 101, "repo": "ignite-core-2.15.0", "code": "package jobstealing;\n\nInterface JobStealingFailoverSpiMBean; // Management bean for JobStealingFailoverSpi.\nClass JobStealingFailoverSpi; // Job stealing failover SPI needs to always be used in conjunction with JobStealingCollisionSpi SPI.\n", "des": "Contains job stealing failover SPI."}
{"index": 2680, "repo": "spring-data-jpa-3.1.2", "code": "package threeten;\n\npublic class Jsr310JpaConverters extends Object; // JPA 2.1 converters to turn JSR-310 types into legacy Dates.\npublic static class Jsr310JpaConverters.InstantConverter extends Object implements jakarta.persistence.AttributeConverter<Instant,Timestamp>;\npublic static class Jsr310JpaConverters.LocalDateConverter extends Object implements jakarta.persistence.AttributeConverter<LocalDate,Date>;\npublic static class Jsr310JpaConverters.LocalDateTimeConverter extends Object implements jakarta.persistence.AttributeConverter<LocalDateTime,Date>;\npublic static class Jsr310JpaConverters.LocalTimeConverter extends Object implements jakarta.persistence.AttributeConverter<LocalTime,Date>;\npublic static class Jsr310JpaConverters.ZoneIdConverter extends Object implements jakarta.persistence.AttributeConverter<ZoneId,String>;\n", "des": "Spring Data JPA specific JSR-310 converters."}
{"index": 2363, "repo": "spring-boot-3.1.1", "code": "package view;\n\npublic class MustacheView extends org.springframework.web.servlet.view.AbstractTemplateView; // Spring MVC View using the Mustache template engine.\npublic class MustacheViewResolver extends org.springframework.web.servlet.view.AbstractTemplateViewResolver; // Spring MVC ViewResolver for Mustache.\n", "des": "Additional Views for use with Web MVC."}
{"index": 381, "repo": "mahout-core-14.1", "code": "package math;\n\nClass Arithmetic; // Arithmetic functions.\nClass Constants; // Defines some useful constants.\nClass Polynomial; // Polynomial functions.\n", "des": "Tools for basic and advanced mathematics: Arithmetics and Algebra, Polynomials and Chebyshev series, Bessel and Airy functions, Function Objects for generic function evaluation, etc."}
{"index": 2956, "repo": "spring-integration-xml-6.1.2", "code": "package support;\n\npublic class XPathExpressionEvaluatingHeaderValueMessageProcessor extends Object implements org.springframework.integration.transformer.support.HeaderValueMessageProcessor<Object>, org.springframework.beans.factory.BeanFactoryAware; // The xPath-specific HeaderValueMessageProcessor\n", "des": "Contains support classes for Transformers."}
{"index": 2352, "repo": "spring-boot-3.1.1", "code": "package filter;\n\npublic class OrderedHiddenHttpMethodFilter extends org.springframework.web.filter.reactive.HiddenHttpMethodFilter implements OrderedWebFilter; // HiddenHttpMethodFilter that also implements Ordered.\npublic interface OrderedWebFilter extends org.springframework.web.server.WebFilter, org.springframework.core.Ordered; // An Ordered WebFilter.\n", "des": "Spring Boot specific WebFilter implementations."}
{"index": 2518, "repo": "spring-security-core-6.1.2", "code": "package method;\n\npublic class DefaultMethodSecurityExpressionHandler extends AbstractSecurityExpressionHandler<org.aopalliance.intercept.MethodInvocation> implements MethodSecurityExpressionHandler; // The standard implementation of MethodSecurityExpressionHandler.\n@Deprecated public class ExpressionBasedAnnotationAttributeFactory extends Object implements PrePostInvocationAttributeFactory;\n@Deprecated public class ExpressionBasedPostInvocationAdvice extends Object implements PostInvocationAuthorizationAdvice;\n@Deprecated public class ExpressionBasedPreInvocationAdvice extends Object implements PreInvocationAuthorizationAdvice;\npublic interface MethodSecurityExpressionHandler extends SecurityExpressionHandler<org.aopalliance.intercept.MethodInvocation>; // Extended expression-handler facade which adds methods which are specific to securing method invocations.\npublic interface MethodSecurityExpressionOperations extends SecurityExpressionOperations; // Interface which must be implemented if you want to use filtering in method security expressions.\n", "des": "Implementation of expression-based method security."}
{"index": 1983, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package ssl;\n\npublic class JksSslBundleProperties extends SslBundleProperties; // SslBundleProperties for Java keystores.\npublic static class JksSslBundleProperties.Store extends Object; // Store properties.\npublic class PemSslBundleProperties extends SslBundleProperties; // SslBundleProperties for PEM-encoded certificates and private keys.\npublic static class PemSslBundleProperties.Store extends Object; // Store properties.\npublic final class PropertiesSslBundle extends Object implements org.springframework.boot.ssl.SslBundle; // SslBundle backed by JksSslBundleProperties or PemSslBundleProperties.\n@AutoConfiguration @EnableConfigurationProperties(SslProperties.class) public class SslAutoConfiguration extends Object; // Auto-configuration for SSL.\npublic abstract class SslBundleProperties extends Object; // Base class for SSL Bundle properties.\npublic static class SslBundleProperties.Key extends Object;\npublic static class SslBundleProperties.Options extends Object;\n@FunctionalInterface public interface SslBundleRegistrar; // Interface to be implemented by types that register SslBundle instances with an SslBundleRegistry.\n@ConfigurationProperties(prefix=\"spring.ssl\") public class SslProperties extends Object; // Properties for centralized SSL trust material configuration.\npublic static class SslProperties.Bundles extends Object; // Properties to define SSL Bundles.\n", "des": "Auto-configuration for SSL bundles."}
{"index": 1904, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package codec;\n\n@ConfigurationProperties(prefix=\"spring.codec\") public class CodecProperties extends Object; // properties for reactive codecs.\n", "des": "Auto-configuration for reactive codecs."}
{"index": 318, "repo": "kafka-clients-3.5.0", "code": "package common;\n\npackage common.acl; // Provides classes representing Access Control Lists for authorization of clients\npackage common.annotation; // Provides annotations used on Kafka APIs.\npackage common.config; // Provides common mechanisms for defining, parsing, validating, and documenting user-configurable parameters.\npackage common.errors; // Provides common exception classes.\npackage common.header; // Provides API for application-defined metadata attached to Kafka records.\npackage common.metrics; // Provides the API used by Kafka clients to emit metrics which are then exposed using the * MetricsReporter interface.\npackage common.quota; // Provides mechanisms for enforcing resource quotas.\npackage common.resource; // Provides client handles representing logical resources in a Kafka cluster.\npackage common.serialization; // Provides interface and some implementations of serialization/deserialization routines for various objects.\nInterface ClusterResourceListener; // A callback interface that users can implement when they wish to get notified about changes in the Cluster metadata.\nInterface Configurable; // A Mix-in style interface for classes that are instantiated by reflection and need to take configuration parameters\nInterface KafkaFuture.BaseFunction<A,B>; // A function which takes objects of type A and returns objects of type B.\nInterface KafkaFuture.BiConsumer<A,B>; // A consumer of two different types of object.\nInterface MessageFormatter; // This interface allows to define Formatters that can be used to parse and format records read by a Consumer instance for display.\nInterface Metric; // A metric tracked for monitoring purposes.\nInterface Reconfigurable; // Interface for reconfigurable classes that support dynamic configuration.\nClass Cluster; // An immutable representation of a subset of the nodes, topics, and partitions in the Kafka cluster.\nClass ClusterResource; // The ClusterResource class encapsulates metadata for a Kafka cluster.\nClass Endpoint; // Represents a broker endpoint.\nClass KafkaFuture<T>; // A flexible future which supports call chaining and other asynchronous programming patterns.\nClass KafkaFuture.Function<A,B>; // Since Kafka 3.0.\nClass MetricName; // The MetricName class encapsulates a metric's name, logical group and its related attributes.\nClass MetricNameTemplate; // A template for a MetricName.\nClass Node; // Information about a Kafka node\nClass PartitionInfo; // This is used to describe per-partition state in the MetadataResponse.\n", "des": "Provides shared functionality for Kafka clients and servers."}
{"index": 2382, "repo": "spring-batch-core-5.0.2", "code": "package annotation;\n\npublic class BatchObservabilityBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.beans.factory.config.BeanPostProcessor; // Bean post processor that configures observable batch artifacts (jobs and steps) with Micrometer's observation registry.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import({org.springframework.batch.core.configuration.annotation.BatchRegistrar.class,ScopeConfiguration.class,org.springframework.batch.core.configuration.annotation.AutomaticJobRegistrarBeanPostProcessor.class,BatchObservabilityBeanPostProcessor.class}) public @interface EnableBatchProcessing; // Enable Spring Batch features and provide a base configuration for setting up batch jobs in an @Configuration class, roughly equivalent to using the <batch:*> XML namespace.\n@Deprecated(since=\"5.0.0\", forRemoval=true) public class JobBuilderFactory extends Object;\n@Scope(value=\"job\", proxyMode=TARGET_CLASS) @Retention(RUNTIME) @Documented public @interface JobScope; // Convenient annotation for job-scoped beans that defaults the proxy mode, so that it does not have to be specified explicitly on every bean definition.\n@Deprecated(since=\"5.0.0\", forRemoval=true) public class StepBuilderFactory extends Object;\n@Scope(value=\"step\", proxyMode=TARGET_CLASS) @Retention(RUNTIME) @Documented public @interface StepScope; // Convenient annotation for step-scoped beans.\n", "des": "Annotations and builder factories for java based configuration"}
{"index": 268, "repo": "nutch-2.4", "code": "package subcollection;\n\nClass SubcollectionIndexingFilter;\n", "des": "Indexing filter to assign documents to subcollections."}
{"index": 519, "repo": "commons-vfs2-2.9.0", "code": "package ftps;\n\nClass FtpsClientFactory; // Create FTPSClient instances.\nClass FtpsFileProvider; // A provider for FTP file systems.\nClass FtpsFileSystem; // A FTPS file system.\nClass FtpsFileSystemConfigBuilder; // The configuration builder for various FTPS configuration options.\nEnum FtpsDataChannelProtectionLevel; // Protection level of the data channel in a FTPS communication.\nEnum FtpsMode; // Mode of the FTPS connection.\n", "des": "The FTPS File Provider."}
{"index": 602, "repo": "org.apache.karaf.main-2.4.4", "code": "package bundle;\n\nInterface CollisionHook; // OSGi Framework Bundle Collision Hook Service.\nInterface EventHook; // OSGi Framework Bundle Event Hook Service.\nInterface FindHook; // OSGi Framework Bundle Context Hook Service.\n", "des": "Framework Bundle Hooks Package Version 1.1."}
{"index": 2435, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package reactive;\n\n@ManagementContextConfiguration(proxyBeanMethods=false) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnClass({org.springframework.web.reactive.DispatcherHandler.class,org.springframework.http.server.reactive.HttpHandler.class}) @ConditionalOnBean(org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier.class) @EnableConfigurationProperties(CorsEndpointProperties.class) public class WebFluxEndpointManagementContextConfiguration extends Object; // @ManagementContextConfiguration for Reactive @Endpoint concerns.\n", "des": "Auto-configuration for exposing actuator web endpoints using WebFlux."}
{"index": 475, "repo": "beam-sdks-java-core-2.49.0", "code": "package coders;\n\nInterface CoderProviderRegistrar; // Coder creators have the ability to automatically have their coders registered with this SDK by creating a ServiceLoader entry and a concrete implementation of this interface.\nInterface DelegateCoder.CodingFunction<InputT,OutputT>; // A CodingFunction<InputT, OutputT> is a serializable function from InputT to OutputT that may throw any Exception.\nClass AtomicCoder<T>; // A Coder that has no component Coders or other configuration.\nClass AvroCoder<T>; // Avro related classes are deprecated in module beam-sdks-java-core and will be eventually removed.\nClass AvroCoder.JodaTimestampConversion; // Conversion for DateTime.\nClass AvroGenericCoder; // Avro related classes are deprecated in module beam-sdks-java-core and will be eventually removed.\nClass BigDecimalCoder; // A BigDecimalCoder encodes a BigDecimal as an integer scale encoded with VarIntCoder and a BigInteger encoded using BigIntegerCoder.\nClass BigEndianIntegerCoder; // A BigEndianIntegerCoder encodes Integers in 4 bytes, big-endian.\nClass BigEndianLongCoder; // A BigEndianLongCoder encodes Longs in 8 bytes, big-endian.\nClass BigEndianShortCoder; // A BigEndianShortCoder encodes Shorts in 2 bytes, big-endian.\nClass BigIntegerCoder; // A BigIntegerCoder encodes a BigInteger as a byte array containing the big endian two's-complement representation, encoded via ByteArrayCoder.\nClass BitSetCoder; // Coder for BitSet.\nClass BooleanCoder; // A Coder for Boolean.\nClass ByteArrayCoder; // A Coder for byte[].\nClass ByteCoder; // A ByteCoder encodes Byte values in 1 byte using Java serialization.\nClass Coder<T>; // A Coder<T> defines how to encode and decode values of type T into byte streams.\nClass Coder.Context; // To implement a coder, do not use any Coder.Context.\nClass CoderProvider; // A CoderProvider provides Coders.\nClass CoderProviders; // Static utility methods for creating and working with CoderProviders.\nClass CoderRegistry; // A CoderRegistry allows creating a Coder for a given Java class or type descriptor.\n", "des": "Defines Coders to specify how data is encoded to and decoded from byte strings."}
{"index": 2010, "repo": "spring-boot-devtools-3.1.1", "code": "package filewatch;\n\npublic final class ChangedFile extends Object; // A single file that has changed.\npublic static enum ChangedFile.Type extends Enum<ChangedFile.Type>; // Change types.\npublic final class ChangedFiles extends Object implements Iterable<ChangedFile>; // A collections of files from a specific source directory that have changed.\n@FunctionalInterface public interface FileChangeListener; // Callback interface when file changes are detected.\npublic class FileSystemWatcher extends Object; // Watches specific directories for file changes.\n@FunctionalInterface public interface FileSystemWatcherFactory; // Factory used to create new FileSystemWatcher instances.\npublic interface SnapshotStateRepository; // Repository used by FileSystemWatcher to save file/directory snapshots across restarts.\n", "des": "Class to watch the local filesystem for changes."}
{"index": 1776, "repo": "slf4j-api-2.0.7", "code": "package slf4j;\n\npackage slf4j.helpers; // Helper classes.\npackage slf4j.spi; // Classes and interfaces which are internal to SLF4J.\npublic interface ILoggerFactory; // ILoggerFactory instances manufacture Logger instances by name.\npublic interface IMarkerFactory; // Implementations of this interface are used to manufacture Marker instances.\npublic interface Logger; // The org.slf4j.Logger interface is the main user entry point of SLF4J API.\npublic final class LoggerFactory extends Object; // The LoggerFactory is a utility class producing Loggers for various logging APIs, most notably for log4j, logback and JDK 1.4 logging.\npublic class LoggerFactoryFriend extends Object; // All methods in this class are reserved for internal use, for testing purposes.\npublic interface Marker extends Serializable; // Markers are named objects used to enrich log statements.\npublic class MarkerFactory extends Object; // MarkerFactory is a utility class producing Marker instances as appropriate for the logging system currently in use.\npublic class MDC extends Object; // This class hides and serves as a substitute for the underlying logging system's MDC implementation.\npublic static class MDC.MDCCloseable extends Object implements Closeable; // An adapter to remove the key when done.\n", "des": "Core logging interfaces."}
{"index": 3165, "repo": "tika-core-2.8.0", "code": "package utils;\n\nClass AnnotationUtils; // This class contains utilities for dealing with tika annotations\nClass CharsetUtils;\nClass CompareUtils;\nClass ConcurrentUtils; // Utility Class for Concurrency in Tika\nClass DateUtils; // Date related utility methods and constants\nClass ExceptionUtils;\nClass FileProcessResult;\nClass ParserUtils; // Helper util methods for Parsers themselves.\nClass ProcessUtils;\nClass RegexUtils; // Inspired from Nutch code class OutlinkExtractor.\nClass RereadableInputStream; // Wraps an input stream, reading it only once, but making it available for rereading an arbitrary number of times.\nClass ServiceLoaderUtils; // Service Loading and Ordering related utils\nClass StreamGobbler;\nClass StringUtils;\nClass SystemUtils; // Copied from commons-lang to avoid requiring the dependency\nClass XMLReaderUtils; // Utility functions for reading XML.\n", "des": "Utilities."}
{"index": 2580, "repo": "camel-api-4.0.0-RC1", "code": "package spi;\n\npackage spi.annotations; // SPI annotations for plugins\npublic interface AggregationRepository; // Access to a repository to store aggregated exchanges to support pluggable implementations.\npublic interface AnnotationBasedProcessorFactory; // Factory to create Processor for annotation based EIPs.\npublic interface AnnotationScanTypeConverters; // A TypeConverter which is capable of annotation scanning for Converter classes and add these as type converters.\n@Retention(RUNTIME) @Documented @Target(FIELD) public @interface ApiMethod; // Represents an API method as part of a parent API.\n@Retention(RUNTIME) @Documented @Target(FIELD) public @interface ApiParam; // Used for annotating a UriParam parameter that its for use by API based endpoints.\n@Retention(RUNTIME) @Documented @Target(TYPE) public @interface ApiParams; // Used to annotate a nested configuration parameter type (such as a nested Configuration object) which can then be used on a API based component, endpoint.\n@Retention(RUNTIME) @Documented @Target({TYPE,METHOD,FIELD,PARAMETER}) public @interface AsEndpointUri; // Indicates that the Camel string/expression should be used as an endpoint uri.\n@Retention(RUNTIME) @Documented @Target({TYPE,METHOD,FIELD,PARAMETER}) public @interface AsPredicate; // Indicates that the Camel language/expression should be used as predicate.\npublic interface AsyncProcessorAwaitManager extends StaticService; // A manager to handle async routing engine, when Exchanges are being handed over from one thread to another, while the callee thread is blocked waiting for the other threads to complete, before it can continue.\npublic static interface AsyncProcessorAwaitManager.AwaitThread; // Information about the thread and exchange that are inflight.\npublic static interface AsyncProcessorAwaitManager.Statistics; // Utilization statistics of this manager.\npublic interface AuthorizationPolicy extends Policy; // A marker for defining the policy to be used for applying authorization to routes.\npublic interface AutowiredLifecycleStrategy extends LifecycleStrategy; // Marker interface for LifecycleStrategy that are used for auto-wiring components, data formats and languages.\npublic interface BacklogTracer; // Backlog tracer that captures the last N messages during routing in a backlog.\npublic interface BacklogTracerEventMessage; // Represents a traced message by the BacklogTracer.\n", "des": "Service Provider Interfaces used by the Camel runtime which are plugin strategies."}
{"index": 703, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package context;\n\nClass IntegrationFlowContext; // A public API for dynamic (manual) registration of IntegrationFlow, not via standard bean registration phase.\nClass IntegrationFlowRegistration; // Instances of this classes are returned as a result of IntegrationFlowContext.registration(IntegrationFlow) invocation and provide an API for some useful IntegrationFlow options and its lifecycle.\n", "des": "The context support classes for Spring Integration Java DSL."}
{"index": 1135, "repo": "hadoop-yarn-api-3.3.6", "code": "package impl;\n\nClass LightWeightResource; // LightWeightResource extends Resource to handle base resources such as memory and CPU.\n", "des": "Package org.apache.hadoop.yarn.api.records.impl contains classes which define basic resources."}
{"index": 3457, "repo": "hibernate-core-5.6.15.Final", "code": "package persistent;\n\nClass DeleteHandlerImpl;\nClass Helper;\nClass PersistentTableBulkIdStrategy; // This is a strategy that mimics temporary tables for databases which do not support temporary tables.\nClass UpdateHandlerImpl;\n", "des": "Package contains an implementation of MultiTableBulkIdStrategy based on the use of a persistent (ANSI SQL term) table to hold id values."}
{"index": 3076, "repo": "spring-ws-core-4.0.5", "code": "package core;\n\npublic final class EndpointReference extends Object implements Serializable; // Represents an Endpoint Reference, as defined in the WS-Addressing specification.\npublic final class MessageAddressingProperties extends Object implements Serializable; // Represents a set of Message Addressing Properties, as defined in the WS-Addressing specification.\n", "des": "Core package for WS-Addressing support."}
